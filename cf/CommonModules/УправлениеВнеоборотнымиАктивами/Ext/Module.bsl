// Функция возвращает счета учета по выбранному объекту строительства.
//
// Параметры:
//  Организация - организация, по которой выполняется поиск
//  Объект      - объект строительства, по которому выполняется поиск
//
// Возвращаемое значение:
//  Структура - структура, содержащая счета учета объекта строительства
// 
Функция ПолучитьСчетаУчетаОбъектовСтроительства(Организация, Объект) Экспорт

	Результат = Новый Структура("СчетУчета, СчетУчетаНДС");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ПустойОбъект",      Справочники.ОбъектыСтроительства.ПустаяСсылка());
	Запрос.УстановитьПараметр("Объект",            Объект);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &Организация И
	|	ОбъектСтроительства = &ПустойОбъект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &Объект
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|ВЫБРАТЬ
	|	СчетБухгалтерскогоУчета КАК СчетУчета,
	|	СчетБухгалтерскогоУчетаНДС КАК СчетУчетаНДС
	|ИЗ
	|	РегистрСведений.ОбъектыСтроительстваОрганизаций КАК ОбъектыСтроительстваОрганизаций
	|
	|ГДЕ
	|	Организация = &ПустаяОрганизация И
	|	ОбъектСтроительства = &ПустойОбъект";
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда

		Результат.СчетУчета  = Выборка.СчетУчета;
		Результат.СчетУчетаНДС = Выборка.СчетУчетаНДС;

	КонецЕсли;

	Возврат Результат;

КонецФункции //ПолучитьСчетаУчетаОбъектовСтроительства()

// Функция определяет фактический срок использования актива (в месяцах)
// исходя из даты принятия актива к учету и даты выбытия
//
// Параметры:
//   ДатаПринятияКУчету - дата принятия актива к учету
//   ДатаВыбытия - дата выбытия актива
//
// Возвращаемое значение:
//   Число месяцев.
//
Функция ОпределитьФактическийСрокИспользования(ДатаПринятияКУчету, ДатаВыбытия) Экспорт
	
	КоличествоЛет     = Год(ДатаВыбытия) - Год(ДатаПринятияКУчету);
	КоличествоМесяцев = Месяц(ДатаВыбытия) - Месяц(ДатаПринятияКУчету);
	
	Возврат КоличествоЛет * 12 + КоличествоМесяцев;
	
КонецФункции // ОпределитьФактическийСрокИспользования()

Функция ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
																						   
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.Период
	|ПОМЕСТИТЬ НелинейныйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И МетодНачисленияАмортизацииНУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Нелинейный)) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитикаОрганизаций.Период
	|ПОМЕСТИТЬ ЛинейныйМетод
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|ГДЕ
	|	УчетнаяПолитикаОрганизаций.Организация = &Организация
	|	И УчетнаяПолитикаОрганизаций.МетодНачисленияАмортизацииНУ = ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|	И УчетнаяПолитикаОрганизаций.Период МЕЖДУ ДАТАВРЕМЯ(2009, 1, 1) И &НачалоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(МИНИМУМ(ЛинейныйМетод.Период), ДАТАВРЕМЯ(2009, 1, 1)) КАК ДатаПереходаКЛинейномуМетоду
	|ИЗ
	|	НелинейныйМетод КАК НелинейныйМетод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛинейныйМетод КАК ЛинейныйМетод
	|		ПО НелинейныйМетод.Период < ЛинейныйМетод.Период";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
																															   
	Возврат Выборка.ДатаПереходаКЛинейномуМетоду;
	
КонецФункции // ПолучитьДатуПереходаКЛинейномуМетоду()

Функция ПолучитьНормуПоАмортизационнойГруппе(АмортизационнаяГруппа)
	
	НормаАмортизации = Неопределено;
	
	Если АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПерваяГруппа Тогда НормаАмортизации         = 14.3
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВтораяГруппа Тогда НормаАмортизации    =  8.8
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ТретьяГруппа Тогда НормаАмортизации    =  5.6
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ЧетвертаяГруппа Тогда НормаАмортизации =  3.8
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ПятаяГруппа Тогда НормаАмортизации     =  2.7
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ШестаяГруппа Тогда НормаАмортизации    =  1.8
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.СедьмаяГруппа Тогда НормаАмортизации   =  1.3
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ВосьмаяГруппа Тогда НормаАмортизации   =  1.0
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДевятаяГруппа Тогда НормаАмортизации   =  0.8
	ИначеЕсли АмортизационнаяГруппа = Перечисления.АмортизационныеГруппы.ДесятаяГруппа Тогда НормаАмортизации   =  0.7
	КонецЕсли;
	
	Возврат НормаАмортизации;
	
КонецФункции // ПолучитьНормуПоАмортизационнойГруппе()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ АМОРТИЗАЦИИ ОС

// Начисляет амортизацию по группе ОС или всем ОС в организации по БУ и НУ.
//
Процедура НачислениеАмортизации(ДокументОбъект, 
                                СтруктураШапкиДокумента, 
                                СписокОС                    = Неопределено,
                                ПоддержкаПБУ18              = Неопределено,
                                УчетнаяПолитика             = Неопределено,
                                ОтражатьВБухгалтерскомУчете = Истина,
                                ОтражатьВНалоговомУчете     = Истина,
                                Отказ, 
                                Заголовок) Экспорт
								
	Если ОтражатьВБухгалтерскомУчете Тогда 							
	
		Если СтруктураШапкиДокумента = Неопределено Тогда
			СтруктураШапкиДокумента = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(ДокументОбъект);
		КонецЕсли;
		
		Проводки = ДокументОбъект.Движения.Хозрасчетный;
		
		// {УчетДоходовИРасходовИП
		ОСН_ФизЛицо = СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя;
		// }УчетДоходовИРасходовИП
		
		// Начисление амортизации ОС в бухгалтерском учете.
		ТабАмортизации  = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииОС(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОС, ДокументОбъект,, СтруктураШапкиДокумента.ОтражатьВНалоговомУчете, Отказ);
		
		//ТабАмортизации.Колонки.Бух.Имя = "Сумма";
		ТабАмортизации.Колонки.ОсновноеСредство.Имя  = "ОбъектУчета";
		ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокументОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух");
			
		// Начисление амортизации ОС в налоговом учете (по налогу на прибыль).
		Если ОтражатьВНалоговомУчете Тогда
			
			НачислениеАмортизационнойПремии(ДокументОбъект, СтруктураШапкиДокумента, ТабАмортизации, Отказ, Заголовок);
			// {УчетДоходовИРасходовИП
			Если ОСН_ФизЛицо Тогда
			
				ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРеглФизЛицо(ДокументОбъект, СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОС);
				
				ТабАмортизации.Колонки.Налог.Имя = "СуммаАмортизации";
				ТабАмортизации.Колонки.ОС.Имя = "ОбъектУчета";
				ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокументОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "");
				ДоходыИРасходыПредпринимателя.ОтражениеАмортизации(ДокументОбъект, СтруктураШапкиДокумента, ТабЗатрат, УчетнаяПолитика);
				ДокументОбъект.Движения.ИППрочиеРасходы.Записать(Ложь);
				
			КонецЕсли;
			// }УчетДоходовИРасходовИП

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // НачислениеАмортизации()

// Рассчитывает сумму амортизации по указанному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать амортизацию.
//  ДатаРасчета                                 - Дата - Дата расчета амортизации
//
// Возвращаемое значение:
//   Число - Сумма начисленной амортизации
//
Функция РасчетАмортизацииОС(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ДокументОбъект = Неопределено, ВыдаватьСообщения = Истина, ОтражатьВНУ = Истина, Отказ = Ложь) Экспорт
	
	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОсновноеСредство",          Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",               ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",    Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("КоличествоКоэффициентов",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизации",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("ПодразделениеОрганизации",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("ОрганизацияУП",                ?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация), Организация.ГоловнаяОрганизация, Организация));
	Запрос.УстановитьПараметр("НачалоГода",                   НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериодаУП",              НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",                       ДатаРасчета);
	Запрос.УстановитьПараметр("Регистратор",                  ?(ДокументОбъект = Неопределено, Неопределено, ДокументОбъект.Ссылка));
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация));

	Если ОсновноеСредство = Неопределено Тогда
		УсловиеПоОС = "";
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		УсловиеПоОС = " И ОсновноеСредство В (&ОсновноеСредство)";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизацииНУ,
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПоддержкаПБУ18 КАК ПоддержкаПБУ18
	|ПОМЕСТИТЬ УчетнаяПолитикаОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериодаУП, Организация = &ОрганизацияУП) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СнятыеСУчета
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета) И
	|	СостоянияОСОрганизаций.ДатаСостояния < &Период И
	|	СостоянияОСОрганизаций.Организация = &Организация " + УсловиеПоОС + " 
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство     КАК ОсновноеСредство,
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюБУ
	|ПОМЕСТИТЬ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + " 
	|	И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииБухгалтерскийУчетСрезПоследних	
	|ГДЕ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство     КАК ОсновноеСредство,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюНУ
	|ПОМЕСТИТЬ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация " + УсловиеПоОС + "
	|	И ОсновноеСредство НЕ В (ВЫБРАТЬ ОсновноеСредство ИЗ СнятыеСУчета)) КАК НачислениеАмортизацииНалоговыйУчетСрезПоследних	
	|ГДЕ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ
	|	СписокОС
	|ИЗ
	|	НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ 
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|ИЗ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство            КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер            КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости   КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость     КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки           КАК ПараметрВыработки
	|ПОМЕСТИТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство	
	|ГДЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство                         КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2009                        КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009       КАК ФактическийСрокИспользованияДо2009,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.Период                                   КАК ДатаПринятияКУчету
	|ПОМЕСТИТЬ
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство	
	|ГДЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыработкаОСОбороты.ОсновноеСредство  КАК ОсновноеСредство,
	|	ВыработкаОСОбороты.ПараметрВыработки КАК ПараметрВыработки,
	|	ВыработкаОСОбороты.КоличествоОборот  КАК ОбъемВыработки
	|ПОМЕСТИТЬ
	|	ВыработкаОС
	|ИЗ
	|	РегистрНакопления.ВыработкаОС.Обороты(&НачалоПериодаУП, &КонецПериода, Период, Организация = &Организация) КАК ВыработкаОСОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|	ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки	
	|	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство                            КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации   КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации           КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации                      КАК КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения                        КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период                                      КАК Период
	|ПОМЕСТИТЬ
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство           КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ПРДляВычисленияАмортизации КАК ПРДляВычисленияАмортизации
	|ПОМЕСТИТЬ
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство       КАК ОсновноеСредство,
	|	СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ
	|	СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство  КАК ОсновноеСредство,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГрафикАмортизации
	|ПОМЕСТИТЬ
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство                      КАК ОсновноеСредство,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации
	|ПОМЕСТИТЬ
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство, СпособыОтраженияРасходовПоАмортизации 
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК СпособыОтраженияРасходовПоАмортизации,
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент) КАК КоличествоКоэффициентов
	|ПОМЕСТИТЬ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка	В (ВЫБРАТЬ РАЗЛИЧНЫЕ СпособыОтраженияРасходовПоАмортизации ИЗ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних)
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка	
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизации 
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ ОСТолькоЛинейныйМетодНУ
	|ИЗ
	|	СписокОС КАК СписокОС
	|ГДЕ
	|	(СписокОС.ОсновноеСредство.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), 
	|	                                                    ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), 
	|		                                                ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа))
	|		                                                И СписокОС.ОсновноеСредство.ГруппаОС В (ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Здания), 
	|		                                                                                        ЗНАЧЕНИЕ(Перечисление.ГруппыОС.Сооружения))) 
	|		ИЛИ (СписокОС.ОсновноеСредство.АмортизационнаяГруппа = ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа))
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОСОрганизаций.ОсновноеСредство,
	|	МАКСИМУМ(СостоянияОСОрганизаций.Период) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияОСОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияОСОрганизаций.ОсновноеСредство
	|;
	|
	|";
	Запрос.Выполнить();
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		// Блокировка регистра бухгалтерии.
		
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы", 
		                                                "РегистрБухгалтерии", "Хозрасчетный", МенеджерВременныхТаблиц, "СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних");
														
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
		                                              Новый Диапазон(, КонецМесяца(ДатаРасчета)), Организация);
													  
		СтруктураИсточникаДанных = Новый Структура("Счет", "СчетНачисленияАмортизации");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
		
		// Блокировка регистра местонахождения.
		
		СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы, ИсточникДанных, ИмяВременнойТаблицы", 
		                                                "РегистрСведений", "МестонахождениеОСБухгалтерскийУчет", МенеджерВременныхТаблиц, "СписокОС");
														
		СтруктураЗначенийБлокировки = Новый Структура("Период, Организация", 
		                                              Новый Диапазон(, НачалоМесяца(ДатаРасчета)), Организация);
													  
		СтруктураИсточникаДанных = Новый Структура("ОсновноеСредство", "ОсновноеСредство");
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, СтруктураЗначенийБлокировки, СтруктураИсточникаДанных);
				
	КонецЕсли;
	
	Запрос.Текст =
	"////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1 КАК ОсновноеСредство,
	|	АмортизацияОСНачалоПериода.СуммаНУОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияОСПриПереходеКЛинейномуМетоду
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаПереходаКЛинейномуМетоду,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И (НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							ОСТолькоЛинейныйМетодНУ.ОсновноеСредство
	|						ИЗ
	|							ОСТолькоЛинейныйМетодНУ))) КАК АмортизацияОСНачалоПериода
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСНачалоПериода.Субконто1        КАК ОсновноеСредство,
	|	СтоимостьОСНачалоПериода.СуммаОстатокДт   КАК СтоимостьНачальныйОстаток,
	|	СтоимостьОСНачалоПериода.СуммаНУОстатокДт КАК СтоимостьНУНачальныйОстаток
	|ПОМЕСТИТЬ
	|	СтоимостьОСНачалоПериода
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериодаУП, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетУчета ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК СтоимостьОСНачалоПериода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОСКонецПериода.Субконто1        КАК ОсновноеСредство,
	|	СтоимостьОСКонецПериода.СуммаОстатокДт   КАК СтоимостьКонечныйОстаток,
	|	СтоимостьОСКонецПериода.СуммаНУОстатокДт КАК СтоимостьНУКонечныйОстаток,
	|	СтоимостьОСКонецПериода.СуммаПРОстатокДт КАК СтоимостьПРКонечныйОстаток
	|ПОМЕСТИТЬ
	|	СтоимостьОСКонецПериода
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетУчета ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК СтоимостьОСКонецПериода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСНачалоПериода.Субконто1        КАК ОсновноеСредство,
	|	АмортизацияОСНачалоПериода.Счет             КАК Счет,
	|	АмортизацияОСНачалоПериода.СуммаОстатокКт   КАК АмортизацияНачальныйОстаток,
	|	АмортизацияОСНачалоПериода.СуммаНУОстатокКт КАК АмортизацияНУНачальныйОстаток,
	|	АмортизацияОСНачалоПериода.СуммаОстатокДт   КАК ИзносНачальныйОстаток
	|ПОМЕСТИТЬ
	|	АмортизацияОСНачалоПериода
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериодаУП, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК АмортизацияОСНачалоПериода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = АмортизацияОСНачалоПериода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСКонецПериода.Субконто1        КАК ОсновноеСредство,
	|	АмортизацияОСКонецПериода.Счет             КАК Счет,
	|	АмортизацияОСКонецПериода.СуммаОстатокКт   КАК АмортизацияКонечныйОстаток,
	|	АмортизацияОСКонецПериода.СуммаНУОстатокКт КАК АмортизацияНУКонечныйОстаток,
	|	АмортизацияОСКонецПериода.СуммаПРОстатокКт КАК АмортизацияПРКонечныйОстаток,
	|	АмортизацияОСКонецПериода.СуммаОстатокДт   КАК ИзносКонечныйОстаток
	|ПОМЕСТИТЬ
	|	АмортизацияОСКонецПериода
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК АмортизацияОСКонецПериода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = АмортизацияОСКонецПериода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияОСОбороты.Субконто1              КАК ОсновноеСредство,
	|	СУММА(АмортизацияОСОбороты.СуммаОборотКт)   КАК АмортизацияОборот,
	|	СУММА(АмортизацияОСОбороты.СуммаНУОборотКт) КАК АмортизацияНУОборот,
	|	СУММА(АмортизацияОСОбороты.СуммаОборотДт)   КАК ИзносОборот
	|ПОМЕСТИТЬ
	|	АмортизацияОСОбороты
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериодаУП, 
	|	                                        &КонецПериода, 
	|	                                        Регистратор,
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК АмортизацияОСОбороты
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.Субконто1	
	|" + ?(ДокументОбъект = Неопределено, "", "
	|ГДЕ
	|	АмортизацияОСОбороты.Регистратор <> &Регистратор
	|") + "
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияОСОбороты.Субконто1
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство          КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетУчета                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьНаНачалоГода.Субконто1      КАК ОсновноеСредство,
	|	СтоимостьНаНачалоГода.СуммаОстатокДт КАК СтоимостьОстатокНаНачалоГода
	|ПОМЕСТИТЬ
	|	СтоимостьНаНачалоГода
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетУчета ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК СтоимостьНаНачалоГода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНаНачалоГода.Субконто1      КАК ОсновноеСредство,
	|	АмортизацияНаНачалоГода.СуммаОстатокКт КАК АмортизацияОстатокНаНачалоГода
	|ПОМЕСТИТЬ
	|	АмортизацияНаНачалоГода
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоГода, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК АмортизацияНаНачалоГода
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизационнаяПремия.Субконто1        КАК ОсновноеСредство,
	|	АмортизационнаяПремия.СуммаНУОстатокДт КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ПОМЕСТИТЬ
	|	АмортизационнаяПремия
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериодаУП,
	|	                                        Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаКапитальныеВложения),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|	                                        Организация = &Организация) КАК АмортизационнаяПремия	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = АмортизационнаяПремия.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение  КАК ПодразделениеОрганизации
	|ПОМЕСТИТЬ
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|ИЗ 
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, 
	|	                                                                 Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(СписокОС.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	СписокОС.ОсновноеСредство.Код КАК Код,
	|	СписокОС.ОсновноеСредство.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	ЕСТЬNULL(НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.НачислятьАмортизациюБУ, ЛОЖЬ) КАК НачислятьАмортизациюБУ, 
	|	ЕСТЬNULL(НачислениеАмортизацииНалоговыйУчетСрезПоследних.НачислятьАмортизациюНУ, ЛОЖЬ) КАК НачислятьАмортизациюНУ, 
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СтоимостьНачальныйОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.АмортизацияНачальныйОстаток, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(ВыработкаОС.ОбъемВыработки, 0) КАК Количество,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГрафикАмортизации,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимости,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизацииСпособы.КоличествоКоэффициентов, 0) КАК КоличествоКоэффициентов,
	|	ЕСТЬNULL(СтоимостьНаНачалоГода.СтоимостьОстатокНаНачалоГода, 0) - ЕСТЬNULL(АмортизацияНаНачалоГода.АмортизацияОстатокНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияНУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ПРДляВычисленияАмортизации, 0) КАК ПРДляВычисленияАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходов,
	|	ВЫБОР
	|		КОГДА СписокОС.ОсновноеСредство В
	|				(ВЫБРАТЬ
	|					ОСТолькоЛинейныйМетодНУ.ОсновноеСредство
	|				ИЗ
	|					ОСТолькоЛинейныйМетодНУ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|		ИНАЧЕ УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПоддержкаПБУ18 КАК ПоддержкаПБУ18,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ДатаПринятияКУчету КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СтоимостьНУНачальныйОстаток, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СтоимостьПРКонечныйОстаток, 0) КАК СтоимостьПРКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.АмортизацияНУНачальныйОстаток, 0) КАК АмортизацияНУНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.ИзносНачальныйОстаток, 0) КАК ИзносНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.АмортизацияПРКонечныйОстаток, 0) КАК АмортизацияПРКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.ИзносКонечныйОстаток, 0) КАК ИзносКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.АмортизацияНУОборот, 0) КАК АмортизацияНУОборот,
	|	ЕСТЬNULL(АмортизацияОСОбороты.ИзносОборот, 0) КАК ИзносОборот,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ЕСТЬNULL(АмортизационнаяПремия.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СуммаКапитальныхВложенийВключаемыхВРасходы,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2009, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияОСПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0)
	|	КОНЕЦ КАК АмортизацияПриПереходеКЛинейномуМетоду,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009, 0)
	|		ИНАЧЕ (ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияОСОрганизаций.ДатаВводаВЭксплуатацию)) - 1
	|	КОНЕЦ КАК ФактическийСрокПриПереходеКЛинейномуМетоду
	|ИЗ
	|	СписокОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ГрафикиАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСпособы
	|		ПО СпособыОтраженияРасходовПоАмортизацииСпособы.СпособыОтраженияРасходовПоАмортизации = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации
	|	ПО СписокОС.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСНачалоПериода
	|	ПО СписокОС.ОсновноеСредство = СтоимостьОСНачалоПериода.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОСКонецПериода
	|	ПО СписокОС.ОсновноеСредство = СтоимостьОСКонецПериода.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСНачалоПериода
	|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОСНачалоПериода.ОсновноеСредство
	|		 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОСНачалоПериода.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСКонецПериода
	|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОСКонецПериода.ОсновноеСредство
	|		 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОСКонецПериода.Счет
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСОбороты
	|	ПО СписокОС.ОсновноеСредство = АмортизацияОСОбороты.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаОС
	|	ПО СписокОС.ОсновноеСредство = ВыработкаОС.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследнихНаНачалоГода.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНаНачалоГода
	|	ПО СписокОС.ОсновноеСредство = СтоимостьНаНачалоГода.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНаНачалоГода
	|	ПО СписокОС.ОсновноеСредство = АмортизацияНаНачалоГода.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизационнаяПремия
	|	ПО СписокОС.ОсновноеСредство = АмортизационнаяПремия.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияОСПриПереходеКЛинейномуМетоду КАК АмортизацияОСПриПереходеКЛинейномуМетоду
	|	ПО СписокОС.ОсновноеСредство = АмортизацияОСПриПереходеКЛинейномуМетоду.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|	ПО СписокОС.ОсновноеСредство = СостоянияОСОрганизаций.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаОрганизацийСрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|	ПО (ИСТИНА)
	|ГДЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации)
	|	ИЛИ ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
	|";
	
	ВыборкаПоОС = Запрос.Выполнить().Выбрать();

	ТаблицаГрафиков = ПолучитьТаблицуГрафиков();

	Пока ВыборкаПоОС.Следующий() Цикл

		СуммаАмортизацииБУ = 0;
		СуммаАмортизацииНУ = 0;
		СуммаАмортизацииПР = 0;
		СуммаАмортизацииВР = 0;
		
		СуммаКапитальныхВложенийВключаемыхВРасходы = 0;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Не указан счет для начисления амортизации", ДокументОбъект, Отказ);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Пропустить = Ложь;
		КоэффициентДляВычисленияАмортизацииПР = 0;
		Если ВыборкаПоОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации Тогда
		
			Если ВыборкаПоОС.ПорядокПогашенияСтоимости = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации
			   И ВыборкаПоОС.НачислятьАмортизациюБУ Тогда
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СпособНачисленияАмортизации) Тогда
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Не указан способ начисления амортизации", ДокументОбъект, Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если (ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток) = 0 Тогда
					Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
				КонецЕсли;
				
				Если НЕ (ВыборкаПоОС.АмортизацияОборот = 0) Тогда
					Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Амортизация в этом месяце уже начислялась", ДокументОбъект, Отказ);
					КонецЕсли; 
					Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию 
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьДляВычисленияАмортизации) Тогда
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Стоимость для начисления амортизации равна нулю", ДокументОбъект, Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;

				Если (ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный 
				 ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования
				 ИЛИ ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
				   И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации) Тогда
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Срок использования равен нулю", ДокументОбъект, Отказ);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;

				Если НЕ Пропустить Тогда

					Если ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.Линейный Тогда
			 
						СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации/ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						Иначе
							КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
							СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
						КонецЕсли;

					ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции Тогда

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
							Пропустить = Истина;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
							Если ВыдаватьСообщения = Истина Тогда
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Объем продукции для вычисления не определен", ДокументОбъект, Отказ);
							КонецЕсли; 
							Пропустить = Истина;
						КонецЕсли;
						
						Если Пропустить Тогда
							СуммаАмортизации = 0
						Иначе
							СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / ВыборкаПоОС.ОбъемПродукцииРаботДляВычисленияАмортизации;
						КонецЕсли;

					ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ Тогда

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
							Если ВыдаватьСообщения = Истина Тогда
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Коэффициент амортизации не определен", ДокументОбъект, Отказ);
							КонецЕсли; 
							Пропустить = Истина;
						КонецЕсли;
						
						Если Пропустить Тогда
							СуммаАмортизации = 0
						Иначе
						
							СуммаГодовойАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.КоэффициентАмортизации / 100;

							Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
								СуммаАмортизации   = СуммаГодовойАмортизации / 12;
							Иначе
								КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
								СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
							КонецЕсли;
							
						КонецЕсли;

					ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега Тогда

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.Количество) Тогда
							Пропустить = Истина;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентАмортизации) Тогда
							Если ВыдаватьСообщения Тогда
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Коэффициент амортизации не определен", ДокументОбъект, Отказ);
							КонецЕсли; 
							Пропустить = Истина;
						КонецЕсли;
					
						Если Пропустить Тогда
							СуммаАмортизации = 0
						Иначе
							СуммаАмортизации = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ВыборкаПоОС.Количество / 1000 * ВыборкаПоОС.КоэффициентАмортизации / 100 ;
						КонецЕсли;

					ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка Тогда

						Если Год(ВыборкаПоОС.Период) = Год(ДатаРасчета) Тогда
							СтоимостьИтоговая = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
						Иначе
							СтоимостьИтоговая = ВыборкаПоОС.СтоимостьНаНачалоГода;
						КонецЕсли;

						СуммаГодовойАмортизации = СтоимостьИтоговая / ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации * 12;

						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
							СуммаАмортизации   = СуммаГодовойАмортизации / 12;
						Иначе
							КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
							СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
						КонецЕсли;
						
						КоэффициентУскорения = ВыборкаПоОС.КоэффициентУскорения;
						Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.КоэффициентУскорения) Тогда
							КоэффициентУскорения = 1;
							Если ВыдаватьСообщения Тогда
								СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Коэффициент ускорения не заполнен", ДокументОбъект, Отказ);
							КонецЕсли;
						КонецЕсли;

						СуммаАмортизации = СуммаАмортизации * КоэффициентУскорения;

					ИначеЕсли ВыборкаПоОС.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования Тогда

						//Дата последнего изменения параметров
						Если ВыборкаПоОС.Период = NULL Тогда
							СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Не определилась дата начала использования (изменения параметров)", ДокументОбъект, Отказ);
							Пропустить = Истина;
						КонецЕсли; 
						
						Если Пропустить Тогда
							СуммаАмортизации = 0
						Иначе
						
							ДатаНачалаРасчета = НачалоМесяца(ДобавитьМесяц(ВыборкаПоОС.Период, 1));

							ЧислоЛетПользования = ВыборкаПоОС.СрокИспользованияДляВычисленияАмортизации / 12;
							ЧислоЛетПользования = Цел(ЧислоЛетПользования) + ?(ЧислоЛетПользования - Цел(ЧислоЛетПользования) > 0, 1, 0);
							ЧислоЛетПрошедших   = Цел(ОпределитьФактическийСрокИспользования(ДатаНачалаРасчета, ДатаРасчета) / 12);
							ЧислоЛетОставшихся  = ЧислоЛетПользования - ЧислоЛетПрошедших;

							// Формула суммы чисел от 1 до N
							//		S = (N + 1) * N / 2
							СуммаЧиселЛет = (ЧислоЛетПользования + 1) * ЧислоЛетПользования / 2;
							
							ПроцентГодовойАмортизации = ЧислоЛетОставшихся / СуммаЧиселЛет;
							СуммаГодовойАмортизации   = ВыборкаПоОС.СтоимостьДляВычисленияАмортизации * ПроцентГодовойАмортизации;

							Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.ГрафикАмортизации) Тогда
								СуммаАмортизации   = СуммаГодовойАмортизации / 12;
							Иначе
								КоэффициентПериода = ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, ВыборкаПоОС.ГрафикАмортизации, ДатаРасчета);
								СуммаАмортизации   = СуммаГодовойАмортизации * КоэффициентПериода;
							КонецЕсли;
							
						КонецЕсли;

					КонецЕсли;

					ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток;
					СуммаАмортизацииБУ   = Окр(Макс(0, Мин(СуммаАмортизации, ВсегоОсталосьСписать)), 2);
					КоэффициентДляВычисленияАмортизацииПР = СуммаАмортизации / ВыборкаПоОС.СтоимостьДляВычисленияАмортизации;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ОтражатьВНУ Тогда
			
			Если ВыборкаПоОС.ПорядокВключенияСтоимостиВСоставРасходов = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации
				И НЕ ВыборкаПоОС.СчетНачисленияАмортизации.Забалансовый
				И ВыборкаПоОС.НачислятьАмортизациюНУ Тогда
				
				Если (ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток) = 0 Тогда
					Пропустить = Истина; // остаточная стоимость на начало месяца равна 0
				КонецЕсли;
				
				Если НЕ (ВыборкаПоОС.АмортизацияНУОборот = 0) Тогда
					Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Амортизация (НУ) в этом месяце уже начислялась", ДокументОбъект, Отказ);
					КонецЕсли; 
					Пропустить = Истина; // по указанному ОС в этом месяце уже начисляли амортизацию 
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.МетодНачисленияАмортизации) Тогда
					Если ВыдаватьСообщения Тогда
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указан метод начисления амортизации (НУ) в учетной политике организации.
						|Укажите метод начисления амортизации (меню ""Предприятие"" - ""Учетная политика"" на " + Формат(НачалоГода(ДатаРасчета), "ДФ='MMММ yyyy ""г.""'") + ").", ВыборкаПоОС.ОсновноеСредство, Отказ, ДокументОбъект);							
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНУНачальныйОстаток) Тогда
					//Стоимость на начало месяца = 0. 
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный 
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.СрокПолезногоИспользованияНУ) Тогда
					
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Срок использования равен нулю", ДокументОбъект, Отказ);
					КонецЕсли; 
					Продолжить;
					
				ИначеЕсли ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоОС.АмортизационнаяГруппа) Тогда
					
					Если ВыдаватьСообщения Тогда
						СообщитьОбОшибкеПриНачисленииАмортизации(ВыборкаПоОС, "Не указана амортизационная группа", ДокументОбъект, Отказ);
					КонецЕсли; 
					Продолжить;
					
				КонецЕсли;
				
				Если НЕ Пропустить Тогда
					
					СуммаАмортизации = 0;
					
					СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоОС.СрокПолезногоИспользованияНУ);
					
					СпециальныйКоэффициент = ?(ВыборкаПоОС.СпециальныйКоэффициент = 0, 1, ВыборкаПоОС.СпециальныйКоэффициент);
					
					Если ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
						
						СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияПриПереходеКЛинейномуМетоду;
						СрокИспользованияДляВычисления = СрокИспользованияДляВычисления - ВыборкаПоОС.ФактическийСрокПриПереходеКЛинейномуМетоду;
						
						СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления * СпециальныйКоэффициент;
						
					ИначеЕсли ВыборкаПоОС.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
						
						НормаАмортизации = ПолучитьНормуПоАмортизационнойГруппе(ВыборкаПоОС.АмортизационнаяГруппа);
						
						Если НЕ (НормаАмортизации = Неопределено) Тогда
							
							СуммаАмортизации = (СтоимостьДляВычисления - ВыборкаПоОС.АмортизацияНУНачальныйОстаток)
							* НормаАмортизации / 100 
							* СпециальныйКоэффициент;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ВсегоОсталосьСписать = ВыборкаПоОС.СтоимостьНУНачальныйОстаток - ВыборкаПоОС.АмортизацияНУНачальныйОстаток;
					
					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);
					
					Если СуммаАмортизацииНУ > 0 Тогда
						СуммаКапитальныхВложенийВключаемыхВРасходы = ВыборкаПоОС.СуммаКапитальныхВложенийВключаемыхВРасходы;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если КоэффициентДляВычисленияАмортизацииПР = 0 И СпециальныйКоэффициент <> Неопределено
				И СрокИспользованияДляВычисления <> Неопределено И СрокИспользованияДляВычисления > 0 Тогда
				КоэффициентДляВычисленияАмортизацииПР = СпециальныйКоэффициент / СрокИспользованияДляВычисления;
			КонецЕсли;
			
			ВсегоОсталосьСписатьПР = ВыборкаПоОС.СтоимостьПРКонечныйОстаток - ВыборкаПоОС.АмортизацияПРКонечныйОстаток;
			СуммаАмортизацииПР = Окр(ВыборкаПоОС.ПРДляВычисленияАмортизации * КоэффициентДляВычисленияАмортизацииПР, 2);
			
			// учтем тот факт, что сумма амортизации ПР может быть отрицательной, поэтому сравнение делаем по абсолютным величинам
			Если Макс(СуммаАмортизацииПР, -СуммаАмортизацииПР) > Макс(ВсегоОсталосьСписатьПР, -ВсегоОсталосьСписатьПР) Тогда
				СуммаАмортизацииПР = ВсегоОсталосьСписатьПР;
			КонецЕсли;
			
			СуммаАмортизацииВР = СуммаАмортизацииБУ - СуммаАмортизацииНУ - СуммаАмортизацииПР;
			
		КонецЕсли;
		
		Если СуммаАмортизацииБУ > 0
		 ИЛИ СуммаАмортизацииНУ > 0
		 ИЛИ СуммаАмортизацииПР <> 0
		 ИЛИ СуммаАмортизацииВР <> 0 Тогда
	
			СтрокаАмортизации = ТаблицаАмортизации.Добавить();

			СтрокаАмортизации.ОсновноеСредство          = ВыборкаПоОС.ОсновноеСредство;
			СтрокаАмортизации.СчетУчета                 = ВыборкаПоОС.СчетУчета;
			СтрокаАмортизации.СчетНачисленияАмортизации = ВыборкаПоОС.СчетНачисленияАмортизации;
			СтрокаАмортизации.ИмяСубконто               = "ОсновныеСредства";
			СтрокаАмортизации.НаправлениеАмортизации    = ВыборкаПоОС.СпособыОтраженияРасходовПоАмортизации;
			СтрокаАмортизации.КоличествоКоэффициентов   = ВыборкаПоОС.КоличествоКоэффициентов;
			СтрокаАмортизации.СуммаАмортизации          = СуммаАмортизацииБУ;
			СтрокаАмортизации.СуммаАмортизацииНУ        = СуммаАмортизацииНУ;
			СтрокаАмортизации.СуммаАмортизацииПР        = ?(ВыборкаПоОС.ПоддержкаПБУ18, СуммаАмортизацииПР, 0);
			СтрокаАмортизации.СуммаАмортизацииВР        = ?(ВыборкаПоОС.ПоддержкаПБУ18, СуммаАмортизацииВР, 0);
			СтрокаАмортизации.ПодразделениеОрганизации  = ВыборкаПоОС.ПодразделениеОрганизации;
			
			СтрокаАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы = СуммаКапитальныхВложенийВключаемыхВРасходы;
			
		КонецЕсли;
			
	КонецЦикла;
		
	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииОС()

Процедура НачислениеАмортизационнойПремии(ДокументОбъект, СтруктураШапкиДокумента, ТабАмортизации, Отказ, Заголовок)
	
	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	Проводки = ДокументОбъект.Движения.Хозрасчетный;
	
	// Включение амортизационной премии в состав расходов.
	Если ТабАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы") > 0 Тогда
		
		ТабКапитальныхВложений = ТабАмортизации.СкопироватьКолонки();
		
		СписокОС = Новый Массив();
		Для Каждого СтрокаТабАмортизации Из ТабАмортизации Цикл
			Если СтрокаТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы > 0 Тогда
				СписокОС.Добавить(СтрокаТабАмортизации.ОбъектУчета);
			КонецЕсли;
		КонецЦикла;
		
		СубконтоКВ = Новый Массив();
		СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		СубконтоКВ.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыАмортизационнойПремии);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Период",      НачалоМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.УстановитьПараметр("СчетКВ",      ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения);
		Запрос.УстановитьПараметр("СубконтоКВ",  СубконтоКВ);
		Запрос.УстановитьПараметр("СписокОС",    СписокОС);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
		|	ХозрасчетныйОстатки.Субконто2 КАК ДокументАмортизационнойПремии,
		|	ХозрасчетныйОстатки.Субконто2.СчетУчетаЗатратПоАмортизационнойПремии КАК СчетУчетаЗатратПоАмортизационнойПремии,
		|	ХозрасчетныйОстатки.Субконто2.ПодразделениеОрганизацииПоАмортизационнойПремии КАК ПодразделениеОрганизацииПоАмортизационнойПремии,
		|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии1 КАК СубконтоПоАмортизационнойПремии1,
		|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии2 КАК СубконтоПоАмортизационнойПремии2,
		|	ХозрасчетныйОстатки.Субконто2.СубконтоПоАмортизационнойПремии3 КАК СубконтоПоАмортизационнойПремии3,
		|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК Сумма,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&Период,
		|		Счет = &СчетКВ,
		|		&СубконтоКВ,
		|		Организация = &Организация
		|			И Субконто1 В (&СписокОС)
		|			И (Субконто2 ССЫЛКА Документ.ПринятиеКУчетуОС
		|				ИЛИ Субконто2 ССЫЛКА Документ.МодернизацияОС)) КАК ХозрасчетныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		&Период,
		|		Организация = &Организация
		|		    И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|		ПО ХозрасчетныйОстатки.Субконто1 = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		&КонецМесяца,
		|		Организация = &Организация
		|		    И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ХозрасчетныйОстатки.Субконто1 = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки,
		|	РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних
		|";
		ВыборкаПоКВ = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоКВ.Следующий() Цикл
			
			// Списываем амортизационную премию со счета КВ.
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Амортизационная премия";
			Проводка.СуммаНУКт    = ВыборкаПоКВ.Сумма;
			
			Проводка.СчетКт          = ПланыСчетов.Хозрасчетный.РасходыНаКапитальныеВложения;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства",               ВыборкаПоКВ.ОсновноеСредство);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ДокументыАмортизационнойПремии", ВыборкаПоКВ.ДокументАмортизационнойПремии);
				
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, ВыборкаПоКВ.ПодразделениеОрганизации, "Кт");
			
			// Начисляем амортизационную премию.
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = "Амортизационная премия";
			
			Проводка.СчетДт          = ВыборкаПоКВ.СчетУчетаЗатратПоАмортизационнойПремии;
			
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ВыборкаПоКВ.СубконтоПоАмортизационнойПремии3);
			
			Проводка.СчетКт          = ВыборкаПоКВ.СчетУчета;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "ОсновныеСредства", ВыборкаПоКВ.ОсновноеСредство);
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, ВыборкаПоКВ.ПодразделениеОрганизацииПоАмортизационнойПремии, ВыборкаПоКВ.ПодразделениеОрганизации);
			
			Если ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП" Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(ВыборкаПоКВ.Сумма,
				                                              ВыборкаПоКВ.Сумма,
				                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -ВыборкаПоКВ.Сумма, 0),
				                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -ВыборкаПоКВ.Сумма, 0),
				                                              ,
				                                              ,
				                                              Проводка,
				                                              СтруктураШапкиДокумента.ПрименениеПБУ18);
			Иначе
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(ВыборкаПоКВ.Сумма,
				                                              ВыборкаПоКВ.Сумма,
				                                              ,
				                                              ,
				                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -ВыборкаПоКВ.Сумма, 0),
				                                              ?(СтруктураШапкиДокумента.ПрименениеПБУ18, -ВыборкаПоКВ.Сумма, 0),
				                                              Проводка,
				                                              СтруктураШапкиДокумента.ПрименениеПБУ18);
			КонецЕсли;
				
		КонецЦикла;
				
	КонецЕсли;
			
КонецПроцедуры

Функция ВыбытиеОС(ДокументОбъект, СтруктураШапкиДокумента, СписокОС, СодержаниеПроводки, Отказ, Заголовок, ОтражатьВНалоговомУчете = Истина, ЭтоНелинейный = Ложь) Экспорт
	
	ТаблицаОстаточнойСтоимости = Новый ТаблицаЗначений;
	ТаблицаОстаточнойСтоимости.Колонки.Добавить("ОсновноеСредство",         Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаОстаточнойСтоимости.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаОстаточнойСтоимости.Колонки.Добавить("ОстаточнаяСтоимость",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаОстаточнойСтоимости.Колонки.Добавить("ОстаточнаяСтоимостьНУ",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаОстаточнойСтоимости.Колонки.Добавить("ОстаточнаяСтоимостьВР",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаОстаточнойСтоимости.Колонки.Добавить("ОстаточнаяСтоимостьПР",    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если СтруктураШапкиДокумента.Свойство("ПодразделениеОрганизации") Тогда
		ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
	Иначе
		ПодразделениеОрганизации = Неопределено;
	КонецЕсли;
	
	Проводки = ДокументОбъект.Движения.Хозрасчетный;
	
	ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииОС(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОС, ДокументОбъект,, ОтражатьВНалоговомУчете);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТабАмортизации", ТабАмортизации);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.СуммаАмортизации КАК СуммаАмортизации,
	|	ВнешнийИсточник.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ВнешнийИсточник.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ВнешнийИсточник.СуммаАмортизацииВР КАК СуммаАмортизацииВР,
	|	ВнешнийИсточник.СуммаКапитальныхВложенийВключаемыхВРасходы КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ПОМЕСТИТЬ 
	|   ТабАмортизации
	|ИЗ 
	|	&ТабАмортизации КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	ТабАмортизации.Колонки.ОсновноеСредство.Имя = "ОбъектУчета";
	ТабЗатрат = УправлениеВнеоборотнымиАктивами.ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокументОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, "Бух");
	
	НачислениеАмортизационнойПремии(ДокументОбъект, СтруктураШапкиДокумента, ТабАмортизации, Отказ, Заголовок);
	СтруктураШапкиДокумента.Вставить("СуммаКапитальныхВложенийВключаемыхВРасходы",ТабАмортизации.Итог("СуммаКапитальныхВложенийВключаемыхВРасходы"));
	
	ТабИзноса  = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация, СписокОС,, ДокументОбъект);
	
	Проводки =  ДокументОбъект.Движения.Хозрасчетный;
	
	Для Каждого СтрокаИзноса Из ТабИзноса Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаИзноса.Износ) тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();
		
		Проводка.Период       = СтруктураШапкиДокумента.Дата;
		Проводка.Содержание   = "Износ основных средств";
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаИзноса.Износ;
		
		Проводка.СчетДт = СтрокаИзноса.СчетНачисленияИзноса;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаИзноса.СчетНачисленияИзноса, Проводка.СубконтоДт, 1, СтрокаИзноса.ОсновноеСредство);
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаИзноса.ПодразделениеОрганизации, "Дт");
		
		Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТабИзноса", ТабИзноса);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.Износ КАК СуммаИзноса
	|ПОМЕСТИТЬ 
	|   ТабИзноса
	|ИЗ 
	|	&ТабИзноса КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("ДатаДокумента",  СтруктураШапкиДокумента.Дата);
	Запрос.УстановитьПараметр("Организация",    СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("Ссылка",         СтруктураШапкиДокумента.Ссылка);
	Запрос.УстановитьПараметр("СписокОС",       СписокОС);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СписаниеОСОС.НомерСтроки) КАК НомерСтроки,
	|	СписаниеОСОС.ОсновноеСредство КАК ОсновноеСредство
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Документ." + ДокументОбъект.Ссылка.Метаданные().Имя + ".ОС КАК СписаниеОСОС
	|ГДЕ
	|	СписаниеОСОС.Ссылка = &Ссылка И СписаниеОСОС.ОсновноеСредство В (&СписокОС)
	|СГРУППИРОВАТЬ ПО
	|	СписаниеОСОС.ОсновноеСредство
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство          КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета                 КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаДокумента, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство	
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтоимостьОС.Субконто1        КАК ОсновноеСредство,
	|	СтоимостьОС.Счет             КАК Счет,
	|	СтоимостьОС.СуммаОстатокДт   КАК СуммаОстатокДт,
	|	СтоимостьОС.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	|	СтоимостьОС.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	|	СтоимостьОС.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	|	СтоимостьОС.СуммаОстатокКт   КАК СуммаОстатокКт,
	|	СтоимостьОС.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	|	СтоимостьОС.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	|	СтоимостьОС.СуммаВРОстатокКт КАК СуммаВРОстатокКт
	|ПОМЕСТИТЬ
	|	СтоимостьОС
	|ИЗ 
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаДокумента, 
	|	                                        Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ СчетУчета ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	                                                ОБЪЕДИНИТЬ
	|	                                                ВЫБРАТЬ РАЗЛИЧНЫЕ СчетНачисленияАмортизации ИЗ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), 
	|	                                        Организация = &Организация) КАК СтоимостьОС
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОС
	|	ПО СписокОС.ОсновноеСредство = СтоимостьОС.Субконто1	
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокОС.НомерСтроки,
	|	СписокОС.ОсновноеСредство,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ЕСТЬNULL(СтоимостьОС.СуммаОстатокДт, 0) КАК СтоимостьОС,
	|	ЕСТЬNULL(СтоимостьОС.СуммаНУОстатокДт, 0) - ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьОСНУ,
	|	ЕСТЬNULL(СтоимостьОС.СуммаПРОстатокДт, 0) КАК СтоимостьОСПР,
	|	ЕСТЬNULL(СтоимостьОС.СуммаВРОстатокДт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьОСВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизации, 0) КАК АмортизацияОС,
	|	ЕСТЬNULL(АмортизацияОС.СуммаНУОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияОСНУ,
	|	ЕСТЬNULL(АмортизацияОС.СуммаПРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияОСПР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаВРОстатокКт, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияОСВР,
	|	ЕСТЬNULL(АмортизацияОС.СуммаОстатокДт, 0) + ЕСТЬNULL(ТабИзноса.СуммаИзноса, 0) КАК ИзносОС,
	|	ВЫБОР КОГДА (ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВБухгалтерскомУчете,
	|	ВЫБОР КОГДА (ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК ОтражалосьВНалоговомУчете,
	|	ВЫБОР КОГДА (ОС_СнятыеСУчета.ОсновноеСредство) ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК СнятоСУчета
	|ИЗ
	|	СписокОС
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаДокумента, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаДокумента, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК СтоимостьОС
	|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС.ОсновноеСредство
	|		 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОС.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьОС КАК АмортизацияОС
	|		ПО СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|		 И СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаДокумента, Организация = &Организация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|	ПО СписокОС.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство КАК ОсновноеСредство
	|		ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизацииСрезПоследних
	|		ГДЕ
	|			СостоянияОСОрганизацииСрезПоследних.ДатаСостояния < &ДатаДокумента И
	|			СостоянияОСОрганизацииСрезПоследних.Организация = &Организация И
	|			СостоянияОСОрганизацииСрезПоследних.ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ СписокОС) И
	|			СостоянияОСОрганизацииСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
	|		ДЛЯ ИЗМЕНЕНИЯ
	|			РегистрСведений.СостоянияОСОрганизаций) КАК ОС_СнятыеСУчета
	|	ПО СписокОС.ОсновноеСредство = ОС_СнятыеСУчета.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации
	|	ПО СписокОС.ОсновноеСредство = ТабАмортизации.ОсновноеСредство
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТабИзноса
	|	ПО СписокОС.ОсновноеСредство = ТабИзноса.ОсновноеСредство
	|";
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОС.Следующий() Цикл
		
		// Проверка полученных данных.
		
		Если НЕ ВыборкаОС.ОтражалосьВБухгалтерскомУчете Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <" + ВыборкаОС.ОсновноеСредство + "> не принималось к учету в организации <" + СтруктураШапкиДокумента.Организация + ">.");
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаОС.СнятоСУчета Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <" + ВыборкаОС.ОсновноеСредство + "> снято с учета в организации <" + СтруктураШапкиДокумента.Организация + ">.");
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаОС.ПодразделениеОрганизации <> СтруктураШапкиДокумента.ПодразделениеОрганизации Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Основное средство <" + ВыборкаОС.ОсновноеСредство + "> не отражалось в учете в подразделении <" + СтруктураШапкиДокумента.ПодразделениеОрганизации + ">.");
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаОС.СчетУчета) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <" + ВыборкаОС.ОсновноеСредство + "> не указан счет учета.");
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаОС.ПорядокПогашенияСтоимостиБУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <" + ВыборкаОС.ОсновноеСредство + "> не установлен порядок погашения стоимости.");
			Продолжить;
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете
		   И ВыборкаОС.ОтражалосьВНалоговомУчете
		   И НЕ ЗначениеЗаполнено(ВыборкаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <" + ВыборкаОС.ОсновноеСредство + "> не установлен порядок включения стоимости в состав расходов (налог. учет).");
			Продолжить;
		КонецЕсли;
		
		Если ВыборкаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		 ИЛИ ВыборкаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		
			Если НЕ ЗначениеЗаполнено(ВыборкаОС.СчетНачисленияАмортизации) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <" + ВыборкаОС.ОсновноеСредство + "> не указан счет начисления амортизации.");
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли ВыборкаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
			
			Если НЕ ЗначениеЗаполнено(ВыборкаОС.СчетНачисленияАмортизации) Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Для основного средства <" + ВыборкаОС.ОсновноеСредство + "> не указан счет начисления износа.");
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// Движения по регистру СобытияОСОрганизаций
		Движение = ДокументОбъект.Движения.СобытияОСОрганизаций.Добавить();
		
		Движение.Период            = СтруктураШапкиДокумента.Дата;
		Движение.ОсновноеСредство  = ВыборкаОС.ОсновноеСредство;
		Движение.Организация       = СтруктураШапкиДокумента.Организация;
		Движение.Событие           = СтруктураШапкиДокумента.СобытиеОС;
		Движение.НазваниеДокумента = Строка(СтруктураШапкиДокумента.Ссылка.Метаданные());
		Движение.НомерДокумента    = СтруктураШапкиДокумента.Номер;
		
		Если ВыборкаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации 
		 ИЛИ ВыборкаОС.ПорядокПогашенияСтоимостиБУ = Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ Тогда
		
			// Движения по регистру НачислениеАмортизации (бухгалтерский учет)
			Движение = ДокументОбъект.Движения.НачислениеАмортизацииОСБухгалтерскийУчет.Добавить();
			
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство     = ВыборкаОС.ОсновноеСредство;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.НачислятьАмортизацию = Ложь;
			
		КонецЕсли;
		
		Если ОтражатьВНалоговомУчете
           И ВыборкаОС.ОтражалосьВНалоговомУчете
		   И ВыборкаОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации Тогда
		
			// Движения по регистру НачислениеАмортизации (налоговый учет)
			Движение = ДокументОбъект.Движения.НачислениеАмортизацииОСНалоговыйУчет.Добавить();
			
			Движение.Период               = СтруктураШапкиДокумента.Дата;
			Движение.ОсновноеСредство     = ВыборкаОС.ОсновноеСредство;
			Движение.Организация          = СтруктураШапкиДокумента.Организация;
			Движение.НачислятьАмортизацию = Ложь;
			
		КонецЕсли;
		
		// Движения по регистру бухгалтерии.
		ПодразделениеПроводки = ?(ПодразделениеОрганизации <> Неопределено,
		                          ПодразделениеОрганизации,
		                          ВыборкаОС.ПодразделениеОрганизации);
		
		// Списание амортизации Дт 02.01 Кт 01.09
		СуммаПроводки   = ВыборкаОС.АмортизацияОС;
		СуммаПроводкиНУ = ?(ЭтоНелинейный, 0, ВыборкаОС.АмортизацияОСНУ);
		СуммаПроводкиПР = ?(ЭтоНелинейный, 0, ВыборкаОС.АмортизацияОСПР);
		СуммаПроводкиВР = ?(ЭтоНелинейный, 0, ВыборкаОС.АмортизацияОСВР);
		
		Если СуммаПроводки > 0 
		 ИЛИ СуммаПроводкиНУ > 0
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Активность   = Истина;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт                                                                        = ВыборкаОС.СчетНачисленияАмортизации;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = ВыборкаОС.ОсновноеСредство;
			
			Проводка.СчетКт                                                                        = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = ВыборкаОС.ОсновноеСредство;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, ПодразделениеПроводки, ПодразделениеПроводки);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			   И ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			КонецЕсли;

		КонецЕсли;
			
		// Списание износа Кт 010
		СуммаПроводки = ВыборкаОС.ИзносОС;
		
		Если СуммаПроводки <> 0 Тогда

			Проводка = Проводки.Добавить();

			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Активность   = Истина;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетКт                                                                        = ВыборкаОС.СчетНачисленияАмортизации;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = ВыборкаОС.ОсновноеСредство;

			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, ПодразделениеПроводки, "Кт");
			
		КонецЕсли;
		
		// Списание балансовой стоимости Дт 01.09 Кт 01.01
		СуммаПроводки   = ВыборкаОС.СтоимостьОС;
		СуммаПроводкиНУ = ?(ЭтоНелинейный, 0, ВыборкаОС.СтоимостьОСНУ);
		СуммаПроводкиПР = ?(ЭтоНелинейный, 0, ВыборкаОС.СтоимостьОСПР);
		СуммаПроводкиВР = ?(ЭтоНелинейный, 0, ВыборкаОС.СтоимостьОСВР);
		
		Если СуммаПроводки > 0 
		 ИЛИ СуммаПроводкиНУ > 0
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда
			
			Проводка = Проводки.Добавить();
			
			Проводка.Период       = СтруктураШапкиДокумента.Дата;
			Проводка.Активность   = Истина;
			Проводка.Организация  = СтруктураШапкиДокумента.Организация;
			Проводка.Содержание   = СодержаниеПроводки;
			Проводка.Сумма        = СуммаПроводки;
			
			Проводка.СчетДт                                                                        = ПланыСчетов.Хозрасчетный.ВыбытиеОС;
			Проводка.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = ВыборкаОС.ОсновноеСредство;
			
			Проводка.СчетКт                                                                        = ВыборкаОС.СчетУчета;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства] = ВыборкаОС.ОсновноеСредство;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, ПодразделениеПроводки, ПодразделениеПроводки);
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			   И ОтражатьВНалоговомУчете Тогда
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПроводкиНУ,СуммаПроводкиНУ,СуммаПроводкиПР,СуммаПроводкиПР,СуммаПроводкиВР,СуммаПроводкиВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			КонецЕсли;
			
		КонецЕсли;
		
		// Вычисление остаточной стоимости ОС
		СуммаПроводки = ВыборкаОС.СтоимостьОС - ВыборкаОС.АмортизацияОС;
		
		Если ОтражатьВНалоговомУчете Тогда
			СуммаПроводкиНУ = ВыборкаОС.СтоимостьОСНУ - ВыборкаОС.АмортизацияОСНУ;
			СуммаПроводкиПР = ВыборкаОС.СтоимостьОСПР - ВыборкаОС.АмортизацияОСПР;
			СуммаПроводкиВР = ВыборкаОС.СтоимостьОСВР - ВыборкаОС.АмортизацияОСВР;
		Иначе
			СуммаПроводкиНУ = 0;
			СуммаПроводкиПР = 0;
			СуммаПроводкиВР = 0;
		КонецЕсли;
						  
		Если СуммаПроводки > 0 
		 ИЛИ СуммаПроводкиНУ > 0
		 ИЛИ СуммаПроводкиПР <> 0 
		 ИЛИ СуммаПроводкиВР <> 0 Тогда

			НоваяСтрока = ТаблицаОстаточнойСтоимости.Добавить();
			НоваяСтрока.ОсновноеСредство         = ВыборкаОС.ОсновноеСредство;
			НоваяСтрока.ПодразделениеОрганизации = ПодразделениеПроводки;
			НоваяСтрока.ОстаточнаяСтоимость      = СуммаПроводки;
			НоваяСтрока.ОстаточнаяСтоимостьНУ    = СуммаПроводкиНУ;
			НоваяСтрока.ОстаточнаяСтоимостьПР    = СуммаПроводкиПР;
			НоваяСтрока.ОстаточнаяСтоимостьВР    = СуммаПроводкиВР;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТаблицаОстаточнойСтоимости;
	
КонецФункции

// {УчетДоходовИРасходовИП
Функция РасчетАмортизацииНалогРеглФизЛицо(Объект, ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, ДатаРегистратора = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("ОС",                                         Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",                          Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",                                ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(16));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",                     Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаАмортизации.Колонки.Добавить("ДокументОплаты");
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияКонечныйОстаток");
	ТаблицаАмортизации.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаАмортизации.Колонки.Добавить("ХарактерДеятельности");
	ТаблицаАмортизации.Колонки.Добавить("Налог",                                      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходы", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("РеквизитыДокументаОплаты");
		
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Если ДатаРегистратора = Неопределено Тогда
		КонецПериодаРасчета = Новый Граница(Объект.Ссылка.МоментВремени(), ВидГраницы.Исключая);		
	Иначе
		КонецПериодаРасчета = ДатаРегистратора;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",								Организация);
	Запрос.УстановитьПараметр("НачалоПериода",								НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",								КонецПериодаРасчета);
	Запрос.УстановитьПараметр("Период",                                     ДатаРасчета);
	Запрос.УстановитьПараметр("СнятоСУчета",								Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("ПорядокВключенияСтоимостиВСоставРасходов",	Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	Запрос.УстановитьПараметр("ВидМПЗ_ОС",        							Перечисления.ВидыМПЗ.ОС);
	
	МассивКоэфф = Новый Массив;
	
	Если ОсновноеСредство = Неопределено Тогда
		ТекстУсловия = "";
	Иначе
		Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
		ТекстУсловия =           " И ОсновноеСредство В (&ОсновноеСредство)";
		ТекстУсловияНоменклатуры =           " И Номенклатура В (&ОсновноеСредство)";
		ТекстУсловияСтатьиЗатрат =           " И СтатьяЗатрат В (&ОсновноеСредство)";
	Конецесли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ПРЕДСТАВЛЕНИЕ(НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
	|	НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство.Код КАК Код,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.МетодНачисленияАмортизации,
	|	ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ЕСТЬNULL(СтоимостьОСНачалоПериода.СуммаОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьОСКонецПериода.СуммаОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСНачалоПериода.СуммаОборот, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСКонецПериода.СуммаОборот, 0) КАК АмортизацияКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияОСОбороты.СуммаОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	НаправленияАмортизации.СпособыОтраженияРасходовПоАмортизации КАК НаправлениеАмортизации,
	|	СтоимостьОСНачалоПериода.Партия КАК РасчетныйДокумент,
	|	СтоимостьОСНачалоПериода.ДокументОплаты КАК ДокументОплаты,
	|	СтоимостьОСНачалоПериода.НоменклатурнаяГруппа,
	|	СтоимостьОСНачалоПериода.ХарактерДеятельности
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация" + ТекстУсловияНоменклатуры + "
	|				И ВидМПЗ = &ВидМПЗ_ОС
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК СтоимостьОСКонецПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + "
	|					И ПорядокВключенияСтоимостиВСоставРасходов = &ПорядокВключенияСтоимостиВСоставРасходов) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Номенклатура = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловия + "
	|					И НачислятьАмортизацию = ИСТИНА
	|					И (НЕ ОсновноеСредство В
	|							(ВЫБРАТЬ
	|								СостоянияОСОрганизаций.ОсновноеСредство
	|							ИЗ
	|								РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|							ГДЕ
	|								СостоянияОСОрганизаций.Состояние = &СнятоСУчета
	|								И СостоянияОСОрганизаций.ДатаСостояния < &Период
	|								И СостоянияОСОрганизаций.Организация = &Организация))) КАК НачислениеАмортизацииНалоговыйУчетСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Номенклатура = НачислениеАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Номенклатура = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИПМПЗ.Остатки(
	|				&НачалоПериода,
	|				Организация = &Организация" + ТекстУсловияНоменклатуры + "
	|					И ВидМПЗ = &ВидМПЗ_ОС
	|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК СтоимостьОСНачалоПериода
	|		ПО СтоимостьОСКонецПериода.Номенклатура = СтоимостьОСНачалоПериода.Номенклатура
	|			И СтоимостьОСКонецПериода.Партия = СтоимостьОСНачалоПериода.Партия
	|			И СтоимостьОСКонецПериода.ДокументОплаты = СтоимостьОСНачалоПериода.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИППрочиеРасходы.Обороты(, &НачалоПериода, , Организация = &Организация" + ТекстУсловияСтатьиЗатрат + ") КАК АмортизацияОСНачалоПериода
	|		ПО СтоимостьОСКонецПериода.Номенклатура = АмортизацияОСНачалоПериода.СтатьяЗатрат
	|			И СтоимостьОСКонецПериода.Партия = АмортизацияОСНачалоПериода.РасчетныйДокумент
	|			И СтоимостьОСКонецПериода.ДокументОплаты = АмортизацияОСНачалоПериода.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИППрочиеРасходы.Обороты(, &КонецПериода, , Организация = &Организация" + ТекстУсловияСтатьиЗатрат + ") КАК АмортизацияОСКонецПериода
	|		ПО СтоимостьОСКонецПериода.Номенклатура = АмортизацияОСКонецПериода.СтатьяЗатрат
	|			И СтоимостьОСКонецПериода.Партия = АмортизацияОСКонецПериода.РасчетныйДокумент
	|			И СтоимостьОСКонецПериода.ДокументОплаты = АмортизацияОСКонецПериода.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИППрочиеРасходы.Обороты(&НачалоПериода, &КонецПериода, , Организация = &Организация" + ТекстУсловияСтатьиЗатрат + ") КАК АмортизацияОСОбороты
	|		ПО СтоимостьОСКонецПериода.Номенклатура = АмортизацияОСОбороты.СтатьяЗатрат
	|			И СтоимостьОСКонецПериода.Партия = АмортизацияОСОбороты.РасчетныйДокумент
	|			И СтоимостьОСКонецПериода.ДокументОплаты = АмортизацияОСОбороты.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних
	|		ПО СтоимостьОСКонецПериода.Номенклатура = СпециальныйКоэффициентДляАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоПериода, Организация = &Организация" + ТекстУсловия + ") КАК НаправленияАмортизации
	|		ПО СтоимостьОСКонецПериода.Номенклатура = НаправленияАмортизации.ОсновноеСредство
	|ИТОГИ
	|	СУММА(СтоимостьНачальныйОстаток),
	|	СУММА(СтоимостьКонечныйОстаток),
	|	СУММА(АмортизацияНачальныйОстаток),
	|	СУММА(АмортизацияКонечныйОстаток),
	|	СУММА(АмортизацияОборот)
	|ПО
	|	ОсновноеСредство";

	ВыборкаПоОС = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ОсновноеСредство");
	
	Пока ВыборкаПоОС.Следующий() Цикл

		Если ВыборкаПоОС.ОсновноеСредство = NULL Тогда // отсутствуют первоначальные сведения об объекте
			Продолжить;
		КонецЕсли;
		
		ВыборкаСтрокиЗапроса = ВыборкаПоОС.Выбрать();
		ВыборкаСтрокиЗапроса.Следующий();
		
		ТекстСообщения = "Налог. расчет амортизации: для основного средства " + СокрЛП(ВыборкаСтрокиЗапроса.ОсновноеСредствоПредставление)
		               + " (" + СокрЛП(ВыборкаСтрокиЗапроса.Код) + ")";
		
		Если (ВыборкаПоОС.СтоимостьНачальныйОстаток - ВыборкаПоОС.АмортизацияНачальныйОстаток) = 0 Тогда
			Продолжить; // остаточная стоимость на начало месяца равна 0
		КонецЕсли;
		
		Если НЕ (ВыборкаПоОС.АмортизацияОборот = 0) Тогда
			Если ВыдаватьСообщения И НЕ (ОсновноеСредство = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 
			Продолжить; // по указанному ОС в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации = 0;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан метод начисления амортизации");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоОС.СтоимостьНачальныйОстаток) Тогда
			//Стоимость на начало месяца = 0. 
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.СрокПолезногоИспользования) Тогда
			Если ВыдаватьСообщения Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		СуммаАмортизации       = 0;
		СтоимостьДляВычисления = ВыборкаПоОС.СтоимостьНачальныйОстаток;
		СрокИспользованияДляВычисления = Макс(1, ВыборкаСтрокиЗапроса.СрокПолезногоИспользования);

		Если ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
			СуммаАмортизации = Окр(СтоимостьДляВычисления / СрокИспользованияДляВычисления, 2, 1);

		ИначеЕсли ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.ПоЕНАОФ Тогда
			СуммаАмортизации = Окр(СтоимостьДляВычисления * ВыборкаСтрокиЗапроса.КоэффициентАмортизации / 1200 * ?((ВыборкаСтрокиЗапроса.СпециальныйКоэффициент = 0 ), 1, ВыборкаСтрокиЗапроса.СпециальныйКоэффициент), 2, 1);
		КонецЕсли;

		Остатки = ВыборкаПоОС.СтоимостьКонечныйОстаток - ВыборкаПоОС.АмортизацияКонечныйОстаток;

		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));
		
		МассивКоэфф.Очистить();
		НачКоличСтрокТабАмортизации = ТаблицаАмортизации.Количество();
		
		ВыборкаСтрокиЗапроса.Сбросить();
		Пока ВыборкаСтрокиЗапроса.Следующий() Цикл
		
			МассивКоэфф.Добавить(ВыборкаСтрокиЗапроса.СтоимостьНачальныйОстаток);
			
			СтрокаАмортизации = ТаблицаАмортизации.Добавить();
			СтрокаАмортизации.ОС							= ВыборкаСтрокиЗапроса.ОсновноеСредство;
			СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаСтрокиЗапроса.НаправлениеАмортизации;
			СтрокаАмортизации.РасчетныйДокумент				= ВыборкаСтрокиЗапроса.РасчетныйДокумент;
			СтрокаАмортизации.ДокументОплаты				= ВыборкаСтрокиЗапроса.ДокументОплаты;
			СтрокаАмортизации.НоменклатурнаяГруппа			= ВыборкаСтрокиЗапроса.НоменклатурнаяГруппа;
			СтрокаАмортизации.ХарактерДеятельности			= ВыборкаСтрокиЗапроса.ХарактерДеятельности;
			СтрокаАмортизации.АмортизацияКонечныйОстаток	= ВыборкаСтрокиЗапроса.АмортизацияКонечныйОстаток;
		КонецЦикла;
		
		МассивСуммАмортизации = ОбщегоНазначения.РаспределитьПропорционально(СуммаАмортизации, МассивКоэфф, 2);
		
		Если МассивСуммАмортизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если МассивСуммАмортизации.Количество() > 0 Тогда
			Для Индекс = 0 По МассивСуммАмортизации.Количество() - 1 Цикл
				ТаблицаАмортизации[НачКоличСтрокТабАмортизации + Индекс].Налог = МассивСуммАмортизации[Индекс];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл
// }УчетДоходовИРасходовИП

// Рассчитывает сумму износа по указаному основному средству по бух учету
//
// Параметры
//  ОсновноеСредство                            - СправочникСсылка.ОсновныеСредства - ОС, по которому 
//                                                нужно рассчитать износ.
//  ДатаРасчета                                 - Дата - Дата расчета износа
//                                                Износ рассчитывается помесячно с начала года по заданную дату.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Список ОС с суммой рассчитанного износа
//
Функция РасчетИзносаБухРегл(ДатаРасчета, Организация, ОсновноеСредство = Неопределено, ВыдаватьСообщения = Истина, ДокументОбъект = Неопределено, Отказ = Ложь) Экспорт
	
	// Запрос определяет, являются ли объекты, перечисленные в параметре ОсновноеСредство, 
	// подлежащими начислению износа, и вычисляет их остаточную стоимость на дату расчета.
	//  В результате возвращается список только тех из переданных ОС, 
	// на которые действительно должен быть начислен износ на дату расчета.
	//
	//  Если параметр ОсновноеСредство не задан, возвращается список всех ОС,
	// у которых ПорядокПогашенияСтоимости = НачислениеИзноса и есть остаточная стоимость на дату расчета
	
	СубконтоОС = Новый Массив();
	СубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	Запрос = Новый Запрос();

	Запрос.УстановитьПараметр("КонецПериода", ?(ДокументОбъект = Неопределено, ДатаРасчета, Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая)));
	Запрос.УстановитьПараметр("ПорядокПогашенияСтоимости", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);
	Запрос.УстановитьПараметр("Состояние",                 Перечисления.СостоянияОС.СнятоСУчета);
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство",          ОсновноеСредство);
	Запрос.УстановитьПараметр("СубконтоОС",                СубконтоОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) КАК ОстаточнаяСтоимость
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&КонецПериода,
	|																			ПорядокПогашенияСтоимости = &ПорядокПогашенияСтоимости 
	|																			И Организация = &Организация
	|                                                                           " + ?(ЗначениеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&КонецПериода, 
	|																				  Организация = &Организация
	|																				  " + ?(ЗначениеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , &СубконтоОС,
	|																	 Организация = &Организация
	|																	 " + ?(ЗначениеЗаполнено(ОсновноеСредство), "И Субконто1 В(&ОсновноеСредство)", "") + ") КАК ВосстановительнаяСтоимость
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = ВосстановительнаяСтоимость.Субконто1
	|			 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета        = ВосстановительнаяСтоимость.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, , &СубконтоОС,
	|																	 Организация = &Организация
	|																	 " + ?(ЗначениеЗаполнено(ОсновноеСредство), "И Субконто1 В(&ОсновноеСредство)", "") + ") КАК Износ
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство          = Износ.Субконто1
	|			 И СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = Износ.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|ГДЕ
	|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) - ЕСТЬNULL(Износ.СуммаОстатокДт, 0) > 0
	|	И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство НЕ В 
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			СостоянияОСОрганизаций.ОсновноеСредство КАК ОсновноеСредство
	|		 ИЗ
	|			РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(&КонецПериода, Организация = &Организация " + ?(ЗначениеЗаполнено(ОсновноеСредство), "И ОсновноеСредство В(&ОсновноеСредство)", "") + ") КАК СостоянияОСОрганизаций
	|		 ГДЕ
	|			СостоянияОСОрганизаций.Состояние = &Состояние)
	|" +
	?(ЗначениеЗаполнено(ОсновноеСредство), 
	  " И ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство В (&ОсновноеСредство)",
	  "");
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();
	
	МассивОС = ТаблицаОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	// Строим соответствие ОС -> ОстаточнаяСтоимость
	ОстаточнаяСтоимостьОС = Новый Соответствие();
	Для Каждого СтрокаОС из ТаблицаОС Цикл
		ОстаточнаяСтоимостьОС.Вставить(СтрокаОС.ОсновноеСредство, СтрокаОС.ОстаточнаяСтоимость);
	КонецЦикла;
	
	// Формируем запрос, собирающий параметры для расчета износа
	Запрос = Новый Запрос();
		
	Запрос.УстановитьПараметр("ПорядокПогашенияСтоимости", Перечисления.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ);
	Запрос.УстановитьПараметр("Организация",               Организация);
	Запрос.УстановитьПараметр("ОсновноеСредство",          МассивОС);
	Запрос.УстановитьПараметр("СубконтоОС",                СубконтоОС);
	
	Для НомерМесяца = 1 По Месяц(ДатаРасчета) Цикл
		
		НомерМесяцаСтр = СокрЛП(НомерМесяца);
		
		Запрос.УстановитьПараметр("НачалоМесяца" + НомерМесяцаСтр, ДобавитьМесяц(НачалоГода(ДатаРасчета), НомерМесяца - 1));

		Запрос.Текст = Запрос.Текст + ?(НомерМесяца > 1, 
		                                "ОБЪЕДИНИТЬ ВСЕ
		                                | ВЫБРАТЬ ",
		                                "ВЫБРАТЬ РАЗРЕШЕННЫЕ") +
										
		"
		|	ПервоначальныеСведения.ОсновноеСредство                КАК ОсновноеСредство,
		|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведения.ОсновноеСредство) КАК ОсновноеСредствоПредставление,
		|	ПервоначальныеСведения.ОсновноеСредство.Код            КАК Код,
		|	ПервоначальныеСведения.ИнвентарныйНомер                КАК ИнвентарныйНомер,
		|	СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации     КАК СчетНачисленияИзноса,		
		|	ВЫРАЗИТЬ(&НачалоМесяца" + НомерМесяцаСтр + " КАК ДАТА) КАК НачалоМесяца,
		|	ЕСТЬNULL(ВосстановительнаяСтоимость.СуммаОстатокДт, 0) КАК ВосстановительнаяСтоимость,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
		|	ПараметрыАмортизации.КоэффициентАмортизации            КАК НормаАмортизации
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ",
		|																			Организация = &Организация
		|																		    И ПорядокПогашенияСтоимости = &ПорядокПогашенияСтоимости
		|																		    И ОсновноеСредство В (&ОсновноеСредство)) КАК ПервоначальныеСведения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																				  Организация = &Организация
		|																				  И ОсновноеСредство В (&ОсновноеСредство)) КАК СчетаБухгалтерскогоУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоМесяца" + НомерМесяцаСтр + ", , &СубконтоОС,
		|																	 Организация = &Организация
		|																	 И Субконто1 В (&ОсновноеСредство)) КАК ВосстановительнаяСтоимость
		|			ПО СчетаБухгалтерскогоУчета.ОсновноеСредство = ВосстановительнаяСтоимость.Субконто1
		|			 И СчетаБухгалтерскогоУчета.СчетУчета        = ВосстановительнаяСтоимость.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки (&НачалоМесяца" + НомерМесяцаСтр + ", , &СубконтоОС,
		|																	  Организация = &Организация
		|																	  И Субконто1 В (&ОсновноеСредство)) КАК Износ
		|			ПО СчетаБухгалтерскогоУчета.ОсновноеСредство          = Износ.Субконто1
		|			 И СчетаБухгалтерскогоУчета.СчетНачисленияАмортизации = Износ.Счет
		|		ПО ПервоначальныеСведения.ОсновноеСредство = СчетаБухгалтерскогоУчета.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																							   Организация = &Организация
		|																							   И ОсновноеСредство В (&ОсновноеСредство)) КАК ПараметрыАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = ПараметрыАмортизации.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																				  Организация = &Организация
		|																				  И ОсновноеСредство В(&ОсновноеСредство)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведения.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&НачалоМесяца" + НомерМесяцаСтр + ", 
		|																									 Организация = &Организация 
		|																									 И ОсновноеСредство В (&ОсновноеСредство)
		|																									 И НачислятьАмортизацию = ИСТИНА) КАК НачислениеАмортизации
		|		ПО ПервоначальныеСведения.ОсновноеСредство = НачислениеАмортизации.ОсновноеСредство
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки
		|";
		
	КонецЦикла;
	
	ТаблицаОС = Запрос.Выполнить().Выгрузить();

	ТаблицаОС.Колонки.Добавить("Износ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	// Расчет износа по объектам ОС
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОС.НормаАмортизации) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(
				"Не определена годовая норма амортизационных отчислений для основного средства " + СокрЛП(СтрокаОС.ОсновноеСредствоПредставление) 
				                                                               + " (" + СокрЛП(СтрокаОС.Код) + "), инв. № " 
				                                                               + СокрЛП(СтрокаОС.ИнвентарныйНомер) + " на " 
			                                                                   + Формат(СтрокаОС.НачалоМесяца, "ДФ=dd.MM.yyyy") + ".
																			   |Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""ОС"").", СтрокаОС.ОсновноеСредство, Отказ, ДокументОбъект);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаОС.Износ = СтрокаОС.ВосстановительнаяСтоимость * СтрокаОС.НормаАмортизации / 1200;
	
	КонецЦикла;
	
	// Сворачиваем таблицу по ОС и счету начисления износа
	ТаблицаОС.Свернуть("ОсновноеСредство, СчетНачисленияИзноса, ПодразделениеОрганизации", "Износ");
	
	// Проверяем, не превышает ли рассчитанный износ остаточную стоимость ОС
	Для Каждого СтрокаОС Из ТаблицаОС Цикл
		
		СтрокаОС.Износ = Мин(СтрокаОС.Износ, ОстаточнаяСтоимостьОС[СтрокаОС.ОсновноеСредство]);
		
	КонецЦикла;
	
	Возврат ТаблицаОС;
	 
КонецФункции

// Получает сводную таблицу графиков - годовых и индивидуальных одним запросом - чтобы потом можно было 
// данные ез нее дергать, а не лазить в справочник за каждым значением
//
Функция ПолучитьТаблицуГрафиков()

	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Ссылка КАК График,
	|	Коэффициент1,
	|	Коэффициент2,
	|	Коэффициент3,
	|	Коэффициент4,
	|	Коэффициент5,
	|	Коэффициент6,
	|	Коэффициент7,
	|	Коэффициент8,
	|	Коэффициент9,
	|	Коэффициент10,
	|	Коэффициент11,
	|	Коэффициент12,
	|	Коэффициент1 + Коэффициент2 + Коэффициент3 + Коэффициент4 + Коэффициент5 + Коэффициент6 + Коэффициент7 + Коэффициент8 + Коэффициент9 + Коэффициент10 + Коэффициент11 + Коэффициент12 КАК СуммаКоэффициентов
	|ИЗ
	|	Справочник.ГодовыеГрафикиАмортизацииОС КАК ГодовыеГрафикиАмортизацииОС";

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуГрафиков

Функция ПолучитьКоэффициентАмортизацииИзГрафика(ТаблицаГрафиков, График, ДатаРасчета)

	КоэффициентАмортизации = 0;

	ТаблицаГрафиков.Индексы.Добавить("График");
	СтрокаТЧ = ТаблицаГрафиков.Найти(График, "График");
	Если СтрокаТЧ = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	СуммаВсех   = СтрокаТЧ.СуммаКоэффициентов;
	СуммаОдного = СтрокаТЧ["Коэффициент" + Месяц(ДатаРасчета)];

	КоэффициентАмортизации = СуммаОдного / ?(СуммаВсех = 0 ИЛИ СуммаВсех = NULL, 1, СуммаВсех);

	Возврат КоэффициентАмортизации;

КонецФункции // ПолучитьКоэффициентАмортизацииИзГрафика()

// Формирует сообщение об ошибке при начислении амортизации.
//
Процедура СообщитьОбОшибкеПриНачисленииАмортизации(Выборка, ТекстСообщения, ДокументОбъект = Неопределено, Отказ = Ложь)
	
	ТекстСообщенияОбОшибке = ТекстСообщения +" для основного средства " + СокрЛП(Выборка.ОсновноеСредствоПредставление)
	                       + " (" + СокрЛП(Выборка.Код) 
	                       + "), инв. № " + СокрЛП(Выборка.ИнвентарныйНомер) + ".
						   |Укажите эти данные в документах принятия к учету или изменения параметров начисления амортизации (Меню ""ОС"",""НМА"").";
		
	ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(ТекстСообщенияОбОшибке, Выборка.ОсновноеСредство, Отказ, ДокументОбъект);
	
КонецПроцедуры // СообщитьОбОшибкеПриНачисленииАмортизации()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА АМОРТИЗАЦИИ НМА и НИОКР

Функция РасчетАмортизацииНМА_НИОКР(ДатаРасчета, Организация, НематериальныйАктив = Неопределено, ДокументОбъект, ВыдаватьСообщения = Истина, ОтражатьВНУ = Истина, Отказ = Ложь) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("НематериальныйАктив",       Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));
	ТаблицаАмортизации.Колонки.Добавить("СчетУчета",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации", Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",               ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации",    Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("КоличествоКоэффициентов",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизации",          ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииНУ",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииВР",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("СуммаАмортизацииПР",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("ПодразделениеОрганизации",  Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	
	СписокНМА = ПолучитьСписокНМАОрганизации(Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая), Организация, Ложь, НематериальныйАктив);
	
	Если СписокНМА.Количество()=0 тогда
		//Не обнаружено объектов 
		Возврат ТаблицаАмортизации;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоГода",                   НачалоГода(ДатаРасчета));
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация",          ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Запрос.УстановитьПараметр("НачалоПериодаУП",              НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("НачалоПериода",                Новый Граница(НачалоМесяца(ДатаРасчета), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КонецПериода",                 КонецМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("Период",  	                  ДатаРасчета);
	Запрос.УстановитьПараметр("СписокНМА",                    СписокНМА);
	Запрос.УстановитьПараметр("Регистратор",                  ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаПереходаКЛинейномуМетоду", ПолучитьДатуПереходаКЛинейномуМетоду(ДатаРасчета, Организация));

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ КАК МетодНачисленияАмортизацииНУ,
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПоддержкаПБУ18 КАК ПоддержкаПБУ18
	|ПОМЕСТИТЬ УчетнаяПолитикаОрганизацийСрезПоследних
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&НачалоПериодаУП, Организация = &ГоловнаяОрганизация) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|ПОМЕСТИТЬ СписокНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			НематериальныйАктив В (&СписокНМА)
	|				И Организация = &Организация) КАК СостоянияНМАОрганизацийСрезПоследних
	|ГДЕ
	|	СостоянияНМАОрганизацийСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент КАК Коэффициент,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК Период,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ КАК ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009 КАК АмортизацияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию
	|ПОМЕСТИТЬ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|ГДЕ
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособОтраженияРасходов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка КАК СпособОтраженияРасходов,
	|	КОЛИЧЕСТВО(СпособыОтраженияРасходовПоАмортизацииСпособы.Коэффициент) КАК КоличествоКоэффициентов
	|ПОМЕСТИТЬ СпособыОтраженияРасходовПоАмортизацииСпособы
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов
	|			ИЗ
	|				СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициент
	|ПОМЕСТИТЬ НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|ИЗ
	|	РегистрСведений.НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчета,
	|	ВЫБОР
	|		КОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета
	|		ИНАЧЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|	КОНЕЦ КАК СчетНачисленияАмортизации	
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
	|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокДт КАК СуммаНУНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокДт КАК СуммаПРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокДт КАК СуммаВРНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУНачальныйОстатокКт КАК СуммаНУНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРНачальныйОстатокКт КАК СуммаПРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРНачальныйОстатокКт КАК СуммаВРНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокДт КАК СуммаНУКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокДт КАК СуммаПРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокДт КАК СуммаВРКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНУКонечныйОстатокКт КАК СуммаНУКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаПРКонечныйОстатокКт КАК СуммаПРКонечныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаВРКонечныйОстатокКт КАК СуммаВРКонечныйОстатокКт
	|ПОМЕСТИТЬ ХозрасчетныйОстаткиИОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В (&СписокНМА)) КАК ХозрасчетныйОстаткиИОбороты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.Субконто1 КАК НематериальныйАктив,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	|	СУММА(ХозрасчетныйОбороты.СуммаНУОборотКт) КАК СуммаНУОборотКт,
	|	СУММА(ХозрасчетныйОбороты.СуммаПРОборотКт) КАК СуммаПРОборотКт,
	|	СУММА(ХозрасчетныйОбороты.СуммаВРОборотКт) КАК СуммаВРОборотКт
	|ПОМЕСТИТЬ ХозрасчетныйОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В (&СписокНМА),
	|			,
	|			) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Субконто1
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК НематериальныйАктив,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СтоимостьНаНачалоГода
	|ПОМЕСТИТЬ СтоимостьНМАНаНачалоГода
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоГода,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И Субконто1 В (&СписокНМА)) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаНМАОбороты.НематериальныйАктив,
	|	ВыработкаНМАОбороты.КоличествоОборот
	|ПОМЕСТИТЬ ВыработкаНМАОбороты
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Организация = &Организация
	|				И НематериальныйАктив В (&СписокНМА)) КАК ВыработкаНМАОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияНМАОрганизаций.НематериальныйАктив,
	|	МАКСИМУМ(СостоянияНМАОрганизаций.Период) КАК ДатаВводаВЭксплуатацию
	|ПОМЕСТИТЬ СостоянияНМАОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|ГДЕ
	|	СостоянияНМАОрганизаций.Организация = &Организация
	|	И СостоянияНМАОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияНМАОрганизаций.НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НематериальныеАктивы.Ссылка КАК НематериальныйАктив
	|ПОМЕСТИТЬ НМАТолькоЛинейныйМетодНУ
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|ГДЕ
	|	НематериальныеАктивы.Ссылка В(&СписокНМА)
	|	И НематериальныеАктивы.АмортизационнаяГруппа В (ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ВосьмаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДевятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ДесятаяГруппа), ЗНАЧЕНИЕ(Перечисление.АмортизационныеГруппы.ОтдельнаяГруппа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АмортизацияНМАНачалоПериода.Субконто1 КАК НематериальныйАктив,
	|	АмортизацияНМАНачалоПериода.СуммаНУОстатокКт КАК АмортизацияНачальныйОстаток
	|ПОМЕСТИТЬ АмортизацияНМАПриПереходеКЛинейномуМетоду
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаПереходаКЛинейномуМетоду,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаНМАСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы),
	|			Организация = &Организация
	|				И (НЕ Субконто1 В
	|						(ВЫБРАТЬ
	|							НМАТолькоЛинейныйМетодНУ.НематериальныйАктив
	|						ИЗ
	|							НМАТолькоЛинейныйМетодНУ))) КАК АмортизацияНМАНачалоПериода
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписокНМА.НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(СписокНМА.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	СписокНМА.НематериальныйАктив.АмортизационнаяГруппа КАК АмортизационнаяГруппа,
	|	СписокНМА.НематериальныйАктив.Код КАК Код,
	|	СтоимостьНМА.Подразделение КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНачальныйОстатокДт, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУНачальныйОстатокДт, 0) КАК СтоимостьНУНачальныйОстаток,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРНачальныйОстатокДт, 0) КАК СтоимостьПРНачальныйОстаток,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНачальныйОстатокКт, 0) КАК АмортизацияНачальныйОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУНачальныйОстатокКт, 0) КАК АмортизацияНУНачальныйОстаток,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаНУОборотКт, 0) КАК АмортизацияНУОборот,
	|	ЕСТЬNULL(ВыработкаНМАОбороты.КоличествоОборот, 0) КАК Количество,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимость,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК СтоимостьДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации, 0) КАК ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент, 0) КАК Коэффициент,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Период КАК Период,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюБУ,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации,
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов КАК СпособыОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(СпособыОтраженияРасходовПоАмортизацииСпособы.КоличествоКоэффициентов, 0) КАК КоличествоКоэффициентов,
	|	ЕСТЬNULL(СтоимостьНМАНаНачалоГода.СтоимостьНаНачалоГода, 0) КАК СтоимостьНаНачалоГода,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) КАК НачислятьАмортизациюНУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							НМАТолькоЛинейныйМетодНУ.НематериальныйАктив
	|						ИЗ
	|							НМАТолькоЛинейныйМетодНУ)
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыНачисленияАмортизации.Линейный)
	|				ИНАЧЕ УчетнаяПолитикаОрганизацийСрезПоследних.МетодНачисленияАмортизацииНУ
	|			КОНЕЦ
	|	КОНЕЦ КАК МетодНачисленияАмортизации,
	|	УчетнаяПолитикаОрганизацийСрезПоследних.ПоддержкаПБУ18 КАК ПоддержкаПБУ18,
	|	ЕСТЬNULL(НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпециальныйКоэффициент,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.АмортизацияДо2009, 0)
	|		ИНАЧЕ ЕСТЬNULL(АмортизацияНМАПриПереходеКЛинейномуМетоду.АмортизацияНачальныйОстаток, 0)
	|	КОНЕЦ КАК АмортизацияПриПереходеКЛинейномуМетоду,
	|	ВЫБОР
	|		КОГДА ГОД(&ДатаПереходаКЛинейномуМетоду) = 2009
	|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009, 0)
	|		ИНАЧЕ (ГОД(&ДатаПереходаКЛинейномуМетоду) - ГОД(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) * 12 + (МЕСЯЦ(&ДатаПереходаКЛинейномуМетоду) - МЕСЯЦ(СостоянияНМАОрганизаций.ДатаВводаВЭксплуатацию)) - 1
	|	КОНЕЦ КАК ФактическийСрокПриПереходеКЛинейномуМетоду
	|ИЗ
	|	СписокНМА КАК СписокНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СпособыОтраженияРасходовПоАмортизацииСпособы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
	|		ПО (СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов = СпособыОтраженияРасходовПоАмортизацииСпособы.СпособОтраженияРасходов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаБухгалтерскогоУчетаНМАСрезПоследних КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК СтоимостьНМА
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = СтоимостьНМА.НематериальныйАктив
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета = СтоимостьНМА.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстаткиИОбороты КАК АмортизацияНМА
	|			ПО СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив = АмортизацияНМА.НематериальныйАктив
	|				И СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации = АмортизацияНМА.Счет
	|		ПО СписокНМА.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОбороты КАК ХозрасчетныйОбороты
	|		ПО СписокНМА.НематериальныйАктив = ХозрасчетныйОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВыработкаНМАОбороты КАК ВыработкаНМАОбороты
	|		ПО СписокНМА.НематериальныйАктив = ВыработкаНМАОбороты.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьНМАНаНачалоГода КАК СтоимостьНМАНаНачалоГода
	|		ПО СписокНМА.НематериальныйАктив = СтоимостьНМАНаНачалоГода.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних КАК НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|		ПО СписокНМА.НематериальныйАктив = НачислениеАмортизацииНМАСпециальныйКоэффициентНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияНМАПриПереходеКЛинейномуМетоду КАК АмортизацияНМАПриПереходеКЛинейномуМетоду
	|		ПО СписокНМА.НематериальныйАктив = АмортизацияНМАПриПереходеКЛинейномуМетоду.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
	|		ПО СписокНМА.НематериальныйАктив = СостоянияНМАОрганизаций.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаОрганизацийСрезПоследних КАК УчетнаяПолитикаОрганизацийСрезПоследних
	|		ПО (ИСТИНА)
	|ГДЕ
	|	НЕ ((ЕСТЬNULL(ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ) И (ЕСТЬNULL(ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию, ЛОЖЬ) = ЛОЖЬ))";
	
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоНМА.Следующий() Цикл

		СуммаАмортизацииБУ = 0;
		СуммаАмортизацииНУ = 0;
		СуммаАмортизацииПР = 0;
		СуммаАмортизацииВР = 0;
		
		ТекстСообщения = "для нематериального актива " + СокрЛП(ВыборкаПоНМА.НематериальныйАктивПредставление)
					   + " (" + СокрЛП(ВыборкаПоНМА.Код) + ")";
		
		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СчетНачисленияАмортизации) Тогда
			Если ВыдаватьСообщения Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указан счет для начисления амортизации " + ТекстСообщения + ".
				|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
			КонецЕсли; 
			Продолжить;
		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ВыборкаПоНМА.НачислятьАмортизациюБУ Тогда

			Если ВыборкаПоНМА.АмортизацияОборот <> 0 Тогда
				Если ВыдаватьСообщения И НЕ (НематериальныйАктив = Неопределено) Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Амортизация в этом месяце уже начислялась " + ТекстСообщения + ".
					|Рекомендуется отменить регламентную операцию начисления амортизации НМА (Меню ""НМА"") перед проведением этого документа", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СпособНачисленияАмортизации) Тогда
				Если ВыдаватьСообщения Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указан способ амортизации " + ТекстСообщения + ".
					|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации = 0 Тогда
				Если ВыдаватьСообщения Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Стоимость равна нулю " + ТекстСообщения + ".
					|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
				КонецЕсли; 
				Пропустить = Истина;
			КонецЕсли;

			Если ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации = 0 Тогда
				Если ВыдаватьСообщения Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Срок использования равен нулю " + ТекстСообщения + ".
					|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
				КонецЕсли;
				Пропустить = Истина;
			КонецЕсли;

			Если НЕ Пропустить Тогда
			
				СуммаАмортизации = 0;

				Если ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.Линейный Тогда
		 
					СуммаГодовойАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации / ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации * 12;
					СуммаАмортизации        = СуммаГодовойАмортизации / 12;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.Количество) Тогда
						Пропустить = Истина;
					КонецЕсли;

					Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации) Тогда
						Если ВыдаватьСообщения = Истина Тогда
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Объем продукции для вычисления не определен " + ТекстСообщения + ".
							|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
							
						КонецЕсли; 
						Пропустить = Истина;
					КонецЕсли;

					Если Пропустить Тогда
						СуммаАмортизации = 0 ;
					Иначе
						СуммаАмортизации = ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации * ВыборкаПоНМА.Количество / ВыборкаПоНМА.ОбъемПродукцииРаботДляВычисленияАмортизации;
					КонецЕсли;

				ИначеЕсли ВыборкаПоНМА.СпособНачисленияАмортизации = Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда

					ОстаточнаяСтоимость = Макс(0, ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток);
					ОставшийсяСрокПолезногоИспользования = ВыборкаПоНМА.СрокИспользованияДляВычисленияАмортизации 
														 - УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(ВыборкаПоНМА.Период, ДатаРасчета)
														 + 1;
					Коэффициент = ?(ВыборкаПоНМА.Коэффициент = 0, 1, ВыборкаПоНМА.Коэффициент);
					
					СуммаАмортизации = ?(ОставшийсяСрокПолезногоИспользования > 0,
										 ОстаточнаяСтоимость * (Коэффициент / ОставшийсяСрокПолезногоИспользования),
										 0);

				КонецЕсли;

				ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНачальныйОстаток - ВыборкаПоНМА.АмортизацияНачальныйОстаток;
				СуммаАмортизацииБУ   = Окр(Мин(СуммаАмортизации, ВсегоОсталосьСписать), 2);
				
				СуммаАмортизацииПР = Окр(ВыборкаПоНМА.СтоимостьПРНачальныйОстаток * (СуммаАмортизации / ВыборкаПоНМА.СтоимостьДляВычисленияАмортизации), 2);
				
			КонецЕсли;

		КонецЕсли;
		
		Пропустить = Ложь;
		
		Если ОтражатьВНУ Тогда
			
			Если ВыборкаПоНМА.НачислятьАмортизациюНУ Тогда
				
				ТекстСообщения = "Ошибка установки параметров начисления амортизации НМА по НУ
				|Для нематериального актива " + СокрЛП(ВыборкаПоНМА.НематериальныйАктивПредставление)
				+ " (" + СокрЛП(ВыборкаПоНМА.Код) + ")";
				
				Если ВыборкаПоНМА.АмортизацияНУОборот <> 0 Тогда
					Если ВыдаватьСообщения И НЕ (НематериальныйАктив = Неопределено) Тогда
					ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Амортизация в этом месяце уже начислялась " + ТекстСообщения + ".
					|Рекомендуется отменить регламентную операцию начисления амортизации НМА (Меню ""НМА"") перед проведением этого документа", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
					КонецЕсли; 
					Пропустить = Истина; 
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.МетодНачисленияАмортизации) Тогда
					Если ВыдаватьСообщения = Истина Тогда
						ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указан метод начисления амортизации в учетной политике организации " + ТекстСообщения + ".
						|Укажите метод начисления амортизации (меню ""Предприятие"" - ""Учетная политика"" на " + Формат(НачалоГода(ДатаРасчета), "ДФ='MMММ yyyy ""г.""'"), ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
					КонецЕсли;
					Пропустить = Истина;                                                                                     
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНУНачальныйОстаток) Тогда
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный
					И ВыборкаПоНМА.СрокПолезногоИспользования = 0 Тогда
					Если ВыдаватьСообщения = Истина Тогда
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Срок использования равен нулю " + ТекстСообщения + ".
							|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный
					И НЕ ЗначениеЗаполнено(ВыборкаПоНМА.АмортизационнаяГруппа) Тогда
					Если ВыдаватьСообщения Тогда
							ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("В справочнике не указана амортизационная группа " + ТекстСообщения + ".
							|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""НМА"").", ВыборкаПоНМА.НематериальныйАктив, Отказ, ДокументОбъект);
					КонецЕсли; 
					Пропустить = Истина;
				КонецЕсли;
				
				Если НЕ Пропустить Тогда
					
					СуммаАмортизации = 0;
					
					Если ВыборкаПоНМА.СчетУчета = ВыборкаПоНМА.СчетНачисленияАмортизации Тогда // НИОКР.
						СтоимостьДляВычисления = ВыборкаПоНМА.ПервоначальнаяСтоимостьНУ;
					Иначе
						СтоимостьДляВычисления = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток;
					КонецЕсли; 
					
					СрокИспользованияДляВычисления = Макс(1, ВыборкаПоНМА.СрокПолезногоИспользования);
					
					СпециальныйКоэффициент = ?(ВыборкаПоНМА.СпециальныйКоэффициент = 0, 1, ВыборкаПоНМА.СпециальныйКоэффициент);
					
					Если ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Линейный Тогда
						
						СтоимостьДляВычисления         = СтоимостьДляВычисления - ВыборкаПоНМА.АмортизацияПриПереходеКЛинейномуМетоду;
						СрокИспользованияДляВычисления = СрокИспользованияДляВычисления - ВыборкаПоНМА.ФактическийСрокПриПереходеКЛинейномуМетоду;
						
						СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления * СпециальныйКоэффициент;
						
					ИначеЕсли ВыборкаПоНМА.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизации.Нелинейный Тогда
						
						НормаАмортизации = ПолучитьНормуПоАмортизационнойГруппе(ВыборкаПоНМА.АмортизационнаяГруппа);
						
						Если НЕ (НормаАмортизации = Неопределено) Тогда
							
							СуммаАмортизации = (ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток)
							* НормаАмортизации / 100 
							* СпециальныйКоэффициент;
							
						КонецЕсли;
						
					КонецЕсли;
					
					ВсегоОсталосьСписать = ВыборкаПоНМА.СтоимостьНУНачальныйОстаток - ВыборкаПоНМА.АмортизацияНУНачальныйОстаток;
					
					СуммаАмортизацииНУ = Окр(Мин(ВсегоОсталосьСписать, СуммаАмортизации), 2);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СуммаАмортизацииВР = СуммаАмортизацииБУ - СуммаАмортизацииНУ - СуммаАмортизацииПР;			
		
		Если СуммаАмортизацииБУ > 0
		 ИЛИ СуммаАмортизацииНУ > 0
		 ИЛИ СуммаАмортизацииПР <> 0
		 ИЛИ СуммаАмортизацииВР <> 0 Тогда
	
			СтрокаАмортизации = ТаблицаАмортизации.Добавить();

			СтрокаАмортизации.НематериальныйАктив       = ВыборкаПоНМА.НематериальныйАктив;
			СтрокаАмортизации.СчетУчета                 = ВыборкаПоНМА.СчетУчета;
			СтрокаАмортизации.СчетНачисленияАмортизации = ВыборкаПоНМА.СчетНачисленияАмортизации;
			СтрокаАмортизации.ИмяСубконто               = "НематериальныеАктивы";
			СтрокаАмортизации.НаправлениеАмортизации    = ВыборкаПоНМА.СпособыОтраженияРасходовПоАмортизации;
			СтрокаАмортизации.КоличествоКоэффициентов   = ВыборкаПоНМА.КоличествоКоэффициентов;
			СтрокаАмортизации.СуммаАмортизации          = СуммаАмортизацииБУ;
			СтрокаАмортизации.СуммаАмортизацииНУ        = СуммаАмортизацииНУ;
			СтрокаАмортизации.СуммаАмортизацииПР        = ?(ВыборкаПоНМА.ПоддержкаПБУ18, СуммаАмортизацииПР, 0);
			СтрокаАмортизации.СуммаАмортизацииВР        = ?(ВыборкаПоНМА.ПоддержкаПБУ18, СуммаАмортизацииВР, 0);
			СтрокаАмортизации.ПодразделениеОрганизации  = ВыборкаПоНМА.ПодразделениеОрганизации;
			
		КонецЕсли;
			
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНМА_НИОКР()

// {УчетДоходовИРасходовИП
Функция РасчетАмортизацииНМА_НИОКР_НалогРеглФизЛицо(Объект,ДатаРасчета,Организация,НематериальныйАктив = Неопределено, ВыдаватьСообщения = Истина, ДатаРегистратора = Неопределено) Экспорт

	ТаблицаАмортизации = Новый ТаблицаЗначений();

	ТаблицаАмортизации.Колонки.Добавить("НМА",                    Новый ОписаниеТипов("СправочникСсылка.НематериальныеАктивы"));	
	ТаблицаАмортизации.Колонки.Добавить("СчетНачисленияАмортизации",      Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаАмортизации.Колонки.Добавить("ИмяСубконто",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаАмортизации.Колонки.Добавить("НаправлениеАмортизации", Новый ОписаниеТипов("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации"));
	ТаблицаАмортизации.Колонки.Добавить("Налог",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаАмортизации.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаАмортизации.Колонки.Добавить("ДокументОплаты");
	ТаблицаАмортизации.Колонки.Добавить("АмортизацияКонечныйОстаток");
	ТаблицаАмортизации.Колонки.Добавить("НоменклатурнаяГруппа");
	ТаблицаАмортизации.Колонки.Добавить("ХарактерДеятельности");
	ТаблицаАмортизации.Колонки.Добавить("РеквизитыДокументаОплаты");
	
	МассивКоэфф = Новый Массив;

	СписокНМА = ПолучитьСписокНМАОрганизации(НачалоМесяца(ДатаРасчета), Организация, Истина, НематериальныйАктив);
	
	Если СписокНМА.количество()=0 тогда
		//Не обнаружено объектов 
		Возврат ТаблицаАмортизации;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(ДатаРасчета));
	Запрос.УстановитьПараметр("КонецПериода",  ?(ДатаРегистратора = Неопределено, КонецМесяца(ДатаРасчета), ДатаРегистратора));
	Запрос.УстановитьПараметр("Период",        ?(ДатаРегистратора = Неопределено, ДатаРасчета, ДатаРегистратора));
	Запрос.УстановитьПараметр("СубконтоНМА",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);
	Запрос.УстановитьПараметр("НИОКР"		,  Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР); 
	Запрос.УстановитьПараметр("МетодАмортизацииЛинейный", Перечисления.МетодыНачисленияАмортизации.Линейный); 
	Запрос.УстановитьПараметр("ВидУчетаНУ", Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("СписокНМА", СписокНМА);
	Запрос.УстановитьПараметр("СнятоСУчета", Перечисления.ВидыСостоянийНМА.Списан); 
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.НематериальныйАктив КАК НематериальныйАктив,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.НематериальныйАктив) КАК НематериальныйАктивПредставление,
	|	ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.НематериальныйАктив.Код КАК Код,
	|	ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования,
	|	&МетодАмортизацииЛинейный КАК МетодНачисленияАмортизации,
	|	ЕСТЬNULL(НачСтоимостьНМА_НУ.СуммаОстаток, 0) КАК СтоимостьНачальныйОстаток,
	|	ЕСТЬNULL(КонСтоимостьНМА_НУ.СуммаОстаток, 0) КАК СтоимостьКонечныйОстаток,
	|	ЕСТЬNULL(АмортизацияЗаМесяц.СуммаОборот, 0) КАК АмортизацияОборот,
	|	ЕСТЬNULL(Амортизация.СуммаОборот, 0) КАК АмортизацияКонечныйОстаток,
	|	НаправленияАмортизации.СпособОтраженияРасходов КАК НаправлениеАмортизации,
	|	КонСтоимостьНМА_НУ.Партия КАК РасчетныйДокумент,
	|	КонСтоимостьНМА_НУ.ДокументОплаты КАК ДокументОплаты,
	|	КонСтоимостьНМА_НУ.НоменклатурнаяГруппа,
	|	КонСтоимостьНМА_НУ.ХарактерДеятельности
	|ИЗ
	|	РегистрНакопления.ИПМПЗ.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И Номенклатура В (&СписокНМА)
	|				И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК КонСтоимостьНМА_НУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИПМПЗ.Остатки(
	|				&КонецПериода,
	|				Организация = &Организация
	|					И Номенклатура В (&СписокНМА)
	|					И ДокументОплаты <> НЕОПРЕДЕЛЕНО) КАК НачСтоимостьНМА_НУ
	|		ПО КонСтоимостьНМА_НУ.Номенклатура = НачСтоимостьНМА_НУ.Номенклатура
	|			И КонСтоимостьНМА_НУ.Партия = НачСтоимостьНМА_НУ.Партия
	|			И КонСтоимостьНМА_НУ.ДокументОплаты = НачСтоимостьНМА_НУ.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИППрочиеРасходы.Обороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И СтатьяЗатрат В (&СписокНМА)) КАК АмортизацияЗаМесяц
	|		ПО КонСтоимостьНМА_НУ.Номенклатура = АмортизацияЗаМесяц.СтатьяЗатрат
	|			И КонСтоимостьНМА_НУ.Партия = АмортизацияЗаМесяц.РасчетныйДокумент
	|			И КонСтоимостьНМА_НУ.ДокументОплаты = АмортизацияЗаМесяц.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ИППрочиеРасходы.Обороты(
	|				,
	|				&КонецПериода,
	|				,
	|				Организация = &Организация
	|					И СтатьяЗатрат В (&СписокНМА)) КАК Амортизация
	|		ПО КонСтоимостьНМА_НУ.Номенклатура = Амортизация.СтатьяЗатрат
	|			И КонСтоимостьНМА_НУ.Партия = Амортизация.РасчетныйДокумент
	|			И КонСтоимостьНМА_НУ.ДокументОплаты = Амортизация.ДокументОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&НачалоПериода, НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних
	|		ПО КонСтоимостьНМА_НУ.Номенклатура = ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|				&НачалоПериода,
	|				Организация = &Организация
	|					И НематериальныйАктив В (&СписокНМА)) КАК НаправленияАмортизации
	|		ПО КонСтоимостьНМА_НУ.Номенклатура = НаправленияАмортизации.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив КАК НематериальныйАктив
	|		ИЗ
	|			РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|					&Период,
	|					Организация = &Организация
	|						И НематериальныйАктив В (&СписокНМА)
	|						И Состояние = &СнятоСУчета) КАК СостоянияНМАОрганизацийСрезПоследних) КАК СнятыеСУчета
	|		ПО КонСтоимостьНМА_НУ.Номенклатура = СнятыеСУчета.НематериальныйАктив
	|ГДЕ
	|	ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию = ИСТИНА
	|	И ПервоначальныеСведенияОНМАНалоговыйУчетСрезПоследних.Организация = &Организация
	|	И СнятыеСУчета.НематериальныйАктив ЕСТЬ NULL 
	|ИТОГИ
	|	СУММА(СтоимостьНачальныйОстаток),
	|	СУММА(СтоимостьКонечныйОстаток),
	|	СУММА(АмортизацияОборот),
	|	СУММА(АмортизацияКонечныйОстаток)
	|ПО
	|	НематериальныйАктив";
	
	ВыборкаПоНМА = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НематериальныйАктив");

	Пока ВыборкаПоНМА.Следующий() Цикл
		
		Если ВыборкаПоНМА.НематериальныйАктив = NULL Тогда // отсутствуют первоначальные сведения об объекте
			Продолжить;
		КонецЕсли;
		
		ВыборкаСтрокиЗапроса = ВыборкаПоНМА.Выбрать();
		ВыборкаСтрокиЗапроса.Следующий();
		
		ТекстСообщения = "Нал. расчет амортизации: для нематериального актива " + СокрЛП(ВыборкаСтрокиЗапроса.НематериальныйАктивПредставление)
		               + " (" + СокрЛП(ВыборкаСтрокиЗапроса.Код) + ")";
		
		Если (ВыборкаПоНМА.АмортизацияОборот <> 0) И
			(ВыборкаПоНМА.АмортизацияОборот <> Null)Тогда

			Если ВыдаватьСообщения = Истина и не (НематериальныйАктив = Неопределено) Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " амортизация в этом месяце уже начислялась");
			КонецЕсли; 

			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 

		КонецЕсли;

		СуммаАмортизации = 0;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.МетодНачисленияАмортизации) Тогда

			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " не указан метод начисления амортизации");
			КонецЕсли;

			Продолжить;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаПоНМА.СтоимостьНачальныйОстаток) Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(ВыборкаСтрокиЗапроса.СрокПолезногоИспользования) Тогда
			Если ВыдаватьСообщения = Истина Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения + " срок использования равен 0");
			КонецЕсли; 
			Продолжить;
		КонецЕсли;

		Если (ВыборкаПоНМА.АмортизацияОборот <> 0) И
			(ВыборкаПоНМА.АмортизацияОборот <> Null)Тогда
			Продолжить; // по указанному НМА в этом месяце уже начисляли амортизацию 
		КонецЕсли;

		СуммаАмортизации       = 0;
		СтоимостьДляВычисления = ВыборкаПоНМА.СтоимостьНачальныйОстаток;
		СрокИспользованияДляВычисления = Макс(1, ВыборкаСтрокиЗапроса.СрокПолезногоИспользования);
		СуммаАмортизации = СтоимостьДляВычисления / СрокИспользованияДляВычисления;

		Остатки = ?(ВыборкаПоНМА.СтоимостьКонечныйОстаток    = Null, 0, ВыборкаПоНМА.СтоимостьКонечныйОстаток) - 
		          ?(ВыборкаПоНМА.АмортизацияКонечныйОстаток = Null, 0, ВыборкаПоНМА.АмортизацияКонечныйОстаток);

		СуммаАмортизации  = Макс(0, Мин(Остатки, СуммаАмортизации));
		
		МассивКоэфф.Очистить();
		НачКоличСтрокТабАмортизации = ТаблицаАмортизации.Количество();
		
		ВыборкаСтрокиЗапроса.Сбросить();
		Пока ВыборкаСтрокиЗапроса.Следующий() Цикл
		
			МассивКоэфф.Добавить(ВыборкаСтрокиЗапроса.СтоимостьНачальныйОстаток);
			
			СтрокаАмортизации = ТаблицаАмортизации.Добавить();
			СтрокаАмортизации.НМА							= ВыборкаСтрокиЗапроса.НематериальныйАктив;
			СтрокаАмортизации.НаправлениеАмортизации		= ВыборкаСтрокиЗапроса.НаправлениеАмортизации;
			СтрокаАмортизации.РасчетныйДокумент				= ВыборкаСтрокиЗапроса.РасчетныйДокумент;
			СтрокаАмортизации.ДокументОплаты				= ВыборкаСтрокиЗапроса.ДокументОплаты;
			СтрокаАмортизации.НоменклатурнаяГруппа			= ВыборкаСтрокиЗапроса.НоменклатурнаяГруппа;
			СтрокаАмортизации.ХарактерДеятельности			= ВыборкаСтрокиЗапроса.ХарактерДеятельности;
			СтрокаАмортизации.АмортизацияКонечныйОстаток	= ВыборкаСтрокиЗапроса.АмортизацияКонечныйОстаток;
		КонецЦикла;
		
		МассивСуммАмортизации = ОбщегоНазначения.РаспределитьПропорционально(СуммаАмортизации, МассивКоэфф, 2);
		
		Если МассивСуммАмортизации.Количество() > 0 Тогда
			Для Индекс = 0 По МассивСуммАмортизации.Количество() - 1 Цикл
				ТаблицаАмортизации[НачКоличСтрокТабАмортизации + Индекс].Налог = МассивСуммАмортизации[Индекс];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаАмортизации;

КонецФункции // РасчетАмортизацииНалогРегл
// }УчетДоходовИРасходовИП

//Получает список НМА, учитываемых в указанной организации
//НМА включается в список если последняя организация, в которой он учитывался соответствует переданной в функцию
//
//Параметры:
//	Период - Дата или момент времени - период на который определяется принадлежность организации
//	Организация - СправочникСсылка.Организация
//	НУ 			- булево - признак необходимости определения отражения объекта в НУ, по умолчанию - ложь 
//	ОбъектНМА	- Массив, СписокЗначений или СправочникСсылка.НематериальныеАктивы - список объектов НМА,
//	по которому необходимо отфильтровать полученный результат
//
//Возвращаемое значение:
// 	Массив ссылок СправочникСсылка.НематериальныеАктивы, если ни один объект не подобран - пустой массив!
//
Функция ПолучитьСписокНМАОрганизации(Период, Организация, НУ = ложь, ОбъектНМА = Неопределено) Экспорт
	
	ТекстУсловия = ?(ОбъектНМА = Неопределено,""," НематериальныйАктив В(&НематериальныйАктив) ");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&Период,"+ТекстУсловия+" ) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
		|" +?(НУ,"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&Период, Организация = &Организация) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
		|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив
		|  ","") +"
		|ГДЕ
		|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Организация = &Организация
		|";
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Организация",Организация );
	Запрос.УстановитьПараметр("НематериальныйАктив",ОбъектНМА);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		//Нет подходящих объектов
		Возврат Новый массив();
	КонецЕсли; 
	
	ТаблицаОбъектов = Результат.Выгрузить();
	Возврат ТаблицаОбъектов.ВыгрузитьКолонку("НематериальныйАктив");
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ АМОРТИЗАЦИИ

//Функция получает таблицу значений с указанием списка ОС или НМА и сумм амортизации
//возвращает таблицу значений с распределенными значениями амортизации
//
Функция ПолучитьРаспределениеАмортизацииПоНаправлениямРегл(ДокОбъект, Отказ, Заголовок, ТабАмортизации, СтруктураШапкиДокумента, ТипУчета, ТекстПроводки = Неопределено) Экспорт

	ДатаРасчета = ДокОбъект.Дата;
	
	УчетФизЛица = (СтруктураШапкиДокумента.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо) И НЕ ЗначениеЗаполнено(ТипУчета);

	// определим структуру выходной таблицы
	ТабЗатрат = Новый ТаблицаЗначений;
	ТабЗатрат.Колонки.Добавить("Сумма",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаМЦПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабЗатрат.Колонки.Добавить("СуммаМЦВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТабЗатрат.Колонки.Добавить("СчетЗатрат");
	ТабЗатрат.Колонки.Добавить("СчетАмортизации");
	ТабЗатрат.Колонки.Добавить("ИмяСубконто");
	ТабЗатрат.Колонки.Добавить("ОбъектУчета");
	ТабЗатрат.Колонки.Добавить("Субконто1");
	ТабЗатрат.Колонки.Добавить("Субконто2");
	ТабЗатрат.Колонки.Добавить("Субконто3");
	ТабЗатрат.Колонки.Добавить("РасчетныйДокумент");
	ТабЗатрат.Колонки.Добавить("ДокументОплаты");
	ТабЗатрат.Колонки.Добавить("РеквизитыДокументаОплаты");
	ТабЗатрат.Колонки.Добавить("ПодразделениеОрганизации");
	ТабЗатрат.Колонки.Добавить("ПодразделениеЗатрат");

	МассивКоэф = Новый Массив;

	// цикл по Объектам из ТабАмортизации
	Для Каждого СтрокаТЗ Из ТабАмортизации Цикл

		Если СтрокаТЗ.СуммаАмортизации = 0 И
			(УчетФизЛица ИЛИ
			(СтрокаТЗ.СуммаАмортизацииНУ = 0
			И СтрокаТЗ.СуммаАмортизацииПР = 0
			И СтрокаТЗ.СуммаАмортизацииВР = 0)) Тогда
			//Распределять амортизацию не надо, так как распределять нечего.
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЗ.НаправлениеАмортизации) Тогда
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("Не указаны способы отражения расходов по амортизации для объекта """ + СтрокаТЗ.ОбъектУчета + """.
			|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""ОС"").", СтрокаТЗ.ОбъектУчета, Отказ, ДокОбъект);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 0 Тогда
			ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("В способах отражения расходов по амортизации нет записей для объекта """ + СтрокаТЗ.ОбъектУчета + """. 
			|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""ОС"").", СтрокаТЗ.ОбъектУчета, Отказ, ДокОбъект);
			Продолжить;
		КонецЕсли;

		Если СтрокаТЗ.НаправлениеАмортизации.Способы.Количество() = 1 Тогда  // амортизация идет на один счет.
			
			СтрокаНапр = СтрокаТЗ.НаправлениеАмортизации.Способы[0];
			
			НоваяСтрока = ТабЗатрат.Добавить();
			НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
			НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
			НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетНачисленияАмортизации;
			НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;
			НоваяСтрока.Субконто1                = СтрокаНапр.Субконто1;
			НоваяСтрока.Субконто2                = СтрокаНапр.Субконто2;
			НоваяСтрока.Субконто3                = СтрокаНапр.Субконто3;
			НоваяСтрока.Сумма                    = СтрокаТЗ.СуммаАмортизации;
			Если НЕ УчетФизЛица Тогда
				НоваяСтрока.ПодразделениеОрганизации = СтрокаТЗ.ПодразделениеОрганизации;
				НоваяСтрока.ПодразделениеЗатрат      = СтрокаНапр.ПодразделениеОрганизации;
				НоваяСтрока.СуммаНУ                  = СтрокаТЗ.СуммаАмортизацииНУ;
				НоваяСтрока.СуммаВР                  = СтрокаТЗ.СуммаАмортизацииВР;
				НоваяСтрока.СуммаПР                  = СтрокаТЗ.СуммаАмортизацииПР;
			Иначе
				НоваяСтрока.РасчетныйДокумент        = СтрокаТЗ.РасчетныйДокумент;
				НоваяСтрока.ДокументОплаты           = СтрокаТЗ.ДокументОплаты;
				НоваяСтрока.РеквизитыДокументаОплаты = СтрокаТЗ.РеквизитыДокументаОплаты;
			КонецЕсли;
			
		Иначе // амортизация распределяется по весовым коэффициентам.
		
			МассивКоэф.Очистить();
			Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
				МассивКоэф.Добавить(СтрокаНапр.Коэффициент);
			КонецЦикла;

			МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СуммаАмортизации, МассивКоэф, 2);
			Если МассивСумм = Неопределено Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("в способах отражения расходов по амортизации не проставлены коэффициенты для объекта """ + СтрокаТЗ.ОбъектУчета + """.
				|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""ОС"").", СтрокаТЗ.ОбъектУчета, Отказ, ДокОбъект);
				Продолжить;
			КонецЕсли;

			Если МассивСумм.Количество() <> МассивКоэф.Количество() Тогда                                                        
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации("В способах отражения затрат по амортизации есть нулевые коэффициенты для объекта """ + СтрокаТЗ.ОбъектУчета + """. 
				|Укажите эти данные в документах принятия к учету и изменения параметров начисления амортизации (Меню ""ОС"").", СтрокаТЗ.ОбъектУчета, Отказ, ДокОбъект);
				Продолжить;
			КонецЕсли;

			Если НЕ УчетФизЛица Тогда
				МассивСуммНУ = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СуммаАмортизацииНУ, МассивКоэф, 2);
				МассивСуммВР = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СуммаАмортизацииВР, МассивКоэф, 2);
				МассивСуммПР = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЗ.СуммаАмортизацииПР, МассивКоэф, 2);
			КонецЕсли;
			
			Для Каждого СтрокаНапр Из СтрокаТЗ.НаправлениеАмортизации.Способы Цикл
				НоваяСтрока = ТабЗатрат.Добавить();
				НоваяСтрока.СчетЗатрат               = СтрокаНапр.СчетЗатрат;
				НоваяСтрока.ОбъектУчета              = СтрокаТЗ.ОбъектУчета;
				НоваяСтрока.СчетАмортизации          = СтрокаТЗ.СчетНачисленияАмортизации;
				НоваяСтрока.ИмяСубконто              = СтрокаТЗ.ИмяСубконто;
				НоваяСтрока.Субконто1                = СтрокаНапр.Субконто1;
				НоваяСтрока.Субконто2                = СтрокаНапр.Субконто2;
				НоваяСтрока.Субконто3                = СтрокаНапр.Субконто3;
				НоваяСтрока.Сумма                    = ?(ЗначениеЗаполнено(МассивСумм), МассивСумм[СтрокаНапр.НомерСтроки - 1], 0);
				Если НЕ УчетФизЛица Тогда
					НоваяСтрока.ПодразделениеОрганизации = СтрокаТЗ.ПодразделениеОрганизации;
					НоваяСтрока.ПодразделениеЗатрат      = СтрокаНапр.ПодразделениеОрганизации;
					НоваяСтрока.СуммаНУ                  = ?(ЗначениеЗаполнено(МассивСуммНУ), МассивСуммНУ[СтрокаНапр.НомерСтроки - 1], 0);
					НоваяСтрока.СуммаВР                  = ?(ЗначениеЗаполнено(МассивСуммВР), МассивСуммВР[СтрокаНапр.НомерСтроки - 1], 0);
					НоваяСтрока.СуммаПР                  = ?(ЗначениеЗаполнено(МассивСуммПР), МассивСуммПР[СтрокаНапр.НомерСтроки - 1], 0);
				Иначе
					НоваяСтрока.РасчетныйДокумент        = СтрокаТЗ.РасчетныйДокумент;
					НоваяСтрока.ДокументОплаты           = СтрокаТЗ.ДокументОплаты;
					НоваяСтрока.РеквизитыДокументаОплаты = СтрокаТЗ.РеквизитыДокументаОплаты;
				КонецЕсли;

			КонецЦикла;
			
		КонецЕсли;

	КонецЦикла;

	Если УчетФизЛица Тогда
		Возврат ТабЗатрат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	
	//формирование проводок
	Проводки = ДокОбъект.Движения.Хозрасчетный;

	Для Каждого СтрокаЗатрат Из ТабЗатрат Цикл

		Если СтрокаЗатрат.Сумма = 0
		   И СтрокаЗатрат.СуммаНУ = 0
		   И СтрокаЗатрат.СуммаПР = 0
		   И СтрокаЗатрат.СуммаВР = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Проводка = Проводки.Добавить();

		Проводка.Период       = ДатаРасчета;
		Проводка.Содержание   = ?(НЕ ЗначениеЗаполнено(ТекстПроводки), "Амортизация", ТекстПроводки);
		Проводка.Организация  = СтруктураШапкиДокумента.Организация;
		Проводка.Сумма        = СтрокаЗатрат.Сумма;
		
		Проводка.СчетДт          = СтрокаЗатрат.СчетЗатрат;
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 1, СтрокаЗатрат.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 2, СтрокаЗатрат.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(СтрокаЗатрат.СчетЗатрат, Проводка.СубконтоДт, 3, СтрокаЗатрат.Субконто3);

		Проводка.СчетКт                                                                                 = СтрокаЗатрат.СчетАмортизации;
		Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[СтрокаЗатрат.ИмяСубконто]] = СтрокаЗатрат.ОбъектУчета;

		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, СтрокаЗатрат.ПодразделениеЗатрат, СтрокаЗатрат.ПодразделениеОрганизации);
		
        НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаЗатрат.СуммаНУ,СтрокаЗатрат.СуммаНУ,СтрокаЗатрат.СуммаПР,СтрокаЗатрат.СуммаПР,СтрокаЗатрат.СуммаВР,СтрокаЗатрат.СуммаВР,Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
		НалоговыйУчет.ОпределитьПостоянныеРазницыВРасходах(Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18); 	
		
	КонецЦикла;

	Возврат ТабЗатрат;

КонецФункции // ПолучитьРаспределениеАмортизацииПоНаправлениямРегл()

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ ОС

// Функция рассчитывает стоимость объекта строительства по разным видам учета.
// Возвращает структуру со значениями стоимостей по видам учета, поля:
// - СтоимостьБУ
// - СтоимостьБУХоз
// - СтоимостьНУ
// - СтоимостьНУХоз
// - СтоимостьПР
// - СтоимостьПРХоз
// - СтоимостьВР
// - СтоимостьВРХоз
//
Функция РассчитатьСтоимостьОбъектаСтроительства(Организация, ПодразделениеОрганизации, Период, СчетУчета,  ОбъектСтроительства) Экспорт

	СтруктураСтоимостьОбъектаСтроительства = Новый Структура;
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьБУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьНУ", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьПР", 0);
	СтруктураСтоимостьОбъектаСтроительства.Вставить("СтоимостьВР", 0);
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                   Период);
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СчетУчета",                СчетУчета);
	Запрос.УстановитьПараметр("ОбъектСтроительства",      ОбъектСтроительства);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СтоимостьБУ,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, 
	|	                                        Счет = &СчетУчета, 
	|	                                        ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства), 
	|	                                        Субконто1 = &ОбъектСтроительства 
	|	                                        И Организация = &Организация
	|	                                        И (Подразделение = &ПодразделениеОрганизации ИЛИ Подразделение ЕСТЬ NULL)) КАК ХозрасчетныйОстатки	
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
	    Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураСтоимостьОбъектаСтроительства, Выборка);
				
	КонецЕсли;

	Возврат СтруктураСтоимостьОбъектаСтроительства;

КонецФункции // РассчитатьСтоимостьОбъектаСтроительства()

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Возваращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияОС(ОсновноеСредство, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеОС", 	Состояние);
	Запрос.УстановитьПараметр("ОС",             ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияОСОрганизаций.Регистратор КАК Документ,
		|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата
		|ИЗ
		|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		|
		|ГДЕ
		|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
		|	СостоянияОСОрганизаций.Организация = &Организация И
		|	СостоянияОСОрганизаций.Состояние = &СостояниеОС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Процедура ПолучитьДокументБухСостоянияНМА(НематериальныйАктив, Организация, Состояние, ДокРегистратор, ДатаДокРегистратора) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СостояниеНМА", 	Состояние);
	Запрос.УстановитьПараметр("НМА",            НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СостоянияНМАОрганизаций.Регистратор КАК Документ
		|ИЗ
		|	РегистрСведений.СостоянияНМАОрганизаций КАК СостоянияНМАОрганизаций
		|ГДЕ
		|	СостоянияНМАОрганизаций.НематериальныйАктив = &НМА
		|	И СостоянияНМАОрганизаций.Организация = &Организация
		|	И СостоянияНМАОрганизаций.Состояние = &СостояниеНМА
		|
		|УПОРЯДОЧИТЬ ПО
		|	СостоянияНМАОрганизаций.Период УБЫВ";
	ВыборкаДоков = Запрос.Выполнить().Выбрать();

	Если ВыборкаДоков.Следующий()  Тогда
		ДокРегистратор      = ВыборкаДоков.Документ;
		ДатаДокРегистратора = ВыборкаДоков.Документ.Дата;

	Иначе
		ДокРегистратор      = Неопределено;
		ДатаДокРегистратора = '00010101';

	КонецЕсли;

КонецПроцедуры

//Получает документ и дату для указанного состояния основного средства по бух учету
//
// Параметры
//
//
// Вовзаращаемое значение
//  Дата и документ - через указанные параметры процедуры.
//
Функция ПолучитьПоследнееСостояниеОС(Период,ОсновноеСредство, Организация) Экспорт

	ДанныеОСостоянии = Новый Структура("СостояниеОС,Дата,Документ,Событие,НазваниеДокумента,НомерДокумента");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("ОС",          ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	СостоянияОСОрганизаций.Регистратор КАК Документ,
	|	СостоянияОСОрганизаций.ДатаСостояния КАК Дата,
	|	СостоянияОСОрганизаций.Состояние КАК СостояниеОС,
	|	СобытияОСОрганизаций.Событие,
	|	СобытияОСОрганизаций.НазваниеДокумента,
	|	СобытияОСОрганизаций.НомерДокумента
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций КАК СобытияОСОрганизаций
	|		ПО СостоянияОСОрганизаций.Регистратор = СобытияОСОрганизаций.Регистратор И СостоянияОСОрганизаций.ДатаСостояния = СобытияОСОрганизаций.Период И СостоянияОСОрганизаций.Организация = СобытияОСОрганизаций.Организация И СостоянияОСОрганизаций.ОсновноеСредство = СобытияОСОрганизаций.ОсновноеСредство
	|
	|ГДЕ
	|	СостоянияОСОрганизаций.ОсновноеСредство = &ОС И
	|	СостоянияОСОрганизаций.Организация = &Организация И
	|	СостоянияОСОрганизаций.ДатаСостояния <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		ВыборкаДоков = РезультатЗапроса.Выгрузить();

		ПоследняяЗаписьИндекс = ВыборкаДоков.Количество() - 1;
		
		ДанныеОСостоянии.Вставить("СостояниеОС"		  , ВыборкаДоков[ПоследняяЗаписьИндекс].СостояниеОС);
		ДанныеОСостоянии.Вставить("Дата"			  , ВыборкаДоков[ПоследняяЗаписьИндекс].Дата);
		ДанныеОСостоянии.Вставить("Документ"		  , ВыборкаДоков[ПоследняяЗаписьИндекс].Документ);
		ДанныеОСостоянии.Вставить("Событие"			  , ВыборкаДоков[ПоследняяЗаписьИндекс].Событие);
		ДанныеОСостоянии.Вставить("НазваниеДокумента" , ВыборкаДоков[ПоследняяЗаписьИндекс].НазваниеДокумента);
		ДанныеОСостоянии.Вставить("НомерДокумента"	  , ВыборкаДоков[ПоследняяЗаписьИндекс].НомерДокумента);

	КонецЕсли;
		
	Возврат ДанныеОСостоянии;
КонецФункции 

// Возвращает из справочника событий ОС первую найденную запись с заданным видом события,
// иначе возвращает пустую ссылку на справочник
//
// Параметры
//  ВидСобытия (Перечисление ВидыСобытийОС): вид события
//
// Возвращаемое значение:
//   элемент справочника событий ОС
//
Функция ПолучитьСобытиеПоОСИзСправочника(ВидСобытия) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидСобытияОС", ВидСобытия);
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Ссылка,
	|	ВидСобытияОС
	|ИЗ
	|	Справочник.СобытияОС КАК СобытияОС
	|
	|ГДЕ
	|	ВидСобытияОС = &ВидСобытияОС";
	ТаблицаСобытий = Запрос.Выполнить().Выгрузить();

	Если ТаблицаСобытий.Количество()>0 Тогда
		Возврат ТаблицаСобытий[0].Ссылка;

	Иначе
		Возврат Справочники.СобытияОС.ПустаяСсылка();

	КонецЕсли;

КонецФункции // ПолучитьСобытиеОСИзСправочника()

// Процедура выполняет стандартные действия при начале выбора состояния ОС в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСобытийОС(ЭлементФормы, ВидыСобытий=Неопределено, СтандартнаяОбработка, ЗаблокироватьПолученныеВидыСобытий = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СобытияОС.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если ВидыСобытий<>Неопределено Тогда

		Если ЗаблокироватьПолученныеВидыСобытий тогда
			// Удалим из выбора "неправильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.НеРавно;
			КонецЕсли;
		Иначе
			// Оставим в выборе только "правильные" состояния
			Если ТипЗнч(ВидыСобытий) = Тип("СписокЗначений") Тогда
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.ВСписке;
			Иначе
				ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
        КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Значение         = ВидыСобытий;
		ФормаВыбора.СправочникСписок.Отбор.ВидСобытияОС.Использование    = Истина;

	КонецЕсли;
	
	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Процедура выполняет стандартные действия при начале выбора способов отражения расходов по амортизации формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ЭлементФормы                     - элемент формы документа, который надо заполнить; 
//  ВидыОпераций                     - вид операций ОС для отбора, значение перечисления ВидыОперацийОС;
//  СтандартнаяОбработка             - булево, признак выполнения стандартной (системной) обработки события,
//
Процедура НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(ЭлементФормы, Организация=Неопределено, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;
	ФормаВыбора          = Справочники.СпособыОтраженияРасходовПоАмортизации.ПолучитьФормуВыбора(,ЭлементФормы,);

	Если Организация<>Неопределено Тогда
		// Оставим в выборе только записи с организацией из документа и те, в которых организация вообще не указана
		СписокОрганизаций = Новый СписокЗначений;
		СписокОрганизаций.Добавить(Организация);
		СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение         = СписокОрганизаций;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование    = Истина;

	КонецЕсли;
    ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ЭлементФормы.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияСостоянияОС()

// Процедура проверяет дублирование состояний ОС. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийОС(Ссылка, Организация, ТаблицаЗаписей,Отказ,Заголовок) Экспорт

	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	ОС_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.СостоянияОС Цикл
		НаборСостояний.Добавить(Состояние);
		ОС_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				ОС_ПоСостояниям[А-1].Добавить(ТекЗапись.ОсновноеСредство);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для А = 1 по НаборСостояний.количество() Цикл
		Если ОС_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	СостоянияОСОрганизаций.ОсновноеСредство,
			|	СостоянияОСОрганизаций.ДатаСостояния,
			|	СостоянияОСОрганизаций.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
			|
			|ГДЕ
			|	СостоянияОСОрганизаций.Организация = &Организация И
			|	СостоянияОСОрганизаций.Регистратор <> &Документ И
			|	СостоянияОСОрганизаций.Состояние = &Состояние И
			|	СостоянияОСОрганизаций.ОсновноеСредство В(&ОсновныеСредства)";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("ОсновныеСредства",ОС_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("Документ",Ссылка);

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.ОшибкаПриПроведении("Для основного средства <"+Строка(Выборка.ОсновноеСредство)+"> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.ДатаСостояния,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
Конецпроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ СОСТОЯНИЯ НМА

Функция ОпределитьСтоимостьПоСпискуНМА(Организация, СписокНМА, Период) Экспорт

	СубконтоНМА = Новый Массив();
	СубконтоНМА.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы);

	Запрос   = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("СписокНМА",     СписокНМА);
	Запрос.УстановитьПараметр("НачалоПериода", Период);
	Запрос.УстановитьПараметр("СубконтоНМА",   СубконтоНМА);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НематериальныеАктивы.НематериальныйАктив КАК НМА,
	|	НМА.СчетУчета КАК СчетУчета,
	|	ВЫБОР 
	|		КОГДА НМА.НематериальныйАктив.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР) 
	|		ТОГДА НМА.СчетУчета 
	|		ИНАЧЕ НМА.СчетНачисленияАмортизации 
	|	КОНЕЦ КАК СчетАмортизации,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаОстатокДт, 0) КАК Стоимость,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаНУОстатокДт, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаПРОстатокДт, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(СтоимостьНМА.СуммаВРОстатокДт, 0) КАК СтоимостьВР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаОстатокКт, 0) КАК Амортизация,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаНУОстатокКт, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаПРОстатокКт, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(АмортизацияНМА.СуммаВРОстатокКт, 0) КАК АмортизацияВР
	|ИЗ
	|	(ВЫБРАТЬ НематериальныеАктивы.Ссылка КАК НематериальныйАктив
	|	ИЗ 
	|		Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	|	ГДЕ 
	|		Ссылка В (&СписокНМА)) КАК НематериальныеАктивы
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&НачалоПериода, Организация = &Организация И НематериальныйАктив В (&СписокНМА)) КАК НМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , &СубконтоНМА, Организация = &Организация И Субконто1 В (&СписокНМА)) КАК СтоимостьНМА
	|		ПО НМА.НематериальныйАктив = СтоимостьНМА.Субконто1 И НМА.СчетУчета = СтоимостьНМА.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&НачалоПериода, , &СубконтоНМА, Организация = &Организация И Субконто1 В (&СписокНМА)) КАК АмортизацияНМА
	|		ПО НМА.НематериальныйАктив = АмортизацияНМА.Субконто1 И НМА.СчетНачисленияАмортизации = АмортизацияНМА.Счет
	|	ПО НематериальныеАктивы.НематериальныйАктив = НМА.НематериальныйАктив
	|";
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ОпределитьСтоимостьПоСпискуНМА()

// Процедура проверяет дублирование состояний НМА. 
// Если определенное состояние было установлено ранее, устанавливать его второй раз нельзя (в пределах одной организации)
Процедура ПроверкаДублированияЗаписейСостоянийНМА(Организация, Период, ТаблицаЗаписей,Отказ,Заголовок) Экспорт
	
	Если ТаблицаЗаписей.Количество() =0 тогда
		Возврат;
	КонецЕсли;
	
	НаборСостояний = Новый Массив();
	НМА_ПоСостояниям  = Новый Массив();
	Для каждого Состояние из Перечисления.ВидыСостоянийНМА Цикл
		НаборСостояний.Добавить(Состояние);
		НМА_ПоСостояниям.Добавить(Новый массив());
	КонецЦикла;
	
	Для Каждого ТекЗапись из ТаблицаЗаписей Цикл
		
		Для А = 1 по НаборСостояний.количество() Цикл
			Если ТекЗапись.Состояние = НаборСостояний[А-1] тогда	
				НМА_ПоСостояниям[А-1].Добавить(ТекЗапись.НематериальныйАктив);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТекущийРегистратор = ТаблицаЗаписей.Отбор.Регистратор.Значение;
	
	Для А = 1 по НаборСостояний.Количество() Цикл
		Если НМА_ПоСостояниям[А-1].Количество()>0 тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
			|	СостоянияНМАОрганизацийСрезПоследних.Регистратор
			|ИЗ
			|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
			|		&Период,
			|		Организация = &Организация
			|		    И НематериальныйАктив В (&НематериальныеАктивы)
			|		    И Состояние = &Состояние
			|		    И (НЕ Регистратор = &ТекущийРегистратор)) КАК СостоянияНМАОрганизацийСрезПоследних";

			Запрос.УстановитьПараметр("Организация",Организация );
			Запрос.УстановитьПараметр("Состояние",	НаборСостояний[А-1]);
			Запрос.УстановитьПараметр("НематериальныеАктивы",НМА_ПоСостояниям[А-1]);
			Запрос.УстановитьПараметр("ТекущийРегистратор",ТекущийРегистратор);
			Запрос.УстановитьПараметр("Период",новый МоментВремени(Период,ТекущийРегистратор));

			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();

			Пока Выборка.Следующий() Цикл
				ОбщегоНазначения.ОшибкаПриПроведении("Для НМА <"+Строка(Выборка.НематериальныйАктив)+"> в организации <"+Строка(Организация)+"> уже зафиксировано состояние <"+Строка(НаборСостояний[А-1])+"> 
				| документом <"+Строка(Выборка.Регистратор)+">. Дата состояния: "+Формат(Выборка.Регистратор.Дата,"ДФ=dd.MM.yyyy"),Отказ,Заголовок);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ТАБЛИЧНЫХ ЧАСТЕЙ ДОКУМЕНТОВ ПО ОС

// Процедура проверяет наличие одних и тех же основных средств в табличной
// части "Основные средства" и выдает сообщение об ошибке при проведении.
//
Процедура ПроверитьДублиОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ОсновноеСредство", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		ТаблицаПоОС.Индексы.Добавить("ОсновноеСредство");
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + "В строках №№ "; 
								   
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ОсновноеСредство", СтрокаТаблицыДублей.ОсновноеСредство));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке
			                       + СписокНомеровСтрок
			                       + " табличной части ""Основные средства"" указано одно и то же основное средство.";
								   
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиОС()

// Процедура проверяет наличие одинаковых инвентарных номеров основных средств 
// в табличной части "Основные средства" и выдает сообщение об ошибке при 
// проведении.
//
Процедура ПроверитьДублиИнвентарныхНомеровОС(ТаблицаПоОС, Отказ, Заголовок) Экспорт
	
	// Удаляем лишние пробелы из полей, в которых хранятся инвентарные номера.
	Для Каждого СтрокаТаблицыОС Из ТаблицаПоОС Цикл
		СтрокаТаблицыОС.ИнвентарныйНомер = СокрЛП(СтрокаТаблицыОС.ИнвентарныйНомер);
	КонецЦикла;
	
	// Проверка повторения инвентарных номеров.
	ТаблицаДублей = ТаблицаПоОС.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть("ИнвентарныйНомер", "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		ТаблицаПоОС.Индексы.Добавить("ИнвентарныйНомер");
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + "В строках №№ ";
															  
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = ТаблицаПоОС.НайтиСтроки(Новый Структура("ИнвентарныйНомер", СтрокаТаблицыДублей.ИнвентарныйНомер));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + СписокНомеровСтрок 
			                       + " табличной части ""Основные средства"" указан одинаковый инвентарный номер.";
			
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДублиИнвентарныхНомеровОС()

Процедура ПроверитьДубли(Таблица, ПредставлениеТаблицы, ИмяКолонки, ПредставлениеКолонки, Отказ, Заголовок) Экспорт
	
	// Проверка повторения инвентарных номеров.
	ТаблицаДублей = Таблица.Скопировать();
	
	// Подсчитываем количество повторений.
	ТаблицаДублей.Колонки.Добавить("КоличествоПовторений");
	ТаблицаДублей.ЗаполнитьЗначения(1, "КоличествоПовторений");
	ТаблицаДублей.Свернуть(ИмяКолонки, "КоличествоПовторений");
	
	// Если количество повторений > 1, выдаем сообщение об ошибке.
	Если ?(ТаблицаДублей.Количество() > 0, ТаблицаДублей.Итог("КоличествоПовторений") / ТаблицаДублей.Количество(), 0) > 1 Тогда
		
		ТекстСообщенияОбОшибке = "";
		
		Таблица.Индексы.Добавить(ИмяКолонки);
		
		// Цикл по каждому найденному повторению.
		Для Каждого СтрокаТаблицыДублей Из ТаблицаДублей Цикл
			
			Если СтрокаТаблицыДублей.КоличествоПовторений = 1 Тогда
				Продолжить; // повторений нет.
			КонецЕсли;
			
			// Добавим перевод строки, если требуется.
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + ?(НЕ ЗначениеЗаполнено(ТекстСообщенияОбОшибке), "", "
			                                                                            |");
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + "В строках №№ ";
															  
			// Выводим номера строк.
			СписокНомеровСтрок = "";
			МассивСтрок = Таблица.НайтиСтроки(Новый Структура(ИмяКолонки, СтрокаТаблицыДублей[ИмяКолонки]));
			Для Каждого Строка Из МассивСтрок Цикл
				СписокНомеровСтрок = СписокНомеровСтрок + ?(НЕ ЗначениеЗаполнено(СписокНомеровСтрок), "", ", ") + Строка.НомерСтроки;
			КонецЦикла;
			
			ТекстСообщенияОбОшибке = ТекстСообщенияОбОшибке 
			                       + СписокНомеровСтрок 
			                       + " табличной части """ + ПредставлениеТаблицы + """ в поле """ + ПредставлениеКолонки + """ указано одинаковое значение.";
			
		КонецЦикла;
														  
		ОбщегоНазначения.ОшибкаПриПроведении(ТекстСообщенияОбОшибке, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДубли()

///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ СВЕДЕНИЙ ПО НАЛОГООБЛОЖЕНИЮ

///////////////////////////////////////////////////////////////////////////////
// РЕГИСТРЫ СВЕДЕНИЙ ПО НАЛОГООБЛОЖЕНИЮ

Функция ПолучитьРегистрациюВИФНСПоОрганизации(Организация) Экспорт
	
	НалоговыйОрган = Справочники.РегистрацияВИФНС.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(Организация) Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацияВИФНС.Ссылка
		|ИЗ
		|	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
		|ГДЕ
		|	РегистрацияВИФНС.ПометкаУдаления = ЛОЖЬ
		|	И РегистрацияВИФНС.Владелец = &Организация
		|	И РегистрацияВИФНС.Код = РегистрацияВИФНС.Владелец.КодИМНС";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
		
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			НалоговыйОрган = Выборка.Ссылка;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НалоговыйОрган;
	
КонецФункции // ПолучитьРегистрациюВИФНСПоОрганизации()

Функция ПолучитьКодыВидовТС() Экспорт

	КодыВидовТС = Новый ТаблицаЗначений();
	КодыВидовТС.Колонки.Добавить("Код");
	КодыВидовТС.Колонки.Добавить("Наименование");
	КодыВидовТС.Колонки.Добавить("КодЕдиницыИзмерения");
	
	Макет = Отчеты.РегламентированныйОтчетТранспортныйНалог.ПолучитьМакет("Списки2007Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти("ВидыТранспортныхСредств");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя       = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название            = СокрП(Макет.Область(НомерСтр, 2).Текст);
			КодЕдиницыИзмерения = СокрП(Макет.Область(НомерСтр, 3).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыВидовТС.Добавить();
				НоваяСтрока.Код                 = КодПоказателя;
				НоваяСтрока.Наименование        = Название;
				НоваяСтрока.КодЕдиницыИзмерения = КодЕдиницыИзмерения;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КодыВидовТС;

КонецФункции // ПолучитьКодыВидовТС() 

Функция ПолучитьСписокКодовЕдиницИзмеренияТС() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("251", "л. с");
	Список.Добавить("999", "Кгс");
	Список.Добавить("181", "БРТ");
	Список.Добавить("796", "шт");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокКодовЕдиницИзмеренияТС()

Функция ПолучитьФормуВыбораЛьготыПоТранспортномуНалогу(ВыбранноеЗначение) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений();
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	
	Макет = Отчеты.РегламентированныйОтчетТранспортныйНалог.ПолучитьМакет("Списки2006Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти("КодыЛьгот");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаЛьготы");
	Форма.Заголовок = Форма.Заголовок + " по транспортному налогу";
	Форма.СписокЛьгот = КодыЛьгот;
	
	ТекущаяСтрока = КодыЛьгот.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокЛьгот.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораЛьготыПоТранспортномуНалогу()

Функция ПолучитьФормуВыбораКодаТранспортногоСредства(ВыбранноеЗначение) Экспорт
	
	КодыВидовТС = ПолучитьКодыВидовТС();
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаВидаТранспортногоСредства");
	Форма.СписокКодов = КодыВидовТС;
	
	ТекущаяСтрока = КодыВидовТС.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокКодов.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораКодаТранспортногоСредства()

Функция ПолучитьФормуВыбораЛьготыПоНалогуНаИмущество(ВыбранноеЗначение) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений();
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	
	Макет = Отчеты.РегламентированныйОтчетАвансыИмущество.ПолучитьМакет("Списки");
	
	ТекущаяОбласть = Макет.Области.Найти("Льготы");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаЛьготы");
	Форма.Заголовок = Форма.Заголовок + " по налогу на имущество";
	Форма.СписокЛьгот = КодыЛьгот;
	
	ТекущаяСтрока = КодыЛьгот.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокЛьгот.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораЛьготыПоТранспортномуНалогу()

Функция ПолучитьФормуВыбораЛьготыПоЗемельномуНалогу(ВыбранноеЗначение, ОбластьПоиска) Экспорт
	
	КодыЛьгот = Новый ТаблицаЗначений();
	КодыЛьгот.Колонки.Добавить("Код");
	КодыЛьгот.Колонки.Добавить("Наименование");
	
	Макет = Отчеты.РегламентированныйОтчетЗемельныйНалог.ПолучитьМакет("Списки2009Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти(ОбластьПоиска);

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыЛьгот.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаЛьготы");
	Форма.Заголовок = Форма.Заголовок + " по земельному налогу";
	Форма.СписокЛьгот = КодыЛьгот;
	
	ТекущаяСтрока = КодыЛьгот.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокЛьгот.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораЛьготыПоЗемельномуНалогу()

Функция ПолучитьФормуВыбораКодаКатегорииЗемель(ВыбранноеЗначение) Экспорт
	
	КодыКатегорий = Новый ТаблицаЗначений();
	КодыКатегорий.Колонки.Добавить("Код");
	КодыКатегорий.Колонки.Добавить("Наименование");
	
	Макет = Отчеты.РегламентированныйОтчетЗемельныйНалог.ПолучитьМакет("Списки2009Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти("КатегорииЗемли");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыКатегорий.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКодаКатегорииЗемель");
	Форма.СписокКодов = КодыКатегорий;
	
	ТекущаяСтрока = КодыКатегорий.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокКодов.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораКодаКатегорииЗемель()

Функция ПолучитьФормуВыбораКБК(ВыбранноеЗначение) Экспорт
	
	КодыКатегорий = Новый ТаблицаЗначений();
	КодыКатегорий.Колонки.Добавить("Код");
	КодыКатегорий.Колонки.Добавить("Наименование");
	
	Макет = Отчеты.РегламентированныйОтчетЗемельныйНалог.ПолучитьМакет("Списки2009Кв1");
	
	ТекущаяОбласть = Макет.Области.Найти("КодыКБК");

	Если НЕ (ТекущаяОбласть = Неопределено) Тогда	
	
		Для НомерСтр = ТекущаяОбласть.Верх По ТекущаяОбласть.Низ Цикл
			
			// Перебираем строки макета.
			КодПоказателя = СокрП(Макет.Область(НомерСтр, 1).Текст);
			Название      = СокрП(Макет.Область(НомерСтр, 2).Текст);
			
			Если КодПоказателя = "###" Тогда
				Прервать;
			ИначеЕсли ПустаяСтрока(КодПоказателя) Тогда
				Продолжить;
			Иначе
				НоваяСтрока = КодыКатегорий.Добавить();
				НоваяСтрока.Код          = КодПоказателя;
				НоваяСтрока.Наименование = Название;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораКБК");
	Форма.СписокКодов = КодыКатегорий;
	
	ТекущаяСтрока = КодыКатегорий.Найти(ВыбранноеЗначение, "Код");
	Если НЕ (ТекущаяСтрока = Неопределено) Тогда
		Форма.ЭлементыФормы.СписокКодов.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли;
	
	Возврат Форма;
	
КонецФункции // ПолучитьФормуВыбораКБК()

Функция ПредставлениеНалоговойЛьготыПоТранспортномуНалогу(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = СокрЛП(Ссылка.НалоговаяЛьгота);
						 
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.СнижениеНалоговойСтавки Тогда
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + ", льготная ставка " + Ссылка.ЛьготнаяСтавка + " руб.";
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаВПроцентах Тогда
		ТекстНалоговойЛьготы = СтрЗаменить(ТекстНалоговойЛьготы, " (в процентах)", " на ") + Ссылка.ПроцентУменьшения + " %";
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.УменьшениеСуммыНалогаНаСумму Тогда
		ТекстНалоговойЛьготы = СтрЗаменить(ТекстНалоговойЛьготы, " (на сумму)", " на ") + Ссылка.СуммаУменьшения + " руб.";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготы) 
	   И НЕ Ссылка.НалоговаяЛьгота = Перечисления.ВидыНалоговыхЛьготПоТранспортномуНалогу.НеПрименяется Тогда
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготы + ")";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоТранспортномуНалогу()

Функция ПредставлениеНалоговойЛьготыПоЗемельномуНалогу(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = "";
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияПоСтатье395 Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + "Освобождение от налогообложения по ст. 395 НК РФ";
		
		Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395) Тогда
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложенияПоСтатье395 + ")";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.УменьшениеНалоговойБазы Тогда
		
		Если Ссылка.УменьшениеНалоговойБазыПоСтатье391 Тогда
		
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
			                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			                     + "Не облагаемая налогом сумма 10 000 руб., установленная ст. 391 НК РФ";
			
			Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391) Тогда
				ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыУменьшениеНалоговойБазыПоСтатье391 + ")";
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ссылка.УменьшениеНалоговойБазыНаСумму Тогда
			
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
			                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
			                     + "Не облагаемая налогом сумма " + Ссылка.НеОблагаемаяНалогомСумма + " руб., установленная местным нормативным актом";
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.ОсвобождениеОтНалогообложенияМестное Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Освобождение от налогообложения, установленное местным нормативным актом";
		
	КонецЕсли;
		
		
	Если Ссылка.НалоговаяЛьготаПоНалоговойБазе = Перечисления.ВидНалоговойЛьготыПоНалоговойБазеПоЗемельномуНалогу.НеОблагаемаяНалогомПлощадь Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Доля не облагаемой налогом площади " + Ссылка.ДоляНеОблагаемойНалогомПлощадиЧислитель + "/" + Ссылка.ДоляНеОблагаемойНалогомПлощадиЗнаменатель;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.ПроцентУменьшенияСуммыНалога) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога на " + Ссылка.ПроцентУменьшенияСуммыНалога + "%";
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Ссылка.СуммаУменьшенияСуммыНалога) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога в размере " + Ссылка.СуммаУменьшенияСуммыНалога + " руб.";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.СниженнаяНалоговаяСтавка) Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Снижение налоговой ставки до " + Ссылка.СниженнаяНалоговаяСтавка + "%";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = "Не применяется";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоЗемельномуНалогу()

Функция ПредставлениеНалоговойЛьготыПоНалогуНаИмущество(Ссылка) Экспорт
	
	ТекстНалоговойЛьготы = "";
	
	Если Ссылка.ОсвобождениеОтНалогообложения Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + "Освобождение от налогообложения";
		
		Если НЕ ПустаяСтрока(Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложения) Тогда
			ТекстНалоговойЛьготы = ТекстНалоговойЛьготы + " (" + Ссылка.КодНалоговойЛьготыОсвобождениеОтНалогообложения + ")";
		КонецЕсли;
		
	КонецЕсли;
		
	Если Ссылка.СнижениеНалоговойСтавки Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
		                     + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
		                     + "Снижение налоговой ставки до " + Ссылка.СниженнаяНалоговаяСтавка + "%";
		
	КонецЕсли;
	
	ТекстПроУменьшение = "";
	
	Если Ссылка.УменьшениеСуммыНалогаВПроцентах Тогда
		
		ТекстНалоговойЛьготы = ТекстНалоговойЛьготы
							 + ?(ПустаяСтрока(ТекстНалоговойЛьготы), "", "; ")
							 + "Уменьшение суммы налога на " + Ссылка.ПроцентУменьшения + "%";
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстНалоговойЛьготы) Тогда
		ТекстНалоговойЛьготы = "Не применяется";
	КонецЕсли;
	
	Возврат ТекстНалоговойЛьготы;
	
КонецФункции // ПредставлениеНалоговойЛьготыПоНалогуНаИмущество()

// Определяет коэффициент распределения выручки по видам деятельности 
// (ЕНВД / не ЕНВД) за период.
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация;
//  НачДата     – Дата – начало периода расчета;
//	КонДата     - Дата - окончание периода расчета.
//
// Возвращаемое значение:
//  Число – коэффициент распределения расходов по видам деятельности.
//
Функция КоэффициентРаспределенияВыручкиПоВидамДеятельности(Организация, Знач НачДата, Знач КонДата) Экспорт
	
	// Массив счетов, по которым рассчитывается выручка организации.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("НачДата",          НачДата);
	Запрос.УстановитьПараметр("КонДата",          КонДата);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД",  НалоговыйУчетУСН.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("МассивСчетов",     МассивСчетов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД)
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаЕНВД,
	|	СУММА(ВЫБОР
	|			КОГДА (НЕ ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД))
	|				ТОГДА -ХозрасчетныйОбороты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыручкаНеЕНВД,
	|	ХозрасчетныйОбороты.Счет КАК Счет
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачДата, &КонДата, Период, Счет В ИЕРАРХИИ (&МассивСчетов), , Организация = &Организация, (НЕ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрибыльУбытокОтПродаж)), ) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОбороты.Счет";
	РезультатЗапроса = Запрос.Выполнить();
	
	// Если результат запроса пустой, то считаем, что все
	// расходы относятся к деятельности, не облагаемой ЕНВД.
	Если РезультатЗапроса.Пустой() Тогда
		
		Коэффициент = 1;
		
	Иначе
		
		ТаблицаРезультат = РезультатЗапроса.Выгрузить();
		ВыручкаЕНВД      = Макс(ТаблицаРезультат.Итог("ВыручкаЕНВД"),   0);
		ВыручкаНеЕНВД    = Макс(ТаблицаРезультат.Итог("ВыручкаНеЕНВД"), 0);
		
		Если ВыручкаНеЕНВД + ВыручкаЕНВД = 0 Тогда // нет дохода ни по одному из видов деятельности
			
			Коэффициент = 1;
			
		ИначеЕсли ВыручкаНеЕНВД = 0 Тогда  // нет дохода виду деятельности не подпадающему под обложение ЕНВД
			
			Коэффициент = 0;
			
		Иначе
			
			Коэффициент = ВыручкаНеЕНВД / (ВыручкаНеЕНВД + ВыручкаЕНВД);
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Коэффициент;
	
КонецФункции // КоэффициентРаспределенияВыручкиПоВидамДеятельности()



// Возвращает параметры состояния ОС 
// 
// Параметры
//  ОсновноеСредство    - СправочникСсылка.ОсновныеСредства
//  Состояние			- Перечисление.ВидыСостоянийОС
//  УпрУчет				- Булево, Учет, 
//  Организация		    - СправочникСсылка.Организации
// Возвращаемое значение структура с полями:
//	Дата,НомерДок,ИмяДок,Сумма,Регистратор
//
Функция ПолучитьАтрибутыСостоянияОС(ОС, Состояние, УпрУчет = Истина, Организация =  Неопределено) Экспорт 
	
	РегистрСобытий 	 = "СобытияОС";
	РегистрСостояний = "СостоянияОС";
	СуммаЗатрат 	 = "СуммаЗатрат";
	
	Если НЕ УпрУчет тогда
		
		РегистрСобытий 	 = РегистрСобытий   + "Организаций";
		РегистрСостояний = РегистрСостояний + "Организаций";
		СуммаЗатрат 	 = СуммаЗатрат		+ "БУ";
		
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	"+РегистрСостояний+".Регистратор.Ссылка КАК Регистратор,
	|	"+РегистрСостояний+".ОсновноеСредство,
	|	"+РегистрСостояний+".Состояние,
	|	ЕСТЬNULL("+РегистрСостояний+".ДатаСостояния, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСостояния,
	|	"+РегистрСобытий+".Событие,
	|	"+РегистрСобытий+".НомерДокумента,
	|	"+РегистрСобытий+".НазваниеДокумента,
	|	ЕСТЬNULL("+РегистрСобытий+"."+СуммаЗатрат+", 0) КАК Сумма
	|ИЗ
	|	РегистрСведений."+РегистрСостояний+" КАК "+РегистрСостояний+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+РегистрСобытий+" КАК "+РегистрСобытий+"
	|		ПО "+РегистрСостояний+".Регистратор = "+РегистрСобытий+".Регистратор 
	|		И "+РегистрСостояний+".ОсновноеСредство = "+РегистрСобытий+".ОсновноеСредство 
	|ГДЕ
	|		"+РегистрСостояний+".ОсновноеСредство = &ОсновноеСредство 
	|		И "+РегистрСостояний+".Состояние = &Состояние 
	|		И "+РегистрСобытий+".Событие.ВидСобытияОС в (&ВидСобытияОС)";
	
	ЗапросСостоянияОС = Новый Запрос;
	ЗапросСостоянияОС.УстановитьПараметр("Состояние",Состояние);
	СоответствиеСобытийСостояниям = ПолучитьСоответствиеСобытийСостояниямОС();
	ВидСобытия = Новый Массив;
	Событие    = СоответствиеСобытийСостояниям.Получить(Состояние);
	ВидСобытия.Добавить(Событие);
	Если Событие = Перечисления.ВидыСобытийОС.Списание тогда
		 ВидСобытия.Добавить(Перечисления.ВидыСобытийОС.Передача);
	КонецЕсли;

	ЗапросСостоянияОС.УстановитьПараметр("ВидСобытияОС",ВидСобытия);
	ЗапросСостоянияОС.УстановитьПараметр("ОсновноеСредство",ОС);
	Если Не УпрУчет тогда
		ЗапросСостоянияОС.УстановитьПараметр("Организация",Организация);
		ТекстЗапроса= ТекстЗапроса+"
		|   И  "+РегистрСобытий+".Организация	= &Организация
		|   И  "+РегистрСостояний+".Организация = &Организация";
	КонецЕсли;
	
	ЗапросСостоянияОС.Текст	= ТекстЗапроса;
		
	ВыборкаСостояний = ЗапросСостоянияОС.Выполнить().Выбрать();
	СтруктураСостояния = Новый Структура;
	
	Если ВыборкаСостояний.Следующий() тогда
		
		СтруктураСостояния.Вставить( "Дата"        , ВыборкаСостояний.ДатаСостояния);
		СтруктураСостояния.Вставить( "ИмяДок"      , ВыборкаСостояний.НазваниеДокумента);
		СтруктураСостояния.Вставить( "НомерДок"    , ВыборкаСостояний.НомерДокумента);
		СтруктураСостояния.Вставить( "Сумма"	   , ВыборкаСостояний.Сумма);
		СтруктураСостояния.Вставить( "Регистратор" , ВыборкаСостояний.Регистратор);
		
	Иначе	                                              
		
		СтруктураСостояния.Вставить( "Дата"		   , '00010101000000');
		СтруктураСостояния.Вставить( "ИмяДок"	   , "");
		СтруктураСостояния.Вставить( "НомерДок"	   , "");
		СтруктураСостояния.Вставить( "Сумма"	   , 0);
		СтруктураСостояния.Вставить( "Регистратор" , Неопределено);
		
	КонецЕсли;	
	
	Возврат СтруктураСостояния;
	
КонецФункции

// Функция возвращает соответствие значений перечисления Виды событий ОС
// значениям перечисления СостоянияОС
Функция ПолучитьСоответствиеСобытийСостояниямОС()
	
	СоответствиеСобытийСостояниям = Новый Соответствие;
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.ПринятоКУчету,Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	СоответствиеСобытийСостояниям.Вставить(Перечисления.СостоянияОС.СнятоСУчета,Перечисления.ВидыСобытийОС.Списание);
	
	Возврат СоответствиеСобытийСостояниям;
	
КонецФункции

// Получить данные ОС.
//
Функция ПолучитьДанныеОС(Период, СписокОС, Организация) Экспорт
	
	ТабАмортизации = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииОС(Период, Организация, СписокОС);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТабАмортизации", ТабАмортизации);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.СуммаАмортизации КАК СуммаАмортизации,
	|	ВнешнийИсточник.СуммаАмортизацииНУ КАК СуммаАмортизацииНУ,
	|	ВнешнийИсточник.СуммаАмортизацииПР КАК СуммаАмортизацииПР,
	|	ВнешнийИсточник.СуммаАмортизацииВР КАК СуммаАмортизацииВР,
	|	ВнешнийИсточник.СуммаКапитальныхВложенийВключаемыхВРасходы КАК СуммаКапитальныхВложенийВключаемыхВРасходы
	|ПОМЕСТИТЬ 
	|   ТабАмортизации
	|ИЗ 
	|	&ТабАмортизации КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	ТабИзноса = УправлениеВнеоборотнымиАктивами.РасчетИзносаБухРегл(Период, Организация, СписокОС);
	
	Запрос.УстановитьПараметр("ТабИзноса", ТабИзноса);
	Запрос.Текст = 
	"ВЫБРАТЬ 
	|	ВнешнийИсточник.ОсновноеСредство КАК ОсновноеСредство,
	|	ВнешнийИсточник.Износ КАК СуммаИзноса
	|ПОМЕСТИТЬ 
	|   ТабИзноса
	|ИЗ 
	|	&ТабИзноса КАК ВнешнийИсточник";
	Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("СписокОС",    СписокОС);
	Запрос.УстановитьПараметр("Период",      Период);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации
	|ПОМЕСТИТЬ СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|ИЗ
	|	РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Субконто1 КАК ОсновноеСредство,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Стоимость,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СтоимостьНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СтоимостьПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СтоимостьВР,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Амортизация,
	|	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК АмортизацияНУ,
	|	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК АмортизацияПР,
	|	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК АмортизацияВР
	|ПОМЕСТИТЬ ХозрасчетныйОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетУчета
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних
	|			
	|				ОБЪЕДИНИТЬ
	|			
	|				ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации
	|				ИЗ
	|					СчетаБухгалтерскогоУчетаОсновныхСредствСрезПоследних),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
	|			Организация = &Организация
	|				И Субконто1 В (&СписокОС)) КАК ХозрасчетныйОстатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Период КАК ДатаПринятияКУчету,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииНУ,
	|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ПРДляВычисленияАмортизации,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииНУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СтоимостьДо2002 КАК СтоимостьДо2002НУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2002 КАК АмортизацияДо2002НУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.АмортизацияДо2009 КАК АмортизацияДо2009НУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ФактическийСрокИспользованияДо2009 КАК ФактическийСрокИспользованияДо2009НУ,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПервоначальнаяСтоимостьУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СуммаНачисленнойАмортизации КАК СуммаНачисленнойАмортизацииУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ДатаПриобретения КАК ДатаПриобретенияУСН,
	|	ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент КАК СпециальныйКоэффициентНУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособыОтраженияРасходовПоАмортизации,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчета,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизацию,
	|	НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюНУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеОрганизации,
	|	ЕСТЬNULL(СтоимостьОС.Стоимость, 0) КАК Стоимость,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) - ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьНУ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) КАК СтоимостьПР,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) - ЕСТЬNULL(ТабАмортизации.СуммаКапитальныхВложенийВключаемыхВРасходы, 0) КАК СтоимостьВР,
	|	ВЫБОР КОГДА ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса)
	|	        ИЛИ ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости = ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ) 
	|		ТОГДА
	|			ЕСТЬNULL(АмортизацияОС.Стоимость, 0) + ЕСТЬNULL(ТабИзноса.СуммаИзноса, 0)
	|   	ИНАЧЕ
	|			ЕСТЬNULL(АмортизацияОС.Амортизация, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизации, 0)
	|	КОНЕЦ КАК Амортизация,
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияНУ,
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияПР,
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0) + ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияВР,
	|	ЕСТЬNULL(ТабАмортизации.СуммаАмортизации, 0) КАК АмортизацияЗаТекущийМесяц,
	|	ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииНУ, 0) КАК АмортизацияЗаТекущийМесяцНУ,
	|	ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииПР, 0) КАК АмортизацияЗаТекущийМесяцПР,
	|	ЕСТЬNULL(ТабАмортизации.СуммаАмортизацииВР, 0) КАК АмортизацияЗаТекущийМесяцВР,
	|	ЕСТЬNULL(ТабИзноса.СуммаИзноса, 0) КАК ИзносЗаТекущийМесяц
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			&Период,
	|			Организация = &Организация
	|				И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетУСНСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК СтоимостьОС
	|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = СтоимостьОС.ОсновноеСредство)
	|			И (СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = СтоимостьОС.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ХозрасчетныйОстатки КАК АмортизацияОС
	|		ПО (СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство = АмортизацияОС.ОсновноеСредство)
	|			И (СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = АмортизацияОС.Счет)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабАмортизации КАК ТабАмортизации
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ТабАмортизации.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабИзноса КАК ТабИзноса
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ТабИзноса.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|				&Период,
	|				Организация = &Организация
	|					И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство";
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеОС()


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ С ИМУЩЕСТВОМ В ЭКСПЛУАТАЦИИ

// Функция возвращает расшифровку срока полезного использования в годах и 
// месяцах.
//
// Параметры:
//  СрокПолезногоИспользования - срок полезного использования (в месяцах),
//                 подлежащий расшифровке
//
// Возвращаемое значение:
//  Строка       - расшифровка срока полезного использования в годах и 
//                 месяцах
//
Функция РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользования) Экспорт
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если ЗначениеЗаполнено(СрокПолезногоИспользования) Тогда
	
		ЧислоЛет     = Цел(СрокПолезногоИспользования / 12);
		ЧислоМесяцев = (СрокПолезногоИспользования % 12);
		
		Если НЕ (ЧислоЛет = 0) Тогда
			
			// Построим строку с числом лет
			Если (СтрДлина(ЧислоЛет) > 1) И (Число(Сред(ЧислоЛет, СтрДлина(ЧислоЛет) - 1, 1)) = 1) Тогда
				СтрокаГод = " лет";
			ИначеЕсли Число(Прав(ЧислоЛет, 1)) = 1 Тогда
				СтрокаГод = " год";
			ИначеЕсли (Число(Прав(ЧислоЛет, 1)) > 1) И (Число(Прав(ЧислоЛет, 1)) < 5) Тогда
				СтрокаГод = " года";
			Иначе
				СтрокаГод = " лет";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + Строка(ЧислоЛет) + СтрокаГод;
			
		КонецЕсли;
		
		Если НЕ (ЧислоМесяцев = 0) Тогда
			
			// Построим строку с числом месяцев
			Если (СтрДлина(ЧислоМесяцев) > 1) И (Число(Сред(ЧислоМесяцев, СтрДлина(ЧислоМесяцев) - 1, 1)) = 1) Тогда
				СтрокаМесяц = " месяцев";
			ИначеЕсли Число(Прав(ЧислоМесяцев, 1)) = 1 Тогда
				СтрокаМесяц = " месяц";
			ИначеЕсли (Число(Прав(ЧислоМесяцев, 1)) > 1) И (Число(Прав(ЧислоМесяцев, 1)) < 5) Тогда
				СтрокаМесяц = " месяца";
			Иначе
				СтрокаМесяц = " месяцев";
			КонецЕсли;
			
			РасшифровкаСрокаПолезногоИспользования = РасшифровкаСрокаПолезногоИспользования + ?(НЕ ЗначениеЗаполнено(РасшифровкаСрокаПолезногоИспользования), "", " ") + Строка(ЧислоМесяцев) + СтрокаМесяц;
		
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
		
	КонецЕсли;
	
	Возврат РасшифровкаСрокаПолезногоИспользования;
	                                        	
КонецФункции // РасшифровкаСрокаПолезногоИспользования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ С НМА

Процедура ОткрытьФормуВыбораНМА(ВидОбъектаУчета, СтандартнаяОбработка, Владелец, Ключ = неопределено,ВыбратьНесколькоЗначений = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;

	Форма = Справочники.НематериальныеАктивы.ПолучитьФормуВыбора("ФормаВыбора", Владелец, Ключ);

	ЭлементОтбора               = Форма.СправочникСписок.Отбор.ВидОбъектаУчета;
	ЭлементОтбора.Значение      = ВидОбъектаУчета;
	ЭлементОтбора.Использование = Истина;

	Если НЕ ВыбратьНесколькоЗначений тогда
		Форма.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Владелец.Значение;
	КонецЕсли;

	Форма.ЗакрыватьПриВыборе = НЕ ВыбратьНесколькоЗначений;
	Форма.Открыть();

КонецПроцедуры


