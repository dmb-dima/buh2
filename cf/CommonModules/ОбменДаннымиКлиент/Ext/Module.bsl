////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНЕШНИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура-обработчик закрытия формы настройки узла плана обмена
//
// Параметры:
//  Форма – управляемая форма, из которой вызвана процедура
// 
Процедура ФормаНастройкиУзлаКомандаЗакрытьФорму(Форма) Экспорт
	
	Для Каждого НастройкаОтбора ИЗ Форма.НастройкаОтборовНаУзле Цикл
		
		Если ТипЗнч(Форма[НастройкаОтбора.Ключ]) = Тип("ДанныеФормыКоллекция") Тогда
			
			СтруктураТабличнойЧасти = Форма.НастройкаОтборовНаУзле[НастройкаОтбора.Ключ];
			
			Для Каждого Элемент ИЗ СтруктураТабличнойЧасти Цикл
				
				СтруктураТабличнойЧасти[Элемент.Ключ].Очистить();
				
				Для Каждого СтрокаКоллекции ИЗ Форма[НастройкаОтбора.Ключ] Цикл
					
					СтруктураТабличнойЧасти[Элемент.Ключ].Добавить(СтрокаКоллекции[Элемент.Ключ]);
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Форма.НастройкаОтборовНаУзле[НастройкаОтбора.Ключ] = Форма[НастройкаОтбора.Ключ];
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.Модифицированность = Ложь;
	Форма.Закрыть(Форма.НастройкаОтборовНаУзле);
	
КонецПроцедуры

// Процедура-обработчик закрытия формы настройки значений по умолчанию узла плана обмена
//
// Параметры:
//  Форма – управляемая форма, из которой вызвана процедура
// 
Процедура ФормаНастройкиЗначенийПоУмолчаниюКомандаЗакрытьФорму(Форма) Экспорт
	
	Для Каждого Настройка ИЗ Форма.ЗначенияПоУмолчаниюНаУзле Цикл
		
		Форма.ЗначенияПоУмолчаниюНаУзле[Настройка.Ключ] = Форма[Настройка.Ключ];
		
	КонецЦикла;
	
	Форма.Модифицированность = Ложь;
	Форма.Закрыть(Форма.ЗначенияПоУмолчаниюНаУзле);
	
КонецПроцедуры

// Процедура-обработчик закрытия формы настройки узла плана обмена
//
// Параметры:
//  Отказ – флаг отказа от закрытия формы
//  Форма – управляемая форма, из которой вызвана процедура
// 
Процедура ФормаНастройкиПередЗакрытием(Отказ, Форма) Экспорт
	
	Если Форма.Модифицированность Тогда
		
		Ответ = Вопрос(НСтр("ru = 'Данные были изменены. Закрыть форму без сохранения изменений?'"), РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму помощника настройки обмена данными для заданного плана обмена
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, как объекта метаданных, для которого необходимо открыть помощник
// 
Процедура ОткрытьПомощникНастройкиОбменаДанными(ИмяПланаОбмена) Экспорт
	
	ПараметрыФормы = Новый Структура("ИмяПланаОбмена", ИмяПланаОбмена);
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.Форма", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СВОЙСТВА

// Функция-свойство: возвращает максимально-допустимое количество полей,
//  которые отображаются в помощнике сопоставления объектов ИБ.
//
// Тип: Число
//
Функция МаксимальноеКоличествоПолейСопоставленияОбъектов() Экспорт
	
	Возврат 5;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНУТРЕННИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Открывает файл в ассоциированном приложении операционной системы
// Каталоги открываются в приложении explorer
//
// Параметры:
//  Объект - объект из которого по имени свойства будет получено имя файла для открытия
//  ИмяСвойства - Строка - имя свойства объекта из которого будет получено имя файла для открытия
//  СтандартнаяОбработка - Булево - флаг стандартной обработки. Устанавливается в значение Ложь.
// 
Процедура ОбработчикОткрытияФайлаИлиКаталога(Объект, ИмяСвойства, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПолноеИмяФайла = Объект[ИмяСвойства];
	
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог в приложении explorer
	// файл открываем в ассоциированном приложении
	ЗапуститьПриложение(ПолноеИмяФайла);
	
КонецПроцедуры

// Открывает диалог для выбора файлового каталога
//
Процедура ОбработчикВыбораФайловогоКаталога(Объект, ИмяСвойства, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	Диалог.Заголовок = НСтр("ru = 'Укажите каталог'");
	Диалог.Каталог   = Объект[ИмяСвойства];
	
	Если Диалог.Выбрать() Тогда
		
		Объект[ИмяСвойства] = Диалог.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает диалог для выбора файла
//
Процедура ОбработчикВыбораФайла(Объект,
								ИмяСвойства,
								СтандартнаяОбработка,
								Фильтр = "",
								ПроверятьСуществованиеФайла = Истина) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		Предупреждение(НСтр("ru = 'Для данной операции необходимо установить расширение работы с файлами!'"));
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	Диалог.Заголовок = НСтр("ru = 'Выберите файл'");
	Диалог.ПолноеИмяФайла = Объект[ИмяСвойства];
	Диалог.МножественныйВыбор          = Ложь;
	Диалог.ПредварительныйПросмотр     = Ложь;
	Диалог.ПроверятьСуществованиеФайла = ПроверятьСуществованиеФайла;
	Диалог.Фильтр                      = Фильтр;
	
	Если Диалог.Выбрать() Тогда
		
		Объект[ИмяСвойства] = Диалог.ПолноеИмяФайла;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму записи регистра сведений по заданному отбору
// 
Процедура ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, Знач ИмяРегистра, ФормаВладелец) Экспорт
	Перем КлючЗаписи;
	
	НаборЗаписейПустой = ОбменДаннымиСервер.НаборЗаписейРегистраПустой(Отбор, ИмяРегистра);
	
	Если Не НаборЗаписейПустой Тогда
		
		ТипЗначения = Тип("РегистрСведенийКлючЗаписи." + ИмяРегистра);
		Параметры = Новый Массив(1);
		Параметры[0] = Отбор;
		
		КлючЗаписи = Новый(ТипЗначения, Параметры);
		
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("Ключ",               КлючЗаписи);
	ПараметрыЗаписи.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	// открываем форму записи РС
	ОткрытьФормуМодально("РегистрСведений." + ИмяРегистра + ".ФормаЗаписи", ПараметрыЗаписи, ФормаВладелец);
	
КонецПроцедуры

// Открывает окно выбора файла с правилами
// и выводит информацию о правилах обмена или правилах регистрации данных пользователю.
//
Процедура ПолучитьИнформациюОПравилах(УникальныйИдентификатор) Экспорт
	
	Перем АдресВременногоХранилища;
	Перем СтрокаИнформацииОПравилах;
	
	Отказ = Ложь;
	
	Если Не ПоместитьФайл(АдресВременногоХранилища, , , Истина, УникальныйИдентификатор) Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Выполняется загрузка информации о правилах...'");
	Состояние(НСтрока);
	
	// загрузка правил на сервере
	ОбменДаннымиСервер.ЗагрузитьИнформациюОПравилах(Отказ, АдресВременногоХранилища, СтрокаИнформацииОПравилах);
	
	Если Отказ Тогда
		
		НСтрока = НСтр("ru = 'При получении информации о правилах возникла ошибка!'");
		
		Предупреждение(НСтрока);
		
	Иначе
		
		ЗаголовокОкна = НСтр("ru = 'Информация о правилах'");
		
		Предупреждение(СтрокаИнформацииОПравилах,, ЗаголовокОкна);
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает журнал регистрации с отбором по событиям выгрузки или загрузки данных для заданного узла плана обмена
// 
Процедура ПерейтиВЖурналРегистрацииСобытийДанных(УзелИнформационнойБазы, ПараметрыВыполненияКоманды, ДействиеПриОбменеСтрокой) Экспорт
	
	СобытиеЖурналаРегистрации = ОбменДаннымиСервер.ПолучитьКлючСообщенияЖурналаРегистрацииПоСтрокеДействия(УзелИнформационнойБазы, ДействиеПриОбменеСтрокой);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрации);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ПараметрыВыполненияКоманды.Источник, ПараметрыВыполненияКоманды.Уникальность, ПараметрыВыполненияКоманды.Окно);
	
КонецПроцедуры

// Открывает модально журнал регистрации с отбором по событиям выгрузки или загрузки данных для заданного узла плана обмена
//
Процедура ПерейтиВЖурналРегистрацииСобытийДанныхМодально(УзелИнформационнойБазы, Владелец, ДействиеПриОбмене) Экспорт
	
	// вызов сервера
	ПараметрыФормы = ОбменДаннымиСервер.ПолучитьСтруктуруДанныхОтбораЖурналаРегистрации(УзелИнформационнойБазы, ДействиеПриОбмене);
	
	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Открывает форму выполнения обмена данными для заданного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы - ПланОбменаСсылка - узел плана обмена, для которого необходимо открыть форму;
//  Владелец               – форма-владелец для открываемой формы;
// 
Процедура ВыполнитьОбменДаннымиОбработкаКоманды(УзелИнформационнойБазы, Владелец) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	ОткрытьФорму("ОбщаяФорма.ВыполнениеОбменаДанными", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Открывает форму интерактивного выполнения обмена данными для заданного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы - ПланОбменаСсылка - узел плана обмена, для которого необходимо открыть форму;
//  Владелец               – форма-владелец для открываемой формы;
//
Процедура ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(УзелИнформационнойБазы, Владелец) Экспорт
	
	// открываем форму помощника сопоставления объектов;
	// в качестве параметра формы задаем узел информационной базы;
	ПараметрыФормы = Новый Структура("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	ОткрытьФорму("Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Открывает форму списка сценариев выполнения обмена данными для заданного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы - ПланОбменаСсылка - узел плана обмена, для которого необходимо открыть форму;
//  Владелец               – форма-владелец для открываемой формы;
//
Процедура ОбработкаКомандыНастроитьРасписаниеВыполненияОбмена(УзелИнформационнойБазы, Владелец) Экспорт
	
	ПараметрыФормы = Новый Структура("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	ОткрытьФорму("Справочник.СценарииОбменовДанными.Форма.НастройкаРасписанияОбменовДанными", ПараметрыФормы, Владелец);
	
КонецПроцедуры

// Процедура-обработчик запуска клиентского сеанса приложения.
// Если выполняется первый запуск ИБ для подчиненного узла РИБ,
// то открывается форма помощника создания обмена данными.
// 
Процедура ПриНачалеРаботыСистемы() Экспорт
	
	//ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	//
	//// если выполняется первый запуск подчиненного узла РИБ
	//Если ПараметрыРаботыКлиента.ЭтоПодчиненныйУзелРИБ
	//	И Не ПараметрыРаботыКлиента.НастройкаПодчиненногоУзлаРИБЗавершена Тогда
	//	
	//	ПараметрыФормы = Новый Структура("ИмяПланаОбмена, ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ", ПараметрыРаботыКлиента.ИмяПланаОбменаРИБ);
	//	
	//	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.Форма", ПараметрыФормы);
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Выполняется проверка дозагрузки сообщения обмена с изменениями конфигурации.
// Загрузка такого сообщения обмена в подчиненном узле выполняется в два этапа. 
// Вначале выполняется загрузка изменения конфигурации, затем загрузка данных.
// Эта функция необходима для реализации сценария, когда загрузка данных 
// сообщения выполняется перед выполнением обработчиков обновления ИБ.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//   Истина – либо загрузка сообщения не требуется, либо загрузка сообщения 
//   выполнена успешно или отменена; Ложь – загрузка сообщения выполнена с ошибками.
//
Функция ПроверитьЗагрузкуСообщенияОбменаСИзменениямиКонфигурацииДляПодчиненногоУзла() Экспорт
	
	Результат = Истина;
	
	//ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	//
	//Если  ПараметрыРаботыКлиента.ЭтоПодчиненныйУзелРИБ
	//	И ПараметрыРаботыКлиента.НеобходимоОбновлениеИнформационнойБазы
	//	И ПараметрыРаботыКлиента.НастройкаПодчиненногоУзлаРИБЗавершена Тогда
	//	
	//	Результат = ОткрытьФормуМодально("ОбщаяФорма.ЗагрузкаСообщенияОбменаСИзменениямиКонфигурации") = Истина;
	//	
	//КонецЕсли;
	//
	//Если Не Результат Тогда
	//	
	//	ЗавершитьРаботуСистемы(Ложь);
	//	
	//КонецЕсли;
	
	Возврат Результат;
КонецФункции

//

// Возвращает структуру статусов выполнения загрузки данных
//
Функция СтраницыСтатусаЗагрузкиДанных() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Неопределено", "СтатусЗагрузкиНеопределено");
	Структура.Вставить("Ошибка",       "СтатусЗагрузкиОшибка");
	Структура.Вставить("Успех",        "СтатусЗагрузкиУспех");
	
	Структура.Вставить("Предупреждение_СообщениеОбменаБылоРанееПринято", "СтатусЗагрузкиПредупреждение");
	Структура.Вставить("ВыполненоСПредупреждениями",                     "СтатусЗагрузкиПредупреждение");
	Структура.Вставить("Ошибка_ТранспортСообщения",                      "СтатусЗагрузкиОшибка");
	
	Возврат Структура;
КонецФункции

// Возвращает структуру статусов выполнения выгрузки данных
//
Функция СтраницыСтатусаВыгрузкиДанных() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Неопределено", "СтатусВыгрузкиНеопределено");
	Структура.Вставить("Ошибка",       "СтатусВыгрузкиОшибка");
	Структура.Вставить("Успех",        "СтатусВыгрузкиУспех");
	
	Структура.Вставить("Предупреждение_СообщениеОбменаБылоРанееПринято", "СтатусВыгрузкиПредупреждение");
	Структура.Вставить("Ошибка_ТранспортСообщения",                      "СтатусВыгрузкиОшибка");
	
	Возврат Структура;
КонецФункции

// Возвращает структуру с наименованием гиперссылки поля загрузки данных
//
Функция ЗаголовкиГиперссылокЗагрузкиДанных() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Неопределено",               НСтр("ru = 'Загрузка данных не выполнялась'"));
	Структура.Вставить("Ошибка",                     НСтр("ru = 'Загрузка данных выполнена с ошибками'"));
	Структура.Вставить("ВыполненоСПредупреждениями", НСтр("ru = 'Загрузка данных выполнена с предупреждениями'"));
	Структура.Вставить("Успех",                      НСтр("ru = 'Загрузка данных выполнена успешно'"));
	
	Структура.Вставить("Предупреждение_СообщениеОбменаБылоРанееПринято", НСтр("ru = 'Сообщение обмена было ранее принято'"));
	Структура.Вставить("Ошибка_ТранспортСообщения",                      НСтр("ru = 'Ошибка транспорта сообщения обмена при загрузке данных'"));
	
	Возврат Структура;
КонецФункции

// Возвращает структуру с наименованием гиперссылки поля выгрузки данных
//
Функция ЗаголовкиГиперссылокВыгрузкиДанных() Экспорт
	
	Структура = Новый Структура;
	Структура.Вставить("Неопределено", НСтр("ru = 'Выгрузка данных не выполнялась'"));
	Структура.Вставить("Ошибка",       НСтр("ru = 'Выгрузка данных выполнена с ошибками'"));
	Структура.Вставить("Успех",        НСтр("ru = 'Выгрузка данных выполнена успешно'"));
	
	Структура.Вставить("Предупреждение_СообщениеОбменаБылоРанееПринято", НСтр("ru = 'Предупреждение'"));
	Структура.Вставить("Ошибка_ТранспортСообщения",                      НСтр("ru = 'Ошибка транспорта сообщения обмена при выгрузке данных'"));
	
	Возврат Структура;
КонецФункции
