	// Этот модуль предназначен для реализации алгоритмов работы форм и 
// содержит процедуры и функции работы с формами и элементами форм,
// а также подготовки данных для представления информации в формах.
// Временно присутствует секция поддержки формирования печатных форм.

// Процедура открывает форму установки файла обновления конфигурации
//
Процедура ОткрытьФормуНастройкиОбновленияКонфигурации() Экспорт

	ПолучитьОбщуюФорму("НастройкаОбновленияКонфигурации").Открыть();

КонецПроцедуры

// Процедура вызывается из интерфейсов и служит для открытия формы 
// набора записей регистра сведений ДатаПроведенияПоРазделамУчета
//
// Параметры:
//  нет
//
Процедура ОткрытьФормуНастройкиПроведенияПоРазделамУчета() Экспорт
	
	РегистрыСведений.ДатаПроведенияПоРазделамУчета.ПолучитьФорму("ФормаНабораЗаписей").Открыть();
	
КонецПроцедуры


// Процедура вызывается из форм платежных документов при смене кассы или 
// банковского счета. Меняет валюту, курс документа и предлагает пересчитать сумму.
//
// Параметры:
//  ВалютаДокумента  - ссылка на справочник, валюта документа до изменения;
//  КурсДокумента    - число, курс документа до изменения; 
//  ДатаДокумента    - дата, дата на которую будем получать новый курс; 
//  СуммаДокумента   - число, сумма документа; 
//  ВалютаДенежныхСредств - ссылка на справочник, валюта выбранного счета или кассы 
//                     (новая валюта документа);
//
Процедура ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаДокумента, 
	                                        СуммаДокумента, ВалютаДенежныхСредств) Экспорт

	// Поменяем валюту до вопроса о пересчете, чтобы было видно, что она действительно поменялась.
	СтараяВалюта    = ВалютаДокумента; 
	СтарыйКурс      = КурсДокумента;
	СтараяКратность = КратностьДокумента;
	ВалютаДокумента = ВалютаДенежныхСредств; // должны строго совпадать

	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаДокумента);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

	Если ВалютаДокумента <>  СтараяВалюта
	   И СуммаДокумента > 0 Тогда

		// Надо предложить пересчитать сумму.
		Ответ = Вопрос("Изменилась валюта документа. Пересчитать сумму документа?", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДокумента, СтараяВалюта, ВалютаДокумента, СтарыйКурс,
									    КурсДокумента,СтараяКратность,КратностьДокумента);
		КонецЕсли; 

	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияКассыБанковскогоСчета()

//////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ВЫБОРА

// Вызывается в обработчике события "Начало выбора" при выборе счета.
// используется для получения списка только балансовых или только
// забаланс
//
Процедура ВыборСчета(Элемент, СтандартнаяОбработка, Флаг) Экспорт

	СтандартнаяОбработка = Ложь;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Флаг", Флаг);
	Запрос.Текст = "ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|
	|ГДЕ
	|	Хозрасчетный.Забалансовый = &Флаг";
	ВыборкаСчетов = Запрос.Выполнить().Выбрать();
	СписокСчетов  = Новый СписокЗначений;
	Пока ВыборкаСчетов.Следующий() Цикл
		СписокСчетов.Добавить(ВыборкаСчетов.Счет);
	КонецЦикла;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = СписокСчетов;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

Конецпроцедуры // ВыборСчета

// Процедура выполняет стандартные действия при начале выбора договора контрагента в формах документов.
//
// Параметры:
//  ДокументОбъект                   - объект редактируемого документа;
//  ФормаДокумента                    - форма редактируемого документа;
//  ЭлементФормы                      - элемент формы документа, который надо заполнить; 
//  Контрагент                        - ссылка на справочник, определяет контрагента по договору;
//  ДоговорКонтрагента                - ссылка на справочник, определяет договор контрагента;
//  ВидДоговораВзаиморасчетов         - вид договора взаиморасчетов для отбора, значение перечисления ВидыДоговоровКонтрагентов;
//  СтандартнаяОбработка              - булево, признак выполнения стандартной (системной) обработки события,
//  СтруктураДополнительныхПараметров - структура, содержит дополнительные значения отбора, необязательный,
//                                      ключ - имя отбора, значение - структура, определяющая отбор с ключами:
//                                      ЗначениеОтбора (если не задан, то отбор не устанавливается), 
//                                      ВидСравненияОтбора (если не задан, то ВидСравнения.Равно), 
//                                      ДоступностьОтбора (если не задан, то Ложь).
//
Процедура НачалоВыбораЗначенияДоговораКонтрагента(ДокументОбъект, ФормаДокумента, ЭлементФормы, Контрагент, ДоговорКонтрагента,
                                                  ВидыДоговораВзаиморасчетов, СтандартнаяОбработка,
                                                  СтруктураДополнительныхПараметров = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//// Тип выбираемого значения зависит от договора.
	//Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
	//	Предупреждение("Не выбран контрагент!");
	//	ФормаДокумента.ТекущийЭлемент = ФормаДокумента.ЭлементыФормы.Контрагент;
	//	Возврат;
	//КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,ЭлементФормы,);

	// Владельца менять по умолчанию не даем.
	ФормаВыбора.ПараметрОтборПоВладельцу = Контрагент;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	Если ВидыДоговораВзаиморасчетов<>Неопределено Тогда

		// Оставим в выборе только "правильные" договоры
		Если ТипЗнч(ВидыДоговораВзаиморасчетов) = Тип("СписокЗначений") Тогда
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.ВСписке;
		Иначе
			ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.ВидСравнения                    = ВидСравнения.Равно;
		КонецЕсли;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Значение                            = ВидыДоговораВзаиморасчетов;
		ФормаВыбора.СправочникСписок.Отбор.ВидДоговора.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидДоговора.Доступность = Ложь;
	КонецЕсли;

	// Еще в документе выбрана организация, фильтруем договоры по головной организации
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Организация",МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(ДокументОбъект.Организация);
		ФормаВыбора.СправочникСписок.Отбор.Организация.Значение                            = ГоловнаяОрганизация;
		ФормаВыбора.СправочникСписок.Отбор.Организация.Использование                       = Истина;
		ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения                        = ВидСравнения.Равно;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;

	// Добавим фильтры по дополнительным параметрам отбора
	Если ТипЗнч(СтруктураДополнительныхПараметров) = Тип("Структура") Тогда
		Для каждого ЭлементСтруктуры Из СтруктураДополнительныхПараметров Цикл

			СтруктураОтбора = ЭлементСтруктуры.Значение;
			
			ЗначениеОтбора     = Неопределено;
			ВидСравненияОтбора = Неопределено;
			ДоступностьОтбора  = Неопределено;

			Если СтруктураОтбора.Свойство("ЗначениеОтбора", ЗначениеОтбора) Тогда

				Если СтруктураОтбора.Свойство("ВидСравненияОтбора", ВидСравненияОтбора) Тогда
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравненияОтбора;
				Иначе
					ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;

				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЗначениеОтбора;
				ФормаВыбора.СправочникСписок.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

				Если СтруктураОтбора.Свойство("ДоступностьОтбора", ДоступностьОтбора) Тогда
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = ДоступностьОтбора;
				Иначе
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора[ЭлементСтруктуры.Ключ].Доступность = Ложь;
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	ФормаВыбора.ЭлементыФормы.СправочникСписок.ТекущаяСтрока = ДоговорКонтрагента;
	
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДоговораКонтрагента()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  ДокументОбъект       - объект редактируемого документа;
//  ФормаДокумента       - форма редактируемого документа;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияДокументаСоставногоТипа(ДокументОбъект, ФормаДокумента, ЭлементФормы, 
					   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти,ОграничениеТипов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = ДокументОбъект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаДокумента.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	Если не ОграничениеТипов = Неопределено Тогда
		СписокОграниченияТипов = Новый СписокЗначений();
		СписокОграниченияТипов.ЗагрузитьЗначения(ОграничениеТипов);
	КонецЕсли; 

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
            Если не ОграничениеТипов = Неопределено Тогда
			    Если СписокОграниченияТипов.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				 	// Тип не вписывается в полученные ограничения
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("ДокументСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Документы[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		МетаданныеДокумента = ДокументОбъект.Метаданные();
		ЭтоДокумент = Метаданные.Документы.Содержит(МетаданныеДокумента);
		
		СписокПараметров = Новый Структура;
		Если ЭтоДокумент Тогда
			СписокПараметров.Вставить("Дата",            ДокументОбъект.Дата);
			СписокПараметров.Вставить("ЭтоНовыйДокумент",ДокументОбъект.ЭтоНовый());
		Иначе
			СписокПараметров.Вставить("Дата",            '00010101');
			СписокПараметров.Вставить("ЭтоНовыйДокумент",Ложь);
		КонецЕсли;	
		
		Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("Контрагент") Тогда
			СписокПараметров.Вставить("Контрагент",         СтруктураОтбора.Контрагент);
		ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) тогда
			СписокПараметров.Вставить("Контрагент",     ДокументОбъект.Контрагент);
		КонецЕсли; 
		
		Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("ДоговорКонтрагента") Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента",         СтруктураОтбора.ДоговорКонтрагента);
		ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) тогда
			СписокПараметров.Вставить("ДоговорКонтрагента",     ДокументОбъект.ДоговорКонтрагента);
		КонецЕсли; 
		
		Если ТипЗнч(СтруктураОтбора) = Тип("Структура") и СтруктураОтбора.Свойство("Организация") Тогда
			СписокПараметров.Вставить("Организация",         СтруктураОтбора.Организация);
		ИначеЕсли  ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) тогда
			СписокПараметров.Вставить("Организация",     ДокументОбъект.Организация);
		КонецЕсли; 
		
		БухгалтерскийУчет.ОбработатьВыборСубконто(ЭлементФормы, Ложь, ДокументОбъект.Организация, СписокПараметров, ?(ОграничениеТипов = Неопределено, Неопределено, Новый ОписаниеТипов(ОграничениеТипов)));
		Возврат;

	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	Попытка
		// Отфильтруем список документов.
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл
            Если не ФормаВыбора.Отбор.Найти(ЭлементСтруктуры.Ключ) = неопределено тогда
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
					ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
				Иначе
					Если НЕ ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ТипЗначения.СодержитТип(ТипЗнч(ЭлементСтруктуры.Значение)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;
        	КонецЕсли;
		КонецЦикла;

	Исключение
		// нет таких отборов как заявлено в структуре.
	КонецПопытки;

	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора документа составного типа в формах документов.
//
// Параметры:
//  Объект       - объект редактируемого документа;
//  ФормаОбъекта       	 - форма редактируемого объекта;
//  ЭлементФормы         - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка - булево, признак выполнения стандартной (системной) обработки события 
//                         начала выбора для данного элемента формы документа.
//  СтруктураОтбора      - структура, содержащая имена и значения отборов в форме выбора.
//  ИмяТабличнойЧасти    - имя табличной части
//
Процедура НачалоВыбораЗначенияСправочникаСоставногоТипа(Объект, ФормаОбъекта, ЭлементФормы, 
					   СтандартнаяОбработка, СтруктураОтбора, ИмяТабличнойЧасти,ОграничениеТипов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть в этом реквизите.
	СписокТипов = Новый СписокЗначений;

	Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда // Шапка документа
		МассивТипов = Объект.Метаданные().Реквизиты[ЭлементФормы.Данные].Тип.Типы();
	Иначе // Табличная часть
		ИмяКолонки  = ФормаОбъекта.ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка.Имя;
		МассивТипов = Объект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяКолонки].Тип.Типы();
	КонецЕсли;
	
	Если не ОграничениеТипов = Неопределено Тогда
		СписокОграниченияТипов = Новый СписокЗначений();
		СписокОграниченияТипов.ЗагрузитьЗначения(ОграничениеТипов);
	КонецЕсли; 

	Если МассивТипов.Количество() = 1 Тогда
		ОбъектОписанияМетаданных = Метаданные.НайтиПоТипу(МассивТипов[0]);
		ВыбранныйТип = ОбъектОписанияМетаданных.Имя;
	Иначе

		Для каждого ЭлементМассива Из МассивТипов Цикл
            Если не ОграничениеТипов = Неопределено Тогда
			    Если СписокОграниченияТипов.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				 	// Тип не вписывается в полученные ограничения
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
			ПустоеЗначение = Новый(ЭлементМассива);
			ОбъектОписанияМетаданных = ПустоеЗначение.Метаданные();
			СписокТипов.Добавить(ОбъектОписанияМетаданных.Имя, ОбъектОписанияМетаданных.Представление());

		КонецЦикла; 

		ВыбранныйЭлемент = ФормаОбъекта.ВыбратьИзСписка(СписокТипов, ЭлементФормы);

		Если ВыбранныйЭлемент = Неопределено Тогда // Отказ от выбора
			Возврат;
		КонецЕсли;
		ВыбранныйТип = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	Если ТипЗнч(ЭлементФормы.Значение) <> Тип("СправочникСсылка." + ВыбранныйТип) Тогда
		ЭлементФормы.Значение = Справочники[ВыбранныйТип].ПустаяСсылка();
	КонецЕсли;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Справочники[ВыбранныйТип].ПолучитьФормуВыбора(,ЭлементФормы,);

	Попытка
		// Отфильтруем список документов.
		Для каждого ЭлементСтруктуры Из СтруктураОтбора Цикл

			Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("СписокЗначений") Тогда
				ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].ВидСравнения = ВидСравнения.ВСписке;
			КонецЕсли;

			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Значение      = ЭлементСтруктуры.Значение;
			ФормаВыбора.Отбор[ЭлементСтруктуры.Ключ].Использование = Истина;

		КонецЦикла;

	Исключение
		// нет таких отборов как заявлено в структуре.
	КонецПопытки;

	Если ЗначениеЗаполнено(ЭлементФормы.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = ЭлементФормы.Значение;
	КонецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияДокументаСоставногоТипа()

// Процедура выполняет стандартные действия при начале выбора структурной единицы контрагента в формах документов.
//
// Параметры:
//  ВладелецБанковскогоСчета - ссылка на справочник, определяет владельца банковского счета;
//  ЭлементФормы             - элемент формы документа, который надо заполнить; 
//  СтандартнаяОбработка,    - булево, признак выполнения стандартной (системной) обработки события 
//                             начала выбора для данного элемента формы документа.
//  ВалютаБанковскогоСчета   - ссылка на справочник, определяет валюту банковского счета,
//                             если неп заполнено, то список банковских счетов не фильтруется по валюте;
//
Процедура НачалоВыбораЗначенияБанковскогоСчета(ВладелецБанковскогоСчета, ЭлементФормы, СтандартнаяОбработка, 
									   ВалютаБанковскогоСчета = Неопределено, ВидСравненияРавно = Истина) Экспорт

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(, ЭлементФормы);

	Если ЗначениеЗаполнено(ВалютаБанковскогоСчета) Тогда

		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Значение      = ВалютаБанковскогоСчета;
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ?(ВидСравненияРавно = Истина, ВидСравнения.Равно, ВидСравнения.НеРавно);
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Использование = Истина;
		
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность = Ложь;

	КонецЕсли;
	
	ФормаВыбора.ПараметрОтборПоВладельцу = ВладелецБанковскогоСчета;
	ФормаВыбора.НачальноеЗначениеВыбора  = ЭлементФормы.Значение;
	
	Если ЗначениеЗаполнено(ВладелецБанковскогоСчета) Тогда
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораЗначенияБанковскогоСчета()

// Процедура выполняет стандартные действия при начале выбора склада в формах документов.
//
// Параметры:
//  ДокументОбъект        - объект редактируемого документа;
//  ФормаДокумента        - форма редактируемого документа;
//  ЭлементФормы          - элемент формы документа, который надо заполнить; 
//  Склад                 - текущий склад в форме;
//  ВидСравненияНТТ       - Вид сравнения - равно или не равно неавтоматизированной торговой точке;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//
Процедура НачалоВыбораСкладаНТТ(ДокументОбъект, ФормаДокумента, ЭлементФормы, Склад, ВидСравненияНТТ,
							  СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ФормаВыбора = Справочники.Склады.ПолучитьФормуВыбора(,ЭлементФормы,);

	// уберем из выбора неавтоматизированные торговые точки
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Значение                            = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.Использование                       = Истина;
	ФормаВыбора.СправочникСписок.Отбор.ВидСклада.ВидСравнения                        = ВидСравненияНТТ;
	ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидСклада.Доступность = Ложь;
	
	ФормаВыбора.НачальноеЗначениеВыбора												 = Склад;

	ФормаВыбора.Открыть();

КонецПроцедуры // НачалоВыбораСкладаНТТ()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает курс взаиморасчетов по выбранной дате.
//
// Параметры:
//  Объект - объект редактируемого документа или строка расшифровки платежа;
//  ДатаКурса - дата, на которую будет показан курс в форме выбора сразу после ее открытия;
//  СтандартнаяОбработка, - булево, признак выполнения стандартной (системной) обработки события 
//                          начала выбора для данного элемента формы документа;
//  ВалютаВзаиморасчетов - если не указана, то валюта берется из реквизита ДоговорКонтрагента.ВалютаВзаиморасчетов переданного объекта;
//
Процедура НачалоВыбораКурсаВзаиморасчетов(Объект, ДатаКурса, СтандартнаяОбработка, ВалютаВзаиморасчетов = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ТекВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекВалютаВзаиморасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		ОбщегоНазначения.ПредупреждениеОбОшибке("Для выбора курса взаиморасчетов нужно выбрать договор контрагента.");
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");

	ФормаВводаКурсаИКратности.Валюта          = ТекВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = Объект.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = Объект.КурсВзаиморасчетов;
	
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ДатаКурса;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> Неопределено Тогда
		Объект.КурсВзаиморасчетов      = СтруктураКурсаИКратности.КурсВалюты;
		Объект.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
	КонецЕсли;
	
КонецПроцедуры // НачалоВыбораКурсаВзаиморасчетов()

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт

	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;

	КонецЕсли; 

КонецПроцедуры // ВыбратьКурсВалюты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// Формирует и устанавливает текст заголовка формы документа
//
// Параметры:
//  СтрокаВидаОперации - строка вида операции документа, 
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//
Процедура УстановитьЗаголовокФормыДокумента(СтрокаВидаОперации = "", ДокументОбъект, ФормаДокумента) Экспорт

	ФормаДокумента.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	
	Если ПустаяСтрока(СтрокаВидаОперации) Тогда
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": ";
	Иначе
		Заголовок = ДокументОбъект.Метаданные().Синоним + ": " + СтрокаВидаОперации + ". ";
	КонецЕсли;
		
	Если ДокументОбъект.ЭтоНовый() Тогда  
		Заголовок = Заголовок + "Новый";
	Иначе
		Если ДокументОбъект.Проведен Тогда
			Заголовок = Заголовок + "Проведен";
		ИначеЕсли ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить Тогда
			Заголовок = Заголовок + "Не проведен";
		Иначе
			Заголовок = Заголовок + "Записан";
		КонецЕсли;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = Заголовок;

КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

// Устанавливает видимость закладки "Возвратная тара" в форме документа
//
// Параметры:
//  ФормаДокумента - форма документа.
//
Процедура УстановитьВидимостьЗакладкиВозвратнаяТара(ФормаДокумента) Экспорт

	ИспользоватьВозвратнуюТару = ?(ФормаДокумента.ВозвратнаяТара.Количество() = 0, Константы.ИспользоватьВозвратнуюТару.Получить(), Истина);

	СтраницыПанели                  = ФормаДокумента.ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницыПанели.Тара.Видимость   = ИспользоватьВозвратнуюТару;
	СтраницыПанели.Тара.Доступность = ИспользоватьВозвратнуюТару;

КонецПроцедуры // УстановитьВидимостьЗакладкиВозвратнаяТара()

// Изменяет текущую страницу формы документа, если при открытии формы
// первая страница содержит пустую табличную часть, но на форме есть еще страницы
// с непустой табличной частью
//
// Параметры:
//	Объект				- документ, форма которого открывается;
//	Панель				- панель формы документа, страницы которой следует переключить;
//	СтраницыСТабчастями	- список значений, каждый элемент которого представляет
//							собой имя страницы, а его представление - имя табличной части;
//	СтраницаПоУмолчанию	- имя страницы, которую следует сделать текущей, если ни на одной
//							из перечисленных страниц нет заполненной табличной части.
//									
Процедура УстановкаТекущейСтраницы(Объект, Панель, СтраницыСТабЧастями, СтраницаПоУмолчанию = Неопределено) Экспорт
	
	ТекущаяСтраницаНеУстановлена = Истина;
	
	Для Каждого ЭлементСписка из СтраницыСТабЧастями Цикл
		ИмяСтраницы = ЭлементСписка.Значение;
		ИмяТаблЧасти = ЭлементСписка.Представление;
		Страница = Панель.Страницы[ИмяСтраницы];
		
		Если Страница.Видимость Тогда
			Если Объект[ИмяТаблЧасти].Количество() > 0 Тогда 
				Панель.ТекущаяСтраница = Страница;
				ТекущаяСтраницаНеУстановлена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущаяСтраницаНеУстановлена Тогда
		Если СтраницаПоУмолчанию = Неопределено Тогда
			СтраницаПоУмолчанию = Панель.Страницы[СтраницыСТабЧастями[0].Значение].Имя;
		КонецЕсли;
		
		Панель.ТекущаяСтраница = Панель.Страницы[СтраницаПоУмолчанию];
	КонецЕсли;
	
КонецПроцедуры // УстановкаТекущейСтраницы()

// Процедура устанавливает свойство формы ТолькоПросмотр в зависимости
// от возможности редактирования документа в связи с  установкой даты запрета редактирования
//
Процедура УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ФормаДокумента) экспорт
	
	СоответствиеГраницЗапрета = ПараметрыСеанса.ГраницыЗапретаИзмененияДанных.Получить();
	
	// Для пользователя с полными правами проверок выполнять не нужно
	Если СоответствиеГраницЗапрета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПроверкиДокумента = НастройкаПравДоступа.ПолучитьПараметрыПроверкиДокумента(ДокументОбъект);

	НастройкаПравДоступа.ПроверитьВерсиюДокумента(ДокументОбъект, ПараметрыПроверкиДокумента, СоответствиеГраницЗапрета, ФормаДокумента.ТолькоПросмотр);
	
КонецПроцедуры	// УстановитьДоступностьФормыДляРедактирования

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации) Экспорт

	Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");

КонецФункции

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	Для а = 1 По 12 Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоМесяцаЗаполнения, ПолучитьПредставлениеПериодаРегистрации(НачалоМесяцаЗаполнения));
		Если НачальноеЗначение = НачалоМесяцаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		НачалоМесяцаЗаполнения = ДобавитьМесяц(НачалоМесяцаЗаполнения, 1);
	КонецЦикла;
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

//  Процедура определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, и в это м случае
//  присваивает документу новый уникальный номер.
//
// Параметры:
//  ДокументОбъект         - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - начальная дата документа 
// 
Процедура ПроверитьНомерДокумента(ДокументОбъект, НачальнаяДатаДокумента) Экспорт   // в разработке

	// Определяем назначенную для данного вида документов периодичность смены номера
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;

	//В зависимости от установленной периодичности смены номеров,
	//определяем разность старой и новой датами документа.
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);

	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъект.Дата);

	Иначе
		Возврат;

	КонецЕсли;

	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер = "";
	КонецЕсли;

КонецПроцедуры // ПроверитьНомерДокумента()

// Процедура выполняет общие действия при изменении даты документа
//
// Параметры:
//  ДокументОбъект                 - объект редактируемого документа
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ФлагИзмененияКурса             - валюта регламентированного учета
//
Процедура ПриИзмененииЗначенияДатыДокумента(ДокументОбъект, ВалютаРегламентированногоУчета, ФлагИзмененияКурса = Неопределено) Экспорт

	МетаданныеДокумента            = ДокументОбъект.Метаданные();
	ЕстьВалютаДокумента            = ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента",    МетаданныеДокумента);
	ЕстьДоговорКонтрагента         = ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента);
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;

	Если ОбщегоНазначения.ЕстьРеквизитДокумента("НДСВключенВСтоимость", МетаданныеДокумента) И
		ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
		Если НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
			ДокументОбъект.НДСВключенВСтоимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = ДокументОбъект.ДоговорКонтрагента;

			Если ЗначениеЗаполнено(Договор) Тогда
				Валюта = Договор.ВалютаВзаиморасчетов;
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = ДокументОбъект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	СтруктураНовогоКурсаВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДокументОбъект.Дата);
	НовыйКурс                   = СтруктураНовогоКурсаВалюты.Курс;
	НоваяКратность              = СтруктураНовогоКурсаВалюты.Кратность;

	ЕстьКурсДокумента           = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсДокумента",           МетаданныеДокумента);
	ЕстьКратностьДокумента      = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьДокумента",      МетаданныеДокумента);
	ЕстьКурсВзаиморасчетов      = ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов",      МетаданныеДокумента);
	ЕстьКратностьВзаиморасчетов = ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента);

	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсВзаиморасчетов И ЕстьКратностьВзаиморасчетов Тогда
		СтарыйКурс      = ДокументОбъект.КурсВзаиморасчетов;
		СтараяКратность = ДокументОбъект.КратностьВзаиморасчетов;
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ЕстьКурсДокумента И ЕстьКратностьДокумента Тогда
		СтарыйКурс      = ДокументОбъект.КурсДокумента;
		СтараяКратность = ДокументОбъект.КратностьДокумента;
	Иначе
		Возврат;
	КонецЕсли;

	// Если курс и кратность не изменились, то выход.
	Если НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность Тогда
		Возврат;
	КонецЕсли;

	ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, "взаиморасчетов ", "документа ");
	ТекстНовыйКурс  = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, НовыйКурс,  НоваяКратность,  ВалютаРегламентированногоУчета, Истина));
	ТекстСтарыйКурс = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, СтарыйКурс, СтараяКратность, ВалютаРегламентированногоУчета, Истина));
	ТекстВопроса    = "На дату документа у валюты "  + ТекстВалюты+ ТекстСтарыйКурс + " был задан другой курс."
	                + Символы.ПС+ "Установить курс " + ТекстВалюты+ ТекстНовыйКурс + " в соответствии с курсом валюты?";
	Ответ           = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ЕстьКурсДокумента Тогда
			ДокументОбъект.КурсДокумента           = НовыйКурс;
		КонецЕсли;
		Если ЕстьКратностьДокумента Тогда
			ДокументОбъект.КратностьДокумента      = НоваяКратность;
		КонецЕсли;
		Если ЕстьКурсВзаиморасчетов Тогда
			ДокументОбъект.КурсВзаиморасчетов      = НовыйКурс;
		КонецЕсли;
		Если ЕстьКратностьВзаиморасчетов Тогда
			ДокументОбъект.КратностьВзаиморасчетов = НоваяКратность;
		КонецЕсли;

		ФлагИзмененияКурса = Истина;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииЗначенияДатыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ

// Активизирует один из реквизитов при открытии документа.
//
// Параметры:
//  ДокументОбъект     - объект документа, 
//  ФормаДокумента     - форма документа.
//  СтруктураРеквизитов- заранее определенные реквизиты для проверки
//  ТабличнаяЧасть     - имя ТЧ на которую будет установлен фокус если все обяз. реквизиты заполнены
//  СтраницыСТабЧастями- структура типа ("имя страницы",	"имя таблицы размещенной на этой странице"), т.е.
//     в параметр "ТабличнаяЧасть" можно передать имя страницы на которой размещена ТЧ, а структура "СтраницыСТабЧастями"
//     необходима для поиска ТЧ по имени страницы.
Функция АктивизироватьРеквизитВФорме(ДокументОбъект, ФормаДокумента ,СтруктураРеквизитов = неопределено,ТабличнаяЧасть = неопределено,СтраницыСТабЧастями = неопределено) Экспорт

	Если Не ДокументОбъект.Проведен Тогда
		
		Если СтруктураРеквизитов = Неопределено Тогда
			// Структура - порядок активизации реквизитов.
			// Активизируется первый не заполненный.
			СтруктураРеквизитов = Новый Структура();
			СтруктураРеквизитов.Вставить("Дата");
			СтруктураРеквизитов.Вставить("Организация");      
			СтруктураРеквизитов.Вставить("СчетОрганизации");
			СтруктураРеквизитов.Вставить("Склад");
			СтруктураРеквизитов.Вставить("БанковскийСчет");
			СтруктураРеквизитов.Вставить("ФизЛицо");
			СтруктураРеквизитов.Вставить("Контрагент");
			СтруктураРеквизитов.Вставить("ДоговорКонтрагента");
			СтруктураРеквизитов.Вставить("Касса");
			СтруктураРеквизитов.Вставить("Получатель");
			СтруктураРеквизитов.Вставить("Плательщик");
			СтруктураРеквизитов.Вставить("ПодразделениеОрганизации");
		КонецЕсли;
		
		Для каждого Элемент Из СтруктураРеквизитов Цикл
			
			// Определим, есть ли ЭУ с таким именем.
			ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(Элемент.Ключ);
			Если ЭлементУправления <> Неопределено Тогда // есть такой
				Если ЭлементУправления.Видимость И ЭлементУправления.Доступность И НЕ ЗначениеЗаполнено(ЭлементУправления.Значение) Тогда 
					
					// Нашли не заполненный ЭУ. Делаем его текущим и прекращаем цикл.
					ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
					Возврат(Истина);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//если в документе есть ТЧ то необходимой фокус передать ей
	Если ТабличнаяЧасть <> Неопределено Тогда
		ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(ТабличнаяЧасть.Имя);
		Если ТипЗнч(ЭлементУправления) = Тип("ТабличноеПоле") Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			Возврат(Истина);
		ИначеЕсли СтраницыСТабЧастями <> неопределено Тогда
			
			ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти(СтраницыСТабЧастями.НайтиПоЗначению(ТабличнаяЧасть.Имя));
			Если ТипЗнч(ЭлементУправления) = Тип("ТабличноеПоле") Тогда
				ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
				Возврат(Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	//Если все поля заполнены но нет ТЧ то передадим фокус панели, в результате
	//визуально будет казаться что фокус не установлен ни на одном ЭФ.
	//Хотелось бы фокус установить на кнопке "Закрыть", но пока технически не предоставляется
	//такой возможности.
	ЭлементУправления = ФормаДокумента.ЭлементыФормы.Найти("ОсновныеДействияФормы");
	Если ЭлементУправления <> Неопределено Тогда
			ФормаДокумента.ТекущийЭлемент = ЭлементУправления;
			Возврат(Истина);
	КонецЕсли;
	
Возврат(Ложь);

КонецФункции// АктивизироватьРеквизитВФорме()

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора, ЭлементФормы, ПараметрОтборПоРегистратору, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ПараметрОтборПоРегистратору.Организация);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(глЗначениеПеременной("ОсновнаяОрганизация"));
		Иначе
			Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
		
		ЭлементОтбора.Значение = Организация;
		ЭлементОтбора.Использование = Не Организация.Пустая();
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,"организации","организаций");
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

// Формирует представление переданного код дохода с "предметной" точки зрения
//
// Параметры
//  , КодДоходаЕСН - СправочникСсылка.ДоходыЕСН - описываемый код дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеКодаДоходаПоЕСН(КодДоходаЕСН) Экспорт
	
	Если КодДоходаЕСН = Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли Тогда
		РасшифровкаКодДоходаЕСН = "Не является объектом налогообложения по ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.3 ст. 236 НК РФ (выплаты за счет прибыли)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ДоговораАвторские Тогда
		РасшифровкаКодДоходаЕСН = "При исчислении ЕСН (в части Федерального бюджета и ФОМС) и взносов на обязательное пенсионное страхование учитываются произведенные расходы согласно п.5 ст.237 НК РФ, не облагаются целиком ЕСН в части ФСС согласно п.3 ст.238 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ДоговораГПХ Тогда
		РасшифровкаКодДоходаЕСН = "Облагаются целиком ЕСН (в части Федерального бюджета и ФОМС) и взносами на обязательное пенсионное страхование, не облагаются целиком ЕСН в части ФСС согласно п.3 ст.238 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.Матпомощь Тогда
		РасшифровкаКодДоходаЕСН = "Облагается ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование частично согласно пп. 15 п.1 ст. 238 НК РФ (материальная помощь)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаКодДоходаЕСН = "Облагается ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование частично согласно пп. 3 п.1 ст. 238 НК РФ (материальная помощь при рождении ребенка)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеОблагаетсяЦеликом Тогда
		РасшифровкаКодДоходаЕСН = "Является объектом налогообложения, но не облагается целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно пп. 1–12 ст. 238 НК РФ (кроме пособий за счет ФСС)"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.НеЯвляетсяОбъектом Тогда
		РасшифровкаКодДоходаЕСН = "Не является объектом налогообложения по ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.1 ст. 236 НК РФ"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ОблагаетсяЦеликом Тогда
		РасшифровкаКодДоходаЕСН = "Облагается целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ПособияЗаСчетФСС Тогда
		РасшифровкаКодДоходаЕСН = "Не облагаются целиком ЕСН (в части Федерального бюджета, ФОМС и ФСС) и взносами на обязательное пенсионное страхование согласно п.1 ст. 238 НК РФ "
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаКодДоходаЕСН = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли КодДоходаЕСН = Справочники.ДоходыЕСН.ПустаяСсылка() Тогда
		РасшифровкаКодДоходаЕСН = "Не указан порядок учета начисления для целей исчисления ЕСН и взносов на обязательное пенсионное страхование"
	Иначе
		РасшифровкаКодДоходаЕСН = "Не отражается в учете для целей исчисления ЕСН и взносов на обязательное пенсионное страхование"
	КонецЕсли;
	
	Возврат РасшифровкаКодДоходаЕСН	
	
КонецФункции // ПолучитьПредставлениеСпособаОтраженияНачисленияВУчетах()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Процедура предназначена для заполнения реквизитов формы,
// вызывается в обработчиках событий "ПриОткрытии" в модулях форм обработок.
//
// Параметры:
//  ЗаполняемаяФорма  - форма, реквизиты которой следует заполнить,
//  ТекПользователь - ссылка на справочник, определяет текущего пользователя  
//
Процедура ЗаполнитьРеквизитыФормы(ЗаполняемаяФорма, ТекПользователь) Экспорт

	Элементы = ЗаполняемаяФорма.ЭлементыФормы;

	Для каждого Элемент из Элементы Цикл

		Если	Элемент.Имя = "Организация" тогда
			Элемент.Значение = глЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ЗаполнитьРеквизитыФормы()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
//     Параметры:
//          Счет - выбранный счет
//          Форма - форма(или табличное поле) на которой расположены счет и субконто
//          Префикс - префикс наименования субконто. к префиксу добавляется номер субконто на счете
//                    для подписи с наименованием субконто предполагается имя
//                    вида "Надпись" + Префикс + НомерСубконто
//                    в случае если форма - это таб.поле, то надписи не устанавливаются
//
Процедура ПриВыбореСчета(Счет, Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3, ПолеСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,НадписьСубконто1,Субконто2,НадписьСубконто2,Субконто3,НадписьСубконто3", Субконто1, НадписьСубконто1, Субконто2, НадписьСубконто2, Субконто3, НадписьСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		ЭлементыСубконто["Субконто" + Сч].ВыбиратьТип = Ложь;
		
		// Чтобы не устанавливался флаг модифицированности при открытии формы
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение) <> ЭлементыСубконто["Субконто" + Сч].Значение Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч].Значение);
		КонецЕсли;

		ЭлементыСубконто["НадписьСубконто" + Сч].Заголовок = Счет.ВидыСубконто[Сч - 1].ВидСубконто.Наименование + ":";
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = НЕ ТолькоПросмотр;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
		
		Если Не ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч].Значение = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["Субконто" + Сч].Видимость = Ложь;
		ЭлементыСубконто["НадписьСубконто" + Сч].Видимость = Ложь;
		
	КонецЦикла;
	
	Если ПолеСчет <> НЕОПРЕДЕЛЕНО Тогда
		ПолеСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;

	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;

КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()

Процедура ПеренестиБлокКолонокЦеликом(КоллекцияКолонок, КолонкаЗаголовок, БлокКолонок) Экспорт
	
	ВидимостьКолонок = КолонкаЗаголовок.Видимость;
	ИндексЗаголовка = КоллекцияКолонок.Индекс(КолонкаЗаголовок);
	Для каждого КолонкаБлока Из БлокКолонок Цикл
		КолонкаБлока.Видимость = ВидимостьКолонок
	КонецЦикла;
	Смещение = КоллекцияКолонок.Индекс(КолонкаЗаголовок) - КоллекцияКолонок.Индекс(БлокКолонок[0]) + 1;
	Если Смещение <> 0 Тогда
		Для Индекс = 0 по БлокКолонок.ВГраница() Цикл
			КолонкаБлока = БлокКолонок[Индекс];
			КоллекцияКолонок.Сдвинуть(КолонкаБлока,Смещение);
			КолонкаБлока.Положение = ?(Индекс = 0, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.ВТойЖеКолонке)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Заполняет список пунктов подменю выбора вида операции значениями переданной коллекции объектов метаданных,
// соответствующей перечислению видов операций для данного документа.
// Всем кнопкам назначается одно переданное действие.
// Обычно используется для заполнения пунктов подменю "ПодменюВидаОперации" командной панели
// формы документа значениями перечисления "Вид операции" для данного вида документа
//
// Параметры:
//  ЭлементМеню                   - кнопка командной панели формы, соответствующая подменю, которое надо заполнить, 
//  ОбъектЗаполнения              - коллекция для заполнения пунктов подменю, 
//  ОбъектОбработкиВыбораОперации - действие, которое надо выполнить при выборе любого пункта подменю.
//  МассивИсключений              - значения элементов коллекции ОбъектЗаполнения, которые не должны добавляться
//
Процедура УстановитьПодменюВыбораВидаОперации(ЭлементМеню, ОбъектЗаполнения, ОбъектОбработкиВыбораОперации, МассивИсключений = Неопределено) Экспорт
	
	Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
		МассивИсключений = Новый Массив;
	КонецЕсли;
	
	Для каждого ЭлементЗаполнения Из ОбъектЗаполнения Цикл
		
		Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
			ЭлементМеню.Кнопки.Добавить(ЭлементЗаполнения.Имя, 
				ТипКнопкиКоманднойПанели.Действие, ЭлементЗаполнения.Синоним, ОбъектОбработкиВыбораОперации);
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // УстановитьПодменюВыбораВидаОперации()

Процедура ВыбратьВидОперации(ДокументОбъект, Отказ, МассивИсключений = Неопределено) Экспорт
		
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) 
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ЗапрашиватьВидОперацииПриВводеНового") Тогда
		
		Если ТипЗнч(МассивИсключений) <> Тип("Массив") Тогда
			МассивИсключений = Новый Массив;
		КонецЕсли;
		
		СписокВидов = Новый СписокЗначений();
		Для каждого ЭлементЗаполнения из ДокументОбъект.ВидОперации.Метаданные().ЗначенияПеречисления Цикл
			Если МассивИсключений.Найти(ЭлементЗаполнения.Имя) = Неопределено Тогда
				СписокВидов.Добавить(ЭлементЗаполнения.Имя, ЭлементЗаполнения.Синоним);
			КонецЕсли;
		КонецЦикла;
		
		Вид = СписокВидов.ВыбратьЭлемент("Выбор вида операции документа");
		
		Если НЕ Вид = Неопределено Тогда
			ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][Вид.Значение];
		Иначе
			Отказ = Истина;
		Конецесли;

	КонецЕсли;
	
КонецПроцедуры

//настройка подменю Клиент-Банк
Процедура УстановкаПодменюКлиентБанк(Кнопка, Объект) Экспорт

	Если Объект.РеквизитыКонтрагента.Количество() = 0 Тогда
		Кнопка.Доступность =Ложь;
	Иначе
		Кнопка.Доступность =Истина;
	КонецЕсли; 

КонецПроцедуры // УстановкаПодменюКлиентБанк()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

// Записывает документ спросив об этом у пользователя
//
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
//
Функция ЗаписатьДокументПередВыполнениемДействия(Объект, ФормаОбъекта, ТекстВопроса) Экспорт

	Если Объект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 	
	
	Возврат Истина;

КонецФункции // ЗаписатьДокументПередВыполнениемДействия()

// Записывает документ в режиме отмены проведения, проверяет необходимость очистки табличных частей, спросив об этом у пользователя
// Параметры
//  Объект        - ДокументОбъект
//  ФормаОбъекта  – Тип - Форма
//                 форма документа из которого вызвана функция
//  ТекстВопроса1 и ТекстВопроса2  – Тип – Строка
//                 текст вопроса
//
// Возвращаемое значение:
//   Истина   – если не требуется запись документа или запись прошла успешно
//   Ложь     - отказ пользователя от записи или не удачная попытка записи
Функция ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(Объект, ФормаОбъекта, ТабличныеЧасти, ТекстВопроса1, ТекстВопроса2) Экспорт
	
	Если Объект.Проведен Тогда
		
		//документ проведен, необходимо записать документ отменив проведение и очистить табличные части
		
		Если Вопрос(ТекстВопроса1, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли; 
		
		Попытка
			ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		
		// документ не проведен, необходимо записать документ и очистить табличные части, вопросы
		// пользователю задаем только по поводу очистки табличных частей
		НадоОчищатьТабличныеЧасти = Ложь;
		Если НЕ ТабличныеЧасти = Неопределено Тогда
			//проверим заполнение табличных частей			
			Для каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
				НадоОчищатьТабличныеЧасти = ТабличнаяЧасть.Количество() > 0;
				Если НадоОчищатьТабличныеЧасти Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НадоОчищатьТабличныеЧасти Тогда
				
				Ответ = Вопрос(ТекстВопроса2, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
				
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Объект.Модифицированность() Тогда //запишем документ
			
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫПОЛНЕНИЯ ДЕЙСТВИЙ В ФОРМЕ



// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличныйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Функция НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "") Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат Неопределено;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать();
		
		Возврат Неопределено;
		
	Иначе

		// Отобразить печатный документ на экране
		ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, ПечДокумент);
		ФормаПечати.ПечатныйДокумент = ПечДокумент;
		ФормаПечати.Заголовок        = Заголовок;
		//ФормаПечати.Защита           = УправлениеПользователями.ЗащитаТаблиц();
		ФормаПечати.Открыть();

		Возврат ФормаПечати;
		
	КонецЕсли;
	
КонецФункции // НапечататьДокумент()

// Печатает движения документа
//
// Параметры:
//  ДокументСсылка - ссылка на документ, движения которого печатаем
//
Процедура НапечататьДвиженияДокумента(ДокументСсылка) Экспорт

	Форма = Отчеты.ДвиженияДокумента.ПолучитьФорму(,,Новый УникальныйИдентификатор);
	Форма.Открыть();
	Форма.Документ = ДокументСсылка;
	Форма.СформироватьИВывестиОтчет();

КонецПроцедуры // НапечататьДвиженияДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ИСТОРИЕЙ ВВОДА ЗНАЧЕНИЙ

// Процедура по для переданной строке пути и строковому представлению //
//
// Параметры
//  Название - Строка .для которой определяется необходимость дополнения 
// сокращением
//  Уровень - уровень, для которого необходимо составить список сокращений
//
Процедура ДополнитьСписокИсторииВвода(Путь, Знач Значение) Экспорт

	Если НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат;
	КонецЕсли;

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		СписокИстории = Новый СписокЗначений();
	Иначе
		СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	КонецЕсли;

	Если ТипЗнч(СписокИстории) <> Тип("СписокЗначений") Тогда
		СписокИстории = Новый СписокЗначений();
	КонецЕсли;

	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Значение = ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;

	Если СписокИстории.НайтиПоЗначению(Значение) <> Неопределено Тогда
		 СписокИстории.Удалить(СписокИстории.НайтиПоЗначению(Значение));
	КонецЕсли;

	СписокИстории.Вставить(0, Значение, Значение);

	Пока СписокИстории.Количество() > 5 Цикл
		СписокИстории.Удалить(СписокИстории.Получить(СписокИстории.Количество() - 1));
	КонецЦикла;

	СохранитьЗначение(Путь, ЗначениеВСтрокуВнутр(СписокИстории));

КонецПроцедуры // ДополнитьСписокИсторииВвода()

// Процедура добавляет информацию о коде и/или артикуле в ячейки табличного поля
// при выводе очередной строки
//
// Параметры:
//  КолонкиТабПоля - коллекция колонок табличного поля
//  ЯчейкиСтрокиТабПоля - коллекция ячеек строки табличного поля
//  Номенклатура - СправочникСсылка.Номенклатура, товар, по которому надо вывести код и/или артикул
//
Процедура ПоказатьКодАртикул(КолонкиТабПоля, ЯчейкиСтрокиТабПоля, Номенклатура) Экспорт

	Если КолонкиТабПоля.Код.Видимость Тогда
		Если Номенклатура <> Неопределено Тогда
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст(Номенклатура.Код);
		Иначе
			ЯчейкиСтрокиТабПоля.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если КолонкиТабПоля.Артикул.Видимость Тогда
		Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст(Номенклатура.Артикул);
		Иначе
			ЯчейкиСтрокиТабПоля.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоказатьКодАртикул()

// Функция по для переданной строке пути возвращает список заполненных значений
//
// Параметры
//  Путь - Строка с указанием объекта метаданных и поля ввода 
// сокращением
//
// Возвращаемые значения
//  Возвращается список значений с историей ввода в это поле
//
Функция ПолучитьСписокИсторииВвода(Путь) Экспорт

	СтрокаИстории = ВосстановитьЗначение(Путь);

	Если СтрокаИстории = Неопределено Тогда
		Возврат Новый СписокЗначений();
	КонецЕсли;
	
	СохранятьСписокИстории = Ложь;

	СписокИстории = ЗначениеИзСтрокиВнутр(СтрокаИстории);
	ТипСписокЗначений = Тип("СписокЗначений");
	ТипЗначенияЭлементов = Неопределено;

	Если ТипЗнч(СписокИстории) = Тип("СписокЗначений") Тогда
		
		КолвоЭлементовКоллекции = СписокИстории.Количество(); 
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		     ЭлементСписка = СписокИстории[КолвоЭлементовКоллекции - ОбратныйИндекс];
			 Если ТипЗнч(ЭлементСписка.Значение) <> Тип("Строка") Тогда
				СписокИстории.Удалить(ЭлементСписка);
				СохранятьСписокИстории = Истина;
				Продолжить;
			КонецЕсли;
			ЗначениеЭлементаСписка = ЗначениеИзСтрокиВнутр(ЭлементСписка.Значение);
			Если ТипЗнч(ЗначениеЭлементаСписка) = ТипСписокЗначений Тогда												
				ЗначениеЭлементаСписка = ЗначениеЭлементаСписка[0].Значение;
				Если ТипЗнч(ЗначениеЭлементаСписка) = ТипСписокЗначений Тогда
					СписокИстории.Удалить(ЭлементСписка);
					СохранятьСписокИстории = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЭлементСписка.Значение = ЗначениеЭлементаСписка;
			
			Если ТипЗначенияЭлементов = Неопределено Тогда
				// Тип значения определяет первый элемент списка
				ТипЗначенияЭлементов = ТипЗнч(ЭлементСписка.Значение);
			КонецЕсли;			
			
		КонецЦикла;
		
		Если ТипЗначенияЭлементов <> Тип("Строка") Тогда
			ОпределитьПредставлениеЭлементовСписка(ТипЗначенияЭлементов, СписокИстории, СохранятьСписокИстории);
		КонецЕсли;
			
		Возврат СписокИстории;

	Иначе
		Возврат Новый СписокЗначений();

	КонецЕсли;

КонецФункции // ПолучитьСписокИсторииВвода()

Процедура ОпределитьПредставлениеЭлементовСписка(ТипЗначенияЭлементов, СписокИстории, СохранятьСписокИстории)
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипЗначенияЭлементов);
	Если МетаданныеТипа = Неопределено
		 ИЛИ НЕ(Метаданные.Справочники.Содержит(МетаданныеТипа) 
		 		ИЛИ Метаданные.Документы.Содержит(МетаданныеТипа)
		 		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТипа)) Тогда
		СписокИстории.Очистить();
		Возврат;
	КонецЕсли;	
	
	ИмяТаблицы = МетаданныеТипа.ПолноеИмя();
	
	Запрос = Новый Запрос;	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Ссылка КАК Ссылка, 
	|	ПРЕДСТАВЛЕНИЕ(Ссылка) КАК Представление 
	|ИЗ " + ИмяТаблицы + " ГДЕ Ссылка В (&СписокЗначений)";
	
	Запрос.УстановитьПараметр("СписокЗначений", СписокИстории);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КолвоЭлементовКоллекции = СписокИстории.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
		ЭлементСписка = СписокИстории[КолвоЭлементовКоллекции - ОбратныйИндекс];
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ЭлементСписка.Значение, "Ссылка") Тогда
			ЭлементСписка.Представление = Выборка.Представление;
		Иначе
			СписокИстории.Удалить(ЭлементСписка);
			СохранятьСписокИстории = Истина;
		КонецЕсли;			
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьДоступностьЯчеекПоСчету(Счет, Субконто1, Субконто2, Субконто3) Экспорт
	
	ЭлементыСубконто = Новый Структура("Субконто1,Субконто2,Субконто3", Субконто1, Субконто2, Субконто3);
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ЭлементыСубконто["Субконто" + Сч].Доступность = (Сч <= ЧислоАктивныхСубконто);
	КонецЦикла;
	
КонецПроцедуры

// Процедура открывает форму для отправки сообщения по электронной почте на линию
// технической поддержки пользователей
// 
// Параметры:
//  НЕТ
//
Процедура ОтправитьСообщениеВОтделТехническойПоддержки() Экспорт

	ОбработкаОтправки = Обработки.ОтправкаЭлектронногоСообщенияВОтделТехническойПоддержки.Создать();
	
	ОбработкаОтправки.ТекстСообщения = ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки();
	ОбработкаОтправки.ТемаСообщения  = "Сообщение в отдел технической поддержки";
	
	ОбработкаОтправки.ПолучитьФорму().Открыть();

КонецПроцедуры

// Процедура предназначена для управления видимостью элементов формы,
// вызывается в обработчиках событий "ПриОткрытии" форм, при изменении реквизита Организация
//
// Параметры:
//  ЭлементыФормы  - коллекция ЭУ формы
//  УчетнаяПолитикаПоПерсоналу - структура, содержит данные учетной политики    
//    предприятия или конкретной организации
//
Процедура УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(ЭлементыФормы,УчетнаяПолитикаПоПерсоналу) Экспорт
	
	ПоддержкаВнутреннегоСовместительства = "";
	Для каждого Элемент из ЭлементыФормы Цикл
		Если ТипЗнч(Элемент) = Тип("ТабличноеПоле") Тогда
			Колонки	= Элемент.Колонки;
			Для Каждого Колонка Из Колонки Цикл
				Если Колонка.Имя = "Приказ" и УчетнаяПолитикаПоПерсоналу.Свойство("ПоддержкаВнутреннегоСовместительства",ПоддержкаВнутреннегоСовместительства) Тогда
					Колонка.Видимость			= Колонка.Видимость И ПоддержкаВнутреннегоСовместительства;
					Колонка.ИзменятьВидимость	= ПоддержкаВнутреннегоСовместительства;		
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеВвода") и Элемент.Имя = "Приказ" и УчетнаяПолитикаПоПерсоналу.Свойство("ПоддержкаВнутреннегоСовместительства",ПоддержкаВнутреннегоСовместительства) Тогда
			Элемент.Видимость = ПоддержкаВнутреннегоСовместительства;
		ИначеЕсли ТипЗнч(Элемент) = Тип("Надпись") и Элемент.Имя = "НадписьПриказОПриеме" и УчетнаяПолитикаПоПерсоналу.Свойство("ПоддержкаВнутреннегоСовместительства",ПоддержкаВнутреннегоСовместительства) Тогда
			Элемент.Видимость = ПоддержкаВнутреннегоСовместительства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Проверяет модифицированность документа перед печатью, заполнением и пр., и если необходимо 
// записывает его
// 
// Параметры
//  Документ - (ДокументОбъект.*) - проверяемый документ
//
Функция ПроверитьМодифицированность(Документ, ТекстДействия = "Для печати") Экспорт

	Результат = Ложь;

	Если Документ.Модифицированность() Тогда

		Проведен = ?(Документ.Проведен, " и провести","");

		Ответ = Вопрос("Документ изменен. " + ТекстДействия + " его необходимо записать"+ Проведен +".
		               |Записать" + Проведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Документ.Проведен Тогда

				ДатаДока = НачалоДня(Документ.Дата);
				ДатаДня  = НачалоДня(ТекущаяДата());

				Попытка
					
					Если ДатаДока = ДатаДня и Документ.Метаданные().ОперативноеПроведение = Метаданные.СвойстваОбъектов.ОперативноеПроведение.Разрешить Тогда
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
					Иначе
						Документ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
					КонецЕсли;

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				Документ.Записать();
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Проверяет модифицированность документа перед печатью, и если необходимо 
// записывает его
// 
// Параметры
//  Объект - (ДокументОбъект.*, СправочникОбъект.*) - проверяемый документ / справочник
//  Форма    - форма проверяемого документа / справочника
//
Функция ПроверитьМодифицированностьВФорме(Объект, Форма) Экспорт

	Результат = Ложь;

	Если Форма.Модифицированность Тогда

		Проведен    = Метаданные.Документы.Содержит(Объект.Метаданные()) И Объект.Проведен;
		СтрПроведен = ?(Проведен, " и провести","");
		
		Ответ = Вопрос("Документ изменен. Для печати его необходимо записать "+ СтрПроведен +".
		               |Записать" + СтрПроведен + "?",
		               РежимДиалогаВопрос.ОКОтмена, , 
		               КодВозвратаДиалога.Отмена,
		               "Документ изменен");

		Если Ответ = КодВозвратаДиалога.ОК Тогда

			Если Проведен Тогда

				Попытка

					Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;

			Иначе
				
				Попытка

					Форма.ЗаписатьВФорме();

				Исключение

					Предупреждение("Операция не выполнена!");
					Возврат Результат = Истина;

				КонецПопытки;
				
			КонецЕсли;

			Результат = Истина;

		КонецЕсли;

	Иначе
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПроверитьМодифицированность()

// Функция спрашивает пользователя записать ли объект, или нет, если он новый
//
// Параметры
//  ФормаОбъекта - Форма объекта, из которой пытаются произвести действия
//
// Возвращаемое значение:
//   Булево - Объект записан или нет
//
Функция ЗаписатьНовыйОбъектВФорме(ФормаОбъекта) Экспорт

	Если ФормаОбъекта.ЭтоНовый() Тогда
		Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ФормаОбъекта.ЭтотОбъект.Ссылка)) Тогда
			ТекстВопроса = "Для выполнения данной операции необходимо записать документ. Записать?";
		Иначе // Справочник
			ТекстВопроса = "Для выполнения данной операции необходимо записать элемент. Записать?";
		КонецЕсли; 
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		Иначе
			Попытка
				Возврат ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли; 

КонецФункции // ЗаписатьНовыйОбъектВФорме()

// Процедура устанавливает видимость реквизитов в зависимости от типа учета
//
//		Параметры:
//
//
Процедура ВидимостьРеквизитовПоТипуУчета(ДокументОбъект, ФормаДокумента, Знач РеквизитыНалУчета = "",ФлагБУ = Истина, Знач РеквизитыБухУчета = "") Экспорт

	СтрРеквНал = СтрЗаменить(РеквизитыНалУчета, " ", "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.ПС,  "");
	СтрРеквНал = СтрЗаменить(СтрРеквНал, Символы.Таб, "");

	Пока Не ПустаяСтрока(СтрРеквНал) Цикл

		Поз = Найти(СтрРеквНал, ",");
		Если Поз = 0 Тогда
			ИмяРекв    = СтрРеквНал;
			СтрРеквНал = "";
		Иначе
			ИмяРекв    = Лев (СтрРеквНал, Поз - 1);
			СтрРеквНал = Сред(СтрРеквНал, Поз + 1);
		КонецЕсли;
		Если ПустаяСтрока(ИмяРекв) Тогда
			Продолжить;
		КонецЕсли;

		Поз = Найти(ИмяРекв, ".");
		Если Поз = 0 Тогда
			ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = Истина;
			//ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		Иначе
			ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = Истина;
			//ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ДокументОбъект.ОтражатьВНалоговомУчете;
		КонецЕсли;

	КонецЦикла;
	
	Если не ПустаяСтрока(РеквизитыБухУчета) тогда
		
		СтрРеквБух = СтрЗаменить(РеквизитыБухУчета, " ", "");
		СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.ПС,  "");
		СтрРеквБух = СтрЗаменить(СтрРеквБух, Символы.Таб, "");
		
		Пока Не ПустаяСтрока(СтрРеквБух) Цикл

			Поз = Найти(СтрРеквБух, ",");
			Если Поз = 0 Тогда
				ИмяРекв    = СтрРеквБух;
				СтрРеквБух = "";
			Иначе
				ИмяРекв    = Лев (СтрРеквБух, Поз - 1);
				СтрРеквБух = Сред(СтрРеквБух, Поз + 1);
			КонецЕсли;
			Если ПустаяСтрока(ИмяРекв) Тогда
				Продолжить;
			КонецЕсли;

			Поз = Найти(ИмяРекв, ".");
			Если Поз = 0 Тогда
				ФормаДокумента.ЭлементыФормы[ИмяРекв].Видимость = ФлагБУ;
			Иначе
				ФормаДокумента.ЭлементыФормы[Лев(ИмяРекв, Поз - 1)].Колонки[Сред(ИмяРекв, Поз + 1)].Видимость = ФлагБУ;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	

КонецПроцедуры // ВидимостьРеквизитовПоТипуУчета()

// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СформироватьСкобки             - признак необходимости скобок
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета, СформироватьСкобки = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";

	Иначе
		Возврат ?(СформироватьСкобки, "   ( ", "") + Кратность + " "
		      + СокрЛП(Валюта)
		      + " = "
		      + Курс + " " 
		      + СокрЛП(ВалютаРегламентированногоУчета)
		      + ?(СформироватьСкобки, " )", "");
	КонецЕсли;

КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

Процедура УстановитьПодразделениеПоСчету(Подразделение, Счет, Организация, ПодразделениеПоУмолчанию = Неопределено) Экспорт

	Если НЕ Счет.УчетПоПодразделениям Тогда
		Подразделение = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Подразделение) И Подразделение.Владелец = Организация Тогда
		Возврат;
	КонецЕсли;
	
	Если ПодразделениеПоУмолчанию = Неопределено Тогда
		ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
	КонецЕсли;

	Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
		Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
			Подразделение = ПодразделениеПоУмолчанию;
		Иначе
			Подразделение = Неопределено;
		КонецЕсли;
	Иначе
		Подразделение = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура проверяет принадлежность реквизита типа ПодразделениеОрганизации
// выбранной организации.
//
// Параметры:
//  ДокументОбъект - объект документ, в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  НазваниеРеквизитаСубконто - название проверяемого реквизита
//  Субконто     - значение проверяемого реквизита
//
Процедура ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, НазваниеРеквизитаСубконто, Субконто)
	
	Если ТипЗнч(Субконто) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		
		ПодразделениеПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		
		// Если субконто не заполнено.
		Если НЕ ЗначениеЗаполнено(Субконто) Тогда
			
			// Если субконто соответствует выбранной организации, подставляем его.
			Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
				ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
			КонецЕсли;
			
		Иначе // Если ПодразделениеОрганизации заполнено.
			
			// Если ПодразделениеОрганизации не соответствует выбранной организации.
			Если НЕ Субконто.Владелец = Организация Тогда
				
				// Если ПодразделениеПоУмолчанию сооответствует выбранной организации, подставляем его.
				Если ПодразделениеПоУмолчанию.Владелец = Организация Тогда
					ДокументОбъект[НазваниеРеквизитаСубконто] = ПодразделениеПоУмолчанию;
				Иначе // Выбрана не основная организация. ПодразделениеОрганизации нужно очистить.
					ДокументОбъект[НазваниеРеквизитаСубконто] = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры   // ПроверитьСубконтоПодразделение()
 
// Процедура - обработчик события ПриИзменении поля ввода Организация
//
// Параметры:
//	ДокументОбъект - объект документ в форме которого произошло событие
//  ТекПользователь - текущий пользователь, настройки которого используются
//                 по умолчанию
//  СтруктураРеквизитов - структура с названиями и значениями реквизитов,
//                 кот.необходимо проверить
//
Процедура ПроверитьВладельцаСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов) Экспорт

	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ1") И СтруктураРеквизитов.Свойство("СубконтоБУ1") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ1, СтруктураРеквизитов.СубконтоБУ1);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ2") И СтруктураРеквизитов.Свойство("СубконтоБУ2") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ2, СтруктураРеквизитов.СубконтоБУ2);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоБУ3") И СтруктураРеквизитов.Свойство("СубконтоБУ3") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоБУ3, СтруктураРеквизитов.СубконтоБУ3);
	КонецЕсли;
	 
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоНУ1") И СтруктураРеквизитов.Свойство("СубконтоНУ1") Тогда
	 	ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоНУ1, СтруктураРеквизитов.СубконтоНУ1);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоНУ2") И СтруктураРеквизитов.Свойство("СубконтоНУ2") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоНУ2, СтруктураРеквизитов.СубконтоНУ2);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("НазваниеСубконтоНУ3") И СтруктураРеквизитов.Свойство("СубконтоНУ3") Тогда
		ПроверитьСубконтоПодразделение(ДокументОбъект, ТекПользователь, Организация, СтруктураРеквизитов.НазваниеСубконтоНУ3, СтруктураРеквизитов.СубконтоНУ3);
	КонецЕсли;
	 
КонецПроцедуры  // ПроверитьВладельцаПодразделения()

Процедура УстановитьСписокПоляВыбора(ПолеВыбора, Список) Экспорт

	ПрошлоеЗначение = ПолеВыбора.Значение;
	ПолеВыбора.СписокВыбора = Список;
	Если ЗначениеЗаполнено(ПрошлоеЗначение) Тогда
		Если  Список.НайтиПоЗначению(ПрошлоеЗначение) <> Неопределено Тогда
			Если НЕ ПолеВыбора.Значение = ПрошлоеЗначение Тогда
				ПолеВыбора.Значение = ПрошлоеЗначение;
			КонецЕсли;
		Иначе
			ПолеВыбора.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры // УстановитьСписокПоляВыбора()

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
Процедура ПриВыбореСчетаВТабличномПоле(Счет, Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, 
	Субконто3, ЭлементДиалогаСубконто3, Подразделение = Неопределено, ЭлементДиалогаПодразделение = Неопределено, 
	ЭлементДиалогаСчет = НЕОПРЕДЕЛЕНО, ТолькоПросмотр = ЛОЖЬ, ТолькоПросмотрПартииУСН = Истина) Экспорт
	
	ЭлементыСубконто = Новый Структура(
		"Субконто1,ЭлементДиалогаСубконто1,Субконто2,ЭлементДиалогаСубконто2,Субконто3,ЭлементДиалогаСубконто3", 
		Субконто1, ЭлементДиалогаСубконто1, Субконто2, ЭлементДиалогаСубконто2, Субконто3, ЭлементДиалогаСубконто3);
	
	ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
	
	Для Сч = 1 По ЧислоАктивныхСубконто Цикл
		ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = ТолькоПросмотр;
		
		Если ТипЗнч(ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч]) = Тип("ПолеВвода") Тогда
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		Иначе
			ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ЭлементУправления.ВыбиратьТип = (ТипСубк.Типы().Количество() > 1);
		КонецЕсли; 
			
		Если ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]) <> ЭлементыСубконто["Субконто" + Сч] Тогда
			ЭлементыСубконто["Субконто" + Сч] = ТипСубк.ПривестиЗначение(ЭлементыСубконто["Субконто" + Сч]);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Сч = (ЧислоАктивныхСубконто + 1) По 3 Цикл
			
		Если Не ЭлементыСубконто["Субконто" + Сч] = Неопределено Тогда
			ЭлементыСубконто["Субконто" + Сч] = Неопределено;
		КонецЕсли;
		
		ЭлементыСубконто["ЭлементДиалогаСубконто" + Сч].ТолькоПросмотр = Истина;
		
	КонецЦикла;
	
	Если ЭлементДиалогаПодразделение <> Неопределено Тогда
		ЭлементДиалогаПодразделение.ТолькоПросмотр = НЕ Счет.УчетПоПодразделениям;
	КонецЕсли;
	
	Если ЭлементДиалогаСчет <> Неопределено Тогда
		ЭлементДиалогаСчет.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;

	Если Не Субконто1 = ЭлементыСубконто.Субконто1 Тогда
		Субконто1 = ЭлементыСубконто.Субконто1;
	КонецЕсли;
	Если Не Субконто2 = ЭлементыСубконто.Субконто2 Тогда
		Субконто2 = ЭлементыСубконто.Субконто2;
	КонецЕсли;
	Если Не Субконто3 = ЭлементыСубконто.Субконто3 Тогда
		Субконто3 = ЭлементыСубконто.Субконто3;
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореСчета()

// Процедура выводит форму структуры подчиненности документа
Процедура ПоказатьСтруктуруПодчиненностиДокумента(ДокументСсылка) Экспорт
	
	ФормаСтруктурыПодчиненности = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности");
	Если ФормаСтруктурыПодчиненности.Открыта() Тогда
		ФормаСтруктурыПодчиненности.Закрыть();
	КонецЕсли;
	ФормаСтруктурыПодчиненности.ДокументСсылка = ДокументСсылка;
	ФормаСтруктурыПодчиненности.Открыть();
	 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ ДОКУМЕНТОВ

// Процедура выполняет открытие формы работы со свойствами документа
//
// Параметры:
//  ДокументОбъект - объект редактируемого документа,
//  ФормаДокумента - форма редактируемого документа
//
Процедура ОткрытьСвойстваДокумента(ДокументОбъект, ФормаДокумента) Экспорт

	Если ДокументОбъект.ЭтоНовый() Тогда
		Вопрос = "Перед началом работы со свойствами необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);

		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ФормаДокумента.ЗаписатьВФорме();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаДокумента, ДокументОбъект.Ссылка);
	
	Форма.НазначениеСвойств      = ОбщегоНазначения.ПолучитьСписокНазначенийСвойствКатегорийОбъектовПоСсылке(ДокументОбъект.Ссылка);
	Форма.ОбъектОтбораЗначений   = ДокументОбъект.Ссылка;
	Форма.ОбъектОтбораНазначений = ДокументОбъект.Ссылка;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Процедура выполняет открытие формы работы со свойствами объекта
// формы списка.
//
// Параметры:
//  Объект       - владелец свойств,
//  ФормаОбъекта - форма списка
//
Процедура ОткрытьСвойстваИзСписка(Объект, ФормаОбъекта) Экспорт

	Если Объект = неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ФормаОбъекта);

	Форма.ОбъектОтбораЗначений   = Объект;
	Форма.ОбъектОтбораНазначений = Объект;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры // ОткрытьСвойстваДокумента()

// Функция получает описание значений свойств
//
// Параметры:
//  ДокументОбъект - ссылка на объект, для которого необходимо получить описание
//
Функция ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка) Экспорт 
	
	ОписаниеЗначенийСвойств = "Дополнительные реквизиты";
	
	Если Ссылка = Неопределено Тогда
		Возврат ОписаниеЗначенийСвойств;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Свойство,
	|	ВЫБОР
	|		КОГДА ЗначенияСвойствОбъектов.Значение = ИСТИНА
	|			ТОГДА ""Да""
	|		КОГДА ЗначенияСвойствОбъектов.Значение = ЛОЖЬ
	|			ТОГДА ""Нет""
	|		ИНАЧЕ ЗначенияСвойствОбъектов.Значение
	|	КОНЕЦ КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Объект = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначенияСвойствОбъектов.Свойство.Наименование";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ОписаниеЗначенийСвойств = "";
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ТипЗнч(Выборка.Значение) = Тип("Дата") Тогда
				Если Выборка.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Дата Тогда
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Формат(Выборка.Значение, "ДФ=dd.MM.yyyy") + Символы.ПС;
				ИначеЕсли Выборка.Свойство.ТипЗначения.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.Время Тогда
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Формат(Выборка.Значение, "ДФ=ЧЧ:мм:сс") + Символы.ПС;
				Иначе
					ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Выборка.Значение + Символы.ПС;
				КонецЕсли;
			Иначе
				ОписаниеЗначенийСвойств = ОписаниеЗначенийСвойств + Выборка.Свойство + ": " + Выборка.Значение + Символы.ПС;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ОписаниеЗначенийСвойств;
	
КонецФункции

// Функция получает описание значений свойств
//
// Параметры:
//  ФормаОбъекта - форма объекта, в котором необходимо обновить кнопку
//  ОписаниеЗначенийСвойств - текстовое описание значений свойств
//
Процедура ИзменитьПредставлениеКнопкиВыбораСвойств(ФормаОбъекта, ОписаниеЗначенийСвойств) Экспорт 
	
	Если ПустаяСтрока(ОписаниеЗначенийСвойств) ИЛИ ОписаниеЗначенийСвойств = "Дополнительные реквизиты" Тогда
		КартинкаКнопки = БиблиотекаКартинок.ДополнительныеРеквизитыНеУстановлены;
	Иначе
		КартинкаКнопки = БиблиотекаКартинок.ДополнительныеРеквизитыУстановлены;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из ФормаОбъекта.ЭлементыФормы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("КоманднаяПанель") Тогда 
			Кнопка = ЭлементФормы.Кнопки.Найти("ДействиеСвойства");
			Если Кнопка <> Неопределено Тогда
				Кнопка.Подсказка = ОписаниеЗначенийСвойств;
				Кнопка.Картинка  = КартинкаКнопки;
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МНОГОФИРМЕННЫМ И ОДНОФИРМЕННЫМ УЧЕТОМ

// Процедура устанавливает отбор по основной организации в указанно форме
//
Функция УстановитьОтборПоОрганизации(Форма, УчетПоВсемОрганизациям = Неопределено, ОсновнаяОрганизация, ИмяРеквизитаСписка, ВсегдаИзменять = Ложь, ИмяОтбора = "Организация") Экспорт
	
	Если ВсегдаИзменять = Истина Тогда
		Использование = Истина;
	Иначе
		Использование = Не Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование;
	КонецЕсли;
	
	ЭлементОтбора = Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора];
	Если Использование Тогда
		Если НЕ (ТипЗнч(Форма[ИмяРеквизитаСписка]) = Тип("ТаблицаЗначений")) Тогда // Элемент - табличное поле
			
			// Проверим - Если это связанный регистр сведений тогда не нужно устанавливать отбор - 
			// он уже установлен системой автоматически
			
			Если ИмяРеквизитаСписка = "РегистрСведенийСписок" Тогда
				
				// Возможно это переход по кнопке Перейти
				Если ТипЗнч(Форма.ПараметрОтборПоИзмерению) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Форма.ПараметрОтборПоИзмерению) Тогда
						Возврат Неопределено; // Это переход по кнопке Перейти - не нужно устанавливать отбор
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].ВидСравнения  =  ?(ТипЗнч(ОсновнаяОрганизация) = Тип("СправочникСсылка.Организации"), ВидСравнения.Равно, ВидСравнения.ВСписке);
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Использование = ?(ЗначениеЗаполнено(ОсновнаяОрганизация), Использование, Ложь);
			Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора].Значение      = ОсновнаяОрганизация;
			
			ЭлементОтбора = Форма[ИмяРеквизитаСписка].Отбор[ИмяОтбора];
		КонецЕсли;
	КонецЕсли;

	Возврат ЭлементОтбора;
	
КонецФункции // УстановитьОтборПоОрганизации()

Процедура УстановитьОсновнуюОрганизацию(Организация = Неопределено) Экспорт
	
	
	СтароеЗначение = глЗначениеПеременной("ОсновнаяОрганизация");
	
	Если Организация = Неопределено Тогда
		ФормаВыбораОсновнойОрганизации = ПолучитьОбщуюФорму("ФормаВыбораОсновнойОрганизации");
		ФормаВыбораОсновнойОрганизации.ТекущаяОрганизация = СтароеЗначение;
		ФормаВыбораОсновнойОрганизации.ОткрытьМодально();
		
		НовоеЗначение = ФормаВыбораОсновнойОрганизации.ТекущаяОрганизация;
	Иначе 
		НовоеЗначение = Организация;
	КонецЕсли;
	
	Если НовоеЗначение <> СтароеЗначение Тогда
		
		// Установка значения в настройках пользователя
		УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация", НовоеЗначение);
		
		// Оповещение открытых форм об изменении текущей организации
		Оповестить("ИзменениеТекущейОрганизации");
		
		// Изменение заголовка системы
		УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации() Экспорт
	
	ЗаголовокСистемы = Константы.ЗаголовокСистемы.Получить();
	Если ПустаяСтрока(ЗаголовокСистемы) Тогда 
		ЗаголовокСистемы = Строка(глЗначениеПеременной("ОсновнаяОрганизация"));
		
		Если ПустаяСтрока(ЗаголовокСистемы) Тогда
			УстановитьЗаголовокСистемы(Метаданные.Синоним);
		Иначе
			УстановитьЗаголовокСистемы(ЗаголовокСистемы);
		КонецЕсли; 
	Иначе
		УстановитьЗаголовокСистемы(ЗаголовокСистемы)
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ПОДСИСТЕМЫ УЧЕТА НДС

// Формирует текст про счет-фактуру для показа в форме документа
//
// Параметры: 
//  СчетФактура - ссылка на документ, определяет счет-фактуру, про который надо получить текстовую строку .
//
// Возвращаемое значение:
//  Текстовая строка про счет-фактуру.
//
Функция ПолучитьТекстСчетаФактуры(СчетФактура, ДокументОснование = Неопределено, Гиперссылка = Истина, ВидимостьСтраницыСчетФактура = Истина) Экспорт

	ФлагПредъявленСчетФактура = Не ДокументОснование = Неопределено И ОбщегоНазначения.ЕстьРеквизитДокумента("ПредъявленСчетФактура", ДокументОснование.Метаданные()) 
								И ДокументОснование.ПредъявленСчетФактура;
	Если Не ДокументОснование = Неопределено 
		И ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", ДокументОснование.Метаданные())
		И ДокументОснование.ДоговорКонтрагента.УчетАгентскогоНДС 
		И ДокументОснование.ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда								
		Гиперссылка = Ложь;
		ВидимостьСтраницыСчетФактура = Ложь;
		Возврат "не требуется";
	ИначеЕсли ФлагПредъявленСчетФактура Или ЗначениеЗаполнено(СчетФактура) Тогда
		ВидимостьСтраницыСчетФактура = Истина;
		Если ДокументОснование <> Неопределено
			И (ФлагПредъявленСчетФактура Или СчетФактура = ДокументОснование.Ссылка 
			Или (ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактураПолученный") 
			И ТипЗнч(СчетФактура) <> Тип("ДокументСсылка.СчетФактураВыданный"))) Тогда
			Гиперссылка = Ложь;
			Если ФлагПредъявленСчетФактура Тогда
				Гиперссылка = Ложь;
				Возврат "№ "+?(ПустаяСтрока(ДокументОснование.НомерВходящегоСчетаФактуры), " ... ", СокрЛП(ДокументОснование.НомерВходящегоСчетаФактуры)) +" от "+ ?(ЗначениеЗаполнено(ДокументОснование.ДатаВходящегоСчетаФактуры), Формат(ДокументОснование.ДатаВходящегоСчетаФактуры,"ДФ=dd.MM.yyyy")," ... ") + " г.";
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ИспользоватьДокументРасчетовКакСчетФактуру", ДокументОснование.Метаданные())
					И ДокументОснование.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
				ТекстСчетаФактуры = ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументОснование.РасчетныйДокумент, "СчетФактураПолученный"), ДокументОснование.РасчетныйДокумент, Гиперссылка);
				Гиперссылка = Истина;
				Возврат ТекстСчетаФактуры;
			Иначе
				Гиперссылка = Ложь;
				Возврат "Для ввода счета-фактуры требуется записать документ";
			КонецЕсли;
		Иначе
			Гиперссылка = Истина;
			Если ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
				СтрокаСФ= "№ "+?(ПустаяСтрока(СчетФактура.НомерВходящегоДокумента), " ... ", СокрЛП(СчетФактура.НомерВходящегоДокумента)) +" от "+ ?(ЗначениеЗаполнено(СчетФактура.ДатаВходящегоДокумента), Формат(СчетФактура.ДатаВходящегоДокумента,"ДФ=dd.MM.yyyy")," ... ") + " г.";
			Иначе 
				СтрокаСФ = ОбщегоНазначения.ПолучитьНомерНаПечать(СчетФактура);
				СтрокаСФ= "№ "+?(ПустаяСтрока(СтрокаСФ), " ... ", СтрокаСФ) +" от "+ Формат(СчетФактура.Дата,"ДФ=dd.MM.yyyy") + " г.";
			КонецЕсли; 
			
			СтрокаСФ = СтрокаСФ+" ("+Строка(СчетФактура)+ ?(СчетФактура.ПометкаУдаления, "; помечен на удаление", "")+ ")";
			Возврат СтрокаСФ;
		КонецЕсли;

	Иначе
		Гиперссылка = Истина;
		ВидимостьСтраницыСчетФактура = Истина;
		Возврат "Ввести счет-фактуру";
	КонецЕсли;

КонецФункции // ПолучитьТекстСчетаФактуры()

// Выполняет общие для всех документов действия при нажатии на гиперссылку на Счет-фактуру
//
// Параметры:
//  ДокументОбъект  - объект документа, 
//  ФормаДокумента  - форма документа.
//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
//
Процедура ВвестиСчетФактуру(ДокументОбъект, ФормаДокумента, ВидСчетаФактуры = "СчетФактураВыданный", Отбор= Неопределено) Экспорт

	//Попытаемся найти счет-фактуру
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, Отбор);

	Если (ДокументОбъект.ПометкаУдаления) И Не ЗначениеЗаполнено(СчетФактура) Тогда
		Предупреждение("Счет-фактуру нельзя вводить на основании документа, помеченного на удаление");
		Возврат;
	КонецЕсли;

	ОбъектСчетаФактуры = Неопределено;

	//Если потерпели неудачу, то необходимо ввести новый документ 
	Если (НЕ ЗначениеЗаполнено(СчетФактура)) Тогда
		//Вводим новый документ на основании нашего
		Если ДокументОбъект.Модифицированность() Тогда
			Предупреждение("Документ был изменен. Сначала следует записать документ.");
			Возврат;
		КонецЕсли;

		ОбъектСчетаФактуры = Документы[ВидСчетаФактуры].ПолучитьФормуНовогоДокумента(, ФормаДокумента , Строка(ДокументОбъект));
		ОбъектСчетаФактуры.ДокументыОснования.Очистить();
		// Если установлен отбор по виду счета-фактуры (на реализацию/на аванс...) - устанавливаем его в новом документе
		Если ТипЗнч(Отбор) = Тип("Структура") И Отбор.Свойство("ВидСчетаФактуры") Тогда
			ОбъектСчетаФактуры.ВидСчетаФактуры = Отбор.ВидСчетаФактуры;
		КонецЕсли;
		ОбъектСчетаФактуры.Заполнить(ДокументОбъект.Ссылка); 
		// Откроем форму для редактирования счета-фактуры
		ОбъектСчетаФактуры.Открыть(); 

	Иначе
		// Откроем форму для редактирования счета-фактуры
		СчетФактура.ПолучитьФорму(, ФормаДокумента , Строка(ДокументОбъект)).Открыть();

	КонецЕсли;

КонецПроцедуры // ВвестиСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПОДБОРА В ТОРГОВЫЕ ДОКУМЕНТЫ

// Универсальная процедура, которая инициирует механизм подбора
// номенклатуры в документы (открывает основную форму обработки подбор).
//
// Параметры:
//  ФормаДокумента - форма документа, в который осуществляется подбор,
//  СтруктураПараметров - параметры, которые передаются в форму подбора.
//
Процедура ОткрытьПодборНоменклатуры(ФормаДокумента, СтруктураПараметров, ФормаПодбора = Неопределено) Экспорт

	// Добавляем обработчики в форму
	МетаданныеДокумента = ФормаДокумента.ДокументОбъект.Метаданные();
	Для Каждого ЭлементСтруктурыПараметров Из СтруктураПараметров Цикл
		Если ОбщегоНазначения.ЕстьРеквизитДокумента(ЭлементСтруктурыПараметров.Ключ, МетаданныеДокумента) Тогда
			ФормаДокумента.ПодключитьОбработчикИзмененияДанных(ЭлементСтруктурыПараметров.Ключ, "ОбновитьФормуПодбора", Ложь);
		КонецЕсли;
	КонецЦикла;
	
	// Открываем форму подбора.
	ФормаПодбора = Обработки.ПодборНоменклатуры.ПолучитьФорму("ОсновнаяФорма", ФормаДокумента, ФормаДокумента);
	ФормаПодбора.ОбработкаОбъект.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаПодбора.Открыть();

КонецПроцедуры // ОткрытьПодборНоменклатуры()

// Процедура, которая обновляет параметры подбора номенклатуры и
// инициирует обновление формы подбора, если она открыта
//
// Параметры:
//  ДокументОбъект           - объект документа, в котором производится подбор.
//  ФормаПодбораНоменклатуры - форма подбора номенклатуры,
//  ПолноеИмяРеквизита       - полное имя реквизита, который изменился.
//
Процедура ОбновитьПараметрыИФормуПодбора(ДокументОбъект, ФормаПодбораНоменклатуры, ПолноеИмяРеквизита) Экспорт

	Если ФормаПодбораНоменклатуры.Открыта() Тогда

		ИмяРеквизита = СтрЗаменить(ПолноеИмяРеквизита, "ДокументОбъект.", "");

		Если ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Свойство(ИмяРеквизита) Тогда

			ФормаПодбораНоменклатуры.ОбработкаОбъект.СтруктураИсходныхПараметров.Вставить(ИмяРеквизита, ДокументОбъект[ИмяРеквизита]);

			Родитель = ФормаПодбораНоменклатуры.ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;
			//СтруктураЗапроса = ФормаПодбораНоменклатуры.ЭлементыФормы.СписокВидовПодбора.Значение;
			//ФормаПодбораНоменклатуры.ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбновитьПараметрыИФормуПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФОРМАМИ ДОКУМЕНТОВ ПО ДВИЖЕНИЮ ДЕНЕЖНЫХ СРЕДСТВ

// Заполняет в соответствие с переданными ограничениями список счетов учета денежных средств,
// из которых будет производиться выбор пользователем в форме документа
//
// Параметры
//  МассивСчетовОтбора		 		– <Массив> – массив счетов-групп. В результат функции попадут субсчета этих счетов 
//  МассивСчетовИсключений		 		– <Массив> – массив счетов, которые будут исключены из отбора 
//  ОтборПоПризнакуВалютный	 		– <Булево> – нужен ли дополнительный отбор среди выбранных счетов по признаку "Валютный" 
//  СчетОтбораПоПризнакуВалютный 	– <ПланыСчетов.Хозрасчетный> – счет, в соответствие в признаком "Валютный" которого
//                              	будет ограничиваться список - результат функции
//
// Возвращаемое значение:
//   <СписокЗначений> – список счетов, среди которых будет производиться выбор в форме документа
//
Функция ЗаполнитьСписокВыбораСчетовДенежныхСредств(МассивСчетовОтбора, ОтборПоПризнакуВалютный = Ложь, СчетОтбораПоПризнакуВалютный = Неопределено,МассивСчетовИсключений = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСчетовОтбора", МассивСчетовОтбора);
	Запрос.УстановитьПараметр("МассивСчетовИсключений", МассивСчетовИсключений);
	
	Запрос.УстановитьПараметр("ОтбиратьПоПризнакуВалютный", ОтборПоПризнакуВалютный);
	   
	Если ТипЗнч(СчетОтбораПоПризнакуВалютный) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Запрос.УстановитьПараметр("Валютный", СчетОтбораПоПризнакуВалютный.Валютный);
	Иначе
		Запрос.УстановитьПараметр("Валютный", Ложь);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет,
	|	Хозрасчетный.Код КАК Код,
	|	Хозрасчетный.Наименование КАК Наименование
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовОтбора)
	|	И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|	И (НЕ &ОтбиратьПоПризнакуВалютный
	|			ИЛИ Хозрасчетный.Валютный = &Валютный)
	|   И Хозрасчетный.Ссылка Не В (&МассивСчетовИсключений)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	СписокВыбора = Новый СписокЗначений;

	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		СписокВыбора.Добавить(Результат.Счет, Результат.Код + " (" + Результат.Наименование + ")");
	КонецЦикла;
	
	Возврат СписокВыбора;

КонецФункции // ЗаполнитьСписокВыбораСчетовДенежныхСредств()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ВВОДА ДАТЫ КАК МЕСЯЦА

// Предназначена для реализации "произвольного" ввода даты-месяца
// подбирает по переданному тексту строку-представление даты или список таких строк
// в переданный параметр ДатаПоТексту возвращает подобранную по тексту дату
Функция ДатаКакМесяцПодобратьДатуПоТексту(Текст, ДатаПоТексту = НеОпределено) ЭКспорт
    СписокВозврата = Новый СписокЗначений;
    ТекущийГод = Год(ТекущаяДата());
    
    Если ПустаяСтрока(Текст) Тогда
        Возврат СписокВозврата;
    КонецЕсли;
    Если Найти(Текст, ".") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ".");
    ИначеЕсли Найти(Текст, ",") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, ",");
    ИначеЕсли Найти(Текст, "-") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "-");
    ИначеЕсли Найти(Текст, "/") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "/");
    ИначеЕсли Найти(Текст, "\") <> 0 Тогда
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, "\");
    Иначе
        Подстроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, " ");
    КонецЕсли;
    Если Подстроки.Количество() = 1 Тогда
        // единственное слово - пытаемся получить месяц
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Текст) Тогда
            МесяцЧислом = Число(Текст);
            Если МесяцЧислом >= 1 и МесяцЧислом <=12 Тогда
                ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);
                Если СтрДлина(Текст) = 1 Тогда
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));
                Иначе
                    СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММ/гг'"));
                КонецЕсли;
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Текст);
            Для Каждого Месяц Из СписокМесяцев Цикл
                ДатаПоТексту = Дата(ТекущийГод, Месяц, 1);
                СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='ММММ гг'"));
            КонецЦикла;
        КонецЕсли;
    ИначеЕсли Подстроки.Количество() = 2 Тогда
        // два слова - первое считаем месяцем, второе - годом
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[1]) Тогда
            Если ПустаяСтрока(Подстроки[1]) Тогда
                ГодЧислом = 0;
                Подстроки[1] = "0";
                ТекстВозврата = Текст + "0";
            Иначе
                ГодЧислом = Число(Подстроки[1]);
                ТекстВозврата = "";
            КонецЕсли;
            Если ГодЧислом > 3000 Тогда
                Возврат СписокВозврата;
            КонецЕсли;
            Если СтрДлина(Подстроки[1]) <= 1 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 3) + Подстроки[1]);
                СтрокаФорматированияГода = "г";
            ИначеЕсли СтрДлина(Подстроки[1]) = 2 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 2) + Подстроки[1]);
                СтрокаФорматированияГода = "гг";
            ИначеЕсли СтрДлина(Подстроки[1]) = 3 Тогда
                ГодЧислом = Число(Лев(Формат(ТекущийГод, "ЧГ="), 1) + Подстроки[1]);
                СтрокаФорматированияГода = "гггг";
            КонецЕсли;                    
        Иначе
            // второе слово может быть только годом
            Возврат СписокВозврата;
        КонецЕсли;                
        Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Подстроки[0]) Тогда
            МесяцЧислом = Число(Подстроки[0]);
            Если МесяцЧислом >= 1 и МесяцЧислом <= 12 Тогда
                // если "правильный" месяц и год
                ДатаПоТексту = Дата(ГодЧислом, МесяцЧислом, 1);
                СписокВозврата.Добавить(ТекстВозврата);
            Иначе
                Возврат СписокВозврата;
            КонецЕсли;                
        Иначе
            СписокМесяцев = СписокМесяцевПоСтроке(Подстроки[0]);
            Если СписокМесяцев.Количество() = 1 Тогда
                ДатаПоТексту = Дата(ГодЧислом, СписокМесяцев[0], 1);
                СписокВозврата.Добавить("");
            Иначе
                Для Каждого Месяц Из СписокМесяцев Цикл
                    ДатаПоТексту = Дата(ГодЧислом, Месяц, 1);
                    СписокВозврата.Добавить(Формат(Дата(ГодЧислом, Месяц, 1), "ДФ='ММММ гг'"));
                КонецЦикла;
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
    Возврат СписокВозврата;
КонецФункции

// подбирает массив номеров месяцев, соответствующих переданной строке
// например, для строки "ма" это будут 3 и 5, для "а" - 4 и 8
// используется в ПодобратьДатуПоТексту
Функция СписокМесяцевПоСтроке(Текст)
    СписокМесяцев = Новый СписокЗначений;
    Месяцы = Новый Соответствие;
    МесяцыВозврата = Новый Массив;
    Для Счетчик = 1 По 12 Цикл
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='ММММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
        Представление = Формат(Дата(2000, Счетчик, 1), "ДФ='МММ'");
        СписокМесяцев.Добавить(Счетчик, Представление);
    КонецЦикла;
    Для Каждого ЭлементСписка Из СписокМесяцев Цикл
        Если ВРег(Текст) = ВРег(Лев(ЭлементСписка.Представление, СтрДлина(Текст))) Тогда
            Месяцы[ЭлементСписка.Значение] = 0;
        КонецЕсли;
    КонецЦикла;
    Для Каждого Элемент Из Месяцы Цикл
        МесяцыВозврата.Добавить(Элемент.Ключ);
    КонецЦикла;
    Возврат МесяцыВозврата;
КонецФункции

Процедура ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        ТекстАвтоПодбора = Список[0];
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка) Экспорт
    Список = ДатаКакМесяцПодобратьДатуПоТексту(Текст);
    Если Список.Количество() = 1 Тогда
        Значение = Текст;
    Иначе
        Значение = Список;
    КонецЕсли;
    СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция ДатаКакМесяцПредставление(ДатаДата) Экспорт
    Возврат Формат(ДатаДата, "ДФ='ММММ гггг'");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ ОЧИЩАЕМЫХ РЕКВИЗИТОВ ОБЪЕКТА

// Сохраняет значение реквизита объекта и очищает реквизит. 
//
Процедура СохранитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, СтруктураРеквизитов) Экспорт
	
	Если НЕ Форма.ЭлементыФормы[ИмяРеквизита].Доступность Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов.Вставить(ИмяРеквизита, Форма.ЭлементыФормы[ИмяРеквизита].Значение);
	
	Форма.ЭлементыФормы[ИмяРеквизита].Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Форма.ЭлементыФормы[ИмяРеквизита].Значение));
	
КонецПроцедуры // СохранитьЗначениеРеквизита()

// Восстанавливает значение реквизита объекта.
//
Процедура ВосстановитьЗначениеРеквизитаФормы(ИмяРеквизита, Форма, СтруктураРеквизитов) Экспорт
	
	Если СтруктураРеквизитов.Свойство(ИмяРеквизита) Тогда
		Форма.ЭлементыФормы[ИмяРеквизита].Значение = СтруктураРеквизитов[ИмяРеквизита];
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьЗначениеРеквизита()
	
// Процедура вычисления даты окончания действия учетной политики
// параметры
// ТекПериод - дата начала действия учетной политики
// ТекОрганизация - организация, учетная политика которой рассматривается
//
Функция НайтиДатуОкончанияДействия(ТекПериод, ТекОрганизация) Экспорт
	
	УчетнаяПолитика = глЗначениеПеременной("глУчетнаяПолитика");	
	
	ДатаОкончания = ТекПериод;
	
	УчетнаяПолитикаОрганизации = УчетнаяПолитика.Строки.Найти(ТекОрганизация, "Организация");
	Если УчетнаяПолитикаОрганизации <> Неопределено Тогда
	
		Для Каждого СтрокаУчетнойПолитики Из УчетнаяПолитикаОрганизации.Строки Цикл
			
			Если СтрокаУчетнойПолитики.Период > ДатаОкончания Тогда
				ДатаОкончания = СтрокаУчетнойПолитики.Период - 1;
		        Возврат ДатаОкончания;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДатаОкончания = ?(ДатаОкончания = ТекПериод, КонецГода(РабочаяДата), КонецГода(ДатаОкончания));
	ДатаОкончания = ?(ТекПериод > РабочаяДата, КонецГода(ТекПериод), КонецГода(ДатаОкончания));
	
	Возврат ДатаОкончания;

КонецФункции

// {ОбособленныеПодразделения

Функция ИзменилсяПрефиксПодразделенияОрганизации(ТекущееПодразделение, НовоеПодразделение) Экспорт
	
	Возврат (ТекущееПодразделение.Префикс <> НовоеПодразделение.Префикс);
	
КонецФункции // ИзменилсяПрефиксПодразделенияОрганизации()

// }ОбособленныеПодразделения 

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА "СОВЕТЫ"

// Отрывает окно "Советы".
//
Процедура ОткрытьСоветы(Кнопка = Неопределено) Экспорт
	
	Если Кнопка = Неопределено Тогда
		Раздел = "";
	Иначе
		Раздел = Сред(Кнопка.Имя, 7);
	КонецЕсли;
	
	Если Не ПустаяСтрока(Раздел) Тогда
		Попытка
			ОткрытьСправку(Метаданные.Обработки["Советы" + Раздел]);
		Исключение
			ОткрытьСправку(Метаданные.Подсистемы.Советы);
		КонецПопытки;
	Иначе
		ОткрытьСправку(Метаданные.Подсистемы.Советы);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьСоветы()

// Устанавливает подменю "Советы".
//
Процедура УстановитьПодменюСоветы(КоманднаяПанель, ПараметрОтбора = "ВсеСоветы") Экспорт
	
	ИмяКнопки = "Советы" + СокрЛП(ПараметрОтбора);
	
	Если НЕ (КоманднаяПанель.Кнопки.Найти(ИмяКнопки) = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	// Поиск кнпоки "Справка".
	ИндексКнопкиСправка = Неопределено;
	
	Для Каждого Кнопка Из КоманднаяПанель.Кнопки Цикл
		
		Если Кнопка.Имя       = "Справка" 
		 ИЛИ Кнопка.Текст     = "Справка" 
		 ИЛИ Кнопка.Подсказка = "Открыть справку" Тогда
		 
		 	ИндексКнопкиСправка = КоманднаяПанель.Кнопки.Индекс(Кнопка);
			Прервать;
			   
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавление кнопки "Советы".
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		
		Если ИндексКнопкиСправка = Неопределено Тогда  // кнопка "Справка" не найдена.
			КоманднаяПанель.Кнопки.Вставить(0,, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(0, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		Иначе
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(ИндексКнопкиСправка, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		КонецЕсли;
		
	Иначе
		
		Если ИндексКнопкиСправка = Неопределено Тогда  // кнопка "Справка" не найдена.
			КоманднаяПанель.Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КнопкаСоветы = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		Иначе
			КнопкаСоветы = КоманднаяПанель.Кнопки.Вставить(ИндексКнопкиСправка, ИмяКнопки, ТипКнопкиКоманднойПанели.Действие, "Советы", Новый Действие("ДействияФормыОткрытьСоветы"));
		КонецЕсли;
		
	КонецЕсли;
		
	КнопкаСоветы.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
	КнопкаСоветы.Картинка    = БиблиотекаКартинок.Советы;
	КнопкаСоветы.Подсказка   = "Советы по 1С:Бухгалтерии 8";
	
КонецПроцедуры // УстановитьПодменюСоветы()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: справка еще не загружена");
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Справка: не найден элемент " + Ид);
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент_HTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(Элемент_HTML.pathname, Элемент_HTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли Элемент_HTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(Элемент_HTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли Элемент_HTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + Элемент_HTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(Элемент_HTML, НазваниеТега)
	
	ТекущийЭлемент_HTML = Элемент_HTML;
	Пока Истина Цикл
		Если ТекущийЭлемент_HTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлемент_HTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлемент_HTML;
		Иначе
			ТекущийЭлемент_HTML = ТекущийЭлемент_HTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если Элемент_HTML <> Неопределено Тогда
			Элемент_HTML.style.paddingtop		= 0;
			Элемент_HTML.style.paddingright		= 3;
			Элемент_HTML.style.paddingbottom		= 2;
			Элемент_HTML.style.paddingleft		= 3;
			Элемент_HTML.style.borderwidth		= 1;
			Элемент_HTML.style.borderstyle		= "solid";
			Элемент_HTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML <> Неопределено Тогда
		Элемент_HTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		Элемент_HTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если Элемент_HTML <> Неопределено Тогда
			Элемент_HTML.style.paddingtop		= 1;
			Элемент_HTML.style.paddingright		= 4;
			Элемент_HTML.style.paddingbottom		= 3;
			Элемент_HTML.style.paddingleft		= 4;
			Элемент_HTML.style.borderstyle		= "none";
			Элемент_HTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML <> Неопределено Тогда
		Элемент_HTML.style.backgroundcolor	= "";
		Элемент_HTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(51, 102, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|				FONT-SIZE: 8pt;
	|				FONT-FAMILY: ""MS Sans Serif"";
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначения.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции

Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()

// Процедура позволяет настроить период (ограничения по датам для отчета)
Процедура ОбработчикНастройкаПериодаНажатие(ДатаНач, ДатаКон) Экспорт

	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	НП.УстановитьПериод(НачалоДня(ДатаНач), ?(ДатаКон = '00010101', ДатаКон, КонецДня(ДатаКон)));

	Если НП.Редактировать() Тогда

		ДатаНач = НП.ПолучитьДатуНачала();
		ДатаКон = НП.ПолучитьДатуОкончания();

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ВВОДА ПО СТРОКЕ

Процедура ОбработатьАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка, КоллекцияДляПоиска, 
			ИмяПредставления = "Представление") Экспорт

	СтандартнаяОбработка = Ложь;
	
	НайденныйТекст = "";
	ТекстБылНайден = Ложь;
	Для каждого ЭлементКоллекции Из КоллекцияДляПоиска Цикл
	
		Если Найти(НРег(ЭлементКоллекции[ИмяПредставления]), НРег(Текст)) = 1 Тогда
			Если ТекстБылНайден Тогда // нашли второе значение - автоподбор невозможен
				Возврат;
			Иначе
				НайденныйТекст = ЭлементКоллекции[ИмяПредставления];
				ТекстБылНайден = Истина;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Если ТекстБылНайден Тогда
		ТекстАвтоПодбора = НайденныйТекст;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка, КоллекцияДляПоиска,
			ИмяЗначения = "Значение", ИмяПредставления = "Представление") Экспорт

	СтандартнаяОбработка = Ложь;
	
	СписокНайденного = Новый СписокЗначений;
	Для каждого ЭлементКоллекции Из КоллекцияДляПоиска Цикл
	
		Если Найти(НРег(ЭлементКоллекции[ИмяПредставления]), НРег(Текст)) = 1 Тогда
			СписокНайденного.Добавить(ЭлементКоллекции[ИмяЗначения], ЭлементКоллекции[ИмяПредставления]);
		КонецЕсли;
	
	КонецЦикла;
	
	Значение = СписокНайденного;

КонецПроцедуры

Процедура ВыбратьЗначениеПоляВводаИзСписка(Форма, ЭлементФормы, СтандартнаяОбработка, СписокВыбора, Значение, Отказ = Ложь) Экспорт

	СтандартнаяОбработка = Ложь;
	
	НачальноеЗначение = СписокВыбора.НайтиПоЗначению(Значение);
	ВыбранныйЭлемент  = Форма.ВыбратьИзСписка(СписокВыбора, ЭлементФормы, НачальноеЗначение);
	Если ВыбранныйЭлемент = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Значение = ВыбранныйЭлемент.Значение;
	КонецЕсли;

КонецПроцедуры


// Делает страницу панели с переданным именем видимой и текущей, а остальные - невидимыми
//  Параметры:
//	ИмяСтраницы  - страница, которую необходимо сделать текущей
//  Панель - имя панели;
//
Процедура УстановитьТекущуюСтраницу(ИмяСтраницы, Панель) Экспорт

	Для Каждого Страница Из Панель.Страницы Цикл

		Если НЕ Страница.Имя = ИмяСтраницы Тогда
			Страница.Видимость = Ложь;
		Иначе
			Страница.Видимость = Истина;
		КонецЕсли;

	КонецЦикла;

	Панель.ТекущаяСтраница = Панель.Страницы[ИмяСтраницы];

КонецПроцедуры // УстановитьТекущуюСтраницу()

////////////////////////////////////////////////////////////////////////////////

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидДохода - СправочникСсылка.ДоходыПоСтраховымВзносам - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПредставлениеВидаДоходаПоСтраховымВзносам(ВидДохода) Экспорт
	
	Если ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоговорыГПХ Тогда
		РасшифровкаВидДохода = "Вознаграждения, выплачиваемые по договорам гражданско-правового характера. Облагаются страховыми взносами в ПФР и ФОМС целиком, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.Матпомощь Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (пункт 11 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (подпункт в) пункта 3 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Является объектом обложения, но не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС на основании части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ (кроме пособий по социальному страхованию за счет ФСС, частично облагаемой материальной помощи и денежного довольствия)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом Тогда
		РасшифровкаВидДохода = "Не является объектом обложения страховыми взносами в ПФР, ФОМС и ФСС в соответствии с частями 3 и 4 статьи 7 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Облагается целиком страховыми взносами в ПФР, ФОМС и ФСС"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС Тогда
		РасшифровкаВидДохода = "Не облагаются целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 1 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаВидДохода = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих Тогда
		РасшифровкаВидДохода = "Не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 14 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору Тогда
		РасшифровкаВидДохода = "Облагаются страховыми взносами в ФОМС целиком, не облагаются страховыми взносами в ПФР и ФСС (пункты 1, 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"	
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПустаяСсылка() Тогда
		РасшифровкаВидДохода = "Не указан порядок учета начисления для целей исчисления страховых взносов в ПФР, ФОМС и ФСС"
	ИначеЕсли ЗначениеЗаполнено(ВидДохода) Тогда // различные авторские
		РасшифровкаВидДохода = "При исчислении страховых взносов в ПФР, ФОМС учитываются произведенные расходы согласно части 7 статьи 8 Федерального закона от 24 июля 2009 года № 212-ФЗ, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	Иначе
		РасшифровкаВидДохода = "Не отражается в учете для целей исчисления взносов в ПФР, ФОМС и ФСС"
	КонецЕсли;
	
	Возврат РасшифровкаВидДохода	
	
КонецФункции // ПолучитьПредставлениеКодаДоходаПоЕСН()

// Функция подбирает из справочника организаций первую разрешенную
//
// Параметры
//  ТолькоГоловныеОрганизации  – Булево – подбор только среди головных организаций
//
// Возвращаемое значение:
//   <Справочники.Организации>   – Ссылка на организацию, или пустая ссылка
//
Функция ПодобратьОрганизацию (ТолькоГоловныеОрганизации = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Организация,
	|	Организации.ПометкаУдаления
	|ИЗ
	|	Справочник.Организации КАК Организации";
	Если ТолькоГоловныеОрганизации Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Организации.Код";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Организация;
	Иначе
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ПодобратьОрганизацию ()

////////////////////////////////////////////////////////////////////////////////
// процедуры поддержки команд в журналах документов зарплаты и кадров

Процедура СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	
	Если Не ПравоДоступа("ИнтерактивноеДобавление", МетаданныеДокумента) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	Если Организация <> Неопределено И МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		НовыйДокумент.Организация = Организация;
	КонецЕсли;
	ФормаНового = НовыйДокумент.ПолучитьФорму();
	ФормаНового.Открыть();
	
КонецПроцедуры

Процедура СписокДокументовПередНачаломДобавления(Форма, Отказ, Копирование, Организация, ВидДокумента) Экспорт
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	РаботаСДиалогами.СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация);
	
КонецПроцедуры

//////////////////////////////////////////////////////////

Процедура ВывестиПредупреждение(Текст = "", Заголовок = "") Экспорт
	
	Предупреждение(Текст, , Заголовок);
	
КонецПроцедуры

Функция ЗадатьВопрос(ТекстВопроса = "", Режим = "", КнопкаПоУмолчанию = Неопределено, Заголовок = "") Экспорт
	
	Возврат Вопрос(ТекстВопроса, Режим, , КнопкаПоУмолчанию, Заголовок)
	
КонецФункции
