////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//

//Выполняет в строке ГДЕ замену символов ЧТО на соответствующие по номерам символы из строки НаЧто
//
Функция ЗаменитьОдниСимволыДругими(Что,Где,НаЧто) Экспорт
	Рез = Где;
	Для Сч=1 По СтрДлина(Что) Цикл
		Рез = СтрЗаменить(Рез,Сред(Что,Сч,1),Сред(НаЧто,Сч,1));
	КонецЦикла;
	Возврат Рез;
КонецФункции

// Дополняет строку указанным символом до указанной длины
//
// Параметры: 
//  Стр            - Дополняемая строка
//  Длина          - Требуемая длина результирующей строки
//  Чем            - Символ, которым дополняется строка
//
// Возвращаемое значение:
//  Строка дополненная указанным символом до указанной длины
//
Функция ДополнитьСтроку(Знач Стр, Длина, Чем=" ", Режим = 0) Экспорт
	
	СимволовДополнить = Длина -  СтрДлина(Стр);
	Добавок = "";
	Для Н=1 по СимволовДополнить Цикл
		Добавок =	Добавок + Чем;
	КонецЦикла;
	Возврат ?(Режим=0, Добавок + Стр, Стр + Добавок);
	
КонецФункции 

//Разбивает серию документа удостоверяющего личность на 2 части: до и после разделителя
Функция РазложитьСериюДокумента(Знач ВидДокумента, Знач СерияДокумента) Экспорт

	Часть1 = "";
	Часть2 = "";
	
	Если ЗначениеЗаполнено(ВидДокумента) тогда
		
		КодДока = ВидДокумента.КодИМНС;

		Если (КодДока = "01") или (КодДока = "03")  Тогда
			//Свидетельство о рождении или Паспорт гражданина СССР. . Разделитель групп - "-"
			Разделитель = Найти(СерияДокумента, "-");
			Часть1 = ?(Разделитель = 0, СерияДокумента, ЗаменитьОдниСимволыДругими("1УХЛС", ВРег(СокрЛП(Лев(СерияДокумента, Разделитель-1))), "IVXLC"));
			Часть2 = ?(Разделитель = 0, "", СокрЛП(Сред(СерияДокумента, Разделитель + 1)));
		ИначеЕсли (КодДока = "02") Или (КодДока = "22") Тогда
			//Загранпаспорт гражданина СССР и РФ - первая часть не заполняется, заполняется только вторая часть
			Часть2 = СерияДокумента;
		ИначеЕсли КодДока = "21"  Тогда
			//Паспорт гражданина Российской Федерации. Разделитель групп - " "
			Разделитель = Найти(СерияДокумента, " ");
			Часть1 = ?(Разделитель = 0, СерияДокумента, СокрЛП(Лев(СерияДокумента, Разделитель - 1)));
			Часть2 = ?(Разделитель = 0, "", СокрЛП(Сред(СерияДокумента, Разделитель + 1)));
		Иначе	
			Часть1 = СерияДокумента;
		КонецЕсли;
		
	КонецЕсли;	 

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Часть1",Часть1);
	СтруктураВозврата.Вставить("Часть2",Часть2);
	Возврат СтруктураВозврата;
	
КонецФункции	 

// Выполянет преобразование арабского числа в римское 
//
// Параметры
//		АрабскоеЧисло - число, целое, от 0 до 999
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычное" число римскими цифрами,
//		например:
//				ПреобразоватьЧислоВРимскуюНотацию(17) = "ХVII"
//
Функция ПреобразоватьЧислоВРимскуюНотацию(АрабскоеЧисло, ИспЛатинскиеБуквы = Ложь) Экспорт
	
	РимскоеЧисло="";
	cRab = ДополнитьСтроку(АрабскоеЧисло,3);

	Если ИспЛатинскиеБуквы Тогда
		c1 = "I";c5 = "V";c10 = "X";c50 = "L";c100 ="C";c500 = "M";c1000 = "D";
		
	Иначе
		c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";
	КонецЕсли;

	nEd = Число(Сред(cRab,3,1));
	nDs = Число(Сред(cRab,2,1));
	nSt = Число(Сред(cRab,1,1));

	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nSt,c100,c500,c1000);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nDs,c10,c50,c100);
	РимскоеЧисло = РимскоеЧисло + ПреобразоватьЦифруВРимскуюНотацию(nEd,c1,c5,c10);

	Возврат РимскоеЧисло;
	
КонецФункции //ПреобразоватьЧислоВРимскуюНотацию

// Выполянет преобразование римского числа в арабское
//
// Параметры
//		РимскоеЧисло - строка, число, записанное римскими цифрами
//
// Возвращаемое значение
//		число
//
// Описание
//		преобразует число, записанное римскими цифрами, в "обычное" число,
//		например:
//				ПреобразоватьЧислоВАрабскуюНотацию("ХVII") = 17
//
Функция ПреобразоватьЧислоВАрабскуюНотацию(РимскоеЧисло) Экспорт
	
	АрабскоеЧисло=0;

	c1 = "1";c5 = "У";c10 = "Х";c50 = "Л";c100 ="С";c500 = "М";c1000 = "Д";

	РимскоеЧисло = СокрЛП(РимскоеЧисло);
	ЧислоСимволов = СтрДлина(РимскоеЧисло);

	Для Сч=1 По ЧислоСимволов Цикл
	   Если Сред(РимскоеЧисло,Сч,1) = c1000 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+1000;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c500 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+500;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c100 Тогда
		  Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c500) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c1000)) Тогда
			 АрабскоеЧисло = АрабскоеЧисло-100;
		  Иначе
			 АрабскоеЧисло = АрабскоеЧисло+100;
		  КонецЕсли;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c50 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+50;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c10 Тогда
		  Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c50) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c100)) Тогда
			 АрабскоеЧисло = АрабскоеЧисло-10;
		  Иначе
			 АрабскоеЧисло = АрабскоеЧисло+10;
		  КонецЕсли;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c5 Тогда
		  АрабскоеЧисло = АрабскоеЧисло+5;
	   ИначеЕсли Сред(РимскоеЧисло,Сч,1) = c1 Тогда
		  Если (Сч < ЧислоСимволов) И ((Сред(РимскоеЧисло,Сч+1,1) = c5) ИЛИ (Сред(РимскоеЧисло,Сч+1,1) = c10)) Тогда
			 АрабскоеЧисло = АрабскоеЧисло-1;
		  Иначе
			 АрабскоеЧисло = АрабскоеЧисло+1;
		  КонецЕсли;
	   КонецЕсли;
	КонецЦикла;
	Возврат АрабскоеЧисло;
КонецФункции //ПреобразоватьЧислоВАрабскуюНотацию

// Выполянет преобразование цифры в римскую нотацию 
//
// Параметры
//		Цифра - число, целое, от 0 до 9
//      РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка - строки, соответствующие римские цифры
//
// Возвращаемое значение
//		строка
//
// Описание
//		записывает "обычную" цифру римскими цифрами,
//		например:
//				ПреобразоватьЦифруВРимскуюНотацию(7,"I","V","X") = "VII"
//
Функция ПреобразоватьЦифруВРимскуюНотацию(Цифра,РимскаяЕдиница,РимскаяПятерка,РимскаяДесятка)

	РимскаяЦифра="";
	Если Цифра = 1 Тогда
	   РимскаяЦифра = РимскаяЕдиница
	ИначеЕсли Цифра = 2 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 3 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 4 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяПятерка;
	ИначеЕсли Цифра = 5 Тогда
	   РимскаяЦифра = РимскаяПятерка;
	ИначеЕсли Цифра = 6 Тогда
	   РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница;
	ИначеЕсли Цифра = 7 Тогда
	   РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 8 Тогда
	   РимскаяЦифра = РимскаяПятерка + РимскаяЕдиница + РимскаяЕдиница + РимскаяЕдиница;
	ИначеЕсли Цифра = 9 Тогда
	   РимскаяЦифра = РимскаяЕдиница + РимскаяДесятка;
	КонецЕсли;
	Возврат РимскаяЦифра;

КонецФункции //ПреобразоватьЦифруВРимскуюНотацию

// КонвертацияОтчетнойФормы
// СтруктураМногостраничныхРазделов - структура многостраничных страниц
// ПоказателиОтчета - показатели отчета
// ВерсияФормы - старая версия формы
// ВызванноИзОтчета - откуда вызывается процедура, Истина из отчета при восстановлении, Ложь - извне
//
Процедура КонвертацияОтчетнойФормы(СохраненныйДок = Неопределено, ЭтаФормаД = Неопределено, ВерсияФормы = Неопределено, ПоказателиОтчета = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ДанныеМногостраничныхРазделов;
	Перем ДанныеМногострочныхРазделов;

	Если СохраненныйДок = Неопределено Тогда
		ВызванноИзОтчета = Истина;
	Иначе
		ВызванноИзОтчета = Ложь;
	КонецЕсли;

	Если НЕ ВызванноИзОтчета Тогда

		Если СохраненныйДок = Неопределено Тогда
			Возврат;
		КонецЕсли;

		// Текущая Версия - будет оставаться в отчете всегда прежняя версия, записываться новая не будет
		// поэтому строчки комментарятся
		//ТекущаяВерсия = Отчеты[СохраненныйДок.ИсточникОтчета].ПолучитьФорму(СохраненныйДок.ВыбраннаяФорма).мВерсияФормы;
		ТекущаяВерсия = -1;

		// восстанавливаем сохраненные данные отчета
		СписокСохранения = СохраненныйДок.ДанныеОтчета.Получить();

		Если ВерсияФормы = Неопределено Тогда
			// Получим версию формы, в которой был сохранен отчет
			СписокСохранения.Свойство("ВерсияФормы", ВерсияФормы);
		КонецЕсли;

		Если НЕ СписокСохранения.Свойство( "ПоказателиОтчета", ПоказателиОтчета) Тогда
			Возврат;
		КонецЕсли;

		// Если многостраничных разделов нет, то нечего конвертировать.
		Если (НЕ СписокСохранения.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов))
		Или (ДанныеМногостраничныхРазделов = Неопределено) Тогда
			Возврат;
		КонецЕсли;

		ВыбраннаяФорма = СохраненныйДок.ИсточникОтчета;

		// Считываем данные многострочной части
		Если НЕ СписокСохранения.Свойство("ДанныеМногострочныхРазделов", ДанныеМногострочныхРазделов) Тогда
			МногострочнаяЧастьОтсутствует = Истина;
		Иначе
			МногострочнаяЧастьОтсутствует = Ложь;
		КонецЕсли;

		Если ДанныеМногострочныхРазделов = Неопределено Тогда
			МногострочнаяЧастьОтсутствует = Истина;
		Иначе
			МногострочнаяЧастьОтсутствует = Ложь;
		КонецЕсли;

	Иначе

		ТекущаяВерсия = ЭтаФормаД.мВерсияФормы;
		ВыбраннаяФорма = ЭтаФормаД.мСохраненныйДок.ИсточникОтчета;

		Попытка
			ДанныеМногостраничныхРазделов = ЭтаФормаД.мСтруктураМногостраничныхРазделов;
		Исключение
			ДанныеМногостраничныхРазделов = Неопределено;
		КонецПопытки;

		Если ДанныеМногостраничныхРазделов = Неопределено Тогда
			Возврат;
		КонецЕсли;

		МногострочнаяЧастьОтсутствует = Ложь;

		// Считываем данные многострочной части
		Попытка
			ДанныеМногострочныхРазделов = ЭтаФормаД.мСтруктураМногострочныхРазделов;
		Исключение
			МногострочнаяЧастьОтсутствует = Истина;
		КонецПопытки;

		Если ДанныеМногострочныхРазделов = Неопределено Тогда
			МногострочнаяЧастьОтсутствует = Истина;
		КонецЕсли;

		// Показатель будет изменен
		ПоказателиОтчета = ПоказателиОтчета;
	КонецЕсли;

	// Если версии равны, то выходим
	Если ТекущаяВерсия = ВерсияФормы Тогда
		Возврат;
	КонецЕсли;

		Список = Новый Массив;
		Для Каждого ПоказателиСтраницы Из ПоказателиОтчета Цикл

			ИмяТекТабличноеПоле = ПоказателиСтраницы.Ключ;
			ПоказателиТаблПоле  = ПоказателиСтраницы.Значение;
			ИмяСтраницы = СтрЗаменить(ИмяТекТабличноеПоле, "ПолеТабличногоДокумента", "");

			Если ДанныеМногостраничныхРазделов.Свойство(ИмяСтраницы, ТаблицаСтраницРаздела) Тогда
				// если раздел многостраничный тогда ...

				// Страница для удаления
				Список.Добавить(ИмяСтраницы);

				Если ВызванноИзОтчета Тогда
					Сообщить("Идет обновление структуры разделов декларации. " + ИмяСтраницы + " ...");
				КонецЕсли;

				Если ТаблицаСтраницРаздела.Количество() = 0 Тогда

					// Добавим пустую страницу
					МногостраничностьОбеспечена = ТаблицаСтраницРаздела.Добавить();
					МногостраничностьОбеспечена.Представление      = "Новая страница";
					МногостраничностьОбеспечена.АктивнаяСтраница   = Истина;
					// Добавим данные
					ТаблицаСтраницРаздела[0].Данные           = ПоказателиТаблПоле;

					МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти = Ложь;
					ДопСтроки = Неопределено;

					Попытка
					// Поле ДанныеДопСтрок есть не во всех многостраничных разделах
						ДопСтроки = ТаблицаСтраницРаздела[0].ДанныеДопСтрок;
					Исключение
						// на доп. листе нет многострочной части
						МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти = Истина;
					КонецПопытки;

					// Если поле многострочности есть, а данные = Неопределено, то считаем, что нет многострочной части
					//МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти = ?(ДопСтроки = Неопределено, Истина, Ложь);

					// Не используем переменную МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти
					// т.к. если нет доп. страниц в разделе, то многострочность запишется в отчете в переменную
					// данные многостраничных частей - мСтруктураМногострочныхЧастей, которую ранее мы и считали
					Если НЕ МногострочнаяЧастьОтсутствует Тогда

						// Объявим переменную для сбора многострочных частей
						СтруктураДанныхДопСтрокРаздела = Новый Структура;

						// Переберем всю многострочную часть
						Для Каждого ЭлементСтруктуры Из ДанныеМногострочныхРазделов Цикл

							ИмяГруппы = ЭлементСтруктуры.Ключ;

							// Найдем многострочные части, для нужного нам листа и соберем их вместе, в случае
							// если на одном листе больше одной мнг. части.

							Если ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации(ИмяГруппы, ВыбраннаяФорма, 1) = ИмяСтраницы Тогда

								ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
								ДанныеМногострочныхРазделов.Свойство(ИмяГруппы, ПромТаблицаДопСтрокРаздела);
								ТаблицаДопСтрокГруппы1 = ПромТаблицаДопСтрокРаздела.Скопировать();
								СтруктураДанныхДопСтрокРаздела.Вставить(ИмяГруппы, ТаблицаДопСтрокГруппы1);

							КонецЕсли; // Имя страницы равно имя из структуры многостраничной части

						КонецЦикла; // Для Каждого

						// Запишем в структуру многостраничного раздела, если
						// многострочная часть присутствует (по структуре мСтруктураМногостраничной части
						// или (многострочная часть присутствует (по мСтруктураМногострочныхРазделов) И есть поле
						// И в структуре данныхДопСтрокРаздела, больше 0, т.е. больше одного блока
						// таким образом учитываем вариант, когда
						// на многостраничном разделе 1 лист, содержит многострочные части
						Если ((НЕ МногострочнаяЧастьОтсутствуетПоСтруктуреМногостраничнойЧасти)
						И (НЕ МногострочнаяЧастьОтсутствует))
						Или ((НЕ МногострочнаяЧастьОтсутствует) И (СтруктураДанныхДопСтрокРаздела.Количество()>0)) Тогда
							ТаблицаСтраницРаздела[0].ДанныеДопСтрок = СтруктураДанныхДопСтрокРаздела;
						КонецЕсли;

					КонецЕсли;
				КонецЕсли; // Если кол-во страниц = 0
			КонецЕсли; // Если многостраничный документ
		КонецЦикла;

		Для Каждого Зн Из Список Цикл
			// Сообщить(Зн.Значение);
			// Удалим лишние разделы из Показателей Отчета
			ПоказателиОтчета.Удалить("ПолеТабличногоДокумента" + Зн);
		КонецЦикла;

		Если НЕ ВызванноИзОтчета Тогда

			// вставляем данные, которые изменили
			СписокСохранения.Вставить("ПоказателиОтчета", ПоказателиОтчета);

			// вставляем данные многостраничных разделов
			СписокСохранения.Вставить("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов);

			// вствляем версию формы
			//СписокСохранения.Вставить("ВерсияФормы", ТекущаяВерсия);

			ХранилищеДанных = Новый ХранилищеЗначения(СписокСохранения);
			СохраненныйДокОбъект = СохраненныйДок.ПолучитьОбъект();
			СохраненныйДокОбъект.ДанныеОтчета = ХранилищеДанных;
			СохраненныйДокОбъект.Записать();
		Иначе
			// Если вызвано из формы при восстановлении
			ЭтаФормаД.мСтруктураМногостраничныхРазделов = ДанныеМногостраничныхРазделов;
		КонецЕсли;


КонецПроцедуры // КонвертацияОтчетнойФормы2

// ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации
//
Функция ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации(ИдГруппы, ИмяФормы, НомерКонвертации)

	Если НомерКонвертации = 1 Тогда
		Результат = "";
		Если ИмяФормы = "РегламентированныйОтчетАкцизыПриложение1" Тогда

			Если (ИдГруппы = "П0000200010")
			Или (ИдГруппы = "П0000200020")
			Или (ИдГруппы = "П0000200030")
			Или (ИдГруппы = "П0000200040")
			Или (ИдГруппы = "П0000200050")
			Или (ИдГруппы = "П0000200060")
			Или (ИдГруппы = "П0000200070")
			Или (ИдГруппы = "П0000200080")
			Или (ИдГруппы = "П0000200090")
			Или (ИдГруппы = "П0000200100")
			Или (ИдГруппы = "П0000200110") Тогда
				Результат = "Раздел2";
			ИначеЕсли (ИдГруппы = "П0002100050") Или (ИдГруппы = "П0002100070") Тогда
				Результат = "Приложение1";
			ИначеЕсли (ИдГруппы = "П0002200050") Или (ИдГруппы = "П0002200070") Тогда
				Результат = "Приложение2";
			ИначеЕсли ИдГруппы = "П0002300050" Тогда
				Результат = "Приложение3";
			ИначеЕсли ИдГруппы = "П0002400050" Тогда
				Результат = "Приложение4";
			ИначеЕсли ИдГруппы = "П0002500010" Тогда
				Результат = "Приложение5";
			ИначеЕсли ИдГруппы = "П0000400070" Тогда
				Результат = "Приложение7";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетНДС" Тогда
			Если ИдГруппы = "П0000500010" Тогда
				Результат = "Раздел5";
			ИначеЕсли ИдГруппы = "П0000600010" Тогда
				Результат = "Раздел6";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетНДС0" Тогда
			Если ИдГруппы = "П0000300050" Тогда
				Результат = "Раздел3";
			ИначеЕсли ИдГруппы = "П0000300060" Тогда
				Результат = "Раздел3";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетДоходыЗаПределамиРФ" Тогда
			Если ИдГруппы = "П0000200100" Тогда
				Результат = "Раздел2";
			ИначеЕсли (ИдГруппы = "П0000300070")
				Или (ИдГруппы = "П0000300080")
				Или (ИдГруппы = "П0000300090")
				Или (ИдГруппы = "П0000300110")
				Или (ИдГруппы = "П0000300120")
				Или (ИдГруппы = "П0000300130") Тогда
				Результат = "Раздел3";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетАкцизыПриложение3" Тогда

			Если ИдГруппы = "П0002100050" Тогда
				Результат = "Приложение1";
			Иначе
				Результат = "Приложение2";
			КонецЕсли;

		ИначеЕсли ИмяФормы = "РегламентированныйОтчетАкцизыПриложение5" Тогда

			Если ИдГруппы = "П0002400050" Тогда
				Результат = "Приложение1";
			ИначеЕсли ИдГруппы = "П0002500040" Тогда
				Результат = "Приложение2";
			ИначеЕсли ИдГруппы = "П0002600050" Тогда
				Результат = "Приложение3";
			ИначеЕсли ИдГруппы = "П0002700040" Тогда
				Результат = "Приложение4";
			КонецЕсли;

		КонецЕсли;

		Возврат Результат;

	КонецЕсли;

КонецФункции // ОпределитьПринадлежностьМногострочнойЧастиКЛистуДекларации

// роДобавитьКолонкуАвтоматическогоПредставленияВСтруктуруМногостраничныхРазделов
//
Процедура роДобавитьКолонкуАвтоматическогоПредставленияВСтруктуруМногостраничныхРазделов() Экспорт

	Перем ДанныеМногостраничныхРазделов;
	Перем ТаблицаМногостраничногоДокумента;
	Перем мОписаниеТиповБулево;

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);
	СчетчикУспешныхИзменений = 0;
	СчетчикНеУспешныхИзменений = 0;

	Выборка = Документы.РегламентированныйОтчет.Выбрать();

	Сообщить("Изменяется структура многостраничных разделов в регламентированных отчетах ...");
	Пока Выборка.Следующий() Цикл

		Док = Выборка.ПолучитьОбъект();
		ДанныеОтчета = Док.ДанныеОтчета.Получить();

		Если ДанныеОтчета = Неопределено ИЛИ ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;

		МногостраничностьВДекларацииОтсутствует = Истина;
		ИзмененияВнесены = Ложь;

		// Получим данные многостраничных разделов.
		Если ДанныеОтчета.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда

			МногостраничностьВДекларацииОтсутствует = Ложь;

			// В каждый раздел многостраничного документа добавим колонку АвтоматическоеПредставление
			Для Каждого ЭлементСтруктуры Из ДанныеМногостраничныхРазделов Цикл

				//ДанныеМногостраничныхРазделов.Свойство(ЭлементСтруктуры.Ключ, ТаблицаМногостраничногоДокумента);
				ТаблицаМногостраничногоДокумента = ЭлементСтруктуры.Значение;

				Если ТаблицаМногостраничногоДокумента.Колонки.Найти("АвтоматическоеПредставление") = Неопределено Тогда
					// Возводим признак изменения структуры многостраничных разделов.
					ИзмененияВнесены = Истина;
					ТаблицаМногостраничногоДокумента.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

					// Проставим признак автозаполнения представления.
					Для Каждого Элемент Из ТаблицаМногостраничногоДокумента Цикл
						Элемент.АвтоматическоеПредставление = Истина;
					КонецЦикла;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Если НЕ МногостраничностьВДекларацииОтсутствует И ИзмененияВнесены Тогда
			ХранилищеДанных = Новый ХранилищеЗначения(ДанныеОтчета);
			Док.ДанныеОтчета = ХранилищеДанных;
			ДокументЗаписан = Истина;
			Попытка
				Док.Записать();
			Исключение
				ДокументЗаписан = Ложь;
			КонецПопытки;

			Если ДокументЗаписан Тогда
				//Сообщить("Документ " + Выборка.НаименованиеОтчета + " изменен успешно.");
				СчетчикУспешныхИзменений = СчетчикУспешныхИзменений + 1;
			Иначе
				//Сообщить("Документ " + Выборка.НаименованиеОтчета + " не удалось изменить.");
				СчетчикНеУспешныхИзменений = СчетчикНеУспешныхИзменений + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если (СчетчикУспешныхИзменений <> 0) Или (СчетчикНеУспешныхИзменений <> 0) Тогда
		Сообщить("Изменено отчетов: " + Строка(СчетчикУспешныхИзменений) + "; не изменено: " + Строка(СчетчикНеУспешныхИзменений));
	КонецЕсли;

КонецПроцедуры // роДобавитьКолонкуАвтоматическогоПредставленияВСтруктуруМногостраничныхРазделов

//ЗаполнитьКППвДокументахРегламентированныйОтчет
//Процедура выполняется при обновлении ИБ
Процедура ЗаполнитьКППвДокументахРегламентированныйОтчет() Экспорт
	
	Перем ПоказателиОтчета, ДанныеТитульный; // для отчетов, где титульный раздел - не многостраничный
	Перем ДанныеМногостраничныхРазделов, ТаблицаТитульный; // для отчетов, где титульный раздел - многостраничный
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние("Заполняется новый служебный реквизит в сохраненных регламентированных отчетах...");
	#КонецЕсли
	
	Выборка = Документы.РегламентированныйОтчет.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОпределенКПП = Ложь;
		Док = Выборка.ПолучитьОбъект();
		ДанныеОтчета = Док.ДанныеОтчета.Получить();
		Если ДанныеОтчета = Неопределено ИЛИ ТипЗнч(ДанныеОтчета) <> Тип("Структура") Тогда
			Продолжить;
		КонецЕсли;
		
		КПП = "";
		Если ДанныеОтчета.Свойство("ПоказателиОтчета", ПоказателиОтчета) И ПоказателиОтчета.Свойство("ПолеТабличногоДокументаТитульный", ДанныеТитульный) 
			И ДанныеТитульный.Свойство("КПП1_1", КПП) Тогда
			
			Для Сч = 2 По 9 Цикл
				КПП = КПП + ДанныеТитульный["КПП1_" + Сч];
			КонецЦикла;
			
			ОпределенКПП = Истина;
		ИначеЕсли ДанныеОтчета.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) 
			И ДанныеМногостраничныхРазделов.Свойство("Титульный", ТаблицаТитульный) 
			И ТаблицаТитульный[0].Данные.Свойство("КПП1_1", КПП) Тогда
			
			Для Инд = 2 по 9 Цикл
				КПП = КПП + ТаблицаТитульный[0].Данные["КПП1_" + Строка(Инд)];
			КонецЦикла;
			
			ОпределенКПП = Истина;
		КонецЕсли;
		
		Если ОпределенКПП Тогда
			Док.КПП = СтрЗаменить(КПП, "-", "");
			Попытка
				Док.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// формирует список значений, описывающий государственные праздники РФ
//
// Параметры
//  КалендарныйГод - число - год, за который возвращается список праздников
//
// Возвращаемое значение:
//   список значений, содержащий строки-месяцедни праздников
//
Функция ПолучитьСписокПраздниковРФ(КалендарныйГод) Экспорт

	СписокПраздников = Новый СписокЗначений();
	Если КалендарныйГод < 1994 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День принятия Декларации о государственном суверенитете Российской Федерации");
		СписокПраздников.Добавить("1107", "годовщина Великой Октябрьской социалистической революции");
	ИначеЕсли КалендарныйГод < 2002 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День принятия Декларации о государственном суверенитете Российской Федерации");
		СписокПраздников.Добавить("1107", "годовщина Великой Октябрьской социалистической революции");
		СписокПраздников.Добавить("1212", "День Конституции РФ");
	ИначеЕсли КалендарныйГод < 2005 Тогда
		СписокПраздников.Добавить("0101", "Новый Год");
		СписокПраздников.Добавить("0102", "Новый Год");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0223", "День защитника Отечества");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0502", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День России");
		СписокПраздников.Добавить("1107", "День согласия и примирения");
		СписокПраздников.Добавить("1212", "День Конституции РФ");
	Иначе  // Федеральный закон №201-ФЗ от 29 декабря 2004 года
		СписокПраздников.Добавить("0101", "Новогодние каникулы");
		СписокПраздников.Добавить("0102", "Новогодние каникулы");
		СписокПраздников.Добавить("0103", "Новогодние каникулы");
		СписокПраздников.Добавить("0104", "Новогодние каникулы");
		СписокПраздников.Добавить("0105", "Новогодние каникулы");
		СписокПраздников.Добавить("0107", "Рождество Христово");
		СписокПраздников.Добавить("0223", "День защитника Отечества");
		СписокПраздников.Добавить("0308", "Международный женский день");
		СписокПраздников.Добавить("0501", "Праздник Весны и Труда");
		СписокПраздников.Добавить("0509", "День Победы");
		СписокПраздников.Добавить("0612", "День России");
		СписокПраздников.Добавить("1104", "День народного единства");
	КонецЕсли;

	Возврат СписокПраздников

КонецФункции // ПолучитьСписокПраздниковРФ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОВЕРКИ КОРРЕКТНОСТИ ЗАПОЛНЕНИЯ ДАННЫХ
//

//Проверяет номер страхового свидетельства на соответствие требованиям ПФР
Функция СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомер) Экспорт
	
	Результат = Истина;
	
	СтрокаЦифр=СтрЗаменить(Лев(СтраховойНомер,11),"-","");
	
	Если ПустаяСтрока(СтрокаЦифр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		П1 = Число(СтрокаЦифр);	
		КонтрольноеЧисло=Число(Прав(СтраховойНомер,2));
	Исключение
		Возврат Ложь;
	КонецПопытки; 
	
	Если Число(Лев(СтрокаЦифр,9)) > 1001998 Тогда
		Всего=0;
		Для Сч = 1 По 9 Цикл
			Всего=Всего+Число(Сред(СтрокаЦифр,10-Сч,1))*Сч
		КонецЦикла;
		Остаток=Всего%101;
		Остаток=?(Остаток=100,0,Остаток);
		Если Остаток<>КонтрольноеЧисло Тогда
			Результат = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫБОРКИ ДАННЫХ 
//

// Определяет, является ли переданная в качестве параметра организация ПБОЮЛ
Функция ЭтоПБОЮЛ(Организация) Экспорт
	
	ИдКонф = ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" ИЛИ ИдКонф = "ЗБУ" ИЛИ Организация.ИностраннаяОрганизация Тогда
		Возврат Ложь;
	Иначе
		Возврат (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
КонецФункции

// Определяет страну, гражданином которой является ФизЛицо по состоянию на ДатуЗначения
Функция ПолучитьГражданство(ФизЛицо, ДатаЗначения) 
	
	Гражд = РегистрыСведений.ГражданствоФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Гражд.Количество() > 0 Тогда
		Возврат Гражд[0].Страна;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает паспортные данные ФизЛица по состоянию на ДатуЗначения
Функция ПолучитьУдЛичн(ФизЛицо, ДатаЗначения)
	
	Удостоверения = РегистрыСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", ФизЛицо));

	Если Удостоверения.Количество() > 0 Тогда
		Возврат Удостоверения[0];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает код региона из адрессного классификатора по его Названию
Функция КодРегионаПоНазванию(Название) Экспорт
	
	Если ПустаяСтрока(Название) Тогда
		Возврат "";
	КонецЕсли;
	
	Назв = СокрЛ(Название);
	ПервыЙПробел = Найти(Назв, " ");
	Если ПервыйПробел <> 0 Тогда
		Назв = Лев(Назв, ПервыйПробел - 1);
	КонецЕсли;
	
	// сначала пробуем найти в адресном классификаторе
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныйКлассификатор.КодРегионаВКоде,
	|	АдресныйКлассификатор.ТипАдресногоЭлемента,
	|	АдресныйКлассификатор.Наименование
	|ИЗ
	|	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|
	|ГДЕ
	|	АдресныйКлассификатор.Наименование = &Наименование И
	|	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента";
	
	Запрос.УстановитьПараметр("Наименование", Назв);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Выборка.Следующий();
		//Возврат СокрЛП(Выборка.КодРегионаВКоде);
		Возврат Формат(Выборка.КодРегионаВКоде, "ЧЦ=2; ЧВН=")
	КонецЕсли;
	
	// затем пробуем найти в таблице регионов
	МакетРегионы = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет("Регионы");
	нрегАдресРегион = нрег(Название);
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = СокрЛП(МакетРегионы.Область(Инд, 1, Инд, 1).Текст);
		Если Лев(нрегАдресРегион, СтрДлина(ТекРегион)) = нрег(ТекРегион) Тогда
			Возврат СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции	

// Возвращает сокращенный уникальный идентификатор текущей конфигурации.
Функция ИДКонфигурации() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	Если МетаданныеИмя = "БухгалтерияПредприятия" ИЛИ МетаданныеИмя = "БухгалтерияПредприятияБазовая" Тогда
		Возврат "БП";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИУправлениеПерсоналом" ИЛИ МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомБазовая" ИЛИ МетаданныеИмя = "ЗарплатаИУправлениеПерсоналомКОРП" Тогда
		Возврат "ЗУП";
	ИначеЕсли МетаданныеИмя = "УправлениеПроизводственнымПредприятием" Тогда
		Возврат "УПП";
	ИначеЕсли МетаданныеИмя = "КомплекснаяАвтоматизация" Тогда
		Возврат "КА";
	ИначеЕсли МетаданныеИмя = "БухгалтерияБюджетногоУчреждения" ИЛИ МетаданныеИмя = "БухгалтерияБюджетногоУчрежденияБазовая" Тогда
		Возврат "ББУ";
	ИначеЕсли МетаданныеИмя = "БухгалтерияГосударственногоУчреждения" ИЛИ МетаданныеИмя = "БухгалтерияГосударственногоУчрежденияБазовая" Тогда
		Возврат "БГУ";
	ИначеЕсли МетаданныеИмя = "ЗарплатаИКадрыБюджетногоУчреждения" ИЛИ МетаданныеИмя = "БазоваяФункциональностьКадрыЗарплата" Тогда
		Возврат "ЗБУ";
	ИначеЕсли МетаданныеИмя = "БухгалтерияПредприятияКОРП" Тогда
		Возврат "БПКОРП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияКОРП" Тогда
		Возврат "БАУКОРП";
	ИначеЕсли МетаданныеИмя = "БухгалтерияАвтономногоУчреждения" ИЛИ МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияБазовая" Тогда
		Возврат "БАУ";
	Иначе
		Возврат МетаданныеИмя;
	КонецЕсли;
	
КонецФункции // ИДКонфигурации()

// Возвращает номер редакции текущей конфигурации.
//  Номер редакции выделяется из полного номера версии конфигурации 
// и представляет собой все символы до второй точки.
//
Функция РедакцияКонфигурации() Экспорт
	
	Перем Версия;
	Перем ПерваяТочка;

	Версия = Метаданные.Версия;
	ПерваяТочка = Найти(Версия, ".");

	Возврат СокрЛП(Лев(Версия, Найти(Сред(Версия, ПерваяТочка + 1), ".") + ПерваяТочка - 1));

КонецФункции // РедакцияКонфигурации()

#Если ТолстыйКлиентОбычноеПриложение Тогда

// Функция возвращает информацию об организации с учетом предыдущих обращений к сведениям.
// Параметры:
//		Кэш - структура, содержащая информацию с данными об организации, которые запрашивались ранее (кэш сведений);
//		Параметр - строка, имя запрашиваемого параметра;
//		ФизЛицо - переменная типа СправочникСсылка.ФизическиеЛица. Параметр необязателен, необходим 
//			для получения лишь некоторых параметров (сведений об ответственных лицах организации).
// Возвращаемое значение:
//		Значение запрашиваемого параметра, полученное с учетом кэша.
Функция ПолучитьСУчетомКэша(Кэш, Параметр, ФизЛицо = Неопределено)
	Перем ЗначениеПараметра;
	Перем Ставки;
	
	Если Кэш.Свойство(Параметр, ЗначениеПараметра) Тогда
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
	Если Параметр = "СтавкаНалогаНаПрибыль" Тогда
		Если Метаданные.РегистрыСведений.Найти("СтавкиНалогаНаПрибыльДляВсехОрганизаций") <> Неопределено Тогда
			Если Метаданные.ОбщиеМодули.Найти("НалоговыйУчет") = Неопределено Тогда // заглушка для конфигураций без ОМ НалоговыйУчет
				НалоговыйУчет = РегламентированнаяОтчетность;
			КонецЕсли;
			СтавкаФБ = 0;
			СтавкаРФ = 0;
			СтруктураПараметров = Новый Структура("Организация, Дата", Кэш.Организация.Ссылка, Кэш.ДатаЗначения);
			НалоговыйУчет.ПолучитьСтавкуНалогаНаПрибыль(СтруктураПараметров, СтавкаФБ, СтавкаРФ, 0);
			Результат = Новый Структура("СтавкаФБ, СтавкаСубъектРФ, СтавкаМестный", СтавкаФБ * 100, СтавкаРФ * 100, 0);
		ИначеЕсли Метаданные.РегистрыСведений.Найти("СтавкиНалогаНаПрибыль") <> Неопределено Тогда
			ТаблицаРезультат = РегистрыСведений.СтавкиНалогаНаПрибыль.СрезПоследних(Кэш.ДатаЗначения, Новый Структура("Организация", Кэш.Организация.Ссылка));
			Если ТаблицаРезультат.Количество() = 0 Тогда
				Результат = Неопределено;
			Иначе
				Результат = ТаблицаРезультат[0];
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли Параметр = "ЮрАдресОрганизации" Тогда
		ЭлементЮрАдрес = ?(ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ", Справочники.ВидыКонтактнойИнформации.ЮрАдресУчреждения, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
		Данные = Новый Структура("Объект, Тип, Вид", Кэш.Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, ЭлементЮрАдрес);
		Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателе" Тогда
		Если ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ" ИЛИ ИДКонфигурации() = "ЗБУ" Тогда
			Результат = Неопределено;
		ИначеЕсли Кэш.Организация.Метаданные().Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
			Результат = Новый Массив;
			Результат.Добавить(Новый Структура("ФизическоеЛицо", Кэш.Организация.ИндивидуальныйПредприниматель));
		Иначе
			Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ИндивидуальныйПредприниматель);
			Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОРуководителе" Тогда
		Если ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ" Тогда
			Данные = Новый Структура("Учреждение, ВидОтветственногоЛица", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			Результат = РегистрыСведений.ОтветственныеЛицаУчреждений.СрезПоследних(Кэш.ДатаЗначения, Данные);
		Иначе
			Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
			Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОБухгалтере" Тогда
		Если ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ" Тогда
			Данные = Новый Структура("Учреждение, ВидОтветственногоЛица", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			Результат = РегистрыСведений.ОтветственныеЛицаУчреждений.СрезПоследних(Кэш.ДатаЗначения, Данные);
		Иначе
			Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОбИсполнителе" Тогда
		Если ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ" Тогда
			Если Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("Исполнитель") <> Неопределено Тогда
				Данные = Новый Структура("Учреждение, ВидОтветственногоЛица", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
			Иначе
				Данные = Новый Структура("Учреждение, ВидОтветственногоЛица", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			КонецЕсли;
			Результат = РегистрыСведений.ОтветственныеЛицаУчреждений.СрезПоследних(Кэш.ДатаЗначения, Данные);
		Иначе
			Если Метаданные.Перечисления.ОтветственныеЛицаОрганизаций.ЗначенияПеречисления.Найти("Исполнитель") <> Неопределено Тогда
				Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Исполнитель);
			Иначе
				Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);
			КонецЕсли;
			Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОУполномоченномПредставителе" Тогда
		Если ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ" Тогда
			Результат = Неопределено;
		Иначе
			Данные = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо", Кэш.Организация.Ссылка, Перечисления.ОтветственныеЛицаОрганизаций.Уполномоченныйпредставитель);
			Результат = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Данные);
		КонецЕсли;
	ИначеЕсли Параметр = "ТелефонОрганизации" Тогда
		Если Кэш.ПБОЮЛ Тогда
			Если СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонФизЛицаСлужебный") Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаСлужебный;
			ИначеЕсли СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонФизЛицаДомашний") Тогда
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний;
			Иначе
				ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица;
			КонецЕсли;
			Данные = Новый Структура("Объект, Тип, Вид", Кэш.Организация.ИндивидуальныйПредприниматель, Перечисления.ТипыКонтактнойИнформации.Телефон, ВидКонтактнойИнформации);
			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		Иначе
			ЭлементТелефон = ?(ИДКонфигурации() = "ББУ" ИЛИ ИДКонфигурации() = "БГУ", Справочники.ВидыКонтактнойИнформации.ТелефонУчреждения, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
			Данные = Новый Структура("Объект, Тип, Вид", Кэш.Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, ЭлементТелефон);
			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		КонецЕсли;
	ИначеЕсли Параметр = "УчетнаяПолитикаНалоговыйУчет" Тогда
		ИдКонф = ИДКонфигурации();
		Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
			Результат = Неопределено;
		ИначеЕсли ИдКонф = "БП" ИЛИ ИдКонф = "БПКОРП" ИЛИ ИдКонф = "БАУКОРП" ИЛИ ИдКонф = "БАУ" Тогда
			Результат = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(Кэш.ДатаЗначения, Новый Структура("Организация", Кэш.Организация.Ссылка));
		ИначеЕсли ИдКонф = "УПП" ИЛИ ИдКонф = "КА" Тогда
			ПризнакОтказа = Ложь;
			ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Кэш.ДатаЗначения, ПризнакОтказа, Кэш.Организация.Ссылка, "Нал", Ложь);
			Результат = ?(ПризнакОтказа, Неопределено, ПараметрыУчетнойПолитики);
		Иначе
			Результат = РегистрыСведений.УчетнаяПолитикаНалоговыйУчет.СрезПоследних(Кэш.ДатаЗначения, Новый Структура("Организация", Кэш.Организация.Ссылка));
		КонецЕсли;
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОРуководителеПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОБухгалтереПаспортныеДанные" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеПаспортныеДанные" Тогда
		
		Результат = ПолучитьУдЛичн(ФизЛицо, Кэш.ДатаЗначения);
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдрес" 
		ИЛИ Параметр = "СведенияОРуководителеАдрес" 
		ИЛИ Параметр = "СведенияОБухгалтереАдрес" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеАдрес" Тогда
		
		Данные = Новый Структура("Объект, Тип, Вид", ФизЛицо, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
		Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеАдресПрописки" Тогда
		
		ИдКонф = ИДКонфигурации();
		Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" ИЛИ ИдКонф = "ЗБУ" Тогда
			Результат = Неопределено;
		Иначе
			Данные = Новый Структура("Объект, Тип, Вид", ФизЛицо, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		КонецЕсли;
		
	ИначеЕсли Параметр = "СведенияОбИндивидуальномПредпринимателеГражданство" 
		ИЛИ Параметр = "СведенияОРуководителеГражданство" 
		ИЛИ Параметр = "СведенияОБухгалтереГражданство" 
		ИЛИ Параметр = "СведенияОУполномоченномПредставителеГражданство" Тогда
		
		ИдКонф = ИДКонфигурации();
		Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" ИЛИ ИдКонф = "ЗБУ" Тогда
			Результат = Справочники.КлассификаторСтранМира.РОССИЯ;
		Иначе
			Результат = ПолучитьГражданство(ФизЛицо, Кэш.ДатаЗначения);
		КонецЕсли;
		
	КонецЕсли;
				
	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение адреса в формате "9 запятых" по переданной в качестве параметра записи
// регистра сведений КонтактнаяИнформация.
// Параметры:
//		Запись - ссылка на запись регистра сведений КонтактнаяИнформация.
// Возвращаемое значение:
//		Строка - адрес в формате "9 запятых"
Функция АдресВФормате9Запятых(Запись)
	
	АдресБезКодастраны = СокрЛП(Запись.Поле1) + "," + СокрЛП(Запись.Поле2) + "," + СокрЛП(Запись.Поле3) + "," + 
						 СокрЛП(Запись.Поле4) + "," + СокрЛП(Запись.Поле5) + "," + СокрЛП(Запись.Поле6) + "," + 
						 СокрЛП(Запись.Поле7) + "," + СокрЛП(Запись.Поле8) + "," + СокрЛП(Запись.Поле9);
						
    //Дополнительные реквизиты для корректного представления адреса в формах						
	Если Запись.Свойство("ТипДома") И Запись.Свойство("ТипКорпуса") И Запись.Свойство("ТипКвартиры") Тогда
		АдресБезКодастраны = АдресБезКодастраны + "," + ?(СокрЛП(Запись.Поле7) = "", "", СокрЛП(Запись.ТипДома)) + ","
													  + ?(СокрЛП(Запись.Поле8) = "", "", СокрЛП(Запись.ТипКорпуса)) + ","
													  + ?(СокрЛП(Запись.Поле9) = "", "", СокрЛП(Запись.ТипКвартиры));
	КонецЕсли;												  
	
	Если АдресБезКодаСтраны = ",,,,,,,,,,," Тогда
		Возврат ",,,,,,,,,";
	Иначе
		Возврат "643," + АдресБезКодаСтраны;
	КонецЕсли;
	
КонецФункции

// Функция возвращает пользовательское представление адреса в формате "9 запятых" по переданному в качестве
// параметра внутреннему представлению.
// Параметры:
//		АдресВФормате9Запятых - строка, внутренне представление адреса в формате "9 запятых".
// Возвращаемое значение:
//		Строка - пользовательское представление адреса в формате "9 запятых".
//		АнализироватьРегион - если Истина, то анализируется переданный регион, на предмет
//				             содержания цифр в коде региона, если цифры есть то вместо них
//				             подставляется текст региона, если не цифры, то остается как есть.
//				             если Ложь, то регион не анализируется.
//
Функция ПредставлениеАдресаВФормате9Запятых(Знач АдресВФормате9Запятых, АнализироватьРегион = Ложь) Экспорт
	
	Если (СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 И СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 12) ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда
		Возврат АдресВФормате9Запятых;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = Найти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	ТекПредставление = "";
	
	ТипДома     = "дом";
    Если КоличествоЗапятых > 9 Тогда
		ТипДома = ?(ПустаяСтрока(СоставляющиеАдреса[10]), ТипДома, СоставляющиеАдреса[10]);
	КонецЕсли;	
	ТипКорпуса  = "корпус";
    Если КоличествоЗапятых > 10 Тогда
		ТипКорпуса = ?(ПустаяСтрока(СоставляющиеАдреса[11]), ТипКорпуса, СоставляющиеАдреса[11]);
	КонецЕсли;	
	ТипКвартиры = "кв.";
    Если КоличествоЗапятых > 11 Тогда
		ТипКвартиры = ?(ПустаяСтрока(СоставляющиеАдреса[12]), ТипКвартиры, СоставляющиеАдреса[12]);
	КонецЕсли;	
	
	Если СокрЛП(СоставляющиеАдреса[1]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[1]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[2]) <> "" Тогда
		Регион = СокрЛП(СоставляющиеАдреса[2]);
		Если АнализироватьРегион Тогда
			Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Регион) Тогда
				Регион = ПолучитьНазваниеРегионаПоКоду(Регион);
			КонецЕсли;
		КонецЕсли;

		ТекПредставление = ТекПредставление + ", " + Регион;
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[3]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[3]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[4]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[4]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[5]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[5]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[6]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + СокрЛП(СоставляющиеАдреса[6]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[7]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипДома + " № " + СокрЛП(СоставляющиеАдреса[7]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[8]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипКорпуса + " " + СокрЛП(СоставляющиеАдреса[8]);
	КонецЕсли;

	Если СокрЛП(СоставляющиеАдреса[9]) <> "" Тогда
		ТекПредставление = ТекПредставление + ", " + ТипКвартиры + " " + СокрЛП(СоставляющиеАдреса[9]);
	КонецЕсли;

	Если СтрДлина(ТекПредставление) > 2 Тогда
		ТекПредставление = Сред(ТекПредставление, 3);
	КонецЕсли;
	
	Возврат ТекПредставление;
	
КонецФункции
		
// Функция возвращает представление адреса в формате "9 запятых", необходимое для выгрузки, по переданному в качестве
// параметра внутреннему представлению.
// Параметры:
//		АдресВФормате9Запятых - строка, внутренне представление адреса в формате "9 запятых".
// Возвращаемое значение:
//		Строка - представление адреса в формате "9 запятых", необходимое для выгрузки.
Функция ПредставлениеАдресаДляВыгрузки(Знач АдресВФормате9Запятых) Экспорт
	
	Если (СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 9 И СтрЧислоВхождений(АдресВФормате9Запятых, ",") <> 12) ИЛИ (Лев(АдресВФормате9Запятых, 3) <> "643" И Лев(АдресВФормате9Запятых, 3) <> "999") Тогда
		Возврат АдресВФормате9Запятых;
	КонецЕсли;
	
	КопияАдреса = АдресВФормате9Запятых;
	
	ПоследняяКоордината = 0;
	СоставляющиеАдреса = Новый Массив;
	КоординатыЗапятых = Новый Массив;
	Для Сч = 1 По 12 Цикл
		КоординатаЗапятой = Найти(КопияАдреса, ",");
		Если КоординатаЗапятой > 0 Тогда
			КоординатыЗапятых.Добавить(ПоследняяКоордината + КоординатаЗапятой);
			ПоследняяКоордината = ПоследняяКоордината + КоординатаЗапятой;
			КопияАдреса = Сред(КопияАдреса, КоординатаЗапятой + 1);
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	КоличествоЗапятых = КоординатыЗапятых.Количество();

	СоставляющиеАдреса.Добавить(СокрЛП(Лев(АдресВФормате9Запятых, КоординатыЗапятых[0] - 1)));
	Для Сч = 0 По КоличествоЗапятых - 2 Цикл
		СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[Сч] + 1, КоординатыЗапятых[Сч + 1] - (КоординатыЗапятых[Сч] + 1))));
	КонецЦикла;
	СоставляющиеАдреса.Добавить(СокрЛП(Сред(АдресВФормате9Запятых, КоординатыЗапятых[КоличествоЗапятых - 1] + 1)));
	
	КодРегиона = Формат(КодРегионаПоНазванию(СоставляющиеАдреса[2]), "ЧЦ=2; ЧН=; ЧВН=");
	Возврат ВРЕГ(СоставляющиеАдреса[0] + "," + СоставляющиеАдреса[1] + "," + ?(ПустаяСтрока(КодРегиона), Лев(СоставляющиеАдреса[2], 2), КодРегиона) + "," + 
			СоставляющиеАдреса[3] + "," + СоставляющиеАдреса[4] + "," + СоставляющиеАдреса[5] + "," + 
			СоставляющиеАдреса[6] + "," + СоставляющиеАдреса[7] + "," + СоставляющиеАдреса[8] + "," +
			СоставляющиеАдреса[9]);
	
КонецФункции

// Извлекает сведения об организации по списку, переданному в параметре.
// 
// Параметры:
//  Показатели     - Список значений. Содержит в виде представлений перечень 
//                   сведений, которые надо получить. 
//                   
Функция ПолучитьСведенияОбОрганизации(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	//Ставки = Новый Структура("Организация", Организация);
	
	Если Организация = Неопределено ИЛИ Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации") Тогда
		Возврат ОргСведения;
	КонецЕсли;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = РабочаяДата;
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ИдКонф = ИДКонфигурации();
	ПБОЮЛ = ЭтоПБОЮЛ(Организация);
	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);
	
	ДомашнийТелефонФизЛица = ?(СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонФизЛицаДомашний"), Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
	АдресЭлектроннойПочтыФизЛица = ?(СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "EmailФизЛица"), Справочники.ВидыКонтактнойИнформации.EmailФизЛица, Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя);
	
	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("СтавкаПрибФед");
		СписокПоказателей.Добавить("СтавкаПрибРесп");
		СписокПоказателей.Добавить("СтавкаПрибМест");
		СписокПоказателей.Добавить("ТипНП");
		СписокПоказателей.Добавить("КатНП");
		СписокПоказателей.Добавить("НаимНО");
		СписокПоказателей.Добавить("КодНО");
		СписокПоказателей.Добавить("ОснВидДеят");
		СписокПоказателей.Добавить("ОКВЭД");
		СписокПоказателей.Добавить("ОГРН");
		СписокПоказателей.Добавить("ОКАТО");
		СписокПоказателей.Добавить("РегНомПФР");
		СписокПоказателей.Добавить("КодОрганаПФР");
		СписокПоказателей.Добавить("ОКПО");
		СписокПоказателей.Добавить("ОргПравФорм");
		СписокПоказателей.Добавить("ОКОПФ");
		СписокПоказателей.Добавить("ФормСобств");
		СписокПоказателей.Добавить("ОКФС");
		СписокПоказателей.Добавить("ДатаРегистрации");
		СписокПоказателей.Добавить("АдрПочт");
		СписокПоказателей.Добавить("АдрФакт");
		СписокПоказателей.Добавить("СвидСН");
		СписокПоказателей.Добавить("СвидДВ");
		СписокПоказателей.Добавить("СвидНО");
		СписокПоказателей.Добавить("СвидНОКод");
		СписокПоказателей.Добавить("НаимЮЛПол");
		СписокПоказателей.Добавить("ИННЮЛ");
		СписокПоказателей.Добавить("КППЮЛ");
		СписокПоказателей.Добавить("АдрЮР");
		СписокПоказателей.Добавить("ОргИндекс");
		СписокПоказателей.Добавить("ОргСубъект");
		СписокПоказателей.Добавить("ОргКодСубъект");
		СписокПоказателей.Добавить("ОргРайон");
		СписокПоказателей.Добавить("ОргГород");
		СписокПоказателей.Добавить("ОргНПункт");
		СписокПоказателей.Добавить("ОргУлица");
		СписокПоказателей.Добавить("ОргДом");
		СписокПоказателей.Добавить("ОргКорпус");
		СписокПоказателей.Добавить("ОргКвартира");
		СписокПоказателей.Добавить("НаимОППол");
		СписокПоказателей.Добавить("КППОП");
		СписокПоказателей.Добавить("АдрОП");
		СписокПоказателей.Добавить("ИндексОП");
		СписокПоказателей.Добавить("СубъектОП");
		СписокПоказателей.Добавить("КодСубъектОП");
		СписокПоказателей.Добавить("РайонОП");
		СписокПоказателей.Добавить("ГородОП");
		СписокПоказателей.Добавить("НПунктОП");
		СписокПоказателей.Добавить("УлицаОП");
		СписокПоказателей.Добавить("ДомОП");
		СписокПоказателей.Добавить("КорпусОП");
		СписокПоказателей.Добавить("КвартираОП");
		СписокПоказателей.Добавить("КодТелАдрОП");
		СписокПоказателей.Добавить("ТелАдрОП");
		СписокПоказателей.Добавить("ФаксАдрОП");
		СписокПоказателей.Добавить("НаимОИОПол");
		СписокПоказателей.Добавить("ИННИО");
		СписокПоказателей.Добавить("КППИО");
		СписокПоказателей.Добавить("АдрОтдИОРФ");
		СписокПоказателей.Добавить("ИндексОИО");
		СписокПоказателей.Добавить("СубъектОИО");
		СписокПоказателей.Добавить("КодСубъектОИО");
		СписокПоказателей.Добавить("РайонОИО");
		СписокПоказателей.Добавить("ГородОИО");
		СписокПоказателей.Добавить("НПунктОИО");
		СписокПоказателей.Добавить("УлицаОИО");
		СписокПоказателей.Добавить("ДомОИО");
		СписокПоказателей.Добавить("КорпусОИО");
		СписокПоказателей.Добавить("КвартираОИО");
		СписокПоказателей.Добавить("КодИОСтрРег");
		СписокПоказателей.Добавить("НаимИОПол");
		СписокПоказателей.Добавить("СтрИО");
		СписокПоказателей.Добавить("КодСтрИО");
		СписокПоказателей.Добавить("СтрПостИО");
		СписокПоказателей.Добавить("КодСтрПостИО");
		СписокПоказателей.Добавить("АдрИО");
		СписокПоказателей.Добавить("ФИО");
		СписокПоказателей.Добавить("ФИООтпрФЛ");
		СписокПоказателей.Добавить("ИННФЛ");
		СписокПоказателей.Добавить("СНИЛС");
		СписокПоказателей.Добавить("ДатаРожд");
		СписокПоказателей.Добавить("МестоРожд");
		СписокПоказателей.Добавить("Пол");
		СписокПоказателей.Добавить("Гражд");
		СписокПоказателей.Добавить("ГраждСтрана");
		СписокПоказателей.Добавить("КодУдЛичн");
		СписокПоказателей.Добавить("ВидУдЛичн");
		СписокПоказателей.Добавить("ОрганВыданУдЛичн");
		СписокПоказателей.Добавить("СерияУдЛичн");
		СписокПоказателей.Добавить("НомерУдЛичн");
		СписокПоказателей.Добавить("ДатаУдЛичн");
		СписокПоказателей.Добавить("АдрПрописки");
		СписокПоказателей.Добавить("АдрМЖ");
		СписокПоказателей.Добавить("ИндексМЖ");
		СписокПоказателей.Добавить("СубъектМЖ");
		СписокПоказателей.Добавить("КодСубъектМЖ");
		СписокПоказателей.Добавить("РайонМЖ");
		СписокПоказателей.Добавить("ГородМЖ");
		СписокПоказателей.Добавить("НПунктМЖ");
		СписокПоказателей.Добавить("УлицаМЖ");
		СписокПоказателей.Добавить("ДомМЖ");
		СписокПоказателей.Добавить("КорпусМЖ");
		СписокПоказателей.Добавить("КвартираМЖ");
		СписокПоказателей.Добавить("ТелСлуж");
		СписокПоказателей.Добавить("ТелДом");
		СписокПоказателей.Добавить("ФИОРук");
		СписокПоказателей.Добавить("ИННРук");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождРук");
		СписокПоказателей.Добавить("ПолРук");
		СписокПоказателей.Добавить("ГраждРук");
		СписокПоказателей.Добавить("ГраждСтранаРук");
		СписокПоказателей.Добавить("ТелРук");
		СписокПоказателей.Добавить("КодУдЛичнРук");
		СписокПоказателей.Добавить("ВидУдЛичнРук");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнРук");
		СписокПоказателей.Добавить("СерияУдЛичнРук");
		СписокПоказателей.Добавить("НомерУдЛичнРук");
		СписокПоказателей.Добавить("ДатаУдЛичнРук");
		СписокПоказателей.Добавить("АдрМЖРукРФ");
		СписокПоказателей.Добавить("ИндексМЖРук");
		СписокПоказателей.Добавить("СубъектМЖРук");
		СписокПоказателей.Добавить("КодСубъектМЖРук");
		СписокПоказателей.Добавить("РайонМЖРук");
		СписокПоказателей.Добавить("ГородМЖРук");
		СписокПоказателей.Добавить("НПунктМЖРук");
		СписокПоказателей.Добавить("УлицаМЖРук");
		СписокПоказателей.Добавить("ДомМЖРук");
		СписокПоказателей.Добавить("КорпусМЖРук");
		СписокПоказателей.Добавить("КвартираМЖРук");
		СписокПоказателей.Добавить("ФИОБух");
		СписокПоказателей.Добавить("ФИООтпр");
		СписокПоказателей.Добавить("ИННБух");
		СписокПоказателей.Добавить("ДатаРождРук");
		СписокПоказателей.Добавить("МестоРождБух");
		СписокПоказателей.Добавить("ПолБух");
		СписокПоказателей.Добавить("ПолУпПред");
		СписокПоказателей.Добавить("ГраждБух");
		СписокПоказателей.Добавить("ГраждУпПред");
		СписокПоказателей.Добавить("ГраждСтранаБух");
		СписокПоказателей.Добавить("ГраждСтранаУпПред");
		СписокПоказателей.Добавить("ТелБух");
		СписокПоказателей.Добавить("ТелОтпр");
		СписокПоказателей.Добавить("КодУдЛичнБух");
		СписокПоказателей.Добавить("ВидУдЛичнБух");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнБух");
		СписокПоказателей.Добавить("СерияУдЛичнБух");
		СписокПоказателей.Добавить("НомерУдЛичнБух");
		СписокПоказателей.Добавить("ДатаУдЛичнБух");
		СписокПоказателей.Добавить("АдрМЖБухРФ");
		СписокПоказателей.Добавить("ИндексМЖБух");
		СписокПоказателей.Добавить("СубъектМЖБух");
		СписокПоказателей.Добавить("КодСубъектМЖБух");
		СписокПоказателей.Добавить("РайонМЖБух");
		СписокПоказателей.Добавить("ГородМЖБух");
		СписокПоказателей.Добавить("НПунктМЖБух");
		СписокПоказателей.Добавить("УлицаМЖБух");
		СписокПоказателей.Добавить("ДомМЖБух");
		СписокПоказателей.Добавить("КорпусМЖБух");
		СписокПоказателей.Добавить("КвартираМЖБух");
		СписокПоказателей.Добавить("ФИОУпПред");
		СписокПоказателей.Добавить("ИННУпПред");
		СписокПоказателей.Добавить("ТелУпПред");
		СписокПоказателей.Добавить("КодУдЛичнУпПред");
		СписокПоказателей.Добавить("ВидУдЛичнУпПред");
		СписокПоказателей.Добавить("ОрганВыданУдЛичнУпПред");
		СписокПоказателей.Добавить("СерияУдЛичнУпПред");
		СписокПоказателей.Добавить("НомерУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаУдЛичнУпПред");
		СписокПоказателей.Добавить("ДатаРождУпПред");
		СписокПоказателей.Добавить("АдрМЖУпПредРФ");
		СписокПоказателей.Добавить("МестоРождУпПред");
		СписокПоказателей.Добавить("ИндексМЖУпПред");
		СписокПоказателей.Добавить("СубъектМЖУпПред");
		СписокПоказателей.Добавить("КодСубъектМЖУпПред");
		СписокПоказателей.Добавить("РайонМЖУпПред");
		СписокПоказателей.Добавить("ГородМЖУпПред");
		СписокПоказателей.Добавить("НПунктМЖУпПред");
		СписокПоказателей.Добавить("УлицаМЖУпПред");
		СписокПоказателей.Добавить("ДомМЖУпПред");
		СписокПоказателей.Добавить("КорпусМЖУпПред");
		СписокПоказателей.Добавить("КвартираМЖУпПред");
		СписокПоказателей.Добавить("ФаксИсп");
		СписокПоказателей.Добавить("ДолжнОтпр");
		СписокПоказателей.Добавить("СтавкаРефинансирования");
		СписокПоказателей.Добавить("ДатаПереходаНаУСН");
		СписокПоказателей.Добавить("БанкСчетНомер");
		СписокПоказателей.Добавить("БанкСчетНаимБанка");
		СписокПоказателей.Добавить("БанкСчетКоррСчетБанка");
		СписокПоказателей.Добавить("БанкСчетБИКБанка");
		СписокПоказателей.Добавить("РегистрационныйНомерФСС");
		СписокПоказателей.Добавить("КодОКОНХ");
		СписокПоказателей.Добавить("СтраховойТариф");
		СписокПоказателей.Добавить("ТелОрганизации");
		СписокПоказателей.Добавить("ФаксОрганизации");
		СписокПоказателей.Добавить("ОбъектНалогообложенияУСН");
		СписокПоказателей.Добавить("НаимГоловнОрг");
		СписокПоказателей.Добавить("КППГоловнОрг");
		СписокПоказателей.Добавить("ФИОИсп");
		СписокПоказателей.Добавить("ДолжнИсп");
		СписокПоказателей.Добавить("ТелИсп");
		СписокПоказателей.Добавить("АдресЭлПочтыИсп");

	ИначеЕсли ТипЗнч(СписокПоказателей) = Тип("Строка") Тогда
		
		СписокПоказателейСтрока = Строка(СписокПоказателей);
		СписокПоказателей = Новый Массив;
		ВхождениеЗапятой = Найти(СписокПоказателейСтрока, ",");
		Пока ВхождениеЗапятой <> 0 Цикл
			ИмяПоказателя = СокрЛП(Лев(СписокПоказателейСтрока, ВхождениеЗапятой - 1));
			СписокПоказателейСтрока = Сред(СписокПоказателейСтрока, ВхождениеЗапятой + 1);
			Если ПустаяСтрока(ИмяПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			СписокПоказателей.Добавить(ИмяПоказателя);
			ВхождениеЗапятой = Найти(СписокПоказателейСтрока, ",");
		КонецЦикла;
		ИмяПоказателя = СокрЛП(СписокПоказателейСтрока);
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			СписокПоказателей.Добавить(ИмяПоказателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "СтавкаПрибФед" Тогда
			
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено Тогда
				Значение = Ставки.СтавкаФБ;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "СтавкаПрибРесп" Тогда
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено Тогда
				Значение = Ставки.СтавкаСубъектРФ;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтавкаПрибМест" Тогда
			Ставки = ПолучитьСУчетомКэша(Кэш, "СтавкаНалогаНаПрибыль");
			Если Ставки <> Неопределено Тогда
				Значение = Ставки.СтавкаМестный;
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТипНП" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = ?(Организация.ГоловнаяОрганизация.Пустая(), 1, 2);
			ИначеЕсли Организация.ИностраннаяОрганизация Тогда
				Значение = 5;
			Иначе
				Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
					Если ПБОЮЛ Тогда
						Значение = 3;
					Иначе
						Значение = 1;
					КонецЕсли;
				Иначе
					Значение = 2;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КатНП" Тогда
			
			Значение = "01";
			
		ИначеЕсли Имяпоказателя = "НаимНО" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = Организация.НаименованиеИФНС;
			Иначе
				Значение = Организация.НаименованиеИМНС;
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "КодНО" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = Организация.КодИФНС;
			Иначе
				Значение = Организация.КодИМНС;
			КонецЕсли;
			
		ИначеЕсли Имяпоказателя = "ОснВидДеят" Тогда
			
			Значение = Организация.НаименованиеОКВЭД;
			
		ИначеЕсли Имяпоказателя = "ОКВЭД" Тогда
			
			Значение = Организация.КодОКВЭД;
			
		ИначеЕсли ИмяПоказателя	= "ОГРН" Тогда
			
			Значение = Организация.ОГРН;
			
		ИначеЕсли ИмяПоказателя = "ОКАТО" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				МетаданныеРеквизит = Метаданные.Справочники.Организации.Реквизиты.Найти("КодОКАТО");
				
				Если МетаданныеРеквизит = Неопределено Тогда
					Значение = "";
				ИначеЕсли МетаданныеРеквизит.Тип.СодержитТип(Тип("Строка")) Тогда
					Значение = СокрЛП(Организация.КодОКАТО);
				Иначе
					Значение = СокрЛП(Организация.КодОКАТО.Код);
				КонецЕсли;
				
			Иначе
				МетаданныеРеквизит = Метаданные.Справочники.Организации.Реквизиты.Найти("КодПоОКАТО");
				
				Если МетаданныеРеквизит = Неопределено Тогда
					Значение = "";
				ИначеЕсли МетаданныеРеквизит.Тип.СодержитТип(Тип("Строка")) Тогда
					Значение = СокрЛП(Организация.КодПоОКАТО);
				Иначе
					Значение = СокрЛП(Организация.КодПоОКАТО.Код);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегНомПФР" Тогда
			
			Значение = Организация.РегистрационныйНомерПФР;
			
		ИначеЕсли ИмяПоказателя = "КодОрганаПФР" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("КодОрганаПФР") <> Неопределено Тогда
				Значение = СокрЛП(Организация.КодОрганаПФР);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОКПО" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = Организация.КодОКПО;
			Иначе
				Значение = Организация.КодПоОКПО;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргПравФорм" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение  = Организация.КодКОПФ.Наименование;
			Иначе
				Значение  = Организация.НаименованиеОКОПФ;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОКОПФ" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = Организация.КодКОПФ.Код;
			Иначе
				Значение  = Организация.КодОКОПФ;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФормСобств" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = Организация.НаименованиеКФС;
			Иначе
				Значение = Организация.НаименованиеОКФС;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОКФС" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = Организация.КодКФС;
			Иначе
				Значение = Организация.КодОКФС;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РегистрационныйНомерФСС" Тогда
			
			Значение = Организация.РегистрационныйНомерФСС;
			
		ИначеЕсли ИмяПоказателя = "КодОКОНХ" Тогда
			
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = "";
			Иначе
				Значение = Организация.КодОКОНХ;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРегистрации" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("ДатаРегистрации") <> Неопределено Тогда
				Значение = Организация.ДатаРегистрации;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтраховойТариф" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" Тогда
				Значение = 0;
			Иначе
				Результат = РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.СрезПоследних(ДатаЗначения, Новый Структура("Организация", Организация.Ссылка));
				Если Результат.Количество() > 0 Тогда
					Значение = Результат[0].Ставка;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПочт" Тогда
			
			ИмяПредопределенного = ?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", Справочники.ВидыКонтактнойИнформации.ПочтАдресУчреждения, Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
			Данные = Новый Структура("Объект, Тип, Вид",Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

			Если Результат <> Неопределено Тогда
				Значение = АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрПочт" Тогда
			
			ИмяПредопределенного = ?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", Справочники.ВидыКонтактнойИнформации.ПочтАдресУчреждения, Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый);
			Данные = Новый Структура("Объект, Тип, Вид",Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);
			
			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
			
			Если Результат <> Неопределено Тогда
				Значение = ?(ИдКонф = "УПП" ИЛИ ИдКонф = "КА",				
				АдресВФормате9Запятых(Результат),
				УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Результат));
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрФакт" Тогда
			
			ИмяПредопределенного = ?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", Справочники.ВидыКонтактнойИнформации.ФактАдресУчреждения, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации);
			Данные = Новый Структура("Объект, Тип, Вид",Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, ИмяПредопределенного);

			Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

			Если Результат <> Неопределено Тогда
				Значение = АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
	
		ИначеЕсли ИмяПоказателя = "СвидСН" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоСерияНомер") <> Неопределено Тогда
				Значение = Организация.СвидетельствоСерияНомер;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидДВ" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоДатаВыдачи") <> Неопределено Тогда
				Значение = Организация.СвидетельствоДатаВыдачи;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидНО" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоНаименованиеОргана") <> Неопределено Тогда
				Значение = Организация.СвидетельствоНаименованиеОргана;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СвидНОКод" Тогда
			
			Если Метаданные.Справочники.Организации.Реквизиты.Найти("СвидетельствоКодОргана") <> Неопределено Тогда
				Значение = Организация.СвидетельствоКодОргана;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимЮЛПол" Тогда
			
			Значение = Организация.НаименованиеПолное;
			
		ИначеЕсли ИмяПоказателя = "ИННЮЛ" Тогда
			
			Значение = СокрЛП(Организация.ИНН);
			
		ИначеЕсли ИмяПоказателя = "КППЮЛ" Тогда
			
			Значение = Организация.КПП;
			
		ИначеЕсли ИмяПоказателя = "АдрЮР" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолныйАдрЮР" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = ?(ИдКонф = "УПП" ИЛИ ИдКонф = "КА",				
								АдресВФормате9Запятых(Результат),
								УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(Результат));
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;

			
		ИначеЕсли ИмяПоказателя = "ТелОрганизации" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Представление;
				//Значение = Результат.Поле3 + ?(ПустаяСтрока(Результат.Поле4), "", " (" + Результат.Поле4 + ")");
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФаксОрганизации" Тогда
			
			Если Кэш.ПБОЮЛ Тогда
				Значение = "";
			Иначе
				ИмяПредопределенного = ?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", Справочники.ВидыКонтактнойИнформации.ФаксУчреждения, Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);
				Данные = Новый Структура("Объект, Тип, Вид", Кэш.Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, ИмяПредопределенного);
				Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргИндекс" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле1;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргСубъект" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле2;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКодСубъект" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Формат(КодРегионаПоНазванию(Результат.Поле2), "ЧЦ=2; ЧВН=");//КодРегионаПоНазванию(Результат.Поле2);
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргРайон" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле3;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргГород" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле4;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргНПункт" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле5;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргУлица" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле6;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргДом" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле7;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКорпус" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле8;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОргКвартира" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = Результат.Поле9;
			Иначе
				Значение = "";
			КонецЕсли;
			
		//*************************************************************для обособленного подразделения
		ИначеЕсли ИмяПоказателя = "НаимОППол" Тогда
		
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.КПП;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = ПустойАдрес;
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле1;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле2;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Формат(КодРегионаПоНазванию(Результат.Поле2), "ЧЦ=2; ЧВН=");//КодРегионаПоНазванию(Результат.Поле2);
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле3;
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле4;
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле5;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле6;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле7;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле8;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КвартираОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле9;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодТелАдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле2;
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелАдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле3 + ?(ПустаяСтрока(Результат.Поле4), "", " (" + Результат.Поле4 + ")");
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ФаксАдрОП" Тогда
			
			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				
				Данные = Новый Структура("Объект, Тип, Вид",Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Телефон, Справочники.ВидыКонтактнойИнформации.ФаксОрганизации);

				Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле3 + ?(ПустаяСтрока(Результат.Поле4), "", " (" + Результат.Поле4 + ")");
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		//********************************************************сведения об иностранной организации
		ИначеЕсли ИмяПоказателя = "НаимОИОПол" Тогда
		
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = Организация.НаименованиеПолное;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = СокрЛП(Организация.ИНН);
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КППИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Значение = Организация.КПП;				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрОтдИОРФ" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = ПустойАдрес;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = АдресВФормате9Запятых(Результат);
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле1;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле2;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСубъектОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Формат(КодРегионаПоНазванию(Результат.Поле2), "ЧЦ=2; ЧВН=");//КодРегионаПоНазванию(Результат.Поле2);
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "РайонОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле3;
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГородОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе

				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле4;
				Иначе
					Значение = "";
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НПунктОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле5;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "УлицаОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле6;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДомОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле7;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КорпусОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле8;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КвартираОИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = "";
			Иначе
				
				Результат = ПолучитьСУчетомКэша(Кэш, "ЮрАдресОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Поле9;
				Иначе
					Значение = "";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодИОСтрРег" Тогда
			
			Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" И ИДКонф <> "ЗБУ" И Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.КодВСтранеРегистрации;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимИОПол" Тогда
			
			Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" И ИДКонф <> "ЗБУ" И Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.НаименованиеИнострОрганизации;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтрИО" Тогда
			
			Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" И ИДКонф <> "ЗБУ" И Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаРегистрации.НаименованиеПолное;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСтрИО" Тогда
			
			Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" И ИДКонф <> "ЗБУ" И Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаРегистрации.КодАльфа2;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СтрПостИО" Тогда
			
			Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" И ИДКонф <> "ЗБУ" И Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаПостоянногоМестонахождения.НаименованиеПолное;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодСтрПостИО" Тогда
			
			Если ИДКонф <> "ББУ" И ИДКонф <> "БГУ" И ИДКонф <> "ЗБУ" И Организация.ИностраннаяОрганизация Тогда
				Значение = Организация.СтранаПостоянногоМестонахождения.КодАльфа2;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрИО" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" ИЛИ НЕ Организация.ИностраннаяОрганизация Тогда
				Значение = ПустойАдрес;
			Иначе
				
				Данные = Новый Структура("Объект, Тип, Вид", Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред);

				Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		//***************************************************сведения об индивидуальном предпринимателе			
		ИначеЕсли ИмяПоказателя = "ФИО" ИЛИ ИмяПоказателя = "ФИООтпрФЛ" Тогда
			
			Если ПБОЮЛ Тогда
				Если Метаданные.Справочники.Организации.Реквизиты.Найти("ИндивидуальныйПредприниматель") <> Неопределено Тогда
					ФЛ = Организация.ИндивидуальныйПредприниматель;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = Организация.НаименованиеПолное;
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли ИДКонф = "УПП" ИЛИ ИДКонф = "КА" Тогда
					Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");
					Если Результат <> Неопределено И Результат.Количество() > 0 И Результат[0].ФизическоеЛицо <> Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо", Результат[0].ФизическоеЛицо));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					Иначе
						Значение = "";
					КонецЕсли;
				Иначе
					Значение = Организация.НаименованиеПолное; 
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННФЛ" Тогда
			
			Если ПБОЮЛ Тогда
				Значение = СокрЛП(Организация.ИНН); 
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СНИЛС" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Результат[0].ФизическоеЛицо.СтраховойНомерПФР;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРожд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = Результат[0].ФизическоеЛицо.ДатаРождения;
					КонецЕсли;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРожд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Результат[0].ФизическоеЛицо.МестоРождения;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Пол" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = 0;
					Иначе
						Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
							Значение = 2;
						ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
							Значение = 1;
						Иначе
							Значение = 0;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = 0;
				КонецЕсли;
				
			Иначе
				Значение = 0;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "Гражд" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеГражданство", Результат[0].ФизическоеЛицо);
						//Гражданство = ПолучитьГражданство(Результат[0].ФизическоеЛицо, ДатаЗначения);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;

					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтрана" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеГражданство", Результат[0].ФизическоеЛицо);
						//Гражданство = ПолучитьГражданство(Результат[0].ФизическоеЛицо, ДатаЗначения);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = Неопределено;
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.КодИМНС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.Наименование;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументКемВыдан;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументСерия;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументНомер;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичн" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустаяДата;
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = ПустаяДата;
						Иначе
							Значение = УдЛичн.ДокументДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
				
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрПрописки" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустойАдрес;
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдресПрописки", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = ПустойАдрес;
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = ПустойАдрес;
				КонецЕсли;
				
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле1;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле2;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Формат(КодРегионаПоНазванию(Результат2.Поле2), "ЧЦ=2; ЧВН=");//КодРегионаПоНазванию(Результат2.Поле2);
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле3;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле4;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле5;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле6;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле7;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле8;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖ" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателеАдрес", Результат[0].ФизическоеЛицо);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле9;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелСлуж" Тогда
			
			Если ПБОЮЛ Тогда
			
				Результат = ПолучитьСУчетомКэша(Кэш, "ТелефонОрганизации");

				Если Результат <> Неопределено Тогда
					Значение = Результат.Представление;
				Иначе
					Значение = "";
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелДом" Тогда
			
			Если ПБОЮЛ Тогда
				
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИндивидуальномПредпринимателе");

				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						
						Значение = "";
						
					Иначе
						
						Данные = Новый Структура("Объект, Тип, Вид",Результат[0].ФизическоеЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);

						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Значение = "";
					
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
			
		//******************************************************************сведения о руководителе организации
		ИначеЕсли ИмяПоказателя = "ФИОРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0][?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", "ОтветственноеЛицо", "ФизическоеЛицо")];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					ИначеЕсли ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
						Значение = СокрЛП(СокрЛП(ФЛ.Контрагент.Фамилия) + " " + СокрЛП(ФЛ.Контрагент.Имя) + " " + СокрЛП(ФЛ.Контрагент.Отчество));
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = ПустаяДата;
					Иначе
						Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						                      |	ХарактеристикиКонтрагентов.ЗначениеХарактеристики КАК ДатаРождения
						                      |ИЗ
						                      |	РегистрСведений.ХарактеристикиКонтрагентов КАК ХарактеристикиКонтрагентов
						                      |ГДЕ
						                      |	ХарактеристикиКонтрагентов.Контрагент = &Контрагент
						                      |	И ХарактеристикиКонтрагентов.ВидХарактеристики = &ВидХарактеристики");
						Запрос.УстановитьПараметр("Контрагент", ФЛ);
						Запрос.УстановитьПараметр("ВидХарактеристики", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.ДатаРождения);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() И ТипЗнч(Выборка.ДатаРождения) = Тип("Дата") Тогда
							Значение = Выборка.ДатаРождения;
						Иначе
							Значение = ПустаяДата;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = ФЛ.ДатаРождения;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "МестоРождРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						                      |	ХарактеристикиКонтрагентов.ЗначениеХарактеристики КАК МестоРождения
						                      |ИЗ
						                      |	РегистрСведений.ХарактеристикиКонтрагентов КАК ХарактеристикиКонтрагентов
						                      |ГДЕ
						                      |	ХарактеристикиКонтрагентов.Контрагент = &Контрагент
						                      |	И ХарактеристикиКонтрагентов.ВидХарактеристики = &ВидХарактеристики");
						Запрос.УстановитьПараметр("Контрагент", ФЛ);
						Запрос.УстановитьПараметр("ВидХарактеристики", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.МестоРождения);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() И ТипЗнч(Выборка.МестоРождения) = Тип("Строка") Тогда
							Значение = Выборка.МестоРождения;
						Иначе
							Значение = ПустаяДата;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Значение = ФЛ.МестоРождения;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ПолРук" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" Тогда
				Значение = 0;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = 0;
					Иначе
						Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
							Значение = 2;
						ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
							Значение = 1;
						Иначе
							Значение = 0;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГраждРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФЛ, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФЛ, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КодУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ОтветственноеЛицо.Контрагент);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.Код;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.КодИМНС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ОтветственноеЛицо.Контрагент);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.Наименование;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";								
							Иначе
								Значение = УдЛичн.ДокументВид.Наименование;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументКемВыдан;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументКемВыдан;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументСерия;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументСерия;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументНомер;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖРукРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = ПустойАдрес;
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = ПустойАдрес;
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле1;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле1;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле2;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле2;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Формат(КодРегионаПоНазванию(Результат2.Поле2), "ЧЦ=2; ЧВН=");
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Формат(КодРегионаПоНазванию(Результат2.Поле2), "ЧЦ=2; ЧВН=");
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле3;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле3;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖРук" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле4;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле4;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖРук" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле5;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле5;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖРук" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле6;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле6;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле7;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле7;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле8;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле8;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖРук" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле9;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОРуководителеАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле9;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		//*******************************************************************Сведения о главном бухгалтере
		ИначеЕсли ИмяПоказателя = "ФИОБух" ИЛИ ИмяПоказателя = "ФИООтпр" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0][?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", "ОтветственноеЛицо", "ФизическоеЛицо")];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					ИначеЕсли ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
						Значение = СокрЛП(СокрЛП(ФЛ.Контрагент.Фамилия) + " " + СокрЛП(ФЛ.Контрагент.Имя) + " " + СокрЛП(ФЛ.Контрагент.Отчество));
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					Значение = ФЛ.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = ПустаяДата;
					Иначе
						Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						                      |	ХарактеристикиКонтрагентов.ЗначениеХарактеристики КАК ДатаРождения
						                      |ИЗ
						                      |	РегистрСведений.ХарактеристикиКонтрагентов КАК ХарактеристикиКонтрагентов
						                      |ГДЕ
						                      |	ХарактеристикиКонтрагентов.Контрагент = &Контрагент
						                      |	И ХарактеристикиКонтрагентов.ВидХарактеристики = &ВидХарактеристики");
						Запрос.УстановитьПараметр("Контрагент", ФЛ);
						Запрос.УстановитьПараметр("ВидХарактеристики", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.ДатаРождения);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() И ТипЗнч(Выборка.ДатаРождения) = Тип("Дата") Тогда
							Значение = Выборка.ДатаРождения;
						Иначе
							Значение = ПустаяДата;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = ФЛ.ДатаРождения;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаРождУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					Значение = Результат[0].ФизическоеЛицо.ДатаРождения;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "МестоРождБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
						                      |	ХарактеристикиКонтрагентов.ЗначениеХарактеристики КАК МестоРождения
						                      |ИЗ
						                      |	РегистрСведений.ХарактеристикиКонтрагентов КАК ХарактеристикиКонтрагентов
						                      |ГДЕ
						                      |	ХарактеристикиКонтрагентов.Контрагент = &Контрагент
						                      |	И ХарактеристикиКонтрагентов.ВидХарактеристики = &ВидХарактеристики");
						Запрос.УстановитьПараметр("Контрагент", ФЛ);
						Запрос.УстановитьПараметр("ВидХарактеристики", ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.МестоРождения);
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() И ТипЗнч(Выборка.МестоРождения) = Тип("Строка") Тогда
							Значение = Выборка.МестоРождения;
						Иначе
							Значение = ПустаяДата;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Значение = ФЛ.МестоРождения;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "МестоРождУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат[0].ФизическоеЛицо.МестоРождения;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ПолБух" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" Тогда
				Значение = 0;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = 0;
					Иначе
						Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
							Значение = 2;
						ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
							Значение = 1;
						Иначе
							Значение = 0;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ПолУпПред" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = 0;
				Иначе
					Если Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
						Значение = 2;
					ИначеЕсли Результат[0].ФизическоеЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
						Значение = 1;
					Иначе
						Значение = 0;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = 0;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = Гражданство.Код;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ГраждСтранаБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереГражданство", ФЛ);
						Если Гражданство = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат[0].ФизическоеЛицо);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = Гражданство.Код;
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ГраждСтранаУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Гражданство = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеГражданство", Результат[0].ФизическоеЛицо);
					Если Гражданство = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = ?(ПустаяСтрока(Гражданство.НаименованиеПолное), Гражданство.Наименование, Гражданство.НаименованиеПолное);
					КонецЕсли;

				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ТелБух" ИЛИ ИмяПоказателя = "ТелОтпр" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФЛ, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФЛ, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодУдЛичнБух" Тогда

			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ОтветственноеЛицо.Контрагент);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.Код;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.КодИМНС;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ОтветственноеЛицо.Контрагент);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";
							Иначе
								Значение = УдЛичн.ДокументВид.Наименование;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", Результат[0].ФизическоеЛицо);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
								Значение = "";								
							Иначе
								Значение = УдЛичн.ДокументВид.Наименование;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументКемВыдан;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументКемВыдан;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументСерия;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументСерия;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументНомер;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФЛ = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФЛ = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					Иначе
						УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереПаспортныеДанные", ФЛ);
						Если УдЛичн = Неопределено Тогда
							Значение = "";
						Иначе
							Значение = УдЛичн.ДокументДатаВыдачи;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖБухРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = ПустойАдрес;
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = ПустойАдрес;
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = АдресВФормате9Запятых(Результат2);
						Иначе
							Значение = ПустойАдрес;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле1;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле1;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле2;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле2;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Формат(КодРегионаПоНазванию(Результат2.Поле2), "ЧЦ=2; ЧВН=");
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Формат(КодРегионаПоНазванию(Результат2.Поле2), "ЧЦ=2; ЧВН=");
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле3;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле3;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖБух" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле4;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле4;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖБух" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле5;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле5;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖБух" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле6;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле6;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле7;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле7;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле8;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле8;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖБух" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтере");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					Если НЕ ЗначениеЗаполнено(Результат[0].ОтветственноеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ОтветственноеЛицо.Контрагент);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле9;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(Результат[0].ФизическоеЛицо) Тогда
						Значение = "";
					Иначе
						Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОБухгалтереАдрес", Результат[0].ФизическоеЛицо);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Поле9;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
			
		//**********************************************Сведения об уполномоченном представителе
		ИначеЕсли ИмяПоказателя = "ФИОУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					//Значение = Результат[0].ФизическоеЛицо.Наименование;
					ФЛ = Результат[0].ФизическоеЛицо;
					Если ФЛ = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИННУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = Результат[0].ФизическоеЛицо.ИНН;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					
					Значение = "";
					
				Иначе
					
					Данные = Новый Структура("Объект, Тип, Вид",Результат[0].ФизическоеЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);

					Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Представление;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Значение = "";
				
			КонецЕсли;
				
				
		ИначеЕсли ИмяПоказателя = "КодУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ДокументВид.КодИМНС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ВидУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Если УдЛичн.ДокументВид = Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
							Значение = "";								
						Иначе
							Значение = УдЛичн.ДокументВид.Наименование;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОрганВыданУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДокументКемВыдан;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СерияУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДокументСерия;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НомерУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = "";
					Иначе
						Значение = УдЛичн.ДокументНомер;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаУдЛичнУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустаяДата;
				Иначе
					УдЛичн = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеПаспортныеДанные", Результат[0].ФизическоеЛицо);
					Если УдЛичн = Неопределено Тогда
						Значение = ПустаяДата;
					Иначе
						Значение = УдЛичн.ДокументДатаВыдачи;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = ПустаяДата;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдрМЖУпПредРФ" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = ПустойАдрес;
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = АдресВФормате9Запятых(Результат2);
					Иначе
						Значение = ПустойАдрес;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ИндексМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле1;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "СубъектМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле2;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КодСубъектМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Формат(КодРегионаПоНазванию(Результат2.Поле2), "ЧЦ=2; ЧВН=");//КодРегионаПоНазванию(Результат2.Поле2);
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "РайонМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле3;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ГородМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле4;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "НПунктМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле5;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "УлицаМЖУпПред" Тогда
				
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле6;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "ДомМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле7;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		ИначеЕсли ИмяПоказателя = "КорпусМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле8;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "КвартираМЖУпПред" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителе");

			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если Результат[0].ФизическоеЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					
					Результат2 = ПолучитьСУчетомКэша(Кэш, "СведенияОУполномоченномПредставителеАдрес", Результат[0].ФизическоеЛицо);

					Если Результат2 <> Неопределено Тогда
						Значение = Результат2.Поле9;
					Иначе
						Значение = "";
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		//прочие сведения
		ИначеЕсли ИмяПоказателя = "ФаксИсп" Тогда
			
			Значение = "";
			
		ИначеЕсли ИмяПоказателя = "ДолжнОтпр" Тогда
			
			Значение = "ГЛАВНЫЙ БУХГАЛТЕР"
			
		ИначеЕсли ИмяПоказателя = "СтавкаРефинансирования" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" Тогда
				Значение = 0;
			Иначе
				Результат = РегистрыСведений.СтавкаРефинансированияЦБ.СрезПоследних(ДатаЗначения);
				Если Результат.Количество() > 0 Тогда
					Значение = Результат[0].Размер;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДатаПереходаНаУСН" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = ПустаяДата;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					Значение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ДатаПереходаНаУСН, Результат[0].ДатаПереходаНаУСН);
				Иначе
					Значение = ПустаяДата;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ОбъектНалогообложенияУСН" Тогда
			
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = 0;
			Иначе
				Результат = ПолучитьСУчетомКэша(Кэш, "УчетнаяПолитикаНалоговыйУчет");
				Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
					ПромежуточноеЗначение = ?(ТипЗнч(Результат) = Тип("Структура"), Результат.ОбъектНалогообложенияУСН, Результат[0].ОбъектНалогообложенияУСН);
					Если ПромежуточноеЗначение = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
						Значение = 1;
					ИначеЕсли ПромежуточноеЗначение = Перечисления.ОбъектыНалогообложенияПоУСН.ДоходыМинусРасходы Тогда
						Значение = 2;
					Иначе
						Значение = 0;
					КонецЕсли;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
			
		//сведения о банковском счете организации
		ИначеЕсли ИмяПоказателя = "БанкСчетНомер" Тогда
		
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = "";
			Иначе
				БанкСчет = Организация.ОсновнойБанковскийСчет;
				Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Значение = БанкСчет.НомерСчета;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетНаимБанка" Тогда
		
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = "";
			Иначе
				БанкСчет = Организация.ОсновнойБанковскийСчет;
				Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Банк = БанкСчет.Банк;
					Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Банк.Наименование;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетКоррСчетБанка" Тогда
		
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = "";
			Иначе
				БанкСчет = Организация.ОсновнойБанковскийСчет;
				Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Банк = БанкСчет.Банк;
					Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Банк.КоррСчет;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "БанкСчетБИКБанка" Тогда
		
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" ИЛИ ИДКонф = "ЗБУ" Тогда
				Значение = "";
			Иначе
				БанкСчет = Организация.ОсновнойБанковскийСчет;
				Если БанкСчет = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
					Значение = "";
				Иначе
					Банк = БанкСчет.Банк;
					Если Банк = Справочники.Банки.ПустаяСсылка() Тогда
						Значение = "";
					Иначе
						Значение = Банк.Код;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "НаимГоловнОрг" Тогда

			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.ГоловнаяОрганизация.НаименованиеПолное;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "КППГоловнОрг" Тогда

			Если Организация.ГоловнаяОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
				Значение = "";
			Иначе
				Значение = Организация.ГоловнаяОрганизация.КПП;
			КонецЕсли;

		ИначеЕсли ИмяПоказателя = "ФИОИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				ФЛ = Результат[0][?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", "ОтветственноеЛицо", "ФизическоеЛицо")];
				Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
					Значение = "";
				Иначе
					ФЛ = Результат[0][?(ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ", "ОтветственноеЛицо", "ФизическоеЛицо")];
					Если НЕ ЗначениеЗаполнено(ФЛ) Тогда
						Значение = "";
					ИначеЕсли ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
						ФЛКонтрагент = ФЛ.Контрагент;
						Значение = СокрЛП(СокрЛП(ФЛКонтрагент.Фамилия) + " " + СокрЛП(ФЛКонтрагент.Имя) + " " + СокрЛП(ФЛКонтрагент.Отчество));
					Иначе
						ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(ДатаЗначения, Новый Структура("ФизЛицо",ФЛ));
						Если ДанныеФЛ.Количество() > 0 Тогда
							Значение = СокрЛП(СокрЛП(ДанныеФЛ[0].Фамилия) + " " + СокрЛП(ДанныеФЛ[0].Имя) + " " + СокрЛП(ДанныеФЛ[0].Отчество));
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ДолжнИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
				Значение = "ГЛАВНЫЙ БУХГАЛТЕР";
			ИначеЕсли Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если НЕ ЗначениеЗаполнено(Результат[0].Должность) Тогда
					Значение = "";
				Иначе
					Значение = СокрЛП(Результат[0].Должность.Наименование);
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "ТелИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФизЛицо = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФизЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФизЛицо = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФизЛицо, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
			
		ИначеЕсли ИмяПоказателя = "АдресЭлПочтыИсп" Тогда
			
			Результат = ПолучитьСУчетомКэша(Кэш, "СведенияОбИсполнителе");
			Если Результат <> Неопределено И Результат.Количество() > 0 Тогда
				Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
					ФизЛицо = Результат[0].ОтветственноеЛицо.Контрагент;
					Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФизЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, АдресЭлектроннойПочтыФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				Иначе
					ФизЛицо = Результат[0].ФизическоеЛицо;
					Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
						Значение = "";
					Иначе
						Данные = Новый Структура("Объект, Тип, Вид", ФизЛицо, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, АдресЭлектроннойПочтыФизЛица);
						Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
						Если Результат2 <> Неопределено Тогда
							Значение = Результат2.Представление;
						Иначе
							Значение = "";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Значение = "";
			КонецЕсли;
				
		Иначе

			Значение = "";//если вернуть строку - больше шансов угадать, так как большинство сведений - строковые
			
		КонецЕсли;

		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции // ПолучитьСведенияОбОрганизации()

#КонецЕсли

// Проверяет соответствие ИНН требованиям
// Параметры:
//		ИНН - строка - проверяемый индивидуальный номер налогоплательщика,
//		ВладелецИНН - ПеречислениеСсылка.ЮрФизЛицо - тип владельца ИНН: физлицо или юрлицо
Функция ИННСоответствуетТребованиям(Знач ИНН, Знач ТипЛица) Экспорт

	ИНН = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИНН);

	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ИНН) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Перечисления.Найти("ЮрФизЛицо") = Неопределено Тогда
		ПроверяетсяИННФизЛица = ТипЛица;
	Иначе
		ПроверяетсяИННФизЛица = (ТипЛица = Истина ИЛИ ТипЛица = Перечисления.ЮрФизЛицо.ФизЛицо);
	КонецЕсли;
	
	Если ДлинаИНН = 10  И НЕ ПроверяетсяИННФизЛица Тогда

		КонтрольнаяСумма = 0;

		Для Н = 1 По 9 Цикл

			Если 	  Н = 1 Тогда
				Множитель = 2;
			ИначеЕсли Н = 2 Тогда
				Множитель = 4;
			ИначеЕсли Н = 3 Тогда
				Множитель = 10;
			ИначеЕсли Н = 4 Тогда
				Множитель = 3;
			ИначеЕсли Н = 5 Тогда
				Множитель = 5;
			ИначеЕсли Н = 6 Тогда
				Множитель = 9;
			ИначеЕсли Н = 7 Тогда
				Множитель = 4;
			ИначеЕсли Н = 8 Тогда
				Множитель = 6;
			ИначеЕсли Н = 9 Тогда
				Множитель = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма = КонтрольнаяСумма + Цифра * Множитель;
			
		КонецЦикла; 
		
		КонтрольныйРазряд = (КонтрольнаяСумма %11) %10;
		
		Если КонтрольныйРазряд <> Число(Сред(ИНН,10,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	ИначеЕсли ДлинаИНН =12 И ПроверяетсяИННФизЛица Тогда
		
		КонтрольнаяСумма11 = 0;
		КонтрольнаяСумма12 = 0;
		
		Для Н=1 По 11 Цикл
			
			// Расчет множителя для 11-го и 12-го разрядов
			Если Н = 1 Тогда
				Множитель11 = 7;
				Множитель12 = 3;
			ИначеЕсли Н = 2 Тогда
				Множитель11 = 2;
				Множитель12 = 7;
			ИначеЕсли Н = 3 Тогда
				Множитель11 = 4;
				Множитель12 = 2;
			ИначеЕсли Н = 4 Тогда
				Множитель11 = 10;
				Множитель12 = 4;
			ИначеЕсли Н = 5 Тогда
				Множитель11 = 3;
				Множитель12 = 10;
			ИначеЕсли Н = 6 Тогда
				Множитель11 = 5;
				Множитель12 = 3;
			ИначеЕсли Н = 7 Тогда
				Множитель11 = 9;
				Множитель12 = 5;
			ИначеЕсли Н = 8 Тогда
				Множитель11 = 4;
				Множитель12 = 9;
			ИначеЕсли Н = 9 Тогда
				Множитель11 = 6;
				Множитель12 = 4;
			ИначеЕсли Н = 10 Тогда
				Множитель11 = 8;
				Множитель12 = 6;
			ИначеЕсли Н = 11 Тогда
				Множитель11 = 0;
				Множитель12 = 8;
			КонецЕсли; 
			
			Цифра = Число(Сред(ИНН,Н,1));
			КонтрольнаяСумма11 = КонтрольнаяСумма11 + Цифра * Множитель11;
			КонтрольнаяСумма12 = КонтрольнаяСумма12 + Цифра * Множитель12;
			
		КонецЦикла; 
		
		КонтрольныйРазряд11 = (КонтрольнаяСумма11 %11) %10;
		КонтрольныйРазряд12 = (КонтрольнаяСумма12 %11) %10;
		
		Если КонтрольныйРазряд11 <> Число(Сред(ИНН,11,1))
			ИЛИ КонтрольныйРазряд12 <> Число(Сред(ИНН,12,1)) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие ИНН требованиям. 
// Используется в тех случаях, когда невозможно определить тип владельца ИНН.
// Во всех остальных случаях следует использовать функцию ИННсоответствуетТребованиям(Знач ИНН, ВладелецИНН)
// Параметры:
//		ИНН - строка - проверяемый индивидуальный номер налогоплательщика
Функция ИННСоответствуетТребованиямБезТипа(Знач ИНН) Экспорт
	
	ИННСтр = СокрЛП(ИНН);
	ДлинаИНН =  СтрДлина(ИННСтр);
	
	Если ДлинаИНН = 10 Тогда
		ВладелецИННФизЛицо = Ложь;
	ИначеЕсли ДлинаИНН = 12 Тогда
		ВладелецИННФизЛицо = Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ИННСоответствуетТребованиям(ИНН, ВладелецИННФизЛицо);
	
КонецФункции

// Проверяет соответствие КПП требованиям
// Параметры:
// КПП - строка - проверяемый код причины постановки на учет
Функция КППСоответствуетТребованиям(Знач КПП) Экспорт
	
	//Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(КПП) Тогда
	//	Возврат Ложь;
	//КонецЕсли;
	
	Если СтрДлина(СтрЗаменить(Строка(КПП), "0", "1")) <> 9 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет соответствие ОГРН требованиям
// Параметры:
// ОГРН - строка - проверяемый основной государственный регистрационный номер
Функция ОГРНсоответствуетТребованиям(Знач ОГРН) Экспорт
	Попытка
		ОГРНБезВедущихНулей = Формат(ОГРН,"ЧГ=0");
	Исключение
		Возврат Ложь;
	КонецПопытки;
	ОГРН = Строка(ОГРНБезВедущихНулей);
	Если СтрДлина(ОГРН) <> 13 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;//проверка временно отключена
	КонецЕсли;
	ОГРН12 = Число(Лев(ОГРН, 12));
	Если Прав(Формат(ОГРН12%11, "ЧН=0; ЧГ=0"), 1) = Прав(ОГРН, 1) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

//Проверяет на наличие только русских букв (допускаются пробелы и дефис и некоторые спец символы)
Функция СтрокаНаписанаПоРусски(Знач СтрокаПараметр) Экспорт

	СтрокаПараметр = СокрЛП(СтрокаПараметр);	

	СписокДопустимыхЗначений = Новый Массив;
	СписокДопустимыхЗначений.Добавить(45); // "-"
	СписокДопустимыхЗначений.Добавить(46); // "."
	СписокДопустимыхЗначений.Добавить(32); // " "
	СписокДопустимыхЗначений.Добавить(48); // "0"
	СписокДопустимыхЗначений.Добавить(49); // "1"
	СписокДопустимыхЗначений.Добавить(50); // "2"
	СписокДопустимыхЗначений.Добавить(51); // "3"
	СписокДопустимыхЗначений.Добавить(52); // "4"
	СписокДопустимыхЗначений.Добавить(53); // "5"
	СписокДопустимыхЗначений.Добавить(54); // "6"
	СписокДопустимыхЗначений.Добавить(55); // "7"
	СписокДопустимыхЗначений.Добавить(56); // "8"
	СписокДопустимыхЗначений.Добавить(57); // "9"
	
	СписокДопустимыхЗначений.Добавить(1105); // "ё"
	СписокДопустимыхЗначений.Добавить(1025); // "Ё"

	Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимвола(СтрокаПараметр, Сч);
		Если ((Код < 1040) ИЛИ (Код > 1103)) И (СписокДопустимыхЗначений.Найти(Код) = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции 

//Функция возвращает информацию об ответственных лицах организации и их должностях 
Функция ОтветственныеЛицаОрганизаций(Организация, ДатаСреза, Исполнитель = Неопределено) Экспорт

	Результат = Новый Структура("Руководитель, РуководительДолжность, ГлавныйБухгалтер, Кассир, Исполнитель, ИсполнительДолжность, ОтветственныйЗаРегистры");

	ИДКонфигурации = ИДКонфигурации();
	Если Организация <> Неопределено тогда

		Если ИДКонфигурации = "ЗУП" Тогда
			
			ЗапросПоЛицам = Новый Запрос();
			ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
			ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
			ЗапросПоЛицам.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
			|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
			Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = Выборка.Должность;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
					Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;

				КонецЕсли;

			КонецЦикла;

			Если Исполнитель <> Неопределено тогда

				ЗапросПоИсполнителям = Новый Запрос();
				ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
				ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
				ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
				ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
				
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаСреза
				|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
				|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование 
				|	КОНЕЦ КАК Должность,
				|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ, РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование) КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|		&ДатаСреза,
				|		Организация = &ГоловнаяОрганизация
				|			И Сотрудник.ФизЛицо = &Исполнитель
				|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
				|ГДЕ
				|	ВЫБОР 
				|   	КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаСреза
				|            	И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|       ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
				|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
				|		КОНЕЦ = &Организация
				|	И ВЫБОР
				|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаСреза
				|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
				|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
				|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
				ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

				Если ВыборкаИсполнителей.Следующий() тогда
					Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
					Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли ИДКонфигурации = "БП" ИЛИ ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" Тогда
			ЗапросПоЛицам = Новый Запрос();
			ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
			ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
			ЗапросПоЛицам.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
			|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ, ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование) КАК ФИОПолное
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
			|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
			Выборка = ЗапросПоЛицам.Выполнить().Выбрать();

			Пока Выборка.Следующий() Цикл

				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = Выборка.Должность;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
					Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;

				КонецЕсли;

			КонецЦикла;

			Если Исполнитель <> Неопределено тогда

				ЗапросПоИсполнителям = Новый Запрос();
				ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
				ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
				ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
				ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
				
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ
				|	РаботникиОрганизацииСрезПоследних.Должность.Наименование КАК Должность,
				|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ, РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование) КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|		&ДатаСреза,
				|		Организация = &ГоловнаяОрганизация
				|			И Сотрудник.ФизЛицо = &Исполнитель
				|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
				|ГДЕ
				|	РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение = &Организация";
				ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

				Если ВыборкаИсполнителей.Следующий() тогда
					Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
					Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
				КонецЕсли;

			КонецЕсли;
			
		ИначеЕсли ИДКонфигурации = "ББУ" ИЛИ ИДКонфигурации = "БГУ" Тогда
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Фамилия,
			|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Имя,
			|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Отчество,
			|	ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Фамилия + ВЫБОР
			|			КОГДА ПОДСТРОКА(ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Имя, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Имя, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ + ВЫБОР
			|			КОГДА ПОДСТРОКА(ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Отчество, 1, 1) <> """"
			|				ТОГДА "" "" + ПОДСТРОКА(ОтветственныеЛицаУчрежденийСрезПоследних.ОтветственноеЛицо.Контрагент.Отчество, 1, 1) + "".""
			|			ИНАЧЕ """"
			|		КОНЕЦ КАК ФИОПолное,
			|	ОтветственныеЛицаУчрежденийСрезПоследних.ВидОтветственногоЛица
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаУчреждений.СрезПоследних(&ДатаСреза, ) КАК ОтветственныеЛицаУчрежденийСрезПоследних
			|ГДЕ
			|	ОтветственныеЛицаУчрежденийСрезПоследних.Учреждение = &Учреждение");
			Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
			Запрос.УстановитьПараметр("Учреждение", Организация);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ВидОтветственногоЛица = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            = Выборка.ФИОПолное;
				ИначеЕсли Выборка.ВидОтветственногоЛица = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;
				ИначеЕсли Выборка.ВидОтветственногоЛица = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
		
			Если ИДКонфигурации = "УПП" ИЛИ ИДКонфигурации = "КА" Тогда
				ЗапросПоЛицам = Новый Запрос();
				ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
				ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
				ЗапросПоЛицам.УстановитьПараметр("ПризнакФизЛица",   Перечисления.ЮрФизЛицо.ФизЛицо);
				
				ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	ВЫБОР
				                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
				                      |			ТОГДА Организации.ИндивидуальныйПредприниматель.Наименование
				                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ
				                      |	КОНЕЦ КАК ФИОПолное
				                      |ИЗ
				                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
				                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
				                      |		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.ИндивидуальныйПредприниматель
				                      |			И (Организации.Ссылка = &Организация)
				                      |			И (Организации.ЮрФизЛицо = &ПризнакФизЛица)";
				
				Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = "";
				КонецЦикла;
				
				ЗапросПоЛицам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
				                      |	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
				                      |	ВЫБОР
				                      |		КОГДА ФИОФизЛицСрезПоследних.ФизЛицо ЕСТЬ NULL 
				                      |			ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
				                      |		ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ + ВЫБОР
				                      |				КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				                      |					ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				                      |				ИНАЧЕ """"
				                      |			КОНЕЦ
				                      |	КОНЕЦ КАК ФИОПолное
				                      |ИЗ
				                      |	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
				                      |		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
				
			Иначе
				
				ЗапросПоЛицам = Новый Запрос();
				ЗапросПоЛицам.УстановитьПараметр("Организация", Организация);
				ЗапросПоЛицам.УстановитьПараметр("ДатаСреза",   ДатаСреза);
				ЗапросПоЛицам.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
				|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность.Наименование КАК Должность,
				|	ВЫБОР КОГДА (ФИОФизЛицСрезПоследних.ФизЛицо) ЕСТЬ NULL  ТОГДА ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование ИНАЧЕ ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ + ВЫБОР КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """" ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + ""."" ИНАЧЕ """" КОНЕЦ КОНЕЦ КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, СтруктурнаяЕдиница = &Организация) КАК ОтветственныеЛицаОрганизацийСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизЛицСрезПоследних
				|		ПО ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизЛицо";
				
			КонецЕсли;
			
			Выборка = ЗапросПоЛицам.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл

				Если Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
					Результат.Руководитель            = Выборка.ФИОПолное;
					Результат.РуководительДолжность   = Выборка.Должность;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
					Результат.ГлавныйБухгалтер        = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
					Результат.Кассир                  = Выборка.ФИОПолное;

				ИначеЕсли Выборка.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ОтветственныйЗаНалоговыеРегистры Тогда
					Результат.ОтветственныйЗаРегистры = Выборка.ФИОПолное;

				КонецЕсли;

			КонецЦикла;
			
			Если Исполнитель <> Неопределено тогда

				ЗапросПоИсполнителям = Новый Запрос();
				ЗапросПоИсполнителям.УстановитьПараметр("Организация",         Организация);
				ЗапросПоИсполнителям.УстановитьПараметр("ГоловнаяОрганизация",         ОбщегоНазначения.ГоловнаяОрганизация(Организация));
				ЗапросПоИсполнителям.УстановитьПараметр("ДатаСреза",           ДатаСреза);
				ЗапросПоИсполнителям.УстановитьПараметр("Исполнитель",         Исполнитель);
				ЗапросПоИсполнителям.Текст = 
				"ВЫБРАТЬ
				|	ВЫБОР
				|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаСреза
				|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения.Наименование
				|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность.Наименование 
				|	КОНЕЦ КАК Должность,
				|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Имя, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ + ВЫБОР
				|			КОГДА ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) <> """"
				|				ТОГДА "" "" + ПОДСТРОКА(ФИОФизЛицСрезПоследних.Отчество, 1, 1) + "".""
				|			ИНАЧЕ """"
				|		КОНЕЦ, РаботникиОрганизацииСрезПоследних.Сотрудник.Наименование) КАК ФИОПолное
				|ИЗ
				|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
				|		&ДатаСреза,
				|		Организация = &ГоловнаяОрганизация
				|			И Сотрудник.ФизЛицо = &Исполнитель
				|			И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &Исполнитель) КАК ФИОФизЛицСрезПоследних
				|		ПО РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо = ФИОФизЛицСрезПоследних.ФизЛицо
				|ГДЕ
				|	ВЫБОР 
				|   	КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаСреза
				|            	И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|       ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
				|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
				|		КОНЕЦ = &Организация
				|	И ВЫБОР
				|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаСреза
				|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
				|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
				|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
				ВыборкаИсполнителей = ЗапросПоИсполнителям.Выполнить().Выбрать();

				Если ВыборкаИсполнителей.Следующий() тогда
					Результат.ИсполнительДолжность = ВыборкаИсполнителей.Должность;
					Результат.Исполнитель          = ВыборкаИсполнителей.ФиоПолное;
				КонецЕсли;

			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтветственныеЛицаОрганизаций()

//Представляет адрес в "удобочитаемом" виде	для отражения в формах
//
//	Параметры: 
//		АдреснаяСтрока (строка), адрес представление которого нужно вернуть.
//		Способ - способ представления адреса (если=1, то возвращает представление адреса без индекса)
//
//	Возвращаемое значение:
//		строку - представление адреса
//
//	Описание:
//		Предназначена для формирования адресной строки в "удобочитаемом" виде
//		для отражения в формах.
//
Функция ПредставлениеАдреса(Знач АдреснаяСтрока, Способ = 0, ПредставлениеПустого = "<<Адрес не задан>>") Экспорт

	Если НЕ ЗначениеЗаполнено(СтрЗаменить(АдреснаяСтрока,",","")) Тогда
		Возврат ПредставлениеПустого;
	КонецЕсли;

	СтруктураАдрес = РазложитьАдрес(АдреснаяСтрока);
	Если АдресСоответствуетТребованиям(СтруктураАдрес) Тогда
		Адрес = "";
		Если ЗначениеЗаполнено(СтруктураАдрес.Страна) Тогда
			СсылкаНаСтрану = Справочники.КлассификаторСтранМира.НайтиПоКоду(СтруктураАдрес.Страна);
			Если НЕ СсылкаНаСтрану.Пустая() Тогда
				Адрес = Адрес +", "+ СсылкаНаСтрану.Наименование;
			Иначе
				Адрес = Адрес +", "+ СтруктураАдрес.Страна;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(СтруктураАдрес.Индекс)и(Способ<>1) тогда
			Адрес = Адрес + СтруктураАдрес.Индекс;
		КонецЕсли;	 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Регион),", "+СтруктураАдрес.Регион,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Район),", "+СтруктураАдрес.Район,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Город),", "+СтруктураАдрес.Город,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.НаселенныйПункт),", "+СтруктураАдрес.НаселенныйПункт,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Улица),", "+СтруктураАдрес.Улица,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Дом),", д."+СтруктураАдрес.Дом,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Корпус),", корп. "+СтруктураАдрес.Корпус,""); 
		Адрес =Адрес + ?(ЗначениеЗаполнено(СтруктураАдрес.Квартира),", кв. "+СтруктураАдрес.Квартира,""); 

		Адрес = Сред(Адрес,1);//Убрали первую запятую
	Иначе
		Адрес = СтрЗаменить(АдреснаяСтрока, Символы.ПС, ", ");
	КонецЕсли;
	Возврат Адрес;
КонецФункции	// глПредставлениеАдреса

Функция ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(Знач СтрокаПараметр) 
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);	
	
	СписокДопустимыхЗначений = Новый Массив;
	СписокДопустимыхЗначений.Добавить(184); 
	СписокДопустимыхЗначений.Добавить(168);
	СписокДопустимыхЗначений.Добавить(44);
	СписокДопустимыхЗначений.Добавить(45);
	СписокДопустимыхЗначений.Добавить(46);
	СписокДопустимыхЗначений.Добавить(32);
	СписокДопустимыхЗначений.Добавить(48);
	СписокДопустимыхЗначений.Добавить(49);
	СписокДопустимыхЗначений.Добавить(50);
	СписокДопустимыхЗначений.Добавить(51);
	СписокДопустимыхЗначений.Добавить(52);
	СписокДопустимыхЗначений.Добавить(53);
	СписокДопустимыхЗначений.Добавить(54);
	СписокДопустимыхЗначений.Добавить(55);
	СписокДопустимыхЗначений.Добавить(56);
	СписокДопустимыхЗначений.Добавить(57);
	СписокДопустимыхЗначений.Добавить(95);
	
	НайденыРусскиеБуквы = Ложь;
	НайденыЛатинскиеБуквы = ЛОжь;
	Для ИндексСимвола = 1 По СтрДлина(СтрокаПараметр) Цикл
		Код = КодСимвола(СтрокаПараметр, ИндексСимвола);
		Если (Код >= 1040 И Код <= 1103) ИЛИ Код = 1105 ИЛИ Код = 1025  Тогда
			// русские буквы
			НайденыРусскиеБуквы = Истина;
		ИначеЕсли (Код >= 65 И Код <= 90) ИЛИ (Код >= 97 И Код <= 122) Тогда
			// Латинские буквы
			НайденыЛатинскиеБуквы = Истина;
		ИначеЕсли (СписокДопустимыхЗначений.Найти(Код) = Неопределено) Тогда
			// неразрешенные символы
			Возврат Истина;
		Иначе				
			НайденыРусскиеБуквы = Ложь;
			НайденыЛатинскиеБуквы = Ложь;	
		КонецЕсли;		
		Если НайденыРусскиеБуквы И НайденыЛатинскиеБуквы Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы

//Определяет соответствие основных параметров адреса требованиям ФНС
//
Функция АдресСоответствуетТребованиям(Знач СтруктураАдрес) Экспорт
	
	Город = СтруктураАдрес.Город;
	Город = СтрЗаменить(Город,"с/с","");
	Город = СтрЗаменить(Город,"с/а","");  
	Город = СтрЗаменить(Город,"с/мо","");
	Город = СтрЗаменить(Город,"с/о",""); 
	Город = СтрЗаменить(Город,"с/п",""); 
	Город = СтрЗаменить(Город,"/",""); 
	НаселенныйПункт = СтруктураАдрес.НаселенныйПункт;
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д_","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"ж/д","");  
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/р","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/ст",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"п/о",""); 

	// Элементы классификатора KLADR. Встречаются элементы с "/". "(", ")".
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"/","");
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,"(",""); 
	НаселенныйПункт = СтрЗаменить(НаселенныйПункт,")",""); 

	Улица = СтруктураАдрес.Улица; 

	// Элементы классификатора сокращений.
	Улица = СтрЗаменить(Улица,"ж/д_","");
	Улица = СтрЗаменить(Улица,"ж/д","");  
	Улица = СтрЗаменить(Улица,"п/о","");
	Улица = СтрЗаменить(Улица,"п/ст",""); 
	Улица = СтрЗаменить(Улица,"п/р","");

	// Элементы классификатора STREET. Встречаются улицы с "/". "(", ")". 
	Улица = СтрЗаменить(Улица,"/","");
	Улица = СтрЗаменить(Улица,"(","");
	Улица = СтрЗаменить(Улица,")","");

	Если (СтруктураАдрес.Количество()<>10) И (СтруктураАдрес.Количество()<>13) Тогда // должно быть 10 элементов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Страна) > 3  Тогда   // код страны не > 3 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СокрЛП(СтруктураАдрес.Индекс)) <> 6  Тогда   // в индексе ровно 6 символов
		Возврат Ложь;
	ИначеЕсли Не ОбщегоНазначения.ТолькоЦифрыВСтроке(СтруктураАдрес.Индекс) Тогда   // индекс состоит из цифр
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Регион) > 50 Тогда   // наим.региона не > 45 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Район) > 50 Тогда   // наим.района не > 35 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(СтруктураАдрес.Район) Тогда   // наим.района написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Город) > 50 Тогда   // наим.города не > 35 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(Город) Тогда   // наим.города написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.НаселенныйПункт) > 50 Тогда   // наим.нас.пункта не > 45 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(НаселенныйПункт) Тогда   // наим.нас.пункта написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Улица) > 50 Тогда   // наим.улицы не > 45 символов
		Возврат Ложь;
	ИначеЕсли ВСловеПрисутствуютОдновренноРусскиеИЛатинскиеБуквыИлиНеразрешенныеСимволы(Улица) Тогда   // наим.улицы написано не русскими буквами
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Дом) > 10 Тогда   // номер дома не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Корпус) > 10 Тогда   // номер корпуса не > 10 символов
		Возврат Ложь;
	ИначеЕсли СтрДлина(СтруктураАдрес.Квартира)> 10 Тогда   // номер квартиры не > 10 символов
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции	

//Получает текст файла сведений из регистра
Функция ПолучитьТекстФайлаИзРегистра(ДокументСсылка) 

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументСсылка);

	Запрос.Текст = "ВЫБРАТЬ
	|	АрхивДанныхРегламентированнойОтчетности.Данные
	|ИЗ
	|	РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
	|
	|ГДЕ
	|	АрхивДанныхРегламентированнойОтчетности.Объект = &ДокументСсылка";

	ВыборкаДанных = Запрос.Выполнить().Выбрать();

	Если ВыборкаДанных.Следующий() тогда
		Возврат ВыборкаДанных.Данные;
	Иначе	
		Возврат "";
	КонецЕсли;	 

КонецФункции	

//Получает текст файла сведений, сформированного по данным документа
Функция ПолучитьТекстФайла(ДокументОбъект,Отказ) Экспорт

	Если ДокументОбъект.Проведен тогда
		//Для проведенного документа берём сохраненный ранее текст файла 
		Отказ = Ложь;
		Возврат ПолучитьТекстФайлаИзРегистра(ДокументОбъект.Ссылка);

	Иначе
		Возврат ДокументОбъект.СформироватьВыходнойФайл(Отказ);

	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЙ
//

//Собирает из элементов структуры адреса строку записи адреса в формате 9 запятых
Функция СобратьАдрес(Знач СтруктураАдрес) Экспорт

	СтрокаАдреса = ""+ СтруктураАдрес.Страна + "," + СтруктураАдрес.Индекс + ","+ СтруктураАдрес.Регион + ","
	+ СтруктураАдрес.Район  + "," + СтруктураАдрес.Город  + ","+ СтруктураАдрес.НаселенныйПункт + ","
	+ СтруктураАдрес.Улица  + "," + СтруктураАдрес.Дом    + ","+ СтруктураАдрес.Корпус + "," + СтруктураАдрес.Квартира;
	
	//Расширенное представление
	Если СтруктураАдрес.Свойство("ТипДома") И СтруктураАдрес.Свойство("ТипКорпуса") И СтруктураАдрес.Свойство("ТипКвартиры") Тогда
		СтрокаАдреса = СтрокаАдреса + "," + СтруктураАдрес.ТипДома + "," + СтруктураАдрес.ТипКорпуса + "," + СтруктураАдрес.ТипКвартиры;
	КонецЕсли;	
	
	Возврат СтрокаАдреса;
	
КонецФункции	 

//Возвращает строковое представление места рождения
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения) Экспорт

	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);

    Если СтруктураМестоРождения.Особое = 1 Тогда
	
		Представление	=	"особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
	
	Иначе
	
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"Населенный пункт: " + СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", район:  " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", область: "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", страна: "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = ","  Тогда
			Представление = Сред(Представление, 2)
		КонецЕсли;
			
	КонецЕсли; 

	Возврат Представление;
КонецФункции	 

//Функция раскладывает строку с данными об адресе (в формате 9 запятых) на элементы структуры
Функция РазложитьАдрес(Знач СтрокаАдрес) Экспорт
	
	Страна = "";
	Индекс = "";
	Регион = "";
	Район = "";
	Город = "";
	НаселенныйПункт = "";
	Улица ="";
	Дом ="";
	Корпус ="";
	Квартира ="";
	
	ТипДома ="";
	ТипКорпуса ="";
	ТипКвартиры ="";

	МассивАдрес	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаАдрес);
	ЭлементовВМассиве = МассивАдрес.Количество();   

	Если ЭлементовВМассиве	>	0	тогда
		Страна	=	СокрЛП(МассивАдрес[0]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		Индекс	=	СокрЛП(МассивАдрес[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Регион	=	СокрЛП(МассивАдрес[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Район	=	СокрЛП(МассивАдрес[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Город	=	СокрЛП(МассивАдрес[4]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	5	тогда
		НаселенныйПункт	=	СокрЛП(МассивАдрес[5]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	6	тогда
		Улица	=	СокрЛП(МассивАдрес[6]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	7	тогда
		Дом	=	СокрЛП(МассивАдрес[7]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	8	тогда
		Корпус	=	СокрЛП(МассивАдрес[8]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	9	тогда
		Квартира	=	СокрЛП(МассивАдрес[9]);
	КонецЕсли;
	
    //Расширенное представление
	Если ЭлементовВМассиве	>	10	тогда
		ТипДома	    = СокрЛП(МассивАдрес[10]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	11	тогда
		ТипКорпуса	= СокрЛП(МассивАдрес[11]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	12	тогда
		ТипКвартиры = СокрЛП(МассивАдрес[12]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Страна",Страна);
	СтруктураВозврата.Вставить("Индекс",Индекс);
	СтруктураВозврата.Вставить("Регион",Регион);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Город",Город);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Улица",Улица);
	СтруктураВозврата.Вставить("Дом",Дом);
	СтруктураВозврата.Вставить("Корпус",Корпус);
	СтруктураВозврата.Вставить("Квартира",Квартира);
	СтруктураВозврата.Вставить("ТипДома",ТипДома);
	СтруктураВозврата.Вставить("ТипКорпуса",ТипКорпуса);
	СтруктураВозврата.Вставить("ТипКвартиры",ТипКвартиры);

	Возврат СтруктураВозврата;
	
КонецФункции	 

//Функция раскладывает строку с данными о месте рождения на элементы структуры
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт

	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";

	//МассивМестоРождения	=	РазложитьСтрокуВМассивПодстрок(Врег(СтрокаМестоРождения));
	МассивМестоРождения	=	ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве	>	0	тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое	=	1;
		КонецЕсли;	 
	КонецЕсли;
	Если ЭлементовВМассиве	>	1	тогда
		НаселенныйПункт	=	СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	2	тогда
		Район	=	СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	3	тогда
		Область	=	СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве	>	4	тогда
		Страна	=	СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции	 

#Если ТолстыйКлиентОбычноеПриложение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИАЛОГАМИ
//

//Выполняет запись документа в случае подтверждения пользователем
Функция ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,ТекстВопросаПодтверждения) Экспорт

	Если ДокументОбъект.ЭтоНовый() или ДокументОбъект.Модифицированность() Тогда
		Ответ  = Вопрос(ТекстВопросаПодтверждения, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			ДокументОбъект.Записать();
		Иначе
			Возврат ложь;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;

КонецФункции

//Предлагает пользователю указать каталог для выгрузки декларации в электронном виде
Функция ПолучитьПутьВыгрузки(ПутьДляВыгрузки = Неопределено) Экспорт

	ФормаПараметровСохранения = роПолучитьОбщуюФорму("НастройкаПараметровСохраненияРегламентированногоОтчета");
	ФормаПараметровСохранения.ПутьДляВыгрузки = ПутьДляВыгрузки;

	РезВыбора = ФормаПараметровСохранения.ОткрытьМодально();
	Если РезВыбора = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ РезВыбора Тогда
		Возврат Ложь;
	Иначе
		Возврат ФормаПараметровСохранения.ПутьДляВыгрузки;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ СВЕДЕНИЙ
//


//Печатает файл сведений документа
Процедура РаспечататьФайлДокумента(ДокументОбъект) Экспорт
	Вопрос = "Перед печатью необходимо записать документ. Записать?";
	Если НЕ ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;	
	ДокументОбъект.ПечатьФайла();
КонецПроцедуры 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ
//

//Возвращает счетчик выгруженных файов по организации за период, обазначенный ДатойИзПериода
Функция ПолучитьСчетчикВыгруженныхФайлов(Организация, ТипСчетчика = Неопределено, Знач ДатаОтчета = Неопределено, ИФНС = "") Экспорт
	
	Если ДатаОтчета = Неопределено Тогда
		ДатаОтчета = РабочаяДата;
	Иначе
		ДатаОтчета = НачалоГода(ДатаОтчета);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СчетчикиВыгрузок.Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикиВыгрузок КАК СчетчикиВыгрузок
	                      |ГДЕ
	                      |	СчетчикиВыгрузок.Тип = &Тип
	                      |	И СчетчикиВыгрузок.Организация = &Организация
	                      |	И СчетчикиВыгрузок.Период = &Период
						  |	И СчетчикиВыгрузок.ИФНС = &ИФНС");
	Запрос.УстановитьПараметр("Тип", ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ТипСчетчика));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Период", НачалоГода(ДатаОтчета));
	Запрос.УстановитьПараметр("ИФНС", ?(РабочаяДата < '20070701000000', "", ИФНС));
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(НЕ ЗначениеЗаполнено(Выборка.Значение), 0, Выборка.Значение) + 1;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
	
	//Отбор = Новый Структура("Тип, Организация", ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ТипСчетчика), Организация);
	//РезФ = РегистрыСведений.СчетчикиВыгрузок.СрезПоследних(ДатаОтчета, Отбор);
	//Для Каждого Срез Из РезФ Цикл
	//	Если Год(Срез.Период) = Год(ДатаОтчета) Тогда
	//		Возврат Срез.Значение + 1;
	//	КонецЕсли;
	//КонецЦикла;
	//Возврат 1;
	
КонецФункции

// Устанавливает счетчик выгруженных файлов СчФайлов для указанной Организации
Процедура УстановитьСчетчикВыгруженныхФайлов(Организация, СчФайлов, ТипСчетчика = Неопределено, ПериодУстановки = Неопределено, ИФНС = "") Экспорт
	
	МенЗап = РегистрыСведений.СчетчикиВыгрузок.СоздатьМенеджерЗаписи();
	МенЗап.Период = НачалоГода(?(ПериодУстановки = Неопределено, РабочаяДата, ПериодУстановки));
	МенЗап.Организация = Организация;
	МенЗап.Тип = ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ТипСчетчика);
	МенЗап.ИФНС = ?(РабочаяДата < '20070701000000', "", ИФНС);
	МенЗап.Значение = СчФайлов;
	МенЗап.Записать(Истина);
	
КонецПроцедуры

// Возвращает номер следующего выгружаемого документа для указанной Организации
// Номер определяется для документов, выгружаемых в текущем году
Функция ПолучитьСчетчикВыгруженныхДокументов(Организация, Знач ДатаДокумента = Неопределено, НомерКвартала = 0, Знач ТипСчетчика = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипСчетчика = Неопределено Тогда
		ТипСчетчика = Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300;
	КонецЕсли;
	
	Если ДатаДокумента = Неопределено Тогда
		ДатаДокумента = РабочаяДата;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СчетчикиВыгрузок.Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикиВыгрузок КАК СчетчикиВыгрузок
	                      |ГДЕ
	                      |	СчетчикиВыгрузок.Период = &Период
	                      |	И СчетчикиВыгрузок.Тип = &Тип
	                      |	И СчетчикиВыгрузок.Организация = &Организация
	                      |	И СчетчикиВыгрузок.НомерКвартала = &НомерКвартала");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Тип", ТипСчетчика);
	Запрос.УстановитьПараметр("Период", НачалоГода(ДатаДокумента));
	Запрос.УстановитьПараметр("НомерКвартала", НомерКвартала);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Если ТипСчетчика = Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовАлко И Выборка.Значение = 99 Тогда
			Возврат 0;
		Иначе
			Возврат Выборка.Значение;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Устанавливает счетчик выгруженных документов СчДок для указанной Организации
Процедура УстановитьСчетчикВыгруженныхДокументов(Организация, СчДок, ДатаДокумента = Неопределено, НомерКвартала = 0, ТипСчетчика = Неопределено) Экспорт
	
	МенЗап = РегистрыСведений.СчетчикиВыгрузок.СоздатьМенеджерЗаписи();
	МенЗап.Период = НачалоГода(?(ДатаДокумента = Неопределено, РабочаяДата, ДатаДокумента));
	МенЗап.Организация = Организация;
	МенЗап.Тип = ?(ТипСчетчика = Неопределено, Перечисления.ТипыСчетчиковВыгрузки.СчетчикДокументовВФормате300, ТипСчетчика);
	МенЗап.НомерКвартала = НомерКвартала;
	МенЗап.Значение = СчДок;
	МенЗап.Записать(Истина);
	
КонецПроцедуры

// Возвращает версию формата выгрузки для документа РеглДок вида 
// РегламентированныйОтчет на указанную дату. Если дата не указана, то
// за указанную принимается РабочаяДата.
Функция ВерсияФорматаВыгрузки(РеглДок, НаДату = Неопределено) Экспорт

	Попытка
		РеглОтчОсновнаяФорма = РеглОтчеты(РеглДок.ИсточникОтчета). ПолучитьФорму();
		РеглОтчОсновнаяФорма.мСохраненныйДок = РеглДок;
		Возврат РеглОтчОсновнаяФорма.ПолучитьВерсиюФорматаВыгрузки(НаДату);
		//Возврат ФормаРеглОтчета(РеглДок.ИсточникОтчета).ПолучитьВерсиюФорматаВыгрузки(НаДату);
	Исключение
		Возврат Неопределено;
	КонецПопытки;

КонецФункции

Процедура СтандартнаяПостобработкаТекстаВыгрузки(Текст) Экспорт
	
	КоличествоСтрок = Текст.КоличествоСтрок();
	Для Инд = 1 По КоличествоСтрок Цикл
		ТекСтр = Текст.ПолучитьСтроку(Инд);
		ВхождениеДвоеточия = Найти(ТекСтр, ":");
		Если ВхождениеДвоеточия <> 0 Тогда
			Текст.ЗаменитьСтроку(Инд, Лев(ТекСтр, ВхождениеДвоеточия) + ВРЕГ(СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1))));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли

//Возвращает счетчик выгруженных файов по организации за определенный год
Функция ПолучитьСчетчикВыгруженныхФайловПФР(Организация, Год) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	СчетчикВыгрузокПФР.Значение КАК Значение
	                      |ИЗ
	                      |	РегистрСведений.СчетчикВыгрузокПФР КАК СчетчикВыгрузокПФР
	                      |ГДЕ
	                      |	СчетчикВыгрузокПФР.Организация = &Организация
	                      |	И СчетчикВыгрузокПФР.Год = &Год");
						  
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Год", Год);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат ?(НЕ ЗначениеЗаполнено(Выборка.Значение), 0, Выборка.Значение);
		КонецЕсли;
	КонецЕсли;
	Возврат 0;
	
КонецФункции

// Устанавливает счетчик выгруженных файлов СчФайлов для указанной Организации
Процедура УстановитьСчетчикВыгруженныхФайловПФР(Организация, Год, СчФайлов) Экспорт
	
	МенЗап = РегистрыСведений.СчетчикВыгрузокПФР.СоздатьМенеджерЗаписи();
	МенЗап.Организация = Организация;
	МенЗап.Год = Год;
	МенЗап.Значение = СчФайлов;
	МенЗап.Записать(Истина);
	
КонецПроцедуры

// Проверяет указанный Реквизит на пустое значение.
// Значение Реквизита сравнивается с пустым значением соответствующего Реквизиту типа.
// Реквизит типа Строка считается пустым, если в нем не содержится значащих символов.
Функция ПустоеЗначение(Реквизит) Экспорт

	Если Реквизит = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;

	Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Возврат ПустаяСтрока(Реквизит);
	ИначеЕсли ТипЗнч(Реквизит) = Тип("Число") Тогда
		Если Реквизит = 0 Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Реквизит) = Тип("Дата") Тогда
		Если Реквизит = Дата('00010101') Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

КонецФункции

// Проверяет указанную строку КодПок на соответствие требованиям, предъявляемым
// к именам предписанных показателей в форматах представления отчетности версий 2.00, 2.01 и 3.00
Функция ЭтоКодПоказателяП(КодПок) Экспорт
	
	Если СтрДлина(КодПок) < 13 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Пок = СокрЛП(КодПок);
	
	Если Сред(Пок, 1, 1) = "П" Тогда
		
		Для Сч = 2 По 13 Цикл
			
			КодСимв = КодСимвола(Пок, Сч);
			
			Если НЕ ((КодСимв >= КодСимвола("0")) И (КодСимв <= КодСимвола("9"))) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Добавляет строку в текст с электронным представлением отчета
// Строка добавляется в формате ИмяПоказателя:ЗначениеПоказателя
// Параметры:
// Текст          - ТекстовыйДокумент, в который требуется добавить строку.
// ЗначениеЯчейки - значение показателя, который следует вывести.
// ИмяЯчейки      - имя показателя, который следует вывести.
// ПризнакФормата - строка с описанием формата показателя
// ФорматВыгрузки - второй параметр функции Формат (для показателей с признаком "Е" и "С")
Процедура ВывестиПоказатель(Текст, ЗначениеЯчейки, ИмяЯчейки, ПризнакФормата, ФорматВыгрузки) Экспорт
	
	Если ПустоеЗначение(ЗначениеЯчейки) И ПризнакФормата <> "Д" Тогда
		Текст.ДобавитьСтроку(ИмяЯчейки + ":")
	Иначе
		Если ПризнакФормата = "Е" Тогда
			ТекстЯчейкиКакЧисло = Число(СокрЛ(ЗначениеЯчейки));
			Если ТекстЯчейкиКакЧисло = 0 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,ФорматВыгрузки)));
			КонецЕсли;
		ИначеЕсли ПризнакФормата = "Д" Тогда 
			Если ПустоеЗначение(Дата(ЗначениеЯчейки)) = 1 Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":");
			Иначе
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + СокрЛ(Формат(ЗначениеЯчейки,"ДФ=dd.MM.yyyy; ДЛФ=D")));
			КонецЕсли;	
		Иначе
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда
				Знч = Формат(ЗначениеЯчейки, "ЧРД=.; ЧГ=0");
			Иначе
				Знч = ЗначениеЯчейки;
			КонецЕсли;
			Если ЗначениеЯчейки = "0" Тогда
				Текст.ДобавитьСтроку(ИмяЯчейки + ":")
			Иначе	
				Текст.ДобавитьСтроку(ИмяЯчейки + ":" + ВРЕГ(СокрЛП(Знч)));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Вычисляет значение показателя отчета по указанному "корню" имени показателя
// Например, 
// для показателей "ИНН_1"," ИНН_2" и т.д. "корнем" является "ИНН"
// для показателей "КПП1_1", "КПП1_2" и т.д. "корнем" является "КПП1"
// Параметры:
// Табл - таблица значений, описывающая показатели листа отчета
// Корень - строка - "корень", значение для которого требуется получить 
Функция ВычислитьЗначениеПоКорню(Табл, Корень)
	
	Табл2 = Табл.Скопировать();
	ИтоговоеЗначение = "";
	
	Для Каждого Стр Из Табл2 Цикл
		
		Имя = Стр.Имя;
		//Если Лев(Имя, СтрДлина(Корень)) = Корень Тогда
		Если Имя = Корень Тогда
			ИтоговоеЗначение = ИтоговоеЗначение + Стр.Знач;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ((ВРЕГ(Лев(Корень, 4)) = "ДАТА") ИЛИ (СтрЧислоВхождений(Корень, "Дата") <> 0)) 
		И (((СтрДлина(ИтоговоеЗначение)=8) ИЛИ (СтрДлина(ИтоговоеЗначение)=6)) ИЛИ (ПустаяСтрока(ИтоговоеЗначение)))Тогда
		
		Если ПустаяСтрока(ИтоговоеЗначение) Тогда
			ИтоговоеЗначение = "00.00.0000";
		Иначе
			ИтоговоеЗначение = Лев(ИтоговоеЗначение, 2) + "." + Сред(ИтоговоеЗначение, 3, 2) + "." + Сред(ИтоговоеЗначение, 5);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции

//Функция собирает значения из отдельных "ячеек", например, ИНН1 из ИНН1_1 + ИНН1_2 + ...
Функция СвернутьДанныеТабличногоПоля(Данные) Экспорт
	
	ТП = Новый ТаблицаЗначений;
	ТП.Колонки.Добавить("Имя");
	ТП.Колонки.Добавить("Кол");
	ТП.Колонки.Добавить("Номер");
	ТП.Колонки.Добавить("Знач");
	//ТП.Колонки.Вставить(3, "КолСимвОснования");
	
	Для Каждого Стр Из Данные Цикл
		НоваяСтрока = ТП.Добавить();
		НоваяСтрока.Имя = Стр.Ключ;
		//Стр.Ключ = НоваяСтрока.Имя;
		НоваяСтрока.Кол = 1;
		НоваяСтрока.Знач = Стр.Значение;
	КонецЦикла;
	
	ТП.Сортировать("Имя");
	
	Для Каждого Стр Из ТП Цикл
		Имя = Стр.Имя;
		
		Если ЭтоКодПоказателяП(Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакКвадратика = Ложь;//признак того, что значение является частью другого значения
		
		НомерСимвола = СтрДлина(Имя);
		Было_ = Ложь;//признак того, что в текущем наименовании показателя уже встречался символ "_"
		БылаЦифра = Ложь;
		
		Пока НомерСимвола > 0 Цикл
			
			Симв = Сред(Имя, НомерСимвола, 1);
			КодСимв = КодСимвола(Симв);
			
			Если (КодСимв >= КодСимвола("0") И КодСимв <= КодСимвола("9")) ИЛИ (Симв = "_") Тогда
				
				Если Симв = "_" Тогда
					Если БылаЦифра Тогда
						
						ПризнакКвадратика = Истина;
						НомерСимвола = НомерСимвола - 1;
						Прервать;
						
					КонецЕсли;
				Иначе//это цифра
					БылаЦифра = Истина;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола - 1;
			
		КонецЦикла;
		
		Если БылаЦифра Тогда
			Корень = Лев(Стр.Имя, НомерСимвола);
			Номер = Сред(Стр.Имя, НомерСимвола + 1);
			Попытка
				Стр.Номер = Число( ?( Лев(Номер, 1) = "_", Сред(Номер, 2), Номер));
			Исключение
				Сообщить("Ошибки преобразования номера из окончания: " + Корень + " === " + Номер, СтатусСообщения.Важное);
			Конецпопытки;
			Стр.Имя = Корень;
		КонецЕсли;
		
	КонецЦикла;
	
	ТП.Сортировать("Имя, Номер");
	
	ТП2 = ТП.Скопировать();
	ТП2.Свернуть("Имя", "Кол");
	
	Для Каждого Стр Из ТП2 Цикл
		Если Стр.Имя = "П" Тогда
			Продолжить;
		КонецЕсли;
		Если Стр.Кол > 1 Тогда
			ЗначениеСводногоПоказателя = ВычислитьЗначениеПоКорню(ТП, Стр.Имя);
			//Сообщить(Стр.Имя + " = " + ЗначениеСводногоПоказателя);
			НайдЗнач = Неопределено;
			Если НЕ Данные.Свойство(Стр.Имя, НайдЗнач) Тогда
				Данные.Вставить(Стр.Имя, ЗначениеСводногоПоказателя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда

//Выводит данные служебной части в соответствии с требованиями формата 3.00
Функция ВывестиСведенияСлужебнойЧасти30(Текст, Организация = Неопределено, Знач ДатаДок = Неопределено, Знач ОргИНН = Неопределено, Знач ОргКПП = Неопределено, Знач КодИнсп = Неопределено, ТипИнф = "ОТЧЕТНОСТЬНП", ВерсияФормата = "3.00") Экспорт
	
	Если ДатаДок = Неопределено Тогда
		ДатаДок = ТекущаяДата();
	КонецЕсли;
	
	ДатаДокС = Формат(РабочаяДата, "ДФ=dd.MM.yyyy");
	
	Если Организация <> Неопределено Тогда
		
		Если ОргИНН = Неопределено ИЛИ ПустаяСтрока(ОргИНН) Тогда
			ОргИНН = СокрЛП(Организация.ИНН);
		КонецЕсли;
		
		Если ОргКПП = Неопределено ИЛИ ПустаяСтрока(ОргКПП) Тогда
			ОргКПП = Организация.КПП;
		КонецЕсли;
		
		Если КодИНСП = Неопределено ИЛИ ПустаяСтрока(КодИНСП) Тогда
			КодИНСП = СокрЛП(ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОргИНН) Тогда
		Сообщить("Невозможно определить ИНН организации! Выгрузка прервана!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПустаяСтрока(КодИНСП) Тогда
		Сообщить("Невозможно определить код налоговой инспекции! Выгрузка прервана!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ОргИНН = СокрЛП(ОргИНН);
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		// Налогоплательщик - физическое лицо.
		КатегорияНП = 2;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		// Если КПП указан
		Если СтрДлина(ОргИНН) = 10 Тогда
			ИДОтпр = ОргИНН + "**" + ОргКПП;
		Иначе
			ИДОтпр = ОргИНН + ОргКПП;
		КонецЕсли;
	Иначе
		// Если КПП не указан
		Если КатегорияНП = 1 Тогда 
			// налогоплательщик - ЮЛ
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// налогоплательщик - ФЛ
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	ИдФайл  = ИДОтпр + Прав(ДатаДокС,4) + Сред(ДатаДокС,4,2) + Лев(ДатаДокС,2)
			+ Формат(Час(ДатаДок),"ЧЦ=2; ЧН=; ЧВН=") + Формат(Минута(ДатаДок),"ЧЦ=2; ЧН=; ЧВН=") + Формат(Секунда(ДатаДок),"ЧЦ=2; ЧН=; ЧВН=");	
	                                         
	Текст.ДобавитьСтроку("ИдФайл:" + ИдФайл);
	Текст.ДобавитьСтроку("ТипИнф:" + ТипИнф);
	Текст.ДобавитьСтроку("ВерсФорм:" + ВерсияФормата); 
	Текст.ДобавитьСтроку("ИдПол:"  + КодИнсп); 
	Текст.ДобавитьСтроку("ВерсПрог:" + СформироватьВерсПрог());
	Текст.ДобавитьСтроку("КолДок:1");

	Возврат Истина;
	
КонецФункции

Функция СформироватьВерсПрог() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	ВерсияПриложения = СисИнфо.ВерсияПриложения;
	КоличествоВхожденийРазделителя = 0;
	Разделитель = ".";
	РедакцияПриложения = "";
	Для ИндСимв = 1 По СтрДлина(ВерсияПриложения) Цикл
		Симв = Сред(ВерсияПриложения, ИндСимв, 1);
		Если Симв = Разделитель Тогда
			КоличествоВхожденийРазделителя = КоличествоВхожденийРазделителя + 1;
			Если КоличествоВхожденийРазделителя = 2 Тогда
				РедакцияПриложения = Лев(ВерсияПриложения, ИндСимв - 1);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если РедакцияПриложения = "" Тогда
		РедакцияПриложения = ВерсияПриложения;
	КонецЕсли;
	Возврат Лев("1С:ПРЕДПРИЯТИЕ " + СокрЛП(РедакцияПриложения) + " " + ИДКонфигурации() + " " + СокрЛП(Метаданные.Версия), 40);
	
КонецФункции

//Выводит сведения об отправителе в соответствии с требованиями формата 3.00
Функция ВывестиСведенияОбОтправителе30(Текст, Организация = Неопределено, Знач ОргНазв = Неопределено, Знач ОргТелефон = Неопределено, Знач ОргБухгалтер = Неопределено, ВыгрузкаДекларацииПоАлкоголю = Ложь) Экспорт
	
	Если Организация <> Неопределено Тогда
		
		Если ОргНазв = Неопределено Тогда
			ОргНазв = СокрЛП(Организация.НаименованиеПолное);
		КонецЕсли;
		
		Если ОргТелефон = Неопределено Тогда
			ОргТелефон = СокрЛП(ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ТелОрганизации").ТелОрганизации);
		КонецЕсли;
		
		Если ОргБухгалтер = Неопределено Тогда
			ОргСведения = ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИОБух");
			ОргБухгалтер = СокрЛП(ОргСведения.ФИОБух);
		КонецЕсли;
		
	КонецЕсли;
	
	ИНН = СокрЛП(Организация.ИНН);
	Если ПустаяСтрока(ИНН) Тогда
		Сообщить("Невозможно определить вид налогоплательщика! Выгрузка прервана!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ИНН)) = 12 Тогда
		// Налогоплательщик - физическое лицо.
		КатегорияНП = 2;
	КонецЕсли;
	
	Если ПустаяСтрока(ОргНазв) Тогда
		Сообщить("Невозможно определить полное название организации! Выгрузка прервана!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если КатегорияНП = 1 И ПустаяСтрока(ОргБухгалтер) Тогда
		Сообщить("Невозможно определить ФИО главного бухгалтера организации! Выгрузка прервана!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если КатегорияНП = 1 ИЛИ ВыгрузкаДекларацииПоАлкоголю Тогда
		// отправитель - ЮЛ
		Текст.ДобавитьСтроку("НаимОтпрЮл:" + ВРЕГ(СтрЗаменить(ОргНазв, Символы.ПС, "")));
		Текст.ДобавитьСтроку("ТелОтпр:"    + СокрЛП(ВРЕГ(Лев(ОргТелефон, 20))));
		Текст.ДобавитьСтроку("ДолжнОтпр:ГЛАВНЫЙ БУХГАЛТЕР");
		Текст.ДобавитьСтроку("ФИООтпр:"   + СтрЗаменитьПробелы(ОргБухгалтер));
		Текст.ДобавитьСтроку("@@@"); 
	Иначе
		// отправитель - ФЛ 
		Если НЕ ПустаяСтрока(ОргБухгалтер) Тогда
			ФИООтпрФЛ = ОргБухгалтер;
		Иначе
			ФИООтпрФЛ = ПолучитьСведенияОбОрганизации(Организация, РабочаяДата, "ФИО").ФИО;
		КонецЕсли;
		Если ПустаяСтрока(ФИООтпрФЛ) Тогда
			Сообщить("Невозможно определить ФИО главного бухгалтера и ФИО индивидуального предпринимателя! Выгрузка прервана!",СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		Текст.ДобавитьСтроку("ФИООтпрФЛ:" + СтрЗаменитьПробелы(ФИООтпрФЛ));
		Текст.ДобавитьСтроку("ТелОтпр:"   + СокрЛП(ВРЕГ(Лев(ОргТелефон, 20))));
		Текст.ДобавитьСтроку("@@@");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

//Выводит общие сведения информационной части (формат 3.00)
Функция ВывестиОбщиеСведенияИнформационнойЧасти30(Текст, Организация = Неопределено, Знач ОргИНН = Неопределено, Знач ОргКПП = Неопределено, Знач ДатаДок = Неопределено, КодИФНС = Неопределено) Экспорт
	
	Если ДатаДок = Неопределено Тогда
		ДатаДок = РабочаяДата;
	КонецЕсли;
	
	ДатаДокС = Формат(ДатаДок, "ДФ=dd.MM.yyyy");
	
	Если Организация <> Неопределено Тогда
		
		Если ОргИНН = Неопределено Тогда
			ОргИНН = СокрЛП(Организация.ИНН);
		КонецЕсли;
		
		Если ОргКПП = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ОргКПП) Тогда
			Если КодИФНС <> Неопределено Тогда
				ОргКПП = КПППоКомбинацииОрганизацииИКодаИФНС(Организация, КодИФНС);
			Иначе
				ОргКПП = Организация.КПП;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ОргИНН) Тогда
		Сообщить("Невозможно определить ИНН организации! Выгрузка прервана!",СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	КатегорияНП = 1;
	Если СтрДлина(СокрЛП(ОргИНН)) = 12 Тогда
		// Налогоплательщик - физическое лицо.
		КатегорияНП = 2;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ОргКПП) Тогда
		// Если КПП указан
		Если СтрДлина(ОргИНН) = 10 Тогда
			ИДОтпр = ОргИНН + "**" + ОргКПП;
		Иначе
			ИДОтпр = ОргИНН + ОргКПП;
		КонецЕсли;
	Иначе
		// Если КПП не указан
		Если КатегорияНП = 1 Тогда 
			// налогоплательщик - ЮЛ
			ИДОтпр = ОргИНН + "***********";
		Иначе
			// налогоплательщик - ФЛ
			ИДОтпр = ОргИНН + "*********";
		КонецЕсли;
	КонецЕсли;
	
	СчДок = ПолучитьСчетчикВыгруженныхДокументов(Организация, ДатаДок) + 1;
	ИдДок = ИДОтпр + Прав(ДатаДокС, 4) + Формат(СчДок, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=");
	
	Текст.ДобавитьСтроку("ИдДок:" + СокрЛП(ИдДок)); 
	Текст.ДобавитьСтроку("ДатаДок:" + Формат(РабочаяДата, "ДФ=dd.MM.yyyy")); 
	Текст.ДобавитьСтроку("###");
	
	Возврат Истина;
	
КонецФункции

// Функция возвращает значение КПП для заданных значений организации и кода ИФНС.
//
Функция КПППоКомбинацииОрганизацииИКодаИФНС(Организация, КодИФНС) Экспорт
	
	ИдКонф = ИДКонфигурации();
	Если ИдКонф <> "ББУ" И ИдКонф <> "ЗБУ" И ИдКонф <> "БГУ" И Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Возврат "";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	РегистрацияВИФНС.КПП КАК КПП
	                      |ИЗ
	                      |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	                      |ГДЕ
	                      |	РегистрацияВИФНС.Владелец = &Владелец
	                      |	И РегистрацияВИФНС.Код = &Код
						  |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления");
						  
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);					
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Код", КодИФНС);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат СокрЛП(Выборка.КПП);
	ИначеЕсли НЕ ПустаяСтрока(Организация.КПП) Тогда
		Возврат СокрЛП(Организация.КПП);
	Иначе
		Сообщить("Невозможно определить КПП для организации " + Организация + " и ИФНС с кодом " + КодИФНС + "!", СтатусСообщения.Важное);
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

#КонецЕсли

// Для указанного раздела возвращает структуру, описывающую подразделы.
// Параметры:
// ИмяРаздела - строка - имя раздела, для которого требуется определить подразделы
// мТаблицаСоставПоказателей - таблица значений, хранящая характеристики предписанных 
// показателей отчета
// МногострочныеИсключения - список значений, в котором указаны коды показателей,
// которые являются частью многострочного раздела и которые имеют номер строки, 
// отличный от предыдущего показателя, но которые не следует помещать в отдельный подраздел.
Функция РазбитьПоПодразделам(ИмяРаздела, мТаблицаСоставПоказателей, МногострочныеИсключения = Неопределено) Экспорт

	Подразделы = Новый Структура;
	СтрокиФорматаТекРаздела = мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента",ИмяРаздела));
	ПослМногостр = "^^^";
	ПослКодПоказателя = "П000000000000";

	Для Каждого Стр из СтрокиФорматаТекРаздела Цикл

		КодПоказателя = Стр.КодПоказателяПоСоставу;
		Многостр = Стр.ПризнМногострочности;
		Если КодПоказателя = "###" или КодПоказателя = "===" или Лев(КодПоказателя, 2) = "//" Тогда
			Продолжить;
		КонецЕсли;
		Если Многостр <> ПослМногостр Тогда
			Подразделы.Вставить(КодПоказателя, Многостр);
			ПослМногостр = Многостр;
		ИначеЕсли (Многостр = ПослМногостр) и (МногоСтр = "/") и (Лев(ПослКодПоказателя, 11) <> Лев(КодПоказателя, 11))
					и ?(МногострочныеИсключения = Неопределено, Истина, МногострочныеИсключения.НайтиПоЗначению(КодПоказателя) = Неопределено) Тогда
			Подразделы.Вставить(КодПоказателя, Многостр);
			ПослМногостр = Многостр;
		КонецЕсли;

		ПослКодПоказателя = КодПоказателя;

	КонецЦикла;

	Возврат Подразделы;

КонецФункции

// Проверяет показатель на пустое значение.
// Параметры
// НазваниеОтчета - пользовательское представление отчета.
// Стр - строка таблицы значений, содержащая описание показателя, который требуется проверить
// Значение - значение показателя
// ВыводитьСообщения - признак, указывающий на необходимость добавления описания ошибки
// (ошибка - отсутствие значения у обязательного к заполнению показателя) в таблицу сообщений, 
// определенную в модуле формы, из которой вызвана функция
// НомерСтраницы - номер страницы, на которой находится прверяемый показатель
// НомерСтроки   - номер строки многострочной части, на которой находится показатель
// ПроверкаЗаполненияСтр - признак того, что функция вызвана из процедур проверки 
// на наличие заполненных показателей в разделе, на листе либо в строке многострочной части
// ФормаВыводаСообщений - форма, из которой была вызвана функция
Функция ПроверитьНаПустоеЗначение(НазваниеОтчета, Стр, Значение, ВыводитьСообщения, НомерСтраницы = Неопределено, НомерСтроки = Неопределено, ПроверкаЗаполненияСтр = 0, ФормаВыводаСообщений = Неопределено) Экспорт
	//возможны три варианта Стр.Обязательность:
	//"Н" - показатель "белый"
	//"О" - показатель обязательный
	//"" - показатель необязательный
	
	Если Найти(Стр.Обязательность, "Н") <> 0 и ПроверкаЗаполненияСтр = 1 Тогда
		Возврат 1; 
	КонецЕсли;
	
	Если Найти(Стр.Обязательность, "Н") <> 0 и ПроверкаЗаполненияСтр = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Стр.Обязательность = "" и ПроверкаЗаполненияСтр = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(Значение) Тогда
		Если ВыводитьСообщения Тогда
			Раздел = РазделПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			Стрк = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
			
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = Стрк;
				НовСтр.Графа = Графа;
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = НомерСтроки;
				Попытка
					КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Исключение
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецПопытки;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Не задано значение";
			КонецЕсли;

		КонецЕсли;
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
		
КонецФункции

// Проверяет корректность заполнения показателя (по дополнительному описанию).
// Параметры
// НазваниеОтчета - пользовательское представление отчета.
// Стр - строка таблицы значений, содержащая описание показателя, который требуется проверить
// Значение - значение показателя
// ВыводитьСообщения - признак, указывающий на необходимость добавления описания ошибки
// (ошибка - отсутствие значения у обязательного к заполнению показателя) в таблицу сообщений, 
// определенную в модуле формы, из которой вызвана функция
// ФормаВыводаСообщений - форма, из которой была вызвана функция
Функция ПроверитьНаКорректность(НазваниеОтчета, Стр, Значение, ВыводитьСообщения, НомерСтраницы = Неопределено, ФормаВыводаСообщений = Неопределено) Экспорт
	
	ДопОписание = СокрЛП(Стр.ДопОписание);
	Если ПустаяСтрока(ДопОписание) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ТипЗнч(Значение) = Тип("Строка") И ЭтоКодПоказателяП(Стр.КодПоказателяПоСоставу) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ДопОписание = "ИНН" Тогда
		Если НЕ ИННСоответствуетТребованиямБезТипа(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				Попытка
					КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Исключение
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецПопытки;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Неверно задан ИНН";
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли ДопОписание = "КПП" Тогда
		
		Если НЕ КППСоответствуетТребованиям(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				Попытка
					КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Исключение
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецПопытки;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Неверно задан КПП";
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	ИначеЕсли ДопОписание = "КБК" Тогда
		
	ИначеЕсли ДопОписание = "ОКАТО" Тогда
		
	ИначеЕсли ДопОписание = "ОГРН" Тогда
		
		Если НЕ ОГРНСоответствуетТребованиям(Значение) Тогда
			Если ФормаВыводаСообщений <> Неопределено Тогда
				НовСтр = ФормаВыводаСообщений.ТаблицаСообщений.Добавить();
				НовСтр.Раздел = Стр.ИмяПоляТаблДокумента;
				НовСтр.Строка = СтрокаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Графа = ГрафаПоКодуПоказателя(Стр.КодПоказателяПоСоставу);
				НовСтр.Страница = НомерСтраницы;
				НовСтр.СтрокаПП = Неопределено;
				Попытка
					КодНаФорме = Стр.КодПоказателяПоСтруктуре;
				Исключение
					КодНаФорме = Стр.КодПоказателяПоФорме;
				КонецПопытки;
				НовСтр.ИмяЯчейки = ?(ПустаяСтрока(КодНаФорме), Стр.КодПоказателяПоСоставу, КодНаФорме); 
				НовСтр.Описание = "Неверно задан ОГРН";
			КонецЕсли;
			Возврат 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает номер раздела для указанного предписанного показателя
Функция РазделПоКодуПоказателя(КодПоказателя)
	Возврат Сред(КодПоказателя, 2, 5);
КонецФункции

// Возвращает номер строки для указанного предписанного показателя
Функция СтрокаПоКодуПоказателя(КодПоказателя)
	Возврат Сред(КодПоказателя, 9, 3);
КонецФункции

// Возвращает номер графы для указанного показателя
Функция ГрафаПоКодуПоказателя(КодПоказателя)
	КодГрафы = Строка(Число(Сред(КодПоказателя, 12, 2)));
	Возврат ?(КодГрафы = "0", "", КодГрафы);
КонецФункции

// Формирует пользовательское представление показателя по его коду
Функция УдобочитаемоеПредставлениеПоКодуПоказателя(КодПоказателя) Экспорт
	
	Если ЭтоКодПоказателяП(КодПоказателя) Тогда
		КодРаздела = Сред(КодПоказателя, 2, 5);
		КодСтроки = Сред(КодПоказателя, 9, 3);
		КодГрафы = Строка(Число(Сред(КодПоказателя, 12, 2)));
		Возврат "Раздел " + КодРаздела + ", Строка " + КодСтроки + ?(КодГрафы = "0", "", ", Графа " + КодГрафы);
	Иначе
		Возврат КодПоказателя;
	КонецЕсли;
	
КонецФункции

// Формирует пользовательское представление документа вида РегламентированныйОтчет
Функция ПредставлениеДокументаРеглОтч(Док) Экспорт
	
	Представление = "" + Док.НаименованиеОтчета + " за " + ПредставлениеПериода(НачалоДня(Док.ДатаНачала), КонецДня(Док.ДатаОкончания), "ФП=Истина");
	Если Док.Вид = 0 Тогда
		Представление = Представление + " (Первичный";
	Иначе
		Представление = Представление + " (Корректирующий, номер корректировки " + Док.Вид;
	КонецЕсли;
	Если ПустаяСтрока(Док.КодИМНС) Тогда
		Представление = Представление + ")";
	Иначе
		Представление = Представление + ". ИФНС: " + СокрЛП(Док.КодИМНС) + ")";
	КонецЕсли;
	Возврат Представление;
	
КонецФункции

// Проверяет правильность заполнения Ф.И.О.
//
Функция ФИОНаписаноВерно(Знач СтрокаПараметр, ПроверятьТолькоРусскиеБуквы = Ложь) Экспорт
	
	СтрокаПараметр = СокрЛП(СтрокаПараметр);
	
	СписокДопустимыхЗначений = Новый Соответствие;
	СписокДопустимыхЗначений.Вставить(КодСимвола(" "), " ");
	СписокДопустимыхЗначений.Вставить(КодСимвола("-"), "-");
	СписокДопустимыхЗначений.Вставить(КодСимвола("ё"), "ё");
	СписокДопустимыхЗначений.Вставить(КодСимвола("Ё"), "Ё");
	
	КодA = КодСимвола("A");
	КодZ = КодСимвола("z");
	КодА = КодСимвола("А");
	КодЯ = КодСимвола("я");
	Если  ПроверятьТолькоРусскиеБуквы Тогда
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если ((Код >= КодА) И (Код <= КодЯ)) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Сч = 1 По СтрДлина(СтрокаПараметр) Цикл
			Код = КодСимвола(СтрокаПараметр, Сч);
			Если (((Код >= КодA) И (Код <= КодZ)) ИЛИ ((Код >= КодА) И (Код <= КодЯ))) ИЛИ (СписокДопустимыхЗначений.Получить(Код) <> Неопределено) Тогда
				Продолжить;
			Иначе
				Возврат 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	Возврат 1;
	
КонецФункции // ФИОНаписаноВерно()

// Возвращает значение первого значащего из реквизитов, указанных в параметрах.
// Если оба реквизита неопределены, функция возвращает Неопределено
Функция ПолучитьРеквизит(Реквизит1, Реквизит2) Экспорт
	Если Реквизит1 <> Неопределено И Не ПустаяСтрока(Реквизит1) тогда
		Возврат Реквизит1;
	ИначеЕсли Реквизит2 <> Неопределено И НЕ Пустаястрока(Реквизит2) Тогда
		Возврат Реквизит2;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

// Создает и возвращает копию структуры Структура1
Функция СкопированнаяСтруктура(Структура1) Экспорт
	
	Структура2 = Новый Структура;
	
	Для Каждого Зап из Структура1 Цикл
		Структура2.Вставить(Зап.Ключ, Зап.Значение);
	КонецЦикла;
	
	Возврат Структура2;
	
КонецФункции

// Возвращает количество строк, соответствующих предписанным показателям 
// в указанном ТекстовомДокументе
Функция ПолучитьКоличествоПоказателей(Текст) Экспорт

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние("Определение количества выгруженных показателей ...");
	#КонецЕсли

	КоличествоПоказателей = 0;

	Для НомСтр = 1 По Текст.КоличествоСтрок() Цикл

		ТекСтр = СокрЛ(Текст.ПолучитьСтроку(Текст.КоличествоСтрок() - НомСтр + 1));

		Если Лев(ТекСтр, 11) = "КолПокФОтч:" Тогда
			Прервать;
		КонецЕсли;

		Если СтрДлина(ТекСтр)<14 Тогда
			Продолжить;
		КонецЕсли;

		Если (Сред(ТекСтр, 1, 1) = "П") и (Сред(ТекСтр, 14, 1) = ":") Тогда

			ЭтоПоказатель = Ложь;

			Для НСимв = 2 По 13 Цикл

				ТекСимв = Сред(ТекСтр, НСимв, 1);

				Если (ТекСимв = "0") или (ТекСимв = "1") ИЛИ (ТекСимв = "2") ИЛИ (ТекСимв = "3") ИЛИ (ТекСимв = "4")
					ИЛИ (ТекСимв = "5") ИЛИ (ТекСимв = "6") ИЛИ (ТекСимв = "7") ИЛИ (ТекСимв = "8") ИЛИ (ТекСимв = "9") Тогда

					ЭтоПоказатель = Истина;

				Иначе

					ЭтоПоказатель = Ложь;
					Прервать;

				КонецЕсли;

			КонецЦикла;

			Если ЭтоПоказатель Тогда
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	#Если ТолстыйКлиентОбычноеПриложение Тогда
		Состояние(Неопределено);
	#КонецЕсли

	Возврат Формат(КоличествоПоказателей, "ЧН=; ЧГ=0");

КонецФункции

//Находит строку в тексте с определением параметра КолПокФОтч
Функция НайтиКолПокФОтч(Текст) Экспорт

	Для Сч = 1 По Текст.Количествострок() Цикл

		ТекИнд = Текст.Количествострок() - Сч + 1;
		Если Лев(Текст.ПолучитьСтроку(ТекИнд), 11) = "КолПокФОтч:" Тогда
			Возврат ТекИнд;
		КонецЕсли;

	КонецЦикла;

	Возврат -1;

КонецФункции

// Преобразовывает исходную строку по формату представления реквизитов типа ФИО.
// Разделительные пробелы заменяет запятыми и преобразовывает символы в верхний
// регистр.
// 
// Возвращаемое значение:
//   строка, преобразованная по формату МНС.
//
Функция СтрЗаменитьПробелы(ИсхСтрока) Экспорт
	
	ПромСтр=СокрЛП(ИсхСтрока); 
	
	Если ПустаяСтрока(ПромСтр) Тогда
		ПромСтр = ",,";
		
		Возврат ПромСтр;
	КонецЕсли;

	// сначала удаляем возможный недопустимый символ '.'
	ЧП = СтрЧислоВхождений(ПромСтр,".");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр=СтрЗаменить(ПромСтр,"."," ");
			ПромСтр=РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// Число разделительных пробелов
	ЧП=СтрЧислоВхождений(ПромСтр," ");
	Если ЧП>0 Тогда
		Для К=1 По ЧП Цикл
			РезСтр  = СтрЗаменить(ПромСтр," ",",");
			ПромСтр = РезСтр;
		КонецЦикла; 
	КонецЕсли;
	
	// проверяем соответствие формату представления
	КолЗап = СтрЧислоВхождений(ПромСтр,",");
	Если КолЗап < 2 Тогда
		// дополняем недостающими запятыми
		Для Ном=(КолЗап+1) По 2 Цикл
			ПромСтр=ПромСтр+",";
		КонецЦикла;
	ИначеЕсли КолЗап > 2 Тогда
		Пока СтрЧислоВхождений(ПромСтр, ",") <> 2 Цикл
			НайденПовтор = 0;
			
			ПозицияЗапятой = Найти(ПромСтр, ",");
			Если Сред(ПромСтр, ПозицияЗапятой + 1, 1) = "," Тогда
				НачПозиция	 = ПозицияЗапятой;
				НайденПовтор = 1;
			Иначе
				ПозицияЗапятой2 = Найти(Сред(ПромСтр, ПозицияЗапятой + 1), ",");
				Если Сред(ПромСтр, ПозицияЗапятой + ПозицияЗапятой2 + 1, 1) = "," Тогда
					НачПозиция	 = ПозицияЗапятой + ПозицияЗапятой2;
					НайденПовтор = 1;
				КонецЕсли;
			КонецЕсли;	
			
			Если НайденПовтор = 1 Тогда
				ПромСтр = Лев(ПромСтр, НачПозиция) + Сред(ПромСтр, НачПозиция + 2);
			Иначе
				Если Прав(ПромСтр, 1) = "," Тогда
					// лишние хвостовые пробелы удаляем
					ПромСтр = Лев(ПромСтр, СтрДлина(ПромСтр) - 1);
				Иначе
					// лишние запятые заменяем пробелами
					ПромСтр = Лев(ПромСтр, ПозицияЗапятой - 1) + " " + Сред(ПромСтр, ПозицияЗапятой + 1); 
				КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
	КонецЕсли;
		
	Возврат ВРег(ПромСтр);         
	
КонецФункции // СтрЗаменитьПробелы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УНИВЕРСАЛЬНОЙ ПЕЧАТИ
//

// Проверяет принадлежность строки табличного документа по номеру, указанному
// в параметре СледСтрока, группе строк ГруппаСтрок табличного документа  
Функция ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок)
	Для Каждого ГруппаСтрок Из ГруппыСтрок Цикл
		Если ГруппаСтрок.Верх <= СледСтрока И ГруппаСтрок.Низ >= СледСтрока Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ЕстьСоответствующаяОбластьГруппСтрок()

// Возвращает максимальное количество строк многострочных частей,
// описываемых в структуре МногострочныеЧасти
Функция МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти)
	Максимум = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Максимум = Макс(Максимум, Эл.Значение.Количество());
	КонецЦикла;
	Возврат Максимум;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Проверяет является ли описываемая в элементе списка значений
// ЭлСпКоорд строка частью одной из многострочных частей, описываемых в 
// структуре МногострочныеЧасти
Функция ЭтоОднаИзМногострочныхЧастей(ЭлСпКоорд, МногострочныеЧасти, ШагСтроки = 1)
	Коорд = ЭлСпКоорд.Значение;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Для Каждого ЭлСп Из Эл.Значение Цикл
			Если Число(ЭлСп.Представление) + ШагСтроки - 1 = Коорд Тогда
				Возврат Эл.Значение;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // МаксимальноеКоличествоОбластейМногострочнойЧасти()

// Разбивает табличный документ, соответствующий разделу с именем ИмяРаздела
// на части, ограниченные горизонтальным разделителем страниц, верхней или нижней границами
// табличного документа.
Функция ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяРаздела];
	КолСтрок = ТаблПоле.ВысотаТаблицы;
	НачСтрока = 1;
	Для Сч = 1 По КолСтрок Цикл
		Если ТаблПоле.Область(Сч, 0, Сч, 0).КонецСтраницы Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = НачСтрока;
			НовСтр.Низ = Сч;
			НачСтрока = Сч + 1;
		КонецЕсли;
	КонецЦикла;
	Если (Карта.Количество() = 0) ИЛИ (Карта.Получить(Карта.Количество() - 1).Низ <> КолСтрок) Тогда
		НовСтр = Карта.Добавить();
		НовСтр.Верх = ?(Карта.Количество() = 1, 1, Карта.Получить(Карта.Количество() - 2).Низ + 1);
		НовСтр.Низ = КолСтрок;
	КонецЕсли;
	Возврат Карта;
КонецФункции // ПолучитьКартуЛистовРаздела()

// ПолучитьПоКодамРегистрациюВИФНС
Функция ПолучитьПоКодамРегистрациюВИФНС(Организация, КодНО, КПП = Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацияВИФНС.Ссылка
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	               |ГДЕ
	               |	РегистрацияВИФНС.Владелец = &Организация
				   |	И РегистрацияВИФНС.Код = &КодНО
				   |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацияВИФНС.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьПоКодамРегистрациюВИФНС

#Если ТолстыйКлиентОбычноеПриложение Тогда
	
// Возвращает координату нижней строки области с именем ИмяОбласти раздела с именем Раздел.
// Для областей, ограничивающих многострочные части раздела, возвращается координата
// нижней строки многострочной части.
Функция ПолучитьНизМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	Низ = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(Низ, ГруппыСтрок) Цикл
		Низ = Низ + 1;
	Конеццикла;
	Возврат Низ - 1;
КонецФункции //ПолучитьНизМногострочнойЧасти()

// Возвращает строки многострочной части в виде табличных документов
// Параметры:
// Форма - объект Форма из которого вызвана печать
// Раздел - имя печатаемого раздела
// ИмяОбласти - имя области многострочной части
Функция ПолучитьОбластиМногострочнойЧасти(Форма, Раздел, ИмяОбласти)
	
	ОбластиМногострочнойЧасти = Новый СписокЗначений;
	Если ИмяОбласти = Неопределено Тогда
		Возврат ОбластиМногострочнойЧасти;
	КонецЕсли;
	ГруппыСтрок = ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел);
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Обл = ТаблПоле.ПолучитьОбласть(ИмяОбласти);
	
	Шаг = ПолучитьШагСтрокиДляТабличногоПоля(Обл);
	
	Для Сч = 1 По Обл.ВысотаТаблицы / Шаг Цикл
		ОблВрем = Обл.ПолучитьОбласть((Сч - 1) * Шаг + 1, 0, Сч * Шаг, 0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, ТаблПоле.Области.Найти(ИмяОбласти).Верх + (Сч - 1) * Шаг);
	КонецЦикла;
	СледСтрока = ТаблПоле.Области.Найти(ИмяОбласти).Низ + 1;
	Пока Не ЕстьСоответствующаяОбластьГруппСтрок(СледСтрока, ГруппыСтрок) Цикл
		ОблВрем = ТаблПоле.ПолучитьОбласть(СледСтрока,0,СледСтрока + Шаг - 1,0);
		ОбластиМногострочнойЧасти.Добавить(ОблВрем, СледСтрока);
		СледСтрока = СледСтрока + Шаг;
	Конеццикла;
	Возврат ОбластиМногострочнойЧасти;
	
КонецФункции // ПолучитьОбластиМногострочнойЧасти()

// Возвращает массив имен многострочных частей табличного поля с именем ИмяТабличногоПоля.
// Поиск многострочных частей в табличном поле ограничивается верхней и нижней координатами - 
// Верх и Низ соответственно.
Функция	ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Верх, Низ)
	ТаблДок = Форма.ЭлементыФормы[ИмяТабличногоПоля];
	МассивМногострочныхЧастей = Новый Массив;
	Для Каждого Обл Из ТаблДок.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки И Обл.Верх >= Верх И Обл.Низ <= Низ И Найти(ВРЕГ(Обл.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			МассивМногострочныхЧастей.Добавить(Обл.Имя);
		КонецЕсли;
	КонецЦикла;
	Если МассивМногострочныхЧастей.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат МассивМногострочныхЧастей;
	КонецЕсли;
КонецФункции // ПолучитьКартуМногострочныхСекцийЛиста()

// Возвращает количество готовых к выводу на печать листов формата A4 для 
// раздела с именем ИмяЛиста. Сфомированные листы хранятся в списке значений мПечатныеФормы
Функция КоличествоЛистовПоИмениЛиста(мПечатныеФормы, ИмяЛиста)
	КоличествоВхождений = 0;
	Для Каждого ЭлСп Из мПечатныеФормы Цикл
		Если ЭлСп.Представление = ИмяЛиста Тогда
			КоличествоВхождений = КоличествоВхождений + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоВхождений;
КонецФункции

// Формирует готовый к выводу на печать лист формата A4. Лист - это область табличного документа,
// ограниченная снизу и сверху горизонтальными разделителями страниц или границами
// табличного документа.
// Параметры:
// Форма - форма отчета, из которой вызывается печать
// СтруктураПараметровЛиста - структура, содержащая параметры исходного листа
Процедура ВывестиНаПечатьЛистОбщая(Форма, СтруктураПараметровЛиста) Экспорт
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	
	СтруктураПараметровЛиста.Вставить("ВидПечати", "Пакетная печать");	

	ИмяРаздела = Сред(ИмяТабличногоПоля, 24);
	СтруктураПараметровЛиста.Вставить("ИмяРаздела", ИмяРаздела);	
	
	КартаСтраницРаздела = ПолучитьКартуЛистовРаздела(Форма, ИмяРаздела);
	НомЛиста = 0;
	
	Для Каждого Стр Из КартаСтраницРаздела Цикл
		
		НомЛиста = НомЛиста + 1;
		СтруктураПараметровЛиста.Вставить("Верх", Стр.Верх);
		СтруктураПараметровЛиста.Вставить("Низ", Стр.Низ);
		
		МассивМногострочныхЧастей = Неопределено;
		
		Состояние(Форма.Заголовок + ". Формирование печатной формы " + ИмяЛиста + ". Лист №" + (КоличествоЛистовПоИмениЛиста(Форма.мПечатныеФормы, ИмяЛиста) + 1));
		
		СтруктураПараметровЛиста.Вставить("МногострочнаяЧасть", ПолучитьКартуМногострочныхСекцийЛиста(Форма, ИмяТабличногоПоля, Стр.Верх, Стр.Низ));
			
		ПечатныеЛисты = ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста);
		
		Для Каждого Эл Из ПечатныеЛисты Цикл
			Форма.мПечатныеФормы.Добавить(Эл, ИмяЛиста);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ВывестиНаПечатьЛистОбщая()

// Пытается проставить номер страницы НомерЛиста в соответствующие ячейки табличного документа ТаблДок.
// Возвращает Истина, если удалось проставить номер. В противном случае возвращает Ложь.
Функция УдалосьПроставитьНомерСтраницы(ТаблДок,Знач НомерЛиста)
	
	ОбластиСНомерамиЛистов = Новый СписокЗначений;
	Для Каждого Обл Из ТаблДок.Значение.Области Цикл
		Если Обл.ТипОбласти <> ТипОбластиЯчеекТабличногоДокумента.Прямоугольник ИЛИ Обл.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;
		КрайнийПравыйСимвол = Прав(Обл.Имя, 1);
		Если Лев(ВРЕГ(Обл.Имя), 6) = "НОМСТР" И (КодСимвола(КрайнийПравыйСимвол) >= КодСимвола("0") И КодСимвола(КрайнийПравыйСимвол) <= КодСимвола("9"))Тогда
			ОбластиСНомерамиЛистов.Добавить(Обл, Обл.Имя);
		КонецЕсли;
		ОбластиСНомерамиЛистов.СортироватьПоПредставлению(НаправлениеСортировки.Убыв);
	КонецЦикла;
	
	Цифры = Новый Массив;
	Для Инд = 1 По 9 Цикл
		Цифра = Формат(НомерЛиста % 10, "ЧЦ=1; ЧН=0; ЧГ=");
		НомерЛиста = Цел(НомерЛиста / 10);
		Если ПустаяСтрока(Цифра) Тогда
			Прервать;
		Иначе
			Цифры.Добавить(Цифра);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 0 По ОбластиСНомерамиЛистов.Количество() - 1 Цикл
		ОбластиСНомерамиЛистов.Получить(Инд).Значение.Значение = Формат(?(Цифры.Количество() > Инд, Цифры[Инд], 0), "ЧЦ=1; ЧН=0; ЧГ=");
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // УдалосьПроставитьНомерСтраницы()

// Проставляет номера листов на каждом листе и общее количество листов на титульном;
// после нумерации выводит листыв в общую форму ПечатьРегламентированныхОтчетов.
// Параметры:
// Форма - объект типа Форма, из которого была вызвана печать.
// ВидПечати - строка, задающая действие, которое следует произвести с печатными формами: 
// непосредственная печать или предварительный просмотр.
// ПризнакНумеруемыхФорм - данный параметр следует установить в Ложь для тех
// печатных форм, в которых не предусмотрены области для нумерации листов и 
// указания общего количества листов (например, форма 4ФСС и т.п.).
Процедура ПроставитьНомераЛистов(Форма, ВидПечати, ПризнакНумеруемыхФорм = Истина) Экспорт;
	
	Если ПризнакНумеруемыхФорм Тогда
		Если Форма.мСчетчикСтраниц <> Истина Тогда
			НомерЛиста = 1;
			Для Каждого Эл Из Форма.мПечатныеФормы Цикл
				Если НЕ УдалосьПроставитьНомерСтраницы(Эл.Значение, НомерЛиста) Тогда
					Сообщить("Не удалось проставить номер страницы для " + Эл.Представление);
					Продолжить;
				КонецЕсли;
				НомерЛиста = НомерЛиста + 1;
			КонецЦикла;
			Если Форма.мПечатныеФормы.Количество() <> 0 Тогда
				ТаблДок = Форма.мПечатныеФормы.Получить(0).Значение.Значение;
				ЦифрВОбщемКоличествеЛистов = 0;
				Для ОбратныйИндекс = 1 По 9 Цикл
					Индекс = 10 - ОбратныйИндекс;
					Если ТаблДок.Области.Найти("СоставленаНа" + Индекс) <> Неопределено Тогда
						ЦифрВОбщемКоличествеЛистов = Индекс;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ВсегоЛистов = Формат(НомерЛиста - 1, "ЧЦ=" + ЦифрВОбщемКоличествеЛистов + "; ЧН=0; ЧВН=; ЧГ=");
				Для Инд = 1 По ЦифрВОбщемКоличествеЛистов Цикл
					ТекИнд = ЦифрВОбщемКоличествеЛистов - Инд + 1;
					Попытка
						ТаблДок.Области["СоставленаНа" + ТекИнд].Значение = Сред(ВсегоЛистов, ТекИнд, 1);
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НомераЛистов = Новый СписокЗначений;
	ИдентификаторФормы = ?(Форма.ВладелецФормы = Неопределено, Форма, Форма.ВладелецФормы);
	
	ПредПросмотр = роПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", ИдентификаторФормы);
	Если Форма.ВладелецФормы = Неопределено И ПредПросмотр.Открыта() Тогда
		ПредПросмотр.Закрыть();
		ПредПросмотр = роПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", Форма);
	КонецЕсли;
	ПредПросмотр.ЗакрыватьПриЗакрытииВладельца = Ложь;
	НомерЛиста = 1;
	ПредПросмотр.СписокПечатаемыхЛистов.Очистить();
	Для Каждого Эл Из Форма.мПечатныеФормы Цикл
		НовСтр = ПредПросмотр.СписокПечатаемыхЛистов.Добавить();
		НомЛиста = НомераЛистов.НайтиПоЗначению(Эл.Представление);
		Если НомЛиста = Неопределено Тогда
			НомЛиста = НомераЛистов.Добавить(Эл.Представление, "1");
			НЛиста = 1;
		Иначе
			НЛиста = Число(НомЛиста.Представление) + 1;
			НомЛиста.Представление = Строка(Число(НомЛиста.Представление) + 1);
		КонецЕсли;
		НовСтр.Наименование = Эл.Представление + ". Лист №" + НЛиста;
		Если ТипЗнч(Эл.Значение) <> Тип("ТабличныйДокумент") Тогда
			НовСтр.ТабличныйДокумент = Эл.Значение.Значение;
		Иначе
			НовСтр.ТабличныйДокумент = Эл.Значение;
		КонецЕсли;
		НовСтр.Идентификатор = Форма;
		НомерЛиста = НомерЛиста + 1;
	КонецЦикла;
	ПредПросмотр.ВидПечати = ВидПечати;
	ПредПросмотр.Открыть();
	
КонецПроцедуры // ПроставитьНомераЛистов()

// Для раздела с именем Раздел формирует таблицу значений, в которой перечисляются
// имена и вертикальные координаты областей - групп строк табличного документа, соответствующего
// данному разделу.
Функция ПолучитьКартуИменованныхГруппСтрок(Форма, Раздел)
	Карта = Новый ТаблицаЗначений;
	Карта.Колонки.Добавить("Верх");
	Карта.Колонки.Добавить("Низ");
	ТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел];
	Для Каждого Обл Из ТаблПоле.Области Цикл
		Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			НовСтр = Карта.Добавить();
			НовСтр.Верх = Обл.Верх;
			НовСтр.Низ = Обл.Низ;
		КонецЕсли;
	КонецЦикла;
	Возврат Карта;
КонецФункции //ПолучитьКартуИменованныхГруппСтрок()

// Для заданной по номеру НомСтр строки многострочной части, описываемой в элементе 
// списка значений МногострочныеЧасти, формирует и возвращает табличный документ,
// в котором очищены ячейки, содержащие значения и не защищенные от изменения пользователем.
Функция ПолучитьПустуюСтрокуМногострочнойЧасти(МногострочныеЧасти, НомСтр)
	ПерваяСтрока = МногострочныеЧасти.Значение.Получить(НомСтр).Значение;
	ИтоговыйТабличныйДокумент = Новый ТабличныйДокумент;
	ИтоговыйТабличныйДокумент.Вывести(ПерваяСтрока);
	Для Каждого Область Из ИтоговыйТабличныйДокумент.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение Тогда //И НЕ Область.Защита Тогда
			Область.Значение = Неопределено;
		КонецЕсли;
	КонецЦикла;
	Возврат ИтоговыйТабличныйДокумент;
КонецФункции // ПолучитьПустуюСтрокуМногострочнойЧасти()

// Возвращает печатную форму (лист формата A4) листа раздела, не содержащего многострочные части.
// Параметры исходного листа задаются в структуре СтруктураПараметровЛиста.
Функция ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем Верх;
	Перем Низ;

	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);

	ПечатнаяФорма = Новый ТабличныйДокумент();
	
	ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
	ПечатнаяФорма.ОтображатьСетку     = Ложь;
	ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
	ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
	ПечатнаяФорма.Автомасштаб         = Истина;
	ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
	
	ТабличноеПоле = Форма.ЭлементыФормы[ИмяТабличногоПоля];
	
	ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

	// Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			// Добавляем в список имя области и ее верхнюю координату.
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			СписокВыводимыхНаПечатьОбластей.Добавить(Область.Верх, Область.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();

	// Выполняем цикл до тех пор, пока не закончатся области, выводимые на печать.
	Пока СписокВыводимыхНаПечатьОбластей.Количество() > 0 Цикл
		
		// В том случае, если в имени области не встречается строка "ПустаяСтрока", то
		// выводим область в результирующую таблицу и удаляем из списка.
		Если СтрЧислоВхождений(ВРег(СписокВыводимыхНаПечатьОбластей[0].Представление), ВРег("ПустаяСтрока")) = 0 Тогда
			
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
			СписокВыводимыхНаПечатьОбластей.Удалить(0);
			
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
			Продолжить;
			
		КонецЕсли;
		
		// Получаем области "ПустаяСтрока" и "Ограничители", одновременно удаляя их из списка.
		ОбластьПустаяСтрока = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		ОбластьОграничители = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей[0].Представление);
		СписокВыводимыхНаПечатьОбластей.Удалить(0);
		
		// Создаем массив выводимых областей.
		ВыводимыеОбласти = Новый Массив();
		
		// Добавляем в массив выводимые области таблицы для того, 
		// чтобы проверить: поместятся ли они на текущий лист.
		ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ОбластьОграничители, Ложь);
		
		Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
			
			// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
			флВыводимыеОбластиУмещаютсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма,ВыводимыеОбласти, Ложь);
			
			Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
				ПечатнаяФорма.Вывести(ОбластьПустаяСтрока);
			Иначе
				ПечатнаяФорма.Вывести(ОбластьОграничители);
				ПечатнаяФорма.ВывестиГоризонтальныйРазделительСтраниц();
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;		
	
	Если ВидПечати = "ПоказатьБланк" Тогда
		ПечатнаяФорма.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ПечатнаяФорма.Напечатать();
	КонецЕсли;
	
	Возврат ПечатнаяФорма;
	
КонецФункции // ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей()

Процедура ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ИтоговыеПоказатели" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ОбнулитьФиксированныеЧастиНаЛистах
//
Процедура ОбнулитьФиксированныеЧастиНаЛистах(ТаблДок)
	
	Для НомерИтоговыхПоказателей = 0 По 10 Цикл
		ОбластьИтоговыеПоказатели = ТаблДок.Области.Найти("ФиксируетсяНаПервомЛисте" + Формат(НомерИтоговыхПоказателей, ""));
		Если ОбластьИтоговыеПоказатели <> Неопределено Тогда
			Для Стр = ОбластьИтоговыеПоказатели.Верх По ОбластьИтоговыеПоказатели.Низ Цикл
				Для Кол = ОбластьИтоговыеПоказатели.Лево По ОбластьИтоговыеПоказатели.Право Цикл
					ТекОбл = ТаблДок.Область(Стр, Кол, Стр, Кол);
					Если ТекОбл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТекОбл.СодержитЗначение = Истина Тогда
						ТекОбл.Значение = Неопределено;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбнулитьФиксированныеЧастиНаЛистах

// Возвращает список значений, содержащий печатные формы - листы формата A4, готовые к выводу на печать.
// Листы формируются на основании исходного табличного документа, параметры которого и другие настройки
// печати хранятся в структуре СтруктураПараметровЛиста.
// Процедура рассчитана на печать разделов, содержащих одну или несколько многострочных частей.
Функция ВывестиНаПечатьЛистРаздела(Форма, СтруктураПараметровЛиста)
	Перем ИмяЛиста;           // имя выводимого на печать листа;
	Перем Ориентация;         // ориентация страницы;
	Перем ИмяТабличногоПоля;  // имя табличного поля, который выводится на печать;
	Перем ИмяОбластиТаблПоля; // имя области дабличного документа, выводимой на печать;
	Перем ВидПечати;          // строка, задающая способ печати
	Перем ИмяОбластиМногострочнойЧасти;
	Перем ИмяРаздела;
	Перем МногострочныеЧасти;
	Перем Верх;
	Перем Низ;
	
	СписокПечатныхФорм = Новый СписокЗначений;
	
	СтруктураПараметровЛиста.Свойство("НаименованиеЛиста",  ИмяЛиста);
	СтруктураПараметровЛиста.Свойство("ОриентацияЛиста",    Ориентация);
	СтруктураПараметровЛиста.Свойство("ИмяТабличногоПоля",  ИмяТабличногоПоля);
	СтруктураПараметровЛиста.Свойство("ИмяОбластиТаблПоля", ИмяОбластиТаблПоля);
	СтруктураПараметровЛиста.Свойство("ВидПечати",          ВидПечати);
	СтруктураПараметровЛиста.Свойство("ИмяРаздела",         ИмяРаздела);
	СтруктураПараметровЛиста.Свойство("МногострочнаяЧасть", ИмяОбластиМногострочнойЧасти);
	СтруктураПараметровЛиста.Свойство("Верх",               Верх);
	СтруктураПараметровЛиста.Свойство("Низ",                Низ);
	
	Если ИмяОбластиМногострочнойЧасти = Неопределено Тогда
		СписокПечатныхФорм.Добавить(ВывестиНаПечатьЛистРазделаБезМногострочныхЧастей(Форма, СтруктураПараметровЛиста));
		Возврат СписокПечатныхФорм;
	КонецЕсли;
	
	//Если ИмяОбластиМногострочнойЧасти.Количество() = 1 Тогда
	//	СписокПечФорм = ВывестиНаПечатьЛистРазделаСОднойМногострочнойЧастью(Форма, СтруктураПараметровЛиста);
	//	Для Каждого Эл Из СписокПечФорм Цикл
	//		СписокПечатныхФорм.Добавить(Эл.Значение);
	//	КонецЦикла;
	//	Возврат СписокПечатныхФорм;
	//КонецЕсли;
	
	//ИмяЛиста = "";
	//Ориентация = ОриентацияСтраницы.Ландшафт;
	ИмяТабличногоПоля = "ПолеТабличногоДокумента" + ИмяРаздела;
	
	ТабличноеПоле = Форма.ЭлементыФормы[ИмяТабличногоПоля];

    // Создаем список выводимых на печать областей таблицы.
	СписокВыводимыхНаПечатьОбластей = Новый СписокЗначений();
	
	// Перебираем все области таблицы и добавляем в список 
	// только те области, которые являются секциями таблицы.
	Для Каждого Область Из ТабличноеПоле.Области Цикл
		
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
			
			Если Область.Верх < Верх ИЛИ Область.Низ > Низ Тогда
				Продолжить;
			КонецЕсли;
			
			Если Найти(ВРЕГ(Область.Имя), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				СписокВыводимыхНаПечатьОбластей.Добавить(ПолучитьНизМногоСтрочнойЧасти(Форма, ИмяРаздела, Область.Имя), Область.Имя);
			Иначе
				СписокВыводимыхНаПечатьОбластей.Добавить(Область.Низ, Область.Имя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МногострочныеЧасти = Новый Структура;
	Если ТипЗнч(ИмяОбластиМногострочнойЧасти) = Тип("Строка") Тогда
		МногострочныеЧасти.Вставить(ИмяОбластиМногострочнойЧасти, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, ИмяОбластиМногострочнойЧасти));
	Иначе
		Для Каждого Эл Из ИмяОбластиМногострочнойЧасти Цикл
			МногострочныеЧасти.Вставить(Эл, ПолучитьОбластиМногоСтрочнойЧасти(Форма, ИмяРаздела, Эл));
		КонецЦикла;
	КонецЕсли;
	
	// Сортируем список в порядке расположения областей в таблице (по верхней координате).
	СписокВыводимыхНаПечатьОбластей.СортироватьПоЗначению();
	флПрервать = Ложь;
	КоличествоСтрок = 0;
	
	Строки = Новый Массив;
	
	ПустойТабличныйДокумент = Новый ТабличныйДокумент;
	ЗаполнитьЗначенияСвойств(ПустойТабличныйДокумент, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	
	ПустыеСтрокиМногострочныхЧастей = Новый Массив(МногострочныеЧасти.Количество());
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		ПустыеСтрокиМногострочныхЧастей[НомСтр] = ПолучитьПустуюСтрокуМногострочнойЧасти(Эл, 0);
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	//ОчиститьМногострочныеЧастиОтПустыхСтрок(МногострочныеЧасти);
	
	НомСтр = 0;
	Для Каждого Эл Из МногострочныеЧасти Цикл
		Если Эл.Значение.Количество() = 0 Тогда
			Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
		КонецЕсли;
		НомСтр = НомСтр + 1;
	КонецЦикла;
	
	КолВоЛистов = 0;
	Пока МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Цикл
		
		//ПечатнаяФорма.Очистить();
		ПечатнаяФорма = Новый ТабличныйДокумент();
		
		ПечатнаяФорма.ОтображатьЗаголовки = Ложь;
		ПечатнаяФорма.ОтображатьСетку     = Ложь;
		ПечатнаяФорма.ЧерноБелыйПросмотр  = Истина;
		ПечатнаяФорма.ЧерноБелаяПечать    = Истина;
		ПечатнаяФорма.Автомасштаб         = Истина;
		ПечатнаяФорма.ОриентацияСтраницы  = Ориентация;
		
		ЗаполнитьЗначенияСвойств(ПечатнаяФорма, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
		
		НомСтр = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Если Эл.Значение.Количество() = 0 Тогда
				Эл.Значение.Добавить(ПустыеСтрокиМногострочныхЧастей[НомСтр], "-1");
			КонецЕсли;
			НомСтр = НомСтр + 1;
		КонецЦикла;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 Тогда
				ОбластьОграничители = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				ОбластьПустаяСтрока = ОбластьВыводимаяНаПечать;
				Продолжить;
			КонецЕсли;                                                                                   
			Если МногострочныеЧасти.Свойство(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление) Тогда
				Продолжить;
			КонецЕсли;
			ПечатнаяФорма.Вывести(ОбластьВыводимаяНаПечать);
		КонецЦикла;
		
		Строки.Очистить();
		Инд = 0;
		Для Каждого Эл Из МногострочныеЧасти Цикл
			Попытка
				Строки.Добавить(Эл.Значение.Получить(0).Значение);
			Исключение
				Строки.Добавить(ПустыеСтрокиМногострочныхЧастей[Инд]);
			КонецПопытки;
			Инд = Инд + 1;
		КонецЦикла;
		Строки.Добавить(ОбластьПустаяСтрока);
		Строки.Добавить(ОбластьОграничители);
		
		Ном = 1;
		Пока ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ПечатнаяФорма, Строки, Ложь) Цикл
			Ном = Ном + 1;
			НомерЭлементаТабличнойЧасти = 0;
			Для Каждого Эл Из МногострочныеЧасти Цикл
				Если Эл.Значение.Количество() > 0 Тогда
					ПечатнаяФорма.Вывести(Строки[НомерЭлементаТабличнойЧасти]);				
					НомерЭлементаТабличнойЧасти = НомерЭлементаТабличнойЧасти + 1;
				КонецЕсли;
			КонецЦикла;

			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) >= Ном Тогда
				НомерМнЧ = 0;
				Для Каждого Эл Из МногострочныеЧасти Цикл
					Попытка
						Строки[НомерМнЧ] = Эл.Значение.Получить(Ном - 1).Значение;
					Исключение
						Строки[НомерМнЧ] = ПустойТабличныйДокумент;//?(Ном = 1, ПустыеСтрокиМногострочныхЧастей[НомерМнЧ], ПустойТабличныйДокумент);
					КонецПопытки;
					НомерМнЧ = НомерМнЧ + 1;
				КонецЦикла;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		КоличествоВыводимыхСтрок = Ном - 1;
		//Защита против частей разделов, которые не помещаются на лист, если даже
		//выводить по одной строке из каждой многострочной части.
		Если КоличествоВыводимыхСтрок = 0 Тогда
			КоличествоВыводимыхСтрок = 1;
		КонецЕсли;
		
		ИтоговыйТаблДок = Новый ТабличныйДокумент;
		ИтоговыйТаблДок.ОтображатьЗаголовки = Ложь;
		ИтоговыйТаблДок.ОтображатьСетку     = Ложь;
		ИтоговыйТаблДок.ЧерноБелыйПросмотр  = Истина;
		ИтоговыйТаблДок.ЧерноБелаяПечать    = Истина;
		ИтоговыйТаблДок.Автомасштаб         = Истина;
		ИтоговыйТаблДок.ОриентацияСтраницы  = Ориентация;
		ЗаполнитьЗначенияСвойств(ИтоговыйТаблДок, ТабличноеПоле, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");

		КолвоЛистов = КолвоЛистов + 1;
		
		НомерМногострочнойЧасти = -1;
		
		Для Сч = 0 По СписокВыводимыхНаПечатьОбластей.Количество() - 1 Цикл
			ОбластьВыводимаяНаПечать = ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление);
			Если Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ОГРАНИЧИТЕЛИ") <> 0 
				  ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "ПУСТАЯСТРОКА") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			Рез = ЭтоОднаИзМногострочныхЧастей(СписокВыводимыхНаПечатьОбластей.Получить(Сч), МногострочныеЧасти, ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле.ПолучитьОбласть(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление)));
			//Если Рез = Ложь И Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
			//	Продолжить
			//КонецЕсли;
			Если Рез <> Ложь ИЛИ Найти(ВРЕГ(СписокВыводимыхНаПечатьОбластей.Получить(Сч).Представление), "МНОГОСТРОЧНАЯЧАСТЬ") <> 0 Тогда
				НомерМногострочнойЧасти = НомерМногострочнойЧасти + 1;
				ТаблЧастьВыведена = Истина;
				Если Рез = Ложь Тогда
					НомМнЧ = -1;
					Для Каждого ЭлСтр Из МногострочныеЧасти Цикл
						НомМнЧ = НомМнЧ + 1;
						Если НомМнЧ = НомерМногострочнойЧасти Тогда
							ИтоговыйТаблДок.Вывести(ЭлСтр.Значение.Получить(0).Значение);
							ЭлСтр.Значение.Удалить(0);
							Прервать;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() >= Инд + 1 Тогда
							ИтоговыйТаблДок.Вывести(Рез.Получить(Инд).Значение);
						КонецЕсли;
					КонецЦикла;
					Для Инд = 0 По КоличествоВыводимыхСтрок - 1 Цикл
						Если Рез.Количество() > 0 Тогда
							Рез.Удалить(0);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			ИтоговыйТаблДок.Вывести(ОбластьВыводимаяНаПечать);				
		КонецЦикла;
		
		ВыводимыеОбласти = Новый Массив;
		ВыводимыеОбласти.Добавить(ОбластьОграничители);
		//ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
		
		// Проверяем вывод области "Ограничители".
		флОбластьОграничителиУмещаетсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти, Ложь);
		
		// Поиск "Правого присоединения" - секции с ИНН, КПП, номером страницы, находящейся справа
		ТаблПоле = ТабличноеПоле.ПолучитьОбласть(Верх, , Низ, );
		ПравоеПрисоединение = Неопределено;
		Для НомерПравогоПрисоединения = 0 По 10 Цикл
			ПравоеПрисоединение = ТаблПоле.Области.Найти("ПравоеПрисоединение" + Формат(НомерПравогоПрисоединения, ""));
			Если ПравоеПрисоединение <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флОбластьОграничителиУмещаетсяНаСтраницу Тогда
			
			ВыводимыеОбласти.Добавить(ОбластьПустаяСтрока);
			
			Пока флОбластьОграничителиУмещаетсяНаСтраницу Цикл
				
				// Проверяем вывод областей "ПустаяСтрока" и "Ограничители".
				флВыводимыеОбластиУмещаютсяНаСтраницу = ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ИтоговыйТаблДок, ВыводимыеОбласти);
				
				Если флВыводимыеОбластиУмещаютсяНаСтраницу Тогда
					ИтоговыйТаблДок.Вывести(ОбластьПустаяСтрока);
				Иначе
					ИтоговыйТаблДок.Вывести(ОбластьОграничители);
					Если ПравоеПрисоединение <> Неопределено Тогда
						ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
						//ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
					КонецЕсли;
					ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
					
					Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
						ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
					КонецЕсли;
					Если КолВоЛистов <> 1 Тогда
						ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
					КонецЕсли;
					
					Если ВидПечати = "ПоказатьБланк" Тогда
						ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
						ИтоговыйТаблДок.Напечатать();
					Иначе
						СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
					КонецЕсли;
					
					//ИтоговыйТаблДок.Показать(СокрП(Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ИтоговыйТаблДок.Вывести(ОбластьОграничители);
			Если ПравоеПрисоединение <> Неопределено Тогда
				ИтоговыйТаблДок.ВставитьОбласть(ПравоеПрисоединение, ИтоговыйТаблДок.Область(ПравоеПрисоединение.Верх, ПравоеПрисоединение.Лево, ПравоеПрисоединение.Низ, ПравоеПрисоединение.Право));
			КонецЕсли;
			ИтоговыйТаблДок.ВывестиГоризонтальныйРазделительСтраниц();
			
			Если МаксимальноеКоличествоОбластейМногострочнойЧасти(МногострочныеЧасти) > 0 Тогда
				ОбнулитьИтоговыеПоказателиНаТекущемЛисте(ИтоговыйТаблДок);
			КонецЕсли;

			Если КолВоЛистов <> 1 Тогда
				ОбнулитьФиксированныеЧастиНаЛистах(ИтоговыйТаблДок);
			КонецЕсли;

			Если ВидПечати = "ПоказатьБланк" Тогда
				ИтоговыйТаблДок.Показать(СокрП(Форма.Заголовок) + " (" + СокрП(ИмяЛиста) + ")");
			ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
				ИтоговыйТаблДок.Напечатать();
			Иначе
				СписокПечатныхФорм.Добавить(ИтоговыйТаблДок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СписокПечатныхФорм;
	
КонецФункции // ВывестиНаПечатьЛистРаздела()

// Возвращает количество строк в одной "строке многострочной части" макета.
//
// Параметры:
//	ТабличноеПоле - ТабличныйДокумент или ПолеТабличногоДокумента для которого следует определить высоту
//					"строк многострочной части".
//
Функция ПолучитьШагСтрокиДляТабличногоПоля(ТабличноеПоле)
	
	Для Инд = 0 по 9 Цикл
		ОблОпределениеВысоты = ТабличноеПоле.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, ""));
		Если ОблОпределениеВысоты <> Неопределено Тогда
			Возврат ТабличноеПоле.ПолучитьОбласть("ОпределениеВысотыСтрокиМногострочнойЧасти" + Формат(Инд, "")).ВысотаТаблицы;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// записывает в рег-р сведений новые фамилию, имя и отчество
Процедура ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество) Экспорт
	
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	СтрокаСреза = ФИОСрез.Фамилия + ФИОСрез.Имя + ФИОСрез.Отчество;
	
	Если СтрокаСреза <> (Фамилия + Имя + Отчество) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ФизЛицо = Ссылка;
		Если ПустаяСтрока(СтрокаСреза) Тогда
			МенеджерЗаписи.Период = '19800101';
		Иначе
			МенеджерЗаписи.Период = РабочаяДата;
		КонецЕсли;
		
		МенеджерЗаписи.Фамилия = Фамилия;
		МенеджерЗаписи.Имя = Имя;
		МенеджерЗаписи.Отчество = Отчество;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛЬЗУЕМЫЕ В ДРУГИХ ДЕКЛАРАЦИЯХ
//

// роВставитьДополнительнуюСтраницу
// Создает дополнительную страницу многостраничного раздела формы.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы,
//            в табличное поле которой вставляется дополнительная страница.
//  Если ИмяТекущейСтраницыПанели - неопределено, тогда берется
//  из активной ОсновнойПанели на форме.
Процедура роВставитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	Перем ТаблицаСтраницРаздела;
	Перем СтруктураДанныхДопСтрокРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	Иначе
		МаксКолвоЭкз=роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МаксКолвоЭкз", 0);
		Если МаксКолвоЭкз<>0 И Форма.мСтруктураМногостраничныхРазделов[ИмяТекущейСтраницыПанели].Количество() >= МаксКолвоЭкз Тогда
			ЗаголовокСтраницы=Форма.ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяТекущейСтраницыПанели].Заголовок;
			Сообщить("В разделе """+ЗаголовокСтраницы+""" максимальное количество экземпляров страниц равно "+МаксКолвоЭкз+".", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	// Если на листе есть многострочность, то удалим ее.
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	// Часть для подстраховки, от старой системы хранения многостраничности
	Если ТаблицаСтраницРаздела.Количество() = 0 Тогда
		// создаем исходную таблицу значений многостраничных разделов
		СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Добавить();
		СтрТаблицаСтраницы.АктивнаяСтраница = Истина;
	КонецЕсли;

	// Найдем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда

		// Убираем активность у текущей страницы
		СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

		// Добавляем новую страницу
		СтрНоваяСтраница = ТаблицаСтраницРаздела.Добавить();

		// Присваиваем представление по умолчанию
		СтрНоваяСтраница.Представление      = "Новая страница";
		СтрНоваяСтраница.АвтоматическоеПредставление      = Истина;

		// Ставим признак активной страницы
		СтрНоваяСтраница.АктивнаяСтраница   = Истина;

		КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
		Если ТипЗнч(КолМногострочныхЧастей) = Тип("ТаблицаЗначений") Тогда
			КолМногострочныхЧастей = КолМногострочныхЧастей.Количество();
		КонецЕсли;

		// Если есть многострочность, то она очищена в проц роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		// Если многострочность есть, то она удалится и запустится Расчет на стадии роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
		Если КолМногострочныхЧастей = 0 Тогда
				// Очищаем текущее поле
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

		Если КолМногострочныхЧастей = 0 Тогда
			// Выполняем расчет показателей добавленной страницы
			Форма.Расчет(ИмяТекущейСтраницыПанели);
		КонецЕсли;

		//ТекущийЭлемент     = ТекТабличноеПоле;
		Форма.Модифицированность = Истина;

	КонецЕсли;

	роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роВставитьДополнительнуюСтраницу()

// роДоступностьКнопокЛистания
// Процедура управляет доступностью кнопок "<" и ">" листания страниц
// многостраничных разделов формы
//
// Параметры:
//  НомерТекущейСтраницы - число, порядковый номер текущей страницы;
//  КоличествоСтраниц    - число, количество страниц многостраничного раздела;
//  ИмяТекСтраницы       - строка, имя текущей страницы основной панели формы.
//
Процедура роДоступностьКнопокЛистания(Форма, НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели) Экспорт

	ДоступностьКнопкаПредыдущаяСтраница = Ложь;
	ДоступностьКнопкаСледующаяСтраница  = Ложь;

	Если НомерТекущейСтраницы > 1 Тогда
		ДоступностьКнопкаПредыдущаяСтраница = Истина;
	КонецЕсли;

	Если НомерТекущейСтраницы < КоличествоСтраниц Тогда
		ДоступностьКнопкаСледующаяСтраница = Истина;
	КонецЕсли;

	Форма.ЭлементыФормы["КнопкаПредыдущаяСтраница" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаПредыдущаяСтраница;
	Форма.ЭлементыФормы["КнопкаСледующаяСтраница"  + ИмяТекущейСтраницыПанели].Доступность = ДоступностьКнопкаСледующаяСтраница;
	
КонецПроцедуры // роДоступностьКнопокЛистания()

// роОбновитьСтруктуруМногостраничныхРазделов
// Вариант версия 12.05.2005
// Обновляет структуру многостраничных разделов формы.
// После обновления структуры выводит в табличный документ
// данные первой страницы из набора страниц.
// Используется в следующих процедурах и функциях:
// Процедура Очистить()
// Процедура Сохранить()
// Процедура ЗаполнитьСведенияОбФЛ()
// Функция ВычислитьПоказателиТитульногоЛистаИСведенияОФизЛицах
// Процедура УниверсальнаяВыгрузкаПредписанныхПоказателей
// Функция ПроверитьПредписанныеПоказатели
//
Процедура роОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяСтраницы = Неопределено) Экспорт

	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ИмяТекущейСтраницыПанели = Страница.Ключ;
		ТаблицаТекущейСтраницы   = Страница.Значение;

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяСтраницы <> ИмяТекущейСтраницыПанели Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		// Для декларации по прибыли, специальные два раздела сохраняются особым образом
		// пришлось внести изменения в общий модуль и процедуру для всех отчетов

		Если (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ1") Или (ИмяТекущейСтраницыПанели = "Лист03_РазделыБВ2") Тогда
			Форма.СохранитьДанныеМногостраничногоРазделаВактивнойСтраницеРешения(ИмяТекущейСтраницыПанели);
		Иначе

		// Обновляя представления сохранения активного листа декларации
		// Параметр Ложь - не позволяет удалять многострочные части, если они есть на листе
			роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Ложь);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // роОбновитьСтруктуруМногостраничныхРазделов()

// роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления
// Процедура входит в группу стандартных функций
// Вариант версия 17.05.2005
// Всегда используется в обработчике "ПриОткрытии" основной формы декларации
//
Процедура роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления(Форма) Экспорт

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		Если СтрокаУровня1.ПредставлениеДанных Тогда
			Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(СтрокаУровня1.ИмяСтраницы);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // роОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставления

// роОпределитьПредставлениеДопСтраниц
// Процедура присваивает дополнительным листам многостраничных разделов
// уникальные имена (представление).
// Если ИмяСтраницы - неопределено, тогда по всем страницам
// ТолькоУАктивнойСтраницы - Если Истина то только у активной страницы меняется представление
// ТолькоУАктивнойСтраницы = Ложь или Неопределено - тогда у всех в структуре
//
Процедура роОпределитьПредставлениеДопСтраниц(Форма, ИмяСтраницы = Неопределено, ТолькоУАктивнойСтраницы = Неопределено)
	Перем ТаблицаСтраницРаздела;
	Перем ТекущееПредставлениеСтраницы;

	ТолькоАктивная = ?(ТолькоУАктивнойСтраницы = Неопределено, Ложь, ТолькоУАктивнойСтраницы);

	Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл
		ИмяТекСтраницы        = Страница.Ключ;
		ТаблицаСтраницРаздела = Страница.Значение;

		Если ИмяСтраницы <> Неопределено Тогда
			Если ИмяТекСтраницы <> ИмяСтраницы Тогда
				Продолжить; // Пропускаем не нужные страницы
			КонецЕсли;
		КонецЕсли;

		// Если есть хоть одна страница - определим её представление
		Если ТаблицаСтраницРаздела.Количество() > 0 Тогда

			НомерСтраницы = 0;

			Для Каждого СтрокаТаблицы Из ТаблицаСтраницРаздела Цикл

				НомерСтраницы = НомерСтраницы + 1;

				СохрПредставлениеСтраницы = СтрокаТаблицы.Представление;

				// Если колонки нет, тогда автоматическое представление включено по умолчанию.
				Если ТаблицаСтраницРаздела.Колонки.Найти("АвтоматическоеПредставление") = Неопределено Тогда
					АвтоматическоеПредставление = Истина;
				Иначе
					АвтоматическоеПредставление = СтрокаТаблицы.АвтоматическоеПредставление;
				КонецЕсли;

				Если НЕ АвтоматическоеПредставление Тогда
					Продолжить;
				КонецЕсли;

				// Определяем представление дополнительной страницы
				СтруктураДанныхСтраницы = СтрокаТаблицы.Данные;

				ИмяПредставления = роПолучитьСвойствоРаздела(Форма, ИмяТекСтраницы, "ИмяПредставления");

				Если НЕ ЗначениеЗаполнено(ИмяПредставления) Тогда
					ТекущееПредставлениеСтраницы = Неопределено;
				Иначе
					СтруктураДанныхСтраницы.Свойство(ИмяПредставления, ТекущееПредставлениеСтраницы);
				КонецЕсли;

				Если (НЕ ТолькоАктивная) Или ((ТолькоАктивная) И (СтрокаТаблицы.АктивнаяСтраница))Тогда

					ТекущееПредставлениеСтраницы = ?(ПустоеЗначение(ТекущееПредставлениеСтраницы), "Лист N " + Строка(НомерСтраницы), ТекущееПредставлениеСтраницы + ". Лист N " + Строка(НомерСтраницы));
					Если Не ПустаяСтрока(ТекущееПредставлениеСтраницы) Тогда
						СтрокаТаблицы.Представление = ТекущееПредставлениеСтраницы;
					Иначе
						СтрокаТаблицы.Представление = "Новая страница";
					КонецЕсли;

				КонецЕсли; // ТолькоАктивная

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // роОпределитьПредставлениеДопСтраниц

// роОткрытьФормуСпискаДопСтраниц
// Версия-вариант 12.05.2005
// Открывает форму документа ФормаСпискаДопСтраниц для выбора из списка и
// последующего отображения дополнительной страницы многостраничного раздела.
//
Процедура роОткрытьФормуСпискаДопСтраниц(Форма, ИмяСтраницы = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ВыбрТаблицаСтраницРаздела;
	Перем ФлМодифицированностьСписка;

	// В процедуру внесены изменения, если на основной панели, есть ещё панель
	// то вторым параметром следует передавать имя листа
	// по умолчанию берется из основной панели, текущий лист

	Если ИмяСтраницы = Неопределено Тогда

		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Иначе

		ИмяТекущейСтраницыПанели = ИмяСтраницы;

	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	Если ТаблицаСтраницРаздела.Количество() <= 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	// Сначала сохраним данные текущей страницы.
	//
	// СтруктураДанныхТекущейТаблицы = СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Ложь);

	//ФормаВыбораДопСтраницы = Обработки.ОперацииРегламентированнойОтчетности.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");
	ФормаВыбораДопСтраницы = роПолучитьОбщуюФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");

	// ФормаВыбораДопСтраницы = Форма.ЭтотОбъект.ПолучитьФорму("ФормаСпискаДопСтраниц", Форма, "дляПереходаНаСтраницу");
	Если ФормаВыбораДопСтраницы.Открыта() Тогда
		ФормаВыбораДопСтраницы.Активизировать();
		Если Вопрос("Предыдущая операция показа списка страниц не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			ФормаВыбораДопСтраницы.Закрыть();
		КонецЕсли;
	КонецЕсли;

	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаРаздела", ТаблицаСтраницРаздела);
	СтруктураДанных.Вставить("ИмяТекущейСтраницы", ИмяТекущейСтраницыПанели);
	СтруктураДанных.Вставить("ПерестановкаСтраницЗапрещена", роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПерестановкаСтраницЗапрещена", Ложь));

	ФормаВыбораДопСтраницы.НачальноеЗначениеВыбора = СтруктураДанных;

	ВыбранноеЗначение = ФормаВыбораДопСтраницы.ОткрытьМодально();
	Если ВыбранноеЗначение <> Неопределено Тогда

		// Так как признак активной страницы не зависит от Модифицированнойсти формы, то не анализируя этот показатель всегда вставляем
		// в структуру многостраничных разделов полученную таблицу.

		ВыбранноеЗначение.Свойство("ТаблицаСтраницРаздела",  ВыбрТаблицаСтраницРаздела);

		// Найдем активную страницу, если что-то менялось на форме
		ВыбраннаяСтраница = ВыбрТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		ИндексВыбСтраницы = ВыбрТаблицаСтраницРаздела.Индекс(ВыбраннаяСтраница);

		Форма.мСтруктураМногостраничныхРазделов.Вставить(ИмяТекущейСтраницыПанели, ВыбрТаблицаСтраницРаздела.Скопировать());

		// Переопределим представления доп. страниц.
		роОпределитьПредставлениеДопСтраниц(Форма, ИмяТекущейСтраницыПанели, Ложь);

		// Если в табличном поле есть многострочность, то её очистим, а в процедуре
		// роПоказатьСтраницу... перерисуем область в табличном поле.
		КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
		Если ТипЗнч(КолМногострочныхЧастей) = Тип("ТаблицаЗначений") Тогда
			КолМногострочныхЧастей = КолМногострочныхЧастей.Количество();
		КонецЕсли;

		Если КолМногострочныхЧастей > 0 Тогда
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

		роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Форма, ИндексВыбСтраницы, ИмяТекущейСтраницыПанели, Истина, КолМногострочныхЧастей);

		// Если на форме доп. страниц изменился порядок страниц или представления, тогда возведем признак модифицированности и в родительском отчете
		Если ВыбранноеЗначение.ФлагМодифицированности Тогда
			Форма.Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // роОткрытьФормуСпискаДопСтраниц()

// роВывестиЭлементыВариантаЗаполнения
//
// Процедура отображает параметры автозаполнения ячейки в соответствующих элементах
// текущей страницы формы и, в зависимости от параметров, управляет доступностью 
// элементов .формы.
//
// Параметры:
//  Текущая ячейка - область ячеек табличного документа, по которой необходимо
//                   отобразить параметры автозаполнения.
//
Процедура роВывестиЭлементыВариантаЗаполнения(Форма, ТекущаяЯчейка) Экспорт
	Перем Комментарий;

	ИмяПоказателя = ТекущаяЯчейка.Имя;

	Если Найти(ИмяПоказателя, ":") > 0 Тогда
		// Неименованная область ячеек таблицы
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущаяЯчейка) = Тип("РисунокТабличногоДокумента") Тогда
		// Пропускаем рисунки табличного документа
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если Не ТекущаяЯчейка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.СодержитЗначение <> Истина Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	Если ТекущаяЯчейка.Защита Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
	Если ТаблицаВариантыЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
	Если НайденнаяСтрока = Неопределено Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
		Возврат;
	КонецЕсли;

	ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
	Дельта            = НайденнаяСтрока.Дельта;
	Комментарий       = НайденнаяСтрока.Комментарий;

	Если ВариантЗаполнения = 1 ИЛИ 
		ВариантЗаполнения = 2 ИЛИ
		ВариантЗаполнения = 3 Тогда

		ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;
		Дельта            = НайденнаяСтрока.Дельта;
		Комментарий       = НайденнаяСтрока.Комментарий;

		Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Значение = ВариантЗаполнения;
		Форма.ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Значение = Дельта;
		Форма.ЭлементыФормы["ПолеВводаКомментарий"           + ИмяТекущейСтраницыПанели].Значение = Комментарий;	
		роДоступностьЭлементовВариантаЗаполнения(Форма, ВариантЗаполнения);

	ИначеЕсли ВариантЗаполнения = 0 Тогда
		роДоступностьЭлементовВариантаЗаполнения(Форма,, ТекущаяЯчейка);
	КонецЕсли;

КонецПроцедуры // роВывестиЭлементыВариантаЗаполнения()

// роДоступностьЭлементовВариантаЗаполнения
//
// Процедура управляет доступностью полей указания параметров заполнения ячеек,
// которые могут быть заполнены при автозаполнении отчета.
//
// Параметры:
//  Вариант         - число, вариант заполнения ячейки;
//  Текущая область - область ячеек табличного документа, ссылка на ячейку.
//
Процедура роДоступностьЭлементовВариантаЗаполнения(Форма, Вариант = Неопределено, ТекущаяОбласть = Неопределено) Экспорт
	
	ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;

	Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяТекущейСтраницыПанели) Тогда
		Возврат;
	КонецЕсли;

	ДоступностьПолеВыбораВариантЗаполнения    = Ложь;
	ДоступностьПолеВводаЗначениеКорректировки = Ложь;
	ДоступностьПолеВводаКомментарий           = Ложь;

	Если Вариант <> Неопределено Тогда
		ДоступностьПолеВыбораВариантЗаполнения            = Истина;
		Если Вариант <> 3 Тогда
			ДоступностьПолеВводаКомментарий               = Истина;
			Если Вариант = 2 Тогда
				ДоступностьПолеВводаЗначениеКорректировки = Истина;
			КонецЕсли;
		КонецЕсли;

	Иначе
		ОписаниеЯчейки = "";
	
		Если ТекущаяОбласть.ЦветФона = Новый Цвет(192, 220, 192) Тогда
			ОписаниеЯчейки    = "Значение вычисляется автоматически";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 255, 192) Тогда
			ОписаниеЯчейки    = "Значение вводится вручную";
		ИначеЕсли ТекущаяОбласть.ЦветФона = Новый Цвет(255, 240, 200) Тогда
			ОписаниеЯчейки    = "Либо вручную, либо автоматически";

		КонецЕсли;

		Если ЭлементНаФормеПрисутствует(Форма, "ПолеВыбораВариантЗаполнения" + ИмяТекущейСтраницыПанели) Тогда
			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
		КонецЕсли;

		Если ЭлементНаФормеПрисутствует(Форма, "ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели) Тогда
			Форма.ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
		КонецЕсли;

		Если ЭлементНаФормеПрисутствует(Форма, "ПолеВводаКомментарий" + ИмяТекущейСтраницыПанели) Тогда
			Форма.ЭлементыФормы["ПолеВводаКомментарий" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
		КонецЕсли;

	КонецЕсли;

	Если ЭлементНаФормеПрисутствует(Форма, "ПолеВыбораВариантЗаполнения" + ИмяТекущейСтраницыПанели) Тогда
		Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения"    + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВыбораВариантЗаполнения;
	КонецЕсли;

	Если ЭлементНаФормеПрисутствует(Форма, "ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели) Тогда
		Форма.ЭлементыФормы["ПолеВводаЗначениеКорректировки" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаЗначениеКорректировки;
	КонецЕсли;

	Если ЭлементНаФормеПрисутствует(Форма, "ПолеВводаКомментарий" + ИмяТекущейСтраницыПанели) Тогда
		Форма.ЭлементыФормы["ПолеВводаКомментарий" + ИмяТекущейСтраницыПанели].Доступность = ДоступностьПолеВводаКомментарий;
	КонецЕсли;

КонецПроцедуры // роДоступностьЭлементовВариантаЗаполнения

// ЭлементНаФормеПрисутствует
// Параметры:
//  Форма          - ссылка на форму отчета
//  НазваниеЭлемента - название элемента управления на форме
//
// Возвращаемое значение:
//  Истина         - если элемента управления на форме есть и Ложь если нет.
//
Функция ЭлементНаФормеПрисутствует(Форма, НазваниеЭлемента)
	Результат = Истина;
	Если Форма.ЭлементыФормы.Найти(НазваниеЭлемента) = Неопределено Тогда
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ЭлементНаФормеПрисутствует

// роОчистить
// Функция входит в состав стандартных процедур/функций
// Вариант-версия 14.05.2005
// Процедура очищает содержимое редактируемых и вычисляемых
// ячеек табличного документа.
//
// Возврат:
// Истина                  - если очистка произошла
// Ложь                    - в случае отказа от очистки
//
Функция роОчистить(Форма, ЗадаватьВопросПередОчисткой = Истина, Знач ТекстВопроса = "") Экспорт

	// Ранее, очистка происходила по панели, перебирая каждую страницу
	// Теперь переделано, и очистка проходит по свойствам декларации, перебирая
	// мСвойстваРазделовДекларации, т.к. на одной странице могутб быть несколько
	// табличных полей, например Прибыль, раздел Лист03_РазделыБВ

	// Переделано из процедуру в функцию
	// возвращает истина - если прошла очистка и ложь - если откзались от очистки
	ОчисткаПроизведена = Ложь;

	Если ПустаяСтрока(ТекстВопроса) Тогда
		ТекстВопроса = "Внимание! Будут очищены все разделы (листы) отчета." + Символы.ПС
		             + "Продолжить операцию?";
	КонецЕсли;

	Если ЗадаватьВопросПередОчисткой Тогда

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Нет Тогда

			Возврат ОчисткаПроизведена;

		Иначе

			ОчисткаПроизведена = Истина;

		КонецЕсли;

	Иначе
		// Если Вопрос не задаётся, тогда очистка выполнится однозначно, признак возведем.
		ОчисткаПроизведена = Истина;
	КонецЕсли;


	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл

		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		Если (НазваниеСтраницы <> "Титульный") И (НазваниеСтраницы <> "ФизЛица") Тогда
			ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + НазваниеСтраницы;
			ТекТабличноеПоле = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

	КонецЦикла;

	Попытка
		МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
	Исключение
		МногостраничностьЕсть = Ложь;
	КонецПопытки;

	Если МногостраничностьЕсть Тогда
		// Далее выясним, есть ли добавленные в многостраничный раздел дополнительные страницы.
		// При наличии таких страниц удаляем их.
		// Удалим все страницы кроме активных, таким образом в структуре будет всегда оставаться одна страница
		Для Каждого Страница Из Форма.мСтруктураМногостраничныхРазделов Цикл

			ИмяТекущейСтраницыПанели = Страница.Ключ;
			ТаблицаТекущейСтраницы   = Страница.Значение;

			Если (ТаблицаТекущейСтраницы.Количество() > 1)
			   И (ИмяТекущейСтраницыПанели <> "ФизЛица")
			   И (ИмяТекущейСтраницыПанели <> "Титульный") // Для деклараций по алкогольной продукции, титульный многостраничный.
			   // Учесть ситуация в прибыли, два спец-листа, удалим по особой технологии
			   // из модуля объекта
			   И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ1")
			   И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ2") Тогда

				ИндексСтраницы = 0;
				Пока Не (ИндексСтраницы > (ТаблицаТекущейСтраницы.Количество()-1)) Цикл
					// Пропускаем активную страницу по той причине,
					// что данные активной страницы былы очищены ранее.
					СтрокаТаблицы = ТаблицаТекущейСтраницы[ИндексСтраницы];
					Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
						// удаляем дополнительную страницу
						ТаблицаТекущейСтраницы.Удалить(СтрокаТаблицы);

						Продолжить;
					КонецЕсли;

					ИндексСтраницы = ИндексСтраницы + 1;
				КонецЦикла;

			КонецЕсли;

			Если (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ1")
			   И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ2") Тогда

				// Здесь ИмяТекущейСтраницыПанели - это имя из многостраничной структуры, а не панели
				ПанельРаздела = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "НазваниеПанелиТабличногоПоляРаздела");
				Если Форма.ЭлементыФормы[ПанельРаздела].ТекущаяСтраница.Имя = ИмяТекущейСтраницыПанели Тогда
					// Покажем статик активной страницы, если она не многостраничная, то процедура ничего не сделает
					роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		// Обновляем структуру многостраничных разделов
		роОбновитьСтруктуруМногостраничныхРазделов(Форма);

	КонецЕсли;

	// очищаем ячейки, в которых отображается дата подписи
	// должностных лиц организации
	Форма.ЗаполнитьДатуВЯчейках();

	// выполняем расчет вычисляемых показателей отчета
	// чтобы очистить соответствующие ячейки
	Форма.Расчет("");

	// устанавливаем флаг модифицированности формы
	Форма.Модифицированность = Истина;

	Возврат ОчисткаПроизведена;

КонецФункции // роОчистить()

// роПоказатьСтатикСтраницРаздела
// Отображает на странице основной панели формы, содержащей многостраничный раздел,
// порядковый номер текущей страницы из набора страниц.
//
// Параметры:
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащей многостраничный раздел.
//
Процедура роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели) Экспорт
	Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы = 1;
	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
	Если СтрТаблицаСтраницы <> Неопределено Тогда
		НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
	КонецЕсли;

	СтатикСтраницРаздела = Строка(НомерТекущейСтраницы) + " из " + КоличествоСтраниц;
	Форма.ЭлементыФормы["НадписьСтатикСтраниц" + ИмяТекущейСтраницыПанели].Заголовок = СтатикСтраницРаздела;

	роДоступностьКнопокЛистания(Форма, НомерТекущейСтраницы, КоличествоСтраниц, ИмяТекущейСтраницыПанели);

	Форма.УстановитьЦветФонаЯчейки(,, ИмяТекущейСтраницыПанели);
	СформироватьСоставКнопкиОчиститьДляРегОтчетов(Форма);

КонецПроцедуры // роПоказатьСтатикСтраницРаздела

// роПоказатьСтраницуМногостраничногоРаздела
//
// Вариант версия 10.05.2005
// Выводит в табличный документ данные страницы многостраничного раздела формы.
// Одновременно убирая признак у активной страницы и сохраняя в неё данные текущего табличного поля
// Параметры:
//  Шаг                      - число,  количество перелистываемых страниц;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
//  ПоказатьПоИндексу        - булево, управляет выводом страницы по заданному индексу в коллекции страниц.
//
Процедура роПоказатьСтраницуМногостраничногоРаздела(Форма, Шаг, ИмяТекущейСтраницыПанели, ПоказатьПоИндексу = Ложь) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаВариантыЗаполнения;
	Перем СтруктураДанныхДопСтрокРаздела;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы = Неопределено Тогда
		роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);
		Возврат;
	КонецЕсли;

	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	Если Не ПоказатьПоИндексу Тогда
		НомерСледующейСтраницы = НомерТекущейСтраницы + Шаг;
	Иначе
		НомерСледующейСтраницы = Шаг;
	КонецЕсли;

	Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Сохраним данные активной страницы, с присвоением Представления страницы и с очистной многострочных частей (Истина)
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницыПанели, Истина);

	СтрТаблицаСтраницы.АктивнаяСтраница = Ложь;

	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];

	СтрСледующаяСтраница.АктивнаяСтраница = Истина;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);

	КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

	Если ТипЗнч(КолМногострочныхЧастей) = Тип("ТаблицаЗначений") Тогда
		КолМногострочныхЧастей = КолМногострочныхЧастей.Количество();
	КонецЕсли;

	Если КолМногострочныхЧастей > 0 Тогда

		НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;

		// Способ хранения многострочных частей
		СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

	Иначе

		НовТаблицаДопСтрокРаздела = Неопределено; // Многострочности нет
		ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено

	КонецЕсли;

	Если НовДанныеДопСтрокРаздела <> Неопределено Тогда

		// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
		Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
			Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
				ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
				ДанныеГруппыСтрок = ГруппаСтрок.Значение;

				ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

				// Заменяем таблицу значений с данными текущей страницы.
				Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				// Выводим в табличный документ данные группы дополнительных строк
				Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
				// обновляем структуру многострочного раздела
				Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
			КонецЦикла;

		ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда

			ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницыПанели);

			ПромТаблицаДопСтрокРаздела = НовДанныеДопСтрокРаздела.Скопировать();
			// Заменяем таблицу значений с данными текущей страницы.
			Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
			// Выводим в табличный документ данные группы дополнительных строк
			Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
			// обновляем структуру многострочного раздела
			Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

		КонецЕсли;

	КонецЕсли;

	// отображаем данные следующей страницы
	СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;
	ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ИмяТекТабличногоПоля, "ПредставлениеДанных");

	Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;

		Если ПредставлениеДанных Тогда

			Если Форма.ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Продолжить; // Пропустим цикл
			КонецЕсли;

		КонецЕсли;

			//Если Форма.мСтараяВерсияФормы <> Форма.мВерсияФормы Тогда
			// Старая версия формы, нужно по позможности собрать данные

				Попытка
					ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				Исключение
				КонецПопытки;

			//Иначе
			//	ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			//КонецЕсли;

			Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
				// обновляем примечания к ячейкам табличного документа
				НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
				Если НайденнаяСтрока <> Неопределено Тогда
					ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
					НовыйКомментарий   = НайденнаяСтрока.Комментарий;

					// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
					Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
						ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

	КонецЦикла;

	Если ПредставлениеДанных Тогда
		Форма.ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели);
	КонецЕсли;

	//ТекущийЭлемент = ТекТабличноеПоле;

	роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роПоказатьСтраницуМногостраничногоРаздела()

// роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении
//
// Вывод необходимого номера страницы
// Входит в блок стандартизированных процедур/функций
// Вариант-версия 14.05.2005
// Выводит особым способом в табличный документ данные страницы многостраничного раздела формы.
//
// Параметры:
// Шаг                      - число,  номер страницы, на которую необходимо перейти;
// ИмяТекущейСтраницыПанели - строка, имя страницы основной панели формы, содержащий многостраничный раздел;
// УчестьАктивнуюСтраницу - Если истина, то учитывается страница, которая была ранее активной, иначе нет
// КолМногострочныхЧастей - по умолчанию -1. Определяет, работать -ли при показате с многострочными частями
// как в процедуре ПоказатьСтраницуМногостраничногоРаздела, т.е. перерисовывать табличную часть.
// Данная операция не требуется при восстановлении документа, т.к. там отдельной процедурой рисуется области.
// -1 всегда, в процедуре по кнопке Перейти в многостраничных разделах, там будет анализироваться этот параметр.
//
Процедура роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении(Форма, Шаг, ИмяТекущейСтраницыПанели, УчестьАктивнуюСтраницу = Ложь, КолМногострочныхЧастей = -1) Экспорт
	Перем ТаблицаСтраницРаздела;
	Перем ТаблицаДопСтрокРаздела;
	Перем ТаблицаВариантыЗаполнения;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле     = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	НомерСледующейСтраницы = Шаг;

	Если ((НомерСледующейСтраницы + 1) > ТаблицаСтраницРаздела.Количество()) ИЛИ (НомерСледующейСтраницы < 0) Тогда
		Возврат;
	КонецЕсли;

	// Для страниц многостраничного раздела, содержащих многострочную часть,
	// дополнительно сохраняем данные многострочной части.

	СтрСледующаяСтраница = ТаблицаСтраницРаздела[НомерСледующейСтраницы];
	Если УчестьАктивнуюСтраницу Тогда
		// найдем активную страницу
		АктивнаяСтраницаВ = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");
		АктивнаяСтраницаВИнд = ТаблицаСтраницРаздела.Индекс(АктивнаяСтраницаВ);
		ТекущиеАктивныеДанные = ТаблицаСтраницРаздела[АктивнаяСтраницаВИнд];
		ТекущиеАктивныеДанные.АктивнаяСтраница = Ложь; // убираем активность
		СтрСледующаяСтраница.АктивнаяСтраница = Истина; // ставим новую активность
	КонецЕсли;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);

	// отображаем данные
	СтруктураДанныхСледующаяСтраница = СтрСледующаяСтраница.Данные;

	ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных");

	// Вариант -1 означает, что процедура запущена из режима восстановить сохраненные данные.
	// В этом случае операции по расчерчиванию табличного поля для многострочных разделов не требуются.

	Если (КолМногострочныхЧастей > 0) И (КолМногострочныхЧастей <> -1) Тогда
		Если КолМногострочныхЧастей > 0 Тогда

			НовДанныеДопСтрокРаздела = СтрСледующаяСтраница.ДанныеДопСтрок;

			// Способ хранения многострочных частей
			СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

		Иначе

			ИмяГруппыДопСтрок = Неопределено; // Имя группы строк неопределено
			НовДанныеДопСтрокРаздела = Неопределено;

		КонецЕсли;

		Если НовДанныеДопСтрокРаздела <> Неопределено Тогда

			// В случае, если многострочных частей больше 1, то хранится структура, иначе, таблица значений с данными
			Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда
				Для Каждого ГруппаСтрок Из НовДанныеДопСтрокРаздела Цикл
					ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
					ДанныеГруппыСтрок = ГруппаСтрок.Значение;

					ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

					// Заменяем таблицу значений с данными текущей страницы.
					Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					// Выводим в табличный документ данные группы дополнительных строк
					Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					// обновляем структуру многострочного раздела
					Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);
				КонецЦикла;

			ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда

				ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницыПанели);

				ПромТаблицаДопСтрокРаздела = НовДанныеДопСтрокРаздела.Скопировать();
				// Заменяем таблицу значений с данными текущей страницы.
				Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				// Выводим в табличный документ данные группы дополнительных строк
				Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
				// обновляем структуру многострочного раздела
				Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Для Каждого Элемент Из СтруктураДанныхСледующаяСтраница Цикл
		ИмяПоказателя      = Элемент.Ключ;
		ЗначениеПоказателя = Элемент.Значение;

		Если ПредставлениеДанных Тогда
			Если Форма.ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
				Продолжить; // Пропустим цикл
			КонецЕсли;
		КонецЕсли;

		//Если Форма.мСтараяВерсияФормы <> Форма.мВерсияФормы Тогда
		// Старая версия формы, нужно по позможности собрать данные

			Попытка
				ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
			Исключение
			КонецПопытки;

		//Иначе
		//	ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
		//КонецЕсли;

		Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда
			// обновляем примечания к ячейкам табличного документа
			НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
			Если НайденнаяСтрока <> Неопределено Тогда
				ТекущийКомментарий = ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст;
				НовыйКомментарий   = НайденнаяСтрока.Комментарий;

				// примечание к ячейке устанавливаем тогда, когда изменился текст комментария
				Если Не (ПустаяСтрока(ТекущийКомментарий) И ПустаяСтрока(НовыйКомментарий)) Тогда
					ТекТабличноеПоле.Области[ИмяПоказателя].Примечание.Текст = НовыйКомментарий;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Специально для декл. по прибыли, не отображать статит общими средствами
	// в листах Лист03_РазделыБВ1 и Лист03_РазделыБВ2
	Если (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ1")И (ИмяТекущейСтраницыПанели <> "Лист03_РазделыБВ2") Тогда
		роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // роПоказатьСтраницуМногостраничногоРазделаПриВосстановлении()

// роПолучитьСвойствоРаздела
//
// Получает из дерево св-в необходимый параметр
// Параметры
// ИмяСтраница - название страницы, для которой необходимо получить св-во
// ИмяСвойства - имя настройки
// ВозвращаемоеЗначение - в случае, если св-во отсутствует, то можно через данный параметр передать значение
//  которое будет возвращено, в случае отсутствия параметра в свойствах.
//
Функция роПолучитьСвойствоРаздела(Форма, Знач ИмяСтраницы, Знач ИмяСвойства, ВозвращаемоеЗначение = Неопределено) Экспорт

	Результат = Неопределено;

	Если ТипЗнч(Форма.мСвойстваРазделовДекларации) <> Тип("ДеревоЗначений") Тогда
		Возврат Результат;
	КонецЕсли;

	Если Найти(ИмяСтраницы, "ПолеТабличногоДокумента") > 0 Тогда
		ИмяСтраницыП = СтрЗаменить(ИмяСтраницы, "ПолеТабличногоДокумента", "");
	Иначе
		ИмяСтраницыП = ИмяСтраницы;
	КонецЕсли;

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		Если ИмяСтраницыП = СтрокаУровня1.ИмяСтраницы Тогда
			Если СвойствоОпределено(СтрокаУровня1, ИмяСвойства) Тогда
				Результат = СтрокаУровня1[ИмяСвойства];
			Иначе
				Результат = ВозвращаемоеЗначение;
			КонецЕсли;

			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьСвойствоРаздела

// роПолучитьТаблицуВариантовЗаполнения
// Функция определяет варианты заполнения ячеек табличного документа
// по имени страницы основной панели формы.
//
// Параметры:
//   ИмяСтраницыПанели - строка, имя страницы основной панели формы.
//   ПолучитьЭталонную - булево, если истина, получаем эталонную
//                               (исходную) таблицу вариантов заполнения.
//  ТипЗнчСуммы        - тип колонки сумма, при эталонной отдаче результата. По умолчанию и для
//  деклаций старого периода всегда равно 15.2 и параметр Неопределено.
// Возвращаемое значение:
//   таблица значений, содержащая информацию о вариантах автозаполнения ячеек.
//
Функция роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели, ПолучитьЭталонную = Ложь, ТипЗнчСуммы = Неопределено) Экспорт
	Перем МассивВариантовЗаполненияСтраниц;
	Перем ТаблицаВариантыЗаполнения;
	Перем ТаблицаСтраницРаздела;

	Если Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницыПанели, МассивВариантовЗаполненияСтраниц) Тогда

		Если НЕ ПолучитьЭталонную Тогда
			// получим варианты заполнения ячеек, заданные для активной страницы
			НомерТекущейСтраницы = 1;

			// Определим, присутствует ли многостраничность в декларации или нет.
			Попытка
				МногостраничностьЕсть = ?(Форма.мСтруктураМногостраничныхРазделов = Неопределено, Ложь, Истина);
			Исключение
				МногостраничностьЕсть = Ложь;
			КонецПопытки;

			Если МногостраничностьЕсть Тогда
				Если Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели, ТаблицаСтраницРаздела) Тогда
					// Раздел является многостраничным. Определим активную страницу раздела:
					СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

					Если СтрТаблицаСтраницы <> Неопределено Тогда
						НомерТекущейСтраницы = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы) + 1;
					КонецЕсли;
				КонецЕсли;

				Если МассивВариантовЗаполненияСтраниц.Количество() < НомерТекущейСтраницы Тогда
					Для Сч = МассивВариантовЗаполненияСтраниц.Количество() По НомерТекущейСтраницы Цикл
						МассивВариантовЗаполненияСтраниц.Добавить(МассивВариантовЗаполненияСтраниц[0].Скопировать());	
					КонецЦикла;
				КонецЕсли;

			КонецЕсли;

			ТаблицаВариантыЗаполнения = МассивВариантовЗаполненияСтраниц[НомерТекущейСтраницы - 1];
		Иначе
			// Получим предустановленные (эталонные) варианты заполнения ячеек поля табличного
			// документа на заданной странице

			ОписаниеТиповСтрока15  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15);
			ОписаниеТиповСтрока50  = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50);

			ОписаниеТиповСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);

			ОписаниеТиповЧисло1    = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1);

			Если ТипЗнчСуммы = Неопределено Тогда
				ОписаниеТиповЧисло15   = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2);
			Иначе
				ОписаниеТиповЧисло15 = ТипЗнчСуммы;
			КонецЕсли;

			ТаблВариантыЗаполнения = Новый ТаблицаЗначений;
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателя",     ОписаниеТиповСтрока50  );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ВариантЗаполнения", ОписаниеТиповЧисло1    );
			ТаблВариантыЗаполнения.Колонки.Добавить( "ЗначениеАвто",      ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Дельта",            ОписаниеТиповЧисло15   );
			ТаблВариантыЗаполнения.Колонки.Добавить( "Комментарий",       ОписаниеТиповСтрока100 );
			ТаблВариантыЗаполнения.Колонки.Добавить( "КодПоказателяПоСтруктуре",       ОписаниеТиповСтрока50 );

			// варианты заполнения определяем по макету СоставПоказателей
			МакетСоставаПоказателей = Форма.ЭтотОбъект.ПолучитьМакет(Форма.мСоставПоказателей);

			ТекОбласть = МакетСоставаПоказателей.Области.Найти(ИмяСтраницыПанели);
			Если ТекОбласть <> Неопределено Тогда
			
				Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
					// Перебираем строки макета.
					// Код показателя (по составу показателей) определяется по первой колонке макета
					КодПоказателя = СокрП(МакетСоставаПоказателей.Область(Ном, 1).Текст);
					ИмяПоказателя = КодПоказателя;

					Если КодПоказателя = "===" Тогда         // признак конечной строки
						Прервать;
					КонецЕсли;

					Если Лев(КодПоказателя, 2) = "//" Тогда  // пропускаем комментарии
						Продолжить;
					КонецЕсли;

					// код показателя по форме отчете (имя ячейки в полях табличного документа формы)
					КодПоказателяПоФорме = СокрЛП(МакетСоставаПоказателей.Область(Ном, 2).Текст);
					// вариант заполнения ячейки определяется по колонке 6 макета
					//стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
					стрВариантЗаполнения = ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном);
					чВариантЗаполнения   = ? (ПустаяСтрока(стрВариантЗаполнения), 0, Число(стрВариантЗаполнения));

					КодПоказателяПоСтруктуре = СокрЛП(МакетСоставаПоказателей.Область(Ном, 9).Текст);

					Если чВариантЗаполнения <> 0 Тогда
						// Если в колонке 6 задан варианет заполнения показателя, 
						// то его значение может определяться по данным ИБ.
						// Дополняем таблицу значений вариантов заполнения
						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = ? (Не ПустаяСтрока(КодПоказателяПоФорме), КодПоказателяПоФорме, КодПоказателя);
						НоваяСтрока.ВариантЗаполнения  = чВариантЗаполнения;
						НоваяСтрока.КодПоказателяПоСтруктуре = КодПоказателяПоСтруктуре;
					КонецЕсли;
				КонецЦикла;

				// Здесь описываются добавляемые в табл. вариантов заполнений параметры, которых
				// нет в эталонном составе показателей.
				// Для каждой формы могут быть свои показатели.
				// Пример ПФР, форма 2005, раздел 1.

				Если Форма.ЭтотОбъект.Метаданные().Имя = "РегламентированныйОтчетПФР"
				   И Форма.мВыбраннаяФорма = "ФормаОтчета2005Кв1" Тогда

					Если ИмяСтраницыПанели = "Раздел1" Тогда

						НоваяСтрока = ТаблВариантыЗаполнения.Добавить();
						НоваяСтрока.КодПоказателя      = "";
						НоваяСтрока.ВариантЗаполнения  = 4;
						НоваяСтрока.КодПоказателяПоСтруктуре  = "Сумма0Раздел1";

					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

			Если ТаблВариантыЗаполнения.Количество() > 0 Тогда
				ТаблицаВариантыЗаполнения = ТаблВариантыЗаполнения.Скопировать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Возврат ТаблицаВариантыЗаполнения;

КонецФункции // роПолучитьТаблицуВариантовЗаполнения()

// роПроставитьНаВсехЛистах()
// Процедура проставляет значения в многостраничных документах
// может использоваться для простановки значений на одном листе, в нескольких позициях
//
// Параметры:
// Значение          - Значение, которое будет проставлено на лист
// ПрефиксНаЛисте    - Смысловая часть ячейки, без индекса в конце, например "ДатаПодписи"
// ЛистИсключение    - Лист, в котором не нужно проставлять данные, лист исключение
// ТолькоДляЛиста    - Название листа, если указано, то только этот лист будет обрабатываться
// ТолькоАктивныйЛистМногостраничнойчасти - Только активный лист, по умолчанию выключен режим
// ИспользоватьНомер - В случае, если параметр повторяется на листе несколько раз, например ИНН или КПП, по умолчанию включен
// ЛистыМногостраничные - если лист многостраничных, то проставлять во всех экземплярах листа, иначе, только в активном
//
Процедура роПроставитьНаВсехЛистах(Форма, Знач Значение, Знач ПрефиксНаЛисте, ЛистИсключение = Неопределено, ТолькоДляЛиста = Неопределено, ТолькоАктивныйЛистМногостраничнойчасти = Ложь, ИспользоватьНомер = Истина, ЛистыМногостраничные = Истина) Экспорт

	Перем ТаблицаСтраницРаздела;

	Если Найти(ПрефиксНаЛисте, "КПП") > 0 Тогда

		Попытка

			Если ЭтоПБОЮЛ(Форма.Организация) Тогда
				Значение = "         ";
			КонецЕсли;

		Исключение

		КонецПопытки;

	КонецЕсли;

	ПереборЗнач = Форма.мДеревоВыбранныхСтраниц.Строки.Количество();

	// В тех отчетах, которые используют процедуру простановки показателей в отчете по собственному алгоритму, там в отчете
	// присутствует экспортная процедура ПроставитьВКвадратыЗначения.
	// Все остальные отчеты используют общую процедуру роПроставитьВКвадратыЗначения, которая находится в общем модуле РО.
	// По имени объекта и по названию формы будем запускать ту или иную процедуру. Ранее, механизм использовал конструкцию
	// Попытка ... Исключение ... КонецПопытки. Было не удобно работать в режиме "ОстанавливатьсяПоОшибкам".
	ИмяОбъектаМетаданных = Форма.ЭтотОбъект.Метаданные().Имя;
	ФормаОтчета = Форма.мВыбраннаяФорма;

	ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму = Ложь;
	Если ((ИмяОбъектаМетаданных = "РегламентированныйОтчетДеятельностьИнОргВРФ") И (ФормаОтчета = "ФормаОтчета2004Кв1"))
	 Или ((ИмяОбъектаМетаданных = "РегламентированныйОтчетПрибыльИностраннойОрганизации") И ((ФормаОтчета = "ФормаОтчета2005Кв1") Или (ФормаОтчета = "ФормаОтчета2007Кв1")))
	 Или ((ИмяОбъектаМетаданных = "РегламентированныйОтчетСтатистикаФорма1П ") И ((ФормаОтчета = "ФормаОтчета2005Кв1") Или (ФормаОтчета = "ФормаОтчета2007Кв1"))) Тогда
		ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму = Истина;
	КонецЕсли;

	Пока ПереборЗнач > 0 Цикл

		ИмяДляРасчета = Форма.мДеревоВыбранныхСтраниц.Строки[ПереборЗнач-1].ИмяСтраницы;

		Если ЗначениеЗаполнено(ТолькоДляЛиста) Тогда
			ЛистыТолько = Новый Структура(ТолькоДляЛиста);
			Если НЕ ЛистыТолько.Свойство(ИмяДляРасчета) Тогда
			//ТолькоДляЛиста <> ИмяДляРасчета Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если ЗначениеЗаполнено(ЛистИсключение) Тогда
			ЛистыИскл = Новый Структура(ЛистИсключение);
			// Если ЛистИсключение = ИмяДляРасчета Тогда
			Если ЛистыИскл.Свойство(ИмяДляРасчета) Тогда
				ПереборЗнач = ПереборЗнач-1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		
		РезВыбор = (Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяДляРасчета, ТаблицаСтраницРаздела));
		Если (НЕ ЛистыМногостраничные) Или (РезВыбор) Тогда
			
			Колво = роКолвоЛистоВРазделе(Форма, ИмяДляРасчета);

			Для Инд = 1 По Колво Цикл
				// В случае, если в декларации нет своей специализированной процедуры простановки
				// тогда вызовем стандатную из этого модуля.
				// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
				Если ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму Тогда
					Форма.ПроставитьВКвадратыЗначения(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				Иначе
					роПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд) + "_", ""), СтрДлина(Значение), Значение);
				КонецЕсли;
			КонецЦикла;

		ИначеЕсли ЛистыМногостраничные И (НЕ РезВыбор) Тогда

			роОбновитьСтруктуруМногостраничныхРазделов(Форма, ИмяДляРасчета);

			ИндА = 0;
			АктивныйНомерСтр = 0;
			Для Каждого Страница Из ТаблицаСтраницРаздела Цикл

				ИндА = ИндА + 1;

				Колво = роКолвоЛистоВРазделе(Форма, ИмяДляРасчета);

				Для Инд77 = 1 По Колво Цикл

					Если Страница.АктивнаяСтраница Тогда
						// В случае, если в декларации нет своей специализированной процедуры простановки
						// тогда вызовем стандатную из этого модуля.
						// Пример: Прибыль иностранной орг., там отличная ПроставитьВКвадратыЗначения от других
						Если ПростановкаЗначенийВКвадратикиПоСобственномуАлгоритму Тогда
							Форма.ПроставитьВКвадратыЗначения(ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						Иначе
							роПроставитьВКвадратыЗначения(Форма, ИмяДляРасчета, ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", ""), СтрДлина(Значение), Значение);
						КонецЕсли;

					Иначе

						Если НЕ ТолькоАктивныйЛистМногостраничнойчасти Тогда
							Для Инд = 1 По СтрДлина(Значение) Цикл
									Страница.Данные.Вставить(ПрефиксНаЛисте + ?(ИспользоватьНомер, Строка(Инд77) + "_", "") + Строка(Инд), Сред(Значение, Инд, 1));
							КонецЦикла;
						КонецЕсли;

					КонецЕсли;

				КонецЦикла;

			КонецЦикла;

			//ПоказатьСтраницуМногостраничногоРаздела(АктивныйНомерСтр, ИмяДляРасчета, Истина);

		КонецЕсли;

		ПереборЗнач = ПереборЗнач - 1;

	КонецЦикла;

КонецПроцедуры // роПроставитьНаВсехЛистах()

// роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице
//
// Процедура СохранитьДанныеМногостраничногоРазделаВактивнойСтранице
// сохраняет данные в актвном листе
// Особенность:
// Процедура только сохраняет данные, не передвигая страница на начальную
// или какую либу другую часть многостраничного раздела
// Используется в следующих частях:
// 1. ОбновитьСтруктуруМногостраничныхРазделов
// 2. ПоказатьСтраницуМногостраничногоРаздела
// 3. ВставитьДополнительнуюСтраницу
// 4. ОткрытьФормуСпискаДопСтраниц
//
Процедура роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, ИмяТекущейСтраницы, ОчищатьРазделЕслиЕстьМногострочность) Экспорт
	Перем ТаблицаСтраницРаздела;

	ИмяТекТабличногоПоля = "ПолеТабличногоДокумента" + ИмяТекущейСтраницы;
	ТекТабличноеПоле     = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницы, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Возьмем активную страницу
	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	// Если нет активной страницы - то выход
	Если СтрТаблицаСтраницы = Неопределено Тогда
		роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницы);
		Возврат;
	КонецЕсли;

	// Берем индекс активной страницы
	НомерТекущейСтраницы   = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);

	// Сохраним данные текущей страницы.
	// В каждой декларации функция СобратьДанныеТекущегоТаблПоля - разные !
	СтруктураДанныхТекущейТаблицы = Форма.СобратьДанныеТекущегоТаблПоля(ТекТабличноеПоле);

	КолМногострочныхЧастей = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницы, "МногострочностьВРазделе");
	Если ТипЗнч(КолМногострочныхЧастей) = Тип("ТаблицаЗначений") Тогда
		КолМногострочныхЧастей = КолМногострочныхЧастей.Количество();
	КонецЕсли;

	// Определяет, как работать с многострочностью в документе, либо как с ТаблЗначений или со структурой

	СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницы, "СохранятьМногострКакТЗ");

	// Если лист является многострочным и многостраничным, то необходимо добавить в поле данные доп. строк
	// в этой декларации не используется, т.к. многострочность одна на листе
	Если (КолМногострочныхЧастей > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

		ВРазделеДекларацииЕстьМногострочность = Истина;
		// Определим ИмяГруппы дополнительных строк, по необходимой страницы
		// Если на листе больше одной многострочной части, то алгорит сбора будет другим

		СтруктураДанныхДопСтрокРаздела = Форма.СформироватьСтруктуруДанныхДопСтрокСтраницы(ИмяТекущейСтраницы);
		ТаблицаДопСтрокРаздела = СтруктураДанныхДопСтрокРаздела;

	ИначеЕсли (КолМногострочныхЧастей > 0) И (СохранятьМногострКакТЗ) Тогда

		ВРазделеДекларацииЕстьМногострочность = Истина;
		// Блок для разделов, где хранится только одна многострочная часть
		ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницы);
		Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппыДопСтрок);


		// Получим таблицу значений, содержащую данные дополнительных строк.
		ПромТаблицаДопСтрокРаздела = Новый ТаблицаЗначений;
		Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
		ТаблицаДопСтрокРаздела = ПромТаблицаДопСтрокРаздела.Скопировать();

	ИначеЕсли КолМногострочныхЧастей = 0 Тогда

		ВРазделеДекларацииЕстьМногострочность = Ложь;

	КонецЕсли;

	// Сохраним данные
	СтрТаблицаСтраницы.Данные           = СтруктураДанныхТекущейТаблицы;

	Если ВРазделеДекларацииЕстьМногострочность Тогда

		// Если процедура используется в ПоказатьСтраницуМногостраничногоРаздела, то необходимо
		// при показе след. страницы, убирать многострочность с листа, путем очистки
		Если ОчищатьРазделЕслиЕстьМногострочность Тогда
			Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);
		КонецЕсли;

		// Запишем данные доп. строк
		СтрТаблицаСтраницы.ДанныеДопСтрок   = ТаблицаДопСтрокРаздела;
	КонецЕсли;

	// Попытаемся определить представление, только по текущей странице (по активной), последний параметр Истина
	роОпределитьПредставлениеДопСтраниц(Форма, ИмяТекущейСтраницы, Истина);

КонецПроцедуры // роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице

// роУдалитьДополнительнуюСтраницу
//
// Удаляет текущую страницу многостраничного раздела формы.
// Параметры:
//  ИмяТекущейСтраницыПанели - строка - имя страницы основной панели формы,
//              в табличном поле которой удаляется дополнительная страница.
//
Процедура роУдалитьДополнительнуюСтраницу(Форма, ИмяТекущейСтраницыПанели = Неопределено) Экспорт
	Перем ТаблицаСтраницРаздела;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат;
	КонецЕсли;

	// Если одна страница в разделе, то её удалять нельзя
	Если ТаблицаСтраницРаздела.Количество() = 1 Тогда
		Возврат;
	КонецЕсли;

	ИмяТекТабличногоПоля     = "ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели;
	ТекТабличноеПоле         = Форма.ЭлементыФормы[ИмяТекТабличногоПоля];

	СтрТаблицаСтраницы = ТаблицаСтраницРаздела.Найти(Истина, "АктивнаяСтраница");

	Если СтрТаблицаСтраницы <> Неопределено Тогда
		ИндексТекСтрока = ТаблицаСтраницРаздела.Индекс(СтрТаблицаСтраницы);
		ТаблицаСтраницРаздела.Удалить(СтрТаблицаСтраницы);

		// очищаем редактируемые ячейки удаляемой страницы
		Форма.ОчиститьТабличноеПоле(ТекТабличноеПоле);

		КолвоДопСтраниц = ТаблицаСтраницРаздела.Количество();

		Если КолвоДопСтраниц > 0 Тогда
			СтрТаблицаСтраницыЗамена = ТаблицаСтраницРаздела[Мин(ИндексТекСтрока, КолвоДопСтраниц - 1)];

			// Для страниц многостраничного раздела, содержащих многострочную часть,
			// восстанавливаем структуру дополнительных строк.
			//
			// Предварительно проверим, содержит ли страница многострочные части

			КолвоМногострочныхБлоков = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
			Если ТипЗнч(КолвоМногострочныхБлоков) = Тип("ТаблицаЗначений") Тогда
				КолвоМногострочныхБлоков = КолвоМногострочныхБлоков.Количество();
			КонецЕсли;
			СохранятьМногострКакТЗ = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "СохранятьМногострКакТЗ");

			Если КолвоМногострочныхБлоков > 0 Тогда
				ДанныеДопСтрокРаздела = СтрТаблицаСтраницыЗамена.ДанныеДопСтрок;
			Иначе
				ДанныеДопСтрокРаздела = Неопределено;
			КонецЕсли;

			Если ДанныеДопСтрокРаздела <> Неопределено Тогда

				Если (КолвоМногострочныхБлоков > 0) И (НЕ СохранятьМногострКакТЗ) Тогда

					Для Каждого ГруппаСтрок Из ДанныеДопСтрокРаздела Цикл
						ИмяГруппыДопСтрок = ГруппаСтрок.Ключ;
						ДанныеГруппыСтрок = ГруппаСтрок.Значение;

						ПромТаблицаГруппыСтрок = ДанныеГруппыСтрок.Скопировать();

						// Заменяем таблицу значений с данными текущей страницы.
						Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
						// Выводим в табличный документ строки многострочной группы
						Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаГруппыСтрок);
					КонецЦикла;

				ИначеЕсли (КолвоМногострочныхБлоков > 0) И (СохранятьМногострКакТЗ) Тогда

					ИмяГруппыДопСтрок = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице(ИмяТекущейСтраницыПанели);
					ПромТаблицаДопСтрокРаздела = ДанныеДопСтрокРаздела.Скопировать();

					// Заменяем таблицу значений с данными текущей страницы.
					Форма.мСтруктураМногострочныхРазделов.Вставить(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);
					// Выводим строки многострочной группы замещающей страницы
					ФОрма.ВывестиРазделВТабличныйДокумент(ИмяГруппыДопСтрок, ПромТаблицаДопСтрокРаздела);

				КонецЕсли;

			КонецЕсли;

			ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных");
			// Восстановим данные замещаемой страницы.
			СтруктураДанныхСтраницыЗамена = СтрТаблицаСтраницыЗамена.Данные;

			Для Каждого Элемент Из СтруктураДанныхСтраницыЗамена Цикл
				ИмяПоказателя      = Элемент.Ключ;
				ЗначениеПоказателя = Элемент.Значение;

				Если ПредставлениеДанных Тогда
					Если Форма.ОбновитьПеременныеМодуля(ИмяПоказателя, ЗначениеПоказателя) Тогда
						Продолжить; // Пропустим цикл
					КонецЕсли;
				КонецЕсли;

				//Если Форма.мСтараяВерсияФормы <> Форма.мВерсияФормы Тогда

					Попытка
						ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
					Исключение
					КонецПопытки;

				//Иначе
				//	ТекТабличноеПоле.Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
				//КонецЕсли;

			КонецЦикла;
			
			СтрТаблицаСтраницыЗамена.АктивнаяСтраница = Истина;
		КонецЕсли;

		Форма.Расчет(ИмяТекущейСтраницыПанели);
//		ТекущийЭлемент     = ТекТабличноеПоле;
		Форма.Модифицированность = Истина;
	КонецЕсли;

	// Вывод в квадратики, того, что хранилось в переменных
	Если роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "ПредставлениеДанных") Тогда
		Форма.ЗаполнениеЗначенийВКвадратиках(ИмяТекущейСтраницыПанели);
	КонецЕсли;

	роПоказатьСтатикСтраницРаздела(Форма, ИмяТекущейСтраницыПанели);

КонецПроцедуры // роУдалитьДополнительнуюСтраницу()

// роПоказательВходитВМногострочнуюЧасть
//
// Функция определяем, входит ли переданный показатель в многострочную часть
// Параметры:
// ИмяПоказателя - строка, имя показателя
//
// Возврат:
// 0 - показатель не входит в многострочный блок
// >0 кол-во строк в многострочной части
//
Функция роПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя) Экспорт

	// В случае, если в отчете не объявлена переменная мСтруктураМногострочныхРазделов
	Если НЕ СвойствоОпределено(Форма, "мСтруктураМногострочныхРазделов") Тогда
		Возврат 0;
	КонецЕсли;

	ИмяГруппы = Лев(ИмяПоказателя, 11);

	СтруктураГруппы = Неопределено;

	Если НЕ Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы) Тогда
		Возврат 0;
	Иначе
		Возврат СтруктураГруппы.Количество();
	КонецЕсли;

КонецФункции // роПоказательВходитВМногострочнуюЧасть

// роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения
//
// Процедура считывает св-ва всех разделов и если раздел является автозаполняемым, то добавляется 3 параметра в элементы форм
//
Процедура роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения(Форма) Экспорт

	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		АвтоЗаполнение   = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если АвтоЗаполнение Тогда

			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения" + НазваниеСтраницы].СписокВыбора.Добавить(1, "не заполнять автоматически");
			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения" + НазваниеСтраницы].СписокВыбора.Добавить(2, "заполнять автоматически с корректировкой");
			Форма.ЭлементыФормы["ПолеВыбораВариантЗаполнения" + НазваниеСтраницы].СписокВыбора.Добавить(3, "заполнять автоматически без корректировки");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // роЗаполнитьЭлементыФормыДляСистемыАвтоЗаполнения

// Функция роЯвляетсяЧислом(Значение)
// Если передено число - то истина, иначе ложь
//
Функция роЯвляетсяЧислом(Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Число") Тогда

		Возврат Истина

	Иначе

		Если ТипЗнч(Значение) = Тип("Строка") Тогда
			Если Значение = "" Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

		Попытка
			Р = Число(Значение);
		Исключение
			Возврат Ложь;
		КонецПопытки;
			Возврат Истина;

	КонецЕсли;

КонецФункции // роЯвляетсяЧислом(Значение)

// Функция роЯвляетсяДатой(Знач Значение)
// является ли передаваемое значение датой или нет
//
Функция роЯвляетсяДатой(Знач Значение) Экспорт

	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Истина;
	КонецЕсли;

	Попытка
	Р = Дата(Значение);
	Исключение
	Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции // функция роЯвляетсяДатой(Знач Значение)

// Функция роКолвоЛистоВРазделе(ИмяСтраницыПанели)
// Получает количество листов в табличном документе, ориентируясь на параметр НомСтр
//
// Параметры:
// ИмяСтраницыПанели                    - имя страницы
//
// Возврат:
// Количество страниц в табличном документе
//
Функция роКолвоЛистоВРазделе(Форма, ИмяСтраницыПанели) Экспорт

	ФлагИскл = 0;
	КолЛистовВОдномерномЛисте = 1;

	ТекТаблПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели];

	Пока ФлагИскл = 0 Цикл

		Если КолЛистовВОдномерномЛисте = 1 Тогда
			КолЛистовВОдномерномЛистеСтр = "";
		Иначе
			КолЛистовВОдномерномЛистеСтр = Формат(Число(КолЛистовВОдномерномЛисте)) + "_";
		КонецЕсли;

		Если ТекТаблПоле.Области.Найти("НомСтр" + КолЛистовВОдномерномЛистеСтр + "1") <> Неопределено Тогда

			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте + 1;

		Иначе

			КолЛистовВОдномерномЛисте = КолЛистовВОдномерномЛисте - 1;
			ФлагИскл = 1;

		КонецЕсли;

	КонецЦикла;// пока искл = 0

	Возврат КолЛистовВОдномерномЛисте;

КонецФункции // роКолвоЛистоВРазделе(ИмяСтраницыПанели)

// ПроставитьВКвадратыЗначения
// Процедура проставляет переданное ей значение в необходимый лист
// декларации. Нельзя использовать в декларации Прибыль иностранной организации
// т.е. там своя процедура, проставляющая символ "равно" после вывода значения.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  Показатель     - показатель, смысловая его часть
//  Размерность    - кол-во символов и кол-во квадратиков на листе декларации
//  Значение       - непосредственно значение
//  ДополнитьЗначение - если переданное значение является числом, которое необходимо
//               округлять и производить другие действия, как с числом, то этому па-
//               раметру необходимо присвоить Истина, иначе во всех случаях Ложь.
//  НольКакНоль    - в случае, если сумма равна 0, то проставлять 0, Истина, если Ложь, то пусто.
//
Процедура роПроставитьВКвадратыЗначения(Форма, Знач Лист, Знач Показатель, Знач Размерность, Знач Значение, ДополнитьЗначение = Ложь, НольКакНоль = Ложь) Экспорт

	Раздел = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + СтрЗаменить(Лист, "ПолеТабличногоДокумента", "")];

	ДопРазряд = ""; // дополнительный разряд в счетчике
	ТестОк = Истина;

	// Логика осталась от прошлого, в случае именования ячеек с ведущем нулем
	// например: КБК_01, КБК_02 и т.д.
	Если Раздел.Области.Найти(Показатель + ДопРазряд + "1") = Неопределено Тогда
		ТестОк = Ложь;
	КонецЕсли;

	Если НЕ ТестОк Тогда
		Если ДопРазряд = "0" Тогда
			ДопРазряд = "";
		Иначе
			ДопРазряд = "0";
		КонецЕсли;
	КонецЕсли;

	// Если и с противоположным индексом показателя на листе нет, то не выполняем процедуру.
	Если Раздел.Области.Найти(Показатель + ДопРазряд + "1") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаФорматаЯчейки = СтрЗаменить(Форма.мСтрокаФормата, "; ЧН=-", "");
	// Убираем пробелы между группами разрядов числа
	СтрокаФорматаЯчейки = СтрокаФорматаЯчейки + "; ЧГ=0";

	Если (ДополнитьЗначение) Или ((роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

		Если ((роЯвляетсяЧислом(Значение)) И (Значение = 0)) Тогда

			Если НольКакНоль Тогда
				ЗначениеДопСтрока = ДополнитьСтроку("0", Размерность," ");
			Иначе
				ЗначениеДопСтрока = ДополнитьСтроку("", Размерность," ");
			КонецЕсли;

		Иначе

			ЗначениеДопСтрока = Формат(Значение, СтрокаФорматаЯчейки);
			ЗначениеДопСтрока = ДополнитьСтроку(ЗначениеДопСтрока, Размерность," ");

		КонецЕсли;

	Иначе

		ЗначениеДопСтрока = Значение;

	КонецЕсли; // ДополнитьЗначение

	ДопЗначение = 0;

	Для НомЯчейки = 1 По Размерность Цикл

		// Конструкция Попытка/Исключение/КонецПопытки добавлена, т.к. в декларациях по алкогольной
		// продукции 2006 не на всех листах есть ИНН/КПП, а установка этих показателей производится
		// централизовано через роЗаполнитьАвто где нет возможности обходить не нужные для заполнения
		// листы.
		Попытка
			
			Раздел.Области[Показатель + ?(СтрДлина(НомЯчейки) = 1, ДопРазряд + НомЯчейки, НомЯчейки)].Значение = Сред(ЗначениеДопСтрока, НомЯчейки, 1);
		Исключение
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры // ПроставитьВКвадратыЗначения(Лист, Показатель, Размерность, Значение)

// Функция проверяет вхождение области ячеек табличного документа 
// в многострочный раздел.
//
// Параметры:
//  Форма          - ссылка на форму отчета.
//  ТекущаяОбласть - область ячеек табличного документа;
//
// Возвращаемое значение:
//  строка, имя раздела, содержащего искомую область ячеек.
//  В случае, когда область не входит ни в какой многострочный раздел,
//  возвращает Неопределено.
//
Функция роРазделТекущейОбласти(Форма, ТекущаяОбласть) Экспорт

	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено; // отсутствует активная область табличного документа
	КонецЕсли;

	ИмяТекущейОбласти   = ТекущаяОбласть.Имя;
	ИмяАктивногоРаздела = Лев(ИмяТекущейОбласти, 13);

	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		СтруктураГруппы = ЭлементСтруктуры.Значение;

		Если СтруктураГруппы.Колонки.Найти(ИмяАктивногоРаздела) <> Неопределено Тогда
			Возврат ИмяГруппы;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции // роРазделТекущейОбласти()

// Функция ПолучитьСмысловуюЧастьИмениЯчейки
// возвращает смысловую часть ячейки
// полезно, если ячейка является квадратом значения
// если Определение = Истина - получитьСмысловуюЧасть, иначе - Получить счетчик, то что после "_"
//
// Параметры:
//  ИмяЯчейки      - название ячейки, строка.
//  Определение    - что необходимо вернуть, Истина - смысловую часть, Ложь - индекс.
//
// Возвращаемое значение:
//  Строка - смысловая часть или индекс
//
Функция роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Определение = Истина) Экспорт

	Для Инд = 1 По СтрДлина(ИмяЯчейки) Цикл
		// последний разделитель
		// не пользуемся тут функцией Найти, т.к. разделителей может быть много в одной ячейки, пример ИНН_1_1
		Если Инд >= 4 Тогда
			// считаем, что эта ячейка не многоквадратная и выходим
			Возврат "";
		КонецЕсли;
		
		СимволСтроки = Сред(ИмяЯчейки,СтрДлина(ИмяЯчейки) - Инд + 1 ,1);

		Если СимволСтроки = "_" Тогда 
		// встретился знак "_" считаем его разделителем
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли; // Сред

		//Если НЕ роЯвляетсяЧислом(СимволСтроки) Тогда
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(СимволСтроки) Тогда
		// встретилась буква разделить
			АдресПоследнегоРазделителя = СтрДлина(ИмяЯчейки) - Инд + 1;
			Прервать;
		КонецЕсли; // Сред
	КонецЦикла;

	СмысловаяЧасть = Сред(ИмяЯчейки, 1, АдресПоследнегоРазделителя); // возвращаем ВМЕСТЕ с разделителем
	// Получаем текущий счетчик
	ТекущийСчетчик = Сред(ИмяЯчейки, АдресПоследнегоРазделителя + 1, СтрДлина(ИмяЯчейки) - АдресПоследнегоРазделителя);

	Если Определение Тогда
		Возврат СмысловаяЧасть;
	Иначе
		Возврат ТекущийСчетчик;
	КонецЕсли;

КонецФункции // роПолучитьСмысловуюЧастьИмениЯчейки

// Процедура определяет алгоритм автозаполнения редактируемой ячейки по переданному коду
// показателя. Если у ячейки имеется признак автозаполнения, то ее значение формируется
// в соответствии с установленным алгоритмом.
//
// Параметры:
//   ИмяПоказателя      - строка, код показателя (имя ячейки);
//   ЗначениеПоказателя - устанавливаемое значение ячейки.
//
Процедура роУстановитьЗначениеПоказателя(Форма, ИмяПоказателя, Знач ЗначениеПоказателя) Экспорт

	Если (ИмяПоказателя = "П000030005003_1") Или (ИмяПоказателя = "П000030005003_2") Тогда
		// используются в ЕСН 2005г.
		ИмяСтраницыПанели = "Раздел3";
	Иначе
		ИмяСтраницыПанели = роОпределитьСтраницуПанелиПоКодуПоказателя(Форма, ИмяПоказателя);
	КонецЕсли;

	ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницыПанели);
	Если Не ТаблицаВариантыЗаполнения = Неопределено Тогда

		НайденнаяСтрока = ТаблицаВариантыЗаполнения.Найти(ИмяПоказателя, "КодПоказателя");
		Если НайденнаяСтрока <> Неопределено Тогда

			ВариантЗаполнения = НайденнаяСтрока.ВариантЗаполнения;

			// В случае, если предлагаемое значение не числовое и второй тип (с корректировкой)
			// тогда принимаем предложенное значение за 0.
			Если (НЕ роЯвляетсяЧислом(ЗначениеПоказателя)) И (ВариантЗаполнения = 2) Тогда
				ЗначениеПоказателя = 0;
			КонецЕсли;

			Если роЯвляетсяЧислом(ЗначениеПоказателя) Тогда
				НайденнаяСтрока.ЗначениеАвто = ЗначениеПоказателя;
			КонецЕсли;

			Если ВариантЗаполнения = 1 Тогда
				// заполняется только вручную
				Возврат;
			ИначеЕсли ВариантЗаполнения = 2 Тогда
				// автоматически, с возможностью ручной корректировки
				Дельта             = НайденнаяСтрока.Дельта;
				ЗначениеПоказателя = ЗначениеПоказателя + Дельта;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Попытка
		Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницыПанели].Области[ИмяПоказателя].Значение = ЗначениеПоказателя;
	Исключение
	КонецПопытки;

КонецПроцедуры // УстановитьЗначениеПоказателя()

// Функция определяет страницу основной панели формы, на которой табличный документ
// содержит показатель по переданному параметром "КодПоказателя" коду.
//
// Параметры:
//  Форма         - ссылка на форму отчета.
//  КодПоказателя - строка, код показателя.
//  РежимРаботы   - для специфических случаев, когда функция в разных отчетах была разной.
//
// Возвращаемое значение:
//  строка, имя найденной страницы основной панели формы.
//  Если страница не найдена, возвращает Неопределено.
//
Функция роОпределитьСтраницуПанелиПоКодуПоказателя(Форма, Знач КодПоказателя) Экспорт
	Перем ИмяСтраницы;

	Если СвойствоОпределено(Форма, "мПоляПоискаПоказателяВТСП") Тогда
		ПоляПоиска = Форма.мПоляПоискаПоказателяВТСП;
	Иначе
		ПоляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
	КонецЕсли;

	// В случае, если показатель многострочный (для импорта XML данных в зарплатных отчетах, тогда
	// определим его смысловую часть и найдем раздел.
	Если (Лев(КодПоказателя, 1) = "П") И (Найти(КодПоказателя, "_") = 14) Тогда
		КодПоказателя = Сред(КодПоказателя, 1, Найти(КодПоказателя, "_") - 1);
		// Временный обход для показателя по графе 10 раздела 3. В составе показателей
		// графы 10 нет, поэтому временно привяжем к разделу 3.
		Если КодПоказателя = "П000030001010" Тогда
			Возврат "Раздел3";
		КонецЕсли;
	КонецЕсли;

	Если Лев(КодПоказателя, 4) = "Шифр" Тогда
		Возврат "Раздел2_1";
	КонецЕсли;
	
	Если Лев(КодПоказателя, 5) = "Тариф"
		Или Лев(КодПоказателя, 17) = "КолЗастрахованных"
		Или Лев(КодПоказателя, 10) = "СрСписЧисл" Тогда
		Возврат "Титульный";
	КонецЕсли;

	НайденнаяСтрока = Форма.мТаблицаСоставПоказателей.Найти(КодПоказателя, ПоляПоиска);
	Если НайденнаяСтрока <> Неопределено Тогда
		ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
	КонецЕсли;

	Возврат ИмяСтраницы;

КонецФункции // ОпределитьСтраницуПанелиПоКодуПоказателя()

// Управляет видимостью страниц основной панели формы.
// Параметры:
//  Форма          - ссылка на форму отчета.
//
Процедура роПоказатьСтраницыОтчета(Форма) Экспорт

	Если ТипЗнч(Форма.мДеревоВыбранныхСтраниц) <> Тип("ДеревоЗначений") Тогда
		Возврат;
	КонецЕсли;

	ИмеютсяСкрытые      = Ложь;
	СтруктураПараметров = Новый Структура;

	Для Каждого СтрокаУровня1 Из Форма.мДеревоВыбранныхСтраниц.Строки Цикл

		ИмяСтраницыПанели  = СтрокаУровня1.ИмяСтраницы;
		ПоказатьСтраницу   = СтрокаУровня1.ПоказатьСтраницу;

		Если ПоказатьСтраницу = 0 Тогда
			Форма.ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Ложь;
			ИмеютсяСкрытые = Истина;
		Иначе
			Форма.ЭлементыФормы.ОсновнаяПанель.Страницы[ИмяСтраницыПанели].Видимость = Истина;

		КонецЕсли;

	КонецЦикла;

	// обновляем исходное дерево значений 
	Форма.мДеревоСтраницОтчета = Форма.мДеревоВыбранныхСтраниц.Скопировать();

	КнопкиНастройки = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.КнопкаНастройкаСтраниц;
	ИсходныйТекст   = "Настройка";

	Если ИмеютсяСкрытые Тогда
		// Выводим в названии кнопки "Настройка страниц" доп. сммвол '*'.
		КнопкиНастройки.Текст = ИсходныйТекст + " (*)...";
	КонецЕсли;
	Если НЕ ИмеютсяСкрытые Тогда
		КнопкиНастройки.Текст = ИсходныйТекст + "...";
	КонецЕсли;

КонецПроцедуры // роПоказатьСтраницыОтчета()

// ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст
// Функция возвращает текст, который выводится в сообщении во всех общих формах.
// Возвращаемое значение:
//  Строка для вывода в Сообщить
//
Функция ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст() Экспорт

	Возврат "Не выбрана организация.";

КонецФункции // ОсновнаяФормаОрганизацияНеЗаполненаВывестиТекст

// роПриИзмененииВидаДокументаИКорректировки
// Процедура управляем показателями ВидДок и НомКоррект на титульных листах деклараций.
// Запускается из обработчика "ПриИзменении"
// Параметры:
//  Форма           - ссылка на форму
//  РазделДокумента - элементуправления, табличная часть отчета. Например мТитульный
//  ВидДок          - строка, название на листе, если есть ВидДок
//  НомКоррект      - строка, название на листе, если есть НомерКорректировки
//
Процедура роПриИзмененииВидаДокументаИКорректировки(Форма, РазделДокумента = Неопределено, ВидДок = Неопределено, НомКоррект = Неопределено) Экспорт

	ВыбранКорректирующийВидДок = (Форма.ВидДокумента = 1);
	Если РазделДокумента <> Неопределено Тогда

		Если ВидДок <> Неопределено Тогда
			РазделДокумента.Области[ВидДок].Значение = ?(ВыбранКорректирующийВидДок, "3", "1");
		КонецЕсли;

		Если НомКоррект <> Неопределено Тогда
			РазделДокумента.Области[НомКоррект].Значение = Форма.НомерКорректировки;

			Если НЕ ВыбранКорректирующийВидДок Тогда
				РазделДокумента.Области[НомКоррект].Значение = "";
			Иначе
				РазделДокумента.Области[НомКоррект].Значение = Форма.НомерКорректировки;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	Форма.ЭлементыФормы.НомерКорректировки.Доступность = ВыбранКорректирующийВидДок;

КонецПроцедуры // роПриИзмененииВидаДокументаИКорректировки

// роДоступностьКнопокДобавитьУдалить
// Процедура управляет доступностью кнопок "Добавить" и "Удалить" формы.
// 
Процедура роДоступностьКнопокДобавитьУдалить(Форма, ТекущаяОбласть = Неопределено, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ТекущаяСтраницаПанели    = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
		ИмяТекущейСтраницыПанели = ТекущаяСтраницаПанели.Имя;
	КонецЕсли;

	Если Не ТекущаяОбласть = Неопределено Тогда
		КнопкаДобавить = Форма.ЭлементыФормы.Найти("КнопкаДобавитьДопСтроки" + ИмяТекущейСтраницыПанели);
		КнопкаУдалить = Форма.ЭлементыФормы.Найти("КнопкаУдалитьДопСтроки" + ИмяТекущейСтраницыПанели);

		Если КнопкаДобавить <> Неопределено И КнопкаУдалить <> Неопределено Тогда
			Если роРазделТекущейОбласти(Форма, ТекущаяОбласть ) = Неопределено Тогда
				КнопкаДобавить.Доступность = Ложь;
				КнопкаУдалить.Доступность = Ложь;
			Иначе
				КнопкаДобавить.Доступность = Истина;
				КнопкаУдалить.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // роДоступностьКнопокДобавитьУдалить()

// роПриАктивизацииОбластиРегламентированногоОтчета
//
Процедура роПриАктивизацииОбластиРегламентированногоОтчета(Форма, Элемент, ИмяТекущейСтраницыПанели = Неопределено) Экспорт

	СтруктураВзаимныхПереходовПрисутствует = СвойствоОпределено(Форма, "мСтруктураВзаимныхПереходов");

	// Для некоторых форм переменная мСтруктураВзаимныхПереходов не объявлена, поэтому
	// следующий блок сделаем через Попытку/Исключение
	// Не обязательно, что форма снабжена данным механизмом обхода номеров страниц.
	Если СтруктураВзаимныхПереходовПрисутствует Тогда
		Если Найти(Элемент.ТекущаяОбласть.Имя, "НомСтр") > 0 Тогда
			Если ТипЗнч(Форма.мСтруктураВзаимныхПереходов) = Тип("Структура") Тогда
				// Перед очисткой структуры сохраним имя нужной области для переходов.
				ИмяНужнойОбластиДляПереходов = Форма.мСтруктураВзаимныхПереходов.ИмяНужнойОбластиДляПереходов;
				// Снимем флаг, присвоев Неопределено структуре взаимных переходов.
				Форма.мСтруктураВзаимныхПереходов = Неопределено;
				ТекТабличноеПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя];
				ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяНужнойОбластиДляПереходов];
			КонецЕсли;
		ИначеЕсли (ТипЗнч(Форма.мСтруктураВзаимныхПереходов) = Тип("Структура"))
		   И (Элемент.ТекущаяОбласть.Имя <> Форма.мСтруктураВзаимныхПереходов.ИмяОткудаПереход) Тогда
			Форма.мСтруктураВзаимныхПереходов = Неопределено;
		КонецЕсли;
	КонецЕсли;

	Если ИмяТекущейСтраницыПанели = Неопределено Тогда
		ИмяТекущейСтраницыПанели = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли;

	КолвоМногострочныхБлоков = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");
	Если ТипЗнч(КолвоМногострочныхБлоков) = Тип("ТаблицаЗначений") Тогда
		КолвоМногострочныхБлоков = КолвоМногострочныхБлоков.Количество();
	КонецЕсли;
	Если КолвоМногострочныхБлоков > 0 Тогда

		ТекущаяОбласть = Элемент.ТекущаяОбласть;
		роДоступностьКнопокДобавитьУдалить(Форма, ТекущаяОбласть, ИмяТекущейСтраницыПанели);

	КонецЕсли;

	Если роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "РазделЯвляетсяАвтозаполняемым") Тогда

		роВывестиЭлементыВариантаЗаполнения(Форма, Элемент.ТекущаяОбласть);

	КонецЕсли;

КонецПроцедуры // роПриАктивизацииОбластиРегламентированногоОтчета

// роПриВыбореОбластиРегламентированногоОтчета
//
Функция ВыбраннаяОбластьРегламентированногоОтчетаНеВерна(Форма, Область, СтандартнаяОбработка) Экспорт

	Если (Найти(Область.Имя, "НомСтр") > 0)
	 Или (Найти(Область.Имя, "СоставленаНа") > 0) Тогда
		Если НЕ Форма.мСчетчикСтраниц = Истина Тогда
			// На титульных листах, НомСтр защищена, поэтому обходим ячейки, которые защищены.
			Если НЕ Область.Защита Тогда
				Ответ = Вопрос("Сейчас включен режим автоматической простановки номеров страниц." + Символы.ПС +
				               "Отключить этот режим и вводить номера вручную?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтандартнаяОбработка = Истина;
					Форма.мСчетчикСтраниц = Истина;
					Возврат Ложь;
				Иначе
					СтандартнаяОбработка = Ложь;
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Попытка сделана для того, чтобы в случае выделения нескольких ячеек (даже случайно)
	// не возникала ошибка
	Попытка
		Если (Область.Защита)
		 Или (Найти(Область.Имя, "R") >0)
		 Или (Найти(Область.Имя, "C") >0) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат Истина;
		КонецЕсли;
	Исключение
		СтандартнаяОбработка = Ложь;
		Возврат Истина;
	КонецПопытки;

	Возврат Ложь; // Выбранная область не выделение.

КонецФункции // роПриВыбореОбластиРегламентированногоОтчета

// роЗаполнитьСведенияОбОрганизации
//
Функция роЗаполнитьСведенияОбОрганизации(Форма, Знач СписокСведений, Дополнения = "", РазделДляВывода = "Титульный") Экспорт

	Если (Форма.Организация  = Неопределено) Или (Форма.Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации")) Тогда
		Возврат Неопределено;
	КонецЕсли;

	// Теперь получаем данные из глобальной общей функции
	ОКВЭДВариант = 0; // Стандартный вариант, нигде не применяется.
	Если ТипЗнч(СписокСведений) = Тип("Строка") Тогда
		Если Найти(СписокСведений, "ОКВЭДКвадратикиТочкиРазделения") > 0 Тогда
			ОКВЭДВариант = 1; // Авансы земля 2006
			СписокСведений = СтрЗаменить(СписокСведений, "ОКВЭДКвадратикиТочкиРазделения", "ОКВЭД");
		КонецЕсли;
	КонецЕсли;

	ОргСведения = ПолучитьСведенияОбОрганизации(Форма.Организация, Форма.ДатаПодписи, СписокСведений);

	Результат = "";
	ПБОЮЛ = ЭтоПБОЮЛ(Форма.Организация);
	мТитульный = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + РазделДляВывода];

	// ЕСЛИ В ДЕКЛАРАЦИИ СТАРЫЙ ФОРМАТ "УПОЛНОМОЧЕННЫЙ ПРЕДСТАВИТЕЛЬ", ТОГДА ДАННЫЕ ПО ПРЕДСТАВИТЕЛЮ ПОЛУЧИМ В Т.Ч. ИЗ СПРАВОЧНИКА РЕГИСТРАЦИИИФНС.
	// Алкогольные декларации.
	Если (мТитульный.Области.Найти("ИННУп1") <> Неопределено) Или
	     (мТитульный.Области.Найти("ИННУпП1") <> Неопределено) Тогда
		// Если в запросе данных передали параметр КодНО, то код Инспекции берем из справочника организаций,
		// иначе, с титульного листа.
		Если ОргСведения.Свойство("КодНО") Тогда
			КодНО = ОргСведения.КодНО;
		Иначе
			КодНО = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
		КонецЕсли;
		
		Если ОргСведения.Свойство("КППЮЛ") Тогда
			КПП = ОргСведения.КППЮЛ;
		Иначе
			КПП = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1_");
		КонецЕсли;

		// Получи данные о представителе.
		ДанныеПредставителя = ПолучитьСведенияОПредставителе(Форма, Ложь, КодНО, КПП);
		// "Сольем" данные в общую структуру.
		Если ОргСведения.Свойство("ФИОУпПред") Тогда
			ОргСведения.Вставить("ФИОУпПред", ДанныеПредставителя.ФИОУпПред);
		КонецЕсли;

		Если ОргСведения.Свойство("ИННУпПред") Тогда
			ОргСведения.Вставить("ИННУпПред", ДанныеПредставителя.ИННУпПред);
		КонецЕсли;

	КонецЕсли;

	ФИО = Неопределено;
	Если НЕ ОргСведения.Свойство("ФИО", ФИО) Тогда
		ФИО = Неопределено;
	КонецЕсли;

	НаимЮЛПол = Неопределено;
	Если НЕ ОргСведения.Свойство("НаимЮЛПол", НаимЮЛПол) Тогда
		НаимЮЛПол = Неопределено;
	КонецЕсли;

	ТипНП = Неопределено;
	Если ОргСведения.Свойство("ТипНП", ТипНП) Тогда
		Форма.УправлениеЛистами(ТипНП);
	КонецЕсли;

	Для Каждого ПолученныйРезультат Из ОргСведения Цикл

		Результат = ПолученныйРезультат.Значение;
		Параметр  = ПолученныйРезультат.Ключ;

		Если Параметр = "ИННРук" Тогда
			роПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННРук", 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННБух" Тогда
			роПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННГБ" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ИННУпПред" Тогда
			роПроставитьВКвадратыЗначения(Форма, "Титульный", "ИННУП" , 12, ?(ПБОЮЛ, "            ", Результат));
		ИначеЕсли Параметр = "ОКВЭД" Тогда
			// Используется как минимум в авансах по земельному налогу.
			Если ОКВЭДВариант = 1 Тогда

				ОбработанныйРезультат = Сред(Результат, 1, 2) + Сред(Результат, 4, 2) + Сред(Результат, 7, 2);
				роПроставитьВКвадратыЗначения(Форма, РазделДляВывода, "ОКВЭД" , 6, ОбработанныйРезультат);

			КонецЕсли;

		ИначеЕсли Параметр = "НаимЮЛПол" Тогда
			мТитульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		ИначеЕсли Параметр = "ТелОрганизации" Тогда
			мТитульный.Области.ТелОрганизации.Значение = Результат;
		ИначеЕсли Параметр = "ИННЮЛ" Тогда
			Если НЕ ПустоеЗначение(Результат) Тогда
				Результат = ДополнитьСтроку(Результат, 12, "0");
			Иначе
				Результат = ДополнитьСтроку(Результат, 12, " ");
			КонецЕсли;

			роПроставитьНаВсехЛистах(Форма, Результат, "ИНН", "", ,,, Истина);

		ИначеЕсли Параметр = "КППЮЛ" Тогда
			Результат = ДополнитьСтроку(Результат, 9, " ");
			роПроставитьНаВсехЛистах(Форма, Результат, "КПП", "", ,,, Истина);
		ИначеЕсли Параметр = "ОГРН" Тогда
			Если Дополнения = "не предусмотрено для заполнения ФЛ" И ПБОЮЛ Тогда
				ОГРН = "             ";
				ОГРНКоордината = "ОГРН";
			Иначе
				ОГРНКоордината = ?(ТипНП = 3, "ОГРНИП", "ОГРН");
				ОГРН = ДополнитьСтроку(Результат, ?(ТипНП = 3, 15, 13), " ");
			КонецЕсли;

			роПроставитьВКвадратыЗначения(Форма, "Титульный", ОГРНКоордината, СтрДлина(ОГРН), ОГРН);
		ИначеЕсли Параметр = "КодНО" Тогда
			Результат = ДополнитьСтроку(Результат, 4, " ");
			роПроставитьВКвадратыЗначения(Форма, "Титульный", "КодИМНС", 4, Результат);
		ИначеЕсли Параметр = "НаимНО" Тогда
			мТитульный.Области.ОргИМНС.Значение = Результат;
		ИначеЕсли Параметр = "ФИОРук" Тогда
			мТитульный.Области.ОргДиректор.Значение  = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "НаимОППол" Тогда
			Если ТипНП = 2 Тогда
				// Если данной организация - обособленное подразделение, то запишем её название, а в ячейку
				// под название организации, запишем название головной организации.
				мТитульный.Области.ОбПодрНазв.Значение = Результат;
				мТитульный.Области.ОргНазв.Значение = ОргСведения.НаимГоловнОрг;
			Иначе
				// Если заданная организация не обособка, тогда очистим её поле.
				мТитульный.Области.ОбПодрНазв.Значение = "";
			КонецЕсли;
		ИначеЕсли Параметр = "ФИОБух" Тогда
			мТитульный.Области.ОргБухгалтер.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Параметр = "ФИОУпПред" Тогда
			мТитульный.Области.ОргУП.Значение = ?(ПБОЮЛ, "", Результат);
		ИначеЕсли Найти(Параметр, "ТитульныйЛистФИО_") > 0 Тогда
			мТитульный.Области[Сред(Параметр, 18)].Значение = ФИО;
		ИначеЕсли Параметр = "НаимИОПол" Тогда
			мТитульный.Области.ИноОргНазв.Значение = Результат;
		КонецЕсли;

		// Если дата подписи поменялась, то перепишем название в декл. только для ПБОЮЛов.
		Если (Параметр = "НаимЮЛПол" Или Параметр = "ФИО") И ПБОЮЛ Тогда
			мТитульный.Области.ОргНазв.Значение = ?(ФИО = Неопределено, Результат, ?(ПБОЮЛ, ФИО, Результат));
		КонецЕсли;

	КонецЦикла;

	// Если на титульном листе найдена область ДокУпПред - докуент уполномоченного представителя, тогда получим данные о представителе.
	// В отчете должна быть процедура ПроставитьСведенияОПредставителеОрганизации().
	Если мТитульный.Области.Найти("ДокУпПред") <> Неопределено Тогда
		Попытка
			Форма.ПроставитьСведенияОПредставителеОрганизации();
		Исключение
		КонецПопытки;
	КонецЕсли;

	Форма.ЗаполнитьДатуВЯчейках();
	Возврат ОргСведения;

КонецФункции

// роПроставитьСведенияОПредставителеОрганизации
// Процедура заполнить титульный лист данными о представителе.
//
// Параметры:
//  Форма          - форма отчета
//  ФлагТолькоФЛ   - если Истниа, то на Титульном листе будет только ФЛ, если Ложь - то Юл или ФЛ.
//  СхемаПолученияКодИФНС - стандартная схема - строка 0, из титульного листа, 1 - декл. по НДПИ. Других вариантов нет.
//
Процедура роПроставитьСведенияОПредставителеОрганизации(Форма, ФлагТолькоФЛ, СхемаПолученияКодИФНС = "0") Экспорт
	// Получим данные из регистра контактной информации.
	ФИОУпПред = ПолучитьСведенияОбОрганизации(Форма.Организация, Форма.ДатаПодписи, "ФИОУпПред").ФИОУпПред;

	// Проверим данные в справочнике РегистрацияВИФНС

	мТитульный = Форма.ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	КодИФНС = "";
	Если СхемаПолученияКодИФНС = "0" Тогда
		КодИФНС = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
	КонецЕсли;
	// Для декларации по НДПИ, код ИФНС получается из рисунков на титульном листе.
	Если СхемаПолученияКодИФНС = "1" Тогда
		Попытка
			КодИФНС = СокрЛП(мТитульный.Рисунки.D59.Значение
			        + мТитульный.Рисунки.D60.Значение
			        + мТитульный.Рисунки.D62.Значение
			        + мТитульный.Рисунки.D61.Значение);
		Исключение
		КонецПопытки;
	КонецЕсли;

	КПП = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1_"); 	
	
	СтруктураПредставителя = ПолучитьСведенияОПредставителеОрганизации(Форма.Организация, КодИФНС, КПП, Форма.ДатаПодписи);
	Если НЕ ((ПустаяСтрока(СтруктураПредставителя.ПредставительЮр)) И (ПустаяСтрока(СтруктураПредставителя.ПредставительФЛ)) И (ПустаяСтрока(СтруктураПредставителя.ДокументПредставителя))) Тогда
		// Булево, если ПредставительЮр - пусто, значит ФЛ.
		Форма.мПредставительФизЛицо = ПустаяСтрока(СтруктураПредставителя.ПредставительЮр);
		Если (НЕ Форма.мПредставительФизЛицо) И (ФлагТолькоФЛ) Тогда
			// В данной декларации не предусмотрено заполнения представителя - Юр. лица, поэтому очистим данные, если они есть.
			Форма.мПредставительФизЛицо = Неопределено;
			Форма.мНазваниеПредставителя = "";
			Форма.мДокументПредставителя = "";
			Форма.мФамилияПредставителя = "";
			Форма.мИмяПредставителя = "";
			Форма.мОтчествоПредставителя = "";
			мТитульный.Области.ОргУп.Значение = "";
			мТитульный.Области.ДокУпПред.Значение = "";

			// В случае, если в РС всё-таки есть данные по представителю, тогда выведем их.
			Если НЕ ПустаяСтрока(ФИОУпПред) Тогда
				ФИОУпПредПолностью = ФИОУпПред;
				ФИОУпПред = СтрЗаменить(ФИОУпПред, " ", Символы.ПС);
				Форма.мПредставительФизЛицо = Истина;
				Форма.мФамилияПредставителя = СтрПолучитьСтроку(ФИОУпПред, 1);
				Форма.мИмяПредставителя = СтрПолучитьСтроку(ФИОУпПред, 2);
				Форма.мОтчествоПредставителя = СтрПолучитьСтроку(ФИОУпПред, 3);

				мТитульный.Области.ОргУп.Значение = ФИОУпПредПолностью;
				мТитульный.Области.ДокУпПред.Значение = "";

				Сообщить("Необходимо завести данные по представителю организации в справочник ""Регистрации в ИФНС"".", СтатусСообщения.Информация);
			КонецЕсли;

		Иначе
			Форма.мНазваниеПредставителя = СокрЛП(СтруктураПредставителя.ПредставительЮр);
			Форма.мДокументПредставителя = СокрЛП(СтруктураПредставителя.ДокументПредставителя);
			Форма.мФамилияПредставителя = СокрЛП(СтруктураПредставителя.Фамилия);
			Форма.мИмяПредставителя = СокрЛП(СтруктураПредставителя.Имя);
			Форма.мОтчествоПредставителя = СокрЛП(СтруктураПредставителя.Отчество);
			мТитульный.Области.ОргУп.Значение = ?(Форма.мПредставительФизЛицо, СтруктураПредставителя.ПредставительФЛ, СтруктураПредставителя.ПредставительЮр);
			мТитульный.Области.ДокУпПред.Значение = СтруктураПредставителя.ДокументПредставителя;
		КонецЕсли;
	Иначе
		// Если данные в справочнике "РегистрацияВИФНС" отсутствуют по представителю, то очистим ячейки на титульном листе.
		мТитульный.Области.ОргУп.Значение = "";
		мТитульный.Области.ДокУпПред.Значение = "";

		Форма.мПредставительФизЛицо = Неопределено;
		Форма.мНазваниеПредставителя = "";
		Форма.мДокументПредставителя = "";
		Форма.мФамилияПредставителя = "";
		Форма.мИмяПредставителя = "";
		Форма.мОтчествоПредставителя = "";

		// Возможно, данные есть в регистре контактной информации.
		Если НЕ ПустаяСтрока(ФИОУпПред) Тогда
			Форма.мПредставительФизЛицо = Истина;
			мТитульный.Области.ОргУп.Значение = ФИОУпПред;
			ФИОУпПред = СтрЗаменить(ФИОУпПред, " ", Символы.ПС);

			Форма.мФамилияПредставителя = СтрПолучитьСтроку(ФИОУпПред, 1);
			Форма.мИмяПредставителя = СтрПолучитьСтроку(ФИОУпПред, 2);
			Форма.мОтчествоПредставителя = СтрПолучитьСтроку(ФИОУпПред, 3);
			Сообщить("Необходимо завести данные по представителю организации в справочник ""Регистрации в ИФНС"".", СтатусСообщения.Информация);

		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(мТитульный.Области.ОргУп.Значение) Тогда
		мТитульный.Области.ОргДиректор.Значение = "";
	КонецЕсли;

КонецПроцедуры

// Функция роОбластьЯвляетсяЯчейкойСоставногоПоля
// проверяет, является ли переданное имя ячейки частью многоКвадратной
// группы ячеек на листе
// если да - то истина, иначе - Ложь
//
Функция роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки, БыстраяПроверка = Истина) Экспорт

		СмысловаяЧасть = роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
		Если СмысловаяЧасть = "" Тогда
			// не квадратичная ячейка
			Возврат Ложь;
		КонецЕсли;

		Если БыстраяПроверка Тогда
			Возврат Истина;
		КонецЕсли;

		ИмяСтраницыПанели = роОпределитьСтраницуПанелиПоКодуПоказателя(Форма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		// Получаем текущий счетчик
		//ТекущийСчетчик = Сред(ИмяЯчейки,АдресПоследнегоРазделителя+1,СтрДлина(ИмяЯчейки)-АдресПоследнегоРазделителя);
		ТекущийСчетчик = роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки,Ложь);
		Если СтрДлина(ТекущийСчетчик) >= 2 Тогда

			Если Сред(ТекущийСчетчик, 1, 1) = "0" Тогда
				ПризнакСчетчикаСнулемВпереди = Истина;
			Иначе
				ПризнакСчетчикаСнулемВпереди = Ложь;
			КонецЕсли;
		Иначе
			ПризнакСчетчикаСнулемВпереди = Ложь; // перед счетчиком нет нуля
		КонецЕсли;

		Если роЯвляетсяЧислом(ТекущийСчетчик) Тогда
			ТекущийСчетчикЦел = ТекущийСчетчик;
		Иначе
			Возврат Ложь;
		КонецЕсли;

		Координата = СмысловаяЧасть + ?(ПризнакСчетчикаСнулемВпереди = Истина,"0" + Строка(ТекущийСчетчикЦел + 1),ТекущийСчетчикЦел + 1);

		Если Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области.Найти(Координата) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;

		// значение получено
		Возврат Истина;

КонецФункции // роОбластьЯвляетсяЯчейкойСоставногоПоля

// роСвойстваГрупповыхЗначений
// Процедура управляет показателями на форме оформленные как в квадратных значениях
// Имя Ячейки всегда должно быть первой в квадратичном представлении
// Параметры:
//  Форма          - ссылка на форму
//  ИмяЯчейки      - имя ячейки
//  Операция       - название производимой операции
//  ЦветФона       - цвет фона
//  ИмяСтраницы    - имя страницы
//
Процедура роСвойстваГрупповыхЗначений (Форма, ИмяЯчейки, Операция, ЦветФона = Неопределено, ИмяСтраницы = Неопределено) Экспорт

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницыПанели = роОпределитьСтраницуПанелиПоКодуПоказателя(Форма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ИмяСтраницыПанели = ИмяСтраницы;
	КонецЕсли;

	ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

	СмысловаяЧасть = роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки);
	Если СмысловаяЧасть = "" Тогда
	// не групповая ячейка
		Возврат;
	КонецЕсли;
	ТекущийСчетчик = роПолучитьСмысловуюЧастьИмениЯчейки(ИмяЯчейки, Ложь);
	ТекущийСчетчикЦел = Число(ТекущийСчетчик);
	МожноРаботать = Истина;
	Пока МожноРаботать Цикл
		Координата = СмысловаяЧасть + Строка(ТекущийСчетчикЦел);

		Если Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области.Найти(Координата) <> Неопределено Тогда
			Попытка
				Если Операция = "УстановитьЗащиту" Тогда
					Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Истина;
				КонецЕсли;

				Если Операция = "СнятьЗащиту" Тогда
					Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Защита = Ложь;
				КонецЕсли;

				Если Операция = "ПроставитьЦветРаскраски" Тогда
					Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].ЦветФона = ЦветФона;
				КонецЕсли;

				Если Операция = "Очистить" Тогда
					Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[Координата].Значение = "";
				КонецЕсли;

				ТекущийСчетчикЦел = ТекущийСчетчикЦел + 1; // работаем со следующей ячейкой

			Исключение
				МожноРаботать = Ложь; // далее нет ячеек многоквадратного значения
				Прервать;
			КонецПопытки;

		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла; // Пока

КонецПроцедуры // роСвойстваГрупповыхЗначений

//Процедура роИзменитьТаблицуВариантовЗаполнения
// Изменяет всем признак корректировки ячеей на 1
// если 1 - то вернем всё к ЭТАЛОНу
// если 0 - то вернем все ячейки к желтому цвету, доступных для редактирования
//
// Логика процедуры изменена: процедура работает только с показателями, с признаком
// автозаполнения равным 4.
// Для использования в декларациях необходимо соблюсти следующие требования:
// 1. Процедуры получения таблицы вариантов заполнения либо не должно быть либо она должна использовать
// только вызов роФУНКЦИИ получения таблицы, не более.
// 2. УстановитьЦветФона - должна быть объявленной как Экспортная.
// 3. Не должно быть процедуры ПолучитьКоличествоСтраницРаздела
//
Процедура роИзменитьТаблицуВариантовЗаполнения(Форма, ПолныйРучнойВвод = Ложь) Экспорт

	Перем МассивВариантовЗаполненияСтраниц;
	мДеревоСтраницОтчета = Форма.мДеревоСтраницОтчета;
	ПереборЗнач = мДеревоСтраницОтчета.Строки.Количество();

	Пока ПереборЗнач > 0 цикл
		ИмяСтраницы = мДеревоСтраницОтчета.Строки[ПереборЗнач-1].ИмяСтраницы;
		ПереборЗнач = ПереборЗнач-1;
		// а если это многостраничный раздел?
		КолСтрВРазделе = роПолучитьКоличествоСтраницРаздела(Форма, ИмяСтраницы); // кол-во страниц в разделе
		// ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницы, ПолныйРучнойВвод);
		// Всегда получим актуальную таблицу заполнения. Не эталонную.
		ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяСтраницы);

		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Если НЕ ПолныйРучнойВвод Тогда
			// Если раздел многостраничный, то нужно насквозь все обнулять !!!

			Если КолСтрВРазделе = 1 Тогда

				Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
					Если Строка.ВариантЗаполнения = 4 Тогда
						Строка.ВариантЗаполнения = 0; // полный ручной ввод
					КонецЕсли;
				КонецЦикла; // Для Каждого Строка Из

				//МассивВариантовЗаполненияСтраниц = Новый Массив;
				//МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				//Форма.мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
			КонецЕсли; // КолСтрВРазделе = 1 Иначе // если многостраничный раздел
			
			Если КолСтрВРазделе >= 2 Тогда

				Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
					Продолжить;
				КонецЕсли;

				Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
					Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
						Если Строка.ВариантЗаполнения = 4 Тогда
							Строка.ВариантЗаполнения = 0; // полный ручной ввод
						КонецЕсли; // ВариантЗаполнения <> 0 
					КонецЦикла; // Для каждого
				КонецЦикла; // Для
				Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим
			КонецЕсли; // КолСтрВРазделе >= 2

		ИначеЕсли ПолныйРучнойВвод Тогда

			// Всё в эталонном виде
			Если КолСтрВРазделе = 1 Тогда
				Для Каждого Стр Из ТаблицаВариантыЗаполнения Цикл
					Если Стр.ВариантЗаполнения = 0 Тогда
						Стр.ВариантЗаполнения = 4
					КонецЕсли;
				КонецЦикла;

				//МассивВариантовЗаполненияСтраниц = Новый Массив;
				//МассивВариантовЗаполненияСтраниц.Добавить(ТаблицаВариантыЗаполнения);
				//Форма.мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц);

				Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы);

			КонецЕсли; // если одна страница в разделе

			Если КолСтрВРазделе >= 2 Тогда
				Если Не Форма.мСтруктураВариантыЗаполнения.Свойство(ИмяСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
					Продолжить;
				КонецЕсли;

				Для Инд = 0 по МассивВариантовЗаполненияСтраниц.Количество() - 1 Цикл
					// МассивВариантовЗаполненияСтраниц1[Инд].Добавить(ТаблицаВариантыЗаполнения);
					Для Каждого Строка Из МассивВариантовЗаполненияСтраниц[Инд] Цикл
						Если Строка.ВариантЗаполнения = 0 Тогда
							//НайденнаяСтрокаК = ТаблицаВариантыЗаполнения.Найти(Строка.КодПоказателя, "КодПоказателя");
							Строка.ВариантЗаполнения = 4; // полный автоматический ввод
						КонецЕсли; // ВариантЗаполнения <> 0 
					КонецЦикла; // Для каждого

				КонецЦикла; // Для

				// мСтруктураВариантыЗаполнения.Вставить(ИмяСтраницы, МассивВариантовЗаполненияСтраниц1);
				Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы); // текущую обновим

			КонецЕсли; // если более 1 страница в разделе

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // Процедура роИзменитьТаблицуВариантовЗаполнения(ПолныйРучнойВвод = 0)

//ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)
// Возвращает кол-во страниц для любых многостраничных разделов
// если лист без доп. страниц, Тогда 1
//
Функция роПолучитьКоличествоСтраницРаздела(Форма, ИмяТекущейСтраницыПанели) Экспорт
Перем ТаблицаСтраницРаздела;

	Если Не Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяТекущейСтраницыПанели, ТаблицаСтраницРаздела) Тогда
		Возврат 1;
	КонецЕсли;

	КоличествоСтраниц    = Макс(ТаблицаСтраницРаздела.Количество(), 1);
	Возврат КоличествоСтраниц;
КонецФункции // ПолучитьКоличествоСтраницРаздела(ИмяТекущейСтраницыПанели)

// роОчиститьВариантыЗаполнения
// Процедура выполняет очистку структуры мСтруктураВариантовЗаполнения.
// Создается новый массив с ЭТАЛОННЫМ вариантом заполнения показателей, затем
// этот массив записывается в структуру.
// Параметры:
//  Форма          - ссылка на форму декларации (ЭтаФорма)
//  Раздел         - по умолчанию Неопределено - для всех разделов, можно указать конкретный.
//  УстановитьЦветВРазделе - Истина по умолчанию. Запускается УстановитьЦветФона, Ложь - не запускается
//                 Необходимо после удаления доп. страниц, и показа статика, в процедуре показа статика уже
//                 есть вызов раскраски ячеек, поэтому повторно делать это в данной процедуре не нужно.
//
Процедура роОчиститьВариантыЗаполнения(Форма, Знач Раздел = Неопределено, УстановитьЦветВРазделе = Истина) Экспорт

	Перем МассивВариантовЗаполненияСтраниц;

	// Данная процедура используется только в новых декларациях, где установлены показатели Е как 14.2
	// Через процеудру УстановитьФормат

	мОписаниеТиповЧислоЕ = ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(14, 2);
	ИзмененияЕсть = Ложь;
	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		// Считываем название раздела и его свойство в системе автозаполнения
		НазваниеСтраницы = СтрокаУровня1.ИмяСтраницы;
		Если Раздел <> Неопределено Тогда
			Если Раздел <> НазваниеСтраницы Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		//АвтоЗаполнение   = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если Форма.мСтруктураВариантыЗаполнения.Свойство(НазваниеСтраницы, МассивВариантовЗаполненияСтраниц) Тогда
			// Получим ЭТАЛОННЫЙ макет вариантов показателей.
			ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, НазваниеСтраницы, Истина, мОписаниеТиповЧислоЕ);

			// Суда подпадают Титульные, ФизЛица и др.
			Если ТаблицаВариантыЗаполнения <> Неопределено Тогда

				// Объявим новый массив
				МассивВариантовЗаполненияСтраниц = Новый Массив;

				ТаблВариантов = ТаблицаВариантыЗаполнения.Скопировать();
				// Вставим в массив эталонный вариант.
				МассивВариантовЗаполненияСтраниц.Добавить(ТаблВариантов);
				Форма.мСтруктураВариантыЗаполнения.Вставить(НазваниеСтраницы, МассивВариантовЗаполненияСтраниц);
				ИзмененияЕсть = Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если (ИзмененияЕсть) И (Форма.ФлажокОтклАвтоРасчет) Тогда
		роИзменитьТаблицуВариантовЗаполнения(Форма, НЕ Форма.ФлажокОтклАвтоРасчет);
	КонецЕсли;

	Если (ИзмененияЕсть) И (НЕ Форма.ФлажокОтклАвтоРасчет) Тогда
		// Обеспечим простановку цветов ячеек.
		// Автоматически при переходах по вкладкам разделов устанавливаются цвета только
		// Для многостраничных разделов. Поэтому, если раздел не многостраничны и автозаполняется
		// тогда прорисовываем цвета, а также, если многостраничный, автозаполняемый и текущий лист,
		// также перерисуем.
		Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
			ИмяСтраницы = СтрокаУровня1.ИмяСтраницы;

			// Возможно, нужный раздел передали через параметр. Тогда установим цвета только
			// в нужном разделе.
			Если Раздел <> Неопределено Тогда
				Если Раздел <> ИмяСтраницы Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Автозаполняется = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "РазделЯвляетсяАвтозаполняемым", Ложь);
			//Многостраничность = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);

			// Перерисовка по цвету происходить должна и для многостр. и для обычного раздела.
			// Т.к. меняются варианты заполнения. Процедура запускается при очистки отчета в целом
			// и перед автозаполнением для многостраничных разделов заполняемых из ИБ (крайние случаи: имущество, прибыль).
			// 
			// В механизме очистки отчета в целом, предусмотре вызов роОчиститьВариантыЗаполнения, поэтому
			// при очистки из отчета, всей декларации необходимо перекрасить ячейки, т.к. варианты при очистка декларации
			// всегда становятся эталонными, а значит, перекрашиваем ячейки в соответствующий цвет.

			Если Автозаполняется И УстановитьЦветВРазделе Тогда
				Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // роОчиститьВариантыЗаполнения

// ВернутьЗначениеСЛиста
// Функция возвращает значения с табличного поля
// Параметры:
//  Форма          - ссылка на форму
//  СтраницаПанели - название страницы панели или раздела декларации
//  ОсновнаяЧасть  - основная часть показателя
// Возвращаемое значение:
//  Текстовое значение, считанное с указанного параметра на листе декларации
//
Функция роВернутьЗначениеПараметраСЛиста(Форма, СтраницаПанели, ОсновнаяЧасть) Экспорт

	ТекОбласть = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + СтраницаПанели];
	ТекИндекс = 1;

	Результат = "";
	Пока ТекОбласть.Области.Найти(ОсновнаяЧасть + Строка(ТекИндекс)) <> Неопределено Цикл
		Результат = Результат + ТекОбласть.Области[ОсновнаяЧасть + Строка(ТекИндекс)].Значение;
		ТекИндекс = ТекИндекс + 1;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ВернутьЗначениеСЛиста

// ВвестиКодОГРННаТитульномЛистеРегламентированногоОтчета
// Процедура обеспечивает ввод и корректировку кода ОГРН на стандартные титульные листы деклараций
// Параметры:
//  Форма          - ссылка на форму отчета
//  ОбластьИмя     - строка, имя активной ячейки
// Возвращаемое значение:
//  Нет.
//
Процедура ВвестиКодОГРННаТитульномЛистеРегламентированногоОтчета(Форма, ОбластьИмя) Экспорт

	Если Найти(ОбластьИмя, "ОГРН") > 0 Тогда
		Если Найти(ОбластьИмя, "ОГРНИП") > 0 Тогда
			ПБОЮЛ = Истина;
			ОГРН = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "ОГРНИП");
		Иначе
			ОГРН = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "ОГРН");
			ПБОЮЛ = Ложь;
		КонецЕсли;
		ОГРН = СокрЛП(ОГРН);

		Если ВвестиСтроку(ОГРН, "Введите ОГРН " + ?(ПБОЮЛ, "предпринимателя", "организации"), ?(ПБОЮЛ, 15, 13)) Тогда
			Если (ОГРН = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ОГРН)) И (СтрДлина(ОГРН) = ?(ПБОЮЛ, 15, 13)) Тогда
				роПроставитьВКвадратыЗначения(Форма, "Титульный", ?(ПБОЮЛ, "ОГРНИП", "ОГРН"), ?(ПБОЮЛ, 15, 13), ОГРН);
				Форма.Модифицированность = Истина;
			Иначе
				Сообщить("Код ОГРН должен состоять из " + ?(ПБОЮЛ, "15", "13") + " цифр.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВвестиКодОГРННаТитульномЛистеРегламентированногоОтчета

// ВернутьЛогическийЗнакВСтроке
// Функция анализирует формулу и находит знак сравнения.
// Параметры:
//  Формула              - Формула разбора.
// Возвращаемое значение:
//   Структура, содержащая ключи ПеречислениеВидСравнения и СтрокаСравнения
//  ВернутьПеречисление  - Булево, если Истина, то возвращаемое значение перечисление, иначе строка знака.
//
Функция ВернутьЛогическийЗнакВСтроке(Знач Формула) Экспорт

	Пока Найти(Формула, "[") > 0 Цикл
		СкобкаОтк = Найти(Формула, "[");
		СкобкаЗак = Найти(Формула, "]");
		Скобка = Сред(Формула, СкобкаОтк, СкобкаЗак - СкобкаОтк + 1);
		Формула = СтрЗаменить(Формула, Скобка, "");
	КонецЦикла;

	Если Найти(Формула, ">=") > 0 Тогда
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", ВидСравнения.БольшеИлиРавно, ">=");
	ИначеЕсли Найти(Формула, "<=") > 0 Тогда
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", ВидСравнения.МеньшеИлиРавно, "<=");
	ИначеЕсли Найти(Формула, "<>") > 0 Тогда
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", ВидСравнения.НеРавно, "<>");
	ИначеЕсли Найти(Формула, "=") > 0 Тогда
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", ВидСравнения.Равно, "=");
	ИначеЕсли Найти(Формула, ">") > 0 Тогда
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", ВидСравнения.Больше, ">");
	ИначеЕсли Найти(Формула, "<") > 0 Тогда
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", ВидСравнения.Меньше, "<");
	Иначе
		Возврат Новый Структура("ПеречислениеВидСравнения, СтрокаСравнения", Неопределено, Неопределено);
	КонецЕсли;

КонецФункции // ВернутьЛогическийЗнакВСтроке

// СтандратныеОперацииПоУстановкамМасок
//
Процедура СтандратныеОперацииПоУстановкамМасок(Форма) Экспорт

	мТитульный = Форма.ЭлементыФормы.ПолеТабличногоДокументаТитульный;

	Счетчик = 1;
	// Установим маски для титульного листа отчета, где есть области СоставленаНа
	Пока мТитульный.Области.Найти("СоставленаНа" + Формат(Счетчик, "ЧГ=0")) <> Неопределено Цикл
		мТитульный.Области["СоставленаНа" + Формат(Счетчик, "ЧГ=0")].ЭлементУправления.Маска = "9";
		Счетчик = Счетчик + 1;
	КонецЦикла;

	Счетчик = 1;
	// Установим маски для титульного листа отчета, где есть области Прил
	Пока мТитульный.Области.Найти("Прил" + Формат(Счетчик, "ЧГ=0")) <> Неопределено Цикл
		мТитульный.Области["Прил" + Формат(Счетчик, "ЧГ=0")].ЭлементУправления.Маска = "9";
		Счетчик = Счетчик + 1;
	КонецЦикла;

	// Установим маски для кода ИМНС.
	Счетчик = 1;
	// Установим маски для титульного листа отчета, где есть области Прил
	Пока мТитульный.Области.Найти("КодИМНС" + Формат(Счетчик, "ЧГ=0")) <> Неопределено Цикл
		мТитульный.Области["КодИМНС" + Формат(Счетчик, "ЧГ=0")].ЭлементУправления.Маска = "9";
		Счетчик = Счетчик + 1;
	КонецЦикла;

	// Для деклараций по животному миру и водным биоресурсам.
	Счетчик = 1;
	Пока мТитульный.Области.Найти("ПорядковыйНом" + Формат(Счетчик, "ЧГ=0")) <> Неопределено Цикл
		мТитульный.Области["ПорядковыйНом" + Формат(Счетчик, "ЧГ=0")].ЭлементУправления.Маска = "9";
		Счетчик = Счетчик + 1;
	КонецЦикла;

	// Установим маску для НомСтр
	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл
		ИмяСтраницы = СтрокаУровня1.ИмяСтраницы;
		КоличествоЛистов = роКолвоЛистоВРазделе(Форма, ИмяСтраницы);

		Для Инд = 1 По КоличествоЛистов Цикл

			Счетчик = 1;
			ПрефиксЛист = ?(Инд = 1, "", Формат(Инд, "ЧГ=0") + "_");
			ОбластьОбращения = "НомСтр" + ПрефиксЛист + Формат(Счетчик, "ЧГ=0");

			Пока Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы].Области.Найти(ОбластьОбращения) <> Неопределено Цикл
				Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы].Области[ОбластьОбращения].ЭлементУправления.Маска = "9";
				Счетчик = Счетчик + 1;
				ОбластьОбращения = "НомСтр" + ПрефиксЛист + Формат(Счетчик, "ЧГ=0");
			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // СтандратныеОперацииПоУстановкамМасок

// ИмпортДанныхРегламентированнойОтчетностиИзКонтейнераXML
// Функция осуществляет разбор файла XML, учитываются все данные отчета, разделы, доп. листы и т.д.
// Параметры:
//  ИмяФайла       - имя файла XML. Не проверяется на наличие!
// Возвращаемое значение:
//  Структура, содержащая данные отчета по каждому разделу. В случае, если файл не правильного формата
//  или произошла какая-либо ошибка - возвращаемое значение Неопределено.
//
Функция ИмпортДанныхРегламентированнойОтчетностиИзКонтейнераXML(ИмяФайла) Экспорт

	// Объявим структуру узла СведенияОтчета
	СведенияОтчета = Новый Структура;
	СведенияОтчета.Вставить("НаименованиеОтчета", Неопределено);
	СведенияОтчета.Вставить("КНД", Неопределено);
	СведенияОтчета.Вставить("Периодичность", Неопределено);
	СведенияОтчета.Вставить("Период", Неопределено);
	СведенияОтчета.Вставить("ИНН", Неопределено);
	СведенияОтчета.Вставить("КПП", Неопределено);
	// СведенияОтчета.Вставить("ЕдИзм", Неопределено);
	// СведенияОтчета.Вставить("Точность", Неопределено);
	СведенияОтчета.Вставить("НомерКорректировки", Неопределено);
	СведенияОтчета.Вставить("ДатаПодписания", Неопределено);

	ТаблицаРаздела = Новый ТаблицаЗначений;
	ТаблицаРаздела.Колонки.Добавить("Данные");
	ТаблицаРаздела.Колонки.Добавить("Раздел", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));

	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
	Исключение
		Возврат Неопределено; // Ошибка
	КонецПопытки;

	Счетчик = 0;
	СчитаныПоказатели = Ложь;

	ДанныеИмпорта = Новый Структура;

	Пока ЧтениеXML.Прочитать() Цикл
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Узел = ЧтениеXML.Имя;
			Если Узел = "ДанныеРегламентированнойОтчетности" Тогда
				
			ИначеЕсли Узел = "РегламентированныйОтчет" Тогда
				Счетчик = Счетчик + 1;
				НачатыйУзел = "РегламентированныйОтчет" + Формат(Счетчик, "ЧГ=0");

			ИначеЕсли Узел = "СведенияОтчета" Тогда
				СведенияОтчетаРузультат = Новый Структура;
				Для каждого Элемент Из СведенияОтчета Цикл
					СведенияОтчетаРузультат.Вставить(Элемент.Ключ, ЧтениеXML.ПолучитьАтрибут(Элемент.Ключ));
				КонецЦикла;
			Иначе

				НайденнаяСтрока = ТаблицаРаздела.Найти(Узел, "Раздел");
				Если НайденнаяСтрока <> Неопределено Тогда
				// Уже есть экземпляр раздела
					НовСтр = НайденнаяСтрока.Данные.Добавить();
					НовСтр.СтруктураДанных = СобратьДанныеИзXMLУзла(ЧтениеXML);
				Иначе
					// Запишем результат в таблицу
					ТаблицаДанных = Новый ТаблицаЗначений;
					ТаблицаДанных.Колонки.Добавить("СтруктураДанных");
					НовСтрТаблицаДанных = ТаблицаДанных.Добавить();
					НовСтрТаблицаДанных.СтруктураДанных = СобратьДанныеИзXMLУзла(ЧтениеXML);

					НовСтр = ТаблицаРаздела.Добавить();
					НовСтр.Раздел = Узел;
					НовСтр.Данные = ТаблицаДанных.Скопировать();
				КонецЕсли;

			КонецЕсли;
		ИначеЕсли (ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента) И (ЧтениеXML.Имя = "РегламентированныйОтчет") Тогда

			Результат = Новый Структура;
			Результат.Вставить("ДанныеРазделовОтчета", ТаблицаРаздела.Скопировать());
			Результат.Вставить("СведенияОтчета", ПолучитьКопиюСтруктуры(СведенияОтчетаРузультат));
			ДанныеИмпорта.Вставить(НачатыйУзел, Результат);
			ТаблицаРаздела.Очистить();

		КонецЕсли;
	КонецЦикла;

	ЧтениеXML.Закрыть();
	Возврат ДанныеИмпорта;

КонецФункции // ИмпортДанныхРегламентированнойОтчетностиИзКонтейнераXML

// ПолучитьКопиюСтруктуры
//
Функция ПолучитьКопиюСтруктуры(Знач СтруктураРезультата)
	Результат = Новый Структура;
	Для Каждого Стр Из СтруктураРезультата Цикл
		Результат.Вставить(Стр.Ключ, Стр.Значение);
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьКопиюСтруктуры

// СобратьДанныеИзXMLУзла
//
Функция СобратьДанныеИзXMLУзла(ЧтениеXML)

	Результат = Новый Структура;
	Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
		Показатель = ЧтениеXML.Имя;
		Значение = ЧтениеXML.Значение;
		Результат.Вставить(Показатель, Значение);
	КонецЦикла;

	Возврат Результат;

КонецФункции // СобратьДанныеИзXMLУзла

// ПолучитьДанныеРегламентированнойОтчетностиЭтогоОтчета
//
Функция ПолучитьДанныеРегламентированнойОтчетностиЭтогоОтчета(ДанныеКонтейнера, СтруктураИдентификацииДанных, УчитыватьПериодичность = Истина) Экспорт

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НазваниеОтчета");
	Результат.Колонки.Добавить("ДанныеОтчета");

	Для каждого Отчет Из ДанныеКонтейнера Цикл

		// Проверка на заполненность данных.
		Если Отчет.Значение.СведенияОтчета.КНД = Неопределено
		Или Отчет.Значение.СведенияОтчета.Период = Неопределено
		Или Отчет.Значение.СведенияОтчета.Периодичность = Неопределено
		Или Отчет.Значение.СведенияОтчета.ИНН = Неопределено
		Или Отчет.Значение.СведенияОтчета.КПП = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		// Проверка на подходящие данные.
		Если СокрЛП(Отчет.Значение.СведенияОтчета.ИНН) <> СокрЛП(СтруктураИдентификацииДанных.ИНН)
		 Или СокрЛП(Отчет.Значение.СведенияОтчета.КПП) <> СокрЛП(СтруктураИдентификацииДанных.КПП) Тогда
			Продолжить;
		КонецЕсли;

		Если СокрЛП(Отчет.Значение.СведенияОтчета.КНД) <> СокрЛП(СтруктураИдентификацииДанных.КНД) Тогда
			Продолжить;
		КонецЕсли;

		Если УчитыватьПериодичность Тогда
			Если СокрЛП(Отчет.Значение.СведенияОтчета.Периодичность) <> СокрЛП(СтруктураИдентификацииДанных.Периодичность) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если СокрЛП(Отчет.Значение.СведенияОтчета.Период) <> СокрЛП(СтруктураИдентификацииДанных.Период) Тогда
			Продолжить;
		КонецЕсли;

		НовСтр = Результат.Добавить();
		НовСтр.НазваниеОтчета = Отчет.Значение.СведенияОтчета.НаименованиеОтчета;
		НовСтр.ДанныеОтчета = ПолучитьКопиюСтруктуры(Отчет.Значение);

	КонецЦикла;

	Если Результат.Количество() = 0 Тогда
		// Нет необходимого отчета.
		Возврат Неопределено;
	КонецЕсли;

	Если Результат.Количество() = 1 Тогда
		Возврат Результат[0].ДанныеОтчета;
	КонецЕсли;

	// Если в контейнере более 1 однотипного отчета, полностью одинаковых, то предоставим выбор пользователю.
	ВспомогательнаяТабл = Результат.Скопировать();
	ВспомогательнаяТабл.Колонки.Удалить("ДанныеОтчета");
	ВыбранныйОтчет = ВспомогательнаяТабл.ВыбратьСтроку("Выбор необходимого отчета");
	Если ВыбранныйОтчет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Инд = ВспомогательнаяТабл.Индекс(ВыбранныйОтчет);
	Возврат Результат[Инд];

КонецФункции // ПолучитьДанныеРегламентированнойОтчетностиЭтогоОтчета

// ВернутьСтруктуруТочногоОтбораДанныхИзКонтейнераXML
//
Функция ВернутьСтруктуруТочногоОтбораДанныхИзКонтейнераXML(Форма) Экспорт

	Результат = Новый Структура("Периодичность, ЕдИзм", "0", "383");
	Результат.Вставить("КНД", Форма.мКодОтчета);
	Результат.Вставить("ИНН", Форма.Организация.ИНН);
	Результат.Вставить("КПП", Форма.Организация.КПП);
	Результат.Вставить("Период", Формат(Форма.мДатаНачалаПериодаОтчета, "ДФ=дд.ММ.гггг") + "," + Формат(Форма.мДатаКонцаПериодаОтчета, "ДФ=дд.ММ.гггг"));

	ИдКонф = ИдКонфигурации();
	Если Форма.мПериодичность = Перечисления.Периодичность.Месяц Тогда
		Результат.Периодичность = "1";
	ИначеЕсли Форма.мПериодичность = Перечисления.Периодичность.Квартал Тогда
		Результат.Периодичность = "2";
	// в некоторых конфигурациях Полугодие отсутствует
	ИначеЕсли Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти("Полугодие") <> Неопределено И Форма.мПериодичность = Перечисления.Периодичность.Полугодие Тогда
		Результат.Периодичность = "3";
	ИначеЕсли Форма.мПериодичность = Перечисления.Периодичность.Год Тогда
		Результат.Периодичность = "4";
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВернутьСтруктуруТочногоОтбораДанныхИзКонтейнераXML

// СформироватьАдрес9зпт
// Функция предназначена для формирования адреса из структуры.
// Параметры:
//  КодРегионаКакЧисло - булево, если Истина, то вместо региона будет его код
//                 если Ложь, то вместо кода будет его текст из структуры.
//  СтруктураДанных - структура, которая получена из формы ввода российского адреса.
//
// Возвращаемое значение:
// Текст, представление адреса для выгрузки в формате 9 зпт.
//
Функция СформироватьАдрес9зпт(КодРегионаКакЧисло, СтруктураДанных) Экспорт

	Возврат СтруктураДанных.КодСтраны + "," + 
	        СтруктураДанных.Индекс + "," +
	        ?(КодРегионаКакЧисло, СтруктураДанных.Регион, СтруктураДанных.НазваниеРегиона) + "," +
	        СтруктураДанных.Район + "," +
	        СтруктураДанных.Город + "," +
	        СтруктураДанных.НаселенныйПункт + "," +
	        СтруктураДанных.Улица + "," +
	        СтруктураДанных.Дом + "," +
	        СтруктураДанных.Корпус + "," +
	        СтруктураДанных.Квартира;

КонецФункции // СформироватьАдрес9зпт

// Процедура разбирает адрес в формате "9 запятых" на составляющие.
Функция ЗаменитьТекстРегионаНаКодРегиона(Знач АдресВФормате9зпт) Экспорт

	Параметры = Новый Массив;

	ПредыдущаяЗапятая = 0;
	Для Сч = 1 По СтрДлина(АдресВФормате9зпт) Цикл
		ТекСимв = Сред(АдресВФормате9зпт, Сч, 1);
		Если ТекСимв = "," Тогда
			Параметры.Добавить(Сред(АдресВФормате9зпт, ПредыдущаяЗапятая + 1, Сч - (ПредыдущаяЗапятая + 1)));
			ПредыдущаяЗапятая = Сч;
		КонецЕсли;
	КонецЦикла;

	Если ПредыдущаяЗапятая <> СтрДлина(АдресВФормате9зпт) Тогда
		Параметры.Добавить(Сред(АдресВФормате9зпт, ПредыдущаяЗапятая + 1, СтрДлина(АдресВФормате9зпт) - ПредыдущаяЗапятая));
	КонецЕсли;
	
	Для Сч = Параметры.Количество() + 1 По 10 Цикл
		Параметры.Добавить("");
	КонецЦикла;

	Регион = Параметры[2];

	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Регион) Тогда
		Регион = Формат(КодРегионаПоНазванию(Регион), "ЧЦ=2; ЧН=; ЧВН=");
	КонецЕсли;

	Возврат Параметры[0] + "," + Параметры[1] + "," + Регион		+ "," + Параметры[3] + "," +
	        Параметры[4] + "," + Параметры[5] + "," + Параметры[6]	+ "," + Параметры[7] + "," +
	        Параметры[8] + "," + Параметры[9];

КонецФункции // ЗаменитьТекстРегионаНаКодРегиона

// Процедура возвращает название региона по его коду.
Функция ПолучитьНазваниеРегионаПоКоду(КодРег) Экспорт

	Если ПустоеЗначение(КодРег) Тогда
		Возврат "";
	КонецЕсли;

	Попытка
		КодРегЧисло = Число(КодРег);
	Исключение
		Возврат "";
	КонецПопытки;

	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АдресныйКлассификатор.КодРегионаВКоде,
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Код
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |
	               |ГДЕ
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	               |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";

	Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);

	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		Возврат УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(Выборка.Код);
		
	Иначе

		Возврат "";

	КонецЕсли;

КонецФункции // ПолучитьНазваниеРегионаПоКоду

// ПроверитьКонтрольныеСоотношенияВОтчете
//
//  Форма             - Ссылка на форму отчета
//  СохраненныйДок    - объект документа рег. отчетность
//  ВызовИзЦУО        - признак вызова процедуры проверки из ЦУО - Истина, Ложь из декларации
//  ВыводитьСообщение - в случае запуска процедуры из-под отчета, если ошибок не обнаружено, то этот флаг позволяет задавать вопрос
//                 и предложение о просмотре формы контрольных соотношений.
//
Процедура ПроверитьКонтрольныеСоотношенияВОтчете(Форма, СохраненныйДок, ВызовИзЦУО, ВыводитьСообщение = Ложь) Экспорт

	// Проверим, открыта ли уже форма.
	Если НЕ ВызовИзЦУО Тогда
		Если Обработки.РегламентированнаяОтчетностьСоотношенияПоказателей.ПолучитьФорму().Открыта() Тогда
			Обработки.РегламентированнаяОтчетностьСоотношенияПоказателей.ПолучитьФорму().Закрыть();
		КонецЕсли;

		Если Форма.Модифицированность и Вопрос("Перед проверкой отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет)<>КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		Если Форма.Модифицированность И (НЕ Форма.Сохранить()) Тогда
			Возврат;
		КонецЕсли;

		ОбработкаКС = ПолучитьОбработкуОшибокКонтрольныхСоотношений(Форма, СохраненныйДок);

		Если ОбработкаКС.мТаблицаОшибокКС.Количество() > 0 Тогда
			// Если есть ошибки - отобразим список.
			ОбработкаКС.ПолучитьФорму().Показать();
		Иначе

			Если ВыводитьСообщение Тогда
				Если Вопрос("В отчете не обнаружены ошибки по соотношениям показателей.
					| Вывести форму для просмотра соотношений?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда

					// Отобразим ошибки. Осуществим пересбор данных, отобразим все записи, при снятом флаге "Только ошибки".
					ОбработкаКС.ПолучитьФорму().Показать(Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	Иначе
		// Если вызывается при печати из ЦУО
		ОбработкаКС = ПолучитьОбработкуОшибокКонтрольныхСоотношений(Форма, СохраненныйДок);
		Если ОбработкаКС.мТаблицаОшибокКС.Количество() > 0 Тогда
			Сообщить("В отчете " + ПредставлениеДокументаРеглОтч(СохраненныйДОк.Ссылка) + Символы.ПС + 
			         "обнаружены ошибки при проверки соотношений показателей. Откройте отчет и проверьте его на наличие ошибок.", СтатусСообщения.ОченьВажное);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьКонтрольныеСоотношенияВОтчете

// ПолучитьОбработкуОшибокКонтрольныхСоотношений
//
Функция ПолучитьОбработкуОшибокКонтрольныхСоотношений(Форма, СохраненныйДок)
	// Создадим обработчик контрольных соотношений
	Обраб = Обработки.РегламентированнаяОтчетностьСоотношенияПоказателей.Создать();
	Обраб.СохраненныйДокумент = СохраненныйДок;
	Обраб.Форма = Форма;

	// Сформируем ошибки не выводя их на экран.
	Обраб.ПолучитьФорму().Сформировать(Ложь);
	Возврат Обраб;

КонецФункции // ПолучитьОбработкуОшибокКонтрольныхСоотношений

// ПолучитьСледующуюРабочуюДатуДляРегОтчетности
// Функция предназначена для определения рабочей даты, которая следует начиная с нализируемой даты.
// В случае, если анализируемая дата является рабочим днем, возвращаться будет анализируемая дата.
//
// Параметры:
//  АнализируемаяДата - Дата. Дата, начиная с которой необходимо производить анализ.
//  ВыводитьСообщения - режим вывода сообщение, по умолчанию всегда включено (Истина).
//
// Возвращаемое значение:
//  Дата. Следующая рабочая дата после анализируемой даты, если анализируемая дата является рабочим
//                 днем, тогда возвратится анализируемая дата. Если регламентированный календарь не
//                 поддерживается, возвратится Неопределено.
//
Функция ПолучитьСледующуюРабочуюДатуДляРегОтчетности(Знач АнализируемаяДата, ВыводитьСообщения = Истина) Экспорт
	Срез = СформироватьЗапросКалендарьРО(АнализируемаяДата);

	Если (Срез = Неопределено) Или (Срез.Пустой()) Тогда
		// В регистре нет сведений по этой дате. Календарь не заполнен.
		//Если ВыводитьСообщения Тогда
		//	Сообщить("Не заполнен производственный календарь.", СтатусСообщения.Внимание);
		//КонецЕсли;
		// Пытаемся анализировать праздники.
		СписокПраздников = ПолучитьСписокПраздниковРФ(Год(АнализируемаяДата));

		АнализироватьДату = Истина;
		Пока АнализироватьДату Цикл

			ДеньМесяцЗаписываемаяДата = "" + Формат(АнализируемаяДата, "ДФ = 'ММ'") + Формат(АнализируемаяДата, "ДФ = 'дд'");
			ПраздничныйДень = СписокПраздников.НайтиПоЗначению(ДеньМесяцЗаписываемаяДата);

			Если (ПраздничныйДень <> Неопределено) Или (ДеньНедели(АнализируемаяДата) > 5) Тогда
				АнализируемаяДата = АнализируемаяДата + 86400;
			Иначе
				АнализироватьДату = Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат АнализируемаяДата;

	Иначе
		СрезТаблица = Срез.Выгрузить();
		Если (СрезТаблица[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий)
		 Или (СрезТаблица[0].ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный) Тогда
			// Входящая дата является рабочем днем.
			Возврат АнализируемаяДата;
		Иначе
			АнализируемаяДата = АнализируемаяДата + 86400;
			Инд = 0;
			Пока (СформироватьЗапросКалендарьРО(АнализируемаяДата, Истина).Выгрузить().Количество() = 0) И (Инд < 20) Цикл
				АнализируемаяДата = АнализируемаяДата + 86400;
				Инд = Инд + 1;
			КонецЦикла;
			Возврат ?(Инд = 20, Неопределено, АнализируемаяДата);
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСледующуюРабочуюДатуДляРегОтчетности

// СформироватьЗапросКалендарьРО
//
// Параметры:
//  ДатаКалендаря - Дата, свойства которой необходимо узнать.
//  ТолькоРабочие  - запрос будет сформирован только с целью получения ТОЛЬКО рабочих дней ( в т.ч. и предпризничных)
//
// Возвращаемое значение:
//  Запрос.Выполнить()
//
Функция СформироватьЗапросКалендарьРО(Знач ДатаКалендаря, ТолькоРабочие = Ложь)

	Если Метаданные.РегистрыСведений.Найти("РегламентированныйПроизводственныйКалендарь") = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	СписокРабочихДней = Новый Массив;
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);

	Запрос.УстановитьПараметр("СписокРабочихДней", СписокРабочихДней);
	Запрос.УстановитьПараметр("ВходящаяДата", ДатаКалендаря);

	ТекстЗапроса =
	"	ВЫБРАТЬ * 
	|	ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь
	|	ГДЕ
	|	ДатаКалендаря = &ВходящаяДата";

	Если ТолькоРабочие Тогда
		ТекстЗапроса = ТекстЗапроса + "
	|	И ВидДня В (&СписокРабочихДней)";
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросКалендарьРО

// ПолучитьПоКодамСведенияОПредставителе
Функция ПолучитьПоКодамСведенияОПредставителе(Организация, КодНО, КПП = Неопределено) Экспорт
	
	ТипПодписанта = "1";
	флПредставительЮрЛицо = Истина;
	НаименованиеОрганизацииПредставителя = "";
	ФИОПредставителя = "";
	ПредставительСсылка = Неопределено;
	ДокументПредставителя = "";
	
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	               |	РегистрацияВИФНС.Представитель,
	               |	РегистрацияВИФНС.УполномоченноеЛицоПредставителя,
	               |	РегистрацияВИФНС.ДокументПредставителя
	               |ИЗ
	               |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	               |ГДЕ
	               |	РегистрацияВИФНС.Владелец = &Организация
				   |	И РегистрацияВИФНС.Код = &КодНО
				   |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления";
				   
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодНО", КодНО);
	
	Если КПП <> Неопределено Тогда
		ТекстЗапроса = ТекстЗапроса + " И РегистрацияВИФНС.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Представитель) Тогда
		ТипПодписанта = "2";
		ПредставительСсылка = Выборка.Представитель;
		ДокументПредставителя = Выборка.ДокументПредставителя;
		
		Если НЕ ПредставительЯвляетсяФизЛицом(Выборка.Представитель) Тогда
			флПредставительЮрЛицо = Истина;
			НаименованиеОрганизацииПредставителя = СокрЛП(ПредставительСсылка);
			ФИОПредставителя = СокрЛП(Выборка.УполномоченноеЛицоПредставителя);
		Иначе
			флПредставительЮрЛицо = Ложь;
			ФИОПредставителя = СокрЛП(ПредставительСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя", 
							 ТипПодписанта, флПредставительЮрЛицо, НаименованиеОрганизацииПредставителя, ФИОПредставителя, ПредставительСсылка, ДокументПредставителя);
							 
КонецФункции //ПолучитьПоКодамСведенияОПредставителе

// ВыбратьИУстановитьТерриториальныйОрганФНС
// Процедура позволяет организовать выбор из справочника РегистрацияВИФНС
// и установит КПП, наименование ИФНС в декларации.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  СтандартнаяОбработка - параметр из обработчика ввода
//  ИмяТитульногоЛиста - имя титульного листа
//
Процедура ВыбратьИУстановитьТерриториальныйОрганФНС(Форма, СтандартнаяОбработка, ИмяТитульногоЛиста) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Форма.Организация);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);			   
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.НаименованиеИФНС КАК Наименование
	               |ИЗ
	               |Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |СправочникИФНС.Владелец = &Владелец
				   |И СправочникИФНС.ПометкаУдаления = &ПометкаУдаления";
	
	ТаблИнспекций = Новый ТаблицаЗначений();
	ТаблИнспекций.Колонки.Добавить("КПП",,, 10);
	ТаблИнспекций.Колонки.Добавить("КодНО",,, 7);
	ТаблИнспекций.Колонки.Добавить("Наименование",,, 42);

	НовСтр = ТаблИнспекций.Добавить();
	НовСтр.КодНО = "";
	НовСтр.Наименование = "Пустое значение";
	НовСтр.КПП = "";

	СправочникИФНС = Запрос.Выполнить().Выгрузить();
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СправочникИФНС, ТаблИнспекций);

	мТитульный = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТитульногоЛиста];
	
	КодИМНС = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(Форма, ИмяТитульногоЛиста, "КодИМНС");
	КПП = РегламентированнаяОтчетность.роВернутьЗначениеПараметраСЛиста(Форма, ИмяТитульногоЛиста, "КПП1_"); 
	Отбор = Новый Структура("КодНО, КПП", КодИМНС, КПП);
	
	СтандартнаяОбработка = Ложь;
	
	Если ТаблИнспекций.Количество() > 1 Тогда

		//определение первоначального значеня
		Строки = ТаблИнспекций.НайтиСтроки(Отбор);
		
		Если Строки.Количество() > 0 Тогда
			Результат = ТаблИнспекций.ВыбратьСтроку("Выберите регистрацию в ИФНС", Строки[0]);
		Иначе
			Результат = ТаблИнспекций.ВыбратьСтроку("Выберите регистрацию в ИФНС");
		КонецЕсли;	

		Если Результат <> Неопределено Тогда

			Форма.Модифицированность = Истина;
			Если Результат.Получить(2) <> "Пустое значение" Тогда

				роПроставитьВКвадратыЗначения(Форма, ИмяТитульногоЛиста, "КодИМНС", 4, Результат.Получить(1));
				мТитульный.Области.ОргИМНС.Значение = Результат.Получить(2);
				// Если есть в декларации лист ФизЛиц, тогда считаем ФИО на листе, если оно пустое, то КПП на листе Ф.Л. не проставляем.
				ЛистФЛЕсть = роПолучитьСвойствоРаздела(Форма, "ФизЛица", "МногострочностьВРазделе") <> Неопределено;
				ЛистФЛ = "";
				Если ЛистФЛЕсть Тогда
					Попытка
						ФИОФЛ = Форма.ЭлементыФормы.ПолеТабличногоДокументаФизЛица.Области.ФизЛицФИО.Значение;
						Если ПустаяСтрока(ФИОФЛ) Тогда
							// Если на листе нет ФИО, значит лист не заполняем, пропускае простановку КПП.
							ЛистФЛ = "ФизЛица";
						КонецЕсли;
					Исключение
					КонецПопытки;
				КонецЕсли;

				роПроставитьНаВсехЛистах(Форма, Результат.Получить(0), "КПП", ЛистФЛ);

			Иначе
				роПроставитьВКвадратыЗначения(Форма, ИмяТитульногоЛиста, "КодИМНС", 4, "");
				мТитульный.Области.ОргИМНС.Значение = "";
				роПроставитьНаВсехЛистах(Форма, "         ", "КПП");

			КонецЕсли;
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		Сообщить("Код налогового органа необходимо задать в справочнике ""Организации"".", СтатусСообщения.Информация);
	Иначе
		Сообщить("Для выбора инспекции, необходимо завести соответствующую запись в справочнике ""Регистрация в ИФНС"".", СтатусСообщения.Информация);
	КонецЕсли;

КонецПроцедуры // ВыбратьИУстановитьТерриториальныйОрганФНС
// УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций
// Процедура устанавливает необходимые примечания в ячейках ТипОрг1 и ТипОрг2
// в алкогольных декларациях 2006кв3.
//
Процедура УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций(Форма) Экспорт
	// Сохраним текущий активный экземпляр листа.
	роСохранитьДанныеМногостраничногоРазделаВактивнойСтранице(Форма, "Титульный", Ложь);

	НомерАктивнойСтраницы = Форма.мСтруктураМногостраничныхРазделов.Титульный.Найти(Истина, "АктивнаяСтраница");
	Ном = Форма.мСтруктураМногостраничныхРазделов.Титульный.Индекс(НомерАктивнойСтраницы);

	мТитульный = Форма.ЭлементыФормы["ПолеТабличногоДокументаТитульный"];

	ТекстПрим = "";
	ПредставляетсяЗнач = Форма.Представляется;
	Если ПредставляетсяЗнач = 1 Тогда
		ТекстПрим = "с учетом обособленных подразделений";
	ИначеЕсли ПредставляетсяЗнач = 2 Тогда
		ТекстПрим = "без учета обособленных подразделений";
	ИначеЕсли ПредставляетсяЗнач = 3 Тогда
		ТекстПрим = "за подразделение из того же региона";
	ИначеЕсли ПредставляетсяЗнач = 4 Тогда
		ТекстПрим = "за подразделение из другого региона";
	КонецЕсли;

	Если Форма.мСтруктураМногостраничныхРазделов.Титульный[0].Данные.ТипОрг1 = "V" Тогда
		мТитульный.Области.ДопИнфо1.Значение = ТекстПрим;
		Форма.ЭлементыФормы.ПолеВыбораПредставляется.Доступность = Истина;
		Если СвойствоОпределено(Форма.ЭлементыФормы, "ПанельПредставляется") Тогда
			Форма.ЭлементыФормы.ПанельПредставляется.Свертка = РежимСверткиЭлементаУправления.Нет;
		КонецЕсли;

	ИначеЕсли (Форма.мСтруктураМногостраничныхРазделов.Титульный[0].Данные.ТипОрг2 = "V")
	      Или (Форма.мСтруктураМногостраничныхРазделов.Титульный[0].Данные.ТипОрг1 <> "V") Тогда

		// Если декларация открыта не организацией и не обособленным подразделением(или обособленным), то скроем флаг и очистим все примечания.
		мТитульный.Области.ДопИнфо1.Значение = "";

		Форма.ЭлементыФормы.ПолеВыбораПредставляется.Доступность = Ложь;
		Если СвойствоОпределено(Форма.ЭлементыФормы, "ПанельПредставляется") Тогда
			Форма.ЭлементыФормы.ПанельПредставляется.Свертка = РежимСверткиЭлементаУправления.Низ;
		КонецЕсли;

	КонецЕсли;

	Если Ном > 0 Тогда
		ТекстПризнак = мТитульный.Области.ДопИнфо1.Значение;
		Форма.мСтруктураМногостраничныхРазделов.Титульный[0].Данные.Вставить("ДопИнфо1", ТекстПризнак);
		мТитульный.Области.ДопИнфо1.Значение = "";
	КонецЕсли;

КонецПроцедуры // УстановитьПримечаниеНаТитульныхЛистахГруппыАлкогольныхДеклараций

// ПолучитьСтруктуруТаблицыРО
// Функция получает таблицу значений со структурой ТаблицаИсточник.
//
// Параметры:
//  ТаблицаИсточник - таблица значений, на основе которой нужно сделать новую таблицу
//
// Возвращаемое значение:
//  Пустая таблица значений, со структурой из таблицы источника.
//
Функция ПолучитьСтруктуруТаблицыРО(ТаблицаИсточник) Экспорт

	Результат = Новый ТаблицаЗначений;
	Для каждого Стр Из ТаблицаИсточник.Колонки Цикл
		Результат.Колонки.Добавить(Стр.Имя, Стр.ТипЗначения);
	КонецЦикла;
	Возврат Результат;

КонецФункции // ПолучитьСтруктуруТаблицыРО

// ПолучитьКварталРО
// Получает номер квартала
//
// Параметры:
// ЗаданнаяДата - дата или номер месяца.
//
// Возврат - номер квартала
//
Функция ПолучитьКварталРО(ЗаданнаяДата) Экспорт
	Если ТипЗнч(ЗаданнаяДата) = Тип("Дата") Тогда
		Возврат Месяц(КонецКвартала(ЗаданнаяДата)) / 3;
	ИначеЕсли ТипЗнч(ЗаданнаяДата) = Тип("Число") Тогда
		Возврат Цел((ЗаданнаяДата - 1) / 3) + 1;
	КонецЕсли;
КонецФункции // ПолучитьКварталРО

// ПолучитьНазваниеРегОтчетаПоДатамДействия
//
Функция ПолучитьНазваниеРегОтчетаПоДатамДействия(Форма) Экспорт

	ИтоговоеКоличество = 0;

	Для Каждого ЭлФорма Из Форма.мТаблицаФормОтчета Цикл

		ДатаНачалаДействияФормы = ЭлФорма.ДатаНачалоДействия;
		ДатаКонцаДействияФормы  = КонецДня(?(ЭлФорма.ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")), '20291231', ЭлФорма.ДатаКонецДействия));

		Если Форма.мДатаКонцаПериодаОтчета <= ДатаКонцаДействияФормы
		   И Форма.мДатаКонцаПериодаОтчета >= ДатаНачалаДействияФормы Тогда

			// В случае, если две формы действуют в один период, то название должно быть одинаковое и берется первое из таблицы настроек.
			Возврат ЭлФорма.НаименованиеОтчета;

		КонецЕсли;

	КонецЦикла;

	Возврат Форма.Представление();

КонецФункции // ПолучитьНазваниеРегОтчетаПоДатамДействия

// ПолучитьТаблицуМногостраничногоРаздела
// флМногострочность - Булево, для многостраничных разделов, являющихся многострочными = Истина
// Возвращаемое значение:
//  ТаблицаЗначений, эталонная таблица многостраничного раздела, с одним экземпляром и активной страницей.
//
Функция ПолучитьТаблицуМногостраничногоРаздела(флМногострочность=Ложь) Экспорт
	ОписаниеТиповСтрока254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСтраницыРаздела            = Новый ТаблицаЗначений;
	ТаблицаСтраницыРаздела.Колонки.Добавить("Представление",    ОписаниеТиповСтрока254, "Наименование");
	ТаблицаСтраницыРаздела.Колонки.Добавить("АктивнаяСтраница", мОписаниеТиповБулево);
	ТаблицаСтраницыРаздела.Колонки.Добавить("Данные");
	Если флМногострочность Тогда
		ТаблицаСтраницыРаздела.Колонки.Добавить("ДанныеДопСтрок");	
	КонецЕсли;
	ТаблицаСтраницыРаздела.Колонки.Добавить("АвтоматическоеПредставление", мОписаниеТиповБулево);

	СтрПерваяСтраница = ТаблицаСтраницыРаздела.Добавить();
	СтрПерваяСтраница.Представление      = "Новая страница";
	СтрПерваяСтраница.АктивнаяСтраница   = Истина;
	СтрПерваяСтраница.АвтоматическоеПредставление = Истина;
	Возврат ТаблицаСтраницыРаздела;

КонецФункции // ПолучитьТаблицуМногостраничногоРаздела

// ВвестиЗначениеПоказателяРеглОтчета
//
// Параметры:
//  Форма
//  Раздел
//  ИмяЯчейкиВывода - имя ячейки, куда необходимо выводить результат
//  ПервоначальноеЗначение - первоначальное значение выбора
//  РазмерностьЦ - размерность целой части, если строка, то размерность для строки кол-во символов
//  РазмерностьД - размерность дробной части, если строка - то не имеет значения
//  ЭтоСумма - Булево, определяет, что работать со значением следует как с суммой (округлять и т.д.)
//
//  ТекстВвода
//  ТекстВыбора
//
//  ТаблицаВыбора - таблица значений, список для выбора. Если Неопределено, значит выбор не обрабатывается.
//  СтрокаВводаИзТаблицы - Строка. Если "" (пусто), тогда стандартный текст, если Неопределено, тогда не позволять, иначе - текст.
//  КолонкаПоиска - По умолчанию "Код". Строка имя колонки для поиска в таблице значений (список возможных значений).
//  КолВоКвадратиков - кол-во предусмотренных квадратиков на форме, для показателя
//  СтруктураТребованийРучногоВвода - структура с ключами: СтрокаТолькоИзЧисел, КонтролируемаяДлинаСтроки, проверка ручного ввода.
//  НольКакНоль    - в случае, если сумма равна 0, то вывод именно 0 при Истине, Иначе, вывод пустого значения.
//
// Возвращаемое значение:
//  Структура, ключи:
//      ЗначениеВведено - булево, введено Истина, отказ Ложь
//      ЗначениеВведеноЧерезВыбор - Истина, если осуществлен выбор, Ложь если введено руками
//      Значение - результат ввода
//
Функция ВвестиЗначениеПоказателяРеглОтчета(Форма, Знач Раздел, Знач ИмяЯчейкиВывода, Знач ПервоначальноеЗначение, Знач РазмерностьЦ, Знач РазмерностьД, Знач ЭтоСумма, Знач ТекстВвода, Знач ТекстВыбора, ТаблицаВыбора, Знач СтрокаВводаИзТаблицы, СтандартнаяОбработка, Знач КолвоКвадратиков = Неопределено, КолонкаПоиска = "Код", СтруктураТребованийРучногоВвода = Неопределено, НольКакНоль = Ложь) Экспорт

	Перем НачальноеЗнач;
	СтандартнаяОбработка = Ложь;
	Результат = Новый Структура();
	Результат.Вставить("ЗначениеВведено", Ложь);
	Результат.Вставить("ЗначениеВведеноЧерезВыбор", Неопределено);
	Результат.Вставить("Значение", Неопределено);
	НачальноеЗнач = ПервоначальноеЗначение;

	РучнойВвод = Ложь;
	Значение = Неопределено; // Вводимое значение.

	Если (НЕ Форма.мАвтоВыборКодов) И (ТаблицаВыбора <> Неопределено) Тогда
	// Если ТаблицаВыбора <> Неопределено Тогда

		НайденнаяСтрока = ТаблицаВыбора.Найти(ПервоначальноеЗначение, КолонкаПоиска);

		// Обеспечим ввод из таблицы значений.
		Если СтрокаВводаИзТаблицы <> Неопределено Тогда
			НовСтр = ТаблицаВыбора.Добавить();
			// НовСтр.Код = ?(ПустаяСтрока(ПервоначальноеЗначение), "", ПервоначальноеЗначение);
			НовСтр.Код = "";
			НовСтр.Название = СтрокаВводаИзТаблицы;
			ТаблицаВыбора.Сдвинуть(ТаблицаВыбора.Количество() - 1, (-1) * (ТаблицаВыбора.Количество() - 2));
		КонецЕсли;

		Если НайденнаяСтрока = Неопределено Тогда
			Выб = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора);
		Иначе
			Выб = ТаблицаВыбора.ВыбратьСтроку(ТекстВыбора, НайденнаяСтрока);
		КонецЕсли;

		Если Выб = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;

		Если (ТаблицаВыбора.Индекс(Выб) = 1) И (СтрокаВводаИзТаблицы <> Неопределено) Тогда
			РучнойВвод = Истина;
		Иначе
			// Получим значение по колонке поиска.
			Значение = Выб.Получить(ТаблицаВыбора.Колонки.Индекс(ТаблицаВыбора.Колонки.Найти(КолонкаПоиска)));
			Результат.ЗначениеВведеноЧерезВыбор = Истина;
		КонецЕсли;

	Иначе
		РучнойВвод = Истина;
	КонецЕсли;

	Если РучнойВвод Тогда
		Если ТипЗнч(ПервоначальноеЗначение) = Тип("Строка") Тогда
			Вводить = Истина;

			МеханизмВводаИНН = Ложь;
			МеханизмВводаКПП = Ложь;
			Если (Найти(ТекстВвода, " ИНН") > 0) Тогда
				// Возводим признак работы механизма ввода ИНН.
				МеханизмВводаИНН = Истина;
				Если (СтрДлина(ПервоначальноеЗначение) = КолВоКвадратиков) И (Сред(ПервоначальноеЗначение, 1, 2) = "00") Тогда
					// Удалим лидирующие нули.
					ПервоначальноеЗначение = Сред(ПервоначальноеЗначение, 3);
				КонецЕсли;
			ИначеЕсли (Найти(ТекстВвода, " КПП") > 0) Тогда
				МеханизмВводаКПП = Истина;
			КонецЕсли;
			Пока Вводить Цикл

				Если НЕ ВвестиСтроку(ПервоначальноеЗначение, ТекстВвода, РазмерностьЦ) Тогда
					Возврат Результат;
				КонецЕсли;

				Если Найти(ТекстВвода, "ОКАТО") > 0 Тогда
					ПроверкаВвода = Истина;
					КритичнаяДлина = РазмерностьЦ;
					ТекстКонтроля = "Код ОКАТО должен состоять из 11 цифр.";
				ИначеЕсли (Найти(ТекстВвода, " КБК") > 0) Тогда
					ПроверкаВвода = Истина;
					КритичнаяДлина = РазмерностьЦ;
					ТекстКонтроля = "КБК должен состоять из 20-ти цифр.";
				ИначеЕсли МеханизмВводаИНН Тогда
					ПроверкаВвода = Ложь;

					Если (СтрДлина(ПервоначальноеЗначение) = КолВоКвадратиков) И (Сред(ПервоначальноеЗначение, 1, 2) = "00") Тогда
						ПервоначальноеЗначение = Сред(ПервоначальноеЗначение, 3);
					КонецЕсли;

					// Первое условие, когда в переменной РазмерностьД задано 0, это означает, что вводится ИНН может как 12-ти, так и 10-ти значный.
					// Применяется в декларации по НДС.
					// В случае, если РазмерностьД указано одно из значений 10 или 12, то требуется вводить однозначно или 10-ти или 12-ти значный ИНН.
					Если (((ИННСоответствуетТребованиямБезТипа(ПервоначальноеЗначение)) Или (ПустаяСтрока(ПервоначальноеЗначение))) И РазмерностьД = 0)
					Или (((РазмерностьД = 10) И (ИННСоответствуетТребованиям(ПервоначальноеЗначение, Ложь))) Или ПустаяСтрока(ПервоначальноеЗначение))
					Или (((РазмерностьД = 12) И (ИННСоответствуетТребованиям(ПервоначальноеЗначение, Истина))) Или ПустаяСтрока(ПервоначальноеЗначение)) Тогда
						Вводить = Ложь;

						Если ПустаяСтрока(ПервоначальноеЗначение) Тогда
							СимволЗаполнения = " ";
						Иначе
							СимволЗаполнения = "0";
						КонецЕсли;

						Если КолВоКвадратиков <> Неопределено Тогда
						// Добавим симовлы 0, для заполнения ячеек с левой стороны.
							ПервоначальноеЗначение = ДополнитьСтроку(ПервоначальноеЗначение, КолВоКвадратиков, СимволЗаполнения);
						КонецЕсли;
					Иначе
						Сообщить("Указанный ИНН " + ПервоначальноеЗначение + " - не соответствует требованиям.", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
				ИначеЕсли МеханизмВводаКПП Тогда
					ПроверкаВвода = Ложь;
					Если (КППСоответствуетТребованиям(ПервоначальноеЗначение)) Или (ПустаяСтрока(ПервоначальноеЗначение))Тогда
						Вводить = Ложь;
					Иначе
						Сообщить("Указанный КПП " + ПервоначальноеЗначение + " - не соответствует требованиям.", СтатусСообщения.Важное);
						Продолжить;
					КонецЕсли;
				Иначе
					ПроверкаВвода = Ложь;
				КонецЕсли;

				Если ПроверкаВвода Тогда
					Если (ПервоначальноеЗначение = "") Или (ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) И (СтрДлина(ПервоначальноеЗначение) = КритичнаяДлина) Тогда
						Вводить = Ложь;
					Иначе
						Сообщить(ТекстКонтроля, СтатусСообщения.Важное);
					КонецЕсли;
				Иначе
					Вводить = Ложь;
					Если СтруктураТребованийРучногоВвода <> Неопределено Тогда
						// Задан режим проверки ручного ввода.
						Если (СтруктураТребованийРучногоВвода.СтрокаТолькоИзЧисел) И (НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПервоначальноеЗначение)) Тогда
							Сообщить("Введенное значение должно состоять только из цифр.", СтатусСообщения.Важное);
							Вводить = Истина;
						ИначеЕсли (СтруктураТребованийРучногоВвода.Свойство("КонтролируемаяДлинаСтроки")) И 
						          (СтруктураТребованийРучногоВвода.КонтролируемаяДлинаСтроки <> СтрДлина(ПервоначальноеЗначение)) И
						          (НЕ ПустаяСтрока(ПервоначальноеЗначение)) Тогда
							Сообщить("Введенное значение должно состоять из " + Строка(СтруктураТребованийРучногоВвода.КонтролируемаяДлинаСтроки) + " символов.", СтатусСообщения.Важное);
							Вводить = Истина;

						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли ТипЗнч(ПервоначальноеЗначение) = Тип("Число") Тогда
			Вводить = Истина;
			Пока Вводить Цикл

				Если НЕ ВвестиЧисло(ПервоначальноеЗначение, ТекстВвода, РазмерностьЦ, РазмерностьД) Тогда
					Возврат Результат;
				КонецЕсли;

				ПервоначальноеЗначениеСтр = Формат(ПервоначальноеЗначение, "ЧГ=0");
				Если СтрДлина(ПервоначальноеЗначениеСтр) > КолВоКвадратиков Тогда
					Сообщить("Введенное значение нельзя отобразить в отчете.", СтатусСообщения.Важное);
				Иначе
					Вводить = Ложь;
				КонецЕсли;

			КонецЦикла;

		ИначеЕсли ТипЗнч(ПервоначальноеЗначение) = Тип("Дата") Тогда
			Если НЕ ВвестиДату(ПервоначальноеЗначение, ТекстВвода, ЧастиДаты.Дата) Тогда
				Возврат Результат;
			КонецЕсли;
			ПервоначальноеЗначение = Формат(ПервоначальноеЗначение, "ДФ='ддММгггг'");
		КонецЕсли;

		Значение = ПервоначальноеЗначение;
		Результат.Вставить("ЗначениеВведеноЧерезВыбор", Ложь);
	КонецЕсли;

	Результат.Вставить("ЗначениеВведено", Истина);

	Если НачальноеЗнач <> Значение Тогда
		Форма.Модифицированность = Истина;
	КонецЕсли;

	// Запись на лист.
	Результат.Значение = Значение;

	Если МеханизмВводаИНН = Истина Тогда
		// Удалим лидирующие нули, если есть.
		Если (СтрДлина(Значение) = КолВоКвадратиков) И (Сред(Значение, 1, 2) = "00") Тогда
			Результат.Значение = Сред(Значение, 3);
		КонецЕсли;
	КонецЕсли;

	Если КолВоКвадратиков = Неопределено Тогда
		Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Раздел].Области[ИмяЯчейкиВывода].Значение = Значение;
	Иначе
		роПроставитьВКвадратыЗначения(Форма, Раздел, ИмяЯчейкиВывода, ?(ЭтоСумма, КолВоКвадратиков, РазмерностьЦ), Значение, ЭтоСумма, НольКакНоль);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВвестиЗначениеПоказателяРеглОтчета

// Процедура управляет цветом фона автозаполняемых ячеек при:
//  а) автозаполнении;
//  б) ручном выборе другого варианта заполнения;
//  в) добавлении/удалении и листании дополнительных страниц.
//
// Цвет фона устанавливается в зависимости от варианта заполнения ячейки.
//
// Параметры:
//  ИмяЯчейки                - строка, имя ячейки, для которой устанавливаем цвет фона;
//  ВариантЗаполнения        - число,  вариант заполнения ячейки;
//  ИмяТекущейСтраницыПанели - строка, имя страницы основной панели, на которой для всех автозаполняемых
//                             ячеек табличного документа следует установить цвет фона.
//
Процедура роУстановитьЦветФонаЯчейки(Форма, ИмяЯчейки = Неопределено, ВариантЗаполнения = Неопределено, ИмяТекущейСтраницыПанели = "") Экспорт
	Перем ЦветФона;
	Перем Комментарий;

	// Не нужно разукрашивать табличные поля, если открывается без открытия формы (например печать или просмотр)
	Если Форма.мБезОткрытияФормы Или Форма.мРежимПечати Тогда
		Возврат;
	КонецЕсли;

	Если Не ИмяЯчейки = Неопределено Тогда
		// устанавливаем цвет фона конкретной ячейки
		ИмяСтраницыПанели = роОпределитьСтраницуПанелиПоКодуПоказателя(Форма, ИмяЯчейки);
		Если ИмяСтраницыПанели = Неопределено Тогда
			Возврат;
		КонецЕсли;

		ИмяПоляТаблДокумента = "ПолеТабличногоДокумента" + ИмяСтраницыПанели;

		Ключ = "_" + ВариантЗаполнения;
		Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

		// КодПоказателяПоСтруктуре
		ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяЯчейки);

		Если ВариантЗаполнения = 4 Тогда

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				роСвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"УстановитьЗащиту");
			Иначе
				Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Истина;
			КонецЕсли;

		Иначе

			Если ЗначениеВКвадратах Тогда
				// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
				роСвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"СнятьЗащиту");
			Иначе
				Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].Защита = Ложь;
			КонецЕсли;
			
		КонецЕсли;

		// установим цвет ячейки
		Если ЗначениеВКвадратах Тогда
			роСвойстваГрупповыхЗначений(Форма, ИмяЯчейки,"ПроставитьЦветРаскраски", ЦветФона);
		Иначе
			Форма.ЭлементыФормы[ИмяПоляТаблДокумента].Области[ИмяЯчейки].ЦветФона = ЦветФона;
		КонецЕсли;

	Иначе
		// устанавливаем цвет фона всех автозаполняемых ячеек активной страницы

		ТаблицаВариантыЗаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, ИмяТекущейСтраницыПанели);
		Если ТаблицаВариантыЗаполнения = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Для Каждого Строка Из ТаблицаВариантыЗаполнения Цикл
			ИмяПоказателя            =  Строка.КодПоказателя;
			ВариантЗаполнения        =  Строка.ВариантЗаполнения;
			Комментарий              =  Строка.Комментарий;
			КодПоказателяПоСтруктуре =  Строка.КодПоказателяПоСтруктуре;

			КолвоСтрокВМногострочнойЧасти = роПоказательВходитВМногострочнуюЧасть(Форма, ИмяПоказателя);

			Если КолвоСтрокВМногострочнойЧасти > 0 Тогда
				Многострочность = Истина;
				БазоваяЧасть = ИмяПоказателя;
				ОписанияБлоков = роПолучитьСвойствоРаздела(Форма, ИмяТекущейСтраницыПанели, "МногострочностьВРазделе");

				Если ТипЗнч(ОписанияБлоков) = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ТипЗнч(ОписанияБлоков) = Тип("ТаблицаЗначений") Тогда
					ИмяГруппы = Сред(ИмяПоказателя, 1, 11);
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

			Иначе
				Многострочность = Ложь;
				ВБлокеВсеПоказателиЗаполняются = Истина;
				КолвоСтрокВМногострочнойЧасти = 1;
			КонецЕсли;

			Для Инд = 1 по КолвоСтрокВМногострочнойЧасти Цикл

				Если Многострочность Тогда
					ИмяПоказателя = БазоваяЧасть + "_" + Формат(Инд, "ЧГ=0");
					// Декларация по НДС. В многострочном блоке встречаются строки, которые не должны быть закрашены в стандартный зеленый цвет.
					
				КонецЕсли;

				Если НЕ ВБлокеВсеПоказателиЗаполняются Тогда
					Если Форма.ЭтотПоказательНеЗаполняется(ИмяПоказателя) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				ТекОбластьЯчеек = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя];
				Если (Не ПустаяСтрока(Комментарий)) ИЛИ (Не ПустаяСтрока(ТекОбластьЯчеек.Примечание.Текст)) Тогда
					ТекОбластьЯчеек.Примечание.Текст = Комментарий;
				КонецЕсли;

				Ключ = "_" + ВариантЗаполнения;
				Форма.мСтруктураЦветовРаскраски.Свойство(Ключ, ЦветФона);

				//ЗначениеВКвадратах = роОбластьЯвляетсяЯчейкойСоставногоПоля(Форма, ИмяПоказателя);
				ЗначениеВКвадратах = ?(ПустаяСтрока(КодПоказателяПоСтруктуре), Ложь, Истина);

				Если ВариантЗаполнения = 4 Тогда
					//ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						роСвойстваГрупповыхЗначений(Форма, ИмяПоказателя, "УстановитьЗащиту");
					Иначе
						Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Истина;
					КонецЕсли;

				Иначе

					Если ЗначениеВКвадратах Тогда
						// если ЗНАЧЕНИЕ КВАДРАТИЧНОЕ
						роСвойстваГрупповыхЗначений(Форма, ИмяПоказателя,"СнятьЗащиту");
					Иначе
						Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].Защита = Ложь;
					КонецЕсли;
				КонецЕсли;

				Если ЗначениеВКвадратах Тогда
					роСвойстваГрупповыхЗначений(Форма, ИмяПоказателя,"ПроставитьЦветРаскраски", ЦветФона);
				Иначе
					Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяТекущейСтраницыПанели].Области[ИмяПоказателя].ЦветФона = ЦветФона;
				КонецЕсли;
			КонецЦикла;

		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // роУстановитьЦветФонаЯчейки()

// Процедура управляет представлением суммовых (денежных) показателей
// табличного документа при изменении размерности.
//
Процедура роУстановитьФорматВывода(Форма) Экспорт
	Перем СтруктураГруппы;
	Перем РазмерностьПрописьюТекст;

	ЕдиницаИзмерения = Форма.ЕдиницаИзмерения;
	ТочностьЕдиницыИзмерения = Форма.ТочностьЕдиницыИзмерения;
	Если ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		Форма.мДелитель = 1;
		РазмерностьПрописьюТекст = "в рублях";
		Форма.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 0";

	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		Форма.мДелитель = 1000;
		РазмерностьПрописьюТекст = "в тыс. рублей";
		Форма.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 3";
		
	ИначеЕсли ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		Форма.мДелитель = 1000000;
		РазмерностьПрописьюТекст = "в млн. рублей";
		Форма.мСтрокаФормата = "ЧЦ = 17; ЧДЦ = " + ТочностьЕдиницыИзмерения + "; ЧРД=,; ЧН=-; ЧС = 6";
		
	КонецЕсли;

	ДанныеВСтруктуреПоРазделуОтражены = Ложь;

	ИмяПоляТаблДокументаСтароеЗначение = "";
	Для Каждого СтрПоказатели Из Форма.мТаблицаСоставПоказателей Цикл

		ИмяПоляТаблДокумента = СокрП(СтрПоказатели.ИмяПоляТаблДокумента);
		КодПоказателя        = СокрП(СтрПоказатели.КодПоказателяПоСоставу);
		ПризнМногострочность = СокрП(СтрПоказатели.ПризнМногострочности);
		КодПоказателяПоСтруктуре = СокрП(СтрПоказатели.КодПоказателяПоСтруктуре);
		КодПоказателяПоФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		Если ИмяПоляТаблДокументаСтароеЗначение <> ИмяПоляТаблДокумента Тогда
			// Обновим признак показа переменных из структуры.
			ДанныеВСтруктуреПоРазделуОтражены = Ложь;
		КонецЕсли;

		Если КодПоказателя = "===" Тогда
			Прервать;
		КонецЕсли;

		Если (Лев(КодПоказателя, 2) = "//") ИЛИ (КодПоказателя = "###") Тогда
			Продолжить;
		КонецЕсли;

		КодПоказателяВФорме = СокрП(СтрПоказатели.КодПоказателяПоФорме);

		ИмяПоказателя = КодПоказателя;
		Если Не ПустаяСтрока(КодПоказателяВФорме) Тогда
			ИмяПоказателя = КодПоказателяВФорме;
		КонецЕсли;

		ТипДанныхПоказателя = СокрП(СтрПоказатели.ТипДанныхПоказателя);

		Если (ТипДанныхПоказателя = "Е") И (НЕ ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			Если НЕ ДанныеВСтруктуреПоРазделуОтражены Тогда
				// Отобразим переменные структур.
				Форма.ЗаполнениеЗначенийВКвадратиках(СтрЗаменить(ИмяПоляТаблДокумента, "ПолеТабличногоДокумента", ""));

				// Возведем признак, что переменные отображены, для неотображения при проходе по следующей записи и показателя.
				ДанныеВСтруктуреПоРазделуОтражены = Истина;

			КонецЕсли;
		КонецЕсли;

		Если (ТипДанныхПоказателя = "Е") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

			ТекТабличноеПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

			Если ПризнМногострочность <> "/" Тогда
				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
				// Получим установленный в ячейки признак допустимого знака.
				ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;

				ЧислоЕЗнак = Форма.мОписаниеТиповЧислоЕ;
				Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
					// Создадим числовой тип на основе мОписаниеТиповЧислоЕ, с учетом знака отрицательности.
					Массив = Новый Массив;
					Массив.Добавить(Тип("Число"));
					КвалификаторЧисла = Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя);
					ЧислоЕЗнак = Новый ОписаниеТипов(Массив, КвалификаторЧисла);
				КонецЕсли;
				ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
				ФорматируемаяОбласть.Формат = Форма.мСтрокаФормата;
				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
			Иначе
				// определяем кол-во строк многострочного раздела
				// и применяем процедуру форматирования к данной графе
				// по всем строкам
				ИмяГруппы = Лев(ИмяПоказателя, 11);
				Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
				ОписанияБлоков = роПолучитьСвойствоРаздела(Форма, ИмяПоляТаблДокумента, "МногострочностьВРазделе");
				ОписанияБлоковТип = ТипЗнч(ОписанияБлоков);
				Если ОписанияБлоковТип = Тип("Число") Тогда
					ВБлокеВсеПоказателиЗаполняются = Истина;
				ИначеЕсли ОписанияБлоковТип = Тип("ТаблицаЗначений") Тогда
					ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
				КонецЕсли;

				Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
					Если НЕ ВБлокеВсеПоказателиЗаполняются Тогда
						Если Форма.ЭтотПоказательНеЗаполняется(ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")) Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;

					ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + Формат(НСтр, "ЧГ=0")];
					// Получим установленный в ячейки признак допустимого знака.
					ДопустимыйЗнакПоказателя = ФорматируемаяОбласть.ТипЗначения.КвалификаторыЧисла.ДопустимыйЗнак;

					ЧислоЕЗнак = Форма.мОписаниеТиповЧислоЕ;
					Если ДопустимыйЗнакПоказателя = ДопустимыйЗнак.Неотрицательный Тогда
						// Создадим числовой тип на основе мОписаниеТиповЧислоЕ, с учетом знака отрицательности.
						Массив = Новый Массив;
						Массив.Добавить(Тип("Число"));
						КвалификаторЧисла = Новый КвалификаторыЧисла(ЧислоЕЗнак.КвалификаторыЧисла.Разрядность,ЧислоЕЗнак.КвалификаторыЧисла.РазрядностьДробнойЧасти, ДопустимыйЗнакПоказателя);
						ЧислоЕЗнак = Новый ОписаниеТипов(Массив, КвалификаторЧисла);
					КонецЕсли;

					ФорматируемаяОбласть.ТипЗначения = ЧислоЕЗнак;
					ФорматируемаяОбласть.Формат = Форма.мСтрокаФормата;
					ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;

		// Блок проставляющий калькулятор для показателей имеющих тип "Ч".
		// Блок временно закоментирован, т.к. числовые показатели, помеченные признаком "Ч" не всегда нужно выводить
		// с функцией кнопкой калькулятора. Таким образом автоматическое добавление этой кнопки всем показателям может
		// навредить, необходимо для всех показателей кроме "Е" вручную проставлять по необходимости.

		//Попытка
		//	Если (ТипДанныхПоказателя = "Ч") И (ПустаяСтрока(КодПоказателяПоСтруктуре)) Тогда

		//		ТекТабличноеПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяПоляТаблДокумента];

		//		Если ПризнМногострочность <> "/" Тогда
		//			ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя];
		//			ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
		//		Иначе
		//			// определяем кол-во строк многострочного раздела
		//			// и применяем процедуру форматирования к данной графе
		//			// по всем строкам
		//			ИмяГруппы = Лев(ИмяПоказателя, 11);
		//			Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
		//			ОписанияБлоков = роПолучитьСвойствоРаздела(Форма, ИмяПоляТаблДокумента, "МногострочностьВРазделе");
		//			ОписанияБлоковТип = ТипЗнч(ОписанияБлоков);
		//			Если ОписанияБлоковТип = Тип("Число") Тогда
		//				ВБлокеВсеПоказателиЗаполняются = Истина;
		//			ИначеЕсли ОписанияБлоковТип = Тип("ТаблицаЗначений") Тогда
		//				ВБлокеВсеПоказателиЗаполняются = НЕ ОписанияБлоков.Найти(ИмяГруппы, "ИдГруппы").НезаполняемыеПоказателиЕсть;
		//			КонецЕсли;

		//			Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		//				НСтрСтр = Формат(НСтр, "ЧГ=0");
		//				Если НЕ ВБлокеВсеПоказателиЗаполняются Тогда
		//					Если Форма.ЭтотПоказательНеЗаполняется(ИмяПоказателя + "_" + НСтрСтр) Тогда
		//						Продолжить;
		//					КонецЕсли;
		//				КонецЕсли;

		//				ФорматируемаяОбласть = ТекТабличноеПоле.Области[ИмяПоказателя + "_" + НСтрСтр];
		//				ФорматируемаяОбласть.ЭлементУправления.КнопкаВыбора = Истина;
		//			КонецЦикла;
		//		КонецЕсли;
		//	КонецЕсли;
		//Исключение
		//КонецПопытки;

		ИмяПоляТаблДокументаСтароеЗначение = ИмяПоляТаблДокумента;
	КонецЦикла;

КонецПроцедуры // роУстановитьФорматВывода()

// Процедура контролирует корректность установленной точности указания
// суммовых (денежных) показателей при выборе единицы измерения.
//
Процедура ПроверитьТочность(Форма, НачалоСообщения = Неопределено) Экспорт
	
	Если Форма.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда

		Если Форма.ТочностьЕдиницыИзмерения > 2 Тогда
			Сообщить(?(ЗначениеЗаполнено(НачалоСообщения), НачалоСообщения, Форма.Заголовок) + ": при выводе сумм в рублях точность не может превышать 2 знака", СтатусСообщения.Внимание);
			Форма.ТочностьЕдиницыИзмерения = 2;
		КонецЕсли;

	ИначеЕсли Форма.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда

		Если Форма.ТочностьЕдиницыИзмерения > 3 Тогда
			Сообщить(?(ЗначениеЗаполнено(НачалоСообщения), НачалоСообщения, Форма.Заголовок) + ": при выводе сумм в тысячах рублей точность не может превышать 3 знака", СтатусСообщения.Внимание);
			Форма.ТочностьЕдиницыИзмерения = 3;
		КонецЕсли;

	ИначеЕсли Форма.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда

		Если Форма.ТочностьЕдиницыИзмерения > 6 Тогда
			Сообщить(?(ЗначениеЗаполнено(НачалоСообщения), НачалоСообщения, Форма.Заголовок) + ": при выводе сумм в миллионах рублей точность не может превышать 6 знаков", СтатусСообщения.Внимание);
			Форма.ТочностьЕдиницыИзмерения = 6;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ПроверитьТочность()

// Спрашиваем подтверждение пользователя на перезаполнение части полей с другой точностью
Процедура ВыполнитьИзменениеТочностиПоказателей(Форма, ТекстВопроса = Неопределено) Экспорт
	
	ПроверитьТочность(Форма);
	роУстановитьФорматВывода(Форма);
	
	// перезаполним поля "за месяц", "за квартал" и "за отчетный период" по данным ИБ, применяя  
	// новое округление к показателям, рассчитываемым нарастающим итогом
	Если Не Форма.ФлажокВнешДанные Тогда
		Если Не ЗначениеЗаполнено(ТекстВопроса) Тогда
			ТекстВопроса = "Для получения точных значений показателей, рассчитываемых нарастающим итогом за налоговый период, рекомендуется перезаполнить эти показатели по данным информационной базы.";
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + Символы.ПС + "Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.ЗаполнитьАвто(Ложь); 
		КонецЕсли;
	КонецЕсли;
	
	// Итоговые поля надо пересчитывать, потому что при расчете они округлются
	// в соответствии с установленной единицей изменения и точностью.
	Форма.Расчет();
	
	Форма.Модифицированность = Истина;
	
КонецПроцедуры // ВыполнитьИзменениеТочностиПоказателей()

// ПроставитьИННКППНаВсехЛистахРегОтчета
// Получает и проставляет ИНН и КПП на всех страницах, включая многостраничные разделы, а также листы, где ИНН и КПП указывается несколько раз.
//
// Параметры:
//  Форма          - ссылка на форму декларации
//  НачальноеЗаполнение - при первоначальном открытии декларации, без обновления страниц в структурах. По умолчанию Истина.
//                 в случае, если Ложь, тогда ИНН и КПП будут проставлены и в структуре многостраничных разделов всех экземпляров.
//
Процедура ПроставитьИННКППНаВсехЛистахРегОтчета(Форма, НачальноеЗаполнение = Истина, Знач ИННЮЛ = Неопределено, Знач КППЮЛ = Неопределено) Экспорт

	Результат = ПолучитьСведенияОбОрганизации(Форма.Организация, Форма.ДатаПодписи, "ИННЮЛ, КППЮЛ");
	Если ИННЮЛ = Неопределено Тогда
		РезультатИНН = Результат.ИННЮЛ;
	Иначе
		РезультатИНН = ИННЮЛ;
	КонецЕсли;

	Если КППЮЛ = Неопределено Тогда
		РезультатКПП = Результат.КППЮЛ;
	Иначе
		РезультатКПП = КППЮЛ;
	КонецЕсли;

	Если НЕ ПустоеЗначение(РезультатИНН) Тогда
		РезультатИНН = ДополнитьСтроку(РезультатИНН, 12, "0");
	Иначе
		РезультатИНН = ДополнитьСтроку(РезультатИНН, 12, " ");
	КонецЕсли;

	РезультатКПП = ДополнитьСтроку(РезультатКПП, 9, " ");

	Если НачальноеЗаполнение Тогда
		Для каждого Страница Из Форма.мСвойстваРазделовДекларации.Строки Цикл
			ИмяСтраницы = Страница.ИмяСтраницы;
			КолвоСтраниц = роКолвоЛистоВРазделе(Форма, ИмяСтраницы);
			Для Инд = 1 По КолвоСтраниц Цикл
				Стр = Строка(Инд) + "_";
				роПроставитьВКвадратыЗначения(Форма, ИмяСтраницы, "ИНН" + Стр, 12, РезультатИНН);
				роПроставитьВКвадратыЗначения(Форма, ИмяСтраницы, "КПП" + Стр, 9, РезультатКПП);
			КонецЦикла;
		КонецЦикла;
	Иначе
		роПроставитьНаВсехЛистах(Форма, РезультатИНН, "ИНН", "", ,,, Истина);
		роПроставитьНаВсехЛистах(Форма, РезультатКПП, "КПП", "", ,,, Истина);
	КонецЕсли;

КонецПроцедуры // ПроставитьИННКППНаВсехЛистахРегОтчета

// Создает новую строку многострочного раздела.
// Процедура вставляет строку в многострочный блок.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяГруппыБлока - имя группы, в том случае, если необходимо вставить строки в процедурах автозаполнения, без фокусировок.
//  СпециальноеДобавление - режим добавления строк по нестандартному алгоритму, когда в правой части распологаются данные.
//  ИмяКолонкиНомера - имя колонки, в которой необходимо проставлять номер при вставки строки.
//
Процедура роВставитьДополнительнуюСтроку(Форма, ИмяГруппыБлока = Неопределено, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем СтруктураГруппы;
	Перем МаксимальноеКоличествоСтрокГруппы;

	Если ИмяГруппыБлока = Неопределено Тогда
		// Сначала выполним проверку на активную страницу панели формы,
		// которая содержит многострочный раздел
		ИмяГруппы = Форма.ОпределитьИдМногострочногоРазделаПоАктивнойСтранице();
		Если ИмяГруппы = Неопределено Тогда
			Сообщить("Не выбран многострочный раздел, в который необходимо добавить строку.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	Иначе
		ИмяГруппы = ИмяГруппыБлока;
	КонецЕсли;

	// Исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, МаксимальноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// определяем последнюю строку многострочной группы
	КолСтрок = СтруктураГруппы.Количество();
	КолСтрокСтр = Формат(КолСтрок, "ЧГ=0");
	ИмяПервойЯчейкиПоследнейСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр;

	// область первой ячейки последней строки многострочного раздела
	ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиПоследнейСтроки];

	НастройкиМнгЧ = роПолучитьСвойствоРаздела(Форма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
	
	// номера строк исходной области
	НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
	НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки-1;
		
	НастройкиМнгЧ = роПолучитьСвойствоРаздела(Форма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
	ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

	СдвигСтрок = НомерНижнЯчейкиОбласти - НомерВерхЯчейкиОбласти + 1;

	// номера строк вставляемой области
	НомерВерхЯчейкиНовойОбласти = НомерВерхЯчейкиОбласти + СдвигСтрок;
	НомерНижнЯчейкиНовойОбласти = НомерНижнЯчейкиОбласти + СдвигСтрок;

	Если СпециальноеДобавление Тогда
		Форма.СпециальногоДобавленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
	Иначе
		// определяем вставляемую область
		ВставляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
		// добавляем в таблицу новую строку
		ТекТабличноеПоле.ВставитьОбласть( ВставляемаяОбласть,,ТипСмещенияТабличногоДокумента.ПоВертикали );
	КонецЕсли;

	КолСтрокСтр1 = Формат(КолСтрок + 1, "ЧГ=0");
	// переопределяем имена вставленной области
	Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл

		ИмяКолонки          = Колонка.Имя;
		ИмяОбластиЯчейки    = ИмяКолонки + "_" + КолСтрокСтр;
		ИмяНовОбластиЯчейки = ИмяКолонки + "_" + КолСтрокСтр1;

		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяОбластиЯчейки];
		ОбластьЯчейки.Имя = ИмяНовОбластиЯчейки;

		// определяем границы ячейки исходной области
		НомерВерхСтрокиЯчейки  = ОбластьЯчейки.Верх - СдвигСтрок;
		НомерНижнСтрокиЯчейки  = ОбластьЯчейки.Низ  - СдвигСтрок;
		НомерЛевоКолонкиЯчейки = ОбластьЯчейки.Лево;
		НомерПравКолонкиЯчейки = ОбластьЯчейки.Право;

		// Назначаем имя ячейки исходной области,
		// (т.к. в результате вставки новой области оно было очищено)
		ОбластьЯчейкиИсходнойОбласти = ТекТабличноеПоле.Область(НомерВерхСтрокиЯчейки, НомерЛевоКолонкиЯчейки, НомерНижнСтрокиЯчейки, НомерПравКолонкиЯчейки);
		ОбластьЯчейкиИсходнойОбласти.Имя = ИмяОбластиЯчейки;

		// очищаем значения ячеек вставленной области
		Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
			ОбластьЯчейки.Очистить();
		КонецЕсли;

		Если ИмяКолонкиНомера <> Неопределено Тогда
			Если ИмяКолонкиНомера = ИмяКолонки Тогда
				Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
					ОбластьЯчейки.Значение = КолСтрокСтр1;
				Иначе
					ОбластьЯчейки.Текст = КолСтрокСтр1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ИмяГруппыБлока = Неопределено Тогда

		// Назначим текущей областью таблицы первую редактируемую ячейку добавленной строки.
		// Определяем текущую область таблицы
		ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + КолСтрокСтр1;

		ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];
		// установим фокус на поле табличн. документа
		Форма.ТекущийЭлемент = ТекТабличноеПоле;
	КонецЕсли;

	// добавляем в структуру многострочной группы новую строку
	СтруктураГруппы.Добавить();
	Форма.Модифицированность = Истина;
КонецПроцедуры // роВставитьДополнительнуюСтроку()

// Удаляет строку многострочного раздела формы.
//
Процедура роУдалитьДополнительнуюСтроку(Форма, СпециальноеДобавление = Ложь, ИмяКолонкиНомера = Неопределено) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;
	Перем СтруктураГруппы;

	ТекущаяСтраница = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	ТекТабличноеПоле = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ТекущаяСтраница];

	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяГруппы      = роРазделТекущейОбласти(Форма, ТекущаяОбласть);

	Если ИмяГруппы = Неопределено Тогда
		Сообщить("Не выбрана удаляемая строка многострочного раздела.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Удалить выбранную строку?" + Символы.ПС
	      + "(Внимание! данная операция необратима)", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	// исходное количество строк группы
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);

	// Выполним также проверку вхождения текущей (выделенной) ячейки в многострочный раздел
	ТекущаяОбласть = ТекТабличноеПоле.ТекущаяОбласть;
	ИмяЯчейки      = ТекущаяОбласть.Имя;

	// номер строки многострочного раздела определим
	// по имени выделенной ячейки
	НомУдаляемойСтроки = Число( Сред( ИмяЯчейки, Найти( ИмяЯчейки, "_") + 1));
	НомерСтрокиТаблицы = НомУдаляемойСтроки - 1; // нумерация строк в таблице значений начинается с нуля

	Если СтруктураГруппы.Количество() > ИсходноеКоличествоСтрокГруппы Тогда
		// удаляется добавленная строка
		ИмяПервойЯчейкиУдаляемойСтроки = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомУдаляемойСтроки, "ЧГ=0");

		// область первой ячейки удаляемой строки многострочного раздела
		ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяПервойЯчейкиУдаляемойСтроки];

		НастройкиМнгЧ = роПолучитьСвойствоРаздела(Форма, ТекТабличноеПоле.Имя, "МногострочностьВРазделе").Найти(ИмяГруппы, "ИдГруппы");
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;
		
		НомерВерхЯчейкиОбласти = ОбластьЯчейки.Верх;
		НомерНижнЯчейкиОбласти = ОбластьЯчейки.Низ + ВысотаСтроки-1;
		
		МногострочностьВРазделе = роПолучитьСвойствоРаздела(Форма, ТекущаяСтраница, "МногострочностьВРазделе");
		МногострочностьВРазделеТип = ТипЗнч(МногострочностьВРазделе);
		Если МногострочностьВРазделеТип = Тип("Число") Тогда
			ИмяОбластиМнгЧ = "МногострочнаяЧасть";
		ИначеЕсли МногострочностьВРазделеТип = Тип("ТаблицаЗначений") Тогда
			ИмяОбластиМнгЧ = МногострочностьВРазделе.Найти(ИмяГруппы, "ИдГруппы").Область;
		КонецЕсли;
		// Найдем координаты области, для последующего восстановления.

		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ОбластьВерх = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Верх;
			ОбластьНиз = ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Низ;
		КонецЕсли;

		Если СпециальноеДобавление Тогда
			// Запустим единую процедуру удаляющая строку по специальному алгоритму
			// Используется в: ОчиститьТабличноеПоле(), ЗаполнитьРаздел2()
			Форма.СпециальногоУдаленияСтроки(ТекТабличноеПоле, ИмяГруппы, НомерВерхЯчейкиОбласти, НомерНижнЯчейкиОбласти);
		Иначе
			// Определим область удаляемой строки
			УдаляемаяОбласть = ТекТабличноеПоле.Область(НомерВерхЯчейкиОбласти, , НомерНижнЯчейкиОбласти, );
			// непосредственно удаляем область строки табличного документа
			ТекТабличноеПоле.УдалитьОбласть( УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали );
		КонецЕсли;
		// Восстановим область.
		Если ТекТабличноеПоле.Области.Найти(ИмяОбластиМнгЧ) <> Неопределено Тогда
			ТекТабличноеПоле.Области[ИмяОбластиМнгЧ].Имя = "";
			ТекТабличноеПоле.Область(ОбластьВерх, 0, ОбластьНиз, 0).Имя = ИмяОбластиМнгЧ;
		КонецЕсли;

		КолвоСдвигаемыхСтрок = СтруктураГруппы.Количество() - НомУдаляемойСтроки;

		// обновим имена ячеек сдвинутых строк
		Если КолвоСдвигаемыхСтрок > 0 Тогда

			Для НСтр = НомУдаляемойСтроки + 1 По СтруктураГруппы.Количество() Цикл

				ТекСтрока = СтруктураГруппы[НСтр-1];

				НСтрСтр = Формат(НСтр, "ЧГ=0");
				НСтрСтр1 = Формат(НСтр - 1, "ЧГ=0");
				Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
					КолонкаИмя = Колонка.Имя;
					ИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр;
					НовоеИмяСдвинутойЯчейки = КолонкаИмя + "_" + НСтрСтр1;

					ОбластьСдвинутойЯчейки     = ТекТабличноеПоле.Области[ИмяСдвинутойЯчейки];
					ОбластьСдвинутойЯчейки.Имя = НовоеИмяСдвинутойЯчейки;

					Если ИмяКолонкиНомера <> Неопределено Тогда
						Если ИмяКолонкиНомера = КолонкаИмя Тогда
							// обновляем порядковый номер строки

							СтарыйНомер = Число(ТекСтрока[КолонкаИмя]);
							НовыйПорядковыйНомер = Строка(Макс(СтарыйНомер - 1, 0));
							ОбластьСдвинутойЯчейки.Текст = НовыйПорядковыйНомер;

							// обновляем значение элемента таблицы значений
							ТекСтрока[КолонкаИмя] = НовыйПорядковыйНомер;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
		КонецЕсли;

		// обновляем структуру многострочного раздела
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

	Иначе
		// строка не удаляется в форме табличного документа,
		// а должна осуществляться сдвиг строк

		// обновляем структуру многострочного раздела
		// методом удаления выбранной строки и добавления пустой строки
		роОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы);
		
		СтруктураГруппы.Удалить(НомерСтрокиТаблицы);

		ДобавляемаяСтрока = СтруктураГруппы.Добавить();

		// обновляем порядковые номера строк, выводимых в табличный документ
		Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
			НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
			НомерСтрокиВФормеТаблицы = Формат(НомерСтрокиВТаблице + 1, "ЧГ=0");
			Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл
				КолонкаТаблицыИмя = КолонкаТаблицы.Имя;

				Если ИмяКолонкиНомера <> Неопределено Тогда
					Если ИмяКолонкиНомера = КолонкаТаблицыИмя Тогда
						// обновляем порядковый номер строки
						СтрокаТаблицы[КолонкаТаблицыИмя] = НомерСтрокиВФормеТаблицы;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

		// Данные в многострочном блоке обновляются в декларациях!
		// Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
		// Обновляем экранную форму табличного документа
		Форма.ВывестиРазделВТабличныйДокумент(ИмяГруппы, СтруктураГруппы);

	КонецЕсли;

	// назначим текущей областью таблицы первую редактируемую ячейку
	// удаленной строки, если ее порядковый номер меньше кол-ва строк
	// многострочного раздела, или последней строки раздела в противном случае

	// определяем текущую область таблицы
	НомТекущейСтроки  = Мин(НомУдаляемойСтроки, СтруктураГруппы.Количество());
	ИмяТекущейОбласти = СтруктураГруппы.Колонки[0].Имя + "_" + Формат(НомТекущейСтроки, "ЧГ=0");

	ТекТабличноеПоле.ТекущаяОбласть = ТекТабличноеПоле.Области[ИмяТекущейОбласти];

	// установим фокус на поле табличн. документа
	Форма.ТекущийЭлемент = ТекТабличноеПоле;

	Форма.Модифицированность = Истина;

КонецПроцедуры // роУдалитьДополнительнуюСтроку()

// СохранитьЗначениеВМногостраничномБлоке
// Процедура сохраняет значение в таблице многострочного блока, в соответствующей строке и колонке.
//
Процедура СохранитьЗначениеВМногостраничномБлоке(Форма, Знач ИмяГруппы, Знач НомерСтрокиНаФорме, Знач ИмяКолонки, Знач ЗначениеПоказателя) Экспорт
	Перем СтруктураГруппы;
	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	СтруктураГруппы[Число(НомерСтрокиНаФорме) - 1][ИмяКолонки] = ЗначениеПоказателя;

КонецПроцедуры // СохранитьЗначениеВМногостраничномБлоке

// ОчиститьПоказателиОтчетаПредназначенныеДляЗаполненияИзИБ
//
// Параметры:
//  Форма          - ссылка на форму отчета.
//  УдалятьЭкзМногостраничности - в случае, если многостраничный экземпляр раздела, является
//                 автозаполняемым, тогда Истина - удалит все экземпляры раздела
//
Процедура ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт

	Если НЕ ПустаяСтрока(НазванияМногостраничныхРазделовДляУдаления) Тогда
		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
	Иначе
		НазванияМнгостраничныхРазделов = Новый Структура;
	КонецЕсли;

	Для каждого СтрокаУровня1 из Форма.мСвойстваРазделовДекларации.Строки Цикл
		НазваниеСтраницы           = СтрокаУровня1.ИмяСтраницы;
		МногостраничностьВРазделе  = СтрокаУровня1.МногостраничностьВРазделе;
		РазделАвтозаполняется = СтрокаУровня1.РазделЯвляетсяАвтозаполняемым;

		Если НазваниеСтраницы = "Титульный" Тогда
			Продолжить;
		КонецЕсли;

		мРаздел = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + НазваниеСтраницы];
		Если НазванияМнгостраничныхРазделов.Свойство(НазваниеСтраницы) Тогда
			// Очистим текущий лист.
			Форма.ОчиститьТабличноеПоле(мРаздел);
			ТаблицаСтраницРаздела = Неопределено;
			Форма.мСтруктураМногостраничныхРазделов.Свойство(НазваниеСтраницы, ТаблицаСтраницРаздела);
			ИндексСтраницы = 0;
			Пока Не (ИндексСтраницы > (ТаблицаСтраницРаздела.Количество()-1)) Цикл
				СтрокаТаблицы = ТаблицаСтраницРаздела[ИндексСтраницы];
				Если НЕ СтрокаТаблицы.АктивнаяСтраница Тогда
					// удаляем дополнительную страницу
					ТаблицаСтраницРаздела.Удалить(СтрокаТаблицы);
					Продолжить;
				КонецЕсли;
				ИндексСтраницы = ИндексСтраницы + 1;
			КонецЦикла;
			// Варианты заполнения установим в один массив. Все варианты возьмем из Эталона.
			// Цвет ячеек перерисуется в показе статика многостраничного раздела, ниже.
			роОчиститьВариантыЗаполнения(Форма, НазваниеСтраницы, Ложь);

			// Отобразим статик и далее в этой процедуре перерисуем ячейки.
			роПоказатьСтатикСтраницРаздела(Форма, НазваниеСтраницы);

			Продолжить;

		КонецЕсли;

		// Далее нужно выполнить только очистку показателей, но не смену их признаков и не перерисовку ячеек.
		ВариантыАвтозаполнения = роПолучитьТаблицуВариантовЗаполнения(Форма, НазваниеСтраницы);

		Если ВариантыАвтозаполнения <> Неопределено Тогда

			Если ВариантыАвтозаполнения.Колонки.Найти("КодПоказателяПоСтруктуре") = Неопределено Тогда
				ПоказательПоСтруктуре = Ложь;
			Иначе
				ПоказательПоСтруктуре = Истина;
			КонецЕсли;

			// Переберем все показатели, которые могут заполняться из ИБ или автозаполняемые.
			Для каждого Пок Из ВариантыАвтозаполнения Цикл

				Если ПоказательПоСтруктуре Тогда
					Если НЕ ПустаяСтрока(Пок.КодПоказателяПоСтруктуре) Тогда
						// Для показателей квадратичных, очистка произойдет через Расчет()
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				КодПоказателя = Пок.КодПоказателя;
				Если (Пок.ВариантЗаполнения = 3) Тогда // Или (Пок.ВариантЗаполнения = 4) Тогда
					// Если показатель в многострочной части, вернем кол-во строк блока.
					Колво = роПоказательВходитВМногострочнуюЧасть(Форма, КодПоказателя);
					Если Колво = 0 Тогда
						мРаздел.Области[КодПоказателя].Очистить();
					Иначе
						Для Инд = 1 По Колво Цикл
							мРаздел.Области[КодПоказателя + "_" + Формат(Инд, "ЧГ=0")].Очистить();
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ОчиститьПоказателиОтчетаПредназначенныеДляЗаполненияИзИБ

// Процедура выводит строки многострочного раздела в табличный документ.
// При отсутствии в табличном документе необходимого количества строк
// добавляет отсутствующие строки.
//
// Параметры:
//  ИмяГруппы       - строка, имя многострочного раздела;
//  СтруктураГруппы - таблица значений, содержащая значения показателей многострочного раздела.
//  ПерерисоватьСтроки - Истина из процедуры удаления доп. строк, для перерисовки областей.
//
Процедура роВывестиРазделВТабличныйДокумент(Форма, ИмяГруппы, СтруктураГруппы) Экспорт
	Перем ИсходноеКоличествоСтрокГруппы;

	// определим исходное колво строк многострочного раздела,
	// соответствующее бумажной форме отчета
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИмяГруппы, ИсходноеКоличествоСтрокГруппы);

	// реальное кол-во строк (колво заполненных строк)
	ТекущееКоличествоСтрокГруппы = СтруктураГруппы.Количество();

	ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;

	ПерерисоватьСтроки = (НЕ ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы);
	СтруктураГруппыКолонки = СтруктураГруппы.Колонки;

	Раздел = Форма.ЭлементыФормы[ТекТабличноеПолеИмя];
	// При восстановлении сохраненных данных отчета сравниваем исходное кол-во
	// отображаемых в форме строк многострочного раздела с реальным количеством
	// созданных строк в сохраненном отчете.
	Если ТекущееКоличествоСтрокГруппы > ИсходноеКоличествоСтрокГруппы Тогда

		// Режим восстановления многострочных блоков. Из процедуры ВосстановитьСохраненныеДанные.
		НастройкиМнгЧ = роПолучитьСвойствоРаздела(Форма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Скопировать();
		НазвОбласти = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").Область;

		НастройкиМнгЧ.Колонки.Добавить("НизМногострочнойЧасти");
		НастройкиМнгЧ.Колонки.Добавить("ВерхМногострочнойЧасти");

		// Определим координаты всех многострочных блоков, для последующего восстановления.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			КоординатаНиз = Раздел.Области[Зап.Область].Низ;
			КоординатаВерх = Раздел.Области[Зап.Область].Верх;
			Зап.НизМногострочнойЧасти = КоординатаНиз;
			Зап.ВерхМногострочнойЧасти = КоординатаВерх;
			// Координаты текущей области
			Если Зап.Область = НазвОбласти Тогда
				Низ = КоординатаНиз;
				Верх = КоординатаВерх;
			КонецЕсли;
		КонецЦикла;

		ВысотаСтроки = НастройкиМнгЧ.Найти(ИмяГруппы, "ИдГруппы").ВысотаСтроки;
		
		// Скопируем верхнюю часть документа, не включая многострочную часть.
		ТаблДок = Раздел.ПолучитьОбласть(1, , Верх - 1);
		// Скопируем подвал, всё, что ниже области многострочного блока.
		Подвал = Раздел.ПолучитьОбласть(Низ + 1, , Раздел.ВысотаТаблицы);

		Строка = Раздел.ПолучитьОбласть(Верх, , Верх + ВысотаСтроки - 1);

		Если ВысотаСтроки > 1 Тогда
			ОбластьОпределениеВысотыСтрокиМногострочнойЧасти=Строка.Области.Найти("ОпределениеВысотыСтрокиМногострочнойЧасти");
			Если ОбластьОпределениеВысотыСтрокиМногострочнойЧасти<>Неопределено Тогда
				ОбластьОпределениеВысотыСтрокиМногострочнойЧасти.Имя = "";
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Области.Найти(НазвОбласти) <> Неопределено Тогда
			Строка.Области[НазвОбласти].Имя = "";
		КонецЕсли;

		// При превышении реального кол-ва строк над исходным кол-вом (по шаблону),
		// автоматически добавляем необходимое колво строк.

		Для НомНовойСтроки = 1 По ТекущееКоличествоСтрокГруппы Цикл
			// Переопределим именнованность.
			Строка1 = Строка.ПолучитьОбласть(1, , Строка.ВысотаТаблицы);
			НомСтр = Формат(НомНовойСтроки, "ЧГ=0");
			Для каждого Кол Из СтруктураГруппыКолонки Цикл
				КолИмя = Кол.Имя;
				Строка1.Области[КолИмя + "_1"].Имя = КолИмя + "_" + НомСтр;
			КонецЦикла;

			ЗаполнитьСтрокуДаннымиИзТаблицы(СтруктураГруппы, Строка1, СтруктураГруппы[НомНовойСтроки - 1], НомСтр);
			ТаблДок.Вывести(Строка1);

		КонецЦикла;

		ТаблДок.Вывести(Подвал);
		Раздел.Очистить();
		Раздел.Вывести(ТаблДок);

		// Восстановим области.
		Для каждого Зап Из НастройкиМнгЧ Цикл
			Раздел.Область("R" + Формат(Зап.НизМногострочнойЧасти, "ЧГ=0") + ":R" + Формат(Зап.ВерхМногострочнойЧасти, "ЧГ=0")).Имя = Зап.Область;
		КонецЦикла;

	КонецЕсли;

	// выводим значения строк
	Для Каждого СтрокаТаблицы Из СтруктураГруппы Цикл
		НомерСтрокиВТаблице      = СтруктураГруппы.Индекс(СтрокаТаблицы);
		НомерСтрокиВФормеТаблицы = НомерСтрокиВТаблице + 1;
		НомерСтрокиВФормеТаблицыСтр = Формат(НомерСтрокиВФормеТаблицы, "ЧГ=0");
		Для Каждого КолонкаТаблицы Из СтруктураГруппы.Колонки Цикл

			КолонкаТаблицыИмя        = КолонкаТаблицы.Имя;
			ЗначениеЯчейки           = СтрокаТаблицы[КолонкаТаблицыИмя];
			ИмяЯчейки                = КолонкаТаблицыИмя + "_" + НомерСтрокиВФормеТаблицыСтр;

			ОбластьЯчейкиТаблицы          = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейкиТаблицы.СодержитЗначение = Истина Тогда
				ОбластьЯчейкиТаблицы.Значение = ЗначениеЯчейки;
			Иначе
				ОбластьЯчейкиТаблицы.Текст = ЗначениеЯчейки;
			КонецЕсли;


		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // роВывестиРазделВТабличныйДокумент()

// ЗаполнитьСтрокуДаннымиИзТаблицы
//
Процедура ЗаполнитьСтрокуДаннымиИзТаблицы(ТаблицаРаздела, Строка1, СтрокаТаблицы, НомерНаФорме) Экспорт
	// Заполняем строку.
	Для каждого Колонка Из ТаблицаРаздела.Колонки Цикл
		КолонкаИмя = Колонка.Имя;
		НазвЯчейки = КолонкаИмя + "_" + НомерНаФорме;
		Если Строка1.Области[НазвЯчейки].СодержитЗначение = Истина Тогда
			Строка1.Области[НазвЯчейки].Значение = СтрокаТаблицы[КолонкаИмя];
		Иначе
			Строка1.Области[НазвЯчейки].Текст = СтрокаТаблицы[КолонкаИмя];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтрокуДаннымиИзТаблицы

// УдалитьДопСтрокиМногострочнойЧастиРегОтчета
// Процедура удаляет дополнительные строки многострочного блока.
// Удаление происходит не по строчкам, а группой строк в одну итерацию.
//
// Параметры:
//  Форма          - ссылка на форму
//  ИдГруппы       - идентификатор многострочной группы
//  ОбновлятьБлок  - по умолчания Истина, запускать ли ОбновитьСтруктуруМногострочногоРаздела.
//
Процедура УдалитьДопСтрокиМногострочнойЧастиРегОтчета(Форма, ИдГруппы, ОбновлятьБлок = Истина)
	Перем ТаблицаДопСтрок;
	Перем ИсходноеКоличествоСтрокГруппы;

	Форма.мСтруктураМногострочныхРазделов.Свойство(ИдГруппы, ТаблицаДопСтрок);
	Форма.мСтруктураИсхКолвоСтрокРазделов.Свойство(ИдГруппы, ИсходноеКоличествоСтрокГруппы);
	ТекущееКоличествоСтрок = ТаблицаДопСтрок.Количество();
	ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИдГруппы);
	ТекТабличноеПолеИмя = ТекТабличноеПоле.Имя;
	Если ТекущееКоличествоСтрок > ИсходноеКоличествоСтрокГруппы Тогда

		НастройкиМнгЧ = роПолучитьСвойствоРаздела(Форма, ТекТабличноеПолеИмя, "МногострочностьВРазделе").Найти(ИдГруппы, "ИдГруппы");
		МнгЧастьОбластьИмя = НастройкиМнгЧ.Область;
		ВысотаСтроки = НастройкиМнгЧ.ВысотаСтроки;

		МнгЧастьОбласть = ТекТабличноеПоле.Области.Найти(МнгЧастьОбластьИмя);
		Низ = ТекТабличноеПоле.Области.Найти(МнгЧастьОбластьИмя).Низ + 1;
		УдаляемаяОбласть = ТекТабличноеПоле.Область(Низ, , Низ + ((ТекущееКоличествоСтрок - ИсходноеКоличествоСтрокГруппы) * ВысотаСтроки) - 1);
		ТекТабличноеПоле.УдалитьОбласть(УдаляемаяОбласть,ТипСмещенияТабличногоДокумента.ПоВертикали);
		ТаблицаДопСтрок.Очистить();
		Для Инд = 1 По ИсходноеКоличествоСтрокГруппы Цикл
			ТаблицаДопСтрок.Добавить();
		КонецЦикла;
		Если ОбновлятьБлок Тогда
			Форма.ОбновитьСтруктуруМногострочногоРаздела(ИдГруппы);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // УдалитьДопСтрокиМногострочнойЧастиРегОтчета

// Процедура очищает содержимое редактируемых и вычисляемых ячеек
// поля табличного документа, переданного параметром ВыбТабличноеПоле.
//
// Параметры:
//  ВыбТабличноеПоле - поле табличного документа.
//
Процедура роОчиститьТабличноеПоле(Форма, ВыбТабличноеПоле) Экспорт

	ВыбТабличноеПолеИмя = ВыбТабличноеПоле.Имя;
	// Проверяем многострочные блоки в разделе.
	НастройкиМнгЧ = роПолучитьСвойствоРаздела(Форма, ВыбТабличноеПолеИмя, "МногострочностьВРазделе");
	ЕстьМногострочныеБлоки = ТипЗнч(НастройкиМнгЧ) = Тип("ТаблицаЗначений");
	Если ЕстьМногострочныеБлоки Тогда
		Для каждого Блок Из НастройкиМнгЧ Цикл
			МногострочныйБлок = Блок.ИдГруппы;
			УдалитьДопСтрокиМногострочнойЧастиРегОтчета(Форма, МногострочныйБлок, Ложь);
		КонецЦикла;
	КонецЕсли;

	// Непосредственно очищаем ячейки табличного документа.
	Для Инд = 0 По ВыбТабличноеПоле.Области.Количество() - 1 Цикл
		ТекущаяОбласть = ВыбТабличноеПоле.Области[Инд];

		Если Не ТекущаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.СодержитЗначение <> Истина Тогда
			Продолжить;
		КонецЕсли;

		Если ТекущаяОбласть.Защита Тогда
			Продолжить;
		КонецЕсли;

		ТекущаяОбласть.Очистить();
	КонецЦикла;

	ИмяСтраницыПанели = СтрЗаменить(ВыбТабличноеПолеИмя, "ПолеТабличногоДокумента", "");
	ПредставлениеДанных = роПолучитьСвойствоРаздела(Форма, ВыбТабличноеПолеИмя, "ПредставлениеДанных");
	Если ПредставлениеДанных Тогда
		Форма.ОбнулитьПеременныеМодуляХранящиеЗначенияКвадратногоПредставленияПоРазделу(ИмяСтраницыПанели);
		Форма.ЗаполнениеЗначенийВКвадратиках(ИмяСтраницыПанели);
	КонецЕсли;

	Если ЕстьМногострочныеБлоки Тогда
		Для каждого Блок Из НастройкиМнгЧ Цикл
			МногострочныйБлок = Блок.ИдГруппы;
			Форма.ОбновитьСтруктуруМногострочногоРаздела(МногострочныйБлок);
		КонецЦикла;
		// Расчет всегда запускаем только в многострочных листах. В не многострочных, запускается при вставки доп. страницы, или интерактивно в коде.
		Форма.Расчет(ИмяСтраницыПанели);
	КонецЕсли;

КонецПроцедуры // роОчиститьТабличноеПоле()

// роОбновитьСтруктуруМногострочногоРаздела
// Обновляет структуру многострочнго раздела, заданного
// уникальным идентификатором. Заполняет таблицу значений
// многострочного раздела значениями соответствующих ячеек.
// Нельзя вызывать процедуру из общего модуля. Только через процедуру находящуюся в форме отчета.
//
// Параметры:
//  ИмяГруппы - строка - идентификатор многострочного раздела.
//
Процедура роОбновитьСтруктуруМногострочногоРаздела(Форма, ИмяГруппы) Экспорт
	Перем СтруктураГруппы;

	Форма.мСтруктураМногострочныхРазделов.Свойство(ИмяГруппы, СтруктураГруппы);
	ТекТабличноеПоле = Форма.ОпределитьТабличноеПолеПоИдМногострочногоРаздела(ИмяГруппы);

	Для НСтр = 1 По СтруктураГруппы.Количество() Цикл
		ТекСтрокаТаблицы = СтруктураГруппы[НСтр - 1];
		НСтрСтр = Формат(НСтр, "ЧГ=0");
		Для Каждого Колонка Из СтруктураГруппы.Колонки Цикл
			ИмяКолонки    = Колонка.Имя;

			ИмяЯчейки     = ИмяКолонки + "_" + НСтрСтр;
			ОбластьЯчейки = ТекТабличноеПоле.Области[ИмяЯчейки];

			Если ОбластьЯчейки.СодержитЗначение = Истина Тогда
				ЗначениеЯчейки = ОбластьЯчейки.Значение;
			Иначе
				ЗначениеЯчейки = ОбластьЯчейки.Текст;
			КонецЕсли;
			ТекСтрокаТаблицы[ИмяКолонки] = ЗначениеЯчейки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры // роОбновитьСтруктуруМногострочногоРаздела()

// Обновляет структуру многострочных разделов.
// Заполняет таблицу значений многострочного раздела
// значениями соответствующих ячеек.
//
Процедура роОбновитьСтруктуруМногострочныхРазделов(Форма) Экспорт
	// Заполняет таблицу значений многострочного раздела
	// указанными в соответствующих ячейках значениями

	// Заполнение выполняется синхронно для всех многострочных разделов
	Для Каждого ЭлементСтруктуры Из Форма.мСтруктураМногострочныхРазделов Цикл
		ИмяГруппы = ЭлементСтруктуры.Ключ;
		Форма.ОбновитьСтруктуруМногострочногоРаздела(ИмяГруппы);
	КонецЦикла;
КонецПроцедуры // роОбновитьСтруктуруМногострочныхРазделов()

// ПолучитьСведенияОПредставителе
// Функция возаращает данные о представителе из справочника РегистрацияВИФНС.
//
// Параметры:
//  Организация    - ссылка на справочник оганизации.
//  КодИФНС        - строка, код ИФНС (с титульного листа).
//  ДатаПодписиОтчета - дата подписи отчета, для работы с ФИО.
//
// Возвращаемое значение:
//  Структура с ключами: ПредставительЮр, ПредставительФЛ, ДокументПредставителя
//
Функция ПолучитьСведенияОПредставителеОрганизации(Организация, КодИФНС, КПП, ДатаПодписиОтчета)
	
	Результат = Новый Структура("ПредставительЮр, ПредставительФЛ, ДокументПредставителя, Фамилия, Имя, Отчество", "", "", "", "", "", "");
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("КодИФНС", КодИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.КПП,
	               |	СправочникИФНС.Код КАК КодНО,
	               |	СправочникИФНС.НаименованиеИФНС КАК Наименование,
	               |	СправочникИФНС.Представитель,
	               |	СправочникИФНС.ДокументПредставителя
	               |ИЗ
	               |Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |СправочникИФНС.Владелец = &Владелец
	               | И СправочникИФНС.Код = &КодИФНС
				   | И СправочникИФНС.КПП = &КПП
                   | И СправочникИФНС.ПометкаУдаления = &ПометкаУдаления";

	СправочникИФНС = Запрос.Выполнить().Выгрузить();
	Если СправочникИФНС.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// В справочнике регистрации ИФНС может быть только информация по одной ИФНС!
	Представитель = СправочникИФНС[0].Представитель;
	Если НЕ ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		Если ЗначениеЗаполнено(Представитель) Тогда
			Результат.Вставить("ПредставительЮр", Представитель.НаименованиеПолное);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Представитель) Тогда
		ЗаполнитьЗначенияСвойств(Результат, ПолучитьФИОФизЛица(Представитель, ДатаПодписиОтчета));
		Результат.Вставить("ПредставительФЛ", СокрЛП(СокрЛП(Результат.Фамилия) + " " + СокрЛП(Результат.Имя) + " " + СокрЛП(Результат.Отчество)));
	КонецЕсли;
	Результат.Вставить("ДокументПредставителя", СправочникИФНС[0].ДокументПредставителя);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСведенияОПредставителе

Функция ПредставительЯвляетсяФизЛицом(Представитель) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Представитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		Возврат Представитель.ВидКонтрагента = Перечисления.ВидыКонтрагентов.ФизЛицо;
	Иначе
		Возврат ТипЗнч(Представитель) = Тип("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОФизЛица(ФизЛицо, НаДату = Неопределено) Экспорт
	
	Результат = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	Если Метаданные.Справочники.Найти("ФизическиеЛица") = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Результат, ФизЛицо);
	Иначе
		ДанныеФЛ = РегистрыСведений.ФИОФизЛиц.СрезПоследних(?(ЗначениеЗаполнено(НаДату), НаДату, РабочаяДата), Новый Структура("ФизЛицо", ФизЛицо));
		Если ДанныеФЛ.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(Результат, ДанныеФЛ[0]);
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

// ПолучитьПредставлениеРазделаРегОтчета
// Функция получает из мДеревоСтраницОтчета представление раздела отчета
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  ИмяСтраницы    - название страницы отчета
// Возвращаемое значение:
//  Представление раздела, строка.
//
Функция ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы)
	Для Каждого СтрокаУровня1 Из Форма.мДеревоСтраницОтчета.Строки Цикл
		Если ИмяСтраницы = СтрокаУровня1.ИмяСтраницы Тогда
			Попытка
				Результат = СтрокаУровня1.Представление;
			Исключение
				Результат = ИмяСтраницы;
			КонецПопытки;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // ПолучитьПредставлениеРазделаРегОтчета

// СформироватьСоставКнопкиОчиститьДляРегОтчетов
// Процедура формирует состав кнопки-меню Очисть в регламентированных отчетах.
//
Процедура СформироватьСоставКнопкиОчиститьДляРегОтчетов(Форма) Экспорт
	Если Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Найти("ПодменюОчистить") = Неопределено Тогда
		// В декларации старый механизм очистки.
		Возврат;
	КонецЕсли;

	Если СвойствоОпределено(Форма, "мБезОткрытияФормы") Тогда
		Если Форма.мБезОткрытияФормы Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЭлементМеню = Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПодменюОчистить;

	ИмяСтраницы = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	МногостраничностьВРазделе = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
	ПредставлениеРаздела = ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы);
	// В алкогольных декларациях есть вкладка "Декларация" с таким же представлением, т.о. получается, что
	// подменю очистить будет содержать два пункта очистить Декларацию
	Если (ЭтоФормаАлкогольнойОтчетности(Форма)) И (ИмяСтраницы <> "ФизЛица") Тогда
		Если ИмяСтраницы = "Возвраты" Тогда
			ПредставлениеРаздела = "таблицу возвратов";
		Иначе
			ПредставлениеРаздела = "таблицу декларации";
		КонецЕсли;
	КонецЕсли;
	СведенияОФЛ = (Найти(НРег(ПредставлениеРаздела), "физ") > 0) И (Найти(НРег(ПредставлениеРаздела), "лиц") > 0);

	ЧтоОчищать = "Отчет";
	Если СвойствоОпределено(Форма, "мЧтоОчищать") Тогда
		ЧтоОчищать = Форма.мЧтоОчищать;
	Иначе
		// Составим из синонима и заголовка общее название.
		СинонимФормыОтчетности = Форма.Метаданные().Формы[Форма.мВыбраннаяФорма].Синоним;
		КомментарийФормыОтчетности = Форма.Метаданные().Формы[Форма.мВыбраннаяФорма].Комментарий;
		// Соединим синоним, комментарий и заголовок, чтобы возможно найти нужное вхождение.
		ЗаголовокФормы = НРег(СинонимФормыОтчетности + " " + КомментарийФормыОтчетности + " " + Форма.Заголовок);
		Если Найти(ЗаголовокФормы, "декларация ") > 0 Тогда
			ЧтоОчищать = "Декларацию";
		ИначеЕсли Найти(ЗаголовокФормы, "расчет ") > 0 Тогда
			ЧтоОчищать = "Расчет";
		КонецЕсли;
	КонецЕсли;

	ДополнениеКТексту = "";
	Если МногостраничностьВРазделе Тогда
		Если Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() > 1 Тогда
			ДополнениеКТексту = " (все листы)";
		КонецЕсли;
	ИначеЕсли ИмяСтраницы = "Титульный" Тогда
		// В представлении листа должно быть всегда указано "Титульный лист"
		Если Найти(ПредставлениеРаздела, " лист") = 0  Тогда
			ДополнениеКТексту = " лист";
		КонецЕсли;
	КонецЕсли;

	ЭлементМеню.Кнопки.Очистить();

	// В случае, если в отчете есть только один раздел, то меню очистки всего раздела смысла показывать нет.
	Если Форма.мСвойстваРазделовДекларации.Строки.Количество() > 1 Тогда
		ЭлементМеню.Кнопки.Добавить("ОчиститьВесьОтчет", ТипКнопкиКоманднойПанели.Действие,
		                            ЧтоОчищать, Новый Действие("КоманднаяПанельФормыВыбратьВариантОчисткиОтчета"));

		// Добавим разделитель.
		ЭлементМеню.Кнопки.Добавить("", ТипКнопкиКоманднойПанели.Разделитель);
	КонецЕсли;

	Если МногостраничностьВРазделе Тогда
		Если Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество() > 1 Тогда
			ЭлементМеню.Кнопки.Добавить("ОчиститьТекущийЭкземплярМногостраничногоРаздела" + ИмяСтраницы, ТипКнопкиКоманднойПанели.Действие,
		                             ПредставлениеРаздела + " (только текущий лист)", Новый Действие("КоманднаяПанельФормыВыбратьВариантОчисткиОтчета"));
		КонецЕсли;
	КонецЕсли;

	// Для титульного листа не формируем пункт подменю Очистить Титульный лист.
	Если ИмяСтраницы <> "Титульный" Тогда
		//Если СведенияОФЛ Тогда
		//	ЭлементМеню.Кнопки.Добавить("ОчиститьТекущийРаздел" + ИмяСтраницы, ТипКнопкиКоманднойПанели.Действие,
		//								"Очистить сведения о физическом лице" + ДополнениеКТексту, Новый Действие("КоманднаяПанельФормыВыбратьВариантОчисткиОтчета"));
		//Иначе
		ЭлементМеню.Кнопки.Добавить("ОчиститьТекущийРаздел" + ИмяСтраницы, ТипКнопкиКоманднойПанели.Действие,
		                             ПредставлениеРаздела + ДополнениеКТексту, Новый Действие("КоманднаяПанельФормыВыбратьВариантОчисткиОтчета"));
		//КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьСоставКнопкиОчиститьДляРегОтчетов

// МеханизмыОчисткиРегламентированныхОтчетов
//
Процедура МеханизмыОчисткиРегламентированныхОтчетов(Форма, Кнопка) Экспорт

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	КнопкаИмя = Кнопка.Имя;
	Если КнопкаИмя = "ОчиститьВесьОтчет" Тогда
		Форма.Очистить();
		Возврат;
	КонецЕсли;

	ОчисткаПроизошла = Ложь;
	ИмяСтраницы = СтрЗаменить(КнопкаИмя, "ОчиститьТекущийЭкземплярМногостраничногоРаздела", "");
	ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "ОчиститьТекущийРаздел", "");
	ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста", Ложь);
	Многостраничность = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
	УдалятьсяВсеДопЭкземпляры = Ложь;
	ПредставлениеРазделаОтчета = НРег(ПолучитьПредставлениеРазделаРегОтчета(Форма, ИмяСтраницы));
	СведенияОФЛ = (Найти(НРег(ПредставлениеРазделаОтчета), "физ") > 0) И (Найти(НРег(ПредставлениеРазделаОтчета), "лиц") > 0);

	ОчищенИлиОчищено = "очищен"; // Очищен раздел ...
	Если Найти(НРег(ПредставлениеРазделаОтчета), "заявление") > 0 Тогда
		ОчищенИлиОчищено = "очищено"; // Очищено заявление ...
	КонецЕсли;

	Если Найти(КнопкаИмя, "ОчиститьТекущийРаздел") > 0 Тогда
		// Очистить текущий раздел. Может быть многостраничный.
		Если Многостраничность Тогда
			КолВоСтраницВРазделе = Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницы].Количество();
			Если КолВоСтраницВРазделе > 1 Тогда
				ТекстВопроса = "Внимание! Будут удалены все доп. листы текущего раздела (листа)." + Символы.ПС
				  + "Продолжить операцию?";
			Иначе
				Если СведенияОФЛ Тогда 
					// Очищаем лист со сведениями о физических лицах.
					ТекстВопроса = "Внимание! Будут очищены сведения о физическом лице." + Символы.ПС
					  + "Продолжить операцию?";
				Иначе
					ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС
					  + "Продолжить операцию?";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстВопроса = "Внимание! Будет " + ОчищенИлиОчищено + " " + ПредставлениеРазделаОтчета + "." + Символы.ПС
			  + "Продолжить операцию?";
		КонецЕсли;

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОчисткаПроизошла = Истина;
			Если (Многостраничность) И (КолВоСтраницВРазделе > 1) Тогда
				ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, ИмяСтраницы);
				УдалятьсяВсеДопЭкземпляры = Истина;
			Иначе
				Форма.ОчиститьТабличноеПоле(Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы]);
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли Найти(КнопкаИмя, "ОчиститьТекущийЭкземплярМногостраничногоРаздела") > 0 Тогда

		Ответ = Вопрос("Внимание! Будет очищен текущий лист." + Символы.ПС
			  + "Продолжить операцию?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Форма.ОчиститьТабличноеПоле(Форма.ЭлементыФормы["ПолеТабличногоДокумента" + ИмяСтраницы]);
			ОчисткаПроизошла = Истина;
		КонецЕсли;

	КонецЕсли;

	Если ОчисткаПроизошла Тогда
		Форма.Модифицированность = Истина;
		// Если есть экспортная процедура ОперацииВыполняемыеПриУдаленииЭкземпляраМногостраничногоРаздела
		// определяющая действия после удаления экземплярности, тогда вызовем её.
		// Например, в этой процеудуре может быть перерасчет каких-то листов,
		// перепроставление сквозных номеров и т.д. Пример: декларация по НДС 2007Кв1.
		Если ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста Тогда
			// Параметр УдалятьсяВсеДопЭкземпляры означает: если Истина, то удаляются все экземпляры доп. страниц раздела, иначе всегда Ложь.
			// Иммеет смысл только для многостраничного раздела.
			Форма.СпециальныеОперацииПослеОчисткиЛиста(ИмяСтраницы, УдалятьсяВсеДопЭкземпляры);
		Иначе
			// Выполним перерасчет всех разделов отчетов.
			// Возможно, что необходимо вызывать расчет и передавать непосредственно имя раздела,
			// который будет удаляться, тогда нужно учитывать, что данные на это разделе сказываются
			// на другие разделы и использовать или механизм РасчетаСвязанныхРазделов по аналогии с НДС и Прибылью или 
			// механизм ЗапускатьОтдельнуюОбработкуПослеОчисткиЛиста, где в процедуре СпециальныеОперацииПослеОчисткиЛиста
			// будет указано, что нужно перерассчитывать.
			Форма.Расчет("");
		КонецЕсли;

		Если роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "РазделЯвляетсяАвтозаполняемым") Тогда
			Форма.УстановитьЦветФонаЯчейки(,, ИмяСтраницы);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // МеханизмыОчисткиРегламентированныхОтчетов

// ИмпортироватьДанныеКонтейнераXML
// Функция импортируется данные отчетности из контейнера XML. Открывает диалог выбора файла.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Неопределено   - если не удалось получить данные по каким-либо причинам.
//  Структура      - структура данных файла xml
//
Функция ИмпортироватьДанныеКонтейнераXML(Форма) Экспорт

	Режим = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	Фильтр = "*.xml|*.xml";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выбор xml файла";

	Если НЕ ДиалогОткрытияФайла.Выбрать() Тогда
		Возврат Неопределено; // Пользователь отказался выбрать файл.
	КонецЕсли;

	// Считаем данные файла XML.
	Результат = ИмпортДанныхРегламентированнойОтчетностиИзКонтейнераXML(ДиалогОткрытияФайла.ПолноеИмяФайла);

	Если Результат = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	СтруктураИдентификацииОтчета = ВернутьСтруктуруТочногоОтбораДанныхИзКонтейнераXML(Форма);
	СтруктураДанныхОтчетаXMLКонтейнер = ПолучитьДанныеРегламентированнойОтчетностиЭтогоОтчета(Результат, СтруктураИдентификацииОтчета, Ложь);
	Если СтруктураДанныхОтчетаXMLКонтейнер = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат СтруктураДанныхОтчетаXMLКонтейнер;

КонецФункции // ИмпортироватьДанныеКонтейнераXML

// ПрерватьАвтоЗаполнениеПоДаннымИБ
//
Функция ПрерватьАвтоЗаполнениеПоДаннымИБ(Форма, НазванияМногостраничныхРазделовДляУдаления = "") Экспорт
	ТекстВопроса = "Перед заполнением отчета будут очищены показатели, которые заполняются из информационной базы.";
	Доп = "";
	Если НазванияМногостраничныхРазделовДляУдаления <> "" Тогда
		БольшоОдногоРаздела = Ложь;
		Если Найти(НазванияМногостраничныхРазделовДляУдаления, ",") > 0 Тогда
			БольшоОдногоРаздела = Истина;
		КонецЕсли;
		Если БольшоОдногоРаздела Тогда
			Доп = "Также будут очищены следующие многостраничные разделы (листы):";
		Иначе
			Доп = "Также будет очищен следующий многостраничный раздел (листы):";
		КонецЕсли;

		НазванияМнгостраничныхРазделов = Новый Структура(НазванияМногостраничныхРазделовДляУдаления);
		Для каждого Зап Из НазванияМнгостраничныхРазделов Цикл
			ПредставлениеРаздела = ПолучитьПредставлениеРазделаРегОтчета(Форма, Зап.Ключ);
			Доп = Доп + Символы.ПС + ПредставлениеРаздела;
		КонецЦикла;
	КонецЕсли;

	ТекстВопроса = ТекстВопроса + Символы.ПС + ?(Доп = "", "", Доп + Символы.ПС) + "Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);

	ОчищатьПоказателиИПродолжать = Ложь;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОчищатьПоказателиИПродолжать = Истина;
	КонецЕсли;

	Если ОчищатьПоказателиИПродолжать Тогда
		// Удалит многостраничные разделы, к ним варианты заполнения и перерисует отчет по этим разделам.
		ОчиститьПоказателиОтчетаЗаполняемыеИзИБ(Форма, НазванияМногостраничныхРазделовДляУдаления);
		//ИмяТекущегоРаздела = Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
		//РазделЯвляетсяАвтозаполняемым = роПолучитьСвойствоРаздела(Форма, ИмяТекущегоРаздела, "РазделЯвляетсяАвтозаполняемым", Ложь);

		// Обеспечим простановку цветов ячеек.
		// Автоматически при переходах по вкладкам разделов устанавливаются цвета только
		// Для многостраничных разделов. Поэтому, если раздел не многостраничны и автозаполняется
		// тогда прорисовываем цвета, а также, если многостраничный, автозаполняемый и текущий лист,
		// также перерисуем.
  //  	Для Каждого СтрокаУровня1 Из Форма.мСвойстваРазделовДекларации.Строки Цикл

  //  		ИмяСтраницы = СтрокаУровня1.ИмяСтраницы;
  //  		Автозаполняется = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "РазделЯвляетсяАвтозаполняемым", Ложь);
  //  		Многостраничность = роПолучитьСвойствоРаздела(Форма, ИмяСтраницы, "МногостраничностьВРазделе", Ложь);
  //  		Если (НЕ Многостраничность) И (Автозаполняется) Тогда
  //  			Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
  //  		КонецЕсли;

  //  		// Особый случай, декл. по имуществу, в прибыли есть.
  //  		// Многостраничный раздел не должен быть автозаполняемым по данным ИБ.
  //  		Если (Многостраничность) И (ИмяСтраницы = ИмяТекущегоРаздела) И (Автозаполняется) Тогда
  //  			Форма.УстановитьЦветФонаЯчейки(,,ИмяСтраницы);
  //  		КонецЕсли;

////		КонецЦикла;

	КонецЕсли;

	Возврат НЕ ОчищатьПоказателиИПродолжать;
КонецФункции // ПрерватьАвтоЗаполнениеПоДаннымИБ

// УстановитьПоказательСУчетомXML
// Процедура устанавливает значение показателя с помощью стандартной процедуры роУстановитьЗначениеПоказателя.
// Значение показателя учитывается по состоянию ИБ (ЗаполнитьАвто) и по данным в XML контейнере.
// В случае, если:
// 1. показателя в структуре xml нет или он равен нуля, то значение берется из ЗаполнитьАвто (по данным ИБ)
// 2. если в ИБ значение показателя нулевое, то значение берется из XML файла, если оно есть
//
// Параметры:
//  ИмяПоказателя  - название показателя в отчете.
//  Значение       - значение показателя по данным информационной базы (ЗаполнитьАвто)
//
// Возвращаемое значение:
//  Нет.
//
Процедура УстановитьПоказательСУчетомXML(Форма, ИмяПоказателя, Значение) Экспорт
	// Флаг, что заполнение отчета происходит с учетом данных XML файла.
	// ДанныеXMLПрисутствуют
	ДанныеXMLПрисутствуют = НЕ Форма.мСтруктураДанныхОтчетаXMLКонтейнер = Неопределено;
	Если НЕ ДанныеXMLПрисутствуют Тогда
		роУстановитьЗначениеПоказателя(Форма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;

	// Определим раздел отчета.
	ИмяСтраницыПанели = роОпределитьСтраницуПанелиПоКодуПоказателя(Форма, ИмяПоказателя);

	// Есть ли данные по этому разделу в контейнере XML.
	//ДанныеРазделаXML = мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета.Найти(ИмяСтраницыПанели, "Раздел");
	// Просмотрим все разделы в xml документе. Т.к. в одном разделе Раздел2 может содержаться показатели раздела 2.1 и т.д.
	ДанныеРазделаXML = Неопределено;
	Для каждого РазделXML Из Форма.мСтруктураДанныхОтчетаXMLКонтейнер.ДанныеРазделовОтчета Цикл
		Для каждого Экз Из РазделXML.Данные Цикл
			Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) Тогда
				ДанныеРазделаXML = РазделXML;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Если ДанныеРазделаXML = Неопределено Тогда
		// В контейнере XML нет данных по заполняемому разделу, и соответвтвенно по показателю.
		роУстановитьЗначениеПоказателя(Форма, ИмяПоказателя, Значение);
		Возврат;
	КонецЕсли;

	// Получим таблицу раздела.
	ДанныеРазделаXMLДанные = ДанныеРазделаXML.Данные;

	Многостраничность = Форма.мСтруктураМногостраничныхРазделов.Свойство(ИмяСтраницыПанели);
	Если Многостраничность Тогда
		ИндАктивнойСтр = Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Найти(Истина, "АктивнаяСтраница");
		ИндАктивнойСтраницы = Форма.мСтруктураМногостраничныхРазделов[ИмяСтраницыПанели].Индекс(ИндАктивнойСтр);
	КонецЕсли;

	Для каждого Экз Из ДанныеРазделаXMLДанные Цикл
		Если Многостраничность Тогда
			Если ИндАктивнойСтраницы <> ДанныеРазделаXMLДанные.Индекс(Экз) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
		Если Экз.СтруктураДанных.Свойство(ИмяПоказателя) Тогда
			// Показатель есть в XML контейнере.
			ЗначениеПоПоказателюИзКонтейнераXML = СокрЛП(Экз.СтруктураДанных[ИмяПоказателя]);

			// Если пустая строка, то считаем, что в контейнере xml показателя нет, равносильно или 0, если число или "" если дата.
			Если ПустаяСтрока(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
			ИначеЕсли (СтрДлина(ЗначениеПоПоказателюИзКонтейнераXML) = 10) И (СтрЧислоВхождений(ЗначениеПоПоказателюИзКонтейнераXML, ".") = 2) Тогда
				Год = Прав(ЗначениеПоПоказателюИзКонтейнераXML, 4);
				Мес = Сред(ЗначениеПоПоказателюИзКонтейнераXML, 4, 2);
				День = Лев(ЗначениеПоПоказателюИзКонтейнераXML, 2);
				ЗначениеДата = Год + Мес + День;
				ЗначениеПоПоказателюИзКонтейнераXML = ?(роЯвляетсяДатой(ЗначениеДата), Дата(ЗначениеДата), Неопределено);
			ИначеЕсли роЯвляетсяЧислом(ЗначениеПоПоказателюИзКонтейнераXML) Тогда
				ЗначениеПоПоказателюИзКонтейнераXML = Число(ЗначениеПоПоказателюИзКонтейнераXML);
				Если ЗначениеПоПоказателюИзКонтейнераXML = 0 Тогда
					// В случае, если числовое значение равное 0 в xml, считаем, что показатель отсутствует.
					ЗначениеПоПоказателюИзКонтейнераXML = Неопределено;
				КонецЕсли;
			КонецЕсли;

			// Удаляем ключ, чтобы при окончательном импорте xml данные снова не перетерлись на листе из источника xml.
			// Таким образом остаются только те показатели, которые из ИБ не заполняются или не заполнились.
			Экз.СтруктураДанных.Удалить(ИмяПоказателя);
		КонецЕсли;

		// Если показатель в XML отсутствует (Неопределено) или не заполнен, то всегда записываем в отчет переданное значение (из ИБ).
		Если ЗначениеПоПоказателюИзКонтейнераXML = Неопределено Тогда
			// В контейнере не оказалось необходимого показателя. Заполняем стандартной процедурой.
			роУстановитьЗначениеПоказателя(Форма, ИмяПоказателя, Значение);
			Прервать;
		КонецЕсли;

		// Если показатель есть в ИБ и в XML, тогда за основу берем показатель из XML контейнера.
		Если ЗначениеПоПоказателюИзКонтейнераXML <> Неопределено Тогда
			// Значение из XML всегда приоритетнее. Заполняем по данным XML файла.
			роУстановитьЗначениеПоказателя(Форма, ИмяПоказателя, ЗначениеПоПоказателюИзКонтейнераXML);
			Прервать;
		КонецЕсли;

	КонецЦикла;
КонецПроцедуры // УстановитьПоказательСУчетомXML

// УстановитьКодОКВЭДНаТитульномЛисте
// Устанавливает код ОКВЭД в титульных листах деклараций.
//
// Параметры:
//  Форма          - ссылка на форму отчета
//  СтандартнаяОбработка - переменная из обработчика
//
// Возвращаемое значение:
//  Нет.
//
Процедура УстановитьКодОКВЭДНаТитульномЛисте(Форма, СтандартнаяОбработка) Экспорт
	мТитульный = Форма.ЭлементыФормы.ПолеТабличногоДокументаТитульный;
	НачЗначение = СокрЛП(мТитульный.Области.ОКВЭД1.Значение + мТитульный.Области.ОКВЭД2.Значение)
				+ "." + СокрЛП(мТитульный.Области.ОКВЭД3.Значение + мТитульный.Области.ОКВЭД4.Значение)
				+ "." + СокрЛП(мТитульный.Области.ОКВЭД5.Значение + мТитульный.Области.ОКВЭД6.Значение);

	СтандартнаяОбработка = Ложь;
	ВводЗначений = роПолучитьОбщуюФорму("ФормаВводаОКВЭД");
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОКВЭД", НачЗначение);
	ВводЗначений.НачальноеЗначениеВыбора = СтруктураПараметров;

	Если ВводЗначений.ОткрытьМодально() Тогда

		Форма.Модифицированность = Истина;
		РезультатВвода = ВводЗначений.НачальноеЗначениеВыбора.ОКВЭД;

		Если СтрЗаменить(РезультатВвода, " ", "") = ".." Тогда
			РезультатВвода = "";
		КонецЕсли;

		РезультатВвода2 = СтрЗаменить(РезультатВвода, ".", "");
		роПроставитьВКвадратыЗначения(Форма, "Титульный", "ОКВЭД", 6, РезультатВвода2);

	КонецЕсли;

КонецПроцедуры // УстановитьКодОКВЭДНаТитульномЛисте

// ПолучитьВариантЗаполненияПоказателяРегОтчета
//
Функция ПолучитьВариантЗаполненияПоказателяРегОтчета(МакетСоставаПоказателей, Ном) Экспорт
	
	ТекКонфигурация = ИДКонфигурации();
	
	стрВариантЗаполнения = СокрЛП(МакетСоставаПоказателей.Область(Ном, 6).Текст);
	ПозицияРазделителя = Найти(стрВариантЗаполнения, ",");

	// Указан общий вариант заполнения показателя, для всех конфигураций.
	Если ПозицияРазделителя = 0 Тогда
		Если (ТекКонфигурация = "ББУ" ИЛИ ТекКонфигурация = "БГУ" ИЛИ ТекКонфигурация = "ЗБУ") И (стрВариантЗаполнения = "2" ИЛИ стрВариантЗаполнения = "3") Тогда
			Возврат "";
		Иначе
			Возврат стрВариантЗаполнения;
		КонецЕсли;
	КонецЕсли;

	Если ПозицияРазделителя > 0 Тогда
		ВариантыЗаполнения = СтрЗаменить(стрВариантЗаполнения, ",", Символы.ПС);
		ВариантыЗаполнения = СтрЗаменить(ВариантыЗаполнения, " ", "");
		// На 1-м месте - БП.
		// На 2-м месте УПП.
		// На 3-м месте ЗУП.
		// Пример:
		// 3,3,
		// или
		// ,,3

		ВариантЗаполненияБП = СтрПолучитьСтроку(ВариантыЗаполнения, 1);
		ВариантЗаполненияУПП = СтрПолучитьСтроку(ВариантыЗаполнения, 2);
		ВариантЗаполненияЗУП = СтрПолучитьСтроку(ВариантыЗаполнения, 3);

		Если ТекКонфигурация = "БП" ИЛИ ТекКонфигурация = "БПКОРП" ИЛИ ТекКонфигурация = "БАУКОРП" ИЛИ ТекКонфигурация = "БАУ" Тогда
			Возврат ВариантЗаполненияБП;
		ИначеЕсли ТекКонфигурация = "УПП" ИЛИ ТекКонфигурация = "КА" Тогда
			Возврат ВариантЗаполненияУПП;
		ИначеЕсли ТекКонфигурация = "ЗУП" ИЛИ ТекКонфигурация = "ЗБУ" Тогда
			Возврат ВариантЗаполненияЗУП;
		ИначеЕсли ТекКонфигурация = "ББУ" ИЛИ ТекКонфигурация = "БГУ" Тогда
			Возврат ?(ВариантЗаполненияБП = "2" ИЛИ ВариантЗаполненияБП = "3", "", ВариантЗаполненияБП);
		Иначе
			Возврат "";
		КонецЕсли;

	КонецЕсли;

КонецФункции // ПолучитьВариантЗаполненияПоказателяРегОтчета

// ПолучитьСведенияОПредставителе
// Параметры:
//  Форма          - ссылка на форму отчета.
//  МожетБытьТолькоЮРЛицо - Булево. Если Истина, то на титульном листе декларации может быть только представитель - Юр.лицо,
//                 если Ложь - только Физ.лицо, если Неопределено, то может быть и Юр. и Физ. лицо.
//  ИФНС           - строка, номер ИФНС, обычно с титульного листа, по умолчанию будет считываться с титульного листа отчета.
//
// Возвращаемое значение:
//  Структура со всеми данными по представителю.
//  структура будет содержать данные с учетом справочника Регистрации в ИФНС и регистра сведений контактной информации.
//
Функция ПолучитьСведенияОПредставителе(Форма, Знач МожетБытьТолькоЮРЛицо = Неопределено, Знач ИФНС = Неопределено, КПП = Неопределено) Экспорт

	ДанныеКонтактнойИнформации = Новый Структура("ФИОУпПред, ИННУпПред, ТелУпПред, ВидУдЛичнУпПред, КодУдЛичнУпПред, СерияУдЛичнУпПред
	                                            |,НомерУдЛичнУпПред, ОрганВыданУдЛичнУпПред, ДатаУдЛичнУпПред, ДатаРождУпПред ,МестоРождУпПред
	                                            |,ПолУпПред, ИндексМЖУпПред, СубъектМЖУпПред, КодСубъектМЖУпПред, РайонМЖУпПред, ГородМЖУпПред
	                                            |,НПунктМЖУпПред, УлицаМЖУпПред, ДомМЖУпПред, КорпусМЖУпПред, КвартираМЖУпПред, ГраждУпПред");

	ДанныеКонтактнойИнформации = ПолучитьСведенияОбОрганизации(Форма.Организация, Форма.ДатаПодписи, "ФИОУпПред"
	                                                                                               + ",ИННУпПред"
	                                                                                               + ",ТелУпПред"
	                                                                                               + ",ВидУдЛичнУпПред"
	                                                                                               + ",КодУдЛичнУпПред"
	                                                                                               + ",СерияУдЛичнУпПред"
	                                                                                               + ",НомерУдЛичнУпПред"
	                                                                                               + ",ОрганВыданУдЛичнУпПред"
	                                                                                               + ",ДатаУдЛичнУпПред"
	                                                                                               + ",ДатаРождУпПред"
	                                                                                               + ",МестоРождУпПред"
	                                                                                               + ",ПолУпПред"
	                                                                                               + ",ИндексМЖУпПред"
	                                                                                               + ",СубъектМЖУпПред"
	                                                                                               + ",КодСубъектМЖУпПред"
	                                                                                               + ",РайонМЖУпПред"
	                                                                                               + ",ГородМЖУпПред"
	                                                                                               + ",НПунктМЖУпПред"
	                                                                                               + ",УлицаМЖУпПред"
	                                                                                               + ",ДомМЖУпПред"
	                                                                                               + ",КорпусМЖУпПред"
	                                                                                               + ",КвартираМЖУпПред"
	                                                                                               + ",ГраждУпПред");

	ДанныеКонтактнойИнформации.Вставить("ПредставительФЛ", Неопределено);
	Если НЕ ПустаяСтрока(ДанныеКонтактнойИнформации.ФИОУпПред) Тогда
		ДанныеКонтактнойИнформации.Вставить("ПредставительФЛ", Истина);
	КонецЕсли;
	ДанныеКонтактнойИнформации.Вставить("ДокументПредставителя", "");

	// Если ФНС не уазано явным образом, считаем его с титульного листа.
	Если ИФНС = Неопределено Тогда
		ИФНС = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КодИМНС");
	КонецЕсли;
	
	// Если КПП не уазан явным образом, считаем его с титульного листа.
	Если КПП = Неопределено Тогда
		КПП = роВернутьЗначениеПараметраСЛиста(Форма, "Титульный", "КПП1_");
	КонецЕсли;

	// Получим данные о представителе из справочника Регистрации ИФНС.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Форма.Организация);
	Запрос.УстановитьПараметр("КодИФНС", ИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
    Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	СправочникИФНС.Представитель,
	               |	СправочникИФНС.ДокументПредставителя
	               |ИЗ
	               |Справочник.РегистрацияВИФНС КАК СправочникИФНС
	               |ГДЕ
	               |СправочникИФНС.Владелец = &Владелец
	               | И СправочникИФНС.Код = &КодИФНС
				   | И СправочникИФНС.КПП = &КПП
                   | И СправочникИФНС.ПометкаУдаления = &ПометкаУдаления";

	СправочникИФНС = Запрос.Выполнить().Выгрузить();

	Если СправочникИФНС.Количество() = 0 Тогда
		Возврат ДанныеКонтактнойИнформации;
	КонецЕсли;

	Представитель = СправочникИФНС[0].Представитель;
	Если Представитель = Неопределено Тогда
		// В справочнике не заполнен представитель ни ФЛ ни ЮР.лицо
		Возврат ДанныеКонтактнойИнформации;
	КонецЕсли;

	Если ПредставительЯвляетсяФизЛицом(Представитель) Тогда
		
		// В случае, если представитель Физ. лицо, а в отчете только может быть Физ. лицо, тогда возвратим пустую структуру данных.
		Если МожетБытьТолькоЮРЛицо = Истина Тогда
			Возврат ДанныеКонтактнойИнформации;
		КонецЕсли;

		// Признак, что представитель ФИЗ. ЛИЦО.
		ДанныеКонтактнойИнформации.Вставить("ПредставительФЛ", Истина);

		// ФИО Уполномоченного представителя.
		ДанныеФЛ = ПолучитьФИОФизЛица(Представитель, Форма.ДатаПодписи);
		ДанныеКонтактнойИнформации.Вставить("ФИОУпПред", СокрЛП(СокрЛП(ДанныеФЛ.Фамилия) + " " + СокрЛП(ДанныеФЛ.Имя) + " " + СокрЛП(ДанныеФЛ.Отчество)));

		// ИНН
		ДанныеКонтактнойИнформации.Вставить("ИННУпПред", Представитель.ИНН);

		// Телефон Уполномоченного представителя.

		ДомашнийТелефонФизЛица = ?(СвойствоОпределено(Справочники.ВидыКонтактнойИнформации, "ТелефонФизЛицаДомашний"), Справочники.ВидыКонтактнойИнформации.ТелефонФизЛицаДомашний, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица);
		Данные = Новый Структура("Объект, Тип, Вид", Представитель, Перечисления.ТипыКонтактнойИнформации.Телефон, ДомашнийТелефонФизЛица);
		Результат2 = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);
		ДанныеКонтактнойИнформации.Вставить("ТелУпПред", "");
		Если Результат2 <> Неопределено Тогда
			ДанныеКонтактнойИнформации.Вставить("ТелУпПред", Результат2.Представление);
		КонецЕсли;

		Если Результат2 <> Неопределено Тогда
			Значение = Результат2.Представление;
		Иначе
			Значение = "";
		КонецЕсли;

		// ПАСПОРТНЫЕ ДАННЫЕ ПРЕДСТАВИТЕЛЯ.

		УдЛичн = ПолучитьУдЛичн(Представитель, Форма.ДатаПодписи);
		ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", "");
		ДанныеКонтактнойИнформации.Вставить("ВидУдЛичнУпПред", "");

		Если УдЛичн = Неопределено Тогда
			ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ВидУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ОрганВыданУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("СерияУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("НомерУдЛичнУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ДатаУдЛичнУпПред", "");
		Иначе

			Если УдЛичн.ДокументВид <> Справочники.ДокументыУдостоверяющиеЛичность.ПустаяСсылка() Тогда
				Если Метаданные.Справочники.ДокументыУдостоверяющиеЛичность.Реквизиты.Найти("КодИМНС") <> Неопределено Тогда
					ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", УдЛичн.ДокументВид.КодИМНС);
				Иначе
					ДанныеКонтактнойИнформации.Вставить("КодУдЛичнУпПред", "");
				КонецЕсли;
				ДанныеКонтактнойИнформации.Вставить("ВидУдЛичнУпПред", УдЛичн.ДокументВид.Наименование);
			КонецЕсли;

			ДанныеКонтактнойИнформации.Вставить("ОрганВыданУдЛичнУпПред", УдЛичн.ДокументКемВыдан);
			ДанныеКонтактнойИнформации.Вставить("СерияУдЛичнУпПред", УдЛичн.ДокументСерия);
			ДанныеКонтактнойИнформации.Вставить("НомерУдЛичнУпПред", УдЛичн.ДокументНомер);
			ДанныеКонтактнойИнформации.Вставить("ДатаУдЛичнУпПред", УдЛичн.ДокументДатаВыдачи);
		КонецЕсли;

		// ДАТА РОЖДЕНИЯ.
		ИдКонф = ИДКонфигурации();
		Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
			
			ДанныеКонтактнойИнформации.Вставить("ДатаРождУпПред", '00010101000000');
			ДанныеКонтактнойИнформации.Вставить("МестоРождУпПред", "");
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	ХарактеристикиКонтрагентов.ЗначениеХарактеристики,
			                      |	ХарактеристикиКонтрагентов.ВидХарактеристики
			                      |ИЗ
			                      |	РегистрСведений.ХарактеристикиКонтрагентов КАК ХарактеристикиКонтрагентов
			                      |ГДЕ
			                      |	ХарактеристикиКонтрагентов.Контрагент = &Контрагент
			                      |	И ХарактеристикиКонтрагентов.ВидХарактеристики В(&ВидХарактеристики)");
			Запрос.УстановитьПараметр("Контрагент", Представитель);
			
			ВидыХарактеристик = Новый Массив;
			ВидыХарактеристик.Добавить(ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.ДатаРождения);
			ВидыХарактеристик.Добавить(ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.МестоРождения);
			Запрос.УстановитьПараметр("ВидХарактеристики", ВидыХарактеристик);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ВидХарактеристики = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.ДатаРождения Тогда
					ДанныеКонтактнойИнформации.Вставить("ДатаРождУпПред", Выборка.ЗначениеХарактеристики);
				ИначеЕсли Выборка.ВидХарактеристики = ПланыВидовХарактеристик.ВидыХарактеристикКонтрагентов.МестоРождения Тогда
					ДанныеКонтактнойИнформации.Вставить("МестоРождУпПред", Выборка.ЗначениеХарактеристики);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			ДанныеКонтактнойИнформации.Вставить("ДатаРождУпПред", Представитель.ДатаРождения);
			ДанныеКонтактнойИнформации.Вставить("МестоРождУпПред", Представитель.МестоРождения);
		КонецЕсли;
		
		// ПОЛ
		Если Метаданные.Перечисления.Найти("ПолФизическихЛиц") <> Неопределено Тогда
			ИдКонф = ИДКонфигурации();
			Если ИДКонф = "ББУ" ИЛИ ИДКонф = "БГУ" Тогда
				Значение = 0;
			Иначе
				
				Если Представитель.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
					Значение = 2;
				ИначеЕсли Представитель.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
					Значение = 1;
				Иначе
					Значение = 0;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Значение = 0;
		КонецЕсли;
		ДанныеКонтактнойИнформации.Вставить("ПолУпПред", Значение);

		// АДРЕСАНАЯ ЧАСТЬ
		Данные = Новый Структура("Объект, Тип, Вид", Представитель, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
		Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

		Если Результат = Неопределено Или Результат.Количество() = 0 Тогда
			ДанныеКонтактнойИнформации.Вставить("ИндексМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("СубъектМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("КодСубъектМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("РайонМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ГородМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("НПунктМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("УлицаМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("ДомМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("КорпусМЖУпПред", "");
			ДанныеКонтактнойИнформации.Вставить("КвартираМЖУпПред", "");
		Иначе
			// ИНДЕКС М.Ж.
			ДанныеКонтактнойИнформации.Вставить("ИндексМЖУпПред", Результат.Поле1);
			ДанныеКонтактнойИнформации.Вставить("СубъектМЖУпПред", Результат.Поле2);
			ДанныеКонтактнойИнформации.Вставить("КодСубъектМЖУпПред", Формат(КодРегионаПоНазванию(Результат.Поле2), "ЧЦ=2; ЧВН="));
			ДанныеКонтактнойИнформации.Вставить("РайонМЖУпПред", Результат.Поле3);
			ДанныеКонтактнойИнформации.Вставить("ГородМЖУпПред", Результат.Поле4);
			ДанныеКонтактнойИнформации.Вставить("НПунктМЖУпПред", Результат.Поле5);
			ДанныеКонтактнойИнформации.Вставить("УлицаМЖУпПред", Результат.Поле6);
			ДанныеКонтактнойИнформации.Вставить("ДомМЖУпПред", Результат.Поле7);
			ДанныеКонтактнойИнформации.Вставить("КорпусМЖУпПред", Результат.Поле8);
			ДанныеКонтактнойИнформации.Вставить("КвартираМЖУпПред", Результат.Поле9);
		КонецЕсли;

		Возврат ДанныеКонтактнойИнформации;

	КонецЕсли; // Если представитель физ.лицо.

	Если НЕ ПредставительЯвляетсяФизЛицом(Представитель) И МожетБытьТолькоЮРЛицо = Ложь Тогда
		Возврат ДанныеКонтактнойИнформации;
	КонецЕсли;

КонецФункции // ПолучитьСведенияОПредставителе

// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ КАЛЕНДАРЯ

// Возвращает количество документов РегламентированныйОтчет в ИБ с учетом установленных критериев отбора.
//
// Параметры:
//	Нет.
//
// Вовращаемое значение:
//	Число - количество документов в ИБ с учетом установленных пользователей на форме параметров отбора.
//	
Функция ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ОрганизацияОтбор, КодИФНС, Периодичность) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", ОрганизацияОтбор);
	Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
			   	   |	И РегламентированныйОтчет.Организация = &Организация";
	Если НЕ ПустаяСтрока(КодИФНС) Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
				   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
	Если Периодичность = "Квартальная" Тогда
		Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал))";
	КонецЕсли;
	Если Периодичность = "Месячная" Тогда
		Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц))";
	КонецЕсли;
	
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции // ДокументыСУчетомКритериевОтбораКалендарь

// ОткрытьРегОтчет
//
Процедура ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ОрганизацияОтбор) Экспорт
	ПравоДоступаКОтчету = ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		Предупреждение("Недостаточно прав!");
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Предупреждение("Отчет не найден!");
		Возврат;
	КонецЕсли;

	Если НЕ ЭтоВнешнийОтчет(ИсточникОтчета) И Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ

		ВнутреннийОтчет = Документы[ИсточникОтчета];
		ВыбФормаОтчета  = ВнутреннийОтчет.ПолучитьФорму(Метаданные.Документы[ИсточникОтчета].ОсновнаяФормаОбъекта.Имя);
		ВыбФормаОтчета.РежимВыбора = Ложь;
		ВыбФормаОтчета.Открыть();
		Возврат;

	КонецЕсли;

	ТекОтчет = РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекФорма = ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;

	Попытка
		ТекФорма.Организация =  ОрганизацияОтбор;
	Исключение
	КонецПопытки;

	Попытка
		ТекФорма.мДатаНачалаПериодаОтчета = ДатаНач;
		ТекФорма.мДатаКонцаПериодаОтчета = ДатаКон;
	Исключение
	КонецПопытки;

	Если СвойствоОпределено(ТекФорма, "мПериодичность") Тогда
		Если Периодичность <> Неопределено Тогда
			ТекФорма.мПериодичность = Периодичность;
		КонецЕсли;
	КонецЕсли;

	ТекФорма.РежимВыбора = Ложь;
	ТекФорма.Открыть();

КонецПроцедуры // ОткрытьРегОтчет

// ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия
//
Процедура ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия(ВыбПользователь) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|Пользователь
	|, ПоследняяДатаДействия
	|, ИсточникОтчета
	|, ЗаПериодС
	|, ЗаПериодПо
	|, Организация
	|, ТипСообщения
	|, Состояние
	|, ФормаОтчета
	|, Периодичность
	|, Название
	|, Налогоплательщик
	|, ДобавитьКДате(ПоследняяДатаДействия, День, &ДниНапоминаний) Как СрокНачалаНапоминаний
	|, НарастающийИтог
	|, ДатаПоказа
	|ИЗ РегистрСведений.СобытияКалендаряБухгалтера
	|ГДЕ
	|Пользователь = &Пользователь
	|И &РабочаяДата >= ДобавитьКДате(ПоследняяДатаДействия, День, &ДниНапоминаний)
	|И Состояние = &Состояние
	|И ДатаПоказа <> &ДатаПоказа";

	КолВоДней = ЗначениеИнтервалаНапоминанийРегламентированнойОтчетности();
	Если КолВоДней = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекРабочаяДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	Запрос.УстановитьПараметр("Пользователь", ВыбПользователь);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСобытий.Запланировано);
	Запрос.УстановитьПараметр("ДниНапоминаний", (-1) * КолВоДней);
	Запрос.УстановитьПараметр("РабочаяДата", ТекРабочаяДата);
	Запрос.УстановитьПараметр("ДатаПоказа", ТекРабочаяДата);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();

	Если ТаблРезультат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для каждого Зап Из ТаблРезультат Цикл
		Запись = РегистрыСведений.СобытияКалендаряБухгалтера.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Запись, Зап);
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.ДатаПоказа = ТекРабочаяДата;
			Запись.Записать();
			Зап.ДатаПоказа = ТекРабочаяДата;
		КонецЕсли;
	КонецЦикла;

	ФормаНапоминания = Обработки.КалендарьБухгалтера.ПолучитьФорму("ФормаНапоминания");
	ФормаНапоминания.НачальноеЗначениеВыбора = ТаблРезультат;
	Если ФормаНапоминания.Открыта() Тогда
		ФормаНапоминания.Закрыть();
	КонецЕсли;
	ФормаНапоминания.Открыть();

КонецПроцедуры // ПроверитьНапоминанияПользователяКалендарьБухгалтераСобытия

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПОДДЕРЖКИ ВНЕШНИХ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

// Функция пытается сравнить объект (внешний регламентированный отчет) в памяти с объектом, 
// находящемся в соответствующем файле в текущем каталоге.
// Если объекты совпадают, функция загружает файл на диске в реквизит ВнешнийОтчетХранилище
// соответствующего элемента справочника РегламентированныеОтчеты.
// Параметры:
//       Объект - объект в памяти, который сравнивается с объектом на диске.
//	Возвращаемое значение:
//		 Булево - Истина, если объект загружен; Ложь в противном случае.
//
Функция ПроверкаРегистрацииПриОткрытииОсновнойФормыРегламентированногоОтчета(Объект)

	ИмяФайлаВнешнегоОтчета = Объект.ИспользуемоеИмяФайла;

	// пытаемся найти отчет данного вида в справочнике отчетов
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Объект.Метаданные().Имя);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// если в справочнике уже хранится внешний отчет, то сравниваем его с существующим
	Если НайденныйЭлемент.ВнешнийОтчетХранилище.Получить() <> Неопределено Тогда
		ВремФайлВнешнегоОтчета2 = ПолучитьИмяВременногоФайла();
		Попытка
			НайденныйЭлемент.ВнешнийОтчетХранилище.Получить().Записать(ВремФайлВнешнегоОтчета2);
			Сравнение = Новый СравнениеФайлов();
			Сравнение.ПервыйФайл = ИмяФайлаВнешнегоОтчета;
			Сравнение.ВторойФайл = ВремФайлВнешнегоОтчета2;
			Сравнение.СпособСравнения = СпособСравненияФайлов.Двоичное;
			Если Сравнение.Сравнить() Тогда
				Возврат Ложь;
			КонецЕсли;
			ТекстВопроса = "Отчет, который хранится в информационной базе, отличается от выбранного." + Символы.ПС + "Зарегистрировать выбранный отчет в информационной базе?";
		Исключение
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ТекстВопроса = "Зарегистрировать внешний регламентированный отчет в информационной базе?";
	КонецЕсли;
	
	// если загруженный и текущий отчеты отличаются, то спросим у пользователя, нужно ли регистрировать текущий
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// пытаемся зарегистрировать внешний отчет
	ОбъектНайденныйЭлемент = НайденныйЭлемент.ПолучитьОбъект();
	
	Попытка
		ОбъектНайденныйЭлемент.Заблокировать();
				
		Если НЕ ЗарегистрироватьВнешнийОтчет(ОбъектНайденныйЭлемент, Объект) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// пытаемся записать
		Попытка
			ОбъектНайденныйЭлемент.Записать();
		Исключение
			Предупреждение("Не удалось зарегистрировать выбранный отчет в информационной базе!");
			Возврат Ложь;
		КонецПопытки;
		
		
		ОбъектНайденныйЭлемент.Разблокировать();
		
	Исключение
		// Нельзя модифицировать данные объекта
		Сообщить("Данные отчета заблокированы в справочнике ""Регламентированные отчеты""");
		Предупреждение("Не удалось зарегистрировать выбранный отчет в информационной базе!");
		Возврат Ложь;
	КонецПопытки;
		
	// сообщаем пользователю
	Если ОтчетКэшировался(ОбъектНайденныйЭлемент) Тогда
		Предупреждение("Внешний отчет успешно зарегистрирован в информационной базе.
			|ИЗМЕНЕНИЯ ВСТУПЯТ В СИЛУ ТОЛЬКО ПОСЛЕ ПОВТОРНОГО ЗАПУСКА ПРОГРАММЫ!
			|
			|Запустите программу повторно и воспользуйтесь зарегистрированным в информационной базе внешним отчетом.");
		Возврат Истина;
	Иначе
		Предупреждение("Внешний отчет успешно зарегистрирован в информационной базе.");
	КонецЕсли;

	// открываем основную форму зарегистрированного отчета
	ТекОтчет = РеглОтчеты(Объект.Метаданные().Имя);
	ТекФорма = ФормаРеглОтчета(Объект.Метаданные().Имя);
	ТекФорма.РежимВыбора = Ложь;
	ТекФорма.Открыть();
	
	Возврат Истина;

КонецФункции

Функция ЗарегистрироватьВнешнийОтчет(ОбъектЭлемент, Отчет) Экспорт
	
	// создаем объект из выбранного внешнего отчета
	Состояние("Проверка внешнего отчета...");
	
	Если ТипЗнч(Отчет) = Тип("Строка") Тогда
		Попытка
			ОбъектОтчет = ВнешниеОтчеты.Создать(Отчет);
		Исключение
			Предупреждение("Ошибка при загрузке внешнего отчета:
							|
							|" + ИнформацияОбОшибке().Описание);
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ОбъектОтчет = Отчет;
	КонецЕсли;
	
	// заполняем свойства внешнего отчета
	ПолнаяВерсияВнешнегоОтчета			= ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет);
	СвойстваПолнойВерсии				= РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсияВнешнегоОтчета);
	
	ИДКонфигурацииОтчета				= СвойстваПолнойВерсии.ИДКонфигурации;
	ВерсияКонфигурацииВнешнегоОтчета	= СвойстваПолнойВерсии.ВерсияКонфигурации;
	КраткаяВерсияВнешнегоОтчета			= СвойстваПолнойВерсии.КраткаяВерсия;
	
	// проверка на соответствие идентификатора конфигурации в отчете идентификатору текущей конфигурации
	Если ЗначениеЗаполнено(ИДКонфигурацииОтчета)
	И ВРЕГ(ИДКонфигурацииОтчета) <> ВРЕГ(ИДКонфигурации())
	И ВРЕГ(ИДКонфигурацииОтчета) <> ВРЕГ(Метаданные.Имя) Тогда
		Ответ = Вопрос("ВНИМАНИЕ!
						|
						|Отчет не предназначен для использования с текущей конфигурацией!
						|
						|Продолжить действие (не рекомендуется)?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверка на соответствие версии в отчете версии текущей конфигурации
	Если ЗначениеЗаполнено(ВерсияКонфигурацииВнешнегоОтчета) И ВерсияКонфигурацииВнешнегоОтчета <> Метаданные.Версия Тогда
		Ответ = Вопрос("ВНИМАНИЕ!
						|
						|Отчет не предназначен для использования с текущей версией конфигурации!
						|
						|Версия текущей конфигурации: " + Метаданные.Версия + "
						|Отчет предназначен для использования с версией: " + ВерсияКонфигурацииВнешнегоОтчета + "
						|
						|Продолжить действие (не рекомендуется)?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// проверка на соответствие имени метаданных отчета свойству ИсточникОтчета текущего элемента
	МетаданныеОтчета = ОбъектОтчет.Метаданные();
	Если НЕ ПустаяСтрока(ОбъектЭлемент.ИсточникОтчета) И МетаданныеОтчета.Имя <> ОбъектЭлемент.ИсточникОтчета Тогда
		Ответ = Вопрос("ВНИМАНИЕ!
						|
						|Обнаружено несоответствие между текущим элементом справочника и выбранным отчетом!
						|
						|Продолжить действие (не рекомендуется)?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// сравнение версий выбранного и хранимого отчетов
	ВерсияХранимогоОтчета = СокрЛП(ОбъектЭлемент.Ссылка.ВнешнийОтчетВерсия);
	Если ЗначениеЗаполнено(ВерсияХранимогоОтчета) И ЗначениеЗаполнено(КраткаяВерсияВнешнегоОтчета) Тогда
		РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов = СравнитьКраткиеВерсииОтчетов(ВерсияХранимогоОтчета, КраткаяВерсияВнешнегоОтчета);
		Если РезультатСравнениеВерсийХранимогоИЗагружаемогоОтчетов = -1 Тогда // если загружаемый отчет старее хранимого
			Ответ = Вопрос("ВНИМАНИЕ!
						|
						|В информационной базе уже зарегистрирован аналогичный отчет более поздней версии.
						|
						|Версия зарегистрированного отчета: " + ВерсияХранимогоОтчета + "
						|Версия выбранного отчета: " + КраткаяВерсияВнешнегоОтчета + "
						|
						|Использование более поздней версии предпочтительнее.
						|
						|Продолжить действие (не рекомендуется)?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// загружаем внешний отчет в справочник
	Состояние("Загрузка внешнего отчета...");
	Попытка
		ОбъектЭлемент.ВнешнийОтчетХранилище = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ОбъектОтчет.ИспользуемоеИмяФайла), Новый СжатиеДанных(9));
	Исключение
		Предупреждение("Не удалось загрузить внешний отчет:
						|
						|" + ИнформацияОбОшибке().Описание);
		Возврат Ложь;
	КонецПопытки;
	
	ИмяМетаданныхОтчета = МетаданныеОтчета.Имя;
	СинонимМетаданныхОтчета = МетаданныеОтчета.Синоним;
	КомментарийКМетаданнымОтчета = МетаданныеОтчета.Комментарий;
	
	Если ПустаяСтрока(ОбъектЭлемент.ИсточникОтчета) Тогда
		ОбъектЭлемент.ИсточникОтчета = ИмяМетаданныхОтчета;
	КонецЕсли;
	
	Если ПустаяСтрока(ОбъектЭлемент.Наименование) Тогда
		ОбъектЭлемент.Наименование = ?(ЗначениеЗаполнено(СинонимМетаданныхОтчета), СинонимМетаданныхОтчета, ОбъектЭлемент.ИсточникОтчета);
	КонецЕсли;
	
	Если ПустаяСтрока(ОбъектЭлемент.Описание) И ЗначениеЗаполнено(КомментарийКМетаданнымОтчета) И КомментарийКМетаданнымОтчета <> МетаданныеОтчета.Синоним Тогда
		ОбъектЭлемент.Описание = КомментарийКМетаданнымОтчета;
	КонецЕсли;
	
	ОбъектЭлемент.ВнешнийОтчетИспользовать = Истина;
	ОбъектЭлемент.ВнешнийОтчетВерсия = КраткаяВерсияВнешнегоОтчета;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВерсиюРегламентированногоОтчета(ОбъектОтчет)
	
	Если СвойствоОпределено(ОбъектОтчет, "мВерсияОтчета") Тогда
		Возврат ОбъектОтчет.мВерсияОтчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция РазложитьПолнуюВерсиюРегламентированногоОтчета(ПолнаяВерсия)
	
	Результат = Новый Структура("ИДКонфигурации, ВерсияКонфигурации, КраткаяВерсия, Подверсия");
	
	Если ЗначениеЗаполнено(ПолнаяВерсия) Тогда
		ВхождениеПробела = Найти(ПолнаяВерсия, " ");
		Если ВхождениеПробела <> 0 Тогда
			Результат.ИДКонфигурации = СокрЛП(Лев(ПолнаяВерсия, ВхождениеПробела - 1));
			Результат.КраткаяВерсия = СокрЛП(Сред(ПолнаяВерсия, ВхождениеПробела + 1));
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.КраткаяВерсия) Тогда
		
		КраткаяВерсия = Результат.КраткаяВерсия;
		СтрДлинаКраткаяВерсия = СтрДлина(КраткаяВерсия);
		Для ОбратныйИндекс = 1 По СтрДлинаКраткаяВерсия Цикл
			Инд = СтрДлинаКраткаяВерсия - ОбратныйИндекс + 1;
			ТекСимв = Сред(КраткаяВерсия, Инд, 1);
			Если ТекСимв = "." Тогда
				Результат.ВерсияКонфигурации = СокрЛП(Лев(КраткаяВерсия, Инд - 1));
				Результат.Подверсия = СокрЛП(Сред(КраткаяВерсия, Инд + 1));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СравнитьКраткиеВерсииОтчетов(Версия1, Версия2)
	
	// раскладываем версию 1 и преобразуем составляющие к числам
	ЧастиВерсии1 = РазобратьСтрокуВМассивПоРазделителю(Версия1, ".");
	ЧислоСоставляющихВерсии1 = ЧастиВерсии1.Количество();
	Для Инд = 0 По ЧислоСоставляющихВерсии1 - 1 Цикл
		ЧастьВерсии1 = ЧастиВерсии1[Инд];
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ЧастьВерсии1) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЧастиВерсии1[Инд] = Число(ЧастьВерсии1);
	КонецЦикла;
	
	// раскладываем версию 2 и преобразуем составляющие к числам
	ЧастиВерсии2 = РазобратьСтрокуВМассивПоРазделителю(Версия2, ".");
	ЧислоСоставляющихВерсии2 = ЧастиВерсии1.Количество();
	Для Инд = 0 По ЧислоСоставляющихВерсии2 - 1 Цикл
		ЧастьВерсии2 = ЧастиВерсии2[Инд];
		Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ЧастьВерсии2) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ЧастиВерсии2[Инд] = Число(ЧастьВерсии2);
	КонецЦикла;
	
	// дополняем массив составляющих нулями, уравнивая число составляющих первой и второй версий
	Если ЧислоСоставляющихВерсии1 > ЧислоСоставляющихВерсии2 Тогда
		Для Инд = ЧислоСоставляющихВерсии2 + 1 По ЧислоСоставляющихВерсии1 Цикл
			ЧастиВерсии2.Добавить(0);
		КонецЦикла;
	ИначеЕсли ЧислоСоставляющихВерсии2 > ЧислоСоставляющихВерсии1 Тогда
		Для Инд = ЧислоСоставляющихВерсии1 + 1 По ЧислоСоставляющихВерсии2 Цикл
			ЧастиВерсии1.Добавить(0);
		КонецЦикла;
	КонецЕсли;
	
	// сравниваем по каждому составляющему
	Для Инд = 0 По ЧислоСоставляющихВерсии1 - 1 Цикл
		ЧастьВерсии1 = ЧастиВерсии1[Инд];
		ЧастьВерсии2 = ЧастиВерсии2[Инд];
		Если ЧастьВерсии1 > ЧастьВерсии2 Тогда
			Возврат -1;
		ИначеЕсли ЧастьВерсии1 < ЧастьВерсии2 Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция РазобратьСтрокуВМассивПоРазделителю(Знач Стр, СтрРазделитель = ".") Экспорт
	
	Результат = Новый Массив;
	
	ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	Пока ВхождениеРазделителя <> 0 Цикл
		ЧастьДоРазделителя = СокрЛП(Лев(Стр, ВхождениеРазделителя - 1));
		Результат.Добавить(ЧастьДоРазделителя);
		Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
		ВхождениеРазделителя = Найти(Стр, СтрРазделитель);
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(Стр) Тогда
		Результат.Добавить(СокрЛП(Стр));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Сравнивает "версию" данных, хранящихся в экземпляре документа РегламентированныйОтчет с 
// "версией" отчета, с помощью которого эти данные пытаются открыть.
// Параметры:
// 		ВерсияФормы - "версия" данных.
//		мВерсияФормы = "версия" отчета.
// Возвращаемое значение:
//		Булево - Истина, если отчет с версией мВерсияФормы способен работать с данными версии ВерсияФормы.
//				 Ложь, если отчет с версией мВерсияФормы НЕ способен работать с данными версии ВерсияФормы.
Функция ПродолжитьПриНесоответствииВерсийФорм(Знач ВерсияФормы, Знач мВерсияФормы)
	
	ПервыйСлеш = Найти(ВерсияФормы, "/");
	ВторойСлеш = Найти(Лев(ВерсияФормы, ПервыйСлеш - 1) + " " + Сред(ВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодВерсияФормы = Сред(ВерсияФормы, ВторойСлеш + 1);
	МесяцВерсияФормы = Сред(ВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньВерсияФормы = Сред(ВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодВерсияФормы) = 2 Тогда
		ГодВерсияФормы = "20" + ГодВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцВерсияФормы) = 1 Тогда
		МесяцВерсияФормы = "0" + МесяцВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньВерсияФормы) = 1 Тогда
		ДеньВерсияФормы = "0" + ДеньВерсияФормы;
	КонецЕсли;
	ДатаВерсияФормы = Дата(ГодВерсияФормы + МесяцВерсияФормы + ДеньВерсияФормы);
	
	ПервыйСлеш = Найти(мВерсияФормы, "/");
	ВторойСлеш = Найти(Лев(мВерсияФормы, ПервыйСлеш - 1) + " " + Сред(мВерсияФормы, ПервыйСлеш + 1), "/");
	Если ПервыйСлеш = Неопределено ИЛИ ВторойСлеш = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	ГодмВерсияФормы = Сред(мВерсияФормы, ВторойСлеш + 1);
	МесяцмВерсияФормы = Сред(мВерсияФормы, ПервыйСлеш + 1, ВторойСлеш - ПервыйСлеш - 1);
	ДеньмВерсияФормы = Сред(мВерсияФормы, 1, ПервыйСлеш - 1);
	Если СтрДлина(ГодмВерсияФормы) = 2 Тогда
		ГодмВерсияФормы = "20" + ГодмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(МесяцмВерсияФормы) = 1 Тогда
		МесяцмВерсияФормы = "0" + МесяцмВерсияФормы;
	КонецЕсли;
	Если СтрДлина(ДеньмВерсияФормы) = 1 Тогда
		ДеньмВерсияФормы = "0" + ДеньмВерсияФормы;
	КонецЕсли;
	ДатамВерсияФормы = Дата(ГодмВерсияФормы + МесяцмВерсияФормы + ДеньмВерсияФормы);
	
	Если ДатамВерсияФормы < ДатаВерсияФормы Тогда
		Предупреждение("Сохраненные данные не могут быть открыты текущей версией отчета!" + Символы.ПС + 
						"Версия отчета - от " + Формат(ДатамВерсияФормы, "ДЛФ=DD; ДП='Пустая дата'") + Символы.ПС + 
						"Версия данных - от " + Формат(ДатаВерсияФормы, "ДЛФ=DD; ДП='Пустая дата'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Пытается заблокировать документ. В случае неудачной попытки выдает предупреждение.
// Параметры:
//		мСохраненныйДок - объект ДокументОбъект, блокировку которого следует выполнить.
// Возвращаемое значение:
// 		Булево - Истина - объект удалось заблокировать,
// 				 Ложь - объект заблокировать не удалось.
Функция ЗаблокироватьДокумент(мСохраненныйДок)
	
	Попытка
		мСохраненныйДок.Заблокировать();
		Возврат Истина;
	Исключение
		Предупреждение("Не удается заблокировать документ!" + Символы.ПС + "Возможно, документ уже открыт другим пользователем!");
		Возврат Ложь;
	Конецпопытки;
			
КонецФункции

// Показывает или скрывает (в зависимости от вида отчета) элемент формы, сигнализирующий пользователю
// о том, что текущая форма принадлежит внешнему отчету.
// Параметры:
//		Форма - объект Форма.
Процедура ДобавитьНадписьВнешнийОтчет(Форма) Экспорт
	
	ИндикаторВнешнегоОтчета = Форма.ЭлементыФормы.Найти("_ИндикаторВнешнегоОтчета");
	Если ИндикаторВнешнегоОтчета <> Неопределено Тогда
		ИндикаторВнешнегоОтчета.Видимость = ОтчетЯвляетсяВнешним(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ОтчетЯвляетсяВнешним(Форма)
	
	Возврат НЕ Метаданные.Отчеты.Содержит(Форма.ЭтотОбъект.Метаданные());
	
КонецФункции

// Определяет кэшировалась ли информация для заданного элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
// 		Булево - Истина - информация кэшировалась,
// 				 Ложь - в противном случае.
Функция ОтчетКэшировался(РеглОтч) Экспорт
	
	Если ПараметрыВнешнихРегламентированныхОтчетов = Неопределено Тогда
		ПараметрыВнешнихРегламентированныхОтчетов = Новый Соответствие;
	КонецЕсли;
	Возврат (ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета) <> Неопределено);
	
КонецФункции

Функция ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать,
	                      |	РегламентированныеОтчеты.ИсточникОтчета,
	                      |	ВЫБОР
	                      |		КОГДА РегламентированныеОтчеты.ВнешнийОтчетИспользовать
	                      |			ТОГДА РегламентированныеОтчеты.ВнешнийОтчетХранилище
	                      |		ИНАЧЕ NULL
	                      |	КОНЕЦ КАК ВнешнийОтчетХранилище
	                      |ИЗ
	                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	                      |ГДЕ
	                      |	РегламентированныеОтчеты.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", РеглОтч);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ПризнакИспользованияВнешнегоОтчета = Выборка.ВнешнийОтчетИспользовать;
	СтруктураПараметровОтчета = Новый Структура("Признак", ПризнакИспользованияВнешнегоОтчета);
	Если ПризнакИспользованияВнешнегоОтчета Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		Выборка.ВнешнийОтчетХранилище.Получить().Записать(ВременныйФайл);
		СтруктураПараметровОтчета.Вставить("Файл", ВременныйФайл);
	КонецЕсли;
	ПараметрыВнешнихРегламентированныхОтчетов.Вставить(Выборка.ИсточникОтчета, СтруктураПараметровОтчета);
	Возврат СтруктураПараметровОтчета;
	
КонецФункции

// Возвращает двоичные данные с файлом - внешним отчетом с учетом кэша (реквизит ВнешнийОтчетХранилище), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Содержимое реквизита ВнешнийОтчетХранилище элемента справочника с учетом кэша.
Функция ФайлОтчетаСУчетомКэша(РеглОтч, НеЗапоминатьВКэше = Ложь)
	Перем ПараметрыОтчета;
	
	Если ПараметрыВнешнихРегламентированныхОтчетов = Неопределено Тогда
		ПараметрыВнешнихРегламентированныхОтчетов = Новый Соответствие;
	КонецЕсли;
	ПараметрыОтчета = ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета);
	Если ПараметрыОтчета <> Неопределено Тогда
		Возврат ПараметрыОтчета.Файл;
	Иначе
		Если НеЗапоминатьВКэше Тогда
			ВнешнийОтчет = РеглОтч.ВнешнийОтчетХранилище.Получить();
			ВременныйФайл = ПолучитьИмяВременногоФайла();
			ВнешнийОтчет.Записать(ВременныйФайл);
			Возврат ВременныйФайл;
		Иначе
			Возврат ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч).Файл;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает признак использования внешнего отчета с учетом кэша (реквизит ВнешнийОтчетИспользовать), 
// для переданного в качестве параметра элемента справочника РегламентированныеОтчеты.
// Параметры:
//		РеглОтч - ссылка на элемент справочника РегламентированныеОтчеты.
// Возвращаемое значение:
//		Признак использования внешнего отчета для заданного элемента справочника с учетом кэша.
Функция ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(РеглОтч, НеЗапоминатьВКэше = Ложь)
	Перем ПараметрыОтчета;
	
	Если ПараметрыВнешнихРегламентированныхОтчетов = Неопределено Тогда
		ПараметрыВнешнихРегламентированныхОтчетов = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыОтчета = ПараметрыВнешнихРегламентированныхОтчетов.Получить(РеглОтч.ИсточникОтчета);
	Если ПараметрыОтчета <> Неопределено Тогда
		Возврат ПараметрыОтчета.Признак;
	Иначе
		Если НеЗапоминатьВКэше Тогда
			Возврат РеглОтч.ВнешнийОтчетИспользовать;
		Иначе
			Возврат ЗакэшироватьСтруктуруОписанияОтчета(РеглОтч).Признак;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Создает и возвращает ссылку на объект - регламентированный отчет, соответствующий переданному 
// в качестве параметра наименованию. При создании объекта учитывается информация в кэше.
// Параметры:
//		Наим - строка-идентификатор регламентированного отчета.
//		СоздаватьИНеЗапоминать - признак того, что созданный объект не оставить след в кэше.
// Возвращаемое значение:
//		Отчет или ВнешняяОбработка - созданный объект. В случае неудачи возвращается Неопределено.
Функция РеглОтчеты(Наим, НеЗапоминатьВКэше = Ложь) Экспорт
	Перем ВременныйФайл;
	Перем ПараметрыОтчета;
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент, НеЗапоминатьВКэше) ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			Возврат Документы[Наим];
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим];
		Иначе
			Сообщить("Не найден отчет " + СокрП(Наим) + "!", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе // используется внешний отчет
		Попытка
			ВременныйФайл = ФайлОтчетаСУчетомКэша(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.Создать(ВременныйФайл);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			Возврат ВнешнийОтчет;
		Исключение
			Сообщить("Не удалось запустить внешний отчет " + СокрП(Наим) + "!", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		Конецпопытки;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Создает и возвращает ссылку на форму регламентированного отчета, соответствующего переданному 
// в качестве параметра наименованию. При получении формы учитывается информация в кэше.
// Параметры:
//		Наим - строка-идентификатор регламентированного отчета.
//		Выбраннаяформа - строка - имя формы.
//		Владелец - владелец формы. Форма или элемент управления.
//		КлючУникальности - ключ, значение которого будет использовано для поиска уже открытых форм.
// Возвращаемое значение:
//		Форма - созданный объект. В случае неудачи возвращается Неопределено.
Функция ФормаРеглОтчета(Наим, ВыбраннаяФорма = Неопределено, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	Перем ВременныйФайл;
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент) ИЛИ НайденныйЭлемент.ВнешнийОтчетХранилище = Неопределено Тогда // используется внутренний отчет
		Если Метаданные.Документы.Найти(Наим) <> Неопределено Тогда
			Возврат Документы[Наим].ПолучитьФорму(ВыбраннаяФорма, Владелец, КлючУникальности);
		ИначеЕсли Метаданные.Отчеты.Найти(Наим) <> Неопределено Тогда
			Возврат Отчеты[Наим].ПолучитьФорму(ВыбраннаяФорма, Владелец, КлючУникальности);
		Иначе
			Сообщить("Не найден отчет " + СокрП(Наим) + "!", СтатусСообщения.ОченьВажное);
			Возврат Неопределено;
		КонецЕсли; 
	Иначе // используется внешний отчет
		Попытка
			ВременныйФайл = ФайлОтчетаСУчетомКэша(НайденныйЭлемент);
			ВнешнийОтчет = ВнешниеОтчеты.ПолучитьФорму(ВременныйФайл, ВыбраннаяФорма, Владелец, КлючУникальности);
			Попытка
				ВнешнийОтчет.мПолноеИмяФайлаВнешнейОбработки = ВременныйФайл;
			Исключение
			КонецПопытки;
			ДобавитьНадписьВнешнийОтчет(ВнешнийОтчет);
			Возврат ВнешнийОтчет;
		Исключение
			Возврат Неопределено;
		Конецпопытки;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

// Определяет, с учетом кэша, является ли отчет, заданный строкой-идентификатором Наим, внешним.
// Параметры:
//		Наим - строка-идентификатор отчета.
// ВозвращаемоеЗначение:
//		Булево - Истина, если для заданной строки-идентификатора используется внешний отчет.
//				 Ложь - в противном случае.
//				 Неопределено - информация по отчету, заданному строкой-идентификатором 
//  			 отсутствует в справочнике РегламентированныеОтчеты.
Функция ЭтоВнешнийОтчет(Наим) Экспорт
	
	НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Наим);
	Если НайденныйЭлемент.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ПризнакИспользованияВнешнегоОтчетаСУчетомКэша(НайденныйЭлемент);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

// Событие возникает перед открытием основной формы регламентированного отчета.
// В процедуре инициализируются стандартные переменные отчета. Выполняются специфические для
// внешних регламентированных отчетов действия, в случае если отчет внешний.
// Параметры:
//		Форма - основная форма отчета.
//		Отказ - признак отказа от открытия формы.
//		СтандартнаяОбработка - признак стандартной обработки открытия формы.
Процедура ПередОткрытиемОсновнойФормыРегламентиованногоОтчета(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ОтчетЯвляетсяВнешним(Форма) И Форма.мПолноеИмяФайлаВнешнейОбработки = Неопределено Тогда
		Если ПроверкаРегистрацииПриОткрытииОсновнойФормыРегламентированногоОтчета(Форма.ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если Форма.мПолноеИмяФайлаВнешнейОбработки = Неопределено Тогда
			Предупреждение("Внимание, отчет не зарегистрирован! Функция сохранения будет недоступна!");
			Форма.мЗаписьЗапрещена = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// онлайн-проверка отчета на возможность использования
	Если НЕ ПроверкаОнлайнБлокировки(Форма.ЭтотОбъект) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Если Форма.ВладелецФормы <> Неопределено Тогда
		Если Не Форма.ВладелецФормы.ЭтоНовый() Тогда
			
			// При восстановлении сохраненных данных сразу открываем
			// нужную форму отчета, минуя основную форму.
			Отказ = Истина;

			Форма.мСохраненныйДок = Форма.ВладелецФормы.ДокументОбъект;
			
			// определяем границы периода построения отчета
			Форма.мДатаНачалаПериодаОтчета = НачалоДня(Форма.мСохраненныйДок.ДатаНачала);
			Форма.мДатаКонцаПериодаОтчета  = КонецДня(Форма.мСохраненныйДок.ДатаОкончания);
			
			// в некоторых отчетах (формы баланса, например) переменная мПериодичность не определена
			Попытка
				Форма.мПериодичность = Форма.мСохраненныйДок.Периодичность;
			Исключение
			КонецПопытки;

			// по реквизиту ВыбраннаяФорма документа определяем,
			// какую форму следует открыть
			ВыбраннаяФорма = Форма.ВладелецФормы.ВыбраннаяФорма;
			
			//УжеОткрытаяФорма = Отчеты[ЭтотОбъект.Метаданные().Имя].ПолучитьФорму(?(ПустаяСтрока(ВыбраннаяФорма), ПолучитьФормуДляПериода(мСохраненныйДок.ДатаОкончания), СокрЛП(ВыбраннаяФорма)), , мСохраненныйДок.Ссылка);
			УжеОткрытаяФорма = ФормаРеглОтчета(Форма.ЭтотОбъект.Метаданные().Имя, СокрЛП(ВыбраннаяФорма), , Форма.мСохраненныйДок.Ссылка);
			Если УжеОткрытаяФорма.Открыта() И УжеОткрытаяФорма.мСохраненныйДок.Ссылка = Форма.мСохраненныйДок.Ссылка Тогда
				УжеОткрытаяФорма.Активизировать();
				Возврат;
			КонецЕсли;
			
			Если НЕ ЗаблокироватьДокумент(Форма.мСохраненныйДок) Тогда
				Возврат;
			КонецЕсли;
			
			Если Форма.ЭтотОбъект.Метаданные().Формы.Найти(СокрП(ВыбраннаяФорма)) <> Неопределено Тогда
				ВыбФормаОтчета = Форма.ПолучитьФорму(СокрП(ВыбраннаяФорма), , Форма.мСохраненныйДок.Ссылка);
			Иначе
				// Если не удалось найти форму с таким названием (могла быть переименована),
				// то по умолчанию выдаем текущую (действующую) форму
				ВыбраннаяФорма = Форма.мТаблицаФормОтчета[0].ФормаОтчета;
				ВыбФормаОтчета = Форма.ПолучитьФорму(ВыбраннаяФорма, , Форма.мСохраненныйДок.Ссылка);
			КонецЕсли;
			
			// Попытка получения переменной мВерсияФормы сохраненного документа для сравнения
			// с аналогичной переменной объекта отчет.
			Попытка
				ВерсияФормыДанных = Форма.мСохраненныйДок.ДанныеОтчета.Получить().ВерсияФормы;
				Если НЕ ПродолжитьПриНесоответствииВерсийФорм(ВерсияФормыДанных, ВыбФормаОтчета.мВерсияФормы) Тогда
					Возврат;
				КонецЕсли;
			Исключение
			Конецпопытки;
			
			Форма.мВыбраннаяФорма = ВыбраннаяФорма;

			ДобавитьНадписьВнешнийОтчет(ВыбФормаОтчета);
			ВыбФормаОтчета.РежимВыбора = Ложь;
			ВыбФормаОтчета.ЗакрыватьПриЗакрытииВладельца = Ложь;
			ВыбФормаОтчета.Открыть();

		ИначеЕсли Форма.ВладелецФормы.мСкопированаФорма <> Неопределено Тогда
			// Новый документ РегламентированныйОтчет был получен
			// методом копирования имеющегося.
			// Переменной мСохраненныйДок присвоим текущий документ
			Форма.мСохраненныйДок   = Форма.ВладелецФормы.ДокументОбъект;
			Форма.мСкопированаФорма = Форма.ВладелецФормы.мСкопированаФорма;

			Форма.Организация       = Форма.ВладелецФормы.Организация;
			// Скопируем периодичность.
			Если СвойствоОпределено(Форма.ВладелецФормы, "Периодичность") Тогда
				Если СвойствоОпределено(Форма, "мПериодичность") Тогда
					Форма.мПериодичность = Форма.ВладелецФормы.Периодичность;
				КонецЕсли;
			КонецЕсли;
			// Скопируем даты начала и окончания периода отчета.
			Если СвойствоОпределено(Форма.ВладелецФормы, "ДатаНачала") Тогда
				Форма.мДатаНачалаПериодаОтчета = Форма.ВладелецФормы.ДатаНачала;
			КонецЕсли;
			Если СвойствоОпределено(Форма.ВладелецФормы, "ДатаОкончания") Тогда
				Форма.мДатаКонцаПериодаОтчета = КонецДня(Форма.ВладелецФормы.ДатаОкончания);
			КонецЕсли;

			Если НЕ ЗаблокироватьДокумент(Форма.мСохраненныйДок) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
	Иначе

	КонецЕсли;
	
КонецПроцедуры

// ОперацииПриВосстановленииРегламентированногоОтчета
// Процедура вызывается из процедуры ВосстановитьСохраненныеДанные
//
Процедура ОперацииПриВосстановленииРегламентированногоОтчета(Форма) Экспорт

	Форма.мВариант = Форма.мСохраненныйДок.Вид;
	Если Форма.мВариант = Неопределено Тогда
		Форма.мВариант = 0;
	КонецЕсли;

	Если Форма.мВариант = 0 Тогда
		Форма.ВидДокумента = 0;
		Форма.ЭлементыФормы.НомерКорректировки.Доступность = Ложь;
	Иначе
		Форма.ВидДокумента = 1;
		Форма.ЭлементыФормы.НомерКорректировки.Доступность = Истина;
		Форма.НомерКорректировки = Форма.мВариант;
	КонецЕсли;

КонецПроцедуры // ОперацииПриВосстановленииРегламентированногоОтчета

// Прячет картинку-индикатор процесса сохранения с формы регламентированного отчета.
//
// Параметры:
//	Форма - форма с которой следует скрть картинку-индикатор.
//
Процедура СкрытьКартинкуСохранение(Форма) Экспорт
	
	КартинкаСохранение = Форма.ЭлементыФормы.Найти("КартинкаСохранение");
	Если КартинкаСохранение <> Неопределено Тогда
	    КартинкаСохранение.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Событие возникает после записи из регалментированного отчета информации в экземпляр документа
// РегламентированныйОтчет.
// Параметры:
// 		Форма - форма регламентированного отчета, из которой происходила запись в документ.
Процедура ПослеЗаписиРегламентированногоОтчета(Форма, КОПолучатель = Неопределено) Экспорт
	
	ЗаблокироватьДокумент(Форма.мСохраненныйДок);
	СкрытьКартинкуСохранение(Форма);
	Форма.мСкопированаФорма = Неопределено;
	
	Попытка
		
		ЗаписатьСтатусОтчета(Форма.мСохраненныйДок.Ссылка, Форма.ЭлементыФормы.Статус.Значение);
		ОбновитьСтатусВФормеРегламентированногоОтчета(Форма);
		
		Если КонтекстЭДО <> Неопределено Тогда
			Если КОПолучатель = "ПФР" Тогда
				КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчетеПФР(Форма);
			Иначе
				КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчете(Форма);
			КонецЕсли;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Попытка
		Если Форма.мЗаписываетсяНовыйДокумент = Истина Тогда
			Оповестить("Позиционирование в списке отчетов", Форма.мСохраненныйДок.Ссылка);
		КонецЕсли;
	Исключение
	Конецпопытки;
	
КонецПроцедуры

// Определяет существуют ли документы РегламентированныйОтчет, совпадающие по ключевым реквизитам
// с редактируемым.
//
// Параметры:
//	Форма - форма, в которой редактируется текущий документ.
//	КодИФНС - код ИФНС, в которой 
//
// Возвращаемое значение:
//	Булево: Истина, если существует документ в аналогичными реквизитами;
//			Ложь - в противном случае.
//
Функция СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС, КПП = "")
	
	Попытка
		Вариант = Форма.ВидДокумента*Форма.НомерКорректировки;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("мСохраненныйДок", ?(Форма.мСохраненныйДок = Неопределено, Неопределено, Форма.мСохраненныйДок.Ссылка));
	Запрос.УстановитьПараметр("ИсточникОтчета", Форма.ЭтотОбъект.Метаданные().Имя);
	Запрос.УстановитьПараметр("Организация", Форма.Организация);
	Запрос.УстановитьПараметр("ДатаНачалаНач", НачалоДня(Форма.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(Форма.мДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаНач", НачалоДня(Форма.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаКонцаКон", КонецДня(Форма.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	Запрос.УстановитьПараметр("КПП", КПП);
	Запрос.УстановитьПараметр("Вариант", Вариант);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КОЛИЧЕСТВО(РегламентированныйОтчет.Ссылка)
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.Ссылка <> &мСохраненныйДок
	               |	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация
	               |	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачалаНач И &ДатаНачалаКон
	               |	И РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаКонцаНач И &ДатаКонцаКон
	               |	И РегламентированныйОтчет.Вид = &Вариант";
				   
	Если КодИФНС <> "не применимо" Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС
				   |	И РегламентированныйОтчет.КПП = &КПП";
	КонецЕсли;
			   
	РезультатЗапроса = ЗАпрос.Выполнить().Выгрузить();			   
	Если РезультатЗапроса.Количество() = 0 ИЛИ РезультатЗапроса.Получить(0).Получить(0) = 0 Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция определяет были ли изменены в течение сеанса работы с регламентированным
// отчетом его ключевые реквизиты.
//
// Параметры:
//	Форма - Форма из которой вызван отчет.
//	КодИФНС - код ИФНС, в которую представляется отчет или "не применимо".
//
// Возвращаемое значение:
//	Булево: Истина, если ключевые реквизиты были изменены в течение сеанса редактирования отчета;
//			Ложь - в противном случае.
//
Функция БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП = "")
	
	Попытка
		Вариант = Форма.ВидДокумента*Форма.НомерКорректировки;
		мСохраненныйДок = Форма.мСохраненныйДок;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если мСохраненныйДок = Неопределено ИЛИ Форма.мСкопированаФорма <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Если КодИФНС = "не применимо" Тогда
			Возврат Вариант <> мСохраненныйДок.Вид;
		Иначе
			Возврат Вариант <> мСохраненныйДок.Вид ИЛИ СокрЛП(КодИФНС) <> СокрЛП(мСохраненныйДок.КодИМНС) ИЛИ СокрЛП(КПП) <> СокрЛП(мСохраненныйДок.КПП);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Событие возникает перед записью из регламентированного отчета информации в экземпляр документа
// РегламентированныйОтчет.
// Проверяет возможность записи данных в экземлпяр документа РегламентированныйОтчет из 
// переданной в качестве параметра Формы регламентированного отчета.
// В случае невозможности записи выдает предупреждение.
// Параметры:
// 		Форма - форма регламентированного отчета, из которой производится попытка записи данных в документ.
// Возвращаемое значение:
//		Булево - Истина, если запись возможна; Ложь - в противном случае.
Функция ПриЗаписиРегламентированногоОтчета(Форма, КодИФНС = "не применимо", Автосохранение = Ложь, Вариант = Неопределено, Уникальность = Истина, КПП = "") Экспорт
	
	Если Вариант <> Неопределено И (Автосохранение И Вариант <> Форма.мВариант) Тогда
		Возврат Ложь;
	КонецЕсли;

	КартинкаСохранение = Форма.ЭлементыФормы.Найти("КартинкаСохранение");
	Если КартинкаСохранение <> Неопределено Тогда
	    КартинкаСохранение.Видимость = Истина;
	КонецЕсли;
	
	Если Форма.мЗаписьЗапрещена = Истина Тогда
		Предупреждение("Невозможно сохранить отчет! Воспользуйтесь механизмом внешних регламентированных отчетов, встроенным в конфигурацию!");
		СкрытьКартинкуСохранение(Форма);
		Возврат Ложь;
	КонецЕсли;
	Если БылиИзмененыКлючевыеРеквизитыОтчета(Форма, КодИФНС, КПП) И СуществуетДокументСАналогичнымиРеквизитами(Форма, КодИФНС, КПП) Тогда
		Если Автосохранение Тогда
			СкрытьКартинкуСохранение(Форма);
			Возврат Ложь;
		Иначе
			Если Уникальность Тогда
			   Ответ = Вопрос("Внимание! Подобный отчет уже существует! Записать новый?", РежимДиалогаВопрос.ДаНет);
			   Если Ответ = КодВозвратаДиалога.Нет Тогда
				   СкрытьКартинкуСохранение(Форма);
				   Возврат Ложь;
			   КонецЕсли;
			КонецЕсли;   
		КонецЕсли;
	КонецЕсли;
	Форма.мЗаписываетсяНовыйДокумент = (Форма.мСохраненныйДок = Неопределено ИЛИ Форма.мСкопированаФорма <> Неопределено);
	
	Если Вариант <> Неопределено И ((Форма.мСохраненныйДок = Неопределено) ИЛИ (Форма.мСкопированаФорма <> Неопределено) ИЛИ (Вариант <> Форма.мВариант)) Тогда
		// Отчет новый или был скопирован.

		Если Форма.мСохраненныйДок = Неопределено ИЛИ Форма.мСкопированаФорма <> Неопределено Тогда
			// создаем новый документ вида РегламентированныйОтчет
				
			// создаем новый документ вида РегламентированныйОтчет
			Форма.мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
			ЗаблокироватьДокумент(Форма.мСохраненныйДок);
			Форма.мЗаписываетсяНовыйДокумент = Истина;
			Форма.мСохраненныйДок.Дата = Форма.мДатаКонцаПериодаОтчета;
			Форма.мСохраненныйДок.УстановитьВремя();
			Форма.мСохраненныйДок.УстановитьНовыйНомер();
			
		ИначеЕсли Вариант <> Форма.мВариант Тогда
			
			Ответ = роПолучитьОбщуюФорму("ВопросПриИзмененииВидаДокументаНомераКорректировки").ОткрытьМодально();
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если Форма.мСохраненныйДок.Заблокирован() Тогда
					Форма.мСохраненныйДок.Разблокировать();
				КонецЕсли;
				
				Форма.мСохраненныйДок  = Документы.РегламентированныйОтчет.СоздатьДокумент();
				ЗаблокироватьДокумент(Форма.мСохраненныйДок);
				Форма.мЗаписываетсяНовыйДокумент = Истина;
				Форма.мСохраненныйДок.Дата = Форма.мДатаКонцаПериодаОтчета;
				Форма.мСохраненныйДок.УстановитьВремя();
				Форма.мСохраненныйДок.УстановитьНовыйНомер();
			ИначеЕсли Ответ <> КодВозвратаДиалога.Нет Тогда
				СкрытьКартинкуСохранение(Форма);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Событие возникает при закрытии регламентированного отчета
//
// Параметры:
// 		Форма - закрываемая форма регламентированного отчета.
//
Процедура ПриЗакрытииРегламентированногоОтчета(Форма) Экспорт
	
	Если Форма.мСохраненныйДок <> Неопределено И Форма.мСохраненныйДок <> ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(Форма.мСохраненныйДок)) И Форма.мСохраненныйДок.Заблокирован() Тогда
		Форма.мСохраненныйДок.Разблокировать();
	КонецЕсли;
	
КонецПроцедуры

// Событие возникает перед закрытием регламентированного отчета
//
// Параметры:
// 		Форма - закрываемая форма регламентированного отчета;
//		Отказ - признак отказа от закрытия формы;
//		СтандартнаяОбработка - признак выполнения стандартной системной обработки события.
//
Процедура ПередЗакрытиемРегламентированногоОтчета(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Форма.Модифицированность Тогда

		Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ Форма.Сохранить() Тогда
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры	
	
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫГРУЗКИ В ЭЛЕКТРОННОМ ВИДЕ, 
// ИСПОЛЬЗУЕМЫЕ В РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТАХ
//

// Процедура добавляет строку в таблицу сообщений, заполняемую при выгрузке регламентированного отчета.
// Параметры:
//		Форма - форма, из которой вызывается процедура;
//		Описание - описание ошибки;
//		Раздел - наименование раздела;
//		ИмяЯчейки - имя области на табличном поле, соответвующей показателю, с которым связана ошибка;
//		ФИО - ФИО физлица (для случая, когда ошибка обнаружена при проверке раздела ФизЛица).
Процедура роСообщитьВТаблицуСообщений(Форма, Описание, Раздел, ИмяЯчейки = "", ФИО = "") Экспорт
	
	НовСтр = Форма.ТаблицаСообщений.Добавить();
	НовСтр.Раздел = Раздел;
	НовСтр.ИмяЯчейки = ИмяЯчейки;
	НовСтр.Описание = Описание;
	НовСтр.Страница = ФИО;
	
КонецПроцедуры

// Функция возвращает номер страницы раздела "Физлица", соответствующей переданному в качестве параметра строке - ФИО физлица.
// Параметры:
//		Форма - форма, из которой вызывается функция;
//		ФИО - строка, содержащая ФИО физлица.
// Возвращаемое значение:
//		Число - порядковый номер страницы, соответствующей указанному в качестве параметра ФИО.
Функция роНомерСтраницыПоФИОФизЛица(Форма, ФИО) Экспорт
	
	Если ТипЗнч(ФИО) = Тип("Число") Тогда
		Возврат ФИО;
	КонецЕсли;
	
	Ном = 0;
	Для Каждого Стр Из Форма.мСтруктураМногостраничныхРазделов.ФизЛица Цикл
		Ном = Ном + 1;
		Если Стр.Данные.ФизЛицФИО = ФИО Тогда
			Возврат Ном;
		КонецЕсли;
	КонецЦикла;
	Возврат 1; 
	
КонецФункции

// Процедура активизирует ячейку на поле табличного документа.
// Описание ячейки задается в виде строки таблицы значений.
// Параметры:
//		Форма - форма, из которой вызывается процедура;
//		Ячейка - строка таблицы значений, содержащая описание активизируемой ячейки.
Процедура роАктивизироватьЯчейку(Форма, Ячейка) Экспорт
	
	Попытка
		НомСтраницы = 0;
		
		Для Каждого СтрПан Из Форма.ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			НомСтраницы = НомСтраницы + 1;
			
			Если СтрПан.Имя = Ячейка.Раздел Тогда
				Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СтрПан;
				Форма.ОсновнаяПанельПриСменеСтраницы(Форма.ЭлементыФормы.ОсновнаяПанель, НомСтраницы);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
	
	Если Ячейка.Раздел = "ФизЛица" Тогда
		Попытка
			НС = роНомерСтраницыПоФИОФизЛица(Форма, Ячейка.Страница);
			Форма.ПоказатьСтраницуМногостраничногоРаздела(НС - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = НС;
		Исключение
		КонецПопытки;
	Иначе
		Попытка
			Форма.ПоказатьСтраницуМногостраничногоРаздела(Число(Ячейка.Страница) - 1, Ячейка.Раздел, Истина);
			ИмяСтраницы = Ячейка.Страница;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ПолеТД = Форма.ЭлементыФормы["ПолеТабличногоДокумента" + Ячейка.Раздел];
	
	Попытка
		
		ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки);
		ИмяОбласти = Ячейка.ИмяЯчейки;
		
	Исключение
		
		Если (Ячейка.СтрокаПП <> Неопределено) И (НЕ (ПустаяСтрока(Ячейка.СтрокаПП))) Тогда
			
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + Ячейка.СтрокаПП);
				ИмяОбласти = Ячейка.ИмяЯчейки + Ячейка.СтрокаПП;
			Исключение
				
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП);
					ИмяОбласти = Ячейка.ИмяЯчейки + "_" + Ячейка.СтрокаПП;
				Исключение
					
				КонецПопытки;
				
			КонецПопытки;
			
		Иначе
			
			Попытка
				ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "1");
				ИмяОбласти = Ячейка.ИмяЯчейки + "1";
			Исключение
				
				Попытка
					ПолеТД.ТекущаяОбласть = ПолеТД.Области.Найти(Ячейка.ИмяЯчейки + "_1");
					ИмяОбласти = Ячейка.ИмяЯчейки + "_1";
				Исключение
					
					ПолеТД.ТекущаяОбласть = ПолеТД.Область(Ячейка.ИмяЯчейки);
					
				КонецПопытки;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецПопытки;
	
	//ПолеТД.Область(ИмяОбласти).Примечание.ВыводитьНаПечать = Ложь;
	
	Форма.ТекущийЭлемент = ПолеТД;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РАСШИФРОВКИ ПОКАЗАТЕЛЕЙ ОТЧЕТА
//
// Механизм расшифровки предназначен для показа пользователю алгоритма 
// вычисления значения показателя.

// Процедура добавляет строку в таблицу расшифровки. Строка содержит информацию 
// об одной из сумм, составляющих значение показателя.
// 
// Параметры:
//  Форма             - форма, из которой вызвана процедура;
//  ИмяЯчейки         - строка; имя области, соответствующей показателю отчета, 
//                    расшифровка которого формируется;
//  ИмяПоказателя     - пользовательское наименование показателя;
//  ЗнакОперации      - знак операции. Значения "+" или "-";
//  ИмяСлагаемого     - пользовательское наименование составляющей суммы показетеля 
//  Сумма             - число;
//  Счет              - ссылка на план счетов. Счет
//  КорСчет           - 
//  Сдвиг             - сдвиг от основного периода в годах с минусом. Т.е. сдвиг 2 от периода 2004 год означает 2002 год.
//  ПраваяГраница     - правая граница периода. Если Сдвиг задает сдвиг от основного периода, то ПраваяГраница не учитывается.
//  ИмяРаздела        - наименование раздела, которому принадлежит показатель;
//  НомерЛиста        - номер листа раздела, на котором находится показатель;
//  МнЧ               - ИД многострочной части, которой принадлежит описываемый показатель;
//  НомерСтроки       - номер строки многострочной части, в которой находится показатель
//  Субконто1         - значение субкотно 1
//  Субконто2         - значение субкотно 2
//  Субконто3         - значение субкотно 3
//  ВидУчета          - БУ, НУ и т.д.
//	ОрганизацияВЦелом - организация с обособленными подразделениями
Процедура _ДобавитьСтрокуРасшифровки(Форма, ИмяЯчейки, ИмяПоказателя, ЗнакОперации, ИмяСлагаемого, Сумма, Счет = Неопределено, КорСчет = Неопределено, Сдвиг = Неопределено, ПраваяГраница = Неопределено, ИмяРаздела = Неопределено, НомерЛиста = Неопределено, МнЧ = Неопределено, НомерСтроки = Неопределено, Субконто1 = Неопределено, Субконто2 = Неопределено, Субконто3 = Неопределено, ВидУчета = "БУ", ОрганизацияВЦелом = Ложь) Экспорт

	НовСтр               = Форма.СпП.Добавить();
	НовСтр.НомСтроки     = Форма.СпП.Количество();
	НовСтр.ИмяЯчейки     = ИмяЯчейки;
	НовСтр.ИмяПоказателя = ИмяПоказателя;
	НовСтр.ЗнакОперации  = ЗнакОперации;
	НовСтр.ИмяСлагаемого = ИмяСлагаемого;
	НовСтр.Сумма         = Сумма;
	НовСтр.КодСчета      = Счет;
	НовСтр.КодКорСчета   = КорСчет;
	Если Сдвиг = Неопределено ИЛИ Сдвиг = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		НовСтр.ДатаНачала = Форма.мДатаНачалаПериодаОтчета;
		НовСтр.ДатаКонца  = Форма.мДатаКонцаПериодаОтчета;
	ИначеЕсли ТипЗнч(Сдвиг) = Тип("Число") И Сдвиг <= 10 Тогда
		НовСтр.ДатаНачала = ДобавитьМесяц(Форма.мДатаНачалаПериодаОтчета, -12*Сдвиг);
		НовСтр.ДатаКонца  = ДобавитьМесяц(Форма.мДатаКонцаПериодаОтчета, -12*Сдвиг);
	Иначе
		НовСтр.ДатаНачала = Сдвиг;
		НовСтр.ДатаКонца  = ПраваяГраница;
	КонецЕсли;
	НовСтр.Раздел        = ИмяРаздела;
	НовСтр.Страница      = НомерЛиста;
	НовСтр.МнЧ           = МнЧ;
	НовСтр.СтрокаПП      = НомерСтроки;
	НовСтр.Субконто1     = Субконто1;
	НовСтр.Субконто2     = Субконто2;
	НовСтр.Субконто3     = Субконто3;
	Если Форма.СпП.Колонки.Найти("ВидУчета") <> Неопределено Тогда
		НовСтр.ВидУчета = ВидУчета;
	КонецЕсли;
	Если Форма.СпП.Колонки.Найти("ОрганизацияВЦелом") <> Неопределено Тогда
		НовСтр.ОрганизацияВЦелом = ОрганизацияВЦелом;
	КонецЕсли;
	Если Форма.СпП.Колонки.Найти("Организация") <> Неопределено Тогда
		НовСтр.Организация   = Форма.мОргРасшифровка;
	КонецЕсли;

КонецПроцедуры // _ДобавитьСтрокуРасшифровки()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА АВТОСОХРАНЕНИЯ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

// Функция возвращает значение интервала автосохранения отчетов (в минутах)
// для пользователя текущего сеанса.
//
// Функция не имеет параметров.
// Возвращаемое значение: Число - интервал автосохранения регламентированных отчетов.
Функция ЗначениеИнтервалаАвтосохраненияРегламентированнойОтчетности() Экспорт
	
	ИнтервалАвтосохраненияРегламентированнойОтчетности = ВосстановитьЗначение("ИнтервалАвтосохраненияРегламентированнойОтчетности");
	Если ИнтервалАвтосохраненияРегламентированнойОтчетности = Неопределено Тогда
		ИнтервалАвтосохранения = 10;
	Иначе
		ИнтервалАвтосохранения = ИнтервалАвтосохраненияРегламентированнойОтчетности;
	КонецЕсли;
	Возврат ИнтервалАвтосохранения;
	
КонецФункции

// Функция возвращает значение интервала напоминания для календаря (в днях)
//
// Функция не имеет параметров.
// Возвращаемое значение: Число - интервал напоминаний регламентированных отчетов.
//
Функция ЗначениеИнтервалаНапоминанийРегламентированнойОтчетности() Экспорт

	ИнтервалНапоминанийРегламентированнойОтчетности = ВосстановитьЗначение("ИнтервалНапоминанийРегламентированнойОтчетности");
	Если ИнтервалНапоминанийРегламентированнойОтчетности = Неопределено Тогда
		ИнтервалНапоминаний = 3;
	Иначе
		ИнтервалНапоминаний = ИнтервалНапоминанийРегламентированнойОтчетности;
	КонецЕсли;
	Возврат ИнтервалНапоминаний;

КонецФункции // ЗначениеИнтервалаНапоминанийРегламентированнойОтчетности

// Процедура подключает обработчик ожидания в выбранной форме для механизма автосохранения.
//
// Параметры:
//	Форма - форма, для которой необходимо подключить обработчик ожидания.
//
Процедура ВключитьОбработчикАвтосохранения(Форма) Экспорт
	
	Форма.мИнтервалАвтосохранения = ЗначениеИнтервалаАвтосохраненияРегламентированнойОтчетности();
	Если Форма.мИнтервалАвтосохранения <> 0 Тогда
		Форма.ПодключитьОбработчикОжидания("ОбработчикСобытияПоТаймеру", Цел(Форма.мИнтервалАвтосохранения * 60));
	КонецЕсли;
		
КонецПроцедуры

// Процедура отключает обработчик ожидания в выбранной форме для механизма автосохранения.
//
// Параметры:
//	Форма - форма, для которой необходимо отключить обработчик ожидания.
//
Процедура ОтключитьОбработчикАвтосохранения(Форма) Экспорт
	
	Форма.ОтключитьОбработчикОжидания("ОбработчикСобытияПоТаймеру");
		
КонецПроцедуры

// Функция определяет возможность использования регламентированного отчета текущим пользователем.
//
// Параметры:
//	ИдентификаторОтчета - строка - уникальный идентификатор регламентированного отчета.
//
// Возвращаемое значение:
//	Булево. Истина - пользователь имеет право использовать отчет.
//			Ложь - пользователь не имеет право использовать отчет.
//			Неопределено - указанный отчет не зарегистрирован в системе.
//
Функция ПравоДоступаКРегламентированномуОтчету(ИдентификаторОтчета) Экспорт
	
	Если НЕ ЭтоВнешнийОтчет(ИдентификаторОтчета) Тогда // это внутренний отчет
		
		Если Метаданные.Документы.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это документ
			
			Если НЕ ПравоДоступа("Изменение", Метаданные.Документы[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли Метаданные.Отчеты.Найти(ИдентификаторОтчета) <> Неопределено Тогда // это отчет
			
			Если НЕ ПравоДоступа("Использование", Метаданные.Отчеты[ИдентификаторОтчета]) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	
	
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ С ДВУХМЕРНЫМ ШТРИХКОДОМ
//

// Функция формирует файл с электронным представлением регалментированного отчета.
//
// Параметры:
//	Форма - вызывающая форма отчета, файл с электронным представлением которого необходимо сформировать.
//	ВремФайл - полное имя файла.
//
// Возвращаемое значение:
//	Булево - Истина, если выгрузка прошла успешно; Ложь - в противном случае.
//
Функция СформироватьТекстВыгрузки(Форма, ВремФайл, ДляЦелейФормированияМЧБ = Ложь, ПроверкаБлокировкиФормы = Ложь)
	
	НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	СпДокОсн = Новый СписокЗначений;
	СпДокОсн.Добавить(Форма.мСохраненныйДок);
	Возврат НовыйДок.ПолучитьФорму(, Форма).СформироватьИЗаписать(СпДокОсн, , , ВремФайл, ДляЦелейФормированияМЧБ, ПроверкаБлокировкиФормы);
	
КонецФункции

// Функция возвращает признак печати раздела.
//
// Параметры:
//	Форма - вызывающая форма регламентированного отчета.
//	СтрокаРаздела - СтрокаДереваЗначений с описанием раздела.
//
// Возвращаемое значение:
//	Число - 1, если раздел печатается; в противном случае - 0.
//
Функция ПечататьРаздел(Форма, СтрокаРаздела, ЧтоИскать = Неопределено) Экспорт
	Перем КлючФизЛица;
	
	Если ЧтоИскать <> Неопределено Тогда
		Возврат 1;
	КонецЕсли;
	
	// если в настройках взведен флаг печати, то добавляем раздел в список печатаемых и выходим
	Если СтрокаРаздела.ВыводНаПечать <> 0 Тогда
		Форма.мПечатаемыеРазделы.Добавить(СтрокаРаздела.ИмяСтраницы);
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Функция возвращает общую форму регламентированной отчетности.
//
// Параметры:
//	ИмяФормы - строка с именем запрашиваемой формы.
//	Владелец - форма-владелец открываемой формы.
//	КлючУникальности - ключ для поиска уже открытых форм.
//
// Возвращаемое значение:
//	Форма - запрошенная общая форма регламентированной отчетности 
//			или Неопределено в случае отсутствия общей формы с указанным именем.
//
Функция роПолучитьОбщуюФорму(ИмяФормы, Владелец = Неопределено, КлючУникальности = Неопределено) Экспорт
	
	Если ВРЕГ(ИмяФормы) = "ВВОДРОССИЙСКОГОАДРЕСА" Тогда
		Возврат Обработки.РедактированиеКонтактнойИнформации.ПолучитьФорму("ФормаЗаписиАдреса", Владелец, КлючУникальности);
	КонецЕсли;
	
	Если Метаданные.Обработки.ОбщиеОбъектыРегламентированнойОтчетности.Формы.Найти(ИмяФормы) <> Неопределено Тогда
		Возврат Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму(ИмяФормы, Владелец, КлючУникальности);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ПОИСКА
//

// Функция возвращает признак "вхождения" одного значения в другое, то есть
// если поиск производится в строках, то одна строка проверяется на вхождение в другую
// (без учета регистра), а в остальных случаях значения проверяются на равенство.
//
// Параметры:
//	ГдеИскать - значение, в котором следует произвести поиск.
//	ЧтоИскать - значение, которое следует найти.
//
// Возвращаемое значение:
//	Булево - признак "вхождения" одного значения в другое.
//
Функция ЗначениеСодержитЗначение(ГдеИскать, ЧтоИскать)
	
	ТипГдеИскать = ТипЗнч(ГдеИскать);
	Если ТипГдеИскать <> Тип("Строка") Тогда
		Если ТипГдеИскать = Тип("Число") Тогда
			СтрокаГдеИскать = Формат(ГдеИскать, "ЧГ=");
		ИначеЕсли ТипГдеИскать = Тип("Дата") Тогда
			СтрокаГдеИскать = Формат(ГдеИскать, "ДФ=dd.MM.yyyy");
		Иначе
			СтрокаГдеИскать = Строка(ГдеИскать);
		КонецЕсли;
	Иначе
		СтрокаГдеИскать = ГдеИскать;
	КонецЕсли;
	
	Возврат (Найти(ВРЕГ(СтрокаГдеИскать), ВРЕГ(ЧтоИскать.ИскомоеЗначение)) <> 0);
	
КонецФункции

// Процедура вызывается при нажатии на кнопку "Поиск" верхней командной панели
// регламентированного отчета.
// Выводит форму критериев поиска, запускает процедуру поиска и выводит окно с результатами.
//
// Параметры:
//	Форма - форма в которой следует произвести поиск.
//
Процедура роПоискВРегламентированномОтчете(Форма) Экспорт
	
	ФормаПоиска = роПолучитьОбщуюФорму("НастройкиПоиска", Форма);
	ЧтоИскать = ФормаПоиска.ОткрытьМодально();
	Если ЧтоИскать = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.мРезультатПоиска = Новый ТаблицаЗначений;
	Форма.мРезультатПоиска.Колонки.Добавить("Раздел");
	Форма.мРезультатПоиска.Колонки.Добавить("Страница");
	Форма.мРезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
	Форма.мРезультатПоиска.Колонки.Добавить("ИмяЯчейки");
	Форма.мРезультатПоиска.Колонки.Добавить("СтрокаПП");
	Форма.мРезультатПоиска.Колонки.Добавить("НайденоВСтроке");
	
	Форма.мСчетчикиСтраницПриПоиске = Новый ТаблицаЗначений;
	Форма.мСчетчикиСтраницПриПоиске.Колонки.Добавить("ИмяТабличногоПоля");
	Форма.мСчетчикиСтраницПриПоиске.Колонки.Добавить("Счетчик");
	
	Форма.Печать("", ЧтоИскать);
	
	Состояние("Поиск завершен.");
	//РезультатПоиска.ВыбратьСтроку();
	Если Форма.мРезультатПоиска.Количество() = 0 Тогда
		Предупреждение("По Вашему запросу ничего не найдено!");
		Возврат;
	КонецЕсли;
	
	ФормаРезультатыПоиска = роПолучитьОбщуюФорму("РезультатыПоиска", Форма);
	Если ФормаРезультатыПоиска.Открыта() Тогда
		ФормаРезультатыПоиска.Закрыть();
	КонецЕсли;
	ФормаРезультатыПоиска.Заголовок = Форма.Заголовок + " - результаты поиска значения [" + ЧтоИскать.ИскомоеЗначение + "]";
	ФормаРезультатыПоиска.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаРезультатыПоиска.ЭлементыФормы.РезультатыПоиска.Значение = Форма.мРезультатПоиска.Скопировать();
	ФормаРезультатыПоиска.НадписьНайдено = "Найдено: " + Формат(Форма.мРезультатПоиска.Количество(), "ЧГ=");
	ФормаРезультатыПоиска.Открыть();
	
КонецПроцедуры

// Вычисляет значение показателя отчета по указанному "корню" имени показателя
// Например, 
// для показателей "ИНН_1"," ИНН_2" и т.д. "корнем" является "ИНН"
// для показателей "КПП1_1", "КПП1_2" и т.д. "корнем" является "КПП1"
// Параметры:
// Табл - таблица значений, описывающая показатели листа отчета
// Корень - строка - "корень", значение для которого требуется получить 
Функция поискВычислитьЗначениеПоКорню(Табл, Корень)
	
	Табл2 = Табл.Скопировать();
	ИтоговоеЗначение = "";
	Для Каждого Стр Из Табл2 Цикл
		Если Стр.Корень = Корень Тогда
			ИтоговоеЗначение = ИтоговоеЗначение + Стр.Знач;
		КонецЕсли;
	КонецЦикла;
	
	Если ((ВРЕГ(Лев(Корень, 4)) = "ДАТА") ИЛИ (СтрЧислоВхождений(Корень, "Дата") <> 0)) 
		И (((СтрДлина(ИтоговоеЗначение)=8) ИЛИ (СтрДлина(ИтоговоеЗначение)=6)) ИЛИ (ПустаяСтрока(ИтоговоеЗначение)))Тогда
		
		Если ПустаяСтрока(ИтоговоеЗначение) Тогда
			ИтоговоеЗначение = "00.00.0000";
		Иначе
			ИтоговоеЗначение = Лев(ИтоговоеЗначение, 2) + "." + Сред(ИтоговоеЗначение, 3, 2) + "." + Сред(ИтоговоеЗначение, 5);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции

//Функция собирает значения из отдельных "ячеек", например, ИНН1 из ИНН1_1 + ИНН1_2 + ...
Функция ПолучитьХарактеристикиЗначенийТабличногоПоля(Данные)
	
	ТП = Новый ТаблицаЗначений;
	ТП.Колонки.Добавить("Имя");
	ТП.Колонки.Добавить("Кол");
	ТП.Колонки.Добавить("Номер");
	ТП.Колонки.Добавить("Знач");
	ТП.Колонки.Добавить("Корень");
	
	Для Каждого Стр Из Данные Цикл
		НоваяСтрока = ТП.Добавить();
		НоваяСтрока.Имя = Стр.Ключ;
		НоваяСтрока.Кол = 1;
		НоваяСтрока.Знач = Стр.Значение;
	КонецЦикла;
	
	ТП.Сортировать("Имя");
	
	Для Каждого Стр Из ТП Цикл
		Имя = Стр.Имя;
		
		Если ЭтоКодПоказателяП(Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ПризнакКвадратика = Ложь;//признак того, что значение является частью другого значения
		
		НомерСимвола = СтрДлина(Имя);
		Было_ = Ложь;//признак того, что в текущем наименовании показателя уже встречался символ "_"
		БылаЦифра = Ложь;
		
		Пока НомерСимвола > 0 Цикл
			
			Симв = Сред(Имя, НомерСимвола, 1);
			КодСимв = КодСимвола(Симв);
			
			Если (КодСимв >= КодСимвола("0") И КодСимв <= КодСимвола("9")) ИЛИ (Симв = "_") Тогда
				
				Если Симв = "_" Тогда
					Если БылаЦифра Тогда
						
						ПризнакКвадратика = Истина;
						НомерСимвола = НомерСимвола - 1;
						Прервать;
						
					КонецЕсли;
				Иначе//это цифра
					БылаЦифра = Истина;
				КонецЕсли;
				
			Иначе
				Прервать;
			КонецЕсли;
			
			НомерСимвола = НомерСимвола - 1;
			
		КонецЦикла;
		
		Если БылаЦифра Тогда
			Корень = Лев(Стр.Имя, НомерСимвола);
			Номер = Сред(Стр.Имя, НомерСимвола + 1);
			Попытка
				Стр.Номер = Число( ?( Лев(Номер, 1) = "_", Сред(Номер, 2), Номер));
			Исключение
				Сообщить("Ошибки преобразования номера из окончания: " + Корень + " === " + Номер, СтатусСообщения.Важное);
			Конецпопытки;
			Стр.Корень = Корень;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Стр Из ТП Цикл
		Если НЕ ЗначениеЗаполнено(Стр.Корень) Тогда
			Стр.Корень = Стр.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ТП.Сортировать("Корень, Номер");
	
	ТП2 = ТП.Скопировать();
	ТП2.Свернуть("Корень", "Кол");
	
	Для Каждого Стр Из ТП2 Цикл
		Если Стр.Кол > 1 И Стр.Корень <> "П" Тогда
			СтрокиДляУдаления = ТП.НайтиСтроки(Новый Структура("Корень", Стр.Корень));
			НовоеИмя = СтрокиДляУдаления[0].Имя;
			Для Каждого Эл Из СтрокиДляУдаления Цикл
				Данные.Удалить(Эл.Имя);
			КонецЦикла;
			Данные.Вставить(НовоеИмя, поискВычислитьЗначениеПоКорню(ТП, Стр.Корень));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Данные;
	
КонецФункции

// Процедура производит поиск в указанной форме. 
// Параметры поиска задаются в структуре СтруктураПоиска.
//
// Параметры:
//	Форма - форма, в которой производится поиск.
//	СтруктураПоиска - структура, задающая условия поиска.
//
Процедура роНайтиЗначение(Форма, СтруктураПоиска, НеСворачивать = Ложь) Экспорт
	
	ТаблДок = Форма.ЭлементыФормы[СтруктураПоиска.ИмяТабличногоПоля];
	СтрокаСчетчикаТабличногоПоля = Форма.мСчетчикиСтраницПриПоиске.Найти(СтруктураПоиска.ИмяТабличногоПоля, "ИмяТабличногоПоля");
	Если СтрокаСчетчикаТабличногоПоля = Неопределено Тогда
		СтрокаСчетчикаТабличногоПоля = Форма.мСчетчикиСтраницПриПоиске.Добавить();
		СтрокаСчетчикаТабличногоПоля.ИмяТабличногоПоля = СтруктураПоиска.ИмяТабличногоПоля;
		СтрокаСчетчикаТабличногоПоля.Счетчик = 0;
	КонецЕсли;
	СтрокаСчетчикаТабличногоПоля.Счетчик = СтрокаСчетчикаТабличногоПоля.Счетчик + 1;
	
	Состояние("Поиск в разделе """ + СтруктураПоиска.НаименованиеЛиста + """" 
			+ ?(СтрокаСчетчикаТабличногоПоля.Счетчик = 1, "", " лист №" + СтрокаСчетчикаТабличногоПоля.Счетчик) + " (найдено " + Форма.мРезультатПоиска.Количество() + ") ...");
	
	Если СтруктураПоиска.ЧтоИскать.ИскатьВТексте Тогда
		
		Для Стр = 1 По ТаблДок.ВысотаТаблицы Цикл
			Для Кол = 1 По ТаблДок.ШиринаТаблицы Цикл
				Обл = ТаблДок.Область(Стр, Кол, Стр, Кол);
				Если ЗначениеСодержитЗначение(Обл.Текст, СтруктураПоиска.ЧтоИскать) Тогда
					
					НовСтр = Форма.мРезультатПоиска.Добавить();
					НовСтр.Раздел = Сред(СтрокаСчетчикаТабличногоПоля.ИмяТабличногоПоля, 24);
					НовСтр.Страница = СтрокаСчетчикаТабличногоПоля.Счетчик;
					НовСтр.НаименованиеЛиста = СтруктураПоиска.НаименованиеЛиста;
					НовСтр.ИмяЯчейки = Обл.Имя;
					НовСтр.НайденоВСтроке = Обл.Текст;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		ЗначащиеЯчейки = Новый Структура;
		
		Для Каждого Обл Из ТаблДок.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда
				ЗначащиеЯчейки.Вставить(Обл.Имя, Обл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Если СтрДлина(СтруктураПоиска.ЧтоИскать.ИскомоеЗначение) > 1 И НЕ НЕСворачивать Тогда
			ЗначащиеЯчейки = ПолучитьХарактеристикиЗначенийТабличногоПоля(ЗначащиеЯчейки);
		КонецЕсли;
		
		РезультатПоиска = Новый ТаблицаЗначений;
		РезультатПоиска.Колонки.Добавить("Раздел");
		РезультатПоиска.Колонки.Добавить("Страница");
		РезультатПоиска.Колонки.Добавить("НаименованиеЛиста");
		РезультатПоиска.Колонки.Добавить("ИмяЯчейки");
		РезультатПоиска.Колонки.Добавить("СтрокаПП");
		РезультатПоиска.Колонки.Добавить("НайденоВСтроке");
		РезультатПоиска.Колонки.Добавить("НомерСтроки");
		РезультатПоиска.Колонки.Добавить("НомерКолонки");
		
		Для Каждого Обл Из ЗначащиеЯчейки Цикл
			Если ЗначениеСодержитЗначение(Обл.Значение, СтруктураПоиска.ЧтоИскать) Тогда
				
				НовСтр = РезультатПоиска.Добавить();
				НовСтр.Раздел = Сред(СтрокаСчетчикаТабличногоПоля.ИмяТабличногоПоля, 24);
				НовСтр.Страница = СтрокаСчетчикаТабличногоПоля.Счетчик;
				НовСтр.НаименованиеЛиста = СтруктураПоиска.НаименованиеЛиста;
				НовСтр.ИмяЯчейки = Обл.Ключ;
				НовСтр.НайденоВСтроке = Обл.Значение;
				
				ИскомаяЯчейка = ТаблДок.Области.Найти(НовСтр.ИмяЯчейки);
				Если ИскомаяЯчейка = Неопределено Тогда
					ИскомаяЯчейка = ТаблДок.Области.Найти(НовСтр.ИмяЯчейки + "_1");
				КонецЕсли;
				
				Если ИскомаяЯчейка = Неопределено Тогда
					ИскомаяЯчейка = ТаблДок.Области.Найти(НовСтр.ИмяЯчейки + "1");
				КонецЕсли;
				
				Если ИскомаяЯчейка = Неопределено Тогда
					НовСтр.НомерСтроки = 0;
					НовСтр.НомерКолонки = 0;
				Иначе
					НовСтр.НомерСтроки = ИскомаяЯчейка.Верх;
					НовСтр.НомерКолонки = ИскомаяЯчейка.Лево;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		РезультатПоиска.Сортировать("НомерСтроки, НомерКолонки");
		
		Для Каждого Стр Из РезультатПоиска Цикл
			
			НовСтр = Форма.мРезультатПоиска.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает соответствующий экземпляру документа вида РегламентированныйОтчет объект Отчет
// и инициализирует основные переменные объекта.
//
// Параметры:
//	Док - ДокументСсылка.РегламентированныйОтчет, который требуется "открыть".
//
// Возвращаемое значение:
//	Форма, если удалось создать соответствующий отчет или Неопределено в противном случае.
//
Функция ИнициализацияОтчета(Док, Форма = Неопределено)

	Отчет = РеглОтчеты(Док.ИсточникОтчета).ПолучитьФорму(, , Новый УникальныйИдентификатор);
	Отчет.мСохраненныйДок = Док.ПолучитьОбъект();
	
	// определяем границы периода построения отчета
	Отчет.мДатаНачалаПериодаОтчета = НачалоДня(Отчет.мСохраненныйДок.ДатаНачала);
	Отчет.мДатаКонцаПериодаОтчета  = КонецДня(Отчет.мСохраненныйДок.ДатаОкончания);
			
	// в некоторых отчетах (формы баланса, например) переменная мПериодичность не определена
	Попытка
		Отчет.мПериодичность = Отчет.мСохраненныйДок.Периодичность;
	Исключение
	КонецПопытки;

	ВыбраннаяФорма = Док.ВыбраннаяФорма;
			
	Если Отчет.ЭтотОбъект.Метаданные().Формы.Найти(СокрП(ВыбраннаяФорма)) <> Неопределено Тогда
		ВыбФормаОтчета = Отчет.ПолучитьФорму(СокрП(ВыбраннаяФорма), Форма, Новый УникальныйИдентификатор);
	Иначе
		// Если не удалось найти форму с таким названием (могла быть переименована),
		// то по умолчанию выдаем текущую (действующую) форму
		ВыбраннаяФорма = Отчет.мТаблицаФормОтчета[0].ФормаОтчета;
		ВыбФормаОтчета = Отчет.ПолучитьФорму(ВыбраннаяФорма, Форма, Новый УникальныйИдентификатор);
	КонецЕсли;
			
	// Попытка получения переменной мВерсияФормы сохраненного документа для сравнения
	// с аналогичной переменной объекта отчет.
	Попытка
		ВерсияФормыДанных = Отчет.мСохраненныйДок.ДанныеОтчета.Получить().ВерсияФормы;
		Если НЕ ПродолжитьПриНесоответствииВерсийФорм(ВерсияФормыДанных, ВыбФормаОтчета.мВерсияФормы) Тогда
			Возврат Неопределено;
		КонецЕсли;
	Исключение
	Конецпопытки;
			
	Отчет.мВыбраннаяФорма = ВыбраннаяФорма;
	Возврат ВыбФормаОтчета;
	
КонецФункции	

// Возвращает представление вида документа для отображения в журнале документов.
//
// Параметры:
//	Вариант - число, значение реквизита Вид документа РегламентированныйОтчет.
//
// Возвращаемое значение:
//	Строка - пользовательское представление вида документа для отображения в журнале.
//
Функция ПредставлениеВидаДокумента(Вид) Экспорт
	
	Если Вид = 0 Тогда
		Возврат "П";
	ИначеЕсли Вид = Неопределено Тогда
		Возврат "-";
	Иначе
		Возврат "К/" + Вид;
	КонецЕсли;
	
КонецФункции

// ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод
// Функция анализирует таблицу значений мТаблицаФормОтчета
// на предмет выявления форм, которые действуют за один и тот же период ("пересекаются")
// Параметры:
//  Нет.
// Возвращаемое значение:
//  ТаблицаЗначений, в которую входят строки из мТаблицаФормОтчета, удовлетворяющие 
//  условию/отбору по текущему установленному периоду.
//
Функция ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма)

	// Объявим таблицу результата.
	РезультирующаяТаблица = Форма.мТаблицаФормОтчета.Скопировать();
	РезультирующаяТаблица.Очистить();

	// Осуществим перебор по таблице содеражащей формы отчетов и периоды действий.
	Для Каждого ЭлФорма Из Форма.мТаблицаФормОтчета Цикл

		ДатаНачалаДействияФормы = ЭлФорма.ДатаНачалоДействия;
		ДатаКонцаДействияФормы  = КонецДня(?(ЭлФорма.ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")), '20291231', ЭлФорма.ДатаКонецДействия));

		Если Форма.мДатаКонцаПериодаОтчета <= ДатаКонцаДействияФормы
		   И Форма.мДатаКонцаПериодаОтчета >= ДатаНачалаДействияФормы Тогда

			// Перебираемая запись из таблицы форм удовлетворяет текущим параметрам
			// учитывая конец периода отчета.
			НоваяФорма = РезультирующаяТаблица.Добавить();
			НоваяФорма.ФормаОтчета        = ЭлФорма.ФормаОтчета;
			НоваяФорма.ОписаниеОтчета     = ЭлФорма.ОписаниеОтчета;
			НоваяФорма.ДатаНачалоДействия = ЭлФорма.ДатаНачалоДействия;
			НоваяФорма.ДатаКонецДействия  = ЭлФорма.ДатаКонецДействия;

		КонецЕсли;

	КонецЦикла;

	Возврат РезультирующаяТаблица;

КонецФункции // ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод

// Процедура назначает форму отчета по умолчанию 
//   при изменении периода представления отчета.
// При отсутствии формы, соответствующей выбранному 
//   периоду, по умолчанию выдаем текущую (действующую) форму.
//
// Вызывается из других процедур модуля.
// Выбор осуществляется не по таблице мТаблицаФорм, а по формам действующим
// в выбранный период (возвращается функцией ПолучитьТаблицуОтчетовВДействующих...
//
Процедура ВыборФормыРегламентированногоОтчетаПоУмолчанию(Форма) Экспорт

	ТаблицаФормОтчета = ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма);
	Для Каждого Стр Из ТаблицаФормОтчета Цикл
		Если Стр.ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
			Стр.ДатаКонецДействия = '20291231';
		КонецЕсли;
	КонецЦикла;

	ТаблицаФормОтчета.Сортировать("ДатаКонецДействия Убыв");

	Для Каждого Строка Из ТаблицаФормОтчета Цикл
		Если (Строка.ДатаНачалоДействия > КонецДня(Форма.мДатаКонцаПериодаОтчета)) ИЛИ
			((Строка.ДатаКонецДействия > '00010101000000') И (Строка.ДатаКонецДействия < НачалоДня(Форма.мДатаКонцаПериодаОтчета))) Тогда

			Продолжить;
		КонецЕсли;

		Форма.мВыбраннаяФорма = Строка.ФормаОтчета;
		Форма.ЭлементыФормы.ОписаниеНормативДок.Значение = Строка.ОписаниеОтчета;

		Возврат;
	КонецЦикла;

	// Если не удалось найти форму, соответствующую выбранному периоду,
	// то по умолчанию выдаем текущую (действующую) форму.
	Если Форма.мВыбраннаяФорма = Неопределено Тогда
		Если ТаблицаФормОтчета.Количество() >= 1 Тогда
			мВыбраннаяФорма = Форма.мТаблицаФормОтчета[0].ФормаОтчета;
			Форма.ЭлементыФормы.ОписаниеНормативДок.Значение = Форма.мТаблицаФормОтчета[0].ОписаниеОтчета;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВыборФормыРегламентированногоОтчетаПоУмолчанию()

// КоличествоФормСоответствующихВыбранномуПериоду
//
Функция КоличествоФормСоответствующихВыбранномуПериоду(Форма) Экспорт

	ИтоговоеКоличество = 0;

	Для Каждого ЭлФорма Из Форма.мТаблицаФормОтчета Цикл

		ДатаНачалаДействияФормы = ЭлФорма.ДатаНачалоДействия;
		ДатаКонцаДействияФормы  = КонецДня(?(ЭлФорма.ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")), '20291231', ЭлФорма.ДатаКонецДействия));

		Если Форма.мДатаКонцаПериодаОтчета <= ДатаКонцаДействияФормы
		   И Форма.мДатаКонцаПериодаОтчета >= ДатаНачалаДействияФормы Тогда

			ИтоговоеКоличество = ИтоговоеКоличество + 1; 

		КонецЕсли;

	КонецЦикла;

	Возврат ИтоговоеКоличество;

КонецФункции // КоличествоФормСоответствующихВыбранномуПериоду

// Функция вызывается по нажатию кнопки "Выбрать форму..." формы.
// Функция организует модальное окно, где предлагает пользователю указать какую из форм
// необходимо использовать для выбранного (текущего) периода.
// Параметры:
//  Формы          - ссылка на основную форму.
// Возвращаемое значение:
//  Название формы отчета. Аналог мВыбраннойФормы
//
Функция ВыбратьФормуОтчетаИзДействующегоСписка(Форма) Экспорт

	Результат = Неопределено;

	// Получим таблицу соответствующих периоду форм.
	ТаблицаВыбораФормы = ПолучитьТаблицуОтчетовДействующихВВыбранныйПериод(Форма);

	// Если в таблице есть колонка нарастающий итог, то удалим её
	// используется в декларациях по алкогольной продукции.
	Если ТаблицаВыбораФормы.Колонки.Найти("НарастающийИтог") <> Неопределено Тогда
		ТаблицаВыбораФормы.Колонки.Удалить("НарастающийИтог");
	КонецЕсли;

	// Если в таблице есть колонка НаименованиеОтчета, то удалим её
	// используется в декларациях по алкогольной продукции.
	Если ТаблицаВыбораФормы.Колонки.Найти("НаименованиеОтчета") <> Неопределено Тогда
		ТаблицаВыбораФормы.Колонки.Удалить("НаименованиеОтчета");
	КонецЕсли;

	// В полученной таблице найдем текущую форму, чтобы сфокусировать на ней курсор выбора.
	НайденнаяСтрока = ТаблицаВыбораФормы.Найти(Форма.мВыбраннаяФорма, "ФормаОтчета");

	// Удалим колонку ФормаОтчета, чтобы не показывалась в форме выбора.
	ТаблицаВыбораФормы.Колонки.Удалить("ФормаОтчета");

	// Установим размеры колонок.
	ТаблицаВыбораФормы.Колонки[0].Ширина = 35;
	ТаблицаВыбораФормы.Колонки[0].Заголовок = "Утверждена";
	ТаблицаВыбораФормы.Колонки[1].Ширина = 14;
	ТаблицаВыбораФормы.Колонки[1].Заголовок = "Начало действия";
	ТаблицаВыбораФормы.Колонки.Добавить("Период");
	Для Каждого Стр Из ТаблицаВыбораФОрмы Цикл
		Если ПустоеЗначение(Стр.ДатаКонецДействия) Тогда
			Стр.Период = "По наст. время";
		Иначе
			Стр.Период = Формат(Стр.ДатаКонецДействия, "ДФ=дд.ММ.гггг");
		КонецЕсли;
	КонецЦикла;

	ТаблицаВыбораФормы.Колонки.Удалить("ДатаКонецДействия");
	ТаблицаВыбораФормы.Колонки[2].Ширина = 14;
	ТаблицаВыбораФормы.Колонки[2].Заголовок = "Конец действия";

	// Выведем диалог выбора форм.
	ВыбСтрока = ТаблицаВыбораФормы.ВыбратьСтроку("Выберите форму отчета", НайденнаяСтрока);

	// Если форма выбрана, то...
	Если Не ВыбСтрока = Неопределено Тогда

		// Организуем структуру поиска по таблице мТаблицаФормОтчетов, т.к. название формы было удалено.
		СтрОтбора = Новый Структура;
		СтрОтбора.Вставить("ОписаниеОтчета", ВыбСтрока.ОписаниеОтчета);

		// В эталонной таблице форм, найдем соответствующую форму.
		ВыбСтрока = Форма.мТаблицаФормОтчета.НайтиСтроки(СтрОтбора);

		// Получим название формы отчета (формы).
		// мВыбраннаяФорма = ВыбСтрока[0].ФормаОтчета;
		Результат = ВыбСтрока[0].ФормаОтчета;

		// Получим описание формы отчета.
		Форма.ЭлементыФормы.ОписаниеНормативДок.Значение = ВыбСтрока[0].ОписаниеОтчета;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ВыбратьФормуОтчетаИзДействующегоСписка

// Извлекает сведения об организации по списку, переданному в параметре.
// 
// Параметры:
//  Показатели     - Список значений. Содержит в виде представлений перечень 
//                   сведений, которые надо получить. 
//                   
Функция ПолучитьСведенияОбКонтрагенте(Знач Организация, Знач ДатаЗначения = Неопределено, Знач СписокПоказателей = Неопределено) Экспорт
	
	Перем ОргСведения;
	Перем Значение;

	// Структура, в которой будут возвращаться найденные значения
	ОргСведения = Новый Структура;
	//Ставки = Новый Структура("Организация", Организация);
	
	Если Организация = Неопределено ИЛИ Организация = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Контрагенты") Тогда
		Возврат ОргСведения;
	КонецЕсли;
	
	Если ДатаЗначения = Неопределено Тогда
		ДатаЗначения = РабочаяДата;
	КонецЕсли;
	ДатаЗначения = КонецДня(ДатаЗначения);
	
	ПустаяДата = '00010101000000';
	ПустойАдрес = ",,,,,,,,,";
	
	Организация = Организация.ПолучитьОбъект();
	Организация.Прочитать();
	
	Кэш = Новый Структура;
	Кэш.Вставить("Организация", Организация);
	Кэш.Вставить("ДатаЗначения", ДатаЗначения);
	
	ИдКонф = ИДКонфигурации();
	ПБОЮЛ = Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;

	Кэш.Вставить("ПБОЮЛ", ПБОЮЛ);

	Если СписокПоказателей = Неопределено Тогда
		
		СписокПоказателей = Новый Массив;
		СписокПоказателей.Добавить("АдрЮР");

	ИначеЕсли ТипЗнч(СписокПоказателей) = Тип("Строка") Тогда

		СписокПоказателейСтрока = СписокПоказателей;
		СписокПоказателей = Новый Массив;
		ВхождениеЗапятой = Найти(СписокПоказателейСтрока, ",");
		Пока ВхождениеЗапятой <> 0 Цикл
			ИмяПоказателя = СокрЛП(Лев(СписокПоказателейСтрока, ВхождениеЗапятой - 1));
			СписокПоказателейСтрока = Сред(СписокПоказателейСтрока, ВхождениеЗапятой + 1);
			Если ПустаяСтрока(ИмяПоказателя) Тогда
				Продолжить;
			КонецЕсли;
			СписокПоказателей.Добавить(ИмяПоказателя);
			ВхождениеЗапятой = Найти(СписокПоказателейСтрока, ",");
		КонецЦикла;
		ИмяПоказателя = СокрЛП(СписокПоказателейСтрока);
		Если НЕ ПустаяСтрока(ИмяПоказателя) Тогда
			СписокПоказателей.Добавить(ИмяПоказателя);
		КонецЕсли;
		
	КонецЕсли;
	
	ЭтоМассив = (ТипЗнч(СписокПоказателей) = Тип("Массив"));
	
	Для Каждого Показатель Из СписокПоказателей Цикл

		ИмяПоказателя = ?(ЭтоМассив, Показатель, Показатель.Представление);
		
		Если ИмяПоказателя = "АдрЮР" Тогда

			Результат = ПолучитьСУчетомКэшаДляКонтрагента(Кэш, "ЮрАдресОрганизации");

			Если Результат <> Неопределено Тогда
				Значение = АдресВФормате9Запятых(Результат);
			Иначе
				Значение = ПустойАдрес;
			КонецЕсли;
			
			Если ПустаяСтрока(Значение) Тогда
				Значение = ПустойАдрес;
			КонецЕсли;

		Иначе

			Значение = "";//если вернуть строку - больше шансов угадать, так как большинство сведений - строковые

		КонецЕсли;

		ОргСведения.Вставить(ИмяПоказателя, Значение);

	КонецЦикла;

	Возврат ОргСведения;

КонецФункции // ПолучитьСведенияОбОрганизации()

// Функция возвращает информацию об организации с учетом предыдущих обращений к сведениям.
// Параметры:
//		Кэш - структура, содержащая информацию с данными об организации, которые запрашивались ранее (кэш сведений);
//		Параметр - строка, имя запрашиваемого параметра;
//		ФизЛицо - переменная типа СправочникСсылка.ФизическиеЛица. Параметр необязателен, необходим 
//			для получения лишь некоторых параметров (сведений об ответственных лицах организации).
// Возвращаемое значение:
//		Значение запрашиваемого параметра, полученное с учетом кэша.
Функция ПолучитьСУчетомКэшаДляКонтрагента(Кэш, Параметр, ФизЛицо = Неопределено)

	Перем ЗначениеПараметра;
	Перем Ставки;

	Если Кэш.Свойство(Параметр, ЗначениеПараметра) Тогда
		Возврат ЗначениеПараметра;
	КонецЕсли;

	Если Параметр = "ЮрАдресОрганизации" Тогда
		Данные = Новый Структура("Объект, Тип, Вид", Кэш.Организация.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
		Результат = РегистрыСведений.КонтактнаяИнформация.Получить(Данные);

	КонецЕсли;

	Кэш.Вставить(Параметр, Результат);
	Возврат Результат;

КонецФункции // ПолучитьСУчетомКэшаДляКонтрагента

Функция ЭтоФормаБаланса(Форма)
	
	ИмяОбъектаМетаданных = Форма.ЭтотОбъект.Метаданные().Имя;
	Возврат (ИмяОбъектаМетаданных = "РегламентированныйОтчетБаланс" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетФорма2" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетФорма3" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетФорма4" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетФорма5" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетФорма6"
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетБухОтчетность");
		
КонецФункции

Функция ЭтоФормаАлкогольнойОтчетности(Форма)
	
	ИмяОбъектаМетаданных = Форма.ЭтотОбъект.Метаданные().Имя;
	Возврат (ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение1" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение2" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение3" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение4" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение5" 
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение6"
		ИЛИ ИмяОбъектаМетаданных = "РегламентированныйОтчетАлкоПриложение7");
		
КонецФункции

// Пытается напечатать регламентированный отчет.
//
// Параметры:
//	ДокументСсылка.РегламентированныйОтчет - отчет, который требуется напечатать.
//	ВидПечати - одно из двух значений: "ПоказатьБланк", если требуется показать окно
//										предварительного просмотра;
//									   "ПечататьСразу", если требуется вывести на печать
//										без предварительного просмотра.
//	ПроверятьСоотношенияПриПечатиИВыгрузки - признак проверки контрольных соотношений
//
// Возвращаемое значение:
//	Булево - Истина, если отчет удалось распечатать; Ложь - в противном случае.
//
Функция НапечататьОтчеты(Док, ВидПечати = "ПоказатьБланк", Форма = Неопределено, ПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено) Экспорт
	
	ПредПросмотр = роПолучитьОбщуюФорму("ПечатьРегламентированныхОтчетов", Форма);
	Если ПредПросмотр.Открыта() Тогда
		ПредПросмотр.Закрыть();
	КонецЕсли;
	
	Для Каждого Стр Из Док Цикл
		
		ОбработкаПрерыванияПользователя();
		
		Попытка
			
			Отчет = ИнициализацияОтчета(Стр.Значение, Форма);
			Если Отчет = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Отказ = Ложь;
			ПередОткрытиемФормыРегламентированногоОтчета(Отчет, Отказ);
			Если Отказ Тогда
				Возврат Ложь;
			КонецЕсли;
			
			Отчет.Инициализация(Истина);
			
			Если ПроверятьСоотношенияПриПечатиИВыгрузки <> Неопределено И ПроверятьСоотношенияПриПечатиИВыгрузки <> 2 Тогда
				Попытка
					Отчет.мПроверятьСоотношенияПриПечатиИВыгрузки = ПроверятьСоотношенияПриПечатиИВыгрузки;
				Исключение
				КонецПопытки;
			КонецЕсли;
			
			Отчет.Печать(ВидПечати);
			Отчет = Неопределено;
			
		Исключение
			
			Сообщить(ПредставлениеДокументаРеглОтч(Стр.Значение) + ". Не удалось напечатать отчет! Вероятно, отчетом не предусмотрена возможность печати без открытия формы.", СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецФункции

Функция ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(Док) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Возврат "";
	КонецЕсли;
	
	ГодДокСтрока = Формат(Год(Док.ПериодПо), "ЧГ=");
	МесяцДок = Месяц(Док.ПериодПо);
	Если МесяцДок = 1 Тогда
		Возврат "По итогам января " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 2 Тогда
		Возврат "По итогам февраля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 3 Тогда
		Возврат "По итогам I квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 4 Тогда
		Возврат "По итогам апреля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 5 Тогда
		Возврат "По итогам мая " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 6 Тогда
		Возврат "По итогам II квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 7 Тогда
		Возврат "По итогам июля " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 8 Тогда
		Возврат "По итогам августа " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 9 Тогда
		Возврат "По итогам III квартала " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 10 Тогда
		Возврат "По итогам октября " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 11 Тогда
		Возврат "По итогам ноября " + ГодДокСтрока + "г.";
	ИначеЕсли МесяцДок = 12 Тогда
		Возврат "По итогам " + ГодДокСтрока + "г.";
	КонецЕсли;
	
КонецФункции

// Пытается выгрузить регламентированные отчеты.
//
// Параметры:
//	ДокументСсылка.РегламентированныйОтчет - отчет, коотрый требуется выгрузить.
// Возвращаемое значение:
//	Булево - Истина, если отчет удалось выгрузить; Ложь - в противном случае.
//
Функция ВыгрузитьОтчеты(Доки) Экспорт
	
	Попытка
		Если ТипЗнч(Доки) <> Тип("СписокЗначений") ИЛИ Доки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Для Каждого Док Из Доки Цикл
			Если Док.Значение.Организация <> Доки.Получить(0).Значение.Организация Тогда
				Предупреждение("У выбранных отчетов различаются реквизиты ""Организация"". Пакетная выгрузка невозможна!");
				Возврат Истина;
			КонецЕсли;
			Если КонецДня(Док.Значение.ДатаОкончания) <> КонецДня(Доки.Получить(0).Значение.ДатаОкончания) Тогда
				Предупреждение("У выбранных отчетов различаются даты окончания периодов составления. Пакетная выгрузка невозможна!");
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
		НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	 	НовыйДок.ПолучитьФорму().СформироватьИЗаписать(Доки, , , , , Истина);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Пытается выгрузить регламентированные отчеты.
//
// Параметры:
//	ДокументСсылка.РегламентированныйОтчет - отчет, коотрый требуется выгрузить.
//
// Возвращаемое значение:
//	Булево - Истина, если отчет удалось выгрузить; Ложь - в противном случае.
//
Функция ПроверитьРегламентированныеОтчеты(Доки) Экспорт
	
	Попытка
		Если ТипЗнч(Доки) <> Тип("СписокЗначений") ИЛИ Доки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		//Для Каждого Док Из Доки Цикл
		//	Если Док.Значение.Организация <> Доки.Получить(0).Значение.Организация Тогда
		//		Предупреждение("У выбранных отчетов различаются реквизиты ""Организация"". Выгрузка невозможна!");
		//		Возврат Истина;
		//	КонецЕсли;
		//	Если КонецДня(Док.Значение.ДатаОкончания) <> КонецДня(Доки.Получить(0).Значение.ДатаОкончания) Тогда
		//		Предупреждение("У выбранных отчетов различаются даты окончания периодов составления. Проверка невозможна!");
		//		Возврат Истина;
		//	КонецЕсли;
		//КонецЦикла;
		НовыйДок = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
		НовыйДок.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним);
	 	НовыйДок.ПолучитьФорму().Проверить(Доки);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ПриНажатииНаКнопкуПереходаВРежимВводаДанных(Форма) Экспорт
	
	Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РасширитьПолеБланка.Пометка = НЕ Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РасширитьПолеБланка.Пометка;
	Если Форма.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РасширитьПолеБланка.Пометка Тогда
		Форма.ЭлементыФормы.ПанельЭУВерхняя.Свертка = РежимСверткиЭлементаУправления.Верх;
		Если Форма.ЭлементыФормы.Найти("ПанельЭУНижняя") <> Неопределено Тогда
			Форма.ЭлементыФормы.ПанельЭУНижняя.Свертка = РежимСверткиЭлементаУправления.Низ;
		КонецЕсли;
	Иначе
		Форма.ЭлементыФормы.ПанельЭУВерхняя.Свертка = РежимСверткиЭлементаУправления.Нет;
		Если Форма.ЭлементыФормы.Найти("ПанельЭУНижняя") <> Неопределено Тогда
			Форма.ЭлементыФормы.ПанельЭУНижняя.Свертка = РежимСверткиЭлементаУправления.Нет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция АвтосохранениеВозможно(Форма) Экспорт

	Возврат Форма.мЗаписьЗапрещена <> Истина И Форма.мСохраненныйДок <> Неопределено И Форма.мСохраненныйДок <> Новый("ДокументОбъект.РегламентированныйОтчет") И Форма.Модифицированность;
		
КонецФункции

Функция СвойствоОпределено(Объект, ИмяСвойства) Экспорт
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ МАШИНОЧИТАЕМЫХ ФОРМ ОТЧЕТА
//

Процедура ОбработатьОшибкуМодуляПечати(ОписаниеОшибки)
	
	КодОшибки = Сред(ОписаниеОшибки, Найти(ОписаниеОшибки, "0x"), 10);
	
	ТекстПредупреждения = "";
	Если КодОшибки = "0x80040004" ИЛИ КодОшибки = "0x80040005" Тогда
		ТекстПредупреждения = "Не удалось установить параметр печати!";
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = "При попытке печати в компоненте печати возникла неизвестная ошибка!";
	ИначеЕсли КодОшибки = "0x80040032" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти файл выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x80040033" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к файлу выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x8004000A" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000B" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000F" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать версию формата выгрузки из текста выгрузки!";
	ИначеЕсли КодОшибки = "0x80040010" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать форму по КНД в файле выгрузки!";
	ИначеЕсли КодОшибки = "0x80040014" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось сформировать машиночитаемую форму по причине некорректного файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004003C" Тогда
		Если Вопрос("Отсутствует шаблон для формирования машиночитаемой формы!
						|Возможно, необходимо зарегистрировать в информационной базе внешний шаблон.
						|Показать список зарегистрированных шаблонов?",
						 РежимДиалогаВопрос.ДаНет
						,
						,
						, "Ошибка при формировании машиночитаемой формы") = КодВозвратаДиалога.Да Тогда
			РегистрыСведений.ШаблоныПечатиМашиночитаемыхФорм.ПолучитьФормуСписка().Открыть();
		КонецЕсли;
		Возврат;
	ИначеЕсли КодОшибки = "0x80040046" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти каталог с шаблонами для печати!";
	ИначеЕсли КодОшибки = "0x80040047" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к каталогу с шаблонами для печати!";
	ИначеЕсли КодОшибки = "0x80040050" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось сформировать машиночитаемую форму из-за ошибки в шаблоне печати или подмены шаблона!";
	ИначеЕсли КодОшибки = "0x80050035" Тогда
		ТекстПредупреждения = "Не найдена одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll)!";
	ИначеЕсли КодОшибки = "0x800501C5" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), подменена или устарела!";
	ИначеЕсли КодОшибки = "0x8004006E" Тогда
		ТекстПредупреждения = "Пакет ""Microsoft XML 4.0 SP 2"", используемый компонентой печати, отсутствует или нарушена его целостность!";
	ИначеЕсли КодОшибки = "0x80040078" Тогда
		ТекстПредупреждения = "Пакет ""Windows Script 5.6"", используемый компонентой печати, отсутствует или нарушена его целостность!";
	ИначеЕсли КодОшибки = "0x80050030" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), повреждена!";
	ИначеЕсли КодОшибки = "0x8004003D" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к файлу требуемого шаблона!";
	ИначеЕсли КодОшибки = "0x80040065" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось обнаружить в системе ни одного принтера!";
	ИначеЕсли КодОшибки = "0x80040064" Тогда // печать прервана
		Возврат;
	Иначе
		ТекстПредупреждения = ОписаниеОшибки;
	КонецЕсли;

	ТекстПредупреждения = "Возможно, необходимо переустановить компоненту или вспомогательные библиотеки, используемые ей.
							|Хотите переустановить компоненту сейчас?
							|
							|Подробнее:
							|" + ?(ЗначениеЗаполнено(ТекстПредупреждения), ТекстПредупреждения, "<подробная информация отсутствует>");
	Если Вопрос(ТекстПредупреждения,
				РежимДиалогаВопрос.ДаНет,
				,
				,
				"Ошибка при формировании машиночитаемой формы") = КодВозвратаДиалога.Да Тогда
		Если Вопрос("Сейчас будет запущена программа установки компоненты печати.
						|Возможно, в ходе установки потребуется завершение сеанса работы ""1С:Предприятие"".
						|Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УстановитьКомпонентуПечатиМашиночитаемыхФорм(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива)
	
	Попытка
		УдалитьФайлы(ВремФайлДистрибутива);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция УстановитьКомпонентуПечатиМашиночитаемыхФорм(ЖдатьЗавершения = Истина) Экспорт
	
	МетаданныеМакета = Метаданные.Обработки.ОбщиеОбъектыРегламентированнойОтчетности.Макеты.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	
	// сохраняем дистрибутив во временный файл с расширением = исходное имя файла дистрибутива
	ВремФайлДистрибутива = ПолучитьИмяВременногоФайла(МетаданныеМакета.Синоним);
	ДвоичныеДанныеДистрибутива = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет(МетаданныеМакета.Имя);
	Попытка
		ДвоичныеДанныеДистрибутива.Записать(ВремФайлДистрибутива);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Предупреждение("Не удалось сохранить дистрибутив компоненты печати машиночитаемых форм во временный файл!" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// запускаем инсталляцию
	Попытка
		ЗапуститьПриложение(ВремФайлДистрибутива, , ЖдатьЗавершения);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Предупреждение("При попытке установки компоненты печати машиночитаемых форм произошла ошибка!" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// возвращаем признак
	Если ЖдатьЗавершения Тогда
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Возврат КомпонентаПечатиМашиночитаемыхФормДоступна();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ВывестиМашиночитаемуюФорму(Форма, ИмяКнопки) Экспорт
	
	Отказ = Ложь;
	ПередПечатьюМЧБРегламентированногоОтчета(Форма, Отказ);
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// сохраняем форму, если она не сохранена
	Если Форма.Модифицированность Тогда
		Если Вопрос("Перед печатью отчета требуется сохранить введенную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да
		ИЛИ НЕ Форма.Сохранить() Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	// формируем текст выгрузки во временный файл
	ВремФайл = ПолучитьИмяВременногоФайла();
	Если НЕ СформироватьТекстВыгрузки(Форма, ВремФайл, Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = СформироватьСтруктуруПараметровФайлаВыгрузки(ВремФайл);
	КаталогВремФайлов = КаталогВременныхФайлов();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = "\", КаталогВремФайлов, КаталогВремФайлов + "\");
	ВремКаталог = КаталогВремФайлов + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремКаталог);
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	Если НЕ ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, СтруктураПараметров["КНД"], ?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"])) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	КомпонентаУжеУстанавливалась = Истина;
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
	Если ТаксДокПринт = Неопределено Тогда
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		Если Вопрос("Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.
					|Установить компоненту сейчас?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Результат = Ложь;
		Иначе
			// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
			Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина) Тогда
				Предупреждение("Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.");
				Результат = Ложь;
			Иначе
				ТаксДокПринт = СоздатьОбъектДляФормированияМашичитаемойФормы();
				КомпонентаУжеУстанавливалась = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			НаименованиеИФНС = ОпределитьНаименованиеИФНСПолучателяОтчета(Форма);
			Если ЗначениеЗаполнено(НаименованиеИФНС) Тогда
				ТаксДокПринт.SetPrintTiffParam1C("Наименование налогового органа-получателя", НаименованиеИФНС);
			КонецЕсли;
			Если ИмяКнопки = "ПечататьМашиночитаемыйБланк" Тогда
				ТаксДокПринт.PrintFile(ВремФайл, "", "", 0);
			Иначе
				ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
			КонецЕсли;
			Результат = Истина;
		Исключение
			ОбработатьОшибкуМодуляПечати(ИнформацияОбОшибке().Описание);
			ТаксДокПринт = Неопределено;
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ТаксДокПринт = Неопределено;
	УдалитьВременныйКаталогШаблонов(ВремКаталог);
	Возврат Результат;
	
КонецФункции

Процедура УдалитьВременныйКаталогШаблонов(ВремКаталог)
	
	Попытка
		УдалитьФайлы(ВремКаталог);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьШаблоныПечатиВКаталог(Форма, ВремКаталог, Знач КНД = Неопределено, Знач ВерсияФорматаВыгрузки = Неопределено)
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	// если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон
	КоличествоВыгруженныхШаблонов = 0;
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		ИспользуемыйШаблон = Неопределено;
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	МакетыОтчета = Форма.Метаданные().Макеты;
	Для Каждого МакетОтчета Из МакетыОтчета Цикл
		Если МакетОтчета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные
		И Лев(нрег(МакетОтчета.Имя), СтрДлина(ПрефиксИмениМакетаШаблона)) = нрег(ПрефиксИмениМакетаШаблона) Тогда
			СинонимМакета = СокрЛП(МакетОтчета.Синоним);
			ВхождениеПробела = Найти(СинонимМакета, " ");
			ИмяФайлаШаблона = ?(ВхождениеПробела = 0, СинонимМакета, Лев(СинонимМакета, СтрДлина(ВхождениеПробела - 1)));
			Попытка
				Форма.ПолучитьМакет(МакетОтчета.Имя).Записать(ВремКаталог + ИмяФайлаШаблона);
				КоличествоВыгруженныхШаблонов = КоличествоВыгруженныхШаблонов + 1;
			Исключение
				Сообщить("Не удалось выгрузить шаблон машиночитаемой формы """ + ИмяФайлаШаблона + """ во временный каталог!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// выгружаем внешние шаблоны
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ПрефиксИмениШаблона + "%");
		Если КоличествоВыгруженныхШаблонов = 0 И РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
		КонецЕсли;
	Иначе
		РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				Выборка.Шаблон.Получить().Записать(ВремКаталог + Выборка.ИмяФайлаШаблона);
			Исключение
				Сообщить("Не удалось выгрузить шаблон машиночитаемой формы """ + Выборка.ИмяФайлаШаблона + """ во временный каталог!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ИмяФайлаШаблона = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона,
	                      |	ШаблоныПечатиМашиночитаемыхФорм.Шаблон
	                      |ИЗ
	                      |	РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм КАК ШаблоныПечатиМашиночитаемыхФорм");
	Если ИмяФайлаШаблона <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |ГДЕ
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона ПОДОБНО &ИмяФайлаШаблона
						  |УПОРЯДОЧИТЬ ПО
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона УБЫВ";
		Запрос.УстановитьПараметр("ИмяФайлаШаблона", ИмяФайлаШаблона);
	КонецЕсли;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки)

	ПоказателиВыгрузки = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Истина);
	Исключение
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыгрузки, КодировкаТекста.OEM);
		ТекСтр = Текст.ПрочитатьСтроку();
		Пока ТекСтр <> Неопределено Цикл
			ТекСтр = СокрЛП(ТекСтр);
			ВхождениеДвоеточия = Найти(ТекСтр, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтр, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1)));
			КонецЕсли;
			ТекСтр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		Текст.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Ложь);
	КонецПопытки;
	Возврат ПоказателиВыгрузки;

КонецФункции

Функция ОпределитьНаименованиеИФНСПолучателяОтчета(Форма)
	
	// если это бухгалтерская отчетность, то устанавливать параметр не нужно
	Если ЭтоФормаБаланса(Форма) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем массив полей табличных документов
	МассивТД = Новый Массив;
	ТитульныйТД = Неопределено;
	ТипПолеТД = Тип("ПолеТабличногоДокумента");
	Для Каждого Эл Из Форма.ЭлементыФормы Цикл
		Если ТипЗнч(Эл) = ТипПолеТД Тогда
			МассивТД.Добавить(Эл);
			Если Эл.Имя = "ПолеТабличногоДокументаТитульный" Тогда
				ТитульныйТД = Эл;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// определяем титульный лист
	Если ТитульныйТД = Неопределено Тогда
		Если МассивТД.Количество() = 1 Тогда
			ТитульныйТД = МассивТД[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// извлекаем наименование налогового органа
	ОбластьОргИМНС = ТитульныйТД.Области.Найти("ОргИМНС");
	Если ОбластьОргИМНС <> Неопределено И ОбластьОргИМНС.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник Тогда
		Если ОбластьОргИМНС.СодержитЗначение Тогда
			Возврат СокрЛП(ОбластьОргИМНС.Значение);
		Иначе
			Возврат СокрЛП(ОбластьОргИМНС.Текст);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция КомпонентаПечатиМашиночитаемыхФормДоступна() Экспорт
	
	Возврат (СоздатьОбъектДляФормированияМашичитаемойФормы() <> Неопределено);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ЗарегистрироватьEANGNIVCПриНеобходимости() Экспорт
	
	ВозможныеИменаФайлаШрифтаEANGNIVC = Новый Массив;
	ВозможныеИменаФайлаШрифтаEANGNIVC.Добавить("EANGNIVC.TTF");
	ВозможныеИменаФайлаШрифтаEANGNIVC.Добавить("EANG000.TTF");
	Попытка
		objShell = Новый COMОбъект("Shell.Application");
		objFolder = objShell.Namespace(20);
		ПутьККаталогуШрифтов = objFolder.Items().Item().Path;
		Если Прав(ПутьККаталогуШрифтов, 1) <> "\" Тогда
			ПутьККаталогуШрифтов = ПутьККаталогуШрифтов + "\";
		КонецЕсли;
		ФайлШрифтаСуществует = Ложь;
		Для Каждого ВозможноеИмяФайлаШрифта Из ВозможныеИменаФайлаШрифтаEANGNIVC Цикл
			ОбъектФайлШрифтаВКаталогеШрифтов = Новый Файл(ПутьККаталогуШрифтов + ВозможноеИмяФайлаШрифта);
			Если ОбъектФайлШрифтаВКаталогеШрифтов.Существует() Тогда
				ФайлШрифтаСуществует = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ФайлШрифтаСуществует Тогда
			ВремКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
			СоздатьКаталог(ВремКаталог);
			ВремФайлШрифта = ВремКаталог + ВозможныеИменаФайлаШрифтаEANGNIVC[0];
			Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет("EANGNIVC").Записать(ВремФайлШрифта);
			objFolder.CopyHere(ВремФайлШрифта);
			УдалитьФайлы(ВремКаталог);
		КонецЕсли;
		objFolder = Неопределено;
		objShell = Неопределено;
	Исключение
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура УдалитьКнопкуЗаполненияПоДаннымИБ(Форма, ИмяКнопки = "Заполнить") Экспорт
	
	КоманднаяПанельФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	Если КоманднаяПанельФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиКоманднойПанели = КоманднаяПанельФормы.Кнопки;
	КнопкаЗаполнить = КнопкиКоманднойПанели.Найти(ИмяКнопки);
	Если КнопкаЗаполнить = Неопределено Тогда
		Возврат;
	Иначе
		ИндексКнопкиЗаполнить = КнопкиКоманднойПанели.Индекс(КнопкаЗаполнить);
		КнопкиКоманднойПанели.Удалить(ИндексКнопкиЗаполнить);
		Если КнопкиКоманднойПанели.Количество() > ИндексКнопкиЗаполнить Тогда
			КнопкиКоманднойПанели.Удалить(ИндексКнопкиЗаполнить);
		ИначеЕсли КнопкиКоманднойПанели.Количество() > ИндексКнопкиЗаполнить - 1 Тогда
			КнопкиКоманднойПанели.Удалить(ИндексКнопкиЗаполнить - 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКнопкуРасшифровки(Форма, ИмяКнопки = "Расшифровать") Экспорт
	
	КоманднаяПанельФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	Если КоманднаяПанельФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиКоманднойПанели = КоманднаяПанельФормы.Кнопки;
	КнопкаРасшифровать = КнопкиКоманднойПанели.Найти(ИмяКнопки);
	Если КнопкаРасшифровать = Неопределено Тогда
		Возврат;
	Иначе
		ИндексКнопкиРасшифровать = КнопкиКоманднойПанели.Индекс(КнопкаРасшифровать);
		КнопкиКоманднойПанели.Удалить(ИндексКнопкиРасшифровать);
		Если КнопкиКоманднойПанели.Количество() > ИндексКнопкиРасшифровать Тогда
			КнопкиКоманднойПанели.Удалить(ИндексКнопкиРасшифровать);
		ИначеЕсли КнопкиКоманднойПанели.Количество() > ИндексКнопкиРасшифровать - 1 Тогда
			КнопкиКоманднойПанели.Удалить(ИндексКнопкиРасшифровать - 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПринтерДоступен() Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;
	Возврат ФормированиеПечатныхФорм.ПроверитьВыводТабличногоДокумента(ТаблДок, ТаблДок, Ложь);
	
КонецФункции

// ОКВЭДСоответствуетТребованиям
// Проверяет переданное значение на соответствие требованиям к ОКВЭД
// Параметры:
//  ОКВЭД - строка
// Возвращаемое значение:
// Ложь, Истина
//
Функция ОКВЭДСоответствуетТребованиям(Знач ОКВЭД) Экспорт
	
	ОКВЭД = СокрЛП(ОКВЭД);
	Для Инд = 1 По СтрДлина(ОКВЭД) Цикл
		ТекСимв = Сред(ОКВЭД, Инд, 1);
		Если ТекСимв >= "0" И ТекСимв <= "8" Тогда
			ОКВЭД = Лев(ОКВЭД, Инд - 1) + "9" + Сред(ОКВЭД, Инд + 1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОКВЭД = "99" ИЛИ ОКВЭД = "99.9" ИЛИ ОКВЭД = "99.99" ИЛИ ОКВЭД = "99.99.9" ИЛИ ОКВЭД = "99.99.99";
	
КонецФункции

Функция ПолучитьОрганизациюПоУмолчанию() Экспорт
	
	ИдКонф = ИДКонфигурации();
	Если ИдКонф <> "ББУ" И ИдКонф <> "БГУ" Тогда
		Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Иначе
		Возврат глЗначениеПеременной("глТекущийРазделительУчета");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПризнакУчетаПоВсемОрганизациям() Экспорт
	
	ИДКонфигурации = ИДКонфигурации();
	РедакцияКонфигурации = РедакцияКонфигурации();
	
	Если ИДКонфигурации = "БП" И РедакцияКонфигурации = "1.6" Тогда
		УчетПоВсемОрганизациям = глЗначениеПеременной("УчетПоВсемОрганизациям");
	Иначе
		УчетПоВсемОрганизациям = Истина;
	КонецЕсли;
	
	Возврат УчетПоВсемОрганизациям;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С МЕХАНИЗМОМ ОНЛАЙН-СЕРВИСОВ
//

Функция ПолучитьКонтекстОнлайнСервисов()
	
	Если КонтекстОнлайнСервисовРегламентированнойОтчетности = Неопределено Тогда
		КонтекстОнлайнСервисовРегламентированнойОтчетности = Обработки.ОнлайнСервисыРегламентированнойОтчетности.Создать();
	КонецЕсли;
	Возврат КонтекстОнлайнСервисовРегламентированнойОтчетности;
	
КонецФункции

Процедура АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРОПриНеобходимости()
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Контекст.АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРОПриНеобходимости();
	
КонецПроцедуры

Процедура ПоказатьФормуНастроекМеханизмаОнлайнСервисовРО() Экспорт
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Контекст.ПоказатьФормуНастроек();
	
КонецПроцедуры

Функция ПолучитьНастройкиМеханизмаОнлайнСервисовРО() Экспорт
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Возврат Контекст.ПолучитьНастройкиМеханизмаОнлайнСервисовРО();
	
КонецФункции

Процедура ОткрытьФормуДоступныхОбновленийРО() Экспорт
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Контекст.ОткрытьФормуДоступныхОбновленийРО();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция ПроверкаОнлайнБлокировки(Объект, БлокируемаяФункция = "И")
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Возврат Контекст.ПроверкаОнлайнБлокировки(Объект, БлокируемаяФункция);
	
КонецФункции

Функция ПроверкаФормыПоПериодуПрименения(Форма)
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Возврат Контекст.ПроверкаФормыПоПериодуПрименения(Форма);
	
КонецФункции

Функция ПроверкаФорматаПоПериодуПрименения(Форма)
	
	Контекст = ПолучитьКонтекстОнлайнСервисов();
	Возврат Контекст.ПроверкаФорматаПоПериодуПрименения(Форма);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ

Процедура ПередОткрытиемФормыРегламентированногоОтчета(Форма, Отказ) Экспорт
	
	Если НЕ ПроверкаОнлайнБлокировки(Форма) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ПроверкаФормыПоПериодуПрименения(Форма) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередПечатьюРегламентированногоОтчета(Форма, Отказ) Экспорт
	
	Если НЕ ПроверкаОнлайнБлокировки(Форма, "П") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередПечатьюМЧБРегламентированногоОтчета(Форма, Отказ) Экспорт
	
	Если НЕ ПроверкаОнлайнБлокировки(Форма, "ПВ") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередВыгрузкойРегламентированногоОтчета(Форма, Отказ, ПроверятьБлокировки = Истина) Экспорт
	
	Если ПроверятьБлокировки И НЕ ПроверкаОнлайнБлокировки(Форма, "В") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если ПроверятьБлокировки И НЕ ПроверкаФорматаПоПериодуПрименения(Форма) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаполнениемРегламентированногоОтчета(Форма, Отказ) Экспорт
	
	Если НЕ ПроверкаОнлайнБлокировки(Форма, "З") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытиемОсновнойФормыРаботыСОтчетностью(Отказ) Экспорт
	
	АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРОПриНеобходимости();
	
КонецПроцедуры

Функция СоздатьОбъектДляФормированияМашичитаемойФормы()
	
	Попытка
		Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint2");
	Исключение
		Попытка
			Возврат Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С МЕХАНИЗМОМ ОНЛАЙН-СЕРВИСОВ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТАТУСАМИ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
//

Процедура НачалоВыбораСтатусаВРегламентированномОтчете(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	// формируем список для выбора и показываем его взамен стандартного, чтобы отобразить картинки
	СтатусыРегламентированныхОтчетов = Новый СписокЗначений;
	Для Инд = 1 По Метаданные.Перечисления.СтатусыРегламентированныхОтчетов.ЗначенияПеречисления.Количество() Цикл
		ТекМетаданное = Метаданные.Перечисления.СтатусыРегламентированныхОтчетов.ЗначенияПеречисления.Получить(Инд - 1);
		Если Найти(ТекМетаданное.Имя, "Удалить") = 0 Тогда
			ТекСсылка = Перечисления.СтатусыРегламентированныхОтчетов[ТекМетаданное.Имя];
			СтатусыРегламентированныхОтчетов.Добавить(ТекСсылка, , , КартинкаПоСтатусуРегламентированногоОтчета(ТекСсылка));
		КонецЕсли;
	КонецЦикла;
	
	РезультатВыбора = Форма.ВыбратьИзСписка(СтатусыРегламентированныхОтчетов, , СтатусыРегламентированныхОтчетов.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		Элемент.Картинка = РезультатВыбора.Картинка;
		Форма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСтатусаВРегламентированномОтчете(Форма, Элемент) Экспорт
	
	Элемент.Картинка = КартинкаПоСтатусуРегламентированногоОтчета(Элемент.Значение);
	
КонецПроцедуры

Функция КартинкаПоСтатусуРегламентированногоОтчета(Статус)
	
	Если Статус = Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе Тогда
		Возврат БиблиотекаКартинок.РегламентированныйОтчетВРаботе;
	ИначеЕсли Статус = Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен Тогда
		Возврат БиблиотекаКартинок.РегламентированныйОтчетПодготовлен;
	ИначеЕсли Статус = Перечисления.СтатусыРегламентированныхОтчетов.Сдан Тогда
		Возврат БиблиотекаКартинок.РегламентированныйОтчетСдан;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;
	
КонецФункции

Процедура УстановкаСтатусаПриОткрытииРегламентированногоОтчета(Форма)

	Если Форма.ЭлементыФормы.Найти("Статус") <> Неопределено И Форма.ЭлементыФормы.Статус.Значение = Перечисления.СтатусыРегламентированныхОтчетов.ПустаяСсылка() Тогда
		Если ТипЗнч(Форма.мСохраненныйДок) = Тип("ДокументОбъект.РегламентированныйОтчет") Тогда
			Форма.ЭлементыФормы.Статус.Значение = ПолучитьСтатусРегламентированногоОтчета(Форма.мСохраненныйДок.Ссылка);
		Иначе
			Форма.ЭлементыФормы.Статус.Значение = Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе;
		КонецЕсли;
		Форма.ЭлементыФормы.Статус.Картинка = КартинкаПоСтатусуРегламентированногоОтчета(Форма.ЭлементыФормы.Статус.Значение);
		//КонтекстЭДО.ОтобразитьСостояниеОтправкиВФормеРегламентированногоОтчета(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьСтатусОтчета(докСсылка, Статус) Экспорт
	
	МенЗап = РегистрыСведений.СтатусыРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	МенЗап.Отчет = докСсылка;
	МенЗап.Статус = Статус;
	МенЗап.Записать(Истина);
	
	//Если ПолучитьСтатусРегламентированногоОтчета(докСсылка) <> Статус Тогда
		Оповестить("Изменение статуса регламентированного отчета", Статус, докСсылка);
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтатусРегламентированногоОтчета(Док) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		                |	СтатусыРегламентированныхОтчетов.Статус
		                |ИЗ
		                |	РегистрСведений.СтатусыРегламентированныхОтчетов КАК СтатусыРегламентированныхОтчетов
		                |ГДЕ
		                |	СтатусыРегламентированныхОтчетов.Отчет = &Отчет");
	Запрос.УстановитьПараметр("Отчет", Док);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Получить(0), Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе);
	
КонецФункции

Процедура ОбновитьСтатусВФормеРегламентированногоОтчета(Форма)
	
	Форма.ЭлементыФормы.Статус.Значение = ПолучитьСтатусРегламентированногоОтчета(Форма.мСохраненныйДок.Ссылка);
	Форма.ЭлементыФормы.Статус.Картинка = КартинкаПоСтатусуРегламентированногоОтчета(Форма.ЭлементыФормы.Статус.Значение);
	//КонтекстЭДО.ОтобразитьСостояниеОтправкиВФормеРегламентированногоОтчета(Форма);
	
КонецПроцедуры

Процедура ПрорисоватьПодменюПечать(Форма, ДействиеВстроеннаяПечать = Неопределено, ДействиеПечатьМЧБ = Неопределено, ПринудительнаяПрорисовкаКнопокВстроеннойПечати = Ложь) Экспорт
	
	ПоследовательностьКнопок = Новый Массив;
	ПоследовательностьКнопок.Добавить("ПечататьСразу");
	ПоследовательностьКнопок.Добавить("ПоказатьБланк");
	ПоследовательностьКнопок.Добавить("Разделитель");
	ПоследовательностьКнопок.Добавить("ПечататьМашиночитаемыйБланк");
	ПоследовательностьКнопок.Добавить("ПоказатьМашиночитаемыйБланк");
	
	// находим панель действий
	КоманднаяПанельДействий = Форма.ЭлементыФормы.Найти("КоманднаяПанельДействий");
	Если КоманднаяПанельДействий = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// находим подменю печати
	ПодменюПечати = КоманднаяПанельДействий.Кнопки.Найти("ПодменюПечати");
	Если ПодменюПечати = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// если встроенная печать предусмотрена в отчете или не предусмотрена внешняя
	Если ПринудительнаяПрорисовкаКнопокВстроеннойПечати ИЛИ ДействиеВстроеннаяПечать <> Неопределено Тогда
		
		Если ПринудительнаяПрорисовкаКнопокВстроеннойПечати ИЛИ (СвойствоОпределено(Форма, "мПечатьБезШтрихкодаРазрешена") И Форма.мПечатьБезШтрихкодаРазрешена = Истина) Тогда
			
			Если ПодменюПечати.Кнопки.Найти("ПечататьСразу") = Неопределено Тогда
				ПодменюПечати.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие, "Печатать сразу", ДействиеВстроеннаяПечать);
			КонецЕсли;
			
			Если ПодменюПечати.Кнопки.Найти("ПоказатьБланк") = Неопределено Тогда
				ПодменюПечати.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие, "Показать бланк", ДействиеВстроеннаяПечать);
			КонецЕсли;
			
		Иначе
			
			КнопкаПечататьСразу = ПодменюПечати.Кнопки.Найти("ПечататьСразу");
			Если КнопкаПечататьСразу <> Неопределено Тогда
				ПодменюПечати.Кнопки.Удалить(КнопкаПечататьСразу);
			КонецЕсли;
			
			КнопкаПоказатьБланк = ПодменюПечати.Кнопки.Найти("ПоказатьБланк");
			Если КнопкаПоказатьБланк <> Неопределено Тогда
				ПодменюПечати.Кнопки.Удалить(КнопкаПоказатьБланк);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если внешняя печать не предусмотрена в отчете
	Если ДействиеПечатьМЧБ <> Неопределено Тогда
		
		Если ПодменюПечати.Кнопки.Найти("ПечататьМашиночитаемыйБланк") = Неопределено Тогда
			ПодменюПечати.Кнопки.Добавить("ПечататьМашиночитаемыйБланк", ТипКнопкиКоманднойПанели.Действие, "Печатать сразу бланк формы с двухмерным штрихкодом PDF417", ДействиеПечатьМЧБ);
		КонецЕсли;
		
		Если ПодменюПечати.Кнопки.Найти("ПоказатьМашиночитаемыйБланк") = Неопределено Тогда
			ПодменюПечати.Кнопки.Добавить("ПоказатьМашиночитаемыйБланк", ТипКнопкиКоманднойПанели.Действие, "Показать бланк формы с двухмерным штрихкодом PDF417", ДействиеПечатьМЧБ);
		КонецЕсли;
		
	Иначе
		
		КнопкаПечататьМашиночитаемыйБланк = ПодменюПечати.Кнопки.Найти("ПечататьМашиночитаемыйБланк");
		Если КнопкаПечататьМашиночитаемыйБланк <> Неопределено Тогда
			ПодменюПечати.Кнопки.Удалить(КнопкаПечататьМашиночитаемыйБланк);
		КонецЕсли;
		
		КнопкаПоказатьМашиночитаемыйБланк = ПодменюПечати.Кнопки.Найти("ПоказатьМашиночитаемыйБланк");
		Если КнопкаПоказатьМашиночитаемыйБланк <> Неопределено Тогда
			ПодменюПечати.Кнопки.Удалить(КнопкаПоказатьМашиночитаемыйБланк);
		КонецЕсли;
		
	КонецЕсли;
	
	// добавляем разделитель, если его нет
	Если ПодменюПечати.Кнопки.Количество() > 2 И ДействиеПечатьМЧБ <> Неопределено И ДействиеВстроеннаяПечать <> Неопределено Тогда
		
		Разделитель = ПодменюПечати.Кнопки.Найти("Разделитель");
		Если Разделитель = Неопределено Тогда
			ПодменюПечати.Кнопки.Вставить(2, "Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
		//Иначе
		//	ИндексРазделителя = ПодменюПечати.Кнопки.Индекс(Разделитель);
		//	ПодменюПечати.Кнопки.Сдвинуть(Разделитель, 2 - ИндексРазделителя);
		КонецЕсли;
		
	КонецЕсли;
	
	// сортируем кнопки
	НомерСледующейКнопки = 0;
	Для ИндексКнопки = 0 По ПоследовательностьКнопок.Количество() - 1 Цикл
		
		ТекКнопка = ПодменюПечати.Кнопки.Найти(ПоследовательностьКнопок[ИндексКнопки]);
		Если ТекКнопка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодменюПечати.Кнопки.Сдвинуть(ТекКнопка, НомерСледующейКнопки - ПодменюПечати.Кнопки.Индекс(ТекКнопка));
		
		НомерСледующейКнопки = НомерСледующейКнопки + 1;
		
	КонецЦикла;
	
	Для Каждого ЭлКнопка Из ПоследовательностьКнопок Цикл
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриИнициализацииФормыРегламентированногоОтчета(Форма, КОПолучатель = Неопределено) Экспорт
	
	Если КОПолучатель = "ПФР" Тогда
		
		УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчетаПФР(Форма);
		УстановкаСтатусаПриОткрытииРегламентированногоОтчета(Форма);
		
		Если КонтекстЭДО <> Неопределено Тогда
			КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчетеПФР(Форма);
		Иначе
			СкрытьПанельОтправкиВФормеРегламентированногоОтчета(Форма);
		КонецЕсли;
		
	Иначе
		
		УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчета(Форма);
		УстановкаСтатусаПриОткрытииРегламентированногоОтчета(Форма);
		
		Если КонтекстЭДО <> Неопределено Тогда
			КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчете(Форма);
		Иначе
			СкрытьПанельОтправкиВФормеРегламентированногоОтчета(Форма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//
// РАБОТА СО СТАТУСАМИ РЕГЛАМЕНТИРОВАННЫХ ОТЧЕТОВ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С НАЛОГОВЫМИ ОРГАНАМИ
//

Процедура ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете(Форма, Кнопка) Экспорт
	
	Если КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодДействия = -1;
	ИмяКнопки = Кнопка.Имя;
	
	Если ИмяКнопки = "ПоказатьЦиклыОбмена" Тогда
		КонтекстЭДО.ПоказатьЦиклыОбменаОтчета(Форма.мСохраненныйДок);
	ИначеЕсли ИмяКнопки = "Проверить" Тогда
		КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверки(Форма);
	ИначеЕсли ИмяКнопки = "Подготовить" Тогда
		КодДействия = 0;
	ИначеЕсли ИмяКнопки = "ПодготовитьИПодписать" Тогда
		КодДействия = 1;
	ИначеЕсли ИмяКнопки = "Отправить" Тогда
		КодДействия = 2;
	КонецЕсли;
	Если КодДействия = -1 Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Модифицированность и Вопрос("Для продолжения необходимо сохранить отчет." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Модифицированность И НЕ Форма.Сохранить() Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ОтправкаРегламентированногоОтчета(Форма.мСохраненныйДок.Ссылка, КодДействия, Форма);
	
КонецПроцедуры

Процедура ОбработкаОповещенияОбИзмененииСтатусаРегламентированногоОтчета(Форма, ИмяСобытия, Параметр, Источник, КОПолучатель = Неопределено) Экспорт
	
	Если ИмяСобытия = "Изменение статуса регламентированного отчета" И ЗначениеЗаполнено(Параметр) И Форма.мСохраненныйДок <> Неопределено И Источник = Форма.мСохраненныйДок.Ссылка Тогда
		ЭлементСтатус = Форма.ЭлементыФормы.Найти("Статус");
		Если ЭлементСтатус <> Неопределено Тогда
			ЭлементСтатус.Значение = Параметр;
			ЭлементСтатус.Картинка = КартинкаПоСтатусуРегламентированногоОтчета(ЭлементСтатус.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Если КонтекстЭДО <> Неопределено Тогда
		Если КОПолучатель = "ПФР" Тогда
			КонтекстЭДО.ОбработкаОповещенияФормыРегламентированногоОтчетаПФР(Форма, ИмяСобытия, Параметр, Источник);
		Иначе
			КонтекстЭДО.ОбработкаОповещенияФормыРегламентированногоОтчета(Форма, ИмяСобытия, Параметр, Источник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчета(Форма)
	
	//Если КонтекстЭДО = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	
	КоманднаяПанельФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	Если КоманднаяПанельФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодменюОтправка = КоманднаяПанельФормы.Кнопки.Найти("Отправка");
	Если ПодменюОтправка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияОтчета = Форма.Организация;
	ВидОбменаСКонтролирующимиОрганами = ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами;
	УчетнаяЗаписьОбмена = ОрганизацияОтчета.УчетнаяЗаписьОбмена;
	
	// проверяем, есть ли доступ к учетной записи
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьОбмена) Тогда
		ДоступКУчетнойЗаписиЕсть = Ложь;
	Иначе
		Попытка
			ОбъектУчетнаяЗапись = УчетнаяЗаписьОбмена.ПолучитьОбъект();
			ДоступКУчетнойЗаписиЕсть = (ОбъектУчетнаяЗапись <> 0);
		Исключение
			ДоступКУчетнойЗаписиЕсть = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ДоступКУчетнойЗаписиЕсть
	ИЛИ ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
	ИЛИ НЕ УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьОбмена) Тогда
		
		// удаляем подменю "Отправка"
		КоманднаяПанельФормы.Кнопки.Удалить(ПодменюОтправка);
		
		// удаляем разделитель
		РазделительОтправка = КоманднаяПанельФормы.Кнопки.Найти("РазделительОтправка");
		Если РазделительОтправка <> Неопределено Тогда
			КоманднаяПанельФормы.Кнопки.Удалить(РазделительОтправка);
		КонецЕсли;
		
	ИначеЕсли УчетнаяЗаписьОбмена.ОбменНапрямую ИЛИ НЕ УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов Тогда
		
		// удаляем пункт "Проверить в Интернете"
		КнопкаПроверить = ПодменюОтправка.Кнопки.Найти("Проверить");
		Если КнопкаПроверить <> Неопределено Тогда
			ПодменюОтправка.Кнопки.Удалить(КнопкаПроверить);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьФормуНастроекМеханизмаДокументооборотаСФНС() Экспорт
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ПоказатьФормуНастроек();
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьПанельОтправкиВФормеРегламентированногоОтчета(Форма)
	
	ПанельОтправки = Форма.ЭлементыФормы.Найти("ПанельОтправки");
	Если ПанельОтправки <> Неопределено Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////// 2-НДФЛ

Процедура ПриНажатииНаКнопкуОтправкиВРегламентированномОтчете2НДФЛ(Форма, Кнопка) Экспорт
	
	Если КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// определяем действие
	ИмяКнопки = Кнопка.Имя;
	Если ИмяКнопки = "ПоказатьЦиклыОбмена" Тогда
		КонтекстЭДО.ПоказатьЦиклыОбменаОтчета2НДФЛ(Форма.Ссылка);
		Возврат;
	ИначеЕсли ИмяКнопки = "Подготовить" Тогда
		КодДействия = 0;
	ИначеЕсли ИмяКнопки = "ПодготовитьИПодписать" Тогда
		КодДействия = 1;
	ИначеЕсли ИмяКнопки = "Отправить" Тогда
		КодДействия = 2;
	КонецЕсли;
	Если КодДействия = -1 Тогда
		Возврат;
	КонецЕсли;
	
	// записываем и проводим при необходимости
	ПризнакМодифицированности = Форма.Модифицированность();
	ПризнакПроведенности = Форма.Проведен;
	Если ПризнакМодифицированности ИЛИ НЕ ПризнакПроведенности Тогда
		
		Если ПризнакМодифицированности И НЕ ПризнакПроведенности Тогда
			ТекстВопроса = "Для продолжения необходимо сохранить изменения и провести документ." + Символы.ПС + "Продолжить?";
		ИначеЕсли ПризнакМодифицированности Тогда
			ТекстВопроса = "Для продолжения необходимо сохранить изменения в документе." + Символы.ПС + "Продолжить?";
		ИначеЕсли НЕ ПризнакПроведенности Тогда
			ТекстВопроса = "Для продолжения необходимо провести документ." + Символы.ПС + "Продолжить?";
		КонецЕсли;
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			РезультатЗаписи = Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
		Исключение
			РезультатЗаписи = Ложь;
		КонецПопытки;
		Если НЕ РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// выполняем действие
	Если ИмяКнопки = "Проверить" Тогда
		КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверки(Форма.Ссылка);
	Иначе
		КонтекстЭДО.ОтправкаРегламентированногоОтчета(Форма.Ссылка, КодДействия);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытииФормыРегламентированногоОтчета2НДФЛ(Форма, Действие = Неопределено) Экспорт
	
	УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчета2НДФЛ(Форма, Действие);
	
КонецПроцедуры

Процедура УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчета2НДФЛ(Форма, Действие = Неопределено)
	
	ОрганизацияОтчета = Форма.Организация;
	ОбменЗадействован = (ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате И УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(ОрганизацияОтчета.УчетнаяЗаписьОбмена));
	УчетнаяЗаписьОбмена = ОрганизацияОтчета.УчетнаяЗаписьОбмена;
	
	// проверяем, есть ли доступ к учетной записи
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьОбмена) Тогда
		ДоступКУчетнойЗаписиЕсть = Ложь;
	Иначе
		Попытка
			ОбъектУчетнаяЗапись = УчетнаяЗаписьОбмена.ПолучитьОбъект();
			ДоступКУчетнойЗаписиЕсть = (ОбъектУчетнаяЗапись <> 0);
		Исключение
			ДоступКУчетнойЗаписиЕсть = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ДоступКУчетнойЗаписиЕсть
	ИЛИ НЕ ОбменЗадействован
	ИЛИ НЕ УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗаписьОбмена) Тогда
		СкрытьПодменюОтправкиВФормеРегламентированногоОтчета2НДФЛ(Форма);
		СкрытьПанельОтправкиВФормеРегламентированногоОтчета2НДФЛ(Форма);
	Иначе
		ПрорисоватьПодменюОтправкаВРегламентированномОтчете2НДФЛ(Форма, Действие);
		КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчете2НДФЛ(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрорисоватьПодменюОтправкаВРегламентированномОтчете2НДФЛ(Форма, Действие = Неопределено)
	
	ДействияФормы = Форма.ЭлементыФормы.Найти("ДействияФормы");
	Если ДействияФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияОтчета = Форма.Организация;
	УчетнаяЗаписьОбмена = ОрганизацияОтчета.УчетнаяЗаписьОбмена;
	
	// если подменю уже существует, то выходим
	ПодменюОтправка = ДействияФормы.Кнопки.Найти("Отправка");
	Если ПодменюОтправка = Неопределено Тогда
		
		// находим кнопку-подменю с текстом "Перейти"
		КнопкаПерейти = Неопределено;
		Для Каждого Кн Из ДействияФормы.Кнопки Цикл
			Если Кн.Текст = "Перейти" И Кн.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
				КнопкаПерейти = Кн;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// создаем подменю "Отправка"
		Если КнопкаПерейти = Неопределено ИЛИ ДействияФормы.Автозаполнение Тогда
			ДействияФормы.Кнопки.Добавить("РазделительОтправка", ТипКнопкиКоманднойПанели.Разделитель);
			ПодменюОтправка = ДействияФормы.Кнопки.Добавить("Отправка", ТипКнопкиКоманднойПанели.Подменю, "Отправка");
		Иначе
			ИндексКнопкиПерейти = ДействияФормы.Кнопки.Индекс(КнопкаПерейти);
			ДействияФормы.Кнопки.Вставить(ИндексКнопкиПерейти, "РазделительОтправка", ТипКнопкиКоманднойПанели.Разделитель);
			ПодменюОтправка = ДействияФормы.Кнопки.Вставить(ИндексКнопкиПерейти, "Отправка", ТипКнопкиКоманднойПанели.Подменю, "Отправка");
		КонецЕсли;
		
	КонецЕсли;
	
	// заполняем подменю кнопками
	Если Действие = Неопределено Тогда
		ДействиеОтправка = Новый Действие("КоманднаяПанельФормыДействиеОтправка");
	Иначе
		ДействиеОтправка = Действие;
	КонецЕсли;
	
	// регулируем видимость кнопки Проверить
	Если УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов Тогда
		Если ПодменюОтправка.Кнопки.Найти("Проверить") = Неопределено Тогда
			КнопкаПроверить = ПодменюОтправка.Кнопки.Вставить(0, "Проверить", ТипКнопкиКоманднойПанели.Действие, "Проверить в Интернете", ДействиеОтправка);
			КнопкаПроверить.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
		КонецЕсли;
	Иначе
		КнопкаПроверить = ПодменюОтправка.Кнопки.Найти("Проверить");
		Если КнопкаПроверить <> Неопределено Тогда
			ПодменюОтправка.Кнопки.Удалить(КнопкаПроверить);
		КонецЕсли;
	КонецЕсли;
	
	Если ПодменюОтправка.Кнопки.Найти("Отправить") = Неопределено Тогда
		
		КнопкаОтправить = ПодменюОтправка.Кнопки.Добавить("Отправить", ТипКнопкиКоманднойПанели.Действие, "Отправить", ДействиеОтправка);
		КнопкаОтправить.Картинка = БиблиотекаКартинок.ВКонвертПодписатьИОтправить;
		
		ПодменюОтправка.Кнопки.Добавить("РазделительОтправить", ТипКнопкиКоманднойПанели.Разделитель);
		
		КнопкаОтправить = ПодменюОтправка.Кнопки.Добавить("ПодготовитьИПодписать", ТипКнопкиКоманднойПанели.Действие, "Подготовить к отправке и подписать", ДействиеОтправка);
		КнопкаОтправить.Картинка = БиблиотекаКартинок.ВКонвертИПодписать;
		
		КнопкаОтправить = ПодменюОтправка.Кнопки.Добавить("Подготовить", ТипКнопкиКоманднойПанели.Действие, "Подготовить к отправке", ДействиеОтправка);
		КнопкаОтправить.Картинка = БиблиотекаКартинок.ВКонверт;
		
		ПодменюОтправка.Кнопки.Добавить("РазделительПодготовить", ТипКнопкиКоманднойПанели.Разделитель);
		
		КнопкаПоказатьЦиклыОбмена = ПодменюОтправка.Кнопки.Добавить("ПоказатьЦиклыОбмена", ТипКнопкиКоманднойПанели.Действие, "Показать отправки", ДействиеОтправка);
		КнопкаПоказатьЦиклыОбмена.Картинка = БиблиотекаКартинок.ДокументооборотСКонтролирующимиОрганамиТемныйФон;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьПанельОтправкиВФормеРегламентированногоОтчета2НДФЛ(Форма)
	
	СкрытьПанельОтправкиВФормеРегламентированногоОтчета(Форма); // !!!
	
КонецПроцедуры

Процедура СкрытьПодменюОтправкиВФормеРегламентированногоОтчета2НДФЛ(Форма)
	
	// находим командную панель ДействияФормы
	ДействияФормы = Форма.ЭлементыФормы.Найти("ДействияФормы");
	Если ДействияФормы = Неопределено Тогда
		ДействияФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	КонецЕсли;
	
	Если ДействияФормы <> Неопределено Тогда
		
		// удаляем подменю "Отправка"
		ПодменюОтправка = ДействияФормы.Кнопки.Найти("Отправка");
		Если ПодменюОтправка <> Неопределено Тогда
			ДействияФормы.Кнопки.Удалить(ПодменюОтправка);
		КонецЕсли;
		
		// удаляем разделитель
		РазделительОтправка = ДействияФормы.Кнопки.Найти("РазделительОтправка");
		Если РазделительОтправка <> Неопределено Тогда
			ДействияФормы.Кнопки.Удалить(РазделительОтправка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОрганизацииВРегламентированномОтчете2НДФЛ(Форма, Действие = Неопределено) Экспорт
	
	УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчета2НДФЛ(Форма, Действие);
	
КонецПроцедуры

//
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С НАЛОГОВЫМИ ОРГАНАМИ
////////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАПОЛНЕНИЯ ОТЧЕТОВ ПО ДАННЫМ ИНФОРМАЦИОННОЙ БАЗЫ

Функция ПолучитьСвойстваЗаполненияОтчета(Отчет, Форма) Экспорт
	
	ИмяОбъектаИсточника = "ЗаполнениеРегламентированнойОтчетности";
	ДоступныеИсточники = Новый Массив;
	
	Если ТипЗнч(Отчет) <> Тип("Строка") Тогда
		МетаданныеОтчета = Отчет.Метаданные();
		ИмяМетаданныхОтчета = МетаданныеОтчета.Имя;
		ИмяФормы = ИмяОбъектаИсточника;
		МодульЗаполненияДоступенВОтчете = МетаданныеОтчета.Формы.Найти(ИмяФормы);
		Если МодульЗаполненияДоступенВОтчете <> Неопределено Тогда
			ОбъектФормаЗаполнения = Отчет.ПолучитьФорму(ИмяФормы);
			ДоступныеИсточники.Добавить(ОбъектФормаЗаполнения);
		КонецЕсли;
	Иначе
		ИмяМетаданныхОтчета = Отчет;
	КонецЕсли;
	
	Если Метаданные.ОбщиеМодули.Найти(ИмяОбъектаИсточника) = Неопределено Тогда
		ЗаполнениеРегламентированнойОтчетности = РегламентированнаяОтчетность; // заглушка для компиляции в след. ветке
	Иначе
		ДоступныеИсточники.Добавить(ЗаполнениеРегламентированнойОтчетности);
	КонецЕсли;
	
	Для Инд = 1 По ДоступныеИсточники.Количество() Цикл
		ДоступныйИсточник = ДоступныеИсточники[Инд - 1];
		ВозможностиТекущегоИсточника = ПолучитьВозможностиМодуля(ДоступныйИсточник, ИмяМетаданныхОтчета, Форма);
		Если ЗначениеЗаполнено(ВозможностиТекущегоИсточника) Тогда
			Если ТипЗнч(ВозможностиТекущегоИсточника) = Тип("Массив") ИЛИ ТипЗнч(ВозможностиТекущегоИсточника) = Тип("ТаблицаЗначений") Тогда
				ВозможностиТекущегоИсточника = ВозможностиТекущегоИсточника[0];
			КонецЕсли;
			Результат = Новый Структура;
			Результат.Вставить("ЗаполняемыеПоказатели", ВозможностиТекущегоИсточника.ЗаполняемыеПоказатели);
			Результат.Вставить("ДоступностьРасшифровки", ВозможностиТекущегоИсточника.ДоступностьРасшифровки);
			Результат.Вставить("ИсточникЗаполнения", ДоступныйИсточник);
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПрименитьСвойстваЗаполненияОтчета(Форма, СвойстваЗаполнения, РаскраситьИзМакета = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполнения) Тогда
		ВидимостьКнопкиЗаполнить = Ложь;
		ВидимостьКнопкиРасшифровка = Ложь;
		ЗаполняемыеПоказатели = Неопределено;
	Иначе
		ВидимостьКнопкиЗаполнить = Истина;
		ВидимостьКнопкиРасшифровка = СвойстваЗаполнения.ДоступностьРасшифровки;
		ЗаполняемыеПоказатели = СвойстваЗаполнения.ЗаполняемыеПоказатели;
	КонецЕсли;
	
	Если НЕ ВидимостьКнопкиЗаполнить Тогда
		СкрытьКнопкуЗаполнить(Форма);
	КонецЕсли;
	
	Если НЕ ВидимостьКнопкиРасшифровка Тогда
		СкрытьКнопкуРасшифровка(Форма);
	КонецЕсли;
	
	ПрименитьСвойстваЗаполняемыхПоказателей(Форма, ЗаполняемыеПоказатели, РаскраситьИзМакета);
	
	СкрытьНеиспользуемыеПанелиВариантовЗаполнения(Форма, ЗаполняемыеПоказатели);
	
КонецПроцедуры

Функция ПолучитьДанныеЗаполненияОтчета(ОбъектФорма, Отчет = Неопределено, Форма, _СвойстваЗаполнения = Неопределено, ПараметрыОтчета = Неопределено) Экспорт
	
	Если _СвойстваЗаполнения = Неопределено Тогда
		Если СвойствоОпределено(ОбъектФорма, "СвойстваЗаполненияОтчета") Тогда
			СвойстваЗаполнения = ОбъектФорма.СвойстваЗаполненияОтчета;
		КонецЕсли;
	Иначе
		СвойстваЗаполнения = _СвойстваЗаполнения;
	КонецЕсли;
	
	Если Отчет = Неопределено Тогда
		ИмяМетаданныхОтчета = ОбъектФорма.ЭтотОбъект.Метаданные().Имя;
	Иначе
		ИмяМетаданныхОтчета = ?(ТипЗнч(Отчет) = Тип("Строка"), Отчет, Отчет.Метаданные().Имя);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СвойстваЗаполнения) Тогда
		Возврат Неопределено;
	Иначе
		ПараметрыОтчета = ?(ПараметрыОтчета = Неопределено, СформироватьСтруктуруПараметровОтчетаДляЗаполнения(ОбъектФорма), ПараметрыОтчета);
		Попытка
			Возврат СвойстваЗаполнения.ИсточникЗаполнения.ВернутьДанныеДляЗаполнения(ИмяМетаданныхОтчета, Форма, ПараметрыОтчета);
		Исключение
			Предупреждение("Во время заполнения отчета произошла ошибка:
							|
							|" + ИнформацияОбОшибке().Описание);
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////////

Функция СформироватьСтруктуруПараметровОтчетаДляЗаполнения(Форма) Экспорт
	
	Результат = Новый Структура("Организация, ДатаНачалаПериода, ДатаОкончанияПериода, ДатаПодписи, Периодичность, КодНО");
	
	// заполняем реквизит Организация
	Если СвойствоОпределено(Форма, "мГруппаОрганизаций") Тогда
		МассивОрганизаций = Форма.мГруппаОрганизаций.ВыгрузитьЗначения();
		Если СвойствоОпределено(Форма, "Организация") Тогда
			МассивОрганизаций.Вставить(0, Форма.Организация);
		КонецЕсли;
		Результат.Организация = МассивОрганизаций;
	ИначеЕсли СвойствоОпределено(Форма, "Организация") Тогда
		Результат.Организация = Форма.Организация;
	КонецЕсли;
	
	// заполняем дату начала периода
	Если СвойствоОпределено(Форма, "мДатаНачалаПериодаОтчета") Тогда
		Результат.ДатаНачалаПериода = НачалоДня(Форма.мДатаНачалаПериодаОтчета);
	КонецЕсли;
	
	// заполняем дату окончания периода
	Если СвойствоОпределено(Форма, "мДатаКонцаПериодаОтчета") Тогда
		Результат.ДатаОкончанияПериода = КонецДня(Форма.мДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	// заполняем дату подписи
	Если СвойствоОпределено(Форма, "ДатаПодписи") Тогда
		Результат.ДатаПодписи = Форма.ДатаПодписи;
	КонецЕсли;
	
	// заполняем периодичность
	Если СвойствоОпределено(Форма, "мПериодичность") Тогда
		Результат.Периодичность = Форма.мПериодичность;
	КонецЕсли;
	
	// заполняем код налогового органа
	Результат.КодНО = ПолучитьКодНОИзФормыОтчета(Форма);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодНОИзФормыОтчета(Форма)
	
	ПоляТабличныхДокументов = Новый ТаблицаЗначений;
	ПоляТабличныхДокументов.Колонки.Добавить("Поле");
	ПоляТабличныхДокументов.Колонки.Добавить("Имя");
	
	ТипПолеТабличногоДокумента = Тип("ПолеТабличногоДокумента");
	Для Каждого ЭУ Из Форма.ЭлементыФормы Цикл
		Если ТипЗнч(ЭУ) = ТипПолеТабличногоДокумента Тогда
			НовСтр = ПоляТабличныхДокументов.Добавить();
			НовСтр.Поле = ЭУ;
			НовСтр.Имя = ЭУ.Имя;
		КонецЕсли;
	КонецЦикла;
	
	ВозможныеПоляТитульного = Новый Массив;
	
	РезультатПоиска = ПоляТабличныхДокументов.Найти("ПолеТабличногоДокументаТитульный", "Имя");
	Если РезультатПоиска = Неопределено Тогда
		РезультатПоиска = ПоляТабличныхДокументов.Найти("ПолеТабличногоДокументаФормаОтчета", "Имя");
		Если РезультатПоиска = Неопределено Тогда
			ВозможныеПоляТитульного = ПоляТабличныхДокументов.ВыгрузитьКолонку("Поле");
		Иначе
			ВозможныеПоляТитульного.Добавить(РезультатПоиска.Поле);
		КонецЕсли;
	Иначе
		ВозможныеПоляТитульного.Добавить(РезультатПоиска.Поле);
	КонецЕсли;
	
	ВозможныеПрефиксыИмен = Новый Массив;
	ВозможныеПрефиксыИмен.Добавить("КодИМНС");
	ВозможныеПрефиксыИмен.Добавить("КодИФНС");
	ВозможныеПрефиксыИмен.Добавить("КодНО");
	
	Для Каждого ВозможноеПолеТитульного Из ВозможныеПоляТитульного Цикл
		
		ВозможныеКоллекции = Новый Массив;
		ВозможныеКоллекции.Добавить(ВозможноеПолеТитульного.Области);
		ВозможныеКоллекции.Добавить(ВозможноеПолеТитульного.Рисунки);
		
		Для Каждого ВозможнаяКоллекция Из ВозможныеКоллекции Цикл
			Для Каждого ВозможныйПрефиксИмени Из ВозможныеПрефиксыИмен Цикл
				
				ОбъектыСодержащиеСоставляющиеКода = Новый Массив;
				Для Инд = 1 По 4 Цикл
					Если НЕ СвойствоОпределено(ВозможнаяКоллекция, ВозможныйПрефиксИмени + Инд) Тогда
						Прервать;
					КонецЕсли;
					ОбъектыСодержащиеСоставляющиеКода.Добавить(ВозможнаяКоллекция[ВозможныйПрефиксИмени + Инд]);
				КонецЦикла;
				Если ОбъектыСодержащиеСоставляющиеКода.Количество() <> 4 Тогда
					Продолжить;
				КонецЕсли;
				
				КодИФНС = "";
				Для Инд = 1 По 4 Цикл
					ТекОбъект = ОбъектыСодержащиеСоставляющиеКода[Инд - 1];
					Если ТекОбъект.СодержитЗначение Тогда
						КодИФНС = КодИФНС + СокрЛП(ТекОбъект.Значение);
					Иначе
						КодИФНС = КодИФНС + СокрЛП(ТекОбъект.Текст);
					КонецЕсли;
				КонецЦикла;
				Возврат КодИФНС;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СкрытьНеиспользуемыеПанелиВариантовЗаполнения(Форма, ЗаполняемыеПоказатели)
	
	ПрефиксВИмениЭУДляПанели = "ПанельВариантЗаполнения";
	Для Каждого ЭУ Из Форма.ЭлементыФормы Цикл
		Если Лев(ЭУ.Имя, СтрДлина(ПрефиксВИмениЭУДляПанели)) = ПрефиксВИмениЭУДляПанели Тогда
			Если ТипЗнч(ЗаполняемыеПоказатели) <> Тип("ДеревоЗначений") ИЛИ ЗаполняемыеПоказатели.Строки.Найти(Сред(ЭУ.Имя, СтрДлина(ПрефиксВИмениЭУДляПанели) + 1), "Имя") = Неопределено Тогда
				ЭУ.Свертка = РежимСверткиЭлементаУправления.Низ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьСвойстваЗаполняемыхПоказателей(Форма, ЗаполняемыеПоказатели, РаскраситьИзМакета)
	
	// извлечение свойств из контекста формы
	Если НЕ СвойствоОпределено(Форма, "мСтруктураВариантыЗаполнения") Тогда
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(ЗаполняемыеПоказатели) Тогда
			Если НЕ РаскраситьИзМакета Тогда
			Форма.мСтруктураВариантыЗаполнения.Очистить();
			КонецЕсли;
			Возврат;
		Иначе
			СтруктураВариантыЗаполнения = Форма.мСтруктураВариантыЗаполнения;
		КонецЕсли;
	КонецЕсли;
	
	Если СвойствоОпределено(Форма, "мСтруктураМногостраничныхРазделов") Тогда
		СтруктураМногостраничныхРазделов = Форма.мСтруктураМногостраничныхРазделов;
	Иначе
		СтруктураМногостраничныхРазделов = Новый Структура;
	КонецЕсли;
	
	Если СвойствоОпределено(Форма, "мСтруктураМногострочныхРазделов") Тогда
		СтруктураМногострочныхРазделов = Форма.мСтруктураМногострочныхРазделов;
	Иначе
		СтруктураМногострочныхРазделов = Новый Структура;
	КонецЕсли;
	
	Если СвойствоОпределено(Форма, "мТаблицаСоставПоказателей") Тогда
		ТаблицаСоставПоказателей = Форма.мТаблицаСоставПоказателей;
	Иначе
		ТаблицаСоставПоказателей = Неопределено;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Синхронизация элементов верхнего уровня (разделов)
	
	// для каждого объявленного в дереве ЗаполняемыеПоказатели раздела определяем, если он не определен,
	// соответствующий раздел в структуре мСтруктураВариантыЗаполнения
	Для Каждого Эл Из ЗаполняемыеПоказатели.Строки Цикл
		Если НЕ СтруктураВариантыЗаполнения.Свойство(Эл.Имя) Тогда
			МассивЭкземпляров = Новый Массив;
			МассивЭкземпляровРаздела = Неопределено;
			Если СтруктураМногостраничныхРазделов.Свойство(Эл.Имя, МассивЭкземпляровРаздела) Тогда
				Для Инд = 1 По МассивЭкземпляровРаздела.Количество() Цикл
					МассивЭкземпляров.Добавить(СоздатьТаблицуЗаполняемыхПоказателей());
				КонецЦикла;
			Иначе
				МассивЭкземпляров.Добавить(СоздатьТаблицуЗаполняемыхПоказателей());
			КонецЕсли;
			СтруктураВариантыЗаполнения.Вставить(Эл.Имя, МассивЭкземпляров);
		КонецЕсли;
	КонецЦикла;
	
	//// если в структуре мСтруктураВариантыЗаполнения задан раздел, которого нет в дереве
	//// ЗаполняемыеПоказатели, то удалим определение этого раздела из структуры
	//УдаляемыеРазделы = Новый Массив;
	//Для Каждого Эл Из СтруктураВариантыЗаполнения Цикл
	//	Если ЗаполняемыеПоказатели.Строки.Найти(Эл.Ключ, "Имя") = Неопределено Тогда
	//		УдаляемыеРазделы.Добавить(Эл.Ключ);
	//	КонецЕсли;
	//КонецЦикла;
	//Для Каждого УдаляемыйРаздел Из УдаляемыеРазделы Цикл
	//	Если СтруктураВариантыЗаполнения.Свойство(УдаляемыйРаздел) Тогда
	//		СтруктураВариантыЗаполнения.Удалить(УдаляемыйРаздел);
	//	КонецЕсли;
	//КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////
	// Синхронизация элементов нижнего уровня (показателей)
	КолонкаЗаполняетсяСКорректировкойДоступна = (ЗаполняемыеПоказатели.Колонки.Найти("ЗаполняетсяСКорректировкой") <> Неопределено);
	
	// перебираем элементы первого уровня дерева ЗаполняемыеПоказатели
	Для Каждого ЭлУровня1ЗаполняемыеПоказатели Из ЗаполняемыеПоказатели.Строки Цикл
		
		ЭлУровня1СтруктураВариантыЗаполнения = СтруктураВариантыЗаполнения[ЭлУровня1ЗаполняемыеПоказатели.Имя];
		
		// перебираем элементы второго уровня дерева ЗаполняемыеПоказатели, т.е. сами показатели
		Для Каждого ЭлУровня2ЗаполняемыеПоказатели Из ЭлУровня1ЗаполняемыеПоказатели.Строки Цикл
			
			РезультатПоиска = ТаблицаСоставПоказателей.Найти(ЭлУровня2ЗаполняемыеПоказатели.Имя, "КодПоказателяПоФорме");
			Если РезультатПоиска = Неопределено Тогда
				РезультатПоиска = ТаблицаСоставПоказателей.Найти(ЭлУровня2ЗаполняемыеПоказатели.Имя, "КодПоказателяПоСоставу");
			КонецЕсли;
			Если РезультатПоиска = Неопределено Тогда
				ИгнорироватьПоказатель = Истина;
				Для Каждого Эл Из СтруктураМногострочныхРазделов Цикл
					ТаблицаСтруктурыМногострочнойЧасти = Эл.Значение;
					Если ТипЗнч(ТаблицаСтруктурыМногострочнойЧасти) = Тип("ТаблицаЗначений") И ТаблицаСтруктурыМногострочнойЧасти.Колонки.Найти(ЭлУровня2ЗаполняемыеПоказатели.Имя) <> Неопределено Тогда
						ИгнорироватьПоказатель = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ИгнорироватьПоказатель Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			// получаем вариант заполнения показателя...
			ПоказательЗаполняетсяСКорректировкой = ?(КолонкаЗаполняетсяСКорректировкойДоступна, ЭлУровня2ЗаполняемыеПоказатели.ЗаполняетсяСКорректировкой = Истина, Ложь);
			ВариантЗаполненияПоказателя = ?(ПоказательЗаполняетсяСКорректировкой, 2, 3);
			
			// ...и устанавлвиаем его на всех экземплярах текущего раздела
			Для Каждого ЭкземплярРаздела Из ЭлУровня1СтруктураВариантыЗаполнения Цикл
				
				РезультатПоиска = ЭкземплярРаздела.НайтиСтроки(Новый Структура("КодПоказателя", ЭлУровня2ЗаполняемыеПоказатели.Имя));
				Если РезультатПоиска.Количество() = 0 Тогда
					
					// если строки с таким кодом не найдены, то создаем такую строку
					НовСтр = ЭкземплярРаздела.Добавить();
					НовСтр.КодПоказателя = ЭлУровня2ЗаполняемыеПоказатели.Имя;
					НовСтр.ВариантЗаполнения = ВариантЗаполненияПоказателя;
					Если ТаблицаСоставПоказателей <> Неопределено Тогда
						СтрокаПоказателяВТаблицеСоставаПоказателей = ТаблицаСоставПоказателей.Найти(НовСтр.КодПоказателя, "КодПоказателяПоФорме");
						Если СтрокаПоказателяВТаблицеСоставаПоказателей = Неопределено Тогда
							СтрокаПоказателяВТаблицеСоставаПоказателей = ТаблицаСоставПоказателей.Найти(НовСтр.КодПоказателя, "КодПоказателяПоСоставу");
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаПоказателяВТаблицеСоставаПоказателей) И ТаблицаСоставПоказателей.Колонки.Найти("КодПоказателяПоСтруктуре") <> Неопределено Тогда
							НовСтр.КодПоказателяПоСтруктуре = СтрокаПоказателяВТаблицеСоставаПоказателей.КодПоказателяПоСтруктуре;
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					
					// если строки с таким кодом найдены, то изменяем ВариантЗаполнения
					Для Каждого СтрПоказатель Из РезультатПоиска Цикл
						Если СтрПоказатель.ВариантЗаполнения <> 2 И СтрПоказатель.ВариантЗаполнения <> 3 И СтрПоказатель.ВариантЗаполнения <> 4 Тогда
							СтрПоказатель.ВариантЗаполнения = ВариантЗаполненияПоказателя;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// перебираем элементы второго уровня структуры СтруктураВариантыЗаполнения
		Для Каждого ТаблицаЭкземпляраРаздела Из ЭлУровня1СтруктураВариантыЗаполнения Цикл
			
			// если показатель не встречается в таблице заполняемых, то добавляем строку показателя в удаляемые
			УдаляемыеСтроки = Новый Массив;
			Для Каждого Стр Из ТаблицаЭкземпляраРаздела Цикл
				Если (Стр.ВариантЗаполнения = 2 Или Стр.ВариантЗаполнения = 3) И ЭлУровня1ЗаполняемыеПоказатели.Строки.Найти(Стр.КодПоказателя, "Имя") = Неопределено Тогда
					УдаляемыеСтроки.Добавить(Стр);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
				ТаблицаЭкземпляраРаздела.Удалить(УдаляемаяСтрока);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.мСтруктураВариантыЗаполнения = СтруктураВариантыЗаполнения;
	
КонецПроцедуры

Функция СоздатьТаблицуЗаполняемыхПоказателей()
	
	ОписаниеТиповСтрока	= Новый ОписаниеТипов("Строка");
	ОписаниеТиповЧисло	= Новый ОписаниеТипов("Число");
	
	ТаблицаВариантыЗаполнения = Новый ТаблицаЗначений;
	ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателя",				ОписаниеТиповСтрока);
	ТаблицаВариантыЗаполнения.Колонки.Добавить("ВариантЗаполнения",			ОписаниеТиповЧисло);
	ТаблицаВариантыЗаполнения.Колонки.Добавить("ЗначениеАвто",				ОписаниеТиповЧисло);
	ТаблицаВариантыЗаполнения.Колонки.Добавить("Дельта",					ОписаниеТиповЧисло);
	ТаблицаВариантыЗаполнения.Колонки.Добавить("Комментарий",				ОписаниеТиповСтрока);
	ТаблицаВариантыЗаполнения.Колонки.Добавить("КодПоказателяПоСтруктуре",	ОписаниеТиповСтрока);
	
	Возврат ТаблицаВариантыЗаполнения;
	
КонецФункции

Процедура УдалитьКнопкуСРазделителем(Форма, ВозможныеИменаКнопки = Неопределено, ВозможныеЗаголовкиКнопки = Неопределено)
	
	КоманднаяПанельФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	Если КоманднаяПанельФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемаяКнопка = Неопределено;
	
	Если ЗначениеЗаполнено(ВозможныеИменаКнопки) Тогда
		Для Каждого ВозможноеИмяКнопки Из ВозможныеИменаКнопки Цикл
			УдаляемаяКнопка = КоманднаяПанельФормы.Кнопки.Найти(ВозможноеИмяКнопки);
			Если УдаляемаяКнопка <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если УдаляемаяКнопка = Неопределено И ЗначениеЗаполнено(ВозможныеЗаголовкиКнопки) Тогда
		Для Каждого Кнопка Из КоманднаяПанельФормы.Кнопки Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель И ВозможныеЗаголовкиКнопки.Найти(Кнопка.Текст) <> Неопределено Тогда
				УдаляемаяКнопка = Кнопка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если УдаляемаяКнопка <> Неопределено Тогда
		
		УдаляемыйРазделитель = Неопределено;
		ЧислоКнопокПанели = КоманднаяПанельФормы.Кнопки.Количество();
		ИндексУдаляемойКнопки = КоманднаяПанельФормы.Кнопки.Индекс(УдаляемаяКнопка);
		
		Если ЧислоКнопокПанели <> ИндексУдаляемойКнопки + 1 Тогда
			КнопкаПослеУдаляемой = КоманднаяПанельФормы.Кнопки.Получить(ИндексУдаляемойКнопки + 1);
			Если КнопкаПослеУдаляемой.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
				УдаляемыйРазделитель = КнопкаПослеУдаляемой;
			КонецЕсли;
		КонецЕсли;
		
		Если УдаляемыйРазделитель = Неопределено Тогда
			Если ИндексУдаляемойКнопки <> 0 Тогда
				КнопкаПередУдаляемой = КоманднаяПанельФормы.Кнопки.Получить(ИндексУдаляемойКнопки - 1);
				Если КнопкаПередУдаляемой.ТипКнопки = ТипКнопкиКоманднойПанели.Разделитель Тогда
					УдаляемыйРазделитель = КнопкаПередУдаляемой;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		КоманднаяПанельФормы.Кнопки.Удалить(УдаляемаяКнопка);
		Если УдаляемыйРазделитель <> Неопределено Тогда
			КоманднаяПанельФормы.Кнопки.Удалить(УдаляемыйРазделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкрытьКнопкуЗаполнить(Форма)
	
	ВозможныеИменаКнопки = Новый Массив;
	ВозможныеИменаКнопки.Добавить("Заполнить");
	ВозможныеИменаКнопки.Добавить("ЗаполнитьАвто");
	
	ВозможныеЗаголовкиКнопки = Новый Массив;
	ВозможныеЗаголовкиКнопки.Добавить("Заполнить");
	
	УдалитьКнопкуСРазделителем(Форма, ВозможныеИменаКнопки, ВозможныеЗаголовкиКнопки);
	
КонецПроцедуры

Процедура СкрытьКнопкуРасшифровка(Форма)
	
	ВозможныеИменаКнопки = Новый Массив;
	ВозможныеИменаКнопки.Добавить("Расшифровка");
	ВозможныеИменаКнопки.Добавить("Расшифровать");
	
	ВозможныеЗаголовкиКнопки = Новый Массив;
	ВозможныеЗаголовкиКнопки.Добавить("Расшифровка");
	
	УдалитьКнопкуСРазделителем(Форма, ВозможныеИменаКнопки, ВозможныеЗаголовкиКнопки);
	
КонецПроцедуры

Функция ПолучитьВозможностиМодуля(Источник, Отчет = Неопределено, Форма = Неопределено)
	
	Попытка
		СвойстваЗаполнения = Источник.ВозможностиМодуля(Отчет, Форма);
		Возврат СвойстваЗаполнения;
	Исключение
		Сообщить("Ошибка при попытке получения возможностей заполнения отчета:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С НАЛОГОВЫМИ ОРГАНАМИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С ПФР
//

Процедура ПриОткрытииФормыРегламентированногоОтчетаПФР(Форма, Действие = Неопределено) Экспорт
	
	УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчетаПФР(Форма, Действие);
	
КонецПроцедуры

Процедура СкрытьПанельОтправкиВФормеРегламентированногоОтчетаПФР(Форма)
	
	СкрытьПанельОтправкиВФормеРегламентированногоОтчета(Форма); // !!!
	
КонецПроцедуры

Процедура УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчетаПФР(Форма, Действие = Неопределено)
	
	ОрганизацияОтчета = Форма.Организация;
	ОбменЗадействован = (ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате И УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(ОрганизацияОтчета.УчетнаяЗаписьОбмена));
	УчетнаяЗаписьОбмена = ОрганизацияОтчета.УчетнаяЗаписьОбмена;
	
	// проверяем, есть ли доступ к учетной записи
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьОбмена) Тогда
		ДоступКУчетнойЗаписиЕсть = Ложь;
	Иначе
		Попытка
			ОбъектУчетнаяЗапись = УчетнаяЗаписьОбмена.ПолучитьОбъект();
			ДоступКУчетнойЗаписиЕсть = (ОбъектУчетнаяЗапись <> 0);
		Исключение
			ДоступКУчетнойЗаписиЕсть = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ДоступКУчетнойЗаписиЕсть
	ИЛИ НЕ ОбменЗадействован
	ИЛИ НЕ УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗаписьОбмена) Тогда
		СкрытьПодменюОтправкиВФормеРегламентированногоОтчетаПФР(Форма);
		СкрытьПанельОтправкиВФормеРегламентированногоОтчетаПФР(Форма);
	Иначе
		ПрорисоватьПодменюОтправкаВРегламентированномОтчетеПФР(Форма, Действие);
		КонтекстЭДО.ОбновитьСтатусОтправкиВРегламентированномОтчетеПФР(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСПФР(УчетнаяЗапись) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// пытаемся получить объект
	Попытка
		УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
	Исключение
		УчетнаяЗаписьОбъект = 0;
	КонецПопытки;
	Если УчетнаяЗаписьОбъект = 0 Тогда // к объекту нет доступа или объект удален
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетнаяЗаписьОбъект.ПредназначенаДляДокументооборотаСПФР;
	
КонецФункции

Функция УчетнаяЗаписьПредназначенаДляДокументооборотаСФНС(УчетнаяЗапись) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// пытаемся получить объект
	Попытка
		УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
	Исключение
		УчетнаяЗаписьОбъект = 0;
	КонецПопытки;
	Если УчетнаяЗаписьОбъект = 0 Тогда // к объекту нет доступа или объект удален
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетнаяЗаписьОбъект.ПредназначенаДляДокументооборотаСФНС;
	
КонецФункции

Процедура СкрытьПодменюОтправкиВФормеРегламентированногоОтчетаПФР(Форма)
	
	// находим командную панель ДействияФормы
	ДействияФормы = Форма.ЭлементыФормы.Найти("ДействияФормы");
	Если ДействияФормы = Неопределено Тогда
		ДействияФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
	КонецЕсли;
	
	Если ДействияФормы <> Неопределено Тогда
		
		// удаляем подменю "Отправка"
		ПодменюОтправка = ДействияФормы.Кнопки.Найти("Отправка");
		Если ПодменюОтправка <> Неопределено Тогда
			ДействияФормы.Кнопки.Удалить(ПодменюОтправка);
		КонецЕсли;
		
		// удаляем разделитель
		РазделительОтправка = ДействияФормы.Кнопки.Найти("РазделительОтправка");
		Если РазделительОтправка <> Неопределено Тогда
			ДействияФормы.Кнопки.Удалить(РазделительОтправка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрорисоватьПодменюОтправкаВРегламентированномОтчетеПФР(Форма, Действие = Неопределено)
	
	Если НЕ СвойствоОпределено(Форма, "мСохраненныйДок") Тогда
	
		ДействияФормы = Форма.ЭлементыФормы.Найти("ДействияФормы");
		Если ДействияФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОрганизацияОтчета = Форма.Организация;
		УчетнаяЗаписьОбмена = ОрганизацияОтчета.УчетнаяЗаписьОбмена;
		
		// если подменю уже существует, то выходим
		ПодменюОтправка = ДействияФормы.Кнопки.Найти("Отправка");
		Если ПодменюОтправка = Неопределено Тогда
			
			// находим кнопку-подменю с текстом "Перейти"
			КнопкаПерейти = Неопределено;
			Для Каждого Кн Из ДействияФормы.Кнопки Цикл
				Если Кн.Текст = "Перейти" И Кн.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
					КнопкаПерейти = Кн;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// создаем подменю "Отправка"
			Если КнопкаПерейти = Неопределено ИЛИ ДействияФормы.Автозаполнение Тогда
				ДействияФормы.Кнопки.Добавить("РазделительОтправка", ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюОтправка = ДействияФормы.Кнопки.Добавить("Отправка", ТипКнопкиКоманднойПанели.Подменю, "Отправка");
			Иначе
				ИндексКнопкиПерейти = ДействияФормы.Кнопки.Индекс(КнопкаПерейти);
				ДействияФормы.Кнопки.Вставить(ИндексКнопкиПерейти, "РазделительОтправка", ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюОтправка = ДействияФормы.Кнопки.Вставить(ИндексКнопкиПерейти, "Отправка", ТипКнопкиКоманднойПанели.Подменю, "Отправка");
			КонецЕсли;
			
		КонецЕсли;
		
		// заполняем подменю кнопками
		Если Действие = Неопределено Тогда
			ДействиеОтправка = Новый Действие("КоманднаяПанельФормыДействиеОтправка");
		Иначе
			ДействиеОтправка = Действие;
		КонецЕсли;
		
		// регулируем видимость кнопки Проверить
		Если УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов Тогда
			Если ПодменюОтправка.Кнопки.Найти("Проверить") = Неопределено Тогда
				КнопкаПроверить = ПодменюОтправка.Кнопки.Вставить(0, "Проверить", ТипКнопкиКоманднойПанели.Действие, "Проверить в Интернете", ДействиеОтправка);
				КнопкаПроверить.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
			КонецЕсли;
		Иначе
			КнопкаПроверить = ПодменюОтправка.Кнопки.Найти("Проверить");
			Если КнопкаПроверить <> Неопределено Тогда
				ПодменюОтправка.Кнопки.Удалить(КнопкаПроверить);
			КонецЕсли;
		КонецЕсли;
		
		// прорисовываем специфические для АДВ-6-2 пункты в подменю Отправка
		Если Форма.Метаданные().Реквизиты.Найти("РасчетСтраховыхВзносов") <> Неопределено Тогда
			
			Если ПодменюОтправка.Кнопки.Найти("РазделительПоказатьРСВ") = Неопределено Тогда
				ПодменюОтправка.Кнопки.Вставить(0, "РазделительПоказатьРСВ", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли;
			
			Если ПодменюОтправка.Кнопки.Найти("ПоказатьРСВ") = Неопределено Тогда
				КнопкаПоказатьРСВ = ПодменюОтправка.Кнопки.Вставить(0, "ПоказатьРСВ", ТипКнопкиКоманднойПанели.Действие, "Показать связанный РСВ-1", ДействиеОтправка);
			КонецЕсли;
			ПодменюОтправка.Кнопки.ПоказатьРСВ.Доступность = ЗначениеЗаполнено(Форма.РасчетСтраховыхВзносов);
			
			Если ПодменюОтправка.Кнопки.Найти("СвязатьСРСВ") = Неопределено Тогда
				КнопкаСвязатьСРСВ = ПодменюОтправка.Кнопки.Вставить(0, "СвязатьСРСВ", ТипКнопкиКоманднойПанели.Действие, "Связать с РСВ-1", ДействиеОтправка);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПодменюОтправка.Кнопки.Найти("Отправить") = Неопределено Тогда
			
			КнопкаОтправить = ПодменюОтправка.Кнопки.Добавить("Отправить", ТипКнопкиКоманднойПанели.Действие, "Отправить", ДействиеОтправка);
			КнопкаОтправить.Картинка = БиблиотекаКартинок.ВКонвертПодписатьИОтправить;
			
			ПодменюОтправка.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			
			КнопкаПоказатьЦиклыОбмена = ПодменюОтправка.Кнопки.Добавить("ПоказатьЦиклыОбмена", ТипКнопкиКоманднойПанели.Действие, "Показать отправки", ДействиеОтправка);
			КнопкаПоказатьЦиклыОбмена.Картинка = БиблиотекаКартинок.ДокументооборотСКонтролирующимиОрганамиТемныйФон;
			
		КонецЕсли;
		
	Иначе
		
		ДействияФормы = Форма.ЭлементыФормы.Найти("КоманднаяПанельФормы");
		Если ДействияФормы = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОрганизацияОтчета = Форма.Организация;
		УчетнаяЗаписьОбмена = ОрганизацияОтчета.УчетнаяЗаписьОбмена;
		
		// если подменю уже существует, то выходим
		ПодменюОтправка = ДействияФормы.Кнопки.Найти("Отправка");
		Если ПодменюОтправка = Неопределено Тогда
			
			// находим кнопку-подменю с текстом "Перейти"
			ПодменюВыгрузка = Неопределено;
			Для Каждого Кн Из ДействияФормы.Кнопки Цикл
				Если Кн.Текст = "Выгрузка" И Кн.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
					ПодменюВыгрузка = Кн;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// создаем подменю "Отправка"
			Если ПодменюВыгрузка = Неопределено Тогда
				ДействияФормы.Кнопки.Добавить("РазделительОтправка", ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюОтправка = ДействияФормы.Кнопки.Добавить("Отправка", ТипКнопкиКоманднойПанели.Подменю, "Отправка");
			Иначе
				ИндексПодменюВыгрузка = ДействияФормы.Кнопки.Индекс(ПодменюВыгрузка);
				ДействияФормы.Кнопки.Вставить(ИндексПодменюВыгрузка + 2, "РазделительОтправка", ТипКнопкиКоманднойПанели.Разделитель);
				ПодменюОтправка = ДействияФормы.Кнопки.Вставить(ИндексПодменюВыгрузка, "Отправка", ТипКнопкиКоманднойПанели.Подменю, "Отправка");
			КонецЕсли;
			
		КонецЕсли;
		
		// заполняем подменю кнопками
		ДействиеОтправка = Новый Действие("КоманднаяПанельФормыДействиеОтправка");
		
		// регулируем видимость кнопки Проверить
		Если УчетнаяЗаписьОбмена.ИспользоватьСервисОнлайнПроверкиОтчетов Тогда
			Если ПодменюОтправка.Кнопки.Найти("Проверить") = Неопределено Тогда
				КнопкаПроверить = ПодменюОтправка.Кнопки.Вставить(0, "Проверить", ТипКнопкиКоманднойПанели.Действие, "Проверить в Интернете", ДействиеОтправка);
				КнопкаПроверить.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
			КонецЕсли;
		Иначе
			КнопкаПроверить = ПодменюОтправка.Кнопки.Найти("Проверить");
			Если КнопкаПроверить <> Неопределено Тогда
				ПодменюОтправка.Кнопки.Удалить(КнопкаПроверить);
			КонецЕсли;
		КонецЕсли;
		
		Если ПодменюОтправка.Кнопки.Найти("Отправить") = Неопределено Тогда
			
			КнопкаОтправить = ПодменюОтправка.Кнопки.Добавить("Отправить", ТипКнопкиКоманднойПанели.Действие, "Отправить", ДействиеОтправка);
			КнопкаОтправить.Картинка = БиблиотекаКартинок.ВКонвертПодписатьИОтправить;
			
			ПодменюОтправка.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			
			КнопкаПоказатьЦиклыОбмена = ПодменюОтправка.Кнопки.Добавить("ПоказатьЦиклыОбмена", ТипКнопкиКоманднойПанели.Действие, "Показать отправки", ДействиеОтправка);
			КнопкаПоказатьЦиклыОбмена.Картинка = БиблиотекаКартинок.ДокументооборотСКонтролирующимиОрганамиТемныйФон;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОрганизацииВРегламентированномОтчетеПФР(Форма, Действие = Неопределено) Экспорт
	
	УправлениеВидимостьюЭлементовОтправкиРегламентированногоОтчетаПФР(Форма, Действие);
	
КонецПроцедуры

Процедура ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеПФР(Форма, Кнопка) Экспорт
	
	Если КонтекстЭДО = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКнопки = Кнопка.Имя;
	
	Если СвойствоОпределено(Форма, "мСохраненныйДок") Тогда
		
		Если ИмяКнопки = "ПоказатьЦиклыОбмена" Тогда
			мСохраненныйДок = Форма.мСохраненныйДок;
			Если мСохраненныйДок = Неопределено Тогда
				Предупреждение("Отчет не записан.");
				Возврат;
			КонецЕсли;
			КонтекстЭДО.ПоказатьЦиклыОбменаОтчетаПФР(мСохраненныйДок.Ссылка);
			Возврат;
		КонецЕсли;
		
		Если Форма.Модифицированность Тогда
			Если Вопрос("Для сохранения необходимо сохранить отчет." + Символы.ПС + "Продолжить?",РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да ИЛИ НЕ Форма.Сохранить() Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ИмяКнопки = "Проверить" Тогда
			КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверкиПФР(Форма);
		Иначе
			КонтекстЭДО.ОтправкаРегламентированногоОтчетаВПФР(Форма.мСохраненныйДок.Ссылка, , Форма);
		КонецЕсли;
		
	Иначе
		
		Если ИмяКнопки = "ПоказатьЦиклыОбмена" Тогда
			КонтекстЭДО.ПоказатьЦиклыОбменаОтчетаПФР(Форма.Ссылка);
			Возврат;
		ИначеЕсли ИмяКнопки = "ПоказатьРСВ" Тогда
			КонтекстЭДО.ПоказатьСвязанныйРСВ(Форма);
			Возврат;
		ИначеЕсли ИмяКнопки = "СвязатьСРСВ" Тогда
			Если КонтекстЭДО.СвязатьСРСВ(Форма) Тогда
				ПрорисоватьПодменюОтправкаВРегламентированномОтчетеПФР(Форма);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		ПризнакМодифицированности = Форма.Модифицированность();
		ПризнакПроведенности = Форма.Проведен;
		Если ПризнакМодифицированности ИЛИ НЕ ПризнакПроведенности Тогда
			
			Если ПризнакМодифицированности И НЕ ПризнакПроведенности Тогда
				ТекстВопроса = "Для продолжения необходимо сохранить изменения и провести документ." + Символы.ПС + "Продолжить?";
			ИначеЕсли ПризнакМодифицированности Тогда
				ТекстВопроса = "Для продолжения необходимо сохранить изменения в документе." + Символы.ПС + "Продолжить?";
			ИначеЕсли НЕ ПризнакПроведенности Тогда
				ТекстВопроса = "Для продолжения необходимо провести документ." + Символы.ПС + "Продолжить?";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Попытка
				РезультатЗаписи = Форма.ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				РезультатЗаписи = Ложь;
			КонецПопытки;
			Если НЕ РезультатЗаписи Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяКнопки = "Проверить" Тогда
			КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверкиПФР(Форма);
		Иначе
			КонтекстЭДО.ОтправкаРегламентированногоОтчетаВПФР(Форма.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С ПФР
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С ФСС
//

Функция ВопросПредупреждение(ОсновнойТекст, ТекстПереключатель1, ТекстПереключатель2) Экспорт
	
	ФормаВопроса = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ВопросПредупреждение", , Новый УникальныйИдентификатор);
	ФормаВопроса.ОсновнойТекст = ОсновнойТекст;
	ФормаВопроса.ЭлементыФормы.ПереключательСогласен.Заголовок = ТекстПереключатель1;
	ФормаВопроса.ЭлементыФормы.ПереключательСогласен2.Заголовок = ТекстПереключатель2;
	Возврат (ФормаВопроса.ОткрытьМодально() = КодВозвратаДиалога.Да);
	
КонецФункции

Функция ПолучитьРезультатЗапросаGet(АдресСервера, РесурсСервера)
	
	// инициализируем настройки прокси, если они определены
	НастройкиПрокси = ПолучитьНастройкиПрокси();
	Если ЗначениеЗаполнено(НастройкиПрокси.ИмяПользователя) Тогда
		Прокси = Новый ИнтернетПрокси;
		Прокси.Пользователь = НастройкиПрокси.ИмяПользователя;
		Прокси.Пароль = НастройкиПрокси.Пароль;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	// устанавливаем соединение с сервером
	Попытка
		Соединение = Новый HTTPСоединение(АдресСервера, , , , Прокси);
	Исключение
		Сообщить("Не удалось установить соединение с сервером онлайн-проверки:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// посылаем запрос
	ФайлРезультата = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(РесурсСервера, ФайлРезультата);
		Соединение = Неопределено;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФайлРезультата;
	
КонецФункции

Функция ИзвлечьИзФайлаТаблицуОбработки(ФайлОтвета)
	ТЗОбработки = Новый ТаблицаЗначений;
	ТЗОбработки.Колонки.Добавить("СтадияОбработки");
	ТЗОбработки.Колонки.Добавить("Статус");
	ТЗОбработки.Колонки.Добавить("Дата");
	ТЗОбработки.Колонки.Добавить("КодОшибки");
	ТЗОбработки.Колонки.Добавить("ОписаниеОшибки");
	ТЗОбработки.Колонки.Добавить("Действие");
	
	ЧтениеHTML = Новый ЧтениеHTML;
	ЧтениеHTML.ОткрытьФайл(ФайлОтвета); 
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеHTML);
	
	ЭлементыTABLE = ДокументDOM.ПолучитьЭлементыПоИмени("TABLE");
	СтрокиТаблицыHTML = ЭлементыTABLE[2].ДочерниеУзлы;
	
	//перебираем все строки из таблицы обработки, первая строка таблицы (индекс 0)- заголовки - не используем
	КолвоСтрок = СтрокиТаблицыHTML.Количество();
	Для НомСтроки = 1 По (КолвоСтрок - 1) Цикл
		СтрокаТаблицыHTML = СтрокиТаблицыHTML[НомСтроки];
		НоваяСтрокаТЗ = ТЗОбработки.Добавить();
	    //перебираем ячейки строки таблицы (выделяя их из общего списка узлов по типу), заполняем ТЗ
		УзлыСтрокиHTML = СтрокаТаблицыHTML.ДочерниеУзлы;
		НомЯчейки = 0;
		Для каждого УзелСтрокиHTML Из УзлыСтрокиHTML Цикл
			Если УзелСтрокиHTML.ТипУзла = ТипУзлаDOM.Элемент Тогда
				НоваяСтрокаТЗ[НомЯчейки] = СокрЛП(УзелСтрокиHTML.ТекстовоеСодержимое);
				НомЯчейки = НомЯчейки + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла; 
	
	Возврат ТЗОбработки;
КонецФункции

Функция ЕстьОшибкиСтатуса(ТЗОбработки)
	Для каждого СтрокаТЗ Из ТЗОбработки Цикл
		Если СтрокаТЗ.Статус = "Ошибка" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

	Возврат Ложь;
КонецФункции

Функция ГенерироватьHTMLПротоколаОбработки(ИдентификаторОтчета, ТЗОбработки, ПротоколОшибок, СтатусОтчета, ЦветСтатуса)
	ТабДок = Новый ТабличныйДокумент;
	
	Шаблон = Справочники.ОтправкиФСС.ПолучитьМакет("ШаблонДляHTML");
	
	СекцияШапка = Шаблон.ПолучитьОбласть("Шапка");
    СекцияШапка.Параметры.Заголовок = "Информация по отчету " + ИдентификаторОтчета;
	ТабДок.Вывести(СекцияШапка);
	
	СекцияСтрока = Шаблон.ПолучитьОбласть("Строка");
	Для каждого СтрокаТЗ Из ТЗОбработки Цикл
		СекцияСтрока.Параметры.Заполнить(СтрокаТЗ);		
		ТабДок.Вывести(СекцияСтрока);
	КонецЦикла;
	
	СекцияПодвал = Шаблон.ПолучитьОбласть("Подвал");
	ТабДок.Вывести(СекцияПодвал);
	
	Если ПротоколОшибок <> "" Тогда
		СекцияПротоколОшибок = Шаблон.ПолучитьОбласть("ПротоколОшибок");
		СекцияПротоколОшибок.Параметры.ПротоколОшибок = ПротоколОшибок;
		ТабДок.Вывести(СекцияПротоколОшибок);
	КонецЕсли;
	
	СекцияСтатусОтчета = Шаблон.ПолучитьОбласть("СтатусОтчета");
	СекцияСтатусОтчета.Параметры.СтатусОтчета = СтатусОтчета;
	СекцияСтатусОтчета.Области.СтатусОтчета.ЦветТекста = ЦветСтатуса;
	
	ТабДок.Вывести(СекцияСтатусОтчета);

	ИмяТемпФайла = ПолучитьИмяВременногоФайла();
	ТабДок.Записать(ИмяТемпФайла, ТипФайлаТабличногоДокумента.HTML);
	ТекстHTML = Новый ТекстовыйДокумент;
    ТекстHTML.Прочитать(ИмяТемпФайла);
    ТекстHTML = ТекстHTML.ПолучитьТекст();
	
	Возврат ТекстHTML;
КонецФункции 

Функция ПолучитьРезультатОтправкиФСС(ИдентификаторОтправкиНаСервере) Экспорт
	
	ПовторятьСоединение = Истина;
	СсылкаКвитанция = "";
	СсылкаПротоколОшибок = "";
	СтатусОтчета = "";
	ЦветСтатуса = Новый Цвет(0, 0, 192);
	СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
	
	Пока ПовторятьСоединение Цикл                                   
		
		//запрос протокола обработки
		АдресСервера = "f4.fss.ru";
		РесурсСервера = "/fss/statusreport?id=" + ИдентификаторОтправкиНаСервере;
		ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, РесурсСервера);
			
		Если ФайлРезультата <> Неопределено Тогда
			// получен протокол обработки
			ПовторятьСоединение = Ложь;
			
			// извлекаем таблицу обработки из файла результата
			ТЗОбработки = ИзвлечьИзФайлаТаблицуОбработки(ФайлРезультата);
			
			// читаем содержимое протокола обработки
			ОбъектЧтение = Новый ЧтениеТекста(ФайлРезультата);
			стрРезультатОбработки = СокрЛП(ОбъектЧтение.Прочитать());
			
			ОбъектЧтение.Закрыть();
			
			// анализируем содержимое страницы протокола обработки			
			Если Найти(стрРезультатОбработки, "invoice?id") > 0 Тогда
				// есть ссылка на квитанцию - отчет принят
				СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;	
				СсылкаКвитанция = "invoice?id=" + ИдентификаторОтправкиНаСервере;
				
				Если Найти(стрРезультатОбработки, "invoice?lid") > 0 Тогда
					// есть ссылка на протокол ошибок логического контроля
					СсылкаПротоколОшибок = "invoice?lid=" + ИдентификаторОтправкиНаСервере;
					СтатусОтчета = "Отчет принят, обнаружены ошибки при логическом контроле."; 
					ЦветСтатуса = Новый Цвет(255, 0, 0);
				Иначе
					СтатусОтчета = "Отчет принят, ошибок не обнаружено."; 
					ЦветСтатуса = Новый Цвет(0, 179, 16);
				КонецЕсли;
				
			ИначеЕсли Найти(стрРезультатОбработки, "invoice?fid") > 0 Тогда
				// есть ссылка на протокол ошибок форматного контроля - отчет не принят
				СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;	
				СсылкаПротоколОшибок = "invoice?fid=" + ИдентификаторОтправкиНаСервере;
				СтатусОтчета = "Отчет не принят, обнаружены ошибки при форматном контроле."; 
				ЦветСтатуса = Новый Цвет(255, 0, 0);
				
			ИначеЕсли ЕстьОшибкиСтатуса(ТЗОбработки) Тогда
				СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;	
				СтатусОтчета = "Отчет не принят, обнаружены ошибки.";
				ЦветСтатуса = Новый Цвет(255, 0, 0);
			Иначе
				//отчет ещё не обработан
				СтатусОтчета = "Отчет находится в обработке.";
			КонецЕсли;
			
			ПротоколОшибок = "";
			Если СсылкаПротоколОшибок <> "" Тогда
				//по полученной ссылке скачаем протокол ошибок
				ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, СсылкаПротоколОшибок);
				// считаем содержимое протокола ошибок
				ОбъектЧтение = Новый ЧтениеТекста(ФайлРезультата);
				ПротоколОшибок = СокрЛП(ОбъектЧтение.Прочитать());
			КонецЕсли;
			
			Протокол = ГенерироватьHTMLПротоколаОбработки(ИдентификаторОтправкиНаСервере, ТЗОбработки, ПротоколОшибок, СтатусОтчета, ЦветСтатуса);
			
			//заполняем результирующую структуру
			Результат = Новый Структура("ДатаПолученияРезультата, СтатусОтправки, Протокол, Квитанция");
			Результат.Вставить("ДатаПолученияРезультата", ТекущаяДата());
			Результат.Вставить("Протокол", Протокол);
			Результат.Вставить("СтатусОтправки", СтатусОтправки);

			Если СсылкаКвитанция <> "" Тогда
				//по полученной ссылке скачаем квитанцию
				ФайлРезультата = ПолучитьРезультатЗапросаGet(АдресСервера, СсылкаКвитанция);
				Квитанция = Новый ДвоичныеДанные(ФайлРезультата);
				Результат.Вставить("Квитанция", Квитанция);
			КонецЕсли;
			
		Иначе
			Результат = Неопределено;
			// возможно, проблемы с доступом в интернет
			ПовторятьСоединение = РегламентированнаяОтчетность.ПоказатьДиалогОшибкиДоступаВИнтернет("Не удалось обратиться к серверу ФСС РФ");	
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьРезультатОтправкиФСС()

Процедура ПоказатьПротоколОбработки(HTMLТекст, Заголовок) Экспорт
	ФормаОтображенияHTML = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаОтображенияHTML", , Новый УникальныйИдентификатор);
	ФормаОтображенияHTML.Заголовок = Заголовок;
	ФормаОтображенияHTML.HTMLТекст = HTMLТекст;
	ФормаОтображенияHTML.Открыть();
КонецПроцедуры

Функция ПолучитьНастройкиПрокси() Экспорт
	
	ИмяПользователя = ВосстановитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_ИмяПользователя");
	Пароль = ВосстановитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_Пароль");
	Возврат Новый Структура("ИмяПользователя, Пароль", ИмяПользователя, Пароль);
	
КонецФункции

Функция ПоказатьДиалогОшибкиДоступаВИнтернет(ОписаниеОшибки) Экспорт
	
	ФормаОшибкаДоступаВИнтернет = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ОшибкаДоступаВИнтернет");
	ФормаОшибкаДоступаВИнтернет.ОписаниеОшибки = ОписаниеОшибки;
	ПовторятьСоединение = Ложь;
	Попытка
		ПовторятьСоединение = ФормаОшибкаДоступаВИнтернет.ОткрытьМодально();
	Исключение
	КонецПопытки;
	
	Возврат (ПовторятьСоединение = Истина);
	
КонецФункции

//
// ПРОЦЕДУРЫ И ФУНКЦИИ СТЫКОВКИ С ПОДСИСТЕМОЙ ЗАЩИЩЕННОГО ЭЛЕКТРОННОГО
// ДОКУМЕНТООБОРОТА С ФСС
////////////////////////////////////////////////////////////////////////////////

#КонецЕсли
