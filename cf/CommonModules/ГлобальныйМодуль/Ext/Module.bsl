///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ 

Функция ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД = "") Экспорт
			
	СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);
	
	// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
	ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");
	
	Возврат ПозицияПоиска = 1;	
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ОЖИДАНИЯ

#Если Клиент Тогда
// Процедура выполняет отключение пользователей от информационной 
// базы в случае, если был запущен сеанс с параметром "ЗавершитьРаботуПользователей"
//
Процедура КонтрольРежимаЗавершенияРаботыПользователей() Экспорт

	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = УправлениеСоединениямиИБ.УстановленаБлокировкаСоединений();
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ВремяОкончанияБлокировки = ТекущийРежим.Конец;
	
	ИнтервалПредупреждения    = УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	ИнтервалЗакрытьСЗапросом  = 0;
	ИнтервалЗакрытьБезЗапроса = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 5;
	ИнтервалПрекратить        = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей() / 2.5;
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена Тогда
		
		Если ВремяОкончанияБлокировки <> '00010101' И ТекущийМомент > ВремяОкончанияБлокировки Тогда
			Возврат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПрекратить Тогда
			
			ПрекратитьРаботуСистемы(Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьБезЗапроса Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы завершается" + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			ЗавершитьРаботуСистемы(Ложь, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалЗакрытьСЗапросом Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы завершается" + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			ЗавершитьРаботуСистемы(Истина, Истина);
			
		ИначеЕсли ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалПредупреждения Тогда
			
			Сообщение = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
			Предупреждение("Работа системы будет завершена в " + ВремяНачалаБлокировки + ?(ПустаяСтрока(Сообщение), ".", " " + Сообщение), 30);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

// Завершение работы только при условии удачной установки монопольного режима работы
// Вызывается, только при запуске системы от имени администратора с параметром запуска "ЗавершитьРаботуПользователей"
//
Процедура ЗавершитьРаботуПользователей() Экспорт

	Соединения = ПолучитьСоединенияИнформационнойБазы();
	
	Если Соединения.Количество() = 1 Тогда
		// Отключены все пользователи, кроме текущего сеанса
		// В последнюю очередь завершается сеанс, запущенный с параметром "ЗавершитьРаботуПользователей".
		// Такой порядок отключений необходим для обновления конфигурации с помощью пакетного файла
		
		ЗавершитьРаботуСистемы(Ложь);
		
		Возврат;
	КонецЕсли; 
	
	// Получим текущее значение параметров блокировки
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	БлокировкаУстановлена = ТекущийРежим.Установлена;
	ВремяНачалаБлокировки = ТекущийРежим.Начало;
	ИнтервалОтключения    = - УправлениеСоединениямиИБ.ИнтервалОжиданияЗавершенияРаботыПользователей();
	ТекущийМомент = ТекущаяДата();
	
	Если БлокировкаУстановлена И
		(НЕ ЗначениеЗаполнено(ВремяНачалаБлокировки) 
			ИЛИ ВремяНачалаБлокировки - ТекущийМомент <= ИнтервалОтключения) Тогда
			
		// после начала блокировки сеансы всех пользователей должны быть отключены	
		// если этого не произошло пробуем принудительно прервать соединения
		ОтключитьОбработчикОжидания("ЗавершитьРаботуПользователей");
		
		// Невозможно принудительно отсоединить подключения в файловом режиме работы
		Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
			УправлениеСоединениямиИБ.РазрешитьРаботуПользователей();
			Сообщение = УправлениеСоединениямиИБ.ПолучитьНазванияСоединенийИБ("Не удалось завершить работу пользователей:");
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
			ЗавершитьРаботуСистемы(Ложь);
			Возврат;	
		КонецЕсли;	
		
		ПараметрыАдминистрированияИБ = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
		ПараметрыЗапуска = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПараметрЗапуска,";");
		Если ПараметрыЗапуска.Количество() > 1 Тогда
			ПараметрыАдминистрированияИБ.ИмяАдминистратораИБ = Врег(ПараметрыЗапуска[1]);
		КонецЕсли;
		Если ПараметрыЗапуска.Количество() > 2 Тогда
			ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ = Врег(ПараметрыЗапуска[2]);
		КонецЕсли;
		
		Результат = УправлениеСоединениямиИБ.ОтключитьСоединенияИБ(ПараметрыАдминистрированияИБ);
		Если Результат Тогда
			Сообщить("Завершение работы пользователей выполнено успешно.", СтатусСообщения.Информация);
			ЗавершитьРаботуСистемы(Ложь);
		Иначе
			Сообщение = УправлениеСоединениямиИБ.ПолучитьНазванияСоединенийИБ("Не удалось завершить работу пользователей:");
			Сообщить(Сообщение, СтатусСообщения.Внимание);
			ЗаписьЖурналаРегистрации("Завершение работы пользователей", УровеньЖурналаРегистрации.Предупреждение, , , Сообщение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

#Если НЕ Клиент И НЕ ВнешнееСоединение Тогда

Функция глЗначениеПеременной(Имя) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();
	КэшИзменен = Ложь;
	ПолученноеЗначение = ОбщегоНазначения.ПолучитьЗначениеПеременной(Имя, Кэш, КэшИзменен);
	
	Если КэшИзменен Тогда
		ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);
	КонецЕсли;
	
	Возврат ПолученноеЗначение;
	
КонецФункции

// Процедура установки значения экспортных переменных модуля приложения
//
// Параметры
//  Имя - строка, содержит имя переменной целиком
// 	Значение - значение переменной
//
Процедура глЗначениеПеременнойУстановить(Имя, Значение, ОбновлятьВоВсехКэшах = Ложь) Экспорт
	
	Кэш = ПараметрыСеанса.ОбщиеЗначения.Получить();	
	ОбщегоНазначения.УстановитьЗначениеПеременной(Имя, Кэш, Значение);
	ПараметрыСеанса.ОбщиеЗначения = Новый ХранилищеЗначения(Кэш);	
	
КонецПроцедуры


#КонецЕсли

#Если Клиент Тогда
// Процедура перезапуска сеанса работы с программой
Процедура ПерезапуститьСеансРаботыСПрограммой() Экспорт
	
	ЗавершитьРаботуСистемы(Истина, Истина);
	
КонецПроцедуры

// процедура служит для поддержки работы регламентных заданий в файловой версии
Процедура ПоддержкаРегламентныхЗаданиеДляФайловойВерсии() Экспорт
	
	ВыполнитьОбработкуЗаданий();
	
КонецПроцедуры


// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
//
Процедура ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ() Экспорт

	// Если в конфигурации после старта текущего сеанса что-то изменилось
	Если КонфигурацияБазыДанныхИзмененаДинамически() Тогда


		// Завершим проверку обновления
		ЗавершитьПроверкуДинамическогоОбновленияИБ();

		// Спросим пользователя о его желании перезапустить сеанс
		ТекстВопроса = "В конфигурацию ИБ внесены изменения." + Символы.ПС +
						"Для работы с ними рекомендуется перезапустить программу." + Символы.ПС +
						"Перезапустить?";
		РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

		// Если пользователь не хочет перезапускать сеанс
		Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
			// Запустим проверку обновления опять
			НачатьПроверкуДинамическогоОбновленияИБ();
			Возврат;
		КонецЕсли;

	
		// Попробуем перезапустить
		ПерезапуститьСеансРаботыСПрограммой();

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
//

// Начинает проверку динамического обновления конфигурации ИБ
//
Процедура НачатьПроверкуДинамическогоОбновленияИБ()Экспорт
	
	// проверка дин. обновления конфигурации каждые 20 мин.
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);

КонецПроцедуры

// Завершает проверку динамического обновления конфигурации ИБ
//
Процедура ЗавершитьПроверкуДинамическогоОбновленияИБ()Экспорт

	// Отключим соответствующий обработчик ожидания
	ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");

КонецПроцедуры
#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ ПАРАМЕТРОВ СЕАНСА

// Процедура инициализирует глобальную переменную глУчетнаяПолитикаПоПерсоналуОрганизации.
// Переменная содержит соответствие, где организация является ключом, а поддержка 
// поддержка внутреннего совместительства значением.
//
// Параметры:
//  Нет.
//
Функция ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации() Экспорт

	УчетнаяПолитикаПоПерсоналуОрганизации = Новый Соответствие;
	УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Справочники.Организации.ПустаяСсылка(), Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Ложь, Ложь));

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
	|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.УпрощенныйУчетНДФЛ, ЛОЖЬ) КАК УпрощенныйУчетНДФЛ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу КАК УчетнаяПолитикаПоПерсоналу
	|		ПО (ВЫБОР
	|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА Организации.Ссылка
	|				ИНАЧЕ Организации.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоПерсоналу.Организация)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		УчетнаяПолитикаПоПерсоналуОрганизации.Вставить(Выборка.Организация, 
		                                      Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Выборка.ПоддержкаВнутреннегоСовместительства, Выборка.УпрощенныйУчетНДФЛ));

	КонецЦикла;
	
	Возврат УчетнаяПолитикаПоПерсоналуОрганизации;
КонецФункции // ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации

// Функция применяется при необходимости получить сведения об учетной политике организации.
//
// Параметры: нет
//
// Возвращаемое значение - дерево значений.  
//  На первом уровне дерева - список организаций, для которых задана учетная политика
//  На втором уровне дерева - записи учетной политики по организации, каждая запись хранится в дереве как структура
//
Функция ЗаполнениеУчетнойПолитики() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Сортировать("Период");
	
	ДеревоУчетнойПолитики = Новый ДеревоЗначений;
	ДеревоУчетнойПолитики.Колонки.Добавить("Организация");
	ДеревоУчетнойПолитики.Колонки.Добавить("Период");
	ДеревоУчетнойПолитики.Колонки.Добавить("УчетнаяПолитика");
	
	Для каждого Строка Из Результат Цикл
		УчетнаяПолитикаОрганизации = ДеревоУчетнойПолитики.Строки.Найти(Строка.Организация, "Организация");
		Если УчетнаяПолитикаОрганизации = Неопределено Тогда
			УчетнаяПолитикаОрганизации = ДеревоУчетнойПолитики.Строки.Добавить();
			УчетнаяПолитикаОрганизации.Организация = Строка.Организация; 
		КонецЕсли;
		ПоПериоду = УчетнаяПолитикаОрганизации.Строки.Добавить();
		ПоПериоду.Период = Строка.Период;
		
		СтруктураУчетнойПолитики = Новый Структура;
		Для Каждого Колонка Из Результат.Колонки Цикл
			СтруктураУчетнойПолитики.Вставить(Колонка.Имя, Строка[Колонка.Имя]);
		КонецЦикла;
		СтруктураУчетнойПолитики.Вставить("УСН", 
			СтруктураУчетнойПолитики.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
			
		ПоПериоду.УчетнаяПолитика = СтруктураУчетнойПолитики;	
		
	КонецЦикла;
	
	Возврат ДеревоУчетнойПолитики;
	
КонецФункции

// Функция формирует полный список счетов доходов и расходов по деятельности, облагаемой ЕНВД
//
// Возвращаемое значение - соответсвие(счет - истина) 
//  
Функция ЗаполнениеСчетовДоходовИРасходовЕНВД() Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаДоходовИРасходовЕНВД.Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД";
	
	Результат = Запрос.Выполнить().Выбрать();
	Счета = новый Соответствие;
	Пока Результат.Следующий() Цикл
		Счета.Вставить(Результат.Счет, истина);
	КонецЦикла;
		
	Возврат Счета;
	
КонецФункции


