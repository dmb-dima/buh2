
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ, ИСПОЛЬЗУЕМЫЕ ДЛЯ ВЫЗОВА ИЗ ИНТЕРФЕЙСОВ

//Процедура открывает список выбора внешних обработок
Процедура ОткрытьСписокВнешнихОбработок() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Обработка;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних обработок заполнения табличных частей
Процедура ОткрытьСписокВнешнихОбработокЗаполненияТабличныхЧастей() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних отчетов
Процедура ОткрытьСписокВнешнихОтчетов() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.Отчет;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 

//Процедура открывает список выбора внешних печатных форм
Процедура ОткрытьСписокВнешнихПечатныхФорм() Экспорт
	ВидПеречисления = Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма;
	Форма = Справочники.ВнешниеОбработки.ПолучитьФорму("ФормаСписка",,ВидПеречисления);
	Форма.СправочникСписок.Отбор.ВидОбработки.Установить(ВидПеречисления);
	Форма.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВидОбработки.Доступность = Ложь;
	Форма.Открыть();
КонецПроцедуры // () 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С НАСТРОЙКАМИ

#Если Клиент Тогда

Функция ВосстановлениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Истина;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // ВосстановитьНастройки()

Функция СохранениеНастроек(СтруктураНастройки) Экспорт
	
	ФормаУправленияНастройками = РегистрыСведений.СохраненныеНастройки.ПолучитьФорму("ФормаУправленияНастройками");
	ФормаУправленияНастройками.мВосстановлениеНастройки = Ложь;
	ФормаУправленияНастройками.мСтруктураНастройки = СтруктураНастройки;
	
	Результат = ФормаУправленияНастройками.ОткрытьМодально();
	СтруктураНастройки = ФормаУправленияНастройками.мСтруктураНастройки;
	Возврат Результат;
	
КонецФункции // СохранитьНастройки()

#КонецЕсли

Функция ПолучитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|	И СохраненныеНастройки.НаименованиеНастройки = &НаименованиеНастройки");
	
	Если СтруктураНастройки.Свойство("Пользователь") = Ложь ИЛИ НЕ ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", ВыборкаИзРезультатаЗапроса.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройку()

Функция ПолучитьНастройки(СтруктураНастройки, ПолучитьНастройкиВсехПользователей = Ложь, ПолучитьГрупповыеНастройки = Ложь, ПолучитьОбщиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	0 КАК ВидНастройки
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = &Пользователь
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	1
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь <> &Пользователь
	|	И СохраненныеНастройки.Пользователь ССЫЛКА Справочник.Пользователи
	|	И &НастройкиВсехПользователей = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	2
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И ВЫРАЗИТЬ(СохраненныеНастройки.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	|	И &ГрупповыеНастройки = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СохраненныеНастройки.Пользователь,
	|	СохраненныеНастройки.ИмяОбъекта,
	|	СохраненныеНастройки.НаименованиеНастройки,
	|	СохраненныеНастройки.СохраненнаяНастройка,
	|	СохраненныеНастройки.ИспользоватьПриОткрытии,
	|	СохраненныеНастройки.СохранятьАвтоматически,
	|	3
	|ИЗ
	|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|	И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|	И &ОбщиеНастройки = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидНастройки,
	|	НаименованиеНастройки");
			
	Если СтруктураНастройки.Свойство("Пользователь") = Ложь ИЛИ НЕ ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
	Запрос.УстановитьПараметр("НастройкиВсехПользователей", ПолучитьНастройкиВсехПользователей);
	Запрос.УстановитьПараметр("ГрупповыеНастройки", ПолучитьГрупповыеНастройки);
	Запрос.УстановитьПараметр("ОбщиеНастройки", ПолучитьОбщиеНастройки);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНастройки()
	
Функция ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВложенныйЗапрос.НаименованиеНастройки КАК НаименованиеНастройки,
	|	ВложенныйЗапрос.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|	ВложенныйЗапрос.СохранятьАвтоматически КАК СохранятьАвтоматически
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки КАК НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка КАК СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически КАК СохранятьАвтоматически,
	|		0 КАК ВидНастройки
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И СохраненныеНастройки.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически,
	|		1
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
	|		И ВЫРАЗИТЬ(СохраненныеНастройки.Пользователь КАК Справочник.ГруппыПользователей).ПользователиГруппы.Пользователь = &Пользователь
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		СохраненныеНастройки.НаименованиеНастройки,
	|		СохраненныеНастройки.СохраненнаяНастройка,
	|		СохраненныеНастройки.СохранятьАвтоматически,
	|		2
	|	ИЗ
	|		РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
	|	ГДЕ
	|		СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
	|		И СохраненныеНастройки.Пользователь = НЕОПРЕДЕЛЕНО
	|		И СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА) КАК ВложенныйЗапрос
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.ВидНастройки");
		
	Если СтруктураНастройки.Свойство("Пользователь") = Ложь ИЛИ НЕ ЗначениеЗаполнено(СтруктураНастройки.Пользователь) Тогда
					
		Запрос.УстановитьПараметр("Пользователь", ПараметрыСеанса.ТекущийПользователь);
					
	Иначе
					
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
					
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		
	РезультатЗапроса = Запрос.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
			
		Возврат Ложь;
			
	Иначе
			
		ВыборкаИзРезультатаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаИзРезультатаЗапроса.Следующий();
		
		СтруктураНастройки.Вставить("НаименованиеНастройки", ВыборкаИзРезультатаЗапроса.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", ВыборкаИзРезультатаЗапроса.СохраненнаяНастройка.Получить());
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Истина);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", ВыборкаИзРезультатаЗапроса.СохранятьАвтоматически);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПолучитьНастройкуИспользоватьПриОткрытии()

Функция СохранитьНастройку(СтруктураНастройки, СтруктураЗаменяемойНастройки = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") И СтруктураНастройки.ИспользоватьПриОткрытии = Истина Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	СохраненныеНастройки.Пользователь,
		|	СохраненныеНастройки.ИмяОбъекта,
		|	СохраненныеНастройки.НаименованиеНастройки
		|ИЗ
		|	РегистрСведений.СохраненныеНастройки КАК СохраненныеНастройки
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.Пользователь = &Пользователь
		|	И СохраненныеНастройки.ИмяОбъекта = &ИмяОбъекта
		|	И СохраненныеНастройки.НаименованиеНастройки <> &НаименованиеНастройки");
		
		Запрос.УстановитьПараметр("Пользователь", СтруктураНастройки.Пользователь);
		Запрос.УстановитьПараметр("ИмяОбъекта", СтруктураНастройки.ИмяОбъекта);
		Запрос.УстановитьПараметр("НаименованиеНастройки", СтруктураНастройки.НаименованиеНастройки);
		
		РезультаЗапроса = Запрос.Выполнить();
		
		Если РезультаЗапроса.Пустой() = Ложь Тогда
			
			МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
			
			Выборка = РезультаЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МенеджерЗаписи.Пользователь = Выборка.Пользователь;
				МенеджерЗаписи.ИмяОбъекта = Выборка.ИмяОбъекта;
				МенеджерЗаписи.НаименованиеНастройки = Выборка.НаименованиеНастройки;
				
				МенеджерЗаписи.Прочитать();
				
				Если МенеджерЗаписи.Выбран() Тогда
					
					МенеджерЗаписи.ИспользоватьПриОткрытии = Ложь;
					МенеджерЗаписи.Записать();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	Если СтруктураЗаменяемойНастройки <> Неопределено Тогда
		
		МенеджерЗаписи.Пользователь = СтруктураЗаменяемойНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураЗаменяемойНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураЗаменяемойНастройки.НаименованиеНастройки;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
			
			Если СтруктураНастройки.Свойство("СохраненнаяНастройка") Тогда
				
				МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
				
			КонецЕсли;
			
			Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
						
				МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
						
			КонецЕсли;
					
			Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
						
				МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
						
			КонецЕсли;
				
		Иначе
				
			Возврат Ложь;
				
		КонецЕсли;
		
	Иначе
		
		МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
		МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
		МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
		МенеджерЗаписи.СохраненнаяНастройка = Новый ХранилищеЗначения(СтруктураНастройки.СохраненнаяНастройка, Новый СжатиеДанных(9));
		
		Если СтруктураНастройки.Свойство("ИспользоватьПриОткрытии") Тогда
					
			МенеджерЗаписи.ИспользоватьПриОткрытии = СтруктураНастройки.ИспользоватьПриОткрытии;
					
		КонецЕсли;
				
		Если СтруктураНастройки.Свойство("СохранятьАвтоматически") Тогда
					
			МенеджерЗаписи.СохранятьАвтоматически = СтруктураНастройки.СохранятьАвтоматически;
					
		КонецЕсли;
		
	КонецЕсли;
	
	МенеджерЗаписи.Записать();
		
	Возврат Истина;
	
КонецФункции // СохранитьНастройку()

Функция УдалитьНастройку(СтруктураНастройки) Экспорт
	
	Если ТипЗнч(СтруктураНастройки) <> Тип("Структура") Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СохраненныеНастройки.СоздатьМенеджерЗаписи();
		
	МенеджерЗаписи.Пользователь = СтруктураНастройки.Пользователь;
	МенеджерЗаписи.ИмяОбъекта = СтруктураНастройки.ИмяОбъекта;
	МенеджерЗаписи.НаименованиеНастройки = СтруктураНастройки.НаименованиеНастройки;
	
	МенеджерЗаписи.Прочитать();
		
	Если МенеджерЗаписи.Выбран() Тогда
			
		МенеджерЗаписи.Удалить();
			
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // УдалитьНастройку()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КОНТРОЛЯ ВЫПОЛНЕНИЯ РЕГЛАМЕНТНЫХ ОПЕРАЦИЙ

// Процедура заполнения общего дерева регламентных операций
Процедура ЗаполнитьЗначенияДереваОпераций(ДеревоОпераций, Учет = неопределено) Экспорт
	
	// Настройка дерева
	СписокПодчиненных = Новый СписокЗначений();
	ДеревоОпераций = Новый ТаблицаЗначений;
	ДеревоОпераций.Колонки.Добавить("Узел");
	ДеревоОпераций.Колонки.Добавить("Связи");	
	ДеревоОпераций.Колонки.Добавить("Ответственный");	
	ДеревоОпераций.Колонки.Добавить("ОбъектыОперации");
	
	// Заполнение дерева
	Если Учет = "НДС" или не ЗначениеЗаполнено(Учет) Тогда
		УчетНДС.ЗаполнитьЗначенияДереваОперацийНДС(ДеревоОпераций);
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьЗначенияДереваОпераций()

// Процедура выполняет отражения факта выполнения регламентной операции в регистре сведений,
// при этом сбрасывается факт выполнения для всех подчиненных ей операций
Процедура ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,														  
														  РегламентнаяОперация,
														  Актуальность = Истина) Экспорт
														  
	Ответственный = ПараметрыСеанса.ТекущийПользователь;	

	Набор = РегистрыСведений.ВыполнениеРегламентныхОпераций.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентныйДокумент.Установить(Регистратор);	
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);	
	
	Набор.Прочитать();
	
	Если Набор.Количество() = 1 Тогда
		Запись = Набор[0];
		
		Запись.Ответственный = Ответственный;
		Запись.Актуальность = Актуальность;
		
	Иначе
		Если Набор.Количество() > 1 Тогда
			Набор.Очистить();
		КонецЕсли;
		Запись = Набор.Добавить();
		Запись.Организация = Организация;
		Запись.РегламентныйДокумент = Регистратор;
		Запись.ПериодРегистрации = ПериодРегистрации;
		Запись.РегламентнаяОперация = РегламентнаяОперация;
		Запись.Ответственный = Ответственный;		
		Запись.Актуальность = Актуальность;
		
	КонецЕсли;
	
	Набор.Записать();
	ДеревоОпераций = Неопределено;
	ЗаполнитьЗначенияДереваОпераций(ДеревоОпераций);
	СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации,  ДеревоОпераций, РегламентнаяОперация, Регистратор);
	
	#Если Клиент Тогда
		Оповестить("ОбновленоСостояниеРегламентнойОперации",РегламентнаяОперация,Регистратор);
	#КонецЕсли
КонецПроцедуры // ЗафиксироватьФактВыполненияРегламентнойОперации()

// Процедуры снимает признак выполнения для регламентных операций, включая подчиненные
Процедура СброситьФактВыполненияПодчиненныхОпераций(Знач Организация, ПериодРегистрации, ДеревоОпераций, Операция, Регистратор = Неопределено)
	Перем ОрганизацияЛокально;	
	
	СтрокиДереваРегламентнойОперации = ДеревоОпераций.НайтиСтроки(Новый Структура("Узел",Операция));
	Для каждого СтрокаДереваРегламентнойОперации Из СтрокиДереваРегламентнойОперации Цикл
		Если СтрокаДереваРегламентнойОперации.Связи.Количество()=0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Набор = РегистрыСведений.ВыполнениеРегламентныхОпераций.СоздатьНаборЗаписей();
		Для каждого ПодчиненнаяОперация Из СтрокаДереваРегламентнойОперации.Связи Цикл
		
			Набор.Отбор.Организация.Установить(Организация);
			Набор.Отбор.ПериодРегистрации.Установить(ПериодРегистрации);
			Набор.Отбор.РегламентнаяОперация.Установить(ПодчиненнаяОперация.Значение);
			Набор.Прочитать();
					
			КолвоЗаписейВНаборе = Набор.Количество();
			Для ОбратныйИндекс = 1 По КолвоЗаписейВНаборе Цикл
				Запись = Набор[КолвоЗаписейВНаборе - ОбратныйИндекс];
				Если не Запись.Актуальность Тогда
					Продолжить;
				КонецЕсли; 
				
				Запись.Актуальность = Ложь;
				
			КонецЦикла;	
			
			Набор.Записать();
						
			СброситьФактВыполненияПодчиненныхОпераций(Организация, ПериодРегистрации, ДеревоОпераций, ПодчиненнаяОперация.Значение, Регистратор);
		
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры // СброситьФактВыполненияПодчиненныхОпераций()

// Сброс факта выполнения при отмене проведения документа
Процедура СброситьФактВыполненияОперации(Регистратор) Экспорт
	
	МетаданныеРегистратора = Регистратор.Метаданные();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
 		            |	НачалоПериода(Регистратор.Дата,Месяц) КАК ПериодРегистрации,
				    |	Регистратор.Организация КАК Организация,
					|   ВыполненныеОперации.РегламентнаяОперация КАК РегламентнаяОперация
		            |ИЗ
		            |	Документ." + МетаданныеРегистратора.Имя + " КАК Регистратор
		            |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеРегламентныхОпераций КАК ВыполненныеОперации
		            |		ПО ВыполненныеОперации.РегламентныйДокумент = Регистратор.Ссылка
		            |
		            |ГДЕ
		            |	Регистратор.Ссылка = &РегистраторСсылка";
	Запрос.УстановитьПараметр("РегистраторСсылка", Регистратор); 
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка()); 
	Выборка = Запрос.Выполнить().Выбрать();
	
	// удаление всех записей по регистратору
	НаборЗаписей = РегистрыСведений.ВыполнениеРегламентныхОпераций.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РегламентныйДокумент.Установить(Регистратор);
	НаборЗаписей.Записать();
	
	ДеревоОпераций = Неопределено;
	ЗаполнитьЗначенияДереваОпераций(ДеревоОпераций);
	ПоследняяОперация = НЕопределено;
	Пока Выборка.Следующий() Цикл
		СброситьФактВыполненияПодчиненныхОпераций(Выборка.Организация , Выборка.ПериодРегистрации, ДеревоОпераций, Выборка.РегламентнаяОперация, Регистратор);
		ПоследняяОперация = Выборка.РегламентнаяОперация;
	КонецЦикла;	
	
	#Если Клиент Тогда
	Если не ПоследняяОперация = Неопределено Тогда
		Оповестить("ОбновленоСостояниеРегламентнойОперации",ПоследняяОперация,Регистратор);
	КонецЕсли; 
	#КонецЕсли
	
КонецПроцедуры // СброситьФактВыполненияОперации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ПЕЧАТНЫХ ФОРМ

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент            - ТабличныйДокумент, макет на печать,
//  КоличествоЭкземпляров  - Число, количество экземпляров на печать,
//  НаПринтер              - Булево, Если истина, то выводим сразу на принтер,
//  Заголовок              - Заголовок окна табличного документа,
//  НепосредственнаяПечать - Определяет необходимость показа диалога печати перед печатью.
//
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "", НепосредственнаяПечать = Ложь, Ссылка = Неопределено, ИмяМакета = "") Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров > 0 Тогда
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НЕ ПечДокумент.АвтоМасштаб
	   И НЕ ЗначениеЗаполнено(ПечДокумент.ИмяПринтера) Тогда
		ПечДокумент.АвтоМасштаб = Истина;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать(НепосредственнаяПечать = Истина);

	Иначе

		// Отобразить печатный документ на экране
		//ФормаПечати = ПолучитьОбщуюФорму("ФормаПечати",, Новый УникальныйИдентификатор);
		ФормаПечати = ПолучитьОбщуюФорму("ФормаПечати",, Заголовок + ИмяМакета + Ссылка);
		ФормаПечати.Документ = Ссылка;
		ФормаПечати.Заголовок = Заголовок;
		ФормаПечати.ИмяМакета = ИмяМакета;
		ФормаПечати.ПечатныйДокумент = ПечДокумент;
		ФормаПечати.Открыть();

	КонецЕсли;

КонецПроцедуры // НапечататьДокумент()


#Если Клиент Тогда


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ XML

Функция ПрочитатьЭлементXML(ОбъектДоступаXML, ИмяЭлемента = Неопределено)
	
	ИмяПоследнегоЗакрытогоУзла = "";
	
	Пока ОбъектДоступаXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Цикл // тип узла = начало элемента
		Если НЕ ОбъектДоступаXML.Прочитать() Тогда // должен прочитаться узел
			Возврат Неопределено;
		КонецЕсли;
		Если ОбъектДоступаXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ИмяПоследнегоЗакрытогоУзла = ОбъектДоступаXML.Имя;
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяЭлемента <> Неопределено Тогда // если определили имя элемента, нужно чтобы совпадало с полученным
		Если ОбъектДоступаXML.Имя <> ИмяЭлемента Тогда
			Сообщить("Неправильное имя узла (" + ИмяЭлемента + ")!"); 
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СоответствиеАтрибутов = Новый Соответствие();
	
	СоответствиеАтрибутов.Вставить("ИмяТекущегоУзлаXML", ОбъектДоступаXML.Имя);
	СоответствиеАтрибутов.Вставить("ИмяПоследнегоЗакрытогоУзла", ИмяПоследнегоЗакрытогоУзла);
	
	Пока ОбъектДоступаXML.ПрочитатьАтрибут() Цикл
		СоответствиеАтрибутов.Вставить(ОбъектДоступаXML.Имя, ОбъектДоступаXML.Значение);
	КонецЦикла;
	
	Возврат СоответствиеАтрибутов;

КонецФункции

Функция ДочитатьУзелДоКонца(ОбъектДоступаXML,ИмяЭлемента)
	
	Пока (ОбъектДоступаXML.ТипУзла <> ТипУзлаXML.КонецЭлемента) И (ОбъектДоступаXML.ИмяУзла = ИмяЭлемента) Цикл // тип узла = начало элемента
		Если НЕ ОбъектДоступаXML.Прочитать() Тогда // должен прочитаться узел
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПОДМЕНЮ ПЕРЕЙТИ

Функция ПолучитьXMLОписаниеПодменю()
	
	Возврат ПолучитьОбщийМакет("СоставПодменюПерейти").ПолучитьТекст();
	
КонецФункции

Функция ПолучитьДеревоПодменюПерейти(ТипОбъекта, ИмяОбъекта, ДействиеПоУмолчанию, СоответствиеДействийПодменюПерейти) Экспорт
	
	ОбъектЧтенияПодменю = Новый ЧтениеXML();
	ОбъектЧтенияПодменю.УстановитьСтроку(ПолучитьXMLОписаниеПодменю());
	
	СоответствиеАтрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "УказательПодменюПерейти");
	
	Если СоответствиеАтрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеАтрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "ПодменюПерейти");

	Если СоответствиеАтрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Пока ("" + СоответствиеАтрибутов["Тип"] + СоответствиеАтрибутов["Имя"]) <> (ТипОбъекта + ИмяОбъекта) Цикл
		
		ДочитатьУзелДоКонца(ОбъектЧтенияПодменю, "ПодменюПерейти");
		
		СоответствиеАтрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю, "ПодменюПерейти");
		
		Если СоответствиеАтрибутов = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ДеревоПодменю = ИнициализироватьДеревоДополнительныхКнопок();
	ТекущаяСтрокаДерева = ДеревоПодменю;
	
	СоответствиеАтрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю);
	
	Если СоответствиеАтрибутов = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяУзла = СоответствиеАтрибутов["ИмяТекущегоУзлаXML"];
	ИмяПоследнегоЗакрытогоУзла = СоответствиеАтрибутов["ИмяПоследнегоЗакрытогоУзла"];
	
	Пока ИмяПоследнегоЗакрытогоУзла <> "ПодменюПерейти" Цикл
		
		Если ИмяПоследнегоЗакрытогоУзла = "Подменю" Тогда
			ТекущаяСтрокаДерева = ТекущаяСтрокаДерева.Родитель;
			Если ТекущаяСтрокаДерева = Неопределено Тогда
				ТекущаяСтрокаДерева= ДеревоПодменю;
			КонецЕсли;
		КонецЕсли;
			
		Если ИмяУзла = "Кнопка" Тогда
			ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАтрибутов["Имя"], ТипКнопкиКоманднойПанели.Действие, СоответствиеАтрибутов["Текст"], ДействиеПоУмолчанию, Неопределено, Ложь, СоответствиеАтрибутов["Подсказка"]);
			СоответствиеДействийПодменюПерейти.Вставить( СоответствиеАтрибутов["Имя"], СоответствиеАтрибутов["Действие"]);
			
		ИначеЕсли ИмяУзла = "Разделитель" Тогда
			ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАтрибутов["Имя"], ТипКнопкиКоманднойПанели.Разделитель, СоответствиеАтрибутов["Текст"], ДействиеПоУмолчанию, Неопределено, Ложь, СоответствиеАтрибутов["Подсказка"]);
			
		ИначеЕсли ИмяУзла = "Подменю" Тогда
			СтрокаПодменю = ДобавитьСтрокуВДеревоКнопок(ТекущаяСтрокаДерева, СоответствиеАтрибутов["Имя"], ТипКнопкиКоманднойПанели.Подменю, СоответствиеАтрибутов["Текст"], Неопределено, Неопределено, Ложь, СоответствиеАтрибутов["Подсказка"]);
			ТекущаяСтрокаДерева = СтрокаПодменю;
			
		КонецЕсли;
		
		СоответствиеАтрибутов = ПрочитатьЭлементXML(ОбъектЧтенияПодменю);
		
		Если СоответствиеАтрибутов = Неопределено Тогда
			Возврат ДеревоПодменю;
		КонецЕсли;
		
		ИмяУзла = СоответствиеАтрибутов["ИмяТекущегоУзлаXML"];
		ИмяПоследнегоЗакрытогоУзла = СоответствиеАтрибутов["ИмяПоследнегоЗакрытогоУзла"];
		
	КонецЦикла;
	
	Возврат ДеревоПодменю;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ДОПОЛНИТЕЛЬНЫМИ КНОПКАМИ

// Функция инициализирует дерево дополнительных кнопок
//	Параметры:
//		Нет
// Возвращаемое значение:
//		Тип: ДереваЗначений.
Функция ИнициализироватьДеревоДополнительныхКнопок() Экспорт
	
	ДеревоКнопок = Новый ДеревоЗначений;
	
	//Если ИмяКнопки = Неопределено, создается разделитель
	//Если Дерево имеет подчиненные, то 
	
	ДеревоКнопок.Колонки.Добавить("Имя");
	ДеревоКнопок.Колонки.Добавить("ТипКнопки");
	ДеревоКнопок.Колонки.Добавить("Текст");
	ДеревоКнопок.Колонки.Добавить("Подсказка");
	ДеревоКнопок.Колонки.Добавить("Картинка");
	ДеревоКнопок.Колонки.Добавить("Действие");
	ДеревоКнопок.Колонки.Добавить("Пометка");
	
	ДеревоКнопок.Колонки.Добавить("ИзменяетДанные");
	
	//Остальные свойства кнопки
	
	ДеревоКнопок.Колонки.Добавить("Расшифровка");
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Функция добавляет новую строку в дерево кнопок
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, в который необходимо добавить новое описание кнопки
//	< Имя > (обязательный)
//		Тип: Строка. Имя создаваемой кнопки;
//	< ТипКнопки > (по умолчанию «Действие»)
//		Тип: ТипКнопкиКоманднойПанели. Тип создаваемой кнопки (Кнопка, разделитель, подменю);
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Текст > (по умолчанию пустая строка)
//		Тип: Строка. Текст кнопки.
//	< Действие > (по умолчанию «Не Определено»)
//		Тип: Действие. Действие кнопки (процедура должна быть описана в форме объекта, на который навешивается подменю).
//	< Расшифровка > (по умолчанию не определено)
//		Тип: Произвольный.
//	< Пометка > (по умолчанию «Ложь»)
//		Тип: Булево.
//	< Подсказка > (по умолчанию пустая строка)
//		Тип: Строка. Подсказка создаваемой кнопки.
//	< Картинка > (по умолчанию «Не Определено»)
//		Тип: Картинка. Картинка создаваемой кнопки.
// Возвращаемое значение:
//		Тип: СтрокаДереваЗначений.
Функция ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, Имя, Знач ТипКнопки = Неопределено ,Текст = "", Действие = Неопределено, Расшифровка = Неопределено, Пометка = Ложь, Подсказка = "", Картинка = Неопределено, ИзменяетДанные = Ложь)
	
	Если ТипКнопки = Неопределено Тогда
	
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		 
	КонецЕсли; 
	
	СтрокаКнопки             = СтрокаПодменю.Строки.Добавить();
	
	СтрокаКнопки.Имя         = Имя;
	СтрокаКнопки.ТипКнопки   = ТипКнопки;
	СтрокаКнопки.Текст       = Текст;
	СтрокаКнопки.Действие    = Действие;
	СтрокаКнопки.Картинка    = Картинка;
	СтрокаКнопки.Подсказка   = Подсказка;
	СтрокаКнопки.Пометка     = Пометка;
	
	СтрокаКнопки.ИзменяетДанные   = ИзменяетДанные;
	
	
	СтрокаКнопки.Расшифровка = Расшифровка;
	Возврат СтрокаКнопки;
	
КонецФункции

// Процедура формирует подменю по дереву значений
// Параметры:
//	< СтрокаПодменю > (обязательный)
//		Тип: Дерево или элемент дерева значений, по данным которого необходимо построить подменю.
//	< Подменю> (обязательный)
//		Тип: Элемент командной панели «Кнопка» типа «Подменю». На которой необходимо сформировать новое подменю.
//	< Очищать> (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли очищать переданное подменю.
//	< ДобавлятьРазделительВНачало > (по умолчанию «Ложь»)
//		Тип: булево. Определяет: следует ли добавить в начало подменю разделитель.
Процедура СформироватьПодменю(СтрокаПодменю, Подменю, Очищать = Ложь, ДобавлятьРазделительВНачало = Ложь) Экспорт
	
	Строки = СтрокаПодменю.Строки;
	Кнопки = Подменю.Кнопки;
	
	Если Очищать Тогда
		Кнопки.Очистить();
	
	КонецЕсли; 
	
	Если ДобавлятьРазделительВНачало и Строки.Количество() > 0 Тогда
		Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
	КонецЕсли; 
	
	Для каждого СтрокаКнопки Из Строки Цикл
		
		Кнопка = Кнопки.Добавить(СтрокаКнопки.Имя,СтрокаКнопки.ТипКнопки, СтрокаКнопки.Текст, СтрокаКнопки.Действие);
		
		Если СтрокаКнопки.Строки.Количество() > 0 Тогда
			
			СформироватьПодменю(СтрокаКнопки, Подменю, Ложь, Ложь)
			
		КонецЕсли; 
		
		Если Не СтрокаКнопки.Картинка = Неопределено Тогда
			
			Кнопка.Картинка  = СтрокаКнопки.Картинка;
		
		КонецЕсли; 
		
		Кнопка.Подсказка      = СтрокаКнопки.Подсказка;
		Кнопка.Пометка        = СтрокаКнопки.Пометка;
		//	Кнопка.ИзменяетДанные = Истина;   откат 00072100, т.к. невозможно работать с печ.формами док.закрытие месяца
		//Остальные свойства кнопки
		
	КонецЦикла; 
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЗАПОЛНЕНИЯ ТАБЛИЧНЫХ ЧАСТЕЙ ИЗ ВНЕШНИХ ОБРАБОТОК

// Процедура - обработчик нажатия любой из дополнительных кнопок заполнения табличных частей
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
Процедура ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(СтрокаКнопки,ЭтотОбъект) Экспорт
	
	Перем СсылкаНаВнешнююОбработку;
	Перем ДополнительныеПараметры;
	
	// Получить ссылку на внешнюю обработку
	СтрокаКнопки.Расшифровка.Свойство("СсылкаНаВнешнююОбработку", СсылкаНаВнешнююОбработку);
	
	// Получить дополнительные параметры внешней обработки
	СтрокаКнопки.Расшифровка.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	//Расшифровка = СтрокаКнопки.Расшифровка;
	
	Если ТипЗНЧ(СсылкаНаВнешнююОбработку) = Тип("СправочникСсылка.ВнешниеОбработки") Тогда
		ИмяФайла = КаталогВременныхФайлов()+"PrnForm.tmp";
		ОбъектВнешнейФормы = СсылкаНаВнешнююОбработку.ПолучитьОбъект();
		
		Если ОбъектВнешнейФормы = Неопределено Тогда
			Сообщить("Ошибка получения внешней обработки заполнения табличной части документа. Возможно обработка была удалена", СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		ДвоичныеДанные = ОбъектВнешнейФормы.ХранилищеВнешнейОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяФайла);
		
		Попытка
			
			Обработка = ВнешниеОбработки.Создать(ИмяФайла);
			
			// Передать внешней обработке дополнительные параметры
			Если ДополнительныеПараметры <> Неопределено Тогда
				
				// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
				Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
					Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			
			Сообщить("Ошибка исполнения внешней обработки табличной части документа."+Символы.ПС+ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
			
		КонецПопытки;
		
		Попытка
			
			Обработка.Инициализировать(ЭтотОбъект, СтрокаКнопки.Родитель.Имя, СтрокаКнопки.Родитель.Расшифровка);
			
		Исключение
			
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Заполнение ТЧ не произведено!");
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура формирует подменю "Заполнить" у ТЧ по дереву значений
//
Функция СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Действие) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """" ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.ТабличнаяЧастьИмя КАК ТабличнаяЧастьИмя
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТабличнаяЧастьИмя
	|ИТОГИ ПО
	|	ТабличнаяЧастьИмя";
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
	Иначе
		Возврат ДеревоКнопок;
	КонецЕсли;
	
	НомерКнопки = 0;
	
	ДеревоТЧ = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого КлючИЗначение Из СоответствиеТЧ Цикл
		ИмяТабличнойЧасти = КлючИЗначение.Ключ.Данные;
		
		СтрокаДереваТЧ = ДеревоТЧ.Строки.Найти(ИмяТабличнойЧасти,"ТабличнаяЧастьИмя");
		
		Если Не СтрокаДереваТЧ = Неопределено Тогда
			
			СтрокаПодменю  = ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок,ИмяТабличнойЧасти, ТипКнопкиКоманднойПанели.Действие , , , КлючИЗначение.Ключ, , , ,Истина);
			
			Для каждого ПодСтрокаДереваТЧ Из СтрокаДереваТЧ.Строки Цикл
				
				НомерКнопки = НомерКнопки + 1;
				
				СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, ДополнительныеПараметрыОбработки", ПодСтрокаДереваТЧ.Ссылка, ПодСтрокаДереваТЧ.ДополнительныеПараметрыОбработки.Получить());
				
				ДобавитьСтрокуВДеревоКнопок(СтрокаПодменю, "ЗаполнениеТЧ"+НомерКнопки, ТипКнопкиКоманднойПанели.Действие, ПодСтрокаДереваТЧ.Наименование, Действие , СтруктураРасшифровки, , , ,Истина)
				
			КонецЦикла;
			
			ПодменюИлиКоманднаяПанель = КлючИЗначение.Значение;
				
			Если ТипЗНЧ(ПодменюИлиКоманднаяПанель) = Тип("КоманднаяПанель") Тогда
					
				ПодменюИлиКоманднаяПанель = ПодменюИлиКоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Подменю,"Заполнить");
					
			КонецЕсли;
			
			СформироватьПодменю(СтрокаПодменю, ПодменюИлиКоманднаяПанель,Ложь,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоКнопок;
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ПЕЧАТИ

// Функция заполняет начальные параметры построителю отчета, который
//  используется для настройки отбора в механизме подключения внешних печатных форм.
//
// Параметры
//  ИмяТаблицы     - Строка, имя таблицы БД к которой необходимо определить запрос
//  СинонимТаблицы - Строка, синоним таблицы БД к которой необходимо определить запрос
//
// Возвращаемое значение:
//   ПостроительОтчета
//
Функция ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицы, СинонимТаблицы) Экспорт

	ПостроительОтчета = Новый ПостроительОтчета;
	ПостроительОтчета.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Объект.Ссылка КАК Ссылка
	|ИЗ
	|	" + ИмяТаблицы + " КАК Объект
	|ГДЕ
	|	Объект.Ссылка = &Ссылка
	|{ГДЕ
	|	Объект.Ссылка.*}
	|";
	
	ПолеОбъекта = ПостроительОтчета.ДоступныеПоля.Найти("Ссылка");
	ПолеОбъекта.Представление = ?(НЕ ЗначениеЗаполнено(СинонимТаблицы), ИмяТаблицы, СинонимТаблицы);
	
	Возврат ПостроительОтчета;

КонецФункции // ()

Функция ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоКнопок)
	
	ИмяМакетаПоУмолчанию = ВосстановитьЗначение(ИмяМетаданных+ "МакетПечати");
	
	Если ИмяМакетаПоУмолчанию = Ложь или ДеревоКнопок.Строки.Количество() = 0 Тогда
		
		СтрокаПоУмолчанию = Неопределено;
		
	Иначе
		
		СтрокаПоУмолчанию = ДеревоКнопок.Строки.Найти(ИмяМакетаПоУмолчанию,"Текст");
		
		Если СтрокаПоУмолчанию = Неопределено Тогда
			
			СтрокаПоУмолчанию = ДеревоКнопок.Строки[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаПоУмолчанию;
	
КонецФункции // ()

// Процедура формирует дерево кнопок для подменю "Печать"
//
Функция ПолучитьДеревоМакетовПечати(СсылкаОбъекта, ВнутренниеПечатныеФормы, Действие = Неопределено, ДействиеУстановитьПечатьПоУмолчанию = Неопределено) Экспорт
	
	ДеревоКнопок = ИнициализироватьДеревоДополнительныхКнопок();
	
	Если Не ВнутренниеПечатныеФормы = Неопределено Тогда
		ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие);
		
	КонецЕсли;
	
	ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоКнопок, СсылкаОбъекта, Действие);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(СсылкаОбъекта.Метаданные().Имя ,ДеревоКнопок);
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		
		СтрокаПоУмолчанию.Пометка = Истина;
		
	КонецЕсли;
	 
		
	Если ДеревоКнопок.Строки.Количество() > 0 Тогда
	
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
		
		ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, "ПечатьПоУмолчанию", ТипКнопкиКоманднойПанели.Действие, "По умолчанию...", ДействиеУстановитьПечатьПоУмолчанию, "ПечатьПоУмолчанию");
	
	КонецЕсли; 
	
	
	Возврат ДеревоКнопок;
	
КонецФункции // ()

// Процедура Устанавливает кнопку "Печать по умолчанию"
//
Процедура УстановитьПечатьПоУмолчанию(ПечатьПоУмолчанию, КоманднаяПанель, ДеревоМакетов, ИмяМетаданных, ДействиеПечатьПоУмолчанию) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	
	Если Не СтрокаПоУмолчанию = Неопределено Тогда
		Если ПечатьПоУмолчанию = Неопределено Тогда
			
			ИмяКнопки = Строка (Новый УникальныйИдентификатор);
			
			Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
				КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Вставить(0,ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			Иначе
				КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
				ПечатьПоУмолчанию = КоманднаяПанель.Кнопки.Добавить(ИмяКнопки,ТипКнопкиКоманднойПанели.Действие,"",ДействиеПечатьПоУмолчанию);
			КонецЕсли;
			
			ПечатьПоУмолчанию.Подсказка = "Печать по умолчанию";
			
		КонецЕсли; 
		
		ПечатьПоУмолчанию.Текст       = СтрокаПоУмолчанию.Текст;
		ПечатьПоУмолчанию.Доступность = Истина; 
		
	ИначеЕсли Не ПечатьПоУмолчанию = Неопределено Тогда
		
		ПечатьПоУмолчанию.Текст       = "Печать по умолчанию не назначена"; 
		ПечатьПоУмолчанию.Доступность = Ложь; 
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает Подменю "Печать" 
// Параметры:
//    Форма       : Форма, вызвавшая процедуру
//    ДополнительныеКнопки : Структура дополнительных кнопок
Процедура УстановитьПодменюПечати(ПодменюПечати, КоманднаяПанель, СоздаватьПриНеобходимости) Экспорт
	
	Если Не ПодменюПечати = Неопределено или  Не СоздаватьПриНеобходимости Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяПодменю = Строка (Новый УникальныйИдентификатор);
	Если КоманднаяПанель.ВыравниваниеКнопок = ВыравниваниеКнопокКоманднойПанели.Право Тогда
		КоманднаяПанель.Кнопки.Вставить(0,,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Вставить(0,ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	Иначе
		КоманднаяПанель.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
		ПодменюПечати = КоманднаяПанель.Кнопки.Добавить(ИмяПодменю,ТипКнопкиКоманднойПанели.Подменю,"Печать");
	КонецЕсли;
	ПодменюПечати.Подсказка = "Меню выбора печатных форм";
			
	
КонецПроцедуры

// Процедура - обработчик нажатия любой из дополнительных кнопок печати
// Параметры:
//    ДеревоМакетов: ДеревоЗначений, макетов печатных форм
//    Объект       : ДокументОбъект, СправочникОбъект, из формы которого вызвана процедура
//    Форма        : Форма, вызвавшая процедуру
//    ТекстКнопки  : Строка, заголовок нажатой кнопки
Процедура ПечатьПоДополнительнойКнопке(УдалитьДеревоМакетов, Объект, Форма = Неопределено, ТекстКнопки) Экспорт
	
	Если Не Форма = Неопределено Тогда
		Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(Объект,Форма) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Попытка
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
	Исключение
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
	КонецПопытки;
	
	ДеревоМакетовПечати = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаКнопки = ДеревоМакетовПечати.Строки.Найти(ТекстКнопки,"Текст");
	
	Если СтрокаКнопки = Неопределено Тогда
		
		Предупреждение("Печать не доступна. Изменился набор реквизитов!");
		Возврат;
		
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	
	Расшифровка = СтрокаКнопки.Расшифровка;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, Расшифровка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 0, НаПринтер, ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект), Строка(Объект)), Объект.Ссылка);
	Иначе
		Объект.Печать(СтрокаКнопки.Имя, 0, НаПринтер);
	КонецЕсли;
	
КонецПроцедуры // ПечатьПоДополнительнойКнопке()

// Процедура назначает макет по умолчанию
//
Функция НазначитьКнопкуПечатиПоУмолчанию(ДеревоМакетов, ИмяМетаданных) Экспорт
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяМетаданных,ДеревоМакетов);
	
	СписокМакетов = Новый СписокЗначений;
	
	Для каждого Строка Из ДеревоМакетов.Строки Цикл
	
		Если Строка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие и Не Строка.Расшифровка = "ПечатьПоУмолчанию" Тогда
			
			СписокМакетов.Добавить(Строка.Текст,,СтрокаПоУмолчанию = Строка);
			
		КонецЕсли; 
		
	
	КонецЦикла; 
	
	ФормаВыбораПечатнойФормыПоУмолчанию = ПолучитьОбщуюФорму("ФормаВыбораПечатнойФормыПоУмолчанию");
	ФормаВыбораПечатнойФормыПоУмолчанию.СписокВыбораПечатнойФормы = СписокМакетов;
	
	МакетПоУмолчанию = ФормаВыбораПечатнойФормыПоУмолчанию.ОткрытьМодально();
	
	Если МакетПоУмолчанию = "" Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", Ложь);
		
	ИначеЕсли Не МакетПоУмолчанию = Неопределено Тогда
		СохранитьЗначение(ИмяМетаданных + "МакетПечати", МакетПоУмолчанию);
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции

// Функция получает ТабличныйДокумент для печати из внешней печатной формы.
//
// Параметры
//  Ссылка         - Ссылка, для которой необходимо напечатать документ
//  ДвоичныеДанные - ДвоичныеДанные, внешняя обработка для печати
//
// Возвращаемое значение:
//   ТабличныйДокумент
//
Функция НапечататьВнешнююФорму(Ссылка, ИсточникМакета) Экспорт

	Перем ДополнительныеПараметры;
	
	ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.Принадлежность[ИсточникМакета.НомерСтроки - 1].ХранилищеВнешнейОбработки.Получить();
	
	// Получить дополнительные параметры внешней обработки
	ИсточникМакета.Свойство("ДополнительныеПараметрыОбработки", ДополнительныеПараметры);
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ИсточникМакета.СсылкаНаВнешнююОбработку.ХранилищеВнешнейОбработки.Получить();
	КонецЕсли;
	
	Если ДвоичныеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДокумент = Неопределено;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("epf");
	Попытка
		ДвоичныеДанные.Записать(ИмяФайла);
		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
		Обработка.СсылкаНаОбъект = Ссылка;
		
		// Передать внешней обработке дополнительные параметры
		Если ДополнительныеПараметры <> Неопределено Тогда
			
			// Если у внешней обработки есть реквизит для дополнительных параметров, присвоить ему значение
			Если НЕ Обработка.Метаданные().Реквизиты.Найти("ДополнительныеПараметры") = Неопределено Тогда
				Обработка.ДополнительныеПараметры = ДополнительныеПараметры;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент = Обработка.Печать();
		УдалитьФайлы(ИмяФайла);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Не удалось сформировать внешнюю печатную форму!");
	КонецПопытки;
	
	Возврат ТабДокумент;
	
КонецФункции

// Процедура дополняет таблицу печатных форма (ТаблицаМакетов) объекта
// из справочника "Дополнительные печатные формы"
Процедура ДобавитьВДеревоМакетовДополнительныеФормы(ДеревоМакетов, СсылкаОбъекта, Действие)
	
	СтрокиДерева = ДеревоМакетов.Строки;
	Если ТипЗнч(СсылкаОбъекта) = Тип("ОбъектМетаданных") Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеОбъекта = СсылкаОбъекта.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ДополнительныеПараметрыОбработки КАК ДополнительныеПараметрыОбработки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВнешниеОбработкиПринадлежность.ПредставлениеКнопки, """") <> """"
	|			ТОГДА ВнешниеОбработкиПринадлежность.ПредставлениеКнопки
	|		ИНАЧЕ ВнешниеОбработкиПринадлежность.Ссылка.Наименование
	|	КОНЕЦ КАК Наименование,
	|	ВнешниеОбработкиПринадлежность.Ссылка.ХранилищеВнешнейОбработки КАК СсылкаХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.НастройкиПостроителяДляОтбора КАК НастройкиПостроителяДляОтбора,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки,
	|	ВнешниеОбработкиПринадлежность.ЗаменяемаяПечатнаяФорма КАК ЗаменяемаяПечатнаяФорма,
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВнешниеОбработкиПринадлежность.НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	ИмяТаблицыОбъекта = "";
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Документ." + МетаданныеОбъекта.Имя;
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Запрос.УстановитьПараметр("Ссылка", Справочники[МетаданныеОбъекта.Имя].ПустаяСсылка());
		ИмяТаблицыОбъекта = "Справочник." + МетаданныеОбъекта.Имя;
	Иначе
		Возврат;
	КонецЕсли;
	
	БылРазделитель = СтрокиДерева.Количество() = 0 ;
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		ПорядковыйНомер = 0;
		Выборка = ВыборкаСсылок.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НоваяОбработка = Неопределено;
			ОбработкаСтроки = Выборка.ХранилищеВнешнейОбработки.Получить();
			Если ТипЗнч(ОбработкаСтроки) = Тип("ДвоичныеДанные") Тогда
				НоваяОбработка = ОбработкаСтроки;
			Иначе
				ОбработкаЭлемента = Выборка.СсылкаХранилищеВнешнейОбработки.Получить();
				Если ТипЗнч(ОбработкаЭлемента) = Тип("ДвоичныеДанные") Тогда
					НоваяОбработка = ОбработкаЭлемента;
				КонецЕсли; 
			КонецЕсли; 
			
			Если НоваяОбработка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураРасшифровки = Новый Структура("СсылкаНаВнешнююОбработку, НомерСтроки, ДополнительныеПараметрыОбработки", ВыборкаСсылок.Ссылка, Выборка.НомерСтроки, Выборка.ДополнительныеПараметрыОбработки.Получить());
			
			// Проверим, удовлетворяет ли подключаемый отчет указанным в нем условиям
			НастройкиПостроителя = Выборка.НастройкиПостроителяДляОтбора.Получить();
			Если ТипЗнч(НастройкиПостроителя) = Тип("НастройкиПостроителяОтчета") Тогда
				ПостроительОтчета = ИнициализироватьПостроительДопПечатныхФорм(ИмяТаблицыОбъекта, МетаданныеОбъекта.Синоним);
				ПостроительОтчета.Параметры.Вставить("Ссылка", СсылкаОбъекта);
				ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя, Истина, Ложь, Ложь, Ложь, Ложь);
				ПостроительОтчета.Выполнить();
				Если ПостроительОтчета.Результат.Пустой() Тогда
					Продолжить;
				КонецЕсли;
				Подсказка = "Отбор";
			Иначе
				Подсказка = "";
			КонецЕсли;
			
			// Теперь проверим, надо ли заменять существующую печ.форму или нужно добавить новую
			Если ЗначениеЗаполнено(Выборка.ЗаменяемаяПечатнаяФорма) Тогда
				
				Подсказка = "Печатная форма заменена подключаемой" + Подсказка;
				
				СтрокаДерева = СтрокиДерева.Найти(Выборка.ЗаменяемаяПечатнаяФорма, "Имя");
				
				Если СтрокаДерева = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				//ПодменятьВстроеннуюФорму = Ложь;
				СтрокаДерева.Расшифровка = СтруктураРасшифровки;
				СтрокаДерева.Подсказка = Подсказка;
				
				Продолжить;
				
			КонецЕсли; 
			
			// Только тут будем добавлять новую печ. форму в дополнение списка
			Если Не БылРазделитель Тогда
				ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Разделитель);
				БылРазделитель = Истина;
			КонецЕсли;
			
			Суффикс = ?(ПорядковыйНомер = 0 ,"" , "("+ПорядковыйНомер+")");
			ДобавитьСтрокуВДеревоКнопок(ДеревоМакетов, Строка(Новый УникальныйИдентификатор), ТипКнопкиКоманднойПанели.Действие, Выборка.Наименование + Суффикс, Действие ,СтруктураРасшифровки,);
			
		КонецЦикла;
	
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет в дерево кнопок макетов встроенные печатные формы
//
Процедура ДобавитьВДеревоМакетовВстроенныеФормы(ДеревоКнопок, ВнутренниеПечатныеФормы, Действие)

	Для каждого КлючИЗначение Из ВнутренниеПечатныеФормы Цикл
		Если КлючИЗначение.Значение = Неопределено Тогда
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, , ТипКнопкиКоманднойПанели.Разделитель);
			
		Иначе
			
			ДобавитьСтрокуВДеревоКнопок(ДеревоКнопок, КлючИЗначение.Ключ, ТипКнопкиКоманднойПанели.Действие, КлючИЗначение.Значение, Действие);
			
		КонецЕсли; 
		
	КонецЦикла;

КонецПроцедуры

Функция НапечататьДокументПоУмолчанию(Объект, КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь) Экспорт
	
	ЭтоДокумент = Метаданные.Документы.Содержит(Объект.Метаданные());
	
	Попытка
		
		СтруктураВнутреннихПечатныхФорм = Объект.ПолучитьСтруктуруПечатныхФорм()
		
	Исключение
		
		СтруктураВнутреннихПечатныхФорм = Новый Структура;
		
	КонецПопытки;
	
	ДеревоМакетов = ПолучитьДеревоМакетовПечати(Объект.Ссылка, СтруктураВнутреннихПечатныхФорм);
	
	СтрокаПоУмолчанию = ПолучитьСтрокуДереваМакетовПоУмолчанию(Объект.Метаданные().Имя, ДеревоМакетов);
	
	Если СтрокаПоУмолчанию = Неопределено Тогда
		
		Сообщить(Строка(Объект) + ": Печать по умолчанию не определена!", СтатусСообщения.Важное); 
		Возврат Ложь;
		
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаПоУмолчанию.Расшифровка) = Тип("Структура") Тогда
		
		ТабДокумент = НапечататьВнешнююФорму(Объект.Ссылка, СтрокаПоУмолчанию.Расшифровка);
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, ?(ЭтоДокумент, ОбщегоНазначения.СформироватьЗаголовокДокумента(Объект.Ссылка), Строка(Объект)), НепосредственнаяПечать);
		
	Иначе
		
		Объект.Печать(СтрокаПоУмолчанию.Имя, КоличествоЭкземпляров, НаПринтер, НепосредственнаяПечать);
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции // ()

// Печатает документ полученный по нажатию кнопки в форме списка
//
// Параметры
//  Документ - документ,который нужно отпечатать
//
Процедура НапечататьДокументИзФормыСписка(Ссылка) Экспорт
	
	Если Ссылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаПринтер = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ПечатьДокументовБезПредварительногоПросмотра") = Истина;
	Если Не НапечататьДокументПоУмолчанию(Ссылка.ПолучитьОбъект(), 0, НаПринтер) Тогда
		
		Предупреждение("Операция не выполнена");
		
	КонецЕсли;
	
КонецПроцедуры // НапечататьДокументИзФормыСписка()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция склоняет переданую фразу
// Параметры:
//  Фраза (обязательный), тип строка
//   Параметр должен содержать фразу. Каждое слово фразы будет просклонено отдельно
//
//  Падеж (обязательный), тип число
//   Падеж, в который необходимо поставить ФИО.
//   1 - Именительный
//   2 - Родительный
//   3 - Дательный
//   4 - Винительный
//   5 - Творительный
//   6 - Предложный
//
Функция Просклонять(Компонента, Знач Фраза = "", Падеж = 1, Пол = Неопределено, Результат) Экспорт
	
	Если Компонента = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Результат = "";
	
	#Если Клиент Тогда
		
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Фраза, " ");
	
	// Выделим первые 3 слова, так как компонента не умеет склонять фразу большую 3х символов
	НомерНесклоняемогоСимвола = 4;
	Для Номер = 1 По Мин(МассивСтрок.Количество(), 3) Цикл
		Если Не РегламентированнаяОтчетность.ФИОНаписаноВерно(МассивСтрок[Номер-1], Истина) Тогда
			НомерНесклоняемогоСимвола = Номер;
			Прервать;
		КонецЕсли;

		Результат = Результат + ?(Номер > 1, " ", "") + МассивСтрок[Номер-1];
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		Результат = Фраза;
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Результат = Компонента.Просклонять(Результат, Падеж, 1) + " ";
			
		ИначеЕсли Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
			Результат = Компонента.Просклонять(Результат, Падеж, 2) + " ";
			
		Иначе
			Результат = Компонента.Просклонять(Результат, Падеж) + " ";
			
		КонецЕсли;
		
	Исключение
		Результат = Фраза;
		Возврат Ложь;
		
	КонецПопытки;
	
	// Остальные символы добавим без склонения
	Для Номер = НомерНесклоняемогоСимвола По МассивСтрок.Количество() Цикл
		Результат = Результат + " " + МассивСтрок[Номер-1];
	КонецЦикла;
	
	Результат = СокрЛП(Результат);
	
	Возврат Истина;
	
	#Иначе
		
	Возврат Ложь;
	
	#КонецЕсли
	
КонецФункции // Просклонять()
