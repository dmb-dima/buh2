
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЗАПОЛНЕНИЯ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ


// Функция выполняет пропорциональное распределение суммы в соответствии
// с заданными коэффициентами распределения
//
// Параметры:
//		ИсхСумма - распределяемая сумма
//		МассивКоэф - массив коэффициентов распределения
//		Точность - точность округления при распределении. Необязателен.
//
//	Возврат:
//		МассивСумм - массив размерностью равный массиву коэффициентов, содержит
//			суммы в соответствии с весом коэффициента (из массива коэффициентов)
//          В случае если распределить не удалось (сумма = 0, кол-во коэф. = 0,
//          или суммарный вес коэф. = 0), тогда возвращается значение Неопределено
//
Функция РаспределитьПропорционально(Знач ИсхСумма, МассивКоэф, Знач Точность = 2) Экспорт
	
	Если МассивКоэф.Количество() = 0 Или ИсхСумма = 0 Или ИсхСумма = Null Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИндексМакс = 0;
	МаксЗнач   = 0;
	РаспрСумма = 0;
	СуммаКоэф  = 0;
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		
		МодульЧисла = ?(МассивКоэф[К] > 0, МассивКоэф[К], - МассивКоэф[К]);
		
		Если МаксЗнач < МодульЧисла Тогда
			МаксЗнач = МодульЧисла;
			ИндексМакс = К;
		КонецЕсли;
		
		СуммаКоэф = СуммаКоэф + МассивКоэф[К];
		
	КонецЦикла;
	
	Если СуммаКоэф = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивСумм = Новый Массив(МассивКоэф.Количество());
	
	Для К = 0 По МассивКоэф.Количество() - 1 Цикл
		МассивСумм[К] = Окр(ИсхСумма * МассивКоэф[К] / СуммаКоэф, Точность, 1);
		РаспрСумма = РаспрСумма + МассивСумм[К];
	КонецЦикла;
	
	// Погрешности округления отнесем на коэффициент с максимальным весом
	Если Не РаспрСумма = ИсхСумма Тогда
		МассивСумм[ИндексМакс] = МассивСумм[ИндексМакс] + ИсхСумма - РаспрСумма;
	КонецЕсли;
	
	Возврат МассивСумм;
	
КонецФункции // РаспределитьПропорционально()

////////////////////////////////////////////////////////////////////////////////
// КОММЕНТАРИИ РАСЧЕТОВ

Функция КомментарийРасчета(	ТекстСообщения, 
							РодительскаяСтрока = НеОпределено,
							ПредставлениеРасшифровкиКомментария = НеОпределено, 
							РасшифровкаКомментария = НеОпределено, 
							ВидСообщения = НеОпределено,
							РаскрытьКомментарий = Истина) Экспорт
	
	#Если Клиент Тогда
		Обработка = глЗначениеПеременной("глОбработкаСообщений");
		Если ВидСообщения = НеОпределено Тогда
			ВидСообщения = Перечисления.ВидыСообщений.Информация;
		КонецЕсли;
		Если РасшифровкаКомментария <> НеОпределено Тогда
			Расшифровки = Новый Массив;
			// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
			Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", ПредставлениеРасшифровкиКомментария, РасшифровкаКомментария));
		Иначе
			Расшифровки = НеОпределено;
		КонецЕсли;
		Возврат Обработка.ДобавитьСообщение(
								ТекстСообщения, 
								ВидСообщения, 
								Расшифровки, 
								РодительскаяСтрока, 
								РаскрытьКомментарий);
	#Иначе
		Сообщить(ТекстСообщения);
	#КонецЕсли
	
КонецФункции

Процедура ОшибкаРасчета(ТекстОшибки) Экспорт
	
	#Если Клиент Тогда
		Обработка = глЗначениеПеременной("глОбработкаСообщений");
		Обработка.ДобавитьСообщение(ТекстОшибки, Перечисления.ВидыСообщений.Ошибка);
	#Иначе
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	#КонецЕсли
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МАССИВАМИ

// Сравнивает два массива однотипных значений (кроме коллекций значений)
//
// Параметры: 
//  ПервыйМассив,ВторойМассив - сравниваемые массивы
//
// Возвращаемое значение:
//  булево.
//
Функция МассивыИдентичны(ПервыйМассив,ВторойМассив) Экспорт

    ЭлементовМассива = ПервыйМассив.Количество();
	МассивыСовпадают = (ЭлементовМассива = ВторойМассив.Количество()); 
	  
	Если МассивыСовпадают Тогда
		Для Сч = 1 По ЭлементовМассива Цикл
			Если ПервыйМассив[Сч-1] <> ВторойМассив[Сч-1] Тогда
				Возврат Ложь
			КонецЕсли;
		КонецЦикла; 		
	КонецЕсли;

	Возврат МассивыСовпадают

КонецФункции // МассивыИдентичны()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТИПАМИ

// Служебная функция - возвращает принадлежность объекта метаданных определенному классу
// 
// Параметры:
//	Класс  - класс
//	Объект - объект метаданных
// 
Функция ПринадлежностьКлассуМетаданных(Класс, Объект) Экспорт
	Для Каждого МДОбъект Из Метаданные[Класс] Цикл
		Если МДОбъект = Объект Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции // ПринадлежностьКлассуМетаданных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ НАЛИЧИЯ И ЗАПОЛНЕНИЯ РЕВИЗИТОВ

// Определяет существуют ли в конфигурации документы, вводимые на основании указанного
//
// Параметры
//   МетаданныеДокумента - <Объект описания метаданного>, метаданные документа,
//                        на основании которого могут вводиться другие документы
//
// Возвращаемое значение:
//   булево
//
Функция СуществуютДокументыВводимыеНаОсновании(МетаданныеДокумента) Экспорт 
	
	Для каждого Метаданное Из Метаданные.Документы Цикл
		Если Метаданное.ВводитсяНаОсновании.Содержит(МетаданныеДокумента) Тогда
			 Возврат Истина
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь
	
КонецФункции


Функция ШестнадцатиричноеВДесятичное(Источник) Экспорт
	
	Результат = 0;
	
	ШеснадцатиричныеСимволы = "0123456789ABCDEF";
	
	ДлинаСтроки = СтрДлина(Источник);
	Для Поз = 1 По ДлинаСтроки Цикл
		ИскомыйСимвол = Сред(Источник,Поз,1);
		ЗначениеСимвола = Найти(ШеснадцатиричныеСимволы, ВРег(ИскомыйСимвол));
		Если ЗначениеСимвола <=0 Тогда
			#Если Клиент Тогда
				Сообщить("В числе обнаружен неверный символ: """ + ИскомыйСимвол+ """ ");
			#КонецЕсли
			Результат = 0;
			Прервать;
		Иначе
			ЗначениеСимвола = ЗначениеСимвола - 1;
			Результат = Результат + ЗначениеСимвола * Pow(16, ДлинаСтроки-Поз);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Если Клиент Тогда

// Вычисляет объект для оповещения
//
// Параметры
//  ФизЛицо - ФизЛицо, данные которого редактируются
//  ФормаВладелец - вызвавшая форма
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица, Форма - ФизЛицо, данные которого редактируются
//                                            или вызвавшая форма
//
Функция ОпределитьОповещаемоеФизЛицо(ФизЛицо, ФормаВладелец) Экспорт
	
	// физлицо может быть уже указано в редактируемой записи регистра
	Если Не ФизЛицо.Пустая() Тогда
		Возврат ФизЛицо
	КонецЕсли;
	
	// выясним, какой объект редактируется вызвавшей формой
	Объект = Неопределено;
	Попытка
		Объект = ФормаВладелец.ЭтотОбъект
	Исключение
		
	КонецПопытки;
	
	ФизЛицоКОповещению = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФизЛицоКОповещению = Объект.Ссылка
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда	
		ФизЛицоКОповещению = Объект.ФизЛицо
	КонецЕсли;
	
	Если Не ФизЛицоКОповещению.Пустая() Тогда
		Возврат ФизЛицоКОповещению
	КонецЕсли;
	
	// редактируемое физлицо не записано, будем оповещать только вызвавшую форму 
	Возврат ФормаВладелец
	
КонецФункции // ОпределитьОповещаемыйОбъект()

#КонецЕсли

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ с квази-предопределенными элементами

Процедура ПередЗаписьюОсобогоЭлементаПроверкаВозможностиЗаписи(Источник, Отказ) Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмя = Источник.Метаданные().ПолноеИмя();
	НовоеЗначение = Источник.ИдентификаторЭлемента;
	
	Если Источник.ЭтоНовый() Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Значение", НовоеЗначение);
		Запрос.Текст = 
		"ВЫБРАТЬ 
		|	Ссылка КАК Ссылка
		|ИЗ " + ПолноеИмя + "
		|ГДЕ ИдентификаторЭлемента = &Значение";
		
		Если Не Запрос.Выполнить().Пустой() Тогда // очистим реквизит
			Источник.ИдентификаторЭлемента = ""
		КонецЕсли;
		
	Иначе	
		
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(Источник.Ссылка,"ИдентификаторЭлемента") <> НовоеЗначение Тогда
			ВызватьИсключение("Идентификатор элемента """ + ОбщегоНазначения.ПолучитьПредставленияОбъектов(Источник.Ссылка) + """ изменять запрещено!");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемОсобогоЭлементаПроверкаВозможностиВыполнения(Источник, Отказ) Экспорт
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ИдентификаторЭлемента) Тогда
		ВызватьИсключение("Удалять элемент """ + ОбщегоНазначения.ПолучитьПредставленияОбъектов(Источник.Ссылка) + """ запрещено!");
	КонецЕсли;
	
КонецПроцедуры

Функция ОсобыйЭлемент(Менеджер, ИмяЭлемента) Экспорт

	Возврат Менеджер.НайтиПоРеквизиту("ИдентификаторЭлемента", ИмяЭлемента)

КонецФункции // ОсобыйЭлемент()

Функция ЭтоОсобыйЭлемент(Ссылка) Экспорт

	Возврат ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Ссылка,"ИдентификаторЭлемента"))

КонецФункции // ОсобыйЭлемент()
