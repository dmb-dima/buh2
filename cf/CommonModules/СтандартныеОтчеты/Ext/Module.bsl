////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ОБЩЕГО НАЗНАЧЕНИЯ
////////////////////////////////////////////////////////////////////////////////

Функция ВыбратьСчет(Тип = "Группировка", НачальноеЗначениеВыбора = Неопределено) Экспорт
	
	ФормаВыбораСчета = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора();
	
	Если ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда
		ФормаВыбораСчета.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	КонецЕсли;
	
	// Исключим детальные счета, по которым не ведется учет по субконто
	Если Найти(Тип, "Группировка") = 1 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|		ПО (ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка)
		|ГДЕ
		|	(НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
		|
		|СГРУППИРОВАТЬ ПО
		|	Хозрасчетный.Ссылка
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ХозрасчетныйВидыСубконто.ВидСубконто) = 0";
		
		СписокСчетов = Новый СписокЗначений;
		Списоксчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет"));
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Ссылка.Значение = СписокСчетов;
		
		// выбор из активно-пассивных счетов
	ИначеЕсли Найти(Тип, "РазвернутоеСальдо") = 1 Тогда
		ФормаВыбораСчета.ПланСчетовСписок.Отбор.Вид.Установить(ВидСчета.АктивноПассивный);	
	КонецЕсли;
	
	ФормаВыбораСчета.ПланСчетовСписок.Порядок.Очистить();
	ФормаВыбораСчета.ПланСчетовСписок.Порядок.Установить("КодБыстрогоВыбора Возр");
	
	Возврат ФормаВыбораСчета.ОткрытьМодально();
	
КонецФункции

Функция ДоступностьУчетаПоПодразделениям() Экспорт
	
	МетаданныеИмя = Метаданные.Имя;
	
	Если МетаданныеИмя = "БухгалтерияПредприятияКОРП" 
		ИЛИ МетаданныеИмя = "БухгалтерияАвтономногоУчрежденияКОРП" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СкопироватьПараметрСхемыКомпоновкиДанных(СхемаКомпоновкиДанных, Приемник, Источник, ЗначениеПриемника = Неопределено) Экспорт
	
	Если ТипЗнч(СхемаКомпоновкиДанных) = Тип("СхемаКомпоновкиДанных") Тогда
		Параметры = СхемаКомпоновкиДанных.Параметры;
		
		НовыйПараметр = Параметры.Найти(Приемник);
		Если НовыйПараметр = Неопределено Тогда
			НовыйПараметр = Параметры.Добавить();
		КонецЕсли;
		
		ПараметрИсточник = Параметры.Найти(Источник);
		
		Если ПараметрИсточник = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйПараметр, ПараметрИсточник);
			НовыйПараметр.Имя = Приемник;
			Если ЗначениеПриемника <> Неопределено Тогда
				НовыйПараметр.Значение = ЗначениеПриемника;
			КонецЕсли;
		КонецЕсли;
		
		Возврат НовыйПараметр;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтруктуруПоказателейОтчета(БУ = Истина, НУ = Истина, ПР = Истина, ВР = Истина, Контроль = Истина, ВалютнаяСумма = Ложь, Количество = Ложь, РазвернутоеСальдо = Ложь) Экспорт
	
	Возврат Новый Структура("БУ, НУ, ПР, ВР, Контроль, ВалютнаяСумма, Количество, РазвернутоеСальдо", 
							Новый Структура("Значение, Использование, Представление", Истина, БУ,                "БУ (данные бухгалтерского учета)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   НУ,                "НУ (данные налогового учета)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   ПР,                "ПР (данные по учету постоянных разниц)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   ВР,                "ВР (данные по учету временных разниц)"),
							Новый Структура("Значение, Использование, Представление", Ложь,   Контроль,          "Контроль (БУ - (НУ + ПР + ВР))"),
							Новый Структура("Значение, Использование, Представление", Ложь,   ВалютнаяСумма,     "Валютная сумма"),
							Новый Структура("Значение, Использование, Представление", Ложь,   Количество,        "Количество"),
							Новый Структура("Значение, Использование, Представление", Ложь,   РазвернутоеСальдо, "Развернутое сальдо"));
	
КонецФункции

Функция ПолучитьКопиюОписанияМакета(ОписаниеМакета, ФормаЗаписи = Неопределено) Экспорт
	
	Если ФормаЗаписи = Неопределено Тогда
		ФормаЗаписи = "{http://v8.1c.ru/8.1/data-composition-system/composition-template}";
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ОписаниеМакета, "item", ФормаЗаписи);
	СтрокаXML = ЗаписьXML.Закрыть();
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(СтрокаXML);
	
	Возврат СериализаторXDTO.ПрочитатьXML(ЧтениеXML, ТипЗнч(ОписаниеМакета));
	
КонецФункции

Функция ПолучитьМакетШапки(МакетКомпоновки, Тело = Неопределено, ТипМакета = "Заголовок") Экспорт
	
	ЕстьПустойМакет = Ложь;
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Если Тело.Количество() > 0 Тогда
		Если ТипМакета = "Заголовок" Тогда
			НачальныйИндекс = 0;
			КонечныйИндекс  = Тело.Количество();
			ИтераторПрямой  = Истина;
		ИначеЕсли ТипМакета = "Подвал" Тогда 
			НачальныйИндекс = Тело.Количество() - 1;
			КонечныйИндекс  = 0;
			ИтераторПрямой  = Ложь;
		КонецЕсли;
		
		Индекс = НачальныйИндекс;
		Пока Индекс <> КонечныйИндекс Цикл
			Элемент = Тело[Индекс];
			Если ТипЗнч(Элемент) = Тип("МакетОбластиМакетаКомпоновкиДанных") Тогда
				Если ЕстьПустойМакет Тогда
					ЕстьПустойМакет = Ложь;
				Иначе
					Возврат МакетКомпоновки.Макеты[Элемент.Макет];
				КонецЕсли;
			ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаМакетаКомпоновкиДанных") Тогда
				ЕстьПустойМакет = Истина;			
			КонецЕсли;
			
			Если ИтераторПрямой Тогда
				Индекс = Индекс + 1;
			Иначе
				Индекс = Индекс - 1;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетПодвала(МакетКомпоновки, Тело = Неопределено) Экспорт
	
	Если Тело = Неопределено Тогда
		Тело = МакетКомпоновки.Тело;
	КонецЕсли;
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Если Не ПустаяСтрока(Элемент.МакетПодвала) Тогда
				Возврат МакетКомпоновки.Макеты[Элемент.МакетПодвала];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьМакетГруппировкиПоПолюГруппировки(МакетКомпоновки, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета = "Заголовок") Экспорт
	
	МассивМакетов = Новый Массив;
	
	ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, МакетКомпоновки.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);	
	
	Возврат МассивМакетов;
	
КонецФункции

Процедура ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях = Ложь, ТипМакета) 
	
	Для Каждого Элемент Из Тело Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппировкаМакетаКомпоновкиДанных") Тогда
			Для Каждого ЭлементГруппировки Из Элемент.Группировка Цикл
				Если Найти(ЭлементГруппировки.ИмяПоля, ПолеГруппировки) = 1 Тогда 
					МакетТело = ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело, ТипМакета);
					Если МакетТело <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТело);  
					КонецЕсли;
					МакетТелоИерархии = ПолучитьМакетШапки(МакетКомпоновки, Элемент.ТелоИерархии, ТипМакета);
					Если МакетТелоИерархии <> Неопределено Тогда
						МассивМакетов.Добавить(МакетТелоИерархии);
					КонецЕсли;
				КонецЕсли; 
				ОбойтиТелоМакетаКомпоновки(МакетКомпоновки, Элемент.Тело, МассивМакетов, ПолеГруппировки, ИскатьВДетальныхЗаписях, ТипМакета);
			КонецЦикла;
		КонецЕсли;
		Если ИскатьВДетальныхЗаписях Тогда
			Если ТипЗнч(Элемент) = Тип("ЗаписиМакетаКомпоновкиДанных") Тогда
				Если Элемент.Имя = ПолеГруппировки Тогда
					МассивМакетов.Добавить(ПолучитьМакетШапки(МакетКомпоновки, Элемент.Тело));	
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок") Экспорт
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = Найти(ПолеСтрокой, "[");
	Окончание = "";
	Заголовок = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Результат = ДоступноеПоле;
		Иначе
			Результат = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция КонецПериода(Период, Периодичность) Экспорт
	
	КонецПериода = Период;
	Если Периодичность = 6 Тогда       //День
		КонецПериода = КонецДня(Период);
	ИначеЕсли Периодичность = 7 Тогда  //Неделя
		КонецПериода = КонецНедели(Период);
	ИначеЕсли Периодичность = 8 Тогда  //Декада
		Если День(Период) > 20 Тогда
			КонецПериода = КонецМесяца(Период);
		Иначе
			КонецПериода = КонецДня(Период + 10 * 86400 - 1);
		КонецЕсли; 
	ИначеЕсли Периодичность = 9 Тогда  //Месяц
		КонецПериода = КонецМесяца(Период);
	ИначеЕсли Периодичность = 10 Тогда //Квартал
		КонецПериода = КонецКвартала(Период);
	ИначеЕсли Периодичность = 11 Тогда //Полугодие
		КонецПериода = ?(Месяц(Период) < 7, КонецДня(Дата(Год(Период), 6, 30)), КонецДня(Дата(Год(Период), 12, 31)));
	ИначеЕсли Периодичность = 12 Тогда //Год
		КонецПериода = КонецГода(Период);
	КонецЕсли;
	
	Возврат КонецПериода;
	
КонецФункции

Функция ПолучитьТипДополненияПоИнтервалу(Интервал = 0) Экспорт
	
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
	
	Если Интервал = 6 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.День;
	ИначеЕсли Интервал = 7 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Неделя;
	ИначеЕсли Интервал = 8 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Декада;
	ИначеЕсли Интервал = 9 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Месяц;
	ИначеЕсли Интервал = 10 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Квартал;
	ИначеЕсли Интервал = 11 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Полугодие;
	ИначеЕсли Интервал = 12 Тогда
		ТипДополнения = ТипДополненияПериодаКомпоновкиДанных.Год;
	КонецЕсли;
	
	Возврат ТипДополнения;	
	
КонецФункции

Функция ПолучитьВидПодписиДиаграммы(Значение = 0000, ВернутьПредставление = Ложь) Экспорт
	
	ВидПодписей   = ВидПодписейКДиаграмме.Нет;
	Представление = "Нет";
	
	Если Значение = 0000 Тогда
		Представление = "Нет";
		ВидПодписей   = ВидПодписейКДиаграмме.Нет;
	ИначеЕсли Значение = 0001 Тогда
		Представление = "Процент";
		ВидПодписей   = ВидПодписейКДиаграмме.Процент;
	ИначеЕсли Значение = 0010 Тогда
		Представление = "Сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.Значение;
	ИначеЕсли Значение = 0011 Тогда
		Представление = "Сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.ЗначениеПроцент;
	ИначеЕсли Значение = 0100 Тогда
		Представление = "Период";
		ВидПодписей   = ВидПодписейКДиаграмме.Точка;
	ИначеЕсли Значение = 0101 Тогда
		Представление = "Период + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.ТочкаПроцент;
	ИначеЕсли Значение = 0110 Тогда
		Представление = "Период + сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.ТочкаЗначение;
	ИначеЕсли Значение = 0111 Тогда
		Представление = "Период + сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.ТочкаЗначениеПроцент;
	ИначеЕсли Значение = 1000 Тогда
		Представление = "Группировка";
		ВидПодписей   = ВидПодписейКДиаграмме.Серия;
	ИначеЕсли Значение = 1001 Тогда
		Представление = "Группировка + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияПроцент;
	ИначеЕсли Значение = 1010 Тогда
		Представление = "Группировка + сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияЗначение;
	ИначеЕсли Значение = 1011 Тогда
		Представление = "Группировка + сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияЗначениеПроцент;
	ИначеЕсли Значение = 1100 Тогда
		Представление = "Группировка + период";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочка;
	ИначеЕсли Значение = 1101 Тогда
		Представление = "Группировка + период + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочкаПроцент;
	ИначеЕсли Значение = 1110 Тогда
		Представление = "Группировка + период + сумма";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочкаЗначение;
	ИначеЕсли Значение = 1111 Тогда
		Представление = "Группировка + период + сумма + процент";
		ВидПодписей   = ВидПодписейКДиаграмме.СерияТочкаЗначениеПроцент;
	КонецЕсли;
	
	Если ВернутьПредставление Тогда
		Возврат Представление;
	Иначе
		Возврат ВидПодписей;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеДиаграммы(Значение = 0) Экспорт
	
	ПредставлениеДиаграммы = ТипДиаграммы.График;
	
	Если Значение = 5 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.График;
	ИначеЕсли Значение = 1 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаОбъемная;
	ИначеЕсли Значение = 2 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемОбъемная;
	ИначеЕсли Значение = 3 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаГоризонтальнаяОбъемная;
	ИначеЕсли Значение = 4 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	ИначеЕсли Значение = 0 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.КруговаяОбъемная;
	ИначеЕсли Значение = 6 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.Изометрическая;
	ИначеЕсли Значение = 7 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ИзометрическаяНепрерывная;
	ИначеЕсли Значение = 8 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.Измерительная;
	ИначеЕсли Значение = 9 Тогда
		ПредставлениеДиаграммы = ТипДиаграммы.ГрафикСНакоплением;
	КонецЕсли;
	
	Возврат ПредставлениеДиаграммы;
	
КонецФункции

Процедура УстановитьИнтервал(ОтчетОбъект) Экспорт
	
	ДлинаПериода = (?(ЗначениеЗаполнено(ОтчетОбъект.КонецПериода), ОтчетОбъект.КонецПериода, Дата(3999, 12, 31)) - ОтчетОбъект.НачалоПериода) / (60*60*24);
	
	Если ОтчетОбъект.Интервал < 6 ИЛИ ОтчетОбъект.Интервал > 12 Тогда
		ОтчетОбъект.Интервал = 6;
	КонецЕсли;
	
	Если ДлинаПериода < 31 Тогда
		ОтчетОбъект.Интервал = 6;
	ИначеЕсли ДлинаПериода >= 31 И ДлинаПериода < 62 Тогда
		ОтчетОбъект.Интервал = 7;
	ИначеЕсли ДлинаПериода >= 62 И ДлинаПериода < 610 Тогда
		ОтчетОбъект.Интервал = 9;
	ИначеЕсли ДлинаПериода >= 610 Тогда
		ОтчетОбъект.Интервал = 10;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДополнениеПоляГруппировки(Группировка, ТипДополнения, ИмяПоля = "Период") Экспорт

	Для каждого ПолеГруппировки Из Группировка.ПоляГруппировки.Элементы Цикл
		Если ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля) Тогда
			ПолеГруппировки.ТипДополнения = ТипДополнения;
			Возврат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТекстЗаголовка(ОтчетОбъект, ЗаголовокТекст = "", ОрганизацияВНачале = Истина) Экспорт
	
	ТекстОрганизации = "";
	
	Если ЗначениеЗаполнено(ОтчетОбъект.Организация) Тогда
		СведенияОбОрганизации    = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(ОтчетОбъект.Организация);
		ТекстОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
		Если ПустаяСтрока(ТекстОрганизации) Тогда
			ТекстОрганизации = СведенияОбОрганизации.Представление;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Период") = Неопределено Тогда
		Попытка
			ТекстПериод = " за " + ПредставлениеПериода(НачалоДня(ОтчетОбъект.НачалоПериода), КонецДня(ОтчетОбъект.КонецПериода), "ФП = Истина");
		Исключение
			ТекстПериод = "";
		КонецПопытки;
	Иначе
		Если ЗначениеЗаполнено(ОтчетОбъект.Период) Тогда 
			ТекстПериод = " на " + Формат(ОтчетОбъект.Период, "ДФ=dd.MM.yyyy");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	КонецЕсли;
	
	ЗаголовокОтчета = "" + ЗаголовокТекст;
	
	Если ЗначениеЗаполнено(ТекстПериод) Тогда
		ЗаголовокОтчета = ЗаголовокОтчета + ТекстПериод;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОрганизации) Тогда
		Если ОрганизацияВНачале Тогда
			ЗаголовокОтчета = ТекстОрганизации + Символы.ПС + ЗаголовокОтчета;
		Иначе
			ЗаголовокОтчета = ЗаголовокОтчета + " " + ТекстОрганизации;
		КонецЕсли;
	КонецЕсли;
		
	Возврат ЗаголовокОтчета;
	
КонецФункции

Функция ПолучитьПредставлениеПериодичности(Периодичность) 
	
	Представление = "";
	Если Периодичность = 6 Тогда
		Представление = "по дням";
	ИначеЕсли Периодичность = 7 Тогда
		Представление = "по неделям";
	ИначеЕсли Периодичность = 8 Тогда
		Представление = "по декадам";
	ИначеЕсли Периодичность = 9 Тогда
		Представление = "по месяцам";
	ИначеЕсли Периодичность = 10 Тогда
		Представление = "по кварталам";
	ИначеЕсли Периодичность = 11 Тогда
		Представление = "по полугодиям";
	ИначеЕсли Периодичность = 12 Тогда
		Представление = "по годам";
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПолучитьТекстОбособленныхПодразделений(Организация) Экспорт
	
	ТекстОрганизации = "";
	
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	ТекстОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
	Если ПустаяСтрока(ТекстОрганизации) Тогда
		ТекстОрганизации = СведенияОбОрганизации.Представление;
	КонецЕсли;
	
	ТекстОрганизации = ТекстОрганизации + " с обособленными подразделениями";
	
	Возврат ТекстОрганизации;
	
КонецФункции

Функция ПолучитьПредставлениеПериода(ОтчетОбъект = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено, ТолькоДаты  = Ложь) Экспорт
	
	ТекстПериод = "";
	
	Если ОтчетОбъект <> Неопределено Тогда 
		НачалоПериода = ОтчетОбъект.НачалоПериода;
		КонецПериода  = ОтчетОбъект.КонецПериода;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " за ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, Найти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

Функция ПолучитьТекстОрганизация(ОтчетОбъект = Неопределено, Организация = Неопределено, ВключатьОбособленныеПодразделения = Ложь) Экспорт
	
	Если ОтчетОбъект <> Неопределено Тогда
		Организация                       = ОтчетОбъект.Организация;
		ВключатьОбособленныеПодразделения = ОтчетОбъект.ВключатьОбособленныеПодразделения;
	КонецЕсли;
	
	ТекстОрганизации = "";
	Попытка
		Если ЗначениеЗаполнено(Организация) Тогда
			Если ВключатьОбособленныеПодразделения Тогда
				ТекстОрганизации = ПолучитьТекстОбособленныхПодразделений(Организация);
			Иначе
				СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
				ТекстОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм,");
				Если ПустаяСтрока(ТекстОрганизации) Тогда
					ТекстОрганизации = СведенияОбОрганизации.Представление;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ТекстОрганизации;
	
КонецФункции

Функция ПолучитьЦветНеИспользуемогоЭлемента() Экспорт 
	
	Возврат Новый Цвет(117, 117, 117);
	
КонецФункции

Процедура ДобавитьОтборПоОрганизации(ОтчетОбъект) Экспорт
	
	Если ЗначениеЗаполнено(ОтчетОбъект.Организация) Тогда
		Если ОтчетОбъект.ВключатьОбособленныеПодразделения Тогда 
			ГруппаОтборОрганизация = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтборОрганизация.Представление = "###ОтборПоОрганизацииСОП###";
			ГруппаОтборОрганизация.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборОрганизация, "Организация"                    , ОтчетОбъект.Организация);
			ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборОрганизация, "Организация.ГоловнаяОрганизация", ОтчетОбъект.Организация);
		Иначе
			НовыйОтбор = ТиповыеОтчеты.ДобавитьОтбор(ОтчетОбъект.КомпоновщикНастроек, "Организация", ОтчетОбъект.Организация);
			НовыйОтбор.Представление = "###ОтборПоОрганизации###"; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьОтборДляПоказателяКонтроль(ОтчетОбъект) Экспорт
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("БУ");
	МассивПоказателей.Добавить("НУ");
	МассивПоказателей.Добавить("ПР");
	МассивПоказателей.Добавить("ВР");
	Если ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.Контроль.Значение Тогда 
		ГруппаОтборИЛИ = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтборИЛИ.Представление = "###Контроль###";
		ГруппаОтборИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода.КонтрольНачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода.КонтрольНачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод.КонтрольОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод.КонтрольОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода.КонтрольКонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода.КонтрольКонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
		Для Каждого ЭлементМассива Из МассивПоказателей Цикл
			Если ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Значение Тогда 
				ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаНачалоПериода." + ЭлементМассива + "НачальныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод." + ЭлементМассива + "ОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "ОборотыЗаПериод." + ЭлементМассива + "ОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				ТиповыеОтчеты.ДобавитьОтбор(ГруппаОтборИЛИ, "СальдоНаКонецПериода." + ЭлементМассива + "КонечныйОстатокКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьГруппировкуПоПериоду(ОтчетОбъект, Структура) Экспорт
	
	Если ОтчетОбъект.Периодичность > 0 Тогда
		Если ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") Тогда 
			Структура = Структура.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
			Структура = Структура.Структура.Добавить();
		КонецЕсли;
		ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование  = Истина;
		ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных(?(ОтчетОбъект.Периодичность = 2, "Регистратор", "Период"));		
		Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));	
		ТиповыеОтчеты.УстановитьПараметрВывода(Структура, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
		Если ОтчетОбъект.Периодичность = 2 Тогда
			ТиповыеОтчеты.ДобавитьОтбор(Структура.Отбор, "Регистратор", 0, ВидСравненияКомпоновкиДанных.Заполнено);
		Иначе
			ОтборГруппаИ = Структура.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ОтборГруппаИ.Использование = Истина;
			ОтборГруппаИ.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			
			ОтборГруппаИЛИ = ОтборГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ОтборГруппаИЛИ.Использование = Истина;
			ОтборГруппаИЛИ.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			ТиповыеОтчеты.ДобавитьОтбор(ОтборГруппаИЛИ, "Период", ОтчетОбъект.НачалоПериода);
			ТиповыеОтчеты.ДобавитьОтбор(ОтборГруппаИЛИ, "Период", ОтчетОбъект.КонецПериода);
			
			ОтборГруппаИЛИ = ОтборГруппаИ.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ОтборГруппаИЛИ.Использование = Истина;
			ОтборГруппаИЛИ.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
			
			Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
				Если Показатель.Значение.Использование И Показатель.Значение.Значение Тогда
					ТиповыеОтчеты.ДобавитьОтбор(ОтборГруппаИЛИ, "ОборотыЗаПериод." + Показатель.Ключ + "ОборотДт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
					ТиповыеОтчеты.ДобавитьОтбор(ОтборГруппаИЛИ, "ОборотыЗаПериод." + Показатель.Ключ + "ОборотКт", 0, ВидСравненияКомпоновкиДанных.НеРавно);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДополнительныеПоля(ОтчетОбъект) Экспорт
	
	Если ОтчетОбъект.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		Если ОтчетОбъект.ДанныеОтчета.РазмещениеДополнительныхПолей = 0 Тогда
			РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
		ИначеЕсли ОтчетОбъект.ДанныеОтчета.РазмещениеДополнительныхПолей = 1 Тогда
			РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.Отдельно;
		КонецЕсли;
	Иначе
		РасположениеРеквизитов = РасположениеРеквизитовКомпоновкиДанных.ВместеСВладельцем;
	КонецЕсли;
	
	ТиповыеОтчеты.УстановитьПараметрВывода(ОтчетОбъект.КомпоновщикНастроек, "РасположениеРеквизитов", РасположениеРеквизитов); 
	
	Для Каждого ПолеГруппировки Из ОтчетОбъект.ДанныеОтчета.ДополнительныеПоля Цикл 
		Если ПолеГруппировки.Использование Тогда
			ТиповыеОтчеты.ДобавитьВыбранноеПоле(ОтчетОбъект.КомпоновщикНастроек, ПолеГруппировки.Поле);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСписокСчетовПоСубсчетам(Таблица) Экспорт
	
	СписокСчетовПоСубсчетам = Новый СписокЗначений;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		Если СтрокаТаблицы.ПоСубсчетам И СтрокаТаблицы.Использование Тогда
			СписокСчетовПоСубсчетам.Добавить(СтрокаТаблицы.Счет);
		КонецЕсли;
	КонецЦикла;
	
    Возврат СписокСчетовПоСубсчетам;
	
КонецФункции

Функция ПолучитьТипДетализацииПоУмолчанию(ТипЗначения) Экспорт
	
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ОбъектМетаданных.Иерархический Тогда
				Возврат УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	
КонецФункции

Функция ПолучитьТипИзмеренияПоУмолчанию(ТипЗначения) Экспорт
	
	Для каждого Тип Из ТипЗначения.Типы() Цикл
		ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
			Если ОбъектМетаданных.Иерархический Тогда
				Возврат ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию();;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	
КонецФункции

Функция ПолучитьТипИзмеренияПостроителяОтчетаПоУмолчанию()
	
	ТипДетализацииПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь, "ТипДетализацииСтандартныхОтчетов");
	
	Если ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.Иерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.Иерархия;
	ИначеЕсли ТипДетализацииПоУмолчанию = Перечисления.ТипДетализацииСтандартныхОтчетов.ТолькоИерархия Тогда
		Возврат ТипИзмеренияПостроителяОтчета.ТолькоИерархия;
	Иначе
		Возврат ТипИзмеренияПостроителяОтчета.Элементы;
	КонецЕсли;
	
КонецФункции

Функция ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеТабличногоДокумента) Экспорт
	
	Сумма = 0;
	Для Каждого Область Из ПолеТабличногоДокумента.ВыделенныеОбласти Цикл
		Если ТипЗнч(Область) = Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Для ИндексСтрока = Область.Верх По Область.Низ Цикл
				Для ИндексКолонка = Область.Лево По Область.Право Цикл
					Попытка
						Сумма = Сумма + Число(СтрЗаменить(ПолеТабличногоДокумента.Область("R" + Формат(ИндексСтрока, "ЧГ=0") + "C" + Формат(ИндексКолонка, "ЧГ=0")) .Текст, " ", ""));
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Процедура ОбработатьНаборДанныхСвязаннойИнформации(Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт
	
	Если ПараметрыПоляВладельца.ИндексСубконто > 0 Тогда
		ПутьКДаннымОсновногоПоля = "";
		ЗаголовокОсновногоПоля   = "";
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПолеСсылка") = 1 Тогда
				ПутьКДаннымОсновногоПоля = ПолеНабора.ПутьКДанным;
				ЗаголовокОсновногоПоля   = СтрЗаменить(ПолеНабора.Заголовок, ".Ссылка", "");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ПутьКДанным = СтрЗаменить(ПолеНабора.ПутьКДанным, ПутьКДаннымОсновногоПоля, ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто);
				ПолеНабора.Заголовок   = СтрЗаменить(ПолеНабора.Заголовок, ЗаголовокОсновногоПоля, ПараметрыПоляВладельца.ЗаголовокСубконто);
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Ложь;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Ложь;
			КонецЕсли;
		КонецЦикла;
		Для Каждого Связь Из Схема.СвязиНаборовДанных Цикл
			Если Связь.НаборДанныхПриемник = ИмяНабора Тогда
				Связь.ВыражениеИсточник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
				Связь.ВыражениеПриемник = ИмяПоляПрефикс + ПараметрыПоляВладельца.ИндексСубконто;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ПолеНабора Из Схема.НаборыДанных[ИмяНабора].Поля Цикл
			Если Найти(ПолеНабора.Поле, "СвязанноеПоле") = 1 Тогда
				ПолеНабора.ОграничениеИспользования.Группировка = Истина;
				ПолеНабора.ОграничениеИспользования.Поле        = Истина;
				ПолеНабора.ОграничениеИспользования.Условие     = Истина;
				ПолеНабора.ОграничениеИспользования.Порядок     = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПростойТип(Значение) Экспорт
	
	ОписаниеПростыхТипов = Новый ОписаниеТипов("Дата, Строка, Булево, Число");
	
	Возврат ОписаниеПростыхТипов.СодержитТип(ТипЗнч(Значение));
	
КонецФункции

Процедура СохранитьНастройку(ОтчетОбъект) Экспорт
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект);
	СсылкаНаОбъект = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	СохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	Если СохраненнаяНастройка = Неопределено Тогда
		Пользователи = Новый Массив;
		Пользователи.Добавить(ПараметрыСеанса.ТекущийПользователь);
		Пользователи.Добавить(Справочники.ГруппыПользователей.ВсеПользователи);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка КАК СохраненнаяНастройка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ИспользоватьПриОткрытии = ИСТИНА
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь В(&Пользователи)
		|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("Пользователи", Пользователи);
		Запрос.УстановитьПараметр("НастраиваемыйОбъект", СсылкаНаОбъект);
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаРезультата.Количество() > 0 Тогда
			СохраненнаяНастройка = ТаблицаРезультата[0].СохраненнаяНастройка;
		Иначе
			Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
			Настройка.НастраиваемыйОбъект = СсылкаНаОбъект;
			Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
			Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
			Настройка.ИспользоватьПриОткрытии = Истина;
			НовыйПользователь = Настройка.Пользователи.Добавить();
			НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
			Настройка.Записать();
			
			СохраненнаяНастройка = Настройка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	СохранениеНастроек.СохранитьНастройкуОбъекта(СохраненнаяНастройка, СтруктураНастроек);
	
КонецПроцедуры

Процедура ИнициализацияОтчета(ОтчетОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) И Не ОтчетОбъект.РежимРасшифровки Тогда
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("НачалоПериода") <> Неопределено Тогда
			ОтчетОбъект.НачалоПериода = НачалоМесяца(ТекущаяДата());
		КонецЕсли;
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("КонецПериода") <> Неопределено Тогда
			ОтчетОбъект.КонецПериода  = КонецМесяца(ТекущаяДата());
		КонецЕсли;
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
			ОтчетОбъект.Организация   = глЗначениеПеременной("ОсновнаяОрганизация");
		КонецЕсли;
		// {ОбособленныеПодразделения
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
			ОтчетОбъект.Подразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
		// }ОбособленныеПодразделения
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоработатьСхемуКомпоновкиДанных(НаборыДанных) Экспорт
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ДоработатьСхемуКомпоновкиДанных(НаборДанных.Элементы);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			ОптимизироватьНаборДанныхЗапрос(НаборДанных);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОптимизироватьНаборДанныхЗапрос(Набор)
	
	ТекстДоОптимизации = Набор.Запрос;
	ТекстПослеОптимизации = ТекстДоОптимизации;
	ТекстДляОбработки = ТекстДоОптимизации;
	ПозицияНачальногоМаркера = Найти(ТекстДоОптимизации, "//-->НачалоПоляЗамены");
	ТекстДляОбработки = Сред(ТекстДоОптимизации, ПозицияНачальногоМаркера);
	Пока ПозицияНачальногоМаркера > 0 Цикл
		СтрокаТекста = СтрПолучитьСтроку(ТекстДляОбработки, 1);
		Если Не ЗначениеЗаполнено(СтрокаТекста) Тогда
			Прервать;
		КонецЕсли;
		ПозицияНачала = Найти(СтрокаТекста, "//-->НачалоПоляЗамены");
		Если ПозицияНачала > 0 Тогда
			ПозицияПоляНачало = Найти(СтрокаТекста, "{Поле");
			ПозицияПоляКонец  = Найти(СтрокаТекста, "}");
			
			ТекстПоле = Сред(СтрокаТекста, ПозицияНачала + 22, ПозицияПоляНачало - (ПозицияНачала + 22));
			ТекстПсевдоним = Сред(СтрокаТекста, ПозицияПоляНачало + 6, ПозицияПоляКонец - (ПозицияПоляНачало + 6));
			
			Поле = Набор.Поля.Найти(ТекстПсевдоним);
			Если Поле <> Неопределено Тогда
				Если НЕ Поле.ТипЗначения.СодержитТип(Тип("Число"))
					И НЕ Поле.ТипЗначения.СодержитТип(Тип("Строка"))
					И НЕ Поле.ТипЗначения.СодержитТип(Тип("Дата"))
					И НЕ Поле.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
					Если Поле.ТипЗначения.Типы().Количество() = 1 Тогда
						ОбъектМетаданных = Метаданные.НайтиПоТипу(Поле.ТипЗначения.Типы()[0]);
						ИмяТипа = ОбъектМетаданных.ПолноеИмя();
						ТекстЗаменыПоле = "ВЫРАЗИТЬ(" + ТекстПоле + " КАК " + ИмяТипа + ") КАК " + ТекстПсевдоним;
					Иначе
						ТекстЗаменыПоле = "ВЫБОР ";
						
						Для Каждого Тип Из Поле.ТипЗначения.Типы() Цикл
							ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
							ИмяТипа = ОбъектМетаданных.ПолноеИмя();
							ТекстЗаменыПоле = ТекстЗаменыПоле + Символы.ПС;
							ТекстЗаменыПоле = ТекстЗаменыПоле + "КОГДА " + ТекстПоле + " ССЫЛКА " + ИмяТипа;
							ТекстЗаменыПоле = ТекстЗаменыПоле + " ТОГДА ВЫРАЗИТЬ(" + ТекстПоле + " КАК " + ИмяТипа + ")";
						КонецЦикла;
						
						ТекстЗаменыПоле = ТекстЗаменыПоле + 
						"
						|	КОГДА " + ТекстПоле + " = НЕОПРЕДЕЛЕНО ТОГДА НЕОПРЕДЕЛЕНО 
						|КОНЕЦ КАК " + ТекстПсевдоним;
					КонецЕсли;
					ТекстИсходный = ПолучитьТекстПоМаркерам(ТекстДоОптимизации, "//-->НачалоПоляЗамены " + ТекстПоле + "{Поле " + ТекстПсевдоним + "}", "//<--КонецПоляЗамены " + СокрЛП(ТекстПоле));
					ТекстПослеОптимизации = СтрЗаменить(ТекстПослеОптимизации, ТекстИсходный, ТекстЗаменыПоле + ",");
					ДлинаТекстаПоляПослеЗамены = СтрДлина(ПолучитьТекстПоМаркерам(ТекстПослеОптимизации, "//-->НачалоПоляЗамены " + ТекстПоле + "{Поле " + ТекстПсевдоним + "}", "//<--КонецПоляЗамены " + СокрЛП(ТекстПоле), Истина));
					ТекстДляОбработки = СокрЛП(Сред(ТекстПослеОптимизации, Найти(ТекстПослеОптимизации, "//-->НачалоПоляЗамены " + ТекстПоле + "{Поле " + ТекстПсевдоним + "}") + ДлинаТекстаПоляПослеЗамены));
					ПозицияНачальногоМаркера = Найти(ТекстДляОбработки, "//-->НачалоПоляЗамены");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Набор.Запрос = ТекстПослеОптимизации;
	
КонецФункции

Функция ПолучитьТекстПоМаркерам(Текст, МаркерНачало, МаркерКонец, ВместеСМаркерами = Ложь) Экспорт
	
	ТекстРезультат = "";
	
	Если ВместеСМаркерами Тогда
		НачальнаяПозиция   = Найти(Текст, МаркерНачало);
		КоличествоСимволов = Найти(Текст, МаркерКонец) + СтрДлина(МаркерКонец) - НачальнаяПозиция;
	Иначе
		НачальнаяПозиция   = Найти(Текст, МаркерНачало) + СтрДлина(МаркерНачало);
		КоличествоСимволов = Найти(Текст, МаркерКонец) - НачальнаяПозиция - 1;
	КонецЕсли;
	
	ТекстРезультат = СокрЛП(Сред(Текст, НачальнаяПозиция, КоличествоСимволов));
	
	Возврат ТекстРезультат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ РАБОТЫ С ФОРМОЙ ОТЧЕТА
////////////////////////////////////////////////////////////////////////////////

Процедура РезультатПриАктивизацииОбласти(ФормаОтчета, Элемент) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ЭлементыФормы.ПолеСумма.Значение = ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(Элемент);
	
КонецПроцедуры

Процедура НастроитьСтраницыПанелиПользователя(ФормаОтчета, Кнопка) Экспорт
	
	ФормаНастройкиПанелиПользователя = ПолучитьОбщуюФорму("ФормаНастройкиПанелиПользователя", ФормаОтчета);
	
	ФормаНастройкиПанелиПользователя.ЗакрыватьПанельПриФормированииОтчета = ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета;
	ФормаНастройкиПанелиПользователя.ТаблицаСтраниц                       = ПолучитьТаблицуСтраниц(ФормаОтчета);
	Если ФормаНастройкиПанелиПользователя.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		ТаблицаСтраниц = ФормаНастройкиПанелиПользователя.ТаблицаСтраниц;
		ОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, ТаблицаСтраниц);
		ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета = ФормаНастройкиПанелиПользователя.ЗакрыватьПанельПриФормированииОтчета;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьТаблицуСтраниц(ФормаОтчета) Экспорт 
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	ТаблицаСтраниц = Новый ТаблицаЗначений;
	ТаблицаСтраниц.Колонки.Добавить("Использование");
	ТаблицаСтраниц.Колонки.Добавить("Страница");
	ТаблицаСтраниц.Колонки.Добавить("Представление");
	ТаблицаСтраниц.Колонки.Добавить("Высота");
	ТаблицаСтраниц.Колонки.Добавить("Раскрыта");
	
	Для Каждого Страница Из ЭлементыФормы.ПанельЗакладок.Страницы Цикл
		НоваяСтрока = ТаблицаСтраниц.Добавить();
		НоваяСтрока.Использование = Страница.Видимость;
		НоваяСтрока.Представление = Страница.Заголовок;
		НоваяСтрока.Страница      = Страница.Имя;
		НоваяСтрока.Раскрыта      = Страница.Раскрыта;
	КонецЦикла;
	
	Возврат ТаблицаСтраниц;
	
КонецФункции

Процедура ОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, ТаблицаСтраниц) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ТипЗнч(ТаблицаСтраниц) = Тип("ТаблицаЗначений") Тогда	
		ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Ложь;
		Индекс = 0;
		Для Каждого СтрокаТаблицы Из ТаблицаСтраниц Цикл
			СтраницыПанели = ЭлементыФормы.ПанельЗакладок.Страницы;
			Страница = СтраницыПанели[СтрокаТаблицы.Страница];
			Страница.Видимость = СтрокаТаблицы.Использование; 
			Страница.Раскрыта  = СтрокаТаблицы.Раскрыта;
			
			ТекущаяПозиция = СтраницыПанели.Индекс(Страница);
			Если ТекущаяПозиция <> Индекс Тогда
				СтраницыПанели.Сдвинуть(Страница, Индекс - ТекущаяПозиция);
			КонецЕсли;
			Индекс = Индекс + 1;
		КонецЦикла;
		Если ФормаОтчета.НастройкиФормы.Свойство("ТаблицаЭлементов") Тогда
			Для Каждого ЭлементУправления Из ФормаОтчета.НастройкиФормы.ТаблицаЭлементов Цикл
				Элемент = ЭлементыФормы[ЭлементУправления.Элемент];
				Если Элемент.Верх <> ЭлементУправления Тогда
					Элемент.Верх = ЭлементУправления.Верх;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьНастройкиФормы(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Если ЭлементыФормы.Найти("ФлагВыводитьЗаголовок")<>Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьЗаголовок"        , ЭлементыФормы.ФлагВыводитьЗаголовок.Значение);
	КонецЕсли;
	Если ЭлементыФормы.Найти("ФлагВыводитьПодписи")<>Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьПодписи"          , ЭлементыФормы.ФлагВыводитьПодписи.Значение);
	КонецЕсли;
	Если ЭлементыФормы.Найти("ПанельПользователя")<>Неопределено Тогда
		НастройкиФормы.Вставить("ПанельПользователяПометка", ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка);
		НастройкиФормы.Вставить("ШиринаПанелиПользователя" , ЭлементыФормы.ПанельПользователя.Ширина);
	КонецЕсли;
	Если ЭлементыФормы.Найти("ПолеВыбораОформления")<>Неопределено Тогда
		НастройкиФормы.Вставить("МакетОформления"          , ЭлементыФормы.ПолеВыбораОформления.Значение);
	КонецЕсли;
	НастройкиФормы.Вставить("ТаблицаСтраниц"           , ПолучитьТаблицуСтраниц(ФормаОтчета));

	КнопкаПоказатьДиаграмму = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("Диаграмма");
	Если КнопкаПоказатьДиаграмму <> Неопределено Тогда
		НастройкиФормы.Вставить("ВыводитьДиаграмму", КнопкаПоказатьДиаграмму.Пометка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьНастройкиФормы(ФормаОтчета, ВсеНастройки = Истина) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Если ВсеНастройки Тогда
		Если НастройкиФормы = Неопределено Тогда
			НастройкиФормы = Новый Структура;
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ВыводитьЗаголовок") Тогда
			ВыводитьЗаголовок = НастройкиФормы.ВыводитьЗаголовок;
		Иначе
			НастройкиФормы.Вставить("ВыводитьЗаголовок", Истина);
			ВыводитьЗаголовок = Истина;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьЗаголовок.Значение = ВыводитьЗаголовок;
		
		Если НастройкиФормы.Свойство("ВыводитьПодписи") Тогда
			ВыводитьПодписи = НастройкиФормы.ВыводитьПодписи;
		Иначе
			НастройкиФормы.Вставить("ВыводитьПодписи", Ложь);
			ВыводитьПодписи = Ложь;
		КонецЕсли;
		ЭлементыФормы.ФлагВыводитьПодписи.Значение = ВыводитьПодписи;
		
		Если НастройкиФормы.Свойство("ПанельПользователяПометка") Тогда
			ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя.Пометка = НастройкиФормы.ПанельПользователяПометка;
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ШиринаПанелиПользователя") Тогда
			НастройкиФормы.Вставить("ШиринаПанелиПользователя", 306);
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ТаблицаЭлементов") Тогда
			НастройкиФормы.Удалить("ТаблицаЭлементов");
		КонецЕсли;
		
		Если НастройкиФормы.Свойство("ТаблицаСтраниц") Тогда
			ОбработкаИзмененияТаблицыСтраниц(ФормаОтчета, НастройкиФормы.ТаблицаСтраниц);
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("ЗакрыватьПанельПриФормированииОтчета") Тогда
			НастройкиФормы.Вставить("ЗакрыватьПанельПриФормированииОтчета", Ложь);
		КонецЕсли;
		
		Если Не НастройкиФормы.Свойство("МакетОформления") Тогда
			НастройкиФормы.Вставить("МакетОформления", 0);
		КонецЕсли;
		Если ЭлементыФормы.Найти("ПолеВыбораОформления")<>Неопределено Тогда
			ЭлементыФормы.ПолеВыбораОформления.Значение = НастройкиФормы.МакетОформления;
		КонецЕсли;
		
		КнопкаДиаграмма = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("Диаграмма");
		Если КнопкаДиаграмма <> Неопределено Тогда
			Если Не НастройкиФормы.Свойство("ВыводитьДиаграмму") Тогда
				НастройкиФормы.Вставить("ВыводитьДиаграмму", Ложь);
			КонецЕсли;
			КнопкаДиаграмма.Пометка = НастройкиФормы.ВыводитьДиаграмму;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОтчета.НастройкиФормы = НастройкиФормы;
	
КонецПроцедуры

Процедура ДобавитьЭлементСортировки(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Сортировка");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Порядок";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		ЭлементПорядка = ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
		ЭлементПорядка.Поле  = ТекущиеДанные.Поле;
		ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		
		ФормаОтчета.ЭлементыФормы.Сортировка.ТекущаяСтрока = ЭлементПорядка;
	КонецЕсли;
	
КонецПроцедуры

Процедура СортировкаПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Поле" Тогда
		ТекущаяСтрока = ЭлементыФормы.Сортировка.ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Сортировка");
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "Порядок";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляПорядка, ТекущаяСтрока.Поле, "ДоступноеПоле");
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			ЭлементПорядка = ЭлементыФормы.Сортировка.ТекущаяСтрока;
			
			ЭлементПорядка.Поле  = ТекущиеДанные.Поле;
			ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОтборНачалоВыбора(ОтчетОбъект, ФормаОтчета, Элемент, СтандартнаяОбработка) Экспорт
		
	Если ТипЗнч(Элемент.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Отбор");
		Форма.РодителиПоля = РодителиПоля;
		
		Форма.Режим = "Отбор";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, Элемент.Значение, "ДоступноеПоле");
		
		ТекущиеДанные = Форма.ОткрытьМодально();
		
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
			Элемент.Значение  = ТекущиеДанные.Поле;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.ЗначенияСвойствОбъектов") Тогда
		Поле = ФормаОтчета.ЭлементыФормы.Отбор.ТекущиеДанные.ЛевоеЗначение;
		ПозицияНазванияХарактеристики = Найти(Поле, "[");
		
		ПолеРодитель = Лев(Поле, ПозицияНазванияХарактеристики - 2);
		ИмяХарактеристики = СтрЗаменить(Сред(Поле, ПозицияНазванияХарактеристики + 1), " (доп. реквизит)", "");
		ИмяХарактеристики = СтрЗаменить(ИмяХарактеристики, "]", "");
		
		ТипПолеРодитель = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ПолеРодитель, "Тип");
		Если ТипПолеРодитель = Неопределено Тогда
			ТипПолеРодитель = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ПолеРодитель, "Тип");
		КонецЕсли;
		
		Если ТипПолеРодитель <> Неопределено Тогда
			ВыборкаНазначения = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Выбрать();
			
			НазначениеСсылка = Неопределено;
			Пока ВыборкаНазначения.Следующий() Цикл
				Если Не ВыборкаНазначения.ПометкаУдаления Тогда
					МассивТипов = ТипПолеРодитель.Типы();
					НазначениеСсылка = ВыборкаНазначения.Ссылка;
					Для Каждого ЭлементМассива Из МассивТипов Цикл
						Если Не ВыборкаНазначения.ТипЗначения.СодержитТип(ЭлементМассива) Тогда
							НазначениеСсылка = Неопределено;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НазначениеСсылка <> Неопределено Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НазначениеСсылка <> Неопределено Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СвойстваОбъектов.Ссылка КАК Ссылка
				|ИЗ
				|	ПланВидовХарактеристик.СвойстваОбъектов КАК СвойстваОбъектов
				|ГДЕ
				|	СвойстваОбъектов.НазначениеСвойства = &Назначение
				|	И СвойстваОбъектов.Наименование = &ИмяХарактеристики";
				Запрос.УстановитьПараметр("Назначение"       , НазначениеСсылка);
				Запрос.УстановитьПараметр("ИмяХарактеристики", ИмяХарактеристики);
				
				Результат = Запрос.Выполнить();
				Если Не Результат.Пустой() Тогда
					Выборка = Результат.Выбрать();
					Выборка.Следующий();
					
					ХарактеристикаСсылка = Выборка.Ссылка;
					
					СтандартнаяОбработка = Ложь;
					ФормаВыбора = Справочники.ЗначенияСвойствОбъектов.ПолучитьФормуВыбора(, Элемент);
					ФормаВыбора.Отбор.Владелец.Значение      = ХарактеристикаСсылка;
					ФормаВыбора.Отбор.Владелец.Использование = Истина;
					
					ФормаВыбора.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		ТекущийВидСравнения = ФормаОтчета.ЭлементыФормы.Отбор.ТекущиеДанные.ВидСравнения;
		ТекущийТипЗначения  = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, ФормаОтчета.ЭлементыФормы.Отбор.ТекущиеДанные.ЛевоеЗначение, "Тип");
		
		// Принятая в конфигурации обработка работает только для равенства/неравенства
		Если ТекущийВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			ИЛИ ТекущийВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
			
			СписокПараметров = Новый Структура;
			
			Попытка 
				СписокПараметров = ОтчетОбъект.ПолучитьПараметрыВыбораЗначенияОтбора();
			Исключение
			КонецПопытки;
			
			Для Каждого СтрокаОтбора Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
						ЗначениеОтбора = ?(ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений"), СтрокаОтбора.ПравоеЗначение, СтрокаОтбора.ПравоеЗначение[0].Значение);
						ТипЗначенияПоля = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
						
						Если ТипЗначенияПоля = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура.ТипЗначения Тогда
							СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады.ТипЗначения Тогда
							СписокПараметров.Вставить("Склад", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты.ТипЗначения Тогда
							СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
						ИначеЕсли ТипЗначенияПоля = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры.ТипЗначения Тогда
							СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОтборОбработатьВыборЗначения(Элемент, СтандартнаяОбработка, ОтчетОбъект.Организация, СписокПараметров, ТекущийТипЗначения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборДобавитьГруппу(ОтчетОбъект, ФормаОтчета, Кнопка) Экспорт
	
	ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		
КонецПроцедуры

Процедура ОтборДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Отбор");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Отбор";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеОтбораКомпоновкиДанных") Тогда
		Если ТипЗнч(ТекущаяСтрока) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ЭлементОтбора = ТекущаяСтрока.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ТекущаяСтрока) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекущаяСтрока.Родитель <> Неопределено Тогда
				ЭлементОтбора = ТекущаяСтрока.Родитель.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Иначе
				ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			КонецЕсли;
		Иначе
			ЭлементОтбора = ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		КонецЕсли;
		
		ЭлементОтбора.ЛевоеЗначение  = ТекущиеДанные.Поле;
		Если Строка(ТекущиеДанные.Поле) = "Организация" И ОтчетОбъект.Метаданные().Реквизиты.Найти("Организация") <> Неопределено Тогда
			ЭлементОтбора.ПравоеЗначение = ОтчетОбъект.Организация;
		ИначеЕсли Строка(ТекущиеДанные.Поле) = "Подразделение" И ОтчетОбъект.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда 
			ЭлементОтбора.ПравоеЗначение = ОтчетОбъект.Подразделение;
		Иначе
			ЭлементОтбора.ПравоеЗначение = ТекущиеДанные.Тип.ПривестиЗначение(Неопределено);
		КонецЕсли;
		Если ТекущиеДанные.ДоступныеВидыСравнения.Количество() > 0 Тогда
			ЭлементОтбора.ВидСравнения   = ТекущиеДанные.ДоступныеВидыСравнения[0].Значение;
		КонецЕсли;
		ОтборПриОкончанииРедактирования(ФормаОтчета, Неопределено, Истина, Ложь);
		
		ФормаОтчета.ЭлементыФормы.Отбор.ТекущаяСтрока = ЭлементОтбора;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОтборПриОкончанииРедактирования(ФормаОтчета, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					ФормаОтчета.Организация = ЭлементОтбора.ПравоеЗначение;	
				Иначе
					ФормаОтчета.Организация = Неопределено;	
				КонецЕсли; 
				
				ФормаОтчета.ВключатьОбособленныеПодразделения = Ложь;
				Если ФормаОтчета.Подразделение.Владелец <> ФормаОтчета.Организация Тогда
					ФормаОтчета.Подразделение = Неопределено;
				КонецЕсли;
				
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("Организация"                      , ФормаОтчета.Организация);
				ПараметрыОтбора.Вставить("ВключатьОбособленныеПодразделения", ФормаОтчета.ВключатьОбособленныеПодразделения);
				
				НайденныеСтроки = ФормаОтчета.ТаблицаОрганизаций.НайтиСтроки(ПараметрыОтбора);
				Если НайденныеСтроки.Количество() = 0 Тогда
					ФормаОтчета.ЭлементыФормы.Организация.Значение = Неопределено;
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					ФормаОтчета.ЭлементыФормы.Организация.Значение = ФормаОтчета.ТаблицаОрганизаций.Индекс(НайденныеСтроки[0]);
				КонецЕсли;
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ДоступностьУчетаПоПодразделениям() Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					ФормаОтчета.Подразделение = ЭлементОтбора.ПравоеЗначение;
				Иначе
					ФормаОтчета.Подразделение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ГруппировкаДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Группировка");
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "Группировка";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		НоваяСтрока = ФормаОтчета.Группировка.Добавить();
		
		НоваяСтрока.Использование  = Истина;
		НоваяСтрока.Представление  = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
		НоваяСтрока.Поле           = ТекущиеДанные.Поле;
		НоваяСтрока.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы;
		
		ФормаОтчета.ЭлементыФормы.Группировка.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура ГруппировкаПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда
		ТекущаяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "Группировка");
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "Группировка";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, ТекущаяСтрока.Поле, "ДоступноеПоле");
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = ЭлементыФормы.Группировка.ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = Строка(ТекущиеДанные.Поле);
		КонецЕсли;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляДобавитьЭлемент(ОтчетОбъект, ФормаОтчета, Отказ = Ложь) Экспорт
	
	Отказ = Истина;
	
	Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "ДополнительныеПоля");		
	Форма.РодителиПоля = РодителиПоля;
	Форма.Режим = "ВыбранныеПоля";
	Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	ТекущиеДанные = Форма.ОткрытьМодально();
	Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
		НоваяСтрока = ФормаОтчета.ДополнительныеПоля.Добавить();
		
		НоваяСтрока.Использование = Истина;
		НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
		НоваяСтрока.Поле          = ТекущиеДанные.Поле;
		
		ФормаОтчета.ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока = НоваяСтрока;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеПоляПередНачаломИзменения(ОтчетОбъект, ФормаОтчета, Элемент, Отказ) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если Элемент.ТекущаяКолонка.Имя = "Представление" Тогда 
		ТекущаяСтрока = ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока;
		Форма = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
		РодителиПоля = ПолучитьЗапрещенныеПоля(ОтчетОбъект, "ДополнительныеПоля");	
		Форма.РодителиПоля = РодителиПоля;
		Форма.Режим = "ВыбранныеПоля";
		Форма.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
		Форма.ПараметрТекущаяСтрока = ПолучитьСвойствоПоля(Форма.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, ТекущаяСтрока.Поле, "ДоступноеПоле");		
		ТекущиеДанные = Форма.ОткрытьМодально();
		Если ТипЗнч(ТекущиеДанные) = Тип("ДоступноеПолеКомпоновкиДанных") Тогда
			НоваяСтрока = ЭлементыФормы.ДополнительныеПоля.ТекущаяСтрока;
			
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Представление = ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, ТекущиеДанные.Поле);
			НоваяСтрока.Поле          = ТекущиеДанные.Поле;
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказателиОтчетаПередНачаломИзменения(ОтчетОбъект, Элемент, Отказ) Экспорт
	
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		НайденнаяСтрока = Элемент.Значение.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПоказателиОтчетаПриИзмененииФлажка(ОтчетОбъект, Элемент, Колонка) Экспорт
	
	ЗначениеПоказателей = Элемент.Значение;
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	Количество = 0;
	Для Каждого СтрокаТаблицы Из ЗначениеПоказателей Цикл
		Если СтрокаТаблицы.Показатель <> "Развернутое сальдо" Тогда
			Количество = Количество + СтрокаТаблицы.Использование;
		КонецЕсли;
	КонецЦикла;
	
	Если Количество = 0 Тогда
		Элемент.ТекущаяСтрока.Использование = Истина;
	КонецЕсли;
	
	Для Каждого ЭлементСтруктуры Из ПоказателиОтчета Цикл
		НайденнаяСтрока = ЗначениеПоказателей.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказателиОтчетаПриВыводеСтроки(ОтчетОбъект, Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт 
	
КонецПроцедуры

Процедура ОбновитьПредставлениеПоказателейОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ОтчетОбъект.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	Иначе
		ОтчетОбъект.ПолучитьСтруктуруПоказателейОтчета();
		ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	КонецЕсли;
	
	ТабличноеПоле = ФормаОтчета.ЭлементыФормы.Найти("ПоказателиОтчета");
	Если ТабличноеПоле <> Неопределено Тогда 
		ЗначениеПоказателей = ТабличноеПоле.Значение;
	Иначе
		ЗначениеПоказателей = Новый ТаблицаЗначений;
		ЗначениеПоказателей.Колонки.Добавить("Использование");
		ЗначениеПоказателей.Колонки.Добавить("Показатель");
	КонецЕсли;
	
	ЗначениеПоказателей.Очистить();
	
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Значение.Использование Тогда			
			НоваяСтрока = ЗначениеПоказателей.Добавить();
			НоваяСтрока.Использование = Показатель.Значение.Значение;
			НоваяСтрока.Показатель    = Показатель.Значение.Представление;
		КонецЕсли;
	КонецЦикла;
	
	ФормаОтчета.ЭлементыФормы.ПоказателиОтчета.Значение = ЗначениеПоказателей;	
	
КонецПроцедуры

Процедура ПредставлениеПодписиДиаграммыНачалоВыбора(ФормаОтчета, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаСоставаПодписи = ПолучитьОбщуюФорму("ФормаНастройкиСоставаПодписи", ФормаОтчета);
	ФормаСоставаПодписи.СоставПодписи      = ФормаОтчета.ДанныеОтчета.ВидПодписиДиаграммы;
	ФормаСоставаПодписи.ДоступностьПериода = ФормаОтчета.Периодичность > 0;
	Если ФормаСоставаПодписи.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		ФормаОтчета.ДанныеОтчета.ВидПодписиДиаграммы = ФормаСоставаПодписи.СоставПодписи;
		ФормаОтчета.ПредставлениеПодписиДиаграммы = ПолучитьВидПодписиДиаграммы(ФормаОтчета.ДанныеОтчета.ВидПодписиДиаграммы, Истина);
		ОбработкаИзмененияНастроекДиаграммы(ФормаОтчета, ФормаОтчета.ЭлементыФормы.Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемПанелиПользователя(ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	Кнопка = ЭлементыФормы.ДействияФормыДополнительные.Кнопки.ПанельПользователя;
	
	Если Кнопка.Пометка тогда
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаОтчета.ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Нет;
		ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;
		Если ШиринаПанели / ФормаОтчета.Ширина > 0.5 тогда
			ШиринаПанели = 306;
			ЭлементыФормы.ПанельПользователя.Ширина = ШиринаПанели;
			ЭлементыФормы.ПанельПользователя.Лево = ФормаОтчета.Ширина - ШиринаПанели -6;
		КонецЕсли;
		ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ФормаОтчета.Панель, ГраницаЭлементаУправления.Право);
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.Разделитель.Лево = ФормаОтчета.Ширина - ШиринаПанели - 6;
		ЭлементыФормы.Результат.Ширина = ФормаОтчета.Ширина - 6 - ШиринаПанели;
	Иначе
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
		ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ФормаОтчета.ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемДиаграммы(ФормаОтчета, ФиксацияСверху = 2, ФиксацияСлева = 0) Экспорт
	
	Результат      = ФормаОтчета.ЭлементыФормы.Результат;
	НастройкиФормы = ФормаОтчета.НастройкиФормы;
	
	Пометка = ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Диаграмма.Пометка;
	НастройкиФормы.Вставить("ВыводитьДиаграмму", Пометка);
	
	ФормаОтчета.ЭлементыФормы.ПанельЗакладок.Страницы.Диаграмма.Видимость = Пометка;
	
	ОбработкаИзмененияНастроекДиаграммы(ФормаОтчета, Результат, ФиксацияСверху, ФиксацияСлева);
	
КонецПроцедуры

Процедура УправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость тогда
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Нет;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Лево - 6;
	Иначе
		ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;
		ФормаОтчета.ЭлементыФормы.Результат.Ширина = ФормаОтчета.Ширина - 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеОтображениемПанелиДополнительныеНастройки(ФормаОтчета, Видимость = Истина) Экспорт
	
	Если Видимость Тогда
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Заголовок = "Скрыть дополнительные настройки";
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Картинка  = БиблиотекаКартинок.Минус;
		ФормаОтчета.ЭлементыФормы.ПанельДополнительныеНастройки.Свертка    = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Заголовок = "Показать дополнительные настройки";
		ФормаОтчета.ЭлементыФормы.НадписьДополнительныеНастройки.Картинка  = БиблиотекаКартинок.Плюс;
		ФормаОтчета.ЭлементыФормы.ПанельДополнительныеНастройки.Свертка    = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуЭлементов(ФормаОтчета) Экспорт
	
	ТаблицаЭлементов = Новый ТаблицаЗначений;
	ТаблицаЭлементов.Колонки.Добавить("Элемент");
	ТаблицаЭлементов.Колонки.Добавить("Верх");
	
	Для Каждого ЭлементУправления Из ФормаОтчета.ЭлементыФормы Цикл
		НоваяСтрока = ТаблицаЭлементов.Добавить();
		НоваяСтрока.Элемент = ЭлементУправления.Имя;
		НоваяСтрока.Верх = ЭлементУправления.Верх;
	КонецЦикла;
	
	ФормаОтчета.НастройкиФормы.Вставить("ТаблицаЭлементов", ТаблицаЭлементов);
	
КонецПроцедуры

Процедура УсловноеОформлениеПриВыводеСтроки(ОтчетОбъект, Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт 

	Если ДанныеСтроки.Поля.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОбластиДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>'");
		ОформлениеСтроки.Ячейки.ОбластиДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Все поля>'");
		
	КонецЕсли;
	
	Если ДанныеСтроки.Отбор.Элементы.Количество() = 0 Тогда
		
		ОформлениеСтроки.Ячейки.ОтборДляКраткогоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>'");
		ОформлениеСтроки.Ячейки.ОтборДляПодробногоОтображенияЭлемента.Текст = НСтр("ru='<Без условия>'");
		
	КонецЕсли;
	
	ЦветФона = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветФона"));
	Если ЦветФона.Использование Тогда
		
		ОформлениеСтроки.ЦветФона = ЦветФона.Значение;
		
	КонецЕсли;
	
	ЦветТекста = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ЦветТекста"));
	Если ЦветТекста.Использование Тогда
		
		ОформлениеСтроки.ЦветТекста = ЦветТекста.Значение;
		
	КонецЕсли;
	
	Шрифт = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт"));
	Если Шрифт.Использование Тогда
		
		ОформлениеСтроки.Шрифт = Шрифт.Значение;
		
	КонецЕсли;
	
	Текст = ДанныеСтроки.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Текст"));
	Если Текст.Использование Тогда
		Если ТипЗнч(Текст.Значение) = Тип("ПолеКомпоновкиДанных") Тогда
			ПредставлениеПоля = СтандартныеОтчеты.ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, Текст.Значение);
		Иначе
			ПредставлениеПоля = Текст.Значение;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.ОформлениеДляКраткогоОтображенияЭлемента.Текст   = ПредставлениеПоля;
		ОформлениеСтроки.Ячейки.ОформлениеДляПодробногоОтображенияЭлемента.Текст = ПредставлениеПоля;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого Оформление Из ОформленияСтрок Цикл		
		Если Оформление.ДанныеСтроки.Использование = Ложь Тогда			
			Оформление.ЦветТекста = ПолучитьЦветНеИспользуемогоЭлемента();			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗапрещенныеПоля(ОтчетОбъект, Режим = "Группировка") Экспорт
	
	ДанныеОтчета = ОтчетОбъект.ДанныеОтчета;
	
	РодителиПоля = Новый ТаблицаЗначений;
	РодителиПоля.Колонки.Добавить("Поле");
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "UserFields";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "DataParameters";
	НоваяСтрока = РодителиПоля.Добавить();
	НоваяСтрока.Поле = "SystemFields";
			
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Если Режим = "ДополнительныеПоля" Тогда
		Для Каждого ДоступноеПоле Из ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если ДоступноеПоле.Ресурс Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = Строка(ДоступноеПоле.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ОтчетОбъект.НастройкиФормы.Свойство("ДоступностьПодразделения") Тогда
		Если Не ОтчетОбъект.НастройкиФормы.ДоступностьПодразделения Тогда 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Подразделение";
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
		Если Режим = "ДополнительныеПоля" Тогда
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		КонецЕсли;		
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
				Если Не ОтчетОбъект.Счет.УчетПоПодразделениям Тогда
					НоваяСтрока = РодителиПоля.Добавить();
					НоваяСтрока.Поле = "Подразделение";
				КонецЕсли;
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Регистратор";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();

			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.НУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ПР.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ПРДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ПРКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВР.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВРДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВРКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаКт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.Количество.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоКт";
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОбъект.Счет) Тогда 
				КоличествоСубконто = ОтчетОбъект.Счет.ВидыСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВидСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ПериодГруппировки";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.НУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ПР.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ПРДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ПРКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВР.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВРДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВРКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаКт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.Количество.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоКт";
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Для Индекс = 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВидСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ПериодГруппировки";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Период";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
		Если Режим = "Группировка" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ОтчетОбъект.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Счет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорСчет";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Валюта";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "КорВалюта";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели"; 
		ИначеЕсли Режим = "ДополнительныеПоля" Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ОтчетОбъект.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод";
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
		ИначеЕсли Режим = "Отбор" ИЛИ Режим = "Сортировка" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			НоваяСтрока = РодителиПоля.Добавить();
			НоваяСтрока.Поле = "Показатели";
			ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, РодителиПоля);
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовСубконто) Тогда 
				КоличествоСубконто = ОтчетОбъект.СписокВидовСубконто.Количество();
			Иначе
				КоличествоСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Субконто" + Индекс;
			КонецЦикла;
			Если ЗначениеЗаполнено(ОтчетОбъект.СписокВидовКорСубконто) Тогда 
				КоличествоКорСубконто = ОтчетОбъект.СписокВидовКорСубконто.Количество();
			Иначе
				КоличествоКорСубконто = 0;
			КонецЕсли;
			Для Индекс = КоличествоКорСубконто + 1 По 3 Цикл
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КорСубконто" + Индекс;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		Если Режим = "Отбор" Тогда
			ПоказателиОтчета = ДанныеОтчета.ПоказателиОтчета;
			Если Не ПоказателиОтчета.БУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "БУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.НУ.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "НУКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ПР.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ПРДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ПРКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВР.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВРДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВРКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.ВалютнаяСумма.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютнаяСуммаКт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "Валюта";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "ВалютаКт";
			КонецЕсли;
			Если Не ПоказателиОтчета.Количество.Значение Тогда
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоДт";
				НоваяСтрока = РодителиПоля.Добавить();
				НоваяСтрока.Поле = "КоличествоКт";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РодителиПоля;
	
КонецФункции

Процедура ДобавитьПоляРесурсовВЗапрещенныеПоля(ОтчетОбъект, ТаблицаПолей)
	
	ПоказателиОтчета = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	Для Каждого Показатель Из ПоказателиОтчета Цикл
		Если Показатель.Ключ = "РазвернутоеСальдо" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Показатель.Значение.Значение Тогда
			Если Показатель.Ключ = "Контроль" Тогда
				Продолжить;
			КонецЕсли;
			Если ПоказателиОтчета.РазвернутоеСальдо.Значение Тогда
				ВидОстатка = "";
			Иначе
				ВидОстатка = "Развернутый";
			КонецЕсли;
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "Начальный" + ВидОстатка + "ОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "Начальный" + ВидОстатка + "ОстатокКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "Конечный" + ВидОстатка + "ОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "Конечный" + ВидОстатка + "ОстатокКт";
		Иначе
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйОстатокКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод." + Показатель.Ключ + "ОборотДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "ОборотыЗаПериод." + Показатель.Ключ + "ОборотКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйОстатокКт";
			
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйРазвернутыйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаНачалоПериода." + Показатель.Ключ + "НачальныйРазвернутыйОстатокКт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйРазвернутыйОстатокДт";
			НоваяСтрока = ТаблицаПолей.Добавить();
			НоваяСтрока.Поле = "СальдоНаКонецПериода." + Показатель.Ключ + "КонечныйРазвернутыйОстатокКт";
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьТаблицуОрганизаций(ФормаОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НаборОрганизаций.Организация КАК Организация,
	|	НаборОрганизаций.ОрганизацияПредставление КАК ОрганизацияПредставление,
	|	НаборОрганизаций.ВключатьОбособленныеПодразделения
	|ИЗ
	|	(ВЫБРАТЬ
	|		Организации.Ссылка КАК Организация,
	|		Организации.Наименование КАК ОрганизацияПредставление,
	|		ЛОЖЬ КАК ВключатьОбособленныеПодразделения
	|	ИЗ
	|		Справочник.Организации КАК Организации
	|";
	
	Если ДоступностьУчетаПоПодразделениям() Тогда
		Запрос.Текст = Запрос.Текст + 
		"	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		Организации.ГоловнаяОрганизация,
		|		Организации.ГоловнаяОрганизация.Наименование + "" с обособленными подразделениями"",
		|		ИСТИНА
		|	ИЗ
		|		Справочник.Организации КАК Организации
		|	ГДЕ
		|		Организации.ГоловнаяОрганизация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст +  
	") КАК НаборОрганизаций
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияПредставление";
	
	ФормаОтчета.ТаблицаОрганизаций = Запрос.Выполнить().Выгрузить();
	СписокВыбора = Новый СписокЗначений;
	МаксКоличествоСимволов = 40;
	Для Каждого СтрокаТаблицы Из ФормаОтчета.ТаблицаОрганизаций Цикл
		СписокВыбора.Добавить(ФормаОтчета.ТаблицаОрганизаций.Индекс(СтрокаТаблицы), СтрокаТаблицы.ОрганизацияПредставление);
		МаксКоличествоСимволов = Макс(МаксКоличествоСимволов, СтрДлина(СтрокаТаблицы.ОрганизацияПредставление));
	КонецЦикла;
	ФормаОтчета.ЭлементыФормы.Организация.СписокВыбора = СписокВыбора;
	ФормаОтчета.ЭлементыФормы.Организация.ШиринаСпискаВыбора = Окр(?(МаксКоличествоСимволов > 200, 200, МаксКоличествоСимволов) * 1.3);
	ФормаОтчета.ЭлементыФормы.Организация.ВысотаСпискаВыбора = ?(ФормаОтчета.ТаблицаОрганизаций.Количество() > 15, 15, ФормаОтчета.ТаблицаОрганизаций.Количество());
	
	СтрокаПоиска = ФормаОтчета.ТаблицаОрганизаций.НайтиСтроки(Новый Структура("Организация, ВключатьОбособленныеПодразделения", ФормаОтчета.Организация, ФормаОтчета.ВключатьОбособленныеПодразделения));
	
	Если СтрокаПоиска.Количество() = 1 Тогда
		ФормаОтчета.ПолеОрганизация = ФормаОтчета.ТаблицаОрганизаций.Индекс(СтрокаПоиска[0]);
	КонецЕсли; 

КонецПроцедуры

Процедура ОрганизацияПриИзменении(ФормаОтчета, Элемент) Экспорт 
	
	Если ФормаОтчета.ПолеОрганизация = Неопределено Тогда
		ФормаОтчета.Организация                       = ФормаОтчета.ПолеОрганизация;
		ФормаОтчета.ВключатьОбособленныеПодразделения = Ложь;
	Иначе
		ФормаОтчета.Организация                       = ФормаОтчета.ТаблицаОрганизаций[ФормаОтчета.ПолеОрганизация].Организация;
		ФормаОтчета.ВключатьОбособленныеПодразделения = ФормаОтчета.ТаблицаОрганизаций[ФормаОтчета.ПолеОрганизация].ВключатьОбособленныеПодразделения;
	КонецЕсли;
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
				Если ФормаОтчета.ВключатьОбособленныеПодразделения Тогда
					ЭлементОтбора.Использование = Ложь;
				Иначе
					ЭлементОтбора.ПравоеЗначение = ФормаОтчета.Организация;
					ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементОтбора.Использование  = ЗначениеЗаполнено(ФормаОтчета.Организация);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ФормаОтчета.ЭлементыФормы.Найти("Подразделение") <> Неопределено Тогда
		ФормаОтчета.Подразделение = Неопределено;
		ПодразделениеПриИзменении(ФормаОтчета, ФормаОтчета.ЭлементыФормы.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодразделениеПриИзменении(ФормаОтчета, Элемент) Экспорт
	
	Для Каждого ЭлементОтбора Из ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
				Если ЗначениеЗаполнено(ФормаОтчета.Подразделение) Тогда
					ЭлементОтбора.ПравоеЗначение = ФормаОтчета.Подразделение;
					ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВИерархии;
				Иначе
					ЭлементОтбора.Использование = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеВосстановитьЗначения(ОтчетОбъект, ФормаОтчета) Экспорт
	
	СохранениеНастроек.ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Ложь);
	ТиповыеОтчеты.ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);
	ТиповыеОтчеты.ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);
	
	ОтчетОбъект.РежимРасшифровки = Ложь;
	ОтчетОбъект.Настроить();
	
	// Установим "нажатость" кнопки Диаграмма, в зависимости от сохраненной настройки
	КнопкаДиаграмма = ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.Найти("Диаграмма");
	Если КнопкаДиаграмма <> Неопределено Тогда
		Если ФормаОтчета.НастройкиФормы.Свойство("ВыводитьДиаграмму") Тогда
			КнопкаДиаграмма.Пометка = ФормаОтчета.НастройкиФормы.ВыводитьДиаграмму;
		Иначе
			КнопкаДиаграмма.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОтчета.ОбновитьПанельНастроек();
	
	Отбор = Новый Структура("Организация, ВключатьОбособленныеПодразделения", 
							ОтчетОбъект.Организация, 
							ОтчетОбъект.ВключатьОбособленныеПодразделения);
							
	НайденныеСтроки = ФормаОтчета.ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		ФормаОтчета.ПолеОрганизация = ФормаОтчета.ТаблицаОрганизаций.Индекс(НайденныеСтроки[0]);
	Иначе
		ФормаОтчета.ПолеОрганизация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыДополнительныеСохранитьЗначения(ОтчетОбъект, ФормаОтчета) Экспорт
	
	СохранениеНастроек.ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя, Истина, ПолучитьПредставлениеНастройкиДляИстории(ОтчетОбъект));
	
КонецПроцедуры

Процедура ЗаполнитьДополнительныеПоляПоУмолчанию(ОтчетОбъект) Экспорт
	
	ДанныеОтчета = ОтчетОбъект.ДанныеОтчета;
	КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	
	ДанныеОтчета.ДополнительныеПоля.Очистить();
	
	Для Каждого Группировка Из ДанныеОтчета.Группировка Цикл 
		ТипПоля = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, Группировка.Поле, "Тип");	
		
		Если ТипПоля.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ИНН";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".КПП";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.ОсновныеСредства")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".СвязанноеПолеИнвентарныйНомер_ОС";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);	
		ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ВидДвиженияДенежныхСредств";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.РасходыБудущихПериодов")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ВидРБП";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаНачалаСписания";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);	
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаОкончанияСписания";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
		ИначеЕсли ТипПоля.СодержитТип(Тип("ДокументСсылка.СчетФактураПолученный"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеНМА"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.СписаниеСРасчетногоСчета"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ОтражениеНачисленияНДС"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ОтражениеНДСКВычету"))
			// {ОбособленныеПодразделения
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.АвизоРасчетыВходящее"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.АвизоПрочееВходящее"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.АвизоОСВходящее"))
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.АвизоМПЗВходящее")) 
			// }ОбособленныеПодразделения 
			ИЛИ ТипПоля.СодержитТип(Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")) Тогда
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".НомерВходящегоДокумента";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);
			НоваяСтрока = ДанныеОтчета.ДополнительныеПоля.Добавить();
			НоваяСтрока.Использование = Ложь;
			НоваяСтрока.Поле          = Строка(Группировка.Поле) + ".ДатаВходящегоДокумента";
			НоваяСтрока.Представление = СтандартныеОтчеты.ПолучитьСвойствоПоля(КомпоновщикНастроек, НоваяСтрока.Поле);	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьПодразделения(ФормаОтчета) Экспорт
	
	Видимость = ДоступностьУчетаПоПодразделениям();
	
	ЭлементыФормы = ФормаОтчета.ЭлементыФормы;
	
	Если ЭлементыФормы.Найти("Подразделение") <> Неопределено Тогда 
		ЭлементыФормы.Подразделение.Видимость = Видимость;
	КонецЕсли;   
	
	Если ЭлементыФормы.Найти("НадписьПодразделение") <> Неопределено Тогда 
		ЭлементыФормы.НадписьПодразделение.Видимость = Видимость;
	КонецЕсли;
	
КонецПроцедуры

Процедура КолонкаСчетПриИзменении(Элемент) Экспорт
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.Счет) Тогда
			ТекущаяСтрока.ПоСубконто.Очистить();
			Представление = "";
			Если Элемент.Имя = "ГруппировкаКор" И ТекущаяСтрока.Счет.УчетПоПодразделениям Тогда
				ТекущаяСтрока.ПоСубконто.Добавить("Подразделения", , Истина);
				Представление = "Подразделения, ";
			КонецЕсли;
			
			Для Индекс = 0 По ТекущаяСтрока.Счет.ВидыСубконто.Количество() - 1 Цикл
				ВидСубконто = ТекущаяСтрока.Счет.ВидыСубконто[Индекс].ВидСубконто;
				ТекущаяСтрока.ПоСубконто.Добавить(ВидСубконто, , Истина);
				Представление = Представление + ВидСубконто + ", ";
			КонецЦикла;
			
			ТекущаяСтрока.ПоСубсчетам = ТекущаяСтрока.ПоСубконто.Количество() = 0;
			ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриАктивизацииКолонки(Элемент)Экспорт
	
	Если Элемент.ТекущаяКолонка.Имя = "Счет" Тогда
		Элемент.ЗакончитьРедактированиеСтроки(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриИзменении(ФормаОтчета, ИмяЭлемента, Отказ, Изменение = Ложь) Экспорт
	
	Элемент = ФормаОтчета.ЭлементыФормы[ИмяЭлемента];
	
	Если Изменение Тогда
		Если Элемент.ТекущаяКолонка.Имя = "Счет" Тогда 
			Отказ = Истина;
			
			ТекущаяСтрока = Элемент.ТекущаяСтрока;
			ВыбранноеЗначение = ВыбратьСчет(ИмяЭлемента, ТекущаяСтрока.Счет);
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда 
				ТекущаяСтрока.Счет = ВыбранноеЗначение;
				КолонкаСчетПриИзменении(Элемент);	
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		Отказ = Истина;
		
		ВыбранноеЗначение = ВыбратьСчет(ИмяЭлемента);
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			НоваяСтрока = ФормаОтчета[ИмяЭлемента].Добавить();
			НоваяСтрока.Счет          = ВыбранноеЗначение;
			НоваяСтрока.Использование = Истина;
			Элемент.ТекущаяСтрока = НоваяСтрока;	
			
			КолонкаСчетПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	РаскраскаНедоступныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.ПоСубконто.Количество() = 0 Тогда
			ОформлениеСтроки.Ячейки.Представление.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Не ОформлениеСтроки.ДанныеСтроки.Счет.ЗапретитьИспользоватьВПроводках Тогда
			ОформлениеСтроки.Ячейки.ПоСубсчетам.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПриИзмененииФлажка(ФормаОтчета, ИмяЭлемента, Колонка) Экспорт
	
	Если Колонка.Имя = "ПоСубсчетам" Тогда
		ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			Если ТекущаяСтрока.ПоСубсчетам Тогда
				Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
					ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
					ТекущаяСтрока.Представление = "";
				КонецЕсли; 
			Иначе
				Если ТекущаяСтрока.ПоСубконто.Количество() = 0 Тогда
					ТекущаяСтрока.ПоСубсчетам = Истина;
					Возврат;
				КонецЕсли;
				ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Истина);
				Представление = "";
				Для Каждого СтрокаСписка Из ТекущаяСтрока.ПоСубконто Цикл
					Если СтрокаСписка.Пометка Тогда
						Представление = Представление + СтрокаСписка.Значение + ", ";
					КонецЕсли;
				КонецЦикла;
				ТекущаяСтрока.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеНачалоВыбора(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		ФормаНастройкиСубконто = ПолучитьОбщуюФорму("ФормаНастройкаПоСубконто", Элемент);
		ФормаНастройкиСубконто.Список = ТекущаяСтрока.ПоСубконто.Скопировать();
		ФормаНастройкиСубконто.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОчистка(ФормаОтчета, ИмяЭлемента, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		Если ТекущаяСтрока.Счет.ЗапретитьИспользоватьВПроводках Тогда
			ТекущаяСтрока.ПоСубконто.ЗаполнитьПометки(Ложь);
			ТекущаяСтрока.Представление = "";
			ТекущаяСтрока.ПоСубсчетам = Истина;
		Иначе
			ТекущаяСтрока.ПоСубсчетам = Ложь;
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТабличноеПолеПоСчетамПредставлениеОбработкаВыбора(ФормаОтчета, ИмяЭлемента, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	ТекущаяСтрока = ФормаОтчета.ЭлементыФормы[ИмяЭлемента].ТекущаяСтрока;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Представление = "";
		Для Каждого СтрокаСписка Из ВыбранноеЗначение Цикл
			Если СтрокаСписка.Пометка Тогда
				Представление = Представление + СтрокаСписка.Значение + ", ";
			КонецЕсли;
		КонецЦикла;
		Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
		Если ПустаяСтрока(Представление) И Не ТекущаяСтрока.Счет.ЗапретитьИспользоватьВПроводках Тогда
			Возврат;
		КонецЕсли;
		
		ТекущаяСтрока.ПоСубконто    = ВыбранноеЗначение;
		ТекущаяСтрока.Представление = Представление;
		
		Если ПустаяСтрока(Представление) Тогда
			ТекущаяСтрока.ПоСубсчетам = Истина;
		Иначе
			Если ИмяЭлемента = "РазвернутоеСальдо" Тогда
				ТекущаяСтрока.ПоСубсчетам = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция КоличествоПоказателей(ОтчетОбъект) Экспорт 
	
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Значение И Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КоличествоПоказателей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ И ВЫВОДА ОТЧЕТА, ОБРАБОТКА РЕЗУЛЬТАТА ОТЧЕТА
////////////////////////////////////////////////////////////////////////////////

Процедура СохранитьКопиюРезультатаОтчета(ОтчетОбъект, ФормаОтчета, ПолноеИмяФайла = "") Экспорт
	
	Результат = ФормаОтчета.ЭлементыФормы.Результат;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Save as";
	Если ПустаяСтрока(ПолноеИмяФайла) Тогда 
		ПолноеИмяФайла = ОтчетОбъект.Метаданные().Синоним;
	КонецЕсли;
	ПолноеИмяФайла = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ПолноеИмяФайла);
	Диалог.ПолноеИмяФайла = ПолноеИмяФайла;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Фильтр = "Табличный документ (*.mxl)|*.mxl|"
	      		  + "Документ Microsoft Excel (*.xls)|*.xls|";
	Если Диалог.Выбрать() Тогда
		ИмяФайла = Диалог.ПолноеИмяФайла;
		Попытка
			Результат.Записать(ИмяФайла, ?(Прав(ИмяФайла,3) = "xls", ТипФайлаТабличногоДокумента.XLS, ТипФайлаТабличногоДокумента.MXL));
		Исключение
			Предупреждение("Ошибка при записи. Файл не записан.");
		КонецПопытки;		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчета(ОтчетОбъект, Результат) Экспорт
	
	// Выводим надписи вертикально, если количество точек диаграмм больше 9
	Для Каждого Рисунок Из Результат.Рисунки Цикл
		Попытка
			Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
				Рисунок.Объект.ОбластьПостроения.ВертикальныеМетки  = (Рисунок.Объект.Точки.Количество() > 9);
				Рисунок.Объект.ОбластьПостроения.ФорматШкалыЗначений = "ЧГ=3,0";
				Рисунок.Объект.ОбластьЛегенды.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная, 1);
				
				Рисунок.Объект.ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы = ПоложениеПодписейШкалыЗначенийИзмерительнойДиаграммы.НаШкале;
				Рисунок.Объект.ПодписиШкалыЗначенийИзмерительнойДиаграммыВдольШкалы = Истина;
				Рисунок.Объект.ТолщинаШкалыИзмерительнойДиаграммы                   = 3;
				Рисунок.Объект.ФорматЗначенийВПодписях                              = "ЧДЦ=2; ЧГ=3,0";
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Результат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_" + ОтчетОбъект.Метаданные().Имя;
	
	УправлениеОтчетами.УстановитьКолонтитулыПоУмолчанию(Результат, ОтчетОбъект.ПолучитьТекстЗаголовка(Ложь), Строка(глЗначениеПеременной("глТекущийПользователь")));
	
КонецПроцедуры

Процедура ВывестиОтчет(ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ЗаполнятьДанныеРасшифровки = Истина, НастройкаКомпоновкиДанных = Неопределено) Экспорт
	
	ПараметрыИсполненияОтчета = Неопределено;
	
	Попытка
		ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Исключение
	КонецПопытки;
	
	Если ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета тогда
		ИспользоватьСобытияПриФормированииОтчета = Истина;
	Иначе
		ИспользоватьСобытияПриФормированииОтчета = Ложь;
	КонецЕсли;
	
	Если НастройкаКомпоновкиДанных = Неопределено Тогда 
		НастройкаКомпоновкиДанных = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Схема = ТиповыеОтчеты.ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	МакетОформления = ПолучитьМакетОформленияОтчета(ОтчетОбъект, НастройкаКомпоновкиДанных);
	
	//Сгенерируем макет компоновки данных при помощи компоновщика макета
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Попытка
		
		//В качестве схемы компоновки будет выступать схема самого отчета
		//В качестве настроек отчета - текущие настройки отчета
		//Данные расшифровки будем помещать в ДанныеРасшифровки
		Если ЗаполнятьДанныеРасшифровки Тогда 
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкаКомпоновкиДанных, ДанныеРасшифровки, МакетОформления);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, НастройкаКомпоновкиДанных, , МакетОформления);
		КонецЕсли;
		
		//Вызываем событие отчета
		Попытка
			ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки);
		Исключение
		КонецПопытки;
		
		//Создадим и инициализируем процессор компоновки
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		Если ВнешниеНаборыДанных = Неопределено Тогда
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
		Иначе
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
		КонецЕсли;
		
		//Создадим и инициализируем процессор вывода результата
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(Результат);
		
		//Обозначим начало вывода
		ПроцессорВывода.НачатьВывод();
		
		Если ИспользоватьСобытияПриФормированииОтчета Тогда
			//Основной цикл вывода отчета
			Пока Истина Цикл
				
				ОбработкаПрерыванияПользователя();
				//Получим следующий элемент результата компоновки
				ЭлементРезультата = ПроцессорКомпоновки.Следующий();
				
				Если ЭлементРезультата = Неопределено Тогда
					//Следующий элемент не получен - заканчиваем цикл вывода
					Прервать;
				Иначе
					
					Отказ = Ложь;
					
					Попытка
						ОтчетОбъект.ПередВыводомЭлементаРезультата(МакетКомпоновки, ДанныеРасшифровки, ЭлементРезультата, Отказ);
					Исключение
					КонецПопытки;
					
					Если Не Отказ Тогда
						//Элемент получен - выведем его при помощи процессора вывода
						ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			//Завершение вывода отчета
			ПроцессорВывода.ЗакончитьВывод();
		Иначе
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
		КонецЕсли;
		
	Исключение
		Вопрос("Отчет не сформирован!" + Символы.ПС + ТиповыеОтчеты.ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()), РежимДиалогаВопрос.ОК);
	КонецПопытки;

КонецПроцедуры

Процедура ВыводЗаголовкаОтчета(ОтчетОбъект, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Организация
	Если ЗначениеЗаполнено(ОтчетОбъект.Организация) Тогда
		ТекстОрганизация = ПолучитьТекстОрганизация(ОтчетОбъект);
		ОбластьОрганизация.Параметры.НазваниеОрганизации = ТекстОрганизация;
		Результат.Вывести(ОбластьОрганизация);
	КонецЕсли;
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОтчетОбъект.ПолучитьТекстЗаголовка();
	Результат.Вывести(ОбластьЗаголовок);
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Значение.Использование И Показатель.Значение.Значение
			И Показатель.Ключ <> "РазвернутоеСальдо" Тогда
			ТекстВыводимыеДанные = ТекстВыводимыеДанные + Показатель.Значение.Представление + ", ";
			КоличествоПоказателей = КоличествоПоказателей + 1;
		КонецЕсли;
	КонецЦикла;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Выводимые данные:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	// Отбор
	ТекстОтбор = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
	ТекстПодразделение = "";
	
	ЕстьОтборПоПодразделению = Ложь;
	Для Каждого ЭлементОтбора Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
				И ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
				ЕстьОтборПоПодразделению = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьОтборПоПодразделению Тогда 
		Если ЗначениеЗаполнено(ОтчетОбъект.Подразделение) Тогда
			ТекстПодразделение = "Подразделение В группе """ + ОтчетОбъект.Подразделение + """";
		КонецЕсли;
		Если Не ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение + " И " + ТекстОтбор;
		ИначеЕсли ПустаяСтрока(ТекстОтбор) И Не ПустаяСтрока(ТекстПодразделение) Тогда
			ТекстОтбор = ТекстПодразделение;
		КонецЕсли;
	КонецЕсли;
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Отбор:";
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Если ИдентификаторОбъекта <>  "ОтчетОбъект.ОборотноСальдоваяВедомость" 
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСчета"
		И ИдентификаторОбъекта <> "ОтчетОбъект.КарточкаСубконто"
		И ИдентификаторОбъекта <> "ОтчетОбъект.ОтчетПоПроводкам" Тогда
		// Сортировка
		ТекстСортировка = "";
		Для Каждого СтрокаПорядок Из ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
			Если СтрокаПорядок.Использование Тогда
				ТекстСортировка = ТекстСортировка + ПолучитьСвойствоПоля(ОтчетОбъект.КомпоновщикНастроек, СтрокаПорядок.Поле);
				ТекстСортировка = ТекстСортировка + " " + Строка(СтрокаПорядок.ТипУпорядочивания) + ", ";
			КонецЕсли;
		КонецЦикла;
		ТекстСортировка = Лев(ТекстСортировка, СтрДлина(ТекстСортировка) - 2);
		
		Если Не ПустаяСтрока(ТекстСортировка) Тогда
			ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = "Сортировка:";
			ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстСортировка;
			Результат.Вывести(ОбластьОписаниеНастроек);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	Результат.Области.Заголовок.Видимость = ОтчетОбъект.НастройкиФормы.ВыводитьЗаголовок;
	
КонецПроцедуры

Процедура ВыводПодписейОтчета(ОтчетОбъект, Результат) Экспорт
	
	Если ОтчетОбъект.НастройкиФормы.ВыводитьПодписи Тогда
		Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		
		Результат.Вывести(ОбластьПодписи);
		
	КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьМакетОформленияОтчета(ОтчетОбъект, НастройкаКомпоновкиДанных) Экспорт
	
	Попытка
		НастройкиФормы = ОтчетОбъект.НастройкиФормы;
		
		МакетОформления = Неопределено;
		
		Если НастройкиФормы.МакетОформления = 0 Тогда // Зеленый
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
		ИначеЕсли НастройкиФормы.МакетОформления = 1 Тогда // Черно-белый
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЧерноБелый");
		ИначеЕсли НастройкиФормы.МакетОформления = 2 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Основной");
		ИначеЕсли НастройкиФормы.МакетОформления = 3 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Яркий");
		ИначеЕсли НастройкиФормы.МакетОформления = 4 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Море");
		ИначеЕсли НастройкиФормы.МакетОформления = 5 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Арктика");
		ИначеЕсли НастройкиФормы.МакетОформления = 6 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Зеленый");
		ИначеЕсли НастройкиФормы.МакетОформления = 7 Тогда 
			ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "Античный");
		КонецЕсли;
	Исключение
		ТиповыеОтчеты.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", "МакетОформленияОтчетовЗеленый");
	КонецПопытки;
	
	Возврат МакетОформления;
	
КонецФункции

Процедура УправлениеОтображениемОбластейОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	НеобходимоОбновить = Ложь;
	НастройкиФормы = ОтчетОбъект.НастройкиФормы;
	
	Если Не НастройкиФормы.Свойство("ВыводитьЗаголовок") Тогда
		НастройкиФормы.Вставить("ВыводитьЗаголовок", Истина);
	КонецЕсли;
	
	ОбластьПоиска = ФормаОтчета.ЭлементыФормы.Результат.Области.Найти("Заголовок");
	Если ОбластьПоиска = Неопределено Тогда
		НеобходимоОбновить = Истина;
	Иначе
		ОбластьПоиска.Видимость = НастройкиФормы.ВыводитьЗаголовок;
	КонецЕсли;
	
	Если Не НастройкиФормы.Свойство("ВыводитьПодписи") Тогда
		НастройкиФормы.Вставить("ВыводитьПодписи", Истина);
	КонецЕсли;
	
	ОбластьПоиска = ФормаОтчета.ЭлементыФормы.Результат.Области.Найти("Подписи");
	Если ОбластьПоиска = Неопределено Тогда
		НеобходимоОбновить = Истина;
	Иначе
		ОбластьПоиска.Видимость = НастройкиФормы.ВыводитьПодписи;
	КонецЕсли;
	
	Если НеобходимоОбновить Тогда
		ФормаОтчета.ОбновитьОтчет(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДанныеОтчета(ФормаОтчета) Экспорт 
	
	СписокСохраняемыхДанных = Новый Массив;
	СписокСохраняемыхДанных.Добавить("Группировка");
	СписокСохраняемыхДанных.Добавить("ГруппировкаКор");
	СписокСохраняемыхДанных.Добавить("ДополнительныеПоля");
	СписокСохраняемыхДанных.Добавить("РазвернутоеСальдо");
	СписокСохраняемыхДанных.Добавить("ПоказательДиаграммы");
	СписокСохраняемыхДанных.Добавить("ПредставлениеДиаграммы");
	СписокСохраняемыхДанных.Добавить("ВидПодписиДиаграммы");
	СписокСохраняемыхДанных.Добавить("РазмещениеДополнительныхПолей");
	
	Для Каждого Ключ Из СписокСохраняемыхДанных Цикл
		Попытка
			Если ТипЗнч(ФормаОтчета[Ключ]) = Тип("ТаблицаЗначений") Тогда
				ФормаОтчета.ДанныеОтчета.Вставить(Ключ, ФормаОтчета[Ключ].Скопировать());
			Иначе
				ФормаОтчета.ДанныеОтчета.Вставить(Ключ, ФормаОтчета[Ключ]);
			КонецЕсли;
		Исключение
		КонецПопытки;
	КонецЦикла;

	ПоказателиОтчета = ФормаОтчета.ЭлементыФормы.ПоказателиОтчета.Значение;
	
	Для Каждого ЭлементСтруктуры Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
		НайденнаяСтрока = ПоказателиОтчета.Найти(ЭлементСтруктуры.Значение.Представление, "Показатель");
		Если НайденнаяСтрока <> Неопределено Тогда
			ЭлементСтруктуры.Значение.Значение = НайденнаяСтрока.Использование;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

Функция ПроверитьЗаполнениеОбязательныхРеквизитов(ФормаОтчета) Экспорт
	
	ЗаполнениеКорректно = Истина;    
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ФормаОтчета.ЭтотОбъект);
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда
		Если Не ЗначениеЗаполнено(ФормаОтчета.Счет) Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать счет." + Символы.ПС + "Открыть план счетов?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если ВвестиЗначение(ФормаОтчета.Счет, "Выберите счет") Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСчета();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;  
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.Счет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
		КоличествоСубконто = 0;
		Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				КоличествоСубконто = КоличествоСубконто + 1;
			КонецЕсли;
		КонецЦикла;
		КоличествоКорСубконто = 0;
		Для Каждого ВидСубконто Из ФормаОтчета.СписокВидовКорСубконто Цикл
			Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
				КоличествоКорСубконто = КоличествоКорСубконто + 1;
			КонецЕсли;
		КонецЦикла;
		Если КоличествоСубконто = 0 Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать вид субконто." + Символы.ПС + "Открыть список видов субконто?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ФормаОтчета.СписокВидовСубконто.Добавить();
				Если ВвестиЗначение(ФормаОтчета.СписокВидовСубконто[0].Значение, "Выберите вид субконто", Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные")) Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСоставаСубконто();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.СписокВидовСубконто;
			КонецЕсли;
		КонецЕсли;
		Если КоличествоКорСубконто = 0 Тогда
			Ответ = Вопрос("Для формирования отчета необходимо указать вид кор. субконто." + Символы.ПС + "Открыть список видов субконто?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ФормаОтчета.СписокВидовКорСубконто.Добавить();
				Если ВвестиЗначение(ФормаОтчета.СписокВидовКорСубконто[0].Значение, "Выберите вид субконто", Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоХозрасчетные")) Тогда
					ЗаполнениеКорректно = Истина;
					ФормаОтчета.ОбработкаИзмененияСоставаСубконто();
					ФормаОтчета.ОбновитьПанельНастроек();
				Иначе
					ЗаполнениеКорректно = Ложь;
				КонецЕсли;
			Иначе
				ЗаполнениеКорректно = Ложь;
			КонецЕсли;
			Если Не ЗаполнениеКорректно Тогда 
				ФормаОтчета.ТекущийЭлемент = ФормаОтчета.ЭлементыФормы.СписокВидовКорСубконто;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОтчета.КонецПериода) И ФормаОтчета.НачалоПериода > ФормаОтчета.КонецПериода Тогда 
		Предупреждение("Дата начала периода не может быть больше даты конца периода!");
		ЗаполнениеКорректно = Ложь;
	КонецЕсли;
	
	Возврат ЗаполнениеКорректно;
	
КонецФункции

Процедура ЗаполнитьДанныеОтчета(ОтчетОбъект) Экспорт
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	//Данные отчета
	Если ОтчетОбъект.ДанныеОтчета = Неопределено Тогда
		ОтчетОбъект.ДанныеОтчета = Новый Структура;
	КонецЕсли;
	
	// Показатели отчета
	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказателиОтчета") Тогда
		ОтчетОбъект.ПолучитьСтруктуруПоказателейОтчета();
	КонецЕсли;
		
	// Дополнительные поля
	Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
		ОтчетОбъект.ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ДополнительныеПоля") Тогда
			ДополнительныеПоля = Новый ТаблицаЗначений;
			ДополнительныеПоля.Колонки.Добавить("Использование");
			ДополнительныеПоля.Колонки.Добавить("Представление");
			ДополнительныеПоля.Колонки.Добавить("Поле");
			ДополнительныеПоля.Колонки.Добавить("Положение");
			ОтчетОбъект.ДанныеОтчета.Вставить("ДополнительныеПоля", ДополнительныеПоля);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по счету
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			Группировка.Колонки.Добавить("Использование");
			Группировка.Колонки.Добавить("Представление");
			Группировка.Колонки.Добавить("Поле");
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПеречислениеСсылка.ТипДетализацииСтандартныхОтчетов"));
			Группировка.Колонки.Добавить("ТипГруппировки", Новый ОписаниеТипов(МассивТипов));
			ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
	КонецЕсли;
	
	
	// Группировка по кор. счетам
	Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ГруппировкаКор") Тогда
			ГруппировкаКор = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			ГруппировкаКор.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			ГруппировкаКор.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
			ГруппировкаКор.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			ГруппировкаКор.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			ГруппировкаКор.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ОтчетОбъект.ДанныеОтчета.Вставить("ГруппировкаКор", ГруппировкаКор);
		КонецЕсли;
	КонецЕсли;
	
	// Группировка
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("Группировка") Тогда
			Группировка = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			Группировка.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			Группировка.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
			Группировка.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			Группировка.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			Группировка.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			
			ОтчетОбъект.ДанныеОтчета.Вставить("Группировка", Группировка);
		КонецЕсли;
		
		// РазвернутоеСальдо 
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("РазвернутоеСальдо") Тогда
			РазвернутоеСальдо = Новый ТаблицаЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Булево"));
			РазвернутоеСальдо.Колонки.Добавить("Использование", Новый ОписаниеТипов(МассивТипов));		
			РазвернутоеСальдо.Колонки.Добавить("ПоСубсчетам", Новый ОписаниеТипов(МассивТипов));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("ПланСчетовСсылка.Хозрасчетный"));
			РазвернутоеСальдо.Колонки.Добавить("Счет", Новый ОписаниеТипов(МассивТипов));
			РазвернутоеСальдо.Колонки.Добавить("Представление", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СписокЗначений"));
			РазвернутоеСальдо.Колонки.Добавить("ПоСубконто", Новый ОписаниеТипов(МассивТипов));
			ОтчетОбъект.ДанныеОтчета.Вставить("РазвернутоеСальдо", РазвернутоеСальдо);
		КонецЕсли;
	КонецЕсли;
	
	// Настройки диаграммы	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПоказательДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ПоказательДиаграммы", 0);
		КонецЕсли;
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ВидПодписиДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ВидПодписиДиаграммы", 0010);
		КонецЕсли;
		Если Не ОтчетОбъект.ДанныеОтчета.Свойство("ПредставлениеДиаграммы") Тогда
			ОтчетОбъект.ДанныеОтчета.Вставить("ПредставлениеДиаграммы", 0);
		КонецЕсли;
	КонецЕсли;
	
	//Настройки формы
	Если ОтчетОбъект.НастройкиФормы = Неопределено Тогда
		ОтчетОбъект.НастройкиФормы = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиСтандартногоОтчета(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Перем ВыполненноеДействие;
	
	// Запретим стандартную обработку расшифровки
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам" Тогда 
		ОткрытьЗначение(ФормаОтчета.ДанныеРасшифровки.Элементы[Расшифровка].ПолучитьПоля()[0].Значение);
	Иначе
		ЕстьПодразделение = Ложь;

		МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , истина);
		
		ЕстьПоказатель  = Ложь;
		ЕстьКорЗначение = Ложь;
		ЕстьСчет        = Истина;
		ПервыйЭлемент   = Неопределено;
		Счет            = Неопределено;
		КорСчет         = Неопределено;
		Период          = Неопределено;
		БухТипРесурса   = Неопределено;
		Для Каждого Элемент Из МассивПолей Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
				Если ПервыйЭлемент = Неопределено И Элемент.Поле <> "Показатель" Тогда 
					ПервыйЭлемент = Элемент;
				КонецЕсли;
				Если Элемент.Поле = "Показатель" Тогда
					ЕстьПоказатель = Истина;
				КонецЕсли;
				Если Найти(Элемент.Поле, "Кор") = 1 Тогда
					ЕстьКорЗначение = Истина;
				КонецЕсли;
				Если Элемент.Поле = "КорСчет" Тогда
					КорСчет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Счет" Тогда
					Счет = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "Период" Тогда
					Период = Элемент.Значение;
				КонецЕсли;
				Если Элемент.Поле = "БухТипРесурса" Тогда
					БухТипРесурса = Элемент.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьОСВПоСчету            = Ложь;
		ФормироватьАнализСчета           = Ложь;
		ФормироватьОборотыСчетаПоМесяцам = Ложь;
		ФормироватьОборотыСчетаПоДням    = Ложь;
		ФормироватьКарточкуСчета         = Ложь;
		ФормироватьКарточкуСубконто      = Ложь;
		ФормироватьОтчетПоПроводкам      = Ложь;
		
		ПредставлениеДляОСВПоСчету            = "ОСВ по счету "   + Счет;
		ПредставлениеДляКарточкиСчета         = "Карточка счета " + Счет;
		ПредставлениеДляАнализаСчета          = "Анализ счета "   + Счет;
		ПредставлениеДляОборотыСчетаПоМесяцам = "Обороты счета "  + Счет + " по месяцам";
		ПредставлениеДляОборотыСчетаПоДням    = "Обороты счета "  + Счет + " по дням";
		ПредставлениеДляКарточкиСубконто      = "Карточка субконто";
		ПредставлениеДляОтчетаПоПроводкам     = "Отчет по проводкам";
		
		УстановитьВсеПоказатели = Ложь;
		
		ДобавитьОтборПоВидСубконто    = Истина;
		ДобавитьОтборПоВидКорСубконто = Истина;
		
		Если ПервыйЭлемент <> Неопределено Тогда
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда
				
				// Создадим и инициализируем обработчик расшифровки
				ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
				
				ДоступныеДействия = Новый Массив();
				
				СписокПунктовМеню = Новый СписокЗначений;
				Если Не ЕстьПоказатель И ЗначениеЗаполнено(ПервыйЭлемент.Значение)  И Не ПростойТип(ПервыйЭлемент.Значение) Тогда
					СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
				КонецЕсли;
				СписокПунктовМеню.Добавить(ПредставлениеДляОСВПоСчету);
				СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляАнализаСчета);
				СписокПунктовМеню.Добавить(ПредставлениеДляОборотыСчетаПоМесяцам);
				СписокПунктовМеню.Добавить(ПредставлениеДляОборотыСчетаПоДням);
				
				// Осуществим выбор действия расшифровки пользователем
				Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
				
				Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
					Если ВыполненноеДействие = ПредставлениеДляОСВПоСчету Тогда
						ФормироватьОСВПоСчету   = Истина;
						УстановитьВсеПоказатели = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
						ФормироватьКарточкуСчета = Истина;
						УстановитьВсеПоказатели  = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляАнализаСчета Тогда
						ФормироватьАнализСчета  = Истина;
						УстановитьВсеПоказатели = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляОборотыСчетаПоМесяцам Тогда
						ФормироватьОборотыСчетаПоМесяцам = Истина;
						УстановитьВсеПоказатели          = Истина;
					ИначеЕсли ВыполненноеДействие = ПредставлениеДляОборотыСчетаПоДням Тогда
						ФормироватьОборотыСчетаПоДням = Истина;
						УстановитьВсеПоказатели       = Истина;
					Иначе
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
							ОткрытьЗначение(ПервыйЭлемент.Значение);
							Возврат;
						КонецЕсли;       
					КонецЕсли;
				Иначе 
					Возврат;
				КонецЕсли;
			Иначе
				Если ЕстьПоказатель Тогда
					// Если расшифровывается показатель, то необходимо сразу формировать отчет
					Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
						Если Счет <> Неопределено Тогда 
							ФормироватьКарточкуСчета = Истина;
						Иначе
							ФормироватьКарточкуСубконто = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
						Если ЕстьКорЗначение Тогда
							ФормироватьОтчетПоПроводкам = Истина;
						Иначе
							ФормироватьКарточкуСчета = Истина;		
						КонецЕсли;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" Тогда
						ФормироватьКарточкуСчета = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда				
						ФормироватьОтчетПоПроводкам = Истина;
					ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводки" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
					КонецЕсли;
				Иначе
					Если ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводки" Тогда
						ФормироватьОтчетПоПроводкам = Истина;
						УстановитьВсеПоказатели     = Истина;
					Иначе 
						// Создадим и инициализируем обработчик расшифровки
						ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОтчетОбъект.СхемаКомпоновкиДанных));
						
						ДоступныеДействия = Новый Массив();
						
						СписокПунктовМеню = Новый СписокЗначений;
						
						Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) И Не ПростойТип(ПервыйЭлемент.Значение) Тогда
							СписокПунктовМеню.Добавить("Открыть """ + ПервыйЭлемент.Значение + """");
						КонецЕсли;
						Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСубконто);
							КонецЕсли;	
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" Тогда
							Если ЕстьКорЗначение Тогда 
								СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
							Иначе
								СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
							КонецЕсли;
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляКарточкиСчета);
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
							СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда				
							СписокПунктовМеню.Добавить(ПредставлениеДляОтчетаПоПроводкам);
						КонецЕсли;
						
						Если СписокПунктовМеню.Количество() = 0 Тогда
							ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет;
						Иначе
							// Осуществим выбор действия расшифровки пользователем
							Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие, ДоступныеДействия, СписокПунктовМеню);
						КонецЕсли;
						
						Если ВыполненноеДействие <> ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда 
							Если ВыполненноеДействие = ПредставлениеДляКарточкиСчета Тогда
								ФормироватьКарточкуСчета = Истина;
								УстановитьВсеПоказатели  = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляКарточкиСубконто Тогда
								ФормироватьКарточкуСубконто = Истина;
								УстановитьВсеПоказатели     = Истина;
							ИначеЕсли ВыполненноеДействие = ПредставлениеДляОтчетаПоПроводкам Тогда
								ФормироватьОтчетПоПроводкам = Истина;
								УстановитьВсеПоказатели     = Истина;
							Иначе
								Если ЗначениеЗаполнено(ПервыйЭлемент.Значение) Тогда
									ОткрытьЗначение(ПервыйЭлемент.Значение);
									Возврат;
								КонецЕсли;       
							КонецЕсли;
						Иначе 
							Возврат;
						КонецЕсли;  
					КонецЕсли;
				КонецЕсли;	
			КонецЕсли;
			
			Если ФормироватьКарточкуСчета Тогда 
				ФормаРасшифровка = Отчеты.КарточкаСчета.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьКарточкуСубконто Тогда
				ФормаРасшифровка = Отчеты.КарточкаСубконто.ПолучитьФорму(,, Новый УникальныйИдентификатор);
				ФормаРасшифровка.СписокВидовСубконто = ОтчетОбъект.СписокВидовСубконто.Скопировать();
			ИначеЕсли ФормироватьАнализСчета Тогда
				ФормаРасшифровка = Отчеты.АнализСчета.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьОборотыСчетаПоДням Тогда
				ФормаРасшифровка = Отчеты.ОборотыСчета.ПолучитьФорму(,, Новый УникальныйИдентификатор);
				ФормаРасшифровка.Периодичность = 6;
			ИначеЕсли ФормироватьОборотыСчетаПоМесяцам Тогда
				ФормаРасшифровка = Отчеты.ОборотыСчета.ПолучитьФорму(,, Новый УникальныйИдентификатор);
				ФормаРасшифровка.Периодичность = 9;
			ИначеЕсли ФормироватьОСВПоСчету Тогда
				ФормаРасшифровка = Отчеты.ОборотноСальдоваяВедомостьПоСчету.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			ИначеЕсли ФормироватьОтчетПоПроводкам Тогда
				ФормаРасшифровка = Отчеты.ОтчетПоПроводкам.ПолучитьФорму(,, Новый УникальныйИдентификатор);
			КонецЕсли;
			ФормаРасшифровка.РежимРасшифровки = Истина;
			
			Попытка
				ФормаРасшифровка.Счет = Счет;
			Исключение
				ЕстьСчет = Ложь;
			КонецПопытки;
			
			СписокПолейОтборов = Новый Массив;
			Для каждого Отбор из МассивПолей Цикл
				Если ТипЗнч(Отбор) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") тогда
					Если Отбор.Значение = NULL тогда
						Продолжить;
					КонецЕсли;
					Если Отбор.Поле = "Счет" И ЕстьСчет Тогда
					ИначеЕсли Отбор.Поле = "БухТипРесурса" Тогда
					ИначеЕсли Отбор.Поле = "Счет" И (ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета") Тогда
						ЗначениеСчет = ?(Счет.Уровень() > ФормаОтчета.Счет.Уровень(), Счет, ФормаОтчета.Счет); 
						ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Строка(Отбор.Поле) + БухТипРесурса, ЗначениеСчет, ВидСравненияКомпоновкиДанных.ВИерархии);	
					ИначеЕсли (Отбор.Поле = "Счет" ИЛИ Отбор.Поле = "КорСчет") И Не ЕстьСчет Тогда
						Если Отбор.Поле = "КорСчет" И Не ПустаяСтрока(БухТипРесурса) Тогда      
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Счет" + ?(БухТипРесурса = "Дт", "Кт", "Дт"), Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);	
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);		
						КонецЕсли;
					ИначеЕсли Найти(Отбор.Поле, "Субконто") = 1 тогда
						Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
							Если Счет <> Неопределено Тогда 
								ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
								ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
								ИндексСубконтоОтчет = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + ИндексСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
							Иначе
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
								ИндексСубконто = Число(Сред(Отбор.Поле, 9));
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовСубконто[ИндексСубконто - 1].Значение);
							КонецЕсли;
							ДобавитьОтборПоВидСубконто = Ложь;
						ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" И ФормироватьКарточкуСчета Тогда
							ИндексСубконто = Сред(Отбор.Поле, 9, 1); 
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если НайденнаяСтрока <> Неопределено Тогда
								ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Строка(Отбор.Поле), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.Значение);
							КонецЕсли;
						Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "Субконто");
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						КонецЕсли;
						СписокПолейОтборов.Добавить(Отбор.Поле);
					ИначеЕсли Найти(Отбор.Поле, "КорСубконто") = 1 тогда
						Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
							Если КорСчет <> Неопределено Тогда
								ИндексКорСубконто = Сред(Отбор.Поле, 12, 1); 
								ПозицияКорСубконто = Найти(Отбор.Поле, "КорСубконто");
								ИндексКорСубконтоОтчет = КорСчет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовКорСубконто[Число(ИндексКорСубконто) - 1].Значение, "ВидСубконто").НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСубконто" + ИндексКорСубконтоОтчет, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));	
							Иначе
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ?(Отбор.Иерархия, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
								ИндексСубконто = Число(Сред(Отбор.Поле, 12));
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Вид" + Отбор.Поле, ОтчетОбъект.СписокВидовКорСубконто[ИндексСубконто - 1].Значение);
							КонецЕсли;
							ДобавитьОтборПоВидКорСубконто = Ложь;
						Иначе
							ПозицияСубконто = Найти(Отбор.Поле, "КорСубконто");
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Сред(Отбор.Поле, ПозицияСубконто, СтрДлина(Отбор.Поле) - ПозицияСубконто + 1), Отбор.Значение);
						КонецЕсли;
					ИначеЕсли Отбор.Поле = "Подразделение" Тогда
						Если ЗначениеЗаполнено(Отбор.Значение) И ДоступностьУчетаПоПодразделениям() И Отбор.Иерархия Тогда
							ФормаРасшифровка.Подразделение = Отбор.Значение;
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
						ЕстьПодразделение = Истина;
					ИначеЕсли Отбор.Поле = "Организация" Тогда
						ФормаРасшифровка.Организация = Отбор.Значение;
					ИначеЕсли Отбор.Поле = "Показатель" Тогда 
						Показатель = Отбор.Значение;
					ИначеЕсли Отбор.Поле = "Период" ИЛИ Отбор.Поле = "Регистратор" Тогда 
					Иначе
						Если Отбор.Иерархия Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение, ВидСравненияКомпоновкиДанных.ВИерархии);
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.Поле, Отбор.Значение);
						КонецЕсли;
					КонецЕсли;	
				ИначеЕсли ТипЗнч(Отбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
					Если Отбор.Представление = "###ОтборПоОрганизацииСОП###" Тогда
						Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
							Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда
								ФормаРасшифровка.Организация                       = ЭлементОтбора.ПравоеЗначение;
								ФормаРасшифровка.ВключатьОбособленныеПодразделения = Истина;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Отбор.Представление = "###Контроль###" Тогда
					КонецЕсли;
				ИначеЕсли ТипЗнч(Отбор) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Если СписокПолейОтборов.Найти(Строка(Отбор.ЛевоеЗначение)) = Неопределено Тогда
						Если Найти(Отбор.ЛевоеЗначение, "Субконто") = 1 И ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" И ФормироватьКарточкуСчета Тогда
							ИндексСубконто = Сред(Отбор.ЛевоеЗначение, 9, 1); 
							ПозицияСубконто = Найти(Отбор.ЛевоеЗначение, "Субконто");
							НайденнаяСтрока = Счет.ВидыСубконто.Найти(ОтчетОбъект.СписокВидовСубконто[Число(ИндексСубконто) - 1].Значение, "ВидСубконто");
							Если НайденнаяСтрока <> Неопределено Тогда
								ИндексСубконтоОтчет = НайденнаяСтрока.НомерСтроки;
								ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, СтрЗаменить(Строка(Отбор.ЛевоеЗначение), "Субконто" + ИндексСубконто, "Субконто" + ИндексСубконтоОтчет), Отбор.ПравоеЗначение, Отбор.ВидСравнения);
							КонецЕсли;
						ИначеЕсли Отбор.Представление = "###ОтборПоОрганизации###" Тогда
							ФормаРасшифровка.Организация                       = Отбор.ПравоеЗначение;
							ФормаРасшифровка.ВключатьОбособленныеПодразделения = Ложь;
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьПодразделение Тогда
						ИначеЕсли Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") 
							И Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
							И ДоступностьУчетаПоПодразделениям() Тогда
							ФормаРасшифровка.Подразделение = Отбор.ПравоеЗначение;
						Иначе
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, Отбор.ЛевоеЗначение, Отбор.ПравоеЗначение, Отбор.ВидСравнения);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
				Если ДобавитьОтборПоВидСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "ВидСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если ДобавитьОтборПоВидКорСубконто Тогда
					Индекс = 1;
					Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
						Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
							ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "ВидКорСубконто" + Индекс, ВидСубконто.Значение);
							Индекс = Индекс + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если Период <> Неопределено Тогда
				ФормаРасшифровка.НачалоПериода = Период;
				ФормаРасшифровка.КонецПериода  = СтандартныеОтчеты.КонецПериода(Период, ОтчетОбъект.Периодичность);
			Иначе
				ФормаРасшифровка.НачалоПериода = ОтчетОбъект.НачалоПериода;
				ФормаРасшифровка.КонецПериода  = ОтчетОбъект.КонецПериода;
			КонецЕсли;
			ФормаРасшифровка.Настроить();
			
			
			// Настройка показателей
			Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
				ЭлементСтруктуры.Значение.Значение = Ложь;
			КонецЦикла;
			Если УстановитьВсеПоказатели Тогда
				Для Каждого ЭлементСтруктуры Из ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета Цикл
					Если Не ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета.Контроль.Использование
						И ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.Контроль.Значение Тогда 
						Если ЭлементСтруктуры.Значение.Использование Тогда
							ЭлементСтруктуры.Значение.Значение = Истина;
						КонецЕсли;
					Иначе
						Если ЭлементСтруктуры.Ключ = "Количество" И ЕстьСчет Тогда
							ЭлементСтруктуры.Значение.Значение = Счет.Количественный;
						ИначеЕсли ЭлементСтруктуры.Значение.Использование Тогда
							ЭлементСтруктуры.Значение.Значение = ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета[ЭлементСтруктуры.Ключ].Значение;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если Показатель = "Контроль" Тогда
					МассивПоказателей = Новый Массив;
					МассивПоказателей.Добавить("БУ");
					МассивПоказателей.Добавить("НУ");
					МассивПоказателей.Добавить("ПР");
					МассивПоказателей.Добавить("ВР");
					Для Каждого ЭлементМассива Из МассивПоказателей Цикл
						Если ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Использование Тогда 
							ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Значение = Истина;
						КонецЕсли;  
					КонецЦикла;
				Иначе
					ФормаРасшифровка.ДанныеОтчета.ПоказателиОтчета[Показатель].Значение = Истина;
				КонецЕсли;
			КонецЕсли;
			
			ФормаРасшифровка.Открыть();
			ФормаРасшифровка.ОбновитьОтчет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиОтчетовДляРуководителя(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки,, Истина);
	
	ВидРесурса    = Неопределено;
	БухВидРесурса = Неопределено;
	Субконто1     = Неопределено;
	Субконто2     = Неопределено;
	Период        = Неопределено;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
	Для Каждого Поле Из МассивПолей Цикл 
		Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Поле.Поле = "Контрагент"           ИЛИ Поле.Поле = "Раздел"
			 ИЛИ Поле.Поле = "НоменклатурнаяГруппа" ИЛИ Поле.Поле = "ВидРасхода"
			 ИЛИ Поле.Поле = "ВидПоступления"       ИЛИ Поле.Поле = "ВидДенежныхСредств"
			 ИЛИ Поле.Поле = "Вид" Тогда
				Субконто1 = Поле.Значение;
			ИначеЕсли Поле.Поле = "Договор" ИЛИ Поле.Поле = "Подраздел" 
				  ИЛИ Поле.Поле = "Аналитика" Тогда
				Субконто2 = Поле.Значение;
			ИначеЕсли Поле.Поле = "ВидРесурса" Тогда
				ВидРесурса = Поле.Значение;
			ИначеЕсли Поле.Поле = "БухВидРесурса" Тогда
				БухВидРесурса = Поле.Значение;
			ИначеЕсли Поле.Поле = "Период" Тогда
				Период = Поле.Значение;
			ИначеЕсли Поле.Поле = "Валюта" ИЛИ Поле.Поле = "КонтрагентКор" Тогда
				КорСубконто1 = Поле.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы" Тогда
		Если Субконто1 <> "Расходы" И Субконто1 <> "Доходы без НДС" Тогда 
			Возврат;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Если КорСубконто1 = Неопределено Тогда
			КорСубконто1 = "Итого, руб";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда 
		Если ОтчетОбъект.РежимФормирования = 0 Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.НоменклатурнаяГруппа) Тогда
				Если Субконто1 = Неопределено Тогда
					Субконто1 = ОтчетОбъект.НоменклатурнаяГруппа;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ОтчетОбъект.РежимФормирования = 1 Тогда
			Если ЗначениеЗаполнено(ОтчетОбъект.Контрагент) Тогда
				Если КорСубконто1 = Неопределено Тогда
					КорСубконто1 = ОтчетОбъект.Контрагент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ФормаОтчета.ЭлементыФормы.ПолеРасшифровка.Очистить();
	
	СхемаРасшифровки = ПолучитьОбщийМакет("МакетРасшифровкиОтчетовДляРуководителя");
	ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаРасшифровки));
	
	ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.ЗагрузитьНастройки(СхемаРасшифровки.НастройкиПоУмолчанию);
	Попытка 
		ВидСравненияСубконто1 = ?(Субконто1.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
	Исключение
		ВидСравненияСубконто1 = ВидСравненияКомпоновкиДанных.Равно;
	КонецПопытки;
	Если Субконто1 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Субконто1", Субконто1, ВидСравненияСубконто1);
	КонецЕсли;
	Если Субконто2 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Субконто2", Субконто2);
	КонецЕсли;
	Попытка 
		ВидСравненияКорСубконто1 = ?(КорСубконто1.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
	Исключение
		ВидСравненияКорСубконто1 = ВидСравненияКомпоновкиДанных.Равно;
	КонецПопытки;
	Если КорСубконто1 <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КорСубконто1", КорСубконто1, ВидСравненияКорСубконто1);
	КонецЕсли;
	Если ВидРесурса <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "ВидРесурса", ВидРесурса);
	КонецЕсли;
	Если БухВидРесурса <> Неопределено Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "БухВидРесурса", БухВидРесурса);
	КонецЕсли;
	Если Период <> Неопределено Тогда
		Если ИдентификаторОбъекта <> "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
			И ИдентификаторОбъекта <> "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда 
			ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Период", Период, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
			ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Период", ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		КонецЕсли;
	КонецЕсли;
	ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "ВидОтчета", """" + ОтчетОбъект.Метаданные().Синоним + """");
	
	Показатель = "";	
	Если ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда
		Если Субконто1 <> Неопределено И Субконто2 <> Неопределено Тогда
			Показатель = "Контрагент: " + Строка(Субконто1) + Символы.ПС + "Договор: " + Строка(Субконто2);
		ИначеЕсли Субконто1 <> Неопределено Тогда
			Показатель = "Контрагент: " + Строка(Субконто1);
		Иначе
			Показатель = "По контрагентам";
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства" Тогда
		Если Субконто2 <> Неопределено Тогда
			Показатель = "Показатель: " + Строка(Субконто2);
		Иначе
			Показатель = "Показатель: " + Строка(Субконто1);
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы" Тогда
		Показатель = "Показатель: " + Строка(Субконто1);
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.Продажи" Тогда
		Если ОтчетОбъект.РежимФормирования = 0 Тогда
			Если Субконто1 = Неопределено Тогда		
				Показатель = "По номенклатурным группам";
			Иначе
				Показатель = "Номенклатурная группа: " + Строка(Субконто1);
			КонецЕсли;
		Иначе
			Если КорСубконто1 = Неопределено Тогда		
				Показатель = "По контрагентам";
			Иначе
				Показатель = "Контрагент: " + Строка(КорСубконто1);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Если Субконто1 <> Неопределено И Субконто2 <> Неопределено Тогда
			Показатель = "Вид: " + Строка(Субконто1) + Символы.ПС + "Аналитика: " + Строка(Субконто2);
		ИначеЕсли Субконто1 <> Неопределено Тогда
			Показатель = "Вид: " + Строка(Субконто1);
		КонецЕсли;
		Если ТипЗнч(КорСубконто1) = Тип("СправочникСсылка.Валюты") 
			И КорСубконто1 <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
			Показатель = Показатель + Символы.ПС + "Валюта: " + КорСубконто1;
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ПоступлениеДенежныхСредств"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.РасходДенежныхСредств" Тогда
		Если Субконто1 <> Неопределено Тогда
			Показатель = "Показатель: " + Строка(Субконто1);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Показатель) Тогда 
		Показатель = Показатель + Символы.ПС;
	КонецЕсли;
	
	Если ИдентификаторОбъекта = "ОтчетОбъект.Продажи"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДоходыРасходы"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ПоступлениеДенежныхСредств"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.РасходДенежныхСредств" Тогда
		Если Период = Неопределено Тогда
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(ОтчетОбъект,,, Истина);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", ОтчетОбъект.НачалоПериода);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ОтчетОбъект.КонецПериода);
		Иначе
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(, Период, ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), Истина);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", Период);
			ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)));
		КонецЕсли;
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда 
		Если ВидРесурса = "начало" Тогда
			Показатель = Показатель + "На " + Формат(ОтчетОбъект.НачалоПериода, "ДФ=dd.MM.yyyy") + " (начало дня)";
		ИначеЕсли ВидРесурса = "конец" Тогда
			Показатель = Показатель + "На " + Формат(ОтчетОбъект.КонецПериода, "ДФ=dd.MM.yyyy") + " (конец дня)";
		ИначеЕсли ВидРесурса = "оборот" Тогда
			Показатель = Показатель + "За " + ПолучитьПредставлениеПериода(ОтчетОбъект,,, Истина);
		КонецЕсли;
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", ОтчетОбъект.НачалоПериода);
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ОтчетОбъект.КонецПериода);
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" Тогда
		Показатель = Показатель + "На " + Формат(ОтчетОбъект.Период, "ДФ=dd.MM.yyyy") + " (конец дня)";
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", НачалоДня(ОтчетОбъект.Период));
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , КонецДня(ОтчетОбъект.Период));
	ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей" 
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Показатель = Показатель + "На " + Формат(?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)), "ДФ=dd.MM.yyyy") + " (конец дня)";
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "НачалоПериода", Период);
		ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "КонецПериода" , ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)));
	КонецЕсли;

	ТиповыеОтчеты.УстановитьПараметр(ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка, "Заголовок", Показатель);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаРасшифровки, ФормаОтчета.КомпоновщикНастроекПромежуточнаяРасшифровка.Настройки, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	
	ВнешниеНаборыДанных = Новый Структура;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
		ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Знак,
		|	ВложенныйЗапрос.Счет,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	ВложенныйЗапрос.СтрокаРасшифровки,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.Субконто1,
		|	ВложенныйЗапрос.Субконто2,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.ВидРесурса,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.БухВидРесурса
		|ИЗ
		|	(ВЫБРАТЬ 
		|	""+"" КАК Знак,
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДтКт КАК Сумма,
		|	""Остаток ДтКт "" + ХозрасчетныйОстатки.Счет.Код + "" """""" + ХозрасчетныйОстатки.Счет.Наименование + """""""" КАК СтрокаРасшифровки,
		|	NULL КАК КорСчет,
		|	NULL КАК Субконто1,
		|	NULL КАК Субконто2,
		|	NULL КАК КорСубконто1,
		|	""конец"" КАК ВидРесурса,
		|	NULL КАК Период,
		|	""ДтКт"" КАК БухВидРесурса,
		|ХозрасчетныйОстатки.Субконто1 КАК Субконто11,
		|ХозрасчетныйОстатки.Субконто2 КАК Субконто21
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&Период,
		|			(НЕ Счет.Забалансовый)
		|			И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
		|			&ВидыСубконтоКД,";
		Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей" Тогда
			Запрос.Текст = Запрос.Текст + "			Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
			|				И Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДтКт", "Дт");
			
			ТипКонтрагента = 1;
		Иначе 
			Запрос.Текст = Запрос.Текст + "			Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом))
			|				И Организация = &Организация) КАК ХозрасчетныйОстатки) КАК ВложенныйЗапрос";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ДтКт", "Кт");
			
			ТипКонтрагента = 2;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Знак,
		|	ВложенныйЗапрос.СтрокаРасшифровки,
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.ВидРесурса,
		|	ВложенныйЗапрос.Период,
		|	ВложенныйЗапрос.БухВидРесурса,
		|	ВложенныйЗапрос.Субконто2,
		|	ВложенныйЗапрос.Субконто1,
		|	ВложенныйЗапрос.КорСчет";
		
		СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ТипКонтрагента);	

		Запрос.УстановитьПараметр("Период", ?(КонецПериода(Период, ОтчетОбъект.Интервал) > КонецДня(ОтчетОбъект.КонецПериода), КонецДня(ОтчетОбъект.КонецПериода), КонецПериода(Период, ОтчетОбъект.Интервал)) + 1);
		ВидыСубконтоКД = Новый Массив;
		ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
		Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
		Запрос.УстановитьПараметр("Организация", ОтчетОбъект.Организация);
		Запрос.УстановитьПараметр("ИсключенныеСчета", СписокСчетовИсключаемыхИзРасчетаЗадолженности);
		Если Не ЗначениеЗаполнено(ОтчетОбъект.Организация) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организация = &Организация", "");
		КонецЕсли;
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", Запрос.Выполнить());
	Иначе
		ВнешниеНаборыДанных.Вставить("ТаблицаДанных", ОтчетОбъект.ПромежуточныеДанные);
	КонецЕсли;
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	
	//Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ФормаОтчета.ЭлементыФормы.ПолеРасшифровка);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Если ФормаОтчета.ЭлементыФормы.ПанельПользователя.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
		УправлениеОтображениемПанелиРасшифровки(ФормаОтчета, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеРасшифровкаОбработкаРасшифровки(ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
		
	МассивПолей = ТиповыеОтчеты.ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка);
	Счет = Неопределено;
	ЗначенияСубконто    = Новый Массив;
	ЗначенияКорСубконто = Новый Массив;
	Валюта = Неопределено;
	НачалоПериодаРасшифровки = ТиповыеОтчеты.ПолучитьПараметр(ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка, "НачалоПериода").Значение;
	КонецПериодаРасшифровки  = ТиповыеОтчеты.ПолучитьПараметр(ФормаОтчета.ДанныеРасшифровкиПромежуточнаяРасшифровка, "КонецПериода").Значение;
	Для Каждого Поле Из МассивПолей Цикл
		Если ТипЗнч(Поле) = Тип("ЗначениеПоляРасшифровкиКомпоновкиДанных") Тогда
			Если Поле.Поле = "Счет" Тогда
				Счет = Поле.Значение;
			ИначеЕсли Поле.Поле = "КорСчет" Тогда
				КорСчет = Поле.Значение;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Поле) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто1")
				ИЛИ Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Субконто2") Тогда
				ЗначенияСубконто.Добавить(Поле.ПравоеЗначение);
			ИначеЕсли Поле.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КорСубконто1") Тогда
				ЗначенияКорСубконто.Добавить(Поле.ПравоеЗначение);
				Валюта = Поле.ПравоеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если КорСчет <> Неопределено И КорСчет <> null Тогда
		ФормаРасшифровка = Отчеты.АнализСчета.ПолучитьФорму();
		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСчет", КорСчет);
		Для Индекс = 1 По КорСчет.ВидыСубконто.Количество() Цикл
			Для Каждого ЭлементМассива Из ЗначенияКорСубконто Цикл
				Если КорСчет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементМассива)) Тогда
					ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "КорСубконто" + Индекс, ЭлементМассива, ?(ЭлементМассива.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		ФормаРасшифровка.ПоСубсчетамКорСчетов = Истина;
	Иначе
		ФормаРасшифровка = Отчеты.ОборотноСальдоваяВедомостьПоСчету.ПолучитьФорму();
	КонецЕсли;
	ФормаРасшифровка.РежимРасшифровки = Истина;
	ФормаРасшифровка.НачалоПериода = НачалоПериодаРасшифровки;
	ФормаРасшифровка.КонецПериода  = КонецПериодаРасшифровки;
	ФормаРасшифровка.Организация   = ОтчетОбъект.Организация;
	ФормаРасшифровка.Счет          = Счет;
	ФормаРасшифровка.Настроить();
	
	Для Индекс = 1 По Счет.ВидыСубконто.Количество() Цикл
		Для Каждого ЭлементМассива Из ЗначенияСубконто Цикл
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭлементМассива)) Тогда
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + Индекс, ЭлементМассива, ?(ЭлементМассива.ЭтоГруппа, ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно));
			КонецЕсли; 
		КонецЦикла;
		Если ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПокупателей"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПокупателей"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотныеСредства" Тогда
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + Индекс + ".ВидДоговора", СписокОтбора, ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.ДинамикаЗадолженностиПоставщикам"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ЗадолженностьПоставщикам" Тогда
			Если Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				СписокОтбора.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
				ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Субконто" + Индекс + ".ВидДоговора", СписокОтбора, ВидСравненияКомпоновкиДанных.ВСписке);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если ИдентификаторОбъекта = "ОтчетОбъект.ОстаткиДенежныхСредств" 
		И ТипЗнч(Валюта) = Тип("СправочникСсылка.Валюты") 
		И Валюта <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ТиповыеОтчеты.ДобавитьОтбор(ФормаРасшифровка.КомпоновщикНастроек, "Валюта", Валюта);
	КонецЕсли;
	ФормаРасшифровка.Открыть();
	ФормаРасшифровка.ОбновитьОтчет();
	
КонецПроцедуры

Процедура ДобавитьДиаграммуВСтандартныеОтчеты(ОтчетОбъект) Экспорт
	
	ПолеСерииДиаграммы = Неопределено;
	Для Каждого Поле Из ОтчетОбъект.ДанныеОтчета.Группировка Цикл 
		Если Поле.Использование Тогда
			ПолеСерииДиаграммы = Поле.Поле;
			Прервать;	
		КонецЕсли;
	КонецЦикла;
	
	Если ПолеСерииДиаграммы = Неопределено Тогда 
		ПолеСерииДиаграммы = "Счет";
	Иначе
		Если ОтчетОбъект.Метаданные().Реквизиты.Найти("Счет") <> Неопределено Тогда
			Если ОтчетОбъект.ПоСубсчетам Тогда
				ПолеСерииДиаграммы = "Счет";
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	
	Если ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.РазвернутоеСальдо.Значение Тогда
		ТекстРазвернутый = "Развернутый";
	Иначе
		ТекстРазвернутый = "";
	КонецЕсли;
	
	МассивПоказателей = Новый Массив;
	МассивПоказателей.Добавить("СальдоНаНачалоПериода.БУНачальный" + ТекстРазвернутый + "ОстатокДт");
	МассивПоказателей.Добавить("СальдоНаНачалоПериода.БУНачальный" + ТекстРазвернутый + "ОстатокКт");
	МассивПоказателей.Добавить("ОборотыЗаПериод.БУОборотДт");
	МассивПоказателей.Добавить("ОборотыЗаПериод.БУОборотКт");
	МассивПоказателей.Добавить("СальдоНаКонецПериода.БУКонечный" + ТекстРазвернутый + "ОстатокДт");
	МассивПоказателей.Добавить("СальдоНаКонецПериода.БУКонечный" + ТекстРазвернутый + "ОстатокКт");
	
	Если ПолеСерииДиаграммы <> Неопределено И ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета.БУ.Значение Тогда
		Для Каждого ПолеРесурсДиаграммы Из МассивПоказателей Цикл
			Диаграмма = ОтчетОбъект.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ДиаграммаКомпоновкиДанных"));
			Серия = Диаграмма.Серии.Добавить();
			ПолеСерии = Серия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеСерии.Поле = Новый ПолеКомпоновкиДанных(ПолеСерииДиаграммы);
			Если ПолеСерииДиаграммы = "Счет" Тогда
				ПолеСерии.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			КонецЕсли;
			Серия.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Серия.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			
			Если ОтчетОбъект.Периодичность > 0 Тогда
				Точка = Диаграмма.Точки.Добавить();
				ПолеТочки = Точка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				ПолеТочки.Поле = Новый ПолеКомпоновкиДанных(?(ОтчетОбъект.Периодичность = 2, "Регистратор", "Период"));
				
				Если ЗначениеЗаполнено(ОтчетОбъект.НачалоПериода) И ЗначениеЗаполнено(ОтчетОбъект.КонецПериода) Тогда
					ПолеТочки.ТипДополнения	= ПолучитьТипДополненияПоИнтервалу(ОтчетОбъект.Периодичность);
					ПолеТочки.НачалоПериода = ОтчетОбъект.НачалоПериода;
					ПолеТочки.КонецПериода  = ОтчетОбъект.КонецПериода;
				КонецЕсли;
				
				Точка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
				Точка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			КонецЕсли;
			
			ВыбранноеПоле = Диаграмма.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеРесурсДиаграммы);
			
			ТиповыеОтчеты.УстановитьПараметрВывода(Диаграмма, "ТипДиаграммы"                     , СтандартныеОтчеты.ПолучитьПредставлениеДиаграммы(ОтчетОбъект.ДанныеОтчета.ПредставлениеДиаграммы));
			ТиповыеОтчеты.УстановитьПараметрВывода(Диаграмма, "ТипДиаграммы.ВидПодписей"         , СтандартныеОтчеты.ПолучитьВидПодписиДиаграммы(ОтчетОбъект.ДанныеОтчета.ВидПодписиДиаграммы));
			ТиповыеОтчеты.УстановитьПараметрВывода(Диаграмма, "ТипДиаграммы.АвтоРаздвижениеСерий", АвтоРаздвижениеСерий.Максимум);
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаИзмененияНастроекДиаграммы(ОтчетОбъект, Результат, ФиксацияСверху = 2, ФиксацияСлева = 0) Экспорт
	
	Если Результат.Области.Найти("Заголовок") = Неопределено Тогда
		Результат.ФиксацияСлева  = ФиксацияСлева;
		Результат.ФиксацияСверху = ФиксацияСверху;
		Возврат;
	КонецЕсли;
	
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	Если Результат.Области.Найти("Диаграмма0") <> Неопределено Тогда
		Если ОтчетОбъект.НастройкиФормы.ВыводитьДиаграмму Тогда
			Для Индекс = 0 По 5 Цикл
				Результат.Области["Диаграмма" + Индекс].Видимость = (ОтчетОбъект.ДанныеОтчета.ПоказательДиаграммы = Индекс);
			КонецЦикла;
			Результат.Области["ПустаяОбласть"].Видимость = Истина;
			
			Для Каждого Рисунок Из Результат.Рисунки Цикл
				Попытка
					Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
						Рисунок.Объект.ТипДиаграммы = ПолучитьПредставлениеДиаграммы(ОтчетОбъект.ДанныеОтчета.ПредставлениеДиаграммы);
						Рисунок.Объект.ВидПодписей  = ПолучитьВидПодписиДиаграммы(ОтчетОбъект.ДанныеОтчета.ВидПодписиДиаграммы);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
			
			Результат.ФиксацияСлева  = 0;
			Результат.ФиксацияСверху = ВысотаЗаголовка;
		Иначе
			Для Индекс = 0 По 5 Цикл
				Результат.Области["Диаграмма" + Индекс].Видимость = Ложь;
			КонецЦикла;
			
			ПустаяОбласть = Результат.Области["ПустаяОбласть"];
			ПустаяОбласть.Видимость = Ложь;
			ВысотаДиаграммы = ПустаяОбласть.Низ;
			
			Результат.ФиксацияСлева  = ФиксацияСлева;
			Результат.ФиксацияСверху = ВысотаДиаграммы + ФиксацияСверху;
		КонецЕсли;
	Иначе
		Результат.ФиксацияСлева  = ФиксацияСлева;
		Результат.ФиксацияСверху = ВысотаЗаголовка + ФиксацияСверху;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОтчетаСДиаграммой(ОтчетОбъект, Результат) Экспорт
	
	ДиаграммаВыведена = Ложь;
	
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить("БУ Дт (нач. сальдо)");
	МассивЗаголовков.Добавить("БУ Кт (нач. сальдо)");
	МассивЗаголовков.Добавить("БУ Дт (оборот)");
	МассивЗаголовков.Добавить("БУ Кт (оборот)");
	МассивЗаголовков.Добавить("БУ Дт (кон. сальдо)");
	МассивЗаголовков.Добавить("БУ Кт (кон. сальдо)");
	
	Индекс = 0;
	Для Каждого Рисунок Из Результат.Рисунки Цикл 
		Если ТипЗнч(Рисунок.Объект) = Тип("Диаграмма") Тогда
			ДиаграммаВыведена = Истина;
			
			Рисунок.Объект.ОбластьЗаголовка.Текст = МассивЗаголовков[Индекс];
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	ВысотаЗаголовка = Результат.Области.Заголовок.Низ;
	
	Если ДиаграммаВыведена Тогда
		// Удалим пустые области между диаграммами
		Для Индекс = 1 По 5 Цикл
			Область = Результат.Область("R" + (ВысотаЗаголовка + Индекс * 30 + 1));	
			Результат.УдалитьОбласть(Область, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЦикла;
		
		// Назначим имена областям-диаграммам
		Для Индекс = 0 По 5 Цикл
			Результат.Область(ВысотаЗаголовка + Индекс * 30 + 1,,ВысотаЗаголовка + (Индекс + 1) * 30).Имя = "Диаграмма" + Индекс;
		КонецЦикла;
		Результат.Область(ВысотаЗаголовка + (Индекс) * 30 + 1,,ВысотаЗаголовка + (Индекс) * 30 + 2).Имя = "ПустаяОбласть";
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ИСТОРИЕЙ
////////////////////////////////////////////////////////////////////////////////

Процедура СохранитьНастройкуДляИстории(ОтчетОбъект) Экспорт
	
	МаксимальноеКоличествоХранимыхНастроек = 10;
	
	СтруктураНастроек = ТиповыеОтчеты.ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект);
	СтруктураНастроек.Удалить("История");
	СтруктураНастроек.Удалить("НастройкиФормы");
	
	НастройкиДляИстории = XMLСтрока(Новый ХранилищеЗначения(СтруктураНастроек));
	
	Если ОтчетОбъект.История.НайтиПоЗначению(НастройкиДляИстории) = Неопределено Тогда
		Если ОтчетОбъект.История.Количество() >= МаксимальноеКоличествоХранимыхНастроек Тогда
			ОтчетОбъект.История.Удалить(МаксимальноеКоличествоХранимыхНастроек - 1);
		КонецЕсли; 
		ОтчетОбъект.История.Вставить(0, НастройкиДляИстории, ПолучитьПредставлениеНастройкиДляИстории(ОтчетОбъект));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеНастройкиДляИстории(ОтчетОбъект) Экспорт 
	
	Представление = "";
	
	Попытка 
		Представление = ОтчетОбъект.ПолучитьПредставлениеНастройкиДляИстории();
	Исключение
		
		ОсновнаяЧастьПредставления = "";
		ПредставлениеОрганизации = ПолучитьТекстОрганизация(ОтчетОбъект);
		ПредставлениеОрганизации = ?(Не ПустаяСтрока(ПредставлениеОрганизации), " ", "") + ПредставлениеОрганизации;
		
		ПредставлениеПодразделение = ?(ЗначениеЗаполнено(ОтчетОбъект.Подразделение), " " + ОтчетОбъект.Подразделение, "");
		
		ИдентификаторОбъекта = ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект);
		
		Префикс = "";
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда 
			Префикс = "По счету " + ОтчетОбъект.Счет;
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто" Тогда
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);
			Префикс = "По субконто " + ПредставлениеСубконто;	
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОтчетПоПроводкам"
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.СводныеПроводки" Тогда 
			Префикс = "Проводки ";
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомость" Тогда 
			Префикс = "Данные ";
		КонецЕсли;
		
		Если ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" Тогда
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);
			Префикс = "По субконто " + ПредставлениеСубконто;	
			ПредставлениеСубконто = "";
			Для Каждого ВидСубконто Из ОтчетОбъект.СписокВидовКорСубконто Цикл
				Если ЗначениеЗаполнено(ВидСубконто.Значение) Тогда
					ПредставлениеСубконто = ПредставлениеСубконто + " Кор. " + ВидСубконто.Значение + ", ";
				КонецЕсли;
			КонецЦикла;
			ПредставлениеСубконто = Сред(ПредставлениеСубконто, 1, СтрДлина(ПредставлениеСубконто) - 2);	
			ОсновнаяЧастьПредставления = ОсновнаяЧастьПредставления + ", " + ПредставлениеСубконто;
		КонецЕсли;
		
		ОсновнаяЧастьПредставления = Префикс + ПолучитьПредставлениеПериода(ОтчетОбъект) + ПредставлениеОрганизации + ПредставлениеПодразделение;
		
		СоответствиеПоказателей = Новый Соответствие;
		СоответствиеПоказателей.Вставить("БУ"               , "БУ");
		СоответствиеПоказателей.Вставить("НУ"               , "НУ");
		СоответствиеПоказателей.Вставить("ПР"               , "ПР");
		СоответствиеПоказателей.Вставить("ВР"               , "ВР");
		СоответствиеПоказателей.Вставить("Контроль"         , "Контр.");
		СоответствиеПоказателей.Вставить("ВалютнаяСумма"    , "Вал.");
		СоответствиеПоказателей.Вставить("Количество"       , "Кол.");
		СоответствиеПоказателей.Вставить("РазвернутоеСальдо", "Разв.");
		
		ПредставлениеПоказатели = "";
		Для Каждого Показатель Из ОтчетОбъект.ДанныеОтчета.ПоказателиОтчета Цикл
			Если Показатель.Значение.Значение Тогда
				ПредставлениеПоказатели = ПредставлениеПоказатели + СоответствиеПоказателей[Показатель.Ключ]+ ", ";
			КонецЕсли;
		КонецЦикла;
		ПредставлениеПоказатели = Сред(ПредставлениеПоказатели, 1, СтрДлина(ПредставлениеПоказатели) - 2);
		
		ПредставлениеГруппировка = "";
		Если ИдентификаторОбъекта = "ОтчетОбъект.АнализСубконто" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыМеждуСубконто" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.АнализСчета" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.ОборотыСчета" Тогда
			Для Каждого СтрокаГруппировки Из ОтчетОбъект.ДанныеОтчета.Группировка Цикл
				Если СтрокаГруппировки.Использование Тогда
					ПредставлениеГруппировка = ПредставлениеГруппировка + СтрокаГруппировки.Представление + ?(СтрокаГруппировки.ТипГруппировки = Перечисления.ТипДетализацииСтандартныхОтчетов.Элементы, "", " (" + СтрокаГруппировки.ТипГруппировки + ")") + ", ";
				КонецЕсли;	
			КонецЦикла;
			ПредставлениеГруппировка = Сред(ПредставлениеГруппировка, 1, СтрДлина(ПредставлениеГруппировка) - 2);
		ИначеЕсли ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСчета" 
			ИЛИ ИдентификаторОбъекта = "ОтчетОбъект.КарточкаСубконто" Тогда
			Если ОтчетОбъект.Периодичность <> 0 Тогда
				ПредставлениеГруппировка = "обороты " + ПолучитьПредставлениеПериодичности(ОтчетОбъект.Периодичность);
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеОтбора = Строка(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);
		ДополнительнаяЧастьПредставления = "; " + ПредставлениеПоказатели;
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеГруппировка), "; " + ПредставлениеГруппировка, ПредставлениеГруппировка);
		ДополнительнаяЧастьПредставления = ДополнительнаяЧастьПредставления + ?(Не ПустаяСтрока(ПредставлениеОтбора), "; " + ПредставлениеОтбора, ПредставлениеОтбора);
		
		Представление = СокрЛП(ОсновнаяЧастьПредставления + ДополнительнаяЧастьПредставления);
		
	КонецПопытки;
	
	Возврат Представление;
	
КонецФункции

Процедура ДействияФормыДополнительныеИстория(ФормаОтчета, Кнопка) Экспорт 
	
	ТекущееЗначениеЗакрыватьПанельПриФормированииОтчета = ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета;
	
	Индекс = Число(СтрЗаменить(Кнопка.Имя, "История", ""));
	
	СтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), ФормаОтчета.История[Индекс].Значение).Получить();
	ТиповыеОтчеты.ПрименитьСтруктуруПараметровОтчета(ФормаОтчета.ЭтотОбъект, СтруктураПараметров);
	СтандартныеОтчеты.ВосстановитьНастройкиФормы(ФормаОтчета, Ложь);
	ФормаОтчета.ОбновитьПанельНастроек();
	
	Отбор = Новый Структура("Организация, ВключатьОбособленныеПодразделения", 
							ФормаОтчета.Организация, 
							ФормаОтчета.ВключатьОбособленныеПодразделения);
							
	НайденныеСтроки = ФормаОтчета.ТаблицаОрганизаций.НайтиСтроки(Отбор);
	Если НайденныеСтроки.Количество() = 1 Тогда
		ФормаОтчета.ПолеОрганизация = ФормаОтчета.ТаблицаОрганизаций.Индекс(НайденныеСтроки[0]);
	Иначе
		ФормаОтчета.ПолеОрганизация = Неопределено;
	КонецЕсли;
	
	ФормаОтчета.НастройкиФормы.ЗакрыватьПанельПриФормированииОтчета = ТекущееЗначениеЗакрыватьПанельПриФормированииОтчета;
	ФормаОтчета.ОбновитьОтчет();
	
КонецПроцедуры

Процедура ОбновитьКоллекциюКнопокИстории(ФормаОтчета) Экспорт
	
	МаксимальнаяДлинаПредставления = 100;
	
	ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.История.Кнопки.Очистить();
	
	Индекс = 0;
	Для Каждого ЭлементИстории Из ФормаОтчета.История Цикл
		Представление = ЭлементИстории.Представление;
		
		Если СтрДлина(Представление) > МаксимальнаяДлинаПредставления Тогда
			Представление = Лев(Представление, МаксимальнаяДлинаПредставления - 3) + "...";
		КонецЕсли;
		
		Кнопка = ФормаОтчета.ЭлементыФормы.ДействияФормыДополнительные.Кнопки.История.Кнопки.Добавить("История" + Индекс, ТипКнопкиКоманднойПанели.Действие, Представление, Новый Действие("ДействияФормыДополнительныеИстория"));
		Кнопка.Пояснение = ЭлементИстории.Представление;
		
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ОТЧЕТЫ ДЛЯ РУКОВОДИТЕЛЯ
////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьДенежныеСредства(Период, Организация)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаУчета
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|				И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы)))
	|				И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументыВал)))
	|			ИЛИ (Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета))
	|				ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета))
	|				ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета))
	|				ИЛИ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))
	|					И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеИностраннойВалюты)))
	|					И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам)))
	|					И (НЕ Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РеализацияИностраннойВалюты)))))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаПериод,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаУчета.Счет
	|				ИЗ
	|					СчетаУчета КАК СчетаУчета),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ИТОГИ
	|	СУММА(Остаток)
	|ПО
	|	ОБЩИЕ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГраницаПериод", Период); 
	Запрос.УстановитьПараметр("Организация"  , Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		Возврат Выборка.Остаток;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

Функция ПолучитьПродажи(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	СчетаКонтрагентов.Ссылка КАК Счет
	               |ПОМЕСТИТЬ СчетаКД
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	               |		ИЗ
	               |			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	               |		ГДЕ
	               |			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
	               |		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	               |ГДЕ
	               |	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Счет
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ЕСТЬNULL(ОплатаОтКонтрагентов.СуммаОборотДт, 0) КАК Сумма
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаДС),
	               |			,
	               |			Организация = &Организация,
	               |			КорСчет В
	               |				(ВЫБРАТЬ
	               |					СчетаКД.Счет
	               |				ИЗ
	               |					СчетаКД КАК СчетаКД),
	               |			&ВидыСубконтоКД) КАК ОплатаОтКонтрагентов
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ПрочиеПоступления.СуммаОборотДт, 0)
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаДС),
	               |			,
	               |			Организация = &Организация,
	               |			(НЕ КорСчет В
	               |						(ВЫБРАТЬ
	               |							СчетаКД.Счет
	               |						ИЗ
	               |							СчетаКД КАК СчетаКД))
	               |				И (НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями)))
	               |				И (НЕ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)))
	               |				И (НЕ КорСчет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный))
	               |				И (НЕ КорСчет В ИЕРАРХИИ (&СчетаДС)),
	               |			) КАК ПрочиеПоступления
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(РозничнаяВыручка.СуммаОборотДт, 0)
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			,
	               |			Счет В ИЕРАРХИИ (&СчетаДС),
	               |			,
	               |			Организация = &Организация,
	               |			КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРозничнымиПокупателями))
	               |				ИЛИ КорСчет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Выручка)),
	               |			) КАК РозничнаяВыручка
	               |ИТОГИ
	               |	СУММА(Сумма)
	               |ПО
	               |	ОБЩИЕ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");
	КонецЕсли;
	
	СчетаДС = Новый СписокЗначений;
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ОперационнаяКасса);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизацииВал);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.СпециальныеСчета);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
	СчетаДС.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	
    Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	Запрос.УстановитьПараметр("СчетаДС",        СчетаДС);
	Запрос.УстановитьПараметр("НачалоПериода",  НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",   КонецПериода);
	Запрос.УстановитьПараметр("Организация",    Организация);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Выборка.Следующий();
		Возврат Выборка.Сумма;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗадолженностьПокупателей(Период, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВложенныйЗапрос.СуммаОстаток КАК СуммаОстаток
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ДолгПокупателей.СуммаРазвернутыйОстатокДт КАК СуммаОстаток,
	               |		ДолгПокупателей.Счет КАК Счет,
	               |		ДолгПокупателей.Субконто1 КАК Субконто1,
	               |		ДолгПокупателей.Субконто2 КАК Субконто2
	               |	ИЗ
	               |		РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |				&Период,
	               |				(НЕ Счет.Забалансовый)
	               |					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	               |				&ВидыСубконтоКД,
	               |				Субконто2.ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
	               |					И Организация = &Организация) КАК ДолгПокупателей) КАК ВложенныйЗапрос
	               |ИТОГИ
	               |	СУММА(СуммаОстаток)
	               |ПО
	               |	ОБЩИЕ,
	               |	ВложенныйЗапрос.Счет,
	               |	ВложенныйЗапрос.Субконто2";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Организация = &Организация", "");
	КонецЕсли;
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД"  , ВидыСубконтоКД);
	Запрос.УстановитьПараметр("Период"          , Новый Граница(Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация"     , Организация);
	Запрос.УстановитьПараметр("ИсключенныеСчета", ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.СуммаОстаток;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПросроченнуюЗадолженностьПокупателей(Период, Организация)
	
	Запрос = Новый Запрос;
	
	УстановитьТекстЗапроса(Запрос, Период, Организация);
	
	ПросроченнаяЗадолженность1 = Запрос.Выполнить();	
	
	Запрос.УстановитьПараметр("ПросроченнаяЗадолженность1", ПросроченнаяЗадолженность1);

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПросроченнаяЗадолженность1.Организация,
	|	ПросроченнаяЗадолженность1.Контрагент,
	|	ПросроченнаяЗадолженность1.Договор,
	|	ПросроченнаяЗадолженность1.Просрочено
	|ПОМЕСТИТЬ ПросроченнаяЗадолженность1
	|ИЗ
	|	&ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ПросроченнаяЗадолженность.Просрочено) КАК Просрочено
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПросроченнаяЗадолженность1.Организация КАК Организация,
	|		ПросроченнаяЗадолженность1.Контрагент КАК Контрагент,
	|		ПросроченнаяЗадолженность1.Договор КАК Договор,
	|		ПросроченнаяЗадолженность1.Просрочено КАК Просрочено
	|	ИЗ
	|		ПросроченнаяЗадолженность1 КАК ПросроченнаяЗадолженность1) КАК ПросроченнаяЗадолженность
	|ИТОГИ
	|	СУММА(Просрочено)
	|ПО
	|	ОБЩИЕ";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Просрочено;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции 

Процедура УстановитьТекстЗапроса(Запрос, КонДата, Организация)
	
	ВидыСубконтоКД = Новый СписокЗначений;
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКД.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКД", ВидыСубконтоКД);
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СтандартныйСрокОплатыПокупателей", Константы.СрокОплатыПокупателей.Получить());
	Запрос.УстановитьПараметр("КонецИнтервала", КонецДня(КонДата));
	Запрос.УстановитьПараметр("ИсключенныеСчета", ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1));
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапросаПоОстаткам =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СчетаКонтрагентов.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКД
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ХозрасчетныйВидыСубконто.Ссылка КАК Ссылка
	|		ИЗ
	|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ГДЕ
	|			ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)) КАК СчетаДоговоров
	|		ПО СчетаКонтрагентов.Ссылка = СчетаДоговоров.Ссылка
	|ГДЕ
	|	СчетаКонтрагентов.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.Организация КАК Организация,
	|	ВложенныйЗапрос.Контрагент КАК Контрагент,
	|	ВложенныйЗапрос.Договор КАК Договор,
	|	ВложенныйЗапрос.СрокОплаты КАК СрокОплаты,
	|	ВложенныйЗапрос.СуммаОстаток КАК ОстатокДолга
	|ПОМЕСТИТЬ ОстаткиДолга
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВзаиморасчетыОстатки.Организация КАК Организация,
	|		ВзаиморасчетыОстатки.Субконто1 КАК Контрагент,
	|		ВзаиморасчетыОстатки.Субконто2 КАК Договор,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).УстановленСрокОплаты
	|				ТОГДА ВЫРАЗИТЬ(ВзаиморасчетыОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).СрокОплаты
	|			ИНАЧЕ &СтандартныйСрокОплатыПокупателей
	|		КОНЕЦ КАК СрокОплаты,
	|		ВзаиморасчетыОстатки.Счет КАК Счет,
	|		ВзаиморасчетыОстатки.СуммаРазвернутыйОстатокДт КАК СуммаОстаток
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ГраницаОстатков,
	|				Счет В
	|						(ВЫБРАТЬ
	|							СчетаКД.Счет
	|						ИЗ
	|							СчетаКД КАК СчетаКД)
	|					И (НЕ Счет.Забалансовый)
	|					И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|				&ВидыСубконтоКД,
	|				ВЫРАЗИТЬ(Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора В (ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером))
	|					И Организация = &Организация) КАК ВзаиморасчетыОстатки) КАК ВложенныйЗапрос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОстаткиДолга.СрокОплаты КАК СрокОплаты
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокОплаты";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапросаПоОстаткам = СтрЗаменить(ТекстЗапросаПоОстаткам, "И Организация = &Организация", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапросаПоОстаткам;
	
	МассивСроковОплаты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СрокОплаты");
	
	Если МассивСроковОплаты.Количество() = 0 Тогда
		МассивСроковОплаты.Добавить(0);
	КонецЕсли;
	
	ТекстОстатки = 
	"ВЫБРАТЬ
	|	ОстаткиДолга.Организация,
	|	ОстаткиДолга.Контрагент,
	|	ОстаткиДолга.Договор,
	|	ОстаткиДолга.СрокОплаты,
	|	ОстаткиДолга.ОстатокДолга,
	|	ЕСТЬNULL(Обороты.УвеличениеДолга, 0) КАК УвеличениеДолга
	|ИЗ
	|	ОстаткиДолга КАК ОстаткиДолга";
	
	ТекстОборотыПоСроку = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыОбороты.Организация КАК Организация,
	|	ВзаиморасчетыОбороты.Субконто1 КАК Контрагент,
	|	ВзаиморасчетыОбороты.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотДт > 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотДт
	|		ИНАЧЕ 0
	|	КОНЕЦ - ВЫБОР
	|		КОГДА ВзаиморасчетыОбороты.СуммаОборотКт < 0
	|			ТОГДА ВзаиморасчетыОбороты.СуммаОборотКт
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК УвеличениеДолга
	|ПОМЕСТИТЬ Обороты1
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоИнтервала1,
	|			&КонецИнтервала,
	|			,
	|			Счет В
	|					(ВЫБРАТЬ
	|						СчетаКД.Счет
	|					ИЗ
	|						СчетаКД КАК СчетаКД)
	|				И (НЕ Счет.Забалансовый)
	|				И (НЕ Счет В ИЕРАРХИИ (&ИсключенныеСчета)),
	|			&ВидыСубконтоКД,
	|			(Субконто1, Субконто2) В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ОстаткиДолга.Контрагент,
	|						ОстаткиДолга.Договор
	|					ИЗ
	|						ОстаткиДолга КАК ОстаткиДолга
	|					ГДЕ
	|						ОстаткиДолга.СрокОплаты = &СрокОплаты1)
	|				И Организация = &Организация,
	|			,
	|			) КАК ВзаиморасчетыОбороты";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстОборотыПоСроку = СтрЗаменить(ТекстОборотыПоСроку, "И Организация = &Организация", "");
	КонецЕсли;
	
	МаксКоличествоЧастей = 10;
	КоличествоСроковОплаты = МассивСроковОплаты.Количество();
	ОстатокОтДеления = КоличествоСроковОплаты % МаксКоличествоЧастей;
	
	КоличествоЧастей = (КоличествоСроковОплаты - ОстатокОтДеления) / МаксКоличествоЧастей + ?(ОстатокОтДеления > 0, 1, 0);
	ТекстОборотыПоВсемСрокам = "";
	ТекстВсеОбороты = "";
	Для ИндексЧасти = 1 По КоличествоЧастей Цикл
		НачальныйИндекс = МаксКоличествоЧастей * (ИндексЧасти - 1) + 1;
		КонечныйИндекс  = Мин(КоличествоСроковОплаты, МаксКоличествоЧастей * ИндексЧасти);
		ТекстОбороты = "";
		
		Для ИндексЗапроса = НачальныйИндекс По КонечныйИндекс Цикл
			СрокОплаты = МассивСроковОплаты[ИндексЗапроса - 1];
			Запрос.УстановитьПараметр("НачалоИнтервала" + ИндексЗапроса, НачалоДня(КонДата - (СрокОплаты - 1)* 60*60*24));
			Запрос.УстановитьПараметр("СрокОплаты" + ИндексЗапроса, СрокОплаты);
			
			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСроку, "&НачалоИнтервала1", "&НачалоИнтервала" + ИндексЗапроса);
			ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "&СрокОплаты1", "&СрокОплаты" + ИндексЗапроса);
			Если ИндексЗапроса = НачальныйИндекс Тогда
				ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "ПОМЕСТИТЬ Обороты" + ИндексЧасти);
			Иначе
				ТекстОборотыПоСрокуНом = СтрЗаменить(ТекстОборотыПоСрокуНом, "ПОМЕСТИТЬ Обороты1", "");
			КонецЕсли;
			
			ТекстОбороты = ТекстОбороты
			+ ?(ПустаяСтрока(ТекстОбороты), "", "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|") 
			+ ТекстОборотыПоСрокуНом;
			
		КонецЦикла;
		
		ТекстВсеОбороты = ТекстВсеОбороты + ТекстОбороты + " 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент,
		|	Договор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
		
		ТекстОборотыПоВсемСрокам = ТекстОборотыПоВсемСрокам
		+ ?(ПустаяСтрока(ТекстОборотыПоВсемСрокам), "", "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|") 
		+ "
		|ВЫБРАТЬ 
		|	Обороты" + ИндексЧасти + ".Организация,
		|	Обороты" + ИндексЧасти + ".Контрагент,
		|	Обороты" + ИндексЧасти + ".Договор,
		|	Обороты" + ИндексЧасти + ".УвеличениеДолга
		|ИЗ
		|	Обороты" + ИндексЧасти + " КАК Обороты" + ИндексЧасти;
	КонецЦикла;
	
	ТекстОстаткиИОбороты = ТекстОстатки + "
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	(" + ТекстОборотыПоВсемСрокам + ") КАК Обороты
	|	ПО ОстаткиДолга.Организация = Обороты.Организация
	|		И ОстаткиДолга.Контрагент = Обороты.Контрагент
	|		И ОстаткиДолга.Договор = Обороты.Договор";
	
	ТекстПросрочено =
	"ВЫБРАТЬ
	|	ОстаткиИОбороты.Организация,
	|	ОстаткиИОбороты.Контрагент,
	|	ОстаткиИОбороты.Договор,
	|	ОстаткиИОбороты.СрокОплаты,
	|	ОстаткиИОбороты.ОстатокДолга,
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ КАК Просрочено
	|ИЗ
	|	(" + ТекстОстаткиИОбороты + ") КАК ОстаткиИОбороты
	|ГДЕ
	|	ОстаткиИОбороты.ОстатокДолга - 
	|		ВЫБОР
	|			КОГДА ОстаткиИОбороты.ОстатокДолга < ОстаткиИОбороты.УвеличениеДолга
	|				ТОГДА ОстаткиИОбороты.ОстатокДолга
	|			ИНАЧЕ ОстаткиИОбороты.УвеличениеДолга
	|		КОНЕЦ > 0";
	
	Запрос.Текст = ТекстВсеОбороты + ТекстПросрочено;
	
КонецПроцедуры

Функция ПолучитьОборотныеСредства(НачалоПериода, КонецПериода, Организация, СуммаНаНачало, СуммаНаКонец)
		
	ПС = ПланыСчетов["Хозрасчетный"];
	Счет01      = ПС.ОсновныеСредства;
	Счет02_01   = ПС.АмортизацияОС_01;
	Счет02_02   = ПС.АмортизацияОС_03;
	Счет03      = ПС.ДоходныеВложенияВ_МЦ;
	Счет04_01   = ПС.НематериальныеАктивыОрганизации;
	Счет04_02   = ПС.РасходыНаНИОКР;
	Счет05      = ПС.АмортизацияНематериальныхАктивов;
	Счет07      = ПС.ОборудованиеКУстановке;
	Счет08_01   = ПС.ПриобретениеЗемельныхУчастков;
	Счет08_02   = ПС.ПриобретениеОбъектовПриродопользования;
	Счет08_03   = ПС.СтроительствоОбъектовОсновныхСредств;
	Счет08_04   = ПС.ПриобретениеОбъектовОсновныхСредств;
	Счет08_05   = ПС.ПриобретениеНематериальныхАктивов;
	Счет08_06   = ПС.ПереводМолоднякаЖивотныхВОсновноеСтадо;
	Счет08_07   = ПС.ПриобретениеВзрослыхЖивотных;
	Счет08_08   = ПС.ВыполнениеНИОКР;
	Счет09      = ПС.ОтложенныеНалоговыеАктивы;
	Счет10      = ПС.Материалы;
	Счет11      = ПС.ЖивотныеНаВыращиванииИОткорме;
	Счет14_01   = ПС.РезервыПодСнижениеСтоимостиМатериалов;
	Счет14_02   = ПС.РезервыПодСнижениеСтоимостиТоваров;
	Счет14_03   = ПС.РезервыПодСнижениеСтоимостиГотовойПродукции;
	Счет14_04   = ПС.РезервыПодСнижениеСтоимостиНезавершенногоПроизводства;
	Счет15_01   = ПС.ЗаготовлениеИПриобретениеМатериалов;
	Счет15_02   = ПС.ПриобретениеТоваров;
	Счет16_01   = ПС.ОтклонениеВСтоимостиМатериалов;
	Счет16_02   = ПС.ОтклонениеВСтоимостиТоваров;
	Счет19      = ПС.НДСпоПриобретеннымЦенностям;
	Счет20      = ПС.ОсновноеПроизводство_;
	Счет21      = ПС.Полуфабрикаты;
	Счет23      = ПС.ВспомогательныеПроизводства;
	Счет28      = ПС.БракВПроизводстве;
	Счет29      = ПС.ОбслуживающиеПроизводства;
	Счет41      = ПС.Товары;
	Счет42      = ПС.ТорговаяНаценка;
	Счет43      = ПС.ГотоваяПродукция;
	Счет44      = ПС.РасходыНаПродажу;
	Счет45      = ПС.ТоварыОтгруженные;
	Счет46      = ПС.ВыполненныеЭтапыПоНезавершеннымРаботам;
	Счет50      = ПС.Касса;
	Счет50_03   = ПС.ДенежныеДокументы;
	Счет50_23   = ПС.ДенежныеДокументыВал;
	Счет51      = ПС.РасчетныеСчета;
	Счет52      = ПС.ВалютныеСчета;
	Счет55_01   = ПС.Аккредитивы;
	Счет55_02   = ПС.ЧековыеКнижки;
	Счет55_03   = ПС.ДепозитныеСчета;
	Счет55_04   = ПС.ПрочиеСпециальныеСчета;
	Счет55_21   = ПС.АккредитивыВал;
	Счет55_23   = ПС.ДепозитныеСчетаВал;
	Счет55_24   = ПС.ПрочиеСпециальныеСчетаВал;
	Счет57      = ПС.ПереводыВПути_;
	Счет57_02   = ПС.ПриобретениеИностраннойВалюты;
	Счет57_03   = ПС.ПродажиПоПлатежнымКартам;
	Счет57_22   = ПС.РеализацияИностраннойВалюты;
	
	Счет58_01_1 = ПС.Паи;
	Счет58_01_2 = ПС.Акции;
	Счет58_02   = ПС.ДолговыеЦенныеБумаги;
	Счет58_03   = ПС.ПредоставленныеЗаймы;
	Счет58_04   = ПС.ВкладыПоДоговоруПростогоТоварищества;
	Счет58_05   = ПС.ПриобретенныеПрава;
	Счет59      = ПС.РезервыПодОбесценениеФинансовыхВложений;
	Счет60_01   = ПС.РасчетыСПоставщиками;
	Счет60_02   = ПС.РасчетыПоАвансамВыданным;
	Счет60_03   = ПС.ВекселяВыданные;
	Счет60_21   = ПС.РасчетыСПоставщикамиВал;
	Счет60_22   = ПС.РасчетыПоАвансамВыданнымВал;
	Счет60_31   = ПС.РасчетыСПоставщикамиУЕ;
	Счет60_32   = ПС.РасчетыПоАвансамВыданнымУЕ;
	
	Счет62_01   = ПС.РасчетыСПокупателями;
	Счет62_02   = ПС.РасчетыПоАвансамПолученным;
	Счет62_03   = ПС.ВекселяПолученные;
	Счет62_21   = ПС.РасчетыСПокупателямиВал;
	Счет62_22   = ПС.РасчетыПоАвансамПолученнымВал;
	Счет62_31   = ПС.РасчетыСПокупателямиУЕ;
	Счет62_32   = ПС.РасчетыПоАвансамПолученнымУЕ;
	
	Счет63      = ПС.РезервыПоСомнительнымДолгам;
	Счет66      = ПС.РасчетыПоКраткосрочнымКредитамИЗаймам;
	Счет67      = ПС.РасчетыПоДолгосрочнымКредитамИЗаймам;
	
	Счет68_01   = ПС.НДФЛ;
	Счет68_02   = ПС.НДС;
	Счет68_03   = ПС.Акцизы;
	Счет68_04_1 = ПС.РасчетыСБюджетом;
	Счет68_04_2 = ПС.РасчетНалогаНаПрибыль;
	Счет68_07   = ПС.ТранспортныйНалог;
	Счет68_08   = ПС.НалогНаИмущество;
	Счет68_09   = ПС.НалогНаРекламу;
	Счет68_10   = ПС.ПрочиеНалогиИСборы;
	Счет68_11   = ПС.ЕНВД;
	Счет68_12   = ПС.ЕНприУСН;
	Счет68_22   = ПС.НДСпоЭкспортуКВозмещению;
	
	Счет69      = ПС.РасчетыПоСоциальномуСтрахованию;
	Счет70      = ПС.РасчетыСПерсоналомПоОплатеТруда;
	Счет71      = ПС.РасчетыСПодотчетнымиЛицами_;
	Счет73      = ПС.РасчетыСПерсоналомПоПрочимОперациям;
	Счет75_01   = ПС.РасчетыПоВкладамВУставныйКапитал;
	Счет75_02   = ПС.РасчетыПоВыплатеДоходов;
	
	Счет76      = ПС.РасчетыСРазнымиДебиторамиИКредиторами;
	Счет76_01   = ПС.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию;
	Счет76_02   = ПС.РасчетыПоПретензиям;
	Счет76_03   = ПС.РасчетыПоПричитающимсяДивидендам;
	Счет76_04   = ПС.РасчетыПоДепонированнымСуммам;
	Счет76_05   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками;
	Счет76_06   = ПС.РасчетыСПрочимиПокупателямиИЗаказчиками;
	Счет76_09   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
	Счет76_21   = ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал;
	Счет76_22   = ПС.РасчетыПоПретензиямВал;
	Счет76_25   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
	Счет76_26   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
	Счет76_29   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
	Счет76_32   = ПС.РасчетыПоПретензиямУЕ;
	Счет76_35   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
	Счет76_36   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
	Счет76_39   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
	Счет76_41   = ПС.РасчетыПоИсполнительнымДокументамРаботников;
	Счет76_АВ   = ПС.НДСпоАвансамИПредоплатам;
	Счет76_Н    = ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет;
	Счет76_ОТ   = ПС.НДСНачисленныйПоОтгрузке;
	
	
	Счет77      = ПС.ОтложенныеНалоговыеОбязательства;
	Счет79      = ПС.ВнутрихозяйственныеРасчеты;
	Счет80      = ПС.УставныйКапитал;
	Счет81      = ПС.СобственныеАкции;
	Счет82_01   = ПС.РезервыОбразованныеВСоответствииСЗаконодательством;
	Счет82_02   = ПС.РезервыОбразованныеВСоответствииСУчредительнымиДокументами;
	Счет83      = ПС.ДобавочныйКапитал;
	Счет84      = ПС.НераспределеннаяПрибыль;
	Счет86      = ПС.ЦелевоеФинансирование;
	Счет94      = ПС.НедостачиИПотериОтПорчиЦенностей;
	Счет96      = ПС.РезервыПредстоящихРасходов;
	Счет97      = ПС.РасходыБудущихПериодов;
	Счет98      = ПС.ДоходыБудущихПериодов;
	Счет99      = ПС.ПрибылиИУбытки;
	Счет001     = ПС.АрендованныеОсновныеСредства;
	Счет002     = ПС.ТМЦпринятыеНаОтветственноеХранение;
	Счет003     = ПС.МатериалыПринятыеВПереработку;
	Счет004     = ПС.ТоварыПринятыеНаКомиссию;
	Счет005     = ПС.ОборудованиеПринятоеДляМонтажа;
	Счет006     = ПС.БланкиСтрогойОтчетности;
	Счет007     = ПС.СписаннаяВУбытокЗадолженностьДебиторов;
	Счет008     = ПС.ОбеспеченияОбязательствПолученные;
	Счет009     = ПС.ОбеспеченияОбязательствВыданные;
	Счет010     = ПС.ИзносОсновныхСредств;
	Счет011     = ПС.ОсновныеСредстваСданныеВАренду;
	
	ВыборкаПоСчету = ПолучитьВыборкуПоСчету(0, НачалоПериода, КонецПериода, Организация); 
	
	// Денежные средства (порядок 1)
	П1Н = ПолучитьДенежныеСредства(НачалоДня(НачалоПериода), Организация);
	П1К = ПолучитьДенежныеСредства(Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая), Организация);
	
	// Краткосрочные финансовые вложения (порядок 2)
	П2Н_58_01_2 = ПолучитьИтог(Счет58_01_2, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2Н_58_02   = ПолучитьИтог(Счет58_02  , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2Н_58_03   = ПолучитьИтог(Счет58_03  , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2Н_58_04   = ПолучитьИтог(Счет58_04  , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2Н_58_05   = ПолучитьИтог(Счет58_05  , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П2Н_59      = ПолучитьИтог(Счет59     , ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
	
	П2К_58_01_2 = ПолучитьИтог(Счет58_01_2, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П2К_58_02   = ПолучитьИтог(Счет58_02  , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П2К_58_03   = ПолучитьИтог(Счет58_03  , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П2К_58_04   = ПолучитьИтог(Счет58_04  , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П2К_58_05   = ПолучитьИтог(Счет58_05  , ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П2К_59      = ПолучитьИтог(Счет59     , ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	
	П2Н = П2Н_58_01_2 + П2Н_58_02 - П2Н_59 + П2Н_58_03 + П2Н_58_04 + П2Н_58_05;
	П2К = П2К_58_01_2 + П2К_58_02 - П2К_59 + П2К_58_03 + П2К_58_04 + П2К_58_05;
	
	// Запасы (расчет составных частей)  
	//
	// Сырье и материалы (порядок 5)
	П5Н_10      = ПолучитьИтог(Счет10   , ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П5Н_14_01   = ПолучитьИтог(Счет14_01, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П5Н_15_01   = ПолучитьИтог(Счет15_01, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П5Н_16_01_Д = ПолучитьИтог(Счет16_01, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П5Н_16_01_К = ПолучитьИтог(Счет16_01, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
	
	П5Н = П5Н_10 - П5Н_14_01 + П5Н_15_01 + П5Н_16_01_Д - П5Н_16_01_К;
	
	П5К_10      = ПолучитьИтог(Счет10,    ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П5К_14_01   = ПолучитьИтог(Счет14_01, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П5К_15_01   = ПолучитьИтог(Счет15_01, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П5К_16_01_Д = ПолучитьИтог(Счет16_01, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П5К_16_01_К = ПолучитьИтог(Счет16_01, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	
	П5К = П5К_10 - П5К_14_01 + П5К_15_01 + П5К_16_01_Д - П5К_16_01_К;
	
	// Животные на выращивании и откорме (порядок 6)
	П6Н = ПолучитьИтог(Счет11, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П6К = ПолучитьИтог(Счет11, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	
	// НЗП (порядок 7)
	П7Н_20    = ПолучитьИтог(Счет20, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7Н_21    = ПолучитьИтог(Счет21, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7Н_23    = ПолучитьИтог(Счет23, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7Н_29    = ПолучитьИтог(Счет29, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7Н_44    = 0;//ПолучитьИтог(Счет44, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7Н_46    = ПолучитьИтог(Счет46, ВыборкаПоСчету, "СуммаНачальныйОстатокДт");
	П7Н_14_04 = ПолучитьИтог(Счет14_04, ВыборкаПоСчету, "СуммаНачальныйОстатокКт");
	
	П7К_20    = ПолучитьИтог(Счет20, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П7К_21    = ПолучитьИтог(Счет21, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П7К_23    = ПолучитьИтог(Счет23, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П7К_29    = ПолучитьИтог(Счет29, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П7К_44    = 0;//ПолучитьИтог(Счет44, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П7К_46    = ПолучитьИтог(Счет46, ВыборкаПоСчету, "СуммаКонечныйОстатокДт");
	П7К_14_04 = ПолучитьИтог(Счет14_04, ВыборкаПоСчету, "СуммаКонечныйОстатокКт");
	
	П7Н = П7Н_20 + П7Н_21 + П7Н_23 + П7Н_29 + П7Н_44 + П7Н_46 - П7Н_14_04;
	П7К = П7К_20 + П7К_21 + П7К_23 + П7К_29 + П7К_44 + П7К_46 - П7К_14_04;
	
	// Готовая продукция (порядок 8)
	П8Н = ПолучитьИтог(Счет43, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П8К = ПолучитьИтог(Счет43, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	
	// Товары (порядок 9)
	П9Н_14_03   = ПолучитьИтог(Счет14_03, ВыборкаПосчету, "СуммаНачальныйОстатокКт");
	П9Н_41      = ПолучитьИтог(Счет41   , ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П9Н_14_02   = ПолучитьИтог(Счет14_02, ВыборкаПосчету, "СуммаНачальныйОстатокКт");
	П9Н_15_02   = ПолучитьИтог(Счет15_02, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П9Н_16_02_Д = ПолучитьИтог(Счет16_02, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П9Н_16_02_К = ПолучитьИтог(Счет16_02, ВыборкаПосчету, "СуммаНачальныйОстатокКт");
	П9Н_42      = ПолучитьИтог(Счет42   , ВыборкаПосчету, "СуммаНачальныйОстатокКт");
	
	П9К_14_03   = ПолучитьИтог(Счет14_03, ВыборкаПосчету, "СуммаКонечныйОстатокКт");
	П9К_41      = ПолучитьИтог(Счет41   , ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	П9К_14_02   = ПолучитьИтог(Счет14_02, ВыборкаПосчету, "СуммаКонечныйОстатокКт");
	П9К_15_02   = ПолучитьИтог(Счет15_02, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	П9К_16_02_Д = ПолучитьИтог(Счет16_02, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	П9К_16_02_К = ПолучитьИтог(Счет16_02, ВыборкаПосчету, "СуммаКонечныйОстатокКт");
	П9К_42      = ПолучитьИтог(Счет42   , ВыборкаПосчету, "СуммаКонечныйОстатокКт");
	
	П9Н = - П9Н_14_03 + П9Н_41 - П9Н_14_02 + П9Н_15_02 + П9Н_16_02_Д - П9Н_16_02_К - П9Н_42;
	П9К = - П9К_14_03 + П9К_41 - П9К_14_02 + П9К_15_02 + П9К_16_02_Д - П9К_16_02_К - П9К_42;
	
	// Товары в пути (порядок 10)
	П10Н = ПолучитьИтог(Счет45, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П10К = ПолучитьИтог(Счет45, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	
	// Расходы будущих периодов (порядок 11)
	П11Н = ПолучитьИтог(Счет97, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П11К = ПолучитьИтог(Счет97, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	
	// Брак в производстве (порядок 12)
	П12Н = ПолучитьИтог(Счет28, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П12К = ПолучитьИтог(Счет28, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	
	
	// Запасы  (порядок 4)
	П4Н = П5Н + П6Н + П7Н + П8Н + П9Н + П10Н + П12Н;
	П4К = П5К + П6К + П7К + П8К + П9К + П10К + П12К;
	
	// Недостачи к взысканию (порядок 13)
	П13Н = ПолучитьИтог(Счет94, ВыборкаПосчету, "СуммаНачальныйОстатокДт");
	П13К = ПолучитьИтог(Счет94, ВыборкаПосчету, "СуммаКонечныйОстатокДт");
	
	ИтогоНаНачало = 0;
	ИтогоНаКонец  = 0;
	
	ИтогоНаНачало = ИтогоНаНачало + П1Н + П2Н + П5Н + П6Н + П7Н + П8Н + П9Н + П10Н + П12Н + П13Н;
	ИтогоНаКонец  = ИтогоНаКонец + П1К + П2К + П5К + П6К + П7К + П8К + П9К + П10К + П12К + П13К;
	
	СуммаНаНачало = ИтогоНаНачало;
	СуммаНаКонец  = ИтогоНаКонец;

КонецФункции

Функция ПолучитьИтог(Счет, Выборка, ВидИтога)
	
	Итог = 0;
	
	Выборка.Сбросить();
	Если Выборка.НайтиСледующий(Счет, "Счет") Тогда
		Итог = Выборка[ВидИтога];	
	КонецЕсли;
	
	Возврат Итог;
	
КонецФункции

Функция ПолучитьВыборкуПоСчету(ВидОстатков, НачалоПериода, КонецПериода, Организация, Счета = Неопределено, ВидыСубконто = Неопределено)
	
	Запрос = Новый Запрос;
	
	СтрокаПоля = "";
	СтрокаИтог = "";
	Если ВидОстатков = 0 Тогда
		СтрокаПоля = "ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт";	
		
		СтрокаИтог = "СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаНачальныйОстатокКт),
		|	СУММА(СуммаКонечныйОстатокДт),
		|	СУММА(СуммаКонечныйОстатокКт)";
	ИначеЕсли ВидОстатков = 1 Тогда 
		СтрокаПоля = "ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт";	
		
		СтрокаИтог = "СУММА(СуммаНачальныйРазвернутыйОстатокДт),
		|	СУММА(СуммаНачальныйРазвернутыйОстатокКт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокДт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокКт)";
	ИначеЕсли ВидОстатков = 2 Тогда
		СтрокаПоля = "ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокДт КАК СуммаНачальныйРазвернутыйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйРазвернутыйОстатокКт КАК СуммаНачальныйРазвернутыйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК СуммаНачальныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК СуммаНачальныйОстатокКт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
		|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт";	
		
		СтрокаИтог = "СУММА(СуммаНачальныйРазвернутыйОстатокДт),
		|	СУММА(СуммаНачальныйРазвернутыйОстатокКт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокДт),
		|	СУММА(СуммаКонечныйРазвернутыйОстатокКт),
		|	СУММА(СуммаНачальныйОстатокДт),
		|	СУММА(СуммаНачальныйОстатокКт),
		|	СУММА(СуммаКонечныйОстатокДт),
		|	СУММА(СуммаКонечныйОстатокКт)";
	КонецЕсли;
	СтрокаСубконто = "";
	СтрокаУсловие = "&НачалоПериода, &КонецПериода, , , Счет В ИЕРАРХИИ (&Счета), &ВидыСубконто, Организация = &Организация";
	Если Счета = Неопределено Тогда
		СтрокаУсловие = СтрЗаменить(СтрокаУсловие, "Счет В ИЕРАРХИИ (&Счета)", "");
	КонецЕсли;
	Если ВидыСубконто = Неопределено Тогда
		СтрокаУсловие = СтрЗаменить(СтрокаУсловие, "&ВидыСубконто", "");
	Иначе
		Для Индекс = 1 По ВидыСубконто.Количество() Цикл
			СтрокаСубконто = СтрокаСубконто + "ХозрасчетныйОстаткиИОбороты.Субконто" + Индекс + ", ";	
		КонецЦикла;
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,"
	+ СтрокаСубконто + "" 
	+ СтрокаПоля + 
	" ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(" + СтрокаУсловие + ") КАК ХозрасчетныйОстаткиИОбороты
	|ИТОГИ " 
	+ СтрокаИтог + 
	"
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация = &Организация", "");	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Если КонецПериода <> '00010101000000' Тогда
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Иначе
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Счета", Счета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПоСчету = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ВыборкаПоСчету;
	
КонецФункции

Процедура ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, Организация, СтрокаТаблицы, Номер) Экспорт
	
	Если Номер = 1 Тогда
		ЗаполнитьДенежныеСредства(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 2 Тогда
		ЗаполнитьПродажи(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 3 Тогда
		ЗаполнитьПоступлениеДенежныхСредств(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 4 Тогда
		ЗаполнитьПродажиЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 6 Тогда
		ЗаполнитьПоступлениеДенежныхСредствЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 7 Тогда
		ЗаполнитьЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 8 Тогда
		ЗаполнитьПросроченнуюЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация);	
	ИначеЕсли Номер = 9 Тогда
		ЗаполнитьОборотныеСредства(СтрокаТаблицы, ТекущаяДата, Организация);	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДенежныеСредства(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель = "Остаток денежных средств";
	СтрокаТаблицы.Сегодня    = ПолучитьДенежныеСредства(Новый Граница(КонецДня(ТекущаяДата)       , ВидГраницы.Включая), Организация);
	СтрокаТаблицы.Вчера      = ПолучитьДенежныеСредства(Новый Граница(КонецДня(ПредшествующаяДата), ВидГраницы.Включая), Организация);
	СтрокаТаблицы.Изменение  = (СтрокаТаблицы.Сегодня - СтрокаТаблицы.Вчера) / ?(СтрокаТаблицы.Вчера = 0, 1, СтрокаТаблицы.Вчера) * 100;
	
КонецПроцедуры

Процедура ЗаполнитьПродажи(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель = "Продажи";
	СтрокаТаблицы.Сегодня    = ПолучитьПродажи(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.Вчера      = ПолучитьПродажи(НачалоДня(ПредшествующаяДата), КонецДня(ПредшествующаяДата), Организация);
	СтрокаТаблицы.Изменение  = РассчитатьИзменение(СтрокаТаблицы.Вчера, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьПоступлениеДенежныхСредств(СтрокаТаблицы, ПредшествующаяДата, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель = "Поступление денежных средств";
	СтрокаТаблицы.Сегодня    = ПолучитьПоступлениеДенежныхСредств(НачалоДня(ТекущаяДата), КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.Вчера      = ПолучитьПоступлениеДенежныхСредств(НачалоДня(ПредшествующаяДата), КонецДня(ПредшествующаяДата), Организация);
	СтрокаТаблицы.Изменение  = РассчитатьИзменение(СтрокаТаблицы.Вчера, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьПродажиЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация)
	
	Перем НачалоПериода, КонецПериода;
	
	СтрокаТаблицы.Показатель        = "Продажи";
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 1);
	СтрокаТаблицы.ТекущийМесяц      = ПолучитьПродажи(НачалоПериода, КонецПериода, Организация);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 2);	
	СтрокаТаблицы.ПрошлыйМесяц      = ПолучитьПродажи(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаМесяц  = РассчитатьИзменение(СтрокаТаблицы.ПрошлыйМесяц, СтрокаТаблицы.ТекущийМесяц);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 3);
	СтрокаТаблицы.МесяцПрошлогоГода = ПолучитьПродажи(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаГод    = РассчитатьИзменение(СтрокаТаблицы.МесяцПрошлогоГода, СтрокаТаблицы.ТекущийМесяц);
	
КонецПроцедуры

Процедура ЗаполнитьПоступлениеДенежныхСредствЗаПериод(СтрокаТаблицы, ТекущаяДата, Организация)
	
	Перем НачалоПериода, КонецПериода;
	
	СтрокаТаблицы.Показатель        = "Поступление денежных средств";
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 1);
	СтрокаТаблицы.ТекущийМесяц      = ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 2);	
	СтрокаТаблицы.ПрошлыйМесяц      = ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаМесяц  = РассчитатьИзменение(СтрокаТаблицы.ПрошлыйМесяц, СтрокаТаблицы.ТекущийМесяц);
	УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, 3);
	СтрокаТаблицы.МесяцПрошлогоГода = ПолучитьПоступлениеДенежныхСредств(НачалоПериода, КонецПериода, Организация);
	СтрокаТаблицы.ИзменениеЗаГод    = РассчитатьИзменение(СтрокаТаблицы.МесяцПрошлогоГода, СтрокаТаблицы.ТекущийМесяц);
	
КонецПроцедуры

Процедура ЗаполнитьЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель   = "Задолженность покупателей";
	СтрокаТаблицы.Сегодня      = ПолучитьЗадолженностьПокупателей(КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.НачалоМесяца = ПолучитьЗадолженностьПокупателей(НачалоМесяца(ТекущаяДата), Организация);
	СтрокаТаблицы.Изменение    = РассчитатьИзменение(СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьПросроченнуюЗадолженностьПокупателей(СтрокаТаблицы, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель   = "  в т. ч. просроченная";
	СтрокаТаблицы.Сегодня      = ПолучитьПросроченнуюЗадолженностьПокупателей(КонецДня(ТекущаяДата), Организация);
	СтрокаТаблицы.НачалоМесяца = ПолучитьПросроченнуюЗадолженностьПокупателей(НачалоМесяца(ТекущаяДата), Организация);
	СтрокаТаблицы.Изменение    = РассчитатьИзменение(СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Процедура ЗаполнитьОборотныеСредства(СтрокаТаблицы, ТекущаяДата, Организация)
	
	СтрокаТаблицы.Показатель   = "Оборотные средства";
	СуммаНачалоМесяца = СтрокаТаблицы.НачалоМесяца;
	СуммаСегодня      = СтрокаТаблицы.Сегодня;
	ПолучитьОборотныеСредства(НачалоМесяца(ТекущаяДата), КонецДня(ТекущаяДата), Организация, СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	СтрокаТаблицы.НачалоМесяца = СтрокаТаблицы.НачалоМесяца + СуммаНачалоМесяца;
	СтрокаТаблицы.Сегодня      = СтрокаТаблицы.Сегодня + СуммаСегодня;
	СтрокаТаблицы.Изменение    = РассчитатьИзменение(СтрокаТаблицы.НачалоМесяца, СтрокаТаблицы.Сегодня);
	
КонецПроцедуры

Функция РассчитатьИзменение(ПрошлыйПериод, ТекущийПериод)
	
	Изменение = 0;
	
	Если ПрошлыйПериод = 0 ИЛИ ТекущийПериод = 0 Тогда
		Изменение = 0;
	Иначе
		Изменение = (ТекущийПериод - ПрошлыйПериод) / ?(ПрошлыйПериод = 0, 1, ПрошлыйПериод) * 100;
	КонецЕсли;
	
	Возврат Изменение;
	
КонецФункции

Процедура УстановитьПериод(НачалоПериода, КонецПериода, ТекущаяДата, ВидПериода)
	
	Сутки = 24 * 60 * 60;
	
	КоличествоДнейТекущее = (КонецДня(ТекущаяДата) - НачалоМесяца(ТекущаяДата) + 1) / Сутки;
	
	// Установить текущий период
	Если ВидПериода = 1 Тогда
		КоличествоДнейТекущийМесяц = (КонецМесяца(ТекущаяДата) - НачалоМесяца(ТекущаяДата) + 1) / Сутки;
		
		Если КоличествоДнейТекущее = КоличествоДнейТекущийМесяц Тогда
			НачалоПериода = НачалоМесяца(ТекущаяДата);
			КонецПериода  = КонецМесяца(ТекущаяДата);
		Иначе 
			НачалоПериода = НачалоМесяца(ТекущаяДата);
			КонецПериода  = КонецДня(ТекущаяДата);
		КонецЕсли;
		// Установить прошлый месяц	
	ИначеЕсли ВидПериода = 2 Тогда
		КоличествоДнейПрошлыйМесяц = (КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1)) - НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1)) + 1) / Сутки;
	
		Если КоличествоДнейТекущее >= КоличествоДнейПрошлыйМесяц Тогда
			НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
			КонецПериода  = КонецМесяца(ДобавитьМесяц(ТекущаяДата, -1));
		Иначе
			НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -1));
			КонецПериода  = КонецДня(ДобавитьМесяц(ТекущаяДата, -1));
		КонецЕсли;
		// Установить период прошлого года
	ИначеЕсли ВидПериода = 3 Тогда
		КоличествоДнейМесяцПрошлыйГод = (КонецМесяца(ДобавитьМесяц(ТекущаяДата, -12)) - НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -12)) + 1) / Сутки;

		Если КоличествоДнейТекущее >= КоличествоДнейМесяцПрошлыйГод Тогда
			НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -12));
			КонецПериода  = КонецМесяца(ДобавитьМесяц(ТекущаяДата, -12));
		Иначе
			НачалоПериода = НачалоМесяца(ДобавитьМесяц(ТекущаяДата, -12));
			КонецПериода  = КонецДня(ДобавитьМесяц(ТекущаяДата, -12));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры   

Функция ПолучитьОписаниеТаблицыПромежуточныеДанные() Экспорт
	
	ПромежуточныеДанные = Новый ТаблицаЗначений;
	ПромежуточныеДанные.Колонки.Добавить("Знак");
	ПромежуточныеДанные.Колонки.Добавить("Счет");
	ПромежуточныеДанные.Колонки.Добавить("КорСчет");
	ПромежуточныеДанные.Колонки.Добавить("Субконто1");
	ПромежуточныеДанные.Колонки.Добавить("Субконто2");
	ПромежуточныеДанные.Колонки.Добавить("КорСубконто1");
	ПромежуточныеДанные.Колонки.Добавить("СтрокаРасшифровки");
	ПромежуточныеДанные.Колонки.Добавить("Сумма");
	ПромежуточныеДанные.Колонки.Добавить("ВидРесурса");
	ПромежуточныеДанные.Колонки.Добавить("БухВидРесурса");
	ПромежуточныеДанные.Колонки.Добавить("Период");
	
	Возврат ПромежуточныеДанные;
	
КонецФункции

Функция ПолучитьОписаниеСтруктурыПараметра() Экспорт
	
	Возврат Новый Структура("Знак, Счет, КорСчет, Субконто1, Субконто2,  
							|КорСубконто1, Сумма, ВидРесурса, БухВидРесурса, Период");

КонецФункции

Процедура ДобавитьЗаписьВТаблицуПромежуточныеДанные(Таблица, Параметры) Экспорт
		
	НоваяСтрока = Таблица.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры);
	Счет           = НоваяСтрока.Счет;
	КорСчет        = НоваяСтрока.КорСчет;
	БухВидРесурса  = НоваяСтрока.БухВидРесурса;
	
	Если ЗначениеЗаполнено(КорСчет) Тогда
		Если БухВидРесурса = "Дт" Тогда
			СтрокаРасшифровки = "Оборот Дт " + Счет + " """ + Счет.Наименование + """ Кт " + КорСчет + " """ + КорСчет.Наименование + """";
		ИначеЕсли БухВидРесурса = "Кт" Тогда
			СтрокаРасшифровки = "Оборот Дт " + КорСчет + " """ + КорСчет.Наименование + """ Кт " + Счет + " """ + Счет.Наименование + """";
		КонецЕсли;	
	Иначе 
		СтрокаРасшифровки = "Остаток " + БухВидРесурса + " " + Счет + " """ + Счет.Наименование + """";
	КонецЕсли;
	
	НоваяСтрока.СтрокаРасшифровки = СтрокаРасшифровки;
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) 
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.ПроизвольныеНастройки)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И СохраненныеНастройки.Пользователи.Пользователь = &Пользователь
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	Запрос.УстановитьПараметр("Пользователь"       , глЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если НастройкаСсылка <> Неопределено Тогда
		Возврат НастройкаСсылка.ХранилищеНастроек.Получить();
	КонецЕсли;
	
КонецФункции

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Процедура СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1, СписокСчетов) Экспорт
	
	НастройкаСсылка = ПолучитьСохраненнуюНастройкуСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	
	Если Тип = 1 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПокупателей";
		Наименование        = "Счета исключаемые из расчета задолженности покупателей";
	ИначеЕсли Тип = 2 Тогда
		НастраиваемыйОбъект = "ОтчетыДляРуководителя.СчетаИсключаемыеИзРасчетаЗадолженностиПоставщикам";
		Наименование        = "Счета исключаемые из расчета задолженности поставщикам";
	КонецЕсли;
	
	Если НастройкаСсылка = Неопределено Тогда
		НастройкаОбъект = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		НовыйПользователь = НастройкаОбъект.Пользователи.Добавить();
		НовыйПользователь.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Иначе
		НастройкаОбъект = НастройкаСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	НастройкаОбъект.НастраиваемыйОбъект = НастраиваемыйОбъект;
	НастройкаОбъект.ТипНастройки        = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	НастройкаОбъект.Наименование        = Наименование;
	НастройкаОбъект.ХранилищеНастроек   = Новый ХранилищеЗначения(СписокСчетов);
	НастройкаОбъект.Записать();
	
КонецПроцедуры

// Тип - определяет для кого надо получить настройку: 1 - покупатель, 2 - поставщик
Функция РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип = 1) Экспорт
	
	СписокИзменен = Ложь;
	
	ФормаСпискаСчетов = ПолучитьОбщуюФорму("ФормаСпискаСчетов");
	СписокСчетовИсключаемыхИзРасчетаЗадолженности = ПолучитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип);
	ФормаСпискаСчетов.Список = СписокСчетовИсключаемыхИзРасчетаЗадолженности;
	ФормаСпискаСчетов.Тип    = Тип;
	Если ФормаСпискаСчетов.ОткрытьМодально() = КодВозвратаДиалога.ОК Тогда
		СписокСчетовИсключаемыхИзРасчетаЗадолженности = ФормаСпискаСчетов.Список.Скопировать();
		СохранитьСписокСчетовИсключаемыхИзРасчетаЗадолженности(Тип, СписокСчетовИсключаемыхИзРасчетаЗадолженности);
		СписокИзменен = Истина;
	КонецЕсли;
	
	Возврат СписокИзменен;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// процедура устанавливает отбор построителю отчетов по параметрам
Процедура ВосстановитьОтборПостроителяОтчетовПоПараметрам(ПостроительОтчета, Знач СтрокиОтбора) Экспорт
	
	Если СтрокиОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СтрокиОтбора) = Тип("Соответствие")
		ИЛИ ТипЗнч(СтрокиОтбора) = Тип("Структура") Тогда
		
		Для Каждого Строка Из СтрокиОтбора Цикл
			
			ЭлементОтбора = Неопределено;
			
			// Установим существующие элементы, добавим новые
			Для Инд = 0 По ПостроительОтчета.Отбор.Количество()-1 Цикл
				
				Если Строка.Ключ = ПостроительОтчета.Отбор[Инд].ПутьКДанным Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор[Инд];
				КонецЕсли;
			
			КонецЦикла;
			
			Попытка
			
				Если ЭлементОтбора = Неопределено Тогда
					ЭлементОтбора = ПостроительОтчета.Отбор.Добавить(Строка.Ключ);
				КонецЕсли;
				
				Если ТипЗнч(Строка.Значение) = Тип("СписокЗначений")
					ИЛИ ТипЗнч(Строка.Значение) = Тип("Массив") ТОгда
					
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
					ЭлементОтбора.Значение = Строка.Значение;	
					ЭлементОтбора.Использование = Истина;
					
				Иначе
					ЭлементОтбора.Установить(Строка.Значение);
					
					Если Метаданные.Справочники.Содержит(Строка.Значение.Метаданные())
					   И ЗначениеЗаполнено(Строка.Значение) Тогда
						ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
					Иначе
						ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
					КонецЕсли;
				   
				КонецЕсли;	
				
			Исключение
				// не смогли ограничение установить
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокиОтбора) = Тип("ТаблицаЗначений") Тогда
		
		// переносим имя отбора из пути к данным
		Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
			
			СтрокаОтбора.Имя = СтрокаОтбора.ПутьКДанным; 
			
		КонецЦикла;
		
		УправлениеОтчетами.ЗаполнитьОтборИзТаблицыЗначений(ПостроительОтчета.Отбор, СтрокиОтбора, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

 //Функция создает по структуре параметров соответсвие
Функция СоздатьПоСтруктуреСоответствие(Знач СтруктураПараметров) Экспорт
	
	Параметры = Новый Соответствие;
	
	Для Каждого Элемент Из СтруктураПараметров Цикл
		
		Параметры.Вставить(Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

// Создание копии структуры или соответствия
//
// Параметры:
//   СоотвИсх - Структура/Соответствие - Исходная структура, с которой будет создаваться копия.
//
// Возвращаемое значение:
//   Структура/Соответствие - Копия исходной структуры. Тип данных повторяет тип исходной структуры.
Функция СоздатьКопиюСоответствияСтруктуры(Знач СоответствиеИсточник) Экспорт
	
	Если СоответствиеИсточник = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	КопияСоответствия = Новый (ТипЗнч(СоответствиеИсточник));
		
	Для Каждого ЭлементОтбора Из СоответствиеИсточник Цикл
				
		КопияСоответствия.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
				
	КонецЦикла;
	
	Возврат КопияСоответствия;
	
КонецФункции

//Функция формирует строку ограничений для запроса по ограничениям построителя отчетов
Функция ПолучитьТекстОграниченийПоПостроителюОтчета(ПостроительОтчета, Запрос, ТекстОтбораПоВидамСубконто = неопределено) Экспорт
	
	ТекстФильтры = "";
	
	Индекс = 0;
	Для Каждого СтрокаОтбора Из ПостроительОтчета.Отбор Цикл
		
		Индекс = Индекс + 1;
		Если Не СтрокаОтбора.Использование 
			ИЛИ ПустаяСтрока(СтрокаОтбора.ПутьКДанным) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, СтрокаОтбора, Строка(Индекс));
						
		ТекстСтрокиПоля = "";
		Если СтрокаОтбора.ВидСравнения = ВидСравнения.ВИерархии
			И СтрокаОтбора.Значение <> Неопределено Тогда
			
			МетаданныеОграничения = СтрокаОтбора.Значение.Метаданные();	
			
			ТипВыражения = "";
			
			Если Метаданные.Справочники.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Справочник."; 
				
			ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Документ."; 
				
			ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "ПланВидовХарактеристик.";	
				
			ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеОграничения) Тогда
				
				ТипВыражения = "Перечисление.";	
				
			КонецЕсли;
			
			Если ТипВыражения <> "" Тогда
				
				ТекстСтрокиПоля = "Выразить(" + СтрокаОтбора.ПутьКДанным + " КАК " + ТипВыражения + МетаданныеОграничения.Имя + ")"
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстСтрокиПоля = "" Тогда
			
			ТекстСтрокиПоля = СтрокаОтбора.ПутьКДанным;
			
		КонецЕсли;
			
		ТекстФильтры = ТекстФильтры + " И " + УправлениеОтчетами.ПолучитьСтрокуОтбора(СтрокаОтбора.ВидСравнения, "&Значение" + Индекс, 
			ТекстСтрокиПоля, "&ЗначениеС" + Индекс, "&ЗначениеПо" + Индекс, СтрокаОтбора.Значение, 
			СтрокаОтбора.ЗначениеС, СтрокаОтбора.ЗначениеПо);
				
	КонецЦикла;
	
	Если ТекстОтбораПоВидамСубконто<> неопределено Тогда
		ТекстОтбораПоВидамСубконто = УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, ПостроительОтчета.Параметры.Счет, Запрос);
    КонецЕсли;
	
	Возврат Сред(ТекстФильтры, 3);
	
КонецФункции

//Процедура устанавливает параметры ограничения запросу из строки ограничений построителя отчета
Процедура УстановитьПараметрыЗапросаПоСтрокеПостроителяОтчета(Запрос, Знач СтрокаОтбора, Знач ПостфиксОграничения) Экспорт
	
	СтрокаПостфикса = Строка(ПостфиксОграничения);
	
	Если СтрокаОтбора.ВидСравнения = ВидСравнения.Содержит
		ИЛИ СтрокаОтбора.ВидСравнения = ВидСравнения.НеСодержит Тогда
		
		// ограничение на содержит отрабатывается отдельным образом
		// надо из значения ограничения лишние символы преобразовать и дополнить ограничение символами %%
		
		ИтоговаяСтрокаОграничения = ОбщегоНазначения.СформироватьСтрокуДляПоискаВЗапросе(СтрокаОтбора.Значение);
		
		ИтоговаяСтрокаОграничения = "%" + ИтоговаяСтрокаОграничения + "%";
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, ИтоговаяСтрокаОграничения);
		
	Иначе	
		
		Запрос.УстановитьПараметр("Значение" + СтрокаПостфикса, СтрокаОтбора.Значение);
		Запрос.УстановитьПараметр("ЗначениеС" + СтрокаПостфикса, СтрокаОтбора.ЗначениеС);
		Запрос.УстановитьПараметр("ЗначениеПо" + СтрокаПостфикса, СтрокаОтбора.ЗначениеПо);	
	
	КонецЕсли;
	
КонецПроцедуры

//Функция устанавливает фильтр на виды субконто в параметрах к виртуальной таблице, если это возможно.
//Т.е. установит новый параметр ВидыСубконто и вернет текст для подстановки в текст запроса
Функция УстановитьОтборНаВидыСубконтоПоПостроителюОтчета(ПостроительОтчета, Счет, Запрос) Экспорт
	
	КолСубконтоНаСчету = Счет.ВидыСубконто.Количество();
	Номер = 1;
	ПропущеноИзмерение = ложь;
	ПропущенОтбор = ложь;
	НеБылоОтбора = ложь;
	ОтборЕсть = Ложь;
	ИспользоватьОтборПоВидамСубконто = Истина;
	Измерения = Новый Соответствие;
	Для каждого Измерение из ПостроительОтчета.ИзмеренияСтроки Цикл
		Если Не Измерение.ПутьКДанным = "Подразделение" Тогда
			Если Найти(Измерение.ПутьКДанным,".")<>0 Тогда
				Измерения.Вставить(Сред(Измерение.ПутьКДанным,0, Найти(Измерение.ПутьКДанным,".")-1),истина);
			Иначе
				Измерения.Вставить(Измерение.ПутьКДанным,истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для каждого Отбор из ПостроительОтчета.Отбор Цикл
		Если Отбор.Использование и Отбор.Имя<>"" Тогда
			ОтборЕсть = истина;
		КонецЕсли;
	КонецЦикла;
	
	Пока Номер <= КолСубконтоНаСчету Цикл
		ИмяСубконто = "Субконто"+Номер;
		ЕстьИзмерение = Измерения.Получить(ИмяСубконто)<>неопределено;
		Если ПостроительОтчета.Отбор.Найти(ИмяСубконто)<> неопределено Тогда
			ОтборВключен = ПостроительОтчета.Отбор.Найти(ИмяСубконто).Использование;
		Иначе
			ОтборВключен = ложь;
		КонецЕсли;	
		
		ПропущенОтбор = (Номер<>1) И ((ОтборВключен и НеБылоОтбора));
		
		Если (ПропущеноИзмерение и ЕстьИзмерение)
			ИЛИ (ОтборВключен И не ЕстьИзмерение) 
			ИЛИ ((ПропущенОтбор и ОтборВключен) и не ПропущеноИзмерение)Тогда
			ИспользоватьОтборПоВидамСубконто = ложь;
			Прервать;
		КонецЕсли;
		
		ПропущеноИзмерение = (Не ЕстьИзмерение) и (не ПропущеноИзмерение);
		НеБылоОтбора = ((Не ОтборВключен) или НеБылоОтбора);
		Номер = номер + 1;
		
	КонецЦикла;
	
	ТекстОтбораПоВидамСубконто="";
	Если ИспользоватьОтборПоВидамСубконто И ОтборЕсть Тогда
		Номер = 1;
		ВидыСубконто = новый массив;
		Пока Номер <= КолСубконтоНаСчету Цикл
			ИмяСубконто = "Субконто"+Номер;
			Если Измерения.Получить(ИмяСубконто)=неопределено Тогда
				прервать;
			КонецЕсли;
			ВидыСубконто.Добавить(Счет.ВидыСубконто[номер-1].ВидСубконто);
			Номер = номер + 1;
		КонецЦикла;
		Запрос.УстановитьПараметр("ВидыСубконто",ВидыСубконто);
		ТекстОтбораПоВидамСубконто = "&ВидыСубконто";
	КонецЕсли;	
	
	Возврат ТекстОтбораПоВидамСубконто;
	
КонецФункции

// функция приводит значение из выборки к числу
Функция ПривестиКЧислу(Значение) Экспорт
	
	Если Значение = NULL Тогда
		Возврат 0;
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

// Формирует строку ограничений по датам отчета для показа в заголовке формы
//
// Параметры:
//	ДатаНач
//  ДатаКон
Функция СформироватьСтрокуОграниченийПоДатамДляФормы(Знач ДатаНач, Знач ДатаКон) Экспорт

	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда

		ОписаниеПериода     = "Период не установлен";

	Иначе

		Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда

			ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
							+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");

		Иначе

			Если ДатаНач <= ДатаКон Тогда
				ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
			Иначе
				ОписаниеПериода = "Неправильно задан период!"
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат ОписаниеПериода;

КонецФункции

//процедура формирует заголовок отчета
Процедура СформироватьИВывестиЗаголовокОтчета(ОтчетОбъект, ДокументРезультат, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт
	
	ОбластьЗаголовка = ОтчетОбъект.СформироватьЗаголовок();
	ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
	ДокументРезультат.Вывести(ОбластьЗаголовка, 1);
	
	Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

//Функция возвращает корректные или нет ограничения по датам для отчета
// в случае если ограничения не корректны - выдается предупреждение
Функция ПроверитьКорректностьОграниченийПоДатам(Знач ДатаНач, Знач ДатаКон, Знач ВыдаватьПредупреждение = Истина) Экспорт
	
	// Проверка на пустые значения
	Если ДатаНач > ДатаКон И ДатаКон <> '00010101000000' Тогда

		Если ВыдаватьПредупреждение Тогда 
			Предупреждение("Дата начала периода не может быть больше даты конца периода");
		КонецЕсли;
	
		Возврат Ложь;

	КонецЕсли;
	
	Возврат Истина;

КонецФункции

//Процедура формирует строку ограничений для выборки из таблицы оборотов и остатков регистров бухгалтерии
Процедура ДополнитьСтрокуОграниченийПоРеквизитам(СтрокаОграничения, Знач ИмяОграниченияПоРеквизиту, Знач ОграничениеПоРеквизиту) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОграничениеПоРеквизиту) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНовогоОграничения = ИмяОграниченияПоРеквизиту + " = &" + ИмяОграниченияПоРеквизиту + " ";
	
	СтрокаОграничения = ОбъединитьОграничения(СтрокаОграничения, СтрокаНовогоОграничения);
    
КонецПроцедуры

//Функция Объединяет ограничения
Функция ОбъединитьОграничения(Знач Ограничение1, Знач Ограничение2, Знач СтрокаОбъединенияОграничений = "И") Экспорт
	
	Если ПустаяСтрока(Ограничение1) Тогда
		Возврат Ограничение2;
	КонецЕсли;
	
	Если ПустаяСтрока(Ограничение2) Тогда
		Возврат Ограничение1;
	КонецЕсли;
	
	СтрокаОграничения = Ограничение1 + " " + СтрокаОбъединенияОграничений + " " + Ограничение2;
	
	Возврат СтрокаОграничения;
	
КонецФункции

// процедура обрабатывает вывод заголовка
Процедура ОбработатьВыводЗаголовка(Форма, ОтчетОбъект, ВысотаЗаголовка, ПоказыватьЗаголовок) Экспорт

	// Перезаполнять заголовок можно только у "чистого" отчета
	Если Форма.ЭлементыФормы.ДокументРезультат.ВысотаТаблицы = 0 Тогда

		ОбластьЗаголовка = ОтчетОбъект.СформироватьЗаголовок();
		ВысотаЗаголовка = ОбластьЗаголовка.ВысотаТаблицы;
		Форма.ЭлементыФормы.ДокументРезультат.Вывести(ОбластьЗаголовка);
		
	КонецЕсли;

    Если ЗначениеЗаполнено(ВысотаЗаголовка) Тогда
		Форма.ЭлементыФормы.ДокументРезультат.Область("R1:R" + ВысотаЗаголовка).Видимость = ПоказыватьЗаголовок;
	КонецЕсли;

	УправлениеПометкамиКнопокЗаголовковКоманднойПанели(Форма, ПоказыватьЗаголовок);
	
КонецПроцедуры

// Управляет пометками кнопок ком. панели
//
// Параметры:
//	ФормаОтчета
//  ПоказыватьЗаголовок - булево. Отображать пометку или нет
Процедура УправлениеПометкамиКнопокЗаголовковКоманднойПанели(ФормаОтчета, Знач ПоказыватьЗаголовок) Экспорт
	
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
	ФормаОтчета.ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю.Кнопки.Заголовок.Пометка = ПоказыватьЗаголовок;
    	
КонецПроцедуры

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОтборОбработатьВыборЗначения(Элемент, СтандартнаяОбработка, Знач Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено)
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Организация = Неопределено;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		Если Организация <> Неопределено Тогда
			ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = Организация;
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения 
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда

		СтандартнаяОбработка    = Ложь;
		ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.мТипыДокументов = ОграничениеТипаЭлемента; 
		ФормаВыбора.Организация = Организация;

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			ФормаВыбора.Счет         = ?(СписокПараметров.Свойство("СчетУчета")		, СписокПараметров.СчетУчета	, Неопределено);
			ФормаВыбора.Номенклатура = ?(СписокПараметров.Свойство("Номенклатура")	, СписокПараметров.Номенклатура	, Неопределено);
			ФормаВыбора.Склад        = ?(СписокПараметров.Свойство("Склад")			, СписокПараметров.Склад		, Неопределено);
			
			Если СписокПараметров.Свойство("ЭтоНовыйДокумент")Тогда 
				Если СписокПараметров.ЭтоНовыйДокумент Тогда
					ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
				Иначе
					ФормаВыбора.КонПериода         = СписокПараметров.Дата;
				КонецЕсли;
			Иначе
				ФормаВыбора.КонПериода = Неопределено; 
			КонецЕсли;
			

			Если СписокПараметров.Свойство("ВидСубконто") Тогда
				ФормаВыбора.ВидСубконто  = СписокПараметров.ВидСубконто;
			ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения Тогда
				ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		Если ОграничениеТипаЭлемента = Неопределено Тогда
			ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения;
		КонецЕсли;   
		  
		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, СчетДляОпределенияОстатков, СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Контрагент") Тогда
				СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
			КонецЕсли;

			Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
			КонецЕсли;

			Если СписокПараметров.Свойство("Дата") Тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") Тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") Тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;
			
			Если СписокПараметров.Свойство("ЭтоНовыйДокумент") Тогда
				СтруктураПараметров.Вставить("ЭтоНовыйДокумент", СписокПараметров.ЭтоНовыйДокумент);
			КонецЕсли;

		КонецЕсли;

		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;

	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПартияМатериаловВЭксплуатации") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Документы.ПартияМатериаловВЭксплуатации.ПолучитьФормуВыбора(,Элемент,);
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			ФормаВыбора.Номенклатура = СписокПараметров.Номенклатура;
		КонецЕсли;
		
	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОтборОбработатьВыборЗначения()


