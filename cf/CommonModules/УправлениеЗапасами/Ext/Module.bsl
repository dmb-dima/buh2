// Формирует запрос на дополнительные параметры, нужные при проведении документа.
//
// Параметры: 
//  ДокументОбъект                 - объект проводимого документа, 
//  ДеревоПолейЗапросаПоШапке      - дерево значений, содержащего имена полей, 
//                                   которые нужно заполнить в запросе по шапке документа.
//  СтруктураШапкиДокумента        - структура, содержащая значения реквизитов, относящихся к шапке документа,
//                                   необходимых для его проведения.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Дополненная по результату запроса структура СтруктураШапкиДокумента.
//
Функция СформироватьЗапросПоДеревуПолей(ДокументОбъект, ДеревоПолейЗапросаПоШапке, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета)  Экспорт

	Если ДеревоПолейЗапросаПоШапке.Строки.Количество()=0 тогда
		Возврат СтруктураШапкиДокумента;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ";

	СтрокиЗапроса           = "";
	ТаблицыЗапроса          = "";
	НуженКурсВалютыУпрУчета = Ложь;
	ЕстьУчетнаяПолитика     = Ложь;

	// Реквизиты договора взаиморасчетов.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентов", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагента." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты договора взаиморасчетов регл.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДоговорыКонтрагентовРегл", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДоговорКонтрагентаРегл." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты сделки.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Сделка", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Сделка." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты документа-основания.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("ДокументОснование", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.ДокументОснование." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;
	
	// Реквизиты склада.
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Склад", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Склад." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты склада-отправителя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОтправитель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОтправитель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты склада-получателя
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладПолучатель", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладПолучатель." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты склада-ордера
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СкладОрдер", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СкладОрдер." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты номенклатуры
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Номенклатура", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Номенклатура." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Реквизиты состояния ОС
	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Состояние", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.Состояние." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("СостояниеВводаВЭксплуатацию", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Док.СостояниеВводаВЭксплуатацию." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	// Константы.

	СтрокаОбъекта = ДеревоПолейЗапросаПоШапке.Строки.Найти("Константы", "Объект");
	Если СтрокаОбъекта <> Неопределено Тогда
		ТаблицыЗапроса = ТаблицыЗапроса + ", Константы";

		// В цикле по вложенным строкам формируем строки запроса.
		Для каждого СтрокаПоля Из СтрокаОбъекта.Строки Цикл

			СтрокиЗапроса = СтрокиЗапроса + "," + Символы.ПС +
			Символы.Таб + "Константы." + СокрЛП(СтрокаПоля.Поле) +
			?(НЕ ЗначениеЗаполнено(СтрокаПоля.Псевдоним), "", " КАК " + СокрЛП(СтрокаПоля.Псевдоним));

		КонецЦикла;

	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ " + Сред(СтрокиЗапроса, 2) + "
	                | ИЗ 
	                |      Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док "+ ТаблицыЗапроса +"
	                |     ГДЕ Док.Ссылка = &ДокументСсылка";

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", ДокументОбъект.Дата);

	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();

	Для каждого Колонка из ТаблицаЗапроса.Колонки Цикл
		СтруктураШапкиДокумента.Вставить(Колонка.Имя, ТаблицаЗапроса[0][Колонка.Имя]);
	КонецЦикла;

	Возврат СтруктураШапкиДокумента;

КонецФункции // СформироватьЗапросПоДеревуПолей()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетУслуг(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  СтрокаТаблицы.Услуга Тогда

				ОбщегоНазначения.ОшибкаПриПроведении("В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
				                    """ табличной части """ + ПредставлениеТабличнойЧасти + """: "
				                    + "содержится услуга. Услуг здесь быть не должно!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетУслуг()

// Проверяет, что в табличной части нет услуг.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части и признак услуги
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЧтоНетТоваров(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
                                                    Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	// Цикл по строкам таблицы значений.
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
		                               """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура)
		   И  Не СтрокаТаблицы.Услуга Тогда

				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + "содержится номенклатура, не являющаяся услугой. " +
				                   "Здесь могут быть только услуги!", Отказ, Заголовок);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьЧтоНетУслуг)

// Определяется ведется или нет партионный учет
//
// Параметры
//  УчетнаяПолитика - параметры учетной политики.
//
// Возвращаемое значение:
//   Булево - истина - партионный учет ведется,
//			  ложь   - партионный учет не ведется.
//
Функция ВедетсяПартионныйУчет(УчетнаяПолитика, Учет = "БУ") Экспорт

	Ведется = Ложь;
	
	Если УчетнаяПолитика.Количество() <> 0 Тогда
		
        СпособОценкиМПЗ = ?(Учет = "БУ", УчетнаяПолитика.СпособОценкиМПЗ, УчетнаяПолитика.СпособОценкиМПЗНУ);
		
		Если СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО Тогда
			Ведется = Истина;

		ИначеЕсли СпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО Тогда
			Ведется = Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат Ведется;

КонецФункции // ВедетсяПартионныйУчет()

// Проверяет необходимость формирования проводки по счету ГТД.
//
// Параметры:
//  СчетУчета - счет бухгалтерского учета, на котором ведется учет товара,
//  НомерГТД  - номер ГТД, указанный в табличной части документа.
//  СтранаПроисхождения - страна происхождения, указанная в табличной части документа.
//
// Возвращаемое значение:
//  Булево - Истина - требуется проводка по счету ГТД,
//			 Ложь	- проводка не требуется.
//
Функция ЭтоИмпортныйТовар(СчетУчета, НомерГТД, СтранаПроисхождения) Экспорт

	Если НЕ ЗначениеЗаполнено(СтранаПроисхождения) или
		 СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ или
		 НЕ ЗначениеЗаполнено(НомерГТД) Тогда
		 
		Результат = Ложь;
	
	ИначеЕсли СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах) или
		 СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах или
		 
		 СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле) или
		 СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговле или
		 
		 СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию) или
		 СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию или
		 
		 СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) или
		 СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ или
		 
		 СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ПокупныеИзделия) или
		 СчетУчета = ПланыСчетов.Хозрасчетный.ПокупныеИзделия Тогда

		Результат = Истина;

	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ЭтоИмпортныйТоварНаСчете41()

// Проверяет заполнение реквизита "Номер ГТД".
//
// Параметры:
//  НомерГТД  - номер ГТД, указанный в табличной части документа,
//  СтранаПроисхождения - страна происхождения, указанная в табличной части документа.
//
// Возвращаемое значение:
//  Булево - Истина - номер ГТД указан,
//			 Ложь	- номер ГТД не указан.
//
Функция НеУказанНомерГТД(НомерГТД, СтранаПроисхождения) Экспорт

	Если НЕ ЗначениеЗаполнено(СтранаПроисхождения) или
		 СтранаПроисхождения = Справочники.КлассификаторСтранМира.РОССИЯ Тогда
		 
		Результат = Ложь;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(НомерГТД) Тогда
		Результат = Истина;
		
	Иначе
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // НеУказанНомерГТД()

// Проведение документа списания товаров по счету ГТД
//
// Параметры:
//  Документ - документ, которому будут принадлежать проводки,
//  ТаблицаПоТоварам - табличная часть документа.
//
Процедура ПроведениеДокументаСписанияПоСчетуГТД(Документ, ТаблицаПоТоварам, СодержаниеПроводки = "Списаны МПЗ") Экспорт
	
	ТоварыПоНомерамГТД = Новый ТаблицаЗначений;
	ТоварыПоНомерамГТД.Колонки.Добавить("Номенклатура");
	ТоварыПоНомерамГТД.Колонки.Добавить("НомерГТД");
	ТоварыПоНомерамГТД.Колонки.Добавить("СтранаПроисхождения");
	ТоварыПоНомерамГТД.Колонки.Добавить("Количество");
	
	ДатаДок = Документ.Дата;
	Организация = Документ.Организация;
	Проводки = Документ.Движения.Хозрасчетный;
	
	// Формирование параметров отбора для запроса.
	СписокНоменклатуры = Новый Массив;
	СписокНомеровГТД = Новый Массив;
	СписокСтранПроисхождения = Новый Массив;
	
	Для каждого СтрокаТЧ из ТаблицаПоТоварам Цикл
		
		Если ЭтоИмпортныйТовар(СтрокаТЧ.СчетУчета, СтрокаТЧ.НомерГТД, СтрокаТЧ.СтранаПроисхождения) Тогда
			
			СписокНоменклатуры.Добавить(СтрокаТЧ.Номенклатура);
			СписокНомеровГТД.Добавить(СтрокаТЧ.НомерГТД);
			СписокСтранПроисхождения.Добавить(СтрокаТЧ.СтранаПроисхождения);
			
			ТоварПоНомеруГТД = ТоварыПоНомерамГТД.Добавить();
			ТоварПоНомеруГТД.Номенклатура = СтрокаТЧ.Номенклатура;
			ТоварПоНомеруГТД.НомерГТД = СтрокаТЧ.НомерГТД;
			ТоварПоНомеруГТД.СтранаПроисхождения = СтрокаТЧ.СтранаПроисхождения;
			ТоварПоНомеруГТД.Количество = СтрокаТЧ.Количество;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокНоменклатуры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстатки.Субконто2 КАК НомерГТД,
	|	ХозрасчетныйОстатки.Субконто3 КАК СтранаПроисхождения,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&Период,
	|		Счет = &СчетУчетаНомеровГТД,
	|		&Видысубконто,
	|			Субконто1 В (&СписокНоменклатуры)
	|			И Субконто2 В (&СписокНомеровГТД)
	|			И Субконто3 В (&СписокСтранПроисхождения)
	|			И Организация = &Организация) КАК ХозрасчетныйОстатки");

	Запрос.УстановитьПараметр("Период", Документ.МоментВремени());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетУчетаНомеровГТД", ПланыСчетов.Хозрасчетный.ГТД);
	Запрос.УстановитьПараметр("СписокНоменклатуры", СписокНоменклатуры);
	Запрос.УстановитьПараметр("СписокНомеровГТД", СписокНомеровГТД);
    ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(СписокСтранПроисхождения);
	Запрос.УстановитьПараметр("СписокСтранПроисхождения", СписокСтранПроисхождения);
	ВидыСубконто = ПланыСчетов.Хозрасчетный.ГТД.ВидыСубконто.ВыгрузитьКолонку("ВидСубконто");
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	Остатки = Запрос.Выполнить();
	ВыборкаОстатков = Остатки.Выбрать();
	
	ТоварыПоНомерамГТД.Свернуть("Номенклатура,НомерГТД,СтранаПроисхождения", "Количество");
	СтруктураПоиска = Новый Структура("Номенклатура,НомерГТД,СтранаПроисхождения");
	
	Для каждого ТоварПоНомеруГТД из ТоварыПоНомерамГТД Цикл
		
		СтруктураПоиска.Номенклатура = ТоварПоНомеруГТД.Номенклатура;
		СтруктураПоиска.НомерГТД = ТоварПоНомеруГТД.НомерГТД;
		СтруктураПоиска.СтранаПроисхождения = ТоварПоНомеруГТД.СтранаПроисхождения;
		
		УчетноеКоличество = 0;
		ВыборкаОстатков.Сбросить();
		Пока ВыборкаОстатков.НайтиСледующий(СтруктураПоиска) Цикл
			УчетноеКоличество = УчетноеКоличество + ВыборкаОстатков.Количество;
		КонецЦикла;
		
		КоличествоВПроводке = Мин(УчетноеКоличество, ТоварПоНомеруГТД.Количество);
		
		Если КоличествоВПроводке < ТоварПоНомеруГТД.Количество Тогда
			СтрокаНачалаСообщенияОбОшибке = "Для номенклатуры """+ СокрЛП(ТоварПоНомеруГТД.Номенклатура) + """ в табличной части ""Товары"" ";
			СтрокаСообщения = "по счету ГТД определен остаток "+УчетноеКоличество+" ед. "+ТоварПоНомеруГТД.Номенклатура+" из необходимых "+ТоварПоНомеруГТД.Количество+" ед.";
			ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения,,);
		КонецЕсли;
		
		Если КоличествоВПроводке > 0 Тогда
			Проводка = Проводки.Добавить();

			Проводка.Период = ДатаДок;
			Проводка.Организация = Организация;
			Проводка.Содержание = СодержаниеПроводки;

			Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ГТД;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура", ТоварПоНомеруГТД.Номенклатура);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "НомераГТД", ТоварПоНомеруГТД.НомерГТД);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "СтраныПроисхождения", ТоварПоНомеруГТД.СтранаПроисхождения);
		
			Проводка.КоличествоКт = КоличествоВПроводке;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОстаткиПоНомерамГТД()

// Открывает форму выбора номера ГТД для подбора его в табличную часть
//
// Параметры:
//  Владелец - табличное поле или форма, в зависимости от того откуда подбирается номер ГТД,
//  СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора,
//  Ключ - ключ уникальности открываемой формы,
//  Организация - ссылка на организацию, если передана пустая ссылка список выбора будет пуст,
//  Номенклатура - ссылка на номенклатуру,
//  Дата - дата расчета бухгалтерских итогов.
// 
Процедура ОткрытьФормуВыбораНомераГТД(Владелец, СтандартнаяОбработка, Ключ, Организация, Номенклатура, Дата) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаВыбораНомераГТД", Владелец, Ключ);

	Форма.Организация = Организация;
	Форма.Номенклатура = Номенклатура;
	Форма.КонПериода = Дата;

	Если ТипЗнч(Владелец) = Тип("ТабличноеПоле") Тогда
		Форма.ПараметрНомерГТД = Владелец.ТекущиеДанные.НомерГТД;
		Форма.ПараметрСтранаПроисхождения = Владелец.ТекущиеДанные.СтранаПроисхождения;

	ИначеЕсли ТипЗнч(Владелец) = Тип("Форма") Тогда
		Форма.ПараметрНомерГТД = Владелец.НомерГТД;
		Форма.ПараметрСтранаПроисхождения = Владелец.СтранаПроисхождения;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	Форма.Открыть();

КонецПроцедуры  // ОткрытьФормуВыбораНомераГТД()
