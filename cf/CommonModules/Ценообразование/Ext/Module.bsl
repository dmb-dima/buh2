
// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки округления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));

	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал = Число / Порядок;

	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);

	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда

			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОкруглитьЦену()

// Пересчитывает цену в другую валюту
//
//  Цена            - число, значение цены, которое надо пересчитать,
//  ВалютаЦены      - ссылка на справочник "Валюты", определяет валюту, в которой назначена Цена
//  НоваяВалюта     - ссылка на справочник "Валюты", определяет валюту, в которой надо получить
//                    новое значение цены. Если не заполнено, то устанавливается равной ВалютаЦены без пересчета,
//  КурсНовойВалюты - курс новой валюты, по которому надо пересчитать цену, если не задан, то берем курс по справочнику
//  КратностьНовойВалюты - кратность новой валюты, по которой надо пересчитать цену, если не задана, то берем курс по справочнику
//  Дата            - дата, на которую надо пересчитать цену.
//
// Возвращаемое значение:
//  Новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, НоваяВалюта, КурсНовойВалюты = 0, КратностьНовойВалюты = 1, Дата = Неопределено ) Экспорт

	НовоеЗначениеЦены = Цена;

	Если НЕ ЗначениеЗаполнено(НоваяВалюта) Тогда // параметр валюты не задан, значить надо возвращать в валюте цены
		НоваяВалюта = ВалютаЦены;
	Иначе

		Если НоваяВалюта <> ВалютаЦены Тогда // если валюта цены не совпадает с параметром, то надо пересчитать

			Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда // если не задана валюта цены, то будем считать цену нулевой
				НовоеЗначениеЦены = 0;
			Иначе // валюты заданы и не совпадают, надо пересчитывать

				СтруктураКурсЦены = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦены, Дата);
				КурсЦены          = СтруктураКурсЦены.Курс;
				КратностьЦены     = СтруктураКурсЦены.Кратность;

				Если НЕ ЗначениеЗаполнено(КурсНовойВалюты) Тогда // если не задан курс, то курс берем по справочнику
					СтруктураКурсНовойВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалюта, Дата);
					КурсНовойВалюты          = СтруктураКурсНовойВалюты.Курс;
					КратностьНовойВалюты     = СтруктураКурсНовойВалюты.Кратность;
				КонецЕсли; 

				НовоеЗначениеЦены = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(НовоеЗначениеЦены, ВалютаЦены, НоваяВалюта, 
												КурсЦены, КурсНовойВалюты,КратностьЦены,КратностьНовойВалюты);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат НовоеЗначениеЦены;

КонецФункции // ПересчитатьЦенуПриИзмененииВалюты()

// Формирует запрос, возвращающий цены для заданных позиций номенклатуры.
// Используется для получения цен по ТЧ редактируемого документа для последующего пересчета ТЧ
//
// Параметры: 
//  СтруктураЗначений   - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						  документа до и после их изменения в общей форме),
//  СпособЗаполненияЦен - значение перечисления "Способы заполнения цен", определяет по какому из регистров
//						  ("Цены компании" или "Цены контрагентов") будет строиться запрос.
//  МассивНоменклатуры - массив, содержащий ссылки на элементы номенклатуры, по которым надо узнать цены.
//  ДатаДокумента	   - дата, на которую надо узнать цены 
//  Контрагент		   - ссылка на справочник контрагентов, определяет для какого контрагента надо узнать цены.
//
// Возвращаемое значение:
//  Результат запроса.
//
Функция СформироватьЗапросПоЦенам(СтруктураЗначений, СпособЗаполненияЦен, МассивНоменклатуры, 
									ДатаДокумента, Контрагент) Экспорт

	// Достанем нужные цены запросом
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Дата",   КонецДня(ДатаДокумента));
	Запрос.УстановитьПараметр("ТипЦен", СтруктураЗначений.НовыйТипЦен);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен       КАК ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Валюта       КАК ВалютаЦены,
	|	ЦеныНоменклатурыСрезПоследних.Цена         КАК Цена,
	|	КурсыВалютСрезПоследних.Курс               КАК КурсВалютыЦены,
	|	КурсыВалютСрезПоследних.Кратность          КАК КратностьВалютыЦены,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ЦенаВключаетНДС          КАК ЦенаВключаетНДС,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ПорядокОкругления        КАК ПорядокОкругления,
	|	ЦеныНоменклатурыСрезПоследних.ТипЦен.ОкруглятьВБольшуюСторону КАК ОкруглятьВБольшуюСторону
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта";

	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоЦенам()

// Заполняет цену в строке ТЧ документа по реквизитам документа и текущим ценам в регистре сведений.
//
// Параметры: 
//  СтрокаТабличнойЧасти         - строка табличной части редактируемого документа, 
//  СтруктураПоиска            - структура, содержит значение Номенклатуры для поиска в результате запроса, 
//  ВыборкаИзРезультатаЗапроса - результат запроса по текущим ценам, 
//  СтруктураЗначений          - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//						         документа до и после их изменения в общей форме),
//  СпособЗаполненияЦен        - значение перечисления "Способы заполнения цен", влияет на расчет цен
//						         (см. описание в ПересчитатьЦенуПриИзмененииФлаговНалогов)
//
Процедура ЗаполнитьЦенуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, СтруктураПоиска, ВыборкаИзРезультатаЗапроса, 
											СтруктураЗначений, СпособЗаполненияЦен) Экспорт

	Перем НДСВСтроке;

	// получим имя табличной части и имя документа
	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Родитель();

	Если Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Реквизиты.Найти("Цена") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	// Найдем товар из текущей строки документа в выборке из результата запроса.
	Если НЕ ЗначениеЗаполнено(СтруктураПоиска.Номенклатура) Тогда
		Возврат; // Искать нечего.
	КонецЕсли; 

	РезультатПоиска = ВыборкаИзРезультатаЗапроса.Найти(СтруктураПоиска.Номенклатура, "Номенклатура");
	Если НЕ (РезультатПоиска = Неопределено) Тогда // Нашли запись

		// Если для данного товара есть цена данного типа
		// Единицу устанавливаем в единицу цены, если она не задана, то в основную единицу товара
		Если НЕ ЗначениеЗаполнено(РезультатПоиска.Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			СтрокаТабличнойЧасти.Цена = РезультатПоиска.Цена;

			// Пересчитываем цену в валюту документа
			Если СтруктураЗначений.НовыйВалютаДокумента <> РезультатПоиска.ВалютаЦены Тогда
				СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
													РезультатПоиска.ВалютаЦены, 
													СтруктураЗначений.НовыйВалютаДокумента, 
													РезультатПоиска.КурсВалютыЦены,
													СтруктураЗначений.НовыйКурсДокумента, 
													РезультатПоиска.КратностьВалютыЦены,
													СтруктураЗначений.НовыйКратностьДокумента);
			КонецЕсли;

			// Пересчитываем цену по параметрам налогообложения.
			// Ставку определяем исходя из переданных параметров
			СтруктураЗначений.Свойство("ЕстьСтавкаНДСВТабличнойЧасти", НДСВСтроке);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
									СпособЗаполненияЦен, РезультатПоиска.ЦенаВключаетНДС, 
									СтруктураЗначений.НовыйУчитыватьНДС, СтруктураЗначений.НовыйСуммаВключаетНДС, 
									?(СтруктураЗначений.НовыйУчитыватьНДС, ?(НДСВСтроке = Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС), УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС)),0));

		КонецЕсли;

	Иначе // информации по этому товару нет в запросе 

		// Такого быть не может, это ошибка алгоритма
		ОбщегоНазначения.СообщитьОбОшибке("Для номенклатуры """ + СокрЛП(СтрокаТабличнойЧасти.Номенклатура) + """ не найдена цена! Пересчет невозможен.");
		СтрокаТабличнойЧасти.Цена = 0;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВСтрокеТабличнойЧасти()

// В строке табличной части заполняется плановая себестоимость номенклатуры.
//
// Параметры: 
//  СтрокаТЧ - строка табличной части, в которой надо заполнить плановую себестоимость;
//  Дата     - дата, на которую надо получить плановую себестоимость.
//
Процедура ЗаполнитьПлановуюСебестоимость(СтрокаТЧ, Дата) Экспорт

	ТипЦенПлановойСебестоимости   = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	Если ЗначениеЗаполнено(ТипЦенПлановойСебестоимости) Тогда

		СтрокаТЧ.ПлановаяСтоимость =
			Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТЧ.Номенклатура,
									 ТипЦенПлановойСебестоимости, Дата,
									 ВалютаРегламентированногоУчета, 1);
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с формой цен и валют.

// По реквизитам редактируемого документа устанавливает реквизиты общей формы "Цены и Валюта".
//
// Параметры: 
//  ФормаЦеныВалюты                - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                 - объект редактируемого документа
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//                                   Множество возможных ключей: (ТипЦен, ТипСкидкиНаценки, ВалютаДокумента, КурсДокумента, 
//								     КратностьДокумента, УчитыватьНДС, СуммаВключаетНДС);
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать, 
//                                   по умолчанию - "Товары".
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  НовыйТипЦенДляУстановки        - тип цен, который по возможности нужно установить как новый в форме;
//
Процедура УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект,
	                                                СтруктураРеквизитовДокумента, ИмяТабличнойЧасти,
	                                                ВалютаРегламентированногоУчета,
	                                                НовыйТипЦенДляУстановки = Неопределено)

	// если хоть в одной табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Для каждого ТЧОбъекта Из ДокументОбъект.Метаданные().ТабличныеЧасти Цикл
		Если ДокументОбъект[ТЧОбъекта.Имя].Количество() > 0 Тогда
			НадоПересчитывать = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если не НадоПересчитывать и не(ДокументОбъект.Метаданные().Реквизиты.Найти("Сумма")=неопределено) тогда
		//Все таки надо пересчитать если есть реквизит "Сумма" в шапке.
		НадоПересчитывать = Истина;
	КонецЕсли;

	
	ФормаЦеныВалюты.ТабличнаяЧастьПуста = Не НадоПересчитывать;

	// Для получения курса на дату
	ФормаЦеныВалюты.ДатаКурса = ДокументОбъект.Дата;

	// определим текущую валюту взиморасчетов
	ТекущийВалютаВзаиморасчетов = "";
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("Контрагент") <> Неопределено Тогда
		Если ДокументОбъект.Метаданные().Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено Тогда
			ТекущийВалютаВзаиморасчетов = ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			ТекущийВалютаВзаиморасчетов = УправлениеПользователями.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента).ВалютаВзаиморасчетов;
		КонецЕсли;
		ФормаЦеныВалюты.ТекущийВалютаВзаиморасчетов = ТекущийВалютаВзаиморасчетов;
	КонецЕсли;

	// может быть, надо ограничить список доступных валют для документа?
	// сделаем это, если, во-первых, существует валюта документа, во-вторых, существует валюта взаиморасчетов
	// (т.е. передается курс взаиморасчетов)
	Если СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов")
	   И НЕ СтруктураРеквизитовДокумента.Свойство("КурсДокумента")
	   И СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента") Тогда
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина;
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ТекущийВалютаВзаиморасчетов);
		Если ВалютаРегламентированногоУчета <> ТекущийВалютаВзаиморасчетов Тогда
			ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.Добавить(ВалютаРегламентированногоУчета);
		КонецЕсли;
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаВыбора  = Ложь;
		ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.КнопкаОчистки = Ложь;
	КонецЕсли;

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если ФормаЦеныВалюты.ЭлементыФормы.Найти("Текущий" + ЭлементСтруктуры.Ключ) <> Неопределено
		 Или ЭлементСтруктуры.Ключ = "КратностьВзаиморасчетов" Или ЭлементСтруктуры.Ключ = "КратностьДокумента" Тогда
			ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ] = ДокументОбъект[ЭлементСтруктуры.Ключ];

			Если ЭлементСтруктуры.Значение = Неопределено Тогда
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ФормаЦеныВалюты["Текущий" + ЭлементСтруктуры.Ключ];
			Иначе
				ФормаЦеныВалюты["Новый" + ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// если уже при открытии новый тип цен отличается от текущего, надо обработать изменения реквизитов формы
	Если ФормаЦеныВалюты.НовыйТипЦен <> ФормаЦеныВалюты.ТекущийТипЦен 
	   И ЗначениеЗаполнено(ФормаЦеныВалюты.НовыйТипЦен) Тогда
		// надо установить флаг СуммаВключаемНДС из типа цены
		ФормаЦеныВалюты.НовыйСуммаВключаетНДС = ФормаЦеныВалюты.НовыйТипЦен.ЦенаВключаетНДС;
	КонецЕсли;
	
	// если мы используем режим выбора из списка для новой валюты документа
	// и в списке нет нужной валюты, установим новую валюту в валюту взаиморасчетов
	Если ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.РежимВыбораИзСписка = Истина
	   И ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора.НайтиПоЗначению(ФормаЦеныВалюты.НовыйВалютаДокумента) = Неопределено Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента = ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.СписокВыбора[0].Значение;
	КонецЕсли;

	// Если передан НовыйТипЦенДляУстановки и он подходит по параметрам, установим его в форме
	Если НовыйТипЦенДляУстановки <> Неопределено
	   И СтруктураРеквизитовДокумента.Свойство("ТипЦен") 
	   И Метаданные.НайтиПоТипу(ТипЗнч(ДокументОбъект.ТипЦен)).Имя = НовыйТипЦенДляУстановки.Метаданные().Имя Тогда
		ФормаЦеныВалюты.НовыйТипЦен = НовыйТипЦенДляУстановки;
	КонецЕсли;

		// Вызов при изменении значения договора
	Если СтруктураРеквизитовДокумента.Свойство("ВызовПриИзмененииЗначенияДоговора") Тогда
		ФормаЦеныВалюты.НовыйВалютаДокумента    = ТекущийВалютаВзаиморасчетов;
		ФормаЦеныВалюты.ПересчитатьЦеныПоВалюте = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьТекущиеРеквизитыФормаЦеныВалюты()

// Устанавливает доступность реквизитов общей формы "Цены и Валюта" согласно переданной структуре.
//
// Параметры: 
//  ФормаЦеныВалюты                    - форма, соответствует общей контекст общей форме "Цены и Валюта", 
//  ДокументОбъект                     - объект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//
Процедура УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента,
	      СтруктураНеРедактируемыхРеквизитов = Неопределено)

	ФормаЦеныВалюты.ЭлементыФормы.НовыйТипЦен.Доступность               = СтруктураРеквизитовДокумента.Свойство("ТипЦен");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйВалютаДокумента.Доступность      = СтруктураРеквизитовДокумента.Свойство("ВалютаДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсДокумента.Доступность        = СтруктураРеквизитовДокумента.Свойство("КурсДокумента");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйКурсВзаиморасчетов.Доступность   = СтруктураРеквизитовДокумента.Свойство("КурсВзаиморасчетов");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйУчитыватьНДС.Доступность         = СтруктураРеквизитовДокумента.Свойство("УчитыватьНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйСуммаВключаетНДС.Доступность     = СтруктураРеквизитовДокумента.Свойство("СуммаВключаетНДС");
	ФормаЦеныВалюты.ЭлементыФормы.НовыйНДСВключенВСтоимость.Доступность = СтруктураРеквизитовДокумента.Свойство("НДСВключенВСтоимость");

	// Если задана структура исключений, то сделаем недоступными соответствующие реквизиты.
	Если СтруктураНеРедактируемыхРеквизитов <> Неопределено Тогда

		Для каждого ЭлементСтруктуры Из СтруктураНеРедактируемыхРеквизитов Цикл
			ФормаЦеныВалюты.ЭлементыФормы["Новый" + ЭлементСтруктуры.Ключ].Доступность = Ложь;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьРеквизитовФормаЦеныВалюты()

// Устанавливает новые значения реквизитов документа по значениям, выбранным в общей форме "Цены и Валюта"
//
// Параметры: 
//  СтруктураРезультирующихЗначений	- структура, содержащая значения реквизитов документа до и после их 
//									  изменения в форме "Цены и валюта",
//  ДокументОбъект					- объект редактируемого документа,
//  СтруктураРеквизитовДокумента	- структура, задает список обрабатываемых реквизитов документа,
// 									  если реквизит надо обрабатывать, то для него есть ключ в этой структуре
//
Процедура УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураРезультирующихЗначений, ДокументОбъект, 
	                                                             СтруктураРеквизитовДокумента) Экспорт

	Для каждого ЭлементСтруктуры Из СтруктураРеквизитовДокумента Цикл
		Если СтруктураРезультирующихЗначений.Свойство("Новый" + ЭлементСтруктуры.Ключ) Тогда
			ДокументОбъект[ЭлементСтруктуры.Ключ] = СтруктураРезультирующихЗначений["Новый" + ЭлементСтруктуры.Ключ];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта()

// Определяет необходимость пересчета табличной части документа при изменении флагов налогообложения 
// в форме "Цены и валюты".
//
// Параметры: 
//  СтруктураЗначений	- структура, содержащая значения реквизитов документа до и после их 
//						  изменения в форме "Цены и валюта".
//
Функция ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений) Экспорт

		Возврат (СтруктураЗначений.НовыйУчитыватьНДС     <> СтруктураЗначений.ТекущийУчитыватьНДС) ИЛИ
		        (СтруктураЗначений.НовыйСуммаВключаетНДС <> СтруктураЗначений.ТекущийСуммаВключаетНДС);

КонецФункции // ОпределитьНеобходимостьПерерасчетаЦены()

// Позволяет получить список реквизитов документа, необходимых для дальнейшей
// передачи в обработку заполнения цен и валют.
//
// Параметры: 
//  ДокументОбъект      - объект документа, для реквизитов будет производится заполнение
//  СтруктураИсключений - структура, в которую передаются те исключения, которые или невозможно
//                        определить по метаданным, или, несмотря ни на что, нельзя включать в
//                        возвращаемую структуру.
//                        В структуре - ключ = имя реквизита, значение = истина (необходимо добавить
//                        в структуру) или ложь (нельзя добавлять в структуру)
//
// Возвращаемое значение:
//  Сформированная структура реквизитов документа.
//
Функция ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ДокументОбъект, СтруктураИсключений = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Зададим, какие реквизиты вообще нам могут быть нужны
	СтруктураВозможныхВариантовРеквизитов = Новый Структура();
	СтруктураВозможныхВариантовРеквизитов.Вставить("ТипЦен");
	СтруктураВозможныхВариантовРеквизитов.Вставить("ВалютаДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьДокумента");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КурсВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("КратностьВзаиморасчетов");
	СтруктураВозможныхВариантовРеквизитов.Вставить("УчитыватьНДС");
	СтруктураВозможныхВариантовРеквизитов.Вставить("СуммаВключаетНДС");

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Новый Структура();
	Для Каждого ТекущийЭлементСтруктуры Из СтруктураВозможныхВариантовРеквизитов Цикл
		НужныйРеквизитДокумента = ТекущийЭлементСтруктуры.Ключ;
		Если ОбщегоНазначения.ЕстьРеквизитДокумента(НужныйРеквизитДокумента, МетаданныеДокумента) Тогда
			СтруктураРеквизитовДокумента.Вставить(НужныйРеквизитДокумента);
		КонецЕсли;
	КонецЦикла;

	// теперь проверим исключения
	Если СтруктураИсключений<>Неопределено Тогда
		Для Каждого ТекущийЭлементСтруктуры Из СтруктураИсключений Цикл
			Если ТекущийЭлементСтруктуры.Значение Тогда
				// надо добавить реквизит, если его еще нет
				СтруктураРеквизитовДокумента.Вставить(ТекущийЭлементСтруктуры.Ключ);
			Иначе
				// надо удалить реквизит, если он есть
				СтруктураРеквизитовДокумента.Удалить(ТекущийЭлементСтруктуры.Ключ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат СтруктураРеквизитовДокумента;

КонецФункции // ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования()

// Выполняем пересчет документа после изменений в форме "Цены и валюта".
//
// Параметры: 
//  ДокументОбъект                 - документ; 
//  СпособЗаполненияЦен            - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//                                  "при продаже" или "при покупке".
//  СтруктураРеквизитовДокумента   - структура, задает список обрабатываемых реквизитов документа,
//                                   если реквизит надо обрабатывать, то для него есть ключ в этой структуре.
//  ИмяТабличнойЧасти              - строка, имя табличной части, которую надо пересчитать.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  СкидкаУстановлена              - переменная мСкидкаУстановлена модуля формы документа.
//  СтруктураЗначений              - структура, соответствующая возвращаемой формой "Цены и валюта" (значения реквизитов 
//                                   документа до и после их изменения в общей форме).
//  Автозаполнение                 - признак автозаполнения
//
Процедура ОбработатьИзмененияПоКнопкеЦеныВалюта( ДокументОбъект, СпособЗаполненияЦен,
	                                             СтруктураРеквизитовДокумента,
	                                             ИмяТабличнойЧасти, ВалютаРегламентированногоУчета,
	                                             СкидкаУстановлена, СтруктураЗначений, Автозаполнение) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Заполним нужные реквизиты документа
	УстановитьРеквизитыДокументаПоЗначениямФормыЦеныВалюта(СтруктураЗначений, ДокументОбъект, СтруктураРеквизитовДокумента);

	// если в табличной части есть хотя бы одна строка, надо пересчитывать
	НадоПересчитывать = Ложь;
	Если ДокументОбъект[ИмяТабличнойЧасти].Количество() > 0 Тогда
		НадоПересчитывать = Истина;
	КонецЕсли;

	СтруктураПоиска = Новый Структура; // Для поиска в результате запроса
	ПересчитатьЦенуПоФлагамНалогов = Ложь; // Инициализация переменной

	ЕстьЦена               = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Цена", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСумма              = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПередачи       = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПередачи      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПередачи", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаПоступления    = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаПоступления   = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПоступления", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьЦенаСтарая         = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЦенаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьСуммаСтарая        = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаСтарая", МетаданныеДокумента, ИмяТабличнойЧасти);
	ЕстьФактурнаяСтоимость = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФактурнаяСтоимость", МетаданныеДокумента, ИмяТабличнойЧасти);

	ЗначениеПустогоКоличества = ?(ИмяТабличнойЧасти = "Услуги" ИЛИ ИмяТабличнойЧасти = "АгентскиеУслуги", 1, 0);
	
	// Если задано пользователем, то надо перезаполнить табличную часть по новому типу цен
	Если СтруктураЗначений.ПерезаполнитьЦеныПоТипу и ЕстьЦена Тогда

		// Получить нужные цены запросом
		РезультатЗапросаЦен = СформироватьЗапросПоЦенам(СтруктураЗначений, 
														  СпособЗаполненияЦен, 
														  ДокументОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Номенклатура"),
														  ДокументОбъект.Дата, 
														  ?(ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента),
															ДокументОбъект.Контрагент, Неопределено));
		ВыборкаРезультатЗапросаЦен = РезультатЗапросаЦен.Выгрузить();

		СтруктураПоиска = Новый Структура(); // структура для поиска в результате запроса

		// В цикле по ТЧ перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти] Цикл

			// Если у нас способ заполнения цен "по розничным ценам", то перезаполнять по типу можно
			// только для услуг, для Товаров на розничном складе цена является измерением регистра остатков.
			Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам 
			   И Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
				Продолжить;
			КонецЕсли; 

			СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
			СтарыйКоэффициент = 0;
			Если Автозаполнение И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				СтарыйКоэффициент = СтрокаТабличнойЧасти.Коэффициент;
			КонецЕсли;
			ЗаполнитьЦенуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти,
											   СтруктураПоиска,
											   ВыборкаРезультатЗапросаЦен,
											   СтруктураЗначений,
											   СпособЗаполненияЦен);

			Если Автозаполнение И СтарыйКоэффициент > 0 Тогда
				Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
					СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество*СтарыйКоэффициент
													  /СтрокаТабличнойЧасти.Коэффициент;
				КонецЕсли;
			КонецЕсли;

			Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
				Если ЕстьЦенаПередачи Тогда
					СтрокаТабличнойЧасти.ЦенаПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
					Если ЕстьСуммаПередачи Тогда
						СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьЦенаПоступления Тогда
					СтрокаТабличнойЧасти.ЦенаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
					Если ЕстьСуммаПоступления Тогда
						СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьЦенаСтарая Тогда
					СтрокаТабличнойЧасти.ЦенаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
					Если ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
					КонецЕсли;
				ИначеЕсли ЕстьСуммаСтарая Тогда
					СтрокаТабличнойЧасти.СуммаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
														 СтруктураЗначений.ТекущийВалютаДокумента, 
														 СтруктураЗначений.НовыйВалютаДокумента,
														 СтруктураЗначений.ТекущийКурсДокумента, 
														 СтруктураЗначений.НовыйКурсДокумента,
														 СтруктураЗначений.ТекущийКратностьДокумента, 
														 СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
				Если ЕстьФактурнаяСтоимость Тогда
					СтрокаТабличнойЧасти.ЕстьФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
																 СтруктураЗначений.ТекущийВалютаДокумента, 
																 СтруктураЗначений.НовыйВалютаДокумента,
																 СтруктураЗначений.ТекущийКурсДокумента, 
																 СтруктураЗначений.НовыйКурсДокумента,
																 СтруктураЗначений.ТекущийКратностьДокумента, 
																 СтруктураЗначений.НовыйКратностьДокумента);
				КонецЕсли;
			КонецЕсли; 

			// Выполним действия при изменении цены

			#Если Клиент Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ЗначениеПустогоКоличества);
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			#КонецЕсли

		КонецЦикла; // Цикл по ТЧ для заполнения цен при изменении типа цен

	Иначе

		// Определим необходимость перерасчета цены
		ПересчитатьЦенуПоФлагамНалогов = ОпределитьНеобходимостьПерерасчетаЦены(СтруктураЗначений);

		Если СтруктураЗначений.ПересчитатьЦеныПоВалюте ИЛИ ПересчитатьЦенуПоФлагамНалогов Тогда


			// В цикле по табличной части перезаполняем цены, приводя их к текущим скидкам, валюте и режиму налогообложения
			Для каждого СтрокаТабличнойЧасти Из ДокументОбъект[ИмяТабличнойЧасти]Цикл
				
				// В случае, если поменялась валюта
				Если СтруктураЗначений.ПересчитатьЦеныПоВалюте Тогда
					Если ЕстьЦена Тогда
						СтрокаТабличнойЧасти.Цена = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																								 Неопределено,
																								 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																								 СтруктураЗначений.НовыйУчитыватьНДС,
																								 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																								 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						#Если Клиент Тогда
						ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ЗначениеПустогоКоличества);
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						#КонецЕсли

					Иначе
						Если ЕстьСумма Тогда
							СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
																 СтруктураЗначений.ТекущийВалютаДокумента, 
																 СтруктураЗначений.НовыйВалютаДокумента,
																 СтруктураЗначений.ТекущийКурсДокумента, 
																 СтруктураЗначений.НовыйКурсДокумента,
																 СтруктураЗначений.ТекущийКратностьДокумента, 
																 СтруктураЗначений.НовыйКратностьДокумента);
						КонецЕсли;

						#Если Клиент Тогда
						Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
						КонецЕсли;
						#КонецЕсли

					КонецЕсли;

					Если ЕстьЦенаПередачи Тогда
						СтрокаТабличнойЧасти.ЦенаПередачи = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПередачи,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПередачи Тогда
							СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаПоступления Тогда
						СтрокаТабличнойЧасти.ЦенаПоступления = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаПоступления,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаПоступления Тогда
							СтрокаТабличнойЧасти.СуммаПоступления = СтрокаТабличнойЧасти.ЦенаПоступления * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					КонецЕсли;

					Если ЕстьЦенаСтарая Тогда
						СтрокаТабличнойЧасти.ЦенаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ЦенаСтарая,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
						Если ЕстьСуммаСтарая Тогда
							СтрокаТабличнойЧасти.СуммаСтарая = СтрокаТабличнойЧасти.ЦенаСтарая * СтрокаТабличнойЧасти.Количество;
						КонецЕсли;
					ИначеЕсли ЕстьСуммаСтарая Тогда
						СтрокаТабличнойЧасти.СуммаСтарая = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаСтарая,
															 СтруктураЗначений.ТекущийВалютаДокумента, 
															 СтруктураЗначений.НовыйВалютаДокумента,
															 СтруктураЗначений.ТекущийКурсДокумента, 
															 СтруктураЗначений.НовыйКурсДокумента,
															 СтруктураЗначений.ТекущийКратностьДокумента, 
															 СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

					Если ЕстьФактурнаяСтоимость Тогда
						СтрокаТабличнойЧасти.ФактурнаяСтоимость = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.ФактурнаяСтоимость,
																	 СтруктураЗначений.ТекущийВалютаДокумента, 
																	 СтруктураЗначений.НовыйВалютаДокумента,
																	 СтруктураЗначений.ТекущийКурсДокумента, 
																	 СтруктураЗначений.НовыйКурсДокумента,
																	 СтруктураЗначений.ТекущийКратностьДокумента, 
																	 СтруктураЗначений.НовыйКратностьДокумента);
					КонецЕсли;

				Иначе
					Если ЕстьЦена Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Цена, 
																								 Неопределено,
																								 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																								 СтруктураЗначений.НовыйУчитыватьНДС,
																								 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																								 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						#Если Клиент Тогда
							ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ЗначениеПустогоКоличества);
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
						#КонецЕсли
						
					// Если нет колонки "Цена", но есть колонка "Сумма", пересчитывается непосредственно сумма	
					ИначеЕсли ЕстьСумма Тогда

						// Если надо пересчитать цены при изменении флагов налогообложения
						Если ПересчитатьЦенуПоФлагамНалогов
						   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
							СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(СтрокаТабличнойЧасти.Сумма, 
																								 Неопределено,
																								 СтруктураЗначений.ТекущийСуммаВключаетНДС,
																								 СтруктураЗначений.НовыйУчитыватьНДС,
																								 СтруктураЗначений.НовыйСуммаВключаетНДС, 
																								 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
						КонецЕсли;

						#Если Клиент Тогда
							Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
								ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
							КонецЕсли;
						#КонецЕсли


					КонецЕсли;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныВалюта()

// Получает контекст общей формы "Цены и Валюта", устанавливает в ней значения и доступность реквизитов 
// по значениям, заданным в документе, и открывает форму. 
//
// Параметры: 
//  ДокументОбъект                     - объект редактируемого документа; 
//  СтруктураРеквизитовДокумента       - структура, задает список обрабатываемых реквизитов документа;
//                                       если реквизит надо обрабатывать, то для него есть ключ в этой структуре;
//  ВалютаРегламентированногоУчета     - валюта регламентированного учета
//  СтруктураНеРедактируемыхРеквизитов - структура, задает список реквизитов, которые надо показывать, 
//                                       но не надо давать изменять, необязательный параметр.
//  ИмяТабличнойЧасти                  - строка, имя табличной части, которую надо пересчитать, 
//                                       по умолчанию - "Товары".
//  НовыйТипЦенДляУстановки            - тип цен, который по возможности нужно установить как новый в форме;
//
// Возвращаемое значение:
//  Структура, содержащая значения текущих и устанавливаемых значений для реквизитов документа.
//
Функция ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, ВалютаРегламентированногоУчета,
	                              СтруктураНеРедактируемыхРеквизитов = Неопределено,
	                              ИмяТабличнойЧасти, НовыйТипЦенДляУстановки = Неопределено, ВсегдаУчитыватьНДС = Ложь) Экспорт

	ФормаЦеныВалюты = ПолучитьОбщуюФорму("ФормаЦеныИВалюта"); 

	// Установим текущие реквизиты.
	УстановитьТекущиеРеквизитыФормаЦеныВалюты(ФормаЦеныВалюты, ДокументОбъект, 
	                                          СтруктураРеквизитовДокумента, ИмяТабличнойЧасти, 
	                                          ВалютаРегламентированногоУчета, НовыйТипЦенДляУстановки);

	// Доступность реквизитов формы.
	УстановитьДоступностьРеквизитовФормаЦеныВалюты(ФормаЦеныВалюты, СтруктураРеквизитовДокумента, 
	                                                 СтруктураНеРедактируемыхРеквизитов);

	Если ВсегдаУчитыватьНДС Тогда
		ФормаЦеныВалюты.ЗапретитьОтключениеУчитыватьНДС = Истина;
	КонецЕсли;
		
	// Теперь можно и открывать форму, она вернет результат своей работы.
	Возврат ФормаЦеныВалюты.ОткрытьМодально();

КонецФункции // ОткрытьФормуЦеныИВалюта()




// Производит пересчет цен при изменении флагов учета налогов.
// Пересчет зависит от способа заполнения цен, при заполнении По ценам номенклатуры (при продаже) 
// хочется избегать ситуаций, когда компания  «теряет деньги» при пересчете налогов. 
// Поэтому если в документе флаг "Учитывать налог" выключен, то цены должны браться напрямую из справочника, 
// потому что хочется продавать по той же цене, независимо от режима налогообложения. 
// Например, если отпускная цена задана с НП для избежания ошибок округления, то это не значит, 
// что при отпуске без НП мы должны продать дешевле. Если же флаг учета налога в документе включен, 
// то цены должны пересчитываться при подстановке в документ: 
// налог должен включаться или не включаться в зависимости от флага включения налога в типе цен.
// При заполнении по ценам контрагентов (при покупке) хочется хранить цены поставщиков. 
// Поэтому нужно пересчитывать всегда по установленным флагам в документе и в типе цен. 
// Это гарантирует, что при записи цен в регистр и последующем их чтении, 
// например, при заполнении следующего документа, мы с точностью до ошибок округления при пересчете 
// получим те же самые цены.
//
// Параметры: 
//  Цена                - число, пересчитываемое значение цены, 
//  СпособЗаполненияЦен - ссылка на перечисление СпособыЗаполненияЦен, определяет способ расчета,
//						  "при продаже" или "при покупке", см описание функции,
//  ЦенаВключаетНДС     - булево, определяет содержит ли переданное значение цены НДС,
//  УчитыватьНДС        - булево, определяет должно ли новое значение цены учитывать НДС,
//  СуммаВключаетНДС    - булево, определяет должно ли новое значение цены включать НДС,
//  СтавкаНДС           - число, ставка НДС, 
//
// Возвращаемое значение:
//  Число, новое значение цены.
//
Функция ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, СпособЗаполненияЦен, ЦенаВключаетНДС,
						УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС) Экспорт


	// Инициализация переменных
	НадоВключитьНДС  = Ложь;
	НадоИсключитьНДС = Ложь;
	НоваяЦена		 = Цена;
	Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры Тогда
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		ИначеЕсли ЦенаВключаетНДС  Тогда
			// Надо исключать НДС       
			НадоИсключитьНДС = Истина;
		КонецЕсли;
		
	Иначе // Надо пересчитывать строго по флагам включения
		
		Если УчитыватьНДС Тогда
			Если СуммаВключаетНДС
			   И (НЕ ЦенаВключаетНДС) Тогда
				
				// Надо добавлять НДС       
				НадоВключитьНДС = Истина;
			ИначеЕсли (НЕ СуммаВключаетНДС)
					И ЦенаВключаетНДС  Тогда
				
				// Надо исключать НДС       
				НадоИсключитьНДС = Истина;
			КонецЕсли;
		Иначе
			Если ЦенаВключаетНДС Тогда
				// Надо исключать НДС
				НадоИсключитьНДС = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	
	Если НадоИсключитьНДС Тогда
		НоваяЦена = (НоваяЦена * 100) / (100 + СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС Тогда
		НоваяЦена = (НоваяЦена * (100 + СтавкаНДС)) / 100;
	КонецЕсли;

	Возврат НоваяЦена;

КонецФункции // ПересчитатьЦенуПриИзмененииФлаговНалогов()

// Функция возвращает цену компании для требуемой номенклатуры в указанном типе цен , 
// на заданную дату, за заданную единицу измерения, пересчитанную в требуемую валюту по заданному курсу.
//
// Параметры: 
//  Номенклатура         - ссылка на элемент справочника "Номенклатура", для которого надо получить цену,
//  ТипЦен               - ссылка на элемент справочника "Типы цен", определяет цену какого типа надо получить,
//  Дата                 - дата, на которую надо получить цену, если не заполнено, то берется рабочая дата
//  ЕдиницаИзмерения     - ссылка на элемент справочника "Единицы измерения", определяет для какой единицы надо получить 
//                         цену, если не заполнен, то заполняется единицей цены
//  Валюта               - ссылка на элемент справочника "Валюты", определяет валюту. в которой надо вернуть цену,
//                         если не заполнен, то заполняется валютой цены
//  Курс                 - число, курс требуемой валюты, если не заполнен, берется курс из регистра 
//                         сведений "Курсы валют",
//  Кратность            - число, кратность требуемой валюты, если не заполнена, берется курс из регистра 
//                         сведений "Курсы валют",
//
// Возвращаемое значение:
//  Число, рассчитанное значение цены.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ТипЦен, Дата,
	                             Валюта = Неопределено, Курс = 0, Кратность = 1) Экспорт

	ПолученнаяЦена = 0;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ТипЦен",       ТипЦен);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЦеныНоменклатуры.Цена,
	|	ЦеныНоменклатуры.Валюта
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Дата, Номенклатура = &Номенклатура И ТипЦен = &ТипЦен) КАК ЦеныНоменклатуры";

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПолученнаяЦена = Выборка.Цена;
		ВалютаЦены     = Выборка.Валюта;
	КонецЕсли;

	Если НЕ (ВалютаЦены = Валюта) И НЕ (Валюта = Неопределено) И НЕ (ВалютаЦены = Неопределено) Тогда

		СтруктураКурсаЦены = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаЦены, Дата);
		ПолученнаяЦена     = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ПолученнаяЦена, ВалютаЦены, Валюта, 
		                                               СтруктураКурсаЦены.Курс, СтруктураКурсаЦены.Кратность,
		                                               Курс, Кратность);

	ИначеЕсли Валюта = Неопределено Тогда
		Валюта = ВалютаЦены;
	КонецЕсли;

	Возврат ПолученнаяЦена;

КонецФункции // ПолучитьЦенуНоменклатуры()


