// Выполняется списание номенклатуры по налоговому и бухгалтерскому учетам.
//
// Параметры
//  ТаблицаДокумента - таблица с данными, которые необходимы для выполнения списания номенклатуры.
//  ОтражатьВБухгалтерскомУчете – определяет должно ли выполнятся списания для целей бухгалтерского учета.
//  ОтражатьВНалоговомУчете  – определяет должно ли выполнятся списания для целей налогового учета.
//  ПрименениеУСН – определяет применяется общий режим налогообложения или УСН.
//
Процедура ДвижениеПартийТоваров(Заголовок, ТаблицаДокумента = Неопределено, ОтражатьВБухгалтерскомУчете = Истина, ПрименениеУСН = Ложь, Отказ = Ложь, Партия = Неопределено, Содержание = "Списание МПЗ", ФормироватьДвижения = Истина) Экспорт

	ТаблицаСписания = ТаблицаДокумента;

	Если ТаблицаДокумента.Количество() > 0 Тогда

		ДокументМоментВремени = Новый МоментВремени(ТаблицаДокумента[0].Регистратор.Дата, ТаблицаДокумента[0].Регистратор.Ссылка);

		ВыполнитьСписание(Заголовок, ТаблицаСписания, ДокументМоментВремени, ОтражатьВБухгалтерскомУчете, ПрименениеУСН, Отказ, Партия, Содержание, ФормироватьДвижения);

	КонецЕсли;

КонецПроцедуры // ДвижениеПартийТоваров()

/////////////////////////////////////////////////////////////////////////////////
// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура ПодобратьПартии(ТаблицаСписания, СтруктураПараметров, Отказ)

	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладах"];
	
	// Переменная определяет списывать номенклатуру исходя из стоимости остатка
	// номенклатуры на счете или по указанной в параметрах стоимости.
	СписыватьПоУказаннойСтоимости = Ложь;
	УказаннаяСтоимость = 0;
	ПустаяТаблица = ПустаяТаблицаСписанныхПартий();
	
	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
		
		СчетУчета = СтрокаДокумента.СчетУчета;
		СтрокаДокумента.СписанныеПартии = ПустаяТаблица.Скопировать();
		ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартии;
		
		// Если стоимость списания указана, то списывать надо по указанной стоимости.
		СписыватьПоУказаннойСтоимости = СтрокаДокумента.СписыватьПоУказаннойСтоимости;
		
		Если СписыватьПоУказаннойСтоимости Тогда
			УказаннаяСтоимость = СтрокаДокумента.СуммаБезНДС;
		КонецЕсли; 
		
		
		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаДокумента.Количество;
		
		//Определим количествоДт для комплектации
		Если СтруктураПараметров.ЕстьКоличествоДт Тогда
			КоличествоОсталосьПогаситьДт = СтрокаДокумента.КоличествоДт;
		Иначе
			КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогасить;
		КонецЕсли;
		
		Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда
			
			// Если указана конкретная партия и на счете учета ведется
			// партионный учет, то в структура отбора добавим партию.
			ОтборПоДокументуОприходования = Неопределено;
			Если ЗначениеЗаполнено(СтрокаДокумента.ДокументОприходования) И (НаСчетеВедетсяПартионныйУчет(СчетУчета) И (НЕ СтруктураПараметров["СпособОценкиМПЗ"] = Перечисления.СпособыОценки.ПоСредней)) Тогда
				ОтборПоДокументуОприходования = СтрокаДокумента.ДокументОприходования;
			КонецЕсли;
			
			// Если указан конкретный договор и на счете учета ведется
			// партионный учет, то в структуру отбора добавим договор поставщика.
			ОтборПоДоговоруПоставщика = Неопределено;
			Если ЗначениеЗаполнено(СтрокаДокумента.ДоговорПоставщика) И	(НаСчетеВедетсяПартионныйУчет(СчетУчета) И (НЕ СтруктураПараметров["СпособОценкиМПЗ"] = Перечисления.СпособыОценки.ПоСредней)) Тогда
				ОтборПоДоговоруПоставщика = СтрокаДокумента.ДоговорПоставщика;
			КонецЕсли;
			
			// Полученную таблицу отсортируем в соответствии со стратегией
			Если КомиссионныйТовар(СчетУчета) Тогда
				// Для товаров, принятых на комиссию, в качестве стратегиии
				// списания устанавливается стратегия - ФИФО.
				СпособОценкиМПЗ = "ФИФО";
				ПрямойОбход = (НЕ СтруктураПараметров["СпособОценкиМПЗ"] = "ЛИФО");
			Иначе
				СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиМПЗ"];
				ПрямойОбход =  Истина;
			КонецЕсли;
			
			// Пустой склад покупателя - значение измерения "Склад" когда не ведется учет по складам (или не ведется суммовой учет по складам)
			ПустойСклад = Справочники.Склады.ПустаяСсылка();
			
			СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");		
			ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);
			
			Для индекс = 0 по ПартийПоСтроке Цикл
				
				Если ПрямойОбход Тогда
					СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
				Иначе
					СтрокаПартии = СтрокаНоменклатуры.Строки[ПартийПоСтроке - индекс];
				КонецЕсли;
				
				Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ОтборПоДокументуОприходования) И (НЕ СтрокаПартии.ДокументОприходования = ОтборПоДокументуОприходования) Тогда
					Продолжить;				
				КонецЕсли;
				
				Если (ОтборПоДоговоруПоставщика <> Неопределено) И (ЗначениеЗаполнено(СтрокаПартии.ДокументОприходования)) Тогда
					МетаданныеДокумента = СтрокаПартии.ДокументОприходования.Метаданные();
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента) 
						И (НЕ ТипЗнч(СтрокаПартии.ДокументОприходования) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
						Если СтрокаПартии.ДокументОприходования.ДоговорКонтрагента <> ОтборПоДоговоруПоставщика Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если КоличествоОсталосьПогасить <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				// Проверки условий:
				
				// Количество по строке больше 0
				Если (НЕ СтрокаПартии.КоличествоПоСкладу > 0) ИЛИ (НЕ СтрокаПартии.Количество > 0) Тогда
					Продолжить;
				КонецЕсли; 
				
				// Склад, если ведется суммовой учет по складам
				Если ВедетсяУчетПоСкладам(СчетУчета) Тогда
					Если СтрокаПартии.Склад <> СтрокаДокумента.Склад 
						И СтрокаПартии.Склад <> ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Количество 			= Мин(СтрокаПартии.КоличествоПоСкладу, КоличествоОсталосьПогасить);
				КоличествоПриход 	= ?(Количество = КоличествоОсталосьПогасить, КоличествоОсталосьПогаситьДт, Окр(КоличествоОсталосьПогаситьДт * Количество / КоличествоОсталосьПогасить,3,1));
				
				Если СписыватьПоУказаннойСтоимости Тогда // списывать по стоимости, указанной в параметрах
					Стоимость = Окр(УказаннаяСтоимость  * Количество / КоличествоОсталосьПогасить,2,1);
					СтоимостьНУ = Стоимость;
					СтоимостьПР = 0;
					СтоимостьВР = 0;
					
					УказаннаяСтоимость = УказаннаяСтоимость - Стоимость;
					
				ИначеЕсли СтрокаДокумента.Себестоимость = 0 Тогда
					Стоимость  	= Окр(СтрокаПартии.Стоимость * Количество / СтрокаПартии.Количество, 2, 1);
					СтоимостьНУ = Окр(СтрокаПартии.СтоимостьНУ * Количество / СтрокаПартии.Количество, 2, 1);
					СтоимостьПР = Окр(СтрокаПартии.СтоимостьПР * Количество / СтрокаПартии.Количество, 2, 1);
					СтоимостьВР = Окр(СтрокаПартии.СтоимостьВР * Количество / СтрокаПартии.Количество, 2, 1);				
				Иначе
					Стоимость  	= Окр(СтрокаДокумента.Себестоимость * Количество / СтрокаДокумента.Количество, 2, 1);
					СтоимостьНУ = Стоимость;
					СтоимостьПР = 0;
					СтоимостьВР = 0;
				КонецЕсли;
				
				КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;
				КоличествоОсталосьПогаситьДт = КоличествоОсталосьПогаситьДт - КоличествоПриход;
				
				СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
				СтрокаПартии.Стоимость = СтрокаПартии.Стоимость - Стоимость;
				СтрокаПартии.СтоимостьНУ = СтрокаПартии.СтоимостьНУ - СтоимостьНУ;
				СтрокаПартии.СтоимостьПР = СтрокаПартии.СтоимостьПР - СтоимостьПР;
				СтрокаПартии.СтоимостьВР = СтрокаПартии.СтоимостьВР - СтоимостьВР;
				СтрокаПартии.КоличествоПоСкладу = СтрокаПартии.КоличествоПоСкладу - Количество;
				
				// В таблицу списанных партий записывается строка с информацией.
				СтрокаСписаннаяПартия               	= ТаблицаСписанныхПартии.Добавить();
				СтрокаСписаннаяПартия.Партия        	= СтрокаПартии.ДокументОприходования;
				СтрокаСписаннаяПартия.ДокументОтгрузки 	= СтрокаПартии.ДокументОтгрузки;
				СтрокаСписаннаяПартия.Подразделение 	= СтрокаПартии.Подразделение;
				СтрокаСписаннаяПартия.Склад			 	= СтрокаПартии.Склад;
				СтрокаСписаннаяПартия.Количество    	= Количество;
				СтрокаСписаннаяПартия.КоличествоПриход 	= КоличествоПриход;
				СтрокаСписаннаяПартия.СуммаСписания 	= Стоимость;
				СтрокаСписаннаяПартия.СуммаСписанияНУ 	= СтоимостьНУ;
				СтрокаСписаннаяПартия.СуммаСписанияПР 	= СтоимостьПР;
				СтрокаСписаннаяПартия.СуммаСписанияВР 	= СтоимостьВР;
				СтрокаСписаннаяПартия.Комиссионный  	= КомиссионныйТовар(СчетУчета);
				СтрокаСписаннаяПартия.СчетУчета 		= СчетУчета;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Не списанное количесвто добавим отдельной строкой 
		// в таблицу списанных партий.
		Если КоличествоОсталосьПогасить > 0  Тогда
			
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаСписаннаяПартия               	= ТаблицаСписанныхПартии.Добавить();
			СтрокаСписаннаяПартия.Количество    	= КоличествоОсталосьПогасить;
			СтрокаСписаннаяПартия.КоличествоПриход 	= КоличествоОсталосьПогаситьДт;
			СтрокаСписаннаяПартия.Комиссионный  	= КомиссионныйТовар(СчетУчета);
			СтрокаСписаннаяПартия.СчетУчета 		= СчетУчета;
			СтрокаСписаннаяПартия.Подразделение 	= СтрокаДокумента.ПодразделениеОрганизации;
			
		КонецЕсли;
		
		ОтключитьКонтрольОстатков = СтруктураПараметров.ОтключитьКонтрольОстатков;
		
		Если НЕ СтруктураПараметров.ФормироватьДвижения Тогда
			Продолжить;
		КонецЕсли;
		
		Если (КоличествоОсталосьПогасить > 0) И ((НЕ ОтключитьКонтрольОстатков) ИЛИ КомиссионныйТовар(СчетУчета)) И (СтруктураПараметров.ПроводитьДокументПоРазделуУчета) Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Строка: " + СтрокаДокумента.НомерСтроки + Символы.ПС
			+ "Не списано " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.БазоваяЕдиницаИзмерения 
			+ " товара " + СтрокаДокумента.Номенклатура + ", счет учета " + СчетУчета, Отказ, СтруктураПараметров.Заголовок);
			
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры // СписаниеСоСклада()

// Списание со склада по строке
//
// Параметры
//  СтруктураПараметров  – Структура, содержащая общие параметры
//
Процедура СформироватьДвиженияПоСписанию(СтрокаДокумента, СтруктураПараметров, Отказ)

	Если СтрокаДокумента.СписанныеПартии.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	КолонкиДокумента = СтрокаДокумента.Владелец().Колонки;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Для Каждого СтрокаПартии Из СтрокаДокумента.СписанныеПартии Цикл
		
		Проводка 					= СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
		Проводка.Содержание 		= СтруктураПараметров.СодержаниеПроводки;
		Проводка.СчетКт 			= СтрокаПартии.СчетУчета;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.Подразделение, "Кт");
			
		// Балансовый счет учета не может корреспондировать с забалансовым
		Если СтрокаДокумента.КорСчетСписания.Забалансовый = СтрокаПартии.СчетУчета.Забалансовый Тогда
			Проводка.СчетДт 			= СтрокаДокумента.КорСчетСписания;
			Если НЕ КолонкиДокумента.Найти("КорПодразделениеОрганизации") = Неопределено Тогда
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаДокумента.КорПодразделениеОрганизации, "Дт");
			Иначе
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаПартии.Подразделение, "Дт");
			КонецЕсли;
			
			Если НаСчетеВедетсяПартионныйУчет(Проводка.СчетДт) Тогда
				Проводка.СубконтоДт.Партии = СтрокаПартии.Партия;
			КонецЕсли;
			Если НаСчетеВедетсяУчетПоОтгрузкам(Проводка.СчетДт) Тогда
				Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаПартии.ДокументОтгрузки;
			КонецЕсли;
			
		КонецЕсли;
		
		БухгалтерскийУчет.ЗаполнитьСубконто(Проводка, СтрокаДокумента, 
		СтрокаДокумента.КорСубконтоСписания1,
		СтрокаДокумента.КорСубконтоСписания2,
		СтрокаДокумента.КорСубконтоСписания3,
		СтрокаПартии.Партия,,);
		
		Если НаСчетеВедетсяУчетПоОтгрузкам(Проводка.СчетКт) Тогда
			Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаПартии.ДокументОтгрузки;
		КонецЕсли;
		
		Проводка.Сумма 		= СтрокаПартии.СуммаСписания;
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СтрокаПартии.СуммаСписанияНУ,СтрокаПартии.СуммаСписанияНУ,СтрокаПартии.СуммаСписанияПР,СтрокаПартии.СуммаСписанияПР,СтрокаПартии.СуммаСписанияВР,СтрокаПартии.СуммаСписанияВР,Проводка);
		
		Если Проводка.СчетДт.Количественный Тогда
			Проводка.КоличествоДт = СтрокаПартии.КоличествоПриход;
		КонецЕсли;
		
		Если Проводка.СчетКт.Количественный Тогда
			Проводка.КоличествоКт = СтрокаПартии.Количество;
		КонецЕсли;
		
		Если Проводка.СчетДт.Валютный Тогда
			Если СтрокаДокумента.Сумма = СтрокаДокумента.СуммаВал Тогда
				Проводка.ВалютаДт 			= Константы.ВалютаРегламентированногоУчета.Получить();
				Проводка.ВалютнаяСуммаДт 	= СтрокаПартии.СуммаСписания;
			Иначе
				Если (ЗначениеЗаполнено(СтрокаДокумента.ДоговорКонтрагента)) И (ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
					Проводка.ВалютаДт 			= СтрокаДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					Проводка.ВалютнаяСуммаДт 	= ?(СтрокаДокумента.Сумма = 0, СтрокаПартии.СуммаСписания, СтрокаПартии.СуммаСписания * СтрокаДокумента.СуммаВал / СтрокаДокумента.Сумма);
				Конецесли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (СтрокаДокумента.Себестоимость = 0) Тогда
			Проводка.НеКорректироватьСтоимостьАвтоматически = Истина;
		КонецЕсли;
		
		//Очистим сумму в проводке перемещения между складами если суммовой учет по складам не ведется
		ПроверкаПеремещенияМеждуСкладами(Проводка);
		
		//Движения по регистру реализованных товаров комитента
		Если КомиссионныйТовар(СтрокаПартии.СчетУчета) 
			И (НЕ КомиссионныйТовар(СтрокаДокумента.КорСчетСписания)) 
			И (ЗначениеЗаполнено(СтрокаПартии.Партия))
			И (НЕ ТипЗнч(СтрокаДокумента.Регистратор.Ссылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику"))
			И (НЕ ТипЗнч(СтрокаДокумента.Регистратор.Ссылка) = Тип("ДокументСсылка.ПеремещениеТоваров")) Тогда
			
			Если (ТипЗнч(СтрокаПартии.Партия) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
				ИЛИ ТипЗнч(СтрокаПартии.Партия) = Тип("ДокументСсылка.Партия")
				ИЛИ ТипЗнч(СтрокаПартии.Партия) = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом")) Тогда
				
				ВалютаРасчетовСКомитентом = СтрокаПартии.Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				ДоляСуммы = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.Сумма * СтрокаПартии.Количество / СтрокаДокумента.Количество);
				
				Если ВалютаРасчетовСКомитентом = мВалютаРегламентированногоУчета Тогда
					Выручка = ДоляСуммы;
					СуммаПоступления = СтрокаПартии.СуммаСписания;
				Иначе
					
					ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(СтруктураПараметров.ДоговорКонтрагента), 
						СтруктураПараметров.ДоговорКонтрагента.ВалютаВзаиморасчетов, мВалютаРегламентированногоУчета);
					Если ВалютаРасчетовСКомитентом = ВалютаВзаиморасчетов Тогда
						Выручка = ?(СтрокаДокумента.Количество = 0, 0, СтрокаДокумента.СуммаВал * СтрокаПартии.Количество / СтрокаДокумента.Количество);
					Иначе
						КурсКратностьРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом, СтрокаДокумента.Регистратор.Дата);
						Выручка = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДоляСуммы, 
							мВалютаРегламентированногоУчета, ВалютаРасчетовСКомитентом,
							1, КурсКратностьРасчетовСКомитентом.Курс,
							1, КурсКратностьРасчетовСКомитентом.Кратность);
					КонецЕсли;
					
					КурсКратностьПартии = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРасчетовСКомитентом, СтрокаПартии.Партия.Дата);
					СуммаПоступления    = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПартии.СуммаСписания, 
						мВалютаРегламентированногоУчета, ВалютаРасчетовСКомитентом,
						1, КурсКратностьПартии.Курс,
						1, КурсКратностьПартии.Кратность);

				КонецЕсли;

				Движение = СтрокаДокумента.Регистратор.Движения.РеализованныеТоварыКомитентов.ДобавитьПриход();
				Движение.Активность	 = Истина;
				Движение.Период		 = СтрокаДокумента.Регистратор.Дата;
				Движение.Регистратор = СтрокаДокумента.Регистратор;
				Движение.Организация = СтрокаДокумента.Организация;
				
				Движение.Контрагент		 	= СтрокаПартии.Партия.Контрагент;
				Движение.ДоговорКонтрагента	= СтрокаПартии.Партия.ДоговорКонтрагента;
				Движение.Номенклатура 		= СтрокаДокумента.Номенклатура;
				
				Движение.Количество 		= СтрокаПартии.Количество;
				Движение.Выручка 			= Выручка;
				Движение.СуммаПоступления	= СуммаПоступления;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Проводка <> Неопределено Тогда
			Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
			Проводка.Организация = СтрокаДокумента.Организация;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // СписаниеСоСклада()

//Процедура формирует проводки по партионному учету
//
Процедура ВыполнитьСписание(Заголовок, ТаблицаСписания, МоментКон, ОтражатьВБухгалтерскомУчете = Истина, ПрименениеУСН = Ложь, Отказ, Партия, Содержание, ФормироватьДвижения = Истина) Экспорт

	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Бух = ОтражатьВБухгалтерскомУчете;
	
	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);
	СтруктураПараметров.Вставить("ФормироватьДвижения", ФормироватьДвижения);
	СтруктураПараметров.Вставить("Заголовок", Заголовок);
	
	УчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураПараметров.МоментКон.Дата, Отказ, СтруктураПараметров.Организация);
	
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураПараметров.Организация, Перечисления.РазделыУчета.ОценкаМПЗ, СтруктураПараметров.МоментКон.Дата));
	СтруктураПараметров.Вставить("СпособОценкиМПЗ", УчетнаяПолитика.СпособОценкиМПЗ);
	
	
	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивСчетовУчета = ТаблицаСписания.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетовУчета);

	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСкладов);
    
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	
	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивОрганизаций);
	
	//Определим дополнительные фильтры
	ФильтрПартии = Партия;
	Если ТаблицаСписания.Найти(Неопределено, "ДокументОприходования") = Неопределено Тогда
		Если УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ТаблицаСписания.ЗаполнитьЗначения(Неопределено,"ДокументОприходования");
		Иначе	
			МассивПартий = ТаблицаСписания.ВыгрузитьКолонку("ДокументОприходования");
			ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
			ФильтрПартии = МассивПартий;
			Для Каждого Элемент Из МассивПартий Цикл
				Если Не ЗначениеЗаполнено(Элемент) Тогда
					ФильтрПартии = Неопределено;
					Прервать;
				КонецЕсли;
			КонецЦикла;		
		КонецЕсли;
	КонецЕсли;
	
	ДоговорКонтрагент = ТаблицаСписания[0].ДоговорКонтрагента;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагент) Тогда
		Контрагент = Неопределено;
		СтрокаТаблицыСписания = ТаблицаСписания[0];
		Для Индекс = 1 По 3 Цикл
			Если НЕ ТаблицаСписания.Колонки.Найти("КорСубконтоСписания" + Индекс) = Неопределено Тогда
				Если ТипЗнч(СтрокаТаблицыСписания[("КорСубконтоСписания" + Индекс)]) = Тип("СправочникСсылка.Контрагенты") 
					И ЗначениеЗаполнено(СтрокаТаблицыСписания[("КорСубконтоСписания" + Индекс)]) Тогда
					Контрагент = СтрокаТаблицыСписания[("КорСубконтоСписания" + Индекс)];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Контрагент = ДоговорКонтрагент.Владелец;
	КонецЕсли; 
	
	Если ТаблицаСписания.Колонки.Найти("ПодразделениеОрганизации") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ПодразделениеОрганизации");
		ТаблицаСписания.ЗаполнитьЗначения(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), "ПодразделениеОрганизации");
		ФильтрПодразделения = Неопределено;
	Иначе
		МассивПодразделений = ТаблицаСписания.ВыгрузитьКолонку("ПодразделениеОрганизации");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПодразделений);
		ФильтрПодразделения = МассивПодразделений;
	КонецЕсли;
	
	//Дополним таблицу списания
	//Если ТаблицаСписания.Колонки.Найти("КорПодразделениеОрганизации") = Неопределено Тогда
	//	ТаблицаСписания.Колонки.Добавить("КорПодразделениеОрганизации");
	//	ТаблицаСписания.ЗаполнитьЗначения(Справочники.ПодразделенияОрганизаций.ПустаяСсылка(), "КорПодразделениеОрганизации"); 
	//КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("СписанныеПартии") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписанныеПартии");
	КонецЕсли;
	
	Если ТаблицаСписания.Колонки.Найти("ДоговорПоставщика") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("ДоговорПоставщика");
	КонецЕсли;
	
	Для Индекс = 1 По 3 Цикл
		Если ТаблицаСписания.Колонки.Найти("КорСубконтоСписания" + Индекс) = Неопределено Тогда
			ТаблицаСписания.Колонки.Добавить("КорСубконтоСписания" + Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаСписания.Колонки.Найти("СписыватьПоУказаннойСтоимости") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписыватьПоУказаннойСтоимости", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	//Определим параметры списания
	СписаниеПоУказаннойСтоимости = Ложь;
	Если НЕ ТаблицаСписания.Колонки.Найти("Себестоимость") = Неопределено Тогда
		Если ТаблицаСписания.Найти(0, "Себестоимость") = Неопределено Тогда
			СписаниеПоУказаннойСтоимости = Истина;
		КонецЕсли;
	Иначе
		ТаблицаСписания.Колонки.Добавить("Себестоимость");
		ТаблицаСписания.ЗаполнитьЗначения(0, "Себестоимость");
	КонецЕсли;
	
	ОтключитьКонтрольОстатков = Константы.ОтключитьКонтрольОтрицательныхОстатков.Получить();
	
	//Определим партии списания
	Если ОтключитьКонтрольОстатков И СписаниеПоУказаннойСтоимости Тогда
		СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладах", ПолучитьТаблицуПартийНаСкладахПоДаннымДокумента(СтруктураПараметров, ТаблицаСписания));
	Иначе
		
		Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
			
			СтруктураПараметровБлокировки = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрБухгалтерии", "Хозрасчетный");
			
			ЗначенияБлокировки = Новый Соответствие;
			ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(, СтруктураПараметров.МоментКон.Дата)); 
			ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, 	Контрагент); 
			ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, 		ДоговорКонтрагент);
			
			СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаСписания);
			ОписаниеИсточника = Новый Соответствие;
			ОписаниеИсточника.Вставить("Счет", 					"СчетУчета");
			ОписаниеИсточника.Вставить("Организация", 			"Организация");
			ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура, 	"Номенклатура");
			ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады,			"Склад");
			Если ЗначениеЗаполнено(ФильтрПодразделения) И ФильтрПодразделения.Количество() > 0 И ЗначениеЗаполнено(ФильтрПодразделения[0]) Тогда
				ОписаниеИсточника.Вставить("Подразделение", 	"ПодразделениеОрганизации");				
			КонецЕсли;
			Если ЗначениеЗаполнено(ФильтрПартии) Тогда
				ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, 	"ДокументОприходования");				
			КонецЕсли;
					
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
			
		КонецЕсли;

		СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладах", ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, МассивОрганизаций, МассивСчетовУчета, МассивНоменклатуры, МассивСкладов, Контрагент, ФильтрПартии, ФильтрПодразделения,  ДоговорКонтрагент));
	КонецЕсли;
		
	СтруктураПараметров.Вставить("Контрагент",         Контрагент);
	СтруктураПараметров.Вставить("СодержаниеПроводки", Содержание);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ТаблицаСписания[0].ДоговорКонтрагента);
	СтруктураПараметров.Вставить("ОтключитьКонтрольОстатков",   ОтключитьКонтрольОстатков);
	СтруктураПараметров.Вставить("ЕстьКоличествоДт",   (НЕ ТаблицаСписания.Колонки.Найти("КоличествоДт") = Неопределено));
	ЕстьСодержаниеПроводки = Не (ТаблицаСписания.Колонки.Найти("СодержаниеПроводки") = Неопределено);
	
	ПодобратьПартии(ТаблицаСписания, СтруктураПараметров, Отказ);

	Если ФормироватьДвижения Тогда
		Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
			
			Если ЕстьСодержаниеПроводки Тогда
				Если НЕ СтрокаДокумента.СодержаниеПроводки = "" Тогда
					СтруктураПараметров.Вставить("СодержаниеПроводки", СтрокаДокумента.СодержаниеПроводки);
				КонецЕсли;
			КонецЕсли;
			
			// Списание со склада
			СформироватьДвиженияПоСписанию(СтрокаДокумента, СтруктураПараметров, Отказ);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ВедетсяУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = Истина;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции // ВедетсяСуммовойУчетПоСкладам()

Функция ВедетсяСуммовойУчетПоСкладам(Счет) Экспорт

	УчетПоСкладам = Ложь;

	СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");

	Если СтрокаВидаСубконто <> Неопределено Тогда
		УчетПоСкладам = СтрокаВидаСубконто.Суммовой;
	КонецЕсли;

	Возврат УчетПоСкладам;

КонецФункции // ВедетсяСуммовойУчетПоСкладам()

Функция НаСчетеВедетсяПартионныйУчет(Счет) Экспорт

	ПартионныйУчет = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			ПартионныйУчет = Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат ПартионныйУчет;

КонецФункции // НаСчетеВедетсяПартионныйУчет()

Функция НаСчетеВедетсяУчетПоОтгрузкам(Счет) 

	ПартионныйУчет = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			ПартионныйУчет = Истина;
		КонецЕсли;
        		
	КонецЕсли;

	Возврат ПартионныйУчет;

КонецФункции // НаСчетеВедетсяПартионныйУчет()

Функция НаСчетеВедетсяУчетПоКонтрагентам(Счет)

	УчетПоКонтрагентам = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
	Иначе
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "ВидСубконто");

		Если СтрокаВидаСубконто <> Неопределено Тогда
			УчетПоКонтрагентам = Истина;
		КонецЕсли;

	КонецЕсли;

	Возврат УчетПоКонтрагентам;

КонецФункции // НаСчетеВедетсяУчетПоКонтрагентам()

//Очистим сумму в проводке перемещения между складами если суммовой учет по складам не ведется
//
Процедура ПроверкаПеремещенияМеждуСкладами(Проводка)
	
	Если Проводка.СчетДт = Проводка.СчетКт Тогда
		Если (ВедетсяУчетПоСкладам(Проводка.СчетДт)) И (НЕ ВедетсяСуммовойУчетПоСкладам(Проводка.СчетДт)) Тогда
			
			ОчиститьСумму = Истина;
			Если Проводка.СчетДт.УчетПоПодразделениям И Проводка.ПодразделениеДт <> Проводка.ПодразделениеКт Тогда
			    ОчиститьСумму = Ложь;
			КонецЕсли;
			
			Для Каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл
				Если (ВидСубконто.ВидСубконто <> ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады) И
					(Проводка.СубконтоДт[ВидСубконто.ВидСубконто] <> Проводка.СубконтоКт[ВидСубконто.ВидСубконто]) Тогда
					//Дебетовая и кредитовая часть проводки отличаются не только складом
					ОчиститьСумму = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если ОчиститьСумму Тогда
				Проводка.Сумма = 0;
				Проводка.СуммаНУДт = 0;
				Проводка.СуммаПРДт = 0;
				Проводка.СуммаВРДт = 0;
				Проводка.СуммаНУКт = 0;
				Проводка.СуммаПРКт = 0;
				Проводка.СуммаВРКт = 0;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Выполняется сортировка списка счетов на счета, по которым ведется разный
// суммовой учет (в части аналитики).
//
// Параметры
//  СчетаУчета  – Список значений - список счетов, который необходимо рассортировать.
//  СчетаУчетаН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет только по номенклатуре.
//  СчетаУчетаНС – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по складам.
//  СчетаУчетаНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и по партиям.
//  СчетаУчетаНСП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, складам и партиям.
//  СчетаУчетаКН – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре и контрагентам.
//  СчетаУчетаКНП – Список значений - список счетов, состоящий из счетов
//				  на которых ведется суммовой учет по номенклатуре, контрагентам и партиям.
//
Процедура СортировкаСчетовУчета(СчетаУчета, СчетаУчетаН, СчетаУчетаНС, СчетаУчетаНП, СчетаУчетаНСП, СчетаУчетаКН, СчетаУчетаКНП, СчетаУчетаКНС, СчетаУчетаНПО,
	СчетаУчетаН_Склад, СчетаУчетаНП_Склад, СчетаУчетаНК_Склад)

	Для каждого Счет Из СчетаУчета Цикл

		Если ВедетсяСуммовойУчетПоСкладам(Счет) И НаСчетеВедетсяПартионныйУчет(Счет) И (Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Комиссионеры, "ВидСубконто") = Неопределено) Тогда
			СчетаУчетаНСП.Добавить(Счет);

		ИначеЕсли НаСчетеВедетсяПартионныйУчет(Счет) И НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКНП.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет(Счет) И НаСчетеВедетсяУчетПоОтгрузкам(Счет) Тогда
			СчетаУчетаНПО.Добавить(Счет);
			
		ИначеЕсли ВедетсяСуммовойУчетПоСкладам(Счет) И НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКНС.Добавить(Счет);
			
		ИначеЕсли НаСчетеВедетсяПартионныйУчет(Счет) Тогда
			СчетаУчетаНП.Добавить(Счет);
			
			Если ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаНП_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли НаСчетеВедетсяУчетПоКонтрагентам(Счет) Тогда
			СчетаУчетаКН.Добавить(Счет);
			
			Если ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаНК_Склад.Добавить(Счет);
			КонецЕсли;
			
		ИначеЕсли ВедетсяСуммовойУчетПоСкладам(Счет) Тогда
			СчетаУчетаНС.Добавить(Счет);
			
		Иначе
			СчетаУчетаН.Добавить(Счет);
			
			Если ВедетсяУчетПоСкладам(Счет) Тогда
				СчетаУчетаН_Склад.Добавить(Счет);
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуПартийНаСкладахПоДаннымДокумента(СтруктураПараметров, ТаблицаСписания)
	
	Результат = Новый ДеревоЗначений();
	
	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.Колонки.Добавить("Номенклатура");
	Результат.Колонки.Добавить("ДокументОприходованияДата");
	Результат.Колонки.Добавить("ДокументОприходования");
	Результат.Колонки.Добавить("ДокументОтгрузкиДата");
	Результат.Колонки.Добавить("ДокументОтгрузки");
	Результат.Колонки.Добавить("Склад");
	Результат.Колонки.Добавить("Организация");
	Результат.Колонки.Добавить("СчетУчета");
	Результат.Колонки.Добавить("Подразделение");
	
	Результат.Колонки.Добавить("Количество");
	Результат.Колонки.Добавить("КоличествоПоСкладу");
	Результат.Колонки.Добавить("Стоимость");
	Результат.Колонки.Добавить("СтоимостьНУ");
	Результат.Колонки.Добавить("СтоимостьПР");
	Результат.Колонки.Добавить("СтоимостьВР");
	
	ТаблицаСписания.Сортировать("Номенклатура Возр");
		 
	ТекНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
	
	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл
				  
		Если ТекНоменклатура <> СтрокаДокумента.Номенклатура Тогда
			ТекНоменклатура = СтрокаДокумента.Номенклатура;
			СтрокиНоменклатуры = Результат.Строки.Добавить();
			СтрокиНоменклатуры.Номенклатура = ТекНоменклатура;
		КонецЕсли;
		Запись 								= СтрокиНоменклатуры.Строки.Добавить();
		Запись.Номенклатура 				= СтрокаДокумента.Номенклатура;
		Запись.Подразделение 				= СтрокаДокумента.ПодразделениеОрганизации;
		Запись.ДокументОприходованияДата 	= Дата("00010101");
		Запись.ДокументОприходования 		= СтрокаДокумента.ДокументОприходования;
		Запись.ДокументОтгрузкиДата 		= Дата("00010101");
		Запись.ДокументОтгрузки 			= Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
		Запись.Склад 						= СтрокаДокумента.Склад;
		Запись.Организация 					= СтрокаДокумента.Организация;
		Запись.СчетУчета 					= СтрокаДокумента["СчетУчета"];
		
		Запись.Количество 					= СтрокаДокумента.Количество;
		Запись.КоличествоПоСкладу			= СтрокаДокумента.Количество;
		Запись.Стоимость 					= СтрокаДокумента.Себестоимость;
		Запись.СтоимостьНУ 					= СтрокаДокумента.Себестоимость;
		Запись.СтоимостьПР 					= 0;
		Запись.СтоимостьВР 					= 0;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции
	
// Формирует запрос по остаткам партий товаров на конец рабочего  периода
//
// Параметры:
//  МоментКон      - момент времени, на которой возвращаются остатки.
//
// Возвращаемое значение:
//	Результат запроса, выгруженный в таблицу значений.
//
Функция ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, Организации, СчетаУчета, Номенклатура = Неопределено, Склады = Неопределено, Контрагент = Неопределено, ФильтрПартия = Неопределено, ФильтрПодразделения= Неопределено, Договор = Неопределено) Экспорт
	
	Если НЕ СтруктураПараметров.ПроводитьДокументПоРазделуУчета Тогда
		Возврат Новый ДеревоЗначений();
	КонецЕсли;
	
	Если СтруктураПараметров["СпособОценкиМПЗ"] = Перечисления.СпособыОценки.ПоСредней Тогда
		Партия = Неопределено;
	Иначе
		Партия = ФильтрПартия;
	КонецЕсли;
	
	// Сортировка счетов учета
	СчетаУчетаН   = Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНСП = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаКН  = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, и номенклатуре
	СчетаУчетаКНП = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, номенклатуре и партиям
	СчетаУчетаКНС = Новый СписокЗначений; // счета, с суммовым учетом по контрагентам, номенклатуре и складам
	СчетаУчетаНПО = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре партиям и отгрузкам
	
	СчетаУчетаН_Склад   = Новый СписокЗначений; // счета, с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и партиям и количественным по складу
	СчетаУчетаНК_Склад  = Новый СписокЗначений; // счета, с суммовым учетом по номенклатуре и контрагентам и количественным по складу
	
	СортировкаСчетовУчета(СчетаУчета, 
							СчетаУчетаН, 
							СчетаУчетаНС, 
							СчетаУчетаНП, 
							СчетаУчетаНСП, 
							СчетаУчетаКН, 
							СчетаУчетаКНП,
							СчетаУчетаКНС,
							СчетаУчетаНПО, 
							СчетаУчетаН_Склад, 
							СчетаУчетаНП_Склад,
							СчетаУчетаНК_Склад);
	
	ВидСубконтоНоменклатура = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура;
	ВидСубконтоПартии       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
	ВидСубконтоСклады       = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады;
	ВидСубконтоКонтрагенты  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты;
	ВидСубконтоОтгрузки     = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
	
	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ВидСубконтоНоменклатура);
	
	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНС.Добавить(ВидСубконтоСклады);
	
	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНП.Добавить(ВидСубконтоПартии);
	
	ВидыСубконтоНПО = Новый Массив;
	ВидыСубконтоНПО.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоНПО.Добавить(ВидСубконтоПартии);
	ВидыСубконтоНПО.Добавить(ВидСубконтоОтгрузки);
	
	ВидыСубконтоНСП = Новый Массив;
	ВидысубконтоНСП.Добавить(ВидСубконтоНоменклатура);
	ВидысубконтоНСП.Добавить(ВидСубконтоПартии);
	ВидысубконтоНСП.Добавить(ВидСубконтоСклады);
	
	ВидыСубконтоКН = Новый Массив;
	ВидыСубконтоКН.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоКН.Добавить(ВидСубконтоКонтрагенты);
	
	ВидыСубконтоКНП = Новый Массив;
	ВидыСубконтоКНП.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоКНП.Добавить(ВидСубконтоПартии);
	ВидыСубконтоКНП.Добавить(ВидСубконтоКонтрагенты);
	
	ВидыСубконтоКНС = Новый Массив;
	ВидыСубконтоКНС.Добавить(ВидСубконтоНоменклатура);
	ВидыСубконтоКНС.Добавить(ВидСубконтоКонтрагенты);
	ВидыСубконтоКНС.Добавить(ВидСубконтоСклады);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МоментКон",       СтруктураПараметров.МоментКон);
	Запрос.УстановитьПараметр("Ссылка",          СтруктураПараметров.МоментКон.Ссылка);
	Запрос.УстановитьПараметр("Организации",     Организации);
	Запрос.УстановитьПараметр("СчетаУчетаН",     СчетаУчетаН);
	Запрос.УстановитьПараметр("СчетаУчетаНС",    СчетаУчетаНС);
	Запрос.УстановитьПараметр("СчетаУчетаНП",    СчетаУчетаНП);
	Запрос.УстановитьПараметр("СчетаУчетаНПО",   СчетаУчетаНПО);
	Запрос.УстановитьПараметр("СчетаУчетаНСП",   СчетаУчетаНСП);
	Запрос.УстановитьПараметр("СчетаУчетаКН",    СчетаУчетаКН);
	Запрос.УстановитьПараметр("СчетаУчетаКНП",   СчетаУчетаКНП);
	Запрос.УстановитьПараметр("СчетаУчетаКНС",   СчетаУчетаКНС);
	Запрос.УстановитьПараметр("СчетаУчетаН_Склад",    СчетаУчетаН_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНП_Склад",   СчетаУчетаНП_Склад);
	Запрос.УстановитьПараметр("СчетаУчетаНК_Склад",   СчетаУчетаНК_Склад);
	Запрос.УстановитьПараметр("Номенклатура",    Номенклатура);
	Запрос.УстановитьПараметр("Склады",          Склады);
	Запрос.УстановитьПараметр("ВидысубконтоН",   ВидысубконтоН);
	Запрос.УстановитьПараметр("ВидысубконтоНС",  ВидысубконтоНС);
	Запрос.УстановитьПараметр("ВидысубконтоНП",  ВидысубконтоНП);
	Запрос.УстановитьПараметр("ВидысубконтоНПО", ВидысубконтоНПО);
	Запрос.УстановитьПараметр("ВидысубконтоНСП", ВидысубконтоНСП);
	Запрос.УстановитьПараметр("ВидысубконтоКН",  ВидысубконтоКН);
	Запрос.УстановитьПараметр("ВидыСубконтоКНП", ВидыСубконтоКНП);
	Запрос.УстановитьПараметр("ВидыСубконтоКНС", ВидыСубконтоКНС);
	Запрос.УстановитьПараметр("ПустойСклад",     Справочники.Склады.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяПартия",    Документы.Партия.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяОтгрузка",  Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	Запрос.УстановитьПараметр("Контрагент",      Контрагент);
	Запрос.УстановитьПараметр("Договор",	     Договор);
	Запрос.УстановитьПараметр("Партия",      	 Партия);
	Запрос.УстановитьПараметр("ПустаяДата",      Дата("00010101"));
	//Запрос.УстановитьПараметр("ВидУчетаПР",      Перечисления.ВидыУчетаПоПБУ18.ПР);
	//Запрос.УстановитьПараметр("ВидУчетаВР",      Перечисления.ВидыУчетаПоПБУ18.ВР);
	
	Запрос.УстановитьПараметр("ФильтрПодразделения",   ФильтрПодразделения);

	
	Текст = "";
	
	Если СчетаУчетаН.Количество() > 0 Тогда
		
		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	" + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам.Субконто2", "&ПустойСклад")+ " КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА " + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ " + ?(СчетаУчетаН_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаН), &ВидыСубконтоН," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Организация В (&Организации)) КАК Остатки
		|	" + ?(СчетаУчетаН_Склад.Количество() > 0, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаН_Склад), &ВидыСубконтоНС, " + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Субконто2 В (&Склады) И Организация В (&Организации)) КАК ОстаткиПоСкладам
		|	ПО Остатки.Счет = ОстаткиПоСкладам.Счет
		|		И Остатки.Субконто1 = ОстаткиПоСкладам.Субконто1", "")+ "
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1, " + ?(СчетаУчетаН_Склад.Количество() > 0, "
		|	ОстаткиПоСкладам.Субконто2,", "")+ "
		|	Остатки.Организация";
		
	КонецЕсли;
	
	Если СчетаУчетаНС.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто2 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНС), &ВидыСубконтоНС, " + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Субконто2 В (&Склады) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Организация";
		
	КонецЕсли;
	
	Если СчетаУчетаНП.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	" + ?(СчетаУчетаНП_Склад.Количество() > 0, "ОстаткиПоСкладам.Субконто3", "&ПустойСклад")+ " КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА " + ?(СчетаУчетаНП_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ " + ?(СчетаУчетаНП_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, " + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Организация В (&Организации)) КАК Остатки
		|	" + ?(СчетаУчетаНП_Склад.Количество() > 0, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНП_Склад), &ВидыСубконтоНСП," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Субконто3 В (&Склады) И Организация В (&Организации)) КАК ОстаткиПоСкладам
		|	ПО Остатки.Счет = ОстаткиПоСкладам.Счет
		|		И Остатки.Субконто1 = ОстаткиПоСкладам.Субконто1
		|		И Остатки.Субконто2 = ОстаткиПоСкладам.Субконто2", "")+ "
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2, " + ?(СчетаУчетаНП_Склад.Количество() > 0, "
		|	ОстаткиПоСкладам.Субконто3,", "")+ "
		|	Остатки.Организация";
		
	КонецЕсли;
	
	////////////
	//НПО
	Если СчетаУчетаНПО.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОтгрузкиДата,
		|	Остатки.Субконто3 КАК ДокументОтгрузки,
		|	&ПустойСклад КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНПО), &ВидыСубконтоНПО," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Организация В (&Организации)) КАК Остатки
		|
		|ГДЕ
		|   Субконто3.ДоговорКонтрагента = &Договор
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";
		
	КонецЕсли;
	//НПО
	////////////
	
	Если СчетаУчетаНСП.Количество() > 0 Тогда
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНСП), &ВидысубконтоНСП," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Субконто3 В (&Склады) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";
		
	КонецЕсли;
	
	Если СчетаУчетаКН.Количество() > 0 Тогда // субкомиссия
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	" + ?(СчетаУчетаНК_Склад.Количество() > 0, "ОстаткиПоСкладам.Субконто3", "&ПустойСклад")+ " КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА " + ?(СчетаУчетаНК_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ " + ?(СчетаУчетаНК_Склад.Количество() > 0, "ОстаткиПоСкладам", "Остатки")+ ".КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаКН), &ВидыСубконтоКН," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Субконто2 В (&Контрагент) И Организация В (&Организации)) КАК Остатки
		|	" + ?(СчетаУчетаНК_Склад.Количество() > 0, "ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаНК_Склад), &ВидыСубконтоКНС," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Субконто2 В (&Контрагент) И Организация В (&Организации)) КАК ОстаткиПоСкладам
		|	ПО Остатки.Счет = ОстаткиПоСкладам.Счет
		|		И Остатки.Субконто1 = ОстаткиПоСкладам.Субконто1
		|		И Остатки.Субконто2 = ОстаткиПоСкладам.Субконто2", "")+ "
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2, " + ?(СчетаУчетаНК_Склад.Количество() > 0, "
		|	ОстаткиПоСкладам.Субконто3,", "")+ "
		|	Остатки.Организация";
		
	КонецЕсли;
	
	Если СчетаУчетаКНП.Количество() > 0 Тогда // субкомиссия
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДокументОприходованияДата,
		|	Остатки.Субконто2 КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаКНП), &ВидыСубконтоКНП," + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) " + ?(НЕ ЗначениеЗаполнено(Партия), "", "И Субконто2 В (&Партия) ")+ "И Субконто3 В (&Контрагент) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";
		
	КонецЕсли;
	
	Если СчетаУчетаКНС.Количество() > 0 Тогда // дав. сырье
		
		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;
		
		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Счет КАК СчетУчета,
		|	Остатки.Подразделение КАК Подразделение,
		|	Остатки.Субконто1 КАК Номенклатура,
		|	&ПустаяДата КАК ДокументОприходованияДата,
		|	&ПустаяПартия КАК ДокументОприходования,
		|	&ПустаяДата КАК ДокументОтгрузкиДата,
		|	&ПустаяОтгрузка КАК ДокументОтгрузки,
		|	Остатки.Субконто3 КАК Склад,
		|	Остатки.Организация КАК Организация,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК КоличествоПоСкладу,
		|	СУММА(ВЫБОР КОГДА Остатки.КоличествоОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.КоличествоОстатокДт КОНЕЦ) КАК Количество,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаОстатокДт КОНЕЦ) КАК Стоимость,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаНУОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаНУОстатокДт КОНЕЦ) КАК СтоимостьНУ,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаПРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаПРОстатокДт КОНЕЦ) КАК СтоимостьПР,
		|	СУММА(ВЫБОР КОГДА Остатки.СуммаВРОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Остатки.СуммаВРОстатокДт КОНЕЦ) КАК СтоимостьВР
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&МоментКон, Счет В (&СчетаУчетаКНС), &ВидыСубконтоКНС, " + ?(ЗначениеЗаполнено(ФильтрПодразделения), "(Подразделение В (&ФильтрПодразделения) ИЛИ Подразделение ЕСТЬ NULL) И ", "") + "Субконто1 В (&Номенклатура) И Субконто2 В (&Контрагент) И Субконто3 В (&Склады) И Организация В (&Организации)) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Подразделение,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3,
		|	Остатки.Организация";
		
	КонецЕсли;
	
	Запрос.Текст = Текст;
	
	СпособОценки = СтруктураПараметров["СпособОценкиМПЗ"];
	Если СпособОценки = Перечисления.СпособыОценки.ЛИФО Тогда
		НапрДата = "Убыв";
	ИначеЕсли СпособОценки = Перечисления.СпособыОценки.ФИФО Тогда
		НапрДата = "Возр";
	Иначе
		НапрДата = "";
	КонецЕсли; 
	
	Запрос.Текст = Текст + "
	|ДЛЯ ИЗМЕНЕНИЯ 
	|ИТОГИ ПО Номенклатура";
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Не СчетаУчетаКНП.Количество()+СчетаУчетаНСП.Количество()+СчетаУчетаНПО.Количество()+СчетаУчетаНП.Количество() = 0 Тогда
		
		ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОприходования","ДокументОприходованияДата");
		
		Если СчетаУчетаНПО.Количество() > 0 Тогда
			ДобавитьДатуДокументаКРезультатуЗапроса(Результат,"ДокументОтгрузки","ДокументОтгрузкиДата");
		КонецЕсли;
		
		Результат.строки.Сортировать("ДокументОприходованияДата " + НапрДата + ", ДокументОприходования "+ НапрДата, истина);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуПартийНаСкладах()

Функция ДобавитьДатуДокументаКРезультатуЗапроса(Результат,КолонкаДокумента,КолонкаСДатой)

	КэшПоТипам = Новый Соответствие;

	Для каждого Строка из Результат.Строки Цикл
		Для каждого СтрокаТаблицы из Строка.строки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
				Продолжить;
			КонецЕсли;
			
			ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЦикла;
	КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(КлючИЗначение.Значение);
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);

		НайденныеСтроки = Результат.строки.НайтиСтроки(ПараметрыОтбора,истина);
		для каждого строка из НайденныеСтроки цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		Конеццикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ДобавитьДатуДокументаКРезультатуЗапроса()

// Создается пустая таблица, в которую будут в дальнейшем записываются списанные партии.
//
Функция ПустаяТаблицаСписанныхПартий() Экспорт

	ТаблицаСписанныхПартий = Новый ТаблицаЗначений;
	ТаблицаСписанныхПартий.Колонки.Добавить("СчетУчета");
	ТаблицаСписанныхПартий.Колонки.Добавить("Партия", Новый ОписаниеТипов(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения.Типы()));
	ТаблицаСписанныхПартий.Колонки.Добавить("ДокументОтгрузки");
	ТаблицаСписанныхПартий.Колонки.Добавить("Подразделение");
	ТаблицаСписанныхПартий.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаСписанныхПартий.Колонки.Добавить("Комиссионный");

	ТаблицаСписанныхПартий.Колонки.Добавить("Количество", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныхПартий.Колонки.Добавить("КоличествоПриход", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 3));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписания", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписанияНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписанияПР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСписанныхПартий.Колонки.Добавить("СуммаСписанияВР", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
	Возврат ТаблицаСписанныхПартий;
	
КонецФункции // ПустаяТаблицаСписанныхПартий()

// По счету учета определяется комиссионный товар или собственный
//
// Возвращаемое значение:
//   Булево – ИСТИНА - если товар комиссионный,
//	 		  иначе функция возвращает ЛОЖЬ
Функция КомиссионныйТовар(СчетУчета) Экспорт

	Комиссионный = Ложь;
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
	     Возврат Ложь;
	КонецЕсли; 
	
	Если ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Комиссионный = СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);
		
	КонецЕсли; 
	
	Возврат Комиссионный;

КонецФункции // КомиссионныйТовар()

Функция ПолучитьОбъектПоТипу(ТипСтр, Субконто1, Субконто2, Субконто3) Экспорт

	ИскомыйТип = Тип(ТипСтр);
	ИскомыйОбъект = Неопределено;
	
	Если ТипЗнч(Субконто1) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто1;
		
	ИначеЕсли ТипЗнч(Субконто2) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто2;
		
	ИначеЕсли ТипЗнч(Субконто3) = ИскомыйТип Тогда
		ИскомыйОбъект = Субконто3;
	КонецЕсли; 	
	
	Возврат ИскомыйОбъект;

КонецФункции // ПолучитьОбъектПоТипу()

// Розница в продажных ценах

Процедура ВыполнитьПереоценку(ТаблицаСписания) Экспорт
	
	МоментКон = Новый МоментВремени(ТаблицаСписания[0].Регистратор.Дата, ТаблицаСписания[0].Регистратор.Ссылка);
	
	// Структура общих параметров, используемых в большинстве процедур
	СтруктураПараметров = Новый Структура;

	Если ТаблицаСписания.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Бух = Истина;
	
	СтруктураПараметров.Вставить("МоментКон", МоментКон);
	СтруктураПараметров.Вставить("Организация", ТаблицаСписания[0].Организация);                           	
	
	УчетнаяПолитика   = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураПараметров.МоментКон.Дата, ложь, СтруктураПараметров.Организация);	
	
	СтруктураПараметров.Вставить("ПроводитьДокументПоРазделуУчета", ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(СтруктураПараметров.Организация, Перечисления.РазделыУчета.ОценкаМПЗ, СтруктураПараметров.МоментКон.Дата));
	СтруктураПараметров.Вставить("СпособОценкиМПЗ", УчетнаяПолитика.СпособОценкиМПЗ);	
	// Сформируем структура отбора данных при формировании запроса по номенклатуре
	МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);

	МассивСчетовУчетаБУ = ТаблицаСписания.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетовУчетаБУ);

	МассивСкладов = ТаблицаСписания.ВыгрузитьКолонку("Склад");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСкладов);

	МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивОрганизаций);

	СтруктураПараметров.Вставить("ДеревоПартийТоваровНаСкладах", ПолучитьТаблицуПартийНаСкладах(СтруктураПараметров, МассивОрганизаций, МассивСчетовУчетаБУ, МассивНоменклатуры, МассивСкладов, , , ));
		
	// Добавим колонку в которой будут отражаться списанные по БУ партии
	Если ТаблицаСписания.Колонки.Найти("СписанныеПартии") = Неопределено Тогда
		ТаблицаСписания.Колонки.Добавить("СписанныеПартии");
	КонецЕсли;

		
	Для Каждого СтрокаДокумента Из ТаблицаСписания Цикл

		// Списание со склада
		ПереоценкаПоСкладу(СтрокаДокумента, СтруктураПараметров);

	КонецЦикла;
КонецПроцедуры

Процедура ПереоценкаПоСкладу(СтрокаДокумента, СтруктураПараметров)

	// Партии для данного учета
	ДеревоОстатковПартий = СтруктураПараметров["ДеревоПартийТоваровНаСкладах"];
	
	СчетУчета = СтрокаДокумента.СчетУчета;
	СтрокаДокумента.СписанныеПартии = ПустаяТаблицаСписанныхПартий();
	ТаблицаСписанныхПартии = СтрокаДокумента.СписанныеПартии;

	// Подлежащее погашению при списании количество
	КоличествоОсталосьПогасить = СтрокаДокумента.Количество;

	Если ДеревоОстатковПартий.Строки.Количество() <> 0 Тогда

		// Полученную таблицу отсортируем в соответствии со стратегией
		Если КомиссионныйТовар(СчетУчета) Тогда
			// Для товаров, принятых на комиссию, в качестве стратегии
			// списания устанавливается стратегия - ФИФО.
			СпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО;
			
		Иначе
			СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиМПЗ"];

		КонецЕсли;

		// Пустой склад покупателя - значение измерения "Склад" когда не ведется учет по складам (или не ведется суммовой учет по складам)
		ПустойСклад = Справочники.Склады.ПустаяСсылка();
		
		ПрямойОбход =  СпособОценкиМПЗ = СтруктураПараметров["СпособОценкиМПЗ"];
		
		СтрокаНоменклатуры = ДеревоОстатковПартий.Строки.Найти(СтрокаДокумента.Номенклатура, "Номенклатура");		
		ПартийПоСтроке = ?(СтрокаНоменклатуры = Неопределено, -1, СтрокаНоменклатуры.Строки.Количество() - 1);

		Для индекс = 0 по ПартийПоСтроке Цикл
			
			Если ПрямойОбход Тогда
				СтрокаПартии = СтрокаНоменклатуры.Строки[индекс];
			Иначе
				СтрокаПартии = СтрокаНоменклатуры.Строки[ПартийПоСтроке - индекс];
			КонецЕсли;
			
			Если СтрокаПартии.СчетУчета <> СчетУчета Тогда
				Продолжить;
			КонецЕсли;
			
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			// Проверки условий:

			// Количество по строке больше 0
			Если НЕ СтрокаПартии.Количество > 0 Тогда
				Продолжить;
			КонецЕсли; 

			// Склад, если ведется суммовой учет по складам
			Если ВедетсяСуммовойУчетПоСкладам(СчетУчета) Тогда

				Если СтрокаПартии.Склад <> СтрокаДокумента.Склад 
				   И СтрокаПартии.Склад <> ПустойСклад Тогда // пустые склады могут остаться со времени, когда не было учета по складам

					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если СтрокаПартии.Количество >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / СтрокаПартии.Количество;
			Иначе
				КоэффСписания = 1;
			КонецЕсли;

			Количество  = Окр(СтрокаПартии.Количество 	* КоэффСписания,3,1);
			Стоимость   = Окр(СтрокаПартии.Стоимость  	* КоэффСписания,2,1);
						
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - Количество;

			СтрокаПартии.Количество = СтрокаПартии.Количество - Количество;
            СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость  - Стоимость;
		
			//Формирование проводок Бух
			
			СуммаПереоценки = (Количество * СтрокаДокумента.ЦенаВРознице) - Стоимость;
			
			Если СуммаПереоценки <> 0 Тогда
				Проводка 			 = СтрокаДокумента.Регистратор.Движения.Хозрасчетный.Добавить();
				Проводка.Период      = СтрокаДокумента.Регистратор.Дата;
				Проводка.Организация = СтрокаДокумента.Организация;
				Проводка.Содержание  = "Переоценка товаров в рознице";
				
				Проводка.СчетДт      = СчетУчета;
				Проводка.СчетКт      = СтрокаДокумента.КорСчетСписания;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",  СтрокаДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Склады",  СтрокаДокумента.Склад);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура",  СтрокаДокумента.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Номенклатура",  СтрокаДокумента.Номенклатура);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии",  СтрокаПартии.ДокументОприходования);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, "Партии",  СтрокаПартии.ДокументОприходования);
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(
					Проводка, СтрокаДокумента.ПодразделениеОрганизации, СтрокаДокумента.ПодразделениеОрганизации);
				
				Проводка.Сумма       = СуммаПереоценки;
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаПереоценки,СуммаПереоценки,,,,,Проводка);
				
			КонецЕсли;
			
			// В таблицу списанных партий записывается строка с информацией.
			СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
			СтрокаСписаннаяПартия.Партия        = СтрокаПартии.ДокументОприходования;
			СтрокаСписаннаяПартия.Количество    = Количество;
			СтрокаСписаннаяПартия.СуммаСписания 	= Стоимость;
			СтрокаСписаннаяПартия.СуммаСписанияНУ 	= Стоимость;
			СтрокаСписаннаяПартия.Комиссионный  = КомиссионныйТовар(СчетУчета);

			СтрокаСписаннаяПартия.СчетУчета = СчетУчета;
						
		КонецЦикла;

	КонецЕсли;
	
	// Не списанное количество добавим отдельной строкой 
	// в таблицу списанных партий.
	Если КоличествоОсталосьПогасить > 0  Тогда
		
		// В таблицу списанных партий записывается строка с информацией.
		СтрокаСписаннаяПартия               = ТаблицаСписанныхПартии.Добавить();
		СтрокаСписаннаяПартия.Количество    = КоличествоОсталосьПогасить;
		СтрокаСписаннаяПартия.Комиссионный  = КомиссионныйТовар(СчетУчета);
		
		СтрокаСписаннаяПартия.СчетУчета = СчетУчета;
		
	КонецЕсли;
    	
КонецПроцедуры // СписаниеСоСклада()

Функция ТорговаяНаценкаНТТ(ДокументСсылка, Склад, Подразделение, РазделятьПоСтавкамНДС) Экспорт
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Если РазделятьПоСтавкамНДС Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаКон", 			ДокументСсылка.МоментВремени());
	Запрос.УстановитьПараметр("Организация", 		ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	Запрос.УстановитьПараметр("Счет90", 			ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Склады,"+?(РазделятьПоСтавкамНДС,"
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК СтавкиНДС,","")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТН,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаНУОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаНУОстатокКт КОНЕЦ) КАК ТН_НУ,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаПРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаПРОстатокКт КОНЕЦ) КАК ТН_ПР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаВРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаВРОстатокКт КОНЕЦ) КАК ТН_ВР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПС,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ОБ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 = &Склад) КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 = &Склад) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2","")+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация И (ПодразделениеКт = &Подразделение ИЛИ ПодразделениеКт ЕСТЬ NULL)) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1"+?(РазделятьПоСтавкамНДС,"
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2","")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1"+?(РазделятьПоСтавкамНДС,",
	|	ХозрасчетныйОстаткиТН.Субконто2","")+"
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТорговаяНаценкаАТТ(ДокументСсылка, Склад, Номенклатура, Подразделение) Экспорт
	
	РазделятьПоПартиям = НаСчетеВедетсяПартионныйУчет(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		
	Если РазделятьПоПартиям Тогда
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", 			НачалоМесяца(ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаКон", 			ДокументСсылка.МоментВремени());
	Запрос.УстановитьПараметр("Организация", 		ДокументСсылка.Организация);
	Запрос.УстановитьПараметр("СчетТН", 			ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	Запрос.УстановитьПараметр("СчетПС", 			ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	Запрос.УстановитьПараметр("Счет90", 			ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
	Запрос.УстановитьПараметр("Склад", 				Склад);
	Запрос.УстановитьПараметр("Номенклатура", 		Номенклатура);
	Запрос.УстановитьПараметр("ВидыСубконто", 		ВидыСубконто);
	Запрос.УстановитьПараметр("ПустаяПартия",    	Документы.Партия.ПустаяСсылка());
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиТН.Субконто1 КАК Номенклатура,
	|	ХозрасчетныйОстаткиТН.Субконто2 КАК Склады,"+?(РазделятьПоПартиям, "
	|	ХозрасчетныйОстаткиТН.Субконто3 КАК Партия,", "
	|	&ПустаяПартия КАК Партия,")+"
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаОстатокКт КОНЕЦ) КАК ТН,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаНУОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаНУОстатокКт КОНЕЦ) КАК ТН_НУ,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаПРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаПРОстатокКт КОНЕЦ) КАК ТН_ПР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиТН.СуммаВРОстатокКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиТН.СуммаВРОстатокКт КОНЕЦ) КАК ТН_ВР,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОстаткиПС.СуммаОстатокДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОстаткиПС.СуммаОстатокДт КОНЕЦ) КАК ПС,
	|	СУММА(ВЫБОР КОГДА ХозрасчетныйОборотыДтКт.СуммаОборот ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот КОНЕЦ) КАК ОБ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетТН, &ВидыСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиТН
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаКон, Счет = &СчетПС, &ВидыСубконто, Организация = &Организация И (Подразделение = &Подразделение ИЛИ Подразделение ЕСТЬ NULL) И Субконто1 В (&Номенклатура) И Субконто2 = &Склад) КАК ХозрасчетныйОстаткиПС
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОстаткиПС.Субконто1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОстаткиПС.Субконто2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОстаткиПС.Субконто3", "")+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&Счет90), , СчетКт = &СчетПС, &ВидыСубконто, Организация = &Организация И (ПодразделениеКт = &Подразделение ИЛИ ПодразделениеКт ЕСТЬ NULL)) КАК ХозрасчетныйОборотыДтКт
	|		ПО ХозрасчетныйОстаткиТН.Субконто1 = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ХозрасчетныйОстаткиТН.Субконто2 = ХозрасчетныйОборотыДтКт.СубконтоКт2"+?(РазделятьПоПартиям, " И	ХозрасчетныйОстаткиТН.Субконто3 = ХозрасчетныйОборотыДтКт.СубконтоКт3", "")+"
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстаткиТН.Субконто1,
	|	ХозрасчетныйОстаткиТН.Субконто2"+?(РазделятьПоПартиям, ",
	|	ХозрасчетныйОстаткиТН.Субконто3", "")+"
	|";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

