
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ РАБОТЫ С ОБРАБОТКАМИ ОБСЛУЖИВАНИЯ

// Функция возвращает обработку обслуживания торгового оборудования.
//
// Параметры:
//  Модель                             - <СправочникСсылка.ТорговоеОборудование>
//                                     - Модель торгового оборудования, для
//                                       которой необходимо получить обработку
//                                       обслуживания.
//
//  Обработка                          - <ВнешняяОбработкаОбъект.*>
//                                     - Выходной параметр; обработка обслуживания,
//                                       соответствующая указанной модели торгового
//                                       оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибкиОбщие> - Результат выполнения операции.
//                                       В случае успешного завершения возвращается
//                                       пустая ссылка перечисления ТООшибкиОбщие.
//
Функция ПолучитьОбработкуОбслуживанияТО(Модель, Обработка) Экспорт

	Обработка = Неопределено;

	Попытка
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(РаботаСФайлами.ПолучитьИмяКаталога(ПараметрыСеанса.ТекущийПользователь), Модель.ОбработкаОбслуживания.ИмяФайла);
		Данные   = Модель.ОбработкаОбслуживания.Обработка;

		Данные.Получить().Записать(ИмяФайла);

		Обработка = ВнешниеОбработки.Создать(ИмяФайла);
	Исключение
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиОбработкиОбслуживания;
		Возврат Результат;
	КонецПопытки;

	Попытка
		Форма     = Обработка.ПолучитьФорму();
		ВерсияAPI = ?(Форма.ПолучитьВерсиюAPI() <> 2.1, Форма.ПолучитьВерсиюAPI(), 2.01);
	Исключение
		Сообщить("Выбранная внешняя обработка не является обработкой
		               |обслуживания торгового оборудования.", СтатусСообщения.Внимание);
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиОбработкиОбслуживания;
		Обработка = Неопределено;
		Возврат Результат;
	КонецПопытки;

	ВерсияAPIКонфигурации = ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО();

	Если Не ((ВерсияAPI >= ВерсияAPIКонфигурации) И (ВерсияAPI < Окр(ВерсияAPIКонфигурации, 0, РежимОкругления.Окр15как10) + 1)) Тогда
		Сообщить("" + Модель + "" + ":" + Символы.ПС
		+ "Версия API обработки обслуживания " + Формат(ВерсияAPI, "ЧЦ=5; ЧДЦ=2") + " не совпадает с версией API конфигурации " + Формат(ВерсияAPIКонфигурации, "ЧЦ=5; ЧДЦ=2") + "." + Символы.ПС
		+ "Обновите обработку обслуживания.", СтатусСообщения.Важное);
		Обработка = Неопределено;
		Результат = Перечисления.ТООшибкиОбщие.ОшибкаЗагрузкиОбработкиОбслуживания;
		Возврат Результат;
	КонецЕсли;

	Возврат Перечисления.ТООшибкиОбщие.ПустаяСсылка();

КонецФункции // ПолучитьОбработкуОбслуживанияТО()

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ, ОБЕСПЕЧИВАЮЩИЕ ЭКСПОРТ, ИМПОРТ И ОБНОВЛЕНИЕ ОБРАБОТОК ОБСЛУЖИВАНИЯ

// Функция возвращает информацию о обработках обслуживания, удовлетворяющих,
// если значение параметра "ИспользоватьФильтр" = Истина,
// критериям отбора. Дополнительно можно указать идентификатор.
//
// Параметры
//  Идентификатор      - <Строка>, <Неопределено>
//                     - В случае, если данный параметр имеет значение, отличное от
//                       "Неопределено", будет возвращён единственный элемент
//                       справочника, имеющий данный идентификатор. Если
//                       отбор исключает данное значение, то оно возвращено не будет.
//
//  Версия             - <Число>, <Неопределено>
//                       В случае, если данный параметр имеет значение, отличное от
//                       "Неопределено", элементы, имеющие данную или более позднюю
//                       версии, будут исключены.
//
//  ИспользоватьФильтр - <Булево>
//                     - В случае, если данный параметр имеет значение Истина,
//                       будет использоваться фильтр.
//
// Возвращаемое значение:
//  <ТаблицаЗначений>  - Таблица, содержащая информацию об обработках обслуживания
//
Функция ПолучитьОбработки(ВидТО) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    СпрОбработки.Код,
	|    СпрОбработки.Наименование,
	|    СпрОбработки.ПометкаУдаления,
	|    СпрОбработки.Ссылка,
	|    СпрОбработки.Описание,
	|    СпрОбработки.Вид,
	|    СпрОбработки.ИмяФайла,
	|    СпрОбработки.Версия,
	|    СпрОбработки.ВерсияAPI,
	|    СпрОбработки.Идентификатор,
	|    СпрОбработки.Обработка
	|ИЗ
	|    Справочник.ОбработкиОбслуживанияТО КАК СпрОбработки
	|ГДЕ
	|    СпрОбработки.ПометкаУдаления = Ложь
	|    " + ?(ВидТО = Неопределено, "", "И
	|    СпрОбработки.Вид = &ВидТО"));

	Если ВидТО <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидТО", ВидТО);
	КонецЕсли;

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьОбработки()

// Процедура осуществляет импорт обработок обслуживания.
//
// Параметры
//  КонтролироватьВерсии - <Булево>
//                       - В случае, если данный параметр имеет значение "Истина",
//                         будет осуществляться контроль версий обработок
//                         обслуживания.
//
Процедура ИмпортироватьОбработки(ПроцессОбновления, ВидТО = Неопределено) Экспорт

	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Укажите каталог, содержащий обработки обслуживания";
	СписокФайлов = Неопределено;
	СоответствиеИменФайлов = Неопределено;
	ОбновленоЗаписей = 0;
	ДобавленоЗаписей = 0;

	Пока Истина Цикл
		Если Не Диалог.Выбрать() Тогда // Выбирается каталог с обработками обслуживания
			Возврат;
		КонецЕсли;
		
		СписокФайлов = НайтиФайлы(Диалог.Каталог, "*.epf"); // Получаем список всех обработок в выбранном каталоге

		// Если не обнаружено ни одной обработки...
		Если СписокФайлов.Количество() = 0 Тогда
			Ответ = Вопрос("В указанном каталоге не обнаружены обработки обслуживания." + Символы.ПС + "Выбрать другой каталог?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Если не обнаружено ни одной обработки, то завершаем импорт
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЭлементыСправочника = ПолучитьОбработки(ВидТО); // Получаем из справочника "ОбработкиОбслуживанияТО" уже загруженные обработки
	ПолноеИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(Диалог.Каталог, "\temp.epf"); // Временный файл для работы с ОО из справочника
	СоответствиеИмен = Новый Соответствие;

	// Индикатор хода работы с ОО справочника
	Индикатор.НаименованиеОбработкиДанных = "Обработка справочника обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ЭлементыСправочника.Количество();
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	// Сначала выполняем обход справочника
	ОбрОбслуживания = Неопределено;
	Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
		Индикатор.КомментарийОбработкиДанных = "Обработка элемента: " + ЭлементСправочника.Наименование;
		Попытка
			СоответствиеИмен.Вставить(ВРег(ЭлементСправочника.ИмяФайла), ЭлементСправочника.Ссылка);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		Индикатор.Значение = Индикатор.Значение + 1;
	КонецЦикла;

	Если ПроцессОбновления Тогда
		СоответствиеИменФайлов = Новый Соответствие;
		Для Каждого ИмяФайла Из СписокФайлов Цикл
			СоответствиеИменФайлов.Вставить(ВРег(ИмяФайла.Имя), ИмяФайла);
		КонецЦикла;
	КонецЕсли;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	// Индикатор хода работы с ОО из каталога
	Индикатор.НаименованиеОбработкиДанных = ?(ПроцессОбновления, "Обновление ","Импортирование ") + "обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ?(ПроцессОбновления, ЭлементыСправочника.Количество(),СписокФайлов.Количество());
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	Если Не ПроцессОбновления Тогда
		Для Каждого ФайлОО Из СписокФайлов Цикл
			Индикатор.КомментарийОбработкиДанных = "Обработка файла: " + ФайлОО.Имя;
			Попытка
				ООИзФайла = ВнешниеОбработки.Создать(ФайлОО.ПолноеИмя);
				ОбрОбслуживания = ООИзФайла.ПолучитьФорму();
				ВерсияAPI = ?(ОбрОбслуживания.ПолучитьВерсиюAPI() <> 2.1, ОбрОбслуживания.ПолучитьВерсиюAPI(),2.01);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Ошибка при обработке файла: " + ФайлОО.Имя + Символы.ПС
					    + "Файл не является обработкой обслуживания торгового оборудования" + Символы.ПС
					    + "или содержит ошибки, не позволяющие выполнить загрузку," + Символы.ПС
					    + "либо формат обработки не соответствует текущей версии системы 1С:Предприятие.", , , СтатусСообщения.Внимание);
				Индикатор.Значение = Индикатор.Значение + 1;
				Продолжить;
			КонецПопытки;

			Если ВерсияAPI >= ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО() Тогда // Версия API обработки не соответствует версии API конфигурации, то пропускаем файл
				ООИзСправочника = СоответствиеИмен.Получить(ВРег(ФайлОО.Имя));
				Если ООИзСправочника = Неопределено Тогда
					ОбъектСправочника = Справочники.ОбработкиОбслуживанияТО.СоздатьЭлемент();
					Попытка
						Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
							ОбъектСправочника.Записать();
							Сообщить("Элемент справочника """ + ОбъектСправочника.Наименование + """(" + ОбъектСправочника.Код + ") добавлен.", СтатусСообщения.Информация);
							ДобавленоЗаписей = ДобавленоЗаписей + 1;
						КонецЕсли;
					Исключение
						ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
					КонецПопытки;
				Иначе
					ОбъектСправочника = ООИзСправочника.Ссылка.ПолучитьОбъект();
					ВерсияИзСпр = ОбъектСправочника.Версия;// Получение версии ОО в справочнике
					ВерсияИзФайла = ООИзФайла.ПолучитьФорму().ПолучитьОписание().ВерсияОбработки;// Получение версии ОО из файла

					Если ВерсияИзСпр < ВерсияИзФайла Тогда // Если версия ОО из файла равна или меньше версии в справочнике, то не обновляемся
						Попытка
							Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
								ОбъектСправочника.Записать();
								Сообщить("Элемент справочника """ + ОбъектСправочника.Наименование + """(" + ОбъектСправочника.Код + ") обновлен.", СтатусСообщения.Информация);
								ОбновленоЗаписей = ОбновленоЗаписей + 1;
							КонецЕсли;
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если Не ПроцессОбновления Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Файл " + ФайлОО.Имя + " не загружен." + Символы.ПС 
					    + "Версия API обработки (" + Формат(ВерсияAPI, "ЧДЦ=2; ЧН=Ноль") + ") меньше версии API конфигурации (" 
					    + Формат(ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО(), "ЧДЦ=2; ЧН=Ноль") + ").", , , СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;
			Индикатор.Значение = Индикатор.Значение + 1;
		КонецЦикла;
	Иначе
		Для Каждого ООИзСправочника Из ЭлементыСправочника Цикл
			Индикатор.КомментарийОбработкиДанных = "Обработка элемента справочника: " + ООИзСправочника.Наименование;
			ФайлОО = СоответствиеИменФайлов.Получить(ВРег(ООИзСправочника.ИмяФайла));
			Если ФайлОО <> Неопределено Тогда
				Попытка
					ООИзФайла = ВнешниеОбработки.Создать(ФайлОО.ПолноеИмя);
					ОбрОбслуживания = ООИзФайла.ПолучитьФорму();
					ВерсияAPI = ?(ОбрОбслуживания.ПолучитьВерсиюAPI() <> 2.1, ОбрОбслуживания.ПолучитьВерсиюAPI(),2.01);
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Ошибка при обработке файла: " + ФайлОО.Имя + Символы.ПС
						    + "Файл не является обработкой обслуживания торгового оборудования" + Символы.ПС
						    + "или содержит ошибки, не позволяющие выполнить загрузку," + Символы.ПС
						    + "либо формат обработки не соответствует текущей версии системы 1С:Предприятие.", , , СтатусСообщения.Внимание);
					Индикатор.Значение = Индикатор.Значение + 1;
					Продолжить;
				КонецПопытки;

				Если ВерсияAPI >= ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО() Тогда // Версия API обработки не соответствует версии API конфигурации, то пропускаем файл
					ОбъектСправочника = ООИзСправочника.Ссылка.ПолучитьОбъект();
					ВерсияИзСпр = ОбъектСправочника.Версия;// Получение версии ОО в справочнике
					ВерсияИзФайла = ООИзФайла.ПолучитьФорму().ПолучитьОписание().ВерсияОбработки;// Получение версии ОО из файла

					Если ВерсияИзСпр < ВерсияИзФайла Тогда // Если версия ОО из файла равна или меньше версии в справочнике, то не обновляемся
						Попытка
							Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
								ОбъектСправочника.Записать();
								Сообщить("Элемент справочника """ + ОбъектСправочника.Наименование + """(" + ОбъектСправочника.Код + ") обновлен.", СтатусСообщения.Информация);
								ОбновленоЗаписей = ОбновленоЗаписей + 1;
							КонецЕсли;
						Исключение
							ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Индикатор.Значение = Индикатор.Значение + 1;
		КонецЦикла;
	КонецЕсли;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	УдалитьФайлы(Диалог.Каталог, "temp.epf");

	Сообщить("Процесс " + ?(ПроцессОбновления, "обновления", "загрузки") + " завершен." + Символы.ПС
	    + "Обработано файлов: " + ?(ПроцессОбновления, ЭлементыСправочника.Количество(),СписокФайлов.Количество()) + Символы.ПС + "Обновлено записей: " + Строка(ОбновленоЗаписей)
	    + ?(ПроцессОбновления, "", Строка(Символы.ПС + "Добавлено записей: " + ДобавленоЗаписей)) + Символы.ПС, СтатусСообщения.Информация);

КонецПроцедуры // ИмпортироватьОбработки()

// Процедура осуществляет экспорт обработок обслуживания.
//
// Параметры
//  ИспользоватьФильтр - <Булево>
//                     - В случае, если данный параметр имеет значение "Истина",
//                       будет использоваться фильтр.
//
Процедура ЭкспортироватьОбработки(ВидТО = Неопределено) Экспорт

	УспешноОбработано = 0;
	ЭлементыСправочника = ПолучитьОбработки(ВидТО);
	Если ЭлементыСправочника.Количество() = 0 Тогда
		Предупреждение("Список экспортируемых обработок обслуживания пуст.");
		Возврат;
	КонецЕсли;

	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Укажите каталог, для сохранения обработок обслуживания";

	Пока Истина Цикл
		Если Не Диалог.Выбрать() Тогда // Выбирается каталог
			Возврат;
		КонецЕсли;

		// Проверка существования каталога на диске
		КаталогНаДиске = Новый Файл(Диалог.Каталог);
		Если Не КаталогНаДиске.Существует() Тогда
			Возврат;
		КонецЕсли;

		СписокФайлов = НайтиФайлы(Диалог.Каталог, "*.epf"); // Получаем список всех обработок в выбранном каталоге

		// Если в каталоге обнаружены обработки обслуживания
		Если СписокФайлов.Количество() <> 0 Тогда
			Ответ = Вопрос("В указанном каталоге обнаружены обработки обслуживания." 
			    + Символы.ПС + "Совпадающие обработки будут перезаписаны." 
			    + Символы.ПС + "Выбрать другой каталог?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Прервать;
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Индикатор хода работы с ОО справочника
	Индикатор.НаименованиеОбработкиДанных = "Экспортирование обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ЭлементыСправочника.Количество();
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	// Выполняем обход справочника
	Обработка = Неопределено;
	Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
		Индикатор.КомментарийОбработкиДанных = "Обработка элемента: " + ЭлементСправочника.Наименование;
		
		Попытка
			ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(Диалог.Каталог, ЭлементСправочника.ИмяФайла);

			ФайлНаДиске = Новый Файл(ИмяФайла);
			Если ФайлНаДиске.Существует() И ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
				Ответ = Вопрос("Файл " + ЭлементСправочника.ИмяФайла + " имеет атрибут ""Только на чтение"". Перезаписать?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
					ЭлементСправочника.Обработка.Получить().Записать(ИмяФайла);
					ФайлНаДиске.УстановитьТолькоЧтение(Истина);

					Сообщить("Файл " + ЭлементСправочника.ИмяФайла + " сохранен.", СтатусСообщения.Информация);
					УспешноОбработано = УспешноОбработано + 1;
				Иначе
					Сообщить("Файл " + ЭлементСправочника.ИмяФайла + " имеет атрибут ""Только на чтение"".", СтатусСообщения.Внимание);
				КонецЕсли;
			Иначе
				ЭлементСправочника.Обработка.Получить().Записать(ИмяФайла);
				Сообщить("Файл " + ЭлементСправочника.ИмяФайла + ": сохранен.", СтатусСообщения.Информация);
				УспешноОбработано = УспешноОбработано + 1;
			КонецЕсли;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать " + ЭлементСправочника.ИмяФайла 
			    + Символы.ПС + "Проверьте свободное место на диске, а также, что диск не защищен от записи.", , , СтатусСообщения.Внимание);
		КонецПопытки;

		Индикатор.Значение = Индикатор.Значение + 1;
	КонецЦикла;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	Сообщить("Процесс экспортирования завершен." + Символы.ПС + "Обработано записей: " + ЭлементыСправочника.Количество() 
	    + Символы.ПС + "Сохранено файлов: " + УспешноОбработано + Символы.ПС, СтатусСообщения.Информация);

КонецПроцедуры // ЭкспортироватьОбработки()

// Открывает помощника подключения и настройки торгового оборудования
//
Процедура ОткрытьПомощникПодключенияИНастройкиТО(ВидТО = Неопределено) Экспорт

	ФормаПомощника = Обработки.ТОНастройка.ПолучитьФорму("ФормаПомощникаНастроек");
	ФормаПомощника.мВидТОПоУмолчанию = ВидТО;
	ФормаПомощника.ОткрытьМодально();

КонецПроцедуры
