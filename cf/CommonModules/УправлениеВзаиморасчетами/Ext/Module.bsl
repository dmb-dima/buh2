////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Преобразует значение системного перечисления ВидСравнения в текст для запроса
//
// Параметры
//  СтруктураОтбора		–	<Структура>
//							Структура параметров отбора. Если есть элемент структуры с ключом "ВидСравненияОтбора",
//							значение этого элемента преобразуется в текст для запроса.
//							Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <Строка> – текст сравнения для запроса
//
Функция ПолучитьВидСравненияДляЗапроса(СтруктураОтбора)

	Если НЕ СтруктураОтбора.Свойство("ВидСравненияОтбора") Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Равно Тогда
		Возврат "=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеРавно Тогда
		Возврат "<>";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСписке Тогда
		Возврат "В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСписке Тогда
		Возврат "НЕ В";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.ВСпискеПоИерархии Тогда
		Возврат "В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВСпискеПоИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.НеВИерархии Тогда
		Возврат "НЕ В ИЕРАРХИИ";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Больше Тогда
		Возврат ">";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ">=";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.Меньше Тогда
		Возврат "<";
	ИначеЕсли СтруктураОтбора.ВидСравненияОтбора = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат "<=";
	Иначе // другие варианты 
		Возврат "=";
	КонецЕсли;

КонецФункции // ПолучитьВидСравненияДляЗапроса()

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция УстановитьДоговорКонтрагента(ДоговорКонтрагента,ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено, СтруктураПараметров = Неопределено) Экспорт

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	ГоловнаяОрганизацияДоговора = ОбщегоНазначения.ГоловнаяОрганизация(ОрганизацияДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора", ГоловнаяОрганизацияДоговора);
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		Для каждого Параметр Из СтруктураПараметров Цикл
			ИмяРеквизита = Параметр.Ключ;
			СтруктураОтбора = Параметр.Значение;
			ВидСравненияЗапроса = ПолучитьВидСравненияДляЗапроса(СтруктураОтбора);
			ТекстФильтра = ТекстФильтра + "
			|	И ДоговорыКонтрагентов." + ИмяРеквизита + " " + ВидСравненияЗапроса + " (&" + ИмяРеквизита + ")";
			Запрос.УстановитьПараметр(ИмяРеквизита, СтруктураОтбора.ЗначениеОтбора);
		КонецЦикла;
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойДоговор = Выборка.Приоритет = 1;
		НайденОдинДоговор     = Выборка.Количество() = 1;
		
		Если НайденОсновнойДоговор ИЛИ НайденОдинДоговор Тогда
			НовыйДоговор = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ДоговорКонтрагента.Владелец <> ВладелецДоговора ИЛИ ДоговорКонтрагента.Организация <> ГоловнаяОрганизацияДоговора) 
		ИЛИ (НЕ ЗначениеЗаполнено(ДоговорКонтрагента)) Тогда	
		ДоговорКонтрагента = НовыйДоговор;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ПРИ ПРОВЕДЕНИИ ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ ДОКУМЕНТОВ

// Проверяет возможность проведения в регламентированном учете в зависимости от договора взаиморасчетов.
//
Функция ПроверкаВозможностиПроведенияВ_БУ_НУ(СтруктураШапкиДокумента, ДоговорКонтрагента,
	                                         Отказ = Ложь, Заголовок,ДополнениеКСообщению = "") Экспорт
	
    Если СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" Тогда
		ЭтоДокументОплаты = Ложь;
	иначе
		ЭтоДокументОплаты = 
			БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(
			СтруктураШапкиДокумента.ВидДокумента).Направление <> Неопределено;
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) тогда
		Возврат Истина;
	КонецЕсли;

	ВалютаВзаиморасчетов     = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РасчетыВУсловныхЕдиницах = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаДокумента 
		И СтруктураШапкиДокумента.ВалютаРегламентированногоУчета <> СтруктураШапкиДокумента.ВалютаДокумента Тогда

		//Документ выписан в валюте отличной от валюты регламентированного учета и валюты расчетов. Возможно только в документах оплаты.
		ОбщегоНазначения.СообщитьОбОшибке(
			ДополнениеКСообщению + " Валюта документа (" + СтруктураШапкиДокумента.ВалютаДокумента 
			+ ") отличается от валюты регламентированного учета (" + СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
			+ ") и валюты расчетов по договору """ + ДоговорКонтрагента + """ (" + ВалютаВзаиморасчетов + ")." + Символы.ПС
			+ "Документ не может быть проведен.",
			Отказ, Заголовок);

		Возврат Ложь;

	ИначеЕсли СтруктураШапкиДокумента.ВалютаДокумента = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда

		Если (ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета) И НЕ РасчетыВУсловныхЕдиницах Тогда

			//Документ выписан в валюте регламентированного учета. Валюта расчетов иная. Договор не в у.е. 
			ОбщегоНазначения.СообщитьОбОшибке(
				ДополнениеКСообщению + " Валюта расчетов по договору """ + ДоговорКонтрагента + """ (" + ВалютаВзаиморасчетов 
				+ ") отличается от валюты регламентированного учета (" + СтруктураШапкиДокумента.ВалютаРегламентированногоУчета 
				+ ")." + Символы.ПС
				+ "В этом случае документы могут быть выписаны в валюте регламентированного учета"
				+ "только при расчетах в условных единицах." + Символы.ПС 
				+ "Документ не может быть проведен.", Отказ, Заголовок);

			Возврат Ложь;

		КонецЕсли;

	Иначе

		//Валюта документа равна валюте взаиморасчетов (отличной от валюты  рег. учета)	
		Если РасчетыВУсловныхЕдиницах И ЭтоДокументОплаты Тогда 

			//При расчетах в у.е. документы оплаты могут выписываться только в валюте рег.учета
			ОбщегоНазначения.СообщитьОбОшибке(
				ДополнениеКСообщению + " Документ оплаты при расчете по договору (" + ДоговорКонтрагента 
				+ ")в условных единицах " + Символы.ПС
				+ " может быть выписан только в валюте регламентированного учета (" 
				+ СтруктураШапкиДокумента.ВалютаРегламентированногоУчета + ")." + Символы.ПС
				+ "Документ не может быть проведен по бухгалтерскому или налоговому учету.", 
				Отказ, Заголовок);

			Возврат Ложь;

		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции // ПроверкаВозможностиПроведенияВРеглУчете()

// Для документов, у которых договор контрагента находится в табличной части
// что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//
// Параметры:
//  ДокументОбъект    - объект проводимого документа, 
//  ИмяТабличнойЧасти - табличная часть документа,
//  ТаблицаЗначений   - таблица значений, содержащая данные табличной части,
//  Отказ             - флаг отказа в проведении,
//  Заголовок         - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ТаблицаЗначений, 
													Отказ, Заголовок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
	
	КэшГоловныхОрганизаций = Новый Соответствие;
	ГоловнаяОрганизацияДокумента = ОбщегоНазначения.ГоловнаяОрганизация(ДокументОбъект.Организация);
	КэшГоловныхОрганизаций.Вставить(ДокументОбъект.Организация, ГоловнаяОрганизацияДокумента);
	
	Для каждого СтрокаТаблицы Из ТаблицаЗначений Цикл

		СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
									   """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";

		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			
			ГоловнаяОрганизацияДоговора = КэшГоловныхОрганизаций[СтрокаТаблицы.ДоговорОрганизация];
			Если ГоловнаяОрганизацияДоговора = Неопределено Тогда
				ГоловнаяОрганизацияДоговора = ОбщегоНазначения.ГоловнаяОрганизация(СтрокаТаблицы.ДоговорОрганизация);
				КэшГоловныхОрганизаций.Вставить(СтрокаТаблицы.ДоговорОрганизация, ГоловнаяОрганизацияДоговора);
			КонецЕсли;
			
			Если ГоловнаяОрганизацияДокумента <> ГоловнаяОрганизацияДоговора Тогда
				ОбщегоНазначения.СообщитьОбОшибке(
					"В строке номер "+ СокрЛП(СтрокаТаблицы.НомерСтроки) + " табличной части """ + ПредставлениеТабличнойЧасти + """
					|	выбран договор, не соответствующий организации, указанной в шапке документа.", Отказ, Заголовок);
			КонецЕсли;
				
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПроверитьОрганизациюДоговораВзаиморасчетовВТабличнойЧасти()

// Проверяет, что организация в документе совпадает с организацией, указанной в договоре взаиморасчетов.
//  при несовпадении устанавливается флаг отказа в проведении.
//
// Параметры:
//  Организация           - ссылка на организацию, выбранную в документе,
//  ДоговорКонтрагента - ссылка на договор, выбранный в документе,
//  ДоговорОрганизация    - ссылка на Организацию, выбранную в договоре,
//  Отказ                 - флаг отказа в проведении.
//  Заголовок             - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов(Организация, ДоговорКонтрагента, 
	                                                             ДоговорОрганизация, Отказ, Заголовок) Экспорт

	// Если не заполнен договор или организация, то не ругаемся.
	Если ЗначениеЗаполнено(Организация) 
	   И ЗначениеЗаполнено(ДоговорКонтрагента)
	   И ОбщегоНазначения.ГоловнаяОрганизация(Организация) <> ДоговорОрганизация Тогда

		ОбщегоНазначения.СообщитьОбОшибке("Выбран договор контрагента, не соответствующий организации, указанной в документе!", Отказ, Заголовок);

	КонецЕсли;

КонецПроцедуры // ПроверитьСоответствиеОрганизацииДоговоруВзаиморасчетов()

// Возвращает вид договора с контрагентом по виду операции
//
Функция ОпределитьВидДоговораСКонтрагентом(ВидОперации = Неопределено) Экспорт

	СПоставщиком = Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	СПокупателем = Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);

	Прочее = Новый СписокЗначений;
	Прочее.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

	Если ЗначениеЗаполнено(ВидОперации) тогда

		//Определение вида операции

		ВидДоговораПоВидуОпераций = Новый Соответствие();

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю,СПокупателем);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика,СПоставщиком);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя,СПокупателем);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика,СПоставщиком);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам,Прочее);
		ВидДоговораПоВидуОпераций.Вставить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами,Прочее);

		ВидДоговора = ВидДоговораПоВидуОпераций[ВидОперации];

		Если НЕ ВидДоговора = Неопределено Тогда
			Возврат ВидДоговора;
		Иначе
			Возврат Новый СписокЗначений;

		КонецЕсли;

	Иначе

		Возврат Новый СписокЗначений;

	Конецесли;

КонецФункции // ОпределитьВидДоговораСКонтрагентом()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАЧЕТА АВАНСА, ПОГАШЕНИЯ ЗАДОЛЖЕННОСТИ ПО РАСЧЕТАМ С КОНТРАГЕНТАМИ

Функция ПодготовитьСтруктуруПараметровЗачетаАванса(СтруктураШапкиДокумента, СуммаВключаетНДС, ОпределятьСостояниеРасчетов = Истина)

	Перем ВидОперации;
	
	ОпределятьСостояниеРасчетов = ОпределятьСостояниеРасчетов 
		И ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(
			СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОпределятьСостояниеРасчетов", ОпределятьСостояниеРасчетов);
	
	СтруктураПараметров.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	СтруктураШапкиДокумента.Свойство("ВидОперации", ВидОперации);
	СтруктураНаправленияДвижения = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаПриобретенияРеализации(
		СтруктураШапкиДокумента.ВидДокумента, ВидОперации);
		
	НаправлениеДвижения = СтруктураНаправленияДвижения.Направление;
	СтруктураПараметров.Вставить("НаправлениеДвижения", НаправлениеДвижения);
	
	ЭтоВозврат          = (СтруктураНаправленияДвижения.РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);
	СтруктураПараметров.Вставить("ЭтоВозврат", ЭтоВозврат);
	
	СчетРасчетов = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	СчетАвансов  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
	Если ЭтоВозврат И НаправлениеДвижения = "Поступление" Тогда
		СтруктураПараметров.Вставить("СчетАвансов",  СчетРасчетов);
		СтруктураПараметров.Вставить("СчетРасчетов", СчетАвансов);
	Иначе
		СтруктураПараметров.Вставить("СчетАвансов",  СчетАвансов);
		СтруктураПараметров.Вставить("СчетРасчетов", СчетРасчетов);
	КонецЕсли;
	
	УчитыватьЗадолженностьУСН = СтруктураШапкиДокумента.ОрганизацияПрименяетУСН
		И СтруктураШапкиДокумента.Свойство("ВидДоговора")
		И (СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			ИЛИ СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СтруктураПараметров.Вставить("УчитыватьЗадолженностьУСН", УчитыватьЗадолженностьУСН);
	
	РасчетыВВалюте = (СтруктураШапкиДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета);
	СтруктураПараметров.Вставить("РасчетыВВалюте", РасчетыВВалюте);
	
	Если РасчетыВВалюте И НЕ СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах Тогда
	
		НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Получить();
		// Параметр используется при зачете аванса, а также при проведении переоценки валютных средств
		СтруктураШапкиДокумента.Вставить("ОцениватьДоходыИРасходыВНУПоКурсуАвансов", 
			ЗначениеЗаполнено(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов)
			И (НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов <= СтруктураШапкиДокумента.Дата));
	
	Иначе
	
		СтруктураШапкиДокумента.Вставить("ОцениватьДоходыИРасходыВНУПоКурсуАвансов", Ложь);
	
	КонецЕсли;
	
	
	Возврат СтруктураПараметров;

КонецФункции // ПодготовитьСтруктуруПараметровПогашенияЗадолженности()

Функция ПодготовитьТаблицуСуммДокументаПоступленияРеализации(СтруктураШапкиДокумента, ТаблицыДокумента, СтруктураПараметров, Отказ, Заголовок)
	
	НалоговыйАгентНДС  = СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС И СтруктураШапкиДокумента.ВидДокумента <> "ОтчетКомитентуОПродажах";
	
	ИсключатьНДСИзСуммы = НалоговыйАгентНДС И СтруктураПараметров.СуммаВключаетНДС;
	ВключатьНДСВСумму   = (НЕ НалоговыйАгентНДС) И (НЕ СтруктураПараметров.СуммаВключаетНДС);
	
	ЕстьПодразделениеВШапке = СтруктураШапкиДокумента.Свойство("ПодразделениеОрганизации");
	
	УчитыватьЗадолженностьУСН = СтруктураПараметров.УчитыватьЗадолженностьУСН;
	РасчетыВВалюте            = СтруктураПараметров.РасчетыВВалюте;
	
	ТаблицаСуммДокумента = Новый ТаблицаЗначений;
	ТаблицаСуммДокумента.Колонки.Добавить("ПодразделениеИзТабЧасти",  Новый ОписаниеТипов("Булево"));
	ТаблицаСуммДокумента.Колонки.Добавить("ПодразделениеОрганизации", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаСуммДокумента.Колонки.Добавить("Сумма",                    ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСуммДокумента.Колонки.Добавить("СуммаВал",                 ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСуммДокумента.Колонки.Добавить("НДС",                      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаСуммДокумента.Колонки.Добавить("НДСВал",                   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	
	Если УчитыватьЗадолженностьУСН Тогда
		ТаблицаСуммДокумента.Колонки.Добавить("ЭтоДоходЕНВД",      Новый ОписаниеТипов("Булево"));
		ТаблицаСуммДокумента.Колонки.Добавить("ЭтоДоходКомитента", Новый ОписаниеТипов("Булево"));
		СтрокаДляГруппировки = "ПодразделениеИзТабЧасти, ПодразделениеОрганизации,ЭтоДоходЕНВД, ЭтоДоходКомитента";
	Иначе
		СтрокаДляГруппировки = "ПодразделениеИзТабЧасти, ПодразделениеОрганизации";
	КонецЕсли;
	СтрокаДляСуммирования = "Сумма, СуммаВал, НДС, НДСВал";
	
	Для каждого Таб из ТаблицыДокумента Цикл
		
		ТекущаяТаблица = Таб.Значение;
		
		ИменаСвойств = "Сумма";
		Если СтруктураПараметров.РасчетыВВалюте Тогда
			ИменаСвойств = ИменаСвойств + ", СуммаВал";
		КонецЕсли;
		
		ЕстьКолонкаПодразделение = (ТекущаяТаблица.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено);
		Если ЕстьКолонкаПодразделение Тогда
			ИменаСвойств = ИменаСвойств + ", ПодразделениеОрганизации";
		КонецЕсли;
		
		Если НЕ (ЕстьКолонкаПодразделение ИЛИ ЕстьПодразделениеВШапке) Тогда
			
			ОбщегоНазначения.СообщитьИнформациюПользователю(
				"Документ " + СтруктураШапкиДокумента.ВидДокумента + ": нет свойства ПодразделениеОрганизации в структуре шапки и в табличной части " + Таб.Ключ);
			
		КонецЕсли;
		
		ЕстьКолонкаНДС = (ТекущаяТаблица.Колонки.Найти("НДС") <> Неопределено);
		Если ЕстьКолонкаНДС 
			И (ВключатьНДСВСумму ИЛИ ИсключатьНДСИзСуммы) 
			Тогда
			ИменаСвойств = ИменаСвойств + ", НДС";
			Если СтруктураПараметров.РасчетыВВалюте Тогда
				ИменаСвойств = ИменаСвойств + ", НДСВал";
			КонецЕсли;
		КонецЕсли;
		
		Если УчитыватьЗадолженностьУСН Тогда
			ИменаСвойств = ИменаСвойств + ", ЭтоДоходЕНВД, ЭтоДоходКомитента";
		КонецЕсли;
		
		Для каждого СтрокаТекТаблицы Из ТекущаяТаблица Цикл
		
			СтрокаСуммы = ТаблицаСуммДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСуммы, СтрокаТекТаблицы, ИменаСвойств);
			СтрокаСуммы.ПодразделениеИзТабЧасти = ЕстьКолонкаПодразделение;
		
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаСуммДокумента.Свернуть(СтрокаДляГруппировки, СтрокаДляСуммирования);
	
	Для каждого СтрокаСуммы Из ТаблицаСуммДокумента Цикл
	
		Если НЕ ЗначениеЗаполнено(СтрокаСуммы.ПодразделениеОрганизации)
			И (НЕ СтрокаСуммы.ПодразделениеИзТабЧасти) 
			И ЕстьПодразделениеВШапке 
			Тогда
			СтрокаСуммы.ПодразделениеОрганизации = СтруктураШапкиДокумента.ПодразделениеОрганизации;
		КонецЕсли;
		
		Если ИсключатьНДСИзСуммы Тогда
		
			СтрокаСуммы.Сумма = СтрокаСуммы.Сумма - СтрокаСуммы.НДС;
			Если РасчетыВВалюте Тогда
				СтрокаСуммы.СуммаВал = СтрокаСуммы.СуммаВал - СтрокаСуммы.НДСВал;
			КонецЕсли;
		
		ИначеЕсли ВключатьНДСВСумму Тогда
		
			СтрокаСуммы.Сумма = СтрокаСуммы.Сумма + СтрокаСуммы.НДС;
			Если РасчетыВВалюте Тогда
				СтрокаСуммы.СуммаВал = СтрокаСуммы.СуммаВал + СтрокаСуммы.НДСВал;
			КонецЕсли;
			
		КонецЕсли;
	
		Если (НЕ РасчетыВВалюте) Тогда
			СтрокаСуммы.СуммаВал = СтрокаСуммы.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСуммДокумента.Колонки.Сумма.Имя    = "СуммаБУ";
	ТаблицаСуммДокумента.Колонки.СуммаВал.Имя = "СуммаВзаиморасчетов";
	
	Если УчитыватьЗадолженностьУСН Тогда
		
		ТаблицаСуммДокумента.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаСуммДокумента.Колонки.Добавить("СуммаБУ_ЕНВД",                 ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаСуммДокумента.Колонки.Добавить("СуммаВзаиморасчетовКомитента", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаСуммДокумента.Колонки.Добавить("СуммаБУ_Комитента",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаСуммы Из ТаблицаСуммДокумента Цикл
		    Если СтрокаСуммы.ЭтоДоходЕНВД Тогда
				СтрокаСуммы.СуммаВзаиморасчетовЕНВД = СтрокаСуммы.СуммаВзаиморасчетов;
				СтрокаСуммы.СуммаБУ_ЕНВД            = СтрокаСуммы.СуммаБУ;
			КонецЕсли;
		    Если СтрокаСуммы.ЭтоДоходКомитента Тогда
				СтрокаСуммы.СуммаВзаиморасчетовКомитента = СтрокаСуммы.СуммаВзаиморасчетов;
				СтрокаСуммы.СуммаБУ_Комитента            = СтрокаСуммы.СуммаБУ;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаДляСуммирования = "СуммаБУ, СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаБУ_ЕНВД, СуммаВзаиморасчетовКомитента, СуммаБУ_Комитента";
		
	Иначе
		СтрокаДляСуммирования = "СуммаБУ, СуммаВзаиморасчетов";
	КонецЕсли;
	
	ТаблицаСуммДокумента.Свернуть("ПодразделениеОрганизации", СтрокаДляСуммирования);
		
	Возврат ТаблицаСуммДокумента;
	
КонецФункции

Функция ПолучитьТаблицуОстатковАванса(СтруктураШапкиДокумента, ТаблицаРасчетыСКонтрагентом, СтруктураПараметров, Отказ, Заголовок)
	
	Перем ДокументРасчетов;
	
	ЗачитыватьАванс = СтруктураШапкиДокумента.Свойство("СпособЗачетаАвансов")
		И (СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.НеЗачитывать)
		И ЗначениеЗаполнено(СтруктураПараметров.СчетАвансов);
	
	Если НЕ ЗачитыватьАванс Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	// Зачитываются авансы, которые учитываются на любом подразделении в рамках одного контрагента и договора
	
	Запрос = Новый Запрос;
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", 
			"РегистрБухгалтерии", "Хозрасчетный");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, СтруктураШапкиДокумента.Контрагент);
		ЗначенияБлокировки.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, СтруктураШапкиДокумента.ДоговорКонтрагента);
		ЗначенияБлокировки.Вставить("Счет", СтруктураПараметров.СчетАвансов);
		Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
			СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаРасчетыСКонтрагентом);
			ОписаниеИсточника = Новый Соответствие;
			ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ДокументРасчетов");
		КонецЕсли;
		
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
				
	КонецЕсли;

	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ГраницаОстатков = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	
	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов", ВидыСубконтоРасчетов);
	
	Запрос.УстановитьПараметр("СчетАвансов",        СтруктураПараметров.СчетАвансов);
	Запрос.УстановитьПараметр("Контрагент",         СтруктураШапкиДокумента.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", СтруктураШапкиДокумента.ДоговорКонтрагента);
	Если СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу Тогда
		МассивДокументовРасчетов = ТаблицаРасчетыСКонтрагентом.ВыгрузитьКолонку("ДокументРасчетов");
		МассивДокументовРасчетов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументовРасчетов);
		Запрос.УстановитьПараметр("МассивДокументовРасчетов", МассивДокументовРасчетов);
	КонецЕсли;
	
	ЗнакОстатков = ?(СтруктураПараметров.НаправлениеДвижения = "Выбытие", -1, 1);
	Запрос.УстановитьПараметр("ЗнакОстатков", ЗнакОстатков);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Остатки.Счет КАК Счет,
	|	Остатки.Валюта КАК Валюта,
	|	Остатки.Субконто1 КАК Контрагент,
	|	Остатки.Субконто2 КАК ДоговорКонтрагента,
	|	Остатки.Субконто3 КАК ДокументРасчетов,
	|	ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	ВЫБОР
	|		КОГДА Остатки.Счет.Валютный
	|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &ЗнакОстатков
	|		ИНАЧЕ Остатки.СуммаОстаток * &ЗнакОстатков
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	Остатки.СуммаОстаток * &ЗнакОстатков КАК СуммаБУ,
	|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &ЗнакОстатков КАК СуммаНУ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет = &СчетАвансов,
	|			&ВидыСубконтоРасчетов,
	|			Организация = &Организация
	|				И Субконто1 = &Контрагент
	|				И Субконто2 = &ДоговорКонтрагента
	|				И Субконто3 В (&МассивДокументовРасчетов)) КАК Остатки
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки";

	Если (СтруктураШапкиДокумента.СпособЗачетаАвансов <> Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И Субконто3 В (&МассивДокументовРасчетов)", "");
	КонецЕсли;
	
	ТаблицаОстатковАвансов = Запрос.Выполнить().Выгрузить();
	БухгалтерскийУчетРасчетовСКонтрагентами.УпорядочитьТаблицуПоДокументу(ТаблицаОстатковАвансов, "ДокументРасчетов");
	
	ТаблицаОстатковАвансов = ДополнитьТаблицуОстатковАвансаВзаиморасчетамиУСН(
		ТаблицаОстатковАвансов, СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок);
		
	Возврат ТаблицаОстатковАвансов;
	
КонецФункции

Функция ДополнитьТаблицуОстатковАвансаВзаиморасчетамиУСН(ТаблицаОстатков, СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок)

	Если (НЕ СтруктураПараметров.УчитыватьЗадолженностьУСН) Тогда
		Возврат ТаблицаОстатков; 
	КонецЕсли;
		
	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ_ЕНВД",                 ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОстатков.Колонки.Добавить("СуммаВзаиморасчетовКомитента", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаОстатков.Колонки.Добавить("СуммаБУ_Комитента",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
	Если НЕ СтруктураПараметров.ЭтоВозврат Тогда
		Возврат ТаблицаОстатков; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", 
			"РегистрБухгалтерии", "Хозрасчетный");
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаОстатков);
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
		ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
		ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ДокументРасчетов");
		
		ВыборкаСчетовУСН = ПланыСчетов.Хозрасчетный.Выбрать(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
		Пока ВыборкаСчетовУСН.Следующий() Цикл
			ЗначенияБлокировки.Вставить("Счет", ВыборкаСчетовУСН.Ссылка); 
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЦикла;
				
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ГраницаОстатков = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	
	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов", ВидыСубконтоРасчетов);
	
	МассивКонтрагентов = ТаблицаОстатков.ВыгрузитьКолонку("Контрагент");
	МассивКонтрагентов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	МассивДоговоров    = ТаблицаОстатков.ВыгрузитьКолонку("ДоговорКонтрагента");
	МассивДоговоров    = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	МассивДокументов   = ТаблицаОстатков.ВыгрузитьКолонку("ДокументРасчетов");
	МассивДокументов   = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиУСН.РасчетыВВалюте,
	|	ОстаткиУСН.Контрагент,
	|	ОстаткиУСН.ДоговорКонтрагента,
	|	ОстаткиУСН.ДокументРасчетов,
	|	ОстаткиУСН.Подразделение,
	|	СУММА(ОстаткиУСН.СуммаВзаиморасчетовЕНВД) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ОстаткиУСН.СуммаБУ_ЕНВД) КАК СуммаБУ_ЕНВД,
	|	СУММА(ОстаткиУСН.СуммаВзаиморасчетовКомитента) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ОстаткиУСН.СуммаБУ_Комитента) КАК СуммаБУ_Комитента
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Счет.Валютный КАК РасчетыВВалюте,
	|		Остатки.Субконто1 КАК Контрагент,
	|		Остатки.Субконто2 КАК ДоговорКонтрагента,
	|		Остатки.Субконто3 КАК ДокументРасчетов,
	|		ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВзаиморасчетовЕНВД,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|					ИЛИ Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБУ_ЕНВД,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВзаиморасчетовКомитента,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|					ИЛИ Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБУ_Комитента
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ГраницаОстатков,
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНВспомогательныеСчета)),
	|				&ВидыСубконтоРасчетов,
	|				Организация = &Организация
	|					И Субконто1 В (&МассивКонтрагентов)
	|					И Субконто2 В (&МассивДоговоров)
	|					И Субконто3 В (&МассивДокументов)) КАК Остатки
	|	
	|	ДЛЯ ИЗМЕНЕНИЯ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки) КАК ОстаткиУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУСН.РасчетыВВалюте,
	|	ОстаткиУСН.Контрагент,
	|	ОстаткиУСН.ДоговорКонтрагента,
	|	ОстаткиУСН.ДокументРасчетов,
	|	ОстаткиУСН.Подразделение";
	
	ТаблицаОстатковУСН = Запрос.Выполнить().Выгрузить();
	
	ТаблицаОстатков.Индексы.Добавить("Контрагент, ДоговорКонтрагента, ДокументРасчетов, Подразделение");
	
	Для каждого СтрокаОстаткаУСН Из ТаблицаОстатковУСН Цикл
	
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",         СтрокаОстаткаУСН.Контрагент);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаОстаткаУСН.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("ДокументРасчетов",   СтрокаОстаткаУСН.ДокументРасчетов);
		СтруктураОтбора.Вставить("Подразделение",      СтрокаОстаткаУСН.Подразделение);
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиОстатков.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОстатка = СтрокиОстатков[0];
		
		ЗаполнитьЗначенияСвойств(СтрокаОстатка, СтрокаОстаткаУСН, "СуммаВзаиморасчетовЕНВД, СуммаБУ_ЕНВД, СуммаВзаиморасчетовКомитента, СуммаБУ_Комитента");
	
	КонецЦикла;
	
	Возврат ТаблицаОстатков; 
	
КонецФункции // ДополнитьТаблицуОстатковАвансаВзаиморасчетамиУСН()

Процедура ДобавитьСтрокиЗачетаАванса(ТаблицаВзаиморасчетов, СуммаДляЗачета, ТаблицаОстатковАвансов, СтрокаСуммыДокумента, СтруктураШапкиДокумента, СтруктураПараметров)

	Для каждого СтрокаОстатка из ТаблицаОстатковАвансов Цикл
		
		Если СуммаДляЗачета <= 0 Тогда
			Прервать;
		КонецЕсли;

		ЗачитываемыйАванс = Мин(СуммаДляЗачета, СтрокаОстатка.СуммаВзаиморасчетов);
		
		Если ЗачитываемыйАванс <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
		
		СтрокаВзаиморасчетов.СчетУчета             = СтрокаОстатка.Счет;
		СтрокаВзаиморасчетов.Контрагент            = СтрокаОстатка.Контрагент;
		СтрокаВзаиморасчетов.ДоговорКонтрагента    = СтрокаОстатка.ДоговорКонтрагента;
		СтрокаВзаиморасчетов.ВалютаВзаиморасчетов  = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
		СтрокаВзаиморасчетов.Подразделение         = СтрокаОстатка.Подразделение;
		СтрокаВзаиморасчетов.ПодразделениеРасчетов = СтрокаСуммыДокумента.ПодразделениеОрганизации;
		СтрокаВзаиморасчетов.ДокументРасчетов      = СтрокаОстатка.ДокументРасчетов;
		СтрокаВзаиморасчетов.ДатаДокументаРасчетов = СтрокаОстатка.ДатаДокументаРасчетов;
		
		СтрокаВзаиморасчетов.ОстатокВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов;
		СтрокаВзаиморасчетов.СуммаВзаиморасчетов   = ЗачитываемыйАванс;

		Если СтруктураПараметров.РасчетыВВалюте Тогда
			СтрокаВзаиморасчетов.СуммаБУ = Окр(
				ЗачитываемыйАванс * СтрокаОстатка.СуммаБУ / СтрокаОстатка.СуммаВзаиморасчетов, 2);
		Иначе
			СтрокаВзаиморасчетов.СуммаБУ = ЗачитываемыйАванс;
		КонецЕсли;
		
		Если СтруктураШапкиДокумента.ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
			СтрокаВзаиморасчетов.СуммаНУ = Окр(
				ЗачитываемыйАванс * СтрокаОстатка.СуммаНУ / СтрокаОстатка.СуммаВзаиморасчетов, 2);
		Иначе
			СтрокаВзаиморасчетов.СуммаНУ = СтрокаВзаиморасчетов.СуммаБУ;
		КонецЕсли;
		
		Если СтруктураПараметров.УчитыватьЗадолженностьУСН И СтруктураПараметров.ЭтоВозврат Тогда
			// При возврате уменьшаем суммы взаиморасчетов по ЕНВД и по комитенту на суммы фактически возвращенного,
			// но не больше остатка по счету УСН.хх
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД = Мин(
				СтрокаСуммыДокумента.СуммаВзаиморасчетовЕНВД, СтрокаОстатка.СуммаВзаиморасчетовЕНВД);
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД = Макс(0, СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД);
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Мин(
				СтрокаСуммыДокумента.СуммаВзаиморасчетовКомитента, СтрокаОстатка.СуммаВзаиморасчетовКомитента);
			СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Макс(0, СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента);
			
			Если СтруктураПараметров.РасчетыВВалюте Тогда
				СтрокаВзаиморасчетов.СуммаБУ_ЕНВД = ?(СтрокаОстатка.СуммаВзаиморасчетовЕНВД = 0,
					0,
					Окр(СтрокаОстатка.СуммаБУ_ЕНВД * СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД 
						/ СтрокаОстатка.СуммаВзаиморасчетовЕНВД, 2));
				СтрокаВзаиморасчетов.СуммаБУ_Комитента = ?(СтрокаОстатка.СуммаВзаиморасчетовКомитента = 0,
					0,
					Окр(СтрокаОстатка.СуммаБУ_Комитента * СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента 
						/ СтрокаОстатка.СуммаВзаиморасчетовКомитента, 2));
			Иначе
				СтрокаВзаиморасчетов.СуммаБУ_ЕНВД      = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				СтрокаВзаиморасчетов.СуммаБУ_Комитента = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			КонецЕсли;
			
			СтрокаОстатка.СуммаВзаиморасчетовЕНВД = 
				СтрокаОстатка.СуммаВзаиморасчетовЕНВД - СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
			СтрокаОстатка.СуммаБУ_ЕНВД            = 
				СтрокаОстатка.СуммаБУ_ЕНВД - СтрокаВзаиморасчетов.СуммаБУ_ЕНВД;
			
			СтрокаОстатка.СуммаВзаиморасчетовКомитента = 
				СтрокаОстатка.СуммаВзаиморасчетовКомитента - СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
			СтрокаОстатка.СуммаБУ_Комитента            = 
				СтрокаОстатка.СуммаБУ_Комитента - СтрокаВзаиморасчетов.СуммаБУ_Комитента;
			
		КонецЕсли;
		
		СуммаДляЗачета = СуммаДляЗачета - ЗачитываемыйАванс;
		
		СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
		СтрокаОстатка.СуммаБУ             = СтрокаОстатка.СуммаБУ - СтрокаВзаиморасчетов.СуммаБУ;
		СтрокаОстатка.СуммаНУ             = СтрокаОстатка.СуммаНУ - СтрокаВзаиморасчетов.СуммаНУ;

	КонецЦикла;

КонецПроцедуры

Функция ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, СтруктураПараметров, Отказ, Заголовок)

	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("СчетУчета",             Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ПодразделениеРасчетов", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента",    Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаБУ",               ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	УчитыватьЗадолженностьУСН = СтруктураПараметров.УчитыватьЗадолженностьУСН;
	
	Если УчитыватьЗадолженностьУСН Тогда
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаБУ_ЕНВД",                 ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовКомитента", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаБУ_Комитента",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	КонецЕсли;
	
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаНУ", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	Если НЕ СтруктураПараметров.ОпределятьСостояниеРасчетов Тогда
		Возврат ТаблицаВзаиморасчетов; 
	КонецЕсли;
	
	Организация          = СтруктураШапкиДокумента.Организация;
	Контрагент           = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента   = СтруктураШапкиДокумента.ДоговорКонтрагента;
	
	ВалютаВзаиморасчетов     = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
	РасчетыВВалюте           = СтруктураПараметров.РасчетыВВалюте;
	
	ТаблицаСуммДокумента = ПодготовитьТаблицуСуммДокументаПоступленияРеализации(
		СтруктураШапкиДокумента, ТаблицыДокумента, СтруктураПараметров, Отказ, Заголовок);
		
	Если ТаблицаСуммДокумента.Итог("СуммаВзаиморасчетов") = 0 Тогда 
		Возврат ТаблицаВзаиморасчетов; 
	КонецЕсли;
	
	ТаблицаОстатковАвансов = ПолучитьТаблицуОстатковАванса(
		СтруктураШапкиДокумента, ТаблицаЗачетаАвансов, СтруктураПараметров, Отказ, Заголовок);
	
	Если СтруктураШапкиДокумента.Свойство("СуммаУменьшенияЗачетаАванса") Тогда
		СуммаУменьшенияЗачетаАванса = СтруктураШапкиДокумента.СуммаУменьшенияЗачетаАванса;
	Иначе
		СуммаУменьшенияЗачетаАванса = 0;
	КонецЕсли;
	
	Для каждого СтрокаСуммДокумента Из ТаблицаСуммДокумента Цикл
		
		УменьшениеЗачетаАвансаПоСтроке = Мин(СтрокаСуммДокумента.СуммаВзаиморасчетов, СуммаУменьшенияЗачетаАванса);
		
		СуммаУменьшенияЗачетаАванса = СуммаУменьшенияЗачетаАванса - УменьшениеЗачетаАвансаПоСтроке;
		
		ОстатокВзаиморасчетов = СтрокаСуммДокумента.СуммаВзаиморасчетов - УменьшениеЗачетаАвансаПоСтроке;
		
		Если (СтруктураШапкиДокумента.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.ПоДокументу) Тогда
		
			Для каждого СтрокаТаблицыЗачетаАвансов Из ТаблицаЗачетаАвансов Цикл
				
				Если СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов > 0 Тогда
					СуммаЗачетаПоДокументуАванса = СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов;
				Иначе
					СуммаЗачетаПоДокументуАванса = ОстатокВзаиморасчетов;
				КонецЕсли;
				
				ОстаткиПоДокументуАванса = ТаблицаОстатковАвансов.НайтиСтроки(
					Новый Структура("ДокументРасчетов", СтрокаТаблицыЗачетаАвансов.ДокументРасчетов));
					
				Если (ОстаткиПоДокументуАванса.Количество() = 0) Тогда
					
					Если (СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов > 0) Тогда 
						
						// Если указан документ для зачета аванса и указана сумма зачета,
						// при отсутствии остатков аванса по нему документ не проводим.
						ТекстОшибки = "По документу """ + СтрокаТаблицыЗачетаАвансов.ДокументРасчетов + """"
						+ " остатков авансов не обнаружено." + Символы.ПС
						+ Символы.Таб + "Указана сумма зачета: "
						+ СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов + " " + ВалютаВзаиморасчетов + "; "
						+ "Аванс не может быть зачтен.";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
						Возврат ТаблицаВзаиморасчетов;
						
					ИначеЕсли (НЕ СтруктураПараметров.ЭтоВозврат) Тогда
				
						// Если указан документ для зачета аванса, но сумма зачета не указана,
						// при отсутствии остатков аванса по нему документ проводим, но сообщаем информацию об этом пользователю.
						// Для документов возврата об отсутствии задолженности по документу поступления (отгрузки) не сообщаем.
						ТекстСообщения = "По документу """ + СтрокаТаблицыЗачетаАвансов.ДокументРасчетов + """"
						+ " остатков авансов не обнаружено." + Символы.ПС
						+ Символы.Таб + "Аванс по этому документу не зачитывается.";
						ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Информация);
						
					КонецЕсли;
				
				КонецЕсли;
					
				ДобавитьСтрокиЗачетаАванса(ТаблицаВзаиморасчетов, 
					СуммаЗачетаПоДокументуАванса, ОстаткиПоДокументуАванса, 
					СтрокаСуммДокумента, СтруктураШапкиДокумента, СтруктураПараметров);
					
				Если (СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов > 0) Тогда 
					
					// Если указан документ для зачета аванса и указана сумма зачета,
					// при нехватке остатков аванса по нему документ не проводим.
					Если (СуммаЗачетаПоДокументуАванса > 0) Тогда 
						
						ТекстОшибки = "Указана сумма зачета, превышающая остаток незачтенного аванса." + Символы.ПС
							+ Символы.Таб + "Документ аванса: """ + СтрокаТаблицыЗачетаАвансов.ДокументРасчетов + """" + Символы.ПС
							+ Символы.Таб + "Указана сумма зачета: " 
							+ СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов + " " + ВалютаВзаиморасчетов + "; "
							+ "Остаток аванса: " 
							+ (СтрокаТаблицыЗачетаАвансов.СуммаВзаиморасчетов - СуммаЗачетаПоДокументуАванса) + " " + ВалютаВзаиморасчетов + "; "
							+ "Превышение: " + СуммаЗачетаПоДокументуАванса + " " + ВалютаВзаиморасчетов;
						
						ОбщегоНазначения.СообщитьОбОшибке(ТекстОшибки, Отказ, Заголовок);
						Возврат ТаблицаВзаиморасчетов;
						
					КонецЕсли;
					
				Иначе
					
					ОстатокВзаиморасчетов = СуммаЗачетаПоДокументуАванса;
				
				КонецЕсли;
			
			КонецЦикла;
			
		Иначе 
		
			ДобавитьСтрокиЗачетаАванса(ТаблицаВзаиморасчетов, 
				ОстатокВзаиморасчетов, ТаблицаОстатковАвансов, 
				СтрокаСуммДокумента, СтруктураШапкиДокумента, СтруктураПараметров);
					
		КонецЕсли;
		
		НераспределенныйОстаток = ОстатокВзаиморасчетов + УменьшениеЗачетаАвансаПоСтроке;
		
		Если НераспределенныйОстаток > 0 Тогда
		
			СтрокаВзаиморасчетов = ТаблицаВзаиморасчетов.Добавить();
			
			СтрокаВзаиморасчетов.СчетУчета             = СтруктураПараметров.СчетРасчетов;
			СтрокаВзаиморасчетов.Контрагент            = Контрагент;
	        СтрокаВзаиморасчетов.ДоговорКонтрагента    = ДоговорКонтрагента;
			СтрокаВзаиморасчетов.ВалютаВзаиморасчетов  = ВалютаВзаиморасчетов;
			СтрокаВзаиморасчетов.Подразделение         = СтрокаСуммДокумента.ПодразделениеОрганизации;
			СтрокаВзаиморасчетов.ПодразделениеРасчетов = СтрокаСуммДокумента.ПодразделениеОрганизации;
			СтрокаВзаиморасчетов.ДокументРасчетов      = СтруктураШапкиДокумента.Ссылка;
			СтрокаВзаиморасчетов.ДатаДокументаРасчетов = СтруктураШапкиДокумента.Дата;
			
			СтрокаВзаиморасчетов.СуммаВзаиморасчетов = НераспределенныйОстаток;
		
			Если РасчетыВВалюте Тогда
				СтрокаВзаиморасчетов.СуммаБУ = Окр(
					НераспределенныйОстаток * СтрокаСуммДокумента.СуммаБУ / СтрокаСуммДокумента.СуммаВзаиморасчетов, 2);
			Иначе
				СтрокаВзаиморасчетов.СуммаБУ = НераспределенныйОстаток;
			КонецЕсли;
			
			СтрокаВзаиморасчетов.СуммаНУ = СтрокаВзаиморасчетов.СуммаБУ;
			
			Если УчитыватьЗадолженностьУСН И (НЕ СтруктураПараметров.ЭтоВозврат) Тогда
				
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД      = Окр(
					НераспределенныйОстаток * СтрокаСуммДокумента.СуммаВзаиморасчетовЕНВД / СтрокаСуммДокумента.СуммаВзаиморасчетов, 2);
				СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента = Окр(
					НераспределенныйОстаток * СтрокаСуммДокумента.СуммаВзаиморасчетовКомитента / СтрокаСуммДокумента.СуммаВзаиморасчетов, 2);
				Если РасчетыВВалюте Тогда
					СтрокаВзаиморасчетов.СуммаБУ_ЕНВД      = Окр(
						СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД * СтрокаСуммДокумента.СуммаБУ / СтрокаСуммДокумента.СуммаВзаиморасчетов, 2);
					СтрокаВзаиморасчетов.СуммаБУ_Комитента = Окр(
						СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента * СтрокаСуммДокумента.СуммаБУ / СтрокаСуммДокумента.СуммаВзаиморасчетов, 2);
				Иначе
					СтрокаВзаиморасчетов.СуммаБУ_ЕНВД      = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
					СтрокаВзаиморасчетов.СуммаБУ_Комитента = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаВзаиморасчетов;

КонецФункции

Процедура СформироватьДвиженияПоЗачетуАванса(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаВзаиморасчетов, СтруктураПараметров, Проводки, Отказ, Заголовок)

	Если НЕ СтруктураПараметров.ОпределятьСостояниеРасчетов Тогда
		Возврат;
	КонецЕсли;
			
	Организация = СтруктураШапкиДокумента.Организация;
	ДатаДока    = СтруктураШапкиДокумента.Дата;
	
	Контрагент         = СтруктураШапкиДокумента.Контрагент;
	ДоговорКонтрагента = СтруктураШапкиДокумента.ДоговорКонтрагента;
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	ВалютаВзаиморасчетов     = СтруктураШапкиДокумента.ВалютаВзаиморасчетов;
	ВалютаДокумента          = СтруктураШапкиДокумента.ВалютаДокумента;
	РасчетыВВалюте           = ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета;
	РасчетыВУсловныхЕдиницах = СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах;
	
	СчетРасчетов = СтруктураШапкиДокумента.СчетУчетаРасчетовСКонтрагентом;
	СчетАвансов  = СтруктураШапкиДокумента.СчетУчетаРасчетовПоАвансам;
	
	НаправлениеДвижения = СтруктураПараметров.НаправлениеДвижения;
	ЭтоВозврат          = СтруктураПараметров.ЭтоВозврат;

	ДтКтРасчетов = ?(НаправлениеДвижения = "Поступление", "Дт", "Кт");
	ДтКтАвансов  = ?(ДтКтРасчетов = "Дт", "Кт", "Дт");
	
	Если СтруктураШапкиДокумента.Свойство("ВидДоговора") Тогда
		ВидДоговора = СтруктураШапкиДокумента.ВидДоговора;
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") Тогда
		ВидДоговора = СтруктураШапкиДокумента.ДоговорКонтрагента.ВидДоговора;
	Иначе
		ВидДоговора = Неопределено;
	КонецЕсли;
	
	Если СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") 
		И СтруктураШапкиДокумента.Свойство("НалоговыйАгентПоОплате") Тогда
		
		ЭтоНалоговыйАгентПоОплате = СтруктураШапкиДокумента.УчетАгентскогоНДС 
									И СтруктураШапкиДокумента.НалоговыйАгентПоОплате;
	
	ИначеЕсли СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента") 
		И ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) Тогда
									
		ЭтоНалоговыйАгентПоОплате = СтруктураШапкиДокумента.ДоговорКонтрагента.УчетАгентскогоНДС 
									И СтруктураШапкиДокумента.ДоговорКонтрагента.НалоговыйАгентПоОплате;
									
	Иначе
		ЭтоНалоговыйАгентПоОплате = Ложь;
	КонецЕсли;
								
	Если НаправлениеДвижения = "Поступление" Тогда
		
		Если ЭтоВозврат Тогда
			СодержаниеОперации = "Выделение аванса (оплаченная часть при возвр.)";
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СодержаниеОперации = "Зачет аванса поставщику";
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СодержаниеОперации = "Зачет аванса комиссионеру (агенту)";
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СодержаниеОперации = "Зачет аванса комитенту (принципалу)";
		Иначе
			СодержаниеОперации = "Зачет аванса";
		КонецЕсли;
		
	Иначе //"Выбытие"
		
		Если ЭтоВозврат Тогда
			Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				СодержаниеОперации = "Возврат поставщику. Неоплаченная часть.";
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
				СодержаниеОперации = "Возврат комиссионеру (агенту). Неоплаченная часть.";
			ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СодержаниеОперации = "Возврат комитенту (принципалу). Неоплаченная часть.";
			Иначе
				СодержаниеОперации = "Возврат. Неоплаченная часть.";
			КонецЕсли;
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
			СодержаниеОперации = "Зачет аванса покупателя";
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СодержаниеОперации = "Зачет аванса комиссионера (агента)";
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СодержаниеОперации = "Зачет аванса комитента (принципала)";
		Иначе
			СодержаниеОперации = "Зачет аванса";
		КонецЕсли;
		
	КонецЕсли;
	
	КорректировкаСтоимостиПриЗачетеАвансов = 0;
	
	УчитыватьЗадолженностьУСН = СтруктураПараметров.УчитыватьЗадолженностьУСН;
	
	Для каждого СтрокаВзаиморасчетов Из ТаблицаВзаиморасчетов Цикл
		
		Если УчитыватьЗадолженностьУСН Тогда
			
			Если ЭтоВозврат Тогда
				ФормироватьПроводкиУСН = (СтрокаВзаиморасчетов.ДокументРасчетов <> СтруктураШапкиДокумента.Ссылка);
			Иначе
				ФормироватьПроводкиУСН = (СтрокаВзаиморасчетов.ДокументРасчетов = СтруктураШапкиДокумента.Ссылка);
			КонецЕсли; 
			
			Если ЭтоВозврат И (НаправлениеДвижения = "Поступление") Тогда
				ДтКтУСН = ?(ДтКтАвансов = "Дт", "Кт", "Дт");
				ЗнакСуммУСН = -1;
			Иначе
				ДтКтУСН = ДтКтАвансов;
				ЗнакСуммУСН = 1;
			КонецЕсли;
			
			Если ФормироватьПроводкиУСН И (СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД <> 0) Тогда
				
				Проводка = Проводки.Добавить();
			
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = ?(ЭтоВозврат, "Уменьшение задолженности по деятельности ЕНВД", "Задолженность по деятельности ЕНВД");
	
				Если РасчетыВВалюте Тогда
					Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
					Проводка["Валюта" + ДтКтУСН]        = ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтУСН] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовЕНВД;
				Иначе
					Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				Конецесли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Договоры", ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаВзаиморасчетов.Подразделение, ДтКтУСН);
				
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_ЕНВД * ЗнакСуммУСН;
			
			КонецЕсли;
			
			Если ФормироватьПроводкиУСН И (СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента <> 0) Тогда
				
				Проводка = Проводки.Добавить();
			
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = ?(ЭтоВозврат, "Уменьшение задолженности за товары и услуги комитента", "Задолженность за товары и услуги комитента");
	
				Если РасчетыВВалюте Тогда
					Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
					Проводка["Валюта" + ДтКтУСН]        = ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтУСН] = СтрокаВзаиморасчетов.СуммаВзаиморасчетовКомитента;
				Иначе
					Проводка["Счет" + ДтКтУСН]          = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				Конецесли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Контрагенты", Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "Договоры", ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтУСН], Проводка["Субконто" + ДтКтУСН], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаВзаиморасчетов.Подразделение, ДтКтУСН);
				
				Проводка.Сумма = СтрокаВзаиморасчетов.СуммаБУ_Комитента * ЗнакСуммУСН;
			
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ (ЭтоВозврат И (НаправлениеДвижения = "Поступление"))
			И (СтрокаВзаиморасчетов.ДокументРасчетов <> СтруктураШапкиДокумента.Ссылка) Тогда
			
			Проводка = Проводки.Добавить();

			Проводка.Период       = ДатаДока;
			Проводка.Организация  = Организация;
			Проводка.Содержание   = СодержаниеОперации;

			Проводка["Счет" + ДтКтРасчетов] = СчетРасчетов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтруктураШапкиДокумента.Ссылка);

			Проводка["Счет" + ДтКтАвансов] = СчетАвансов;
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "Контрагенты", СтрокаВзаиморасчетов.Контрагент);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "Договоры", СтрокаВзаиморасчетов.ДоговорКонтрагента);
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтАвансов], Проводка["Субконто" + ДтКтАвансов], "ДокументыРасчетовСКонтрагентами", СтрокаВзаиморасчетов.ДокументРасчетов);
			
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаВзаиморасчетов.ПодразделениеРасчетов, ДтКтРасчетов);
			БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаВзаиморасчетов.Подразделение, ДтКтАвансов);
			
			Если РасчетыВВалюте Тогда
				Проводка["Валюта" + ДтКтРасчетов]        = ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
				
				Проводка["Валюта" + ДтКтАвансов]        = ВалютаВзаиморасчетов;
				Проводка["ВалютнаяСумма" + ДтКтАвансов] = СтрокаВзаиморасчетов.СуммаВзаиморасчетов;
			Конецесли;
			
			СуммаБУ = СтрокаВзаиморасчетов.СуммаБУ;
			
			Если РасчетыВВалюте Тогда
				
				СуммаПоТекущемуКурсу = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаВзаиморасчетов.СуммаВзаиморасчетов,
					ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета, 
					СтруктураШапкиДокумента.КурсВзаиморасчетов, 1, 
					СтруктураШапкиДокумента.КратностьВзаиморасчетов, 1);
				
				Если ЭтоВозврат Тогда
				
					СуммаБУ = СуммаПоТекущемуКурсу;
				
				Иначе
					
					КорректировкаСтоимостиПриЗачетеАвансов = КорректировкаСтоимостиПриЗачетеАвансов + СуммаБУ - СуммаПоТекущемуКурсу;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Проводка.Сумма = СуммаБУ;
			
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
				
				Если РасчетыВВалюте И (НЕ РасчетыВУсловныхЕдиницах) Тогда
					
					Если СтруктураШапкиДокумента.ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
						СуммаНУРасчетов = СуммаБУ;
						СуммаНУАвансов  = ?(ЭтоВозврат, СуммаБУ, СтрокаВзаиморасчетов.СуммаНУ);
					Иначе
						СуммаНУРасчетов = СуммаПоТекущемуКурсу;
						СуммаНУАвансов  = СуммаПоТекущемуКурсу;
					КонецЕсли;
					
				Иначе
					
					СуммаНУРасчетов = СуммаБУ;
					СуммаНУАвансов  = СуммаБУ;
					
				КонецЕсли;
				
				Если ДтКтРасчетов = "Дт" Тогда
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						СуммаНУРасчетов, СуммаНУАвансов, Проводка.Сумма - СуммаНУРасчетов, Проводка.Сумма - СуммаНУАвансов, , , 
						Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
				Иначе
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
						СуммаНУАвансов, СуммаНУРасчетов, Проводка.Сумма - СуммаНУАвансов, Проводка.Сумма - СуммаНУРасчетов, , , 
						Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	Если РасчетыВУсловныхЕдиницах И КорректировкаСтоимостиПриЗачетеАвансов <> 0 Тогда
	
		Если ЭтоВозврат И (НЕ СтруктураШапкиДокумента.ОрганизацияПрименяетУСН) Тогда
			
			ТекущийКурс = ?( СтруктураШапкиДокумента.КратностьВзаиморасчетов = 0,
				0, СтруктураШапкиДокумента.КурсВзаиморасчетов / СтруктураШапкиДокумента.КратностьВзаиморасчетов);
			
			Если СтруктураШапкиДокумента.КурсВзаиморасчетовСделки = NULL 
				ИЛИ СтруктураШапкиДокумента.КратностьВзаиморасчетовСделки = NULL Тогда
				
				КурсСделкиОснования = ТекущийКурс;
				
			Иначе
			
				КурсСделкиОснования = ?( СтруктураШапкиДокумента.КратностьВзаиморасчетовСделки = 0,
					0, СтруктураШапкиДокумента.КурсВзаиморасчетовСделки / СтруктураШапкиДокумента.КратностьВзаиморасчетовСделки);
				
			КонецЕсли;
				
			Если ТекущийКурс <> КурсСделкиОснования Тогда
					
				ОбщегоНазначения.СообщитьОбОшибке(
					"По результатам определения состояния расчетов выявлено расхождение в курсах документов.
					|Распределение корректировки по движениям не может быть произведено, так как это противоречит методологии отражения возвратов.
					|Рекомендуется привести в соответствие курс документа возврата и курс документа "
					+ ?(НаправлениеДвижения = "Поступление","реализации", "приобретения") +" .", , Заголовок);
				
			КонецЕсли;
				
		ИначеЕсли ВалютаДокумента = ВалютаРегламентированногоУчета Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке(
				"По результатам зачета авансов выявлена необходимость корректировки сумм документа в размере "
				+ Формат(КорректировкаСтоимостиПриЗачетеАвансов, "ЧЦ=15;ЧДЦ=2") + " " + ВалютаРегламентированногоУчета + "
				|Распределение корректировки по движениям не может быть произведено, так как документ выписан в валюте регл.учета.
				|Отразите корректировки самостоятельно.", , Заголовок);

		Иначе
			
			БухгалтерскийУчетРасчетовСКонтрагентами.РаспределитьКорректировкуПриРасчетахВУсловныхЕдиницах(
				КорректировкаСтоимостиПриЗачетеАвансов, ТаблицыДокумента, СтруктураПараметров.СуммаВключаетНДС, 
				Отказ, Заголовок);

		КонецЕсли;
		
	ИначеЕсли РасчетыВВалюте И КорректировкаСтоимостиПриЗачетеАвансов <> 0 Тогда
		
		Если ЭтоНалоговыйАгентПоОплате Тогда
		
			БухгалтерскийУчетРасчетовСКонтрагентами.РаспределитьКорректировкуПриРасчетахВВалютеНалоговыйАгент(
				КорректировкаСтоимостиПриЗачетеАвансов, ТаблицыДокумента, СтруктураПараметров.СуммаВключаетНДС, 
				Отказ, Заголовок);
				
		Иначе
			
			БухгалтерскийУчетРасчетовСКонтрагентами.РаспределитьКорректировкуПриРасчетахВВалюте(
				КорректировкаСтоимостиПриЗачетеАвансов, ТаблицыДокумента, СтруктураПараметров.СуммаВключаетНДС, 
				Отказ, Заголовок);
				
		КонецЕсли;				
				
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете 
			И СтруктураШапкиДокумента.ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
		
			Для каждого Элемент Из ТаблицыДокумента Цикл
			
				ТаблицаДокумента = Элемент.Значение;
				Если ТаблицаДокумента.Колонки.Найти("СуммаБУБезНДС") <> Неопределено Тогда
					ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СуммаБУБезНДС"), "СуммаНУ");
				Иначе
					ТаблицаДокумента.ЗагрузитьКолонку(ТаблицаДокумента.ВыгрузитьКолонку("СуммаБУ"), "СуммаНУ");
				КонецЕсли;
			
			КонецЦикла;
				
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры //СформироватьДвиженияПоЗачетуАванса()

Функция ЗачестьАвансКонтрагента(СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, Проводки, СуммаВключаетНДС, Отказ, Заголовок, ОпределятьСостояниеРасчетов = Истина) Экспорт
	
	СтруктураПараметров = ПодготовитьСтруктуруПараметровЗачетаАванса(
		СтруктураШапкиДокумента, СуммаВключаетНДС, ОпределятьСостояниеРасчетов);
	
	ТаблицаВзаиморасчетов = ПодготовитьТаблицуВзаиморасчетовПриЗачетеАванса(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаЗачетаАвансов, СтруктураПараметров, Отказ, Заголовок);

	СформироватьДвиженияПоЗачетуАванса(
		СтруктураШапкиДокумента, ТаблицыДокумента, ТаблицаВзаиморасчетов, СтруктураПараметров, Проводки, Отказ, Заголовок);

	Возврат ТаблицаВзаиморасчетов;

КонецФункции

Функция ПодготовитьСтруктуруПараметровПогашенияЗадолженности(СтруктураШапкиДокумента, ОпределятьСостояниеРасчетов = Истина)

	ОпределятьСостояниеРасчетов = ОпределятьСостояниеРасчетов 
		И ОбщегоНазначения.ПроводитьДокументПоРазделуУчета(
			СтруктураШапкиДокумента.Организация, Перечисления.РазделыУчета.РасчетыСКонтрагентами, СтруктураШапкиДокумента.Дата);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОпределятьСостояниеРасчетов", ОпределятьСостояниеРасчетов);
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		НаправлениеДвижения = ?(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская, "Поступление", "Выбытие");
	Иначе	
		НаправлениеДвижения = БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(
			СтруктураШапкиДокумента.ВидДокумента).Направление;
	КонецЕсли; 
	СтруктураПараметров.Вставить("НаправлениеДвижения", НаправлениеДвижения);
	СтруктураПараметров.Вставить("ЭтоВозврат",          СтруктураШапкиДокумента.ЭтоВозврат);
	
	Если СтруктураШапкиДокумента.Свойство("ВидОперации")
		И (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты 
			ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) 
		Тогда
		// Для корректного формирования проводок по отклонению курсу покупки/продажи от курса ЦБ
		СтруктураПараметров.Вставить("ПереворачиватьОтрицательныеПроводки", Истина);
	КонецЕсли;
	
	УчитыватьЗадолженностьУСН = СтруктураШапкиДокумента.ОрганизацияПрименяетУСН
		И (НаправлениеДвижения = "Поступление") 
		И (НЕ СтруктураШапкиДокумента.ЭтоВозврат);
	СтруктураПараметров.Вставить("УчитыватьЗадолженностьУСН", УчитыватьЗадолженностьУСН);
	
	Возврат СтруктураПараметров;

КонецФункции // ПодготовитьСтруктуруПараметровПогашенияЗадолженности()

Функция ПодготовитьТаблицуПогашенияЗадолженности(СтруктураШапкиДокумента, ТаблицаДокумента, СтруктураПараметров, Отказ, Заголовок)

	Перем ДокументРасчетов;
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений();
	ТаблицаВзаиморасчетов.Колонки.Добавить("СчетУчета",             Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ВалютаВзаиморасчетов",  Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента",    Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДокументРасчетов",      Документы.ТипВсеСсылки());
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДатаДокументаРасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаВзаиморасчетов.Колонки.Добавить("ОстатокВзаиморасчетов", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов",   ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаБУ",               ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаНУ",               ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	
	ТаблицаВзаиморасчетов.Колонки.Добавить("РасчетыВУсловныхЕдиницах", Новый ОписаниеТипов("Булево"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("Разница",                  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СтавкаНДС",                Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("КурсВзаиморасчетов",       ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,4));
	ТаблицаВзаиморасчетов.Колонки.Добавить("КратностьВзаиморасчетов",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	ТаблицаВзаиморасчетов.Колонки.Добавить("КоррСчет",                 Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	ТаблицаВзаиморасчетов.Колонки.Добавить("КоррПодразделение",        Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Для Ном = 1 По 3 Цикл
		ТаблицаВзаиморасчетов.Колонки.Добавить("КоррСубконто" + Ном);
	КонецЦикла; 
	
	Если ТаблицаДокумента.Колонки.Найти("СодержаниеПроводки") <> Неопределено Тогда
		ТаблицаВзаиморасчетов.Колонки.Добавить("СодержаниеПроводки", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(200));
	КонецЕсли;
		
	Если СтруктураПараметров.ОпределятьСостояниеРасчетов Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
		// Для установки блокировки используется свернутая таблица, 
		// для запроса используются массивы - считаем, что в большинстве случаев количество элементов в них будет небольшим
		СвернутаяТаблицаДокумента = ТаблицаДокумента.Скопировать(
			Новый Структура("РаспределятьОплату", Истина), "СчетОплаты, Контрагент, ДоговорКонтрагента");
		ЕстьРаспределениеОплаты = (СвернутаяТаблицаДокумента.Количество() > 0);
		
		Если ЕстьРаспределениеОплаты Тогда
					
			СвернутаяТаблицаДокумента.Свернуть("СчетОплаты, Контрагент, ДоговорКонтрагента");
			
			Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
						
				СтруктураПараметровБлокировки = Новый Структура(
					"ТипТаблицы, ИмяТаблицы", 
					"РегистрБухгалтерии", "Хозрасчетный");
				СтруктураПараметровБлокировки.Вставить("ИсточникДанных", СвернутаяТаблицаДокумента);
				
				ЗначенияБлокировки = Новый Соответствие;
				ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
				ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
				ОписаниеИсточника = Новый Соответствие;
				ОписаниеИсточника.Вставить("Счет", "СчетОплаты");
				ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
				ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
				
				ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
						
			КонецЕсли;
		
			ГраницаОстатков = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
			
			ВидыСубконтоРасчетов = Новый Массив;
			ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
			ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
			Запрос.УстановитьПараметр("ВидыСубконтоРасчетов", ВидыСубконтоРасчетов);
			
			ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
			ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
			Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
			
			МассивСчетовОплаты = СвернутаяТаблицаДокумента.ВыгрузитьКолонку("СчетОплаты");
			МассивСчетовОплаты = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивСчетовОплаты);
			
			МассивСчетовРасчетов = Новый Массив;
			МассивСчетовКонтрагентыДоговоры = Новый Массив;
			Для каждого СчетОплаты Из МассивСчетовОплаты Цикл
				ЕстьСубконтоДокументы = (СчетОплаты.ВидыСубконто.Найти(
					ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") <> Неопределено);
				Если ЕстьСубконтоДокументы Тогда
					МассивСчетовРасчетов.Добавить(СчетОплаты);
				Иначе
					МассивСчетовКонтрагентыДоговоры.Добавить(СчетОплаты);
				КонецЕсли;
			КонецЦикла;
			Запрос.УстановитьПараметр("МассивСчетовРасчетов", МассивСчетовРасчетов);
			Запрос.УстановитьПараметр("МассивСчетовКонтрагентыДоговоры", МассивСчетовКонтрагентыДоговоры);
			
			МассивКонтрагентов = СвернутаяТаблицаДокумента.ВыгрузитьКолонку("Контрагент");
			МассивКонтрагентов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивКонтрагентов);
			Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
			МассивДоговоров    = СвернутаяТаблицаДокумента.ВыгрузитьКолонку("ДоговорКонтрагента");
			МассивДоговоров    = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
			Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
			
			ЗнакОстатков = ?(СтруктураПараметров.НаправлениеДвижения = "Выбытие", -1, 1);
			Запрос.УстановитьПараметр("ЗнакОстатков", ЗнакОстатков);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Остатки.Счет КАК Счет,
			|	Остатки.Субконто1 КАК Контрагент,
			|	Остатки.Субконто2 КАК ДоговорКонтрагента,
			|	Остатки.Субконто3 КАК ДокументРасчетов,
			|	ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
			|	ВЫБОР
			|		КОГДА Остатки.Счет.Валютный
			|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &ЗнакОстатков
			|		ИНАЧЕ Остатки.СуммаОстаток * &ЗнакОстатков
			|	КОНЕЦ КАК СуммаВзаиморасчетов,
			|	Остатки.СуммаОстаток * &ЗнакОстатков КАК СуммаБУ,
			|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &ЗнакОстатков КАК СуммаНУ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&ГраницаОстатков,
			|			Счет В (&МассивСчетовРасчетов),
			|			&ВидыСубконтоРасчетов,
			|			Организация = &Организация
			|				И Субконто1 В (&МассивКонтрагентов)
			|				И Субконто2 В (&МассивДоговоров)) КАК Остатки
			|ГДЕ
			|	(ВЫБОР
			|			КОГДА Остатки.Счет.Валютный
			|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &ЗнакОстатков
			|			ИНАЧЕ Остатки.СуммаОстаток * &ЗнакОстатков
			|		КОНЕЦ) > 0
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Остатки.Счет КАК Счет,
			|	Остатки.Субконто1 КАК Контрагент,
			|	Остатки.Субконто2 КАК ДоговорКонтрагента,
			|	НЕОПРЕДЕЛЕНО КАК ДокументРасчетов,
			|	ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
			|	ВЫБОР
			|		КОГДА Остатки.Счет.Валютный
			|			ТОГДА Остатки.ВалютнаяСуммаОстаток * &ЗнакОстатков
			|		ИНАЧЕ Остатки.СуммаОстаток * &ЗнакОстатков
			|	КОНЕЦ КАК СуммаВзаиморасчетов,
			|	Остатки.СуммаОстаток * &ЗнакОстатков КАК СуммаБУ,
			|	ЕСТЬNULL(Остатки.СуммаНУОстаток, 0) * &ЗнакОстатков КАК СуммаНУ
			|ИЗ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки(
			|			&ГраницаОстатков,
			|			Счет В (&МассивСчетовКонтрагентыДоговоры),
			|			&ВидыСубконтоКонтрагентыДоговоры,
			|			Организация = &Организация
			|				И Субконто1 В (&МассивКонтрагентов)
			|				И Субконто2 В (&МассивДоговоров)) КАК Остатки
			|ГДЕ
			|	(ВЫБОР
			|			КОГДА Остатки.Счет.Валютный
			|				ТОГДА Остатки.ВалютнаяСуммаОстаток * &ЗнакОстатков
			|			ИНАЧЕ Остатки.СуммаОстаток * &ЗнакОстатков
			|		КОНЕЦ) > 0
			|
			|ДЛЯ ИЗМЕНЕНИЯ
			|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
			НачТаблицаОстатков = Запрос.Выполнить().Выгрузить();
			БухгалтерскийУчетРасчетовСКонтрагентами.УпорядочитьТаблицуПоДокументу(НачТаблицаОстатков, "ДокументРасчетов");
			
			ТаблицаОстатков = НачТаблицаОстатков.Скопировать();
			ТаблицаОстатков.Индексы.Добавить("Счет, Контрагент, ДоговорКонтрагента, ДокументРасчетов");
			
		КонецЕсли;
		
	КонецЕсли;

	ВалютаДокумента = СтруктураШапкиДокумента.ВалютаДокумента;
	
	// Для поступления на расчетный счет с видом "Приобретение иностранной валюты"
	ЕстьВалютнаяСумма = (ТаблицаДокумента.Колонки.Найти("ВалютнаяСумма") <> Неопределено);
	Если ЕстьВалютнаяСумма Тогда
		ТаблицаВзаиморасчетов.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));	
	КонецЕсли;
	
	ЭтоСписаниеЗадолженности = СтруктураШапкиДокумента.Свойство("ВидОперации")
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности;
	
	ЭтоОплатаПоКартам = СтруктураШапкиДокумента.Свойство("ВидОперации")
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;
		
	Для каждого СтрокаДокумента Из ТаблицаДокумента Цикл
		
		РасчетыВВалюте = СтрокаДокумента.ВалютаВзаиморасчетов <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
		
		НераспределенныйОстаток   = СтрокаДокумента.СуммаВзаиморасчетов;
		НераспределенныйОстатокБУ = СтрокаДокумента.СуммаБУ;
		
		КурсВзаиморасчетов = ?(НераспределенныйОстаток = 0, 0, Окр(НераспределенныйОстатокБУ / НераспределенныйОстаток, 4));
		КурсВалютнойСуммы  = ?(ЕстьВалютнаяСумма И (СтрокаДокумента.СуммаВзаиморасчетов <> 0),
			СтрокаДокумента.ВалютнаяСумма / СтрокаДокумента.СуммаВзаиморасчетов, 0);
		
		Если СтруктураПараметров.ОпределятьСостояниеРасчетов 
			И СтрокаДокумента.РаспределятьОплату Тогда
			
			РасчетыВУсловныхЕдиницах = СтрокаДокумента.РасчетыВУсловныхЕдиницах;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Счет", СтрокаДокумента.СчетОплаты);
			СтруктураОтбора.Вставить("Контрагент", СтрокаДокумента.Контрагент);
			СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаДокумента.ДоговорКонтрагента);
			ПогашениеДолгаПоДокументу = (СтрокаДокумента.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу);
			Если ПогашениеДолгаПоДокументу Тогда
				СтруктураОтбора.Вставить("ДокументРасчетов", СтрокаДокумента.ДокументРасчетов);
			КонецЕсли;
			МассивОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураОтбора);
			
			Если ПогашениеДолгаПоДокументу И (МассивОстатков.Количество() = 0) Тогда
					
				// Если указан документ расчетов для погашения задолженности,
				// при отсутствии остатков задолженности по нему документ проводим, но сообщаем информацию об этом пользователю.
				ТекстСообщения = "По документу """ + СтрокаДокумента.ДокументРасчетов + """"
				+ " остатков задолженности не обнаружено." + Символы.ПС
				+ Символы.Таб + "Сумма " + НераспределенныйОстаток + " " + СтрокаДокумента.ВалютаВзаиморасчетов 
				+ " будет отнесена на счет авансов (" + СтрокаДокумента.СчетАванса + ").";
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, , Заголовок, СтатусСообщения.Информация);
				
			КонецЕсли;
		
			Для каждого СтрокаОстатка Из МассивОстатков Цикл
			
				СуммаРаспределения = Мин(НераспределенныйОстаток, СтрокаОстатка.СуммаВзаиморасчетов);
				
				Если СуммаРаспределения <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаРаспределения = ТаблицаВзаиморасчетов.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаДокумента);
				
				СтрокаРаспределения.СчетУчета             = СтрокаОстатка.Счет;
				СтрокаРаспределения.Контрагент            = СтрокаОстатка.Контрагент;
		        СтрокаРаспределения.ДоговорКонтрагента    = СтрокаОстатка.ДоговорКонтрагента;
				СтрокаРаспределения.Подразделение         = СтрокаОстатка.Подразделение;
				СтрокаРаспределения.ДокументРасчетов      = СтрокаОстатка.ДокументРасчетов;
				СтрокаРаспределения.ДатаДокументаРасчетов = СтрокаОстатка.ДатаДокументаРасчетов;
				// Задолженность списывается в доходы/расходы того же подразделения, на котором числилась
				Если ЭтоСписаниеЗадолженности Тогда
					СтрокаРаспределения.КоррПодразделение = СтрокаОстатка.Подразделение;
				КонецЕсли;
				
				СтрокаРаспределения.СуммаВзаиморасчетов   = СуммаРаспределения;

				Если РасчетыВВалюте Тогда
					
					// Погашение долга в валюте производится в БУ и НУ по курсу тек.документа
					// Погашение долга в условных единицах производятся в БУ по курсу тек.документа, в НУ формируется суммовая разница,
					// 	для ПБУ 18 образуется постоянная разница, равная суммовой.
					
					// Возвраты в валюте производятся в БУ по курсу остатка, в НУ по курсу тек.документа, для ПБУ 18 образуется постоянная разница.
					// Возвраты в условных единицах производятся в БУ и НУ только по курсу остатка,
					// 	если курс остатка БУ отличается от курса тек.документа - сообщается об ошибке и документ возврата не проводится.
					
					Если РасчетыВУсловныхЕдиницах И (СуммаРаспределения = НераспределенныйОстаток) Тогда
						СуммаПоКурсуДокумента = НераспределенныйОстатокБУ;
						// Погашаемая сумма (в условных единицах) в этом случае - расчетная, без округления до 2 знаков
						// Это помогает обойти ошибки округления при расчете сумм по курсу остатка
						ПогашаемаяСуммаВзаиморасчетов = НераспределенныйОстатокБУ / КурсВзаиморасчетов;
					Иначе
						СуммаПоКурсуДокумента = Окр(СуммаРаспределения * КурсВзаиморасчетов, 2);
						ПогашаемаяСуммаВзаиморасчетов = СуммаРаспределения;
					КонецЕсли;
					
					СуммаБУпоКурсуОстатка = Окр(
						ПогашаемаяСуммаВзаиморасчетов * СтрокаОстатка.СуммаБУ / СтрокаОстатка.СуммаВзаиморасчетов, 2);
					СуммаНУпоКурсуОстатка = Окр(
						ПогашаемаяСуммаВзаиморасчетов * СтрокаОстатка.СуммаНУ / СтрокаОстатка.СуммаВзаиморасчетов, 2);
						
					Если СтруктураПараметров.ЭтоВозврат Тогда
						
						Если РасчетыВУсловныхЕдиницах Тогда
							// Возврат предоплаты в условных единицах производится по курсу, указанному в документе возврата
							СтрокаРаспределения.СуммаБУ = СуммаПоКурсуДокумента;
							СтрокаРаспределения.СуммаНУ = СуммаПоКурсуДокумента;
						Иначе
							// Возврат предоплаты в валюте производится по курсу предоплаты
							СтрокаРаспределения.СуммаБУ = СуммаБУпоКурсуОстатка;
							СтрокаРаспределения.СуммаНУ = СуммаБУпоКурсуОстатка;
							// При расчетах в валюте дополнительно передается отдельная сумма 
							// для "обратной" переоценки в НУ возвращаемой суммы до курса поступления предоплаты
							НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Получить();
							ОцениватьДоходыИРасходыВНУПоКурсуАвансов = 
								ЗначениеЗаполнено(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов)
								И (НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов <= СтруктураШапкиДокумента.Дата);
							Если ОцениватьДоходыИРасходыВНУПоКурсуАвансов Тогда
								СтрокаРаспределения.Разница = СуммаБУпоКурсуОстатка - СуммаНУпоКурсуОстатка;
							Иначе
								СтрокаРаспределения.Разница = СуммаПоКурсуДокумента - СуммаБУпоКурсуОстатка;
							КонецЕсли;							
						КонецЕсли;
					
					Иначе
						
						// Погашение долга в валюте и в условных единицах производится по курсу тек.документа.
						СтрокаРаспределения.СуммаБУ = СуммаПоКурсуДокумента;
						СтрокаРаспределения.СуммаНУ = СуммаПоКурсуДокумента;
						// При расчетах в у.е дополнительно передается отдельная сумма для формирования в НУ суммовой разницы
						Если РасчетыВУсловныхЕдиницах Тогда
							СтрокаРаспределения.Разница = СуммаПоКурсуДокумента - СуммаНУпоКурсуОстатка;
						КонецЕсли;
					
					КонецЕсли;
					
				Иначе
					// Расчеты в рублях
					СтрокаРаспределения.СуммаБУ = СуммаРаспределения;
					СтрокаРаспределения.СуммаНУ = СуммаРаспределения;
				КонецЕсли;
				
				Если ЕстьВалютнаяСумма Тогда
					СтрокаРаспределения.ВалютнаяСумма = Окр(СуммаРаспределения * КурсВалютнойСуммы, 2);
				КонецЕсли;
				
				НераспределенныйОстаток   = НераспределенныйОстаток - СтрокаРаспределения.СуммаВзаиморасчетов;
				НераспределенныйОстатокБУ = НераспределенныйОстатокБУ - СтрокаРаспределения.СуммаБУ;
				
				СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаРаспределения.СуммаВзаиморасчетов;
				СтрокаОстатка.СуммаБУ             = СтрокаОстатка.СуммаБУ - СтрокаРаспределения.СуммаБУ;
				СтрокаОстатка.СуммаНУ             = СтрокаОстатка.СуммаНУ - СтрокаРаспределения.СуммаНУ;
				Если РасчетыВУсловныхЕдиницах Тогда
					СтрокаОстатка.СуммаНУ = СтрокаОстатка.СуммаНУ + СтрокаРаспределения.Разница;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЕсли; 
	
		Если НераспределенныйОстаток <> 0 Тогда
		
			СтрокаРаспределения = ТаблицаВзаиморасчетов.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаРаспределения, СтрокаДокумента);
			
			// {ОбособленныеПодразделения
			
			// Для нераспределенных сумм подразделение определяется по корр.счету,
			// если оно не было явно задано в колонке "Подразделение" таблицы документа
			// (как, например, для операции "Поступление от продаж по платежным картам")
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента.Подразделение) Тогда
				СтрокаРаспределения.Подразделение         = СтрокаДокумента.КоррПодразделение;
			КонецЕсли;
			
			// }ОбособленныеПодразделения 
			
			СтрокаРаспределения.СчетУчета             = СтрокаДокумента.СчетАванса;
		    СтрокаРаспределения.ДокументРасчетов      = СтруктураШапкиДокумента.Ссылка;
			СтрокаРаспределения.ДатаДокументаРасчетов = СтруктураШапкиДокумента.Дата;
			
			СтрокаРаспределения.СуммаВзаиморасчетов = НераспределенныйОстаток;
		
			СтрокаРаспределения.СуммаБУ = НераспределенныйОстатокБУ;
			СтрокаРаспределения.СуммаНУ = НераспределенныйОстатокБУ;
			
			Если ЕстьВалютнаяСумма Тогда
				СтрокаРаспределения.ВалютнаяСумма = Окр(НераспределенныйОстаток * КурсВалютнойСуммы, 2);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПараметров.ОпределятьСостояниеРасчетов И ЕстьРаспределениеОплаты Тогда
		
		ТаблицаВзаиморасчетов.Индексы.Добавить("СчетУчета, Контрагент, ДоговорКонтрагента, ДокументРасчетов");
		
		Для каждого СтрокаОстатка Из НачТаблицаОстатков Цикл
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("СчетУчета",          СтрокаОстатка.Счет);
			СтруктураОтбора.Вставить("Контрагент",         СтрокаОстатка.Контрагент);
			СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаОстатка.ДоговорКонтрагента);
			СтруктураОтбора.Вставить("ДокументРасчетов",   СтрокаОстатка.ДокументРасчетов);
			
			СтрокиРаспределения = ТаблицаВзаиморасчетов.НайтиСтроки(СтруктураОтбора);
			ИтогоСуммаВзаиморасчетов = 0;
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				ИтогоСуммаВзаиморасчетов = ИтогоСуммаВзаиморасчетов + СтрокаРаспределения.СуммаВзаиморасчетов;
			КонецЦикла;
		
			Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
				СтрокаРаспределения.ОстатокВзаиморасчетов = Окр(
					СтрокаОстатка.СуммаВзаиморасчетов * СтрокаРаспределения.СуммаВзаиморасчетов / ИтогоСуммаВзаиморасчетов, 2);
				СтрокаОстатка.СуммаВзаиморасчетов = СтрокаОстатка.СуммаВзаиморасчетов - СтрокаРаспределения.ОстатокВзаиморасчетов;
				ИтогоСуммаВзаиморасчетов          = ИтогоСуммаВзаиморасчетов - СтрокаРаспределения.СуммаВзаиморасчетов;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаВзаиморасчетов; 
	
КонецФункции //ПодготовитьТаблицуПогашенияЗадолженности()

Функция ДополнитьТаблицуПогашенияЗадолженностиВзаиморасчетамиУСН(ТаблицаВзаиморасчетов, СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок)

	Если (НЕ СтруктураПараметров.УчитыватьЗадолженностьУСН) Тогда
		Возврат ТаблицаВзаиморасчетов; 
	КонецЕсли;
		
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовЕНВД",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаБУ_ЕНВД",                 ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовКомитента", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаБУ_Комитента",            ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
	Если СтруктураПараметров.ЭтоВозврат Тогда
		Возврат ТаблицаВзаиморасчетов; 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
				
		СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы, ИмяТаблицы", 
			"РегистрБухгалтерии", "Хозрасчетный");
		СтруктураПараметровБлокировки.Вставить("ИсточникДанных", ТаблицаВзаиморасчетов);
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период", Новый Диапазон(, СтруктураШапкиДокумента.Дата)); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты, "Контрагент");
		ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры, "ДоговорКонтрагента");
		ОписаниеИсточника.Вставить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ДокументРасчетов");
		
		ВыборкаСчетовУСН = ПланыСчетов.Хозрасчетный.Выбрать(ПланыСчетов.Хозрасчетный.УСНВспомогательныеСчета);
		Пока ВыборкаСчетовУСН.Следующий() Цикл
			ЗначенияБлокировки.Вставить("Счет", ВыборкаСчетовУСН.Ссылка); 
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЦикла;
				
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	
	ГраницаОстатков = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	
	ВидыСубконтоРасчетов = Новый Массив;
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоРасчетов.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("ВидыСубконтоРасчетов", ВидыСубконтоРасчетов);
	
	МассивКонтрагентов = ТаблицаВзаиморасчетов.ВыгрузитьКолонку("Контрагент");
	МассивКонтрагентов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивКонтрагентов);
	Запрос.УстановитьПараметр("МассивКонтрагентов", МассивКонтрагентов);
	МассивДоговоров    = ТаблицаВзаиморасчетов.ВыгрузитьКолонку("ДоговорКонтрагента");
	МассивДоговоров    = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	МассивДокументов   = ТаблицаВзаиморасчетов.ВыгрузитьКолонку("ДокументРасчетов");
	МассивДокументов   = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДокументов);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОстаткиУСН.РасчетыВВалюте,
	|	ОстаткиУСН.Контрагент,
	|	ОстаткиУСН.ДоговорКонтрагента,
	|	ОстаткиУСН.ДокументРасчетов,
	|	ОстаткиУСН.Подразделение,
	|	СУММА(ОстаткиУСН.СуммаВзаиморасчетовЕНВД) КАК СуммаВзаиморасчетовЕНВД,
	|	СУММА(ОстаткиУСН.СуммаБУ_ЕНВД) КАК СуммаБУ_ЕНВД,
	|	СУММА(ОстаткиУСН.СуммаВзаиморасчетовКомитента) КАК СуммаВзаиморасчетовКомитента,
	|	СУММА(ОстаткиУСН.СуммаБУ_Комитента) КАК СуммаБУ_Комитента
	|ИЗ
	|	(ВЫБРАТЬ
	|		Остатки.Счет.Валютный КАК РасчетыВВалюте,
	|		Остатки.Субконто1 КАК Контрагент,
	|		Остатки.Субконто2 КАК ДоговорКонтрагента,
	|		Остатки.Субконто3 КАК ДокументРасчетов,
	|		ЕСТЬNULL(Остатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВзаиморасчетовЕНВД,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД)
	|					ИЛИ Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБУ_ЕНВД,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|				ТОГДА Остатки.ВалютнаяСуммаОстаток
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВзаиморасчетовКомитента,
	|		ВЫБОР
	|			КОГДА Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент)
	|					ИЛИ Остатки.Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент)
	|				ТОГДА Остатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБУ_Комитента
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				&ГраницаОстатков,
	|				Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.УСНВспомогательныеСчета)),
	|				&ВидыСубконтоРасчетов,
	|				Организация = &Организация
	|					И Субконто1 В (&МассивКонтрагентов)
	|					И Субконто2 В (&МассивДоговоров)
	|					И Субконто3 В (&МассивДокументов)) КАК Остатки
	|	
	|	ДЛЯ ИЗМЕНЕНИЯ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки) КАК ОстаткиУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиУСН.РасчетыВВалюте,
	|	ОстаткиУСН.Контрагент,
	|	ОстаткиУСН.ДоговорКонтрагента,
	|	ОстаткиУСН.ДокументРасчетов,
	|	ОстаткиУСН.Подразделение";
	
	ТаблицаОстатковУСН = Запрос.Выполнить().Выгрузить();
	
	ТаблицаВзаиморасчетов.Индексы.Добавить("Контрагент, ДоговорКонтрагента, ДокументРасчетов, Подразделение");
	
	Для каждого СтрокаОстаткаУСН Из ТаблицаОстатковУСН Цикл
	
		НераспределенныйОстатокЕНВД      = СтрокаОстаткаУСН.СуммаВзаиморасчетовЕНВД;
		НераспределенныйОстатокКомитента = СтрокаОстаткаУСН.СуммаВзаиморасчетовКомитента;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Контрагент",         СтрокаОстаткаУСН.Контрагент);
		СтруктураОтбора.Вставить("ДоговорКонтрагента", СтрокаОстаткаУСН.ДоговорКонтрагента);
		СтруктураОтбора.Вставить("ДокументРасчетов",   СтрокаОстаткаУСН.ДокументРасчетов);
		СтруктураОтбора.Вставить("Подразделение",      СтрокаОстаткаУСН.Подразделение);
		
		СтрокиРаспределения = ТаблицаВзаиморасчетов.НайтиСтроки(СтруктураОтбора);
		
		Если СтрокиРаспределения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИтогоОстатокВзаиморасчетов = 0;
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			ИтогоОстатокВзаиморасчетов = ИтогоОстатокВзаиморасчетов + СтрокаРаспределения.ОстатокВзаиморасчетов;
		КонецЦикла;
		
		Для каждого СтрокаРаспределения Из СтрокиРаспределения Цикл
			
			КоэффициентПогашения = ?(ИтогоОстатокВзаиморасчетов = 0, 
				0, СтрокаРаспределения.СуммаВзаиморасчетов / ИтогоОстатокВзаиморасчетов);
			
			СтрокаРаспределения.СуммаВзаиморасчетовЕНВД      = Окр(
				СтрокаОстаткаУСН.СуммаВзаиморасчетовЕНВД * КоэффициентПогашения, 2);
			СтрокаРаспределения.СуммаБУ_ЕНВД                 = Окр(
				СтрокаОстаткаУСН.СуммаБУ_ЕНВД * КоэффициентПогашения, 2);
			СтрокаРаспределения.СуммаВзаиморасчетовКомитента = Окр(
				СтрокаОстаткаУСН.СуммаВзаиморасчетовКомитента * КоэффициентПогашения, 2);
			СтрокаРаспределения.СуммаБУ_Комитента            = Окр(
				СтрокаОстаткаУСН.СуммаБУ_Комитента * КоэффициентПогашения, 2);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаВзаиморасчетов; 
	
КонецФункции // ДополнитьТаблицуПогашенияЗадолженностиВзаиморасчетамиУСН()

Процедура СформироватьПроводкиПоПогашениюЗадолженности(СтруктураШапкиДокумента, ТаблицаРаспределения, СтруктураПараметров, Проводки, 
	БазовоеСодержаниеПроводки, Отказ, Заголовок)

	//Проводки по результатам распределения
	
	Организация = СтруктураШапкиДокумента.Организация;
	ДатаДока    = СтруктураШапкиДокумента.Дата;
	
	НаправлениеДвижения = СтруктураПараметров.НаправлениеДвижения;
	ЭтоВозврат          = СтруктураПараметров.ЭтоВозврат;
	
	ПереворачиватьОтрицательныеПроводки = СтруктураПараметров.Свойство("ПереворачиватьОтрицательныеПроводки") 
		И СтруктураПараметров.ПереворачиватьОтрицательныеПроводки;
	
	ДтКтРасчетовБазовый  = ?(НаправлениеДвижения = "Поступление", "Кт", "Дт");
	ДтКтКоррСчетаБазовый = ?(ДтКтРасчетовБазовый = "Кт", "Дт", "Кт");
	
	ЕстьКолонкаСодержаниеПроводки = ТаблицаРаспределения.Колонки.Найти("СодержаниеПроводки") <> Неопределено;
	
	// Для операции приобретения иностранной валюты
	ЕстьВалютнаяСумма = ТаблицаРаспределения.Колонки.Найти("ВалютнаяСумма") <> Неопределено;
	
	Для каждого СтрокаРаспределения из ТаблицаРаспределения Цикл

		Если ПереворачиватьОтрицательныеПроводки Тогда
			ДтКтРасчетов  = ?(СтрокаРаспределения.СуммаБУ > 0, ДтКтРасчетовБазовый, ДтКтКоррСчетаБазовый);
			ДтКтКоррСчета = ?(СтрокаРаспределения.СуммаБУ > 0, ДтКтКоррСчетаБазовый, ДтКтРасчетовБазовый);
		Иначе
			ДтКтРасчетов  = ДтКтРасчетовБазовый;
			ДтКтКоррСчета = ДтКтКоррСчетаБазовый;
		КонецЕсли; 
		
		ЭтоПогашениеДолга = СтрокаРаспределения.ДокументРасчетов <> СтруктураШапкиДокумента.Ссылка;
		
		Если ЭтоПогашениеДолга Тогда

			Если ЕстьКолонкаСодержаниеПроводки и ЗначениеЗаполнено(СтрокаРаспределения.СодержаниеПроводки) тогда
				СодержаниеПроводки = СтрокаРаспределения.СодержаниеПроводки;
			ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			ИначеЕсли ЭтоВозврат Тогда
				СодержаниеПроводки = "Возврат денежных средств";
			Иначе
				СодержаниеПроводки = "Поступление денежных средств";
			КонецЕсли;

		Иначе

			Если ЕстьКолонкаСодержаниеПроводки и ЗначениеЗаполнено(СтрокаРаспределения.СодержаниеПроводки) тогда
				СодержаниеПроводки = СтрокаРаспределения.СодержаниеПроводки;
			ИначеЕсли ЗначениеЗаполнено(БазовоеСодержаниеПроводки) тогда
				СодержаниеПроводки = БазовоеСодержаниеПроводки;
			КонецЕсли;

		КонецЕсли;

		Проводка = Проводки.Добавить();
		
		Проводка.Период       = ДатаДока;
		Проводка.Организация  = Организация;
		Проводка.Содержание   = СодержаниеПроводки;

		ЗнакСуммы = ?(ПереворачиватьОтрицательныеПроводки И (СтрокаРаспределения.СуммаБУ < 0), -1, 1);
		
		Проводка.Сумма = СтрокаРаспределения.СуммаБУ * ЗнакСуммы;

		Проводка["Счет" + ДтКтРасчетов] = СтрокаРаспределения.СчетУчета;

		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаРаспределения.Контрагент);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаРаспределения.ДоговорКонтрагента);
		БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаРаспределения.ДокументРасчетов);
		
		Если СтрокаРаспределения.СчетУчета.Валютный Тогда
			Проводка["Валюта" + ДтКтРасчетов]        = СтрокаРаспределения.ВалютаВзаиморасчетов;
			Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаРаспределения.СуммаВзаиморасчетов * ЗнакСуммы;
		КонецЕсли;
		
		Проводка["Счет" + ДтКтКоррСчета] = СтрокаРаспределения.КоррСчет;

		Для Ном = 1 по 3 Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтКоррСчета], Проводка["Субконто" + ДтКтКоррСчета], Ном, СтрокаРаспределения["КоррСубконто" + Ном]);
		КонецЦикла;
		
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаРаспределения.Подразделение, ДтКтРасчетов);
		БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаРаспределения.КоррПодразделение, ДтКтКоррСчета);
		
		Если СтрокаРаспределения.КоррСчет.Валютный Тогда
			
			ЭтоПереносДолгаНаВалютныйДоговорВУЕ = СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницахПоНовомуДоговору")
				И СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницахПоНовомуДоговору = Истина;
			
			Если ЭтоПереносДолгаНаВалютныйДоговорВУЕ Тогда
				Проводка["Валюта" + ДтКтКоррСчета]        = СтруктураШапкиДокумента.ВалютаНовогоДоговора;
				Проводка["ВалютнаяСумма" + ДтКтКоррСчета] = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
					СтрокаРаспределения.СуммаВзаиморасчетов * ЗнакСуммы,
					СтрокаРаспределения.ВалютаВзаиморасчетов, СтруктураШапкиДокумента.ВалютаНовогоДоговора,
					СтрокаРаспределения.КурсВзаиморасчетов, СтруктураШапкиДокумента.КурсНовогоДоговора,
					СтрокаРаспределения.КратностьВзаиморасчетов, СтруктураШапкиДокумента.КратностьНовогоДоговора);
			Иначе
				Проводка["Валюта" + ДтКтКоррСчета]        = СтруктураШапкиДокумента.ВалютаДокумента;
				Если ЕстьВалютнаяСумма Тогда
					Проводка["ВалютнаяСумма" + ДтКтКоррСчета] = СтрокаРаспределения.ВалютнаяСумма * ЗнакСуммы;
				Иначе
					Проводка["ВалютнаяСумма" + ДтКтКоррСчета] = СтрокаРаспределения.СуммаВзаиморасчетов * ЗнакСуммы;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
			
			Если ЭтоВозврат 
				И СтрокаРаспределения.СчетУчета.Валютный 
				И (НЕ СтрокаРаспределения.РасчетыВУсловныхЕдиницах) Тогда
			
				СуммаНУ = (СтрокаРаспределения.СуммаНУ + СтрокаРаспределения.Разница) * ЗнакСуммы;
				
			ИначеЕсли НЕ ЭтоВозврат 
				И СтрокаРаспределения.СчетУчета.Валютный
				И СтрокаРаспределения.РасчетыВУсловныхЕдиницах Тогда
			
				СуммаНУ = (СтрокаРаспределения.СуммаНУ - СтрокаРаспределения.Разница) * ЗнакСуммы;
				
			Иначе
			
				СуммаНУ = СтрокаРаспределения.СуммаНУ * ЗнакСуммы;
			
			КонецЕсли;
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				СуммаНУ, СуммаНУ, Проводка.Сумма - СуммаНУ, Проводка.Сумма - СуммаНУ, , ,
				Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
			
		КонецЕсли;
		
		Если СтруктураПараметров.УчитыватьЗадолженностьУСН Тогда
			
			Если СтрокаРаспределения.СуммаВзаиморасчетовЕНВД <> 0 Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = "Погашение задолженности по деятельности ЕНВД";

				Если СтрокаРаспределения.СчетУчета.Валютный Тогда
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалЕНВД;
					Проводка["Валюта" + ДтКтРасчетов]        = СтрокаРаспределения.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаРаспределения.СуммаВзаиморасчетовЕНВД;
				Иначе
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиЕНВД;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаРаспределения.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаРаспределения.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаРаспределения.ДокументРасчетов);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаРаспределения.Подразделение, ДтКтРасчетов);
				
				Проводка.Сумма = СтрокаРаспределения.СуммаБУ_ЕНВД;

			КонецЕсли;
		
			Если СтрокаРаспределения.СуммаВзаиморасчетовКомитента <> 0 Тогда
			
				Проводка = Проводки.Добавить();
				
				Проводка.Период       = ДатаДока;
				Проводка.Организация  = Организация;
				Проводка.Содержание   = "Погашение задолженности за товары и услуги комитента";

				Если СтрокаРаспределения.СчетУчета.Валютный Тогда
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиВалКомитент;
					Проводка["Валюта" + ДтКтРасчетов]        = СтрокаРаспределения.ВалютаВзаиморасчетов;
					Проводка["ВалютнаяСумма" + ДтКтРасчетов] = СтрокаРаспределения.СуммаВзаиморасчетовКомитента;
				Иначе
					Проводка["Счет" + ДтКтРасчетов] = ПланыСчетов.Хозрасчетный.УСНРасчетыСПокупателямиКомитент;
				КонецЕсли;
				
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Контрагенты", СтрокаРаспределения.Контрагент);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "Договоры", СтрокаРаспределения.ДоговорКонтрагента);
				БухгалтерскийУчет.УстановитьСубконто(Проводка["Счет" + ДтКтРасчетов], Проводка["Субконто" + ДтКтРасчетов], "ДокументыРасчетовСКонтрагентами", СтрокаРаспределения.ДокументРасчетов);
				
				БухгалтерскийУчет.УстановитьПодразделениеПроводки(Проводка, СтрокаРаспределения.Подразделение, ДтКтРасчетов);
				
				Проводка.Сумма = СтрокаРаспределения.СуммаБУ_Комитента;

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПогаситьЗадолженностьКонтрагентов(СтруктураШапкиДокумента, ТаблицаДокумента, ДокументОбъект, Отказ, Заголовок,
			БазовоеСодержаниеПроводки = "", ОпределятьСостояниеРасчетов = Ложь) Экспорт

	Если ТаблицаДокумента = Неопределено Тогда
		ТаблицаДокумента = УправлениеДенежнымиСредствами.ПодготовитьТаблицуОплат(СтруктураШапкиДокумента);
	КонецЕсли; 
	
	СтруктураПараметров = ПодготовитьСтруктуруПараметровПогашенияЗадолженности(
		СтруктураШапкиДокумента, ОпределятьСостояниеРасчетов);
	
	ТаблицаВзаиморасчетов = ПодготовитьТаблицуПогашенияЗадолженности(
		СтруктураШапкиДокумента, ТаблицаДокумента, СтруктураПараметров, Отказ, Заголовок);
	
	ТаблицаВзаиморасчетов = ДополнитьТаблицуПогашенияЗадолженностиВзаиморасчетамиУСН(
		ТаблицаВзаиморасчетов, СтруктураШапкиДокумента, СтруктураПараметров, Отказ, Заголовок);
		
	СформироватьПроводкиПоПогашениюЗадолженности(
		СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, СтруктураПараметров, ДокументОбъект.Движения.Хозрасчетный, 
		БазовоеСодержаниеПроводки, Отказ, Заголовок);

	СформироватьСуммовыеРазницыПриРасчетахВУсловныхЕдиницах(
		СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, СтруктураПараметров, ДокументОбъект.Движения, Отказ, Заголовок);
		
	УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСРеализация0_КурсовыеРазницы(
		СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ДокументОбъект.Движения, Отказ);
	
	УчетНДСФормированиеДвижений.СформироватьДвиженияНалоговыйАгентПоОплате_КурсовыеРазницы(
		СтруктураШапкиДокумента, ТаблицаВзаиморасчетов, ДокументОбъект.Движения, Отказ);
		
		// {УчетДоходовИРасходовИП
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеПредпринимателя Тогда
			
		ТаблицаВзаиморасчетовВрем = ТаблицаВзаиморасчетов.Скопировать();
		
		Если ТаблицаВзаиморасчетовВрем.Колонки.Найти("ДокументРасчетов") <> Неопределено Тогда
			ТаблицаВзаиморасчетовВрем.Колонки.ДокументРасчетов.Имя = "Сделка";
		КонецЕсли;
		Если ТаблицаВзаиморасчетовВрем.Колонки.Найти("СуммаБУ") <> Неопределено Тогда
			ТаблицаВзаиморасчетовВрем.Колонки.СуммаБУ.Имя = "РублеваяСумма";
		КонецЕсли;
			
		ДоходыИРасходыПредпринимателя.РегистрацияРасчетовПредпринимателя(
			ДокументОбъект, СтруктураШапкиДокумента, ТаблицаВзаиморасчетовВрем, СтруктураПараметров.НаправлениеДвижения);
		
	КонецЕсли;
	// }УчетДоходовИРасходовИП
		
	Возврат ТаблицаВзаиморасчетов;

КонецФункции 

Процедура СформироватьСуммовыеРазницыПриРасчетахВУсловныхЕдиницах(СтруктураШапкиДокумента, ТаблицаРаспределенияОплат, СтруктураПараметров, Движения, Отказ, Заголовок) Экспорт
	
	Если НЕ СтруктураПараметров.ОпределятьСостояниеРасчетов Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаРаспределенияОплат", ТаблицаРаспределенияОплат);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Таб.СчетУчета,
	|	Таб.ВалютаВзаиморасчетов,
	|	Таб.Подразделение,
	|	Таб.Контрагент,
	|	Таб.ДоговорКонтрагента,
	|	Таб.ДокументРасчетов,
	|	Таб.СтавкаНДС,
	|	Таб.Разница КАК СуммоваяРазница
	|ПОМЕСТИТЬ ТаблицаСуммовыхРазниц
	|ИЗ
	|	&ТаблицаРаспределенияОплат КАК Таб
	|ГДЕ
	|	Таб.РасчетыВУсловныхЕдиницах
	|	И Таб.Разница <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСуммовыхРазниц.СчетУчета,
	|	ТаблицаСуммовыхРазниц.ВалютаВзаиморасчетов,
	|	ТаблицаСуммовыхРазниц.Подразделение,
	|	ТаблицаСуммовыхРазниц.Контрагент,
	|	ТаблицаСуммовыхРазниц.ДоговорКонтрагента,
	|	ТаблицаСуммовыхРазниц.ДокументРасчетов,
	|	ТаблицаСуммовыхРазниц.СтавкаНДС,
	|	СУММА(ТаблицаСуммовыхРазниц.СуммоваяРазница) КАК СуммоваяРазница
	|ИЗ
	|	ТаблицаСуммовыхРазниц КАК ТаблицаСуммовыхРазниц
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСуммовыхРазниц.СчетУчета,
	|	ТаблицаСуммовыхРазниц.ВалютаВзаиморасчетов,
	|	ТаблицаСуммовыхРазниц.Подразделение,
	|	ТаблицаСуммовыхРазниц.Контрагент,
	|	ТаблицаСуммовыхРазниц.ДоговорКонтрагента,
	|	ТаблицаСуммовыхРазниц.ДокументРасчетов,
	|	ТаблицаСуммовыхРазниц.СтавкаНДС";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСуммовыхРазниц = Результат.Выгрузить();
	
	Если СтруктураШапкиДокумента.ВидДокумента = "КорректировкаДолга" Тогда
		РасчетыПоРеализации = 
			(СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская) И (НЕ СтруктураПараметров.ЭтоВозврат)
			ИЛИ (СтруктураШапкиДокумента.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская) И СтруктураПараметров.ЭтоВозврат;
	Иначе	
		РасчетыПоРеализации = 
			(СтруктураПараметров.НаправлениеДвижения = "Поступление") И (НЕ СтруктураПараметров.ЭтоВозврат)
			ИЛИ (СтруктураПараметров.НаправлениеДвижения = "Выбытие") И СтруктураПараметров.ЭтоВозврат;
	КонецЕсли;
	
	СтатьяСуммовыхРазниц              = Справочники.ПрочиеДоходыИРасходы.СуммовыеРазницы;
	СтатьяКурсовыхРазницПоРасчетамВУЕ = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ;
	СчетДоходов                       = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;	// 91.01
	СчетРасходов                      = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;	// 91.02
	
	Если СтруктураПараметров.НаправлениеДвижения = "Поступление" Тогда
		ЗнакОстатков = 1;
	Иначе
		ЗнакОстатков = -1;
	КонецЕсли;
	
	Если РасчетыПоРеализации Тогда
			
		УчетНДСФормированиеДвижений.КорректировкаРегистровНДСПоСуммовымРазницам_Реализация(
			СтруктураШапкиДокумента, ТаблицаСуммовыхРазниц, Движения);
		
	КонецЕсли;
	
	Для каждого СтрокаРазницы Из ТаблицаСуммовыхРазниц Цикл
	
		Проводка = Движения.Хозрасчетный.Добавить();
		Проводка.Период      = СтруктураШапкиДокумента.Дата;
		Проводка.Организация = СтруктураШапкиДокумента.Организация;
		Проводка.Содержание  = "Начислена суммовая разница";
		СуммоваяРазница = СтрокаРазницы.СуммоваяРазница * ЗнакОстатков;
		
		Если СтруктураШапкиДокумента.Дата < '20111001' Тогда
			СуммоваяРазницаБезНДС = СуммоваяРазница 
				- УчетНДС.РассчитатьСуммуНДС(СуммоваяРазница, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(СтрокаРазницы.СтавкаНДС));
			СуммаНУ = СуммоваяРазницаБезНДС;
		Иначе
			// Начиная с 01.10.2011 при расчетах в у.е. вся суммовая разница, в т.ч. в части НДС, 
			// должна относиться для целей налога на прибыль на внереализационные доходы (расходы)
			СуммаНУ = СуммоваяРазница;
		КонецЕсли;


		Если СуммаНУ > 0 Тогда
		
			Проводка.СчетДт = СтрокаРазницы.СчетУчета;
			Проводка.СубконтоДт.Контрагенты = СтрокаРазницы.Контрагент;
			Проводка.СубконтоДт.Договоры = СтрокаРазницы.ДоговорКонтрагента;
			Проводка.СубконтоДт.ДокументыРасчетовСКонтрагентами = СтрокаРазницы.ДокументРасчетов;
			
			Проводка.ВалютаДт = СтрокаРазницы.ВалютаВзаиморасчетов;
			
			Проводка.СчетКт = СчетДоходов;
			Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяСуммовыхРазниц;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);

			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				0, СуммаНУ, 0, -СуммаНУ, , , Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			// НДС начисляется с положительных курсовых (суммовых до 01.01.2007) разниц по реализации
			// Начиная с 01.10.2011 НДС не начисляется
			Если РасчетыПоРеализации
				И СтруктураШапкиДокумента.Дата < '20111001'
				И СтрокаРазницы.СуммоваяРазницаНДС <> 0 Тогда
				
				Если СтруктураШапкиДокумента.Дата >= '20070101' Тогда
					
					// С 2007 года суммовые разницы в БУ отражаются как курсовые разницы при расчетах в у.е.,
					Проводка = Движения.Хозрасчетный.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "НДС по курсовым разницам по расчетам в у.е.";

					Проводка.СчетДт = СчетРасходов;
					Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазницПоРасчетамВУЕ;
			
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
					
					Проводка.Сумма   = СтрокаРазницы.СуммоваяРазницаНДС;
				
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);
					
				Иначе
					
					Проводка = Движения.Хозрасчетный.Добавить();
					Проводка.Период      = СтруктураШапкиДокумента.Дата;
					Проводка.Организация = СтруктураШапкиДокумента.Организация;
					Проводка.Содержание  = "НДС по суммовым разницам";

					Проводка.СчетДт = СчетРасходов;
					Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяСуммовыхРазниц;
			
					Проводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;
					Проводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;
					
					Проводка.Сумма   = СтрокаРазницы.СуммоваяРазницаНДС;
				
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);
					
				КонецЕсли;
				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки( 
					, , СтрокаРазницы.СуммоваяРазницаНДС, , , , 
					Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
					
			КонецЕсли;
		
		ИначеЕсли СуммоваяРазница < 0 Тогда
		
			Проводка.СчетДт = СчетРасходов;
			Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяСуммовыхРазниц;
			
			Проводка.СчетКт = СтрокаРазницы.СчетУчета;
			Проводка.СубконтоКт.Контрагенты = СтрокаРазницы.Контрагент;
			Проводка.СубконтоКт.Договоры = СтрокаРазницы.ДоговорКонтрагента;
			Проводка.СубконтоКт.ДокументыРасчетовСКонтрагентами = СтрокаРазницы.ДокументРасчетов;
			
			Проводка.ВалютаКт = СтрокаРазницы.ВалютаВзаиморасчетов;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, СтрокаРазницы.Подразделение, СтрокаРазницы.Подразделение);
			
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(
				-СуммаНУ, 0, СуммаНУ, 0, , , Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// По документу партии определяется комитент, договор и счет расчетов с ним.
// Возвращаемое значение:
//   Структура – список параметров (комитент, договор
//	 с комитентом и счет расчетов с комитентом).
//
Функция ПараметрыРасчетовСКомитентом(Партия,Отказ,Заголовок) Экспорт
	
	Параметры = Новый Структура();
	Параметры.Вставить("Комитент",Справочники.Контрагенты.ПустаяСсылка());
	Параметры.Вставить("ДоговорКомиссии",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	Параметры.Вставить("СчетРасчетовСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Параметры.Вставить("ВалютаРасчетовСКомитентом", Справочники.Валюты.ПустаяСсылка());
	
	ОрганизацияПоПартии = Справочники.Организации.ПустаяСсылка();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Комитент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Партия.Организация,
	|	Партия.Контрагент,
	|	Партия.ДоговорКонтрагента,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.СчетУчетаРасчетовСКомитентом,
	|	Партия.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.Партия КАК Партия
	|ГДЕ
	|	Партия.Ссылка = &Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Организация,
	|	ДокументРасчетовСКонтрагентом.Контрагент,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента,
	|	ДокументРасчетовСКонтрагентом.СчетУчетаРасчетовСКомитентом,
	|	ДокументРасчетовСКонтрагентом.СчетУчетаРасчетовСКомитентом,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Ссылка = &Партия";

	Запрос.УстановитьПараметр("Партия", Партия);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Следующий() Тогда
		Параметры.Вставить("Комитент",     				РезультатЗапроса.Комитент);
		Параметры.Вставить("ДоговорКомиссии",      		РезультатЗапроса.Договор);
		Параметры.Вставить("СчетРасчетовСКомитентом",	РезультатЗапроса.СчетРасчетов);
		Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом",	РезультатЗапроса.СчетАвансов);
		Параметры.Вставить("ВалютаРасчетовСКомитентом", РезультатЗапроса.ВалютаРасчетов);
		ОрганизацияПоПартии = РезультатЗапроса.Организация;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры.СчетРасчетовСКомитентом) тогда
		СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ОрганизацияПоПартии, Параметры.Комитент, Параметры.ДоговорКомиссии);
		Параметры.Вставить("СчетРасчетовСКомитентом",	СчетаРасчетов.СчетРасчетовСКомитентом);
		Если НЕ ЗначениеЗаполнено(Параметры.СчетРасчетовСКомитентом) тогда
			Если НЕ ЗначениеЗаполнено(Партия) тогда
				ОбщегоНазначения.ОшибкаПриПроведении("При списании комиссионных товаров не определена партия оприходования.
				|Невозможно определить счет расчетов с комитентом.",Отказ,Заголовок);
			Иначе	
				ОбщегоНазначения.ОшибкаПриПроведении("Невозможно определить счет расчетов с комитентом при списании комиссионных товаров по партии """+Строка(Партия)+"""",Отказ,Заголовок);
			КонецЕслИ;
		Иначе
			Если НЕ ЗначениеЗаполнено(Партия) тогда
				ОбщегоНазначения.СообщитьОбОшибке("При списании комиссионных товаров не определена партия оприходования.
				|Счет расчетов с комитентом определяется по общим настройкам.",,Заголовок);
			Иначе	
				ОбщегоНазначения.СообщитьОбОшибке("В партии комиссионных товаров """+Строка(Партия)+""" не указан счет учета расчетов с комитентом.
				|Счет расчетов с комитентом определяется по реквизитам партии (организация, контрагент, договор).",,Заголовок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Параметры;

КонецФункции // ПараметрыРасчетовСКомитентом()

Процедура ЗачестьАвансПоРасчетамСКомитентом(ДокументОбъект, СтруктураШапкиДокумента, ВыручкаПоБУ, Отказ, Заголовок) экспорт

	ТаблицаВыручкиПоСтроке = ВыручкаПоБУ.СкопироватьКолонки();

	Для каждого СтрокаРасчетов из  ВыручкаПоБУ Цикл

		ТаблицаВыручкиПоСтроке.Очистить();

		СтруктураШапкиДляЗачетаАванса = Новый Структура();

		Для каждого Параметр из СтруктураШапкиДокумента Цикл
			СтруктураШапкиДляЗачетаАванса.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЦикла;

		СтруктураШапкиДляЗачетаАванса.Вставить("СчетУчетаРасчетовСКонтрагентом", СтрокаРасчетов.СчетРасчетовСКомитентом);
		СтруктураШапкиДляЗачетаАванса.Вставить("СчетУчетаРасчетовПоАвансам",     СтрокаРасчетов.СчетРасчетовПоАвансамСКомитентом);

		ДанныеОВалютеРасчетовСКомитентом = МодульВалютногоУчета.ПолучитьКурсВалюты(
			СтрокаРасчетов.ВалютаРасчетовСКомитентом,СтруктураШапкиДокумента.Дата);
		
		Если СтруктураШапкиДокумента.ВалютаДокумента <> СтрокаРасчетов.ВалютаРасчетовСКомитентом Тогда
			СтруктураШапкиДляЗачетаАванса.Вставить("ВалютаДокумента",     СтрокаРасчетов.ВалютаРасчетовСКомитентом);
			СтруктураШапкиДляЗачетаАванса.Вставить("КурсДокумента",       ДанныеОВалютеРасчетовСКомитентом.Курс);
			СтруктураШапкиДляЗачетаАванса.Вставить("КратностьДокумента",  ДанныеОВалютеРасчетовСКомитентом.Кратность);
		КонецЕсли;

		СтруктураШапкиДляЗачетаАванса.Вставить("ВалютаВзаиморасчетов",     СтрокаРасчетов.ВалютаРасчетовСКомитентом);
		СтруктураШапкиДляЗачетаАванса.Вставить("КурсВзаиморасчетов",       ДанныеОВалютеРасчетовСКомитентом.Курс);
		СтруктураШапкиДляЗачетаАванса.Вставить("КратностьВзаиморасчетов",  ДанныеОВалютеРасчетовСКомитентом.Кратность);
		СтруктураШапкиДляЗачетаАванса.Вставить("Контрагент",               СтрокаРасчетов.Комитент);
		СтруктураШапкиДляЗачетаАванса.Вставить("ДоговорКонтрагента",       СтрокаРасчетов.ДоговорКомиссии);
		СтруктураШапкиДляЗачетаАванса.Вставить("ВидДоговора",              Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		СтруктураШапкиДляЗачетаАванса.Вставить("РасчетыВУсловныхЕдиницах", СтрокаРасчетов.ДоговорКомиссии.РасчетыВУсловныхЕдиницах);
		СтруктураШапкиДляЗачетаАванса.Вставить("ВидОперации",              "КомиссионнаяВыручка");

		СтрокаТаблицыВыручки = ТаблицаВыручкиПоСтроке.Добавить();

		Для каждого Колонка из ТаблицаВыручкиПоСтроке.Колонки Цикл
			СтрокаТаблицыВыручки[Колонка.Имя] = СтрокаРасчетов[Колонка.Имя];
		КонецЦикла;
		
		ТаблицыДокумента = Новый Структура("ВыручкаПоКомиссии", ТаблицаВыручкиПоСтроке);
		Проводки         = ДокументОбъект.Движения.Хозрасчетный;
		
		// Зачет авансов
		СтруктураШапкиДляЗачетаАванса.Вставить("СпособЗачетаАвансов", Перечисления.СпособыЗачетаАвансов.Автоматически);
		ТаблицаЗачетаАванса = Новый ТаблицаЗначений;
		
		ЗачестьАвансКонтрагента(
			СтруктураШапкиДляЗачетаАванса, ТаблицыДокумента, ТаблицаЗачетаАванса, Проводки, Истина, Отказ, Заголовок);

	КонецЦикла;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ ПОЛЬЗОВАТЕЛЯ (ОТСУТСТВУЮТ НА СЕРВЕРЕ И ВО ВНЕШНЕМ СОЕДИНЕНИИ)

#Если Клиент Тогда

////////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

Процедура ОбработкаПодбораЗадолженностей(СтрокаПлатеж,РасшифровкаПлатежа,ЗначениеВыбора,
										ПлатежиСписком,КурсДокумента,КратностьДокумента) Экспорт

	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ДоговорКонтрагента",ЗначениеВыбора.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("Сделка",ЗначениеВыбора.Сделка);

	СтрокаРасшифровки = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(РасшифровкаПлатежа, СтруктураОтбора);

	Если СтрокаРасшифровки <> Неопределено Тогда

		СтрокаПлатеж=СтрокаРасшифровки;
		СтрокаПлатеж.СуммаПлатежа            = ЗначениеВыбора.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетов      = ЗначениеВыбора.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = ЗначениеВыбора.КратностьВзаиморасчетов;
		СтрокаПлатеж.СуммаВзаиморасчетов     = ЗначениеВыбора.СуммаВзаиморасчетов;

	Иначе

		Если НЕ (РасшифровкаПлатежа.Количество() = 1 И НЕ ПлатежиСписком) Тогда
			СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
		КонецЕсли;

		СтрокаПлатеж.ДоговорКонтрагента      = ЗначениеВыбора.ДоговорКонтрагента;
		СтрокаПлатеж.Сделка                  = ЗначениеВыбора.Сделка;
		СтрокаПлатеж.СуммаПлатежа            = ЗначениеВыбора.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетов      = ЗначениеВыбора.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = ЗначениеВыбора.КратностьВзаиморасчетов;
		СтрокаПлатеж.СуммаВзаиморасчетов     = ЗначениеВыбора.СуммаВзаиморасчетов;

	КонецЕсли;

КонецПроцедуры // ОбработкаПодбораЗадолженностей()

Процедура ВыборРасчетногоДокумента(СтруктураПараметров,Элемент,ТипыДокументов) Экспорт

	ФормаВыбора = Документы.ДокументРасчетовСКонтрагентом.ПолучитьФорму("ФормаВыбора",Элемент);

	ФормаВыбора.Организация        = СтруктураПараметров.Организация;
	ФормаВыбора.Контрагент         = СтруктураПараметров.Контрагент;
	ФормаВыбора.ДоговорКонтрагента = СтруктураПараметров.ДоговорКонтрагента;
	ФормаВыбора.Счет               = СтруктураПараметров.СчетДляОпределенияОстатков;
	ФормаВыбора.ОстаткиОбороты     = ?(СтруктураПараметров.СторонаСчета = "Дт", 0, 1);
	Если СтруктураПараметров.Свойство("РежимОтбораДокументов") Тогда 
		ФормаВыбора.РежимОтбораДокументов = СтруктураПараметров.РежимОтбораДокументов;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.мТипыДокументов    = ТипыДокументов;
	
	Если СтруктураПараметров.Свойство("ЭтоНовыйДокумент") Тогда 
		Если СтруктураПараметров.ЭтоНовыйДокумент Тогда
			ФормаВыбора.КонПериода         = КонецДня(РабочаяДата);
		Иначе
			ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
		КонецЕсли;
	Иначе
		ФормаВыбора.КонПериода         = СтруктураПараметров.КонецПериода;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
		ФормаВыбора.НачПериода         = СтруктураПараметров.НачалоПериода;
		ФормаВыбора.мПереданИнтервал = Истина;
	Иначе
		ФормаВыбора.мПереданИнтервал = Ложь;
	КонецЕсли; 

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ВыборСчетаНаОплату(СтруктураПараметров, Элемент) Экспорт

	ФормаВыбора = Документы.СчетНаОплатуПокупателю.ПолучитьФормуВыбора(, Элемент);

	ФормаВыбора.Отбор.Организация.Установить(СтруктураПараметров.Организация);
	ФормаВыбора.Отбор.Контрагент.Установить(СтруктураПараметров.Контрагент);
	ФормаВыбора.Отбор.ДоговорКонтрагента.Установить(СтруктураПараметров.ДоговорКонтрагента);
	
	ФормаВыбора.Открыть();

КонецПроцедуры

#КонецЕсли


