Процедура ВыполнитьОбменДаннымиДляНастройкиОбмена(КодНастройки) Экспорт
			
КонецПроцедуры

Процедура ВыполнитьОтложенныеДвиженияДляНастройкиОбмена(КодНастройки) Экспорт
			
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиДляНастройкиАвтоматическогоОбменаДанными(КодНастройки) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Справочники.НастройкиВыполненияОбмена.НайтиПоКоду(КодНастройки);
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена)
		ИЛИ НастройкаОбмена.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(НастройкаОбмена, Ложь);
	
КонецПроцедуры

///////////////////////////////////////////
// Процедуры регламентного обновления конфигурации ИБ
//


// Функция выделяет необходимые части из строки запуска
//
Функция ВыделитьПодстрокуСтрокиЗапуска(СтрокаЗапуска, КлючПодстроки)

	НомерПервогоСимвола = Найти(ВРег(СтрокаЗапуска), ВРег(КлючПодстроки)) + СтрДлина(КлючПодстроки);
	Для Счетчик = НомерПервогоСимвола По СтрДлина(СтрокаЗапуска) Цикл
		Если Сред(СтрокаЗапуска, Счетчик, 1) = ";" Тогда
			НомерПоследнегоСимвола = Счетчик - 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Получаем искомую подстроку
	ИскомаяПодстрока = Сред(СтрокаЗапуска, НомерПервогоСимвола, (НомерПоследнегоСимвола - НомерПервогоСимвола + 1));
	Если Сред(ИскомаяПодстрока, 1, 1) = """" Тогда
		// Если подстрока в кавычках, то выделяем их
		ИскомаяПодстрока = Сред(ИскомаяПодстрока, 2, (СтрДлина(ИскомаяПодстрока) - 2));
	КонецЕсли;
	
	Возврат ИскомаяПодстрока;

КонецФункции // ВыделитьПодстроку()

// Процедура производит действия, приводящие к регламентному обновлению ИБ,
// но только для серверного варианта
Процедура ОбновлениеКонфигурации() Экспорт

	СтруктураОбновленияИБ = Константы.НастройкаОбновленияКонфигурации.Получить().Получить();
	Если ТипЗнч(СтруктураОбновленияИБ) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию Тогда
		ФайлОбновления = Константы.ФайлКонфигурацииДляОбновления.Получить().Получить();
		Если ТипЗнч(ФайлОбновления) = Тип("ДвоичныеДанные") Тогда
			ПутьКФайлу = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".cf";
			ФайлОбновления.Записать(ПутьКФайлу);
			СтруктураОбновленияИБ.Вставить("ФайлОбновленияКонфигурации", ПутьКФайлу);
			СтруктураОбновленияИБ.Вставить("ОписаниеФайлаОбновленияКонфигурации", Константы.ОписаниеФайлаКонфигурацииДляОбновления.Получить());
		Иначе
			СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	
	СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
	Если СтрЧислоВхождений(ВРег(СтрокаСоединения), "FILE=") Тогда
		Возврат;
	КонецЕсли;
	
	СтрДлина = СтрДлина(СтрокаСоединения);
	
	// Ищем имя сервера
	СтрокаСервера = ВыделитьПодстрокуСтрокиЗапуска(СтрокаСоединения, "Srvr=");
	// Если в имени сервера присутствует имя порта, то выделяем его
	РазделительПорта = Найти(СтрокаСервера, ":");
	Если РазделительПорта > 0 Тогда
		ИмяСервера = Сред(СтрокаСервера, 1, (РазделительПорта - 1));
		НомерПортаКластера = Сред(СтрокаСервера, (РазделительПорта + 1));
	Иначе
		ИмяСервера = СтрокаСервера;
		ком = Новый COMОбъект(УправлениеСоединениямиИБ.ИмяCOMСоединителя());
		НомерПортаКластера = ком.RMngrPortDefault;
	КонецЕсли; 
	
	// Ищем имя ИБ
	ИмяИБ = ВыделитьПодстрокуСтрокиЗапуска(СтрокаСоединения, "Ref=");
	
	ТекстСообщенияБлокировки = СтруктураОбновленияИБ.СообщениеОБлокировкеИБ;
	ПараметрБлокировки = СтруктураОбновленияИБ.ПараметрБлокировкиИБ;
	ИмяАдминистратораКластера = СтруктураОбновленияИБ.ИмяАдминистратораКластера;
	ПарольАдминистратораКластера = СтруктураОбновленияИБ.ПарольАдминистратораКластера;
	ИмяАдминистратораИБ = СтруктураОбновленияИБ.ИмяАдминистратораИБ;
	ИсполняемыйФайлКлиентаНаСервере = СтруктураОбновленияИБ.ИсполняемыйФайлКлиентаНаСервере;
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяАдминистратораИБ);
	НовыйПароль = Лев(Строка(Новый УникальныйИдентификатор), 20);
	Пользователь.Пароль = НовыйПароль;
	Пользователь.Записать();
	ПарольАдминистратораИБ = НовыйПароль;
	
	ПутьКФайлуЖурнала = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".txt";
	
	ШаблонТекста = ПолучитьОбщийМакет("МакетФайлаОбновленияКонфигурации");
	
	КонечныйТекст = ШаблонТекста.ПолучитьОбласть("ОбластьДоОбновленияКонфигурации");
	КонечныйТекст.УдалитьСтроку(1);
	КонечныйТекст.УдалитьСтроку(КонечныйТекст.КоличествоСтрок());
	Если СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию Тогда
		ПромТекст = ШаблонТекста.ПолучитьОбласть("ОбластьЗагрузкиИзмененнойКонфигурации");
		ПромТекст.УдалитьСтроку(1);
		ПромТекст.УдалитьСтроку(ПромТекст.КоличествоСтрок());
		КонечныйТекст.УстановитьТекст(КонечныйТекст.ПолучитьТекст() + ПромТекст.ПолучитьТекст());
	КонецЕсли;
	Если СтруктураОбновленияИБ.ОбновлятьКонфигурациюИБ Тогда
		ПромТекст = ШаблонТекста.ПолучитьОбласть("ОбластьОбновленияКонфигурацииБД");
		ПромТекст.УдалитьСтроку(1);
		ПромТекст.УдалитьСтроку(ПромТекст.КоличествоСтрок());
		КонечныйТекст.УстановитьТекст(КонечныйТекст.ПолучитьТекст() + ПромТекст.ПолучитьТекст());
	КонецЕсли;
	ПромТекст = ШаблонТекста.ПолучитьОбласть("ОбластьПослеОбновленияКонфигурации");
	ПромТекст.УдалитьСтроку(1);
	ПромТекст.УдалитьСтроку(ПромТекст.КоличествоСтрок());
	КонечныйТекст = КонечныйТекст.ПолучитьТекст() + ПромТекст.ПолучитьТекст();
	
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ServerName]", """" + ИмяСервера + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[KlasterPortNumber]", СтрЗаменить(Строка(НомерПортаКластера), Символы.НПП, ""));
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[InfoBaseName]", """" + ИмяИБ + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[LockMessageText]", """" + ТекстСообщенияБлокировки + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[LockPermissionCode]", """" + ПараметрБлокировки + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ClasterAdminName]", """" + ИмяАдминистратораКластера + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ClasterAdminPass]", """" + ПарольАдминистратораКластера + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[InfoBasesAdminName]", """" + ИмяАдминистратораИБ + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[InfoBasesAdminPass]", """" + ПарольАдминистратораИБ + """");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[NewPass]", """" + Лев(Строка(Новый УникальныйИдентификатор), 20) + """");
	
	// ВАЖНО!!! Это же время (5 минут) прописано как задержка проверки в механизме завершения работы пользователей, ГлобальныйМодуль.КонтрольРежимаЗавершенияРаботыПользователей()
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[TimeBeginLock]", "CDate(""" + Формат((ТекущаяДата() + 60*5), "ДФ=""дд/ММ/гггг ЧЧ:мм:сс""") + """)");
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[TimeEndLock]", "CDate(""" + Формат((ТекущаяДата() + 60*5 + 60*60*2), "ДФ=""дд/ММ/гггг ЧЧ:мм:сс""") + """)");
	
	Если СтруктураОбновленияИБ.ЗагружатьИзмененнуюКонфигурацию Тогда
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[Cfg]", """" + СтруктураОбновленияИБ.ФайлОбновленияКонфигурации + """");
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ОписаниеФайлаОбновленияКонфигурации]", """" + СтруктураОбновленияИБ.ОписаниеФайлаОбновленияКонфигурации + """");
	Иначе
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[Cfg]", """" + "" + """");
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[ОписаниеФайлаОбновленияКонфигурации]", """" + "" + """");
	КонецЕсли; 
	Если ТипЗнч(ИсполняемыйФайлКлиентаНаСервере) = Тип("Строка") И НЕ ПустаяСтрока(ИсполняемыйФайлКлиентаНаСервере) Тогда
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[v8exe]", """" + ИсполняемыйФайлКлиентаНаСервере + """");
	Иначе
		КонечныйТекст = СтрЗаменить(КонечныйТекст, "[v8exe]", """" + КаталогПрограммы() + "1cv8.exe" + """");
	КонецЕсли; 
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[Out]", """" + ПутьКФайлуЖурнала + """");

	ИмяВременногоФайла = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + ".vbs";
	КонечныйТекст = СтрЗаменить(КонечныйТекст, "[FilePath]", """" + ИмяВременногоФайла + """");
	
	Скрипт = Новый ТекстовыйДокумент;
	Скрипт.Вывод = ИспользованиеВывода.Разрешить;
	Скрипт.УстановитьТекст(КонечныйТекст);
	Скрипт.Записать(ИмяВременногоФайла, КодировкаТекста.Системная);
	
	Ком = Новый COMObject("wScript.Shell");
	Ком.Run("""" + ИмяВременногоФайла + """");
	
КонецПроцедуры

// Процедура выполняет пересчет регистров накопления, для удаления нулевых записей
Процедура ПересчетИтоговРегистровНакопленияБухгалтерии() Экспорт

	НаДату = НачалоМесяца(ТекущаяДата())-1;	
	ПересчетРегистров(РегистрыНакопления, НаДату, Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки);
	ПересчетРегистров(РегистрыБухгалтерии, НаДату);	
	
КонецПроцедуры

Процедура ПересчетРегистров(МенеджерРегистров, НаДату, ОграничениеПоВидуРегистра = Неопределено)
	
	Для Каждого МенеджерРегистра ИЗ МенеджерРегистров Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(МенеджерРегистра));
		
		Если ОграничениеПоВидуРегистра <> Неопределено И МетаданныеРегистра.ВидРегистра <> ОграничениеПоВидуРегистра Тогда
			Продолжить;
		КонецЕсли;
		ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПересчитатьРегистрПоДате(МенеджерРегистра, НаДату)
	
	Если МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов()<НаДату Тогда
		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(НаДату);
	Иначе
		МенеджерРегистра.ПересчитатьИтоги();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеИндексаПолнотекстовогоПоиска() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Если НЕ ПолнотекстовыйПоиск.ИндексАктуален() Тогда
			Попытка	
				ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
				УровеньЖурналаРегистрации.Информация, , ,
				"Начато регламентное индексирование порции");
				
				ПолнотекстовыйПоиск.ОбновитьИндекс(Ложь, Истина);
				
				ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
				УровеньЖурналаРегистрации.Информация, , ,
				"Закончено регламентное  индексирование порции");
			Исключение
				ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
				УровеньЖурналаРегистрации.Ошибка, , ,
				"Во время регламентного обновления индекса произошла неизвестная ошибка");
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
Конецпроцедуры


Процедура СлияниеИндексаПолнотекстовогоПоиска() Экспорт
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		
		Попытка	
			ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Начато регламентное слияние индексов");
				
			ПолнотекстовыйПоиск.ОбновитьИндекс(Истина);
				
			ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Информация, , ,
			"Закончено регламентное слияние индексов");
		Исключение
			ЗаписьЖурналаРегистрации("Полнотекстовое индексирование", 
			УровеньЖурналаРегистрации.Ошибка, , ,
			"Во время регламентного слияния индекса произошла неизвестная ошибка");
		КонецПопытки;
		
	КонецЕсли;
	
Конецпроцедуры

Процедура УстановкаДатыАктуальностиУчета_Старая(Организация) Экспорт
	
	// попытаемся найти фоновое задание, которое вызвало обработку
	Организация = Неопределено;
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Состояние, ИмяМетода",СостояниеФоновогоЗадания.Активно, "МодульРегламентныхЗаданий.УстановкаДатыАктуальностиУчета"));
	Если МассивФоновыхЗаданий.Количество()<>0 Тогда
		
		// в качестве ключа фоновых заданий этого типа выступает
		// строковое представление уникального идентификатора организации
		Ключ = МассивФоновыхЗаданий[0].Ключ;
		// попробуем найти организацию по ключу
		ВыборкаПоОрганизации = Справочники.Организации.Выбрать();
		Пока ВыборкаПоОрганизации.Следующий() Цикл
			Если Ключ = Строка(ВыборкаПоОрганизации.Ссылка.УникальныйИдентификатор()) Тогда
				Организация = ВыборкаПоОрганизации.Ссылка;
				прервать;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписьЖурналаРегистрации("Проверка фоновых заданий", УровеньЖурналаРегистрации.Информация, , , "Запуск фонового задания"+ МассивФоновыхЗаданий[0].Ключ+" в "+ТекущаяДата());
		
	КонецЕсли;
	
	// для проведения документов сначала необходимо будет установить
	// дату актуальности учета как текущую, однако во время проведения
	// документов может произойти ошибка и необходимо будет вернуть дату
	// актуальности в исходное состояние. В этом нам поможет таблица
	ТаблицаАктуальности = Новый ТаблицаЗначений;
	ТаблицаАктуальности.Колонки.Добавить("Организация");
	ТаблицаАктуальности.Колонки.Добавить("РазделУчета");
	ТаблицаАктуальности.Колонки.Добавить("Дата");
	ТаблицаАктуальности.Индексы.Добавить("Организация, РазделУчета");
	
	ДатаАктуальностиУчета = РегистрыСведений.ДатаАктуальностиУчета;
	Выборка = ДатаАктуальностиУчета.Выбрать();
	ДатаВыполнения = ТекущаяДата();
	ДатаНачала = ДатаВыполнения;
	// определяем дату, с которой необходимо перепроводить документы
	// параллельно устанавливаем для существующих записей новую дату
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Организация) Тогда
			Если Выборка.Организация<>Организация Тогда
				продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		
		Для Каждого РазделУчета Из Метаданные.РегистрыСведений.ДатаАктуальностиУчета.Ресурсы Цикл
			
			Если ДатаНачала > Выборка[РазделУчета.Имя] ТОгда
				ДатаНачала = Выборка[РазделУчета.Имя];
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаАктуальности.Добавить();
			СтрокаТаблицы.Организация = Выборка.Организация;
			СтрокаТаблицы.РазделУчета = РазделУчета.Имя;
			СтрокаТаблицы.Дата = Выборка[РазделУчета.Имя];
			
			Запись[РазделУчета.Имя] = ДатаВыполнения;
		
		КонецЦикла;
		
		Запись.Записать();
		
	КонецЦикла;
	
	// формируем текст запроса по документам
	Если НЕ ДатаНачала = ДатаВыполнения Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
			
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ Проведен И Дата >= &ДатаНач";
			
			Запрос.Текст = Запрос.Текст + " И Дата <= &ДатаКон";
			
			Если Организация <> Неопределено И ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
				Если ТипЗнч(Организация) = Тип("Массив") Тогда
					Запрос.Текст = Запрос.Текст + " И Организация В (&Организация)";
				Иначе
					Запрос.Текст = Запрос.Текст + " И Организация = &Организация";
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаВыполнения));
		
		ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
		ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
		ВсегоДокументов = ТаблицаДокументов.Количество();
		
		// очищаем движения документов
		Для Каждого СтрокаДокумента ИЗ ТаблицаДокументов Цикл
			
			Регистратор = СтрокаДокумента.Ссылка;
			КоллекцияДвижений = Метаданные.Документы[СтрокаДокумента.ИмяДокумента].Движения;
			НачатьТранзакцию();
			Для Каждого НаборМетаданные ИЗ КоллекцияДвижений Цикл
				Набор = ПолучитьНаборЗаписей(НаборМетаданные);
				Набор.Отбор.Регистратор.Установить(Регистратор);
				Набор.Записать();
				Запрос.УстановитьПараметр(СтрокаДокумента.ИмяДокумента + "Ссылка", Регистратор);
				Запрос.УстановитьПараметр(СтрокаДокумента.ИмяДокумента + "Дата", СтрокаДокумента.Дата);
			КонецЦикла;
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;	
		
		ЗавершеноСОшибкой = Ложь;
		
		Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
			СтрокаДокумента = ТаблицаДокументов[индекс];
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			
			// попытаемся записать и провести документ
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			// прервем цикл и установим признак невозможности завершения
			Исключение
				
				ЗавершеноСОшибкой = Истина;
				Прервать;
				
			КонецПопытки;
			
		КонецЦикла;
		// в случае невозможности проведения документов, вернем старые
		// значения даты актуальности
		Если ЗавершеноСОшибкой Тогда
			Выборка = ДатаАктуальностиУчета.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Организация) Тогда
					Если Выборка.Организация<>Организация Тогда
						продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Запись = Выборка.ПолучитьМенеджерЗаписи();
				
				Для Каждого РазделУчета Из Метаданные.РегистрыСведений.ДатаАктуальностиУчета.Ресурсы Цикл
					
					СтрокиАктуальности = ТаблицаАктуальности.НайтиСтроки(Новый Структура("организация,РазделУчета",Выборка.Организация, РазделУчета.Имя));
					Запись[РазделУчета.Имя] = СтрокиАктуальности[0].Дата;
					
				КонецЦикла;
				
				Запись.Записать();
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

Процедура УстановкаДатыАктуальностиУчета(Организация = Неопределено) Экспорт
	
	Перем ДатаНачалаПроведения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаАктуальностиУчета.ОценкаМПЗ,
	|	ДатаАктуальностиУчета.РасчетыСКонтрагентами,
	|	ДатаАктуальностиУчета.НДС,
	|	ДатаАктуальностиУчета.НУ
	|ИЗ
	|	РегистрСведений.ДатаАктуальностиУчета КАК ДатаАктуальностиУчета";
	

	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запрос.Текст = Запрос.Текст + "		
		|ГДЕ
		|	ДатаАктуальностиУчета.Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВЫБОР
		|		КОГДА ДатаАктуальностиУчета.Организация = &Организация
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ";		
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	НоваяДатаАктуальности = КонецДня(ТекущаяДата()) + 1;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаНачалаПроведения = Мин(Выборка.ОценкаМПЗ, Выборка.РасчетыСКонтрагентами, Выборка.НДС, Выборка.НУ);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаПроведения) ИЛИ НачалоДня(ДатаНачалаПроведения) = НоваяДатаАктуальности Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Запись = РегистрыСведений.ДатаАктуальностиУчета.СоздатьМенеджерЗаписи();		
		Запись.Организация = Организация;
		ОбъектКЗаписи = Запись;
	Иначе
		Набор = РегистрыСведений.ДатаАктуальностиУчета.СоздатьНаборЗаписей();
		Запись = Набор.Добавить();
		ОбъектКЗаписи = Набор;
	КонецЕсли;
	Для Каждого РазделУчета Из Метаданные.РегистрыСведений.ДатаАктуальностиУчета.Ресурсы Цикл
		Запись[РазделУчета.Имя] = НоваяДатаАктуальности;
	КонецЦикла;
	ОбъектКЗаписи.Записать();
		
	ОбработкаГрупповогоПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.Создать();
	ОбработкаГрупповогоПерепроведения.ОстанавливатьсяПоОшибке = Ложь;
	ОбработкаГрупповогоПерепроведения.ПерепроведениеДокументов(ДатаНачалаПроведения, , Организация, Истина, Истина);	
	
КонецПроцедуры

Функция ПолучитьНаборЗаписей(НаборМетаданные)
	
	Если Метаданные.РегистрыСведений.Содержит(НаборМетаданные) Тогда
		Набор = РегистрыСведений[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(НаборМетаданные) Тогда
		Набор = РегистрыНакопления[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(НаборМетаданные) Тогда
		Набор = РегистрыБухгалтерии[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(НаборМетаданные) Тогда
		Набор = РегистрыРасчета[НаборМетаданные.Имя].СоздатьНаборЗаписей();
			
	КонецЕсли;	
		
	//мНаборыШаблон.Вставить(НаборМетаданные.Имя, Набор);
		
	Возврат Набор;
	
КонецФункции
