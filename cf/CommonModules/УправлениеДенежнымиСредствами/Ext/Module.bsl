////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает банковский счет по умолчанию. Возвращает состояние установлен/не установлен
//
// Параметры
//  Счет				-	Текущее значение счета
//  ВладелецСчета  		–	<СправочникСсылка.Контрагенты (.Организации)> 
//							Контрагент (организация), счет которого нужно получить
//  Валюта  			–	<СправочникСсылка.Валюты>
//							Валюта регламентированного учета
//  СовпадениеВалюты	–	<Булево>
//                          признак совпадения нужной валюты с указанной, либо исключения ее из поиска
//							По умолчанию ищем счет с указанной валютой.
//
// Возвращаемое значение:
//   <СправочникСсылка.БанковскиеСчета> – найденный счет или пустая ссылка
//
Функция УстановитьБанковскийСчет(Счет,ВладелецСчета, Валюта, СовпадениеВалюты = Истина) Экспорт
	
	НовыйСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	БанковскиеСчета.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК СправочникВладелец
	|		ПО БанковскиеСчета.Владелец = СправочникВладелец.Ссылка
	|			И БанковскиеСчета.Ссылка = СправочникВладелец.ОсновнойБанковскийСчет
	|ГДЕ
	|	БанковскиеСчета.Владелец = &ВладелецСчета
	|	И БанковскиеСчета.ПометкаУдаления = ЛОЖЬ
	|	И (БанковскиеСчета.ВалютаДенежныхСредств = &Валюта
	|				И &СовпадениеВалюты = ИСТИНА
	|			ИЛИ (НЕ БанковскиеСчета.ВалютаДенежныхСредств = &Валюта)
	|				И &СовпадениеВалюты = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецСчета",   ВладелецСчета);
	Запрос.УстановитьПараметр("Валюта", 		 Валюта);
	Запрос.УстановитьПараметр("СовпадениеВалюты",СовпадениеВалюты);
	
	Если ТипЗнч(ВладелецСчета) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Организации", "Справочник.Контрагенты");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат    = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НайденОсновнойСчет = Выборка.Приоритет = 1;
		НайденОдинСчет     = Выборка.Количество() = 1;
		
		Если НайденОсновнойСчет ИЛИ НайденОдинСчет Тогда
			НовыйСчет = Выборка.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Если Счет <> НовыйСчет 
		И ((НЕ ЗначениеЗаполнено(Счет))
			ИЛИ (ТипЗнч(Счет) = Тип("СправочникСсылка.БанковскиеСчета") 
				И Счет.Владелец <> ВладелецСчета)) Тогда
		
		Счет = НовыйСчет;
		Возврат Истина;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ПолучитьБанковскийСчет()



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОПЛАТЫ

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыСКонтрагентами(ВидОперации=Неопределено) Экспорт

	ЕстьРасчеты = (
		    ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		);

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыСКонтрагентами()

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоКредитам(ВидОперации = Неопределено) Экспорт

	ЕстьРасчеты = (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам);

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыПоКредитам()

// Возвращает признак расчетов с контрагентами
//
Функция ЕстьРасчетыПоПлатежнымКартам(ВидОперации = Неопределено) Экспорт

	ЕстьРасчеты = ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам;

	Возврат ЕстьРасчеты;

КонецФункции // ЕстьРасчетыПоПлатежнымКартам()

// Возвращает признак ведения в информационной базе учета по статьям ДДС
//
Функция ЕстьУчетПоСтатьямДДС() Экспорт
	
	Возврат НЕ (ПланыСчетов.Хозрасчетный.Касса.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	
КонецФункции //ЕстьУчетПоСтатьямДДС()

Функция ПодготовитьТаблицуОплат(СтруктураШапкиДокумента) Экспорт

	Перем ВидОперации;

	СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации);
                                      
	Ссылка       = СтруктураШапкиДокумента.Ссылка;
	ВидДокумента = СтруктураШапкиДокумента.ВидДокумента;
	
	ЭтоВозврат   = (БухгалтерскийУчетРасчетовСКонтрагентами.ОпределениеНаправленияДвиженияДляДокументаДвиженияДенежныхСредств(ВидДокумента,ВидОперации).РасчетыВозврат = Перечисления.РасчетыВозврат.Возврат);

	//Зафиксируем расчеты-возврат в структуре шапки документа 
	СтруктураШапкиДокумента.Вставить("ЭтоВозврат",ЭтоВозврат);

	ИмяТабличнойЧасти =?(ВидДокумента="АвансовыйОтчет","ОплатаПоставщикам","РасшифровкаПлатежа");

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",     Ссылка);
	Запрос.УстановитьПараметр("ЭтоВозврат", ЭтоВозврат);
	
	Запрос.УстановитьПараметр("ДокументВВалюте", 
		(СтруктураШапкиДокумента.ВалютаДокумента <> СтруктураШапкиДокумента.ВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("ПриобретениеИностраннойВалюты", 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаПлатежей.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.НеПогашать)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РаспределятьОплату,
	|	ВЫБОР
	|		КОГДА ТаблицаПлатежей.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
	|		ИНАЧЕ ТаблицаПлатежей.СпособПогашенияЗадолженности
	|	КОНЕЦ КАК СпособПогашенияЗадолженности,
	|	ТаблицаПлатежей.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ТаблицаПлатежей.ДоговорКонтрагента,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВидДоговора КАК ВидДоговора,
	|	ТаблицаПлатежей.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ТаблицаПлатежей.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|	ТаблицаПлатежей.КурсВзаиморасчетов,
	|	ТаблицаПлатежей.КратностьВзаиморасчетов,
	|	ТаблицаПлатежей.Сделка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентом
	|	КОНЕЦ КАК СчетОплаты,
	|	ВЫБОР
	|		КОГДА &ЭтоВозврат
	|			ТОГДА ТаблицаПлатежей.СчетУчетаРасчетовСКонтрагентом
	|		ИНАЧЕ ТаблицаПлатежей.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетАванса,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ПриобретениеИностраннойВалюты
	|				ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов
	|			КОГДА &ДокументВВалюте
	|				ТОГДА ТаблицаПлатежей.СуммаВзаиморасчетов * ТаблицаПлатежей.КурсВзаиморасчетов / ТаблицаПлатежей.КратностьВзаиморасчетов
	|			ИНАЧЕ ТаблицаПлатежей.СуммаПлатежа
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаБУ,
	|	ВЫБОР
	|		КОГДА &ПриобретениеИностраннойВалюты
	|			ТОГДА ТаблицаПлатежей.СуммаПлатежа
	|		ИНАЧЕ ТаблицаПлатежей.СуммаВзаиморасчетов
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств КАК СтатьяДДС,
	|	НЕОПРЕДЕЛЕНО КАК НомерВхДок,
	|	НЕОПРЕДЕЛЕНО КАК ДатаВхДок,
	|	ТаблицаПлатежей.СтавкаНДС КАК СтавкаНДС,
	|	НЕОПРЕДЕЛЕНО КАК ОписаниеПроводки,
	|	НЕОПРЕДЕЛЕНО КАК ВидДокВходящий
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,
		"СписаниеСРасчетногоСчета.РасшифровкаПлатежа",
		Строка(ВидДокумента + "." + ИмяТабличнойЧасти));
	
	Если ВидДокумента="АвансовыйОтчет" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"СуммаПлатежа","Сумма");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТаблицаПлатежей.СтатьяДвиженияДенежныхСредств","Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"ТаблицаПлатежей.СтавкаНДС","Неопределено");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК НомерВхДок","ТаблицаПлатежей.НомерВходящегоДокумента КАК НомерВхДок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ДатаВхДок","ТаблицаПлатежей.ДатаВходящегоДокумента КАК ДатаВхДок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ВидДокВходящий","ТаблицаПлатежей.ВидДокВходящий КАК ВидДокВходящий");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"НЕОПРЕДЕЛЕНО КАК ОписаниеПроводки","ТаблицаПлатежей.Содержание КАК СодержаниеПроводки");
	КонецЕсли; 
	
	РеестрПлатежей = Запрос.Выполнить().Выгрузить();
	
	// {УчетДоходовИРасходовИП
	//Формирование реквизитов документа, подтверждающего расходы предпринимателя
	Если ВидДокумента="АвансовыйОтчет" Тогда
		РеестрПлатежей.Колонки.Добавить("РеквизитыДокументаОплаты", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(50));
		Для Каждого Платеж Из РеестрПлатежей Цикл
			Платеж.РеквизитыДокументаОплаты = ДоходыИРасходыПредпринимателя.РеквизитыДокументаОплатыСтр(Платеж.НомерВхДок, Платеж.ДатаВхДок);
		КонецЦикла;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	//Дополнение информацией о корр. счете
	РеестрПлатежей.Колонки.Добавить("КоррСчет",Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
	РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.КоррСчет,"КоррСчет");
	
	Для НомерСубконто = 1 По 3 Цикл
		РеестрПлатежей.Колонки.Добавить("КоррСубконто"+НомерСубконто);
	КонецЦикла; 

	РеестрПлатежей.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Если СтруктураШапкиДокумента.Свойство("ПодразделениеРасчетов") Тогда
		РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ПодразделениеРасчетов, "Подразделение");
	КонецЕсли;
	
	РеестрПлатежей.Колонки.Добавить("КоррПодразделение", Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
	Если СтруктураШапкиДокумента.Свойство("КоррПодразделение") Тогда
		РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.КоррПодразделение, "КоррПодразделение");
	КонецЕсли;

	Для каждого Субконто из СтруктураШапкиДокумента.КоррСчет.ВидыСубконто Цикл

		Если Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств тогда
			РеестрПлатежей.ЗагрузитьКолонку(РеестрПлатежей.ВыгрузитьКолонку("СтатьяДДС"),"КоррСубконто"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.СчетОрганизации,"КоррСубконто"+Субконто.НомерСтроки);
		ИначеЕсли Субконто.ВидСубконто =  ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций тогда
			РеестрПлатежей.ЗаполнитьЗначения(СтруктураШапкиДокумента.ФизЛицо,"КоррСубконто"+Субконто.НомерСтроки);
		Иначе
			// ОбщегоНазначения.СообщитьОбОшибке("Субконто """+Строка(Субконто.ВидСубконто)+""" по счету """+Строка(КоррСчет)+""" не заполнено!",Ложь,"");
		КонецЕсли;

	КонецЦикла;

	Для каждого СтрокаПлатежа из РеестрПлатежей Цикл

		Если НЕ ЗначениеЗаполнено(СтрокаПлатежа.ДокументРасчетов) Тогда
			СтрокаПлатежа.ДокументРасчетов = Неопределено;
		КонецЕсли;
		
		Если ВидДокумента="АвансовыйОтчет" Тогда
			 СтрокаПлатежа.СодержаниеПроводки = СтрокаПлатежа.СодержаниеПроводки + " по " + СтрокаПлатежа.ВидДокВходящий + " " + СтрокаПлатежа.НомерВхДок + " от " + Формат(СтрокаПлатежа.ДатаВхДок, "ДЛФ=Д");
		КонецЕсли;
		
	КонецЦикла;

	Возврат РеестрПлатежей;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции диалогов расчетных документов

Функция ОграничитьТипыДокументовДляДокументовОплаты(Элемент, БазовоеОписаниеТипа,ЭтоВозврат = Ложь) Экспорт

	УдаляемыеТипыДокументовПоВидуОперации = Новый СписокЗначений();
	СписокТиповКУдалению                  = Новый Массив;
	БазовыеТипыДокументов                 = БазовоеОписаниеТипа.Типы();

	Если ЭтоВозврат тогда
		//Удалить документы приобретения, реализации
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаОС"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ГТДИмпорт"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ОтчетКомиссионераОПродажах"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ОтчетКомитентуОПродажах"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПередачаНМА"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияТоваровУслуг"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеДопРасходов"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПоступлениеИзПереработки"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РеализацияУслугПоПереработке"));
	Иначе
		//Удалить документы оплаты и возвратов
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.АвансовыйОтчет"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));

		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"));
		УдаляемыеТипыДокументовПоВидуОперации.Добавить(Тип("ДокументСсылка.ВозвратТоваровОтПокупателя"));
	КонецЕсли;

	Размерность = БазовыеТипыДокументов.Количество();
	Для НомерЭлемента = 1 по Размерность Цикл
		РезультатПоиска = УдаляемыеТипыДокументовПоВидуОперации.НайтиПоЗначению(БазовыеТипыДокументов[Размерность-НомерЭлемента]);
		Если Не РезультатПоиска = Неопределено тогда
			СписокТиповКУдалению.Добавить(РезультатПоиска.Значение);
		КонецЕсли;
	КонецЦикла;

	//Установка ограничения типов для поля "РасчетныйДокумент"
	ОграниченныйТип = Новый ОписаниеТипов(БазовоеОписаниеТипа,,СписокТиповКУдалению);

	Элемент.ОграничениеТипа = ОграниченныйТип;

	Возврат СписокТиповКУдалению;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ИНТЕРФЕЙСОМ

#Если Клиент Тогда

Функция ЕстьНезаполненныйРеквизитДокумента(ИмяРеквизита, ДокументОбъект, МетаданныеОбъекта)

	Результат = ОбщегоНазначения.ЕстьРеквизитДокумента(ИмяРеквизита, МетаданныеОбъекта)
	   И НЕ ЗначениеЗаполнено(ДокументОбъект[ИмяРеквизита]);
	   
	Возврат Результат;

КонецФункции // ЕстьНезаполненныйРеквизитДокумента()

Функция ЕстьНезаполненныйРеквизитТабЧастиДокумента(ИмяРеквизита, СтрокаТабЧасти, МетаданныеОбъекта, ИмяТабЧасти)

	Результат = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеОбъекта, ИмяТабЧасти) 
	   И НЕ ЗначениеЗаполнено(СтрокаТабЧасти[ИмяРеквизита]);
	   
	Возврат Результат;

КонецФункции // ЕстьНезаполненныйРеквизитТабЧастиДокумента()

// Заполняет реквизиты расчетного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета = Неопределено, ПараметрОбъектКопирования = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Реквизиты, которые требуется заполнить значениями по умолчанию в том числе и при копировании
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;
	
	Если НЕ ПараметрОбъектКопирования = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РасшифровкаПлатежа = ДокументОбъект.РасшифровкаПлатежа;
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаПлатеж = РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаПлатеж = РасшифровкаПлатежа[0];
	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("Организация", ДокументОбъект, МетаданныеДокумента) Тогда
	  
		ДокументОбъект.Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		
	КонецЕсли;
	
	Если ЕстьНезаполненныйРеквизитДокумента("ВидОперации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитТабЧастиДокумента("СтавкаНДС", СтрокаПлатеж, МетаданныеДокумента, "РасшифровкаПлатежа") Тогда
		СтрокаПлатеж.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.КурсДокумента) Тогда

		СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);

		ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
		ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("СчетОрганизации", ДокументОбъект, МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
		
		Если (ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты)
			И (ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета) Тогда
			
			УстановитьБанковскийСчет(ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ВалютаРегламентированногоУчета, Ложь);
			
			Если ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации) Тогда
			
				ДокументОбъект.ВалютаДокумента = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств;
				
				СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(
					ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
				ДокументОбъект.КурсДокумента      = СтруктураКурсаДокумента.Курс;
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;	

			КонецЕсли;
			
		Иначе
			
			УстановитьБанковскийСчет(ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента);
			
		КонецЕсли;
		
		
	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("ПодразделениеОрганизации", ДокументОбъект, МетаданныеДокумента) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетОрганизации", МетаданныеДокумента)
			И ТипЗнч(ДокументОбъект.СчетОрганизации) = Тип("СправочникСсылка.БанковскиеСчета") 
			И ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации.ПодразделениеОрганизации) 
			Тогда
			ДокументОбъект.ПодразделениеОрганизации = ДокументОбъект.СчетОрганизации.ПодразделениеОрганизации;
		Иначе
			ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
			Если ЗначениеЗаполнено(ОсновноеПодразделение) 
				И ОсновноеПодразделение.Владелец = ДокументОбъект.Организация 
				Тогда
				ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами(ДокументОбъект.ВидОперации);
	ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам(ДокументОбъект.ВидОперации);

	ДокументОбъект.ЕстьРасчетыСКонтрагентами = ЕстьРасчетыСКонтрагентами;
	ДокументОбъект.ЕстьРасчетыПоКредитам     = ЕстьРасчетыПоКредитам;

	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Если ЕстьНезаполненныйРеквизитДокумента("СчетКонтрагента", ДокументОбъект, МетаданныеДокумента)
			И ЗначениеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
			И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда

			ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
			
			ОсновнойДоговорКонтрагента = УправлениеПользователями.ДоступныйДоговорКонтрагента(ДокументОбъект.Контрагент.ОсновнойДоговорКонтрагента);
			
			Если НЕ УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ДокументОбъект.ВидОперации).НайтиПоЗначению(ОсновнойДоговорКонтрагента.ВидДоговора)=Неопределено Тогда

				Если ДокументОбъект.Организация.Пустая() Тогда
					СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
					Организация = ОсновнойДоговорКонтрагента.Организация;
				ИначеЕсли ОсновнойДоговорКонтрагента.Организация.Пустая()
					ИЛИ ОсновнойДоговорКонтрагента.Организация=ДокументОбъект.Организация Тогда
					СтрокаПлатеж.ДоговорКонтрагента = ОсновнойДоговорКонтрагента;
				КонецЕсли;

			КонецЕсли;

			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(
				СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

			Если ЕстьНезаполненныйРеквизитДокумента("ВалютаДокумента", ДокументОбъект, МетаданныеДокумента) 
				И НЕ СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
				ДокументОбъект.ВалютаДокумента = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КонецЕсли;

		КонецЕсли; // Договор

	КонецЕсли; // Контрагент

	Если ЕстьНезаполненныйРеквизитДокумента("СчетБанк", ДокументОбъект, МетаданныеДокумента) Тогда
		ЗаполнитьСчетУчетаДенежныхСредств(ДокументОбъект, "СчетБанк");
	ИначеЕсли ЕстьНезаполненныйРеквизитДокумента("СчетКасса", ДокументОбъект, МетаданныеДокумента) Тогда
		ЗаполнитьСчетУчетаДенежныхСредств(ДокументОбъект, "СчетКасса");
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыРасчетногоДокумента()

// Заполняет реквизиты платежного документа значениями по умолчанию
//
Процедура ЗаполнитьРеквизитыПлатежногоДокумента(ДокументОбъект, ТекПользователь, ВалютаРегламентированногоУчета, ПараметрОбъектКопирования = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// Реквизиты, которые требуется заполнить значениями по умолчанию в том числе и при копировании
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("Ответственный", МетаданныеДокумента) Тогда
		ДокументОбъект.Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнойОтветственный");
	КонецЕсли;
	
	Если ПараметрОбъектКопирования <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("Организация", ДокументОбъект, МетаданныеДокумента) Тогда
	  
		ДокументОбъект.Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		
	КонецЕсли;
	
	Если ЕстьНезаполненныйРеквизитДокумента("ВидОперации", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ВидОперации = Перечисления[ДокументОбъект.ВидОперации.Метаданные().Имя][0];
	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("СтавкаНДС", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("ВалютаДокумента", ДокументОбъект, МетаданныеДокумента) Тогда
		ДокументОбъект.ВалютаДокумента = ВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Если ЕстьНезаполненныйРеквизитДокумента("СчетОрганизации", ДокументОбъект, МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда
	   
	   СчетОрганизации = УстановитьБанковскийСчет(ДокументОбъект.СчетОрганизации, ДокументОбъект.Организация, ДокументОбъект.ВалютаДокумента);

	КонецЕсли;

	Если ЕстьНезаполненныйРеквизитДокумента("ПодразделениеОрганизации", ДокументОбъект, МетаданныеДокумента)
	   И ЗначениеЗаполнено(ДокументОбъект.Организация) Тогда

		ОсновноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновноеПодразделениеОрганизации");
		Если ЗначениеЗаполнено(ОсновноеПодразделение) 
			И ОсновноеПодразделение.Владелец = ДокументОбъект.Организация Тогда
			ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
		КонецЕсли;

	КонецЕсли;
	
	Если ЕстьНезаполненныйРеквизитДокумента("СчетКонтрагента", ДокументОбъект, МетаданныеДокумента)
		И ЗначениеЗаполнено(ДокументОбъект.Контрагент.ОсновнойБанковскийСчет) 
		И ДокументОбъект.Контрагент.ОсновнойБанковскийСчет.ВалютаДенежныхСредств = ДокументОбъект.СчетОрганизации.ВалютаДенежныхСредств Тогда
		
		ДокументОбъект.СчетКонтрагента = ДокументОбъект.Контрагент.ОсновнойБанковскийСчет;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьРеквизитыПлатежногоДокумента()

#КонецЕсли

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизитов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПлатежногоДокумента(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
                                            Отказ, Заголовок) Экспорт

	ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();

	ТабличнаяЧасть      = ДокументОбъект[ИмяТабличнойЧасти];
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
	Если (НЕ МетаданныеРеквизиты.Найти("СчетДоходовБУ") = Неопределено)
		И (НЕ МетаданныеРеквизиты.Найти("СчетРасходовБУ") = Неопределено) Тогда
		ПроверятьВидДеятельности = Истина;
	Иначе
		ПроверятьВидДеятельности = Ложь;
	КонецЕсли;
	
	КэшСчетов = Новый Соответствие;
	
	СтрокаНачалаСообщенияОбОшибке = "";
	
	// Цикл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл

		Если ТабличнаяЧасть.Количество() > 1 Тогда
			СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки) +
											""" табличной части """ + ПредставлениеТабличнойЧасти + """: ";
		КонецЕсли;
			
		// Цикл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл

			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда 

				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда //
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";

				Иначе
					СтрокаСообщения = КлючЗначение.Значение;

				КонецЕсли;

				ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);

			КонецЕсли;

		КонецЦикла;
		
		Если ПроверятьВидДеятельности Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы["СчетДоходовБУ"]) ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицы["СчетРасходовБУ"]) Тогда
				//Один из счетов не заполнен, соответствие не проверяется
			Иначе			
				СчетДоходовБУВСтроке = СтрокаТаблицы["СчетДоходовБУ"];
				СчетДоходовБУЕНВД = КэшСчетов[СчетДоходовБУВСтроке];
				Если СчетДоходовБУЕНВД = Неопределено Тогда
					СчетДоходовБУЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетДоходовБУВСтроке);
					КэшСчетов[СчетДоходовБУВСтроке] = СчетДоходовБУЕНВД;					
				КонецЕсли;
				
				СчетРасходовБУВСтроке = СтрокаТаблицы["СчетРасходовБУ"];
				СчетРасходовБУЕНВД = КэшСчетов[СчетРасходовБУВСтроке];
				Если СчетРасходовБУЕНВД = Неопределено Тогда
					СчетРасходовБУЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетРасходовБУВСтроке);
					КэшСчетов[СчетРасходовБУВСтроке] = СчетРасходовБУЕНВД;
				КонецЕсли;
				
				Если НЕ СчетДоходовБУЕНВД = СчетРасходовБУЕНВД Тогда
					СтрокаСообщения = "Счета доходов и расходов для бухгалтерского учета относятся к разным видам деятельности!"; 
					ОбщегоНазначения.ОшибкаПриПроведении(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		Конецесли;

	КонецЦикла;

КонецПроцедуры // ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти()

// Заполняет счет учета денежных средств в документе
// Параметры:
//  ДокументОбъект - <ДокументОбъект> - документ, для которого выполняется операция
//  ИмяРеквизита   - <Строка>         - имя реквизита счета учета денежных средств
//
Процедура ЗаполнитьСчетУчетаДенежныхСредств(ДокументОбъект, ИмяРеквизита = "СчетБанк") Экспорт
	
	ЭтоРублевыйДокумент = ДокументОбъект.ВалютаДокумента = ДокументОбъект.мВалютаРегламентированногоУчета 
		ИЛИ ДокументОбъект.ВалютаДокумента = Справочники.Валюты.ПустаяСсылка();
		
	Если ЭтоРублевыйДокумент Тогда
		Если ИмяРеквизита = "СчетБанк" Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		Иначе
			СчетУчета = ПланыСчетов.Хозрасчетный.КассаОрганизации;
		КонецЕсли;
	Иначе
		Если ИмяРеквизита = "СчетБанк" Тогда
			СчетУчета = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		Иначе
			СчетУчета = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
		КонецЕсли;
	КонецЕсли;
	
    ДокументОбъект[ИмяРеквизита] = СчетУчета;
	
КонецПроцедуры

// Возвращает список статусов отправителя п/п на перечисление в бюджет
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями статуса отправителя
//
Функция ПолучитьСписокСтатусовОтправителя() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("01", "01 - налогоплательщик (плательщик сборов) - юридическое лицо");
	Список.Добавить("02", "02 - налоговый агент");
	Список.Добавить("03", "03 - организация федеральной почтовой связи, оформившая расчетный документ на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами");
	Список.Добавить("04", "04 - налоговый орган");
	Список.Добавить("05", "05 - территориальные органы Федеральной службы судебных приставов");
	Список.Добавить("06", "06 - участник внешнеэкономической деятельности - юридическое лицо");
	Список.Добавить("07", "07 - таможенный орган");
	Список.Добавить("08", "08 - плательщик иных платежей, осуществляющий перечисление платежей в бюджетную систему Российской Федерации (кроме платежей, администрируемых налоговыми органами)");
	Список.Добавить("09", "09 - налогоплательщик (плательщик сборов) – индивидуальный предприниматель");
	Список.Добавить("10", "10 - налогоплательщик (плательщик сборов) – частный нотариус");
	Список.Добавить("11", "11 - налогоплательщик (плательщик сборов) – адвокат, учредивший адвокатский кабинет");
	Список.Добавить("12", "12 - налогоплательщик (плательщик сборов) – глава крестьянского (фермерского) хозяйства");
	Список.Добавить("13", "13 - налогоплательщик (плательщик сборов) – иное физическое лицо – клиент банка (владелец счета)");
	Список.Добавить("14", "14 - налогоплательщик, производящий выплаты физическим лицам (п.п. 1 п.1 ст. 235 Налогового кодекса Российской Федерации)");
	Список.Добавить("15", "15 - кредитная организация, оформившая расчетный документ на общую сумму на перечисление в бюджетную систему Российской Федерации платежей, уплачиваемых физическими лицами без открытия банковского счета");
	Список.Добавить("16", "16 - участник внешнеэкономической деятельности - физическое лицо");
	Список.Добавить("17", "17 - участник внешнеэкономической деятельности - индивидуальный предприниматель");
	Список.Добавить("18", "18 - плательщик таможенных платежей, не являющийся декларантом, на которого законодательством Российской Федерации возложена обязанность по уплате таможенных платежей");
	Список.Добавить("19", "19 - организации, оформившие расчетный документ на перечисление на счет органа Федерального казначейства денежных средств, удержанных из заработка (дохода) должника - физического лица в счет погашения задолженности по таможенным платежам");
	Список.Добавить("20", "20 - кредитная организация, оформившая расчетный документ по каждому платежу физического лица на перечисление таможенных платежей, уплачиваемых физическими лицами без открытия банковского счета");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокСтатусовОтправителя()

// Возвращает список показателей основания п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - платежи текущего года");
	Список.Добавить("ЗД", "ЗД - добровольное погашение задолженности по истекшим налоговым периодам");
	Список.Добавить("БФ","БФ - текущие платежи физических лиц – клиентов банка (владельцев счета), уплачиваемые со своего банковского счета");
	Список.Добавить("ТР", "ТР - погашение задолженности по требованию об уплате налогов (сборов) от налогового органа");
	Список.Добавить("РС", "РС - погашение рассроченной задолженности");
	Список.Добавить("ОТ", "ОТ - погашение отсроченной задолженности");
	Список.Добавить("РТ", "РТ - погашение реструктурируемой задолженности");
	Список.Добавить("ВУ", "ВУ - погашение отсроченной задолженности в связи с введением внешнего управления");
	Список.Добавить("ПР", "ПР - погашение задолженности, приостановленной к взысканию");
	Список.Добавить("АП", "АП - погашение задолженности по акту проверки");
	Список.Добавить("АР", "АР - погашение задолженности по исполнительному документу");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийНалоговогоПлатежа()

// Возвращает список показателей основания п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями основания
//
Функция ПолучитьСписокОснованийТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ДЕ", "ДЕ - таможенная декларация");
	Список.Добавить("ПО", "ПО - таможенный приходный ордер");
	Список.Добавить("КВ", "КВ - постановление-квитанция (при уплате штрафа)");
	Список.Добавить("КТ", "КТ - форма корректировки таможенной стоимости и таможенных платежей");
	Список.Добавить("ИД", "ИД - исполнительный документ");
	Список.Добавить("ИП", "ИП - инкассовое поручение");
	Список.Добавить("ТУ", "ТУ - требование об уплате таможенных платежей");
	Список.Добавить("БД", "БД - документы бухгалтерских служб таможенных органов");
	Список.Добавить("ИН", "ИН - документ инкассации");
	Список.Добавить("КП", "КП - соглашение о взаимодействии при уплате крупными плательщиками суммарных платежей в централизованном порядке");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокОснованийТаможенногоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаНалоговогоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("НС", "НС - уплата налога или сбора");
	Список.Добавить("ПЛ", "ПЛ - уплата платежа");
	Список.Добавить("ГП", "ГП - уплата пошлины");
	Список.Добавить("ВЗ", "ВЗ - уплата взноса");
	Список.Добавить("АВ", "АВ - уплата аванса или предоплата (в том числе декадные платежи)");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");
	Список.Добавить("ПЦ", "ПЦ - уплата процентов");
	Список.Добавить("СА", "СА - налоговые санкции, установленные Налоговым кодексом РФ");
	Список.Добавить("АШ", "АШ - административные штрафы");
	Список.Добавить("ИШ", "ИШ - иные штрафы, установленные соответствующими нормативными актами");
	
	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаНалоговогоПлатежа()

// Возвращает список показателей типа платежа п/п на перечисление в бюджет таможенного платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с возможными значениями типа
//
Функция ПолучитьСписокПоказателейТипаТаможенногоПлатежа() Экспорт
	
	Список = Новый СписокЗначений;
	
	Список.Добавить("ТП", "ТП - текущий платеж");
	Список.Добавить("ШТ", "ШТ - уплата штрафа");
	Список.Добавить("ЗД", "ЗД - уплата в счет погашения задолженности");
	Список.Добавить("ПЕ", "ПЕ - уплата пени");

	Список.Добавить("0", "0 - невозможно указать конкретное значение показателя");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПоказателейТипаТаможенногоПлатежа()

// Возвращает список вариантов периодичности уплаты налогов  п/п на перечисление в бюджет налогового платежа
//
// Возвращаемое значение:
//  СписокЗначений – в котором создаются элементы с вариантами периодичности
//
Функция ПолучитьСписокПериодичностиУплатыНалогов() Экспорт
	
	Список = Новый СписокЗначений;
	Список.Добавить("МС", "МС - месячный платеж");
	Список.Добавить("КВ", "КВ - квартальный платеж");
	Список.Добавить("ПЛ", "ПЛ - полугодовой платеж");
	Список.Добавить("ГД", "ГД - годовой платеж"); 
	Список.Добавить("-",  "Платеж по конкретной дате");
	Список.Добавить("0",  "0 - значение не указывается");
	
	Возврат Список;
	
КонецФункции // ПолучитьСписокПериодичностиУплатыНалогов()

Функция ПолучитьРеквизитыПлатежаВБюджетПоУмолчанию(Дата, Организация, ПеречислениеВБюджет, ВидПеречисленияВБюджет) Экспорт
	
	СтруктураРеквизитов = Новый Структура;
	
	Если ПеречислениеВБюджет Тогда
		
		Если ПустаяСтрока(Организация.КодПоОКАТО) 
			И ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			СтруктураРеквизитов.Вставить("КодОКАТО", "0");
		Иначе
			СтруктураРеквизитов.Вставить("КодОКАТО", Организация.КодПоОКАТО);
		КонецЕсли;
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
			Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				СтруктураРеквизитов.Вставить("СтатусСоставителя", "09");
			Иначе
				СтруктураРеквизитов.Вставить("СтатусСоставителя", "01");
			КонецЕсли;
			
			СписокОснований = ПолучитьСписокОснованийНалоговогоПлатежа();
			СтруктураРеквизитов.Вставить("ПоказательОснования", СписокОснований[0].Значение);
			
			СписокТипов = ПолучитьСписокПоказателейТипаНалоговогоПлатежа();
			СтруктураРеквизитов.Вставить("ПоказательТипа", СписокТипов[0].Значение);
			
			ПоказательПериода = "МС." + Формат(Месяц(Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Дата), "ЧГ=");
			СтруктураРеквизитов.Вставить("ПоказательПериода", ПоказательПериода);
			
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			
			Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
				СтруктураРеквизитов.Вставить("СтатусСоставителя", "17");
			Иначе
				СтруктураРеквизитов.Вставить("СтатусСоставителя", "06");
			КонецЕсли;
			
			СписокОснований = ПолучитьСписокОснованийТаможенногоПлатежа();
			СтруктураРеквизитов.Вставить("ПоказательОснования", СписокОснований[0].Значение);
			
			СписокТипов = ПолучитьСписокПоказателейТипаТаможенногоПлатежа();
			СтруктураРеквизитов.Вставить("ПоказательТипа", СписокТипов[0].Значение);
			
			СтруктураРеквизитов.Вставить("ПоказательПериода", "");
			СтруктураРеквизитов.Вставить("ПоказательНомера",  "0");
			СтруктураРеквизитов.Вставить("ПоказательДаты",    "0");
			
		Иначе
			
			СтруктураРеквизитов.Вставить("СтатусСоставителя",   "08");
			СтруктураРеквизитов.Вставить("ПоказательОснования", "0");
			СтруктураРеквизитов.Вставить("ПоказательТипа",      "0");
			СтруктураРеквизитов.Вставить("ПоказательПериода",   "0");
			СтруктураРеквизитов.Вставить("ПоказательНомера",    "0");
			СтруктураРеквизитов.Вставить("ПоказательДаты",      "0");
			
		КонецЕсли;
	
	Иначе
		
		СтруктураРеквизитов.Вставить("КодБК",               "");
		СтруктураРеквизитов.Вставить("КодОКАТО",            "");
		СтруктураРеквизитов.Вставить("СтатусСоставителя",   "");
		СтруктураРеквизитов.Вставить("ПоказательОснования", "");
		СтруктураРеквизитов.Вставить("ПоказательТипа",      "");
		СтруктураРеквизитов.Вставить("ПоказательПериода",   "");
		СтруктураРеквизитов.Вставить("ПоказательНомера",    "");
		СтруктураРеквизитов.Вставить("ПоказательДаты",      "");
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;

КонецФункции

// Возвращает список программ типа "Клиент банка", имеющих сертификат 1С:Совместимо
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   <СписокЗначений>   - список наименований программ
//
Функция СписокСовместимыхПрограммКлиентовБанка() Экспорт

	СписокКБ = Новый СписокЗначений;
	
	СписокКБ.Добавить("АРМ ""Клиент"" АС ""Клиент-Сбербанк"" Сбербанка России");
	СписокКБ.Добавить("""АРМ удаленного клиента СПЭД""  ВКФ АО ""Банк ТуранАлем""");
	СписокКБ.Добавить("Банк-клиент АКБ ""Лефко-Банк""");
	СписокКБ.Добавить("ИНИСТ Банк-Клиент ЗАО ИНИСТ");
	СписокКБ.Добавить("Клиент банка InterBank v.5.1 R-Style Software Lab");
	СписокКБ.Добавить("Клиент-банк ""BARS"" фирмы ""Оникс Капитал""");
	СписокКБ.Добавить("Клиент-Банк ""ВЕДАНА""");
	СписокКБ.Добавить("Клиент-банк МИБ");
	СписокКБ.Добавить("Клиент-Банк ОАО ""Прио-Внешторгбанк""");	
	СписокКБ.Добавить("Клиент-Банк РФК");
	СписокКБ.Добавить("""Клиент-ТЕЛЕБАНК"" ЗАО ""Степ Ап""");
	СписокКБ.Добавить("Комплекс обмена платежными документами ""Курьер"". ЗАО ""АстраСофт""");
	СписокКБ.Добавить("Система ""iBank 2"" ООО ""БИФИТ""");
	СписокКБ.Добавить("Система ""MailBank"" фирмы ""Системные технологии"" Минск");
	СписокКБ.Добавить("Система ""PSB On-Line"" ОАО ""ПРОМСВЯЗЬБАНК""");
	СписокКБ.Добавить("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
	СписокКБ.Добавить("Система ""Клиент-Банк"" АРМ ""Украина-Клиент""");
	СписокКБ.Добавить("Система ""Клиент-Банк"" ЗАО ""Банк ""Новый Символ""");
	СписокКБ.Добавить("Система Банк-Клиент АКБ ""София""");
	СписокКБ.Добавить("Система ДБО BS-Client");
	СписокКБ.Добавить("Система Клиент-Банк ""BClient""");
	СписокКБ.Добавить("Система клиент-банк TIVAL");
	СписокКБ.Добавить("Система клиент-банк ""Электронный Офис"" ЗАО ""Райффайзенбанк""");
	СписокКБ.Добавить("Система электронных расчетов QuickPay ЗАО АО Кворум");
	СписокКБ.Добавить("ЦФТ - Интернет-банк (Faktura.ru)");
	СписокКБ.Добавить("""Электронный клиент"" АКБ Автобанк");
	СписокКБ.Добавить("""Электронный Офис"" фирмы ""ИМПЭКСБАНК""");
	СписокКБ.Добавить("DiasoftCLIENT 4x4 for Windows Диасофт");
	СписокКБ.Добавить("LanVisit DOS 4.90 Ланит");
	СписокКБ.Добавить("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");
	СписокКБ.Добавить("WinClient фирмы МПИ-Банк");
	СписокКБ.Добавить("""Yugo-Vostok Online"" ОАО БАНК ""ЮГО-ВОСТОК""");
	СписокКБ.Добавить("АРМ ""Электронный клиент"" от НОМОС-БАНК-Сибирь");
	СписокКБ.Добавить("isFront - Система дистанционного управления финансами");
	
	Возврат СписокКБ;
	
КонецФункции 
