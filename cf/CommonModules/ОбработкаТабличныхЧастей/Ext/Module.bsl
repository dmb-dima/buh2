// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, ИмяТабличнойЧасти) И
		ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	    	                                               ?(ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента),ДокументОбъект.УчитыватьНДС,Истина), 
														   ?(ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента),ДокументОбъект.СуммаВключаетНДС,Ложь),
	            	                                       УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуНДСТабЧасти()

// Устанавливает запрет на изменение видимости заданных колонок в заданной коллекции колонок 
// табличного поля
//
// Параметры:
//  Колонки          - коллекция колонок табличного поля,
//  СтруктураКолонок - структура, содержащая имена колонок, видимость которых отключить нельзя
//
Процедура УстановитьИзменятьВидимостьКолонокТабЧасти(Колонки, СтруктураКолонок) Экспорт

	// устанавливаем стандартные запреты на изменение видимости колонок
	Для каждого КолонкаТаблицы из Колонки Цикл
		КолонкаТаблицы.ИзменятьВидимость = НЕ СтруктураКолонок.Свойство(КолонкаТаблицы.Имя);
	КонецЦикла;

КонецПроцедуры // УстановитьИзменятьВидимостьКолонокТабЧасти()

// Рассчитывает сумму в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ЗначениеПустогоКоличества = 0) Экспорт

	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);

КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Рассчитывает сумму в строке возвратной тары документа
//
// Параметры:
//  СтрокаВозвратнойТары  - строка возвратной тары табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаВозвратнойТары , ДокументОбъект) Экспорт

	СтрокаВозвратнойТары.Сумма = СтрокаВозвратнойТары.Цена * СтрокаВозвратнойТары.Количество;

КонецПроцедуры // РассчитатьСуммуВозвратнойТарыТабЧасти()

// Рассчитывает количество исходя из количества мест
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	//ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	//МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
	//		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.КоличествоМест * СтрокаТабличнойЧасти.Коэффициент;
	//КонецЕсли;

КонецПроцедуры // РассчитатьКоличествоТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ЗначениеПустогоКоличества = 0) Экспорт

	РасчетноеКоличество = ?(СтрокаТабличнойЧасти.Количество = 0, ЗначениеПустогоКоличества, СтрокаТабличнойЧасти.Количество);
	Если РасчетноеКоличество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / РасчетноеКоличество;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииСуммыТабЧасти()

// Процедура выполняет стандартные действия по расчету плановой суммы
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура ПересчитатьПлановуюСумму(СтрокаТЧ, ЗначениеПустогоКоличества = 0) Экспорт

	СтрокаТЧ.СуммаПлановая = ?(СтрокаТЧ.Количество = 0, ЗначениеПустогоКоличества, СтрокаТЧ.Количество) * СтрокаТЧ.ПлановаяСтоимость;

КонецПроцедуры // ПересчитатьПлановуюСумму()

// Процедура заполняет ставку НДС в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	//Заполнить СтавкаНДС
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти)
		и ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		и ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		
		//В документах реализации, для организаций применяющих УСН устанавливать ставку "БезНДС"
		//кроме комиссионных товаров
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчетаНДСПоРеализации", МетаданныеДокумента, ИмяТабличнойЧасти) И
			ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда
			Если НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетУчета", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
					Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СчетУчета) Тогда
						Если УправлениеЗапасамиПартионныйУчет.КомиссионныйТовар(СтрокаТабличнойЧасти.СчетУчета) Тогда
							СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
				Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаТабличнойЧасти.СчетДоходов) Тогда
					СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСтавкуНДСТабЧасти()

// Процедура заполняет единицу и цену по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ДокументОбъект.ВалютаДокумента, ВалютаРегламентированногоУчета);  
	КурсДок         = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
	КратностьДок    = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 1);
	//Из регистра сведений ЦеныНоменклатуры по Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику
	ТипЦен = "";
	
	Если ДокументОбъект.Метаданные().Реквизиты.Найти("ТипЦен") <> Неопределено Тогда
		ТипЦен = ДокументОбъект.ТипЦен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
		КонецЕсли;
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.Коэффициент      = 1;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе
		// из регистра
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
		                            ВалютаДокумента, КурсДок, КратностьДок);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента) 
						И ДокументОбъект.УчитыватьНДС, 
						ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента) 
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номенклатуры
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = 1;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПродажиТабЧасти()

// Рассчитывает процент розничной наценки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
Процедура РассчитатьПроцентРозничнойНаценкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ВалютаРегламентированногоУчета) Экспорт

	Перем ЦенаСНалогами;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Рассчитывать процент имеет смысл только для розничного склада.
	Склад = УправлениеРозничнойТорговлей.ЕстьНеавтоматизированныйРозничныйСкладДокумента(ДокументОбъект);
	Если Склад = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Цена = 0 Тогда
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 0;
		СтрокаТабличнойЧасти.ЦенаВРознице = 0;
	Иначе

		// Пересчитываем в рубли
		ЦенаСНалогами = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, ДокументОбъект.ВалютаДокумента, 
									ВалютаРегламентированногоУчета,
									ДокументОбъект.КурсДокумента, 1,ДокументОбъект.КратностьДокумента,1);
									
		ЕстьНалоги = ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента);
				   
		Если ЕстьНалоги Тогда
			СуммаВключаетНДС = ДокументОбъект.СуммаВключаетНДС;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СуммаВключаетНДС = Истина;
			СтавкаНДС        = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС);
		КонецЕсли; 	
		
		// Увеличиваем при необходимости на величину налогов (розничная цена всегда с налогами)
		ЦенаСНалогами = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(ЦенаСНалогами,
							Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры,
							СуммаВключаетНДС, Истина, Истина, СтавкаНДС);

		ЦенаСНалогамиЗаЕдиницуХранения = ЦенаСНалогами;
		
		СтрокаТабличнойЧасти.ПроцентРозничнойНаценки = 100 * (СтрокаТабличнойЧасти.ЦенаВРознице - ЦенаСНалогамиЗаЕдиницуХранения)
		                                               / ЦенаСНалогамиЗаЕдиницуХранения;
	КонецЕсли;

КонецПроцедуры // РассчитатьПроцентРозничнойНаценкиТабЧасти()

// Функция выполняет поиск первой, удовлетворяющей условию поиска, строки табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа, в которой осуществляется поиск,
//  СтруктураОтбора - структура - задает условие поиска.
//
// Возвращаемое значение: 
//  Строка табличной части - найденная строка табличной части,
//  Неопределено           - строка табличной части не найдена.
//
Функция НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора) Экспорт

	СтрокаТабличнойЧасти = Неопределено;
	МассивНайденныхСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураОтбора);
	Если МассивНайденныхСтрок.Количество() > 0 Тогда

		// Нашли. Вернем первую найденную строку.
		СтрокаТабличнойЧасти = МассивНайденныхСтрок[0];
	КонецЕсли;

	Возврат СтрокаТабличнойЧасти;

КонецФункции // НайтиСтрокуТабЧасти()

// Рассчитывает цену в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект     - объект редактируемого документа.
//
Процедура РассчитатьЦенуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;

КонецПроцедуры // РассчитатьЦенуТабЧасти()

// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылки на подчиненные справочники).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//  ИмяЕдиницыИзмерения  - наименование единицы измерения
//
Процедура ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ИмяЕдиницыИзмерения = "ЕдиницаИзмерения") Экспорт

	СтрокаТабличнойЧасти[ИмяЕдиницыИзмерения] = Неопределено;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТабЧасти()

// Процедура выполняет стандартные действия при изменении единицы 
// в строке табличной части документа.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// Установить коэффициент
	СтрокаТабличнойЧасти.Коэффициент = 1; 

КонецПроцедуры // ПриИзмененииЕдиницыТабЧасти

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, ВалютаРегламентированногоУчета, ПересчитыватьНалогиВЦене = Истина) Экспорт

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	СтруктураШапкиДокумента.Свойство("ТипЦен", ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента",    ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",  ВалютаДокумента);
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС",     УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = 1;
			СтрокаТабличнойЧасти.Цена             = 0;
		КонецЕсли;

	Иначе
		// из регистра
		Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
		                                 ТипЦен, ДатаДокумента,
		                                 ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, ВалютаРегламентированногоУчета), 
		                                 ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, ВалютаРегламентированногоУчета));

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				            ТипЦен.ЦенаВключаетНДС,
				            УчитыватьНДС, СуммаВключаетНДС, 
				            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номенклатуры
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения  = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент = 1
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// если в документе существует реквизит КоличествоМест, то рассчитанная цена идет за него
	// вычислим цену за базовую единицу
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.Коэффициент;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Процедура заполняет номер ГТД и Страну происхождения в строке ТЧ
//
// Параметры
//  СтрокаТабличнойЧасти - Строка ТЧ
//  Поступление - Булево, проставлять номер ГТД для поступления или для расхода
//  Организация - СправочникСсылка.Организации, для какой организации определять остатки по номеру ГТД при расходе
//  ДатаОстатков - Дата, на которую определять остатки по номеру ГТД
//  СтруктураСоответствияИмен - Структура, в которой содержатся имена полей ТЧ соответствующие именам "Номенклатура"
//  Комиссионер - СправочникСсылка.Контрагенты, комиссионер, по которому показывать остатки по номеру ГТД
//
Процедура ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти, Поступление = Истина, Организация = Неопределено, ДатаОстатков = Неопределено, СтруктураСоответствияИмен = Неопределено, Комиссионер = Неопределено) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ОбщегоНазначения.ПолучитьМетаданныеДокументаПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	Если не ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.НомерГТД = СтрокаТабличнойЧасти.Номенклатура.НомерГТД;
		КонецЕсли;

		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
			СтрокаТабличнойЧасти.СтранаПроисхождения = СтрокаТабличнойЧасти.Номенклатура.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры // ЗаполнитьНомерГТДИСтрануПроисхождения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ


// Процедура выполняет стандартные действия при изменении номенклатуры 
// в строке табличной части документа (очищает ссылку на подчиненный справочник единиц).
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	// При изменении номенклатуры очистим ссылку на подчиненный справочник
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииВозвратнойТарыТабЧасти()

// Процедура выполняет стандартные действия при изменении суммы в строке возвратной тары документа.
//
// Параметры:
//  СтрокаВозвратнойТары - строка табличной части возвратная тара документа,
//  ДокументОбъект       - объект редактируемого документа
//
Процедура ПриИзмененииСуммыВозвратнойТарыТабЧасти(СтрокаВозвратнойТары, ДокументОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаВозвратнойТары.Количество) Тогда
		СтрокаВозвратнойТары.Цена = 0;
	Иначе	
		СтрокаВозвратнойТары.Цена = СтрокаВозвратнойТары.Сумма / СтрокаВозвратнойТары.Количество;
	КонецЕсли; 

КонецПроцедуры // ПриИзмененииСуммыВозвратнойТарыТабЧасти()

// Процедура заполняет Содержание из полного наименования номенклатуры в строке табличной части
//
// Параметры
//  СтрокаТабличнойЧасти - Строка табличной части
//
Процедура ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, Документобъект) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Содержание", МетаданныеДокумента, ИмяТабличнойЧасти) Тогда
		НаименованиеПолное = СтрокаТабличнойЧасти.Номенклатура.НаименованиеПолное;

		Если ПустаяСтрока(НаименованиеПолное) Тогда
			СтрокаТабличнойЧасти.Содержание = СтрокаТабличнойЧасти.Номенклатура.Наименование;
		Иначе
			СтрокаТабличнойЧасти.Содержание = НаименованиеПолное;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСодержаниеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ РАСЧЕТА ТАБЛИЧНОЙ ЧАСТИ ТОРГОВЫХ ДОКУМЕНТОВ

// Процедура заполняет единицу в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти     - строка табличной части документа,
//  ДокументОбъект           - объект редактируемого документа.
//
Процедура ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	// берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	СтрокаТабличнойЧасти.Коэффициент      = 1;

КонецПроцедуры // ЗаполнитьЕдиницуТабЧасти()

// Процедура заполняет единицу и розничную цену продажи по в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа;
//  ДокументОбъект                 - объект редактируемого документа;
//  СкладКомпании                  - ссылка на справочник, розничный склад компании по которому надо 
//                                   определить розничную цену;
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ЗаказПокупателя                - ссылка на документ, Заказ покупателя, из резерва по которому надо
//                                   определить розничную цену, если не задан, то розничная цена
//                                   берется для сводного остатка
//
Процедура ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СкладКомпании,
	                                                   ВалютаРегламентированногоУчета, ЗаказПокупателя = Неопределено) Экспорт

	ИмяТабличнойЧасти   = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	МетаданныеДокумента = ДокументОбъект.Метаданные();

	Если НЕ ЗначениеЗаполнено(СкладКомпании) Тогда
		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		СтрокаТабличнойЧасти.Коэффициент      = 1;
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Цена = 0;

		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
						Истина,
						ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", МетаданныеДокумента)
						И ДокументОбъект.УчитыватьНДС, 
						ОбщегоНазначения.ЕстьРеквизитДокумента("СуммаВключаетНДС", МетаданныеДокумента)
						И ДокументОбъект.СуммаВключаетНДС, 
						?(ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", МетаданныеДокумента, ИмяТабличнойЧасти),
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС),0));
		КонецЕсли;

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номенклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		КонецЕсли;

		СтрокаТабличнойЧасти.Коэффициент = 1;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти()

// Процедура заполняет цену возвратной тары по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ДокументОбъект) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.
	// Если не заданы значения измерений, то устанавливаем по справочнику

	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("Контрагент", МетаданныеДокумента) тогда

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;
		
	Иначе

		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент)
		 Или НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда

			// берем из самого реквизита Номенклатура
			СтрокаТабличнойЧасти.Цена = 0;

		Иначе
			// из регистра
			// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
				Цена = 0;
			Иначе
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
				                                ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
				                                ДокументОбъект.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
				                                ДокументОбъект.КратностьВзаиморасчетов);
			КонецЕсли;

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС, но без НП,
			// ставки берутся из номенклатуры
			Если НЕ ЗначениеЗаполнено(Цена) Тогда
				СтрокаТабличнойЧасти.Цена = 0;
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				                                Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
				                                ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
				                                ДокументОбъект.УчитыватьНДС, Истина, 
				                                УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление()

// Процедура заполняет цену возвратной тары по ценам продажи в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//  ДоговорКонтрагента   - договор контрагента в случае, если его надо брать не из данного документа.
//
Процедура ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ДокументОбъект, ДоговорКонтрагента = Неопределено) Экспорт

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.Цена = 0;

	Иначе

		Если ДоговорКонтрагента = Неопределено Тогда
			ДоговорКонтрагента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента",МетаданныеДокумента),ДокументОбъект.ДоговорКонтрагента,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		КонецЕсли;

		// из регистра
		// Если не заполнен договор или валюта взаиморасчетов, то будем считать цену нулевой.
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			Цена = 0;
		Иначе
			ЕдиницаТары = СтрокаТабличнойЧасти.Номенклатура.БазоваяЕдиницаИзмерения;

			Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура,
			                            ДокументОбъект.ТипЦен, ДокументОбъект.Дата,
			                            ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.КурсВзаиморасчетов,
			                            ДокументОбъект.КратностьВзаиморасчетов);
		КонецЕсли;

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
		// ставки берутся из номенклатуры
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
						Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
						ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
						ДокументОбъект.УчитыватьНДС, Истина, 
						УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск()


