Функция ПолучитьЗаголовокОтчетаПереопределяемая(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	Заголовок = "";
	
	Если ТиповыеОтчеты.ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		Если ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка) Тогда
			ТекстСохраненнаяНастройка = " (" + ОтчетОбъект.СохраненнаяНастройка + ")";
		Иначе
			ТекстСохраненнаяНастройка = "";
		КонецЕсли;
		ЗаголовокОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;
		Заголовок = ЗаголовокОтчета + ТекстСохраненнаяНастройка;
	Иначе
		Если ОтчетОбъект.СохраненнаяНастройка.Пустая() Тогда
			ТекстСохраненнаяНастройка = "";
		Иначе
			ТекстСохраненнаяНастройка = " [" + ОтчетОбъект.СохраненнаяНастройка + "]";
		КонецЕсли;
		ЗаголовокОтчета = ОтчетОбъект.Метаданные().Синоним;
		Заголовок = ЗаголовокОтчета + ТекстСохраненнаяНастройка;
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

Функция ПолучитьСхемуКомпоновкиОбъектаПереопределяемая(ОтчетОбъект) Экспорт
	
	Возврат ОтчетОбъект.СхемаКомпоновкиДанных;
	
КонецФункции

Функция ПолучитьИдентификаторОбъектаПереопределяемая(ОтчетОбъект) Экспорт
	
	Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
	
КонецФункции

Функция ЭтоСтараяВерсияОтчетаПереопределяемая(ОтчетОбъект) Экспорт
	
	Возврат (Найти(ТиповыеОтчеты.ПолучитьИдентификаторОбъекта(ОтчетОбъект), "ОтчетОбъект") = 0 ИЛИ (ОтчетОбъект.Метаданные().Реквизиты.Найти("НастройкаПериода") <> Неопределено));
	
КонецФункции

Функция ПолучитьПараметрыПанелиПользователяПоУмолчаниюПереопределяемая(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ДеревоНастроекСтандартныхСтраниц  = Новый ДеревоЗначений;
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Использование");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Имя");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Представление");
	
	АналитическиеОтборы = ТиповыеОтчеты.ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Период", "Период");
	
	Параметры  = ложь;
	Показатели = ложь;
	Отбор      = истина;
	Порядок    = ложь;
	
	Если ФормаОтчета <> Неопределено тогда
		Если ФормаОтчета.ЭлементыФормы.Найти("ПанельЗакладок") <> Неопределено тогда
			Страницы = ФормаОтчета.ЭлементыФормы.ПанельЗакладок.Страницы;
			Параметры  = ?(Страницы.Найти("Параметры") <> Неопределено И Страницы.Параметры.Видимость, Страницы.Параметры.Видимость, Параметры);
			Показатели = ?(Страницы.Найти("Показатели") <> Неопределено И Страницы.Показатели.Видимость, Страницы.Показатели.Видимость, Показатели);
			Отбор      = ?(Страницы.Найти("Отбор") <> Неопределено И Страницы.Отбор.Видимость, Страницы.Отбор.Видимость, Отбор);
			Порядок    = ?(Страницы.Найти("Порядок") <> Неопределено И Страницы.Порядок.Видимость, Страницы.Порядок.Видимость, Порядок);
		КонецЕсли;
	КонецЕсли;
	
	ТиповыеОтчеты.ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Параметры, "Параметры", "Параметры");
	ТиповыеОтчеты.ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Показатели, "Показатели", "Показатели");
	ТиповыеОтчеты.ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Отбор, "Отбор", "Отбор");
	ТиповыеОтчеты.ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Порядок, "Порядок", "Сортировка");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДеревоНастроекСтандартныхСтраниц", ДеревоНастроекСтандартныхСтраниц);
	Параметры.Вставить("Отборы", Новый ТаблицаЗначений);
	Группировки = Новый ТаблицаЗначений;
	Группировки.Колонки.Добавить("Группировка");
	Группировки.Колонки.Добавить("Представление");
	Группировки.Колонки.Добавить("ПредставлениеСтрок");
	Группировки.Колонки.Добавить("ПредставлениеКолонок");
	Группировки.Колонки.Добавить("НастраиватьИерархию");
	Группировки.Колонки.Добавить("Использование");
	Параметры.Вставить("Группировки", Группировки);
	
	СписокДоступныхОтносительныхПериодов = Новый СписокЗначений;
	СписокДоступныхОтносительныхПериодов.Добавить("Предыдущий", "Предыдущий", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("СНачала", "С начала текущего", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("Текущий", "Текущий", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("ДоКонца", "До конца текущего", Истина);
	СписокДоступныхОтносительныхПериодов.Добавить("Следующий", "Следующий", Истина);
	Параметры.Вставить("СписокДоступныхОтносительныхПериодов", СписокДоступныхОтносительныхПериодов);
	
	Параметры.Вставить("ПроизвольныйПериод", Истина);
	
	ДополнительныеНастройкиОтчета = Новый Массив;
	ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();
	Если ПараметрыИсполненияОтчета.Свойство("ДополнительныеНастройкиОтчета") И ПараметрыИсполненияОтчета.ДополнительныеНастройкиОтчета тогда
		ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();
	КонецЕсли;
	
	Для каждого ДопНастройка из ДополнительныеНастройкиОтчета Цикл
		Параметры.Вставить(ДопНастройка.Имя, ДопНастройка.ЗначениеПоУмолчанию);
	КонецЦикла;
	ДоступныеПериодичности = Новый ТаблицаЗначений;
	ДоступныеПериодичности.Колонки.Добавить("Периодичность");
	ДоступныеПериодичности.Колонки.Добавить("РассчитыватьЧерез");
	ДоступныеПериодичности.Колонки.Добавить("Использование");
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Год",       Истина);
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Полугодие", Истина);
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Квартал",   Истина);
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Месяц",     Истина);
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Декада",    Истина);
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Неделя",    Истина);
	ТиповыеОтчеты.ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "День",      Истина);
	
	Параметры.Вставить("ДоступныеПериодичности", ДоступныеПериодичности);
	
	Возврат Параметры;
	
КонецФункции

Процедура ДополнитьЗначенияНастроекПанелиПользователяПоумолчанию(ЗначенияНастроек, ОтчетОбъект) Экспорт
	
	// для данной конфигурации текст процедуры должен быть пустым
	
КонецПроцедуры

Функция ПолучитьТаблицуДоступныхВариантовПереопределяемая(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ТипНастройки = Неопределено, СписокДоступныхНастроек = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Если ТипНастройки = Неопределено тогда
		ТипНастройки = Перечисления.ТипыНастроек.ПроизвольныеНастройки;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование КАК Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СохраненныеНастройкиПользователи.ПравоИзменения
	|					ИЛИ &ПолныеПрава
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПравоИзменения,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|ИЗ
	|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И (СохраненныеНастройкиПользователи.Пользователь.Ссылка = &Пользователь
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка В
	|				(ВЫБРАТЬ
	|					ГруппыПользователейПользователиГруппы.Ссылка
	|				ИЗ
	|					Справочник.ГруппыПользователей.ПользователиГруппы КАК ГруппыПользователейПользователиГруппы
	|				ГДЕ
	|					ГруппыПользователейПользователиГруппы.Пользователь.Ссылка = &Пользователь)
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И СохраненныеНастройкиПользователи.Ссылка В (&СписокДоступныхНастроек)
	|				И СохраненныеНастройкиПользователи.Ссылка.Предопределенный
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И &СписокДоступныхНастроекНеопределен
	|				И СохраненныеНастройкиПользователи.Ссылка.Предопределенный
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи)
	|				И (НЕ СохраненныеНастройкиПользователи.Ссылка.Предопределенный))
	|	И (&СПомеченнымиНаУдаление
	|			ИЛИ (НЕ СохраненныеНастройкиПользователи.Ссылка.ПометкаУдаления))
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь",                       Пользователь);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект",                НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("СписокДоступныхНастроек",            СписокДоступныхНастроек);
	Запрос.УстановитьПараметр("СписокДоступныхНастроекНеопределен", СписокДоступныхНастроек = Неопределено);
	Если Найти(НастраиваемыйОбъект, "ОтчетОбъект") > 0 Тогда									
		Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиОтчета);
	Иначе
		Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПолныеПрава", РольДоступна("ПолныеПрава"));
	Запрос.УстановитьПараметр("СПомеченнымиНаУдаление", СПомеченнымиНаУдаление);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Если Клиент Тогда
	
Процедура ДополнитьЗначенияНастроекПанелиПользователя(ЗначенияНастроек, ОтчетОбъект, ФормаОтчета) Экспорт
	
	// для данной конфигурации текст процедуры должен быть пустым
	
КонецПроцедуры

Процедура ПослеВыводаПанелиПользователя(ОтчетОбъект, ФормаОтчета, ДеревоНастроекСтандартныхСтраниц, ЗначенияНастроек) Экспорт
	
	// для данной конфигурации текст процедуры должен быть пустым
	
КонецПроцедуры

Функция ПолучитьОтчетДляРасшифровкиПереопределяемая(ОтчетОбъект) Экспорт

	Если ТиповыеОтчеты.ЭтоВнешнийОбъект(ОтчетОбъект) Тогда
		НовыйОтчет = ВнешниеОтчеты.Создать(ОтчетОбъект.ИспользуемоеИмяФайла);
	Иначе
		НовыйОтчет = Отчеты[ОтчетОбъект.Метаданные().Имя].Создать();
	КонецЕсли;
	
	НовыйОтчет.СохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	НовыйОтчет.ПрименитьНастройку();
	
	НовыйОтчет.ЗначенияНастроекПанелиПользователя = Неопределено;
	
	Возврат НовыйОтчет;
	
КонецФункции //
 
#КонецЕсли
