
Функция ПолучитьКомбинациюСтатусовРасходаУСН(Статус1, Статус2) Экспорт

	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Статус1);
	СписокСтатусов.Добавить(Статус2);

	Если НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.ПустаяСсылка()) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.НеПринимаются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.Распределяются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.Распределяются;

	Иначе
		Возврат Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

Функция ПН(Контрагент) //Полное наименование контрагента
	
	Возврат ?(ЗначениеЗаполнено(Контрагент.НаименованиеПолное), Контрагент.НаименованиеПолное, Контрагент.Наименование); 
	
КонецФункции

Функция СодержаниеКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента)
	
	СтрокаСодержание = "";
	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
	
	Если ВидОперации = "Поступление" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаСодержание = "Представлен авансовый отчет: " + ДокументСсылка.ФизЛицо + 
			", назначение аванса """ + СокрЛП(ДокументСсылка.НазначениеАванса) + """. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
			СтрокаСодержание = "Контрагентом """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""" оказаны услуги """ + СокрЛП(ДокументСсылка.Содержание) + """. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			Если ДокументСсылка.Услуги.Количество() = 0 Тогда
				СтрокаСодержание = "Поступление ТМЦ от """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
				ДокументСсылка.ДоговорКонтрагента +	""". ";
			ИначеЕсли ДокументСсылка.Товары.Количество() = 0 Тогда
				СтрокаСодержание = "Контрагентом """ + ПН(ДокументСсылка.Контрагент) + """ оказаны услуги по договору """ +
				ДокументСсылка.ДоговорКонтрагента +	""". ";
			Иначе
				СтрокаСодержание = "Поступление ТМЦ и услуг от """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
				ДокументСсылка.ДоговорКонтрагента +	""". ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "Оплата" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаСодержание = "Подотчетным лицом: " + ДокументСсылка.ФизЛицо + 
			", назначение аванса """ + СокрЛП(ДокументСсылка.НазначениеАванса) + """. ";
			Если ДокументСсылка.ОплатаПоставщикам.Количество() = 1 Тогда
				СтрокаСодержание = СтрокаСодержание + " произведена оплата поставщику """ + 
				ПН(ДокументСсылка.ОплатаПоставщикам[0].Контрагент) + """ по договору """ + 
				ДокументСсылка.ОплатаПоставщикам[0].ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " произведена оплата поставщикам. ";
			КонецЕсли;
		ИначеЕсли Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Выдача из кассы: оплата поставщику";
			Иначе
				СтрокаСодержание = "Списание с р/с: оплата поставщику";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() > 0 Тогда
				СтрокаСодержание = СтрокаСодержание + " """ + 
				ПН(ДокументСсылка.Контрагент) + """ по договору """ + 
				ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (оплата поставщику). ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ОплатаОтПокупателя" Тогда
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Поступление в кассу: оплата от покупателя";
			Иначе
				СтрокаСодержание = "Поступление на р/с: оплата от покупателя";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() > 0 Тогда
				СтрокаСодержание = СтрокаСодержание + " """ + 
				ПН(ДокументСсылка.Контрагент) + """ по договору """ + 
				ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (оплата от покупателя). ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВозвратОтПодотчетногоЛица" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") Тогда
			СтрокаСодержание = "Поступление денежных документов: принято от подотчетного лица " + ДокументСсылка.Контрагент + ". ";
		Иначе
			СтрокаСодержание = "Поступление в кассу: возврат аванса подотчетным лицом " + ДокументСсылка.Контрагент + ". ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВозвратОтПоставщика" Тогда
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Поступление в кассу: возврат денежных средств поставщиком";
			Иначе
				СтрокаСодержание = "Поступление на р/с: возврат денежных средств поставщиком";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() > 0 Тогда
				СтрокаСодержание = СтрокаСодержание + " """ + 
				ПН(ДокументСсылка.Контрагент) + """ по договору """ + 
				ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (возврат денежных средств поставщиком). ";
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "ВыручкаККМ") ИЛИ (ВидОперации = "ВыручкаСНТТ") Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Поступление в кассу: выручка в торговой точке  " + ДокументСсылка.Контрагент + ". ";
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВыдачаПодотчетномуЛицу" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Выдача из кассы: выдано под отчет сотруднику " + ДокументСсылка.Контрагент + ". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
			СтрокаСодержание = "Выдача денежных документов: выдано под отчет сотруднику " + ДокументСсылка.Контрагент + ". ";
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента) Тогда
			СтрокаСодержание = "Списание с р/с: перечислено под отчет сотруднику " + ДокументСсылка.ФизЛицо + ". ";
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (выдача под отчет сотруднику). ";			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВыплатаЗП" Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			СтрокаСодержание = "Выдача из кассы: выплата заработной платы по ведомости. ";
		Иначе
			СтрокаСодержание = "Списание с р/с: перечисление заработной платы. ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВыплатаЗПРаботнику" Тогда
		
		СтрокаСодержание = "Выдача из кассы: выплата заработной платы работнику " + ДокументСсылка.Контрагент + ". ";
				
	ИначеЕсли ВидОперации = "ВыплатаДепонентов" Тогда
		
		СтрокаСодержание = "Выдача из кассы: выплата депонированной заработной платы. ";
		
	ИначеЕсли ВидОперации = "ПеречислениеНалога" Тогда
		
		Если ДокументСсылка.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДФЛ Тогда
			СтрокаСодержание = "Списание с р/с: перечисление НДФЛ работников. ";
		Иначе
			СтрокаСодержание = "Списание с р/с: перечисление налога (" + ДокументСсылка.СчетУчетаРасчетовСКонтрагентом.Код + 
			" " + ДокументСсылка.СчетУчетаРасчетовСКонтрагентом.Наименование + "). ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВозвратПокупателю" Тогда
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("РасшифровкаПлатежа") = Неопределено Тогда
			Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				СтрокаСодержание = "Выдача из кассы: возврат денежных средств покупателю";
			Иначе
				СтрокаСодержание = "Списание с р/с: возврат денежных средств покупателю";
			КонецЕсли;
			Если ДокументСсылка.РасшифровкаПлатежа.Количество() > 0 Тогда
				СтрокаСодержание = СтрокаСодержание + " """ + 
				ПН(ДокументСсылка.Контрагент) + """ по договору """ + 
				ДокументСсылка.РасшифровкаПлатежа[0].ДоговорКонтрагента + """. ";
			Иначе
				СтрокаСодержание = СтрокаСодержание + " """ + ДокументСсылка.Контрагент + """. ";
			КонецЕсли;
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + " (возврат денежных средств покупателю). ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "РеализацияУслуг" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
			СтрокаСодержание = "Акт об оказании производственных услуг; контрагент """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаНМА") Тогда 
			СтрокаСодержание = "Передача нематериальных активов контрагенту """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") Тогда 
			СтрокаСодержание = "Оказание услуг """ + ПН(ДокументСсылка.Номенклатура) + """ списку контрагентов. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") Тогда 
			СтрокаСодержание = "Передача основных средств контрагенту """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда 
			СтрокаСодержание = "Оказание услуг по переработке; контрагент """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""". ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")  Тогда
			СтрокаСодержание = "Оказание посреднических услуг в торговле (комиссионное вознаграждение); комитент """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""". ";
		Иначе
			СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда
		
		СтрокаСодержание = "Возврат товаров поставщику """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
		ДокументСсылка.ДоговорКонтрагента +	""". ";
		
	ИначеЕсли ВидОперации = "НачислениеЗП" Тогда
		
		СтрокаСодержание = "Начисление заработной платы и налогов с ФОТ за " + Формат(ДокументСсылка.ПериодРегистрации,"ДФ=""ММММ гггг""") + ". ";
		
	ИначеЕсли (ВидОперации = "УслугаКомиссионера") ИЛИ (ВидОперации = "ЗачетВознагражденияКомиссионера") ИЛИ (ВидОперации = "ЗачетВознагражденияКомиссионераНДС") Тогда
		
		СтрокаСодержание = "Отчет комиссионера """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
		ДокументСсылка.ДоговорКонтрагента +	"""; ";
		Если ВидОперации = "ЗачетВознагражденияКомиссионера" Тогда
			СтрокаСодержание = СтрокаСодержание + "вознаграждение комиссионера зачтено из выручки от реализации. ";
		ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионераНДС" Тогда
			СтрокаСодержание = СтрокаСодержание + "НДС с вознаграждения комиссионера зачтен из выручки от реализации. ";
		Иначе
			СтрокаСодержание = СтрокаСодержание + "оказаны посреднические услуги в торговле. "
		КонецЕсли;
					
	ИначеЕсли ВидОперации = "РеализацияКомиссионером" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			СтрокаСодержание = "Отчет комиссионера """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	"""; реализованы товары. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
			СтрокаСодержание = "Реализованы товары, отгруженные """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
			ДокументСсылка.ДоговорКонтрагента +	""". ";
		КонецЕсли;		
		
	ИначеЕсли ВидОперации = "Розница" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
			СтрокаСодержание = "Продажа в розницу в торговой точке " + ДокументСсылка.Склад + ". ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		
		СтрокаСодержание = "Передача материалов в переработку """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
		ДокументСсылка.ДоговорКонтрагента +	""". ";
			
	ИначеЕсли ВидОперации = "УслугаПоПереработке" Тогда
		
		СтрокаСодержание = "Поступление из переработки; контрагентом """ + ПН(ДокументСсылка.Контрагент) + """ оказаны услуги по переработке, договор """ +
		ДокументСсылка.ДоговорКонтрагента +	""". ";
		
	ИначеЕсли ВидОперации = "ИзПереработки" Тогда
		
		СтрокаСодержание = "Поступление из переработки; списаны материалы, переданные в переработку контрагенту """ + 
		ПН(ДокументСсылка.Контрагент) + """ по договору """ + ДокументСсылка.ДоговорКонтрагента + """. ";
		
	ИначеЕсли ВидОперации = "Реализация" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ДокументСсылка.Услуги.Количество() = 0 Тогда
				СтрокаСодержание = "Реализация товаров покупателю """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
				ДокументСсылка.ДоговорКонтрагента +	""". ";
			ИначеЕсли ДокументСсылка.Товары.Количество() = 0 Тогда
				СтрокаСодержание = "Реализация услуг покупателю """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
				ДокументСсылка.ДоговорКонтрагента +	""". ";
			Иначе
				СтрокаСодержание = "Реализация товаров и услуг покупателю """ + ПН(ДокументСсылка.Контрагент) + """ по договору """ +
				ДокументСсылка.ДоговорКонтрагента +	""". ";
			КонецЕсли;
		КонецЕсли;	
		
	ИначеЕсли ВидОперации = "Списание" Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеТоваров") Тогда
			СтрокаСодержание = "Списание МПЗ со склада """ + ДокументСсылка.Склад + """ на недостачи и потери от порчи ценностей. ";
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") Тогда
			СтрокаСодержание = "Передача материалов в эксплуатацию со склада """ + ДокументСсылка.Склад + """. ";
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТребованиеНакладная")) Тогда
			СтрокаСодержание = "Требование накладная на списание материалов со склада """ + ДокументСсылка.Склад + """";
			Если Не ДокументСсылка.СчетаУчетаЗатратВТаблице Тогда
				СтрокаСодержание = СтрокаСодержание + "; счет затрат " + ДокументСсылка.СчетЗатрат.Код + " """ + 
				ДокументСсылка.СчетЗатрат.Наименование + """";
			КонецЕсли;
			СтрокаСодержание = СтрокаСодержание + ". ";
		ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")) Тогда
			СтрокаСодержание = "Требование накладная на списание материалов со склада """ + ДокументСсылка.Склад + """";
			СтрокаСодержание = СтрокаСодержание + "; счет затрат " + ДокументСсылка.СчетЗатрат.Код + " """ + 
				ДокументСсылка.СчетЗатрат.Наименование + """";
			СтрокаСодержание = СтрокаСодержание + ". ";
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ПереносЗадолженности" Тогда
		СтрокаСодержание = "Перенос задолженности контрагента """ + ПН(ДокументСсылка.КонтрагентДебитор) + """. "
		
	ИначеЕсли ВидОперации = "ПроведениеВзаимозачетаДебитор" Тогда
		СтрокаСодержание = "Проведение взаимозачета между """ + ПН(ДокументСсылка.КонтрагентДебитор) + 
		"""(дебитор) и """ + ПН(ДокументСсылка.КонтрагентКредитор) + """(кредитор); по дебиторской задолженности. ";
		
	ИначеЕсли ВидОперации = "ПроведениеВзаимозачетаКредитор" Тогда
		СтрокаСодержание = "Проведение взаимозачета между """ + ПН(ДокументСсылка.КонтрагентДебитор) + 
		"""(дебитор) и """ + ПН(ДокументСсылка.КонтрагентКредитор) + """(кредитор); по кредиторской задолженности. ";
		
	ИначеЕсли ВидОперации = "СписаниеДебиторскойЗадолженности" Тогда
		СтрокаСодержание = "Списание дебиторской задолженности контрагента """ + ПН(ДокументСсылка.КонтрагентДебитор) + """. ";
		
	ИначеЕсли ВидОперации = "СписаниеКредиторскойЗадолженности" Тогда
		СтрокаСодержание = "Списание кредиторской задолженности контрагента """ + ПН(ДокументСсылка.КонтрагентДебитор) + """. "
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаСодержание) Тогда
		СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
	КонецЕсли;
	
	Возврат СтрокаСодержание;
	
КонецФункции 

Функция ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Период = "Квартал", Способ = "БУ")
	
	Коэфф = 0;
	НачальнаяДата = ?(Период = "Квартал", НачалоКвартала(СтруктураШапкиДокумента.Дата), НачалоГода(СтруктураШапкиДокумента.Дата));
	
	Если Способ = "БУ" Тогда
		Коэфф = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, НачальнаяДата);
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачДата", НачальнаяДата);
		Запрос.УстановитьПараметр("КонДата", КонецМесяца(СтруктураШапкиДокумента.Дата));
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КнигаУчетаДоходовИРасходовОбороты.Графа5Оборот,
		|	КнигаУчетаДоходовИРасходовОбороты.ДоходЕНВДОборот,
		|	КнигаУчетаДоходовИРасходовОбороты.Графа4Оборот
		|ИЗ
		|	РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(&НачДата, &КонДата, , Организация = &Организация) КАК КнигаУчетаДоходовИРасходовОбороты";
		
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			
			ДоходЕНВДОборот = ?(НЕ ЗначениеЗаполнено(Результат.ДоходЕНВДОборот), 0, Результат.ДоходЕНВДОборот);
			Графа4Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа4Оборот), 0, Результат.Графа4Оборот);
			Графа5Оборот 	= ?(НЕ ЗначениеЗаполнено(Результат.Графа5Оборот), 0, Результат.Графа5Оборот);
			
			Если Способ = "НУ" Тогда
				Коэфф = ?(ДоходЕНВДОборот + Графа5Оборот = 0, 0, Результат.ДоходЕНВДОборот/(ДоходЕНВДОборот + Графа5Оборот));
			Иначе
				Коэфф = ?(Графа4Оборот = 0, 0, Результат.ДоходЕНВДОборот/Графа4Оборот);
			КонецЕсли;			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Коэфф;
	
КонецФункции

Процедура СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицаПринятых)
	
	ЗапросРасходы = Новый Запрос;
	ЗапросРасходы.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
	ЗапросРасходы.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросРасходы.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросРасходы.УстановитьПараметр("НеРаспределено", Перечисления.СтатусыРасходовУСН.НеРаспределено);
	ЗапросРасходы.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходыПриУСНОбороты.СуммаРасход) КАК СуммаРасход,
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РасходыПриУСНОбороты
	|ГДЕ
	|	РасходыПриУСНОбороты.СтатусыОплатыРасходовУСН = &НеРаспределено
	|	И РасходыПриУСНОбороты.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор";
	
	Результат = ЗапросРасходы.Выполнить().Выбрать();
	ВсегоРаспределено = 0;
	Пока Результат.Следующий() Цикл
		СуммаРасход 	= ?(НЕ ЗначениеЗаполнено(Результат.СуммаРасход), 0, Результат.СуммаРасход);
		Валюта 			= ?(НЕ ЗначениеЗаполнено(Результат.Валюта), СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Результат.Валюта);
		Регистратор 	= ?(НЕ ЗначениеЗаполнено(Результат.Регистратор), СтруктураШапкиДокумента.Ссылка, Результат.Регистратор);
		Если Результат.Валюта = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета Тогда
			ВсегоРаспределено = ВсегоРаспределено + СуммаРасход;
		Иначе
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, Регистратор.Дата);
			ВсегоРаспределено = ВсегоРаспределено + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаРасход, Валюта,
																				СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																				СтруктураКурса.Курс, 1,
																				СтруктураКурса.Кратность, 1);	
		КонецЕсли;			
	КонецЦикла;
	
	Если ВсегоРаспределено = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросПринято = Новый Запрос;
	ЗапросПринято.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
	ЗапросПринято.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
	ЗапросПринято.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
	ЗапросПринято.УстановитьПараметр("ЭтапПроведения", 2);
	ЗапросПринято.Текст = 
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа7) КАК Графа7
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачДата И &КонДата
	|	И КнигаУчетаДоходовИРасходов.Организация = &Организация
	|	И КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РегламентнаяОперация
	|	И КнигаУчетаДоходовИРасходов.ЭтапПроведения = &ЭтапПроведения";
	
	
	
	Результат = ЗапросПринято.Выполнить().Выбрать();
	ВсегоПринято = 0;
	Если Результат.Следующий() Тогда
		ВсегоПринято = ?(НЕ ЗначениеЗаполнено(Результат.Графа7), 0, Результат.Графа7);
	КонецЕсли;
	
	СуммаКорректировки = ВсегоРаспределено - Окр(ВсегоРаспределено*Коэфф, 2, 1) - ВсегоПринято;
	
	Если СуммаКорректировки <> 0 Тогда
		СтрокаРасхода 							= ТаблицаПринятых.Добавить();
		СтрокаРасхода.Организация 				= СтруктураШапкиДокумента.Организация;
		СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Принимаются;
		СтрокаРасхода.РасчетныйДокумент 		= СтруктураШапкиДокумента.Ссылка;
		СтрокаРасхода.Сумма 					= СуммаКорректировки;
		СтрокаРасхода.НДС 						= 0;
		СтрокаРасхода.Валюта 					= СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	КонецЕсли;
	
КонецПроцедуры
	
// Преобразует таблицу значений в таблицу со вложенными таблицами, группируя значения по колонкам, формирование итога по строкам
Функция ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "", ВидОперации) Экспорт
	
	ИтоговаяТаблица  = Новый ТаблицаЗначений();
	ПромежуточнаяТаблица = Новый ТаблицаЗначений();
	Для каждого Колонка из ТаблицаРезультатов.Колонки Цикл
		ИтоговаяТаблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
		ПромежуточнаяТаблица.Колонки.Добавить(Колонка.Имя,Колонка.ТипЗначения,Колонка.Заголовок,Колонка.Ширина);
	КонецЦикла;
	ИтоговаяТаблица.Колонки.Добавить("Строки");
	
	//Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
	//	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
	//		СтрокаДерева = ИтоговаяТаблица.Добавить();

	//		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);

	//	КонецЦикла; 
	//	
	//	Возврат ИтоговаяТаблица;
	//КонецЕсли;
	
	ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
	ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);

	Для каждого СтрокаТаблицы Из ТаблицаГруппировок Цикл
		СтрокаДерева = ИтоговаяТаблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла; 
	
	ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
	Если НЕ ПустаяСтрока(ГруппировочныеКолонки) Тогда
		ТаблицаРезультатов.Индексы.Добавить(ГруппировочныеКолонки);
	КонецЕсли;
	Для каждого СтрокаДерева из ИтоговаяТаблица Цикл
		//Формирование структуры отбора
		Для каждого ПараметрОтбора Из ЗначенияОтбора Цикл
			ЗначенияОтбора.Вставить(ПараметрОтбора.Ключ, СтрокаДерева[ПараметрОтбора.Ключ]);
		КонецЦикла; 
		ПромежуточнаяТаблица.Очистить();
		//Поиск и заполнение подчиненными колонками
		Если ЗначенияОтбора.Количество() > 0 Тогда
			МассивПодчиненныхСтрок = ТаблицаРезультатов.НайтиСтроки(ЗначенияОтбора);
		Иначе
			МассивПодчиненныхСтрок = ТаблицаРезультатов;
		КонецЕсли;
		Для каждого СтрокаТаблицы Из МассивПодчиненныхСтрок Цикл
			ПодчиненнаяСтрокаДерева = ПромежуточнаяТаблица.Добавить();
			
			ЗаполнитьЗначенияСвойств(ПодчиненнаяСтрокаДерева, СтрокаТаблицы);
			
		КонецЦикла;
		СтрокаДерева.Строки = ПромежуточнаяТаблица.Скопировать();
	КонецЦикла;
		
	Возврат ИтоговаяТаблица;
КонецФункции

Функция ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации)
	
	ТаблицаПартий = Новый ТаблицаЗначений;
	
	ТаблицаПартий.Колонки.Добавить("Номенклатура");
	ТаблицаПартий.Колонки.Добавить("СчетУчета");
	ТаблицаПартий.Колонки.Добавить("Склад");
	ТаблицаПартий.Колонки.Добавить("ДокументОприходования");
	ТаблицаПартий.Колонки.Добавить("ДокументОтгрузки");
	ТаблицаПартий.Колонки.Добавить("Количество");
	
	Если (ВидОперации = "Перемещение") 
		ИЛИ (ВидОперации = "Комплектация")
		ИЛИ (ВидОперации = "НаРеализацию")
		ИЛИ (ВидОперации = "ВПереработку")
		ИЛИ (ВидОперации = "ВозвратСРеализации")
		ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		
		ТаблицаПартий.Колонки.Добавить("КорНоменклатура");
		ТаблицаПартий.Колонки.Добавить("КорСчетУчета");
		ТаблицаПартий.Колонки.Добавить("КорСклад");
		ТаблицаПартий.Колонки.Добавить("КорДокументОприходования");
		ТаблицаПартий.Колонки.Добавить("КорДокументОтгрузки");
		ТаблицаПартий.Колонки.Добавить("КорКоличество");
	КонецЕсли;
	
	Если ТаблицаТМЦ = Неопределено Тогда
	    Возврат ТаблицаПартий;
	КонецЕслИ;	
	
	Если ТаблицаТМЦ.Колонки.Найти("СписанныеПартии") = Неопределено Тогда
		Возврат ТаблицаПартий;
	КонецЕсли;
	
	Для Каждого СтрокаДокумента ИЗ ТаблицаТМЦ Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаДокумента.СписанныеПартии) Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого СтрокаПартии ИЗ СтрокаДокумента.СписанныеПартии Цикл
			Если СтрокаПартии.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаИтоговойТаблицы = ТаблицаПартий.Добавить();
			СтрокаИтоговойТаблицы.Номенклатура 			= СтрокаДокумента.Номенклатура;
			СтрокаИтоговойТаблицы.СчетУчета 			= СтрокаДокумента.СчетУчета;
			СтрокаИтоговойТаблицы.Склад 				= СтрокаПартии.Склад;
			СтрокаИтоговойТаблицы.ДокументОприходования	= СтрокаПартии.Партия;
			СтрокаИтоговойТаблицы.ДокументОтгрузки 		= СтрокаПартии.ДокументОтгрузки;
			СтрокаИтоговойТаблицы.Количество 			= СтрокаПартии.Количество;
			
			Если (ВидОперации = "Перемещение") 
				ИЛИ (ВидОперации = "Комплектация")
				ИЛИ (ВидОперации = "НаРеализацию")
				ИЛИ (ВидОперации = "ВПереработку")
				ИЛИ (ВидОперации = "ВозвратСРеализации")
				ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
				
				СтрокаИтоговойТаблицы.КорСчетУчета = СтрокаДокумента.КорСчетСписания;
				
				Если (ВидОперации = "Комплектация") Тогда
					СтрокаИтоговойТаблицы.КорНоменклатура = СтрокаДокумента.КорСубконтоСписания1;
					СтрокаИтоговойТаблицы.КорДокументОприходования = СтрокаДокумента.Регистратор.Ссылка;
					СтрокаИтоговойТаблицы.КорКоличество = СтрокаПартии.КоличествоПриход;
				Иначе
					СтрокаИтоговойТаблицы.КорНоменклатура = СтрокаДокумента.Номенклатура;
					СтрокаИтоговойТаблицы.КорДокументОприходования = СтрокаПартии.Партия;
					СтрокаИтоговойТаблицы.КорКоличество = СтрокаПартии.Количество;
				КонецЕсли;
				
				Если (ВидОперации = "Перемещение") Тогда
					СтрокаИтоговойТаблицы.КорСклад 	= СтрокаДокумента.КорСубконтоСписания2;
				ИначеЕсли (ВидОперации = "ВозвратСРеализации")
					ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
					СтрокаИтоговойТаблицы.КорСклад 	= СтрокаДокумента.Склад;
				Иначе
					СтрокаИтоговойТаблицы.КорСклад 	= Справочники.Склады.ПустаяСсылка();
				КонецЕсли;
				
				Если (ВидОперации = "НаРеализацию")
					ИЛИ (ВидОперации = "ВПереработку") Тогда
					СтрокаИтоговойТаблицы.КорДокументОтгрузки = СтрокаДокумента.Регистратор.Ссылка;
				Иначе
					СтрокаИтоговойТаблицы.КорДокументОтгрузки = СтрокаПартии.ДокументОтгрузки;
				КонецЕсли;
				
			КонецЕсли;						
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПартий;
	
КонецФункции

// Процедура заполняет данные по УСН в платежных документах
//
Процедура ЗаполнитьНастройкуКУДиР(ДокументОбъект, ЗадатьВопрос = Ложь, НТТ = Ложь) Экспорт
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокументОбъект.Дата, Ложь, ДокументОбъект.Организация,,ЗадатьВопрос);
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		ДокументОбъект.Графа4_УСН			 = 0;
		ДокументОбъект.Графа5_УСН			 = 0;
		ДокументОбъект.Графа6_УСН			 = 0;
		ДокументОбъект.Графа7_УСН     		 = 0;
		ДокументОбъект.НДС_УСН        		 = 0;
		ДокументОбъект.ДоходыЕНВД_УСН 		 = Ложь;
		ДокументОбъект.РасходыЕНВД_УСН		 = Ложь;
		ДокументОбъект.РучнаяНастройка_УСН	 = Ложь;
		ДокументОбъект.Содержание_УСН 		 = "";
		Возврат;
	КонецЕсли;
	
	ВидОперации 	= ДокументОбъект.ВидОперации;
	ОбъектДоходы 	= НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата);
	ОбъектРасходы 	= НЕ ОбъектДоходы;
	
	СторнироватьДоходыПриВозврате = Истина;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ДокументОбъект.РучнаяНастройка_УСН Тогда
		Если ЗадатьВопрос Тогда
			
			Если ОбщегоНазначения.ВопросПерезаполнитьКУДиР() Тогда
				ДокументОбъект.РучнаяНастройка_УСН = Ложь;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеДенежныхДокументов") Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Сумма");
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВыдачаДенежныхДокументов") Тогда
		СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Стоимость");
	Иначе
		СуммаДляКУДиР = ДокументОбъект.СуммаДокумента;
	КонецЕсли;
	Если НЕ ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		КурсВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
		СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ДокументОбъект.ВалютаДокумента, мВалютаРегламентированногоУчета, КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
	КонецЕсли;
	
	Графа4_УСН = 0;
	Графа5_УСН = 0;
	Графа6_УСН = 0;
	Графа7_УСН = 0;
	ДоходыЕНВД_УСН = Ложь;
	Содержание_УСН  = "" + ВидОперации + ".";
		
	//Поступление
	Если (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) или //Доходы
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация) Тогда
		Графа4_УСН      = 0;
		Графа5_УСН      = 0;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика ИЛИ
		ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица) И ОбъектДоходы Тогда
		Содержание_УСН = "Возврат денежных средств. Основание: " + ДокументОбъект.Основание + ".";
		

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) или
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН      = 0;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление ИЛИ
		ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход) Тогда
		Содержание_УСН = "Прочий приход денежных средств: ";
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Содержание_УСН = Содержание_УСН + ДокументОбъект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств + ".";
		КонецЕсли;
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам 
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам) Тогда
		Содержание_УСН = "Расчеты по кредитам и займам с """ + ПН(ДокументОбъект.Контрагент) + """";
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Содержание_УСН = Содержание_УСН + " по договору """ + ДокументОбъект.РасшифровкаПлатежа[0].ДоговорКонтрагента + """.";
		КонецЕсли;
		Графа4_УСН = СуммаДляКУДиР;
		
		СчетУчетаРасчетовСКонтрагентом = ДокументОбъект.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		
		Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом) И 
			((СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоКраткосрочнымКредитамИЗаймам)) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоДолгосрочнымКредитамИЗаймам))) Тогда
			
			Графа5_УСН = 0;
		Иначе
			
			Графа5_УСН = СуммаДляКУДиР;
		КонецЕсли;
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
		Содержание_УСН = "Расчеты с """ + ПН(ДокументОбъект.Контрагент) + """";
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Содержание_УСН = Содержание_УСН + " по договору """ + ДокументОбъект.РасшифровкаПлатежа[0].ДоговорКонтрагента + """.";
		КонецЕсли;
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
		Содержание_УСН = "Оплата от покупателя """ + ПН(ДокументОбъект.Контрагент) + """.";
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам 
		И ОбъектДоходы Тогда
		Содержание_УСН = "Поступление от продаж по платежным картам и банковским кредитам от """ + ПН(ДокументОбъект.Контрагент) + """.";
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = СуммаДляКУДиР + ДокументОбъект.СуммаУслуг;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка И (НТТ) Тогда
		Содержание_УСН = "Прием розничной выручки с торговой точки """ + ДокументОбъект.Контрагент + """.";
		
		СчетаДоходовРасходов = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(ДокументОбъект.Организация, ДокументОбъект.Контрагент, ДокументОбъект.Дата, УчетнаяПолитика);
		ЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
		
		Графа4_УСН = СуммаДляКУДиР;
		Если ЕНВД Тогда 
			ДоходыЕНВД_УСН = Истина; 
		Иначе
			Графа5_УСН = СуммаДляКУДиР;
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика) Тогда
		
		Содержание_УСН = "Поступление денежных документов. Принято от """ + ПН(ДокументОбъект.Контрагент) + """.";
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление) Тогда
		
		Содержание_УСН = "Поступление денежных документов. Принято от """ + ДокументОбъект.Контрагент + """.";
		Графа4_УСН = СуммаДляКУДиР;
		Графа5_УСН = 0;

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача) И ОбъектРасходы Тогда
		
		Содержание_УСН = "Выдача денежных документов. Выдано """ + ДокументОбъект.Контрагент + """.";
		Графа6_УСН = СуммаДляКУДиР;
			
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику) Тогда
		
		Содержание_УСН = "Возврат денежных документов контрагенту """ + ПН(ДокументОбъект.Контрагент) + """.";
		Графа4_УСН = - СуммаДляКУДиР;
		Графа5_УСН = 0;
		
	//Списание
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) 
		И ОбъектДоходы 
		И СторнироватьДоходыПриВозврате Тогда //Доходы
		Содержание_УСН = "Возврат денежных средств покупателю.";
		
		Графа4_УСН = -СуммаДляКУДиР;
		Графа5_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) 
		И ОбъектДоходы 
		И СторнироватьДоходыПриВозврате Тогда
		Содержание_УСН = "Возврат денежных средств. Основание: " + ДокументОбъект.Основание + ".";
		
		Графа4_УСН = -СуммаДляКУДиР;
		Графа5_УСН = -СуммаДляКУДиР;
		Графа6_УСН = 0;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход) И ОбъектРасходы Тогда
		Содержание_УСН = "Прочий расход денежных средств: ";
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Содержание_УСН = Содержание_УСН + ДокументОбъект.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств + ".";
		КонецЕсли;
		Графа6_УСН      = СуммаДляКУДиР;
		
		//Если 91 счет, попробуем классифицировать расход
		Если ТипЗнч(ДокументОбъект.СубконтоДт1) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
			Если ДокументОбъект.СубконтоДт1.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.РасходыНаУслугиБанков Тогда
				Содержание_УСН = "Расходы, связанные с оплатой услуг, оказываемых кредитными организациями.";				
				Графа7_УСН = СуммаДляКУДиР;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога И ОбъектРасходы Тогда
		
		Если ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДФЛ Тогда
			Содержание_УСН = "Списание с р/с: перечисление НДФЛ работников. ";
		Иначе
			Содержание_УСН = "Списание с р/с: перечисление налога (" + ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Код + 
			" " + ДокументОбъект.СчетУчетаРасчетовСКонтрагентом.Наименование + "). ";
		КонецЕсли;
		
		Графа6_УСН      = СуммаДляКУДиР;
		
	ИначеЕсли (ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам) И ОбъектРасходы Тогда
		Содержание_УСН = "Расчеты по кредитам и займам с """ + ПН(ДокументОбъект.Контрагент) + """";
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Содержание_УСН = Содержание_УСН + " по договору """ + ДокументОбъект.РасшифровкаПлатежа[0].ДоговорКонтрагента + """.";
		КонецЕсли;
		Графа6_УСН      = СуммаДляКУДиР;
		
		СчетУчетаРасчетовСКонтрагентом = ДокументОбъект.РасшифровкаПлатежа[0].СчетУчетаРасчетовСКонтрагентом;
		
		Если (СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймам) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымЗаймамВал) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймам) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымЗаймамВал) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитам) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоДолгосрочнымКредитамВал) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитам) ИЛИ
			(СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПроцентыПоКраткосрочнымКредитамВал) Тогда
			
			Содержание_УСН = Содержание_УСН + " Уплата процентов.";
			Графа7_УСН      = СуммаДляКУДиР;
			
		КонецЕсли;
				
	ИначеЕсли (ВидОперации=Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) И ОбъектРасходы Тогда
		Содержание_УСН = "Расчеты с """ + ПН(ДокументОбъект.Контрагент) + """";
		Если ДокументОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
			Содержание_УСН = Содержание_УСН + " по договору """ + ДокументОбъект.РасшифровкаПлатежа[0].ДоговорКонтрагента + """.";
		КонецЕсли;
		Графа6_УСН      = СуммаДляКУДиР;
		
	КонецЕсли;
	
	ДокументОбъект.Графа4_УСН 		= Графа4_УСН;
	ДокументОбъект.Графа5_УСН 		= Графа5_УСН;
	ДокументОбъект.Графа6_УСН 		= Графа6_УСН;
	ДокументОбъект.Графа7_УСН      	= Графа7_УСН;
	ДокументОбъект.НДС_УСН         	= 0;
	ДокументОбъект.ДоходыЕНВД_УСН  	= ДоходыЕНВД_УСН;
	ДокументОбъект.РасходыЕНВД_УСН 	= Ложь;
	ДокументОбъект.Содержание_УСН  	= Содержание_УСН;
	
КонецПроцедуры

//Возвращает представление вида операции платежного документа
//
Функция ВидОперацииДДС(СтруктураШапкиДокумента) Экспорт
	
	ПредставлениеВида = "";
	ВидОперации = СтруктураШапкиДокумента.ВидОперации;
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяНастройка_УСН", МетаданныеДокумента) И 
		СтруктураШапкиДокумента.Ссылка.РучнаяНастройка_УСН Тогда
		//Если оражение в КУДиР настроено вручную, то документ будет отражен в соответствии с ручными настройками
		ПредставлениеВида = "ПрочееДДС";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам) Тогда
		
		ПредставлениеВида = "ОплатаОтПокупателя";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка) Тогда
		
		ПредставлениеВида = "ВыручкаККМ";
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВыручкаСНТТ", МетаданныеДокумента) Тогда
			ПредставлениеВида = ?(СтруктураШапкиДокумента.Ссылка.ВыручкаСНТТ, "ВыручкаСНТТ", "ВыручкаККМ");
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю) Тогда
		
		ПредставлениеВида = "ВозвратПокупателю";
			
	ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		//При объекте "Доходы" для всех операций, кроме расчетов с покупателями, используются реквизиты платежного документа 
		ПредставлениеВида = "ПрочееДДС";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПодотчетногоЛица) Тогда
		
		ПредставлениеВида = "ВозвратОтПодотчетногоЛица";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика) Тогда
		
		ПредставлениеВида = "ВозвратОтПоставщика";
		
	ИначеЕсли 
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПрочееПоступление) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ПрочаяВыдача) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхДокументов.ПоступлениеОтПоставщика) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВозвратПоставщику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПриобретениеИностраннойВалюты) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПКО.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.РасчетыПоКредитамИЗаймам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание) Тогда
		
		ПредставлениеВида = "ПрочееДДС";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику) Тогда
		
		ПредставлениеВида = "Оплата";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеПодотчетномуЛицу) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийВыдачаДенежныхДокументов.ВыдачаПодотчетномуЛицу) Тогда
		
		ПредставлениеВида = "ВыдачаПодотчетномуЛицу";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП) Тогда
		
		ПредставлениеВида = "ВыплатаЗП";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику) Тогда
		
		ПредставлениеВида = "ВыплатаЗПРаботнику";
		
	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов) Тогда
		
		ПредставлениеВида = "ВыплатаДепонентов";

	ИначеЕсли (ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетУчетаРасчетовСКонтрагентом", МетаданныеДокумента)
			И (ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом))
			И ( //Если указанный счет не входит в список счетов, налоги по которым начисляются автоматически
				(НЕ СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДФЛ)
					И (НЕ СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию))
					И (НЕ СтруктураШапкиДокумента.Ссылка.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента) 
				//или указана аналитика штрафов/пеней
				ИЛИ (ОбщегоНазначения.ЕстьРеквизитДокумента("СубконтоДт1", МетаданныеДокумента)
					И ЗначениеЗаполнено(СтруктураШапкиДокумента.Ссылка.СубконтоДт1) 
					И ТипЗнч(СтруктураШапкиДокумента.Ссылка.СубконтоДт1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет")
					И (НЕ СтруктураШапкиДокумента.Ссылка.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.Налог)
					И (НЕ СтруктураШапкиДокумента.Ссылка.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.НалогСам)
					И (НЕ СтруктураШапкиДокумента.Ссылка.СубконтоДт1 = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт)))Тогда
			                                                   
			ПредставлениеВида = "ПрочееДДС";
			
		Иначе
			ПредставлениеВида = "ПеречислениеНалога";
		КонецЕсли;
	Иначе
		
		ПредставлениеВида = "НеОтражатьВНУ";
		
	КонецЕсли;
	
	Возврат ПредставлениеВида;
	
КонецФункции

//Получить курс по документу оплаты (используется при зачете аванса поставщику
//
Функция ОпределитьКурсПоДокументу(Договор, Сделка, РасчетныйДокумент)
	
	Курс = 1;
	
	Если НЕ ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Возврат Курс;
	Конецесли;
	
	Если (ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) И (ЗначениеЗаполнено(Договор)) Тогда
		
		Если Договор.РасчетыВУсловныхЕдиницах Тогда
			
			МетаданныеДокумента = РасчетныйДокумент.Метаданные();
			
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПлатежа", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "РасшифровкаПлатежа") Тогда
				
				Сумма = 0;
				СуммаВзаиморасчетов = 0;
				
				Для Каждого Строка ИЗ РасчетныйДокумент.РасшифровкаПлатежа Цикл
					
					Если Договор = Строка.ДоговорКонтрагента И ((Сделка = Строка.Сделка) ИЛИ (Не ЗначениеЗаполнено(Строка.Сделка))) Тогда
						
						Сумма = Сумма + Строка.СуммаПлатежа;
						СуммаВзаиморасчетов = СуммаВзаиморасчетов + Строка.СуммаВзаиморасчетов;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);
				
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сумма", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "ОплатаПоставщику") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "ОплатаПоставщику") Тогда
				
				Сумма = 0;
				СуммаВзаиморасчетов = 0;
				
				Для Каждого Строка ИЗ РасчетныйДокумент.ОплатаПоставщику Цикл
					
					Если Договор = Строка.ДоговорКонтрагента И ((Сделка = Строка.Сделка) ИЛИ (Не ЗначениеЗаполнено(Строка.Сделка))) Тогда
						
						Сумма = Сумма + Строка.Сумма;
						СуммаВзаиморасчетов = СуммаВзаиморасчетов + Строка.СуммаВзаиморасчетов;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);
				
			КонецЕсли;
			
		Иначе
			Курс =  ЗаполнениеДокументов.КурсДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить())/ЗаполнениеДокументов.КратностьДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить());
		КонецЕсли;
		
	Иначе
			
		Курс =  ЗаполнениеДокументов.КурсДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить())/ЗаполнениеДокументов.КратностьДокумента(РасчетныйДокумент, Константы.ВалютаРегламентированногоУчета.Получить());
	
	КонецЕсли;
	
	Возврат Курс;		
КонецФункции

//Заменяет пустые ссылки в таблице фильтров на значения "Неопределено"
//
Процедура ОбработатьТаблицуФильтров(ТаблицаФильтров)
	
	Для Каждого Фильтр Из ТаблицаФильтров Цикл
		
		Если Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
			
			Для Каждого Элемент Из Фильтр.ЗначениеПоля Цикл
				
				Если НЕ ЗначениеЗаполнено(Элемент) Тогда
					
					Элемент = Неопределено;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Фильтр.ЗначениеПоля) Тогда
				
				Фильтр.ЗначениеПоля = Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Возвращает реквизиты первичного документа для занесения в графу 2 КУДиР
//
Функция РеквизитыПервичногоДокумента(Документ, ТЧ = "", Строка = 0, УказыватьВид = Ложь) Экспорт
	
	НомерНаПечать = "";
	ДатаНаПечать = "";
	МетаданныеДокумента = Документ.Метаданные();
	
	//Проверим дату и номер первичного документа в табличной части
	Если (ЗначениеЗаполнено(ТЧ)) и (Строка > 0) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерВходящегоДокумента", МетаданныеДокумента, ТЧ) И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДатаВходящегоДокумента", МетаданныеДокумента, ТЧ) Тогда
			
			Если НЕ Документ[ТЧ].Количество() < Строка-1 Тогда
				
				НомерНаПечать = Документ[ТЧ][Строка-1].НомерВходящегоДокумента;
				ДатаНаПечать = Формат(Документ[ТЧ][Строка-1].ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверим дату и номер первичного документа в шапке
	Если НЕ ЗначениеЗаполнено(НомерНаПечать) И НЕ ЗначениеЗаполнено(ДатаНаПечать) Тогда
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("НомерВходящегоДокумента", МетаданныеДокумента) И
			ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаВходящегоДокумента", МетаданныеДокумента) Тогда
			
			НомерНаПечать = Документ.НомерВходящегоДокумента;
			ДатаНаПечать = Формат(Документ.ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг");
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Если дата и номер первичного документа не указаны или не заполнены, используем дату и номер регистрации
	Если НЕ ЗначениеЗаполнено(НомерНаПечать) Тогда
		
		НомерНаПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаНаПечать) Тогда
		
		ДатаНаПечать = Формат(Документ.Дата, "ДФ=дд.ММ.гггг");
		
	КонецЕсли;
	
	РеквизитыПервичногоДокумента = "№ "+ НомерНаПечать + " от " + ДатаНаПечать;
	
	Если УказыватьВид Тогда
		РеквизитыПервичногоДокумента = МетаданныеДокумента.Синоним + " " + РеквизитыПервичногоДокумента;
	КонецЕсли;
	
	Возврат РеквизитыПервичногоДокумента;
КонецФункции

//Возвращает новый статус оплаты расхода, полученный из текущего статуса
//переданным событием
Функция ПолучитьНовыйСтатусОплаты(СтруктураШапкиДокумента, Расход, ТекСтатус, Событие = "Оплата", ПризнаватьРасход = Ложь)
	
	НовыйСтатус = ТекСтатус;
	РасходыПоОплате = Ложь;
	РасходыПоОтгрузке = Ложь;
	Если ЗначениеЗаполнено(Расход.СчетУчета) И (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура) Тогда
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		РасходыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ 
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
	    ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
		РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
		
	ИначеЕсли ЗначениеЗаполнено(Расход.СчетУчета) И (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) Тогда
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
		ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ 
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
	    ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
		РасходыПоОплате = (ЭтоТовар И ТоварыПоОплате) ИЛИ (МатериалыПоОплате И ЭтоМатериал);
		
	КонецЕсли;

	Если Событие = "Оплата" Тогда
		
		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			Если РасходыПоОплате Тогда
				Если Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					ПризнаватьРасход = Истина;
				ИначеЕсли Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено;
				Иначе
					НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				КонецЕсли;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписано;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем;
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				ПризнаватьРасход = Истина;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
			//Если после 2006 г. отражается оплата НМА, поступивших до 2006 года.
			Если (Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА) И
				(СтруктураШапкиДокумента.Дата >= Дата("20060101")) Тогда
				ПризнаватьРасход = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли (Событие = "Списание") или (Событие = "ВозвратПоставщику") Тогда
		
		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;
		
	ИначеЕсли Событие = "Реализация" Тогда
		
		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
				ПризнаватьРасход = Истина;
			Иначе
				НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем;
			КонецЕсли;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;
		
	ИначеЕсли Событие = "Розница" Тогда
		
		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписано Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено;
		КонецЕсли;
		
	ИначеЕсли Событие = "Доход" Тогда
		
		Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеОплачено;
		ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
			Если РасходыПоОтгрузке ИЛИ РасходыПоОплате Тогда
				ПризнаватьРасход = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Событие = "РаспределениеЕНВД" Тогда
		
		//Если ТекСтатус = Перечисления.СтатусыРасходовУСН.НеРаспределено Тогда
			НовыйСтатус = Перечисления.СтатусыРасходовУСН.ПустаяСсылка();
			ПризнаватьРасход = Истина;
		//ИначеЕсли ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено Тогда
		//	НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
		//КонецЕсли;
		
	КонецЕсли;
	
	Возврат НовыйСтатус;
			
КонецФункции

//Возвращает текущий статус отражения в НУ на основании комбинации двух статусов
//поступления и списания
Функция ПолучитьКомбинациюСтатусовОтражениеВНУ(Статус1, Статус2)

	СписокСтатусов = Новый СписокЗначений;
	СписокСтатусов.Добавить(Статус1);
	СписокСтатусов.Добавить(Статус2);

	Если НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.ПустаяСсылка()) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.НеПринимаются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.НеПринимаются;

	ИначеЕсли НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.Распределяются) = Неопределено Тогда
		Возврат Перечисления.ОтражениеВУСН.Распределяются;

	Иначе
		Возврат Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;

КонецФункции

//Собирает таблицы прихода и расхода в единую таблицу движений регистров
//Возвращает структуру, состоящую из трех таблиц (движения по трем регистрам
Функция СобратьТаблицыДвижений(СтруктураРасходов, ТаблицаВзаиморасчетов = Неопределено, ДопТаблицаРасходов = Неопределено, ДопСтруктураРасходов = Неопределено)
	
	ТаблицаКорректировкиРасход = СтруктураРасходов.ТаблицаРасход;
	ТаблицаКорректировкиПриход = СтруктураРасходов.ТаблицаПриход;
	ТаблицаПризнанныхРасходов  = СтруктураРасходов.ТаблицаПринятых;
	
	Если НЕ ТаблицаКорректировкиПриход.Колонки.Найти("СтатусСписания") = Неопределено Тогда
		ТаблицаКорректировкиПриход.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.ПустаяСсылка(), "СтатусСписания");
	КонецЕсли;
	
	Если ТаблицаВзаиморасчетов = Неопределено Тогда
		Если НЕ ДопСтруктураРасходов = Неопределено Тогда
			ТаблицаВзаиморасчетов = ДопСтруктураРасходов.ВзаиморасчетыРасход.СкопироватьКолонки();
		Иначе
			ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДопСтруктураРасходов = Неопределено Тогда
		
		ТаблицаРезультат = ДопСтруктураРасходов.РасходыУСН.Скопировать();
		
		Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидДвижения	 		= ВидДвиженияНакопления.Расход;
		КонецЦикла;
		
		Для Каждого Строка Из ДопСтруктураРасходов.КУДиР Цикл
			НоваяСтрока = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		Для Каждого Строка Из ДопСтруктураРасходов.ВзаиморасчетыРасход Цикл
			НоваяСтрока = ТаблицаВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
	ИначеЕсли НЕ ДопТаблицаРасходов = Неопределено Тогда
		
		ТаблицаРезультат = ДопТаблицаРасходов.Скопировать();
		
		Если ТаблицаРезультат.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаРезультат.Колонки.Добавить("ВидДвижения");
		КонецЕсли;
		
		ТаблицаРезультат.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
		
		Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
			НоваяСтрока = ТаблицаРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			НоваяСтрока.ВидДвижения	 		= ВидДвиженияНакопления.Расход;
		КонецЦикла;

	Иначе
		
		ТаблицаРезультат = ТаблицаКорректировкиРасход.Скопировать();
		
		Если ТаблицаРезультат.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаРезультат.Колонки.Добавить("ВидДвижения");
		КонецЕсли;
		
		ТаблицаРезультат.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
		
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаКорректировкиПриход Цикл
		
		НоваяСтрока = ТаблицаРезультат.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.ВидДвижения 		= ВидДвиженияНакопления.Приход;
		
	КонецЦикла;
		
	Возврат (Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР",
								ТаблицаВзаиморасчетов, ТаблицаРезультат, ТаблицаПризнанныхРасходов));
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Определяет долю выручки, не включаемую в доходы разделяя ее на выручку комитента 
//и выручку по деятельности ЕНВД
Функция ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаСписанныхПартий = Неопределено, ДвиженияРегистров = Неопределено, ВидОперации = "Оплата")

	ВыручкаВсего = 0;
	ВыручкаЕНВД = 0;
	ВыручкаКомиссии = 0;
	
	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
	
	//Подменим ссылку если документ - реализация отгруженной продукции
	Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			ДокументСсылка = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	//В товарах
	
	Если (НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО) И (НЕ ВидОперации = "РеализацияУслуг") Тогда
		
		//Переданные = (НЕ ТаблицаСписанныхПартий.Колонки.Найти("ДокументПередачи") = Неопределено);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
		Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
		
		Текст =
		
		"ВЫБРАТЬ
		|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
		|	РеализацияТоваровУслугТовары.СчетДоходов,
		|	СУММА(РеализацияТоваровУслугТовары.Сумма) КАК Сумма,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.СчетУчета";
		
		Текст = Текст + "
		|ИЗ
		|	Документ." + ИмяВидаДокумента + ".Товары КАК РеализацияТоваровУслугТовары
		|
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.СчетДоходов,
		|	РеализацияТоваровУслугТовары.Номенклатура,
		|	РеализацияТоваровУслугТовары.СчетУчета";
		
		Запрос.Текст = Текст;
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из ТаблицаРезультата Цикл
			Если НЕ (Строка.СчетУчета.Забалансовый) Тогда
				Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(Строка.СчетДоходов) Тогда
					ВыручкаЕНВД = ВыручкаЕНВД + Строка.Сумма;
				КонецЕсли;
				Продолжить;
			Иначе
				ВыручкаКомиссии = ВыручкаКомиссии + Строка.Сумма;
			КонецЕсли;			
		КонецЦикла;
		
		ВыручкаВсего = ВыручкаВсего + ТаблицаРезультата.Итог("Сумма");
	КонецЕсли;
	
	//В услугах
	Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, "Услуги") Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Всего = 0;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Реализация.СчетДоходов,
		|	Сумма(Реализация.Сумма) КАК Сумма
		|ИЗ
		|	Документ."+ИмяВидаДокумента+".Услуги КАК Реализация
		|
		|ГДЕ
		|	Реализация.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Реализация.СчетДоходов";
		
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		ВыручкаВсего = ВыручкаВсего + ТаблицаРезультата.Итог("Сумма");
		
		Для Каждого СтрокаСчета Из ТаблицаРезультата Цикл
			Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаСчета.СчетДоходов) Тогда
				ВыручкаЕНВД = ВыручкаЕНВД + СтрокаСчета.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//В агентских услугах
	Если ОбщегоНазначения.ЕстьТабЧастьДокумента("АгентскиеУслуги", МетаданныеДокумента) Тогда
		
		ВыручкаКомиссии = ВыручкаКомиссии + ДокументСсылка.АгентскиеУслуги.Итог("Сумма");
		
	КонецЕсли;
	
	//В услугах по переработке
	Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Продукция") = НЕОПРЕДЕЛЕНО Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Всего = 0;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Реализация.СчетДоходов,
		|	Сумма(Реализация.Сумма) КАК Сумма
		|ИЗ
		|	Документ."+ИмяВидаДокумента+".Продукция КАК Реализация
		|
		|ГДЕ
		|	Реализация.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Реализация.СчетДоходов";
		
		ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
		ВыручкаВсего = ВыручкаВсего + ТаблицаРезультата.Итог("Сумма");
		
		Для Каждого СтрокаСчета Из ТаблицаРезультата Цикл
			Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СтрокаСчета.СчетДоходов) Тогда
				ВыручкаЕНВД = ВыручкаЕНВД + СтрокаСчета.Сумма;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//В документе "Оказание услуг" - оказание услуг списку контрагентов
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("СчетДоходов", МетаданныеДокумента)
		И (НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Контрагенты") = НЕОПРЕДЕЛЕНО) Тогда
		
		ВыручкаВсего = ВыручкаВсего + ДокументСсылка.Контрагенты.Итог("Сумма");
		Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(ДокументСсылка.СчетДоходов) Тогда
			ВыручкаЕНВД = ВыручкаВсего;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Новый Структура("Всего, ЕНВД, Комиссия", ВыручкаВсего, ВыручкаЕНВД, ВыручкаКомиссии);
	
КонецФункции

//Дополняет таблицу списанных партий колонкой, с новым статусом списания и количеством 
//списанным по новому статусу
Процедура ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаСписанныхПартий, ВидОперации) Экспорт

	ВыручкаВсего = 0;
	ВыручкаЕНВД = 0;
	ВыручкаКомиссии = 0;
	
	ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
	
	Если ТаблицаСписанныхПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("СтатусСписания");
	КонецЕсли;
	Если ТаблицаСписанныхПартий.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
		ТаблицаСписанныхПартий.Колонки.Добавить("КоличествоПоСтатусуСписания");
	КонецЕсли;
	ТаблицаСписанныхПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются, "СтатусСписания");
	ТаблицаСписанныхПартий.ЗаполнитьЗначения(0, "КоличествоПоСтатусуСписания");

	//Подменим ссылку если документ - реализация отгруженной продукции
	Если (ДокументСсылка.Метаданные().ТабличныеЧасти.Количество() = 0) И (НЕ ДокументСсылка.Метаданные().Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
		Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
			ДокументСсылка = СтруктураШапкиДокумента.Ссылка.ДокументОтгрузки;
		КонецЕсли;
	КонецЕсли;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	ИмяВидаДокумента = МетаданныеДокумента.Имя;
	
	ТабличныеЧасти = Новый Массив;
	
	Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ИспользованныеМатериалы") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("ИспользованныеМатериалы");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Материалы") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Материалы");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Товары");
	ИначеЕсли НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Спецодежда") = НЕОПРЕДЕЛЕНО Тогда
		ТабличныеЧасти.Добавить("Спецодежда");
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("Спецоснастка") = НЕОПРЕДЕЛЕНО Тогда
			ТабличныеЧасти.Добавить("Спецоснастка");
		КонецЕсли;
		Если НЕ ДокументСсылка.Метаданные().ТабличныеЧасти.Найти("ИнвентарьИХозяйственныеПринадлежности") = НЕОПРЕДЕЛЕНО Тогда
			ТабличныеЧасти.Добавить("ИнвентарьИХозяйственныеПринадлежности");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = "ВозвратПоставщику" Тогда
		Для Каждого Строка Из ТаблицаСписанныхПартий Цикл
			Строка.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
			Строка.КоличествоПоСтатусуСписания = Строка.Количество;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ТаблицаСписанныхПартий.Индексы.Добавить("Номенклатура");
	
	Для Каждого ИмяТЧ Из ТабличныеЧасти Цикл
		//Если отражение в НУ указывается явно
		Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", МетаданныеДокумента, ИмяТЧ) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			
			Текст =
			
			"ВЫБРАТЬ
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.ОтражениеВУСН,
			|	РеализацияТоваровУслугТовары.Номенклатура
			|ИЗ
			|	Документ." + ИмяВидаДокумента + "." + ИмяТЧ + " КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.ОтражениеВУСН,
			|	РеализацияТоваровУслугТовары.Номенклатура";
			
			Запрос.Текст = Текст;
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строка Из ТаблицаРезультата Цикл
				Если Строка.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.Принимаются Тогда
					
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",				Строка.Номенклатура);
					
					НайденныеСтроки = ТаблицаСписанныхПартий.НайтиСтроки(СтруктураОтбора);
					КоличествоПоСтроке = Строка.Количество;
					
					Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
						Если КоличествоПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;
						
						Учесть = Мин(КоличествоПоСтроке, СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоСтатусуСписания);
						
						Если Учесть = 0 Тогда
							Продолжить;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СтатусСписания) 
							ИЛИ (СтрокаТаблицы.СтатусСписания = Строка.ОтражениеВУСН) Тогда
							СтрокаТаблицы.СтатусСписания = Строка.ОтражениеВУСН;
							СтрокаТаблицы.КоличествоПоСтатусуСписания = СтрокаТаблицы.КоличествоПоСтатусуСписания + Учесть;
							
						Иначе
							НоваяСтрока = ТаблицаСписанныхПартий.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
							
							НоваяСтрока.Количество = Учесть;
							НоваяСтрока.КоличествоПоСтатусуСписания = Учесть;
							НоваяСтрока.СтатусСписания = ?(ЗначениеЗаполнено(Строка.ОтражениеВУСН), Строка.ОтражениеВУСН, Перечисления.ОтражениеВУСН.НеПринимаются);
							
							СтрокаТаблицы.Количество = СтрокаТаблицы.Количество - Учесть;
							
						КонецЕсли;
						КоличествоПоСтроке = КоличествоПоСтроке - Учесть;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			//Если реализация - выделяем реализованные по ЕНВД и устанавливаем им статус не принимаемых
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходов", МетаданныеДокумента, ИмяТЧ) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка",		 ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			
			Текст =
			
			"ВЫБРАТЬ
			|	СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество,
			|	РеализацияТоваровУслугТовары.СчетДоходов,
			|	РеализацияТоваровУслугТовары.Номенклатура
			|ИЗ
			|	Документ." + ИмяВидаДокумента + "." + ИмяТЧ + " КАК РеализацияТоваровУслугТовары
			|
			|ГДЕ
			|	РеализацияТоваровУслугТовары.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	РеализацияТоваровУслугТовары.СчетДоходов,
			|	РеализацияТоваровУслугТовары.Номенклатура";
			
			Запрос.Текст = Текст;
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строка Из ТаблицаРезультата Цикл
				Если НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(Строка.СчетДоходов) Тогда
					СтруктураОтбора = Новый Структура;
					СтруктураОтбора.Вставить("Номенклатура",				Строка.Номенклатура);
					
					НайденныеСтроки = ТаблицаСписанныхПартий.НайтиСтроки(СтруктураОтбора);
					КоличествоПоСтроке = Строка.Количество;
					
					Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
						Если КоличествоПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;
						Учесть = Мин(КоличествоПоСтроке, СтрокаТаблицы.Количество - СтрокаТаблицы.КоличествоПоСтатусуСписания);
						СтрокаТаблицы.СтатусСписания = Перечисления.ОтражениеВУСН.НеПринимаются;
						СтрокаТаблицы.КоличествоПоСтатусуСписания = СтрокаТаблицы.КоличествоПоСтатусуСписания + Учесть;
						КоличествоПоСтроке = КоличествоПоСтроке - Учесть;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;		
КонецПроцедуры

//Формирует таблицы движений регистра "Расходы при УСН" по таблице остатков расходов
//на заданную сумму по установленному виду операции
Функция ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, Сумма = 0, ВидОперации = "Оплата", КонтролироватьСумму = Истина, ДокументОплаты = Неопределено, ВходящаяСтруктура = Неопределено)
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	ТаблицаКорректировкиРасход = Новый ТаблицаЗначений;
	ТаблицаКорректировкиПриход = Новый ТаблицаЗначений;
	ТаблицаПризнанныхРасходов  = Новый ТаблицаЗначений;
	
	Если ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("НДС");
		ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
	КонецЕсли;
	Если ТаблицаРасходов.Колонки.Найти("Количество") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("Количество");
		ТаблицаРасходов.ЗаполнитьЗначения(0, "Количество");
	КонецЕсли;
	Если ТаблицаРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
		ТаблицаРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
	КонецЕсли;
	
	Для Каждого Колонка Из ТаблицаРасходов.Колонки Цикл
		ТаблицаКорректировкиРасход.Колонки.Добавить(Колонка.Имя);
		ТаблицаКорректировкиПриход.Колонки.Добавить(Колонка.Имя);
		ТаблицаПризнанныхРасходов.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Расход Из ТаблицаРасходов Цикл
		Если ЗначениеЗаполнено(Расход.РеквизитыДокументаОплаты) Тогда
			Отказ = Ложь;
			УчетнаяПолитикаДокумент = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Расход.РеквизитыДокументаОплаты.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитикаДокумент.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
		ИначеЕсли ЗначениеЗаполнено(Расход.РасчетныйДокумент) Тогда
			Отказ = Ложь;
			УчетнаяПолитикаДокумент = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Расход.РасчетныйДокумент.Дата, Отказ, СтруктураШапкиДокумента.Организация);
			ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитикаДокумент.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
		Иначе
			ВыделятьНДСУСНДокумент = ВыделятьНДСУСН;
		КонецЕсли;
		Если КонтролироватьСумму Тогда
			Если Сумма = 0 Тогда
				Прервать;
			КонецЕсли;
			Если Расход.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ВыделятьНДСУСНДокумент И 
				(Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
				(Расход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда
				СуммаКорректировки = Мин(Расход.Сумма + Расход.НДС, Сумма);
				Сумма = Макс(0, Сумма - СуммаКорректировки);
				К = СуммаКорректировки / (Расход.Сумма + Расход.НДС);
			Иначе
				СуммаКорректировки = Мин(Расход.Сумма, Сумма);
				Сумма = Сумма - СуммаКорректировки;
				К = СуммаКорректировки / Расход.Сумма;
			КонецЕсли;
		Иначе
			К = 1;
			СуммаКорректировки = Расход.Сумма;
		КонецЕсли;
		ПризнаватьРасход = Ложь;
		НовыйСтатусОплаты = ПолучитьНовыйСтатусОплаты(СтруктураШапкиДокумента, Расход, Расход.СтатусыОплатыРасходовУСН, ВидОперации, ПризнаватьРасход);
		Если НЕ ВидОперации = "РаспределениеЕНВД" Тогда
			Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
				НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			КонецЕсли;
			Если (НЕ ЗначениеЗаполнено(НовыйСтатусОплаты)) И (НЕ ТаблицаРасходов.Колонки.Найти("СтатусСписания") = Неопределено) Тогда
				НовыйСтатусРасхода = ПолучитьКомбинациюСтатусовОтражениеВНУ(Расход.ОтражениеВУСН, Расход.СтатусСписания);
				
				Если НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		СтрокаКорректировкиРасход = ТаблицаКорректировкиРасход.Добавить();
		
		НомерСтрокиРасходов = 0;
		Если ЗначениеЗаполнено(НовыйСтатусОплаты) Тогда
			СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
		Иначе
			СтрокаКорректировкиПриход = ТаблицаПризнанныхРасходов.Добавить();
			НомерСтрокиРасходов = ТаблицаПризнанныхРасходов.Количество();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);
				
		Если ВидОперации = "РаспределениеЕНВД" Тогда
			Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются Тогда
				СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОперации = "КорректировкаПоАО" И ЗначениеЗаполнено(ДокументОплаты) Тогда
			СтрокаКорректировкиПриход.РасчетныйДокумент = ДокументОплаты;
		КонецЕсли;
		
		СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты; 
		Если НЕ К = 1 Тогда
			СтрокаКорректировкиРасход.Сумма 		= К*СтрокаКорректировкиРасход.Сумма;
			СтрокаКорректировкиРасход.Количество	= К*СтрокаКорректировкиРасход.Количество;
			СтрокаКорректировкиРасход.НДС			= К*СтрокаКорректировкиРасход.НДС;
			СтрокаКорректировкиПриход.Сумма 		= К*СтрокаКорректировкиПриход.Сумма;
			СтрокаКорректировкиПриход.Количество	= К*СтрокаКорректировкиПриход.Количество;
			СтрокаКорректировкиПриход.НДС			= К*СтрокаКорректировкиПриход.НДС;
		КонецЕсли;
		Если (СтрокаКорректировкиРасход.Валюта <> Константы.ВалютаРегламентированногоУчета.Получить()) 
			И (НЕ ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено) Тогда
			Если ЗначениеЗаполнено(Расход.СтруктураКурса) Тогда
				Курс = Расход.СтруктураКурса.Курс;
				Кратность = ?(Расход.СтруктураКурса.Кратность = 0, 1, Расход.СтруктураКурса.Кратность);
				СтрокаКорректировкиПриход.Сумма 		= СтрокаКорректировкиПриход.Сумма*Курс/Кратность;
				СтрокаКорректировкиПриход.НДС			= СтрокаКорректировкиПриход.НДС*Курс/Кратность;
				Если Курс <> 1 Тогда
					СтрокаКорректировкиПриход.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//Признаем расходы в части входящего НДС
		Если (ВидОперации = "Оплата") И (СтрокаКорректировкиПриход.НДС > 0) И 
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.ПустаяСсылка()) И
			(СтрокаКорректировкиРасход.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.НеПринимаются) Тогда
			
			Если (ВыделятьНДСУСН) Тогда
				Если СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
				Иначе
					СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаНДС, Расход);
				
				Если НЕ СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				
				СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
				СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
				СтрокаНДС.Валюта		= СтрокаКорректировкиПриход.Валюта;
				СтрокаНДС.Количество	= 0;
				СтрокаНДС.НДС			= 0;
				
				Если Не ВыделятьНДСУСНДокумент Тогда
					СтрокаКорректировкиПриход.Сумма = СтрокаКорректировкиПриход.Сумма - СтрокаКорректировкиПриход.НДС;
				КонецЕсли;
				
			ИначеЕсли (НЕ ВыделятьНДСУСН) И (ВыделятьНДСУСНДокумент) Тогда
				
				СтрокаКорректировкиПриход.Сумма = СтрокаКорректировкиПриход.Сумма + СтрокаКорректировкиПриход.НДС;
			КонецЕсли;
		КонецЕсли;
		
		//Признаем расходы, отраженные по статусу "Не списано, принято"
		Если (ВидОперации = "Оплата") И 
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято) И 
			(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
			
			СтрокаРасходов = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасходов, СтрокаКорректировкиПриход);
			
		КонецЕсли;
		
		// Изменение статуса расхода по списанию
		Если НЕ ТаблицаРасходов.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			НовыйСтатусРасхода = ПолучитьКомбинациюСтатусовОтражениеВНУ(Расход.ОтражениеВУСН, Расход.СтатусСписания);
			Если НЕ ЗначениеЗаполнено(Расход.СтатусСписания) Тогда
				
			ИначеЕсли Расход.ОтражениеВУСН = НовыйСтатусРасхода Тогда
				
			ИначеЕсли Расход.Количество > Расход.КоличествоПоСтатусуСписания Тогда
				
				К2 = Расход.КоличествоПоСтатусуСписания / Расход.Количество;
				СумКорректировки = К2*СтрокаКорректировкиПриход.Сумма;
				КолКорректировки = К2*СтрокаКорректировкиПриход.Количество;
				НДСКорректировки = К2*СтрокаКорректировкиПриход.НДС;
				СтрокаКорректировкиПриход.Сумма 		= СтрокаКорректировкиПриход.Сумма - СумКорректировки;
				СтрокаКорректировкиПриход.Количество 	= СтрокаКорректировкиПриход.Количество - КолКорректировки;
				СтрокаКорректировкиПриход.НДС 			= СтрокаКорректировкиПриход.НДС - НДСКорректировки;
				
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) Тогда
					СтрокаКорректировкиПриход = ТаблицаПризнанныхРасходов.Добавить();
				Иначе
					СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
				ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);
				
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					ПризнаватьРасход = Ложь;
				КонецЕсли;
				СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты; 
				СтрокаКорректировкиПриход.ОтражениеВУСН  = НовыйСтатусРасхода;
				СтрокаКорректировкиПриход.Сумма 		= СумКорректировки;
				СтрокаКорректировкиПриход.Количество 	= КолКорректировки;
				СтрокаКорректировкиПриход.НДС 			= НДСКорректировки;
								
				ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
												ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
												СтрокаКорректировкиРасход, СтрокаКорректировкиПриход);
			Иначе
                Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.Распределяются Тогда
					НовыйСтатусОплаты = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НовыйСтатусОплаты) И НовыйСтатусРасхода = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					ПризнаватьРасход = Ложь;
				КонецЕсли;
				СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = НовыйСтатусОплаты;
				СтрокаКорректировкиПриход.ОтражениеВУСН = НовыйСтатусРасхода;
				
				ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход);
			КонецЕсли;
					
		КонецЕсли;
		
		Если (НомерСтрокиРасходов > 0) И (СтрокаКорректировкиПриход.НДС > 0) И
			(НЕ ВыделятьНДСУСН) И (ВыделятьНДСУСНДокумент) И (НЕ ВидОперации = "Оплата") Тогда
			
			СтрокаКорректировкиПриход.НДС = 0;
		КонецЕсли;
	
		Если (НомерСтрокиРасходов > 0) и (НЕ ПризнаватьРасход) Тогда
			ТаблицаПризнанныхРасходов.Удалить(НомерСтрокиРасходов-1);
		КонецЕсли;
        
		Если К = 1 Тогда
			Расход.Сумма = 0;
			Расход.Количество = 0;
			Расход.НДС = 0;
		Иначе
			Расход.Сумма = Расход.Сумма - К*Расход.Сумма;
			Расход.Количество = Расход.Количество - К*Расход.Количество;
			Расход.НДС = Расход.НДС - К*Расход.НДС;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидОперации = "Оплата" Тогда
		Если ТаблицаКорректировкиПриход.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			ТаблицаКорректировкиПриход.Колонки.Добавить("РеквизитыДокументаОплаты");
		КонецЕсли;
		Если ТаблицаПризнанныхРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено Тогда
			ТаблицаПризнанныхРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
		КонецЕсли;
		ТаблицаКорректировкиПриход.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
		ТаблицаПризнанныхРасходов.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(ВходящаяСтруктура) Тогда
		Если ВходящаяСтруктура.ТаблицаПриход.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКорректировкиПриход Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаПриход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;	
		Иначе
			ВходящаяСтруктура.ТаблицаПриход = ТаблицаКорректировкиПриход;
		КонецЕсли;		
		Если ВходящаяСтруктура.ТаблицаРасход.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаКорректировкиРасход Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаРасход.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаРасход = ТаблицаКорректировкиРасход;
		КонецЕсли;
		Если ВходящаяСтруктура.ТаблицаПринятых.Количество() > 0 Тогда
			Для Каждого Строка Из ТаблицаПризнанныхРасходов Цикл
				НоваяСтрока = ВходящаяСтруктура.ТаблицаПринятых.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		Иначе
			ВходящаяСтруктура.ТаблицаПринятых = ТаблицаПризнанныхРасходов;
		КонецЕсли;
		ИтоговаяСтруктура = ВходящаяСтруктура;
	Иначе
		ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
	КонецЕсли;

	Возврат ИтоговаяСтруктура;
	
КонецФункции

Процедура ПроверитьСторноРасходовПОСписанию(СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход)
											
	Если СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
		Возврат;
	КонецЕсли;
	
	ВыделятьНДСУСН = ВыделятьНДСУСНДокумент;
	//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	Если (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И 
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
		
		//В части входящего НДС
		Если (ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И 
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем) Тогда
			
			//Сторно
			СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);
						
			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;
			
			//Распределяемые расходы
			СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиПриход);					
					
			СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;
		КонецЕсли;
		
		Если СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			
			//Сторно
			СтрокаСторно = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСторно, СтрокаКорректировкиРасход);
			
			СтрокаСторно.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
			СтрокаСторно.Количество	= - СтрокаКорректировкиПриход.Количество;
			СтрокаСторно.НДС		= - СтрокаКорректировкиПриход.НДС;
			
			//Распределяемые расходы
			СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
			
		КонецЕсли;
		
	ИначеЕсли (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются) И 
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
		
		//В части входящего НДС
		Если (ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И 
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем) Тогда
			
			//Сторно
			СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);
						
			СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
			СтрокаНДС.Количество	= 0;
			СтрокаНДС.НДС			= 0;
			
		КонецЕсли;
		
		Если СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято Тогда
			
			//Сторно
			НомерСтрокиРасходов = 0;
			СтрокаКорректировкиПриход.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
			СтрокаКорректировкиПриход.Количество	= - СтрокаКорректировкиПриход.Количество;
			СтрокаКорректировкиПриход.НДС			= - СтрокаКорректировкиПриход.НДС;
		КонецЕсли;
		
	ИначеЕсли (СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И 
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются) Тогда //Не обрабатываем
		
	КонецЕсли;
	
КонецПроцедуры

//Отражает прочее (настроенное вручную) движение денежных средств в КУДиР
//
Процедура ПрочееДДС(Документ, ДвиженияРегистров, КУДиР) Экспорт

	Если (Документ.Графа4_УСН = 0) И
		(Документ.Графа5_УСН = 0) И
		(Документ.Графа6_УСН = 0) И
		(Документ.Графа7_УСН = 0) И
		(Документ.НДС_УСН = 0) Тогда
		
		Возврат;
	КонецЕсли;
	
	КУДиР.Графа4			= Документ.Графа4_УСН;

	Если Документ.ДоходыЕНВД_УСН Тогда
        КУДиР.ДоходЕНВД = Документ.Графа4_УСН - Документ.Графа5_УСН;
	Иначе
		КУДиР.Графа5 = Документ.Графа5_УСН;
	КонецЕсли;

	КУДиР.Графа6 = Документ.Графа6_УСН;

	Если Документ.РасходыЕНВД_УСН Тогда

		Если ДвиженияРегистров = Неопределено Тогда
			ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
			ДвиженияРегистров.РасходыУСН = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей().ВыгрузитьКолонки();
		КонецЕсли;
		
		СтрокаРасхода 							= ДвиженияРегистров.РасходыУСН.Добавить();
		СтрокаРасхода.Период					= Документ.Дата;
		СтрокаРасхода.Регистратор 				= Документ;
		СтрокаРасхода.ВидДвижения 				= ВидДвиженияНакопления.Приход;
		СтрокаРасхода.Активность 				= Истина;
		СтрокаРасхода.Организация 				= Документ.Организация;
		СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Распределяются;
		СтрокаРасхода.СтатусыОплатыРасходовУСН 	= Перечисления.СтатусыРасходовУСН.НеРаспределено;
		СтрокаРасхода.РасчетныйДокумент 		= Документ;
		СтрокаРасхода.Сумма 					= Документ.Графа7_УСН;
		СтрокаРасхода.НДС 						= Документ.НДС_УСН;
		СтрокаРасхода.Валюта 					= Константы.ВалютаРегламентированногоУчета.Получить();
		
	Иначе

		КУДиР.Графа7 = Документ.Графа7_УСН;
		КУДиР.НДС    = Документ.НДС_УСН;

	КонецЕсли;

	КУДиР.Содержание = Документ.Содержание_УСН;
		
КонецПроцедуры

//Собирает таблицу остатков взаиморасчетов по установленным фильтрам
//Таблица фильтров содержит колонки:
// - Имя поля (строка),  
// - Значение поля (произвольный),  
// - Условие (строка)
Функция ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Граница, Организация, ТаблицаФильтров, ДополнитьДоходами = Ложь) Экспорт
	
	УстановитьБлокировкиПоТаблицеФильтров("ПрочиеРасчеты", ТаблицаФильтров,, Организация);
	ОбработатьТаблицуФильтров(ТаблицаФильтров);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Граница",	 Граница);
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля,	 Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст = 
	"ВЫБРАТЬ
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент.Дата КАК РасчетныйДокументДата,
	|	СУММА(ПрочиеРасчетыОстатки.СуммаОстаток) КАК Сумма
	|ИЗ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки(&Граница, Организация = &Организация";
	
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если Найти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля; 
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + ") КАК ПрочиеРасчетыОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрочиеРасчетыОстатки.Организация,
	|	ПрочиеРасчетыОстатки.Контрагент,
	|	ПрочиеРасчетыОстатки.СчетУчета,
	|	ПрочиеРасчетыОстатки.РасчетныйДокумент
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрНакопления.ПрочиеРасчеты.Остатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокументДата";
	
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

//Собирает таблицу остатков расходов по установленным фильтрам
//Таблица фильтров содержит колонки:
// - Имя поля (строка),  
// - Значение поля (произвольный),  
// - Условие (строка)  
Функция ВыполнитьЗапросПоРасходам(Граница, Организация, ТаблицаФильтров, ТаблицаБлокировок = Неопределено) Экспорт
	
	УстановитьБлокировкиПоТаблицеФильтров("РасходыПриУСН", ТаблицаФильтров, ТаблицаБлокировок, Организация);
	ОбработатьТаблицуФильтров(ТаблицаФильтров);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Граница",	 Граница);
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Запрос.УстановитьПараметр(Фильтр.ИмяПоля,	 Фильтр.ЗначениеПоля);
	КонецЦикла;
	Текст = 
	"ВЫБРАТЬ
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН.Порядок КАК СтатусыОплатыРасходовУСНПорядок,
	|	СУММА(РасходыУСН.КоличествоОстаток) КАК Количество,
	|	СУММА(РасходыУСН.СуммаОстаток) КАК Сумма,
	|	СУММА(РасходыУСН.НДСОстаток) КАК НДС,
	|	РасходыУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|	РасходыУСН.Партия.Дата КАК ПартияДата,
	|	РасходыУСН.РасчетныйДокумент.Дата КАК РасчетныйДокументДата
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Остатки(&Граница, Организация = &Организация";
	
	Для каждого Фильтр Из ТаблицаФильтров Цикл
		Если Найти(Фильтр.Условие, "В") = 0 Тогда
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " &" + Фильтр.ИмяПоля; 
		Иначе
			Текст = Текст + " И " + Фильтр.ИмяПоля + " " + Фильтр.Условие + " (&" + Фильтр.ИмяПоля + ")";
		КонецЕсли;
	КонецЦикла;
	
	Текст = Текст + ") КАК РасходыУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОплатыРасходовУСНПорядок,
	|	ПартияДата,
	|	РасчетныйДокументДата,
	|	НомерСтрокиДокумента";
	
	Запрос.Текст = Текст;
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДВИЖЕНИЯ РЕГИСТРОВ

//Добавить движение по регистру взаиморасчетов УСН
//
Процедура ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвижений, Организация, Контрагент = Неопределено, РасчетныйДокумент, СчетУчета, СуммаДокумента) Экспорт
	
	Движение = ТаблицаДвижений.Добавить();
	Движение.Организация 		= Организация;
	Движение.Контрагент 		= Контрагент;
	Движение.СчетУчета	 		= СчетУчета;
	Движение.РасчетныйДокумент 	= РасчетныйДокумент;
	Движение.Сумма 				= СуммаДокумента;
	
КонецПроцедуры

Процедура ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, ТаблицаДвижений, СуммаВзаиморасчетов, СуммаЕНВД, СуммаКомиссии)
	
	Если (НЕ СтруктураШапкиДокумента.Ссылка.Метаданные().ТабличныеЧасти.Найти("Оплата") = НЕОПРЕДЕЛЕНО) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплата.ДоговорКонтрагента,
		|	СУММА(ОтчетОРозничныхПродажахОплата.СуммаОплаты) КАК СуммаОплаты
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.Оплата КАК ОтчетОРозничныхПродажахОплата
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахОплата.ДоговорКонтрагента";
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			КоэффБН = ?(СуммаВзаиморасчетов = 0, 0, Результат.СуммаОплаты / СуммаВзаиморасчетов);
			СуммаВзаиморасчетов = СуммаВзаиморасчетов - Результат.СуммаОплаты;
			
			СуммаЕНВД_БН = Окр(КоэффБН*СуммаЕНВД, 2, 1);
			СуммаЕНВД = СуммаЕНВД - СуммаЕНВД_БН;
			
			СуммаКомиссии_БН = Окр(КоэффБН*СуммаКомиссии, 2, 1);
			СуммаКомиссии = СуммаКомиссии - СуммаКомиссии_БН;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

//Отражает поступление расходов по регистру расходов УСН
//
Процедура ПоступлениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаРасходов, ТаблицаДвижений, ВидРасхода, Договор = Неопределено, СтатусПартии, СуммаВключаетНДС = Истина, ВозвратБезУказанияПартии = Ложь, СторноРасхода = 0)  Экспорт
	
	НС = 0;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов);
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	Валюта = мВалютаРегламентированногоУчета;
	ВалютаДокумента = мВалютаРегламентированногоУчета;
	КурсВзаиморасчетов = 1;
	КратностьВзаиморасчетов = 1;
	КурсДокумента = 1;
	КратностьДокумента = 1;
	УчетАгентскогоНДС = Ложь;
	
	Если ЗначениеЗаполнено(Договор) И (ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
		УчетАгентскогоНДС = Договор.УчетАгентскогоНДС;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента", ВалютаДокумента);
	СтруктураШапкиДокумента.Свойство("КурсВзаиморасчетов", КурсВзаиморасчетов);
	СтруктураШапкиДокумента.Свойство("КратностьВзаиморасчетов", КратностьВзаиморасчетов);
	
	СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов", Валюта);
	СтруктураШапкиДокумента.Свойство("КурсДокумента", КурсДокумента);
	СтруктураШапкиДокумента.Свойство("КратностьДокумента", КратностьДокумента);
	
	ВалютаДокумента 		= ?(ВалютаДокумента = Неопределено, мВалютаРегламентированногоУчета, ВалютаДокумента);
	КурсВзаиморасчетов 		= ?(КурсВзаиморасчетов = Неопределено, 1, КурсВзаиморасчетов);
	КратностьВзаиморасчетов = ?(КратностьВзаиморасчетов = Неопределено, 1, КратностьВзаиморасчетов);
	Валюта 					= ?(Валюта = Неопределено, ВалютаДокумента, Валюта);
	КурсДокумента 			= ?(КурсДокумента = Неопределено, 1, КурсДокумента);
	КратностьДокумента 		= ?(КратностьДокумента = Неопределено, 1, КратностьДокумента);
	
	Если ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
		ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
		РасходыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
		МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
	КонецЕсли;
	
	Для Каждого Расход из ТаблицаРасходов Цикл
		НС = НС+1;
		
		//Если поступление на комиссию - не отражаем в расходах
		Если ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
			Если НЕ ТаблицаРасходов.Колонки.Найти("СчетУчета") = Неопределено Тогда
				Если Расход.СчетУчета.Забалансовый Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			//Не отражаем непринимаемые расходы
			Если НЕ ТаблицаРасходов.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда 
				Если Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДвижений = ТаблицаДвижений.Добавить();
		СтрокаДвижений.Организация			= СтруктураШапкиДокумента.Организация;
		СтрокаДвижений.Валюта 				= Валюта;
		СтрокаДвижений.ДоговорКонтрагента 	= Договор;
		СтрокаДвижений.СтатусыПартийУСН		= СтатусПартии;
		СтрокаДвижений.РасчетныйДокумент 	= СтруктураШапкиДокумента.Ссылка;
		СтрокаДвижений.ВидРасхода 			= ВидРасхода;
		СтрокаДвижений.НомерСтрокиДокумента = НС;
		
		Если ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
			
			Если Не ТаблицаРасходов.Колонки.Найти("Номенклатура") = Неопределено Тогда
				СтрокаДвижений.ЭлементРасхода 	= Расход.Номенклатура;
			Конецесли;
			
			Если НЕ ТаблицаРасходов.Колонки.Найти("СчетЗатрат") = Неопределено Тогда
				//Из услуг выделим РБП
				Если БухгалтерскийУчет.ЭтоСубсчет(Расход.СчетЗатрат, ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов) Тогда
					СтрокаДвижений.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП;
					Если НЕ ТаблицаРасходов.Колонки.Найти("Субконто1") = Неопределено Тогда
						СтрокаДвижений.ЭлементРасхода = Расход.Субконто1;
					КонецЕсли;
				Иначе
					СтрокаДвижений.СчетУчета = Расход.СчетЗатрат;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура ИЛИ 
			(ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) Тогда
			
			Если Не ТаблицаРасходов.Колонки.Найти("Номенклатура") = Неопределено Тогда
				СтрокаДвижений.ЭлементРасхода 	= Расход.Номенклатура;
			Конецесли;
			Если НЕ ТаблицаРасходов.Колонки.Найти("Количество") = Неопределено Тогда
				СтрокаДвижений.Количество 		= Расход.Количество;
			КонецЕсли;
			
			//Для доп. расходов пропишем партию, указанную в документе
			Если НЕ ТаблицаРасходов.Колонки.Найти("ДокументОприходования") = Неопределено Тогда
				СтрокаДвижений.Партия 			= Расход.ДокументОприходования;
			Иначе
				СтрокаДвижений.Партия 			= СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
								
		ИначеЕсли ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
			Если НЕ ТаблицаРасходов.Колонки.Найти("НематериальныйАктив") = Неопределено Тогда
				СтрокаДвижений.ЭлементРасхода 	= Расход.НематериальныйАктив;				
			Конецесли;
			
		КонецЕсли;
		
		Если ВозвратБезУказанияПартии Тогда
			СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
		ИначеЕсли (СтрокаДвижений.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура)
			ИЛИ (СтрокаДвижений.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
			ИЛИ (СтрокаДвижений.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП) Тогда
			СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
		Иначе
			СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
		КонецЕсли;
		
		Если (НЕ ТаблицаРасходов.Колонки.Найти("СчетУчета") = Неопределено) Тогда //И (НЕ ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы) 
			СтрокаДвижений.СчетУчета 		= Расход.СчетУчета;
		ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("Счет") = Неопределено Тогда
			СтрокаДвижений.СчетУчета 		= Расход.Счет;
		КонецЕсли;
		
		Сумма = 0;
		СуммаНДС = 0;
		Если НЕ ТаблицаРасходов.Колонки.Найти("НДСВал") = Неопределено Тогда
			Если Валюта = мВалютаРегламентированногоУчета Тогда
				СуммаНДС = Расход.НДС;
			Иначе
				СуммаНДС = Расход.НДСВал;
			КонецЕсли;
		ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("ПроводкаСуммаНДС") = Неопределено Тогда
			СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Расход.ПроводкаСуммаНДС, мВалютаРегламентированногоУчета, Валюта,
										   1, КурсВзаиморасчетов,
										   1, КратностьВзаиморасчетов);
		ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("СуммаНДС") = Неопределено Тогда
			СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Расход.СуммаНДС, ВалютаДокумента, Валюта,
										   КурсДокумента, КурсВзаиморасчетов,
										   КратностьДокумента, КратностьВзаиморасчетов);
		КонецЕсли;
		Если НЕ ТаблицаРасходов.Колонки.Найти("СуммаВзаиморасчетов") = Неопределено Тогда
			СтрокаДвижений.Сумма = Расход.СуммаВзаиморасчетов;
			
		ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("СуммаБезНДСВал") = Неопределено Тогда
			Если Валюта = мВалютаРегламентированногоУчета Тогда
				СтрокаДвижений.Сумма = Расход.СуммаБезНДС + Расход.НДС;
			Иначе
				СтрокаДвижений.Сумма = Расход.СуммаБезНДСВал + Расход.НДСВал;
			КонецЕсли;
			
		ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("СуммаВал") = Неопределено Тогда
			Если Валюта = мВалютаРегламентированногоУчета Тогда
				СтрокаДвижений.Сумма = Расход.Сумма;
			Иначе
				СтрокаДвижений.Сумма = Расход.СуммаВал;
			КонецЕсли;
			
		ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("Сумма") = Неопределено Тогда
			СтрокаДвижений.Сумма = Расход.Сумма;
			
		КонецЕсли;
		СтрокаДвижений.НДС 					= СуммаНДС;
		
		Если УчетАгентскогоНДС Тогда
			СтрокаДвиженийНДС = ТаблицаДвижений.Добавить();
			СтрокаДвиженийНДС.Организация			= СтруктураШапкиДокумента.Организация;
			СтрокаДвиженийНДС.Валюта 				= мВалютаРегламентированногоУчета;
			СтрокаДвиженийНДС.РасчетныйДокумент 	= СтруктураШапкиДокумента.Ссылка;
			СтрокаДвиженийНДС.ВидРасхода 			= Перечисления.ВидыРасходовУСН.НДС;
			СтрокаДвиженийНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеОплачено;
			СтрокаДвиженийНДС.СчетУчета 			= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
			СтрокаДвиженийНДС.НомерСтрокиДокумента 	= НС;
			СтрокаДвиженийНДС.ОтражениеВУСН 		= Перечисления.ОтражениеВУСН.Принимаются;
			Если Валюта <>  мВалютаРегламентированногоУчета Тогда
				СтрокаДвиженийНДС.Сумма	= МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.НДС, Валюта, мВалютаРегламентированногоУчета,
														   			КурсВзаиморасчетов, 1,
										   			  				КратностьВзаиморасчетов, 1);
			Иначе
                СтрокаДвиженийНДС.Сумма	= СтрокаДвижений.НДС;
			КонецЕсли;
													  
			СтрокаДвижений.Сумма = СтрокаДвижений.Сумма - СтрокаДвижений.НДС;
			СтрокаДвижений.НДС = 0;
		КонецЕсли;
		
		Если ВозвратБезУказанияПартии Тогда
			Если НЕ ТаблицаРасходов.Колонки.Найти("Себестоимость") = Неопределено Тогда
				СтрокаДвижений.Сумма = Расход.Себестоимость;
				СтрокаДвижений.НДС = 0;
			Иначе
				СтрокаДвижений.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДвижений.Сумма, Валюта, мВалютаРегламентированногоУчета,
										   							КурсВзаиморасчетов, 1,
										   							КратностьВзаиморасчетов, 1);
				СтрокаДвижений.НДС = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыделятьНДСУСН И
			(ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда
			СтрокаДвижений.Сумма = СтрокаДвижений.Сумма - СтрокаДвижений.НДС;
		КонецЕсли;			
		
		Если НЕ ТаблицаРасходов.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда
			СтрокаДвижений.ОтражениеВУСН 		= Расход.ОтражениеВУСН;
			Если ВозвратБезУказанияПартии И (СтрокаДвижений.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются) Тогда
				Если НЕ ТаблицаРасходов.Колонки.Найти("СчетУчета") = Неопределено Тогда
					ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ 
								(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
					ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
					РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
					Если НЕ РасходыПоОплате Тогда
						СторноРасхода = СторноРасхода + СтрокаДвижений.Сумма;
					Иначе
						СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					КонецЕсли;
				ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("Счет") = Неопределено Тогда
					ЭтоТовар = ((Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ 
								(Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));
					ЭтоМатериал = Расход.Счет.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
					РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
					Если НЕ РасходыПоОплате Тогда
						СторноРасхода = СторноРасхода + СтрокаДвижений.Сумма;
					Иначе
						СтрокаДвижений.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаДвижений.ОтражениеВУСН 		= Перечисления.ОтражениеВУСН.НеПринимаются;
		Конецесли;
		
		Если УчетАгентскогоНДС Тогда
			СтрокаДвиженийНДС.ОтражениеВУСН = СтрокаДвижений.ОтражениеВУСН;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры
	
//Отражает событие "списание" по регистру расходов при УСН
//ТаблицаПартий - таблица движений регистра партионного учета НУ
Процедура СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ВидРасхода, Договор, СтатусПартии, ВидОперации = "Списание")
	
	//Подготовка наборов фильтров
	МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	
	МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетов);
	
	МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
	
	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, СчетУчета, ДокументОприходования");
	ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
	ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля	= ВидРасхода;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля	= СтатусПартии;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= МассивСчетов;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= МассивНоменклатуры;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля	= МассивПартий;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода, Партия");
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",		СтрокаПартии.СчетУчета);
		
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		
		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
			КоличествоОсталосьПоСтСписания = СтрокаПартии.КоличествоПоСтатусуСписания;
		Иначе
			КоличествоОсталосьПоСтСписания = 0;
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСписания = Мин(Строка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;
						
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если Строка.Количество > КоличествоСписания Тогда
				К = КоличествоСписания / Строка.Количество;
				НоваяСтрока.Количество 	= КоличествоСписания;
				НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
				НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
				Если НЕ ТаблицаДляСписания.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено Тогда
					НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ТаблицаПартий.Колонки.Найти("СтатусСписания") = Неопределено Тогда
				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				НоваяСтрока.СтатусСписания = НовыйСтатус;
				НоваяСтрока.КоличествоПоСтатусуСписания = НоваяСтрока.Количество;
				Если НЕ ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда
					
				ИначеЕсли Строка.ОтражениеВУСН = НовыйСтатус Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;
					
				ИначеЕсли КоличествоОсталосьПогасить < КоличествоОсталосьПоСтСписания Тогда
					КоличествоСписанияПоСтатусу = Мин(Строка.Количество, КоличествоОсталосьПоСтСписания - КоличествоОсталосьПогасить);
					КоличествоОсталосьПоСтСписания = КоличествоОсталосьПоСтСписания - КоличествоСписанияПоСтатусу;
										
					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписанияПоСтатусу;
				КонецЕсли;
			КонецЕсли;
			
			Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;
			
		КонецЦикла;
	КонецЦикла;
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);
	
	Если ВидОперации = "НаРеализацию" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.ВПереработке,"СтатусыПартийУСН");
	ИначеЕсли (ВидОперации = "ВозвратСРеализации") ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Купленные,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВозвратПоставщику" или ВидОперации = "Перемещение" Тогда
		ТаблицыДвижений.ТаблицаПриход.Очистить();
	Иначе
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"Партия");
	КонецЕсли;
		 
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);
										
КонецПроцедуры

Процедура СписаниеТЗР(СтруктураШапкиДокумента, ДвиженияРегистров)
	
	//Подготовка наборов фильтров
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.ДопРасходы;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	
	ТаблицаРасчетныхДокументов = ТаблицаРасходов.Скопировать();
	ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество"); 
	
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
	ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
	
	МассивНоменклатуры = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	ОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
	
	МассивПартий = ТаблицаРасходов.ВыгрузитьКолонку("Партия");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
	ОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивПартий);
	
	//Установим управляемые блокировки
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", "РасходыПриУСН");
		
		ЗначенияБлокировки = Новый Соответствие;
		ЗначенияБлокировки.Вставить("Период",      Новый Диапазон(НачалоКвартала(СтруктураШапкиДокумента.Дата), КонецКвартала(СтруктураШапкиДокумента.Дата))); 
		ЗначенияБлокировки.Вставить("Организация", СтруктураШапкиДокумента.Организация); 
		ЗначенияБлокировки.Вставить("ВидРасхода", Перечисления.ВидыРасходовУСН.Номенклатура); 
		
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаРасходов);
		ОписаниеИсточника = Новый Соответствие;
		ОписаниеИсточника.Вставить("ЭлементРасхода","ЭлементРасхода");
		ОписаниеИсточника.Вставить("Партия",	 	"Партия");
				
		ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачалоКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("КонДата", КонецКвартала(СтруктураШапкиДокумента.Дата));
	Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
	Запрос.УстановитьПараметр("ВидРасхода", 		Перечисления.ВидыРасходовУСН.Номенклатура);
	Запрос.УстановитьПараметр("ВидДвижения", 		ВидДвиженияНакопления.Расход);
	Запрос.УстановитьПараметр("СтатусСписания", 	Перечисления.ОтражениеВУСН.ПустаяСсылка());
	Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
	Запрос.УстановитьПараметр("Партии", МассивПартий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК КоличествоСписания,
	|	МАКСИМУМ(РасходыПриУСН.Период) КАК Период,
	|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
	|	РасходыПриУСН.Партия КАК ДокументОприходования,
	|	РасходыПриУСН.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.ВидРасхода = &ВидРасхода
	|	И РасходыПриУСН.СтатусСписания <> &СтатусСписания
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.Период МЕЖДУ &НачДата И &КонДата
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ЭлементРасхода В(&Номенклатура)
	|	И РасходыПриУСН.ВидДвижения = &ВидДвижения
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.Регистратор
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	ТаблицаПартий = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаПартии Из ТаблицаПартий Цикл
		КоличествоСписанияПоРегистратору = СтрокаПартии.КоличествоСписания;
		
		ТаблицаДляСписания.Очистить();
		
		//Пропустим операции поступления и перемещения
		Если НЕ КоличествоСписанияПоРегистратору > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//Выберем расчетные документы доп.расходов
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
		
		НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл
			
			КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоРегистратору);
			
			//Выберем доп. расходы данной номенклатуры/партии
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
			СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);
			
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				
				Если Строка.Количество <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если КоличествоСписанияРД <= 0 Тогда
					Прервать;
				КонецЕсли;
				
				КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);
				
				НоваяСтрока = ТаблицаДляСписания.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НовыйСтатус = ПолучитьКомбинациюСтатусовОтражениеВНУ(Строка.ОтражениеВУСН, СтрокаПартии.СтатусСписания);
				Если ЗначениеЗаполнено(СтрокаПартии.СтатусСписания) Тогда
					НоваяСтрока.СтатусСписания = НовыйСтатус;
					НоваяСтрока.КоличествоПоСтатусуСписания = КоличествоСписания;
				КонецЕсли;
				
				Если Строка.Количество <> КоличествоСписания Тогда
					К = КоличествоСписания / Строка.Количество;
					НоваяСтрока.Количество 	= Окр(КоличествоСписания,3,1);
					НоваяСтрока.Сумма	 	= Окр(К*НоваяСтрока.Сумма,3,1);
					НоваяСтрока.НДС 		= Окр(К*НоваяСтрока.НДС,3,1);
				КонецЕсли;
				
				Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
				Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
				Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;
				
				КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
				СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
			КонецЦикла;
						
		КонецЦикла;
		
		//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы.
		ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ТаблицыДвижений.ТаблицаПринятых.ЗаполнитьЗначения(СтрокаПартии.Регистратор,"Партия");
		ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,ДвиженияРегистров);
		
	КонецЦикла;
												
КонецПроцедуры

//Отражает изменения по регистру расходов при УСН не влияющие на статус расхода
//Такие как изменение счета учета или статуса партии.
//
//ТаблицаПартийПриход - таблица движений "Приход" регистра партионного учета НУ
//ТаблицаПартийРасход - таблица движений "Расход" регистра партионного учета НУ
Процедура ПеремещениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ВидРасхода, Договор, СтатусПартии, ВидОперации = "Списание")
	
	Если ТаблицаПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Подготовка наборов фильтров
	МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
	
	МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетов);
	
	МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
	
	//Заполним таблицу блокировок
	ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, СчетУчета, ДокументОприходования");
	ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
	ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля	= ВидРасхода;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыПартийУСН";
	Фильтр.ЗначениеПоля	= СтатусПартии;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля	= МассивСчетов;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ЭлементРасхода";
	Фильтр.ЗначениеПоля	= МассивНоменклатуры;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Партия";
	Фильтр.ЗначениеПоля	= МассивПартий;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
	ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия, СчетУчета");
	
	ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
	
	//Соберем допрасходы для переноса на другую партию/номенклатуру
	Если ВидОперации = "Комплектация" Тогда
		//Подготовка наборов фильтров
		МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
		
		МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
		
		//Заполним таблицу блокировок
		ТаблицаБлокировок = ТаблицаПартий.Скопировать(, "Номенклатура, ДокументОприходования");
		ТаблицаБлокировок.Колонки.Номенклатура.Имя = "ЭлементРасхода";
		ТаблицаБлокировок.Колонки.ДокументОприходования.Имя = "Партия";
		
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
		
		//Формирование таблицы фильтров
		ТаблицаФильтров = Новый ТаблицаЗначений;
		ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
		ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
		ТаблицаФильтров.Колонки.Добавить("Условие");
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ВидРасхода";
		Фильтр.ЗначениеПоля	= Перечисления.ВидыРасходовУСН.ДопРасходы;
		Фильтр.Условие			= "=";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ЭлементРасхода";
		Фильтр.ЗначениеПоля	= МассивНоменклатуры;
		Фильтр.Условие			= "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "Партия";
		Фильтр.ЗначениеПоля	= МассивПартий;
		Фильтр.Условие			= "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
		Фильтр.ЗначениеПоля	= Статусы;
		Фильтр.Условие			= "В";
		
		//Из таблицы расходов выбираем соответствующие партии и элементы расходов
		ТаблицаДопРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, ТаблицаБлокировок);
		ТаблицаДопРасходов.Индексы.Добавить("ЭлементРасхода,Партия");
		
		ТаблицаРасчетныхДокументов = ТаблицаДопРасходов.Скопировать();
		ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество"); 
		
		ТаблицаДопРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
		ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");
	КонецЕсли;	
	
	ТаблицаДляСписания.Колонки.Добавить("СчетПриход");
	ТаблицаДляСписания.Колонки.Добавить("НоменклатураПриход");
	ТаблицаДляСписания.Колонки.Добавить("ПартияПриход");
	ТаблицаДляСписания.Колонки.Добавить("КоличествоПриход");
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии ИЗ ТаблицаПартий Цикл
		
		Если (ВидОперации = "Перемещение") и (СтрокаПартии.СчетУчета = СтрокаПартии.КорСчетУчета) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
		СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
		СтруктураОтбора.Вставить("СчетУчета",		СтрокаПартии.СчетУчета);
		
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		
		// Подлежащее погашению при списании количество
		КоличествоОсталосьПогасить = СтрокаПартии.Количество;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если КоличествоОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоСписания = Мин(Строка.Количество, КоличествоОсталосьПогасить);
			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - КоличествоСписания;
						
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НоваяСтрока.СчетПриход 			= СтрокаПартии.КорСчетУчета;
			НоваяСтрока.НоменклатураПриход 	= СтрокаПартии.КорНоменклатура;
			НоваяСтрока.ПартияПриход 		= СтрокаПартии.КорДокументОприходования;
								
			Если Строка.Количество > КоличествоСписания Тогда
				К = КоличествоСписания / Строка.Количество;
				НоваяСтрока.Количество 	= КоличествоСписания;
				НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
				НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
			КонецЕсли;
			
			НоваяСтрока.КоличествоПриход = ?(СтрокаПартии.Количество = 0, 0, НоваяСтрока.Количество * СтрокаПартии.КорКоличество / СтрокаПартии.Количество);
			
			Строка.Количество = Строка.Количество - НоваяСтрока.Количество;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
			Строка.НДС = Строка.НДС - НоваяСтрока.НДС;
		КонецЦикла;
		
		//Обработаем доп. расходы по партии
		Если ВидОперации = "Комплектация" Тогда
			КоличествоСписанияПоПартииТМЦ = СтрокаПартии.Количество - КоличествоОсталосьПогасить;
			
			//Пропустим операции поступления и перемещения
			Если НЕ КоличествоСписанияПоПартииТМЦ > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			//Выберем расчетные документы доп.расходов
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
			СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
			
			НайденныеСтрокиРД = ТаблицаРасчетныхДокументов.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаРасчетныйДокумент Из НайденныеСтрокиРД Цикл
				
				КоличествоСписанияРД = Мин(СтрокаРасчетныйДокумент.Количество, КоличествоСписанияПоПартииТМЦ);
				
				//Выберем доп. расходы данной номенклатуры/партии
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ЭлементРасхода",	СтрокаПартии.Номенклатура);
				СтруктураОтбора.Вставить("Партия",			СтрокаПартии.ДокументОприходования);
				СтруктураОтбора.Вставить("РасчетныйДокумент",СтрокаРасчетныйДокумент.РасчетныйДокумент);
				
				НайденныеСтроки = ТаблицаДопРасходов.НайтиСтроки(СтруктураОтбора);
				
				Для Каждого Строка Из НайденныеСтроки Цикл
					
					Если Строка.Количество <= 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Если КоличествоСписанияРД <= 0 Тогда
						Прервать;
					КонецЕсли;
					
					КоличествоСписания = Мин(Строка.Количество, КоличествоСписанияРД);
					
					НоваяСтрока = ТаблицаДляСписания.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
					
					НоваяСтрока.НоменклатураПриход 	= СтрокаПартии.КорНоменклатура;
					НоваяСтрока.ПартияПриход 		= СтрокаПартии.КорДокументОприходования;
															
					Если Строка.Количество <> КоличествоСписания Тогда
						К = КоличествоСписания / Строка.Количество;
						НоваяСтрока.Количество 	= КоличествоСписания;
						НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
						НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
					КонецЕсли;
					
					НоваяСтрока.КоличествоПриход = ?(СтрокаПартии.Количество = 0, 0, НоваяСтрока.Количество * СтрокаПартии.КорКоличество / СтрокаПартии.Количество);
					
					Строка.Количество 	=  Строка.Количество - НоваяСтрока.Количество;
					Строка.Сумма 		=  Строка.Сумма - НоваяСтрока.Сумма;
					Строка.НДС 			=  Строка.НДС - НоваяСтрока.НДС;
					
					КоличествоСписанияРД = КоличествоСписанияРД - КоличествоСписания;
					СтрокаРасчетныйДокумент.Количество = СтрокаРасчетныйДокумент.Количество - КоличествоСписания;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;	
	КонецЦикла;
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицаКорректировкиРасход = Новый ТаблицаЗначений;
	ТаблицаКорректировкиПриход = Новый ТаблицаЗначений;
	ТаблицаПризнанныхРасходов  = Новый ТаблицаЗначений;
	
	Для Каждого Колонка Из ТаблицаДляСписания.Колонки Цикл
		ТаблицаКорректировкиРасход.Колонки.Добавить(Колонка.Имя);
		ТаблицаКорректировкиПриход.Колонки.Добавить(Колонка.Имя);
		ТаблицаПризнанныхРасходов.Колонки.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Для Каждого Расход Из ТаблицаДляСписания Цикл
		СтрокаКорректировкиРасход = ТаблицаКорректировкиРасход.Добавить();
		СтрокаКорректировкиПриход = ТаблицаКорректировкиПриход.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиРасход, Расход);
		ЗаполнитьЗначенияСвойств(СтрокаКорректировкиПриход, Расход);
		
		Если НЕ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			СтрокаКорректировкиПриход.СчетУчета 	= Расход.СчетПриход;
		КонецЕсли;
		СтрокаКорректировкиПриход.ЭлементРасхода= Расход.НоменклатураПриход;
		СтрокаКорректировкиПриход.Партия 		= Расход.ПартияПриход;
		СтрокаКорректировкиПриход.Количество 	= Расход.КоличествоПриход;
	КонецЦикла;
	
	ТаблицыДвижений = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
	
	Если ВидОперации = "НаРеализацию" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВПереработку" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.ВПереработке,"СтатусыПартийУСН");
	ИначеЕсли (ВидОперации = "ВозвратСРеализации") ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Купленные,"СтатусыПартийУСН");
	ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда
		ТаблицыДвижений.ТаблицаПриход.Очистить();
	КонецЕсли;
		 
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);
										
КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН
Процедура РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаАвансов, ТаблицаДвижений, ДвиженияРегистров, Договор, СуммаДокумента, ПриходОтражен = Ложь) Экспорт
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаАвансов.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	
	СуммаРегл = 0;	
	СуммаОсталосьПогасить = СуммаДокумента;
	СтрокаРеквизитовПлДок = "";
	
	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());
	
	ТаблицаРасходов = ТаблицаДвижений.Скопировать();
	
	Для Каждого Строка Из ТаблицаДвиженияВзаиморасчетов Цикл
		
		Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписания = Строка.СуммаВзаиморасчетов;
		
		//Проверка оплаты авансового отчета
		Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			
			//Формирование таблицы фильтров
			ТаблицаФильтров = Новый ТаблицаЗначений;
			ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			ТаблицаФильтров.Колонки.Добавить("Условие");
			
			Фильтр = ТаблицаФильтров.Добавить();
			Фильтр.ИмяПоля			= "РасчетныйДокумент";
			Фильтр.ЗначениеПоля		= Строка.РасчетныйДокумент;
			Фильтр.Условие			= "=";
						
			ТаблицаРасчетовАО = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			
			Если ТаблицаРасчетовАО.Итог("Сумма") < 0 Тогда
				НеОплаченоПодотчетномуЛицу = Мин(Строка.СуммаВзаиморасчетов, -(ТаблицаРасчетовАО.Итог("Сумма")));
				Для Каждого ЗаписьПоАО Из ТаблицаРасчетовАО Цикл
					Если НеОплаченоПодотчетномуЛицу <= 0 Тогда
						Прервать;
					КонецЕсли;
					Если ЗаписьПоАО.Сумма > 0 Тогда
						Продолжить;
					КонецЕсли;
					КорректировкаПоАО 		   = Мин(-ЗаписьПоАО.Сумма, НеОплаченоПодотчетномуЛицу);
					НеОплаченоПодотчетномуЛицу = НеОплаченоПодотчетномуЛицу - КорректировкаПоАО;
					СуммаСписания 			   = СуммаСписания - КорректировкаПоАО;
					
					Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
						ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
					КонецЕсли;
					ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, Строка.РасчетныйДокумент),1), "СтруктураКурса");
					ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, КорректировкаПоАО, "КорректировкаПоАО",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);
				КонецЦикла;
				Если СуммаСписания = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
			ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
		КонецЕсли;
		
		ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, Строка.РасчетныйДокумент),1), "СтруктураКурса");
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, СуммаСписания, "Оплата",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);
				
	КонецЦикла;
		
	Если НЕ ПриходОтражен Тогда
		Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			НоваяСтрока = ИтоговаяСтруктура.ТаблицаПриход.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
		
	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН (сформированная процедурой списание расходов)
Процедура РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаАвансов, ТаблицаДвижений, ДвиженияРегистровВх, ДвиженияРегистров, Договор, СуммаДокумента, СуммаЕНВД, СуммаКомиссии, КУДиР)
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаАвансов.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	НеЗачтено = 0;
	Для Каждого Строка Из ТаблицаДвиженияВзаиморасчетов Цикл
		Если Строка.СуммаВзаиморасчетов <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			НеЗачтено = Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		
		КурсДокумента = ОпределитьКурсПоДокументу(Строка.ДоговорКонтрагента, Неопределено, Строка.РасчетныйДокумент);
		КурсДокумента = ?(КурсДокумента = 0, 1, КурсДокумента);
		
		НеПризнанныеДоходы = 0; 
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы 
			И ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
			
			МетаданныеДокумента = Строка.РасчетныйДокумент.Метаданные();
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяНастройка_УСН", МетаданныеДокумента) 
				И Строка.РасчетныйДокумент.РучнаяНастройка_УСН Тогда
			
				Если НЕ Строка.РасчетныйДокумент.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
					НеПризнанныеДоходы 	= Макс(0,(Строка.РасчетныйДокумент.СуммаДокумента * КурсДокумента)  - Строка.РасчетныйДокумент.Графа5_УСН);
					ЗачтеноРанее 		= Строка.РасчетныйДокумент.СуммаДокумента - Строка.СуммаВзаиморасчетов;
					НеПризнанныеДоходы  = Макс(0, НеПризнанныеДоходы - ЗачтеноРанее);
				Иначе
					НеПризнанныеДоходы 	= Макс(0, Строка.РасчетныйДокумент.СуммаДокумента - Строка.РасчетныйДокумент.Графа5_УСН);
					ЗачтеноРанее 		= Строка.РасчетныйДокумент.СуммаДокумента - (Строка.СуммаВзаиморасчетов * КурсДокумента);
					НеПризнанныеДоходы  = Макс(0, НеПризнанныеДоходы - ЗачтеноРанее);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
						
		Если СуммаКомиссии > 0 Тогда
			СуммаКоррДоходов  			= Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаКомиссии / СуммаДокумента, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + СуммаКоррДоходов + " руб. определен как выручка комитента. ";
			КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
		КонецЕсли;
		Если СуммаЕНВД > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * СуммаЕНВД / СуммаДокумента, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= СуммаКоррДоходов - ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + СуммаКоррДоходов + " руб. отнесен к деятельности ЕНВД. ";
			КУДиР.Графа5 = КУДиР.Графа5 - СуммаКоррДоходов;
			КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
		КонецЕсли;
		Если (СуммаЕНВД + СуммаКомиссии < СуммаДокумента) И НеПризнанныеДоходы > 0 Тогда
			СуммаКоррДоходов  = Окр(Строка.СуммаВзаиморасчетов * КурсДокумента * (СуммаДокумента - СуммаЕНВД - СуммаКомиссии) / СуммаДокумента, 2, 1);
			
			ЗачтеноНеПризнанныеДоходы 	= Мин(СуммаКоррДоходов, НеПризнанныеДоходы);
			СуммаКоррДоходов  			= ЗачтеноНеПризнанныеДоходы;
			НеПризнанныеДоходы			= НеПризнанныеДоходы - ЗачтеноНеПризнанныеДоходы;
			
			КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + СуммаКоррДоходов + " руб. отнесен к деятельности УСН. ";
			КУДиР.Графа5 = КУДиР.Графа5 + СуммаКоррДоходов;			
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Возврат;
	КонецЕсли;
	
	КоэффЗачета =  ?(ТаблицаДвиженияВзаиморасчетов.Итог("СуммаВзаиморасчетов") = 0, 0, (ТаблицаДвиженияВзаиморасчетов.Итог("СуммаВзаиморасчетов") - НеЗачтено) / ТаблицаДвиженияВзаиморасчетов.Итог("СуммаВзаиморасчетов"));
	
	ТаблицаДляСписания = ТаблицаДвижений.СкопироватьКолонки();
	Для Каждого Строка Из ТаблицаДвижений Цикл
		Если Строка.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено Тогда
			Продолжить;
		КонецЕсли;
		Сумма = КоэффЗачета * Строка.Сумма;
		Количество = КоэффЗачета * Строка.Количество;
		НДС = КоэффЗачета * Строка.НДС;
		Если Сумма = 0 Тогда
			Продолжить;
		Конецесли;
		НоваяСтрока = ТаблицаДляСписания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Сумма = Сумма;
		НоваяСтрока.Количество = Количество;
		НоваяСтрока.НДС = НДС;
	КонецЦикла;

	//Разложим таблицу расходов на движения корректировки статуса и принятые расходы
	НовыеТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Доход", Ложь);
	
	ДвиженияРегистров = СобратьТаблицыДвижений(НовыеТаблицыДвижений, , ,ДвиженияРегистровВх);
					
КонецПроцедуры

//Операция зачета аванса поставщику
//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН
Процедура РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаДвижений, ДвиженияРегистров, Договор, СуммаДокумента, ПриходОтражен = Ложь) Экспорт
	
	КЗ = 1; //Коэффициент знака взаиморасчетов (+1 или -1)
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	
	Если ТипЗнч(Договор) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля	= Договор;
		Фильтр.Условие 		= "=";

	Иначе
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля	= Договор;
		Фильтр.Условие 		= "=";

		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_;
		Фильтр.Условие			= "В ИЕРАРХИИ";
	КонецЕсли;
		
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	СуммаРегл = 0;	
	СуммаОсталосьПогасить = СуммаДокумента;
	СтрокаРеквизитовПлДок = "";
	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());
	
	ТаблицаРасходов = ТаблицаДвижений.Скопировать();
	
	Для Каждого Строка Из ТаблицаПлатежей Цикл
		Если СуммаОсталосьПогасить <= 0 Тогда
			Прервать;
		КонецЕсли;
		Если КЗ*(Строка.Сумма)<= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаСписания = Мин(КЗ*(Строка.Сумма), СуммаОсталосьПогасить);
		СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
		
		НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		НоваяСтрока.Сумма = СуммаСписания;
				
		Если ТаблицаРасходов.Колонки.Найти("СтруктураКурса") = Неопределено Тогда
			ТаблицаРасходов.Колонки.Добавить("СтруктураКурса");
		КонецЕсли;
		
		ТаблицаРасходов.ЗаполнитьЗначения(Новый Структура("Курс, Кратность",ОпределитьКурсПоДокументу(Договор, Неопределено, Строка.РасчетныйДокумент),1), "СтруктураКурса");
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, СуммаСписания, "Оплата",, Строка.РасчетныйДокумент, ИтоговаяСтруктура);
				
	КонецЦикла;
	Если СуммаОсталосьПогасить > 0 Тогда
		Если ТипЗнч(Договор) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Договор, СуммаОсталосьПогасить);
		Иначе
			ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Договор, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, СуммаОсталосьПогасить);
		КонецЕслИ;
		ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, 0, "Оплата",, СтруктураШапкиДокумента.Ссылка, ИтоговаяСтруктура);
	КонецЕсли;
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	Если НЕ ПриходОтражен Тогда
		Для Каждого Строка ИЗ ТаблицаДвижений Цикл
			НоваяСтрока = ИтоговаяСтруктура.ТаблицаПриход.Вставить(0);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЕсли;
		
	ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, ТаблицаДвиженияВзаиморасчетов, , ДвиженияРегистров);
КонецПроцедуры

//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
//
Процедура РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидОперации = "Оплата")
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Ложь, СтруктураШапкиДокумента.Организация);
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаОплат.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	
	Если ВидОперации = "Доход" Тогда
		//Услуги банка, удержанные из оплаты покупателя
		СуммаУслуг = 0;
		Если СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СуммаУслуг") <> Неопределено И
			СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СчетБанк") <> Неопределено Тогда
			СуммаУслуг = СтруктураШапкиДокумента.Ссылка.СуммаУслуг;
			
			Если СуммаУслуг > 0 Тогда
				ТаблицаДвиженияВзаиморасчетов.Свернуть("РасчетныйДокумент, СчетУчета, ВалютаВзаиморасчетов, Контрагент, ДоговорКонтрагента, 
														|КурсВзаиморасчетов, КратностьВзаиморасчетов, РасчетыВУсловныхЕдиницах, СтруктураКурса",
														"СуммаВзаиморасчетов, СуммаВзаиморасчетовЕНВД, СуммаВзаиморасчетовКомитента, ОстатокВзаиморасчетов");
			КонецЕсли;
		КонецЕсли;
		СуммаУслугВсего = СуммаУслуг;
		СуммаКоррДоходовКомитента 	= 0;
		СуммаКоррДоходовЕНВД		= 0;
	КонецЕсли;
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаДвиженияВзаиморасчетов Цикл
		
		Если СтрокаПлатеж.СуммаВзаиморасчетов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Курс = 1;
		Кратность = 1;
		
		Если Не ТаблицаОплат.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, Курс, СтрокаПлатеж.КурсВзаиморасчетов);
		КонецЕсли;
		Если Не ТаблицаОплат.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		СтруктураКурса = Новый Структура("Курс, Кратность",Курс,Кратность);
		СтрокаПлатеж.СтруктураКурса = СтруктураКурса;
		
		Если ВидОперации = "Оплата" Тогда
			КУДиР.Графа6 = КУДиР.Графа6 + СтрокаПлатеж.СуммаВзаиморасчетов*Курс/Кратность;
			
		ИначеЕсли ВидОперации = "ВозвратПокупателю" Тогда			
			
			НеПризнанныеДоходы = 0; 
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы 
				И ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
				
				МетаданныеДокумента = СтрокаПлатеж.РасчетныйДокумент.Метаданные();
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяНастройка_УСН", МетаданныеДокумента) 
					И СтрокаПлатеж.РасчетныйДокумент.РучнаяНастройка_УСН Тогда
					
					Если НЕ СтрокаПлатеж.РасчетныйДокумент.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
						НеПризнанныеДоходы 	= Макс(0,(СтрокаПлатеж.РасчетныйДокумент.СуммаДокумента * Курс/Кратность)  - СтрокаПлатеж.РасчетныйДокумент.Графа5_УСН);
						ЗачтеноРанее 		= СтрокаПлатеж.РасчетныйДокумент.СуммаДокумента - СтрокаПлатеж.СуммаВзаиморасчетов;
						НеПризнанныеДоходы  = Макс(0, НеПризнанныеДоходы - ЗачтеноРанее);
					Иначе
						НеПризнанныеДоходы 	= Макс(0, СтрокаПлатеж.РасчетныйДокумент.СуммаДокумента - СтрокаПлатеж.РасчетныйДокумент.Графа5_УСН);
						ЗачтеноРанее 		= СтрокаПлатеж.РасчетныйДокумент.СуммаДокумента - (СтрокаПлатеж.СуммаВзаиморасчетов * Курс/Кратность);
						НеПризнанныеДоходы  = Макс(0, НеПризнанныеДоходы - ЗачтеноРанее);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СторноДоходов 				= СтрокаПлатеж.СуммаВзаиморасчетов*Курс/Кратность;
			СторноПринимаемыхДоходов 	= Макс(0, СтрокаПлатеж.СуммаВзаиморасчетов*Курс/Кратность - НеПризнанныеДоходы);
			
			КУДиР.Графа4 = КУДиР.Графа4 - СторноДоходов;
			КУДиР.Графа5 = КУДиР.Графа5 - СторноПринимаемыхДоходов;
			Если СторноДоходов - СторноПринимаемыхДоходов > 0 Тогда
				КУДиР.Содержание = КУДиР.Содержание + "Аванс на сумму " + (СторноДоходов - СторноПринимаемыхДоходов) + " руб. не был включен в доходы. ";
			КонецЕсли;

			
		ИначеЕсли ВидОперации = "Доход" Тогда
			КУДиР.Графа4 = КУДиР.Графа4 + (СтрокаПлатеж.СуммаВзаиморасчетов - СуммаУслуг)*Курс/Кратность;
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.РасчетныйДокумент) Тогда
				//Не включается в доходы в соответствии с положениями переходного периода ст.346.25 НК РФ
				ДоПереходаНаУСН = ((УчетнаяПолитика.ПоложенияПереходногоПериодаУСН)	И УчетнаяПолитика.ДатаПереходаНаУСН > СтрокаПлатеж.РасчетныйДокумент.Дата); 
			Иначе
				ДоПереходаНаУСН = Ложь;
			КонецЕсли;
			
			СуммаВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов;
			Если ТаблицаОплат.Колонки.Найти("СуммаВзаиморасчетовКомитента") = Неопределено Тогда
				ДоходЕНВД 			= 0;
				ДоходКомитента 		= 0;
			Иначе
				ДоходКомитента		= СтрокаПлатеж.СуммаВзаиморасчетовКомитента;
				ДоходЕНВД 			= СтрокаПлатеж.СуммаВзаиморасчетовЕНВД;
			КонецЕсли;
						
			//Отражение платежа в КУДиР производиться только в части фактически поступивших средств
			Если СуммаУслуг > 0 Тогда
				СписатьУслуг = Мин(СуммаВзаиморасчетов, СуммаУслуг);
				СуммаУслуг = СуммаУслуг - СписатьУслуг; 

				СуммаЕНВД_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходЕНВД, 2, 1);
				СуммаКомиссии_БН = Окр(?(СуммаВзаиморасчетов = 0, 0, СписатьУслуг / СуммаВзаиморасчетов)*ДоходКомитента, 2, 1);
				
				//Уменьшим сумму расходов на услуги банка в части ЕНВД
				СуммаУслугВсего = СуммаУслугВсего - СуммаЕНВД_БН;
			КонецЕсли;
			
			Если НЕ ДоПереходаНаУСН Тогда
				КУДиР.Графа5 = КУДиР.Графа5 + (СуммаВзаиморасчетов - ДоходЕНВД - ДоходКомитента)*Курс/Кратность;
				Если ДоходКомитента > 0 Тогда
					СуммаКоррДоходовКомитента  = СуммаКоррДоходовКомитента + ДоходКомитента * Курс/Кратность;
				КонецЕсли;
				Если ДоходЕНВД > 0 Тогда
					СуммаКоррДоходов = ДоходЕНВД * Курс/Кратность;
					СуммаКоррДоходовЕНВД  = СуммаКоррДоходовЕНВД + СуммаКоррДоходов;
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаКоррДоходов;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	
	КонецЦикла;
	
	Если ВидОперации = "Доход" Тогда
		Если СуммаКоррДоходовКомитента > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму " + СуммаКоррДоходовКомитента + " руб. определена как выручка комитента. ";
		КонецЕсли;
		Если СуммаКоррДоходовЕНВД > 0 Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму " + СуммаКоррДоходовЕНВД + " руб. отнесена к деятельности ЕНВД. ";
		КонецЕсли;
		Если (СуммаУслугВсего) > 0 И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			КУДиР.Содержание = КУДиР.Содержание + "Удержана комиссия банка на сумму " + СуммаУслугВсего + " руб. ";
			КУДиР.Графа7 = КУДиР.Графа7 + СуммаУслугВсего;			
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаДвиженияВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (НЕ (ВидОперации = "Оплата" ИЛИ ВидОперации = "ОплатаАО" ИЛИ ВидОперации = "Доход")) ИЛИ
		СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Статусы = Новый Массив;
	Если ВидОперации = "Оплата" ИЛИ ВидОперации = "ОплатаАО" Тогда
		УсловиеПоПолюРасходы = "РасчетныйДокумент";
		УсловиеПоПолюРасчеты = "РасчетныйДокумент";
		МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивУсловия);
	
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента;
		Фильтр.Условие			= "<>";

	ИначеЕсли ВидОперации = "Доход" Тогда
		УсловиеПоПолюРасходы = "Партия";
		УсловиеПоПолюРасчеты = "РасчетныйДокумент";
		МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивУсловия);
		
		ВидыРасходов = Новый Массив;
		ВидыРасходов.Добавить(Перечисления.ВидыРасходовУСН.Номенклатура);
	
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "ВидРасхода";
		Фильтр.ЗначениеПоля		= ВидыРасходов;
		Фильтр.Условие			= "В";
	
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СтатусыПартийУСН";
		Фильтр.ЗначениеПоля		= Перечисления.СтатусыПартийУСН.Списанные;
		Фильтр.Условие			= "=";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= УсловиеПоПолюРасходы;
		Фильтр.ЗначениеПоля		= МассивУсловия;
		Фильтр.Условие			= "В";
	
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
	КонецЕсли;
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= УсловиеПоПолюРасходы;
	Фильтр.ЗначениеПоля		= МассивУсловия;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Индексы.Добавить(УсловиеПоПолюРасходы);
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");
		
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаДвиженияВзаиморасчетов Цикл
		
		Если СтрокаПартии.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(УсловиеПоПолюРасходы, СтрокаПартии[УсловиеПоПолюРасчеты]);
		
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		СтруктураКурса = СтрокаПартии.СтруктураКурса;
		
		КоэффРасчетов = ?(СтрокаПартии.ОстатокВзаиморасчетов = 0, 1, СтрокаПартии.СуммаВзаиморасчетов / СтрокаПартии.ОстатокВзаиморасчетов);
		СуммаОсталосьПогасить = СтрокаПартии.СуммаВзаиморасчетов;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ВидОперации = "Доход" Тогда
				
				//Исключим агентский НДС, зарегистрированный по тому же расчетному документу
				Если УсловиеПоПолюРасходы = "РасчетныйДокумент" 
					И УсловиеПоПолюРасчеты = "РасчетныйДокумент"
					И Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.РасчетныйДокумент) Тогда
					Отказ = Ложь;
					УчетнаяПолитикаДокумент = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Строка.РасчетныйДокумент.Дата, Отказ, СтруктураШапкиДокумента.Организация);
					ВыделятьНДСУСНДокумент = ?(Отказ, ВыделятьНДСУСН, (УчетнаяПолитикаДокумент.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику));
				Иначе
					ВыделятьНДСУСНДокумент = ВыделятьНДСУСН;
				КонецЕсли;
				
				Если ВыделятьНДСУСНДокумент И 
					(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
					(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда
					
					СуммаСписания = Мин(Строка.Сумма + Строка.НДС, СуммаОсталосьПогасить);
					СуммаОсталосьПогасить = Макс(0, СуммаОсталосьПогасить - СуммаСписания);
					КоэффРасчетов = СуммаСписания / (Строка.Сумма + Строка.НДС);
				Иначе
					СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
					СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
					КоэффРасчетов = СуммаСписания / (Строка.Сумма);
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если НЕ КоэффРасчетов = 1 Тогда
				НоваяСтрока.Сумма	 	= КоэффРасчетов*НоваяСтрока.Сумма;
				НоваяСтрока.Количество 	= КоэффРасчетов*НоваяСтрока.Количество;
				НоваяСтрока.НДС 		= КоэффРасчетов*НоваяСтрока.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
			
			Если НЕ ВидОперации = "Доход" Тогда
				Строка.Сумма 		= Строка.Сумма - НоваяСтрока.Сумма;
				Строка.Количество 	= Строка.Количество - НоваяСтрока.Количество;
				Строка.НДС 			= Строка.НДС - НоваяСтрока.НДС;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);
	
	Если ВидОперации = "ОплатаАО" Тогда
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"РасчетныйДокумент");
		ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка.ФизЛицо,"ДоговорКонтрагента");
	КонецЕсли;
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	
КонецПроцедуры

//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
//
Процедура ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, Получатель = "Налог", ВидДвижения = Неопределено)
	
	Если ВидДвижения = Неопределено Тогда
		ВидДвижения = ВидДвиженияНакопления.Приход;
	КонецЕсли;
	
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		КЗ = -1; //Коэффициент знака взаиморасчетов (+1 или -1)
		ВидОперации = "Оплата";
	Иначе
		КЗ = +1; //Коэффициент знака взаиморасчетов (+1 или -1)
		ВидОперации = "Доход";
	КонецЕсли;
	
	ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		
	//Подготовка наборов фильтров
	МассивСделок = ТаблицаОплат.ВыгрузитьКолонку("Сделка");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Если Получатель = "ПодотчетноеЛицо" Тогда //Подотчетное лицо
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_;
		Фильтр.Условие			= "В ИЕРАРХИИ";
		
	ИначеЕсли Получатель = "Работник" Тогда //Работник
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("Работник");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивФильтра);
		Фильтр.ИмяПоля			= "Контрагент";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";
		
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
		Фильтр.Условие			= "=";
		
	ИначеЕсли Получатель = "Налог" Тогда //Налоги
		МассивФильтра = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивФильтра);
		Фильтр.ИмяПоля			= "СчетУчета";
		Фильтр.ЗначениеПоля		= МассивФильтра;
		Фильтр.Условие			= "В";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	СтрокаИндекса = "";
	Если Получатель = "Налог" Тогда
		СтрокаИндекса = "СчетУчета";
	Иначе
		СтрокаИндекса = "Контрагент";
	КонецЕсли;
	
	ТаблицаПлатежей.Индексы.Добавить(СтрокаИндекса);
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаОплат Цикл
		
		Если СтрокаПлатеж.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		Если Получатель = "Налог" Тогда
			СтруктураОтбора.Вставить("СчетУчета",  СтрокаПлатеж.ДоговорКонтрагента);
		ИначеЕсли Получатель = "Работник" Тогда
			СтруктураОтбора.Вставить("Контрагент",  СтрокаПлатеж.Работник);
		Иначе
			СтруктураОтбора.Вставить("Контрагент",  СтрокаПлатеж.ДоговорКонтрагента);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		
		Курс = 1;
		Кратность = 1;
		
		Если Не ТаблицаОплат.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = ?(СтрокаПлатеж.КурсВзаиморасчетов = 0, Курс, СтрокаПлатеж.КурсВзаиморасчетов);
		КонецЕсли;
		Если Не ТаблицаОплат.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = ?(СтрокаПлатеж.КратностьВзаиморасчетов = 0, Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		КонецЕсли;
		СтруктураКурса = Новый Структура("Курс, Кратность",Курс,Кратность);
		
		Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			КУДиР.Графа6 = КУДиР.Графа6 + СтрокаПлатеж.Сумма*Курс/Кратность;
		ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
			КУДиР.Графа4 = КУДиР.Графа4 + СтрокаПлатеж.Сумма*Курс/Кратность;
		КонецЕсли;
						
		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПлатеж.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если КЗ*(Строка.Сумма)<= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(КЗ*(Строка.Сумма), СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если КЗ*(Строка.Сумма) > СуммаСписания Тогда
				НоваяСтрока.Сумма = Мин(КЗ*(Строка.Сумма), СуммаСписания);
			Иначе
				НоваяСтрока.Сумма = КЗ*(Строка.Сумма);
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
			Строка.Сумма = Строка.Сумма - НоваяСтрока.Сумма;
		КонецЦикла;
		Если СуммаОсталосьПогасить > 0 Тогда
			Если Получатель = "Налог" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, СтрокаПлатеж.ДоговорКонтрагента, СуммаОсталосьПогасить);
			ИначеЕсли Получатель = "Работник" Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.Работник, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);				
			Иначе
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, СтрокаПлатеж.ДоговорКонтрагента, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами, СуммаОсталосьПогасить);
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДвиженияВзаиморасчетов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
	
	УсловиеПоПолюРасходы = "РасчетныйДокумент";
	УсловиеПоПолюРасчеты = "РасчетныйДокумент";
	
	МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивУсловия);
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= УсловиеПоПолюРасходы;
	Фильтр.ЗначениеПоля		= МассивУсловия;
	Фильтр.Условие			= "В";
	
	ДопУсловиеПоПолюРасходы = "";
	Если Получатель = "Работник" Тогда //Работник
		ДопУсловиеПоПолюРасходы = "ЭлементРасхода";
		ДопУсловиеПоПолюРасчеты = "Контрагент";
		ДопМассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("Контрагент");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(ДопМассивУсловия);		
	ИначеЕсли Получатель = "Налог" Тогда //Налоги
		ДопУсловиеПоПолюРасходы = "СчетУчета";
		ДопУсловиеПоПолюРасчеты = "СчетУчета";
		ДопМассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("СчетУчета");
		ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(ДопМассивУсловия);
	КонецЕсли;
		
	Если НЕ ДопУсловиеПоПолюРасходы = "" Тогда
		Фильтр = ТаблицаФильтров.Добавить();
		Фильтр.ИмяПоля			= ДопУсловиеПоПолюРасходы;
		Фильтр.ЗначениеПоля		= ДопМассивУсловия;
		Фильтр.Условие			= "В";
	КонецЕслИ;
 
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	Иначе
		МоментДокумента = Новый МоментВремени(КонецДня(СтруктураШапкиДокумента.ДатаОплаты), СтруктураШапкиДокумента.Ссылка);
	КонецЕсли;
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаРасходов.Индексы.Добавить(?(ДопУсловиеПоПолюРасходы = "", УсловиеПоПолюРасходы, УсловиеПоПолюРасходы + "," + ДопУсловиеПоПолюРасходы));
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");
		
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПартии Из ТаблицаДвиженияВзаиморасчетов Цикл
		
		Если СтрокаПартии.РасчетныйДокумент =  СтруктураШапкиДокумента.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(УсловиеПоПолюРасходы, СтрокаПартии[УсловиеПоПолюРасчеты]);
		Если НЕ ДопУсловиеПоПолюРасходы = "" Тогда
			СтруктураОтбора.Вставить(ДопУсловиеПоПолюРасходы, СтрокаПартии[ДопУсловиеПоПолюРасчеты]);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		СтруктураКурса = СтрокаПартии.СтруктураКурса;
		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПартии.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыделятьНДСУСН И 
				(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
				(Строка.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) Тогда
				
				СуммаСписания = Мин(Строка.Сумма + Строка.НДС, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = Макс(0, СуммаОсталосьПогасить - СуммаСписания);
				К = СуммаСписания / (Строка.Сумма + Строка.НДС);
			Иначе
				СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
				СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
				К = СуммаСписания / (Строка.Сумма);
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДляСписания.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если НЕ К = 1 Тогда
				НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
				НоваяСтрока.Количество 	= К*НоваяСтрока.Количество;
				НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
			
			Строка.Сумма 		= Строка.Сумма - НоваяСтрока.Сумма;
			Строка.Количество 	= Строка.Количество - НоваяСтрока.Количество;
			Строка.НДС 			= Строка.НДС - НоваяСтрока.НДС;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);
	
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,,);
	
КонецПроцедуры

//Отражает перенос задолженности с одного контрагента на другого.
//
Процедура КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвижения, ВидОперации)
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаОплат.Скопировать();
	ТаблицаДвиженияВзаиморасчетов.Колонки.ДокументРасчетов.Имя = "РасчетныйДокумент";
	ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Если ВидДвижения = ВидДвиженияНакопления.Приход Тогда
		ИмяПоляФильтра	= "РасчетныйДокумент";
		
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		
	ИначеЕсли ВидДвижения = ВидДвиженияНакопления.Расход Тогда
		ИмяПоляФильтра	= "Партия";
		
		Статусы = Новый Массив;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
		
	КонецЕсли;
	
	ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());
	
	Фильтр.ИмяПоля			= ИмяПоляФильтра;
	Фильтр.ЗначениеПоля		= ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДвиженияРасходов.Колонки.Добавить("СтруктураКурса");
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого СтрокаПлатеж Из ТаблицаДвиженияВзаиморасчетов Цикл
		
		Если ВидОперации = "ПереносЗадолженности" И
			ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) И 
			ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И 
			СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец = СтрокаПлатеж.ДоговорКонтрагента.Владелец И
			СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		Курс = 1;
		Кратность = 1;
		Если Не ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("КурсВзаиморасчетов") = Неопределено Тогда
			Курс = СтрокаПлатеж.КурсВзаиморасчетов;
		КонецЕсли;
		Если Не ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("КратностьВзаиморасчетов") = Неопределено Тогда
			Кратность = СтрокаПлатеж.КратностьВзаиморасчетов;
		КонецЕсли;
		Если (НЕ ВидОперации = "ПереносЗадолженности") ИЛИ
			(ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) И 
			ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И 
			СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов <> СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			СтруктураКурса = Новый Структура("Курс, Кратность",Курс, Кратность);
			Если ВидОперации = "ПереносЗадолженности" Тогда
				КурсПолучателя = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов,СтруктураШапкиДокумента.Дата);
				СтруктураКурса.Курс = ?(КурсПолучателя.Курс = 0, СтруктураКурса.Курс, СтруктураКурса.Курс/КурсПолучателя.Курс);
				СтруктураКурса.Кратность = ?(КурсПолучателя.Кратность = 0, СтруктураКурса.Курс, СтруктураКурса.Кратность/КурсПолучателя.Кратность);
			КонецЕсли;
		КонецЕсли;
		
		Если (ВидОперации = "СписаниеКредиторскойЗадолженности") Тогда
			КУДиР.Графа4 = КУДиР.Графа4 + (СтрокаПлатеж.СуммаВзаиморасчетов)*Курс/Кратность;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура(ИмяПоляФильтра,  СтрокаПлатеж.РасчетныйДокумент);
		НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
		
		// Подлежащее погашению при списании количество
		СуммаОсталосьПогасить = СтрокаПлатеж.СуммаВзаиморасчетов;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;

			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрока = ТаблицаДвиженияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			Если Строка.Сумма > СуммаСписания Тогда
				НоваяСтрока.Сумма				= Мин(Строка.Сумма, СуммаСписания);
				НоваяСтрока.Количество	 		= СуммаСписания/НоваяСтрока.Сумма*Строка.Количество;
				НоваяСтрока.НДС			 		= СуммаСписания/НоваяСтрока.Сумма*Строка.НДС;
			Иначе
				НоваяСтрока.Сумма 				= Строка.Сумма;
				НоваяСтрока.Количество	 		= Строка.Количество;
				НоваяСтрока.НДС 				= Строка.НДС;
			КонецЕсли;
			НоваяСтрока.СтруктураКурса = СтруктураКурса;
		КонецЦикла;
		
		Если ВидОперации = "ПереносЗадолженности" Тогда
			Если ЗначениеЗаполнено(СтруктураШапкиДокумента.ДоговорКонтрагента) И 
				ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) И 
				СтруктураШапкиДокумента.ДоговорКонтрагента.Владелец = СтрокаПлатеж.ДоговорКонтрагента.Владелец Тогда
				НовыйРасчетныйДокумент = Неопределено;
			Иначе
				НовыйРасчетныйДокумент = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			ИтоговаяСтруктура = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, СтрокаПлатеж.СуммаВзаиморасчетов, "КорректировкаПоАО",, НовыйРасчетныйДокумент, ИтоговаяСтруктура);
			ТаблицаДвиженияРасходов.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОперации = "ПереносЗадолженности" Тогда
		Если НЕ ИтоговаяСтруктура.ТаблицаПриход.Колонки.Найти("Валюта") = Неопределено Тогда
			ИтоговаяСтруктура.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента.ВалютаВзаиморасчетов, "Валюта");
		КонецЕсли;
		ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, , , ДвиженияРегистров);
	Иначе
		Если ТаблицаДвиженияРасходов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
			ТаблицаДвиженияРасходов.Колонки.Добавить("ВидДвижения");
		КонецЕсли;
		ТаблицаДвиженияРасходов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
		ТаблицаРасходов.Очистить();
		
		ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , Неопределено, Ложь);
		ТаблицыДвижений.Вставить("ТаблицаРасход",ТаблицаДвиженияРасходов);
		
		ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	КонецЕсли;
 	
Конецпроцедуры	

//Начисление ЗП документом отражение зарплаты в регл. учете
//
Процедура НачислениеЗП(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, СтруктураДопПараметров)
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	Запрос = Новый Запрос;	
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
	ПроцедурыУчетаЗарплаты.СоздатьВТОтражениеВУчете(Запрос, СтруктураДопПараметров.ОтражениеВУчете, СтруктураШапкиДокумента.Ссылка);
	
	Запрос.УстановитьПараметр("Счет70", ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	Запрос.УстановитьПараметр("СчетаНалогов", МассивСчетов);
	Запрос.УстановитьПараметр("Зарплата", Перечисления.ВидыРасходовУСН.Зарплата);
	Запрос.УстановитьПараметр("Налоги", Перечисления.ВидыРасходовУСН.Налоги);
	Запрос.УстановитьПараметр("Сводно", Справочники.ФизическиеЛица.ПустаяСсылка());
	Запрос.УстановитьПараметр("Неопределено", Неопределено);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Зарплата КАК ВидРасхода,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1 КАК ЭлементРасхода,
	|	&Неопределено КАК СчетУчета,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма КАК Сумма,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ОтражениеВУСН КАК ОтражениеВУСН
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	(НЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1 = &Сводно)
	|	И (НЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1 ССЫЛКА Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК)
	|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В ИЕРАРХИИ(&Счет70)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Зарплата,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1,
	|	&Неопределено,
	|	-ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ОтражениеВУСН
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	(НЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 = &Сводно)
	|	И (НЕ ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1 ССЫЛКА Перечисление.ВидыНачисленийОплатыТрудаПоСт255НК)
	|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В ИЕРАРХИИ(&Счет70)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Налоги,
	|	&Неопределено,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ОтражениеВУСН
	|ИЗ
	|	ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В ИЕРАРХИИ(&СчетаНалогов)";
	
	ТаблицаРасходов = Запрос.Выполнить().Выгрузить();
	ТаблицаРасходов.Индексы.Добавить("ВидРасхода, ЭлементРасхода,СчетУчета,ОтражениеВУСН,Сумма");
	
	//Обработать удержания с незаполненным порядком признания расходов
	
	КоличествоСтрок = ТаблицаРасходов.Количество();
	Для НС = 0 по КоличествоСтрок - 1 Цикл
		
		ТекСтрока = ТаблицаРасходов[НС];
		
		Если (ТекСтрока.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата) И
			(ТекСтрока.Сумма < 0) И
			(НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН)) Тогда
			
			СуммаКРаспределению = ТекСтрока.Сумма;
			
			//Распределим удержание
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода",  	ТекСтрока.ВидРасхода);
			СтруктураОтбора.Вставить("ЭлементРасхода", 	ТекСтрока.ЭлементРасхода);
								
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			
			БазаПринимаемых = 0;
			БазаНеПринимаемых = 0;
			Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
				
				Если НайденнаяСтрока.Сумма < 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НайденнаяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются Тогда
					БазаПринимаемых = БазаПринимаемых + НайденнаяСтрока.Сумма;
				Иначе
					БазаНеПринимаемых = БазаНеПринимаемых + НайденнаяСтрока.Сумма;
				КонецЕсли;
				
			КонецЦикла;
			
			СуммаПринимаемых = ?(БазаПринимаемых = 0, 0, СуммаКРаспределению * БазаПринимаемых / (БазаПринимаемых + БазаНеПринимаемых));
			СуммаНеПринимаемых = СуммаКРаспределению - СуммаПринимаемых;
			
			Если СуммаПринимаемых = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			ИначеЕсли СуммаНеПринимаемых = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
				ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ТекСтрока.Сумма = СуммаПринимаемых;
				
				НоваяСтрока 				= ТаблицаРасходов.Добавить();
				НоваяСтрока.ВидРасхода 		= ТекСтрока.ВидРасхода;
				НоваяСтрока.ЭлементРасхода	= ТекСтрока.ЭлементРасхода;
				НоваяСтрока.СчетУчета 		= ТекСтрока.СчетУчета;
				НоваяСтрока.ОтражениеВУСН 	= Перечисления.ОтражениеВУСН.НеПринимаются;
				НоваяСтрока.Сумма	 		= СуммаНеПринимаемых;
			КонецЕсли;
			
			//Если это НДФЛ - ищем среди налогов
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ВидРасхода",  	Перечисления.ВидыРасходовУСН.Налоги);
			СтруктураОтбора.Вставить("ЭлементРасхода", 	Неопределено);
			СтруктураОтбора.Вставить("СчетУчета", 		ПланыСчетов.Хозрасчетный.НДФЛ);
			СтруктураОтбора.Вставить("ОтражениеВУСН",  	Перечисления.ОтражениеВУСН.ПустаяСсылка());
			СтруктураОтбора.Вставить("Сумма", 			- СуммаКРаспределению);
								
			НайденныеСтроки = ТаблицаРасходов.НайтиСтроки(СтруктураОтбора);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаНДФЛ = НайденныеСтроки[0];
				
				Если СуммаПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
				ИначеЕсли СуммаНеПринимаемых = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
				ИначеЕсли НЕ СуммаКРаспределению = 0 Тогда
					СтрокаНДФЛ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					СтрокаНДФЛ.Сумма = - СуммаПринимаемых;
					
					НоваяСтрока 				= ТаблицаРасходов.Добавить();
					НоваяСтрока.ВидРасхода 		= СтрокаНДФЛ.ВидРасхода;
					НоваяСтрока.ЭлементРасхода	= СтрокаНДФЛ.ЭлементРасхода;
					НоваяСтрока.СчетУчета 		= СтрокаНДФЛ.СчетУчета;
					НоваяСтрока.ОтражениеВУСН 	= Перечисления.ОтражениеВУСН.НеПринимаются;
					НоваяСтрока.Сумма	 		= - СуммаНеПринимаемых;
				КонецЕсли;
				
			КонецЕсли;
						
		ИначеЕсли (ТекСтрока.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата) И
			(НЕ ЗначениеЗаполнено(ТекСтрока.ОтражениеВУСН)) Тогда
			
			ТекСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаРасходов.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета, ОтражениеВУСН", "Сумма");
	ТаблицаРасходов.Колонки.Добавить("Валюта");
	ТаблицаРасходов.Колонки.Добавить("РасчетныйДокумент");
	ТаблицаРасходов.Колонки.Добавить("СтатусыОплатыРасходовУСН");
	ТаблицаРасходов.Колонки.Добавить("НДС");
	
	ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
	ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
	ТаблицаРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
	ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
	
	МассивРаботников = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивРаботников);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	//Расчеты с работниками
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "Контрагент";
	Фильтр.ЗначениеПоля		= МассивРаботников;
	Фильтр.Условие			= "В";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда;
	Фильтр.Условие			= "=";
	
	ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаПлатежей.Индексы.Добавить("Контрагент");
	
	ТаблицаФильтров.Очистить();
	
	МассивСчетов = ТаблицаРасходов.ВыгрузитьКолонку("СчетУчета");
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетов);
	
	//Расчеты по налогам
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СчетУчета";
	Фильтр.ЗначениеПоля		= МассивСчетов;
	Фильтр.Условие			= "В";
	
	ТаблицаПлатежейНалогов = ВыполнитьЗапросПоВзаиморасчетамПрочееУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	ТаблицаПлатежейНалогов.Индексы.Добавить("СчетУчета");
	
	ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
	ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
	ТаблицаДвиженияРасходов.Колонки.Добавить("КлючУникальности");
	
	//Заполняем таблицу списываемых расходов по таблице расходов
	Для Каждого Расход Из ТаблицаРасходов Цикл
		СтруктураОтбора = Новый Структура;
		Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			СтруктураОтбора.Вставить("Контрагент",  Расход.ЭлементРасхода);
			НайденныеСтроки = ТаблицаПлатежей.НайтиСтроки(СтруктураОтбора);
		Иначе
			СтруктураОтбора.Вставить("СчетУчета",  Расход.СчетУчета);
			НайденныеСтроки = ТаблицаПлатежейНалогов.НайтиСтроки(СтруктураОтбора);
		КонецЕсли;
				
		СуммаОсталосьПогасить = Расход.Сумма;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Если СуммаОсталосьПогасить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если Строка.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСписания = Мин(Строка.Сумма, СуммаОсталосьПогасить);
			СуммаОсталосьПогасить = СуммаОсталосьПогасить - СуммаСписания;
			
			НоваяСтрока = ТаблицаДвиженияВзаиморасчетов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						
			НоваяСтрокаРасходов = ТаблицаДвиженияРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаРасходов, Расход);
			
			Если НЕ Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				НоваяСтрокаРасходов.КлючУникальности = Расход.СчетУчета;
			КонецЕсли;
			
			НоваяСтрока.Сумма = Мин(Строка.Сумма, СуммаСписания);
			НоваяСтрокаРасходов.Сумма = Мин(Расход.Сумма, СуммаСписания);
			
			Строка.Сумма = Строка.Сумма - СуммаСписания;
			
		КонецЦикла;
		Если СуммаОсталосьПогасить > 0 Тогда
			Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, Расход.ЭлементРасхода, СтруктураШапкиДокумента.Ссылка, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда, СуммаОсталосьПогасить);				
			Иначе
				ДвижениеВзиморасчетовПрочееУСН(ТаблицаДвиженияВзаиморасчетов, СтруктураШапкиДокумента.Организация, , СтруктураШапкиДокумента.Ссылка, Расход.СчетУчета, СуммаОсталосьПогасить);				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, , "Оплата", Ложь);
			
	Если ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено Тогда
		ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	КонецЕсли;
	ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
	
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаРасходов,);
	
КонецПроцедуры

//Расчет и списание расходов будущих периодов
//
Процедура СписаниеРБПУСН(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР)
	
	Заголовок = "Списание РБП для целей УСН";

	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
	Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
		
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "ВидРасхода";
	Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.РБП;
	Фильтр.Условие			= "=";
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля	= Статусы;
	Фильтр.Условие			= "В";
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
	НачМесяца = НачалоМесяца(СтруктураШапкиДокумента.Дата);
	КонМесяца = КонецМесяца(СтруктураШапкиДокумента.Дата);
	
	//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
	Для Каждого Строка Из ТаблицаРасходов Цикл
		Если Строка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		РБП = Строка.ЭлементРасхода;
		
		Если Не ЗначениеЗаполнено(РБП) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаНачалаСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата начала списания !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(РБП.ДатаОкончанияСписания) Тогда
			ТекстСообщения = "В справочнике ""Расходы будущих периодов"" для статьи """+ РБП + """ не заполнен дата окончания списания !";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Ложь, Заголовок);
			Продолжить;
		КонецЕсли;
		
		ВспомогательныеДанныеРасчета = Новый Структура("КоличествоМесяцевДней, КоличествоМесяцевДнейТекущегоПериода", 0, 0);
		ДатаНачала = ?(РБП.ДатаНачалаСписания > НачМесяца, РБП.ДатаНачалаСписания, НачМесяца);
		СуммаСписания = БухгалтерскийУчет.СуммаСписанияЗаМесяц(РБП, ДатаНачала, РБП.ДатаОкончанияСписания, Строка.Сумма, ВспомогательныеДанныеРасчета, НачМесяца, КонМесяца);
		
		Если НЕ (СуммаСписания > 0.05 Или СуммаСписания < -0.05) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаДляСписания.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
		Если Строка.Сумма > СуммаСписания Тогда
			К = СуммаСписания / Строка.Сумма;
			НоваяСтрока.Количество 	= К*НоваяСтрока.Количество;
			НоваяСтрока.Сумма	 	= К*НоваяСтрока.Сумма;
			НоваяСтрока.НДС 		= К*НоваяСтрока.НДС;
		КонецЕсли;
	КонецЦикла;
	
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
			 
	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	
КонецПроцедуры

//Расчет и списание расходов будущих периодов
//
Процедура РаспределениеЕНВД(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР)
	
	//Формирование таблицы фильтров
	ТаблицаФильтров = Новый ТаблицаЗначений;
	ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
	ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
	ТаблицаФильтров.Колонки.Добавить("Условие");
	
	Фильтр = ТаблицаФильтров.Добавить();
	Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
	Фильтр.ЗначениеПоля		= Перечисления.СтатусыРасходовУСН.НеРаспределено;
	Фильтр.Условие			= "=";
	МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
	СтруктураШапкиДокумента.Дата = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента), КонецКвартала(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), КонецКвартала(СтруктураШапкиДокумента.Дата));
	
	//Из таблицы расходов выбираем соответствующие партии и элементы расходов
	ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(КонецМесяца(СтруктураШапкиДокумента.Дата), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
	
	ТаблицаДляСписания = Новый ТаблицаЗначений;
	Для Каждого Кол Из ТаблицаРасходов.Колонки Цикл
		ТаблицаДляСписания.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
	КонецЦикла;
		
	//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
	ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "РаспределениеЕНВД", Ложь);
	
	Метод = ?(СтруктураШапкиДокумента.МетодРаспределения = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода, "Год", "Квартал");
	База = ?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
			?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));
	
	Коэфф = ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Метод, База);
	
	ИтогРаспределения = ТаблицыДвижений.ТаблицаПринятых.Итог("Сумма")*Коэфф;
	Распределено = 0;
	МаксПозиция = Неопределено;
	МаксСумма = 0;
		
	Если (Коэфф = 0) ИЛИ (ТаблицыДвижений.ТаблицаПринятых.Количество() = 0) Тогда
		//Все расходы относятся к УСН или нет распределенных расходов
	Иначе
		Для Каждого Расход Из ТаблицыДвижений.ТаблицаПринятых Цикл
			Если Расход.Сумма > 0 Тогда
				Расход.Количество 	= Расход.Количество - Окр(Коэфф*Расход.Количество,3,1);
				
				Если МаксСумма < Расход.Сумма Тогда
					МаксПозиция = Расход;
					МаксСумма = Расход.Сумма;
				КонецЕсли;
				Распределено = Распределено + Окр(Коэфф*Расход.Сумма,2,1);
				
				Расход.Сумма	 	= Расход.Сумма - Окр(Коэфф*Расход.Сумма,2,1);
				Расход.НДС 			= Расход.НДС - Окр(Коэфф*Расход.НДС,2,1);
			КонецЕсли;
		КонецЦикла;
		
		Если (Распределено <> ИтогРаспределения) И (МаксПозиция <> Неопределено) Тогда
			МаксПозиция.Сумма = МаксПозиция.Сумма - (ИтогРаспределения - Распределено);
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Метод = "Квартал") И (НЕ НачалоГода(СтруктураШапкиДокумента.Дата) = НачалоКвартала(СтруктураШапкиДокумента.Дата)) Тогда
		СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицыДвижений.ТаблицаПринятых);
	КонецЕсли;

	ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// МЕНЕДЖЕР УСН (вход документов)

//Основная процедура - собирает необходимые данные и вызывает
//ситуационные процедуры в зависимости от вида операции. Выполняет движения по регистрам
Процедура ОтразитьВУСН(ДокументСсылка, ВидОперации = Неопределено, Параметры = Неопределено, ЭтапПроведения = 0, СтруктураДопПараметров = Неопределено) Экспорт
	
	Если НЕ НалоговыйУчетУСН.ПрименениеУСН(ДокументСсылка.Организация, ДокументСсылка.Дата) Тогда
		Возврат;
	КонецЕсли;
		
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокументСсылка.Дата, Ложь, ДокументСсылка.Организация);
	
	Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Сделка = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("Сделка", МетаданныеДокумента), ДокументСсылка.Сделка, Неопределено);
	Договор = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента),ДокументСсылка.ФизЛицо,Неопределено));
	ВалютаДокумента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента), ДокументСсылка.ВалютаДокумента, ВалютаРегламентированногоУчета);
	ВалютаВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента);
	КурсВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента), ДокументСсылка.КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	КратностьВзаиморасчетов = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("КратностьВзаиморасчетов", МетаданныеДокумента), ДокументСсылка.КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	
	ДатаОплаты = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаОплаты", МетаданныеДокумента), ДокументСсылка.ДатаОплаты, Неопределено);
	ВидОперацииДок = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВидОперации", МетаданныеДокумента), ДокументСсылка.ВидОперации, Неопределено);
	
	СторнироватьДоходыПриВозврате = Истина;
	
	ДвиженияРегистров = Неопределено;
	
	Если Параметры = Неопределено Тогда
		СтруктураШапкиДокумента = Новый Структура("Ссылка, Объект, Организация, Дата", ДокументСсылка, ДокументСсылка.ПолучитьОбъект(), ДокументСсылка.Организация, ДокументСсылка.Дата);
	Иначе
		СтруктураШапкиДокумента = Параметры;
	КонецЕсли;
	
	Если СтруктураДопПараметров = Неопределено Тогда
		ТаблицаТМЦ = Неопределено;
	ИначеЕсли СтруктураДопПараметров.Свойство("ТаблицаТМЦ") Тогда
		ТаблицаТМЦ = СтруктураДопПараметров.ТаблицаТМЦ;
	КонецЕсли;
	
	СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов);
	СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета",ВалютаРегламентированногоУчета);
	СтруктураШапкиДокумента.Вставить("ВалютаДокумента",ВалютаДокумента);
	СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаОплаты);
	СтруктураШапкиДокумента.Вставить("ВидОперации",ВидОперацииДок);
	СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента",Договор);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам);
	СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов);
	СтруктураШапкиДокумента.Вставить("МетодРаспределения",УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности);
	СтруктураШапкиДокумента.Вставить("БазаРаспределения",УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности);
	СтруктураШапкиДокумента.Вставить("Сделка",Сделка);
	
	Если ВидОперации = Неопределено Тогда
		ВидОперации = ВидОперацииДДС(СтруктураШапкиДокумента);
	КонецЕсли;
	
	Если ВидОперации = "НеОтражатьВНУ" Тогда
		Возврат;
	КонецЕсли;
	
	КУДиР = Новый Структура("ДоходЕНВД, Графа4, Графа5, Графа6, Графа7, НДС, Содержание", 0,0,0,0,0,0,"");
	
	КУДиР.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента);
	
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", МетаданныеДокумента) Тогда
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 		ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
	Иначе
		СтруктураШапкиДокумента.Вставить("КурсДокумента", 		1);
		СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	1);
	КонецЕсли;

	
	Если (ВидОперации = "Поступление")
		ИЛИ (ВидОперации = "УслугаКомиссионера")
		ИЛИ (ВидОперации = "УслугаПоПереработке") Тогда
		
		НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписей.Прочитать();
		ТаблицаПрихода = НаборЗаписей.Выгрузить();
		
		Статусы = Новый СписокЗначений;
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
		
		Если ЭтапПроведения > 0 Тогда
			Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
		КонецЕсли;
		
		КолвоЭлементовКоллекции = ТаблицаПрихода.Количество(); 
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
			ЭлементКоллекции = ТаблицаПрихода[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если (Статусы.НайтиПоЗначению(ЭлементКоллекции.СтатусыОплатыРасходовУСН)=Неопределено)
				ИЛИ (ЭлементКоллекции.ВидДвижения = ВидДвиженияНакопления.Расход) Тогда
				ТаблицаПрихода.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;
		
		УчетАгентскогоНДС = Ложь;
	    	
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Если (Сделка = Неопределено) Тогда
				Сделка = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			УчетАгентскогоНДС = Договор.УчетАгентскогоНДС;
		КонецЕсли;
		
		Если ВидОперации = "УслугаКомиссионера" Тогда
			СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаВознаграждения, ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
		ИначеЕсли ВидОперации = "УслугаПоПереработке" Тогда
			
			СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Услуги"), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
		Иначе
			СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			//Учтем агентский НДС
			Если УчетАгентскогоНДС Тогда
				СуммаВзаиморасчетовНДС   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьНДСДокумента(ДокументСсылка), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
														   
				СуммаВзаиморасчетов = СуммаВзаиморасчетов - СуммаВзаиморасчетовНДС;
				ТаблицаПриходаНДС = ТаблицаПрихода.СкопироватьКолонки();
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ВидРасхода",  Перечисления.ВидыРасходовУСН.Налоги);
				
				ТаблицаПрихода.Индексы.Добавить("ВидРасхода");
				НайденныеСтроки = ТаблицаПрихода.НайтиСтроки(СтруктураОтбора);
				КоличествоСтрок = НайденныеСтроки.Количество();
				Для Индекс = 1 По КоличествоСтрок Цикл
					Строка = НайденныеСтроки[КоличествоСтрок - Индекс];
					СтрокаНДС = ТаблицаПриходаНДС.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНДС, Строка);
					ТаблицаПрихода.Удалить(Строка);
				КонецЦикла;						
				СуммаВзаиморасчетовНДСРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовНДС, 
															СтруктураШапкиДокумента.ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета,
														   	КурсВзаиморасчетов, 1, КратностьВзаиморасчетов, 1);
															
				РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПриходаНДС, ДвиженияРегистров, ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента, СуммаВзаиморасчетовНДСРегл, (ЭтапПроведения > 0));
		    КонецЕсли;
														   
		КонецЕсли;												   
		Если ТипЗнч(Договор) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			РасчетыПрочие_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПрихода, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
		Иначе
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаОплат, ТаблицаПрихода, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "Перемещение") 
		ИЛИ (ВидОперации = "Комплектация")
		ИЛИ (ВидОперации = "НаРеализацию")
		ИЛИ (ВидОперации = "ВПереработку")
		ИЛИ (ВидОперации = "ВозвратСРеализации")
		ИЛИ (ВидОперации = "ВозвратИзПереработки") Тогда
		
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
		
		Договор = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);
		
		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		Если ВидОперации = "ВозвратСРеализации" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.НаРеализации;
		ИначеЕсли ВидОперации = "ВозвратИзПереработки" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.ВПереработке;
		Иначе
			СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;
		КонецЕсли;
		
		ДвиженияРегистровВх = Неопределено;
		
		Если НЕ ТаблицаПартий.Количество() = 0 Тогда
			ПеремещениеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			//Партии не оприходовались (перемещение в НТТ по продажным ценам)
			//Спишем расходы
			//Дополним таблицу партий колонкой со статусами расходов по списанию
			
			ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);
			ТаблицаПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.НеПринимаются, "СтатусСписания");
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);			
		КонецЕсли;
		
		ДвиженияРегистров = ДвиженияРегистровВх;
		
	ИначеЕсли (ВидОперации = "Списание") 
		ИЛИ (ВидОперации = "Реализация")
		ИЛИ (ВидОперации = "Розница") 
		ИЛИ (ВидОперации = "ВозвратПоставщику") Тогда
		
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
		
		Договор = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);
		
		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		СтатусПартии = Перечисления.СтатусыПартийУСН.Купленные;
		
		ДвиженияРегистровВх = Неопределено;
		
		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;
				
		Если ВидОперации = "Реализация" Тогда
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			СуммаЕНВД			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
			СуммаКомиссии		 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
			СуммаВзаиморасчетов  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
															СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
															
			Если (Сделка = Неопределено) Тогда
				Сделка = СтруктураШапкиДокумента.Ссылка;
			КонецЕсли;
			
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, СуммаЕНВД, СуммаКомиссии, КУДиР)
						
		ИначеЕсли ВидОперации = "Списание" Тогда
			
			ДвиженияРегистров = ДвиженияРегистровВх;
			
		ИначеЕсли ВидОперации = "Розница" Тогда
			
			ДвиженияРегистров = ДвиженияРегистровВх;
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			СуммаЕНВД			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
			СуммаКомиссии		 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
			СуммаВзаиморасчетов  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
			
			Если СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетНТТОПродажах Тогда
				
				СчетаДоходовРасходов = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, ДокументСсылка.Склад, СтруктураШапкиДокумента.Дата, УчетнаяПолитика);
				ЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
		    
				Если ЕНВД Тогда
					СуммаНеЕНВД = СуммаВзаиморасчетов - СуммаЕНВД - СуммаКомиссии;
					Если СуммаНеЕНВД > 0 Тогда
						КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму " + СуммаНеЕНВД + " руб. определена как не подпадающая под ЕНВД. ";
						КУДиР.Графа5	 = КУДиР.Графа5 + СуммаНеЕНВД;
						КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД - СуммаНеЕНВД;
					КонецЕсли;
				Иначе
					КУДиР.Графа5 = КУДиР.Графа5  - СуммаЕНВД - СуммаКомиссии;
					Если СуммаКомиссии > 0 Тогда
						КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму " + СуммаКомиссии + " руб. определена как выручка комитента. ";
					КонецЕсли;
					Если СуммаЕНВД > 0 Тогда
						КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму " + СуммаЕНВД + " руб. отнесена к деятельности ЕНВД. ";
						КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаЕНВД;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ВыделитьБезналичнуюОплату(СтруктураШапкиДокумента, ДвиженияРегистров.ВзаиморасчетыРасход, СуммаВзаиморасчетов, СуммаЕНВД, СуммаКомиссии);
				
				КУДиР.Графа4 = КУДиР.Графа4  + СуммаВзаиморасчетов;
				КУДиР.Графа5 = КУДиР.Графа5  + СуммаВзаиморасчетов - СуммаЕНВД - СуммаКомиссии;
				
				Если СуммаКомиссии > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму " + СуммаКомиссии + " руб. определена как выручка комитента. ";
				КонецЕсли;
				Если СуммаЕНВД > 0 Тогда
					КУДиР.Содержание = КУДиР.Содержание + "Розничная выручка на сумму " + СуммаЕНВД + " руб. отнесена к деятельности ЕНВД. ";
					КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаЕНВД;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВидОперации = "ВозвратПоставщику" Тогда
			
			Если НЕ Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				
				ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
				Если ТаблицаОплат.Количество() > 0 Тогда
					РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Оплата");
				Иначе
					ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
				Конецесли;
				
				ДвиженияРегистров.РасходыУСН = ДвиженияРегистровВх.РасходыУСН.Скопировать();
				ДвиженияРегистров.КУДиР = ДвиженияРегистровВх.КУДиР.Скопировать();
				
				КУДиР.Графа6 = 0;
			Иначе
				ДвиженияРегистров = ДвиженияРегистровВх;
			КонецЕсли;
		
		Иначе
			ДвиженияРегистров = ДвиженияРегистровВх;
			
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "РеализацияКомиссионером") 
		ИЛИ (ВидОперации = "ИзПереработки") Тогда
		
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
					
		Договор = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ДоговорКонтрагента", МетаданныеДокумента), ДокументСсылка.ДоговорКонтрагента, Неопределено);
		
		ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура;
		Если ВидОперации = "РеализацияКомиссионером" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.НаРеализации;
			ВидОперации = "Реализация";
		ИначеЕсли ВидОперации = "ИзПереработки" Тогда
			СтатусПартии = Перечисления.СтатусыПартийУСН.ВПереработке;
			ВидОперации = "Списание";
		КонецЕсли;
		ДвиженияРегистровВх = Неопределено;
		
		//Дополним таблицу партий колонкой со статусами расходов по списанию
		ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокумента, ТаблицаПартий, ВидОперации);
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			//Расходы обрабатываем только при объекте "Доходы, уменьшенные на величину расходов"
			СписаниеРасходовУСН(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх, ВидРасхода, Договор, СтатусПартии, ВидОперации);
		Иначе
			ДвиженияРегистровВх = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР, ТаблицаПриход", Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений, Новый ТаблицаЗначений);
		КонецЕсли;
		
		Если ВидОперации = "Реализация" Тогда
			Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистровВх);
			СуммаЕНВД			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
			СуммаКомиссии		 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.Комиссия, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
																
			//Подменим ссылку если документ - реализация отгруженной продукции
			СсылкаДляОпределенияВыручки = ДокументСсылка;
			Если (МетаданныеДокумента.ТабличныеЧасти.Количество() = 0) И (НЕ МетаданныеДокумента.Реквизиты.Найти("ДокументОтгрузки") = Неопределено) Тогда
				Если ЗначениеЗаполнено(ДокументСсылка.ДокументОтгрузки) Тогда
					СсылкаДляОпределенияВыручки = ДокументСсылка.ДокументОтгрузки;
				КонецЕсли;
			КонецЕсли;
			СуммаВзаиморасчетов  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(СсылкаДляОпределенияВыручки), ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
																
																
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("УдержатьВознаграждение", МетаданныеДокумента) Тогда													
				Если ДокументСсылка.УдержатьВознаграждение Тогда
													
					СуммаВознаграждения = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументСсылка.Товары.Итог("СуммаВознаграждения"), ВалютаДокумента,
														   		СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   		СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);
																
					КоэффВознагр = ?(СуммаВзаиморасчетов = 0, 0, СуммаВознаграждения/СуммаВзаиморасчетов);
					СуммаЕНВД = Окр(СуммаЕНВД - СуммаЕНВД*КоэффВознагр, 2, 1);
					СуммаКомиссии = Окр(СуммаКомиссии - СуммаКомиссии*КоэффВознагр, 2, 1);
					СуммаВзаиморасчетов = СуммаВзаиморасчетов - СуммаВознаграждения;
				КонецЕсли;
			КонецЕсли;
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистровВх.ТаблицаПриход, ДвиженияРегистровВх, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, СуммаЕНВД, СуммаКомиссии, КУДиР);
			
		ИначеЕсли ВидОперации = "Списание" Тогда
			
			ДвиженияРегистров = ДвиженияРегистровВх;
																
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионера" Тогда
		
		//Проверим наличие доходов
		
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
		
		Выручка = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий);
		СуммаПринимаемойВыручки = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия;
		
		ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
		Если ВыделятьНДСУСН И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			СуммаНДСВознаграждения = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения"); 
			СуммаВознаграждения = ДокументСсылка.СуммаВознаграждения - СуммаНДСВознаграждения;
			Если ДокументСсылка.СуммаВознаграждения > 0 Тогда
				СуммаПринимаемойВыручки = СуммаПринимаемойВыручки - СуммаПринимаемойВыручки * СуммаНДСВознаграждения / ДокументСсылка.СуммаВознаграждения;
			КонецЕсли;
		Иначе
			СуммаВознаграждения = ДокументСсылка.СуммаВознаграждения;
		КонецЕсли;
			
		СуммаДоходов = Мин(СуммаПринимаемойВыручки, СуммаВознаграждения);
		СуммаДоходов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДоходов, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
		СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВознаграждения, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
														   
		КУДиР.Графа4 = СуммаДоходов;
		КУДиР.Графа5 = СуммаДоходов;
		
		Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			КУДиР.Графа7 = СуммаВзаиморасчетов;
			Если НЕ ВыделятьНДСУСН Тогда
				КУДиР.НДС = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ЗачетВознагражденияКомиссионераНДС" Тогда
		
		//Проверим наличие доходов
		ТаблицаПартий = ПодготовитьТаблицуПартий(ТаблицаТМЦ, ВидОперации);
		
		Выручка = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, ТаблицаПартий);
		СуммаПринимаемойВыручки = Выручка.Всего - Выручка.ЕНВД - Выручка.Комиссия;
		СуммаНДСВознаграждения = ДокументСсылка.Товары.Итог("СуммаНДСВознаграждения"); 
		Если ДокументСсылка.СуммаВознаграждения > 0 Тогда
			СуммаПринимаемойВыручки = СуммаПринимаемойВыручки * СуммаНДСВознаграждения / ДокументСсылка.СуммаВознаграждения;
		КонецЕсли;
		СуммаДоходов = Мин(СуммаПринимаемойВыручки, СуммаНДСВознаграждения);
		СуммаДоходов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДоходов, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
		СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаНДСВознаграждения, ВалютаДокумента,
														   ВалютаРегламентированногоУчета,
														   СтруктураШапкиДокумента.КурсДокумента, 1,
														   СтруктураШапкиДокумента.КратностьДокумента, 1);
														   
		КУДиР.Графа4 = СуммаДоходов;
		КУДиР.Графа5 = СуммаДоходов;
		КУДиР.Графа7 = СуммаВзаиморасчетов;

	ИначеЕсли (ВидОперации = "РеализацияУслуг") Тогда
		
		Выручка 			 = ДоляЕНВДиКомиссии(СтруктураШапкиДокумента, , ,ВидОперации);
		СуммаЕНВД			 = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выручка.ЕНВД, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
		СуммаКомиссии		 = 0;
		СуммаУслугПоДокументу = 0;
		
		ЗачитыватьАванс = Истина;
		УдержатьВознаграждение = Ложь;
		
		Если ОбщегоНазначения.ЕстьТабЧастьДокумента("Услуги", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка);
		ИначеЕсли ОбщегоНазначения.ЕстьТабЧастьДокумента("Продукция", МетаданныеДокумента) И ОбщегоНазначения.ЕстьТабЧастьДокумента("Услуги", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Продукция") + УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Услуги");
		ИначеЕсли ОбщегоНазначения.ЕстьТабЧастьДокумента("Контрагенты", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "Контрагенты");
		ИначеЕсли ОбщегоНазначения.ЕстьТабЧастьДокумента("Товары", МетаданныеДокумента) Тогда
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаВознаграждения", МетаданныеДокумента, "Товары") Тогда
				СуммаУслугПоДокументу = ДокументСсылка.Товары.Итог("СуммаВознаграждения");
				Если ДокументСсылка.УдержатьВознаграждение Тогда
					СуммаПолучено = ДокументСсылка.ДенежныеСредства.Итог("Сумма");
					ДоходПоУдержанномуВознаграждению = Мин(СуммаПолучено, СуммаУслугПоДокументу);
					КУДиР.Содержание = КУДиР.Содержание + "Комиссионное вознаграждение удержано из выручки комитента. ";
					КУДиР.Графа5 = КУДиР.Графа5 + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДоходПоУдержанномуВознаграждению, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																СтруктураШапкиДокумента.КурсДокумента, 1,
																СтруктураШапкиДокумента.КратностьДокумента, 1);
																
					СуммаУслугПоДокументу = 0
				КонецЕсли;
			Конецесли;
		ИначеЕсли ОбщегоНазначения.ЕстьТабЧастьДокумента("ОС", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументСсылка, "ОС");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("НематериальныйАктив", МетаданныеДокумента) Тогда
			СуммаУслугПоДокументу = ?(ДокументСсылка.СуммаВключаетНДС, ДокументСсылка.Сумма, ДокументСсылка.Сумма + ДокументСсылка.СуммаНДС); 
		КонецЕсли;
		
		Если НЕ СуммаУслугПоДокументу = 0 Тогда
			СуммаВзаиморасчетов  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаУслугПоДокументу, ВалютаДокумента,
																СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
																СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов); 
			
			ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
			РасчетыСКонтрагентами_ЗачетАвансаОтПокупателяУСН(СтруктураШапкиДокумента, ТаблицаОплат, Новый ТаблицаЗначений, ДвиженияРегистров, ДвиженияРегистров, Договор, СуммаВзаиморасчетов, СуммаЕНВД, СуммаКомиссии, КУДиР);
		Конецесли;
	ИначеЕсли (ВидОперации = "Оплата") Тогда	
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ?(ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет"), "ОплатаАО", "Оплата"));
		Конецесли;
				
	ИначеЕсли ВидОперации = "ВыплатаЗП" Тогда
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("ВыплатаЗаработнойПлаты") = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("Сделка", Неопределено);
			Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
			Запрос.УстановитьПараметр("Сводно", Справочники.ФизическиеЛица.ПустаяСсылка());
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Работник,
			|	&Сделка КАК Сделка,
			|	1 КАК КурсВзаиморасчетов,
			|	1 КАК КратностьВзаиморасчетов,
			|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) КАК Сумма
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + МетаданныеДокумента.Имя + ".ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
			|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
			|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
			|
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка И
			|	(НЕ ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = &Сводно) И
			|	ЗарплатаКВыплатеОрганизацийЗарплата.ВыплаченностьЗарплаты = &Выплачено И
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация = &Организация И
			|	РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
			|
			|СГРУППИРОВАТЬ ПО
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо
			|
			|ИМЕЮЩИЕ
			|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма) <> 0";
			
			ТаблицаОплат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаОплат.Количество() > 0 Тогда
				ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");				
			Конецесли;
		КонецЕсли;
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("ПеречислениеЗаработнойПлаты") = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("Сделка", Неопределено);
			Запрос.УстановитьПараметр("Сводно", Справочники.ФизическиеЛица.ПустаяСсылка());
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Физлицо КАК Работник,
			|	&Сделка КАК Сделка,
			|	1 КАК КурсВзаиморасчетов,
			|	1 КАК КратностьВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СуммаПлатежа > ЗарплатаКВыплатеОрганизацийЗарплата.Сумма
			|			ТОГДА ЗарплатаКВыплатеОрганизацийЗарплата.Сумма
			|		ИНАЧЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.СуммаПлатежа
			|	КОНЕЦ КАК Сумма
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СписаниеСРасчетногоСчета.ПеречислениеЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
			|		ПО ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость
			|			И ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Физлицо
			|ГДЕ
			|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка = &Ссылка
			|	И (НЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Физлицо = &Сводно)";
			
			ТаблицаОплат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаОплат.Количество() > 0 Тогда
				ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
			Конецесли;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = "ВыплатаДепонентов" Тогда
		
		Если Не МетаданныеДокумента.ТабличныеЧасти.Найти("ВыплатаДепонентов") = Неопределено Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
			Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			Запрос.УстановитьПараметр("Сделка", Неопределено);
			Запрос.УстановитьПараметр("Выплачено",Перечисления.ВыплаченностьЗарплаты.Выплачено);
			Запрос.УстановитьПараметр("Сводно", Справочники.ФизическиеЛица.ПустаяСсылка());
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо КАК Работник,
			|	&Сделка КАК Сделка,
			|	1 КАК КурсВзаиморасчетов,
			|	1 КАК КратностьВзаиморасчетов,
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма КАК Сумма
			|ИЗ
			|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + МетаданныеДокумента.Имя + ".ВыплатаДепонентов КАК РКОВыплатаДепонентов
			|		ПО (ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = РКОВыплатаДепонентов.Ведомость) И
			|		   (ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо = РКОВыплатаДепонентов.Физлицо)
			|
			|ГДЕ
			|	РКОВыплатаДепонентов.Ссылка = &Ссылка И
			|	(НЕ РКОВыплатаДепонентов.Физлицо = &Сводно) И
			|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка.Организация = &Организация";
			
			ТаблицаОплат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаОплат.Количество() > 0 Тогда
				ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
			Конецесли;
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "ВыплатаЗПРаботнику") Тогда
		
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("Работник");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");
		
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Работник = ДокументСсылка.Контрагент;
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		
		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Работник");
		
	ИначеЕсли (ВидОперации = "ОплатаОтПокупателя") Тогда	
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Доход");
		Конецесли;
				
	ИначеЕсли (ВидОперации = "НачислениеЗП") Тогда
		НачислениеЗП(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР, СтруктураДопПараметров);
		
	ИначеЕсли (ВидОперации = "СписаниеРБП") Тогда
		СписаниеРБПУСН(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР);
		
	ИначеЕсли (ВидОперации = "РаспределениеЕНВД") Тогда
		РаспределениеЕНВД(СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР);
		
	ИначеЕсли (ВидОперации = "СписаниеТЗР") Тогда
		СписаниеТЗР(СтруктураШапкиДокумента, ДвиженияРегистров);
		
	ИначеЕсли (ВидОперации = "ПеречислениеНалога") Тогда	
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.СчетУчетаРасчетовСКонтрагентом;
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		
		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Налог");
		
		ДвиженияРегистров.КУДиР.Колонки.Добавить("КлючУникальности");
		ДвиженияРегистров.КУДиР.ЗаполнитьЗначения(ДокументСсылка.СчетУчетаРасчетовСКонтрагентом, "КлючУникальности");
		
	ИначеЕсли (ВидОперации = "ВыдачаПодотчетномуЛицу") Тогда	
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");
		
		НоваяСтрока = ТаблицаОплат.Добавить();
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента) Тогда
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.ФизЛицо;
		Иначе
			НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.Контрагент;
		КонецЕсли;
		
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		
		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ПодотчетноеЛицо");
				
	ИначеЕсли (ВидОперации = "ВозвратОтПодотчетногоЛица") Тогда	
		ТаблицаОплат = Новый ТаблицаЗначений;
		ТаблицаОплат.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаОплат.Колонки.Добавить("Сделка");
		ТаблицаОплат.Колонки.Добавить("Сумма");
		ТаблицаОплат.Колонки.Добавить("КурсВзаиморасчетов");
		ТаблицаОплат.Колонки.Добавить("КратностьВзаиморасчетов");
		
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.ДоговорКонтрагента = ДокументСсылка.Контрагент;
		НоваяСтрока.Сделка = Неопределено;
		НоваяСтрока.Сумма = ДокументСсылка.СуммаДокумента;
		НоваяСтрока.КурсВзаиморасчетов =  ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		НоваяСтрока.КратностьВзаиморасчетов =  ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, Константы.ВалютаРегламентированногоУчета.Получить());
		
		ОплатаПрочееУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ПодотчетноеЛицо", ВидДвиженияНакопления.Расход);
		КУДиР.Графа6 = - КУДиР.Графа4;
		КУДиР.Графа4 = 0;
		КУДиР.Графа5 = 0;
				
	ИначеЕсли (ВидОперации = "ВозвратОтПоставщика") Тогда
		
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Доход");
			КУДиР.Графа6 = - КУДиР.Графа4;
			КУДиР.Графа4 = 0;
			КУДиР.Графа5 = 0;
		Конецесли;
		
	ИначеЕсли (ВидОперации = "ВозвратПокупателю") Тогда
		
		ТаблицаОплат = СтруктураДопПараметров.ТаблицаРасчетов;
		Если ТаблицаОплат.Количество() > 0 Тогда
			РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "ВозвратПокупателю");
			Если НЕ СторнироватьДоходыПриВозврате Тогда				
				КУДиР.Графа4 = 0;
				КУДиР.Графа5 = 0;
				КУДиР.Графа6 = 0;
			КонецЕсли;
		Конецесли;
						
	ИначеЕсли (ВидОперации = "ВыручкаСНТТ") Тогда
		//КУДиР.Содержание = "Прием розничной выручки. ";
		Если ДокументСсылка.РучнаяНастройка_УСН ИЛИ (УчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			ПрочееДДС(ДокументСсылка, ДвиженияРегистров, КУДиР);
		Иначе
			
			СчетаДоходовРасходов = БухгалтерскийУчет.ПолучитьСчетаУчетаВНТТ(СтруктураШапкиДокумента.Организация, ДокументСсылка.Контрагент, СтруктураШапкиДокумента.Дата, УчетнаяПолитика);
			ЕНВД = НалоговыйУчетУСН.ОтноситсяКДеятельностиЕНВД(СчетаДоходовРасходов.СчетДоходовОтРеализации);
		    			
			СуммаДокумента = ДокументСсылка.РасшифровкаПлатежа.Итог("СуммаПлатежа");
			КУДиР.Графа4 = КУДиР.Графа4 + СуммаДокумента;
			
			Если ЕНВД Тогда
				КУДиР.ДоходЕНВД	 = КУДиР.ДоходЕНВД + СуммаДокумента;
			Иначе
				КУДиР.Графа5 = КУДиР.Графа5 + СуммаДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли (ВидОперации = "ПереносЗадолженности") Тогда
		
		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Расход, ВидОперации);
			Конецесли;
		Конецесли;
		//таблицу АвансПоставщику не обрабатываем - по этим взаиморасчетам нет расходов
		
		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		КонецЕсли;
		//таблицу АвансПокупателя не обрабатываем - по этим взаиморасчетам нет расходов

	ИначеЕсли (ВидОперации = "ПроведениеВзаимозачетаДебитор") Тогда
		
		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Доход");			
			Конецесли;
		Конецесли;
		
		Если СтруктураДопПараметров.Свойство("АвансПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.АвансПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КУДиР.Графа5 = КУДиР.Графа5 - КУДиР.Графа4;
				КУДиР.Графа4 = 0;
			Конецесли;
		Конецесли;
		
		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 И 
				ЗначениеЗаполнено(ТаблицаОплат[0].ДоговорКонтрагента) И
				(ТаблицаОплат[0].ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее) Тогда
				КУДиР.Графа5 = КУДиР.Графа5 - КУДиР.Графа4;
				КУДиР.Графа4 = 0;
			Конецесли;
		Конецесли;
							
	ИначеЕсли (ВидОперации = "ПроведениеВзаимозачетаКредитор") Тогда
		
		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				РасчетыСКонтрагентамиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, "Оплата");
				КУДиР.Графа6 = 0;
			Конецесли;
		Конецесли;
						
	ИначеЕсли (ВидОперации = "СписаниеДебиторскойЗадолженности") Тогда
		
		Если СтруктураДопПараметров.Свойство("ДолгПокупателя") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Расход, ВидОперации);
			Конецесли;
		Конецесли;
		//таблицу АвансПоставщику не обрабатываем - по этим взаиморасчетам нет расходов
		
	ИначеЕсли (ВидОперации = "СписаниеКредиторскойЗадолженности") Тогда
		
		Если СтруктураДопПараметров.Свойство("ДолгПоставщику") Тогда
			ТаблицаОплат = СтруктураДопПараметров.ДолгПоставщику;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		Конецесли;
		
		Если СтруктураДопПараметров.Свойство("АвансПокупателя") Тогда
			//Обработаем для включение в доходы
			ТаблицаОплат = СтруктураДопПараметров.АвансПокупателя;
			Если ТаблицаОплат.Количество() > 0 Тогда
				КорректировкаЗадолженностиУСН(СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвиженияНакопления.Приход, ВидОперации);
			Конецесли;
		Конецесли;
		
	ИначеЕсли (ВидОперации = "ПрочееДДС") Тогда
		ПрочееДДС(ДокументСсылка, ДвиженияРегистров, КУДиР);
	КонецЕсли;
	
	Если ВидОперации = "НачислениеЗП" Тогда
		МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата;
	ИначеЕсли НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты) Тогда
		МоментДокумента = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента), КонецМесяца(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата);
	Иначе
		МоментДокумента = КонецДня(СтруктураШапкиДокумента.ДатаОплаты);
	КонецЕсли;
	
	Если НЕ ДвиженияРегистров = Неопределено Тогда
		Если ДвиженияРегистров.ВзаиморасчетыРасход.Количество() > 0 Тогда
			
			ДокументОбъект = СтруктураШапкиДокумента.Объект;
			НаборДвижений = ДокументОбъект.Движения.ПрочиеРасчеты;
			ТаблицаДвижений = НаборДвижений.ВыгрузитьКолонки();
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.ВзаиморасчетыРасход, ТаблицаДвижений);
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			ТаблицаДвижений.ЗаполнитьЗначения(ЭтапПроведения, "ЭтапПроведения");
			
			НаборДвижений.мПериод            = МоментДокумента;
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			ДокументОбъект.Движения.ПрочиеРасчеты.ВыполнитьДвижения();
						
		КонецЕсли;
		Если ДвиженияРегистров.РасходыУСН.Количество() > 0 Тогда
			НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
			
			ТаблицаДвижений = НаборЗаписей.ВыгрузитьКолонки();
			// Заполним таблицу движений.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.РасходыУСН, ТаблицаДвижений);
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
			ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
			ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
			ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
			
			Если ЭтапПроведения = 0 Тогда
				ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(НаборЗаписей, ТаблицаДвижений);
				НаборЗаписей.Записать(Истина);
			Иначе
				НаборЗаписей.Прочитать();
				
				Инд=0;
				Пока Инд < НаборЗаписей.Количество() Цикл
					Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
						НаборЗаписей.Удалить(Инд);
					Иначе
						Инд=Инд+1;
					КонецЕсли;
				КонецЦикла;
				
				ТаблицаДвижений.ЗаполнитьЗначения(ЭтапПроведения, "ЭтапПроведения");
				ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(НаборЗаписей, ТаблицаДвижений);
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
		КонецЕсли;
		Если (ДвиженияРегистров.КУДиР.Количество() > 0)
			ИЛИ (КУДиР.Графа4 <> 0) 
			ИЛИ (КУДиР.Графа5 <> 0) 
			ИЛИ (КУДиР.Графа6 <> 0)
			ИЛИ (КУДиР.Графа7 <> 0) Тогда
			
			ИмяДокумента = МетаданныеДокумента.Имя;
			ТаблицаРасходов = ДвиженияРегистров.КУДиР.Скопировать();
			Если ТаблицаРасходов.Колонки.Найти("ВидРасхода") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("ВидРасхода");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("ОтражениеВУСН") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("ОтражениеВУСН");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("Валюта") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("Валюта");
				ТаблицаРасходов.ЗаполнитьЗначения(ВалютаРегламентированногоУчета, "Валюта");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("Сумма") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("Сумма");
				ТаблицаРасходов.ЗаполнитьЗначения(0, "Сумма");
			КонецЕсли;
			Если ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено Тогда
				ТаблицаРасходов.Колонки.Добавить("НДС");
				ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
			КонецЕсли;
			//ТаблицаРасходов.Свернуть("ВидРасхода, ОтражениеВУСН, Валюта", "Сумма, НДС");
			
			КолвоЭлементовКоллекции = ТаблицаРасходов.Количество(); 
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = ТаблицаРасходов[КолвоЭлементовКоллекции - ОбратныйИндекс];
				Если (ЭлементКоллекции.ОтражениеВУСН <> Перечисления.ОтражениеВУСН.Принимаются) И (ЭлементКоллекции.Сумма > 0) Тогда
					ТаблицаРасходов.Удалить(ЭлементКоллекции);
				ИначеЕсли ЭлементКоллекции.Валюта <> ВалютаРегламентированногоУчета Тогда
					СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ЭлементКоллекции.Валюта, СтруктураШапкиДокумента.Дата);
					ЭлементКоллекции.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЭлементКоллекции.Сумма, ЭлементКоллекции.Валюта,
																ВалютаРегламентированногоУчета,
																СтруктураКурса.Курс, 1,
																СтруктураКурса.Кратность, 1);
					ЭлементКоллекции.НДС   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ЭлементКоллекции.НДС, ЭлементКоллекции.Валюта,
																ВалютаРегламентированногоУчета,
																СтруктураКурса.Курс, 1,
																СтруктураКурса.Кратность, 1);
				КонецЕсли;
			КонецЦикла;
			
			Если ВидОперации = "РаспределениеЕНВД" Тогда
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "", "Сумма, НДС", ВидОперации);
			ИначеЕсли НЕ ТаблицаРасходов.Колонки.Найти("КлючУникальности") = НЕОПРЕДЕЛЕНО Тогда
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "ВидРасхода, КлючУникальности", "Сумма, НДС", ВидОперации);
			Иначе
				ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "ВидРасхода", "Сумма, НДС", ВидОперации);
			КонецЕсли;
			//ТаблицаРасходов.Свернуть("ВидРасхода", "Сумма, НДС");
			
			ДеревоРасходов.Колонки.Добавить("Графа4", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ДеревоРасходов.Колонки.Добавить("Графа5", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ДеревоРасходов.Колонки.Добавить("Графа6", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ДеревоРасходов.Колонки.Добавить("ДоходЕНВД", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
			ДеревоРасходов.Колонки.Добавить("Описание");
				
			Если ДеревоРасходов.Итог("Сумма") <> 0 Тогда
												
				К4 = КУДиР.Графа4 / ДеревоРасходов.Итог("Сумма");
				К5 = КУДиР.Графа5 / ДеревоРасходов.Итог("Сумма");
				К6 = КУДиР.Графа6 / ДеревоРасходов.Итог("Сумма");
				КЕ = КУДиР.ДоходЕНВД / ДеревоРасходов.Итог("Сумма");
				Для каждого Расход Из ДеревоРасходов Цикл
					
					Если Расход.Сумма > 0 Тогда
						Описание = "Признаны";
					Иначе
						Описание = "Сторнированы";
					КонецЕсли;
					
					Расход.Строки.Колонки.Добавить("Графа4", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
					Расход.Строки.Колонки.Добавить("Графа5", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
					Расход.Строки.Колонки.Добавить("Графа6", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
					Расход.Строки.Колонки.Добавить("ДоходЕНВД", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
					Расход.Строки.Колонки.Добавить("Описание");
					
					Если ВидОперации = "РаспределениеЕНВД" Тогда
						Описание = Описание + " расходы по результатам распределения (УСН/ЕНВД), ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
						Если ВидОперации = "Реализация" Тогда
							Описание = Описание + " расходы на приобретение товаров, ";
						Иначе
							Описание = Описание + " расходы на приобретение ТМЦ, ";
						Конецесли;
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
						Описание = Описание + " транспортно-заготовительные расходы, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
						Описание = Описание + " расходы на услуги сторонних организаций, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
						Описание = Описание + " РБП, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
						Описание = Описание + " расходы на оплату труда, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
						
						Если ДеревоРасходов.Колонки.Найти("КлючУникальности") = НЕОПРЕДЕЛЕНО Тогда
							Описание = Описание + " расходы на уплату налогов (взносов), ";
						Иначе
							Описание = Описание + " расходы на уплату налогов (взносов), счет " + 
							Расход.КлючУникальности.Код + " """ + Расход.КлючУникальности.Наименование + """ , ";
						КонецЕсли;
												
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
						Описание = Описание + " расходы на приобретение НМА, ";
					ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
						Описание = Описание + " расходы на уплату НДС, предъявленного поставщиком, ";
					Иначе
						Описание = Описание + " расходы, ";
					КонецЕсли;
					
					Расход.Описание =  Лев(КУДиР.Содержание + Описание,(СтрДлина(КУДиР.Содержание + Описание)-2)) + ".";
					
					Если Расход.Сумма > 0 Тогда
						Расход.Графа4 = Мин(К4* Расход.Сумма, Расход.Сумма);
						Расход.Графа5 = Мин(К5* Расход.Сумма, Расход.Сумма);
						Расход.Графа6 = Мин(К6* Расход.Сумма, Расход.Сумма);
						Расход.ДоходЕНВД = Мин(КЕ* Расход.Сумма, Расход.Сумма);
					Иначе
						Расход.Графа4 = Макс(К4* Расход.Сумма, Расход.Сумма);
						Расход.Графа5 = Макс(К5* Расход.Сумма, Расход.Сумма);
						Расход.Графа6 = Макс(К6* Расход.Сумма, Расход.Сумма);
						Расход.ДоходЕНВД = Макс(КЕ* Расход.Сумма, Расход.Сумма);
					КонецЕсли;
					
				КонецЦикла;
				Если ДеревоРасходов.Количество() > 0 Тогда
					ДеревоРасходов[0].Графа4 = ДеревоРасходов[0].Графа4 + (КУДиР.Графа4 - ДеревоРасходов.Итог("Графа4"));
					ДеревоРасходов[0].Графа5 = ДеревоРасходов[0].Графа5 + (КУДиР.Графа5 - ДеревоРасходов.Итог("Графа5")); 
					ДеревоРасходов[0].Графа6 = ДеревоРасходов[0].Графа6 + (КУДиР.Графа6 - ДеревоРасходов.Итог("Графа6")); 
					ДеревоРасходов[0].ДоходЕНВД = ДеревоРасходов[0].ДоходЕНВД + (КУДиР.ДоходЕНВД - ДеревоРасходов.Итог("ДоходЕНВД")); 
				КонецЕсли;
			КонецЕсли;
			
			Если (ДеревоРасходов.Количество() = 0) И ((КУДир.Графа4 <> 0) ИЛИ (КУДир.Графа5 <> 0) ИЛИ (КУДир.Графа6 <> 0) ИЛИ (КУДир.Графа7 <> 0)) Тогда
				Запись = ДеревоРасходов.Добавить();
				Запись.Описание = КУДиР.Содержание;
				Запись.Графа4	= КУДиР.Графа4;
				Запись.Графа5	= КУДиР.Графа5;
				Запись.Графа6	= КУДиР.Графа6;
				Запись.Сумма	= КУДиР.Графа7;
				Запись.НДС		= КУДиР.НДС;
				Запись.ДоходЕНВД= КУДиР.ДоходЕНВД;
			КонецЕсли;
			
			ДокументОбъект = СтруктураШапкиДокумента.Объект;
			
			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;
			
			Инд=0;
			Пока Инд < НаборЗаписей.Количество() Цикл
				Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
					НаборЗаписей.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписейРасшифровки = ДокументОбъект.Движения.РасшифровкаКУДиР;
			
			Инд=0;
			Пока Инд < НаборЗаписейРасшифровки.Количество() Цикл
				Если НЕ НаборЗаписейРасшифровки[Инд].ЭтапПроведения < ЭтапПроведения Тогда
					НаборЗаписейРасшифровки.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Расход Из ДеревоРасходов Цикл
				ЗаписьКУДиР = НаборЗаписей.Добавить();
				ЗаписьКУДиР.Период = МоментДокумента;
				ЗаписьКУДиР.Регистратор = ДокументСсылка;
				ЗаписьКУДиР.Активность = Истина;
				ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
				ЗаписьКУДиР.Содержание = Расход.Описание;
				ЗаписьКУДиР.ВидРасхода = Расход.ВидРасхода;
				ЗаписьКУДиР.СтрокаДокумента = НаборЗаписей.Количество();
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
				ЗаписьКУДиР.Графа4 	= Расход.Графа4;
				ЗаписьКУДиР.Графа5 	= Расход.Графа5;
				ЗаписьКУДиР.ДоходЕНВД = Расход.ДоходЕНВД;
				ЗаписьКУДиР.Графа6 	= Расход.Графа6;
				ЗаписьКУДиР.Графа7 	= Расход.Сумма;
				ЗаписьКУДиР.НДС		= Расход.НДС;
				ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
				Если (ЗначениеЗаполнено(Расход.ВидРасхода)) или (ВидОперации = "РаспределениеЕНВД") Тогда
					СформироватьЗаписьРасшифровки(СтруктураШапкиДокумента, НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации);
				КонецЕсли;
			КонецЦикла;
			
			//НаборЗаписей.Записать(Истина);
			//НаборЗаписейРасшифровки.Записать(Истина);
				
		КонецЕсли;
	ИначеЕсли (КУДиР.Графа4 <> 0) 
		ИЛИ (КУДиР.Графа5 <> 0) 
		ИЛИ (КУДиР.Графа6 <> 0)
		ИЛИ (КУДиР.Графа7 <> 0) Тогда
		
		ДокументОбъект = СтруктураШапкиДокумента.Объект;
		
		Если ЭтапПроведения = 0 Тогда
			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;
			ЗаписьКУДиР = НаборЗаписей.Добавить();
			ЗаписьКУДиР.Период = МоментДокумента;
			ЗаписьКУДиР.Регистратор = ДокументСсылка;
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
			ЗаписьКУДиР.Содержание = КУДиР.Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
			ЗаписьКУДиР.Графа4 = КУДиР.Графа4;
			ЗаписьКУДиР.Графа5 = КУДиР.Графа5;
			ЗаписьКУДиР.Графа6 = КУДиР.Графа6;
			ЗаписьКУДиР.Графа7 = КУДиР.Графа7;
			ЗаписьКУДиР.НДС	   = КУДиР.НДС;
			ЗаписьКУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД;
			
		Иначе
			НаборЗаписей = ДокументОбъект.Движения.КнигаУчетаДоходовИРасходов;
			
			Инд=0;
			Пока Инд < НаборЗаписей.Количество() Цикл
				Если НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения Тогда
					НаборЗаписей.Удалить(Инд);
				Иначе
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписьКУДиР = НаборЗаписей.Добавить();
			ЗаписьКУДиР.Период = МоментДокумента;
			ЗаписьКУДиР.Регистратор = ДокументСсылка;
			ЗаписьКУДиР.Активность = Истина;
			ЗаписьКУДиР.Организация = ДокументСсылка.Организация;
			ЗаписьКУДиР.Содержание = КУДиР.Содержание;
			ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(ДокументСсылка);
			ЗаписьКУДиР.Графа4 = КУДиР.Графа4;
			ЗаписьКУДиР.Графа5 = КУДиР.Графа5;
			ЗаписьКУДиР.Графа6 = КУДиР.Графа6;
			ЗаписьКУДиР.Графа7 = КУДиР.Графа7;
			ЗаписьКУДиР.НДС	   = КУДиР.НДС;
			ЗаписьКУДиР.ДоходЕНВД = КУДиР.ДоходЕНВД;
			ЗаписьКУДиР.ЭтапПроведения = ЭтапПроведения;
			
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Процедура СформироватьЗаписьРасшифровки(СтруктураШапкиДокумента, НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации)
	
	Если Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента, 
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
        Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента, 
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
								
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
        Расход.Строки.Свернуть("Организация, ВидРасхода, ЭлементРасхода, СчетУчета, Валюта, ДоговорКонтрагента, 
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
								
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
		Расход.Строки.Свернуть("Организация, ВидРасхода, ДоговорКонтрагента, Партия, 
								|РасчетныйДокумент, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");
								
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
		Расход.Строки.Свернуть("ВидРасхода, ЭлементРасхода, ОтражениеВУСН, РеквизитыДокументаОплаты",
								"Сумма, НДС");
	
	ИначеЕсли Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
		Расход.Строки.Свернуть("ВидРасхода, СчетУчета, ОтражениеВУСН, РеквизитыДокументаОплаты",
								"Сумма, НДС");
								
	КонецЕсли;
	
	Счетчик = 1;
	Для Каждого Строка Из Расход.Строки Цикл
		Запись 					= НаборЗаписейРасшифровки.Добавить();
		Запись.Период 			= ЗаписьКУДиР.Период;
		Запись.Регистратор 		= ЗаписьКУДиР.Регистратор;
		Запись.Активность 		= Истина;
		Запись.Организация 		= ЗаписьКУДиР.Организация;
		Запись.ВидРасхода 		= Строка.ВидРасхода;
		Запись.СтрокаДокумента 	= ЗаписьКУДиР.СтрокаДокумента;
		Запись.ЭтапПроведения 	= ЗаписьКУДиР.ЭтапПроведения;
		Запись.Графа7			= Строка.Сумма;
		Запись.СтрокаРасхода	= Счетчик;
		Счетчик = Счетчик + 1;
		
		Запись.РеквизитыПервичногоДокумента = ЗаписьКУДиР.РеквизитыПервичногоДокумента;
		Запись.РеквизитыДокументаОплаты		= Строка.РеквизитыДокументаОплаты;
		
		Запись.Графа7			= Строка.Сумма;
		
		Описание = "";
		Если Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура Тогда
			Описание = "ТМЦ, учитываемые на счете: """ + Строка.СчетУчета + """ .";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + ПН(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.ДопРасходы Тогда
			Описание = "Доп. расходы по ТМЦ, списанным документом: """ + РеквизитыПервичногоДокумента(Строка.Партия,,, Истина) + """ .";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + ПН(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Услуги Тогда
			Описание = "Услуги сторонних организаций";
			Если ЗначениеЗаполнено(Строка.ЭлементРасхода) Тогда
				Описание = Описание + ": """ + Строка.ЭлементРасхода + """";				
			КонецЕсли;
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Описание = Описание + ", отнесенные на счет: """ + Строка.СчетУчета + """.";				
			Иначе
				Описание = Описание + ".";
			КонецЕсли;
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + ПН(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.РБП Тогда
			Описание = "Статья РБП: """ + Строка.ЭлементРасхода + """, общая сумма:" + Строка.ЭлементРасхода.Сумма + ", период списания с:" + Строка.ЭлементРасхода.ДатаНачалаСписания + " по:" + Строка.ЭлементРасхода.ДатаОкончанияСписания + ".";
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику:""" + ПН(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом:""" + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Зарплата Тогда
			Описание = "Оплата труда сотрудника: """ + Строка.ЭлементРасхода + """.";
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.Налоги Тогда
			Описание = "Налоги и сборы: """ + Строка.СчетУчета.Наименование + " (счет учета " + Строка.СчетУчета + ")"".";
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НМА Тогда
			Описание = "НМА: """ + Строка.ЭлементРасхода + """.";
			
		ИначеЕсли Строка.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС Тогда
			Описание = "НДС, предъявленный поставщиком";
			Если ЗначениеЗаполнено(Строка.СчетУчета) Тогда
				Если Строка.СчетУчета.Количественный Тогда
					Описание = Описание + " по приобретенным ТМЦ, учитываемым на счете: """ + Строка.СчетУчета + """.";
				Иначе
					Описание = Описание + " по услугам, отнесенным на счет: """ + Строка.СчетУчета + """.";
				КонецЕсли;				
			Иначе
				Описание = Описание + ".";
			КонецЕсли;
			
			Если ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Описание = Описание + " Оплачено поставщику: """ + ПН(Строка.ДоговорКонтрагента.Владелец) + """.";
			ИначеЕсли ТипЗнч(Строка.ДоговорКонтрагента) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				Если ТипЗнч(Строка.РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
					Описание = Описание + " Оплачено подотчетным лицом: """ + Строка.ДоговорКонтрагента + """.";
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (НЕ ЗначениеЗаполнено(Расход.ВидРасхода)) И (ВидОперации = "РаспределениеЕНВД") Тогда
			Если Строка.РасчетныйДокумент = СтруктураШапкиДокумента.Ссылка Тогда
				Описание = "Скорректированы результаты распределения предыдущих отчетных периодов.";
			Иначе
				Описание = "Распределены расходы, зарегистрированные документом " + Строка.РасчетныйДокумент;
				Запись.РеквизитыДокументаОплаты	= Строка.РасчетныйДокумент;
			КонецЕсли;
			
		КонецЕсли;
		
		Запись.Содержание = Описание;
		
		Если СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ВключатьВСтоимость И Строка.НДС <> 0 Тогда
			ЗаписьНДС = НаборЗаписейРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьНДС, Запись);
			ЗаписьНДС.ВидРасхода = Перечисления.ВидыРасходовУСН.НДС;
			ЗаписьНДС.Содержание = "Расходы на уплату НДС, предъявленного поставщиком.";
			ЗаписьНДС.СтрокаРасхода	= Счетчик;
			Счетчик = Счетчик + 1;
			ЗаписьНДС.Графа7 = Строка.НДС;
			Запись.Графа7 = Запись.Графа7 - Строка.НДС;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Определяет по виду документов вид движения и вызывает основную процедуру
//
Процедура ДвиженияУСН(ДокументОбъект, РежимПроведения = Неопределено, СтруктураДопПараметров = Неопределено) Экспорт
	
	ДокументСсылка = ДокументОбъект.Ссылка;
	
	//Получение реквизитов шапки
	СтруктураШапкиДокумента = Новый Структура("Ссылка, Объект, ВидДокумента, Дата,  Организация,ДатаОплаты,Оплачено,ОтражатьВНалоговомУчете,ОтражатьВУправленческомУчете", ДокументСсылка, ДокументОбъект, ДокументСсылка.Метаданные().Имя, ДокументСсылка.Дата);

	МетаданныеДокумента = ДокументСсылка.Метаданные().Реквизиты;
	Для Каждого Реквизит из СтруктураШапкиДокумента Цикл
		Если МетаданныеДокумента.найти(Реквизит.Ключ)=Неопределено тогда
			Продолжить;
		КонецЕсли;
		СтруктураШапкиДокумента.Вставить(Реквизит.Ключ,ДокументСсылка[Реквизит.Ключ]);
	КонецЦикла;
	
	Если НЕ НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	//Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента["ДатаОплаты"]) тогда
		СтруктураШапкиДокумента.Вставить("ДатаОплаты",СтруктураШапкиДокумента.Дата);
	Иначе
		//Особый контроль для документов оплаты
		СтруктураШапкиДокумента.Вставить("ДатаОплаты",КонецДня(СтруктураШапкиДокумента["ДатаОплаты"]));
		Если СтруктураШапкиДокумента.ВидДокумента = "ПриходныйКассовыйОрдер" или
			СтруктураШапкиДокумента.ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		//Оплачено или не отражается в упр. учете
			Если СтруктураШапкиДокумента.Оплачено=Истина или СтруктураШапкиДокумента.ОтраженоВОперУчете=Ложь Тогда
				//Формируются движения по регламентированному учету
			Иначе
				//Документ по регламентированному учету не проводится			
				Возврат;
			КонецЕсли; 
		ИначеЕсли СтруктураШапкиДокумента.ВидДокумента = "ПоступлениеНаРасчетныйСчет" или
			СтруктураШапкиДокумента.ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
			
			СтруктураШапкиДокумента.Вставить("Оплачено", Истина);
			//Формируются движения по регламентированному учету	
		Иначе
			Если СтруктураШапкиДокумента.Оплачено=Ложь тогда
				//Документ по регламентированному учету не проводится			
				Возврат;
			КонецЕсли;
		КонецЕсли; 
	Конецесли;
	
	//ПроводитьПоПартиям = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(СтруктураШапкиДокумента.Дата).СписыватьПартииПриПроведенииДокументов;
	ПроводитьПоПартиям = Истина;
	СтруктураШапкиДокумента.Вставить("ПроводитьПоПартиям",ПроводитьПоПартиям);
	Отказ = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация);
	ВыделятьНДСУСН = ?(Отказ, Истина, УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
	
	Если НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата) Тогда
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",Ложь);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",Истина);
	Иначе
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН",Истина);
		СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы",Ложь);
	КонецЕсли;
		
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Оплата", СтруктураШапкиДокумента,1 , СтруктураДопПараметров);
		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента,2);
		
	ИначеЕсли 
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДенежныхДокументов") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВыдачаДенежныхДокументов") Тогда
		
		ОтразитьВУСН(ДокументСсылка, ,СтруктураШапкиДокумента, , СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаНМА") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОказаниеУслуг") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаОС") ИЛИ 
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияУслугПоПереработке") ИЛИ 
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")  Тогда
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") И ДокументСсылка.РучнаяНастройка_УСН Тогда
			ОтразитьВУСН(ДокументСсылка, "ПрочееДДС", СтруктураШапкиДокумента, , );
		Иначе
			ОтразитьВУСН(ДокументСсылка, "РеализацияУслуг", СтруктураШапкиДокумента, , СтруктураДопПараметров);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "ВозвратСРеализации", СтруктураШапкиДокумента, , СтруктураДопПараметров);
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда 
		
		ОтразитьВУСН(ДокументСсылка, "ВозвратПоставщику", СтруктураШапкиДокумента, , СтруктураДопПараметров);
		
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтражениеЗарплатыВРеглУчете")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций")
		ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РасчетЕСН")) И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "НачислениеЗП", СтруктураШапкиДокумента, , СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Если НЕ ДокументСсылка.УдержатьВознаграждение Тогда
			Если СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоПриобретению);
				ОтразитьВУСН(ДокументСсылка, "УслугаКомиссионера", СтруктураШапкиДокумента,1, СтруктураДопПараметров);
			КонецЕсли;
			СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоРеализации);
			ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента, 2, СтруктураДопПараметров);
		Иначе
			ОтразитьВУСН(ДокументСсылка, "ЗачетВознагражденияКомиссионера", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
			СтруктураДопПараметров.Вставить("ТаблицаРасчетов", СтруктураДопПараметров.ТаблицаРасчетовПоРеализации);
			Если ВыделятьНДСУСН И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
				ОтразитьВУСН(ДокументСсылка, "ЗачетВознагражденияКомиссионераНДС", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
				ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента,2,СтруктураДопПараметров);
			Иначе
				ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
			КонецЕсли;			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		
		ОтразитьВУСН(ДокументСсылка, "РеализацияКомиссионером", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Розница", СтруктураШапкиДокумента,,СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаТоваров") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		Если НЕ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
			
			ОтразитьВУСН(ДокументСсылка, "ВПереработку", СтруктураШапкиДокумента,,СтруктураДопПараметров);
			
		КонецЕсли;
				
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеИзПереработки") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "УслугаПоПереработке", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
		
		СтруктураДопПараметров.Вставить("ТаблицаТМЦ", СтруктураДопПараметров.ТаблицаМатериалов);
		ОтразитьВУСН(ДокументСсылка, "ИзПереработки", СтруктураШапкиДокумента , 2, СтруктураДопПараметров);
		
		СтруктураДопПараметров.Вставить("ТаблицаТМЦ", СтруктураДопПараметров.ТаблицаВозвращенныхМатериалов);
		ОтразитьВУСН(ДокументСсылка, "ВозвратИзПереработки", СтруктураШапкиДокумента , 3, СтруктураДопПараметров);
		
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеНМА")) И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		Если НЕ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			
			ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента, 1, СтруктураДопПараметров);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если (ДокументСсылка.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
			И (НЕ ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
			
			ОтразитьВУСН(ДокументСсылка, "Реализация", СтруктураШапкиДокумента,,СтруктураДопПараметров);
			
		ИначеЕсли СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
			
			ОтразитьВУСН(ДокументСсылка, "НаРеализацию", СтруктураШапкиДокумента,,СтруктураДопПараметров);
			
		КонецЕсли;
			
	ИначеЕсли (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СписаниеТоваров") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПередачаМатериаловВЭксплуатацию") ИЛИ
		ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ТребованиеНакладная")) И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Списание", СтруктураШапкиДокумента,,СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Списание", СтруктураШапкиДокумента, 1,СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПеремещениеТоваров") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Перемещение", СтруктураШапкиДокумента,,СтруктураДопПараметров);
		
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КомплектацияНоменклатуры") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		ОтразитьВУСН(ДокументСсылка, "Комплектация", СтруктураШапкиДокумента,,СтруктураДопПараметров);
 	
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаДолга") И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН Тогда
		
		Если ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
		
			ОтразитьВУСН(ДокументСсылка, "ПереносЗадолженности", СтруктураШапкиДокумента,,СтруктураДопПараметров);
			
		ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда	
			
			ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаДебитор", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
			ОтразитьВУСН(ДокументСсылка, "ПроведениеВзаимозачетаКредитор", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
			
		ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда		

			ОтразитьВУСН(ДокументСсылка, "СписаниеДебиторскойЗадолженности", СтруктураШапкиДокумента,0,СтруктураДопПараметров);
			ОтразитьВУСН(ДокументСсылка, "СписаниеКредиторскойЗадолженности", СтруктураШапкиДокумента,1,СтруктураДопПараметров);
			
		КонецЕсли;

	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановитьБлокировкиПоТаблицеФильтров(ИмяБлокируемойТаблицы, ТаблицаФильтров, ТаблицаБлокировок = Неопределено, Организация)

	//Установим управляемые блокировки
	Если глЗначениеПеременной("ИспользоватьУправляемыеБлокировки") Тогда
		
		Если ТаблицаФильтров.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("ТипТаблицы, ИмяТаблицы", "РегистрНакопления", ИмяБлокируемойТаблицы);
		
		ЗначенияБлокировки = Новый Соответствие;
		ОписаниеИсточника = Новый Соответствие;
		ВремТаблицаФильтров = ТаблицаФильтров.Скопировать();
		
		ЗначенияБлокировки.Вставить("Организация", Организация);
				
		Если ТаблицаБлокировок = Неопределено Тогда
			//Если не передана таблица определим ведущее измерение
			ВедущееИзмерение = Неопределено;
			Для Каждого Фильтр Из ТаблицаФильтров Цикл
				Если Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
					Если ВедущееИзмерение = Неопределено ИЛИ Фильтр.ЗначениеПоля.Количество() > ВедущееИзмерение.ЗначениеПоля.Количество() Тогда
						ВедущееИзмерение = Фильтр;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ТаблицаБлокировок = Новый ТаблицаЗначений;
			Если (НЕ ВедущееИзмерение = Неопределено) Тогда
				ТаблицаБлокировок.Колонки.Добавить(ВедущееИзмерение.ИмяПоля);
				Для стр = 1 По ВедущееИзмерение.ЗначениеПоля.Количество() Цикл
					Если ЗначениеЗаполнено(ВедущееИзмерение.ЗначениеПоля[стр-1]) Тогда
						СтрокаТаблицы = ТаблицаБлокировок.Добавить();
						СтрокаТаблицы[ВедущееИзмерение.ИмяПоля] = ВедущееИзмерение.ЗначениеПоля[стр-1];				
					КонецЕсли;
				КонецЦикла;
				Если ТаблицаБлокировок.Количество() > 0 Тогда
					ОписаниеИсточника.Вставить(ВедущееИзмерение.ИмяПоля, ВедущееИзмерение.ИмяПоля);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Для Каждого Колонка Из ТаблицаБлокировок.Колонки Цикл
				ОписаниеИсточника.Вставить(Колонка.Имя, Колонка.Имя);
			КонецЦикла;
		КонецЕсли;
		
		//Определим значения блокировок и оставим только те записи, которые надо рекурсивно перебирать
		КоличествоПоИндексу = ВремТаблицаФильтров.Количество()-1;
		Для стр = 0 По КоличествоПоИндексу Цикл
			Фильтр = ВремТаблицаФильтров[КоличествоПоИндексу - стр];
			Если НЕ Тип("Массив") = ТипЗнч(Фильтр.ЗначениеПоля) Тогда
				Если ЗначениеЗаполнено(Фильтр.ЗначениеПоля) Тогда
					ЗначенияБлокировки.Вставить(Фильтр.ИмяПоля, Фильтр.ЗначениеПоля);
				КонецЕсли;
				ВремТаблицаФильтров.Удалить(Фильтр);
			ИначеЕсли НЕ ТаблицаБлокировок.Колонки.Найти(Фильтр.ИмяПоля) = Неопределено Тогда
				ВремТаблицаФильтров.Удалить(Фильтр);
			ИначеЕсли Фильтр.ЗначениеПоля.Количество() = 1 Тогда
				Если ЗначениеЗаполнено(Фильтр.ЗначениеПоля[0]) Тогда
					ЗначенияБлокировки.Вставить(Фильтр.ИмяПоля, Фильтр.ЗначениеПоля[0]);
				КонецЕсли;
				ВремТаблицаФильтров.Удалить(Фильтр);
			ИначеЕсли Фильтр.ЗначениеПоля.Количество() = 0 Тогда
				ВремТаблицаФильтров.Удалить(Фильтр);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураПараметров.Вставить("ИсточникДанных", ТаблицаБлокировок);
		
		Если ВремТаблицаФильтров.Количество() = 0 Тогда
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		Иначе
			УстановитьБлокировкуРекурсивно(0, 0, ВремТаблицаФильтров, СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьБлокировкуРекурсивно(н_стр, н_эл, ТаблицаФильтров, СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника)
	
	Для эл = н_эл По ТаблицаФильтров[н_стр].ЗначениеПоля.Количество()-1 Цикл
		Если НЕ ЗначениеЗаполнено(ТаблицаФильтров[н_стр].ЗначениеПоля[эл]) Тогда
			Продолжить;				
		КонецЕсли;
		ЗначенияБлокировки.Вставить(ТаблицаФильтров[н_стр].ИмяПоля, ТаблицаФильтров[н_стр].ЗначениеПоля[эл]);
		Если н_стр = ТаблицаФильтров.Количество()-1 Тогда
			ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		Иначе
			УстановитьБлокировкуРекурсивно(н_стр+1, 0, ТаблицаФильтров, СтруктураПараметров, ЗначенияБлокировки, ОписаниеИсточника);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

///////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ЕНВД И УСН

Функция ОтноситсяКДеятельностиЕНВД(Счет) Экспорт

	Если глЗначениеПеременной("глСчетаДоходовИРасходовЕНВД").Получить(Счет)=неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции // ОтноситсяКДеятельностиЕНВД()

Функция МассивСчетовВыручкиЕНВД() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счет90_01", Планысчетов.Хозрасчетный.Выручка);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка
	|
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90_01)";
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");

КонецФункции

Функция МассивСчетовРасходовЕНВД() Экспорт

	Запрос = Новый Запрос;
	
	Массив = Новый Массив;
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажу);
	Массив.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
	Запрос.УстановитьПараметр("Счет90_02", Массив);

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО СчетаДоходовИРасходовЕНВД.Счет = Хозрасчетный.Ссылка
	|
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90_02)";
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();

	Возврат ТаблицаСчетов.ВыгрузитьКолонку("Счет");

КонецФункции

//Определяет применяется ли упрощенная система налогообложения
//
Функция ПрименениеУСН(Организация, Знач Дата) Экспорт

	//УСН8
    ЗначениеПоУмолчанию = (Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.УпрощеннаяСистемаНалогообложения);
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат ЗначениеПоУмолчанию;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Ложь, Организация,,Ложь);
	Если УчетнаяПолитика.Количество() = 0 Тогда
		Возврат ЗначениеПоУмолчанию;
	Иначе
		Возврат (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная);
	КонецЕсли;

КонецФункции

//Определяет применяется ли упрощенная система налогообложения
//
Функция ПрименениеУСНДоходы(Организация, Знач Дата, Отказ = Ложь) Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДата();
	КонецЕсли;

	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, Отказ, Организация,,Ложь);
	
	Если Отказ = Истина Тогда
		Возврат Ложь;
	КонецЕсли;

	
	Если НЕ ПараметрыУчетнойПолитики.УСН Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыУчетнойПолитики.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ФОРМАМИ УСН

//Устанавливает видимость реквизитов формы относящихся к УСН
//
Процедура УстановитьВидимостьРеквизитовУСН(РеквизитыФормы, Организация, Дата) Экспорт

	УСН             = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УСНДоходы       = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Предприниматель = ?(ЗначениеЗаполнено(Организация), Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо, Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя);
	
	Если УСН Тогда
		Если УСНДоходы Тогда
			ВидимостьУСН = Ложь;
		Иначе
			ВидимостьУСН = Истина;
		КонецЕсли;
	Иначе
		ВидимостьУСН = Ложь;
	КонецЕсли;
	
	ВидимостьНУ  = НЕ УСН И НЕ Предприниматель;

	Если НЕ РеквизитыФормы.Найти("ОтражатьВНалоговомУчете") = Неопределено Тогда

		Если НЕ РеквизитыФормы.Найти("ОтражатьВНалоговомУчете").Значение Тогда

			ВидимостьУСН = Ложь;
			ВидимостьНУ  = Ложь;

		КонецЕсли;

	КонецЕсли;

	Для Каждого Элемент Из РеквизитыФормы Цикл

		Если Найти(Элемент.Имя, "УСН") > 0 Тогда
			Элемент.Видимость = ВидимостьУСН;

		ИначеЕсли Найти(Элемент.Имя, "НУ") > 0 Тогда
			Элемент.Видимость = ВидимостьНУ;

		ИначеЕсли Тип(Элемент) = Тип("ТабличноеПоле") Тогда

			Для Каждого Колонка Из Элемент.Колонки Цикл

				Если Найти(Колонка.Имя, "УСН") > 0 Тогда
					Колонка.Видимость         = ВидимостьУСН;
					Колонка.ИзменятьВидимость = ВидимостьУСН;

				ИначеЕсли Найти(Колонка.Имя, "НУ") > 0 Тогда
					Колонка.Видимость         = ВидимостьНУ;
					Колонка.ИзменятьВидимость = ВидимостьНУ;

				КонецЕсли;

			КонецЦикла;

		ИначеЕсли Тип(Элемент) = Тип("Панель") Тогда

			Для Каждого Страница Из Элемент.Страницы Цикл

				Если Найти(Страница.Имя, "УСН") > 0 Тогда
					Страница.Видимость = ВидимостьУСН;

				ИначеЕсли Найти(Страница.Имя, "НУ") > 0 Тогда
					Страница.Видимость = ВидимостьНУ;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла

КонецПроцедуры

Функция ВидимостьКнопкиКУДиР(ДокументОбъект) Экспорт
	
	Если НЕ НалоговыйУчетУСН.ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата) Тогда
		Возврат Ложь;
	Конецесли;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	ОтражатьВНалоговомУчете = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ОтражатьВНалоговомУчете", МетаданныеДокумента), ДокументОбъект.ОтражатьВНалоговомУчете, Истина);
	Если НЕ ОтражатьВНалоговомУчете Тогда
		Возврат Ложь;
	Конецесли;
			
	Если (НалоговыйУчетУСН.ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата)) Тогда
		Возврат Истина;
	Иначе
		Параметры = Новый Структура("Ссылка, ВидОперации, ОтражатьВНалоговомУчетеУСНДоходы", ДокументОбъект, ДокументОбъект.ВидОперации, Ложь);
		
		ВыручкаСНТТ = ?(ОбщегоНазначения.ЕстьРеквизитДокумента("ВыручкаСНТТ", МетаданныеДокумента), ДокументОбъект.ВыручкаСНТТ, Ложь);
		Параметры.Вставить("ВыручкаСНТТ", ВыручкаСНТТ);
		
		ВидОперацииДДС = НалоговыйУчетУСН.ВидОперацииДДС(Параметры);
		
		Если ВидОперацииДДС = "ПрочееДДС" Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции


