// Формируется список счетов учета номенклатуры, стоимость которой
// необходимо корректировать.
Функция СписокСчетовУчетаНоменклатуры(Организация = Неопределено, Период = Неопределено) Экспорт
	
	ИмяПланаСчетов = "Хозрасчетный";
		
	СписокСчетов= Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ОборудованиеКУстановке);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПриобретениеОбъектовОсновныхСредств);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СырьеИМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПокупныеПолуфабрикатыИКомплектующие);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Топливо);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Тара);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ЗапасныеЧасти);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПрочиеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].МатериалыПереданныеВПереработку);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СтроительныеМатериалы);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ИнвентарьИХозяйственныеПринадлежности);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].СпецоснасткаИСпецодеждаНаСкладе);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Полуфабрикаты);
	Если (ЗначениеЗаполнено(Организация)) И (ЗначениеЗаполнено(Период)) И (ИмяПланаСчетов = "Хозрасчетный") Тогда
		
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Период, УчетнаяПолитикаНеЗадана, Организация);
		
		УчетВПродажныхЦенах = Ложь;
		Если УчетнаяПолитика.Количество() > 0 Тогда	
			Если (УчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
				УчетВПродажныхЦенах = Истина;
			КонецЕсли;
		КонецЕсли;
		Если УчетВПродажныхЦенах Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.Товары);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Хозрасчетный.Ссылка
			|ИЗ
			|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
			|ГДЕ
			|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет)";
			Счета = Запрос.Выполнить().Выгрузить();
			Для Каждого Счет Из Счета Цикл
				Если (НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.Товары) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ) И
					(НЕ Счет.Ссылка = ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости) Тогда
                    
					СписокСчетов.Добавить(Счет.Ссылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
		КонецЕсли;
	Иначе
		СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].Товары);
	КонецЕсли;
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ГотоваяПродукция);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ТоварыОтгруженные);
	СписокСчетов.Добавить(ПланыСчетов[ИмяПланаСчетов].ПроизводствоИзДавальческогоСырья);
	
	Возврат СписокСчетов;   
	
КонецФункции // МассивСчетовУчетаНоменклатуры()
// Формируется список счетов на которых ведутся расчеты с контрагентами.
Функция ПолучитьСчетаРасчетов()

	СписокСчетов= Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами);
	
	Возврат СписокСчетов;

КонецФункции // ПолучитьСчетаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, не зависящие от структуры данных конфигурации

Процедура ОцифроватьСостояния( Таб, СоотвПараметровСостояний1,ПрефиксПараметровНовогоСостояния )  

	Если Таб.Количество()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	Массив = Новый Массив;
	Массив.Добавить(Тип("NULL"));
	ОписаниеТиповС = Новый ОписаниеТипов(Таб.Колонки[2].ТипЗначения.Типы(), , ,);
	//Для того чтобы поместить таблицу значений во временную таблицу, необходимо чтобы у всех
	//колонок был тип, если его нет то необходимо установить путем создания новой ТЗ
	КолКолонок = Таб.Колонки.Количество();
	Для инд = 1 по КолКолонок Цикл
		ОбратныйИндекс = КолКолонок - инд; 
		Если Таб.Колонки[ОбратныйИндекс].ТипЗначения.типы().количество()=0 Тогда
			ИмяКолонки = Таб.Колонки[ОбратныйИндекс].Имя;
			Таб.Колонки.Добавить("_"+ИмяКолонки,ОписаниеТиповС,"_"+ИмяКолонки);
			Таб.Колонки.Удалить(ИмяКолонки);
			Таб.Колонки["_"+ИмяКолонки].имя=ИмяКолонки;
			Таб.Колонки[ИмяКолонки].заголовок=ИмяКолонки;
		КонецЕсли;
	КонецЦикла;
			
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВнешнийИсточник.Счет, 
		|	ВнешнийИсточник.Счет" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Подразделение, 
		|	ВнешнийИсточник.Подразделение" + ПрефиксПараметровНовогоСостояния + ",
		|	ВнешнийИсточник.Субконто1, 
		|	ВнешнийИсточник.Субконто2, 
		|	ВнешнийИсточник.Субконто3, 
		|	ВнешнийИсточник.Субконто1" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Субконто2" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Субконто3" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВнешнийИсточник.Количество, 
		|	ВнешнийИсточник.Стоимость, 
		|	ВнешнийИсточник.СтоимостьНУ,
		|	ВнешнийИсточник.СтоимостьПР,
		|	ВнешнийИсточник.СтоимостьВР
		|ПОМЕСТИТЬ ИсхТаб 
		|Из &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Таб );
	Запрос.Выполнить();
	
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсхТаб.Счет КАК Счет,
		|	ИсхТаб.Подразделение КАК Подразделение,
		|	ИсхТаб.Субконто1 КАК Субконто1,
		|	ИсхТаб.Субконто2 КАК Субконто2,
		|	ИсхТаб.Субконто3 КАК Субконто3
		|ИЗ
		|	ИсхТаб КАК ИсхТаб
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КорИсхТаб.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Подразделение" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Субконто1" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Субконто2" + ПрефиксПараметровНовогоСостояния + ",
		|	КорИсхТаб.Субконто3" + ПрефиксПараметровНовогоСостояния + "
		|ИЗ
		|	ИсхТаб КАК КорИсхТаб
		|УПОРЯДОЧИТЬ ПО
		|	ИсхТаб.Счет,
		|	ИсхТаб.Подразделение,
		|	ИсхТаб.Субконто1,
		|	ИсхТаб.Субконто2,
		|	ИсхТаб.Субконто3";
		
	ТаблицаСоответствийСостояний = Запрос.Выполнить().Выгрузить();
		
	ТаблицаСоответствийСостояний.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10,0));
	ТекИндекс = 0;
	Для каждого СтрокаСоответствия Из ТаблицаСоответствийСостояний Цикл
	
		СтрокаСоответствия.ИндексСтроки = ТекИндекс;
		
	// Переносим в соответствие
		СтрСост = Новый Структура;
		СтрСост.Вставить("Счет", СтрокаСоответствия.Счет);
		СтрСост.Вставить("Подразделение", СтрокаСоответствия.Подразделение);
		СтрСост.Вставить("Субконто1", СтрокаСоответствия.Субконто1);
		СтрСост.Вставить("Субконто2", СтрокаСоответствия.Субконто2);
		СтрСост.Вставить("Субконто3", СтрокаСоответствия.Субконто3);
		СоотвПараметровСостояний1.Вставить(ТекИндекс, СтрСост);
		
		ТекИндекс = ТекИндекс + 1;

	КонецЦикла; 
	
	Запрос.Текст = 
		"ВЫБРАТЬ *  
		|ПОМЕСТИТЬ ТаблицаСоответствийИсточник 
		|Из &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаСоответствийСостояний );
	Запрос.Выполнить();

	Запрос.Текст = 
		"ВЫБРАТЬ *  
		|ПОМЕСТИТЬ ТаблицаСоответствийПриемник 
		|Из ТаблицаСоответствийИсточник";
	Запрос.Выполнить();

	// "Свернем" встречные перемещения: вместо двух перемещений типа 1->2 и 2->1 оставим одно 
	// с количеством |Кол12 - Кол21| в направлении большего перемещения.
	
	// Проведем следующее преобразование: повернем пары так, чтобы количество перемещения стало положительным

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсхТаб.Счет, 
		|	ИсхТаб.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб.Подразделение, 
		|	ИсхТаб.Подразделение" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб.Субконто1, 
		|	ИсхТаб.Субконто2, 
		|	ИсхТаб.Субконто3, 
		|	ИсхТаб.Субконто1" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб.Субконто2" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб.Субконто3" + ПрефиксПараметровНовогоСостояния + ", 
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.Количество Иначе ИсхТаб.Количество Конец КАК Количество,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.Стоимость Иначе ИсхТаб.Стоимость Конец КАК Стоимость,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.СтоимостьНУ Иначе ИсхТаб.СтоимостьНУ Конец КАК СтоимостьНУ,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.СтоимостьПР Иначе ИсхТаб.СтоимостьПР Конец КАК СтоимостьПР,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда -ИсхТаб.СтоимостьВР Иначе ИсхТаб.СтоимостьВР Конец КАК СтоимостьВР,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда ТаблицаСоответствийПриемник.ИндексСтроки Иначе ТаблицаСоответствийИсточник.ИндексСтроки Конец КАК Источник,
		|	ВЫБОР КОГДА ИсхТаб.Количество<0 Тогда ТаблицаСоответствийИсточник.ИндексСтроки Иначе ТаблицаСоответствийПриемник.ИндексСтроки Конец КАК Приемник
		|ПОМЕСТИТЬ КопияИсхТаб
		|ИЗ ИсхТаб КАК ИсхТаб
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствийИсточник
		|	ПО 
		|		ИсхТаб.Счет = ТаблицаСоответствийИсточник.Счет И
		|		ИсхТаб.Подразделение = ТаблицаСоответствийИсточник.Подразделение И
		|		ИсхТаб.Субконто1 = ТаблицаСоответствийИсточник.Субконто1 И
		|		ИсхТаб.Субконто2 = ТаблицаСоответствийИсточник.Субконто2 И
		|		ИсхТаб.Субконто3 = ТаблицаСоответствийИсточник.Субконто3
		|ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствийПриемник
		|	ПО 
		|		ИсхТаб.Счет" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Счет И
		|		ИсхТаб.Подразделение" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Подразделение И
		|		ИсхТаб.Субконто1" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Субконто1 И
		|		ИсхТаб.Субконто2" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Субконто2 И
		|		ИсхТаб.Субконто3" + ПрефиксПараметровНовогоСостояния + " = ТаблицаСоответствийПриемник.Субконто3
		|";
	Запрос.Выполнить();
		
	// "Свертка" встречных перемещений и удалим обнулившиеся строки
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсхТаб1.Счет, 
		|	ИсхТаб1.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб1.Подразделение, 
		|	ИсхТаб1.Подразделение" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб1.Субконто1, 
		|	ИсхТаб1.Субконто2, 
		|	ИсхТаб1.Субконто3, 
		|	ИсхТаб1.Субконто1" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб1.Субконто2" + ПрефиксПараметровНовогоСостояния + ", 
		|	ИсхТаб1.Субконто3" + ПрефиксПараметровНовогоСостояния + ", 
		|	Выбор Когда ИсхТаб1.Количество>=ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.Количество-ЕСТЬNULL(ИсхТаб2.Количество, 0) Иначе 0 Конец КАК Количество,
		|	Выбор Когда ИсхТаб1.Количество>=ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.Стоимость-ЕСТЬNULL(ИсхТаб2.Стоимость, 0) Иначе 0 Конец КАК Стоимость,
		|	Выбор Когда ИсхТаб1.Количество>=ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.СтоимостьНУ-ЕСТЬNULL(ИсхТаб2.СтоимостьНУ, 0) Иначе 0 Конец КАК СтоимостьНУ,
		|	Выбор Когда ИсхТаб1.Количество>=ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.СтоимостьПР-ЕСТЬNULL(ИсхТаб2.СтоимостьПР, 0) Иначе 0 Конец КАК СтоимостьПР,
		|	Выбор Когда ИсхТаб1.Количество>=ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.СтоимостьВР-ЕСТЬNULL(ИсхТаб2.СтоимостьВР, 0) Иначе 0 Конец КАК СтоимостьВР,
		|	ИсхТаб1.Источник КАК Источник,
		|	ИсхТаб1.Приемник КАК Приемник
		|
		|ИЗ КопияИсхТаб КАК ИсхТаб1
		|ЛЕВОЕ СОЕДИНЕНИЕ КопияИсхТаб КАК ИсхТаб2
		|	ПО 
		|		ИсхТаб1.Источник = ИсхТаб2.Приемник И
		|		ИсхТаб1.Приемник = ИсхТаб2.Источник 
		|ГДЕ (Выбор 
		|		Когда ИсхТаб1.Количество>ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.Количество-ЕСТЬNULL(ИсхТаб2.Количество, 0)
		|		Когда ИсхТаб1.Количество=ЕСТЬNULL(ИсхТаб2.Количество, 0) Тогда ИсхТаб1.Стоимость-ЕСТЬNULL(ИсхТаб2.Стоимость, 0)
		|		Иначе 0 Конец)>0
		|УПОРЯДОЧИТЬ ПО
		|	ИсхТаб1.Счет, 
		|	ИсхТаб1.Счет" + ПрефиксПараметровНовогоСостояния + ",
		|	ИсхТаб1.Подразделение, 
		|	ИсхТаб1.Подразделение" + ПрефиксПараметровНовогоСостояния;
	
	Таб = Запрос.Выполнить().Выгрузить();
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Функция ПолучитьСписокВершин( Таб, Приемники )  
	
	Если Таб.Количество()=0 Тогда
		Возврат новый массив;
	КонецЕсли;
	
	массивПриемников = новый массив;
	Для каждого Строка Из Приемники Цикл
		массивПриемников.Добавить(Строка.ключ);
	КонецЦикла;
		
	Запрос = Новый Запрос;
			
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВнешнийИсточник.Источник КАК Источник
		|ПОМЕСТИТЬ ВРтаблица
		|ИЗ
		|	&ВнешнийИсточник КАК ВнешнийИсточник
		|ГДЕ
		|	ВнешнийИсточник.Количество <> 0
		|	И (НЕ ВнешнийИсточник.Источник В (&МассивПриемников))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВнешнийИсточник.Источник КАК Источник
		|ИЗ
		|	ВРтаблица КАК ВнешнийИсточник
		|
		|УПОРЯДОЧИТЬ ПО
		|	Источник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", Таб );
	Запрос.УстановитьПараметр("МассивПриемников", массивПриемников);
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	Возврат Таб.ВыгрузитьКолонку("Источник");
	
КонецФункции

// СписаниеПоСредней
//
// Параметры:
//	ТаблицаТоваров - содержит товары, списание которых необходимо усреднить. 
//	Каждая колонка соответствует одному из постоянных параметров товара, не изменяемых в ходе перемещений. 
//	По остальным параметрам выполняется усреднение
//
Процедура РассчитатьСписаниеПоСредней(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров) Экспорт
	
	// Основное допущение данного метода - игнорирование замкнутой цепочки перемещений между состояниями ("холостого хода"):
	// считаем, что если товар в ходе перемещений снова попал в исходное состояние, то он как бы не перемещался, 
	// это движение можно исключить из общего оборота, а стоимость движения принять равной 0. Цепочки перемещений 
	// таким образом размыкаются, что позволяет рассчитать стоимости движений, начиная от конца цепочки.
	
	// Получим все состояния для товара, которые он принимал за период в виде таблицы
	//	---------------------------------------------------------------------------------------------------------------------------------
	// |Состояние 1 (Источник) |Состояние 2 (Приемник)| Перемещаемое количество| Стоимость (нужна для упрощения последующей корректировки)
	
	// Последовательно обходя состояния, выделим контуры (пути, начала и концы которых совпадают)
	// В каждом контуре найдем количество, которое совершило перемещение по замкнутому кругу ("холостой ход"), 
	// и уменьшим каждое движение из контура на данное количество.
	// Будем выбирать другие состояния для получения всех контуров и применим к ним то же правило.
	
	// После нахождения контуров в графах перемещений и сокращения "холостого хода" получаем совокупность разомкнутых 
	// путей перехода товара между состояниями (остовные деревья). Внутри каждой такой цепочки выполняем расчет.
	// Важно:  в общем случае результат сокращения зависит от последовательности обхода контуров, поэтому
	// для повторяемости результата она должна подчиняться какому-либо правилу (например, чтобы сводные перемещения
	// упорядочивались по возрастанию даты первого перемещения)
	
	// Получим таблицу перемещений, содержащую суммарные перемещения между состояниями
	
	// Получаемая таблица должна содержать колонку "Количество", "Стоимость" и колонки, описывающие старое и новое состояние,
	// причем имена колонок нового состояния заканчиваются на ПрефиксПараметровНовогоСостояния
	ПрефиксПараметровНовогоСостояния="_НовоеСостояние";
	
	Таб = ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон, ПрефиксПараметровНовогоСостояния, СтруктураДопПараметров);
	
	
	//1. Приведем переданную таблицу перемещений к требуемому виду:
	// Таблица имеет колонки Источник, Приемник, Количество
	// строка таблицы соответствует перемещению из состояния 1 в состояние 2, перемещения не повторяются.
	
	// Количество колонок без ПрефиксПараметровНовогоСостояния должно быть равно количеству колонок с ПрефиксПараметровНовогоСостояния
	// Сформируем также структуру, которая содержит параметры состояния товара
	СтруктураСостояния = Новый Структура;
	
	МассивСумм = Неопределено;
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
		МассивСумм.Добавить("СтоимостьНУ");
		МассивСумм.Добавить("СтоимостьПР");
		МассивСумм.Добавить("СтоимостьВР");
	КонецЕсли;
	
	
	// То же самое, но в соответствии - для удобства поиска
	СоотвСумм = Новый Соответствие;
	СоотвСумм.Вставить("Стоимость", "Стоимость");
	СоотвСумм.Вставить("СтоимостьНУ", "СтоимостьНУ");
	СоотвСумм.Вставить("СтоимостьПР", "СтоимостьПР");
	СоотвСумм.Вставить("СтоимостьВР", "СтоимостьВР");
	
	СоотвПараметровСостояний = Новый Соответствие;

	ОцифроватьСостояния(Таб,СоотвПараметровСостояний,ПрефиксПараметровНовогоСостояния);
	
	
	// Получили таблицу перемещений в требуемом формате
	ТаблицаПеремещений = Таб;	
	
	// Таблица перемещений содержит несколько несвязанных частей, относящихся к отдельным партиям - строкам таблицы ТаблицаТоваров
	
	// Обработка перемещений: разрыв контуров
	// Получим наборы смежных вершин для каждой вершины
	// Соотв СмежныеВершины Вершина, СмежныеВершины
	
	Источники = Новый Соответствие;
	Приемники = Новый Соответствие;
	МассивНачалДеревьев = Новый Массив;
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		ПараметрыИсточника = Источники[Строка.Источник];
		Если ПараметрыИсточника = Неопределено Тогда
			СмежныеВершины= Новый Соответствие;
			ПараметрыИсточника = Новый Структура("Пройден, СмежныеВершины", Ложь, СмежныеВершины);
		КонецЕсли;
		
		ПараметрыИсточника.СмежныеВершины.Вставить(Строка.Приемник, ТаблицаПеремещений.Индекс(Строка)); // во вложенной структуре храним смежную вершину и номер строки перемещения
		
		Источники.Вставить(Строка.Источник, ПараметрыИсточника);
		
	КонецЦикла;
	
	// Чтобы рассчитать перемещения, заменим каждый связный граф перемещений его остовным деревом
	// Для этого обойдем их все, найдем и разорвем все контуры по предложенному выше правилу.
	Для Каждого Элемент Из Источники Цикл
		Если НЕ Элемент.Значение.Пройден Тогда // если от вершины еще не строился контур, обрабатываем
			
			//ПройденныеВершины = Новый Соответствие;
			//НомерВершины = Элемент.Ключ;
			//ПройденныеВершины.Вставить(НомерВершины, -1);
			
			ПройденныеВершины = Новый ТаблицаЗначений;
			ПройденныеВершины.Колонки.Добавить("Ключ");
			ПройденныеВершины.Колонки.Добавить("Значение");
			ПройденныеВершины.Индексы.Добавить("Ключ");
			
			НоваяСтрока = ПройденныеВершины.Добавить();
			НоваяСтрока.Ключ = Элемент.Ключ;
			НоваяСтрока.Значение = -1;
			
			НомерВершины = Элемент.Ключ;
			
			РазорватьКонтуры(НомерВершины, Источники, ПройденныеВершины, ТаблицаПеремещений);
		КонецЕсли;
	КонецЦикла;
	
	// После этого таблица содержит незамкнутую последовательность перемещений. 
	// Стоимость перемещений с количеством = 0 в таблице тоже должна быть приведена к 0.
	СтСумм = Новый Структура; // структура сумм
	
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			
			Для Каждого КолСумма Из МассивСумм Цикл
				СтСумм.Вставить(КолСумма, -Строка[КолСумма]);
			КонецЦикла;
			
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Строка.Источник], СоотвПараметровСостояний[Строка.Приемник], СтСумм, СтруктураДопПараметров)
			
		Иначе
			
			Приемники.Вставить(Строка.Приемник, Строка.Приемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Теперь нужно выделить отдельные деревья, определить среднюю стоимость для каждого дерева, 
	// и начиная с самого начала каждого дерева последовательно рассчитать стоимость для каждого состояния/перемещения
	
	// Найдем начало каждого дерева - его нет в приемниках
	МассивНачалДеревьев = ПолучитьСписокВершин( Таб, Приемники );
	
	// На данном этапе нужна информация о начальном состоянии и внешнем поступлении в каждую вершину
	
	// Будем использовать список вершин, для каждой из которых указаны смежные вершины - приемники и 
	Вершины = Новый Соответствие; // здесь нам понадобится общее количество источников, приемники
	Для Каждого Строка Из ТаблицаПеремещений Цикл
		
		Если Строка.Количество=0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Обработаем источник
		ПодчСтруктура = Вершины[Строка.Источник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 0, Новый Соответствие, 0);
		КонецЕсли;
		
		СтСумм = Новый Структура; // структура сумм
		Для Каждого КолСумма Из МассивСумм Цикл
			СтСумм.Вставить(КолСумма, Строка[КолСумма]);
		КонецЦикла;
		
		ПодчСтруктура.Приемники.Вставить(Строка.Приемник, Новый Структура("Количество, СтруктураСумм", Строка.Количество, СтСумм)); // Вместе с вершиной-приемником запоминаем количество перемещения
		
		Вершины.Вставить(Строка.Источник, ПодчСтруктура);
		
		// Обработаем приемник
		ПодчСтруктура = Вершины[Строка.Приемник];
		Если ПодчСтруктура=Неопределено Тогда
			ПодчСтруктура = Новый Структура("КоличествоИсточников, Приемники, КоличествоРассчитанныхВходов", 1, Новый Соответствие, 0);
		Иначе
			ПодчСтруктура.КоличествоИсточников = ПодчСтруктура.КоличествоИсточников+1;
		КонецЕсли;
		
		Вершины.Вставить(Строка.Приемник, ПодчСтруктура);
	КонецЦикла;
	
	// В структуру Вершины нужно добавить данные о начальном остатке и внешнем поступлении для каждого из состояний,
	// Можно также добавить состояний, не участвовавших в перемещениях, тогда для них тоже будет рассчитано внешнее списание
	МассивДобавленныеВершины = Новый Массив;
	ДобавитьНачальныйОстатокИВнешнееПоступление(Вершины, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавленныеВершины);
	
	// Добавленные состояния возвращаются специальным массивом, который добавляется к началам деревьев
	Для Каждого Элемент Из МассивДобавленныеВершины Цикл
		МассивНачалДеревьев.Добавить(Элемент)
	КонецЦикла;
	
	// Теперь будем обходить деревья с начала, и рассчитывать состояния и переходы между ними
	Для Каждого НачалоДерева Из МассивНачалДеревьев Цикл
		РассчитатьПуть(НачалоДерева, Вершины, СоотвПараметровСостояний, СтруктураДопПараметров);
	КонецЦикла;
	
КонецПроцедуры // СписаниеПоСредней()

// Находит контуры и разрывает их, сокращая на минимальное количество
//
// Параметры:
//	Нет.
//
Процедура РазорватьКонтуры(НомерИсхВершины, Источники, ПройденныеВершины, ТаблицаПеремещений)
	
	Приемники = Источники[НомерИсхВершины].СмежныеВершины;
	
	Для Каждого ЭлементВершина Из Приемники Цикл
		
		НомерВершины=ЭлементВершина.Ключ;
		ИндСтрокиПеремещения=ЭлементВершина.Значение;
		
		// Найдем каждую вершину-приемник в списке источников
		ПараметрыИсточника = Источники[НомерВершины];
		Если ПараметрыИсточника = Неопределено Тогда
			Продолжить; // это висячая вершина (степени 1)
		КонецЕсли;
		СмежныеВершины = ПараметрыИсточника.СмежныеВершины;
		
		// Неплохо бы запоминать уже пройденные контуры, чтобы не разбирать уже разобранные
		// Контур нужно идентифицировать последовательностью входящих в него вершин.
		
		// Проверим на замыкание
		Если ПройденныеВершины.Найти(НомерВершины,"Ключ")<> Неопределено тогда
		//Если ПройденныеВершины[НомерВершины]<>Неопределено Тогда
			
			// Контур найден: можно сокращать на мин. количество перемещения
			
			// Найдем дугу контура с мин. количеством
			
			// Начнем с текущей
			СтрокаЗамыкающая=ТаблицаПеремещений[ИндСтрокиПеремещения];
			МинКоличество=СтрокаЗамыкающая.Количество;
			ИндСтрокиСМинКоличеством = ИндСтрокиПеремещения;
			
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Если Строка.Количество < МинКоличество Тогда 
							МинКоличество = Строка.Количество;
							ИндСтрокиСМинКоличеством = Элемент.Значение;
						КонецЕсли;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
			КонецЦикла;
			
			// Вычтем найденное минимальное количество из всех дуг контура
			
			// ... из замыкающей дуги
			СтрокаЗамыкающая.Количество = СтрокаЗамыкающая.Количество - МинКоличество;
			
			// ... из всех пройденных дуг
			Инд=0;
			НачалсяКонтур = Ложь; // флаг начала контура
			Для Каждого Элемент Из ПройденныеВершины Цикл
				
				// Найдем начало контура
				НачалсяКонтур = НачалсяКонтур ИЛИ (Элемент.Ключ = НомерВершины);
				
				Если НачалсяКонтур Тогда
					Если Инд>0 Тогда // в первом элементе нет ссылки на строку
						Строка=ТаблицаПеремещений[Элемент.Значение];
						Строка.Количество = Строка.Количество - МинКоличество;
					КонецЕсли;
					Инд=Инд+1;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если контур разорван, для повторяющейся вершины процедуру не запускаем, переходим к следующему приемнику
			Продолжить;
			
		КонецЕсли;
		
		// Сделаем копию ПройденныеВершины и добавим пройденную вершину
//		КопияПройденныеВершины=Новый Соответствие;
		КопияПройденныеВершины =ПройденныеВершины.Скопировать();
		//Для Каждого Элемент Из ПройденныеВершины Цикл
		//	КопияПройденныеВершины.Вставить(Элемент.Ключ, Элемент.Значение);
		//КонецЦикла;
		
		НоваяСтрока = КопияПройденныеВершины.Добавить();
		НоваяСтрока.Ключ = НомерВершины;
		НоваяСтрока.Значение = ИндСтрокиПеремещения;
		
		//КопияПройденныеВершины.Вставить(НомерВершины, ИндСтрокиПеремещения);
		
		РазорватьКонтуры(НомерВершины, Источники, КопияПройденныеВершины, ТаблицаПеремещений);
		
		// Отметим, что от вершины уже строился контур, чтобы не вызывать аналогичную процедуру повторно
		Источники[НомерВершины].Пройден = Истина;
		
	КонецЦикла;
	
КонецПроцедуры // РазорватьКонтуры()

// Рассчитывает отрезки пути в состояния, в которые есть переход из данной вершины
//
// Параметры:
//	Источник - номер состояния-источника.
//	Состояния - соответствие, содержащее состояния, приемники и т.д.
//	СоотвПараметровСостояний - соответствие, содержащее параметры состояния, как они представлены в БД (измерения, счета, субконто и т.д.)
//
Процедура РассчитатьПуть(Источник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров)
	
	// Состояние в начале:
	// ............
	// ............
	
	// Расчет состояния.
	// Стоимость в состоянии складывается из:
	// Начального остатка + Внешнего прихода (определяется сразу)
	// Прихода из других состояний (входящих стрелок - определяется сложением стрелок)
	
	// Приход из других состояний определяем по таблице перемещений
	
	// Расчет перемещения в другие состояния
	// В каждом состоянии-приемнике КоличествоРассчитанныхВходов = КоличествоРассчитанныхВходов+1
	
	СостояниеИсточник=Состояния[Источник];
	
	СтКорректировка = Новый Структура; // структура корректировок
	СтСуммы = Новый Структура; // структура сумм в состоянии
		
	// Состояние можно использовать в расчете, если рассчитаны все входящие стрелки
	Если СостояниеИсточник.КоличествоИсточников=СостояниеИсточник.КоличествоРассчитанныхВходов Тогда
		
		СоотвПриемники=СостояниеИсточник.Приемники; // соответствие  - приемники
		
		// Рассчитаем перемещения между состояниями
		Для Каждого ЭлементПриемник Из СоотвПриемники Цикл
			
			Приемник = ЭлементПриемник.Ключ;
			Количество = ЭлементПриемник.Значение.Количество;
			
			Состояние = Состояния[Приемник];
			
			// Заполним структуру корректировки сумм
			Для Каждого ЭлементСумма Из ЭлементПриемник.Значение.СтруктураСумм Цикл
				
				Если СостояниеИсточник.Количество > Количество Тогда
					СтКорректировка.Вставить(ЭлементСумма.Ключ, Окр(СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]*Количество /СостояниеИсточник.Количество, 2));
				Иначе
					СтКорректировка.Вставить(ЭлементСумма.Ключ, СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ]);
				КонецЕсли;
				
				// Суммы в новом состоянии
				СтСуммы.Вставить(ЭлементСумма.Ключ, СтКорректировка[ЭлементСумма.Ключ]);
				
				// Корректировка равна разности между правильным движением и уже выполненным движением
				СтКорректировка[ЭлементСумма.Ключ] = СтКорректировка[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			// Теперь можно сформировать записи по перемещению между состояниями
			// Передаем разницу между первоначальным движением и рассчитанным
			ДобавитьЗаписиПоПеремещению(СоотвПараметровСостояний[Источник], СоотвПараметровСостояний[Приемник], СтКорректировка, СтруктураДопПараметров);
			
			// Поступление в состояние
			Состояние.Количество = Состояние.Количество + Количество;
			СостояниеИсточник.Количество = СостояниеИсточник.Количество - Количество;
			
			// Поступление в состояние: добавим суммы
			Для Каждого ЭлементСумма Из СтСуммы Цикл
				
				Состояние.СтруктураСумм[ЭлементСумма.Ключ]         = Состояние.СтруктураСумм[ЭлементСумма.Ключ]         + ЭлементСумма.Значение;
				СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] = СостояниеИсточник.СтруктураСумм[ЭлементСумма.Ключ] - ЭлементСумма.Значение;
				
			КонецЦикла;
			
			Состояние.КоличествоРассчитанныхВходов = Состояние.КоличествоРассчитанныхВходов+1;
			
			// Расчет пути из этой точки
			РассчитатьПуть(Приемник, Состояния, СоотвПараметровСостояний, СтруктураДопПараметров);
			
		КонецЦикла;
		
		// Остаток в состоянии после перемещений: суммы
		СтОстаток = Новый Структура;
		Для Каждого ЭлементСумма Из СостояниеИсточник.СтруктураСумм Цикл
			СтОстаток.Вставить(ЭлементСумма.Ключ, ЭлементСумма.Значение);
		КонецЦикла;
		
		// Теперь можем рассчитать внешние выходы:
		// сформируем записи по внешнему списанию из состояния Источник
		ДобавитьЗаписиПоВнешнемуСписанию(СоотвПараметровСостояний[Источник], СостояниеИсточник.Количество, СтОстаток, СтруктураДопПараметров);
		
		// Все выходы из данного состояния рассчитаны.
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьПуть()

////////////////////////////////////////////////////////////////////////////////
// Процедуры списания по-средней, зависящие от структуры данных конфигурации

// Возвращает таблицу перемещений товаров между состояниями
// Зависит от конкретной структуры данных конфигурации
//
// Параметры:
//	Нет.
//
Функция ПолучитьТаблицуПеремещений(ТаблицаТоваров, ДатаНач, ДатаКон,  Префикс, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Сумма КАК Стоимость,
	|	ВложенныйЗапрос.СуммаНУ КАК СтоимостьНУ,
	|	ВложенныйЗапрос.СуммаПР КАК СтоимостьПР,
	|	ВложенныйЗапрос.СуммаВР КАК СтоимостьВР,
	|	ВложенныйЗапрос.Количество,
	|	ВложенныйЗапрос.СчетКт КАК Счет,
	|	ВложенныйЗапрос.СчетДт КАК Счет" + Префикс + ",
	|	ВложенныйЗапрос.ПодразделениеКт КАК Подразделение,
	|	ВложенныйЗапрос.ПодразделениеДт КАК Подразделение" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоКт1 КАК Субконто1,
	|	ВложенныйЗапрос.СубконтоКт2 КАК Субконто2,
	|	ВложенныйЗапрос.СубконтоКт3 КАК Субконто3,
	|	ВложенныйЗапрос.СубконтоДт1 КАК Субконто1" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоДт2 КАК Субконто2" + Префикс + ",
	|	ВложенныйЗапрос.СубконтоДт3 КАК Субконто3" + Префикс + "
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.СчетКт КАК СчетКт,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеКт,
	|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт1 КОГДА ХозрасчетныйОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт2 КОГДА ХозрасчетныйОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК НоменклатураКт,
	|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт1 КОГДА ХозрасчетныйОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт2 КОГДА ХозрасчетныйОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ КАК НоменклатураДт,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт1,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт2,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоКт3,
	|		ХозрасчетныйОбороты.СчетДт КАК СчетДт,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеДт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеДт,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт1,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт2,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ КАК СубконтоДт3,
	|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаОборот ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаОборот КОНЕЦ) КАК Сумма,
	|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаНУОборотДт ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаНУОборотДт КОНЕЦ) КАК СуммаНУ,
	|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаПРОборотДт ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаПРОборотДт КОНЕЦ) КАК СуммаПР,
	|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.СуммаВРОборотДт ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.СуммаВРОборотДт КОНЕЦ) КАК СуммаВР,
	|		СУММА(ВЫБОР КОГДА ХозрасчетныйОбороты.КоличествоОборотКт ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ХозрасчетныйОбороты.КоличествоОборотКт КОНЕЦ) КАК Количество
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(&ДатаНач, &ДатаКон, , СчетДт В ИЕРАРХИИ (&СписокСчетов), , СчетКт В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ХозрасчетныйОбороты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Хозрасчетный.Ссылка КАК Счет,
	|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|			ИЗ
	|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|					ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|			
	|			ГДЕ
	|				Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Хозрасчетный.Ссылка) КАК СуммовойУчетКт
	|			ПО ХозрасчетныйОбороты.СчетКт = СуммовойУчетКт.Счет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				Хозрасчетный.Ссылка КАК Счет,
	|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
	|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
	|				МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
	|			ИЗ
	|				ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|					ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|					ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
	|			
	|			ГДЕ
	|				Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				Хозрасчетный.Ссылка) КАК СуммовойУчетДт
	|			ПО ХозрасчетныйОбороты.СчетДт = СуммовойУчетДт.Счет
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйОбороты.СчетКт,
	|		ХозрасчетныйОбороты.СчетДт,
	|		ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеКт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|		ЕСТЬNULL(ХозрасчетныйОбороты.ПодразделениеДт, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
	|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоКт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт1 КОГДА ХозрасчетныйОбороты.СубконтоКт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт2 КОГДА ХозрасчетныйОбороты.СубконтоКт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА ХозрасчетныйОбороты.СубконтоДт1 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт1 КОГДА ХозрасчетныйОбороты.СубконтоДт2 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт2 КОГДА ХозрасчетныйОбороты.СубконтоДт3 ССЫЛКА Справочник.Номенклатура ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ NULL КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоКт1 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоКт2 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетКт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоКт3 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто1 ТОГДА ХозрасчетныйОбороты.СубконтоДт1 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто2 ТОГДА ХозрасчетныйОбороты.СубконтоДт2 ИНАЧЕ Неопределено КОНЕЦ,
	|		ВЫБОР КОГДА СуммовойУчетДт.Субконто3 ТОГДА ХозрасчетныйОбороты.СубконтоДт3 ИНАЧЕ Неопределено КОНЕЦ) КАК ВложенныйЗапрос
	|
	|ГДЕ
	//|	ВЫБОР КОГДА ВложенныйЗапрос.СубконтоКт1 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт1.Дата КОГДА ВложенныйЗапрос.СубконтоКт2 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт2.Дата КОГДА ВложенныйЗапрос.СубконтоКт3 ССЫЛКА Документ.ОтчетПроизводстваЗаСмену ТОГДА ВложенныйЗапрос.СубконтоКт3.Дата ИНАЧЕ (&ДатаНач) КОНЕЦ >= &ДатаНач И
	|	(ВложенныйЗапрос.НоменклатураКт = ВложенныйЗапрос.НоменклатураДт) И ";
	//|	(НЕ (ВложенныйЗапрос.НоменклатураДт) ЕСТЬ NULL) И ";
	
	Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|		(ВложенныйЗапрос.НоменклатураКт В (&СписокТоваров)) И";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|	(ВложенныйЗапрос.СчетДт <> ВложенныйЗапрос.СчетКт ИЛИ ВложенныйЗапрос.СубконтоКт1 <> ВложенныйЗапрос.СубконтоДт1 ИЛИ ВложенныйЗапрос.СубконтоКт2 <> ВложенныйЗапрос.СубконтоДт2 ИЛИ ВложенныйЗапрос.СубконтоКт3 <> ВложенныйЗапрос.СубконтоДт3 ИЛИ ВложенныйЗапрос.ПодразделениеДт <> ВложенныйЗапрос.ПодразделениеКт)";
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ВложенныйЗапрос.СчетКт,
	|	ВложенныйЗапрос.СчетДт,
	|	ВложенныйЗапрос.ПодразделениеКт,
	|	ВложенныйЗапрос.ПодразделениеДт";
	
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
		
	Таб = Запрос.Выполнить().Выгрузить();
	
	Возврат Таб;
	
КонецФункции // ПолучитьТаблицуПеремещений()

// Добавляет данные о начальном остатке и внешнем поступлении в состояниях
//
// Параметры:
//	Нет.
//
Процедура ДобавитьНачальныйОстатокИВнешнееПоступление(Состояния, СоотвПараметровСостояний, ДатаНач, ДатаКон, СтруктураДопПараметров, МассивДобавляемыхВершин)
	
	// Из структуры доп параметров добудем дополнительные параметры
	СписокНеКорректируемыхСчетов = СтруктураДопПараметров.СписокНеКорректируемыхСчетов; // список счетов списание номенклатуры на которые не надо корректировать
	МассивНоменклатуры           = СтруктураДопПараметров.ТаблицаТоваров;
	
	МассивСумм = Неопределено; // список суммовых ресурсов, списываемых пропорционально количеству
	СтруктураДопПараметров.Свойство("МассивСумм", МассивСумм);
	
	Если ТипЗнч(МассивСумм) <> Тип("Массив") Тогда
		МассивСумм = Новый Массив;
		МассивСумм.Добавить("Стоимость");
		МассивСумм.Добавить("СтоимостьНУ");
		МассивСумм.Добавить("СтоимостьПР");
		МассивСумм.Добавить("СтоимостьВР");
	КонецЕсли;
		
	Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.Подразделение,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстаток)                  ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстаток) КОНЕЦ КАК СуммаОстаток,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстатокНУ)                ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстатокНУ) КОНЕЦ КАК СуммаОстатокНУ,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстатокПР)                ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстатокПР) КОНЕЦ КАК СуммаОстатокПР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаОстатокВР)                ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаОстатокВР) КОНЕЦ КАК СуммаОстатокВР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоОстаток)             ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоОстаток) КОНЕЦ КАК КоличествоОстаток,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриход)                   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриход) КОНЕЦ КАК СуммаПриход,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходНУ)                 ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходНУ) КОНЕЦ КАК СуммаПриходНУ,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходПР)                 ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходПР) КОНЕЦ КАК СуммаПриходПР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходВР)                 ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходВР) КОНЕЦ КАК СуммаПриходВР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриход)              ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриход) КОНЕЦ КАК КоличествоПриход,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателя) КОНЕЦ КАК СуммаВозвратОтПокупателя,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателяНУ)    ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателяНУ) КОНЕЦ КАК СуммаВозвратОтПокупателяНУ,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателяПР)    ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателяПР) КОНЕЦ КАК СуммаВозвратОтПокупателяПР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателяВР)    ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратОтПокупателяВР) КОНЕЦ КАК СуммаВозвратОтПокупателяВР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратОтПокупателя)  КОНЕЦ КАК КоличествоВозвратОтПокупателя,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику)        ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщику) КОНЕЦ КАК СуммаВозвратПоставщику,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщикуНУ)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщикуНУ) КОНЕЦ КАК СуммаВозвратПоставщикуНУ,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщикуПР)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщикуПР) КОНЕЦ КАК СуммаВозвратПоставщикуПР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаВозвратПоставщикуВР)      ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаВозвратПоставщикуВР) КОНЕЦ КАК СуммаВозвратПоставщикуВР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)   ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоВозвратПоставщику)  КОНЕЦ КАК КоличествоВозвратПоставщику,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходов)            ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходов) КОНЕЦ КАК СуммаПриходОтходов,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходовНУ)          ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходовНУ) КОНЕЦ КАК СуммаПриходОтходовНУ,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходовПР)          ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходовПР) КОНЕЦ КАК СуммаПриходОтходовПР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.СуммаПриходОтходовВР)          ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.СуммаПриходОтходовВР) КОНЕЦ КАК СуммаПриходОтходовВР,
		|	ВЫБОР КОГДА СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)       ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ВложенныйЗапрос.КоличествоПриходОтходов)  КОНЕЦ КАК КоличествоПриходОтходов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаОстатковИПриходов.Счет КАК Счет,
		|		ЕСТЬNULL(ТаблицаОстатковИПриходов.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|		ТаблицаОстатковИПриходов.Субконто1 КАК Субконто1,
		|		ТаблицаОстатковИПриходов.Субконто2 КАК Субконто2,
		|		ТаблицаОстатковИПриходов.Субконто3 КАК Субконто3,
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНачальныйОстаток КОНЕЦ) КАК СуммаОстаток,
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаНУНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаНУНачальныйОстаток КОНЕЦ) КАК СуммаОстатокНУ,
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаПРНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаПРНачальныйОстаток КОНЕЦ) КАК СуммаОстатокПР,
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.СуммаВРНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.СуммаВРНачальныйОстаток КОНЕЦ) КАК СуммаОстатокВР,
		|		СУММА(ВЫБОР КОГДА ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаОстатковИПриходов.КоличествоНачальныйОстаток КОНЕЦ) КАК КоличествоОстаток,
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаОборотДт) КОНЕЦ КАК СуммаПриход,
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаНУОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаНУОборотДт) КОНЕЦ КАК СуммаПриходНУ,
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаПРОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаПРОборотДт) КОНЕЦ КАК СуммаПриходПР,
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.СуммаВРОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.СуммаВРОборотДт) КОНЕЦ КАК СуммаПриходВР,
		|		ВЫБОР КОГДА СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) ЕСТЬ NULL ТОГДА 0 ИНАЧЕ СУММА(ТаблицаОстатковИПриходов.КоличествоОборотДт) КОНЕЦ КАК КоличествоПриход,
		|		0 КАК СуммаВозвратОтПокупателя,
		|		0 КАК СуммаВозвратОтПокупателяНУ,
		|		0 КАК СуммаВозвратОтПокупателяПР,
		|		0 КАК СуммаВозвратОтПокупателяВР,
		|		0 КАК КоличествоВозвратОтПокупателя,
		|		0 КАК СуммаВозвратПоставщику,
		|		0 КАК СуммаВозвратПоставщикуНУ,
		|		0 КАК СуммаВозвратПоставщикуПР,
		|		0 КАК СуммаВозвратПоставщикуВР,
		|		0 КАК КоличествоВозвратПоставщику,
		|		0 КАК СуммаПриходОтходов,
		|		0 КАК СуммаПриходОтходовНУ,
		|		0 КАК СуммаПриходОтходовПР,
		|		0 КАК СуммаПриходОтходовВР,
		|		0 КАК КоличествоПриходОтходов
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация) КАК ТаблицаОстатковИПриходов";
		
	Если МассивНоменклатуры <> Неопределено Тогда
	Текст = Текст + "
		|	ГДЕ
		|		(ВЫБОР КОГДА ТаблицаОстатковИПриходов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаОстатковИПриходов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаОстатковИПриходов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаОстатковИПриходов.Счет,
		|		ЕСТЬNULL(ТаблицаОстатковИПриходов.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ТаблицаОстатковИПриходов.Субконто1,
		|		ТаблицаОстатковИПриходов.Субконто2,
		|		ТаблицаОстатковИПриходов.Субконто3
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаВозвратов.Счет,
		|		ЕСТЬNULL(ТаблицаВозвратов.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ТаблицаВозвратов.Субконто1,
		|		ТаблицаВозвратов.Субконто2,
		|		ТаблицаВозвратов.Субконто3,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаНУОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаНУОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаПРОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаПРОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаВРОборотКт < 0  И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаВРОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И НЕ ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаНУОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаНУОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаПРОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаПРОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.СуммаВРОборотКт >= 0 ТОГДА ТаблицаВозвратов.СуммаВРОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА ТаблицаВозвратов.КоличествоОборотКт >= 0 ТОГДА ТаблицаВозвратов.КоличествоОборотКт ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаНУОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаНУОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаПРОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаПРОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.СуммаВРОборотКт < 0  И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.СуммаВРОборотКт) ИНАЧЕ 0 КОНЕЦ),
		|		СУММА(ВЫБОР КОГДА (ТаблицаВозвратов.КоличествоОборотКт < 0 И ТаблицаВозвратов.Регистратор Ссылка Документ.ОтчетПроизводстваЗаСмену) ТОГДА -(ТаблицаВозвратов.КоличествоОборотКт) ИНАЧЕ 0 КОНЕЦ)
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Регистратор, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, , ) КАК ТаблицаВозвратов
		|	
		|	ГДЕ (ВЫБОР КОГДА (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
		|			ТОГДА (ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата < &ДатаНач 
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад <> ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад ЕСТЬ NULL
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаВозвратов.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата ЕСТЬ NULL) 
		|		ИНАЧЕ ЛОЖЬ КОНЕЦ)
		|		ИЛИ (ТаблицаВозвратов.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаВозвратов.КоличествоОборотКт < 0 ИЛИ ТаблицаВозвратов.СуммаОборотКт < 0))";
		
	Если МассивНоменклатуры <> Неопределено Тогда
	Текст = Текст + " И
		|		(ВЫБОР КОГДА ТаблицаВозвратов.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаВозвратов.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаВозвратов.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
	Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ТаблицаВозвратов.Счет,
		|		ЕСТЬNULL(ТаблицаВозвратов.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ТаблицаВозвратов.Субконто1,
		|		ТаблицаВозвратов.Субконто2,
		|		ТаблицаВозвратов.Субконто3
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВнутренееПеремещение.Счет,
		|		ЕСТЬNULL(ВнутренееПеремещение.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ВнутренееПеремещение.Субконто1,
		|		ВнутренееПеремещение.Субконто2,
		|		ВнутренееПеремещение.Субконто3,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаОборотДт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаНУОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаНУОборотДт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаПРОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаПРОборотДт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.СуммаВРОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.СуммаВРОборотДт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ВнутренееПеремещение.КоличествоОборотДт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ВнутренееПеремещение.КоличествоОборотДт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Период, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация, КорСчет В ИЕРАРХИИ (&СписокСчетов), ) КАК ВнутренееПеремещение
		|
		|	ГДЕ
		|		((ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.Субконто1 
		|				КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.Субконто2 
		|				КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.Субконто3 
		|				ИНАЧЕ 
		|					NULL КОНЕЦ) = 
		|		(ВЫБОР КОГДА ВнутренееПеремещение.КорСубконто1 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.КорСубконто1 
		|				КОГДА ВнутренееПеремещение.КорСубконто2 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.КорСубконто2 
		|				КОГДА ВнутренееПеремещение.КорСубконто3 ССЫЛКА Справочник.Номенклатура 
		|					ТОГДА ВнутренееПеремещение.КорСубконто3 
		|				ИНАЧЕ 
		|					NULL КОНЕЦ))";
		
	Если МассивНоменклатуры <> Неопределено Тогда
	Текст = Текст + "
		|		И (ВЫБОР КОГДА ВнутренееПеремещение.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто1 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто2 В (&МассивНоменклатуры) КОГДА ВнутренееПеремещение.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ВнутренееПеремещение.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
	КонецЕсли;
	
		Текст = Текст + "
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВнутренееПеремещение.Счет,
		|		ЕСТЬNULL(ВнутренееПеремещение.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ВнутренееПеремещение.Субконто1,
		|		ВнутренееПеремещение.Субконто2,
		|		ВнутренееПеремещение.Субконто3";
		
	// Если есть операции списания, которые не должны быть скорректированы, то эти
	// операции необходимо учесть при расчете средневзвешенной стоимости номенклатуры.
	Если СписокНеКорректируемыхСчетов <> Неопределено Тогда
		
		Текст = Текст + "
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ТаблицаНеУчитываемыхСписаний.Счет,
		|		ЕСТЬNULL(ТаблицаНеУчитываемыхСписаний.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
		|		ТаблицаНеУчитываемыхСписаний.Субконто1,
		|		ТаблицаНеУчитываемыхСписаний.Субконто2,
		|		ТаблицаНеУчитываемыхСписаний.Субконто3,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаНУОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаНУОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаПРОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаПРОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.СуммаВРОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.СуммаВРОборотКт КОНЕЦ)),
		|		СУММА(-(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ТаблицаНеУчитываемыхСписаний.КоличествоОборотКт КОНЕЦ)),
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0,
		|		0
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СписокНеКорректируемыхСчетов), , Организация = &Организация, , ) КАК ТаблицаНеУчитываемыхСписаний";
		
		Если МассивНоменклатуры <> Неопределено Тогда
			Текст = Текст + "
			|	
			|	ГДЕ
			|		(ВЫБОР КОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто1 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто2 В (&МассивНоменклатуры) КОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаНеУчитываемыхСписаний.Субконто3 В (&МассивНоменклатуры) ИНАЧЕ ЛОЖЬ КОНЕЦ)";
		КонецЕсли;
	
		Текст = Текст + "
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ТаблицаНеУчитываемыхСписаний.Счет,
			|		ЕСТЬNULL(ТаблицаНеУчитываемыхСписаний.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)),
			|		ТаблицаНеУчитываемыхСписаний.Субконто1,
			|		ТаблицаНеУчитываемыхСписаний.Субконто2,
			|		ТаблицаНеУчитываемыхСписаний.Субконто3";
	
	КонецЕсли; 
	
	Текст = Текст + ") КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Хозрасчетный.Ссылка КАК Счет,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|				ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|		
		|		ГДЕ
		|			Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Хозрасчетный.Ссылка) КАК СуммовойУчет
		|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.Подразделение,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.Подразделение,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ";
			
				
			
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
	Запрос.УстановитьПараметр("СписокСчетов",  СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
	Запрос.УстановитьПараметр("СписокНеКорректируемыхСчетов", СписокНеКорректируемыхСчетов);
		
	Запрос.Текст = Текст;
	
	ТабПартий = Запрос.Выполнить().Выгрузить();
	ТабПартий.Индексы.Добавить("Счет,Подразделение,Субконто1,Субконто2,Субконто3");
	ТабПартий.Колонки.Добавить("Найдена", Новый ОписаниеТипов("Булево"));
	
	Парам=Новый Структура;
	ИндСостояния=Состояния.Количество();

	Для Каждого Состояние Из Состояния Цикл
		
		ИндСостояния = Макс(ИндСостояния, Состояние.Ключ);
		
		// Это параметры (значения измерений, счетов, субконто и т.д.), которые имеет состояние
		ПараметрыСостояния = СоотвПараметровСостояний[Состояние.Ключ];
		
		Парам.Вставить("Счет", ПараметрыСостояния["Счет"]);
		Парам.Вставить("Подразделение", ПараметрыСостояния["Подразделение"]);
		Парам.Вставить("Субконто1", ПараметрыСостояния["Субконто1"]);
		Парам.Вставить("Субконто2", ПараметрыСостояния["Субконто2"]);
		Парам.Вставить("Субконто3", ПараметрыСостояния["Субконто3"]);
		
		Количество=0;
		СтруктураСумм = Новый Структура; // структура, хранящая суммы
		
		// Заполнение сумм
		Для Каждого ЭлементСумма Из МассивСумм Цикл
			СтруктураСумм.Вставить(ЭлементСумма, 0);
		КонецЦикла;
		
		НайдСтроки=ТабПартий.НайтиСтроки(Парам);
		Для Каждого СтрокаТаблицы Из НайдСтроки Цикл
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоПриходОтходов + СтрокаТаблицы.КоличествоВозвратОтПокупателя;
			Сумма      = СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаПриходОтходов + СтрокаТаблицы.СуммаВозвратОтПокупателя;
			СуммаНУ    = СтрокаТаблицы.СуммаОстатокНУ + СтрокаТаблицы.СуммаПриходНУ + СтрокаТаблицы.СуммаПриходОтходовНУ + СтрокаТаблицы.СуммаВозвратОтПокупателяНУ;
			СуммаПР    = СтрокаТаблицы.СуммаОстатокПР + СтрокаТаблицы.СуммаПриходПР + СтрокаТаблицы.СуммаПриходОтходовПР + СтрокаТаблицы.СуммаВозвратОтПокупателяПР;
			СуммаВР    = СтрокаТаблицы.СуммаОстатокВР + СтрокаТаблицы.СуммаПриходВР + СтрокаТаблицы.СуммаПриходОтходовВР + СтрокаТаблицы.СуммаВозвратОтПокупателяВР;
			
			СтруктураСумм.Вставить("Стоимость",  	СтруктураСумм["Стоимость"] + Сумма);
			СтруктураСумм.Вставить("СтоимостьНУ",  	СтруктураСумм["СтоимостьНУ"] + СуммаНУ);
			СтруктураСумм.Вставить("СтоимостьПР",  	СтруктураСумм["СтоимостьПР"] + СуммаПР);
			СтруктураСумм.Вставить("СтоимостьВР",  	СтруктураСумм["СтоимостьВР"] + СуммаВР);
						
			// Отметим найденные строки (участвующие в перемещениях), чтобы потом добавить все остальные остатки
			СтрокаТаблицы.Найдена = Истина;
		КонецЦикла;
		
		Состояние.Значение.Вставить("Количество", Количество);
		Состояние.Значение.Вставить("СтруктураСумм", СтруктураСумм);
	КонецЦикла;
	
	// Теперь добавим состояния не участвующие в перемещениях (обособленные вершины) - тем, по которым не было перемещений, чтобы по ним внешнее списание рассчиталось той же процедурой, что и для перемещений
	Для Каждого СтрокаТаблицы Из ТабПартий Цикл
		Если НЕ СтрокаТаблицы.Найдена Тогда
			Количество = СтрокаТаблицы.КоличествоОстаток + СтрокаТаблицы.КоличествоПриход + СтрокаТаблицы.КоличествоПриходОтходов + СтрокаТаблицы.КоличествоВозвратОтПокупателя;
			
			СтруктураСумм = Новый Структура; // структура, хранящая суммы
			
			СтруктураСумм.Вставить("Стоимость", СтрокаТаблицы.СуммаОстаток + СтрокаТаблицы.СуммаПриход + СтрокаТаблицы.СуммаПриходОтходов + СтрокаТаблицы.СуммаВозвратОтПокупателя);
			СтруктураСумм.Вставить("СтоимостьНУ", СтрокаТаблицы.СуммаОстатокНУ + СтрокаТаблицы.СуммаПриходНУ + СтрокаТаблицы.СуммаПриходОтходовНУ + СтрокаТаблицы.СуммаВозвратОтПокупателяНУ);
			СтруктураСумм.Вставить("СтоимостьПР", СтрокаТаблицы.СуммаОстатокПР + СтрокаТаблицы.СуммаПриходПР + СтрокаТаблицы.СуммаПриходОтходовПР + СтрокаТаблицы.СуммаВозвратОтПокупателяПР);
			СтруктураСумм.Вставить("СтоимостьВР", СтрокаТаблицы.СуммаОстатокВР + СтрокаТаблицы.СуммаПриходВР + СтрокаТаблицы.СуммаПриходОтходовВР + СтрокаТаблицы.СуммаВозвратОтПокупателяВР);
						
			ИндСостояния=ИндСостояния+1;
			
			// Добавим состояние со всеми необходимыми параметрами
			Состояния.Вставить(ИндСостояния, 
			Новый Структура("КоличествоИсточников, КоличествоРассчитанныхВходов, Приемники, Количество, СтруктураСумм", 0, 0, Новый Соответствие, Количество, СтруктураСумм));
			
			СоотвПараметровСостояний.Вставить(ИндСостояния, Новый Структура("Счет, Подразделение, Субконто1, Субконто2, Субконто3", СтрокаТаблицы.Счет, СтрокаТаблицы.Подразделение, СтрокаТаблицы.Субконто1, СтрокаТаблицы.Субконто2, СтрокаТаблицы.Субконто3));
			
			МассивДобавляемыхВершин.Добавить(ИндСостояния);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьНачальныйОстатокИВнешнееПоступление()

// Добавляет в базу данных записи по перемещению в другое состояние
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоПеремещению(ПараметрыСостоянияИсточника, ПараметрыСостоянияПриемника, ИсходнаяСуммаКорректировки, СтруктураДопПараметров)
	СуммаКорректировки = ИсходнаяСуммаКорректировки.Стоимость;
	СуммаКорректировкиНУ = ИсходнаяСуммаКорректировки.СтоимостьНУ;
	СуммаКорректировкиПР = ИсходнаяСуммаКорректировки.СтоимостьПР;
	СуммаКорректировкиВР = ИсходнаяСуммаКорректировки.СтоимостьВР;
	
	Если (СуммаКорректировки = 0) И (СуммаКорректировкиНУ = 0) И (СуммаКорректировкиПР = 0) И (СуммаКорректировкиВР = 0) Тогда
		Возврат;
	КонецЕсли; 
	
	Движение = СтруктураДопПараметров.Регистратор.Движения["Хозрасчетный"];
	
	Проводка = Движение.Добавить();
	
	Проводка.Период        = СтруктураДопПараметров.Период;
	Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
	Проводка.Активность    = Истина;
	Проводка.Организация   = СтруктураДопПараметров.Организация;
	Проводка.Содержание    = "Корректировка стоимости перемещения";
	
	ДопПроводкаДт = Ложь;
	ДопПроводкаКт = Ложь;
	
	СчетДт = ПараметрыСостоянияПриемника.Счет;
	СчетКт = ПараметрыСостоянияИсточника.Счет;
	
	Если СтруктураДопПараметров.УчетВПродажныхЦенах Тогда
		Если СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			ДопПроводкаКт = Истина;
			СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		ИначеЕсли СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			ДопПроводкаКт = Истина;
			СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		КонецЕсли;
		
		Если СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
			ДопПроводкаДт = Истина;
			СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
		ИначеЕсли СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
			ДопПроводкаДт = Истина;
			СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
		КонецЕсли;	
	КонецЕсли;
	
	Проводка.СчетДт 			= ПараметрыСостоянияПриемника.Счет;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
	
	Проводка.СчетКт 			= ПараметрыСостоянияИсточника.Счет;
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
	БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
	
	Проводка.Сумма = СуммаКорректировки;
	
	БухгалтерскийУчет.УстановитьПодразделенияПроводки(
		Проводка, ПараметрыСостоянияПриемника.Подразделение, ПараметрыСостоянияИсточника.Подразделение);
					
	НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаКорректировкиНУ, СуммаКорректировкиНУ, 
		СуммаКорректировкиПР, СуммаКорректировкиПР, СуммаКорректировкиВР, СуммаКорректировкиВР, Проводка);
		
	Если ДопПроводкаДт Тогда
		
		Проводка = Движение.Добавить();
		
		Проводка.Период        = СтруктураДопПараметров.Период;
		Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураДопПараметров.Организация;
		Проводка.Содержание    = "Корректировка стоимости перемещения";
		
		Проводка.СчетДт = ПараметрыСостоянияПриемника.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияПриемника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияПриемника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.СчетКт = СчетДт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияПриемника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияПриемника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияПриемника.Субконто3);
		
		Проводка.Сумма = - СуммаКорректировки;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, ПараметрыСостоянияПриемника.Подразделение, ПараметрыСостоянияПриемника.Подразделение);
					
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаКорректировкиНУ, -СуммаКорректировкиНУ, 
			-СуммаКорректировкиПР, -СуммаКорректировкиПР, -СуммаКорректировкиВР, -СуммаКорректировкиВР, Проводка);
		
	КонецЕсли;
	
	Если ДопПроводкаКт Тогда
		
		Проводка = Движение.Добавить();
		
		Проводка.Период        = СтруктураДопПараметров.Период;
		Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
		Проводка.Активность    = Истина;
		Проводка.Организация   = СтруктураДопПараметров.Организация;
		Проводка.Содержание    = "Корректировка стоимости перемещения";
		
		Проводка.СчетДт = СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
		
		Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
		
		Проводка.Сумма = - СуммаКорректировки;
		
		БухгалтерскийУчет.УстановитьПодразделенияПроводки(
			Проводка, ПараметрыСостоянияИсточника.Подразделение, ПараметрыСостоянияИсточника.Подразделение);
		
		НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаКорректировкиНУ, -СуммаКорректировкиНУ, 
			-СуммаКорректировкиПР, -СуммаКорректировкиПР, -СуммаКорректировкиВР, -СуммаКорректировкиВР, Проводка);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьЗаписиПоПеремещению()

// Здесь формируются все записи по внешнему списанию 
//
// Параметры:
//	Нет.
//
Процедура ДобавитьЗаписиПоВнешнемуСписанию(ПараметрыСостоянияИсточника, ОбщееКоличество, ОбщаяСтоимость, СтруктураДопПараметров)
	
	Движение = СтруктураДопПараметров.Регистратор.Движения["Хозрасчетный"];
	
	// Отберем из общей таблицы списания нужные операции списания.
	ОперацийСписания = СтруктураДопПараметров.ТаблицаОперацийСписания.НайтиСтроки(ПараметрыСостоянияИсточника);
	
	СчетВнереализационныхРасходов = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
	СчетВнереализационныхДоходов = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
	
	Для каждого ОперацияСписания Из ОперацийСписания Цикл
		
		Если ОбщееКоличество = 0 Тогда
			Прервать;
		КонецЕсли;
		Если ОперацияСписания.КорСчет.ВидыСубконто.Количество() > 1 Тогда 
			Если ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПолучитьИмяПредопределенного(ОперацияСписания.КорСчет.ВидыСубконто[1].ВидСубконто) = "ПартииМатериаловВЭксплуатации" Тогда
				Продолжить;
				// Возвраты спецодежды не корректируются, т.к. имеют особый порядок учета
			КонецЕсли;                                                           
		КонецЕсли;
		
		ДолжноБытьСписано  	= Окр(ОбщаяСтоимость.Стоимость/ОбщееКоличество * ОперацияСписания.Количество, 2); 
		ДолжноБытьСписаноНУ = Окр(ОбщаяСтоимость.СтоимостьНУ/ОбщееКоличество * ОперацияСписания.Количество, 2); 
		ДолжноБытьСписаноПР = Окр(ОбщаяСтоимость.СтоимостьПР/ОбщееКоличество * ОперацияСписания.Количество, 2); 
		ДолжноБытьСписаноВР = Окр(ОбщаяСтоимость.СтоимостьВР/ОбщееКоличество * ОперацияСписания.Количество, 2); 
		
		СуммаКорректировки 		= ДолжноБытьСписано - ОперацияСписания.Сумма;
		СуммаКорректировкиНУ 	= ДолжноБытьСписаноНУ - ОперацияСписания.СуммаНУ;
		СуммаКорректировкиПР 	= ДолжноБытьСписаноПР - ОперацияСписания.СуммаПР;
		СуммаКорректировкиВР 	= ДолжноБытьСписаноВР - ОперацияСписания.СуммаВР;
		
		// Уменьшим обую стоимость и количество.
		ОбщаяСтоимость.Стоимость  	= ОбщаяСтоимость.Стоимость - ДолжноБытьСписано;
		ОбщаяСтоимость.СтоимостьНУ  = ОбщаяСтоимость.СтоимостьНУ - ДолжноБытьСписаноНУ;
		ОбщаяСтоимость.СтоимостьПР  = ОбщаяСтоимость.СтоимостьПР - ДолжноБытьСписаноПР;
        ОбщаяСтоимость.СтоимостьВР  = ОбщаяСтоимость.СтоимостьВР - ДолжноБытьСписаноВР;

		ОбщееКоличество = ОбщееКоличество - ОперацияСписания.Количество;
		
		// Для расчета по средней и для корректировки списания МПЗ на косвенные расходы третью корректировку делать не надо
		Если Лев(СтруктураДопПараметров.РасчетПрямыхЗатратНомер, 1) = "3" Тогда
			Если СтруктураДопПараметров.РасчетПрямыхЗатратНомер <> "3По средней" Тогда
				ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("Подразделение, НоменклатурнаяГруппа, Продукция, СубконтоКт2, СубконтоКт3", ОперацияСписания.КорСубконто1, ОперацияСписания.КорСубконто2, ПараметрыСостоянияИсточника.Субконто1, ПараметрыСостоянияИсточника.Субконто2, ПараметрыСостоянияИсточника.Субконто3));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Лев(ОперацияСписания.КорСчет.Код, 1) = "2" Тогда
				ВстречныйВыпуск = СтруктураДопПараметров.ТаблицаВстречногоВыпуска.НайтиСтроки(Новый Структура("ПодразделениеПересчета, Продукция", ОперацияСписания.КорСубконто1, ПараметрыСостоянияИсточника.Субконто1));
				Если ВстречныйВыпуск.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если (СуммаКорректировки <> 0) ИЛИ (СуммаКорректировкиНУ <> 0) ИЛИ (СуммаКорректировкиПР <> 0) ИЛИ (СуммаКорректировкиВР <> 0) Тогда
			
			ОбратнаяПроводка = Ложь;
		 	ДопПроводкаДт = Ложь;
			ДопПроводкаКт = Ложь;
			ДопПроводка91 = Ложь;
			СчетДт = ОперацияСписания.КорСчет;
			СчетКт = ПараметрыСостоянияИсточника.Счет;
			
			Если СтруктураДопПараметров.УчетВПродажныхЦенах Тогда
				Если СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					ДопПроводкаКт = Истина;
					СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли СчетКт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					ДопПроводкаКт = Истина;
					СчетКт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;
				
				Если СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ Тогда
					ДопПроводкаДт = Истина;
					СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ;
				ИначеЕсли СчетДт = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ Тогда
					ДопПроводкаДт = Истина;
					СчетДт = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
				КонецЕсли;	
			КонецЕсли;
			
			Если    Лев(ОперацияСписания.КорСчет.Код, 1) = "6" 
				Или Лев(ОперацияСписания.КорСчет.Код, 1) = "7" Тогда 
				// корректировка возврата поставщику производится за счет внереализационных доходов/расходов
				ДопПроводка91 = Истина;
			КонецЕсли;
			
			Проводка = Движение.Добавить();
			
			Проводка.Период        = СтруктураДопПараметров.Период;
			Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
			Проводка.Активность    = Истина;
			Проводка.Организация   = СтруктураДопПараметров.Организация;
			Проводка.Содержание    = "Корректировка стоимости списания";
			
			Проводка.СчетДт = ОперацияСписания.КорСчет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
			
			Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
			
			Проводка.Сумма = СуммаКорректировки;
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ОперацияСписания.ПодразделениеКор, ПараметрыСостоянияИсточника.Подразделение);
			НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаКорректировкиНУ, СуммаКорректировкиНУ, СуммаКорректировкиПР, СуммаКорректировкиПР, СуммаКорректировкиВР, СуммаКорректировкиВР, Проводка);
			
			
			Если ДопПроводкаДт Тогда
				
				Проводка = Движение.Добавить();
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = "Корректировка стоимости списания";
				
				Проводка.СчетДт = ОперацияСписания.КорСчет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
				
				Проводка.СчетКт = СчетДт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОперацияСписания.КорСубконто3);
				Проводка.Сумма = - СуммаКорректировки;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ОперацияСписания.ПодразделениеКор, ОперацияСписания.ПодразделениеКор);
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаКорректировкиНУ, -СуммаКорректировкиНУ, -СуммаКорректировкиПР, -СуммаКорректировкиПР, -СуммаКорректировкиВР, -СуммаКорректировкиВР, Проводка);
				
			КонецЕсли;
			
			Если ДопПроводкаКт Тогда
				
				Проводка = Движение.Добавить();
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = "Корректировка стоимости списания";
				
				Проводка.СчетДт = СчетКт;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ПараметрыСостоянияИсточника.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ПараметрыСостоянияИсточника.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ПараметрыСостоянияИсточника.Субконто3);
				
				Проводка.СчетКт = ПараметрыСостоянияИсточника.Счет;
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ПараметрыСостоянияИсточника.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ПараметрыСостоянияИсточника.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ПараметрыСостоянияИсточника.Субконто3);
				Проводка.Сумма = - СуммаКорректировки;
				
				БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ПараметрыСостоянияИсточника.Подразделение, ПараметрыСостоянияИсточника.Подразделение);
					
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаКорректировкиНУ, -СуммаКорректировкиНУ, -СуммаКорректировкиПР, -СуммаКорректировкиПР, -СуммаКорректировкиВР, -СуммаКорректировкиВР, Проводка);
				
			КонецЕсли;
			
			Если ДопПроводка91 Тогда
				
				Проводка = Движение.Добавить();
				Проводка.Период        = СтруктураДопПараметров.Период;
				Проводка.Регистратор   = СтруктураДопПараметров.Регистратор;
				Проводка.Активность    = Истина;
				Проводка.Организация   = СтруктураДопПараметров.Организация;
				Проводка.Содержание    = "Корректировка стоимости списания";
				
				Если  СуммаКорректировки > 0 ИЛИ 
					((СуммаКорректировки = 0) И (СуммаКорректировкиНУ > 0 ИЛИ СуммаКорректировкиПР > 0 ИЛИ СуммаКорректировкиВР > 0)) Тогда
					Проводка.СчетДт = СчетВнереализационныхРасходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
					
					Проводка.СчетКт = ОперацияСписания.КорСчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, ОперацияСписания.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 2, ОперацияСписания.КорСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 3, ОперацияСписания.КорСубконто3);
					Проводка.Сумма = СуммаКорректировки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ПараметрыСостоянияИсточника.Подразделение, ПараметрыСостоянияИсточника.Подразделение);
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаКорректировкиНУ, СуммаКорректировкиНУ, СуммаКорректировкиПР, СуммаКорректировкиПР, СуммаКорректировкиВР, СуммаКорректировкиВР, Проводка);
					
				Иначе	
					Проводка.СчетКт = СчетВнереализационныхДоходов;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, 1, Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров);
					Проводка.СчетДт = ОперацияСписания.КорСчет;
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 1, ОперацияСписания.КорСубконто1);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 2, ОперацияСписания.КорСубконто2);
					БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, 3, ОперацияСписания.КорСубконто3);
			        Проводка.Сумма = - СуммаКорректировки;
					
					БухгалтерскийУчет.УстановитьПодразделенияПроводки(Проводка, ПараметрыСостоянияИсточника.Подразделение, ПараметрыСостоянияИсточника.Подразделение);
					
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(-СуммаКорректировкиНУ, -СуммаКорректировкиНУ, -СуммаКорректировкиПР, -СуммаКорректировкиПР, -СуммаКорректировкиВР, -СуммаКорректировкиВР, Проводка);
				КонецЕсли;
				
			КонецЕсли;
								
		КонецЕсли; 
	КонецЦикла; 
		
КонецПроцедуры // ДобавитьЗаписиПоВнешнемуСписанию()

Функция ПолучитьТаблицуОперацийСписания(ТаблицаТоваров, ДатаНач, ДатаКон, СтруктураДопПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.Подразделение,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто1,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто2,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ КАК Субконто3,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.ПодразделениеКор,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.КорСубконто2,
		|	ВложенныйЗапрос.КорСубконто3,
		|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ КАК Комплектация,
		|	СУММА(ВложенныйЗапрос.Сумма) КАК Сумма,
		|	СУММА(ВложенныйЗапрос.СуммаНУ) КАК СуммаНУ,
		|	СУММА(ВложенныйЗапрос.СуммаПР) КАК СуммаПР,
		|	СУММА(ВложенныйЗапрос.СуммаВР) КАК СуммаВР,
		|	СУММА(ВложенныйЗапрос.Количество) КАК Количество
		|ИЗ
		|	(ВЫБРАТЬ
		|		ТаблицаСписания.Счет КАК Счет,
		|		ЕСТЬNULL(ТаблицаСписания.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|		ТаблицаСписания.Субконто1 КАК Субконто1,
		|		ТаблицаСписания.Субконто2 КАК Субконто2,
		|		ТаблицаСписания.Субконто3 КАК Субконто3,
		|		ТаблицаСписания.КорСчет КАК КорСчет,
		|		ЕСТЬNULL(ТаблицаСписания.ПодразделениеКор, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК ПодразделениеКор,
		|		ВЫБОР КОГДА (ТаблицаСписания.КорСчет В ИЕРАРХИИ (&СписокСчетов)) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК КорСчетНоменклатуры,
		|		ТаблицаСписания.КорСубконто1 КАК КорСубконто1,
		|		ТаблицаСписания.КорСубконто2 КАК КорСубконто2,
		|		ТаблицаСписания.КорСубконто3 КАК КорСубконто3,
		|		ВЫБОР КОГДА ТаблицаСписания.Субконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто1 КОГДА ТаблицаСписания.Субконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто2 КОГДА ТаблицаСписания.Субконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.Субконто3 ИНАЧЕ NULL КОНЕЦ КАК Номенклатура,
		|		ВЫБОР КОГДА ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто1 КОГДА ТаблицаСписания.КорСубконто2 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто2 КОГДА ТаблицаСписания.КорСубконто3 ССЫЛКА Справочник.Номенклатура ТОГДА ТаблицаСписания.КорСубконто3 ИНАЧЕ NULL КОНЕЦ КАК КорНоменклатура,
		|		ВЫБОР КОГДА (ТаблицаСписания.СуммаОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаОборотКт КОНЕЦ КАК Сумма,
		|		ВЫБОР КОГДА (ТаблицаСписания.СуммаНУОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаНУОборотКт КОНЕЦ КАК СуммаНУ,
		|		ВЫБОР КОГДА (ТаблицаСписания.СуммаПРОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаПРОборотКт КОНЕЦ КАК СуммаПР,
		|		ВЫБОР КОГДА (ТаблицаСписания.СуммаВРОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.СуммаВРОборотКт КОНЕЦ КАК СуммаВР,
		|		ВЫБОР КОГДА (ТаблицаСписания.КоличествоОборотКт) ЕСТЬ NULL  ТОГДА 0 ИНАЧЕ ТаблицаСписания.КоличествоОборотКт КОНЕЦ КАК Количество
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, Запись, Счет В ИЕРАРХИИ (&СписокСчетов), , Организация = &Организация , , ) КАК ТаблицаСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|		ПО ТаблицаСписания.Регистратор = Хозрасчетный.Регистратор И ТаблицаСписания.НомерСтроки = Хозрасчетный.НомерСтроки
		|
		|	ГДЕ
		|		(НЕ Хозрасчетный.НеКорректироватьСтоимостьАвтоматически И (
		//Выделяем возвраты от покупателей по реализациям текущего периода и отражаем их как сторно реализации
		//Возвраты по реализациям предыдущих периодов или с неизвестной датой реализации будут учтены как поступления
		|		НЕ (ВЫБОР КОГДА (ТаблицаСписания.Регистратор ССЫЛКА Документ.ВозвратТоваровОтПокупателя) 
		|			ТОГДА (ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата < &ДатаНач 
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад <> ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Склад 
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Склад ЕСТЬ NULL
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаСписания.Регистратор КАК Документ.ВозвратТоваровОтПокупателя).Сделка.Дата ЕСТЬ NULL) 
		|		ИНАЧЕ ЛОЖЬ КОНЕЦ))
		//Конец условия по возвратам
		|		) И
		|		НЕ (ТаблицаСписания.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену И (ТаблицаСписания.КоличествоОборотКт < 0 ИЛИ ТаблицаСписания.СуммаОборотКт < 0)) И
		|		((ТаблицаСписания.Регистратор ССЫЛКА Документ.РегламентнаяОперация) ИЛИ
		|		(ТаблицаСписания.КоличествоОборотКт <> 0 ИЛИ ТаблицаСписания.СуммаОборотКт <> 0) И (НЕ(ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров) Или (ТаблицаСписания.Регистратор ССЫЛКА Документ.ПеремещениеТоваров И ТаблицаСписания.КорСубконто1 ССЫЛКА Справочник.Склады)))
		|
		|		) КАК ВложенныйЗапрос
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Хозрасчетный.Ссылка КАК Счет,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 1 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто1,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 2 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто2,
		|			МАКСИМУМ(ВЫБОР КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3 ТОГДА ХозрасчетныйВидыСубконто.Суммовой ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Субконто3
		|		ИЗ
		|			ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
		|				ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|				ПО ХозрасчетныйВидыСубконто.Ссылка = Хозрасчетный.Ссылка
		|		
		|		ГДЕ
		|			Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Хозрасчетный.Ссылка) КАК СуммовойУчет
		|		ПО ВложенныйЗапрос.Счет = СуммовойУчет.Счет
		|
		|ГДЕ
		|	((НЕ ВложенныйЗапрос.КорСчетНоменклатуры) ИЛИ
		|	(ВЫБОР КОГДА (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ВложенныйЗапрос.Номенклатура <> ВложенныйЗапрос.КорНоменклатура КОНЕЦ))";
		
		Если ТаблицаТоваров <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И
			|		(ВложенныйЗапрос.Номенклатура В (&СписокТоваров))";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.ПодразделениеКор,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.КорСубконто2,
		|	ВложенныйЗапрос.КорСубконто3,
		|	ВЫБОР КОГДА (НЕ (ВложенныйЗапрос.КорНоменклатура) ЕСТЬ NULL) И (ВложенныйЗапрос.КорСчетНоменклатуры) ТОГДА ВложенныйЗапрос.КорНоменклатура ИНАЧЕ НЕОПРЕДЕЛЕНО КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто1 ТОГДА ВложенныйЗапрос.Субконто1 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто2 ТОГДА ВложенныйЗапрос.Субконто2 ИНАЧЕ Неопределено КОНЕЦ,
		|	ВЫБОР КОГДА СуммовойУчет.Субконто3 ТОГДА ВложенныйЗапрос.Субконто3 ИНАЧЕ Неопределено КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВложенныйЗапрос.Счет,
		|	ВложенныйЗапрос.КорСчет,
		|	ВложенныйЗапрос.Подразделение,
		|	ВложенныйЗапрос.ПодразделениеКор,
		|	ВложенныйЗапрос.КорСубконто1,
		|	ВложенныйЗапрос.КорСубконто2,
		|	ВложенныйЗапрос.КорСубконто3";
		
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
	Запрос.УстановитьПараметр("Организация", СтруктураДопПараметров.Организация);
	Запрос.УстановитьПараметр("СписокСчетов", СписокСчетовУчетаНоменклатуры(СтруктураДопПараметров.Организация, ДатаКон));
	Запрос.УстановитьПараметр("СчетаРасчетов", ПолучитьСчетаРасчетов());
	Запрос.УстановитьПараметр("СписокТоваров", ТаблицаТоваров);
	
	Таб = Запрос.Выполнить().Выгрузить();
	Таб.Индексы.Добавить("Счет,Подразделение,Субконто1,Субконто2,Субконто3");
	
	СтруктураДопПараметров.Вставить("ТаблицаОперацийСписания", Таб);
	
	МассивКомплектов = Таб.ВыгрузитьКолонку("Комплектация");
	
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивКомплектов);
	ОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивКомплектов);
	
	СтруктураДопПараметров.Вставить("МассивКомплектов", МассивКомплектов);
	
	Возврат Таб;
		
КонецФункции // ПолучитьТаблицуОперацийСписания()

Процедура КорректировкаСтоимости(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров) Экспорт

	УчетВПродажныхЦенах = Ложь;
	
	УчетнаяПолитикаНеЗадана = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(СтруктураДопПараметров.Период, УчетнаяПолитикаНеЗадана, СтруктураДопПараметров.Организация);
	Если УчетнаяПолитика.Количество() > 0 Тогда	
		Если (УчетнаяПолитика.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости) Тогда
			УчетВПродажныхЦенах = Истина;
		КонецЕсли;
	КонецЕсли;
		
	СтруктураДопПараметров.Вставить("УчетВПродажныхЦенах", УчетВПродажныхЦенах);
	
	// В структуру дополнительных параметров добавим таблицу операции списания
	ПолучитьТаблицуОперацийСписания(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);
	РассчитатьСписаниеПоСредней(МассивНоменклатуры, НачДата, КонДата, СтруктураДопПараметров);
	НаборЗаписей = СтруктураДопПараметров.Регистратор.Движения["Хозрасчетный"];
	Если НаборЗаписей.Количество() > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	МассивКомплектов = СтруктураДопПараметров.МассивКомплектов;
	МассивРассчитанныхКомплектов = Новый Массив();
	
	Пока МассивКомплектов.Количество() > 0 Цикл
		
		СтруктураДопПараметров.Вставить("ТаблицаТоваров", МассивКомплектов);
		ПолучитьТаблицуОперацийСписания(МассивКомплектов, НачДата, КонДата, СтруктураДопПараметров);
	    РассчитатьСписаниеПоСредней(МассивКомплектов, НачДата, КонДата, СтруктураДопПараметров);
		НаборЗаписей = СтруктураДопПараметров.Регистратор.Движения["Хозрасчетный"];
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Записать(Ложь);
		КонецЕсли;
		
		//Запомним обработанную номенклатуру
		Для Каждого Элемент Из МассивКомплектов Цикл
			МассивРассчитанныхКомплектов.Добавить(Элемент);
		КонецЦикла;
		
		МассивКомплектов.Очистить();
		
		//Заполним новый массив комплектов с проверкой на наличие такой номенклатуры
		//в составе обработанных комплектов. Это нужно что бы исключить зацикливание
		//в случаях Ном1 -> Компл1 -> Ном1
		Для Каждого Элемент Из СтруктураДопПараметров.МассивКомплектов Цикл
			Если МассивРассчитанныхКомплектов.Найти(Элемент) = Неопределено Тогда
				МассивКомплектов.Добавить(Элемент);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

