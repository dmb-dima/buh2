
// Процедура заполняет счет учета наличных денежных средств по умолчанию.
//
Процедура ЗаполнитьСчетНаличныхДенежныхСредствПоУмолчанию(ДокументОбъект)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)
	 ИЛИ ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	Иначе
		ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизацииВал;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСчетНаличныхДенежныхСредствПоУмолчанию()

// Процедура заполняет счет учета безналичных денежных средств по умолчанию.
//
Процедура ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию(ДокументОбъект, РеквизитСчет)
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента)
	 ИЛИ ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		РеквизитСчет = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	Иначе
		РеквизитСчет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию()

// Процедура заполняет счета расчетов с покупателем по умолчанию.
//
Процедура ЗаполнитьСчетаРасчетовСПокупателемПоУмолчанию(ДокументОбъект)
	
	Для Каждого СтрокаТаблицы Из ДокументОбъект.РасшифровкаПлатежа Цикл
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			ДокументОбъект.Организация, 
			ДокументОбъект.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента
		);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТаблицы.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетовСПокупателемПоУмолчанию()

// Процедура заполняет счета расчетов с поставщиком по умолчанию.
//
Процедура ЗаполнитьСчетаРасчетовСПоставщикомПоУмолчанию(ДокументОбъект)
	
	Для Каждого СтрокаТаблицы Из ДокументОбъект.РасшифровкаПлатежа Цикл
	
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			ДокументОбъект.Организация, 
			ДокументОбъект.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента
		);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТаблицы.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетовСПоставщикомПоУмолчанию()

// Процедура заполняет счета расчетов с контрагентом в отчете комитенту по умолчанию.
//
Процедура ЗаполнитьСчетаРасчетовОтчетКомитентуПоУмолчанию(ДокументОбъект)
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
		ДокументОбъект.Организация, 
		ДокументОбъект.Контрагент,
		ДокументОбъект.ДоговорКонтрагента
	);
	
	ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	Если ДокументОбъект.УдержатьВознаграждение Тогда
		ДокументОбъект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетРасчетовСКомитентом;
	Иначе
		ДокументОбъект.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетовОтчетКомитентуПоУмолчанию()

// Процедура заполняет счета расчетов с контрагентом в отчете о розничных продажах по умолчанию.
//
Процедура ЗаполнитьСчетаРасчетовОтчетОРозничныхПродажахПоУмолчанию(ДокументОбъект)
	
	Для Каждого СтрокаТаблицы Из ДокументОбъект.Оплата Цикл
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			ДокументОбъект.Организация, 
			СтрокаТаблицы.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента
		);
		СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетовОтчетОРозничныхПродажахПоУмолчанию()

// Процедура заполняет счета номенклатуры в отчете комитенту по умолчанию.
//
Процедура ЗаполнитьСчетаНоменклатурыОтчетКомитентуПоУмолчанию(ДокументОбъект)
	
	СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
		ДокументОбъект.Организация,
		ДокументОбъект.УслугаПоВознаграждению
	);

	Если Не ЗначениеЗаполнено(ДокументОбъект.СчетУчетаНДСПоРеализации) Тогда
		ДокументОбъект.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДокументОбъект.СчетДоходов) Тогда
		ДокументОбъект.СчетДоходов = СчетаУчета.СчетДоходов;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаНоменклатурыОтчетКомитентуПоУмолчанию()

// Процедура заполняет счет номенклатуры в шапке документа по умолчанию.
//
Процедура ЗаполнитьСчетНоменклатурПоУмолчанию(ДокументОбъект)
	
	Если Не ЗначениеЗаполнено(ДокументОбъект.СчетУчета) Тогда
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация,
			ДокументОбъект.Номенклатура,
			ДокументОбъект.Склад
		);
		ДокументОбъект.СчетУчета = СчетаУчета.СчетУчета;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНоменклатурПоУмолчанию()

// Процедура заполняет счета расчетов с контрагентом в авансовом учете по умолчанию.
//
Процедура ЗаполнитьСчетаРасчетовАвансовыйОтчетПоУмолчанию(ДокументОбъект)
	
	Для Каждого СтрокаТаблицы Из ДокументОбъект.ОплатаПоставщикам Цикл
		
		Реквизиты = РеквизитыДоговораКонтрагента(СтрокаТаблицы.ДоговорКонтрагента);
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
			ДокументОбъект.Организация, 
			Реквизиты.Контрагент,
			СтрокаТаблицы.ДоговорКонтрагента
		);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовПоАвансам) Тогда
			СтрокаТаблицы.СчетУчетаРасчетовПоАвансам = СчетаУчета.СчетАвансов;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом) Тогда
			Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовСКомитентом;
			Иначе
				СтрокаТаблицы.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетовАвансовыйОтчетПоУмолчанию()

// Процедура заполняет счета расчетов с контрагентом в корректировке долга по умолчанию.
//
Процедура ЗаполнитьСчетаРасчетовКорректировкаДолгаПоУмолчанию(ДокументОбъект)
	
	Для Каждого СтрокаТаблицы Из ДокументОбъект.СуммыДолга Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаРасчетов) Тогда
			
			Реквизиты = РеквизитыДоговораКонтрагента(СтрокаТаблицы.ДоговорКонтрагента);
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(
				ДокументОбъект.Организация, 
				Реквизиты.Контрагент,
				СтрокаТаблицы.ДоговорКонтрагента
			);
			
			Если Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
			 ИЛИ Реквизиты.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			Иначе
				СтрокаТаблицы.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаРасчетовКорректировкаДолгаПоУмолчанию()

// Процедура Заполняет счета в табличной части документов закупки.
//
Процедура ЗаполнитьСчетаУчетаНоменклатурыЗакупка(ДокументОбъект, ТабличнаяЧасть, ЭтоУслуги, ЕстьСчетУчетаНДС)

	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		Если ЭтоУслуги Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат)
			 ИЛИ Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
					ДокументОбъект.Организация,
					СтрокаТаблицы.Номенклатура,
					ДокументОбъект.Склад
				);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетЗатрат) Тогда
				СтрокаТаблицы.СчетЗатрат = СчетаУчета.СчетУчета;
				СтрокаТаблицы.Субконто1	= СчетаУчета.Субконто1;
				СтрокаТаблицы.Субконто2 = СчетаУчета.Субконто2;
				СтрокаТаблицы.Субконто3 = СчетаУчета.Субконто3;
				
				СтрокаТаблицы.СчетЗатратНУ = СчетаУчета.СчетУчета;
				СтрокаТаблицы.СубконтоНУ1 = СчетаУчета.Субконто1;
				СтрокаТаблицы.СубконтоНУ2 = СчетаУчета.Субконто2;
				СтрокаТаблицы.СубконтоНУ3 = СчетаУчета.Субконто3;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДС) Тогда
				СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
			КонецЕсли;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				
				СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
					ДокументОбъект.Организация,
					СтрокаТаблицы.Номенклатура,
					ДокументОбъект.Склад
				);
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
				Если ЕстьСчетУчетаНДС Тогда
					СтрокаТаблицы.СчетУчетаНДС = СчетаУчета.СчетУчетаНДС;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаНоменклатурыЗакупка()

// Процедура Заполняет счета в табличной части документов продажи.
//
Процедура ЗаполнитьСчетаУчетаНоменклатурыПродажа(ДокументОбъект, ТабличнаяЧасть, ЭтоУслуги, ЕстьКомиссия)

	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация,
			СтрокаТаблицы.Номенклатура,
			ДокументОбъект.Склад
		);
		Если Не ЭтоУслуги Тогда
			Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
				СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
				Если ЕстьКомиссия Тогда
					СтрокаТаблицы.ПереданныеСчетУчета = СчетаУчета.СчетПередачи;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов  = СчетаУчета.СчетДоходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;

		Если СтрокаТаблицы.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТаблицы.Субконто = Новый(СтрокаТаблицы.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТаблицы.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТаблицы.Субконто = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Субконто = Неопределено;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаНоменклатурыПродажа()

// Процедура Заполняет счета в табличной части документов отчет комиссионера.
//
Процедура ЗаполнитьСчетаУчетаНоменклатурыОтчетКомиссионера(ДокументОбъект, ТабличнаяЧасть)

	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация,
			СтрокаТаблицы.Номенклатура,
			Неопределено // Склад
		);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета  = СчетаУчета.СчетПередачи;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетДоходов) Тогда
			СтрокаТаблицы.СчетДоходов  = СчетаУчета.СчетДоходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетРасходов) Тогда
			СтрокаТаблицы.СчетРасходов = СчетаУчета.СчетРасходов;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчетаНДСПоРеализации) Тогда
			СтрокаТаблицы.СчетУчетаНДСПоРеализации = СчетаУчета.СчетУчетаНДСПродажи;
		КонецЕсли;

		Если СтрокаТаблицы.СчетДоходов.ВидыСубконто.Количество() > 0 Тогда
			СтрокаТаблицы.Субконто = Новый(СтрокаТаблицы.СчетДоходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
			Если ТипЗнч(СтрокаТаблицы.Субконто) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				СтрокаТаблицы.Субконто = СтрокаТаблицы.Номенклатура.НоменклатурнаяГруппа;
			КонецЕсли;
		Иначе
			СтрокаТаблицы.Субконто = Неопределено;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаНоменклатурыОтчетКомиссионера()

// Процедура заполняет счета в табличной части документов требование - накладная.
//
Процедура ЗаполнитьСчетаУчетаНоменклатурыТребованиеНакладная(ДокументОбъект)

	Для Каждого СтрокаТаблицы Из ДокументОбъект.Материалы Цикл
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация,
			СтрокаТаблицы.Номенклатура,
			ДокументОбъект.Склад
		);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Счет) Тогда
			СтрокаТаблицы.Счет = СчетаУчета.СчетУчета;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаНоменклатурыТребованиеНакладная()

// Процедура заполняет счета в табличной части документов перемещения товаров.
//
Процедура ЗаполнитьСчетаУчетаНоменклатурыПеремещениеТоваров(ДокументОбъект)

	Для Каждого СтрокаТаблицы Из ДокументОбъект.Товары Цикл
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация,
			СтрокаТаблицы.Номенклатура,
			ДокументОбъект.СкладОтправитель
		);
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчет.ПолучитьСчетаУчетаНоменклатуры(
			ДокументОбъект.Организация,
			СтрокаТаблицы.Номенклатура,
			ДокументОбъект.СкладПолучатель
		);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НовыйСчетУчета) Тогда
			СтрокаТаблицы.НовыйСчетУчета = СчетаУчета.СчетУчета;
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаНоменклатурыПеремещениеТоваров()

// Процедура заполняет счета учета товаров, принятых на комиссию.
//
Процедура ЗаполнитьСчетаУчетаПринятыхТоваров(ТабличнаяЧасть)
	
	Для Каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.СчетУчета) Тогда
			СтрокаТаблицы.СчетУчета = ПланыСчетов.Хозрасчетный.ТоварыНаСкладе;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаПринятыхТоваров()

// Процедура получает вид договора контрагента.
//
Функция РеквизитыДоговораКонтрагента(ДоговорКонтрагента)
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ДанныеСправочника.ВидДоговора КАК ВидДоговора,
	|	ДанныеСправочника.Владелец КАК Контрагент
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ВидДоговора = Выборка.ВидДоговора;
		Контрагент = Выборка.Контрагент;
	Иначе
		ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка();
		Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	СтруктураРеквизиты = Новый Структура("ВидДоговора, Контрагент",
		ВидДоговора,
		Контрагент
	);
	
	Возврат СтруктураРеквизиты;
	
КонецФункции // РеквизитыДоговораКонтрагента()

// Процедура заполняет бухгалтерские реквизиты документа значениями по умолчению.
//
Процедура ЗаполнитьСчетаПоУмолчанию(ДокументОбъект) Экспорт
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
		
		ЗаполнитьСчетНаличныхДенежныхСредствПоУмолчанию(ДокументОбъект);
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя Тогда
			ЗаполнитьСчетаРасчетовСПокупателемПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика Тогда
			ЗаполнитьСчетаРасчетовСПоставщикомПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке Тогда
			ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию(
				ДокументОбъект,
				ДокументОбъект.СчетУчетаРасчетовСКонтрагентом
			);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
		
		ЗаполнитьСчетНаличныхДенежныхСредствПоУмолчанию(ДокументОбъект);
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю Тогда
			ЗаполнитьСчетаРасчетовСПокупателемПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
			ЗаполнитьСчетаРасчетовСПоставщикомПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
			ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию(
				ДокументОбъект,
				ДокументОбъект.СчетУчетаРасчетовСКонтрагентом
			);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		
		ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию(
			ДокументОбъект,
			ДокументОбъект.СчетБанк
		);
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
			ЗаполнитьСчетаРасчетовСПокупателемПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика Тогда
			ЗаполнитьСчетаРасчетовСПоставщикомПоУмолчанию(ДокументОбъект);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		
		ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию(
			ДокументОбъект,
			ДокументОбъект.СчетБанк
		);
		Если ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю Тогда
			ЗаполнитьСчетаРасчетовСПокупателемПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику Тогда
			ЗаполнитьСчетаРасчетовСПоставщикомПоУмолчанию(ДокументОбъект);
		ИначеЕсли ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			ЗаполнитьСчетБезналичныхДенежныхСредствПоУмолчанию(
				ДокументОбъект,
				ДокументОбъект.СчетУчетаРасчетовСКонтрагентом
			);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеТоваровУслуг") Тогда
		
		ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		Если РеквизитыДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента).ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЗаполнитьСчетаУчетаПринятыхТоваров(ДокументОбъект.Товары);
		Иначе
			ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
				ДокументОбъект,
				ДокументОбъект.Товары,
				Ложь, // ЭтоУслуги
				Истина // ЕстьСчетУчетаНДС
			);
			ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
				ДокументОбъект,
				ДокументОбъект.Услуги,
				Истина, // ЭтоУслуги
				Истина // ЕстьСчетУчетаНДС
			);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровПоставщику") Тогда
		
		Если Не ЗначениеЗаполнено(ДокументОбъект.СтатьяДоходовИРасходов) Тогда
			ДокументОбъект.СтатьяДоходовИРасходов = Справочники.ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров;
		КонецЕсли;
		ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		Если РеквизитыДоговораКонтрагента(ДокументОбъект.ДоговорКонтрагента).ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ЗаполнитьСчетаУчетаПринятыхТоваров(ДокументОбъект.Товары);
		Иначе
			ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
				ДокументОбъект,
				ДокументОбъект.Товары,
				Ложь, // ЭтоУслуги
				Истина // ЕстьСчетУчетаНДС
			);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РеализацияТоваровУслуг") Тогда
		
		ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		ЗаполнитьСчетаУчетаНоменклатурыПродажа(
			ДокументОбъект,
			ДокументОбъект.Товары,
			Ложь, // ЭтоУслуги
			Истина // ЕстьКомиссия
		);
		ЗаполнитьСчетаУчетаНоменклатурыПродажа(
			ДокументОбъект,
			ДокументОбъект.Услуги,
			Истина, // ЭтоУслуги
			Ложь // ЕстьКомиссия
		);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВозвратТоваровОтПокупателя") Тогда
		
		ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		ЗаполнитьСчетаУчетаНоменклатурыПродажа(
			ДокументОбъект,
			ДокументОбъект.Товары,
			Ложь, // ЭтоУслуги
			Истина // ЕстьКомиссия
		);
		ДокументОбъект.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетОРозничныхПродажах") Тогда
		
		ЗаполнитьСчетНаличныхДенежныхСредствПоУмолчанию(ДокументОбъект);
		ЗаполнитьСчетаУчетаНоменклатурыПродажа(
			ДокументОбъект,
			ДокументОбъект.Товары,
			Ложь, // ЭтоУслуги
			Ложь // ЕстьКомиссия
		);
		ЗаполнитьСчетаРасчетовОтчетОРозничныхПродажахПоУмолчанию(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетКомиссионераОПродажах") Тогда
		
		ДокументОбъект.ЗаполнитьСчетаУчетаРасчетов();
		ЗаполнитьСчетаУчетаНоменклатурыОтчетКомиссионера(
			ДокументОбъект,
			ДокументОбъект.Товары
		);
		Если Не ЗначениеЗаполнено(ДокументОбъект.СчетУчетаЗатрат) Тогда
			ДокументОбъект.СчетУчетаЗатрат = ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтчетКомитентуОПродажах") Тогда	
		
		ЗаполнитьСчетаРасчетовОтчетКомитентуПоУмолчанию(ДокументОбъект);
		ЗаполнитьСчетаНоменклатурыОтчетКомитентуПоУмолчанию(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.АвансовыйОтчет") Тогда	
		
		ЗаполнитьСчетаРасчетовАвансовыйОтчетПоУмолчанию(ДокументОбъект);
		ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
			ДокументОбъект,
			ДокументОбъект.Товары,
			Ложь, // ЭтоУслуги
			Истина // ЕстьСчетУчетаНДС
		);
		ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
			ДокументОбъект,
			ДокументОбъект.Прочее,
			Истина, // ЭтоУслуги
			Истина // ЕстьСчетУчетаНДС
		);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КорректировкаДолга") Тогда
		
		ЗаполнитьСчетаРасчетовКорректировкаДолгаПоУмолчанию(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.КомплектацияНоменклатуры") Тогда
		
		ЗаполнитьСчетНоменклатурПоУмолчанию(ДокументОбъект);
		ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
			ДокументОбъект,
			ДокументОбъект.Комплектующие,
			Ложь, // ЭтоУслуги
			Ложь // ЕстьСчетУчетаНДС
		);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОприходованиеТоваров") Тогда
		
		ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
			ДокументОбъект,
			ДокументОбъект.Товары,
			Ложь, // ЭтоУслуги
			Ложь // ЕстьСчетУчетаНДС
		);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеТоваров") Тогда
		
		ЗаполнитьСчетаУчетаНоменклатурыЗакупка(
			ДокументОбъект,
			ДокументОбъект.Товары,
			Ложь, // ЭтоУслуги
			Ложь // ЕстьСчетУчетаНДС
		);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ТребованиеНакладная") Тогда
		
		ЗаполнитьСчетаУчетаНоменклатурыТребованиеНакладная(ДокументОбъект);
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПеремещениеТоваров") Тогда
		
		ЗаполнитьСчетаУчетаНоменклатурыПеремещениеТоваров(ДокументОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыДокументаПоУмолчанию()
