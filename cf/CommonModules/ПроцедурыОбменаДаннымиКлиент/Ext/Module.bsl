

Процедура ИзменитьНастройкиВыгрузкиДляВыделенныхСтрок(ЭлементыФормы) Экспорт
	
	ВыделенныеСтроки = ЭлементыФормы.НастройкаВыгрузкиДанных.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений();
	СписокЗначений.Добавить("Выгружать");
	СписокЗначений.Добавить("Только по ссылке");
	СписокЗначений.Добавить("Не выгружать");
	
	ВыбранныйЭлемент = СписокЗначений.ВыбратьЭлемент("Укажите вариант выгрузки", СписокЗначений.НайтиПоЗначению(ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(ВыделенныеСтроки[0])));
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаВыбора Из ВыделенныеСтроки Цикл
		
		УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(ЭлементыФормы, ВыбранныйЭлемент.Значение, СтрокаВыбора);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ТекстЭлемента = ПроцедурыОбменаДаннымиКлиент.ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(ДанныеСтроки);
		ОформлениеСтроки.Ячейки.НастройкаВыгрузки.УстановитьТекст(ТекстЭлемента);
				
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(ДанныеСтроки) Экспорт
	
	Если НЕ ДанныеСтроки.ВыгружатьДанные Тогда		
		Возврат "Не выгружать";			
	Иначе		
		Если ДанныеСтроки.ВыгружатьПоСсылке Тогда
			Возврат "Только по ссылке";				
		Иначе
			Возврат "Выгружать";				
		КонецЕсли;		
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьИмяВыгрузкиЭлементаПоСтрокеНастройки(Элемент) Экспорт
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяКолонка.Имя <> "НастройкаВыгрузки" Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущаяКолонка.ЭлементУправления.Значение = ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(ЭлементыФормы, Значение, СтрокаВыбора = Неопределено) Экспорт
	
	Если СтрокаВыбора = Неопределено Тогда
		СтрокаВыбора = ЭлементыФормы.НастройкаВыгрузкиДанных.ТекущиеДанные;
	КонецЕсли;
	
	Если Значение = "Не выгружать" Тогда
		
		СтрокаВыбора.ВыгружатьДанные = Ложь;
		СтрокаВыбора.ВыгружатьПоСсылке = Ложь;
		
	ИначеЕсли Значение = "Только по ссылке" Тогда
		
		СтрокаВыбора.ВыгружатьДанные = Истина;
		СтрокаВыбора.ВыгружатьПоСсылке = Истина;
		
	ИначеЕсли Значение = "Выгружать" Тогда
		
		СтрокаВыбора.ВыгружатьДанные = Истина;
		СтрокаВыбора.ВыгружатьПоСсылке = Ложь;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеПрефиксаДляОбъектов(Элемент) Экспорт
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Для НомерПозиции = 1 По СтрДлина(Элемент.Значение) Цикл
		
		СимволПрефикса = Сред(Элемент.Значение, НомерПозиции, 1);
		
		Если СимволПрефикса >= "0"
			И СимволПрефикса <= "9" Тогда
			
			Предупреждение("Не рекомендуется в префиксах использовать цифры. Это может привести к ошибочной нумерации объектов или к ошибкам при обмене данными");
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСообщениеСИнформациейОМетаданном(МетаданныеОбъекта)
	
	ИмяТаблицыДляПоискаЗарегистрированных = "";
						   
	Если МетаданныеОбъекта = "Константы" Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Константы";
	
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Справочник: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Документ: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "План видов характеристик: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "План счетов: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр сведений: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "План видов расчета: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр накопления: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр бухгалтерии: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Регистр расчета: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Бизнес-процесс: " + МетаданныеОбъекта.Имя;
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Задача: " + МетаданныеОбъекта.Имя;
			
	ИначеЕсли Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Последовательность: " + МетаданныеОбъекта.Имя;
		
	КонецЕсли;
	
	Возврат ИмяТаблицыДляПоискаЗарегистрированных;
	
КонецФункции
	
Функция СформироватьИмяКонфигурацииДляОтображенияПользователю(СтруктураКонвертации, ИмяОпределения)
	
	ИмяКонфигурации = "";
	СтруктураКонвертации.Свойство("СинонимКонфигурации" + ИмяОпределения + "а", ИмяКонфигурации);	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда
		СтруктураКонвертации.Свойство(ИмяОпределения, ИмяКонфигурации);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда
		Возврат "";
	КонецЕсли;
	
	ТочнаяВерсия = "";
	СтруктураКонвертации.Свойство("ВерсияКонфигурации" + ИмяОпределения + "а", ТочнаяВерсия);
	
	Если ЗначениеЗаполнено(ТочнаяВерсия) Тогда
		ИмяКонфигурации = ИмяКонфигурации + " (" + ТочнаяВерсия + ")";
	КонецЕсли;
	
	Возврат ИмяКонфигурации;
		
КонецФункции	

Процедура ПоказатьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ = Истина) Экспорт
	
	ИнформацияОПравилах = ПолучитьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ);
	Предупреждение(ИнформацияОПравилах);
	
КонецПроцедуры
	
Функция ПолучитьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ = Истина) Экспорт
	
	Попытка
		
		Если ЭтоВыгрузкаИзТекущейИБ Тогда
			ТекстПравил = НастройкиОбмена.ПравилаОбмена.Получить();
		Иначе
			ТекстПравил = НастройкиОбмена.ПравилаОбменаДляПриемника.Получить();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекстПравил) Тогда
			Возврат "Правила обмена не заданы";
		КонецЕсли;
		
		Попытка
			ПравилаОбменаПустые = Ложь;
			
			МакетПустыхПравил = ПолучитьОбщийМакет("ПравилаОбмена_ПустыеПравила");
			ТекстПустыхПравил = МакетПустыхПравил.ПолучитьТекст();
			
			ПравилаОбменаПустые = (ТекстПравил = ТекстПустыхПравил);
			
		Исключение
			ПравилаОбменаПустые = Ложь;
		КонецПопытки;
		
		Если ПравилаОбменаПустые Тогда
			Возврат "Правила обмена пустые"
		КонецЕсли;
		
				
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
		ОбработкаОбменаДаннымиXML.РежимОбмена = "Выгрузка";
		
		// загружаем только заголовок правил
		ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка", , ИСТИНА);
		
		ИмяИсточника = СформироватьИмяКонфигурацииДляОтображенияПользователю(ОбработкаОбменаДаннымиXML.Конвертация, "Источник");
		ИмяПриемника = СформироватьИмяКонфигурацииДляОтображенияПользователю(ОбработкаОбменаДаннымиXML.Конвертация, "Приемник");
		
		// нужно сформировать строку для каких конфигураций предназначены правила обмена
		Если Не ПустаяСтрока(ИмяИсточника) 
			И Не ПустаяСтрока(ИмяПриемника) Тогда
			
			Возврат "Правила обмена для выгрузки из """ + ИмяИсточника + """ и загрузки в """ + ИмяПриемника + """";
			
		КонецЕсли;
		
		Возврат "Нет данных о конфигурациях правил обмена";
		
	 Исключение
			
		// в режиме клиента выводим информацию об ошибке
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при получении информации о правилах обмена: " + ОписаниеОшибки());
						   
	КонецПопытки;
		
КонецФункции	

Процедура ПоказатьСоответствиеУзлаПланаОбменаИПравилОбмена(УзелПланаОбмена, ОбработкаОбменаДаннымиXML, ТаблицаТиповПравилВыгрузки)
	
	ТаблицаМетаданныхПланаОбмена = Новый ТаблицаЗначений;
	ТаблицаМетаданныхПланаОбмена.Колонки.Добавить("МетаданныеОбъекта");
	
	// анализируем информацию по плану обмена
	МетаданныеУзлаОбмена = УзелПланаОбмена.Метаданные();
	НужноДобавитьКонстанты = Ложь;
	Для Каждого СтрокаМетаданных Из МетаданныеУзлаОбмена.Состав Цикл
		
		Если Метаданные.Константы.Содержит(СтрокаМетаданных.Метаданные) Тогда
			
			НужноДобавитьКонстанты = Истина;
			
		Иначе
			
			СтрокаТаблицы = ТаблицаМетаданныхПланаОбмена.Добавить();
			СтрокаТаблицы.МетаданныеОбъекта = СтрокаМетаданных.Метаданные;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноДобавитьКонстанты Тогда
		
		СтрокаТаблицы = ТаблицаМетаданныхПланаОбмена.Добавить();
		СтрокаТаблицы.МетаданныеОбъекта = "Константы";
		
	КонецЕсли;

	
	ЕстьВПравилеНоНетвПлане = Ложь;
	СписокРезультата = Новый СписокЗначений;
	
	// остается сравнить две таблицы и показать различия...
	Для Каждого СтрокаТаблицы Из ТаблицаТиповПравилВыгрузки Цикл
		
		СтрокаПланаОбмена = ТаблицаМетаданныхПланаОбмена.Найти(СтрокаТаблицы.МетаданныеОбъекта, "МетаданныеОбъекта"); 
		Если СтрокаПланаОбмена = Неопределено Тогда
			
			// есть в правилах, нет в плане
			Если НЕ ЕстьВПравилеНоНетвПлане Тогда
				
				ЕстьВПравилеНоНетвПлане = Истина;
				Сообщить("Есть правила выгрузки, но нет регистрации изменений в плане обмена: ");
				Сообщить("=========================================================================");
				
			КонецЕсли;
			
			СписокРезультата.Добавить(ПолучитьСообщениеСИнформациейОМетаданном(СтрокаТаблицы.МетаданныеОбъекта));
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРезультата.СортироватьПоЗначению();
	
	Для Каждого Стр Из СписокРезультата Цикл
		
		Сообщить(Стр.Значение)	
		
	КонецЦикла;
	
	Сообщить(Символы.ПС);
	
	ЕстьВПланеНоНетВПравиле = Ложь;
	СписокРезультата = Новый СписокЗначений;
	
	// остается сравнить две таблицы и показать различия...
	Для Каждого СтрокаТаблицы Из ТаблицаМетаданныхПланаОбмена Цикл
		
		Если ТипЗнч(СтрокаТаблицы.МетаданныеОбъекта) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		Если Найти(Врег(СтрокаТаблицы.МетаданныеОбъекта.Имя), "СООТВЕТСТВИЕОБЪЕКТОВДЛЯОБМЕНА") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПравил = ТаблицаТиповПравилВыгрузки.Найти(СтрокаТаблицы.МетаданныеОбъекта, "МетаданныеОбъекта"); 
		Если СтрокаПравил = Неопределено Тогда
			
			// есть в правилах, нет в плане
			Если НЕ ЕстьВПланеНоНетВПравиле Тогда
				
				ЕстьВПланеНоНетВПравиле = Истина;
				Сообщить("Есть в плане обмена, но нет в правиле выгрузки: ");
				Сообщить("=========================================================================");
				
			КонецЕсли;
			
			СписокРезультата.Добавить(ПолучитьСообщениеСИнформациейОМетаданном(СтрокаТаблицы.МетаданныеОбъекта));				
							
		КонецЕсли;
		
	КонецЦикла;
	
	СписокРезультата.СортироватьПоЗначению();
	
	Для Каждого Стр Из СписокРезультата Цикл
		
		Сообщить(Стр.Значение)	
		
	КонецЦикла;
	
	Если Не ЕстьВПравилеНоНетвПлане
		И Не ЕстьВПланеНоНетВПравиле Тогда
		
		Сообщить("Регистрация изменений в плане обмена соответствует правилам выгрузки данных");
		
	КонецЕсли;	
	
КонецПроцедуры

// процедура производит проверку соотвествия регистрации изменений для плана обмена и
//правил выгрузки данных
Процедура ВыполинтьПоискСоотвестствияПравилВыгрузкиИДанныхПланаОбмена(НастройкиОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(НастройкиОбмена.УзелИнформационнойБазы) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не указан узел для обмена данными.");
		Возврат;
		
	КонецЕсли;
	
	Попытка
		
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
		
		СтруктураНастроекОбмена = ПроцедурыОбменаДанными.ПолучитьБазовуюСтруктуруПараметровОбмена(Истина, Неопределено, 
			Ложь, Неопределено);		
		
		ПроцедурыОбменаДанными.ДополнитьСтруктуруОбменаПоПростойНастройкеОбмена(СтруктураНастроекОбмена, НастройкиОбмена);
		
		ПроцедурыОбменаДанными.УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбмена);
		
		// обходим дерево правил выгрузки и получаем информацию обо всех правилах выгрузки со стандартным алгоритмом выгрузки данных
		ТаблицаТиповПравилВыгрузки = Новый ТаблицаЗначений;
		ТаблицаТиповПравилВыгрузки.Колонки.Добавить("ТипВыгружаемыхДанных");
		ТаблицаТиповПравилВыгрузки.Колонки.Добавить("МетаданныеОбъекта");
		
		ПроцедурыОбменаДанными.ЗаполнитьТаблицуВыгружаемыхДанных(ОбработкаОбменаДаннымиXML.ТаблицаПравилВыгрузки.Строки, ТаблицаТиповПравилВыгрузки);
		
		Сообщить(Символы.ПС + "Проверка основного обмена");
		ПоказатьСоответствиеУзлаПланаОбменаИПравилОбмена(НастройкиОбмена.УзелИнформационнойБазы, ОбработкаОбменаДаннымиXML, ТаблицаТиповПравилВыгрузки);
		
		Если ЗначениеЗаполнено(НастройкиОбмена.УзелФоновогоОбмена) Тогда
			
			Сообщить(Символы.ПС + "Проверка фонового обмена");
			ПоказатьСоответствиеУзлаПланаОбменаИПравилОбмена(НастройкиОбмена.УзелФоновогоОбмена, ОбработкаОбменаДаннымиXML, ТаблицаТиповПравилВыгрузки);
			
		КонецЕсли;		
		
    Исключение
			
		// в режиме клиента выводим информацию об ошибке
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при тестировании соответствия плана обмена и правил выгрузки: " + ОписаниеОшибки());
						   
	КонецПопытки;
	
КонецПроцедуры


	
Процедура ЗарегистрироватьВсеОбъектыДляОбмена(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотУзелОбмена = ПроцедурыОбменаДанными.ПолучитьТекущийУзелИБ(УзелОбмена);
	Если ЭтотУзелОбмена = УзелОбмена Тогда
		
		Предупреждение("Нельзя зарегистрировать изменения для узла обмена, соответствующему текущей информационной базе.");
		Возврат;
		
	КонецЕсли;
	
	ОтветПользователя = Вопрос("ВНИМАНИЕ!!!
	|Регистрация объектов для обмена - операция необратимая. После регистрации изменений первый обмен данными может занять продолжительное время.
	|Вы уверены что нужно выполнить регистрацию всех объектов для обмена?",
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.НЕТ, "Регистрация объектов для обмена");							
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
				
		Возврат;
			
	КонецЕсли;
	
	Состояние("Выполняется регистрация всех объектов для обмена с информационной базой """  + УзелОбмена + """");
	
	// для всех объектов кроме документов регистрируем все, для документов с учетом ограничений по дате
	Попытка
		ДатаОграниченийДляДокументов = УзелОбмена.ДатаНачалаВыгрузкиДокументов;
	Исключение
		ДатаОграниченийДляДокументов = Неопределено;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ДатаОграниченийДляДокументов) Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена);
	Иначе
		
		// есть органичения для регистрации документов по дате
		Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл
			
			МетаданныеОбмена = ЭлементСоставаПланаОбмена.Метаданные;	
			
			Если Метаданные.Документы.Содержит(МетаданныеОбмена) Тогда
				
				// зарегистрируем изменения только для документов с ограничением по дате
				Запрос = Новый Запрос();			
			
				ОграничениеВыборки = "ГДЕ РегистрацияИзменений.Дата >= &ДатаОграничений";
						
				Запрос.УстановитьПараметр("ДатаОграничений", ДатаОграниченийДляДокументов);
				
				Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
					   |ИЗ
					   |	Документ." + МетаданныеОбмена.Имя + " КАК РегистрацияИзменений
					   |" + ОграничениеВыборки;
					   
				Выборка = Запрос.Выполнить().Выбрать();
					   
				Пока Выборка.Следующий() Цикл
					
					ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.ссылка);
										
				КонецЦикла;
				
			Иначе
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МетаданныеОбмена);
					   
			КонецЕсли;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	Состояние("");
		
КонецПроцедуры
	
Процедура ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(ТаблицаСпискаНастроек) Экспорт
		
	ТаблицаСпискаНастроек.Колонки.Добавить("ПроизводитьПриемСообщений");
	ТаблицаСпискаНастроек.Колонки.Добавить("ПроизводитьОтправкуСообщений");
	ТаблицаСпискаНастроек.Колонки.Добавить("OnLineОбмен");    
	ТаблицаСпискаНастроек.Колонки.Добавить("УзелИнформационнойБазы");
			
КонецПроцедуры	

Функция ПолучитьДанныеПоследнийОперацийОбменов(УзелИнформационнойБазы) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
				|		МАКСИМУМ(ВложенныйЗапрос.ДатаПоследнейЗагрузки) КАК ДатаПоследнейЗагрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.РезультатПоследнейЗагрузки) КАК РезультатПоследнейЗагрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.РезультатПоследнейВыгрузки) КАК РезультатПоследнейВыгрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.РезультатОтложенныхДвиженийДокументов) КАК РезультатОтложенныхДвиженийДокументов,
				|		МАКСИМУМ(ВложенныйЗапрос.НаличиеДанныхФоновойЗагрузки) КАК НаличиеДанныхФоновойЗагрузки
				|	ИЗ
				|		(ВЫБРАТЬ
				|			МАКСИМУМ(ИсторияОбменов.ДатаПоследнейЗагрузки) КАК ДатаПоследнейЗагрузки,
				|			МАКСИМУМ(ИсторияОбменов.РезультатПоследнейЗагрузки) КАК РезультатПоследнейЗагрузки,
				|			NULL КАК ДатаПоследнейВыгрузки,
				|			NULL КАК РезультатПоследнейВыгрузки,
				|			NULL КАК РезультатОтложенныхДвиженийДокументов,
				|			NULL КАК НаличиеДанныхФоновойЗагрузки
				|		ИЗ
				|			РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					МАКСИМУМ(ИсторияОбменов1.ДатаПоследнейЗагрузки) КАК ДатаПоследнейЗагрузки
				|				ИЗ
				|					РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов1
				|				ГДЕ
				|					ИсторияОбменов1.УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов1
				|				ПО (ИсторияОбменов.УзелИнформационнойБазы = &Ссылка)
				|					И ИсторияОбменов.ДатаПоследнейЗагрузки = ИсторияОбменов1.ДатаПоследнейЗагрузки
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			NULL,
				|			NULL,
				|			МАКСИМУМ(ИсторияОбменов.ДатаПоследнейВыгрузки),
				|			МАКСИМУМ(ИсторияОбменов.РезультатПоследнейВыгрузки),
				|			NULL,
				|			NULL
				|		ИЗ
				|			РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					МАКСИМУМ(ИсторияОбменов1.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки
				|				ИЗ
				|					РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов1
				|				ГДЕ
				|					ИсторияОбменов1.УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов1
				|				ПО (ИсторияОбменов.УзелИнформационнойБазы = &Ссылка)
				|					И ИсторияОбменов.ДатаПоследнейВыгрузки = ИсторияОбменов1.ДатаПоследнейВыгрузки
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			NULL,
				|			NULL,
				|			NULL,
				|			NULL,
				|			МАКСИМУМ(ИсторияОбменов.РезультатОтложенныхДвиженийДокументов),
				|			МАКСИМУМ(ИсторияОбменов.НаличиеДанныхФоновойЗагрузки)
				|		ИЗ
				|			РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					МАКСИМУМ(ИсторияОбменов1.Период) КАК Период
				|				ИЗ
				|					РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов1
				|				ГДЕ
				|					ИсторияОбменов1.УзелИнформационнойБазы = &Ссылка
				|					И (НЕ ИсторияОбменов1.РезультатОтложенныхДвиженийДокументов ЕСТЬ NULL )) КАК ИсторияОбменов1
				|				ПО (ИсторияОбменов.УзелИнформационнойБазы = &Ссылка)
				|					И ИсторияОбменов.Период = ИсторияОбменов1.Период) КАК ВложенныйЗапрос
				|";
				   
	Запрос.УстановитьПараметр("Ссылка", УзелИнформационнойБазы);
	
	РезультатЗапроса = Запрос.Выполнить();	
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ДействияСправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок) Экспорт
	
	// отображаем дату загрузки и выгрузки данных
	Для Каждого Оформление Из ОформленияСтрок Цикл
		
		РезультатЗапроса = ПолучитьДанныеПоследнийОперацийОбменов(Оформление.ДанныеСтроки.УзелИнформационнойБазы);
		Выборка = РезультатЗапроса.Выбрать();
				
		Если Выборка.Следующий() Тогда
			
            ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
			ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки; 
			
			РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
			РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;
			
			РезультатОтложенныхДвиженийДокументов = Выборка.РезультатОтложенныхДвиженийДокументов;
			НаличиеДанныхФоновойЗагрузки = Выборка.НаличиеДанныхФоновойЗагрузки;
					
		Иначе
			ДатаПоследнейЗагрузки = Неопределено;
			ДатаПоследнейВыгрузки = Неопределено;
			
			РезультатПоследнейЗагрузки = Ложь;
			РезультатПоследнейВыгрузки = Ложь;
			
			РезультатОтложенныхДвиженийДокументов = Ложь;
			НаличиеДанныхФоновойЗагрузки = Ложь;
		КонецЕсли;
		
		ЭтоOnLineОбмен = Оформление.ДанныеСтроки.OnLineОбмен;

		// отображаем дату последней загрузки по следующему принципу
		// если стоит признак загрузки, но нет информации о последней загрузке - пишем - не производился
		// если есть информация, то ее выводим
		// если не стоит признак производить загрузку - то пишем не загружать и все
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
					
		Если ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда 
				
			Оформление.Ячейки.ЗагрузкаДанных.Значение = ДатаПоследнейЗагрузки;
				
			ОтображатьКартинку = Истина;
			Если РезультатПоследнейЗагрузки = Истина Тогда
				Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;
			
			Если ЭтоOnLineОбмен Тогда
			
				Если РезультатОтложенныхДвиженийДокументов = Истина Тогда
					Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
					Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Успешно");
				Иначе	
					Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьКартинку(БиблиотекаКартинок.Остановить);
					Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("С ошибками");
				КонецЕсли;
				
				Если НаличиеДанныхФоновойЗагрузки = Истина Тогда
					Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьКартинку(БиблиотекаКартинок.ВыполнитьЗадачу);
					Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Фоновый обмен");
				Иначе	
					Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
					Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Завершена");
				КонецЕсли;
				
			Иначе
				
				Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Не производилась");
				Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Не производилась");	
				
			КонецЕсли;
				
		Иначе
			ОтображатьФлаг = Истина;
			// флаг показываем, но данные нет
			Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не производилась";
			Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.УстановитьТекст("Не производилась");
			Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.УстановитьТекст("Не производилась");
			
		КонецЕсли;
			
					
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
		Оформление.Ячейки.РезультатОтложенныхДвиженийДокументов.ОтображатьКартинку = ОтображатьКартинку И ЭтоOnLineОбмен;		
		Оформление.Ячейки.НаличиеДанныхФоновойЗагрузки.ОтображатьКартинку = ОтображатьКартинку И ЭтоOnLineОбмен;
			
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
			
		Если ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда 
					
			Оформление.Ячейки.ВыгрузкаДанных.Значение = ДатаПоследнейВыгрузки;
			ОтображатьКартинку = Истина;
			Если РезультатПоследнейВыгрузки = Истина Тогда
				Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;	
				
		Иначе	
				
			ОтображатьФлаг = Истина;
			// флаг показываем, но данные нет
			Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не производилась";
				
		КонецЕсли;	
				
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
		
	КонецЦикла
	
КонецПроцедуры

Процедура ДействияСправочникСписокПриПолученииДанныхОбменСWEB(Элемент, ОформленияСтрок) Экспорт
	
	// отображаем дату загрузки и выгрузки данных
	Для Каждого Оформление Из ОформленияСтрок Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсторияОбменов.ДатаПоследнейЗагрузки,
		               |	ИсторияОбменов.ДатаПоследнейВыгрузки,
		               |	ИсторияОбменов.РезультатПоследнейЗагрузки,
		               |	ИсторияОбменов.РезультатПоследнейВыгрузки
		               |ИЗ
		               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов
		               |";
					   
		Запрос.УстановитьПараметр("Ссылка", Оформление.ДанныеСтроки.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
            ДатаПоследнейЗагрузки = Выборка.ДатаПоследнейЗагрузки;
			ДатаПоследнейВыгрузки = Выборка.ДатаПоследнейВыгрузки; 
			
			РезультатПоследнейЗагрузки = Выборка.РезультатПоследнейЗагрузки;
			РезультатПоследнейВыгрузки = Выборка.РезультатПоследнейВыгрузки;			
					
		Иначе
			ДатаПоследнейЗагрузки = Неопределено;
			ДатаПоследнейВыгрузки = Неопределено;
			
			РезультатПоследнейЗагрузки = Ложь;
			РезультатПоследнейВыгрузки = Ложь;
			
		КонецЕсли;
		
		// отображаем дату последней загрузки по следующему принципу
		// если стоит признак загрузки, но нет информации о последней загрузке - пишем - не производился
		// если есть информация, то ее выводим
		// если не стоит признак производить загрузку - то пишем не загружать и все
			
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
		Если ЗначениеЗаполнено(ДатаПоследнейЗагрузки) Тогда 
				
			Оформление.Ячейки.ЗагрузкаДанных.Значение = ДатаПоследнейЗагрузки;
				
			ОтображатьКартинку = Истина;
			Если РезультатПоследнейЗагрузки = Истина Тогда
				Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ЗагрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;		
							
		Иначе
			ОтображатьФлаг = Истина;
			// флаг показываем, но данные нет
			Оформление.Ячейки.ЗагрузкаДанных.ЗначениеФлажка = Истина;	
			Оформление.Ячейки.ЗагрузкаДанных.Значение = "Не производилась";
						
		КонецЕсли;			
					
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;
		Оформление.Ячейки.ЗагрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
					
		ОтображатьФлаг = Ложь;
		ОтображатьКартинку = Ложь;
			
		Если ЗначениеЗаполнено(ДатаПоследнейВыгрузки) Тогда 
				
			Оформление.Ячейки.ВыгрузкаДанных.Значение = ДатаПоследнейВыгрузки;
			ОтображатьКартинку = Истина;
			Если РезультатПоследнейВыгрузки = Истина Тогда
				Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Утвердить);
			Иначе	
				Оформление.Ячейки.ВыгрузкаДанных.УстановитьКартинку(БиблиотекаКартинок.Остановить);
			КонецЕсли;	
				
		Иначе	
				
			ОтображатьФлаг = Истина;
			// флаг показываем, но данные нет
			Оформление.Ячейки.ВыгрузкаДанных.ЗначениеФлажка = Истина;	
			Оформление.Ячейки.ВыгрузкаДанных.Значение = "Не производилась";
				
		КонецЕсли;		
				
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьФлажок = ОтображатьФлаг;	
		Оформление.Ячейки.ВыгрузкаДанных.ОтображатьКартинку = ОтображатьКартинку;
		
	КонецЦикла
	
КонецПроцедуры

// при выводе строки настройки обмена данными
Процедура ДействияСправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	//Если НЕ ДанныеСтроки.ПометкаУдаления 
	//	И ДанныеСтроки.ИспользоватьРегламентныеЗадания Тогда	
	//	
	//	ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
	//	
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьМониторОбменовДляНастройки(СсылкаНаНастройку, ФормаВладелец = Неопределено) Экспорт
		
	ФормаМонитора = ПолучитьОбщуюФорму("МониторНастроекОбменаДанными", ФормаВладелец);
	ФормаМонитора.НастройкаОбмена = СсылкаНаНастройку;
	ФормаМонитора.Открыть();
		
КонецПроцедуры

Процедура ОткрытьМониторОбменовДляУзлаОбмена(УзелОбмена, ФормаВладелец = Неопределено) Экспорт
		
	ФормаМонитора = ПолучитьОбщуюФорму("МониторНастроекОбменаДанными", ФормаВладелец);
	ФормаМонитора.Настройка = УзелОбмена;
	ФормаМонитора.Открыть();
		
КонецПроцедуры

Функция ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(НастройкаДляОбмена) Экспорт
		
	Если Не ЗначениеЗаполнено(НастройкаДляОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаДляОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
		Возврат НастройкаДляОбмена.УзелИнформационнойБазы;
	Иначе
		Возврат НастройкаДляОбмена;
	КонецЕсли;
	
КонецФункции

Процедура РасшифовкаНеудачПосле(СсылкаДляОграничения, ТипОтображения, ДатаНачала, ЭтаФорма) Экспорт
	
	ФормаРегистраИстории = РегистрыСведений.ИсторияОбменаДанными.ПолучитьФормуСписка(, ЭтаФорма, Строка(Новый УникальныйИдентификатор));
	ФормаРегистраИстории.отбор.Сбросить();
	
	Если ТипОтображения = "Загрузка" Тогда
		
		ФормаРегистраИстории.отбор.РезультатПоследнейЗагрузки.Установить(Ложь);
		
	ИначеЕсли ТипОтображения = "Выгрузка" Тогда
		
		ФормаРегистраИстории.отбор.РезультатПоследнейВыгрузки.Установить(Ложь);
		
	Иначе
		
		ФормаРегистраИстории.отбор.РезультатОтложенныхДвиженийДокументов.Установить(Ложь);
		
	КонецЕсли;
	
	ФормаРегистраИстории.отбор.Период.Значение = ДатаНачала;
		
	ФормаРегистраИстории.отбор.Период.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ФормаРегистраИстории.отбор.Период.Использование = Истина;
	
	ФормаРегистраИстории.отбор.УзелИнформационнойБазы.Установить(СсылкаДляОграничения);
					
	ФормаРегистраИстории.Открыть();	
	
КонецПроцедуры

Функция ПолучитьДанныеПоследнейУдачнойОперации(СсылкаДляОграничения, ИмяКолонкиДляВозврата, ОграничениеДляЗапроса, 
	ОграничениеНегативноеДляЗапроса, КоличествоНеудачныхПопытокПосле) Экспорт
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	Максимум(ИсторияОбменаДаннымиСрезПоследних." + ИмяКолонкиДляВозврата + ") КАК ДатаПоследнейУдачнойОперации,
	               |	Максимум(ИсторияОбменаДаннымиСрезПоследних.Период) КАК Период
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &СсылкаДляОграничения И " + ОграничениеДляЗапроса + ") КАК ИсторияОбменаДаннымиСрезПоследних";
				   
	Запрос.УстановитьПараметр("СсылкаДляОграничения", СсылкаДляОграничения);
				   
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		
		ДатаПоследнейУдачнойОперации = Дата('00010101');
		ПериодПоследнейУдачнойОперации = Дата('00010101');
		
	Иначе
		
		ДатаПоследнейУдачнойОперации = ?(ТаблицаДанных[0].ДатаПоследнейУдачнойОперации = NULL, Дата('00010101'), ТаблицаДанных[0].ДатаПоследнейУдачнойОперации);
		ПериодПоследнейУдачнойОперации = ?(ТаблицаДанных[0].Период = NULL, Дата('00010101'), ТаблицаДанных[0].Период);
		
	КонецЕсли;
	
	// количество неудач после
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Количество	
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменаДанными
				   |ГДЕ
				   |	УзелИнформационнойБазы = &СсылкаДляОграничения 
				   |	И Период >= &НачалоПериода
				   |	И " + ОграничениеНегативноеДляЗапроса;
				   
	Запрос.УстановитьПараметр("СсылкаДляОграничения", СсылкаДляОграничения);
	Запрос.УстановитьПараметр("НачалоПериода", ПериодПоследнейУдачнойОперации);
				   
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	Если ТаблицаДанных.Количество() = 0 Тогда
		
		КоличествоНеудачныхПопытокПосле = 0;
		
	Иначе
		
		КоличествоНеудачныхПопытокПосле = ?(ТаблицаДанных[0].Количество = NULL, 0, ТаблицаДанных[0].Количество);
				
	КонецЕсли;
	
	Возврат ДатаПоследнейУдачнойОперации;
	
КонецФункции
	
// при нажатии на "Открытие" у каталога 
Процедура ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

Функция ПолучитьИмяФайлаПравилДляВыбораПравилОбмена() Экспорт
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.Заголовок = "Выбор файла правил обмена";
	Диалог.Фильтр = "Файл правил обмена (*.xml)|*.xml";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаПравилДляСохраненияПравилОбмена() Экспорт
	
	Режим = РежимДиалогаВыбораФайла.Сохранение;
	Диалог = Новый ДиалогВыбораФайла(Режим);
	Диалог.Заголовок = "Выбор файла для сохранения";
	Диалог.Фильтр = "Файл правил обмена (*.xml)|*.xml";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяФайлаПротоколаОбмена() Экспорт
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.Заголовок = "Выбор файла протокола обмена";
	Диалог.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПолноеИмяФайла = "ПротоколОбмена.txt";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Процедура ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(Задание, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно) Экспорт
	
	РасписаниеАктивно = Ложь;
	
	ТекстЗаголовка = "Дополнительные настройки расписания ...";
	
	Если Задание = Неопределено Тогда
		
		//ТекстЗаголовка = "Создать регламентную настройку ...";	
		ТекстРасписания = "<Расписание не задано>";
		
	Иначе
		
		//ТекстЗаголовка = "Дополнительные настройки расписания ...";
		Если Задание.Использование Тогда
			ПрефиксРасписания = "Расписание: ";
			РасписаниеАктивно = Истина;
		Иначе
			ПрефиксРасписания = "Расписание (НЕ АКТИВНО): ";
		КонецЕсли;
		
		ТекстРасписания = ПрефиксРасписания + Строка(Задание.Расписание);
		
	КонецЕсли;	
	
КонецПроцедуры

// Процедура показывает форму списка справочника "Настройки обменов" для узла обмена
Процедура ПоказатьЗарегистрированныеИзмененияДляУзла(УзелОбмена, Владелец = Неопределено, УникальныйКлючФормы = Неопределено) Экспорт
	
	Обработка = Обработки.РегистрацияИзмененийДляОбмена.Создать();
	ФормаОбработки = Обработка.ПолучитьФорму("Форма", Владелец, УникальныйКлючФормы);
	ФормаОбработки.УзелОбмена = УзелОбмена;
	ФормаОбработки.ВосстанавливатьЗначенияПриОткрытии = Ложь;
	ФормаОбработки.Открыть();
	
КонецПроцедуры

Функция ПолучитьПоРазностиВремениПредставлениеДляПользователя(РазностьВремени) Экспорт
	
	Если РазностьВремени = 0 Тогда
		Возврат "00:00:00";
	КонецЕсли;
	
	ОстатокВремени = РазностьВремени;
	
	КоличествоДней = Цел(ОстатокВремени /(60 * 60 * 24));
	ОстатокВремени = РазностьВремени - КоличествоДней * 60 * 60 * 24;
	
	КоличествоЧасов = Цел(ОстатокВремени /(60 * 60));
	ОстатокВремени = РазностьВремени - КоличествоЧасов * 60 * 60;
	
	КоличествоМинут = Цел(ОстатокВремени /(60));
	ОстатокВремени = РазностьВремени - КоличествоМинут * 60;
	
	КоличествоСекунд = ОстатокВремени;
	
	
	ВремяСтрокой = Прав("00" + Строка(КоличествоЧасов), 2) + ":" + Прав("00" + Строка(КоличествоМинут), 2) + ":" + Прав("00" + Строка(КоличествоСекунд), 2);
	
	Если КоличествоДней <> 0 тогда
		
		ВремяСтрокой = Строка(КоличествоДней) + " дней " + ВремяСтрокой;
		
	КонецЕсли;
	
	Возврат ВремяСтрокой;
	
КонецФункции

Процедура ОткрытьФормуРедактированияТекста(ЭтаФорма, ЗначениеТекста, СтандартнаяОбработка = Ложь) Экспорт
	
	ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста", ЭтаФорма, Строка(Новый УникальныйИдентификатор));
	ФормаРедактированияТекста.УстановитьРедактируемыйТекст(ЗначениеТекста);
	ФормаРедактированияТекста.Открыть();
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ЗаполнитьНеобходимыеПараметрыНастроекПользователя(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника)
	
	Попытка		 			
		
		ТекстПравил = ПравилаОбмена.Получить();
		ТаблицаНастроекВыгрузкиДляПолейПоиска = Неопределено;
		ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки = Неопределено;
		
		ПроцедурыОбменаДанными.ПолучитьТаблицыИнформацииОПравилахОбмена(ТекстПравил, ТаблицаНастроекВыгрузкиДляПолейПоиска, ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки);
		
		// есть единая таблица в которой хранятся все варианты настроек
		ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска = ТаблицаНастроекВыгрузкиДляПолейПоиска.Скопировать();
		ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.Колонки.Добавить("ЭтоНастройкаДляВыгрузки");
		ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.ЗаполнитьЗначения(Истина, "ЭтоНастройкаДляВыгрузки");
		
		ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки = ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки.Скопировать();
		ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Колонки.Добавить("ЭтоНастройкаДляВыгрузки");
		ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.ЗаполнитьЗначения(Истина, "ЭтоНастройкаДляВыгрузки");
		
		Если ЭтаФорма.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			ТекстПравил = ПравилаОбменаДляПриемника.Получить();
			
			ТаблицаНастроекЗагрузкиДляПолейПоиска = Неопределено;
			ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки = Неопределено;
			
			ПроцедурыОбменаДанными.ПолучитьТаблицыИнформацииОПравилахОбмена(ТекстПравил, ТаблицаНастроекЗагрузкиДляПолейПоиска, ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки);
			
			Для Каждого СтрокаНастроекЗагрузки Из ТаблицаНастроекЗагрузкиДляПолейПоиска Цикл
				
				СтрокаДобавления = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаНастроекЗагрузки);
				СтрокаДобавления.ЭтоНастройкаДляВыгрузки = Ложь;
				
			КонецЦикла;
			
			Для Каждого СтрокаНастроекЗагрузки Из ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки Цикл
				
				СтрокаДобавления = ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаНастроекЗагрузки);
				СтрокаДобавления.ЭтоНастройкаДляВыгрузки = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// это итоговая таблица информации о том что позволяют настаривать правила
		ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.Сортировать("ЭтоНастройкаДляВыгрузки Убыв, КодПравилаОбмена, ИмяНастройкиДляАлгоритма");
		
		ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Сортировать("ЭтоНастройкаДляВыгрузки Убыв, КодПравилаВыгрузки");
		
	Исключение
				
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при получении информации о настройках правил обмена: " + ОписаниеОшибки());
		Возврат Ложь;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьТаблицуНастроекПолейПоиска(ЭтаФорма)
	
	Попытка		 			
		
		// таблица группировки данных для выгрузки и загрузки - хранится информация по правилам для которым допустим поиск с вариантами
		ТаблицаИменПравилВыгрузкиИЗагрузки = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.Скопировать();
		ТаблицаИменПравилВыгрузкиИЗагрузки.Свернуть("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена");
		
		БылиИзмененыСтрокиТЧ = Ложь;
		
		// для ТЧ определяем, есть ли в ней уже не поддерживаемые поиски
		Для Каждого СтрокаТЧ Из ЭтаФорма.НастройкаВариантовПоискаОбъектов Цикл
			
			СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена, ", СтрокаТЧ.ЭтоНастройкаДляВыгрузки, СтрокаТЧ.КодПравилаОбмена);
			МассивПолейВГруппировке = ТаблицаИменПравилВыгрузкиИЗагрузки.НайтиСтроки(СтруктураПоиска);
			Если (МассивПолейВГруппировке = Неопределено
				ИЛИ МассивПолейВГруппировке.Количество() = 0)
				И СтрокаТЧ.НастройкаНеПоддерживается = Ложь Тогда
				
				// поиск уже не поддерживается
				СтрокаТЧ.НастройкаНеПоддерживается = Истина;
				СтрокаТЧ.ОписаниеНастройкиДляПользователя = "Настройка не поддерживается правилами обмена";
				БылиИзмененыСтрокиТЧ = Истина;
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаТЧ.ИмяНастройкиДляАлгоритма) Тогда
			
				СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена, ИмяНастройкиДляАлгоритма", СтрокаТЧ.ЭтоНастройкаДляВыгрузки, СтрокаТЧ.КодПравилаОбмена, СтрокаТЧ.ИмяНастройкиДляАлгоритма);
				СтрокиВПоляхПоиска = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
				Если СтрокиВПоляхПоиска = Неопределено
					ИЛИ СтрокиВПоляхПоиска.Количество() = 0 Тогда
					
					// поиск по полю уже не поддерживается
					СтрокаТЧ.ВариантПоискаНеПоддерживается = Истина;
					СтрокаТЧ.ОписаниеНастройкиДляПользователя = "Выбранный вариант сопоставления не поддерживается правилами обмена";
					БылиИзмененыСтрокиТЧ = Истина;
					Продолжить;
					
				Иначе
					
					// поиск поддерживается - служебные параметры заполняются
					Если СтрокаТЧ.ОписаниеНастройкиДляПользователя <> СтрокиВПоляхПоиска[0].ОписаниеНастройкиДляПользователя
						ИЛИ СтрокаТЧ.НаименованиеПравилаОбмена <> СтрокиВПоляхПоиска[0].НаименованиеПравилаОбмена Тогда
					
						СтрокаТЧ.ОписаниеНастройкиДляПользователя = СтрокиВПоляхПоиска[0].ОписаниеНастройкиДляПользователя;
						СтрокаТЧ.НаименованиеПравилаОбмена = СтрокиВПоляхПоиска[0].НаименованиеПравилаОбмена;
						БылиИзмененыСтрокиТЧ = Истина;
						
					КонецЕсли;							
					
				КонецЕсли;
			
			КонецЕсли;				
			
		КонецЦикла;
		
		// каждая ненайденная настройка добавляется по новой
		Для Каждого СтрокаСгруппированныхПолей Из ТаблицаИменПравилВыгрузкиИЗагрузки Цикл
			
			СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена", СтрокаСгруппированныхПолей.ЭтоНастройкаДляВыгрузки, СтрокаСгруппированныхПолей.КодПравилаОбмена);
			МассивСтрокТЧ = ЭтаФорма.НастройкаВариантовПоискаОбъектов.НайтиСтроки(СтруктураПоиска);

			Если МассивСтрокТЧ = Неопределено
				ИЛИ МассивСтрокТЧ.Количество() = 0 Тогда
				
				// настройки пока нет
				СтрокаТЧ = ЭтаФорма.НастройкаВариантовПоискаОбъектов.Добавить();
				СтрокаТЧ.ЭтоНастройкаДляВыгрузки = СтрокаСгруппированныхПолей.ЭтоНастройкаДляВыгрузки;
				СтрокаТЧ.КодПравилаОбмена = СтрокаСгруппированныхПолей.КодПравилаОбмена;
				
				МассивСтрокТЧ = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
				СтрокаТЧ.НаименованиеПравилаОбмена = МассивСтрокТЧ[0].НаименованиеПравилаОбмена;
				
				БылиИзмененыСтрокиТЧ = Истина;					
				Продолжить;
				
			ИначеЕсли МассивСтрокТЧ.Количество() = 1 Тогда // обновляем существующую настройку
				
				МассивСтрокОбщаяТаблица = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
				
				МассивСтрокТЧ[0].НаименованиеПравилаОбмена = МассивСтрокОбщаяТаблица[0].НаименованиеПравилаОбмена;
				МассивСтрокТЧ[0].НастройкаНеПоддерживается = Ложь;
				
			ИначеЕсли МассивСтрокТЧ.Количество() > 1 Тогда
				
				// по идее невезможный случай - есть несколько настроек - оставляем только одну
				Для Номер = 1 По МассивСтрокТЧ.Количество() -1 Цикл
					
					ЭтаФорма.НастройкаВариантовПоискаОбъектов.Удалить(МассивСтрокТЧ[Номер]);	
					БылиИзмененыСтрокиТЧ = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылиИзмененыСтрокиТЧ Тогда
			
			ЭтаФорма.НастройкаВариантовПоискаОбъектов.Сортировать("ЭтоНастройкаДляВыгрузки Убыв, НаименованиеПравилаОбмена");
			
		КонецЕсли;
		
    Исключение
			
		// в режиме клиента выводим информацию об ошибке
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при получении информации о настройках полей поиска: " + ОписаниеОшибки());
						   
	КонецПопытки;	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ЭтаФорма, ПравилаОбмена, 
	ПравилаОбменаДляПриемника = Неопределено, ОбязательноОбновитьТаблицуНастроекИзПравил = Ложь) Экспорт
	
	Если НЕ ОбязательноОбновитьТаблицуНастроекИзПравил
		И ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска <> Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	РезультатПолученияПравил = ЗаполнитьНеобходимыеПараметрыНастроекПользователя(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника);
		
	Если Не РезультатПолученияПравил Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбновитьВсеНастройкиВыгрузкиДляНастройки(ЭтаФорма);		
			
КонецПроцедуры

Процедура ОбновитьВсеНастройкиВыгрузкиДляНастройки(ЭтаФорма)
	
	ОбновитьТаблицуНастроекПолейПоиска(ЭтаФорма);	
	ОбновитьТаблицуНастроекВыгрузкиДанных(ЭтаФорма);
	
конецПроцедуры

Процедура ОбновитьТаблицуНастроекВыгрузкиДанных(ЭтаФорма) Экспорт
	
	Попытка		 			
		
		// таблица группировки данных для выгрузки и загрузки - хранится информация по правилам для которым допустим поиск с вариантами
		ТаблицаНастроекВыгрузки = ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Скопировать();
		ТаблицаНастроекВыгрузки.Свернуть("ЭтоНастройкаДляВыгрузки, КодПравилаВыгрузки");
		
		БылиИзмененыСтрокиТЧ = Ложь;
		
		// для ТЧ определяем, есть ли в ней уже не поддерживаемые поиски
		Для Каждого СтрокаТЧ Из ЭтаФорма.НастройкаВыгрузкиДанных Цикл
			
			СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаВыгрузки, ", СтрокаТЧ.ЭтоНастройкаДляВыгрузки, СтрокаТЧ.КодПравилаВыгрузки);
			МассивПолейВГруппировке = ТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураПоиска);
			Если (МассивПолейВГруппировке = Неопределено
				ИЛИ МассивПолейВГруппировке.Количество() = 0)
				И СтрокаТЧ.НастройкаНеПоддерживается = Ложь Тогда
				
				// поиск уже не поддерживается
				СтрокаТЧ.НастройкаНеПоддерживается = Истина;
				БылиИзмененыСтрокиТЧ = Истина;
				Продолжить;
				
			КонецЕсли;							
			
		КонецЦикла;
		
		// каждая ненайденная настройка добавляется по новой
		Для Каждого СтрокаСгруппированныхПолей Из ТаблицаНастроекВыгрузки Цикл
			
			СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаВыгрузки", СтрокаСгруппированныхПолей.ЭтоНастройкаДляВыгрузки, СтрокаСгруппированныхПолей.КодПравилаВыгрузки);
			МассивСтрокТЧ = ЭтаФорма.НастройкаВыгрузкиДанных.НайтиСтроки(СтруктураПоиска);

			Если МассивСтрокТЧ = Неопределено
				ИЛИ МассивСтрокТЧ.Количество() = 0 Тогда
				
				// настройки пока нет
				СтрокаТЧ = ЭтаФорма.НастройкаВыгрузкиДанных.Добавить();
				СтрокаТЧ.ЭтоНастройкаДляВыгрузки = СтрокаСгруппированныхПолей.ЭтоНастройкаДляВыгрузки;
				СтрокаТЧ.КодПравилаВыгрузки = СтрокаСгруппированныхПолей.КодПравилаВыгрузки;
				
				МассивСтрокТЧ = ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураПоиска);
				СтрокаТЧ.НаименованиеПравилаВыгрузки = МассивСтрокТЧ[0].НаименованиеПравилаВыгрузки;
				СтрокаТЧ.КодПравилаОбмена = МассивСтрокТЧ[0].КодПравилаОбмена;
				СтрокаТЧ.ВыгружатьДанные = МассивСтрокТЧ[0].ВыгружатьДанные;
				СтрокаТЧ.ВыгружатьПоСсылке = МассивСтрокТЧ[0].ВыгружатьПоСсылке;
				
				БылиИзмененыСтрокиТЧ = Истина;					
				Продолжить;
				
			ИначеЕсли МассивСтрокТЧ.Количество() = 1 Тогда // обновляем существующую настройку
				
				МассивСтрокОбщаяТаблица = ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураПоиска);
				
				МассивСтрокТЧ[0].НаименованиеПравилаВыгрузки = МассивСтрокОбщаяТаблица[0].НаименованиеПравилаВыгрузки;
				МассивСтрокТЧ[0].КодПравилаОбмена            = МассивСтрокОбщаяТаблица[0].КодПравилаОбмена;
				МассивСтрокТЧ[0].ВыгружатьДанные             = МассивСтрокОбщаяТаблица[0].ВыгружатьДанные;
				МассивСтрокТЧ[0].ВыгружатьПоСсылке           = МассивСтрокОбщаяТаблица[0].ВыгружатьПоСсылке;
				МассивСтрокТЧ[0].НастройкаНеПоддерживается   = Ложь;
				
			ИначеЕсли МассивСтрокТЧ.Количество() > 1 Тогда
				
				// по идее невезможный случай - есть несколько настроек - оставляем только одну
				Для Номер = 1 По МассивСтрокТЧ.Количество() - 1 Цикл
					
					ЭтаФорма.НастройкаВыгрузкиДанных.Удалить(МассивСтрокТЧ[Номер]);	
					БылиИзмененыСтрокиТЧ = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылиИзмененыСтрокиТЧ Тогда
			
			ЭтаФорма.НастройкаВыгрузкиДанных.Сортировать("ЭтоНастройкаДляВыгрузки Убыв, НаименованиеПравилаВыгрузки");
			
		КонецЕсли;
		
    Исключение
			
		// в режиме клиента выводим информацию об ошибке
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка при получении информации о настройках выгрузки: " + ОписаниеОшибки());
						   
	КонецПопытки;	
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуИнформацииОВозможныхНастройкахВыгрузки(ЭтаФорма, ПравилаОбмена, 
	ПравилаОбменаДляПриемника = Неопределено, ОбязательноОбновитьТаблицуНастроекИзПравил = Ложь) Экспорт
	
	Если ОбязательноОбновитьТаблицуНастроекИзПравил
		ИЛИ ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки = Неопределено Тогда
		
		РезультатПолученияПравил = ЗаполнитьНеобходимыеПараметрыНастроекПользователя(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника);
		
		Если Не РезультатПолученияПравил Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьВсеНастройкиВыгрузкиДляНастройки(ЭтаФорма);	
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Этаформа, Элемент, СтандартнаяОбработка) Экспорт
	
	ДанныеСтроки = Этаформа.ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// начало выбора настройки из списка
	ЭтаФорма.ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(Ложь);
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСтроки.НастройкаНеПоддерживается Тогда
		
		Если ДанныеСтроки.ЭтоНастройкаДляВыгрузки Тогда
			Предупреждение("Настройка выгрузки данных для правила: " + ДанныеСтроки.НаименованиеПравилаОбмена + "  не поддерживается правилами обмена.");
		Иначе
			Предупреждение("Настройка загрузки данных для правила: " + ДанныеСтроки.НаименованиеПравилаОбмена + "  не поддерживается правилами обмена.");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// получаем массив строк таблицы для показа
	СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена", ДанныеСтроки.ЭтоНастройкаДляВыгрузки, ДанныеСтроки.КодПравилаОбмена);
	МассивСтрок = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
	
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораВариантаСопоставления", ЭтаФорма);
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		СтрокаВыбора = ФормаВыбора.НастройкаВариантовПоискаОбъектов.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаВыбора, ЭлементМассива);
	КонецЦикла;
	
	СтрокаВыбора = ФормаВыбора.НастройкаВариантовПоискаОбъектов.Найти(ДанныеСтроки.ИмяНастройкиДляАлгоритма, "ИмяНастройкиДляАлгоритма");
	
	Если СтрокаВыбора <> Неопределено Тогда
	
		ФормаВыбора.ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущаяСтрока = СтрокаВыбора;
		
	КонецЕсли;
	
	ВыборВариантаСопоставления = ФормаВыбора.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ВыборВариантаСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ИмяНастройкиДляАлгоритма = ВыборВариантаСопоставления;
		
	СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки,КодПравилаОбмена,ИмяНастройкиДляАлгоритма", ДанныеСтроки.ЭтоНастройкаДляВыгрузки, ДанныеСтроки.КодПравилаОбмена, ДанныеСтроки.ИмяНастройкиДляАлгоритма);
	МассивСтрок = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок <> Неопределено
		И МассивСтрок.Количество() > 0 Тогда
		
		ДанныеСтроки.ОписаниеНастройкиДляПользователя = МассивСтрок[0].ОписаниеНастройкиДляПользователя;	
		ДанныеСтроки.НаименованиеПравилаОбмена = МассивСтрок[0].НаименованиеПравилаОбмена;
		Элемент.Значение = МассивСтрок[0].ИмяНастройкиДляПользователя;
		ДанныеСтроки.НастройкаНеПоддерживается = Ложь;
		ДанныеСтроки.ВариантПоискаНеПоддерживается = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры
