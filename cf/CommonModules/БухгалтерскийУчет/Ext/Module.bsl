
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕРЕОЦЕНКИ ВАЛЮТНЫХ СЧЕТОВ

// Процедура рассчитывает курсовые разницы и формирует проводки и движения КУДиР для УСН
//
// Параметры
//  СтруктураШапкиДокумента	– <Структура> – структура шапки документа, откуда вызвана процедура
//  ДвиженияДокумента		– <Коллекция> – коллекция движений документа, откуда вызвана процедура
//  Отказ					– <Булево> – при возникновении ошибок процедура возвращает в этот параметр значение Истина
//  Заголовок				– <Строка> – заголовок сообщений об ошибках
//  СтруктураПараметров		– <Структура> – параметры выполнения переоценки. 
//									Используется только при вызове из документа "Закрытие месяца"
//
Процедура ПереоценитьВалютныеОстатки(СтруктураШапкиДокумента, ДвиженияДокумента, Отказ, Заголовок, СтруктураПараметров = Неопределено) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
	КонецЕсли;
	
	РегламентнаяПереоценка = СтруктураПараметров.Свойство("РегламентнаяПереоценка") 
		И СтруктураПараметров.РегламентнаяПереоценка;
	
	ВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
	
	ДокументВВалюте = СтруктураШапкиДокумента.Свойство("ВалютаДокумента") 
		И (СтруктураШапкиДокумента.ВалютаДокумента <> ВалютаРегламентированногоУчета);
	
	Запрос = Новый Запрос;
	
	Если (НЕ РегламентнаяПереоценка) И (НЕ ДокументВВалюте) Тогда
		
		//Если СтруктураШапкиДокумента.Свойство("РасчетыВУсловныхЕдиницах") 
		//	И (НЕ СтруктураШапкиДокумента.РасчетыВУсловныхЕдиницах) 
		//	Тогда
		//	Возврат;
		//КонецЕсли;
		
		// определяем, есть ли в проводках документа хоть один валютный счет для переоценки
		Запрос.УстановитьПараметр("Проводки", ДвиженияДокумента.Хозрасчетный);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Проводки.СчетДт КАК СчетДт,
		|	Проводки.СчетКт КАК СчетКт
		|ПОМЕСТИТЬ ТаблицаСчетовДтКт
		|ИЗ
		|	&Проводки КАК Проводки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСчетовДтКт.СчетДт КАК Счет
		|ПОМЕСТИТЬ ТаблицаСчетов
		|ИЗ
		|	ТаблицаСчетовДтКт КАК ТаблицаСчетовДтКт
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаСчетовДтКт.СчетКт
		|ИЗ
		|	ТаблицаСчетовДтКт КАК ТаблицаСчетовДтКт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Счет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСчетов КАК ТаблицаСчетов
		|		ПО Хозрасчетный.Ссылка = ТаблицаСчетов.Счет
		|ГДЕ
		|	Хозрасчетный.Валютный";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;
	
	Дата        = СтруктураШапкиДокумента.Дата;
	Организация = СтруктураШапкиДокумента.Организация;
	
	Если РегламентнаяПереоценка Тогда
		
		ОтражатьВ_НУ        = СтруктураПараметров.ОтражатьВНалоговомУчете;
		ПрименениеПБУ18     = СтруктураПараметров.ПрименениеПБУ18;
		ОтражатьВ_УСН       = СтруктураПараметров.ОтражатьВНалоговомУчетеУСН;
		ОтражатьВ_УСНДоходы = СтруктураПараметров.ОтражатьВНалоговомУчетеУСНДоходы;
		ГраницаОстатков     = СтруктураПараметров.ГраницаОстатков;
		
		ТаблицаРасчетаПереоценкиВалюты = СтруктураПараметров.ТаблицаРасчетаПереоценкиВалюты;
	
	Иначе
	
		ОтражатьВ_НУ        = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") 
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете;
		ПрименениеПБУ18     = СтруктураШапкиДокумента.Свойство("ПрименениеПБУ18") 
			И СтруктураШапкиДокумента.ПрименениеПБУ18;
		ОтражатьВ_УСН       = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") 
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН;
		ОтражатьВ_УСНДоходы = СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСНДоходы") 
			И СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСНДоходы;
		ГраницаОстатков     = СтруктураШапкиДокумента.Ссылка.МоментВремени();
	
	КонецЕсли;
	
	// В БУ не переоцениваются авансы в валюте, остальные остатки по балансовым счетам переоцениваются
	// В налоговом учете по налогу на прибыль курсовые разницы по переоценке авансов отражаются до 2010 года.
	// С 2010 года порядок переоценки авансов в НУ зависит от константы НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.
	// Если константа не установлена или установлена датой позже даты документа,
	// авансы переоцениваются и результат относится на счет 99.09, который не отражается в налоговом учете.
	// Если константа установлена датой раньше даты документа, авансы в НУ не переоцениваются, также как и в БУ.
	
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	
	// Валютные счета, подлежащие переоценке
	// Все балансовые валютные счета
	// Счета, переоцениваемые в особом порядке, исключаются
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И (НЕ Хозрасчетный.Забалансовый)
	|	И (НЕ Хозрасчетный.Ссылка В
	|				(ВЫБРАТЬ
	|					СчетаСОсобымПорядкомПереоценки.Счет
	|				ИЗ
	|					РегистрСведений.СчетаСОсобымПорядкомПереоценкиБУ КАК СчетаСОсобымПорядкомПереоценки))";
	
	СчетаПодлежащиеПереоценке = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с контрагентами
	// Все балансовые счета, подлежащие переоценке, на которых установлены виды субконто Контрагенты, Договоры, Документы расчетов
	
	Запрос.УстановитьПараметр("СчетаПодлежащиеПереоценке", СчетаПодлежащиеПереоценке);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетаСубконтоКонтрагенты.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДоговоры
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДоговоры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК СчетаСубконтоДокументы
	|		ПО СчетаСубконтоКонтрагенты.Ссылка = СчетаСубконтоДокументы.Ссылка
	|ГДЕ
	|	СчетаСубконтоКонтрагенты.Ссылка В (&СчетаПодлежащиеПереоценке)
	|	И СчетаСубконтоКонтрагенты.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|	И СчетаСубконтоДоговоры.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|	И СчетаСубконтоДокументы.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)";
	
	СчетаРасчетовСКонтрагентами = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Получение остатков для проведения переоценки
	
	ВидыСубконтоСчетов = Новый Соответствие; // виды субконто счетов кэшируются
	Запрос.УстановитьПараметр("СчетаРасчетовСКонтрагентами", СчетаРасчетовСКонтрагентами);
	
	Если РегламентнаяПереоценка Тогда
		
		// Получение всех остатков по всем счетам, подлежащим переоценке
		// Для целей НУ базой для переоценки счетов, по которым не ведется налоговый учет,
		// например, по счетам учета денежных средств, являются данные БУ
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ХозрасчетныйОстатки.Валюта,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ВидДоговора,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет В (&СчетаРасчетовСКонтрагентами)
		|			ТОГДА ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ)
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.НалоговыйУчет
		|			ТОГДА ХозрасчетныйОстатки.СуммаНУОстаток
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
		|	КОНЕЦ КАК СуммаНУОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ГраницаОстатков, Счет В (&СчетаПодлежащиеПереоценке), , Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
		ВалютныеОстатки = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		// Получение остатков только по счетам и субконто, которые уже содержатся в переданном наборе записей регистра "Хозрасчетный"
		// Оборотные субконто переданного набора записей пропускаются
		
		// Формирование таблицы счетов и субконто для переоценки
		// Заполнение полей ИспользоватьСубконтоХ:
		// 		- если субконто с номером Х нет на счете - Ложь
		// 		- если субконто с номером Х есть и оно необоротное - Истина
		// 		- если субконто с номером Х есть и оно оборотное - Ложь
		
		ТаблицаДляПереоценки = Новый ТаблицаЗначений;
		ТаблицаДляПереоценки.Колонки.Добавить("Счет",                  Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаДляПереоценки.Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
		ТаблицаДляПереоценки.Колонки.Добавить("Валюта",                Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто1", Новый ОписаниеТипов("Булево")); 
		ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто2", Новый ОписаниеТипов("Булево"));
		ТаблицаДляПереоценки.Колонки.Добавить("ИспользоватьСубконто3", Новый ОписаниеТипов("Булево"));
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто1");
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто2");
		ТаблицаДляПереоценки.Колонки.Добавить("Субконто3");
		
		Для каждого ПроводкаБУ из ДвиженияДокумента.Хозрасчетный Цикл
			
			СчетДтПереоценивается = СчетаПодлежащиеПереоценке.Найти(ПроводкаБУ.СчетДт) <> Неопределено;
			Если СчетДтПереоценивается Тогда
				
				СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
				
				СтрокаДляПереоценки.Счет          = ПроводкаБУ.СчетДт;
				СтрокаДляПереоценки.Подразделение = ПроводкаБУ.ПодразделениеДт;
				СтрокаДляПереоценки.Валюта        = ПроводкаБУ.ВалютаДт;
				
				ВидыСубконтоСчета = ВидыСубконтоСчетов[ПроводкаБУ.СчетДт];
				Если ВидыСубконтоСчета = Неопределено Тогда
					ВидыСубконтоСчета = ПроводкаБУ.СчетДт.ВидыСубконто;
					ВидыСубконтоСчетов.Вставить(ПроводкаБУ.СчетДт, ВидыСубконтоСчета);
				КонецЕсли;
				
				Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
					НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
					ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
					СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
					Если ИспользоватьСубконто Тогда
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = ПроводкаБУ.СубконтоДт[СтрокаВидаСубконто.ВидСубконто];
					Иначе
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			СчетКтПереоценивается = СчетаПодлежащиеПереоценке.Найти(ПроводкаБУ.СчетКт) <> Неопределено;
			Если СчетКтПереоценивается Тогда
				
				СтрокаДляПереоценки = ТаблицаДляПереоценки.Добавить();
				
				СтрокаДляПереоценки.Счет          = ПроводкаБУ.СчетКт;
				СтрокаДляПереоценки.Подразделение = ПроводкаБУ.ПодразделениеКт;
				СтрокаДляПереоценки.Валюта        = ПроводкаБУ.ВалютаКт;
				
				ВидыСубконтоСчета = ВидыСубконтоСчетов[ПроводкаБУ.СчетКт];
				Если ВидыСубконтоСчета = Неопределено Тогда
					ВидыСубконтоСчета = ПроводкаБУ.СчетКт.ВидыСубконто;
					ВидыСубконтоСчетов.Вставить(ПроводкаБУ.СчетКт, ВидыСубконтоСчета);
				КонецЕсли;
				
				Для Каждого СтрокаВидаСубконто Из ВидыСубконтоСчета Цикл
					НомерСубконто        = СтрокаВидаСубконто.НомерСтроки;
					ИспользоватьСубконто = НЕ СтрокаВидаСубконто.ТолькоОбороты;
					СтрокаДляПереоценки["ИспользоватьСубконто" + НомерСубконто] = ИспользоватьСубконто;
					Если ИспользоватьСубконто Тогда
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = ПроводкаБУ.СубконтоКт[СтрокаВидаСубконто.ВидСубконто];
					Иначе
						СтрокаДляПереоценки["Субконто" + НомерСубконто] = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;

		КонецЦикла;
		
		НетПереоцениваемыхСчетов = (ТаблицаДляПереоценки.Количество() = 0);
		Если НетПереоцениваемыхСчетов Тогда
			Возврат;
		КонецЕсли;

		ТаблицаДляПереоценки.Свернуть(
			"Счет, Подразделение, Субконто1, Субконто2, Субконто3, ИспользоватьСубконто1, ИспользоватьСубконто2, ИспользоватьСубконто3, Валюта");
		
		// По строкам подготовленной таблицы для переоценки выполняются запросы к остаткам
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет КАК Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
		|	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
		|	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
		|	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
		|	ХозрасчетныйОстатки.Валюта,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах,
		|	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток,
		|	ХозрасчетныйОстатки.СуммаОстаток,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.НалоговыйУчет
		|			ТОГДА ХозрасчетныйОстатки.СуммаНУОстаток
		|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
		|	КОНЕЦ КАК СуммаНУОстаток
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаОстатков,
		|			Счет = &Счет,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И (Подразделение = &Подразделение
		|					ИЛИ Подразделение ЕСТЬ NULL )
		|				И Валюта = &Валюта
		|				И Субконто1 = &Субконто1
		|				И Субконто2 = &Субконто2
		|				И Субконто3 = &Субконто3) КАК ХозрасчетныйОстатки
		|
		|ДЛЯ ИЗМЕНЕНИЯ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки";
		
		ВалютныеОстатки = Новый ТаблицаЗначений;
		
		Для каждого СтрокаДляПереоценки Из ТаблицаДляПереоценки Цикл
			
			Запрос.УстановитьПараметр("Счет",          СтрокаДляПереоценки.Счет);
			Запрос.УстановитьПараметр("Подразделение", СтрокаДляПереоценки.Подразделение);
			Запрос.УстановитьПараметр("Валюта",        СтрокаДляПереоценки.Валюта);
			Запрос.УстановитьПараметр("Субконто1",     СтрокаДляПереоценки.Субконто1);
			Запрос.УстановитьПараметр("Субконто2",     СтрокаДляПереоценки.Субконто2);
			Запрос.УстановитьПараметр("Субконто3",     СтрокаДляПереоценки.Субконто3);
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаДляПереоценки.Счет];
			Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконтоСчета.ВыгрузитьКолонку("ВидСубконто"));
			
			ТекстЗапроса = ШаблонТекстаЗапроса;
			
			ЭтоСчетРасчетов = СчетаРасчетовСКонтрагентами.Найти(СтрокаДляПереоценки.Счет) <> Неопределено;
			Если НЕ ЭтоСчетРасчетов Тогда
				
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора",
					"НЕОПРЕДЕЛЕНО КАК ВидДоговора");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
					"ЕСТЬNULL(ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах, ЛОЖЬ) КАК РасчетыВУсловныхЕдиницах",
					"ЛОЖЬ КАК РасчетыВУсловныхЕдиницах");
				
			КонецЕсли;
			
			Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто1 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто1", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
				|				И Субконто1 = &Субконто1", "");
			КонецЕсли;
			Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто2 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто2", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
				|				И Субконто2 = &Субконто2", "");
			КонецЕсли;
			Если НЕ СтрокаДляПереоценки.ИспользоватьСубконто3 Тогда
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ХозрасчетныйОстатки.Субконто3", "НЕОПРЕДЕЛЕНО");
				ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "
				|				И Субконто3 = &Субконто3", "");
			КонецЕсли;
			
			Запрос.Текст = ТекстЗапроса;
			Результат = Запрос.Выполнить();
			
			Если Результат.Пустой() Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВалютныеОстатки.Количество() = 0 Тогда
				ВалютныеОстатки = Результат.Выгрузить();
			Иначе
				ТаблицаРезультата = Результат.Выгрузить();
				Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
					СтрокаОстатка = ВалютныеОстатки.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаОстатка, СтрокаРезультата);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; // Подготовлены остатки для переоценки
	
	Если ВалютныеОстатки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы Тогда
	
		// Счета, результат переоценки которых (БУ) нужно отразить в УСН
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка КАК Счет
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Валютный
		|		И Хозрасчетный.Ссылка В ИЕРАРХИИ 
		|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВалютныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СпециальныеСчета), 
		|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПереводыВПути_))";
		
		СчетаПереоценкиУСН = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
		// Данные по счетам, переоценка которых отражается в УСН
		
		ТаблицаКурсовыхРазницУСН = Новый ТаблицаЗначений;
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Счет",   Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("БанковскийСчет", 	Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТаблицаКурсовыхРазницУСН.Колонки.Добавить("Сумма",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
	КонецЕсли;
	
	// Счета расчетов с поставщиками - используются для определения авансов по валютным договорам с комиссионерами и комитентами
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал))";
	
	СчетаРасчетовСПоставщиками = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
	// Счета расчетов с покупателями - используются для определения авансов по валютным договорам с комиссионерами и комитентами
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Валютный
	|	И Хозрасчетный.Ссылка В ИЕРАРХИИ 
	|		(ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками), 
	|			ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал))";
	
	СчетаРасчетовСПокупателями = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
		
	// Формирование проводок по курсовым разницам 
	
	КэшКурсовВалют = Новый Соответствие;
	
	СтатьяКурсовыхРазниц   = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницы;
	СтатьяКурсовыхРазницУЕ = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ;
	
	// Определяем необходимость переоценивать авансы в НУ, если в документе, из которого вызвана процедура переоценки,
	// не производился зачет аванса и нет нужного свойства в структуре шапки
	Если НЕ СтруктураШапкиДокумента.Свойство("ОцениватьДоходыИРасходыВНУПоКурсуАвансов") Тогда
		
		Если ОтражатьВ_НУ Тогда
			
			НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов = Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Получить();
			ОцениватьДоходыИРасходыВНУПоКурсуАвансов =
				ЗначениеЗаполнено(НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов)
				И (НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов <= СтруктураШапкиДокумента.Дата);
		Иначе
			
			ОцениватьДоходыИРасходыВНУПоКурсуАвансов = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ОцениватьДоходыИРасходыВНУПоКурсуАвансов = СтруктураШапкиДокумента.ОцениватьДоходыИРасходыВНУПоКурсуАвансов;
		
	КонецЕсли;
	
	Для каждого СтрокаОстатка из ВалютныеОстатки Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаОстатка.Валюта) Тогда
			
			ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
			Если ВидыСубконтоСчета = Неопределено Тогда
				ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
				ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
			КонецЕсли;
			
			СтрокаСообщения = "Ошибка переоценки валютных счетов.
			|Обнаружены остатки по валютным счетам без указания валюты. Переоценка остатка не производится."
				+ Символы.ПС + "	- счет: " + СтрокаОстатка.Счет + " <" + СтрокаОстатка.Счет.Наименование + ">";
			Для НомерСубконто = 1 по ВидыСубконтоСчета.Количество() Цикл
				Если ВидыСубконтоСчета[НомерСубконто-1].ТолькоОбороты Тогда
					Продолжить;
				КонецЕсли;
				СтрокаСообщения = СтрокаСообщения + Символы.ПС 
					+ "		- субконто <" + Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + "> : """ 
					+ СтрокаОстатка["Субконто" + НомерСубконто] + """";
			КонецЦикла;
			СтрокаСообщения = СтрокаСообщения + Символы.ПС 
				+ "		валютный остаток: " + Формат(СтрокаОстатка.ВалютнаяСуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-") 
				+ " , рублевый остаток: " + Формат(СтрокаОстатка.СуммаОстаток, "ЧЦ=15; ЧДЦ=2; ЧН=-") + "
				|Рекомендуется указать валюту в проводках под указанным данным";
				
			Если РегламентнаяПереоценка Тогда
				ЗакрытиеМесяца.СообщитьОбОшибкеРегОперации(СтрокаСообщения, , Отказ, СтруктураПараметров.РегламентныйДокумент);
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, , Заголовок);
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;  
		
		// В БУ не переоцениваются авансы по расчетам в валюте и в условных единицах
		// В НУ не переоценивается авансы и задолженность по расчетам в условных единицах,
		// а также авансы по договорам в валюте, если дата документа 
		// позже константы НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.
		// Во всех случаях разного порядка переоценки в БУ и НУ возникают постоянные разницы
		
		// Аванс или задолженность - определяется по виду остатка на счете (дебиторская/кредиторская)
		// и по виду договора
		// Вид договора в таблице остатков определен только для счетов расчетов
		
		Если СтрокаОстатка.ВалютнаяСуммаОстаток = 0 Тогда
			ПереоцениватьОстатокБУ = Истина;
			ПереоцениватьОстатокНУ = Истина;
			ЭтоАванс = Ложь;
		Иначе
			
			ЭтоРасчетыСКонтрагентами = ЗначениеЗаполнено(СтрокаОстатка.ВидДоговора);
			
			Если ЭтоРасчетыСКонтрагентами Тогда
				
				Если СтрокаОстатка.ВалютнаяСуммаОстаток = 0 Тогда
				
					ЭтоАванс = Ложь;
				
				ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
					
					ЭтоАванс = СтрокаОстатка.ВалютнаяСуммаОстаток < 0;
				
				ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
					
					ЭтоАванс = СтрокаОстатка.ВалютнаяСуммаОстаток > 0;
				
				ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
					
					Если СтрокаОстатка.ВалютнаяСуммаОстаток > 0 Тогда
						ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
						ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
					Иначе
						ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
						ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
					КонецЕсли;
				
				ИначеЕсли СтрокаОстатка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
					
					Если СтрокаОстатка.ВалютнаяСуммаОстаток > 0 Тогда
						ЭтоСчетРасчетовСПоставщиком = СчетаРасчетовСПоставщиками.Найти(СтрокаОстатка.Счет) <> Неопределено;
						ЭтоАванс                    = ЭтоСчетРасчетовСПоставщиком;
					Иначе
						ЭтоСчетРасчетовСПокупателем = СчетаРасчетовСПокупателями.Найти(СтрокаОстатка.Счет) <> Неопределено;
						ЭтоАванс                    = ЭтоСчетРасчетовСПокупателем;
					КонецЕсли;
					
				Иначе //.Прочее
					
					ЭтоАванс = Ложь;
				
				КонецЕсли;
				
			Иначе
				
				ЭтоАванс = Ложь;
				
			КонецЕсли;
				
			ПереоцениватьОстатокБУ = НЕ ЭтоАванс;
			ПереоцениватьОстатокНУ = ОтражатьВ_НУ 
				И (НЕ СтрокаОстатка.РасчетыВУсловныхЕдиницах)
				И ((НЕ ОцениватьДоходыИРасходыВНУПоКурсуАвансов) ИЛИ (НЕ ЭтоАванс));
				
		КонецЕсли;
		
		Если (НЕ ПереоцениватьОстатокБУ) И (НЕ ПереоцениватьОстатокНУ) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКурса = КэшКурсовВалют[СтрокаОстатка.Валюта];
		Если СтруктураКурса = Неопределено Тогда
			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаОстатка.Валюта, Дата);
			КэшКурсовВалют.Вставить(СтрокаОстатка.Валюта, СтруктураКурса);
		КонецЕсли;

		ОстатокВал = СтрокаОстатка.ВалютнаяСуммаОстаток;
		Остаток    = СтрокаОстатка.СуммаОстаток;
		ОстатокНУ  = СтрокаОстатка.СуммаНУОстаток;
		
		РасчетныйОстаток = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ОстатокВал, 
			СтрокаОстатка.Валюта, ВалютаРегламентированногоУчета,
			СтруктураКурса.Курс, 1,
			СтруктураКурса.Кратность, 1);
			
		Если ПереоцениватьОстатокБУ Тогда
			СуммаПереоценки = РасчетныйОстаток - Остаток;
		Иначе
			СуммаПереоценки = 0;
		КонецЕсли;
		
		Если ПереоцениватьОстатокНУ Тогда
			СуммаПереоценкиНУ = РасчетныйОстаток - ОстатокНУ;
		Иначе
			СуммаПереоценкиНУ = 0;
		КонецЕсли;
		
		// Возможно отклонение в 1 копейку, т.к. Расчетный остаток округляется до двух знаков
		Если (СуммаПереоценки <= 0.01 И СуммаПереоценки >= -0.01) И (СуммаПереоценкиНУ <= 0.01 И СуммаПереоценкиНУ >= -0.01) Тогда
			Продолжить;
		КонецЕсли;

		// Проводка по переоценке
		
		Проводка = ?(РегламентнаяПереоценка, ДвиженияДокумента.Хозрасчетный.Добавить(), ДвиженияДокумента.Хозрасчетный.Вставить(0));
		
		Проводка.Период      = Дата;
		Проводка.Организация = Организация;
		Проводка.Содержание  = "Переоценка валютных остатков";
		
		ВидыСубконтоСчета = ВидыСубконтоСчетов[СтрокаОстатка.Счет];
		Если ВидыСубконтоСчета = Неопределено Тогда
			ВидыСубконтоСчета = СтрокаОстатка.Счет.ВидыСубконто;
			ВидыСубконтоСчетов.Вставить(СтрокаОстатка.Счет, ВидыСубконтоСчета);
		КонецЕсли;
		
		// С 2010 года результат переоценки авансов в НУ не образует курсовых разниц в налоговом учете и относится на счет 99.09
		ЭтоАванс2010 = ЭтоАванс И (Дата >= '20100101');
		
		Если (СуммаПереоценки < 0) ИЛИ (СуммаПереоценкиНУ < 0) Тогда
			
			Проводка.СчетКт = СтрокаОстатка.Счет;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, Проводка.СубконтоКт, 1, СтрокаОстатка.Субконто1, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, Проводка.СубконтоКт, 2, СтрокаОстатка.Субконто2, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, Проводка.СубконтоКт, 3, СтрокаОстатка.Субконто3, , , ВидыСубконтоСчета);
			
			Проводка.ВалютаКт = СтрокаОстатка.Валюта;
			
			Если ЭтоАванс2010 Тогда
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
				
				СуммаНУ = -СуммаПереоценкиНУ;				
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(0, СуммаНУ, 0, - СуммаНУ, , ,
					Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			Иначе
					
				Проводка.СчетДт = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
				Если СтрокаОстатка.РасчетыВУсловныхЕдиницах Тогда
					Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазницУЕ;
				Иначе
					Проводка.СубконтоДт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
				КонецЕсли;
				
				Проводка.Сумма = -СуммаПереоценки;
				
				Если ОтражатьВ_НУ Тогда
					СуммаНУДт = ?(СтрокаОстатка.РасчетыВУсловныхЕдиницах, 0, -СуммаПереоценкиНУ);
					СуммаНУКт = -СуммаПереоценкиНУ;
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУКт, , ,
						Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;
					
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаОстатка.Подразделение, СтрокаОстатка.Подразделение);
			
		Иначе
			
			Проводка.СчетДт = СтрокаОстатка.Счет;
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, Проводка.СубконтоДт, 1, СтрокаОстатка.Субконто1, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, Проводка.СубконтоДт, 2, СтрокаОстатка.Субконто2, , , ВидыСубконтоСчета);
			БухгалтерскийУчет.УстановитьСубконто(СтрокаОстатка.Счет, Проводка.СубконтоДт, 3, СтрокаОстатка.Субконто3, , , ВидыСубконтоСчета);
			
			Проводка.ВалютаДт = СтрокаОстатка.Валюта;
			
			Если ЭтоАванс2010 Тогда
				
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеПрибылиИУбытки;
				
				СуммаНУ = СуммаПереоценкиНУ;			
				НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУ, 0, - СуммаНУ, 0, , ,
					Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				
			Иначе
					
				Проводка.СчетКт = ПланыСчетов.Хозрасчетный.ПрочиеДоходы;
				Если СтрокаОстатка.РасчетыВУсловныхЕдиницах Тогда
					Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазницУЕ;
				Иначе
					Проводка.СубконтоКт.ПрочиеДоходыИРасходы = СтатьяКурсовыхРазниц;
				КонецЕсли;
				
				Проводка.Сумма    = СуммаПереоценки;
				
				Если ОтражатьВ_НУ Тогда
					СуммаНУДт = СуммаПереоценкиНУ;
					СуммаНУКт = ?(СтрокаОстатка.РасчетыВУсловныхЕдиницах, 0, СуммаПереоценкиНУ);
					НалоговыйУчет.ЗаполнитьНалоговыеСуммыПроводки(СуммаНУДт, СуммаНУКт, Проводка.Сумма - СуммаНУДт, Проводка.Сумма - СуммаНУКт, , ,
						Проводка, СтруктураШапкиДокумента.ПрименениеПБУ18);
				КонецЕсли;
			
			КонецЕсли;
			
			БухгалтерскийУчет.УстановитьПодразделенияПроводки(
				Проводка, СтрокаОстатка.Подразделение, СтрокаОстатка.Подразделение);
			
		КонецЕсли;
		
		Если РегламентнаяПереоценка Тогда
			
			// При регламентной переоценке формируется таблица для записи расчета переоценки в служебный регистр сведений
			
			СтрокаРасчетаПереоценкиВалюты = ТаблицаРасчетаПереоценкиВалюты.Добавить();
			
			СтрокаРасчетаПереоценкиВалюты.Счет           = СтрокаОстатка.Счет;
			СтрокаРасчетаПереоценкиВалюты.Подразделение  = СтрокаОстатка.Подразделение;
			СтрокаРасчетаПереоценкиВалюты.Субконто1      = СтрокаОстатка.Субконто1;
			СтрокаРасчетаПереоценкиВалюты.Субконто2      = СтрокаОстатка.Субконто2;
			СтрокаРасчетаПереоценкиВалюты.Субконто3      = СтрокаОстатка.Субконто3;
			СтрокаРасчетаПереоценкиВалюты.Валюта         = СтрокаОстатка.Валюта;
			СтрокаРасчетаПереоценкиВалюты.СуммаВВалюте   = ОстатокВал;
			СтрокаРасчетаПереоценкиВалюты.СуммаВРублях   = Остаток;
			СтрокаРасчетаПереоценкиВалюты.СуммаВРубляхНУ = ОстатокНУ;
			СтрокаРасчетаПереоценкиВалюты.СуммаВРубляхПР = Остаток - ОстатокНУ;
			СтрокаРасчетаПереоценкиВалюты.КурсПереоценки = СтруктураКурса.Курс;
			СтрокаРасчетаПереоценкиВалюты.Сумма          = СуммаПереоценки;
			СтрокаРасчетаПереоценкиВалюты.СуммаНУ        = СуммаПереоценкиНУ;
			СтрокаРасчетаПереоценкиВалюты.СуммаПР        = СуммаПереоценки - СуммаПереоценкиНУ;
			
		КонецЕсли;

		Если (СуммаПереоценки <> 0) И (ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы) Тогда
			
			ОтражатьПереоценкуСчетаВУСН = СчетаПереоценкиУСН.Найти(СтрокаОстатка.Счет) <> Неопределено;
			
			Если ОтражатьПереоценкуСчетаВУСН Тогда
				СтрокаПереоценки        = ТаблицаКурсовыхРазницУСН.Добавить();
				СтрокаПереоценки.Счет   = СтрокаОстатка.Счет;
				СтрокаПереоценки.Валюта = СтрокаОстатка.Валюта;
				СтрокаПереоценки.Сумма  = СуммаПереоценки;
				Если ТипЗнч(СтрокаОстатка.Субконто1) = Тип("СправочникСсылка.БанковскиеСчета") Тогда
					СтрокаПереоценки.БанковскийСчет  = СтрокаОстатка.Субконто1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование движений регистра КнигаУчетаДоходовИРасходов для УСН
	
	Если (ОтражатьВ_УСН ИЛИ ОтражатьВ_УСНДоходы) И ТаблицаКурсовыхРазницУСН.Количество() > 0 Тогда
		
		РеквизитыПервичногоДокумента = НалоговыйУчетУСН.РеквизитыПервичногоДокумента(СтруктураШапкиДокумента.Ссылка);
		
		ТаблицаКурсовыхРазницУСН.Свернуть("Валюта, Счет, БанковскийСчет", "Сумма");
		
		Для Каждого СтрокаПереоценки Из ТаблицаКурсовыхРазницУСН Цикл
			
			Если СтрокаПереоценки.Сумма > 0 Тогда
				
				ЗаписьКУДиР                = ДвиженияДокумента.КнигаУчетаДоходовИРасходов.Добавить();
				ЗаписьКУДиР.Период         = СтруктураШапкиДокумента.Дата;
				ЗаписьКУДиР.Активность     = Истина;
				ЗаписьКУДиР.Организация    = СтруктураШапкиДокумента.Организация;
				ЗаписьКУДиР.Графа4         = СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа5         = СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа6         = 0;
				ЗаписьКУДиР.Графа7         = 0;
				ЗаписьКУДиР.НДС	           = 0;
				ЗаписьКУДиР.ЭтапПроведения = -1;
				Если ЗначениеЗаполнено(СтрокаПереоценки.БанковскийСчет) Тогда
					ЗаписьКУДиР.Содержание     = "Доход от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + ", расчетный счет № """ + СтрокаПереоценки.БанковскийСчет.НомерСчета + """";
				Иначе
					ЗаписьКУДиР.Содержание     = "Доход от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + " """ + СтрокаПереоценки.Счет.Наименование + """";
				КонецЕсли;
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
				
			ИначеЕсли СтрокаПереоценки.Сумма < 0 И НЕ ОтражатьВ_УСНДоходы Тогда
				
				ЗаписьКУДиР                = ДвиженияДокумента.КнигаУчетаДоходовИРасходов.Добавить();
				ЗаписьКУДиР.Период         = СтруктураШапкиДокумента.Дата;
				ЗаписьКУДиР.Активность     = Истина;
				ЗаписьКУДиР.Организация    = СтруктураШапкиДокумента.Организация;
				ЗаписьКУДиР.Графа4         = 0;
				ЗаписьКУДиР.Графа5         = 0;
				ЗаписьКУДиР.Графа6         = - СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.Графа7         = - СтрокаПереоценки.Сумма;
				ЗаписьКУДиР.НДС	           = 0;
				ЗаписьКУДиР.ЭтапПроведения = -1;
				Если ЗначениеЗаполнено(СтрокаПереоценки.БанковскийСчет) Тогда
					ЗаписьКУДиР.Содержание     = "Расходы от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + ", расчетный счет № """ + СтрокаПереоценки.БанковскийСчет.НомерСчета + """";
				Иначе
					ЗаписьКУДиР.Содержание     = "Расходы от переоценки " + СтрокаПереоценки.Валюта 
						+ " на счете "+ СтрокаПереоценки.Счет + " """ + СтрокаПереоценки.Счет.Наименование + """";
				КонецЕсли;
				ЗаписьКУДиР.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Функция возвращает количество для записи в проводку
// Если на счете не ведется количественный учет, то возвращается 0
//
// Параметры:
// 		Счет - счет проводки
//      Количество - количество для проводки
//		
// Возврат:
//		Количество для записи в проводку
//
Функция КоличествоВПроводку(Счет, Количество) Экспорт

	Возврат ?(Счет.Пустая(), 0, ?(Счет.Количественный, Количество, 0));

КонецФункции // КоличествоВПроводку()

// Производит замену субконто НУ на субконто БУ, если у них одинаковые типы-
// 
Процедура ЗаменитьСубконтоНУ(СчетБУ, СчетНУ, НомерСубконто, СубконтоБУ, СубконтоНУ) Экспорт

	Если НЕ ЗначениеЗаполнено(СчетБУ) Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		Возврат;
	КонецЕсли;

	Если СчетНУ.ВидыСубконто.Количество() >= НомерСубконто Тогда
		Если СчетБУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения = 
			СчетНУ.ВидыСубконто[НомерСубконто - 1].ВидСубконто.ТипЗначения Тогда

			СубконтоНУ = СубконтоБУ;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаменитьСубконтоНУ()

// Функция возвращает истину, если на указанном складе ведется розничная
// торговля. Используется при определении счетов учета номенклатуры,
// выполняемом при заполнении документов.
//
Функция НаСкладеВедетсяРозничнаяТорговля(Склад) Экспорт
	
	ВедетсяРозничнаяТорговля = Ложь;
	Если Склад <> Неопределено Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
			Если (Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) или
				 (Склад.ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка) Тогда
				 
				ВедетсяРозничнаяТорговля = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ВедетсяРозничнаяТорговля;

КонецФункции // НаСкладеВедетсяРозничнаяТорговля()

Функция ПолучитьСчетаУчетаВНТТ(Организация, Склад, Дата, УчетнаяПолитикаНУ) Экспорт
	
	СтруктураВозврата = Новый Структура("
	|СчетДоходовОтРеализации, 
	|СчетРасходовОтРеализации");
	
	Отбор = Новый Структура("ТорговаяТочка");
	Отбор.ТорговаяТочка = Склад;
	СрезПоследних   = РегистрыСведений.СчетаУчетаВНТТ.СрезПоследних(Дата, Отбор);

	Если СрезПоследних.Количество() = 0 Тогда
		СтруктураВозврата.СчетДоходовОтРеализации  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	Иначе
		СтруктураВозврата.СчетДоходовОтРеализации  = СрезПоследних[0].СчетДоходовОтРеализации;
		СтруктураВозврата.СчетРасходовОтРеализации = СрезПоследних[0].СчетРасходовОтРеализации;
	КонецЕсли;
	
	Если (СтруктураВозврата.СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()) 
		И (СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка()) Тогда 
		Если УчетнаяПолитикаНУ.РозничнаяТорговляОблагаетсяЕНВД Тогда
			СтруктураВозврата.СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД;
		Иначе
			СтруктураВозврата.СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД;
			СтруктураВозврата.СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция возвращает счета учета номенклатуры по выбранной организации.
//
// Параметры:
//  Организация         - организация, по которой определяются счета учета
//  Склад		        - место хранения, по которому определяются счета учета
//  Номенклатура        - номенклатура, по которой определяются счета учета
//
// Возвращаемое значение:
//  Структура - структура содержащая счета учета расчетов
// 
Функция ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад = Неопределено) Экспорт

	СтруктураВозврата = Новый Структура("
	|СчетУчета, 
	|СчетУчетаНДС, 
	|СчетУчетаНДСПродажи, 
	|СчетНДСТаможни,
	|СчетУчетаДавСырья,
	|СчетПередачи, 
	|СчетУчетаДоп,   
	|СчетПередачиЗаб,
	|СчетДоходов, 
	|СчетРасходов,
	|Субконто1,
	|Субконто2,
	|Субконто3");

	МассивСклад			 = Новый Массив();
	МассивТипСклада		 = Новый Массив();
	МассивНоменклатура	 = Новый Массив();
	МассивОрганизация	 = Новый Массив();
	
	МассивСклад.Добавить(Справочники.Склады.ПустаяСсылка());
	МассивТипСклада.Добавить(Перечисления.ТипыСкладов.ПустаяСсылка());
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
		
	Если ЗначениеЗаполнено(Склад) Тогда
		МассивСклад.Добавить(Склад);
		МассивТипСклада.Добавить(?(Склад.ВидСклада = Перечисления.ВидыСкладов.Оптовый, Перечисления.ТипыСкладов.Оптовый, Перечисления.ТипыСкладов.Розничный));
	КонецЕсли;
	
	МассивНоменклатура.Добавить(Номенклатура);
	СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	МассивОрганизация.Добавить(Организация);
	
	ТестЗапрос = Новый Запрос();
	
	ТестЗапрос.УстановитьПараметр("Организация",        МассивОрганизация);
	ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	ТестЗапрос.УстановитьПараметр("Склад",			    МассивСклад);
	ТестЗапрос.УстановитьПараметр("ТипСклада",			МассивТипСклада);
	
	ТестЗапрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.СчетУчетаЗабалансовый КАК СчетУчетаЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачиЗабалансовый КАК СчетУчетаПередачиЗабалансовый,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации,
	|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|	
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Организация В (&Организация)
	|	И СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)
	|	И СчетаУчетаНоменклатуры.Склад В (&Склад)
	|	И СчетаУчетаНоменклатуры.ТипСклада В (&ТипСклада)";
	
	ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Склад Убыв, ТипСклада Убыв, Организация Убыв");

	Если ТаблицаЗапроса.Количество() > 0 Тогда

		СведенияОСчетах = ТаблицаЗапроса[0];
		
		СтруктураВозврата.СчетУчета           = СведенияОСчетах.СчетУчета;
		СтруктураВозврата.СчетУчетаНДС        = СведенияОСчетах.СчетУчетаНДСПоПриобретеннымЦенностям;
		СтруктураВозврата.СчетУчетаНДСПродажи = СведенияОСчетах.СчетУчетаНДСПоРеализации;
		СтруктураВозврата.СчетНДСТаможни      = СведенияОСчетах.СчетУчетаНДСУплаченногоНаТаможне;
		СтруктураВозврата.СчетУчетаДоп        = СведенияОСчетах.СчетУчета;
		СтруктураВозврата.СчетУчетаДавСырья   = СведенияОСчетах.СчетУчетаЗабалансовый;
		СтруктураВозврата.СчетДоходов         = СведенияОСчетах.СчетДоходовОтРеализации;
		СтруктураВозврата.СчетПередачи        = СведенияОСчетах.СчетУчетаПередачи;
		СтруктураВозврата.СчетПередачиЗаб     = СведенияОСчетах.СчетУчетаПередачиЗабалансовый;
		СтруктураВозврата.СчетРасходов        = СведенияОСчетах.СчетРасходовОтРеализации;

		СтруктураВозврата.Субконто1      = СведенияОСчетах.Субконто1;
		СтруктураВозврата.Субконто2    	 = СведенияОСчетах.Субконто2;
		СтруктураВозврата.Субконто3    	 = СведенияОСчетах.Субконто3;

	КонецЕсли;

	Возврат СтруктураВозврата;

КонецФункции // ПолучитьСчетаУчетаНоменклатуры()

// Снимает/устанавливает активность проводок документа (бух. учет).
//
Процедура ПереключитьАктивностьПроводокБУ(Документ) Экспорт
	
	Если Документ.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокБУ()

Функция ПолучитьВспомогательныйСчет() Экспорт
	Возврат ПланыСчетов.Хозрасчетный.Вспомогательный;
КонецФункции

Функция ПолучитьСчетРасходовНаПродажу() Экспорт
	Возврат ПланыСчетов.Хозрасчетный.ИздержкиОбращения;
КонецФункции

// Функция предназначена для определения названия объекта
// учета по его счету учета. Название объекта выдается в родительном падеже
Функция ПолучитьНазваниеОбъекта(СчетУчета) Экспорт
	
	Если Сред(СчетУчета.Код, 4, 1) = "." Тогда
		СчетУчетаКод = Лев(СчетУчета.Код, 3);
	Иначе
		СчетУчетаКод = Лев(СчетУчета.Код, 2);
	КонецЕсли;
	
	Если СчетУчетаКод = "10" Тогда
		
		Если Лев(СчетУчета.Код, 5) = "10.09" Тогда
				Возврат "инвентаря";
				
		ИначеЕсли Лев(СчетУчета.Код, 7) = "10.11.1" Тогда
				Возврат "спецодежды";
				
		ИначеЕсли Лев(СчетУчета.Код, 7) = "10.11.2" Тогда
				Возврат "спецоснастки";
				
		Иначе
				Возврат "материалов";
				
		КонецЕсли;

	ИначеЕсли СчетУчетаКод = "20" Тогда
			Возврат "продукции для давальца";
		
	ИначеЕсли СчетУчетаКод = "21" Тогда
			Возврат "полуфабрикатов";
			
	ИначеЕсли СчетУчетаКод = "41" Тогда
			Возврат "товаров";
			
	ИначеЕсли СчетУчетаКод = "42" Тогда
			Возврат "торговой наценки";
			
	ИначеЕсли СчетУчетаКод = "43" Тогда
			Возврат "продукции";
			
	ИначеЕсли СчетУчетаКод = "45" Тогда
		Возврат "отгруженных товаров";
		
	ИначеЕсли СчетУчетаКод = "001" Тогда
			Возврат "арендованных основных средств";
		
	ИначеЕсли СчетУчетаКод = "002" Тогда
			Возврат "товаров на ответственное хранение";
			
	ИначеЕсли СчетУчетаКод = "003" Тогда
			Возврат "материалов в переработку";
			
	ИначеЕсли СчетУчетаКод = "004" Тогда
			Возврат "товаров комитента";
			
	ИначеЕсли СчетУчетаКод = "005" Тогда
			Возврат "оборудования для монтажа";
			
	Иначе
			Возврат "запасов";
			
	КонецЕсли;
	
	
КонецФункции

#Если Клиент тогда

// Процедура устанавливает отборы в формах выбора субконто, такие как
// Организация, Контрагент и др.
//
// Параметры:
//  Элемент      - элемент управления, для которого устанавливается отбор
//  СтандартнаяОбработка - Булево, признак стандартной обработки выбора
//                 в элементе формы
//  СписокПараметров -СписокЗначений, в котором передаются параметры
//                 отбора для форм выбора партий, документов расчетов
//                 с контрагентами
//  ОграничениеТипаЭлемента - ОписаниеТипов, содержащее список допустимых
//                 типов элемента управления
//
Процедура ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров = Неопределено, ОграничениеТипаЭлемента = Неопределено) Экспорт
	
	Если НЕ ТипЗнч(ОграничениеТипаЭлемента) = Тип("ОписаниеТипов") Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ТипЭлемента = Неопределено Тогда
		    Возврат;
		КонецЕсли; 
		ОграничениеТипаЭлемента = Элемент.ОграничениеТипа;
		
	ИначеЕсли ОграничениеТипаЭлемента.Типы().Количество() > 0 Тогда
		
		ТипЭлемента = ТипЗнч(Элемент.Значение);
		Если ?(ТипЭлемента = Неопределено, Истина, не ОграничениеТипаЭлемента.СодержитТип(ТипЭлемента)) Тогда
			ТипЭлемента = ОграничениеТипаЭлемента.Типы()[0];
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = Организация;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.ДоговорыКонтрагентов.ПолучитьФормуВыбора(,Элемент,);

		Если Организация <> Неопределено Тогда
			ФормаВыбора.СправочникСписок.Отбор.Организация.Значение      = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			ФормаВыбора.СправочникСписок.Отбор.Организация.Использование = Истина;
			ФормаВыбора.СправочникСписок.Отбор.Организация.ВидСравнения  = ВидСравнения.Равно;
			
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Организация.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			Если СписокПараметров.Свойство("Контрагент") Тогда
				
				Если ТипЗнч(СписокПараметров.Контрагент) =  Тип("СправочникСсылка.Контрагенты") Тогда
					
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Значение      = СписокПараметров.Контрагент;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.Использование = Истина;
					ФормаВыбора.СправочникСписок.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
					
					ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли; 

	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения 
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.Партия") Тогда

		СтандартнаяОбработка    = Ложь;
		ФормаВыбора             = Документы.Партия.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.мТипыДокументов = ОграничениеТипаЭлемента; 
		ФормаВыбора.Организация = Организация;

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			
			ФормаВыбора.Счет         = ?(СписокПараметров.Свойство("СчетУчета")		, СписокПараметров.СчетУчета	, Неопределено);
			ФормаВыбора.Номенклатура = ?(СписокПараметров.Свойство("Номенклатура")	, СписокПараметров.Номенклатура	, Неопределено);
			ФормаВыбора.Склад        = ?(СписокПараметров.Свойство("Склад")			, СписокПараметров.Склад		, Неопределено);
			
			Если СписокПараметров.Свойство("ЭтоНовыйДокумент")Тогда 
				Если СписокПараметров.ЭтоНовыйДокумент Тогда
					ФормаВыбора.КонПериода = КонецДня(РабочаяДата);
				Иначе
					ФормаВыбора.КонПериода = ?(СписокПараметров.Свойство("Дата"), СписокПараметров.Дата, Неопределено);
				КонецЕсли;
			Иначе
				ФормаВыбора.КонПериода = Неопределено; 
			КонецЕсли;
			

			Если СписокПараметров.Свойство("ВидСубконто") Тогда
				ФормаВыбора.ВидСубконто  = СписокПараметров.ВидСубконто;
			ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения Тогда
				ФормаВыбора.ВидСубконто  = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения
	      ИЛИ ТипЭлемента = Тип("ДокументСсылка.ДокументРасчетовСКонтрагентом") Тогда

		Если ОграничениеТипаЭлемента = Неопределено Тогда
			ОграничениеТипаЭлемента = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения;
		КонецЕсли;   
		  
		СтандартнаяОбработка = Ложь;

		СтруктураПараметров  = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, СчетДляОпределенияОстатков, СторонаСчета");

		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда

			СтруктураПараметров.Вставить("Организация", Организация);

			Если СписокПараметров.Свойство("Контрагент") Тогда
				СтруктураПараметров.Вставить("Контрагент", СписокПараметров.Контрагент);
			КонецЕсли;

			Если СписокПараметров.Свойство("ДоговорКонтрагента") Тогда
				СтруктураПараметров.Вставить("ДоговорКонтрагента", СписокПараметров.ДоговорКонтрагента);
			КонецЕсли;

			Если СписокПараметров.Свойство("Дата") Тогда
				Если ТипЗнч(СписокПараметров.Дата) = Тип("Дата") Тогда
					СтруктураПараметров.Вставить("КонецПериода", СписокПараметров.Дата - 1);
				КонецЕсли;
			КонецЕсли;

			Если СписокПараметров.Свойство("СчетУчета") Тогда
				СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", СписокПараметров.СчетУчета);
			КонецЕсли;

			Если СписокПараметров.Свойство("СторонаПроводки") Тогда
				СтруктураПараметров.Вставить("СторонаСчета", ?(СписокПараметров.СторонаПроводки = "Дт", 1, 0));
			КонецЕсли;
			
			Если СписокПараметров.Свойство("ЭтоНовыйДокумент") Тогда
				СтруктураПараметров.Вставить("ЭтоНовыйДокумент", СписокПараметров.ЭтоНовыйДокумент);
			КонецЕсли;

		КонецЕсли;

		УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, ОграничениеТипаЭлемента);

		Возврат;

	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.ПартияМатериаловВЭксплуатации") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Документы.ПартияМатериаловВЭксплуатации.ПолучитьФормуВыбора(,Элемент,);
		
		Если ТипЗнч(СписокПараметров) = Тип("Структура") Тогда
			ФормаВыбора.Номенклатура = СписокПараметров.Номенклатура;
		КонецЕсли;
		
	// {ОбособленныеПодразделения
	
	ИначеЕсли ТипЭлемента = Тип("СправочникСсылка.РегистрацияВИФНС") Тогда

		СтандартнаяОбработка = Ложь;
		ФормаВыбора          = Справочники.РегистрацияВИФНС.ПолучитьФормуВыбора(,Элемент,);
		ФормаВыбора.ПараметрОтборПоВладельцу = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность = Ложь;

	// }ОбособленныеПодразделения 
	
	КонецЕсли;

	Если НЕ СтандартнаяОбработка Тогда 
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры // ОбработатьВыборСубконто()

// Открывает журнал проводок по бух. или налог. учету. с отбором по выбранному
// документу-регистратору.
//
Процедура ОткрытьЖурналПроводок(Ссылка, Регистр = "БУ") Экспорт

	Если Регистр = "БУ" Тогда

		ФормаСписка = РегистрыБухгалтерии.Хозрасчетный.ПолучитьФормуСписка();
		
		Если ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ТипЗначения.СодержитТип(ТипЗнч(Ссылка)) Тогда
			
			// Сбрасываем предыдущие отборы
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Сбросить();
			
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.ВидСравнения  = ВидСравнения.Равно;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Использование = Истина;
			ФормаСписка.РегистрБухгалтерииСписок.Отбор.Регистратор.Значение      = Ссылка;
			
			ФормаСписка.ЭлементыФормы.РегистрБухгалтерииСписок.НастройкаОтбора["Регистратор"].Доступность = Истина;
			
			ФормаСписка.Открыть();
			
		КонецЕсли;

	Иначе

		Возврат;

	КонецЕсли;

КонецПроцедуры // ОткрытьЖурналПроводок()

// Получает сумму списания активов для заполнения печатных форм документов
//
Функция ПолучитьСуммуСписанияАктивов(ТекДокумент) Экспорт
	
	ПроводкиДокумента = Новый ТаблицаЗначений;
	ПроводкиДокумента.Колонки.Добавить("Номенклатура");
	ПроводкиДокумента.Колонки.Добавить("Количество");
	ПроводкиДокумента.Колонки.Добавить("Сумма");
	ТаблицаСуммСписания = Новый ТаблицаЗначений;
	ТаблицаСуммСписания.Колонки.Добавить("Номенклатура");
	ТаблицаСуммСписания.Колонки.Добавить("Количество");
	ТаблицаСуммСписания.Колонки.Добавить("Сумма");
	Если ТекДокумент.Проведен Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
		|	СУММА(ХозрасчетныйДвиженияССубконто.КоличествоКт) КАК КоличествоКт,
		|	СУММА(ХозрасчетныйДвиженияССубконто.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&ДатаНач, &ДатаКон, Регистратор = &Регистратор И (НЕ СчетКт = &СчетГТД)) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ДатаНач", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("ДатаКон", ТекДокумент.Дата);
		Запрос.УстановитьПараметр("Регистратор", ТекДокумент.Ссылка);
		Запрос.УстановитьПараметр("СчетГТД", ПланыСчетов.Хозрасчетный.ГТД);
		
		ПроводкиДокумента = Запрос.Выполнить().Выгрузить();
		Для Каждого ПроводкаДокумента Из ПроводкиДокумента Цикл
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт1) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт1;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
			Если ТипЗнч(ПроводкаДокумента.СубконтоКт2) = Тип("СправочникСсылка.Номенклатура") Тогда
				Строка = ТаблицаСуммСписания.Добавить();
				Строка.Номенклатура = ПроводкаДокумента.СубконтоКт2;
				Строка.Количество   = ПроводкаДокумента.КоличествоКт;
				Строка.Сумма        = ПроводкаДокумента.Сумма;
			КонецЕсли;
		КонецЦикла;
		ТаблицаСуммСписания.Свернуть("Номенклатура","Количество,Сумма");
	КонецЕсли;
	
  Возврат  ТаблицаСуммСписания;
  
КонецФункции

// Открывает форму с описанием предопределенного счета.
//
// Параметры:
//  Счет          - ПланСчетовСсылка - ссылка на счет, описание которого 
//                  нужно открыть (обязательный параметр).
//  ФормаВладелец - Форма - владелец формы описания счета.
//  
Процедура ОткрытьОписаниеСчета(Счет, ФормаВладелец = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПланаСчетов = Счет.Метаданные().Имя;
	ПланСчетов     = ПланыСчетов[ИмяПланаСчетов];
	Макет          = ПланСчетов.ПолучитьМакет("Описание");
	ИмяСчета       = ПланСчетов.ПолучитьИмяПредопределенного(Счет);
	
	Попытка
		Область = Макет.ПолучитьОбласть(ИмяСчета + "|Описание");
	Исключение
		Область = Макет.ПолучитьОбласть("ОписаниеНеЗадано|Описание");
	КонецПопытки;
	
	// Стили оформления описания
	Оформление = "	
	|<STYLE>	
	|BODY {	FONT-SIZE: 10pt; FONT-FAMILY: Verdana }
	|H1 { FONT-WEIGHT: bold; FONT-SIZE: 14pt; FONT-FAMILY: Arial, Tahoma; TEXT-ALIGN: left }
	|H2 { FONT-WEIGHT: bold; FONT-SIZE: 12pt; FONT-FAMILY: Arial, Tahoma; TEXT-ALIGN: left }
	|</STYLE>";
	
	// Заголовок описания
	ЗаголовокОписания = "<h1>Счет " + Счет.Код + "<br>" + Счет.Наименование + "</h1>";
	
	// Список ссылок на описания субсчетов
	СписокСубсчетов = "";
	Выборка = ПланСчетов.Выбрать(Счет);
	Пока Выборка.Следующий() Цикл
		СписокСубсчетов = СписокСубсчетов + ?(ПустаяСтрока(СписокСубсчетов), "<h2>К счету открыты следующие субсчета " + ?(Счет.Уровень() > 0, СокрЛП(Счет.Уровень() + 1) + "-го уровня", "") + ":</h2><ul>", "");
		СписокСубсчетов = СписокСубсчетов + "<li><a href='ОписаниеСчета=" + ЗначениеВСтрокуВнутр(Выборка.Ссылка) + "'>" + Выборка.Код + " """ + Выборка.Наименование + """</a></li>";
	КонецЦикла;
	СписокСубсчетов = СписокСубсчетов +  "</ul>";
	
	// Ссылка на описание счета-родителя
	ОписаниеРодителя = "";
	Если НЕ Счет.Родитель.Пустая() Тогда
		ОписаниеРодителя = "<p><a href='ОписаниеСчета=" + ЗначениеВСтрокуВнутр(Счет.Родитель) + "'>Описание счета " + Счет.Родитель.Код + " """ + Счет.Родитель.Наименование + """</a></p>"
	КонецЕсли;
	
	ТекстОписания = Оформление
	              + ЗаголовокОписания 
	              + "<p>" + СтрЗаменить(Область.ТекущаяОбласть.Текст, Символы.ПС, "<p></p>") + "</p>" 
	              + СписокСубсчетов
	              + ОписаниеРодителя;
	
	Форма = ПолучитьОбщуюФорму("ФормаОписанияСчета", ФормаВладелец, "ФормаОписанияСчета" + ИмяПланаСчетов + ?(ПустаяСтрока(ИмяСчета), СтрЗаменить(Счет.Код, ".", "_"), ИмяСчета));
	Форма.ЭлементыФормы.ПолеHTMLДокумента.УстановитьТекст(ТекстОписания);
	Форма.Заголовок = "Описание счета: " + Счет.Код;
	Форма.Открыть();

КонецПроцедуры // ОткрытьОписаниеСчета()

#КонецЕсли

// Определяет коэффициент распределения
// расходов по видам деятельности (ЕНВД / не ЕНВД) в детализации по номенклатурным группам.
Функция РаспределениеРасходовПоВидамДеятельности(Организация, НачДата, КонДата) Экспорт
	
	// Расчет базы распределения
	ТекстЗапроса = "ВЫБРАТЬ
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ЕНВД,
	|	ХозрасчетныйОбороты.Субконто1 КАК НоменклатурнаяГруппа,
	|	СУММА(-(ХозрасчетныйОбороты.СуммаОборот)) КАК База
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачГраница, &КонГраница, Период, Счет В ИЕРАРХИИ (&СчетаБазы), , Организация = &Организация) КАК ХозрасчетныйОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР КОГДА ХозрасчетныйОбороты.Счет В (&СчетВыручкаЕНВД) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ,
	|	ХозрасчетныйОбороты.Субконто1";
	
	//Массив счетов, по которым формируется база распределения расходов
	СчетаБазы = Новый Массив;
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Выручка);
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_НДС);
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_Акцизы);
	СчетаБазы.Добавить(ПланыСчетов.Хозрасчетный.Продажи_ЭкспортныеПошлины);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачГраница",      НачДата);
	Запрос.УстановитьПараметр("КонГраница",      КонДата);
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("СчетВыручкаЕНВД", НалоговыйУчетУСН.МассивСчетовВыручкиЕНВД());
	Запрос.УстановитьПараметр("СчетаБазы",       СчетаБазы);
	
	//Убрать отрицательные значения
	Результат = Запрос.Выполнить().Выгрузить();
	
	КолвоЭлементов = Результат.Количество(); 
	Для ОбратныйИндекс = 1 По КолвоЭлементов Цикл
		Строка = Результат[КолвоЭлементов - ОбратныйИндекс];
		Если Строка.База <= 0 Тогда
			Результат.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // БазаРаспределенияПоВыручке()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "", ВидыСубконтоСчета = Неопределено) Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если ВидыСубконтоСчета = Неопределено Тогда
	     ВидыСубконтоСчета = Счет.ВидыСубконто;
	КонецЕсли; 
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > ВидыСубконтоСчета.Количество() Тогда
			Возврат;
		КонецЕсли;

		ВидСубк = ВидыСубконтоСчета[ИмяСубконто - 1].ВидСубконто;

	Иначе

		ВидСубк = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные[ИмяСубконто];

		Если ВидыСубконтоСчета.Найти(ВидСубк) = Неопределено Тогда
			Если Сообщать тогда
				ОбщегоНазначения.СообщитьОбОшибке("Вид субконто <" + ВидСубк + "> для счета """+Счет.Код +" ("+Счет.Наименование+")"" не определен.",, Заголовок );
			КонецЕсли;
			Возврат;
		КонецЕсли;

	КонецЕсли;

	Если ВидСубк.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубк, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубк + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

Функция ОпределитьВидСубконтоПоСчету(Счет, КэшВидовСубконтоПоСчетам) Экспорт
	Если Счет = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Если КэшВидовСубконтоПоСчетам = Неопределено Тогда
		КэшВидовСубконтоПоСчетам = Новый Соответствие;
	КонецЕсли; 
	
	ВидыСубконтоПоСчету = КэшВидовСубконтоПоСчетам[Счет];
	Если ВидыСубконтоПоСчету = Неопределено Тогда
		ВидыСубконтоПоСчету = Счет.ВидыСубконто;
		КэшВидовСубконтоПоСчетам.Вставить(Счет, ВидыСубконтоПоСчету);
	КонецЕсли; 
	
	Возврат ВидыСубконтоПоСчету;
	
КонецФункции

// Процедура устанавливает субконто на счете по виду субконто. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконтоПоВидуСубконто(Счет, Субконто, ВидСубконто, ЗначениеСубконто, Сообщать = Ложь, Заголовок = "") Экспорт

	Если Счет = Неопределено ИЛИ Счет.Пустая() Тогда
		Возврат;
	КонецЕсли;

	Если Счет.ВидыСубконто.Найти(ВидСубконто) = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);

	ИначеЕсли Сообщать тогда
		ОбщегоНазначения.СообщитьОбОшибке("Неверное значение """ + ЗначениеСубконто + """ для вида субконто <" + ВидСубконто + ">",, Заголовок);

	КонецЕсли;

КонецПроцедуры // УстановитьСубконто()

// Процедура устанавливает в проводке подразделение на счете, если по нему ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделение
//      Подразделение - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение
//		ДтКт - <Строка> - если "Дт", подразделение устанавливается по дебету проводки, иначе по кредиту
//
Процедура УстановитьПодразделениеПроводки(Проводка, Подразделение, ДтКт = "Дт") Экспорт
	
	Если Проводка["Счет" + ДтКт].УчетПоПодразделениям Тогда
		Проводка["Подразделение" + ДтКт] = Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает в проводке подразделения, если по счетам дебета и кредита ведется учет по подразделениям
//
// Параметры:
//		Проводка - <запись регистра бухгалтерии> - проводка, в которой нужно установить подразделения
//      ПодразделениеДт - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение по дебету
//      ПодразделениеКт - <СправочникСсылка.ПодразделенияОрганизаций> - устанавливаемое подразделение по кредиту
//
Процедура УстановитьПодразделенияПроводки(Проводка, ПодразделениеДт, ПодразделениеКт) Экспорт

	УстановитьПодразделениеПроводки(Проводка, ПодразделениеДт, "Дт");
	
	УстановитьПодразделениеПроводки(Проводка, ПодразделениеКт, "Кт");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СТАВКАМИ НАЛОГОВ И ВЗНОСОВ

// Эта функция получает ставку взноса на страхование от несчастных случаев
//
// Параметры:      
//	Организация - СправочникСсылка.Организации - организация для которой нужно получить ставку
//	ДатаАктуальности - дата на которую нужно получить ставку
//
// Возвращаемое значение: 
//  Число - размер ставки, если ставка не задана - 0
//
Функция ПолучитьСтавкуВзносаНаСтрахованиеОтНесчастныхСлучаев(Организация, ДатаАктуальности) Экспорт

	Отбор = Новый Структура("Организация", Организация);

	Возврат РегистрыСведений.СтавкаВзносаНаСтрахованиеОтНесчастныхСлучаев.ПолучитьПоследнее(ДатаАктуальности, Отбор).Ставка/100;

КонецФункции // ПолучитьСтавкуВзносаНаСтрахованиеОтНесчастныхСлучаев

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СЧЕТАМИ И СУБКОНТО

// Эта функция возвращает информацию о счете из переданного соответсвия
// Если в соответствии не найдена информация о счете - она подготавливается и 
// помещается в соответсвие
// Применяется для работы с формами в которых активно требуется получать 
// информацию о счетах, например, при выводе строки табличного поля
//
// Параметры:      
//	СведенияОСчетах - соответсвие у которого в качестве ключа - ПланСчетовСсылка, а 
//  				  в качестве значения - структура из 4-х элементов
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто
//					  ВидСубконто2Представление - представление вида субконто
//					  ВидСубконто3Представление - представление вида субконто
//
//	Счет - ПланСчетовСсылка
//
// Возвращаемое значение:
//  Описанная выше структура
//
Функция ПолучитьСведенияОСчете(СведенияОСчетах, Счет) Экспорт

	СведенияОСчете = СведенияОСчетах[Счет];

	Если СведенияОСчете = Неопределено Тогда

		СведенияОСчете = Новый Структура("КоличествоСубконто, ВидСубконто1, ВидСубконто2, ВидСубконто3, ТипСубконто1, ТипСубконто2, ТипСубконто3, ВидСубконто1Представление, ВидСубконто2Представление, ВидСубконто3Представление");

		СведенияОСчете.КоличествоСубконто = Счет.ВидыСубконто.Количество();

		Если СведенияОСчете.КоличествоСубконто > 0 Тогда

			ВидСубконто = Счет.ВидыСубконто[0].ВидСубконто;

			СведенияОСчете.ВидСубконто1              = ВидСубконто;
			СведенияОСчете.ТипСубконто1              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто1Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 1 Тогда

			ВидСубконто = Счет.ВидыСубконто[1].ВидСубконто;

			СведенияОСчете.ВидСубконто2              = ВидСубконто;
			СведенияОСчете.ТипСубконто2              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто2Представление = ВидСубконто.Наименование;

		КонецЕсли;

		Если СведенияОСчете.КоличествоСубконто > 2 Тогда

			ВидСубконто = Счет.ВидыСубконто[2].ВидСубконто;

			СведенияОСчете.ВидСубконто3              = ВидСубконто;
			СведенияОСчете.ТипСубконто3              = ВидСубконто.ТипЗначения;
			СведенияОСчете.ВидСубконто3Представление = ВидСубконто.Наименование;

		КонецЕсли;

		СведенияОСчетах[Счет] = СведенияОСчете;

	КонецЕсли;

	Возврат СведенияОСчете;

КонецФункции  // ПолучитьСведенияОСчете

// Выполняет в табличном поле приведение значений субконто к типу, соответствующему счету
// сведения о счете передаются через параметр СведенияОСчете
// используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
//
// Параметры:
//	ТабличноеПоле 	- табличное поле 
//  ДтКт 			- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 					для колонок табличного поля поддерживаются имена 
//					типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 	- структура
//					  КоличествоСубконто - число
//                    ТипСубконто1 - описание типа
//                    ТипСубконто2 - описание типа
//                    ТипСубконто3 - описание типа
//					  ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					  ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура ПривестиЗначениеСубконто(ТабличноеПоле, ДтКт, СведенияОСчете) Экспорт

	Для СчетчикСубконто = 1 По 3 Цикл

		Если СведенияОСчете.КоличествоСубконто >= СчетчикСубконто Тогда
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = СведенияОСчете["ТипСубконто"+СчетчикСубконто].ПривестиЗначение(ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто]);

		Иначе
			ТабличноеПоле.ТекущиеДанные["Субконто"+ДтКт+СчетчикСубконто] = Неопределено;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры   // ПривестиЗначениеСубконто

// Назначает видимость ячейкам строки табличного поля, соответствующим субконто
// в зависимости от счета. Сведения о счете передаются через параметр СведенияОСчете
// Используется для табличных полей, содержащих колонки типа Счет и соответствующие ему субконто
// при выводе строки
//
// Параметры:
//	ОформлениеСтроки 	- оформление строки
//  ДтКт 				- строка "Дт", "Кт" или "" - часть имени колонки табличного поля
// 						для колонок табличного поля поддерживаются имена 
//						типа СубконтоДт1, СубконтоКт1, Субконто1...
//  СведенияОСчете 		- структура
//					  	КоличествоСубконто - число
//                    	ТипСубконто1 - описание типа
//                    	ТипСубконто2 - описание типа
//                    	ТипСубконто3 - описание типа
//					    ВидСубконто1Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто2Представление - представление вида субконто - в данной процедуре не используется
//					    ВидСубконто3Представление - представление вида субконто - в данной процедуре не используется
//
Процедура НазначитьВидимостьСубконто(ОформлениеСтроки, ДтКт, СведенияОСчете) Экспорт

	Для СчетчикСубконто = 1 По 3 Цикл
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].Видимость = СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
		ОформлениеСтроки.Ячейки["Субконто"+ДтКт+СчетчикСубконто].ТолькоПросмотр = НЕ СведенияОСчете.КоличествоСубконто >= СчетчикСубконто;
	КонецЦикла;

КонецПроцедуры

// Узнаем нужно ли что то перезаполнять и если нужно, то нужно ли задавать вопрос
//Процедура устанавливает два параметра: 
//ЗаполнятьСчета - метка о том нужно ли вообще что-либо перезаполнять
//ЗадаватьВопрос - в том случае если надо перезаполнять, то надо ли задавать вопрос
//				   о перезаполнении, если вопрос не будет задаваться то счета будет перезаполняться автом.
Процедура ПроверитьНеобходимостьПерезаполненияСчетовУчета(ДокументОбъект, СтруктураОбязательныхПолей,СтруктураНеОбязательныхПолей, ЗадаватьВопрос, ЗаполнятьСчета) Экспорт
	ЗаполнятьСчета = Ложь;
	ЗадаватьВопрос = Ложь;
	
	//Проверяем заполнение обязательных	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		ЗначениеРеквизита = ДокументОбъект[КлючЗначение.Ключ];
		ЗначениеНовое = КлючЗначение.Значение; 
		
		Если (ЗначениеЗаполнено(ЗначениеРеквизита))И (ЗначениеРеквизита<>ЗначениеНовое)  Тогда
			ЗадаватьВопрос = Истина;
			ЗаполнятьСчета = Истина;
			Возврат;
		ИначеЕсли (НЕ ЗначениеЗаполнено(ЗначениеРеквизита)) Тогда
			ЗаполнятьСчета = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	//Проверяем заполнение не обязательных
	Для каждого КлючЗначение Из СтруктураНеОбязательныхПолей Цикл
		ЗначениеРеквизита = ДокументОбъект[КлючЗначение.Ключ];
		ЗначениеНовое = КлючЗначение.Значение; 
		
		Если ЗначениеЗаполнено(ЗначениеРеквизита) И (ЗначениеРеквизита<>ЗначениеНовое) Тогда
			ЗадаватьВопрос = Истина;
			ЗаполнятьСчета = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьНеобходимостьПерезаполненияСчетовУчета()



// Функция определяет принадлежность субсчета счету.
//
Функция ЭтоСубсчет( Субсчет, Счет) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Субсчет) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ( Субсчет.ПринадлежитЭлементу(Счет) ИЛИ Субсчет = Счет);
	
КонецФункции // ЭтоСубсчет()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ДЛЯ РАСЧЕТА СУММ СПИСАНИЯ РБП

Функция РазностьДатВДнях(Дата1, Дата2)
	мДлинаСуток = 86400; // в секундах
	Возврат Окр((НачалоДня(Дата1) - НачалоДня(Дата2)) / мДлинаСуток);
КонецФункции

Функция СуммаСписанияЗаМесяц(СтатьяРасходовБудущихПериодов, Знач ДатаНачалаСписания, Знач ДатаОкончанияСписания, Остаток, ВспомогательныеДанные, мНачДата, мКонДата) Экспорт
	
	Если Остаток = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ДатаНачалаСписания    = НачалоДня(ДатаНачалаСписания);
	ДатаОкончанияСписания = КонецДня(ДатаОкончанияСписания);
	
	ПоправкаНаВисокосныйГодВНачалеПериода = 0;
	ПоправкаНаВисокосныйГодВКонцеПериода  = 0;
	Если Лев(Строка(КонецМесяца(ДатаНачалаСписания)), 5) = "29.02" И НЕ Лев(Строка(ДатаНачалаСписания), 5) = "01.02" Тогда
		ПоправкаНаВисокосныйГодВНачалеПериода = -1;
	КонецЕсли;
	Если Лев(Строка(КонецМесяца(ДатаОкончанияСписания)), 5) = "29.02" Тогда
		ПоправкаНаВисокосныйГодВКонцеПериода = -1;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаНачалаСписания > мКонДата Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияСписания) Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < мНачДата Тогда
		Возврат 0;
		
	ИначеЕсли ДатаОкончанияСписания < ДатаНачалаСписания Тогда
		Возврат 0;
		
	ИначеЕсли СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Если СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
		КоличествоДней = РазностьДатВДнях(ДатаОкончанияСписания, ДатаНачалаСписания) + 1;
		ЦенаДня = Остаток / КоличествоДней;
		Если КонецМесяца(ДатаОкончанияСписания) = КонецМесяца(ДатаНачалаСписания) Тогда 
			КоличествоДнейТекущегоМесяца = День(ДатаОкончанияСписания); 
			КоличествоДней = КоличествоДнейТекущегоМесяца;
			СуммаСписания  = Остаток;
		Иначе	
			КоличествоДнейТекущегоМесяца = РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1; 
			СуммаСписания = ЦенаДня * КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоДней;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = КоличествоДнейТекущегоМесяца;
		КонецЕсли;
		
	Иначе
		
		ДоляПоследнегоМесяца = День(ДатаОкончанияСписания) / (День(КонецМесяца(ДатаОкончанияСписания)) + ПоправкаНаВисокосныйГодВКонцеПериода);
		Если КонецМесяца(ДатаНачалаСписания) = КонецМесяца(ДатаОкончанияСписания) Тогда
			ДоляТекущегоМесяца = ДоляПоследнегоМесяца;
			КоличествоМесяцев  = ДоляПоследнегоМесяца;
		Иначе
			ДоляТекущегоМесяца   = (РазностьДатВДнях(КонецМесяца(ДатаНачалаСписания), ДатаНачалаСписания) + 1 + ПоправкаНаВисокосныйГодВНачалеПериода) / (День(КонецМесяца(ДатаНачалаСписания)) + ПоправкаНаВисокосныйГодВНачалеПериода);
			КоличествоМесяцевСередины = 0;
			ТекущаяДата = ДобавитьМесяц(КонецМесяца(ДатаНачалаСписания), 1);
			Пока КонецМесяца(ДатаОкончанияСписания) >= ТекущаяДата Цикл
				КоличествоМесяцевСередины = КоличествоМесяцевСередины + 1;
				ТекущаяДата               = ДобавитьМесяц(ТекущаяДата, 1);
			КонецЦикла;
			КоличествоМесяцев = КоличествоМесяцевСередины - 1 + ДоляПоследнегоМесяца + ДоляТекущегоМесяца;
		КонецЕсли;
		
		СуммаСписания = ?(КоличествоМесяцев = 0, 0, Остаток * ДоляТекущегоМесяца / КоличествоМесяцев);
		
		Если Не ВспомогательныеДанные = Неопределено Тогда
			ВспомогательныеДанные.КоличествоМесяцевДней = КоличествоМесяцев;
			ВспомогательныеДанные.КоличествоМесяцевДнейТекущегоПериода = ДоляТекущегоМесяца;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Остаток > 0 Тогда
		Возврат Мин(СуммаСписания, Остаток);
	Иначе
		Возврат Макс(СуммаСписания, Остаток);
	КонецЕсли;
	
КонецФункции // СуммаСписанияЗаМесяц()


#Если Клиент Тогда

// Проверяет, ведется или нет на счете партионный учет
//
Функция ПроверитьВедениеПартионногоУчета(Владелец, НовоеЗначение, ПланСчетов, ЗапрашиватьИзменения = Истина) Экспорт

	Если НовоеЗначение = Перечисления.СпособыОценки.ПоСредней Тогда
		Возврат Истина;
	КонецЕсли;

	НУ = ПланыСчетов[ПланСчетов].Товары.ПолучитьОбъект();

	// Бухгалтерский учет
	ПартионныйУчет = ?(НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);

	Если НЕ ПартионныйУчет И ЗапрашиватьИзменения Тогда
		Ответ = Вопрос("Данный способ оценки может быть установлен если по счетам учета МПЗ установлено ведение партионного учета. 
		               |Открыть обработку, устанавливающую ведение партионного учета?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "");

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;

		ФормаНастройки = ПолучитьОбщуюФорму("НастройкаПараметровУчета");
		ФормаНастройки.ЭлементыФормы.ПанельНастроек.ТекущаяСтраница     = ФормаНастройки.ЭлементыФормы.ПанельНастроек.Страницы.УчетМПЗ;
		Если ФормаНастройки.Открыта() Тогда
			ФормаНастройки.Активизировать();
		Иначе
			ФормаНастройки.ЭлементыФормы.ПанельНастроек.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
			ФормаНастройки.ОткрытьМодально();
		Конецесли;

		НУ = ПланыСчетов[ПланСчетов].Товары.ПолучитьОбъект();
		ПартионныйУчет = ?(НУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);

		Возврат ПартионныйУчет;

	КонецЕсли;

	Возврат ПартионныйУчет;

КонецФункции // ПроверитьВедениеПартионногоУчета()

// Функция проверяет возможность использования счета в проводках.
//
// Параметры:
//  Счет     - Проверяемый счет.
//  Сообщать - признак вывода сообщений.
//
// Возвращаемое значение:
//  Булево - возможность использования счета в проводках
//  
//
Функция СчетМожноИспользоватьВПроводках(Счет, Сообщать = Истина) Экспорт

	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
		Возврат Ложь; // Неправильный тип
	КонецЕсли;

	Если Счет = ПланыСчетов.Хозрасчетный.ПустаяСсылка() Тогда
		Возврат Истина; // Пустая ссылка может использоваться
	КонецЕсли;

	Если Счет.ЗапретитьИспользоватьВПроводках Тогда

		Если Сообщать Тогда
			Предупреждение("Счет " + СокрЛП(Счет)+" """ + Счет.Наименование + """ нельзя использовать в проводках.");
		КонецЕсли;

		Возврат Ложь; // Счет использовать в проводках нельзя

	КонецЕсли;

	Возврат Истина; // Счет можно использовать в проводках 

КонецФункции // СчетМожноИспользоватьВПроводках()

#КонецЕсли


Процедура ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Субконто, ЗначениеСубконто1, ЗначениеСубконто2, ЗначениеСубконто3)

	Если ЗначениеЗаполнено(ЗначениеСубконто1) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто1)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто1);

	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто2) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто2)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто2);

	ИначеЕсли ЗначениеЗаполнено(ЗначениеСубконто3) И ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто3)) Тогда
		Субконто.Вставить(ВидСубконто.ВидСубконто, ЗначениеСубконто3);

	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает субконто на счете. Если такое субконто не счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - вид субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура ЗаполнитьСубконто(Проводка, СтрокаДокумента, СубконтоДт1 = Неопределено, СубконтоДт2 = Неопределено, СубконтоДт3 = Неопределено, СубконтоКт1 = Неопределено, СубконтоКт2 = Неопределено, СубконтоКт3 = Неопределено) Экспорт

	// Заполняем дебет:
	Если ЗначениеЗаполнено(Проводка.СчетДт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетДт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				Если ЗначениеЗаполнено(СтрокаДокумента.Склад) Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);

				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			ИначеЕсли (ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) И
				ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаДокумента.Регистратор.Ссылка)) И 
				(НЕ СтрокаДокумента.Тара) Тогда
				Проводка.СубконтоДт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Регистратор.Ссылка);
				
			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоДт, СубконтоДт1, СубконтоДт2, СубконтоДт3);

		КонецЦикла;

	КонецЕсли;

	// Заполняем кредит
	Если ЗначениеЗаполнено(Проводка.СчетКт) Тогда

		Для каждого ВидСубконто Из Проводка.СчетКт.ВидыСубконто Цикл

			Если ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Номенклатура")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Номенклатура);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Организация);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Склады")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Склад);

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
				Если ТипЗнч(СтрокаДокумента.ДоговорКонтрагента) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента.Владелец);
				ИначеЕсли ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт1) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт1);
				ИначеЕсли ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт2) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт2);
				ИначеЕсли ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.Контрагенты") И ЗначениеЗаполнено(СубконтоДт3) Тогда
					Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СубконтоДт3);
				КонецЕсли;

			ИначеЕсли ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ДоговорыКонтрагентов")) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.ДоговорКонтрагента);

			ИначеЕсли (ВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами) И
				ВидСубконто.ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(СтрокаДокумента.Регистратор.Ссылка)) Тогда
				Проводка.СубконтоКт.Вставить(ВидСубконто.ВидСубконто, СтрокаДокумента.Регистратор.Ссылка);
				
			КонецЕсли;

			ЗаполнитьСубконтоПоРеквизитам(ВидСубконто, Проводка.СубконтоКт, СубконтоКт1, СубконтоКт2, СубконтоКт3);

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ЗаполнитьСубконто()


