////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНЕШНИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура предназначена для определения вида отправки выгружаемого элемента данных
// Вызывается из обработчиков планов обмена: ПриОтправкеДанныхГлавному(), ПриОтправкеДанныхПодчиненному()
//
// Параметры:
//  ЭлементДанных, ОтправкаЭлемента - см. описание параметров в синтаксис помощнике
//                                    для методов ПриОтправкеДанныхГлавному() и ПриОтправкеДанныхПодчиненному()
//  УзелИнформационнойБазы - ПланОбменаСсылка - текущий узел плана обмена для которого выполняется выгрузка данных
//  ИмяПланаОбмена         - Строка - имя плана обмена как оно задано в конфигураторе
// 
Процедура ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, УзелИнформационнойБазы, ИмяПланаОбмена) Экспорт
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат; // удаление объекта отсылаем "как есть"
	КонецЕсли;
	
	ОбъектМетаданных = ЭлементДанных.Метаданные();
	
	Если АвтоРегистрацияРазрешена(ОбъектМетаданных, ИмяПланаОбмена) Тогда
		Возврат; // если установлен признак авторегистрации, то отсылаем объект "как есть"
	КонецЕсли;
	
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
	
	Если    ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаДокументы()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаБизнесПроцессы()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаЗадачи() Тогда
		
		// определяем массив узлов для регистрации объекта
		МассивУзловДляРегистрацииОбъекта = Новый Массив;
		
		ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловДляРегистрацииОбъекта, ЭлементДанных, ИмяПланаОбмена, ОбъектМетаданных, Ложь);
		
		НомерВМассиве = МассивУзловДляРегистрацииОбъекта.Найти(УзелИнформационнойБазы);
		
		// если в массиве нет текущего узла, то посылаем удаление объекта
		Если НомерВМассиве = Неопределено Тогда
			
			// передаем информацию об удалении
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
			
		КонецЕсли;
		
	ИначеЕсли   ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений()
			ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления()
			ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыБухгалтерии()
			ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыРасчета() Тогда
		
			ЭлементДанных.ДополнительныеСвойства.Вставить("УзелИнформационнойБазы", УзелИнформационнойБазы);
			ЭлементДанных.ДополнительныеСвойства.Вставить("Выгрузка", Истина);
			
			ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(Новый Массив,
															ЭлементДанных,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															,
															Истина);
			//
			
	КонецЕсли;
	
КонецПроцедуры

//

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюДокумента(ИмяПланаОбмена, Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ, РежимЗаписи);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписью(ИмяПланаОбмена, Источник, Отказ) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюРегистра(ИмяПланаОбмена, Источник, Отказ, Замещение) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ,, Замещение, Истина);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - КонстантаМенеджерЗначения - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюКонстанты(ИмяПланаОбмена, Источник, Отказ) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ,,,,, Истина);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередУдалением(ИмяПланаОбмена, Источник, Отказ) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ,,,, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ВНУТРЕННИЕ ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ПОДПИСОК

// Процедура-обработчик события "ПередЗаписью" для узла любого плана обмена
//
// Параметры:
//  Источник - ПланОбменаОбъект - узел плана обмена, источник события
//  Отказ    - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПередЗаписьюУзлаПланаОбменаПередЗаписью(Источник, Отказ) Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоПредопределенныйУзелПланаОбмена(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПолучениеСообщенияОбмена") Тогда
		Возврат; // запись узла при получении сообщения обмена (универсальный обмен данными)
	КонецЕсли;
	
	ИсточникСсылка = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Источник.Ссылка, "НомерОтправленного, НомерПринятого");
	
	Если ИсточникСсылка.НомерОтправленного <> Источник.НомерОтправленного Тогда
		Возврат; // запись узла при отправке сообщения обмена
	ИначеЕсли ИсточникСсылка.НомерПринятого <> Источник.НомерПринятого Тогда
		Возврат; // запись узла при получении сообщения обмена
	КонецЕсли;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Источник.Ссылка);
	
	// Получает реквизиты ссылочного типа, которые предположительно используются как фильтры фильтров правил регистрации
	ТаблицаРеквизитовСсылочногоТипа = ПолучитьРеквизитыОбъектаСсылочногоТипа(Источник, ИмяПланаОбмена);
	
	// Определяем признак модифицированности узла относительно выбранных реквизитов
	ОбъектМодифицирован = ОбъектМодифицированПоРеквизитам(Источник, ТаблицаРеквизитовСсылочногоТипа);
	
	Если ОбъектМодифицирован Тогда
		
		// Выполняем регистрацию выбранных объектов ссылочного типа на текущем узле без использования ПРО
		ВыполнитьРегистрациюОбъектовСсылочногоТипаПоСвойствамУзла(Источник, ТаблицаРеквизитовСсылочногоТипа);
		
		// Обновляем повторноиспользуемые значения механизма
		ОбменДаннымиСервер.УстановитьДатуОбновленияПовторноИспользуемыхЗначенийМРО();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" для узла любого плана обмена
//
// Параметры:
//  Источник - ПланОбменаОбъект - узел плана обмена, источник события
//  Отказ    - Булево - флаг отказа от выполнения обработчика
// 
Процедура ОбменДаннымиПередУдалениемУзлаПланаОбменаПередУдалением(Источник, Отказ) Экспорт
	
	// если удалили узел, то необходимо обновить кешируемые ссылки всех узлов ПО
	// кеш открытых сеансов для МРО стал неактуальным
	ОбменДаннымиСервер.УстановитьДатуОбновленияПовторноИспользуемыхЗначенийМРО();
	
КонецПроцедуры

//

Процедура ПередПроверкойЗапретаИзменения(Объект, СтандартнаяОбработка, УзелПланаОбмена, СообщитьОЗапрете) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("НеПроверятьДатыЗапретаИзмененияДанных") Тогда
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли Объект.ОбменДанными.Загрузка Тогда
		
		Отправитель = Объект.ОбменДанными.Отправитель;
		
		Если Отправитель = Неопределено Тогда
			
			Объект.ДополнительныеСвойства.Свойство("ОбменДанными_Отправитель", Отправитель);
			
		КонецЕсли;
		
		Если Отправитель <> Неопределено Тогда
			
			Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Отправитель) Тогда
				
				// Проверку на даты запрета изменения при обмене в РИБ не выполняем
				СтандартнаяОбработка = Ложь;
				
			Иначе
				
				СтандартнаяОбработка = Ложь;
				
				УзелПланаОбмена = Отправитель;
				
				СообщитьОЗапрете = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ

// Процедура механизма регистрации объектов. Предназначена для определения списка узлов получателей планов обмена
// на которых необходимо выполнить регистрацию объекта для последующей его выгрузки
// Включает в себя два последовательно работающие механизма - ВРО и ПРО.
// ВРО - механизм выборочной регистрации объектов;
// ПРО - механизм регистрации объектов по правилам регистрации;
// Вначале отрабатывает механизм ВРО, далее включается механизм ПРО.
// ВРО определяет на каких планах обмена должен быть зарегистрирован объект к выгрузке;
// ПРО определяет на каких узлах каждого плана обмена должен быть зарегистрирован объект.
//
// Параметры:
//  Объект - СправочникОбъект или ДокументОбъект - Объект для получения значений реквизитов и др. свойств
//  Отказ - Булево - флаг отказа. Если флаг отказа взведен, то процедура не выполняется
// 
Процедура МеханизмРегистрацииОбъектов(ИмяПланаОбмена,
										Объект,
										Отказ,
										РежимЗаписи = Неопределено,
										Замещение = Ложь,
										ЭтоРегистр = Ложь,
										ЭтоУдалениеОбъекта = Ложь,
										ЭтоКонстанта = Ложь)
	//
	
	ОтключитьМеханизмРегистрацииОбъектов = Ложь;
	Если  Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов", ОтключитьМеханизмРегистрацииОбъектов)
		И ОтключитьМеханизмРегистрацииОбъектов = Истина Тогда
		
		Возврат; // отказались от выполнения МРО; выходим
	КонецЕсли;
	
	// проверяем актуальность кеша сеанса для МРО
	ОбменДаннымиСервер.ОбновитьПовторноИспользуемыеЗначенияМРОПриНеобходимости();
	
	Если НЕ ОбменДаннымиСервер.ОбменДаннымиВключен() Тогда
		Возврат;
	КонецЕсли;
	
	// определяем необходимость регистрации объекта на узле отправителе
	РегистрироватьОбъектНаУзлеОтправителе = Ложь;
	Если  Объект.ДополнительныеСвойства.Свойство("РегистрироватьОбъектНаУзлеОтправителе", РегистрироватьОбъектНаУзлеОтправителе)
		И РегистрироватьОбъектНаУзлеОтправителе Тогда
		
		// обнуляем ссылку на узел отправитель
		Объект.ОбменДанными.Отправитель = Неопределено;
		
	КонецЕсли;
	
	ОбъектМетаданных = Объект.Метаданные();
	
	// при физическом удалении объекта ВРО не выполняем
	ЗарегистрироватьОбъектКВыгрузке = ЭтоРегистр ИЛИ ЭтоУдалениеОбъекта ИЛИ ЭтоКонстанта;
	
	ОбъектМодифицирован = ОбъектМодифицированДляПланаОбмена(Объект, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке);
	
	Если Не ОбъектМодифицирован Тогда
		
		Если АвтоРегистрацияРазрешена(ОбъектМетаданных, ИмяПланаОбмена) Тогда
			
			// если объект не модифицирован и он регистрируется автоматически,
			// то удаляем все узлы по авторегистрации для текущего плана обмена
			СократитьПолучателей(Объект, ВсеУзлыПланаОбмена(ИмяПланаОбмена));
			
		КонецЕсли;
		
		// объект не модифицирован относительно текущего плана обмена
		// регистрацию на узлах этого плана обмена не выполняем
		Возврат;
		
	КонецЕсли;
	
	ПроверятьСсылку = ?(ЭтоРегистр ИЛИ ЭтоКонстанта, Ложь, Не Объект.ЭтоНовый() И Не ЭтоУдалениеОбъекта);
	
	МассивУзловРезультат = Новый Массив;
	
	ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат, Объект, ИмяПланаОбмена, ОбъектМетаданных, ПроверятьСсылку, ЭтоРегистр, ЭтоУдалениеОбъекта, Замещение, РежимЗаписи);
	
	ДополнитьПолучателей(Объект, МассивУзловРезультат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВЫБОРОЧНОЙ РЕГИСТРАЦИИ ОБЪЕКТОВ (ВРО)

Функция ОбъектМодифицированДляПланаОбмена(Источник, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке)
	
	Попытка
		ОбъектМодифицирован = ОбъектМодифицированДляПланаОбменаПопыткаИсключение(Источник, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке);
	Исключение
		ОбъектМодифицирован = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Ошибка определения модифицированности объекта: %1'");
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрацииПРО(СообщениеОбОшибке, ОбъектМетаданных);
	КонецПопытки;
	
	Возврат ОбъектМодифицирован;
КонецФункции

Функция ОбъектМодифицированДляПланаОбменаПопыткаИсключение(Источник, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке)
	
	Если    ЗарегистрироватьОбъектКВыгрузке
		ИЛИ Источник.ЭтоНовый()
		ИЛИ Источник.ОбменДанными.Загрузка Тогда
		
		// для наборов записей регистров,
		// при физическом удалении объектов,
		// для новых объектов,
		// для объектов записанных по обмену данными
		// регистрируем изменения всегда
		Возврат Истина;
		
	ИначеЕсли  РежимЗаписи <> Неопределено
		И ИзмененоПроведениеДокумента(Источник, РежимЗаписи) Тогда
		
		// если изменен признак документа "Проведен", то считаем документ измененным
		Возврат Истина;
	КонецЕсли;
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	
	ТаблицаРеквизитовРегистрации = ОбменДаннымиПовтИсп.ПолучитьТаблицуРеквизитовРегистрации(ИмяОбъекта, ИмяПланаОбмена);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// если правила ВРО не заданы, то считаем, что фильтра ВРО нет.
		// объект модифицирован всегда
		Возврат Истина;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// если дошли до конца, то объект не изменился по реквизитам регистрации;
	// регистрация на узлах не нужна
	Возврат Ложь;
	
КонецФункции

Функция ОбъектМодифицированПоРеквизитам(Источник, ТаблицаРеквизитовСсылочногоТипа)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРеквизитовСсылочногоТипа Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицы);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда // реквизиты Шапки объекта
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
	Иначе // реквизиты ТЧ объекта
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
	КонецЕсли;
	
	Возврат Не ТаблицыРеквизитовРегистрацииОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения, ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения, СтрокаТаблицыРеквизитовРегистрации);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации 
	  + " ИЗ " + СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|   ТекущийОбъект.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации
	+ " ИЗ " + СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта 
	+ "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти + " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|   ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовРегистрации;
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
		
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
		
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(, СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации);
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ТаблицыРеквизитовРегистрацииОдинаковые(Таблица1, Таблица2, СтрокаТаблицыРеквизитовРегистрации)
	
	ДобавитьИтераторТаблице(Таблица1, +1);
	ДобавитьИтераторТаблице(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации, "ИтераторТаблицыРеквизитовРегистрации");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура ("ИтераторТаблицыРеквизитовРегистрации", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	
	Возврат КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
КонецФункции

Функция ИзмененоПроведениеДокумента(Источник, РежимЗаписи)
	
	Возврат (Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
	 ИЛИ (НЕ Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовРегистрации");
	
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовРегистрации");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ (ПРО)

Процедура ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат,
															Объект,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															ПроверятьСсылку = Ложь,
															ЭтоРегистр = Ложь,
															ЭтоУдалениеОбъекта = Ложь,
															Замещение = Ложь,
															РежимЗаписи = Неопределено)
	//
	Попытка
		ВыполнитьПравилаРегистрацииОбъектовДляПланаОбменаПопыткаИсключение(МассивУзловРезультат,
															Объект,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															ПроверятьСсылку,
															ЭтоРегистр,
															ЭтоУдалениеОбъекта,
															Замещение,
															РежимЗаписи);
		//
	Исключение
		
		СообщениеОбОшибке = НСтр("ru = 'Ошибка выполнения правил регистрации объектов для плана обмена %1.
								|Описание ошибки: %2'");
		//
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке, ИмяПланаОбмена, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СообщениеОбОшибке;
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьПравилаРегистрацииОбъектовДляПланаОбменаПопыткаИсключение(МассивУзловРезультат,
															Объект,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															ПроверятьСсылку = Ложь,
															ЭтоРегистр = Ложь,
															ЭтоУдалениеОбъекта = Ложь,
															Замещение = Ложь,
															РежимЗаписи = Неопределено)
	//
	
	// получаем правила регистрации объектов
	ПравилаРегистрацииОбъектов = ОбменДаннымиСервер.ПараметрыСеансаПравилаРегистрацииОбъектов().Получить();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ОбъектМетаданныхИмя", ОбъектМетаданных.ПолноеИмя());
	Отбор.Вставить("ИмяПланаОбмена",      ИмяПланаОбмена);
	
	МассивПравилРегистрацииОбъекта = ПравилаРегистрацииОбъектов.НайтиСтроки(Отбор);
	
	Если МассивПравилРегистрацииОбъекта.Количество() = 0 Тогда // правила регистрации не заданы
		
		Если Не АвтоРегистрацияРазрешена(ОбъектМетаданных, ИмяПланаОбмена) Тогда
			
			// если для объекта не созданы ПРО и отключена авторегистрация,
			// то регистрируем объект на всех узлах плана обмена кроме предопределенного
			
			Получатели = ВсеУзлыПланаОбмена(ИмяПланаОбмена);
			
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
			
		КонецЕсли;
		
	Иначе // последовательно выполняем правила регистрации
		
		Если ЭтоРегистр Тогда // для регистра
			
			Для Каждого ПРО Из МассивПравилРегистрацииОбъекта Цикл
				
				// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПО УСЛОВИЮ"
				
				ОпределитьПолучателейПоУсловиюДляНабораЗаписей(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, Замещение);
				
				Если ЗначениеЗаполнено(ПРО.ИмяРеквизитаФлага) Тогда
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ВСЕГДА"
					
					Получатели = ОбменДаннымиСервер.ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
					
					ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПРИ НЕОБХОДИМОСТИ"
					// для наборов записей выполнение регистрации "при необходимости" не имеет физического смысла
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе // для ссылочного типа
			
			Для Каждого ПРО Из МассивПравилРегистрацииОбъекта Цикл
				
				// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПО УСЛОВИЮ"
				
				ОпределитьПолучателейПоУсловию(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, ПроверятьСсылку, ЭтоУдалениеОбъекта, РежимЗаписи);
				
				Если ЗначениеЗаполнено(ПРО.ИмяРеквизитаФлага) Тогда
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ВСЕГДА"
					
					Получатели = ОбменДаннымиСервер.ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
					
					ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПРИ НЕОБХОДИМОСТИ"
					
					Если Не Объект.ЭтоНовый() Тогда
						
						Получатели = ОбменДаннымиСервер.ПолучитьМассивУзловДляРегистрацииВыгружатьПриНеобходимости(Объект.Ссылка, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
						
						ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПравилоРегистрацииОбъектаДляНабораЗаписей(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, Замещение)
	
	// определяем массив узлов-получателей по текущему набору записей
	ОпределитьМассивПолучателейПоНаборуЗаписей(МассивУзловРезультат, Объект, ПРО, ОбъектМетаданных, ИмяПланаОбмена, Ложь);
	
	Если Замещение Тогда
		
		// определяем старый набор записей из глобального контекста
		ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
		
		Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
			
			СтарыйНаборЗаписей = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			
		ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
			
			СтарыйНаборЗаписей = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			
		ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыБухгалтерии() Тогда
			
			СтарыйНаборЗаписей = РегистрыБухгалтерии[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			
		ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыРасчета() Тогда
			
			СтарыйНаборЗаписей = РегистрыРасчета[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
			
		Иначе
			
			Возврат; // внутренняя ошибка (ошибка встраивания библиотеки)
			
		КонецЕсли;
		
		Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		// определяем массив узлов-получателей по старому набору записей
		ОпределитьМассивПолучателейПоНаборуЗаписей(МассивУзловРезультат, СтарыйНаборЗаписей, ПРО, ОбъектМетаданных, ИмяПланаОбмена, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПравилоРегистрацииОбъектаДляСсылочногоТипа(МассивУзловРезультат, ПРО, Объект, ИмяПланаОбмена, ПроверятьСсылку, ЭтоУдалениеОбъекта, РежимЗаписи)
	
	// ПРОБ - Правила регистрации по свойствам Объекта
	// ПРОП - Правила регистрации по свойствам Плана обмена
	// ПРО = ПРОБ <И> ПРОП
	
	// ПРОБ
	Если  Не ПРО.ПравилоПоСвойствамОбъектаПустое
		И Не ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО, Объект, ПроверятьСсылку, РежимЗаписи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПРОП
	// определяем узлы для регистрации объекта
	ОпределитьМассивУзловДляОбъекта(МассивУзловРезультат, Объект, ИмяПланаОбмена, ПРО, ЭтоУдалениеОбъекта, ПроверятьСсылку);
	
КонецПроцедуры

Процедура ОпределитьПолучателейПоУсловию(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, ПроверятьСсылку, ЭтоУдалениеОбъекта, РежимЗаписи)
	
	// {Обработчик: Перед обработкой} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПередОбработкой(ПРО, Отказ, Объект, ОбъектМетаданных);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: Перед обработкой} Окончание
	
	Получатели = Новый Массив;
	
	ВыполнитьПравилоРегистрацииОбъектаДляСсылочногоТипа(Получатели, ПРО, Объект, ИмяПланаОбмена, ПроверятьСсылку, ЭтоУдалениеОбъекта, РежимЗаписи);
	
	// {Обработчик: После обработки} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПослеОбработки(ПРО, Отказ, Объект, ОбъектМетаданных, Получатели);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: После обработки} Окончание
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
	
КонецПроцедуры

Процедура ОпределитьПолучателейПоУсловиюДляНабораЗаписей(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, Замещение)
	
	// {Обработчик: Перед обработкой} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПередОбработкой(ПРО, Отказ, Объект, ОбъектМетаданных);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: Перед обработкой} Окончание
	
	Получатели = Новый Массив;
	
	ВыполнитьПравилоРегистрацииОбъектаДляНабораЗаписей(Получатели, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, Замещение);
	
	// {Обработчик: После обработки} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПослеОбработки(ПРО, Отказ, Объект, ОбъектМетаданных, Получатели);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: После обработки} Окончание
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
	
КонецПроцедуры

Процедура ОпределитьМассивУзловДляОбъекта(МассивУзловРезультат, Источник, ИмяПланаОбмена, ПРО, ЭтоУдалениеОбъекта, ПроверятьСсылку)
	
	// получаем структуру значений свойств для объекта
	ЗначенияСвойствОбъекта = ПолучитьЗначенияСвойствДляОбъекта(Источник, ПРО);
	
	// определяем массив узлов для регистрации объекта
	МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойствОбъекта, ПРО, ИмяПланаОбмена, Источник);
	
	// добавляем узлы для регистрации
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, МассивУзлов);
	
	Если ПроверятьСсылку Тогда
		
		// получаем структуру значений свойств для ссылки
		ЗначенияСвойствСсылки = ОбменДаннымиСервер.ПолучитьЗначенияСвойствДляСсылки(Источник.Ссылка, ПРО.СвойстваОбъекта, ПРО.СвойстваОбъектаСтрокой, ПРО.ОбъектМетаданныхИмя);
		
		// определяем массив узлов для регистрации ссылки
		МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойствДополнительный(ЗначенияСвойствСсылки, ПРО, ИмяПланаОбмена, Источник);
		
		// добавляем узлы для регистрации
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, МассивУзлов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьМассивПолучателейПоНаборуЗаписей(МассивУзловРезультат, НаборЗаписей, ПРО, ОбъектМетаданных, ИмяПланаОбмена, ЭтоВерсияОбъектаДоИзменения)
	
	// получаем значение регистратора из отбора для набора записей
	Регистратор = Неопределено;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Регистратор");
	
	ЕстьРегистратор = ЭлементОтбора <> Неопределено;
	
	Если ЕстьРегистратор Тогда
		
		Регистратор = ЭлементОтбора.Значение;
		
	КонецЕсли;
	
	Выгрузка = Неопределено;
	НаборЗаписей.ДополнительныеСвойства.Свойство("Выгрузка", Выгрузка);
	
	Если Выгрузка = Истина Тогда
		
		УзелИнформационнойБазы = НаборЗаписей.ДополнительныеСвойства.УзелИнформационнойБазы;
		
		ОбратныйИндекс = НаборЗаписей.Количество() - 1;
		
		Пока ОбратныйИндекс >= 0 Цикл
			
			СтрокаНабора = НаборЗаписей[ОбратныйИндекс];
			
			Если ЕстьРегистратор И СтрокаНабора["Регистратор"] = Неопределено Тогда
				
				Если Регистратор <> Неопределено Тогда
					
					СтрокаНабора["Регистратор"] = Регистратор;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// ПРОБ
			Если Не ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО, СтрокаНабора, Ложь) Тогда
				
				НаборЗаписей.Удалить(ОбратныйИндекс);
				
			Иначе // ПРОП
				
				ЗначенияСвойствОбъекта = ПолучитьЗначенияСвойствДляОбъекта(СтрокаНабора, ПРО);
				
				// определяем массив узлов для регистрации объекта
				МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойствОбъекта, ПРО, ИмяПланаОбмена, СтрокаНабора);
				
				НомерВМассиве = МассивУзлов.Найти(УзелИнформационнойБазы);
				
				// если в массиве нет текущего узла, то удаляем строку из набора
				Если НомерВМассиве = Неопределено Тогда
					
					НаборЗаписей.Удалить(ОбратныйИндекс);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаНабора ИЗ НаборЗаписей Цикл
			
			Если ЕстьРегистратор И СтрокаНабора["Регистратор"] = Неопределено Тогда
				
				Если Регистратор <> Неопределено Тогда
					
					СтрокаНабора["Регистратор"] = Регистратор;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// ПРОБ
			Если Не ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО, СтрокаНабора, Ложь) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// ПРОП
			
			// получаем структуру значений свойств для объекта
			ЗначенияСвойствОбъекта = ПолучитьЗначенияСвойствДляОбъекта(СтрокаНабора, ПРО);
			
			Если ЭтоВерсияОбъектаДоИзменения Тогда
				
				// определяем массив узлов для регистрации объекта
				МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойствДополнительный(ЗначенияСвойствОбъекта, ПРО, ИмяПланаОбмена, СтрокаНабора);
				
			Иначе
				
				// определяем массив узлов для регистрации объекта
				МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойствОбъекта, ПРО, ИмяПланаОбмена, СтрокаНабора);
				
			КонецЕсли;
			
			// добавляем узлы для регистрации
			ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, МассивУзлов);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойств, ПРО, Знач ИмяПланаОбмена, Объект)
	
	ИспользоватьКэш = Истина;
	ТекстЗапроса = ПРО.ТекстЗапроса;
	
	// {Обработчик: При обработке} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПриОбработке(Отказ, ПРО, Объект, ТекстЗапроса, ЗначенияСвойств, ИспользоватьКэш);
	
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	// {Обработчик: При обработке} Окончание
	
	Если ИспользоватьКэш Тогда
		
		Возврат ОбменДаннымиПовтИсп.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
		
	Иначе
		
		Возврат ОбменДаннымиСервер.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМассивУзловПоЗначениямСвойствДополнительный(ЗначенияСвойств, ПРО, Знач ИмяПланаОбмена, Объект)
	
	ИспользоватьКэш = Истина;
	ТекстЗапроса = ПРО.ТекстЗапроса;
	
	// {Обработчик: При обработке (дополнительный)} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПриОбработкеДополнительный(Отказ, ПРО, Объект, ТекстЗапроса, ЗначенияСвойств, ИспользоватьКэш);
	
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	// {Обработчик: При обработке (дополнительный)} Окончание
	
	Если ИспользоватьКэш Тогда
		
		Возврат ОбменДаннымиПовтИсп.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
		
	Иначе
		
		Возврат ОбменДаннымиСервер.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначенияСвойствДляОбъекта(Объект, ПРО)
	
	ЗначенияСвойств = Новый Структура;
	
	Для Каждого Элемент ИЗ ПРО.СвойстваОбъекта Цикл
		
		ЗначенияСвойств.Вставить(Элемент.Ключ, ПолучитьЗначениеСвойстваОбъекта(Объект, Элемент.Значение));
		
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъекта(Объект, СтрокаСвойствОбъекта)
	
	Значение = Объект;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвойствОбъекта, ".");
	
	// значение получаем с учетом возможного разыменования свойства
	Для Каждого ИмяСвойства ИЗ МассивПодстрок Цикл
		
		Значение = Значение[ИмяСвойства];
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

// Предназначения для получения значений констант, которые вычисляются по произвольным выражениям.
// Значения вычисляются в привилегированном режиме.
//
Процедура ПолучитьЗначенияАлгоритмовКонстант(ПРО, ДеревоЗначений)
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПолучитьЗначенияАлгоритмовКонстант(ПРО, СтрокаДерева);
			
		Иначе
			
			Если СтрокаДерева.ВидЭлементаОтбора = ОбменДаннымиСервер.ЭлементОтбораСвойствоАлгоритмЗначения() Тогда
				
				Значение = Неопределено;
				
				Попытка
					
					ОбменДаннымиСервер.ВыполнитьОбработчикВПривилегированномРежиме(Значение, СтрокаДерева.ЗначениеКонстанты);
					
				Исключение
					
					// фиксируем ошибку в журнале регистрации
					СтрокаСообщения = НСтр("ru = 'Ошибка алгоритма вычисления значения константы:
												|План обмена: [ИмяПланаОбмена]
												|Объект метаданных: [ОбъектМетаданныхИмя]
												|Описание ошибки: [Описание]
												|Алгоритм:
												|// {Начало алгоритма}
												|[ЗначениеКонстанты]
												|// {Окончание алгоритма}
												|'");
					//
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ИнформацияОбОшибке().Описание);
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ЗначениеКонстанты]",   Строка(СтрокаДерева.ЗначениеКонстанты));
					
					ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения);
					
				КонецПопытки;
				
				СтрокаДерева.ЗначениеКонстанты = Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры


// ПРОГРАММНЫЙ ИНТЕРФЕЙС ДЛЯ РАБОТЫ С РЕГИСТРАЦИЕЙ ОБЪЕКТОВ

// Процедура дополняет список узлов-получателей объекта переданными значениями
//
// Параметры:
//  Объект – объект, для которого выполняется правило регистрации
//  Узлы   – Массив – узлы плана обмена, которые необходимо добавить в список узлов-получателей объекта
//
Процедура ДополнитьПолучателей(Объект, Узлы) Экспорт
	
	Для Каждого Элемент Из Узлы Цикл
		
		Попытка
			
			Объект.ОбменДанными.Получатели.Добавить(Элемент);
			
		Исключение
			
			// фиксируем ошибку в ЖР
			ИмяПланаОбмена = Элемент.Метаданные().Имя;
			
			ОбъектМетаданных = Объект.Метаданные();
			
			СтрокаСообщения = НСтр("ru = 'Для состава плана обмена [ИмяПланаОбмена] не указана регистрация объекта [ПолноеИмя]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ПолноеИмя]",      ОбъектМетаданных.ПолноеИмя());
			
			ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения, ОбъектМетаданных);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вычитает из списка узлов-получателей объекта переданные значения
//
// Параметры:
//  Объект – объект, для которого выполняется правило регистрации
//  Узлы – Массив – узлы плана обмена, которые необходимо вычесть из списка узлов-получателей объекта
// 
Процедура СократитьПолучателей(Объект, Узлы) Экспорт
	
	Получатели = СократитьМассив(Объект.ОбменДанными.Получатели, Узлы);
	
	// очищаем список получателей и заполняем его заново
	Объект.ОбменДанными.Получатели.Очистить();
	
	// добавляем узлы для регистрации объекта
	ДополнитьПолучателей(Объект, Получатели);
	
КонецПроцедуры

// Вычитает один массив элементов из другого массива. Возвращает результат вычитания.
//
Функция СократитьМассив(Массив, МассивВычитания) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СократитьМассив(Массив, МассивВычитания);
	
КонецФункции

// Функция определяет признак авторегистрации объекта метаданных в составе плана обмена
//
// Параметры:
//  ОбъектМетаданных – объект метаданных, для которого требуется получить признак авторегистрации
//  ИмяПланаОбмена   – Строка – имя плана обмена, как оно задано в конфигураторе, в состав которого входит объект метаданных
//
//  Возвращаемое значение:
//  Тип: Булево.
//   Истина – объект метаданных имеет признак авторегистрации Разрешена в составе плана обмена;
//   Ложь – объект метаданных имеет признак авторегистрации Запрещена в составе плана обмена
//          или объект метаданных не входит в состав плана обмена.
//
Функция АвтоРегистрацияРазрешена(ОбъектМетаданных, ИмяПланаОбмена) Экспорт
	
	// получаем коллекцию объектов метаданных, входящих в состав плана обмена
	СоставПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав;
	
	ЭлементСоставаПланаОбмена = СоставПланаОбмена.Найти(ОбъектМетаданных);
	
	Если ЭлементСоставаПланаОбмена = Неопределено Тогда
		Возврат Ложь; // объект метаданных не входит в состав плана обмена
	КонецЕсли;
	
	Возврат ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить;
	
КонецФункции

// Функция возвращает список всех узлов заданного плана обмена кроме предопределенного узла
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, как оно задано в конфигураторе, список узлов для которого необходимо получить
//
//  Возвращаемое значение:
//   Массив – список всех узлов заданного плана обмена.
//
Функция ВсеУзлыПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ОбменДаннымиСервер.ВсеУзлыПланаОбмена(ИмяПланаОбмена);
	
КонецФункции

// Функция определяет массив узлов-получателей для объекта при заданном плане обмена
//
// Параметры:
//  Объект         - объект, для которого необходимо выполнить правила регистрации и определить список узлов-получателей.
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  МассивУзловРезультат - Массив - массив узлов-получателей для объекта
//
Функция ОпределитьПолучателей(Объект, ИмяПланаОбмена) Экспорт
	
	МассивУзловРезультат = Новый Массив;
	
	ОбъектМетаданных = Объект.Метаданные();
	
	ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных);
	
	ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат, Объект, ИмяПланаОбмена, ОбъектМетаданных, Ложь, ЭтоРегистр);
	
	Возврат МассивУзловРезультат;
	
КонецФункции

// Определяет массив узлов-получателей для объекта при заданном плане обмена и выполняет регистрацию объекта на полученных узлах.
//
// Параметры:
//  Объект         - объект, для которого необходимо выполнить правила регистрации и выполнить регистрацию на узлах
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//  Отправитель (необязательный) – ПланОбменаСсылка – узел плана обмена от которого принимается сообщение обмена
//                    при загрузке данных: если задан, то регистрация объекта не этом узле выполнятся не будет.
// 
Процедура ВыполнитьПравилаРегистрацииДляОбъекта(Объект, ИмяПланаОбмена, Отправитель = Неопределено) Экспорт
	
	Получатели = ОпределитьПолучателей(Объект, ИмяПланаОбмена);
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Получатели, Отправитель);
	
	Если Получатели.Количество() > 0 Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// ФУНКЦИИ ДИНАМИЧЕСКОГО СОЗДАНИЯ ОБЩЕГО ПРАВИЛА РЕГИСТАЦИИ ОБЪЕКТА

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА РЕГИСТРАЦИИ ОБЪЕКТОВ ПРИ ВЫГРУЗКЕ ДАННЫХ (ПРО)

// Получает массив узлов-получателей для объекта при заданном плане обмена
//
// Параметры:
//  Источник       - СправочникОбъект или ДокументОбъект - источник для получения значений реквизитов и др. свойств
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  МассивУзловРезультат - Массив - массив узлов-получателей для объекта
//
Функция ОпределитьПолучателейПриРегистрацииДанных(Источник, ОбъектМетаданных, Знач ИмяПланаОбмена) Экспорт
	
	МассивУзловРезультат = Новый Массив;
	
	ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат, Источник, ИмяПланаОбмена, ОбъектМетаданных);
	
	Возврат МассивУзловРезультат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРАВИЛ РЕГИСТРАЦИИ ПО СВОЙСТВАМ ОБЪЕКТА

Процедура ЗаполнитьЗначенияСвойствИзОбъекта(ДеревоЗначений, Объект)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЗаполнитьЗначенияСвойствИзОбъекта(СтрокаДерева, Объект);
			
		Иначе
			
			СтрокаДерева.ЗначениеСвойства = ПолучитьЗначениеСвойстваОбъекта(Объект, СтрокаДерева.СвойствоОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДопустимыйОтборПоСвойствам(Объект, ДеревоЗначенийПриемник, ДеревоЗначенийИсточник)
	
	Для Каждого СтрокаДереваИсточника Из ДеревоЗначенийИсточник.Строки Цикл
		
		Если СтрокаДереваИсточника.ЭтоГруппа Тогда
			
			СтрокаДереваПриемника = ДеревоЗначенийПриемник.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, СтрокаДереваИсточника);
			
			СоздатьДопустимыйОтборПоСвойствам(Объект, СтрокаДереваПриемника, СтрокаДереваИсточника);
			
		Иначе
			
			Если ЦепочкаСвойствДействительна(Объект, СтрокаДереваИсточника.СвойствоОбъекта) Тогда
				
				СтрокаДереваПриемника = ДеревоЗначенийПриемник.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, СтрокаДереваИсточника);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЦепочкаСвойствДействительна(Объект, Знач СтрокаСвойствОбъекта)
	
	Значение = Объект;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвойствОбъекта, ".");
	
	// значение получаем с учетом возможного разыменования свойства
	Для Каждого ИмяСвойства ИЗ МассивПодстрок Цикл
		
		Попытка
			Значение = Значение[ИмяСвойства];
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Выполняем ПРОБ для ссылки и для объекта
// Результат учитываем по условию "ИЛИ"
// Если объект прошел фильтр ПРОБ по значения из ссылки,
// то ПРОБ для значений объекта уже не выполняем
//
Функция ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО, Объект, ПроверятьСсылку, РежимЗаписи = Неопределено)
	
	НачальноеЗначениеСвойстваПроведен = Неопределено;
	
	ПолучитьЗначенияАлгоритмовКонстант(ПРО, ПРО.ОтборПоСвойствамОбъекта);
	
	Если РежимЗаписи <> Неопределено Тогда
		
		НачальноеЗначениеСвойстваПроведен = Объект.Проведен;
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			Объект.Проведен = Ложь;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Объект.Проведен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ПРОБ по значению свойств Объекта
	Если ОбъектПроходитФильтрПРОБ(ПРО, Объект) Тогда
		
		Если НачальноеЗначениеСвойстваПроведен <> Неопределено Тогда
			
			Объект.Проведен = НачальноеЗначениеСвойстваПроведен;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НачальноеЗначениеСвойстваПроведен <> Неопределено Тогда
		
		Объект.Проведен = НачальноеЗначениеСвойстваПроведен;
		
	КонецЕсли;
	
	Если ПроверятьСсылку Тогда
		
		// ПРОБ по значению свойств Ссылки
		Если ОбъектПроходитФильтрПРОБ(ПРО, Объект.Ссылка) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбъектПроходитФильтрПРОБ(ПРО, Объект)
	
	ПРО.ОтборПоСвойствам = Обработки.ЗагрузкаПравилРегистрацииОбъектов.ИнициализацияТаблицыОтборПоСвойствамОбъекта();
	
	СоздатьДопустимыйОтборПоСвойствам(Объект, ПРО.ОтборПоСвойствам, ПРО.ОтборПоСвойствамОбъекта);
	
	ЗаполнитьЗначенияСвойствИзОбъекта(ПРО.ОтборПоСвойствам, Объект);
	
	Возврат УсловиеИстинноДляВеткиДереваЗначений(ПРО.ОтборПоСвойствам);
	
КонецФункции

// По умолчанию считаем, что элементы отбора корневой группы сравниваются по условию "И".
// Поэтому параметр ЭтоОператорИ по умолчанию принимает значение Истина
//
Функция УсловиеИстинноДляВеткиДереваЗначений(ДеревоЗначений, Знач ЭтоОператорИ = Истина)
	
	// инициализиция
	Если ЭтоОператорИ Тогда // И
		Результат = Истина;
	Иначе // ИЛИ
		Результат = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РезультатЭлемента = УсловиеИстинноДляВеткиДереваЗначений(СтрокаДерева, СтрокаДерева.ЭтоОператорИ);
		Иначе
			
			РезультатЭлемента = УсловиеИстинноДляЭлемента(СтрокаДерева, ЭтоОператорИ);
		КонецЕсли;
		
		Если ЭтоОператорИ Тогда // И
			
			Результат = Результат И РезультатЭлемента;
			
			Если Не Результат Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе // ИЛИ
			
			Результат = Результат ИЛИ РезультатЭлемента;
			
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УсловиеИстинноДляЭлемента(СтрокаДерева, ЭтоОператорИ)
	
	Перем ВидСравнения;
	
	ВидСравнения = СтрокаДерева.ВидСравнения;
	
	Попытка
		
		Если      ВидСравнения = "Равно"          Тогда Возврат СтрокаДерева.ЗначениеСвойства =  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "НеРавно"        Тогда Возврат СтрокаДерева.ЗначениеСвойства <> СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "Больше"         Тогда Возврат СтрокаДерева.ЗначениеСвойства >  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "БольшеИлиРавно" Тогда Возврат СтрокаДерева.ЗначениеСвойства >= СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "Меньше"         Тогда Возврат СтрокаДерева.ЗначениеСвойства <  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "МеньшеИлиРавно" Тогда Возврат СтрокаДерева.ЗначениеСвойства <= СтрокаДерева.ЗначениеКонстанты;
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ЖУРНАЛОМ РЕГИСТРАЦИИ

// Добавляет одну запись в журнал регистрации для подсистемы правил регистрации объектов.
//
Процедура ЗаписьЖурналаРегистрацииПРО(Комментарий, ОбъектМетаданных = Неопределено) Экспорт
	
	ЗаписьЖурналаРегистрации("Обмен данными.Правила регистрации объектов", УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, , Комментарий);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ-ОБРАБОТЧИКИ СОБЫТИЙ ПРО

Процедура ВыполнитьОбработчикПРОПередОбработкой(ПРО, Отказ, Объект, ОбъектМетаданных)
	
	Если ПРО.ЕстьОбработчикПередОбработкой Тогда
		
		Попытка
			
			Выполнить(ПРО.ПередОбработкой);
			
		Исключение
			
			// фиксируем ошибку в журнале регистрации
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			//
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",     "Перед обработкой");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения, ОбъектМетаданных);
			
			// флаг ошибки
			Отказ = Истина;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПРОПриОбработке(Отказ, ПРО, Объект, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш)
	
	Если ПРО.ЕстьОбработчикПриОбработке Тогда
		
		Попытка
			
			Выполнить(ПРО.ПриОбработке);
			
		Исключение
			
			// фиксируем ошибку в журнале регистрации
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			//
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",     "При обработке");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения);
			
			// флаг ошибки
			Отказ = Истина;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПРОПриОбработкеДополнительный(Отказ, ПРО, Объект, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш)
	
	Если ПРО.ЕстьОбработчикПриОбработкеДополнительный Тогда
		
		Попытка
			
			Выполнить(ПРО.ПриОбработкеДополнительный);
			
		Исключение
			
			// фиксируем ошибку в журнале регистрации
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			//
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",     "При обработке (дополнительный)");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения);
			
			// флаг ошибки
			Отказ = Истина;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПРОПослеОбработки(ПРО, Отказ, Объект, ОбъектМетаданных, Получатели)
	
	Если ПРО.ЕстьОбработчикПослеОбработки Тогда
		
		Попытка
			
			Выполнить(ПРО.ПослеОбработки);
			
		Исключение
			
			// фиксируем ошибку в журнале регистрации
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			//
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",     "После обработки");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрацииПРО(СтрокаСообщения, ОбъектМетаданных);
			
			// флаг ошибки
			Отказ = Истина;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ВыполнитьРегистрациюОбъектовСсылочногоТипаПоСвойствамУзла(Объект, ТаблицаРеквизитовСсылочногоТипа)
	
	УзелИнформационнойБазы = Объект.Ссылка;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитовСсылочногоТипа Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.ИмяТабличнойЧасти) Тогда // реквизиты шапки
			
			Для Каждого Элемент Из СтрокаТаблицы.СтруктураРеквизитовРегистрации Цикл
				
				Ссылка = Объект[Элемент.Ключ];
				
				Если Не Ссылка.Пустая()
					И СоставПланаОбменаСодержитТип(ИмяПланаОбмена, ТипЗнч(Ссылка)) Тогда
					
					ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе // реквизиты табличной части
			
			ТабличнаяЧасть = Объект[СтрокаТаблицы.ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				Для Каждого Элемент Из СтрокаТаблицы.СтруктураРеквизитовРегистрации Цикл
					
					Ссылка = СтрокаТабличнойЧасти[Элемент.Ключ];
					
					Если Не Ссылка.Пустая()
						И СоставПланаОбменаСодержитТип(ИмяПланаОбмена, ТипЗнч(Ссылка)) Тогда
						
						ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРеквизитыОбъектаСсылочногоТипа(Объект, ИмяПланаОбмена)
	
	// Выполняем инициализацию таблицы
	Результат = ОбменДаннымиСервер.ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов();
	
	ОбъектМетаданных = Объект.Метаданные();
	ОбъектМетаданныхПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	// Получаем реквизиты шапки
	Реквизиты = ПолучитьРеквизитыСсылочногоТипа(ОбъектМетаданных.Реквизиты, ИмяПланаОбмена);
	
	Если Реквизиты.Количество() > 0 Тогда
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.ИмяОбъекта                     = ОбъектМетаданныхПолноеИмя;
		СтрокаТаблицы.ИмяТабличнойЧасти              = "";
		СтрокаТаблицы.РеквизитыРегистрации           = ОбщегоНазначения.ПолучитьКлючиСтруктурыСтрокой(Реквизиты);
		СтрокаТаблицы.СтруктураРеквизитовРегистрации = ОбщегоНазначения.СкопироватьСтруктуру(Реквизиты);
		
	КонецЕсли;
	
	// Получаем реквизиты табличных частей
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Реквизиты = ПолучитьРеквизитыСсылочногоТипа(ТабличнаяЧасть.Реквизиты, ИмяПланаОбмена);
		
		Если Реквизиты.Количество() > 0 Тогда
			
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.ИмяОбъекта                     = ОбъектМетаданныхПолноеИмя;
			СтрокаТаблицы.ИмяТабличнойЧасти              = ТабличнаяЧасть.Имя;
			СтрокаТаблицы.РеквизитыРегистрации           = ОбщегоНазначения.ПолучитьКлючиСтруктурыСтрокой(Реквизиты);
			СтрокаТаблицы.СтруктураРеквизитовРегистрации = ОбщегоНазначения.СкопироватьСтруктуру(Реквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьРеквизитыСсылочногоТипа(Реквизиты, ИмяПланаОбмена)
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		МассивТипов = Реквизит.Тип.Типы();
		
		ЭтоСсылка = Ложь;
		
		Для Каждого Тип Из МассивТипов Цикл
			
			Если  ОбщегоНазначения.ЭтоСсылка(Тип)
				И СоставПланаОбменаСодержитТип(ИмяПланаОбмена, Тип) Тогда
				
				ЭтоСсылка = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоСсылка Тогда
			
			Результат.Вставить(Реквизит.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СоставПланаОбменаСодержитТип(ИмяПланаОбмена, Тип)
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Содержит(Метаданные.НайтиПоТипу(Тип));
	
КонецФункции
