//  ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБМЕНА С ИНФОРМАЦИОННЫМИ БАЗАМИ 

//  КОМАНДЫ ГЛАВНОГО КОМАНДНОГО МЕНЮ

// УНИВЕРСАЛЬНЫЕ ФУНКЦИИ ЧТЕНИЯ ИЗМЕНЕНИЙ И ЗАГРУЗКИ ИЗМЕНЕНИЙ ДЛЯ ОБМЕНА МЕЖДУ ИНФОРМАЦИОННЫМИ БАЗАМИ ОДИНАКОВОЙ СТРУКТУРЫ

// Универсальная Процедура чтения изменений из сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
// Обязательное условие: У плана обмена должна существовать функция:
//
//  Функция ПрименитьИзменениеКИнформационнойБазе(Отправитель, Данные) Экспорт
//
// 	Эта функция будет вызываться лишь в том случае, если произошла коллизия изменений. то есть один и тот же объект изменился 
//	в двух узлах информационной базы.
// 
//	Параметры вспомогательной функции:
//
//  	Отправитель - ссылка на план обмена от кого пришло изменение
//      Данные - непосредственно сами данные, которые пришли от узла отправителя
//
//	Возвращаемые параметры вспомогательной функции
//		Результат - булево. Если истина, то изменения будут приняты от узла отправителя и вставлены в информационную базу. В
// 		в противном случае изменения будут отклонены
//
//
//	ПАРАМЕТРЫ ФУНКЦИИ
//		УзелОбмена - узел отправитель, от которого пришли изменения
//		ЧтениеXML - данные изменений
//
//	ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ
//
//		РЕЗУЛЬТАТ - булево. признак того, что чтение изменений прошло успешно
//
Функция ЗагрузитьИзмененияДляУзлаИзФайлаОбмена(УзелОбмена, КоличествоЭлементовВТранзакцииНаЗагрузкуДанных = 0, ЧтениеXML) Экспорт
	
	ЭтотУзелОбмена = ПланыОбмена[ПолучитьИмяПланаОбмена(УзелОбмена)].ЭтотУзел();
	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
	
	Если ЧтениеСообщения.Отправитель <> УзелОбмена Тогда
		// Сообщение предназначено не для этого узла
		ВызватьИсключение "Неверный узел в файле обмена данными";			
	КонецЕсли;
    
	// Удаляем регистрацию изменений для узла отправителя сообщения
	ПланыОбмена.УдалитьРегистрациюИзменений(ЧтениеСообщения.Отправитель, ЧтениеСообщения.НомерПринятого);
	
	// считаем сколько объектов прочитали
	КоличествоПрочитанныхОбъектов = 0;
	КоличествоЗаписанныхОбъектов = 0;
	
	// начинаем транзакцию
	НачатьТранзакцию(); 
	
	ЭтотУзелОбменаОбъект = Неопределено;
	
	Попытка
		
		// Читаем данные из сообщения
		Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
					
			// Читаем очередное значение
			Данные = ПрочитатьXML(ЧтениеXML);
			
			КоличествоПрочитанныхОбъектов = КоличествоПрочитанныхОбъектов + 1;
			
			Если КоличествоПрочитанныхОбъектов % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние("Чтение изменений от узла """ + УзелОбмена.Наименование + """. Считано объектов: " + Строка(КоличествоПрочитанныхОбъектов));
				#КонецЕсли
			КонецЕсли;
					
			// по идее какие изменения принимать а какие откатывать должен определять сам план обмена
			Если ПланыОбмена.ИзменениеЗарегистрировано(ЧтениеСообщения.Отправитель, Данные) Тогда
						
				//Возник конфликт
				//И сами данные были изменены и в присланном файле содержится изменение этих данных
				Если ЭтотУзелОбменаОбъект = Неопределено Тогда
					
					ЭтотУзелОбменаОбъект = ЭтотУзелОбмена.ПолучитьОбъект();
					
				КонецЕсли;
				
				ПрименятьИзменения = ЭтотУзелОбменаОбъект.ПрименитьИзменениеКИнформационнойБазе(ЧтениеСообщения.Отправитель, Данные); 
				Если Не ПрименятьИзменения Тогда
					Продолжить;
				КонецЕсли;
						
			КонецЕсли;
					
			// Записываем перенесенные данные
			Данные.ОбменДанными.Отправитель = ЧтениеСообщения.Отправитель;
			Данные.ОбменДанными.Загрузка = Истина;
			Данные.Записать();
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если (КоличествоЭлементовВТранзакцииНаЗагрузкуДанных > 0)
				И (КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакцииНаЗагрузкуДанных) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;
									
		КонецЦикла;
		
		// фиксируем все изменения которые были записаны
		ЗафиксироватьТранзакцию();	
					
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
		#КонецЕсли
		
		ЧтениеXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
		
КонецФункции // ПрочитатьИзмененияДляУзла


// Универсальная Процедура записи изменений для сообщения обмена
// Применима для случаев когда структура метаданных обменивающихся баз одинакова для всех объектов участвующих в обмене
//
//	ПАРАМЕТРЫ ФУНКЦИИ
//		УзелОбмена - узел получатель, для которого формируется пакет изменений
//		ЗаписьXML - объект для записи изменений
//
//	ВОЗВРАЩАЕМЫЕ ПАРАМЕТРЫ
//
//		РЕЗУЛЬТАТ - булево. признак того, что запись изменений прошла успешно
//
Функция ВыгрузитьИзмененияДляУзлаВФайлОбмена(УзелОбмена, КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, ЗаписьXML) Экспорт

	ЗаписьXML.ЗаписатьОбъявлениеXML();
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	// считаем количество записанных объектов
	КоличествоЗаписанныхОбъектов = 0;
	КоличествоНайденныхДляЗаписиОбъектов = 0;
	
	// начинаем транзакцию
	НачатьТранзакцию();
	
	Попытка
	
		// Получаем выборку изменённых данных
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения);
		Пока ВыборкаИзменений.Следующий() Цикл
					
			Данные = ВыборкаИзменений.Получить();
			// Записываем данные в сообщение
			ЗаписатьXML(ЗаписьXML, Данные);
			
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			
			Если КоличествоНайденныхДляЗаписиОбъектов % 100 = 0 Тогда
				#Если Клиент Тогда
					Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + """. Записано объектов: " + Строка(КоличествоНайденныхДляЗаписиОбъектов));
				#КонецЕсли
			КонецЕсли;
			
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если (КоличествоЭлементовВТранзакцииНаВыгрузкуДанных > 0)
				И (КоличествоЗаписанныхОбъектов = КоличествоЭлементовВТранзакцииНаВыгрузкуДанных) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоЗаписанныхОбъектов = 0;
			КонецЕсли;

		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
				
		ЗаписьXML.Закрыть();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		#Если Клиент Тогда
			ОбщегоНазначения.СообщитьОбОшибке("" + ОписаниеОшибки());
		#КонецЕсли
		
		ЗаписьXML.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
		
	Возврат Истина;
	
КонецФункции // ЗаписатьИзмененияДляУзла

// СОБЫТИЯ ДЛЯ РЕГИСТРАЦИИ МЕСТА СОЗДАНИЯ ОБЪЕКТА
///////////////////////////////////////////////////////////////////////////////

// процедура регистрируем место создания нового объекта информационной базы
Процедура ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(СсылкаНаОбъект, УзелОбмена = Неопределено)
	
	НаборЗаписейРегистра = РегистрыСведений.ОбъектыИнформационныхБаз.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.Объект.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.Объект = СсылкаНаОбъект;
	СтрокаНабора.УзелОбмена = УзелОбмена;
	
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

// обработчик события перед записью документа для регистрации места создания
Процедура ПередЗаписьюДокументаРегистрацияОбъектаИнформационнойБазыПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	НужноРегистрироватьМестоСоздания = Источник.ЭтоНовый() 
		И ПараметрыСеанса.СохранятьИнформациюОМестеСозданияОбъектов;
	
	Источник.ДополнительныеСвойства.Вставить("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
КонецПроцедуры

// обработчик события при записи документа для регистрации места создания
Процедура ПриЗаписиДокументаРегистрацияОбъектаИнформационнойБазыПриЗаписи(Источник, Отказ) Экспорт
	
	НужноРегистрироватьМестоСоздания = Ложь;
	Источник.ДополнительныеСвойства.Свойство("НужноРегистрироватьМестоСоздания", НужноРегистрироватьМестоСоздания);
	
	Если НужноРегистрироватьМестосоздания <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка = Истина
		И ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
		
		// обмен с определенным узлом
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Источник.ОбменДанными.Отправитель);
		
	Иначе
		
		// объект создан в этой информационной базе
		ЗарегистрироватьМестоСозданияОбъектаИнформационнойБазы(Источник.Ссылка, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

Процедура ДополнитьМассивПолучателейУзламиАвторегистрации(Объект) Экспорт
	
	Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	
	НачальныйМассивУзлов = Новый Массив();
	
	Для Каждого Узел Из Объект.ОбменДанными.Получатели Цикл
		НачальныйМассивУзлов.Добавить(Узел);
	КонецЦикла;
	
	Объект.ОбменДанными.Получатели.Заполнить();
	
	Для Каждого Элемент Из НачальныйМассивУзлов Цикл
		
		Объект.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьНовоеИмяКаталогаДляОбменаДанными() Экспорт
	
	ВременныйКаталог = КаталогВременныхФайлов();
	
	НомерКаталога = 1;
	Пока НомерКаталога <= 1000 Цикл
		
		ОчередноеИмяКаталога = ВременныйКаталог + "Каталог обмена " + СтрЗаменить(Строка(НомерКаталога), Символы.НПП, "");
		
		ВыбФайл = Новый Файл(ОчередноеИмяКаталога);
		Если НЕ ВыбФайл.Существует() Тогда
			Возврат ОчередноеИмяКаталога;
		КонецЕсли;
				
		НомерКаталога = НомерКаталога + 1;	
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

Процедура ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(НастройкаОбмена) Экспорт
	
	НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
	НастройкаОбмена.КаталогОбменаИнформацией = ОпределитьНовоеИмяКаталогаДляОбменаДанными();
			
	НастройкаОбмена.ПроизводитьПриемСообщений = Истина;
	НастройкаОбмена.ПроизводитьОтправкуСообщений = Истина;
	
	НастройкаОбмена.ВыполнятьАрхивациюФайловОбмена = Истина;
	
	НастройкаОбмена.ПортFTPСоединения = 21;
		
	НастройкаОбмена.ТипИнформационнойБазыДляПодключения = Истина;
	НастройкаОбмена.АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	НастройкаОбмена.ВерсияПлатформыИнформационнойБазыДляПодключения = "V81";
	
	НастройкаОбмена.КоличествоОбъектовДляФоновогоОбмена = 500;
	
	НастройкаОбмена.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Истина;
	НастройкаОбмена.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 5;
	
	НастройкаОбмена.ВыполнитьОтложенноеПроведениеДокументовПоРасписанию = Ложь;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуОбменаWEBЗначениямиПоУмолчанию(НастройкаОбмена) Экспорт
	
	НастройкаОбмена.ОбменТоварами = Истина;
	НастройкаОбмена.ОбменЗаказами = Истина;
	
	НастройкаОбмена.ВыгружатьТолькоИзменения = Истина;
	НастройкаОбмена.ВыгружатьНаСайт		 		= Истина;
	
	НастройкаОбмена.HTTPОбменИмяПользователя = "User";
	НастройкаОбмена.HTTPОбменПароль			= "";
	
	НастройкаОбмена.ВыгружатьКартинки = Истина;
	
	НастройкаОбмена.СпособИдентификацииКонтрагентов	= "Наименование";
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	ОсновнойКаталогФайлов 		= УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойКаталогФайлов");
	Если НЕ ЗначениеЗаполнено(ОсновнойКаталогФайлов) Тогда
		ОсновнойКаталогФайлов = "C:";	
	КонецЕсли;
	НастройкаОбмена.КаталогВыгрузки	= ОсновнойКаталогФайлов + "/1cbitrix";
	
	НастройкаОбмена.Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяОрганизация");
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена.Организация) Тогда 
		Выборка = Справочники.Организации.Выбрать();
		Если Выборка.Следующий() Тогда
			НастройкаОбмена.Организация = Выборка.Ссылка;
		КонецЕсли;	
	КонецЕсли;	
	НастройкаОбмена.Подразделение 					  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновноеПодразделение");
	НастройкаОбмена.Ответственный 					  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнойОтветственный");
	НастройкаОбмена.ЕдиницаИзмеренияНовойНоменклатуры = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяЕдиницаПоКлассификатору");
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена.ЕдиницаИзмеренияНовойНоменклатуры) Тогда 
		ЕдиницаИзмеренияНовойНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт", Истина);
		Если НЕ ЗначениеЗаполнено(НастройкаОбмена.ЕдиницаИзмеренияНовойНоменклатуры) Тогда 
			НастройкаОбмена.ЕдиницаИзмеренияНовойНоменклатуры = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
		КонецЕсли;	
	КонецЕсли;	
	
	НастройкаОбмена.HTTPОбменАдресСайта	= "http://localhost:6448/bitrix/admin/1c_exchange.php";
	
КонецПроцедуры

// функция возвращает часть строки после последнего встреченного символа в строке
Функция ПолучитьСтрокуОтделеннойСимволом(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
						
			Возврат Сред(ИсходнаяСтрока, ПозицияСимвола + 1); 
			
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат "";
  	
КонецФункции

// Выделяет из имени файла его расширение (набор символов после последней точки).
//
// Параметры
//  ИмяФайла     – Строка, содержащая имя файла, неважно с именем каталога или без.
//
// Возвращаемое значение:
//   Строка – расширение файла.
//
Функция ПолучитьРасширениеИмениФайла(Знач ИмяФайла) Экспорт
	
	Расширение = ПолучитьСтрокуОтделеннойСимволом(ИмяФайла, ".");
	Возврат Расширение;
	
КонецФункции

Функция ПолучитьИмяПротоколаЗагрузки(ИмяФайлаПротоколаОбмена) Экспорт
	
	РасширениеФайлаПротокола = ПроцедурыОбменаДанными.ПолучитьРасширениеИмениФайла(ИмяФайлаПротоколаОбмена);
		
	Если Не ПустаяСтрока(РасширениеФайлаПротокола) Тогда
						
		ИмяФайлаПротоколаЗагрузки = СтрЗаменить(ИмяФайлаПротоколаОбмена, "." + РасширениеФайлаПротокола, "");
		
	Иначе
		
		ИмяФайлаПротоколаЗагрузки = ИмяФайлаПротоколаОбмена;
		
	КонецЕсли;
	
	ИмяФайлаПротоколаЗагрузки = ИмяФайлаПротоколаЗагрузки + "_Загрузка";
	
	Если Не ПустаяСтрока(РасширениеФайлаПротокола) Тогда
		
		ИмяФайлаПротоколаЗагрузки = ИмяФайлаПротоколаЗагрузки + "." + РасширениеФайлаПротокола;	
		
	КонецЕсли;
	
	Возврат ИмяФайлаПротоколаЗагрузки;

КонецФункции

//ФОРМА ХОДА ОБРАБОТКИ

#Если Клиент Тогда

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураОбменаДанными, Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.Значение = СтруктураОбменаДанными.ФормаХодаВыполненияОбмена.Значение + ПроцентПрибавления;
			
КонецПроцедуры

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(СтруктураОбменаДанными, Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0)
	
	ФормаХодаВыполненияОбмена = Неопределено;
	СтруктураОбменаДанными.Свойство("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
	
	Если ФормаХодаВыполненияОбмена = Неопределено Тогда
		
		ФормаХодаВыполненияОбмена = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		СтруктураОбменаДанными.Вставить("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
		
	Иначе	
		ФормаХодаВыполненияОбмена = СтруктураОбменаДанными.ФормаХодаВыполненияОбмена; 	
	КонецЕсли;
	
	ФормаХодаВыполненияОбмена.НаименованиеОбработкиДанных = "Обмен данными по настройке: " + СтруктураОбменаДанными.ДанныеНастройки.Наименование;
	ФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	ФормаХодаВыполненияОбмена.Значение = ПроцентПрибавления;
	ФормаХодаВыполненияОбмена.МаксимальноеЗначение = 100;
	
	Если Не ФормаХодаВыполненияОбмена.Открыта() Тогда
		ФормаХодаВыполненияОбмена.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

//Процедура закрывает форму хода обработки данных
Процедура ЗакрытьФормуОбработкиДанных(СтруктураОбменаДанными)
	
	ФормаХодаВыполненияОбмена = Неопределено;
	СтруктураОбменаДанными.Свойство("ФормаХодаВыполненияОбмена", ФормаХодаВыполненияОбмена);
	Если ФормаХодаВыполненияОбмена <> Неопределено Тогда
		
		Если ФормаХодаВыполненияОбмена.Открыта() Тогда
			ФормаХодаВыполненияОбмена.Закрыть();
		КонецЕсли;
		
		СтруктураОбменаДанными.ФормаХодаВыполненияОбмена = Неопределено; 	
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецЕсли

// функция нормализует ftp адрес (отрезает не нужное)
Функция НормализоватьFTPАдрес(Знач FTPАдрес) Экспорт
	
	ИтоговыйАдрес = СокрЛП(FTPАдрес);
	ПозицияFTP = Найти(Врег(ИтоговыйАдрес), "FTP://");
	
	Если ПозицияFTP = 1 Тогда
		
		ИтоговыйАдрес = Сред(ИтоговыйАдрес, 7);	
		
	КонецЕсли;
	
	Возврат ИтоговыйАдрес;
	
КонецФункции

// Процедура выполняет удаление файла
Функция ВыполнитьУдалениеФайла(Знач ИмяФайлаУдаления, СтруктураНастроекОбменаДанными, 
	Знач ВыводитьИнформациюВПротокол = Ложь, ЭтоВыгрузка = Истина)
	
	Если ПустаяСтрока(ИмяФайлаУдаления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		
		Если ВыводитьИнформациюВПротокол Тогда
			ДобавитьИнформациюВПротокол("Удаление файла: " + ИмяФайлаУдаления, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		КонецЕсли;
	
		УдалитьФайлы(ИмяФайлаУдаления);
		
	Исключение
		
		Если ВыводитьИнформациюВПротокол Тогда
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при попытке удаления файла: " + ИмяФайлаУдаления + " " + ОписаниеОшибки(), 
				СтруктураНастроекОбменаДанными, Истина, ЭтоВыгрузка);
		КонецЕсли;
			
		Возврат Ложь;	
		 
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура выполняет копирование файла
Функция ВыполнитьКопированиеФайла(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника, 
	Знач ВыводитьИнформациюВПротокол = Ложь, СтруктураНастроекОбменаДанными, ЭтоВыгрузка = Истина)
	
	Попытка
		
		Если ВыводитьИнформациюВПротокол Тогда
			ДобавитьИнформациюВПротокол("Копирование файла из  " + ИмяФайлаИсточника + " в " + ИмяФайлаПриемника, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		КонецЕсли;
	
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		Если ВыводитьИнформациюВПротокол Тогда
			
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла из  " + ИмяФайлаИсточника + " в " + ИмяФайлаПриемника + 
				Символы.ПС + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, ЭтоВыгрузка);
				
		КонецЕсли;
			
		Возврат Ложь;	
		 
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Процедура меняет расширение имени файла обмена и выполняет проверку наличия каталога для работы
Процедура ПроверитьДоступностьРаботыСКаталогом(ИмяФайлаЧтенияИзменений, Знач НужноМенятьРасширениеНаZIP = Ложь)
	
	Если НужноМенятьРасширениеНаZIP Тогда
		РаботаСФайлами.УстановитьРасширениеФайла(ИмяФайлаЧтенияИзменений, ".zip");
	КонецЕсли;

	//надо убедиться в том что каталог куда все будем сохранять существует
	СоздатьКаталогПоПолномуПутиКФайлу(ИмяФайлаЧтенияИзменений);
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// АВТОМАТИЧЕСКОЕ ОБНОВЛЕНИЕ КОНФИГУРАЦИИ

// функция возвращает настройки для формирования файла обновления конфигурации
Функция ПолучитьНастройкиДляФайлаОбновленияКонфигурации() Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сами настройки
	НастройкиДляОбновленияКонфигурации = Константы.НастройкаФайлаОбновленияКонфигурации.Получить();
	
	Если НастройкиДляОбновленияКонфигурации <> Неопределено Тогда
		
		Возврат НастройкиДляОбновленияКонфигурации.Получить();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// Функция устанавливает настройки для файла обновления конфигурации
Функция УстановитьНастройкиДляФайлаОбновленияКонфигурации(СтруктураНастроек) Экспорт
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		
		СообщитьИнформациюОПростойОшибке("Нет прав на изменение константы ""Настройка файла обновления конфигурации""");
			
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		
		ЗначениеХранилища = Новый ХранилищеЗначения(СтруктураНастроек);
		Константы.НастройкаФайлаОбновленияКонфигурации.Установить(ЗначениеХранилища);
		
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при установке константы ""Настройка файла обновления конфигурации"": " + ОписаниеОшибки());
	    Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;

КонецФункции

// функция создает параметры настроек обновления конфигурации по умолчанию
Функция СоздатьПараметрыНастроекОбновленияКонфигурацииПоУмолчанию() Экспорт
	
	ПараметрыНастроек = Новый Структура();
	
	ПараметрыНастроек.Вставить("ФормироватьФайлОбновленияКонфигурацииАвтоматически", Истина);
	ПараметрыНастроек.Вставить("АвтоматическиОбновлятьКонфигурациюПриПриемеСообщенияОтГлавногоУзлаРИБ", Ложь);
	ПараметрыНастроек.Вставить("ИмяАдминистратораИнформационнойБазы", "");
	ПараметрыНастроек.Вставить("ИмяФайлаДляЗаписиОшибок", "");
	ПараметрыНастроек.Вставить("ИмяЗапускаПрограммы", "");
	
	Возврат ПараметрыНастроек;
	
КонецФункции

// Процедура определяет параметры БАТ файла для обновления конфигурации
Процедура СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапуска, ПутьКБД, ФайловаяБД)
	
	// создается BAT файл по установленному макету и запускается
	
	СтрокаСоединенияСБД = СтрокаСоединенияИнформационнойБазы();
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая(СтрокаСоединенияСБД);
			
	Если ЭтоФайловаяИБ Тогда
		ПутьКБД = Сред(СтрокаСоединенияСБД, 6, СтрДлина(СтрокаСоединенияСБД) - 6);
		ФайловаяБД = Истина;
	Иначе
	    // надо к имени сервера прибавить имя пути информационной базы
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "SRVR=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
		
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		НачальнаяПозицияКопирования = 6 + 1;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяСервера = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		СтрокаСоединенияСБД = Сред(СтрокаСоединенияСБД, ПозицияТочкиСЗапятой + 1);
		
		// позиция имени сервера
		ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "REF=");
		
		Если ПозицияПоиска <> 1 Тогда
			Возврат;
		КонецЕсли;
				
		НачальнаяПозицияКопирования = 6;
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединенияСБД, ";");
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		
		ИмяИБНаСервере = Сред(СтрокаСоединенияСБД, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
		
		ПутьКБД = """" + ИмяСервера + "/" + ИмяИБНаСервере + """";
		ФайловаяБД = Ложь;
		
	КонецЕсли;
	
	ИмяПрограммыЗапуска = РаботаСФайлами.ПолучитьИмяФайла(КаталогПрограммы(), "1cv8.exe");
    	
	ИмяПользователяБД = ИмяПользователя();
	
КонецПроцедуры

// Функция формирует логин пользователя для подключения к ИБ
Функция СформироватьЛогинПодключенияКИБ(Знач ИмяПользователяБД)
	
	Если Не ПустаяСтрока(ИмяПользователяБД) Тогда
		
		ТребуетсяАвторизацияОС = ПолныеПрава.НаличиеУПользователяWindowsАвторизации(ИмяПользователяБД);
		
		КлючАвторизации = ?(ТребуетсяАвторизацияОС, "/WA+", "/WA-"); 
		
		ПользовательБД = "/N""" + ИмяПользователяБД + """ " + КлючАвторизации;
	Иначе
		ПользовательБД = "";
	КонецЕсли;
	
	Возврат ПользовательБД;
	
КонецФункции

// Функция формирует часть бат файла (объявления) для обновления конфигурации
Функция СформироватьЧастьОбъявленийПодключенияТекущегоПользователя(ИмяПрограммыЗапуска = "")
	
	Перем ИмяПользователяБД, ИмяПрограммыЗапускаПоУмолчанию, ПутьКБД, ФайловаяБД;
	
	СформироватьПараметрыДляОбновленияКонфигурации(ИмяПользователяБД, ИмяПрограммыЗапускаПоУмолчанию, ПутьКБД, ФайловаяБД);
	Если ПустаяСтрока(ИмяПрограммыЗапуска) Тогда
		ИмяПрограммыЗапуска = ИмяПрограммыЗапускаПоУмолчанию;
	КонецЕсли;
	
	ТекстФайлаПоУмолчанию = Символы.ПС;
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set v8exe=""" + ИмяПрограммыЗапуска + """" + Символы.ПС;
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBaseName=" + ПутьКБД + Символы.ПС;
	
	Если ФайловаяБД Тогда	
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/F%DataBaseName%" + Символы.ПС;
	Иначе
		ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set DataBase=/S%DataBaseName%" + Символы.ПС;
	КонецЕсли;
	
	ПользовательБД = СформироватьЛогинПодключенияКИБ(ИмяПользователяБД);
	
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + "set User=" + ПользовательБД + Символы.ПС;

	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// функция формирует часть бат файла (вызов обновления конфигурации)
Функция СформироватьЧастьВызоваОбновленияКонфигурации(Знач ИмяАдминистратораИБ = "", Знач ИмяФайлаИнформацииОбОшибках = "", 
	Знач ИспользоватьФайлОбОшибкахСПустымИменем = Ложь)
	
	ИмяЛогинаАдминистратора = ?(ПустаяСтрока(ИмяАдминистратораИБ), "", СформироватьЛогинПодключенияКИБ(ИмяАдминистратораИБ));
	
	СтрокаОбъявленияФайлаСообщенийОбОшибках = "";
	СтрокаДляВыводаДанныхВФайл = "";
		
	Если НЕ ПустаяСтрока(ИмяФайлаИнформацииОбОшибках) ИЛИ ИспользоватьФайлОбОшибкахСПустымИменем Тогда
		
		// надо проверить наличие файла для обмена, есл его нет то создать его
		СтрокаИмениФайлаИнформацииОбОшибках = СокрЛП(ИмяФайлаИнформацииОбОшибках);
							
		СтрокаОбъявленияФайлаСообщенийОбОшибках = "
			|REM Путь к файлу для ошибок и сообщений
			|set FileInformation=""" + СтрокаИмениФайлаИнформацииОбОшибках + """
			|
			|date /t >> %FileInformation%
			|time /t >> %FileInformation%
			|set DataBaseName>>%FileInformation%";
				
		СтрокаДляВыводаДанныхВФайл = "/Out%FileInformation% -NoTruncate";
					
	КонецЕсли;	
	
	 // основной текст
	ТекстФайлаПоУмолчанию = "
		|REM Логин администратора системы
		|set AdminUser=" + ИмяЛогинаАдминистратора + "
        |
		|" + СтрокаОбъявленияФайлаСообщенийОбОшибках + " 
		|
		|rem Завершение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CЗавершитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|start """" /wait %v8exe% CONFIG     %DataBase% %AdminUser% /UpdateDBCfg /UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + "
        |
		|rem Разрешение работы пользователей
		|start """" /wait %v8exe% ENTERPRISE %DataBase% %AdminUser% /CРазрешитьРаботуПользователей	/UCПакетноеОбновлениеКонфигурацииИБ	" + СтрокаДляВыводаДанныхВФайл + " /DisableStartupMessages
        |
		|rem Запуск самой программы
		|start """" %v8exe% ENTERPRISE %DataBase% %User%  /DisableStartupMessages";
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// Функция формирует текст файла обновления конфигурации по умолчанию
Функция ПолучитьТекстНастроекФайлаОбновленияКонфигурацииПоУмолчанию() Экспорт
	
	ТекстФайлаПоУмолчанию = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя();
		                       
    // основной текст
	ТекстФайлаПоУмолчанию = ТекстФайлаПоУмолчанию + СформироватьЧастьВызоваОбновленияКонфигурации(,,Истина);
		
	Возврат ТекстФайлаПоУмолчанию;
	
КонецФункции

// функция формирует текст бат файла обновления конфигурации по структуре данных
Функция СформироватьТекстБатФайлаПоСтруктуре(СтруктураПараметров) Экспорт
	
	ТекстФайла = "";
	
	// автоматически или нет формируется файл с настройками
	ФормироватьФайлОбновленияКонфигурацииАвтоматически = Истина;
	СтруктураПараметров.Свойство("ФормироватьФайлОбновленияКонфигурацииАвтоматически", ФормироватьФайлОбновленияКонфигурацииАвтоматически);
	
	Если ФормироватьФайлОбновленияКонфигурацииАвтоматически = Истина Тогда
		
		// имя администратора информационной базы
		ИмяАдминистратораИнформационнойБазы = "";
		Если Не СтруктураПараметров.Свойство("ИмяАдминистратораИнформационнойБазы", ИмяАдминистратораИнформационнойБазы) Тогда
			
			ИмяАдминистратораИнформационнойБазы = "";
			
		КонецЕсли;
		
		// файл для фиксирования ошибок
		ИмяФайлаДляЗаписиОшибок = "";
		Если Не СтруктураПараметров.Свойство("ИмяФайлаДляЗаписиОшибок", ИмяФайлаДляЗаписиОшибок) Тогда
			
			ИмяФайлаДляЗаписиОшибок = "";
			
		КонецЕсли;
		
		ИмяЗапускаПрограммы = "";
		Если Не СтруктураПараметров.Свойство("ИмяЗапускаПрограммы", ИмяЗапускаПрограммы) Тогда
			
			ИмяЗапускаПрограммы = "";
			
		КонецЕсли;		

		ТекстФайла = СформироватьЧастьОбъявленийПодключенияТекущегоПользователя(ИмяЗапускаПрограммы);
		
		ТекстФайла = ТекстФайла + СформироватьЧастьВызоваОбновленияКонфигурации(ИмяАдминистратораИнформационнойБазы, ИмяФайлаДляЗаписиОшибок);
		
	Иначе
		// ручное редактирование
		НаличиеСвойства = СтруктураПараметров.Свойство("ТекстФайлаОбновленияКонфигурации", ТекстФайла);
		
		Если Не НаличиеСвойства Тогда
			ТекстФайла = "";
		КонецЕсли;
								
	КонецЕсли;
	
	Возврат ТекстФайла;
	
КонецФункции

// формирование текста бат файла обновления конфигурации по настройкам
Функция ПолучитьСтруктуруНастроекФайлаОбновленияКонфигурации()
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.НастройкаФайлаОбновленияКонфигурации) Тогда
		СообщитьИнформациюОПростойОшибке("Нет прав доступа к константе ""Настройка файла обновления конфигурации""");
		Возврат "";
	КонецЕсли;

	СтруктураНастроек = ПолучитьНастройкиДляФайлаОбновленияКонфигурации();
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = СоздатьПараметрыНастроекОбновленияКонфигурацииПоУмолчанию();
	КонецЕсли;
	
	Возврат СтруктураНастроек;
	
КонецФункции

Функция СформироватьТекстБатФайлаПоНастройкам()
	
	СтруктураНастроек = ПолучитьСтруктуруНастроекФайлаОбновленияКонфигурации();
	ТекстФайла = СформироватьТекстБатФайлаПоСтруктуре(СтруктураНастроек);
	
	Возврат ТекстФайла;
	
КонецФункции

Процедура ВыполнитьОбновлениеКонфигурацииДляИнформационнойБазы(НастройкаОбменаДанными, СтруктураПараметров = Неопределено)
	
	// надо для выбранной настройки поставить признак запуска обмена при загрузке данных
	УстановитьНеобходимостьВыполненияОбменаПриПервомЗапускеПрограммы(НастройкаОбменаДанными, Истина);
	
	ПредложитьПерезагрузкуПрограммы(СтруктураПараметров, Истина);
		
КонецПроцедуры

// Процедура формирование BAT-Файла для автоматической перезагрузки программы
//
Процедура ПредложитьПерезагрузкуПрограммы(СтруктураПараметров = Неопределено, 
	Знач ЗапускатьФайлОбновленияКонфигурации = Ложь) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		// создается BAT файл по установленному макету и запускается
		ТекстБатФайла = СформироватьТекстБатФайлаПоНастройкам();
	Иначе
		ТекстБатФайла = СформироватьТекстБатФайлаПоСтруктуре(СтруктураПараметров);				
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстБатФайла) Тогда
		
		СообщитьИнформациюОПростойОшибке("Нельзя создать пустой файл автоматического обновления конфигурации");
		Возврат;
	КонецЕсли;
	
	ТекстовайДокумент = Новый ТекстовыйДокумент();
	ТекстовайДокумент.УстановитьТекст(ТекстБатФайла);
	
	ИмяБАТФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогВременныхФайлов(), "Upd1C.bat");

	ТекстовайДокумент.Записать(ИмяБАТФайла, КодировкаТекста.OEM);
			
	Если ЗапускатьФайлОбновленияКонфигурации Тогда
		
		Сообщить("Файл для автоматического изменения конфигурации запущен на исполнение: " + ИмяБАТФайла);
		// запускаем БАТ файл перезагрузки
		#Если Клиент Тогда
		ЗапуститьПриложение(ИмяБАТФайла);
		#Иначе
		КомОбъект = Новый COMObject("wScript.Shell");
		КомОбъект.Run("""" + ИмяБАТФайла + """");
		#КонецЕсли
		
	Иначе
		
		Сообщить("Файл для автоматического изменения конфигурации: " + ИмяБАТФайла);
		// открываем каталог с файлом перезагрузки
		#Если Клиент Тогда
		ЗапуститьПриложение("explorer " + КаталогВременныхФайлов());
		#КонецЕсли
		
	КонецЕсли;
	  
КонецПроцедуры // ПредложитьПерезагрузкуПрограммы

///////////////////////////////////////////////////////////////////////////////
//	ПРОТОКОЛ

// Процедура дописывает информацию в файл лога
Процедура ДобавитьИнформациюВПротокол(Знач ИнформацияДляПользователя, ДанныеПротокола = "", 
			Знач ОтобразитьВОкнеСообщений = Ложь, Знач ЭтоОшибка = Ложь) Экспорт
	
	Если Не ПустаяСтрока(ИнформацияДляПользователя) Тогда
		
		Попытка
			
			ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
			Если НЕ ЗначениеЗаполнено(ТекущийПользователь) Тогда
				ИмяПользователя = "";
			Иначе
				ИмяПользователя = "[" + Строка(ТекущийПользователь) + "] "; 	
			КонецЕсли;
			
		Исключение
			
			ИмяПользователя = "[Сервер]";
			
		КонецПопытки;
			
		СтрокаДляЗаписи = "[" + Строка(ТекущаяДата()) + "] " + ИмяПользователя + ИнформацияДляПользователя;
	Иначе
		// записываем строку как есть
		СтрокаДляЗаписи = ИнформацияДляПользователя;
	КонецЕсли;
		
	Если ДанныеПротокола = "" Тогда
		ДанныеПротокола = СтрокаДляЗаписи;
	Иначе
		ДанныеПротокола = ДанныеПротокола + Символы.ПС + СтрокаДляЗаписи;	
	КонецЕсли;	

	// возможно информацию еще надо в окно сообщений пользователю вывести
	#Если Клиент Тогда
		
		Если ОтобразитьВОкнеСообщений Тогда
			
			Если ЭтоОшибка Тогда
				ОбщегоНазначения.СообщитьОбОшибке(ИнформацияДляПользователя);
			Иначе
				
				Если ИнформацияДляПользователя <> Символы.ПС Тогда 
					ИнформацияДляПользователя = ОбщегоНазначения.СформироватьТекстСообщения(ИнформацияДляПользователя);
				КонецЕсли;	
				
				Сообщить(ИнформацияДляПользователя);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

// Процедура отображает сообщение пользователю и записывает его в лог
Процедура СообщитьПростуюИнформацию(Знач ИнформацияДляПользователя, ДанныеПротокола, 
	Знач ВывестиИнформациюВОкноСообщений = Истина, СтруктураОбменаДанными = Неопределено) Экспорт
	
	Если СтруктураОбменаДанными = Неопределено Тогда
		ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, ДанныеПротокола, ВывестиИнформациюВОкноСообщений, Ложь);
	Иначе
	
		СообщитьИнформациюОбОшибкеОбмена(ИнформацияДляПользователя, СтруктураОбменаДанными, 
			Истина, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает сообщение об ошибке пользователю и записывает его в лог
Процедура СообщитьИнформациюОПростойОшибке(Знач ИнформацияДляПользователя, ДанныеПротокола = "", Знач ОтображатьСообщениеОбОшибке = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, ДанныеПротокола, ОтображатьСообщениеОбОшибке, Истина);
	
КонецПроцедуры



// функция отражает сообщение об ошибке при обмене данными
Процедура СообщитьИнформациюОбОшибкеОбмена(Знач ИнформацияДляПользователя, СтруктураОбменаДанными, 
	ЗаписатьИнформациюОбОшибкеВИсторию = Ложь, ЭтоВыгрузкаДанных = Истина) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, СтруктураОбменаДанными.ДанныеПротокола, 
		СтруктураОбменаДанными.ВывестиИнформациюОбОшибкеВОкноСообщений, Истина);
		
	Если СтруктураОбменаДанными <> Неопределено 
		И ЗаписатьИнформациюОбОшибкеВИсторию Тогда
		
		Если ЭтоВыгрузкаДанных Тогда
			СтруктураОбменаДанными.РезультатЗаписиДанных = Ложь;
		Иначе
			СтруктураОбменаДанными.РезультатЧтенияДанных = Ложь;
		КонецЕсли;
		
		ДополнитьКомментарийДляОперации(СтруктураОбменаДанными, ИнформацияДляПользователя, ЭтоВыгрузкаДанных);
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура отображает сообщение пользователю и записывает его в лог
Процедура СообщитьИнформациюОбОбмене(Знач ИнформацияДляПользователя, СтруктураОбменаДанными) Экспорт
	
	ДобавитьИнформациюВПротокол(ИнформацияДляПользователя, СтруктураОбменаДанными.ДанныеПротокола, СтруктураОбменаДанными.ВывестиИнформациюВОкноСообщений, Ложь);
	
КонецПроцедуры

// Процедура записывает данные протокола
Процедура ЗаписатьДанныеПротокола(НастройкаОбмена, ДанныеПротокола, ЭтоОшибка = Ложь)
	
	// только пустую строку не записываем, все остальное пишем
	Если ДанныеПротокола = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТипСообщения = ?(ЭтоОшибка, УровеньЖурналаРегистрации.Ошибка, УровеньЖурналаРегистрации.Информация);
		
	ЗаписьЖурналаРегистрации("Обмен данными."+ Строка(НастройкаОбмена.Ссылка), ТипСообщения, , НастройкаОбмена.Ссылка, СокрЛП(ДанныеПротокола));
	    	
	// очищаем данные протокола обмена
	ДанныеПротокола = "";
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФАЙЛАМИ ОБМЕНА


// функция по двум узлам возвращает имя самого файла обмена информацией, без пути к файлам
Функция СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, Знач РасширениеФайла = ".xml")
	
	Возврат "Message_" + СокрЛП(УзелОтправитель.Код) + "_" + СокрЛП(УзелПолучатель.Код) + РасширениеФайла;
	
КонецФункции

// Процедура по полному пути к файлу определяет каталог файла и есл каталог отсутвует то создает его
Процедура СоздатьКаталогПоПолномуПутиКФайлу(Знач ПолноеИмяФайла)
	
	ИмяКаталога = "";
	ИмяФайла = "";
	
	РаботаСФайлами.ПолучитьКаталогИИмяФайла(ПолноеИмяФайла, ИмяКаталога, ИмяФайла);
	
	СоздатьКаталогВСлучаеОтсутствия(ИмяКаталога);
	
КонецПроцедуры

// Процедура создает каталог если его нет
Процедура СоздатьКаталогВСлучаеОтсутствия(Знач ИмяКаталога)
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	НаличиеКаталогаОбмена = ПроверитьНаличиеКаталога(ИмяКаталога, Истина);
	
	Если НЕ НаличиеКаталогаОбмена Тогда
		// создаем вложенный каталог в темповый
		СоздатьКаталог(ИмяКаталога);
	КонецЕсли;
	
КонецПроцедуры

// функция возвращает каталог для временных файлов при обмене данными
Функция ПолучитьПутьККаталогуВременныхФайловОбмена(Знач НаименованиеНастройкиОбмена, УзелОбмена, Знач ПроверятьНаличиеКаталога = Ложь)
	
	// во временном каталоге катаог с именем узла, а потом с именем настройки обмена...
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	ИмяПланаОбмена = РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(ИмяПланаОбмена);
	
	ПутьКФайлуОбмена = РаботаСФайлами.ПолучитьИмяФайла(КаталогВременныхФайлов(), ИмяПланаОбмена);
	
	СтрокаКаталогаОбмена = СокрЛП(РаботаСФайлами.УдалитьЗапрещенныеСимволыИмени(НаименованиеНастройкиОбмена));
	ПутьКФайлуОбмена = РаботаСФайлами.ПолучитьИмяФайла(ПутьКФайлуОбмена, СтрокаКаталогаОбмена);
		
	Если ПроверятьНаличиеКаталога Тогда
		
		// ищем нужный нам каталог, если его нет - то пытаемся создать
		СоздатьКаталогВСлучаеОтсутствия(ПутьКФайлуОбмена);

	КонецЕсли;

	Возврат ПутьКФайлуОбмена;
	
КонецФункции

// функция возвращает имя файла обмена между двумя узлами
Функция ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(Знач ИмяКаталогаОбмена = "", Знач НаименованиеНастройкиОбмена, УзелОтправитель, УзелПолучатель, 
	Знач ПроверятьНаличиеКаталога = Ложь)
	
	// если узел отправитель и получатель совпадают то обмениваться не с кем
	Если УзелОтправитель = УзелПолучатель Тогда
		Возврат "";
	КонецЕсли;
	
	// имя итогового каталога обмена
	Если ПустаяСтрока(ИмяКаталогаОбмена) Тогда
		
		ПутьКФайлуОбмена = ПолучитьПутьККаталогуВременныхФайловОбмена(НаименованиеНастройкиОбмена, УзелОтправитель, ПроверятьНаличиеКаталога);
		                                       											   
	Иначе
		
		ПутьКФайлуОбмена = ИмяКаталогаОбмена;
		Если ПроверятьНаличиеКаталога Тогда
		
			// ищем нужный нам каталог, если его нет - то пытаемся создать
			СоздатьКаталогВСлучаеОтсутствия(ПутьКФайлуОбмена);

		КонецЕсли;
		
	КонецЕсли;
			
	// Формируем имя временного файла
	ИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(ПутьКФайлуОбмена, СформироватьИмяФайлаОбменаМеждуУзлами(УзелОтправитель, УзелПолучатель, ".xml"));
	
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает полный путь для создания временного файла обмена данными для записи изменений
Функция ВерутьИмяВременногоФайлаЗаписиДанных(СтруктураНастроекОбменаДанными)
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	ИмяФайла = ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(, СтруктураНастроекОбменаДанными.ДанныеНастройки.Наименование,
		ПолучитьТекущийУзелИБ(УзелОбмена), УзелОбмена, Истина);
		
	Возврат ИмяФайла;
	
КонецФункции

// функция возвращает полный путь временного файла для чтения изменений 
Функция ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, Знач ИзменитьРасширениеФайлаНаZip)
	
	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	ИмяФайла = ВернутьПолныйПутьКФайлуОбменаМеждуУзлами(, СтруктураНастроекОбменаДанными.ДанныеНастройки.Наименование, УзелОбмена, ПолучитьТекущийУзелИБ(УзелОбмена));
	
	// для файла чтения данных важно что бы существовал каталог, откуда будем читать данные
	
	ПроверитьДоступностьРаботыСКаталогом(ИмяФайла, ИзменитьРасширениеФайлаНаZip);
	
	Возврат ИмяФайла;
	
КонецФункции

// функция проверяет наличие не пустого файла
функция ПроверитьНаличиеФайлаОбмена(Знач ИмяФайлаОбмена)
	
	// проверка наличия файла
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Не Файл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
		
	Если Файл.ЭтоКаталог() ИЛИ Файл.Размер() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// функция проверяет наличие каталога обмена
Функция ПроверитьНаличиеКаталога(Знач ИмяКаталога, Знач ПроверятьЧтоНайденныйФайлЭтоКаталог = Ложь) Экспорт
	
	// ищем нужный нам каталог, если его нет - то пытаемся создать
	Если ПустаяСтрока(ИмяКаталога) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВыбФайл = Новый Файл(ИмяКаталога);
	Если Не ВыбФайл.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПроверятьЧтоНайденныйФайлЭтоКаталог Тогда
		// проверка что это точно каталог
		Возврат ВыбФайл.ЭтоКаталог();
	Иначе
		// если без разницы каталог это или нет
		Возврат Истина;
    КонецЕсли;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ЧТЕНИЕ И ЗАПИСЬ СООБЩЕНИЙ С ИЗМЕНЕНИЯМИ


// функция создает XMLЗапись для обмена данными
Функция СоздатьXMLЗаписьДляОбменаДанными(УзелОбмена, Знач ИмяФайлаОбменаДанными)
	
	Если ПустаяСтрока(ИмяФайлаОбменаДанными) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Создаем объект записи XML
	ЗаписьXML = Новый ЗаписьXML;
	
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбменаДанными);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ЗаписьXML;
	
КонецФункции

// функция создает XML чтение по узлу обмена
Функция СоздатьXMLЧтениеДляОбменаДанными(УзелОбмена, Знач ИмяФайлаОбменаДанными)
	
	НаличиеФайлаОбмена = ПроверитьНаличиеФайлаОбмена(ИмяФайлаОбменаДанными);
	Если Не НаличиеФайлаОбмена Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Производим попытку открытия файла
	ЧтениеXML = Новый ЧтениеXML;
	Попытка
		ЧтениеXML.ОткрытьФайл(ИмяФайлаОбменаДанными);
		Возврат ЧтениеXML;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура УстановитьОбщиеПараметрыДляОбработкиВыгрузкиЗагрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными, ЭтоВыгрузкаИзТекущейИБ)
	
	ДанныеНастройки = СтруктураНастроекОбменаДанными.ДанныеНастройки;
	
	ОбработкаОбменаДаннымиXML.ВыводВОкноСообщенийИнформационныхСообщений = Ложь;
	ОбработкаОбменаДаннымиXML.ВыводВПротоколИнформационныхСообщений = ОбработкаОбменаДаннымиXML.ВыводВОкноСообщенийИнформационныхСообщений;	
	
	ОбработкаОбменаДаннымиXML.ДописыватьДанныеВПротоколОбмена = Истина;
	ОбработкаОбменаДаннымиXML.ВыгружатьТолькоРазрешенные = Истина;
	
	ОбработкаОбменаДаннымиXML.ФлагРежимОтладки = ДанныеНастройки.РежимОтладкиOnLineОбмена;	
	
	ОбработкаОбменаДаннымиXML.ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена = (СтруктураНастроекОбменаДанными.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных > 0);
	ОбработкаОбменаДаннымиXML.КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена = СтруктураНастроекОбменаДанными.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных;
	
	Если ЭтоВыгрузкаИзТекущейИБ Тогда
		ОбработкаОбменаДаннымиXML.ИмяФайлаПротоколаОбмена = ДанныеНастройки.ИмяФайлаПротоколаОбменаOnLineОбмен;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуВыгружаемыхДанных(ДеревоПравилВыгрузки, ТаблицаТиповПравилВыгрузки) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоПравилВыгрузки Цикл
		
		Если СтрокаДерева.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
			
			Если СтрокаДерева.Включить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТипВыгрузки = СтрокаДерева.ОбъектВыборки;
			
			Если ТипВыгрузки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = ТаблицаТиповПравилВыгрузки.Найти(ТипВыгрузки, "ТипВыгружаемыхДанных");
			
			Если СтрокаТаблицы = Неопределено Тогда
				
				СтрокаТаблицы = ТаблицаТиповПравилВыгрузки.Добавить();
				СтрокаТаблицы.ТипВыгружаемыхДанных = ТипВыгрузки;
				
				Если ТипВыгрузки = Тип("КонстантыНабор") Тогда
					
					СтрокаТаблицы.МетаданныеОбъекта = "Константы";
					
				Иначе
				
					СтрокаТаблицы.МетаданныеОбъекта = Метаданные.НайтиПоТипу(СтрокаТаблицы.ТипВыгружаемыхДанных);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() <> 0 Тогда
			
			ЗаполнитьТаблицуВыгружаемыхДанных(СтрокаДерева.Строки, ТаблицаТиповПравилВыгрузки)	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередатьИнформациюВОбработкуОПользовательскихПоляхПоиска(ОбработкаОбменаДаннымиXML, СоответствиеПоиска)
	
	Попытка
	
		ОбработкаОбменаДаннымиXML.мИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных.Очистить();
		Для Каждого КлючЗначение Из СоответствиеПоиска Цикл
			
			ОбработкаОбменаДаннымиXML.мИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);	
			
		КонецЦикла;
		
	Исключение
	КонецПопытки;
		
КонецПроцедуры

Процедура ИзменитьНастройкиВыгрузкиСогласноДаннымПользователя(ОбработкаОбменаДаннымиXML, СоответствиеНастроекВыгрузки)
	
	Попытка
	
		ОбработкаОбменаДаннымиXML.мИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных.Очистить();
		
		Для Каждого КлючЗначение Из СоответствиеНастроекВыгрузки Цикл
			
			ПравилоВыгрузки = ОбработкаОбменаДаннымиXML.ТаблицаПравилВыгрузки.Строки.Найти(КлючЗначение.Ключ, "Имя", Истина);
			Если ПравилоВыгрузки <> Неопределено Тогда
				ПравилоВыгрузки.Включить = КлючЗначение.Значение.ВыгружатьДанные;
			КонецЕсли;
			
			ПравилоКонвертации = ОбработкаОбменаДаннымиXML.ТаблицаПравилКонвертации.Найти(КлючЗначение.Значение.КодПравилаОбмена, "Имя");
			Если ПравилоКонвертации <> Неопределено Тогда
				ПравилоКонвертации.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки = КлючЗначение.Значение.ВыгружатьПоСсылке;
			КонецЕсли;
			
		КонецЦикла;		
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными, ЭтоВыгрузкаИзТекущейИБ = Истина) Экспорт
	
	ДанныеНастройки = СтруктураНастроекОбменаДанными.ДанныеНастройки;
	
	ОбработкаОбменаДаннымиXML.РежимОбмена = "Выгрузка";
	
	Если ЭтоВыгрузкаИзТекущейИБ Тогда
		ТекстПравил = ДанныеНастройки.ПравилаОбмена.Получить();
	Иначе
		ТекстПравил = ДанныеНастройки.ПравилаОбменаДляПриемника.Получить();
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстПравил) Тогда
	
		ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка");
		
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.мПроверятьЗагруженностьПравилПриВыгрузке = Ложь;
	
	ОбработкаОбменаДаннымиXML.ДобавлениеОбъектовИзФоновогоОбмена = ДанныеНастройки.ДобавлениеОбъектовИзФоновогоОбмена;
	ОбработкаОбменаДаннымиXML.КоличествоОбъектовДляФоновогоОбмена = ДанныеНастройки.КоличествоОбъектовДляФоновогоОбмена;
	
	Если ЭтоВыгрузкаИзТекущейИБ Тогда
		
		ОбработкаОбменаДаннымиXML.УзелДляФоновогоОбмена = ДанныеНастройки.УзелФоновогоОбмена;
		ОбработкаОбменаДаннымиXML.УзелДляОбмена = ДанныеНастройки.УзелИнформационнойБазы;
		
		ИзменитьНастройкиВыгрузкиСогласноДаннымПользователя(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ИнформацияОбъектовДляВыгрузки);
		ПередатьИнформациюВОбработкуОПользовательскихПоляхПоиска(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ИнформацияСопоставленияДляВыгрузки);
				
	Иначе
		
		ИзменитьНастройкиВыгрузкиСогласноДаннымПользователя(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ИнформацияОбъектовДляЗагрузки);
		ПередатьИнформациюВОбработкуОПользовательскихПоляхПоиска(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ИнформацияСопоставленияДляЗагрузки);
		
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.НеВыгружатьОбъектыПоСсылкам = Истина;
	ОбработкаОбменаДаннымиXML.ИмяФайлаПравилОбмена = "1";
	ОбработкаОбменаДаннымиXML.мБылиПрочитаныПравилаОбменаПриЗагрузке = Ложь;
	
	УстановитьОбщиеПараметрыДляОбработкиВыгрузкиЗагрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными, ЭтоВыгрузкаИзТекущейИБ);
		
КонецПроцедуры

Процедура ПолучитьТаблицыИнформацииОПравилахОбмена(ТекстПравил, ТаблицаНастроекПолей, ТаблицаПравилВыгрузки) Экспорт
	
	ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
	ОбработкаОбменаДаннымиXML.мРежимЗагрузкиИнформацииОПравилахОбмена = Истина;
	ОбработкаОбменаДаннымиXML.ИнициализацияТаблицДанныхОПравилахОбмена();		
	
	Если НЕ ПустаяСтрока(ТекстПравил) Тогда
		
		ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка");		
		
	КонецЕсли;
	
	ТаблицаНастроекПолей = ОбработкаОбменаДаннымиXML.мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска;
	ТаблицаПравилВыгрузки = ОбработкаОбменаДаннымиXML.мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации;
		
КонецПроцедуры

// Процедура записывает изменения узла информационной база в файл в темповом каталоге
Процедура ЗаписатьСообщенияСИзмененеиямиДляУзла(СтруктураНастроекОбменаДанными, Знач ИмяФайлаОбменаДанными)

	УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
	
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен Тогда
		
		Попытка
			
			ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			
			УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными);
			
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаОбменаДанными;
			
			
			#Если Клиент Тогда
				Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + """ ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтрокаСообщенияОбОшибке = "";
			УспешнаяВыгрузка = ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузку(Истина, СтрокаСообщенияОбОшибке);
			
			ДобавитьИнформациюВПротокол("Окончание записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = УспешнаяВыгрузка;
			
			СтруктураНастроекОбменаДанными.Вставить("ПереданоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПереданоОбъектовФоновогоОбмена);
			
			КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
						
			СтруктураНастроекОбменаДанными.Вставить("КоличествоВыгруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикВыгруженныхОбъектов);
			
		Исключение
			
			// в режиме клиента выводим информацию об ошибке
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();			
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений при обмене: " + СтрокаСообщенияОбОшибке, СтруктураНастроекОбменаДанными);
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
				       			
		КонецПопытки;
		
		ОбработкаОбменаДаннымиXML = Неопределено;
		
	Иначе
 	
		Попытка
					
		    ЭтоРИБ = ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена); 
			
			ЗаписьXML = СоздатьXMLЗаписьДляОбменаДанными(УзелОбмена, ИмяФайлаОбменаДанными);
			Если ЗаписьXML = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			#Если Клиент Тогда
				Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + """ ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			Если ЭтоРИБ Тогда
				
				// Создаем новое сообщение
				ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();

				ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
				
				// для РИБ изменения в информационной базе
				ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения, СтруктураНастроекОбменаДанными.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных);
				
				// Завершаем запись сообщения
				ЗаписьСообщения.ЗакончитьЗапись();
					
				ЗаписьXML.Закрыть();
				
				СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Истина;
			Иначе
				
				ЭтотУзелОбмена = ПолучитьТекущийУзелИБ(УзелОбмена).ПолучитьОбъект();
							
				// план обмена самостоятельно читает изменения от узла
				СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = ЭтотУзелОбмена.ВыгрузитьИзмененияДанныхДляУзла(УзелОбмена, 
					СтруктураНастроекОбменаДанными.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, ЗаписьXML);
				
			КонецЕсли;
			
			ДобавитьИнформациюВПротокол("Окончание записи изменений в файл обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
					
		Исключение
			
			// в режиме клиента выводим информацию об ошибке
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений при обмене: " + СтрокаСообщенияОбОшибке, СтруктураНастроекОбменаДанными);
			
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
									
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура читает файл изменений от узла РИБ
Процедура ЗагрузитьCообщениеСИзменениямиОтРИБУзла(СтруктураНастроекОбменаДанными, ЧтениеXML, КонфигурацияИзмененаПриОбменеРИБ = ЛОжь)
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Истина;
	КонфигурацияИзмененаПриОбменеРИБ = Ложь;

	// Загрузка из найденного файла
	ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
	ЧтениеСообщения.НачатьЧтение(ЧтениеXML);

	Попытка
		ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения, СтруктураНастроекОбменаДанными.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных);
		
		ЧтениеСообщения.ЗакончитьЧтение();
		ЧтениеXML.Закрыть();
		
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений при обмене РИБ: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Ложь);
		
		// ошибка может быть связана с тем, что изменилась конфигурация информационной базы
		Если ПланыОбмена.ГлавныйУзел() <> Неопределено 
			И КонфигурацияИзменена() Тогда
			
			КонфигурацияИзмененаПриОбменеРИБ = Истина;
			СтруктураНастроекОбновленияКонфигурации = ПолучитьСтруктуруНастроекФайлаОбновленияКонфигурации();
			
			НужноОбновлятьКонфигурацию = Ложь;
			СтруктураНастроекОбновленияКонфигурации.Свойство("АвтоматическиОбновлятьКонфигурациюПриПриемеСообщенияОтГлавногоУзлаРИБ", НужноОбновлятьКонфигурацию);
						
			Если НужноОбновлятьКонфигурацию = Истина Тогда
				
				НастройкаОбмена = Неопределено;
				Если СтруктураНастроекОбменаДанными.ДанныеНастройкиАвтообмена <> Неопределено Тогда
					НастройкаОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройкиАвтообмена.Ссылка;
				КонецЕсли;
				
				// при необходимости нужно обновить конфигурацию ИБ
				ВыполнитьОбновлениеКонфигурацииДляИнформационнойБазы(НастройкаОбмена, СтруктураНастроекОбновленияКонфигурации);
			
			КонецЕсли;
			
		Конецесли;
		
		Возврат;
                        
	КонецПопытки;
	
КонецПроцедуры

Процедура УстановитьПараметрыДляЗагрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными)
	
	ОбработкаОбменаДаннымиXML.РежимОбмена = "Загрузка";
	
	УстановитьОбщиеПараметрыДляОбработкиВыгрузкиЗагрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными, Истина);
	
КонецПроцедуры

// Процедура получения сообщения обмена данными
// Получает сообщение с новыми данными для этого узла и загружает данные
//
Процедура ЗагрузитьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбменаДанными, Знач ИмяФайлаОбменаДанными)
			
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен Тогда
		
		Попытка
			
			ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
			УстановитьПараметрыДляЗагрузкиДанных(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными);
			
			ОбработкаОбменаДаннымиXML.ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных = СтруктураНастроекОбменаДанными.ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных;
			ОбработкаОбменаДаннымиXML.ИмяФайлаОбмена = ИмяФайлаОбменаДанными;
						
			#Если Клиент Тогда
				Состояние("Запись изменений ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтрокаСообщенияОбОшибке = "";
			СтрокаСообщенияОбОшибкеОтложенныхДвижений = "";
			УспешнаяЗагрузкаДанных = ОбработкаОбменаДаннымиXML.ВыполнитьЗагрузку(СтрокаСообщенияОбОшибке, 
				СтрокаСообщенияОбОшибкеОтложенныхДвижений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации,
				СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
			
			ДобавитьИнформациюВПротокол("Окончание чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = УспешнаяЗагрузкаДанных;
			
			СтруктураНастроекОбменаДанными.Вставить("ПолученоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПолученоОбъектовФоновогоОбмена);
			СтруктураНастроекОбменаДанными.Вставить("РезультатОтложенныхДвиженийДокументов", ОбработкаОбменаДаннымиXML.РезультатВыполненияОтложенныхДвижений);
			
			КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
						
			СтруктураНастроекОбменаДанными.Вставить("КомментарийПриВыполненииОтложенныхДвижений", СтрокаСообщенияОбОшибкеОтложенныхДвижений);
			СтруктураНастроекОбменаДанными.Вставить("КоличествоВыполненныхОтложенныхДвиженийДокументов", ОбработкаОбменаДаннымиXML.мКоличествоВыполненныхОтложенныхДвиженийДокументов);
			
						
			СтруктураНастроекОбменаДанными.Вставить("КоличествоЗагруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикЗагруженныхОбъектов);
									
		Исключение
			
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений из файла обмена." + Символы.ПС + СтрокаСообщенияОбОшибке, 
				СтруктураНастроекОбменаДанными);
				
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
			КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
								
		КонецПопытки;
		
	Иначе
	
		УзелОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы;
			
		ЭтоРИБ = ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена);

		Попытка
	        					
			ЧтениеXML = СоздатьXMLЧтениеДляОбменаДанными(УзелОбмена, ИмяФайлаОбменаДанными);
			
			Если ЧтениеXML = Неопределено Тогда
				// не удалось создать объект чтения данных - ничего не делаем
				СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
				Возврат;
			КонецЕсли;
			
			#Если Клиент Тогда
				Состояние("Чтение изменений от узла """ + УзелОбмена.Наименование + """ ...");
			#КонецЕсли
		
			ДобавитьИнформациюВПротокол("Начало чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
			Если ЭтоРИБ Тогда
				
				КонфигурацияПриОбменеРИБИзменена = Ложь;
				ЗагрузитьCообщениеСИзменениямиОтРИБУзла(СтруктураНастроекОбменаДанными, ЧтениеXML, КонфигурацияПриОбменеРИБИзменена);
				СтруктураНастроекОбменаДанными.Вставить("КонфигурацияПриОбменеРИБИзменена", КонфигурацияПриОбменеРИБИзменена);
				            			
			Иначе
				
				ЭтотУзелОбмена = ПолучитьТекущийУзелИБ(УзелОбмена).ПолучитьОбъект();
				// план обмена самостоятельно читает изменения от узла
				СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = ЭтотУзелОбмена.ЗагрузитьИзмененияДанныхДляУзла(УзелОбмена, 
					СтруктураНастроекОбменаДанными.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных, ЧтениеXML);
				
			КонецЕсли;
			
			ДобавитьИнформациюВПротокол("Окончание чтения изменений из файла обмена " + ИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		Исключение
			
			СтрокаСообщенияОбОшибке = ОписаниеОшибки();
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при чтении изменений из файла обмена." + Символы.ПС + СтрокаСообщенияОбОшибке, 
				СтруктураНастроекОбменаДанными);
			
			СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;			
			КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
								
		КонецПопытки;
			
	КонецЕсли;		
	
КонецПроцедуры

// функция возвращает имя плана обмена по узлу обмена
Функция ПолучитьИмяПланаОбмена(УзелОбмена)
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат "";
	КонецЕсли;
	
	МетаданныеУзла = УзелОбмена.Метаданные();
	Возврат МетаданныеУзла.Имя;
    	
КонецФункции

// функция возвращает узел текущей ИБ по узлу обмена
Функция ПолучитьТекущийУзелИБ(УзелОбмена) Экспорт
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	
	Если НЕ ЗначениеЗаполнено(ИмяПланаОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
КонецФункции

// функция по узлу обмена определяет это база РИБ или нет
Функция ОпределитьПоУзлуОбменаЭтоРИБ(УзелОбмена) Экспорт
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	Возврат МетаданныеПланаОбмена.РаспределеннаяИнформационнаяБаза;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// ВЫБОР КАТАЛОГОВ И ФАЙЛОВ ОБМЕНА ДАННЫМИ

#Если Клиент Тогда

// функция возвращает выбранный пользователем каталог для выгрузки данных
Функция ВернутьВыбранныйПользователемКаталогДляОбмена(КаталогОбмена = "")
	
	// хотят только изменения выгрузить
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(КаталогОбмена, "Выбор каталога обмена данными");
	Если Не РезультатВыбора Тогда
		КаталогОбмена = "";
	Иначе
			
		// надо проверить наличие каталога на диске
		НаличиеКаталога = ПроверитьНаличиеКаталога(КаталогОбмена, Истина);
			
		// выбран каталог которого нет на диске
		Если Не НаличиеКаталога Тогда
				
			КаталогОбмена = "";
				
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат КаталогОбмена;
	
КонецФункции

#КонецЕсли

// Функция запрашивает у пользователя ввести имя файла для обмена данными либо имя каталога для выгрузки данных
Функция ОпроситьИмяКаталогаОбменаДанными(Знач ТекстИнформационногоСообщения = "",
	СтруктураНастроекОбменаДанными, КаталогОбмена)
	
	Если Не ПустаяСтрока(ТекстИнформационногоСообщения) Тогда
		
		СообщитьИнформациюОбОбмене(ТекстИнформационногоСообщения, СтруктураНастроекОбменаДанными);
		
	КонецЕсли;
	
	// не задан каталог обмена данными
	Если НЕ СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// запуск в интерактивном режиме
	#Если Клиент Тогда	
							
		КаталогОбмена = ВернутьВыбранныйПользователемКаталогДляОбмена(КаталогОбмена);
	
	#Иначе
		Возврат Ложь;
	#КонецЕсли

	Возврат Истина;
	
КонецФункции


// АРХИВАЦИЯ
///////////////////////////////////////////////////////////////////////////////

// функция архивирует файл
Функция ЗаархивироватьФайл(Знач ИмяИсходногоФайла, СтруктураНастроекОбменаДанными)
	
	Попытка
		ДобавитьИнформациюВПротокол("Начало сжатия файла обмена " + СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЗаписьZipФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаОтправку, "Файл обмена данными");
		Архиватор.Добавить(ИмяИсходногоФайла);
		Архиватор.Записать();
		
		ДобавитьИнформациюВПротокол("Окончание сжатия файла обмена данными " + ИмяИсходногоФайла + "." + Символы.ПС +
			"Данные файла обмена помещены в файл " + СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при сжатии данных файла обмена: " + ИмяИсходногоФайла + Символы.ПС + ОписаниеОшибки(), 
			СтруктураНастроекОбменаДанными, Истина, Истина);
		Возврат Ложь;	
		
    КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// функция разархивирует файл
Функция РазархивироватьФайл(СтруктураНастроекОбменаДанными) 
	
	КаталогДляРаспаковки = КаталогВременныхФайлов();
	
	ИмяРазархивированногоФайла = "";
	
	Попытка
		ДобавитьИнформациюВПротокол("Начало распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, 
			СтруктураНастроекОбменаДанными.ДанныеПротокола);
		
		Архиватор = Новый ЧтениеZipФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными.ДанныеНастройки.ПарольНаПрием);
		
		Если Архиватор.Элементы.Количество() > 0 Тогда
			
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ИмяРазархивированногоФайла = РаботаСФайлами.ПолучитьИмяФайла(КаталогДляРаспаковки, Архиватор.Элементы[0].Имя);
			
		Иначе
			
			ИмяРазархивированногоФайла = "";	
			
		КонецЕсли;

		Архиватор.Закрыть();
	
	Исключение
		
		СообщитьИнформациюОбОшибкеОбмена("Ошибка при распаковке данных из архива : " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Ложь);
		Возврат "";
							
	КонецПопытки;
	
	ДобавитьИнформациюВПротокол("Окончание распаковки файла обмена данными " + СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений + ".
		|Распакованные данные помещены в файл " + ИмяРазархивированногоФайла, СтруктураНастроекОбменаДанными.ДанныеПротокола);
	
	Возврат ИмяРазархивированногоФайла;
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
//	ОБМЕН ИНФОРМАЦИЕЙ

// Процедура производит чтение данных
Процедура ВыполнитьЗагрузкуДанныхИзФайлаОбмена(СтруктураНастроекОбменаДанными)
	
	#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 5);
	#КонецЕсли
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	
	СтруктураНастроекОбменаДанными.ДатаНачалаЗагрузки = ТекущаяДата();
	
	// ЧТЕНИЕ
	Если НЕ СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Не найден входящий файл обмена данными.", СтруктураНастроекОбменаДанными);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, "Не найден входящий файл обмена данными.", Ложь);
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		#КонецЕсли
		Возврат;
		
	КонецЕсли;
		
	// если расширение файла для чтения ZIP то его нужно сначала разархивировать
	РасширениеФайлаОбмена = РаботаСФайлами.ПолучитьРасширениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);
	ЧтениеИзАрхива = Врег(РасширениеФайлаОбмена) = "ZIP";
			
	Если ЧтениеИзАрхива Тогда
		ИмяВременногоФайла = РазархивироватьФайл(СтруктураНастроекОбменаДанными);										
	Иначе
		ИмяВременногоФайла = СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений;				
	КонецЕсли;
			
	// читаем сообщения с изменененями
	Если ИмяВременногоФайла = "" Тогда
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
		#КонецЕсли
		Возврат;
		
	КонецЕсли;
		
	ЗагрузитьСообщениеСИзменениямиДляУзла(СтруктураНастроекОбменаДанными, ИмяВременногоФайла);
					
	// сообщим о результатах чтения данных
	Если СтруктураНастроекОбменаДанными.РезультатЧтенияДанных Тогда
					
		СообщитьИнформациюОбОбмене("Чтение данных из файла обмена успешно завершено.", СтруктураНастроекОбменаДанными);
								
	Иначе
					
		СообщитьИнформациюОбОшибкеОбмена("Чтение данных из файла обмена завершено с ошибками!", СтруктураНастроекОбменаДанными);
							
	КонецЕсли;
			
	// временный файл откуда считывались данные в любом случае не нужен	
	Если ЧтениеИзАрхива Тогда
				
		ВыполнитьУдалениеФайла(ИмяВременногоФайла, СтруктураНастроекОбменаДанными, , Ложь);	
				
	КонецЕсли;
			
	// запоминаем последнюю дату чтения данных
	СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки = ТекущаяДата();
	
	#Если Клиент Тогда
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из файла обмена", 40);
	#КонецЕсли
	
КонецПроцедуры

// Процедура производит запись данных
Процедура ВыполнитьВыгрузкуДанныхВФайлОбмена(СтруктураНастроекОбменаДанными)
	
	#Если Клиент Тогда
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 5);
	#КонецЕсли
	
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	СтруктураНастроекОбменаДанными.ДатаНачалаВыгрузки = ТекущаяДата();
	
	// ЗАПИСЬ
	Если Не СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
		#КонецЕсли
		Возврат;
		
	КонецЕсли;
		
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Выгрузка изменений из текущей информационной базы НЕ произведена!", СтруктураНастроекОбменаДанными);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, "Выгрузка изменений из текущей информационной базы НЕ произведена!", Истина);
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
		#КонецЕсли
		Возврат;
		
	КонецЕсли;
	
	ИмяФайлаДляЗаписиИзменений = СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений;
	
	// записываем изменения
	ЗаписатьСообщенияСИзмененеиямиДляУзла(СтруктураНастроекОбменаДанными, ИмяФайлаДляЗаписиИзменений);
			
	// если надо то архивируем
	Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных
		И СтруктураНастроекОбменаДанными.ДанныеНастройки.ВыполнятьАрхивациюФайловОбмена Тогда
		
		// изменяем расширение файла с ".xml" на ".zip"
		РаботаСФайлами.УстановитьРасширениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ".zip");
		
		СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = ЗаархивироватьФайл(ИмяФайлаДляЗаписиИзменений, СтруктураНастроекОбменаДанными);
		
		Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда 
			
			// грохаем временный файл
			ВыполнитьУдалениеФайла(ИмяФайлаДляЗаписиИзменений, СтруктураНастроекОбменаДанными, , Истина);
			
		КонецЕсли;
								
	КонецЕсли;
			
	// сообщим о результатах чтения данных
	Если СтруктураНастроекОбменаДанными.РезультатЗаписиДанных Тогда
					
		СообщитьИнформациюОбОбмене("Запись изменений текущей информационной базы в файл обмена завершилась успешно.", СтруктураНастроекОбменаДанными);
								
	Иначе
					
		СообщитьИнформациюОбОшибкеОбмена("Запись изменений текущей информационной базы в файл обмена завершилась с ошибками!", СтруктураНастроекОбменаДанными);
		
					
	КонецЕсли;
					
	СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки = ТекущаяДата();
	
	#Если Клиент Тогда
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в файл обмена", 40);
	#КонецЕсли
	
КонецПроцедуры

// функция возвращает дату файла последнего обмена для настройки обмена
Функция ПолучитьДатуФайлаПоследнейЗагрузкиДанных(СсылкаНастройкиОбмена)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПараметрыОбменаДанными.ДатаПоследнегоФайлаОбмена
				   |ИЗ
	               |	РегистрСведений.ПараметрыОбменаДанными КАК ПараметрыОбменаДанными
				   |	ГДЕ (ПараметрыОбменаДанными.НастройкаОбменаДанными = &Ссылка)";
				   
	Запрос.УстановитьПараметр("Ссылка", СсылкаНастройкиОбмена); 
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ДатаПоследнегоФайлаОбмена;
	Иначе
		Возврат Неопределено;		
	КонецЕсли;
	
КонецФункции

// Процедура по адресу FTP обмена получает имя сервера и имя каталога обмена
Процедура ПолучитьИмяСервераИИмяКаталогаОбмена(Знач ПолныйFTPАдрес, ИмяСервера, ИмяКаталога)
	
	АдресОбмена = НормализоватьFTPАдрес(ПолныйFTPАдрес);
	
	// принцип получения адреса такой, все что до первой черты / или \ - это имя сервера, потом каталог
	АдресОбмена = СтрЗаменить(АдресОбмена, "\", "/");
	
	ПозицияПрямогоСлеша = Найти(АдресОбмена, "/");
	
	Если ПозицияПрямогоСлеша = 0 Тогда
		
		ИмяСервера = АдресОбмена;
		ИмяКаталога = "";
		
		
	Иначе
		
		ИмяСервера = Сред(АдресОбмена, 1, ПозицияПрямогоСлеша - 1);
		ИмяКаталога = Сред(АдресОбмена, ПозицияПрямогоСлеша);
		
		// последний должен быть слеш у имени каталога
		Если Сред(ИмяКаталога, СтрДлина(ИмяКаталога)) <> "/" Тогда
			
			ИмяКаталога = ИмяКаталога + "/";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// функция выполняет FTP подключение к серверу
Функция ВыполнитьFTPПодключениеКСерверу(Знач ИмяFTPСервера, НастройкиОбмена, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина, СтруктураОбменаДанными = Неопределено)       
	
	#Если Клиент Тогда
		Состояние("Выполняется подключение к FTP: " + ИмяFTPСервера);
	#КонецЕсли
    
	Попытка
		
		Соединение = Новый FTPСоединение(ИмяFTPСервера, НастройкиОбмена.ПортFTPСоединения, 
				НастройкиОбмена.ПользовательFTPСоединения, НастройкиОбмена.ПарольFTPСоединения, ,НастройкиОбмена.ПассивноеFTPСоединение);						
				
	Исключение
			
		// ошибка при подключении к ftp
		СообщитьПростуюИнформацию("Ошибка при подключении к FTP : " + ИмяFTPСервера + " ! " + ОписаниеОшибки(), 
			ДанныеПротокола, ВывестиИнформациюВОкноСообщений, СтруктураОбменаДанными);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

// функция проверяет наличие катаога на FTP сервере
Функция ПроверитьНаличиеКаталогаНаFTPСервере(Соединение, Знач ИмяКаталогаСервера, 
	ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина, СтруктураОбменаДанными = Неопределено)
	
	Если ПустаяСтрока(ИмяКаталогаСервера) Тогда
		Возврат Истина;
	КонецЕсли;
	
	//надо сначала проверить что сам каталог доступа есть
	Попытка
		
		МассивНайденныхКаталогов = Соединение.НайтиФайлы(ИмяКаталогаСервера, "");
		
	Исключение
		
		// ошибка при подключении к ftp
        СообщитьПростуюИнформацию("Ошибка при соединении с FTP : " + ИмяКаталогаСервера + " ! " + ОписаниеОшибки(), 
              ДанныеПротокола, ВывестиИнформациюВОкноСообщений, СтруктураОбменаДанными);
        Возврат Ложь;
		
	КонецПопытки;
	
	Для Каждого НайденныйКаталог Из МассивНайденныхКаталогов Цикл
		
		// если не каталог - то дальше ищем
		Если НЕ НайденныйКаталог.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		// большие и маленькие буквы считаются различными
		Если НайденныйКаталог.ПолноеИмя + "/" <> ИмяКаталогаСервера Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЦикла;
	
	// если не найден каталог для обмена
	СообщитьПростуюИнформацию("Не найден FTP каталог обмена информацией: " + ИмяКаталогаСервера, 
		ДанныеПротокола, ВывестиИнформациюВОкноСообщений, СтруктураОбменаДанными);
		
	Возврат Ложь;
	
КонецФункции

// функция проверяет настройки FTP подключения
Функция ПроверитьНастройкиFTPПодключения(ДанныеНастройки, ДанныеПротокола = "", Знач ВывестиИнформациюВОкноСообщений = Истина,
	ИмяКаталогаСервера = "", ИмяFTPСервера = "" , Соединение = Неопределено, СтруктураОбменаДанными = Неопределено) Экспорт
	
	// нужно по полному имени получить имя сервера и имя каталога
	ПолучитьИмяСервераИИмяКаталогаОбмена(ДанныеНастройки.FTPАдресОбмена, ИмяFTPСервера, ИмяКаталогаСервера);
	
	// если не задано имя сервера или каталога то невозможно обмениваться данными
	Если ПустаяСтрока(ИмяFTPСервера) Тогда
		
		СообщитьПростуюИнформацию("Не задан сервер обмена информацией через FTP.", 
			ДанныеПротокола, ВывестиИнформациюВОкноСообщений, СтруктураОбменаДанными);

		Возврат Ложь;
		
	КонецЕсли;
	
	// соединение
	Соединение = ВыполнитьFTPПодключениеКСерверу(ИмяFTPСервера, ДанныеНастройки, ДанныеПротокола, ВывестиИнформациюВОкноСообщений, СтруктураОбменаДанными);
	Если Соединение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// каталог проверяем
	НаличиеКаталога = ПроверитьНаличиеКаталогаНаFTPСервере(Соединение, ИмяКаталогаСервера, ДанныеПротокола, ВывестиИнформациюВОкноСообщений, СтруктураОбменаДанными);
	Если Не НаличиеКаталога Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// СЛУЖЕБНЫЕ ФУНКЦИЯ ВЫПОЛНЯЮЩИЕСЯ ПЕРЕД ОБМЕНОМ
///////////////////////////////////////////////////////////////////////////////

// Процедура подготавливает обмен через файловый ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными)
	
	//Алгоритм получения файлов обмена:

	//Случай автоматического запуска обмена:
	//•	Проверка доступности указанного в настройках каталога. Если каталог не доступен (не найден), то обмен не начинается
	//•	Проверка наличия файла обмена от узла информационной базы
	//•	После внесений изменений в информационную базу файл обмена удаляется

	//Случай запуска обмена в ручном режиме:
	//•	Проверка доступности указанного в настройках каталога. 
	//o	Если искомый каталог доступен и файл обмена в нем присутствует, то обмен происходит точно так же как и при автоматическом запуске
	//o	Если каталог не доступен или не найден, либо не найден файл обмена данными то пользователю выдается соответствующее сообщение. Предлагается выбрать файл для обмена самостоятельно.
	
	ИтоговоеИмяФайлаОбменаДанными = "";
	СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными = "";
	
	КаталогОбменаДанными = СтруктураНастроекОбменаДанными.ДанныеНастройки.КаталогОбменаИнформацией;
	
	ПроверкаНаличияКаталога = ПроверитьНаличиеКаталога(КаталогОбменаДанными, Истина);
	Если НЕ ПроверкаНаличияКаталога Тогда
		
		// не задан каталог обмена данными
		Если ПустаяСтрока(КаталогОбменаДанными) Тогда
			ТекстСообщенияПользователю = "Не задан каталог обмена информацией";
		Иначе
			ТекстСообщенияПользователю = "Не найден каталог обмена информацией: " + КаталогОбменаДанными;
		КонецЕсли;
			
		РезультатВыбора = ОпроситьИмяКаталогаОбменаДанными(ТекстСообщенияПользователю, СтруктураНастроекОбменаДанными, 
			КаталогОбменаДанными);
			
		Если Не РезультатВыбора Тогда
			Возврат;
		КонецЕсли;
	
	КонецЕсли;	
		
	// каталог есть, поверяем наличие файла обмена, если нужно данные считать
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		ИмяФайлаШаблонаОбмена = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "");
		ИмяФайлаПоУмолчаниюXML = ИмяФайлаШаблонаОбмена + ".xml";
		ИмяФайлаПоУмолчаниюZIP = ИмяФайлаШаблонаОбмена + ".zip";
		
		ИтоговоеИмяФайлаОбменаДаннымиXML = РаботаСФайлами.ПолучитьИмяФайла(КаталогОбменаДанными, ИмяФайлаПоУмолчаниюXML);
		НаличиеФайлаОбменаXML = ПроверитьНаличиеФайлаОбмена(ИтоговоеИмяФайлаОбменаДаннымиXML);
				
		ИтоговоеИмяФайлаОбменаДаннымиZIP = РаботаСФайлами.ПолучитьИмяФайла(КаталогОбменаДанными, ИмяФайлаПоУмолчаниюZIP);
		НаличиеФайлаОбменаZIP = ПроверитьНаличиеФайлаОбмена(ИтоговоеИмяФайлаОбменаДаннымиZIP);
				
		Если НЕ НаличиеФайлаОбменаXML И НЕ НаличиеФайлаОбменаZIP Тогда
				
			// каталог есть, но файлов в нем, удовлетворяющих условиям поиска нет
			// значит просто файл не нашли, вот и все.
								
		ИначеЕсли НаличиеФайлаОбменаXML И НаличиеФайлаОбменаZIP Тогда
			// сразу оба файла...
			// берем последний по времени
			ВремяФайлаXML = РаботаСФайлами.ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДаннымиXML);
			ВремяФайлаZIP = РаботаСФайлами.ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДаннымиZIP);
					
			Если ВремяФайлаXML >= ВремяФайлаZIP Тогда
				ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиXML;	
			Иначе
				ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиZIP;
			КонецЕсли;
					
			// сообщаем о том с каким файлом ведется обмен		
			СообщитьИнформациюОбОбмене("В каталоге обмена имеются 2 файла обмена информацией: " + ИмяФайлаПоУмолчаниюXML + ", " + ИмяФайлаПоУмолчаниюXML, 
				СтруктураНастроекОбменаДанными);
			// то что выбрали для обмена
			СообщитьИнформациюОбОбмене("Время записи/изменения файла : " + ИтоговоеИмяФайлаОбменаДанными + " больше. Он выбран для обмена данными.", 
				СтруктураНастроекОбменаДанными);
					
		ИначеЕсли НаличиеФайлаОбменаXML Тогда	
			// есть только XML файл
			ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиXML; 
					
		ИначеЕсли НаличиеФайлаОбменаZIP Тогда	
			// есть только ZIP
			ИтоговоеИмяФайлаОбменаДанными = ИтоговоеИмяФайлаОбменаДаннымиZIP;
					
		КонецЕсли; // наличие файлов приема
				
	КонецЕсли;	// производить прием сообщений
	
	// ничего не указано
	Если ПустаяСтрока(ИтоговоеИмяФайлаОбменаДанными) 
		И ПустаяСтрока(КаталогОбменаДанными) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	#КонецЕсли
	
	// если задана переменная ИтоговоеИмяФайлаОбменаДанными тогда хотим и изменение получить и данные выгрузить
	Если Не ПустаяСтрока(ИтоговоеИмяФайлаОбменаДанными) Тогда
		
		// получаем дату последнего файла обмена
		СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = РаботаСФайлами.ПолучитьДатуФайла(ИтоговоеИмяФайлаОбменаДанными);
		СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена = ИтоговоеИмяФайлаОбменаДанными; 
		
		// копируем файл во временный каталог
		СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, 
			(Врег(РаботаСФайлами.ПолучитьРасширениеФайла(ИтоговоеИмяФайлаОбменаДанными)) = "ZIP"));
				        		
		УдачноеКопирование = ВыполнитьКопированиеФайла(ИтоговоеИмяФайлаОбменаДанными, СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, Истина, 
			СтруктураНастроекОбменаДанными, Ложь);
			
		Если Не УдачноеКопирование Тогда
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений	= "";			
		КонецЕсли;	
		
		ИмяФайла = "";
		РаботаСФайлами.ПолучитьКаталогИИмяФайла(ИтоговоеИмяФайлаОбменаДанными, КаталогОбменаДанными, ИмяФайла);
		
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных;
	
	// весь обмен производим во временном каталоге
	СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными = КаталогОбменаДанными; 
	
КонецПроцедуры

// Процедура подготавливает обмен через FTP ресурс по настройке обмена данными
Процедура ПодготовитьОбменЧерезFTPРесурс(СтруктураНастроекОбменаДанными)
	
	Перем Соединение, ИмяFTPСервера, ИмяКаталогаСервера;
	
	ПроверитьНастройкиПодключения = ПроверитьНастройкиFTPПодключения(СтруктураНастроекОбменаДанными.ДанныеНастройки, 
		СтруктураНастроекОбменаДанными.ДанныеПротокола,	СтруктураНастроекОбменаДанными.ВывестиИнформациюВОкноСообщений, 
		ИмяКаталогаСервера, ИмяFTPСервера, Соединение, СтруктураНастроекОбменаДанными);
		
	Если Не ПроверитьНастройкиПодключения Тогда
		Возврат;
	КонецЕсли;
		
	СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных;
		
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		// ищем файлы по маске с расширением Message_A_B .xml или .zip
		ШаблонИмениФайла = СформироватьИмяФайлаОбменаМеждуУзлами(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, 
			СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена, "") + ".*";
		
		МассивНайденныхФайлов = Соединение.НайтиФайлы(ИмяКаталогаСервера, ШаблонИмениФайла);
		
		СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ПолучитьДатуФайлаПоследнейЗагрузкиДанных(СтруктураНастроекОбменаДанными.ДанныеНастройки.Ссылка);
				
		Для Каждого ФайлФТП Из МассивНайденныхФайлов Цикл
			
			ТекущийФайлДляОбмена = ФайлФТП;
			
			// проверяем нужное расширение, то что это фай а не каталог, запоминаем последнюю дату файла
			Если НЕ( (Врег(ТекущийФайлДляОбмена.Расширение) = ".ZIP") ИЛИ (Врег(ТекущийФайлДляОбмена.Расширение) = ".XML") ) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ТекущийФайлДляОбмена.ЭтоФайл() = Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если (ТекущийФайлДляОбмена.Размер() = 0) Тогда
				Продолжить;
			КонецЕсли;
			
			// с датами определяемся
			ВремяИзмененияТекущегоФайла = ТекущийФайлДляОбмена.ПолучитьВремяИзменения();
			
			//дата последнего файла обмена должна быть меньше текущего файла обмена
			Если (СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена <> Неопределено) 
				И (СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена > ВремяИзмененияТекущегоФайла) Тогда
				
				Продолжить;
				
			КонецЕсли;			
			
			// проверим что бы размер файла не превосходил ограничения по размеру
			Если (СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP > 0) 
				И (ТекущийФайлДляОбмена.Размер() / 1024) > СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP Тогда
				
				// файл не удовлетфоряет ограничениям по размеру для получения через FTP
				Продолжить;	
						
			КонецЕсли;			
			
			ФайлДляОбмена = ТекущийФайлДляОбмена;
			СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена = ВремяИзмененияТекущегоФайла; 
			СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена = ИмяFTPСервера + ФайлФТП.ПолноеИмя;
			
		КонецЦикла;	
			
		//надо переместить нужный файл в каталог для обмена данными
		Если ФайлДляОбмена <> Неопределено Тогда
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = ВерутьИмяВременногоФайлаЧтенияДанных(СтруктураНастроекОбменаДанными, 
				(Врег(ФайлДляОбмена.Расширение) = ".ZIP"));
			
			Попытка
				// генерируем имя файла для чтения изменений и закачиваем этот файл
				Соединение.Получить(ФайлДляОбмена.ПолноеИмя, СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений);	
				
			Исключение
			
				СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла c FTP ресурса: " + ОписаниеОшибки(), 
					СтруктураНастроекОбменаДанными, Истина, Ложь);
				СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";
							
			КонецПопытки;
				
		Иначе
			
			Если (МассивНайденныхФайлов.Количество() > 0)
				И ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена) Тогда
				
				//файлы то есть но ни один не подходит
				СообщениеДляПользователя = "Возможно дата файлов обмена не превосходит дату последнего файла обмена данными через FTP: " + Строка(СтруктураНастроекОбменаДанными.ДатаПоследнегоФайлаОбмена);
				
				СообщитьИнформациюОбОбмене(СообщениеДляПользователя, СтруктураНастроекОбменаДанными);
				ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, СообщениеДляПользователя, Ложь);				
								
			КонецЕсли;
			
			СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "";		
		КонецЕсли;
		
	КонецЕсли; // надо читать данные с FTP	
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
		ИЛИ Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений) Тогда
		
		#Если Клиент Тогда
		ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
		#КонецЕсли
	
	КонецЕсли;
	
КонецПроцедуры

// СЛУЖЕБНЫЕ ФУНКЦИЯ ВЫПОЛНЯЮЩИЕСЯ ПОСЛЕ ОБМЕНА
///////////////////////////////////////////////////////////////////////////////

//Процедура удаляет не нужные файлы после обмена данными
Процедура УдалитьФайлПослеОбменаДанными(СтруктураНастроекОбменаДанными)
	
	Если ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными)
		И (Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска) Тогда
		
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяВходящегоФайлаОбмена, СтруктураНастроекОбменаДанными, Истина, Ложь);
		
	КонецЕсли;
	
	// временный файл для чтения данных надо грохнуть вне зависимости от результатов чтения
	ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений, СтруктураНастроекОбменаДанными, , Ложь);
	
КонецПроцедуры

//Функция по структуре возвращает была ли произведена запись данных
Функция ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными)
	
	Возврат СтруктураНастроекОбменаДанными.РезультатЗаписиДанных 
		И Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
	
КонецФункции

//Функция по структуре возвращает было ли произведено чтение данных
Функция ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураНастроекОбменаДанными)
	
	Возврат СтруктураНастроекОбменаДанными.РезультатЧтенияДанных 
		И Не ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
	
КонецФункции


// функция определяет нужно опправлять ответный пакет или нет
Функция ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, НужноПроверитьЧерезПочту)
	
	МаксимальныйДопустимыйРазмерСообщения = ?(НужноПроверитьЧерезПочту, СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПакетаЧерезПочту, 
		СтруктураНастроекОбменаДанными.ДанныеНастройки.МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP);
	
	// нужно предварительно проанализировать что бы размер отправляемого письма не превосходил ограничений
	Если МаксимальныйДопустимыйРазмерСообщения = 0 Тогда
		Возврат Истина;
	КонецЕсли;
			
	// ограничение на размер ответного письма есть, нужно сравнить это значение с размером отправляемого файла
	ФайлДляОправки = Новый Файл(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
	Если ФайлДляОправки.Существует() Тогда
				
		РазмерОтправляемогоФайла = ФайлДляОправки.Размер();
				
		Если (РазмерОтправляемогоФайла / 1024) > МаксимальныйДопустимыйРазмерСообщения Тогда
					
			// файл превысил допустимый для отправки размер
			СообщитьИнформациюОбОшибкеОбмена("Ответный пакет не был отправлен. Размер исходящего пакета составил: " + Окр(РазмерОтправляемогоФайла / 1024, 2) + 
				" (КБт) что превышает допустимое ограничение " + МаксимальныйДопустимыйРазмерСообщения + " (КБт)", 
				СтруктураНастроекОбменаДанными, Истина, Истина);
				
			Возврат Ложь;	
					
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции


// Процедура выполняет действия после обмена через файловый ресурс
Процедура ДействияПослеОбменаЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными)
	
	#Если Клиент Тогда
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	#КонецЕсли
	
	// надо файл скопировать обратно из временного каталога в основной			
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		ИмяФайла = РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
						
		ИмяФайлаДляЗаписиВКаталогОбмена = СтруктураНастроекОбменаДанными.КаталогПроведенияОбменаДанными + "/" + ИмяФайла;
		
		// копируем файл
		УдачноеКопирование = ВыполнитьКопированиеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайлаДляЗаписиВКаталогОбмена, Истина, 
			СтруктураНастроекОбменаДанными, Истина);
		
		Если Не УдачноеКопирование Тогда
				
			СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
			
		Иначе
			
			// удаляем не нужный файл обмена
			ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными, , Истина);
						
		КонецЕсли;
		
	КонецЕсли;
	
	// удаляем файлы обмена
	УдалитьФайлПослеОбменаДанными(СтруктураНастроекОбменаДанными);
		
КонецПроцедуры			
			
// Процедура выполняет действия после обмена через FTP ресурс
Процедура ДействияПослеОбменаЧерезFTPРесурс(СтруктураНастроекОбменаДанными)
	
	Перем Соединение, ИмяFTPСервера, ИмяКаталогаСервера;
	
	#Если Клиент Тогда
	ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Окончание обмена данными", 5);
	#КонецЕсли
	
	Если ОпределитьБылаУдачнноПроизведенаЗаписьДанных(СтруктураНастроекОбменаДанными) Тогда
		
		НужноЗаписатьФайлНаFTP = ОпределитьНужноОптравлятьОтветныйПакет(СтруктураНастроекОбменаДанными, Ложь);
		
		Если НужноЗаписатьФайлНаFTP Тогда
		
			ПроверитьНастройкиПодключения = ПроверитьНастройкиFTPПодключения(СтруктураНастроекОбменаДанными.ДанныеНастройки, 
				СтруктураНастроекОбменаДанными.ДанныеПротокола,	СтруктураНастроекОбменаДанными.ВывестиИнформациюВОкноСообщений, 
				ИмяКаталогаСервера, ИмяFTPСервера, Соединение, СтруктураНастроекОбменаДанными);
				
			Если Не ПроверитьНастройкиПодключения Тогда
				Возврат;
			КонецЕсли;
			
			ИмяФайлаFTPЗаписи = ИмяКаталогаСервера + РаботаСФайлами.ПолучитьИмяФайлаИзПолногоПути(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений);
			
			Попытка
				
				Если ПроверитьНастройкиПодключения Тогда  
					
					ДобавитьИнформациюВПротокол("Копирование файла обмена на FTP ресурс", СтруктураНастроекОбменаДанными.ДанныеПротокола);
	                Соединение.Записать(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, ИмяФайлаFTPЗаписи);
					
				Иначе	
					СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;	
				КонецЕсли;
				
			Исключение
				
				СообщитьИнформациюОбОшибкеОбмена("Ошибка при копировании файла на FTP ресурс: " + ОписаниеОшибки(), СтруктураНастроекОбменаДанными, Истина, Истина);	
			
			КонецПопытки;
			
		КонецЕсли;	
		
		ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений, СтруктураНастроекОбменаДанными, , Истина);
	КонецЕсли;

	// удаляем файлы обмена
	УдалитьФайлПослеОбменаДанными(СтруктураНастроекОбменаДанными);
				
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////

// Процедура устанавливает необходимость выполнения обмена данными при первом запуске программы
Процедура УстановитьНеобходимостьВыполненияОбменаПриПервомЗапускеПрограммы(НастройкаОбмена, Знач ВыполнятьОбменПриПервомЗапуске) Экспорт
	
	Если НастройкаОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Установить(НастройкаОбмена);	
		
	НаборЗаписейПараметров.Прочитать();
	
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
	
	ЗаписьПараметров.НастройкаОбменаДанными = НастройкаОбмена;
	ЗаписьПараметров.ВыполнятьПриПервомВходеВСистему = ВыполнятьОбменПриПервомЗапуске;
	
	Попытка
		НаборЗаписейПараметров.Записать();
	Исключение
		
		СообщитьИнформациюОПростойОшибке("Ошибка при записи изменений в настройку обмена """ + НастройкаОбмена + """ : " + ОписаниеОшибки());
		
	КонецПопытки;	
		
КонецПроцедуры

// Процедура устанавливает необходимость выполнения обмена данными при первом запуске программы
Процедура УстановитьДоступностьКаталогаДляПроверки(НастройкаОбмена, Знач ДоступностьКаталога) Экспорт

	Попытка
		ЗаписатьПараметрыОбменаПоНастройке(НастройкаОбмена, , ДоступностьКаталога);
	Исключение
		СообщитьИнформациюОПростойОшибке("Ошибка при записи изменений в настройку обмена """ + НастройкаОбмена + """ : " + ОписаниеОшибки());		
	КонецПопытки;
	
КонецПроцедуры	

Процедура ЗаписатьПараметрыОбменаПоНастройке(СсылкаНаНастройкуОбмена,  
	ВыполнятьПриПервомВходеВСистему = Неопределено, ДоступностьКаталогаПроверки = Неопределено,
	ДатаПоследнегоФайлаОбмена = Неопределено) Экспорт
	
	// записываем в объект дату последнего обмена
	НаборЗаписейПараметров = РегистрыСведений.ПараметрыОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписейПараметров.Отбор.НастройкаОбменаДанными.Установить(СсылкаНаНастройкуОбмена);	
	НаборЗаписейПараметров.Прочитать();
	
	Если НаборЗаписейПараметров.Количество() = 0 Тогда
		ЗаписьПараметров = НаборЗаписейПараметров.Добавить();
	Иначе
		ЗаписьПараметров = НаборЗаписейПараметров[0];
	КонецЕсли;
	
	ЗаписьПараметров.НастройкаОбменаДанными = СсылкаНаНастройкуОбмена;
		
	Если ВыполнятьПриПервомВходеВСистему <> Неопределено Тогда
		ЗаписьПараметров.ВыполнятьПриПервомВходеВСистему = ВыполнятьПриПервомВходеВСистему;
	КонецЕсли;

	Если ДоступностьКаталогаПроверки <> Неопределено Тогда
		ЗаписьПараметров.ДоступностьКаталогаПроверки = ДоступностьКаталогаПроверки;
	КонецЕсли;
	
	Если ДатаПоследнегоФайлаОбмена <> Неопределено Тогда
		ЗаписьПараметров.ДатаПоследнегоФайлаОбмена = ДатаПоследнегоФайлаОбмена;
	КонецЕсли;
	
	НаборЗаписейПараметров.Записать();
		
КонецПроцедуры


// ФУНКЦИЯ ОБМЕНА ДАННЫМИ ПО НАСТРОЙКЕ

Процедура ДобавитьТехническуюИнформацияВСообщение(СокращенноеСообщение, СообщениеСТехИнформацией)
	
	Если СокращенноеСообщение = СообщениеСТехИнформацией Тогда
		Возврат;
	КонецЕсли;
	
	ЧислоСтрокВСокращенномСообщении = СтрЧислоСтрок(СокращенноеСообщение);
	ЧислоСтрокВРасширенномСообщении = СтрЧислоСтрок(СообщениеСТехИнформацией);
	
	ИтоговаяРасширеннаяСтрока = "";
	
	Для Счетчик = 1 По Мин(ЧислоСтрокВСокращенномСообщении, ЧислоСтрокВРасширенномСообщении) Цикл
		
    	ТекСтрокаСокр = СтрПолучитьСтроку(СокращенноеСообщение, Счетчик);
		ТекСтрокаРасшир = СтрПолучитьСтроку(СообщениеСТехИнформацией, Счетчик);
		
		Если ТекСтрокаСокр <> ТекСтрокаРасшир Тогда
			
			ИтоговаяРасширеннаяСтрока = ИтоговаяРасширеннаяСтрока + Символы.ПС + ТекСтрокаРасшир;
			
		КонецЕсли;
   		
	КонецЦикла;
	
	Для Счетчик = ЧислоСтрокВСокращенномСообщении + 1 По ЧислоСтрокВРасширенномСообщении Цикл
		
		ТекСтрокаРасшир = СтрПолучитьСтроку(СообщениеСТехИнформацией, Счетчик);
		ИтоговаяРасширеннаяСтрока = ИтоговаяРасширеннаяСтрока + Символы.ПС + ТекСтрокаРасшир;
		
	КонецЦикла;
	
	СокращенноеСообщение = СокращенноеСообщение + Символы.ПС + Символы.ПС + "Техническая информация:" + ИтоговаяРасширеннаяСтрока;	
	
КонецПроцедуры

// регистрирует что обмен был произведен и фиксирует информацию в протоколе
Процедура ЗафиксироватьЗавершениеОбмена(СтруктураДанныхНастройкиОбмена, Знач СтрокаСообщенияОбОшибке = "", 
	Знач НеВыводитьИнформациюПользователю = Ложь, ОбработкаОбменаПриемника = Неопределено)
	
	Если Не ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
		
		Если НеВыводитьИнформациюПользователю Тогда
			ДобавитьИнформациюВПротокол(СтрокаСообщенияОбОшибке, СтруктураДанныхНастройкиОбмена.ДанныеПротокола, Ложь, Истина);
		Иначе
			СообщитьИнформациюОбОшибкеОбмена(СтрокаСообщенияОбОшибке, СтруктураДанныхНастройкиОбмена);
		КонецЕсли;
		
	КонецЕсли;	
	
	ИтоговыйКомментарийПриВыгрузкеДанных = ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(СтрокаСообщенияОбОшибке));
	ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста = СокрЛП(СтрокаСообщенияОбОшибке);
	
	ДатаПоследнегоОбмена = ТекущаяДата();
	СтруктураДанныхНастройкиОбмена.Вставить("ДатаПоследнегоОбмена", ДатаПоследнегоОбмена);
	СсылкаНаНастройкуОбмена = СтруктураДанныхНастройкиОбмена.ДанныеНастройки.Ссылка;
		
	НаборЗаписейИстории = РегистрыСведений.ИсторияОбменаДанными.СоздатьНаборЗаписей();
	НаборЗаписейИстории.Отбор.УзелИнформационнойБазы.Установить(СтруктураДанныхНастройкиОбмена.ДанныеНастройки.УзелИнформационнойБазы);
	НаборЗаписейИстории.Отбор.Период.Установить(ДатаПоследнегоОбмена);
	
	СтрокаИстории = НаборЗаписейИстории.Добавить();	
	
	СтрокаИстории.УзелИнформационнойБазы = СтруктураДанныхНастройкиОбмена.ДанныеНастройки.УзелИнформационнойБазы;
	СтрокаИстории.Период = ДатаПоследнегоОбмена;
		
	// дата и результат последней выгрузки и загрузки
	Если ЗначениеЗаполнено(СтруктураДанныхНастройкиОбмена.ДатаПоследнейЗагрузки)
		И НЕ ПустаяСтрока(СтруктураДанныхНастройкиОбмена.ИмяФайлаЧтенияИзменений) Тогда
						
		СтрокаИстории.ДатаПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.ДатаПоследнейЗагрузки;	
		СтрокаИстории.ДатаНачалаПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.ДатаНачалаЗагрузки;
		СтрокаИстории.РезультатПоследнейЗагрузки = СтруктураДанныхНастройкиОбмена.РезультатЧтенияДанных;
		
		РезультатОтложенныхДвиженийДокументов = Неопределено;
		СтруктураДанныхНастройкиОбмена.Свойство("РезультатОтложенныхДвиженийДокументов", РезультатОтложенныхДвиженийДокументов);
		
		СтрокаИстории.РезультатОтложенныхДвиженийДокументов = РезультатОтложенныхДвиженийДокументов;
		
		ОбъектовФонОбмена = Неопределено;
		Если СтруктураДанныхНастройкиОбмена.Свойство("ПолученоОбъектовФоновогоОбмена", ОбъектовФонОбмена) Тогда
			
			СтрокаИстории.НаличиеДанныхФоновойЗагрузки = ОбъектовФонОбмена > 0;
			
		КонецЕсли;		
		
	Иначе
		
		СтрокаИстории.РезультатОтложенныхДвиженийДокументов = Неопределено;	
		
	КонецЕсли;
	
	КомментарийПриЗагрузкеДанных = "";
	Если СтруктураДанныхНастройкиОбмена.Свойство("КомментарийПриЗагрузкеДанных", КомментарийПриЗагрузкеДанных) Тогда
		
		СтрокаИстории.КомментарийКЗагрузкеДанных = ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(КомментарийПриЗагрузкеДанных));
		
		Если Не ПустаяСтрока(СтрокаИстории.КомментарийКЗагрузкеДанных) 
			И Не ПустаяСтрока(КомментарийПриЗагрузкеДанных) Тогда
			
			ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКЗагрузкеДанных, КомментарийПриЗагрузкеДанных);
							
		КонецЕсли;
		
		КоличествоЗагруженныхОбъектов = 0;
		Если ПустаяСтрока(СтрокаИстории.КомментарийКЗагрузкеДанных)
			И СтруктураДанныхНастройкиОбмена.Свойство("КоличествоЗагруженныхОбъектов", КоличествоЗагруженныхОбъектов) Тогда
			
			СтрокаИстории.КомментарийКЗагрузкеДанных = "Успешно загружено объектов: " + Строка(КоличествоЗагруженныхОбъектов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанныхНастройкиОбмена.ДатаПоследнейВыгрузки)
		И НЕ ПустаяСтрока(СтруктураДанныхНастройкиОбмена.ИмяФайлаЗаписиИзменений) Тогда
						
		СтрокаИстории.ДатаПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.ДатаПоследнейВыгрузки;	
		СтрокаИстории.ДатаНачалаПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.ДатаНачалаВыгрузки;
		СтрокаИстории.РезультатПоследнейВыгрузки = СтруктураДанныхНастройкиОбмена.РезультатЗаписиДанных;
				
	КонецЕсли;
	
	КомментарийПриВыгрузкеДанных = "";
	Если СтруктураДанныхНастройкиОбмена.Свойство("КомментарийПриВыгрузкеДанных", КомментарийПриВыгрузкеДанных) Тогда
		
		ИтоговыйКомментарийПриВыгрузкеДанных = СокрЛП(ИтоговыйКомментарийПриВыгрузкеДанных + Символы.ПС + ОбщегоНазначения.СформироватьТекстСообщения(СокрЛП(КомментарийПриВыгрузкеДанных)));
		ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста = СокрЛП(ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста + Символы.ПС + СокрЛП(КомментарийПриВыгрузкеДанных));
		
		КоличествоВыгруженныхОбъектов = 0;
		Если ПустаяСтрока(ИтоговыйКомментарийПриВыгрузкеДанных)
			И СтруктураДанныхНастройкиОбмена.Свойство("КоличествоВыгруженныхОбъектов", КоличествоВыгруженныхОбъектов) Тогда
			
			Если КоличествоВыгруженныхОбъектов <> 0 Тогда
				ИтоговыйКомментарийПриВыгрузкеДанных = "Успешно выгружено объектов: " + Строка(КоличествоВыгруженныхОбъектов);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	СтрокаИстории.КомментарийКВыгрузкеДанных = ИтоговыйКомментарийПриВыгрузкеДанных;
	
	Если Не ПустаяСтрока(СтрокаИстории.КомментарийКВыгрузкеДанных) 
		И Не ПустаяСтрока(ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста) Тогда
				
		ДобавитьТехническуюИнформацияВСообщение(СтрокаИстории.КомментарийКВыгрузкеДанных, ИтоговыйКомнентарийПриВыгрузкеДляТехническогоСпециалиста);
				
	КонецЕсли;
	
	КомментарийПриВыполненииОтложенныхДвижений = "";
	КоличествоВыполненныхОтложенныхДвиженийДокументов = 0;
	Если СтруктураДанныхНастройкиОбмена.Свойство("КомментарийПриВыполненииОтложенныхДвижений", КомментарийПриВыполненииОтложенныхДвижений) Тогда
			
		СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов = СокрЛП(КомментарийПриВыполненииОтложенныхДвижений);
		
	ИначеЕсли СтруктураДанныхНастройкиОбмена.Свойство("КоличествоВыполненныхОтложенныхДвиженийДокументов", КоличествоВыполненныхОтложенныхДвиженийДокументов) Тогда
		
		Если КоличествоВыполненныхОтложенныхДвиженийДокументов <> 0 Тогда
			
			СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов = "Успешно выполнено движения для документов: " + Строка(КоличествоВыполненныхОтложенныхДвиженийДокументов);	
			
		КонецЕсли;		
		
	КонецЕсли;
			
	Попытка
		
		УдачноеЧтение = ОпределитьБылоУдачноПроизведеноЧтениеДанных(СтруктураДанныхНастройкиОбмена);
		
		Если УдачноеЧтение Тогда
			ДатаПоследнегоФайлаОбмена = СтруктураДанныхНастройкиОбмена.ДатаПоследнегоФайлаОбмена;
		Иначе
			ДатаПоследнегоФайлаОбмена = Неопределено;
		КонецЕсли;
		
		СсылкаНаНастройкуАвтоОбмена = Неопределено;
		Если СтруктураДанныхНастройкиОбмена.ДанныеНастройкиАвтообмена <> Неопределено Тогда
			
			СсылкаНаНастройкуАвтоОбмена = СтруктураДанныхНастройкиОбмена.ДанныеНастройкиАвтообмена.Ссылка;
			
			ЗаписатьПараметрыОбменаПоНастройке(СсылкаНаНастройкуАвтоОбмена, Ложь, 
				СтруктураДанныхНастройкиОбмена.ДоступностьКаталогаПроверки, ДатаПоследнегоФайлаОбмена);
			
		КонецЕсли;		
		
		НаборЗаписейИстории.Записать();
		
		Если ОбработкаОбменаПриемника <> Неопределено Тогда
			
			СтруктураИстории = Новый Структура();
			
			СтрокаИстории = НаборЗаписейИстории[0];
			
			СтруктураИстории.Вставить("Период", СтрокаИстории.Период);
		    СтруктураИстории.Вставить("ДатаПоследнейЗагрузки", СтрокаИстории.ДатаПоследнейЗагрузки);
			СтруктураИстории.Вставить("ДатаПоследнейВыгрузки", СтрокаИстории.ДатаПоследнейВыгрузки);
			СтруктураИстории.Вставить("РезультатПоследнейЗагрузки", СтрокаИстории.РезультатПоследнейЗагрузки);
			СтруктураИстории.Вставить("РезультатПоследнейВыгрузки", СтрокаИстории.РезультатПоследнейВыгрузки);
			СтруктураИстории.Вставить("РезультатОтложенныхДвиженийДокументов", СтрокаИстории.РезультатОтложенныхДвиженийДокументов);
			СтруктураИстории.Вставить("НаличиеДанныхФоновойЗагрузки", СтрокаИстории.НаличиеДанныхФоновойЗагрузки);
			СтруктураИстории.Вставить("КомментарийКЗагрузкеДанных", СтрокаИстории.КомментарийКЗагрузкеДанных);
			СтруктураИстории.Вставить("КомментарийКВыгрузкеДанных", СтрокаИстории.КомментарийКВыгрузкеДанных);
			СтруктураИстории.Вставить("КомментарийКОтложенномуДвижениюДокументов", СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов);
			СтруктураИстории.Вставить("ДатаНачалаПоследнейЗагрузки", СтрокаИстории.ДатаНачалаПоследнейЗагрузки);
			СтруктураИстории.Вставить("ДатаНачалаПоследнейВыгрузки", СтрокаИстории.ДатаНачалаПоследнейВыгрузки);
			
			ОбработкаОбменаПриемника.ЗаписатьДанныеВПротоколОбменаЧерезCOMСоединение(СтруктураИстории);
			
		КонецЕсли;
		
	Исключение
		
		Если НеВыводитьИнформациюПользователю Тогда
			ДобавитьИнформациюВПротокол("Ошибка при записи изменений в настройку обмена """ + СсылкаНаНастройкуОбмена + """ : " + ОписаниеОшибки(), 
				СтруктураДанныхНастройкиОбмена.ДанныеПротокола, Ложь, Истина);	
		Иначе	
			СообщитьИнформациюОбОшибкеОбмена("Ошибка при записи изменений в настройку обмена """ + СсылкаНаНастройкуОбмена + """ : " + ОписаниеОшибки(), 
				СтруктураДанныхНастройкиОбмена, Истина, Истина);
		КонецЕсли;	
		
	КонецПопытки;	
	
	// надо изменения отразить в обработке автоматического поиска
	Если СтруктураДанныхНастройкиОбмена.ОбработкаАвтоОбменДанными <> Неопределено
		И  СтруктураДанныхНастройкиОбмена.ДанныеНастройкиАвтообмена <> Неопределено Тогда
		
		СтруктураДанныхНастройкиОбмена.ОбработкаАвтоОбменДанными.ОбновитьИнформациюОНастройкахОбмена(СтруктураДанныхНастройкиОбмена.ДанныеНастройкиАвтообмена.Ссылка, 
			СтруктураДанныхНастройкиОбмена.ДоступностьКаталогаПроверки);
			
	КонецЕсли;
	
	ЗаписатьДанныеПротокола(СтруктураДанныхНастройкиОбмена.ДанныеНастройки, СтруктураДанныхНастройкиОбмена.ДанныеПротокола, НЕ ПустаяСтрока(СтрокаСообщенияОбОшибке));
	
	#Если Клиент Тогда
	Если СтруктураДанныхНастройкиОбмена.РучнойРежимЗапуска
		И СтруктураДанныхНастройкиОбмена.ДанныеНастройкиАвтообмена = Неопределено	Тогда
						
		// для On Line обменов показываем отдельную форму завершения обмена
		ФормаПоказа = ПолучитьОбщуюФорму("ФормаРезультатOnLineОбмена");
		ФормаПоказа.НаборЗаписейИстории = НаборЗаписейИстории;
		ФормаПоказа.Открыть();
		
	КонецЕсли;
	#КонецЕсли
    	
КонецПроцедуры

// Процедура корректирует паузу перед запуском регламентного задания
Процедура ИзменитьВремяПаузыПовтораРегламентногоЗадания(СтруктураНастроекОбменаДанными, ДатаНачалаВыполненияОбменов)

	Если СтруктураНастроекОбменаДанными = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// изменяем время только при автообмене
	Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
		ИЛИ НЕ СтруктураНастроекОбменаДанными.ДинамическиИзменятьИнтервалМеждуОбменами Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ТекущееРегламентноеЗадание = СтруктураНастроекОбменаДанными.ДанныеНастройкиАвтообмена.НайтиРегламентноеЗаданиеПоНастройке();
	Исключение
		Возврат;
	КонецПопытки;

	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеРегламентногоЗадания = ТекущееРегламентноеЗадание.Расписание;
	
	Если РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня = 0 Тогда
		Возврат;
	КонецЕсли;

	ПродолжительностьПоследнегоОбмена = ТекущаяДата() - ДатаНачалаВыполненияОбменов;
	
	НовоеЗначениеПаузыПовтора = ПродолжительностьПоследнегоОбмена + Окр(РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня / 2, 0);
	
	// органичим паузу повтора... что бы не было 100 кратного превышения повтора в течении дня
	НовоеЗначениеПаузыПовтора = Мин(НовоеЗначениеПаузыПовтора, РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня * 100);
	
	РасписаниеРегламентногоЗадания.ПаузаПовтора = НовоеЗначениеПаузыПовтора;
	
	Попытка
		ТекущееРегламентноеЗадание.Записать();
	Исключение
	КонецПопытки;

КонецПроцедуры

// Процедура возвращает параметры для обмена
Процедура ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене)
	
	// получаем узел информационной базы плана обмена
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы);
	МетаданныеУзлаОбмена = СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Метаданные();
	
	СтрокаОписанияЗапуска = ?(СтруктураНастроекОбменаДанными.РучнойРежимЗапуска, "в интерактивном режиме", "в автоматическом режиме");
	СтрокаИнформацияОбОбмене = "обмена данными " + СтрокаОписанияЗапуска + " для плана обмена """ + ИмяПланаОбмена + """ узла """ + СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Наименование + """";
	
КонецПроцедуры

//Функция проводит необходимые действия перед началом обмена данными
// возвращает нужно ли производить обмен или нет
Функция ВыполнитьДействияПередНачаломОбменаДанными(СтруктураНастроекОбменаДанными)
		
	СообщитьИнформациюОбОбмене(Символы.ПС, СтруктураНастроекОбменаДанными);
			
	// информация об обмене данными
	Если СтруктураНастроекОбменаДанными.РучнойРежимЗапуска Тогда
			
		СтрокаЗаписиВЛогПриНачалеОбмена = "Начат обмен данными";
			
	Иначе
			
		Если НЕ СтруктураНастроекОбменаДанными.ОбменПриВходеВПрограмму Тогда
			СтрокаЗаписиВЛогПриНачалеОбмена = "Начат автоматический обмен данными";
		Иначе
			СтрокаЗаписиВЛогПриНачалеОбмена = "Начат автоматический обмен данными при первом входе в программу";
		КонецЕсли;
			
	КонецЕсли;	
		
	СтрокаЗаписиВЛогПриНачалеОбмена = СтрокаЗаписиВЛогПриНачалеОбмена + " по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки) + """ (" + Формат(ТекущаяДата(), "ДЛФ=В") + ").";	
		
	СообщитьИнформациюОбОбмене(СтрокаЗаписиВЛогПриНачалеОбмена, СтруктураНастроекОбменаДанными);
			
	Если НЕ ЗначениеЗаполнено(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы) Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "В настройке обмена не задан узел информационной базы с которым нужно производить обмен информацией! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
		
	Если НЕ СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных 
		И НЕ СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "В настройке обмена не взведены флаги загрузки и выгрузки данных! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
	
	МетаданныеУзлаОбмена = Неопределено;
	СтрокаИнформацияОбОбмене = "";
	ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене);
	
	СтруктураНастроекОбменаДанными.Вставить("ТекущийУзелПланаОбмена", ПланыОбмена[МетаданныеУзлаОбмена.Имя].ЭтотУзел());
		
	// сами с собой не обмениваемся
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы = СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена Тогда
			
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Нельзя организовать обмен данными с текущим узлом информационной базы! Обмен отменен.");
		Возврат Ложь;
			
	КонецЕсли;
	
	// у узлов участвующих в обмене должен быть не пустой код
	Если ПустаяСтрока(Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы.Код)) 
		ИЛИ ПустаяСтрока(Строка(СтруктураНастроекОбменаДанными.ТекущийУзелПланаОбмена.Код)) Тогда
		
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, "Нельзя организовать обмен данными когда один из узлов обмена имеет пустой код! Обмен отменен.");
		Возврат Ложь;
		
	КонецЕсли;
	
	// записываем в журнал данные о начале обмена данными
	ЗаписьЖурналаРегистрации("Обмен данными.Автоматический", УровеньЖурналаРегистрации.Информация, 
		МетаданныеУзлаОбмена, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, "Начало " + СтрокаИнформацияОбОбмене);
	
	Возврат Истина;
	
КонецФункции

//функция выполняется после завершения обменом данными
Функция ВыполнитьДействияПослеЗавершенияОбменаДанными(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника = Неопределено)
	
	МетаданныеУзлаОбмена = Неопределено;
	СтрокаИнформацияОбОбмене = "";
	ПолучитьПараметрыОбменаДанными(СтруктураНастроекОбменаДанными, МетаданныеУзлаОбмена, СтрокаИнформацияОбОбмене);
	
	// отмечаем то что обмен произведен
	
	СообщитьИнформациюОбОбмене("Обмен данными по настройке """ + Строка(СтруктураНастроекОбменаДанными.ДанныеНастройки) + """ завершен (" + Формат(ТекущаяДата(), "ДЛФ=В") + ").", 
		СтруктураНастроекОбменаДанными);
	
	ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, , , ОбработкаОбменаПриемника);
	
	#Если Клиент Тогда
	Попытка
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Обмен данными завершен", 5);	
	Исключение
	КонецПопытки;
	#КонецЕсли
		
	// записываем в журнал данные об окончании обмена данными
	ЗаписьЖурналаРегистрации("Обмен данными.Автоматический", УровеньЖурналаРегистрации.Информация, 
		МетаданныеУзлаОбмена, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы, "Окончание " + СтрокаИнформацияОбОбмене);	
			
	ЗаписатьДанныеПротокола(СтруктураНастроекОбменаДанными.ДанныеНастройки, СтруктураНастроекОбменаДанными.ДанныеПротокола, Ложь);
	
	#Если Клиент Тогда
	ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьОбычныйОбменДанными(СтруктураНастроекОбменаДанными)
	
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
				
		СтруктураНастроекОбменаДанными.Вставить("КаталогПроведенияОбменаДанными", "");
		СтруктураНастроекОбменаДанными.Вставить("ИмяВходящегоФайлаОбмена", "");
		ПодготовитьОбменЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными);
		
	ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		СтруктураНастроекОбменаДанными.Вставить("ИмяВходящегоФайлаОбмена", "");
		ПодготовитьОбменЧерезFTPРесурс(СтруктураНастроекОбменаДанными);
		
	КонецЕсли;
	
	// файл для записи изменений
	Если СтруктураНастроекОбменаДанными.НеобходимостьЗаписиОтветногоФайлаОбмена Тогда 
		
		СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений = ВерутьИмяВременногоФайлаЗаписиДанных(СтруктураНастроекОбменаДанными);
		
	КонецЕсли;
	
	// если ничего делать не надо, то выходим вообще
	Если ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений)
		И ПустаяСтрока(СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений) Тогда
		
		СообщитьИнформациюОбОбмене("Ни загрузка ни выгрузка данных не были произведены", СтруктураНастроекОбменаДанными);
		
		
		
		Возврат;
		
	КонецЕсли;
				
	// САМ ОБМЕН ДАННЫМИ
	ВыполнитьЗагрузкуДанныхИзФайлаОбмена(СтруктураНастроекОбменаДанными);
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЗаписьТолькоПриУспешномЧтении Тогда
		
		СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
			И СтруктураНастроекОбменаДанными.ПроизводитьЗаписьТолькоПриУспешномЧтении
			И СтруктураНастроекОбменаДанными.РезультатЧтенияДанных;
			
	КонецЕсли;
	
	ВыполнитьВыгрузкуДанныхВФайлОбмена(СтруктураНастроекОбменаДанными);
							
	// ДЕЙСТВИЯ ПОСЛЕ ОБМЕНА
	Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
			
		ДействияПослеОбменаЧерезФайловыйРесурс(СтруктураНастроекОбменаДанными);
				
	ИначеЕсли СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
			
		ДействияПослеОбменаЧерезFTPРесурс(СтруктураНастроекОбменаДанными);
			
	КонецЕсли;
	
	Если Не СтруктураНастроекОбменаДанными.РучнойРежимЗапуска
		И СтруктураНастроекОбменаДанными.ДоступностьФайла = Истина Тогда
		
		// нет ли обновления конфигурации по РИБ
		КонфигурацияПриОбменеРИБИзменена = Ложь;
		СтруктураНастроекОбменаДанными.Свойство("КонфигурацияПриОбменеРИБИзменена", КонфигурацияПриОбменеРИБИзменена);
		
		Если КонфигурацияПриОбменеРИБИзменена = Неопределено
			ИЛИ КонфигурацияПриОбменеРИБИзменена = Ложь Тогда
			
			ВыполнитьУдалениеФайла(СтруктураНастроекОбменаДанными.ВыполнятьОбменПриПоявленииФайла, СтруктураНастроекОбменаДанными, , Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбменаДаннымиXML, ДанныеНастройки) Экспорт
	
	ОбработкаОбменаДаннымиXML.ТипИнформационнойБазыДляПодключения = ДанныеНастройки.ТипИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.КаталогИнформационнойБазыДляПодключения = ДанныеНастройки.КаталогИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ИмяСервераИнформационнойБазыДляПодключения = ДанныеНастройки.ИмяСервераИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ИмяИнформационнойБазыНаСервереДляПодключения = ДанныеНастройки.ИмяИнформационнойБазыНаСервереДляПодключения;
	ОбработкаОбменаДаннымиXML.АутентификацияWindowsИнформационнойБазыДляПодключения = ДанныеНастройки.АутентификацияWindowsИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ПользовательИнформационнойБазыДляПодключения = ДанныеНастройки.ПользовательИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ПарольИнформационнойБазыДляПодключения = ДанныеНастройки.ПарольИнформационнойБазыДляПодключения;
	ОбработкаОбменаДаннымиXML.ВерсияПлатформыИнформационнойБазыДляПодключения = ДанныеНастройки.ВерсияПлатформыИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Функция СформироватьЕдиныйКоментарий(ОбработкаОбмена, ИнформацияОбОшибкеВыполнения)
	
	Если ОбработкаОбмена = Неопределено Тогда
		Возврат ИнформацияОбОшибкеВыполнения;
	КонецЕсли;
	
	Комментарий = СокрЛП(ОбработкаОбмена.КомментарийПриВыгрузкеДанных + Символы.ПС + ОбработкаОбмена.КомментарийПриЗагрузкеДанных);	
	
	Если ОбработкаОбмена.мОбработкаДляЗагрузкиДанных <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриВыгрузкеДанных)
			ИЛИ ЗначениеЗаполнено(ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных) Тогда
			
			Комментарий = Комментарий + Символы.ПС + "Сообщение информационной базы с которой организован обмен:" + Символы.ПС +
				СокрЛП(ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриВыгрузкеДанных + Символы.ПС + ОбработкаОбмена.мОбработкаДляЗагрузкиДанных.КомментарийПриЗагрузкеДанных);
				
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Комментарий) Тогда
		Возврат ИнформацияОбОшибкеВыполнения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИнформацияОбОшибкеВыполнения) Тогда
		Возврат Комментарий;
	КонецЕсли;
	
	Возврат Комментарий + Символы.ПС + "ОШИБКА:" + Символы.ПС + ИнформацияОбОшибкеВыполнения;
	
КонецФункции

Процедура ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, Комментарий, ЭтоВыгрузкаДанных = Истина)
	
	Если СтруктураНастроекОбменаДанными = Неопределено
		ИЛИ ПустаяСтрока(Комментарий) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийКоммнетарий = "";
	Если ЭтоВыгрузкаДанных Тогда
		СтруктураНастроекОбменаДанными.Свойство("КомментарийПриВыгрузкеДанных", ТекущийКоммнетарий);
	Иначе
		СтруктураНастроекОбменаДанными.Свойство("КомментарийПриЗагрузкеДанных", ТекущийКоммнетарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийКоммнетарий) Тогда
		ТекущийКоммнетарий = ТекущийКоммнетарий + Символы.ПС + Комментарий;
	Иначе
		ТекущийКоммнетарий = Комментарий;
	КонецЕсли;
	
	Если ЭтоВыгрузкаДанных Тогда
		СтруктураНастроекОбменаДанными.Вставить("КомментарийПриВыгрузкеДанных", ТекущийКоммнетарий);
	Иначе
		СтруктураНастроекОбменаДанными.Вставить("КомментарийПриЗагрузкеДанных", ТекущийКоммнетарий);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьУзелОбменаИнформационнойБазыПриемника(ОбработкаОбменаПриемника, УзелОбмена)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПланаОбмена = ПолучитьИмяПланаОбмена(УзелОбмена);
	КодУзла = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().Код;
	
	Попытка
		
		Узел = ОбработкаОбменаПриемника.ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодУзла);
		Возврат Узел;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ВыполнитьОбменДаннымиЧерезComСоединение(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника = Неопределено)
	
	#Если Клиент Тогда
	ИнициализироватьФормуХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед обменом данными", 5);
	#КонецЕсли
	
	СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов = "";
	СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике = "";
	
	РезультатВыполненияОтложенныхДвижений = Неопределено;
	РезультатВыполненияОтложенныхДвиженийВПриемнике = Неопределено;
	
	СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = Ложь;
	СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = Ложь;
	
	ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
	ОбработкаОбменаДаннымиXML.ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных = СтруктураНастроекОбменаДанными.ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных;
	
	// устанавливаем соm-соединение
	УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными.ДанныеНастройки);
	
	СтрокаСообщенияОбОшибке = "";
	ОбработкаОбменаДаннымиXML.мОбработкаДляЗагрузкиДанных = Неопределено;
	ОбъектПодключения = Неопределено;
	ОбработкаОбменаДаннымиXML.мОбработкаДляЗагрузкиДанных = ОбработкаОбменаДаннымиXML.ВыполнитьПодключениеКИБПриемнику(ОбработкаОбменаДаннымиXML.мОбработкаДляЗагрузкиДанных, СтрокаСообщенияОбОшибке, ОбъектПодключения);
	
	Если Не ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
		
		КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЧтениеДанных Тогда
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Подготовка перед загрузкой данных", 5);
		#КонецЕсли
		
		// выгрузка из приемника в текущую ИБ
		ОбработкаОбменаПриемника = ОбработкаОбменаДаннымиXML.мОбработкаДляЗагрузкиДанных;
		
		Если ОбработкаОбменаПриемника = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаОбменаПриемника.УзелДляФоновогоОбмена = ОпределитьУзелОбменаИнформационнойБазыПриемника(ОбъектПодключения, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелФоновогоОбмена);
		ОбработкаОбменаПриемника.УзелДляОбмена = ОпределитьУзелОбменаИнформационнойБазыПриемника(ОбъектПодключения, СтруктураНастроекОбменаДанными.ДанныеНастройки.УзелИнформационнойБазы);
						
		УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаПриемника, СтруктураНастроекОбменаДанными, Ложь);
		
		ОбработкаОбменаПриемника.мОбработкаДляЗагрузкиДанных = ОбработкаОбменаДаннымиXML;
		
		СтрокаСообщенияОбОшибке = "";
		
		РезультатПодключения = ОбработкаОбменаПриемника.ВыполнитьПодключениеКИБПриемнику(ОбработкаОбменаПриемника.мОбработкаДляЗагрузкиДанных, СтрокаСообщенияОбОшибке);
		
		Если РезультатПодключения = Неопределено Тогда
			
			ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, СтрокаСообщенияОбОшибке, Ложь);
			Возврат;
			
		КонецЕсли;
		
		ОбработкаОбменаПриемника.НепосредственноеЧтениеВИБПриемнике = Истина;
		ОбработкаОбменаПриемника.ДописыватьДанныеВПротоколОбмена = Истина;
		
		СтруктураНастроекОбменаДанными.ДатаНачалаЗагрузки = ТекущаяДата();
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Загрузка данных из информационной базы - источника", 5);
		#КонецЕсли
		
		СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов = "";
		УспешнаяВыгрузкаИзПриемника = ОбработкаОбменаПриемника.ВыполнитьВыгрузку(Истина, СтрокаСообщенияОбОшибке, 
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов, 
			СтруктураНастроекОбменаДанными.ДанныеНастройки.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
		
		Если Не ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов) Тогда
		
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов = "Отложенные движения документов в этой информационной базе:" + Символы.ПС + СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов;
			
		КонецЕсли;
		
		РезультатВыполненияОтложенныхДвижений = ОбработкаОбменаДаннымиXML.РезультатВыполненияОтложенныхДвижений;
		
		КомментарийПриЗагрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриЗагрузкеДанных, Ложь);
		СтруктураНастроекОбменаДанными.Вставить("ПолученоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПолученоОбъектовФоновогоОбмена);
		СтруктураНастроекОбменаДанными.Вставить("КоличествоВыполненныхОтложенныхДвиженийДокументов", ОбработкаОбменаДаннымиXML.мКоличествоВыполненныхОтложенныхДвиженийДокументов);
		СтруктураНастроекОбменаДанными.Вставить("КоличествоЗагруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикЗагруженныхОбъектов);
								
		СтруктураНастроекОбменаДанными.ДатаПоследнейЗагрузки = ТекущаяДата();
		
		СтруктураНастроекОбменаДанными.РезультатЧтенияДанных = УспешнаяВыгрузкаИзПриемника;
						
	КонецЕсли;
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЗаписьТолькоПриУспешномЧтении Тогда
		
		СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных = СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных
			И СтруктураНастроекОбменаДанными.ПроизводитьЗаписьТолькоПриУспешномЧтении
			И СтруктураНастроекОбменаДанными.РезультатЧтенияДанных;
			
	КонецЕсли;	
	
	Если СтруктураНастроекОбменаДанными.ПроизводитьЗаписьДанных Тогда
		
		СтруктураНастроекОбменаДанными.ДатаНачалаВыгрузки = ТекущаяДата();
		
		УстановитьПараметрыДляВыгрузкиДанныхXML(ОбработкаОбменаДаннымиXML, СтруктураНастроекОбменаДанными);
		
		ОбработкаОбменаДаннымиXML.НепосредственноеЧтениеВИБПриемнике = Истина;
		
		#Если Клиент Тогда
		ОтобразитьНовоеСообщениеВФормеХодаОбработки(СтруктураНастроекОбменаДанными, "Выгрузка данных в информационную базу - приемник", 40);
		#КонецЕсли
		
		// выгрузка из текущей ИБ в приемник
		СтрокаСообщенияОбОшибке = "";
		УспешнаяВыгрузкаИзИсточника = ОбработкаОбменаДаннымиXML.ВыполнитьВыгрузку(Истина, СтрокаСообщенияОбОшибке, 
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике, 
			СтруктураНастроекОбменаДанными.ДанныеНастройки.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, 
			СтруктураНастроекОбменаДанными.ДанныеНастройки.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
		
		Если Не ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике) Тогда
			
			РезультатВыполненияОтложенныхДвиженийВПриемнике = Ложь;
			
			Если СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипИнформационнойБазыДляПодключения = Истина Тогда
				
				// приемник - файловая ИБ
				СтрокаПараметровПодключенияКПриемнику = "Каталог информационной базы: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.КаталогИнформационнойБазыДляПодключения;
				
			Иначе
				
				// приемник - клиент серверная ИБ
				СтрокаПараметровПодключенияКПриемнику = "Имя сервера: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.ИмяСервераИнформационнойБазыДляПодключения + 
					", Имя информационной базы: " + СтруктураНастроекОбменаДанными.ДанныеНастройки.ИмяИнформационнойБазыНаСервереДляПодключения;
				
			КонецЕсли;
			
			
			СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике = "Отложенные движения документов в информационной базе ПРИЕМНИКЕ:" + Символы.ПС + 
				"Подключение к информационной базе ПРИЕМНИКА: " + СтрокаПараметровПодключенияКПриемнику + Символы.ПС + 
				СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике;
			
		КонецЕсли;
		
		КомментарийПриВыгрузкеДанных = СформироватьЕдиныйКоментарий(ОбработкаОбменаДаннымиXML, СтрокаСообщенияОбОшибке);
		ДополнитьКомментарийДляОперации(СтруктураНастроекОбменаДанными, КомментарийПриВыгрузкеДанных, Истина);
			
		СтруктураНастроекОбменаДанными.Вставить("ПереданоОбъектовФоновогоОбмена", ОбработкаОбменаДаннымиXML.ПереданоОбъектовФоновогоОбмена);
		СтруктураНастроекОбменаДанными.Вставить("КоличествоВыгруженныхОбъектов", ОбработкаОбменаДаннымиXML.мСчетчикВыгруженныхОбъектов);
		
		СтруктураНастроекОбменаДанными.ДатаПоследнейВыгрузки = ТекущаяДата();
		
		СтруктураНастроекОбменаДанными.ИмяФайлаЗаписиИзменений = "1";
		СтруктураНастроекОбменаДанными.РезультатЗаписиДанных = УспешнаяВыгрузкаИзИсточника;
		
	КонецЕсли;
	
	
	СтруктураНастроекОбменаДанными.ИмяФайлаЧтенияИзменений = "1";
	
	Если ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике) Тогда
		ИтоговыйКомментарийПриОтложенномДвиженииДокументов = СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов;
	ИначеЕсли ПустаяСтрока(СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов) Тогда
		ИтоговыйКомментарийПриОтложенномДвиженииДокументов = СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике;
	Иначе
		ИтоговыйКомментарийПриОтложенномДвиженииДокументов = СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументаВПриемнике + Символы.ПС + СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокументов;
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.Вставить("КомментарийПриВыполненииОтложенныхДвижений", ИтоговыйКомментарийПриОтложенномДвиженииДокументов);
	
	ИтоговыйРезультатОтложенныхДвижений = Неопределено;
	Если РезультатВыполненияОтложенныхДвиженийВПриемнике = Неопределено Тогда
		ИтоговыйРезультатОтложенныхДвижений = РезультатВыполненияОтложенныхДвижений;
	ИначеЕсли РезультатВыполненияОтложенныхДвижений = Неопределено Тогда
		ИтоговыйРезультатОтложенныхДвижений = РезультатВыполненияОтложенныхДвиженийВПриемнике;
	Иначе
		ИтоговыйРезультатОтложенныхДвижений = РезультатВыполненияОтложенныхДвижений И РезультатВыполненияОтложенныхДвиженийВПриемнике;	
	КонецЕсли;
	
	СтруктураНастроекОбменаДанными.Вставить("РезультатОтложенныхДвиженийДокументов", ИтоговыйРезультатОтложенныхДвижений);
		
 	
	
КонецПроцедуры

// Процедура поизводит обмен данными по настройке обмена
Процедура ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбменаДанными)
	
	// начальные функции инициализации обмена
	РезультатаНачалаОбмена = ВыполнитьДействияПередНачаломОбменаДанными(СтруктураНастроекОбменаДанными);
	Если Не РезультатаНачалаОбмена Тогда
		Возврат;
	КонецЕсли;
	
	// ВЫПОЛНЕНИЕ ОБМЕНА ДАННЫМИ
	ОбработкаОбменаПриемника = Неопределено;
	Попытка
		
		Если СтруктураНастроекОбменаДанными.ДанныеНастройки.OnLineОбмен
			И СтруктураНастроекОбменаДанными.ДанныеНастройки.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			// обмен через com соединение
			// выполняем и выгрузку и загрузку данных
			ВыполнитьОбменДаннымиЧерезComСоединение(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника);
			
		Иначе
		
 	    	ВыполнитьОбычныйОбменДанными(СтруктураНастроекОбменаДанными);    
			
		КонецЕсли;
		
		// оставшееся действия после обмена данными выполняем
		ВыполнитьДействияПослеЗавершенияОбменаДанными(СтруктураНастроекОбменаДанными, ОбработкаОбменаПриемника);
				
	Исключение
		
		СтрокаОписанияОшибки = ОписаниеОшибки();
		// отмечаем то что обмен произведен
		ЗафиксироватьЗавершениеОбмена(СтруктураНастроекОбменаДанными, СтрокаОписанияОшибки, , ОбработкаОбменаПриемника);
		
		#Если Клиент Тогда
		ЗакрытьФормуОбработкиДанных(СтруктураНастроекОбменаДанными);
		#КонецЕсли
		
		ОбработкаОбменаПриемника = Неопределено;
		
		// прокидываем ошибку дальше
		ВызватьИсключение СтрокаОписанияОшибки;
		
	КонецПопытки;
	
	ОбработкаОбменаПриемника = Неопределено;
		
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры

Процедура ОтправитьСообщениеОбОшибкеПриПредыдущемВыполнении(СтруктураНастроекОбмена)
	
	Если СтруктураНастроекОбмена.РучнойРежимЗапуска Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНастройки = СтруктураНастроекОбмена.ДанныеНастройкиАвтообмена;
	
	Попытка
		ТекущееРегламентноеЗадание = ОбъектНастройки.НайтиРегламентноеЗаданиеПоНастройке();
	Исключение
		Возврат;
	КонецПопытки;

	Если ТекущееРегламентноеЗадание = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Попытка

		СтрокаСообщенияОбОшибке = "";
		СтруктураОтбора = Новый Структура("РегламентноеЗадание", ТекущееРегламентноеЗадание);
		Фоновые = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);
		
		Если Фоновые.Количество() < 2
			ИЛИ Фоновые[1].ИнформацияОбОшибке = Неопределено Тогда
			Возврат;
		КонецЕсли;
			
		СтрокаСообщенияОбОшибке = Фоновые[1].ИнформацияОбОшибке.Описание;
		Если ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
			Возврат;
		КонецЕсли;
		
		
				
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры

Функция ПолучитьБазовуюСтруктуруПараметровОбмена(РучнойРежимЗапуска, ОбработкаАвтоОбменДанными, 
	ОбменПриВходеВПрограмму, СоответствиеТекстовЭлектронныхПисем) Экспорт
	
	СтруктураНастроекОбмена = Новый Структура();
	
	СтруктураНастроекОбмена.Вставить("РучнойРежимЗапуска", РучнойРежимЗапуска);
	СтруктураНастроекОбмена.Вставить("ОбработкаАвтоОбменДанными", ОбработкаАвтоОбменДанными);
	СтруктураНастроекОбмена.Вставить("ОбменПриВходеВПрограмму", ОбменПриВходеВПрограмму);
	СтруктураНастроекОбмена.Вставить("СоответствиеТекстовЭлектронныхПисем", СоответствиеТекстовЭлектронныхПисем);
	
	СтруктураНастроекОбмена.Вставить("ДанныеПротокола", "");
	СтруктураНастроекОбмена.Вставить("ДатаПоследнегоФайлаОбмена", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаНачалаЗагрузки", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаНачалаВыгрузки", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаПоследнейЗагрузки", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДатаПоследнейВыгрузки", Неопределено);
	
	СтруктураНастроекОбмена.Вставить("ИмяФайлаЧтенияИзменений", "");
	СтруктураНастроекОбмена.Вставить("ИмяФайлаЗаписиИзменений", "");
	СтруктураНастроекОбмена.Вставить("РезультатЧтенияДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("РезультатЗаписиДанных", Ложь);
	СтруктураНастроекОбмена.Вставить("КомментарийПриЗагрузкеДанных", "");
	СтруктураНастроекОбмена.Вставить("КомментарийПриВыгрузкеДанных", "");
	СтруктураНастроекОбмена.Вставить("ВывестиИнформациюОбОшибкеВОкноСообщений", Истина);
	СтруктураНастроекОбмена.Вставить("ВывестиИнформациюВОкноСообщений", Истина);	
	СтруктураНастроекОбмена.Вставить("НеобходимостьЗаписиОтветногоФайлаОбмена", Ложь);
	СтруктураНастроекОбмена.Вставить("ДанныеНастройкиАвтообмена", Неопределено);
	СтруктураНастроекОбмена.Вставить("ДоступностьКаталогаПроверки", Неопределено);
			
	Возврат СтруктураНастроекОбмена;	
	
КонецФункции

Процедура ДополнитьСтруктуруОбменаПоАвтоматическойНастройкеОбмена(СтруктураНастроекОбмена, ОбъектНастройки)
	
	СтруктураНастроекОбмена.Вставить("ДанныеНастройкиАвтообмена", ОбъектНастройки);
	
	ДоступностьФайла = Неопределено;
	Если Не ПустаяСтрока(ОбъектНастройки.ВыполнятьОбменПриПоявленииФайла) Тогда
		
		ДоступностьФайла = ПроверитьНаличиеКаталога(ОбъектНастройки.ВыполнятьОбменПриПоявленииФайла);
					
	КонецЕсли;
	
	ДоступностьКаталога = Неопределено;
	Если Не ПустаяСтрока(ОбъектНастройки.КаталогПроверкиДоступности) Тогда
		
		ДоступностьКаталога = ПроверитьНаличиеКаталога(ОбъектНастройки.КаталогПроверкиДоступности);
					
	КонецЕсли;	
	СтруктураНастроекОбмена.Вставить("ДоступностьКаталогаПроверки", ДоступностьКаталога);
	
	
	СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьТолькоПриУспешномЧтении", Ложь);
	
	СтруктураНастроекОбмена.Вставить("ДоступностьФайла", ДоступностьФайла);
	СтруктураНастроекОбмена.Вставить("ВыполнятьОбменПриПоявленииФайла", ОбъектНастройки.ВыполнятьОбменПриПоявленииФайла);	
	
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакцииНаВыгрузкуДанных", ОбъектНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных);
	СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакцииНаЗагрузкуДанных", ОбъектНастройки.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных);
	СтруктураНастроекОбмена.Вставить("УчетнаяЗаписьОтправкиСообщенияОбОшибке", ОбъектНастройки.УчетнаяЗаписьОтправкиСообщенияОбОшибке);
	СтруктураНастроекОбмена.Вставить("АдресДляОтправкиСообщенийОбОшибке", ОбъектНастройки.АдресДляОтправкиСообщенийОбОшибке);
	
	СообщенияНеЯвляющиесяОшибками = ОбъектНастройки.СообщенияНеЯвляющиесяОшибками.Выгрузить();
	СтруктураНастроекОбмена.Вставить("СообщенияНеЯвляющиесяОшибками", СообщенияНеЯвляющиесяОшибками);
	СтруктураНастроекОбмена.Вставить("ДинамическиИзменятьИнтервалМеждуОбменами", ОбъектНастройки.ДинамическиИзменятьИнтервалМеждуОбменами);
		
КонецПроцедуры

Функция ПолучитьСоответствиеПользовательскихПолейПоискаПоНастройке(ОбъектНастройки, ДанныеПоискаДляВыгрузки)
	
	СоответствиеПользовательскихПолей = Новый Соответствие();
	
	СтрокиТЧ = ОбъектНастройки.НастройкаВариантовПоискаОбъектов.НайтиСтроки(Новый Структура("ЭтоНастройкаДляВыгрузки", ДанныеПоискаДляВыгрузки));
	Если СтрокиТЧ <> Неопределено
		И СтрокиТЧ.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			
			Если ЗначениеЗаполнено(СтрокаТЧ.КодПравилаОбмена)
				И ЗначениеЗаполнено(СтрокаТЧ.ИмяНастройкиДляАлгоритма) Тогда
				
				СоответствиеПользовательскихПолей.Вставить(СтрокаТЧ.КодПравилаОбмена, СтрокаТЧ.ИмяНастройкиДляАлгоритма);	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеПользовательскихПолей;
	
КонецФункции

Функция ПолучитьСоответствиеНастроекВыгрузкиЗагрузки(ОбъектНастройки, ДанныеПоискаДляВыгрузки)
	
	СоответствиеПользовательскихПолей = Новый Соответствие();
	
	СтрокиТЧ = ОбъектНастройки.НастройкаВыгрузкиДанных.НайтиСтроки(Новый Структура("ЭтоНастройкаДляВыгрузки", ДанныеПоискаДляВыгрузки));
	Если СтрокиТЧ <> Неопределено
		И СтрокиТЧ.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КодПравилаВыгрузки)	Тогда
				Продолжить;								
			КонецЕсли;
			
			СтруктураДанных = Новый Структура("КодПравилаОбмена, ВыгружатьДанные, ВыгружатьПоСсылке");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаТЧ);
			
			СоответствиеПользовательскихПолей.Вставить(СтрокаТЧ.КодПравилаВыгрузки, СтруктураДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СоответствиеПользовательскихПолей;
	
КонецФункции

Процедура ДополнитьСтруктуруОбменаПоПростойНастройкеОбмена(СтруктураНастроекОбмена, ОбъектНастройки, ДобавлятьВсеНастройки = Истина) Экспорт
	
	СтруктураНастроекОбмена.Вставить("ДанныеНастройки", ОбъектНастройки);
	СтруктураНастроекОбмена.Вставить("ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных", НЕ ОбъектНастройки.ВыполнитьОтложенноеПроведениеДокументовПоРасписанию);	
	
	//помещаем в структуру информацию по выбранным настройкам для сопоставления объектов при выгрузке и загрузке данных	
	ИнформацияСопоставленияДляВыгрузки = ПолучитьСоответствиеПользовательскихПолейПоискаПоНастройке(ОбъектНастройки, Истина);
	ИнформацияСопоставленияДляЗагрузки = ПолучитьСоответствиеПользовательскихПолейПоискаПоНастройке(ОбъектНастройки, Ложь);
	
	СтруктураНастроекОбмена.Вставить("ИнформацияСопоставленияДляВыгрузки", ИнформацияСопоставленияДляВыгрузки);
	СтруктураНастроекОбмена.Вставить("ИнформацияСопоставленияДляЗагрузки", ИнформацияСопоставленияДляЗагрузки);
	
	//пользовательские настройки выгрузки и загрузки данных	
	ИнформацияОбъектовДляВыгрузки = ПолучитьСоответствиеНастроекВыгрузкиЗагрузки(ОбъектНастройки, Истина);
	ИнформацияОбъектовДляЗагрузки = ПолучитьСоответствиеНастроекВыгрузкиЗагрузки(ОбъектНастройки, Ложь);
	
	СтруктураНастроекОбмена.Вставить("ИнформацияОбъектовДляВыгрузки", ИнформацияОбъектовДляВыгрузки);
	СтруктураНастроекОбмена.Вставить("ИнформацияОбъектовДляЗагрузки", ИнформацияОбъектовДляЗагрузки);	
		
	Если ДобавлятьВсеНастройки Тогда	
		
		СтруктураНастроекОбмена.Вставить("ПроизводитьЧтениеДанных", ОбъектНастройки.ПроизводитьПриемСообщений);
		СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьДанных", ОбъектНастройки.ПроизводитьОтправкуСообщений);
		
		ПроизводитьЗаписьТолькоПриУспешномЧтении = ОбъектНастройки.ПроизводитьПриемСообщений
			И ОбъектНастройки.ПроизводитьОтправкуСообщений
			И ОбъектНастройки.ПроизводитьОтправкуТолькоПриУспешномПриеме;
			
		СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьТолькоПриУспешномЧтении", ПроизводитьЗаписьТолькоПриУспешномЧтении);	
			
		СтруктураНастроекОбмена.Вставить("ДоступностьФайла", Ложь);
		СтруктураНастроекОбмена.Вставить("ВыполнятьОбменПриПоявленииФайла", "");
		
		СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакцииНаВыгрузкуДанных", ОбъектНастройки.КоличествоЭлементовВТранзакцииНаВыгрузкуДанных);
		СтруктураНастроекОбмена.Вставить("КоличествоЭлементовВТранзакцииНаЗагрузкуДанных", ОбъектНастройки.КоличествоЭлементовВТранзакцииНаЗагрузкуДанных);
		СтруктураНастроекОбмена.Вставить("УчетнаяЗаписьОтправкиСообщенияОбОшибке", ОбъектНастройки.УчетнаяЗаписьОтправкиСообщенияОбОшибке);
		СтруктураНастроекОбмена.Вставить("АдресДляОтправкиСообщенийОбОшибке", ОбъектНастройки.АдресДляОтправкиСообщенийОбОшибке);
		
		СообщенияНеЯвляющиесяОшибками = ОбъектНастройки.СообщенияНеЯвляющиесяОшибками.Выгрузить();
		СтруктураНастроекОбмена.Вставить("СообщенияНеЯвляющиесяОшибками", СообщенияНеЯвляющиесяОшибками);
		
		СтруктураНастроекОбмена.Вставить("ДинамическиИзменятьИнтервалМеждуОбменами", Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

// АВТОМАТИЧЕСКИЙ ОБМЕН ДАННЫМИ
///////////////////////////////////////////////////////////////////////////////

Функция ВыполнитьОтложенныеДвиженияПоПараметрам(УзелОбмена, 
	ПрекратитьПроведениеДокументовВСлучаеОшибки, КоличествоОшибокОбменаДляПрекращенияПроведения, 
	ФормаОтображения = Неопределено) Экспорт
	
	СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "";
	
	Попытка
	
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
		ОбработкаОбменаДаннымиXML.ПолученоОбъектовФоновогоОбмена = 0;
		ОбработкаОбменаДаннымиXML.УзелОбменаЗагрузкаДанных = УзелОбмена;
		
		ОбработкаОбменаДаннымиXML.ИнициализироватьВедениеПротоколаОбмена();

		
		СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "";
								
		ОбработкаОбменаДаннымиXML.ВыполнитьОтложенныеОперацииСДокументами(СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, 
			ПрекратитьПроведениеДокументовВСлучаеОшибки, КоличествоОшибокОбменаДляПрекращенияПроведения, ФормаОтображения);
				
	Исключение
		
	КонецПопытки;
	
	ОбработкаОбменаДаннымиXML.ЗавершитьВедениеПротоколаОбмена();
	
	Возврат СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов;
	
КонецФункции

Процедура ВыполнитьОтложенныеДвиженияПоНастройкеОбмена(НастройкаОбменаДанными, ФормаОтображения = Неопределено) Экспорт
	
	ВыполнитьОтложенныеДвиженияПоПараметрам(НастройкаОбменаДанными.УзелИнформационнойБазы, 
		НастройкаОбменаДанными.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, 
		НастройкаОбменаДанными.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации,
		ФормаОтображения);
		
КонецПроцедуры

Процедура ВыполнитьОбменПоНастройке(НастройкаОбменаДанными, РучнойЗапускОбменов = Истина, 
	ОбработкаАвтообменаНаКлиенте = Неопределено, Знач СоответствиеТекстовЭлектронныхПисем = Неопределено, Знач ОбменПриВходеВПрограмму = Ложь) Экспорт
	
	ОбъектНастройки = НастройкаОбменаДанными.ПолучитьОбъект();
			
	Если ОбъектНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// производится непосредственно сам обмен данными
	СтруктураНастроекОбмена = ПолучитьБазовуюСтруктуруПараметровОбмена(РучнойЗапускОбменов, ОбработкаАвтообменаНаКлиенте, 
		ОбменПриВходеВПрограмму, СоответствиеТекстовЭлектронныхПисем);
		
	ДополнитьСтруктуруОбменаПоПростойНастройкеОбмена(СтруктураНастроекОбмена, ОбъектНастройки);	
					
	// выполнение обмена данными по конкретной настройке обмена
	ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбмена);	
	
КонецПроцедуры

Процедура ВыполнитьОбменПоНастройкеАвтоматическогоОбмена(НастройкаОбменаДанными, РучнойЗапускОбменов = Истина, 
	ОбработкаАвтообменаНаКлиенте = Неопределено, Знач СоответствиеТекстовЭлектронныхПисем = Неопределено, Знач ОбменПриВходеВПрограмму = Ложь) Экспорт
	
	ОбъектНастройки = НастройкаОбменаДанными.ПолучитьОбъект();
			
	Если ОбъектНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаВыполненияОбмена = ТекущаяДата();
	
	Для Каждого СтрокаТабЧасти Из ОбъектНастройки.НастройкиОбмена Цикл
		
		СсылкаНаНастройкуДляОбмена = СтрокаТабЧасти.НастройкаОбмена;
		ВыполняемоеДействие = СтрокаТабЧасти.ВыполняемоеДействие;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаНастройкуДляОбмена)
			ИЛИ НЕ ЗначениеЗаполнено(ВыполняемоеДействие) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОбъектНастройкиОбмена = СсылкаНаНастройкуДляОбмена.ПолучитьОбъект();
		
		Если ОбъектНастройкиОбмена = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// определяем что мы делаем, выгружаем загружаем или отложенное проведение
		
		Если ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ОтложенныеДвижения Тогда
			
			// отложенные движения
			ПроцедурыОбменаДанными.ВыполнитьОтложенныеДвиженияПоНастройкеОбмена(СсылкаНаНастройкуДляОбмена);			
			
		Иначе
		
			СтруктураНастроекОбмена = ПолучитьБазовуюСтруктуруПараметровОбмена(РучнойЗапускОбменов, ОбработкаАвтообменаНаКлиенте, 
				ОбменПриВходеВПрограмму, СоответствиеТекстовЭлектронныхПисем);
				
			ДополнитьСтруктуруОбменаПоАвтоматическойНастройкеОбмена(СтруктураНастроекОбмена, ОбъектНастройки);
				
			ДополнитьСтруктуруОбменаПоПростойНастройкеОбмена(СтруктураНастроекОбмена, ОбъектНастройкиОбмена, Ложь);	
			
			Если ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ВыгрузкаДанных Тогда
				
				СтруктураНастроекОбмена.Вставить("ПроизводитьЧтениеДанных", Ложь);
				СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьДанных", Истина);
				
			ИначеЕсли ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ЗагрузкаДанных Тогда
				
				СтруктураНастроекОбмена.Вставить("ПроизводитьЧтениеДанных", Истина);
				СтруктураНастроекОбмена.Вставить("ПроизводитьЗаписьДанных", ЛОЖЬ);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;		
					
			// информирование пользователя о возможных ошибках обмена в предыдущих попытках
			ОтправитьСообщениеОбОшибкеПриПредыдущемВыполнении(СтруктураНастроекОбмена);
			
			// выполнение обмена данными по конкретной настройке обмена
			ПроизвестиОбменДаннымиПоНастройке(СтруктураНастроекОбмена);
		
		КонецЕсли;
	
	КонецЦикла;
	
	ИзменитьВремяПаузыПовтораРегламентногоЗадания(СтруктураНастроекОбмена, ДатаНачалаВыполненияОбмена);
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбменаДанными, РучнойЗапускОбменов = Истина, 
	ОбработкаАвтообменаНаКлиенте = Неопределено, Знач СоответствиеТекстовЭлектронныхПисем = Неопределено, Знач ОбменПриВходеВПрограмму = Ложь) Экспорт
	
	Если ТипЗнч(НастройкаОбменаДанными) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
	
		Если НЕ ЗначениеЗаполнено(НастройкаОбменаДанными) Тогда
			Возврат;
		КонецЕсли;
		
		// как выполнять обмен, под полными правами или нет
		Если НастройкаОбменаДанными.ВыполнятьДействияПодПолнымиПравами Тогда
			
			#Если Клиент Тогда
				ИнформационнаяБазаФайловая = ОпределитьЭтаИнформационнаяБазаФайловая();
				Если НЕ ИнформационнаяБазаФайловая Тогда
					Сообщить("Начат обмен данными под полными правами на сервере 1С:Предприятия по настройке """ + Строка(НастройкаОбменаДанными) + """ " + ТекущаяДата() + Символы.ПС);
				КонецЕсли;
			#КонецЕсли
			
			ПроцедурыОбменаДаннымиПолныеПрава.ВыполнитьОбменДаннымиПоНастройкеОбменаПодПолнымиПравамиНаСервере(НастройкаОбменаДанными, РучнойЗапускОбменов, 
				Неопределено, Неопределено, ОбменПриВходеВПрограмму);
				
			#Если Клиент Тогда
				Если НЕ ИнформационнаяБазаФайловая Тогда	
					Сообщить("Завершен обмен данными под полными правами на сервере 1С:Предприятия по настройке """ + Строка(НастройкаОбменаДанными) + """ " + ТекущаяДата() + Символы.ПС);
				КонецЕсли;
			#КонецЕсли
				
		Иначе
				
			ВыполнитьОбменПоНастройке(НастройкаОбменаДанными, РучнойЗапускОбменов, 
				ОбработкаАвтообменаНаКлиенте, СоответствиеТекстовЭлектронныхПисем, ОбменПриВходеВПрограмму);
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(НастройкаОбменаДанными, РучнойЗапускОбменов = Истина, ОбработкаАвтообменаНаКлиенте = Неопределено, 
	Знач СоответствиеТекстовЭлектронныхПисем = Неопределено, Знач ОбменПриВходеВПрограмму = Ложь) Экспорт
	
	Если ТипЗнч(НастройкаОбменаДанными) <> Тип("СправочникСсылка.НастройкиВыполненияОбмена") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбменаДанными) Тогда
		Возврат;
	КонецЕсли;
	
	// как выполнять обмен, под полными правами или нет
	Если НастройкаОбменаДанными.ВыполнятьДействияПодПолнымиПравами Тогда
		
		#Если Клиент Тогда
			ИнформационнаяБазаФайловая = ОпределитьЭтаИнформационнаяБазаФайловая();
			Если НЕ ИнформационнаяБазаФайловая Тогда
				Сообщить("Начат обмен данными под полными правами на сервере 1С:Предприятия по настройке автоматического обмена """ + Строка(НастройкаОбменаДанными) + """ " + ТекущаяДата() + Символы.ПС);
			КонецЕсли;
		#КонецЕсли
		
		ПроцедурыОбменаДаннымиПолныеПрава.ВыполнитьОбменДаннымиПоНастройкеАвтоматическогоОбменаПодПолнымиПравамиНаСервере(НастройкаОбменаДанными, РучнойЗапускОбменов, 
			Неопределено, Неопределено, ОбменПриВходеВПрограмму);
			
		#Если Клиент Тогда
			Если НЕ ИнформационнаяБазаФайловая Тогда	
				Сообщить("Завершен обмен данными под полными правами на сервере 1С:Предприятия по настройке автоматического обмена """ + Строка(НастройкаОбменаДанными) + """ " + ТекущаяДата() + Символы.ПС);
			КонецЕсли;
		#КонецЕсли
			
	Иначе
			
		ВыполнитьОбменПоНастройкеАвтоматическогоОбмена(НастройкаОбменаДанными, РучнойЗапускОбменов, 
			ОбработкаАвтообменаНаКлиенте, СоответствиеТекстовЭлектронныхПисем, ОбменПриВходеВПрограмму);
		
	КонецЕсли;			
		
КонецПроцедуры



Функция ВыполнитьИнициализациюАвтообменаПриНачалеРаботы() Экспорт
	
	// автообмен данными
	Если ПравоДоступа("Использование", Метаданные.Обработки.АвтоОбменДанными) Тогда
		
		// производим отложенный обмен при первом входе в программу
		ОбработкаАвтоОбменДанными = Обработки.АвтоОбменДанными.Создать(); 
			
		#Если Клиент Тогда
		
			// обмен при первом входе
			ОбработкаАвтоОбменДанными.ПроизвестиОбменПриВходеВыходе(Истина);
				
			// отдельно получаем настройки для которых нужно выполнить обмен при входе в программу
			ОбработкаАвтоОбменДанными.ПроизвестиОбменПриВходеВыходе(, Истина);
				
			// получаем данные периодического обмена данными и с ними работаем
			ОбработкаАвтоОбменДанными.ОбновитьТабличнуюЧастьАвтоматическихОбменов();
		
		#КонецЕсли
	
		Возврат  ОбработкаАвтоОбменДанными
			
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции

// выполнение обмена данными при завершении работы программы
Процедура ВыполнитьОбменПриЗавершенииРаботыПрограммы(ОбработкаОбмена) Экспорт
	
	Если (ОбработкаОбмена <> Неопределено) Тогда
		
		// отдельно получаем настройки для которых нужно выполнить обмен при выходе из программы
		ОбработкаОбмена.ПроизвестиОбменПриВходеВыходе( ,, Истина);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаПроверкаНаличияВОтложенныхДвиженияхПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ЭтоНовый()
		ИЛИ РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 1
	|	
	|ИЗ
	|	РегистрСведений.ОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
	|ГДЕ
	|	ОтложенныеДвиженияДокументов.Документ = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;	
		
	#Если Клиент Тогда
		
		Сообщить(Строка(Источник) + Символы.ПС + "
		         |Записывается документ, присутствующий в списке отложенных к проведению.
		         |Запись может повлечь за собой отмену проведения документа в других информационных базах!
		         |Рекомендуется провести документ!");
		
	#КонецЕсли
		
КонецПроцедуры
