// Возвращает значение ставки НДФЛ с доходов нерезидентов 
//
// Параметры
//	КодДохода - код дохода, для которого определяется ставка
//  ДатаНалоговогоПериода - дата, определяет налоговый период, к которому относится доход
//
Функция ЗначениеСтавкиНДФЛСНерезидента(КодДохода = Неопределено, ДатаНалоговогоПериода = '00010101') Экспорт
	Если КодДохода = Справочники.ДоходыНДФЛ.Код1010 И ДатаНалоговогоПериода >= '20080101' Тогда // с 1 января 2008 года для нерезидентов изменена ставка налогообложения дивидендов с 30% до 15%
		Возврат 15;
	Иначе 	
		Возврат 30;
	КонецЕсли;
КонецФункции 

// Определяет значение ставки налога для СтавкиНалогообложенияРезидента
// Параметры:
//  СтавкаНалогообложенияРезидента - ссылка на перечисление "НДФЛСтавкиНалогообложенияРезидента"
// Возвращаемое значение:
//  число - ставка налога в процентах
Функция ЗначениеСтавкиНДФЛотСтавкиНалогообложенияРезидента(СтавкаНалогообложенияРезидента) Экспорт
	Если 	СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
		Возврат 13;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09 Тогда
		Возврат 9;
	ИначеЕсли СтавкаНалогообложенияРезидента = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
		Возврат 35;
	КонецЕсли;
	Возврат 0;
КонецФункции

// Удаляет из строки фрагмент заключенный в скобки
//
// Параметры
//  СтрокаДляОбработки  – Строка – строка из которой необходимо удалить фрагмент
//
// Возвращаемое значение:
//   Строка   – строка без фрагмента заключенного в скобки.
//
Функция УдалениеСимволовСкобок(СтрокаДляОбработки)

	НачальнаяПозиция	= Найти(СтрокаДляОбработки,"(");
	КонечнаяПозиция		= Найти(СтрокаДляОбработки,")");
	ДлинаСтроки			= СтрДлина(СтрокаДляОбработки);
	
	Если НачальнаяПозиция > 0 Тогда
		Возврат Лев(СтрокаДляОбработки, НачальнаяПозиция - 1) + ?(КонечнаяПозиция > 0,Прав(СтрокаДляОбработки, ДлинаСтроки - КонечнаяПозиция),"")
	Иначе
		Возврат СтрокаДляОбработки
	КонецЕсли; 

КонецФункции // ()
 
// Заполняет реквизит "КраткийСоставДокумента" документа по его табличным частям.
//
// Параметры
//  ТЧДокумента					– табличная часть документа по которой происходит заполнение реквизита
//  ДополнительнаяТЧДокумента	- табличная часть документа, как правило это ТЧ с дополнительными начислениями
//  ОграничиватьДлину			- снятие ограничение на длину реквизита
//
// Возвращаемое значение:
//   строка, значение реквизита "КраткийСоставДокумента".
//
Функция ЗаполнитьКраткийСоставДокумента(ТЧДокумента, ДополнительнаяТЧДокумента = Неопределено, ИмяРеквизита = "Сотрудник", ОграничиватьДлину = Истина) Экспорт

	КраткийСоставДокумента = "";
	
	Для каждого СтрокаТЧ Из ТЧДокумента Цикл
		
		ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
		Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
			
			Если ОграничиватьДлину Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
			ИначеЕсли СтрДлина(КраткийСоставДокумента) < 100 Тогда
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
			Иначе
				КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
				Прервать;
			КонецЕсли;
			
		КонецЕсли; 
	
	КонецЦикла;
	
	Если ДополнительнаяТЧДокумента <> Неопределено И СтрДлина(КраткийСоставДокумента) < 100 Тогда
	
		Для каждого СтрокаТЧ Из ДополнительнаяТЧДокумента Цикл
			
			ФИОФизЛица = ОбщегоНазначения.ФамилияИнициалыФизЛица(УдалениеСимволовСкобок(СтрокаТЧ[ИмяРеквизита].Наименование));
			Если Найти(КраткийСоставДокумента, ФИОФизЛица) = 0 Тогда
				
				Если СтрДлина(КраткийСоставДокумента) < 100 Тогда
					КраткийСоставДокумента = КраткийСоставДокумента + ", " + ФИОФизЛица;
				Иначе
					Если Лев(КраткийСоставДокумента,2) = ", " Тогда
						КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
					Иначе
						КраткийСоставДокумента = Лев(КраткийСоставДокумента,97) + "...";
					КонецЕсли;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	 
	КонецЕсли;
	
	Если Лев(КраткийСоставДокумента,2) = ", " Тогда
		ДлинаСтроки = СтрДлина(КраткийСоставДокумента);
		Если ДлинаСтроки < 100 Тогда
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3)
		Иначе
			КраткийСоставДокумента = Сред(КраткийСоставДокумента,3,95) + "...";
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат КраткийСоставДокумента;
	
КонецФункции // ЗаполнитьКраткийСоставДокумента()

// Функция определяет пол физлица по его отчеству
//
Функция ПолучитьПол(ОтчествоРаботника) Экспорт
	
	Если Прав(ОтчествоРаботника, 2) = "ич" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Мужской;
	
	ИначеЕсли Прав(ОтчествоРаботника, 2) = "на" Тогда
		Возврат Перечисления.ПолФизическихЛиц.Женский;
	
	КонецЕсли;
	
	Возврат Перечисления.ПолФизическихЛиц.ПустаяСсылка();
	
КонецФункции // ПолучитьПол()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОБМЕНА ДАННЫМИ С БАНКАМИ ПО ЛИЦЕВЫМ СЧЕТАМ СОТРУДНИКОВ

// Функция получает массив операций по счетам сотрудника из дерева XML
Функция ПолучитьОперацииПоЛицевымСчетамРаботников(ДеревоОбработки, ИмяЭлементаИмпорта) Экспорт
	
	МассивОпераций = Новый Массив;
	
	Для каждого Ветка из ДеревоОбработки.Строки Цикл
		Если Ветка.Имя = ИмяЭлементаИмпорта Тогда
			Для каждого СтрокаВетки из Ветка.Строки Цикл
				Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" ИЛИ ИмяЭлементаИмпорта = "РезультатЗачисленияЗарплаты" Тогда
					Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" Тогда
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
						
					Иначе
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Сумма", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
					КонецЕсли;	
					Если ШаблонОперации.Свойство(СтрокаВетки.Имя) Тогда
						ШаблонОперации[СтрокаВетки.Имя] = ПолучитьЗначениеИзДерева(СтрокаВетки, ШаблонОперации);
					КонецЕсли;
					
					Для каждого ЭлементШаблона Из ШаблонОперации Цикл
						Если ЭлементШаблона.Значение = Неопределено Тогда
							СообщитьОбОшибкеОбработки("Анализ операции", "Некорректная структура элемента " + ИмяЭлементаИмпорта + "!");
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					МассивОпераций.Добавить(ШаблонОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОпераций;
	
КонецФункции

Функция ПолучитьЗначениеИзДерева(ВеткаЗначения, ШаблонОперации)Экспорт

	СтадияОбработки = "Анализ данных операции";
	
	ИмяЗначения = ВеткаЗначения.Имя;
	
	Если ИмяЗначения = "Сотрудник" Тогда
		СтруктураСотрудника = Новый Структура;
		СтруктураСотрудника.Вставить("Фамилия", Неопределено);
		СтруктураСотрудника.Вставить("Имя", Неопределено);
		СтруктураСотрудника.Вставить("Отчество", Неопределено);

		Для каждого Лист из ВеткаЗначения.Строки Цикл
			
			Если СтруктураСотрудника.Свойство(Лист.Имя) Тогда
				СтруктураСотрудника[Лист.Имя] = Лист.Значение;
			ИначеЕсли ШаблонОперации.Свойство(Лист.Имя) Тогда
				ШаблонОперации[Лист.Имя] = ПолучитьЗначениеИзДерева(Лист, ШаблонОперации);	
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ЭлементСотрудника Из СтруктураСотрудника Цикл
			Если ЭлементСотрудника.Значение = Неопределено Тогда
				ПроцедурыУправленияПерсоналом.СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректные данные о сотруднике " + СтруктураСотрудника.Фамилия + СтруктураСотрудника.Имя + СтруктураСотрудника.Отчество + "!");
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		ЗапросФИО = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                         |	ФИОФизЛицСрезПоследних.Фамилия,
		                         |	ФИОФизЛицСрезПоследних.Имя,
		                         |	ФИОФизЛицСрезПоследних.Отчество,
		                         |	ФИОФизЛицСрезПоследних.ФизЛицо
		                         |ИЗ
		                         |	РегистрСведений.ФИОФизЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
		                         |ГДЕ
		                         |	ФИОФизЛицСрезПоследних.Фамилия = &Фамилия
		                         |	И ФИОФизЛицСрезПоследних.Имя = &Имя
		                         |	И ФИОФизЛицСрезПоследних.Отчество = &Отчество");
		
		ЗапросФИО.УстановитьПараметр("Фамилия", СтруктураСотрудника.Фамилия);
		ЗапросФИО.УстановитьПараметр("Имя", СтруктураСотрудника.Имя);
		ЗапросФИО.УстановитьПараметр("Отчество", СтруктураСотрудника.Отчество);
		Выборка = ЗапросФИО.Выполнить().Выбрать();
	
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ФизЛицо;
			
		Иначе
			Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
		
	ИначеЕсли ИмяЗначения = "ЛицевойСчет" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "УдостоверениеЛичности" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "ДействительноДо" Тогда
		Попытка
			Значение = Дата(ВеткаЗначения.Значение);
		Исключение
			Значение = Дата('00010101');
		КонецПопытки;
		
		Возврат Значение;
		
	ИначеЕсли ИмяЗначения = "Сумма" Тогда
		Попытка
			Значение = Число(ВеткаЗначения.Значение);
		Исключение
			Значение = 0;
			СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректно указана сумма " + ВеткаЗначения.Значение + " !");
		КонецПопытки;
		
		Возврат Значение;
		
	ИначеЕсли ИмяЗначения = "ВидВклада" Тогда
		Возврат ВеткаЗначения.Значение;
		
	ИначеЕсли ИмяЗначения = "Результат" Тогда
		
		Значение = ВРег(СокрЛП(ВеткаЗначения.Значение));
		Если Значение = ВРег("СчетОткрыт") Тогда
			Возврат "Счет открыт";
			
		ИначеЕсли Значение = ВРег("ОшибкаЗаполненияДанных") Тогда
			Возврат "Ошибка заполнения данных";
			
		ИначеЕсли Значение = ВРег("СчетНеОткрыт") Тогда
			Возврат "Счет не открыт";
			
		ИначеЕсли Значение = ВРег("Зачислено") Тогда
			Возврат "Зачислено";
			
		ИначеЕсли Значение = ВРег("ОшибкаФИО") Тогда
			Возврат "Ошибка в ФИО";
			
		ИначеЕсли Значение = ВРег("СчетЗакрыт") Тогда
			Возврат "Счет закрыт";
			
		ИначеЕсли Значение = ВРег("СчетОтсутствует") Тогда
			Возврат "Счет отсутствует";
			
		ИначеЕсли Значение = ВРег("НеЗачислено") Тогда
			Возврат "Не зачислено";
			
		КонецЕсли;
		
		Возврат "";
		
	КонецЕсли;
	
	СообщитьОбОшибкеОбработки(СтадияОбработки, "Неверное значение " + ИмяЗначения + "в структуре элемента!");

КонецФункции

Процедура СообщитьОбОшибкеОбработки(СтадияОбработки, ТекстОшибки)Экспорт
	
	Сообщить(СтадияОбработки + ":  " + ТекстОшибки);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

#Если Клиент Тогда

// Процедура ищет единственное физлицо среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  строка - наименование найденного кандидата, работника (предприятия или организаций), если он единственный
//
Функция ПодобратьФИОРаботникаКандидата(СтандартнаяОбработка, Режим, Знач Текст, Организация = "", ВозвращатьФизлицо = Ложь) Экспорт
	
	ТекстАвтоПодбора = "";
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	
	Если Режим = "РаботникиОрганизации" ИЛИ Режим = "РаботникиИДоговорники" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
		|ГДЕ
		|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	СотрудникиОрганизаций.Наименование КАК Наименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|ГДЕ
		|	СотрудникиОрганизаций.Актуальность
		|	И СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("В процедуру ПроцедурыУправленияПерсоналом.ПодобратьФИОРаботникаКандидата() передано неверное значение параметра Режим!");
		
	КонецЕсли;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Если ВозвращатьФизлицо Тогда
			ТекстАвтоПодбора = Выборка.ФизлицоНаименование;
		Иначе
			ТекстАвтоПодбора = Выборка.Наименование;
		КонецЕсли;
	КонецЕсли;

	Возврат ТекстАвтоПодбора;
	
КонецФункции // ПодобратьФИОРаботникаКандидата()

// Процедура ищет физлиц среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
//  Режим 		- строка - определяет, среди кандидатов, работников предприятия или организаций производится поиск
//  Текст 		- строка - начало ФИО
//  НачальноеЗначение	- СправочникСсылка.ФизическиеЛица - значение по умолчанию
//  Организация - СправочникСсылка.Организации - организация, 
//					среди работников которой производится поиск, необязательна,
//					если не указана - поиск ведется по всем организациям
//
// Возвращаемое значение
//  СправочникСсылка.ФизическиеЛица - возвращается значение по умолчанию, если 
//									не найдено ни одного подходящего кандидата, работника (предприятия или организаций)
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокРаботниковКандидатов(СтандартнаяОбработка, Режим, Знач Текст, НачальноеЗначение, Организация = "", ВозвращатьФизлицо = Ложь) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Если Режим = "РаботникиОрганизации" ИЛИ Режим = "РаботникиИДоговорники" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
			|	РаботникиОрганизации.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	РаботникиОрганизации.Сотрудник КАК Ссылка,
			|	РаботникиОрганизации.Сотрудник.Наименование КАК Наименование
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
			|ГДЕ
			|	РаботникиОрганизации.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		КонецЕсли;
		
	ИначеЕсли Режим = "Сотрудники" Тогда
		
		ТекстУсловияОрганизации = "";
		
		Если ЗначениеЗаполнено(Организация) Тогда
			Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			ТекстУсловияОрганизации = " И Организация = &ГоловнаяОрганизация";
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
			|	СотрудникиОрганизаций.Физлицо.Наименование КАК ФизлицоНаименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Актуальность
			|	И СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	СотрудникиОрганизаций.Ссылка КАК Ссылка,
			|	СотрудникиОрганизаций.Наименование КАК Наименование
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Актуальность
			|	И СотрудникиОрганизаций.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""" + ТекстУсловияОрганизации;
		КонецЕсли;
		
	Иначе
		ОбщегоНазначения.СообщитьОбОшибке("В процедуру ПроцедурыУправленияПерсоналом.ПодобратьСписокРаботниковКандидатов() передано неверное значение параметра Режим!");
		
	КонецЕсли;
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если ВозвращатьФизлицо Тогда
				Значение.Добавить(Выборка.Физлицо, Выборка.ФизлицоНаименование);
			Иначе
				Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
			КонецЕсли;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПодобратьСписокРаботниковКандидатов()

// Открывает форму обработки для подготовки списка работников, отобранного по указанным пользователем критериям
//
// Владелец - форма, для которой требуется вызвать обработку
// ДатаАктуальности - дата, по состоянию на которую осматривается список работников
// Организация - ссылка на организацию (может быть в том числе обособленным подразделением), если передана пустая ссылка, выбираются 
//					работники всех организаций
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуОтбораСпискаРаботников(Владелец, ДатаАктуальности, ИмяРегистра = "РаботникиОрганизаций", Организация = Неопределено, Подразделение = Неопределено, ИсполнятьЗапрос = Истина, ВыбиратьСотрудника = Истина, ИменаСтраницФормы = Неопределено, Реквизиты = Неопределено, ДатаУволенных = Неопределено, ВключатьУволенных = Ложь) Экспорт
	
	Если ИмяРегистра = "РаботникиОрганизаций" И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация, отобрать список работников невозможно!");
		Возврат;
	КонецЕсли;
		
	ФормированиеСпискаРаботников = Обработки.ФормированиеСпискаРаботников.Создать();
	ФормированиеСпискаРаботников.ИмяРегистра			= ИмяРегистра;
	ФормированиеСпискаРаботников.ДатаАктуальности		= ДатаАктуальности;
	ФормированиеСпискаРаботников.ДатаУволенных			= ?(ДатаУволенных = Неопределено, НачалоГода(ДатаАктуальности), ДатаУволенных);
	ФормированиеСпискаРаботников.ИсполнятьЗапрос		= ИсполнятьЗапрос;
	ФормированиеСпискаРаботников.ВыбиратьСотрудника		= ВыбиратьСотрудника;
	ФормированиеСпискаРаботников.Реквизиты				= Реквизиты;
	ФормированиеСпискаРаботников.ВключатьУволенных	    = ВключатьУволенных;
	
	// подготовим Построитель отчета к работе
	ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();
	
	СтруктураНедоступныхОтборов = Новый Структура;
	Если ИмяРегистра = "РаботникиОрганизаций" Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Количество() = 0 Тогда 
			ФормированиеСпискаРаботников.ЗаполнитьНачальныеНастройки();	
		КонецЕсли;
		// Переданную организацию пропишем независимо от сохраненных ранее настроек отбора
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("ОбособленноеПодразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("ОбособленноеПодразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.ОбособленноеПодразделение.Установить(Организация,);
		ФормированиеСпискаРаботников.ПостроительОтчета.Параметры.Вставить("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		СтруктураНедоступныхОтборов.Вставить("ОбособленноеПодразделение");
	КонецЕсли;
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Если ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Найти("Подразделение") = Неопределено Тогда
			ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Добавить("Подразделение")
		КонецЕсли;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Значение = Подразделение;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.Использование = Истина;
		ФормированиеСпискаРаботников.ПостроительОтчета.Отбор.Подразделение.ВидСравнения = ВидСравнения.ВИерархии;
		СтруктураНедоступныхОтборов.Вставить("Подразделение");
	КонецЕсли;
	
	// Теперь откроем подготовленную форму
	Форма = ФормированиеСпискаРаботников.ПолучитьФорму("ФормаНастройки",Владелец);
	Форма.мСтруктураНедоступныхОтборов = СтруктураНедоступныхОтборов;
	Если Реквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма,Реквизиты);
	КонецЕсли;
	
	Если ИменаСтраницФормы = Неопределено Тогда // страницу дополнительных данных не показываем
		//Форма.ЭлементыФормы.ПанельСтраницы.Свертка = РежимСверткиЭлементаУправления.Низ;
	Иначе
		//УдаляемыеСтраницы = Новый Массив;
		//Страницы = Форма.ЭлементыФормы.ПанельСтраницы.Страницы;
		//Для каждого СтраницаПанели Из Страницы Цикл
		//	Если СтраницаПанели.Имя <> ИменаСтраницФормы Тогда
		//		УдаляемыеСтраницы.Добавить(СтраницаПанели);
		//	КонецЕсли;
		//КонецЦикла;
		//Для Каждого СтраницаПанели Из УдаляемыеСтраницы Цикл
		//	Страницы.Удалить(Страницы.Индекс(СтраницаПанели))
		//КонецЦикла;
	КонецЕсли;
	
	Форма.ОткрытьМодально();
	
КонецПроцедуры  // ОткрытьФормуОтбораСпискаРаботников()

// Открывает для выбора список доков ЗарплатаКВыплатеОрганизаций конкретной организации
//
// Параметры
//  Элемент - поле ввода, в котором выбирается платежная ведомость 
//  СтандартнаяОбработка - булево, признак стандартной обработки события
//  Организация - СправочникСсылка.Организации, организация, ведомости которой надо выбрать
//  СпособыВыплатыЗарплаты - ПеречислениеСсылка.СпособыВыплатыЗарплаты - дополнительное ограничение на список ведомостей
//
Процедура ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, СпособыВыплатыЗарплаты) Экспорт

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	ФормаВыбора.Отбор.СпособВыплаты.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.СпособВыплаты.Значение		= СпособыВыплатыЗарплаты;
	ФормаВыбора.Отбор.СпособВыплаты.Использование	= Истина;
	
	ФормаВыбора.Открыть();
	

КонецПроцедуры // ОткрытьФормуВыбораКассовыхПлатежныхВедомостейОрганизации()

#КонецЕсли

// Формирует список головных организаций предприятия
//
Функция ПолучитьСписокГоловныхОрганизаций() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());

	СписокОрганизаций = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;

КонецФункции 

// Определяет размер часовой тарифной ставки на основании месячного оклада и других необходимых параметров
//
Функция ПолучитьЧасовуюТарифнуюСтавкуНаОсновеМесячнойСтавки(Оклад, ПродолжительностьРабочейНедели, ЧислоРабочихДнейВГоду, ЧислоПредпраздничныхДнейВГоду) Экспорт

	Если ПродолжительностьРабочейНедели = 40 Тогда
		СреднемесячноеКоличествоЧасов = (ЧислоРабочихДнейВГоду * 8 + ЧислоПредпраздничныхДнейВГоду * 7) / 12;

	Иначе
		СреднемесячноеКоличествоЧасов = ПродолжительностьРабочейНедели / 5 * (ЧислоРабочихДнейВГоду + ЧислоПредпраздничныхДнейВГоду) / 12;

	КонецЕсли;

	// расчет часовой ставки
	Возврат ?(СреднемесячноеКоличествоЧасов = 0, 0, Оклад / СреднемесячноеКоличествоЧасов);

КонецФункции

// Выделяет из кода элемента адресного классификатора код региона (24 и 25 цифры кода)
//
// Параметры
//  КодАдресногоЭлемента  – Строка – код элемента  адресного классификатора
//
// Возвращаемое значение:
//   Строка   – код региона РФ
//
Функция ПолучитьКодРегионаРФИзКодаАдресногоЭлемента(КодАдресногоЭлемента) Экспорт

	СтрКодАдрЭлемента = Формат(КодАдресногоЭлемента, "ЧГ=0");
	Если СтрКодАдрЭлемента = "" Тогда
		Возврат "";
	КонецЕсли; 

	КодРегиона = Лев(СтрКодАдрЭлемента, СтрДлина(СтрКодАдрЭлемента) - 23);

	// Код региона должен состоять из 2 цифр. Например: 03, 77
	Возврат  Прав("00" + КодРегиона,2);

КонецФункции 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБЕСПЕЧЕНИЯ РАБОТЫ ФОРМ ДОКУМЕНТОВ

// Процедура открывает форму выбора сотрудников организации
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на документ из которого открывается форма
//	ЗакрыватьПриВыборе 	- Булево
//	ДатаСреза 			- дата, передается в форму для получения доп. данных по сотруднику на эту дату
//	ГоловнаяОрганизация - головная организация
//	КогоПодбирать 		- 0-всех, 1 - только по трудовым договорам, 2 - только договора ГПХ
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы
//
Процедура ОткрытьФормуВыбораСотрудникаОрганизации(Владелец, Ключ, ЗакрыватьПриВыборе, ДатаСреза, ГоловнаяОрганизация, КогоВыбирать = 0, СтандартнаяОбработка = Неопределено, ТекущееЗначение = Неопределено, НеВыбиратьГруппы = Истина, ВыборФизлица = Ложь, ПараметрыПодбора = Неопределено) Экспорт

	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.СотрудникиОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	
	Форма.ДатаСреза 					= ДатаСреза;
	Если НеВыбиратьГруппы Тогда
		Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
	КонецЕсли;	
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= ЗакрыватьПриВыборе;
	Форма.ВыборФизлица					= ВыборФизлица;
	//Форма.мПараметрыПодбора				= ПараметрыПодбора;
	
	Если ТекущееЗначение <> Неопределено Тогда
		Если ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			Форма.ПараметрТекущаяСтрока		= ТекущееЗначение;
			
		ИначеЕсли ТипЗнч(ТекущееЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос = Новый Запрос;
			
			СписокВидовЗанятости = Новый СписокЗначений;
			СписокВидовЗанятости.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);			
			
			Запрос.УстановитьПараметр("Физлицо",				ТекущееЗначение);
			Запрос.УстановитьПараметр("ВидЗанятости",			Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
			Запрос.УстановитьПараметр("ГоловнаяОрганизация",	ГоловнаяОрганизация);
			Запрос.УстановитьПараметр("ДатаСреза",	ДатаСреза);
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Ссылка
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.ВидЗанятости <> &ВидЗанятости
			|	И СотрудникиОрганизаций.Физлицо = &Физлицо
			|	И СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
			|	И (СотрудникиОрганизаций.ДатаУвольнения >= &ДатаСреза
			|				И СотрудникиОрганизаций.ДатаПриемаНаРаботу <= &ДатаСреза
			|			ИЛИ СотрудникиОрганизаций.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|				И (СотрудникиОрганизаций.ДатаПриемаНаРаботу <= &ДатаСреза
			|					ИЛИ СотрудникиОрганизаций.ДатаПриемаНаРаботу = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)))
			|
			|УПОРЯДОЧИТЬ ПО
			|	СотрудникиОрганизаций.ДатаПриемаНаРаботу УБЫВ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Форма.ПараметрТекущаяСтрока	= Выборка.Ссылка;
			КонецЕсли;
			
		Иначе
			ОбщегоНазначения.СообщитьОбОшибке("Неверный тип параметра: " + ТипЗнч(ТекущееЗначение));
			
		КонецЕсли;
	КонецЕсли;
	
	//установим отборы
	Форма.Отбор.Организация.Установить(ГоловнаяОрганизация);
	Форма.Отбор.Организация.Использование = ЗначениеЗаполнено(ГоловнаяОрганизация);
		
	Форма.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораСотрудникаОрганизации()

Функция ПодобратьФИОСотрудника(СтандартнаяОбработка, Режим, Знач Текст, Организация = Неопределено, ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина, Регистратор = Неопределено) Экспорт
	
	ТекстАвтоПодбора = "";
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
		
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	//условие по Организации используем, если в качестве параметра передана не пустая ссылка на справочник
	Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Иначе
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", Не (ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")));
	
	Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Не ТолькоАктуальные);
	
	Если Режим = 0 или Режим = 1 или Режим = 6 Тогда
		
		
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	Сотрудники.ФизлицоНаименование КАК Наименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|		Работники.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК Работники
			|	ГДЕ
			|		Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Работники.Сотрудник.Актуальность)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|		Договорники.Физлицо.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК Договорники
			|	ГДЕ
			|		Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Договорники.Актуальность)) КАК Сотрудники";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
			|	Сотрудники.Наименование КАК Наименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Работники.Сотрудник.Наименование КАК Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК Работники
			|	ГДЕ
			|		Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Работники.Сотрудник.Актуальность)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		Договорники.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК Договорники
			|	ГДЕ
			|		Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Договорники.Актуальность)) КАК Сотрудники";
			
		КонецЕсли;
		
	ИначеЕсли Режим = 2 или Режим = 3 или Режим = 4 или Режим = 5 или Режим = 7 или Режим = 9 или Режим = 10 Тогда
		
		Если Режим = 2 Тогда

		ИначеЕсли Режим = 3 Тогда
		ИначеЕсли Режим = 4 Тогда
		ИначеЕсли Режим = 5 Тогда
		ИначеЕсли Режим = 7 Тогда
		ИначеЕсли Режим = 9 Тогда
		ИначеЕсли Режим = 10 Тогда
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
            |   Работники.Сотрудник.Физлицо.Наименование КАК Наименование
            |ИЗ
            |   РегистрСведений.РаботникиОрганизаций КАК Работники
            |ГДЕ
            |   Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
            |   И (&НеОтбиратьПоОрганизации
            |           ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
            |   И (&НеУчитыватьАктуальность
            |           ИЛИ Работники.Сотрудник.Актуальность)";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
            |   Работники.Сотрудник.Наименование КАК Наименование
            |ИЗ
            |   РегистрСведений.РаботникиОрганизаций КАК Работники
            |ГДЕ
            |   Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
            |   И (&НеОтбиратьПоОрганизации
            |           ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
            |   И (&НеУчитыватьАктуальность
            |           ИЛИ Работники.Сотрудник.Актуальность)";
			
		КонецЕсли;
		
	ИначеЕсли Режим = 8 Тогда
		
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
        |   Сотрудники.Наименование КАК Наименование
        |ИЗ
        |   Справочник.СотрудникиОрганизаций КАК Сотрудники
        |ГДЕ
        |   Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
        |   И (&НеОтбиратьПоОрганизации
        |           ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
        |   И (&НеУчитыватьАктуальность
        |           ИЛИ Сотрудники.Актуальность)";
		
	ИначеЕсли Режим = 11 или Режим = 12 Тогда	
		
		Если Регистратор = Неопределено И Режим = 11 Тогда
			Регистратор = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
		ИначеЕсли Регистратор = Неопределено И Режим = 12 Тогда
			Регистратор = Документы.ПриказОЗачисленииВСпискиЧасти.ПустаяСсылка();	
		КонецЕсли;
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		Если Режим = 11 Тогда
		ИначеЕсли Режим = 12 Тогда
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
        |   Сотрудники.Наименование КАК Наименование
        |ИЗ
        |   Справочник.СотрудникиОрганизаций КАК Сотрудники
        |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
        |       ПО Сотрудники.Ссылка = Работники.Сотрудник
        |           И (Работники.Регистратор <> &Регистратор)
        |ГДЕ
        |   Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
        |   И (&НеОтбиратьПоОрганизации
        |           ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
        |   И (&НеУчитыватьАктуальность
        |           ИЛИ Сотрудники.Актуальность)
        |   И Работники.Сотрудник ЕСТЬ NULL ";
		
	Иначе
		
		Возврат ТекстАвтоПодбора;
		
	КонецЕсли;		
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

	Возврат ТекстАвтоПодбора;
	
КонецФункции // ПодобратьФИОСотрудника()

// Функция ищет сотрудника среди работников предприятия или организаций по
//  началу его наименования
//
// Параметры
// 	СтандартнаяОбработка – параметр стандартной обработки события обработчика АвтоПодборТекста
//	Режим – строка, определяет источники, из которых производится подбор 
//	Текст  - начальные буквы ФИО, текст из обработчика АвтоПодборТекста
//	Организация – ссылка на организацию по которой подбирать сотрудников (работников)
//	ВозвращатьФизлицо – параметр определяет, что должна вернуть функция, ссылку на Сотрудника или Физлицо
//	ТолькоАктуальных – параметр определяет, вести поиск среди всех сотрудников, или только актуальных
//	Регистратор - при вызове из приема на работу передаем ссылку на текущий Документ
//
// Возвращаемое значение
//  СписокЗначений - список подходящих физлиц, если их найдено не более 50
//  Неопределено - если найдено более 50 подходящих физлиц
//
Функция ПодобратьСписокСотрудников(СтандартнаяОбработка, Режим, Знач Текст, Организация = Неопределено, ВозвращатьФизлицо = Ложь, ТолькоАктуальные = Истина, Регистратор = Неопределено) Экспорт
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// заменим спецсимволы
	Текст = СОКРЛП(Текст);
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	
	//условие по Организации используем, если в качестве параметра передана не пустая ссылка на справочник
	Если ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	Иначе
		Запрос.УстановитьПараметр("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	Запрос.УстановитьПараметр("НеОтбиратьПоОрганизации", Не (ЗначениеЗаполнено(Организация) и ТипЗнч(Организация) = Тип("СправочникСсылка.Организации")));
	
	Запрос.УстановитьПараметр("НеУчитыватьАктуальность", Не ТолькоАктуальные);
	
	
    Если Режим = 0 или Режим = 1 или Режим = 6 Тогда
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Сотрудники.Физлицо КАК Ссылка,
			|	Сотрудники.ФизлицоНаименование КАК Наименование,
			|	Сотрудники.Код КАК Код,
			|	Сотрудники.НайденоПоНаименованию КАК НайденоПоНаименованию,
			|	Сотрудники.СотрудникНаименование КАК СотрудникНаименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Работники.Сотрудник.Физлицо КАК Физлицо,
			|		Работники.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|		Работники.Сотрудник.Код КАК Код,
			|		ИСТИНА КАК НайденоПоНаименованию,
			|		Работники.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК Работники
			|	ГДЕ
			|		Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Работники.Сотрудник.Актуальность)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Договорники.Физлицо,
			|		Договорники.Физлицо.Наименование,
			|		Договорники.Код,
			|		ИСТИНА,
			|		Договорники.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК Договорники
			|	ГДЕ
			|		Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Договорники.Актуальность)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Работники.Сотрудник.Физлицо,
			|		Работники.Сотрудник.Физлицо.Наименование,
			|		Работники.Сотрудник.Код,
			|		ЛОЖЬ,
			|		Работники.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК Работники
			|	ГДЕ
			|		Работники.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Работники.Сотрудник.Актуальность)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Договорники.Физлицо,
			|		Договорники.Физлицо.Наименование,
			|		Договорники.Код,
			|		ЛОЖЬ,
			|		Договорники.Наименование
			|	ИЗ
			|		Справочник.СотрудникиОрганизаций КАК Договорники
			|	ГДЕ
			|		Договорники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Договорники.Актуальность)) КАК Сотрудники
			|
			|УПОРЯДОЧИТЬ ПО
			|	СотрудникНаименование УБЫВ";
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Работники.Сотрудник КАК Сотрудник,
			|	Работники.Сотрудник.Наименование КАК СотрудникНаименование,
			|	Работники.Сотрудник.Актуальность КАК Актуальность,
			|	ИСТИНА КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|ГДЕ
			|	Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И (&НеОтбиратьПоОрганизации
			|			ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|	И (&НеУчитыватьАктуальность
			|			ИЛИ Работники.Сотрудник.Актуальность)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Наименование,
			|	Работники.Сотрудник.Актуальность,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|ГДЕ
			|	Работники.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И (&НеОтбиратьПоОрганизации
			|			ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|	И (&НеУчитыватьАктуальность
			|			ИЛИ Работники.Сотрудник.Актуальность)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	ВТ_СписокРаботников.Сотрудник КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ВТ_СписокРаботников.Сотрудник.Актуальность
			|			ТОГДА ВЫБОР
			|					КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|						ТОГДА ""(ув.) "" + ВТ_СписокРаботников.СотрудникНаименование
			|					ИНАЧЕ ВТ_СписокРаботников.СотрудникНаименование
			|				КОНЕЦ
			|		ИНАЧЕ ""(не актуалент) "" + ВТ_СписокРаботников.СотрудникНаименование
			|	КОНЕЦ КАК Наименование,
			|	ВТ_СписокРаботников.НайденоПоНаименованию КАК НайденоПоНаименованию
			|ИЗ
			|	ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&ДатаАктуальности,
			|				Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТ_СписокРаботников.Сотрудник
			|					ИЗ
			|						ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|		ПО (РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Договорники.Ссылка,
			|	ВЫБОР
			|		КОГДА Договорники.Актуальность
			|			ТОГДА Договорники.Наименование
			|		ИНАЧЕ ""(не актуалент) "" + Договорники.Наименование
			|	КОНЕЦ,
			|	ИСТИНА
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК Договорники
			|ГДЕ
			|	Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И (&НеОтбиратьПоОрганизации
			|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
			|	И (&НеУчитыватьАктуальность
			|			ИЛИ Договорники.Актуальность)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Договорники.Ссылка,
			|	ВЫБОР
			|		КОГДА Договорники.Актуальность
			|			ТОГДА Договорники.Наименование
			|		ИНАЧЕ ""(не актуалент) "" + Договорники.Наименование
			|	КОНЕЦ,
			|	ЛОЖЬ
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК Договорники
			|ГДЕ
			|	Договорники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И (&НеОтбиратьПоОрганизации
			|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
			|	И (&НеУчитыватьАктуальность
			|			ИЛИ Договорники.Актуальность)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
		КонецЕсли;

	ИначеЕсли Режим = 2 или Режим = 3 или Режим = 4 или Режим = 5 или Режим = 7 или Режим = 9 или Режим = 10 Тогда
		
		Если Режим = 2 Тогда
		ИначеЕсли Режим = 3 Тогда
		ИначеЕсли Режим = 4 Тогда
		ИначеЕсли Режим = 5 Тогда
		ИначеЕсли Режим = 7 Тогда
		ИначеЕсли Режим = 9 Тогда
		ИначеЕсли Режим = 10 Тогда
		КонецЕсли;
		
		Если ВозвращатьФизлицо Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Сотрудники.Физлицо КАК Ссылка,
			|	Сотрудники.ФизлицоНаименование КАК Наименование,
			|	Сотрудники.Код КАК Код,
			|	Сотрудники.НайденоПоНаименованию КАК НайденоПоНаименованию,
			|	Сотрудники.СотрудникНаименование КАК СотрудникНаименование
			|ИЗ
			|	(ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Работники.Сотрудник.Физлицо КАК Физлицо,
			|		Работники.Сотрудник.Физлицо.Наименование КАК ФизлицоНаименование,
			|		Работники.Сотрудник.Код КАК Код,
			|		ИСТИНА КАК НайденоПоНаименованию,
			|		Работники.Сотрудник.Наименование КАК СотрудникНаименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК Работники
			|	ГДЕ
			|		Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Работники.Сотрудник.Актуальность)
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|		Работники.Сотрудник.Физлицо,
			|		Работники.Сотрудник.Физлицо.Наименование,
			|		Работники.Сотрудник.Код,
			|		ЛОЖЬ,
			|		Работники.Сотрудник.Наименование
			|	ИЗ
			|		РегистрСведений.РаботникиОрганизаций КАК Работники
			|	ГДЕ
			|		Работники.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|		И (&НеОтбиратьПоОрганизации
			|				ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|		И (&НеУчитыватьАктуальность
			|				ИЛИ Работники.Сотрудник.Актуальность)) КАК Сотрудники
			|
			|УПОРЯДОЧИТЬ ПО
			|	СотрудникНаименование УБЫВ";
			
		Иначе
			
			Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Работники.Сотрудник КАК Сотрудник,
			|	Работники.Сотрудник.Наименование КАК СотрудникНаименование,
			|	Работники.Сотрудник.Актуальность КАК Актуальность,
			|	ИСТИНА КАК НайденоПоНаименованию
			|ПОМЕСТИТЬ ВТ_СписокРаботников
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|ГДЕ
			|	Работники.Сотрудник.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И (&НеОтбиратьПоОрганизации
			|			ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|	И (&НеУчитыватьАктуальность
			|			ИЛИ Работники.Сотрудник.Актуальность)
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	Работники.Сотрудник,
			|	Работники.Сотрудник.Наименование,
			|	Работники.Сотрудник.Актуальность,
			|	ЛОЖЬ
			|ИЗ
			|	РегистрСведений.РаботникиОрганизаций КАК Работники
			|ГДЕ
			|	Работники.Сотрудник.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
			|	И (&НеОтбиратьПоОрганизации
			|			ИЛИ Работники.Сотрудник.Организация = &ГоловнаяОрганизация)
			|	И (&НеУчитыватьАктуальность
			|			ИЛИ Работники.Сотрудник.Актуальность)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
			|	ВТ_СписокРаботников.Сотрудник КАК Ссылка,
			|	ВЫБОР
			|		КОГДА ВТ_СписокРаботников.Сотрудник.Актуальность
			|			ТОГДА ВЫБОР
			|					КОГДА РаботникиСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
			|						ТОГДА ""(ув.) "" + ВТ_СписокРаботников.СотрудникНаименование
			|					ИНАЧЕ ВТ_СписокРаботников.СотрудникНаименование
			|				КОНЕЦ
			|		ИНАЧЕ ""(не актуалент) "" + ВТ_СписокРаботников.СотрудникНаименование
			|	КОНЕЦ КАК Наименование,
			|	ВТ_СписокРаботников.НайденоПоНаименованию КАК НайденоПоНаименованию
			|ИЗ
			|	ВТ_СписокРаботников КАК ВТ_СписокРаботников
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
			|				&ДатаАктуальности,
			|				Сотрудник В
			|					(ВЫБРАТЬ
			|						ВТ_СписокРаботников.Сотрудник
			|					ИЗ
			|						ВТ_СписокРаботников)) КАК РаботникиСрезПоследних
			|		ПО (РаботникиСрезПоследних.Сотрудник = ВТ_СписокРаботников.Сотрудник)
			|
			|УПОРЯДОЧИТЬ ПО
			|	Наименование УБЫВ";
			
		КонецЕсли;

	ИначеЕсли Режим = 8 Тогда
		
	
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
		|	Договорники.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Договорники.Актуальность
		|			ТОГДА Договорники.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + Договорники.Наименование
		|	КОНЕЦ КАК Наименование,
		|	ИСТИНА КАК НайденоПоНаименованию
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Договорники
		|ГДЕ
		|	Договорники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Договорники.Актуальность)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	Договорники.Ссылка,
		|	ВЫБОР
		|		КОГДА Договорники.Актуальность
		|			ТОГДА Договорники.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + Договорники.Наименование
		|	КОНЕЦ,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Договорники
		|ГДЕ
		|	Договорники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Договорники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Договорники.Актуальность)";
		
	ИначеЕсли Режим = 11 или Режим = 12 Тогда	
		
		Если Регистратор = Неопределено И Режим = 11 Тогда
			Регистратор = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
		ИначеЕсли Регистратор = Неопределено И Режим = 12 Тогда
			Регистратор = Документы.ПриказОЗачисленииВСпискиЧасти.ПустаяСсылка();	
		КонецЕсли;
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		

		Если Режим = 11 Тогда

		ИначеЕсли Режим = 12 Тогда
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	ВЫБОР
		|		КОГДА Сотрудники.Актуальность
		|			ТОГДА Сотрудники.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + Сотрудники.Наименование
		|	КОНЕЦ КАК Наименование,
		|	Сотрудники.Ссылка КАК Ссылка,
		|	ИСТИНА КАК НайденоПоНаименованию
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (Работники.Регистратор <> &Регистратор)
		|ГДЕ
		|	Сотрудники.Наименование ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И Работники.Сотрудник ЕСТЬ NULL 
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Сотрудники.Актуальность)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	ВЫБОР
		|		КОГДА Сотрудники.Актуальность
		|			ТОГДА Сотрудники.Наименование
		|		ИНАЧЕ ""(не актуалент) "" + Сотрудники.Наименование
		|	КОНЕЦ,
		|	Сотрудники.Ссылка,
		|	ЛОЖЬ
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (Работники.Регистратор <> &Регистратор)
		|ГДЕ
		|	Сотрудники.Код ПОДОБНО &Текст СПЕЦСИМВОЛ ""~""
		|	И Работники.Сотрудник ЕСТЬ NULL 
		|	И (&НеОтбиратьПоОрганизации
		|			ИЛИ Сотрудники.Организация = &ГоловнаяОрганизация)
		|	И (&НеУчитыватьАктуальность
		|			ИЛИ Сотрудники.Актуальность)";
		
	Иначе
		
		Возврат Новый СписокЗначений;
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество < 51 Тогда
		
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, ?(Выборка.НайденоПоНаименованию,Выборка.Наименование, Выборка.Код + " (" + Выборка.Наименование + ")"));
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		Возврат Значение;
		
	Иначе
		// значений для выбора больше 50
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПодобратьСписокСотрудников()


// проставляет в строку табличной части или реквизит формы полученные данные по Сотруднику
//
Процедура ПроставитьДанныеСтроки(Сотрудник, ДатаСобытия, ЭлементФормы) Экспорт
		
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("парамДатаСобытия", ДатаСобытия);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|	РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамДатаСобытия, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	Запрос.Текст = ТекстЗапроса;
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	Если НаборыДанных.Количество() = 0 Тогда
		// Если не нашли данных - ничего не делаем
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ЭлементФормы) = Тип("ТабличноеПоле") Тогда
		
		// поле ПодразделениеОрганизации есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("ПодразделениеОрганизации") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.ПодразделениеОрганизации = НаборыДанных[0].ПодразделениеОрганизации;
		КонецЕсли;
		
		// поле Должность есть не во всех табличных частях
		Если ЭлементФормы.Колонки.Найти("Должность") <> Неопределено Тогда
			ЭлементФормы.ТекущаяСтрока.Должность = НаборыДанных[0].Должность;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроставитьДанныеСтроки()

// Открывает форму выбора работника для подбора его в табличную часть
//
// Владелец - табличное поле с табличной частью документа
//            в такой табличной части документа подбирается физлицо из числа работников компании
//
// СтандартнаяОбработка - флаг стандартной обработки события НачалоВыбора
//
// Ключ - ключ уникальности открываемой формы
//
// Подразделение - ссылка на подразделение, если передана пустая ссылка, выбираются 
//					работники всех подразделений
// 
Процедура ОткрытьФормуВыбораКандидата(Владелец, СтандартнаяОбработка, Ключ, Статус) Экспорт

	Форма = ПолучитьОбщуюФорму("ФормаВыбораКандидата", Владелец, Ключ);

	Форма.РежимВыбора      = Истина;
	Форма.СтатусКандидатов = Статус;
	Форма.ПараметрФизлицо  = Владелец.ТекущаяСтрока.Физлицо;

	Форма.Открыть();
	СтандартнаяОбработка   = Ложь;

КонецПроцедуры  // ОткрытьФормуВыбораФизлица

// процедура устанавливает текущую строку в табличных полях формы 
// объекта, связанных с табличными частями объекта
// предположения:
// все табличные части и соответсвующие им табличные поля - одноименны
// все "синхронизируемые" табличные части имеют колонку с одинаковым 
// именем по которой ведется синхронизация
// 
// Параметры:
// 	Форма - форма объекта
//  Объект - объект данных
//  Элемент - элемент формы в котором возникла активизация строки
//  СинхронизируемыеТабличныеЧасти - соответствие с 
//  			элементами, соответствующими синхронизируемым табличным полям
//  ИмяКолонки - имя колонки синхронизации
Процедура СинхронизироватьСтроки(Форма, Объект, Элемент, СинхронизируемыеТабличныеЧасти, ИмяКолонки) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Имя = Элемент.Имя;
	Если СинхронизируемыеТабличныеЧасти[Имя] Тогда
		СинхронизируемыеТабличныеЧасти[Имя] = Ложь;
		Возврат;
	КонецЕсли;

	Для Каждого ЭлементСоответствия Из СинхронизируемыеТабличныеЧасти Цикл

		Если ЭлементСоответствия.Ключ = Имя Тогда 
			Продолжить;
		КонецЕсли;

		Попытка
			СтрокаТЧ = Объект[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		Исключение
			СтрокаТЧ = Форма[ЭлементСоответствия.Ключ].Найти(Элемент.ТекущиеДанные[ИмяКолонки], ИмяКолонки);
		КонецПопытки;

		Если СтрокаТЧ <> Неопределено Тогда

			СинхронизируемыеТабличныеЧасти[ЭлементСоответствия.Ключ]    = Истина;
			Форма.ЭлементыФормы[ЭлементСоответствия.Ключ].ТекущаяСтрока = СтрокаТЧ;

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  //  СинхронизироватьСтроки

// Увеличивает номер в переданной строке на 1
//
// Параметры
//  ПоследнийНомер - строка - представляет собой номер (документа, табельный и т.п.)
//
// Возвращаемое значение:
//  строка  - следующий по порядку номер
//
Функция ПолучитьСледующийНомер(ПоследнийНомер) Экспорт 

	ДлинаНомера = СтрДлина(ПоследнийНомер);
	Если ДлинаНомера = 0 Тогда
		Возврат "1"
	КонецЕсли;
	СчетчикСимв = ДлинаНомера;
	Пока СчетчикСимв > 0 Цикл
		Если Не ПустаяСтрока(Сред(ПоследнийНомер, СчетчикСимв, 1)) и ОбщегоНазначения.ТолькоЦифрыВСтроке(Сред(ПоследнийНомер, СчетчикСимв, 1)) Тогда
			СчетчикСимв = СчетчикСимв - 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СчетчикСимв = ДлинаНомера Тогда
		НомерЧисловой = 1
	Иначе
		НомерЧисловой = Число(Сред(ПоследнийНомер, СчетчикСимв + 1));
	КонецЕсли;
	Если НомерЧисловой < Pow(10, ДлинаНомера - СчетчикСимв) - 1 Тогда
		СледующийНомер = НомерЧисловой + 1;
	Иначе
		СледующийНомер = НомерЧисловой;
	КонецЕсли;
	НовыйНомер = Лев(ПоследнийНомер,  СчетчикСимв) + Формат(СледующийНомер,"ЧЦ=" + (ДлинаНомера - СчетчикСимв) + "; ЧВН=; ЧГ=0");
	Возврат НовыйНомер
	
КонецФункции // ПолучитьСледующийНомер()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫПОЛНЯЮЩИЕ ВКЛЮЧЕНИЕ (ВЫКЛЮЧЕНИЕ) ПОДДЕРЖКИ ВНУТРЕННОГО СОВМЕСТИТЕЛЬСТВА

// Функция проверяет можно ли отключать поддержку внутренних совместителей
//
// Параметры: 
//	нет
//
// Возвращаемое значение:
//  Истина - можно отключать, Ложь - существуют внутренние совместители =>
//	отключение невозможно
//
// Описание:
//  Проверяет, есть ли внутренние совместители 
//
Функция МожноОтключатьВнутреннееСовместительство(Организация)
	
	#Если Клиент Тогда
	Состояние("Выполняется поиск внутренних совместителей");
	#КонецЕсли
				
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник КАК Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Организация = &Организация
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости = &ВнутреннееСовместительство");
	
	Запрос.УстановитьПараметр("Организация",				Организация);
	Запрос.УстановитьПараметр("ВнутреннееСовместительство",	Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отключить поддержку внутреннего совместительства невозможно, т.к. некоторые работники заняты на нескольких местах работы!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	

КонецФункции	//МожноОтключатьВнутреннееСовместительство()

// Функция выполняет запрос по документам у которых головная организация = организация и приказ либо,
//	пустой либо заполненный в зависимости от параметров
//
// Параметры: 
//	ПустойПриказ - пустая ссылка на док. ПриемНаРаботуВОрганизацию
//	ИмяТаблицы - строковая переменная, вид документа (возможно, вместе с табличной частью)
//  Организация - организация по которой строим запрос
//	ПустаяОрганизация - пустая ссылка на справочник "Организации"
//  ЭтоЗапросПоТЧ - булево, если истина, то запрос строится по табличной части
//	Заполнить - булево, если истина, запрос строится по пустому приказу, иначе по заполненному
//
// Возвращаемое значение:
//  Возвращает запрос
// 
Функция СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, ПустаяОрганизация, ЭтоЗапросПоТЧ = Ложь, Заполнить = Истина)
	
	ЗапросПоДокументам = Новый Запрос();
	
	Если Заполнить Тогда
		
		Если ЭтоЗапросПоТЧ Тогда
			
			ЗапросПоТЧДокументовТекст = "";
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
			
				ИмяТаблицы = Элемент.Ключ;
				ИмяПоля = Элемент.Значение;
				
			    Если ЗапросПоТЧДокументовТекст <> "" Тогда
					
					ЗапросПоТЧДокументовТекст = ЗапросПоТЧДокументовТекст + "
					|
					|Объединить
					|";
					
				КонецЕсли;
				
				ЗапросПоТЧДокументовТекст = ЗапросПоТЧДокументовТекст +
				"ВЫБРАТЬ
				|   """ + ИмяТаблицы + """ КАК ИмяТЧ,
				|   Документ.Ссылка КАК Ссылка,
				|	Документ.НомерСтроки КАК НомерСтроки,
				|	Документ.ФизЛицо КАК ФизЛицо,
				|	Документ." + ИмяПоля + " КАК ДатаНачала
				|ИЗ
				|	Документ." + ИмяТаблицы + " КАК Документ
				|ГДЕ
				|	ВЫБОР КОГДА Документ.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Ссылка.Организация ИНАЧЕ Документ.Ссылка.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
				|	И Документ.Приказ = &парамПустойПриказ
				|";
			
			КонецЦикла;
		
			ЗапросПоДокументамТекст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|   ДатыПоследнихДвиженийРаботников.ИмяТЧ КАК ИмяТЧ,
			|   ДатыПоследнихДвиженийРаботников.Ссылка КАК Ссылка,
			|	ДатыПоследнихДвиженийРаботников.НомерСтроки КАК НомерСтроки,
			|   ДанныеПоРаботникуПриНазначении.Приказ КАК Приказ
			|ИЗ
			|	(ВЫБРАТЬ
			|  		Документ.ИмяТЧ КАК ИмяТЧ,
			| 		Документ.Ссылка КАК Ссылка,
			|		Документ.ФизЛицо КАК ФизЛицо,
			|		Документ.НомерСтроки КАК НомерСтроки,
			|		МАКСИМУМ(Работники.Период) КАК Период
			|	ИЗ
			|		(" + ЗапросПоТЧДокументовТекст + ") КАК Документ
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|			ПО Документ.ФизЛицо = Работники.Физлицо  
			|		        И Работники.Период <= Документ.ДатаНачала 
			|		        И (Работники.Организация = &Организация)
			|		        И (Работники.ПричинаИзмененияСостояния = &Прием)
			|				
			|	СГРУППИРОВАТЬ ПО
			|  		Документ.ИмяТЧ,
			|		Документ.Ссылка,
			|		Документ.ФизЛицо,
			|		Документ.НомерСтроки) КАК ДатыПоследнихДвиженийРаботников
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
			|	ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период  
			|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо 	
			|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)	
			|				
			|УПОРЯДОЧИТЬ ПО
			|	ДатыПоследнихДвиженийРаботников.Ссылка,
			|	ДатыПоследнихДвиженийРаботников.ИмяТЧ,
			|	ДатыПоследнихДвиженийРаботников.НомерСтроки";
			
		Иначе
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
			
				ИмяТаблицы = Элемент.Ключ;
				ИмяПоля = Элемент.Значение;
			
			КонецЦикла;
			
			ЗапросПоДокументамТекст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
			|	ДатыПоследнихДвиженийРаботников.Ссылка КАК Ссылка
			|ИЗ
			|	(ВЫБРАТЬ
			| 		Документ.Ссылка КАК Ссылка,
			|		Документ.ФизЛицо КАК ФизЛицо,
			|		МАКСИМУМ(Работники.Период) КАК Период
			|	ИЗ
			|		Документ." + ИмяТаблицы + " КАК Документ
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
			|			ПО Документ.ФизЛицо = Работники.Физлицо  
			|		        И Работники.Период <= Документ." + ИмяПоля + " 
			|		        И (Работники.Организация = &Организация)
			|		        И (Работники.ПричинаИзмененияСостояния = &Прием)
			|				
			|	ГДЕ
			|		ВЫБОР КОГДА Документ.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Организация ИНАЧЕ Документ.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
			|		И Документ.Приказ = &парамПустойПриказ
			|				
			|	СГРУППИРОВАТЬ ПО
			|		Документ.Ссылка,
			|		Документ.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
			|	ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период  
			|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо 	
			|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)
			|				
			|УПОРЯДОЧИТЬ ПО
			|	ДатыПоследнихДвиженийРаботников.Ссылка";
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоЗапросПоТЧ Тогда
			
			ЗапросПоДокументамТекст = "";
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
			
				ИмяТаблицы = Элемент.Ключ;
				
			    Если ЗапросПоДокументамТекст <> "" Тогда
					
					ЗапросПоДокументамТекст = ЗапросПоДокументамТекст + "
					|
					|Объединить
					|";
					
				КонецЕсли;
				
				ЗапросПоДокументамТекст = ЗапросПоДокументамТекст +
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|   """ + ИмяТаблицы + """ КАК ИмяТЧ,
				|   Документ.Ссылка КАК Ссылка
				|ИЗ
				|	Документ." + ИмяТаблицы + " КАК Документ
				|ГДЕ
				|	ВЫБОР КОГДА Документ.Ссылка.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Ссылка.Организация ИНАЧЕ Документ.Ссылка.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
				|	И Документ.Приказ <> &парамПустойПриказ
				|";
			
			КонецЦикла;
		
			ЗапросПоДокументамТекст = ЗапросПоДокументамТекст + "
			|				
			|УПОРЯДОЧИТЬ ПО
			|	Документ.Ссылка";
			
		Иначе
			
			Для каждого Элемент Из СоответствиеИменТаблиц Цикл
				ИмяТаблицы = Элемент.Ключ;
			КонецЦикла;
			
			ЗапросПоДокументамТекст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|   Документ.Ссылка КАК Ссылка
			|ИЗ
			|	Документ."+ ИмяТаблицы + " КАК Документ
			|ГДЕ
			|	ВЫБОР КОГДА Документ.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Документ.Организация ИНАЧЕ Документ.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
			|	И Документ.Приказ <> &парамПустойПриказ";
		КонецЕсли;
		
	
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = ЗапросПоДокументамТекст;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПоДокументам.УстановитьПараметр("парамПустаяОрганизация", ПустаяОрганизация);
	ЗапросПоДокументам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
	
	Возврат ЗапросПоДокументам.Выполнить();
	
	
КонецФункции //СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства

Функция ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(НаборЗаписей, СоответствиеИменТаблиц, Организация, ВычислятьГоловнуюОрганизацию, ПустаяОрганизация, ПустойПриказ, ТекстСообщенияОбОшибке)
	
	ЗапросПоРегистраторам = Новый Запрос();
	
	Для каждого Элемент Из СоответствиеИменТаблиц Цикл
		
		ИмяТаблицы = Элемент.Ключ;
		ИмяПоля = Элемент.Значение;
		
	КонецЦикла;
	
	ЗапросПоРегистраторамТекст =
	"ВЫБРАТЬ 
	|	ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
	|	ДатыПоследнихДвиженийРаботников.ФизЛицо КАК ФизЛицо,
	|	ДатыПоследнихДвиженийРаботников.ДатаВРегистре КАК ДатаВРегистре,
	|	ДатыПоследнихДвиженийРаботников.Регистратор КАК Регистратор
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Регистр.Регистратор КАК Регистратор,
	|		Регистр.ФизЛицо КАК ФизЛицо,
	|		Регистр." + ИмяПоля + " КАК ДатаВРегистре,
	|		МАКСИМУМ(Работники.Период) КАК Период
	|	ИЗ
	|	" + ИмяТаблицы + " КАК Регистр
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
	|			ПО Регистр.ФизЛицо = Работники.Физлицо  
	|		        И Работники.Период <= Регистр." + ИмяПоля + " 
	|		        И (Работники.Организация = &Организация)
	|		        И (Работники.ПричинаИзмененияСостояния = &Прием)
	|				
	|	ГДЕ";
	Если ВычислятьГоловнуюОрганизацию Тогда
		ЗапросПоРегистраторамТекст = ЗапросПоРегистраторамТекст + "
	|		ВЫБОР КОГДА Регистр.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Регистр.Организация ИНАЧЕ Регистр.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация"
	Иначе
		ЗапросПоРегистраторамТекст = ЗапросПоРегистраторамТекст + "
	|		Регистр.Организация = &Организация"
	КонецЕсли;
	ЗапросПоРегистраторамТекст = ЗапросПоРегистраторамТекст + "
	|		И Регистр.Приказ = &парамПустойПриказ
	|				
	|	СГРУППИРОВАТЬ ПО
	|		Регистр.Регистратор,
	|		Регистр." + ИмяПоля + ",
	|		Регистр.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
	|	ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период  
	|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо 	
	|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)
	|				
	|УПОРЯДОЧИТЬ ПО
	|	ДатыПоследнихДвиженийРаботников.Регистратор";
	

	ЗапросПоРегистраторам.Текст = ЗапросПоРегистраторамТекст;
	ЗапросПоРегистраторам.УстановитьПараметр("Организация", Организация);
	ЗапросПоРегистраторам.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустаяОрганизация", ПустаяОрганизация);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
	
	Выборка = ЗапросПоРегистраторам.Выполнить().Выбрать();
	СтруктураОтбора = Новый Структура("ФизЛицо," + ИмяПоля);
	
	Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);				
		НаборЗаписей.Прочитать();
		ВременнаяТаблица = НаборЗаписей.Выгрузить();
		ВременнаяТаблица.Индексы.Добавить("ФизЛицо," + ИмяПоля);
		Пока Выборка.Следующий() Цикл						
			СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо;
			СтруктураОтбора[ИмяПоля] = Выборка.ДатаВРегистре;
			СтрокиИзНабора = ВременнаяТаблица.НайтиСтроки(СтруктураОтбора);
			Для каждого СтрокаНабора Из СтрокиИзНабора Цикл
				СтрокаНабора.Приказ = Выборка.Приказ
			КонецЦикла;
		КонецЦикла;
		НаборЗаписей.Загрузить(ВременнаяТаблица);
		Попытка
			НаборЗаписей.Записать();
		Исключение
			Сообщить(ТекстСообщенияОбОшибке);
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;								
	
КонецФункции //СформироватьЗапросКРегиструДляПодключенияПоддержкиВнутреннегоСовместительства

// Процедура выполняет запрос по регистрам для "заполнения" "очищения" приказа
//
// Параметры: 
//	Регистр - имя регистра по которому строим запрос
//	Организация	- организация по которой строим запрос
//	парамПустаяОрганизация - пустая ссылка на спр. организации
//	Имя - наименование регистра
//  ТаблицаФизЛицИПриказов - таблица из физ. лиц и приказов
//  Действие - действие над регистром, 1 - заполнить приказ, 2 - очистить приказ
//	ПустойПриказ - пустая ссылка на документ "Приказ о приеме в организацию
//
Функция СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства(Регистр, Организация, парамПустаяОрганизация, ПустойПриказ = Неопределено)
	
	ЗапросПоРегистраторам = Новый Запрос();
	ЗапросПоРегистраторам.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ 
	|	Регистр.Регистратор
	|ИЗ 
	|	" + Регистр + " КАК Регистр
	|
	|ГДЕ
	|	ВЫБОР КОГДА Регистр.Организация.ГоловнаяОрганизация = &парамПустаяОрганизация ТОГДА Регистр.Организация ИНАЧЕ Регистр.Организация.ГоловнаяОрганизация КОНЕЦ = &Организация
	|	И Регистр.Приказ <> &парамПустойПриказ";
	
	ЗапросПоРегистраторам.УстановитьПараметр("Организация",Организация);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
	ЗапросПоРегистраторам.УстановитьПараметр("парамПустаяОрганизация",парамПустаяОрганизация);
			
    Возврат ЗапросПоРегистраторам.Выполнить();
	
КонецФункции  //СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства

// Производит очистку реквизита "Приказ" и запись данных набора записей регистра
//
// Параметры:
//  НаборЗаписей	- набор записей регистра,
//  Выборка			- выборка по регистру,
//	ИмяРегистра		- Имя регистра
//
Процедура ОчиститьПриказВНабореЗаписей(НаборЗаписей,Регистратор,ПустойПриказ)

	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);				
	НаборЗаписей.Прочитать();
	Для каждого Запись Из НаборЗаписей Цикл
		Запись.Приказ	= ПустойПриказ;
	КонецЦикла; 
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(НаборЗаписей.Метаданные().Имя + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Включение режима поддержки внутреннего совместительства
// Производит заполнение реквизита "Приказ" и запись данных набора записей регистра
//
// Параметры:
//  Организация
//
// Возвращаемое значение:
//  Истина	- если действе выполнено успешно
//	Ложь	- если действе выполнено неуспешно
//
Функция ВключениеПоддержкиСовместителей(Организация) Экспорт
	
	ПустойПриказ = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
	парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	ТипДата = Тип("Дата");
	
	// заполним измерение "Приказ" в регистрах сведений
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыСведений Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;			
			
			#Если Клиент Тогда
				Состояние("Заполняется измерение ""Приказ"" в регистре сведений: " + Имя);
			#КонецЕсли			
			
			ИмяРеквизита = "Период";
			ВычислятьГоловнуюОрганизацию = Ложь;
			Если Имя = "НамеченныеСобытияПоПерсоналуОрганизаций" Тогда
				ИмяРеквизита = "ДатаИзменения";
				ВычислятьГоловнуюОрганизацию = Истина;
			КонецЕсли;
			СоответствиеИменТаблиц = Новый Соответствие;
			СоответствиеИменТаблиц.Вставить("РегистрСведений."+Имя, ИмяРеквизита);
			
			ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыСведений[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, ВычислятьГоловнуюОрганизацию, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр сведений: " + Имя);
		КонецЕсли;
	КонецЦикла;	
	
	// заполним измерение "Приказ" в регистрах накопления
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыНакопления Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;			
			
			#Если Клиент Тогда
				Состояние("Заполняется измерение ""Приказ"" в регистре накоплений: " + Имя);
			#КонецЕсли			
			
			СоответствиеИменТаблиц = Новый Соответствие;
			СоответствиеИменТаблиц.Вставить("РегистрНакопления."+Имя, "Период");
			
			ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыНакопления[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, Ложь, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр накоплений: " + Имя);
			
		КонецЕсли;
	КонецЦикла;
	
	// заполним измерение "Приказ" в регистрах расчета
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыРасчета Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;						
			СоответствиеИменТаблиц = Новый Соответствие;
			
			#Если Клиент Тогда
				Состояние("Заполняется измерение ""Приказ"" в регистре расчета: " + Имя);
			#КонецЕсли			
		
			Если МетаданныеРегистра.ПериодДействия Тогда
			
				Если Имя = "ОсновныеНачисленияРаботниковОрганизаций" Тогда
					ИмяРеквизита = "ДатаНачалаСобытия"
				Иначе 
					ИмяРеквизита = "ПериодДействияНачало";
				КонецЕсли;
				
				СоответствиеИменТаблиц.Вставить("РегистрРасчета."+Имя, ИмяРеквизита);
				
				ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыРасчета[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, Ложь, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр расчета: " + Имя);
				
			ИначеЕсли Имя = "РасчетСреднегоЗаработка" Тогда
				
				ИмяРеквизита = "ДатаОкончанияРасчетногоПериода";
				
				СоответствиеИменТаблиц.Вставить("РегистрРасчета."+Имя, ИмяРеквизита);
				
				ОбработатьРегистрДляПоддержкиВнутреннегоСовместительства(РегистрыРасчета[Имя].СоздатьНаборЗаписей(), СоответствиеИменТаблиц, Организация, Ложь, парамПустаяОрганизация, ПустойПриказ, "Не удалось обработать регистр расчета: " + Имя);
				
			Иначе
				
				ЗапросПоРегистраторам = Новый Запрос();
				ЗапросПоРегистраторамТекст =
				"ВЫБРАТЬ
				|	ДанныеПоРаботникуПриНазначении.Регистратор КАК Приказ,
				|	ДатыПоследнихДвиженийРаботников.ФизЛицо КАК ФизЛицо,
				|	ДатыПоследнихДвиженийРаботников.ПериодРегистрации КАК ПериодРегистрации,
				|	ДатыПоследнихДвиженийРаботников.Регистратор КАК Регистратор
				|ИЗ
				|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Регистр.Регистратор КАК Регистратор,
				|		Регистр.ФизЛицо КАК ФизЛицо,
				|		Регистр.ПериодРегистрации КАК ПериодРегистрации,
				|		МАКСИМУМ(Работники.Период) КАК Период,
				|		1 КАК Вариант
				|	ИЗ
				|		РегистрРасчета." + Имя + " КАК Регистр
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
				|			ПО Регистр.ФизЛицо = Работники.Физлицо
				|				И (Работники.Организация = &Организация)
				|				И (Работники.ПричинаИзмененияСостояния = &Прием)
				|				И (Работники.Период <= КОНЕЦПЕРИОДА(Регистр.ПериодРегистрации, МЕСЯЦ))
				|	ГДЕ
				|		Регистр.Организация = &Организация
				|		И Регистр.Приказ = &парамПустойПриказ
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Регистр.Регистратор,
				|		Регистр.ПериодРегистрации,
				|		Регистр.ФизЛицо
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ РАЗЛИЧНЫЕ
				|		Регистр.Регистратор,
				|		Регистр.ФизЛицо,
				|		Регистр.ПериодРегистрации,
				|		МАКСИМУМ(Работники.Период),
				|		2
				|	ИЗ
				|		РегистрРасчета." + Имя + " КАК Регистр
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК Работники
				|			ПО Регистр.ФизЛицо = Работники.Физлицо
				|				И (Работники.Организация = &Организация)
				|				И (Работники.ПричинаИзмененияСостояния = &Прием)
				|				И Работники.Период <= Регистр.ПериодРегистрации
				|	ГДЕ
				|		Регистр.Организация = &Организация
				|		И Регистр.Приказ = &парамПустойПриказ
				|	
				|	СГРУППИРОВАТЬ ПО
				|		Регистр.Регистратор,
				|		Регистр.ПериодРегистрации,
				|		Регистр.ФизЛицо) КАК ДатыПоследнихДвиженийРаботников
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДанныеПоРаботникуПриНазначении
				|		ПО ДанныеПоРаботникуПриНазначении.Период = ДатыПоследнихДвиженийРаботников.Период
				|			И ДатыПоследнихДвиженийРаботников.ФизЛицо = ДанныеПоРаботникуПриНазначении.Физлицо
				|			И (ДанныеПоРаботникуПриНазначении.Организация = &Организация)
				|ГДЕ
				|	ДатыПоследнихДвиженийРаботников.Период ЕСТЬ НЕ NULL 
				|
				|УПОРЯДОЧИТЬ ПО
				|	Регистратор,
				|	ПериодРегистрации,
				|	ФизЛицо,
				|	ДатыПоследнихДвиженийРаботников.Вариант";
				

				ЗапросПоРегистраторам.Текст = ЗапросПоРегистраторамТекст;
				ЗапросПоРегистраторам.УстановитьПараметр("Организация", Организация);
				ЗапросПоРегистраторам.УстановитьПараметр("Прием", Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
				ЗапросПоРегистраторам.УстановитьПараметр("парамПустаяОрганизация", парамПустаяОрганизация);
				ЗапросПоРегистраторам.УстановитьПараметр("парамПустойПриказ", ПустойПриказ);
				
				Выборка = ЗапросПоРегистраторам.Выполнить().Выбрать();
				СтруктураОтбора = Новый Структура("ФизЛицо,ПериодРегистрации");
				
				НаборЗаписей = РегистрыРасчета[Имя].СоздатьНаборЗаписей();
				
				Пока Выборка.СледующийПоЗначениюПоля("Регистратор") Цикл
					НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);				
					НаборЗаписей.Прочитать();
					ВременнаяТаблица = НаборЗаписей.Выгрузить();
					ВременнаяТаблица.Индексы.Добавить("ФизЛицо,ПериодРегистрации");
					Пока Выборка.СледующийПоЗначениюПоля("ПериодРегистрации") Цикл
						Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
							Пока Выборка.Следующий() Цикл						
								Если СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо И СтруктураОтбора.ПериодРегистрации = Выборка.ПериодРегистрации Тогда
									Продолжить;
								КонецЕсли;
								СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо;
								СтруктураОтбора.ПериодРегистрации = Выборка.ПериодРегистрации;
								СтрокиИзНабора = ВременнаяТаблица.НайтиСтроки(СтруктураОтбора);
								Для каждого СтрокаНабора Из СтрокиИзНабора Цикл
									СтрокаНабора.Приказ = Выборка.Приказ
								КонецЦикла;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
					НаборЗаписей.Загрузить(ВременнаяТаблица);
					Попытка
						НаборЗаписей.Записать();
					Исключение
						Сообщить("Не удалось обработать регистр расчета: " + Имя);
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЦикла;								
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;	
	
	// заполним реквизит "Приказ" в документах
	Для Каждого МетаданныеДокумента из Метаданные.Документы Цикл				
		
		СоответствиеИменТаблиц = Новый Соответствие;
		
		// заполним реквизит "Приказ" в шапке документов
		Если ОбщегоНазначения.ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента) 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("Приказ", МетаданныеДокумента) 
			И ОбщегоНазначения.ЕстьРеквизитДокумента("Организация", МетаданныеДокумента) Тогда			
			
			#Если Клиент Тогда
				Состояние("Заполняется реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли
		
			Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаНачала", МетаданныеДокумента) Тогда
				ИмяРеквизита = "ДатаНачала"
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаНачалаОсновногоОтпуска", МетаданныеДокумента) Тогда	
				ИмяРеквизита = "ДатаНачалаОсновногоОтпуска"
			Иначе
				ИмяРеквизита = "Дата";
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента) Тогда
					ИмяРеквизита = "ПериодРегистрации"
				КонецЕсли;
				Для каждого РеквизитДокумента Из МетаданныеДокумента.Реквизиты Цикл
					Если РеквизитДокумента.Имя = "ПериодРегистрации" Тогда
						Продолжить;
					КонецЕсли;
					Если РеквизитДокумента.Тип.СодержитТип(ТипДата) Тогда
						ИмяРеквизита = РеквизитДокумента.Имя;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		
			СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя, ИмяРеквизита);
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация).Выбрать();
			
			Пока ДокВыборка.Следующий() Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();				
				Документ.Приказ	= ДокВыборка.Приказ;					
				Документ.Записать();					
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		// заполним реквизит "Приказ" в таблицах документов
		
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			Если (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФизЛицо", МетаданныеДокумента, ТабличнаяЧасть.Имя)) и (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Приказ", МетаданныеДокумента, ТабличнаяЧасть.Имя))  Тогда
				
				Если ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаНачала", ТабличнаяЧасть) Тогда
					ИмяРеквизита = "ДатаНачала"
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ДатаДействия", ТабличнаяЧасть) Тогда	
					ИмяРеквизита = "ДатаДействия"
				ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодДействияНачало", ТабличнаяЧасть) Тогда	
					ИмяРеквизита = "ПериодДействияНачало"
				Иначе
					ИмяРеквизита = "Ссылка.Дата";
					Если ОбщегоНазначения.ЕстьРеквизитДокумента("ПериодРегистрации", МетаданныеДокумента) Тогда
						ИмяРеквизита = "Ссылка.ПериодРегистрации"
					КонецЕсли;
					Для каждого РеквизитДокумента Из ТабличнаяЧасть.Реквизиты Цикл
					    Если РеквизитДокумента.Тип.СодержитТип(ТипДата) Тогда
							ИмяРеквизита = РеквизитДокумента.Имя;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя + "." + ТабличнаяЧасть.Имя, ИмяРеквизита);

			КонецЕсли;
			
		КонецЦикла;
		
		Если СоответствиеИменТаблиц.Количество() > 0 Тогда
			
			#Если Клиент Тогда
				Состояние("Заполняется реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли
			
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация,Истина).Выбрать();
			
			Пока ДокВыборка.СледующийПоЗначениюПоля("Ссылка") Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();					
				Пока ДокВыборка.СледующийПоЗначениюПоля("ИмяТЧ") Цикл
					ИмяТЧ = СтрЗаменить(ДокВыборка.ИмяТЧ,МетаданныеДокумента.Имя + ".","");
					Пока ДокВыборка.Следующий() Цикл						
						СтрокаТЧ = Документ[ИмяТЧ].Найти(ДокВыборка.НомерСтроки,"НомерСтроки");
						Если СтрокаТЧ <> Неопределено Тогда
							СтрокаТЧ.Приказ = ДокВыборка.Приказ; 					
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;								
				Документ.Записать();
			КонецЦикла;								
			
		КонецЕсли;
		
	КонецЦикла;		
	
	Возврат Истина;
			
КонецФункции //ВключениеПоддержкиСовместителей

// Отключение режима поддержки внутреннего совместительства
// Функция производит очистку реквизита "Приказ" в регистрах и документах
//
// Параметры: 
//	Организация - ссылка на организацию
//
// Возвращаемое значение:
//  Истина	- если действе выполнено успешно
//	Ложь	- если действе выполнено неуспешно
//
Функция ВыключениеПоддержкиСовместителей(Организация) Экспорт
	
	Если НЕ(МожноОтключатьВнутреннееСовместительство(Организация)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Отключить поддержку внутреннего совместительства невозможно, т.к. некоторые работники заняты на нескольких местах работы!");
		Возврат Ложь;
	КонецЕсли;
		
	ПустойПриказ = Документы.ПриемНаРаботуВОрганизацию.ПустаяСсылка();
	парамПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	// очистим измерение "Приказ" в регистрах сведений
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыСведений Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;
			НаборЗаписей = РегистрыСведений[Имя].СоздатьНаборЗаписей();			
			
			#Если Клиент Тогда
				Состояние("Очищается измерение ""Приказ"" в регистре сведений: " + Имя);
			#КонецЕсли			
			
			Выборка = СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства("РегистрСведений."+Имя, Организация, парамПустаяОрганизация, ПустойПриказ).Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОчиститьПриказВНабореЗаписей(НаборЗаписей,Выборка.Регистратор,ПустойПриказ);
			КонецЦикла;	
			
		КонецЕсли;
	КонецЦикла;
	
	// очистим измерение "Приказ" в регистрах накоплений
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыНакопления Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;						
			НаборЗаписей = РегистрыНакопления[Имя].СоздатьНаборЗаписей();			
			
			#Если Клиент Тогда
				Состояние("Очищается измерение ""Приказ"" в регистре накоплений: " + Имя);
			#КонецЕсли			
			
			Выборка = СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства("РегистрНакопления."+Имя, Организация, парамПустаяОрганизация, ПустойПриказ).Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОчиститьПриказВНабореЗаписей(НаборЗаписей,Выборка.Регистратор,ПустойПриказ);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// очистим измерение "Приказ" в регистрах расчета
	Для Каждого МетаданныеРегистра из Метаданные.РегистрыРасчета Цикл
		Если (МетаданныеРегистра.Измерения.Найти("ФизЛицо") <> Неопределено) и (МетаданныеРегистра.Измерения.Найти("Приказ") <> Неопределено) Тогда	
			
			Имя = МетаданныеРегистра.Имя;			
			НаборЗаписей = РегистрыРасчета[Имя].СоздатьНаборЗаписей();			
			
			#Если Клиент Тогда
				Состояние("Очищается измерение ""Приказ"" в регистре расчета: " + Имя);
			#КонецЕсли			
			
			Выборка = СформироватьЗапросКРегиструДляОтключенияПоддержкиВнутреннегоСовместительства("РегистрРасчета."+Имя, Организация, парамПустаяОрганизация, ПустойПриказ).Выбрать();			
			
			Пока Выборка.Следующий() Цикл
				ОчиститьПриказВНабореЗаписей(НаборЗаписей,Выборка.Регистратор,ПустойПриказ);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// очистим реквизит "Приказ" в документах
	Для Каждого МетаданныеДокумента из Метаданные.Документы Цикл				
				
		СоответствиеИменТаблиц = Новый Соответствие;
		
		// очистим реквизит "Приказ" в шапке документов
		Если (ОбщегоНазначения.ЕстьРеквизитДокумента("ФизЛицо", МетаданныеДокумента)) и (ОбщегоНазначения.ЕстьРеквизитДокумента("Приказ", МетаданныеДокумента)) Тогда			
			
			#Если Клиент Тогда
				Состояние("Очищается реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли

			СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя, "");
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация, Ложь, Ложь).Выбрать();
			
			Пока ДокВыборка.Следующий() Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();				
				Документ.Приказ		= ПустойПриказ;					
				Документ.Записать();					
			КонецЦикла;
			
		КонецЕсли;
		
        // очистим реквизит "Приказ" в таблицах документов
		Для Каждого ТабличнаяЧасть Из МетаданныеДокумента.ТабличныеЧасти Цикл
			
			Если (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ФизЛицо", МетаданныеДокумента, ТабличнаяЧасть.Имя)) и (ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Приказ", МетаданныеДокумента, ТабличнаяЧасть.Имя))  Тогда
				
				СоответствиеИменТаблиц.Вставить(МетаданныеДокумента.Имя + "." + ТабличнаяЧасть.Имя, "");

			КонецЕсли;
			
		КонецЦикла;
		
		Если СоответствиеИменТаблиц.Количество() > 0 Тогда
			
			#Если Клиент Тогда
				Состояние("Очищается реквизит ""Приказ"" в документе: " + МетаданныеДокумента.Имя);
			#КонецЕсли
			
			ДокВыборка = СформироватьЗапросПоДокументамДляИзмененияПоддержкиВнутреннегоСовместительства(ПустойПриказ, СоответствиеИменТаблиц, Организация, парамПустаяОрганизация, Истина, Ложь).Выбрать();
			
			Пока ДокВыборка.СледующийПоЗначениюПоля("Ссылка") Цикл
				Документ = ДокВыборка.Ссылка.ПолучитьОбъект();					
				Пока ДокВыборка.СледующийПоЗначениюПоля("ИмяТЧ") Цикл
					ИмяТЧ = СтрЗаменить(ДокВыборка.ИмяТЧ,МетаданныеДокумента.Имя + ".","");
					Для каждого СтрокаТЧ Из Документ[ИмяТЧ] Цикл
						СтрокаТЧ.Приказ = ПустойПриказ;
					КонецЦикла;
				КонецЦикла;
				Документ.Записать();
			КонецЦикла;
				
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции	//ВыключениеПоддержкиСовместителей()

// Получение значения учетной политики по персоналу
// Если в соответствии по данной организации нет политики - пытаемся прочитать ее из ИБ, если там нет - 
// она добавляется как политика по умолчанию
//
// Параметры:
//
//  УчетнаяПолитика - соответствие политик по организациям
//  Организация - ссылка на организацию
//  ИмяПолитики - название получаемой учетной политики
//
Функция ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитика, Организация, ИмяПолитики) Экспорт
	
	Если УчетнаяПолитика[Организация] = Неопределено Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.ПоддержкаВнутреннегоСовместительства, ЛОЖЬ) КАК ПоддержкаВнутреннегоСовместительства,
		|	ЕСТЬNULL(УчетнаяПолитикаПоПерсоналу.УпрощенныйУчетНДФЛ, ЛОЖЬ) КАК УпрощенныйУчетНДФЛ
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу КАК УчетнаяПолитикаПоПерсоналу
		|		ПО (ВЫБОР
		|				КОГДА Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА Организации.Ссылка
		|				ИНАЧЕ Организации.ГоловнаяОрганизация
		|			КОНЕЦ = УчетнаяПолитикаПоПерсоналу.Организация)
		|ГДЕ
		|	Организации.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка",Организация);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			УчетнаяПолитика.Вставить(Выборка.Организация, 
		    	Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Выборка.ПоддержкаВнутреннегоСовместительства, Выборка.УпрощенныйУчетНДФЛ));
 		Иначе 
			
			УчетнаяПолитика.Вставить(Выборка.Организация, 
                Новый Структура("ПоддержкаВнутреннегоСовместительства,УпрощенныйУчетНДФЛ", Ложь, Ложь));
 		КонецЕсли;		
	КонецЕсли;
	
	Возврат УчетнаяПолитика[Организация][ИмяПолитики];
	
КонецФункции // ЗначениеУчетнойПолитикиПоПерсоналуОрганизации()

// Функция формирует наименование элемента справочника СотрудникиОрганизаций
//
// Параметры
//  <Физлицо>  – <СправочникСсылка.ФизическиеЛица> – физлицо 
//  <Постфикс>  – <Строка> – постфикс наименования сотрудника
//
// Возвращаемое значение:
//   <Строка>   – наименование сотрудника
//
Функция УстановитьНаименованиеСотрудника(Физлицо, Постфикс) Экспорт

	Возврат  Физлицо.Наименование + ?(ЗначениеЗаполнено(Постфикс), " " + Постфикс, "");

КонецФункции // УстановитьНаименованиеСотрудника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ОТВЕЧАЮЩИЕ ЗА ОСОБЕНОСТИ УЧЕТА ЗАРПЛАТЫ И КАДРОВ В БП

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ВЫПОЛНЯЮЩИЕ ПРОВЕРКУ ИСТОЧНИКА КАДРОВОЙ ИНФОРМАЦИИ

Процедура УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, ТекущийОбъект, ТекущаяФорма, ЭтоНовый) Экспорт
	
	Если Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить() Тогда
		ИмяДокумента = ТекущийОбъект.Метаданные().Представление();
		ИмяТекущегоОбъекта = ТекущийОбъект.Метаданные().Имя;
		
		Если ИмяТекущегоОбъекта = "СотрудникиОрганизаций" Тогда
			
				Если ЭтоНовый Тогда
					ТекстСообщенияОбОшибке = "Ввести новый элемент справочника нельзя
					|Учет зарплаты и кадров ведется во внешней программе.";
					
					ОбщегоНазначения.ПредупреждениеОбОшибке(ТекстСообщенияОбОшибке);				
					Отказ = Истина;	
				КонецЕсли;
			
		ИначеЕсли ИмяТекущегоОбъекта <> "ОтражениеЗарплатыВРеглУчете"
			И  ИмяТекущегоОбъекта <> "НДФЛиЕСНДоходыИНалоги" 
			И  ИмяТекущегоОбъекта <> "ДепонированиеОрганизаций" 
			И  ИмяТекущегоОбъекта <> "СписаниеДепонентовВДоходыОрганизаций" 
			И  ИмяТекущегоОбъекта <> "ЗарплатаКВыплатеОрганизаций" Тогда
			
			Если ЭтоНовый Тогда
				ТекстСообщенияОбОшибке = "Документ """ + ИмяДокумента + """ ввести нельзя.
				|Учет зарплаты и кадров ведется во внешней программе.";
				
				ОбщегоНазначения.ПредупреждениеОбОшибке(ТекстСообщенияОбОшибке);
				Отказ = Истина;	
			Иначе
				ИмяДокумента = ОбщегоНазначения.СформироватьЗаголовокДокумента(ТекущийОбъект, ИмяДокумента);
				ТекстСообщенияОбОшибке = "Редактировать документ """ + ИмяДокумента + """ нельзя.
				|Учет зарплаты и кадров ведется во внешней программе.";
				
				ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке);									
				ТекущаяФорма.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		Иначе
			
			Если ЭтоНовый Тогда
				ТекстСообщенияОбОшибке = "Документ """ + ИмяДокумента + """ ввести нельзя
				|Учет зарплаты и кадров ведется во внешней программе.";
				
				ОбщегоНазначения.ПредупреждениеОбОшибке(ТекстСообщенияОбОшибке);
				Отказ = Истина;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Если Клиент Тогда
	
// Вычисляет объект для оповещения
//
// Параметры
//  ФизЛицо - ФизЛицо, данные которого редактируются
//  ФормаВладелец - вызвавшая форма
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица, Форма - ФизЛицо, данные которого редактируются
//                                            или вызвавшая форма
//
Функция ОпределитьОповещаемоеФизЛицо(ФизЛицо, ФормаВладелец) Экспорт
	
	// физлицо может быть уже указано в редактируемой записи регистра
	Если Не ФизЛицо.Пустая() Тогда
		Возврат ФизЛицо
	КонецЕсли;
	
	// выясним, какой объект редактируется вызвавшей формой
	Объект = Неопределено;
	Попытка
		Объект = ФормаВладелец.ЭтотОбъект
	Исключение
		
	КонецПопытки;
	
	ФизЛицоКОповещению = Справочники.ФизическиеЛица.ПустаяСсылка();
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФизЛицоКОповещению = Объект.Ссылка
	ИначеЕсли ТипОбъекта = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда	
		ФизЛицоКОповещению = Объект.ФизЛицо
	КонецЕсли;
	
	Если Не ФизЛицоКОповещению.Пустая() Тогда
		Возврат ФизЛицоКОповещению
	КонецЕсли;
	
	// редактируемое физлицо не записано, будем оповещать только вызвавшую форму 
	Возврат ФормаВладелец
	
КонецФункции // ОпределитьОповещаемыйОбъект()

#КонецЕсли

