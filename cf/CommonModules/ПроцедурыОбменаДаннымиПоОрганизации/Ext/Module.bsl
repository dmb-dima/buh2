 
Процедура СообщитьИнформацияОНеобходимостиЗавершенияРаботыПрограммы() Экспорт
	
	Сообщить("Для корректной работы механизма регистрации изменений для узлов информационной базы необходимо завершить работу всех пользователей
		| и перезапустить текущий сеанс работы 1С:Предприятия.");
		
КонецПроцедуры

Функция ПолучитьМассивВсехУзлов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ различные
	               |	ПоОрганизации.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
				   |
				   |ГДЕ
				   |
				   |	ПоОрганизации.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());			   
				   
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

Функция ВернутьМассивВсехУзловИзПараметровСеанса()
	
	Возврат ПараметрыСеанса.ВсеУзлыОбменаПоОрганизациям;	
	
КонецФункции

Функция ПолучитьСоответствиеУзловИОрганизаций() Экспорт
	
	Хранилище = ПараметрыСеанса.СоответствиеОрганизацийИУзловОбменаПоОрганизации;
		
	СоответствиеУзловИОрганизаций = Хранилище.Получить();
	
	Возврат СоответствиеУзловИОрганизаций;
	
КонецФункции

Функция ВернутьМассивУзловПоОднойОрганизации(Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	Если СоответствиеУзловИОрганизаций = Неопределено Тогда
		
		СоответствиеУзловИОрганизаций = ПолучитьСоответствиеУзловИОрганизаций();
	
	КонецЕсли;
	
	Возврат СоответствиеУзловИОрганизаций[Организация];	
	
КонецФункции

Функция ПолучитьЗапросомМассивУзловПоОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	ПоОрганизации.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланОбмена.ПоОрганизации КАК ПоОрганизации
				   |		Левое соединение ПланОбмена.ПоОрганизации.Организации КАК СписокОрганизаций
				   |			ПО (ПоОрганизации.Ссылка = СписокОрганизаций.Ссылка)
				   |
	               |ГДЕ
	               |	(СписокОрганизаций.Организация В (&СсылкаНаОрганизацию)
				   |		ИЛИ СписокОрганизаций.Организация Есть NULL)
				   |	И ПоОрганизации.Ссылка <> &ЭтотУзел";
				   
	Запрос.УстановитьПараметр("СсылкаНаОрганизацию", Организация);
	
	Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена.ПоОрганизации.ЭтотУзел());
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;	
	
КонецФункции

Функция ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		
		КоличествоЭлементовВМассиве = Организация.Количество();
		
		Если КоличествоЭлементовВМассиве = 0 Тогда
			
			ОрганизацияДляПоиска = Справочники.Организации.ПустаяСсылка();
			
		ИначеЕсли КоличествоЭлементовВМассиве = 1 Тогда
			
			ОрганизацияДляПоиска = Организация[0];
			
		Иначе
			
			ОрганизацияДляПоиска = Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ОрганизацияДляПоиска = Организация;
		
	КонецЕсли;
	
	Если ОрганизацияДляПоиска <> Неопределено Тогда
		
		МассивУзлов = ВернутьМассивУзловПоОднойОрганизации(ОрганизацияДляПоиска, СоответствиеУзловИОрганизаций);
		
	Иначе	
		
		МассивУзлов = ПолучитьЗапросомМассивУзловПоОрганизации(Организация);
		
	КонецЕсли;	
	
	Возврат МассивУзлов;
	
КонецФункции

Процедура ДополнитьМассивСсылками(ТекущийМассив, МассивДляДобавления)
	
	Если МассивДляДобавления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивДляДобавления Цикл
		
		Если ТекущийМассив.Найти(Элемент) = Неопределено Тогда
		
			ТекущийМассив.Добавить(Элемент);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи)
	
	МассивУзлов = ВернутьМассивВсехУзловИзПараметровСеанса();
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);	
	 
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоответствиеУзловИОрганизаций = Неопределено)
	
	МассивУзлов = ПолучитьМассивУзловПоОрганизации(Организация, СоответствиеУзловИОрганизаций);
	
	ДополнитьМассивСсылками(МассивУзловДляПередачи, МассивУзлов);
	
КонецПроцедуры

Процедура ДополнитьМассивУзламиПоРегиструИПараметру(ИмяРегистра, ИмяРеквизита, 
	СсылкаНаСправочник, МассивУзловДляПередачи, ИмяРеквизитаОрганизации = "Организация", СоответствиеУзловИОрганизаций = Неопределено)
	
	Если СсылкаНаСправочник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Регистр." + ИмяРеквизитаОрганизации + " КАК Организация
	               |ИЗ
	               |	РегистрСведений." + ИмяРегистра + " КАК Регистр
	               |ГДЕ
	               |	Регистр." + ИмяРеквизита + " = &СсылкаНаЭлемент";
				   
	Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);			   
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Справочники.Организации.ПустаяСсылка(), СоответствиеУзловИОрганизаций);	
		
	Иначе
	
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
	
	Конецесли;
	
КонецПроцедуры

// {КОРП	
Процедура ДополнитьМассивУзламиПоДокументуАвизо(СсылкаНаСправочник, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций = Неопределено)
	
	Если СсылкаНаСправочник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("ИмяДокумента");
	ТаблицаВариантов.Колонки.Добавить("ИмяРеквизитаОрганизация");
	
	Стр = ТаблицаВариантов.Добавить();
	Стр.ИмяДокумента = "АвизоОСИсходящее";
	Стр.ИмяРеквизитаОрганизация = "Организация";
	
	Стр = ТаблицаВариантов.Добавить();
	Стр.ИмяДокумента = "АвизоОСИсходящее";
	Стр.ИмяРеквизитаОрганизация = "ОрганизацияПолучатель";
	
	Стр = ТаблицаВариантов.Добавить();
	Стр.ИмяДокумента = "АвизоОСВходящее";
	Стр.ИмяРеквизитаОрганизация = "Организация";

	Стр = ТаблицаВариантов.Добавить();
	Стр.ИмяДокумента = "АвизоОСВходящее";
	Стр.ИмяРеквизитаОрганизация = "ОрганизацияОтправитель";
	
	Для Каждого Стр ИЗ ТаблицаВариантов Цикл
		
		Запрос = Новый Запрос();
		Запрос.Текст =
		"ВЫБРАТЬ Различные
		|	АвизоОС.Ссылка." + Стр.ИмяРеквизитаОрганизация + " КАК Организация
		|ИЗ
		|	Документ." + Стр.ИмяДокумента + ".ОС КАК АвизоОС
		|ГДЕ
		|	АвизоОС.ОсновноеСредство = &СсылкаНаЭлемент";
		
		Запрос.УстановитьПараметр("СсылкаНаЭлемент", СсылкаНаСправочник);			   
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Справочники.Организации.ПустаяСсылка(), СоответствиеУзловИОрганизаций);	
			
		Иначе
			
			МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
			
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
			
		Конецесли;
	КонецЦикла;
	
КонецПроцедуры
// }КОРП

Процедура ДополнитьМассивУзламиПоСправочникуИПараметру(ИмяСправочника, ИмяРеквизита, 
	СсылкаНаСправочник, МассивУзловДляПередачи, ИмяРеквизитаОрганизации = "Организация", СоответствиеУзловИОрганизаций = Неопределено, ДополнятьПодчиненными = Ложь)
	
	Если СсылкаНаСправочник.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПолныеПрава.ПолучитьРезультатЗапросаПоВыборкеОрганизаций(ИмяСправочника, ИмяРеквизита, ИмяРеквизитаОрганизации, СсылкаНаСправочник);
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Справочники.Организации.ПустаяСсылка(), СоответствиеУзловИОрганизаций);	
		
	Иначе
	
		МассивОрганизаций = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
		
		Если ДополнятьПодчиненными Тогда
			ДополнитьМассивПодчиненнымиОрганизациями(МассивОрганизаций, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		КонецЕсли;
		
	Конецесли;
	
КонецПроцедуры

Процедура ДополнитьМассивПодчиненнымиОрганизациями(МассивОрганизаций, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций) Экспорт
	
	Если ТипЗнч(МассивОрганизаций) <> Тип("Массив") Тогда
		
		Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(МассивОрганизаций);
		
		Пока Выборка.Следующий() Цикл
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Выборка.Ссылка, СоответствиеУзловИОрганизаций);
		КонецЦикла;
		
	Иначе
		
		Для Каждого Элемент ИЗ МассивОрганизаций Цикл		
			
			Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(Элемент);
			
			Пока Выборка.Следующий() Цикл
				ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Выборка.Ссылка, СоответствиеУзловИОрганизаций);
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита) Экспорт
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = НаборЗаписей.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ПолучитьПоТабличнойЧастиРазличныеЗначенияРеквизита(ТабличнаяЧасть, ИмяРеквизита) Экспорт
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	ТаблицаДанных = ТабличнаяЧасть.Выгрузить(, ИмяРеквизита);
	ТаблицаДанных.Свернуть(ИмяРеквизита);
	
	МассивОрганизаций = ТаблицаДанных.ВыгрузитьКолонку(ИмяРеквизита); 
	
	Возврат МассивОрганизаций;	
	
КонецФункции

Функция ОпределитьПоНаборуЗаписейСписокОрганизаций(НаборЗаписей) Экспорт
	
	МассивЗначений = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, "Организация");
	Возврат МассивЗначений;
	
КонецФункции

Процедура ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций = Неопределено)
	
	МассивОрганизаций = ОпределитьПоНаборуЗаписейСписокОрганизаций(НаборЗаписей);
	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
	
КонецПроцедуры

 Процедура ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачиДляПустойОрганизации(НаборЗаписей, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций = Неопределено)
	
	МассивОрганизаций = ОпределитьПоНаборуЗаписейСписокОрганизаций(НаборЗаписей);
	
	ЭлементСПустойОрганизацией = МассивОрганизаций.Найти(Справочники.Организации.ПустаяСсылка());
	
	Если ЭлементСПустойОрганизацией <> Неопределено Тогда
		
		// пустая организация переносится во все узлы
		ВыгружатьДляВсехУзлов = Истина;
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, Истина, МассивУзловДляПередачи);
		
	Иначе
	
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, МассивОрганизаций, СоответствиеУзловИОрганизаций);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(НаборЗаписей, МассивУзловДляПередачи, 
	ИмяРеквизита, ТипЭлемента = Неопределено, СоответствиеУзловИОрганизаций = Неопределено, ИмяБазовогоТипа = "Справочники", ПереопределитьИмяБазовогоТипа = Ложь)
	
	МассивРазличныхЗначенийРеквизита = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизита);
	
	МассивУзловДляПередачи = Новый Массив();
	
	Для Каждого Элемент Из МассивРазличныхЗначенийРеквизита Цикл 
		
		Если ПереопределитьИмяБазовогоТипа Тогда
			ИмяБазовогоТипа = ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипЗнч(Элемент.ПолучитьОбъект()));			
			
			Если ИмяБазовогоТипа = "УдалениеОбъекта" Тогда
				ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(Истина, Истина, МассивУзловДляПередачи);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		// для каждого элемента массива нужно определить набор узлов куда он может передаваться
		ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, ТипЭлемента, , , СоответствиеУзловИОрганизаций);
	
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Элемент, МетаданныеРегистра, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	ВыгружатьДляВсехУзлов = Ложь;
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);
	
	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ВстречныйВыпускПродукцииУслуг") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Подразделение", 
			Тип("СправочникСсылка.ПодразделенияОрганизаций"), СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗаписиОСтажеДляСЗВ4")
		ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СуммыВзносовДляСЗВ4") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "ОбособленноеПодразделение", 
			Тип("СправочникСсылка.Организации"), СоответствиеУзловИОрганизаций);	
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СтатусыРегламентированныхОтчетов") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Отчет", 
			Тип("ДокументСсылка.РегламентированныйОтчет"), СоответствиеУзловИОрганизаций, "Документы");	
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПротоколыОбменаСБанком") Тогда
		
		ОпределитьПоНаборуиРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Документ", 
			, СоответствиеУзловИОрганизаций, "Документы");	
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.КонтактнаяИнформация") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Объект" , , СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ОтветственныеЛицаОрганизаций") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "СтруктурнаяЕдиница", 
			Неопределено, СоответствиеУзловИОрганизаций); // Не передаем тип структурной единицы, т.к. в БП КОРП он составной
			
			Если МассивУзловДляПередачи.Количество() = 0 Тогда
				ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "СтруктурнаяЕдиница", 
				, СоответствиеУзловИОрганизаций);
			КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияНМАБухгалтерскийУчет")
		ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияНМАНалоговыйУчет")
		ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияНМАНалоговыйУчетУСН") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "НематериальныйАктив", 
			Тип("СправочникСсылка.НематериальныеАктивы"), СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияОСБухгалтерскийУчет")
		ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияОСНалоговыйУчет")
		ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПервоначальныеСведенияОСНалоговыйУчетУСН") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "ОсновноеСредство", 
			Тип("СправочникСсылка.ОсновныеСредства"), СоответствиеУзловИОрганизаций);
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СчетаУчетаНоменклатуры")
		ИЛИ ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СчетаУчетаРасчетовСКонтрагентами") Тогда
		
		// ограничение по организации + пустая организация должна во все узлы попасть
		ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачиДляПустойОрганизации(Элемент, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Ведомость", 
			Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций"), СоответствиеУзловИОрганизаций, "Документы");
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПротоколыОбменаСБанком") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Документ", 
			, СоответствиеУзловИОрганизаций, "Документы");
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ЗначенияСвойствОбъектов") Тогда
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Объект", 
			, СоответствиеУзловИОрганизаций, , Истина);
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.УчетнаяПолитикаОрганизаций") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			, СоответствиеУзловИОрганизаций, , Истина);			
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.УчетнаяПолитикаПоПерсоналу") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			, СоответствиеУзловИОрганизаций, , Истина);
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ДолиСписанияКосвенныхРасходов") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			, СоответствиеУзловИОрганизаций, , Истина);
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.РаботникиОрганизаций") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Сотрудник", 
			, СоответствиеУзловИОрганизаций, , Истина);
			
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПлановыеНачисленияРаботниковОрганизаций") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Сотрудник", 
			, СоответствиеУзловИОрганизаций, , Истина);
			
	// {КОРП	
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.РасчетСтавкиНалогаНаПрибыльЗаМесяц") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			, СоответствиеУзловИОрганизаций, , Истина);			
	// }КОРП
	
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ") Тогда 
		
		ОпределитьПоНаборуИРеквизитуМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, "Организация", 
			, СоответствиеУзловИОрганизаций, , Истина);			
			
	ИначеЕсли МетаданныеРегистра.Измерения.Найти("Организация") <> Неопределено Тогда 
		
		ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
					
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
				
	КонецЕсли;
		
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Элемент, МетаданныеРегистра, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ТипЭлемента = ТипЗнч(Элемент);

	ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраБухгалтерии(Элемент, МетаданныеРегистра, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ОпределитьПоНаборуЗаписейСОрганизациейМассивУзловДляПередачи(Элемент, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
				
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи)
	
	ВыгружатьДляВсехУзлов = Истина;
			
	Если ВозвращатьМассивВсехУзлов Тогда
		ДополнитьМассивВсемиУзлами(МассивУзловДляПередачи);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСсылочногоТипа(ИмяБазовогоТипа, Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено)
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
			ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов,
			СоответствиеУзловИОрганизаций);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВыборкуПодчиненныхОрганизаций(ГоловнаяОрганизация) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Различные
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации
	               |ГДЕ
	               |	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация";
				   
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);	
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// для Организации особые правила переноса
// переносим все организации которые находятся в иерархии головной организации 
// и все дерево подчиненных организаций полностью
Процедура ДополнитьМассивУзламиДляПереносаОрганизаций(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеУзловИОрганизаций)
	
	// нужно определить все узлы куда может ехать сама организация 	
	// и все организации подчиненные ей	
	ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеУзловИОрганизаций);	
	
	Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(СсылкаНаЭлемент);
	Пока Выборка.Следующий() Цикл
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Выборка.Ссылка, СоответствиеУзловИОрганизаций);	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено)
	
	Перем ЭтоГруппа, СсылкаНаЭлемент;
	
	// предопределенные элементы выгружаем и загружаем полностью
	Если Элемент.Предопределенный Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		Возврат;
		
	КонецЕсли;
	
	ВыгружатьДляВсехУзлов = Ложь;
	Если ТипЭлемента = Неопределено Тогда
	
		ТипЭлемента = ТипЗнч(Элемент);
	
	КонецЕсли;
	
	Если ТипЭлемента = Тип("СправочникОбъект.БанковскиеСчета")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.БанковскиеСчета") Тогда
		
		// нужно определить владельца
		// если владелец не организация, тогда регистрируем изменения для всех узлов, 
		// если организация, то только для тех узлов куда организация передается
		
		Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "Владелец");
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Организации") Тогда
			
			// только узлы с указанной организацией
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Владелец, СоответствиеУзловИОрганизаций);
			
			// {КОРП
			// обеспечивается выгрузка для всех.
			СсылкаНаГоловнуюОрганизация = Владелец;
			Если ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
				ДополнитьМассивПодчиненнымиОрганизациями(СсылкаНаГоловнуюОрганизация, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
			КонецЕсли;		
			// }КОРП
			
		ИначеЕсли ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				Владелец, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций, Истина);	
			
		Иначе
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.НематериальныеАктивы")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.НематериальныеАктивы") Тогда	
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоРегиструИПараметру("СостоянияНМАОрганизаций", "НематериальныйАктив", СсылкаНаЭлемент, МассивУзловДляПередачи , , СоответствиеУзловИОрганизаций);
			
		КонецЕсли;	
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Организации") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Ложь);
		
		ДополнитьМассивУзламиДляПереносаОрганизаций(МассивУзловДляПередачи, СсылкаНаЭлемент, СоответствиеУзловИОрганизаций);
		
		СсылкаНаГоловнуюОрганизация = Элемент.ГоловнаяОрганизация;
		Если ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
			ДополнитьМассивПодчиненнымиОрганизациями(СсылкаНаГоловнуюОрганизация, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Контрагенты")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.Контрагенты") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				СсылкаНаЭлемент, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций, Истина);
				
		КонецЕсли;
			
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.РегистрацияВИФНС")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.РегистрацияВИФНС") Тогда		
		
		Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "Владелец");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Владелец, СоответствиеУзловИОрганизаций);		
		
		ДополнитьМассивПодчиненнымиОрганизациями(Владелец, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
	
		СсылкаНаГоловнуюОрганизация = Владелец.ГоловнаяОрганизация;
		Если ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
			ДополнитьМассивПодчиненнымиОрганизациями(СсылкаНаГоловнуюОрганизация, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		КонецЕсли;		
			
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.КонтактныеЛица")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.КонтактныеЛица") Тогда		
		
		Владелец = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Справочники", ТипЭлемента, "ОбъектВладелец");
		
		Если ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			ДополнитьМассивУзламиПоСправочникуИПараметру("ДоговорыКонтрагентов", "Владелец", 
				Владелец, МассивУзловДляПередачи, "Организация", СоответствиеУзловИОрганизаций, Истина);	
			
		Иначе
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		КонецЕсли;		
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ОсновныеСредства")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ОсновныеСредства") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
           	ДополнитьМассивУзламиПоРегиструИПараметру("СостоянияОСОрганизаций", "ОсновноеСредство", СсылкаНаЭлемент, МассивУзловДляПередачи, ,СоответствиеУзловИОрганизаций);
			// {КОРП
			ДополнитьМассивУзламиПоДокументуАвизо(СсылкаНаЭлемент, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
			// }КОРП
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ПодразделенияОрганизаций")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда		
		
		СтруктураПараметров = Новый Структура("Владелец", Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Владелец, СоответствиеУзловИОрганизаций);					
		ДополнитьМассивПодчиненнымиОрганизациями(СтруктураПараметров.Владелец, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		
		СсылкаНаГоловнуюОрганизация = Элемент.Владелец.ГоловнаяОрганизация;
		Если ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
			ДополнитьМассивПодчиненнымиОрганизациями(СсылкаНаГоловнуюОрганизация, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		КонецЕсли;		
				
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда		
		
		СтруктураПараметров = Новый Структура("ЭтоГруппа, Организация", Ложь, Справочники.Организации.ПустаяСсылка());
		ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, "Справочники", ТипЭлемента, СтруктураПараметров);
		
		Если СтруктураПараметров.ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, СтруктураПараметров.Организация, СоответствиеУзловИОрганизаций);	
			ДополнитьМассивПодчиненнымиОрганизациями(СтруктураПараметров.Организация, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.СотрудникиОрганизаций")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда		
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
           	ДополнитьМассивУзламиПоРегиструИПараметру("РаботникиОрганизаций", "Сотрудник", СсылкаНаЭлемент, МассивУзловДляПередачи, "ОбособленноеПодразделение" ,СоответствиеУзловИОрганизаций);
			
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.СпособыОтраженияРасходовПоАмортизации")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизации")
		ИЛИ  ТипЭлемента = Тип("СправочникОбъект.ВидыОплатОрганизаций")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.ВидыОплатОрганизаций") Тогда		
		
		Организация = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Организация", ТипЭлемента, "Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, Организация, СоответствиеУзловИОрганизаций);	
		ДополнитьМассивПодчиненнымиОрганизациями(Организация, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.РасходыБудущихПериодов")
		ИЛИ ТипЭлемента = Тип("СправочникСсылка.РасходыБудущихПериодов") Тогда	
		
		СсылкаНаЭлемент = ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, "Справочники", ТипЭлемента, Истина, ЭтоГруппа);
		
		Если ЭтоГруппа Тогда
			
			// все узлы
			ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
			
		Иначе
		
			ДополнитьМассивУзламиПоРегиструИПараметру("РасчетСписанияРБП", "Статья", СсылкаНаЭлемент, МассивУзловДляПередачи,,СоответствиеУзловИОрганизаций);
			
		КонецЕсли;
    			
	Иначе
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределениеУзловДляВыгрузкиСправочника(Элемент, ТипЭлемента = Неопределено, 
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиСправочника(Элемент, МассивУзловДляПередачи, 
		ТипЭлемента, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Функция ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса)
	
	МетаданныеЭлемента = Элемент.Метаданные();
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
		
		ТипСсылки = Тип("СправочникСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Справочник." + МетаданныеЭлемента.Имя;
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		ТипСсылки = Тип("ДокументСсылка." + МетаданныеЭлемента.Имя);
		ИмяДляЗапроса = "Документ." + МетаданныеЭлемента.Имя; 
		
	Иначе
		
		ТипСсылки = Неопределено;
		
	КонецЕсли;
	
	Возврат ТипЭлемента = ТипСсылки;	
	
КонецФункции

Процедура ЗаполнитьСтруктуруПараметровПоЭлементу(Элемент, ИмяБазовогоТипа, ТипЭлемента, СтруктураПараметров)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
			СтруктураПараметров[ЭлементСтруктуры.Ключ] = Элемент[ЭлементСтруктуры.Ключ];
			
		КонецЦикла;
		
		Возврат;
				
	КонецЕсли;
	
	// надо все единым запросом получить
	//нужно построить запрос и вернуть параметр по ссылке
	
	СтрокаИменПараметров = "";
	Для Каждого ЭлементСтруктуры Из СтруктураПараметров Цикл
			
		СтрокаИменПараметров = СтрокаИменПараметров + "," + Символы.ПС + "ОбъектДанных." + ЭлементСтруктуры.Ключ;
		
	КонецЦикла;
	
	СтрокаИменПараметров = Сред(СтрокаИменПараметров, 2);
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	" + СтрокаИменПараметров + "
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если НЕ РезультатЗапроса.Пустой() Тогда
						
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		
	КонецЕсли;		
	
КонецПроцедуры

// функция по элементу определяет это группа и возвращает ссылку на него
Функция ОпределитьПоЭлементуЭтоГруппаИСсылку(Элемент, ИмяБазовогоТипа, ТипЭлемента, НужноОпределятьЭтоГруппа = Ложь, ЭтоГруппа = Ложь)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
	
	Если НЕ ЭтоСсылка Тогда
		
		Если НужноОпределятьЭтоГруппа Тогда
			
			ЭтоГруппа = Элемент.ЭтоГруппа;
			
			Если ЭтоГруппа = Неопределено Тогда
				ЭтоГруппа = Ложь;
			КонецЕсли;
			
		Конецесли;
		
		Возврат Элемент.Ссылка;
		
	КонецЕсли;
	
	Если НужноОпределятьЭтоГруппа Тогда
		
		ЭтоГруппа = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, "ЭтоГруппа");	
		Если ЭтоГруппа = Неопределено Тогда
			ЭтоГруппа = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

// функция анализирует Элемент это объект или нет
// если объект возвращает его реквизит, иначе
// строит по ссылке запрос и возвращает значение этого реквизита из запроса
Функция ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяПараметра)
	
	ИмяДляЗапроса = "";
	ЭтоСсылка = ОпределитьПоЭлементуЭтоСсылка(Элемент, ИмяБазовогоТипа, ТипЭлемента, ИмяДляЗапроса);
		
	Если НЕ ЭтоСсылка Тогда
		Возврат Элемент[ИмяПараметра]
	КонецЕсли;
	
	//нужно построить запрос и вернуть параметр по ссылке
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектДанных." + ИмяПараметра + "
	               |ИЗ
	               |	" + ИмяДляЗапроса + " КАК ОбъектДанных
	               |ГДЕ
	               |	ОбъектДанных.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Элемент);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка[ИмяПараметра];
		
	КонецЕсли;	
	
КонецФункции

Процедура ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
	ТипЭлемента = Неопределено, ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина,
	СоответствиеУзловИОрганизаций = Неопределено)
	
	Если ТипЭлемента = Неопределено Тогда
		ТипЭлемента = ТипЗнч(Элемент);
	КонецЕсли;
	
	Если ТипЭлемента = Тип("ДокументСсылка.УстановкаЦенНоменклатуры")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.УстановкаЦенНоменклатуры") Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
		
	// {КОРП
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.УдалитьКорректировкаЗаписейРегистров")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.УдалитьКорректировкаЗаписейРегистров") Тогда
		
		ОбеспечитьВыгрузкуОбъектаДляВсехУзлов(ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, МассивУзловДляПередачи);
	// }КОРП
	
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.КадровоеПеремещениеОрганизаций") Тогда
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "Организация");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "ОбособленноеПодразделениеОткуда");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "ОбособленноеПодразделениеКуда");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
	// {КОРП	
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.АвизоМПЗВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоМПЗВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АвизоОСВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоОСВходящее") 				 
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АвизоПрочееВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоПрочееВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АвизоРасчетыВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоРасчетыВходящее") Тогда
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "Организация");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "ОрганизацияОтправитель");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		Если ТипЭлемента = Тип("ДокументСсылка.АвизоОСВходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоОСВходящее") Тогда
		
			ЗарегистрироватьИзмененияПотабличнойЧастиДокумента(Элемент, "АвизоОСВходящее", "Организация", МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
			ЗарегистрироватьИзмененияПотабличнойЧастиДокумента(Элемент, "АвизоОСВходящее", "ОрганизацияОтправитель", МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.АвизоМПЗИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоМПЗИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АвизоОСИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоОСИсходящее") 		
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АвизоПрочееИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоПрочееИсходящее") 		
		ИЛИ ТипЭлемента = Тип("ДокументСсылка.АвизоРасчетыИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоРасчетыИсходящее") Тогда
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "Организация");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "ОрганизацияПолучатель");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		Если ТипЭлемента = Тип("ДокументСсылка.АвизоОСИсходящее")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.АвизоОСИсходящее") Тогда
		
		    ЗарегистрироватьИзмененияПотабличнойЧастиДокумента(Элемент, "АвизоОСИсходящее", "Организация", МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
			ЗарегистрироватьИзмененияПотабличнойЧастиДокумента(Элемент, "АвизоОСИсходящее", "ОрганизацияПолучатель", МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		
		КонецЕсли;	
		
	// }КОРП
	
	ИначеЕсли ТипЭлемента = Тип("ДокументСсылка.РегламентнаяОперация")
		ИЛИ ТипЭлемента = Тип("ДокументОбъект.РегламентнаяОперация") Тогда
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "Организация");		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
		// {КОРП
		// Регистрация для всех подчиненных организаций
		Если Элемент.ВидОперации = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов Тогда
			ДополнитьМассивПодчиненнымиОрганизациями(ОрганизацияДокумента, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций);
		КонецЕсли;
		// }КОРП

	Иначе	
		
		ОрганизацияДокумента = ПолучитьЗначениеПараметраОбъектаИлиСсылки(Элемент, "Документы", ТипЭлемента, "Организация");
		
		ДополнитьМассивУзламиПоОрганизации(МассивУзловДляПередачи, ОрганизацияДокумента, СоответствиеУзловИОрганизаций);
		
	КонецЕсли;	
	
КонецПроцедуры

// {КОРП	
Процедура ЗарегистрироватьИзмененияПотабличнойЧастиДокумента(Элемент, ИмяДокумента, ИмяРеквизитаОрганизации, МассивУзловДляПередачи, СоответствиеУзловИОрганизаций)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АвизоОС.ОсновноеСредство КАК ОС,
	|	АвизоОС.Ссылка.Организация,
	|	АвизоОС.Ссылка." + ИмяРеквизитаОрганизации + "
	|ИЗ
	|	Документ." + ИмяДокумента + ".ОС КАК АвизоОС
	|ГДЕ
	|	АвизоОС.Ссылка = &Элемент";
	
	Запрос.УстановитьПараметр("Элемент",Элемент.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьПолучателейДляОбмена(Выборка.ОС.ПолучитьОбъект(), МассивУзловДляПередачи, МассивУзловДляПередачи);	
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляПередачи, Выборка.ОС);			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры
// }КОРП

Функция ОпределениеУзловДляВыгрузкиДокумента(Элемент, ТипРеквизита = Неопределено, ВыгружатьДляВсехУзлов = Ложь, 
	ВозвращатьМассивВсехУзлов = Истина, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	МассивУзловДляПередачи = Новый Массив;
	
	ДополнитьМассивУзловДляВыгрузкиДокумента(Элемент, МассивУзловДляПередачи, 
		ТипРеквизита, ВыгружатьДляВсехУзлов, ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
	
	Возврат МассивУзловДляПередачи;
	
КонецФункции

Процедура ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииПередЗаписью, МассивУзловДляРегистрацииПриЗаписи)
	
	ПроцедурыОбменаДанными.ДополнитьМассивПолучателейУзламиАвторегистрации(Источник);
	
	// для регистрации ссылки
	Для Каждого Элемент Из МассивУзловДляРегистрацииПередЗаписью Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;
	
	// для регистрации объекта
	Для Каждого Элемент Из МассивУзловДляРегистрацииПриЗаписи Цикл
		
		Источник.ОбменДанными.Получатели.Добавить(Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Данные, ИмяБазовогоТипа, ТипЭлемента = Неопределено, МетаданныеОбъекта = Неопределено,
	ВыгружатьДляВсехУзлов = Ложь, ВозвращатьМассивВсехУзлов = Истина, СоответствиеУзловИОрганизаций = Неопределено) Экспорт
	
	Если ИмяБазовогоТипа = "Справочники" Тогда
			
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиСправочника(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "Документы" Тогда
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиДокумента(Данные, ТипЭлемента, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыСведений" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраСведений(Данные, МетаданныеОбъекта, ВыгружатьДляВсехУзлов, 
			ВозвращатьМассивВсехУзлов, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраНакопления(Данные, МетаданныеОбъекта, СоответствиеУзловИОрганизаций);
		
	ИначеЕсли ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда	
		
		МассивУзловДляРегистрацииСсылки = ОпределениеУзловДляВыгрузкиНабораЗаписейРегистраБухгалтерии(Данные, МетаданныеОбъекта, СоответствиеУзловИОрганизаций);
		
	КонецЕсли;
	
	// информация из подчиненной информационной базы в главную по отношению к ней передаем всегда
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
	Если ЗначениеЗаполнено(ГлавныйУзел) Тогда
	
		НомерВМассиве = МассивУзловДляРегистрацииСсылки.Найти(ГлавныйУзел);
		
		Если НомерВМассиве = Неопределено Тогда
		
			МассивУзловДляРегистрацииСсылки.Добавить(ГлавныйУзел);	
			
		КонецЕсли;
		
	КонецЕсли;	
			
	Возврат МассивУзловДляРегистрацииСсылки;
	
КонецФункции

Процедура ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, ИмяБазовогоТипа, 
	МассивУзловДляРегистрацииСсылки = Неопределено, МассивУзловДляРегистрацииОбъекта = Неопределено)
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;		
	
	Если Источник.ЭтоНовый() Тогда
		
		// элемент еще никуда не передавался
		МассивУзловДляРегистрацииСсылки = Новый Массив;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник.Ссылка, ИмяБазовогоТипа);
						
	КонецЕсли;
		
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа);
			
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);	
			
КонецПроцедуры

Процедура ПровестиРегистрацияСвязанныхОрганизаций(СсылкаНаОбъект, МассивУзловДляРегистрацииОбъекта)
	
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// регистрируем изменения для самого объекта
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаОбъект);
	
	// регистрируем изменения для головной организации и все что связано с головной
	СсылкаНаГоловнуюОрганизация = СсылкаНаОбъект.ГоловнаяОрганизация;
	Если Не ЗначениеЗаполнено(СсылкаНаГоловнуюОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаГоловнуюОрганизация);
	
	// регистрируем все подчиненные головной
	Выборка = ПолучитьВыборкуПодчиненныхОрганизаций(СсылкаНаГоловнуюОрганизация);
	Пока Выборка.Следующий() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, Выборка.Ссылка);		
				
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроизвестиРегистрациюСвязанныхОбъектов(СсылкаНаОбъект, МассивУзловДляРегистрацииОбъекта, ТипОбъекта)
	
	Если МассивУзловДляРегистрацииОбъекта.Количество() = 0
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	// регистрируем изменения для самого объекта
	ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, СсылкаНаОбъект);
	
	Если ТипОбъекта = "Контрагенты" Тогда
		
		// банковские счета
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	БанковскиеСчета.Ссылка КАК Ссылка
		               |ИЗ
		               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
		               |ГДЕ
		               |	БанковскиеСчета.Владелец = &Контрагент";
					   
		Запрос.УстановитьПараметр("Контрагент", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, Выборка.ссылка);	
			
		КонецЦикла;
		
		// контактная информация
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	КонтактнаяИнформация.Тип,
			|	КонтактнаяИнформация.Вид
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект", СсылкаНаОбъект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		НаборЗаписей = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Использование = Истина;
		НаборЗаписей.Отбор.Объект.Значение = СсылкаНаОбъект;
		НаборЗаписей.Отбор.Тип.Использование = Истина;
		НаборЗаписей.Отбор.Вид.Использование = Истина;
		Пока Выборка.Следующий() Цикл
			НаборЗаписей.Отбор.Тип.Значение = Выборка.Тип;
			НаборЗаписей.Отбор.Вид.Значение = Выборка.Вид;
			


			ПланыОбмена.ЗарегистрироватьИзменения(МассивУзловДляРегистрацииОбъекта, НаборЗаписей);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюСправочникаДляОбменаПоОрганизации(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(Источник);
	МассивУзловДляРегистрацииСсылки = Новый Массив();
	МассивУзловДляРегистрацииОбъекта = Новый Массив();
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники", 
		МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
		
	Если Источник.ОбменДанными.Загрузка Тогда
		
		Пока НЕ МассивУзловДляРегистрацииОбъекта.Найти(Источник.ОбменДанными.Отправитель) = Неопределено Цикл
        	МассивУзловДляРегистрацииОбъекта.Удалить(МассивУзловДляРегистрацииОбъекта.Найти(Источник.ОбменДанными.Отправитель));
		КонецЦикла;
		
		Если МассивУзловДляРегистрацииОбъекта.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;		
			
	КонецЕсли;		
		
	Если ТипЭлемента = Тип("СправочникОбъект.ДоговорыКонтрагентов") Тогда		
		
		Если НЕ Источник.ЭтоГруппа Тогда
			
			ПроизвестиРегистрациюСвязанныхОбъектов(Источник.Владелец, МассивУзловДляРегистрацииОбъекта, "Контрагенты");
						
		КонецЕсли;
		
	ИначеЕсли ТипЭлемента = Тип("СправочникОбъект.Организации") Тогда
		
		//нужно зарегистрировать все связанные организации
		ПровестиРегистрацияСвязанныхОрганизаций(Источник.Ссылка, МассивУзловДляРегистрацииОбъекта);
		
	КонецЕсли;		
			
КонецПроцедуры

Процедура ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, ИмяБазовогоТипа) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЗначенияИсточника = ТипЗнч(Источник);
	
	МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗначенияИсточника);
	
	Если Замещение Тогда
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			СтарыйНаборЗаписей = РегистрыСведений[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыНакопления" Тогда
			СтарыйНаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();
		ИначеЕсли ИмяБазовогоТипа = "РегистрыБухгалтерии" Тогда
			СтарыйНаборЗаписей = РегистрыБухгалтерии[МетаданныеРегистра.Имя].СоздатьНаборЗаписей();	
		КонецЕсли;
	
		Для Каждого ЗначениеОтбора Из Источник.Отбор Цикл
			
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		МассивУзловДляРегистрацииСсылки = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(СтарыйНаборЗаписей, ИмяБазовогоТипа,  , МетаданныеРегистра);
		
		Если ИмяБазовогоТипа = "РегистрыСведений" Тогда
			
			// для старого набора записей нужно еще сделать регистрацию ссылок для некоторых измерений
			ВыполнитьРегистрациюИзмененийДляРеквизитаНабораЗаписей(Источник, Отказ, Замещение, ТипЗначенияИсточника);
			
		КонецЕсли;
		
	Иначе
		
		МассивУзловДляРегистрацииСсылки = Новый Массив;
			
	КонецЕсли;
			
	МассивУзловДляРегистрацииОбъекта = ОпределитьМассивУзловДляРегистрацииПроизвольногоТипа(Источник, ИмяБазовогоТипа,  , МетаданныеРегистра);
	
	ЗаполнитьПолучателейДляОбмена(Источник, МассивУзловДляРегистрацииСсылки, МассивУзловДляРегистрацииОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийДляОбменаПоОрганизации(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыСведений");	
		
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(НаборЗаписей, ИмяРеквизитаДляРегистрации)
	
	МассивОбъектов = ПолучитьПоНаборуЗаписейРазличныеЗначенияРеквизита(НаборЗаписей, ИмяРеквизитаДляРегистрации);
		
	Для Каждого Элемент Из МассивОбъектов Цикл
		
		Если Элемент.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		МассивУзлов = ОпределениеУзловДляВыгрузкиСправочника(Элемент);
		
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов, Элемент);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюИзмененийДляРеквизитаНабораЗаписей(Источник, Отказ, Замещение, ТипЭлемента)
	
	Если ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СостоянияНМАОрганизаций") Тогда 
		
		ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(Источник, "НематериальныйАктив");
					
	//ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ОбъектыСтроительстваОрганизаций") Тогда 
	//	
	//	ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(Источник, "ОбъектСтроительства");
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.СостоянияОСОрганизаций") Тогда 
		
		ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(Источник, "ОсновноеСредство");	
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.РасчетСписанияРБП") Тогда 
		
		ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(Источник, "Статья");	
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.РаботникиОрганизаций") Тогда 
		
		ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(Источник, "Сотрудник");	
		
	ИначеЕсли ТипЭлемента = Тип("РегистрСведенийНаборЗаписей.ПлановыеНачисленияРаботниковОрганизаций") Тогда 
		
		ЗарегистрироватьИзмененияДляРеквизитаНабораЗаписей(Источник, "Сотрудник");	

		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиРегистраСведенийДляОбменаПоОрганизации(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТипЭлемента = ТипЗнч(Источник);
	
	ВыполнитьРегистрациюИзмененийДляРеквизитаНабораЗаписей(Источник, Отказ, Замещение, ТипЭлемента);	
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаДляОбменаПоОрганизации(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраНакопленийДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, Замещение, "РегистрыНакопления");
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраБухгалтерииДляОбменаПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи) Экспорт
	
	ПередЗаписьюНабораЗаписейДляОбменаПоОрганизации(Источник, Отказ, РежимЗаписи, "РегистрыБухгалтерии");
	
КонецПроцедуры

Функция ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		ИЛИ РольДоступна("ПолныеПрава") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	// Если это подчиненный узел плана обмена по организации то редактирование элемента запрещено
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	
	Если ГлавныйУзел = Неопределено
		ИЛИ ТипЗнч(ГлавныйУзел) <> Тип("ПланОбменаСсылка.ПоОрганизации") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПередЗаписьюСправочникаРедактированиеЭлементовВПодчиненныхУзлахПоОрганизацииПередЗаписью(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодлежитИзменению = ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник);
	
	Если НЕ ПодлежитИзменению Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Редактирование данных справочника """ + Строка(Источник.Метаданные()) + """ запрещено. 
		|Изменять справочник можно только в головной информационной базе или обладая ролью ""Полные права"". Изменения не могут быть записаны...", Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюРегистраСведенийРедактированиеЗаписейВПодчиненныхУзлахПоОрганизацииПередЗаписью(Источник, Отказ, Замещение) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодлежитИзменению = ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник);
	
	Если НЕ ПодлежитИзменению Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Редактирование данных регистра сведений """ + Строка(Источник.Метаданные()) + """ запрещено. 
		|Изменять регистр можно только в головной информационной базе или обладая ролью ""Полные права"". Изменения не могут быть записаны...", Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюДокументаРедактированиеЭлементовВПодчиненныхУзлахПоОрганизацииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПодлежитИзменению = ОпределитьПоЭлементуПодлежитИзменениюВТекущейИБ(Источник);
	
	Если НЕ ПодлежитИзменению Тогда
	
		ОбщегоНазначения.СообщитьОбОшибке("Редактирование данных документа """ + Строка(Источник.Метаданные()) + """ запрещено. 
		|Изменять документ можно только в головной информационной базе или обладая ролью ""Полные права"". Изменения не могут быть записаны...", Отказ);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередУдалениемСправочникаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	Если Отказ
		ИЛИ НЕ ПараметрыСеанса.НаличиеОбменаДаннымиПоОрганизации Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Справочники");	
	
КонецПроцедуры

Процедура ПередУдалениемДокументаДляОбменаПоОрганизацииПередУдалением(Источник, Отказ) Экспорт
	
	ПередЗаписьюСсылочногоТипаДляОбменаПоОрганизации(Источник, Отказ, "Документы");	
	
КонецПроцедуры

Функция ПолучитьИмяБазовогоТипаПоТипуОбъекта(ТипОбъекта) Экспорт
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если МетаданныеТипа = Неопределено Тогда
		
		Возврат "УдалениеОбъекта";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеТипа) Тогда
		
		Возврат "РегистрыСведений";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Документы";
		
	ИначеЕсли Метаданные.Справочники.Содержит(МетаданныеТипа) Тогда
		
		Возврат "Справочники";	
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеТипа) Тогда
	
		Возврат "РегистрыНакопления";	
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеТипа) Тогда
	
		Возврат "РегистрыБухгалтерии";	
	   
	Иначе
	   
		Возврат "";
		
	КонецЕсли;
			
КонецФункции
