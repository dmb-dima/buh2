
Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл,Найти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Сред(КартИД,Найти(КартИД,"{")+1);
	КартИД	= Лев(КартИД,НАйти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции

// Процедура вызывается в обработчике события "Начало выбора" в форме документов.
// Выполняет выбор даты курса и устанавливает переданный курс по выбранной дате.
//
// Параметры:
//  Курс   - число, курс валюты, который надо установить;
//  Валюта - ссылка на справочник, определяет валюту чей курс надо выбрать;
//  Дата   - дата, дата курса по умолчанию.
//
Процедура ВыбратьКурсВалюты(Курс, Кратность, Валюта, Дата) Экспорт
	
	// Если не заполнена валюта, то курс выбрать нельзя.
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Предупреждение("Для выбора курса нужно выбрать валюту."); 
		Возврат;
	КонецЕсли; 
	
	// Выберем дату курса
	ДатаУстановкиКурса = Дата; 
	Если ВвестиДату(ДатаУстановкиКурса, "Выберите дату установки курса.", ЧастиДаты.Дата) Тогда
		
		// Если дата введена, заполним значение курса и кратности
		СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаУстановкиКурса);
		Курс            = СтруктураВалюты.Курс;
		Кратность       = СтруктураВалюты.Кратность;
		
	КонецЕсли; 
	
КонецПроцедуры // ВыбратьКурсВалюты()

Процедура ВакансияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	Если ДанныеСтроки.Закрыта Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Серый;
	КонецЕсли;
	
	Если Не ДанныеСтроки.Закрыта И ЗначениеЗаполнено(ДанныеСтроки.ПлановаяДатаЗакрытия) И ДанныеСтроки.ПлановаяДатаЗакрытия < ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
	КонецЕсли;
	
КонецПроцедуры

// Функция выполняет проверку необходимости записи набора записей
//
// Параметры
//  НаборЗаписей  - набор записей регистра сведений, существующие значения
//  ТаблицаЗначенийДляЗаписи - таблица значений с новыми значениями
//  СтрокаОтбора - строка, список полей, разделенных зяпятой, в разрезе которых производится проверка
//					и запись набора записей
//
// Возвращаемое значение:
//   Булево   - Ложь, когда набор записей необходимо было записать, и записать набор не удалось
//
Функция ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ТаблицаЗначенийДляЗаписи, СтрокаОтбора) Экспорт

	СтруктураПоиска = Новый Структура(СтрокаОтбора);
	
	НаборЗаписей.Прочитать();
	ТаблицаНаборЗаписей = НаборЗаписей.Выгрузить();
	
	// удалим лишние колонки из ТаблицаЗначенийДляЗаписи, например номер по порядку
	МассивКолонок = Новый Массив;
	Для каждого КолонкаТЗ Из ТаблицаНаборЗаписей.Колонки Цикл
		Если ТаблицаЗначенийДляЗаписи.Колонки.Найти(КолонкаТЗ.Имя) = Неопределено Тогда
			МассивКолонок.Добавить(КолонкаТЗ);
		КонецЕсли;
	КонецЦикла;
	Для каждого КолонкаТЗ Из МассивКолонок Цикл
		ТаблицаНаборЗаписей.Колонки.Удалить(КолонкаТЗ);
	КонецЦикла;
	
	ТаблицаОтборов = ТаблицаНаборЗаписей.Скопировать(,СтрокаОтбора);
	ТаблицаОтборов.Свернуть(СтрокаОтбора,);
	
	// перепишем данные  во временную таблицу
	ВремТаблицаЗначенийДляЗаписи =  ТаблицаЗначенийДляЗаписи.Скопировать();
	
	Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
		ИмяОтбора = ЭлементСтруктуры.Ключ;
		НаборЗаписей.Отбор[ИмяОтбора].Использование = Истина;
	КонецЦикла;

	
	Для каждого СтрокаТЗ Из ТаблицаОтборов Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
		ТаблицаНовыеЗначения = ВремТаблицаЗначенийДляЗаписи.Скопировать(СтруктураПоиска);
		НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаНаборЗаписей.Скопировать(СтруктураПоиска), ТаблицаНовыеЗначения);
		
		Если НадоЗаписать  Тогда
			
			Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
				ИмяОтбора = ЭлементСтруктуры.Ключ;
				ЗначениеОтбора = ЭлементСтруктуры.Значение;
				НаборЗаписей.Отбор[ИмяОтбора].Значение = ЗначениеОтбора;
			КонецЦикла;
			
			Если ТаблицаНовыеЗначения.Количество() = 0 Тогда
				НаборЗаписей.Очистить();	
			Иначе
				НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
			КонецЕсли;	
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;	
			
		КонецЕсли;
		
		// удалим из ВремТаблицаЗначенийДляЗаписи проверенные строки
		МассивСтрок = ВремТаблицаЗначенийДляЗаписи.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаТЗ Из МассивСтрок Цикл
			ВремТаблицаЗначенийДляЗаписи.Удалить(СтрокаТЗ);
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВремТаблицаЗначенийДляЗаписи.Количество() > 0 Тогда
		// остались сведения, которых не было, запишем
		Для каждого СтрокаТЗ Из ВремТаблицаЗначенийДляЗаписи Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЗ);
			ТаблицаНовыеЗначения = ВремТаблицаЗначенийДляЗаписи.Скопировать(СтруктураПоиска);
			
			Для каждого ЭлементСтруктуры Из СтруктураПоиска Цикл
				ИмяОтбора = ЭлементСтруктуры.Ключ;
				ЗначениеОтбора = ЭлементСтруктуры.Значение;
				НаборЗаписей.Отбор[ИмяОтбора].Значение = ЗначениеОтбора;
			КонецЦикла;
			
			НаборЗаписей.Загрузить(ТаблицаНовыеЗначения);
			
			Если Не ОбщегоНазначения.ЗаписатьНабор(НаборЗаписей) Тогда
				Возврат Ложь
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Процедура открывает общую форму ФормаИсторииЗначений
// Параметры
//		ФормаВладелец - форма из которой открываем просмотр истории
//		КлючУникальности - ключ уникальности, для поиска открытой формы
//		ИмяТаблицыИсторииЗначений - строка, имя таблицы, входит в имя события оповещения
//		ПараметраИсторииЗначений - структура, содержит имя колонки, которая должна заполняться по умолчанию и значение для заполнения
//									например, для истории по физлицу будет структура с именем колонки и физлицом
//		МассивИменаНевидимыхКолонок - массив, значения имена колонок, которые необходимо скрыть
//		МассивИменаКолонокАвтоОтметкаНезаполненного - массив, имена колонок для установки свойства АвтоОтметкаНезаполненного
//		ПорядокПредставленияПериода - строка, описывает как представлять период в таблице: "НачалоГода", "НачалоМесяца"
//									
Процедура ОткрытьФормуИсторииЗначений(ФормаВладелец, КлючУникальности, ИмяТаблицыИсторииЗначений, ТаблицаИстории,
										ПараметрИсторииЗначений, МассивИменаНевидимыхКолонок,
										МассивИменаКолонокАвтоОтметкаНезаполненного, ПорядокПредставленияПериода = "",
										Заголовок, РежимТолькоПросмотр = Истина) Экспорт

	ФормаИстории = ПолучитьОбщуюФорму("ФормаИсторииЗначений", ФормаВладелец, КлючУникальности);
	ФормаИстории.ТаблицаИсторииЗначений = ТаблицаИстории.Скопировать();
	ФормаИстории.ИмяТаблицыИсторииЗначений = ИмяТаблицыИсторииЗначений;
	ФормаИстории.ПараметрИсторииЗначений   = ПараметрИсторииЗначений;
	ФормаИстории.Заголовок = Заголовок;
	ФормаИстории.ТолькоПросмотр = РежимТолькоПросмотр;
	ФормаИстории.мМассивИменаНевидимыхКолонок = МассивИменаНевидимыхКолонок;
	ФормаИстории.мМассивИменаКолонокАвтоОтметкаНезаполненного = МассивИменаКолонокАвтоОтметкаНезаполненного;
	ФормаИстории.мПорядокПредставленияПериода = ПорядокПредставленияПериода;
	ФормаИстории.Открыть();	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

// в кадровых документах кнопка вызова Анализа неявок показывается не всем
Процедура УстановитьВидимостьКнопкиОткрытьНачисления(КоллекцияКнопок, ИмяКнопки) Экспорт
	
	Если Не ПравоДоступа("Использование",Метаданные.Обработки.АнализНеявок) Тогда
		УдаляемаяКнопка = КоллекцияКнопок.Найти(ИмяКнопки);
		Если УдаляемаяКнопка <> Неопределено Тогда
			КоллекцияКнопок.Удалить(УдаляемаяКнопка)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ ИНФОРМАЦИИ В ФОРМЕ

// Процедура проверяет соответсвие страхового номера ПФР требованиям, устанавливает цвет
// текста в поле ввода и подсказку
//
// Параметры
//  СтраховойНомерПФР  - страховой номер физлица для проверки
//  ПолеВвода  - поле ввода в котором вводится ИНН
//
Процедура ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(СтраховойНомерПФР, ПолеВвода) Экспорт
	
	Если ЗначениеЗаполнено(СтрЗаменить(Лев(СтраховойНомерПФР,11),"-","")) и Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР) Тогда
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветОсобогоТекста;
		ПолеВвода.Подсказка = "Ошибка в страховом номере";
	Иначе
		ПолеВвода.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВвода.Подсказка = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода()

// Выводит в колонке Способ расчета списка в.р. вместо слов "Произвольная формула"
//	эту самую формулу
// Работает в контексте обработчика ПриПолученииДанных. 
// Предполагается, что в соответствующем табличном поле есть колонка СпособРасчета,
// 	а в списке присутствуют: Ссылка и ФормулаРасчетаПредставление
//
//	Параметры:
//		ОформленияСтрок - коллекция оформлений строки табличного поля списка в.р.
//
Процедура ВыводПроизвольнойФормулыВСтрокахСпискаВидовРасчета(ОформленияСтрок) Экспорт

	МассивВР = Новый Массив;
	ИмяПВР = Неопределено;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			МассивВР.Добавить(ДанныеСтроки.Ссылка);
			Если ИмяПВР = Неопределено Тогда
				ИмяПВР = ДанныеСтроки.Ссылка.Метаданные().Имя
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивВР.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачисленияОрганизацийПоказатели.Ссылка КАК Ссылка,
	|	НачисленияОрганизацийПоказатели.НомерСтроки КАК НомерСтроки,
	|	НачисленияОрганизацийПоказатели.Показатель.Наименование КАК Показатель
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций.Показатели КАК НачисленияОрганизацийПоказатели
	|ГДЕ
	|	НачисленияОрганизацийПоказатели.Ссылка В(&Ссылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылки", МассивВР);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОсновныеНачисленияОрганизаций", ИмяПВР);
	Показатели = Запрос.Выполнить().Выгрузить();
	Показатели.Индексы.Добавить("Ссылка");
	СтруктураОтбора = Новый Структура("Ссылка");
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
			СтруктураОтбора.Ссылка = ДанныеСтроки.Ссылка;
			ФормулаРасчета	= СтрЗаменить(ДанныеСтроки.ФормулаРасчетаПредставление, "ПроведениеРасчетов.", "");
			Описание = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчета, Показатели.Скопировать(СтруктураОтбора), "Текст");
			Ячейки.СпособРасчета.УстановитьТекст(Описание);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнениеОтбораПоОрганизацииПоУмолчанию(Форма, ЭлементОтбора = Неопределено, ЭлементФормы, ПараметрОтборПоРегистратору = Неопределено, ИспользоватьГоловнуюОрганизацию = Истина, ТекущийПользователь, ТекстЗаголовка = Неопределено) Экспорт
	
	ЭлементФормы.ТолькоПросмотр = Ложь;
	
	Если ЗначениеЗаполнено(ПараметрОтборПоРегистратору) Тогда
		
		МетаданныеДокумента = ПараметрОтборПоРегистратору.Метаданные();
		
		Если МетаданныеДокумента.Реквизиты.Найти("СторнируемыйДокумент") <> Неопределено Тогда
			
			МетаданныеДокумента 		= ПараметрОтборПоРегистратору.СторнируемыйДокумент.Метаданные();
			ПараметрОтборПоРегистратору = ПараметрОтборПоРегистратору.СторнируемыйДокумент;
			
		КонецЕсли;
		
		Если МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
			
			Если ИспользоватьГоловнуюОрганизацию Тогда
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ПараметрОтборПоРегистратору.Организация);
			Иначе
				Организация = ПараметрОтборПоРегистратору.Организация;
			КонецЕсли;
			
			ЭлементОтбора.Значение = Организация;
			ЭлементФормы.ТолькоПросмотр = Истина;
			Если ТекстЗаголовка <> Неопределено Тогда
				Форма.Заголовок = ТекстЗаголовка + Организация.Наименование;
			КонецЕсли; 
			
		КонецЕсли;
		
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Если ИспользоватьГоловнуюОрганизацию Тогда 
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация"));
		Иначе
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнаяОрганизация");
		КонецЕсли;
		
		Если ЭлементОтбора <> Неопределено Тогда
			ЭлементОтбора.Значение = Организация;
			ЭлементОтбора.Использование = Не Организация.Пустая();
		КонецЕсли;
		
		Если ТекстЗаголовка <> Неопределено Тогда
			Если Организация.Пустая() Тогда
				Форма.Заголовок = СтрЗаменить(ТекстЗаголовка,ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации"),ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организаций"));
			Иначе 
				Форма.Заголовок = ТекстЗаголовка + Организация;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

// Выводит надпись и соответствующую ей картинку
//
// Параметры
//  ЭУНадпись, ЭУКартинка - элементы управления формы, соответственно надпись и картинка
//  ТекстСообщения - строка - выводимое сообщение
//  ВажностьСообщения - строка - определяет расцветку текста и картинку
//		допустимые значения: "СообщениеОПроблемах", "ВажнаяИнформация" и "Информация"
//
Процедура ПоказатьИнформациюОДокументе(ЭУНадпись = Неопределено, ЭУКартинка = Неопределено, ТекстСообщения = "", ВажностьСообщения = "") Экспорт 
	
	Если ЭУНадпись = Неопределено Или ЭУКартинка = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ВажностьСообщения = "ВажнаяИнформация" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеВажнаяИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	ИначеЕсли ВажностьСообщения = "СообщениеОПроблемах" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОПроблемах;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	ИначеЕсли ВажностьСообщения = "Ошибка" Тогда
		ЭУКартинка.Картинка = БиблиотекаКартинок.СообщениеОшибка;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияОПроблемах;
	Иначе
		ЭУКартинка.Картинка	= БиблиотекаКартинок.СообщениеИнформация;
		ЭУНадпись.ЦветТекста = ЦветаСтиля.ТекстСообщенияИнформации;
	КонецЕсли;
	ЭУНадпись.Заголовок = ТекстСообщения;
	
КонецПроцедуры // ПоказатьИнформациюОДокументе()

Процедура ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ФормаОбъекта) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если ФормаОбъекта.Модифицированность Тогда
		Ответ = РаботаСДиалогами.ЗадатьВопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Или Ответ = КодВозвратаДиалога.Таймаут Тогда
			//Запишем документ
			Попытка
				Отказ = Не ФормаОбъекта.ЗаписатьВФорме();
			Исключение
				РаботаСДиалогами.ВывестиПредупреждение("Операция не выполнена!");
				Отказ = Истина;
			КонецПопытки;
		КонецЕсли; 
	КонецЕсли;	
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсходный.Свертка = РежимСверткиЭлементаУправления.Нет;
	ФормаОбъекта.ЭлементыФормы.ПанельОткрытьИсправление.Свертка = РежимСверткиЭлементаУправления.Нет;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ И ОБРАБОТКИ МЕНЮ

// Процедура вызывается формирования кнопки "Подбор" для формы видов расчетов Планов Видов Расчетов.
//
// Параметры:
//  СсылкаПВР 	   	   - ссылка на ПВР;
//  ФормаЭлемента 	   - Форма вида расчета.
//  СтруктураДействий  - структура с действиями, которые будут вызывать формируемые кнопки
//  ВедущиеВидыРасчета - булево, Истина - если нужно формировать кнопку в командной
//						 панели ТЧ "ВедущиеВидыРасчета".
//
Процедура СоздатьКнопкуПодбораДляПВР(СсылкаПВР, ФормаЭлемента, СтруктураДействий, ВедущиеВидыРасчета = Ложь) Экспорт
	
	МассивДоступныхТипов = Новый Массив;
	
	КоллекцияБазовыхВидовРасчета = Метаданные.ПланыВидовРасчета[СсылкаПВР.Метаданные().Имя].БазовыеВидыРасчета;
	КнопкаБазовыхРасчетов = ФормаЭлемента.ЭлементыФормы.КоманднаяПанельБазовыеВидыРасчета.Кнопки.Подбор;
	
	Если КоллекцияБазовыхВидовРасчета.Количество() > 1 Тогда
		
		КнопкаБазовыхРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		
		Если ВедущиеВидыРасчета Тогда
			КнопкаВедущихРасчетов = ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор;
			КнопкаВедущихРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
		КонецЕсли;
		
		Для каждого СтрокаКоллекции Из КоллекцияБазовыхВидовРасчета Цикл
			
			ДействиеПоКнопке = СтруктураДействий.ПодМенюБазовыхВидовРасчета;
			НоваяКнопкаБазовые = КнопкаБазовыхРасчетов.Кнопки.Добавить(СтрокаКоллекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКоллекции.Синоним, ДействиеПоКнопке);
			НоваяКнопкаБазовые.ИзменяетДанные = Истина;
			
			
			Если ВедущиеВидыРасчета Тогда
				
				ДействиеПоКнопке = СтруктураДействий.ПодМенюВедущихВидовРасчета;
				НоваяКнопкаВедущие = КнопкаВедущихРасчетов.Кнопки.Добавить(СтрокаКоллекции.Имя, ТипКнопкиКоманднойПанели.Действие, СтрокаКоллекции.Синоним, ДействиеПоКнопке);
				НоваяКнопкаВедущие.ИзменяетДанные = Истина;
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКоллекции.Имя));
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе
		
		КнопкаБазовыхРасчетов.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		КнопкаБазовыхРасчетов.Действие  = СтруктураДействий.КнопкаБазовыхВидовРасчета;
		
		Если ВедущиеВидыРасчета Тогда
			
			ФормаЭлемента.ЭлементыФормы.КоманднаяПанельВедущиеВидыРасчета.Кнопки.Подбор.Действие = СтруктураДействий.КнопкаВедущихВидовРасчета;
			
			Для каждого СтрокаКоллекции Из КоллекцияБазовыхВидовРасчета Цикл
				
				МассивДоступныхТипов.Добавить(Тип("ПланВидовРасчетаСсылка." + СтрокаКоллекции.Имя));
				Прервать;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВедущиеВидыРасчета Тогда
		
		ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов(МассивДоступныхТипов);
		Если КоллекцияБазовыхВидовРасчета.Количество() = 1 Тогда
			ФормаЭлемента.ЭлементыФормы.ВедущиеВидыРасчета.Колонки.ВидРасчета.ЭлементУправления.ВыбиратьТип = Ложь;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // СоздатьКнопкуПодбораДляПВР()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРЕДСТАВЛЕНИЯ ИНФОРМАЦИИ В ФОРМЕ

// По описателям состояния расчетного документа (флажкам) формирует текст инфо-строки и важность сообщения
//
// Параметры
//	НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Отсторнирован - булево (все)
//		описывают достижение документом того или иного состояния
//
// Возвращаемое значение:
//	Структура из двух строковых значений - ТекстСообщения и ВажностьСообщения
//
Функция ПолучитьОписаниеРасчетногоДокумента(Заполнен = Ложь, ЗаполненСОшибками = Ложь, Рассчитан = Ложь, Проведен = Ложь, ЭтоИсправление = Ложь, ДокументИсправлен = Ложь, Отсторнирован = Ложь, ИмеетПродолжение = Ложь, ЯвляетсяПродолжением = Ложь) Экспорт 
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа прошлого периода; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
		КонецЕсли;
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
	ИначеЕсли Отсторнирован Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ был отменен полностью (отсторнирован); редактирование документа запрещено";
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ не рассчитан";
	ИначеЕсли Рассчитан И Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан, но не проведен";
	ИначеЕсли Рассчитан И Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ рассчитан и проведен";
	КонецЕсли;
	
	ТекстПродолжений = "";
	Если ЯвляетсяПродолжением Тогда
		ТекстПродолжений = "Этот больничный является б/л-продолжением. ";
	КонецЕсли;
	Если ИмеетПродолжение Тогда
		ТекстПродолжений = ТекстПродолжений + "Этот больничный имеет продолжение. ";
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстПродолжений + ТекстСообщения, ВажностьСообщения)
	
КонецФункции


// Функция возвращает представление периода по переданной дате
// как месяц и год в родительном падеже
// вызывается из форм настройки параметров
Функция ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаПериода) Экспорт
	Если ТипЗНЧ( ДатаПериода) = Тип("Строка") Тогда
		ПериодСтрокой = СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрЗаменить(ДатаПериода, "Январь", "Января"), "Февраль", "Февраля"), "Март", "Марта"), "Апрель", "Апреля"), "Май", "Мая"), "Июнь", "Июня"), "Июль", "Июля"), "Август", "Августа"), "Сентябрь", "Сентября"), "Октябрь", "Октября"), "Ноябрь", "Ноября"), "Декабрь", "Декабря");
	ИначеЕсли ТипЗНЧ(ДатаПериода) = Тип("Дата") Тогда
		МесяцПериода = Месяц(ДатаПериода);
		Если МесяцПериода = 1 Тогда
			ПериодСтрокой = "Января ";
		ИначеЕсли МесяцПериода = 2 Тогда
			ПериодСтрокой = "Февраля ";
		ИначеЕсли МесяцПериода = 3 Тогда
			ПериодСтрокой = "Марта ";
		ИначеЕсли МесяцПериода = 4 Тогда
			ПериодСтрокой = "Апреля ";
		ИначеЕсли МесяцПериода = 5 Тогда
			ПериодСтрокой = "Мая ";
		ИначеЕсли МесяцПериода = 6 Тогда
			ПериодСтрокой = "Июня ";
		ИначеЕсли МесяцПериода = 7 Тогда
			ПериодСтрокой = "Июля ";
		ИначеЕсли МесяцПериода = 8 Тогда
			ПериодСтрокой = "Августа ";
		ИначеЕсли МесяцПериода = 9 Тогда
			ПериодСтрокой = "Сентября ";
		ИначеЕсли МесяцПериода = 10 Тогда
			ПериодСтрокой = "Отбября ";
		ИначеЕсли МесяцПериода = 11 Тогда
			ПериодСтрокой = "Ноября ";
		ИначеЕсли МесяцПериода = 12 Тогда
			ПериодСтрокой = "Декабря ";	
		КонецЕсли;
		ПериодСтрокой = ПериодСтрокой + Формат(Год(ДатаПериода), "ЧГ=0");
	КонецЕсли;
	
	Возврат ПериодСтрокой;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ В ФОРМЕ

// Процедура заполняет вычисляемую колонку ТЧ документа "ТабельныйНомерСтрока"
//
// Параметры
//  ТЧДокумента  – Табличное поле
//  ОформленияСтрок – Коллекция значений типа ОформлениеСтроки табличного поля ТЧДокумента
//
Процедура УстановитьЗначенияКолонкиТабельныйНомерСтрока(ТЧДокумента, ОформленияСтрок) Экспорт
	
	Если ТЧДокумента.Колонки.Найти("ТабельныйНомерСтрока") = Неопределено 
		Или Не ТЧДокумента.Колонки.ТабельныйНомерСтрока.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	МассивСотрудников = Новый Массив;
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		МассивСотрудников.Добавить(СтрокаТабличнойЧасти.ДанныеСтроки.Сотрудник);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сотрудники.Код КАК ТабельныйНомер,
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Ссылка В(&парамМассивСотрудников)";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("парамМассивСотрудников", МассивСотрудников);
	
	ТабельныеНомера = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТабельныеНомера[Выборка.Сотрудник] = Выборка.ТабельныйНомер;
	КонецЦикла; 
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		СтрокаТабличнойЧасти.Ячейки.ТабельныйНомерСтрока.УстановитьТекст(ТабельныеНомера[СтрокаТабличнойЧасти.Ячейки.Сотрудник.Значение]);
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗначенияКолонкиТабельныйНомерСтрока()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ИЗМЕНЕНИЯ ВИДИМОСТИ ПАНЕЛЕЙ

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - контейнер, в котором находятся расчетный листок и разделитель
//	 ОтображатьПанель - булево, неопределено - инициализация при открытии формы
//	 Надпись - заголовок расчетного листка
//	 ПанельРасчетногоЛистка - панель расчетного листка
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиРасчетногоЛистка(Панель, ОтображатьПанель = Неопределено, Надпись, ПанельРасчетногоЛистка, Разделитель) Экспорт
	
	// Инициализация при открытии формы
	Если ОтображатьПанель = Неопределено Тогда
		ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
		Разделитель.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ОтображатьПанель Тогда
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			
			// развернем панель, привязки на форме остались правильные
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// перепривяжем ЭУ для работы с развернутой панелью
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Надпись, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
	Иначе
		Если ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			// перепривяжем ЭУ перед сверткой панели в низ
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			Надпись.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Надпись, ГраницаЭлементаУправления.Верх);
			ПанельРасчетногоЛистка.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ПанельРасчетногоЛистка, ГраницаЭлементаУправления.Низ);
			ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
			
		КонецЕсли;
	КонецЕсли;
	
	Разделитель.Доступность = ОтображатьПанель;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоГоризонтали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Право Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			Если Панель.Ширина > Форма.Ширина / 2 Тогда
				// если максимизировать форму с закрытой справкой, а потом открыть справку, то форма
				// будет выглядеть очень некрасиво
				// поэтому необходимо ограничить ширину панели справки в случаях, когда справка получается на шире чем 1/2 формы
				РазницаВШирине = Форма.Ширина - 250 - Разделитель.Лево;
			Иначе
				РазницаВШирине = Панель.Ширина - Макс(250, Мин(Форма.Ширина - 350, Панель.Ширина));
			КонецЕсли;
			Если РазницаВШирине < 0 Тогда
				РазницаВШирине = 0;
			КонецЕсли;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			Разделитель.Лево = Разделитель.Лево + РазницаВШирине;
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ОсновнаяПанель.Ширина + Разделитель.Ширина + Панель.Ширина;
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Право;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Право;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Право);
			ОсновнаяПанель.Ширина = ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель, ИмяОсновнойПанели, ПостфиксЭлементов) Экспорт
	
	Перем Элемент, Граница, Пусто;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы[ИмяОсновнойПанели];
	Панель			= Форма.ЭлементыФормы["Панель" + ПостфиксЭлементов];
	Разделитель		= Форма.ЭлементыФормы["Разделитель" + ПостфиксЭлементов];
	
	Если ОтображатьПанель Тогда
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			// установить привязку основной панели к разделителю
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Форма.Панель, ГраницаЭлементаУправления.Верх);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// установить привязку панели справки к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		КонецЕсли;
	Иначе
		Если Панель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ВысотаОсновнойПанели = ОсновнаяПанель.Высота + (ОсновнаяПанель.Верх - Панель.Верх);
			
			// сбросить привязку панели к разделителю
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// свернуть панель
			Панель.Свертка = РежимСверткиЭлементаУправления.Верх;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Верх;
			
			Панель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх);
			
			// установить привязку основной панели к форме
			ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Форма.Панель, ГраницаЭлементаУправления.Верх);
			ОсновнаяПанель.Верх		= Панель.Верх;
			ОсновнаяПанель.Высота	= ВысотаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьВидимостьПанелиПоГоризонталиЛево(Форма, ОтображатьПанель, ПраваяПанель, ЛеваяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево Тогда
			// установить привязку основной панели к разделителю
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// развернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// развернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			// Переместим разделитель к левой панели
			Разделитель.Лево = ЛеваяПанель.Лево + ЛеваяПанель.Ширина;
			
			// восстановить привязки разделителя
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Форма.Панель, ГраницаЭлементаУправления.Лево);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Разделитель, ГраницаЭлементаУправления.Право);
			
			// установить привязку панели справки к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Разделитель, ГраницаЭлементаУправления.Лево);
			
			// Ширину определим от текущего размера формы, за минусом отступов по 8 слева и справа и шириной левой панели и разделителя
			ПраваяПанель.Ширина	= Форма.Ширина - ЛеваяПанель.Ширина - Разделитель.Ширина - 8 * 2;
			ПраваяПанель.Лево	= Разделитель.Лево + Разделитель.Ширина;
		КонецЕсли;
	Иначе
		Если ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			ШиринаОсновнойПанели = ПраваяПанель.Ширина + Разделитель.Ширина + ЛеваяПанель.Ширина;
			
			// сбросить привязку панели к разделителю
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право);
			
			// установить привязку разделителя к панели справки
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Право);
			
			// свернуть панель
			ЛеваяПанель.Свертка = РежимСверткиЭлементаУправления.Лево;
			// свернуть разделитель
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Лево;
			
			ЛеваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЛеваяПанель, ГраницаЭлементаУправления.Лево);
			
			// установить привязку основной панели к форме
			ПраваяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Форма.Панель, ГраницаЭлементаУправления.Лево);
			ПраваяПанель.Лево	= 8;
			ПраваяПанель.Ширина	= ШиринаОсновнойПанели;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет отображением панелей формы путем свертки в низ
// Пареметры
//	 Панель - Панель, к низу которой производим привязку панели ВерхняяПанель при свертке панели НижняяПанель
//	 ОтображатьПанель - булево
//	 ВерхняяПанель - панель формы, которая всегда видима
//	 НижняяПанель - панель формы, которую сворачиваем в низ
//	 Разделитель - разделитель верхней и нижней панели
//
Процедура ИзменитьВидимостьПанелиПоВертикалиНиз(Панель, ОтображатьПанель, ВерхняяПанель, НижняяПанель, Разделитель) Экспорт
	
	Если ОтображатьПанель Тогда
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			// необходимо развернуть панель
			
			// текущая высота основной панели
			НачальнаяВысотаОсновнойПанели = ВерхняяПанель.Высота;
			
			// на основную панель отдаем половину высоты
			ВерхняяПанель.Высота = Окр(НачальнаяВысотаОсновнойПанели * 0.6 ,0);
			
			// развернем разделитель, устатановим его внизу основной панели, настроим привязки
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
			Разделитель.Верх = ВерхняяПанель.Верх + ВерхняяПанель.Высота;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Верх, Панель, ГраницаЭлементаУправления.Низ);
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Низ);
			
			// развернем нижнюю панель,установим ее к разделителю, настроим привязки
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			НижняяПанель.Верх = Разделитель.Верх + 6;
			НижняяПанель.Высота = НачальнаяВысотаОсновнойПанели - ВерхняяПанель.Высота - 6;
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, Разделитель, ГраницаЭлементаУправления.Верх);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
		КонецЕсли;
		
		ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Разделитель, ГраницаЭлементаУправления.Верх);
		
	Иначе // надо скрыть нижнюю панель	
		
		Если НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			
			//это та высота основной панели, которую необходимо установить
			ВысотаОсновнойПанели = НижняяПанель.Верх + НижняяПанель.Высота - ВерхняяПанель.Верх;
			
			// свернем элементы
			Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
			НижняяПанель.Свертка = РежимСверткиЭлементаУправления.Низ;
			
			//перенесем ЭУ в низ формы и переопределим привязки
			Разделитель.Верх  = ВысотаОсновнойПанели;
			НижняяПанель.Верх = ВысотаОсновнойПанели;
			Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			НижняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			
			// распахнем и привяжем основную панель
			ВерхняяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
			ВерхняяПанель.Высота = ВысотаОсновнойПанели;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЛАНОВ ВИДОВ РАСЧЕТА

Процедура УстановитьОтборыИСверткуПоказателей(ЭлементыФормы, Показатели, ПроизвольнаяФормулаРасчета = Истина) Экспорт
	
	ПоказателиДляОтбора = Новый СписокЗначений;
	Если ПроизвольнаяФормулаРасчета Тогда
		Для Каждого СтрокаПоказатель Из Показатели Цикл
			Показатель = СтрокаПоказатель.Показатель;
			Если Показатель.ВозможностьИзменения = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется И Не Показатель.Предопределенный
				И Не (Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или Показатель.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая)
				И Не (Показатель.ТарифнаяСтавка ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная 
				ИЛИ Показатель = Справочники.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая)Тогда
				
				ПоказателиДляОтбора.Добавить(Показатель);
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Использование = Истина;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.ВидСравнения = ВидСравнения.ВСписке;
		ЭлементыФормы.Показатели.ОтборСтрок.Показатель.Значение = ПоказателиДляОтбора;
	КонецЕсли;
	
	ИзменитьВидимостьПанелиПоВертикалиНиз(ЭлементыФормы.ПанельПредставлениеФормулы, ПоказателиДляОтбора.Количество() <> 0, ЭлементыФормы.СпособРасчетаПредставление, ЭлементыФормы.ПанельПоказателей, ЭлементыФормы.РазделительПоказателей)
	
КонецПроцедуры

Функция ПроверитьПВРНаПустыеСтрокиВТЧ(ВидРасчета, ЕстьВытесняющиеВидыРасчета = Ложь) Экспорт
	
	КоничествоСтрок = ВидРасчета.БазовыеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаБазовыйРасчет = ВидРасчета.БазовыеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаБазовыйРасчет.ВидРасчета) Тогда
			ВидРасчета.БазовыеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	КоничествоСтрок = ВидРасчета.ВедущиеВидыРасчета.Количество() - 1;
	НомерСтроки = 0;
	Пока НомерСтроки <= КоничествоСтрок Цикл
		СтрокаВедущийРасчет = ВидРасчета.ВедущиеВидыРасчета[НомерСтроки];
		Если Не ЗначениеЗаполнено(СтрокаВедущийРасчет.ВидРасчета) Тогда
			ВидРасчета.ВедущиеВидыРасчета.Удалить(НомерСтроки );
			КоничествоСтрок = КоничествоСтрок - 1;
		Иначе
			НомерСтроки = НомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьВытесняющиеВидыРасчета Тогда
		
		КоничествоСтрок = ВидРасчета.ВытесняющиеВидыРасчета.Количество() - 1;
		НомерСтроки = 0;
		Пока НомерСтроки <= КоничествоСтрок Цикл
			СтрокаВытесняющейРасчет = ВидРасчета.ВытесняющиеВидыРасчета[НомерСтроки];
			Если Не ЗначениеЗаполнено(СтрокаВытесняющейРасчет.ВидРасчета) Тогда
				ВидРасчета.ВытесняющиеВидыРасчета.Удалить(НомерСтроки );
				КоничествоСтрок = КоничествоСтрок - 1;
			Иначе
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
КонецФункции

// Процедура открывает редактор формуль расчета из вида расчета
//
// Параметры
//  ФормаПВР  - форма вида расчета из которой вызывается редактор формул расчета
//	Показатели - таблица показателей 
//  Наименование - наименование вида расчета
//  ФормулаРасчета - формула расчета
//
Процедура ОткрытьФормуРедактированияФормулы(ФормаПВР, Показатели, Наименование, ФормулаРасчетаПредставление, ВидРасчета, ВидПВР = "") Экспорт 
	
	РедакторФормулРасчета = ПолучитьОбщуюФорму("РедакторФормулРасчета", ФормаПВР);
	РедакторФормулРасчета.Заголовок = "Редактирование формулы расчета: " + Наименование;
	
	ПоказателиДляФормыВвода = Новый СписокЗначений;
	
	Для Каждого Показатель Из Показатели Цикл
		
		ПоказателиДляФормыВвода.Добавить(Показатель.Показатель);
		
	КонецЦикла;
	
	ФормулаРасчета = ПроведениеРасчетов.ПолучитьHTLMКодФормулыРасчета(ФормулаРасчетаПредставление, Показатели, "Текст", Истина);
	
	РедакторФормулРасчета.ВидРасчета		= ВидРасчета;
	РедакторФормулРасчета.Показатели		= ПоказателиДляФормыВвода;
	РедакторФормулРасчета.ФормулаРасчета	= ФормулаРасчета;
	РедакторФормулРасчета.ФормулаРасчетаПредставление	= ФормулаРасчетаПредставление;
	РедакторФормулРасчета.ВидПВР			= ВидПВР;
	РедакторФормулРасчета.Открыть();

КонецПроцедуры //ОткрытьФормуРедактированияФормулы

// Процедура открывает форму выбора ПланыВидовРасчета.ОсновныеНачисленияОрганизаций
// Отборы передаются в структуре СтруктураПараметровОтбора
//
// Параметры:
//	Владелец 			- владелец формы
//	Ключ 				- ключ, ссылка на ЭУ из которого открывается форма
//	СтруктураПараметровОтбора - Структура с параметрами отбора
//	СтандартнаяОбработка- Булево
//	ТекущееЗначение 	- ссылка на элемент, на котором необходимо спозиционироваться при открытии формы
//  СписокПредопределенныхВР - список значений с предопределенными ВР, для установки отбора, когда в структуре
//							   параметров отбора есть ключ - Предопределенный	
//
Процедура ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Владелец, Ключ, СтруктураПараметровОтбора, СтандартнаяОбработка, ТекущееЗначение = Неопределено, СписокПредопределенныхВР = Неопределено) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(, Владелец, Ключ);
	Если ТекущееЗначение <> Неопределено Тогда
		ФормаВыбора.НачальноеЗначениеВыбора = ТекущееЗначение;
	КонецЕсли;
	
	//установим отборы
	Для Каждого ЭлементСтруктуры Из СтруктураПараметровОтбора Цикл
		ИмяОтбора 	   = ЭлементСтруктуры.Ключ;
		Если ИмяОтбора = "Предопределенный" и ТипЗнч(СписокПредопределенныхВР) = Тип("СписокЗначений") Тогда
			ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
			ФормаВыбора.Отбор.Ссылка.Значение = СписокПредопределенныхВР;
			ФормаВыбора.Отбор.Ссылка.Использование = Истина;
		Иначе
			СписокОтбора = Новый СписокЗначений;
			СписокОтбора.ЗагрузитьЗначения(ЭлементСтруктуры.Значение);
			ФормаВыбора.Отбор[ИмяОтбора].ВидСравнения = ВидСравнения.ВСписке;
			ФормаВыбора.Отбор[ИмяОтбора].Значение = СписокОтбора;
			ФормаВыбора.Отбор[ИмяОтбора].Использование = Истина;
		КонецЕсли;	
	КонецЦикла;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ ДОПОЛНИТЕЛЬНЫХ КОЛОНОК В ТАБЛИЧНЫХ ПОЛЯХ ДОКУМЕНТОВ

Функция ДополнительныеКолонкиТабличныхПолейДокумента(ЭлементыФормы, ТабличныеПоля) Экспорт
	
	ДополнительныеКолонки = Новый Структура;
	
	Для Каждого ЭлементСоответствия Из ТабличныеПоля Цикл
		
		ТабличноеПоле = ЭлементСоответствия.Ключ;
		
		ДополнительныеКолонкиТабличногоПоля = Новый Массив;
		
		КолонкиТабличногоПоля = ЭлементыФормы[ТабличноеПоле].Колонки;
		Для Каждого КолонкаТабличногоПоля Из КолонкиТабличногоПоля Цикл
			Если НЕ КолонкаТабличногоПоля.Видимость И КолонкаТабличногоПоля.ИзменятьВидимость Тогда
				ДополнительныеКолонкиТабличногоПоля.Добавить(КолонкаТабличногоПоля);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеКолонки.Вставить(ТабличноеПоле, ДополнительныеКолонкиТабличногоПоля);
		
	КонецЦикла;
	
	Возврат ДополнительныеКолонки;
	
КонецФункции

Функция ВидимостьДополнительныхКолонок(ИмяДокумента, ТабличныеПоля) Экспорт
	
	СтруктураДанныхОВидимостиДополнительныхКолонок = ВосстановитьЗначение(ИмяДокумента + "СтруктураДанныхОВидимостиДополнительныхКолонок");

	Если СтруктураДанныхОВидимостиДополнительныхКолонок = Неопределено Тогда
		СтруктураДанныхОВидимостиДополнительныхКолонок = Новый Структура;
	КонецЕсли;
	
	Для Каждого ЭлементСоответствия Из ТабличныеПоля Цикл
		ТабличноеПоле = ЭлементСоответствия.Ключ;
		// по умолчанию дополнительные колонки "выключены"
		Если НЕ СтруктураДанныхОВидимостиДополнительныхКолонок.Свойство(ТабличноеПоле) Тогда
			СтруктураДанныхОВидимостиДополнительныхКолонок.Вставить(ТабличноеПоле, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураДанныхОВидимостиДополнительныхКолонок;
	
КонецФункции

Процедура СохранитьСтруктуруВидимостиДополнительныхКолонок(ИмяДокумента, СтруктураДанныхОВидимостиДополнительныхКолонок) Экспорт
	
	СохранитьЗначение(ИмяДокумента + "СтруктураДанныхОВидимостиДополнительныхКолонок", СтруктураДанныхОВидимостиДополнительныхКолонок);
	
КонецПроцедуры

Процедура ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ДополнительныеКолонкиТабличногоПоля, ВидимостьДополнительныхКолонок, КоманднаяПанельТабличногоПоля)Экспорт
	
	Для Каждого КолонкаТабличногоПоля Из ДополнительныеКолонкиТабличногоПоля Цикл
		КолонкаТабличногоПоля.Видимость = ВидимостьДополнительныхКолонок;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьСкрытьДополнительныеКолонки(ДополнительныеКолонки, СтруктураДанныхОВидимостиДополнительныхКолонок, ТабличныеПоляИКомандныеПанели, ТабличноеПоле = Неопределено) Экспорт
	
	Если ТабличноеПоле = Неопределено Тогда
		// управляем видимостью колонок для всех табличных полей перечисленных в структуре
		Для Каждого ТабличноеПолеДокумента Из ДополнительныеКолонки Цикл
			КоманднаяПанельТабличногоПоля 		= ТабличныеПоляИКомандныеПанели[ТабличноеПолеДокумента.Ключ];
			
			ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ТабличноеПолеДокумента.Значение, СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПолеДокумента.Ключ], КоманднаяПанельТабличногоПоля);
			
			// меняем пометку на кнопке "Дополнительно"
			КнопкаДополнительно = КоманднаяПанельТабличногоПоля.Кнопки["Дополнительно"];
			КнопкаДополнительно.Пометка = СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПолеДокумента.Ключ];
			
		КонецЦикла;
	Иначе	
		// изменяем видимость для конкретного табличного поля
		ДополнительныеКолонкиТабличногоПоля = ДополнительныеКолонки[ТабличноеПоле];
		ВидимостьДополнительныхКолонок 		= СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПоле];
		КоманднаяПанельТабличногоПоля 		= ТабличныеПоляИКомандныеПанели[ТабличноеПоле];
		
		ПоказатьСкрытьДополнительныеКолонкиТабличногоПоля(ДополнительныеКолонкиТабличногоПоля, ВидимостьДополнительныхКолонок, КоманднаяПанельТабличногоПоля);
		
		// меняем пометку на кнопке "Дополнительно"
		КнопкаДополнительно = КоманднаяПанельТабличногоПоля.Кнопки["Дополнительно"];
		КнопкаДополнительно.Пометка = СтруктураДанныхОВидимостиДополнительныхКолонок[ТабличноеПоле];
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ
	
Процедура ПроверитьДанныеОПериодическихВыплатах(Ссылка, Отказ, ПерерассчитываемыйДокумент = Неопределено, ДанныеДокумента = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	НаборЗаписей = ПроведениеРасчетов.ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка, ДанныеДокумента);
	
	Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей);
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);	
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НаборЗаписей.ПериодНачисления,
	|	НаборЗаписей.Сотрудник,
	|	НаборЗаписей.ВидРасчета,
	|	НаборЗаписей.ДокументОснование
	|ПОМЕСТИТЬ НаборЗаписей
	|ИЗ
	|	&НаборЗаписей КАК НаборЗаписей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодическиеНачисления.ВидРасчета КАК ВидРасчета,
	|	ПериодическиеНачисления.Сотрудник,
	|	ПериодическиеНачисления.ПериодНачисления,
	|	ПериодическиеНачисления.Регистратор
	|ПОМЕСТИТЬ СуществующиеЗаписи
	|ИЗ
	|	РегистрСведений.ПериодическиеНачисления КАК ПериодическиеНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НаборЗаписей КАК НаборЗаписей
	|		ПО ПериодическиеНачисления.ПериодНачисления = НаборЗаписей.ПериодНачисления
	|			И ПериодическиеНачисления.Сотрудник = НаборЗаписей.Сотрудник
	|			И ПериодическиеНачисления.ВидРасчета = НаборЗаписей.ВидРасчета
	|			И ПериодическиеНачисления.Регистратор <> НаборЗаписей.ДокументОснование";
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
	ТекстЗапроса = ТекстЗапроса + "	
	|			И (ПериодическиеНачисления.Регистратор <> &ПерерассчитываемыйДокумент)";
	КонецЕсли;
	
	// поместим в таблицу записи, которые сделаны отсторнированными документами
	ТекстЗапроса = ТекстЗапроса + "	
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сторнирование.Ссылка КАК ДокументСторно,
	|	СуществующиеЗаписи.Регистратор
	|ПОМЕСТИТЬ ДокументыСторно
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Сторнирование КАК Сторнирование
	|		ПО СуществующиеЗаписи.Регистратор = Сторнирование.СторнируемыйДокумент
	|;
	|";
	
	// поместим записи, которые сделаны исправленными документами
	ТекстЗапроса = ТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка КАК ДокументИсправление,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ПОМЕСТИТЬ ДокументыИсправления
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
	|		ПО СуществующиеЗаписи.Регистратор = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.ВидРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПремииРаботниковОрганизацийНачисления.Ссылка,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
	|		ПО СуществующиеЗаписи.Регистратор = ПремииРаботниковОрганизацийНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И ПремииРаботниковОрганизацийНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = ПремииРаботниковОрганизацийНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = ПремииРаботниковОрганизацийНачисления.Ссылка.ВидРасчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка,
	|	СуществующиеЗаписи.ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления
	|		ПО СуществующиеЗаписи.Регистратор = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|			И РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Ссылка.Проведен
	|			И СуществующиеЗаписи.Сотрудник = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.Сотрудник
	|			И СуществующиеЗаписи.ВидРасчета = РегистрацияРазовыхНачисленийРаботниковОрганизацийДополнительныеНачисления.ВидРасчета
	|;
	|";
	
	// выбираем те записи, которых нет ни в отсторнированных документах, ни в исправленных
	ТекстЗапроса = ТекстЗапроса + "	
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуществующиеЗаписи.ВидРасчета КАК ВидРасчета,
	|	СуществующиеЗаписи.Сотрудник,
	|	СуществующиеЗаписи.ПериодНачисления,
	|	СуществующиеЗаписи.Регистратор
	|ИЗ
	|	СуществующиеЗаписи КАК СуществующиеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыСторно КАК ДокументыСторно
	|		ПО СуществующиеЗаписи.Регистратор = ДокументыСторно.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДокументыИсправления КАК ДокументыИсправления
	|		ПО СуществующиеЗаписи.Регистратор = ДокументыИсправления.Регистратор
	|			И СуществующиеЗаписи.ВидРасчета = ДокументыИсправления.ВидРасчета
	|			И СуществующиеЗаписи.Сотрудник = ДокументыИсправления.Сотрудник
	|ГДЕ
	|	ДокументыИсправления.ДокументИсправление ЕСТЬ NULL 
	|	И ДокументыСторно.ДокументСторно ЕСТЬ NULL 
	|ИТОГИ ПО
	|	ВидРасчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаПоВидамРасчета = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоВидамРасчета.Следующий() Цикл
		Выборка = ВыборкаПоВидамРасчета.Выбрать();
		ТекстСотрудники = "";
		Сотрудников = 0;
		Пока Выборка.Следующий() Цикл
			Сотрудников = Сотрудников + 1;
			Если Сотрудников > 3 Тогда
				ТекстСотрудники = ТекстСотрудники + " и др.";
				Прервать;
			КонецЕсли;
			ТекстСотрудники = ТекстСотрудники + ?(ЗначениеЗаполнено(ТекстСотрудники), ", ", "") + ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Сотрудник); 
		КонецЦикла;
		Если Сотрудников = 1 Тогда
			ТекстВопроса = "Сотруднику " + ТекстСотрудники + " " 
			+ ВыборкаПоВидамРасчета.ВидРасчета + " уже начислена в этом периоде. 
			|Начислить повторно?";
		ИначеЕсли Сотрудников > 1 Тогда
			ТекстВопроса = "Сотрудникам " + ТекстСотрудники + " " 
			+ ВыборкаПоВидамРасчета.ВидРасчета + " уже начислена в этом периоде.
			|Начислить повторно?";
		Иначе
			Продолжить;
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОФОРМЛЕНИЯ ФОРМЫ

Процедура УстановитьДоступностьФормыДляРедактирования(ДокументОбъект, ФормаДокумента) Экспорт
	
	Если НЕ ФормаДокумента.ТолькоПросмотр Тогда
		ФормаДокумента.ТолькоПросмотр = НастройкаПравДоступа.ДокументВЗакрытомПериоде(ДокументОбъект);
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьФормыДляРедактирования


Процедура УстановитьЗаголовокФормыЗаписиФизлица(СтрокаОписания, ФизЛицо, ФормаЗаписи) Экспорт
	
	ФормаЗаписи.АвтоЗаголовок = Ложь; // заголовок будем писать сами
	ФормаЗаписи.Заголовок = СтрокаОписания + ": " + ОбщегоНазначения.ПолучитьПредставленияОбъектов(ФизЛицо);
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОТКРЫТИЯ ФОРМ ОБЪЕКТОВ

// Процедура открывает форму списка регистра сведений ШтатноеРасписаниеОрганизаций
//
// Параметры
//		СтруктураПараметрыФормы - структура, содержит параметры которые необходимо передать в форму
//					или значения реквизитов обработки.
//					Ключ - имя реквизита формы или экспортной переменной, значение - его значение
//
Процедура ОткрытьФормуШтатноеРасписаниеОрганизаций(СтруктураПараметрыФормы = Неопределено) Экспорт
	
	Если ТипЗнч(СтруктураПараметрыФормы) = Тип("Массив") Тогда
		МассивПараметров = СтруктураПараметрыФормы;
		СтруктураПараметрыФормыПриОткрытии = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		СтруктураПараметрыФормыПриОткрытии = СтруктураПараметрыФормы;
	КонецЕсли;
	
	Форма = РегистрыСведений.ШтатноеРасписаниеОрганизаций.ПолучитьФорму("ФормаСписка");
	Если СтруктураПараметрыФормыПриОткрытии <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Форма, СтруктураПараметрыФормыПриОткрытии);
	КонецЕсли;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ОткрытьФормуЭлементаОрганизация(Организация, ИмяСтраницы = Неопределено, ИмяТекущегоЭлемента = Неопределено) Экспорт
	
	Если ТипЗнч(Организация) = Тип("Массив") Тогда
		МассивПараметров = Организация;
		ИмяТекущегоЭлемента = ?(МассивПараметров.Количество() = 3, МассивПараметров[2], Неопределено);
		ИмяСтраницы = ?(МассивПараметров.Количество() > 1, МассивПараметров[1], Неопределено);
		ОрганизацияДляОткрытия = ?(МассивПараметров.Количество() > 0, МассивПараметров[0], Неопределено);
	Иначе
		ОрганизацияДляОткрытия = Организация;
	КонецЕсли;
	
	Если ОрганизацияДляОткрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ОрганизацияДляОткрытия.ПолучитьФорму("ФормаЭлемента");
	Форма.Открыть();
	
	Если ИмяСтраницы <> Неопределено Тогда
		Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ИмяСтраницы);
	КонецЕсли;
	
	Если ИмяТекущегоЭлемента <> Неопределено Тогда
		Форма.ТекущийЭлемент = Форма.ЭлементыФормы.Найти(ИмяТекущегоЭлемента);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// процедуры поддержки команд в журналах документов

// Процедура дополняет переданный список значений видами документов, регистрируемых 
// в журнале и заполняет их представления
// 
// Параметры:
//	МетаданныеЖурнала - метаданные журнала
//  СписокВидов - необязательный. Дополняемый список значений
Процедура ДополнитьСписокВидовДокументов(МетаданныеЖурнала, СписокВидов) Экспорт
	Если СписокВидов = НеОпределено Тогда
		СписокВидов = Новый СписокЗначений;
	КонецЕсли;
	Для Каждого МетаданныеДокумента Из МетаданныеЖурнала.РегистрируемыеДокументы Цикл
		ВидДокумента = СписокВидов.НайтиПоЗначению(МетаданныеДокумента.Имя);
		Если ВидДокумента = НеОпределено Тогда
			СписокВидов.Добавить(МетаданныеДокумента.Имя, МетаданныеДокумента.Представление());
		Иначе
			Если НЕ ЗначениеЗаполнено(ВидДокумента.Представление) Тогда
				ВидДокумента.Представление = МетаданныеДокумента.Представление();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация = Неопределено, ЭлементСписок = Неопределено) Экспорт
	
	МетаданныеДокумента = Метаданные.Документы[ВидДокумента];
	
	Если Не ПравоДоступа("ИнтерактивноеДобавление", МетаданныеДокумента) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	
	ФормаНовогоДокумента = Документы[ВидДокумента].ПолучитьФормуНовогоДокумента(, ЭлементСписок);
	Если Организация <> Неопределено И МетаданныеДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Если ТипЗнч(ФормаНовогоДокумента) = Тип("Форма") Тогда
			ФормаНовогоДокумента.Организация = Организация;
		Иначе // Управляемая форма
			ФормаНовогоДокумента.Объект.Организация = Организация;
		КонецЕсли;
	КонецЕсли;
	
	ФормаНовогоДокумента.ЗакрыватьПриЗакрытииВладельца = Ложь;
	ФормаНовогоДокумента.Открыть();
	
КонецПроцедуры

Процедура ОткрытьПоВидуДокумента(ВидДокумента) Экспорт
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы[ВидДокумента]) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	ФормаСписка = Документы[ВидДокумента].ПолучитьФормуСписка();
	ФормаСписка.Открыть();
КонецПроцедуры

Процедура ЖурналДокументовСписокПередНачаломДобавления(СписокВидовДокументов, Отказ, Копирование, Форма, Организация = Неопределено) Экспорт
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	СписокМеню = Новый СписокЗначений;
	
	Для Каждого ЭлементСписка Из СписокВидовДокументов Цикл
		Если ЭлементСписка.Значение <> НеОпределено Тогда
			СписокМеню.Добавить(ЭлементСписка.Значение, 
			ЭлементСписка.Представление,
			ЭлементСписка.Пометка,
			ЭлементСписка.Картинка);
		КонецЕсли;
	КонецЦикла;
	ВыбранныйЭлемент = Форма.ВыбратьИзМеню(СписокМеню);
	Если ВыбранныйЭлемент <> НеОпределено Тогда
		СоздатьПоВидуДокументаСтрокой(ВыбранныйЭлемент.Значение, Организация, Форма.ЭлементыФормы.ЖурналДокументовСписок);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вводит команды для создания документов и открытия форм 
// списков документов для журнала
// Параметры:
//	СписокВидовДокументов - список значений с видами документов строкой
//	КнопкиДобавить - массив подменю, в которые необходимо добавить команды создания документов
//	КнопкиОткрыть - массив подменю, в которые необходимо добавить команды открытия списков документов
//  ДействиеСоздать - действие команды создания документов
//  ДействиеОткрыть - действие команды открытия списков документов
// 
Процедура ВвестиКомандыПоВидамДокументов(СписокВидовДокументов, КнопкиДобавить, КнопкиОткрыть, 
	ДействиеСоздать, ДействиеОткрыть) Экспорт
	Для Каждого ВидДокумента Из СписокВидовДокументов Цикл
		Если ВидДокумента.Значение = НеОпределено Тогда  // разделитель
			Для Каждого Кнопки Из КнопкиДобавить Цикл
				Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КонецЦикла;
			Для Каждого Кнопки Из КнопкиОткрыть Цикл
				Кнопки.Добавить(, ТипКнопкиКоманднойПанели.Разделитель);
			КонецЦикла;
		Иначе // команда
			Для Каждого Кнопки Из КнопкиДобавить Цикл
				Кнопки.Добавить(ВидДокумента.Значение, 
				ТипКнопкиКоманднойПанели.Действие, 
				ВидДокумента.Представление,
				ДействиеСоздать);
			КонецЦикла;
			Для Каждого Кнопки Из КнопкиОткрыть Цикл
				Кнопки.Добавить(ВидДокумента.Значение, 
				ТипКнопкиКоманднойПанели.Действие, 
				ВидДокумента.Представление,
				ДействиеОткрыть);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// возвращает истина если для документа определена печать по умолчанию иначе ложь
//
// Параметры
//  ИмяДокумента					- строка, имя документа
//  СоответствиеОписанияДокументов	- соответствие, содержит признак наличия у документа печатной формы
//
// Возвращаемое значение:
//   булево
//
Функция ДляДокументаОпределенаПечатьПоУмолчанию(ИмяДокумента, СоответствиеОписанияДокументов) Экспорт
	
	ЗначениеИзСоответствия = СоответствиеОписанияДокументов[ИмяДокумента];
	Если ЗначениеИзСоответствия = Неопределено Тогда
		МенеджерДокумента = Документы[ИмяДокумента];
		Попытка
			СтруктураВнутреннихПечатныхФорм = МенеджерДокумента.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм()
		Исключение
			СтруктураВнутреннихПечатныхФорм = Новый Структура;
		КонецПопытки;
		ДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(МенеджерДокумента.ПустаяСсылка(), СтруктураВнутреннихПечатныхФорм);
		СтрокаПоУмолчанию = УниверсальныеМеханизмы.ПолучитьСтрокуДереваМакетовПоУмолчанию(ИмяДокумента, ДеревоМакетов);
		ЗначениеИзСоответствия = СтрокаПоУмолчанию <> Неопределено; 
		СоответствиеОписанияДокументов.Вставить(ИмяДокумента, ЗначениеИзСоответствия);
	КонецЕсли;
	
	Возврат ЗначениеИзСоответствия;
	
КонецФункции // ДляДокументаОпределенаПечатьПоУмолчанию()

// Функция определяет доступность организаций
//
// Параметры
//  нет
//
// Возвращаемое значение:
//	ДоступностьОрганизаций - 	структура, определяет доступность нескольких организаций,
//  							нескольких головных организаций
//
Функция ДоступностьОрганизаций() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Организации.Ссылка,
	|	Организации.ГоловнаяОрганизация
	|ПОМЕСТИТЬ РазрешенныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоОрганизаций
	|ПОМЕСТИТЬ ДоступныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	|	КОЛИЧЕСТВО(РазрешенныеОрганизации.Ссылка) КАК КоличествоГоловныхОрганизаций
	|ПОМЕСТИТЬ ДоступныеГоловныеОрганизации
	|ИЗ
	|	РазрешенныеОрганизации КАК РазрешенныеОрганизации
	|ГДЕ
	|	РазрешенныеОрганизации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДоступныеОрганизации.КоличествоОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоОрганизаций,
	|	ВЫБОР
	|		КОГДА ДоступныеГоловныеОрганизации.КоличествоГоловныхОрганизаций > 1
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоступноНесколькоГоловныхОрганизаций
	|ИЗ
	|	ДоступныеОрганизации КАК ДоступныеОрганизации,
	|	ДоступныеГоловныеОрганизации КАК ДоступныеГоловныеОрганизации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	ДоступностьОрганизаций = Новый Структура("ДоступноНесколькоОрганизаций,ДоступноНесколькоГоловныхОрганизаций");
	ЗаполнитьЗначенияСвойств(ДоступностьОрганизаций, Выборка);
	
	Возврат ДоступностьОрганизаций;
	
КонецФункции

// Процедура определяет необходимость быстрого отбора по организации, 
//  устанавливает его, если такая необходимость есть, или скрывает, если ее нет
//
// Параметры
//  Форма 							- форма списка документов или журнала документов
//  ИмяСпискаДокументов				- строка, имя реквизита содержащего список документов
//
Процедура НастроитьОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации = Ложь) Экспорт
	
	ДоступностьОрганизаций = ДоступностьОрганизаций();
	ОтборДоступен = ?(ОтборПоГоловнойОрганизации, ДоступностьОрганизаций.ДоступноНесколькоГоловныхОрганизаций, ДоступностьОрганизаций.ДоступноНесколькоОрганизаций);
	
	ЭлементыФормы = Форма.ЭлементыФормы;
	ЭлементыФормы[ИмяСпискаДокументов].Колонки.Организация.Видимость = ОтборДоступен;
	
	// если элемент управления отбором размещен на панели - управляем сверткой
	// если нет - видимостью
	Если ЭлементыФормы.Найти("ПанельОтборПоОрганизации") = Неопределено Тогда
		ЭлементыФормы.ОрганизацияФлаг.Видимость = ОтборДоступен;
		ЭлементыФормы.Организация.Видимость 	= ОтборДоступен;
	Иначе
		ЭлементыФормы.ПанельОтборПоОрганизации.Свертка = ?(ОтборДоступен, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	КонецЕсли;
	
	Если ОтборДоступен Тогда
		УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - общая часть обработок оповещения форм списков документов и журналов документов
//
// Параметры
//  Форма 							- форма списка документов или журнала документов
//  ИмяСпискаДокументов				- строка, имя реквизита содержащего список документов
//
Процедура ОбработкаОповещенияСпискаДокументов(ИмяСобытия, Параметр, Источник, Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации = Ложь) Экспорт
		
	Если ИмяСобытия = "ЗаписьПользователя" И Параметр = глЗначениеПеременной("глТекущийПользователь") Тогда
		УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаИзмененияБыстрогоОтбораПоОрганизации(Форма, Элемент, ИмяСпискаДокументов) Экспорт
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Форма[ИмяСпискаДокументов].Отбор.Организация.Использование = ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры

Процедура УстановитьБыстрыйОтборПоОрганизации(Форма, ИмяСпискаДокументов, ОтборПоГоловнойОрганизации) 
	
	// проверим, не открывается ли список из документа
	ПараметрТекущаяСтрока = Форма.ПараметрТекущаяСтрока;
	Если ЗначениеЗаполнено(ПараметрТекущаяСтрока) Тогда
		ЗначениеОтбора = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПараметрТекущаяСтрока, "Организация");
	Иначе
		ЗначениеОтбора = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	ГоловнаяОрганизация = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ЗначениеОтбора, "ГоловнаяОрганизация");
	Если ОтборПоГоловнойОрганизации 
		И ЗначениеЗаполнено(ЗначениеОтбора) 
		И ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ЗначениеОтбора = ГоловнаяОрганизация;
	КонецЕсли;
	
	Форма[ИмяСпискаДокументов].Отбор.Организация.Установить(ЗначениеОтбора, ЗначениеЗаполнено(ЗначениеОтбора));	
		
КонецПроцедуры

Процедура СписокДокументовПередНачаломДобавления(Форма, Отказ, Копирование, Организация, ВидДокумента) Экспорт
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	СоздатьПоВидуДокументаСтрокой(ВидДокумента, Организация, Форма.ЭлементыФормы.ДокументСписок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ДЕЙСТВИЙ

Процедура ОткрытьГрафик(Параметры) Экспорт
	
	Если Параметры.Количество() < 2 Тогда
		Для Каждого Элемент Из Параметры Цикл
			Сообщить(Элемент);
		КонецЦикла;
		
	Иначе
		ГрафикРаботы = Параметры[0];
		Дата = Параметры[1];
		Если ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.ГрафикиРаботы") Тогда
			// Открываем справочник ГрафикиРаботы.
			ГрафикРаботы.ПолучитьФорму().Открыть();
		ИначеЕсли ТипЗнч(ГрафикРаботы) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
			// Ищем и открываем документ Табель, если его нет, тогда индивидуальныйГрафик
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.УстановитьПараметр("Сотрудник", ГрафикРаботы);
			Запрос.УстановитьПараметр("Дата", НачалоМесяца(Дата));
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ГрафикиРаботы.Документ
			|ПОМЕСТИТЬ ВТПодневныеДокументы
			|ИЗ
			|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
			|ГДЕ
			|	ГрафикиРаботы.ГрафикРаботы = &Сотрудник
			|	И НАЧАЛОПЕРИОДА(ГрафикиРаботы.Дата, МЕСЯЦ) = &Дата
			|	И ГрафикиРаботы.Месяц = &Дата
			|	И (НЕ ГрафикиРаботы.Документ В (ЗНАЧЕНИЕ(Документ.ТабельУчетаРабочегоВремениОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ВводИндивидуальныхГрафиковРаботыОрганизации.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СдельныйНаряд.ПустаяСсылка)))
			|
			|СГРУППИРОВАТЬ ПО
			|	ГрафикиРаботы.Документ,
			|	ГрафикиРаботы.План";
			Запрос.Выполнить();
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) КАК документ
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеТабели.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеТабели
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеТабели.Период, ДЕНЬ) = &Дата
			|			И СводныеТабели.Сотрудник = &Сотрудник
			|			И СводныеТабели.Регистратор ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеТабели.Регистратор) КАК СводныеТабели
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеТабели
			|		ПО (ПодневныеТабели.Документ ССЫЛКА Документ.ТабельУчетаРабочегоВремениОрганизации)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеНаряды.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК СводныеНаряды
			|		ГДЕ
			|			НАЧАЛОПЕРИОДА(СводныеНаряды.Период, ДЕНЬ) = &Дата
			|			И СводныеНаряды.Сотрудник = &Сотрудник
			|			И СводныеНаряды.Регистратор ССЫЛКА Документ.СдельныйНаряд
			|		
			|		СГРУППИРОВАТЬ ПО
			|			СводныеНаряды.Регистратор) КАК СводныеНаряды
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеНаряды
			|		ПО (ПодневныеНаряды.Документ ССЫЛКА Документ.СдельныйНаряд)
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СводныеГрафики.Регистратор КАК Регистратор
			|		ИЗ
			|			РегистрСведений.СводныеИндивидуальныеГрафики КАК СводныеГрафики
			|		ГДЕ
			|			СводныеГрафики.Сотрудник = &Сотрудник
			|			И СводныеГрафики.Месяц = &Дата) КАК СводныеГрафики
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПодневныеДокументы КАК ПодневныеГрафики
			|		ПО (ПодневныеГрафики.Документ ССЫЛКА Документ.ВводИндивидуальныхГрафиковРаботыОрганизации)
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник
			|	И ЕСТЬNULL(СводныеТабели.Регистратор, ЕСТЬNULL(ПодневныеТабели.Документ, ЕСТЬNULL(СводныеНаряды.Регистратор, ЕСТЬNULL(ПодневныеНаряды.Документ, ЕСТЬNULL(СводныеГрафики.Регистратор, ПодневныеГрафики.Документ))))) ЕСТЬ НЕ NULL ";
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Выборка.Документ.ПолучитьФорму().Открыть();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидДохода - СправочникСсылка.ДоходыПоСтраховымВзносам - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПредставлениеВидаДоходаПоСтраховымВзносам(ВидДохода) Экспорт
	
	Если ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоговорыГПХ Тогда
		РасшифровкаВидДохода = "Вознаграждения, выплачиваемые по договорам гражданско-правового характера. Облагаются страховыми взносами в ПФР и ФОМС целиком, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.Матпомощь Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (пункт 11 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ПФР, ФОМС и ФСС частично (подпункт в) пункта 3 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Является объектом обложения, но не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС на основании части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ (кроме пособий по социальному страхованию за счет ФСС, частично облагаемой материальной помощи и денежного довольствия)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом Тогда
		РасшифровкаВидДохода = "Не является объектом обложения страховыми взносами в ПФР, ФОМС и ФСС в соответствии с частями 3 и 4 статьи 7 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом Тогда
		РасшифровкаВидДохода = "Облагается целиком страховыми взносами в ПФР, ФОМС и ФСС"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС Тогда
		РасшифровкаВидДохода = "Не облагаются целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 1 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.РаспределятьПоБазовымНачислениям Тогда
		РасшифровкаВидДохода = "Порядок учета начисления определяется по расчетной базе"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеДовольствиеВоеннослужащих Тогда
		РасшифровкаВидДохода = "Не облагается целиком страховыми взносами в ПФР, ФОМС и ФСС в соответствии с пунктом 14 части 1 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДенежноеСодержаниеПрокуроров Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору Тогда
		РасшифровкаВидДохода = "Облагаются страховыми взносами в ФОМС целиком, не облагаются страховыми взносами в ПФР и ФСС (пункты 1, 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору Тогда
		РасшифровкаВидДохода = "Облагается страховыми взносами в ФСС и ФОМС целиком, не облагаются страховыми взносами в ПФР (пункт 1 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"	
	ИначеЕсли ЗначениеЗаполнено(ВидДохода) Тогда // различные авторские
		РасшифровкаВидДохода = "При исчислении страховых взносов в ПФР, ФОМС учитываются произведенные расходы согласно части 7 статьи 8 Федерального закона от 24 июля 2009 года № 212-ФЗ, не облагаются страховыми взносами в ФСС (пункт 2 части 3 статьи 9 Федерального закона от 24 июля 2009 года № 212-ФЗ)"
	ИначеЕсли ВидДохода = Справочники.ДоходыПоСтраховымВзносам.ПустаяСсылка() Тогда
		РасшифровкаВидДохода = "Не указан порядок учета начисления для целей исчисления страховых взносов в ПФР, ФОМС и ФСС"
	Иначе
		РасшифровкаВидДохода = "Не отражается в учете для целей исчисления взносов в ПФР, ФОМС и ФСС"
	КонецЕсли;
	
	Возврат РасшифровкаВидДохода	
	
КонецФункции // ПолучитьПредставлениеКодаДоходаПоЕСН()

// Формирует представление переданного вида дохода с "предметной" точки зрения
//
// Параметры
//  , ВидНачисления - ПеречислениеСсылка.ВидыНачисленийОплатыТрудаПоСт255НК - описываемый вид дохода
//
// Возвращаемое значение:
//   строка - сформированное представление
//
Функция ПолучитьПредставлениеВидаДоходаПоНУ(ВидНачисления) Экспорт
	
	Если ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп1ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные по тарифным ставкам, должностным окладам, сдельным расценкам или в процентах от выручки в соответствии с принятыми формами и системами оплаты труда"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп2ст255 Тогда
		РасшифровкаВидНачисления = "Начисления стимулирующего характера, в том числе премии за производственные результаты, надбавки к тарифным ставкам и окладам за профессиональное мастерство, высокие достижения в труде и иные подобные показатели"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп3ст255 Тогда
		РасшифровкаВидНачисления = "Начисления стимулирующего и/или компенсирующего характера, связанные с режимом работы и условиями труда, в том числе надбавки к тарифным ставкам и окладам за работу в ночное время, работу в многосменном режиме, за совмещение профессий, расширение зон обслуживания, за работу в тяжелых, вредных, особо вредных условиях труда, за сверхурочную работу и работу в выходные и праздничные дни, производимые в соответствии с законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп4ст255 Тогда
		РасшифровкаВидНачисления = "Стоимость бесплатно предоставляемых работникам в соответствии с законодательством РФ коммунальных услуг, питания и продуктов, предоставляемого работникам в соответствии с установленным законодательством РФ порядком бесплатного жилья"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп5ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на приобретение (изготовление) выдаваемых в соответствии с законодательством РФ работникам бесплатно либо продаваемых работникам по пониженным ценам форменной одежды и обмундирования (в части стоимости, не компенсируемой работниками), которые остаются в личном постоянном пользовании работников"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп6ст255 Тогда
		РасшифровкаВидНачисления = "Сумма начисленного работникам среднего заработка, сохраняемого на время выполнения ими государственных и (или) общественных обязанностей и в других случаях, предусмотренных законодательством РФ о труде"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп7ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда, сохраняемую работникам на время отпуска, предусмотренного законодательством РФ, фактические расходы на оплату проезда работников и лиц, находящихся у этих работников на иждивении, к месту использования отпуска на территории РФ и обратно; доплата несовершеннолетним за сокращенное рабочее время, расходы на оплату перерывов в работе матерей для кормления ребенка, а также расходы на оплату времени, связанного с прохождением медицинских осмотров"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп8ст255 Тогда
		РасшифровкаВидНачисления = "Денежные компенсации за неиспользованный отпуск в соответствии с трудовым законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп9ст255 Тогда
		РасшифровкаВидНачисления = "Начисления работникам, высвобождаемым в связи с реорганизацией или ликвидацией организации, сокращением численности или штата работников"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп10ст255 Тогда
		РасшифровкаВидНачисления = "Единовременные вознаграждения за выслугу лет (надбавки за стаж работы по специальности) в соответствии с законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп11ст255 Тогда
		РасшифровкаВидНачисления = "Надбавки, обусловленные районным регулированием оплаты труда, в том числе начисления по районным коэффициентам и коэффициентам за работу в тяжелых природно-климатических условиях"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп12ст255 Тогда
		РасшифровкаВидНачисления = "Надбавки за непрерывный стаж работы в районах Крайнего Севера и приравненных к ним местностях, в районах европейского Севера и других районах с тяжелыми природно-климатическими условиями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп12_1ст255 Тогда
		РасшифровкаВидНачисления = "Стоимость проезда по фактическим расходам и стоимость провоза багажа из расчета не более 5 тонн на семью по фактическим расходам, но не выше тарифов, предусмотренных для перевозок железнодорожным транспортом сотруднику организации, расположенной в районах Крайнего Севера и приравненных к ним местностях, и членам его семьи в случае переезда к новому месту жительства в другую местность в связи с расторжением трудового договора с сотрудником по любым основаниям, в том числе в случае его смерти, за исключением увольнения за виновные действия"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп13ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда, сохраняемую в соответствии с законодательством РФ на время учебных отпусков, предоставляемых работникам, а также расходы на оплату проезда к месту учебы и обратно"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп14ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда за время вынужденного прогула или время выполнения нижеоплачиваемой работы в случаях, предусмотренных законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп15ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на доплату до фактического заработка в случае временной утраты трудоспособности, установленную законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп16ст255 Тогда
		РасшифровкаВидНачисления = "Суммы платежей (взносов) по договорам обязательного страхования, а также суммы платежей (взносов) по договорам добровольного страхования (договорам негосударственного пенсионного обеспечения), заключенным в пользу работников со страховыми организациями (негосударственными пенсионными фондами), имеющими лицензии, выданные в соответствии с законодательством РФ, на ведение соответствующих видов деятельности в РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп17ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные в размере тарифной ставки или оклада (при выполнении работ вахтовым методом), предусмотренные коллективными договорами, за дни нахождения в пути от места нахождения организации (пункта сбора) к месту работы и обратно, предусмотренные графиком работы на вахте, а также за дни задержки работников в пути по метеорологическим условиям"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп18ст255 Тогда
		РасшифровкаВидНачисления = "Суммы, начисленные за выполненную работу физическим лицам, привлеченным для работы согласно специальным договорам на предоставление рабочей силы с государственными организациями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп19ст255 Тогда
		РасшифровкаВидНачисления = "В случаях, предусмотренных законодательством РФ, начисления по основному месту работы рабочим, руководителям или специалистам налогоплательщика во время их обучения с отрывом от работы в системе повышения квалификации или переподготовки кадров"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп20ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда работников-доноров за дни обследования, сдачи крови и отдыха, предоставляемые после каждого дня сдачи крови"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп21ст255 Тогда
		РасшифровкаВидНачисления = "Расходы на оплату труда работников, не состоящих в штате организации, за выполнение ими работ по заключенным договорам гражданско-правового характера (включая договоры подряда), за исключением оплаты труда по договорам гражданско-правового характера, заключенным с индивидуальными предпринимателями"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп22ст255 Тогда
		РасшифровкаВидНачисления = "Предусмотренные законодательством РФ начисления военнослужащим, проходящим военную службу на государственных унитарных предприятиях и в строительных организациях федеральных органов исполнительной власти, в которых законодательством РФ предусмотрена военная служба, и лицам рядового и начальствующего состава органов внутренних дел, Государственной противопожарной службы, предусмотренные федеральными законами, законами о статусе военнослужащих и об учреждениях и органах, исполняющих уголовные наказания в виде лишения свободы"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп23ст255 Тогда
		РасшифровкаВидНачисления = "Доплаты инвалидам, предусмотренные законодательством РФ"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп24ст255 Тогда
		РасшифровкаВидНачисления = "Расходы в виде отчислений в резерв на предстоящую оплату отпусков работникам и (или) в резерв на выплату ежегодного вознаграждения за выслугу лет, осуществляемые в соответствии со статьей 324.1 НК"
	ИначеЕсли ВидНачисления = Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп25ст255 Тогда
		РасшифровкаВидНачисления = "Другие виды расходов, произведенных в пользу работника, предусмотренных трудовым договором и (или) коллективным договором"
	ИначеЕсли ВидНачисления.Пустая() Тогда
		РасшифровкаВидНачисления = "Не учитывается в расходах на оплату труда"
	КонецЕсли;
	
	Возврат РасшифровкаВидНачисления	
	
КонецФункции // ПолучитьПредставлениеВидаДоходаПоНУ()


Процедура ПеренестиБлокКолонокЦеликом(КоллекцияКолонок, КолонкаЗаголовок, БлокКолонок) Экспорт
	
	ВидимостьКолонок = КолонкаЗаголовок.Видимость;
	ИндексЗаголовка = КоллекцияКолонок.Индекс(КолонкаЗаголовок);
	Для каждого КолонкаБлока Из БлокКолонок Цикл
		КолонкаБлока.Видимость = ВидимостьКолонок
	КонецЦикла;
	Смещение = КоллекцияКолонок.Индекс(КолонкаЗаголовок) - КоллекцияКолонок.Индекс(БлокКолонок[0]) + 1;
	Если Смещение <> 0 Тогда
		Для Индекс = 0 по БлокКолонок.ВГраница() Цикл
			КолонкаБлока = БлокКолонок[Индекс];
			КоллекцияКолонок.Сдвинуть(КолонкаБлока,Смещение);
			КолонкаБлока.Положение = ?(Индекс = 0, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.ВТойЖеКолонке)
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПрочитатьГодыРасчетаСреднего2011(ДокументОбъект, ФормаДокумента) Экспорт
	
	ГодыРасчетаСреднего2011 = ДокументОбъект.ГодыРасчетаСреднего2011;
	
	ВсегоСтрок = ГодыРасчетаСреднего2011.Количество();
	Если ВсегоСтрок = 2 Тогда
		ФормаДокумента.ПервыйГодРасчета = ГодыРасчетаСреднего2011[0].Год;
		ФормаДокумента.ВторойГодРасчета = ГодыРасчетаСреднего2011[1].Год;
	ИначеЕсли ВсегоСтрок = 1 Тогда	
		ФормаДокумента.ПервыйГодРасчета = ГодыРасчетаСреднего2011[0].Год;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаписатьГодыРасчетаСреднего2011(ДокументОбъект, ФормаДокумента) Экспорт

	ДокументОбъект.ГодыРасчетаСреднего2011.Очистить();
	Если ФормаДокумента.ПервыйГодРасчета <> 0 Тогда
		ДокументОбъект.ГодыРасчетаСреднего2011.Добавить().Год = ФормаДокумента.ПервыйГодРасчета;
	КонецЕсли;
	Если ФормаДокумента.ВторойГодРасчета <> 0 Тогда
		ДокументОбъект.ГодыРасчетаСреднего2011.Добавить().Год = ФормаДокумента.ВторойГодРасчета;
	КонецЕсли;
	ДокументОбъект.ГодыРасчетаСреднего2011.Сортировать("Год");

КонецПроцедуры
