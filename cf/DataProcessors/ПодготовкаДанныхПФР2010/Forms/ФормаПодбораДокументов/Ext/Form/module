////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СерыйЦвет;

// Хранит соответствие, при помощи которого храним и показываем содержимое пачки
Перем СоответствиеСсылокИОбъектов Экспорт;

Перем КаталогСведений;
Перем ДеревоСведенийАДВ_6_2;
Перем ОтчетныйПериод;
Перем НомерПачки;
Перем КоличествоИсходныхФорм;
Перем КоличествоКорректирующихФорм;
Перем СтатусКорректностиФайла;
Перем ДобавленыНовыеФизлица;
Перем МассивСтрокСИменамиФайлов;
Перем ТекстыИзАрхивов;
Перем ТекстыИзФайлов;
Перем ФайловыеТексты;
Перем АрхивныеТексты;
Перем ДанныеАрхиваАДВ;
Перем ТекстАДВ;

Перем Классификаторы;

///////////////////////////////////////////////////////
// Работа с деревом XDTO
///////////////////////////////////////////////////////

// Проверяет существование свойства 
//
// Параметры
//  Дерево  - ОбъектXDTO - Объект в котором проверяется наличие свойства
//  ИмяСвойства  - Строка - Последовательность свойств так, как оно предполагается
//                 быть найденным, разделенным /.
//
// Возвращаемое значение:
//   Булево   - Истина - свойство есть, Ложь - Нет
//
Функция СвойствоСуществует(Дерево, Знач ИмяСвойства)

	ПозицияРазделителя = Найти(ИмяСвойства, "/");
	
	Если ПозицияРазделителя = 0 Тогда
	
		ТекущееИмяСвойство = ИмяСвойства;
		
		ИмяСвойства = "";
	
	Иначе
	
		ТекущееИмяСвойство = Лев(ИмяСвойства, ПозицияРазделителя - 1);
		
		ИмяСвойства = Сред(ИмяСвойства, ПозицияРазделителя + 1);
	
	КонецЕсли; 
	
	ТекущееСвойство = Дерево.Свойства().Получить(ТекущееИмяСвойство);
	
	Если ТекущееСвойство = Неопределено Тогда
	
		Возврат Ложь;
		
	ИначеЕсли СтрДлина(ИмяСвойства) = 0 Тогда
		
		Возврат Истина;
		
	КонецЕсли; 
	
	Возврат СвойствоСуществует(Дерево.ПолучитьXDTO(ТекущееСвойство), ИмяСвойства);

КонецФункции // СвойствоСуществует()

// Получает отбъект XDTO расположенный по указанному пути
//
// Параметры
// 	XDTO  - ОбъектXDTO - Объект в котором проверяется наличие свойства
// 	ИмяСвойства - Строка - путь к совойству в иерархии объекта
//
// Возвращаемое значение:
// 	Неопределено - если пути не существует
// 	ОбъектXDTO - найденный отбъект
//
Функция ОбъектXDTOИзДерева(XDTO, ИмяСвойства)
	
	Если Не СвойствоСуществует(XDTO, ИмяСвойства) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 

	Возврат XDTO.ПолучитьXDTO(ИмяСвойства);

КонецФункции // НайтиБлок()

// Получает строковое представление свойства по указанному пути
//
// Параметры
// 	XDTO  - ОбъектXDTO - Объект в котором проверяется наличие свойства
// 	ИмяСвойства - Строка - путь к совойству в иерархии объекта
//
// Возвращаемое значение:
// 	Строка - значение свойства
//
Функция ЗначениеXDTOИзДерева(XDTO, ИмяСвойства)
	
	Если Не СвойствоСуществует(XDTO, ИмяСвойства) Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 

	ВозвращаемоеЗначение =  XDTO.Получить(ИмяСвойства);
	
	// Вот сдесь непонятно, если значение свойства не задано
	// по моей логике должен возвращать пустую строку
	// возвращает пустой ОбъектXDTO
	Если ТипЗнч(ВозвращаемоеЗначение) = Тип("ОбъектXDTO") Тогда
		
		Если ВозвращаемоеЗначение.Свойства().Количество() = 0 Тогда
		
			Возврат "";
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	Возврат ВозвращаемоеЗначение;

КонецФункции // ЗначениеXDTOИзДерева()

// Получает список объектов XDTO, если список имеет место быть возвращается
// обект СписокXDTO, если узел только один создаем массив и добавляем туда 
// найденное значение узла.
//
// Параметры
//  XDTO  		- ОбъектXDTO - <описание параметра>
//  ИмяСписка  	- Строка - с именем "списочного" параметра
//
// Возвращаемое значение:
//   СписокXDTO   - если действительно таких узлов в списке более 1
//   Массив		  - с ОбъектXDTO, если узел только один
//
Функция СписокXDTOИзДерева(XDTO, ИмяСписка)

	Попытка
		
		Возврат XDTO.ПолучитьСписок(ИмяСписка);
	
	Исключение
	
		МассивСвойств = Новый Массив;
		МассивСвойств.Добавить(ОбъектXDTOИзДерева(XDTO, ИмяСписка));

		Возврат МассивСвойств;
		
	КонецПопытки;
	
КонецФункции // СписокXDTOИзДерева()
 
////////////////////////////////////////////////////////////////////////////////

// Сохраняет данные о стаже в регистр сведений ЗаписиОСтажеДляСЗВ4
//
// Параметры
//  ТаблицаДанныхОСтаже			- Таблица значений
//
Процедура ЗаписатьДанныеОСтаже(ТаблицаДанныхОСтаже)
	
	Если ТаблицаДанныхОСтаже.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	ТаблицаДанныхОСтаже.Индексы.Добавить("ФизЛицо");
	
	Набор = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	Набор.Отбор.ОтчетныйПериод.Установить(ТаблицаДанныхОСтаже[0].ОтчетныйПериод);
	Набор.Отбор.ОбособленноеПодразделение.Установить(ТаблицаДанныхОСтаже[0].ОбособленноеПодразделение);
	Набор.Отбор.КатегорияЗастрахованныхЛиц.Установить(ТаблицаДанныхОСтаже[0].КатегорияЗастрахованныхЛиц);
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтажеДляСЗВ4.ФизЛицо,
	|	ЗаписиОСтажеДляСЗВ4.ОтчетныйПериод,
	|	ЗаписиОСтажеДляСЗВ4.ОбособленноеПодразделение,
	|	ЗаписиОСтажеДляСЗВ4.КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтажеДляСЗВ4.НомерОсновнойЗаписи,
	|	ЗаписиОСтажеДляСЗВ4.НомерДополнительнойЗаписи,
	|	ЗаписиОСтажеДляСЗВ4.ДатаНачалаПериода,
	|	ЗаписиОСтажеДляСЗВ4.ДатаОкончанияПериода,
	|	ЗаписиОСтажеДляСЗВ4.ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВ4.КодПозицииСписка,
	|	ЗаписиОСтажеДляСЗВ4.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ОснованиеВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ТерриториальныеУсловия,
	|	ЗаписиОСтажеДляСЗВ4.ПараметрТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТНовыеДанные
	|ИЗ
	|	&ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтажеДляСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеДанные.ФизЛицо,
	|	НовыеДанные.ОтчетныйПериод,
	|	НовыеДанные.ОбособленноеПодразделение,
	|	НовыеДанные.КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	ВТНовыеДанные КАК НовыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизЛица.ФизЛицо,
	|	ФизЛица.ОтчетныйПериод,
	|	ФизЛица.ОбособленноеПодразделение,
	|	ФизЛица.КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтажеДляСЗВ4.НомерОсновнойЗаписи,
	|	ЗаписиОСтажеДляСЗВ4.НомерДополнительнойЗаписи,
	|	ЗаписиОСтажеДляСЗВ4.ДатаНачалаПериода,
	|	ЗаписиОСтажеДляСЗВ4.ДатаОкончанияПериода,
	|	ЗаписиОСтажеДляСЗВ4.ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВ4.КодПозицииСписка,
	|	ЗаписиОСтажеДляСЗВ4.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ОснованиеВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ТерриториальныеУсловия,
	|	ЗаписиОСтажеДляСЗВ4.ПараметрТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТДанныеРегистра
	|ИЗ
	|	ВТФизЛица КАК ФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтажеДляСЗВ4
	|		ПО ФизЛица.ФизЛицо = ЗаписиОСтажеДляСЗВ4.ФизЛицо
	|			И ФизЛица.ОтчетныйПериод = ЗаписиОСтажеДляСЗВ4.ОтчетныйПериод
	|			И ФизЛица.ОбособленноеПодразделение = ЗаписиОСтажеДляСЗВ4.ОбособленноеПодразделение
	|			И ФизЛица.КатегорияЗастрахованныхЛиц = ЗаписиОСтажеДляСЗВ4.КатегорияЗастрахованныхЛиц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеДанные.ФизЛицо
	|ИЗ
	|	ВТНовыеДанные КАК НовыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРегистра КАК ДанныеРегистра
	|		ПО НовыеДанные.ФизЛицо = ДанныеРегистра.ФизЛицо
	|			И НовыеДанные.НомерОсновнойЗаписи = ДанныеРегистра.НомерОсновнойЗаписи
	|			И НовыеДанные.НомерДополнительнойЗаписи = ДанныеРегистра.НомерДополнительнойЗаписи
	|			И НовыеДанные.ДатаНачалаПериода = ДанныеРегистра.ДатаНачалаПериода
	|			И НовыеДанные.ДатаОкончанияПериода = ДанныеРегистра.ДатаОкончанияПериода
	|			И НовыеДанные.ОсобыеУсловияТруда = ДанныеРегистра.ОсобыеУсловияТруда
	|			И НовыеДанные.КодПозицииСписка = ДанныеРегистра.КодПозицииСписка
	|			И НовыеДанные.ОснованиеИсчисляемогоСтажа = ДанныеРегистра.ОснованиеИсчисляемогоСтажа
	|			И НовыеДанные.ПервыйПараметрИсчисляемогоСтажа = ДанныеРегистра.ПервыйПараметрИсчисляемогоСтажа
	|			И НовыеДанные.ВторойПараметрИсчисляемогоСтажа = ДанныеРегистра.ВторойПараметрИсчисляемогоСтажа
	|			И НовыеДанные.ТретийПараметрИсчисляемогоСтажа = ДанныеРегистра.ТретийПараметрИсчисляемогоСтажа
	|			И НовыеДанные.ОснованиеВыслугиЛет = ДанныеРегистра.ОснованиеВыслугиЛет
	|			И НовыеДанные.ПервыйПараметрВыслугиЛет = ДанныеРегистра.ПервыйПараметрВыслугиЛет
	|			И НовыеДанные.ВторойПараметрВыслугиЛет = ДанныеРегистра.ВторойПараметрВыслугиЛет
	|			И НовыеДанные.ТретийПараметрВыслугиЛет = ДанныеРегистра.ТретийПараметрВыслугиЛет
	|			И НовыеДанные.ТерриториальныеУсловия = ДанныеРегистра.ТерриториальныеУсловия
	|			И НовыеДанные.ПараметрТерриториальныхУсловий = ДанныеРегистра.ПараметрТерриториальныхУсловий
	|ГДЕ
	|	ДанныеРегистра.ФизЛицо ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.ФизЛицо
	|ИЗ
	|	ВТДанныеРегистра КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНовыеДанные КАК НовыеДанные
	|		ПО ДанныеРегистра.ФизЛицо = НовыеДанные.ФизЛицо
	|			И ДанныеРегистра.НомерОсновнойЗаписи = НовыеДанные.НомерОсновнойЗаписи
	|			И ДанныеРегистра.НомерДополнительнойЗаписи = НовыеДанные.НомерДополнительнойЗаписи
	|			И ДанныеРегистра.ДатаНачалаПериода = НовыеДанные.ДатаНачалаПериода
	|			И ДанныеРегистра.ДатаОкончанияПериода = НовыеДанные.ДатаОкончанияПериода
	|			И ДанныеРегистра.ОсобыеУсловияТруда = НовыеДанные.ОсобыеУсловияТруда
	|			И ДанныеРегистра.КодПозицииСписка = НовыеДанные.КодПозицииСписка
	|			И ДанныеРегистра.ОснованиеИсчисляемогоСтажа = НовыеДанные.ОснованиеИсчисляемогоСтажа
	|			И ДанныеРегистра.ПервыйПараметрИсчисляемогоСтажа = НовыеДанные.ПервыйПараметрИсчисляемогоСтажа
	|			И ДанныеРегистра.ВторойПараметрИсчисляемогоСтажа = НовыеДанные.ВторойПараметрИсчисляемогоСтажа
	|			И ДанныеРегистра.ТретийПараметрИсчисляемогоСтажа = НовыеДанные.ТретийПараметрИсчисляемогоСтажа
	|			И ДанныеРегистра.ОснованиеВыслугиЛет = НовыеДанные.ОснованиеВыслугиЛет
	|			И ДанныеРегистра.ПервыйПараметрВыслугиЛет = НовыеДанные.ПервыйПараметрВыслугиЛет
	|			И ДанныеРегистра.ВторойПараметрВыслугиЛет = НовыеДанные.ВторойПараметрВыслугиЛет
	|			И ДанныеРегистра.ТретийПараметрВыслугиЛет = НовыеДанные.ТретийПараметрВыслугиЛет
	|			И ДанныеРегистра.ТерриториальныеУсловия = НовыеДанные.ТерриториальныеУсловия
	|			И ДанныеРегистра.ПараметрТерриториальныхУсловий = НовыеДанные.ПараметрТерриториальныхУсловий
	|ГДЕ
	|	НовыеДанные.ФизЛицо ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("ЗаписиОСтажеДляСЗВ4", ТаблицаДанныхОСтаже);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураОтбора = Новый Структура("ФизЛицо");
	Пока Выборка.Следующий() Цикл
		
		Набор.Отбор.ФизЛицо.Установить(Выборка.ФизЛицо);
		СтруктураОтбора.ФизЛицо = Выборка.ФизЛицо;
		
		СтрокиСтажа = ТаблицаДанныхОСтаже.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаСтажа Из СтрокиСтажа Цикл
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), СтрокаСтажа);
		КонецЦикла;
		
		ОбщегоНазначения.ЗаписатьНабор(Набор);
		Набор.Очистить();
		
	КонецЦикла;
	
КонецПроцедуры // СохранитьДанныеОСтаже()

Процедура ПриУказанииИмениФайла()

	ДокументАДВ62ДляЗагрузки = Неопределено;
	ОтчетныйПериод = Неопределено;
	КоличествоИсходныхФорм = Неопределено;
	КоличествоКорректирующихФорм = Неопределено;
	НомерПачки = Неопределено;
	СтатусКорректностиФайла = "";

	// проверка указанного файла
	
	ДеревоСведенийАДВ_6_2 = ЭтоXMLФайлВФорматеПФР(ИмяФайлаДанных);
	ЭтоПравильныйXMLФайл = ДеревоСведенийАДВ_6_2 <> Неопределено;
	ЭтоДокументАДВ_6_2 = ЭтоПравильныйXMLФайл И ЭтоДокументАДВ_6_2();
	ЭтоФайлТекущегоСтрахователя = ЭтоДокументАДВ_6_2 И ЭтоФайлТекущегоСтрахователя();
	ОписаниеОтсутствующихПачекСЗВ6 = ?(ЭтоФайлТекущегоСтрахователя, ОтсутствующиеПачкиСЗВ6(), "");
	НайденыВсеФайлыСЗВ6 = ЭтоФайлТекущегоСтрахователя И Не ЗначениеЗаполнено(ОписаниеОтсутствующихПачекСЗВ6);
	
	Если ПустаяСтрока(ИмяФайлаДанных) Тогда
		Описание = "Для загрузки принятых ПФРом сведений укажите файл Описи АДВ-6-2.";
	ИначеЕсли Не ЭтоПравильныйXMLФайл Тогда
		Описание = "Указанный файл не является описанием документа персонифицированного учета ПФР. Выберите другой файл.";
		СтатусКорректностиФайла = "СообщениеОПроблемах";
	ИначеЕсли Не ЭтоДокументАДВ_6_2 Тогда
		Описание = "Указанный файл не является описанием документа Опись АДВ-6-2. Выберите другой файл.";
		СтатусКорректностиФайла = "СообщениеОПроблемах";
	ИначеЕсли Не ЭтоФайлТекущегоСтрахователя Тогда
		Описание = "Указанный файл Описи АДВ-6-2 относится к другому страхователю. Выберите другой файл.";
		СтатусКорректностиФайла = "СообщениеОПроблемах";
	ИначеЕсли Не НайденыВсеФайлыСЗВ6 Тогда
		Описание = "В каталоге " + КаталогСведений + " отсутствуют файлы-описания пачек СЗВ-6-1(2) №№ " + ОписаниеОтсутствующихПачекСЗВ6 + ".";
		СтатусКорректностиФайла = "СообщениеОПроблемах";
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПодготовкиДокументов, ЭлементыФормы.ПолеКартинкиПредупреждение, Описание, СтатусКорректностиФайла);
	
	Если Не ЭтоФайлТекущегоСтрахователя Или Не НайденыВсеФайлыСЗВ6 Тогда
		ВСуществующийКомплект = Ложь;
		Возврат
	КонецЕсли;
	
	// поиск подходящего документа Описи АДВ-6-2
	
	НомерПачки = ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/НомерПачки/Основной");
	КоличествоИсходныхФорм = ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ/ЧислоИсходныхПачек");
	КоличествоКорректирующихФорм = ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ/ЧислоКорректирующихПачек");
	Квартал = ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ/ОтчетныйПериод/Квартал");
	Год = ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ/ОтчетныйПериод/Год");
	ОтчетныйПериод = ОтчетныйПериодПоГодуИКварталу(Год, Квартал);
	
	Описание = "Выбрана Опись АДВ-6-2 № " + НомерПачки + " за " + ПроцедурыПерсонифицированногоУчета.ОписаниеОтчетногоПериодаДляПоказа(ОтчетныйПериод) + ", содержит " + КоличествоИсходныхФорм + ОбщегоНазначения.ФормаМножественногоЧисла(" исходную"," исходные"," исходных", Число(КоличествоИсходныхФорм)) + ?(КоличествоКорректирующихФорм = "0","",", " + КоличествоКорректирующихФорм + ОбщегоНазначения.ФормаМножественногоЧисла(" корректирующую"," корректирующие"," корректирующих", Число(КоличествоКорректирующихФорм))) + ОбщегоНазначения.ФормаМножественногоЧисла(" пачку"," пачки"," пачек", Число(КоличествоИсходныхФорм) + Число(КоличествоКорректирующихФорм)) + " СЗВ-6. Для загрузки принятых ПФРом сведений нажмите кнопку Загрузить.";
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПодготовкиДокументов, ЭлементыФормы.ПолеКартинкиПредупреждение, Описание, СтатусКорректностиФайла);
	
	СтрокаТаблицы = ПачкиДокументов.Найти(ОтчетныйПериод,"ОтчетныйПериод");
	Если СтрокаТаблицы <> Неопределено И ЗначениеЗаполнено(СтрокаТаблицы.Пачка) Тогда
		ДокументАДВ62ДляЗагрузки = СтрокаТаблицы.Пачка;
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПередачаСЗВ4вПФР.Ссылка
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
		|ГДЕ
		|	ПередачаСЗВ4вПФР.ОтчетныйПериод = &ОтчетныйПериод
		|	И ПередачаСЗВ4вПФР.Организация = &Организация
		|	И (НЕ ПередачаСЗВ4вПФР.НеСодержитСЗВ)";
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ОтчетныйПериод", ОтчетныйПериод);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ДокументАДВ62ДляЗагрузки = Выборка.Ссылка;
		КонецЕсли; 
		
	КонецЕсли;
	
	ВСуществующийКомплект = Не ДокументАДВ62ДляЗагрузки.Пустая();
	
КонецПроцедуры

// Сохраняет данные о стаже в таблице значений для последующей записи
//
// Параметры
//  ТаблицаДанныхОСтаже			- Таблица значений
//  ФизЛицо  					- СправочникСсылка.ФизическиеЛица - текущее физ лицо
//  ОтчетныйПериод  			- Дата - Дата, характеризующая отчетный период
//  Организация  				- СправочникСсылка.Организации - организация (обособленное подразделение)
//  КатегорияЗастрахованныхЛиц  - ПеречислениеСсылка.КатегорииЗастрахованныхЛицПФР - категория застрахованного лица
//  СписокСтажей  				- ОбъектXDTO - дерево сведений о стаже физического лица
//
Процедура ПрочитатьДанныеОСтаже(ТаблицаДанныхОСтаже, ФизЛицо, ОтчетныйПериод, Организация, КатегорияЗастрахованныхЛиц, СписокСтажей)

	Для каждого ЗаписьОСтаже Из СписокСтажей Цикл
		
		Если ЗаписьОСтаже = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаписи = Новый Структура("ФизЛицо, ОтчетныйПериод, ОбособленноеПодразделение, КатегорияЗастрахованныхЛиц, НомерОсновнойЗаписи," +
				"НомерДополнительнойЗаписи, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, КодПозицииСписка," +
				"ОснованиеИсчисляемогоСтажа, ПервыйПараметрИсчисляемогоСтажа, ВторойПараметрИсчисляемогоСтажа, ТретийПараметрИсчисляемогоСтажа," +
				"ОснованиеВыслугиЛет, ПервыйПараметрВыслугиЛет, ВторойПараметрВыслугиЛет, ТретийПараметрВыслугиЛет," + 
				"ТерриториальныеУсловия, ПараметрТерриториальныхУсловий");
		
		СтруктураЗаписи.ФизЛицо						= ФизЛицо;		
		СтруктураЗаписи.ОтчетныйПериод		 		= ОтчетныйПериод;
		СтруктураЗаписи.ОбособленноеПодразделение	= Организация;
		СтруктураЗаписи.КатегорияЗастрахованныхЛиц	= КатегорияЗастрахованныхЛиц;
		
		СтруктураЗаписи.НомерОсновнойЗаписи  = ЗначениеXDTOИзДерева(ЗаписьОСтаже, "НомерСтроки");
		СтруктураЗаписи.ДатаНачалаПериода 	 = ДатаПоСтроковомуПредставлению(ЗначениеXDTOИзДерева(ЗаписьОСтаже, "ДатаНачалаПериода"));
		СтруктураЗаписи.ДатаОкончанияПериода = ДатаПоСтроковомуПредставлению(ЗначениеXDTOИзДерева(ЗаписьОСтаже, "ДатаКонцаПериода"));
		
		КоличествоЛьготныхСоставляющих = ЗначениеXDTOИзДерева(ЗаписьОСтаже, "КоличествоЛьготныхСоставляющих");
		КоличествоЛьготныхСоставляющих = ?(ЗначениеЗаполнено(КоличествоЛьготныхСоставляющих), Число(КоличествоЛьготныхСоставляющих), 0);
		
		Если КоличествоЛьготныхСоставляющих > 0 Тогда
		
			Составляющие = СписокXDTOИзДерева(ЗаписьОСтаже, "ЛьготныйСтаж");
			
			Для каждого Составляющая Из Составляющие Цикл
				
				ОсобенностиУчета = СписокXDTOИзДерева(Составляющая, "ОсобенностиУчета");
				
				Если ОсобенностиУчета.Количество() > 0 Тогда
					
					Если Число(ЗначениеXDTOИзДерева(Составляющая, "НомерСтроки")) > 1 Тогда
						СтруктураЗаписи.ДатаНачалаПериода 	 = "";
						СтруктураЗаписи.ДатаОкончанияПериода = "";
					КонецЕсли;
					
					Для каждого ОсобенностьУчета Из ОсобенностиУчета Цикл
						
						СтруктураЗаписи.ОсобыеУсловияТруда = Классификаторы[ЗначениеXDTOИзДерева(ОсобенностьУчета, "ОсобыеУсловияТруда/ОснованиеОУТ")];
						СтруктураЗаписи.КодПозицииСписка = Классификаторы[ЗначениеXDTOИзДерева(ОсобенностьУчета, "ОсобыеУсловияТруда/ПозицияСписка")];
						
						СтруктураЗаписи.ОснованиеИсчисляемогоСтажа = Классификаторы[ЗначениеXDTOИзДерева(ОсобенностьУчета, "ИсчисляемыйСтаж/ОснованиеИС")];
						СтруктураЗаписи.ПервыйПараметрИсчисляемогоСтажа = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ИсчисляемыйСтаж/ВыработкаКалендарная/ВсеМесяцы");
						СтруктураЗаписи.ВторойПараметрИсчисляемогоСтажа = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ИсчисляемыйСтаж/ВыработкаКалендарная/ВсеДни");
						СтруктураЗаписи.ТретийПараметрИсчисляемогоСтажа = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ДекретДети");
						
						СтруктураЗаписи.ОснованиеВыслугиЛет = Классификаторы[ЗначениеXDTOИзДерева(ОсобенностьУчета, "ВыслугаЛет/ОснованиеВЛ")];
						СтруктураЗаписи.ПервыйПараметрВыслугиЛет = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ВыслугаЛет/ВыработкаВчасах/Часы");
						СтруктураЗаписи.ВторойПараметрВыслугиЛет = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ВыслугаЛет/ВыработкаВчасах/Минуты");
						СтруктураЗаписи.ТретийПараметрВыслугиЛет = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ВыслугаЛет/ДоляСтавки");
						
						СтруктураЗаписи.ТерриториальныеУсловия = Классификаторы[ЗначениеXDTOИзДерева(ОсобенностьУчета, "ТерриториальныеУсловия/ОснованиеТУ")];
						СтруктураЗаписи.ПараметрТерриториальныхУсловий = ЗначениеXDTOИзДерева(ОсобенностьУчета, "ТерриториальныеУсловия/Коэффициент");
				
						ЗаполнитьЗначенияСвойств(ТаблицаДанныхОСтаже.Добавить(), СтруктураЗаписи);
						
					КонецЦикла; 
					
				Иначе
				
					ЗаполнитьЗначенияСвойств(ТаблицаДанныхОСтаже.Добавить(), СтруктураЗаписи);
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		Иначе
			
			ЗаполнитьЗначенияСвойств(ТаблицаДанныхОСтаже.Добавить(), СтруктураЗаписи);
			
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры // СохранитьДанныеОСтаже()

Процедура ПрочитатьКлассификаторы()

	Запрос = Новый Запрос;
	
	Классификаторы = Новый Соответствие;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсобыеУсловияТруда.Ссылка,
	|	ОсобыеУсловияТруда.КодДляОтчетности2010 КАК Обозначение
	|ИЗ
	|	Справочник.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда
	|ГДЕ
	|	ОсобыеУсловияТруда.КодДляОтчетности2010 <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОсобыеУсловияТруда.Ссылка,
	|	ОсобыеУсловияТруда.Код
	|ИЗ
	|	Справочник.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда
	|ГДЕ
	|	ОсобыеУсловияТруда.Код <> ОсобыеУсловияТруда.КодДляОтчетности2010
	|	И ОсобыеУсловияТруда.Код <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияВыслугиЛет.Ссылка,
	|	ОснованияВыслугиЛет.КодДляОтчетности2010
	|ИЗ
	|	Справочник.ОснованияВыслугиЛет КАК ОснованияВыслугиЛет
	|ГДЕ
	|	ОснованияВыслугиЛет.КодДляОтчетности2010 <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияВыслугиЛет.Ссылка,
	|	ОснованияВыслугиЛет.Код
	|ИЗ
	|	Справочник.ОснованияВыслугиЛет КАК ОснованияВыслугиЛет
	|ГДЕ
	|	ОснованияВыслугиЛет.Код <> ОснованияВыслугиЛет.КодДляОтчетности2010
	|	И ОснованияВыслугиЛет.Код <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Ссылка,
	|	СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.Код
	|ИЗ
	|	Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения КАК СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОснованияИсчисляемогоТрудовогоСтажа.Ссылка,
	|	ОснованияИсчисляемогоТрудовогоСтажа.Код
	|ИЗ
	|	Справочник.ОснованияИсчисляемогоТрудовогоСтажа КАК ОснованияИсчисляемогоТрудовогоСтажа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТерриториальныеУсловия.Ссылка,
	|	ТерриториальныеУсловия.Код
	|ИЗ
	|	Справочник.ТерриториальныеУсловия КАК ТерриториальныеУсловия";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Классификаторы[Выборка.Обозначение] = Выборка.Ссылка
	КонецЦикла;

КонецПроцедуры

Процедура ПрочитатьТекстыДокументов()

	ДанныеАрхиваАДВ = "";
	ДанныеИзФайла = Новый ТекстовыйДокумент;
	АрхивныеТексты = Новый Соответствие;
	ФайловыеТексты = Новый Соответствие;
	Тексты = Новый Соответствие;
	ТекстыИзАрхивов = Новый Соответствие;
	ТекстыИзФайлов = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФР.Ссылка,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТПачки
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка,
	|	2
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
	|ГДЕ
	|	ПередачаСЗВ4вПФРПачкиДокументов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Пачки.Ссылка,
	|	Пачки.Порядок КАК Порядок,
	|	ЕСТЬNULL(АрхивДанныхРегламентированнойОтчетности.Данные, """") КАК Данные
	|ИЗ
	|	ВТПачки КАК Пачки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрхивДанныхРегламентированнойОтчетности КАК АрхивДанныхРегламентированнойОтчетности
	|		ПО Пачки.Ссылка = АрхивДанныхРегламентированнойОтчетности.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	Запрос.УстановитьПараметр("Ссылка", ДокументАДВ62ДляЗагрузки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Порядок = 1 Тогда
			 ДанныеАрхиваАДВ = Выборка.Данные
		Иначе
			 АрхивныеТексты[Выборка.Данные] = Выборка.Ссылка;
		КонецЕсли;
		ТекстыИзАрхивов[Выборка.Ссылка] = Выборка.Данные;
	КонецЦикла;
	
	ДанныеИзФайла.Прочитать(ИмяФайлаДанных);
	ТекстАДВ = ДанныеИзФайла.ПолучитьТекст();
	ТекстыИзФайлов.Вставить(ИмяФайлаДанных, ТекстАДВ); 
	Для каждого СтрокаСИменемФайла Из МассивСтрокСИменамиФайлов Цикл
		ДанныеИзФайла.Прочитать(КаталогСведений + СтрокаСИменемФайла);
		ФайловыеТексты.Вставить(ДанныеИзФайла.ПолучитьТекст(), СтрокаСИменемФайла);
		ТекстыИзФайлов.Вставить(КаталогСведений + СтрокаСИменемФайла, ДанныеИзФайла.ПолучитьТекст());
	КонецЦикла; 

КонецПроцедуры

// Сохраняет данные загруженные из файла в регистре сведений АрхивДанныхРегламентированнойОтчетности
//
// Параметры
//  ДокументСсылка  - Документ - ссылка на документ, данные которого сохраняются
//  ФайлДанных  	- Строка - полное имя файла, данные которого сохраняются
//
Процедура СохранитьДанныеВАрхиве(ДокументСсылка, ИмяФайла)

	Набор = РегистрыСведений.АрхивДанныхРегламентированнойОтчетности.СоздатьНаборЗаписей();
	
	Набор.Отбор.Регистратор.Установить(ДокументСсылка);
	
	Запись = Набор.Добавить();
	
	Запись.Регистратор = ДокументСсылка;
	Запись.Объект = ДокументСсылка;
	
	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайла);
	
	Запись.Данные = ТД.ПолучитьТекст();
	
	ОбщегоНазначения.ЗаписатьНабор(Набор);

КонецПроцедуры // СохранитьДанныеВАрхиве()

// Сохраняет в регистре КонтактнаяИнформация адрес для информирования ФизЛица
//
// Параметры
//  ФизЛицо  				- Справочник.ФизическиеЛица - физлицо, для которого 
//							  сохраняется адрес
//  АдресДляИнформирования  - Строка - Строковое представление адреса в формате 9 запятых
//
Процедура СохранитьКонтактнуюИнформациюФизЛица(ФизЛицо, АдресДляИнформирования)

	Набор = РегистрыСведений.КонтактнаяИнформация.СоздатьНаборЗаписей();
	Набор.Отбор.Объект.Установить(ФизЛицо);
	Набор.Отбор.Тип.Установить(Перечисления.ТипыКонтактнойИнформации.Адрес);
	Набор.Отбор.Вид.Установить(Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
	
	Запись = Набор.Добавить();
	
	Запись.Объект 	= ФизЛицо;
	Запись.Тип 		= Перечисления.ТипыКонтактнойИнформации.Адрес;
	Запись.Вид 		= Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица;
	
	ЗаполнитьЗначенияСвойств(Запись, УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(АдресДляИнформирования));
	
	ОбщегоНазначения.ЗаписатьНабор(Набор);

КонецПроцедуры // СохранитьКонтактнуюИнформациюФизЛица(()

Функция ДатаПоСтроковомуПредставлению(ДатаСтрока)

	Возврат Дата(Прав(ДатаСтрока,4), Сред(ДатаСтрока, Найти(ДатаСтрока,".") + 1, 2), Лев(ДатаСтрока, Найти(ДатаСтрока,".") - 1));

КонецФункции // ДатаПоСтроковомуПредставлению()

// Проверяет необходимость перезаполнения пакета документов, сравнивая содержимое файлов
// и данных из регистра сведений "АрхивДанныхРегламентированнойОтчетности", перебирает
// указанные в файле информацию о файлах других пачек, входящих в АДВ-6-2 и проверяет их.
//
// Параметры
//  ДокументАДВ62ДляЗагрузки  - ДокументСсылка.ПередачаСЗВ4вПФР - ссылка на проверяемый документ
// ФайлДанных  - Файл - Объект файл, который содержит данные документа
//
// Возвращаемое значение:
//   Булево   - Ложь - Данные сходятся, перезаполнеть не нужно, Истина - необходимо перезаполнить
//
Функция ДокументыНеобходимоПерезаполнить()
	
	НеобходимоПерезаполнить = ДанныеАрхиваАДВ <> ТекстАДВ;
	Если Не НеобходимоПерезаполнить Тогда
		
		НеобходимоПерезаполнить = АрхивныеТексты.Количество() <> МассивСтрокСИменамиФайлов.Количество();
		Если Не НеобходимоПерезаполнить Тогда
			
			Для каждого СтрокаСЗВ Из ФайловыеТексты Цикл
				Если АрхивныеТексты[СтрокаСЗВ.Ключ] = Неопределено Тогда
					НеобходимоПерезаполнить = Истина;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат НеобходимоПерезаполнить;
	
КонецФункции // ДокументыНеобходимоПерезаполнить()

// Создает или перезаполняет существующий документ СЗВ
//
// Параметры:
//	ФайлСЗВ		- Строка - Путь к файлу сведений
//	ПачкиСоответствующиеФайлам - соответствие номеров пачек и документов СЗВ-6 из Описи, в которую ведется загрузка
//
// Возвращаемое значение:
//   ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4   - созданный или перезаполненый документ
//
Функция ЗагруженныйДокументСЗВ(ФайлСЗВ, ПачкиСоответствующиеФайлам, МассивНеСоответствующихФайламПачек)

	Состояние("Загрузка сведений из файла " + ФайлСЗВ);
	
	Комментарий = "";
	
	ДеревоСведенийСЗВ = ЭтоXMLФайлВФорматеПФР(ФайлСЗВ);
	
	Если ДеревоСведенийСЗВ = Неопределено Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	НомерПачки = ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/НомерПачки/Основной");
	
	СсылкаСЗВ6 = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПустаяСсылка();
	СтрокаДокументПачка = ПачкиСоответствующиеФайлам[НомерПачки];
	Если СтрокаДокументПачка = Неопределено Тогда
		Если ЗначениеЗаполнено(МассивНеСоответствующихФайламПачек) Тогда
			СсылкаСЗВ6 = МассивНеСоответствующихФайламПачек[0];
			МассивНеСоответствующихФайламПачек.Удалить(0);
		КонецЕсли;
	Иначе
		СсылкаСЗВ6 = СтрокаДокументПачка;
	КонецЕсли; 
		
	Если Не ЗначениеЗаполнено(СсылкаСЗВ6) Тогда
		
		ДокументПачка = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.СоздатьДокумент();
		
	Иначе
		
		// Сравним содержимое файла сведений с содержимым архива
		ДанныеАрхива = ТекстыИзАрхивов[СсылкаСЗВ6];
		Текст = ТекстыИзФайлов[ФайлСЗВ];
		
		ДокументПачка = СсылкаСЗВ6.ПолучитьОбъект();
		
		Если ДанныеАрхива = Текст Тогда
			
			ДокументПачка.ПринятоВПФР = Истина;
			ДокументПачка.ЗаполненПринятымиСведениями = Истина;
			Если ДокументПачка.ПометкаУдаления Тогда
				ДокументПачка.ПометкаУдаления = Ложь
			КонецЕсли;
			
			ДокументПачка.Записать(РежимЗаписиДокумента.Проведение);
			
			СоответствиеСсылокИОбъектов.Вставить(СсылкаСЗВ6, ДокументПачка);
			
			Возврат СсылкаСЗВ6;
			
		КонецЕсли; 
		
		ДокументПачка.РаботникиОрганизации.Очистить();
		
	КонецЕсли; 
	
	ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ДокументПачка, глЗначениеПеременной("глТекущийПользователь"));
	
	ДокументПачка.Дата = ДатаПоСтроковомуПредставлению(ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/ДатаСоставления")); 
	
	ДокументПачка.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07;
	ДокументПачка.НомерПачки = НомерПачки;
	ДокументПачка.ОтчетныйПериод = ОтчетныйПериод;
	ДокументПачка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ[ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/ТипСведений")];
	
	ОтчетныйПериодПачки = ОтчетныйПериод;
	Если ДокументПачка.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		Квартал = ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/КорректируемыйОтчетныйПериод/Квартал");
		Год = ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/КорректируемыйОтчетныйПериод/Год");
		ДокументПачка.КорректируемыйПериод =  ОтчетныйПериодПоГодуИКварталу(Год, Квартал);
		ОтчетныйПериодПачки = ДокументПачка.КорректируемыйПериод;
	КонецЕсли;
	
	ДокументПачка.КатегорияЗастрахованныхЛиц = Перечисления.КатегорииЗастрахованныхЛицПФР[ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/КодКатегории")];
	
	Если ДокументПачка.Организация <> Организация Или ДокументПачка.ЭтоНовый() Тогда
		ДокументПачка.Организация = Организация;
		ЗаполнитьЗначенияСвойств(ДокументПачка, ПроцедурыПерсонифицированногоУчета.ДанныеРуководителяОрганизации(ДокументПачка.Организация, ДокументПачка.Дата));
	КонецЕсли;
	
	ДокументПачка.ТипФормДокументов = "";
	
	МассивЗастрахованных = СписокXDTOИзДерева(ДеревоСведенийСЗВ, "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ");
	
	МассивСтраховыхНомеров = Новый Массив;	
	Для каждого СтрокаЗастрахованного Из МассивЗастрахованных Цикл
		Если Не ЗначениеЗаполнено(ДокументПачка.ТипФормДокументов) Тогда
			ДокументПачка.ТипФормДокументов = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ВидФормы");
		КонецЕсли;
		МассивСтраховыхНомеров.Добавить(ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СтраховойНомер"));
	КонецЦикла;
	
	ФизЛица = Новый Соответствие; // здесь будем искать ЗЛ по его страховому номеру
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.СтраховойНомерПФР
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.СтраховойНомерПФР В(&СтраховойНомерПФР)";
	Запрос.УстановитьПараметр("СтраховойНомерПФР", МассивСтраховыхНомеров);
	Выборка =Запрос.Выполнить().Выбрать();
    Пока Выборка.Следующий() Цикл
		ФизЛица[Выборка.СтраховойНомерПФР] = Выборка.Ссылка
	КонецЦикла;

	ТаблицаДанныхОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей().ВыгрузитьКолонки();

	Для каждого СтрокаЗастрахованного Из МассивЗастрахованных Цикл
		
		НоваяСтрока = ДокументПачка.РаботникиОрганизации.Добавить();
		
		Фамилия 	= ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ФИО/Фамилия");
		Фамилия     = Лев(Фамилия,1) + НРег(Сред(Фамилия,2));
		НоваяСтрока.Фамилия	= Фамилия;
		
		Имя 		= ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ФИО/Имя");
		Имя 		= Лев(Имя,1) + НРег(Сред(Имя,2));
		НоваяСтрока.Имя	= Имя;
		
		Отчество 	= ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "ФИО/Отчество");
		Отчество 	= Лев(Отчество,1) + НРег(Сред(Отчество,2));
		НоваяСтрока.Отчество = Отчество;
		
		Состояние("Загрузка сведений из файла " + ФайлСЗВ + ": " + Фамилия + " " + Имя + " " + Отчество);
		
		НоваяСтрока.СтраховойНомерПФР = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СтраховойНомер");
		
		// Пробуем найти ФизЛицо по страховому номеру ПФР
		ФизЛицо = ФизЛица[НоваяСтрока.СтраховойНомерПФР];
		
		// Если не находим создаем новое
		НовоеФизЛицо = ФизЛицо = Неопределено;
		
		Если НовоеФизЛицо Тогда
		
			ФизЛицо = НовоеЗастрахованноеЛицо(Фамилия, Имя, Отчество, НоваяСтрока.СтраховойНомерПФР, НачалоГода(ДокументПачка.ОтчетныйПериод));
			
			ДобавленыНовыеФизлица = Истина;
			
			// Добавим сообщение в строку комментария
			Комментарий = Комментарий + ?(ПустаяСтрока(Комментарий), "", ";" + Символы.ПС) + ФизЛицо.Наименование + ", страховой номер " + НоваяСтрока.СтраховойНомерПФР;
		
		КонецЕсли; 
		
		НоваяСтрока.ФизЛицо = ФизЛицо;
		НоваяСтрока.АдресДляИнформирования = СтрокаАдресаПоXDTO(ОбъектXDTOИзДерева(СтрокаЗастрахованного, "АдресЗЛ"));
		
		Если ДокументПачка.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовоеФизЛицо И ЗначениеЗаполнено(НоваяСтрока.АдресДляИнформирования) Тогда
			
			// Для нового ФизЛица сохраним адрес для информирования
			СохранитьКонтактнуюИнформациюФизЛица(ФизЛицо, НоваяСтрока.АдресДляИнформирования);
		
		КонецЕсли; 

		НоваяСтрока.НачисленоСтраховая = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СуммаВзносовНаСтраховую/Начислено");
		НоваяСтрока.УплаченоСтраховая = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СуммаВзносовНаСтраховую/Уплачено");
		
		НоваяСтрока.НачисленоНакопительная = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СуммаВзносовНаНакопительную/Начислено");
		НоваяСтрока.УплаченоНакопительная = ЗначениеXDTOИзДерева(СтрокаЗастрахованного, "СуммаВзносовНаНакопительную/Уплачено");
		
		// Сохраним данные о стаже
		
		ПрочитатьДанныеОСтаже(ТаблицаДанныхОСтаже, ФизЛицо, ОтчетныйПериодПачки, Организация, ДокументПачка.КатегорияЗастрахованныхЛиц, СписокXDTOИзДерева(СтрокаЗастрахованного, "СтажевыйПериод"));
		
	КонецЦикла;
	
	Состояние("Загрузка сведений из файла " + ФайлСЗВ + ": запись данных о стаже");
	
	ЗаписатьДанныеОСтаже(ТаблицаДанныхОСтаже);
	
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		ДокументПачка.Комментарий = "Были созданы новые элементы справочника «Физические лица» для следующих застрахованных лиц: " + Комментарий;
	КонецЕсли; 
		
	ДокументПачка.КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(ДокументПачка.РаботникиОрганизации, ,"Физлицо");
	
	ДокументПачка.ПринятоВПФР = Истина;
	ДокументПачка.ЗаполненПринятымиСведениями = Истина;
	Если ДокументПачка.ПометкаУдаления Тогда
		ДокументПачка.ПометкаУдаления = Ложь
	КонецЕсли;
	ДокументПачка.Записать(РежимЗаписиДокумента.Проведение);
	
	СохранитьДанныеВАрхиве(ДокументПачка.Ссылка, ФайлСЗВ);
	СоответствиеСсылокИОбъектов.Вставить(ДокументПачка.Ссылка, ДокументПачка);
	
	Возврат ДокументПачка.Ссылка;
	
КонецФункции

// Создает элемент справочника Физические лица
//
// Параметры
//  Фамилия  			- Строка
//  Имя					- Строка
//  Отчество			- Строка
//  СтраховойНомерПФР	- Строка
//  ПериодДанных		- Дата - на которую регистрируются ФИО
//
// Возвращаемое значение:
//   Справочник.Физлица - Ссылка на вновь созданный элемент
//
Функция НовоеЗастрахованноеЛицо(Фамилия, Имя, Отчество, СтраховойНомерПФР, ПериодДанных)

	ФизЛицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
		
	ФизЛицоОбъект.Наименование = Фамилия + " " + Имя + " " + Отчество;
	ФизЛицоОбъект.СтраховойНомерПФР = СтраховойНомерПФР;
	ФизЛицоОбъект.Записать();
		
	ФизЛицо = ФизЛицоОбъект.Ссылка;
		
	Набор = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	Набор.Отбор.ФизЛицо.Установить(ФизЛицо);
		
	Запись = Набор.Добавить();
	Запись.Фамилия 	= Фамилия;
	Запись.Имя	 	= Имя;
	Запись.Отчество = Отчество;
	Запись.ФизЛицо 	= ФизЛицо;
	Запись.Период	= ПериодДанных;
		
	ОбщегоНазначения.ЗаписатьНабор(Набор);
	
	Возврат ФизЛицо;

КонецФункции // СоздатьФизЛицо()

// Отбирает в данных файлы сведений СЗВ и ищет их в папке, из которой
// была загружена опись АДВ-6-2
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Будлево   - Истина - Все указанные файлы присутствуют, Ложь - не все ...
//
Функция ОтсутствующиеПачкиСЗВ6()
	
	МассивСтрокСИменамиФайлов = СписокXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ/СведенияОбИсходныхСведениях/ИмяФайла");
	
	ОписаниеОтсутствующихПачек = "";
	Для каждого СтрокаСИменемФайла Из МассивСтрокСИменамиФайлов Цикл
		ФайлССЗВ = Новый Файл(КаталогСведений + СтрокаСИменемФайла);
		Если НЕ ФайлССЗВ.Существует() Тогда
			ОписаниеОтсутствующихПачек = ОписаниеОтсутствующихПачек + ?(ЗначениеЗаполнено(ОписаниеОтсутствующихПачек),", ","") + Сред(СтрокаСИменемФайла, 39, 5)
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат ОписаниеОтсутствующихПачек;
			
КонецФункции // ОтсутствующиеПачкиСЗВ6()

Функция ОтчетныйПериодПоГодуИКварталу(Год, Квартал)

	Если Год = "2010" Тогда
		Если Квартал = "1" Тогда
			ОтчетныйПериод = '20100101'
		Иначе
			ОтчетныйПериод = '20100701'
		КонецЕсли;
	Иначе
		ОтчетныйПериод = ДобавитьМесяц(Дата(Год, 1, 1), (Число(Квартал) - 1) * 3);
	КонецЕсли;
	
	Возврат ОтчетныйПериод
	
КонецФункции // ОтчетныйПериодПоГодуИКварталу()

// получает строку адреса, разделенную запятыми
//
// Параметры
//  АдресXDTO  - ОбъектXDTO - содержащий адрес в формате ПФР
//
// Возвращаемое значение:
//   Строка   - строка адреса
//
Функция СтрокаАдресаПоXDTO(АдресXDTO)

	Если АдресXDTO = Неопределено Тогда
	
		Возврат "";
	
	КонецЕсли; 
	
	СтрокаАдреса = "," + ЗначениеXDTOИзДерева(АдресXDTO,"Индекс");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Регион/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Регион/Сокращение");

	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Район/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Район/Сокращение");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Город/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Город/Сокращение");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/НаселенныйПункт/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/НаселенныйПункт/Сокращение");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Улица/ГеографическоеНазвание") + " " + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Улица/Сокращение");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Дом/Номер");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Корпус/Номер");
	
	СтрокаАдреса = СтрокаАдреса + "," + ЗначениеXDTOИзДерева(АдресXDTO,"РоссийскийАдрес/Квартира/Номер");
	
	Возврат СтрокаАдреса;
	
КонецФункции // СтрокаАдресаПоXDTO()

Функция ЭтоXMLФайлВФорматеПФР(ИмяФайла)

	Отказ = Ложь;
	
	Попытка
			
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайла);
		ДеревоXML = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
		ЧтениеXML.Закрыть();
		
	Исключение
		
		Отказ = Истина;
			
	КонецПопытки;
	
	Если Не Отказ Тогда
		
		Попытка
		
			ВерсияФормата = ДеревоXML.Получить("/ЗаголовокФайла/ВерсияФормата");
		
		Исключение
			
			Отказ = Истина;
		
		КонецПопытки;
		
	КонецЕсли; 
	
	Отказ = Отказ Или ВерсияФормата <> "07.00";
			
	Если Не Отказ Тогда
		
		Возврат ДеревоXML.ПолучитьXDTO("/ПачкаВходящихДокументов");
	
	КонецЕсли; 
	
	Возврат Неопределено;

КонецФункции // ЭтоXMLФайлВФорматеПФР()

// Проверяет данные на принадлежность к описи АДВ-6-2
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Булево   - Истина - данные являются описью АДВ-6-2, Ложь - в противном случае
//
Функция ЭтоДокументАДВ_6_2()

	Возврат ОбъектXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ОПИСЬ_СВЕДЕНИЙ_ПЕРЕДАВАЕМЫХ_СТРАХОВАТЕЛЕМ") <> Неопределено;

КонецФункции // ЭтоДокументАДВ_6_2()

Функция ЭтоФайлТекущегоСтрахователя()
	
	РегистрационныйНомер = ЗначениеXDTOИзДерева(ОбъектXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/СоставительПачки"), "РегистрационныйНомер");
	
	Возврат ЗначениеЗаполнено(РегистрационныйНомер) И РегистрационныйНомер = ОбщегоНазначения.ПолучитьЗначениеРеквизита(Организация, "РегистрационныйНомерПФР")
		
КонецФункции // ЭтоФайлТекущегоСтрахователя()

////////////////////////////////////////////////////////////////////////////////
 //не проверно

////////////////////////////////////////////////////////////////////////////////

Процедура ПриОткрытии()
	ТекстыИзАрхивов = Новый Соответствие;
	ТекстыИзФайлов = Новый Соответствие;
	ОтчетныйПериод = Неопределено;
	КоличествоИсходныхФорм = Неопределено;
	КоличествоКорректирующихФорм = Неопределено;
	НомерПачки = Неопределено;
	СтатусКорректностиФайла = "";
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПодготовкиДокументов, ЭлементыФормы.ПолеКартинкиПредупреждение, "Для загрузки принятых ПФРом сведений укажите файл Описи АДВ-6-2.", СтатусКорректностиФайла);
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Закрыть(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ПачкиДокументовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ОформлениеЯчеек = ОформлениеСтроки.Ячейки;
		
		Пачка = ДанныеСтроки.Пачка;
		Если Не Пачка.Пустая() Тогда
			ДокументОбъект = СоответствиеСсылокИОбъектов[Пачка];
			Если ДокументОбъект.НеСодержитСЗВ Тогда
				ОформлениеЯчеек.Пачка.Текст = "АДВ-11 № " + ДокументОбъект.НомерПачки;
			Иначе
				ОформлениеЯчеек.Пачка.Текст = "АДВ-6-2 № " + ДокументОбъект.НомерПачки;
			КонецЕсли;
			Если ДокументОбъект.ПринятоВПФР Тогда
				ОформлениеЯчеек.Пачка.ЦветТекста = СерыйЦвет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ОтчетныйПериод) Тогда
			ОформлениеЯчеек.ОтчетныйПериод.Текст = ПредставлениеПериода(НачалоГода(ДанныеСтроки.ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ДанныеСтроки.ОтчетныйПериод), "ФП = Истина");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПачкиДокументовПачкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ПередачаСЗВ4вПФР.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.ОтчетныйПериод.Установить(ЭлементыФормы.ПачкиДокументов.ТекущиеДанные.ОтчетныйПериод);
	ФормаВыбора.Отбор.Проведен.Установить(Истина);
	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ПачкиДокументовПачкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СоответствиеСсылокИОбъектов.Вставить(ВыбранноеЗначение, ВыбранноеЗначение.ПолучитьОбъект());
	
КонецПроцедуры

Процедура ИмяФайлаДанныхПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		СтатусКорректностиФайла = "";
		ОтчетныйПериод = Неопределено;
		КоличествоИсходныхФорм = Неопределено;
		КоличествоКорректирующихФорм = Неопределено;
		НомерПачки = Неопределено;
		КаталогСведений = "";
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПодготовкиДокументов, ЭлементыФормы.ПолеКартинкиПредупреждение, "Для загрузки принятых ПФРом сведений укажите файл Описи АДВ-6-2.", СтатусКорректностиФайла);
		Возврат;
	КонецЕсли; 
	
	ФайлДанных = Новый Файл(ИмяФайлаДанных);
	Если НЕ ФайлДанных.Существует() Тогда
		Возврат;
	КонецЕсли; 
	КаталогСведений	= ФайлДанных.Путь;
	
	ПриУказанииИмениФайла()
	
КонецПроцедуры

Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогФыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогФыбораФайла.Фильтр						=	"Файл в формате ПФР (*.xml)|*.xml";
	ДиалогФыбораФайла.Заголовок						=	"Выберите файл Описи АДВ-6-2";
	ДиалогФыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогФыбораФайла.Расширение					=	"xml";
	ДиалогФыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогФыбораФайла.ПроверятьСуществованиеФайла	=	Ложь;
	
	Если ДиалогФыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогФыбораФайла.ПолноеИмяФайла;
		КаталогСведений = ДиалогФыбораФайла.Каталог;
		ПриУказанииИмениФайла()
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Элемент.Значение);
КонецПроцедуры

Процедура КнопкаЗагрузитьНажатие(Элемент)
	
	Если СтатусКорректностиФайла = "СообщениеОПроблемах" Тогда
		Предупреждение("Данные из указанного файла не могут быть загружены!");
		Возврат
	КонецЕсли;
	
	Состояние("Подготовка к загрузке данных ...");
	
	ПрочитатьТекстыДокументов();
	
	Если ВСуществующийКомплект И ЗначениеЗаполнено(ДокументАДВ62ДляЗагрузки) И Не ДокументыНеобходимоПерезаполнить() Тогда  
		
		Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ДокументАДВ62ДляЗагрузки,"ЗаполненПринятымиСведениями") Тогда
			Предупреждение("Данные существующего комплекта документов, помеченного как загруженный из файлов," + Символы.ПС + "полностью совпадают с данными из принятых ПФР файлов сведений." + Символы.ПС + "Загрузка данных не требуется!");
			Возврат;
		КонецЕсли;
		
		ФормаДиалогВопрос = ПолучитьОбщуюФорму("ДиалогВопрос");
		ФормаДиалогВопрос.Заголовок	= НСтр("ru='Загрузка данных из принятых ПФР файлов сведений'");
		ФормаДиалогВопрос.ЭлементыФормы.НадписьТекстВопроса.Заголовок = "пометить указанный комплект документов, данные которого полностью совпадают с данными из принятых ПФР файлов сведений, как загруженный из файлов." +
		Символы.ПС + 
		Символы.ПС + "Пометить документы как загруженные из файлов?";
		ФормаДиалогВопрос.ЭлементыФормы.КнопкаДействие1.Заголовок = "Пометить";
		ФормаДиалогВопрос.ЭлементыФормы.КнопкаДействие2.Заголовок = "Нет, не помечать";
		Результат = ФормаДиалогВопрос.ОткрытьМодально();
		
		Если Результат <> "1" Тогда
			
			Возврат;
			
		КонецЕсли; 
		
		Состояние("Обновление состояния документов ...");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПередачаСЗВ4вПФР.Ссылка,
		|	ВЫБОР
		|		КОГДА (НЕ(ПередачаСЗВ4вПФР.ЗаполненПринятымиСведениями
		|					И ПередачаСЗВ4вПФР.ПринятоВПФР))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПереписыватьДокумент
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
		|ГДЕ
		|	ПередачаСЗВ4вПФР.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка,
		|	ВЫБОР
		|		КОГДА (НЕ(ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.ЗаполненПринятымиСведениями
		|					И ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.ПринятоВПФР))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|ИЗ
		|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
		|ГДЕ
		|	ПередачаСЗВ4вПФРПачкиДокументов.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ДокументАДВ62ДляЗагрузки);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументАДВ = Выборка.Ссылка.ПолучитьОбъект();
			Если Выборка.ПереписыватьДокумент Тогда
				ДокументАДВ.ПринятоВПФР = Истина;
				ДокументАДВ.ЗаполненПринятымиСведениями = Истина;
				ДокументАДВ.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			СоответствиеСсылокИОбъектов.Вставить(Выборка.Ссылка, ДокументАДВ);
		КонецЦикла;
		
	Иначе
		
		ПачкиСоответствующиеФайлам = Новый Соответствие;
		МассивНеСоответствующихФайламПачек = Новый Массив;
		
		Если Не ЗначениеЗаполнено(ДокументАДВ62ДляЗагрузки) Или Не ВСуществующийКомплект Тогда
			
			Состояние("Загрузка Описи АДВ-6-2 из файла: " + ИмяФайлаДанных);
			
			ДокументАДВ = Документы.ПередачаСЗВ4вПФР.СоздатьДокумент();
			ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ДокументАДВ, глЗначениеПеременной("глТекущийПользователь"));
			
		Иначе
			
			ФормаДиалогВопрос = ПолучитьОбщуюФорму("ДиалогВопрос");
			ФормаДиалогВопрос.Заголовок	= НСтр("ru='Загрузка данных из принятых ПФР файлов сведений'");
			ФормаДиалогВопрос.ЭлементыФормы.НадписьТекстВопроса.Заголовок = "заменить данные (включая тексты комментариев) в указанном комплекте документов на данные из принятых ПФР файлов сведений." +
			Символы.ПС + 
			Символы.ПС + "Заменить данные на новые, загруженные из файлов?";
			ФормаДиалогВопрос.ЭлементыФормы.КнопкаДействие1.Заголовок = "Заменить";
			ФормаДиалогВопрос.ЭлементыФормы.КнопкаДействие2.Заголовок = "Нет, не заменять";
			Результат = ФормаДиалогВопрос.ОткрытьМодально();
			
			Если Результат <> "1" Тогда
				
				Возврат;
				
			КонецЕсли; 
			
			Состояние("Загрузка Описи АДВ-6-2 из файла: " + ИмяФайлаДанных);
			
			ДокументАДВ = ДокументАДВ62ДляЗагрузки.ПолучитьОбъект();
			
			// Сохраним список документов прошлой описи, дополним колонкой с номером пачки
			ЗагружаемыеПачки = Новый Массив;
			Для каждого СтрокаСИменемФайла Из МассивСтрокСИменамиФайлов Цикл
				ДеревоСведенийСЗВ = ЭтоXMLФайлВФорматеПФР(КаталогСведений + СтрокаСИменемФайла);
				Если ДеревоСведенийСЗВ = Неопределено Тогда
					Продолжить;
				КонецЕсли; 
				ЗагружаемыеПачки.Добавить(ЗначениеXDTOИзДерева(ДеревоСведенийСЗВ, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/НомерПачки/Основной"))
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка,
			|	ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.НомерПачки КАК НомерПачки,
			|	ВЫБОР
			|		КОГДА ПередачаСЗВ4вПФРПачкиДокументов.ДокументПачка.НомерПачки В (&ЗагружаемыеПачки)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ДокументСоответствуетФайлу
			|ИЗ
			|	Документ.ПередачаСЗВ4вПФР.ПачкиДокументов КАК ПередачаСЗВ4вПФРПачкиДокументов
			|ГДЕ
			|	ПередачаСЗВ4вПФРПачкиДокументов.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", ДокументАДВ62ДляЗагрузки);
			Запрос.УстановитьПараметр("ЗагружаемыеПачки", ЗагружаемыеПачки);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.ДокументСоответствуетФайлу Тогда
					ПачкиСоответствующиеФайлам.Вставить(Выборка.НомерПачки, Выборка.ДокументПачка)
				Иначе
					МассивНеСоответствующихФайламПачек.Добавить(Выборка.ДокументПачка)
				КонецЕсли;
			КонецЦикла;
			
			// Подготовим табличную часть к загрузке документов
			
			ДокументАДВ.ПачкиДокументов.Очистить();
			ДокументАДВ.СведенияОЗадолженности.Очистить();
			
		КонецЕсли; 
		
		ПрочитатьКлассификаторы();
		
		ДокументАДВ.Дата = ДатаПоСтроковомуПредставлению(ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/ДатаСоставления"));
		
		Если ДокументАДВ.Организация <> Организация Или ДокументАДВ.ЭтоНовый() Тогда
			ДокументАДВ.Организация = Организация;
			ЗаполнитьЗначенияСвойств(ДокументАДВ, ПроцедурыПерсонифицированногоУчета.ДанныеРуководителяОрганизации(ДокументАДВ.Организация, ДокументАДВ.Дата));
		КонецЕсли;
		
		ДокументАДВ.НомерПачки = ЗначениеXDTOИзДерева(ДеревоСведенийАДВ_6_2, "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ/НомерПачки/Основной");
		ДокументАДВ.ОтчетныйПериод = ОтчетныйПериод;
		ДокументАДВ.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07;
		
		ИспользованныйНомерПачки = ?(ОбщегоНазначения.ТолькоЦифрыВСтроке(ДокументАДВ.НомерПачки) И ЗначениеЗаполнено(ДокументАДВ.НомерПачки), Число(ДокументАДВ.НомерПачки), 0);
		ДобавленыНовыеФизлица = Ложь;
		Для каждого СтрокаСИменемФайла Из МассивСтрокСИменамиФайлов Цикл
			СтрокаТЧ = ДокументАДВ.ПачкиДокументов.Добавить();
			СтрокаТЧ.ДокументПачка = ЗагруженныйДокументСЗВ(КаталогСведений + СтрокаСИменемФайла, ПачкиСоответствующиеФайлам, МассивНеСоответствующихФайламПачек);
			Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПачка) Тогда
				ДокументСЗВ = СоответствиеСсылокИОбъектов[СтрокаТЧ.ДокументПачка];
				Если ДокументСЗВ <> Неопределено Тогда
					ИспользованныйНомерПачки = Макс(ИспользованныйНомерПачки,?(ОбщегоНазначения.ТолькоЦифрыВСтроке(ДокументСЗВ.НомерПачки) И ЗначениеЗаполнено(ДокументАДВ.НомерПачки), Число(ДокументСЗВ.НомерПачки), 0));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Пометим на удаление не участвовавшие в загрузке документы
		Для каждого Пачка Из МассивНеСоответствующихФайламПачек Цикл
			Если ЗначениеЗаполнено(Пачка) Тогда
				
				ДокументПачкаОбъект = Пачка.ПолучитьОбъект();
				
				ДокументПачкаОбъект.ПринятоВПФР = Ложь;
				ДокументПачкаОбъект.ЗаполненПринятымиСведениями = Ложь;
				ДокументПачкаОбъект.ПометкаУдаления = Истина;
				
				ДокументПачкаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				
			КонецЕсли; 
		КонецЦикла; 
		
		Если ДобавленыНовыеФизлица Тогда
			ДокументАДВ.Комментарий = "При загрузке принятых ПФР сведений были созданы новые элементы справочника ""Физические лица""";
		КонецЕсли; 
		
		КраткийСоставДокумента = "";
		Для Каждого СтрокаТаблицы Из ДокументАДВ.ПачкиДокументов Цикл
			Если ПустаяСтрока(КраткийСоставДокумента) Тогда
								
				КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СоответствиеСсылокИОбъектов[СтрокаТаблицы.ДокументПачка].РаботникиОрганизации, ,"Физлицо");
			ИначеЕсли (СтрДлина(КраткийСоставДокумента) >= 96) Тогда
				Прервать;
			Иначе
								
				КраткийСоставДокумента = КраткийСоставДокумента + ", " + ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(СоответствиеСсылокИОбъектов[СтрокаТаблицы.ДокументПачка].РаботникиОрганизации, ,"Физлицо");
			КонецЕсли;
		КонецЦикла;
		ДокументАДВ.КраткийСоставДокумента = КраткийСоставДокумента;
		ДокументАДВ.ПринятоВПФР = Истина;
		ДокументАДВ.ЗаполненПринятымиСведениями = Истина;
		ДокументАДВ.ПометкаУдаления = Ложь;	
		ДокументАДВ.Записать(РежимЗаписиДокумента.Проведение);
		
		СохранитьДанныеВАрхиве(ДокументАДВ.Ссылка, ИмяФайлаДанных);
		
		Год = Год(ДокументАДВ.ОтчетныйПериод);
		Если ИспользованныйНомерПачки > РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(Организация, Год) Тогда
			РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(Организация, Год, ИспользованныйНомерПачки);
		КонецЕсли;
		
		// Установим значение реквизита формы
		Если Не ЗначениеЗаполнено(ДокументАДВ62ДляЗагрузки) Тогда
			ДокументАДВ62ДляЗагрузки = ДокументАДВ.Ссылка;
		КонецЕсли;
		
		СоответствиеСсылокИОбъектов.Вставить(ДокументАДВ62ДляЗагрузки, ДокументАДВ);
		
	КонецЕсли;
	
	СтрокаТаблицы = ПачкиДокументов.Найти(ОтчетныйПериод,"ОтчетныйПериод");
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.Пачка = ДокументАДВ62ДляЗагрузки;
	КонецЕсли;
	
	Предупреждение("Загрузка завершена!");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СерыйЦвет = Новый Цвет(180, 180, 180);


