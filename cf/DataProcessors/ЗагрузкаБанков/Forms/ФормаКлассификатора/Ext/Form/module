Перем мТекстКлассификатора;
Перем мЦветИзменения;
Перем мИмяФайлаБИК;
Перем мИмяФайлаЗип;
Перем мИмяФайлаРег;

// Процедура изменяет данные существующих банков в ИБ на данные из классификатора.
//
Функция ПринятьИзмененияБанков()
	
	ФлагИзменения = Ложь;
	
	СпрБанки           = Справочники.Банки;
	
	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикации.НаименованиеОбработкиДанных = "Загрузка классификатора банков";
	ФормаИндикации.КомментарийОбработкиДанных  = "Выполняется принятие изменений";
	ФормаИндикации.КомментарийЗначения         = "Записано:";
	ФормаИндикации.Открыть();

	НачатьТранзакцию();

	КоличествоСтрокУровня = ДеревоИзмененныхБанков.Строки.Количество();
	Для каждого ТекСтрРег из ДеревоИзмененныхБанков.Строки Цикл
		ТекОКАТО  = СокрЛП(ТекСтрРег.КодРегиона);
		ТекРегион = СокрЛП(ТекСтрРег.Наименование);
		ФлСозданияГруппы = 0;
		Для каждого ТекСтрБанка из ТекСтрРег.Строки Цикл
			Если НЕ ТекСтрБанка.Загрузка Тогда
				Продолжить;
			КонецЕсли;	
			
			ФлагИзменения = Истина;
			
			Для каждого ТекСтрРеквизита из ТекСтрБанка.Строки Цикл
				НаимРек = СокрЛП(ТекСтрРеквизита.Наименование);
				Если НаимРек = "БИК" Тогда
					БИК = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Наименование" Тогда
					Наименование = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Корр. счет" Тогда
					КоррСчет = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Город" Тогда
					Город = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Адрес" Тогда
					Адрес = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				ИначеЕсли НаимРек = "Телефоны" Тогда
					Телефоны = СокрЛП(ТекСтрРеквизита.ЗнКлассификатора);
				КонецЕсли;	
			КонецЦикла;

			ТекущаяСтрока = ТекСтрБанка.Строки.Индекс(ТекСтрРег) + 1;
			ФормаИндикации.Значение = ТекущаяСтрока/КоличествоСтрокУровня * 100;
			
			ВыбЭл = СпрБанки.НайтиПоКоду(БИК);
			Если НЕ (ВыбЭл = СпрБанки.ПустаяСсылка()) Тогда
				РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
				Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
					НоваяГр              = СпрБанки.СоздатьГруппу();
					НоваяГр.Код          = ТекОКАТО;
					НоваяГр.Наименование = ТекРегион;
					НоваяГр.Записать();
					РодительЭл = НоваяГр.Ссылка;
				КонецЕсли;	
				ИзмЭл = ВыбЭл.ПолучитьОбъект();
				ИзмЭл.Родитель     = РодительЭл;
				ИзмЭл.Код          = БИК;
				ИзмЭл.Наименование = Наименование;
				ИзмЭл.КоррСчет     = КоррСчет;
				ИзмЭл.Город        = Город;
				ИзмЭл.Адрес        = Адрес;
				ИзмЭл.Телефоны     = Телефоны;
				ИзмЭл.Записать();
			КонецЕсли;	
		КонецЦикла;	
	КонецЦикла;	

	ЗафиксироватьТранзакцию();
	ФормаИндикации.Закрыть();
	
	Возврат ФлагИзменения;
	
КонецФункции // ПринятьИзмененияБанков()

// Процедура загружает в справочник банков, отмеченные банки из классификатора.
// В случае, если банк существует в ИБ и данные различаются, заполняет дерево измененных банков,
// для последующей обработки.
//
Функция ЗагрузитьВСправочник()
	
	ДеревоИзмененныхБанков.Строки.Очистить();
	СпрБанки = Справочники.Банки;
	
	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикации.НаименованиеОбработкиДанных = "Загрузка классификатора банков";
	ФормаИндикации.КомментарийОбработкиДанных  = "Выполняется заполнение справочника";
	ФормаИндикации.КомментарийЗначения  = "Заполнено:";
	ФормаИндикации.Открыть();

	НачатьТранзакцию();

	КоличествоСтрокДерева = ДеревоБанков.Строки.Количество();
	СчетчикЦикла = 0;
	ФлагЗагрузки = Ложь;
	Для каждого ТекСтрРег из ДеревоБанков.Строки Цикл
		СчетчикЦикла = СчетчикЦикла + 1;
		ФормаИндикации.Значение = СчетчикЦикла / КоличествоСтрокДерева * 100;
		
		ТекОКАТО  = ТекСтрРег.КодРегиона;
		ТекРегион = ТекСтрРег.Наименование;
		ФлСозданияГруппы = 0;
		Для каждого ТекСтрБанка из ТекСтрРег.Строки Цикл
			Если НЕ ТекСтрБанка.Загрузка Тогда
				Продолжить;
			КонецЕсли;	
			
			БИК          = СокрЛП(ТекСтрБанка.КодРегиона);
			КоррСчет     = СокрЛП(ТекСтрБанка.КоррСчет);
			Наименование = СокрЛП(ТекСтрБанка.Наименование);
			ТипБанка     = СокрЛП(ТекСтрБанка.ТипБанка);
			Индекс       = СокрЛП(ТекСтрБанка.Индекс);
			Город        = СокрЛП(ТекСтрБанка.Город);
			Адрес        = СокрЛП(ТекСтрБанка.Адрес);
			Телефоны     = СокрЛП(ТекСтрБанка.Телефон);

			ВыбЭл = СпрБанки.НайтиПоКоду(БИК);
			Если ВыбЭл = СпрБанки.ПустаяСсылка() Тогда
				РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);
				Если РодительЭл = СпрБанки.ПустаяСсылка() Тогда
					НоваяГр              = СпрБанки.СоздатьГруппу();
					НоваяГр.Код          = ТекОКАТО;
					НоваяГр.Наименование = ТекРегион;
					НоваяГр.Записать();
					РодительЭл = НоваяГр.Ссылка;
				КонецЕсли;	
				НовыйЭл = СпрБанки.СоздатьЭлемент();
				НовыйЭл.Родитель     = РодительЭл;
				НовыйЭл.Код          = БИК;
				НовыйЭл.Наименование = Наименование;
				НовыйЭл.КоррСчет     = КоррСчет;
				НовыйЭл.Город        = Город;
				НовыйЭл.Адрес        = Индекс+", "+Адрес;
				НовыйЭл.Телефоны     = Телефоны;
				НовыйЭл.Записать();
			Иначе
				ФлИзменения = 1000000;
				ФлИзменения = ?(СокрЛП(ВыбЭл.Код)          <> СокрЛП(БИК),ФлИзменения+100000,ФлИзменения);
				ФлИзменения = ?(СокрЛП(ВыбЭл.Наименование) <> СокрЛП(Наименование),ФлИзменения+10000,ФлИзменения);
				ФлИзменения = ?(СокрЛП(ВыбЭл.Город)        <> СокрЛП(Город),ФлИзменения+1000,ФлИзменения);
				ФлИзменения = ?(СокрЛП(ВыбЭл.КоррСчет)     <> СокрЛП(КоррСчет),ФлИзменения+100,ФлИзменения);
				ФлИзменения = ?(СокрЛП(ВыбЭл.Адрес)        <> СокрЛП(Индекс+", "+Адрес),ФлИзменения+10,ФлИзменения);
				ФлИзменения = ?(СокрЛП(ВыбЭл.Телефоны)     <> СокрЛП(Телефоны),ФлИзменения+1,ФлИзменения);
				
				Если ФлИзменения > 1000000 Тогда
					ФлИзменения = Строка(ФлИзменения);
					ФлИзменения = СтрЗаменить(ФлИзменения,Символы.НПП,"");
					Если ФлСозданияГруппы = 0 Тогда
						НоваяСтрокаРегиона = ДеревоИзмененныхБанков.Строки.Добавить();
						НоваяСтрокаРегиона.КодРегиона   = ТекОКАТО;
						НоваяСтрокаРегиона.Наименование = ТекРегион;
						НоваяСтрокаРегиона.Загрузка     = Истина;
						ФлСозданияГруппы = 1;
					КонецЕсли;	

					НоваяСтрокаБанка              = НоваяСтрокаРегиона.Строки.Добавить();
					НоваяСтрокаБанка.Наименование = Наименование;
					НоваяСтрокаБанка.Загрузка     = Истина;

					НоваяСтрокаРеквизита = НоваяСтрокаБанка.Строки.Добавить();
					НоваяСтрокаРеквизита.Наименование = "БИК";
					НоваяСтрокаРеквизита.ЗнКлассификатора      = БИК;
					НоваяСтрокаРеквизита.ЗнБазы                = ВыбЭл.Код;
					НоваяСтрокаРеквизита.ИзмененРеквизит = ?(Сред(ФлИзменения,2,1)="1",Истина,Ложь);

					НоваяСтрокаРеквизита = НоваяСтрокаБанка.Строки.Добавить();
					НоваяСтрокаРеквизита.Наименование = "Наименование";
					НоваяСтрокаРеквизита.ЗнКлассификатора      = Наименование;
					НоваяСтрокаРеквизита.ЗнБазы                = ВыбЭл.Наименование;
					НоваяСтрокаРеквизита.ИзмененРеквизит = ?(Сред(ФлИзменения,3,1)="1",Истина,Ложь);

					Для каждого ТекРек из Метаданные.Справочники.Банки.Реквизиты Цикл
						ИмяРек = СокрЛП(ТекРек.Имя);
						Если ИмяРек = "Город" Тогда
							ЗнКлас = Вычислить("Город");
							СинРек = "Город";
							НомЦиф = 4;
						ИначеЕсли ИмяРек = "КоррСчет" Тогда
							ЗнКлас = Вычислить("КоррСчет");
							СинРек = "Корр. счет";
							НомЦиф = 5;
						ИначеЕсли ИмяРек = "Адрес" Тогда
							ЗнКлас = Вычислить("Индекс+"", ""+Адрес");
							СинРек = "Адрес";
							НомЦиф = 6;
						ИначеЕсли ИмяРек = "Телефоны" Тогда
							ЗнКлас = Вычислить("Телефоны");
							СинРек = "Телефоны";
							НомЦиф = 7;
						КонецЕсли;	
						
						НоваяСтрокаРеквизита = НоваяСтрокаБанка.Строки.Добавить();
						НоваяСтрокаРеквизита.Наименование = СинРек;
						НоваяСтрокаРеквизита.ЗнКлассификатора = ЗнКлас;
						НоваяСтрокаРеквизита.ЗнБазы           = ВыбЭл[ИмяРек];
						НоваяСтрокаРеквизита.ИзмененРеквизит  = ?(Сред(ФлИзменения,НомЦиф,1)="1",Истина,Ложь);
					КонецЦикла;	
				КонецЕсли;	
			КонецЕсли;	
			ФлагЗагрузки = Истина;
		КонецЦикла;	
	КонецЦикла;	
	
	ЗафиксироватьТранзакцию();
	ФормаИндикации.Закрыть();
	
	Возврат ФлагЗагрузки;
	
КонецФункции // ЗагрузитьВСправочник()

// Процедура загружает классификатор банков с диска ИТС или с сайта РБК.
//
Процедура ЗагрузитьКлассификатор()
	
	ДеревоБанков.Строки.Очистить();
	
	Если ВариантЗагрузки = 0 Тогда
		ПолучитьЗагрузчикИТС();
	Иначе
		ПолучитьФайлРБК();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьКлассификатор()

// Процедура устанавливает значение поля Загрузка.
//
Процедура УстановитьЗначениеФлажкам(СтрокиДерева, ЗначениеФлажка)
	
	Для Каждого Банк Из СтрокиДерева Цикл
		
		Банк.Загрузка = ЗначениеФлажка;
		
		Если Банк.Строки.Количество() > 0 Тогда
			УстановитьЗначениеФлажкам(Банк.Строки, ЗначениеФлажка);
		КонецЕсли;
		
	КонецЦикла
	
КонецПроцедуры // УстановитьЗначениеФлажкам()

// Определяет по коду типа города строку типа города
//
// Параметры
//  Стр - Строка - код типа населенного пункта
//
// Возвращаемое значение
//  сокращенную строку типа населенного пункта
//
Функция ОпределитьТипГорода(Стр)
	
	Если Стр = "1" Тогда
		Возврат "Г.";       // ГОРОД
	ИначеЕсли Стр = "2" Тогда
		Возврат "П.";       // ПОСЕЛОК
	ИначеЕсли Стр = "3" Тогда
		Возврат "С.";       // СЕЛО
	ИначеЕсли Стр = "4" Тогда
		Возврат "ПГТ.";     // ПОСЕЛОК ГОРОДСКОГО ТИПА
	ИначеЕсли Стр = "5" Тогда
		Возврат "СТ-ЦА.";   // СТАНИЦА
	ИначеЕсли Стр = "6" Тогда
		Возврат "АУЛ.";     // АУЛ
	ИначеЕсли Стр = "7" Тогда
		Возврат "РП.";      //  РАБОЧИЙ ПОСЕЛОК 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции  // ОпределитьТипГорода()

// Определяет по коду типа банка строку типа банка
//
// Параметры
//  Стр - Строка - код типа банка
//
// Возвращаемое значение
//  сокращенную строку типа банка
//
Функция ОпределитьТипБанка(Стр)
	
	Если Стр = "00" Тогда
		Возврат "ГРКЦ ";    
	ИначеЕсли Стр = "10" Тогда
		Возврат "РКЦ ";    
	ИначеЕсли Стр = "20" Тогда
		Возврат "Б ";    
	ИначеЕсли Стр = "21" Тогда
		Возврат "КБ ";    
	ИначеЕсли Стр = "22" Тогда
		Возврат "СБ ";    
	ИначеЕсли Стр = "23" Тогда
		Возврат "АКБ ";    
	ИначеЕсли Стр = "24" Тогда
		Возврат "ЧКБ ";    
	ИначеЕсли Стр = "25" Тогда
		Возврат "КОПБ ";    
	ИначеЕсли Стр = "26" Тогда
		Возврат "АПБ ";    
	ИначеЕсли Стр = "30" Тогда
		Возврат "ФБ ";    
	ИначеЕсли Стр = "31" Тогда
		Возврат "ФКБ ";    
	ИначеЕсли Стр = "32" Тогда
		Возврат "Отд. ";    
	ИначеЕсли Стр = "33" Тогда
		Возврат "ФАКБ ";    
	ИначеЕсли Стр = "34" Тогда
		Возврат "ФЧКБ ";    
	ИначеЕсли Стр = "35" Тогда
		Возврат "ФКОБ ";    
	ИначеЕсли Стр = "36" Тогда
		Возврат "Отд. ";    
	ИначеЕсли Стр = "40" Тогда
		Возврат "ПУ ";    
	ИначеЕсли Стр = "50" Тогда
		Возврат "ЦХ ";    
	ИначеЕсли Стр = "70" Тогда
		Возврат "КУ ";    
	ИначеЕсли Стр = "71" Тогда
		Возврат "КЛ ";    
	ИначеЕсли Стр = "72" Тогда
		Возврат "ОРЦБ ";    
	ИначеЕсли Стр = "98" Тогда
		Возврат "ИСКЛ ";    
	ИначеЕсли Стр = "99" Тогда
		Возврат "ОТЗВ ";    
	ИначеЕсли Стр = "90" Тогда
		Возврат "ЛИКВ ";    
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции  // ОпределитьТипБанка()

// Производит загрузку банков с РБК
//
// Параметры
//  ВремКаталог - Строка - путь к временному каталогу
//
Процедура ЗагрузитьКлассификаторСРБК(ВремКаталог)
	
	ФайлБИК = Новый Файл(ВремКаталог+"\"+мИмяФайлаБИК);
	ФайлРег = Новый Файл(ВремКаталог+"\"+мИмяФайлаРег);
	
	ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикации.НаименованиеОбработкиДанных = "Загрузка классификатора банков";
	ФормаИндикации.КомментарийОбработкиДанных  = "Загружаются данные из классификатора";
	ФормаИндикации.КомментарийЗначения         = "Загружено:";
	ФормаИндикации.Открыть();
	
    Разделитель = Символы.Таб;
	СпРегионов = Новый СписокЗначений;
	мТекстКлассификатора = Новый ТекстовыйДокумент();
	мТекстКлассификатора.Прочитать(ВремКаталог + "\" + мИмяФайлаРег);
	КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	Обновить();
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстКлассификатора.ПолучитьСтроку(к);

		Если (Лев(Стр,2) = "//") или (ПустаяСтрока(Стр)) Тогда
			Продолжить;
		КонецЕсли;
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				Симвл1 = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 2 Тогда
				Симвл2 = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 

			Состояние("Обработка региона: " + Симвл1);

			НомПоля = НомПоля + 1;
			Если НомПоля > 2 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	
		
		СпРегионов.Добавить(Симвл1,Симвл2);
	КонецЦикла;	

	Состояние("Выполняется загрузка классификатора");

	мТекстКлассификатора.Прочитать(ВремКаталог + "\" + мИмяФайлаБИК);
	КолСтрок = мТекстКлассификатора.КоличествоСтрок();
	Обновить();
	
	ФормаИндикации.МаксимальноеЗначение = КолСтрок;
		
	Для к = 1 по КолСтрок Цикл
		Стр = мТекстКлассификатора.ПолучитьСтроку(к);
		Стр = СокрЛП(Стр);

		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗнТипБанка = "";
		ЗнПункт = "";
		ЗнТипПункта = "";
		ЗнНаименование = "";
		ЗнПризнакКода = "";
		ЗнБИК = "";
		ЗнКорСчет = "";
		
		НомПоля = 1;
		Пока (ПустаяСтрока(Стр) = 0) Цикл	//	пока не обработали всю шапку
	        Поз = Найти(Стр,Разделитель);
			Если Поз = 0 Тогда	//	не нашли
				НазваниеОдногоПоля = Стр;
				Стр = "";
			Иначе
				//	вырезаем очередное поля
				НазваниеОдногоПоля = Лев(Стр,Поз-1);
				Стр = Прав(Стр,СтрДлина(Стр)-Поз);
			КонецЕсли;

			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			//	добавляем входное поле в таблицу
			Если НомПоля = 1 Тогда
				ЗнТипБанка = ОпределитьТипБанка(СокрЛП(НазваниеОдногоПоля));
			ИначеЕсли НомПоля = 2 Тогда
				ЗнПункт = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 3 Тогда
				ЗнТипПункта = ОпределитьТипГорода(СокрЛП(НазваниеОдногоПоля));
			ИначеЕсли НомПоля = 4 Тогда
				ЗнНаименование = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 5 Тогда
				ЗнПризнакКода = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 6 Тогда
				ЗнБИК = СокрЛП(НазваниеОдногоПоля);
			ИначеЕсли НомПоля = 7 Тогда
				ЗнКорСчет = СокрЛП(НазваниеОдногоПоля);
			КонецЕсли; 
			НомПоля = НомПоля + 1;
			Если НомПоля > 7 Тогда 
				Прервать;  // Завершить просмотр строки, т.к. обработаны все необходимые поля, но есть еще что-то.
			КонецЕсли; 
		КонецЦикла;	

		ФормаИндикации.Значение = к;

		КодРег          = Сред(ЗнБИК,3,2);
		НайденныйРегион = СпРегионов.НайтиПоЗначению(КодРег);
		Если НайденныйРегион = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		РегТабл = ДеревоБанков.Строки.Найти(КодРег,"КодРегиона",Ложь);
		Если РегТабл = Неопределено Тогда
			НоваяСтрокаРегиона              = ДеревоБанков.Строки.Добавить();
			НоваяСтрокаРегиона.КодРегиона   = НайденныйРегион.Значение;
			НоваяСтрокаРегиона.Наименование = НайденныйРегион.Представление;
			НоваяСтрокаРегиона.Загрузка     = Ложь;
		Иначе	
			НоваяСтрокаРегиона = РегТабл;
		КонецЕсли;	
		
		НоваяСтрокаБанка              = НоваяСтрокаРегиона.Строки.Добавить();
		НоваяСтрокаБанка.Наименование = ЗнНаименование;
		НоваяСтрокаБанка.КодРегиона   = ЗнБИК;
		НоваяСтрокаБанка.ТипБанка     = ЗнТипБанка;
		НоваяСтрокаБанка.КоррСчет     = ЗнКорСчет;
		НоваяСтрокаБанка.Индекс       = "";
		НоваяСтрокаБанка.Город        = ЗнТипПункта+" "+ЗнПункт;
		НоваяСтрокаБанка.Адрес        = "";
		НоваяСтрокаБанка.Телефон      = "";
		НоваяСтрокаБанка.Загрузка = Ложь;
	КонецЦикла;	
	ФормаИндикации.Закрыть();
	
КонецПроцедуры // ЗагрузитьКлассификаторСРБК()

// Получает файл загрузки с РБК
// 
// Параметры
//  Нет.
//  
Процедура ПолучитьФайлРБК()
	
	Перем HTTP;
	ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();
	
	СерверИсточник = "cbrates.rbc.ru";
	
	Адрес = "bnk/bnk.exe";
	ВремКаталог = КаталогВременныхФайлов() + "tempBik";
	СоздатьКаталог(ВремКаталог);
	УдалитьФайлы(ВремКаталог,"*.*");
	
	Попытка
		
		Если ОбработкаПолученияФайлов.ЗапроситьФайлыССервера(СерверИсточник, Адрес, ВремКаталог + "\" + мИмяФайлаЗип, HTTP) <> Истина Тогда
			Сообщить("Не удалось установить соединение с сервером", СтатусСообщения.Важное);
			Возврат;
		Иначе
			HTTP.Получить(Адрес, ВремКаталог + "\" + мИмяФайлаЗип);
		КонецЕсли;
		
	Исключение
		
		Сообщить("Неудачная попытка соединения.");
		Возврат;
		
	КонецПопытки;
	
	Состояние("Выполняется обработка загрузки");
	
	КомандаСистемы(""""+ ВремКаталог + "\" + мИмяФайлаЗип + """", ВремКаталог);

	ФайлБИК = Новый Файл(ВремКаталог + "\" + мИмяФайлаБИК);
	ФайлРЕГ = Новый Файл(ВремКаталог + "\" + мИмяФайлаРег);
	
	НачальнаяДата = ТекущаяДата();
	Пока (НЕ (ФайлБИК.Существует() И ФайлРЕГ.Существует())) И ((ТекущаяДата() - НачальнаяДата) < 10) Цикл
	КонецЦикла;
	
	Если (ФайлБИК.Существует() И ФайлРЕГ.Существует()) Тогда
		ЗагрузитьКлассификаторСРБК(ВремКаталог);
		УдалитьФайлы(ВремКаталог,мИмяФайлаЗип);
		УдалитьФайлы(ВремКаталог,мИмяФайлаБИК);
		УдалитьФайлы(ВремКаталог,мИмяФайлаРег);
	КонецЕсли;
	
КонецПроцедуры // ПолучитьФайлРБК()

// Получает обработку загрузки с ИТС и запускает ее
// 
// Параметры
//  Нет.
//  
Процедура ПолучитьЗагрузчикИТС()
	
	// Загрузка классификатора с диска ИТС
	КаталогИТС  = "";
	ФайлИТС     = "";
	ПолнФайлБИК = "";
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = ?(Лев(СистемнаяИнформация.ВерсияПриложения,3) = "8.1", "81", "82");

	Для Индекс = 68 По 90 Цикл      
	//Для Индекс = 67 По 90 Цикл      
		ОбработкаБИК = Новый Файл(Символ(Индекс) + ":\1CITS\EXE\EXTDB\BIKr5v" + ВерсияПлатформы + ".epf");
		//ОбработкаБИК = Новый Файл(Символ(Индекс) + ":\BIK.epf");
		ФлДиска      = Истина;
		Попытка
			ЕстьФайл = ОбработкаБИК.Существует();
		Исключение
			ФлДиска  = Ложь;
		КонецПопытки;	

		Если ФлДиска Тогда
			Если ЕстьФайл Тогда
				ПолнФайлБИК = Символ(Индекс) + ":\1CITS\EXE\EXTDB\BIKr5v" + ВерсияПлатформы + ".epf";
				//ПолнФайлБИК = Символ(Индекс) + ":\BIK.epf";
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(ПолнФайлБИК) Тогда
		ФормаИндикации = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаИндикации.НаименованиеОбработкиДанных = "Загрузка классификатора банков";
		ФормаИндикации.КомментарийОбработкиДанных  = "Загружаются данные из классификатора";
		ФормаИндикации.КомментарийЗначения  = "Загружено:";
		ФормаИндикации.МаксимальноеЗначение = 100;
		ФормаИндикации.Открыть();

		ВнешнийЗагрузчик = ВнешниеОбработки.Создать(ПолнФайлБИК);
		ВнешнийЗагрузчик.ПолучитьФайлИТС(ДеревоБанков,ФормаИндикации.ЭлементыФормы.Индикатор);
		ФормаИндикации.Закрыть();
	Иначе
		Предупреждение("Не найдена обработка загрузки. Либо не вставлен
						|диск ИТС, либо на диске ИТС нет обработки.");
	КонецЕсли;

КонецПроцедуры // ПолучитьЗагрузчикИТС()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	ВариантЗагрузки = 0;
	
	ЭлементыФормы.ПанельРабочая.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ЭлементыФормы.ДействияФормы.Кнопки.Назад.Доступность = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик действия "ДействиеПометить" командной панели формы
//
Процедура ДействияФормыДействиеПометить(Элемент)
	
	УстановитьЗначениеФлажкам(ДеревоИзмененныхБанков.Строки, Истина);
	
КонецПроцедуры // ДействияФормыДействиеПометить()

// Обработчик действия "ДействиеСнятьПометки" командной панели формы
//
Процедура ДействияФормыДействиеСнятьПометки(Элемент)
	
	УстановитьЗначениеФлажкам(ДеревоИзмененныхБанков.Строки, Ложь);
	
КонецПроцедуры // ДействияФормыДействиеСнятьПометки()

// Обработчик события "ПриАктивизацииСтроки" реквизита "ДеревоБанков"
//
Процедура ДеревоБанковПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.НадписьДопРеквизитов.Значение = "Тип банка:   "+СокрЛП(Элемент.ТекущиеДанные.ТипБанка)+"
			|Корреспондентский счет:   "+СокрЛП(Элемент.ТекущиеДанные.КоррСчет)+"
			|Адрес:   "+СокрЛП(Элемент.ТекущиеДанные.Город)+", "+СокрЛП(Элемент.ТекущиеДанные.Индекс)
			+", "+СокрЛП(Элемент.ТекущиеДанные.Адрес)+"
			|Телефоны:   "+СокрЛП(Элемент.ТекущиеДанные.Телефон);
			
КонецПроцедуры // ДеревоБанковПриАктивизацииСтроки()

// Обработчик события "ПриИзмененииФлажка" реквизита "ДеревоБанков"
//
Процедура ДеревоБанковПриИзмененииФлажка(Элемент, Колонка)
	
	УстЗначение = Элемент.ТекущаяСтрока.Загрузка;
	Если Элемент.ТекущаяСтрока.Родитель = Неопределено Тогда
		КолБанков = Элемент.ТекущаяСтрока.Строки;
		Для каждого СтрБанка из КолБанков Цикл
			СтрБанка.Загрузка = УстЗначение;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры // ДеревоБанковПриИзмененииФлажка()

// Обработчик события "ПриВыводеСтроки" реквизита "ДеревоИзмененныхБанков"
//
Процедура ДеревоИзмененныхБанковПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ИзмененРеквизит Тогда
		ОформлениеСтроки.ЦветТекста = мЦветИзменения;
	КонецЕсли;	
	Если ДанныеСтроки.Строки.Количество() > 0 Тогда
		ОформлениеСтроки.Ячейки.Загрузка.ОтображатьФлажок = Истина;
	Иначе	
		ОформлениеСтроки.Ячейки.Загрузка.ОтображатьФлажок = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // ДеревоИзмененныхБанковПриВыводеСтроки()

// Обработчик события "ПередНачаломДобавления" реквизита "ДеревоБанков"
//
Процедура ДеревоБанковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
КонецПроцедуры

// Обработчик события "ПередНачаломДобавления" реквизита "ДеревоИзмененныхБанков"
//
Процедура ДеревоИзмененныхБанковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)
	Отказ = Истина;
КонецПроцедуры

// Обработчик события "УстановитьФлажки" командной панели формы.
// Устанавливает флажки строк ДеревоБанков.
//
Процедура ДействияФормыПереносУстановитьФлажки(Кнопка)
	
	УстановитьЗначениеФлажкам(ДеревоБанков.Строки, Истина);
	
КонецПроцедуры // ДействияФормыПереносУстановитьФлажки()

// Обработчик события "СнятьФлажки" командной панели формы.
// Снимает флажки строкам ДеревоБанков.
//
Процедура ДействияФормыПереносСнятьФлажки(Кнопка)
	
	УстановитьЗначениеФлажкам(ДеревоБанков.Строки, Ложь);
	
КонецПроцедуры // ДействияФормыПереносСнятьФлажки()

// Обработчик действия "Далее" элемента формы ДействияФормы.
// Переключает страница панели, направление вперед.
// При переключении выполняет: загрузкуклассификатора, загрузку банков, изменение данных банков.
//
Процедура ДействияФормыДалее(Кнопка)
	
	ТекущаяСтраница = ЭлементыФормы.ПанельРабочая.ТекущаяСтраница;
	ИндексСтраницы = ЭлементыФормы.ПанельРабочая.Страницы.Индекс(ТекущаяСтраница);
	
	Если ИндексСтраницы = 0 Тогда
		
		// Загрузить классификатор
		
		ЗагрузитьКлассификатор();
		
		Если ДеревоБанков.Строки.Количество() > 0 Тогда
			ИндексСтраницы = ИндексСтраницы + 1;
		КонецЕсли;
		
	ИначеЕсли ИндексСтраницы = 1 Тогда
		
		// Загрузить отмеченные банки из классификатора в справочник
		
		Если ЗагрузитьВСправочник() Тогда
			
			Если ДеревоИзмененныхБанков.Строки.Количество() > 0 Тогда
				
				ИндексСтраницы = ИндексСтраницы + 1;
				
			Иначе
				
				Ответ = Вопрос("Загрузка банков успешно завершена. Завершить работу с обработкой?", РежимДиалогаВопрос.ДаНет);
				
				Если Ответ=КодВозвратаДиалога.Да Тогда
					Закрыть();
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Предупреждение("В списке нет выбранных банков для заполнения.");
			
		КонецЕсли;
		
	ИначеЕсли ИндексСтраницы = 2 Тогда
		
		// Изменить данные банков
		
		Если ПринятьИзмененияБанков() Тогда
			
			Ответ = Вопрос("Изменение банков успешно завершено. Завершить работу с обработкой?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ=КодВозвратаДиалога.Да Тогда
				Закрыть();
			КонецЕсли;
			
		Иначе
			
			Предупреждение("В списке нет выбранных банков для изменения.");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Назад.Доступность = (ИндексСтраницы > 0);
	ЭлементыФормы.ПанельРабочая.ТекущаяСтраница = ЭлементыФормы.ПанельРабочая.Страницы.Получить(ИндексСтраницы);
	
КонецПроцедуры // ДействияФормыДалее()

// Обработчик действия "Далее" элемента формы ДействияФормы.
// Переключает страница панели, направление назад.
//
Процедура ДействияФормыНазад(Кнопка)
	
	ТекущаяСтраница = ЭлементыФормы.ПанельРабочая.ТекущаяСтраница;
	ИндексСтраницы = ЭлементыФормы.ПанельРабочая.Страницы.Индекс(ТекущаяСтраница);
	
	ИндексСтраницы = ИндексСтраницы - 1;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Назад.Доступность = (ИндексСтраницы > 0);
	ЭлементыФормы.ПанельРабочая.ТекущаяСтраница = ЭлементыФормы.ПанельРабочая.Страницы.Получить(ИндексСтраницы);
	
КонецПроцедуры // ДействияФормыНазад()

// Обработчик события "СвернутьВсе" командной панели формы.
// Сворачивает все строки дерева ДеревоБанков
//
Процедура ДействияФормыПереносСвернутьВсе(Кнопка)
	
	Для Каждого Банк Из ДеревоБанков.Строки Цикл
		
		ЭлементыФормы.ДеревоБанков.Свернуть(Банк);
		
	КонецЦикла;
	
КонецПроцедуры // ДействияФормыПереносСвернутьВсе()

// Обработчик события "РазвернутьВсе" командной панели формы.
// Разворачивает все строки дерева ДеревоБанков
//
Процедура ДействияФормыПереносРазвернутьВсе(Кнопка)
	
	Для Каждого Банк Из ДеревоБанков.Строки Цикл
		
		ЭлементыФормы.ДеревоБанков.Развернуть(Банк);
		
	КонецЦикла;
	
КонецПроцедуры // ДействияФормыПереносРазвернутьВсе()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мЦветИзменения = Новый Цвет(255,0,0);
мИмяФайлаЗип = "bnk.exe";  
мИмяФайлаБИК = "bnkseek.txt"; 
мИмяФайлаРег = "Reg.txt"; 




