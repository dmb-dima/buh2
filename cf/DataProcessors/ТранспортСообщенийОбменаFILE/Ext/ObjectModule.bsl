///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ЭКСПОРТНЫЕ

Перем СтрокаСообщенияОбОшибке Экспорт;
Перем СтрокаСообщенияОбОшибкеЖР Экспорт;

///////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСообщенияОшибок; // соответствие с сообщениями ошибок обработки
Перем мИмяОбъекта; // имя объекта метаданных

Перем мВременныйФайлСообщенияОбмена; // временный файл сообщения обмена для выгрузки/загрузки данных
Перем мВременныйКаталогСообщенийОбмена; // временный каталог для сообщений обмена
Перем мКаталогОбменаИнформацией; // сетевой каталог для обмена сообщениями

///////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Создает временный каталог в каталоге временных файлов пользователя операционной системы.
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина – удалось выполнить функцию, Ложь – произошла ошибка
// 
Функция ВыполнитьДействияПередОбработкойСообщения() Экспорт
	
	ИнициализацияСообщений();
	
	Возврат СоздатьВременныйКаталогСообщенийОбмена();
	
КонецФункции

// Выполняет отправку сообщения обмена на заданный ресурс из временного каталога сообщения обмена
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина – удалось выполнить функцию, Ложь – произошла ошибка
// 
Функция ОтправитьСообщение() Экспорт
	
	ИнициализацияСообщений();
	
	Попытка
		Результат = ОтправитьСообщениеОбмена();
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает сообщение обмена с заданного ресурса во временный каталог сообщения обмена
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина – удалось выполнить функцию, Ложь – произошла ошибка
// 
Функция ПолучитьСообщение() Экспорт
	
	ИнициализацияСообщений();
	
	Попытка
		Результат = ПолучитьСообщениеОбмена();
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

// Удаляет временный каталог сообщений обмена после выполнения выгрузки или загрузки данных
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина
//
Функция ВыполнитьДействияПослеОбработкиСообщения() Экспорт
	
	ИнициализацияСообщений();
	
	УдалитьВременныйКаталогСообщенийОбмена();
	
	Возврат Истина;
	
КонецФункции

// Выполняет проверку наличия сообщения обмена на заданном ресурсе
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево - Истина - сообщение обмена присутствует на заданном ресурсе; Лож – нет
//
Функция ФайлСообщенияОбменаСуществует() Экспорт
	
	Возврат (НайтиФайлы(ИмяКаталогаОбменаИнформацией(), ШаблонИмениФайлаСообщения + ".*", Ложь).Количество() > 0);
	
КонецФункции

// Инициализация

// Выполняет инициализацию свойств обработки начальными значениями и константами
//
// Параметры:
//  Нет.
// 
Процедура Инициализация() Экспорт
	
	мКаталогОбменаИнформацией = Новый Файл(FILEКаталогОбменаИнформацией);
	
КонецПроцедуры

// ПРОВЕРКА ПОДКЛЮЧЕНИЯ

// Выполняет проверку возможности установки подключения к заданному ресурсу
//
// Параметры:
//  Нет.
// 
//  Возвращаемое значение:
//  Булево – Истина – подключение может быть установлено; Ложь – нет
//
Функция ПодключениеУстановлено() Экспорт
	
	ИнициализацияСообщений();
	
	Если ПустаяСтрока(FILEКаталогОбменаИнформацией) Тогда
		
		ПолучитьСообщениеОбОшибке(1);
		Возврат Ложь;
		
	ИначеЕсли Не мКаталогОбменаИнформацией.Существует() Тогда
		
		ПолучитьСообщениеОбОшибке(2);
		Возврат Ложь;
		
	ИначеЕсли Не СоздатьФайлПроверки() Тогда
		
		ПолучитьСообщениеОбОшибке(8);
		Возврат Ложь;
		
	ИначеЕсли Не УдалитьФайлПроверки() Тогда
		
		ПолучитьСообщениеОбОшибке(9);
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// СВОЙСТВА ОБРАБОТКИ

// Функция-свойство: полное имя файла сообщения обмена
//
// Тип: Строка
//
Функция ИмяФайлаСообщенияОбмена() Экспорт
	
	Имя = "";
	
	Если ТипЗнч(мВременныйФайлСообщенияОбмена) = Тип("Файл") Тогда
		
		Имя = мВременныйФайлСообщенияОбмена.ПолноеИмя;
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Функция-свойство: полное имя каталога сообщения обмена
//
// Тип: Строка
//
Функция ИмяКаталогаСообщенияОбмена() Экспорт
	
	Имя = "";
	
	Если ТипЗнч(мВременныйКаталогСообщенийОбмена) = Тип("Файл") Тогда
		
		Имя = мВременныйКаталогСообщенийОбмена.ПолноеИмя;
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Функция-свойство: полное имя каталога обмена информацией (сетевой или локальный ресурс)
//
// Тип: Строка
//
Функция ИмяКаталогаОбменаИнформацией() Экспорт
	
	Имя = "";
	
	Если ТипЗнч(мКаталогОбменаИнформацией) = Тип("Файл") Тогда
		
		Имя = мКаталогОбменаИнформацией.ПолноеИмя;
		
	КонецЕсли;
	
	Возврат Имя;
	
КонецФункции

// Функция-свойство: время изменения файла сообщения обмена
//
// Тип: Дата
//
Функция ДатаФайлаСообщенияОбмена() Экспорт
	
	Результат = Неопределено;
	
	Если ТипЗнч(мВременныйФайлСообщенияОбмена) = Тип("Файл") Тогда
		
		Если мВременныйФайлСообщенияОбмена.Существует() Тогда
			
			Результат = мВременныйФайлСообщенияОбмена.ПолучитьВремяИзменения();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//

Функция СжиматьФайлИсходящегоСообщения()
	
	Возврат FILEСжиматьФайлИсходящегоСообщения;
	
КонецФункции

Функция ИмяВременногоФайлаФлага()
	
	Возврат "flag.tmp";
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СоздатьВременныйКаталогСообщенийОбмена()
	
	ИмяВременногоКаталога = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), ОбменДаннымиСервер.ИмяВременногоКаталогаСообщенийОбмена());
	
	мВременныйКаталогСообщенийОбмена = Новый Файл(ИмяВременногоКаталога);
	
	// создаем временный каталог для сообщений обмена
	Попытка
		СоздатьКаталог(ИмяКаталогаСообщенияОбмена());
	Исключение
		ПолучитьСообщениеОбОшибке(6);
		ДополнитьСообщениеОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	ИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(ИмяКаталогаСообщенияОбмена(), ШаблонИмениФайлаСообщения + ".xml");
	
	мВременныйФайлСообщенияОбмена = Новый Файл(ИмяФайлаСообщения);
	
	Возврат Истина;
КонецФункции

Функция УдалитьВременныйКаталогСообщенийОбмена()
	
	Попытка
		
		Если Не ПустаяСтрока(ИмяКаталогаСообщенияОбмена()) Тогда
			
			УдалитьФайлы(ИмяКаталогаСообщенияОбмена());
			
			мВременныйКаталогСообщенийОбмена = Неопределено;
			
		КонецЕсли;
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция ОтправитьСообщениеОбмена()
	
	Результат = Истина;
	
	Расширение = ?(СжиматьФайлИсходящегоСообщения(), "zip", "xml");
	
	ИмяФайлаИсходящегоСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(ИмяКаталогаОбменаИнформацией(), ШаблонИмениФайлаСообщения + "." + Расширение);
	
	Если СжиматьФайлИсходящегоСообщения() Тогда
		
		// получаем имя для временного файла архива
		ИмяВременногоФайлаАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(ИмяКаталогаСообщенияОбмена(), ШаблонИмениФайлаСообщения + ".zip");
		
		Попытка
			
			Архиватор = Новый ЗаписьZipФайла(ИмяВременногоФайлаАрхива, ПарольАрхиваСообщенияОбмена, "Файл сообщения обмена");
			Архиватор.Добавить(ИмяФайлаСообщенияОбмена());
			Архиватор.Записать();
			
		Исключение
			Результат = Ложь;
			ПолучитьСообщениеОбОшибке(5);
			ДополнитьСообщениеОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Архиватор = Неопределено;
		
		Если Результат Тогда
			
			// копируем файл архива в каталог обмена информацией
			Если Не ВыполнитьКопированиеФайла(ИмяВременногоФайлаАрхива, ИмяФайлаИсходящегоСообщения) Тогда
				Результат = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// копируем файл сообщения в каталог обмена информацией
		Если Не ВыполнитьКопированиеФайла(ИмяФайлаСообщенияОбмена(), ИмяФайлаИсходящегоСообщения) Тогда
			Результат = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСообщениеОбмена()
	
	ТаблицаФайловСообщенийОбмена = Новый ТаблицаЗначений;
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("Файл", Новый ОписаниеТипов("Файл"));
	ТаблицаФайловСообщенийОбмена.Колонки.Добавить("ВремяИзменения");
	
	МассивНайденныхФайлов = НайтиФайлы(ИмяКаталогаОбменаИнформацией(), ШаблонИмениФайлаСообщения + ".*", Ложь);
	
	Для Каждого ТекущийФайл ИЗ МассивНайденныхФайлов Цикл
		
		// проверяем нужное расширение
		Если ((ВРег(ТекущийФайл.Расширение) <> ".ZIP")
			И (ВРег(ТекущийФайл.Расширение) <> ".XML")) Тогда
			
			Продолжить;
			
		// проверяем что это файл, а не каталог
		ИначеЕсли (ТекущийФайл.ЭтоФайл() = Ложь) Тогда
			
			Продолжить;
			
		// проверяем ненулевой размер файла
		ИначеЕсли (ТекущийФайл.Размер() = 0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// файл является требуемым сообщением обмена; добавляем его в таблицу
		СтрокаТаблицы = ТаблицаФайловСообщенийОбмена.Добавить();
		СтрокаТаблицы.Файл           = ТекущийФайл;
		СтрокаТаблицы.ВремяИзменения = ТекущийФайл.ПолучитьВремяИзменения();
		
	КонецЦикла;
	
	Если ТаблицаФайловСообщенийОбмена.Количество() = 0 Тогда
		
		ПолучитьСообщениеОбОшибке(3);
		
		СтрокаСообщения = НСтр("ru = 'Каталог обмена информацией: ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяКаталогаОбменаИнформацией());
		ДополнитьСообщениеОбОшибке(СтрокаСообщения);
		
		СтрокаСообщения = НСтр("ru = 'Имя файла сообщения обмена: ""%1""'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ШаблонИмениФайлаСообщения + ".[xml|zip]");
		ДополнитьСообщениеОбОшибке(СтрокаСообщения);
		
		Возврат Ложь;
		
	Иначе
		
		ТаблицаФайловСообщенийОбмена.Сортировать("ВремяИзменения Убыв");
		
		// получаем из таблицы самый "свежий" файл сообщения обмена
		ФайлВходящегоСообщения = ТаблицаФайловСообщенийОбмена[0].Файл;
		
		ФайлЗапакован = (ВРег(ФайлВходящегоСообщения.Расширение) = ".ZIP");
		
		Если ФайлЗапакован Тогда
			
			// получаем имя для временного файла архива
			ИмяВременногоФайлаАрхива = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(ИмяКаталогаСообщенияОбмена(), ШаблонИмениФайлаСообщения + ".zip");
			
			// копируем файл архива из сетевого каталога во временный
			Если Не ВыполнитьКопированиеФайла(ФайлВходящегоСообщения.ПолноеИмя, ИмяВременногоФайлаАрхива) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// распаковываем временный файл архива
			УспешноРаспакованно = ОбменДаннымиСервер.РаспаковатьZipФайл(ИмяВременногоФайлаАрхива, ИмяКаталогаСообщенияОбмена(), ПарольАрхиваСообщенияОбмена);
			
			Если Не УспешноРаспакованно Тогда
				ПолучитьСообщениеОбОшибке(4);
				Возврат Ложь;
			КонецЕсли;
			
			// проверка на существование файла сообщения
			Файл = Новый Файл(ИмяФайлаСообщенияОбмена());
			
			Если Не Файл.Существует() Тогда
				
				ПолучитьСообщениеОбОшибке(7);
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			// просто копируем файл входящего сообщения из каталога обмена в каталог временных файлов
			Если Не ВыполнитьКопированиеФайла(ФайлВходящегоСообщения.ПолноеИмя, ИмяФайлаСообщенияОбмена()) Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция СоздатьФайлПроверки()
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Временный файл проверки'"));
	
	Попытка
		
		ТекстовыйДокумент.Записать(ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(ИмяКаталогаОбменаИнформацией(), ИмяВременногоФайлаФлага()));
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

Функция УдалитьФайлПроверки()
	
	Попытка
		
		УдалитьФайлы(ИмяКаталогаОбменаИнформацией(), ИмяВременногоФайлаФлага());
		
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// выполняет копирование файла
Функция ВыполнитьКопированиеФайла(Знач ИмяФайлаИсточника, Знач ИмяФайлаПриемника)
	
	Попытка
		
		КопироватьФайл(ИмяФайлаИсточника, ИмяФайлаПриемника);
		
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при копировании файла из %1 в %2. Описание ошибки: %3");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							ИмяФайлаИсточника,
							ИмяФайлаПриемника,
							КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		//
		УстановитьСтрокуСообщенияОбОшибке(СтрокаСообщения);
		
		Возврат Ложь
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ПолучитьСообщениеОбОшибке(НомерСообщения)
	
	УстановитьСтрокуСообщенияОбОшибке(мСообщенияОшибок[НомерСообщения])
	
КонецПроцедуры

Процедура УстановитьСтрокуСообщенияОбОшибке(Знач Сообщение)
	
	Если Сообщение = Неопределено Тогда
		Сообщение = "Внутренняя ошибка";
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке   = Сообщение;
	СтрокаСообщенияОбОшибкеЖР = мИмяОбъекта + ": " + Сообщение;
	
КонецПроцедуры

Процедура ДополнитьСообщениеОбОшибке(Сообщение)
	
	СтрокаСообщенияОбОшибкеЖР = СтрокаСообщенияОбОшибкеЖР + Символы.ПС + Сообщение;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЛИЗАЦИИ

Процедура ИнициализацияСообщений()
	
	СтрокаСообщенияОбОшибке   = "";
	СтрокаСообщенияОбОшибкеЖР = "";
	
КонецПроцедуры

Процедура ИнициализацияСообщенийОшибок()
	
	мСообщенияОшибок = Новый Соответствие;
	мСообщенияОшибок.Вставить(1, НСтр("ru = 'Ошибка подключения: Не указан каталог обмена информацией!'"));
	мСообщенияОшибок.Вставить(2, НСтр("ru = 'Ошибка подключения: Каталог обмена информацией не существует!'"));
	
	мСообщенияОшибок.Вставить(3, НСтр("ru = 'В каталоге обмена информацией не был обнаружен файл сообщения с данными.'"));
	мСообщенияОшибок.Вставить(4, НСтр("ru = 'Ошибка при распаковке сжатого файла сообщения.'"));
	мСообщенияОшибок.Вставить(5, НСтр("ru = 'Ошибка при сжатии файла сообщения обмена.'"));
	мСообщенияОшибок.Вставить(6, НСтр("ru = 'Ошибка при создании временного каталога'"));
	мСообщенияОшибок.Вставить(7, НСтр("ru = 'Архив не содержит файл сообщения обмена'"));
	
	мСообщенияОшибок.Вставить(8, НСтр("ru = 'Ошибка записи файла в каталог обмена информацией. Проверьте права пользователя на доступ к каталогу.'"));
	мСообщенияОшибок.Вставить(9, НСтр("ru = 'Ошибка удаления файла из каталога обмена информацией. Проверьте права пользователя на доступ к каталогу.'"));
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ

ИнициализацияСообщений();
ИнициализацияСообщенийОшибок();

мВременныйКаталогСообщенийОбмена = Неопределено;
мВременныйФайлСообщенияОбмена    = Неопределено;

мИмяОбъекта = НСтр("ru = 'Обработка: %1'");
мИмяОбъекта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(мИмяОбъекта, Метаданные().Имя);
