Перем Организация;
Перем Банк;
Перем ИдНомерДокумента;
Перем КаталогЭкспортаДанных Экспорт;
Перем КаталогИмпортаДанных Экспорт;
Перем ТекстXML Экспорт;

Перем ФорматФайла1;
Перем ФорматФайла3;

#Если ТолстыйКлиентОбычноеПриложение Тогда

// ПЕЧАТЬ
// Формирует печатную форму 
// заявки
//
Функция ПечатьПеречисленияЗарплаты(СсылкаНаДокумент) Экспорт
	
	ОбъектДокумента = СсылкаНаДокумент.ПолучитьОбъект();
	
	ТабДокумент = Новый ТабличныйДокумент;
	ИтоговаяСумма = 0;
	Макет = ПолучитьМакет("ВедомостьПоПеречислениюЗПНаПК");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	
	Обл.Параметры.ДатаФормирования= Формат(ОбъектДокумента.Дата, "ДЛФ=Д");
	Обл.Параметры.НаименованиеОрганизации= "" + ОбъектДокумента.Организация;
	
	ТабДокумент.Вывести(Обл);
	
	
		
	ЗапросПоВедомости = Новый Запрос("ВЫБРАТЬ
	                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Физлицо,
	                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Сумма,
	                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка
	                                 |ИЗ
	                                 |	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
	                                 |ГДЕ
	                                 |	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка");
	
	
	ЗапросПоВедомости.УстановитьПараметр("Ссылка", СсылкаНаДокумент);
	
	ВыборкаФизЛиц = ЗапросПоВедомости.Выполнить().Выбрать();
	
	Пока ВыборкаФизЛиц.Следующий() Цикл
	
		ЗапросПоФизЛицу = Новый Запрос("ВЫБРАТЬ
		                               |	ФизическиеЛица.Наименование
		                               |ИЗ
		                               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		                               |ГДЕ
		                               |	ФизическиеЛица.Ссылка = &Ссылка");
		
		ЗапросПоФизЛицу.УстановитьПараметр("Ссылка", ВыборкаФизЛиц.ФизЛицо);
		
		
		Обл   = Макет.ПолучитьОбласть("СтрокаВыплаты");
		
		Выборка = ЗапросПоФизЛицу.Выполнить().Выбрать();
		Выборка.Следующий();
		
		// заполняем данные физ лица
		Обл.Параметры.ФИОСотрудника = Выборка.Наименование;
		Обл.Параметры.ОБ = ОтделениеБанка;
		Обл.Параметры.ФОБ = ФилиалОтделенияБанка;
		Обл.Параметры.Сумма = ВыборкаФизЛиц.Сумма;
		ИтоговаяСумма = ИтоговаяСумма + ВыборкаФизЛиц.Сумма;
		// заполняем лицевой счет
		
		ЗапросПоЛС = Новый Запрос("ВЫБРАТЬ
		                          |	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета
		                          |ИЗ
		                          |	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
		                          |ГДЕ
		                          |	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо = &ФизЛицо
		                          |	И ЛицевыеСчетаРаботниковОрганизации.Организация = &Организация
		                          |	И ЛицевыеСчетаРаботниковОрганизации.Банк = &Банк");
		
		ЗапросПоЛС.УстановитьПараметр("ФизЛицо", ВыборкаФизЛиц.ФизЛицо);
		ЗапросПоЛС.УстановитьПараметр("Организация", ОбъектДокумента.Организация);
		ЗапросПоЛС.УстановитьПараметр("Банк", СчетБанкаПолучателя.Банк);
		
		ВыборкаЛС = ЗапросПоЛС.Выполнить().Выбрать();
		
		Если ВыборкаЛС.Следующий() Тогда
			Обл.Параметры.ЛицевойСчет = ВыборкаЛС.НомерЛицевогоСчета;
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
		
	КонецЦикла;
	
	
	Обл = Макет.ПолучитьОбласть("Подвал");
	Обл.Параметры.СуммаИтого = ИтоговаяСумма;
	ТабДокумент.Вывести(Обл);
	
	// Первую колонку не печатаем
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
	
	Возврат ТабДокумент;
	
КонецФункции

// Формирует печатную форму 
// заявки
//
Функция ПечатьЗаявки(СсылкаНаДокумент) Экспорт
	
	ОбъектДокумента = СсылкаНаДокумент.ПолучитьОбъект();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ВедомостьСчетов");
	Обл   = Макет.ПолучитьОбласть("Заголовок");
	
	ЗапросПоНС = Новый Запрос("ВЫБРАТЬ
	                          |	БанковскиеСчета.Ссылка,
	                          |	БанковскиеСчета.НомерСчета
	                          |ИЗ
	                          |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                          |ГДЕ
	                          |	БанковскиеСчета.Ссылка = &Ссылка");
	
	ЗапросПоНС.УстановитьПараметр("Ссылка", ОбъектДокумента.БанковскийСчет);
	Выборка = ЗапросПоНС.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Обл.Параметры.ДатаФормирования= Формат(ОбъектДокумента.Дата, "ДЛФ=Д");
	Обл.Параметры.НаименованиеОрганизации= "" + ОбъектДокумента.Организация;
	Обл.Параметры.РасчетныйСчетОрганизации= "Р/С №" + Выборка.НомерСчета;
	Обл.Параметры.НомерДоговора= ОбъектДокумента.НомерДоговора;
	
	ТабДокумент.Вывести(Обл);

	ЗапросПоНС.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ЕСТЬNULL(КонтактнаяИнформация.Телефон, """")) КАК Телефон,
	|	МАКСИМУМ(ЕСТЬNULL(КонтактнаяИнформация.Адрес, """")) КАК Адрес
	|ИЗ
	|	(ВЫБРАТЬ
	|		NULL КАК Телефон,
	|		ПОДСТРОКА(АдресОрганизации.Представление, 1, 100) КАК Адрес
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК АдресОрганизации
	|	ГДЕ
	|		АдресОрганизации.Объект = &Организация
	|		И АдресОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации)
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ПОДСТРОКА(ТелефонОрганизации.Представление, 1, 100),
	|		NULL
	|	ИЗ
	|		РегистрСведений.КонтактнаяИнформация КАК ТелефонОрганизации
	|	ГДЕ
	|		ТелефонОрганизации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)
	|		И ТелефонОрганизации.Объект = &Организация) КАК КонтактнаяИнформация";
	ЗапросПоНС.УстановитьПараметр("Организация", ОбъектДокумента.Организация);
	КонтактнаяИнформацияОрганизации = ЗапросПоНС.Выполнить().Выбрать();
	КонтактнаяИнформацияОрганизации.Следующий();
	
	Для каждого СтрокаЗаявки ИЗ ОбъектДокумента.РаботникиОрганизации Цикл
		
		Обл   = Макет.ПолучитьОбласть("Строка");
		
		ЗапросПоФизЛицу = Новый Запрос("ВЫБРАТЬ
		                               |	ФизическиеЛица.ДатаРождения,
		                               |	ФизическиеЛица.Пол,
		                               |	ФизическиеЛица.Наименование
		                               |ИЗ
		                               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		                               |ГДЕ
		                               |	ФизическиеЛица.Ссылка = &Ссылка");
		
		ЗапросПоФизЛицу.УстановитьПараметр("Ссылка", СтрокаЗаявки.ФизЛицо);
		
		Выборка = ЗапросПоФизЛицу.выполнить().Выбрать();
		Выборка.Следующий();
		
		// заполняем данные физ лица
		Обл.Параметры.ФИОСотрудника = Выборка.Наименование;
		Обл.Параметры.ВидВклада = ОбъектДокумента.ВидВклада;
		Обл.Параметры.ДатаРождения = Формат(Выборка.ДатаРождения, "ДЛФ=Д");
		Обл.Параметры.Пол = Выборка.Пол;
		
		// заполняем общие данные
		Обл.Параметры.ОБ = ОтделениеБанка;
		Обл.Параметры.ФОБ = ФилиалОтделенияБанка;
		Обл.Параметры.ЭмбоссированныйТекст = СтрокаЗаявки.ЭмбоссированныйТекст1 + " " + СтрокаЗаявки.ЭмбоссированныйТекст2 + " " + СтрокаЗаявки.ЭмбоссированныйТекст3;
		Обл.Параметры.Сумма = "0,00";
		Обл.Параметры.РабочийТелефон = КонтактнаяИнформацияОрганизации.Телефон;
		Обл.Параметры.АдресМестаРаботы = КонтактнаяИнформацияОрганизации.Адрес;
		
		// заполняем контактную информацию
		
		ЗапросПоКонтактам = Новый Запрос("ВЫБРАТЬ
		                                 |	КонтактнаяИнформация.Объект,
		                                 |	КонтактнаяИнформация.Тип,
		                                 |	КонтактнаяИнформация.Вид,
		                                 |	КонтактнаяИнформация.Представление,
		                                 |	КонтактнаяИнформация.ЗначениеПоУмолчанию
		                                 |ИЗ
		                                 |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		                                 |ГДЕ
		                                 |	КонтактнаяИнформация.Объект = &Объект
		                                 |	И КонтактнаяИнформация.Вид = &Вид");
		
		ЗапросПоКонтактам.УстановитьПараметр("Объект", СтрокаЗаявки.ФизЛицо);
		ЗапросПоКонтактам.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица);
		
		Выборка = ЗапросПоКонтактам.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Обл.Параметры.АдресПроживания= Выборка.Представление;
		КонецЕсли;
		
		ЗапросПоКонтактам = Новый Запрос("ВЫБРАТЬ
		                                 |	КонтактнаяИнформация.Объект,
		                                 |	КонтактнаяИнформация.Тип,
		                                 |	КонтактнаяИнформация.Вид,
		                                 |	КонтактнаяИнформация.Представление,
		                                 |	КонтактнаяИнформация.ЗначениеПоУмолчанию
		                                 |ИЗ
		                                 |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		                                 |ГДЕ
		                                 |	КонтактнаяИнформация.Объект = &Объект
		                                 |	И КонтактнаяИнформация.Вид = &Вид");
		
		ЗапросПоКонтактам.УстановитьПараметр("Объект", СтрокаЗаявки.ФизЛицо);
		ЗапросПоКонтактам.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица);
		
		Выборка = ЗапросПоКонтактам.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Обл.Параметры.АдресПрописки= Выборка.Представление;
		КонецЕсли;
		
		// удостоверение личности
		ЗапросПоУдостоверению = Новый Запрос("ВЫБРАТЬ
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК ДокументКемВыдан,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ДатаРегистрацииПоМестуЖительства,
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
		                                     |ИЗ
		                                     |	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних КАК ПаспортныеДанныеФизЛицСрезПоследних
		                                     |ГДЕ
		                                     |	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо = &ФизЛицо");
		
		ЗапросПоУдостоверению.УстановитьПараметр("ФизЛицо", СтрокаЗаявки.ФизЛицо);
		Выборка = ЗапросПоУдостоверению.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Обл.Параметры.УдостоверениеЛичности= "" + Выборка.ДокументВид + ", серия: " + Выборка.ДокументСерия + ", № " + Выборка.ДокументНомер + ", выдан: " + Формат(Выборка.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года";
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЦикла;
	
	
	Обл=Макет.ПолучитьОбласть("Подвал");
	ТабДокумент.Вывести(Обл);
	
	// Первую колонку не печатаем
	ТабДокумент.ОбластьПечати = ТабДокумент.Область(1,1,ТабДокумент.ВысотаТаблицы,ТабДокумент.ШиринаТаблицы);
	
	Возврат ТабДокумент;
	
КонецФункции

// Выводит на печать подготовленный макет 
//
// Параметры:
//  ПечДокумент           - ТабличыйДокумент, макет на печать,
//  КоличествоЭкземпляров - Число, количество экземпляров на печать,
//  НаПринтер             - Булево, Если истина, то выводим сразу на принтер.
//  Заголовок             - Заголовок окна табличного документа
//
Процедура НапечататьДокумент(ПечДокумент, КоличествоЭкземпляров = 1, НаПринтер = Ложь, Заголовок = "") Экспорт

	Если ПечДокумент = Неопределено тогда
		Возврат;
	КонецЕсли;

	// Получить необходимое количество копий
	Если КоличествоЭкземпляров < 1 Тогда
		ПечДокумент.КоличествоЭкземпляров = 1;
	Иначе
		ПечДокумент.КоличествоЭкземпляров = КоличествоЭкземпляров;
	КонецЕсли;

	Если НаПринтер Тогда

		ПечДокумент.Напечатать();

	Иначе

		// Отобразить печатный документ на экране
		ФормаПечати = ПолучитьОбщуюФорму("ПечатьДокументов",, ПечДокумент);
		ФормаПечати.ПечатныйДокумент = ПечДокумент;
		ФормаПечати.Заголовок        = Заголовок;
		ФормаПечати.Открыть();

	КонецЕсли;

КонецПроцедуры // НапечататьДокумент()


	
// СЛУЖЕБНЫЕ ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция по полному наименованию адресного элемента выдает отдельно его имя, и отдельно его адресное сокращение
Функция ПолучитьИмяИАдресноеСокращение(Знач СтрокаЭлемента, АдресноеСокращение) Экспорт

   	Буфер = СокрП(СтрокаЭлемента);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		Возврат СтрокаЭлемента;
	КонецЕсли;

	Пока  СтрЧислоВхождений(Буфер, " ") > 1 Цикл
		Буфер = Лев(Буфер, ПозицияПослПробела - 1) + "_" + Сред(Буфер, ПозицияПослПробела + 1);
		ПозицияПослПробела = Найти(Буфер, " ");
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сокращение", Сред(СтрокаЭлемента, ПозицияПослПробела + 1));
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	АдресныеСокращения.Ссылка
	|ИЗ
	|	Справочник.АдресныеСокращения КАК АдресныеСокращения
	|
	|ГДЕ
	|	АдресныеСокращения.Сокращение = &Сокращение";

	Выборка = Запрос.Выполнить().Выбрать();
	АдресноеСокращение = "";

	Если Выборка.Следующий() Тогда
		Если ПустаяСтрока(СокрЛП(Лев(СтрокаЭлемента, ПозицияПослПробела - 1))) Тогда
			Возврат СтрокаЭлемента;
		Иначе
			АдресноеСокращение = Сред(СтрокаЭлемента, ПозицияПослПробела + 1);
			Возврат Лев(СтрокаЭлемента, ПозицияПослПробела - 1);
		КонецЕсли;
	Иначе
		Возврат СтрокаЭлемента;
	КонецЕсли;
  	
КонецФункции

// Функция определяет является ли последнее слово в строке допустимым 
//  сокращением, и если является, то обрезает его из строки
//
// Параметры
//  СтрокаЭлемента - Строка в которой необходимо обрезать сокращение
// Возвращаемые значения
//  Обрезаную строку в случае, если есть сокращение и полученную строку в 
// обратном случае
Функция ОбрезатьСокращение(Знач СтрокаЭлемента) Экспорт

	АдресноеСокращение = "";
	ИмяЭлемента = ПолучитьИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
	Возврат ИмяЭлемента;
	
КонецФункции


Функция ПолучитьИДДокумента(СсылкаНаДокумент) Экспорт
	
	СтрокаГУИД = Строка(СсылкаНаДокумент.УникальныйИдентификатор());
//	Возврат ВРЕГ(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаГУИД, "-", ""), " ", ""), ".", ""));
	Возврат СтрокаГУИД;
	
КонецФункции

Функция ПолучитьДатуXML(Дата1С) Экспорт
	
	Если ТипЗнч(Дата1С) = Тип("Дата") Тогда
		Возврат Формат(Год(Дата1С), "ЧЦ=6; ЧГ=0") + "-" + Формат(Месяц(Дата1С), "ЧЦ=2; ЧВН=") + "-" + Формат(День(Дата1С), "ЧЦ=2; ЧВН=");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции


// СЕАНСОВЫЙ УРОВЕНЬ

Функция ОчиститьДанныеЭкспорта() Экспорт
	
	// данные сеанса
	ДатаФормирования         = Неопределено;
	НомерДоговора            = Неопределено;
	Организация              = Неопределено;
	НаименованиеОрганизации  = Неопределено;
	ИНН                      = Неопределено;
	Банк                     = Неопределено;
	РасчетныйСчетОрганизации = Неопределено;
	
	КоличествоЗаписей        = Неопределено;
	СуммаИтого               = Неопределено;
	
	
	// данные по открытию счетов
	ОткрытиеСчетов.Очистить();
	
	
	// данные по зачислению зарплаты
	ЗачислениеЗарплаты.Очистить();
	
	
КонецФункции

Функция ЗадатьПараметрыСеанса(вхДатаФормирования, вхНомерДоговора, вхОрганизация, вхРасчетныйСчетОрганизации, ИДДокумента = "") Экспорт
	
	Попытка
		ДатаФормирования = Дата(вхДатаФормирования);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		НомерДоговора = Строка(вхНомерДоговора);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Организация = вхОрганизация;
		НаименованиеОрганизации = Строка(вхОрганизация.НаименованиеПолное);
		ИНН = Строка(вхОрганизация.ИНН);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		Банк = вхРасчетныйСчетОрганизации.Банк;
		РасчетныйСчетОрганизации = вхРасчетныйСчетОрганизации.НомерСчета;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		ИдНомерДокумента = ИДДокумента;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


// СЛУЖЕБНЫЕ ФУНКЦИИ ПОДГОТОВКИ ДАННЫХ

Функция ПолучитьЛицевойСчет(ФизЛицо, Организация, Банк) Экспорт
	
	ЗапросНаСуществование = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо,
	|	ЛицевыеСчетаРаботниковОрганизации.Организация,
	|	ЛицевыеСчетаРаботниковОрганизации.Банк,
	|	ЛицевыеСчетаРаботниковОрганизации.НомерЛицевогоСчета
	|ИЗ
	|	РегистрСведений.ЛицевыеСчетаРаботниковОрганизации КАК ЛицевыеСчетаРаботниковОрганизации
	|ГДЕ
	|	ЛицевыеСчетаРаботниковОрганизации.ФизЛицо = &ФизЛицо
	|	И ЛицевыеСчетаРаботниковОрганизации.Организация = &Организация
	|	И ЛицевыеСчетаРаботниковОрганизации.Банк = &Банк");
	
	ЗапросНаСуществование.УстановитьПараметр("ФизЛицо", ФизЛицо);
	ЗапросНаСуществование.УстановитьПараметр("Организация", Организация);
	ЗапросНаСуществование.УстановитьПараметр("Банк", Банк);
	Выборка = ЗапросНаСуществование.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.НомерЛицевогоСчета;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПолучитьУдостоверениеЛичностиСтрокой(ФизЛицо) Экспорт
	
	СтрокаУдЛичности = "";
	
	ЗапросПаспортныхДанных = Новый Запрос( "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|		ПаспортныеДанныеФизЛицСрезПоследних.Период КАК Период,
	|		ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|		ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия КАК ДокументСерия,
	|		ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер КАК ДокументНомер,
	|		ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|		ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан КАК ДокументКемВыдан,
	|		ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Наименование КАК ДокументВидНаименование
	|	ИЗ
	|		РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних КАК ПаспортныеДанныеФизЛицСрезПоследних
	|ГДЕ
	|	ФизЛицо = &ФизЛицо");
	
	ЗапросПаспортныхДанных.УстановитьПараметр("ФизЛицо", ФизЛицо);
	
	Выборка = ЗапросПаспортныхДанных.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтрокаУдЛичности = СтрокаУдЛичности + Выборка.ДокументВидНаименование + Символы.ПС;
		СтрокаУдЛичности = СтрокаУдЛичности + Выборка.ДокументСерия + Символы.ПС;
		СтрокаУдЛичности = СтрокаУдЛичности + Выборка.ДокументНомер + Символы.ПС;
		СтрокаУдЛичности = СтрокаУдЛичности + Формат(Выборка.ДокументДатаВыдачи, "ДФ=yyyy-MM-dd") + Символы.ПС;
		СтрокаУдЛичности = СтрокаУдЛичности + СокрЛП(Выборка.ДокументКемВыдан);
		
	КонецЕсли;
	
	Возврат СтрокаУдЛичности;
	
КонецФункции

// Функция возвращает телефон с видом ВидТелефона для сотрудника Объект
//
Функция ПолучитьТелефонСтрокой(Объект, ВидТелефона) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации[ВидТелефона]);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И КонтактнаяИнформация.Тип = &Тип
	|	И КонтактнаяИнформация.Вид = &Вид";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьТелефонСтрокой()

Функция ПолучитьАдресСтрокой(Объект, ВидАдреса) Экспорт
	
	ЗапросАдреса = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                            |	КонтактнаяИнформация.Представление,
	                            |	КонтактнаяИнформация.Объект,
	                            |	КонтактнаяИнформация.Тип,
	                            |	КонтактнаяИнформация.Вид,
	                            |	КонтактнаяИнформация.Поле1,
	                            |	КонтактнаяИнформация.Поле2,
	                            |	КонтактнаяИнформация.Поле3,
	                            |	КонтактнаяИнформация.Поле4,
	                            |	КонтактнаяИнформация.Поле5,
	                            |	КонтактнаяИнформация.Поле6,
	                            |	КонтактнаяИнформация.Поле7,
	                            |	КонтактнаяИнформация.Поле8,
	                            |	КонтактнаяИнформация.Поле9,
	                            |	КонтактнаяИнформация.Поле10
	                            |ИЗ
	                            |	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	                            |ГДЕ
	                            |	КонтактнаяИнформация.Объект = &Объект
	                            |	И КонтактнаяИнформация.Тип = &Тип
	                            |	И КонтактнаяИнформация.Вид = &Вид");
	
	ЗапросАдреса.УстановитьПараметр("Объект", Объект);
	ЗапросАдреса.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	ЗапросАдреса.УстановитьПараметр("Вид", Справочники.ВидыКонтактнойИнформации[ВидАдреса]);
	
	Выборка = ЗапросАдреса.Выполнить().Выбрать();
	
	СтрокаАдреса = "";
	
	Если Выборка.Следующий() Тогда
		
		СтрокаАдреса = СтрокаАдреса + Выборка.Поле1 + Символы.ПС; // индекс
		
		//Регион
		Регион = Выборка.Поле2;
		Регион_Имя = ОбрезатьСокращение(Регион);
		Регион_Сокр = СокрЛП(СтрЗаменить(Регион, Регион_Имя, ""));
		
		СтрокаАдреса = СтрокаАдреса + Регион_Имя + Символы.ПС;
		СтрокаАдреса = СтрокаАдреса + Регион_Сокр + Символы.ПС;
		
		//Район
		Район = Выборка.Поле3;
		Район_Имя = ОбрезатьСокращение(Район);
		Район_Сокр = СокрЛП(СтрЗаменить(Район, Район_Имя, ""));
		
		СтрокаАдреса = СтрокаАдреса + Район_Имя + Символы.ПС;
		СтрокаАдреса = СтрокаАдреса + Район_Сокр + Символы.ПС;
		
		//Город
		Город = Выборка.Поле4;
		Город_Имя = ОбрезатьСокращение(Город);
		Город_Сокр = СокрЛП(СтрЗаменить(Город, Город_Имя, ""));
		
		СтрокаАдреса = СтрокаАдреса + Город_Имя + Символы.ПС;
		СтрокаАдреса = СтрокаАдреса + Город_Сокр + Символы.ПС;
		
		//Населенный пункт
		НаселенныйПункт = Выборка.Поле5;
		НаселенныйПункт_Имя = ОбрезатьСокращение(НаселенныйПункт);
		НаселенныйПункт_Сокр = СокрЛП(СтрЗаменить(НаселенныйПункт, НаселенныйПункт_Имя, ""));
		
		СтрокаАдреса = СтрокаАдреса + НаселенныйПункт_Имя + Символы.ПС;
		СтрокаАдреса = СтрокаАдреса + НаселенныйПункт_Сокр + Символы.ПС;
		
		//Улица
		Улица = Выборка.Поле6;
		Улица_Имя = ОбрезатьСокращение(Улица);
		Улица_Сокр = СокрЛП(СтрЗаменить(Улица, Улица_Имя, ""));
		
		СтрокаАдреса = СтрокаАдреса + Улица_Имя + Символы.ПС;
		СтрокаАдреса = СтрокаАдреса + Улица_Сокр + Символы.ПС;
		
		//Дом
		СтрокаАдреса = СтрокаАдреса + Выборка.Поле7 + Символы.ПС;
		
		//Корпус
		СтрокаАдреса = СтрокаАдреса + Выборка.Поле8 + Символы.ПС;
		
		//Квартира
		СтрокаАдреса = СтрокаАдреса + Выборка.Поле9;
		
	КонецЕсли;
	
	Возврат СтрокаАдреса;
	
КонецФункции


// УРОВЕНЬ ПРЕДСТАВЛЕНИЯ
Функция ДобавитьОткрытиеСчета(ФизЛицо, ВидВклада, СтрокаЗаявки) Экспорт
	ЭмбоссированныйТекст1 = СтрокаЗаявки.ЭмбоссированныйТекст1;
	ЭмбоссированныйТекст2 = СтрокаЗаявки.ЭмбоссированныйТекст2;
	ЭмбоссированныйТекст3 = СтрокаЗаявки.ЭмбоссированныйТекст3;
	ДлинаЭмбТекста = СтрДлина(ЭмбоссированныйТекст1 + ЭмбоссированныйТекст2 + ЭмбоссированныйТекст3);
	Если ДлинаЭмбТекста > 19 Тогда
		ЭмбоссированныйТекст3 = ?(СтрДлина(ЭмбоссированныйТекст1 + ЭмбоссированныйТекст2) >=19, "", ЛЕВ(ЭмбоссированныйТекст3, 19 - СтрДлина(ЭмбоссированныйТекст1 + ЭмбоссированныйТекст2)));
		ДлинаЭмбТекста = СтрДлина(ЭмбоссированныйТекст1 + ЭмбоссированныйТекст2 + ЭмбоссированныйТекст3);
		Если ДлинаЭмбТекста > 19 Тогда
			ЭмбоссированныйТекст2 = ?(СтрДлина(ЭмбоссированныйТекст1 + ЭмбоссированныйТекст3) >=19, "", ЛЕВ(ЭмбоссированныйТекст2, 19 - СтрДлина(ЭмбоссированныйТекст1 + ЭмбоссированныйТекст3)));
		КонецЕсли;
	КонецЕсли;
	
	КонтрольнаяИнформация = СтрокаЗаявки.КонтрольнаяИнформация;
	
	
	ЛицевойСчет = ПолучитьЛицевойСчет(ФизЛицо, Организация, Банк);
	Если ЛицевойСчет <> Неопределено Тогда
		СообщитьОбОшибкеОбработки("Формирование данных для экспорта:", "Для " + ФизЛицо.Наименование + " нельзя открыть лицевой счет - он уже открыт!");
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаТЧ = ОткрытиеСчетов.Добавить();
	СтрокаТЧ.Сотрудник = ФизЛицо;
	СтрокаТЧ.ВидВклада = ВидВклада;
	СтрокаТЧ.УдостоверениеЛичности = ПолучитьУдостоверениеЛичностиСтрокой(ФизЛицо);
	СтрокаТЧ.ДатаРождения = ФизЛицо.ДатаРождения;
	
	Если ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Мужской Тогда
		СтрокаТЧ.Пол = "м";
	ИначеЕсли ФизЛицо.Пол = Перечисления.ПолФизическихЛиц.Женский Тогда
		СтрокаТЧ.Пол = "ж";
	Иначе
		СтрокаТЧ.Пол = "";
	КонецЕсли;
	
	СтрокаТЧ.АдресМестаРаботы = ПолучитьАдресСтрокой(Организация, "ФактАдресОрганизации");
	СтрокаТЧ.АдресПрописки = ПолучитьАдресСтрокой(ФизЛицо, "ЮрАдресФизЛица");
	СтрокаТЧ.АдресПроживания = ПолучитьАдресСтрокой(ФизЛицо, "ФактАдресФизЛица");
	СтрокаТЧ.РабочийТелефон = ПолучитьТелефонСтрокой(ФизЛицо, "ТелефонСлужебныйФизЛица");
	СтрокаТЧ.ДомашнийТелефон = ПолучитьТелефонСтрокой(ФизЛицо, "ТелефонФизЛица");
	СтрокаТЧ.ЭмбоссированныйТекст1 = СокрЛП(ЭмбоссированныйТекст1);
	СтрокаТЧ.ЭмбоссированныйТекст2 = СокрЛП(ЭмбоссированныйТекст2);
	СтрокаТЧ.ЭмбоссированныйТекст3 = СокрЛП(ЭмбоссированныйТекст3);
	СтрокаТЧ.КонтрольнаяИнформация = КонтрольнаяИнформация;
	СтрокаТЧ.Сумма = СтрокаЗаявки.Сумма;
	
	// Необязательные реквизиты:
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.РабочийТелефон) Тогда
		СтрокаТЧ.РабочийТелефон = СтрокаЗаявки.РабочийТелефон;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДомашнийТелефон) Тогда
		СтрокаТЧ.ДомашнийТелефон = СтрокаЗаявки.ДомашнийТелефон;
	КонецЕсли;
	СтрокаТЧ.Резидент = СтрокаЗаявки.Резидент;
	СтрокаТЧ.Гражданство = СтрокаЗаявки.Гражданство;
	СтрокаТЧ.Должность = СтрокаЗаявки.Должность;
	СтрокаТЧ.ПризнакЗарплатный = СтрокаЗаявки.ПризнакЗарплатный;
	СтрокаТЧ.КатегорияНаселения = СтрокаЗаявки.КатегорияНаселения;
	СтрокаТЧ.БонусУчастника = СтрокаЗаявки.БонусУчастника;
	СтрокаТЧ.ТарифСледующийГод = СтрокаЗаявки.ТарифСледующийГод;
	СтрокаТЧ.ТарифТекущийГод = СтрокаЗаявки.ТарифТекущийГод;
	СтрокаТЧ.БонусПрограмма = СтрокаЗаявки.БонусПрограмма;
	СтрокаТЧ.ПризнакРассылки = СтрокаЗаявки.ПризнакРассылки;
	СтрокаТЧ.ИнтернетАдрес = СтрокаЗаявки.ИнтернетАдрес;
	СтрокаТЧ.СчетДебета = СтрокаЗаявки.СчетДебета;
	СтрокаТЧ.МобильныйТелефон = СтрокаЗаявки.МобильныйТелефон;
	СтрокаТЧ.ОператорСвязи = СтрокаЗаявки.ОператорСвязи;
	СтрокаТЧ.МобильныйБанк = СтрокаЗаявки.МобильныйБанк;
	СтрокаТЧ.ПередачаБКИ = СтрокаЗаявки.ПередачаБКИ;
	
КонецФункции

Функция ДобавитьЗачислениеЗарплаты(ФизЛицо, Сумма, ЛицевойСчет = Неопределено) Экспорт
	
	Если ЛицевойСчет = Неопределено Тогда
		ЛицевойСчет = ПолучитьЛицевойСчет(ФизЛицо, Организация, Банк);
		Если ЛицевойСчет = Неопределено Тогда
			СообщитьОбОшибкеОбработки("Формирование данных для экспорта:", "Не найден лицевой счет для " + ФизЛицо.Наименование);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТЧ = ЗачислениеЗарплаты.Добавить();
	СтрокаТЧ.Сотрудник = ФизЛицо;
	СтрокаТЧ.ЛицевойСчет = ЛицевойСчет;
	СтрокаТЧ.Сумма = Сумма;
	
	
КонецФункции

Функция ЭкспортироватьДанные(НомерОтправки, Отделение, ИмяФайла = Неопределено) Экспорт
	
	// Создаем дерево экспорта
	ДеревоЭкспорта = СоздатьДеревоЭкспорта();
	
	// Заполняем дерево параметрами сеанса
	СчетаПК = СоздатьСчетаПК(ДеревоЭкспорта);
	
	КоличествоЗаписей = 0;
	СуммаИтого = 0;
	Операция = "n";
	
	// Заполняем дерево элементами ОткрытиеСчетов
	
	Если ОткрытиеСчетов.Количество() > 0 Тогда
		
	    Ветка = ДобавитьЭлемент(СчетаПК, "ОткрытиеСчетов");
		ДобавитьОткрытиеСчетаСотрудника(Ветка, ОткрытиеСчетов);
		КоличествоЗаписей = КоличествоЗаписей + ОткрытиеСчетов.Количество();
		СуммаИтого = СуммаИтого + ОткрытиеСчетов.Итог("Сумма");;
		Операция = "o";
		
	КонецЕсли;
	
	Если ЗачислениеЗарплаты.Количество() > 0 Тогда
		ВеткаЗЗ = ДобавитьЭлемент(СчетаПК, "ЗачислениеЗарплаты");
		
		ДобавитьЗачислениеЗарплатыСотрудника(ВеткаЗЗ, ЗачислениеЗарплаты);
		
		КоличествоЗаписей = КоличествоЗаписей + ЗачислениеЗарплаты.Количество();
		СуммаИтого = СуммаИтого + ЗачислениеЗарплаты.Итог("Сумма");
		Операция = "z";
	КонецЕсли;
	
	ДобавитьКонтрольныеСуммы(СчетаПК, КоличествоЗаписей, СуммаИтого);
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = КаталогЭкспортаДанных + "\" + ПолучитьИмяФайлаЭкспортаВформатеСбербанка(НомерОтправки, Отделение, Операция);
		ПредПоток = Новый ЗаписьТекста(ИмяФайла);
		ПредПоток.Записать("");
		ПредПоток.Закрыть();
	КонецЕсли;
	
	ПотокXMLСчетаПК = СоздатьНовыйПотокXMLСчетаПК();
	Если ПотокXMLСчетаПК = Неопределено Тогда
		Сообщить("Экспорт операции отменен!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ЗаписатьУзелДереваВXML(СчетаПК, ПотокXMLСчетаПК);
	ЗакрытьПотокXMLСчетаПК(ПотокXMLСчетаПК);
	ТекстXML = ПотокXMLСчетаПК.Закрыть();
	Возврат ЗаписатьТесктНаДиск(ТекстXML, ИмяФайла);
	
КонецФункции


// ФОРМИРОВАНИЕ ЭЛЕМЕНТОВ ВЕРХНЕГО УРОВНЯ

Функция СоздатьСчетаПК(ДеревоЭкспорта) Экспорт
	
	ОсновнойУзел = ДеревоЭкспорта.Строки.Добавить();
	ОсновнойУзел.Имя = "СчетаПК";
	ОсновнойУзел.Значение = "";
	ОсновнойУзел.ЭтоАтрибут = Ложь;
	
	//// У некоторых отделений сбербанка не проходит проверку файл из-за присутствия этих атрибутов.
	//ДобавитьАтрибут(ОсновнойУзел, "xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
	//ДобавитьАтрибут(ОсновнойУзел, "xsi:noNamespaceSchemaLocation" ,"Wages.xsd");
	
	ДобавитьАтрибут(ОсновнойУзел, "ДатаФормирования", ПолучитьДатуXML(ДатаФормирования));
	ДобавитьАтрибут(ОсновнойУзел, "НомерДоговора", НомерДоговора);
	ДобавитьАтрибут(ОсновнойУзел, "НаименованиеОрганизации", СтрЗаменить(НаименованиеОрганизации, """","'" ));
	ДобавитьАтрибут(ОсновнойУзел, "ИНН", ИНН);
	ДобавитьАтрибут(ОсновнойУзел, "РасчетныйСчетОрганизации", РасчетныйСчетОрганизации);
	ДобавитьАтрибут(ОсновнойУзел, "БИК", Банк.Код);
	ДобавитьАтрибут(ОсновнойУзел, "ИдПервичногоДокумента", ИдНомерДокумента);
	Если ЗначениеЗаполнено(НомерРеестра) И ЗначениеЗаполнено(ДатаРеестра) Тогда
		ДобавитьАтрибут(ОсновнойУзел, "НомерРеестра", НомерРеестра);
		ДобавитьАтрибут(ОсновнойУзел, "ДатаРеестра", ПолучитьДатуXML(ДатаРеестра));
	КонецЕсли;
	Возврат ОсновнойУзел;
	
КонецФункции

Функция ДобавитьОткрытиеСчетаСотрудника(Ветка, СтруктураОткрытиеСчетов) Экспорт
	Для Каждого СтрокаОткрытие Из СтруктураОткрытиеСчетов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОткрытие.Сотрудник) Тогда 
			СообщитьОбОшибкеОбработки("Формирование данных на открытие счетов", "Не указано физ лицо для открытия счета");
			Возврат Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОткрытиеСчетов", СтруктураОткрытиеСчетов);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаФормирования);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОткрытиеСчетов.Сотрудник КАК ФизЛицо,
	|	ОткрытиеСчетов.НомерСтроки,
	|	ОткрытиеСчетов.ВидВклада,
	|	ОткрытиеСчетов.Должность,
	|	ОткрытиеСчетов.АдресПроживания,
	|	ОткрытиеСчетов.АдресПрописки,
	|	ОткрытиеСчетов.РабочийТелефон,
	|	ОткрытиеСчетов.ДомашнийТелефон,
	|	ОткрытиеСчетов.Сумма,
	|	ОткрытиеСчетов.ЭмбоссированныйТекст1,
	|	ОткрытиеСчетов.ЭмбоссированныйТекст2,
	|	ОткрытиеСчетов.ЭмбоссированныйТекст3,
	|	ОткрытиеСчетов.ПризнакЗарплатный,
	|	ОткрытиеСчетов.Гражданство,
	|	ОткрытиеСчетов.КатегорияНаселения,
	|	ОткрытиеСчетов.БонусУчастника,
	|	ОткрытиеСчетов.БонусПрограмма,
	|	ОткрытиеСчетов.ПризнакРассылки,
	|	ОткрытиеСчетов.ИнтернетАдрес,
	|	ОткрытиеСчетов.СчетДебета,
	|	ОткрытиеСчетов.МобильныйТелефон,
	|	ОткрытиеСчетов.ОператорСвязи,
	|	ОткрытиеСчетов.МобильныйБанк,
	|	ОткрытиеСчетов.ПередачаБКИ,
	|	ОткрытиеСчетов.КонтрольнаяИнформация,
	|	ОткрытиеСчетов.ТарифСледующийГод,
	|	ОткрытиеСчетов.ТарифТекущийГод
	|ПОМЕСТИТЬ ВТОткрытиеСчетов
	|ИЗ
	|	&ТаблицаОткрытиеСчетов КАК ОткрытиеСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Наименование,
	|	ВТОткрытиеСчетов.ФизЛицо,
	|	ВТОткрытиеСчетов.НомерСтроки КАК НомерСтроки,
	|	ВТОткрытиеСчетов.ВидВклада,
	|	ВТОткрытиеСчетов.АдресПроживания,
	|	ВТОткрытиеСчетов.АдресПрописки,
	|	ВТОткрытиеСчетов.РабочийТелефон,
	|	ВТОткрытиеСчетов.ДомашнийТелефон,
	|	ВТОткрытиеСчетов.Сумма,
	|	ВТОткрытиеСчетов.ЭмбоссированныйТекст1,
	|	ВТОткрытиеСчетов.ЭмбоссированныйТекст2,
	|	ВТОткрытиеСчетов.ЭмбоссированныйТекст3,
	|	ВТОткрытиеСчетов.ПризнакЗарплатный,
	|	ВТОткрытиеСчетов.КатегорияНаселения,
	|	ВТОткрытиеСчетов.БонусУчастника,
	|	ВТОткрытиеСчетов.БонусПрограмма,
	|	ВТОткрытиеСчетов.ПризнакРассылки,
	|	ВТОткрытиеСчетов.ИнтернетАдрес,
	|	ВТОткрытиеСчетов.СчетДебета,
	|	ВТОткрытиеСчетов.МобильныйТелефон,
	|	ВТОткрытиеСчетов.ОператорСвязи,
	|	ВТОткрытиеСчетов.МобильныйБанк,
	|	ВТОткрытиеСчетов.ПередачаБКИ,
	|	ВТОткрытиеСчетов.КонтрольнаяИнформация,
	|	ВТОткрытиеСчетов.ТарифСледующийГод,
	|	ВТОткрытиеСчетов.ТарифТекущийГод,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.КодИМНС,
	|	ФизическиеЛица.Комментарий,
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ФизическиеЛица.МестоРождения,
	|	ФизическиеЛица.Пол,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, ФизическиеЛица.Наименование) КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид, """") КАК ДокументВид,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия, """") КАК ДокументСерия,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер, """") КАК ДокументНомер,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи, """") КАК ДокументДатаВыдачи,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан, """") КАК ДокументКемВыдан,
	|	ЕСТЬNULL(ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения, """") КАК ДокументКодПодразделения,
	|	ВЫБОР
	|		КОГДА СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.Статус ЕСТЬ NULL 
	|				ИЛИ СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ""true""
	|		ИНАЧЕ ""false""
	|	КОНЕЦ КАК Резидент,
	|	ВЫБОР
	|		КОГДА (НЕ ГражданствоФизЛицСрезПоследних.Страна ЕСТЬ NULL )
	|			ТОГДА ГражданствоФизЛицСрезПоследних.Страна
	|		ИНАЧЕ ВТОткрытиеСчетов.Гражданство
	|	КОНЕЦ КАК Гражданство,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВТОткрытиеСчетов.Должность <> """"
	|				ТОГДА ВТОткрытиеСчетов.Должность
	|			ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|		КОНЕЦ, """") КАК Должность
	|ИЗ
	|	ВТОткрытиеСчетов КАК ВТОткрытиеСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО ВТОткрытиеСчетов.ФизЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТОткрытиеСчетов.ФизЛицо
	|					ИЗ
	|						ВТОткрытиеСчетов)) КАК ФИОФизЛицСрезПоследних
	|		ПО ВТОткрытиеСчетов.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(
	|				,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТОткрытиеСчетов.ФизЛицо
	|					ИЗ
	|						ВТОткрытиеСчетов)) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ВТОткрытиеСчетов.ФизЛицо = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(
	|				&ДатаСреза,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТОткрытиеСчетов.ФизЛицо
	|					ИЗ
	|						ВТОткрытиеСчетов)) КАК СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних
	|		ПО ВТОткрытиеСчетов.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц.СрезПоследних(
	|				&ДатаСреза,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТОткрытиеСчетов.ФизЛицо
	|					ИЗ
	|						ВТОткрытиеСчетов)) КАК ГражданствоФизЛицСрезПоследних
	|		ПО ВТОткрытиеСчетов.ФизЛицо = ГражданствоФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				&ДатаСреза,
	|				Сотрудник.ФизЛицо В
	|						(ВЫБРАТЬ
	|							ВТОткрытиеСчетов.ФизЛицо
	|						ИЗ
	|							ВТОткрытиеСчетов)
	|					И Организация = &ГоловнаяОрганизация
	|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацийСрезПоследних
	|		ПО ВТОткрытиеСчетов.ФизЛицо = РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо
	|			И (РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	АдресОрганизации = ПолучитьАдресСтрокой(Организация, "ФактАдресОрганизации");
	
	Пока Выборка.Следующий() Цикл
		
		
		УзелОС = ДобавитьСотрудникаВДеревоЭкспорта(Ветка, Выборка.НомерСтроки, Выборка.Фамилия, Выборка.Имя, Выборка.Отчество, ОтделениеБанка, ФилиалОтделенияБанка);
		
		// Наименование карточного продукта, Например: Visa Classic, EC/MC Mass. Возможные значения определяются в договоре
		КоличествоСтрокВВидеВклада = СтрЧислоСтрок(Выборка.ВидВклада);
		
		Если КоличествоСтрокВВидеВклада > 0 Тогда
			ВидВкладаСтрокой = СтрПолучитьСтроку(Выборка.ВидВклада, 1);
		Иначе
			ВидВкладаСтрокой = "";
		КонецЕсли;
		
		Если КоличествоСтрокВВидеВклада > 1 Тогда
			КодВида = СтрПолучитьСтроку(Выборка.ВидВклада, 2);
		Иначе
			КодВида = "";
		КонецЕсли;
		
		Если КоличествоСтрокВВидеВклада > 2 Тогда
			КодПодВида = СтрПолучитьСтроку(Выборка.ВидВклада, 3);
		Иначе
			КодПодВида = "";
		КонецЕсли;
		
		Если КоличествоСтрокВВидеВклада > 3 Тогда
			КодВалюты = СтрПолучитьСтроку(Выборка.ВидВклада, 4);
		Иначе
			КодВалюты = "";
		КонецЕсли;
		
		ЛистВидаВклада = ДобавитьЭлемент(УзелОС, "ВидВклада", ВидВкладаСтрокой);
		ДобавитьАтрибут(ЛистВидаВклада, "КодВидаВклада", КодВида);
		ДобавитьАтрибут(ЛистВидаВклада, "КодПодвидаВклада", КодПодВида);
		ДобавитьАтрибут(ЛистВидаВклада, "КодВалюты", КодВалюты);
		
		// Документ, удостоверяющий личность
		ДобавитьУдЛичностиВДеревоЭкспорта(УзелОС, "УдостоверениеЛичности", Выборка.ДокументВид, Выборка.ДокументСерия, Выборка.ДокументНомер, Выборка.ДокументДатаВыдачи, СокрЛП(Выборка.ДокументКемВыдан), Выборка.ДокументКодПодразделения);
		
		// ДатаРождения
		ДобавитьЭлемент(УзелОС, "ДатаРождения", "" + ПолучитьДатуXML(Выборка.ДатаРождения));
		
		// Пол
		ДобавитьЭлемент(УзелОС, "Пол", ?(Выборка.Пол = Перечисления.ПолФизическихЛиц.Женский, "Ж", "М"));
		
		
		// АдресМестаРаботы
		ДобавитьАдресВДеревоЭкспорта(УзелОС, "АдресМестаРаботы", СтрПолучитьСтроку(АдресОрганизации,1), "Российская Федерация",,,
		СтрПолучитьСтроку(АдресОрганизации,2),
		СтрПолучитьСтроку(АдресОрганизации,3),
		СтрПолучитьСтроку(АдресОрганизации,4),
		СтрПолучитьСтроку(АдресОрганизации,5),
		СтрПолучитьСтроку(АдресОрганизации,6),
		СтрПолучитьСтроку(АдресОрганизации,7),
		СтрПолучитьСтроку(АдресОрганизации,8),
		СтрПолучитьСтроку(АдресОрганизации,9),
		СтрПолучитьСтроку(АдресОрганизации,10),
		СтрПолучитьСтроку(АдресОрганизации,11),
		СтрПолучитьСтроку(АдресОрганизации,12),
		СтрПолучитьСтроку(АдресОрганизации,13),
		СтрПолучитьСтроку(АдресОрганизации,14));
		
		Если ФорматФайлаобмена = ФорматФайла3 И ЗначениеЗаполнено(Выборка.Должность) Тогда
			ДобавитьЭлемент(УзелОС, "Должность", Выборка.Должность);
		КонецЕсли;
		
		// Место рождения
		ДобавитьМестоРожденияВДеревоЭкспорта(УзелОС, Выборка.МестоРождения);
		
		// Адрес прописки
		Если НЕ ПустаяСтрока(СтрЗаменить(Выборка.АдресПрописки, Символы.ПС, "")) Тогда
			АдресПрописки = Выборка.АдресПрописки;
			ДобавитьАдресВДеревоЭкспорта(УзелОС, "АдресПрописки", СтрПолучитьСтроку(АдресПрописки, 1), "Российская Федерация",,,
			СтрПолучитьСтроку(АдресПрописки, 2),
			СтрПолучитьСтроку(АдресПрописки, 3),
			СтрПолучитьСтроку(АдресПрописки, 4),
			СтрПолучитьСтроку(АдресПрописки, 5),
			СтрПолучитьСтроку(АдресПрописки, 6),
			СтрПолучитьСтроку(АдресПрописки, 7),
			СтрПолучитьСтроку(АдресПрописки, 8),
			СтрПолучитьСтроку(АдресПрописки, 9),
			СтрПолучитьСтроку(АдресПрописки, 10),
			СтрПолучитьСтроку(АдресПрописки, 11),
			СтрПолучитьСтроку(АдресПрописки, 12),
			СтрПолучитьСтроку(АдресПрописки, 13),
			СтрПолучитьСтроку(АдресПрописки, 14));
		КонецЕсли;		
		
		// Адрес проживания
		Если НЕ ПустаяСтрока(СтрЗаменить(Выборка.АдресПроживания, Символы.ПС, "")) Тогда
			АдресПроживания = Выборка.АдресПроживания;
			ДобавитьАдресВДеревоЭкспорта(УзелОС, "АдресПроживания", СтрПолучитьСтроку(АдресПроживания, 1), "Российская Федерация",,,
			СтрПолучитьСтроку(АдресПроживания, 2),
			СтрПолучитьСтроку(АдресПроживания, 3),
			СтрПолучитьСтроку(АдресПроживания, 4),
			СтрПолучитьСтроку(АдресПроживания, 5),
			СтрПолучитьСтроку(АдресПроживания, 6),
			СтрПолучитьСтроку(АдресПроживания, 7),
			СтрПолучитьСтроку(АдресПроживания, 8),
			СтрПолучитьСтроку(АдресПроживания, 9),
			СтрПолучитьСтроку(АдресПроживания, 10),
			СтрПолучитьСтроку(АдресПроживания, 11),
			СтрПолучитьСтроку(АдресПроживания, 12),
			СтрПолучитьСтроку(АдресПроживания, 13),
			СтрПолучитьСтроку(АдресПроживания, 14));
		КонецЕсли;
		
		// Рабочий телефон
		Если НЕ ПустаяСтрока(Выборка.РабочийТелефон) Тогда
			ДобавитьЭлемент(УзелОС, "РабочийТелефон", Лев(СокрЛП(Выборка.РабочийТелефон),60));
		КонецЕсли;
		
		// Домашний телефон
		Если НЕ ПустаяСтрока(Выборка.ДомашнийТелефон) Тогда
			ДобавитьЭлемент(УзелОС, "ДомашнийТелефон", Лев(СокрЛП(Выборка.ДомашнийТелефон), 30));
		КонецЕсли;
		
		// ЭмбоссированныйТекст
		ДобавитьЭмбосированныйТекстВДеревоЭкспорта(УзелОС, "ЭмбоссированныйТекст", Выборка.ЭмбоссированныйТекст1, Выборка.ЭмбоссированныйТекст2, Выборка.ЭмбоссированныйТекст3);
		
		// Сумма
		ДобавитьЭлемент(УзелОС, "Сумма", Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧГ=0"));
		
		
		Если ФорматФайлаобмена = ФорматФайла3 Тогда
			Если ЗначениеЗаполнено(КодВалюты) Тогда
				ДобавитьЭлемент(УзелОС, "КодВалюты", КодВалюты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.ПризнакЗарплатный) Тогда
				ДобавитьЭлемент(УзелОС, "ПризнакЗарплатный", Выборка.ПризнакЗарплатный);
			КонецЕсли;
			
			
			// Резидент
			ДобавитьЭлемент(УзелОС, "Резидент",  Выборка.Резидент);
			
			// Гражданство
			Если ЗначениеЗаполнено(Выборка.Гражданство) Тогда
				ДобавитьЭлемент(УзелОС, "Гражданство", Выборка.Гражданство);
			КонецЕсли;
			
			// Категория населения
			ДобавитьЭлемент(УзелОС, "КатегорияНаселения", Выборка.КатегорияНаселения);
			
			// Бонус участника
			Если ЗначениеЗаполнено(Выборка.БонусУчастника) Тогда
				ДобавитьЭлемент(УзелОС, "БонусУчастника", Выборка.БонусУчастника);
			КонецЕсли;
			
			// Тариф следующий год
			Если ЗначениеЗаполнено(Выборка.ТарифСледующийГод) Тогда
				ДобавитьЭлемент(УзелОС, "ТарифСледующийГод", Выборка.ТарифСледующийГод);
			КонецЕсли;
			
			// Тариф текущий год
			Если ЗначениеЗаполнено(Выборка.ТарифТекущийГод) Тогда
				ДобавитьЭлемент(УзелОС, "ТарифТекущийГод", Выборка.ТарифТекущийГод);
			КонецЕсли;
			
			// Бонус программа
			Если ЗначениеЗаполнено(Выборка.БонусПрограмма) Тогда
				ДобавитьЭлемент(УзелОС, "БонусПрограмма", Выборка.БонусПрограмма);
			КонецЕсли;
			
			// Признак рассылки
			Если ЗначениеЗаполнено(Выборка.ПризнакРассылки) Тогда
				ДобавитьЭлемент(УзелОС, "ПризнакРассылки", Выборка.ПризнакРассылки);
			КонецЕсли;
			
			// Интернет адрес
			Если ЗначениеЗаполнено(Выборка.ИнтернетАдрес) Тогда
				ДобавитьЭлемент(УзелОС, "ИнтернетАдрес", Выборка.ИнтернетАдрес);
			КонецЕсли;
			
			// Счет дебета
			Если ЗначениеЗаполнено(Выборка.СчетДебета) Тогда
				ДобавитьЭлемент(УзелОС, "СчетДебета", Выборка.СчетДебета);
			КонецЕсли;
			
			// Мобильный телефон
			Если ЗначениеЗаполнено(Выборка.МобильныйТелефон) Тогда
				ДобавитьЭлемент(УзелОС, "МобильныйТелефон", Выборка.МобильныйТелефон);
			КонецЕсли;
			
			// Оператор Связи
			Если ЗначениеЗаполнено(Выборка.ОператорСвязи) Тогда
				ДобавитьЭлемент(УзелОС, "ОператорСвязи", Выборка.ОператорСвязи);
			КонецЕсли;
			
			// Мобильный банк
			Если ЗначениеЗаполнено(Выборка.МобильныйБанк) Тогда
				ДобавитьЭлемент(УзелОС, "МобильныйБанк", Выборка.МобильныйБанк);
			КонецЕсли;
			
			// Передача БКИ
			ДобавитьЭлемент(УзелОС, "ПередачаБКИ", ?(Выборка.ПередачаБКИ, "true", "false"));
			
			// КонтрольнаяИнформация
			ДобавитьЭлемент(УзелОС, "КонтрольнаяИнформация", Выборка.КонтрольнаяИнформация);
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Функция ДобавитьЗачислениеЗарплатыСотрудника(Ветка, СтруктураЗачислениеЗарплаты) Экспорт
	
	Для Каждого СтрокаЗачислениеЗарплаты ИЗ СтруктураЗачислениеЗарплаты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаЗачислениеЗарплаты.Сотрудник) Тогда 
			СообщитьОбОшибкеОбработки("Формирование данных на перечисление ЗП", "Не указано физ лицо для перечисления ЗП");
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаЗачислениеЗарплаты", СтруктураЗачислениеЗарплаты);
	
	
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗарплаты.Сотрудник КАК ФизЛицо,
	               |	ТаблицаЗарплаты.ЛицевойСчет,
	               |	ТаблицаЗарплаты.Сумма,
	               |	ТаблицаЗарплаты.НомерСтроки
	               |ПОМЕСТИТЬ ВТЗачислениеЗарплаты
	               |ИЗ
	               |	&ТаблицаЗачислениеЗарплаты КАК ТаблицаЗарплаты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТЗачислениеЗарплаты.ФизЛицо,
	               |	ВТЗачислениеЗарплаты.ЛицевойСчет,
	               |	ВТЗачислениеЗарплаты.Сумма,
	               |	ВТЗачислениеЗарплаты.НомерСтроки КАК НомерСтроки,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, ФизическиеЛица.Наименование) КАК Фамилия,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество
	               |ИЗ
	               |	ВТЗачислениеЗарплаты КАК ВТЗачислениеЗарплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	               |				,
	               |				ФизЛицо В
	               |					(ВЫБРАТЬ
	               |						ВТЗачислениеЗарплаты.ФизЛицо
	               |					ИЗ
	               |						ВТЗачислениеЗарплаты)) КАК ФИОФизЛицСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	               |			ПО ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
	               |		ПО ВТЗачислениеЗарплаты.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НомерСтроки";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		// Добавляем сотрудника	
		УзелОС = ДобавитьСотрудникаВДеревоЭкспорта(Ветка, Выборка.НомерСтроки, Выборка.Фамилия, Выборка.Имя, Выборка.Отчество, ОтделениеБанка, ФилиалОтделенияБанка);
		
		ФорматированныйЛицевойСчет = Выборка.ЛицевойСчет;
		Пока СтрДлина(ФорматированныйЛицевойСчет) < 20 Цикл
			ФорматированныйЛицевойСчет = " " + ФорматированныйЛицевойСчет;
		КонецЦикла;
		
		// Лицевой счет
		ДобавитьЭлемент(УзелОС, "ЛицевойСчет", ФорматированныйЛицевойСчет);
		
		// Сумма
		ДобавитьЭлемент(УзелОС, "Сумма", Формат(Выборка.Сумма, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧГ=0"));
		
	КонецЦикла;
	
	
КонецФункции

Функция ДобавитьКонтрольныеСуммы(ВеткаДерева, КоличествоЗаписей, СуммаИтого) Экспорт
	
	УзелКС = ДобавитьЭлемент(ВеткаДерева, "КонтрольныеСуммы");
	
	ДобавитьЭлемент(УзелКС, "КоличествоЗаписей", КоличествоЗаписей);
	ДобавитьЭлемент(УзелКС, "СуммаИтого", Формат(СуммаИтого, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=; ЧГ=0"));
	
	Возврат УзелКС;
	
КонецФункции


// ФОРМИРОВАНИЕ ЭЛЕМЕНТОВ НИЖНЕГО УРОВНЯ

Функция ДобавитьСотрудникаВДеревоЭкспорта(лВетка, лНпп, лФамилия, лИмя, лОтчество, лОтделениеБанка, лФилиалОтделенияБанка) Экспорт
	
	ВеткаСотрудника = ДобавитьЭлемент(лВетка, "Сотрудник");
	ДобавитьАтрибут(ВеткаСотрудника, "Нпп", лНпп);
	
	ДобавитьЭлемент(ВеткаСотрудника, "Фамилия", лФамилия);
	ДобавитьЭлемент(ВеткаСотрудника, "Имя", лИмя);
	Если НЕ (ФорматФайлаобмена = ФорматФайла3 И лОтчество = "") Тогда
		ДобавитьЭлемент(ВеткаСотрудника, "Отчество", лОтчество);
	КонецЕсли;
	Если Не ПустаяСтрока(лОтделениеБанка) Тогда
		ДобавитьЭлемент(ВеткаСотрудника, "ОтделениеБанка", лОтделениеБанка);
	КонецЕсли;
	Если Не ПустаяСтрока(лФилиалОтделенияБанка) Тогда
		ДобавитьЭлемент(ВеткаСотрудника, "ФилиалОтделенияБанка", лФилиалОтделенияБанка);
	КонецЕсли;
	
	Возврат ВеткаСотрудника;
	
КонецФункции

Функция ДобавитьМестоРожденияВДеревоЭкспорта(ВеткаДерева, СтрокаМестоРождения)
	СтруктураМестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(СтрокаМестоРождения);
	ВеткаМестоРождения = ДобавитьЭлемент(ВеткаДерева, "МестоРождения");
	Если Не ПустаяСтрока(СтруктураМестоРождения.Страна) Тогда
		ДобавитьЭлемент(ДобавитьЭлемент(ВеткаМестоРождения, "Страна"), "СтранаНазвание", СтруктураМестоРождения.Страна);
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураМестоРождения.Область) Тогда
		ДобавитьЭлемент(ДобавитьЭлемент(ВеткаМестоРождения, "Регион"), "РегионНазвание", СтруктураМестоРождения.Область);
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураМестоРождения.Район) Тогда
		ДобавитьЭлемент(ДобавитьЭлемент(ВеткаМестоРождения, "Район"), "РайонНазвание", СтруктураМестоРождения.Район);
	КонецЕсли;
	Если Не ПустаяСтрока(СтруктураМестоРождения.НаселенныйПункт) Тогда
		ДобавитьЭлемент(ДобавитьЭлемент(ВеткаМестоРождения, "НаселенныйПункт"), "НаселенныйПунктНазвание", СтруктураМестоРождения.НаселенныйПункт);
	КонецЕсли;
	
КонецФункции //ДобавитьМестоРожденияВДеревоЭкспорта()
	

Функция ДобавитьАдресВДеревоЭкспорта(лВетка, лИмя,
	лИндекс, лСтрана, лСтранаСокр, лСтранаКод,
	лРегион, лРегионСокр, лРайон, лРайонСокр, лГород, лГородСокр, лНП , лНПСокр,
	лУлица, лУлицаСокр, лДом, лКорпус, лКвартира) Экспорт
	
	ВеткаАдреса = ДобавитьЭлемент(лВетка, лИмя);
	Если ФорматФайлаобмена = ФорматФайла3 Тогда
		
		Если ЗначениеЗаполнено(лИндекс) Тогда
			ДобавитьЭлемент(ВеткаАдреса, "Индекс", лИндекс);
		КонецЕсли;
		
		ВеткаСтраны = ДобавитьЭлемент(ВеткаАдреса, "Страна");
		ДобавитьЭлемент(ВеткаСтраны, "СтранаНазвание", лСтрана);
		Если ЗначениеЗаполнено(лСтранаСокр) Тогда
			ДобавитьЭлемент(ВеткаСтраны, "СтранаСокращение", лСтранаСокр);
		КонецЕсли;
		Если ЗначениеЗаполнено(лСтранаКод) Тогда
			ДобавитьЭлемент(ВеткаСтраны, "СтранаКод", лСтранаКод);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(лРегион) И ЗначениеЗаполнено(лРегионСокр)Тогда
			ВеткаРегиона = ДобавитьЭлемент(ВеткаАдреса, "Регион");
			Если ЗначениеЗаполнено(лРегион) Тогда
				ДобавитьЭлемент(ВеткаРегиона, "РегионНазвание", лРегион);
			КонецЕсли;
			Если ЗначениеЗаполнено(лРегионСокр) Тогда
				ДобавитьЭлемент(ВеткаРегиона, "РегионСокращение", лРегионСокр);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(лРайон) И ЗначениеЗаполнено(лРайонСокр) Тогда
			ВеткаРайона = ДобавитьЭлемент(ВеткаАдреса, "Район");
			Если ЗначениеЗаполнено(лРайон) Тогда
				ДобавитьЭлемент(ВеткаРайона, "РайонНазвание", лРайон);
			КонецЕсли;
			Если ЗначениеЗаполнено(лРайонСокр) Тогда
				ДобавитьЭлемент(ВеткаРайона, "РайонСокращение", лРайонСокр);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(лГород) И ЗначениеЗаполнено(лГородСокр) Тогда
			ВеткаГорода = ДобавитьЭлемент(ВеткаАдреса, "Город");
			
			Если ЗначениеЗаполнено(лГород) Тогда
				ДобавитьЭлемент(ВеткаГорода, "ГородНазвание", лГород);
			КонецЕсли;
			Если ЗначениеЗаполнено(лГородСокр) Тогда
				ДобавитьЭлемент(ВеткаГорода, "ГородСокращение", лГородСокр);
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(лНП) И ЗначениеЗаполнено(лНПСокр) Тогда
			ВеткаНП = ДобавитьЭлемент(ВеткаАдреса, "НаселенныйПункт");
			
			Если ЗначениеЗаполнено(лНП) Тогда
				ДобавитьЭлемент(ВеткаНП, "НаселенныйПунктНазвание", лНП);
			КонецЕсли;
			Если ЗначениеЗаполнено(лНПСокр) Тогда
				ДобавитьЭлемент(ВеткаНП, "НаселенныйПунктСокращение", лНПСокр);
			КонецЕсли;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(лУлица) И ЗначениеЗаполнено(лУлицаСокр) Тогда
			ВеткаУлицы = ДобавитьЭлемент(ВеткаАдреса, "Улица");
			
			Если ЗначениеЗаполнено(лУлица) Тогда
				ДобавитьЭлемент(ВеткаУлицы, "УлицаНазвание", лУлица);
			КонецЕсли;
			Если ЗначениеЗаполнено(лУлицаСокр) Тогда
				ДобавитьЭлемент(ВеткаУлицы, "УлицаСокращение", лУлицаСокр);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(лДом) Тогда
			ДобавитьЭлемент(ВеткаАдреса, "Дом", лДом);
		КонецЕсли;
		Если ЗначениеЗаполнено(лКорпус) Тогда
			ДобавитьЭлемент(ВеткаАдреса, "Корпус", лКорпус);
		КонецЕсли;
		Если ЗначениеЗаполнено(лКвартира) Тогда
			ДобавитьЭлемент(ВеткаАдреса, "Квартира", лКвартира);
		КонецЕсли;
		
	Иначе
		ДобавитьЭлемент(ВеткаАдреса, "Индекс", лИндекс);
		
		
		ВеткаСтраны = ДобавитьЭлемент(ВеткаАдреса, "Страна");
		ДобавитьЭлемент(ВеткаСтраны, "СтранаНазвание", лСтрана);
		ДобавитьЭлемент(ВеткаСтраны, "СтранаСокращение", лСтранаСокр);
		ДобавитьЭлемент(ВеткаСтраны, "СтранаКод", лСтранаКод);
		
		ВеткаРегиона = ДобавитьЭлемент(ВеткаАдреса, "Регион");
		ДобавитьЭлемент(ВеткаРегиона, "РегионНазвание", лРегион);
		ДобавитьЭлемент(ВеткаРегиона, "РегионСокращение", лРегионСокр);
		
		ВеткаРайона = ДобавитьЭлемент(ВеткаАдреса, "Район");
		ДобавитьЭлемент(ВеткаРайона, "РайонНазвание", лРайон);
		ДобавитьЭлемент(ВеткаРайона, "РайонСокращение", лРайонСокр);
		
		ВеткаГорода = ДобавитьЭлемент(ВеткаАдреса, "Город");
		ДобавитьЭлемент(ВеткаГорода, "ГородНазвание", лГород);
		ДобавитьЭлемент(ВеткаГорода, "ГородСокращение", лГородСокр);
		
		ВеткаНП = ДобавитьЭлемент(ВеткаАдреса, "НаселенныйПункт");
		ДобавитьЭлемент(ВеткаНП, "НаселенныйПунктНазвание", лНП);
		ДобавитьЭлемент(ВеткаНП, "НаселенныйПунктСокращение", лНПСокр);
		
		ВеткаУлицы = ДобавитьЭлемент(ВеткаАдреса, "Улица");
		ДобавитьЭлемент(ВеткаУлицы, "УлицаНазвание", лУлица);
		ДобавитьЭлемент(ВеткаУлицы, "УлицаСокращение", лУлицаСокр);
		
		ДобавитьЭлемент(ВеткаАдреса, "Дом", лДом);
		ДобавитьЭлемент(ВеткаАдреса, "Корпус", лКорпус);
		ДобавитьЭлемент(ВеткаАдреса, "Квартира", лКвартира);
		
	КонецЕсли;
	Возврат ВеткаАдреса;
	
КонецФункции

Функция ДобавитьУдЛичностиВДеревоЭкспорта(лВетка, лИмя, лВидДокумента, лСерия, лНомер, лДатаВыдачи, лКемВыдан, лКодПодразделения = "") Экспорт
	
	ВеткаУдЛичности = ДобавитьЭлемент(лВетка, лИмя);
	Если ФорматФайлаОбмена = ФорматФайла1 Тогда
		ДобавитьЭлемент(ВеткаУдЛичности, "ВидДокумента", лВидДокумента);
		ДобавитьЭлемент(ВеткаУдЛичности, "Серия", лСерия);
		ДобавитьЭлемент(ВеткаУдЛичности, "Номер", лНомер);
		ДобавитьЭлемент(ВеткаУдЛичности, "ДатаВыдачи", ПолучитьДатуXML(лДатаВыдачи));
		ДобавитьЭлемент(ВеткаУдЛичности, "КемВыдан", лКемВыдан);
	ИначеЕсли ФорматФайлаОбмена = ФорматФайла3 Тогда
		ДобавитьЭлемент(ВеткаУдЛичности, "ВидДокумента", ?(лВидДокумента = "", "", ЛЕВ(лВидДокумента.Наименование, 75)));
		ДобавитьЭлемент(ВеткаУдЛичности, "КодВидаДокумента", ?(лВидДокумента = "", "", лВидДокумента.КодИМНС));
		ДобавитьЭлемент(ВеткаУдЛичности, "Серия", лСерия);
		ДобавитьЭлемент(ВеткаУдЛичности, "Номер", лНомер);
		ДобавитьЭлемент(ВеткаУдЛичности, "ДатаВыдачи", ПолучитьДатуXML(лДатаВыдачи));
		ДобавитьЭлемент(ВеткаУдЛичности, "КемВыдан", Лев(лКемВыдан, 60));
		ДобавитьЭлемент(ВеткаУдЛичности, "КодПодразделения", лКодПодразделения);
	КонецЕсли;
	Возврат ВеткаУдЛичности;
	
КонецФункции

Функция ДобавитьЭмбосированныйТекстВДеревоЭкспорта(лВетка, лИмя, Поле1, Поле2, Поле3) Экспорт
	
	ВеткаЭмТекста = ДобавитьЭлемент(лВетка, лИмя);
	
	ДобавитьАтрибут(ВеткаЭмТекста, "Поле1", Поле1);
	ДобавитьАтрибут(ВеткаЭмТекста, "Поле2", Поле2);
	ДобавитьАтрибут(ВеткаЭмТекста, "Поле3", Поле3);
	
	Возврат ВеткаЭмТекста;
	
КонецФункции



// ТРАНСПОРТНЫЙ УРОВЕНЬ

Функция СоздатьДеревоЭкспорта() Экспорт
	
	ДеревоЭкспорта = Новый ДеревоЗначений;
	ДеревоЭкспорта.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДеревоЭкспорта.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
	ДеревоЭкспорта.Колонки.Добавить("ЭтоАтрибут", Новый ОписаниеТипов("Булево"));
	
	Возврат ДеревоЭкспорта;
	
КонецФункции

Функция ДобавитьЭлемент(Ветка, Имя, Значение = "") Экспорт
	
	ЛистЭлемента = Ветка.Строки.Добавить();
	ЛистЭлемента.Имя = Имя;
	ЛистЭлемента.Значение = ПреобразоватьвXML(Значение);
	ЛистЭлемента.ЭтоАтрибут = Ложь;
	
	Возврат ЛистЭлемента;
	
КонецФункции

Функция ДобавитьАтрибут(Ветка, Имя, Значение) Экспорт
	
	ЛистЭлемента = Ветка.Строки.Добавить();
	ЛистЭлемента.Имя = Имя;
	ЛистЭлемента.Значение = ПреобразоватьвXML(Значение);
	ЛистЭлемента.ЭтоАтрибут = Истина;
	
	Возврат ЛистЭлемента;
	
КонецФункции

Функция ЗаписатьДевероЭкспортаНаДиск(ИмяФайлаЭкспорта = Неопределено) Экспорт
	
	
	
	
	
КонецФункции


Функция ПреобразоватьвXML(Значение)
	
	Если ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат "" + Год(Значение) + "-" + Формат(Месяц(Значение), "ЧЦ=2; ЧВН=") + "-" + Формат(День(Значение), "ЧЦ=2; ЧВН=");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧГ=0");
		
	Иначе
		Возврат "" + Значение;
		
	КонецЕсли;
	
КонецФункции

// СЛУЖЕБНЫЕ ФУНКЦИИ ФОРМИРОВАНИЯ XML

Функция СоздатьНовыйПотокXMLСчетаПК() Экспорт
	
	СтадияОбработки = "Формирование XML файла в банк";
	
	Если ПустаяСтрока(НомерДоговора) Тогда
		СообщитьОбОшибкеОбработки(СтадияОбработки, "Не указан номер договора для работы с банком!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеОрганизации) Тогда
		СообщитьОбОшибкеОбработки(СтадияОбработки, ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указано наименование организации!"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(ИНН) Тогда
		СообщитьОбОшибкеОбработки(СтадияОбработки, ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указан ИНН организации!"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПустаяСтрока(РасчетныйСчетОрганизации) Тогда
		СообщитьОбОшибкеОбработки(СтадияОбработки, "В документе " + Документ + "не указан зарплатный счет или указан зарплатный счет с незаполненным номером счета!");
		Возврат Неопределено;
	КонецЕсли;
	
	ПотокXMLСчетаПК = Новый ЗаписьXML();
	
	Если Кодировка = 2 Тогда
		ПотокXMLСчетаПК.УстановитьСтроку();
		ПотокXMLСчетаПК.ЗаписатьБезОбработки("<?xml version=""1.0"" encoding=""windows-1251"" ?>" + Символы.ПС);
	Иначе
		ПотокXMLСчетаПК.УстановитьСтроку("UTF-8");
		ПотокXMLСчетаПК.ЗаписатьОбъявлениеXML();
	КонецЕсли;
	
	ПотокXMLСчетаПК.Отступ = Истина;
	
	Возврат ПотокXMLСчетаПК;
	
КонецФункции

Функция ЗакрытьПотокXMLСчетаПК(ПотокXMLСчетаПК) Экспорт
	
	////ПотокXMLСчетаПК.ЗаписатьКонецЭлемента();
	ПотокXMLСчетаПК.ЗаписатьКомментарий("СчетаПК");
	
	Возврат ПотокXMLСчетаПК;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML) Экспорт
	
	Если СтрокаДерева.ЭтоАтрибут Тогда 
		// аттрибут
		ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Имя, СтрокаДерева.Значение);
		
	Иначе
		// составной элемент
		Если ПустаяСтрока(СтрокаДерева.Имя) Тогда
			СтрокаДерева.Имя = "Пустой";
		КонецЕсли;
		
		ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Имя);
		
		Для каждого Лист из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Лист, ПотокXML);
		КонецЦикла;
		
		ПотокXML.ЗаписатьТекст(СтрокаДерева.Значение);
		ПотокXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;

КонецФункции


// СЛУЖЕБНЫЕ ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ

Функция ПолучитьАвтоИмяФайлаЭкспорта(ВФормате8_3 = Ложь) Экспорт
	
	Если НЕ(ВФормате8_3 = Ложь) Тогда
		СоставляющаяДаты = Формат(ТекущаяДата(), "ДФ=ddMM");
		
	Иначе
		СоставляющаяДаты = Формат(ТекущаяДата(), "ДЛФ=DT");
		
	КонецЕсли;
		
	Возврат "1czr" + СтрЗаменить(СтрЗаменить(СтрЗаменить(СоставляющаяДаты, " ", ""), ":", ""), ".", "") + ".xml";
	
КонецФункции

Функция ПолучитьИмяФайлаЭкспортаВформатеСбербанка(НомерОтправки, Отделение, Операция) Экспорт
	
	
	
	Возврат Прав("0000" + Отделение, 4) + Формат(НомерОтправки, "ЧЦ=3; ЧВН=; ЧГ=0")+ Лев(СокрЛП(Операция), 1) + ".xml";
	
КонецФункции

Функция ЗаписатьТесктНаДиск(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	ФайлДанных = Новый Файл(ФайлДляЗаписи);
	Если НЕ ФайлДанных.Существует() Тогда
		Ответ = Вопрос("Не найден файл данных """ + ФайлДляЗаписи + """" + Символы.ПС + "Создать?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, ?(Кодировка = 2, КодировкаТекста.ANSI, КодировкаТекста.UTF8));
	ПотокЗаписи.Записать(ТекстДляЗаписи);
	ПотокЗаписи.Закрыть();

	Сообщить("Записаны данные в файл " + ФайлДляЗаписи);
	
	Возврат Истина;
	
КонецФункции


// ИМПОРТ

Функция ПрочитатьФайл(ИмяФайла) Экспорт
	
	ПотокЧтения = Новый ЧтениеТекста(ИмяФайла);
	Содержимое = ПотокЧтения.Прочитать();
	ПотокЧтения.Закрыть();
	
	Возврат Содержимое;
	
КонецФункции


Функция СоздатьУзелНаВетке(ТекущаяВетка, ДеревоОбработки) Экспорт
	
	Если ТекущаяВетка = Неопределено Тогда
		Возврат ДеревоОбработки.Строки.Добавить();
	Иначе
		Возврат ТекущаяВетка.Строки.Добавить();
	КонецЕсли;
	
КонецФункции


Функция ПолучитьДеревоИзФайла(ФайлДляЧтения, Сообщать = Истина) Экспорт
	
	СтадияОбработки = "Импорт из файла " + ФайлДляЧтения;
	
	ТекстXML = ПрочитатьФайл(КаталогИмпортаДанных + "\" + ФайлДляЧтения);
	Если ТекстXML = Неопределено Тогда
		Если Сообщать Тогда
			СообщитьОбОшибкеОбработки(СтадияОбработки, "В файле отсутствуют данные!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	XMLПоток = Новый ЧтениеXML();
	
	Попытка
		XMLПоток.УстановитьСтроку(ТекстXML);
	Исключение
		Если Сообщать Тогда
			СообщитьОбОшибкеОбработки(СтадияОбработки, "В файле нарушена структура XML или это не XML файл!");
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
	ДеревоФайла = Новый ДеревоЗначений;
	ДеревоФайла.Колонки.Добавить("Имя");
	ДеревоФайла.Колонки.Добавить("Значение");
	
	ТекущаяВетка = Неопределено;
	Попытка
		
		Пока XMLПоток.Прочитать() Цикл
			Если XMLПоток.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				ТекущаяВетка = СоздатьУзелНаВетке(ТекущаяВетка, ДеревоФайла);
				ТекущаяВетка.Имя = XMLПоток.Имя;
				
				Пока XMLПоток.ПрочитатьАтрибут() Цикл
					АтрибутВДереве = СоздатьУзелНаВетке(ТекущаяВетка, ДеревоФайла);
					АтрибутВДереве.Имя =  XMLПоток.Имя;
					АтрибутВДереве.Значение =  XMLПоток.Значение;
				КонецЦикла;
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.Текст Тогда
				ТекущаяВетка.Значение = XMLПоток.Значение;		
			ИначеЕсли XMLПоток.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				ТекущаяВетка = ТекущаяВетка.Родитель;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ДеревоФайла;
	
КонецФункции

Функция ПолучитьСчетаПК(ДеревоОбработки, ФайлДляЧтения, Сообщать = Истина) Экспорт
	
	СтадияОбработки = "Анализ данных " + ФайлДляЧтения;
	
	Если ДеревоОбработки.Строки.Количество() = 0 Тогда
		Если Сообщать Тогда
			СообщитьОбОшибкеОбработки(СтадияОбработки, "Отсутствуют элементы!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДеревоОбработки.Строки.Количество() > 1 Тогда
		Если Сообщать Тогда
			СообщитьОбОшибкеОбработки(СтадияОбработки, "Более одного элемента верхнего уровня!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	СчетаПК = ДеревоОбработки.Строки[0];
	
	Если СчетаПК.Имя <> "СчетаПК" Тогда
		Если Сообщать Тогда
			СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректное имя элемента верхнего уровня!");
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
	ШаблонЭлементаВерхнегоУровня = Новый Структура;
	
	ШаблонЭлементаВерхнегоУровня.Вставить("ДатаФормирования", Неопределено);
	ШаблонЭлементаВерхнегоУровня.Вставить("НомерДоговора", Неопределено);
	ШаблонЭлементаВерхнегоУровня.Вставить("НаименованиеОрганизации", Неопределено);
//	ШаблонЭлементаВерхнегоУровня.Вставить("ИНН", Неопределено);
//	ШаблонЭлементаВерхнегоУровня.Вставить("РасчетныйСчетОрганизации", Неопределено);
	ШаблонЭлементаВерхнегоУровня.Вставить("ИдПервичногоДокумента", Неопределено);
	
	Для каждого СтрокаСчетаПК из СчетаПК.Строки Цикл
		
		Если ШаблонЭлементаВерхнегоУровня.Свойство(СтрокаСчетаПК.Имя) Тогда
			ШаблонЭлементаВерхнегоУровня[СтрокаСчетаПК.Имя] = СтрокаСчетаПК.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ЭлементШаблона Из ШаблонЭлементаВерхнегоУровня Цикл
		Если ЭлементШаблона.Значение = Неопределено Тогда
			Если Сообщать Тогда
				СообщитьОбОшибкеОбработки(СтадияОбработки, "Некорректная структура элемента верхнего уровня!");
			КонецЕсли;
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ШаблонЭлементаВерхнегоУровня.Вставить("Содержимое", СчетаПК);
	
	Возврат ШаблонЭлементаВерхнегоУровня;
	
КонецФункции


Функция ПолучитьОперации(ДеревоОбработки, ИмяЭлементаИмпорта) Экспорт
	
	МассивОпераций = Новый Массив;
	
	Для каждого Ветка из ДеревоОбработки.Строки Цикл
		Если Ветка.Имя = ИмяЭлементаИмпорта Тогда
			Для каждого СтрокаВетки из Ветка.Строки Цикл
				Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" ИЛИ ИмяЭлементаИмпорта = "РезультатЗачисленияЗарплаты" Тогда
					Если ИмяЭлементаИмпорта = "РезультатОткрытияСчетов" Тогда
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						//ШаблонОперации.Вставить("УдостоверениеЛичности", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
						
					Иначе
						
						ШаблонОперации = Новый Структура;
						ШаблонОперации.Вставить("Сотрудник", Неопределено);
						ШаблонОперации.Вставить("ЛицевойСчет", Неопределено);
						ШаблонОперации.Вставить("Сумма", Неопределено);
						ШаблонОперации.Вставить("Результат", Неопределено);
					КонецЕсли;	
					Если ШаблонОперации.Свойство(СтрокаВетки.Имя) Тогда
						ШаблонОперации[СтрокаВетки.Имя] = ПроцедурыУправленияПерсоналом.ПолучитьЗначениеИзДерева(СтрокаВетки, ШаблонОперации);
					КонецЕсли;
					
					Для каждого ЭлементШаблона Из ШаблонОперации Цикл
						Если ЭлементШаблона.Значение = Неопределено Тогда
							СообщитьОбОшибкеОбработки("Анализ операции", "Некорректная структура элемента " + ИмяЭлементаИмпорта + "!");
							Продолжить;
						КонецЕсли;
					КонецЦикла;
					МассивОпераций.Добавить(ШаблонОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОпераций;
	
КонецФункции

Процедура СкопироватьСодержание(ИсходнаяВетка, НоваяВетка) Экспорт
	
	НоваяВетка.Имя = ИсходнаяВетка.Имя;
	НоваяВетка.Значение = ИсходнаяВетка.Значение;
	
	Для каждого ЛистИсходнойВетки из ИсходнаяВетка.Строки Цикл
		ЛистНовойВетки = НоваяВетка.Строки.Добавить();
		СкопироватьСодержание(ЛистИсходнойВетки, ЛистНовойВетки);
	КонецЦикла;
	
КонецПроцедуры

Процедура СообщитьОбОшибкеОбработки(СтадияОбработки, ТекстОшибки) Экспорт
	
	Сообщить(СтадияОбработки + ":  " + ТекстОшибки);
	
КонецПроцедуры

#КонецЕсли

ФорматФайла1 = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия1;
ФорматФайла3 = Перечисления.ФорматФайлаОбменаПоЗарплатномуПроекту.Версия3;