////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ.

// Переменные модуля для хранения параметров расчета итогов.
Перем мРегистрБухгалтерии;
Перем мИтоги;
Перем мРесурсы;
Перем мГруппировки;
Перем мНачалоПериода;
Перем мКонецПериода;
Перем мПериодичность;
Перем мСчета;
Перем мВидыСубконто;
Перем мКорСчета;
Перем мВидыКорСубконто;
Перем мФильтры;
Перем мДополнятьПериоды;

// Переменные модуля для хранения результатов запросов.
Перем мРезультатЗапросаОстаткиИОбороты;
Перем мРезультатЗапросаКорОбороты;

// Переменная содержит подстроку символов, разделяющую поля в текстах запросов.
Перем мРазделительПолей;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ИТОГАМИ В РЕЖИМЕ ПРЕДВАРИТЕЛЬНОГО РАСЧЕТА.

// Процедура рассчитывает бухгалтерские итоги в соответствии с переданными параметрами.
// Результаты запоминаются в переменных модуля мРезультатЗапросаОстаткиИОбороты, мРезультатЗапросаКорОбороты.
// После расчета бухгалтерских итогов возможно обращение к итогам с помощью функций ПолучитьИтог().
//
// Параметры:
//
//  РегистрБухгалтерии - ОбъектМетаданных или Строка или Число - регистр, имя или индекс регистра 
//                       бухгалтерии, для которого рассчитываются итоги.
//                       Если не указан, то используется первый из регистров бухгалтерии, (в порядке, 
//                       как они указаны в метаданных).
//
//  Итоги              - Структура или Строка - рассчитываемые итоги - могут быть переданы в процедуру 
//                       или в виде структуры, в которой имена итогов указаны в качестве ключей, 
//                       или в виде строки, в которой имена итогов перечислены через запятую.
//                       Если параметр не задан, по умолчанию рассчитываются 
//                       начальные и конечные остатки (не развернутые) и обороты.
//                       Допустимые имена: 
//                         НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
//                         НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
//                         КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
//                         КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
//                         ОборотДт, ОборотКт, КорОборотДт, КорОборотКт,
//
//  Ресурсы            - Структура или Строка - рассчитываемые ресурсы - могут быть переданы в процедуру 
//                       или в виде структуры, в которой имена ресурсов указаны в качестве ключей, 
//                       или в виде строки, в которой имена ресурсов перечислены через запятую.
//                       Если параметр не задан, по умолчанию рассчитываются все ресурсы регистра.
//                       Допустимые имена: имена ресурсов регистра, как они заданы в метаданных.
//
//  Группировки        - Структура или Строка - группировки итогов - могут быть переданы в процедуру 
//                       или в виде структуры, в которой имена группировок указаны в качестве ключей, 
//                       или в виде строки, в которой имена группировок перечислены через запятую.
//                       При обращении к рассчитанным итогам можно будет получать итоги по конкретным
//                       значениям указанных в данном параметре группировок.
//                       Кроме того, по указанным группировкам разворачиваются развернутые остатки.
//                       Если параметр не задан, по умолчанию итоги рассчитываются без группировок.
//                       Допустимые имена группировок:
//                         Период
//                         Счет
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                       Для расчета корреспондирующих оборотов можно указывать так же
//                         КорСчет
//                         <ИмяИзмерения>Кор - имена небалансовых измерений регистра,
//                         КорСубконто1, КорСубконто2 и т.д.
//
//  НачалоПериода      - Дата, МоментВремени, Граница - начало периода расчета итогов.
//                       Если параметр не задан, или передано пустое значение, итоги будут 
//                       рассчитываться с самого первого движения (начальные остатки будут нулевыми).
//
//  КонецПериода       - Дата, МоментВремени, Граница - конец периода расчета итогов.
//                       Если параметр не задан, или передано пустое значение, итоги будут 
//                       рассчитываться по самое последнее движение.
//
//  Периодичность      - Строка - периодичность, с которой рассчитываются промежуточные итоги внутри периода.
//                       Допустимые значения: 
//                         Период, Год, Полугодие, Квартал, Месяц, Декада, Неделя, День, Регистратор, Запись
//                       Если параметр не указан, промежуточные итоги внутри периода не рассчитываются.
//
//  Счета              - Строка, ПланСчетовСсылка, Массив значений типа ПланСчетовСсылка - счета,
//                       по которым следует ограничить расчет итогов - могут быть переданы в процедуру
//                       или в виде строки, в которой коды счетов перечислены через запятую, или ввиде
//                       ссылки на счет, или в виде массива ссылок. Если указан счет-группа - будут
//                       включены все иерархически подчиненные счета.
//
//  ВидыСубконто       - ПланВидовХарактеристикСсылка, Массив значений типа ПланВидовХарактеристикСсылка -
//                       задает субконто, по которым рассчитываются остатки и обороты.
//                       См. описание параметра "Субконто" таблиц запросов регистров бухгалтерии.
//
//  КорСчета           - Строка, ПланСчетовСсылка, Массив значений типа ПланСчетовСсылка - счета, по 
//                       которым следует ограничить расчет кор. оборотов - могут быть переданы в процедуру
//                       или в виде строки, в которой коды счетов перечислены через запятую, или ввиде
//                       ссылки на счет, или в виде массива ссылок. Если указан счет-группа - будут
//                       включены все иерархически подчиненные счета.
//
//  ВидыКорСубконто    - ПланВидовХарактеристикСсылка, Массив значений типа ПланВидовХарактеристикСсылка.
//                       задает кор. субконто, по которым рассчитываются кор. обороты.
//                       См. описание параметра "Кор. субконто" таблицы запросов "Обороты" регистров бухгалтерии.
//
//  Фильтры            - допускается два варианта синтаксиса: Строка или Структура.
//                       Если передана Строка: она должна содержать список имен полей,
//                       разделенных запятыми. В этом случае значения полей должны быть
//                       указаны в параметрах Значение1, Значение2 и. т. д.
//                       Если передана Структура, она должна содержать элементы, в которых имя поля 
//                       указано в качестве ключа, а значение поля - в качестве значения элемента.
//                       В качестве имен полей структуры можно указывать:
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                       В качестве значений элементов структуры можно указывать конкретные значения
//                       измерений и субконто, а так же массивы или списки таких значений.
//                       При расчете итоги будут отфильтрованы по указанным значениям.
//                       Если в качестве значения указывается группа (справочника), отбираются все 
//                       подчиненные элементы.
//
//  ЗначениеN          - Любого типа - значения фильтров.
//                       Параметры используются в случае, если фильтры переданы в функцию в 
//                       параметре Фильтры в виде строки. Количество и порядок значений фильтров 
//                       должны соответствовать количеству и порядку имен полей.
//
Процедура РассчитатьИтоги(Знач РегистрБухгалтерии = 0, Итоги = Неопределено, Ресурсы = Неопределено, Группировки = "", НачалоПериода = Неопределено, КонецПериода = Неопределено, Периодичность = "Период", Счета = Неопределено, ВидыСубконто = Неопределено, КорСчета = Неопределено, ВидыКорСубконто = Неопределено, Фильтры = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт

	// Имена итогов.
	НачальныеОстатки = "НачальныйОстатокДт, НачальныйОстатокКт, НачальныйРазвернутыйОстатокДт, НачальныйРазвернутыйОстатокКт";
	КонечныеОстатки  = "КонечныйОстатокДт,  КонечныйОстатокКт,  КонечныйРазвернутыйОстатокДт,  КонечныйРазвернутыйОстатокКт";
	Обороты          = "ОборотДт, ОборотКт";
	КорОбороты       = "КорОборотДт, КорОборотКт";

	// Регистр бухгалтерии, для которого выполняется расчет.
	Если ТипЗнч(РегистрБухгалтерии) = Тип("ОбъектМетаданных") Тогда
		
		мРегистрБухгалтерии = РегистрБухгалтерии;
		
	Иначе	
	
		Для Каждого ОбъектМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
			Если ТипЗнч(РегистрБухгалтерии) = Тип("РегистрБухгалтерииМенеджер." + ОбъектМетаданных.Имя) Тогда
				РегистрБухгалтерии = ОбъектМетаданных.Имя;
			КонецЕсли;
		КонецЦикла;
		
		мРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии];
		
	КонецЕсли;
	
	// Структура рассчитываемых итогов.
	Если ТипЗнч(Итоги) = Тип("Структура") Тогда
		мИтоги = Итоги;
	ИначеЕсли ТипЗнч(Итоги) = Тип("Строка") Тогда
		мИтоги = Новый Структура(Итоги);
	Иначе
		мИтоги = Новый Структура(НачальныеОстатки +", " + КонечныеОстатки + ", " + Обороты);
	КонецЕсли;

	// Структура рассчитываемых ресурсов.
	Если ТипЗнч(Ресурсы) = Тип("Структура") Тогда
		мРесурсы = Ресурсы;
	ИначеЕсли ТипЗнч(Ресурсы) = Тип("Строка") Тогда
		мРесурсы = Новый Структура(Ресурсы);
	Иначе
		мРесурсы = Новый Структура();
		Для каждого Ресурс Из мРегистрБухгалтерии.Ресурсы Цикл
			мРесурсы.Вставить(Ресурс.Имя);
		КонецЦикла;
	КонецЕсли;

	// Структура рассчитываемых группировок.
	Если ТипЗнч(Группировки) = Тип("Структура") Тогда
		мГруппировки = Группировки;
	Иначе
		мГруппировки = Новый Структура(Группировки);
	КонецЕсли;

	// Фильтры расчета итогов.
	Если ТипЗнч(Фильтры) = Тип("Структура") Тогда
		мФильтры = Фильтры;
	Иначе
		мФильтры = Новый Структура(Фильтры, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	КонецЕсли;

	// Прочие параметры расчета итогов.
	мНачалоПериода   = НачалоПериода;
	мКонецПериода    = КонецПериода;
	мПериодичность   = ВРег(Периодичность);
	мСчета           = РазобратьКодыСчетов(мРегистрБухгалтерии.ПланСчетов, Счета);
	мВидыСубконто    = ВидыСубконто;
	мКорСчета        = РазобратьКодыСчетов(мРегистрБухгалтерии.ПланСчетов, КорСчета);
	мВидыКорСубконто = ВидыКорСубконто;

	// Очищаются переменные модуля для хранения результатов запросов.
	мРезультатЗапросаОстаткиИОбороты = Неопределено;
	мРезультатЗапросаКорОбороты      = Неопределено;

	// Логические переменные, какие остатки надо рассчитывать.
	РассчитатьНачальныеОстатки       = СтруктураСодержитИмена(мИтоги, НачальныеОстатки);
	РассчитатьКонечныеОстатки        = СтруктураСодержитИмена(мИтоги, КонечныеОстатки);
	РассчитатьОбороты                = СтруктураСодержитИмена(мИтоги, Обороты);
	РассчитатьКорОбороты             = СтруктураСодержитИмена(мИтоги, КорОбороты) И мРегистрБухгалтерии.Корреспонденция;
	РассчитатьТолькоНачальныеОстатки = РассчитатьНачальныеОстатки И НЕ РассчитатьКонечныеОстатки  И НЕ РассчитатьОбороты;
	РассчитатьТолькоКонечныеОстатки  = РассчитатьКонечныеОстатки  И НЕ РассчитатьНачальныеОстатки И НЕ РассчитатьОбороты;
	РассчитатьОстаткиИОбороты        = РассчитатьНачальныеОстатки ИЛИ  РассчитатьКонечныеОстатки  ИЛИ  РассчитатьОбороты;

	// Логическая переменная, надо ли дополнять итоги периодами, за которые не было оборотов.
	мДополнятьПериоды = (РассчитатьНачальныеОстатки ИЛИ РассчитатьКонечныеОстатки) И (мПериодичность <> "ПЕРИОД" И мПериодичность <> "ЗАПИСЬ");

	// В зависимости от потребностей формируются соответствующие запросы.
	Если      РассчитатьТолькоНачальныеОстатки И мПериодичность = "ПЕРИОД" И НачалоПериода <> '00010101' Тогда
		// На пустую дату остатки в запросе рассчитываются, как на самое последнее движение.
		// Здесь же остатки на пустую дату должны быть нулевыми.
		РассчитатьОстатки(НачалоПериода, "Начальный");

	ИначеЕсли РассчитатьТолькоКонечныеОстатки  И мПериодичность = "ПЕРИОД" Тогда
		РассчитатьОстатки(КонецПериода, "Конечный");

	ИначеЕсли РассчитатьОстаткиИОбороты Тогда
		РассчитатьОстаткиИОбороты();
	КонецЕсли;

	Если РассчитатьКорОбороты Тогда
		РассчитатьКорОбороты();
	КонецЕсли;

КонецПроцедуры

// Функция позволяет получить требуемый итог по указанным значениям группировок.
// Итоги должны быть предварительно рассчитаны при помощи процедуры РассчитатьИтоги().
//
// Параметры:
//
//  ИмяИтога           - Строка - имя бухгалтерского итога, который требуется получить.
//                       Имя итога задается в виде <ИмяРесурса><Итог>.
//                       ИмяРесурса - имя ресурса регистра, как оно задано в метаданных.
//                       Итог - возможные значения:
//                         НачальныйОстатокДт, НачальныйРазвернутыйОстатокДт, 
//                         НачальныйОстатокКт, НачальныйРазвернутыйОстатокКт,
//                         КонечныйОстатокДт,  КонечныйРазвернутыйОстатокДт, 
//                         КонечныйОстатокКт,  КонечныйРазвернутыйОстатокКт,
//                         ОборотДт,           КорОборотДт, 
//                         ОборотКт,           КорОборотКт.
//                       ИмяРесурса и Итог предварительно должны были быть указаны при расчете 
//                       итогов в процедуре РассчитатьИтоги() в параметрах Ресурсы и Итоги.
//
//  Группировки        - допускается два варианта синтаксиса: Строка или Структура.
//                       Если передана Строка: она должна содержать список имен группировок,
//                       разделенных запятыми. В этом случае значения группировок должны быть
//                       указаны в параметрах Значение1, Значение2 и. т. д.
//                       Если передана Структура, она должна содержать элементы, в которых
//                       имя группировки указано в качестве ключа, а значение группировки - 
//                       в качестве значения элемента.
//                       Допустимые имена группировок:
//                         Счет
//                         Период
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                       Для расчета корреспондирующих оборотов можно указывать так же
//                         КорСчет
//                         <ИмяИзмерения>Кор - имена небалансовых измерений регистра,
//                         КорСубконто1, КорСубконто2 и т.д.
//                       Используемые группировки предварительно должны были быть указаны при расчете
//                       итогов в процедуре РассчитатьИтоги() в параметре Группировки.
//
//  ЗначениеN          - Любого типа - значения группировок.
//                       Параметры используются в случае, если имена группировок переданы в функцию в 
//                       параметре Группировки в виде строки. Количество и порядок значений группировок 
//                       должны соответствовать количеству и порядку имен группировок.
//
// Возвращаемое значение:
//
//  Число - величина требуемого бухгалтерского итога.
//
Функция ПолучитьИтог(ИмяИтога, Знач Группировки = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт

	// Параметр Группировки преобразуется в структуру, если был передан в виде строки.
	Если ТипЗнч(Группировки) <> Тип("Структура") Тогда
		Группировки = Новый Структура(Группировки, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	КонецЕсли;

	// Определяется, из какого результата запроса следует получать выборку.
	Если      мРезультатЗапросаОстаткиИОбороты <> Неопределено 
	        И мРезультатЗапросаОстаткиИОбороты.Колонки.Найти(ИмяИтога) <> Неопределено Тогда

		Выборка = ПолучитьОстаткиИОбороты(Группировки);

	ИначеЕсли мРезультатЗапросаКорОбороты <> Неопределено 
	        И мРезультатЗапросаКорОбороты.Колонки.Найти(ИмяИтога) <> Неопределено Тогда

		Выборка = ПолучитьКорОбороты(Группировки);

	Иначе
		Сообщить("Не рассчитан итог: """ + ИмяИтога + """.", СтатусСообщения.Важное);
	КонецЕсли;

	// Обращаться к итогу имеет смысл, если выборка была спозиционирована.
	Если ТипЗнч(Выборка) <> Тип("ВыборкаИзРезультатаЗапроса")
	   И ТипЗнч(Выборка) <> Тип("Структура") Тогда
		Возврат 0;
	КонецЕсли;

	// Возвращается требуемое поле выборки.
	Возврат Выборка[ИмяИтога];

КонецФункции

// Функция позволяет получить остатки и обороты по указанным значениям группировок.
// Итоги должны быть предварительно рассчитаны при помощи процедуры РассчитатьИтоги().
//
// Параметры:
//
//  Группировки        - допускается два варианта синтаксиса: Строка или Структура.
//                       Если передана Строка: она должна содержать список имен группировок,
//                       разделенных запятыми. В этом случае значения группировок должны быть
//                       указаны в параметрах Значение1, Значение2 и. т. д.
//                       Если передана Структура, она должна содержать элементы, в которых
//                       имя группировки указано в качестве ключа, а значение группировки - 
//                       в качестве значения элемента.
//                       Допустимые имена группировок:
//                         Период
//                         Счет
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                       Используемые группировки предварительно должны были быть указаны при расчете
//                       итогов в процедуре РассчитатьИтоги() в параметре Группировки.
//
//  ЗначениеN          - Любого типа - значения группировок.
//                       Параметры используются в случае, если имена группировок переданы в функцию в 
//                       параметре Группировки в виде строки. Количество и порядок значений группировок 
//                       должны соответствовать количеству и порядку имен группировок.
//
// Возвращаемое значение:
//
//  РезультатЗапроса, ВыборкаИзРезультатаЗапроса, Неопределено.
//
//  Если не указана ни одна группировка, возвращается результат запроса по бухгалтерским итогам.
//  Из него можно получать необходимые выборки по группировкам, заданным при расчете итогов.
//
//  Если в параметрах функции указаны группировки и имеются итоги по указанным значениям группировок, 
//  возвращается ВыборкаИзРезультатаЗапроса. Из нее можно получать итоги - остатки и обороты, указанные
//  при расчете итогов, а так же подчиненные выборки по группировкам, заданным при расчете итогов.
//
//  Если указаны неверные группировки или нет итогов по указанным группировкам, возвращается Неопределено.
//
Функция ПолучитьОстаткиИОбороты(Знач Группировки = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт

	// Параметр Группировки преобразуется в структуру, если был передан в виде строки.
	Если ТипЗнч(Группировки) <> Тип("Структура") Тогда
		Группировки = Новый Структура(Группировки, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	КонецЕсли;

	// Строится и возвращается необходимая выборка.
	Возврат ПолучитьВыборкуИтогов(мРезультатЗапросаОстаткиИОбороты, Группировки, мДополнятьПериоды);

КонецФункции

// Функция позволяет получить корреспондирующие обороты по указанным значениям группировок.
// Итоги должны быть предварительно рассчитаны при помощи процедуры РассчитатьИтоги().
//
// Параметры:
//
//  Группировки        - допускается два варианта синтаксиса: Строка или Структура.
//                       Если передана Строка: она должна содержать список имен группировок,
//                       разделенных запятыми. В этом случае значения группировок должны быть
//                       указаны в параметрах Значение1, Значение2 и. т. д.
//                       Если передана Структура, она должна содержать элементы, в которых
//                       имя группировки указано в качестве ключа, а значение группировки - 
//                       в качестве значения элемента.
//                       Допустимые имена группировок:
//                         Период
//                         Счет
//                         КорСчет
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         <ИмяИзмерения>Кор - имена небалансовых измерений регистра,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                         КорСубконто1, КорСубконто2 и т.д.
//                       Используемые группировки предварительно должны были быть указаны при расчете
//                       итогов в процедуре РассчитатьИтоги() в параметре Группировки.
//
//  ЗначениеN          - Любого типа - значения группировок.
//                       Параметры используются в случае, если имена группировок переданы в функцию в 
//                       параметре Группировки в виде строки. Количество и порядок значений группировок 
//                       должны соответствовать количеству и порядку имен группировок.
//
// Возвращаемое значение:
//
//  РезультатЗапроса, ВыборкаИзРезультатаЗапроса, Неопределено.
//
//  Если не указана ни одна группировка, возвращается результат запроса по бухгалтерским итогам.
//  Из него можно получать необходимые выборки по группировкам, заданным при расчете итогов.
//
//  Если в параметрах функции указаны группировки и имеются итоги по указанным значениям группировок, 
//  возвращается ВыборкаИзРезультатаЗапроса. Из нее можно получать итоги - корр. обороты, указанные
//  при расчете итогов, а так же подчиненные выборки по группировкам, заданным при расчете итогов.
//
//  Если указаны неверные группировки или нет итогов по указанным группировкам, возвращается Неопределено.
//
Функция ПолучитьКорОбороты(Знач Группировки = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт

	// Параметр Группировки преобразуется в структуру, если был передан в виде строки.
	Если ТипЗнч(Группировки) <> Тип("Структура") Тогда
		Группировки = Новый Структура(Группировки, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	КонецЕсли;

	// Строится и возвращается необходимая выборка.
	Возврат ПолучитьВыборкуИтогов(мРезультатЗапросаКорОбороты, Группировки);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ФУНКЦИИ ДЛЯ РАБОТЫ С ИТОГАМИ БЕЗ ПРЕДВАРИТЕЛЬНОГО РАСЧЕТА.

// Функция позволяет рассчитать и получить требуемый остаток в соответствии с указанными фильтрами.
// При этом не требуется каких-либо предварительных расчетов итогов.
//
// Параметры:
//
//  РегистрБухгалтерии - ОбъектМетаданных или Строка или Число - регистр, имя или индекс регистра 
//                       бухгалтерии, для которого рассчитывается остаток.
//                       Если не указан, то используется первый из регистров бухгалтерии, (в порядке, 
//                       как они указаны в метаданных).
//
//  ИмяРесурса         - Строка - имя ресурса регистра бухгалтерии, по которому надо получить остаток.
//
//  ДтКт               - Строка - какой остаток требуется получить.
//                       Возможные значения:
//                         Дт - будет рассчитан дебетовый остаток.
//                         Кт - будет рассчитан кредитовый остаток.
//                         Пустая строка - будет рассчитан дебетовый минус кредитовый остаток.
//
//  МоментВремени      - Дата, МоментВремени, Граница - момент времени, на который надо получить остаток.
//                       Если параметр не задан, или передано пустое значение, остаток будет рассчитываться 
//                       по самое последнее движение.
//
//  Счета              - Строка, ПланСчетовСсылка, Массив значений типа ПланСчетовСсылка - счета,
//                       по которым следует ограничить расчет итогов - могут быть переданы в функцию
//                       или в виде строки, в которой коды счетов перечислены через запятую, или ввиде
//                       ссылки на счет, или в виде массива ссылок. Если указан счет-группа - будут
//                       включены все иерархически подчиненные счета.
//
//  ВидыСубконто       - ПланВидовХарактеристикСсылка, Массив значений типа ПланВидовХарактеристикСсылка -
//                       задает субконто, по которым рассчитываются итоги.
//                       См. описание параметра "Субконто" таблиц запросов регистров бухгалтерии.
//
//  Фильтры            - допускается два варианта синтаксиса: Строка или Структура.
//                       Если передана Строка: она должна содержать список имен полей,
//                       разделенных запятыми. В этом случае значения полей должны быть
//                       указаны в параметрах Значение1, Значение2 и. т. д.
//                       Если передана Структура, она должна содержать элементы, в которых имя поля 
//                       указано в качестве ключа, а значение поля - в качестве значения элемента.
//                       В качестве имен полей структуры можно указывать:
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                       В качестве значений элементов структуры можно указывать конкретные значения
//                       измерений и субконто, а так же массивы или списки таких значений.
//                       При расчете итоги будут отфильтрованы по указанным значениям.
//                       Если в качестве значения указывается группа (справочника), отбираются все 
//                       подчиненные элементы.
//
//  ЗначениеN          - Любого типа - значения фильтров.
//                       Параметры используются в случае, если фильтры переданы в функцию в 
//                       параметре Фильтры в виде строки. Количество и порядок значений фильтров 
//                       должны соответствовать количеству и порядку имен полей.
//
// Возвращаемое значение:
//
//  Число - величина требуемого бухгалтерского итога.
//
Функция Остаток(Знач РегистрБухгалтерии = 0, ИмяРесурса, ДтКт = "", МоментВремени = Неопределено, Знач Счета = Неопределено, ВидыСубконто = Неопределено, Знач Фильтры = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт

	// Регистр бухгалтерии, для которого выполняется расчет.
	Если ТипЗнч(РегистрБухгалтерии) = Тип("ОбъектМетаданных") Тогда
		
		мРегистрБухгалтерии = РегистрБухгалтерии;
		
	Иначе	
	
		Для Каждого ОбъектМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
			Если ТипЗнч(РегистрБухгалтерии) = Тип("РегистрБухгалтерииМенеджер." + ОбъектМетаданных.Имя) Тогда
				РегистрБухгалтерии = ОбъектМетаданных.Имя;
			КонецЕсли;
		КонецЦикла;
		
		мРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии];
		
	КонецЕсли;

	// Параметр Фильтры преобразуется в структуру, если был передан в виде строки.
	Если ТипЗнч(Фильтры) <> Тип("Структура") Тогда
		Фильтры = Новый Структура(Фильтры, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	КонецЕсли;

	// Прочие параметры расчета итогов.
	ИмяИтога = ИмяРесурса + "Остаток" + ДтКт;
	Счета    = РазобратьКодыСчетов(мРегистрБухгалтерии.ПланСчетов, Счета);

	Запрос = Новый Запрос();

	УсловиеПоСчету = "";
	УсловиеПоПолям = "";

	// Формируются параметры условий таблицы - источника запроса.
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоСчету, Счета);
	СформироватьУсловиеПоПолям(Запрос, УсловиеПоПолям, Фильтры);

	ИсточникЗапроса = "РегистрБухгалтерии." + мРегистрБухгалтерии.Имя + ".Остатки(&МоментВремени, " + УсловиеПоСчету + ", &ВидыСубконто, " + УсловиеПоПолям + ")";

	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ВидыСубконто",  ВидыСубконто);

	// Собирается полный текст запроса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(" + ИмяИтога + ") КАК " + ИмяИтога + "
	|ИЗ
	|	" + ИсточникЗапроса;

	// Выполняется запрос, выборка позиционируется на единственную строку.
	Выборка = Запрос.Выполнить().Выбрать();

	// Если выборка спозиционирована, возвращается итог.
	Если Выборка.Следующий() И Выборка[ИмяИтога] <> Null Тогда
		Возврат Выборка[ИмяИтога];
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

// Функция позволяет рассчитать и получить требуемый оборот в соответствии с указанными фильтрами.
// При этом не требуется каких-либо предварительных расчетов итогов.
//
// Параметры:
//
//  РегистрБухгалтерии - ОбъектМетаданных или Строка или Число - регистр, имя или индекс регистра 
//                       бухгалтерии, для которого рассчитывается оборот.
//                       Если не указан, то используется первый из регистров бухгалтерии, (в порядке, 
//                       как они указаны в метаданных).
//
//  ИмяРесурса         - Строка - имя ресурса регистра бухгалтерии, по которому надо получить оборот.
//
//  ДтКт               - Строка - какой оборот требуется получить.
//                       Возможные значения:
//                         Дт - будет рассчитан дебетовый оборот.
//                         Кт - будет рассчитан кредитовый оборот.
//                         Пустая строка - будет рассчитан дебетовый минус кредитовый оборот.
//
//  НачалоПериода      - Дата, МоментВремени, Граница - начало периода, за который рассчитывается оборот.
//                       Если параметр не задан, или передано пустое значение, оборот будет рассчитываться 
//                       с самого первого движения.
//
//  КонецПериода       - Дата, МоментВремени, Граница - конец периода, за который рассчитывается оборот.
//                       Если параметр не задан, или передано пустое значение, оборот будет рассчитываться 
//                       по самое последнее движение.
//
//  Счета              - Строка, ПланСчетовСсылка, Массив значений типа ПланСчетовСсылка - счета,
//                       по которым следует ограничить расчет итогов - могут быть переданы в функцию
//                       или в виде строки, в которой коды счетов перечислены через запятую, или ввиде
//                       ссылки на счет, или в виде массива ссылок. Если указан счет-группа - будут
//                       включены все иерархически подчиненные счета.
//
//  ВидыСубконто       - ПланВидовХарактеристикСсылка, Массив значений типа ПланВидовХарактеристикСсылка -
//                       задает субконто, по которым рассчитываются итоги.
//                       См. описание параметра "Субконто" таблиц запросов регистров бухгалтерии.
//
//  КорСчета           - Строка, ПланСчетовСсылка, Массив значений типа ПланСчетовСсылка - счета, по 
//                       корреспонденции с которыми следует ограничить расчет оборотов - могут быть 
//                       переданы в процедуру или в виде строки, в которой коды счетов перечислены через 
//                       запятую, или в виде ссылки на счет, или в виде массива ссылок. Если указан счет-
//                       группа - будут включены все иерархически подчиненные счета.
//
//  ВидыКорСубконто    - ПланВидовХарактеристикСсылка, Массив значений типа ПланВидовХарактеристикСсылка.
//                       задает субконто по корреспонденции с которыми следует ограничить расчет оборотов.
//                       См. описание параметра "Кор. субконто" таблицы запросов "Обороты" регистров бухгалтерии.
//
//  Фильтры            - допускается два варианта синтаксиса: Строка или Структура.
//                       Если передана Строка: она должна содержать список имен полей,
//                       разделенных запятыми. В этом случае значения полей должны быть
//                       указаны в параметрах Значение1, Значение2 и. т. д.
//                       Если передана Структура, она должна содержать элементы, в которых имя поля 
//                       указано в качестве ключа, а значение поля - в качестве значения элемента.
//                       В качестве имен полей структуры можно указывать:
//                         <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                         Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                       В качестве значений элементов структуры можно указывать конкретные значения
//                       измерений и субконто, а так же массивы или списки таких значений.
//                       При расчете итоги будут отфильтрованы по указанным значениям.
//                       Если в качестве значения указывается группа (справочника), отбираются все 
//                       подчиненные элементы.
//
//  ЗначениеN          - Любого типа - значения фильтров.
//                       Параметры используются в случае, если фильтры переданы в функцию в 
//                       параметре Фильтры в виде строки. Количество и порядок значений фильтров 
//                       должны соответствовать количеству и порядку имен полей.
//
// Возвращаемое значение:
//
//  Число - величина требуемого бухгалтерского итога.
//
Функция Оборот (Знач РегистрБухгалтерии = 0, ИмяРесурса, ДтКт = "", НачалоПериода = Неопределено, КонецПериода = Неопределено, Знач Счета = Неопределено, ВидыСубконто = Неопределено, Знач КорСчета = Неопределено, ВидыКорСубконто = Неопределено, Знач Фильтры = Неопределено, Значение1 = Неопределено, Значение2 = Неопределено, Значение3 = Неопределено, Значение4 = Неопределено, Значение5 = Неопределено, Значение6 = Неопределено, Значение7 = Неопределено, Значение8 = Неопределено, Значение9 = Неопределено) Экспорт

	// Регистр бухгалтерии, для которого выполняется расчет.
	Если ТипЗнч(РегистрБухгалтерии) = Тип("ОбъектМетаданных") Тогда
		
		мРегистрБухгалтерии = РегистрБухгалтерии;
		
	Иначе	
	
		Для Каждого ОбъектМетаданных Из Метаданные.РегистрыБухгалтерии Цикл
			Если ТипЗнч(РегистрБухгалтерии) = Тип("РегистрБухгалтерииМенеджер." + ОбъектМетаданных.Имя) Тогда
				РегистрБухгалтерии = ОбъектМетаданных.Имя;
			КонецЕсли;
		КонецЦикла;
		
		мРегистрБухгалтерии = Метаданные.РегистрыБухгалтерии[РегистрБухгалтерии];
		
	КонецЕсли;

	// Параметр Фильтры преобразуется в структуру, если был передан в виде строки.
	Если ТипЗнч(Фильтры) <> Тип("Структура") Тогда
		Фильтры = Новый Структура(Фильтры, Значение1, Значение2, Значение3, Значение4, Значение5, Значение6, Значение7, Значение8, Значение9);
	КонецЕсли;

	// Прочие параметры расчета итогов.
	ИмяИтога = ИмяРесурса + "Оборот" + ДтКт;
	Счета    = РазобратьКодыСчетов(мРегистрБухгалтерии.ПланСчетов, Счета);
	КорСчета = РазобратьКодыСчетов(мРегистрБухгалтерии.ПланСчетов, КорСчета);

	Запрос = Новый Запрос();

	УсловиеПоСчету    = "";
	УсловиеПоКорСчету = "";
	УсловиеПоПолям    = "";

	// Формируются параметры условий таблицы - источника запроса.
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоСчету,    Счета);
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоКорСчету, КорСчета, "Кор");
	СформироватьУсловиеПоПолям(Запрос, УсловиеПоПолям,    Фильтры);

	ИсточникЗапроса = "РегистрБухгалтерии." + мРегистрБухгалтерии.Имя + ".Обороты(&НачалоПериода, &КонецПериода, , " + УсловиеПоСчету + ", &ВидыСубконто, " + УсловиеПоПолям + ", " + УсловиеПоКорСчету + ", &ВидыКорСубконто)";

	Запрос.УстановитьПараметр("НачалоПериода",   НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    КонецПериода);
	Запрос.УстановитьПараметр("ВидыСубконто",    ВидыСубконто);
	Запрос.УстановитьПараметр("ВидыКорСубконто", ВидыКорСубконто);

	// Собирается полный текст запроса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(" + ИмяИтога + ") КАК " + ИмяИтога + "
	|ИЗ
	|	" + ИсточникЗапроса;

	// Выполняется запрос, выборка позиционируется на единственную строку.
	Выборка = Запрос.Выполнить().Выбрать();

	// Если выборка спозиционирована, возвращается итог.
	Если Выборка.Следующий() И Выборка[ИмяИтога] <> Null Тогда
		Возврат Выборка[ИмяИтога];
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ИСПОЛЬЗУЕМЫЕ ПРИ РАСЧЕТЕ И ПОЛУЧЕНИИ БУХГАЛТЕРСКИХ ИТОГОВ.

// Процедура формирует запрос по таблице Остатки регистра бухгалтерии 
// для последующего получения итогов из результата запроса.
// Большинство параметров формирования запроса извлекаются из переменных модуля.
// Результат запроса помещается в переменную модуля мРезультатЗапросаОстаткиИОбороты.
//
// Параметры:
//  МоментВремени        - Дата, МоментВремени, Граница - момент времени, 
//                         на который рассчитываются итоги.
//  НачальныйИлиКонечный - Строка - "Начальный" или "Конечный" - уточнение, как будут 
//                         интерпретироваться рассчитанные остатки - как начальные, 
//                         или как конечные.
//
Процедура РассчитатьОстатки(МоментВремени, НачальныйИлиКонечный)

	Запрос = Новый Запрос();

	ПоляЗапроса       = "";
	ФункцииИтогов     = "";
	ГруппировкиИтогов = "";
	УсловиеПоСчету    = "";
	УсловиеПоПолям    = "";

	// Формируются поля запроса и контрольные точки группировки итогов.
	СформироватьПоляГруппировок(ПоляЗапроса, ГруппировкиИтогов);

	// Формируются поля запроса и функции расчета итогов запроса.
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "ОстатокДт",            НачальныйИлиКонечный + "ОстатокДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "ОстатокКт",            НачальныйИлиКонечный + "ОстатокКт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "РазвернутыйОстатокДт", НачальныйИлиКонечный + "РазвернутыйОстатокДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "РазвернутыйОстатокКт", НачальныйИлиКонечный + "РазвернутыйОстатокКт");

	// Формируются параметры условий таблицы - источника запроса.
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоСчету, мСчета);
	СформироватьУсловиеПоПолям(Запрос, УсловиеПоПолям, мФильтры);

	ИсточникЗапроса = "РегистрБухгалтерии." + мРегистрБухгалтерии.Имя + ".Остатки(&МоментВремени, " + УсловиеПоСчету + ", &ВидыСубконто, " + УсловиеПоПолям + ")";

	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("ВидыСубконто",  мВидыСубконто);

	// Собирается полный текст запроса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + ПоляЗапроса + "
	|ИЗ
	|	" + ИсточникЗапроса + "
	|ИТОГИ
	|	" + ФункцииИтогов + "
	|ПО
	|	" + ГруппировкиИтогов;

	мРезультатЗапросаОстаткиИОбороты = Запрос.Выполнить();

КонецПроцедуры

// Процедура формирует запрос по таблице ОстаткиИОбороты регистра бухгалтерии 
// для последующего получения итогов из результата запроса.
// Все параметры формирования запроса извлекаются из переменных модуля.
// Результат запроса помещается в переменную модуля мРезультатЗапросаОстаткиИОбороты.
//
// Параметры:
//  Нет.
//
Процедура РассчитатьОстаткиИОбороты()

	Запрос = Новый Запрос();

	ПоляЗапроса       = "";
	ФункцииИтогов     = "";
	ГруппировкиИтогов = "";
	УсловиеПоСчету    = "";
	УсловиеПоПолям    = "";

	Если мДополнятьПериоды Тогда
		ДополнениеПериодовТаблицы = "ДвиженияИГраницыПериода";
		ДополнениеПериодовИтогов  = " ПЕРИОДАМИ(" + мПериодичность + ", , )";

	Иначе
		ДополнениеПериодовТаблицы = "";
		ДополнениеПериодовИтогов  = "";

	КонецЕсли;

	// Формируются поля запроса и контрольные точки группировки итогов.
	СформироватьПолеГруппировкиПериод(ПоляЗапроса, ГруппировкиИтогов, ДополнениеПериодовИтогов);
	СформироватьПоляГруппировок(ПоляЗапроса, ГруппировкиИтогов);

	// Формируются поля запроса и функции расчета итогов запроса.
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "НачальныйОстатокДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "НачальныйОстатокКт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "НачальныйРазвернутыйОстатокДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "НачальныйРазвернутыйОстатокКт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "КонечныйОстатокДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "КонечныйОстатокКт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "КонечныйРазвернутыйОстатокДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "КонечныйРазвернутыйОстатокКт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "ОборотДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "ОборотКт");

	// Формируются параметры условий таблицы - источника запроса.
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоСчету, мСчета);
	СформироватьУсловиеПоПолям(Запрос, УсловиеПоПолям, мФильтры);

	ИсточникЗапроса = "РегистрБухгалтерии." + мРегистрБухгалтерии.Имя + ".ОстаткиИОбороты(&НачалоПериода, &КонецПериода, " + мПериодичность + ", " + ДополнениеПериодовТаблицы + ", " + УсловиеПоСчету + ", &ВидыСубконто, " + УсловиеПоПолям + ")";

	Запрос.УстановитьПараметр("НачалоПериода", мНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  мКонецПериода);
	Запрос.УстановитьПараметр("ВидыСубконто",  мВидыСубконто);

	// Собирается полный текст запроса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + ПоляЗапроса + "
	|ИЗ
	|	" + ИсточникЗапроса + "
	|ИТОГИ
	|	" + ФункцииИтогов + "
	|ПО
	|	" + ГруппировкиИтогов;

	мРезультатЗапросаОстаткиИОбороты = Запрос.Выполнить();

КонецПроцедуры

// Процедура формирует запрос по таблице Обороты регистра бухгалтерии 
// для последующего получения итогов из результата запроса.
// Все параметры формирования запроса извлекаются из переменных модуля.
// Результат запроса помещается в переменную модуля мРезультатЗапросаКорОбороты.
//
// Параметры:
//  Нет.
//
Процедура РассчитатьКорОбороты()

	Запрос = Новый Запрос();

	ПоляЗапроса       = "";
	ФункцииИтогов     = "";
	ГруппировкиИтогов = "";
	УсловиеПоСчету    = "";
	УсловиеПоКорСчету = "";
	УсловиеПоПолям    = "";

	// Формируются поля запроса и контрольные точки группировки итогов.
	СформироватьПолеГруппировкиПериод(ПоляЗапроса, ГруппировкиИтогов);
	СформироватьПоляГруппировок(ПоляЗапроса, ГруппировкиИтогов);
	СформироватьПоляГруппировок(ПоляЗапроса, ГруппировкиИтогов, "Кор");

	// Формируются поля запроса и функции расчета итогов запроса.
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "ОборотДт", "КорОборотДт");
	СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, "ОборотКт", "КорОборотКт");

	// Формируются параметры условий таблицы - источника запроса.
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоСчету,    мСчета);
	СформироватьУсловиеПоСчету(Запрос, УсловиеПоКорСчету, мКорСчета, "Кор");
	СформироватьУсловиеПоПолям(Запрос, УсловиеПоПолям,    мФильтры);

	ИсточникЗапроса = "РегистрБухгалтерии." + мРегистрБухгалтерии.Имя + ".Обороты(&НачалоПериода, &КонецПериода, " + мПериодичность + ", " + УсловиеПоСчету + ", &ВидыСубконто, " + УсловиеПоПолям + ", " + УсловиеПоКорСчету + ", &ВидыКорСубконто)";

	Запрос.УстановитьПараметр("НачалоПериода",   мНачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",    мКонецПериода);
	Запрос.УстановитьПараметр("ВидыСубконто",    мВидыСубконто);
	Запрос.УстановитьПараметр("ВидыКорСубконто", мВидыКорСубконто);

	// Собирается полный текст запроса.
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	" + ПоляЗапроса + "
	|ИЗ
	|	" + ИсточникЗапроса + "
	|ИТОГИ
	|	" + ФункцииИтогов + "
	|ПО
	|	" + ГруппировкиИтогов;

	мРезультатЗапросаКорОбороты = Запрос.Выполнить();

КонецПроцедуры

// Функция создает выборку результата запроса и позиционирует ее на требуемое значение.
// Выборку можно использовать для извлечения из нее итогов и построения подчиненных выборок.
//
// Параметры:
//  РезультатЗапроса - результат запроса, от которого надо строить выборку.
//  Группировки      - Структура - группировки, по которым надо строить выборку, 
//                     и значения группировок, по которым надо позиционировать выборку.
//                     Имя группировки указывается в качестве ключа, а значение - 
//                     в качестве значения элемента структуры.
//
// Возвращаемое значение:
//  РезультатЗапроса, ВыборкаИзРезультатаЗапроса, Неопределено.
//  Если не указана ни одна группировка, возвращается результат запроса по бухгалтерским итогам.
//  Если в параметрах функции указаны группировки и имеются итоги по указанным значениям группировок, 
//  возвращается ВыборкаИзРезультатаЗапроса.
//  Если указаны неверные группировки, или нет итогов по указанным группировкам, возвращается Неопределено.
//
Функция ПолучитьВыборкуИтогов(РезультатЗапроса, Группировки, ДополнятьПериоды = Ложь)

	Выборка           = РезультатЗапроса;
	ДополнениеВыборки = Неопределено;
	Номер             = 0;

	Для каждого Группировка Из Группировки Цикл

		Номер = Номер + 1;

		Если РезультатЗапроса.Колонки.Найти(Группировка.Ключ) = Неопределено Тогда
			Сообщить("Неверное имя группировки: """ + Группировка.Ключ + """.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;

		Если Группировка.Ключ = "Период" И ДополнятьПериоды Тогда
			ДополнениеВыборки = "Все";
		КонецЕсли;

		Выборка = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, Группировка.Ключ, ДополнениеВыборки);

		Если НЕ Выборка.НайтиСледующий(Группировка.Значение, Группировка.Ключ) Тогда
			Возврат Неопределено;
		КонецЕсли;

		ДополнениеВыборки = Группировка.Ключ;

	КонецЦикла;

	Попытка

		// Проверка валидности остатков по Дт-Кт для Активных и Пассивных Счетов
		Если Выборка.ВидСчета = ВидСчета.АктивноПассивный Тогда // В этом случае никаких проверок делать не надо.
			Возврат Выборка;
		КонецЕсли;

		Если НЕ мИтоги.Свойство("НачальныйОстатокДт") Тогда // не нашли нужные нам поля.
			Возврат Выборка;
		КонецЕсли;

		// Скопируем данные в новую структуру, т.к. в результате запроса ничего не изменить.
		ИтогВыборки = Новый Структура();
		Для каждого Колонка из мРезультатЗапросаОстаткиИОбороты.Колонки Цикл
			ИтогВыборки.Вставить(Колонка.Имя, Выборка[Колонка.Имя]);
		КонецЦикла;

		// Проверка валидности полей.
		Если ИтогВыборки.ВидСчета = ВидСчета.Активный Тогда

			Если ИтогВыборки.СуммаНачальныйОстатокКт <> 0 Тогда
				ИтогВыборки.СуммаНачальныйОстатокДт = ИтогВыборки.СуммаНачальныйОстатокДт + (-ИтогВыборки.СуммаНачальныйОстатокКт);
				ИтогВыборки.СуммаНачальныйОстатокКт = 0;
			КонецЕсли;

			Если ИтогВыборки.СуммаКонечныйОстатокКт <> 0 Тогда
				ИтогВыборки.СуммаКонечныйОстатокДт = ИтогВыборки.СуммаКонечныйОстатокДт + (-ИтогВыборки.СуммаКонечныйОстатокКт);
				ИтогВыборки.СуммаКонечныйОстатокКт =0;
			КонецЕсли;

		КонецЕсли;

		Если ИтогВыборки.ВидСчета = ВидСчета.Пассивный Тогда

			Если ИтогВыборки.СуммаНачальныйОстатокДт <> 0 Тогда
				ИтогВыборки.СуммаНачальныйОстатокКт = ИтогВыборки.СуммаНачальныйОстатокКт + (-ИтогВыборки.СуммаНачальныйОстатокДт);
				ИтогВыборки.СуммаНачальныйОстатокДт = 0;
			КонецЕсли;

			Если ИтогВыборки.СуммаКонечныйОстатокДт <> 0 Тогда
				ИтогВыборки.СуммаКонечныйОстатокКт = ИтогВыборки.СуммаКонечныйОстатокКт + (-ИтогВыборки.СуммаКонечныйОстатокДт);
				ИтогВыборки.СуммаКонечныйОстатокДт =0;
			КонецЕсли;

		КонецЕсли;

		Возврат ИтогВыборки;

	Исключение
		Возврат Выборка;

	КонецПопытки;

КонецФункции

// Процедура добавляет поле Период в список полей запроса 
// и в список контрольных точек группировки итогов.
//
// Параметры:
//  ПоляЗапроса       - Строка - формируемый список полей запроса.
//  ГруппировкиИтогов - Строка - формируемый список контрольных точек группировки итогов.
//
Процедура СформироватьПолеГруппировкиПериод(ПоляЗапроса, ГруппировкиИтогов, ДополнениеПериодовИтогов = "")

	Если мПериодичность <> "ПЕРИОД" Тогда

		ИмяГруппировки = "Период";

		Если СтруктураСодержитИмена(мГруппировки, ИмяГруппировки) Тогда

			ДобавитьПоле(ПоляЗапроса,       мРазделительПолей, ИмяГруппировки);
			ДобавитьПоле(ГруппировкиИтогов, мРазделительПолей, ИмяГруппировки + ДополнениеПериодовИтогов);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура добавляет поля группировок в список полей запроса 
// и в список контрольных точек группировки итогов.
//
// Параметры:
//  ПоляЗапроса       - Строка - формируемый список полей запроса.
//  ГруппировкиИтогов - Строка - формируемый список контрольных точек группировки итогов.
//  Кор               - Строка - в параметр надо передавать значение "Кор" для 
//                      формирования полей по кор. счетам, измерениям и субконто.
//
Процедура СформироватьПоляГруппировок(ПоляЗапроса, ГруппировкиИтогов, Кор = "")

	ПланСчетов = мРегистрБухгалтерии.ПланСчетов;

	// Группировка по счету.
	Если ПланСчетов <> Неопределено Тогда

		ИмяГруппировки = Кор + "Счет";

		Если СтруктураСодержитИмена(мГруппировки, ИмяГруппировки) Тогда

			ДобавитьПоле(ПоляЗапроса,       мРазделительПолей, ИмяГруппировки);
			Если ИмяГруппировки = "Счет" Тогда
				ДобавитьПоле(ПоляЗапроса,   мРазделительПолей, ИмяГруппировки + ".Вид КАК ВидСчета");
			КонецЕсли;
			ДобавитьПоле(ГруппировкиИтогов, мРазделительПолей, ИмяГруппировки + " ИЕРАРХИЯ");

		КонецЕсли;

	КонецЕсли;

	// Группировки по измерениям.
	Для каждого Измерение Из мРегистрБухгалтерии.Измерения Цикл

		Если ПустаяСтрока(Кор) ИЛИ НЕ Измерение.Балансовый  Тогда

			ИмяГруппировки = Измерение.Имя + Кор;

			Если СтруктураСодержитИмена(мГруппировки, ИмяГруппировки) Тогда

				ДобавитьПоле(ПоляЗапроса,       мРазделительПолей, ИмяГруппировки);
				ДобавитьПоле(ГруппировкиИтогов, мРазделительПолей, ИмяГруппировки + " ИЕРАРХИЯ");

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Если ПланСчетов = Неопределено ИЛИ ПланСчетов.ВидыСубконто = Неопределено Тогда
		КоличествоСубконто = 0;

	Иначе
		КоличествоСубконто = ПланСчетов.МаксКоличествоСубконто;

	КонецЕсли;

	Если ТипЗнч(мВидыСубконто) = Тип("Массив") Тогда
		КоличествоСубконто = Мин(КоличествоСубконто, мВидыСубконто.Количество());

	ИначеЕсли мВидыСубконто <> Неопределено Тогда
		КоличествоСубконто = Мин(КоличествоСубконто, 1);

	КонецЕсли;

	// Группировки по субконто.
	Для Номер = 1 По КоличествоСубконто Цикл

		ИмяГруппировки = Кор + "Субконто" + Номер;

		Если СтруктураСодержитИмена(мГруппировки, ИмяГруппировки) Тогда

			ДобавитьПоле(ПоляЗапроса,       мРазделительПолей, ИмяГруппировки);
			ДобавитьПоле(ГруппировкиИтогов, мРазделительПолей, ИмяГруппировки + " ИЕРАРХИЯ");

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура добавляет поля итогов в список полей запроса 
// и в список функций расчета итогов.
//
// Параметры:
//  ПоляЗапроса    - Строка - формируемый список полей запроса.
//  ФункцииИтогов  - Строка - формируемый список функций расчета итогов.
//  ИмяИтога       - Строка - имя итога, который надо рассчитать.
//                   Итог рассчитывается по всем ресурсам, перечисленным в переменной мРесурсы.
//  ПсевдонимИтога - Строка - псевдоним итога, по которому к нему будет осуществляться обращение.
//                   Если не указан, используется ИмяИтога.
//
Процедура СформироватьПоляРесурсов(ПоляЗапроса, ФункцииИтогов, ИмяИтога, ПсевдонимИтога = Неопределено)

	Если ПсевдонимИтога = Неопределено Тогда
		ПсевдонимИтога = ИмяИтога;
	КонецЕсли;

	Если СтруктураСодержитИмена(мИтоги, ПсевдонимИтога) Тогда

		Для каждого Ресурс Из мРегистрБухгалтерии.Ресурсы Цикл

			Если СтруктураСодержитИмена(мРесурсы, Ресурс.Имя) Тогда

				ДобавитьПоле(ПоляЗапроса,   мРазделительПолей, Ресурс.Имя + ИмяИтога + " КАК " + Ресурс.Имя + ПсевдонимИтога);
				ДобавитьПоле(ФункцииИтогов, мРазделительПолей, "СУММА(" + Ресурс.Имя + ПсевдонимИтога + ")");

			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура формирует параметры "Условие по счету", "Условие по кор. счету" таблицы - 
// источника данных запроса, и добавляет параметр запроса для использования в этом условии.
//
// Параметры:
//  Запрос         - запрос, для которого формируется условие.
//  УсловиеПоСчету - Строка - формируемое условие по счету.
//  Счета          - ПланСчетовСсылка или массив значений типа ПланСчетовСсылка.
//                   Счета, по которым фильтруется запрос.
//                   Если указаны счета-группы, отбираются все иерархически подчиненные счета.
//  Кор            - Строка - в параметр надо передавать значение "Кор" для 
//                   формирования условия по кор. счету.
//
Процедура СформироватьУсловиеПоСчету(Запрос, УсловиеПоСчету, Счета, Кор = "")

	Если Счета <> Неопределено Тогда

		Запрос.УстановитьПараметр(Кор + "Счет", Счета);
		УсловиеПоСчету = Кор + "Счет В ИЕРАРХИИ (&" + Кор + "Счет)";

	КонецЕсли;

КонецПроцедуры

// Процедура формирует параметр "Условие", таблицы - источника данных запроса, 
// и добавляет параметры запроса для использования в этом условии.
//
// Параметры:
//  Запрос           - запрос, для которого формируется условие.
//  УсловиеПоПолям   - Строка - формируемое условие по полям таблицы - источника запроса.
//  СтруктураУсловий - Структура - описывающая поля таблицы - источника запроса и значения
//                     этих полей для фильтрации итогов.
//                     В качестве имен полей структуры можно указывать:
//                       <ИмяИзмерения> - имена измерений регистра, как они заданы в метаданных,
//                       Субконто1, Субконто2, и т.д., до макс. количества субконто.
//                     В качестве значений элементов структуры можно указывать конкретные значения
//                     измерений и субконто, а так же массивы или списки таких значений.
//                     При расчете итоги будут отфильтрованы по указанным значениям.
//                     Если в качестве значения указывается группа (справочника), отбираются все 
//                     подчиненные элементы.
//
Процедура СформироватьУсловиеПоПолям(Запрос, УсловиеПоПолям, СтруктураУсловий)

	Если ТипЗнч(СтруктураУсловий) = Тип("Структура") Тогда

		Для каждого Элемент Из СтруктураУсловий Цикл

			ИмяПоля      = Элемент.Ключ;
			ЗначениеПоля = Элемент.Значение;

			Запрос.УстановитьПараметр(ИмяПоля, ЗначениеПоля);

			Попытка

				ЭтоГруппа    = ЗначениеПоля.ЭтоГруппа;
				ТекстУсловия = ?(ЭтоГруппа, " В ИЕРАРХИИ ", " = ");

			Исключение

				ТекстУсловия = ?(ТипЗнч(ЗначениеПоля) = Тип("Массив"), " В ИЕРАРХИИ ", " = ")

			КонецПопытки;

			ДобавитьПоле(УсловиеПоПолям, "И ", ИмяПоля + ТекстУсловия + "(&" + ИмяПоля + ")");

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Функция разбирает строку, содержащую коды счетов, и преобразует ее в массив счетов.
//
// Параметры:
//  ПланСчетов - ПланСчетовМенеджер план счетов, в котором следует искать счета по указанным кодам.
//  Счета      - Строка - список кодов счетов через запятую.
//
// Возвращаемое значение:
//  Массив значений типа ПланСчетовСсылка - массив найденных счетов.
//
Функция РазобратьКодыСчетов(Знач ПланСчетов, Знач Счета)

	Если ПланСчетов = Неопределено Тогда
		Возврат Неопределено;

	ИначеЕсли ТипЗнч(Счета) <> Тип("Строка") Тогда
		Возврат Счета;

	Иначе
		ПланСчетов   = ПланыСчетов[ПланСчетов.Имя];
		МассивСчетов = Новый Массив();

		Счета = СтрЗаменить(Счета, " ", "");
		Счета = СтрЗаменить(Счета, ",", Символы.ПС);

		Для Номер = 1 По СтрЧислоСтрок(Счета) Цикл
			КодСчета   = СтрПолучитьСтроку(Счета, Номер);
			СчетСсылка = ПланСчетов.НайтиПоКоду(КодСчета);

			МассивСчетов.Добавить(СчетСсылка);
		КонецЦикла;

		Возврат МассивСчетов;

	КонецЕсли;

КонецФункции

// Функция проверяет, содержит ли структура хотя бы одно из перечисленных имен 
// в качестве ключей элементов.
//
// Параметры:
//  Структура - структура, которая проверяется.
//  Имена     - Строка - список имен через запятую.
//
// Возвращаемое значение:
//  Истина - структура содержит одно из указанных имен.
//  Ложь   - структура не содержит ни одного из указанных имен.
//
Функция СтруктураСодержитИмена(Структура, Знач Имена)

	Имена = СтрЗаменить(Имена, " ", "");
	Имена = СтрЗаменить(Имена, ",", Символы.ПС);

	Для Номер = 1 По СтрЧислоСтрок(Имена) Цикл

		Имя = СтрПолучитьСтроку(Имена, Номер);

		Если Структура.Свойство(Имя) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Процедура добавляет подстроку в конец строки, отделяя ее разделителем.
// Разделитель добавляется только в том случае, если исходная строка не пустая.
//
// Параметры:
//  Строка      - строка, в конец которой добавляется подстрока.
//  Разделитель - последовательность символов, которой отделяется добавляемая подстрока.
//  Добавка     - добавляемая подстрока.
//
Процедура ДобавитьПоле(Строка, Разделитель, Добавка)

	Если ПустаяСтрока(Строка) Тогда
		Строка = Добавка;
	Иначе
		Строка = Строка + Разделитель + Добавка;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ.

мРазделительПолей = "," + Символы.ПС + Символы.Таб;