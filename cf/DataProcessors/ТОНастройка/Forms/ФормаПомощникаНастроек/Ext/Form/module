Перем мДрайверТО;
Перем мУстройство;
Перем мСоответствиеВидовТО;
Перем мСоответствиеЗначенийВидовТО;

Перем мСоответствиеКартинокТО;
Перем мСоответствиеСсылокКонфигураций;

Перем мМенеджерЗаписи;

Перем мВидТОПоУмолчанию Экспорт;

/////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ ФОРМ

Процедура ПриОткрытии()

	УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.Приветствие);

	ЭлементыФормы.НадписьСсылкаПоддерживаемоеТО.Значение = мСоответствиеСсылокКонфигураций[АдресРесурсовОбозревателя];

КонецПроцедуры

Процедура КнопкаНазадНажатие(Элемент)

	НазадНажатие();

КонецПроцедуры

Процедура КнопкаДалееНажатие(Элемент)

	ДалееНажатие();

КонецПроцедуры

Процедура ПомощникПиНТОПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера Тогда

		ЭлементыСправочника = ПолучитьОбработки(мСоответствиеВидовТО[ВидТО]); // Получаем из справочника "ОбработкиОбслуживанияТО" уже загруженные обработки

		// Сначала выполняем обход справочника
		ТаблицаЗагруженныхОО.Очистить();
		Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
			НоваяСтрока                       = ТаблицаЗагруженныхОО.Добавить();
			НоваяСтрока.Наименование          = ЭлементСправочника.Наименование;
			НоваяСтрока.ОбработкаОбслуживания = ЭлементСправочника.Ссылка;
			НоваяСтрока.ВерсияAPI             = ЭлементСправочника.ВерсияAPI;
		КонецЦикла;

		ТаблицаЗагруженныхОО.Сортировать("Наименование Возр");

		УстановитьДоступностьИВидимость();

		Если ЭлементыФормы.ТаблицаЗагруженныхОО.Видимость И мДрайверТО <> Неопределено Тогда
			ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущаяСтрока = ТаблицаЗагруженныхОО.Найти(мДрайверТО, "ОбработкаОбслуживания");
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеОбработкиОбслуживания Тогда

		Каталог = "";
		ТаблицаОбработокОбслуживания.Очистить();

		КаталогСистемы = СтрЗаменить(КаталогПрограммы(), "bin\","");
		ВерсияСистемы  = СтрЗаменить(Метаданные.Версия, ".", "_");
		ЭлементыФормы.НадписьКаталогПоУмолчанию.Значение = КаталогСистемы + "tmplts\1c\" + АдресРесурсовОбозревателя + "\" + ВерсияСистемы + "\TradeWareEPF";

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства Тогда

		ТаблицаСозданныхУстройств = ПолучитьТорговоеОборудование(мДрайверТО); // Получаем из справочника "ТорговоеОборудование" уже созданные модели
		ТаблицаСозданныхУстройств.Сортировать("Наименование Возр, Модель Возр");

		УстановитьДоступностьИВидимость();

		Если ЭлементыФормы.ТаблицаСозданныхУстройств.Видимость И мУстройство <> Неопределено Тогда
			ЭлементыФормы.ТаблицаСозданныхУстройств.ТекущаяСтрока = ТаблицаСозданныхУстройств.Найти(мУстройство.Наименование, "Наименование");
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеНовогоУстройства Тогда

		ЭлементыСправочника = ПолучитьПоддерживаемыеМоделиТО(мДрайверТО);

		// Сначала выполняем обход справочника
		ТаблицаПоддерживаемыхМоделей.Очистить();
		Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
			НоваяСтрока        = ТаблицаПоддерживаемыхМоделей.Добавить();
			НоваяСтрока.Модель = ЭлементСправочника.Модель;
		КонецЦикла;

		ТаблицаСозданныхУстройств.Сортировать("Наименование Возр, Модель Возр");
	КонецЕсли;

КонецПроцедуры

Процедура КаталогНачалоВыбора(Элемент, СтандартнаяОбработка)

	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Укажите каталог, содержащий обработки обслуживания";

	КаталогНаДиске = Новый Файл(ЭлементыФормы.НадписьКаталогПоУмолчанию.Значение);
	Если КаталогНаДиске.Существует() Тогда
		Диалог.Каталог = ЭлементыФормы.НадписьКаталогПоУмолчанию.Значение;
	КонецЕсли;

	СписокФайлов      = Неопределено;

	Пока Истина Цикл
		Если Не Диалог.Выбрать() Тогда // Выбирается каталог с обработками обслуживания
			Возврат;
		КонецЕсли;

		СписокФайлов = НайтиФайлы(Диалог.Каталог, "*.epf"); // Получаем список всех обработок в выбранном каталоге

		// Если не обнаружено ни одной обработки...
		Если СписокФайлов.Количество() = 0 Тогда
			Ответ = Вопрос("В указанном каталоге не обнаружены обработки обслуживания." + Символы.ПС + "Выбрать другой каталог?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Каталог = "";
				ТаблицаОбработокОбслуживания.Очистить();
				Прервать;
			КонецЕсли;
		Иначе
			Каталог = Диалог.Каталог;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	// Если не обнаружено ни одной обработки, то завершаем импорт
	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ЗагрузитьОбработкиИзКаталога();

КонецПроцедуры

Процедура ТаблицаЗагруженныхООПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанныеОО = ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные.ОбработкаОбслуживания;

		Если мДрайверТО <> ТекущиеДанныеОО Тогда
			мДрайверТО     = ТекущиеДанныеОО;
			мУстройство    = Неопределено;
			мМенеджерЗаписи = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ВидТОПриИзменении(Элемент)

	мДрайверТО  = Неопределено;
	ТаблицаЗагруженныхОО.Очистить();
	мУстройство = Неопределено;
	ТаблицаСозданныхУстройств.Очистить();

КонецПроцедуры

Процедура ТаблицаСозданныхУстройствПриАктивизацииСтроки(Элемент)

	ТекущиеДанныеСсылка = ЭлементыФормы.ТаблицаСозданныхУстройств.ТекущиеДанные.Ссылка;
	Если мУстройство <> ТекущиеДанныеСсылка Тогда
		мУстройство = ТекущиеДанныеСсылка;
		мМенеджерЗаписи = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ДрайверТОДобавитьПриИзменении(Элемент)

	УстановитьДоступностьИВидимость();

КонецПроцедуры

Процедура МодельТОДобавитьПриИзменении(Элемент)

	УстановитьДоступностьИВидимость();

КонецПроцедуры

Процедура ПанельПереходаОтменить(Кнопка)

	Ответ = Вопрос("Новое устройство еще не было добавлено." + Символы.ПС + "Вы действительно хотите завершить работу помощника?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Закрыть();
	КонецЕсли;

КонецПроцедуры

Процедура НадписьСсылкаПоддерживаемоеТОНажатие(Элемент)

	ЗапуститьПриложение(ЭлементыФормы.НадписьСсылкаПоддерживаемоеТО.Значение);

КонецПроцедуры

Процедура ТаблицаПоддерживаемыхМоделейПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = ЭлементыФормы.ТаблицаПоддерживаемыхМоделей.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Наименование = ТекущиеДанные.Модель;
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаЗагруженныхООВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ДалееНажатие();

КонецПроцедуры

Процедура ТаблицаОбработокОбслуживанияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ДалееНажатие();

КонецПроцедуры

Процедура ТаблицаСозданныхУстройствВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ДалееНажатие();

КонецПроцедуры

Процедура ТаблицаПоддерживаемыхМоделейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ДалееНажатие();

КонецПроцедуры

Процедура ТаблицаЗагруженныхООПриПолученииДанных(Элемент, ОформленияСтрок)

	Для Каждого СтрокаТаблицы Из ОформленияСтрок Цикл
		СтрокаТаблицы.ЦветТекста = 
		 ?(СтрокаТаблицы.ДанныеСтроки.ВерсияAPI < ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО(), ЦветаСтиля.ЦветОтрицательногоЧисла, ЦветаСтиля.ЦветТекстаФормы)
	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ МЕТОДЫ И ФУНКЦИИ

// Выполняет набор необходимых проверок и действий при нажатии "Назад" (переход на предыдущую страницу)
Процедура НазадНажатие()

	// Выбор и установка предыдущей страницы
	Если ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница <> ЭлементыФормы.ПомощникПиНТО.Страницы.Приветствие Тогда
		Если ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера Тогда
			УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.Приветствие);
		ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеОбработкиОбслуживания Тогда
			УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера);
		ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства Тогда
			УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера);
		ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеНовогоУстройства Тогда
			Если ПолучитьТорговоеОборудование(мДрайверТО).Количество() = 0 Тогда
				УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера);
			Иначе
				УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Выполняет набор необходимых проверок и действий при нажатии "Далее" (переход на следующую страницу)
Процедура ДалееНажатие()

	Если ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.Приветствие Тогда

		ПродолжитьРаботуПомощника();
		Возврат;

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера Тогда

		Если ДрайверТО = 0 И (ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные.ВерсияAPI < ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО()
		 Или ОбновлениеВыбраннойОбработки) Тогда
			Если Не ОбновлениеВыбраннойОбработки Тогда
				Ответ = Вопрос("Загруженная обработка устарела и не может использоваться для работы с оборудованием." + Символы.ПС +
				 "Можно обновить обработку, выбрав файл с обновленной обработкой. Обновить?", РежимДиалогаВопрос.ДаНет);
			Иначе
				Ответ = КодВозвратаДиалога.Да;
			КонецЕсли;
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
				Диалог.Заголовок = "Укажите обновленную обработку обслуживания";
				Диалог.Фильтр    = "Новая обработка обслуживания (" +
				 ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные.ОбработкаОбслуживания.ИмяФайла + ")|" +
				 ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные.ОбработкаОбслуживания.ИмяФайла;
				Диалог.ПолноеИмяФайла = ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные.ОбработкаОбслуживания.ИмяФайла;

				Пока Истина Цикл
					Если Не Диалог.Выбрать() Тогда // Выбирается файл с новой обработкой обслуживания
						Если ОбновлениеВыбраннойОбработки Тогда
							Ответ = Вопрос("Обработка обслуживания не была обновлена." + Символы.ПС +
							 "Перейти к следующему шагу помощника?", РежимДиалогаВопрос.ДаНет);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
						Возврат;
					КонецЕсли;
					
					ВыбранныйФайл = Диалог.ВыбранныеФайлы[0]; // Получаем полный путь к выбранному файлу

					// Находим запись для обновления в справочнике "ОбработкиОбслуживания"
					ОбъектСправочника = ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущиеДанные.ОбработкаОбслуживания.ПолучитьОбъект();;
					Попытка
						Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ВыбранныйФайл) Тогда
							ОбъектСправочника.Записать();
							Прервать;
						КонецЕсли;
					Исключение
						ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);

						Ответ = Вопрос("Не удалось загрузить выбранный файл." + Символы.ПС + "Выбрать другой файл?", РежимДиалогаВопрос.ДаНет);
						Если Ответ = КодВозвратаДиалога.Нет Тогда
							Возврат;
						КонецЕсли;
					КонецПопытки;
				КонецЦикла;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеОбработкиОбслуживания Тогда

		Если ПустаяСтрока(Каталог) Тогда
			Предупреждение("Выберите каталог с обработками обслуживания или " + Символы.ПС + 
			 "вернитесь назад и выберите обработку обслуживания из списка");
			Возврат;
		ИначеЕсли ЭлементыФормы.ТаблицаОбработокОбслуживания.ТекущаяСтрока = Неопределено Тогда
			Предупреждение("Укажите обработку обслуживания, которую необходимо добавить.");
			Возврат;
		КонецЕсли;

		ОбъектСправочника = Справочники.ОбработкиОбслуживанияТО.СоздатьЭлемент();
		Попытка
			ФайлОО = ЭлементыФормы.ТаблицаОбработокОбслуживания.ТекущаяСтрока.ОбработкаОбслуживания;
			Если ОбъектСправочника.ПолучитьФорму().ЗагрузитьОбработкуОбслуживания(ФайлОО.ПолноеИмя) Тогда
				ОбъектСправочника.Записать();
				мДрайверТО = ОбъектСправочника.Ссылка;
			КонецЕсли;
		Исключение
			мДрайверТО = Неопределено;
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;

		мМенеджерЗаписи = Неопределено;

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства Тогда

		Если ПодключаемоеУстройство = 0 Тогда
			НастройкаИПроверкаПараметров();
			Возврат;
		КонецЕсли;

	ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеНовогоУстройства Тогда

		Если ЭлементыФормы.ТаблицаПоддерживаемыхМоделей.ТекущаяСтрока = Неопределено Тогда
			Предупреждение("Укажите модель, которую необходимо добавить, или " + Символы.ПС + 
			 "вернитесь назад и выберите устройство из списка");
			Возврат;
		ИначеЕсли ПустаяСтрока(Наименование) Тогда
			Предупреждение("Укажите наименование добавляемого устройства");
			Возврат;
		ИначеЕсли Справочники.ТорговоеОборудование.НайтиПоНаименованию(Наименование) <> Справочники.ТорговоеОборудование.ПустаяСсылка() Тогда
			Ответ = Вопрос("Данное наименование уже используется для другого устройства." + Символы.ПС + 
			"Желаете создать устройство с данным наименованием?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ОбъектСправочника = Справочники.ТорговоеОборудование.СоздатьЭлемент();
		Попытка
			ОбъектСправочника.Модель = ЭлементыФормы.ТаблицаПоддерживаемыхМоделей.ТекущаяСтрока.Модель;
			ОбъектСправочника.Наименование = Наименование;
			ОбъектСправочника.ОбработкаОбслуживания = мДрайверТО;
			ОбъектСправочника.Записать();
			мУстройство = ОбъектСправочника.Ссылка;
		Исключение
			мУстройство = Неопределено;
			ТаблицаСозданныхУстройств.Очистить();
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент с кодом " + ОбъектСправочника.Код, , , СтатусСообщения.Внимание);
			Возврат;
		КонецПопытки;

		мМенеджерЗаписи = Неопределено;

		НастройкаИПроверкаПараметров();
		Возврат;
	КонецЕсли;

	// Выбор и установка следующей страницы
	Если ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница <> ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеНовогоУстройства Тогда
		Если ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.Приветствие Тогда
			УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера);
		ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера Тогда
			Если ДрайверТО = 0 Тогда
				Если ПолучитьТорговоеОборудование(мДрайверТО).Количество() = 0 Тогда
					УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеНовогоУстройства);
				Иначе
					УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
				КонецЕсли;
			Иначе
				УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеОбработкиОбслуживания);
			КонецЕсли;
		ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеОбработкиОбслуживания Тогда
			УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
		ИначеЕсли ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства
		   И ПодключаемоеУстройство = 1 Тогда
			УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ДобавлениеНовогоУстройства);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавливает доступность страниц и кнопок "Назад" и "Далее"
Процедура УстановитьСтраницуИДоступностьКнопок(НоваяСтраница)

	// Установка доступности страниц и кнопок
	ЭлементыФормы.ПомощникПиНТО.ТекущаяСтраница = НоваяСтраница;
	ЭлементыФормы.ПанельПерехода.Кнопки.Назад.Доступность = НоваяСтраница <> ЭлементыФормы.ПомощникПиНТО.Страницы.Приветствие;
	ЭлементыФормы.ПанельПерехода.Кнопки.Далее.Доступность = Истина;

КонецПроцедуры

// Проверяет текущее состояние значений элементов страниц и устанавливает доступность и видимость необходимых элементов
Процедура УстановитьДоступностьИВидимость()
	// Установка доступности для остальных элементов формы
	ЭлементыФормы.ДрайверТОИспользовать.Доступность = (ТаблицаЗагруженныхОО.Количество() > 0);
	Если ТаблицаЗагруженныхОО.Количество() = 0 Тогда
		ДрайверТО = 1;
	ИначеЕсли мДрайверТО = Неопределено Тогда
		ДрайверТО = 0;
		ЭлементыФормы.ТаблицаЗагруженныхОО.ТекущаяСтрока = ТаблицаЗагруженныхОО[0];
	КонецЕсли;
	ЭлементыФормы.ТаблицаЗагруженныхОО.Видимость = (ДрайверТО <> 1);
	ЭлементыФормы.ОбновлениеВыбраннойОбработки.Видимость = (ДрайверТО <> 1);

	ЭлементыФормы.МодельТОСозданная.Доступность = (ТаблицаСозданныхУстройств.Количество() > 0);
	Если ТаблицаСозданныхУстройств.Количество() = 0 Тогда
		ПодключаемоеУстройство = 1;
	ИначеЕсли мУстройство = Неопределено Тогда
		ПодключаемоеУстройство = 0;
		ЭлементыФормы.ТаблицаСозданныхУстройств.ТекущаяСтрока = ТаблицаСозданныхУстройств[0];
	КонецЕсли;
	ЭлементыФормы.ТаблицаСозданныхУстройств.Видимость = (ПодключаемоеУстройство <> 1);

КонецПроцедуры

// Функция возвращает информацию об обработках обслуживания.
//
// Параметры
//  Вид               - <Перечисление "ВидыТорговогоОборудования">, <Неопределено>
//                    - В случае, если данный параметр имеет значение, отличное от
//                      "Неопределено", будет возвращён список обработок обслуживания
//                      переданного вида ТО. Если отбор исключает данное значение,
//                      то список будет пуст.
//
// Возвращаемое значение:
//  <ТаблицаЗначений> - Таблица, содержащая информацию об обработках обслуживания
//
Функция ПолучитьОбработки(Вид) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|    СпрОбработки.Код,
	|    СпрОбработки.Наименование,
	|    СпрОбработки.ПометкаУдаления,
	|    СпрОбработки.Ссылка,
	|    СпрОбработки.Описание,
	|    СпрОбработки.Вид,
	|    СпрОбработки.ИмяФайла,
	|    СпрОбработки.Версия,
	|    СпрОбработки.ВерсияAPI,
	|    СпрОбработки.Идентификатор,
	|    СпрОбработки.Обработка
	|ИЗ
	|    Справочник.ОбработкиОбслуживанияТО КАК СпрОбработки
	|ГДЕ
	|    СпрОбработки.Вид = &Вид");

	Запрос.УстановитьПараметр("Вид", Вид);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьОбработки()

// Загружет из каталога обнаруженные обработки обслуживания
// в соответствии указанным видом ТО
Процедура ЗагрузитьОбработкиИзКаталога()

	Если ПустаяСтрока(Каталог) Тогда
		Возврат;
	КонецЕсли;
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");

	ОбработокВТаблице = 0;
	СписокФайлов = НайтиФайлы(Каталог, "*.epf"); // Получаем список всех обработок в выбранном каталоге

	ЭлементыСправочника = ПолучитьОбработки(мСоответствиеВидовТО[ВидТО]); // Получаем из справочника "ОбработкиОбслуживанияТО" уже загруженные обработки
	ПолноеИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(Каталог, "\temp.epf"); // Временный файл для работы с ОО из справочника
	СоответствиеИмен = Новый Соответствие;

	// Индикатор хода работы с ОО справочника
	Индикатор.НаименованиеОбработкиДанных = "Обработка справочника обработок обслуживания";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = ЭлементыСправочника.Количество();
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	// Сначала выполняем обход справочника
	Для Каждого ЭлементСправочника Из ЭлементыСправочника Цикл
		Индикатор.КомментарийОбработкиДанных = "Обработка элемента: " + ЭлементСправочника.Наименование;
		Попытка
			СоответствиеИмен.Вставить(НРег(ЭлементСправочника.ИмяФайла), ЭлементСправочника.Ссылка);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		Индикатор.Значение = Индикатор.Значение + 1;
	КонецЦикла;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	// Индикатор хода работы с ОО из каталога
	Индикатор.НаименованиеОбработкиДанных = "Обработка каталога";
	Индикатор.КомментарийОбработкиДанных  = "";
	Индикатор.КомментарийЗначения         = "Обработано";
	Индикатор.МаксимальноеЗначение        = СписокФайлов.Количество();
	Индикатор.Значение = 0;
	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Открыть();
	КонецЕсли;

	ТаблицаОбработокОбслуживания.Очистить();

	Для Каждого ФайлОО Из СписокФайлов Цикл
		Индикатор.КомментарийОбработкиДанных = "Обработка файла: " + ФайлОО.Имя;
		Попытка
			ООИзФайла = ВнешниеОбработки.Создать(ФайлОО.ПолноеИмя);

			ВерсияAPI = ПолучитьСерверТО().ПолучитьВерсиюAPIОбработкиОбслуживания(ООИзФайла);
		Исключение
			Индикатор.Значение = Индикатор.Значение + 1;
			Продолжить;
		КонецПопытки;

		Если ВерсияAPI >= ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО()
		   И ПолучитьСерверТО().ПолучитьОписаниеОбработкиОбслуживания(ООИзФайла).Вид = мСоответствиеВидовТО[ВидТО] Тогда // Версия API обработки не соответствует версии API конфигурации, то пропускаем файл
			ООИзСправочника = СоответствиеИмен.Получить(НРег(ФайлОО.Имя));

			Если ООИзСправочника = Неопределено Тогда
				НоваяСтрока = ТаблицаОбработокОбслуживания.Добавить();
				НоваяСтрока.ОбработкаОбслуживания = ФайлОО;
				НоваяСтрока.ООСправочника         = Неопределено;
				НоваяСтрока.Наименование          = ООИзФайла.Метаданные().Синоним;
				НоваяСтрока.Версия                = ПолучитьСерверТО().ПолучитьОписаниеОбработкиОбслуживания(ООИзФайла).ВерсияОбработки;
			КонецЕсли;
		КонецЕсли;

		Индикатор.Значение = Индикатор.Значение + 1;
	КонецЦикла;

	Если Индикатор.МаксимальноеЗначение > 0 Тогда
		Индикатор.Закрыть();
	КонецЕсли;

	ТаблицаОбработокОбслуживания.Сортировать("Наименование Возр");
	Если ТаблицаОбработокОбслуживания.Количество() > 0 Тогда
		ЭлементыФормы.ТаблицаОбработокОбслуживания.ТекущаяСтрока = ТаблицаОбработокОбслуживания[0];
	КонецЕсли;

КонецПроцедуры

// Функция возвращает информацию об экземплярах моделей торгового оборудования.
//
// Параметры
//  ОбработкаОбслуживания - <Справочник "ОбработкиОбслуживания">, <Неопределено>
//                        - В параметре передается ссылка на объект справочника,
//                          по которому происходит отбор уже созданных экземпляров
//                          в справочнике "ТорговоеОборудование" моделей оборудования
//
// Возвращаемое значение:
//  <ТаблицаЗначений>  - Таблица, содержащая информацию об экземплярах моделей торгового оборудования
//
Функция ПолучитьТорговоеОборудование(ОбработкаОбслуживания) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	СпрТО.Ссылка,
	|	СпрТО.ОбработкаОбслуживания,
	|	СпрТО.Модель,
	|	СпрТО.Наименование
	|ИЗ
	|	Справочник.ТорговоеОборудование КАК СпрТО
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.ТорговоеОборудование КАК ТорговоеОборудование
	|ПО
	|	ТорговоеОборудование.Модель = СпрТО.Ссылка
	|	И ТорговоеОборудование.Компьютер = &ИмяКомпьютераТО
	|ГДЕ
	|	СпрТО.ОбработкаОбслуживания = &ОбработкаОбслуживания
	|	И ТорговоеОборудование.Модель ЕСТЬ NULL
	|");

	Запрос.УстановитьПараметр("ОбработкаОбслуживания", ОбработкаОбслуживания);
	Запрос.УстановитьПараметр("ИмяКомпьютераТО", ПолучитьСерверТО().ПолучитьИмяКомпьютераТО());

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТорговоеОборудование()

// Функция возвращает информацию о поддерживаемых моделях торгового оборудования.
//
// Параметры
//  ОбработкаОбслуживания - <Справочник "ОбработкиОбслуживания">, <Неопределено>
//                        - В параметре передается ссылка на объект справочника,
//                          по которому происходит отбор уже созданных экземпляров
//                          в справочнике "ТорговоеОборудование" моделей оборудования
//
// Возвращаемое значение:
//  <ТаблицаЗначений>  - Таблица, содержащая информацию об экземплярах моделей торгового оборудования
//
Функция ПолучитьПоддерживаемыеМоделиТО(ОбработкаОбслуживания) Экспорт

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ТчМодели.Модель КАК Модель
	|ИЗ
	|	Справочник.ОбработкиОбслуживанияТО.Модели КАК ТчМодели
	|ГДЕ
	|	НЕ ТчМодели.Ссылка.ПометкаУдаления И
	|	Ссылка = &ОбработкаОбслуживания
	|УПОРЯДОЧИТЬ ПО
	|	Модель
	|");

	Запрос.УстановитьПараметр("ОбработкаОбслуживания", ОбработкаОбслуживания);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьОбработки()

Процедура ПродолжитьРаботуПомощника()

	ВидТО = ?(мВидТОПоУмолчанию = Неопределено, 1, мСоответствиеЗначенийВидовТО[мВидТОПоУмолчанию]);
	мДрайверТО      = Неопределено;
	мУстройство     = Неопределено;
	мМенеджерЗаписи = Неопределено;
	ОбновлениеВыбраннойОбработки = Ложь;

	УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборДрайвера);

КонецПроцедуры

Процедура НастройкаИПроверкаПараметров()

	Объект = Неопределено;

	Если мМенеджерЗаписи = Неопределено Тогда
		мМенеджерЗаписи = РегистрыСведений.ТорговоеОборудование.СоздатьМенеджерЗаписи();
		мМенеджерЗаписи.Идентификатор = Новый УникальныйИдентификатор;
		мМенеджерЗаписи.Компьютер     = ПолучитьСерверТО().ПолучитьИмяКомпьютераТО();
		мМенеджерЗаписи.Модель        = мУстройство;
		мМенеджерЗаписи.Параметры     = ЗначениеВСтрокуВнутр(Новый Структура());
		мМенеджерЗаписи.Подключено    = Истина;
		мМенеджерЗаписи.Вид           = мСоответствиеВидовТО[ВидТО];
	КонецЕсли;

	Обработка = ПолучитьСерверТО().ПолучитьОбработкуОбслуживания(мУстройство);
	Если Обработка <> Неопределено Тогда
		Параметры = ЗначениеИзСтрокиВнутр(мМенеджерЗаписи.Параметры);

		Пока Истина Цикл
			ПолучитьСерверТО().НастроитьДрайвер(Обработка, мУстройство, Параметры);
			Если Не ЗначениеЗаполнено(Параметры) Тогда
				мМенеджерЗаписи = Неопределено;
				УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
				Возврат;
			ИначеЕсли ЗначениеВСтрокуВнутр(Параметры) = мМенеджерЗаписи.Параметры Тогда
				Ответ = Вопрос("Внимание! Параметры устройства не были изменены" + Символы.ПС + 
					               " Нажмите ""Повторить"" для повторения проверки, " + Символы.ПС + 
					               """Отмена"" для отказа от настройки параметров и возврата назад", РежимДиалогаВопрос.ПовторитьОтмена);

				Если Ответ = КодВозвратаДиалога.Отмена Тогда
					мМенеджерЗаписи = Неопределено;
					УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
					Возврат;
				КонецЕсли;
			КонецЕсли;

			мМенеджерЗаписи.Параметры = ЗначениеВСтрокуВнутр(Параметры);

			Пока Истина Цикл
				Если Объект = Неопределено Тогда
					Объект = ПолучитьСерверТО().СоздатьОбъектДрайвера(Обработка, мМенеджерЗаписи.Модель.Модель, Параметры);
				КонецЕсли;

				Если Объект <> Неопределено Тогда
					Пока Истина Цикл
						Сообщить("Подождите, идет проверка настроенных параметров...", СтатусСообщения.Внимание);
						Ответ = ПолучитьСерверТО().ТестДрайвера(Обработка, Объект);
						Сообщить("Проверка настроенных параметров завершена!", СтатусСообщения.Информация);

						Если Ответ Тогда
							мМенеджерЗаписи.Записать();

							Ответ = Вопрос("Устройство """ + мМенеджерЗаписи.Модель.Наименование + " (" + мМенеджерЗаписи.Вид + ")"" настроено и готово к работе." + Символы.ПС + 
										   "Желаете подключить другое устройство?", РежимДиалогаВопрос.ДаНет);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								ПродолжитьРаботуПомощника();
							Иначе
								Закрыть();
							КонецЕсли;

							мМенеджерЗаписи = Неопределено;
							Возврат;
						Иначе
							Ответ = Вопрос("Внимание! При проверке оборудования возникла ошибка." + Символы.ПС + 
										   "Проверьте корректность подключения устройства." + Символы.ПС + 
										   "Нажмите ""Повторить"" для повторения проверки, " + Символы.ПС + 
										   """Отмена"" для возврата к настройкам параметров", РежимДиалогаВопрос.ПовторитьОтмена);
							Если Ответ = КодВозвратаДиалога.Отмена Тогда
								Прервать;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					Прервать;
				Иначе

					Ответ = Вопрос("Внимание! Не удалось загрузить драйвер торгового оборудования" + Символы.ПС + 
					               "Проверьте корректность установки драйвера и нажмите" + Символы.ПС + 
					               """Повторить"" для повторения проверки, " + Символы.ПС + 
					               """Отмена"" для возврата назад", РежимДиалогаВопрос.ПовторитьОтмена);

					Если Ответ = КодВозвратаДиалога.Отмена Тогда
						мМенеджерЗаписи = Неопределено;
						УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;

	Иначе
		мМенеджерЗаписи = Неопределено;

		Предупреждение("В процессе работы с обработкой обслуживания драйвера возникли ошибки." + Символы.ПС + 
		               "Вернитесь назад и выберите другую обработку обслуживания.");
		УстановитьСтраницуИДоступностьКнопок(ЭлементыФормы.ПомощникПиНТО.Страницы.ВыборУстройства);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ГЛОБАЛЬНЫХ ПЕРЕМЕННЫХ И СТРУКТУР МОДУЛЯ ФОРМЫ

мДрайверТО  = Неопределено;
мУстройство = Неопределено;

// Дополнительные поля ТаблицыЗагруженныхОО
ТаблицаЗагруженныхОО.Колонки.Добавить("ОбработкаОбслуживания");
ТаблицаЗагруженныхОО.Колонки.Добавить("ВерсияAPI");

// Дополнительные поля ТаблицыОбработокОбслуживания
ТаблицаОбработокОбслуживания.Колонки.Добавить("ОбработкаОбслуживания");
ТаблицаОбработокОбслуживания.Колонки.Добавить("ООСправочника");

// Дополнительные поля ТаблицыЗагруженныхОО
ТаблицаСозданныхУстройств.Колонки.Добавить("ОбработкаОбслуживания");
ТаблицаСозданныхУстройств.Колонки.Добавить("Ссылка");

// Дополнительные поля ТаблицаПоддерживаемыхМоделей
ТаблицаПоддерживаемыхМоделей.Колонки.Добавить("Ссылка");

// Соответствие между значениями элемента формы "ВидТО" и перечислением видов ТО в конфигурации
мСоответствиеВидовТО = Новый Соответствие;
мСоответствиеВидовТО.Вставить(1, Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор);

мСоответствиеЗначенийВидовТО = Новый Соответствие;
мСоответствиеЗначенийВидовТО.Вставить(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор, 1);

мСоответствиеКартинокТО = Новый Соответствие;
мСоответствиеКартинокТО.Вставить(Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор   , БиблиотекаКартинок.ТОФискальныйРегистратор32);

мСоответствиеСсылокКонфигураций = Новый Соответствие;
мСоответствиеСсылокКонфигураций.Вставить("Trade", "http://v8.1c.ru/trade/3/3601.htm");
мСоответствиеСсылокКонфигураций.Вставить("TradeBase", "http://v8.1c.ru/trade/3/3601.htm");
мСоответствиеСсылокКонфигураций.Вставить("Retail", "http://v8.1c.ru/retail/300/3010.htm");
мСоответствиеСсылокКонфигураций.Вставить("RetailBase", "http://v8.1c.ru/retail/300/3010.htm");
мСоответствиеСсылокКонфигураций.Вставить("Accounting", "http://v8.1c.ru/trade/3/3601.htm (только ФР)");
мСоответствиеСсылокКонфигураций.Вставить("AccountingBase", "http://v8.1c.ru/trade/3/3601.htm (только ФР)");
мСоответствиеСсылокКонфигураций.Вставить("Enterprise", "http://v8.1c.ru/enterprise/3/3601.htm");
