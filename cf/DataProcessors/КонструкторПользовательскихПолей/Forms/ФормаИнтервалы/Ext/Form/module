
Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если ПустаяСтрока(Наименование) Тогда
		Сообщить("Наименование не заполнено");
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Значение) Тогда
		Сообщить("Поле не заполнено");
		Возврат;
	ИначеЕсли Интервалы.Количество() = 0 Тогда
	    Сообщить("Необходимо заполнить хотя бы один интервал");
		Возврат;
	КонецЕсли;

	Если ПользовательскоеПоле = Неопределено Тогда
		ПользовательскоеПоле = КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Добавить(Тип("ПользовательскоеПолеВыборКомпоновкиДанных"));
	Иначе
		ПользовательскоеПоле.Варианты.Элементы.Очистить();
	КонецЕсли;
	ПользовательскоеПоле.Заголовок = Наименование;
	
	ПредыдущаяСтрока = Неопределено;
	
	Для каждого Строка Из Интервалы Цикл
		
		// добавим вариант
		Вариант = ПользовательскоеПоле.Варианты.Элементы.Добавить();
		ГруппаЭлементовОтбора = Вариант.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		// БольшеИлиРавно
		Если ПредыдущаяСтрока <> Неопределено Тогда
			ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Значение));
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = ПредыдущаяСтрока.Граница;
		КонецЕсли;
		
		// Меньше
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Значение));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
		ЭлементОтбора.ПравоеЗначение = Строка.Граница;
			
		Вариант.Значение = "" + Интервалы.Индекс(Строка) + "ИГ";
		Вариант.Представление = Строка.Представление;
		ПредыдущаяСтрока = Строка;
		
	КонецЦикла;
	
	Закрыть(Истина);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Заголовок = "Редактирование пользовательского поля";
	
	Если ПользовательскоеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Наименование = ПользовательскоеПоле.Заголовок;
	Значение = Строка(ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].Элементы[0].ЛевоеЗначение);
	ОбновитьПоЗначению();
	Для каждого Вариант Из ПользовательскоеПоле.Варианты.Элементы Цикл
		НоваяСтрока = Интервалы.Добавить();
		Индекс = Вариант.Отбор.Элементы[0].Элементы.Количество() - 1;
		НоваяСтрока.Граница = Вариант.Отбор.Элементы[0].Элементы[Индекс].ПравоеЗначение;
		НоваяСтрока.Представление = Вариант.Представление;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбораПоля = ПолучитьОбщуюФорму("ФормаВыбораДоступногоПоляКомпоновщикаНастроек");
	ФормаВыбораПоля.Режим = "ЧислоИСтрока";
	ФормаВыбораПоля.КомпоновщикНастроек = КомпоновщикНастроек;
	Результат = ФормаВыбораПоля.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Элемент.Значение = Строка(Результат.Поле);
	ОбновитьПоЗначению();
	
КонецПроцедуры

Процедура ЗначениеПриИзменении(Элемент)
	
	ОбновитьПоЗначению();
	
КонецПроцедуры

Процедура ОбновитьПоЗначению()
	
	Если ПустаяСтрока(Наименование) И ЗначениеЗаполнено(Значение) Тогда
		Наименование = "Интервалы (" + Строка(КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Значение)).Заголовок) + ")";
	КонецЕсли;
	ТипЗначенияПоля = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(Значение)).Тип;
	Если ТипЗначенияПоля.Типы().Найти(Тип("Строка")) <> Неопределено ИЛИ ТипЗначенияПоля.Типы().Найти(Тип("Число")) <> Неопределено Тогда
		Если ТипЗначенияПоля.Типы().Найти(Интервалы.Колонки.Граница.ТипЗначения.Типы()[0]) = Неопределено Тогда
			Интервалы = Новый ТаблицаЗначений;
			Интервалы.Колонки.Добавить("Граница", ТипЗначенияПоля, "Граница");
			Интервалы.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"), "Интервалы");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтервалыГраницаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Интервалы.ТекущиеДанные;
	
	КопияИнтервалы = Интервалы.Скопировать();
	КопияИнтервалы.Сортировать("Граница");
	
	НайденныеСтроки = КопияИнтервалы.НайтиСтроки(Новый Структура("Граница", ТекущиеДанные.Граница));
	ИндексСтроки = КопияИнтервалы.Индекс(НайденныеСтроки[0]);
	ОбновитьПредставление(ИндексСтроки, КопияИнтервалы);
	ОбновитьПредставление(ИндексСтроки - 1, КопияИнтервалы);
	ОбновитьПредставление(ИндексСтроки + 1, КопияИнтервалы);
	Интервалы.Сортировать("Граница");
	
КонецПроцедуры

Процедура ОбновитьПредставление(ИндексСтроки, Таблица)
	
	ПоследнийИндекс = Таблица.Количество() - 1;
	Если ИндексСтроки < 0 ИЛИ ИндексСтроки > ПоследнийИндекс Тогда
		Возврат;
	КонецЕсли;
	
	НайденныеСтроки = Интервалы.НайтиСтроки(Новый Структура("Граница", Таблица[ИндексСтроки].Граница));
	СтрокаИнтервалы = НайденныеСтроки[0];
	Если ИндексСтроки = 0 Тогда
		СтрокаИнтервалы.Представление = "до " + Таблица[ИндексСтроки].Граница;
	Иначе
		СтрокаИнтервалы.Представление = "от " + Таблица[ИндексСтроки - 1].Граница + " до " + Таблица[ИндексСтроки].Граница;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельИнтервалыОчистить(Кнопка)
	
	Ответ = Вопрос("Очистить все интервалы?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Интервалы.Очистить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнтервалыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.Интервалы.ТекущиеДанные;
	ИндексЭлемента = Интервалы.Индекс(ТекущиеДанные);
	Интервалы.Удалить(ТекущиеДанные);
	Отказ = Истина;
	ОбновитьПредставление(ИндексЭлемента, Интервалы);
	
КонецПроцедуры

Процедура ИнтервалыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.Интервалы.ТекущиеДанные;
	Если Интервалы.НайтиСтроки(Новый Структура("Граница", ТекущиеДанные.Граница)).Количество() > 1 Тогда
		ЭлементыФормы.Интервалы.ТекущаяКолонка = ЭлементыФормы.Интервалы.Колонки.Граница;
		Отказ = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры
