Перем ПрефиксСтраниц;
Перем НомерСтраницы;
Перем ИмяИБ, ПутьКИБ, ПользовательИБ, ПарольИБ;
Перем ИмяФайлаПравил, ИмяФайлаОбработки, ИмяФайлаДанных, ПутьВыгрузкиЗагрузки, ИмяФайлаПротокола;
Перем ЭтапКонвертации;

Перем v8 Экспорт; // сервер

Перем ОбработкаОбмена;

Перем БазоваяПоставка;

Перем ВерсияПлатформы;

Перем ДатаНачала, ДатаОкончания, ШагПериода;

Перем ФайлОбмена, Организация;

Перем ШрифтОбычный, ШрифтЖирный;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Стандартные обработчики формы

Процедура ПриОткрытии()
	
	НомерСтраницы = 0;
	
КонецПроцедуры

// Процедура инициации процесса конвертации из ИБ
//
Процедура ЗагрузитьИзИБНажатие(Элемент)
	
	ИмяФайлаДанных = ПутьВыгрузкиЗагрузки + "ConvData.xml";
	
	ИмяФайлаПротокола = ПутьВыгрузкиЗагрузки + "ConvData.txt";
	
	ПрефиксСтраниц = "ИБ";
	
	ПолучитьСписокИБ();
	
	Шагнуть();
	
КонецПроцедуры

// Процедура инициации процесса конвертации из файла
//
Процедура ЗагрузитьИзФайлаНажатие(Элемент)
	
	ИмяФайлаДанных = "";
	
	ИмяФайлаПротокола = "";
	
	ПрефиксСтраниц = "Ф";
	
	Шагнуть();
	
КонецПроцедуры

// Процедура отработки движения вперед
//
Процедура ДалееНажатие(Элемент)
	
	Если НомерСтраницы = 1 И ПрефиксСтраниц = "ИБ" 
		И Не ПроверитьИнформационнуюБазу() Тогда
		Возврат;
	КонецЕсли;

	Шагнуть();
	ОтработатьНажатиеВперед();
	
КонецПроцедуры

// Процедура возврата к первой странице
//
Процедура ВНачалоНажатие(Элемент)
	
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы.СтраницаНачало;
	НомерСтраницы = 0;
	ОстаткиОбороты = 0;
	
КонецПроцедуры

// Процедура записывает путь в соответствующую переменную
//
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ПутьКИБ = "";
		ИмяИБ = "";
		ПользовательИБ = "";
		ПарольИБ = "";
	Иначе
		ПутьКИБ = Элемент.ТекущиеДанные.Путь;
		ИмяИБ = Элемент.ТекущиеДанные.Имя;
		ПользовательИБ = СокрЛП(Элемент.ТекущиеДанные.Пользователь);
		ПарольИБ = СокрЛП(Элемент.ТекущиеДанные.Пароль);
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати списка ошибок
//
Процедура ПечатьОшибкиНажатие(Элемент)
	
	Макет = ПолучитьМакет("СписокОшибок");
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ПрефиксСтраниц = "ИБ" Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = "Файл данных";
		ОбластьШапка.Параметры.ПутьКИБ = ИмяФайлаВыгруженныхДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка = СтрокаТаблицы.Расшифровка;

		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ОтчетОбОшибках, , , "Список ошибок конвертации данных из 1С:Бухгалтерии 8", );
	
КонецПроцедуры

// Процедура отработки изменения пути к файлу выгрузки
//
Процедура ПутьКФайлуПриИзменении(Элемент)
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= "";
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= "";
	ЭлементыФормы.НадписьОрганизация.Заголовок	= "";
	ЭлементыФормы.НадписьПериод.Заголовок		= "";
	ЭлементыФормы.НадписьДата.Заголовок			= "";
	
	Если НЕ ФайлОбмена = Неопределено Тогда
		ФайлОбмена.Закрыть();
	КонецЕсли;
	
	ИнициализироватьОбмен(ИмяФайлаВыгруженныхДанных, Истина);
	
КонецПроцедуры

// Процедура выбора файла выгрузки
//
Процедура ИмяФайлаВыгруженныхДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
Процедура ИмяФайлаВыгруженныхДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

// Процедура продолжения работы в том же варианте конвертации
//
Процедура ПродолжитьНажатие(Элемент)
	
	НомерСтраницы = 0;
	Шагнуть();
	
КонецПроцедуры

// Обработчик нажатия кнопки ПериодВперед
//
Процедура ПериодВпередНажатие(Элемент)
	
	ИзменитьПериод(ШагПериода);
	
КонецПроцедуры

// Обработчик нажатия кнопки ПериодНазад
//
Процедура ПериодНазадНажатие(Элемент)
	
	ИзменитьПериод(-ШагПериода);
	
КонецПроцедуры

// Обработчик добавления нового пути в таблицу пути к ИБ
//
Процедура ТаблицаПутиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

// Обработчик удаления пути в таблице пути к ИБ
//
Процедура ТаблицаПутиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции модуля формы

// Процедура отвечает за перемещение по страницам формы
//
Процедура Шагнуть(КоличествоШагов = 1)
	
	Если НомерСтраницы = 0 Тогда
		ОстаткиОбороты = ?(ОстаткиОбороты <> 0, ОстаткиОбороты, 0);
		
		Если ОстаткиОбороты = 0 Тогда
			ШагПериода = 12;
			ДатаНачала = НачалоГода(Дата(2011,01,01));
			ДатаОкончания = КонецГода(ДатаНачала);
		КонецЕсли;
		ИзменитьПредставлениеПериода();
		
		Если ПрефиксСтраниц = "Ф" Тогда
			ВыбФайл = Новый Файл("C:\v16_v20\Exp16_20.xml");
			Если ВыбФайл.Существует() Тогда
				ИмяФайлаВыгруженныхДанных = ВыбФайл.ПолноеИмя;
				ИнициализироватьОбмен(ВыбФайл.ПолноеИмя, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтраницы = НомерСтраницы + КоличествоШагов;
	
	Если НомерСтраницы = 1 Тогда
		ТекстСообщения = "";
		ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаПроцесс;
	КонецЕсли;
	
	Если НомерСтраницы = 2 И ПрефиксСтраниц = "Ф" Тогда
		Если НЕ ЗначениеЗаполнено(ИмяФайлаВыгруженныхДанных) Тогда
			Сообщить("Укажите путь к файлу данных.", СтатусСообщения.Важное);
			НомерСтраницы = НомерСтраницы - 1;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСтраницы = ПрефиксСтраниц + "Страница" + НомерСтраницы;
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы[ИмяСтраницы];
	
КонецПроцедуры

// Процедура отработки нажатия кнопки дале
//
Процедура ОтработатьНажатиеВперед()
	
	// Для загрузки из ИБ
	Если ПрефиксСтраниц = "ИБ" Тогда
		Если НомерСтраницы = 2 Тогда
			
			Перерисовать(1, "ВОчереди");
			
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточника"].Заголовок = ИмяИБ;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточникаБазовая"].Заголовок = ИмяИБ;
			
			КонвертацияИнформационнойБазы();
			
			ОтобразитьТекстСостояния("Окончание переноса данных: " + ТекущаяДата(), , 0);
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для загрузки из файла
	Если ПрефиксСтраниц = "Ф" Тогда
		Если НомерСтраницы = 2 Тогда
			
			Перерисовать(3, "ВОчереди");
			
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточника"].Заголовок = ИмяФайлаВыгруженныхДанных;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточникаБазовая"].Заголовок = ИмяФайлаВыгруженныхДанных;
			
			ЗагрузкаИнформационнойБазы();
			
			ОтобразитьТекстСостояния("Окончание переноса данных: " + ТекущаяДата(), , 0);
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерСтраницы = 2 Тогда
		
		ЭлементыФормы[ПрефиксСтраниц + "ДалееКон"].Доступность = Истина;
		
		// Заврешение процесса
		Если ТаблицаОшибок.Количество() > 0 Тогда
			
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаОшибка;
			
		ИначеЕсли БазоваяПоставка Тогда
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехБазовая;
		Иначе
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехПроф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заносит информацию об ошибках в спецютаблицу
//
Процедура ЗафиксироватьОшибку(Этап, ТекстОшибки, ТекстРекомендации = "", Расшифровка = Неопределено)
	
	ОтобразитьТекстСостояния(ТекстОшибки, Истина);
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Если Этап = "Проверка данных" И НЕ ЗначениеЗаполнено(ТекстРекомендации) Тогда
		ТекстРекомендации = "Проверьте, все ли загруженные документы были проведены.";
	КонецЕсли;
	
	НоваяОшибка = ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап = Этап;
	НоваяОшибка.Ошибка = ТекстОшибки;
	НоваяОшибка.Рекомендации = ТекстРекомендации;
	НоваяОшибка.Расшифровка = Расшифровка;
	
КонецПроцедуры

// Процедура инициализации универсальной обработки
//
Функция ИнициализироватьОбмен(ИмяФайла, ФормироватьСведения = Ложь)
	
	Попытка
		ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		ОбработкаОбмена.РежимОбмена = "Загрузка";
		ВыбФайл = Новый Файл(ИмяФайла);
		Если ВыбФайл.Существует() Тогда
			ИмяФайлаОбмена = ВыбФайл.ПолноеИмя;
			ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;	
			ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			
			Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
				Возврат Ложь;
			КонецЕсли;
			
			Если БазоваяПоставка И НЕ ФормироватьСведения Тогда //для базовой отдельно обработаем загрузку сведений об организации
				Если НЕ ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена) Тогда
					ЗафиксироватьОшибку(ЭтапКонвертации, "Отсутствуют сведения об организации", "Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз предыдущих версий"".");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПрефиксСтраниц = "Ф" И ФормироватьСведения Тогда
				СформироватьСведенияОФайле();
			КонецЕсли;
			Возврат Истина;
		Иначе
			ЗафиксироватьОшибку(ЭтапКонвертации, "Не найдена информация о выгруженных данных", "В каталоге, из которого производится загрузка, файл данных отсутствует. Укажите корректный путь к файлу данных.");
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось инициализировать обработку загрузки данных", "Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз предыдущих версий"".");
		ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Формирует внешнее представление периода, заданного датами начала и окончания периода. 
// Процедура используется в качестве обработчика события для полей ввода
// ДатаНачала и ДатаОкончания. Назначается методом ПодключитьОбработчикИзмененияДанных
// в обработчике "При открытии"
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//
//
// Параметры:
//  
// 
Процедура СформироватьСведенияОФайле()

	ОткрытьФайлДанных(ИмяФайлаВыгруженныхДанных);

	ТипДата                  = Тип("Дата");
	

	// Период выгрузки
	ДатаНачала = XMLЗначение(ТипДата, СокрП(ФайлОбмена.ПолучитьАтрибут("НачалоПериодаВыгрузки")));
	ДатаОкончания = XMLЗначение(ТипДата, СокрП(ФайлОбмена.ПолучитьАтрибут("ОкончаниеПериодаВыгрузки")));
	
	//Дата создания файла
	ДатаВыгрузкиДанных = XMLЗначение(ТипДата, СокрП(ФайлОбмена.ПолучитьАтрибут("ДатаВыгрузки")));
	
    // Основные сведения
	Пока ФайлОбмена.Прочитать() Цикл	
		Если ФайлОбмена.Имя <> "СведенияОбИнформационнойБазе" Тогда
			одПропустить(ФайлОбмена);
		Иначе
			Конфигурация = ФайлОбмена.ПолучитьАтрибут("Конфигурация");
			НомерРелиза = ФайлОбмена.ПолучитьАтрибут("НомерРелиза");
			Организация = ФайлОбмена.ПолучитьАтрибут("Организация");
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Если ДатаОкончания < ДатаНачала Тогда
		ПредставлениеПериодаВыгрузки = "";
	Иначе		
		Если ДатаНачала = ДатаОкончания Тогда
			Если (НачалоДня(НачалоГода(ДатаНачала)) =  НачалоДня(ДатаНачала)) Тогда
				ТекстПериода="Остатки на начало " + Формат(Год(ДатаОкончания),"ЧГ=0") + " г.";
			Иначе
				ТекстПериода="Остатки на дату " + Формат(ДатаНачала, "ДЛФ=DD");
			КонецЕсли;
			ПредставлениеПериодаВыгрузки = ТекстПериода;
		Иначе
			Если (Год(ДатаОкончания) =  Год(ДатаНачала)) И (НачалоДня(НачалоГода(ДатаНачала)) =  НачалоДня(ДатаНачала)) Тогда
				ТекстПериода="Остатки на начало " + Формат(Год(ДатаОкончания),"ЧГ=0") + " г.";
				ПредставлениеПериодаВыгрузки = ТекстПериода + Строка (" и документы за период с 1 января по "+ Формат(ДатаОкончания, "ДЛФ=DD"));
			Иначе
				ТекстПериода="Остатки на дату " + Формат(ДатаНачала, "ДЛФ=DD");
				ПредставлениеПериодаВыгрузки = ТекстПериода + Строка (" и документы за период с " + Формат(ДатаНачала, "ДЛФ=DD") + " по "+ Формат(ДатаОкончания, "ДЛФ=DD"));
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
		
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= Конфигурация;
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= НомерРелиза;
	ЭлементыФормы.НадписьОрганизация.Заголовок	= Организация;
	ЭлементыФормы.НадписьПериод.Заголовок		= ПредставлениеПериодаВыгрузки;
	ЭлементыФормы.НадписьДата.Заголовок			= Формат(ДатаВыгрузкиДанных, "ДЛФ=DD; ДП=-");
	
КонецПроцедуры // СформироватьПредставлениеПериода() 

// Функция замещает сведения в существующей организации для Базовой поставки
//
Функция ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена)
	
	ОткрытьФайлДанных(ИмяФайлаОбмена);
	
    // Основные сведения
	Пока ФайлОбмена.Прочитать() Цикл	
		Если ФайлОбмена.Имя <> "СведенияОбИнформационнойБазе" Тогда
			одПропустить(ФайлОбмена);
		Иначе
			Конфигурация = ФайлОбмена.ПолучитьАтрибут("Конфигурация");
			НомерРелиза = ФайлОбмена.ПолучитьАтрибут("НомерРелиза");
			Организация = ФайлОбмена.ПолучитьАтрибут("Организация");
			Организация_ИНН  = ФайлОбмена.ПолучитьАтрибут("ИНН");
			Организация_КПП = ФайлОбмена.ПолучитьАтрибут("КПП");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ИНН,
		|	Организации.КПП,
		|	Организации.Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			ТекОрганизация = Результат.Получить(0);
			Если ТекОрганизация.ИНН <> Организация_ИНН
				ИЛИ ТекОрганизация.КПП <> Организация_КПП 
				ИЛИ ТекОрганизация.Наименование <> Организация Тогда
				Объект = ТекОрганизация.Ссылка.ПолучитьОбъект();
				Объект.ИНН = Организация_ИНН;
				Объект.КПП = Организация_КПП;
				Объект.Наименование = Организация;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Процедура открывает файл с данными для чтения атрибутов
//
Процедура ОткрытьФайлДанных(ИмяФайла)
	
	// Архивные файлы будем идентифицировать по расширению ".zip"
	Если Найти(ИмяФайла, ".zip") > 0 Тогда
		ИмяФайлаЗагрузкиДанных = ОбработкаОбмена.РаспаковатьZipФайл(ИмяФайлаВыгруженныхДанных);
	Иначе
		ИмяФайлаЗагрузкиДанных = ИмяФайла;
	КонецЕсли; 
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
	ФайлОбмена.Прочитать();
	
КонецПроцедуры

// Прорисовка последней страницы обработки
//
Процедура КонвертацияЗавершена()
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаОшибка;
	Иначе
		
		Если БазоваяПоставка Тогда
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехБазовая;
		Иначе
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехПроф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Перерисовает все картинки начиная с указанной
//
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	Если ОднаКартинка Тогда
		
		ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + Этап].Картинка = ОпределитьКартинку(Этап, Состояние);
		Если Состояние = "Выполняется" Тогда
			ТекущийШрифт = ШрифтЖирный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		Иначе
			ТекущийШрифт = ШрифтОбычный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		КонецЕсли;
		ЭлементыФормы[ПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт = ТекущийШрифт;
		ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка = ТекущаяРамка;
		
	Иначе
		
		ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
		Для НомерКартинки = Этап По 5 Цикл
			ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + НомерКартинки].Картинка = ОпределитьКартинку(НомерКартинки, Состояние);
			ЭлементыФормы[ПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт = ШрифтОбычный;
			ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка = ТекущаяРамка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определение картинки для текущего этапа
//
Функция ОпределитьКартинку(Этап, Состояние)
	
	Если Этап = 1 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Подключение"];
	ИначеЕсли Этап = 2 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Выгрузка"];
	ИначеЕсли Этап = 3 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Загрузка"];
	ИначеЕсли Этап = 4 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Проведение"];
	ИначеЕсли Этап = 5 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Проверка"];
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Процедура изменения периода
//
Процедура ИзменитьПериод(Шаг)
	
	Если Год(ДобавитьМесяц(ДатаОкончания,Шаг)) < 2009 Тогда
		Сообщить("Поддерживается перенос данных только с 2009 г.", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	ИсхДата=ДатаНачала;

	ДатаВМесяце=ДобавитьМесяц(ДатаОкончания,Шаг);
	ДатаОкончания=КонецМесяца(ДатаВМесяце); 
	ДатаНачала=НачалоГода(ДатаОкончания);
	
	ИзменитьПредставлениеПериода();
		
КонецПроцедуры // ИзменитьПериод	

// Процедура управление шагом периода
Процедура ОстаткиОборотыПриИзменении(Элемент)
	
	Если ОстаткиОбороты = 0 Тогда
		ШагПериода = ШагПериода;
	ИначеЕсли ОстаткиОбороты = 1 Тогда		
		ШагПериода = 12;
		ДатаОкончания = КонецГода(ДатаНачала);
	Иначе
		ШагПериода = 1;
	КонецЕсли;
	
	ИзменитьПредставлениеПериода();
	
КонецПроцедуры

// Процедура изменияет предстваление периода выгрузки
//
Процедура ИзменитьПредставлениеПериода()
	
	СтрПериод="";
	Если НачалоМесяца(ДатаОкончания) = ДатаНачала Тогда
		СтрПериод = ПредставлениеПериода(ДатаНачала,ДатаОкончания);
	Иначе
		Если ШагПериода = 1 Тогда
			СтрПериод = "Январь - "+ПредставлениеПериода(НачалоМесяца(ДатаОкончания),ДатаОкончания);
		Иначе                                                             
			СтрПериод = ПредставлениеПериода(НачалоМесяца(ДатаНачала),ДатаОкончания);
		КонецЕсли;			
	КонецЕсли;
	
	ЭлементыФормы.ПериодПереносаДанных.Заголовок = СтрПериод;
	
	Если ОстаткиОбороты = 0 Тогда
		ТекстПериода="Переносить только данные справочников."
	ИначеЕсли ОстаткиОбороты = 1 Тогда
		ТекстПериода="Переносить данные справочников и остатки на начало "
	Иначе
		ТекстПериода="Переносить данные справочников, остатки на начало "
	КонецЕсли;
	
	Если ОстаткиОбороты <> 0 Тогда
		ТекстПериода=ТекстПериода + Формат(Год(ДатаНачала),"ЧГ=0") + " г.";
		Если ШагПериода = 1 Тогда 			
			ТекстПериода = ТекстПериода + Строка (" и документы за период с 1 января по "+ Формат(ДатаОкончания, "ДЛФ=DD"));
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ПериодПереносаДанныхСтрокой.Заголовок = ТекстПериода;
	
	ЭлементыФормы.НадписьПериодЗаголовок.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодНазад.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодВперед.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодПереносаДанных.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодРамкаГруппы.Доступность = ОстаткиОбороты <> 0;
	
КонецПроцедуры

// Процедура выводит текст в окно состояния
//
Процедура ОтобразитьТекстСостояния(Текст, Ошибка = Ложь, Картинка = Неопределено)
	
	ТекстСообщения = Текст + Символы.ВК + Символы.ВК;
	//ТекстСообщения = ?(ТекстСообщения = "", Текст, ТекстСообщения + Символы.ВК + "" + Символы.ВК + Текст);
	Если Ошибка Тогда
		ТекстСтатусСообщения = СтатусСообщения.ОченьВажное;
	Иначе
		ТекстСтатусСообщения = СтатусСообщения.Информация;
	КонецЕсли;
	
	Сообщить(ТекстСообщения, ТекстСтатусСообщения);
	
КонецПроцедуры

//Обработка вызова формы для ввода пользователя и пароля для подключения к ИБ
//
Процедура НадписьНадписьНастройкаДоступа(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ТаблицаПути.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда		
			СведенияОпользователе = ЭтотОбъект.ПолучитьФорму("СведенияОпользователе");	
			СведенияОпользователе.ТекущиеДанные = ТекущиеДанные;	
			СведенияОпользователе.ОткрытьМодально();			
			
			ПользовательИБ = СокрЛП(ТекущиеДанные.Пользователь);
			ПарольИБ = СокрЛП(ТекущиеДанные.Пароль);
	КонецЕсли;
	
КонецПроцедуры

//***********************************************************
// Процедуры и функции конвертации из информационной базы
//***********************************************************

// Процедура получает из реестра путь к каталогам текущего пользователя
// а по указанному пути получает список зарегистрированных ИБ
//
Процедура ПолучитьСписокИБ() 
	
	ТаблицаПути.Очистить();
	
	Попытка
		
		ScrptCtrl=Новый COMObject("MSScriptControl.ScriptControl");
		ScrptCtrl.Language="vbscript";
		ScrptCtrl.AddCode("
		|Function Get1CV8Titles()
		|	const HKEY_CURRENT_USER = &H80000001
		|	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")
		|	strKeyPath = ""Volatile Environment""
		|	oReg.EnumValues HKEY_CURRENT_USER, strKeyPath, arrValues
		|	strInfo=vbNullString
		|   Get1CV8Titles = strInfo
		|	On Error Resume Next
		|	For i = LBound(arrValues) To UBound(arrValues)		
		|		call oReg.GetStringValue(HKEY_CURRENT_USER,strKeyPath,arrValues(i),Value)
		|       if (arrValues(i) = ""APPDATA"") then
		|		    strInfo=Value
		|       end if
		|	Next		
		| 	Get1CV8Titles = strInfo
		|End Function
		|");
		
		Если ВерсияПлатформы = "81" Тогда
			
			//Пути к базам 8.1
			
			//пути к локальным базам
			Путь=СокрЛП(ScrptCtrl.Run("Get1CV8Titles")) + "\1C\1Cv81\ibases.v8i";		
			Файл = Новый Файл(Путь);
			Если Файл.Существует() Тогда			
				РазложитьПуть(Путь);			
			КонецЕсли;
			
			//пути к общим базам
			Путь=СокрЛП(ScrptCtrl.Run("Get1CV8Titles")) + "\1C\1Cv81\ibases.v8l";		
			Файл = Новый Файл(Путь);
			Если Файл.Существует() Тогда			
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(Путь);
				КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
				Если КоличествоСтрок <> 0 Тогда				
					Для НомСтр = 1 По КоличествоСтрок Цикл
						Путь = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
						Файл = Новый Файл(Путь);
						Если Файл.Существует() Тогда			
							РазложитьПуть(Путь);			
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			//Пути к базам 8.2
			
			//пути к локальным базам
			Путь=СокрЛП(ScrptCtrl.Run("Get1CV8Titles")) + "\1C\1CEStart\ibases.v8i";		
			Файл = Новый Файл(Путь);
			Если Файл.Существует() Тогда			
				РазложитьПуть(Путь);			
			КонецЕсли;
			
			//пути к общим базам
			Путь=СокрЛП(ScrptCtrl.Run("Get1CV8Titles")) + "\1C\1CEStart\ibases.v8l";		
			Файл = Новый Файл(Путь);
			Если Файл.Существует() Тогда			
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.Прочитать(Путь);
				КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
				Если КоличествоСтрок <> 0 Тогда				
					Для НомСтр = 1 По КоличествоСтрок Цикл
						Путь = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
						Файл = Новый Файл(Путь);
						Если Файл.Существует() Тогда			
							РазложитьПуть(Путь);			
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТаблицаПути.Свернуть("Имя, Путь, Пользователь, Пароль",);
	ТаблицаПути.Сортировать("Имя");

КонецПроцедуры //ПолучитьСписокИБ

Процедура РазложитьПуть(Путь)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(Путь);
	
	Если ТекстовыйДокумент.КоличествоСтрок() <> 0 Тогда
		
		КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
		Для НомСтр = 1 По КоличествоСтрок Цикл
			ИмяИБ = "";
			ПутьИБ = "";
			ТекСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
			Если Лев(ТекСтрока,1) = "[" И Прав(ТекСтрока,1) = "]" Тогда
				ИмяИБ = Сред(ТекСтрока,2,СтрДлина(ТекСтрока)-2);
				НомСтр = НомСтр + 1;
				ТекСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомСтр);
				Если Найти(ТекСтрока, "Connect=File=") <> 0 Тогда //файловые базы
					ПутьИБ = Сред(ТекСтрока,9, СтрДлина(ТекСтрока)-9);						
					
					НоваяСтрока = ТаблицаПути.Добавить();
					НоваяСтрока.Имя = ИмяИБ;
					НоваяСтрока.Путь = ПутьИБ;
					
				ИначеЕсли Найти(ТекСтрока, "Connect=Srvr=") <> 0 Тогда //серверные 
					ПутьИБ = Сред(ТекСтрока,9, СтрДлина(ТекСтрока)-9);
					
					НоваяСтрока = ТаблицаПути.Добавить();
					НоваяСтрока.Имя = ИмяИБ;
					НоваяСтрока.Путь = ПутьИБ;
					
				КонецЕсли;					
				
				Если НомСтр >= КоличествоСтрок Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;					
		КонецЦикла;				
	КонецЕсли;			

КонецПроцедуры

// Запуск процесса конвертации 
//
Процедура КонвертацияИнформационнойБазы()
	
	ОтобразитьТекстСостояния("Начало переноса данных: " + ТекущаяДата(), , 0);
	
	ТаблицаОшибок.Очистить();
	
	Индикатор = 1;
	
	ЭлементыФормы[ПрефиксСтраниц + "ДалееКон"].Доступность = Ложь;
	
	// Шаг №1 - подключение к ИБ
	ОтобразитьТекстСостояния("Подключение к информационной базе: " + ИмяИБ);
	ЭтапКонвертации = "Подключение к информационной базе";
	Перерисовать(1, "Выполняется", Истина);
	Если НЕ ПодключитьсяКИБ() Тогда
		Перерисовать(1);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 5;
	
	ОтобразитьТекстСостояния("Определение конфигурации и номера релиза информационной базы: " + ИмяИБ);
	Если НЕ ОпределитьКонфигурациюИБ() Тогда
		Перерисовать(1);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 10;
	
	Перерисовать(1, "Успех", Истина);
	
	// Шаг № 2 выгрузка данных
	ОтобразитьТекстСостояния("Выгрузка данных из информационной базы: " + ИмяИБ);
	ЭтапКонвертации = "Выгрузка данных";
	Перерисовать(2, "Выполняется", Истина);
	Если НЕ ВыгрузитьИБ() Тогда
		Перерисовать(2);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 35;
	
	Перерисовать(2, "Успех", Истина);
	
	// Шаг № 3 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния("Чтение выгруженных данных информационной базы: " + ИмяИБ);
	ЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбмен(ИмяФайлаДанных) Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 40;
	
	
	//Проверка на попытку загрузить в базовую
	Организация = "";
	ОткрытьФайлДанных(ИмяФайлаДанных);
	
    // Основные сведения
	Пока ФайлОбмена.Прочитать() Цикл	
		Если ФайлОбмена.Имя <> "СведенияОбИнформационнойБазе" Тогда
			одПропустить(ФайлОбмена);
		Иначе
			Организация = ФайлОбмена.ПолучитьАтрибут("Организация");
			Прервать;
		КонецЕсли;
	КонецЦикла;
 
	Если БазоваяПоставка Тогда
		Если СтрЧислоВхождений(Организация, ";") > 0 Тогда
			ЭтапКонвертации = "Проверка возможности загрузки данных";
			ЗафиксироватьОшибку(ЭтапКонвертации, "Попытка загрузить в базовую конфигурацию сведения о нескольких организациях", "Возможно некорерктно была выбрана информационная база-приемник");
			Перерисовать(3);
			Индикатор = 100;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьТекстСостояния("Загрузка данных информационной базы: " + ИмяИБ);
	ЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьВИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 65;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 4 проведение документов только при условии что выгружалеись остатки или обороты
	Если ОстаткиОбороты = 0 Тогда // Только справочники
		Перерисовать(4, "Успех", Истина);
	Иначе
		ОтобразитьТекстСостояния("Проведение документов, сформированных при загрузке данных");
		ЭтапКонвертации = "Проведение документов";
		Перерисовать(4, "Выполняется", Истина);
		Если НЕ ПровестиДокументы() Тогда
			Перерисовать(4);
			Индикатор = 100;
		Иначе
			Перерисовать(4, "Успех", Истина);
		КонецЕсли;
	КонецЕсли;
	Индикатор = 90;
	
	
	// Шаг № 5 проверка загруженных данных
	ОтобразитьТекстСостояния("Проверка загруженных данных");
	ЭтапКонвертации = "Проверка данных";
	Перерисовать(5, "Выполняется", Истина);
	ПроверитьДанные();
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(5);
		Индикатор = 100;
	Иначе
		Перерисовать(5, "Успех", Истина);
	КонецЕсли;
	Индикатор = 100;
	
	
КонецПроцедуры

// Попытка подключения к ИБ
//
Функция ПодключитьсяКИБ()
	
	Попытка
		Объект = Новый COMОбъект("V" + ВерсияПлатформы + ".ComConnector");
		СтрокаПодключения = ПутьКИБ;
		
		СтрПользователь = "";
		СтрПароль = "";
		Если ЗначениеЗаполнено(ПользовательИБ) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr=""" + ПользовательИБ + """";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПарольИБ) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd=""" + ПарольИБ + """";
		КонецЕсли;
		
		v8 = Объект.Connect(СтрокаПодключения);
		Возврат Истина;
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести подключение к информационной базе: " + ИмяИБ, ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	//Возврат Открыта;
	
КонецФункции

// Определение конфигурации и поиск соответствующих конвертаций
Функция ОпределитьКонфигурациюИБ()
	
	Попытка
		V8_Метаданные = V8.Метаданные;
		ИдентификаторКонфигурации = V8_Метаданные.Имя;
		НомерРелизаКонфигурации = V8_Метаданные.Версия;
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Производится перенос данных из нетиповой конфигурации", "Перенос из выбранной конфигурации не поддерживается.");
	КонецПопытки;
	
	Если ИдентификаторКонфигурации <> Неопределено 
		И НомерРелизаКонфигурации <> Неопределено Тогда
		
		Отбор = Новый Структура("Наименование");
		Отбор.Вставить("Наименование", ИдентификаторКонфигурации);
		Выборка = Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.Выбрать(,,Отбор);
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.ПолучитьОбъект();
			
			НомерРелизаПравил = СокрЛП(Объект.НомерРелиза);
			
			Если Лев(НомерРелизаКонфигурации,4) <> Лев(СокрЛП(НомерРелизаПравил),4) Тогда
				ЗафиксироватьОшибку(ЭтапКонвертации, "Текущая версия правил предназначена для редакции конфигурации " + Лев(НомерРелизаПравил,3), "Рекомендуется проверить редакцию конфигурации информационной базы, из которой производится перенос данных.");
				Возврат Ложь;
			КонецЕсли;
			
			ЗначимаяЧастьНомераКонфигурации = Сред(НомерРелизаКонфигурации,5,СтрДлина(НомерРелизаКонфигурации));
			ТочкаКонфигурации = Найти(ЗначимаяЧастьНомераКонфигурации,".");
			ЗначимаяЧастьНомераСборкиКонфигурации = Число(Прав(ЗначимаяЧастьНомераКонфигурации,СтрДлина(ЗначимаяЧастьНомераКонфигурации)-ТочкаКонфигурации));
			ЗначимаяЧастьНомераКонфигурации = Число(Лев(ЗначимаяЧастьНомераКонфигурации,ТочкаКонфигурации-1));
			
			
			ЗначимаяЧастьНомераПравил = Сред(НомерРелизаПравил,5,СтрДлина(НомерРелизаПравил));
			ТочкаПравил = Найти(ЗначимаяЧастьНомераПравил,".");
			ЗначимаяЧастьНомераСборкиПравил = Число(Прав(ЗначимаяЧастьНомераПравил,СтрДлина(ЗначимаяЧастьНомераПравил) - ТочкаПравил));
			ЗначимаяЧастьНомераПравил = Число(Лев(ЗначимаяЧастьНомераПравил,ТочкаКонфигурации-1));
			
			ПроверкаУспешна = Истина;
			Если ЗначимаяЧастьНомераПравил > ЗначимаяЧастьНомераКонфигурации Тогда	
				ПроверкаУспешна = Ложь;		
			ИначеЕсли (ЗначимаяЧастьНомераПравил = ЗначимаяЧастьНомераКонфигурации) И ( ЗначимаяЧастьНомераСборкиПравил > ЗначимаяЧастьНомераСборкиКонфигурации) Тогда
				ПроверкаУспешна = Ложь;		
			КонецЕсли;
			
			Если НЕ ПроверкаУспешна Тогда
				ЗафиксироватьОшибку(ЭтапКонвертации, "Текущая версия правил предназначена для релиза конфигурации не ниже " + Объект.НомерРелиза, "Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.");
				Возврат Ложь;
			КонецЕсли;
			
			КонвертацияПравила				= Объект.ХранилищеПравила.Получить();
			
			Если КонвертацияПравила = Неопределено Тогда
				КонвертацияПравила		= Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.ПолучитьМакет(Объект.КонвертацияПравила + "_xml");				
			КонецЕсли;
			
			КонвертацияПравила.Записать(ПутьВыгрузкиЗагрузки + Объект.КонвертацияПравила + ".xml");		
			ИмяФайлаПравил = ПутьВыгрузкиЗагрузки + Объект.КонвертацияПравила + ".xml";
			Возврат Истина;
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьОшибку(ЭтапКонвертации, "Для выбранной конфигурации конвертация не поддерживается", "");
	Возврат Ложь;
	
КонецФункции

//Получаем протокол обмена и читаем его на предмет наличия ошибок выгрузки
//
Функция ЕстьОшибкиВПротоколеОбмена()
	
	ПротоколОбмена = Новый Файл(ИмяФайлаПротокола);
	Если НЕ ПротоколОбмена.Существует() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстПротокола = Новый ЧтениеТекста(ИмяФайлаПротокола);	
	Стр = ТекстПротокола.ПрочитатьСтроку();
	
	ТекстОшибки = "";
	ЕстьОшибка = Ложь;
	Пока Стр <> Неопределено Цикл 
		Если СокрЛП(Стр) = "Ошибка!!!" И ТекстОшибки = "" Тогда
			ЕстьОшибка = Истина;
			ТекстОшибки = "Ошибка выгрузки данных из информационной базы 1С:Бухгалтерии 8, редакции 1.6!"
		КонецЕсли;
		Если ЕстьОшибка И ЗначениеЗаполнено(СокрЛП(Стр)) И СокрЛП(Стр) <> "Ошибка!!!" Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + Стр;
		КонецЕсли;
		Стр = ТекстПротокола.ПрочитатьСтроку();
	КонецЦикла;
	
	Если ТекстОшибки <> "" Тогда
		ЗафиксироватьОшибку(ЭтапКонвертации, ТекстОшибки, "Рекомендуется сохранить правила конвертации из справочника ""Конвертации из информационных баз предыдущих версий"" на диск и провести выгрузку из информационной базы 1С:Бухгалтерии 8, редакции 1.6 при помощи обработки ""Универсальный обмен данными в формате XML"".");
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция выгрузки данных из ИБ-источника
//
Функция ВыгрузитьИБ()
	
	Попытка

		ОбработкаОбмена = v8.Обработки.УниверсальныйОбменДаннымиXML.Создать();
		ОбработкаОбмена.РежимОбмена = "Выгрузка";
		ОбработкаОбмена.ИмяФайлаПравилОбмена = ИмяФайлаПравил;
		ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаДанных;
		ОбработкаОбмена.ИмяФайлаПротоколаОбмена = ИмяФайлаПротокола;		
		ОбработкаОбмена.ДатаНачала = НачалоГода(ДатаНачала);
		Если ШагПериода = 12 Тогда
			ОбработкаОбмена.ДатаОкончания = НачалоГода(ДатаНачала);
		Иначе
			ОбработкаОбмена.ДатаОкончания = КонецМесяца(ДатаОкончания);
		КонецЕсли;
		ОбработкаОбмена.ВыводВОкноСообщенийИнформационныхСообщений = Истина;
		ОбработкаОбмена.ВыгружатьТолькоРазрешенные = Истина;		
		ОбработкаОбмена.ЗагрузитьПравилаОбмена(ИмяФайлаПравил);
		
		Если ОбработкаОбмена.ФлагОшибки Тогда
						
			Если ЕстьОшибкиВПротоколеОбмена() Тогда //сществует запись в файле протокола
				v8 = "";
				Возврат Ложь;
			Иначе
				ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось загрузить правила переноса данных для информационной базы " + ИмяИБ, "Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.");			
				v8 = "";
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		//Если выгружаем только справочники, то отключим правила выгрузки документов и остатков
		Если ОстаткиОбороты = 0 Тогда
			//отключаем все кроме справочников
			СтрокиТаблицыПравилВыгрузки = ОбработкаОбмена.ТаблицаПравилВыгрузки.Строки;
			КоличествоСтрок = СтрокиТаблицыПравилВыгрузки.Количество();
			Для НомерСтроки = 0 По КоличествоСтрок - 1 Цикл
				ТекСтрока = СтрокиТаблицыПравилВыгрузки.Получить(НомерСтроки);
				Если Лев(ТекСтрока.Имя,4) <> "Спр_" Тогда
					ТекСтрока.Включить = 0;
					Если ТекСтрока.ЭтоГруппа = 1 Тогда					
						ВложенныеСтроки = ТекСтрока.Строки;
						КоличествоВложенныхСтрок = ВложенныеСтроки.Количество();
						Для НомерВложенносСтроки = 0 По КоличествоВложенныхСтрок - 1 Цикл
							ТекВложеннаяСтрока = ВложенныеСтроки.Получить(НомерВложенносСтроки);
							ТекВложеннаяСтрока.Включить = 0;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Для Каждого ЗнПараметра ИЗ ОбработкаОбмена.ТаблицаНастройкиПараметров Цикл
			ЗнСвойства = Неопределено;
			Если ОбработкаОбмена.Параметры.Свойство(ЗнПараметра.Имя, ЗнСвойства) Тогда
				ЗнПараметра.Значение = ЗнСвойства;			
			КонецЕсли;
			
			//Если выгружаем только справочники, то отключим правила выгрузки настроек
			Если ОстаткиОбороты = 0 Тогда
				Если ЗнПараметра.Имя = "_СинхронизироватьПланСчетов" ИЛИ ЗнПараметра.Имя = "_СинхронизироватьНастройкиПараметры" Тогда
					ЗнПараметра.Значение = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбработкаОбмена.ВыполнитьВыгрузку();
		
		Если ОбработкаОбмена.ФлагОшибки Тогда
			
			Если ЕстьОшибкиВПротоколеОбмена() Тогда //сществует запись в файле протокола
				v8 = "";
				Возврат Ложь;
			Иначе
				
				ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести выгрузку данных из информационной базы " + ИмяИБ, "Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации. Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.");			
				//файл протокола
				v8 = "";
				Возврат Ложь;
			КонецЕсли;
		
		КонецЕсли;
		
		v8 = "";
		Возврат Истина;

	Исключение
		v8 = "";
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести выгрузку данных из информационной базы " + ИмяИБ, "Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.");
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ПроверитьИнформационнуюБазу()
	
	Если Не ПроверятьИнформационнуюБазу Тогда
		Возврат Истина;
	КонецЕсли;
	
	МакетОтчета = ПолучитьМакет("ПроверкаИнформационнойБазыБухгалтерииПредприятияРедакции16_" + ВерсияПлатформы);	
	
	ИмяФайлаОтчета = ПолучитьИмяВременногоФайла("erf");
	МакетОтчета.Записать(ИмяФайлаОтчета);
	ФормаОтчета = ВнешниеОтчеты.ПолучитьФорму(ИмяФайлаОтчета,, ЭтаФорма);
	ФормаОтчета.ДатаПроверки              = ДатаНачала;
	ФормаОтчета.Режим                     = ОстаткиОбороты + 1;
	ФормаОтчета.ЗапускИзОбработкиПереноса = Истина;
	
	Если Не ПодключитьсяКИБ() Тогда
		ФормаОтчета = Неопределено;
		Попытка
			УдалитьФайлы(ИмяФайлаОтчета);
		Исключение
		КонецПопытки;
		Возврат Ложь;
	КонецЕсли;
	
	ФормаОтчета.ОбновитьОтчет();
	Если ФормаОтчета.ЕстьОшибкиРаздел1 ИЛИ ФормаОтчета.ЕстьОшибкиРаздел2 ИЛИ ФормаОтчета.ЕстьОшибкиРаздел3 Тогда
		Результат = ФормаОтчета.ОткрытьМодально();
	Иначе
		Результат = Истина;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайлаОтчета);
	Исключение
	КонецПопытки;
	
	Возврат ?(ТипЗнч(Результат) = Тип("Булево"), Результат, Ложь);
	
КонецФункции

//***********************************************************
// Процедуры и функции загрузки из файла
//***********************************************************

// Запуск процесса конвертации из выгруженного файла
//
Процедура ЗагрузкаИнформационнойБазы()
	
	ОтобразитьТекстСостояния("Начало переноса данных: " + ТекущаяДата(), , 0);
	
	ТаблицаОшибок.Очистить();
	
	Индикатор = 1;
	
	ЭлементыФормы[ПрефиксСтраниц + "ДалееКон"].Доступность = Ложь;
	
	ИмяФайлаДанных = ИмяФайлаВыгруженныхДанных;
	
	//Шаг 0
	//Проверка на попытку загрузить в базовую
	Если БазоваяПоставка Тогда
		Если СтрЧислоВхождений(Организация, ";") > 0 Тогда
			ЭтапКонвертации = "Проверка возможности загрузки данных";
			ЗафиксироватьОшибку(ЭтапКонвертации, "Попытка загрузить в базовую конфигурацию сведения о нескольких организациях", "Возможно некорерктно была выбрана информационная база-приемник");
			Перерисовать(3);
			Индикатор = 100;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Шаг № 1 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния("Чтение выгруженных данных из файла: " + ИмяФайлаВыгруженныхДанных);
	ЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбмен(ИмяФайлаДанных) Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 40;
	
	ОтобразитьТекстСостояния("Загрузка данных из файла: " + ИмяФайлаВыгруженныхДанных);
	ЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьВИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 65;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 2 проведение документов
	ОтобразитьТекстСостояния("Проведение документов, сформированных при загрузке данных");
	ЭтапКонвертации = "Проведение документов";
	Перерисовать(4, "Выполняется", Истина);
	Если НЕ ПровестиДокументы() Тогда
		Перерисовать(4);
		Индикатор = 100;
	Иначе
		Перерисовать(4, "Успех", Истина);
	КонецЕсли;
	Индикатор = 90;
	
	// Шаг № 3 проверка загруженных данных
	ЭтапКонвертации = "Проверка данных";
	ОтобразитьТекстСостояния("Проверка загруженных данных");
	Перерисовать(5, "Выполняется", Истина);
	ПроверитьДанные();
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(5);
		Индикатор = 100;
	Иначе
		Перерисовать(5, "Успех", Истина);
	КонецЕсли;
	Индикатор = 100;
	
КонецПроцедуры

// Процедура выбора файла для загрузки
//
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогВыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml";
	ДиалогВыбораФайла.Расширение					=	"xml";
	
	ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
		ИнициализироватьОбмен(ДиалогВыбораФайла.ПолноеИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

//***********************************************************
// Общие процедуры и функции загрузки данных
//***********************************************************

// Функция загрузки файла данных
//
Функция ЗагрузитьВИБ()
	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаДанных;
	ОбработкаОбмена.ФлагКомментироватьОбработкуОбъектов = Истина;
	ОбработкаОбмена.ОбрезатьСтрокиСправа = Истина;
	ОбработкаОбмена.ВыполнитьЗагрузку();
	Если ОбработкаОбмена.ФлагОшибки Тогда
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести загрузку данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз предыдущих версий"".");
	КонецЕсли;
	
	Возврат Не ОбработкаОбмена.ФлагОшибки;
	
КонецФункции

// Функция проведения загруженных документов
Функция ПровестиДокументы ()
		
	Перем ФормаПрогрессора;
	
	БезОшибок = Истина;
	
	Организации = ПолучитьСписокОрганизаций();
	
	Если Организации.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНач = НачалоДня(ОбработкаОбмена.ДатаНачала - 1);
	ДатаКон = ОбработкаОбмена.ДатаОкончания;
		
	мНаборыШаблон = Новый Структура;
	
	#Если Клиент Тогда
		ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Проведение созданных документов";
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	
	Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл		
		
		Если ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И Дата <= &ДатаКон И Организация В (&Организации)";
		КонецЕсли;
		
		Если ДокументМетаданные.Имя = "УстановкаЦенНоменклатуры" Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И Дата <= &ДатаКон";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));	
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
	ВсегоДокументов = ТаблицаДокументов.Количество();
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.МаксимальноеЗначение = ВсегоДокументов;
		ФормаПрогрессора.КомментарийОбработкиДанных  = "Проведение документов";		
		ФормаПрогрессора.Открыть();
	КонецЕсли;	

	ИндексСтрокиНачалаДаты = Неопределено;
	ТекущаяДатаПроведения = Неопределено;
	
	Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
		СтрокаДокумента = ТаблицаДокументов[индекс];
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
		КонецЕсли;
		
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		ЭтоРегОперация = ДокументОбъект.Метаданные().Имя = "РегламентнаяОперация";
		
		Если ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить И НЕ ЭтоРегОперация Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяДатаПроведения <> ДокументОбъект.Дата Тогда
			ИндексСтрокиНачалаДаты = индекс;
			ТекущаяДатаПроведения = ДокументОбъект.Дата;
		КонецЕсли;
		
		Попытка
			Если ЭтоРегОперация Тогда
				ДокументОбъект.ВыполнитьОперацию();
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		Исключение
			БезОшибок = Ложь;
			ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
			ЗафиксироватьОшибку(ЭтапКонвертации, "Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки, "Рекомендуется провести указанный документ вручную.", ДокументОбъект.Ссылка);
		КонецПопытки;		
	КонецЦикла;
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли;

	Возврат БезОшибок;
	
КонецФункции

// Функция избавляет служебное описание ошибки от лишней информации
Функция КраткоеОписаниеОшибки(ОписаниеОшибки);
	ПозКонцаСкобок = Найти(ОписаниеОшибки,"}");
	Если ПозКонцаСкобок = 0 Тогда
		
		Возврат ОписаниеОшибки;
		
	Иначе
		
		Возврат Сред(ОписаниеОшибки,ПозКонцаСкобок + 2);
		
	КонецЕсли;
	
КонецФункции // ()

// Процедура проверки загруженных данных
Процедура ПроверитьДанные()
	
	ПроверятьТолькоОстатки = Истина;
	Если ПрефиксСтраниц = "ИБ" Тогда
		Если ОстаткиОбороты = 0 Тогда
			Возврат;
		КонецЕсли;
		Если ШагПериода <>  12 Тогда
			ПроверятьТолькоОстатки = Ложь;
		КонецЕсли;
	Иначе
		Если ДатаНачала <> ДатаОкончания Тогда
			ПроверятьТолькоОстатки = Ложь;		
		КонецЕсли;
	КонецЕсли;
	
	Организации = ПолучитьСписокОрганизаций();
	
	Если Организации.Количество() = 0 Тогда
		ЗафиксироватьОшибку(ЭтапКонвертации, "Отсутствует список организаций для проверки загруженных данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз предыдущих версий.");
		Возврат;
	КонецЕсли;
	
	ТекстПроверки = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организации", Организации);
	Запрос.УстановитьПараметр("НачПериода", НачалоГода(ДатаНачала));
	Если ПроверятьТолькоОстатки Тогда
		Запрос.УстановитьПараметр("КонПериода", НачалоГода(ДатаНачала));
	Иначе
		Запрос.УстановитьПараметр("КонПериода", КонецМесяца(ДатаОкончания));
	КонецЕсли;
	
	Попытка

		ОткрытьФайлДанных(ИмяФайлаДанных);

		ИДКонфигурации = "БухгалтерияПредприятия";
		ЗапросПоИДКонфигурации = Новый Запрос;
		ЗапросПоИДКонфигурации.УстановитьПараметр("ИДКонфигурации", ИДКонфигурации);
		ЗапросПоИДКонфигурации.Текст = 
		"ВЫБРАТЬ
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.Ссылка,
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.Наименование,
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.КонтрольныеЗначения
		|ИЗ
		|	Справочник.КонвертацииИзИнформационныхБазПредыдущихВерсий КАК КонвертацииИзИнформационныхБазПредыдущихВерсий
		|ГДЕ
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.Наименование = &ИДКонфигурации";
		
		Результат = ЗапросПоИДКонфигурации.Выполнить().Выгрузить().Получить(0);
		ТекстПроверки = Результат.КонтрольныеЗначения;
		Объект = Результат.Ссылка.ПолучитьОбъект();
		Объект.КонтрольныеЗначения = "";
		Объект.Записать();
		
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось получить правила проверки загруженных данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз предыдущих версий.");
		ФайлОбмена.Закрыть();
		Возврат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ТекстПроверки) Тогда
		ФайлОбмена.Закрыть();
		Возврат;
	КонецЕсли;
	
	Выполнить(ТекстПроверки);
	
	ФайлОбмена.Закрыть();
	
КонецПроцедуры

//функция получает список организаций из файла обмена 
//и возвращает массив ссылок на справочник Организации
Функция ПолучитьСписокОрганизаций()
	
	СтрОрганизации = Организация;
	
	СписокОрганизаций = Новый Массив;
	Если Найти(СтрОрганизации,";") = 0 Тогда
		СписокОрганизаций.Добавить(СокрЛП(СтрОрганизации));
	Иначе		
		Пока Найти(СтрОрганизации,";") <> 0 Цикл
			НомерСимвола = Найти(СтрОрганизации,";");
			СтрОрганизация = Лев(СтрОрганизации,НомерСимвола-1);
			СписокОрганизаций.Добавить(СокрЛП(СтрОрганизация));			
			СтрОрганизации = Сред(СтрОрганизации,НомерСимвола+1,СтрДлина(СтрОрганизации));			
		КонецЦикла;
		СписокОрганизаций.Добавить(СокрЛП(СтрОрганизации));
	КонецЕсли;
	
	Организации = Новый Массив;
	
	Для Каждого СтрокаСпискаОрганизаций ИЗ СписокОрганизаций Цикл
		Ссылка = Справочники.Организации.НайтиПоНаименованию(СтрокаСпискаОрганизаций);
		Если Ссылка <> Справочники.Организации.ПустаяСсылка() Тогда
			Организации.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Организации;
	
КонецФункции

Процедура ПриЗакрытии()
	
	v8 = Неопределено;
	
	Если ПервыйЗапуск Тогда	
		Обработки.ПанельФункций.ПолучитьФорму().Открыть();
	КонецЕсли;

КонецПроцедуры

//***********************************************************
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 

Процедура одПропустить(Объект, Имя = "") Экспорт

	КолвоВложений = 0; // количество одноименных вложений

	Если Имя = "" Тогда
		
		Имя = Объект.ЛокальноеИмя;
		
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		
		Если Объект.ЛокальноеИмя <> Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = Объект.ТипУзла;
			
		Если ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				
			Если КолвоВложений = 0 Тогда
					
				Прервать;
					
			Иначе
					
				КолвоВложений = КолвоВложений - 1;
					
			КонецЕсли;
				
		ИначеЕсли ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				
			КолвоВложений = КолвоВложений + 1;
				
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 


///////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль формы

ПроверятьИнформационнуюБазу = Истина;

ЭтапКонвертации = "";

ПутьВыгрузкиЗагрузки = КаталогВременныхФайлов();

//ТаблицаОшибок.Колонки.Добавить("Статус");
ТаблицаОшибок.Колонки.Добавить("Этап");
ТаблицаОшибок.Колонки.Добавить("Ошибка");
ТаблицаОшибок.Колонки.Добавить("Рекомендации");
ТаблицаОшибок.Колонки.Добавить("Расшифровка");

ШрифтОбычный = Новый Шрифт(,,,,,);
ШрифтЖирный = Новый Шрифт(,, Истина,,,);

БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);

СистемнаяИнформация = Новый СистемнаяИнформация;
ВерсияПлатформы = ?(Лев(СистемнаяИнформация.ВерсияПриложения,3) = "8.1", "81", "82");
