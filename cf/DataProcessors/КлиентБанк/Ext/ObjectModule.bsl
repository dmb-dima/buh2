Перем ЗагрВидыДокументов;
Перем ЗагрРасчетныеСчета;
Перем ОбязательныеВрегЗАГРУЗКИ;
Перем ВидыОпераций;
Перем ПустаяДата;
Перем СписокЖурналов;
Перем СтруктураРеквизитов;	// Реквизиты загружаемого документа
Перем мВалютаРегламентированногоУчета Экспорт;
Перем СписокКонтрагентов Экспорт; // Список контрагентов не найденных в справочнике
Перем ЭтоНовыйДокумент;
       
// Структуры хранения настроечных данных при экспорте
Перем Экспорт_Выгружаемые;
Перем Экспорт_НеПустые;
Перем СтруктураЭкспорта;

// Структуры обработки текста при импорте
Перем Импорт_КоличествоСтрок;
Перем Импорт_ТекущаяСтрока;
Перем Импорт_ТекстДляРазбора;

// Структуры хранения данных при импорте
Перем Импорт_РасчетныеСчета Экспорт;
Перем Импорт_ВидыДокументов;
Перем Импорт_Заголовок;

// Структуры хранения настроечных данных при импорте
Перем Импорт_Загружаемые;
Перем Импорт_Распознаваемые;
Перем ТегиЗаголовка;
Перем ТегиРасчетногоСчета;
Перем Импорт_НеПустые;
Перем Импорт_ПризнакОбмена;

// Строки с группами реквизитов платежных документов через запятую
Перем РеквизитыПлДок_Основные;
Перем РеквизитыПлДок_ВидПлатежаОплаты;
Перем РеквизитыПлДок_Квитанция;
Перем РеквизитыПлДок_Списано;
Перем РеквизитыПлДок_Поступило;
Перем РеквизитыПлДок_Плательщик;
Перем РеквизитыПлДок_ПлательщикНПР;
Перем РеквизитыПлДок_ПлательщикНПРНеОбязательные;
Перем РеквизитыПлДок_Получатель;
Перем РеквизитыПлДок_ПолучательНПР;
Перем РеквизитыПлДок_ПолучательНПРНеОбязательные;
Перем РеквизитыПлДок_БюджетПлатеж;
Перем РеквизитыПлДок_Назначение;
Перем РеквизитыПлДок_НазначениеНеОбязательные;
Перем РеквизитыПлДок_Аккредитив;
Перем РеквизитыПлДок_УсловияОпл;
Перем РеквизитыПлДок_Дополнительные;

Перем РеквизитыПлДокЭкс_Основные;
Перем РеквизитыПлДокЭкс_ВидПлатежаОплаты;
Перем РеквизитыПлДокЭкс_Плательщик;
Перем РеквизитыПлДокЭкс_ПлательщикНПР;
Перем РеквизитыПлДокЭкс_Получатель;
Перем РеквизитыПлДокЭкс_ПолучательНПР;
Перем РеквизитыПлДокЭкс_БюджетПлатеж;

Перем мТекущаяВалютаВзаиморасчетов;

#Если Клиент Тогда

Функция ПолучитьВыборкуОрганизаций() Экспорт
	
	ЗапросПоОрганизациям = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|");
	
	Возврат ЗапросПоОрганизациям.Выполнить().Выбрать();
	
КонецФункции

//Печать отчета о выгруженных документах
//
Процедура ПечатьОтчетаОВыгруженныхПлатежныхДокументах(ПолеОтчета, Источник) Экспорт
	
	МакетОтчета = ПолучитьМакет("ОтчетОВыгруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Шапка.Параметры.ИмяОтчета 			= "Отчет о выгруженных платежных документах";
	Шапка.Параметры.ИмяСуммыСписания 	= "На списание";
	Шапка.Параметры.ИмяСуммыПоступления = "На поступление";
	Шапка.Параметры.ОписаниеПериода		= "по счету "+БанковскийСчет.НомерСчета+" с "+ Формат(НачПериода,"ДЛФ=D")  +" по " + Формат(КонПериода,"ДЛФ=D");
	ПолеОтчета.Вывести(Шапка);
	
	Индекс=0;
	ИтогоСуммаП = 0;
	ИтогоСуммаР = 0;
	
	Для Каждого СтрокаИсточника Из Источник Цикл
		
		Если СтрокаИсточника.Готовность <> -1 Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаИсточника.ВидДокумента="Платежное поручение" Тогда
			Строка.Параметры.Плательщик     = СтрокаИсточника.Организация;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.ОрганизацияНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.КонтрагентНомерСчета;				
			Строка.Параметры.СуммаСписание  = СтрокаИсточника.СуммаДокумента;
			Строка.Параметры.СуммаПоступление = "";
			ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаДокумента;
		Иначе
			Строка.Параметры.Плательщик     = СтрокаИсточника.Контрагент;
			Строка.Параметры.ПлательщикСчет = СтрокаИсточника.КонтрагентНомерСчета;
			Строка.Параметры.Получатель     = СтрокаИсточника.Организация;
			Строка.Параметры.ПолучательСчет = СтрокаИсточника.ОрганизацияНомерСчета;				
			Строка.Параметры.СуммаСписание  = "";					
			Строка.Параметры.СуммаПоступление = СтрокаИсточника.СуммаДокумента;					
			ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаДокумента;
		КонецЕсли;
		
		Строка.Параметры.Документ       = СтрокаИсточника.Документ;
		Индекс = Индекс+1;
		Строка.Параметры.Индекс         = Индекс;
		
		ПолеОтчета.Вывести(Строка);
	
	КонецЦикла;
	
	Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
	Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
	
	ПолеОтчета.Вывести(Подвал);
	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	ПолеОтчета.ТолькоПросмотр = Истина;
	
КонецПроцедуры	

//Печать отчета о загруженных платежных документах.
//
Процедура ПечатьОтчетаОЗагруженныхПлатежныхДокументах(Источник) Экспорт
	
	ПолеОтчета = Новый ТабличныйДокумент;
	ИмеетсяСекцияРасчСчет = Ложь;
	
	МакетОтчета = ПолучитьМакет("ОтчетОЗагруженныхПлатежныхДокументах");
	
	Шапка    = МакетОтчета.ПолучитьОбласть("Шапка");
	Строка   = МакетОтчета.ПолучитьОбласть("Строка");
	Подвал   = МакетОтчета.ПолучитьОбласть("Подвал");
	Остатки  = МакетОтчета.ПолучитьОбласть("Остатки");
	НазвОрг  = МакетОтчета.ПолучитьОбласть("НазваниеОрганизации");
	
	НазвОрг.Параметры.НазваниеОрганизации = Организация.Наименование;
	ПолеОтчета.Вывести(НазвОрг);
	
	Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		Если Не ПустаяСтрока(СтрокаСчета.ДатаНачала) Тогда
			
			Индекс=0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			ИмеетсяСекцияРасчСчет = Истина;

			Шапка.Параметры.ИмяОтчета 			= "Отчет о загруженных платежных документах";
			Шапка.Параметры.ОписаниеПериода		= "по счету "+СтрокаСчета.РасчСчет+" с "+ СтрокаСчета.ДатаНачала +" по " + СтрокаСчета.ДатаКонца;
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации",ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			ДатаНачала = ПолучитьДатуИзСтроки(ДатаНачала, СтрокаСчета.ДатаНачала);
			ДатаКонца = ПолучитьДатуИзСтроки(ДатаКонца, СтрокаСчета.ДатаКонца);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 
					И СтрокаИсточника.Поступило >= ДатаНачала И СтрокаИсточника.Поступило <= ДатаКонца Тогда
					
					Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1),СтрокаИсточника.Плательщик,СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет		= СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.СуммаПоступление= СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаПоступило;
					ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0 
					И СтрокаИсточника.Списано >= ДатаНачала И СтрокаИсточника.Списано <= ДатаКонца Тогда

					Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Получатель1),СтрокаИсточника.Получатель,СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет 		= СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.СуммаСписание   = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаСписано;
					ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс+1;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ       = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
				Иначе
					Строка.Параметры.Документ       = "НЕ ЗАГРУЖЕН";
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				КонецЕсли;
				
				Строка.Параметры.Индекс         = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
			
			ПолеОтчета.Вывести(Подвал);
			
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + СтрокаСчета.ДатаНачала +":";
			Остатки.Параметры.Текст2 = "Остаток на конец " + СтрокаСчета.ДатаКонца +":";
                                                                                          
			Если Не ПустаяСтрока(СтрокаСчета.НачальныйОстаток) И Не ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.НачальныйОстаток, ".", ""),"-",""),",","")) Тогда
				Остатки.Параметры.Сумма1 = Формат(Число(СтрокаСчета.НачальныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма1 = СтрокаСчета.НачальныйОстаток;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаСчета.КонечныйОстаток) И Не ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(СтрокаСчета.КонечныйОстаток, ".", ""),"-",""),",","")) Тогда
				Остатки.Параметры.Сумма2 = Формат(Число(СтрокаСчета.КонечныйОстаток), "ЧЦ=17; ЧДЦ=2; ЧРД=.; ЧРГ=,");
			Иначе
				Остатки.Параметры.Сумма2 = СтрокаСчета.КонечныйОстаток;
			КонецЕсли;
			
			ПолеОтчета.Вывести(Остатки);
			
		КонецЕсли;
	КонецЦикла;
	Если Не ИмеетсяСекцияРасчСчет Тогда
		Для Каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
			
			Индекс=0;
			ИтогоСуммаП = 0;
			ИтогоСуммаР = 0;
			
			Шапка.Параметры.ИмяОтчета 			= "Отчет о загруженных платежных документах";
			Шапка.Параметры.ОписаниеПериода		= "по счету "+СтрокаСчета.РасчСчет+" с "+ Импорт_Заголовок.ДатаНачала +" по " + Импорт_Заголовок.ДатаКонца;
			ПолеОтчета.Вывести(Шапка);
			
			Отбор = Новый Структура;                    
			Отбор.Вставить("СчетОрганизации",ПоискБанковскогоСчета(СтрокаСчета.РасчСчет));
			ОтборПоСчету = Источник.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаИсточника Из Источник Цикл
				
				Если СтрокаИсточника.СуммаПоступило > 0 Тогда
					
					Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Плательщик1),СтрокаИсточника.Плательщик,СтрокаИсточника.Плательщик1);
					Строка.Параметры.Счет		= СтрокаИсточника.ПлательщикСчет;
					Строка.Параметры.СуммаПоступление= СтрокаИсточника.СуммаПоступило;
					Строка.Параметры.СуммаСписание= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаПоступило;
					ИтогоСуммаП = ИтогоСуммаП + СтрокаИсточника.СуммаПоступило;
					
				ИначеЕсли СтрокаИсточника.СуммаСписано > 0  Тогда
					
					Строка.Параметры.Контрагент = ?(ПустаяСтрока(СтрокаИсточника.Получатель1),СтрокаИсточника.Получатель,СтрокаИсточника.Получатель1);
					Строка.Параметры.Счет 		= СтрокаИсточника.ПолучательСчет;
					Строка.Параметры.СуммаСписание   = СтрокаИсточника.СуммаСписано;
					Строка.Параметры.СуммаПоступление= "";
					Строка.Параметры.Дата= СтрокаИсточника.ДатаСписано;
					ИтогоСуммаР = ИтогоСуммаР + СтрокаИсточника.СуммаСписано;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Строка.Параметры.Номер = СтрокаИсточника.Номер;
				Строка.Параметры.НазначениеПлатежа = СтрокаИсточника.НазначениеПлатежа;
				Индекс = Индекс+1;
				
				Док = СтрокаИсточника.Документ;
				Если ЗначениеЗаполнено(Док) Тогда
					Строка.Параметры.Документ       = Док;
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
				Иначе
					Строка.Параметры.Документ       = "НЕ ЗАГРУЖЕН";
					Строка.Области.Строка.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
				КонецЕсли;
				
				Строка.Параметры.Индекс         = Индекс;
				
				ПолеОтчета.Вывести(Строка);
				
			КонецЦикла;
			
			Подвал.Параметры.ИтогоСуммаП = ИтогоСуммаП;	
			Подвал.Параметры.ИтогоСуммаР = ИтогоСуммаР;	
			
			ПолеОтчета.Вывести(Подвал);
			
			Остатки.Параметры.Текст1 = "Остаток на начало " + Импорт_Заголовок.ДатаНачала +":";
			Остатки.Параметры.Текст2 = "Остаток на конец " + Импорт_Заголовок.ДатаКонца +":";
			Остатки.Параметры.Сумма1 = "";
			Остатки.Параметры.Сумма2 = "";
			ПолеОтчета.Вывести(Остатки);
			
		КонецЦикла;
	КонецЕсли;

	
	ПолеОтчета.ОтображатьГруппировки = Ложь;
	ПолеОтчета.ОтображатьЗаголовки = Ложь;
	ПолеОтчета.ОтображатьСетку = Ложь;
	ПолеОтчета.ТолькоПросмотр = Истина;
	
	ПолеОтчета.Показать("Отчет о загруженных платежных документах.");
	
КонецПроцедуры	

Функция ПоискБанковскогоСчета(Номер)
	
	Запрос = новый запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	БанковскиеСчета.Ссылка
	               |ИЗ
	               |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	               |Где
	               |	БанковскиеСчета.НомерСчета =&Номер";
				   
	Запрос.УстановитьПараметр("Номер",Номер);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()>0 Тогда
		Возврат Результат[0].Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

//вызываем форму для просмотра тех, кого не нашли
Процедура ПросмотрКонтрагентов(ТипПросмотра) Экспорт	
	
	ФормаКонтрагентов =ПолучитьФорму("ФормаКонтрагентов");
	
	Если (ТипПросмотра = 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Закрыть();
	ИначеЕсли (ТипПросмотра > 0) И (ФормаКонтрагентов.Открыта()) Тогда
		ФормаКонтрагентов.Обновить();
	ИначеЕсли (ТипПросмотра > 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		ФормаКонтрагентов.Открыть();
	ИначеЕсли (ТипПросмотра = 0) И (НЕ(ФормаКонтрагентов.Открыта())) Тогда
		Сообщить("Все контрагенты существуют в справочнике.", СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры //ПросмотрКонтрагентов();

//Создает контрагента
//
Функция СоздатьКонтрагента(СтрокаКонтрагент = Неопределено, ОткрыватьФорму=Истина) Экспорт //или СтрокаКонтрагент - строка, или ТаблицаКонтрагентов - ТЗ
	
	СообщатьОСозданномКонтрагенте 	 = ложь;
	СообщатьОСозданномБанковскомСчете= ложь;
	СообщатьОСозданномДоговоре		 = ложь;
	//эти элементы есть у всех справочников
	Если ТипЗнч(СтрокаКонтрагент.Реквизит)<>Тип("СправочникСсылка.Контрагенты") Тогда
		НовыйЭлемент =Справочники.Контрагенты.СоздатьЭлемент();
		
		НовыйЭлемент.Наименование = СтрокаКонтрагент.Представление;
		НовыйЭлемент.НаименованиеПолное=НовыйЭлемент.Наименование;
		НовыйЭлемент.Родитель = ГруппаДляНовыхКонтрагентов;
		НовыйЭлемент.ИНН =СтрокаКонтрагент.Строки[1].Значение;
		НовыйЭлемент.КПП =СтрокаКонтрагент.Строки[2].Значение;
		НовыйЭлемент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		
		НовыйЭлемент.Записать();
		НовыйЭлемент.ГоловнойКонтрагент = НовыйЭлемент.Ссылка;
		НовыйЭлемент.Записать();
		
		СообщатьОСозданномКонтрагенте = истина;
	Иначе
		НовыйЭлемент = СтрокаКонтрагент.Реквизит.ПолучитьОбъект();
	КонецЕсли;
	
	Если СообщатьОСозданномКонтрагенте Тогда
		Сообщить("Контрагент("+СтрокаКонтрагент.Представление+") создан.");
		ПредставлениеКонтрагента = ""+Символы.Таб+"- ";
	Иначе
		ПредставлениеКонтрагента = "Контрагенту("+СтрокаКонтрагент.Представление+")";
	КонецЕсли;
	
	Для каждого Строка из СтрокаКонтрагент.Строки Цикл
			
		СообщатьОСозданномБанковскомСчете= ложь;
		СообщатьОСозданномДоговоре		 = ложь;
		Если Строка.Представление = "Р/счет" и  Строка.Пометка Тогда
			Попытка
				НомерСчета      = Строка.Значение;
				
				НовыйСчет = Справочники.БанковскиеСчета.СоздатьЭлемент();
				НовыйСчет.НомерСчета      = НомерСчета;
				НовыйСчет.Владелец        = НовыйЭлемент.Ссылка;
				НовыйСчет.ВидСчета        = "Расчетный";
				НовыйСчет.ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
				
				РССчет = Строка.Строки;
				Если РССчет.найти("РЦ банка","Представление",истина) <> неопределено Тогда
					
					//Банк контрагента
					Если Не ПустаяСтрока(РССчет[0].Значение) Тогда
						НовыйБанк = НайтиБанкПоБикИКоррСчету("",РССчет[2].Значение);
						Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
							НовыйБанк = Справочники.Банки.СоздатьЭлемент();
							НовыйБанк.Наименование = РССчет[0].Значение;
							НовыйБанк.Город        = РССчет[1].Значение;
							НовыйБанк.КоррСчет     = РССчет[2].Значение;
							НовыйБанк.Записать();
						КонецЕсли;
						НовыйСчет.Банк            = НовыйБанк.Ссылка;
					КонецЕсли;
					
					//РЦ банка контрагента
					Если Не ПустаяСтрока(РССчет[3].Значение) Тогда
						НовыйБанкКорр = НайтиБанкПоБикИКоррСчету(РССчет[5].Значение,РССчет[6].Значение);
						Если НовыйБанкКорр = Справочники.Банки.ПустаяСсылка() Тогда
							НовыйБанкКорр = Справочники.Банки.СоздатьЭлемент();
							НовыйБанкКорр.Наименование = РССчет[3].Значение;
							НовыйБанкКорр.Город        = РССчет[4].Значение;
							НовыйБанкКорр.Код          = РССчет[5].Значение;
							НовыйБанкКорр.КоррСчет     = РССчет[6].Значение;
							НовыйБанкКорр.Записать();
						КонецЕсли;
						НовыйСчет.БанкДляРасчетов = НовыйБанкКорр.Ссылка;
					КонецЕсли;
					
				Иначе
					
					//Банк контрагента
					НовыйБанк = НайтиБанкПоБикИКоррСчету(РССчет[2].Значение,РССчет[3].Значение);
					Если НовыйБанк = Справочники.Банки.ПустаяСсылка() Тогда
						НовыйБанк = Справочники.Банки.СоздатьЭлемент();
						НовыйБанк.Наименование = РССчет[0].Значение;
						НовыйБанк.Город        = РССчет[1].Значение;
						НовыйБанк.Код          = РССчет[2].Значение;
						НовыйБанк.КоррСчет     = РССчет[3].Значение;
						НовыйБанк.Записать();
					КонецЕсли;
					НовыйСчет.Банк = НовыйБанк.Ссылка;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НовыйЭлемент.ОсновнойБанковскийСчет) Тогда
					НовыйСчет.Наименование    = "Основной расчетный счет";
					НовыйСчет.Записать();
					НовыйЭлемент.ОсновнойБанковскийСчет =НовыйСчет.Ссылка;
				Иначе
					НовыйСчет.Наименование    = Лев(""+ НовыйБанк +", (Расчетный)",100);
					НовыйСчет.Записать();
				КонецЕсли;
				
				СообщатьОСозданномБанковскомСчете = истина;
			Исключение
				
				Сообщить("Не удалось создать банковский счет контрагента!");
				
			КонецПопытки;
		КонецЕсли;
		Если Строка.Представление = "Договор" и  Строка.Пометка Тогда
			
			Попытка
				НайденныйДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
				
				НайденныйДоговорОбъект.ВалютаВзаиморасчетов  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.ВалютаВзаиморасчетов) Тогда
					НайденныйДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(НайденныйДоговорОбъект.Организация) Тогда
					НайденныйДоговорОбъект.Организация  = Организация;
				КонецЕсли;
				
				НайденныйДоговорОбъект.Владелец    = НовыйЭлемент.Ссылка;
				Вид =  Строка.Значение;
				Если Вид="С покупателем" Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
				ИначеЕсли Вид="С поставщиком" Тогда
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;		
				Иначе
					НайденныйДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;		
				КонецЕсли;
				НайденныйДоговорОбъект.Наименование          = "Основной договор "+НРег(Вид);
				НайденныйДоговорОбъект.Записать();
				НайденныйДоговор = НайденныйДоговорОбъект.Ссылка;
				
				Если Не ЗначениеЗаполнено(НовыйЭлемент.ОсновнойДоговорКонтрагента) Тогда
					НовыйЭлемент.ОсновнойДоговорКонтрагента =НайденныйДоговор;
				КонецЕсли;
				
				СообщатьОСозданномДоговоре		 = Истина;
			Исключение
				
				Сообщить("Не удалось создать договор контрагента!");
				
			КонецПопытки;

		КонецЕсли;
		
		Если СообщатьОСозданномБанковскомСчете Тогда
			Сообщить(ПредставлениеКонтрагента + " добавлен банковский счет ("+НомерСчета+").");
		КонецЕсли;
		Если СообщатьОСозданномДоговоре Тогда
			Сообщить(ПредставлениеКонтрагента + " добавлен договор("+Вид+").");
		КонецЕсли;

	КонецЦикла;
	
	НовыйЭлемент.Записать();
	
	Если ОткрыватьФорму Тогда
		ОткрытьЗначение(НовыйЭлемент);
	КонецЕсли;
	
	Контрагент = НовыйЭлемент.Ссылка;
	
	Возврат Контрагент;

КонецФункции //СоздатьКонтрагента(Контрагент)

// Ищет банк по БИК или КоррСчету
//
Функция НайтиБанкПоБикИКоррСчету(БИК,КоррСчет)
	
	НайденныйБанк = Справочники.Банки.ПустаяСсылка();
	Если Не ПустаяСтрока(БИК) Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоКоду(БИК);
	КонецЕсли;
	
	Если НайденныйБанк = Справочники.Банки.ПустаяСсылка() Тогда
		НайденныйБанк = Справочники.Банки.НайтиПоРеквизиту("КоррСчет",КоррСчет);
	КонецЕсли;

	Возврат НайденныйБанк;

КонецФункции

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента)
	
	мТекущаяВалютаВзаиморасчетов     = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	УстановитьСвойство(СтрокаПлатеж , "СуммаВзаиморасчетов", МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ОбъектДокумента.ВалютаДокумента,
																ОбъектДокумента.ВалютаДокумента,
																ОбъектДокумента.КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
																ОбъектДокумента.КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов));
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

Процедура РассчитатьКурсИСуммуВзаиморасчетов(СтрокаПлатеж, мТекущаяВалютаВзаиморасчетов, ДатаКурса, ОбъектДокумента)
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДатаКурса);

	УстановитьСвойство(СтрокаПлатеж , "КурсВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Курс);
	УстановитьСвойство(СтрокаПлатеж , "КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);

	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж, ОбъектДокумента);
	
КонецПроцедуры // РассчитатьКурсИСуммуВзаиморасчетов()

Функция ПолучитьНомерВФорматеОбмена(НомерДокумента, Знач ПрефиксОрганизации)

	Номер = СокрЛП(НомерДокумента);
	
	ОбщегоНазначения.ДобавитьПрефиксУзла(ПрефиксОрганизации);

	// удаление префикса из номера документа
	Если Найти(Номер, ПрефиксОрганизации)=1 Тогда 
		Номер = Сред(Номер, СтрДлина(ПрефиксОрганизации)+1);
	КонецЕсли;

	// так же, может остаться "минус" впереди
	Если Лев(Номер, 1) = "-" Тогда
		Номер = Сред(Номер, 2);
	КонецЕсли;

	// удаление ведущих нулей
	Пока Лев(Номер, 1)="0" Цикл
		Номер = Сред(Номер, 2);
	КонецЦикла;
	
	Возврат Номер;
	
КонецФункции

// Процедура читает заголовок файла обмена
//
Функция ПрочитатьФайл(Файл)
	
	ФайлЗагр = Новый Файл(Файл);
	Если ФайлЗагр.Существует() = Ложь Тогда
		Сообщить("Файла "+Файл+" не существует!");
		Возврат Неопределено;
	КонецЕсли;
	
	ПотокЧтения = Новый ТекстовыйДокумент();
	Попытка
		ПотокЧтения.Прочитать(Файл);
	Исключение
		Сообщить("Файл не прочитан.", СтатусСообщения.Внимание);
		Возврат Неопределено;
	КонецПопытки;
	
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	Конецесли;

	ПотокЧтения.Прочитать(Файл,Кодир);

	Если ПотокЧтения.КоличествоСтрок()<1 Тогда
		Сообщить("В файл нет данных!");
		Возврат Неопределено;
	КонецЕсли;

	Если СокрЛП(ПотокЧтения.ПолучитьСтроку(1))<>"1CClientBankExchange" Тогда
		Сообщить("Указанный файл не является файлом обмена или неверно указана кодировка!");
		Возврат Неопределено;
	КонецЕсли;

	Возврат ПотокЧтения.ПолучитьТекст();

КонецФункции

//создаем список ненайденных контрагентов
Процедура СписокНеНайденных(СтрокаДокумента, Документ = Неопределено) Экспорт
	
	НайденКонтрагент = ТипЗнч(СтрокаДокумента.Контрагент)<>Тип("Строка");
	НайденСчет = ТипЗнч(СтрокаДокумента.СчетКонтрагента)<>Тип("Строка");
	НайденДоговор = ТипЗнч(СтрокаДокумента.Договор)<>Тип("Строка");
	
	ТипКонтрагента =?(СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета,"ПОЛУЧАТЕЛЬ","ПЛАТЕЛЬЩИК");
	НайденнаяЗаписьОКонтрагенте = ТаблицаКонтрагентов.Строки.Найти(СтрокаДокумента[ТипКонтрагента+"ИНН"], "Значение", истина);

	//Контрагент
	Если НайденнаяЗаписьОКонтрагенте=неопределено Тогда
		
		НовыйКонтрагент = ТаблицаКонтрагентов.Строки.Добавить();
		Окончание = ?(СтрокаДокумента[ТипКонтрагента+"1"]="","","1");
		НовыйКонтрагент.Представление = СтрокаДокумента[ТипКонтрагента+Окончание];
		НовыйКонтрагент.НомерСтроки = СтрокаДокумента.НомерСтроки;
	
		ДобавитьОписаниеНовогоРеквизита("Наименование"	,Окончание	,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("ИНН"			,"ИНН"	,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		ДобавитьОписаниеНовогоРеквизита("КПП"			,"КПП"	,ТипКонтрагента, НовыйКонтрагент, СтрокаДокумента);
		
		Если НайденКонтрагент Тогда
			НовыйКонтрагент.Реквизит = СтрокаДокумента.Контрагент;
		КонецЕсли;

	ИначеЕсли НайденнаяЗаписьОКонтрагенте<>неопределено Тогда
		
		НовыйКонтрагент = НайденнаяЗаписьОКонтрагенте.Родитель;
	
	КонецЕсли;
	
	//СчетКонтрагента
	Если Не НайденСчет и НовыйКонтрагент.Строки.Найти(СтрокаДокумента[ТипКонтрагента+"СЧЕТ"], "Значение", истина) = неопределено Тогда
		
		РеквизитыНовогоКонтрагента = 	ДобавитьОписаниеНовогоРеквизита("Р/счет"		,"СЧЕТ"	,ТипКонтрагента, НовыйКонтрагент,СтрокаДокумента);
		
		ПрямыеРасчеты =ПустаяСтрока(СтрокаДокумента[ТипКонтрагента+"2"]);
		Если ПрямыеРасчеты Тогда
			ДобавитьОписаниеНовогоРеквизита("Банк"					,"БАНК1"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка"			,"БАНК2"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код банка"				,"БИК"		,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка"		,"КОРСЧЕТ"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
		Иначе
			ДобавитьОписаниеНовогоРеквизита("Банк"						,"3"		,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Город банка"				,"4"		,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет банка"			,"РАСЧСЧЕТ"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("РЦ банка"					,"БАНК1"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Местонахождение РЦ банка"	,"БАНК2"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Код РЦ банка"				,"БИК"		,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
			ДобавитьОписаниеНовогоРеквизита("Кор. счет РЦ банка"		,"КОРСЧЕТ"	,ТипКонтрагента, РеквизитыНовогоКонтрагента,СтрокаДокумента);
		КонецЕсли;
		
	КонецЕсли;
	
	//ВидДоговора
	Если Не НайденДоговор Тогда
		ВидыДоговоров = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(СтрокаДокумента.ВидОперации);
		Если ВидыДоговоров.Количество()>0 Тогда
			ВидДоговора = Строка(ВидыДоговоров[0]);
		КонецЕсли;
    КонецЕсли;

	//Договор
	Если Не НайденДоговор и НовыйКонтрагент.Строки.Найти(ВидДоговора, "Значение", истина) = неопределено Тогда
		РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
		РеквизитыНовогоКонтрагента.Представление= "Договор";
		РеквизитыНовогоКонтрагента.Значение = ВидДоговора;
				
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = "Наименование";
		РеквизитыДоговора.Значение = "Основной договор "+НРег(ВидДоговора);
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = "Вид";
		РеквизитыДоговора.Значение = ВидДоговора;
		
		РеквизитыДоговора = РеквизитыНовогоКонтрагента.Строки.Добавить();
		РеквизитыДоговора.Представление = "Ведение взаиморасчетов";
		РеквизитыДоговора.Значение = "По договору в целом";
	КонецЕсли;
	
КонецПроцедуры //СписокНенайденных()

Функция ДобавитьОписаниеНовогоРеквизита(Представление,Реквизит,ТипКонтрагента,НовыйКонтрагент,СтрокаДокумента)

	РеквизитыНовогоКонтрагента = НовыйКонтрагент.Строки.Добавить();
	РеквизитыНовогоКонтрагента.Представление= Представление;
	РеквизитыНовогоКонтрагента.Значение = СтрокаДокумента[ТипКонтрагента+Реквизит];
	РеквизитыНовогоКонтрагента.Реквизит = ТипКонтрагента+Реквизит;
    Возврат РеквизитыНовогоКонтрагента;
	
КонецФункции //ДобавитьОписаниеНовогоРеквизита

Процедура ОбновитьСтруктуруТабличногоПоля(ТабПоле, СоответствиеИзменятьРазмер = Неопределено) Экспорт
	
	ТабПоле.СоздатьКолонки();
	
	Если ТипЗнч(СоответствиеИзменятьРазмер) = Тип("Соответствие") Тогда
		Для каждого КолонкаТабПоля Из ТабПоле.Колонки Цикл
			Если СоответствиеИзменятьРазмер[КолонкаТабПоля.Имя] = Ложь Тогда
				КолонкаТабПоля.ИзменениеРазмера = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

/////// НОВОЕ /////////////////////////////////////////////////////////////

Процедура УстановитьГотовность(ТекущаяГотовность, НоваяГотовность)

	Если ТекущаяГотовность < НоваяГотовность Тогда
		ТекущаяГотовность = НоваяГотовность;
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьНастройкуЗаполнения(ИмяДокумента,ИмяПараметра)
	
	Возврат НастройкаЗаполнения.Найти(ИмяДокумента,"Документ")[ИмяПараметра] 
	
КонецФункции
/////////////// Формирование управляющих данных ///////////////////////////

Процедура ЗаполнитьСтрокиРеквизитовПлДокументовДляИмпорта()
	
	РеквизитыПлДок_Основные = "Номер,Дата,Сумма";
	РеквизитыПлДок_ВидПлатежаОплаты = "ВидПлатежа,ВидОплаты";
	
	РеквизитыПлДок_Квитанция = "КвитанцияДата,КвитанцияВремя,КвитанцияСодержание";
	
	РеквизитыПлДок_Списано = "ДатаСписано";
	РеквизитыПлДок_Поступило = "ДатаПоступило";
	
	РеквизитыПлДок_Плательщик = "ПлательщикСчет,Плательщик,ПлательщикИНН,Плательщик1";
	РеквизитыПлДок_ПлательщикНПР = "ПлательщикРасчСчет,ПлательщикБанк1,ПлательщикБанк2,ПлательщикБИК,ПлательщикКорсчет";
	РеквизитыПлДок_ПлательщикНПРНеОбязательные = "Плательщик2,Плательщик3,Плательщик4";
	
	РеквизитыПлДок_Получатель = "ПолучательСчет,Получатель,ПолучательИНН,Получатель1";
	РеквизитыПлДок_ПолучательНПР = "ПолучательРасчСчет,ПолучательБанк1,ПолучательБанк2,ПолучательБИК,ПолучательКорсчет";
	РеквизитыПлДок_ПолучательНПРНеОбязательные = "Получатель2,Получатель3,Получатель4";
	
	РеквизитыПлДок_БюджетПлатеж = "СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";
	
	РеквизитыПлДок_Назначение = "НазначениеПлатежа";
	РеквизитыПлДок_НазначениеНеОбязательные = "НазначениеПлатежа1,НазначениеПлатежа2,НазначениеПлатежа3,НазначениеПлатежа4,НазначениеПлатежа5,НазначениеПлатежа6";
	
	РеквизитыПлДок_Аккредитив = "СрокПлатежа,Очередность";
	
	РеквизитыПлДок_УсловияОпл = "УсловиеОплаты1,УсловиеОплаты2,УсловиеОплаты3";
	
	РеквизитыПлДок_Дополнительные = "СрокАкцепта,ВидАккредитива,ПлатежПоПредст,ДополнУсловия,НомерСчетаПоставщика,ДатаОтсылкиДок";
	
КонецПроцедуры

Функция СоздатьСоответствиеИзСтроки(Знач СтрокаЧерезЗапятую)
	
	НовоеСоответствие = Новый Соответствие;

	ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
	
	Пока ПозицияРазделителя > 0 Цикл
		ИмяИтема = Лев(СтрокаЧерезЗапятую, ПозицияРазделителя - 1);
		НовоеСоответствие.Вставить(ИмяИтема, Истина);
		СтрокаЧерезЗапятую = Сред(СтрокаЧерезЗапятую, ПозицияРазделителя + 1);
		ПозицияРазделителя = Найти(СтрокаЧерезЗапятую, ",");
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаЧерезЗапятую) > 0 Тогда
		НовоеСоответствие.Вставить(СтрокаЧерезЗапятую, Истина);
		
	КонецЕсли;
		
	Возврат НовоеСоответствие;
	
КонецФункции

Процедура СформироватьСоответствиеВыгружаемых()
	
	Экспорт_Выгружаемые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДок_Основные + "," +
	РеквизитыПлДок_ВидПлатежаОплаты + "," +
	РеквизитыПлДок_Плательщик + "," +
	РеквизитыПлДок_ПлательщикНПР + "," +
	РеквизитыПлДок_ПлательщикНПРНеОбязательные + "," +
	РеквизитыПлДок_Получатель + "," +
	РеквизитыПлДок_ПолучательНПР + "," +
	РеквизитыПлДок_ПолучательНПРНеОбязательные + "," +
	РеквизитыПлДок_БюджетПлатеж + "," +
	РеквизитыПлДок_Назначение + "," +
	РеквизитыПлДок_НазначениеНеОбязательные + "," +
	РеквизитыПлДок_Аккредитив + "," +
	РеквизитыПлДок_УсловияОпл + "," +
	РеквизитыПлДок_Дополнительные);
	
КонецПроцедуры

Процедура СформироватьСоответствияНеПустыхПриИмпорте()
	
	ИмпортНеПустые_ПлатежноеПоручение = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН");
	
	// по наличию статуса составителя определяется что платеж - налоговый
	ИмпортНеПустые_ПлатежноеПоручениеБюджет = СоздатьСоответствиеИзСтроки(
	"Номер,Дата,Сумма,ПлательщикСчет,ПлательщикИНН,ПолучательСчет,ПолучательИНН," +
	"СтатусСоставителя,ПлательщикКПП,ПолучательКПП,ПоказательКБК,ОКАТО,ПоказательОснования," +
	"ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа");
	
	Импорт_НеПустые = Новый Массив;
	
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручение);
	Импорт_НеПустые.Добавить(ИмпортНеПустые_ПлатежноеПоручениеБюджет);
	
КонецПроцедуры

Процедура СформироватьТегиЗаголовка()
	
	СтрокаТегов = ВРЕГ("ВерсияФормата,Кодировка,Отправитель,Получатель,ДатаСоздания,ВремяСоздания,ДатаНачала,ДатаКонца");
	ТегиЗаголовка = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
	Импорт_Заголовок = Новый Структура(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьТегиРасчетногоСчета()
	
	СтрокаТегов = ВРЕГ("ДатаНачала,ДатаКонца,РасчСчет,НачальныйОстаток,ВсегоПоступило,ВсегоСписано,КонечныйОстаток,КонецРасчСчет");
	ТегиРасчетногоСчета = СоздатьСоответствиеИзСтроки(СтрокаТегов);
	
КонецПроцедуры

Процедура СформироватьСоответствиеЗагружаемых()
	
	Импорт_Загружаемые = СоздатьСоответствиеИзСтроки(ВРЕГ(РеквизитыПлДок_Основные + ","
	 + РеквизитыПлДок_ВидПлатежаОплаты + ","
	 + РеквизитыПлДок_Квитанция + ","
	 + РеквизитыПлДок_Списано + ","
	 + РеквизитыПлДок_Поступило + ","
	 + РеквизитыПлДок_Плательщик + ","
	 + РеквизитыПлДок_ПлательщикНПР + ","
	 + РеквизитыПлДок_ПлательщикНПРНеОбязательные + ","
	 + РеквизитыПлДок_Получатель + ","
	 + РеквизитыПлДок_ПолучательНПР + ","
	 + РеквизитыПлДок_ПолучательНПРНеОбязательные + ","
	 + РеквизитыПлДок_БюджетПлатеж + ","
	 + РеквизитыПлДок_Назначение + ","
	 + РеквизитыПлДок_НазначениеНеОбязательные + ","
	 + РеквизитыПлДок_Аккредитив + ","
	 + РеквизитыПлДок_УсловияОпл + ","
	 + РеквизитыПлДок_Дополнительные));
	
КонецПроцедуры

Процедура ЗаполнитьРаспознаваемыеПриИмпорте()
	
	Импорт_Распознаваемые = Новый Массив;
	
	// определяют операцию для входящих документов
	Импорт_Распознаваемые.Добавить("Списано");
	Импорт_Распознаваемые.Добавить("Поступило");
	
	// Контрагент
	Импорт_Распознаваемые.Добавить("Контрагент");
	Импорт_Распознаваемые.Добавить("СчетКонтрагента");
	
	// Сумма
	Импорт_Распознаваемые.Добавить("СуммаДокумента");
	
	// Наконец, сам документ
	Импорт_Распознаваемые.Добавить("Документ");
	
	// Необязательные реквизиты, практически никогда нет
	Импорт_Распознаваемые.Добавить("ПоказательДатыДок");
	Импорт_Распознаваемые.Добавить("СрокПлатежаДок");
	Импорт_Распознаваемые.Добавить("СрокАкцептаДок");
	Импорт_Распознаваемые.Добавить("ДатаОтсылки");

КОнецПроцедуры


///////////////// Начальное формирование таблицы и поля ////////////////////

Функция СоздатьКолонкуВТаблице(РабочаяТаблица, ТабПоле, Имя, ТипКолонки = Неопределено, Заголовок = "", СоответсвиеХарактеристик)
	
	Если ПустаяСтрока(Имя) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ШиринаКолонки = (СоответсвиеХарактеристик["Ширина"]);
	Если ТипЗнч(ШиринаКолонки) <> Тип("Число") Тогда
		ШиринаКолонки =  0;
	КонецЕсли;
	
	Если ТипЗнч(ТипКолонки) = Тип("ОписаниеТипов") Тогда
		РабочаяТаблица.Колонки.Добавить(Имя, ТипКолонки, Заголовок, ШиринаКолонки);
		
	Иначе
		РабочаяТаблица.Колонки.Добавить(Имя, , Заголовок, ШиринаКолонки);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтруктуруЭкспорта()

	СтруктураЭкспорта = новый структура;
	
	СтруктураЭкспорта.Вставить( "Выгружать",             "");  //     "_",                         
	СтруктураЭкспорта.Вставить( "Готовность",            "");  //     "Готовность",                 
	
	СтруктураЭкспорта.Вставить( "НомерДок",              "");  //     "№ Документа",                
	СтруктураЭкспорта.Вставить( "Номер",                 "");  //    "Номер",                     
	СтруктураЭкспорта.Вставить( "Дата",                  "");  //      "Дата",                      
	СтруктураЭкспорта.Вставить( "Операция",              "");  //     "Операция",                  
	СтруктураЭкспорта.Вставить( "СчетОрганизации",       "");  //   "Эл. Р/с организации",        
	СтруктураЭкспорта.Вставить( "НомерСчетаОрганизации", "");  //    "Р/с организации",          
	СтруктураЭкспорта.Вставить( "Сумма",                 "");  //   "Сумма",                     
	
	СтруктураЭкспорта.Вставить( "Контрагент",            "");  //    "Контрагент",                
	СтруктураЭкспорта.Вставить( "СчетКонтрагента",       "");  //  "Р/с контрагента",           
	СтруктураЭкспорта.Вставить( "НомерСчетаКонтрагента", "");  //     "Эл. Р/с контрагента",            
	
	СтруктураЭкспорта.Вставить( "КвитанцияДата",         "");  //       "Дата форм. квитанции",       
	СтруктураЭкспорта.Вставить( "КвитанцияВремя",        "");  //     "Время форм. квитанции",      
	СтруктураЭкспорта.Вставить( "КвитанцияСодержание",   "");  //     "Содержание квитанции",       
	
	СтруктураЭкспорта.Вставить( "ПлательщикСчет",        "");  //   "Расчетный счет плательщика", 
	СтруктураЭкспорта.Вставить( "Плательщик",            "");  //     "Плательщик",                 
	СтруктураЭкспорта.Вставить( "ПлательщикИНН",         "");  //   "ИНН плательщика",            
	СтруктураЭкспорта.Вставить( "Плательщик1",           "");  //     "Наименование плательщика",  
	СтруктураЭкспорта.Вставить( "Плательщик2",           "");  //   "Расчетный счет плательщика", 
	СтруктураЭкспорта.Вставить( "Плательщик3",           "");  //     "Банк плательщика",          
	СтруктураЭкспорта.Вставить( "Плательщик4",           "");  //     "Город банка плательщика",   
	СтруктураЭкспорта.Вставить( "ПлательщикРасчСчет",    "");  //   "Корсчет банка плательщика",  
	СтруктураЭкспорта.Вставить( "ПлательщикБанк1",       "");  //     "РЦ банка плательщика",       
	СтруктураЭкспорта.Вставить( "ПлательщикБанк2",       "");  //     "Город РЦ банка плательщика", 
	СтруктураЭкспорта.Вставить( "ПлательщикБИК",         "");  //    "БИК РЦ банка плательщика",  
	СтруктураЭкспорта.Вставить( "ПлательщикКорсчет",     "");  //   "Корсчет РЦ банка плат.",     
	
	СтруктураЭкспорта.Вставить( "ПолучательСчет",        "");  //   "Расчетный счет получателя",  
	СтруктураЭкспорта.Вставить( "Получатель",            "");  //     "Получатель",                 
	СтруктураЭкспорта.Вставить( "ПолучательИНН",         "");  //   "ИНН получателя",             
	СтруктураЭкспорта.Вставить( "Получатель1",           "");  //     "Наименование получателя",    
	СтруктураЭкспорта.Вставить( "Получатель2",           "");  //   "Расчетный счет получателя",  
	СтруктураЭкспорта.Вставить( "Получатель3",           "");  //     "Банк получателя",            
	СтруктураЭкспорта.Вставить( "Получатель4",           "");  //     "Город банка получателя",     
	СтруктураЭкспорта.Вставить( "ПолучательРасчСчет",    "");  //   "Корсчет банка получателя",   
	СтруктураЭкспорта.Вставить( "ПолучательБанк1",       "");  //     "РЦ банка получателя",        
	СтруктураЭкспорта.Вставить( "ПолучательБанк2",       "");  //     "Город РЦ банка получателя",  
	СтруктураЭкспорта.Вставить( "ПолучательБИК",         "");  //    "БИК РЦ банка получателя",   
	СтруктураЭкспорта.Вставить( "ПолучательКорсчет",     "");  //   "Корсчет РЦ банка пол.",      
	
	СтруктураЭкспорта.Вставить( "ВидПлатежа",            "");  //     "Вид платежа",                
	СтруктураЭкспорта.Вставить( "ВидОплаты",             "");  //   "Вид оплаты",                 
	СтруктураЭкспорта.Вставить( "ПеречислениеВБюджет",   "");  //   "Перечисление в бюджет",                 
	СтруктураЭкспорта.Вставить( "ВидПеречисленияВБюджет","");  //   "Вид перечисления в бюджет",                 
	
	СтруктураЭкспорта.Вставить( "СтатусСоставителя",     "");  //   "Статус составителя",         
	СтруктураЭкспорта.Вставить( "ПлательщикКПП",         "");  //   "КПП плательщика",            
	СтруктураЭкспорта.Вставить( "ПолучательКПП",         "");  //   "КПП получателя",             
	СтруктураЭкспорта.Вставить( "ПоказательКБК",         "");  //   "Показатель КБК",             
	СтруктураЭкспорта.Вставить( "ОКАТО",                 "");  //   "ОКАТО",                      
	СтруктураЭкспорта.Вставить( "ПоказательОснования",   "");  //   "Пок. основания",             
	СтруктураЭкспорта.Вставить( "ПоказательПериода",     "");  //   "Пок. нал. периода",          
	СтруктураЭкспорта.Вставить( "ПоказательНомера",      "");  //     "Пок. номера док.",           
	СтруктураЭкспорта.Вставить( "ПоказательДаты",        "");  //     "Пок. даты док.",             
	СтруктураЭкспорта.Вставить( "ПоказательТипа",        "");  //   "Пок. типа платежа",          
	
	СтруктураЭкспорта.Вставить( "СрокПлатежа",           "");  //       "Срок действия аккредитива",  
	СтруктураЭкспорта.Вставить( "Очередность",           "");  //   "Очередность платежа",        
	
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа",     "");  //     "Назначение платежа",         
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа1",    "");  //     "Назначение платежа, стр. 1", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа2",    "");  //     "Назначение платежа, стр. 2", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа3",    "");  //     "Назначение платежа, стр. 3", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа4",    "");  //     "Назначение платежа, стр. 4", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа5",    "");  //     "Назначение платежа, стр. 5", 
	СтруктураЭкспорта.Вставить( "НазначениеПлатежа6",    "");  //     "Назначение платежа, стр. 6", 
	
	СтруктураЭкспорта.Вставить( "СрокАкцепта",           "");  //    "Срок акцепта",               
	СтруктураЭкспорта.Вставить( "ВидАккредитива",        "");  //     "Вид аккредитива",            
	СтруктураЭкспорта.Вставить( "УсловиеОплаты1",        "");  //     "Условие оплаты, стр. 1",     
	СтруктураЭкспорта.Вставить( "УсловиеОплаты2",        "");  //     "Условие оплаты, стр. 2",     
	СтруктураЭкспорта.Вставить( "УсловиеОплаты3",        "");  //     "Условие оплаты, стр. 3",     
	СтруктураЭкспорта.Вставить( "ПлатежПоПредст",        "");  //     "Платеж по представлению",    
	СтруктураЭкспорта.Вставить( "ДополнУсловия",         "");  //     "Дополнительные условия",     
	СтруктураЭкспорта.Вставить( "НомерСчетаПоставщика",  "");  //     "№ счета поставщика",         
	СтруктураЭкспорта.Вставить( "ДатаОтсылкиДок",        "");  //       "Дата отсылки документов",    
	
	СтруктураЭкспорта.Вставить( "Документ",              "");  //   "Источник",                  
	СтруктураЭкспорта.Вставить( "СекцияДокумент",        "");  //     "Выгрузка",                   
	
	СтруктураЭкспорта.Вставить( "ОписаниеОшибок",        "");  //     "Замечания",                  
	СтруктураЭкспорта.Вставить( "ТипДокумента",          "");  //    "Тип пл. документа",    
	
	Возврат СтруктураЭкспорта;
	
КонецФункции

Процедура СформироватьСтруктуруТаблицыИмпорта(Таб, ТабПоле) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	Видимая020   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,    2);
	Видимая080   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   10);
	Видимая120   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   15);
	Видимая160   = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Ложь,   20);
	
	НеВидимая    = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Ложь,   Истина, Истина, Истина,  0);
	
	Т_Булево    = Новый ОписаниеТипов("Булево");
	
	Т_Число15_2 = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Число1    = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(1));
	Т_Число10   = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10));
	
	Т_Строка    = Новый ОписаниеТипов("Строка");
	Т_Строка02  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(2));
	Т_Строка09  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(9));
	Т_Строка10  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	Т_Строка11  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(11));
	Т_Строка12  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(12));
	Т_Строка20  = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	
	Т_Дата      = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	
	Т_Документ     = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение,ДокументСсылка.ПоступлениеНаРасчетныйСчет,ДокументСсылка.СписаниеСРасчетногоСчета,ДокументСсылка.ПлатежноеТребование");
	Т_ПлПоручение  = Новый ОписаниеТипов("ДокументСсылка.ПлатежноеПоручение");
	Т_ПлОрдер      = Новый ОписаниеТипов("ДокументСсылка.СписаниеСРасчетногоСчета");
	Т_Контрагент   = Новый ОписаниеТипов("СправочникСсылка.Контрагенты,СправочникСсылка.Организации, Строка");
	Т_БанкСчет     = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета, Строка");
	Т_ВидыОпераций = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОперацийСписаниеДенежныхСредств,ПеречислениеСсылка.ВидыОперацийПоступлениеДенежныхСредств");
	Т_Договоры     = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов, Строка");
	Т_СтатьяДДС    = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
	Т_СтавкаНДС    = Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС");
	
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	  //Имя, заголовок, выгружать, не пустая, ширина, изменять размер
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Проведен",             Т_Булево,    "",                          Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Загружать",            Т_Булево,    "_",                          Видимая020);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Готовность",           Т_Число1,    "Готовность",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСтроки",          Т_Число10,   "Номер строки",                Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерДок",             Т_Строка,    "№ Документа",                Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Номер",                Т_Строка,    "Номер",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаДок",              Т_Дата,      "Дата",                       Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Дата",                 Т_Строка,    "Дата (из файла)",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Операция",             Т_Строка,    "Операция",                   Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетОрганизации",      Т_БанкСчет,  "Р/с организации",            Видимая160);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаДокумента",       Т_Число15_2, "Сумма",                      Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаСписано",         Т_Число15_2, "Сумма списания",             Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СуммаПоступило",       Т_Число15_2, "Сумма поступления",          Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Сумма",                Т_Строка,    "Сумма (из файла)",           НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Контрагент",           Т_Контрагент,"Контрагент",                 Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СчетКонтрагента",      Т_БанкСчет,  "Р/с контрагента",            Видимая160);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияДата",        Т_Строка,    "Дата форм. квитанции",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияВремя",       Т_Строка,    "Время форм. квитанции",      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "КвитанцияСодержание",  Т_Строка,    "Содержание квитанции",       НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Списано",              Т_Дата,      "Списано",                    Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаСписано",          Т_Строка,    "Списано",                    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Поступило",            Т_Дата,      "Поступило",                  Видимая120);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПоступило",        Т_Строка,    "Поступило",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПроведения",       Т_Дата,      "Дата",                       Видимая120);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикСчет",       Т_Строка20,  "Расчетный счет плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик",           Т_Строка,    "Плательщик",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикИНН",        Т_Строка12,  "ИНН плательщика",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик1",          Т_Строка,    "Наименование плательщика",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик2",          Т_Строка20,  "Расчетный счет плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик3",          Т_Строка,    "Банк плательщика",           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Плательщик4",          Т_Строка,    "Город банка плательщика",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикРасчСчет",   Т_Строка20,  "Корсчет банка плательщика",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк1",      Т_Строка,    "РЦ банка плательщика",       НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБанк2",      Т_Строка,    "Город РЦ банка плательщика", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикБИК",        Т_Строка09,  "БИК РЦ банка плательщика",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКорсчет",    Т_Строка20,  "Корсчет РЦ банка плат.",     НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательСчет",       Т_Строка20,  "Расчетный счет получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель",           Т_Строка,    "Получатель",                 НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательИНН",        Т_Строка12,  "ИНН получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель1",          Т_Строка,    "Наименование получателя",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель2",          Т_Строка20,  "Расчетный счет получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель3",          Т_Строка,    "Банк получателя",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Получатель4",          Т_Строка,    "Город банка получателя",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательРасчСчет",   Т_Строка20,  "Корсчет банка получателя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк1",      Т_Строка,    "РЦ банка получателя",        НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБанк2",      Т_Строка,    "Город РЦ банка получателя",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательБИК",        Т_Строка09,   "БИК РЦ банка получателя",   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКорсчет",    Т_Строка20,  "Корсчет РЦ банка пол.",      НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидПлатежа",           Т_Строка,    "Вид платежа",                НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОплаты",            Т_Строка02,  "Вид оплаты",                 НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатусСоставителя",    Т_Строка02,  "Статус составителя",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлательщикКПП",        Т_Строка09,  "КПП плательщика",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПолучательКПП",        Т_Строка09,  "КПП получателя",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательКБК",        Т_Строка20,  "Показатель КБК",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОКАТО",                Т_Строка11,  "ОКАТО",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательОснования",  Т_Строка02,  "Пок. основания",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательПериода",    Т_Строка10,  "Пок. нал. периода",          НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательНомера",     Т_Строка,    "Пок. номера док.",           НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДатыДок",    Т_Дата,      "Пок. даты док.",             НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательДаты",       Т_Строка,    "Пок. даты",                  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПоказательТипа",       Т_Строка02,  "Пок. типа платежа",          НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежаДок",       Т_Дата,      "Срок действия акк.",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокПлатежа",          Т_Строка,    "Срок действия аккредитива",  НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Очередность",          Т_Строка02,  "Очередность (из файла)",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОчередностьПлатежа",   Т_Число1,    "Очередность",                НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа",    Т_Строка,    "Назначение платежа",         Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа1",   Т_Строка,    "Назначение платежа, стр. 1", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа2",   Т_Строка,    "Назначение платежа, стр. 2", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа3",   Т_Строка,    "Назначение платежа, стр. 3", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа4",   Т_Строка,    "Назначение платежа, стр. 4", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа5",   Т_Строка,    "Назначение платежа, стр. 5", НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НазначениеПлатежа6",   Т_Строка,    "Назначение платежа, стр. 6", НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцептаДок",       Т_Число10,   "Срок акцепта",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СрокАкцепта",          Т_Строка,    "Срок акцепта (из файла)",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидАккредитива",       Т_Строка,    "Вид аккредитива",            НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты1",       Т_Строка,    "Условие оплаты, стр. 1",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты2",       Т_Строка,    "Условие оплаты, стр. 2",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "УсловиеОплаты3",       Т_Строка,    "Условие оплаты, стр. 3",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежПоПредст",       Т_Строка,    "Платеж по представлению",    НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДополнУсловия",        Т_Строка,    "Дополнительные условия",     НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "НомерСчетаПоставщика", Т_Строка,    "№ счета поставщика",         НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылки",          Т_Дата,      "Дата отсылки",               НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаОтсылкиДок",       Т_Строка,    "Дата отсылки документов",    НеВидимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Документ",             Т_Документ,  "Источник",                   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ПлатежныйОрдер",       Т_ПлОрдер,   "Ордер",                      НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СекцияДокумент",       Т_Строка,    "Выгрузка",                   НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "Договор",              Т_Договоры,  "Договор",                    Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтатьяДДС",            Т_СтатьяДДС,  "Статья ДДС",                 Видимая);
	
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ОписаниеОшибок",       Т_Строка,    "Замечания",                  Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ТипДокумента",         Т_Число10,   "Тип пл. документа",          НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидДокумента",         Т_Строка,    "Вид документа",              НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ИмяДокумента",         Т_Строка,    "Имя документа",              НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ВидОперации",          Т_ВидыОпераций,"Вид операции пл.документа", Видимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДокументОснование",    Т_ПлПоручение, "Пл.поручение",              НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "СтавкаНДС",            Т_СтавкаНДС,   "Ставка НДС",                НеВидимая);
	СоздатьКолонкуВТаблице(Таб, ТабПоле, "ДатаПлПоручения",      Т_Дата,        "Дата пл.поручения",         НеВидимая);
	
КонецПроцедуры

Процедура СформироватьСтруктуруТаблицыРасчСчетов(Таб) Экспорт
	
	КлючиСтруктуры = "ИзменятьНастройку,ИзменятьПозицию,Видимость,Доступность,ТолькоПросмотр,ИзменениеРазмера,Ширина";
	Видимая      = Новый Структура(КлючиСтруктуры, Истина, Ложь,   Истина, Истина, Истина, Истина,  0);
	
	Т_Число15_2  = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15, 2));
	Т_Строка     = Новый ОписаниеТипов("Строка");
	Т_Дата       = Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	Т_Справочник = Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета");
	
	Таб.Очистить();
	Таб.Колонки.Очистить();
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаНачала",       Т_Строка,     "Дата начала интервала",      Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ДатаКонца",        Т_Строка,     "Дата конца интервала",       Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчСчет",         Т_Строка,     "Расчетный счет организации", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальныйОстаток", Т_Строка,     "Начальный остаток",          Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоПоступило",   Т_Строка,     "Обороты входящих платежей",  Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "ВсегоСписано",     Т_Строка,     "Обороты исходящих платежей", Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечныйОстаток",  Т_Строка,     "Конечный остаток",           Видимая);
	
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Начало",           Т_Дата,       "Начало интервала",           Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Конец",            Т_Дата,       "Конец интервала",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "РасчетныйСчет",    Т_Справочник, "Расчетный счет",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "НачальнаяСумма",   Т_Число15_2,  "НачальнаяСумма",             Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Поступило",        Т_Число15_2,  "Всего поступило",            Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "Списано",          Т_Число15_2,  "Всего списано",              Видимая);
	СоздатьКолонкуВТаблице(Таб, Неопределено, "КонечнаяСумма",    Т_Число15_2,  "Конечная сумма",             Видимая);
	
КонецПроцедуры

////////////// ОБЩИЕ //////////////////////////////////////////////////

Процедура ДобавитьВСтроку(Буфер, НоваяСтрока)
	
	Если ПустаяСтрока(Буфер) Тогда
		Буфер = НоваяСтрока;
		
	Иначе
		Буфер = Буфер + Символы.ПС + НоваяСтрока;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПривестиЗначение(Значение)
	
	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		Возврат СокрЛП(Значение);
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Число") Тогда
		Возврат Формат(Значение, "ЧРД=.; ЧРГ=' '; ЧГ=0");
		
	ИначеЕсли ТипЗнч(Значение) = Тип("Дата") Тогда
		Возврат Формат(Значение, "ДФ=dd.MM.yyyy");
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуИзСтроки(Приемник, Источник)
	
	Буфер = Источник;
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	ЧислоДаты = Лев(Буфер, ПозицияТочки - 1);
	Буфер = Сред(Буфер, ПозицияТочки + 1);
	
	ПозицияТочки = Найти(Буфер, ".");
	
	Если ПозицияТочки = 0 Тогда
		Возврат "Неверный формат строки с датой";
	КонецЕсли;
	
	МесяцДаты = Лев(Буфер, ПозицияТочки - 1);
	ГодДаты = Сред(Буфер, ПозицияТочки + 1);
	Если СтрДлина(ГодДаты) = 2 Тогда
		Если Число(ГодДаты) < 50 Тогда
			ГодДаты = "20" + ГодДаты;
		Иначе
			ГодДаты = "19" + ГодДаты ;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Приемник = Дата(Число(ГодДаты), Число(МесяцДаты), Число(ЧислоДаты));
		
	Исключение
		Возврат "Не удалось преобразовать строку в дату";
		
	КонецПопытки;
	
	Возврат Приемник;
	
КонецФункции

Процедура ДобавитьЗамечание(СтруктураДокумента, НоваяГотовность, ТекстЗамечания)
	
	УстановитьГотовность(СтруктураДокумента.Готовность, НоваяГотовность);
	ДобавитьВСтроку(СтруктураДокумента.ОписаниеОшибок, ТекстЗамечания);
	
КонецПроцедуры

Функция ОрганизацияПлательщик(ВидДокумента)
	
	Если (ВидДокумента = "ПоступлениеНаРасчетныйСчет") Тогда
		Возврат Ложь;
		
	Иначе
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Открывает для просмотра текстовой документ
//  
Процедура ОткрытьФайлДляПросмотра(Элемент, Кодировка, Заголовок) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ФайлНаДиске = Новый Файл(Элемент.Значение);
	Если Не ФайлНаДиске.Существует() Тогда
		Предупреждение("Не найден файл!");
		Возврат;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент();
	Если Кодировка = "DOS" Тогда
		Кодир = КодировкаТекста.OEM;
	Иначе
		Кодир = КодировкаТекста.ANSI;
	КонецЕсли;
	Текст.Прочитать(Элемент.Значение, Кодир);
	Текст.Показать(Заголовок,Элемент.Значение);
	
КонецПроцедуры

////////////// ПОДГОТОВКА ВЫГРУЗКИ //////////////////////////////////////////////////

Процедура ЗаполнитьДокументыНаЭкспорт(ДокументыНаЭкспорт) Экспорт
	
	ПлатежныеДокументы.Очистить();
	
	ВыгружатьПлатПоручения  = ТаблицаДокументов.Найти("Платежное поручение", "Название").Пометка;
	ВыгружатьПлатТребования = ТаблицаДокументов.Найти("Платежное требование", "Название").Пометка;
	
	Если НЕ ВыгружатьПлатПоручения И НЕ ВыгружатьПлатТребования Тогда
		Предупреждение("Необходимо отметить хотя бы один из видов платежных документов.");
		Возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(БанковскийСчет) Тогда
		Предупреждение("Необходимо выбрать банковский счет.");
		Возврат;
	КонецЕсли;

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Платежное поручение"" КАК ВидДокумента,
	|	ПлатежноеПоручение.Ссылка КАК Документ,
	|	ПлатежноеПоручение.Проведен,
	|	ПлатежноеПоручение.Номер,
	|	ПлатежноеПоручение.Дата,
	|	ПлатежноеПоручение.ВидПлатежа,
	|	ПлатежноеПоручение.ПеречислениеВБюджет,
	|	ПлатежноеПоручение.ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.НазначениеПлатежа КАК СТРОКА(1000)) КАК НазначениеПлатежа,
	|	ПлатежноеПоручение.СуммаДокумента,
	|	0 КАК СуммаНаПриход,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаНаРасход,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПлательщика КАК СТРОКА(1000)) КАК ТекстПлательщика,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.ТекстПолучателя КАК СТРОКА(1000)) КАК ТекстПолучателя,
	|	ПлатежноеПоручение.ИННПлательщика,
	|	ПлатежноеПоручение.КПППлательщика,
	|	ПлатежноеПоручение.ИННПолучателя,
	|	ПлатежноеПоручение.КПППолучателя,
	|	ПлатежноеПоручение.КодБК,
	|	ПлатежноеПоручение.КодОКАТО,
	|	ПлатежноеПоручение.ПоказательДаты,
	|	ПлатежноеПоручение.ПоказательНомера,
	|	ПлатежноеПоручение.ПоказательОснования,
	|	ПлатежноеПоручение.ПоказательТипа,
	|	ПлатежноеПоручение.ПоказательПериода,
	|	ПлатежноеПоручение.СтатусСоставителя,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеСокращенное КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеПоручение.Организация.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ КАК Организация,
	|	ПлатежноеПоручение.Организация.Наименование КАК ОрганизацияКратко,
	|	ПлатежноеПоручение.Организация.НаименованиеПлательщикаПриПеречисленииВБюджет КАК ОрганизацияПеречислениеНалога,
	|	ПлатежноеПоручение.Организация.ИНН КАК ОрганизацияИНН,
	|	ПлатежноеПоручение.Организация.КПП КАК ОрганизацияКПП,
	|	ПлатежноеПоручение.СчетОрганизации КАК ОрганизацияСчет,
	|	ПлатежноеПоручение.СчетОрганизации.НомерСчета КАК ОрганизацияНомерСчета,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Код КАК ОрганизацияБИКБанка,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Наименование КАК ОрганизацияБанк,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.КоррСчет КАК ОрганизацияРасчСчет,
	|	ПлатежноеПоручение.СчетОрганизации.Банк.Город КАК ОрганизацияГородБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Наименование КАК ОрганизацияБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Город КАК ОрганизацияГородРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.Код КАК ОрганизацияБИКРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.БанкДляРасчетов.КоррСчет КАК ОрганизацияКоррСчетРЦБанка,
	|	ПлатежноеПоручение.СчетОрганизации.СуммаБезКопеек КАК СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(1000)) КАК ОрганизацияТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетОрганизации.ТекстНазначения КАК СТРОКА(1000)) КАК ОрганизацияТекстНазначения,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.Владелец.НаименованиеПолное КАК СТРОКА(1000)) КАК Контрагент,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.Наименование КАК КонтрагентКратко,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.ИНН КАК КонтрагентИНН,
	|	ПлатежноеПоручение.СчетКонтрагента.Владелец.КПП КАК КонтрагентКПП,
	|	ПлатежноеПоручение.СчетКонтрагента КАК КонтрагентСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.НомерСчета КАК КонтрагентНомерСчета,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Наименование КАК КонтрагентБанк,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.КоррСчет КАК КонтрагентРасчСчет,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Город КАК КонтрагентГородБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Наименование КАК КонтрагентБанкДляРасчетов,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Город КАК КонтрагентГородРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.Банк.Код КАК КонтрагентБИКБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.Код КАК КонтрагентБИКРЦБанка,
	|	ПлатежноеПоручение.СчетКонтрагента.БанкДляРасчетов.КоррСчет КАК КонтрагентКоррСчетРЦБанка,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(1000)) КАК КонтрагентТекстКорреспондента,
	|	ВЫРАЗИТЬ(ПлатежноеПоручение.СчетКонтрагента.ТекстНазначения КАК СТРОКА(1000)) КАК КонтрагентТекстНазначения,
	|	"""" КАК СрокАкцепта,
	|	"""" КАК УсловиеОплаты1,
	|	"""" КАК ДатаОтсылкиДок,
	|	"""" КАК ОписаниеОшибок,
	|	"""" КАК Готовность
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|ГДЕ
	|	ПлатежноеПоручение.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И (НЕ ПлатежноеПоручение.ПометкаУдаления)
	|	И (НЕ ПлатежноеПоручение.Оплачено)
	|	И ПлатежноеПоручение.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатПоручения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Платежное требование"",
	|	ПлатежноеТребование.Ссылка,
	|	ПлатежноеТребование.Проведен,
	|	ПлатежноеТребование.Номер,
	|	ПлатежноеТребование.Дата,
	|	ПлатежноеТребование.ВидПлатежа,
	|	ЛОЖЬ,
	|	ПлатежноеТребование.ОчередностьПлатежа,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.НазначениеПлатежа КАК СТРОКА(1000)),
	|	ПлатежноеТребование.СуммаДокумента,
	|	ПлатежноеТребование.СуммаДокумента,
	|	0,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.Контрагент.НаименованиеПолное КАК СТРОКА(1000)),
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеСокращенное КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	ПлатежноеТребование.Контрагент.ИНН,
	|	ПлатежноеТребование.Контрагент.КПП,
	|	ПлатежноеТребование.Организация.ИНН,
	|	ПлатежноеТребование.Организация.КПП,
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	"""",
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.Организация.ВариантНаименованияДляПечатныхФорм = ЗНАЧЕНИЕ(Перечисление.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование)
	|			ТОГДА ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеСокращенное КАК СТРОКА(1000))
	|		ИНАЧЕ ВЫРАЗИТЬ(ПлатежноеТребование.Организация.НаименованиеПолное КАК СТРОКА(1000))
	|	КОНЕЦ,
	|	ПлатежноеТребование.Организация.Наименование,
	|	ПлатежноеТребование.Организация.НаименованиеПлательщикаПриПеречисленииВБюджет,
	|	ПлатежноеТребование.Организация.ИНН,
	|	ПлатежноеТребование.Организация.КПП,
	|	ПлатежноеТребование.СчетОрганизации,
	|	ПлатежноеТребование.СчетОрганизации.НомерСчета,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Код,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Наименование,
	|	ПлатежноеТребование.СчетОрганизации.Банк.КоррСчет,
	|	ПлатежноеТребование.СчетОрганизации.Банк.Город,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Наименование,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Город,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.Код,
	|	ПлатежноеТребование.СчетОрганизации.БанкДляРасчетов.КоррСчет,
	|	ПлатежноеТребование.СчетОрганизации.СуммаБезКопеек,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетОрганизации.ТекстКорреспондента КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетОрганизации.ТекстНазначения КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.Контрагент.НаименованиеПолное КАК СТРОКА(1000)),
	|	ПлатежноеТребование.Контрагент.Наименование,
	|	ПлатежноеТребование.Контрагент.ИНН,
	|	ПлатежноеТребование.Контрагент.КПП,
	|	ПлатежноеТребование.СчетКонтрагента,
	|	ПлатежноеТребование.СчетКонтрагента.НомерСчета,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.КоррСчет,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Город,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Наименование,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Город,
	|	ПлатежноеТребование.СчетКонтрагента.Банк.Код,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.Код,
	|	ПлатежноеТребование.СчетКонтрагента.БанкДляРасчетов.КоррСчет,
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетКонтрагента.ТекстКорреспондента КАК СТРОКА(1000)),
	|	ВЫРАЗИТЬ(ПлатежноеТребование.СчетКонтрагента.ТекстНазначения КАК СТРОКА(1000)),
	|	ПлатежноеТребование.СрокДляАкцепта,
	|	ВЫБОР
	|		КОГДА ПлатежноеТребование.САкцептом
	|			ТОГДА ""С акцептом""
	|		ИНАЧЕ ""Без акцепта, "" + (ВЫРАЗИТЬ(ПлатежноеТребование.ОснованиеДляБезакцептногоСписания КАК СТРОКА(200)))
	|	КОНЕЦ,
	|	ПлатежноеТребование.ДатаОтсылкиДокументов,
	|	"""",
	|	""""
	|ИЗ
	|	Документ.ПлатежноеТребование КАК ПлатежноеТребование
	|ГДЕ
	|	ПлатежноеТребование.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И (НЕ ПлатежноеТребование.ПометкаУдаления)
	|	И ПлатежноеТребование.СчетОрганизации = &Счет
	|	И &ВыгружатьПлатТребования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидДокумента,
	|	ПлатежноеПоручение.Дата,
	|	Документ";
	
	ЗапросПоДокументам = Новый Запрос(ТекстЗапроса);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",    НачалоДня(НачПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание", КонецДня(КонПериода));
	ЗапросПоДокументам.УстановитьПараметр("Счет",  БанковскийСчет);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатПоручения",  ВыгружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ВыгружатьПлатТребования", ВыгружатьПлатТребования);
	
	ВыборкаДляЭкспорта = ЗапросПоДокументам.Выполнить().Выгрузить();
	ПлатежныеДокументы.Загрузить(ВыборкаДляЭкспорта);
	
	КоллекцияСвойств = ДокументыНаЭкспорт.Колонки;
	Для каждого СтрокаДокумента из ПлатежныеДокументы Цикл
		
		ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств);
		
		СтрокаДокумента.Выгружать = ПустаяСтрока(СтрокаДокумента.ОписаниеОшибок);
		
	КонецЦикла;

КонецПроцедуры

Функция ПроверитьНаКорректностьИПустоеЗначениеЭкспорта(СтрокаДокумента,КоллекцияСвойств)
	
	ПеречислениеНалога          = Ложь;
	НепрямыеРасчетыУПлательщика = Ложь;
	НепрямыеРасчетыУПолучателя  = Ложь;

	Если СтрокаДокумента.ВидДокумента = "Платежное поручение" Тогда
		ПеречислениеНалога = ЗначениеЗаполнено(СтрокаДокумента.СтатусСоставителя);
		НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(СтрокаДокумента.ОрганизацияБанкДляРасчетов);
		НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(СтрокаДокумента.КонтрагентБанкДляРасчетов);
		СтрокаДокумента.ТипДокумента= ?(ПеречислениеНалога, 1, 0) * 4 + ?(НепрямыеРасчетыУПолучателя, 1, 0) * 2 + ?(НепрямыеРасчетыУПлательщика, 1, 0) + 1;
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	Иначе
		СтрокаДокумента.ТипДокумента = 0;
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	КонецЕсли;

	РеквизитыПлДокЭкс_Основные = "Номер,Дата,СуммаДокумента";                       
	РеквизитыПлДокЭкс_Плательщик = Плательщик + "Счет," + Плательщик + "," + Плательщик + "ИНН";      
	РеквизитыПлДокЭкс_ПлательщикНПР = Плательщик + "РасчСчет," + Плательщик + "БанкДляРасчетов," + Плательщик + "ГородБанка," + Плательщик + "БИКРЦБанка";
	РеквизитыПлДокЭкс_Получатель = Получатель + "Счет," + Получатель + "," + Получатель + "ИНН";
	РеквизитыПлДокЭкс_ПолучательНПР = Получатель + "РасчСчет," + Получатель + "БанкДляРасчетов," + Получатель + "ГородБанка," + Получатель + "БИКРЦБанка";
	РеквизитыПлДокЭкс_БюджетПлатеж = "СтатусСоставителя,КПППлательщика,КПППолучателя,КодБК,КодОКАТО,ПоказательОснования,ПоказательПериода,ПоказательНомера,ПоказательДаты,ПоказательТипа";


	Экспорт_НеПустые = СоздатьСоответствиеИзСтроки(
	РеквизитыПлДокЭкс_Основные + "," +
	РеквизитыПлДокЭкс_Плательщик + "," +
	?(НепрямыеРасчетыУПлательщика,РеквизитыПлДокЭкс_ПлательщикНПР + ",","")+
	РеквизитыПлДокЭкс_Получатель + "," +
	?(НепрямыеРасчетыУПолучателя,РеквизитыПлДокЭкс_ПолучательНПР + ",",""));

	
	Для каждого Свойство из Экспорт_НеПустые Цикл
		ПроверитьНаПустоеЗначениеЭкспорта(СтрокаДокумента, Свойство.Ключ, КоллекцияСвойств.Найти(Свойство.Ключ).ТекстШапки);
	КонецЦикла;
	Если ПеречислениеНалога Тогда
		ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаДокумента);
	КонецЕсли;
	
	ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаДокумента);
	                           
КонецФункции

Процедура ПроверитьНаПустоеЗначениеЭкспорта(СтрокаЭкспорта, ИмяСвойства, ПредставлениеСвойства)
	
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта[ИмяСвойства]) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаКорректностьНомераПриВыгрузке(СтрокаЭкспорта)
	
	Значение = СокрЛП(СтрокаЭкспорта.Номер);
	Если Число(Строка(Число(Прав(Значение, 3)))) = 0 Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 4, "Номер должен оканчиваться на три цифры и не на ""000""!");
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьЗаполнениеНалоговыхРеквизитов(СтрокаЭкспорта)
	
	Ошибка = Новый СписокЗначений();
	
	П101 = СокрЛП(СтрокаЭкспорта.СтатусСоставителя );
	П104 = СокрЛП(СтрокаЭкспорта.КодБК );
	П105 = СокрЛП(СтрокаЭкспорта.КодОКАТО );
	П106 = СокрЛП(СтрокаЭкспорта.ПоказательОснования );
	П107 = ?(ПустаяСтрока(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода , ".", ""))) = 1, "", СтрокаЭкспорта.ПоказательПериода );
	П107 = ?(СокрЛП(СтрЗаменить(СтрокаЭкспорта.ПоказательПериода, ".", "")) = "0", "", СтрокаЭкспорта.ПоказательПериода );
	П108 = СокрЛП(СтрокаЭкспорта.ПоказательНомера );
	П109 = ?(НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПоказательДаты ), "0", Строка(СтрокаЭкспорта.ПоказательДаты ));
	П110 = СокрЛП(СтрокаЭкспорта.ПоказательТипа );
	
	Если (Найти("01,02,03,04,05,06,07,08,09,10,11,12,13,14,15,16,17,18,19,20", П101) = 0) или
		(ПустаяСтрока(СокрЛП(П101))) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Статус составителя"".");	УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	Если (СтрЗаменить(П104, "0", "") = "") и (Найти("06,07", П101) = 0) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""КБК""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;
	
	Если ПустаяСтрока(П105) Тогда
		ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Код ОКАТО""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
	КонецЕсли;	
	
	Если СтрокаЭкспорта.ВидДокумента = "Платежное поручение" И 
		 СтрокаЭкспорта.Документ.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
				
		 Если (СтрЗаменить(СокрЛП(П107), "0", "") = "") Тогда
			 ДобавитьЗамечание(СтрокаЭкспорта, 3, "Не заполнено поле ""Код таможенного органа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);			 
		КонецЕсли;		
	
	КонецЕсли;

	
	// Проверяем в зависимости от статуса составителя
	Если (П101 = "08") И (СтрЗаменить(П110, "0", "") = "") Тогда
		Если СтрЗаменить(П106, "0", "") <> "" Тогда 
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Основание платежа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П107, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" следует указать ""0"" в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П108, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" не следует заполнять поле ""Номер документа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П109, "0", "") <> "" Тогда
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "При статусе составителя ""08"" не следует заполнять поле ""Дата документа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	Иначе
		// Проверяем в зависимости от основания платежа
		Если СтрЗаменить(СокрЛП(П106), "0", "") = "" Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрДлина(П106) <> 2 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("АП, АР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""АП"" или ""АР"" следует указать ""0"" в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
		ИначеЕсли Найти("ТР, РС, ОТ, РТ, ВУ, ПР", П106) > 0 Тогда
			Если СтрЗаменить(П107, "0", "") <> "" Тогда
				Если НЕ ЗначениеЗаполнено(П107) Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("ТП ,ЗД ", П106) > 0 Тогда
			Если СтрЗаменить(П107,"0","")<>"" Тогда
				ДД = Сред((П107), 1, 2);
				ММ = Сред((П107), 4, 2);
				ГГ = Сред((П107), 7, 4);
				
				Если НЕ ММ="" Тогда
					ММ = Число(Сред((П107), 4, 2));
				Иначе
					ММ = 0;
				КонецЕсли;	
				
				Если НЕ ГГ="" Тогда
					ГГ = Число(Сред((П107), 7, 4));
				Иначе
					ГГ = 0;
				КонецЕсли;
				
				Если (Найти("Д1, Д2, Д3, МС", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 12)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("КВ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 4)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ПЛ", ДД) > 0) Тогда
					Если (ММ < 1)или
						(ММ > 2)или 
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				ИначеЕсли (Найти("ГД", ДД) > 0) Тогда
					Если (ММ <> 0)или
						(ГГ < 2000)или
						(СтрДлина(П107) - СтрДлина(СтрЗаменить(П107, ".", "")) <> 2) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				Иначе
					Если НЕ ЗначениеЗаполнено(П107) Тогда
						ДобавитьЗамечание(СтрокаЭкспорта, 3, "Возможно, неверно указано значение в поле ""Налоговый период""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СтрЗаменить(П108, "0", "") <> "" Тогда
				ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""ТП"" или ""ЗД"" необходимо указывать ""0"" в поле ""Номер документа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
			КонецЕсли;
			Если Найти("ЗД ", П106) > 0 Тогда
				Если СтрЗаменить(П109, "0", "") <> "" Тогда
					ДобавитьЗамечание(СтрокаЭкспорта, 3, "При основании платежа ""ЗД"" не должно заполняться поле ""Дата документа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Найти("БФ", П106) > 0 Тогда
		Иначе
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Основание платежа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
		Если СтрЗаменить(П110,"0","")="" Тогда
		ИначеЕсли Найти("НС, АВ, ПЕ, ПЦ, СА, АШ, ИШ, ПЛ, ГП, ВЗ", П110) > 0 Тогда
		Иначе
			ДобавитьЗамечание(СтрокаЭкспорта, 3, "Неверно указано значение в поле ""Тип платежа""."); УстановитьГотовность(СтрокаЭкспорта.Готовность, 4);
		КонецЕсли;
	КонецЕсли;
	
	//Выводим список найденных ошибок
	Для Ном = 0 по Ошибка.Количество()-1 Цикл
		Сообщить(Ошибка.Получить(Ном), СтатусСообщения.Важное);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции // Проверить()

Процедура ВыборФайлаДляВыгрузки(Элемент) Экспорт
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
	ДиалогВыбора.Заголовок                   = "Выберите файл для выгрузки данных из клиента банка";
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "txt";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

////////////// ВЫГРУЗКА //////////////////////////////////////////////////
Процедура ЗаполнитьЗначениеЭкспорта(СтрокаЭкспорта, ВыборкаДляЭкспорта)
	
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		Плательщик =  "Контрагент";
		Получатель =  "Организация";
	Иначе
		Плательщик =  "Организация";
		Получатель =  "Контрагент";
	КонецЕсли;
	
	СтрокаЭкспорта.Номер = 					ПолучитьНомерВФорматеОбмена(ВыборкаДляЭкспорта.Номер, Организация.Префикс);
	СтрокаЭкспорта.Дата = 					ВыборкаДляЭкспорта.Дата;
	СтрокаЭкспорта.Сумма = 					Формат(ВыборкаДляЭкспорта.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=.; ЧРГ=' '; ЧГ=0");
	СтрокаЭкспорта.ПлательщикСчет = 		ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
	СтрокаЭкспорта.ПолучательСчет = 		ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
	СтрокаЭкспорта.ВидПлатежа 			= 	ВыборкаДляЭкспорта.ВидПлатежа;
	
	НепрямыеРасчетыУПлательщика = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"]);
	НепрямыеРасчетыУПолучателя  = ЗначениеЗаполнено(ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"]);

//ВидОплаты 
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "01";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Аккредитив переданный" Тогда
		СтрокаЭкспорта.ВидОплаты =  "08";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Инкассовое поручение" Тогда
		СтрокаЭкспорта.ВидОплаты =  "06";
		
	ИначеЕсли ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.ВидОплаты =  "02";
		
	Иначе
		СтрокаЭкспорта.ВидОплаты = "00";
	КонецЕсли;
		
//Плательщик1
	ТекстПлательщика = "";
	Если НепрямыеРасчетыУПлательщика Тогда
		ПозицияРС = найти(ВыборкаДляЭкспорта["ТекстПлательщика"],"р/с"); 
		Если ПозицияРС=0 Тогда
			ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
		Иначе
			ТекстПлательщика = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПлательщика"],ПозицияРС-1)));
		КонецЕсли;
	Иначе
		ТекстПлательщика = ВыборкаДляЭкспорта["ТекстПлательщика"];
	КонецЕсли;
	СтрокаЭкспорта.Плательщик1 = СтрЗаменить(ТекстПлательщика,Символы.ПС," ");
	
//Плательщик, ПлательщикИНН
	Значение = ВыборкаДляЭкспорта.ИННПлательщика;
	СтрокаЭкспорта.ПлательщикИНН = Значение;
	СтрокаЭкспорта.Плательщик = "ИНН " + Значение + " " + СтрокаЭкспорта.Плательщик1; 
	
//ПлательщикРасчСчет, ПлательщикБанк1, ПлательщикБанк2, ПлательщикБИК, ПлательщикКорсчет,Плательщик2, Плательщик3, Плательщик4
	Если НепрямыеРасчетыУПлательщика Тогда
		СтрокаЭкспорта.Плательщик2 		 = ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.Плательщик3 		 = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.Плательщик4 		 = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.Плательщик 		 = СтрокаЭкспорта.Плательщик + " р/с " + СтрокаЭкспорта.Плательщик2 + " в " + СтрокаЭкспорта.Плательщик3 + " " + СтрокаЭкспорта.Плательщик4;
		СтрокаЭкспорта.ПлательщикРасчСчет= ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
		СтрокаЭкспорта.ПлательщикБанк1   = ВыборкаДляЭкспорта[Плательщик + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПлательщикБанк2   = ВыборкаДляЭкспорта[Плательщик + "ГородРЦБанка"];
		СтрокаЭкспорта.ПлательщикБИК     = ВыборкаДляЭкспорта[Плательщик + "БИКРЦБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет = ВыборкаДляЭкспорта[Плательщик + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПлательщикРасчСчет= ВыборкаДляЭкспорта[Плательщик + "НомерСчета"];
		СтрокаЭкспорта.ПлательщикБанк1   = ВыборкаДляЭкспорта[Плательщик + "Банк"];
		СтрокаЭкспорта.ПлательщикБанк2   = ВыборкаДляЭкспорта[Плательщик + "ГородБанка"];
		СтрокаЭкспорта.ПлательщикБИК     = ВыборкаДляЭкспорта[Плательщик + "БИКБанка"];
		СтрокаЭкспорта.ПлательщикКорсчет = ВыборкаДляЭкспорта[Плательщик + "РасчСчет"];
	КонецЕсли;
	
//Получатель1
	ТекстПолучателя = "";
	Если НепрямыеРасчетыУПолучателя Тогда
		ПозицияРС = найти(ВыборкаДляЭкспорта["ТекстПолучателя"],"р/с");
		Если ПозицияРС=0 Тогда
			ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
		Иначе
			ТекстПолучателя = СокрЛП((Лев(ВыборкаДляЭкспорта["ТекстПолучателя"],ПозицияРС-1)));
		КонецЕсли;
	Иначе
		ТекстПолучателя = ВыборкаДляЭкспорта["ТекстПолучателя"];
	КонецЕсли;
	СтрокаЭкспорта.Получатель1 = СтрЗаменить(ТекстПолучателя,Символы.ПС," ");
	
//Получатель, ПолучательИНН
	Значение = ВыборкаДляЭкспорта.ИННПолучателя;
	СтрокаЭкспорта.ПолучательИНН = Значение;
	СтрокаЭкспорта.Получатель = "ИНН " + Значение + " " + СтрокаЭкспорта.Получатель1;
	
//ПолучательРасчСчет, ПолучательБанк1, ПолучательБанк2, ПолучательБИК, ПолучательКорсчет, Получатель2, Получатель3, Получатель4
	Если НепрямыеРасчетыУПолучателя Тогда
		СтрокаЭкспорта.Получатель2 		 = ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.Получатель3 		 = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.Получатель4 		 = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.Получатель 		 = СтрокаЭкспорта.Получатель + " р/с " + СтрокаЭкспорта.Получатель2 + " в " + СтрокаЭкспорта.Получатель3 + " " + СтрокаЭкспорта.Получатель4;
		СтрокаЭкспорта.ПолучательРасчСчет= ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
		СтрокаЭкспорта.ПолучательБанк1   = ВыборкаДляЭкспорта[Получатель + "БанкДляРасчетов"];
		СтрокаЭкспорта.ПолучательБанк2   = ВыборкаДляЭкспорта[Получатель + "ГородРЦБанка"];
		СтрокаЭкспорта.ПолучательБИК     = ВыборкаДляЭкспорта[Получатель + "БИКРЦБанка"];
		СтрокаЭкспорта.ПолучательКорсчет = ВыборкаДляЭкспорта[Получатель + "КоррСчетРЦБанка"];
	Иначе
		СтрокаЭкспорта.ПолучательРасчСчет= ВыборкаДляЭкспорта[Получатель + "НомерСчета"];
		СтрокаЭкспорта.ПолучательБанк1   = ВыборкаДляЭкспорта[Получатель + "Банк"];
		СтрокаЭкспорта.ПолучательБанк2   = ВыборкаДляЭкспорта[Получатель + "ГородБанка"];
		СтрокаЭкспорта.ПолучательБИК     = ВыборкаДляЭкспорта[Получатель + "БИКБанка"];
		СтрокаЭкспорта.ПолучательКорсчет = ВыборкаДляЭкспорта[Получатель + "РасчСчет"];
	КонецЕсли;
	
	
//ПлательщикКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
		СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
	КонецЕсли;
	
//ПолучательКПП
	Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
		СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
	КонецЕсли;
	
//СтатусСоставителя, ПлательщикКПП ПолучательКПП ПоказательКБК ОКАТО ПоказательОснования ПоказательПериода ПоказательНомера ПоказательДаты ПоказательТипа
	Если ВыборкаДляЭкспорта.ПеречислениеВБюджет Тогда
		СтрокаЭкспорта.СтатусСоставителя = ВыборкаДляЭкспорта.СтатусСоставителя;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = ВыборкаДляЭкспорта.КПППлательщика;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПлательщикКПП) Тогда
			СтрокаЭкспорта.ПлательщикКПП = "0";
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = ВыборкаДляЭкспорта.КПППолучателя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаЭкспорта.ПолучательКПП) Тогда
			СтрокаЭкспорта.ПолучательКПП = "0";
		КонецЕсли;
		
		СтрокаЭкспорта.ПоказательКБК       = ВыборкаДляЭкспорта.КодБК;
		СтрокаЭкспорта.ОКАТО               = ВыборкаДляЭкспорта.КодОКАТО;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательОснования) Тогда
			СтрокаЭкспорта.ПоказательОснования = "0";
		Иначе
			СтрокаЭкспорта.ПоказательОснования = ВыборкаДляЭкспорта.ПоказательОснования;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательПериода) ИЛИ (ВыборкаДляЭкспорта.ПоказательПериода = "  .  .    ") Тогда
			СтрокаЭкспорта.ПоказательПериода = "0";
		Иначе
			СтрокаЭкспорта.ПоказательПериода = ВыборкаДляЭкспорта.ПоказательПериода;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательНомера) Тогда
			СтрокаЭкспорта.ПоказательНомера = "0";
		Иначе
			СтрокаЭкспорта.ПоказательНомера = ВыборкаДляЭкспорта.ПоказательНомера;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВыборкаДляЭкспорта.ПоказательДаты) Тогда
			СтрокаЭкспорта.ПоказательДаты = "0";
		Иначе
			СтрокаЭкспорта.ПоказательДаты = ВыборкаДляЭкспорта.ПоказательДаты;
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаДляЭкспорта.ПоказательТипа) Тогда
			СтрокаЭкспорта.ПоказательТипа = "0";
		Иначе
			СтрокаЭкспорта.ПоказательТипа = ВыборкаДляЭкспорта.ПоказательТипа;
		КонецЕсли;
		
	КонецЕсли;
	
//СрокАкцепта, ДатаОтсылкиДок, УсловиеОплаты1
	Если ВыборкаДляЭкспорта.ВидДокумента = "Платежное требование" Тогда
		СтрокаЭкспорта.СрокАкцепта = ВыборкаДляЭкспорта.СрокАкцепта;
		СтрокаЭкспорта.ДатаОтсылкиДок = ВыборкаДляЭкспорта.ДатаОтсылкиДок;
		СтрокаЭкспорта.УсловиеОплаты1 = ВыборкаДляЭкспорта.УсловиеОплаты1;
	КонецЕсли;
	
//Очередность
	СтрокаЭкспорта.Очередность = "" + ВыборкаДляЭкспорта.ОчередностьПлатежа;
	
//НазначениеПлатежа, НазначениеПлатежа1 НазначениеПлатежа2 НазначениеПлатежа3 НазначениеПлатежа4 НазначениеПлатежа5 НазначениеПлатежа6
	СтрокаЭкспорта.НазначениеПлатежа = СтрЗаменить(СтрЗаменить(СтрЗаменить(ВыборкаДляЭкспорта.НазначениеПлатежа, Символы.ПС, ""), Символы.ВК, ""), Символы.ПФ, "");
	КоличествоСтрокНП = СтрЧислоСтрок(ВыборкаДляЭкспорта.НазначениеПлатежа);
	
	Если КоличествоСтрокНП > 6 Тогда
		КоличествоСтрокНП = 6;
	КонецЕсли;
	
	Для Сч = 1 По КоличествоСтрокНП Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = СтрПолучитьСтроку(ВыборкаДляЭкспорта.НазначениеПлатежа, Сч);
	КонецЦикла;
	
	Для Сч = (КоличествоСтрокНП + 1) По 6 Цикл
		СтрокаЭкспорта["НазначениеПлатежа" + Сч] = "";
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСекциюДокумент(СтруктураДокумента, КоллекцияРеквизитов)
	
	Буфер = "";
	Реквизит = "";
	СтруктураДляЗаписи = СформироватьСтруктуруЭкспорта();
	ЗаполнитьЗначениеЭкспорта(СтруктураДляЗаписи,СтруктураДокумента);
	
	ДобавитьВСтроку(Буфер, "СекцияДокумент=" + СтруктураДокумента.ВидДокумента);
	
	Для каждого ВыгружаемыйРеквизит из СтруктураДляЗаписи Цикл
		Значение = ПривестиЗначение(ВыгружаемыйРеквизит.Значение);
		Если НЕ ПустаяСтрока(Значение) Тогда
			ДобавитьВСтроку(Буфер, ВыгружаемыйРеквизит.Ключ + "=" + Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьВСтроку(Буфер, "КонецДокумента");
	
	Возврат Буфер;
	
КонецФункции

Процедура Выгрузить(ДокументыНаЭкспорт) Экспорт
	
	ПотокВыгрузки = Новый ТекстовыйДокумент();
	
	// Формируем заголовок
	ПотокВыгрузки.ДобавитьСтроку("1CClientBankExchange");
	ПотокВыгрузки.ДобавитьСтроку("ВерсияФормата=1.01");
	
	ПотокВыгрузки.ДобавитьСтроку("Кодировка=" + Кодировка);
	ПотокВыгрузки.ДобавитьСтроку("Отправитель=" + Метаданные.Синоним);
	ПотокВыгрузки.ДобавитьСтроку("Получатель=" + Программа);
	ПотокВыгрузки.ДобавитьСтроку("ДатаСоздания=" + Формат(ТекущаяДата(),"ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ВремяСоздания=" + Формат(ТекущаяДата(),"ДЛФ=В"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаНачала=" + Формат(НачПериода,"ДЛФ=Д"));
	ПотокВыгрузки.ДобавитьСтроку("ДатаКонца=" + Формат(КонПериода,"ДЛФ=Д"));
	
	ПотокВыгрузки.ДобавитьСтроку("РасчСчет=" + БанковскийСчет.НомерСчета);
	
	Для каждого Строка Из ТаблицаДокументов Цикл
		Если Строка.Пометка = Истина Тогда
			ИмяДокумента = СокрЛП(Строка.Название);
			ПотокВыгрузки.ДобавитьСтроку("Документ=" + ИмяДокумента);
		КонецЕсли;	
	КонецЦикла;
	
	// выводим отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
		Если НЕ(СтрокаСекции.Выгружать)Тогда
			Продолжить;
		КонецЕсли;
		Буфер = ПолучитьСекциюДокумент(СтрокаСекции, ДокументыНаЭкспорт.Колонки);
		КоличествоСрокСекции = СтрЧислоСтрок(Буфер);
		Для Сч = 1 По КоличествоСрокСекции Цикл
			ПотокВыгрузки.ДобавитьСтроку(СтрПолучитьСтроку(Буфер, Сч));
		КонецЦикла;
		СтрокаСекции.Готовность = -2;
	КонецЦикла;
	
	// записываем на диск
	ПотокВыгрузки.ДобавитьСтроку("КонецФайла");
	Попытка
		Если Кодировка = "DOS" Тогда
			ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.OEM);
		Иначе
			ПотокВыгрузки.Записать(ФайлВыгрузки,КодировкаТекста.ANSI);
		КонецЕсли;
		// Отметим те документы которые успешно загрузились
		Для каждого СтрокаСекции из ДокументыНаЭкспорт.Значение Цикл
			Если СтрокаСекции.Готовность = -2 Тогда
				СтрокаСекции.Готовность = -1;
			КонецЕсли;
		КонецЦикла;
		
		Сообщить("Данные успешно выгружены в файл " + ФайлВыгрузки);
	Исключение
		Сообщить("Не удалось записать данные в файл. Возможно, отсутствует каталог." + ФайлВыгрузки);
	КонецПопытки
	
КонецПроцедуры


////////////// ПОДГОТОВКА ЗАГРУЗКИ //////////////////////////////////////////////////

Функция ПолучитьВариантНеПустых(ТипДокумента)
	
	Если (ТипДокумента < 3) ИЛИ (ТипДокумента = 11)  ИЛИ (ТипДокумента = 12) Тогда
		Возврат 0;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

Функция ПолучитьСтрокуИмпорта()
	
	Буфер = "";
	
	Пока (ПустаяСтрока(Буфер)) ИЛИ (Лев(Буфер, 2) = "//") Цикл
		Если Импорт_ТекущаяСтрока > Импорт_КоличествоСтрок Тогда
			Возврат "";
		КонецЕсли;
			
		Буфер = СокрЛП(СтрПолучитьСтроку(Импорт_ТекстДляРазбора, Импорт_ТекущаяСтрока));
		Импорт_ТекущаяСтрока = Импорт_ТекущаяСтрока + 1;
		
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Функция РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение)
	
	ПозицияПрисваивания = Найти(СтрокаРазбора, "=");
	Если ПозицияПрисваивания = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Тег = ВРЕГ(СокрЛП(Лев(СтрокаРазбора, ПозицияПрисваивания - 1)));
	Значение = СокрЛП(Сред(СтрокаРазбора, ПозицияПрисваивания + 1));
	
	Возврат НЕ ПустаяСтрока(Тег);
	
КонецФункции

Процедура ВыборФайлаДляЗагрузки(Элемент) Экспорт
		
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбора.Фильтр                      = "Текстовый файл (*.txt)|*.txt";
	ДиалогВыбора.Заголовок                   = "Выберите файл для загрузки данных из клиента банка";
	ДиалогВыбора.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбора.Расширение                  = "txt";
	ДиалогВыбора.ИндексФильтра               = 0;
	ДиалогВыбора.ПолноеИмяФайла              = Элемент.Значение;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Ложь;
	
	Если ДиалогВыбора.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбора.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

// Загрузка заголовка файла обмена
//
Функция ЗагрузитьСтрокуЗаголовка(ТекстСтрокиЗаголовка)
	
	Значение = "";
	Тег = "";
	РазобратьТеговуюСтроку(ТекстСтрокиЗаголовка, Тег, Значение);
	
	Если ТегиЗаголовка[Тег] = Истина Тогда
		Импорт_Заголовок[Тег] = Значение;
		
	Иначе
		// неправильный реквизит заголовка
		Сообщить("Неверный реквизит заголовка, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + ТекстСтрокиЗаголовка);
		
	КонецЕсли;
		
КонецФункции

// Загружает секцию документа
//
Функция ЗагрузитьСекциюДокумента(СтрокаДокумента)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Пока Лев(Врег(СокрЛП(СтрокаРазбора)), 14) <> "КОНЕЦДОКУМЕНТА" Цикл
		
		Значение = "";
		Тег = "";
		
		Если РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Тогда
			
			Если Импорт_Загружаемые[Тег] = Истина Тогда
				СтрокаДокумента[Тег] = Значение;
				
			Иначе
				// неправильный реквизит заголовка
				Сообщить("Неверный реквизит платежного документа, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			// неправильный реквизит заголовка
			Сообщить("Нарушена структура платежного документа, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Загрузка секции расчетного счета
//
Функция ЗагрузитьСекциюРасчСчета(СтрокаРССчета)
	
	СтрокаРазбора = ПолучитьСтрокуИмпорта();
	
	Значение = "";
	Тег = "";
	
	Пока РазобратьТеговуюСтроку(СтрокаРазбора, Тег, Значение) Цикл
		
		Если ТегиРасчетногоСчета[Тег] = Истина Тогда
			СтрокаРССчета[Тег] = Значение;
			
		Иначе
			// неправильный реквизит заголовка
			Сообщить("Неверный реквизит в секции описания расчетного счета, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + СтрокаРазбора);
			Возврат Ложь;
			
		КонецЕсли;
		
		СтрокаРазбора = ПолучитьСтрокуИмпорта();
		
		Значение = "";
		Тег = "";
		
	КонецЦикла;
	
	Если ВРЕГ(Лев(СокрЛП(СтрокаРазбора), 13)) = "КОНЕЦРАСЧСЧЕТ" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента)
	
	//1) Определим вид платежа – входящий или исходящий
	ПлатежноеПоручение  = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕПОРУЧЕНИЕ";
	ПлатежноеТребование = ВРЕГ(СтрЗаменить(СокрЛП(СтрокаДокумента.Операция), " ", "")) = "ПЛАТЕЖНОЕТРЕБОВАНИЕ";

	Исходяший =  (СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета);
	
	//_______________________________________________________________________________________________________________
	//2) Определим вид документа в программе
	ВидДокумента = ?(Исходяший,"СписаниеСРасчетногоСчета","ПоступлениеНаРасчетныйСчет");
	ИмяДокумента = ?(Исходяший,"Списание с расчетного счета","Поступление на расчетный счет");
	//Если ПлатежноеПоручение и (СтрокаДокумента.ВидОплаты="" или Число(СтрокаДокумента.ВидОплаты)= 1) Тогда
	//	ВидДокумента = ?(Исходяший,"ПлатежноеПоручение","ПлатежноеПоручениеВходящее");
	//	ИмяДокумента = ?(Исходяший,"Платежное поручение исходящее","Платежное поручение входящее");
	//ИначеЕсли ПлатежноеТребование Тогда
	//	ВидДокумента = ?(Исходяший,"ПлатежныйОрдерСписаниеДенежныхСредств","ПлатежноеТребование");
	//	ИмяДокумента = ?(Исходяший,"Платежный ордер на списание","Платежное требование выставленное");
	//Иначе
	//	ВидДокумента = ?(Исходяший,"ПлатежныйОрдерСписаниеДенежныхСредств","ПоступлениеНаРасчетныйСчет");
	//	ИмяДокумента = ?(Исходяший,"Платежный ордер на списание","Платежный ордер на поступление");
	//КонецЕсли;
	
	СтрокаДокумента.ВидДокумента = ВидДокумента;
	СтрокаДокумента.ИмяДокумента = ИмяДокумента;
	РеквизитСчета = ?(Исходяший,"СчетОрганизации","СчетКонтрагента");
	
	//_______________________________________________________________________________________________________________
	//3) Найдем ранее загруженный (введенный вручную) документ.
	//Реквизиты для поиска: Вид документа, Дата, Номер, Номер счета.

	// Распознаем дату документа
	ВсеРеквизитыПоискаЕсть = ложь;
	ДокументНайден = ложь;	
	СтрокаДокумента.НомерДок = СтрокаДокумента.Номер;
	Если НЕ ПустаяСТрока(СтрокаДокумента.Дата) Тогда
		ДатаПлДокумента = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.Дата);
	Иначе
		ДатаПлДокумента = '00010101';
	КонецЕсли;
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.ДатаСписано);
	ИначеЕсли НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки('00010101', СтрокаДокумента.ДатаПоступило);
	Иначе
		Результат = ДатаПлДокумента;
	КонецЕсли;

	РеквизитыПлатежки = Новый Структура("Ссылка,Контрагент,СчетКонтрагента,ДоговорКонтрагента,ВидДоговора,СтавкаНДС,
		|ДокументОснование,ПеречислениеВБюджет,ВидПеречисленияВБюджет");
		
	Если ЗначениеЗаполнено(Результат) Тогда
		
		СтрокаДокумента.ДатаПлПоручения = ДатаПлДокумента;
		СтрокаДокумента.ДатаДок = Результат;
	
		// При наличии нескольких предпочтении отдается первому с совпадающим номером счета
		ЗапросПоискаДокумента = Новый Запрос;
		ЗапросПоискаДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлатежныеДокументы.Ссылка,
		|	ПлатежныеДокументы.Проведен,
		|	ПлатежныеДокументы.НомерВходящегоДокумента КАК Номер,                       
		|	ПлатежныеДокументы.Дата КАК Дата,
		|	ПлатежныеДокументы.СчетКонтрагента.НомерСчета КАК НомерСчета,
		|	ПлатежныеДокументы.Организация
		|ИЗ
		|	Документ." + СтрокаДокумента.ВидДокумента + " КАК ПлатежныеДокументы
		|ГДЕ
		|	(НАЧАЛОПЕРИОДА(ПлатежныеДокументы.Дата, ДЕНЬ)= &ДатаДок ИЛИ НАЧАЛОПЕРИОДА(ПлатежныеДокументы.ДатаВходящегоДокумента, ДЕНЬ)= &ДатаПлПоручения)
		//|	И ПлатежныеДокументы."+ РеквизитСчета +".НомерСчета = &Счет
		|	И ПлатежныеДокументы.СчетОрганизации = &СчетОрганизации
		|	И ПлатежныеДокументы.Организация = &Организация";
		
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаДок", СтрокаДокумента.ДатаДок);
		ЗапросПоискаДокумента.УстановитьПараметр("ДатаПлПоручения", СтрокаДокумента.ДатаПлПоручения);
		ЗапросПоискаДокумента.УстановитьПараметр("Организация", Организация);
		ЗапросПоискаДокумента.УстановитьПараметр("СчетОрганизации", БанковскийСчет);
		
		Результат = ЗапросПоискаДокумента.Выполнить().Выбрать();
		СчетДляПоискаДок = ?(Исходяший,СтрокаДокумента.ПолучательСчет,СтрокаДокумента.ПлательщикСчет);

		ДлинаНомера = СтрДлина(СтрокаДокумента.НомерДок);
		КоличествоДок = 0;
		Пока Результат.Следующий() Цикл
			ВыборкаНомер = Прав(СокрЛП(Результат.Номер), ДлинаНомера);
			Если ВыборкаНомер = СтрокаДокумента.НомерДок И (Не ЗначениеЗаполнено(Результат.НомерСчета) ИЛИ Результат.НомерСчета = СчетДляПоискаДок) Тогда
				Если КоличествоДок=0 Тогда
					СтрокаДокумента.Документ = Результат.Ссылка;
					СтрокаДокумента.Проведен = Результат.Проведен;
					СтрокаДокумента.НомерДок = Результат.Номер;
					СтрокаДокумента.ДатаДок = Результат.Дата;
				КонецЕсли;
				КоличествоДок = КоличествоДок + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоДок>1 Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько("+КоличествоДок+") соответствующих документов!");
		КонецЕсли;
		
		//Если документ уже есть в ИБ, то берем все данные из него.
		ДокументНайден = ЗначениеЗаполнено(СтрокаДокумента.Документ);
		Если ДокументНайден Тогда
			Документ = СтрокаДокумента.Документ; 
			СтрокаДокумента.ВидОперации = Документ.ВидОперации; 
			СтрокаДокумента.СтатьяДДС = Документ.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств; 
			СтрокаДокумента.СчетКонтрагента = Документ.СчетКонтрагента;
			СтрокаДокумента.СчетОрганизации = БанковскийСчет;
			
			Если Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
				СтрокаДокумента.Контрагент = Документ.Организация;
			Иначе
				СтрокаДокумента.Контрагент = Документ.Контрагент;
			КонецЕсли;
			
			СтрокаДокумента.Договор = Документ.РасшифровкаПлатежа[0].ДоговорКонтрагента;
			
			СтрокаДокумента.ДокументОснование = Документ.ДокументОснование;
			РеквизитыПлатежки.Ссылка = Документ.ДокументОснование;
			ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Документ);
			
		ИначеЕсли ВидДокумента = "СписаниеСРасчетногоСчета" И ПлатежноеПоручение Тогда // Ищем платежное-поручение - основание для списания
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("НомерПП",     СтрокаДокумента.НомерДок);
			Запрос.УстановитьПараметр("ДатаПП",      СтрокаДокумента.ДатаПлПоручения);
			Запрос.УстановитьПараметр("НачНомера",   11 - СтрДлина(СтрокаДокумента.НомерДок) + 1);
			Запрос.УстановитьПараметр("ДлинаНомера", СтрДлина(СтрокаДокумента.НомерДок));
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	Док.Ссылка,
			|	Док.Контрагент,
			|	Док.СчетКонтрагента,
			|	Док.ДоговорКонтрагента,
			|	ЕСТЬNULL(Док.ДоговорКонтрагента.ВидДоговора, НЕОПРЕДЕЛЕНО) КАК ВидДоговора,
			|	Док.СтавкаНДС,
			|	Док.ДокументОснование,
			|	Док.ПеречислениеВБюджет,
			|	Док.ВидПеречисленияВБюджет,
			|	Док.СтатьяДвиженияДенежныхСредств
			|ИЗ
			|	Документ.ПлатежноеПоручение КАК Док
			|ГДЕ
			|	Док.Организация = &Организация
			|	И ПОДСТРОКА(Док.Номер, &НачНомера, &ДлинаНомера) = &НомерПП
			|	И НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ) = &ДатаПП";
			
			Результат = Запрос.Выполнить();
			Если НЕ Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				ЗаполнитьЗначенияСвойств(РеквизитыПлатежки, Выборка);
				СтрокаДокумента.ДокументОснование = РеквизитыПлатежки.Ссылка;
				СтрокаДокумента.СтатьяДДС = Выборка.СтатьяДвиженияДенежныхСредств;
				Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) И
					ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка.ДокументОснование) И
					ТипЗнч(РеквизитыПлатежки.Ссылка.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда 
					СтрокаДокумента.Документ = РеквизитыПлатежки.Ссылка.ДокументОснование;
					СтрокаДокумента.Проведен = РеквизитыПлатежки.Ссылка.ДокументОснование.Проведен;
					СтрокаДокумента.НомерДок = РеквизитыПлатежки.Ссылка.ДокументОснование.Номер;
					СтрокаДокумента.ДатаДок = РеквизитыПлатежки.Ссылка.ДокументОснование.Дата;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	//Ставка НДС из платежки
	СтрокаДокумента.СтавкаНДС = РеквизитыПлатежки.СтавкаНДС;
	
	//_______________________________________________________________________________________________________________
	//4) Определяем вид операции документа
	Если Не ЗначениеЗаполнено(СтрокаДокумента.ВидОперации) Тогда
		Если Исходяший Тогда
			Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
				// Используем тот же алгоритм, что и при вводе списания с расчетного счета на основании платежного поручения
				Если РеквизитыПлатежки.ПеречислениеВБюджет Тогда
					Если РеквизитыПлатежки.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;			
					Иначе
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
					КонецЕсли;
				ИначеЕсли ТипЗнч(РеквизитыПлатежки.ДокументОснование) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП;
				Иначе
					Если РеквизитыПлатежки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
					ИначеЕсли РеквизитыПлатежки.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
					Иначе
						ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаДокумента.СтатусСоставителя <> "" Тогда
				Если СтрокаДокумента.СтатусСоставителя = "06" ИЛИ СтрокаДокумента.СтатусСоставителя = "08" 
					ИЛИ ((СтрокаДокумента.СтатусСоставителя >= "16")и(СтрокаДокумента.СтатусСоставителя <= "20")) Тогда
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочиеРасчетыСКонтрагентами;
				Иначе
					ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
				КонецЕсли;
			ИначеЕсли (ПоискБанковскогоСчета(СтрокаДокумента.ПолучательСчет).Владелец=БанковскийСчет.Владелец) Тогда
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет;
			Иначе
				ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			КонецЕсли; 
		Иначе // входящий платеж
			ВидОперацииДокумента = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
		СтрокаДокумента.ВидОперации = ВидОперацииДокумента;
	Иначе
		ВидОперацииДокумента = СтрокаДокумента.ВидОперации;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//5) Определяем банковский счет организации
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетОрганизации) Тогда
		СтрокаДокумента.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//6) Определяем банковский счет контрагента
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СчетКонтрагента) Тогда
		
		Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
			СтрокаДокумента.СчетКонтрагента = РеквизитыПлатежки.СчетКонтрагента;
		Иначе
				
			ЗапросПоискаСчета = Новый Запрос;

			Если ОрганизацияПлательщик(ВидДокумента) Тогда
				СчетКонтрагента = СтрокаДокумента.ПолучательСчет;
				ИННКонтрагента = СтрокаДокумента.ПолучательИНН;
				КППКонтрагента = СтрокаДокумента.ПолучательКПП;
				Если СтрокаДокумента.Получатель1 <> "" Тогда
					ИмяКонтрагента = СтрокаДокумента.Получатель1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Получатель;
				КонецЕсли;
				ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПолучательСчет);
				
			Иначе
				ЗапросПоискаСчета.УстановитьПараметр("НомерСчета", СтрокаДокумента.ПлательщикСчет);
				СчетКонтрагента = СтрокаДокумента.ПлательщикСчет;
				ИННКонтрагента = СтрокаДокумента.ПлательщикИНН;
				КППКонтрагента = СтрокаДокумента.ПлательщикКПП;
				Если СтрокаДокумента.Плательщик1 <> "" Тогда
					ИмяКонтрагента = СтрокаДокумента.Плательщик1;
				Иначе
					ИмяКонтрагента = СтрокаДокумента.Плательщик;
				КонецЕсли;
				
			КонецЕсли;
			ЗапросПоискаСчета.УстановитьПараметр("ИННКонтрагента", ИННКонтрагента);
			
			ЗапросПоискаСчета.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	БанковскиеСчета.Владелец,
			|	БанковскиеСчета.Ссылка,
			|	БанковскиеСчета.НомерСчета
			|ИЗ
			|	Справочник.БанковскиеСчета КАК БанковскиеСчета
			|ГДЕ
			|	БанковскиеСчета.Владелец ССЫЛКА Справочник."+?(ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет,"Организации","Контрагенты")+"
			|	"+?(НЕ ПустаяСтрока(ИННКонтрагента),"И БанковскиеСчета.Владелец.ИНН = &ИННКонтрагента","")+"
			|	И БанковскиеСчета.НомерСчета = &НомерСчета";
			
			
			ВыборкаПоиска = ЗапросПоискаСчета.Выполнить().Выбрать();
			Если ВидОперацииДокумента <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
				Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Иначе
				Контрагент = Справочники.Организации.ПустаяСсылка();	
			КонецЕсли;
			
			Если ВыборкаПоиска.Следующий() Тогда
				СтрокаДокумента.СчетКонтрагента = ВыборкаПоиска.Ссылка;
				Контрагент = ВыборкаПоиска.Владелец;
			Иначе  
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден счет контрагента ("+ СчетКонтрагента +").");
				СтрокаДокумента.СчетКонтрагента = "  Не найден ("+ СчетКонтрагента +")";
			КонецЕсли;
			
			Если ВыборкаПоиска.Количество()>1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 1, "В информационной базе найдено несколько("+ВыборкаПоиска.Количество()+") одинаковых банковских счетов!");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверка на кооректность БИКа плательщика/получателя
	Если ЗначениеЗаполнено(СтрокаДокумента.ПлательщикБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПлательщикБИК);
		Если    (Длина = 9 И Лев(СтрокаДокумента.ПлательщикБИК,2)<>"04")
			ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПлательщикБИК,1)<>"4")
			ИЛИ (Длина < 8)Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Не корректный БИК ("+СтрокаДокумента.ПлательщикБИК+") плательщика!");
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПлательщикБИК = "0"+СтрокаДокумента.ПлательщикБИК;
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаДокумента.ПолучательБИК) Тогда
		Длина = СтрДлина(СтрокаДокумента.ПолучательБИК);
		Если    (Длина = 9 И Лев(СтрокаДокумента.ПолучательБИК,2)<>"04")
			ИЛИ (Длина = 8 И Лев(СтрокаДокумента.ПолучательБИК,1)<>"4")
			ИЛИ (Длина < 8)Тогда
			ДобавитьЗамечание(СтрокаДокумента, 1, "Не корректный БИК ("+СтрокаДокумента.ПолучательБИК+") получателя!");
		ИначеЕсли Длина = 8 Тогда
			СтрокаДокумента.ПолучательБИК = "0"+СтрокаДокумента.ПолучательБИК;
		Иначе
			
		КонецЕсли;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//7) Определим контрагента
	Если Не ЗначениеЗаполнено(СтрокаДокумента.Контрагент) Тогда
		Если ЗначениеЗаполнено(РеквизитыПлатежки.Ссылка) Тогда
			СтрокаДокумента.Контрагент = РеквизитыПлатежки.Контрагент;
		ИначеЕсли ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
			СтрокаДокумента.Контрагент = Организация;
		ИначеЕсли ЗначениеЗаполнено(Контрагент) Тогда
			СтрокаДокумента.Контрагент = Контрагент;
		ИначеЕсли НЕ ПустаяСтрока(ИННКонтрагента) Тогда
			
			СтрокаДокумента.Контрагент = Контрагент;
			ЗапросПоискаКонтрагента = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                                        |	Контрагенты.Ссылка,
			                                        |	Контрагенты.ИНН,
			                                        |	Контрагенты.Наименование,
			                                        |	Контрагенты.КПП
			                                        |ИЗ
			                                        |	Справочник.Контрагенты КАК Контрагенты
			                                        |ГДЕ
			                                        |	Контрагенты.ИНН = &КонтрагентИНН");
			
			ЗапросПоискаКонтрагента.УстановитьПараметр("КонтрагентИНН", ИННКонтрагента);
			ВыборкаПоиска = ЗапросПоискаКонтрагента.Выполнить().Выгрузить();
			
			//Ищем контрагента по ИНН, если указан КПП то и по нем
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
			Если Не ПустаяСтрока(КППКонтрагента)Тогда
				ПараметрыОтбора.Вставить("КПП", КППКонтрагента);
			КонецЕсли;
			НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			
			//Если не нашли и по ИНН и по КПП то попробуем поискать только по ИНН
			Если НайденныеКонтрагенты.Количество()=0 и Не ПустаяСтрока(КППКонтрагента) Тогда
				ПараметрыОтбора = Новый Структура;
				ПараметрыОтбора.Вставить("ИНН", ИННКонтрагента);
				НайденныеКонтрагенты = ВыборкаПоиска.НайтиСтроки(ПараметрыОтбора);
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество()>0 Тогда
				СтрокаДокумента.Контрагент = НайденныеКонтрагенты[0].Ссылка;
			КонецЕсли;
			
			Если НайденныеКонтрагенты.Количество()>1 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "В информационной базе найдено несколько("+НайденныеКонтрагенты.Количество()+") контрагентов с одинаковым ИНН!");
			ИначеЕсли НайденныеКонтрагенты.Количество()=0 Тогда
				ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден контрагент ("+ ИмяКонтрагента +", ИНН "+ИННКонтрагента+").");
				СтрокаДокумента.Контрагент = "  Не найден ("+ ИмяКонтрагента +", ИНН "+ИННКонтрагента+")";
			КонецЕсли;

		Иначе
			ДобавитьЗамечание(СтрокаДокумента, 2, "Не указан ИНН контрагента. ");
			СтрокаДокумента.Контрагент = "  Не найден ("+ ИмяКонтрагента +", не указан ИНН)";
		КонецЕсли;
	КонецЕсли;
		
	//_______________________________________________________________________________________________________________
	//8) Определим договор контрагента
	Если Не ЗначениеЗаполнено(СтрокаДокумента.Договор) Тогда
		Если ЗначениеЗаполнено(РеквизитыПлатежки.ДоговорКонтрагента) Тогда
			СтрокаДокумента.Договор = РеквизитыПлатежки.ДоговорКонтрагента;
		Иначе
			СписокВидовДоговоров = УправлениеВзаиморасчетами.ОпределитьВидДоговораСКонтрагентом(ВидОперацииДокумента);
			Если Не ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет 
				И Не ВидОперацииДокумента = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога
				И СписокВидовДоговоров.Количество()>0  Тогда
				СтрокаДокумента.Договор = НайтиДоговорКонтрагента(СтрокаДокумента.Контрагент,Организация,СписокВидовДоговоров);
				
				Если СтрокаДокумента.Договор="Не найден"Тогда
					ДобавитьЗамечание(СтрокаДокумента, 2, "Не найден договор. ");
				КонецЕсли;
			Иначе
				СтрокаДокумента.Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//9) Определим Статью ДДС по умолчанию
	Если Не ЗначениеЗаполнено(СтрокаДокумента.СтатьяДДС) Тогда
		СтрокаДокумента.СтатьяДДС = ПолучитьНастройкуЗаполнения(ИмяДокумента,"СтатьяДДС");
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//10) Определим сумму
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрЗаменить(СтрокаДокумента.Сумма, " ", ""));
	
	Если Не ОбщегоНазначения.ЕстьНеЦифры(СтрЗаменить(СтрЗаменить(СтрЗаменить(Буфер, ".", ""),"-",""),",","")) И Буфер<>"" Тогда
		Сумма = Число(Буфер);
		
		Если Сумма < 0 Тогда
			Сумма = - Сумма;      
		КонецЕсли;
		
		СтрокаДокумента.СуммаДокумента =Сумма;
		Если Исходяший Тогда
			СтрокаДокумента.СуммаСписано =Сумма;
		Иначе
			СтрокаДокумента.СуммаПоступило =Сумма;
		КонецЕсли;
		
	Иначе
		ДобавитьЗамечание(СтрокаДокумента, 4, "Указана неверная сумма документа("+Буфер+")!");
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//11) Определим очередность платежа
	
	// Преобразуем из строки в число
	Буфер = СокрЛП(СтрокаДокумента.Очередность);
	Если Буфер<>"" И Не ОбщегоНазначения.ЕстьНеЦифры(Буфер) Тогда
		СтрокаДокумента.ОчередностьПлатежа =Число(Буфер);
	Иначе
		СтрокаДокумента.ОчередностьПлатежа = 0;
		
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//12) Определим ДатаОтсылкиДок(для Платежного требования выставленное)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаОтсылкиДок) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ДатаОтсылки, СтрокаДокумента.ДатаОтсылкиДок);
	КонецЕсли;
	
	//_______________________________________________________________________________________________________________
	//13) Определим ПоказательДатыДок(для Платежного поручения исходящего при перечислении налогов)
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ПоказательДаты) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.ПоказательДатыДок, СтрокаДокумента.ПоказательДаты);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.ПоказательДатыДок = Неопределено;
		КонецЕсли;
	КонецЕсли;

	//_______________________________________________________________________________________________________________
	//14) ДатаСписано и ДатаПоступило, ДатаПроведения
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаСписано) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Списано, СтрокаДокумента.ДатаСписано);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Списано = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Списано;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Списано = ПустаяДата;
	КонецЕсли;
	
	// Преобразуем в дату из строки, если не пустая
	Если НЕ ПустаяСТрока(СтрокаДокумента.ДатаПоступило) Тогда
		Результат = ПолучитьДатуИзСтроки(СтрокаДокумента.Поступило, СтрокаДокумента.ДатаПоступило);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			СтрокаДокумента.Поступило = ПустаяДата;
		Иначе
			СтрокаДокумента.ДатаПроведения = СтрокаДокумента.Поступило;
		КонецЕсли;
	Иначе
		СтрокаДокумента.Поступило = ПустаяДата;
	КонецЕсли;
	
	//Если НазначениеПлатежа пустое, формируем его из НазначениеПлатежа1...НазначениеПлатежа6.
	Если ПустаяСТрока(СтрокаДокумента.НазначениеПлатежа) Тогда
		
		СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаДокумента["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			СтрокаДокумента.НазначениеПлатежа = СтрокаДокумента.НазначениеПлатежа + Символы.ПС + СтрокаДокумента["НазначениеПлатежа" + й];
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

// Получает договор контрагента по умолчанию с учетом условий отбора. Возвращается основной договор или единственный или пустая ссылка
//
// Параметры
//  ВладелецДоговора	–	<СправочникСсылка.Контрагенты> 
//							Контрагент, договор которого нужно получить
//  ОрганизацияДоговора	–	<СправочникСсылка.Организации> 
//							Организация, договор которой нужно получить
//  СписокВидовДоговора	–	<Массив> или <СписокЗначений>, состоящий из значений типа <ПеречислениеСсылка.ВидыДоговоровКонтрагентов> 
//							Нужные виды договора
//  СтруктураПараметров	–	<Структура>
//							Структура дополнительных параметров отбора договоров по реквизитам.
//							Элементы структуры СтруктураПараметров:
//							Ключ - имя реквизита договора, Значение - еще одна структура
//							
//							Элементы структуры, которая находится в Значение:
//							Ключ - "ЗначениеОтбора", Значение - значение реквизита договора для отбора. Обязательный элемент.
//							Ключ - "ВидСравненияОтбора", Значение - <ВидСравнения>. Необязательный элемент, по умолчанию ВидСравнения.Равно
//
// Возвращаемое значение:
//   <СправочникСсылка.ДоговорыКонтрагентов> – найденный счет или пустая ссылка
//
Функция НайтиДоговорКонтрагента(ВладелецДоговора, ОрганизацияДоговора, СписокВидовДоговора=неопределено)

	НовыйДоговор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	|	ДоговорыКонтрагентов.Ссылка,
	|	ВЫБОР
	|		КОГДА СправочникВладелец.Ссылка ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникВладелец
	|		ПО ДоговорыКонтрагентов.Владелец = СправочникВладелец.Ссылка
	|			И ДоговорыКонтрагентов.Ссылка = СправочникВладелец.ОсновнойДоговорКонтрагента
	|ГДЕ
	|	&ТекстФильтра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос.УстановитьПараметр("ВладелецДоговора", ВладелецДоговора);
	Запрос.УстановитьПараметр("ОрганизацияДоговора",  ОбщегоНазначения.ГоловнаяОрганизация(ОрганизацияДоговора));
	Запрос.УстановитьПараметр("СписокВидовДоговора", СписокВидовДоговора);
	
	ТекстФильтра = "
	|	ДоговорыКонтрагентов.Владелец = &ВладелецДоговора
	|	И ДоговорыКонтрагентов.Организация = &ОрганизацияДоговора
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ"
	+?(СписокВидовДоговора<>неопределено,"
	|	И ДоговорыКонтрагентов.ВидДоговора В (&СписокВидовДоговора)","");
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстФильтра", ТекстФильтра);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	Иначе
		Возврат "Не найден"
	КонецЕсли;
	
КонецФункции // ПолучитьДоговорКонтрагента()

Процедура ПроверитьНаПустоеЗначениеИмпорта(СтрокаИмпорта, ИмяСвойства, ПредставлениеСвойства)
	
	ВариантНеПустых = ПолучитьВариантНеПустых(СтрокаИмпорта.ТипДокумента);
	Если Импорт_НеПустые[ВариантНеПустых][ИмяСвойства] = Истина Тогда
		Если НЕ ЗначениеЗаполнено(СтрокаИмпорта[ИмяСвойства]) Тогда
			ДобавитьЗамечание(СтрокаИмпорта, 3, "Не заполнено """ + ПредставлениеСвойства + """!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СчетПринадлежитОрганизации(НомерСчета)
	
	ЗапросПоСчету = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                              |	БанковскиеСчета.Владелец,
	                              |	БанковскиеСчета.НомерСчета,
	                              |	БанковскиеСчета.Ссылка
	                              |ИЗ
	                              |	Справочник.БанковскиеСчета КАК БанковскиеСчета
	                              |ГДЕ
	                              |	БанковскиеСчета.Владелец = &Организация
	                              |	И БанковскиеСчета.НомерСчета = &НомерСчета");
	
	ЗапросПоСчету.УстановитьПараметр("НомерСчета", НомерСчета);
	ЗапросПоСчету.УстановитьПараметр("Организация", Организация);
	ВыборкаЗапроса = ЗапросПоСчету.Выполнить().Выбрать();
	
	Возврат ВыборкаЗапроса.Следующий();
	
КонецФункции

// Процедура сборка*
Процедура ЗаполнитьДокументыНаИмпорт(ДокументыДляИмпорта,таблица) Экспорт
	
	// Подготавливаем структуры обработки данных
	Импорт_ПризнакОбмена = Ложь;
	
	ЗагрРасчетныеСчета = Новый СписокЗначений;
	СписокДокументов = Новый СписокЗначений;
	ЗагрВидыДокументов = Новый СписокЗначений;
	
	Импорт_РасчетныеСчета.Очистить();
	
	ДокументыДляИмпорта.Очистить();
	
	// Получаем исходные данные
	Импорт_ТекстДляРазбора = ПрочитатьФайл(ФайлЗагрузки);
	
	Если Импорт_ТекстДляРазбора = Неопределено Тогда
		Предупреждение("Файл загрузки не содержит данных!");
		Возврат;
	КонецЕсли;
	
	// Заполняем первичные структуры данных
	Импорт_КоличествоСтрок = СтрЧислоСтрок(Импорт_ТекстДляРазбора);
	Импорт_ТекущаяСтрока = 1;
	
	Пока Импорт_ТекущаяСтрока <= Импорт_КоличествоСтрок Цикл
		
		Стр = ПолучитьСтрокуИмпорта();
		
		Если Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда
			
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "СЕКЦИЯДОКУМЕНТ" Тогда
				НоваяСтрокаДокументов = ДокументыДляИмпорта.Добавить();
				НоваяСтрокаДокументов.Операция = Значение;
				Если НЕ ЗагрузитьСекциюДокумента(НоваяСтрокаДокументов) Тогда
					Возврат;
				КонецЕсли;
				
			Иначе
				Предупреждение("Нарушена структура файла импорта, строка " + (Импорт_ТекущаяСтрока - 1) + " : " + Стр);
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда
			СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
			Если НЕ ЗагрузитьСекциюРасчСчета(СтрокаРССчетов) Тогда
				Сообщить("Нарушена структура файла импорта в секции описания расчетного счета! Строка: " + (Импорт_ТекущаяСтрока - 1));
				Возврат;
			КонецЕсли;
			Если БанковскийСчет.НомерСчета <> СтрокаРССчетов.РасчСчет Тогда
				Импорт_РасчетныеСчета.Удалить(СтрокаРССчетов);
			КонецЕсли;
				
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="РАСЧСЧЕТ" Тогда
			Значение = "";
			Тег = "";
			РазобратьТеговуюСтроку(Стр, Тег, Значение);
			
			Если Тег = "РАСЧСЧЕТ" Тогда
				
				Если СчетПринадлежитОрганизации(Значение) Тогда
					Если БанковскийСчет.НомерСчета = Значение Тогда
						СтрокаРССчетов = Импорт_РасчетныеСчета.Найти(Значение, "РасчСчет");
						Если СтрокаРССчетов = Неопределено Тогда
							СтрокаРССчетов = Импорт_РасчетныеСчета.Добавить();
							СтрокаРССчетов.РасчСчет = Значение;
						КонецЕсли;
					Иначе						
						Сообщить("В заголовке файла указан счет (" + Значение + ") отличный от указанного, расчеты по которому загружаться не будут!", СтатусСообщения.ОченьВажное);
					КонецЕсли;
				Иначе
					Сообщить("В заголовке файла указан счет, не принадлежащий организации: " + Значение + " !", СтатусСообщения.ОченьВажное);
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 8)="ДОКУМЕНТ" Тогда
			Импорт_ВидыДокументов.Добавить(Значение);

		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" Тогда
			Если НЕ Импорт_ПризнакОбмена Тогда
				Сообщить("В файле импорта отсутствует признак обмена ""1CClientBankExchange""!");
				Возврат;
			КонецЕсли;
			
			НомерСтроки = 0;
			// Формируем объектные структуры данных
			Для каждого СтрокаДокумента Из ДокументыДляИмпорта Цикл
				// Последовательно обрабатываем каждую загруженную строку
				
				//Распознаем реквизиты
				//Если в файле находятся выписка пл. документов по нескольким счетам, то распознаем и отображаем
				//только те которые выгружены по указанному банковскому счету
				Если СтрокаДокумента.ПлательщикСчет = БанковскийСчет.НомерСчета
					ИЛИ СтрокаДокумента.ПолучательСчет  = БанковскийСчет.НомерСчета Тогда
					РаспознатьДанныеВСтрокеДокумента(СтрокаДокумента);
					НомерСтроки = НомерСтроки + 1;
					СтрокаДокумента.НомерСтроки = НомерСтроки;
					// Для каждого реквизита (= колонка) надо проверить на пустое значение
					Для каждого КолонкаИмпорта из ДокументыДляИмпорта.Колонки Цикл
						ПроверитьНаПустоеЗначениеИмпорта(СтрокаДокумента, КолонкаИмпорта.Имя, КолонкаИмпорта.Заголовок);
					КонецЦикла;
					
					Если ТипЗнч(СтрокаДокумента.Контрагент)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.СчетКонтрагента)=Тип("Строка") ИЛИ
						ТипЗнч(СтрокаДокумента.Договор)=Тип("Строка") Тогда
						
						//добавляем реквизиты в табличную часть для дальнейшего использования
						СписокНенайденных(СтрокаДокумента);
					КонецЕсли;
				Иначе
					//остальные помечаем для последующего удаления
					СтрокаДокумента.НомерСтроки = 0;					
				КонецЕсли;
			КонецЦикла;
			
			//Удалим не нужные строки из таблицы
			Количество = ДокументыДляИмпорта.количество()-1;
			Для й=0 по Количество Цикл
				Если ДокументыДляИмпорта[Количество-й].НомерСтроки = 0 Тогда
					ДокументыДляИмпорта.Удалить(Количество-й);
				КонецЕсли;
			КонецЦикла;
			
			Возврат;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 20)="1CCLIENTBANKEXCHANGE" Тогда
			Импорт_ПризнакОбмена = Истина;
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////// ЗАГРУЗКА //////////////////////////////////////////////////

Процедура УстановитьСвойство(Объект, ИмяСвойства, ЗначениеСвойства, ОбязательнаяЗаменаСтарогоЗначения = ложь)
	
	Если ЗначениеСвойства<>неопределено И Объект[ИмяСвойства] <> ЗначениеСвойства Тогда
		Если ЭтоНовыйДокумент 
			ИЛИ (Не ЗначениеЗаполнено(Объект[ИмяСвойства]) или ОбязательнаяЗаменаСтарогоЗначения) 
			ИЛИ ТипЗнч(Объект[ИмяСвойства])=Тип("Булево") 
			ИЛИ ТипЗнч(Объект[ИмяСвойства])=Тип("Дата") Тогда
			
			Объект[ИмяСвойства] = ЗначениеСвойства;
			
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеОбъекта(Объект)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеПоручение") Тогда
		НазваниеОбъекта = "документ ""Платежное поручение"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета") Тогда
		НазваниеОбъекта = "документ ""Списание с расчетного счета"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет") Тогда
		НазваниеОбъекта = "документ ""Поступление на расчетный счет"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПлатежноеТребование") Тогда
		НазваниеОбъекта = "документ ""Платежное требование"" № " + СокрЛП(Объект.Номер) + " от " + Объект.Дата;
		
	КонецЕсли;
	
	Возврат НазваниеОбъекта;
	
КонецФункции

Процедура ЗадатьПометкуНаУдаление(ОбъектДляПометки, Пометка)
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляПометки);
	НазваниеДействия = ?(Пометка, " помечен на удаление", " отменена пометка на удаление");
	Попытка
		
		ОбъектДляПометки.Записать(РежимЗаписиДокумента.Запись);
		ОбъектДляПометки.УстановитьПометкуУдаления(Пометка);
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ": " + НазваниеДействия + ".", СтатусСообщения.Информация);
		
	Исключение
		
		Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2)+ ": не " + НазваниеДействия + "! Произошли ошибки при записи!", СтатусСообщения.Важное);
		
	КонецПопытки
	
КонецПроцедуры

Процедура ЗаписатьОбъект(ОбъектДляЗаписи,СтрокаСекции)
	
	ТипДокумента = ОбъектДляЗаписи.Метаданные().Имя;
	
	Если ТипДокумента = "СписаниеСРасчетногоСчета" Тогда
		ИмяДокумента = "Списание с расчетного счета";
		ОбъектДляЗаписи.НеПодтвержденоВыпискойБанка = Ложь;
		
	ИначеЕсли ТипДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		ИмяДокумента = "Поступление на расчетный счет";
		
	Иначе
		ИмяДокумента = ТипДокумента;
		
	КонецЕсли;
	
	Проводить = (ПолучитьНастройкуЗаполнения(ИмяДокумента,"Проводить") = Истина);
	УстановитьСвойство(ОбъектДляЗаписи, "Комментарий", "Загружен из Клиент-Банка");
			
	ОбъектМодифицирован = ОбъектДляЗаписи.Модифицированность();
	ОбъектПроведен = ОбъектДляЗаписи.Проведен;
	
	Если ОбъектМодифицирован Тогда
		Попытка
			Если ОбъектПроведен Тогда
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
			Иначе
				ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Запись);
			КонецЕсли;
			
			Сообщить(?(ЭтоНовыйДокумент,"Создан ","Перезаписан ")+ ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи) + ".");
			
		Исключение
			 
			НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + ?(ЭтоНовыйДокумент," не создан"," не записан")+ "! Произошли ошибки при записи!", СтатусСообщения.Важное);
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	НазваниеОбъекта = ПолучитьПредставлениеОбъекта(ОбъектДляЗаписи);

	Если Проводить И (ОбъектМодифицирован ИЛИ НЕ ОбъектПроведен) Тогда
		Попытка
			ОбъектДляЗаписи.Записать(РежимЗаписиДокумента.Проведение);
			Сообщить(?(ОбъектПроведен,"Перепроведен ","Проведен ")+НазваниеОбъекта, СтатусСообщения.Обычное);
			СтрокаСекции.Проведен = ОбъектДляЗаписи.проведен;
		Исключение
			Сообщить(Врег(Лев(НазваниеОбъекта, 1)) + Сред(НазваниеОбъекта, 2) + " не проведен! Произошли ошибки при проведении!", СтатусСообщения.Важное);
		КонецПопытки
	КонецЕсли;

КонецПроцедуры

Функция ПроверитьДокументДляЗагрузки(СтуктураДокумента)
	
	Результат = "";
	
	Если СтуктураДокумента.Готовность > 3 Тогда
		Результат = СтуктураДокумента.ОписаниеОшибок;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПривестиНомер(НомерДокумента, Номер)
	
	НовыйНомер = "";
	ДлинаНомера = СтрДлина(Номер);
	ДлинаНомераДокумента = СтрДлина(НомерДокумента);
	
	Возврат Лев(НомерДокумента, ДлинаНомераДокумента - ДлинаНомера) + Номер;
	
КонецФункции

Функция СоздатьНовыйПлатежныйДокумент(ВидДокумента, Номер, Дата)
	
	НовыйДокумент = Документы[ВидДокумента].СоздатьДокумент();
	
	Если ВидДокумента = "ПлатежноеПоручение" ИЛИ ВидДокумента = "ПлатежноеТребование" Тогда
		НовыйДокумент.Номер = ПривестиНомер(НовыйДокумент.Номер, Номер);
		НовыйДокумент.Дата = Дата;

	Иначе
		НовыйДокумент.НомерВходящегоДокумента = Номер;
		НовыйДокумент.ДатаВходящегоДокумента = Дата;
		
	КонецЕсли;

	Возврат НовыйДокумент;
	
КонецФункции


Функция ПолучитьВалютуДоговора(ДоговорКонтрагента)
	
	ЗапросПоиска = Новый Запрос("ВЫБРАТЬ
	                              |	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	                              |ИЗ
	                              |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	                              |ГДЕ
	                              |	ДоговорыКонтрагентов.Ссылка = &Ссылка");
	
	ЗапросПоиска.УстановитьПараметр("Ссылка", ДоговорКонтрагента);
	Выборка = ЗапросПоиска.Выполнить().Выбрать();
	
	Если Выборка.Следующий() тогда
		Возврат Выборка.ВалютаВзаиморасчетов;
		
	Иначе
		Возврат Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, ИсходныеДанные)
	
//Организация
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	
	ДатаВхДокумента = ПолучитьДатуИзСтроки('00010101', ИсходныеДанные.Дата);
	Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ДатаВхДокумента);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	Если ЗначениеЗаполнено(ИсходныеДанные.Списано) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Списано);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
//ДокументОснование (платежное поручение)
	УстановитьСвойство(ОбъектДокумента, "ДокументОснование", ИсходныеДанные.ДокументОснование);
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	Если ИсходныеДанные.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет Тогда
		УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	КонецЕсли;
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
		УстановитьСвойство(СтрокаРасшифровки, "СпособПогашенияЗадолженности", Перечисления.СпособыПогашенияЗадолженности.Автоматически);
		Если ЗначениеЗаполнено(ИсходныеДанные.СтатьяДДС) Тогда
			УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС, Истина);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансов);
			УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетов);
		КонецЕсли;
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента)<>Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	КонецЕсли;
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
//СчетБанк
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	КонецЕсли;
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	
//РасшифровкаПлатежа
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ОбъектДокумента.ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ОбъектДокумента.ВидОперации);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		КонецЕсли;
			
		Если ЕстьРасчетыСКонтрагентами Тогда
			Если ЗначениеЗаполнено(ИсходныеДанные.СтавкаНДС) Тогда
				СтрокаРасшифровки.СтавкаНДС = ИсходныеДанные.СтавкаНДС;
			ИначеЕсли НалоговыйУчетУСН.ПрименениеУСН(Организация, ИсходныеДанные.ДатаДок) Тогда
				СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
			КонецЕсли;
			ЗначениеСтавкиНДС          = УчетНДС.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = Окр(СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС), 2);
			
		КонецЕсли;
			
	КонецЕсли;

//ПеречислениеЗаработнойПлаты
	Если ОбъектДокумента.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеЗП
		И ОбъектДокумента.ПеречислениеЗаработнойПлаты.Количество() = 0
		И ЗначениеЗаполнено(ОбъектДокумента.ДокументОснование)
		И ТипЗнч(ОбъектДокумента.ДокументОснование) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
	
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Платежка", ОбъектДокумента.ДокументОснование);
		Запрос.УстановитьПараметр("ВыплаченностьЗарплаты", Перечисления.ВыплаченностьЗарплаты.Выплачено);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка КАК Ведомость,
		|	ЗарплатаКВыплатеЗарплата.Физлицо,
		|	МИНИМУМ(ЗарплатаКВыплатеЗарплата.НомерСтроки) КАК НомерСтроки,
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаПлатежа
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
		|		ПО (ПлатежноеПоручение.ДокументОснование = ЗарплатаКВыплатеЗарплата.Ссылка)
		|ГДЕ
		|	ПлатежноеПоручение.Ссылка = &Платежка
		|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты <> ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеЗарплата.Физлицо,
		|	ЗарплатаКВыплатеЗарплата.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		РезультатЗапроса = Запрос.Выполнить();

		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать(); 
			Пока Выборка.Следующий() Цикл
				
				СтрокаВедомость = ОбъектДокумента.ПеречислениеЗаработнойПлаты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВедомость, Выборка);

			КонецЦикла;
			
		КонецЕсли;
	
	КонецЕсли;
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
		
	Иначе
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, ИсходныеДанные)
	
//Организация
	УстановитьСвойство(ОбъектДокумента, "НомерВходящегоДокумента", ИсходныеДанные.НомерДок);
	
	ДатаВхДокумента = ПолучитьДатуИзСтроки('00010101', ИсходныеДанные.Дата);
	Если ЗначениеЗаполнено(ДатаВхДокумента) Тогда
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ДатаВхДокумента);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "ДатаВходящегоДокумента", ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
	УстановитьСвойство(ОбъектДокумента, "Организация", Организация);
	Если ЗначениеЗаполнено(ИсходныеДанные.Поступило) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.Поступило);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДокумента.Дата) Тогда
		УстановитьСвойство(ОбъектДокумента, "Дата", ИсходныеДанные.ДатаДок);
	КонецЕсли;
	
//Контрагент,ДоговорКонтрагента,СтатьяДвиженияДенежныхСредств
	УстановитьСвойство(ОбъектДокумента, "Контрагент", ИсходныеДанные.Контрагент);
	Если ОбъектДокумента.РасшифровкаПлатежа.Количество() = 0 Тогда
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа.Добавить();
	Иначе
		СтрокаРасшифровки = ОбъектДокумента.РасшифровкаПлатежа[0];
	КонецЕсли;
	ОднаСтрокаВРасшифровкеПлатежа = ОбъектДокумента.РасшифровкаПлатежа.Количество() = 1;
	УстановитьСвойство(СтрокаРасшифровки, "ДоговорКонтрагента", ?(ИсходныеДанные.Договор="Не найден",неопределено,ИсходныеДанные.Договор));
	УстановитьСвойство(СтрокаРасшифровки, "СпособПогашенияЗадолженности", Перечисления.СпособыПогашенияЗадолженности.Автоматически);
	Если ОднаСтрокаВРасшифровкеПлатежа Тогда
		УстановитьСвойство(СтрокаРасшифровки, "СтатьяДвиженияДенежныхСредств", ИсходныеДанные.СтатьяДДС);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОбъектДокумента.Контрагент) И ЗначениеЗаполнено(СтрокаРасшифровки.ДоговорКонтрагента) Тогда
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектДокумента.Контрагент, СтрокаРасшифровки.ДоговорКонтрагента);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовПоАвансам",    СчетаУчета.СчетАвансовПокупателя);
		УстановитьСвойство(СтрокаРасшифровки, "СчетУчетаРасчетовСКонтрагентом",СчетаУчета.СчетРасчетовПокупателя);
		
	КонецЕсли;
	
//СчетОрганизации,СчетКонтрагента 
	УстановитьСвойство(ОбъектДокумента, "СчетОрганизации", ИсходныеДанные.СчетОрганизации);
	Если ТипЗнч(ИсходныеДанные.СчетКонтрагента)<>Тип("Строка") Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетКонтрагента", ИсходныеДанные.СчетКонтрагента);
	КонецЕсли;
	
//ВалютаДокумента
	УстановитьСвойство(ОбъектДокумента, "ВалютаДокумента", ОбъектДокумента.СчетОрганизации.ВалютаДенежныхСредств);
	
//СчетБанк
	Если ОбъектДокумента.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	Иначе
		УстановитьСвойство(ОбъектДокумента, "СчетБанк", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	КонецЕсли;
	
//ВидОперации 
	УстановитьСвойство(ОбъектДокумента, "ВидОперации", ИсходныеДанные.ВидОперации);
	
//СуммаДокумента
	УстановитьСвойство(ОбъектДокумента, "СуммаДокумента", ИсходныеДанные.СуммаДокумента, истина);
	Если ОбъектДокумента.ЭтоНовый() 
		ИЛИ ОднаСтрокаВРасшифровкеПлатежа И СтрокаРасшифровки.СуммаПлатежа <> ОбъектДокумента.СуммаДокумента Тогда
		
		СтрокаРасшифровки.СуммаПлатежа = ОбъектДокумента.СуммаДокумента;
		РассчитатьКурсИСуммуВзаиморасчетов(СтрокаРасшифровки, ПолучитьВалютуДоговора(СтрокаРасшифровки.ДоговорКонтрагента), ОбъектДокумента.Дата, ОбъектДокумента);
		
		Если НалоговыйУчетУСН.ПрименениеУСН(Организация, ИсходныеДанные.ДатаДок) Тогда
			СтрокаРасшифровки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Иначе
			СтрокаРасшифровки.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
			ЗначениеСтавкиНДС     = УчетНДС.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
			СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		КонецЕсли;
		
	КонецЕсли;
	
//Ответственный
	УстановитьСвойство(ОбъектДокумента, "Ответственный", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный"));
	
//НазначениеПлатежа
	Если ЗначениеЗаполнено(ИсходныеДанные.НазначениеПлатежа1) Тогда
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа1;
		Для й = 2 По 6 Цикл
			Если НЕ ЗначениеЗаполнено(ИсходныеДанные["НазначениеПлатежа" + й]) Тогда
				Прервать;
			КонецЕсли;
			НазначениеПлатежа = НазначениеПлатежа + " " + ИсходныеДанные["НазначениеПлатежа" + й];
		КонецЦикла;
		
	Иначе
		
		НазначениеПлатежа = ИсходныеДанные.НазначениеПлатежа;
		
	КонецЕсли;
	УстановитьСвойство(ОбъектДокумента, "НазначениеПлатежа", НазначениеПлатежа, истина);
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента,ТипДокумента, СтрокаСекции)
	
	Если ТипДокумента = "СписаниеСРасчетногоСчета" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераСписание(ОбъектДокумента, СтрокаСекции);
		
	ИначеЕсли ТипДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		ЗаполнитьРеквизитПлатежногоОрдераПоступление(ОбъектДокумента, СтрокаСекции);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Загрузить(ДокументыКИмпорту) Экспорт
	
	НачалоИнтервалаЗагрузки = ПустаяДата;
	КонецИнтервалаЗагрузки  = ПустаяДата;
	ДокументыКИмпорту.Индексы.Добавить("Документ");
	
	Результат = ПолучитьДатуИзСтроки(НачалоИнтервалаЗагрузки, Импорт_Заголовок.ДатаНачала);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить("В заголовке файла загрузки неверно указана дата начала интервала! Файл не может быть загружен!", СтатусСообщения.ОченьВажное);
		Возврат;
	КонецЕсли;
	
	Результат = ПолучитьДатуИзСтроки(КонецИнтервалаЗагрузки, Импорт_Заголовок.ДатаКонца);
	
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Сообщить("В заголовке файла импорта неверно указана дата окончания интервала!", СтатусСообщения.ОченьВажное);
		//Возврат;
	КонецЕсли;
	
	КолонкиДокумента  = ДокументыКИмпорту.Колонки;

	// загружаем отмеченные секции документов
	Для каждого СтрокаСекции из ДокументыКИмпорту Цикл
		Если СтрокаСекции.Загружать Тогда
			
			РезультатПроверки = ПроверитьДокументДляЗагрузки(СтрокаСекции);
			Если ПустаяСтрока(РезультатПроверки) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрокаСекции.Документ) Тогда
					// В ИБ не найден документ, необходимо создать новый
					ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
				Иначе
					// В ИБ найден документ, необходимо получить его объект
					ОбъектДокумента = СтрокаСекции.Документ.ПолучитьОбъект();
					//Если после прочтения данных документ попавший в список был удален, то необходимо создать новый
					Если ОбъектДокумента = неопределено Тогда
						ОбъектДокумента = СоздатьНовыйПлатежныйДокумент(СтрокаСекции.ВидДокумента, СтрокаСекции.Номер, СтрокаСекции.Дата);
					КонецЕсли;
				КонецЕсли;
				
				ЭтоНовыйДокумент = ОбъектДокумента.ЭтоНовый();
				//Заполняем все реквизиты документа
				ЗаполнитьРеквизитПлатежногоДокумента(ОбъектДокумента,ОбъектДокумента.Метаданные().Имя, СтрокаСекции);
				
				//Если контрагент не создан, то добавляем его реквизиты в табличную часть для дальнейшего использования
				ТипКонтрагента =?(СтрокаСекции.ПлательщикСчет = БанковскийСчет.НомерСчета,"ПОЛУЧАТЕЛЬ","ПЛАТЕЛЬЩИК");
				НайденнаяСтрока = ТаблицаКонтрагентов.Строки.Найти(СтрокаСекции[ТипКонтрагента+"ИНН"], "Значение", истина);
				
				Если НайденнаяСтрока <> неопределено Тогда
					
					НайденнаяСтрока = НайденнаяСтрока.Родитель;
					ОбъектДокумента.РеквизитыКонтрагента.Очистить();
					
					Для Счет =0 По 2 Цикл
						НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
						НовыйРеквизит.Представление = НайденнаяСтрока.Строки[Счет].Представление;
						НовыйРеквизит.Значение 		= НайденнаяСтрока.Строки[Счет].Значение;
						НовыйРеквизит.Реквизит		= НайденнаяСтрока.Строки[Счет].Реквизит;
					КонецЦикла;
					
					Если СтрокаСекции.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя Тогда
						ВидДоговора = "С покупателем";
					ИначеЕсли СтрокаСекции.ВидОперации <> Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога Тогда
						ВидДоговора = "С поставщиком";
					Иначе
						ВидДоговора = "другой";
					КонецЕсли;
					
					Для каждого Строка из НайденнаяСтрока.Строки Цикл
						Если Строка.Представление = "Р/счет" и Строка.Значение = СтрокаСекции[ТипКонтрагента+"СЧЕТ"] Тогда
							
							НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
							НовыйРеквизит.Представление = Строка.Представление;
							НовыйРеквизит.Значение 		= Строка.Значение;
							НовыйРеквизит.Реквизит		= Строка.Реквизит;
							
							Для каждого ПодСтрока Из Строка.Строки Цикл
								НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
								НовыйРеквизит.Представление = ПодСтрока.Представление;
								НовыйРеквизит.Значение 		= ПодСтрока.Значение;
								НовыйРеквизит.Реквизит		= ПодСтрока.Реквизит;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					Для каждого Строка из НайденнаяСтрока.Строки Цикл
						Если Строка.Представление = "Договор" и Строка.Значение = ВидДоговора Тогда
							
							НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
							НовыйРеквизит.Представление = Строка.Представление;
							НовыйРеквизит.Значение 		= Строка.Значение;
							НовыйРеквизит.Реквизит		= Строка.Реквизит;
							
							Для каждого ПодСтрока Из Строка.Строки Цикл
								НовыйРеквизит = ОбъектДокумента.РеквизитыКонтрагента.Добавить();
								НовыйРеквизит.Представление = ПодСтрока.Представление;
								НовыйРеквизит.Значение 		= ПодСтрока.Значение;
								НовыйРеквизит.Реквизит		= ПодСтрока.Реквизит;
							КонецЦикла;
							
						КонецЕсли;
					КонецЦикла;
					
					
					
				КонецЕсли;
				
				Если ОбъектДокумента.ПометкаУдаления Тогда
					ЗадатьПометкуНаУдаление(ОбъектДокумента, Ложь);
				КонецЕсли;
				
				ЗаписатьОбъект(ОбъектДокумента,СтрокаСекции);
				
				Если НЕ ОбъектДокумента.ЭтоНовый() Тогда
					СтрокаСекции.Документ = ОбъектДокумента.Ссылка;
					Если СтрокаСекции.ВидДокумента = "ПлатежноеПоручение"
						ИЛИ СтрокаСекции.ВидДокумента = "ПлатежноеТребование"  Тогда
						РеквизитДаты = "Дата";
						РеквизитНомера = "Номер";
					Иначе
						РеквизитДаты = "ДатаВходящегоДокумента";
						РеквизитНомера = "НомерВходящегоДокумента";
					КонецЕсли;
					СтрокаСекции.НомерДок = ОбъектДокумента[РеквизитНомера];
				КонецЕсли;
				
			Иначе
				Сообщить("Платежный документ """ + СтрокаСекции.Операция + """ №" + СтрокаСекции.Номер + " от " + СтрокаСекции.Дата + " не может быть загружен:" + Символы.ПС + РезультатПроверки + "!", СтатусСообщения.ОченьВажное);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	// Платежные документы, отсутствующие в списке загруженным помечаем на удаление
	
	//Составляем список счетов
	СписокСчетов = Новый СписокЗначений;
	
	Для каждого СтрокаСчета Из Импорт_РасчетныеСчета Цикл
		СписокСчетов.Добавить(СокрЛП(СтрокаСчета.РасчСчет));
	КонецЦикла;
	
	ВыборкаДокументов = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.ДатаВходящегоДокумента КАК ДатаДокумента,
	|	СписаниеСРасчетногоСчета.СчетОрганизации.НомерСчета КАК НомерСчета,
	|	СписаниеСРасчетногоСчета.НеПодтвержденоВыпискойБанка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Дата >= &ДатаНач
	|	И СписаниеСРасчетногоСчета.Дата <= &ДатаКон
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.СчетОрганизации.НомерСчета В(&СписокСчетов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоступлениеНаРасчетныйСчет.Ссылка,
	|	ПоступлениеНаРасчетныйСчет.ДатаВходящегоДокумента,
	|	ПоступлениеНаРасчетныйСчет.СчетОрганизации.НомерСчета,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Дата >= &ДатаНач
	|	И ПоступлениеНаРасчетныйСчет.Дата <= &ДатаКон
	|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И ПоступлениеНаРасчетныйСчет.СчетОрганизации.НомерСчета В(&СписокСчетов)");
	
	
	ВыборкаДокументов.УстановитьПараметр("ДатаНач", НачалоДня(НачалоИнтервалаЗагрузки));
	ВыборкаДокументов.УстановитьПараметр("ДатаКон", КонецДня(КонецИнтервалаЗагрузки));
	ВыборкаДокументов.УстановитьПараметр("Организация", Организация);
	ВыборкаДокументов.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	ДокументыНаУдаление = ВыборкаДокументов.Выполнить().Выбрать();
	
	Пока ДокументыНаУдаление.Следующий() Цикл
		
		СтрокаВТаблицеИмпорта = ДокументыКИмпорту.Найти(ДокументыНаУдаление.Ссылка, "Документ");
		
		Если СтрокаВТаблицеИмпорта = Неопределено И (НЕ ДокументыНаУдаление.НеПодтвержденоВыпискойБанка) Тогда
			ОбъектДокументаКУдаление = ДокументыНаУдаление.Ссылка.ПолучитьОбъект();
			ЗадатьПометкуНаУдаление(ОбъектДокументаКУдаление, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
///////////// Модуль     //////////////////////////////////////////////////

ПустаяДата = Дата("00010101");

ЗаполнитьСтрокиРеквизитовПлДокументовДляИмпорта();

// Общее
СформироватьТегиЗаголовка();
СформироватьТегиРасчетногоСчета();

// Экспорт
СформироватьСоответствиеВыгружаемых();
Импорт_ТекстДляРазбора = "";


// Импорт
Импорт_РасчетныеСчета = Новый ТаблицаЗначений;
СформироватьСтруктуруТаблицыРасчСчетов(Импорт_РасчетныеСчета);

Импорт_ВидыДокументов = Новый Массив;

СформироватьСоответствиеЗагружаемых();
ЗаполнитьРаспознаваемыеПриИмпорте();
СформироватьСоответствияНеПустыхПриИмпорте();

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
СписокКонтрагентов =Новый СписокЗначений();

#КонецЕсли

