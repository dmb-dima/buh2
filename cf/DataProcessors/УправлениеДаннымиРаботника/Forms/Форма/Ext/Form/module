// флажки сформированности данных по разделам
Перем мДанныеРасчетыЗарплатаСформированы;
Перем мДанныеПлановыеДанныеСформированы;
Перем мДанныеНалоговаяКарточкаСформированы;
Перем мДанныеКадровыеДанныеСформированы;
Перем мДанныеОсновноеСформированы;
Перем мДанныеНалогиСформированы;
Перем мДанныеКарточкаПоЕСНСформированы;
Перем мДанныеКарточкаПоОПССформированы;
Перем мПоказыватьЕСН;

// нужны для заполнения документа начисления зарплаты
Перем МестаРаботыФизлица;
Перем ДанныеПоНачислениям;
Перем ДанныеПоПлановымРасчетам;
Перем МестаРаботыИСостоянияФизлица;
Перем КадровыеДанные;
Перем КадровыеДанныеПриемНаРаботу;

// нужны для заполнения данных о налогах
Перем ДанныеПоНалогам;

// отчеты раздела РасчетыЗарплата
Перем РегламентированнаяФорма1НДФЛОтчет;
Перем АнализНачисленийРаботникамОрганизацийОтчет;
Перем РасчетныеЛисткиОрганизацийОтчет;
Перем УнифицированнаяФормаТ13Отчет;
Перем СЗВ4Отчет;

// отчеты раздела КадровыеДанные
Перем Т2ОрганизацийОтчет;

// отчеты раздела Налоги
Перем РегламентированнаяФормаКарточкаПоЕСНОтчет;
Перем РегламентированнаяФормаКарточкаПоОПСОтчет;

// для управления группировками отчетов раздела РасчетыЗарплата
Перем ОбластьАнализНачисленийРаботникамОрганизаций;
Перем ОбластьРегламентированнаяФорма1НДФЛ;
Перем ОбластьРасчетныеЛисткиОрганизаций;
Перем ОбластьУнифицированнаяФормаТ13;
Перем ОбластьСЗВ4;

// для управления группировками отчетов раздела КадровыеДанные
Перем ОбластьТ2Организаций;

// для управления группировками отчетов раздела Налоги
Перем ОбластьРегламентированнаяФормаКарточкаПоЕСН;
Перем ОбластьРегламентированнаяФормаКарточкаПоОПС;

// отчеты раздела ПлановыеДанные
Перем УнифицированнаяФормаТ3Отчет;

// для управления группировками отчетов раздела ПлановыеДанные
Перем ОбластьУнифицированнаяФормаТ3;

Перем ПрежнийМесяц; // для контроля смены месяца

Перем мФизлицоОбъект;
Перем мФизлицоФорма;

// Потребуется для вывода отчетов в отдельных окнах
Перем ДанныеТабличныхДокументов1НДФЛ;
Перем ДанныеТабличныхДокументовАнализНачислений;
Перем ДанныеТабличныхДокументовРасчетныеЛистки;
Перем ДанныеТабличныхДокументовТ13;
Перем ДанныеТабличныхДокументовТ3;
Перем ДанныеТабличныхДокументовСЗВ4;
Перем ДанныеТабличныхДокументовТ2;
Перем ДанныеТабличныхДокументовЕСН;
Перем ДанныеТабличныхДокументовОПС;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


Процедура ПриОткрытии()
	
	УстановкиПриОткрытии();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	УстановкиПриОткрытии();
КонецПроцедуры

Процедура ПриЗакрытии()
	// запомним последнее использованное физлицо
	СохранитьЗначение("УправлениеДаннымиРаботника.Физлицо", Физлицо);
	СохранитьЗначение("УправлениеДаннымиРаботника.ИмяРаздела", ИмяРаздела);
	СохранитьЗначение("УправлениеДаннымиРаботника.Месяц", Месяц);
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	ОбластьАнализНачисленийРаботникамОрганизаций = НеОпределено;
	ОбластьРегламентированнаяФорма1НДФЛ = НеОпределено;
	ОбластьРасчетныеЛисткиОрганизаций = НеОпределено;
	ОбластьУнифицированнаяФормаТ13 = НеОпределено;
	ОбластьСЗВ4 = НеОпределено;
	ОбластьУнифицированнаяФормаТ3 = НеОпределено;
	ОбластьТ2Организаций = НеОпределено;
	ОбластьРегламентированнаяФормаКарточкаПоЕСН = НеОпределено;
	ОбластьРегламентированнаяФормаКарточкаПоОПС = НеОпределено;
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Физлицо = Объект.Ссылка;
		мДанныеРасчетыЗарплатаСформированы = Ложь;
		мДанныеПлановыеДанныеСформированы = Ложь;
		мДанныеНалоговаяКарточкаСформированы = Ложь;
		мДанныеКадровыеДанныеСформированы = Ложь;
		мДанныеОсновноеСформированы = Ложь;
		мДанныеНалогиСформированы = Ложь;
		мДанныеКарточкаПоЕСНСформированы = Ложь;
		мДанныеКарточкаПоОПССформированы = Ложь;
		ОбновитьДанные();
		
		// записали документ начисления    
	ИначеЕсли 
		ТипЗнч(Объект) = Тип("ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций") 
		Тогда
		мДанныеРасчетыЗарплатаСформированы = Ложь;
		ОбновитьДанные();
		
		// записали документ плановых данных
	ИначеЕсли 
		ТипЗнч(Объект) = Тип("ДокументСсылка.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументСсылка.КадровоеПеремещениеОрганизаций") 
		или ТипЗнч(Объект) = Тип("ДокументСсылка.ПриемНаРаботуВОрганизацию") 
		или ТипЗнч(Объект) = Тип("ДокументСсылка.УвольнениеИзОрганизаций") 
		Тогда
		мДанныеПлановыеДанныеСформированы = Ложь;
		ОбновитьДанные();
		
		// записали регламентный документ 
	ИначеЕсли 
		ТипЗнч(Объект) = Тип("ДокументСсылка.РасчетЕСН") 
		или ТипЗнч(Объект) = Тип("ДокументСсылка.ОтражениеЗарплатыВРеглУчете") 
		Тогда
		мДанныеНалогиСформированы = Ложь;
		ОбновитьДанные();
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановкиПриОткрытии()
	// если не установлено физлицо
	Если Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		// ...выберем последнего использованного
		Физлицо = ВосстановитьЗначение("УправлениеДаннымиРаботника.Физлицо");
		// ...или получим первого
		Если Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ФизическиеЛица.Ссылка Как Физлицо
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	(НЕ ФизическиеЛица.ЭтоГруппа)
			|
			|УПОРЯДОЧИТЬ ПО
			|	ФизическиеЛица.Наименование");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Физлицо = Выборка.Физлицо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если не задано имя раздела
	Если ПустаяСтрока(ИмяРаздела) Тогда
		// ...восстановим последний использованный раздел данных
		ИмяРаздела = ВосстановитьЗначение("УправлениеДаннымиРаботника.ИмяРаздела");
		//... или назначим по умолчанию Основное
		Если ПустаяСтрока(ИмяРаздела) Тогда
			ИмяРаздела = "Основное";
		КонецЕсли;
	КонецЕсли;
	
	// если не задан месяц
	Если Месяц = '00010101' Тогда
		// ...восстановим последний использованный месяц
		Месяц = ВосстановитьЗначение("УправлениеДаннымиРаботника.Месяц");
		//... или назначим по умолчанию Основное
		Если Месяц = '00010101' Тогда
			Месяц = НачалоМесяца(РабочаяДата);
		КонецЕсли;
	КонецЕсли;
	ПриИзмененииФизлица();
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Месяц);
	
	// используем отбор по физлицам
	ПервичныеДокументыОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	ПервичныеДокументыОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	УчетКадровОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	УчетКадровОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	ПлановыеДанныеДляРасчета.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	ПлановыеДанныеДляРасчета.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	НалогиОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Использование = Истина;
	НалогиОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	
	// ... и по месяцу
	ПервичныеДокументыОрганизаций.Отбор.ПериодРегистрации.Использование = Истина;
	ПервичныеДокументыОрганизаций.Отбор.ПериодРегистрации.Значение = Месяц;
	НалогиОрганизаций.Отбор.Месяц.Использование = Истина;
	НалогиОрганизаций.Отбор.Месяц.Значение = Месяц;
	
	// Управление доступностью для пользователей с разными ролями
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		
		Если РольДоступна("КадровикРегламентированныхДанных") Или РольДоступна("КадровикРегламентированныхДанныхСОграничениемПравДоступа") Тогда
			
			Если НЕ РольДоступна("РасчетчикРегламентированнойЗарплаты") И НЕ РольДоступна("РасчетчикРегламентированнойЗарплатыСОграничениемПравДоступа") Тогда
				
				// Пользователь может пользоваться только кадровыми данными
				ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.Налоги.Доступность				= Ложь;
				ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.ПлановыеДанные.Доступность		= Ложь;
				ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.РасчетыЗарплата.Доступность	= Ложь;
				Если ИмяРаздела = "Налоги" ИЛИ ИмяРаздела = "ПлановыеДанные" ИЛИ ИмяРаздела = "РасчетыЗарплата" Тогда
					ИмяРаздела = "Основное"
				КонецЕсли; 
				
			КонецЕсли; 
			
		ИначеЕсли РольДоступна("РасчетчикРегламентированнойЗарплаты") Или РольДоступна("РасчетчикРегламентированнойЗарплатыСОграничениемПравДоступа") Тогда
			
			// Пользователь может пользоваться только расчетными данными
			ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.Основное.Доступность		= Ложь;
			ЭлементыФормы.КоманднаяПанельОсновная.Кнопки.КадровыеДанные.Доступность	= Ложь;
			Если ИмяРаздела = "Основное" ИЛИ ИмяРаздела = "КадровыеДанные" Тогда
				ИмяРаздела = "ПлановыеДанные"
			КонецЕсли; 
			
		Иначе  // не может быть
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбновитьДанные();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура СформироватьДанные(ИмяРаздела)
	
	Если ИмяРаздела = "Основное" Тогда
		СформироватьДанныеОсновное();
	ИначеЕсли ИмяРаздела = "КадровыеДанные" Тогда
		СформироватьДанныеКадровыеДанные();
	ИначеЕсли ИмяРаздела = "ПлановыеДанные" Тогда
		СформироватьДанныеПлановыеДанные();
	ИначеЕсли ИмяРаздела = "РасчетыЗарплата" Тогда
		СформироватьДанныеРасчетыЗарплата();
	ИначеЕсли ИмяРаздела = "Налоги" Тогда
		СформироватьДанныеНалоги();
	КонецЕсли;
	
КонецПроцедуры

// установка переменных модуля и значений отбора при смене месяца
// после этого вызова должна быть вызвана процедура ОбновитьДанные()
// для того, чтобы установленные значения были отработаны
//
Процедура ПриИзмененииМесяца()
	мДанныеРасчетыЗарплатаСформированы = Ложь;
	мДанныеПлановыеДанныеСформированы = Ложь;
	мДанныеКадровыеДанныеСформированы = Ложь;
	мДанныеНалогиСформированы = Ложь;
	Если Год(Месяц) <> Год(ПрежнийМесяц) Тогда
		мДанныеНалоговаяКарточкаСформированы = Ложь;
		мДанныеКарточкаПоЕСНСформированы = Ложь;
		мДанныеКарточкаПоОПССформированы = Ложь;
	КонецЕсли;
	мДанныеНалогиСформированы = Ложь;
	
	// установим отбор
	ПервичныеДокументыОрганизаций.Отбор.ПериодРегистрации.Значение = Месяц;
	НалогиОрганизаций.Отбор.Месяц.Значение = Месяц;
	
КонецПроцедуры

Процедура ОбновитьДанные()
	
	Заголовок = Физлицо;
	ПрежнийМесяц = Месяц;
	мПоказыватьЕСН = Месяц < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы[ИмяРаздела];
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяПанельОсновная.Кнопки Цикл
		Если Кнопка.Имя = ИмяРаздела Тогда
			Кнопка.Пометка = Истина;
			Кнопка.КнопкаПоУмолчанию = Истина;
		Иначе
			Кнопка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	ТекущаяОбласть = ЭлементыФормы[ИмяРаздела].ТекущаяОбласть;
	СформироватьДанные(ИмяРаздела);
	ЭлементыФормы[ИмяРаздела].ТекущаяОбласть = ТекущаяОбласть;
	ЭлементыФормы.СписокФизлиц.ТекущаяСтрока = Физлицо;
	
КонецПроцедуры

// процедура предназначена для установки значения реквизитов обработки с проверкой
// текущего значения и, если нужно, изменением переменных модуля формы и 
// обновлением данных
// Параметры:
//  ПарамФизлицо - ссылка на физлицо
//  ПарамИмяРаздела - строка "Основное", "КадровыеДанные", "РасчетыЗарплата" или "Налоги"
//  ПарамМесяц - дата
//
Процедура УстановитьРеквизиты(ПарамФизлицо, ПарамИмяРаздела, ПарамМесяц) Экспорт 
	Если Физлицо <> ПарамФизлицо Тогда
		Физлицо = ПарамФизлицо;
		ПриИзмененииФизлица();
	КонецЕсли;
	ИмяРаздела = ПарамИмяРаздела;
	Если Месяц <> ПарамМесяц Тогда
		Месяц = ПарамМесяц;
		ПриИзмененииМесяца();
	КонецЕсли;
	ОбновитьДанные();    
КонецПроцедуры

// процедура выполняется при изменении физлица
// выполняется установка переменных модуля и значения отборов
//
Процедура ПриИзмененииФизлица()
	ПервичныеДокументыОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	УчетКадровОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	НалогиОрганизаций.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	ПлановыеДанныеДляРасчета.Отбор.ДокументыПоРаботникуОрганизации.Значение = Физлицо;
	
	мДанныеРасчетыЗарплатаСформированы = Ложь;
	мДанныеПлановыеДанныеСформированы = Ложь;
	мДанныеНалоговаяКарточкаСформированы = Ложь;
	мДанныеКадровыеДанныеСформированы = Ложь;
	мДанныеОсновноеСформированы = Ложь;
	мДанныеНалогиСформированы = Ложь;    
	мДанныеКарточкаПоЕСНСформированы = Ложь;
	мДанныеКарточкаПоОПССформированы = Ложь;
	Если Не Физлицо.Пустая() Тогда
		мФизлицоОбъект = Физлицо.ПолучитьОбъект();
		мФизлицоФорма = мФизлицоОбъект.ПолучитьФорму(, ЭтаФорма);
	Иначе
		мФизлицоОбъект = НеОпределено;
		мФизлицоФорма = НеОпределено;
	КонецЕсли;
	
КонецПроцедуры

// получает сведения о местах работы
// заполняет массив МестаРаботыФизлица
Процедура ПолучитьСведенияОМестахРаботы()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Работники.Организация КАК Организация,
	|	Работники.Период КАК Период,
	|	Работники.Сотрудник,
	|	Работники.ПодразделениеОрганизации КАК Подразделение,
	|	Работники.Должность,
	|	Работники.Сотрудник.Код КАК ТабельныйНомер,
	|	Работники.Организация.Наименование КАК ОрганизацияНаименование,
	|	Работники.ПодразделениеОрганизации.Наименование КАК ПодразделениеНаименование,
	|	Работники.Должность.Наименование КАК ДолжностьНаименование,
	|	Работники.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	Работники.ПодразделениеОрганизации.Наименование КАК ОбособленноеПодразделениеНаименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник.Физлицо = &Физлицо) КАК Работники
	|ГДЕ
	|	Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Организация,
	|	Работники.Период,
	|	Работники.Сотрудник,
	|	Работники.ПодразделениеОрганизации,
	|	Работники.Должность,
	|	Работники.Сотрудник.Код,
	|	Работники.Организация.Наименование,
	|	Работники.ПодразделениеОрганизации.Наименование,
	|	Работники.Должность.Наименование,
	|	Работники.ОбособленноеПодразделение,
	|	Работники.ОбособленноеПодразделение.Наименование
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|ГДЕ
	|	Работники.Сотрудник.Физлицо = &Физлицо
	|	И Работники.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.Период > &Начало
	|	И Работники.Период < &Конец
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ");
	
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец", КонецМесяца(Месяц));
	
	Выборка = Запрос.Выполнить().Выбрать();
	МестаРаботыФизлица.Очистить();
	
	Пока Выборка.Следующий() Цикл
		// заполняем рабочие места
		ПредставлениеРабочегоМеста = Выборка.ОбособленноеПодразделениеНаименование + "; " + Выборка.ПодразделениеНаименование;
		МестаРаботыФизлица.Добавить(
		Новый Структура(
		"Организация,
		|Период,
		|Сотрудник,
		|ОбособленноеПодразделение,
		|ОбособленноеПодразделениеНаименование,
		|Подразделение,
		|Должность,
		|ТабельныйНомер,
		|ОрганизацияНаименование,
		|ПодразделениеНаименование,
		|ДолжностьНаименование,
		|Представление", 
		Выборка.Организация, 
		Выборка.Период,
		Выборка.Сотрудник,
		Выборка.ОбособленноеПодразделение, 
		Выборка.ОбособленноеПодразделениеНаименование, 
		Выборка.Подразделение,
		Выборка.Должность,
		Выборка.ТабельныйНомер,
		Выборка.ОрганизацияНаименование, 
		Выборка.ПодразделениеНаименование,
		Выборка.ДолжностьНаименование,
		ПредставлениеРабочегоМеста));
	КонецЦикла;
КонецПроцедуры

// получает сведения о местах работы и состояния
// заполняет массив МестаРаботыИСостоянияФизлица
Процедура ПолучитьМестаРаботыИСостоянияРаботника()
	
	Запрос = Новый запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""РаботникиОрганизаций"" КАК ВидРегистра,
	|	РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|	РаботникиОрганизацийСрезПоследних.Организация.Наименование,
	|	РаботникиОрганизацийСрезПоследних.Период КАК Период,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	РаботникиОрганизацийСрезПоследних.ОбособленноеПодразделение.Наименование КАК ОбособленноеПодразделениеНаименование,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизацииНаименование,
	|	РаботникиОрганизацийСрезПоследних.Должность КАК Должность,
	|	РаботникиОрганизацийСрезПоследних.Должность.Наименование ДолжностьНаименование,
	|	РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = &Прием
	|				
	|			ТОГДА ""Принят""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ТОГДА ""Уволен""
	|				ИНАЧЕ ""Перемещен""
	|			КОНЕЦ
	|	КОНЕЦ КАК Состояние,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.Сотрудник.Код КАК ТабельныйНомер
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Месяц, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период УБЫВ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Месяц",		КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Физлицо",	Физлицо);
	Запрос.УстановитьПараметр("Начало",		НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец",		КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Прием",		Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МестаРаботыИСостоянияФизлица.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		МестаРаботыИСостоянияФизлица.Добавить(
		Новый Структура(
		"Организация,
		|ВидРегистра,
		|Период,
		|ОбособленноеПодразделение,
		|ОбособленноеПодразделениеНаименование,
		|Подразделение,
		|Должность,
		|ТабельныйНомер,
		|Состояние,
		|Сотрудник,
		|ОрганизацияНаименование,
		|ПодразделениеНаименование,
		|ДолжностьНаименование",
		Выборка.Организация, 
		Выборка.ВидРегистра, 
		Выборка.Период,
		Выборка.ОбособленноеПодразделение,
		Выборка.ОбособленноеПодразделениеНаименование,
		Выборка.ПодразделениеОрганизации,
		Выборка.Должность,
		Выборка.ТабельныйНомер,
		Выборка.Состояние,
		Выборка.Сотрудник,
		Выборка.ОрганизацияНаименование, 
		Выборка.ПодразделениеОрганизацииНаименование,
		Выборка.ДолжностьНаименование));
		
	КонецЦикла;
	
КонецПроцедуры

// установить физлицо в качестве текущего
Процедура УстановитьФизлицо(ВыбранноеФизлицо)
	Физлицо = ВыбранноеФизлицо;
	ПриИзмененииФизлица();
	ОбновитьДанные();
КонецПроцедуры

// вывод в отдельных окнах отчетов
Процедура ТабличныйДокументОтдельно(ТабличныйДокумент, Заголовок)
	ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
	ТабличныйДокумент.ОтображатьСетку = Ложь;
	ТабличныйДокумент.Показать(Заголовок);
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
//  КОМАНДЫ ФОРМЫ

Процедура КоманднаяПанельОсновнаяДействие(Кнопка)
	ИмяРаздела = Кнопка.Имя;
	ОбновитьДанные();
КонецПроцедуры

Процедура ОбновитьОтчет(Кнопка)
	мДанныеРасчетыЗарплатаСформированы = Ложь;
	мДанныеПлановыеДанныеСформированы = Ложь;
	мДанныеНалоговаяКарточкаСформированы = Ложь;
	мДанныеКадровыеДанныеСформированы = Ложь;
	мДанныеОсновноеСформированы = Ложь;
	мДанныеНалогиСформированы = Ложь;
	мДанныеКарточкаПоЕСНСформированы = Ложь;
	мДанныеКарточкаПоОПССформированы = Ложь;
	ОбновитьДанные();
	
КонецПроцедуры

Процедура ФизлицоПриИзменении(Элемент)
	ПриИзмененииФизлица();
	ОбновитьДанные();
КонецПроцедуры

Процедура КоманднаяПанельФизлицаДействиеВыбрать(Кнопка)
	
	ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора();
	ФормаВыбора.НачальноеЗначениеВыбора = Физлицо;
	ФормаВыбора.ВладелецФормы = ЭлементыФормы.Физлицо;
	ФормаВыбора.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельФизлицаДействиеНовый(Кнопка)
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуНовогоЭлемента(, ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФизлицаДействиеОткрыть(Кнопка)
	Если мФизлицоФорма <> НеОпределено Тогда 
		мФизлицоФорма.Обновить();
		мФизлицоФорма.Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЕ

// формирует раздел
Процедура СформироватьДанныеОсновное()
	
	Если мДанныеОсновноеСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеОсновноеСформированы = Истина;
	
	// обновить динамические списки
	СписокФизлиц.Обновить();
	
	// для заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.Основное;
	
	ВыходнойДокумент.Очистить();
	
	Если мФизлицоОбъект <> НеОпределено Тогда
		мФизлицоОбъект.ПечатьДанныхПоФизлицу(ВыходнойДокумент, КонецМесяца(Месяц),Ложь);
	КонецЕсли;
	
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

Процедура НадписьОсновнаяФормаНажатие(Элемент)
	Если мФизлицоФорма <> НеОпределено Тогда
		мФизлицоФорма.Открыть();
	КонецЕсли;    
КонецПроцедуры

Процедура НадписьНДФЛНажатие(Элемент)
	Если мФизлицоОбъект <> НеОпределено Тогда
		Форма = мФизлицоОбъект.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура СписокФизлицВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	УстановитьФизлицо(ВыбраннаяСтрока);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура КоманднаяПанельСписокФизлицВыбратьФизлицо(Кнопка)
	Если ЭлементыФормы.СписокФизлиц.ТекущаяСтрока  <> НеОпределено Тогда
		УстановитьФизлицо(ЭлементыФормы.СписокФизлиц.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ПЛАНОВЫЕ ДАННЫЕ

// формирует раздел
Процедура СформироватьДанныеПлановыеДанные()
	Если мДанныеПлановыеДанныеСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеПлановыеДанныеСформированы = Истина;
	
	ПолучитьСведенияОПлановыхНачислениях();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьПлановыеНачисления.Заголовок = "Изменить плановые начисления";
	
	// для заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.ПлановыеДанные;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаУнифицированнаяФормаТ3 = Ложь;
	Если ОбластьУнифицированнаяФормаТ3 <> НеОпределено и ОбластьУнифицированнаяФормаТ3.Видимость Тогда
		ГруппировкаУнифицированнаяФормаТ3 = Истина;
	КонецЕсли;
	
	ВыходнойДокумент.Очистить();
	
	Макет = ПолучитьМакет("ПлановыеДанные");
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ОбластьФизлицо.Параметры.Месяц = Формат(Месяц, "ДФ='ММММ гггг ''г.'''");
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокНачислений.Организация КАК Организация,
	|	СписокНачислений.Организация.Наименование КАК ОрганизацияНаименование,
	|	СписокНачислений.ПодразделениеОрганизации КАК Подразделение,
	|	СписокНачислений.ПодразделениеОрганизации.Наименование КАК ПодразделениеНаименование,
	|	СписокНачислений.ВидРасчета КАК ВидРасчета,
	|	СписокНачислений.ВидРасчета.Наименование КАК ВидРасчетаНаименование,
	|	СписокНачислений.ПериодНачисления КАК Период,
	|	ЕСТЬNULL(СписокНачислений.ОсновноеНачисление, ЛОЖЬ) КАК ОсновноеНачисление,
	|	СписокНачислений.Размер КАК Размер
	|ИЗ
	|	(ВЫБРАТЬ
	|		Работники.Организация КАК Организация,
	|		Работники.Сотрудник.Физлицо КАК Физлицо,
	|		НачисленияРаботниковОрганизации.Период КАК ПериодНачисления,
	|		НачисленияРаботниковОрганизации.ОсновноеНачисление КАК ОсновноеНачисление,
	|		НачисленияРаботниковОрганизации.ВидРасчета КАК ВидРасчета,
	|		НачисленияРаботниковОрганизации.Размер КАК Размер,
	|		Работники.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РаботникиОрганизации.Организация КАК Организация,
	|			РаботникиОрганизации.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			РаботникиОрганизации.Сотрудник КАК Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(&парамНачало, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизации
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			РаботникиОрганизации.Организация,
	|			РаботникиОрганизации.ПодразделениеОрганизации,
	|			РаботникиОрганизации.Сотрудник
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|		ГДЕ
	|			РаботникиОрганизации.Период > &парамНачало
	|			И РаботникиОрганизации.Период <= &парамКонец
	|			И РаботникиОрганизации.Сотрудник.Физлицо = &Физлицо) КАК Работники
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				НачисленияРаботниковОрганизации.Период КАК Период,
	|				ИСТИНА КАК ОсновноеНачисление,
	|				НачисленияРаботниковОрганизации.ВидРасчетаИзмерение КАК ВидРасчета,
	|				НачисленияРаботниковОрганизации.Размер КАК Размер,
	|				НачисленияРаботниковОрганизации.Сотрудник КАК Сотрудник
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(&парамНачало, Сотрудник.Физлицо = &Физлицо) КАК НачисленияРаботниковОрганизации
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				НачисленияРаботниковОрганизации.Период,
	|				ИСТИНА,
	|				НачисленияРаботниковОрганизации.ВидРасчетаИзмерение,
	|				НачисленияРаботниковОрганизации.Размер,
	|				НачисленияРаботниковОрганизации.Сотрудник
	|			ИЗ
	|				РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК НачисленияРаботниковОрганизации
	|			ГДЕ
	|				НачисленияРаботниковОрганизации.Период > &парамНачало
	|				И НачисленияРаботниковОрганизации.Период <= &парамКонец
	|				И НачисленияРаботниковОрганизации.Сотрудник.Физлицо = &Физлицо) КАК НачисленияРаботниковОрганизации
	|			ПО Работники.Сотрудник = НачисленияРаботниковОрганизации.Сотрудник) КАК СписокНачислений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеНачисление УБЫВ,
	|	СписокНачислений.ВидРасчета.Код,
	|	Период");
	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("парамНачало" , Месяц);
	Запрос.УстановитьПараметр("парамКонец" , КонецМесяца(Месяц));
	Подразделения = Новый Массив();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Подразделения.Добавить(МестоРаботы.Подразделение);
	КонецЦикла;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос.УстановитьПараметр("Физлицо" , Физлицо);
	Запрос.УстановитьПараметр("Подразделения" , Подразделения);
	Запрос.УстановитьПараметр("парамДатаВалютногоУчета" , НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("парамПустаяВалюта" , Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("парамВалютаРегламентУчета" , ВалютаРеглУчета);
	Запрос.УстановитьПараметр("Прекратить", Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ПричиныИзмененияСостояния.Увольнение);
	Запрос.УстановитьПараметр("НачальнаяДата", '00010101');
	
	Выборка = Запрос.Выполнить().Выбрать();
	// выводим сведения о плановых данных
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеЗаголовок");
	ВыходнойДокумент.Вывести(Область);
	Область = Макет.ПолучитьОбласть("ПлановыеДанныеСтрока");
	Пока Выборка.Следующий() Цикл
		Область.Параметры.Заполнить(Выборка);
		//Область.Области.Валюта.Текст = "";
		ВыходнойДокумент.Вывести(Область);
		
		ОбластьЯчеек = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, ,ВыходнойДокумент.ВысотаТаблицы, );
		Если Выборка.ОсновноеНачисление Тогда
			// основные начисления выделяем жирным шрифтом
			Шрифт = ОбластьЯчеек.Шрифт;
			ОбластьЯчеек.Шрифт = Новый Шрифт(Шрифт,,, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

Процедура ПолучитьСведенияОПлановыхНачислениях()
	Перем СвойствоИнфоПоОрганизации;
	
	// получим сведения о местах работы
	ПолучитьСведенияОМестахРаботы();
	
	ДанныеПоПлановымРасчетам.Очистить();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		// просто наполняем соответствие организациями работника
		ИнфоПоОрганизации = Новый Структура(
		"Наименование,
		|ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций,
		|ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций,
		|ИсполнительныйЛист", 
		МестоРаботы.ОбособленноеПодразделениеНаименование,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		ДанныеПоПлановымРасчетам[МестоРаботы.Организация] = ИнфоПоОрганизации;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	// нужно проверить наличие документов изменения плановых данных
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сведения.ВидДокумента,
	|	Сведения.Организация,
	|	Сведения.Документ,
	|	Сведения.Представление
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		""ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций"" КАК ВидДокумента,
	|		Начисления.Ссылка.Организация КАК Организация,
	|		Начисления.Ссылка КАК Документ,
	|		Начисления.Ссылка.Представление КАК Представление
	|	ИЗ
	|		Документ.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
	|	ГДЕ
	|		Начисления.Сотрудник.ФизЛицо = &Физлицо
	|		И Начисления.ДатаДействия >= &Месяц) КАК Сведения";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеПоПлановымРасчетам[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоПлановымРасчетам[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

Процедура НадписьПлановыеНачисленияНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоПлановымРасчетам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Изменить плановые начисления по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПлановыеНачисления);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	
	
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
		НовыйДокумент.УстановитьНовыйНомер();
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		// для заполнения сотрудника перебираем рабочие места
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Если МестоРаботы.ОбособленноеПодразделение = Значение Тогда
				Сотрудник = МестоРаботы.Сотрудник;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НовыйДокумент.ДобавитьСтрокиНачисленийПоРаботнику(Сотрудник);
		Если НовыйДокумент.ОсновныеНачисления.Количество() = 0 Тогда
			Строка = НовыйДокумент.ОсновныеНачисления.Добавить();
			Строка.Физлицо = Физлицо;
			// для заполнения сотрудника перебираем рабочие места
			Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
				Если МестоРаботы.ОбособленноеПодразделение = Значение Тогда
					Строка.Сотрудник = МестоРаботы.Сотрудник;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура ПлановыеДанныеВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Сред(Область.Имя, 4) = "ГиперссылкаУнифицированнаяФормаТ3" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовТ3.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Штатное расписание");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ РАСЧЕТЫ, ЗАРПЛАТА

// формирует раздел
Процедура СформироватьДанныеРасчетыЗарплата()
	Если мДанныеРасчетыЗарплатаСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеРасчетыЗарплатаСформированы = Истина;
	// обновить динамические списки
	ПервичныеДокументыОрганизаций.Обновить();
	
	ПолучитьСведенияОНачислениях();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьНачислениеЗарплаты.Заголовок = "Начислить зарплату";
	ЭлементыФормы.НадписьВыплата.Заголовок = "Выплатить зарплату";
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.НачислениеЗарплатыРаботникамОрганизаций Цикл
			ЭлементыФормы.НадписьНачислениеЗарплаты.Заголовок = "Начисление зарплаты";
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ЗарплатаКВыплатеОрганизаций Цикл
			ЭлементыФормы.НадписьВыплата.Заголовок = "Платежная ведомость";
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.РасчетыЗарплата;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаАнализНачисленийРаботникамОрганизацийРаскрыта = Ложь;
	Если ОбластьАнализНачисленийРаботникамОрганизаций <> НеОпределено и ОбластьАнализНачисленийРаботникамОрганизаций.Видимость Тогда
		ГруппировкаАнализНачисленийРаботникамОрганизацийРаскрыта = Истина;
	КонецЕсли;
	ГруппировкаРасчетныеЛисткиОрганизацийРаскрыта = Ложь;
	Если ОбластьРасчетныеЛисткиОрганизаций <> НеОпределено и ОбластьРасчетныеЛисткиОрганизаций.Видимость Тогда
		ГруппировкаРасчетныеЛисткиОрганизацийРаскрыта = Истина;
	КонецЕсли;
	ГруппировкаРегламентированнаяФорма1НДФЛРаскрыта = Ложь;
	Если ОбластьРегламентированнаяФорма1НДФЛ <> НеОпределено и ОбластьРегламентированнаяФорма1НДФЛ.Видимость Тогда
		ГруппировкаРегламентированнаяФорма1НДФЛРаскрыта = Истина;
	КонецЕсли;
	ГруппировкаУнифицированнаяФормаТ13Раскрыта = Ложь;
	Если ОбластьУнифицированнаяФормаТ13 <> НеОпределено и ОбластьУнифицированнаяФормаТ13.Видимость Тогда
		ГруппировкаУнифицированнаяФормаТ13Раскрыта = Истина;
	КонецЕсли;
	ГруппировкаСЗВ4Раскрыта = Ложь;
	Если ОбластьСЗВ4 <> НеОпределено и ОбластьСЗВ4.Видимость Тогда
		ГруппировкаСЗВ4Раскрыта = Истина;
	КонецЕсли;
	
	ВыходнойДокумент.Очистить();
	
	Макет = ПолучитьМакет("РасчетыЗарплата");
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ОбластьФизлицо.Параметры.Месяц = Формат(Месяц, "ДФ='ММММ гггг ''г.'''");
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	ГрафикиРаботника = Новый Массив;
	
	// выводим сведения о местах работы
	Если МестаРаботыФизлица.Количество() <> 0 Тогда
		Область = Макет.ПолучитьОбласть("МестаРаботыЗаголовок");
		ВыходнойДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("МестаРаботыСтрока");
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Область.Параметры.Заполнить(МестоРаботы);
			ВыходнойДокумент.Вывести(Область);
		КонецЦикла;
	КонецЕсли;
	
	
	// получим сведения о состоянии начислений
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Данные.Организация КАК Организация,
	|	Данные.Организация.Наименование КАК ОрганизацияНаименование,
	|	МАКСИМУМ(Данные.НепроведенныйДокумент) КАК НепроведенныйДокумент,
	|	МАКСИМУМ(Данные.ПроведенныйДокумент) КАК ПроведенныйДокумент,
	|	МАКСИМУМ(Данные.ФлагНепроведенныеНачисления) КАК ФлагНепроведенныеНачисления,
	|	Данные.НепроведенныйДокумент.Представление,
	|	Данные.ПроведенныйДокумент.Представление
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ПлановыеНачисленияРаботниковОрганизаций.Организация КАК Организация,
	|		NULL КАК НепроведенныйДокумент,
	|		NULL КАК ПроведенныйДокумент,
	|		NULL КАК ФлагНепроведенныеНачисления
	|	ИЗ
	|		РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций КАК ПлановыеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ПлановыеНачисленияРаботниковОрганизаций.Сотрудник.Физлицо = &Физлицо
	|		И ПлановыеНачисленияРаботниковОрганизаций.Период > &ДатаНачала
	|		И ПлановыеНачисленияРаботниковОрганизаций.Период < &ДатаОкончания
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация,
	|		NULL,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка,
	|		ИСТИНА
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|	ГДЕ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо = &Физлицо
	|		И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &Месяц
	|		И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Организация,
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка,
	|		NULL,
	|		ЛОЖЬ
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
	|	ГДЕ
	|		НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Физлицо = &Физлицо
	|		И НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.ПериодРегистрации = &Месяц
	|		И (НЕ НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка.Проведен)) КАК Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	Данные.Организация,
	|	Данные.Организация.Наименование,
	|	Данные.НепроведенныйДокумент.Представление,
	|	Данные.ПроведенныйДокумент.Представление");
	
	
	Запрос.УстановитьПараметр("Прекратить",    Перечисления.ВидыДействияСНачислением.Прекратить);
	Запрос.УстановитьПараметр("Физлицо",       Физлицо);
	Запрос.УстановитьПараметр("Месяц",         Месяц);
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("ДатаОкончания", КонецМесяца(Месяц));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПлановыеНачисления = Новый Соответствие;
	ПлановыеНачисленияНеВыполнены = Новый Соответствие;
	ЛишниеНачисления = Новый Соответствие;
	ПроведенныеНачисления = Новый Соответствие;
	НепроведенныеНачисления = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		ПлановыеНачисления[Выборка.Организация] = Выборка.ОрганизацияНаименование;
		Если Выборка.ПроведенныйДокумент <> null Тогда
			// проведенные неплановые
			ПроведенныеНачисления[Выборка.ПроведенныйДокумент] = Выборка.ПроведенныйДокументПредставление;
		КонецЕсли;
		Если Выборка.НепроведенныйДокумент <> null Тогда
			// непроведенные неплановые
			НепроведенныеНачисления[Выборка.НепроведенныйДокумент] = Выборка.НепроведенныйДокументПредставление;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПлановыеНачисления.Количество() = 0 Тогда
		ТекстПлановыеНачисления = "По работнику не предусмотрены плановые начисления. ";
	Иначе
		Если ПроведенныеНачисления.Количество() > 0 Тогда
			ТекстПлановыеНачисления = 
			"По работнику на данный месяц выполнены начисления по " + 
			?(ПлановыеНачисления.Количество() = 1, "организации ", "организациям: ");
			Первый = Истина;
			Для Каждого ОргЭлемент Из ПлановыеНачисления Цикл
				Если не Первый Тогда
					ТекстПлановыеНачисления = ТекстПлановыеНачисления + ", ";
				КонецЕсли;
				Первый = Ложь;
				ТекстПлановыеНачисления = ТекстПлановыеНачисления + ОргЭлемент.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("ПлановыеНачисления");
	Область.Параметры.ТекстПлановыеНачисления = ТекстПлановыеНачисления;
	ВыходнойДокумент.Вывести(Область);
	
	Если НепроведенныеНачисления.Количество() > 0 Тогда
		Область = Макет.ПолучитьОбласть("ПроведенностьНачислений");
		Область.Параметры.ТекстПроведенностьНачислений = "ВНИМАНИЕ! По работнику существуют непроведенные документы начислений. Эти документы не отражены в учете!";
		Область.Параметры.НепроведенныеДокументыНачислений = НепроведенныеНачисления;
		ВыходнойДокумент.Вывести(Область);
	КонецЕсли;
	
	// отчеты
	ОтчетРегламентированнаяФорма1НДФЛ = Отчеты.РегламентированнаяФорма1НДФЛ.Создать();
	ОтчетРасчетныеЛисткиОрганизаций = Отчеты.РасчетныеЛисткиОрганизаций.Создать();
	//ОтчетАнализНачисленийРаботникамОрганизаций = Отчеты.АнализНачисленийРаботникамОрганизаций.Создать();
	//ОтчетУнифицированнаяФормаТ13 = Отчеты.УнифицированнаяФормаТ13.Создать();
	
	ОбработанныеОрганизации = Новый Соответствие;
	ФормироватьНалоговуюКарточку = НЕ мДанныеНалоговаяКарточкаСформированы;
	Сч = 1;
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Если ОбработанныеОрганизации[МестоРаботы.Организация] = НеОпределено Тогда
			
			ОбработанныеОрганизации[МестоРаботы.Организация] = Истина;
			
			Область = Макет.ПолучитьОбласть("Организация");
			Область.Параметры.ОрганизацияНаименование = МестоРаботы.ОрганизацияНаименование;
			Область.Параметры.Организация = МестоРаботы.Организация;
			ВыходнойДокумент.Вывести(Область);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			
			// РасчетныеЛисткиОрганизаций
			// заголовок
			Область = Макет.ПолучитьОбласть("РасчетныеЛистки");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаРасчетныеЛисткиОрганизаций.Имя;
			Область.Области.ГиперссылкаРасчетныеЛисткиОрганизаций.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаРасчетныеЛисткиОрганизацийРаскрыта);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьРасчетныеЛисткиОрганизаций = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			ОтчетРасчетныеЛисткиОрганизаций.ДатаНач = НачалоМесяца(Месяц);
			ОтчетРасчетныеЛисткиОрганизаций.ДатаКон = КонецМесяца(Месяц);
			ОтчетРасчетныеЛисткиОрганизаций.Организация = МестоРаботы.Организация;
			ОтчетРасчетныеЛисткиОрганизаций.ОтборОрганизации = Истина;
			ОтчетРасчетныеЛисткиОрганизаций.ВидСравненияОрганизации = ВидСравнения.Равно;
			ОтчетРасчетныеЛисткиОрганизаций.Работник = Физлицо;
			ОтчетРасчетныеЛисткиОрганизаций.ОтборРаботника = Истина;
			ОтчетРасчетныеЛисткиОрганизаций.ВидСравненияРаботника = ВидСравнения.Равно;
			ОтчетРасчетныеЛисткиОрганизаций.Группировать = Ложь;
			
			РасчетныеЛисткиОрганизацийОтчет = Новый ТабличныйДокумент;
			ОтчетРасчетныеЛисткиОрганизаций.СформироватьОтчет(РасчетныеЛисткиОрганизацийОтчет);
			
			// Для вывода отчетов в отдельных окнах
			ДанныеТабличныхДокументовРасчетныеЛистки.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),РасчетныеЛисткиОрганизацийОтчет);
			
			// таким способом размещаются отчеты без форматов строк
			ОбластьПрямоугольная = РасчетныеЛисткиОрганизацийОтчет.Область(1, 1, РасчетныеЛисткиОрганизацийОтчет.ВысотаТаблицы, РасчетныеЛисткиОрганизацийОтчет.ШиринаТаблицы);
			НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
			ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + РасчетныеЛисткиОрганизацийОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
			// назначим ширину колонок у новой области формата строк
			Для Счетчик = 1 По РасчетныеЛисткиОрганизацийОтчет.ШиринаТаблицы Цикл
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = РасчетныеЛисткиОрганизацийОтчет.Область(1, Счетчик).ШиринаКолонки;
			КонецЦикла;
			ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			// РегламентированнаяФорма1НДФЛ
			// заголовок
			Область = Макет.ПолучитьОбласть("НалоговаяКарточка");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаРегламентированнаяФорма1НДФЛ.Имя;
			Область.Области.ГиперссылкаРегламентированнаяФорма1НДФЛ.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаРегламентированнаяФорма1НДФЛРаскрыта);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьРегламентированнаяФорма1НДФЛ = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			Если ФормироватьНалоговуюКарточку Тогда
				ОтчетРегламентированнаяФорма1НДФЛ.ФизЛицо = Физлицо;
				ОтчетРегламентированнаяФорма1НДФЛ.НалоговыйПериод = Год(Месяц);
				ОтчетРегламентированнаяФорма1НДФЛ.Организация = МестоРаботы.Организация;
				РегламентированнаяФорма1НДФЛОтчет = Новый ТабличныйДокумент;
				ОтчетРегламентированнаяФорма1НДФЛ.СформироватьОтчет(РегламентированнаяФорма1НДФЛОтчет);
				
				// Для вывода отчетов в отдельных окнах
				ДанныеТабличныхДокументов1НДФЛ.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),РегламентированнаяФорма1НДФЛОтчет);
				
			КонецЕсли;
			
			// таким способом размещаются отчеты с форматами строк
			ОбластьСтроки = РегламентированнаяФорма1НДФЛОтчет.Область(1, , РегламентированнаяФорма1НДФЛОтчет.ВысотаТаблицы, );
			ВыходнойДокумент.ВставитьОбласть(ОбластьСтроки, ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы + 1, , ВыходнойДокумент.ВысотаТаблицы + РегламентированнаяФорма1НДФЛОтчет.ВысотаТаблицы, ));
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			// СЗВ4
			// заголовок
			Область = Макет.ПолучитьОбласть("СЗВ4");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаСЗВ4.Имя;
			Область.Области.ИмяСЗВ.Текст =  ?(НачалоМесяца(Месяц) < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(),"СЗВ-4","СЗВ-6");
			Область.Области.ГиперссылкаСЗВ4.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаСЗВ4Раскрыта);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьСЗВ4 = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			СЗВ4Отчет = Новый ТабличныйДокумент;
			ВыводНаПечатьПоФизЛицу(СЗВ4Отчет, Месяц, ФизЛицо, МестоРаботы.Организация);
			//ПроцедурыПерсонифицированногоУчета.ВыводНаПечатьПоФизЛицу(СЗВ4Отчет, Месяц, ФизЛицо, МестоРаботы.Организация);
			
			// Для вывода отчетов в отдельных окнах
			ДанныеТабличныхДокументовСЗВ4.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="), СЗВ4Отчет);
			
			Если НачалоМесяца(Месяц) < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
				
				// таким способом размещаются отчеты без форматов строк
				ОбластьПрямоугольная = СЗВ4Отчет.Область(1, 1, СЗВ4Отчет.ВысотаТаблицы, СЗВ4Отчет.ШиринаТаблицы);
				НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + СЗВ4Отчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
				// назначим ширину колонок у новой области формата строк
				Для Счетчик = 1 По СЗВ4Отчет.ШиринаТаблицы Цикл
					ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = СЗВ4Отчет.Область(1, Счетчик).ШиринаКолонки;
				КонецЦикла;
				ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
				
			Иначе
				
				// таким способом размещаются отчеты с форматами строк
				ОбластьСтроки = СЗВ4Отчет.Область(1, , СЗВ4Отчет.ВысотаТаблицы, );
				ВыходнойДокумент.ВставитьОбласть(ОбластьСтроки, ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы + 1, , ВыходнойДокумент.ВысотаТаблицы + СЗВ4Отчет.ВысотаТаблицы, ));
			
			КонецЕсли;
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			Сч = Сч + 1;
			
		КонецЕсли;
	КонецЦикла;
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

// получает сведения, которые требуются для отработки действий
// 
Процедура ПолучитьСведенияОНачислениях()
	Перем СвойствоИнфоПоОрганизации;
	
	// получим сведения о местах работы
	ПолучитьСведенияОМестахРаботы();
	
	ДанныеПоНачислениям.Очистить();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		// просто наполняем соответствие организациями работника
		ИнфоПоОрганизации = Новый Структура(
		"Наименование,
		|НачислениеЗарплатыРаботникамОрганизаций,
		|НачислениеПоБольничномуЛисту,
		|НачислениеОтпускаРаботникамОрганизаций,
		|ЗарплатаКВыплатеОрганизаций,
		|ПремииРаботниковОрганизаций,
		|РегистрацияРазовыхНачисленийРаботниковОрганизаций", 
		МестоРаботы.ОбособленноеПодразделениеНаименование,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		ДанныеПоНачислениям[МестоРаботы.ОбособленноеПодразделение] = ИнфоПоОрганизации;
		
	КонецЦикла;
	
	Запрос = Новый Запрос();
	
	// нужно проверить наличие документов начисления, больничных, отпусков, изменения плановых начислений, 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сведения.ВидДокумента,
	|	Сведения.Организация,
	|	Сведения.Документ,
	|	Сведения.Представление
	|ИЗ
	|	(ВЫБРАТЬ
	|		""НачислениеЗарплатыРаботникамОрганизаций"" КАК ВидДокумента,
	|		Начисления.Ссылка.Организация КАК Организация,
	|		Начисления.Ссылка КАК Документ,
	|		Начисления.Ссылка.Представление КАК Представление
	|	ИЗ
	|		Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|	ГДЕ
	|		Начисления.Сотрудник.Физлицо = &Физлицо
	|		И Начисления.Ссылка.ПериодРегистрации = &Месяц
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""ЗарплатаКВыплатеОрганизаций"",
	|		Зарплата.Ссылка.Организация,
	|		Зарплата.Ссылка,
	|		Зарплата.Ссылка.Представление
	|	ИЗ
	|		Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК Зарплата
	|	ГДЕ
	|		Зарплата.Физлицо = &Физлицо
	|		И Зарплата.Ссылка.ПериодРегистрации = &Месяц) КАК Сведения";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("НачислениеЗарплатыПустаяСсылка", Документы.НачислениеЗарплатыРаботникамОрганизаций.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеПоНачислениям[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоНачислениям[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

// обработка основных действий раздела РАСЧЕТЫ, ЗАРПЛАТА
Процедура НадписьНачислениеЗарплатыНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.НачислениеЗарплатыРаботникамОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.НачислениеЗарплатыРаботникамОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Начислить по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьНачислениеЗарплаты);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		// это создание начислений для организации
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			// регистрируем для каких подразделений уже создали начисления зарплаты
			ОбработанныеПодразделения = Новый Соответствие;
			Если МестоРаботы.ОбособленноеПодразделение = Значение Тогда
				Если ОбработанныеПодразделения[МестоРаботы.Подразделение] = НеОпределено Тогда
					НовыйДокумент = Документы.НачислениеЗарплатыРаботникамОрганизаций.СоздатьДокумент();
					НовыйДокумент.Организация = МестоРаботы.ОбособленноеПодразделение;
					НовыйДокумент.ПериодРегистрации = Месяц;
					НовыйДокумент.ПодразделениеОрганизации = МестоРаботы.Подразделение;
					ОбработанныеПодразделения[МестоРаботы.Подразделение] = МестоРаботы.Подразделение;
					НовыйДокумент.Дата = КонецМесяца(Месяц);
					//НовыйДокумент.ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
					НовыйДокумент.Автозаполнение();
					Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьВыплатаНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНачислениям Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ЗарплатаКВыплатеОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ЗарплатаКВыплатеОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Выплатить зарплату по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		СтрокаМеню = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьВыплата);
		Если СтрокаМеню = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		Значение = СтрокаМеню.Значение;
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ЗарплатаКВыплатеОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.ПериодРегистрации = Месяц;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.Зарплата.Добавить();
		Строка.Физлицо = Физлицо;
		//Строка.Авторасчет = Истина;
		
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего начисления
		Форма = Значение.ПолучитьФорму();
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура РасчетыЗарплатаВыбор(Элемент, Область, СтандартнаяОбработка)
	Если Сред(Область.Имя, 4) = "ГиперссылкаРасчетныеЛисткиОрганизаций" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовРасчетныеЛистки.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Расчетный листок (" + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаАнализНачисленийРаботникамОрганизаций" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовАнализНачислений.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Анализ начислений (" + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаРегламентированнаяФорма1НДФЛ" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументов1НДФЛ.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Налоговая карточка (" + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаУнифицированнаяФормаТ13" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовТ13.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Табель Т-13 (" + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя, 4) = "ГиперссылкаСЗВ4" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовСЗВ4.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "СЗВ-4 (" + Физлицо + ")");
	КонецЕсли;
КонецПроцедуры

Процедура РасчетыЗарплатаОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если Расшифровка.Количество() = 1 Тогда
			Для Каждого ЭлементСоответствия Из Расшифровка Цикл
				ОткрытьЗначение(ЭлементСоответствия.Ключ);
				Возврат;
			КонецЦикла;
		КонецЕсли;
		СписокМеню = Новый СписокЗначений;
		Для Каждого ЭлементСоответствия Из Расшифровка Цикл
			СписокМеню.Добавить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		Результат = ВыбратьИзМеню(СписокМеню);
		Если Результат = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьЗначение(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ДействиеНовыйДокумент(Кнопка)
	Форма = Документы[Кнопка.Имя].ПолучитьФормуНовогоДокумента(, ЭтаФорма);
	Форма.Открыть();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ  КАДРОВЫЕ ДАННЫЕ

// формирует раздел
Процедура СформироватьДанныеКадровыеДанные()
	
	Если мДанныеКадровыеДанныеСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеКадровыеДанныеСформированы = Истина;
	
	// обновить динамические списки
	УчетКадровОрганизаций.Обновить();
	
	// Сбор данных о состоянии работника в организациях.
	ПолучитьМестаРаботыИСостоянияРаботника();
	
	ПолучитьКадровыеДанные();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьПриемНаРаботу.Заголовок = "Принять на работу";
	ЭлементыФормы.НадписьКадровоеПеремещение.Заголовок = "Переместить";
	ЭлементыФормы.НадписьУвольнение.Заголовок = "Уволить";
	ЭлементыФормы.НадписьАнкетаЗастрахованногоЛица.Заголовок = "Отправить анкету в ПФР";
	ЭлементыФормы.НадписьЗаявлениеОбОбмене.Заголовок = "Отправить заявление в ПФР";
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ПриемНаРаботуВОрганизацию Цикл
			ЭлементыФормы.НадписьПриемНаРаботу.Заголовок = "Прием на работу";
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.КадровоеПеремещениеОрганизаций Цикл
			ЭлементыФормы.НадписьКадровоеПеремещение.Заголовок = "Кадровое перемещение";
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.УвольнениеИзОрганизаций Цикл
			ЭлементыФормы.НадписьУвольнение.Заголовок = "Увольнение";
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.АнкетаЗастрахованногоЛица Цикл
			ЭлементыФормы.НадписьАнкетаЗастрахованногоЛица.Заголовок = "Анкета застрахованного лица";
			Прервать;
		КонецЦикла;
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства Цикл
			ЭлементыФормы.НадписьЗаявлениеОбОбмене.Заголовок = "Заявление об обмене...(в ПФР)";
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// Вывод данных в табличный документ
	ВыходнойДокумент = ЭлементыФормы.КадровыеДанные;
	
	// восстановление раскрытых группировок отчета
	ГруппировкаТ2Раскрыта = Ложь;
	Если ОбластьТ2Организаций <> НеОпределено и ОбластьТ2Организаций.Видимость Тогда
		ГруппировкаТ2Раскрыта = Истина;
	КонецЕсли;
	ВыходнойДокумент.Очистить();
	Макет = ПолучитьМакет("КадровыеДанные");
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	Если МестаРаботыИСостоянияФизлица.Количество() <> 0 Тогда
		
		Область = Макет.ПолучитьОбласть("МестаРаботыЗаголовок");
		ВыходнойДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("МестаРаботыСтрока");
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			
			Область.Параметры.Заполнить(МестоРаботы);
			ВыходнойДокумент.Вывести(Область);
			
		КонецЦикла;
		
		// Поиск не проведенных документов
		РезультатВыборки = НеПроведенныеКадровыеДокументы();
		
		Если НЕ РезультатВыборки.Пустой() Тогда
			
			Область = Макет.ПолучитьОбласть("ДокументыНеПроведены");
			Область.Параметры.ТекстДокументыНеПроведены = "ВНИМАНИЕ! Обнаружены не проведенные кадровые документы!";
			ВыходнойДокумент.Вывести(Область);
			
		КонецЕсли; 
		
		// Отчеты
		ОтчетТ2Организаций = Отчеты.УнифицированнаяФормаТ2.Создать();
		ОбработанныеОрганизации = Новый Соответствие;
		Сч = 1; 
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			// Отчеты выводятся только по регистру РаботникиОрганизаций.
			Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
				
				Если ОбработанныеОрганизации[МестоРаботы.ОбособленноеПодразделение] = НеОпределено Тогда
					
					ОбработанныеОрганизации[МестоРаботы.ОбособленноеПодразделение] = Истина;
					Область = Макет.ПолучитьОбласть("Организация");
					Область.Параметры.ОрганизацияНаименование = МестоРаботы.ОрганизацияНаименование;
					Область.Параметры.Организация = МестоРаботы.Организация;
					ВыходнойДокумент.Вывести(Область);
					ВыходнойДокумент.Вывести(ПустаяСтрока);
					
					Область = Макет.ПолучитьОбласть("ОтчетТ2");
					ИмяЯчейкиОтчета = Область.Области.ГиперссылкаТ2.Имя;
					Область.Области.ГиперссылкаТ2.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
					ВыходнойДокумент.Вывести(ПустаяСтрока);
					ВыходнойДокумент.Вывести(Область);
					
					// начнем группировку
					ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаТ2Раскрыта);
					ВыходнойДокумент.Вывести(ПустаяСтрока);
					ОбластьТ2Организаций = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
					
					ОтчетТ2Организаций.ДатаАктуальности = НачалоМесяца(Месяц);
					ОтчетТ2Организаций.Работник = МестоРаботы.Сотрудник;
					
					Т2ОрганизацийОтчет = Новый ТабличныйДокумент;
					ОтчетТ2Организаций.СформироватьОтчет(Т2ОрганизацийОтчет, Истина);
					
					// Для вывода отчетов в отдельных окнах
					ДанныеТабличныхДокументовТ2.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),Т2ОрганизацийОтчет);
					
					// таким способом размещаются отчеты без форматов строк
					ОбластьПрямоугольная = Т2ОрганизацийОтчет.Область(1, 1, Т2ОрганизацийОтчет.ВысотаТаблицы, Т2ОрганизацийОтчет.ШиринаТаблицы);
					НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
					ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + Т2ОрганизацийОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
					// назначим ширину колонок у новой области формата строк
					Для Счетчик = 1 По Т2ОрганизацийОтчет.ШиринаТаблицы Цикл
						ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = Т2ОрганизацийОтчет.Область(1, Счетчик).ШиринаКолонки;
					КонецЦикла;
					ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
					
					ВыходнойДокумент.ЗакончитьГруппуСтрок();
					
					Сч = Сч + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

// получает сведения, которые требуются для отработки действий
// 
Процедура ПолучитьКадровыеДанные()
	
	Перем СвойствоИнфоПоОрганизации;
	
	КадровыеДанные.Очистить();
	КадровыеДанныеПриемНаРаботу.Очистить();
	// Формирование КадровыДанных по местам работы работника
	Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
		
		Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
			
			ИнфоПоКадрамОрганизации = Новый Структура(
			"Наименование,
			|ПриемНаРаботуВОрганизацию,
			|КадровоеПеремещениеОрганизаций,
			|ОтпускаОрганизаций,
			|КомандировкиОрганизаций,
			|УвольнениеИзОрганизаций, 
			|АнкетаЗастрахованногоЛица,
			|ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства", 
			МестоРаботы.ОбособленноеПодразделениеНаименование,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив,
			Новый Массив);
			КадровыеДанные[МестоРаботы.ОбособленноеПодразделение] = ИнфоПоКадрамОрганизации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование КадровыДанных по всем организациям (для формирования списка документов "Прием на работу в организацию").
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ИнфоПоКадрамОрганизации = Новый Структура(
		"Наименование,
		|ПриемНаРаботуВОрганизацию,
		|КадровоеПеремещениеОрганизаций,
		|УвольнениеИзОрганизаций,
		|АнкетаЗастрахованногоЛица,
		|ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства", 
		Выборка.Наименование,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив,
		Новый Массив);
		КадровыеДанныеПриемНаРаботу[Выборка.Ссылка] = ИнфоПоКадрамОрганизации;
	КонецЦикла;
	
	Если МестаРаботыИСостоянияФизлица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Сведения.ВидДокумента,
	|	Сведения.Организация,
	|	Сведения.Представление,
	|	Сведения.Документ
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		""КадровоеПеремещениеОрганизаций"" КАК ВидДокумента,
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Организация КАК Организация,
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Ссылка КАК Документ,
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Ссылка.Представление КАК Представление
	|	ИЗ
	|		Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацийРаботникиОрганизации
	|	ГДЕ
	|		КадровоеПеремещениеОрганизацийРаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""ПриемНаРаботуВОрганизацию"",
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Организация,
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка,
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботникиОрганизации
	|	ГДЕ
	|		ПриемНаРаботуВОрганизациюРаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""УвольнениеИзОрганизаций"",
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Организация,
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка,
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацийРаботникиОрганизации
	|	ГДЕ
	|		УвольнениеИзОрганизацийРаботникиОрганизации.Сотрудник.Физлицо = &Физлицо
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		""АнкетаЗастрахованногоЛица"",
	|		АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Организация,
	|		АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка,
	|		АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.АнкетаЗастрахованногоЛица.РаботникиОрганизации КАК АнкетаЗастрахованногоЛицаРаботникиОрганизации
	|	ГДЕ
	|		АнкетаЗастрахованногоЛицаРаботникиОрганизации.ФизЛицо = &ФизЛицо
	|		И АнкетаЗастрахованногоЛицаРаботникиОрганизации.Ссылка.Дата МЕЖДУ &Начало И &Конец
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		""ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства"",
	|		ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка.Организация,
	|		ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка,
	|		ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка.Представление
	|	ИЗ
	|		Документ.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.РаботникиОрганизации КАК ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации
	|	ГДЕ
	|		ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.ФизЛицо = &ФизЛицо
	|		И ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельстваРаботникиОрганизации.Ссылка.Дата МЕЖДУ &Начало И &Конец) КАК Сведения";
	
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец", КонецМесяца(Месяц));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если КадровыеДанные[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		КадровыеДанные[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
		Если КадровыеДанныеПриемНаРаботу[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		КадровыеДанныеПриемНаРаботу[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

// Формирует список непроведенных кадровых документов
Функция НеПроведенныеКадровыеДокументы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|ГДЕ
	|	ПриемНаРаботуВОрганизацию.РаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|	И ПриемНаРаботуВОрганизацию.РаботникиОрганизации.ДатаПриема МЕЖДУ &Начало И &Конец
	|	И ПриемНаРаботуВОрганизацию.Проведен = &Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|ГДЕ
	|	КадровоеПеремещениеОрганизаций.РаботникиОрганизации.Сотрудник.ФизЛицо = &ФизЛицо
	|	И КадровоеПеремещениеОрганизаций.РаботникиОрганизации.ДатаНачала МЕЖДУ &Начало И &Конец
	|	И КадровоеПеремещениеОрганизаций.Проведен = &Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций
	|ГДЕ
	|	УвольнениеИзОрганизаций.РаботникиОрганизации.Сотрудник.Физлицо = &Физлицо
	|	И УвольнениеИзОрганизаций.РаботникиОрганизации.ДатаУвольнения МЕЖДУ &Начало И &Конец
	|	И УвольнениеИзОрганизаций.Проведен = &Проведен";
	
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("Начало", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("Конец", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Проведен", Ложь);
	
	Возврат Запрос.Выполнить()
	
КонецФункции

Процедура НадписьПриемНаРаботуНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанныеПриемНаРаботу Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ПриемНаРаботуВОрганизацию Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ПриемНаРаботуВОрганизацию.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Принять в организацию " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьПриемНаРаботу);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.Физлицо			= Физлицо;
		Строка.ДатаПриема		= ТекущаяДата();
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьУвольнениеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.УвольнениеИзОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.УвольнениеИзОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Уволить из организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьУвольнение);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		// это создание приема на работу для организации
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			// регистрируем для каких подразделений уже создали документ
			ОбработанныеПодразделения = Новый Соответствие;
			Если МестоРаботы.ОбособленноеПодразделение = Значение Тогда
				Если ОбработанныеПодразделения[МестоРаботы.Подразделение] = НеОпределено Тогда
					НовыйДокумент = Документы.УвольнениеИзОрганизаций.СоздатьДокумент();
					НовыйДокумент.Организация = МестоРаботы.ОбособленноеПодразделение;
					ОбработанныеПодразделения[МестоРаботы.Подразделение] = МестоРаботы.Подразделение;
					НовыйДокумент.Дата = ТекущаяДата();
					Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
					Строка.Физлицо = Физлицо;
					// для заполнения приказа перебираем рабочие места
					Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
						Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
							Если МестоРаботы.ОбособленноеПодразделение = Значение Тогда
								Строка.Сотрудник = МестоРаботы.Сотрудник;
							КонецЕсли; 
						КонецЕсли;
					КонецЦикла;
					Строка.ДатаУвольнения = ТекущаяДата();
					Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьКадровоеПеремещениеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.КадровоеПеремещениеОрганизаций Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.КадровоеПеремещениеОрганизаций.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Перемещение по организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьКадровоеПеремещение);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.КадровоеПеремещениеОрганизаций.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.Физлицо = Физлицо;
		Строка.ДатаНачала = ТекущаяДата();
		Для Каждого МестоРаботы Из МестаРаботыИСостоянияФизлица Цикл
			Если МестоРаботы.ВидРегистра = "РаботникиОрганизаций" Тогда
				Если МестоРаботы.ОбособленноеПодразделение = Значение Тогда
					Строка.Сотрудник = МестоРаботы.Сотрудник;
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьАнкетаЗастрахованногоЛицаНажатие(Элемент)
	
	Если мФизлицоОбъект = НеОпределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ввод документов "АнкетаЗастрахованногоЛица" только для лиц без страховых номеров.
	Если ПустаяСтрока(СтрЗаменить(мФизлицоОбъект.СтраховойНомерПФР,"-","")) Тогда
		
		СписокМеню = Новый СписокЗначений;
		Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
			Для Каждого Документ из ИнфоПоОрганизации.Значение.АнкетаЗастрахованногоЛица Цикл
				СписокМеню.Добавить(Документ.Документ, Документ.Представление);
			КонецЦикла;
			Если ИнфоПоОрганизации.Значение.АнкетаЗастрахованногоЛица.Количество() = 0 Тогда
				СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Отправить анкету в ПФР от организации " + ИнфоПоОрганизации.Значение.Наименование);
			КонецЕсли;
		КонецЦикла;
		Если СписокМеню.Количество() = 1 Тогда
			Значение = СписокМеню[0].Значение;
		Иначе
			ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьАнкетаЗастрахованногоЛица);
			Если ЗначениеВыбора <> Неопределено Тогда
				Значение = ЗначениеВыбора.Значение;
			Иначе
				Возврат
			КонецЕсли; 
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
			НовыйДокумент = Документы.АнкетаЗастрахованногоЛица.СоздатьДокумент();
			НовыйДокумент.Организация = Значение;
			НовыйДокумент.Дата = ТекущаяДата();
			Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
			Строка.ФизЛицо = Физлицо;
			НовыйДокумент.ЗаполнитьДанныеПоФизЛицу(Физлицо, Строка);
			Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
			Форма.Открыть();
		Иначе
			// это открытие существующего документа
			Форма = Значение.ПолучитьФорму(, ЭтаФорма);
			Форма.Открыть();
		КонецЕсли;
	Иначе
		Предупреждение("Физическому лицу уже присвоен страховой номер ПФР");
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура НадписьЗаявлениеОбОбменеНажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из КадровыеДанные Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Отправить заявление в ПФР от организации " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьЗаявлениеОбОбмене);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		НовыйДокумент = Документы.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.СоздатьДокумент();
		НовыйДокумент.Организация = Значение;
		НовыйДокумент.Дата = ТекущаяДата();
		Строка = НовыйДокумент.РаботникиОрганизации.Добавить();
		Строка.ФизЛицо							= Физлицо;
		Строка.ПолВСвидетельстве				= Физлицо.Пол;
		Строка.ДатаРожденияВСвидетельстве		= Физлицо.ДатаРождения;
		Строка.СтраховойНомерПФРВСвидетельстве	= Физлицо.СтраховойНомерПФР;
		Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура КадровыеДанныеВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Сред(Область.Имя,4) = "ГиперссылкаТ2" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовТ2.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Личная карточка Т2 (" + Физлицо + ")");
	КонецЕсли;
	
КонецПроцедуры

Процедура КадровыеДанныеОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если Расшифровка.Количество() = 1 Тогда
			Для Каждого ЭлементСоответствия Из Расшифровка Цикл
				ОткрытьЗначение(ЭлементСоответствия.Ключ);
				Возврат;
			КонецЦикла;
		КонецЕсли;
		СписокМеню = Новый СписокЗначений;
		Для Каждого ЭлементСоответствия Из Расшифровка Цикл
			СписокМеню.Добавить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		Результат = ВыбратьИзМеню(СписокМеню);
		Если Результат = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьЗначение(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ НАЛОГИ

// формирует раздел
Процедура СформироватьДанныеНалоги()
	
	Если мДанныеНалогиСформированы Тогда
		Возврат;
	КонецЕсли;
	мДанныеНалогиСформированы = Истина;
	
	// обновить динамические списки
	НалогиОрганизаций.Обновить();
	
	ПолучитьСведенияОНалогах();
	
	// настройка надписей раздела Действия и документы
	ЭлементыФормы.НадписьРасчетЕСН.Заголовок = "Рассчитать налоги (взносы) с ФОТ";
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНалогам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.РасчетЕСН Цикл
			ЭлементыФормы.НадписьРасчетЕСН.Заголовок = "Расчет налогов (взносов) с ФОТ";
			Прервать;
		КонецЦикла;
	КонецЦикла;
	
	// заполнения табличного документа с отчетами
	ВыходнойДокумент = ЭлементыФормы.Налоги;
	
	// восстановление раскрытых группировок отчета
	Если мПоказыватьЕСН Тогда
		ГруппировкаРегламентированнаяФормаКарточкаПоЕСН = Ложь;
		Если ОбластьРегламентированнаяФормаКарточкаПоЕСН <> НеОпределено и ОбластьРегламентированнаяФормаКарточкаПоЕСН.Видимость Тогда
			ГруппировкаРегламентированнаяФормаКарточкаПоЕСН = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ГруппировкаРегламентированнаяФормаКарточкаПоОПС = Ложь;
	Если ОбластьРегламентированнаяФормаКарточкаПоОПС <> НеОпределено и ОбластьРегламентированнаяФормаКарточкаПоОПС.Видимость Тогда
		ГруппировкаРегламентированнаяФормаКарточкаПоОПС = Истина;
	КонецЕсли;
	
	ВыходнойДокумент.Очистить();
	
	Макет = ПолучитьМакет("Налоги");
	ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
	
	ОбластьФизлицо = Макет.ПолучитьОбласть("Физлицо");
	ОбластьФизлицо.Параметры.Физлицо = Физлицо;
	ОбластьФизлицо.Параметры.Месяц = Формат(Месяц, "ДФ='ММММ гггг ''г.'''");
	ВыходнойДокумент.Вывести(ОбластьФизлицо);
	
	// выводим сведения о местах работы
	Если МестаРаботыФизлица.Количество() <> 0 Тогда
		Область = Макет.ПолучитьОбласть("МестаРаботыЗаголовок");
		ВыходнойДокумент.Вывести(Область);
		Область = Макет.ПолучитьОбласть("МестаРаботыСтрока");
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			Область.Параметры.Заполнить(МестоРаботы);
			ВыходнойДокумент.Вывести(Область);
		КонецЦикла;
	КонецЕсли;
	
	// Поиск не проведенных документов
	РезультатВыборки = НеПроведенныеДокументыПоНалогам();
	
	Если НЕ РезультатВыборки.Пустой() Тогда
		
		Область = Макет.ПолучитьОбласть("ДокументыНеПроведены");
		Область.Параметры.ТекстДокументыНеПроведены = "ВНИМАНИЕ! Обнаружены не проведенные документы по расчету налогов!";
		ВыходнойДокумент.Вывести(Область);
		
	КонецЕсли; 
	
	// отчеты
	ОтчетРегламентированнаяФормаКарточкаПоЕСН = Отчеты.РегламентированнаяФормаКарточкаПоЕСН.Создать();
	Если мПоказыватьЕСН Тогда
		ОтчетРегламентированнаяФормаКарточкаПоОПС = Отчеты.РегламентированнаяФормаКарточкаПоОПС.Создать();
	Иначе
		ОтчетРегламентированнаяФормаКарточкаПоОПС = Отчеты.КарточкаУчетаПоСтраховымВзносам.Создать();
	КонецЕсли;
	
	ОбработанныеОрганизации = Новый Соответствие;
	ФормироватьКарточкуЕСН = НЕ мДанныеКарточкаПоЕСНСформированы;
	ФормироватьКарточкуОПС = НЕ мДанныеКарточкаПоОПССформированы;
	Сч = 1;
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		Если ОбработанныеОрганизации[МестоРаботы.Организация] = НеОпределено Тогда
			
			ОбработанныеОрганизации[МестоРаботы.Организация] = Истина;
			
			Область = Макет.ПолучитьОбласть("Организация");
			Область.Параметры.ОрганизацияНаименование = МестоРаботы.ОрганизацияНаименование;
			Область.Параметры.Организация = МестоРаботы.Организация;
			ВыходнойДокумент.Вывести(Область);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			
			// РегламентированнаяФормаКарточкаПоЕСН
			Если мПоказыватьЕСН Тогда
				// заголовок
				Область = Макет.ПолучитьОбласть("КарточкаЕСН");
				ИмяЯчейкиОтчета = Область.Области.ГиперссылкаЕСН.Имя;
				Область.Области.ГиперссылкаЕСН.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
				ВыходнойДокумент.Вывести(ПустаяСтрока);
				ВыходнойДокумент.Вывести(Область);
				
				// начнем группировку
				ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаРегламентированнаяФормаКарточкаПоЕСН);
				ВыходнойДокумент.Вывести(ПустаяСтрока);
				ОбластьРегламентированнаяФормаКарточкаПоЕСН = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
				
				Если ФормироватьКарточкуЕСН Тогда
					ОтчетРегламентированнаяФормаКарточкаПоЕСН.ФизЛицо = Физлицо;
					ОтчетРегламентированнаяФормаКарточкаПоЕСН.НалоговыйПериод = Год(Месяц);
					ОтчетРегламентированнаяФормаКарточкаПоЕСН.Организация = МестоРаботы.Организация;
					РегламентированнаяФормаКарточкаПоЕСНОтчет = Новый ТабличныйДокумент;
					ОтчетРегламентированнаяФормаКарточкаПоЕСН.СформироватьОтчет(РегламентированнаяФормаКарточкаПоЕСНОтчет);
					
					// Для вывода отчетов в отдельных окнах
					ДанныеТабличныхДокументовЕСН.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),РегламентированнаяФормаКарточкаПоЕСНОтчет);
					
				КонецЕсли;
				
				// таким способом размещаются отчеты без форматов строк
				ОбластьПрямоугольная = РегламентированнаяФормаКарточкаПоЕСНОтчет.Область(1, 1, РегламентированнаяФормаКарточкаПоЕСНОтчет.ВысотаТаблицы, РегламентированнаяФормаКарточкаПоЕСНОтчет.ШиринаТаблицы);
				НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + РегламентированнаяФормаКарточкаПоЕСНОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
				// назначим ширину колонок у новой области формата строк
				Для Счетчик = 1 По РегламентированнаяФормаКарточкаПоЕСНОтчет.ШиринаТаблицы Цикл
					ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = РегламентированнаяФормаКарточкаПоЕСНОтчет.Область(1, Счетчик).ШиринаКолонки;
				КонецЦикла;
				ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
				
				ВыходнойДокумент.ЗакончитьГруппуСтрок();
			КонецЕсли;
			
			// РегламентированнаяФормаКарточкаПоОПС
			// заголовок
			Область = Макет.ПолучитьОбласть("КарточкаОПС");
			ИмяЯчейкиОтчета = Область.Области.ГиперссылкаОПС.Имя;
			Область.Области.ГиперссылкаОПС.Имя = Формат(Сч,"ЧЦ=3; ЧВН=") + ИмяЯчейкиОтчета;
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ВыходнойДокумент.Вывести(Область);
			
			// начнем группировку
			ВыходнойДокумент.НачатьГруппуСтрок(, ГруппировкаРегламентированнаяФормаКарточкаПоОПС);
			ВыходнойДокумент.Вывести(ПустаяСтрока);
			ОбластьРегламентированнаяФормаКарточкаПоОПС = ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы, , ВыходнойДокумент.ВысотаТаблицы, );
			
			Если ФормироватьКарточкуОПС Тогда
				Если мПоказыватьЕСН Тогда
					ОтчетРегламентированнаяФормаКарточкаПоОПС.ФизЛицо = Физлицо;
					ОтчетРегламентированнаяФормаКарточкаПоОПС.НалоговыйПериод = Год(Месяц);
					ОтчетРегламентированнаяФормаКарточкаПоОПС.Организация = МестоРаботы.Организация;
					РегламентированнаяФормаКарточкаПоОПСОтчет = Новый ТабличныйДокумент;
					ОтчетРегламентированнаяФормаКарточкаПоОПС.СформироватьОтчет(РегламентированнаяФормаКарточкаПоОПСОтчет);
					
					// Для вывода отчетов в отдельных окнах
					ДанныеТабличныхДокументовОПС.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),РегламентированнаяФормаКарточкаПоОПСОтчет);
				Иначе
					
					ТиповыеОтчеты.УстановитьПараметр(ОтчетРегламентированнаяФормаКарточкаПоОПС.КомпоновщикНастроек, "НачалоПериода",НачалоГода(Месяц));
					ТиповыеОтчеты.УстановитьПараметр(ОтчетРегламентированнаяФормаКарточкаПоОПС.КомпоновщикНастроек, "КонецПериода", КонецГода(Месяц));
					ТиповыеОтчеты.ДобавитьОтбор(ОтчетРегламентированнаяФормаКарточкаПоОПС.КомпоновщикНастроек,      "Физлицо",    Физлицо);
					
					РегламентированнаяФормаКарточкаПоОПСОтчет = Новый ТабличныйДокумент;
					ОтчетРегламентированнаяФормаКарточкаПоОПС.СформироватьОтчет(РегламентированнаяФормаКарточкаПоОПСОтчет, Истина);
					// Для вывода отчетов в отдельных окнах
					ДанныеТабличныхДокументовОПС.Вставить(Формат(Сч,"ЧЦ=3; ЧВН="),РегламентированнаяФормаКарточкаПоОПСОтчет);
				КонецЕсли;
				
			КонецЕсли;
			
			Если мПоказыватьЕСН Тогда
				// таким способом размещаются отчеты без форматов строк
				ОбластьПрямоугольная = РегламентированнаяФормаКарточкаПоОПСОтчет.Область(1, 1, РегламентированнаяФормаКарточкаПоОПСОтчет.ВысотаТаблицы, РегламентированнаяФормаКарточкаПоОПСОтчет.ШиринаТаблицы);
				НачалоНовогоФорматаСтрок = ВыходнойДокумент.ВысотаТаблицы + 1;
				ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, , НачалоНовогоФорматаСтрок + РегламентированнаяФормаКарточкаПоОПСОтчет.ВысотаТаблицы - 1, ).СоздатьФорматСтрок();
				// назначим ширину колонок у новой области формата строк
				Для Счетчик = 1 По РегламентированнаяФормаКарточкаПоОПСОтчет.ШиринаТаблицы Цикл
					ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, Счетчик).ШиринаКолонки = РегламентированнаяФормаКарточкаПоОПСОтчет.Область(1, Счетчик).ШиринаКолонки;
				КонецЦикла;
				ВыходнойДокумент.ВставитьОбласть(ОбластьПрямоугольная, ВыходнойДокумент.Область(НачалоНовогоФорматаСтрок, 1));
			Иначе
				// таким способом размещаются отчеты с форматами строк
				ОбластьСтроки = РегламентированнаяФормаКарточкаПоОПСОтчет.Область(1, , РегламентированнаяФормаКарточкаПоОПСОтчет.ВысотаТаблицы, );
				ВыходнойДокумент.ВставитьОбласть(ОбластьСтроки, ВыходнойДокумент.Область(ВыходнойДокумент.ВысотаТаблицы + 1, , ВыходнойДокумент.ВысотаТаблицы + РегламентированнаяФормаКарточкаПоОПСОтчет.ВысотаТаблицы, ));
			КонецЕсли;
			
			ВыходнойДокумент.ЗакончитьГруппуСтрок();
			
			Сч = Сч +1;
			
		КонецЕсли;
	КонецЦикла;
	ВыходнойДокумент.ТолькоПросмотр = Истина;
	ВыходнойДокумент.Защита = Истина;
	
КонецПроцедуры

// получает сведения, которые требуются для отработки действий
// 
Процедура ПолучитьСведенияОНалогах()
	
	Перем СвойствоИнфоПоОрганизации;
	
	// получим сведения о местах работы
	ПолучитьСведенияОМестахРаботы();
	
	ДанныеПоНалогам.Очистить();
	Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
		// просто наполняем соответствие организациями работника
		ИнфоПоОрганизации = Новый Структура(
		"Наименование,
		|РасчетЕСН,
		|ОтражениеЗарплатыВРеглУчете", 
		МестоРаботы.ОрганизацияНаименование,
		Новый Массив,
		Новый Массив);
		ДанныеПоНалогам[МестоРаботы.Организация] = ИнфоПоОрганизации;
		
	КонецЦикла;
	
	Запрос = новый запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Сведения.ВидДокумента,
	|	Сведения.Организация,
	|	Сведения.Документ,
	|	Сведения.Представление
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасчетЕСНИсчисленныйЕСН.Ссылка КАК Документ,
	|		РасчетЕСНИсчисленныйЕСН.Ссылка.Организация КАК Организация,
	|		РасчетЕСНИсчисленныйЕСН.Ссылка.Представление КАК Представление,
	|		""РасчетЕСН"" КАК ВидДокумента
	|	ИЗ
	|		Документ.РасчетЕСН.ИсчисленныйЕСН КАК РасчетЕСНИсчисленныйЕСН
	|	ГДЕ
	|		РасчетЕСНИсчисленныйЕСН.ФизЛицо = &ФизЛицо
	|		И РасчетЕСНИсчисленныйЕСН.Ссылка.ПериодРегистрации = &Месяц
	|		И &ПоказыватьЕСН
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.Ссылка,
	|		РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.Ссылка.Организация,
	|		РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.Ссылка.Представление,
	|		""РасчетЕСН""
	|	ИЗ
	|		Документ.РасчетЕСН.ИсчисленныеСтраховыеВзносы КАК РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы
	|	ГДЕ
	|		РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ФизЛицо = &ФизЛицо
	|		И РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.Ссылка.ПериодРегистрации = &Месяц
	|		И (НЕ &ПоказыватьЕСН)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка,
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Организация,
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Представление,
	|		""ОтражениеЗарплатыВРеглУчете""
	|	ИЗ
	|		Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОсновныеНачисления
	|	ГДЕ
	|		ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Физлицо = &ФизЛицо
	|		И ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.ПериодРегистрации = &Месяц) КАК Сведения";
	
	Запрос.УстановитьПараметр("Месяц", Месяц);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	Запрос.УстановитьПараметр("ПоказыватьЕСН", мПоказыватьЕСН);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ДанныеПоНалогам[Выборка.Организация] = НеОпределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПоНалогам[Выборка.Организация].Свойство(Выборка.ВидДокумента, СвойствоИнфоПоОрганизации);
		СвойствоИнфоПоОрганизации.Добавить(Новый Структура("Документ, Представление", Выборка.Документ, Выборка.Представление));
	КонецЦикла;
	
КонецПроцедуры

// Формирует список непроведенных кадровых документов
Функция НеПроведенныеДокументыПоНалогам()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетЕСНИсчисленныйЕСН.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН.ИсчисленныйЕСН КАК РасчетЕСНИсчисленныйЕСН
	|ГДЕ
	|	РасчетЕСНИсчисленныйЕСН.ФизЛицо = &ФизЛицо
	|	И РасчетЕСНИсчисленныйЕСН.Ссылка.Проведен = &Проведен
	|	И РасчетЕСНИсчисленныйЕСН.Ссылка.ПериодРегистрации = &ПериодРегистрации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОсновныеНачисления
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.Проведен = &Проведен
	|	И ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.Ссылка.ПериодРегистрации = &ПериодРегистрации
	|	И ОтражениеЗарплатыВРеглУчетеОсновныеНачисления.ФизЛицо = &ФизЛицо";
	
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.УстановитьПараметр("ПериодРегистрации",Месяц);
	Запрос.УстановитьПараметр("Проведен", Ложь);
	
	Возврат Запрос.Выполнить() 
	
КонецФункции // НеПроведенныеДокументыПоНалогам()

Процедура НадписьРасчетЕСННажатие(Элемент)
	СписокМеню = Новый СписокЗначений;
	Для Каждого ИнфоПоОрганизации Из ДанныеПоНалогам Цикл
		Для Каждого Документ из ИнфоПоОрганизации.Значение.РасчетЕСН Цикл
			СписокМеню.Добавить(Документ.Документ, Документ.Представление);
		КонецЦикла;
		Если ИнфоПоОрганизации.Значение.РасчетЕСН.Количество() = 0 Тогда
			СписокМеню.Добавить(ИнфоПоОрганизации.Ключ, "Рассчитать налоги (взносы) с ФОТ " + ИнфоПоОрганизации.Значение.Наименование);
		КонецЕсли;
	КонецЦикла;
	Если СписокМеню.Количество() = 1 Тогда
		Значение = СписокМеню[0].Значение;
	Иначе
		ЗначениеВыбора = ВыбратьИзМеню(СписокМеню, ЭлементыФормы.НадписьРасчетЕСН);
		Если ЗначениеВыбора <> Неопределено Тогда
			Значение = ЗначениеВыбора.Значение;
		Иначе
			Возврат
		КонецЕсли; 
	КонецЕсли;
	Если ТипЗнч(Значение) = Тип("СправочникСсылка.Организации") Тогда
		// это создание документа Расчет ЕСН
		Для Каждого МестоРаботы Из МестаРаботыФизлица Цикл
			// регистрируем для каких подразделений уже создали документ
			ОбработанныеПодразделения = Новый Соответствие;
			Если МестоРаботы.Организация = Значение Тогда
				Если ОбработанныеПодразделения[МестоРаботы.Подразделение] = НеОпределено Тогда
					НовыйДокумент = Документы.РасчетЕСН.СоздатьДокумент();
					НовыйДокумент.Организация = МестоРаботы.Организация;
					ОбработанныеПодразделения[МестоРаботы.Подразделение] = МестоРаботы.Подразделение;
					НовыйДокумент.Дата = ТекущаяДата();
					НовыйДокумент.ПериодРегистрации = Месяц;
					НовыйДокумент.ПодразделениеОрганизации = МестоРаботы.Подразделение;
					Форма = НовыйДокумент.ПолучитьФорму(, ЭтаФорма);
					Форма.Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// это открытие существующего документа
		Форма = Значение.ПолучитьФорму(, ЭтаФорма);
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

// обработка гиперссылок - действия по открытию форм в отдельных окнах
//
Процедура НалогиВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Сред(Область.Имя,4) = "ГиперссылкаЕСН" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовЕСН.Получить(Лев(Область.Имя,3));
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Карточка по ЕСН (" + Физлицо + ")");
	ИначеЕсли Сред(Область.Имя,4) = "ГиперссылкаОПС" Тогда
		ВыводимыйТабличныйДокумент = ДанныеТабличныхДокументовОПС.Получить(Лев(Область.Имя,3));		
		ТабличныйДокументОтдельно(ВыводимыйТабличныйДокумент, "Карточка по страховым взносам (" + Физлицо + ")");
	КонецЕсли;
	
КонецПроцедуры

Процедура НалогиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	Если ТипЗнч(Расшифровка) = Тип("Соответствие") Тогда
		СтандартнаяОбработка = Ложь;
		Если Расшифровка.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		Если Расшифровка.Количество() = 1 Тогда
			Для Каждого ЭлементСоответствия Из Расшифровка Цикл
				ОткрытьЗначение(ЭлементСоответствия.Ключ);
				Возврат;
			КонецЦикла;
		КонецЕсли;
		СписокМеню = Новый СписокЗначений;
		Для Каждого ЭлементСоответствия Из Расшифровка Цикл
			СписокМеню.Добавить(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение);
		КонецЦикла;
		Результат = ВыбратьИзМеню(СписокМеню);
		Если Результат = НеОпределено Тогда
			Возврат;
		КонецЕсли;
		ОткрытьЗначение(Результат.Значение);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// МЕСЯЦ СТРОКОЙ

Процедура МесяцСтрокаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

Процедура МесяцСтрокаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

Процедура МесяцСтрокаПриИзменении(Элемент)
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, Месяц);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Месяц);
	ПриИзмененииМесяца();
	ОбновитьДанные();    
КонецПроцедуры

Процедура МесяцСтрокаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	Месяц = ДобавитьМесяц(Месяц, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Месяц);
	ПриИзмененииМесяца();
	ОбновитьДанные();    
КонецПроцедуры

Процедура МесяцСтрокаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура МесяцСтрокаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Месяц, ЭтаФорма);
	ПриИзмененииМесяца();
	ОбновитьДанные();    
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Формирует фрагмент выходного файла по работнику и выводит печатную форму СЗВ4.
//
// Параметры:
//		ДокументРезультат	-	ТабличныйДокумент - табличный документ, куда быдет выведена печатная форма
//		ДатаАктуальности	-	дата - дата, на которую формируются данные
//		ФизЛицо				-	Справочники.ФизическиеЛица - физлицо, на которого формируются данные
//		Организация			-	Справочники.Организации - организация, по которой формируются данные
//
Процедура ВыводНаПечатьПоФизЛицу(ДокументРезультат, ДатаАктуальности, ФизЛицо, Организация)
	
	Если ДатаАктуальности < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		ТипФормДокументов = "СЗВ-4-1";
		ТекстФайла = "";
		
		// Формирование фрагмента файла передачи В ПФР для печати формы "СЗВ-4-1"
		// Запрос по регистру ЗаписиОСтаже и СуммыВзносовДляСЗВ4
		Запрос = Новый запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	СуммыВзносовДляСЗВ4.НачисленоНаСтраховуюЧастьПФР,
		|	СуммыВзносовДляСЗВ4.НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносовДляСЗВ4.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносовДляСЗВ4
		|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносовДляСЗВ4.ФизЛицо
		|			И ЗаписиОСтаже.Год = СуммыВзносовДляСЗВ4.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносовДляСЗВ4.ОбособленноеПодразделение
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&ФизЛицо)
		|	И ЗаписиОСтаже.Год В(&Год)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&ОбособленноеПодразделение)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		Запрос.УстановитьПараметр("ФизЛицо" , ФизЛицо);
		Запрос.УстановитьПараметр("Год" , Год(ДатаАктуальности));
		Запрос.УстановитьПараметр("ОбособленноеПодразделение" , Организация);
		
		// Сбор данных и формирование фрагмента файла
		ВыборкаПоРаботникиОрганизации	= Запрос.Выполнить().Выбрать();
		Если ВыборкаПоРаботникиОрганизации.Следующий() Тогда
			
			ТипЗаписиИН = "ИН41";
			ДокументФорматЗаписей = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФорматЗаписей");
			ФорматЗаписиИН = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи(ТипЗаписиИН,ДокументФорматЗаписей);
			Фамилия		= "";
			Имя			= "";
			Отчество	= "";
			ОбщегоНазначения.ФамилияИнициалыФизЛица(ФизЛицо.Наименование,Фамилия,Имя,Отчество);
			
			// адрес для информирования
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ФизЛицо",					ФизЛицо);
			Запрос.УстановитьПараметр("ДатаАктуальности",			ДатаАктуальности);
			Запрос.УстановитьПараметр("ВидАдресаДляИнформирования",	Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица);
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	"","" + КонтактнаяИнформация.Поле1 + "","" + КонтактнаяИнформация.Поле2 + "","" + КонтактнаяИнформация.Поле3 + "","" + КонтактнаяИнформация.Поле4 + "","" + КонтактнаяИнформация.Поле5 + "","" + КонтактнаяИнформация.Поле6 + "","" + КонтактнаяИнформация.Поле7 + "","" + КонтактнаяИнформация.Поле8 + "","" + КонтактнаяИнформация.Поле9 КАК АдресИзРегистра
			|ИЗ
			|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
			|
			|ГДЕ
			|	КонтактнаяИнформация.Вид = &ВидАдресаДляИнформирования И
			|	КонтактнаяИнформация.Объект = &Физлицо";
			
			РезультатЗапроса	= Запрос.Выполнить();
			ВыборкаПоРаботнику	= РезультатЗапроса.Выбрать();
			АдресДляИнформирования = ?(ВыборкаПоРаботнику.Следующий(), ВыборкаПоРаботнику.АдресИзРегистра, "");
			Если СокрЛП(СтрЗаменить(АдресДляИнформирования, ",","")) <> "" Тогда
				АдресДляИнформирования = АдресДляИнформирования;
			Иначе	
				АдресДляИнформирования = "";
			КонецЕсли; 
			
			// Подготовка расчетных данных
			ЗаписьИН = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН);
			ЗаписьИН.ТипЗаписи							= ТипЗаписиИН;
			ЗаписьИН.НомерДокументаВПачке				= 1;
			ЗаписьИН.СтраховойНомер						= ФизЛицо.СтраховойНомерПФР;
			ЗаписьИН.Фамилия							= ВРЕГ(Фамилия);
			ЗаписьИН.Имя								= ВРЕГ(Имя);
			ЗаписьИН.Отчество							= ВРЕГ(Отчество);
			ЗаписьИН.РасчетныйПериодГод					= Год(ДатаАктуальности);
			ЗаписьИН.АдресДляИнформирования				= ВРЕГ(АдресДляИнформирования);
			ЗаписьИН.ДатаЗаполнения						= ДатаАктуальности;
			ЗаписьИН.НачисленоСтраховаяЧасть			= ВыборкаПоРаботникиОрганизации.НачисленоНаСтраховуюЧастьПФР;
			ЗаписьИН.НачисленоНакопительнаяЧасть		= ВыборкаПоРаботникиОрганизации.НачисленоНаНакопительнуюЧастьПФР;
			ЗаписьИН.ВременнаяНетрудоспособностьМесяцев	= Цел(ВыборкаПоРаботникиОрганизации.ДнейБолезни/30);
			ЗаписьИН.ВременнаяНетрудоспособностьДней	= ВыборкаПоРаботникиОрганизации.ДнейБолезни%30;
			ЗаписьИН.ОтпускМесяцев						= Цел(ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет/30);
			ЗаписьИН.ОтпускДней							= ВыборкаПоРаботникиОрганизации.ДнейОтпускаЗаСвойСчет%30;
			
			// Сбор данных о стаже
			ЧислоОсновныхЗаписейОСтаже = 0;					//Переменный для хранения строк о стаже работника (для формы СЗВ-4-1)
			СтрокиСтажРаботникаОрганизации = "";
			РаботникОрганизацииИмеетЛьготныйСтаж = ЛОЖЬ;	// Признак наличия у работника основания для льготного стажа
			Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")	Цикл
				
				ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже + 1; 
				
				//Берем пустую запись "Основная запись о стаже"
				ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("СТАЖ",ДокументФорматЗаписей);
				ЗаписьСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
				ЗаписьСТАЖ.ТипЗаписи = "СТАЖ";
				ЗаписьСТАЖ.НомерПериода = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
				ЗаписьСТАЖ.ДатаНачалаПериода = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
				ЗаписьСТАЖ.ДатаОкончанияПериода = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
				ЗаписьСТАЖ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
				ЗаписьСТАЖ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
				ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
				ЗаписьСТАЖ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
				ЗаписьСТАЖ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
				ЗаписьСТАЖ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
				ЗаписьСТАЖ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
				ЗаписьСТАЖ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
				ЗаписьСТАЖ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
				ЗаписьСТАЖ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
				ЗаписьСТАЖ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
				
				//Переменный для хранения дополнительных записей о стаже
				ЧислоДополнительныхЗаписейОСтаже = 0;
				СтрокиДополнительныеЗаписи = "";
				
				Пока ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")	Цикл
					
					//В дополнительной записи с номером 0 находится информация об основной записи
					Если ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					РаботникОрганизацииИмеетЛьготныйСтаж = Истина;
					ЧислоДополнительныхЗаписейОСтаже = ЧислоДополнительныхЗаписейОСтаже + 1;
					
					//Берем пустую запись "Запись о льготном стаже"
					ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЛГОТ",ДокументФорматЗаписей);
					ЗаписьЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
					ЗаписьЛГОТ.ТипЗаписи = "ЛГОТ";
					ЗаписьЛГОТ.НомерЗаписи = ВыборкаПоРаботникиОрганизации.НомерДополнительнойЗаписи;
					ЗаписьЛГОТ.ОсобыеУсловияТрудаКод = ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод;
					ЗаписьЛГОТ.КодПозицииСписка = ВыборкаПоРаботникиОрганизации.КодПозицииСпискаКод;
					ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод = ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод;
					ЗаписьЛГОТ.ПервыйПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ПервыйПараметрИсчисляемогоСтажа;
					ЗаписьЛГОТ.ВторойПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ВторойПараметрИсчисляемогоСтажа;
					ЗаписьЛГОТ.ТретийПараметрИсчисляемогоСтажа = ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа;
					ЗаписьЛГОТ.ОснованиеВыслугиЛетКод = ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод;
					ЗаписьЛГОТ.ПервыйПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ПервыйПараметрВыслугиЛет;
					ЗаписьЛГОТ.ВторойПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ВторойПараметрВыслугиЛет;
					ЗаписьЛГОТ.ТретийПараметрВыслугиЛет = ВыборкаПоРаботникиОрганизации.ТретийПараметрВыслугиЛет;
					ЗаписьЛГОТ.ТерриториальныеУсловияКод = ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод;
					
					//Сохраним запись ЛГОТ
					СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьЛГОТ, ФорматЗаписиЛГОТ);
					СтрокиДополнительныеЗаписи = СтрокиДополнительныеЗаписи + СтрокавФайл + Символы.ПС;
					
				КонецЦикла;// Выборка по дополнительным записям о стаже
				
				ЗаписьСТАЖ.ЧислоДополнительныхЗаписей = ЧислоДополнительныхЗаписейОСтаже;
				
				//Сохраним запись СТАЖ
				СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьСТАЖ,ФорматЗаписиСТАЖ);
				СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + СтрокавФайл + Символы.ПС;
				
				//Добавим записи ЛГОТ
				СтрокиСтажРаботникаОрганизации  = СтрокиСтажРаботникаОрганизации + ВРЕГ(СтрокиДополнительныеЗаписи);
				
			КонецЦикла;// Выборка по основным записям о стаже
			
			// Формирование файла
			ЗаписьИН.ЧислоОсновныхЗаписейОСтаже = ЧислоОсновныхЗаписейОСтаже;
			
			//	Добавляем в файл записи ИН41, СТАЖ И ЛГОТ
			СтрокавФайл = ПроцедурыПерсонифицированногоУчета.ПолучитьСтрокуПоДаннымЗаписи(ЗаписьИН,ФорматЗаписиИН);
			ТекстФайла	=	ТекстФайла	+	СтрокавФайл + Символы.ПС + ВРег(СтрокиСтажРаботникаОрганизации);
			
		КонецЕсли;
		
		// Вывод печатной формы
		Если ТекстФайла <> "" Тогда
			
			ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаАктуальности);
			
			Макет = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФормаСЗВ_4_1");
			ФорматЗаписиИН41 = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ИН41", ДокументФорматЗаписей);
			ФорматЗаписиСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("СТАЖ", ДокументФорматЗаписей);
			ФорматЗаписиЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьФорматЗаписи("ЛГОТ", ДокументФорматЗаписей);
			
			// Рабочие области макета
			ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
			ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
			ОбластьСтаж 	= Макет.ПолучитьОбласть("Стаж");
			
			// Заполнение данных шапки и подвала
			ОбластьШапка.Параметры.РегНомерПФР = Организация.РегистрационныйНомерПФР;
			ОбластьШапка.Параметры.НаименованиеОрганизации = Организация.Наименование;
			ОбластьШапка.Параметры.Год = Год(ДатаАктуальности);
			
			ОбластьПодвал.Параметры.ДолжностьРуководителя		 	= ОтветственныеЛица.РуководительДолжность;
			ОбластьПодвал.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
			ОбластьПодвал.Параметры.Дата				 			= ПроцедурыПерсонифицированногоУчета.ДатаВОтчет(ДатаАктуальности);
			
			Н=1;//Номер строки первой записи ИН41
			
			//Читаем запись ИН41
			СтрокаФайла = СтрПолучитьСтроку(ТекстФайла, Н);
			Н= Н + 1;
			ЗаписьИН41 = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиИН41);
			СтрОшибка = "";
			Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ИН41", ФорматЗаписиИН41, ЗаписьИН41, СтрОшибка) Тогда
				Возврат;
			КонецЕсли;	
			
			// Данные по физлицу
			ОбластьШапка.Параметры.СтраховойНомерПФР				= ЗаписьИН41.СтраховойНомер;
			ОбластьШапка.Параметры.ФИО							= "" + ЗаписьИН41.Фамилия + " " + ЗаписьИН41.Имя + " " + ЗаписьИН41.Отчество;
			ОбластьШапка.Параметры.Адрес						= ВРег(РегламентированнаяОтчетность.ПредставлениеАдреса(НРег(ЗаписьИН41.АдресДляИнформирования), 0, ""));
			ОбластьШапка.Параметры.НачисленоСтраховаяЧасть		= ЗаписьИН41.НачисленоСтраховаяЧасть;
			ОбластьШапка.Параметры.НачисленоНакопительнаяЧасть	= ЗаписьИН41.НачисленоНакопительнаяЧасть;
			ОбластьШапка.Параметры.НачисленоДополнительныйТариф	= ЗаписьИН41.НачисленоДополнительныйТариф;
			ОбластьШапка.Параметры.ДнейБолел					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ВременнаяНетрудоспособностьМесяцев,ЗаписьИН41.ВременнаяНетрудоспособностьДней);
			ОбластьШапка.Параметры.ДнейГулял					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПериодаБолезниОтпуска(ЗаписьИН41.ОтпускМесяцев, ЗаписьИН41.ОтпускДней);
			ДокументРезультат.Вывести(ОбластьШапка);
			
			//Цикл по основным записям о стаже
			Для НомерОснованойЗаписи = 1 по  ЗаписьИН41.ЧислоОсновныхЗаписейОСтаже цикл
				
				//Читаем запись СТАЖ
				СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
				Н= Н + 1;
				ЗаписьСТАЖ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиСТАЖ);
				СтрОшибка = "";
				Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "СТАЖ", ФорматЗаписиСТАЖ, ЗаписьСТАЖ, СтрОшибка) Тогда
					Возврат;
				КонецЕсли;	
				
				ОбластьСтаж.Параметры.НомерПериода				= НомерОснованойЗаписи;
				ОбластьСтаж.Параметры.ДатаНачалаПериода 		= ЗаписьСТАЖ.ДатаНачалаПериода;
				ОбластьСтаж.Параметры.ДатаОкончанияПериода		= ЗаписьСТАЖ.ДатаОкончанияПериода;
				ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьСТАЖ.ТерриториальныеУсловияКод;
				ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьСТАЖ.ОсобыеУсловияТрудаКод;
				ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьСТАЖ.КодПозицииСписка;
				
				// Представление параметров ИТС
				ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьСТАЖ.ОснованиеИсчисляемогоСтажаКод;
				ОбластьСтаж.Параметры.ДопИТС					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьСТАЖ);
				
				// Представление параметров выслуги лет
				ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьСТАЖ.ОснованиеВыслугиЛетКод;
				ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьСТАЖ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
				
				ДокументРезультат.Вывести(ОбластьСтаж);
				
				//Цикл по дополнительным записям о стаже
				Для НомерДополнительнойЗаписи = 1 по  ЗаписьСТАЖ.ЧислоДополнительныхЗаписей цикл
					
					//Читаем запись ЛГОТ
					СтрокаФайла = СтрПолучитьСтроку(ТекстФайла,Н);
					Н= Н + 1;
					ЗаписьЛГОТ = ПроцедурыПерсонифицированногоУчета.ПолучитьСтруктуруЗаписи(ФорматЗаписиЛГОТ);
					СтрОшибка = "";
					Если НЕ ПроцедурыПерсонифицированногоУчета.РазложитьСтрокуВСтруктуруЗаписи(СтрокаФайла, "ЛГОТ", ФорматЗаписиЛГОТ, ЗаписьЛГОТ, СтрОшибка) Тогда
						Прервать;
					КонецЕсли;	
					
					// Выводим запись ЛГОТ
					ОбластьСтаж.Параметры.НомерПериода				= "";
					ОбластьСтаж.Параметры.ДатаНачалаПериода			= "";
					ОбластьСтаж.Параметры.ДатаОкончанияПериода		= "";
					ОбластьСтаж.Параметры.ТерриториальныеУсловияКод	= ЗаписьЛГОТ.ТерриториальныеУсловияКод;
					ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод		= ЗаписьЛГОТ.ОсобыеУсловияТрудаКод;
					ОбластьСтаж.Параметры.КодПозицииСписка			= ЗаписьЛГОТ.КодПозицииСписка;
					
					// Представление параметров ИТС
					ОбластьСтаж.Параметры.ОснованиеИТС				= ЗаписьЛГОТ.ОснованиеИсчисляемогоСтажаКод;
					ОбластьСтаж.Параметры.ДопИТС					= ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
					
					// Представление параметров выслуги лет
					ОбластьСтаж.Параметры.ОснованиеВыслуги			= ЗаписьЛГОТ.ОснованиеВыслугиЛетКод;
					ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
					
					ДокументРезультат.Вывести(ОбластьСтаж);
					
				КонецЦикла;//Цикл по дополнительным записям о стаже	
				
			КонецЦикла;// По основным записям о стаже	
			
			// Подвал формы
			ДокументРезультат.Вывести(ОбластьПодвал);
			
		КонецЕсли;
		
	Иначе
		
		РезультатЗапросаПоЗаписямСтажа = Неопределено;
		Отказ = Ложь;
		
		Если ДатаАктуальности < '20100701' Тогда
			ОтчетныйПериод = '20100101';
		ИначеЕсли ДатаАктуальности < '20110101' Тогда
			ОтчетныйПериод = '20100701'
		Иначе
			ОтчетныйПериод = НачалоКвартала(ДатаАктуальности);
		КонецЕсли;
		
		СтруктураДопДанных = Новый Структура;
		ОтветственныеЛица = РегламентированнаяОтчетность.ОтветственныеЛицаОрганизаций(Организация, ДатаАктуальности);
		СтруктураДопДанных.Вставить("Ссылка", Неопределено);
		СтруктураДопДанных.Вставить("ТипСведенийСЗВ", Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
		СтруктураДопДанных.Вставить("Дата", ДатаАктуальности);
		СтруктураДопДанных.Вставить("ОтчетныйПериод", ОтчетныйПериод); 
		СтруктураДопДанных.Вставить("Год", Год(ДатаАктуальности));
		СтруктураДопДанных.Вставить("НомерПачки", "00000");
		СтруктураДопДанных.Вставить("НачисленоСтраховая", 0);
		СтруктураДопДанных.Вставить("УплаченоСтраховая", 0);
		СтруктураДопДанных.Вставить("НачисленоНакопительная", 0);
		СтруктураДопДанных.Вставить("УплаченоНакопительная", 0);
		СтруктураДопДанных.Вставить("КатегорияЗастрахованныхЛиц", Перечисления.КатегорииЗастрахованныхЛицПФР.НР);
		СтруктураДопДанных.Вставить("ТипФормДокументов", "СЗВ-6-1");
		СтруктураДопДанных.Вставить("ФорматФайла", Перечисления.ФорматФайлаПФР.Версия07);
		СтруктураДопДанных.Вставить("РуководительДолжность", ОтветственныеЛица.РуководительДолжность);
		СтруктураДопДанных.Вставить("Руководитель", ОтветственныеЛица.Руководитель);
		СтруктураОрганизации = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Организация,"НаименованиеПолное, НаименованиеСокращенное, ИНН, КПП, КодПоОКПО, РегистрационныйНомерПФР, ЮрФизЛицо, ОГРН, НаименованиеОКОПФ");
		СтруктураДопДанных.Вставить("ОКПО", СтруктураОрганизации.КодПоОКПО);
		СтруктураДопДанных.Вставить("ОрганизацияРегистрационныйНомерПФР", СтруктураОрганизации.РегистрационныйНомерПФР);
		СтруктураДопДанных.Вставить("ОрганизацияЮрФизЛицо", СтруктураОрганизации.ЮрФизЛицо);
		СтруктураДопДанных.Вставить("ОрганизацияОГРН", СтруктураОрганизации.ОГРН);
		СтруктураДопДанных.Вставить("ОрганизацияНаименованиеОКОПФ", СтруктураОрганизации.НаименованиеОКОПФ);
		СтруктураДопДанных.Вставить("ОрганизацияИНН", СтруктураОрганизации.ИНН);
		СтруктураДопДанных.Вставить("ОрганизацияКПП", СтруктураОрганизации.КПП);
		СтруктураДопДанных.Вставить("ОрганизацияНаименованиеПолное", СтруктураОрганизации.НаименованиеПолное);
		СтруктураДопДанных.Вставить("ОрганизацияНаименованиеСокращенное", СтруктураОрганизации.НаименованиеСокращенное);
		
		ТаблицаФизлиц = Новый ТаблицаЗначений;
		ТаблицаФизлиц.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		ТаблицаФизлиц.Колонки.Добавить("ФизЛицо", Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		ТаблицаФизлиц.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТаблицаФизлиц.Колонки.Добавить("КатегорияЗастрахованныхЛиц", Новый ОписаниеТипов("ПеречислениеСсылка.КатегорииЗастрахованныхЛицПФР"));
		ТаблицаФизлиц.Колонки.Добавить("ОтчетныйПериод", Новый ОписаниеТипов("Дата"));
		
		НомерСтроки = 1;
		Для каждого ЗначениеПеречисления Из Перечисления.КатегорииЗастрахованныхЛицПФР Цикл 		
			СтрокаПроверки = ТаблицаФизлиц.Добавить();
			СтрокаПроверки.ФизЛицо = ФизЛицо;
			СтрокаПроверки.Организация = Организация;
			СтрокаПроверки.ОтчетныйПериод = ОтчетныйПериод;
			СтрокаПроверки.КатегорияЗастрахованныхЛиц = ЗначениеПеречисления;
			СтрокаПроверки.НомерСтроки = НомерСтроки;
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
			
		ПроцедурыПерсонифицированногоУчета.СЗВ6_ПроверитьНаборЗаписейОСтаже("НаборЗаписей", ТаблицаФизлиц, РезультатЗапросаПоЗаписямСтажа);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.НомерСтроки,
		|	ЗаписиОСтаже.Организация,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОтчетныйПериод,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловияСтавка КАК ПараметрТерриториальныхУсловий,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
		|ПОМЕСТИТЬ ВТФизЛица
		|ИЗ
		|	&ТаблицаФизлиц КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.НомерОсновнойЗаписи ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	КатегорияЗастрахованныхЛиц";
		Запрос.УстановитьПараметр("ТаблицаФизлиц", РезультатЗапросаПоЗаписямСтажа.Выгрузить());
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.КодПозицииСписка,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	ЗаписиОСтаже.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ЗаписиОСтаже.ФизЛицо.Наименование КАК Наименование
		|ИЗ
		|	ВТФизЛица КАК ЗаписиОСтаже";
		ТаблицаВзносов = ПроцедурыПерсонифицированногоУчета.ДанныеОСтажеИВзносах(ДатаАктуальности, ОтчетныйПериод, Организация, Запрос.Выполнить().Выгрузить()); 
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.АдресДляИнформирования,
		|	ЗаписиОСтаже.Фамилия,
		|	ЗаписиОСтаже.Имя,
		|	ЗаписиОСтаже.Отчество,
		|	ЗаписиОСтаже.НачисленоСтраховая,
		|	ЗаписиОСтаже.НачисленоНакопительная,
		|	ЗаписиОСтаже.УплаченоСтраховая,
		|	ЗаписиОСтаже.УплаченоНакопительная,
		|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	ЗаписиОСтаже.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ПОМЕСТИТЬ ВТВзносы
		|ИЗ
		|	&ТаблицаФизлиц КАК ЗаписиОСтаже
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	КатегорияЗастрахованныхЛиц";
		Запрос.УстановитьПараметр("ТаблицаФизлиц", ТаблицаВзносов);
		Запрос.Выполнить();

		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.НомерСтроки КАК НомерСтроки,
		|	ЗаписиОСтаже.Организация,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОтчетныйПериод,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	Взносы.АдресДляИнформирования,
		|	Взносы.Фамилия,
		|	Взносы.Имя,
		|	Взносы.Отчество,
		|	Взносы.СтраховойНомерПФР,
		|	Взносы.НачисленоСтраховая,
		|	Взносы.НачисленоНакопительная,
		|	Взносы.УплаченоСтраховая,
		|	Взносы.УплаченоНакопительная,
		|	Взносы.Фамилия + "" "" + Взносы.Имя + "" "" + Взносы.Отчество КАК ФизЛицоНаименование
		|ИЗ
		|	ВТФизЛица КАК ЗаписиОСтаже
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВзносы КАК Взносы
		|		ПО ЗаписиОСтаже.ФизЛицо = Взносы.ФизЛицо
		|			И ЗаписиОСтаже.КатегорияЗастрахованныхЛиц = Взносы.КатегорияЗастрахованныхЛиц
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";
		РезультатЗапросаПоЗаписямСтажа = Запрос.Выполнить();
		
		ТекстФайла = ПроцедурыПерсонифицированногоУчета.ФайлСведенийОВзносахИСтаже(СтруктураДопДанных, РезультатЗапросаПоЗаписямСтажа, 1, "", Отказ);
		ДеревоПФР = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстФайла);
		
		Если ДеревоПФР = Неопределено Тогда
			Возврат  
		КонецЕсли;
		ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
		Если ДеревоПФР = Неопределено Тогда
			Возврат  
		КонецЕсли;
		
		СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
		Если СтрокаДереваПачкаВходящихДокументов <> Неопределено Тогда
			
			СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ", "Имя");
			Если СтрокаДереваВходящаяОпись <> Неопределено Тогда
				
				// Формы СЗВ-6-хх
				ДокументРезультат = Новый ТабличныйДокумент;
				Макет = Документы.СведенияОТрудовомСтажеИЗаработкеСЗВ4.ПолучитьМакет("ФормаСЗВ_6_1");
				
				// Рабочие области макета
				ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
				ОбластьДокумент = Макет.ПолучитьОбласть("Строка");
				ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
				ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
				
				ИнформацияОПачке = ПроцедурыПерсонифицированногоУчета.ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, СтруктураДопДанных);
				
				// копируем данные описи в остальные документы
				ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,ИнформацияОПачке);
				ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры,ИнформацияОПачке);
				
				//Цикл по документам файла
				ВыводилиДанные = Ложь;
				НомерДокумента = 0;
				Для Каждого СтрокаДереваСЗВ6 Из СтрокаДереваПачкаВходящихДокументов.Строки Цикл
					
					//Читаем запись документа
					Если СтрокаДереваСЗВ6.Имя <> "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ" Тогда
						Продолжить;
					КонецЕсли;
					
					Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
						ОбластьСтаж.Параметры[СчПараметр] = ""
					КонецЦикла;
					
					Если Не ВыводилиДанные Тогда
						ВыводилиДанные = Истина;
					Иначе 
						ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
					КонецЕсли;
					ОбластьШапка.Параметры.КодКатегории = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСЗВ6, "КодКатегории");
					ДокументРезультат.Вывести(ОбластьШапка);
				
					// Данные по физлицу
					ОбластьДокумент.Параметры.СтраховойНомерПФР = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваСЗВ6, "СтраховойНомер");
					СтрокаДереваФИО = СтрокаДереваСЗВ6.Строки.Найти("ФИО");
					Если СтрокаДереваФИО <> Неопределено Тогда
						ОбластьДокумент.Параметры.ФИО = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Фамилия") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Имя") + " " + ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваФИО, "Отчество");
					Иначе
						ОбластьДокумент.Параметры.ФИО = "";
					КонецЕсли;
					
					СтрокаДереваАдресЗЛ = СтрокаДереваСЗВ6.Строки.Найти("АдресЗЛ");
					Если СтрокаДереваАдресЗЛ <> Неопределено Тогда
						ОбластьДокумент.Параметры.Адрес = ВРег(ПроцедурыПерсонифицированногоУчета.ПредставлениеАдресадляПФР(СтрокаДереваАдресЗЛ));
						Если ОбластьДокумент.Параметры.Адрес = " 0" Тогда
							ОбластьДокумент.Параметры.Адрес = "";
						КонецЕсли;
					Иначе
						ОбластьДокумент.Параметры.Адрес = "";
					КонецЕсли;
					
					СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаСтраховую");
					Если СтрокаДереваВзносы <> Неопределено Тогда
						ОбластьДокумент.Параметры.НачисленоСтраховая = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
						ОбластьДокумент.Параметры.УплаченоСтраховая = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
					Иначе
						ОбластьДокумент.Параметры.НачисленоСтраховая = "";
						ОбластьДокумент.Параметры.УплаченоСтраховая = "";
					КонецЕсли;
					
					СтрокаДереваВзносы = СтрокаДереваСЗВ6.Строки.Найти("СуммаВзносовНаНакопительную");
					Если СтрокаДереваВзносы <> Неопределено Тогда
						ОбластьДокумент.Параметры.НачисленоНакопительная = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2");
						ОбластьДокумент.Параметры.УплаченоНакопительная = Формат(Число(ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2");
					Иначе
						ОбластьДокумент.Параметры.НачисленоНакопительная = "";
						ОбластьДокумент.Параметры.УплаченоНакопительная = "";
					КонецЕсли;
					
					ДокументРезультат.Вывести(ОбластьДокумент);
					НомерДокумента = 0;
					
					//Цикл по основным записям о стаже
					СтрокиДереваСтажевыйПериод = СтрокаДереваСЗВ6.Строки.НайтиСтроки(Новый Структура("Имя","СтажевыйПериод"));
					Если СтрокиДереваСтажевыйПериод.Количество() > 0 Тогда
						Для Каждого СтрокаДереваПериодРаботы Из СтрокиДереваСтажевыйПериод Цикл
							
							НомерДокумента = НомерДокумента + 1;
							
							Для СчПараметр = 0 По ОбластьСтаж.Параметры.Количество() - 1 Цикл
								ОбластьСтаж.Параметры[СчПараметр] = ""
							КонецЦикла;
							ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
							ОбластьСтаж.Параметры.ДатаНачалаПериода 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаНачалаПериода");
							ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваПериодРаботы, "ДатаКонцаПериода");
							СтрокиДереваОсобенностиУчета = СтрокаДереваПериодРаботы.Строки.НайтиСтроки(Новый Структура("Имя","ЛьготныйСтаж"));
							Если СтрокиДереваОсобенностиУчета.Количество() > 0 Тогда
								Для Каждого СтрокаДереваОсобенностиУчета Из СтрокиДереваОсобенностиУчета Цикл
									
									Если ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобенностиУчета, "НомерСтроки") > "1" Тогда
										ОбластьСтаж.Параметры.НомерСтроки 			= "";
										ОбластьСтаж.Параметры.ДатаНачалаПериода 	= "";
										ОбластьСтаж.Параметры.ДатаОкончанияПериода 	= "";
									КонецЕсли;
									
									СтрокаДереваОсобенностиУчета = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобенностиУчета");
									
									ЗаписьТУ = Новый Структура("Коэффициент,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа",0,0,0);
									
									СтрокаДереваТерриториальныеУсловия = СтрокаДереваОсобенностиУчета.Строки.Найти("ТерриториальныеУсловия");
									Если СтрокаДереваТерриториальныеУсловия <> Неопределено Тогда
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "ОснованиеТУ");
										ЗаписьТУ.Вставить("Коэффициент", ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваТерриториальныеУсловия, "Коэффициент"));
									Иначе
										ОбластьСтаж.Параметры.ТерриториальныеУсловияКод = "";
										ЗаписьТУ.Вставить("Коэффициент", 0);
									КонецЕсли;
									
									СтрокаДереваОсобыеУсловияТруда = СтрокаДереваОсобенностиУчета.Строки.Найти("ОсобыеУсловияТруда");
									Если СтрокаДереваОсобыеУсловияТруда <> Неопределено Тогда
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ОснованиеОУТ");
										ОбластьСтаж.Параметры.КодПозицииСписка = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваОсобыеУсловияТруда, "ПозицияСписка");
									Иначе
										ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод = "";
										ОбластьСтаж.Параметры.КодПозицииСписка = "";
									КонецЕсли;
									
									ЗаписьЛгот = Новый Структура("ОснованиеИсчисляемогоСтажаКод,ПервыйПараметрИсчисляемогоСтажа,ВторойПараметрИсчисляемогоСтажа,ТретийПараметрИсчисляемогоСтажа","",0,0,"");
									
									СтрокаДереваДекретДети = СтрокаДереваОсобенностиУчета.Строки.Найти("ДекретДети");
									Если СтрокаДереваДекретДети <> Неопределено Тогда
										ЗаписьЛгот.Вставить("ТретийПараметрИсчисляемогоСтажа", СтрокаДереваДекретДети.Значение);
									КонецЕсли;
									
									СтрокаДереваИсчисляемыйСтаж = СтрокаДереваОсобенностиУчета.Строки.Найти("ИсчисляемыйСтаж");
									Если СтрокаДереваИсчисляемыйСтаж <> Неопределено Тогда
										
										// Представление параметров ИТС
										ОбластьСтаж.Параметры.ОснованиеИТС = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваИсчисляемыйСтаж, "ОснованиеИС");
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваИсчисляемыйСтаж.Строки.Найти("ВыработкаКалендарная");
										ПервыйПараметрИсчисляемогоСтажа = 0;
										ВторойПараметрИсчисляемогоСтажа = 0;
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрИсчисляемогоСтажа = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										КонецЕсли;
										
										ЗаписьЛгот.Вставить("ОснованиеИсчисляемогоСтажаКод", ОбластьСтаж.Параметры.ОснованиеИТС);
										
										Если ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОсобыеУсловияТрудаКод) Или ЗначениеЗаполнено(ОбластьСтаж.Параметры.ОснованиеИТС) Тогда
											ЗаписьЛгот.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьЛгот.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										Иначе
											ЗаписьТУ.Вставить("ПервыйПараметрИсчисляемогоСтажа", Число(ПервыйПараметрИсчисляемогоСтажа));
											ЗаписьТУ.Вставить("ВторойПараметрИсчисляемогоСтажа", Число(ВторойПараметрИсчисляемогоСтажа));
										КонецЕсли;
										
									КонецЕсли;
									
									ОбластьСтаж.Параметры.ДопИТС = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(ЗаписьЛГОТ);
									ОбластьСтаж.Параметры.ДопТУ = ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровТерриториальныхУсловий(ЗаписьТУ);
									
									СтрокаДереваВыслугаЛет = СтрокаДереваОсобенностиУчета.Строки.Найти("ВыслугаЛет");
									Если СтрокаДереваВыслугаЛет <> Неопределено Тогда
										
										// Представление параметров выслуги лет
										ОбластьСтаж.Параметры.ОснованиеВыслуги = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ОснованиеВЛ");
										
										
										СтрокаДереваВыработкаВЧасах = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаВчасах");
										СтрокаДереваВыработкаКалендарная = СтрокаДереваВыслугаЛет.Строки.Найти("ВыработкаКалендарная");
										
										Если СтрокаДереваВыработкаВЧасах <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Часы");
											ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаВЧасах, "Минуты");
										ИначеЕсли СтрокаДереваВыработкаКалендарная <> Неопределено Тогда
											ПервыйПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеМесяцы");
											ВторойПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыработкаКалендарная, "ВсеДни");
										Иначе
											ПервыйПараметрВыслугиЛет = "";
											ВторойПараметрВыслугиЛет = "";
										КонецЕсли;
										ТретийПараметрВыслугиЛет = ПроцедурыПерсонифицированногоУчета.ИзвлечьДанное(СтрокаДереваВыслугаЛет, "ДоляСтавки");
										ЗаписьЛгот = Новый Структура;
										ЗаписьЛгот.Вставить("ОснованиеВыслугиЛетКод",ОбластьСтаж.Параметры.ОснованиеВыслуги);
										ЗаписьЛгот.Вставить("ПервыйПараметрВыслугиЛет",Число(ПервыйПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ВторойПараметрВыслугиЛет",Число(ВторойПараметрВыслугиЛет));
										ЗаписьЛгот.Вставить("ТретийПараметрВыслугиЛет",Число(ТретийПараметрВыслугиЛет));
										
										
										ПроцедурыПерсонифицированногоУчета.ПредставлениеПараметровПенсииЗаВыслугуЛет(ЗаписьЛГОТ, ОбластьСтаж.Параметры.ДопВЛ, ОбластьСтаж.Параметры.ДопВЛСтавка);
										
									КонецЕсли;
									
									ДокументРезультат.Вывести(ОбластьСтаж);
									
								КонецЦикла;
							Иначе
								ДокументРезультат.Вывести(ОбластьСтаж);
							КонецЕсли;
							
						КонецЦикла;
					Иначе
						НомерДокумента = НомерДокумента + 1;
						ОбластьСтаж.Параметры.НомерСтроки = НомерДокумента;
						ДокументРезультат.Вывести(ОбластьСтаж);
					КонецЕсли; // Записи о стаже
					
					// Подвал формы на одного физлица
					ДокументРезультат.Вывести(ОбластьПодвал);
					
				КонецЦикла; // по документам
				
			КонецЕсли;
			
		КонецЕсли;
	
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьДанныеОФизлице" И Параметр = Физлицо Тогда
		Физлицо = Физлицо;
		мДанныеРасчетыЗарплатаСформированы = Ложь;
		мДанныеПлановыеДанныеСформированы = Ложь;
		мДанныеНалоговаяКарточкаСформированы = Ложь;
		мДанныеКадровыеДанныеСформированы = Ложь;
		мДанныеОсновноеСформированы = Ложь;
		мДанныеНалогиСформированы = Ложь;
		мДанныеКарточкаПоЕСНСформированы = Ложь;
		мДанныеКарточкаПоОПССформированы = Ложь;
		ОбновитьДанные();
	КонецЕсли;
	// Вставить содержимое обработчика.
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ

мДанныеРасчетыЗарплатаСформированы = Ложь;
мДанныеПлановыеДанныеСформированы = Ложь;
мДанныеНалоговаяКарточкаСформированы = Ложь;
мДанныеКадровыеДанныеСформированы = Ложь;
мДанныеОсновноеСформированы = Ложь;
мДанныеНалогиСформированы = Ложь;
мДанныеКарточкаПоЕСНСформированы = Ложь;
мДанныеКарточкаПоОПССформированы = Ложь;

ПрежнийМесяц = '00010101';

МестаРаботыФизлица = Новый Массив;
МестаРаботыИСостоянияФизлица = Новый Массив;
ДанныеПоНачислениям = Новый Соответствие;
ДанныеПоПлановымРасчетам = Новый Соответствие;
КадровыеДанные = Новый Соответствие;
КадровыеДанныеПриемНаРаботу = Новый Соответствие;
ДанныеПоНалогам = Новый Соответствие;

// соответствия табличных документов
ДанныеТабличныхДокументов1НДФЛ = Новый Соответствие;
ДанныеТабличныхДокументовАнализНачислений = Новый Соответствие;
ДанныеТабличныхДокументовРасчетныеЛистки = Новый Соответствие;
ДанныеТабличныхДокументовТ13 = Новый Соответствие;
ДанныеТабличныхДокументовТ3 = Новый Соответствие;
ДанныеТабличныхДокументовСЗВ4 = Новый Соответствие;
ДанныеТабличныхДокументовТ2 = Новый Соответствие;
ДанныеТабличныхДокументовЕСН = Новый Соответствие;
ДанныеТабличныхДокументовОПС = Новый Соответствие;
