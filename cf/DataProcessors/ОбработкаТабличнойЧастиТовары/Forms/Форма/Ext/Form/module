Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит метаданные документа, чтобы не считывать его при каждом обращении.
Перем мМетаданныеДокумента;
Перем мИмяТабличнойЧастиДокумента Экспорт;

// Хранят признаки наличия реквизитов табличной части. Заполняются до открытия формы обработки.
Перем мЕстьНДС          Экспорт;
Перем мЕстьЦенаВРознице Экспорт;

// Хранит признак того, надо ли показывать в форме суммовые реквизиты. Заполняется при открытии формы.
Перем мЕстьСумма;

// Хранит форму документа. Устанавливается до открытия формы обработки.
Перем мФормаДокумента Экспорт;

// Хранит способ заполнения цен (по ценам номенклатуры, по ценам контрагента, по розничным ценам).
// Устанавливается до открытия формы обработки.
Перем мСпособЗаполненияЦен Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбработкаПодбора(ТабличнаяЧасть, ДокументОбъект, ДокументДобавления, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем ТаблицаПодбора, Номенклатура, ЕдиницаИзмерения, Количество, Цена;

	МетаданныеДокумента = ДокументОбъект.Метаданные();

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("Валюта",              ВалютаЦены);
	ЗначениеВыбора.Свойство("ТаблицаПодбора"  ,    ТаблицаПодбора);

	Для каждого СтрокаТаблицы из ТаблицаПодбора Цикл

		Номенклатура     = СтрокаТаблицы.Номенклатура;
		Количество       = СтрокаТаблицы.Количество;
		Цена             = СтрокаТаблицы.Цена;

		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		//  Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура",     Номенклатура);
		СтруктураОтбора.Вставить("Цена",             Цена);
		
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
		Если СтрокаТабличнойЧасти <> Неопределено Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		Иначе

			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
			СтрокаТабличнойЧасти.Количество       = Количество;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ЕдиницаИзмерения", МетаданныеДокумента, "Товары") Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Номенклатура.БазоваяЕдиницаИзмерения;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Коэффициент", МетаданныеДокумента, "Товары") Тогда
				СтрокаТабличнойЧасти.Коэффициент = 1;
			КонецЕсли;
			Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерГТД", МетаданныеДокумента, "Товары") Тогда
				СтрокаТабличнойЧасти.НомерГТД            = СтрокаТаблицы.НомерГТД;
				СтрокаТабличнойЧасти.СтранаПроисхождения = СтрокаТаблицы.СтранаПроисхождения;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

			Если ЭлементыФормы.Товары.Колонки["Валюта"].Видимость Тогда
				СтрокаТабличнойЧасти.Валюта = ВалютаЦены;
				ВалютаДокумента = ВалютаЦены;
			ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
				ВалютаДокумента    = мВалютаРегламентированногоУчета;
				КурсДокумента      = 1;
				КратностьДокумента = 1
			Иначе
				ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
				КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
				КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, КурсДокумента,
			                                         КратностьДокумента, ДокументОбъект.Дата);

			Если ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", ДокументОбъект.Метаданные()) Тогда
				Если  ОбщегоНазначения.ЕстьРеквизитДокумента("УчитыватьНДС", ДокументДобавления.Метаданные()) Тогда
					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					                                                 СпособЗаполненияЦен,
					                                                 ДокументДобавления.СуммаВключаетНДС,
					                                                 ДокументОбъект.УчитыватьНДС,
					                                                 ДокументОбъект.СуммаВключаетНДС,
					                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				Иначе
					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
					                                                 СпособЗаполненияЦен,
					                                                 ДокументОбъект.ТипЦен.ЦенаВключаетНДС,
					                                                 ДокументОбъект.УчитыватьНДС,
					                                                 ДокументОбъект.СуммаВключаетНДС,
					                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				КонецЕсли;
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				                                                 СпособЗаполненияЦен,
				                                                 Истина,
				                                                 Истина,
				                                                 Истина,);
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;

		КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено
	КонецЦикла;

КонецПроцедуры // ОбработкаПодбора()

// Производит расчет суммы, суммы НДС, колонки Всего, цены в рознице
// при изменении связанных реквизитов.
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части.
//
Процедура РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти)

	Колонки = ЭлементыФормы.Товары.Колонки;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	Если Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // РассчитатьЦеныИСуммы()

// Распределяет заданную сумму по выбранной колонке 
//
// Параметры: 
//  ИмяКолонки         - cтрока, имя колонки, по которой распределяется сумма ("Количество" или "Сумма");
//  СуммаРаспределения - число, распределяемая сумма
//
//
Процедура РаспределитьСуммуПоКолонке(ИмяКолонки, СуммаРаспределения)
	
	// Посчитаем общую сумму помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОбщаяСумма = 0 Тогда
		Предупреждение("Общая сумма помеченных строк нулевая!
		|Распределение невозможно.",, Заголовок);
		Возврат;
		
	КонецЕсли; 
		
	// Теперь  распределяем
	СтрокаМаксимальнойСуммы = Неопределено; // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; // Значение максимальной суммы.
	НепогашеннаяСумма       = СуммаРаспределения;
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Дельта = СуммаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки] / ОбщаяСумма;
			
			// Если Дельта по модулю оказалась больше, чем осталось погасить
			Если Дельта < 0 Тогда
				Дельта = Макс(НепогашеннаяСумма, Дельта)
			Иначе
				Дельта = Мин(НепогашеннаяСумма, Дельта)
			КонецЕсли; 

			// Проверим текущую сумму на максимум.
			Если СтрокаТабличнойЧасти.Сумма > МаксимальнаяСумма  Тогда
				МаксимальнаяСумма       = СтрокаТабличнойЧасти.Сумма;
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Увеличиваем значение и запоминаем старое.
			ТекущаяСумма             = СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма + Дельта;
			
			// Остаток нераспределенной суммы надо уменьшать на дельту реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);

			// Пересчитываем связанные реквизиты.
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;  
		
	// Если что-то осталось, кидаем на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0
	   И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы, ДокументОбъект);
		Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры// РаспределитьСуммуПоКолонке()

// Процедуры выполняет необходимые действия при установке нового значения в поле
// выбора действия.
//
// Параметры:
//  ТекущийЭлементДействий - число, индекс устанавливаемого действия в списке действий
//
Процедура ПриИзмененииТекущегоДействия(ТекущийЭлементДействий)

	// Назначим новое действие кнопке "Выполнить". Само действие возьмем из списка значений.
	ЭлементыФормы.КнопкаВыполнить.УстановитьДействие("Нажатие", СписокДействий[ТекущийЭлементДействий].Значение);

	// Будем считать, что по умолчанию никакие реквизиты не нужны.
	ЭлементыФормы.ПолеВводаВариантаЗначения.  Видимость = Ложь;

	ДействиеНеВыполнено = Истина;

	// Заполним связанные поля и реквизиты
	МассивНужныхТипов = Новый Массив();
	Если СписокДействий[ТекущийЭлементДействий].Представление = "Добавить из документа" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае должны выбираться только документы с таб. частью "Товары",
		// в которой есть реквизиты "Номенклатура", "Количество мест", "Количество", "Единица измерения".
		Для Каждого Документ Из Метаданные.Документы Цикл

			Если Документ.ТабличныеЧасти.Найти("Товары") <> Неопределено Тогда

				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Номенклатура",     Документ, "Товары")
				   И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Количество",       Документ, "Товары") Тогда
					МассивНужныхТипов.Добавить(Тип("ДокументСсылка." + Документ.Имя));
				КонецЕсли;

			КонецЕсли;

		КонецЦикла;

		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(МассивНужныхТипов[0]);

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить цены по типу" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатуры"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		Если ОбщегоНазначения.ЕстьРеквизитДокумента ("ТипЦен", мМетаданныеДокумента) Тогда
			// Надо заполнить поле ввода значением нужного типа.
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ДокументОбъект.ТипЦен;
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Заполнить цены в рознице по типу" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно задавать ссылку на справочник.
		МассивНужныхТипов.Добавить(Тип("СправочникСсылка.ТипыЦенНоменклатуры"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента ("Склад", мМетаданныеДокумента) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ДокументОбъект.Склад.ТипЦенРозничнойТорговли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента ("СкладПолучатель", мМетаданныеДокумента) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ДокументОбъект.СкладПолучатель.ТипЦенРозничнойТорговли;
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Распределить сумму по суммам"
		  Или СписокДействий[ТекущийЭлементДействий].Представление = "Распределить сумму по количеству"Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно задавать только число.
		КвалификаторЧисла = Новый КвалификаторыЧисла(15, 2);
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Изменить цены на %" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно задавать только число.
		КвалификаторЧисла = Новый КвалификаторыЧисла(5, 2);
		МассивНужныхТипов.Добавить(Тип("Число"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = 
		             Новый ОписаниеТипов(МассивНужныхТипов, КвалификаторЧисла);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = 0;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить цены до" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления порядков округления.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа
		Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ДокументОбъект.ТипЦен.ПорядокОкругления;
		Иначе
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = Перечисления.ПорядкиОкругления.Окр0_01;
		КонецЕсли;

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Округлить цены в рознице до" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления порядков округления.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.ПорядкиОкругления"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		Если ОбщегоНазначения.ЕстьРеквизитДокумента ("Склад", мМетаданныеДокумента) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ДокументОбъект.Склад.ТипЦенРозничнойТорговли.ПорядокОкругления;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента ("СкладПолучатель", мМетаданныеДокумента) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = ДокументОбъект.СкладПолучатель.ТипЦенРозничнойТорговли.ПорядокОкругления;
		КонецЕсли;
		
	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить ставку НДС" Тогда
		
		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		МассивНужныхТипов.Добавить(Тип("ПеречислениеСсылка.СтавкиНДС"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);
		
		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить номер ГТД" Тогда

		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		МассивНужныхТипов.Добавить(Тип("СправочникСсылка.НомераГТД"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = Справочники.НомераГТД.ПустаяСсылка();

	ИначеЕсли СписокДействий[ТекущийЭлементДействий].Представление = "Установить страну происхождения" Тогда

		ЭлементыФормы.ПолеВводаВариантаЗначения.Видимость = Истина;

		// В этом случае можно выбирать только из перечисления ставок НДС.
		МассивНужныхТипов.Добавить(Тип("СправочникСсылка.КлассификаторСтранМира"));
		ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа = Новый ОписаниеТипов(МассивНужныхТипов);

		// Надо заполнить поле ввода значением нужного типа.
		ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = Справочники.КлассификаторСтранМира.ПустаяСсылка();

	КонецЕсли;

КонецПроцедуры // ПриИзмененииТекущегоДействия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием"формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Если не установлено значения объекта редактируемого документа,
	// то форму обработки открывать не нужно.
	Если ДокументОбъект = Неопределено Тогда

		Отказ = Истина;
		Предупреждение("Не задан документ для обработки! 
		               |Эта обработка может вызывается только из формы документа.", , Заголовок);
		Возврат;

	КонецЕсли;

	//Товары.ЗагрузитьКолонку(Товары.ВыгрузитьКолонку("НомерСтроки"), "НомерСтрокиДокумента");

КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии"формы.
//
Процедура ПриОткрытии()

	// Заполним модульные переменные
	мМетаданныеДокумента = ДокументОбъект.Метаданные();

	// Определим какие колонки табличной части надо показывать
	// на основании того что есть в табличной части обработки 
	// и какие колонки есть в табличной части документа.
	// В дальнейшем с невидимыми колонками табличной части обработки работать не будем,
	// их как бы нет.
	// Для начала сделаем невидимыми все колонки, которых нет в табличном поле формы документа.
	
	Если НЕ ЗначениеЗаполнено(мИмяТабличнойЧастиДокумента) Тогда
		мИмяТабличнойЧастиДокумента = "Товары";
	КонецЕсли;
	
	Колонки = ЭлементыФормы.Товары.Колонки;
	Для каждого Колонка Из Колонки Цикл

		Колонки[Колонка.Имя].Видимость = НЕ ПустаяСтрока(мФормаДокумента.ЭлементыФормы[мИмяТабличнойЧастиДокумента].Колонки.Найти(Колонка.Имя)); 

	КонецЦикла;
	
	Колонки.КоличествоМест.Видимость = Ложь;
	Колонки.Единица.Видимость        = Ложь;
	Колонки.Коэффициент.Видимость    = Ложь;

	// Есть ли в документе сумма определим по видимости колонки
	мЕстьСумма = Колонки["СуммаНДС"] .Видимость;
	
	// Теперь погасим колонки, исходя из методических соображений.
	Колонки["СтавкаНДС"].Видимость = мЕстьНДС И Колонки["СтавкаНДС"].Видимость;
	Колонки["СуммаНДС"] .Видимость = мЕстьНДС И Колонки["СуммаНДС"] .Видимость;

	Колонки["ЦенаВРознице"].Видимость = мЕстьЦенаВРознице И Колонки["ЦенаВРознице"].Видимость;
	Если Колонки["ЦенаВРознице"].Видимость Тогда
		Колонки.ЦенаВРознице.ТекстШапки = "Розн. цена ("
		                                + мВалютаРегламентированногоУчета
		                                + ")";
	КонецЕсли;

	Колонки["ПроцентРозничнойНаценки"].Видимость = мЕстьЦенаВРознице И Колонки["ПроцентРозничнойНаценки"].Видимость;

	// Пометка видна всегда
	Колонки["Пометка"].Видимость = Истина;

	// Теперь заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();

	СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеДобавитьИзДокумента"), "Добавить из документа");

	Если Колонки["Цена"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеИзменитьЦену"), "Изменить цены на %");
	КонецЕсли; 

	Если Колонки["Цена"].Видимость
	   И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", мМетаданныеДокумента) Тогда 

		// Тип цен устанавливается как значение по умолчанию
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу"), "Установить цены по типу");
	КонецЕсли; 

	Если Колонки["Сумма"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам")    , "Распределить сумму по суммам");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству"), "Распределить сумму по количеству");
	КонецЕсли; 

	Если Колонки["Цена"].Видимость И ОбщегоНазначения.ЕстьРеквизитДокумента("ТипЦен", мМетаданныеДокумента) Тогда 

		// По типу цен определяется флаг "Округлять в большую сторону"
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦену"), "Округлить цены до");
	КонецЕсли; 

	Если Колонки["ЦенаВРознице"].Видимость Тогда 
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу"), "Заполнить цены в рознице по типу");
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице")      , "Округлить цены в рознице до"     );
	КонецЕсли; 

	Если Колонки["СтавкаНДС"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСтавкуНДС"), "Установить ставку НДС");
	КонецЕсли; 

	Если Колонки["НомерГТД"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьНомерГТД"), "Установить номер ГТД");
	КонецЕсли; 

	Если Колонки["СтранаПроисхождения"].Видимость Тогда
		СписокДействий.Добавить(Новый Действие("КнопкаВыполнитьНажатиеУстановитьСтрануПроисхождения"), "Установить страну происхождения");
	КонецЕсли; 

	// Заполним список действий для выбора из выпадающего списка
	ЭлементыФормы.ПолеВыбораДействия.СписокВыбора = СписокДействий;

	// Попробуем вспомнить последнее выбранное значение из списка действий
	ТекущееДействие = ВосстановитьЗначение("ОбработкаТабличнойЧастиТекущееДействие");

	Если (ТипЗнч(ТекущееДействие) <> Тип("Действие")) ИЛИ (СписокДействий.НайтиПоЗначению(ТекущееДействие) = Неопределено) Тогда

		// Нет сохраненного значения или сохранено значение, отсутствующее в списке
		ТекущееДействие = СписокДействий[0].Значение;

	КонецЕсли; 
	ЭлементыФормы.ПолеВыбораДействия.Значение = ТекущееДействие;

	// Установим элементы формы в зависимости от выбранного действия
	ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ТекущееДействие)));

	// Надо установить пометку
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 

	ЭлементыФормы.ВсегоНДС.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ЭлементыФормы.Всего.ГоризонтальноеПоложение    = ГоризонтальноеПоложение.Лево;

	ДействиеНеВыполнено = Истина;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// При изменении данных обновим суммы в подвале.
	// Вначале посчитаем сумму.
	Если мЕстьСумма Тогда

		ЭлементыФормы.Всего       .Видимость = Истина;
		ЭлементыФормы.НадписьВсего.Видимость = Истина;
		
		СуммаДокумента = Товары.Итог("Сумма");
	
		Если мЕстьНДС
		   И ДокументОбъект.УчитыватьНДС 
		   И (Не ДокументОбъект.СуммаВключаетНДС) Тогда
			СуммаДокумента = СуммаДокумента + Товары.Итог("СуммаНДС");
		КонецЕсли; 

		ЭлементыФормы.Всего.Значение    = СуммаДокумента;

		Если Не ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (руб):";
		ИначеЕсли НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
		Иначе
			ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
		КонецЕсли;
	Иначе
		
		ЭлементыФормы.Всего       .Видимость = Ложь;
		ЭлементыФормы.НадписьВсего.Видимость = Ложь;
		
	КонецЕсли; 

	Если мЕстьНДС И ДокументОбъект.УчитыватьНДС Тогда

		ЭлементыФормы.ВсегоНДС       .Видимость = Истина;
		ЭлементыФормы.НадписьВсегоНДС.Видимость = Истина;
		
		ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС");
		Если ДокументОбъект.СуммаВключаетНДС Тогда
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
		Иначе
			ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
		КонецЕсли;
	Иначе

		ЭлементыФормы.ВсегоНДС       .Видимость = Ложь;
		ЭлементыФормы.НадписьВсегоНДС.Видимость = Ложь;
		
	КонецЕсли; 

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗакрытием" формы.
// Если действие не было выполнено задает вопрос пользователю.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ДействиеНеВыполнено Тогда
		Если Вопрос("Выбранное действие не было выполнено! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "УстановитьФлажки" командной панели
// табличного поля "Товары", устанавливает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеУстановитьФлажки(Кнопка)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Истина;
	КонецЦикла; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СнятьФлажки" командной панели
// табличного поля "Товары", снимает флажки во всех строках 
// табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеСнятьФлажки(Кнопка)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.Пометка = Ложь;
	КонецЦикла; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "НачалоВыбора" поля ввода
// "ПолеВводаВариантаЗначения". Процедура предлагает выбор пользователю из 
// списка разрешенных для текущего действия типов объектов (документов, справочников)
// после выбора типа объекта процедура выбора стандартным образом с 
// использованием системных механизмов.
// Выбранное значение обрабатывается стандартным образом.
//
Процедура ПолеВводаВариантаЗначенияНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Заполним список возможных типов для выбора
	СписокВидов  = Новый СписокЗначений;
	МассивТипов  = ЭлементыФормы.ПолеВводаВариантаЗначения.ОграничениеТипа.Типы();
	РазмерСписка = МассивТипов.Количество();

	Если РазмерСписка = 1 Тогда


	ИначеЕсли РазмерСписка > 1 Тогда

		// В случае одного элемента выбирать нечего, нужное значение мы установили при выборе действия,
		// поэтому этот случай здесь не обрабатывается.
		
		Для каждого ЭлементМассива Из МассивТипов Цикл

			Если Документы.ТипВсеСсылки().СодержитТип(ЭлементМассива)
			 ИЛИ Справочники.ТипВсеСсылки().СодержитТип(ЭлементМассива) Тогда
				ПустоеЗначение = Новый(ЭлементМассива);
				ОбъектОписанияМетаданного = ПустоеЗначение.Метаданные();
				СписокВидов.Добавить(ЭлементМассива, ОбъектОписанияМетаданного.Представление());
			КонецЕсли;
		КонецЦикла;

		СписокВидов.СортироватьПоПредставлению();

		НачальноеЗначение = Неопределено;
		Если ТипЗнч(ВариантЗначения) = Тип("СписокЗначений") Тогда
			НачальноеЗначение = ЭлементыФормы.ПолеВводаВариантаЗначения.Значение.ТипЗначения.Типы()[0];
		КонецЕсли;
		НачальноеЗначениеСписка = СписокВидов.НайтиПоЗначению(НачальноеЗначение);
		ВыбранныйЭлемент = ВыбратьИзСписка(СписокВидов, Элемент, НачальноеЗначениеСписка);

		Если ВыбранныйЭлемент = Неопределено Тогда // отказ от выбора
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;

		Если Документы.ТипВсеСсылки().СодержитТип(ВыбранныйЭлемент.Значение) Тогда
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение = Новый СписокЗначений;
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ВыбранныйЭлемент.Значение);
			ЭлементыФормы.ПолеВводаВариантаЗначения.Значение.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		Иначе
			Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(ВыбранныйЭлемент.Значение);
		КонецЕсли;

	Иначе // размер списка = 0

		// Не понятно что выбирать, это ошибка.
		Предупреждение("Не заданы возможные типы значения!"); 
		СтандартнаяОбработка = Ложь;
		Возврат;

	КонецЕсли; 

КонецПроцедуры // ПолеВводаВариантаЗначенияНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик добавляет в табличную часть обработки позиции
// табличной части выбранного документа.
//
Процедура КнопкаВыполнитьНажатиеДобавитьИзДокумента(Элемент)

	Если ТипЗнч(ВариантЗначения) = Тип("СписокЗначений") Тогда
		Если ВариантЗначения.Количество() = 0 Тогда
			Предупреждение("Не выбраны документы!");
		Иначе
			Для Каждого ДокументДобавления Из ВариантЗначения Цикл
				
				// Должен быть выбран документ, из которого добавляем
				Если НЕ ЗначениеЗаполнено(ДокументДобавления.Значение) Тогда
					
					Предупреждение("Не выбран документ, из которого надо добавить строки табличной части!", , 
					               Заголовок);
					ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
					Продолжить;
					
				КонецЕсли;

				МетаданныеВариантаЗначения = ДокументДобавления.Значение.Метаданные();

				// Для добавления в табличную часть обработки воспользуемся стандартной процедурой обработки подбора.
				СтруктураПодбора = Новый Структура();
				СтруктураПодбора.Вставить("СпособЗаполненияЦен", мСпособЗаполненияЦен);

				Если ОбщегоНазначения.ЕстьРеквизитДокумента ("ТипЦен", мМетаданныеДокумента) Тогда
					СтруктураПодбора.Вставить("ТипЦен", ДокументОбъект.ТипЦен);
				КонецЕсли;

				Если (ОбщегоНазначения.ЕстьРеквизитДокумента ("ВалютаДокумента", мМетаданныеДокумента)) ИЛИ (ЭлементыФормы.Товары.Колонки["Валюта"].Видимость) Тогда
					Если ОбщегоНазначения.ЕстьРеквизитДокумента ("ВалютаДокумента", МетаданныеВариантаЗначения) Тогда
						СтруктураПодбора.Вставить("Валюта", ДокументДобавления.Значение.ВалютаДокумента);
					Иначе
						СтруктураПодбора.Вставить("Валюта", мВалютаРегламентированногоУчета);
					КонецЕсли;
				Иначе
					СтруктураПодбора.Вставить("Валюта", мВалютаРегламентированногоУчета);
				КонецЕсли;
				
				СтруктураПодбора.Вставить("Команда", "ДобавитьИзДокумента");

				ТаблицаПодбора   = ДокументДобавления.Значение.Товары.Выгрузить();
				ТаблицаДокумента = ДокументОбъект.Товары.Выгрузить();

				// Некоторые колонки должны быть в таблице подбора вне
				МассивОбязательныхКолонок = Новый Массив;
				МассивОбязательныхКолонок.Добавить("Номенклатура");
				МассивОбязательныхКолонок.Добавить("Цена");
				МассивОбязательныхКолонок.Добавить("Количество");
				МассивОбязательныхКолонок.Добавить("НомерГТД");
				МассивОбязательныхКолонок.Добавить("СтранаПроисхождения");

				Для каждого ИмяКолонки Из МассивОбязательныхКолонок Цикл
					Если ТаблицаПодбора.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
						Если ИмяКолонки = "Цена" ИЛИ ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "КоличествоМест" Тогда
							ТаблицаПодбора.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"));
						Иначе
							ТаблицаПодбора.Колонки.Добавить(ИмяКолонки);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Если каких-то колонок нет в документе-источнике, но
				// есть в документе-приемнике, добавим их в таблицу
				Для Каждого Реквизит из ТаблицаДокумента.Колонки Цикл
					Если НЕ ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(Реквизит.Имя, МетаданныеВариантаЗначения, "Товары") 
						  И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента(Реквизит.Имя, мМетаданныеДокумента, "Товары")
						  И (ТаблицаПодбора.Колонки.Найти(Реквизит.Имя) = Неопределено) Тогда
						ТаблицаПодбора.Колонки.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;

				СтруктураПодбора.Вставить("ТаблицаПодбора", ТаблицаПодбора);

				ОбработкаПодбора(Товары, ДокументОбъект, ДокументДобавления.Значение, СтруктураПодбора);

				ДействиеНеВыполнено = Ложь;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
			Предупреждение("Не выбраны документы!");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КнопкаВыполнитьНажатиеДобавитьИзДокумента()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает цены в соответствии с выбранным типом цен.
//
Процедура КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу(Элемент)
	
	// Должен быть выбран тип цен.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран тип цен!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли;

	// Надо получить цены нужного типа. Цены достанем запросом.

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен", ВариантЗначения);
	Запрос.УстановитьПараметр("ДатаЦен", ДокументОбъект.Дата);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В (&МассивНоменклатуры) И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка
	|
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда

				Если ЭлементыФормы.Товары.Колонки["Валюта"].Видимость Тогда
					ВалютаДокумента = СтрокаТабличнойЧасти.Валюта;
				ИначеЕсли Не ОбщегоНазначения.ЕстьРеквизитДокумента("ВалютаДокумента", мМетаданныеДокумента) Тогда
					ВалютаДокумента = мВалютаРегламентированногоУчета;
					КурсДокумента      = 1;
					КратностьДокумента = 1
				Иначе
					ВалютаДокумента    = ДокументОбъект.ВалютаДокумента;
					КурсДокумента      = ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
					КратностьДокумента = ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета);
				КонецЕсли;

				// Нашли базовую цену.
				// Пересчитываем ее в валюту типа цен документа и единицу в строке табличной части.
				ЦенаБазовая = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта,
				                                           ВалютаДокумента, , , ДокументОбъект.Дата);
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли;

			СтрокаТабличнойЧасти.Цена = ЦенаБазовая;

			// Пересчет связанных колонок
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);

		КонецЕсли;

	КонецЦикла;

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьЦенуПоТипу()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает цены в рознице в соответствии с выбранным типом цен.
//
Процедура КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу(Элемент)
	
	// Должен быть выбран тип цен.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран тип цен!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли;
	
	// Надо получить цены нужного типа. Цены достанем запросом.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура", Товары.ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен"      , ВариантЗначения);
	Запрос.УстановитьПараметр("ДатаЦен"     , ДокументОбъект.Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаХраненияОстатков
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ДатаЦен, Номенклатура В(&Номенклатура) И ТипЦен =&ТипЦен) 
	|	             КАК ЦеныНоменклатурыСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();

			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда

				// Нашли базовую цену.
				// Пересчитываем ее в рубли
				ЦенаБазовая = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта,
				                                    мВалютаРегламентированногоУчета,
													1,1, ДокументОбъект.Дата);
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли; 

			// Не забудем округлить.
			СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ОкруглитьЦену(ЦенаБазовая, ВариантЗначения.ПорядокОкругления, ВариантЗначения.ОкруглятьВБольшуюСторону);

			Если ЭлементыФормы.Товары.Колонки["СуммаВРознице"].Видимость Тогда
				Если ЭлементыФормы.Товары.Колонки["Количество"].Видимость Тогда
					СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
												  

		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеЗаполнитьЦенуВРозницеПоТипу()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик распределяет заданную сумму по строкам табличной части пропорционально их суммам.
//
Процедура КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам(Элемент)
	
	// Сумма должна быть не нулевой.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не задана сумма для распределения!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли;

	РаспределитьСуммуПоКолонке("Сумма", ВариантЗначения);
	
	ДействиеНеВыполнено = Ложь;
	
КонецПроцедуры // КнопкаВыполнитьНажатиеРаспределитьСуммуПоСуммам()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик распределяет заданную сумму по строкам табличной части 
// пропорционально значению колонки "Количество".
//
Процедура КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству(Элемент)
	
	// Сумма должна быть не нулевой.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не задана сумма для распределения!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли;

	РаспределитьСуммуПоКолонке("Количество", ВариантЗначения);
	
	ДействиеНеВыполнено = Ложь;
	
КонецПроцедуры // КнопкаВыполнитьНажатиеРаспределитьСуммуПоКоличеству()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик округляет цену до выбранного порядка.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦену(Элемент)
	
	// Должна быть выбран порядок округления.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Если ДокументОбъект.ТипЦен.Метаданные().Имя = "ТипыЦенНоменклатуры" Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ВариантЗначения,
				                                          ДокументОбъект.ТипЦен.ОкруглятьВБольшуюСторону);
			Иначе
				СтрокаТабличнойЧасти.Цена = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, ВариантЗначения,
				                                          Истина);
			КонецЕсли;

			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик округляет цену в рознице до выбранного порядка.
//
Процедура КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице(Элемент)
	
	// Должна быть выбран порядок округления.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран порядок округления!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Если ОбщегоНазначения.ЕстьРеквизитДокумента ("Склад", мМетаданныеДокумента) Тогда
				ОкруглятьВБольшуюСторону = ДокументОбъект.Склад.ТипЦенРозничнойТорговли.ОкруглятьВБольшуюСторону;
			ИначеЕсли ОбщегоНазначения.ЕстьРеквизитДокумента ("СкладПолучатель", мМетаданныеДокумента) Тогда
				ОкруглятьВБольшуюСторону = ДокументОбъект.СкладПолучатель.ТипЦенРозничнойТорговли.ОкруглятьВБольшуюСторону;
			КонецЕсли;
            			
			СтрокаТабличнойЧасти.ЦенаВРознице = Ценообразование.ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаВРознице, ВариантЗначения, ОкруглятьВБольшуюСторону);
			
			Если ЭлементыФормы.Товары.Колонки["СуммаВРознице"].Видимость Тогда
				Если ЭлементыФормы.Товары.Колонки["Количество"].Видимость Тогда
					СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеОкруглитьЦенуВРознице()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик изменяет цену на заданный процент.
//
Процедура КнопкаВыполнитьНажатиеИзменитьЦену(Элемент)
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ВариантЗначения) / 100;
			
			// пересчитаем связанные реквизиты.
			РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеИзменитьЦену()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранную ставку НДС по всем помеченным позициям табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСтавкуНДС(Элемент)
	
	// Должна быть выбрана новая ставка НДС.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана новая ставка НДС!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.СтавкаНДС = ВариантЗначения;
			Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			КонецЕсли;
			
		КонецЕсли; 
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьСтавкуНДС()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранный номер ГТД по всем помеченным позициям табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьНомерГТД(Элемент)
	
	// Должна быть выбрана новая ставка НДС.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбран новый номер ГТД!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначенияЗначенияЗначения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.НомерГТД = ВариантЗначения;

		КонецЕсли;
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьНомерГТД()

// Процедура - обработчик события "Нажатие" кнопки "Выполнить".
// Действия по нажатию кнопки назначаются при выборе 
// текущего действия в процедуре ПриИзмененииТекущегоДействия().
// Данный обработчик устанавливает выбранную страну происхождения по всем помеченным позициям табличной части.
//
Процедура КнопкаВыполнитьНажатиеУстановитьСтрануПроисхождения(Элемент)
	
	// Должна быть выбрана новая ставка НДС.
	Если НЕ ЗначениеЗаполнено(ВариантЗначения) Тогда
		
		Предупреждение("Не выбрана новая страна происхождения!", , Заголовок);
		ТекущийЭлемент = ЭлементыФормы.ПолеВводаВариантаЗначения;
		Возврат;
		
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.СтранаПроисхождения = ВариантЗначения;

		КонецЕсли;
	КонецЦикла; 

	ДействиеНеВыполнено = Ложь;

КонецПроцедуры // КнопкаВыполнитьНажатиеУстановитьСтрануПроисхождения()

// Процедура - обработчик события "ПриИзменении" поля выбора текущего действия.
//
Процедура ПолеВыбораДействияПриИзменении(Элемент)

	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(Элемент.Значение) <> Неопределено Тогда
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(Элемент.Значение)));
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ОК".
//
Процедура КнопкаОКНажатие(Элемент)

	Если ДействиеНеВыполнено Тогда
		Если Вопрос("Выбранное действие не было выполнено! Продолжить?", 
		            РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		Иначе
			ДействиеНеВыполнено = Ложь;
		КонецЕсли;
	КонецЕсли;
						

	// Действие выполняется, если еще не закрыли документ
	Если ДокументОбъект <> Неопределено Тогда

		МетаданныеДокумента = ДокументОбъект.Метаданные();

		// Выгрузим ТЧ обработки в таблицу значений для дальнейших преобразований
		ТаблицаОбработки = Товары.Выгрузить();

		// ТЧ документа также выгрузим в таблицу значений ради удобства работы с колонками
		ТаблицаДокумента = ДокументОбъект.Товары.Выгрузить();

		// Создадим структуру, которая будет содержать имена колонок присутствующих в 
		// документе, но не присутствующих в ТЧ обработки
		СтруктураНовыхКолонок = Новый Структура;
		
		//Удалим из таблицы не отмеченные строки
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Пометка",	Ложь);
		НайденныеСтроки = ТаблицаОбработки.НайтиСтроки(СтруктураОтбора);
		Для Каждого Строка Из НайденныеСтроки Цикл
			ТаблицаОбработки.Удалить(Строка);
		КонецЦикла;

		// Идем по строкам табличной части и обрабатываем строки, в которых заполнен
		// реквизит НомерДокумента. Эти строки были выгружены из документа.
		Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСтрокиДокумента) Тогда

				// Если номер строки заполнен, находим соответствующую строку в табличной 
				// части документа
				СтрокаТаблицыДокумента = ТаблицаДокумента[СтрокаТаблицы.НомерСтрокиДокумента - 1];

				// Во избежание проблем с подчиненными реквизитами, строка ТЧ обработки 
				// считается соответствующей строке ТЧ документа, только в том случае,если
				// номенклатура не изменилась. Если номенклатура в строке изменилась, 
				// считается, что это новая строка.
				Если СтрокаТаблицыДокумента.Номенклатура = СтрокаТаблицы.Номенклатура Тогда

					// Теперь пройдем по колонкам таблицы документа
					Для каждого КолонкаТаблицыДокумента Из ТаблицаДокумента.Колонки Цикл

						// Если колонка есть в таблице документа, но ее нет в таблице, выгруженной
						// из обработке и нет в структуре новых колонок, тогда добавим ее в таблицу
						// и в структуру
						Если ТаблицаОбработки.Колонки.Найти(КолонкаТаблицыДокумента.Имя) = Неопределено
						   И НЕ СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
							ТаблицаОбработки.Колонки.Добавить(КолонкаТаблицыДокумента.Имя);
							СтруктураНовыхКолонок.Вставить(КолонкаТаблицыДокумента.Имя);
						КонецЕсли;

						// Если колонка есть в структуре новых колонок, заполняем ее значение 
						// из таблицы документа
						Если СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
							СтрокаТаблицы[КолонкаТаблицыДокумента.Имя] = СтрокаТаблицыДокумента[КолонкаТаблицыДокумента.Имя];
						КонецЕсли;

						
					КонецЦикла;
				КонецЕсли;
			Иначе
				
				// Для документов реализации надо заполнить способ списания товаров значением
				// по умолчанию, если он не был заполнен ранее
				Если ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СпособСписанияОстаткаТоваров", МетаданныеДокумента, "Товары") Тогда
					Если ТаблицаОбработки.Колонки.Найти("СпособСписанияОстаткаТоваров") = Неопределено Тогда
						ТаблицаОбработки.Колонки.Добавить("СпособСписанияОстаткаТоваров");
					КонецЕсли;
					Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.СпособСписанияОстаткаТоваров) Тогда
						ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТаблицы, ДокументОбъект);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;

		// Загрузим полученную таблицу в документ
		ДокументОбъект.Товары.Загрузить(ТаблицаОбработки);
		
		Если мМетаданныеДокумента.Имя = "ОтчетОРозничныхПродажах" ИЛИ
			мМетаданныеДокумента.Имя = "ОприходованиеТоваров" Тогда
			ДокументОбъект.ЗаполнитьСчетаУчетаВТабЧасти(ДокументОбъект.Товары, Истина);
		ИначеЕсли мМетаданныеДокумента.Имя = "ПоступлениеТоваровУслуг" Тогда
			ДокументОбъект.ЗаполнитьСчетаУчетаВТабЧасти(ДокументОбъект.Товары, "Товары", Истина, Истина);
		Иначе			
			// Попытаемся установить счета учета.
			Попытка
				ДокументОбъект.ЗаполнитьСчетаУчетаВТабЧасти(ДокументОбъект.Товары, "Товары", Истина);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли; 

	// Сохраним текущее выбранное значение в списке действий.
	СохранитьЗначение("ОбработкаТабличнойЧастиТекущееДействие", 
	         ЭлементыФормы.ПолеВыбораДействия.Значение);
	
	// Можно закрывать форму.
	Закрыть();
	
КонецПроцедуры // КнопкаОКНажатие()

// Процедура - обработчик события "Очистка" поля выбора действия.
// Запрещает очистку поля.
//
Процедура ПолеВыбораДействияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ Товары

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	ТекущаяСтрока = ЭлементыФормы.Товары.ТекущаяСтрока;
	// Новые строки будем по умолчанию помечать.
	Если НоваяСтрока Тогда
		ТекущаяСтрока.Пометка = Истина;
	КонецЕсли; 

КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                    + ?(мЕстьНДС И ДокументОбъект.СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(ЭлементыФормы.Товары.Колонки, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	
	Если мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов Тогда
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         ДокументОбъект.Контрагент, ДокументОбъект.ТипЦен, ДокументОбъект.ДоговорКонтрагента, ДокументОбъект.Дата,ДокументОбъект.ВалютаДокумента, ДокументОбъект.УчитыватьНДС,ДокументОбъект.СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры  Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
	ИначеЕсли мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда 
		Если мЕстьЦенаВРознице Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуРозничнуюЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, ДокументОбъект.Склад, мВалютаРегламентированногоУчета);
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	КонецЕсли;

	ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	МетаданныеДокумента = ДокументОбъект.Метаданные();
    СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки["СуммаВРознице"].Видимость Тогда
		Если ЭлементыФормы.Товары.Колонки["ЦенаВРознице"].Видимость Тогда
			СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	РассчитатьЦеныИСуммы(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыЦенаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
    СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	Если ЭлементыФормы.Товары.Колонки["СуммаВРознице"].Видимость Тогда
		Если ЭлементыФормы.Товары.Колонки["Количество"].Видимость Тогда
			СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыЦенаВРозницеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

	// Рассчитать реквизиты табличной части.
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	Если ЭлементыФормы.Товары.Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	КонецЕсли;

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

Процедура ПолеВводаВариантаЗначенияОчистка(Элемент, СтандартнаяОбработка)

	// Установим элементы формы в зависимости от выбранного действия
	Если СписокДействий.НайтиПоЗначению(ЭлементыФормы.ПолеВыбораДействия.Значение) <> Неопределено Тогда
		ПриИзмененииТекущегоДействия(СписокДействий.Индекс(СписокДействий.НайтиПоЗначению(ЭлементыФормы.ПолеВыбораДействия.Значение)));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

мМожноМенятьЦенуВДокументе      = Истина;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

