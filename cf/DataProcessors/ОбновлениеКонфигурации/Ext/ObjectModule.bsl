//////////////////////////////////////////////////////////////////////////////// 
// ПЕРЕМЕННЫЕ МОДУЛЯ 
// 

// Каталоги файлов
Перем КаталогФайловОбновления;
Перем КаталогВременныхФайловОбновления;

// Проверка и получение обновлений
Перем ИмяФайлаСпискаШаблонов;
Перем ИмяZipФайлаСпискаШаблонов;
Перем СписокФайловДляПолучения  Экспорт;

// Диск ИТС
Перем ДискИТС Экспорт;
Перем КаталогОбновленияКонфигурацииИТС;
Перем КаталогОбновленияИТС;

// Доступные обновление
Перем ДоступноеОбновление Экспорт;		// Обновление самой последней версии
Перем ДоступныеОбновления Экспорт;		// Список инкрементальных обновлений
Перем ПоследняяВерсияКонфигурации Экспорт;

// Служебные
Перем ИмяФайлаОписанияОбновления;
Перем ИмяФайлаПорядкаОбновления;
Перем СобытиеЖурналаРегистрации;

// Обновление конфигурации
Перем ИмяФайлаПрограммы;

// Реклама
Перем ФайлАрхиваРекламы;
Перем ФайлРекламы;
Перем ИмяКаталогаРекламы;
Перем ПутьКФайлуАрхиваРекламы;

//////////////////////////////////////////////////////////////////////////////// 
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ
// 

#Если Клиент Тогда
// Инициализация экспортных переменных.
//
Процедура ИнициализироватьПеременные() Экспорт

	// Определение каталога временных файлов.
	КаталогФайловОбновления = КаталогLocalAppData() + "1C\1Cv8Update\"; 
	КаталогВременныхФайловОбновления = КаталогВременныхФайлов() + "1Cv8Update." + 
		Формат(ТекущаяДата(), "ДФ=ггММддЧЧммсс") + "\";
	
	// Определение каталога рекламы.
	ИмяКаталогаРекламы = КаталогФайловОбновления + "adv\";
	ПутьКФайлуАрхиваРекламы = ИмяКаталогаРекламы + ФайлАрхиваРекламы;
	
	// ------------------------
	
КонецПроцедуры 

Процедура ВосстановитьНастройкиОбновления() Экспорт
	
	// Значения по умолчанию.
	КодЗадачиПланировщика = 0;
	ЗапомнитьПарольСервераОбновлений = Истина;
	ДатаВремяОбновления = ДобавитьДни(НачалоДня(ТекущаяДата()), 1);
	ПовторныйЗапуск = Ложь;
	НуженФайлОбновления = Истина;
	РежимОбновления = ?(ОпределитьЭтаИнформационнаяБазаФайловая(), 0, 2);
	
	НастройкиОбновления = ВосстановитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления");
	Если НастройкиОбновления <> Неопределено Тогда
		КодПользователяСервераОбновлений  = НастройкиОбновления.КодПользователяСервераОбновлений;
		ПарольСервераОбновлений           = НастройкиОбновления.ПарольСервераОбновлений;
		ЗапомнитьПарольСервераОбновлений  = НастройкиОбновления.ЗапомнитьПарольСервераОбновлений;
		// Для совместимости с ранними версиями обработки
		НастройкиОбновления.Свойство("ПропускатьПриветствие", ПропускатьПриветствие);
		НастройкиОбновления.Свойство("ИсточникОбновления", ИсточникОбновления);
		НастройкиОбновления.Свойство("РежимОбновления", РежимОбновления);
		НастройкиОбновления.Свойство("ДатаВремяОбновления", ДатаВремяОбновления);
		НастройкиОбновления.Свойство("ВыслатьОтчетНаПочту", ВыслатьОтчетНаПочту);
		НастройкиОбновления.Свойство("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
		НастройкиОбновления.Свойство("КодЗадачиПланировщика", КодЗадачиПланировщика);
		НастройкиОбновления.Свойство("ПовторныйЗапуск", ПовторныйЗапуск);
		НастройкиОбновления.Свойство("ИмяФайлаОбновления", ИмяФайлаОбновления);
		НастройкиОбновления.Свойство("НуженФайлОбновления", НуженФайлОбновления);
		НастройкиОбновления.Свойство("СоздаватьРезервнуюКопию", СоздаватьРезервнуюКопию);
		НастройкиОбновления.Свойство("ИмяКаталогаРезервнойКопииИБ", ИмяКаталогаРезервнойКопииИБ);
	КонецЕсли;
	
	// Параметры прокси: идентификаторы  значений должны совпадать с методом
	// СоздатьСоединениеЧерезПрокси() обработки ПолучениеФайловИзИнтернета.
	ЗапомнитьПарольПроксиСервера = ВосстановитьЗначение("ЗапомнитьИмяИПарольПрокси");
	ЗапомнитьПарольПроксиСервера = ?(ТипЗнч(ЗапомнитьПарольПроксиСервера) <> Тип("Булево"), Истина, ЗапомнитьПарольПроксиСервера);
	ПользовательПроксиСервера = ВосстановитьЗначение("ИмяПользователяПрокси");
	ПользовательПроксиСервера = ?(ТипЗнч(ПользовательПроксиСервера) <> Тип("Строка"), "", ПользовательПроксиСервера);
	ПарольПроксиСервера = ВосстановитьЗначение("ПарольПользователяПрокси");
	ПарольПроксиСервера = ?(ТипЗнч(ПарольПроксиСервера) <> Тип("Строка"), "", ПарольПроксиСервера);
	
	Если ПовторныйЗапуск Тогда
		// Восстановление сохраненного параметра проверки наличия обновлений при запуске
		ЗначениеПроверятьПриЗапуске = ВосстановитьЗначение("ПроверкаНаличияОбновленияПроверятьПриЗапуске");
		ПроверятьНаличиеОбновленияПриЗапуске = ? (ЗначениеПроверятьПриЗапуске = Неопределено, Истина, ЗначениеПроверятьПриЗапуске);
	Иначе
		ПроверятьНаличиеОбновленияПриЗапуске = ОбновлениеКонфигурации.ПроверятьОбновлениеЧерезИнтернетПриПервомЗапуске();
	КонецЕсли;
	
	Попытка
		Настройка = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
		ИмяАдминистратораКластера = Настройка.ИмяАдминистратораКластера;
		ПарольАдминистратораКластера = Настройка.ПарольАдминистратораКластера;
		КластерТребуетАутентификации = НЕ ПустаяСтрока(ИмяАдминистратораКластера);
		НестандартныеПортыСервера = Настройка.ПортКластераСерверов <> 0 ИЛИ Настройка.ПортАгентаСервера <> 0;
		Если НестандартныеПортыСервера ИЛИ ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
			ПортКластераСерверов = Настройка.ПортКластераСерверов;
			ПортАгентаСервера = Настройка.ПортАгентаСервера;
		Иначе
			Попытка
				ComConnector = Новый COMОбъект(УправлениеСоединениямиИБ.ИмяCOMСоединителя());
				ПортКластераСерверов = ComConnector.RMngrPortDefault;
				ПортАгентаСервера = ComConnector.RAgentPortDefault;
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	Исключение
		ИмяАдминистратораКластера = "";
		ПарольАдминистратораКластера = "";
		КластерТребуетАутентификации = Ложь;
		НестандартныеПортыСервера = Ложь;
		Если НЕ ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
			Попытка
				ComConnector = Новый COMОбъект(УправлениеСоединениямиИБ.ИмяCOMСоединителя());
				ПортКластераСерверов = ComConnector.RMngrPortDefault;
				ПортАгентаСервера = ComConnector.RAgentPortDefault;
			Исключение
				Сообщить(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли; 
	КонецПопытки;
	
	Если КодЗадачиПланировщика <> 0 Тогда
		Если ПолучитьЗадачуПланировщика(КодЗадачиПланировщика) = Неопределено Тогда
			КодЗадачиПланировщика = 0;	
		КонецЕсли;	
	КонецЕсли; 
	
КонецПроцедуры
	
Процедура СохранитьНастройкиОбновления() Экспорт
	НастройкиОбновления = Новый Структура("КодПользователяСервераОбновлений,
	                                      |ПарольСервераОбновлений, 
	                                      |ЗапомнитьПарольСервераОбновлений,
	                                      |ПропускатьПриветствие,
										  |ИсточникОбновления,
										  |РежимОбновления,
										  |ДатаВремяОбновления,
										  |ВыслатьОтчетНаПочту,
										  |АдресЭлектроннойПочты,
										  |КодЗадачиПланировщика,
										  |ПовторныйЗапуск,
										  |ИмяФайлаОбновления,
										  |НуженФайлОбновления,
										  |СоздаватьРезервнуюКопию,
										  |ИмяКаталогаРезервнойКопииИБ",
	                                      КодПользователяСервераОбновлений,
	                                      ?(ЗапомнитьПарольСервераОбновлений, ПарольСервераОбновлений, ""),
	                                      ЗапомнитьПарольСервераОбновлений,
	                                      ПропускатьПриветствие,
										  ИсточникОбновления,
										  РежимОбновления,
										  ДатаВремяОбновления,
										  ВыслатьОтчетНаПочту,
										  АдресЭлектроннойПочты,
										  КодЗадачиПланировщика,
										  ПовторныйЗапуск,
										  ИмяФайлаОбновления,
										  НуженФайлОбновления,
										  СоздаватьРезервнуюКопию,
										  ИмяКаталогаРезервнойКопииИБ);
	
	СохранитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления", НастройкиОбновления);
	СохранитьЗначение("ПроверкаНаличияОбновленияПроверятьПриЗапуске", ПроверятьНаличиеОбновленияПриЗапуске);
	// Параметры прокси: идентификаторы  значений должны совпадать с методом
	// СоздатьСоединениеЧерезПрокси() обработки ПолучениеФайловИзИнтернета.
	СохранитьЗначение("ЗапомнитьИмяИПарольПрокси", ЗапомнитьПарольПроксиСервера);
	СохранитьЗначение("ИмяПользователяПрокси", ПользовательПроксиСервера);
	СохранитьЗначение("ПарольПользователяПрокси", ?(ЗапомнитьПарольПроксиСервера, ПарольПроксиСервера, ""));
	
	Настройка = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
	Настройка.ИмяАдминистратораКластера = ?(КластерТребуетАутентификации, ИмяАдминистратораКластера, "");
	Настройка.ПарольАдминистратораКластера = ?(КластерТребуетАутентификации, ПарольАдминистратораКластера, "");
	// для совместимости с предыдущими версиями подсистемы
	Настройка.Вставить("ПортКластераСерверов", ?(НестандартныеПортыСервера, ПортКластераСерверов, 0));
	Настройка.Вставить("ПортАгентаСервера", ?(НестандартныеПортыСервера, ПортАгентаСервера, 0));
	УправлениеСоединениямиИБ.ЗаписатьПараметрыАдминистрированияИБ(Настройка);
КонецПроцедуры
#КонецЕсли

Процедура ЗаписатьИнформацию(Знач Текст) Экспорт
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Информация,,, Текст);
КонецПроцедуры

Процедура ЗаписатьОшибку(Знач Текст) Экспорт
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, Текст);
КонецПроцедуры

Процедура ЗаписатьПредупреждение(Знач Текст) Экспорт
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Предупреждение,,, Текст);
КонецПроцедуры

// Сравнить две строки версий.
//
// Параметры
//  СтрокаВерсии1  – Строка – номер версии в формате РР.{П|ПП}.ЗЗ.СС
//  СтрокаВерсии2  – Строка – второй сравниваемый номер версии
//
// Возвращаемое значение:
//   Число   – больше 0, если СтрокаВерсии1 > СтрокаВерсии2; 0, если версии равны.
//
Функция СравнитьВерсии(Знач СтрокаВерсии1, Знач СтрокаВерсии2) Экспорт
	
	Версия1 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаВерсии1, ".");
	Если Версия1.Количество() <> 4 Тогда
		ВызватьИсключение "Неправильный формат строки версии: " + СтрокаВерсии1;
	КонецЕсли;	 
	Версия2 = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаВерсии2, ".");
	Если Версия2.Количество() <> 4 Тогда
		ВызватьИсключение "Неправильный формат строки версии: " + СтрокаВерсии2;
	КонецЕсли;	 
	
	Результат = 0;
	Для Разряд = 0 По 3 Цикл
		Результат = Число(Версия1[Разряд]) - Число(Версия2[Разряд]);
		Если Результат <> 0 Тогда
			Возврат Результат;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Результат;
	
КонецФункции 
 
// Ограничение: число дней не может быть больше 30-ти.
Функция ДобавитьДни(Знач Дата, Знач ЧислоДней) Экспорт
	
	Если ЧислоДней > 0 Тогда
		Разница = День(Дата) + ЧислоДней - День(КонецМесяца(Дата));
		Если Разница > 0 Тогда
			НоваяДата = ДобавитьМесяц(Дата, 1);	
			Возврат Дата(Год(НоваяДата), Месяц(НоваяДата), Разница, 
				Час(НоваяДата), Минута(НоваяДата), Секунда(НоваяДата));
		КонецЕсли;
	ИначеЕсли ЧислоДней < 0 Тогда
		Разница = День(Дата) + ЧислоДней - День(НачалоМесяца(Дата));
		Если Разница < 1 Тогда
			НоваяДата = ДобавитьМесяц(Дата, -1);	
			Возврат Дата(Год(НоваяДата), Месяц(НоваяДата), День(КонецМесяца(НоваяДата)) - Разница, 
				Час(НоваяДата), Минута(НоваяДата), Секунда(НоваяДата));
		КонецЕсли;
	КонецЕсли; 
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата) + ЧислоДней, Час(Дата), Минута(Дата), Секунда(Дата));
	
КонецФункции	

Функция ВернутьДату(Дата, Время) Экспорт
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата), Час(Время), Минута(Время), Секунда(Время));
КонецФункции	

Функция ПроверкаПрав() Экспорт

	Сообщение = "";
	Если НЕ РольДоступна(Метаданные.Роли.ПолныеПрава) Тогда
		Сообщение = "Недостаточно прав для выполнения обновления.
		            |Обновление конфигурации доступно пользователям, входящим в роль ПолныеПрава.";
					
	КонецЕсли; 
	Возврат Сообщение;
	
КонецФункции 

// Получить строковое представление размера файла.
//
// Параметры
//  Размер  – Число – размер в байтах
//
// Возвращаемое значение:
//   Строка   – строковое представление размера файла, например, "10,5 Мб".
//
Функция СтрокаРазмераФайла(Знач Размер) Экспорт

	Если Размер < 1024 Тогда
		Возврат Формат(Размер, "ЧДЦ=1") + " " + "байт";
	ИначеЕсли Размер < 1024 * 1024 Тогда	
		Возврат Формат(Размер / 1024, "ЧДЦ=1") + " " + "Кб";
	ИначеЕсли Размер < 1024 * 1024 * 1024 Тогда	
		Возврат Формат(Размер / (1024 * 1024), "ЧДЦ=1") + " " + "Мб";
	Иначе
		Возврат Формат(Размер / (1024 * 1024 * 1024), "ЧДЦ=1") + " " + "Тб";
	КонецЕсли; 

КонецФункции 

Функция ЭтоБазоваяВерсияКонфигурации() Экспорт
	
	Возврат ОбновлениеКонфигурации.ЭтоБазоваяВерсияКонфигурации();
	
КонецФункции

Функция  ОпределитьВерсиюПлатформы() Экспорт
	СисИнфо = Новый СистемнаяИнформация;
	Возврат Лев(СисИнфо.ВерсияПриложения,3);
КонецФункции



//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ЭЛЕКТРОННОЙ ПОЧТОЙ
// 

Функция ОтправитьУведомлениеОбОбновлении(Знач ИмяПользователя, 
	Знач АдресНазначения, Знач УспешноеОбновление) 
	
	Тема = ? (УспешноеОбновление, "Успешное обновление конфигурации", "Ошибка обновления конфигурации");
	Текст = "Конфигурация: " + Метаданные.КраткаяИнформация + ".
		| Версия: " + Метаданные.Версия + ".
		| " + ? (УспешноеОбновление, "Обновление конфигурации завершено успешно.", 
			"При обновлении конфигурации произошли ошибки. Подробности записаны в журнал регистрации.");
			
	Попытка		
		ОбновлениеКонфигурации.ОтправитьЭлектроннуюПочту(ИмяПользователя, АдресНазначения, Тема, Текст, Ложь);
		Возврат Истина;
	Исключение
		ЗаписатьОшибку("Ошибка при отправке письма электронной почты: " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
КонецФункции

/////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С РЕКЛАМОЙ
// 

// Распаковка файла рекламы.
//
Процедура РаспаковатьРекламу() 

	ЗаписатьИнформацию("Выполняется распаковка файлов рекламы...");
	Если ФайлСуществует(ПутьКФайлуАрхиваРекламы) Тогда
		Попытка 
			ЧтениеZip = Новый ЧтениеZipФайла(ПутьКФайлуАрхиваРекламы);
			ЧтениеZip.ИзвлечьВсе(ИмяКаталогаРекламы, РежимВосстановленияПутейФайловZIP.Восстанавливать);
			ЗаписатьИнформацию("Файлы рекламы успешно обработаны.");
		Исключение
			ЗаписатьОшибку("Ошибка при распаковке файлов рекламы: " + ОписаниеОшибки());
		КонецПопытки;
		УдалитьФайлы(ИмяКаталогаРекламы, "*.zip");
	КонецЕсли;

КонецПроцедуры // РаспаковатьРекламу() 

//////////////////////////////////////////////////////////////////////////////// 
// ФУНКЦИИ ДЛЯ РАБОТЫ С ОПЕРАЦИОННОЙ СИСТЕМОЙ
// 

// Определение каталога "Мои документы" текущего пользователя Windows
//
Функция КаталогLocalAppData() 
	
	App = Новый COMОбъект("Shell.Application");
	Folder = App.Namespace(28);
	Результат = Folder.Self.Path;
	Возврат ДобавитьКонечныйРазделительПути(Результат);
	
КонецФункции 

// Определение каталога "Мои документы" текущего пользователя Windows
//
Функция КаталогAppData() 
	
	App = Новый COMОбъект("Shell.Application");
	Folder = App.Namespace(26);
	Результат = Folder.Self.Path;
	Возврат ДобавитьКонечныйРазделительПути(Результат);
	
КонецФункции 

// Определение каталога шаблонов конфигураций и обновлений на данном компьютере.
//
Функция КаталогШаблонов()

	СисИнфо = Новый СистемнаяИнформация;
	ПодстрокиВерсии = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СисИнфо.ВерсияПриложения, ".");
	Если (Число(ПодстрокиВерсии[0]) = 8 И Число(ПодстрокиВерсии[1]) >= 2) ИЛИ (Число(ПодстрокиВерсии[0]) > 8) Тогда
		ИмяФайла = КаталогAppData() + "1C\1CEStart\1CEStart.cfg";
		Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF16);
		Стр = "";
		Пока Стр <> Неопределено Цикл
			Стр = Текст.ПрочитатьСтроку();
			Если Стр = Неопределено Тогда
				Прервать;
			КонецЕсли; 
			Если Найти(ВРег(Стр), ВРег("ConfigurationTemplatesLocation")) = 0 Тогда
				Продолжить;
			КонецЕсли; 
			ПозицияРазделителя = Найти(Стр, "=");
			Если ПозицияРазделителя = 0 Тогда
				Продолжить;
			КонецЕсли; 
			Возврат ДобавитьКонечныйРазделительПути(СокрЛП(Сред(Стр, ПозицияРазделителя + 1)));
		КонецЦикла; 
		
		Возврат КаталогAppData() + "1C\1Cv82\tmplts\";
	Иначе	
		ИмяФайла = КаталогAppData() + "1C\1Cv" + ПодстрокиВерсии[0] + ПодстрокиВерсии[1] + "\v8cscadr.lst";
		Если ФайлСуществует(ИмяФайла) Тогда
			Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.ANSI);
			Стр = СокрЛП(Текст.ПрочитатьСтроку());
			Возврат ДобавитьКонечныйРазделительПути(СтрЗаменить(Стр, "file://", ""));
		Иначе
			Возврат КаталогПрограммы() + "\tmplts";
		КонецЕсли;		
	КонецЕсли; 

КонецФункции 
 
//////////////////////////////////////////////////////////////////////////////// 
// ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ
// 

// Проверка существования файла или каталога.
//
// Параметр:
//  ПутьКФайлу   - Строка - путь к файлу или каталогу, существование которого
//                 нужно проверить.
//
// Возвращаемое значение:
//  Булево - признак существования файла или каталога.
//
Функция ФайлСуществует(Знач ПутьКФайлу) Экспорт
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
	
КонецФункции 

// Проверка, что файл является дистрибутивом обновления.
//
// Параметр:
//  ПутьКФайлу   - Строка - путь к файлу.
//
// Возвращаемое значение:
//  Булево - Истина, если файл является дистрибутивом обновления.
//
Функция ЭтоДистрибутивОбновления(Знач ПутьКФайлу) Экспорт
	
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует() И НРег(Файл.Расширение) = ".zip";
	
КонецФункции 

Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;

	Возврат 0;
  	
КонецФункции

// Возвратить каталог файла - часть пути без имени файла.
//
// Параметры
//  ПутьКФайлу  – Строка – путь к файлу.
//
// Возвращаемое значение:
//   Строка   – каталог файла
//
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу) Экспорт

	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "\"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции 

Функция ДобавитьКонечныйРазделительПути(Знач ПутьКаталога)
	Длина = СтрДлина(ПутьКаталога) > 0;
	Если Длина = 0 Тогда
		Возврат "\";
	ИначеЕсли Сред(ПутьКаталога, Длина, 1) <> "\" Тогда
		Возврат ПутьКаталога + "\";
	Иначе 
		Возврат ПутьКаталога;
	КонецЕсли;
КонецФункции

Функция СкопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение, ВыдаватьСообщения = Ложь) Экспорт
	Попытка
		СоздатьКаталог(ПолучитьКаталогФайла(ИмяФайлаНазначение));
		КопироватьФайл(ИмяФайлаИсточник, ИмяФайлаНазначение);
	Исключение
		Сообщение = "Ошибка при копировании: " + ОписаниеОшибки() + 
			" (источник: " + ИмяФайлаИсточник + "; приемник: " + ИмяФайлаНазначение + ")";
		Если ВыдаватьСообщения Тогда 
			ОбщегоНазначения.СообщитьОбОшибке(Сообщение);
		КонецЕсли;					 
		ЗаписатьПредупреждение(Сообщение);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// ФУНКЦИИ ДЛЯ РАБОТЫ С ИНТЕРНЕТОМ
// 

Функция ОбновлениеКонфигурацииУспешно() 

	Если НЕ ПравоДоступа("Чтение", Метаданные.Константы.СтатусОбновленияКонфигурации) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеХранилища = Константы.СтатусОбновленияКонфигурации.Получить();
	
	Статус = Неопределено;
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
	КонецЕсли;

	Если Статус = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ Статус.ОбновлениеВыполнено ИЛИ 
		(Статус.ИмяАдминистратораОбновления <> ИмяПользователя()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Статус.РезультатОбновленияКонфигурации;

КонецФункции 

Процедура СброситьСтатусОбновленияКонфигурации() 
	
	Константы.СтатусОбновленияКонфигурации.Установить(Новый ХранилищеЗначения(Неопределено));
	
КонецПроцедуры
 
#Если Клиент Тогда
// Процедура проверяет необходимость проверки наличия комплекта обновления конфигурации
//
Процедура ПроверитьНаличиеОбновлений() Экспорт 

	Если НЕ ПустаяСтрока(ПроверкаПрав()) Тогда
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройкиОбновления();
	РезультатОбновления = ОбновлениеКонфигурацииУспешно();
	Если ПроверятьНаличиеОбновленияПриЗапуске ИЛИ РезультатОбновления <> Неопределено Тогда
		Если РезультатОбновления <> Неопределено Тогда
			СброситьСтатусОбновленияКонфигурации();
		КонецЕсли; 
		Форма = ПолучитьФорму("ОбновлениеКонфигурации");
		Форма.ПроверкаНаличияОбновленияПриЗапуске = ПроверятьНаличиеОбновленияПриЗапуске;
		Форма.РезультатОбновления = РезультатОбновления;
		Форма.Открыть();
	КонецЕсли;	

КонецПроцедуры 

// Выполнение соединения с сервером обновлений.
//
// Возвращаемое значение:
//  HTTPсоединение
//
Функция СоединениеССерверомОбновлений()
	
	// Установка параметров прокси-сервера
	Если ПроксиСерверТребуетАутентификации Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Пользователь = ПользовательПроксиСервера;
		ПроксиСервер.Пароль       = ПарольПроксиСервера;
	КонецЕсли;
	
	// Создание HTTP-соединения с сервером обновлений
	Соединение = Новый HTTPСоединение(АдресСервераОбновлений(),
	                                  ,
	                                  КодПользователяСервераОбновлений,
	                                  ПарольСервераОбновлений,
	                                  ?(ПроксиСерверТребуетАутентификации, ПроксиСервер, Неопределено));
	
	Возврат Соединение;								  
	
КонецФункции // СоединениеССерверомОбновлений()

Функция СоединениеСАльтернативнымСерверомОбновлений() Экспорт
	
	// Установка параметров прокси-сервера
	Если ПроксиСерверТребуетАутентификации Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Пользователь = ПользовательПроксиСервера;
		ПроксиСервер.Пароль       = ПарольПроксиСервера;
	КонецЕсли;
	
	// Создание HTTP-соединения с сервером обновлений
	Соединение = Новый HTTPСоединение(АльтернативныйСерверОбновлений(),
	                                  ,
	                                  КодПользователяСервераОбновлений,
	                                  ПарольСервераОбновлений,
	                                  ?(ПроксиСерверТребуетАутентификации, ПроксиСервер, Неопределено));
	
	Возврат Соединение;								  
	
КонецФункции // СоединениеССерверомОбновлений()

// Выполнение соединения с сервером для проверки наличия обновлений.
//
// Возвращаемое значение:
//  HTTPсоединение
//
Функция СоединениеССерверомДляПроверкиНаличияОбновления()
	
	// Установка параметров прокси-сервера
	Если ПроксиСерверТребуетАутентификации Тогда
		ПроксиСервер = Новый ИнтернетПрокси();
		ПроксиСервер.Пользователь = ПользовательПроксиСервера;
		ПроксиСервер.Пароль       = ПарольПроксиСервера;
	КонецЕсли;

	// Создание HTTP-соединения с сервером обновлений
	Соединение = Новый HTTPСоединение(АдресСервераДляПроверкиНаличияОбновления(),,,,
		?(ПроксиСерверТребуетАутентификации, ПроксиСервер, Неопределено));
	
	Возврат Соединение;								  
	
КонецФункции

// Получение файла с сервера.
//
// Параметры:
//  Адрес        - адрес файла на сервере
//  ЛокальныйПуть - путь для сохранения файла на локальном компьютере
//  ВыдаватьСообщения - признак необходимости выдачи сообщений в случае ошибки
//                      (необязательный, по умолчанию равен Истина)
//
// Возвращаемое значение:
//  Строка - описание ошибки получения файла с сервера. Пустое значение в случае успеха.
//	0 - успешно;
//  1 - неправильный параметр
//  2 - неправильные код пользователя или пароль для доступа к "закрытой" части сайта
//  3 - ошибка подключения к веб-сайту.
//
Функция ПолучитьФайлССервера(Знач Адрес, Знач ЛокальныйПуть, Знач ВыдаватьСообщения = Истина, 
	Знач Соединение = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Адрес) ИЛИ НЕ ЗначениеЗаполнено(ЛокальныйПуть) Тогда
		ТекстОшибки = "Невозможно подключиться к сети Интернет: не инициализированы внутренние переменные.";
		ЗаписатьОшибку(ТекстОшибки);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если Соединение = Неопределено Тогда
		Соединение = СоединениеССерверомОбновлений();
	КонецЕсли;
	
	Попытка
		СоздатьКаталог(ПолучитьКаталогФайла(ЛокальныйПуть));
		Соединение.Получить(Адрес, ЛокальныйПуть);
	Исключение
		
		// "Ошибка аутентификации при доступе к ресурсу: tmplts/v8cscdsc.xml"
		ИнфОбОшибке = ИнформацияОбОшибке();
		ЗаписатьПредупреждение("Ошибка при обращении к http://" + Соединение.Сервер + "/" + Адрес + "
			|" + ПодробноеПредставлениеОшибки(ИнфОбОшибке));
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнфОбОшибке);
		Если ВыдаватьСообщения Тогда 
			ОбщегоНазначения.ПредупреждениеОбОшибке(ТекстОшибки);
		КонецЕсли;
		Возврат ТекстОшибки;
		
	КонецПопытки;
	
	ЗаписатьИнформацию("Файл успешно получен (адрес: http://" + Соединение.Сервер + "/" + Адрес + 
		"; локальный файл: " + ЛокальныйПуть + ").");
	Возврат "";
	
КонецФункции 

// Получение файла описания обновления с сервера.
//
Функция ПолучитьФайлОписанияОбновления() Экспорт
	
	ИмяФайла = КаталогФайловОбновления + ИмяФайлаОписанияОбновления;
	ТекстОшибки = ПолучитьФайлССервера(АдресРесурсовДляПроверкиНаличияОбновления() + ИмяФайлаОписанияОбновления, 
		ИмяФайла, Ложь, СоединениеССерверомДляПроверкиНаличияОбновления());
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ЗаписатьОшибку("Ошибка при удалении временного файла " + ИмяФайла + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	Возврат ?(ПустаяСтрока(ТекстОшибки), ИмяФайла, Неопределено);
	
КонецФункции 

// Получение файла порядка обновления с сервера.
//
Функция ПолучитьФайлПорядкаОбновления() Экспорт
	
	ИмяФайла = ПолучитьЛокальныйФайлПорядкаОбновления();
	ТекстОшибки = ПолучитьФайлССервера(АдресРесурсовДляПроверкиНаличияОбновления() + ИмяФайлаПорядкаОбновления, 
		ИмяФайла, Ложь, СоединениеССерверомДляПроверкиНаличияОбновления());
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ЗаписатьОшибку("Ошибка при удалении временного файла " + ИмяФайла + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	Возврат ?(ПустаяСтрока(ТекстОшибки), ИмяФайла, Неопределено);
	
КонецФункции 

Функция ПолучитьЛокальныйФайлПорядкаОбновления() Экспорт
	
	Возврат КаталогФайловОбновления + ИмяФайлаПорядкаОбновления;
	
КонецФункции

// Получение файла списка шаблонов с сервера.
//
Функция ПолучитьФайлСпискаШаблонов(Знач ВыдаватьСообщения = Истина) Экспорт
	
	ПутьКФайлуСпискаШаблонов = КаталогФайловОбновления + ИмяZipФайлаСпискаШаблонов;
	ТекстОшибки = ПолучитьФайлССервера(АдресРесурсовДляПроверкиНаличияОбновления() + ИмяZipФайлаСпискаШаблонов,
		ПутьКФайлуСпискаШаблонов, Ложь, СоединениеССерверомДляПроверкиНаличияОбновления());
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Если ВыдаватьСообщения Тогда
			Сообщить(ТекстОшибки);
		КонецЕсли; 
		Возврат ТекстОшибки;
	КонецЕсли;
			
	Если НЕ ФайлСуществует(ПутьКФайлуСпискаШаблонов) Тогда
		Возврат "Файл не существует: " + ПутьКФайлуСпискаШаблонов;
	КонецЕсли;
	Попытка 
		ЧтениеZip = Новый ЧтениеZipФайла(ПутьКФайлуСпискаШаблонов);
		ЧтениеZip.ИзвлечьВсе(КаталогФайловОбновления, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		ТекстОшибки = "Ошибка при распаковке файла со списком доступных обновлений: ";
		ИнфоОшибки = ИнформацияОбОшибке();
		ЗаписатьОшибку(ТекстОшибки + ПодробноеПредставлениеОшибки(ИнфоОшибки));
		ТекстОшибки = ТекстОшибки + КраткоеПредставлениеОшибки(ИнфоОшибки);
	КонецПопытки;
	УдалитьФайлы(КаталогФайловОбновления, ИмяZipФайлаСпискаШаблонов);
	Возврат "";
	
КонецФункции

Функция ПолучитьПараметрыОбновления(Знач ВыдаватьСообщения = Истина) Экспорт
	
	ВременныйФайл = КаталогФайловОбновления + ОбновлениеКонфигурации.ИмяФайлаПроверкиНаличияОбновления();
	ТекстОшибки = ПолучитьФайлССервера(АдресРесурсовДляПроверкиНаличияОбновления() + ОбновлениеКонфигурации.ИмяФайлаПроверкиНаличияОбновления(),
		ВременныйФайл, ВыдаватьСообщения, СоединениеССерверомДляПроверкиНаличияОбновления());
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат ПараметрыДистрибутива(ВременныйФайл);
	
КонецФункции

// Чтение данных по обновлению из файла ИмяФайлаПроверкиНаличияОбновления (UpdInfo.txt)
// Вычисляются: 
//		номер версии обновления на сервере, 
//		номера версий, с которых производится обновление (раздляются символом ";")
//		дата публикации обновления
//
// Параметры:
//  ИмяФайла - полное имя файла UpdInfo.txt
// 
// Возвращаемое значение:
//  Структура: 
//		Version - версия обновления
//		FromVersions - с каких версий обновляет
//		UpdateDate - дата опубликования
//  Строка - описание ошибки, если файл не найден или не содержит нужных значений
//
Функция ПараметрыДистрибутива(Знач ИмяФайла)
	Файл = Новый Файл(ИмяФайла);
	Если НЕ Файл.Существует() Тогда
		Возврат "Файл описания обновлений не получен";
	КонецЕсли;	
	ТД = Новый ТекстовыйДокумент(); 
	ТД.Прочитать(Файл.ПолноеИмя);
	ПарКомпл = Новый Структура();
	Для Н = 1 По ТД.КоличествоСтрок() Цикл
		СтрТмп = НРег(СокрЛП(ТД.ПолучитьСтроку(Н)));
		Если ПустаяСтрока(СтрТмп) Тогда
			Продолжить;
		КонецЕсли; 
		Если Найти(СтрТмп,"fromversions=")>0 Тогда
			СтрТМП = СокрЛП(Сред(СтрТмп,Найти(СтрТмп,"fromversions=")+СтрДлина("fromversions=")));
			СтрТМП = ?(Лев(СтрТМП,1)=";","",";") + СтрТмп + ?(Прав(СтрТМП,1)=";","",";");
			ПарКомпл.Вставить("FromVersions",СтрТМП);
		ИначеЕсли Найти(СтрТмп,"version=")>0 Тогда
			ПарКомпл.Вставить("Version",Сред(СтрТмп,Найти(СтрТмп,"version=")+СтрДлина("version=")));
		ИначеЕсли Найти(СтрТмп,"updatedate=")>0 Тогда
			// формат даты = Дата, 
			СтрТмп = Сред(СтрТмп,Найти(СтрТмп,"updatedate=")+СтрДлина("updatedate="));
			Если СтрДлина(СтрТмп)>8 Тогда
				Если Найти(СтрТмп,".")=5 Тогда
					// дата в формате  ГГГГ.ММ.ДД
					СтрТмп = СтрЗаменить(СтрТмп,".","");
				ИначеЕсли Найти(СтрТмп,".")=3 Тогда
					// дата в формате ДД.ММ.ГГГГ
					СтрТмп = Прав(СтрТмп,4)+Сред(СтрТмп,4,2)+Лев(СтрТмп,2);
				Иначе 
					// дата в формате ГГГГММДД
				КонецЕсли;
			КонецЕсли;
			ПарКомпл.Вставить("UpdateDate",Дата(СтрТмп));
		Иначе
			Возврат "Неверный формат сведений о наличии обновлений";
		КонецЕсли;
	КонецЦикла;
	Возврат ПарКомпл;
КонецФункции

// Получение каталога файла обновления. 
//
// Параметр:
//  ДоступноеОбновление - Строка таблицы значений, содержащая информацию о
//                        доступном обновлении.
// 
// Возвращаемое значение:
//  Строка - каталог файла обновления.
//
Функция ПолучитьКаталогФайлаОбновления(ДоступноеОбновление, ИсточникИнтернет) Экспорт
	
	Если ДоступноеОбновление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = СтрЗаменить(ДоступноеОбновление.ПутьКФайлуОбновления, "/", "\");
	Результат = ПолучитьКаталогФайла(Результат);
	Результат = СтрЗаменить(Результат, "_", ".");
	Если НЕ ИсточникИнтернет Тогда
		Результат = "ITS\" + ОбновлениеКонфигурации.КороткоеИмяКонфигурации() + "\" + Результат;
	КонецЕсли;	
	Результат = ДобавитьКонечныйРазделительПути(Результат);
	Возврат Результат;
		
КонецФункции 

// Создание таблицы значений для хранения списка файлов, которые нужно получить
// с сервера.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ТаблицаЗначений
//
Функция СоздатьТаблицуСписокФайлов()
	
	СписокФайлов = Новый ТаблицаЗначений;
	СписокФайлов.Колонки.Добавить("Адрес");
	СписокФайлов.Колонки.Добавить("АльтернативныйАдрес");
	СписокФайлов.Колонки.Добавить("ЛокальныйПуть");
	СписокФайлов.Колонки.Добавить("Обязательный"); // файл обязателен к получению
	СписокФайлов.Колонки.Добавить("Получен");      // признак успешного получения файла
	
	Возврат СписокФайлов;
	
КонецФункции 

Функция ОпределитьФайлПолучен(ОписаниеФайла, Размер)
	
	Файл = Новый Файл(ОписаниеФайла.ЛокальныйПуть);
	Возврат Файл.Существует() И Файл.Размер() = Размер;
	
КонецФункции

Функция СоздатьСписокФайловДляПолучения(ИсточникИнтернет) Экспорт 
	
	СписокФайлов = СоздатьТаблицуСписокФайлов();
	
	КаталогОбновленияНаСервере = ?(ИсточникИнтернет, АдресКаталогаШаблоновНаСервереОбновлений(), 
		ДискИТС + КаталогОбновленияКонфигурацииИТС);
	
	Для Каждого Обновление Из ДоступныеОбновления Цикл
		
		КаталогФайлаОбновления = ПолучитьКаталогФайлаОбновления(Обновление, ИсточникИнтернет);
		Обновление.ЛокальныйОтносительныйКаталог = КаталогФайлаОбновления;
		Обновление.ПутьКЛокальномуФайлу = КаталогФайловОбновления + КаталогФайлаОбновления + Обновление.ФайлОбновления;
		// Описание файла обновления.
		НовыйФайл = СписокФайлов.Добавить();
		НовыйФайл.Адрес         = КаталогОбновленияНаСервере + Обновление.ПутьКФайлуОбновления;
		НовыйФайл.АльтернативныйАдрес = ?(ИсточникИнтернет, 
			АльтернативныйКаталогШаблоновНаСервереОбновлений() + Обновление.ПутьКФайлуОбновления, "");
		НовыйФайл.ЛокальныйПуть = Обновление.ПутьКЛокальномуФайлу;
		НовыйФайл.Обязательный  = Истина;
		НовыйФайл.Получен		= ОпределитьФайлПолучен(НовыйФайл, Обновление.РазмерФайлаОбновления);
	
	КонецЦикла;
	                 
	Если ИсточникИнтернет Тогда
		// Архив рекламы ФайлАрхиваРекламы лежит "рядом" с обновлением конфигурации.
		Поз = Найти(Обновление.ПутьКФайлуОбновления, СтрЗаменить(Обновление.Версия, ".", "_"));
		
		// Описание файла рекламы
		НовыйФайл = СписокФайлов.Добавить();
		НовыйФайл.Адрес         = АдресКаталогаШаблоновНаСервереОбновлений() + Лев(Обновление.ПутьКФайлуОбновления, Поз-1) + ФайлАрхиваРекламы;
		НовыйФайл.АльтернативныйАдрес = АльтернативныйКаталогШаблоновНаСервереОбновлений() + 
			Лев(Обновление.ПутьКФайлуОбновления, Поз-1) + ФайлАрхиваРекламы;
		НовыйФайл.ЛокальныйПуть = ИмяКаталогаРекламы + ФайлАрхиваРекламы;
		НовыйФайл.Обязательный  = Ложь;
	КонецЕсли;
	
	Возврат СписокФайлов;
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// ФУНКЦИИ ДЛЯ РАБОТЫ С ДИСКОМ ИТС
// 

Функция НайтиДискИТС() Экспорт
	
	Попытка
		ФайловыйОбъект = Новый COMObject("Scripting.FileSystemObject");
		Приводы = ФайловыйОбъект.Drives;
		Для Каждого Привод Из Приводы Цикл
			Если Привод.DriveType = 4 И Привод.IsReady Тогда	// 4 = CD-ROM drive, http://www.microsoft.com/technet/scriptcenter/guide/sas_scr_czxq.mspx?mfr=true
				Диск = ДобавитьКонечныйРазделительПути(Привод.Path);
				Файл = Новый Файл(Диск + КаталогОбновленияКонфигурацииИТС + ИмяФайлаОписанияОбновления);
				Если Файл.Существует() Тогда
					Возврат Диск;				
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	Исключение
		ЗаписатьОшибку("Ошибка при поиске диска ИТС: " + ОписаниеОшибки());
		Возврат Неопределено;	
	КонецПопытки;
  Возврат Неопределено;
  
КонецФункции

Функция ПолучитьФайлСпискаШаблоновИТС(Знач ВыдаватьСообщения = Истина) Экспорт
	
	Возврат СкопироватьФайл(ДискИТС + КаталогОбновленияКонфигурацииИТС + ИмяФайлаСпискаШаблонов, 
		КаталогФайловОбновления + ИмяФайлаСпискаШаблонов);
		
КонецФункции

Функция ПолучитьПараметрыОбновленияИТС(Знач ВыдаватьСообщения = Истина) Экспорт
	
	ВременныйФайл = КаталогФайловОбновления + ОбновлениеКонфигурации.ИмяФайлаПроверкиНаличияОбновления();
	Если НЕ СкопироватьФайл(ДискИТС + КаталогОбновленияКонфигурацииИТС + 
		ОбновлениеКонфигурации.ИмяФайлаПроверкиНаличияОбновления(), ВременныйФайл) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Параметры = ПараметрыДистрибутива(ВременныйФайл);
	Если ТипЗнч(Параметры) = Тип("Строка") Тогда
		Возврат Неопределено;                     
	КонецЕсли;
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьФайлОписанияОбновленияИТС() Экспорт
	
	ИмяФайла = КаталогФайловОбновления + ИмяФайлаОписанияОбновления;
	Если НЕ СкопироватьФайл(ДискИТС + КаталогОбновленияКонфигурацииИТС + ИмяФайлаОписанияОбновления, 
		ИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции 

Функция ПолучитьФайлПорядкаОбновленияИТС() Экспорт
	
	ИмяФайла = ПолучитьЛокальныйФайлПорядкаОбновления();
	Если НЕ СкопироватьФайл(ДискИТС + КаталогОбновленияКонфигурацииИТС + ИмяФайлаПорядкаОбновления, 
		ИмяФайла) Тогда
		Попытка
			УдалитьФайлы(ИмяФайла);
		Исключение
			ЗаписатьОшибку("Ошибка при удалении временного файла " + ИмяФайла + Символы.ПС + ОписаниеОшибки());
		КонецПопытки;
		Возврат Неопределено;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции 

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СПИСКОМ ДОСТУПНЫХ ОБНОВЛЕНИЙ
// 

// Загрузка списка обновлений из файла XML
//
Функция ВыполнитьЗагрузкуСпискаОбновлений(Знач ИмяФайлаЗагрузки)
	
	СообщениеОбОшибке = "Ошибка при чтении файла списка обновлений.";
	
	Если НЕ ФайлСуществует(ИмяФайлаЗагрузки) Тогда
		ОбщегоНазначения.ПредупреждениеОбОшибке(СообщениеОбОшибке);
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		ТаблицаЗначений = Новый ТаблицаЗначений;		
		ТаблицаЗначений.Колонки.Добавить("Конфигурация",          ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
		ТаблицаЗначений.Колонки.Добавить("Поставщик",             ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
		ТаблицаЗначений.Колонки.Добавить("Версия",                ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
		ТаблицаЗначений.Колонки.Добавить("ВерсияДляОбновления",   ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
		ТаблицаЗначений.Колонки.Добавить("ПутьКФайлуОбновления",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
		ТаблицаЗначений.Колонки.Добавить("РазмерФайлаОбновления", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0));
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.ОткрытьФайл(ИмяФайлаЗагрузки);
		ЧтениеXML.Прочитать(); // <?xml version="1.0" encoding="UTF-8" ?> 
		
		// Дата формирования файла.
		ЧтениеXML.Прочитать();
		ЧтениеXML.Прочитать();
		ДатаФормирования = ЧтениеXML.Значение;
		ЧтениеXML.Прочитать();
		
		// Читаем начало элемента Update или конец элемента UpdateList.
		Пока ЧтениеXML.Прочитать() Цикл
			
			Если ЧтениеXML.Имя = "v8u:updateList" Тогда
				Прервать;					
			Иначе		
				
				Конфигурация = ЧтениеXML.ПолучитьАтрибут("configuration");
				
				Пока ЧтениеXML.Прочитать() Цикл
					
					Если ЧтениеXML.Имя = "v8u:update" Тогда
						Прервать;					
					Иначе		
						
						Если ЧтениеXML.Имя = "v8u:vendor" Тогда
							ЧтениеXML.Прочитать();
							Поставщик = ЧтениеXML.Значение;							
						ИначеЕсли ЧтениеXML.Имя = "v8u:version" Тогда
							ЧтениеXML.Прочитать();
							Версия = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:file" Тогда
							ЧтениеXML.Прочитать();
							ПутьКФайлуОбновления = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:size" Тогда
							ЧтениеXML.Прочитать();
							РазмерФайлаОбновления = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.Имя = "v8u:target" Тогда
							ЧтениеXML.Прочитать();
							НоваяСтрока = ТаблицаЗначений.Добавить();
							НоваяСтрока.Конфигурация          = Конфигурация;
							НоваяСтрока.Поставщик             = Поставщик;
							НоваяСтрока.Версия                = Версия;
							НоваяСтрока.ВерсияДляОбновления	  = ЧтениеXML.Значение;
							НоваяСтрока.ПутьКФайлуОбновления  = ПутьКФайлуОбновления;
							НоваяСтрока.РазмерФайлаОбновления = РазмерФайлаОбновления;
						КонецЕсли;
						
						ЧтениеXML.Прочитать();
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
		ОбщегоНазначения.ПредупреждениеОбОшибке(СообщениеОбОшибке);
		Возврат Неопределено;
		
	КонецПопытки;
		
	Возврат ТаблицаЗначений;	
	
КонецФункции // ВыполнитьЗагрузкуСпискаОбновлений()

Функция НоваяТаблицаОбновленийКонфигурации()

	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("Конфигурация",         ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("Поставщик",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("Версия",               ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("Версия1Разряд",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	Результат.Колонки.Добавить("Версия2Разряд",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	Результат.Колонки.Добавить("Версия3Разряд",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	Результат.Колонки.Добавить("Версия4Разряд",        ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3));
	Результат.Колонки.Добавить("ВерсияДляОбновления",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("ПутьКФайлуОбновления", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("ФайлОбновления", 	   ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("РазмерФайлаОбновления",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 0));
	Результат.Колонки.Добавить("ПутьКЛокальномуФайлу", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("ПутьКЛокальномуФайлуОбновления", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	Результат.Колонки.Добавить("ЛокальныйОтносительныйКаталог",  ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(0));
	
	Возврат Результат;

КонецФункции 
 
Функция НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаОбновленийКонфигурации, Обновление)
	
	НоваяСтрока = ТаблицаОбновленийКонфигурации.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Обновление);
	НомерВерсии = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Обновление.Версия, ".");
	НоваяСтрока.Версия1Разряд = Число(НомерВерсии[0]);
	НоваяСтрока.Версия2Разряд = Число(НомерВерсии[1]);
	НоваяСтрока.Версия3Разряд = Число(НомерВерсии[2]);
	НоваяСтрока.Версия4Разряд = Число(НомерВерсии[3]);
	
	ПутьФайла = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(
		СтрЗаменить(Обновление.ПутьКФайлуОбновления, "\", "/"), "/");
    НоваяСтрока.ФайлОбновления = ПутьФайла[ПутьФайла.Количество() - 1];
	Возврат НоваяСтрока;

КонецФункции

// Получить информацией об обновлении для версии ВерсияКонфигурации.
//
// Параметры
//  ВерсияКонфигурации  – строка – версия конфигурации.
//
// Возвращаемое значение:
//   Строка ТаблицаЗначений – структура с информацией об обновлении
//
Функция ПолучитьДоступноеОбновление(Знач ВерсияКонфигурации) 
		
	ПутьКФайлуСпискаОбновлений = КаталогФайловОбновления + ИмяФайлаСпискаШаблонов;
	ТаблицаОбновлений = ВыполнитьЗагрузкуСпискаОбновлений(ПутьКФайлуСпискаОбновлений);
	
	Если ТаблицаОбновлений = Неопределено Тогда // ошибки при чтении файла
		Возврат Неопределено;		
   	КонецЕсли;
	
	Отбор = Новый Структура("Конфигурация, Поставщик, Версия", 
		Метаданные.Имя, Метаданные.Поставщик, ВерсияКонфигурации);
	МассивДоступныхОбновлений = ТаблицаОбновлений.НайтиСтроки(Отбор);
	
	Если МассивДоступныхОбновлений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НоваяСтрокаТаблицыОбновленийКонфигурации(НоваяТаблицаОбновленийКонфигурации(), МассивДоступныхОбновлений[0]);
	
КонецФункции

// Получить список всех инкрементальных обновлений по списку шаблонов, 
// последовательная установка которых обновит версию ВерсияОт до версии ВерсияДо.
//
// Параметры
//  ВерсияОт  – строка – исходная версия
//  ВерсияДо  – строка – конечная версия, до которой конфигурация 
// 					     обновляется с исходной
//
// Возвращаемое значение:
//   Массив   – массив строк ТаблицаЗначений
//
Функция ПолучитьДоступныеОбновленияВИнтервале(Знач ВерсияОт, Знач ВерсияДо) 

	ПутьКФайлуСпискаОбновлений = КаталогФайловОбновления + ИмяФайлаСпискаШаблонов;
	ТаблицаОбновлений = ВыполнитьЗагрузкуСпискаОбновлений(ПутьКФайлуСпискаОбновлений);
	
	Если ТаблицаОбновлений = Неопределено Тогда // ошибки при чтении файла
		Возврат Неопределено;		
   	КонецЕсли;
	
	ТаблицаОбновленийКонфигурации = НоваяТаблицаОбновленийКонфигурации();
	
	ТаблицаДоступныхОбновленийКонфигурации = ТаблицаОбновленийКонфигурации.Скопировать();
	
	// Определяем обновления только для данной конфигурации
	Отбор = Новый Структура("Конфигурация, Поставщик", Метаданные.Имя, Метаданные.Поставщик);
	МассивДоступныхОбновлений = ТаблицаОбновлений.НайтиСтроки(Отбор);
	
	Для Каждого Обновление Из МассивДоступныхОбновлений Цикл
		НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаОбновленийКонфигурации, Обновление);
	КонецЦикла;
	
	ТаблицаОбновленийКонфигурации.Сортировать("Версия1Разряд Убыв,
	                                          |Версия2Разряд Убыв,
	                                          |Версия3Разряд Убыв,
	                                          |Версия4Разряд Убыв");
	
	ДоступныеОбновления = Неопределено;
	ТекущаяВерсияОт = ВерсияОт;
	Пока ТекущаяВерсияОт <> ВерсияДо Цикл
	
		Отбор = Новый Структура("ВерсияДляОбновления", ТекущаяВерсияОт);
		МассивДоступныхОбновлений = ТаблицаОбновленийКонфигурации.НайтиСтроки(Отбор);

		Для Каждого Обновление Из МассивДоступныхОбновлений Цикл
			НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаДоступныхОбновленийКонфигурации, Обновление);
		КонецЦикла;

		ТаблицаДоступныхОбновленийКонфигурации.Сортировать("Версия1Разряд Убыв,
														   |Версия2Разряд Убыв,
														   |Версия3Разряд Убыв,
														   |Версия4Разряд Убыв");
														   
		Если ТаблицаДоступныхОбновленийКонфигурации.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если ДоступныеОбновления = Неопределено Тогда
			ДоступныеОбновления = Новый Массив();
		КонецЕсли;				
		
		ДоступноеОбновление = ТаблицаДоступныхОбновленийКонфигурации[0];
		ДоступныеОбновления.Добавить(ДоступноеОбновление);
		
		НоваяТекущаяВерсияОт = ДоступноеОбновление.Версия;
		Если ТекущаяВерсияОт = НоваяТекущаяВерсияОт И НоваяТекущаяВерсияОт <> ВерсияДо Тогда
			ТекстСообщения = "Недоступно обновление на версию %1 с текущей версии %2.";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ВерсияДо);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%2", ВерсияОт);
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;
		ТекущаяВерсияОт	= НоваяТекущаяВерсияОт;
	
	КонецЦикла;
	
	Возврат ДоступныеОбновления;
	
КонецФункции 

Процедура ПолучитьДоступныеОбновления(ПараметрыОбновления, ВерсияКонфигурации, ВыдаватьСообщения = Ложь) Экспорт
	
	ДоступноеОбновление = ПолучитьДоступноеОбновление(ВерсияКонфигурации);
	ДоступныеОбновления = Неопределено;
	Если Найти(ПараметрыОбновления.FromVersions, СокрП(Метаданные.Версия) + ";") > 0 Тогда
		// мы можем обновиться сразу до версии ВерсияКонфигурации
		ДоступныеОбновления = Новый Массив();
		ДоступныеОбновления.Добавить(ДоступноеОбновление);   
	Иначе
		// получаем список всех инкрементальных обновлений по списку шаблонов, 
		// последовательная установка которых обновит нас до версии ВерсияКонфигурации.
		Попытка 
			ДоступныеОбновления = ПолучитьДоступныеОбновленияВИнтервале(Метаданные.Версия, ВерсияКонфигурации);
		Исключение
			Если ВыдаватьСообщения Тогда
				Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));	
			КонецЕсли;
			ЗаписатьОшибку("Ошибка проверке наличия обновления: " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ДоступныеОбновления = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДоступноеОбновлениеИзФайла(Знач ИмяФайла) Экспорт

	Если ИмяФайла = Неопределено Тогда
		ДоступноеОбновление = Неопределено;
	Иначе		
		ДоступноеОбновление = НоваяТаблицаОбновленийКонфигурации().Добавить();
		ДоступноеОбновление.ПутьКЛокальномуФайлу = ИмяФайла;
		ДоступноеОбновление.ПутьКЛокальномуФайлуОбновления = ИмяФайла;
	КонецЕсли;
	
	ДоступныеОбновления = Новый Массив();
	Если ДоступноеОбновление <> Неопределено Тогда
		ДоступныеОбновления.Добавить(ДоступноеОбновление);   
	КонецЕсли; 

КонецПроцедуры
  
	
// Рассчитать суммарный размер файлов обновлений.
//
// Параметры
//  ДоступныеОбновления  – массив – список обновлений
//
// Возвращаемое значение:
//   число   – размер обновлений в байтах
//
Функция РазмерОбновлений(ДоступныеОбновления) Экспорт

	РазмерОбновлений = 0;
	Для Каждого Обновление Из ДоступныеОбновления Цикл
		РазмерОбновлений = РазмерОбновлений + Обновление.РазмерФайлаОбновления;
	КонецЦикла;
	Возврат РазмерОбновлений;
	
КонецФункции 

Функция ПроверитьФайлыОбновленияПолучены(СписокФайлов) Экспорт
	
	ФайлыПолученыУспешно = Истина;
	Для Каждого Файл Из СписокФайлов Цикл
		Если Файл.Обязательный И НЕ Файл.Получен Тогда
			ФайлыПолученыУспешно = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ФайлыПолученыУспешно Тогда
		ФайлыПолученыУспешно = РаспаковатьДистрибутивОбновления();
	КонецЕсли;
	Если ФайлыПолученыУспешно Тогда
		РаспаковатьРекламу();
	КонецЕсли;
	Возврат ФайлыПолученыУспешно;
	
КонецФункции

// Распаковка дистрибутива обновления.
//
Функция РаспаковатьДистрибутивОбновления() 

	ЗаписатьИнформацию("Выполняется распаковка дистрибутива обновления...");
	Для Каждого Обновление Из ДоступныеОбновления Цикл
		Если ЭтоДистрибутивОбновления(Обновление.ПутьКЛокальномуФайлу) Тогда
			Попытка 
				ЧтениеZip = Новый ЧтениеZipФайла(Обновление.ПутьКЛокальномуФайлу);
				КаталогНазначения = КаталогШаблонов() + Обновление.ЛокальныйОтносительныйКаталог;
				ЧтениеZip.ИзвлечьВсе(КаталогНазначения, РежимВосстановленияПутейФайловZIP.Восстанавливать);
				ИмяФайлаОбновления = КаталогНазначения + "1cv8.cfu";
				Если НЕ ФайлСуществует(ИмяФайлаОбновления) Тогда
					ЗаписатьОшибку("Дистрибутив обновления не содержит 1cv8.cfu: " + Обновление.ПутьКЛокальномуФайлу);
					Возврат Ложь;
				КонецЕсли;
				Обновление.ПутьКЛокальномуФайлуОбновления = ИмяФайлаОбновления;
				ЗаписатьИнформацию("Файлы дистрибутива обновления успешно распакованы: " + Обновление.ПутьКЛокальномуФайлу);
			Исключение
				ЗаписатьОшибку("Ошибка при распаковке дистрибутива обновления: " + ОписаниеОшибки());
				Возврат Ложь;
			КонецПопытки;
		Иначе
			Обновление.ПутьКЛокальномуФайлуОбновления = Обновление.ПутьКЛокальномуФайлу;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;

КонецФункции 


#КонецЕсли

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С СОЕДИНЕНИЯМИ ИНФОРМАЦИОННОЙ БАЗЫ
// 

// Проверка наличия активных соединений с информационной базой.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединения есть,
//                 Ложь, если соединений нет.
//
Функция НаличиеАктивныхСоединений() Экспорт
	
	Возврат ПолучитьСоединенияИнформационнойБазы().Количество() > 1;
	
КонецФункции // НаличиеАктивныхСоединений()

// Проверка наличия соединения конфигуратором.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединение есть,
//                 Ложь, если соединения нет.
//
Функция НаличиеСоединенияКонфигуратором() Экспорт
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоСоединениеКонфигуратором(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции 

Функция ЭтоСоединениеКонфигуратором(СоединениеИнформационнойБазы) Экспорт
	
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("Designer");
	
КонецФункции 

Функция ЭтоCOMСоединение(СоединениеИнформационнойБазы) Экспорт
	
	Возврат ВРег(СоединениеИнформационнойБазы.ИмяПриложения) = ВРег("COMConnection");
	
КонецФункции 
	
Функция НаличиеCOMСоединений() Экспорт
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого Соединение Из МассивСоединений Цикл
		Если ЭтоCOMСоединение(Соединение) Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции 

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПРОВЕРКИ АВТОРИЗАЦИИ
// 

Функция ПроверитьДоступКИБ(Знач ВыдаватьСообщения = Истина) Экспорт

	Результат = Истина;
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля обновление завершится неуспешно.
	Если ЭтоБазоваяВерсияКонфигурации() Тогда
		Возврат Результат;
	КонецЕсли; 
	Параметры = ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	ComConnector = Новый COMОбъект(УправлениеСоединениямиИБ.ИмяCOMСоединителя());
	Попытка
		СтрокаСоединенияИнформационнойБазы = УправлениеСоединениямиИБ.ПолучитьСтрокуСоединенияИнформационнойБазы(
			?(НестандартныеПортыСервера, ПортКластераСерверов, 0)) + Параметры.СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
	Исключение
		Результат = Ложь;
		ОписаниеОшибки = ОписаниеОшибки();
#Если Клиент Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение("Ошибка при проверке подключения к информационной базе." + 
				Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли; 
#КонецЕсли
		ЗаписатьОшибку("Ошибка при проверке подключения к информационной базе." + Символы.ПС + ОписаниеОшибки);
	КонецПопытки;	
	
	Если Результат И НЕ ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
		Результат = ПроверитьДоступККластеру(ВыдаватьСообщения);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции 

Функция ПроверитьИУстановитьПарольАдминистратора(Знач ВыдаватьСообщения = Истина) Экспорт

	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	Если ТекущийПользователь.АутентификацияОС И НЕ ТекущийПользователь.АутентификацияСтандартная Тогда
	
		ТекущийПользователь.АутентификацияСтандартная = Истина;
		ТекущийПользователь.Пароль = ПарольАдминистратораИБ;
		Попытка
			ТекущийПользователь.Записать();
		Исключение
#Если Клиент Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(ОписаниеОшибки());
			КонецЕсли;
#КонецЕсли
			Возврат Ложь;
		КонецПопытки;
		
	КонецЕсли; 
	
	Возврат Истина;
	
КонецФункции 

Функция ПроверитьДоступККластеру(Знач ВыдаватьСообщения = Истина)

	Параметры = ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	Результат = УправлениеСоединениямиИБ.ПроверитьПараметрыАдминистрированияИБ(
		УправлениеСоединениямиИБ.НовыеПараметрыАдминистрированияИБ(Параметры.ИмяПользователя,
			Параметры.ПарольПользователя, 
			?(КластерТребуетАутентификации, ИмяАдминистратораКластера, ""), 
			?(КластерТребуетАутентификации, ПарольАдминистратораКластера, ""),
			?(НестандартныеПортыСервера, ПортКластераСерверов, 0),
			?(НестандартныеПортыСервера, ПортАгентаСервера, 0)), 
		ВыдаватьСообщения);	
		
	Если НЕ Результат Тогда
		ЗаписатьОшибку("Ошибка при проверке соединения с кластером серверов.");
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции 

// Получение параметров аутентификации пользователя для обновления.
// Создает виртуального пользователя, если в этом есть необходимость.
//
// Возвращаемое значение
//  Структура       - параметры виртуального пользователя
//
Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления() 

	Результат = Новый Структура("Пользователь,
								|ИмяПользователя,
								|ПарольПользователя,
								|СтрокаПодключения,
								|ПараметрыАутентификации",
								Неопределено, "", "", "", "");
								
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Результат.Пользователь = Пользователь;
	Результат.ИмяПользователя = Пользователь.Имя;
	Результат.ПарольПользователя = ПарольАдминистратораИБ;
	Результат.СтрокаПодключения = "Usr=""" + Пользователь.Имя + """;Pwd=""" + ПарольАдминистратораИБ + """;";
	Результат.ПараметрыАутентификации = "/N""" + Пользователь.Имя + """ /P""" + ПарольАдминистратораИБ + """ /WA-";
	Возврат Результат;
	
КонецФункции

Функция ЗапрашиватьПарольАдминистратора() Экспорт
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ЕстьПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0;
	Возврат ЕстьПользователи И 
		((ТекущийПользователь.ПарольУстановлен И ТекущийПользователь.АутентификацияСтандартная) ИЛИ
		(ТекущийПользователь.АутентификацияОС И НЕ ТекущийПользователь.АутентификацияСтандартная));
		
КонецФункции

Функция ВводитьПарольАдминистратора() Экспорт
	
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	ЕстьПользователи = ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0;
	Возврат ЕстьПользователи И 
		(ТекущийПользователь.АутентификацияОС И НЕ ТекущийПользователь.АутентификацияСтандартная);
		
КонецФункции

//////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ КОНФИГУРАЦИИ
// 

#Если Клиент Тогда
Функция Подг(Знач Текст)
	Возврат "'" + СтрЗаменить(Текст, "\", "\\") + "'";
КонецФункции

Функция ВставитьПараметрыСкрипта(Знач Текст)
	
	Результат = Текст;
	
	ИменаФайловОбновления = "";
	Для Каждого Обновление Из ДоступныеОбновления Цикл
		ИменаФайловОбновления = ИменаФайловОбновления + Подг(Обновление.ПутьКЛокальномуФайлуОбновления) + ",";
	КонецЦикла;
	Если СтрДлина(ИменаФайловОбновления) > 0 Тогда
		ИменаФайловОбновления = Лев(ИменаФайловОбновления, СтрДлина(ИменаФайловОбновления) - 1);
	КонецЕсли;
	ИменаФайловОбновления = "[" + ИменаФайловОбновления + "]";
	
	ИмяИсполняемогоФайлаПрограммы = КаталогПрограммы() + ИмяФайлаПрограммы;
	
	Параметры = ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	СтрокаСоединенияИнформационнойБазы = 
		УправлениеСоединениямиИБ.ПолучитьСтрокуСоединенияИнформационнойБазы(
			?(НестандартныеПортыСервера, ПортКластераСерверов, 0))
		+ Параметры.СтрокаПодключения; 

	// Определение пути к информационной базе.
	ПризнакФайловогоРежима = Неопределено;
	ПутьКИнформационнойБазе = УправлениеСоединениямиИБ.ПутьКИнформационнойБазе(ПризнакФайловогоРежима, 
		?(НестандартныеПортыСервера, ПортКластераСерверов, 0));
	
	СтрокаПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима, "/F", "/S") + ПутьКИнформационнойБазе; 
		
	Результат = СтрЗаменить(Результат, "[ИменаФайловОбновления]", ИменаФайловОбновления);
	Результат = СтрЗаменить(Результат, "[ИмяФайлаРекламы]", Подг(?(РежимОбновления <> 2, ИмяКаталогаРекламы + ФайлРекламы, "")));
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаПрограммы]", Подг(ИмяИсполняемогоФайлаПрограммы));
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКИнформационнойБазе]", Подг(СтрокаПутиКИнформационнойБазе));
	Результат = СтрЗаменить(Результат, "[СтрокаСоединенияИнформационнойБазы]", Подг(СтрокаСоединенияИнформационнойБазы));
	Результат = СтрЗаменить(Результат, "[ПараметрыАутентификацииПользователя]", Подг(Параметры.ПараметрыАутентификации));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораИБ]", Подг(Параметры.ИмяПользователя));
	Результат = СтрЗаменить(Результат, "[ПарольАдминистратораИБ]", Подг(Параметры.ПарольПользователя));
	Результат = СтрЗаменить(Результат, "[СобытиеЖурналаРегистрации]", Подг(СобытиеЖурналаРегистрации));
	Результат = СтрЗаменить(Результат, "[АдресЭлектроннойПочты]", 
		Подг(?(РежимОбновления = 2 И ВыслатьОтчетНаПочту, АдресЭлектроннойПочты, "")));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораОбновления]", Подг(ИмяПользователя()));
	Результат = СтрЗаменить(Результат, "[СоздаватьРезервнуюКопию]", ?(СоздаватьРезервнуюКопию <> 2, "true", "false"));
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии]", 
		Подг(?(СоздаватьРезервнуюКопию = 1, ДобавитьКонечныйРазделительПути(ИмяКаталогаРезервнойКопииИБ), "")));
	Результат = СтрЗаменить(Результат, "[БлокироватьСоединенияИБ]", ?(ОпределитьЭтаИнформационнаяБазаФайловая(), "false", "true"));
	Результат = СтрЗаменить(Результат, "[ИмяCOMСоединителя]", Подг(УправлениеСоединениямиИБ.ИмяCOMСоединителя()));
	Результат = СтрЗаменить(Результат, "[ИспользоватьCOMСоединитель]", ?(ЭтоБазоваяВерсияКонфигурации(), "false", "true"));
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьФайлыСкриптаОбновления(Знач ИнтерактивныйРежим) 
	
	СоздатьКаталог(КаталогВременныхФайловОбновления);
	
	// Файл обновления конфигурации: main.js
	ШаблонСкрипта = ПолучитьМакет("МакетФайлаОбновленияКонфигурации");
	
	Скрипт = ШаблонСкрипта.ПолучитьОбласть("ОбластьПараметров");
	Скрипт.УдалитьСтроку(1);
	Скрипт.УдалитьСтроку(Скрипт.КоличествоСтрок());
	
	Текст = ШаблонСкрипта.ПолучитьОбласть("ОбластьОбновленияКонфигурации");
	Текст.УдалитьСтроку(1);
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
	
	ТекстСкрипта = ВставитьПараметрыСкрипта(Скрипт.ПолучитьТекст()) + Текст.ПолучитьТекст();	
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстСкрипта);
	
	ИмяФайлаСкрипта = КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ПолучитьМакет("ДопФайлОбновленияКонфигурации").ПолучитьТекст());
	ФайлСкрипта.Записать(КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	ИмяГлавногоФайлаСкрипта = Неопределено;
	Если ИнтерактивныйРежим Тогда
		// Вспомогательный файл: splash.bmp
		// В зависимости от версии платформы запишем заставку обновления конфигурации
		
		Если ОпределитьВерсиюПлатформы() = "8.2" Тогда
			БиблиотекаКартинок.ЗаставкаОбновленияКонфигурации82.Записать(КаталогВременныхФайловОбновления + "splash.bmp");
		Иначе
			БиблиотекаКартинок.ЗаставкаОбновленияКонфигурации.Записать(КаталогВременныхФайловОбновления + "splash.bmp");
		КонецЕсли;
		
		// Вспомогательный файл: splash.ico
		БиблиотекаКартинок.ЗначокЗаставкиОбновленияКонфигурации.Записать(КаталогВременныхФайловОбновления + "splash.ico");
		// Вспомогательный файл: progress.gif
		БиблиотекаКартинок.ДлительнаяОперация48.Записать(КаталогВременныхФайловОбновления + "progress.gif");
		// Главный файл заставки: splash.hta
		ИмяГлавногоФайлаСкрипта = КаталогВременныхФайловОбновления + "splash.hta";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ПолучитьМакет("ЗаставкаОбновленияКонфигурации").ПолучитьТекст());
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	Иначе
		ИмяГлавногоФайлаСкрипта = КаталогВременныхФайловОбновления + "updater.js";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ПолучитьМакет("НеинтерактивноеОбновлениеКонфигурации").ПолучитьТекст());
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	КонецЕсли;
	
	Возврат ИмяГлавногоФайлаСкрипта;	              
КонецФункции

// Выпол	нить обновление конфигурации.
//
Процедура ВыполнитьОбновлениеКонфигурации() Экспорт
	
	УдалитьЗадачуПланировщика(КодЗадачиПланировщика);
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления(Истина);
	ЗаписатьИнформацию("Выполняется процедура обновления конфигурации: " + ИмяГлавногоФайлаСкрипта);
	ЗаписатьСтатусОбновления(ИмяПользователя(), Истина, Ложь, Ложь);
	ОбщегоНазначения.ЗапуститьПрограмму("""" + ИмяГлавногоФайлаСкрипта + """", ПолучитьКаталогФайла(ИмяГлавногоФайлаСкрипта));
	
КонецПроцедуры 

// Запланировать обновление конфигурации
Функция ЗапланироватьОбновлениеКонфигурации() Экспорт
	
	Если НЕ УдалитьЗадачуПланировщика(КодЗадачиПланировщика) Тогда
		Возврат Ложь;
	КонецЕсли; 
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления(Ложь);
	КодЗадачиПланировщика = СоздатьЗадачуПланировщика(
		"wscript.exe //B //nologo """ + ИмяГлавногоФайлаСкрипта + """", ДатаВремяОбновления);
	ЗаписатьСтатусОбновления(ИмяПользователя(), КодЗадачиПланировщика <> 0, Ложь, Ложь);
	Возврат КодЗадачиПланировщика <> 0;
	
КонецФункции 
#КонецЕсли

// Вызывается при завершении обновления конфигурации через COM-соединение.
//
// Параметры
//  РезультатОбновления  – Булево – Результат обновления.
//
Процедура ЗавершитьОбновление(Знач РезультатОбновления, Знач ЭлектроннаяПочта, 
	Знач ИмяАдминистратораОбновления) Экспорт

	ЗаписатьИнформацию("Завершение обновления");
	Сообщение = ПроверкаПрав();
	Если НЕ ПустаяСтрока(Сообщение) Тогда
		ЗаписатьОшибку(Сообщение);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	ЗаписатьСтатусОбновления(ИмяАдминистратораОбновления, Ложь, Истина, РезультатОбновления);
	
	Если НЕ ПустаяСтрока(ЭлектроннаяПочта) Тогда
		Попытка
			ОтправитьУведомлениеОбОбновлении(ИмяАдминистратораОбновления, ЭлектроннаяПочта, РезультатОбновления);
		Исключение
			ЗаписатьОшибку("Ошибка при отправке письма электронной почты: " + ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;
	
КонецПроцедуры 

Процедура ЗаписатьСтатусОбновления(Знач ИмяАдминистратораОбновления = "", Знач ОбновлениеЗапланировано = Ложь,
	Знач ОбновлениеВыполнено = Ложь, Знач РезультатОбновления = Ложь) Экспорт

	Статус = Новый Структура("ИмяАдминистратораОбновления,
							 |ОбновлениеЗапланировано,
							 |ОбновлениеВыполнено,
							 |РезультатОбновленияКонфигурации",
							 ИмяАдминистратораОбновления,
							 ОбновлениеЗапланировано,
							 ОбновлениеВыполнено,
							 РезультатОбновления);
							 
	Константы.СтатусОбновленияКонфигурации.Установить(Новый ХранилищеЗначения(Статус));

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ПЛАНИРОВЩИК ЗАДАЧ WINDOWS
// 

#Если Клиент Тогда
// Вернуть объект WMI ОС Windows.
//
// Возвращаемое значение:
//   COM-Объект   –  SWbemServices
//
Функция ОбъектWMI()

	// WMI: http://www.microsoft.com/technet/scriptcenter/resources/wmifaq.mspx
	Локатор = Новый COMObject("WbemScripting.SWbemLocator");
	Возврат Локатор.ConnectServer(".", "\root\cimv2");

КонецФункции 
 
Функция УстановленWMI(Знач ВыдаватьСообщения = Истина) Экспорт
	
	Попытка
		Возврат ОбъектWMI() <> Неопределено;	
	Исключение
		ЗаписатьОшибку("Невозможно продолжить, так как на Вашем компьютере не установлен компонент Windows Management Instrumentation. " + ОписаниеОшибки());
		Если ВыдаватьСообщения Тогда
			ЭтотОбъект.ПолучитьФорму("ПредупреждениеWMI").ОткрытьМодально();
		КонецЕсли;
		Возврат Ложь;	
	КонецПопытки;
		
КонецФункции

// Создать задачу планировщика ОС Windows.
//
// Параметры
//  ИмяФайлаПрограммы	– Строка	– путь к запускаемому приложению или файлу.
//  ДатаВремя  			– Дата		– Дата и время запуска. Значение даты может быть 
//									  в интервале [ТекущаяДата(), ТекущаяДата() + 30 дней).
//
// Возвращаемое значение:
//   Число   – код созданной задачи планировщика или "Неопределено" при ошибке.
//
Функция СоздатьЗадачуПланировщика(Знач ИмяФайлаПрограммы, Знач ДатаВремя) 
	
	Попытка
		Планировщик = ОбъектWMI().Get("Win32_ScheduledJob");
		КодЗадачи = 0;
		КодОшибки = Планировщик.Create(ИмяФайлаПрограммы, // Command
			ПреобразоватьВремяВФорматCIM(ДатаВремя),	// StartTime
			Ложь,		// RunRepeatedly
			,           // DaysOfWeek
			Pow(2, День(ДатаВремя) - 1),         // DaysOfMonth
			Ложь, 		// InteractWithDesktop
			КодЗадачи);	// out JobId
		Если КодОшибки <> 0 Тогда	// Коды ошибок: http://msdn2.microsoft.com/en-us/library/aa389389(VS.85).aspx
			ЗаписатьОшибку("Ошибка при создании задачи планировщика: " + КодОшибки);
			КодЗадачи = 0;
		Иначе	
			ЗаписатьИнформацию("Задача планировщика успешно запланирована (" + 
			    "команда: " + ИмяФайлаПрограммы + "; " +
			    "дата: " + ДатаВремя + "; " +
			    "код задачи: " + КодЗадачи + ").");
		КонецЕсли;		
	Исключение
		ЗаписатьОшибку("Ошибка при создании задачи планировщика: " + ОписаниеОшибки());
		Возврат 0;	
	КонецПопытки;
	Возврат КодЗадачи;
  
КонецФункции

Функция ПолучитьЗадачуПланировщика(Знач КодЗадачи)

	Если КодЗадачи = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Попытка
		Возврат ОбъектWMI().Get("Win32_ScheduledJob.JobID=" + КодЗадачи);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 

КонецФункции 

Функция УдалитьЗадачуПланировщика(КодЗадачи) Экспорт
	
	Если КодЗадачи = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка
		Сервис = ОбъектWMI();
		
		Задача = ПолучитьЗадачуПланировщика(КодЗадачи);
		Если Задача = Неопределено Тогда
			КодЗадачи = 0;
			Возврат Истина;
		КонецЕсли; 
		
		КодОшибки = Задача.Delete();
		Результат = КодОшибки = 0;
		Если НЕ Результат Тогда	// Коды ошибок: http://msdn2.microsoft.com/en-us/library/aa389957(VS.85).aspx
			ЗаписатьОшибку("Ошибка при удалении задачи планировщика: " + КодОшибки);
		Иначе	
			ЗаписатьИнформацию("Задача планировщика успешно удалена (код задачи: " + КодЗадачи + ").");
			КодЗадачи = 0;
		КонецЕсли;		
		
		Возврат Результат;
	Исключение
		ЗаписатьОшибку("Ошибка при удалении задачи планировщика: " + ОписаниеОшибки());
		Возврат Ложь;	
	КонецПопытки;

КонецФункции	

Функция ПреобразоватьВремяВФорматCIM(ДатаВремя)
	
	Локатор = Новый COMObject("WbemScripting.SWbemLocator");
	Сервис = Локатор.ConnectServer(".", "\root\cimv2");
	ComputerSystems = Сервис.ExecQuery("Select * from Win32_ComputerSystem");
	Для Каждого ComputerSystem Из ComputerSystems Цикл
		Разница = ComputerSystem.CurrentTimeZone;
		Час = Формат(ДатаВремя,"ДФ=ЧЧ");
		Минута = Формат(ДатаВремя,"ДФ=мм");
		Разница = ?(Разница > 0, "+" + Формат(Разница, "ЧГ=0"), Формат(Разница, "ЧГ=0"));
		Возврат "********" + Час + Минута + "00.000000" + Разница;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

Функция ПроверитьДопустимуюДатуОбновления(ДатаВремя, ВыдаватьСообщения = Истина) Экспорт
	
	Сейчас = ТекущаяДата();
	Если ДатаВремя < Сейчас Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение("Обновление конфигурации может быть запланировано только на будущую дату и время.");
		КонецЕсли;	
		Возврат Ложь;
	КонецЕсли;
	Если ДатаВремя > ДобавитьМесяц(Сейчас, 1) Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение("Обновление конфигурации может быть запланировано не позднее, чем через месяц относительно текущей даты.");
		КонецЕсли;	
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции
#КонецЕсли

/////////////////////////////////////////////////////////////////////////////// 
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ТЕСТИРОВАНИЯ 
// 

Функция ПолучитьНастройкуПоИмени(Знач ИмяНастройки, Знач Зачитывать) Экспорт

	Результат = Неопределено;
#Если Клиент Тогда
	Если Зачитывать Тогда
		Результат = ВосстановитьЗначение("ОбновлениеКонфигурации_Тестирование_" + ИмяНастройки);
	КонецЕсли;
#КонецЕсли	
	Возврат Результат;
	
КонецФункции
 
Функция АдресСервераДляПроверкиНаличияОбновления(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("АдресСервераДляПроверкиНаличияОбновления", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.АдресСервераДляПроверкиНаличияОбновления();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция АдресРесурсовДляПроверкиНаличияОбновления(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("АдресРесурсовДляПроверкиНаличияОбновления", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.АдресРесурсовДляПроверкиНаличияОбновления();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция АдресСервераОбновлений(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("АдресСервераОбновлений", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.АдресСервераОбновлений();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция АдресКаталогаШаблоновНаСервереОбновлений(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("АдресКаталогаШаблоновНаСервереОбновлений", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.АдресКаталогаШаблоновНаСервереОбновлений();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция ИспользоватьАльтернативныйИсточникПолученияОбновлений(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("ИспользоватьАльтернативныйИсточникПолученияОбновлений", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.ИспользоватьАльтернативныйИсточникПолученияОбновлений();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция АльтернативныйСерверОбновлений(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("АльтернативныйСерверОбновлений", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.АльтернативныйСерверОбновлений();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция АльтернативныйКаталогШаблоновНаСервереОбновлений(Знач ЗачитыватьИзНастройки = Истина) Экспорт 
	Результат = ПолучитьНастройкуПоИмени("АльтернативныйКаталогШаблоновНаСервереОбновлений", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.АльтернативныйКаталогШаблоновНаСервереОбновлений();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

Функция ИспользоватьОбновлениеСДискаИТС(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("ИспользоватьОбновлениеСДискаИТС", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = ОбновлениеКонфигурации.ИспользоватьОбновлениеСДискаИТС();
	КонецЕсли;
	Возврат Результат;
КонецФункции 

#Если Клиент Тогда
Функция ПутьКДискуИТС(Знач ЗачитыватьИзНастройки = Истина) Экспорт
	Результат = ПолучитьНастройкуПоИмени("ПутьКДискуИТС", ЗачитыватьИзНастройки);
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = НайтиДискИТС(); 
	КонецЕсли;
	Возврат Результат;
КонецФункции 
#КонецЕсли

//////////////////////////////////////////////////////////////////////////////// 
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ
// 

ИмяZipФайлаСпискаШаблонов  = "v8upd11.zip";
ИмяФайлаСпискаШаблонов     = "v8cscdsc.xml";
ИмяФайлаОписанияОбновления = "news.htm";
ИмяФайлаПорядкаОбновления  = "update.htm";

КаталогОбновленияИТС	   = "1CitsFr\EXE\V8\V8CONFIG81\";
КаталогОбновленияКонфигурацииИТС = КаталогОбновленияИТС + ОбновлениеКонфигурации.КороткоеИмяКонфигурации() + "\";

// Имена служебных файлов
ИмяФайлаПрограммы                        = "1cv8.exe";

// Реклама
ФайлАрхиваРекламы = "INDEX.ZIP";
ФайлРекламы       = "index.htm";

СобытиеЖурналаРегистрации = "Обновление информационной базы";
