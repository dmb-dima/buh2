#Если ТолстыйКлиентОбычноеПриложение Тогда

Перем ДатаПереходаНа534 Экспорт;

Перем СоответствиеТипаСообщенияКраткомуПредставлению;

Перем ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота Экспорт;
Перем ПолученныеТранспортныеСообщения Экспорт;
Перем ПолученныеПисьма Экспорт;
Перем ЗапросыПоКоторымПолученыОтветы Экспорт;

Перем СвойстваСертификатов;
Перем ПодменяющиеФормы;

Перем КомпонентаЗагружена Экспорт;

Перем Криптопровайдеры;

////////////////////////////////////////////////////////////////////////////////
// СОЗДАНИЕ ОБЪЕКТОВ ИЗ ВНЕШНЕЙ КОМПОНЕНТЫ ОБМЕНА

Функция ЗагрузитьКомпонентуОбменаСНалоговымиОрганами() Экспорт
	
	// если компонента уже загружалась, то вернем признак загрузки компоненты
	Если КомпонентаЗагружена <> Неопределено Тогда
		Возврат КомпонентаЗагружена;
	КонецЕсли;
	
	ПолноеИмяФайлаКомпоненты = КаталогПрограммы() + "ExtIntgr.dll";
	
	Попытка
		ВремФайл = ПолучитьИмяВременногоФайла();
		ПолучитьМакет("КомпонентаОбмена").Записать(ВремФайл);
		ПереместитьФайл(ВремФайл, ПолноеИмяФайлаКомпоненты);
		УдалитьФайлы(ВремФайл);
	Исключение
		
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		
		ОбъектФайлКомпоненты = Новый Файл(ПолноеИмяФайлаКомпоненты);
		Если ОбъектФайлКомпоненты.Существует() Тогда
			
			ВремФайл2 = ПолучитьИмяВременногоФайла();
			Попытка
				КопироватьФайл(ПолноеИмяФайлаКомпоненты, ВремФайл2);
				ОбъектСравнение = Новый СравнениеФайлов;
				ОбъектСравнение.ПервыйФайл = ВремФайл;
				ОбъектСравнение.ВторойФайл = ВремФайл2;
				ОбъектСравнение.СпособСравнения = СпособСравненияФайлов.Двоичное;
				СледуетУведомитьОбОшибке = НЕ ОбъектСравнение.Сравнить();
			Исключение
				СледуетУведомитьОбОшибке = Истина;
			КонецПопытки;
			
		Иначе
			СледуетУведомитьОбОшибке = Истина;
		КонецЕсли;
		
		Если СледуетУведомитьОбОшибке Тогда
			Сообщить("В каталоге программы (""" + КаталогПрограммы() + """) не удалось обновить компоненту ExtIntgr.dll.
					|Компонента используется в механизме защищенного документооборота с контролирующими органами.
					|Во избежание сбоев в работе механизма, рекомендуется завершить все сеансы ""1С:Предприятие 8"" и запустить их заново."
					+ ?(ЗначениеЗаполнено(ОписаниеОшибки), Символы.ПС + Символы.ПС + "Подробнее об ошибке:"  + Символы.ПС + ОписаниеОшибки, ОписаниеОшибки),
					СтатусСообщения.Информация);
		КонецЕсли;
				
	КонецПопытки;
	
	Попытка
		ЗагрузитьВнешнююКомпоненту("ExtIntgr.dll");
	Исключение
		Сообщить("Не удалось загрузить внешнюю компоненту для документооборота с налоговыми органами:
				|" + ИнформацияОбОшибке().Описание + "
				|
				|Функции документооборота будут недоступны в текущем сеансе.", СтатусСообщения.Важное);
		КомпонентаЗагружена = Ложь;
		Возврат Ложь;
	КонецПопытки;
	
	КомпонентаЗагружена = Истина;
	Возврат Истина;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСПочтой(ТихийРежим = Ложь) Экспорт
	
	Если КомпонентаЗагружена = Ложь Тогда // попытка загрузки компоненты завершилась неудачно
		Возврат Неопределено;
	ИначеЕсли КомпонентаЗагружена = Неопределено Тогда // компонента на загружалась
		Если НЕ ЗагрузитьКомпонентуОбменаСНалоговымиОрганами() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ОбъектПочта = Новый("Addin.InternetMailS");
		ОбъектПочта.НеВыводитьСообщенияОбОшибках = Ложь;
		ОбъектПочта.СпособКодированияНеASCIIСимволов = 1;
		Возврат ОбъектПочта;
	Исключение
		Если НЕ ТихийРежим Тогда
			Сообщить("Не удалось создать объект для работы с электронной почтой:", СтатусСообщения.Важное);
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСКриптографией(ТихийРежим = Ложь) Экспорт
	Перем ИмяКриптопровайдера, ТипКриптопровайдера;
	
	Если КомпонентаЗагружена = Ложь Тогда // попытка загрузки компоненты завершилась неудачно
		Возврат Неопределено;
	ИначеЕсли КомпонентаЗагружена = Неопределено Тогда // компонента на загружалась
		Если НЕ ЗагрузитьКомпонентуОбменаСНалоговымиОрганами() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// создаем объект для работы с криптографией
	Попытка
		Крипт = Новый("Addin.CryptS");
		Крипт.НеВыводитьСообщенияОбОшибках = Ложь;
	Исключение
		Если НЕ ТихийРежим Тогда
			Сообщить("Не удалось создать объект для работы с криптографией:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
	// инициализируем список криптопровайдеров, если он еще не был инициализирован
	Если НЕ ЗначениеЗаполнено(Криптопровайдеры) Тогда
		Криптопровайдеры = Новый ТаблицаЗначений;
		Криптопровайдеры.Колонки.Добавить("Имя");
		Криптопровайдеры.Колонки.Добавить("Тип");
		Пока Крипт.ПолучитьСледующийКриптопровайдер(ИмяКриптопровайдера, ТипКриптопровайдера) Цикл
			НовСтр = Криптопровайдеры.Добавить();
			НовСтр.Имя = ИмяКриптопровайдера;
			НовСтр.Тип = ТипКриптопровайдера;
		КонецЦикла;
	КонецЕсли;
	
	// ищем криптопровайдера в системе
	ПараметрыКриптографии = ПолучитьПараметрыКриптографии();
	КонстИмяКриптопровайдера = ПараметрыКриптографии["ИмяКриптопровайдера"];
	КонстТипКриптопровайдера = ПараметрыКриптографии["ТипКриптопровайдера"];
	Для Каждого СтрКриптопровайдер Из Криптопровайдеры Цикл
		Если СокрЛП(КонстИмяКриптопровайдера) = СокрЛП(СтрКриптопровайдер.Имя) И КонстТипКриптопровайдера = СтрКриптопровайдер.Тип Тогда
			Крипт.ИмяКриптопровайдера = КонстИмяКриптопровайдера;
			Крипт.ТипКриптопровайдера = КонстТипКриптопровайдера;
			Возврат Крипт;
		КонецЕсли;
	КонецЦикла;
	
	// если криптопровайдер не найден, то сообщим об этом пользователю
	Если НЕ ТихийРежим Тогда
		Сообщить("Криптопровайдер """ + КонстИмяКриптопровайдера + """ (тип: " + КонстТипКриптопровайдера + ") не установлен в системе.", СтатусСообщения.Важное);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСДвоичнымиДанными(ТихийРежим = Ложь) Экспорт
	
	Если КомпонентаЗагружена = Ложь Тогда // попытка загрузки компоненты завершилась неудачно
		Возврат Неопределено;
	ИначеЕсли КомпонентаЗагружена = Неопределено Тогда // компонента на загружалась
		Если НЕ ЗагрузитьКомпонентуОбменаСНалоговымиОрганами() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанные = Новый("Addin.BinaryDataS");
		ДвоичныеДанные.НеВыводитьСообщенияОбОшибках = Ложь;
		Возврат ДвоичныеДанные;
	Исключение
		Если НЕ ТихийРежим Тогда
			Сообщить("Не удалось создать объект для работы с двоичными данными:", СтатусСообщения.Важное);
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СоздатьОбъектДляРаботыСАрхивами() Экспорт
	
	Если КомпонентаЗагружена = Ложь Тогда // попытка загрузки компоненты завершилась неудачно
		Возврат Неопределено;
	ИначеЕсли КомпонентаЗагружена = Неопределено Тогда // компонента на загружалась
		Если НЕ ЗагрузитьКомпонентуОбменаСНалоговымиОрганами() Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ЗИП = Новый("Addin.ZipS");
		ЗИП.НеВыводитьСообщенияОбОшибках = Ложь;
		Возврат ЗИП;
	Исключение
		Сообщить("Не удалось создать объект для работы с архивами:", СтатусСообщения.Важное);
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСообщенияВведенныеНаОсновании(Сообщение, Тип = Неопределено) Экспорт
	
	Результат = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.Основание = &Основание
	                      |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления");
	Запрос.УстановитьПараметр("Основание", Сообщение);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Если Тип <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И ТранспортноеСообщение.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", Тип);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеТранспортногоСообщения(Сообщение) Экспорт
	
	Если ЗначениеЗаполнено(Сообщение.ЦиклОбмена) Тогда
		Возврат "" + Сообщение.Тип + ", связанное с циклом обмена " + Сообщение.ЦиклОбмена;
	Иначе
		Возврат Сообщение;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСообщения(Сообщение) Экспорт
	
	Тема = ?(ПустаяСтрока(Сообщение.Тема), "<тема не указана>", """" + Сообщение.Тема + """");
	Если ЗначениеЗаполнено(Сообщение.Дата) Тогда
		Возврат Тема + " от " + Сообщение.Дата;
	Иначе
		Возврат Тема;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, ТипыСообщений = Неопределено, ПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка,
	                      |	ТранспортноеСообщение.Статус,
	                      |	ТранспортноеСообщение.Тип,
	                      |	ТранспортноеСообщение.ПометкаУдаления,
	                      |	ТранспортноеСообщение.Дата,
	                      |	ТранспортноеСообщение.ИдентификаторСообщения,
	                      |	ТранспортноеСообщение.ДатаТранспорта,
	                      |	ТранспортноеСообщение.Основание,
	                      |	ТранспортноеСообщение.ПротоколСОшибкой,
	                      |	ТранспортноеСообщение.Тема
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	Если НЕ ПомеченныеНаУдаление Тогда
		Запрос.Текст = Запрос.Текст + "
		                      |	И ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления";
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	КонецЕсли;
	
	Если ТипыСообщений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		                      |	И ТранспортноеСообщение.Тип В (&ТипыСообщений)";
		Запрос.УстановитьПараметр("ТипыСообщений", ТипыСообщений);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция СоздатьПодтверждение(Основание) Экспорт
	
	НовоеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	Попытка
		НовоеСообщение.Заполнить(Основание);
	Исключение
		Сообщить("Не удалось создать подтверждение на сообщение " + ПредставлениеСообщения(Основание) + "!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	Если НовоеСообщение.ОшибкаЗаполнения <> Истина Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция РассчитатьСтатусЦиклаОбмена(ЦиклОбмена) Экспорт
	
	ТекСтатус = Перечисления.СтатусыОтправки.ПустаяСсылка();
	Если ТипЗнч(ЦиклОбмена) = Тип("СправочникОбъект.ЦиклыОбмена") И (ЦиклОбмена.ЭтоНовый() ИЛИ ЦиклОбмена.Тип <> Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность) Тогда
		Возврат ТекСтатус;
	КонецЕсли;
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			
			// получаем сообщения цикла обмена
			СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
			
			// анализируем, отправлено ли первичное
			ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, "Тип");
			Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
				Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
					ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
				Иначе
					Возврат ТекСтатус;
				КонецЕсли;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
			
			// анализируем, получено ли подтверждение отправки
			ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, "Тип");
			Если ПодтверждениеОтправки = Неопределено Тогда
				Возврат ТекСтатус;
			КонецЕсли;
			
			// анализируем, получено ли извещение о получении декларации
			ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, "Тип");
			Если ПодтверждениеДоставки = Неопределено Тогда
				Возврат ТекСтатус;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
			// анализируем протоколы приема
			// если их несколько, то интересует последний
			ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО));
			ЧислоПротоколов = ПротоколыПриема.Количество();
			Если ЧислоПротоколов = 0 Тогда
				Возврат ТекСтатус;
			ИначеЕсли ЧислоПротоколов = 1 Тогда
				ПротоколПриема = ПротоколыПриема[0];
				Если ПротоколПриема.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
			Иначе
				
				// если протоколов несколько, то ориентируемся на наиболее свежий из них
				НаиболееПозднийПротокол = Неопределено;
				ДатаНаиболееПозднегоПротокола = '00010101';
				Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
					ДатаПротоколаПриема = ПротоколПриема.Дата;
					Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
						ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
						НаиболееПозднийПротокол = ПротоколПриема;
					КонецЕсли;
				КонецЦикла;
				
				Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
				
			КонецЕсли;
			
			// анализируем протоколы обработки
			// если их несколько, то анализируем последний
			ПротоколыОбработки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО));
			ЧислоПротоколов = ПротоколыОбработки.Количество();
			Если ЧислоПротоколов = 0 Тогда
				Возврат ТекСтатус;
			ИначеЕсли ЧислоПротоколов = 1 Тогда
				ПротоколОбработки = ПротоколыОбработки[0];
				Если ПротоколОбработки.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
			Иначе
				
				// если протоколов несколько, то ориентируемся на наиболее свежий из них
				НаиболееПозднийПротокол = Неопределено;
				ДатаНаиболееПозднегоПротокола = '00010101';
				Для Каждого ПротоколОбработки Из ПротоколыОбработки Цикл
					ДатаПротоколаОбработки = ПротоколОбработки.Дата;
					Если ДатаПротоколаОбработки >= ДатаНаиболееПозднегоПротокола Тогда
						ДатаНаиболееПозднегоПротокола = ДатаПротоколаОбработки;
						НаиболееПозднийПротокол = ПротоколОбработки;
					КонецЕсли;
				КонецЦикла;
				
				Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
				
			КонецЕсли;
			
			// если все предусмотренные регламентом сообщения отправлены/приняты
			// и они без ошибок, то отчет считается сданным
			Возврат Перечисления.СтатусыОтправки.Сдан;
			
		Иначе
			
			СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
			
			ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность, "Тип");
			Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
				Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
					ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
				Иначе
					Возврат ТекСтатус;
				КонецЕсли;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
			
			ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности, "Тип");
			Если ПодтверждениеОтправки = Неопределено Тогда
				Возврат ТекСтатус;
			КонецЕсли;
			
			ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности, "Тип");
			Если ПодтверждениеДоставки = Неопределено Тогда
				Возврат ТекСтатус;
			Иначе
				ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
			ПротоколыПроверки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности));
			ЧислоПротоколов = ПротоколыПроверки.Количество();
			Если ЧислоПротоколов = 0 Тогда
				Возврат ТекСтатус;
			ИначеЕсли ЧислоПротоколов = 1 Тогда
				ПротоколПроверки = ПротоколыПроверки[0];
				Если ПротоколПроверки.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
			Иначе
				
				// если протоколов несколько, то ориентируемся на наиболее свежий из них
				НаиболееПозднийПротокол = Неопределено;
				ДатаНаиболееПозднегоПротокола = '00010101';
				Для Каждого ПротоколПроверки Из ПротоколыПроверки Цикл
					ДатаПротоколаПроверки = ПротоколПроверки.Дата;
					Если ДатаПротоколаПроверки >= ДатаНаиболееПозднегоПротокола Тогда
						ДатаНаиболееПозднегоПротокола = ДатаПротоколаПроверки;
						НаиболееПозднийПротокол = ПротоколПроверки;
					КонецЕсли;
				КонецЦикла;
				
				Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
					Возврат Перечисления.СтатусыОтправки.НеПринят;
				КонецЕсли;
				
			КонецЕсли;
			
			УведомлениеОбУточнении = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО, "Тип");
			Если УведомлениеОбУточнении = Неопределено Тогда
				УведомлениеОбУточнении = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ, "Тип");
			КонецЕсли;
			
			Если УведомлениеОбУточнении = Неопределено ИЛИ НЕ СообщениеРасшифровано(УведомлениеОбУточнении.Ссылка) Тогда
				Возврат ТекСтатус;
			ИначеЕсли УведомлениеОбУточнении.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Сдан;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, "Тип");
		Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, "Тип");
		Если ПодтверждениеОтправки = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении декларации
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, "Тип");
		Если ПодтверждениеДоставки = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем протоколы приема
		// если их несколько, то интересует последний
		ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО));
		ЧислоПротоколов = ПротоколыПриема.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПриема = ПротоколыПриема[0];
			Если ПротоколПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
				ДатаПротоколаПриема = ПротоколПриема.Дата;
				Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
					НаиболееПозднийПротокол = ПротоколПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// если все предусмотренные регламентом сообщения отправлены/приняты
		// и они без ошибок, то отчет считается сданным
		Возврат Перечисления.СтатусыОтправки.Сдан;
			
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееОтчетность = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР, "Тип");
		Если ПервичноеСообщениеСодержащееОтчетность <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееОтчетность.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтвержденияДоставки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР));
		ЧислоПодтвержденийДоставки = ПодтвержденияДоставки.Количество();
		Если ЧислоПодтвержденийДоставки = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПодтвержденийДоставки = 1 Тогда
			ПодтверждениеДоставки = ПодтвержденияДоставки[0];
			Если ПодтверждениеДоставки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПоздниееПодтверждение = Неопределено;
			ДатаНаиболееПозднегоПодтверждения = '00010101';
			Для Каждого ПодтверждениеДоставки Из ПодтвержденияДоставки Цикл
				ДатаПодтверждения = ПодтверждениеДоставки.Дата;
				Если ДатаПодтверждения >= ДатаНаиболееПозднегоПодтверждения Тогда
					ДатаНаиболееПозднегоПодтверждения = ДатаПодтверждения;
					НаиболееПоздниееПодтверждение = ПодтверждениеДоставки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПоздниееПодтверждение.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			Иначе
				Возврат Перечисления.СтатусыОтправки.Доставлен;
			КонецЕсли;
			
		КонецЕсли;
		
		ПротоколыПроверки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР));
		ЧислоПротоколов = ПротоколыПроверки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПроверки = ПротоколыПроверки[0];
			Если ПротоколПроверки.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПроверки Из ПротоколыПроверки Цикл
				ДатаПротоколаПроверки = ПротоколПроверки.Дата;
				Если ДатаПротоколаПроверки >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПроверки;
					НаиболееПозднийПротокол = ПротоколПроверки;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Перечисления.СтатусыОтправки.Сдан;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		ПервичноеСообщениеСодержащееПисьмо = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР, "Тип");
		Если ПервичноеСообщениеСодержащееПисьмо <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееПисьмо.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат Перечисления.СтатусыОтправки.ВКонверте;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР, "Тип");
		Если ПодтверждениеДоставки = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ОбращениеНП = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, "Тип");
		Если ОбращениеНП <> Неопределено Тогда
			Если ОбращениеНП.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен;
			Иначе
				Возврат ТекСтатус;
			КонецЕсли;
		Иначе
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОбращениеНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, "Тип");
		Если ПодтверждениеОбращениеНО = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении декларации
		ИзвещениеОбращениеНО = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, "Тип");
		Если ИзвещениеОбращениеНО = Неопределено Тогда
			Возврат ТекСтатус;
		Иначе
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем результаты приема
		// если их несколько, то интересует последний
		РезультатыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО));
		ЧислоСообщений = РезультатыПриема.Количество();
		Если ЧислоСообщений = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоСообщений = 1 Тогда
			РезультатПриема = РезультатыПриема[0];
			Если РезультатПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийРезультат = Неопределено;
			ДатаНаиболееПозднегоРезультата = '00010101';
			Для Каждого РезультатПриема Из РезультатыПриема Цикл
				ДатаРезультатаПриема = РезультатПриема.Дата;
				Если ДатаРезультатаПриема >= ДатаНаиболееПозднегоРезультата Тогда
					ДатаНаиболееПозднегоРезультата = ДатаРезультатаПриема;
					НаиболееПозднийРезультат = РезультатПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийРезультат.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// если все предусмотренные регламентом сообщения отправлены/приняты
		// и они без ошибок, то обращение считается успешным
		Возврат Перечисления.СтатусыОтправки.Доставлен;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		
		// получаем сообщения цикла обмена
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена.Ссылка);
		
		// анализируем, отправлено ли первичное
		ПервичноеСообщениеСодержащееЗапрос = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ЗапросНП, "Тип");
		Если ПервичноеСообщениеСодержащееЗапрос <> Неопределено Тогда
			Если ПервичноеСообщениеСодержащееЗапрос.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
				ТекСтатус = Перечисления.СтатусыОтправки.Отправлен; // если первичное отправлено, то статус - отправлено
			Иначе
				Возврат ТекСтатус; // если первичное не отпарвлено, то дальше не анализируем
			КонецЕсли;
		Иначе // если первичное отсутствует, то дальше не анализируем
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли подтверждение отправки
		ПодтверждениеОтправки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, "Тип");
		Если ПодтверждениеОтправки = Неопределено Тогда
			Возврат ТекСтатус;
		КонецЕсли;
		
		// анализируем, получено ли извещение о получении запроса
		ПодтверждениеДоставки = СообщенияЦиклаОбмена.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, "Тип");
		Если ПодтверждениеДоставки <> Неопределено Тогда
			ТекСтатус = Перечисления.СтатусыОтправки.Доставлен;
		КонецЕсли;
		
		// анализируем протоколы приема
		// если их несколько, то интересует последний
		ПротоколыПриема = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО));
		ЧислоПротоколов = ПротоколыПриема.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		ИначеЕсли ЧислоПротоколов = 1 Тогда
			ПротоколПриема = ПротоколыПриема[0];
			Если ПротоколПриема.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
		Иначе
			
			// если протоколов несколько, то ориентируемся на наиболее свежий из них
			НаиболееПозднийПротокол = Неопределено;
			ДатаНаиболееПозднегоПротокола = '00010101';
			Для Каждого ПротоколПриема Из ПротоколыПриема Цикл
				ДатаПротоколаПриема = ПротоколПриема.Дата;
				Если ДатаПротоколаПриема >= ДатаНаиболееПозднегоПротокола Тогда
					ДатаНаиболееПозднегоПротокола = ДатаПротоколаПриема;
					НаиболееПозднийПротокол = ПротоколПриема;
				КонецЕсли;
			КонецЦикла;
			
			Если НаиболееПозднийПротокол.Ссылка.ПротоколСОшибкой Тогда
				Возврат Перечисления.СтатусыОтправки.НеПринят;
			КонецЕсли;
			
		КонецЕсли;
		
		// анализируем протоколы обработки
		// если их несколько, то анализируем последний
		ПротоколыОбработки = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО));
		ЧислоПротоколов = ПротоколыОбработки.Количество();
		Если ЧислоПротоколов = 0 Тогда
			Возврат ТекСтатус;
		Иначе
			Возврат Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекСтатус;
	
КонецФункции

Процедура ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Объект, СтрогоПоДанномуЦиклуОбмена = Ложь) Экспорт
	
	// определяем цикл обмена для расчета статуса отчета
	ТипОбъекта = ТипЗнч(Объект);
	Если ТипОбъекта = Тип("ДокументСсылка.ТранспортноеСообщение") ИЛИ ТипОбъекта = Тип("ДокументОбъект.ТранспортноеСообщение") Тогда
		ЦиклОбменаОснование = Объект.ЦиклОбмена;
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
		ЦиклОбменаОснование = Объект;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПредметыПереписки = ПолучитьПредметыЦиклаОбмена(ЦиклОбменаОснование);
	Для Каждого Предмет Из ПредметыПереписки Цикл
		Если ЗначениеЗаполнено(Предмет) И Метаданные.РегистрыСведений.СтатусыОтправки.Измерения.Объект.Тип.СодержитТип(ТипЗнч(Предмет)) Тогда
			СтатусОтчета = РассчитатьСтатусОтправкиОбъекта(Предмет, ?(СтрогоПоДанномуЦиклуОбмена, ЦиклОбменаОснование, Неопределено));
			Если СтатусОтчета <> Перечисления.СтатусыОтправки.ПустаяСсылка() Тогда
				ЗаписатьСтатусОтправкиОбъекта(Предмет, СтатусОтчета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСтатусОтправкиОбъекта(докСсылка, Статус) Экспорт
	
	МенЗап = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
	МенЗап.Объект = докСсылка;
	МенЗап.Статус = Статус;
	МенЗап.Записать(Истина);
	
	Если Статус = Перечисления.СтатусыОтправки.Сдан И Метаданные.РегистрыСведений.СтатусыРегламентированныхОтчетов.Измерения.Отчет.Тип.СодержитТип(ТипЗнч(ДокСсылка)) Тогда
		РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(ДокСсылка, Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
	КонецЕсли;
	
	//Если ПолучитьСтатусРегламентированногоОтчета(докСсылка) <> Статус Тогда
		Оповестить("Изменение статуса отправки регламентированного отчета", Статус, докСсылка);
	//КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьСтатусОтправкиОбъекта(Объект, Знач ЦиклОбмена = Неопределено) Экспорт
	
	Если ЦиклОбмена = Неопределено Тогда
		ЦиклОбмена = ПолучитьПоследнийЦиклОбмена(Объект);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат РассчитатьСтатусЦиклаОбмена(ЦиклОбмена);
	Иначе
		Возврат Перечисления.СтатусыОтправки.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусОтправкиОбъекта(Док) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		                |	СтатусыОтправки.Статус
		                |ИЗ
		                |	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		                |ГДЕ
		                |	СтатусыОтправки.Объект = &Объект");
	Запрос.УстановитьПараметр("Объект", Док);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Получить(0), Перечисления.СтатусыОтправки.ПустаяСсылка());
	
КонецФункции

Функция ПолучитьСтатусыОтправкиОбъектов(Объекты) Экспорт
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		                |	СтатусыОтправки.Объект,
		                |	СтатусыОтправки.Статус
		                |ИЗ
		                |	РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		                |ГДЕ
		                |	СтатусыОтправки.Объект В (&Объект)");
	Запрос.УстановитьПараметр("Объект", Объекты);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Объект, Выборка.Статус);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоследнийЦиклОбмена(Объект) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.ТранспортноеСообщение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ТранспортноеСообщение.ЦиклОбмена,
	                      |	ТранспортноеСообщение.ЦиклОбмена.ДатаСоздания КАК ЦиклОбменаДатаСоздания
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена.Предмет = &Объект
	                      |	И ТранспортноеСообщение.ЦиклОбмена.Тип В(&Тип)
	                      |	И ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления
	                      |	И (ТранспортноеСообщение.Статус = &СтатусПолученное
	                      |			ИЛИ ТранспортноеСообщение.Статус = &СтатусОтправленное
	                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипПервичноеСодержащееОтчетность)
	                      |				И ТранспортноеСообщение.Статус = &СтатусИсходящее)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ТранспортноеСообщение.ЦиклОбмена,
	                      |	ТранспортноеСообщение.ЦиклОбмена.ДатаСоздания
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена.Тип В(&Тип)
	                      |	И ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления
	                      |	И (ТранспортноеСообщение.Статус = &СтатусПолученное
	                      |			ИЛИ ТранспортноеСообщение.Статус = &СтатусОтправленное
	                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипПервичноеСодержащееОтчетность)
	                      |				И ТранспортноеСообщение.Статус = &СтатусИсходящее)
	                      |	И &Объект В (ТранспортноеСообщение.ЦиклОбмена.ДополнительныеПредметы.Предмет)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЦиклОбменаДатаСоздания УБЫВ");
	Запрос.УстановитьПараметр("Объект", Объект);
	
	ТипМассив = Новый Массив;
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ТипМассив.Добавить(Перечисления.ТипыЦикловОбмена.ИОН);
	Запрос.УстановитьПараметр("Тип", ТипМассив);
	
	ТипМассивПервичное = Новый Массив;
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
	ТипМассивПервичное.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
	Запрос.УстановитьПараметр("ТипПервичноеСодержащееОтчетность", ТипМассивПервичное);
	
	Запрос.УстановитьПараметр("СтатусПолученное", Перечисления.СтатусыПисем.Полученное);
	Запрос.УстановитьПараметр("СтатусОтправленное", Перечисления.СтатусыПисем.Отправленное);
	Запрос.УстановитьПараметр("СтатусИсходящее", Перечисления.СтатусыПисем.Исходящее);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ЦиклОбмена) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
			Возврат Выборка.ЦиклОбмена;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.ЦиклыОбмена.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьПустуюДатуЗавершенияЦиклаОбмена() Экспорт
	
	Возврат '39991231235959';
	//Возврат '29991231235959';
	
КонецФункции

Функция СформироватьСтрокуСостоянияТранспортногоСообщения(Сообщение) Экспорт
	
	Если Сообщение = Неопределено ИЛИ Сообщение = Документы.ТранспортноеСообщение.ПустаяСсылка() ИЛИ НЕ ЗначениеЗаполнено(Сообщение.Статус) Тогда
		Возврат "<Подтверждение отсутствует, нажмите для создания>";
	КонецЕсли;
	
	СоответствиеТипаСообщенияПредставлению = Новый Соответствие;
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность,												"Первичное сообщение, содержащее файл отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности,														"Подтверждение отправки файла отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности,										"Переподписанное налогоплательщиком подтверждение отправки файла отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности,														"Квитанция о приеме файла отчетности налоговым органом");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности,													"Протокол входного контроля файла отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности,									"Переподписанный налогоплательщиком протокол входного контроля файла отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО,															"Уведомление об уточнении отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ,																		"Протокол приема 2-НДФЛ");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП,																		"Первичное сообщение, содержащее отчетность");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО,																"Извещение о получении отчета");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО,															"Результат приема декларации");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"Извещение о получении результата приема");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО,														"Результат обработки декларации");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"Извещение о получении результата обработки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"Извещение о получении подтверждения даты отправки");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП,																		"Первичное сообщение, содержащее сведения формы 2-НДФЛ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО,																"Извещение о получении формы 2-НДФЛ");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО,															"Результат приема формы 2-НДФЛ");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП,																			"Обращение налогоплательщика");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО,																"Извещение о получении обращения");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО,															"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО,															"Результат приема обращения");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО,																			"Письмо налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП,																	"Извещение о получении письма налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО,																			"Рассылка налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП,																	"Извещение о получении рассылки налогового органа");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО,															"Первичное сообщение, содержащее документ налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО,											"Подтверждение приема документа налогового органа");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика,											"Первичное сообщение, содержащее документ налогоплательщика");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика,					"Подтверждение отправки документа налогоплательщика");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика,	"Переподписанное налогоплательщиком подтверждение отправки от налогового органа");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика,					"Квитанция о доставке документа в налоговый орган");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН,																			"Первичное сообщение, содержащее запрос на информационное обслуживание");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН,														"Подтверждение отправки запроса на информационное обслуживание");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН,										"Переподписанное налогоплательщиком подтверждение отправки запроса на информационное обслуживание");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН,															"Квитанция о доставке запроса на информационное обслуживание в налоговый орган");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН,													"Протокол входного контроля запроса на информационное обслуживание");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН,									"Переподписанный налогоплательщиком протокол входного контроля запроса на информационное обслуживание");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН,																	"Ответ налогового органа на запрос на информационное обслуживание");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН,														"Переподписанный налогоплательщиком ответ налогового органа на запрос на информационное обслуживание");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП,																			"Первичное сообщение, содержащее запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО,																	"Извещение о получении запроса");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО,																"Результат приема запроса");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"Извещение о получении результата приема");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО,															"Ответ на запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"Извещение о получении ответа на запрос");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО,																"Подтверждение даты отправки");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"Извещение о получении подтверждения даты отправки");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР,											"Первичное сообщение, содержащее отчетность");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР,													"Квитанция о доставке отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР,																			"Протокол контроля отчетности");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР,																"Квитанция о доставке протокола контроля");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР,																	"Первичное сообщение, содержащее письмо в ПФР");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР,															"Квитанция о доставке письма");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР,																	"Первичное сообщение, содержащее письмо от ПФР");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР,															"Квитанция о доставке письма");
	
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка,																	"Сообщение о критической ошибке");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР,																"Уведомление об ошибке");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС,																"Уведомление об ошибке");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Прочее,																				"Прочее сообщение");
	СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка(),																		"Сообщение неизвестного типа");
	
	СоответствиеТипаСообщенияОкончанию = Новый Соответствие;
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность,												"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности,										"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности,														"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности,													"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности,									"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ,																		"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП,																		"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО,															"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО,														"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП,																		"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО,															"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО,															"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП,																	"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО,																			"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП,																	"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР,											"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР,													"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР,																			"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР,																"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО,											"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР,															"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика,											"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика,					"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика,	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика,					"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР,															"а");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН,										"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН,															"а");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН,													"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН,									"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН,																	"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН,														"");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП,																			"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО,																"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,															"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО,															"");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,														"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,															"о");
	
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка,																	"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС,																"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.Прочее,																				"о");
	СоответствиеТипаСообщенияОкончанию.Вставить(Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка(),																		"о");
	
	ПредставлениеТипа = СоответствиеТипаСообщенияПредставлению[Сообщение.Тип];
	Если ПредставлениеТипа = Неопределено Тогда
		ПредставлениеТипа = "Сообщение неизвестного типа";
	КонецЕсли;
	
	ТипСообщения = Сообщение.Тип;
	
	Статус = Сообщение.Статус;
	Окончание = СоответствиеТипаСообщенияОкончанию[ТипСообщения];
	Если Окончание = Неопределено Тогда
		Окончание = "о";
	КонецЕсли;
	
	ЭтоОшибкаИлиПрочееСообщение = (ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
									ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Прочее);
	
	Если Статус = Перечисления.СтатусыПисем.Сохраненное Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Создан" + Окончание + ?(НЕ ЭтоОшибкаИлиПрочееСообщение И СообщениеЗашифровано(Сообщение.Ссылка), ", зашифрован" + Окончание, "") + ", но не отправлен" + Окончание + ".";
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Исходящее Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Создан" + Окончание + ?(НЕ ЭтоОшибкаИлиПрочееСообщение И СообщениеЗашифровано(Сообщение.Ссылка), ", зашифрован" + Окончание, "") + ", но не отправлен" + Окончание + ".";
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Отправленное Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Отправлен" + Окончание + " " + Формат(Сообщение.ДатаТранспорта, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'") + ".";
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Полученное Тогда
		ТекстДопИнформация = ПредставлениеТипа + ". Получен" + Окончание + " " + Формат(Сообщение.ДатаТранспорта, "ДФ='дд.ММ.гггг ЧЧ:мм:сс'") + "." + ?(ЭтоОшибкаИлиПрочееСообщение ИЛИ СообщениеРасшифровано(Сообщение.Ссылка), "", " Не расшифрован" + Окончание + ".");
	КонецЕсли;
	
	Возврат ТекстДопИнформация;
	
КонецФункции

Функция СписокДопустимыхОрганизацийВОбъектахОбмена() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.Ссылка КАК Ссылка,
	                      |	Организации.Наименование
	                      |ИЗ
	                      |	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |			Организации.Ссылка КАК Ссылка,
	                      |			Организации.Наименование КАК Наименование,
	                      |			Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗаписьОбмена
	                      |		ИЗ
	                      |			Справочник.Организации КАК Организации
	                      |		ГДЕ
	                      |			Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |			И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗапись) КАК Организации
	                      |		ПО ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = Организации.УчетнаяЗаписьОбмена
	                      |ГДЕ
	                      |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись.ПометкаУдаления = &ПометкаУдаления
	                      |	И ПользователиУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
	                      |	И (НЕ Организации.Ссылка ЕСТЬ NULL)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Организации.Наименование");
	
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗапись", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Процедура ПоказатьСообщение(ЦиклОбмена, ТипСообщения) Экспорт
	
	// выбираем все сообщения цикла обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка,
	                      |	ТранспортноеСообщение.ДатаТранспорта,
	                      |	ТранспортноеСообщение.Тип,
	                      |	ТранспортноеСообщение.УчетнаяЗапись,
	                      |	ТранспортноеСообщение.Статус
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТранспортноеСообщение.Дата УБЫВ");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	СообщенияЦиклаОбмена = Запрос.Выполнить().Выгрузить();
	
	// из них выбираем те, которые соответствуют маске по типам
	// если возможных типов несколько то пробуем найти сообщения каждого типа поочередно
	Если ТипЗнч(ТипСообщения) = Тип("Массив") Тогда
		СообщенияИскомогоТипа = Новый Массив;
		Для Каждого ЭлТипСообщения Из ТипСообщения Цикл
			СообщенияИскомогоТипа = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", ЭлТипСообщения));
			Если СообщенияИскомогоТипа.Количество() > 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СообщенияИскомогоТипа = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", ТипСообщения));
	КонецЕсли;
	
	// если нашли, то показываем форму
	ЧислоНайденныхСообщений = СообщенияИскомогоТипа.Количество();
	Если ЧислоНайденныхСообщений = 1 Тогда
		ОткрытьЗначение(СообщенияИскомогоТипа[0].Ссылка);
		Возврат;
	ИначеЕсли ЧислоНайденныхСообщений > 1 Тогда
		
		СписокСообщений = Новый СписокЗначений;
		Для Каждого СообщениеИскомогоТипа Из СообщенияИскомогоТипа Цикл
			СписокСообщений.Добавить(СообщениеИскомогоТипа.Ссылка, ПредставлениеСообщения(СообщениеИскомогоТипа.Ссылка));
		КонецЦикла;
		
		РезультатВыбора = СписокСообщений.ВыбратьЭлемент("Выберите сообщение", СписокСообщений.Получить(0));
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		Иначе
			ОткрытьЗначение(РезультатВыбора.Значение);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// если сообщение не найдено, то показываем либо диалог со справочной информацией, либо предупреждение
	ТекДата = ТекущаяДата();
	
	// ФНС 141
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
		Предупреждение("Первичное сообщение, содержащее файл отчетности, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности Тогда
		Предупреждение("Подтверждение отправки файла отчетности отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности Тогда
		Предупреждение("Переподписанное налогоплательщиком подтверждение отправки файла отчетности отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности Тогда
		Предупреждение("Квитанция о приеме файла отчетности налоговым органом отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности Тогда
		Предупреждение("Протокол входного контроля файла отчетности отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО Тогда
		Предупреждение("Уведомление об уточнении (протокол приема), связанное с циклом обмена """ + ЦиклОбмена + """, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		Предупреждение("Подтверждение на протокол входного контроля отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО Тогда
		Предупреждение("Сообщение отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО Тогда
		Предупреждение("Сообщение, содержащее неформализованный документ, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
		Предупреждение("Подтверждение налогоплательщика на неформализованный документ налогового органа, связанное с циклом обмена """ + ЦиклОбмена + """, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		Предупреждение("Сообщение, содержащее неформализованный документ налогоплательщика и связанное с циклом обмена """ + ЦиклОбмена + """, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		Предупреждение("Подтверждение отправки неформализованного документа налогоплательщика отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		Предупреждение("Ответ на подтверждение отправки неформализованного документа налогоплательщика отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика Тогда
		Предупреждение("Подтверждение доставки неформализованного документа налогоплательщика в налоговый орган отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
		Предупреждение("Первичное сообщение, содержащее запрос на информационное обслуживание, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН Тогда
		Предупреждение("Подтверждение отправки запроса отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН Тогда
		Предупреждение("Подтверждение налогоплательщика на подтверждение отправки запроса отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН Тогда
		Предупреждение("Квитанция о приеме запроса налоговым органом отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН Тогда
		Предупреждение("Протокол входного контроля запроса отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН Тогда
		Предупреждение("Подтверждение на протокол входного контроля запроса отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
		Предупреждение("Ответ налогового органа на запрос отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН Тогда
		Предупреждение("Подтверждение налогоплательщика на ответ налогового органа на запрос отсутствует.");
		
	// ПФР
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		Предупреждение("Первичное сообщение, содержащее файл отчетности ПФР, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Предупреждение("Подтверждение получения отчетности ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Предупреждение("Протокол ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Предупреждение("Квитанция на протокол ПФР отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		Предупреждение("Первичное сообщение, содержащее письмо, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР Тогда
		Предупреждение("Квитанция на письмо отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		Предупреждение("Первичное сообщение, содержащее письмо, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		Предупреждение("Квитанция на письмо отсутствует.");
		
	// ФНС 534
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		Предупреждение("Первичное сообщение, содержащее файл отчетности, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО Тогда
		Предупреждение("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Предупреждение("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО Тогда
		Предупреждение("Извещение о получении отчета отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
		Предупреждение("Сообщение, содержащее результат приема отчета, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Предупреждение("Извещение о получении результата приема отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		Предупреждение("Сообщение, содержащее результат обработки отчета, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		Предупреждение("Извещение о получении результата обработки отчета отсутствует.");
		
	// ФНС 534 2-НДФЛ
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		Предупреждение("Первичное сообщение, содержащее сведения формы 2-НДФЛ, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		Предупреждение("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО Тогда
		Предупреждение("Извещение о получении отчета отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		Предупреждение("Сообщение, содержащее результат приема отчета, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		Предупреждение("Сообщение, содержащее обращение налогоплательщика, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		Предупреждение("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Предупреждение("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО Тогда
		Предупреждение("Извещение о получении обращения отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		Предупреждение("Сообщение, содержащее результат приема обращения, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Предупреждение("Извещение о получении результата приема отсутствует.");
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		Предупреждение("Сообщение, содержащее письмо налогового органа, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		Предупреждение("Извещение о получении письмо налогового органа отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		Предупреждение("Сообщение, содержащее рассылку налогового органа, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		Предупреждение("Извещение о получении рассылки налогового органа отсутствует.");
	
	// ФНС 534 ИОН
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		Предупреждение("Первичное сообщение, содержащее запрос, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		Предупреждение("Подтверждение даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Предупреждение("Извещение о получении подтверждения даты отправки отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО Тогда
		Предупреждение("Извещение о получении запроса отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		Предупреждение("Сообщение, содержащее результат приема запроса, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		Предупреждение("Извещение о получении результата приема отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		Предупреждение("Сообщение, содержащее ответ на запрос, отсутствует.");
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		Предупреждение("Извещение о получении ответа на запрос отсутствует.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьФормуНесуществующегоСообщения(ЦиклОбмена, ТипСообщения) Экспорт
	
	ФормаНесуществующегоСообщения = ПолучитьФорму("НесуществующееТранспортноеСообщение", , Новый УникальныйИдентификатор);
	ФормаНесуществующегоСообщения.Тип = ТипСообщения;
	ФормаНесуществующегоСообщения.ЦиклОбмена = ЦиклОбмена;
	ФормаНесуществующегоСообщения.ОткрытьМодально();
	
КонецПроцедуры

Функция ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, ТипСообщения, Основание = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.Тип = &Тип");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("Тип", ТипСообщения);
	
	Если Основание <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И ТранспортноеСообщение.Основание = &Основание";
		Запрос.УстановитьПараметр("Основание", Основание);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТранспортноеСообщение.Дата УБЫВ";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Документы.ТранспортноеСообщение.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Документы.ТранспортноеСообщение.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ВвестиПодтверждение(ЦиклОбмена, Основание = Неопределено) Экспорт
	
	Если ТипЗнч(Основание) = Тип("ПеречислениеСсылка.ТипыТранспортныхСообщений") Тогда
		СообщениеОснование = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Основание);
		ТипСообщенияОснования = Основание;
	Иначе
		СообщениеОснование = Основание;
		ТипСообщенияОснования = Основание.Тип;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СообщениеОснование) Тогда
		Предупреждение("Невозможно ввести подтверждение: отсутствует сообщение-основание!");
		Возврат Неопределено;
	КонецЕсли;
	
	// ФНС 141
	Если ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности Тогда
		ТекстВопроса = "Создать переподписанное налогоплательщиком подтверждение отправки файла отчетности?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности Тогда
		ТекстВопроса = "Создать подтверждение на протокол входного контроля?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО Тогда
		ТекстВопроса = "Создать подтверждение на неформализованный документ налогового органа?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		ТекстВопроса = "Создать подтверждение на подтверждение отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН Тогда
		ТекстВопроса = "Создать подтверждение на подтверждение отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН Тогда
		ТекстВопроса = "Создать подтверждение на протокол входного контроля?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
		ТекстВопроса = "Создать подтверждение на ответ налогового органа на Ваш запрос на информационное обслуживание?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	// ПФР
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		ТекстВопроса = "Создать подтверждение на протокол?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		ТекстВопроса = "Создать подтверждение на письмо?" + Символы.ПС + "При этом, сообщение будет записано.";
	
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП,						"Первичное сообщение, содержащее отчетность");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО,				"Извещение о получении отчета");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО,		"Результат приема декларации");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,		"Извещение о получении результата приема");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО,	"Результат обработки декларации");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,		"Извещение о получении результата обработки");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО,			"Подтверждение даты отправки");
	//СоответствиеТипаСообщенияПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,			"Извещение о получении подтверждения даты отправки");
	
	// ФНС 534
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
	ИЛИ ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	ИЛИ ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки?" + Символы.ПС + "При этом, сообщение будет записано.";
	
	// ФНС 534 НФД
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		ТекстВопроса = "Создать извещение о получении письма налогового органа?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		ТекстВопроса = "Создать извещение о получении рассылки налогового органа?" + Символы.ПС + "При этом, сообщение будет записано.";
		
	// ФНС 534 ИОН
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		ТекстВопроса = "Создать извещение о получении подтверждения даты отправки?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		ТекстВопроса = "Создать извещение о получении результата приема?" + Символы.ПС + "При этом, сообщение будет записано.";
	ИначеЕсли ТипСообщенияОснования = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		ТекстВопроса = "Создать извещение о получении результата обработки?" + Символы.ПС + "При этом, сообщение будет записано.";
	
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		НовоеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
		НовоеСообщение.Заполнить(СообщениеОснование);
		Если НовоеСообщение.ОшибкаЗаполнения <> Истина Тогда
			Возврат НовоеСообщение.Ссылка;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Процедура ПоказатьЦиклыОбменаОтчета(мСохраненныйДок) Экспорт
	
	Если мСохраненныйДок = Неопределено Тогда
		Предупреждение("Объект не записан.");
		Возврат;
	КонецЕсли;
	
	ПолучитьФорму("УправлениеОбменом").Открыть();
	Оповестить("Показать циклы обмена", мСохраненныйДок.Ссылка);
	
КонецПроцедуры

Процедура ПоказатьЦиклыОбменаОтчетаПФР(мСохраненныйДок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(мСохраненныйДок) Тогда
		Предупреждение("Объект не записан.");
		Возврат;
	КонецЕсли;
	
	ПолучитьФорму("УправлениеОбменом").Открыть();
	Оповестить("Показать циклы обмена отчета ПФР", мСохраненныйДок.Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЗАПРОСАМИ НА ИНФОРМАЦИОННОЕ ОБСЛУЖИВАНИЕ
//

Функция СформироватьЗапросНаИнформационноеОбслуживание(ДокЗапрос, Запрос, ИмяФайла) Экспорт
	
	Если ТипЗнч(ДокЗапрос) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
		ДокОбъект = ДокЗапрос.ПолучитьОбъект();
	Иначе
		ДокОбъект = ДокЗапрос;
	КонецЕсли;
	Возврат СформироватьЗапрос(ДокОбъект, Запрос, ИмяФайла);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВНЕШНИМИ ЭЛЕКТРОННЫМИ ПРЕДСТАВЛЕНИЯМИ
//

Процедура ДобавитьЭлектронноеПредставлениеВХранилище(Владелец, ИмяФайла, Данные) Экспорт
	
	ОчиститьЭлектронныеПредставленияВХранилище(Владелец);
	МенеджерЗаписи = РегистрыСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭлектронноеПредставление = Владелец;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Данные = Данные;
	МенеджерЗаписи.Размер = ОпределитьРазмер(Данные);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Процедура ОчиститьЭлектронныеПредставленияВХранилище(Владелец) Экспорт
	
	НаборЗаписей = РегистрыСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭлектронноеПредставление.Установить(Владелец);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ИзвлечьЭлектронноеПредставлениеИзХранилища(Владелец, ИмяФайла, Данные) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ИмяФайла,
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.Данные
	                      |ИЗ
	                      |	РегистрСведений.ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов КАК ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов
	                      |ГДЕ
	                      |	ХранилищеЭлектронныхПредставленийРегламентированныхОтчетов.ЭлектронноеПредставление = &ЭлектронноеПредставление");
	Запрос.УстановитьПараметр("ЭлектронноеПредставление", Владелец);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ИмяФайла = СокрЛП(Выборка.ИмяФайла);
			Данные = Выборка.Данные;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИмяФайла = "";
	Данные = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НЕФОРМАЛИЗОВАННЫМИ ДОКУМЕНТАМИ
//

Функция ПолучитьВложениеНеформализованногоДокумента(НеформализованныйДокумент, ИмяФайла, ХранилищеФайла, Тип = Неопределено, Размер = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ВложенияНеформализованныхДокументов.ИмяФайла,
	                      |	ВложенияНеформализованныхДокументов.Данные,
						  |	ВложенияНеформализованныхДокументов.Тип,
						  |	ВложенияНеформализованныхДокументов.Размер
	                      |ИЗ
	                      |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	                      |ГДЕ
	                      |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент");
	Запрос.УстановитьПараметр("НеформализованныйДокумент", НеформализованныйДокумент);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ИмяФайла = Выборка.ИмяФайла;
			ХранилищеФайла = Выборка.Данные;
			Тип = Выборка.Тип;
			Размер = Выборка.Размер;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	ИмяФайла = "";
	ХранилищеФайла = Неопределено;
	Размер = Неопределено;
	Возврат Ложь;
	
КонецФункции

Процедура ОчиститьВложенияНеформализованногоДокумента(НеформализованныйДокумент) Экспорт
	
	НаборЗаписей = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НеформализованныйДокумент.Установить(НеформализованныйДокумент);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ДобавитьВложениеНеформализованногоДокумента(НеформализованныйДокумент, ИмяФайла, ХранилищеФайла, Тип, Размер = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(НеформализованныйДокумент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(ХранилищеФайла);
	КонецЕсли;
	
	ОчиститьВложенияНеформализованногоДокумента(НеформализованныйДокумент);
	
	МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НеформализованныйДокумент = НеформализованныйДокумент;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Размер = Размер;
	
	ТипДанных = ТипЗнч(ХранилищеФайла);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		МенеджерЗаписи.Данные = ХранилищеФайла;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ХранилищеФайла), Новый СжатиеДанных(9));
	Иначе // если двоичные данные
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(ХранилищеФайла, Новый СжатиеДанных(9));
	КонецЕсли;
	Попытка
		МенеджерЗаписи.Записать(Истина);
		Возврат Истина;
	Исключение
		Сообщить("Не удалось сохранить в информационной базе вложение """ + ИмяФайла + """ неформализованного документа """ + НеформализованныйДокумент + """!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ДобавитьВложенияПисьма(Письмо, ИмяФайла, Данные, Тип, Размер = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Письмо) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НеформализованныйДокумент = Письмо;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Размер = Размер;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Данные), Новый СжатиеДанных(9));
	Иначе
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	Попытка
		МенеджерЗаписи.Записать(Истина);
		Возврат Истина;
	Исключение
		Сообщить("Не удалось сохранить в информационной базе вложение """ + ИмяФайла + """ письма """ + Письмо + """!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьСчетчикНеформализованныхДокументовНалогоплательщика(Организация, Получатель)
	
	Если ТипЗнч(Получатель) = Тип("Строка") Тогда
		ИФНСПолучателя = СокрЛП(Получатель);
	Иначе
		ИФНСПолучателя = СокрЛП(Получатель.Код);
	КонецЕсли;
	
	ЗначениеСчетчика = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СчетчикиНеформализованныхДокументовНалогоплательщика.Счетчик
	                      |ИЗ
	                      |	РегистрСведений.СчетчикиНеформализованныхДокументовНалогоплательщика КАК СчетчикиНеформализованныхДокументовНалогоплательщика
	                      |ГДЕ
	                      |	СчетчикиНеформализованныхДокументовНалогоплательщика.Период = &Период
	                      |	И СчетчикиНеформализованныхДокументовНалогоплательщика.Организация = &Организация
	                      |	И СчетчикиНеформализованныхДокументовНалогоплательщика.ИФНС = &ИФНС");
	Запрос.УстановитьПараметр("Период", НачалоГода(ТекущаяДата()));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ИФНС", ИФНСПолучателя);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			ЗначениеСчетчика = Выборка.Счетчик;
		Иначе
			Запрос.УстановитьПараметр("ИФНС", "");
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка = РезультатЗапроса.Выбрать();
				Если Выборка.Следующий() Тогда
					ЗначениеСчетчика = Выборка.Счетчик;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ?(ЗначениеСчетчика = 99999999, 1, ЗначениеСчетчика + 1);
	
КонецФункции

Процедура УстановитьСчетчикНеформализованныхДокументовНалогоплательщика(Организация, Получатель, Счетчик)
	
	МенеджерЗаписи = РегистрыСведений.СчетчикиНеформализованныхДокументовНалогоплательщика.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период = ТекущаяДата();
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ИФНС = СокрЛП(?(ТипЗнч(Получатель) = Тип("Строка"), Получатель, Получатель.Код));
	МенеджерЗаписи.Счетчик = Счетчик;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

Функция УчетнаяЗаписьОрганизации(Организация) Экспорт
	
	Если Организация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Возврат Организация.УчетнаяЗаписьОбмена;
	Иначе
		Возврат Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция СформироватьИмяНеформализованногоДокумента(Организация, Получатель, ТипДокумента)
	
	// тип документа
	Если ТипДокумента = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ТекстовыйДокумент Тогда
		ИмяДокумента = "T";
	Иначе
		ИмяДокумента = "D";
	КонецЕсли;
	
	// ИНН, КПП, код ИФНС
	ИНН = СокрЛП(Организация.ИНН);
	КПП = СокрЛП(Получатель.КПП);
	КодИФНС = СокрЛП(Получатель.Код);
	
	// код транзитной ИФНС
	// если обмен через СОС, то транзит только в случае крупнейшего налогоплательщика
	// если обмен напрямую, то транзит всегда через ИФНС учетки, т.к. пересылка неформализованных при обмене напрямую пока не поддерживается ПО ФНС
	УчетнаяЗаписьОрганизации = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗаписьОрганизации.ОбменНапрямую Тогда
		КодИФНСПолучателя = Организация.КодИФНСПолучателя;
		Если НЕ ЗначениеЗаполнено(КодИФНСПолучателя) Тогда
			КодИФНСПолучателя = КодИФНС;
		КонецЕсли;
	Иначе
		КодИФНСПолучателя = СокрЛП(УчетнаяЗаписьОрганизации.НалоговыйОрган.Код);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для организации """ + Организация + """ в справочнике не задан ИНН!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодИФНС) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Для получателя """ + Получатель + """ в справочнике не задан код ИФНС!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		ИмяДокумента = ИмяДокумента + ИНН + "_" + КодИФНСПолучателя + КодИФНС;
	Иначе
		Если НЕ ЗначениеЗаполнено(КПП) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Для получателя """ + Получатель + """ в справочнике не задан КПП!");
			Возврат Неопределено;
		КонецЕсли;
		ИмяДокумента = ИмяДокумента + ИНН + "_" + КПП + "_" + КодИФНСПолучателя + КодИФНС;
	КонецЕсли;
	
	// год
	ИмяДокумента = ИмяДокумента + "_" + Формат(ТекущаяДата(), "ДФ=yy");
	
	// номер документа в году
	Счетчик = ПолучитьСчетчикНеформализованныхДокументовНалогоплательщика(Организация, Получатель);
	УстановитьСчетчикНеформализованныхДокументовНалогоплательщика(Организация, Получатель, Счетчик);
	ИмяДокумента = ИмяДокумента + "_" + Формат(Счетчик, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=");
	
	// окончание
	ИмяДокумента = ИмяДокумента + ".doc";
	
	Возврат ИмяДокумента;
	
КонецФункции

Функция ИзвлечьИменаФайловНФДИзОписания(ФайлОписания) Экспорт
	
	// выгружаем файл на диск, при необходимости
	ТипЗнчФайлОписания = ТипЗнч(ФайлОписания);
	Если ТипЗнчФайлОписания = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ФайлОписания.Записать(ВремФайл);
		НеобходимоУдалитьФайлОписания = Истина;
	ИначеЕсли ТипЗнчФайлОписания = Тип("ХранилищеЗначения") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ФайлОписания.Получить().Записать(ВремФайл);
		НеобходимоУдалитьФайлОписания = Истина;
	Иначе
		ВремФайл = ФайлОписания;
		НеобходимоУдалитьФайлОписания = Ложь;
	КонецЕсли;
		
	// читаем содержимое
	Текст = Новый ЧтениеТекста(ВремФайл);
	СодержимоеФайлаОписания = Текст.Прочитать();
	Текст.Закрыть();
	
	// удаляем файл, при необходимости
	Если НеобходимоУдалитьФайлОписания Тогда
		УдалитьФайлы(ВремФайл);
	КонецЕсли;
	
	// анализируем файл
	Результат = Новый Соответствие;
	Для Инд = 1 По СтрЧислоСтрок(СодержимоеФайлаОписания) Цикл
		ТекСтр = СтрПолучитьСтроку(СодержимоеФайлаОписания, Инд);
		ВхождениеДвоеточия = Найти(ТекСтр, ":");
		Если ВхождениеДвоеточия <> 0 Тогда
			Ключ = Лев(ТекСтр, ВхождениеДвоеточия - 1);
			Значение = Сред(ТекСтр, ВхождениеДвоеточия + 1);
			Если НЕ ПустаяСтрока(Ключ) И НЕ ПустаяСтрока(Значение) Тогда
				Результат.Вставить(СокрЛП(Ключ), СокрЛП(Значение));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьВложенияНеформализованногоДокумента(ДокНФД, ИмяФайла = Неопределено, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВложенияНеформализованныхДокументов.ИмяФайла,
	                      |	ВложенияНеформализованныхДокументов.Размер,
	                      |	ВложенияНеформализованныхДокументов.Тип");
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
	                      |	ВложенияНеформализованныхДокументов.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                      |ИЗ
	                      |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	                      |ГДЕ
	                      |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент";
	Если ИмяФайла <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И ВложенияНеформализованныхДокументов.ИмяФайла " + ?(ТипЗнч(ИмяФайла) = Тип("Строка"), "=", "В") + " (&ИмяФайла)";
		Запрос.УстановитьПараметр("ИмяФайла", ИмяФайла);
	КонецЕсли;
	Запрос.УстановитьПараметр("НеформализованныйДокумент", ДокНФД);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ УЧЕТНОЙ ЗАПИСИ
//

Функция ИспользуютсяСъемныеКлючевыеНосители(УчетнаяЗапись) Экспорт
	
	Возврат ПолучитьНастройкуУчетнойЗаписи(УчетнаяЗапись, "ИспользуютсяСъемныеКлючевыеНосители");
	
КонецФункции

// !!! подумать над реализацией для обмен с ПФР
Функция ОпределитьОрганизациюПоУчетнойЗаписи(УчетнаяЗапись)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И Организации.ГоловнаяОрганизация = &ПустаяГоловнаяОрганизация
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И Организации.ГоловнаяОрганизация <> &ПустаяГоловнаяОрганизация");
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
	
КонецФункции

Функция ПолучитьНастройкуУчетнойЗаписи(УчетнаяЗапись, Настройка) Экспорт
	
	Запрос = Новый Запрос;
	
	ПутьКДанным = "";
	Если Настройка = "ИспользуютсяСъемныеКлючевыеНосители" Тогда
		ПутьКДанным = "УчетныеЗаписиДокументооборота.ИспользуютсяСъемныеКлючевыеНосители";
	ИначеЕсли Настройка = "ОбмениватьсяВАвтоматическомРежиме" Тогда
		ПутьКДанным = "(УчетныеЗаписиДокументооборота.ИнтервалАвтообмена <> 0) КАК АвтообменВключен";
	ИначеЕсли Настройка = "ИнтервалОбменаВАвтоматическомРежиме" Тогда
		ПутьКДанным = "УчетныеЗаписиДокументооборота.ИнтервалАвтообмена";
	ИначеЕсли Настройка = "НЕФормироватьПодтвержденияАвтоматически" Тогда
		ПутьКДанным = "УчетныеЗаписиДокументооборота.НеФормироватьПодтвержденияАвтоматически";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	УчетныхЗаписейНесколько = (ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиДокументооборота"));
	Если УчетныхЗаписейНесколько Тогда
		Результат = Новый Соответствие;
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	УчетныеЗаписиДокументооборота.Ссылка,
	                      |	" + ПутьКДанным + "
	                      |ИЗ
	                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
						  |ГДЕ
						  |	УчетныеЗаписиДокументооборота.Ссылка В (&УчетныеЗаписи)";
	Запрос.УстановитьПараметр("УчетныеЗаписи", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если УчетныхЗаписейНесколько Тогда
			Результат.Вставить(Выборка.Получить(0), Выборка.Получить(1));
		Иначе
			Возврат Выборка.Получить(1);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТРАНСПОРТНЫМИ КОНТЕЙНЕРАМИ И ИХ СОДЕРЖИМЫМ
//

Функция СоздатьТранспортныйКонтейнер(КаталогФайлов, СертификатОтКого, СертификатКому) Экспорт
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем архив
	ФайлАрхива = ПолучитьИмяВременногоФайла("zip");
	ЗИП = Новый ЗаписьZipФайла(ФайлАрхива);
	ЗИП.Добавить(КаталогФайлов + "*");
	ЗИП.Записать();
	
	// формируем файл транспортного контейнера
	ФайлВектораИнициализации = ПолучитьИмяВременногоФайла("vi");
	ФайлСессионногоКлюча = ПолучитьИмяВременногоФайла("key");
	ФайлЗашифрованныхДанных = ПолучитьИмяВременногоФайла("enc");
	
	СерийныйНомерОтКого = СертификатОтКого.СерийныйНомер;
	ПоставщикОтКого = СертификатОтКого.Поставщик;
	СерийныйНомерКому = СертификатКому.СерийныйНомер;
	ПоставщикКому = СертификатКому.Поставщик;
	
	Попытка
		Если НЕ Крипт.ПроверитьСертификат(СерийныйНомерОтКого, ПоставщикОтКого, , ) Тогда
			Сообщить("Не удалось использовать сертификат """ + ПредставлениеСертификата(СертификатОтКого) + """ отправителя для создания зашифрованного транспортного контейнера по причине его невалидности!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Сообщить("Во время проверки валидности сертификата отправителя """ + ПредставлениеСертификата(СертификатОтКого) + """ возникла исключительная ситуация!
		|Возможно, сертификат больше не зарегистрирован в системе или период его действия истек.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		Если НЕ Крипт.ПроверитьСертификат(СерийныйНомерКому, ПоставщикКому, , ) Тогда
			Сообщить("Не удалось использовать сертификат """ + ПредставлениеСертификата(СертификатКому) + """ получателя для создания зашифрованного транспортного контейнера по причине его невалидности!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	Исключение
		Сообщить("Во время проверки валидности сертификата получателя """ + ПредставлениеСертификата(СертификатКому) + """ возникла исключительная ситуация!
		|Возможно, сертификат больше не зарегистрирован в системе или период его действия истек.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// создание временного каталога для шифрования
	КаталогШифрования = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(КаталогШифрования);
	
	ФайлЗашифрованныхДанных = КаталогШифрования + "_encrypt.bin";
	ФайлВектораИнициализации = КаталогШифрования + "_iv.bin";
	ФайлВектораИнициализации2 = КаталогШифрования + "_ukm.bin";
	ФайлСессионногоКлюча = КаталогШифрования + "_skey.bin";
	
	ПараметрыКриптографии = ПолучитьПараметрыКриптографии();
	Попытка
		Крипт.Зашифровать(ФайлАрхива,
							СерийныйНомерОтКого,
							ПоставщикОтКого,
							СерийныйНомерКому,
							ПоставщикКому,
							КаталогШифрования,
							ПараметрыКриптографии["АлгоритмШифрования"],
							ПараметрыКриптографии["АлгоритмГенерацииСессионногоКлюча"]);
	Исключение
		Сообщить("Не удалось зашифровать данные транспортного контейнера!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	Конецпопытки;	
	
	ДвДанные.Очистить();
	
	// пишем версию (0х0001)
	ДвДанные.ДобавитьЧисло(1, 4);
	
	// пишем длину отпечатка сертификата (20)
	ДвДанные.ДобавитьЧисло(20, 4);
	
	// пишем отпечаток
	ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, СертификатОтКого.Отпечаток);
	
	// получаем имя владельца
	ИмяВладельцаСертификата = ПолучитьИмяВладельцаСертификата(СертификатОтКого);
	
	// пишем длину имени владельца
	ДвДанные.ДобавитьЧисло(СтрДлина(ИмяВладельцаСертификата), 4);
	
	// пишем имя владельца
	ДвДанные.ДобавитьСтроку(ИмяВладельцаСертификата);
	
	// пишем длину отпечатка сертификата (20)
	ДвДанные.ДобавитьЧисло(20, 4);
	
	// пишем отпечаток
	ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, СертификатКому.Отпечаток);
	
	// получаем имя владельца
	ИмяВладельцаСертификата = ПолучитьИмяВладельцаСертификата(СертификатКому);
	
	// пишем длину имени владельца
	ДвДанные.ДобавитьЧисло(СтрДлина(ИмяВладельцаСертификата), 4);
	
	// пишем имя владельца
	ДвДанные.ДобавитьСтроку(ИмяВладельцаСертификата);
	
	// пишем длину зашифрованного сессионного ключа
	ОбъектФайлСессионногоКлюча = Новый Файл(ФайлСессионногоКлюча);
	ДвДанные.ДобавитьЧисло(ОбъектФайлСессионногоКлюча.Размер(), 4);
	
	// пишем зашифрованный сессионный ключ
	ДвДанные.ДобавитьИзФайла(ФайлСессионногоКлюча, Истина);
	
	// пишем длину вектора инициализации
	ОбъектФайлВектораИнициализации = Новый Файл(ФайлВектораИнициализации2);
	Если НЕ ОбъектФайлВектораИнициализации.Существует() ИЛИ ОбъектФайлВектораИнициализации.Размер() = 0 Тогда
		ОбъектФайлВектораИнициализации = Новый Файл(ФайлВектораИнициализации);
	Иначе
		ФайлВектораИнициализации = ФайлВектораИнициализации2;
	КонецЕсли;
	ДвДанные.ДобавитьЧисло(ОбъектФайлВектораИнициализации.Размер(), 4);
	
	// пишем вектор инициализации
	ДвДанные.ДобавитьИзФайла(ФайлВектораИнициализации, Истина);
	
	// пишем длину зашифрованных данных
	ОбъектФайлЗашифрованныхДанных = Новый Файл(ФайлЗашифрованныхДанных);
	ДвДанные.ДобавитьЧисло(ОбъектФайлЗашифрованныхДанных.Размер(), 4);
	
	// пишем зашифрованные данные
	ДвДанные.ДобавитьИзФайла(ФайлЗашифрованныхДанных, Истина);
	
	// сохраняем транспортный контейнер в файл
	ФайлТранспортногоКонтейнера = ПолучитьИмяВременногоФайла();
	ДвДанные.Записать(ФайлТранспортногоКонтейнера);
	
	Возврат ФайлТранспортногоКонтейнера;
	
КонецФункции

Функция РасшифроватьТранспортныйКонтейнер(Сообщение, ИмяФайлаВложения, ПроверятьВалидность = Истина) Экспорт
	
	КаталогРаспакованныхФайлов = КаталогВременныхФайлов() + Строка(Новый("УникальныйИдентификатор")) + "\";
	
	// создаем объект для работы с двоичными данными
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные2 = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные2 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		// загружаем из файла
		ДвДанные.Прочитать(ИмяФайлаВложения);
		
		// считываем первые 4 байта
		Байты0_3 = ДвДанные.ПолучитьЧисло(4);
		Если Байты0_3 <> 67324752 Тогда // 67324752 = 0x04034b50 - маркер ZIP-архива
		
			// проверяем, является ли файл транспортным контейнером
			Байты4_7 = ДвДанные.ПолучитьЧисло(4);
			Если Байты4_7 <> 20 Тогда
				Сообщить("Файл вложения не является транспортным контейнером!", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
			
			// извлекаем отпечаток сертификата, с помощью которого были зашифрованы данные
			Сертификат1 = ПолучитьСвойстваСертификатаПоОтпечатку(ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
			Если Сертификат1 = Неопределено Тогда
				Сообщить("Не удалось найти сертификат отправителя для расшифровки транспортного контейнера!", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
			
			// извлекаем длину имени владельца сертификата, с помощью которого были зашифрованы данные
			ДлинаИмениВладельцаСертификата1 = ДвДанные.ПолучитьЧисло(4);
			
			// извлекаем имя владельца сертификата, с помощью которого были зашифрованы данные
			ИмяВладельцаСертификата1 = ДвДанные.ПолучитьСтроку(ДлинаИмениВладельцаСертификата1, "windows-1251");
			
			ДлинаОтпечатка2 = ДвДанные.ПолучитьЧисло(4);
			Если ДлинаОтпечатка2 <> 20 Тогда
				Сообщить("Файл не является транспортным контейнером!", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
			
			// извлекаем отпечаток сертификата, с помощью которого можно расшифровать данные
			Сертификат2 = ПолучитьСвойстваСертификатаПоОтпечатку(ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
			Если Сертификат2 = Неопределено Тогда
				Сообщить("Не удалось найти сертификат получателя для расшифровки транспортного контейнера!", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
			
			// извлекаем длину имени владельца сертификата, с помощью которого можно расшифровать данные
			ДлинаИмениВладельцаСертификата2 = ДвДанные.ПолучитьЧисло(4);
			
			// извлекаем имя владельца сертификата, с помощью которого можно расшифровать данные
			ИмяВладельцаСертификата2 = ДвДанные.ПолучитьСтроку(ДлинаИмениВладельцаСертификата2, "windows-1251");
			
			// получаем длину зашифрованного сессионного ключа
			ДлинаЗашифрованногоСессионногоКлюча = ДвДанные.ПолучитьЧисло(4);
			
			// создаем временный каталог для расшифровки
			КаталогРасшифровки = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
			СоздатьКаталог(КаталогРасшифровки);
			
			ИмяФайлаЗашифрованныхДанных = КаталогРасшифровки + "_encrypt.bin";
			ИмяФайлаВектораИнициализации = КаталогРасшифровки + "_iv.bin";
			ИмяФайлаЗашифрованногоСессионногоКлюча = КаталогРасшифровки + "_skey.bin";
			
			// получаем зашифрованный сессионный ключ
			ДвДанные2.Очистить();
			Для Кол = 1 По ДлинаЗашифрованногоСессионногоКлюча Цикл
				ДвДанные2.ДобавитьЧисло(ДвДанные.ПолучитьЧисло(1), 1);
			КонецЦикла;
			ДвДанные2.Записать(ИмяФайлаЗашифрованногоСессионногоКлюча);
			
			// получаем длину вектора инициализации
			ДлинаВектораИнициализации = ДвДанные.ПолучитьЧисло(4);
			
			// получаем вектор инициализации
			ДвДанные2.Очистить();
			Для Кол = 1 По ДлинаВектораИнициализации Цикл
				ДвДанные2.ДобавитьЧисло(ДвДанные.ПолучитьЧисло(1), 1);
			КонецЦикла;
			ДвДанные2.Записать(ИмяФайлаВектораИнициализации);
			
			// получаем длину зашифрованных данных
			ДлинаЗашифрованныхДанных = ДвДанные.ПолучитьЧисло(4);
			
			// получаем зашифрованные данные
			ДвДанные2.Очистить();
			Для Кол = 1 По ДлинаЗашифрованныхДанных Цикл
				ДвДанные2.ДобавитьЧисло(ДвДанные.ПолучитьЧисло(1), 1);
			КонецЦикла;
			ДвДанные2.Записать(ИмяФайлаЗашифрованныхДанных);
			
			// пытаемся расшифровать
			ИмяФайлаСРасшифрованнымиДанными = ПолучитьИмяВременногоФайла("zip");
			
			ПоставщикСертификат1		= Сертификат1.Поставщик;
			СерийныйНомерСертификат1	= Сертификат1.СерийныйНомер;
			ПоставщикСертификат2		= Сертификат2.Поставщик;
			СерийныйНомерСертификат2	= Сертификат2.СерийныйНомер;
			
			Если ПроверятьВалидность Тогда
			
				Попытка
					Если НЕ Крипт.ПроверитьСертификат(СерийныйНомерСертификат1, ПоставщикСертификат1, , ) Тогда
						Сообщить("Не удалось использовать сертификат """ + ПредставлениеСертификата(Сертификат1) + """ отправителя для расшифровки полученного транспортного контейнера по причине невалидности сертификата!", СтатусСообщения.Важное);
						Возврат Неопределено;
					КонецЕсли;
				Исключение
					Сообщить("Во время проверки валидности сертификата отправителя """ + ПредставлениеСертификата(Сертификат1) + """ возникла исключительная ситуация!
					|Возможно, сертификат больше не зарегистрирован в системе или период его действия истек.", СтатусСообщения.Важное);
					Возврат Неопределено;
				КонецПопытки;
				
				Попытка
					Если НЕ Крипт.ПроверитьСертификат(СерийныйНомерСертификат2, ПоставщикСертификат2, , ) Тогда
						Сообщить("Не удалось использовать сертификат """ + ПредставлениеСертификата(Сертификат2) + """ получателя для расшифровки полученного транспортного контейнера по причине невалидности сертификата!", СтатусСообщения.Важное);
						Возврат Неопределено;
					КонецЕсли;
				Исключение
					Сообщить("Во время проверки валидности сертификата получателя """ + ПредставлениеСертификата(Сертификат2) + """ возникла исключительная ситуация!
					|Возможно, сертификат больше не зарегистрирован в системе или период его действия истек.", СтатусСообщения.Важное);
					Возврат Неопределено;
				КонецПопытки;
				
			КонецЕсли;
			
			Попытка
				Крипт.Расшифровать(КаталогРасшифровки,
									СерийныйНомерСертификат2,
									ПоставщикСертификат2,
									СерийныйНомерСертификат1,
									ПоставщикСертификат1,
									ИмяФайлаСРасшифрованнымиДанными,
									ПолучитьПараметрыКриптографии()["АлгоритмШифрования"]);
			Исключение
				Сообщить("Не удалось расшифровать данные транспортного контейнера!", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецПопытки;
			
		Иначе
			
			ИмяФайлаСРасшифрованнымиДанными = ИмяФайлаВложения;
			
		КонецЕсли;
		
		// распаковываем архив
		Попытка
			ЗИП = Новый ЧтениеZipФайла(ИмяФайлаСРасшифрованнымиДанными);
			ЗИП.ИзвлечьВсе(КаталогРаспакованныхФайлов, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ЗИП.Закрыть();
		Исключение
			Сообщить("Не удалось распаковать архив!
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		Возврат КаталогРаспакованныхФайлов;
	
	Исключение
		
		Сообщить("Ошибка расшифровки транспортного контейнера:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Процедура ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, Отпечаток) Экспорт
	
	Соответствие16 = Новый Соответствие;
	Соответствие16.Вставить("0", 0);
	Соответствие16.Вставить("1", 1);
	Соответствие16.Вставить("2", 2);
	Соответствие16.Вставить("3", 3);
	Соответствие16.Вставить("4", 4);
	Соответствие16.Вставить("5", 5);
	Соответствие16.Вставить("6", 6);
	Соответствие16.Вставить("7", 7);
	Соответствие16.Вставить("8", 8);
	Соответствие16.Вставить("9", 9);
	Соответствие16.Вставить("a", 10);
	Соответствие16.Вставить("b", 11);
	Соответствие16.Вставить("c", 12);
	Соответствие16.Вставить("d", 13);
	Соответствие16.Вставить("e", 14);
	Соответствие16.Вставить("f", 15);
	
	Для Инд = 0 По 19 Цикл
		ПервоеЧисло = Соответствие16[нрег(Сред(Отпечаток, Инд * 2 + 1, 1))];
		ВтороеЧисло = Соответствие16[нрег(Сред(Отпечаток, Инд * 2 + 2, 1))];
		Если ПервоеЧисло = Неопределено ИЛИ ВтороеЧисло = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ДвДанные.ДобавитьЧисло(ПервоеЧисло * 16 + ВтороеЧисло, 1);
	КонецЦикла;
	
КонецПроцедуры

Функция ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные) Экспорт
	
	Соответствие16 = Новый Соответствие;
	Соответствие16.Вставить(0, "0");
	Соответствие16.Вставить(1, "1");
	Соответствие16.Вставить(2, "2");
	Соответствие16.Вставить(3, "3");
	Соответствие16.Вставить(4, "4");
	Соответствие16.Вставить(5, "5");
	Соответствие16.Вставить(6, "6");
	Соответствие16.Вставить(7, "7");
	Соответствие16.Вставить(8, "8");
	Соответствие16.Вставить(9, "9");
	Соответствие16.Вставить(10, "a");
	Соответствие16.Вставить(11, "b");
	Соответствие16.Вставить(12, "c");
	Соответствие16.Вставить(13, "d");
	Соответствие16.Вставить(14, "e");
	Соответствие16.Вставить(15, "f");
	
	Отпечаток = "";
	Для Инд = 1 По 20 Цикл
		Байт = ДвДанные.ПолучитьЧисло(1);
		Отпечаток =  Отпечаток + Соответствие16[Цел(Байт / 16)] + Соответствие16[Байт % 16];
	КонецЦикла;
	Возврат Отпечаток;
	
КонецФункции

Функция ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение,
													Тип,
													Данные,
													ИмяФайла,
													Размер = Неопределено,
													ЭЦПИмяПодписанногоФайла = Неопределено,
													ЭЦПСертификат = Неопределено,
													ЭЦПСтатусПроверки = Неопределено,
													ЭЦПЭтоПодписьАбонента = Неопределено,
													ТипФайлаОтчетностиПФР = Неопределено,
													Идентификатор = Неопределено,
													ТипСодержимогоФайла = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТранспортноеСообщение = ТранспортноеСообщение;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Тип = Тип;
	МенеджерЗаписи.Размер = Размер;
	МенеджерЗаписи.Идентификатор = Идентификатор;
	
	Если ЭЦПСертификат <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПСертификат = ЭЦПСертификат;
	КонецЕсли;
	
	Если ЭЦПСтатусПроверки <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПСтатусПроверки = ЭЦПСтатусПроверки;
	КонецЕсли;
	
	Если ЭЦПИмяПодписанногоФайла <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПИмяПодписанногоФайла = ЭЦПИмяПодписанногоФайла;
	КонецЕсли;
	
	Если ЭЦПЭтоПодписьАбонента <> Неопределено Тогда
		МенеджерЗаписи.ЭЦПЭтоПодписьАбонента = ЭЦПЭтоПодписьАбонента;
	КонецЕсли;
	
	Если ТипФайлаОтчетностиПФР <> Неопределено Тогда
		МенеджерЗаписи.ТипФайлаОтчетностиПФР = ТипФайлаОтчетностиПФР;
	КонецЕсли;
	
	Если ТипСодержимогоФайла <> Неопределено Тогда
		МенеджерЗаписи.ТипСодержимогоФайла = ТипСодержимогоФайла;
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда // если хранилище значения
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда // если полное имя файла
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Данные), Новый СжатиеДанных(9));
	Иначе // если двоичные данные
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		//#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Оповестить("Изменение сообщения", Новый Структура("Сообщение, ЦиклОбмена, Предмет", ТранспортноеСообщение, ТранспортноеСообщение.ЦиклОбмена, Сообщение.ЦиклОбмена.Предмет));
		//#КонецЕсли
		Возврат Истина;
	Исключение
		Сообщить("Не удалось сохранить в информационной базе содержимое транспортного контейнера сообщения """ + ТранспортноеСообщение.Ссылка + """!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ДобавитьТранспортныйКонтейнер(ТранспортноеСообщение, Данные, ИмяФайла, Размер = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ТранспортныеКонтейнеры.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ТранспортноеСообщение = ТранспортноеСообщение;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Размер = Размер;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Данные), Новый СжатиеДанных(9));
	Иначе // если двоичные данные
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		//#Если ТолстыйКлиентОбычноеПриложение Тогда
		//Оповестить("Изменение сообщения", Новый Структура("Сообщение, ЦиклОбмена, Предмет", ТранспортноеСообщение, ТранспортноеСообщение.ЦиклОбмена, Сообщение.ЦиклОбмена.Предмет));
		//#КонецЕсли
		Возврат Истина;
	Исключение
		Сообщить("Не удалось сохранить в информационной базе транспортный контейнер сообщения """ + ТранспортноеСообщение.Ссылка + """!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Функция ОпределитьРазмер(Данные) Экспорт
	
	Размер = 0;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("Строка") Тогда
		ОбъектФайл = Новый Файл(Данные);
		Размер = ОбъектФайл.Размер();
	ИначеЕсли ТипДанных = Тип("ХранилищеЗначения") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = Данные.Получить();
		Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
			Возврат 0;
		КонецЕсли;
		ДвоичныеДанные.Записать(ВремФайл);
		ОбъектФайл = Новый Файл(ВремФайл);
		Размер = ОбъектФайл.Размер();
		УдалитьФайлы(ВремФайл);
	ИначеЕсли ТипДанных = Тип("ДвоичныеДанные") Тогда
		ВремФайл = ПолучитьИмяВременногоФайла();
		Данные.Записать(ВремФайл);
		ОбъектФайл = Новый Файл(ВремФайл);
		Размер = ОбъектФайл.Размер();
		УдалитьФайлы(ВремФайл);
	КонецЕсли;
	
	Возврат Размер;
	
КонецФункции

Функция ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, СДанными = Ложь, ФильтрПоТипу = Неопределено, ИмяФайла = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
					  |	СодержимоеТранспортныхКонтейнеров.Размер,
					  |	СодержимоеТранспортныхКонтейнеров.Тип,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСтатусПроверки,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
					  |	СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента,
					  |	СодержимоеТранспортныхКонтейнеров.ТипФайлаОтчетностиПФР,
					  |	СодержимоеТранспортныхКонтейнеров.Идентификатор,
					  |	СодержимоеТранспортныхКонтейнеров.ТипСодержимогоФайла,
					  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение";
	Если СДанными = Истина Тогда
		Запрос.Текст = Запрос.Текст + ",
					  |	СодержимоеТранспортныхКонтейнеров.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
					  |ИЗ
					  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
					  |ГДЕ
					  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение В (&ТранспортноеСообщение)";
	
	Если ИмяФайла <> Неопределено Тогда
		Если ТипЗнч(ИмяФайла) = Тип("СписокЗначений") ИЛИ ТипЗнч(ИмяФайла) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
					  	  |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла В (&парамИмяФайла)";
			Запрос.УстановитьПараметр("парамИмяФайла", ИмяФайла);
		Иначе
			Запрос.Текст = Запрос.Текст + "
					  	  |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла = &парамИмяФайла";
			Запрос.УстановитьПараметр("парамИмяФайла", ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	
	Если ФильтрПоТипу <> Неопределено Тогда
		Если ТипЗнч(ФильтрПоТипу) = Тип("СписокЗначений") ИЛИ ТипЗнч(ФильтрПоТипу) = Тип("Массив") Тогда
			Запрос.Текст = Запрос.Текст + "
					  |	И СодержимоеТранспортныхКонтейнеров.Тип В(&ТипыТранспортныхСообщений)";
			Запрос.УстановитьПараметр("ТипыТранспортныхСообщений", ФильтрПоТипу);
		Иначе
			Запрос.Текст = Запрос.Текст + "
					  |	И СодержимоеТранспортныхКонтейнеров.Тип = &ТипТранспортногоСообщения";
			Запрос.УстановитьПараметр("ТипТранспортногоСообщения", ФильтрПоТипу);
		КонецЕсли;
	КонецЕсли;
	
	ТипСообщения = ТипЗнч(ТранспортноеСообщение);
	Если ТипСообщения = Тип("ДокументСсылка.ТранспортноеСообщение") ИЛИ ТипСообщения = Тип("Массив") Тогда
		Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Иначе
		Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение.Ссылка);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТранспортныйКонтейнер(ТранспортноеСообщение, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					  |	ТранспортныеКонтейнеры.ИмяФайла";
	Если СДанными = Истина Тогда
		Запрос.Текст = Запрос.Текст + ",
					  |	ТранспортныеКонтейнеры.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
					  |ИЗ
					  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
					  |ГДЕ
					  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение";
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТранспортныйКонтейнерПрисутствует(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК ЕстьКонтейнер
	                      |ИЗ
	                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура УдалитьТранспортныйКонтейнер(Сообщение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сообщение) Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ТранспортныеКонтейнеры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ТранспортноеСообщение.Установить(Сообщение);
	НаборЗаписей.Записать();
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Оповестить("Изменение сообщения", Новый Структура("Сообщение, ЦиклОбмена, Предмет", Сообщение, Сообщение.ЦиклОбмена, ПолучитьПредметыЦиклаОбмена(Сообщение.ЦиклОбмена)));
	//#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ШИФРОВАНИЕ И РАСШИФРОВКА
//

Функция СообщениеЗашифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция СообщениеРасшифровано(Сообщение) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ИСТИНА КАК Поле1
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", Сообщение);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция РасшифроватьСообщенияПоУчетнойЗаписи(Знач УчетнаяЗапись, ТихийРежим = Ложь, ОбращениеККлючуРазрешено = Истина) Экспорт
	
	ТипыСообщенийНеТребующихОбращенияККлючуДляРаспаковки = Новый Массив;
	ТипыСообщенийНеТребующихОбращенияККлючуДляРаспаковки.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка);
	ТипыСообщенийНеТребующихОбращенияККлючуДляРаспаковки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР);
	ТипыСообщенийНеТребующихОбращенияККлючуДляРаспаковки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС);
	
	Состояние("Расшифровка сообщений по учетной записи """ + УчетнаяЗапись + """...");
	
	Если НЕ ТихийРежим Тогда
		Сообщить("Расшифровка сообщений по учетной записи """ + УчетнаяЗапись + """...", СтатусСообщения.Информация);
	КонецЕсли;
	
	КоличествоРасшифрованных = 0;
	КоличествоНеРасшифрованных = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение КАК ТранспортноеСообщение,
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение.Тип КАК Тип
	                      |ИЗ
	                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
						  |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.Статус = &СтатусПолученное
	                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
	                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления
						  |	И НЕ ТранспортныеКонтейнеры.ТранспортноеСообщение В (
						  |		ВЫБРАТЬ
	                      |		 СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
	                      |		ИЗ
	                      |		 РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |		ГДЕ
	                      |		 СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
	                      |		 И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
	                      |		 И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.ДатаСоздания,
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение.Тип.Порядок");
	
	// !!!
	Запрос.УстановитьПараметр("УчетнаяЗапись", ?(ТипЗнч(УчетнаяЗапись) = Тип("СправочникССылка.Организации"), УчетнаяЗаписьОрганизации(УчетнаяЗапись), УчетнаяЗапись));
	Запрос.УстановитьПараметр("СтатусПолученное", Перечисления.СтатусыПисем.Полученное);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// если обращение к ключу запрещено, то распаковываем только незашифрованные контейнеры
		Если НЕ ОбращениеККлючуРазрешено
		И ТипыСообщенийНеТребующихОбращенияККлючуДляРаспаковки.Найти(Выборка.Тип) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ТихийРежим Тогда
			Сообщить("Расшифровка сообщения " + ПредставлениеСообщения(Выборка.ТранспортноеСообщение) + "...", СтатусСообщения.Информация);
		КонецЕсли;
		
		// фиксируем успех или неудачу
		Если РасшифроватьТранспортноеСообщение(Выборка.ТранспортноеСообщение.ПолучитьОбъект()) Тогда
			КоличествоРасшифрованных = КоличествоРасшифрованных + 1;
		Иначе
			КоличествоНеРасшифрованных = КоличествоНеРасшифрованных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТихийРежим Тогда
		ВсегоСообщений = КоличествоРасшифрованных + КоличествоНеРасшифрованных;
		Если КоличествоРасшифрованных = 0 И КоличествоНеРасшифрованных = 0 Тогда
			Сообщить("Сообщения для расшифровки не обнаружены.", СтатусСообщения.Информация);
		Иначе
			Сообщить("Расшифровано сообщений: " + Формат(КоличествоРасшифрованных, "ЧН=; ЧГ=") + " из " + Формат(ВсегоСообщений, "ЧГ=") + ".", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Состояние();
	
КонецФункции

Функция ОпределитьОрганПФРОрганизации(Организация) Экспорт
	
	КодОрганаПФР = СокрЛП(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодОрганаПФР").КодОрганаПФР);
	Если НЕ ЗначениеЗаполнено(КодОрганаПФР) Тогда
		Возврат Неопределено;
	Иначе
		Возврат Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Функция возвращает получателя, на которого шифруется исходящее сообщение.
//
Функция ОпределитьПолучателяТранспортногоКонтейнера(Сообщение)
	
	ТипСообщения = Сообщение.Тип;
	
	// только следующие типы сообщений шифруются на сервер документооборота
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Возврат Сообщение.УчетнаяЗапись.СерверДокументооборота;
		
	// все сообщения документооборота с ПФР шифруются на соответствующий орган ПФР
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		Возврат Сообщение.Получатель;
		
	// во всех остальных случаях (а это только обмен с ФНС)
	// получатель зависит от признака обмена напрямую
	ИначеЕсли НЕ Сообщение.УчетнаяЗапись.ОбменНапрямую Тогда
		
		// при обмене через СОС для крупнейших налогоплательщиков шифруем на налоговый орган - посредник
		Если ЗначениеЗаполнено(Сообщение.Отправитель.КодИФНСПолучателя) Тогда
			Возврат Сообщение.УчетнаяЗапись.НалоговыйОрган;
		Иначе
			Возврат Сообщение.ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		
	Иначе
		Возврат Сообщение.УчетнаяЗапись.НалоговыйОрган;
	КонецЕсли;
	
КонецФункции

// Только для ФНС 141
//
Функция ЗашифроватьТранспортноеСообщение(Сообщение, ПараметрыГрупповойОбработки = Неопределено) Экспорт
	
	Состояние("Шифрование сообщения " + ПредставлениеСообщения(Сообщение) + "...");
	
	// различные проверки перед шифрованием
	ПризнакОшибки = Ложь;
	
	Если Сообщение.Статус <> Перечисления.СтатусыПисем.Сохраненное
	И Сообщение.Статус <> Перечисления.СтатусыПисем.Исходящее
	И Сообщение.Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Сообщить("Шифровать можно только исходящее сообщение!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ТипСообщения = Сообщение.Тип;
	СсылкаПолучатель = ОпределитьПолучателяТранспортногоКонтейнера(Сообщение);
	
	Если НЕ ЗначениеЗаполнено(ТипСообщения) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: тип транспортного сообщения не определен!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Отправитель) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задан отправитель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПолучатель) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задан получатель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.УчетнаяЗапись) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задана учетная запись!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ЦиклОбмена) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: цикл обмена не задан!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// поставим подпись ответственного за обмен перед отправкой
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности
	
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО
	
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика
	
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН
	
	Тогда
	
		Если НЕ ПоставитьПодписьОтветственногоЛица(Сообщение, "Шифрование") Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	// проверка состава содержимого сообщений
	Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина);
	
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
		
		// проверяем ДИВ
		СтрокиДИВ = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности));
		Если СтрокиДИВ.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать документ информационного взаимодействия!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиДИВ.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению присутствуют больше одного документа информационного взаимодействия!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаДИВ =  СтрокиДИВ[0].ИмяФайла;
		
		// проверяем ЭЦП
		СтрокиЭЦП = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись));
		СтрокиЭЦПкДИВ = Новый Массив;
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			ПрефиксИмениФайлаЭЦП = ИмяФайлаДИВ + ".sgn";
			Если Лев(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП)) = ПрефиксИмениФайлаЭЦП Тогда
				Окончание = Сред(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП) + 1, 1);
				Если Окончание >= "0" И Окончание <= "9" Тогда
					СтрокиЭЦПкДИВ.Добавить(СтрокаЭЦП.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиЭЦП.Количество() = 0  Тогда
			Сообщить("Во вложении к транспортному сообщению должна присутствовать как минимум одна электронно-цифровая подпись ответственного лица организации!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификаты
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			СуществуетСоответствующийСертификат = Ложь;
			Окончание = ".cer" + Прав(СтрокаЭЦП, 1);
			Для Каждого ТипВложения Из Вложения Цикл
				Если Прав(ТипВложения.ИмяФайла, СтрДлина(Окончание)) = Окончание Тогда
					СуществуетСоответствующийСертификат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуществуетСоответствующийСертификат Тогда
				Сообщить("Во вложении к транспортному сообщению не найден сертификат, соответствующий ЭЦП " + СтрокаЭЦП.ИмяФайла + "!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаДИВ + ".info")) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности Тогда
		
		// проверяем квитанцию
		СтрокиКвитанции = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке));
		Если СтрокиКвитанции.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с исходной квитанцией от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиКвитанции.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН файл с исходной квитанцией от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаКвитанции = СтрокиКвитанции[0].ИмяФайла;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		ИмяФайлаИНФО = Лев(ИмяФайлаКвитанции, СтрДлина(ИмяФайлаКвитанции) - 5) + ".info";
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаИНФО)) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		
		// проверяем протокол
		СтрокиПротокола = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля));
		Если СтрокиПротокола.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с протоколом проверки от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиПротокола.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН файл с протоколом проверки от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаПротокола = СтрокиПротокола[0].ИмяФайла;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		ИмяФайлаИНФО = Лев(ИмяФайлаПротокола, СтрДлина(ИмяФайлаПротокола) - 4) + ".info";
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаИНФО)) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
	
		// проверяем текстовое сообщение
		СтрокиТекстовыхСообщений = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента));
		Если СтрокиТекстовыхСообщений.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с текстовым сообщением от налогового органа, связанным с неформализованным документом!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиТекстовыхСообщений.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН файл с текстовым сообщением от налогового органа, связанным с неформализованным документом!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		
		// проверяем неформализованный документ
		СтрокиНеформализованныеДокументы = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент));
		Если СтрокиНеформализованныеДокументы.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать неформализованный документ!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиНеформализованныеДокументы.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН неформализованный документ!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
		// определяем имя неформализованого документа
		ИмяНеформализованногоДокумента = СтрокиНеформализованныеДокументы[0].ИмяФайла;
		
		// проверяем ЭЦП
		СтрокиЭЦП = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись));
		СтрокиЭЦПкДИВ = Новый Массив;
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			ПрефиксИмениФайлаЭЦП = ИмяНеформализованногоДокумента + ".sgn";
			Если Лев(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП)) = ПрефиксИмениФайлаЭЦП Тогда
				Окончание = Сред(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП) + 1, 1);
				Если Окончание >= "0" И Окончание <= "9" Тогда
					СтрокиЭЦПкДИВ.Добавить(СтрокаЭЦП.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиЭЦП.Количество() = 0  Тогда
			Сообщить("Во вложении к транспортному сообщению должна присутствовать как минимум одна электронно-цифровая подпись ответственного лица организации!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификаты
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			СуществуетСоответствующийСертификат = Ложь;
			Окончание = ".cer" + Прав(СтрокаЭЦП, 1);
			Для Каждого ТипВложения Из Вложения Цикл
				Если Прав(ТипВложения.ИмяФайла, СтрДлина(Окончание)) = Окончание Тогда
					СуществуетСоответствующийСертификат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуществуетСоответствующийСертификат Тогда
				Сообщить("Во вложении к транспортному сообщению не найден сертификат, соответствующий ЭЦП " + СтрокаЭЦП.ИмяФайла + "!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяНеформализованногоДокумента + ".info")) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем наличие файла с описанием неформализованного документа
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента, ИмяНеформализованногоДокумента + ".desc")) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с описанием неформализованного документа!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		
		// проверяем квитанцию
		СтрокиКвитанции = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке));
		Если СтрокиКвитанции.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с исходной квитанцией от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиКвитанции.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН файл с исходной квитанцией от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаКвитанции = СтрокиКвитанции[0].ИмяФайла;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
		
		// проверяем ДИВ
		СтрокиДИВ = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН));
		Если СтрокиДИВ.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать запрос на информационное обслуживание!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиДИВ.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению присутствуют больше одного запроса на информационное обслуживание!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаДИВ =  СтрокиДИВ[0].ИмяФайла;
		
		// проверяем ЭЦП
		СтрокиЭЦП = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись));
		СтрокиЭЦПкДИВ = Новый Массив;
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			ПрефиксИмениФайлаЭЦП = ИмяФайлаДИВ + ".sgn";
			Если Лев(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП)) = ПрефиксИмениФайлаЭЦП Тогда
				Окончание = Сред(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП) + 1, 1);
				Если Окончание >= "0" И Окончание <= "9" Тогда
					СтрокиЭЦПкДИВ.Добавить(СтрокаЭЦП.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиЭЦП.Количество() = 0  Тогда
			Сообщить("Во вложении к транспортному сообщению должна присутствовать как минимум одна электронно-цифровая подпись ответственного лица организации!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификаты
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			СуществуетСоответствующийСертификат = Ложь;
			Окончание = ".cer" + Прав(СтрокаЭЦП, 1);
			Для Каждого ТипВложения Из Вложения Цикл
				Если Прав(ТипВложения.ИмяФайла, СтрДлина(Окончание)) = Окончание Тогда
					СуществуетСоответствующийСертификат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуществуетСоответствующийСертификат Тогда
				Сообщить("Во вложении к транспортному сообщению не найден сертификат, соответствующий ЭЦП " + СтрокаЭЦП.ИмяФайла + "!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаДИВ + ".info")) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН Тогда
		
		// проверяем квитанцию
		СтрокиКвитанции = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке));
		Если СтрокиКвитанции.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с исходной квитанцией от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиКвитанции.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН файл с исходной квитанцией от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаКвитанции = СтрокиКвитанции[0].ИмяФайла;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		ИмяФайлаИНФО = Лев(ИмяФайлаКвитанции, СтрДлина(ИмяФайлаКвитанции) - 5) + ".info";
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаИНФО)) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН Тогда
		
		// проверяем протокол
		СтрокиПротокола = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля));
		Если СтрокиПротокола.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с протоколом проверки от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиПротокола.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ВСЕГО ОДИН файл с протоколом проверки от налогового органа!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаПротокола = СтрокиПротокола[0].ИмяФайла;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		ИмяФайлаИНФО = Лев(ИмяФайлаПротокола, СтрДлина(ИмяФайлаПротокола) - 4) + ".info";
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаИНФО)) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН Тогда
		
		// проверяем ДИВ
		СтрокиДИВ = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН));
		Если СтрокиДИВ.Количество() = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать ответ на запрос на информационное обслуживание!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		ИначеЕсли СтрокиДИВ.Количество() > 1 Тогда
			Сообщить("Во вложении к транспортному сообщению присутствуют больше одного ответа на запрос на информационное обслуживание!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		ИмяФайлаДИВ =  СтрокиДИВ[0].ИмяФайла;
		
		// проверяем ЭЦП
		СтрокиЭЦП = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись));
		СтрокиЭЦПкДИВ = Новый Массив;
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			ПрефиксИмениФайлаЭЦП = ИмяФайлаДИВ + ".sgn";
			Если Лев(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП)) = ПрефиксИмениФайлаЭЦП Тогда
				Окончание = Сред(СтрокаЭЦП.ИмяФайла, СтрДлина(ПрефиксИмениФайлаЭЦП) + 1, 1);
				Если Окончание >= "0" И Окончание <= "9" Тогда
					СтрокиЭЦПкДИВ.Добавить(СтрокаЭЦП.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если СтрокиЭЦП.Количество() = 0  Тогда
			Сообщить("Во вложении к транспортному сообщению должна присутствовать как минимум одна электронно-цифровая подпись ответственного лица организации!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификаты
		Для Каждого СтрокаЭЦП Из СтрокиЭЦП Цикл
			СуществуетСоответствующийСертификат = Ложь;
			Окончание = ".cer" + Прав(СтрокаЭЦП, 1);
			Для Каждого ТипВложения Из Вложения Цикл
				Если Прав(ТипВложения.ИмяФайла, СтрДлина(Окончание)) = Окончание Тогда
					СуществуетСоответствующийСертификат = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СуществуетСоответствующийСертификат Тогда
				Сообщить("Во вложении к транспортному сообщению не найден сертификат, соответствующий ЭЦП " + СтрокаЭЦП.ИмяФайла + "!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ПризнакОшибки Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем наличие файла с информацией об отправителе и получателе
		Если Вложения.НайтиСтроки(Новый Структура("Тип, ИмяФайла", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ИмяФайлаДИВ + ".info")) = 0 Тогда
			Сообщить("Во вложении к транспортному сообщению должен присутствовать файл с информацией об отправителе и получателе!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Прочее Тогда
		
		Сообщить("В текущей версии не поддерживается шифрование сообщения с типом """ + ТипСообщения + """.", СтатусСообщения.Важное);
		Возврат Ложь;
		
	Иначе
		
		Сообщить("Шифрование транспортных сообщений типа """ + ТипСообщения + """ не предусмотрено в программе!", СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецЕсли;
	
	// выгружаем содержимое
	ВремКаталог = КаталогВременныхФайлов() + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремКаталог);
	Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина);
	Для Каждого Вложение Из Вложения Цикл
		Попытка
			Вложение.Данные.Получить().Записать(ВремКаталог + Вложение.ИмяФайла);
		Исключение
			Сообщить("Не удалось сохранить содержимое сообщения """ + ПредставлениеСообщения(Сообщение) + """ во временные файлы на диске!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	// определяем сертификат физического лица, ответственного за обмен
	СертификатОтветственногоЗаОбменЛица = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Шифрование", Сообщение.Отправитель);
	Если СертификатОтветственногоЗаОбменЛица = Неопределено Тогда
		Сообщить("Не удалось определить цифровой сертификат, используемый для шифрования при обмене по учетной записи """ + Сообщение.УчетнаяЗапись + """!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// определяем сертификат налогового органа
	Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
		СертификатПолучателя = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Сервер документооборота", СсылкаПолучатель);
	Иначе
		СертификатПолучателя = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Налоговый орган", СсылкаПолучатель);
	КонецЕсли;
	Если СертификатПолучателя = Неопределено Тогда
		Сообщить("Не удалось определить цифровой сертификат получателя """ + СсылкаПолучатель + """ для шифрования сообщения!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// создаем зашифрованный транспортный контейнер
	РезультатСоздания = СоздатьТранспортныйКонтейнер(ВремКаталог, СертификатОтветственногоЗаОбменЛица, СертификатПолучателя);
	Если РезультатСоздания = Неопределено Тогда
		Сообщить("Не удалось создать зашифрованный транспортный контейнер!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// определяем имя файла вложения
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, "Тип").ИмяФайла;
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, "Тип").ИмяФайла + ".nlp";
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, "Тип").ИмяФайла;
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента, "Тип").ИмяФайла + ".nlp";
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент, "Тип").ИмяФайла;
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, "Тип").ИмяФайла + ".nlp";
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН, "Тип").ИмяФайла;
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, "Тип").ИмяФайла + ".nlp";
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, "Тип").ИмяФайла;
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН Тогда
		ИмяФайлаВложения = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН, "Тип").ИмяФайла + ".nlp";
	КонецЕсли;
	
	ДобавитьТранспортныйКонтейнер(Сообщение, РезультатСоздания, ИмяФайлаВложения);
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Оповестить("Изменение сообщения", Новый Структура("Сообщение, ЦиклОбмена, Предмет", Сообщение, Сообщение.ЦиклОбмена, ПолучитьПредметыЦиклаОбмена(Сообщение.ЦиклОбмена)));
	//#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ И ОТПРАВКА СООБЩЕНИЙ
//

Процедура ИнициализироватьСвойстваПочты(Почта, Знач УчетнаяЗапись, ДляПолучения = Истина, ДляОтправки = Истина) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		УчетнаяЗапись = УчетнаяЗаписьОрганизации(УчетнаяЗапись);
	КонецЕсли;
	
	Если ДляПолучения Тогда
		Почта.АдресСервераPOP3 = УчетнаяЗапись.СерверPOP3;
		Почта.Пароль = УчетнаяЗапись.ПарольPOP3;
		Почта.Пользователь = УчетнаяЗапись.ИмяПользователяPOP3;
		Если УчетнаяЗапись.ПортPOP3 <> 0 Тогда // по умолчанию - 110
			Почта.ПортPOP3 = УчетнаяЗапись.ПортPOP3;
		КонецЕсли;
	КонецЕсли;
	
	Если ДляОтправки Тогда
		Почта.АдресСервераSMTP = УчетнаяЗапись.СерверSMTP;
		Если УчетнаяЗапись.ТребуетсяSMTPАутентификация Тогда
			Почта.ПарольSMTP = УчетнаяЗапись.ПарольSMTP;
			Почта.ПользовательSMTP = УчетнаяЗапись.ИмяПользователяSMTP;
		КонецЕсли;
		Если УчетнаяЗапись.ПортSMTP <> 0 Тогда // по умолчанию - 25
			Почта.ПортSMTP = УчетнаяЗапись.ПортSMTP;
		КонецЕсли;
	КонецЕсли;
	
	СерверДокументооборота = УчетнаяЗапись.СерверДокументооборота;
	Если СерверДокументооборота.ДлительностьОжиданияСервера <> 0 Тогда
		Почта.ВремяОжидания = СерверДокументооборота.ДлительностьОжиданияСервера;
	Иначе
		Почта.ВремяОжидания = 60;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокПолученныхТранспортныхСообщений(Сообщение)
	
	Если ПолученныеТранспортныеСообщения = Неопределено Тогда
		ПолученныеТранспортныеСообщения = Новый Массив;
	КонецЕсли;
	
	ПолученныеТранспортныеСообщения.Добавить(Сообщение);
	
КонецПроцедуры

Функция ПолучитьСообщенияПоУчетнойЗаписи(Знач УчетнаяЗапись, Почта = Неопределено, ТихийРежим = Ложь, СообщенияРезультат = Неопределено, ТребуетсяАвтонастройка = Истина)
	
	// проверяем, задана ли учетная запись
	Если УчетнаяЗапись = Неопределено Тогда
		Если НЕ ТихийРежим Тогда
			Сообщить("Не задана учетная запись для получения сообщений!", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
	
	Состояние("Получение сообщений по учетной записи """ + УчетнаяЗапись + """...");
	Если НЕ ТихийРежим Тогда
		Сообщить("Получение сообщений по учетной записи """ + УчетнаяЗапись + """...", СтатусСообщения.Информация);
	КонецЕсли;
	
	// проверяем, включена ли возможность документооборота
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		
		ссылкаУчетнаяЗапись = УчетнаяЗаписьОрганизации(УчетнаяЗапись);
		Если НЕ ЗначениеЗаполнено(ссылкаУчетнаяЗапись) Тогда
			Если НЕ ТихийРежим Тогда
				Сообщить("Для организации """ + УчетнаяЗапись + """ не предусмотрена возможность информационного взаимодействия с ФНС и с ПФР по каналам связи.", СтатусСообщения.Внимание);
			КонецЕсли;
			Возврат Ложь;
		КонецЕсли;
		
		Организация = УчетнаяЗапись;
		УчетнаяЗапись = ссылкаУчетнаяЗапись;
		
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	// вызываем автонастройку при необходимости
	Если ТребуетсяАвтонастройка Тогда
		АвтоматическаяНастройкаУчетнойЗаписи(УчетнаяЗапись, Организация, , , , ТихийРежим);
	КонецЕсли;
	
	// создаем объект для работы с почтой при необходимости
	ОбъектПочтыСоздаетсяВПроцедуре = (Почта = Неопределено);
	Если ОбъектПочтыСоздаетсяВПроцедуре Тогда
		Почта = СоздатьОбъектДляРаботыСПочтой();
		Если Почта = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ИнициализироватьСвойстваПочты(Почта, УчетнаяЗапись, Истина);
	КонецЕсли;
	
	// инициализируем массив результата, если он не был задан при вызове
	Если СообщенияРезультат = Неопределено Тогда
		СообщенияРезультат = Новый Массив;
	КонецЕсли;
	
	// подключаемся к серверу
	СтатусПодключения = ПодключитьсяКПочтовомуСерверу(Почта);
	Если НЕ СтатусПодключения Тогда
		Состояние();
		Возврат Ложь;
	КонецЕсли;
	
	// выбираем сообщения с сервера
	Попытка
		Почта.Выбрать(Истина);
	Исключение
		Сообщить("Не удалось получить сообщения под учетной записью """ + УчетнаяЗапись + """!", СтатусСообщения.Важное);
		ОтключитьсяОтПочтовогоЯщика(Почта, УчетнаяЗапись);
		Состояние();
		Возврат Ложь;
	КонецПопытки;
	
	// обрабатываем входящие сообщения
	КоличествоСообщений = Почта.КоличествоСообщений();
	Если КоличествоСообщений = 0 Тогда
		
		Если НЕ ТихийРежим Тогда
			Сообщить("Сообщения на сервере не обнаружены.", СтатусСообщения.Информация);
		КонецЕсли;
		
	Иначе
		
		Если НЕ ТихийРежим Тогда
			Сообщить("Сообщений на сервере: " + КоличествоСообщений + ".", СтатусСообщения.Информация);
		КонецЕсли;
		
		// получаем с сервера и сохраняем без распознания
		Для ИндексСообщения = 1 По КоличествоСообщений Цикл
			
			// выбираем сообщение
			Почта.СледующееСообщение(ИндексСообщения - 1);
			
			// ищем сообщение по уникальному идентификатору
			ИдентификаторСообщения = Почта.ИдентификаторСообщения;
			СуществующееСообщение = Документы.ТранспортноеСообщение.НайтиПоРеквизиту("ИдентификаторСообщения", ИдентификаторСообщения);
			Если СуществующееСообщение <> Документы.ТранспортноеСообщение.ПустаяСсылка() Тогда
				Сообщить("В почтовом ящике обнаружено уже принимавшееся сообщение: """ + СуществующееСообщение.Тема + """.
				|Сообщение проигнорировано.", СтатусСообщения.Внимание);
				Продолжить;
			КонецЕсли;
			
			// создаем документ в информационной базе
			Сообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
			
			// инициализируем учетную запись
			Сообщение.УчетнаяЗапись = УчетнаяЗапись;
			
			// устанавливаем статус
			Сообщение.Статус = Перечисления.СтатусыПисем.Полученное;
			
			// устанавливаем тему
			Сообщение.Тема = СокрЛП(Почта.Тема);
			
			// устанавливаем идентификатор сообщения
			Сообщение.ИдентификаторСообщения = Почта.ИдентификаторСообщения;
			
			// инициализируем дату отправления сообщения
			Сообщение.ДатаТранспорта = Почта.ДатаПолучения;
			
			// инициализируем дату получения 
			Сообщение.Дата = Почта.ДатаОтправления;
			
			// устанавливаем кодировку
			Сообщение.Кодировка = Почта.Кодировка;
			
			Если НЕ ТихийРежим Тогда
				Сообщить("Получение сообщения " + ПредставлениеСообщения(Сообщение) + "...", СтатусСообщения.Информация);
			КонецЕсли;
			
			// устанавливаем атрибуты отправителя
			ОтправительСообщения = "";
			ИмяОтправителяСообщения = "";
			Почта.ПолучитьАдрес("from", 0, ОтправительСообщения, ИмяОтправителяСообщения);
			Сообщение.ОтКогоАдрес = ОтправительСообщения;
			Сообщение.ОтКогоПредставление = ИмяОтправителяСообщения;
			
			// инициализируем получателей
			Для ИндАдреса = 0 По Почта.КоличествоАдресов("to") - 1 Цикл
				ПолучательСообщения = "";
				ИмяПолучателяСообщения = "";
				Почта.ПолучитьАдрес("to", ИндАдреса, ПолучательСообщения, ИмяПолучателяСообщения);
				НовыйПолучатель = Сообщение.Кому.Добавить();
				НовыйПолучатель.АдресЭлектроннойПочты = ПолучательСообщения;
				НовыйПолучатель.Представление = ИмяПолучателяСообщения;
			КонецЦикла;
			
			// инициализируем копии
			Для ИндАдреса = 0 По Почта.КоличествоАдресов("cc") - 1 Цикл
				ПолучательСообщения = "";
				ИмяПолучателяСообщения = "";
				Почта.ПолучитьАдрес("cc", ИндАдреса, ПолучательСообщения, ИмяПолучателяСообщения);
				НовыйПолучатель = Сообщение.Копии.Добавить();
				НовыйПолучатель.АдресЭлектроннойПочты = ПолучательСообщения;
				НовыйПолучатель.Представление = ИмяПолучателяСообщения;
			КонецЦикла;
			
			// инициализируем скрытые копии
			Для ИндАдреса = 0 По Почта.КоличествоАдресов("bcc") - 1 Цикл
				ПолучательСообщения = "";
				ИмяПолучателяСообщения = "";
				Почта.ПолучитьАдрес("bcc", ИндАдреса, ПолучательСообщения, ИмяПолучателяСообщения);
				НовыйПолучатель = Сообщение.Копии.Добавить();
				НовыйПолучатель.АдресЭлектроннойПочты = ПолучательСообщения;
				НовыйПолучатель.Представление = ИмяПолучателяСообщения;
			КонецЦикла;
			
			// устанавливаем текст сообщения
			ТекстПисьмаPlain = "";
			ТекстПисьмаRichText = "";
			ТекстПисьмаHTML = "";
			Для ИндТекста = 0 По Почта.КоличествоТекстовСообщения() - 1 Цикл
				ТекстСообщения = "";
				ТипТекстаСообщения = "";
				Почта.ПолучитьТекстСообщения(ИндТекста, ТекстСообщения, ТипТекстаСообщения);
				Если ТипТекстаСообщения = 0 Тогда
					ТекстПисьмаHTML = ТекстСообщения;
					Прервать;
				КонецЕсли;
				Если ТипТекстаСообщения = 1 Тогда
					ТекстПисьмаPlain = ТекстСообщения;
					Прервать;
				КонецЕсли;
				Если ТипТекстаСообщения = 2 Тогда
					ТекстПисьмаRichText = ТекстСообщения;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ТекстПисьмаPlain = "" Тогда
				Если ТекстПисьмаRichText = "" Тогда
					Если ТекстПисьмаHTML <> "" Тогда
						Сообщение.ТекстПисьма = ТекстПисьмаHTML;
					Иначе
						Сообщение.ТекстПисьма = "";
					КонецЕсли;
				Иначе
					Сообщение.ТекстПисьма = ТекстПисьмаRichText;
				КонецЕсли;
			Иначе
				Сообщение.ТекстПисьма = ТекстПисьмаPlain;
			КонецЕсли;
			
			// заполняем дополнительные реквизиты заголовка
			// - имя передающей системы
			ИмяПередающейСистемы = Почта.ИмяПередающейСистемы;
			Если ЗначениеЗаполнено(ИмяПередающейСистемы) Тогда
				НовРеквизит = Сообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
				НовРеквизит.Значение = ИмяПередающейСистемы;
			КонецЕсли;
			
			// - тип передаваемой информации
			ТипПередаваемогоКонтейнера = Почта.ТипПередаваемогоКонтейнера;
			Если ЗначениеЗаполнено(ТипПередаваемогоКонтейнера) Тогда
				НовРеквизит = Сообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
				НовРеквизит.Значение = ТипПередаваемогоКонтейнера;
			КонецЕсли;
			
			// - идентификатор получателя
			ИдентификаторПолучателя = Почта.ИдентификаторПолучателя;
			Если ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
				НовРеквизит = Сообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
				НовРеквизит.Значение = ИдентификаторПолучателя;
			КонецЕсли;
			
			// - идентификатор отправителя
			ИдентификаторОтправителя = Почта.ИдентификаторОтправителя;
			Если ЗначениеЗаполнено(ИдентификаторОтправителя) Тогда
				НовРеквизит = Сообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
				НовРеквизит.Значение = ИдентификаторОтправителя;
			КонецЕсли;
			
			// - первичный идентификатор сообщения
			ПервичныйИдентификаторСообщения = Почта.ПервичныйИдентификаторСообщения;
			Если ЗначениеЗаполнено(ПервичныйИдентификаторСообщения) Тогда
				НовРеквизит = Сообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
				НовРеквизит.Значение = ПервичныйИдентификаторСообщения;
			КонецЕсли;
			
			//// устанавливаем ссылку нового, чтобы можно было записать вложения сообщения вместе с самим сообщением;
			//// при записи сообщения анализируются его вложения (например, протокол входного контроля) для установки
			//// значений реквизитов самого сообщения
			//СообщениеСсылка = Документы.ТранспортноеСообщение.ПолучитьСсылку();
			//Сообщение.УстановитьСсылкуНового(СообщениеСсылка);
			
			// пытаемся записать
			Попытка
				Сообщение.Записать();
			Исключение
				Сообщить("Не удалось сохранить входящее сообщение " + ПредставлениеСообщения(Сообщение) + " в информационной базе!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.ОченьВажное);
				Продолжить;
			КонецПопытки;
			
			// разбираем вложения
			КоличествоВложений = Почта.КоличествоВложений();
			Для Инд = 0 По КоличествоВложений - 1 Цикл
				
				ИмяФайлаВложения = "";
				ИмяФайлаВложения2 = "";
				ИмяВложения = "";
				
				Попытка
					Почта.ПолучитьВложение(Инд, ИмяФайлаВложения, ИмяФайлаВложения2, ИмяВложения);
				Исключение
					Сообщить("Не удалось получить вложение " + Инд + " для сообщения " + ПредставлениеСообщения(Сообщение) + "!", СтатусСообщения.Важное);
					Продолжить;
				КонецПопытки;
				
				ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ИмяФайлаВложения, ИмяВложения);
				
			КонецЦикла; // конец цикла разбора вложений
			
			СообщенияРезультат.Добавить(Сообщение.Ссылка);
			ДополнитьСписокПолученныхТранспортныхСообщений(Сообщение.Ссылка);
			
		КонецЦикла;
		
		// распознаем полученные сообщения
		Для Каждого ПринятоеСообщение Из СообщенияРезультат Цикл
			ОбъектСообщение = ПринятоеСообщение.ПолучитьОбъект();
			РаспознатьТранспортноеСообщение(ОбъектСообщение);
			ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(ПринятоеСообщение, Истина);
		КонецЦикла;
		
		Если НЕ ТихийРежим Тогда
			Сообщить("Получено сообщений: " + Формат(КоличествоСообщений, "ЧГ=") + ".", СтатусСообщения.Информация);
		КонецЕсли;
		
	КонецЕсли;
	
	Состояние();
	
	СтатусОтключения = ОтключитьсяОтПочтовогоЯщика(Почта, УчетнаяЗапись);
	Если НЕ СтатусОтключения Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтфильтроватьПолученныеСообщения(ВходящиеСообщения)
	
	// Формируем массив сообщений, требующих внимания пользователей.
	// К таким сообщениям относятся:
	// - критические ошибки;
	// - неформализованные документы;
	// - ответы на запросы на информационное обслуживание;
	// - отрицательные протоколы;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.Ссылка В(&Ссылка)
	                      |	И (ТранспортноеСообщение.Тип В (&ТипКритическиеОшибки)
	                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипВходящиеДокументы)
	                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипОтветыНаЗапрос)
	                      |			ИЛИ ТранспортноеСообщение.Тип В (&ТипПротоколы)
	                      |				И ТранспортноеСообщение.ПротоколСОшибкой)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТранспортноеСообщение.Дата");
	Запрос.УстановитьПараметр("Ссылка", ВходящиеСообщения);
	
	ТипВходящиеДокументы = Новый Массив;
	ТипВходящиеДокументы.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО);
	ТипВходящиеДокументы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
	ТипВходящиеДокументы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
	ТипВходящиеДокументы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
	Запрос.УстановитьПараметр("ТипВходящиеДокументы", ТипВходящиеДокументы);
	
	ТипОтветыНаЗапрос = Новый Массив;
	ТипОтветыНаЗапрос.Добавить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН);
	ТипОтветыНаЗапрос.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО);
	Запрос.УстановитьПараметр("ТипОтветыНаЗапрос", ТипОтветыНаЗапрос);
	
	ТипПротоколы = Новый Массив;
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО);
	ТипПротоколы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО);
	Запрос.УстановитьПараметр("ТипПротоколы", ТипПротоколы);
	
	ТипКритическиеОшибки = Новый Массив;
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка);
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР);
	ТипКритическиеОшибки.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС);
	Запрос.УстановитьПараметр("ТипКритическиеОшибки", ТипКритическиеОшибки);
	
	Результат = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПолучитьИРасшифроватьСообщенияПоУчетнойЗаписи(Знач УчетнаяЗапись, Почта = Неопределено, ТихийРежим = Ложь, РасшифровыватьПринудительно = Ложь, ТребуетсяПроверкаУчетнойЗаписи = Истина, ТребуетсяАвтонастройка = Истина) Экспорт
	
	//Если ТребуетсяАвтонастройка Тогда
	//	АвтоматическаяНастройкаУчетнойЗаписи(УчетнаяЗапись, , , , , ТихийРежим);
	//КонецЕсли;
	
	// проверяем учетную запись
	//Если ТребуетсяПроверкаУчетнойЗаписи И НЕ УчетнаяЗаписьНастроенаВерно(УчетнаяЗапись, ТихийРежим) Тогда//!!!
	Если ТребуетсяПроверкаУчетнойЗаписи И НЕ УчетнаяЗаписьНастроенаВерно(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	// получаем сообщения с сервера
	ВходящиеСообщения = Новый Массив;
	Если НЕ ПолучитьСообщенияПоУчетнойЗаписи(УчетнаяЗапись, Почта, ТихийРежим, ВходящиеСообщения, ТребуетсяАвтонастройка) Тогда
		Возврат;
	КонецЕсли;
	
	// определяем, разрешено ли обращение к ключу при расшифровке
	// обращение разрешено, если указан флаг принудительной расшифровки,
	// если вызов производится не в тихом режиме или если в настройках
	// учетной записи не установлен признак запрета обращений к ключу в фоне
	ОбращениеККлючуРазрешено = РасшифровыватьПринудительно ИЛИ НЕ ТихийРежим ИЛИ (ТихийРежим И НЕ ИспользуютсяСъемныеКлючевыеНосители(УчетнаяЗапись));
	
	// расшифровываем сообщения по учетной записи
	РасшифроватьСообщенияПоУчетнойЗаписи(УчетнаяЗапись, ТихийРежим, ОбращениеККлючуРазрешено);
	
	// отфильтровываем не требующие внимания полученные сообщения
	ТребущиеВниманияСообщения = ОтфильтроватьПолученныеСообщения(ВходящиеСообщения);
	
	// показываем полученные сообщения, требующие внимания
	ПоказатьСообщенияТребующиеВнимания(ТребущиеВниманияСообщения);
	
КонецПроцедуры

Функция СтрокаСодержитРусскиеСимволы(Стр)
	
	РусскиеСимволы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	Для Инд = 1 По СтрДлина(Стр) Цикл
		Если Найти(РусскиеСимволы, ВРЕГ(Сред(Стр, Инд, 1))) <> 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьАдресИПредставлениеПолучателяТранспортногоСообщения(ОбъектСообщение, СсылкаПолучатель)
	
	// если это сообщение, предназначенное для СОС, то отправляем ровно на тот адрес,
	// с которого пришло сообщение-основание
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		ОтКогоАдрес = ОбъектСообщение.Основание.ОтКогоАдрес;
		ОтКогоПредставление = ОбъектСообщение.Основание.ОтКогоПредставление;
		Если ЗначениеЗаполнено(ОтКогоАдрес) Тогда
			Возврат Новый Структура("Адрес, Представление", ОтКогоАдрес, ОтКогоПредставление);
		КонецЕсли;
	КонецЕсли;
	
	// иначе определяем результат по свойствам получателя
	Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками;
	Иначе
		Если ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
			АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыФНС;
		Иначе
			АдресПолучателя = СсылкаПолучатель.АдресЭлектроннойПочтыПФР;
		КонецЕсли;
	КонецЕсли;
	Возврат Новый Структура("Адрес, Представление", АдресПолучателя, СокрЛП(СсылкаПолучатель.Наименование));
	
КонецФункции

Функция ОтправитьТранспортноеСообщение(Сообщение, Почта = Неопределено, ТихийРежим = Ложь, ПараметрыГрупповойОбработки = Неопределено) Экспорт
	
	///////////////////////////////////////////////////////////////////////////////
	// Инициализация переменных
	
	// инициализируем флаг ошибки
	ПризнакОшибки = Ложь;
	
	
	// инициализируем объект-сообщение и ссылку на сообщение, используемые в ниже по тексту
	Если ТипЗнч(Сообщение) = Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		ОбъектСообщение = Сообщение.ПолучитьОбъект();
	Иначе
		ОбъектСообщение = Сообщение;
	КонецЕсли;
	СообщениеСсылка = ОбъектСообщение.Ссылка;
	
	// Инициализация переменных
	///////////////////////////////////////////////////////////////////////////////
	
	
	// полученные сообщения не отправляются
	Если ОбъектСообщение.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		Сообщить("Отправка полученных сообщений запрещена!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	
	// если компонента для работы с почтой создается в процедуре, то запускаем автонастройку
	КомпонентаПочтыСоздаетсяВПроцедуре = (Почта = Неопределено);
	Если КомпонентаПочтыСоздаетсяВПроцедуре Тогда
		АвтоматическаяНастройкаУчетнойЗаписи(ОбъектСообщение.УчетнаяЗапись, ОбъектСообщение.Отправитель, , , , ТихийРежим);
	КонецЕсли;
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Подготавливаем пакет в отправке, при необходимости
	
	// если пакет не сформирован, то пытаемся сформировать
	СообщениеЗашифровано = СообщениеЗашифровано(СообщениеСсылка);
	Если НЕ СообщениеЗашифровано Тогда
		
		// если действие производится в тихом режиме (в фоне) и обращение к ключам в фоне запрещено, то прервемся
		Если ТихийРежим И ИспользуютсяСъемныеКлючевыеНосители(Сообщение.УчетнаяЗапись) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// формируем пакет
		Если НЕ СформироватьПакет(СообщениеСсылка) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Подготавливаем пакет в отправке, при необходимости
	///////////////////////////////////////////////////////////////////////////////
	
	Состояние("Отправка сообщения " + ПредставлениеСообщения(СообщениеСсылка) + "...");
	
	// определяем получателя сообщения (to)
	СсылкаПолучатель = ОпределитьПолучателяТранспортногоСообщения(ОбъектСообщение);
	
	///////////////////////////////////////////////////////////////////////////////
	// Разнообразные проверки перед отправкой
	
	// различные проверки
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.Тип) Тогда
		Сообщить("Ошибка отправки транспортного сообщения: тип транспортного сообщения не определен!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель) Тогда
		Сообщить("Ошибка отправки транспортного сообщения: не задан отправитель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПолучатель) Тогда
		Сообщить("Ошибка отправки транспортного сообщения: не задан получатель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.УчетнаяЗапись) Тогда
		Сообщить("Ошибка отправки транспортного сообщения: не задана учетная запись!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектСообщение.ЦиклОбмена) Тогда
		Сообщить("Ошибка отправки транспортного сообщения: цикл обмена не задан!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	// если сообщение уже отправлялось, то удостоверимся, что его действительно необходимо
	// отправить заново (в случае одиночной отправки)
	Если ОбъектСообщение.Статус = Перечисления.СтатусыПисем.Отправленное Тогда
		Если ПараметрыГрупповойОбработки = Неопределено Тогда
			ТекстВопроса = "Сообщение уже отправлялось " + ОбъектСообщение.ДатаТранспорта + ".
							|Вы уверены, что хотите повторить отправку?
							|
							|Отправляйте сообщение только если Вы уверены в том, что предыдущая попытка отправки не удалась!
							|В СЛУЧАЕ, ЕСЛИ ПРЕДЫДУЩАЯ ОТПРАВКА БЫЛА УСПЕШНОЙ, ПОВТОРНАЯ ОТПРАВКА ПРИВЕДЕТ К ОШИБКЕ!";
			Если НЕ ВопросПредупреждение(ТекстВопроса,
										"Нет. Я не уверен(а) в том, что предыдущая попытка отправки была неудачной.",
										"Да. Я уверен(а) в том, что предыдущая попытка отправки была неудачной.") Тогда
				ПризнакОшибки = Истина;
			КонецЕсли;
		Иначе
			Сообщить("Сообщение уже отправлялось " + ОбъектСообщение.ДатаТранспорта + ".", СтатусСообщения.Внимание);
			Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
				ПризнакОшибки = Истина;
			ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
				ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
				ПризнакОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если ошибка, то прервемся
	Если ПризнакОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// сопоставление с аналогичными уже имеющимися отправками и,
	// при необходимости, запрос подтверждения на текущую отправку
	Если НЕ СопоставитьССозданнымиЦикламиОбменаПередОтправкой(СообщениеСсылка, ПараметрыГрупповойОбработки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Разнообразные проверки перед отправкой
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Инициализация свойств транспортного сообщения,
	// относящихся к заголовку почтового сообщения
	
	// формируем поля от кого
	Если ПустаяСтрока(ОбъектСообщение.ОтКогоАдрес) Тогда
		ОбъектСообщение.ОтКогоАдрес = ОбъектСообщение.УчетнаяЗапись.АдресЭлектроннойПочты;
	КонецЕсли;
	
	Если ПустаяСтрока(ОбъектСообщение.ОтКогоПредставление) Тогда
		// в представление отправителя записываем полное наименование организации-отправителя
		ОбъектСообщение.ОтКогоПредставление = Строка(ОбъектСообщение.Отправитель.НаименованиеПолное);
	КонецЕсли;
	
	// формируем кодировку
	ОбъектСообщение.Кодировка = "Windows-1251";
	
	// формируем поля кому
	Если ОбъектСообщение.Кому.Количество() = 0 Тогда
		
		АдресИПредставлениеПолучателя = ОпределитьАдресИПредставлениеПолучателяТранспортногоСообщения(ОбъектСообщение, СсылкаПолучатель);
		Если ПустаяСтрока(АдресИПредставлениеПолучателя.Адрес) Тогда
			Сообщить("Не удалось определить адрес электронной почты получателя " + СсылкаПолучатель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		НовыйАдресат = ОбъектСообщение.Кому.Добавить();
		НовыйАдресат.АдресЭлектроннойПочты = АдресИПредставлениеПолучателя.Адрес;
		НовыйАдресат.Представление = АдресИПредставлениеПолучателя.Представление;
		
	КонецЕсли;
	
	// проверка наличия вложений
	Вложения = ПолучитьВложенияТранспортногоСообщения(СообщениеСсылка, Истина);
	
	НеобходимоИнициализироватьXMessageIDИзMessageID = Ложь;
	
	// формируем дополнительные реквизиты заголовка и тему
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-декларация-ДекларацияНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "11";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "06";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "09";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-форма2НДФЛ-Форма2НДФЛНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПолучательСообщения = ?(НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель.КодИФНСПолучателя),
								ОбъектСообщение.ЦиклОбмена.ВнешняяОрганизация,
								ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган);
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = СокрЛП(ПолучательСообщения.Код);
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ОТЧЕТ";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем X-MessageID
		НеобходимоИнициализироватьXMessageIDИзMessageID = Истина;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Файл отчетности: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности Тогда
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = "СЕРВЕРОБМЕНА";
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ПОДТВОТПРАВКИФАЙЛА";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Подтверждение отправки файла: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ПолучательСообщения = ?(НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель.КодИФНСПолучателя),
								ОбъектСообщение.ЦиклОбмена.ВнешняяОрганизация,
								ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган);
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = СокрЛП(ПолучательСообщения.Код);
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ПОДТВПРИЕМАПРОТОКОЛА";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Подтверждение о приеме протокола: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		// добавляем значение X-Tax-Sender
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = "";
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = "";
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		ПолучательСообщения = ?(НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель.КодИФНСПолучателя),
								ОбъектСообщение.ЦиклОбмена.ВнешняяОрганизация,
								ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган);
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = СокрЛП(ПолучательСообщения.Код);
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "СООБЩЕНИЕНП";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем X-MessageID
		НеобходимоИнициализироватьXMessageIDИзMessageID = Истина;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Прочие файлы: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = "";
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = "";
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Подтверждение отправки: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
		
		ПолучательСообщения = ?(НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель.КодИФНСПолучателя),
								ОбъектСообщение.ЦиклОбмена.ВнешняяОрганизация,
								ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган);
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = СокрЛП(ПолучательСообщения.Код);
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ЗАПРОСИНФУСЛ";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем X-MessageID
		НеобходимоИнициализироватьXMessageIDИзMessageID = Истина;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Запрос на информационное обслуживание: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН Тогда
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = "СЕРВЕРОБМЕНА";
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ПОДТВОТПРАВКИФАЙЛА";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Подтверждение отправки файла: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН Тогда
		
		ПолучательСообщения = ?(НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель.КодИФНСПолучателя),
								ОбъектСообщение.ЦиклОбмена.ВнешняяОрганизация,
								ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган);
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = СокрЛП(ПолучательСообщения.Код);
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ПОДТВПРИЕМАПРОТОКОЛА";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Подтверждение о приеме протокола: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН Тогда
		
		ПолучательСообщения = ?(НЕ ОбъектСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ОбъектСообщение.Отправитель.КодИФНСПолучателя),
								ОбъектСообщение.ЦиклОбмена.ВнешняяОрганизация,
								ОбъектСообщение.УчетнаяЗапись.НалоговыйОрган);
		
		// добавляем значение X-Tax-Sender
		ИННОтправителя = ОбъектСообщение.Отправитель.ИНН;
		Если ПустаяСтрока(ИННОтправителя) Тогда
			Сообщить("Невозможно определить ИНН организации-отправителя " + ОбъектСообщение.Отправитель + "!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя;
		НовыйДопРеквизит.Значение = ИННОтправителя;
		
		// добавляем значение X-Tax-Receiver
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя;
		НовыйДопРеквизит.Значение = СокрЛП(ПолучательСообщения.Код);
		
		// добавляем значение X-Tax-Type
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации;
		НовыйДопРеквизит.Значение = "ПОДТВПРИЕМАОТВЕТАИФНС";
		
		// добавляем значение X-Tax-System
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы;
		НовыйДопРеквизит.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		// добавляем значение X-Message-ID
		ИДПервичногоСообщения = ОбъектСообщение.ЦиклОбмена.Идентификатор;
		Если ПустаяСтрока(ИДПервичногоСообщения) Тогда
			Сообщить("Невозможно определить идентификатор первичного сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
		НовыйДопРеквизит.Значение = ИДПервичногоСообщения;
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Подтверждение о приеме ответа на запрос: " + СокрЛП(Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, "Тип").ИмяФайла);
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Pension";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "Pension-Unformal";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		
		// формируем тему
		Если ПустаяСтрока(ОбъектСообщение.Тема) Тогда
			ОбъектСообщение.Тема = "ReSign: Pension-Unformal";
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-обращение-ОбращениеНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПисьмоНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "03";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРассылкаНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "03";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	ИначеЕсли ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		
		ОбъектСообщение.Тема = "ФНС:1.0-запрос-ЗапросНП";
		
		ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Очистить();
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Message-ID";
		НовыйДопРеквизит.Значение = СокрЛП(ОбъектСообщение.ЦиклОбмена.Идентификатор);
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Code";
		НовыйДопРеквизит.Значение = "01";
		
		НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
		НовыйДопРеквизит.Тип = "X-Tax-Version";
		НовыйДопРеквизит.Значение = "ФНС:1.0";
		
	КонецЕсли;
	
	// Инициализация свойств транспортного сообщения,
	// относящихся к заголовку почтового сообщения
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Формирование почтового сообщения на основе транспортного сообщения
	// Работа с объектом Почта
	
	// получаем зашифрованный транспортный контейнер
	ОписаниеТранспортныхКонтейнеров = ПолучитьТранспортныйКонтейнер(СообщениеСсылка, Истина);
	Если ОписаниеТранспортныхКонтейнеров.Количество() = 0 Тогда
		Сообщить("Не удалось отправить транспортное сообщение по причине отсутствия сформированного пакета.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	ОписаниеТранспортногоКонтейнера = ОписаниеТранспортныхКонтейнеров[0];
	
	// выгружаем на диск зашифрованный транспортный контейнер
	ИмяЗашифрованногоВложения = ОписаниеТранспортногоКонтейнера.ИмяФайла;
	ДанныеЗашифрованногоВложения = ОписаниеТранспортногоКонтейнера.Данные;
	ВремФайлЗашифрованноеВложение = ПолучитьИмяВременногоФайла();
	Попытка
		ДанныеЗашифрованногоВложения.Получить().Записать(ВремФайлЗашифрованноеВложение);
	Исключение
		Сообщить("Не удалось сохранить во временный файл на диске готовый к отправке, зашифрованный транспортный контейнер!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	// работа с почтой
	Если КомпонентаПочтыСоздаетсяВПроцедуре Тогда
		Почта = СоздатьОбъектДляРаботыСПочтой();
		Если Почта = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		ИнициализироватьСвойстваПочты(Почта, ОбъектСообщение.УчетнаяЗапись);
	КонецЕсли;
	
	// инициализация свойств объекта Почта
	Если ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
	
		Если ОбъектСообщение.ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			
			Почта.Кодировка = ОбъектСообщение.Кодировка;
			Почта.Тема = ОбъектСообщение.Тема;
			
			// инициализируем адреса
			СтрКому = ОбъектСообщение.Кому.Получить(0);
			Почта.ДобавитьАдрес("to", СокрЛП(СтрКому.АдресЭлектроннойПочты), СокрЛП(СтрКому.Представление));
			Почта.ДобавитьАдрес("reply-to", СокрЛП(ОбъектСообщение.ОтКогоАдрес), СокрЛП(ОбъектСообщение.ОтКогоПредставление));
			Почта.ДобавитьАдрес("from", СокрЛП(ОбъектСообщение.ОтКогоАдрес), СокрЛП(ОбъектСообщение.ОтКогоПредставление));
			
			// сохраняем идентификатор сообщения
			ОбъектСообщение.ИдентификаторСообщения = Почта.ИдентификаторСообщения;
			
			// дополнительные реквизиты
			Для Каждого ДополнительныйРеквизит Из ОбъектСообщение.ДополнительныеРеквизитыЗаголовка Цикл
				Почта.УстановитьПолеЗаголовка(ДополнительныйРеквизит.Тип, ДополнительныйРеквизит.Значение, ?(СтрокаСодержитРусскиеСимволы(ДополнительныйРеквизит.Значение), 1, 0));
			КонецЦикла;
			
			// добавляем вложение
			Почта.ДобавитьВложение(ВремФайлЗашифрованноеВложение, ИмяЗашифрованногоВложения, ИмяЗашифрованногоВложения);
			
		Иначе
			
			Почта.Кодировка = ОбъектСообщение.Кодировка;
			Почта.Тема = ОбъектСообщение.Тема;
			
			АдресКому = СокрЛП(ОбъектСообщение.Кому.Получить(0).АдресЭлектроннойПочты);
			Если СтрДлина(АдресКому) > 40 Тогда
				Сообщить("Адрес получателя (" + АдресКому + ") превышает максимальную допустимую длину в 40 символов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			Почта.ДобавитьАдрес("to", АдресКому, СокрЛП(Лев(ОбъектСообщение.Кому.Получить(0).Представление, 80)));
			
			АдресОтКого = СокрЛП(ОбъектСообщение.ОтКогоАдрес);
			Если СтрДлина(АдресОтКого) > 40 Тогда
				Сообщить("Адрес отправителя (" + АдресОтКого + ") превышает максимальную допустимую длину в 40 символов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			Почта.ДобавитьАдрес("reply-to", АдресОтКого, СокрЛП(Лев(ОбъектСообщение.ОтКогоПредставление, 80)));
			Почта.ДобавитьАдрес("from", АдресОтКого, СокрЛП(Лев(ОбъектСообщение.ОтКогоПредставление, 80)));
		
			// инициализируем X-Message-ID из Message-ID
			Если НеобходимоИнициализироватьXMessageIDИзMessageID Тогда
				НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
				НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
				НовыйДопРеквизит.Значение = Почта.ИдентификаторСообщения;
			КонецЕсли;
			
			// сохраняем идентификатор сообщения
			ОбъектСообщение.ИдентификаторСообщения = Почта.ИдентификаторСообщения;
			
			// дополнительные реквизиты
			Для Каждого ДополнительныйРеквизит Из ОбъектСообщение.ДополнительныеРеквизитыЗаголовка Цикл
				Если ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя Тогда
					Почта.УстановитьПолеЗаголовка("X-Tax-Sender", ДополнительныйРеквизит.Значение, 0);
					//Почта.ИдентификаторОтправителя = ДополнительныйРеквизит.Значение;
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя Тогда
					Почта.УстановитьПолеЗаголовка("X-Tax-Receiver", ДополнительныйРеквизит.Значение, 0);
					//Почта.ИдентификаторПолучателя = ДополнительныйРеквизит.Значение;
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации Тогда
					Почта.ТипПередаваемогоКонтейнера = ДополнительныйРеквизит.Значение;
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы Тогда
					Почта.ИмяПередающейСистемы = ДополнительныйРеквизит.Значение;
				ИначеЕсли ДополнительныйРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения Тогда
					Почта.ПервичныйИдентификаторСообщения = ДополнительныйРеквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			
			//// если сообщение первичное, то проинициализируем реквизит X-Message-ID
			//Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
			//	НовыйДопРеквизит = ОбъектСообщение.ДополнительныеРеквизитыЗаголовка.Добавить();
			//	НовыйДопРеквизит.Тип = Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения;
			//	НовыйДопРеквизит.Значение = ОбъектСообщение.ИдентификаторСообщения;
			//КонецЕсли;
			
			// добавляем вложение
			ИмяФайлаВложенияСодержитРусскиеСимволы = СтрокаСодержитРусскиеСимволы(ИмяЗашифрованногоВложения);
			Почта.ДобавитьВложение(ВремФайлЗашифрованноеВложение, ИмяЗашифрованногоВложения, ИмяЗашифрованногоВложения, ?(ИмяФайлаВложенияСодержитРусскиеСимволы, 1, 0)); // !!! параметры вложения - без шифрования, иначе "не понимает"
			
			// инициализируем длину транспортного контейнера
			ОбъектВремФайл = Новый Файл(ВремФайлЗашифрованноеВложение);
			РазмерЗашифрованногоВложения = ОбъектВремФайл.Размер();
			Почта.РазмерТранспортногоКонтейнера = РазмерЗашифрованногоВложения;
			
			// проверяем, не превышает ли размер транспортного сообщения 512 МБ
			// вычисления весьма приблизительные и только для вложения
			Если Окр(РазмерЗашифрованногоВложения * 4 / 3) > 512 * 1024 * 1024 Тогда
				Сообщить("Невозможна отправка транспортного сообщения, размер которого превышает 512 МБ!", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ОбъектСообщение.ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
		
		Почта.Кодировка = ОбъектСообщение.Кодировка;
		Почта.Тема = ОбъектСообщение.Тема;
		
		СтрКому = ОбъектСообщение.Кому.Получить(0);
		Почта.ДобавитьАдрес("to", СокрЛП(СтрКому.АдресЭлектроннойПочты), СокрЛП(СтрКому.Представление));
		
		Почта.ДобавитьАдрес("reply-to", СокрЛП(ОбъектСообщение.ОтКогоАдрес), СокрЛП(ОбъектСообщение.ОтКогоПредставление));
		Почта.ДобавитьАдрес("from", СокрЛП(ОбъектСообщение.ОтКогоАдрес), СокрЛП(ОбъектСообщение.ОтКогоПредставление));
		
		// сохраняем идентификатор сообщения
		ОбъектСообщение.ИдентификаторСообщения = Почта.ИдентификаторСообщения;
		
		Почта.ДобавитьВложение(ВремФайлЗашифрованноеВложение, ИмяЗашифрованногоВложения, ИмяЗашифрованногоВложения);
		
	КонецЕсли;
	
	// Формирование почтового сообщения на основе транспортного сообщения
	// Работа с объектом Почта
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Отправка сообщения
	
	РезультатОтправки = ОтправитьСообщение(Почта);
	УдалитьВременныйФайл(ВремФайлЗашифрованноеВложение);
	Если НЕ РезультатОтправки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Отправка сообщения
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Отражение отправки в ИБ
	
	// изменяем статус сообщения
	ОбъектСообщение.Статус = Перечисления.СтатусыПисем.Отправленное;
	
	// определяем дату транспорта
	ОбъектСообщение.ДатаТранспорта = ТекущаяДата();
	
	// сохраняем сообщение
	Попытка
		ОбъектСообщение.Записать();
	Исключение
		Сообщить("Не удалось записать сообщение """ + ПредставлениеСообщения(СообщениеСсылка) + """!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	// Отражение отправки в ИБ
	////////////////////////////////////////////////////////////////////////////4уккккккккккк///
	
	Состояние();
	
	Возврат Истина;
	
КонецФункции

Функция СопоставитьССозданнымиЦикламиОбменаПередОтправкой(Сообщение, ПараметрыГрупповойОбработки = Неопределено)
	
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка,
		                      |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	ЦиклыОбмена.ВидДокумента,
		                      |	ВложенныйЗапрос.Ссылка КАК ПервичноеСообщениеСодержащееОтчетность,
		                      |	ВложенныйЗапрос.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Ссылка КАК Ссылка,
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипПервичноеСообщениеСодержащееОтчетность) КАК ВложенныйЗапрос
		                      |		ПО ЦиклыОбмена.Ссылка = ВложенныйЗапрос.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Организация = &Организация
		                      |	И ЦиклыОбмена.ВнешняяОрганизация = &НалоговыйОрган
		                      |	И ЦиклыОбмена.Тип = &Тип
		                      |	И ЦиклыОбмена.ВидОтчета = &ВидОтчета
		                      |	И ЦиклыОбмена.ДатаНачалаПериода = &ДатаНачалаПериода
		                      |	И ЦиклыОбмена.ДатаОкончанияПериода = &ДатаОкончанияПериода
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления");
							  
		Запрос.УстановитьПараметр("Организация",									Сообщение.Отправитель);
		Запрос.УстановитьПараметр("НалоговыйОрган",									Сообщение.ЦиклОбмена.ВнешняяОрганизация);
		Запрос.УстановитьПараметр("ДатаНачалаПериода",								Сообщение.ЦиклОбмена.ДатаНачалаПериода);
		Запрос.УстановитьПараметр("ДатаОкончанияПериода",							Сообщение.ЦиклОбмена.ДатаОкончанияПериода);
		Запрос.УстановитьПараметр("ВидОтчета",										Сообщение.ЦиклОбмена.ВидОтчета);
		Запрос.УстановитьПараметр("Тип",											Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
		Запрос.УстановитьПараметр("Ссылка",											Сообщение.ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипПервичноеСообщениеСодержащееОтчетность",		Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
		Запрос.УстановитьПараметр("ВидДокумента",									Сообщение.ЦиклОбмена.ВидДокумента);
		Запрос.УстановитьПараметр("ПометкаУдаления",								Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		ТекущаяВерсия = Сообщение.ЦиклОбмена.ВидДокумента;
		ПредставлениеТекущегоОтчета = ?(ТекущаяВерсия = 0, "первичный", "корректирующий")
										+ ?(ТекущаяВерсия > 0, " (с номером корректировки " + ТекущаяВерсия + ")", "")
										+ " отчет вида """ + Сообщение.ЦиклОбмена.ВидОтчета + """"
										+ " за период " + ПредставлениеПериода(НачалоДня(Сообщение.ЦиклОбмена.ДатаНачалаПериода), КонецДня(Сообщение.ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина")
										+ " по организации """ + Сообщение.Отправитель + """"
										+ " в налоговый орган " + Сообщение.ЦиклОбмена.ВнешняяОрганизация;
										
		
		// проверка на существование незакрытых циклов обмена (кроме текущего)
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена, ВидДокумента", ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), ТекущаяВерсия));
		СуществуютОтправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленныеПервичные + СуществуютНеотправленныеПервичные > 0 Тогда
			Если СуществуютОтправленныеПервичные Тогда
				ТекстСообщения = "Вы уже отправляли аналогичный текущему " + ПредставлениеТекущегоОтчета + "."
								+ ?(СуществуютНеотправленныеПервичные,"
								|
								|Также существуют аналогичные подготовленные к отправке и неотправленные сообщения.", "");
			ИначеЕсли СуществуютНеотправленныеПервичные Тогда
				ТекстСообщения = "Вы уже подготавливали к отправке (но не отправляли) аналогичный текущему " + ПредставлениеТекущегоОтчета + ".";
			КонецЕсли;
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение(ТекстСообщения + "
											|
											|Вы действительно хотите отправить текущее сообщение (НЕ РЕКОМЕНДУЕТСЯ)?"
											,
											"Нет, прервать отправку.",
											"Да, я действительно хочу отправить текущее сообщение.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		// проверка на существование/отсутствие цикла обмена по аналогичному отчету с версией (<текущая> - 1)
		Если ТекущаяВерсия <> 0 Тогда
			ПредыдущаяВерсия = ТекущаяВерсия - 1;
			ЦиклыОбменаПредыдущейВерсии = ЦиклыОбмена.НайтиСтроки(Новый Структура("ВидДокумента, СтатусПервичногоСообщения", ПредыдущаяВерсия, Перечисления.СтатусыПисем.Отправленное));
			Если ЦиклыОбменаПредыдущейВерсии = 0 Тогда
				Если ПараметрыГрупповойОбработки = Неопределено Тогда
					Если НЕ ВопросПредупреждение("Внимание!
										|Аналогичный отчет предыдущей версии (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Сообщение.ЦиклОбмена.ВидДокумента) + ") не был представлен!
										|
										|Вы действительно хотите отправить текущее сообщение (НЕ РЕКОМЕНДУЕТСЯ)?",
										"Нет, прервать отправку.",
										"Да, я действительно хочу отправить текущее сообщение.") Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Сообщить("Аналогичный отчет предыдущей версии (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Сообщение.ЦиклОбмена.ВидДокумента) + ") не был представлен.", СтатусСообщения.Внимание);
					Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
						Возврат Ложь;
					ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
						ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
							  |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	Сообщения.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипФорма2НДФЛНП) КАК Сообщения
		                      |		ПО ЦиклыОбмена.Ссылка = Сообщения.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Предмет = &Предмет
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка");
							  
		ЦиклОбмена = Сообщение.ЦиклОбмена;
		Запрос.УстановитьПараметр("Ссылка",						ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипФорма2НДФЛНП",			Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		Запрос.УстановитьПараметр("Предмет",					ЦиклОбмена.Предмет);
		Запрос.УстановитьПараметр("ПометкаУдаления",			Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена", ПолучитьПустуюДатуЗавершенияЦиклаОбмена()));
		СуществуютОтправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленные + СуществуютНеотправленные > 0 Тогда
			Если СуществуютОтправленные Тогда
				ТекстСообщения = "Вы уже отправляли сообщения, содержащие текущий документ."
								+ ?(СуществуютНеотправленные,"
								|
								|Также существуют подготовленные к отправке и неотправленные сообщения с тем же документом.", "");
			ИначеЕсли СуществуютНеотправленные Тогда
				ТекстСообщения = "Вы уже подготавливали к отправке другие сообщения, содержащие текущий документ.";
			КонецЕсли;
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение(ТекстСообщения + "
											|
											|Вы действительно хотите отправить текущее сообщение?",
											"Нет, прервать отправку.",
											"Да, я действительно хочу отправить текущее сообщение.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка,
		                      |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	ЦиклыОбмена.ВидДокумента,
		                      |	ВложенныйЗапрос.Ссылка КАК ПервичноеСообщениеСодержащееОтчетность,
		                      |	ВложенныйЗапрос.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Ссылка КАК Ссылка,
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипПервичноеСообщениеСодержащееОтчетность) КАК ВложенныйЗапрос
		                      |		ПО ЦиклыОбмена.Ссылка = ВложенныйЗапрос.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Организация = &Организация
		                      |	И ЦиклыОбмена.ВнешняяОрганизация = &НалоговыйОрган
		                      |	И ЦиклыОбмена.Тип = &Тип
		                      |	И ЦиклыОбмена.ВидОтчета = &ВидОтчета
		                      |	И ЦиклыОбмена.ДатаНачалаПериода = &ДатаНачалаПериода
		                      |	И ЦиклыОбмена.ДатаОкончанияПериода = &ДатаОкончанияПериода
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления");
							  
		Запрос.УстановитьПараметр("Организация",				Сообщение.Отправитель);
		Запрос.УстановитьПараметр("НалоговыйОрган",				Сообщение.ЦиклОбмена.ВнешняяОрганизация);
		Запрос.УстановитьПараметр("ДатаНачалаПериода",			Сообщение.ЦиклОбмена.ДатаНачалаПериода);
		Запрос.УстановитьПараметр("ДатаОкончанияПериода",		Сообщение.ЦиклОбмена.ДатаОкончанияПериода);
		Запрос.УстановитьПараметр("ВидОтчета",					Сообщение.ЦиклОбмена.ВидОтчета);
		Запрос.УстановитьПараметр("Тип",						Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
		Запрос.УстановитьПараметр("Ссылка",						Сообщение.ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипПервичноеСообщениеСодержащееОтчетность",		Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
		Запрос.УстановитьПараметр("ВидДокумента",				Сообщение.ЦиклОбмена.ВидДокумента);
		Запрос.УстановитьПараметр("ПометкаУдаления",			Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		ТекущаяВерсия = Сообщение.ЦиклОбмена.ВидДокумента;
		ПредставлениеТекущегоОтчета = ?(ТекущаяВерсия = 0, "первичный", "корректирующий")
										+ ?(ТекущаяВерсия > 0, " (с номером корректировки " + ТекущаяВерсия + ")", "")
										+ " отчет вида """ + Сообщение.ЦиклОбмена.ВидОтчета + """"
										+ " за период " + ПредставлениеПериода(НачалоДня(Сообщение.ЦиклОбмена.ДатаНачалаПериода), КонецДня(Сообщение.ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина")
										+ " по организации """ + Сообщение.Отправитель + """"
										+ " в налоговый орган " + Сообщение.ЦиклОбмена.ВнешняяОрганизация;
										
		
		// проверка на существование незакрытых циклов обмена (кроме текущего)
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена, ВидДокумента", ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), ТекущаяВерсия));
		СуществуютОтправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленныеПервичные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения, ВидДокумента", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленныеПервичные + СуществуютНеотправленныеПервичные > 0 Тогда
			Если СуществуютОтправленныеПервичные Тогда
				ТекстСообщения = "Вы уже отправляли аналогичный текущему " + ПредставлениеТекущегоОтчета + "."
								+ ?(СуществуютНеотправленныеПервичные,"
								|
								|Также существуют аналогичные подготовленные к отправке и неотправленные сообщения.", "");
			ИначеЕсли СуществуютНеотправленныеПервичные Тогда
				ТекстСообщения = "Вы уже подготавливали к отправке (но не отправляли) аналогичный текущему " + ПредставлениеТекущегоОтчета + ".";
			КонецЕсли;
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение(ТекстСообщения + "
											|
											|Вы действительно хотите отправить текущее сообщение (НЕ РЕКОМЕНДУЕТСЯ)?"
											,
											"Нет, прервать отправку.",
											"Да, я действительно хочу отправить текущее сообщение.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		// проверка на существование/отсутствие цикла обмена по аналогичному отчету с версией (<текущая> - 1)
		Если ТекущаяВерсия <> 0 Тогда
			ПредыдущаяВерсия = ТекущаяВерсия - 1;
			ЦиклыОбменаПредыдущейВерсии = ЦиклыОбмена.НайтиСтроки(Новый Структура("ВидДокумента, СтатусПервичногоСообщения", ПредыдущаяВерсия, Перечисления.СтатусыПисем.Отправленное));
			Если ЦиклыОбменаПредыдущейВерсии = 0 Тогда
				Если ПараметрыГрупповойОбработки = Неопределено Тогда
					Если НЕ ВопросПредупреждение("Внимание!
										|Аналогичный отчет предыдущей версии (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Сообщение.ЦиклОбмена.ВидДокумента) + ") не был представлен!
										|
										|Вы действительно хотите отправить текущее сообщение (НЕ РЕКОМЕНДУЕТСЯ)?",
										"Нет, прервать отправку.",
										"Да, я действительно хочу отправить текущее сообщение.") Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Сообщить("Аналогичный отчет предыдущей версии (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Сообщение.ЦиклОбмена.ВидДокумента) + ") не был представлен.", СтатусСообщения.Внимание);
					Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
						Возврат Ложь;
					ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
						ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
							  |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	Сообщения.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипНеформализованныйДокументНалогоплательщика) КАК Сообщения
		                      |		ПО ЦиклыОбмена.Ссылка = Сообщения.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Предмет = &Предмет
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка");
							  
		ЦиклОбмена = Сообщение.ЦиклОбмена;
		Запрос.УстановитьПараметр("Ссылка",						ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипНеформализованныйДокументНалогоплательщика",		Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика);
		Запрос.УстановитьПараметр("Предмет",					ЦиклОбмена.Предмет);
		Запрос.УстановитьПараметр("ПометкаУдаления",			Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена", ПолучитьПустуюДатуЗавершенияЦиклаОбмена()));
		СуществуютОтправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленные + СуществуютНеотправленные > 0 Тогда
			Если СуществуютОтправленные Тогда
				ТекстСообщения = "Вы уже отправляли сообщения, содержащие текущий документ."
								+ ?(СуществуютНеотправленные,"
								|
								|Также существуют подготовленные к отправке и неотправленные сообщения с тем же документом.", "");
			ИначеЕсли СуществуютНеотправленные Тогда
				ТекстСообщения = "Вы уже подготавливали к отправке другие сообщения, содержащие текущий документ.";
			КонецЕсли;
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение(ТекстСообщения + "
											|
											|Вы действительно хотите отправить текущее сообщение?",
											"Нет, прервать отправку.",
											"Да, я действительно хочу отправить текущее сообщение.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
							  |	ЦиклыОбмена.ДатаЗакрытия КАК ДатаЗакрытияЦиклаОбмена,
		                      |	Сообщения.Статус КАК СтатусПервичногоСообщения
		                      |ИЗ
		                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		                      |			ТранспортноеСообщение.Статус КАК Статус,
		                      |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
		                      |		ИЗ
		                      |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                      |		ГДЕ
		                      |			ТранспортноеСообщение.Тип = &ТипПервичноеСообщениеСодержащееОтчетность) КАК Сообщения
		                      |		ПО ЦиклыОбмена.Ссылка = Сообщения.ЦиклОбмена
		                      |ГДЕ
		                      |	ЦиклыОбмена.Предмет = &Предмет
		                      |	И ЦиклыОбмена.ПометкаУдаления = &ПометкаУдаления
		                      |	И ЦиклыОбмена.Ссылка <> &Ссылка");
							  
		ЦиклОбмена = Сообщение.ЦиклОбмена;
		Запрос.УстановитьПараметр("Ссылка",										ЦиклОбмена);
		Запрос.УстановитьПараметр("ТипПервичноеСообщениеСодержащееОтчетность",	Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		Запрос.УстановитьПараметр("Предмет",									ЦиклОбмена.Предмет);
		Запрос.УстановитьПараметр("ПометкаУдаления",							Ложь);
		
		ЦиклыОбмена = Запрос.Выполнить().Выгрузить();
		
		НезакрытыеЦиклыОбмена =  ЦиклыОбмена.НайтиСтроки(Новый Структура("ДатаЗакрытияЦиклаОбмена", ПолучитьПустуюДатуЗавершенияЦиклаОбмена()));
		СуществуютОтправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Отправленное, ТекущаяВерсия)).Количество() <> 0);
		СуществуютНеотправленные = (ЦиклыОбмена.НайтиСтроки(Новый Структура("СтатусПервичногоСообщения", Перечисления.СтатусыПисем.Исходящее, ТекущаяВерсия)).Количество() <> 0);
		КоличествоНезакрытых = НезакрытыеЦиклыОбмена.Количество();
		
		Если СуществуютОтправленные + СуществуютНеотправленные > 0 Тогда
			Если СуществуютОтправленные Тогда
				ТекстСообщения = "Вы уже отправляли сообщения, содержащие текущий отчет."
								+ ?(СуществуютНеотправленные,"
								|
								|Также существуют подготовленные к отправке и неотправленные сообщения с тем же отчетом.", "");
			ИначеЕсли СуществуютНеотправленные Тогда
				ТекстСообщения = "Вы уже подготавливали к отправке другие сообщения, содержащие текущий отчет.";
			КонецЕсли;
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение(ТекстСообщения + "
											|
											|Вы действительно хотите отправить текущее сообщение?",
											"Нет, прервать отправку.",
											"Да, я действительно хочу отправить текущее сообщение.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОсуществитьОбменСНалоговымОрганом(парамУчетнаяЗапись, ТихийРежим = Ложь) Экспорт
	
	Почта = СоздатьОбъектДляРаботыСПочтой(ТихийРежим);
	Если Почта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// проверяем, включена ли возможность документооборота
	Если ТипЗнч(парамУчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		
		ссылкаУчетнаяЗапись = УчетнаяЗаписьОрганизации(парамУчетнаяЗапись);
		Если НЕ ЗначениеЗаполнено(ссылкаУчетнаяЗапись) Тогда
			Если НЕ ТихийРежим Тогда
				Сообщить("Для организации """ + парамУчетнаяЗапись + """ не предусмотрена возможность информационного взаимодействия с ФНС и с ПФР по каналам связи.", СтатусСообщения.Внимание);
			КонецЕсли;
			Возврат;
		КонецЕсли;
		УчетнаяЗапись = ссылкаУчетнаяЗапись;
		
	Иначе
		УчетнаяЗапись = парамУчетнаяЗапись;
	КонецЕсли;
	
	АвтоматическаяНастройкаУчетнойЗаписи(УчетнаяЗапись, , , , , ТихийРежим);
	
	//Если НЕ УчетнаяЗаписьНастроенаВерно(УчетнаяЗапись, ТихийРежим) Тогда//!!!
	Если НЕ УчетнаяЗаписьНастроенаВерно(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
		
	// инициализируем свойства почты
	ИнициализироватьСвойстваПочты(Почта, УчетнаяЗапись);
	
	//Если НЕ ТихийРежим Тогда
	//	Сообщить("Учетная запись """ + УчетнаяЗапись + """..." , СтатусСообщения.Информация);
	//КонецЕсли;
	
	// получаем сообщения
	ПолучитьИРасшифроватьСообщенияПоУчетнойЗаписи(УчетнаяЗапись, Почта, ТихийРежим, , Ложь, Ложь);
		
	Почта = СоздатьОбъектДляРаботыСПочтой(ТихийРежим);
	Если Почта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// инициализируем свойства почты
	ИнициализироватьСвойстваПочты(Почта, УчетнаяЗапись);
	
	// шифруем сообщения по учетной записи
	Если НЕ (ТихийРежим И ИспользуютсяСъемныеКлючевыеНосители(УчетнаяЗапись)) Тогда
		ЗашифроватьСообщенияПоУчетнойЗаписи(УчетнаяЗапись, ТихийРежим);
	КонецЕсли;
	
	// отправляем сообщения
	ОтправитьСообщенияПоУчетнойЗаписи(УчетнаяЗапись, Почта, ТихийРежим, Ложь, Ложь);
	
	//// отключаемся
	//ОтключитьсяОтПочтовогоЯщика(Почта, УчетнаяЗапись, ТихийРежим);
	
КонецПроцедуры

Функция УчетныеЗаписиПоОрганизациям(Организации) Экспорт
	
	СоответствиеУчетныхЗаписейОрганизациям = Новый Соответствие;
	УчетныеЗаписи = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка КАК Организация,
	                      |	ВЫБОР
	                      |		КОГДА Организации.ВидОбменаСКонтролирующимиОрганами = &ОбменВУниверсальномВФормате
	                      |			ТОГДА Организации.УчетнаяЗаписьОбмена
	                      |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                      |	КОНЕЦ КАК УчетнаяЗапись
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.Ссылка В(&Ссылка)");
	Запрос.УстановитьПараметр("ОбменВУниверсальномВФормате", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("Ссылка", Организации);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеУчетныхЗаписейОрганизациям.Вставить(Выборка.Организация, Выборка.УчетнаяЗапись);
	КонецЦикла;
	
	Для Инд = 1 По Организации.Количество() Цикл
		
		ТекОрганизация = Организации.Получить(Инд - 1);
		ТекУчетнаяЗапись = СоответствиеУчетныхЗаписейОрганизациям[ТекОрганизация];
		
		Если ЗначениеЗаполнено(ТекУчетнаяЗапись) И УчетныеЗаписи.Найти(ТекУчетнаяЗапись) = Неопределено Тогда
			УчетныеЗаписи.Добавить(ТекУчетнаяЗапись);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат УчетныеЗаписи;
	
КонецФункции

Процедура ЗашифроватьСообщенияПоУчетнойЗаписи(Знач УчетнаяЗапись, ТихийРежим = Ложь) Экспорт
	
	Если УчетнаяЗапись = Неопределено Тогда
		Сообщить("Не задана учетная запись для подготовки сообщений!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Состояние("Подготовка сообщений по учетной записи """ + УчетнаяЗапись + """...");
	Если НЕ ТихийРежим Тогда
		Сообщить("Подготовка сообщений по учетной записи """ + УчетнаяЗапись + """...", СтатусСообщения.Информация);
	КонецЕсли;
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		
		ссылкаУчетнаяЗапись = УчетнаяЗаписьОрганизации(УчетнаяЗапись);
		Если ссылкаУчетнаяЗапись.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			Сообщить("Для организации """ + ссылкаУчетнаяЗапись + """ не предусмотрена возможность использования встроенного механизма защищенного документооборота с ФНС и ПФР по каналам связи.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		Организация = УчетнаяЗапись;
		УчетнаяЗапись = ссылкаУчетнаяЗапись;
		
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ДокументТранспортноеСообщение.Ссылка,
	                      |	ДокументТранспортноеСообщение.Тип
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ДокументТранспортноеСообщение
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |		ПО (ТранспортныеКонтейнеры.ТранспортноеСообщение = ДокументТранспортноеСообщение.Ссылка)
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |		ПО (СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = ДокументТранспортноеСообщение.Ссылка)
	                      |ГДЕ
	                      |	ДокументТранспортноеСообщение.Статус = &Статус
	                      |	И ДокументТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
	                      |	И ДокументТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И ДокументТранспортноеСообщение.Тип В(&ТипыАвтоотправляемыхСообщений)
	                      |	И ДокументТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия = &ДатаЗакрытия
	                      |	И ДокументТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления
	                      |	И (ЕСТЬNULL(СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение, ИСТИНА) <> ИСТИНА ИЛИ ДокументТранспортноеСообщение.Тип = &ТипПротоколКвитанцияПФР)
	                      |	И ЕСТЬNULL(ТранспортныеКонтейнеры.ТранспортноеСообщение, ИСТИНА) = ИСТИНА
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДокументТранспортноеСообщение.ЦиклОбмена.ДатаСоздания,
	                      |	ДокументТранспортноеСообщение.Тип.Порядок");
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Исходящее);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаЗакрытия", ПолучитьПустуюДатуЗавершенияЦиклаОбмена());
	
	ТипыАвтоотправляемыхСообщений = Новый Массив;
	
	// ФНС 141
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности);
	
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО);
	
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика);
	
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН);
	
	// ПФР
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
	
	// ФНС 534
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	
	
	Запрос.УстановитьПараметр("ТипыАвтоотправляемыхСообщений", ТипыАвтоотправляемыхСообщений);
	
	// у протокола ПФР может не быть содержимого, но его все равно надо отправлять
	Запрос.УстановитьПараметр("ТипПротоколКвитанцияПФР", Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	КоличествоЗашифрованных = 0;
	КоличествоНеЗашифрованных = 0;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ТихийРежим Тогда
			Сообщить("Подготовка сообщения " + ПредставлениеСообщения(Выборка.Ссылка) + "...", СтатусСообщения.Информация);
		КонецЕсли;
		
		РезультатПодготовки = СформироватьПакет(Выборка.Ссылка);
		Если РезультатПодготовки Тогда
			КоличествоЗашифрованных = КоличествоЗашифрованных + 1;
		Иначе
			КоличествоНеЗашифрованных = КоличествоНеЗашифрованных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТихийРежим Тогда
		ВсегоСообщений = КоличествоЗашифрованных + КоличествоНеЗашифрованных;
		Если ВсегоСообщений = 0 Тогда
			Сообщить("Сообщения для подготовки не обнаружены.", СтатусСообщения.Информация);
		Иначе
			Сообщить("Подготовлено сообщений: " + Формат(КоличествоЗашифрованных, "ЧГ=") + " из " + Формат(ВсегоСообщений, "ЧГ=") + ".", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправитьСообщенияПоУчетнойЗаписи(Знач УчетнаяЗапись, Почта = Неопределено, ТихийРежим = Ложь, ТребуетсяПроверкаУчетнойЗаписи = Ложь, ТребуетсяАвтонастройка = Истина) Экспорт
	
	Если УчетнаяЗапись = Неопределено Тогда
		Сообщить("Не задана учетная запись для получения сообщений!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
		
	Состояние("Получение сообщений по учетной записи """ + УчетнаяЗапись + """...");
	Если НЕ ТихийРежим Тогда
		Сообщить("Отправка сообщений по учетной записи """ + УчетнаяЗапись + """...", СтатусСообщения.Информация);
	КонецЕсли;
	
	// !!! ПФР
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		
		ссылкаУчетнаяЗапись = УчетнаяЗаписьОрганизации(УчетнаяЗапись);
		Если ссылкаУчетнаяЗапись.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			Сообщить("Для организации """ + ссылкаУчетнаяЗапись + """ не предусмотрена возможность использования встроенного механизма информационного взаимодействия с ФНС и ПФР по каналам связи.", СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
		
		Организация = УчетнаяЗапись;
		УчетнаяЗапись = ссылкаУчетнаяЗапись;
		
	Иначе
		Организация = Неопределено;
	КонецЕсли;
		
	Если ТребуетсяАвтонастройка Тогда
		АвтоматическаяНастройкаУчетнойЗаписи(УчетнаяЗапись, Организация, , , , ТихийРежим);
	КонецЕсли;
	
	//Если ТребуетсяПроверкаУчетнойЗаписи И НЕ УчетнаяЗаписьНастроенаВерно(УчетнаяЗапись, ТихийРежим) Тогда//!!!
	Если ТребуетсяПроверкаУчетнойЗаписи И НЕ УчетнаяЗаписьНастроенаВерно(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	КомпонентаПочтыСоздаетсяВПроцедуре = (Почта = Неопределено);
	Если КомпонентаПочтыСоздаетсяВПроцедуре Тогда
		Почта = СоздатьОбъектДляРаботыСПочтой();
		Если Почта = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИнициализироватьСвойстваПочты(Почта, УчетнаяЗапись, Истина);
		СтатусПодключения = ПодключитьсяКПочтовомуСерверу(Почта);
		Если НЕ СтатусПодключения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ДокументТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ДокументТранспортноеСообщение
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |		ПО (ТранспортныеКонтейнеры.ТранспортноеСообщение = ДокументТранспортноеСообщение.Ссылка)
	                      |ГДЕ
	                      |	ДокументТранспортноеСообщение.Статус = &Статус
	                      |	И ДокументТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
	                      |	И ДокументТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И ДокументТранспортноеСообщение.Тип В(&ТипыАвтоотправляемыхСообщений)
	                      |	И ДокументТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия = &ДатаЗакрытия
	                      |	И ДокументТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДокументТранспортноеСообщение.ЦиклОбмена.ДатаСоздания,
	                      |	ДокументТранспортноеСообщение.Тип.Порядок");
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Исходящее);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ДатаЗакрытия", ПолучитьПустуюДатуЗавершенияЦиклаОбмена());
	
	ТипыАвтоотправляемыхСообщений = Новый Массив;
	
	// ФНС 141
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН);
	
	// ПФР
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
	
	// ФНС 534
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
	ТипыАвтоотправляемыхСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
	
	Запрос.УстановитьПараметр("ТипыАвтоотправляемыхСообщений", ТипыАвтоотправляемыхСообщений);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Если НЕ ТихийРежим Тогда
			Сообщить("Сообщения для отправки не обнаружены.", СтатусСообщения.Информация);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоОтправленных = 0;
	КоличествоНеОтправленных = 0;
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ТихийРежим Тогда
			Сообщить("Отправка сообщения " + ПредставлениеСообщения(Выборка.Ссылка) + "...", СтатусСообщения.Информация);
		КонецЕсли;
		
		Если ОтправитьТранспортноеСообщение(Выборка.Ссылка, Почта, ТихийРежим) Тогда
			КоличествоОтправленных = КоличествоОтправленных + 1;
		Иначе
			КоличествоНеОтправленных = КоличествоНеОтправленных + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТихийРежим Тогда
		Сообщить("Отправлено сообщений: " + КоличествоОтправленных + " из " + (КоличествоОтправленных + КоличествоНеОтправленных) + ".", СтатусСообщения.Информация);
		//Сообщить("Отправлено " + КоличествоОтправленных + " из " + (КоличествоОтправленных + КоличествоНеОтправленных) + " сообщений" + ?(КоличествоНеОтправленных = 0, ".", ", " + КоличествоНеОтправленных + " отправить не удалось."), СтатусСообщения.Информация);
	КонецЕсли;
	
	Если КомпонентаПочтыСоздаетсяВПроцедуре Тогда
		СтатусОтключения = ОтключитьсяОтПочтовогоЯщика(Почта, УчетнаяЗапись);
		Если НЕ СтатусОтключения Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, ОпределитьНалоговыйОрганПриНеобходимости = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СерверыДокументооборота.Ссылка
	                      |ИЗ
	                      |	Справочник.СерверыДокументооборота КАК СерверыДокументооборота
	                      |ГДЕ
	                      |	СерверыДокументооборота.АдресЭлектроннойПочтыФНС = &АдресЭлектроннойПочты
	                      |	ИЛИ СерверыДокументооборота.АдресЭлектроннойПочтыПФР = &АдресЭлектроннойПочты");
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ОпределитьНалоговыйОрганПриНеобходимости Тогда
		Возврат ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, ОпределитьСерверДокументооборотаПриНеобходимости = Истина) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	НалоговыеОрганы.Ссылка
	                      |ИЗ
	                      |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	                      |ГДЕ
	                      |	НалоговыеОрганы.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками = &АдресЭлектроннойПочты");
	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Если ОпределитьСерверДокументооборотаПриНеобходимости Тогда
		Возврат ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(АдресЭлектроннойПочты, Ложь);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьТипПодтвержденияОтправкиПоУникальномуИдентификатору(Сообщение)
	
	СоответствиеТипаЦиклаОбменаТипуСообщения = Новый Соответствие;
	СоответствиеТипаЦиклаОбменаТипуСообщения.Вставить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности);
	СоответствиеТипаЦиклаОбменаТипуСообщения.Вставить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика);
	СоответствиеТипаЦиклаОбменаТипуСообщения.Вставить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ТранспортноеСообщение.ЦиклОбмена.Тип КАК Тип
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ИдентификаторСообщения = &ИдентификаторСообщения
	                      |	И ТранспортноеСообщение.ЦиклОбмена.Тип <> &ТипЦиклаОбмена
	                      |	И ТранспортноеСообщение.Тип В(&Тип)");
	СтрокаТЧДопРеквизитов = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
	Если СтрокаТЧДопРеквизитов <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторСообщения", СтрокаТЧДопРеквизитов.Значение);
		Запрос.УстановитьПараметр("ТипЦиклаОбмена", Перечисления.ТипыЦикловОбмена.ПустаяСсылка());
		ДопустимыеТипыСообщений = Новый Массив;
		ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
		ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика);
		ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
		Запрос.УстановитьПараметр("Тип", ДопустимыеТипыСообщений);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат СоответствиеТипаЦиклаОбменаТипуСообщения[Выборка.Тип];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	
КонецФункции

Функция ОпределитьТипПодтвержденияДоставкиПоУникальномуИдентификатору(Сообщение)
	
	СоответствиеТипаЦиклаОбменаТипуСообщения = Новый Соответствие;
	СоответствиеТипаЦиклаОбменаТипуСообщения.Вставить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность, Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности);
	СоответствиеТипаЦиклаОбменаТипуСообщения.Вставить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика);
	СоответствиеТипаЦиклаОбменаТипуСообщения.Вставить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание, Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ТранспортноеСообщение.ЦиклОбмена.Тип КАК Тип
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ИдентификаторСообщения = &ИдентификаторСообщения
	                      |	И ТранспортноеСообщение.ЦиклОбмена.Тип <> &ТипЦиклаОбмена
	                      |	И ТранспортноеСообщение.Тип В(&Тип)");
	СтрокаТЧДопРеквизитов = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
	Если СтрокаТЧДопРеквизитов <> Неопределено Тогда
		Запрос.УстановитьПараметр("ИдентификаторСообщения", СтрокаТЧДопРеквизитов.Значение);
		Запрос.УстановитьПараметр("ТипЦиклаОбмена", Перечисления.ТипыЦикловОбмена.ПустаяСсылка());
		ДопустимыеТипыСообщений = Новый Массив;
		ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
		ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика);
		ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
		Запрос.УстановитьПараметр("Тип", ДопустимыеТипыСообщений);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат СоответствиеТипаЦиклаОбменаТипуСообщения[Выборка.Тип];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	
КонецФункции

Функция ЧислоКонтейнеровСообщения(Сообщение)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	КОЛИЧЕСТВО(Истина) КАК ЧислоСообщений
						  |ИЗ
						  |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |ГДЕ
						  |	ТранспортныеКонтейнеры.ТранспортноеСообщение = &ТранспортноеСообщение");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ?(Сообщение.ЭтоНовый(), Сообщение.ПолучитьСсылкуНового(), Сообщение.Ссылка));
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ?(ЗначениеЗаполнено(Выборка.ЧислоСообщений), Выборка.ЧислоСообщений, 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьТипСообщения(Сообщение, ВложенияЕсть = Истина) Экспорт
	
	// получаем значения дополнительных реквизитов заголовка
	Отправитель = "";
	СтрокаОтправитель = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторОтправителя, "Тип");
	Если СтрокаОтправитель <> Неопределено Тогда
		Отправитель = СтрокаОтправитель.Значение;
	КонецЕсли;
	
	Получатель = "";
	СтрокаПолучатель = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПолучателя, "Тип");
	Если СтрокаПолучатель <> Неопределено Тогда
		Получатель = СтрокаПолучатель.Значение;
	КонецЕсли;
	
	ИмяПередающейСистемы = "";
	СтрокаИмяПередающейСистемы = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИмяПередающейСистемы, "Тип");
	Если СтрокаИмяПередающейСистемы <> Неопределено Тогда
		ИмяПередающейСистемы = СтрокаИмяПередающейСистемы.Значение;
	КонецЕсли;
	
	ТипПередаваемойИнформации = "";
	СтрокаТипПередаваемойИнформации = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ТипПередаваемойИнформации, "Тип");
	Если СтрокаТипПередаваемойИнформации <> Неопределено Тогда
		ТипПередаваемойИнформации = СтрокаТипПередаваемойИнформации.Значение;
	КонецЕсли;
	
	ИдентификаторПервичногоСообщения = "";
	СтрокаИдентификаторПервичногоСообщения = Сообщение.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
	Если СтрокаИдентификаторПервичногоСообщения <> Неопределено Тогда
		ИдентификаторПервичногоСообщения = СтрокаИдентификаторПервичногоСообщения.Значение;
	КонецЕсли;
	
	// 
	Если ЧислоКонтейнеровСообщения(Сообщение) = 0 И ЗначениеЗаполнено(ИдентификаторПервичногоСообщения) Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка;
	КонецЕсли;
	
	Тема = Сообщение.Тема;
	ВРЕГСокрЛПТема = ВРЕГ(СокрЛП(Тема));
	
	// ФНС 534
	Если ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеДекларацияНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеДекларацияСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеДекларацияНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаДекларацияНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-квитанцияОПриеме-РезультатПриемаДекларацияНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбУточнении-РезультатОбработкиДекларацияНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОВводе-РезультатОбработкиДекларацияНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-сообщениеОбОшибке-СообщениеОбОшибке") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеОтправкиСОС") Тогда
		Если ЗначениеЗаполнено(ИдентификаторПервичногоСообщения) Тогда
			ЦиклОбменаСообщения = Справочники.ЦиклыОбмена.НайтиПоРеквизиту("Идентификатор", ИдентификаторПервичногоСообщения);
			Если ЗначениеЗаполнено(ЦиклОбменаСообщения) Тогда
				Если ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
				ИначеЕсли ЦиклОбменаСообщения.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
					Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
				КонецЕсли;
			Иначе
				Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
			КонецЕсли;
		Иначе
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
		КонецЕсли;
		
	// ФНС 534 2-НДФЛ
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеФорма2НДФЛНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеФорма2НДФЛНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-протоколПриема2НДФЛ-РезультатПриемаФорма2НДФЛНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО;
	
	// ФНС 534 НФД НП
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеОбращениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеОбращениеСОС")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеОбращениеНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеОбращениеСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеОбращениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаОбращениеНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО;
		
	// ФНС 534 НФД НО
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-письмо-ПисьмоНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-рассылка-РассылкаНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
		
	// ФНС 534 ИОН
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеЗапросНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыПолучения-ПодтверждениеЗапросСОС")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеЗапросНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-подтверждениеДатыОтправки-ПодтверждениеЗапросСОС") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-извещениеОПолучении-ИзвещениеЗапросНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаЗапросНО")
	ИЛИ ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-квитанцияОПриеме-РезультатПриемаЗапросНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО;
	ИначеЕсли ВРЕГСокрЛПТема = ВРЕГ("ФНС:1.0-ответ-РезультатОбработкиЗапросНО") Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО;
		
	// ФНС 141 и более ранние
	ИначеЕсли Получатель = "СЕРВЕРОБМЕНА" И ТипПередаваемойИнформации = "ПОДТВОТПРАВКИФАЙЛА" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности;
	ИначеЕсли ТипПередаваемойИнформации = "ОТВЕТИНФУСЛ" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН;
	ИначеЕсли ТипПередаваемойИнформации = "ПОДТВПРИЕМАОТВЕТАИФНС" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН;
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("ФАЙЛ ОТЧЕТНОСТИ")) = "ФАЙЛ ОТЧЕТНОСТИ" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность;
	ИначеЕсли ВРЕГ(ТипПередаваемойИнформации) = "ПОДТВПРИЕМА" Тогда
		Возврат ОпределитьТипПодтвержденияДоставкиПоУникальномуИдентификатору(Сообщение);
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("ФАЙЛ ПРИНЯТ")) = "ФАЙЛ ПРИНЯТ"
		ИЛИ Лев(ВРЕГСокрЛПТема, СтрДлина("ФАЙЛ НЕ ПРИНЯТ")) = "ФАЙЛ НЕ ПРИНЯТ" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН;
	ИначеЕсли ВРЕГ(ТипПередаваемойИнформации) = "ПОДТВПРИЕМАПРОТОКОЛА" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности;
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("ОТЧЕТ ПРИНЯТ")) = "ОТЧЕТ ПРИНЯТ"
		ИЛИ Лев(ВРЕГСокрЛПТема, СтрДлина("ОТЧЕТ НЕ ПРИНЯТ")) = "ОТЧЕТ НЕ ПРИНЯТ" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности;
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("ПОДТВЕРЖДЕНИЕ ОТПРАВКИ ФАЙЛА")) = "ПОДТВЕРЖДЕНИЕ ОТПРАВКИ ФАЙЛА" Тогда
		Возврат ОпределитьТипПодтвержденияОтправкиПоУникальномуИдентификатору(Сообщение);
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("СООБЩЕНИЕ ОТ ИФНС")) = "СООБЩЕНИЕ ОТ ИФНС"
		ИЛИ Лев(ВРЕГСокрЛПТема, СтрДлина("СООБЩЕНИЕ ОТ ИМНС")) = "СООБЩЕНИЕ ОТ ИМНС" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО;
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("УВЕДОМЛЕНИЕ ОБ УТОЧНЕНИИ НАЛОГОВОЙ ДЕКЛАРАЦИИ")) = "УВЕДОМЛЕНИЕ ОБ УТОЧНЕНИИ НАЛОГОВОЙ ДЕКЛАРАЦИИ"
	ИЛИ Лев(ВРЕГСокрЛПТема, СтрДлина("УВЕДОМЛЕНИЕ ОБ УСПЕШНОМ ПРИЕМЕ ФАЙЛА")) = "УВЕДОМЛЕНИЕ ОБ УСПЕШНОМ ПРИЕМЕ ФАЙЛА"
	ИЛИ Лев(ВРЕГСокрЛПТема, СтрДлина("ТРЕБОВАНИЕ ОБ УТОЧНЕНИИ ФАЙЛА")) = "ТРЕБОВАНИЕ ОБ УТОЧНЕНИИ ФАЙЛА"
	ИЛИ Лев(ВРЕГСокрЛПТема, СтрДлина("УВЕДОМЛЕНИЕ ОБ ОТКАЗЕ В ПРИЕМЕ ФАЙЛА")) = "УВЕДОМЛЕНИЕ ОБ ОТКАЗЕ В ПРИЕМЕ ФАЙЛА" Тогда // !!!
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО;
	ИначеЕсли Лев(ВРЕГСокрЛПТема, СтрДлина("ПРОТОКОЛ 2-НДФЛ")) = "ПРОТОКОЛ 2-НДФЛ" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ;
		
	// ПФР через Такском
	ИначеЕсли Найти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Pension-Unformal")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
	ИначеЕсли Найти(ВРЕГСокрЛПТема, ВРЕГ("ReSign: Pension")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
	ИначеЕсли Найти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Error-Notification")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР;
	ИначеЕсли Найти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Unformal")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
	ИначеЕсли Найти(ВРЕГСокрЛПТема, ВРЕГ("Pension-Protocol-")) <> 0 Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
		
	// ПФР через прочих
	Иначе
		
		// считываем с кэшированием
		ДеревоОписанияПакета = Неопределено;
		Если НЕ Сообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
			ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(Сообщение);
			Сообщение.ДополнительныеСвойства.Вставить("ДеревоОписанияПакета", ДеревоОписанияПакета);
		КонецЕсли;
		
		// определяем тип сообщения
		ТипСообщения = Неопределено;
		Если ДеревоОписанияПакета <> Неопределено Тогда
			ТипСообщения = ОпределитьТипСообщенияПоДеревуОписанияПакета(ДеревоОписанияПакета);
		КонецЕсли;
		
		// если тип определить не удалось, то устанавливаем тип Прочее
		Если ТипСообщения = Неопределено Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.Прочее;
		Иначе
			Возврат ТипСообщения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение)
	
	СообщениеСсылка = ОбъектСообщение.Ссылка;
	
	ТранспортныеКонтейнеры = ПолучитьТранспортныйКонтейнер(СообщениеСсылка, Истина);
	Если ТранспортныеКонтейнеры.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ТранспортныйКонтейнер = ТранспортныеКонтейнеры[0];
	
	// выгружаем пакет во временный файл
	КаталогРаспаковки = СоздатьВременныйКаталог();
	ИмяВременногоФайла = КаталогРаспаковки + ТранспортныйКонтейнер.ИмяФайла;
	Попытка
		ТранспортныйКонтейнер.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		Сообщить("Ошибка выгрузки транспортного пакета во временный файл для анализа:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// распаковываем файл описания сведений архива
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяВременногоФайла);
	Исключение
		УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
	
	ИмяФайлаОписанияСведений = "packageDescription.xml";
	ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
	Если ЭлементОписаниеСведений = Неопределено Тогда
		УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	ЧтениеЗИП.Закрыть();
	
	// читаем XML
	ТекстXML = ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписанияСведений, , Истина);
	УдалитьВременныйФайл(КаталогРаспаковки);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// сохраняем дерево в свойствах объекта
	ОбъектСообщение.ДополнительныеСвойства.Вставить("ДеревоОписанияПакета", ДеревоXML);
	
	Возврат ДеревоXML;
	
КонецФункции

Функция ПоказатьСообщенияТребующиеВнимания(Сообщения) Экспорт
	
	Если Сообщения.Количество() > 0 Тогда
		ФормаПоказаВходящихСообщений = ПолучитьФорму("ПоказВходящихСообщений", , Новый УникальныйИдентификатор);
		ФормаПоказаВходящихСообщений.Сообщения.ЗагрузитьЗначения(Сообщения);
		ФормаПоказаВходящихСообщений.ОткрытьМодально();
	КонецЕсли;
	
КонецФункции

Функция АктуальноеПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(ЦиклОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ТранспортноеСообщение.Ссылка,
	                      |	ТранспортноеСообщение.Дата КАК Дата,
	                      |	ТранспортноеСообщение.ДатаТранспорта,
	                      |	ТранспортноеСообщение.ПротоколСОшибкой
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
	                      |	И ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.Тип = &Тип
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПротоколСОшибкой;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ТранспортноеСообщение.Ссылка,
	                      |	ТранспортноеСообщение.Дата КАК Дата,
	                      |	ТранспортноеСообщение.ДатаТранспорта,
	                      |	ТранспортноеСообщение.ПротоколСОшибкой
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
	                      |	И ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.Тип В (&Тип)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Дата УБЫВ");
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	ТипыПротоколов = Новый Массив;
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО);
	ТипыПротоколов.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО);
	Запрос.УстановитьПараметр("Тип", ТипыПротоколов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПротоколСОшибкой;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВсеСообщенияЦиклаОбменаОтправленыПриняты(ЦиклОбмена)
	
	Сообщения = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	
	// удаляем из таблицы те сообщения, которые не были отправлены/приняты
	ЧислоСообщений = Сообщения.Количество();
	Для Инд = 1 По ЧислоСообщений Цикл
		
		ОбратныйИнд = ЧислоСообщений - Инд;
		ТекСтр = Сообщения[ОбратныйИнд];
		Если ТекСтр.Статус <> Перечисления.СтатусыПисем.Отправленное И ТекСтр.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
			Сообщения.Удалить(ТекСтр);
		КонецЕсли;
		
	КонецЦикла;
	
	ВозможныеТипы = Новый Массив;
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
			
		Иначе
			
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности);
			ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности);
			
		КонецЕсли;
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
		//ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
		//ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО);
		//ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО);
		//ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
		
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		//ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО);
		ВозможныеТипы.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
	КонецЕсли;
	
	Для Каждого ВозможныйТип Из ВозможныеТипы Цикл
		Если Сообщения.Найти(ВозможныйТип, "Тип") = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// ФНС 534
	Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
			Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
				Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, "Тип") = Неопределено
				ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Тип") = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
				Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, "Тип") = Неопределено
				ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Тип") = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
	// ФНС 141
	// для цикла обмена по отчетности также должны присутствовать уведомление об уточнении или протокол приема 2-НДФЛ
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
			Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО, "Тип") = Неопределено
			И Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ, "Тип") = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		Если НЕ АктуальныйПротоколВходногоКонтроляЯвляетсяОтрицательным(ЦиклОбмена) Тогда
			Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН, "Тип") = Неопределено
			ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН, "Тип") = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	
	// ПФР
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		Если НЕ АктуальноеПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(ЦиклОбмена) Тогда
			Если Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, "Тип") = Неопределено
			ИЛИ Сообщения.Найти(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, "Тип") = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// проверяем, все ли подтверждения отправлены
	Если ЦиклОбмена.ДатаСоздания > '20090416' Тогда
		
		// определяем соответствие между типами сообщений-оснований и сообщений-подтверждений на них
		ТипыОснованийИПодтверждений = Новый Соответствие;
		
		// ФНС 141
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности);
		
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика);
		
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО);
		
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН);
		
		// ФНС 534
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО , Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
		
		// ФНС 534 2-НДФЛ
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
		// ФНС 534 НФД
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		
		// ФНС 534 ИОН
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
		
		// ПФР
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР);
		
		// ФНС 534 НФД НО
		ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП);
		
		Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
			ТипыОснованийИПодтверждений.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП);
		КонецЕсли;
		
		// перебираем соответствие подтверждений основаниям
		Для Каждого ТипОснованияИПодтверждения Из ТипыОснованийИПодтверждений Цикл
			
			ТипОснования = ТипОснованияИПодтверждения.Ключ;
			ТипПодтверждения = ТипОснованияИПодтверждения.Значение;
			
			// для каждого основания...
			СообщенияОснования = Сообщения.НайтиСтроки(Новый Структура("Тип", ТипОснования));
			Для Каждого СообщениеОснование Из СообщенияОснования Цикл
				
				// ... ищем подтверждение, и если не находим, то возвращаем Ложь
				Если Сообщения.Найти(СообщениеОснование.Ссылка, "Основание") = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОбновитьСвойстваЦиклаОбмена(ЦиклОбмена, Предмет = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получаем сообщения и отсортировываем их по дате
	СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена);
	Если СообщенияЦиклаОбмена.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	СообщенияЦиклаОбмена.Сортировать("ДатаТранспорта УБЫВ");
	
	// инициализируем объект цикла для записи
	ОбъектЦиклОбмена = ЦиклОбмена.ПолучитьОбъект();
	Если ОбъектЦиклОбмена = Неопределено Тогда // значит, цикл обмена еще не записан
		Возврат Истина;
	КонецЕсли;
	
	// устанавливаем дату транспорта последнего сообщения
	ПоследнееСообщение = СообщенияЦиклаОбмена[0];
	ДатаТранспортаПоследнегоСообщения = ПоследнееСообщение.ДатаТранспорта;
	Если ОбъектЦиклОбмена.ДатаПоследнегоСообщения <> ПоследнееСообщение.ДатаТранспорта Тогда
		ОбъектЦиклОбмена.ДатаПоследнегоСообщения = ДатаТранспортаПоследнегоСообщения;
	КонецЕсли;
	
	// устанавливаем дату закрытия цикла обмена
	Если ВсеСообщенияЦиклаОбменаОтправленыПриняты(ЦиклОбмена) Тогда // !!!
		ОбъектЦиклОбмена.ДатаЗакрытия = ДатаТранспортаПоследнегоСообщения;
	Иначе
		ОбъектЦиклОбмена.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена();
	КонецЕсли;
	
	// устанавливаем циклу обмена идентификатор первичного сообщения при необходимости
	// только для формата документооборота, предшествующего 534
	Если ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС
	И ЦиклОбмена.ФорматДокументооборота <> Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		ТипПервичного = ПолучитьТипПервичногоСообщенияПоЦиклуОбмена(ЦиклОбмена);
		Если ТипПервичного <> Неопределено Тогда
			ПервичныеСообщения = СообщенияЦиклаОбмена.НайтиСтроки(Новый Структура("Тип", ТипПервичного));
			Если ПервичныеСообщения.Количество() > 0 Тогда
				ПервичноеСообщение = ПервичныеСообщения[0];
				Если ОбъектЦиклОбмена.Идентификатор <> ПервичноеСообщение.ИдентификаторСообщения Тогда
					ОбъектЦиклОбмена.Идентификатор = ПервичноеСообщение.ИдентификаторСообщения;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// устанавливаем предмет
	Если ЗначениеЗаполнено(Предмет) Тогда
		ОбъектЦиклОбмена.Предмет = Предмет;
	КонецЕсли;
	
	// записываем, если объект изменялся
	Если ОбъектЦиклОбмена.Модифицированность() Тогда
		Попытка
			ОбъектЦиклОбмена.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось обновить свойства родительского цикла обмена """ + ЦиклОбмена + """:
			|" + ИнформацияОбОшибке().Описание);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПОЧТОЙ (БАЗОВЫЕ ФУНКЦИИ)
//

Функция ОтправитьСообщение(Почта) Экспорт

	СтатусПодключения = ПодключитьсяКПочтовомуСерверу(Почта);
	Если СтатусПодключения = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Состояние("Отправляем сообщение...");
	Попытка
		Почта.Отправить();
	Исключение
		Сообщить("Не удалось отправить сообщение!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	СтатусОтключения = ОтключитьсяОтПочтовогоСервера(Почта);
	Если СтатусОтключения = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПодключитьсяКПочтовомуСерверу(Почта, ТихийРежим = Ложь) Экспорт
	
	Попытка
		Почта.Подключиться();
	Исключение
		Если НЕ ТихийРежим Тогда
			Сообщить("Не удалось подключиться к почтовому серверу!", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция ОтключитьсяОтПочтовогоСервера(Почта) Экспорт
	
	Попытка
		Почта.Отключиться();
	Исключение
		Сообщить("Не удалось отключиться от сервера документооборота!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция ОтключитьсяОтПочтовогоЯщика(Почта, УчетнаяЗапись, ТихийРежим = Ложь) Экспорт
	
	Попытка
		Почта.Отключиться();
		Возврат Истина;
	Исключение
		Если НЕ ТихийРежим Тогда
			Сообщить("Не удалось отключиться от сервера документооборота под учетной записью """ + УчетнаяЗапись + """!", СтатусСообщения.Важное);
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ПАРАМЕТРАМИ КРИПТОГРАФИИ
//

Функция ПолучитьПараметрыКриптографииПоУмолчанию() Экспорт
	
	ИмяКриптоПро = "Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider";
	ТипКриптоПро = 75;
	
	ИмяВиПНет = "Infotecs Cryptographic Service Provider";
	ТипВиПНет = 2;
	
	ПараметрыКриптографии = Новый Соответствие;
	
	// сначала пытаемся найти криптопровайдер КриптоПро
	Если Криптопровайдеры.НайтиСтроки(Новый Структура("Имя, Тип", ИмяКриптоПро, ТипКриптоПро)).Количество() > 0 Тогда
		ПараметрыКриптографии.Вставить("ИмяКриптопровайдера", ИмяКриптоПро);
		ПараметрыКриптографии.Вставить("ТипКриптопровайдера", ТипКриптоПро);
		
	// если криптопровайдер КриптоПро не установлен, то пытаемся найти ВиПНет
	ИначеЕсли Криптопровайдеры.НайтиСтроки(Новый Структура("Имя, Тип", ИмяВиПНет, ТипВиПНет)).Количество() > 0 Тогда
		ПараметрыКриптографии.Вставить("ИмяКриптопровайдера", ИмяВиПНет);
		ПараметрыКриптографии.Вставить("ТипКриптопровайдера", ТипВиПНет);
		
	// если не найдены ни КриптоПро, ни ВиПНет, то возвращаем результат, как для КриптоПро
	Иначе
		ПараметрыКриптографии.Вставить("ИмяКриптопровайдера", ИмяКриптоПро);
		ПараметрыКриптографии.Вставить("ТипКриптопровайдера", ТипКриптоПро);
	КонецЕсли;
	
	// идентификаторы одинаковы для обоих провайдеров
	ПараметрыКриптографии.Вставить("АлгоритмПодписания", 11811);
	ПараметрыКриптографии.Вставить("АлгоритмШифрования", 43556);
	ПараметрыКриптографии.Вставить("АлгоритмХешФункции", 32798);
	ПараметрыКриптографии.Вставить("АлгоритмГенерацииСессионногоКлюча", 26142);
	
	Возврат ПараметрыКриптографии;
	
КонецФункции

Функция ПолучитьПараметрыКриптографии() Экспорт
	
	ПрисутствуетЗаполненныйПараметр = Ложь;
	
	ПараметрыКриптографии = Новый Соответствие;
	ПараметрыКриптографии.Вставить("ИмяКриптопровайдера");
	ПараметрыКриптографии.Вставить("ТипКриптопровайдера");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера КАК ИмяКриптопровайдера,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера КАК ТипКриптопровайдера
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Для Каждого ПараметрКриптографии Из ПараметрыКриптографии Цикл
			ПараметрыКриптографии.Вставить(ПараметрКриптографии.Ключ, Выборка[ПараметрКриптографии.Ключ]);
			Если ЗначениеЗаполнено(Выборка[ПараметрКриптографии.Ключ]) Тогда
				ПрисутствуетЗаполненныйПараметр = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ПрисутствуетЗаполненныйПараметр Тогда
		ПараметрыКриптографии.Вставить("АлгоритмПодписания", 11811);
		ПараметрыКриптографии.Вставить("АлгоритмШифрования", 43556);
		ПараметрыКриптографии.Вставить("АлгоритмХешФункции", 32798);
		ПараметрыКриптографии.Вставить("АлгоритмГенерацииСессионногоКлюча", 26142);
		Возврат ПараметрыКриптографии;
	Иначе
		Возврат ПолучитьПараметрыКриптографииПоУмолчанию();
	КонецЕсли;
	
КонецФункции

Функция ПоставитьПодписьОтветственногоЛица(ТранспортноеСообщение, ОтветственноеЛицо, ИмяСгенерированногоФайлаЭЦП = Неопределено) Экспорт
	
	ЦиклОбмена = ТранспортноеСообщение.ЦиклОбмена;
	
	// ПФР
	Если ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
		Возврат ПодписатьСообщениеПФР(ТранспортноеСообщение, , , ОтветственноеЛицо, ИмяСгенерированногоФайлаЭЦП);
		
	// ФНС 534
	ИначеЕсли ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Возврат ПодписатьСообщениеФНС(ТранспортноеСообщение, , , ОтветственноеЛицо, ИмяСгенерированногоФайлаЭЦП);
		
	// ФНС 141
	Иначе
		Возврат ПодписатьСообщениеФНС141(ТранспортноеСообщение, ОтветственноеЛицо, ИмяСгенерированногоФайлаЭЦП);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОпределитьТипФайлаЭЦП(ФайлЭЦП)
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвДанные.Прочитать(ФайлЭЦП);
		Байты_1_4 = ДвДанные.ПолучитьЧисло(4);
	Исключение
		Сообщить("Ошибка анализа файла ЭЦП: " + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// если значение в первых 4 байтах = 0х00000001, то считаем, что это ЭЦП в формате ФНС
	Если Байты_1_4 = 1 Тогда
		Возврат 1; // ЭЦП в формате ФНС
	Иначе
		Возврат 2; // ЭЦП в формате PKCS #7
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПодпись(ФайлСДанными, ФайлСЭЦП, ПроверятьВалидность = Истина, Отпечаток = Неопределено, ИмяВладельцаСертификата = Неопределено) Экспорт
	
	ТипЭЦП = ОпределитьТипФайлаЭЦП(ФайлСЭЦП);
	Если НЕ ЗначениеЗаполнено(ТипЭЦП) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЭЦП = 1 Тогда // ФНС 141
		Возврат ПроверитьПодписьФНС(ФайлСДанными, ФайлСЭЦП, ПроверятьВалидность, Отпечаток, ИмяВладельцаСертификата);
	ИначеЕсли ТипЭЦП = 2 Тогда
		Возврат ПроверитьПодписьPKCS7(ФайлСДанными, ФайлСЭЦП);
	КонецЕсли;
	
КонецФункции

Функция ПроверитьПодписьФНС(ФайлСДанными, ФайлСЭЦП, ПроверятьВалидность = Истина, Отпечаток = Неопределено, ИмяВладельцаСертификата = Неопределено) Экспорт
	
	// создаем объект для работы с криптографией
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем объект для работы с двоичными данными
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные2 = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные2 = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// извлекаем данные ЭЦП из файла ЭЦП
	// загружаем из файла
	ДвДанные.Прочитать(ФайлСЭЦП);
	
	Байты0_1 = ДвДанные.ПолучитьЧисло(4);
	
	// считываем и проверяем длину отпечатка сертификата
	Байты2_3 = ДвДанные.ПолучитьЧисло(4);
	Если Байты2_3 <> 20 Тогда
		Сообщить("Файл ЭЦП имеет неверную структуру!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// считываем отпечаток сертификата, с помощью которого были зашифрованы данные
	Отпечаток = ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные);
	
	// считываем длину имени владельца сертификата
	ДлинаИмениВладельцаСертификата = ДвДанные.ПолучитьЧисло(4);
	
	// считываем имя владельца сертификата
	ИмяВладельцаСертификата = ДвДанные.ПолучитьСтроку(ДлинаИмениВладельцаСертификата, "windows-1251");
	
	// находим сертификат по отпечатку в системном хранилище
	Сертификат = ПолучитьСвойстваСертификатаПоОтпечатку(Отпечаток);
	Если Сертификат = Неопределено Тогда
		Сообщить("Не удалось найти сертификат, принадлежащий " + СокрЛП(ИмяВладельцаСертификата)+ ", с отпечатком " + Отпечаток + " для проверкии валидности ЭЦП!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ДлинаОткрытогоКлюча = ДвДанные.ПолучитьЧисло(4);
	ДвДанные.Позиция = ДвДанные.Позиция + ДлинаОткрытогоКлюча + 4;
	
	// считываем ЭЦП
	ДлинаЭЦП = ДвДанные.ПолучитьЧисло(4);
	Для Инд = 1 По ДлинаЭЦП Цикл
		ДвДанные2.ДобавитьЧисло(ДвДанные.ПолучитьЧисло(1), 1);
	КонецЦикла;
	
	// записываем считанную ЭЦП в файл
	ИмяФайлаДанныхЭЦП = ПолучитьИмяВременногоФайла();
	ДвДанные2.Записать(ИмяФайлаДанныхЭЦП);
	
	// инициализируем временные переменные с ключевыми свойствами сертификата
	// для вызова методов компоненты, т.к. вызов с ReadOnly-параметрами генерирует исключительную ситуацию
	СерийныйНомерСертификата = Сертификат.СерийныйНомер;
	ПоставщикСертификата = Сертификат.Поставщик;
	
	// проверяем валидность сертификата, если требуется
	Если ПроверятьВалидность Тогда
		Попытка
			РезультатПроверки = Крипт.ПроверитьСертификат(СерийныйНомерСертификата, ПоставщикСертификата, , );
		Исключение
			Сообщить("Во время проверки валидности сертификата """ + ПредставлениеСертификата(Сертификат) + """ возникла исключительная ситуация!
			|Возможно, сертификат больше не зарегистрирован в системе или период его действия истек.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		РезультатПроверки = Истина;
	КонецЕсли;
	
	// проверяем ЭЦП
	Если РезультатПроверки Тогда
		ПараметрыКриптографии = ПолучитьПараметрыКриптографии();
		Попытка
			РезультатПроверки = Крипт.ПроверитьПодпись(СерийныйНомерСертификата,
															ПоставщикСертификата,
															ФайлСДанными,
															ИмяФайлаДанныхЭЦП,
															ПараметрыКриптографии["АлгоритмПодписания"],
															ПараметрыКриптографии["АлгоритмХешФункции"]);
		Исключение
			Сообщить("Не удалось проверить подпись сертификатом """ + ПредставлениеСертификата(Сертификат) + """:
			|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Неопределено;
		Конецпопытки;
		УдалитьФайлы(ИмяФайлаДанныхЭЦП);
		Возврат РезультатПроверки;
	Иначе
		Сообщить("Не удалось проверить подпись сертификатом """ + ПредставлениеСертификата(Сертификат) + """ по причине невалидности сертификата!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Вызывается из формы транспортного сообщения.
//
Процедура ПроверитьПодписьНалоговогоОргана(Сообщение, ТипПроверки = 0) Экспорт
	
	// создаем объект для работы с двоичными данными
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДвДанные2 = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные2 = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// извлекаем файл с данными
	ТипыСообщений = Новый Массив;
	Если ТипПроверки = 0 Тогда
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииНБО);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
	ИначеЕсли ТипПроверки = 1 Тогда
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
	ИначеЕсли ТипПроверки = 2 Тогда
		ТипыСообщений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента);
	КонецЕсли;
	
	ФайлыСДанными = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСообщений);
	Если ФайлыСДанными.Количество() = 0 Тогда
		Сообщить("Не удалось определить файл данных!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ФайлыЭЦП = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	Если ФайлыСДанными.Количество() = 0 Тогда
		Сообщить("Не обнаружено ни одной электронно-цифровой подписи!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// извлекаем файл с ЭЦП
	ТипСообщения = Сообщение.Тип;
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика	Тогда
		СуффиксФайлаЭЦП = ".sgn";
		//ИмяФайлаЭЦП = ФайлСДанными.ИмяФайла + ".sgn1";
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО
	ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ Тогда
		СуффиксФайлаЭЦП = ".gni.sgn";
		//ИмяФайлаЭЦП = ФайлСДанными.ИмяФайла + ".gni.sgn1";
	ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН Тогда
		СуффиксФайлаЭЦП = ".rcpt.gni.sgn";
	КонецЕсли;
	
	ОбщееЧислоПодписей = 0;
	ЧислоПодписейНеПрошедшихПроверку = 0;
	
	Для Каждого ФайлСДанными Из ФайлыСДанными Цикл
		
		ИмяФайлаСДанными = ПолучитьИмяВременногоФайла();
		ФайлСДанными.Данные.Получить().Записать(ИмяФайлаСДанными);
		
		Для Каждого ФайлЭЦП Из ФайлыЭЦП Цикл
			Если ВРЕГ(Лев(ФайлЭЦП.ИмяФайла, СтрДлина(ФайлЭЦП.ИмяФайла) - 1)) = ВРЕГ(ФайлСДанными.ИмяФайла + СуффиксФайлаЭЦП) Тогда
				ОбщееЧислоПодписей = ОбщееЧислоПодписей + 1;
				ИмяФайлаЭЦП = ПолучитьИмяВременногоФайла();
				ФайлЭЦП.Данные.Получить().Записать(ИмяФайлаЭЦП);
				РезультатПроверки = ПроверитьПодписьФНС(ИмяФайлаСДанными, ИмяФайлаЭЦП);
				Если РезультатПроверки = Неопределено Тогда
					Сообщить("Не удалось проверить ЭЦП """ + ФайлЭЦП.ИмяФайла + """ под документом """ + ФайлСДанными.ИмяФайла + """!", СтатусСообщения.Важное);
					ЧислоПодписейНеПрошедшихПроверку = ЧислоПодписейНеПрошедшихПроверку + 1;
				ИначеЕсли НЕ РезультатПроверки Тогда
					Сообщить("ЭЦП """ + ФайлЭЦП.ИмяФайла + """ под документом """ + ФайлСДанными.ИмяФайла + """ не прошла проверку!", СтатусСообщения.Важное);
					ЧислоПодписейНеПрошедшихПроверку = ЧислоПодписейНеПрошедшихПроверку + 1;
				КонецЕсли;
				УдалитьФайлы(ИмяФайлаЭЦП);
			КонецЕсли;
		КонецЦикла;
		
		УдалитьФайлы(ИмяФайлаСДанными);
		
	КонецЦикла;
	
	Если ОбщееЧислоПодписей = 0 Тогда
		Предупреждение("Не обнаружены электронно-цифровые подписи под документом информационного взаимодействия!");
	ИначеЕсли ЧислоПодписейНеПрошедшихПроверку = 0 Тогда
		Предупреждение("Проверка успешно пройдена!");
	ИначеЕсли ОбщееЧислоПодписей = 1 Тогда
		Предупреждение("Электронно-цифровая подпись не прошла проверку!");
	Иначе
		Предупреждение("Одна или несколько электронно-цифровых подписей не прошли проверку!
						|Более подробная информация приведена в системном окне сообщений!");
	КонецЕсли;
	
КонецПроцедуры

Функция ПоставитьПодписиОтветственныхЛиц(Знач ТранспортноеСообщение, Знач ОтветственноеЛицо = Неопределено, ПрерыватьПриНеудаче = Истина) Экспорт
	
	ИсходящиеСообщенияЦиклаОбмена = Новый Массив;
	ИсходящиеСообщенияЦиклаОбмена.Добавить(ТранспортноеСообщение);
	
	ОтветственныеЛица = Новый Массив;
	Если ТипЗнч(ОтветственноеЛицо) = Тип("Массив") Тогда
		ОтветственныеЛица = ОтветственноеЛицо;
	ИначеЕсли ОтветственноеЛицо = Неопределено Тогда
		ОтветственныеЛица.Добавить("Руководитель");
		ОтветственныеЛица.Добавить("Главный бухгалтер");
	Иначе
		ОтветственныеЛица.Добавить(ОтветственноеЛицо);
	КонецЕсли;
	
	Если ИсходящиеСообщенияЦиклаОбмена.Количество() = 0 Тогда
		Сообщить("У цикла обмена """ + ТранспортноеСообщение + """ не найдено сообщений для подписания.", СтатусСообщения.Информация);
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ИсходящееСообщениеЦиклаОбмена Из ИсходящиеСообщенияЦиклаОбмена Цикл
		ПредставлениеСообщения = ПредставлениеТранспортногоСообщения(ИсходящееСообщениеЦиклаОбмена);
		//Сообщить("********************************************************************************", СтатусСообщения.Информация);
		Сообщить("Подписание сообщения """ + ПредставлениеСообщения + """...", СтатусСообщения.Информация);
		Для Каждого ОтветственноеЛицо Из ОтветственныеЛица Цикл
			НачатьТранзакцию();
			Сообщить("Формирование электронно-цифровой подписи ответственного лица """ + ОтветственноеЛицо + """...", СтатусСообщения.Информация);
			Если ПоставитьПодписьОтветственногоЛица(ИсходящееСообщениеЦиклаОбмена, ОтветственноеЛицо) Тогда
				//Сообщить("Электронно-цифровая подпись ответственного лица """ + ОтветственноеЛицо + """ успешно сформирована.", СтатусСообщения.Информация);
			Иначе
				Сообщить("Не удалось сформировать электронно-цифровую подпись ответственного лица """ + ОтветственноеЛицо + """!", СтатусСообщения.Важное);
				ОтменитьТранзакцию();
				Если ПрерыватьПриНеудаче Тогда
					Возврат Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТЫ С ЦИФРОВЫМИ СЕРТИФИКАТАМИ
//

Процедура ПоказатьСертификатВСистемномОкне(Сертификат) Экспорт
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией(Истина);
	Если Крипт <> Неопределено Тогда
		СерийныйНомер = Сертификат.СерийныйНомер;
		Поставщик = Сертификат.Поставщик;
		Крипт.ПоказатьСертификат(СерийныйНомер, Поставщик);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСертификат(УчетнаяЗапись, ТипСертификата, Объект = Неопределено, ФизЛицо = Неопределено) Экспорт
	
	Отпечаток = "";
	Если ТипСертификата = "Руководитель" Тогда
		Отпечаток = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
	ИначеЕсли ТипСертификата = "Главный бухгалтер" Тогда
		Отпечаток = СокрЛП(УчетнаяЗапись.СертификатГлавногоБухгалтера);
	ИначеЕсли ТипСертификата = "Шифрование" Тогда
		Отпечаток = СокрЛП(УчетнаяЗапись.СертификатДляШифрования);
	ИначеЕсли ТипСертификата = "Сервер документооборота" Тогда
		Отпечаток = СокрЛП(Объект.Сертификат);
	ИначеЕсли ТипСертификата = "Орган ПФР" ИЛИ ТипСертификата = "Налоговый орган" Тогда
		Отпечаток = Объект.Сертификаты.ВыгрузитьКолонку("Сертификат");
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Отпечаток) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Отпечаток) = Тип("Массив") Тогда
		СоотвСвойстваОтпечатков = ПолучитьСвойстваСертификатовПоОтпечаткам(Отпечаток);
		МассивСвойстваСертификатов = Новый Массив;
		Для Каждого ЭлСоотв Из СоотвСвойстваОтпечатков Цикл
			МассивСвойстваСертификатов.Добавить(ЭлСоотв.Значение);
		КонецЦикла;
		Возврат МассивСвойстваСертификатов;
	Иначе
		Возврат ПолучитьСвойстваСертификатаПоОтпечатку(Отпечаток);
	КонецЕсли;
	
КонецФункции

Процедура ПоказатьСертификат(Знач Отпечаток, Хранилище = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Отпечаток) Тогда
		Возврат;
	КонецЕсли;
	
	// пытаемся создать объект для работы с криптографией
	Крипт = СоздатьОбъектДляРаботыСКриптографией(Истина);
	Если Крипт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Отпечаток) <> Тип("Строка") Тогда
		
		ЧислоОтпечатков = Отпечаток.Количество();
		Если ЧислоОтпечатков = 0 Тогда
			Возврат;
		ИначеЕсли ЧислоОтпечатков = 1 Тогда
			СтрОтпечаток = Отпечаток[0].Сертификат;
		Иначе
			
			// формируем список для выбора
			СписокСертификатов = Новый СписокЗначений;
			Для Каждого СтрСертификат Из Отпечаток Цикл
				СвойстваОтпечатка = ПолучитьСвойстваСертификатаПоОтпечатку(СтрСертификат.Сертификат, Хранилище, Ложь);
				Если ЗначениеЗаполнено(СвойстваОтпечатка) Тогда
					СписокСертификатов.Добавить(СвойстваОтпечатка, ПредставлениеСертификатаПоСвойствам(СвойстваОтпечатка));
				Иначе
					СписокСертификатов.Добавить(СвойстваОтпечатка, СтрСертификат.Сертификат);
				КонецЕсли;
			КонецЦикла;
			
			// предлагаем выбрать
			РезультатВыбора = СписокСертификатов.ВыбратьЭлемент("Выберите сертификат");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			// показываем
			СвойстваСертификата = РезультатВыбора.Значение;
			Если ЗначениеЗаполнено(СвойстваСертификата) Тогда
				ПоказатьСертификатВСистемномОкне(СвойстваСертификата);
			Иначе
				Предупреждение("Сертификат с отпечатком """ + РезультатВыбора.Представление + """ не найден!
								|Возможно, сертификат не установлен на текущем компьютере или недоступен текущему пользователю операционной системы.");
			КонецЕсли;
			Возврат;
			
		КонецЕсли;
	Иначе
		СтрОтпечаток = Отпечаток;
	КонецЕсли;
	
	// получаем свойства установленного в системе сертификата
	СвойстваСертификата = ПолучитьСвойстваСертификатаПоОтпечатку(СтрОтпечаток, Хранилище, Ложь);
	Если СвойстваСертификата = Неопределено Тогда
		Предупреждение("Сертификат с отпечатком """ + СтрОтпечаток + """ не найден!
						|Возможно, сертификат не установлен на текущем компьютере или недоступен текущему пользователю операционной системы.");
		Возврат;
	КонецЕсли;
	
	// показываем сертификат
	СерийныйНомер = СвойстваСертификата.СерийныйНомер;
	Поставщик = СвойстваСертификата.Поставщик;
	Крипт.ПоказатьСертификат(СерийныйНомер, Поставщик);
	
Конецпроцедуры

Функция ВыбратьСертификат(НачальноеЗначениеВыбора = Неопределено, Хранилище = "MY", ПоказыватьПросроченные = Ложь, МножественныйВыбор = Ложь) Экспорт
	
	ФормаВыбораСертификата = ПолучитьФорму("ВыборСертификатаИзСистемногоХранилища", , Новый УникальныйИдентификатор);
	ФормаВыбораСертификата.Хранилище = Хранилище;
	ФормаВыбораСертификата.ПоказыватьПросроченные = ПоказыватьПросроченные;
	ФормаВыбораСертификата.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	ФормаВыбораСертификата.МножественныйВыбор = МножественныйВыбор;
	Возврат ФормаВыбораСертификата.ОткрытьМодально();
	
КонецФункции

Функция ВыбратьСертификатОтветственногоЛицаДляПодписания(НачальноеЗначениеВыбора = Неопределено, Организация = Неопределено) Экспорт
	
	ФормаВыбораСертификата = ПолучитьФорму("ВыборСертификатаОтветственногоЛица", , Новый УникальныйИдентификатор);
	ФормаВыбораСертификата.Организация = Организация;
	ФормаВыбораСертификата.НачальноеЗначениеВыбора = НачальноеЗначениеВыбора;
	Возврат ФормаВыбораСертификата.ОткрытьМодально();
	
КонецФункции

Функция ПолучитьСвойстваСертификатовПоОтпечаткам(Отпечатки, Хранилище = Неопределено) Экспорт
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией(Истина);
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищаСертификатовДляПоиска = Новый Массив;
	Если Хранилище = Неопределено Тогда
		ХранилищаСертификатовДляПоиска.Добавить("MY");
		ХранилищаСертификатовДляПоиска.Добавить("AddressBook");
		ХранилищаСертификатовДляПоиска.Добавить("CA");
		ХранилищаСертификатовДляПоиска.Добавить("ROOT");
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Структура") Тогда
		Для Каждого Эл Из Хранилище Цикл
			ХранилищаСертификатовДляПоиска.Добавить(Эл.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Массив") Тогда
		ХранилищаСертификатовДляПоиска = Хранилище;
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Строка") Тогда
		СтруктураХранилища = Новый Структура(Хранилище);
		Для Каждого Эл Из СтруктураХранилища Цикл
			ХранилищаСертификатовДляПоиска.Добавить(Эл.Ключ);
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПереданМассив = (ТипЗнч(Отпечатки) = Тип("Массив"));
	
	Результат = Новый Соответствие;
	
	Для Каждого Отпечаток Из Отпечатки Цикл
		ЗначениеОтпечатка = ?(ПереданМассив, Отпечаток, Отпечаток.Ключ);
		ДвДанные.Очистить();
		ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, ЗначениеОтпечатка);
		ДвДанные.Позиция = 0;
		Если ДвДанные.Размер > 0 Тогда
			ОтпечатокBase64 = ДвДанные.ПолучитьСтрокуBase64(20);
			Результат.Вставить(ОтпечатокBase64, ЗначениеОтпечатка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ХранилищеСертификатов Из ХранилищаСертификатовДляПоиска Цикл
		Пока Крипт.ПолучитьСледующийСертификат(ХранилищеСертификатов) Цикл
			
			Отпечаток64 = СокрЛП(Крипт.Отпечаток);
			СтрокаРезультатаПоКлючу = Результат.Получить(Отпечаток64);
			Если СтрокаРезультатаПоКлючу <> Неопределено Тогда
				
				СвойстваСертификата = Новый Структура;
				СвойстваСертификата.Вставить("Отпечаток",				СтрокаРезультатаПоКлючу);
				СвойстваСертификата.Вставить("ДействителенС",			Крипт.ДействителенС);
				СвойстваСертификата.Вставить("ДействителенПо",			Крипт.ДействителенДо);
				СвойстваСертификата.Вставить("Поставщик",				Крипт.Поставщик);
				СвойстваСертификата.Вставить("СерийныйНомер",			Крипт.СерийныйНомер);
				СвойстваСертификата.Вставить("Владелец",				Крипт.Субъект);
				СвойстваСертификата.Вставить("Наименование",			Крипт.ИмяСертификата);
				СвойстваСертификата.Вставить("ВозможностьПодписи",		Крипт.ПригоденДляПодписывания);
				СвойстваСертификата.Вставить("ВозможностьШифрования",	Крипт.ПригоденДляШифрования);
				
				СвойстваСертификатов.Вставить(СтрокаРезультатаПоКлючу, СвойстваСертификата);
				
				Результат.Вставить(СтрокаРезультатаПоКлючу, СвойстваСертификата);
				Результат.Удалить(Отпечаток64);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойстваСертификатаПоОтпечатку(Отпечаток, Хранилище = Неопределено, ИспользоватьКэш = Истина) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Отпечаток) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИспользоватьКэш Тогда
		СвойстваСертификата = СвойстваСертификатов[Отпечаток];
		Если СвойстваСертификата <> Неопределено Тогда
			Возврат СвойстваСертификата;
		КонецЕсли;
	КонецЕсли;
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией(Истина);
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Крипт.НеВыводитьСообщенияОбОшибках = Истина;
	КонецЕсли;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ХранилищаСертификатовДляПоиска = Новый Массив;
	Если Хранилище = Неопределено Тогда
		ХранилищаСертификатовДляПоиска.Добавить("MY");
		ХранилищаСертификатовДляПоиска.Добавить("AddressBook");
		ХранилищаСертификатовДляПоиска.Добавить("CA");
		ХранилищаСертификатовДляПоиска.Добавить("ROOT");
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Структура") Тогда
		Для Каждого Эл Из Хранилище Цикл
			ХранилищаСертификатовДляПоиска.Добавить(Эл.Ключ);
		КонецЦикла;
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Массив") Тогда
		ХранилищаСертификатовДляПоиска = Хранилище;
	ИначеЕсли ТипЗнч(Хранилище) = Тип("Строка") Тогда
		СтруктураХранилища = Новый Структура(Хранилище);
		Для Каждого Эл Из СтруктураХранилища Цикл
			ХранилищаСертификатовДляПоиска.Добавить(Эл.Ключ);
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, Отпечаток);
	ДвДанные.Позиция = 0;
	ОтпечатокBase64 = ДвДанные.ПолучитьСтрокуBase64(20);
	ДвДанные = Неопределено;
	
	Попытка
		Для Каждого ХранилищеСертификатов Из ХранилищаСертификатовДляПоиска Цикл
			Пока Крипт.ПолучитьСледующийСертификат(ХранилищеСертификатов) Цикл
				Если СокрЛП(Крипт.Отпечаток) = ОтпечатокBase64 Тогда
					
					СвойстваСертификата = Новый Структура;
					СвойстваСертификата.Вставить("Отпечаток",				Отпечаток);
					СвойстваСертификата.Вставить("ДействителенС",			Крипт.ДействителенС);
					СвойстваСертификата.Вставить("ДействителенПо",			Крипт.ДействителенДо);
					СвойстваСертификата.Вставить("Поставщик",				Крипт.Поставщик);
					СвойстваСертификата.Вставить("СерийныйНомер",			Крипт.СерийныйНомер);
					СвойстваСертификата.Вставить("Владелец",				Крипт.Субъект);
					СвойстваСертификата.Вставить("Наименование",			Крипт.ИмяСертификата);
					СвойстваСертификата.Вставить("ВозможностьПодписи",		Крипт.ПригоденДляПодписывания);
					СвойстваСертификата.Вставить("ВозможностьШифрования",	Крипт.ПригоденДляШифрования);
					
					СвойстваСертификатов.Вставить(Отпечаток, СвойстваСертификата);
					
					Крипт = Неопределено;
					Возврат СвойстваСертификата;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Крипт = Неопределено;
	Возврат Неопределено;
	
КонецФункции

Функция СертификатЗарегистрированВХранилище(Отпечаток, Хранилище) Экспорт
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Крипт.НеВыводитьСообщенияОбОшибках = Истина;
	КонецЕсли;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, Отпечаток);
	ДвДанные.Позиция = 0;
	ОтпечатокBase64 = ДвДанные.ПолучитьСтрокуBase64(20);
	ДвДанные = Неопределено;
	
	Попытка
		Пока Крипт.ПолучитьСледующийСертификат(Хранилище) Цикл
			Если нрег(СокрЛП(Крипт.Отпечаток)) = нрег(ОтпечатокBase64) Тогда
				Крипт = Неопределено;
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	Крипт = Неопределено;
	Возврат Ложь;
	
КонецФункции

Функция ПредставлениеСертификата(Сертификат)
	
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	Если ТипЗнчСертификат = Тип("Структура") ИЛИ ТипЗнчСертификат = Тип("Соответствие") Тогда
		Возврат СокрЛП(Сертификат["Наименование"]);
	Иначе
		Возврат СокрЛП(Сертификат);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяВладельцаСертификата(Сертификат)
	
	СвойстваСертификата = РазобратьСтрокуСвойств(СокрЛП(Сертификат.Владелец));
	Если СвойстваСертификата.Получить("CN") <> Неопределено Тогда
		Возврат СвойстваСертификата.Получить("CN");
	ИначеЕсли СвойстваСертификата.Получить("SN") <> Неопределено Тогда
		Возврат СвойстваСертификата.Получить("SN");
	Иначе
		Возврат СокрЛП(СвойстваСертификата.Субъект);
	КонецЕсли;
	
КонецФункции

Функция РазобратьСтрокуСвойств(Знач СтрокаСвойств)
	
	СоответствиеРезультат = Новый Соответствие;
	ИсходнаяДлинаСтрокиСвойств = СтрДлина(СтрокаСвойств);
	
	Для ОбрИнд = 0 По ИсходнаяДлинаСтрокиСвойств - 1 Цикл
		Инд = ИсходнаяДлинаСтрокиСвойств - ОбрИнд;
		Если Сред(СтрокаСвойств, Инд, 1) = "," Тогда
			СтрокаСвойства = Сред(СтрокаСвойств, Инд + 1);
			СтрокаСвойств = Лев(СтрокаСвойств, Инд - 1);
			ВхождениеРавно = Найти(СтрокаСвойства, "=");
			Если ВхождениеРавно <> 0 Тогда
				ИмяПараметра = СокрЛП(Лев(СтрокаСвойства, ВхождениеРавно - 1));
				ЗначениеПараметра = СокрЛП(Сред(СтрокаСвойства, ВхождениеРавно + 1));
				Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
					СоответствиеРезультат.Вставить(ИмяПараметра, ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаСвойств) Тогда
		ВхождениеРавно = Найти(СтрокаСвойств, "=");
		Если ВхождениеРавно <> 0 Тогда
			ИмяПараметра = СокрЛП(Лев(СтрокаСвойств, ВхождениеРавно - 1));
			ЗначениеПараметра = СокрЛП(Сред(СтрокаСвойств, ВхождениеРавно + 1));
			Если НЕ ПустаяСтрока(ИмяПараметра) Тогда
				СоответствиеРезультат.Вставить(ИмяПараметра, ЗначениеПараметра);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат СоответствиеРезультат;
	
КонецФункции

Процедура ОтобразитьСертификатВПолеВвода(ПолеВвода, Знач Сертификат) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		ПолеВвода.ЦветТекстаПоля = Новый Цвет;
		ПолеВвода.Значение = "";
		ПолеВвода.Подсказка = "Сертификат не выбран";
		Возврат;
	КонецЕсли;
	
	// возможные варианты параметра Сертификат на входе: строка, структура, соответствие или табличная часть
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	Если ТипЗнчСертификат <> Тип("Строка") И ТипЗнчСертификат <> Тип("Структура") И ТипЗнчСертификат <> Тип("Соответствие")
	И Сертификат.Количество() = 1 Тогда
		Сертификат = Сертификат[0].Сертификат;
		ТипЗнчСертификат = Тип("Строка");
	КонецЕсли;
	
	Если ТипЗнчСертификат = Тип("Строка") ИЛИ ТипЗнчСертификат = Тип("Структура") ИЛИ ТипЗнчСертификат = Тип("Соответствие") Тогда
		
		Если ТипЗнчСертификат <> Тип("Структура") И ТипЗнчСертификат <> Тип("Соответствие") Тогда
			СертификатСтруктура = ПолучитьСвойстваСертификатаПоОтпечатку(Сертификат, , Ложь);
			Если СертификатСтруктура = Неопределено Тогда
				ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
				ПолеВвода.Значение = Сертификат;
				ПолеВвода.Подсказка = "Сертификат не зарегистрирован в системном хранилище сертификатов!";
				Возврат;
			Иначе
				Сертификат = СертификатСтруктура;
			КонецЕсли;
		КонецЕсли;
		
		ПредставлениеСертификата = ПолноеПредставлениеСертификата(Сертификат);
		ТекДата = ТекущаяДата();
		Если ТекДата > Сертификат.ДействителенПо Тогда
			ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
			ПолеВвода.Значение = ПредставлениеСертификата;
			ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток + "
								  |ПЕРИОД ДЕЙСТВИЯ СЕРТИФИКАТА ИСТЕК!";
		ИначеЕсли ТекДата < Сертификат.ДействителенС Тогда
			ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
			ПолеВвода.Значение = ПредставлениеСертификата;
			ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток + "
								  |ПЕРИОД ДЕЙСТВИЯ СЕРТИФИКАТА ЕЩЕ НЕ НАСТУПИЛ!";
		Иначе
			ПолеВвода.ЦветТекстаПоля = Новый Цвет;
			ПолеВвода.Значение = ПредставлениеСертификата;
			ПолеВвода.Подсказка = "Отпечаток: " + Сертификат.Отпечаток;
		КонецЕсли;
		
	Иначе
		
		// получаем свойства сертификатов
		ОтпечаткиМассив = Сертификат.ВыгрузитьКолонку("Сертификат");
		СвойстваСертификатов = ПолучитьСвойстваСертификатовПоОтпечаткам(ОтпечаткиМассив);
		
		// получаем представление сертификатов
		ЧислоСертификатов = Сертификат.Количество();
		ПредставлениеЧислаСертификатов = ПредставлениеЧислаСертификатов(ЧислоСертификатов);
		
		// проверяем, есть ли ошибки связанные хотя бы с одним сертификатом
		ОшибкиЕсть = Ложь;
		ОбратитеВнимание = Ложь;
		ТекДата = ТекущаяДата();
		Для Каждого СтрСертификат Из ОтпечаткиМассив Цикл
			СвойстваСертификата = СвойстваСертификатов[СтрСертификат];
			Если СвойстваСертификата = Неопределено Тогда
				ОбратитеВнимание = Истина;
			ИначеЕсли СвойстваСертификата.ДействителенПо < ТекДата ИЛИ СвойстваСертификата.ДействителенС > ТекДата Тогда
				ОшибкиЕсть = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// прорисовываем поле
		ПолеВвода.Значение = ПредставлениеЧислаСертификатов;
		Если ОшибкиЕсть Тогда
			ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
			ПолеВвода.Подсказка = "Один или несколько сертификатов недействительны";
		ИначеЕсли ОбратитеВнимание Тогда
			ПолеВвода.ЦветТекстаПоля = Новый Цвет(255, 0, 0);
			ПолеВвода.Подсказка = "Обратите внимание, один или несколько сертификатов не зарегистрированы в системном хранилище сертификатов";
		Иначе
			ПолеВвода.ЦветТекстаПоля = Новый Цвет;
			ПолеВвода.Подсказка = "";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеЧислаСертификатов(ЧислоСертификатов)
	
	Если ЧислоСертификатов = 0 Тогда
		Результат = "Сертификат не выбран";
	ИначеЕсли ЧислоСертификатов = 1 Тогда
		Результат = "1 сертификат";
	ИначеЕсли ЧислоСертификатов >= 2 И ЧислоСертификатов <= 4 Тогда
		Результат = "" + ЧислоСертификатов + " сертификата";
	Иначе // считаем, что больше 20 сертификатов не будет, иначе следует дописать
		Результат = "" + ЧислоСертификатов + " сертификатов";
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПолноеПредставлениеСертификата(Сертификат)
	
	Возврат СокрЛП(Сертификат.Наименование) + " (" + Сертификат.ДействителенС + " - " + Сертификат.ДействителенПо + ")";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТПРАВКИ ДОКУМЕНТОВ ИНФОРМАЦИОННОГО ВЗАИМОДЕЙСТВИЯ
//

Процедура ОтправкаНеформализованногоДокумента(Док, Действие = 2) Экспорт
	
	Организация = Док.Организация;
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ФНС
	УчетнаяЗаписьОбмена = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗаписьОбмена.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ФНС.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ИмяВложения = "";
	ДанныеВложения = Неопределено;
	ТипВложения = Неопределено;
	РазмерВложения = Неопределено;
	Если НЕ ПолучитьВложениеНеформализованногоДокумента(Док, ИмяВложения, ДанныеВложения, ТипВложения, РазмерВложения) Тогда
		Сообщить("Отсутствует документ для отправки!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	Попытка
		ДанныеВложения.Получить().Записать(ВремФайл);
	Исключение
		Сообщить("Не удалось выгрузить неформализованный документ во временный файл!", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	ОбъектВремФайл = Новый Файл(ВремФайл);
	Если ОбъектВремФайл.Размер() = 0 Тогда
		Сообщить("Отправка пустого документа невозможна!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	УдалитьФайлы(ВремФайл);
	
	НовоеИмяВложения = СформироватьИмяНеформализованногоДокумента(Организация, Док.Получатель, ТипВложения);
	Если НЕ ЗначениеЗаполнено(НовоеИмяВложения) Тогда
		Возврат;
	КонецЕсли;
	
	//КодИМНС = Организация.КодИМНС; // !!! необходимо указывать именно основную инспекцию организации
	//Если ТипЗнч(КодИМНС) = Тип("Строка") Тогда
	//	ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИМНС);
	//	Если ИФНС = Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
	//		Сообщить("Не найден налоговый орган с кодом " + КодИМНС + " в справочнике ""Налоговые органы""!", СтатусСообщения.Важное);
	//		ОтменитьТранзакцию();
	//		Возврат;
	//	КонецЕсли;
	//Иначе
	//	ИФНС = КодИМНС;
	//КонецЕсли;
	
	КодИФНС = СокрЛП(Док.Получатель.Код);
	ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИФНС);
	Если НЕ ЗначениеЗаполнено(ИФНС) Тогда
		Сообщить("Не удалось найти налоговый орган " + КодИФНС + " в справочнике ""Налоговые органы"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если УчетнаяЗаписьОбмена.ОбменНапрямую И ИФНС <> УчетнаяЗаписьОбмена.НалоговыйОрган Тогда
		Сообщить("Отправка документа возможна только в налоговый орган " + УчетнаяЗаписьОбмена.НалоговыйОрган + ", указанный в параметрах учетной записи.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//ИФНС = УчетнаяЗаписьОбмена.НалоговыйОрган;
	
	НачатьТранзакцию();
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
	ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
	ЦиклОбмена.Предмет = Док;
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗаписьОбмена;
	ЦиклОбмена.ВнешняяОрганизация = ИФНС;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = ?(НЕ УчетнаяЗаписьОбмена.ОбменНапрямую, УчетнаяЗаписьОбмена.СерверДокументооборота, ИФНС);
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗаписьОбмена;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// добавляем ДИВ
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент, ДанныеВложения, НовоеИмяВложения, РазмерВложения) Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка документа прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// формируем файл описания отправителя и получателя
	ФайлИОП = СформироватьИОП(ТранспортноеСообщение);
	Если ФайлИОП = Неопределено Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// добавляем файл описания
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ФайлИОП, НовоеИмяВложения + ".info") Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// формируем файл описания неформализованного документа
	ФайлОНД = СформироватьОНД(ТранспортноеСообщение, ИмяВложения, НовоеИмяВложения);
	Если ФайлОНД = Неопределено Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// добавляем описание неформализованного документа
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента, ФайлОНД, НовоеИмяВложения + ".desc") Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ТранспортноеСообщение.Тема = СформироватьТемуСообщения(ТранспортноеСообщение);
	
	Попытка
		ТранспортноеСообщение.Записать();	
	Исключение
		Сообщить("Отправка документа прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// если требуется только подготовить пакет без подписания, то закончим
	Если Действие < 1 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке.", СтатусСообщения.Информация);	
		Возврат;
	КонецЕсли;
	
	// при подписании транзакция открывается непосредственно в методе ПоставитьПодписиОтветственныхЛиц()
	
	// пытаемся подписать
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	ОтветственныеЛицаПодписанты = Новый Массив;
	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатРуководителя) Тогда
		ОтветственныеЛицаПодписанты.Добавить("Руководитель");
	КонецЕсли;
	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатГлавногоБухгалтера) Тогда
		ОтветственныеЛицаПодписанты.Добавить("Главный бухгалтер");
	КонецЕсли;
	Если НЕ ПоставитьПодписиОтветственныхЛиц(ТранспортноеСообщение.Ссылка, ОтветственныеЛицаПодписанты) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось проставить подписи ответственных лиц организации """ + Организация + """!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	//// пытаемся подписать
	//Если УчетнаяЗапись.АвтоматическоеОпределениеНабораПодписей Тогда
	//	ОтветственныеЛицаПодписанты = Новый Массив;
	//	ОтветственныеЛицаПодписанты.Добавить("Руководитель");
	//	Если НЕ РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) И Найти(ТекстВыгрузки, Символы.ПС + "ФИОБух:") <> 0 Тогда
	//		ОтветственныеЛицаПодписанты.Добавить("Главный бухгалтер");
	//	КонецЕсли;
	//Иначе
	//	ОтветственныеЛицаПодписанты = Новый Массив;
	//	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатРуководителя) Тогда
	//		ОтветственныеЛицаПодписанты.Добавить("Руководитель");
	//	КонецЕсли;
	//	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатГлавногоБухгалтера) Тогда
	//		ОтветственныеЛицаПодписанты.Добавить("Главный бухгалтер");
	//	КонецЕсли;
	//	Если ОтветственныеЛицаПодписанты.Количество() = 0 Тогда
	//		Сообщить("Для учетной записи, сопоставленной организации """ + Организация + """, не заданы цифровые сертификаты ответственных лиц организации!", СтатусСообщения.Важное);
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;	
	
	// если требуется подготовить и подписать без отправки, то закончим
	Если Действие < 2 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке и подписан.", СтатусСообщения.Информация);	
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// фиксируем изменения
	ЗафиксироватьТранзакцию();
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);	
	
КонецПроцедуры

Процедура ОтправкаНеформализованногоДокументаВПФР(Док, Действие = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Сообщить("Не выбран документ для отправки.", СтатусСообщения);
		Возврат;
	КонецЕсли;
	
	// проверяем, заполнена ли организация-отправитель и включен ли механизм обмена
	Организация = Док.Отправитель;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// 
		Сообщить("Не выбрана организация-отправитель.", СтатусСообщения.Важное);
		Возврат;
	ИначеЕсли Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС и ПФР по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ПФР
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСПФР Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ПФР.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначен ли документ для переписки с ПФР
	Если Док.Тип <> Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
		Сообщить("Письмо не предназначено для переписки с ПФР.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, указан ли получатель
	Если НЕ ЗначениеЗаполнено(Док.Получатель) Тогда
		Сообщить("Не задан получатель письма.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем статусы отправки
	СтатусОтправкиОбъекта = ПолучитьСтатусОтправкиОбъекта(Док);
	Если ЗначениеЗаполнено(СтатусОтправкиОбъекта) Тогда
		Если НЕ ВопросПредупреждение("Внимание, Вы уже отправляли это письмо!
								|Вы действительно хотите отправить его заново? При этом будет начат новый цикл обмена!",
								"Нет, прервать отправку.",
								"Да, я хочу отправить письмо, предыдущая попытка отправки которого не завершена.") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// получаем приложения
	Приложения = ПолучитьВложенияНеформализованногоДокумента(Док, , Истина);
	
	// получаем содержание письма
	ТекстСодержания = Док.Содержание;
	
	// проверяем, не пустое ли письмо
	Если НЕ ЗначениеЗаполнено(ТекстСодержания) И Приложения.Количество() = 0 Тогда
		Сообщить("В письме не задано содержание и отсутствуют вложения.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// формируем файл с содержимым
	ИмяФайлаСодержимого = ВыгрузитьТекстВФайл(ТекстСодержания);
	КороткоеИмяФайлаСодержимого = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	
	///////////////////////////////////////////////////////////////////////////////
	НачатьТранзакцию();
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР;
	ЦиклОбмена.Предмет = Док;
	ЦиклОбмена.Идентификатор = Док.Идентификатор;
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗапись;
	ЦиклОбмена.ВнешняяОрганизация = Док.Получатель;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = Док.Получатель;
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка прервана.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// добавляем содержание
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо, ИмяФайлаСодержимого, КороткоеИмяФайлаСодержимого, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.Текст1251) Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// добавляем приложения
	Для Каждого СтрПриложение Из Приложения Цикл
		Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение, СтрПриложение.Данные, СтрПриложение.ИмяФайла, СтрПриложение.Размер, , , , , , СгенерироватьUUID(), ТипСодержимогоПоИмениФайла(СтрПриложение.ИмяФайла, Истина)) Тогда
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// записываем цикл обмена
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// изменяем статус отправки
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.ВКонверте);
	
	// готовим пакет
	Если НЕ СформироватьПакет(ТранспортноеСообщение) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// отправляем сообщение
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// изменяем статус отправки
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.Отправлен);
	
	// фиксируем транзакцию
	ЗафиксироватьТранзакцию();
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);
	
КонецПроцедуры

Функция ПолучитьВложения(СсылкаПисьмо, ИменаВложений = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВложенияНеформализованныхДокументов.ИмяФайла,
	                      |	ВложенияНеформализованныхДокументов.Данные
	                      |ИЗ
	                      |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	                      |ГДЕ
	                      |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент");
	Запрос.УстановитьПараметр("НеформализованныйДокумент", СсылкаПисьмо);
	Если ИменаВложений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И ВложенияНеформализованныхДокументов.ИмяФайла В(&ИмяФайла)";
		Запрос.УстановитьПараметр("ИмяФайла", ИменаВложений);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТипСодержимогоПоИмениФайла(ИмяФайла, ДляПФР = Ложь)
	
	нрегРасширениеФайла = нрег(РасширениеФайла(ИмяФайла));
	Если нрегРасширениеФайла = "txt" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст1251; // необходимо анализировать наполнение файла с целью автоопределения кодировки (Текст866 или Текст1251)
	ИначеЕсли нрегРасширениеФайла = "xml" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.xml;
	ИначеЕсли нрегРасширениеФайла = "htm" ИЛИ нрегРасширениеФайла = "html" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.html;
	ИначеЕсли НЕ ДляПФР Тогда
		Если нрегРасширениеФайла = "pdf" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.pdf;
		ИначеЕсли нрегРасширениеФайла = "rtf" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.rtf;
		ИначеЕсли нрегРасширениеФайла = "tiff" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.tiff;
		ИначеЕсли нрегРасширениеФайла = "jpeg" ИЛИ нрегРасширениеФайла = "jpg" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.jpeg;
		ИначеЕсли нрегРасширениеФайла = "doc" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.ms_word;
		ИначеЕсли нрегРасширениеФайла = "xls" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.ms_excel;
		ИначеЕсли нрегРасширениеФайла = "odt" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.odf_text;
		ИначеЕсли нрегРасширениеФайла = "ods" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet;
		ИначеЕсли нрегРасширениеФайла = "docx" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.oxml_word;
		ИначеЕсли нрегРасширениеФайла = "xlsx" Тогда
			Возврат Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet;
		Иначе
			Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
		КонецЕсли;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьТекстВФайл(Текст, ИмяФайла = Неопределено, КодировкаТекста = "windows-1251")
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ИмяФайлаСохранения = ИмяФайла;
	Иначе
		ИмяФайлаСохранения = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	ОбъектЗапись = Новый ЗаписьТекста(ИмяФайлаСохранения, КодировкаТекста);
	ОбъектЗапись.Записать(Текст);
	Попытка
		ОбъектЗапись.Закрыть();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяФайлаСохранения;
	
КонецФункции

Процедура ОтправкаЗапросаНаИнформационноеОбслуживание(Док, Действие = 0) Экспорт
	
	Перем ДанныеВложения, ИмяВложения;
	
	Организация = Док.Организация;
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС и ПФР по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ФНС
	УчетнаяЗаписьОбмена = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗаписьОбмена.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ФНС.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Если НЕ СформироватьЗапросНаИнформационноеОбслуживание(Док, ДанныеВложения, ИмяВложения) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяВложения) Тогда
		Сообщить("Запрос для отправки не сформирован!", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// Проверка на то, что отчет представляется за истекший период.
	Если Док.ДатаОкончанияПериода > РабочаяДата Тогда
		Сообщить("Невозможна отправка запроса за неистекший период!
				|Дата окончания периода запроса не должна превышать рабочую дату.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	КодИФНС = Док.Получатель.Код;
	ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИФНС);
	Если НЕ ЗначениеЗаполнено(ИФНС) Тогда
		Сообщить("Не удалось найти налоговый орган " + КодИФНС + " в справочнике ""Налоговые органы"".", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Если УчетнаяЗаписьОбмена.ОбменНапрямую И ИФНС <> УчетнаяЗаписьОбмена.НалоговыйОрган Тогда
		Сообщить("Отправка запроса возможна только в налоговый орган " + УчетнаяЗаписьОбмена.НалоговыйОрган + ", указанный в параметрах учетной записи.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	//ИФНС = УчетнаяЗаписьОбмена.НалоговыйОрган;
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Предмет = Док;
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
	ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗаписьОбмена;
	ЦиклОбмена.ВнешняяОрганизация = ИФНС;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание;
	ЦиклОбмена.ДатаНачалаПериода = Док.ДатаНачалаПериода;
	ЦиклОбмена.ДатаОкончанияПериода = Док.ДатаОкончанияПериода;
	ЦиклОбмена.ВидУслуги = Док.ВидУслуги;
	ЦиклОбмена.ФорматОтвета = Док.ФорматОтвета;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = ?(НЕ УчетнаяЗаписьОбмена.ОбменНапрямую, УчетнаяЗаписьОбмена.СерверДокументооборота, ИФНС);
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗаписьОбмена;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();	
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// добавляем ДИВ
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН, ДанныеВложения, ИмяВложения) Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка документа прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// формируем файл описания отправителя и получателя
	ФайлИОП = СформироватьИОП(ТранспортноеСообщение);
	Если ФайлИОП = Неопределено Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// добавляем файл описания
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ФайлИОП, ИмяВложения + ".info") Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	ТранспортноеСообщение.Тема = СформироватьТемуСообщения(ТранспортноеСообщение);
	
	Попытка
		ТранспортноеСообщение.Записать();	
	Исключение
		Сообщить("Отправка документа прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецПопытки;
	
	// если требуется только подготовить пакет без подписания, то закончим
	Если Действие < 1 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке.", СтатусСообщения.Информация);	
		Возврат;
	КонецЕсли;
	
	// при подписании транзакция открывается непосредственно в методе ПоставитьПодписиОтветственныхЛиц()
	
	// пытаемся подписать
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	ОтветственныеЛицаПодписанты = Новый Массив;
	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатРуководителя) Тогда
		ОтветственныеЛицаПодписанты.Добавить("Руководитель");
	КонецЕсли;
	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатГлавногоБухгалтера) Тогда
		ОтветственныеЛицаПодписанты.Добавить("Главный бухгалтер");
	КонецЕсли;
	Если НЕ ПоставитьПодписиОтветственныхЛиц(ТранспортноеСообщение.Ссылка, ОтветственныеЛицаПодписанты) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось проставить подписи ответственных лиц организации """ + Организация + """!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// если требуется подготовить и подписать без отправки, то закончим
	Если Действие < 2 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке и подписан.", СтатусСообщения.Информация);	
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// фиксируем изменения
	ЗафиксироватьТранзакцию();
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);	
	
КонецПроцедуры

Функция ОтправкаРегламентированногоОтчета(Док, Действие = 2, ФормаОтчета = Неопределено, ПараметрыГрупповойОбработки = Неопределено) Экспорт
	
	Если ТекущаяДата() < ДатаПереходаНа534 Тогда
		Возврат ОтправкаРегламентированногоОтчетаВФНС141(Док, Действие, ФормаОтчета, ПараметрыГрупповойОбработки);
	Иначе
		Возврат ОтправкаРегламентированногоОтчетаВФНС534(Док, Действие, ФормаОтчета, ПараметрыГрупповойОбработки);
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьРегламентированныйОтчет(Отчет, ПроверкаБлокировкиФормы, ТекстВыгрузки, ИмяФайлаВыгрузки) Экспорт
	
	// формируем файл выгрузки
	ДокВыгрузки = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	ФайлВыгрузки = ДокВыгрузки.ПолучитьФорму().ВыгрузитьОтчет(Отчет, ПроверкаБлокировкиФормы);
	Если ФайлВыгрузки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// считываем из файла
	КодировкаФайла = ?(нрег(Прав(ФайлВыгрузки, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM);
	ЧтениеТекста = Новый ЧтениеТекста(ФайлВыгрузки, КодировкаФайла);
	ТекстВыгрузки = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	// определяем имя файла выгрузки
	ОбъектФайл = Новый Файл(ФайлВыгрузки);
	ИмяФайлаВыгрузки = ОбъектФайл.Имя;
	
	// удаляем файл выгрузки
	УдалитьФайлы(ОбъектФайл.Путь);
	
	Возврат Истина;
	
КонецФункции

Процедура НараститьСчетчикДокументовПриНеобходимости(ТекстВыгрузки, ИмяФайла, Организация, ДатаОкончанияПериода)
	
	РасширениеСТочкой = нрег(Прав(ИмяФайла, 4));
	Если РасширениеСТочкой = ".xml" Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяФраза = Символы.ПС + "ИдДок:";
	Для Стр = 1 По СтрЧислоСтрок(ТекстВыгрузки) Цикл
		ТекСтр = СтрПолучитьСтроку(ТекстВыгрузки, Стр);
		Если Лев(ТекСтр, 6) <> "ИдДок:" Тогда
			Продолжить;
		КонецЕсли;
		СчетчикДокументов = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхДокументов(Организация, ДатаОкончанияПериода) + 1;
		ЭтоАлко = (Найти(ТекстВыгрузки, Символы.ПС + "ТипИнф:11520") <> 0);
		Если ЭтоАлко Тогда
			НовСтр = Лев(ТекСтр,СтрДлина(ТекСтр) - 4) + Прав(Формат(СчетчикДокументов, "ЧДЦ=0; ЧВН=; ЧГ=0"), 2) + Прав(ТекСтр, 2);
		Иначе
			НовСтр = Лев(ТекСтр,СтрДлина(ТекСтр) - 8) + Формат(СчетчикДокументов, "ЧЦ=8; ЧВН=; ЧГ=0");
		КонецЕсли;
		ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, Символы.ПС + ТекСтр, Символы.ПС + НовСтр);
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхДокументов(Организация, СчетчикДокументов, ДатаОкончанияПериода);
		Прервать;
	КонецЦикла;
		
КонецПроцедуры

Процедура НараститьСчетчикВИмениФайлаВыгрузкиПриНеобходимости(ИмяФайла, Организация, ДатаОкончанияПериода, КодНО)
	
	РасширениеСТочкой = нрег(Прав(ИмяФайла, 4));
	
	Если РасширениеСТочкой = ".xml" Тогда
		Возврат;
	КонецЕсли;
	
	Если РасширениеСТочкой = ".txt" Тогда
		ВхождениеТочки = Найти(ИмяФайла, ".");
		ВхождениеСчетчика = ВхождениеТочки - 8;
		Если ВхождениеТочки <> 0 Тогда
			СчетчикФайлов = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Организация, , ДатаОкончанияПериода, КодНО);
			ИмяФайла = Лев(ИмяФайла, ВхождениеСчетчика - 1) + Формат(СчетчикФайлов, "ЧЦ=8; ЧН=; ЧВН=; ЧГ=") + ".txt";
			РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(Организация, СчетчикФайлов, , ДатаОкончанияПериода, КодНО);
		КонецЕсли;
	Иначе
		ВхождениеТочки = Найти(ИмяФайла, ".");
		Если ВхождениеТочки <> 0 Тогда
			ИмяФайла = Лев(ИмяФайла, ВхождениеТочки - 1);
		КонецЕсли;
		СчетчикФайлов = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(Организация, , ДатаОкончанияПериода, КодНО);
		ИмяФайла = ИмяФайла + "." + Формат(СчетчикФайлов, "ЧЦ=3; ЧН=; ЧВН=; ЧГ=");
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(Организация, СчетчикФайлов, , ДатаОкончанияПериода, КодНО);
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьПолучателяТранспортногоСообщения(Сообщение)
	
	Если НЕ Сообщение.УчетнаяЗапись.ОбменНапрямую Тогда
		Возврат Сообщение.УчетнаяЗапись.СерверДокументооборота;
	Иначе
		ТипСообщения = Сообщение.Тип;
		Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности
		ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН
		ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика
		ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
			Возврат Сообщение.УчетнаяЗапись.СерверДокументооборота;
		Иначе
			Возврат Сообщение.УчетнаяЗапись.НалоговыйОрган;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СформироватьИОП(ТранспортноеСообщение, ТекстВыгрузки = Неопределено, ИмяФайла = Неопределено) Экспорт
	
	ОрганизацияОтправитель = ТранспортноеСообщение.Отправитель;
	
	// в случае обмена через СОС налоговым органом-получателем считается конечный налоговый орган (указанный в титульном листе отчета),
	// а в случае обмена напрямую, НО-получателем считается налоговый орган, указанный в учетной записи
	НОПолучатель = ?(НЕ ТранспортноеСообщение.УчетнаяЗапись.ОбменНапрямую И НЕ ЗначениеЗаполнено(ТранспортноеСообщение.Отправитель.КодИФНСПолучателя),
					ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация,
					ТранспортноеСообщение.УчетнаяЗапись.НалоговыйОрган);
	
	ИНН = СокрЛП(ОрганизацияОтправитель.ИНН);
	Если ПустаяСтрока(ИНН) Тогда
		Сообщить("Не задан ИНН для отправителя - организации """ + ОрганизацияОтправитель + """!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.ДобавитьСтроку("ИдОтпр:" + СокрЛП(ИНН));
	
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
	
		Если НЕ ЗначениеЗаполнено(НОПолучатель) Тогда
			Сообщить("Не удалось сформировать файл с информацией об отправителе и получателе: не задан налоговый орган - получатель транспортного сообщения!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		Текст.ДобавитьСтроку("ИдПол:" + СокрЛП(НОПолучатель.Код));
		
		Если ТекстВыгрузки <> Неопределено Тогда
			ЗначениеТипИнф = ИзвлечьПоказатель(ТекстВыгрузки, "ТипИнф");
			Если ЗначениеТипИнф = Неопределено Тогда
				ЗначениеТипИнф = "";
			КонецЕсли;
		Иначе
			ЗначениеТипИнф = "";
		КонецЕсли;
		Текст.ДобавитьСтроку("ТипИнфо:" + ЗначениеТипИнф);
		
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности Тогда
		
		Текст.ДобавитьСтроку("ИдПол:СЕРВЕРОБМЕНА");
		Текст.ДобавитьСтроку("ТипИнфо:ПОДТВОТПРАВКИФАЙЛА");
		
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		
		Текст.ДобавитьСтроку("ИдПол:" + СокрЛП(НОПолучатель.Код));
		Текст.ДобавитьСтроку("ТипИнфо:ПОДТВПРИЕМАПРОТОКОЛА");
		
	ИначеЕсли ТранспортноеСообщение.Тип =  Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		
		Текст.ДобавитьСтроку("ИдПол:" + СокрЛП(НОПолучатель.Код));
		Текст.ДобавитьСтроку("ТипИнфо:СООБЩЕНИЕНП");
		
	ИначеЕсли ТранспортноеСообщение.Тип =  Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		
		Текст.ДобавитьСтроку("ИдПол:СЕРВЕРОБМЕНА");
		Текст.ДобавитьСтроку("ТипИнфо:ПОДТВОТПРАВКИФАЙЛА");
		
	ИначеЕсли ТранспортноеСообщение.Тип =  Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
		
		Текст.ДобавитьСтроку("ИдПол:" + СокрЛП(НОПолучатель.Код));
		Текст.ДобавитьСтроку("ТипИнфо:ЗАПРОСИНФУСЛ");
		
	ИначеЕсли ТранспортноеСообщение.Тип =  Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН Тогда
		
		Текст.ДобавитьСтроку("ИдПол:СЕРВЕРОБМЕНА");
		Текст.ДобавитьСтроку("ТипИнфо:ПОДТВОТПРАВКИФАЙЛА");
		
	ИначеЕсли ТранспортноеСообщение.Тип =  Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН Тогда
		
		Текст.ДобавитьСтроку("ИдПол:" + СокрЛП(НОПолучатель.Код));
		Текст.ДобавитьСтроку("ТипИнфо:ПОДТВПРИЕМАПРОТОКОЛА");
		
	ИначеЕсли ТранспортноеСообщение.Тип =  Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН Тогда
		
		Текст.ДобавитьСтроку("ИдПол:" + СокрЛП(НОПолучатель.Код));
		Текст.ДобавитьСтроку("ТипИнфо:ПОДТВПРИЕМАОТВЕТАИФНС");
		
	КонецЕсли;
	
	Текст.ДобавитьСтроку("ВерсПрог:" + РегламентированнаяОтчетность.СформироватьВерсПрог());
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	Текст.Записать(ИмяВремФайла, КодировкаТекста.ANSI);
	
	Возврат ИмяВремФайла;
	
КонецФункции

Функция СформироватьОНД(ТранспортноеСообщение, ИмяДокумента, ИмяФайлаКонтейнера)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.ANSI);
	ОбъектЗаписьТекста.ЗаписатьСтроку(ИмяФайлаКонтейнера + ":" + ИмяДокумента);
	ОбъектЗаписьТекста.Закрыть();
	Возврат ВремФайл;
	
КонецФункции

Функция ИзвлечьПоказатель(ТекстВыгрузки, КодПоказателя) Экспорт
	
	Если Лев(СокрЛ(ТекстВыгрузки), 1) = "<" Тогда // это XML
		ОбъектЧтениеXML = Новый ЧтениеXML;
		ОбъектЧтениеXML.УстановитьСтроку(ТекстВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ОбъектЧтениеXML.Имя = КодПоказателя Тогда
						Возврат ОбъектЧтениеXML.Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
	Иначе
		Для Инд = 1 По СтрЧислоСтрок(ТекстВыгрузки) Цикл
			ТекСтр = СтрПолучитьСтроку(ТекстВыгрузки, Инд);
			Если ВРЕГ(Лев(ТекСтр, СтрДлина(КодПоказателя) + 1)) = ВРЕГ(КодПоказателя + ":") Тогда
				Возврат Сред(ТекСтр, СтрДлина(КодПоказателя) + 2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Неопределено;
	
КонецФункции

Функция ОтправкаРегламентированныхОтчетов(Доки, Действие = 0) Экспорт
	
	КоличествоОбъектов = Доки.Количество();
	Если КоличествоОбъектов = 0 Тогда
		Возврат Ложь;
	ИначеЕсли КоличествоОбъектов = 1 Тогда
		Возврат ОтправкаРегламентированногоОтчета(Доки[0], Действие);
	КонецЕсли;
	
	ФормаНастроекГрупповойОбработки = ПолучитьФорму("НастройкиГрупповойОбработки", , Новый УникальныйИдентификатор);
	ФормаНастроекГрупповойОбработки.ИсходныеПараметры.КодДействия = Действие;
	ФормаНастроекГрупповойОбработки.ИсходныеПараметры.КоличествоОбъектов = Доки.Количество();
	ФормаНастроекГрупповойОбработки.ИсходныеПараметры.ВидОбъектов = ТипЗнч(Доки[0]);
	ПараметрыГрупповойОбработки = ФормаНастроекГрупповойОбработки.ОткрытьМодально();
	Если ПараметрыГрупповойОбработки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДействиеПриОшибках = ПараметрыГрупповойОбработки.ДействиеПриОшибках;
	
	КоличествоОшибок = 0;
	
	ОчиститьСообщения();
	Сообщить("----------------------------------------------------------------------------------------------------");
	Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": групповая обработка начата.", СтатусСообщения.Информация);
	ОбработкаПрервана = Ложь;
	
	КоличествоОбъектов = Доки.Количество();
	Для Инд = 0 По КоличествоОбъектов - 1 Цикл
		
		ТекДок = Доки[Инд];
		Сообщить(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
		Если ТипЗнч(ТекДок) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": начата обработка отчета """ + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ТекДок) + """ (" + Формат(Инд + 1, "ЧГ=") + " из " + Формат(КоличествоОбъектов, "ЧГ=") + ").", СтатусСообщения.Информация);
		Иначе
			Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": начата обработка электронного представления """ + ТекДок  + """ (" + Формат(Инд + 1, "ЧГ=") + " из " + Формат(КоличествоОбъектов, "ЧГ=") + ").", СтатусСообщения.Информация);
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
		Результат = ОтправкаРегламентированногоОтчета(ТекДок, Действие, , ПараметрыГрупповойОбработки);
		
		НеобходимостьПрерыванияГрупповойОбработки = Неопределено;
		Если ПараметрыГрупповойОбработки.Свойство("НеобходимостьПрерыванияГрупповойОбработки", НеобходимостьПрерыванияГрупповойОбработки) И НеобходимостьПрерыванияГрупповойОбработки Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			ОбработкаПрервана = Истина;
			Прервать;
		ИначеЕсли НЕ Результат Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			Если ДействиеПриОшибках = 2 Тогда
				ОбработкаПрервана = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбработкаПрервана Тогда
		Сообщить("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
		Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": групповая обработка прервана.", СтатусСообщения.Важное);
		Сообщить("Количество необработанных объектов: " + КоличествоОшибок + ".", СтатусСообщения.Внимание);
	Иначе
		Сообщить("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<");
		Сообщить(Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm:ss'") + ": групповая обработка завершена.", СтатусСообщения.Информация);
		Если КоличествоОшибок <> 0 Тогда
			Сообщить("Количество необработанных объектов: " + КоличествоОшибок + ".", СтатусСообщения.Внимание);
		Иначе
			Сообщить("Все объекты успешно обработаны.", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	Сообщить("----------------------------------------------------------------------------------------------------");
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ТАБЛИЧНЫМИ ПОЛЯМИ ЦИКЛОВ ОБМЕНА
//

Процедура ПометитьСообщениеКакПрочитанное(Сообщение) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПолученныеТранспортныеСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСообщенияВМассивеПолученных = ПолученныеТранспортныеСообщения.Найти(Сообщение);
	Если ИндексСообщенияВМассивеПолученных <> Неопределено Тогда
		ПолученныеТранспортныеСообщения.Удалить(ИндексСообщенияВМассивеПолученных);
		Оповестить("Чтение сообщения", Новый Структура("Сообщение, ЦиклОбмена", Сообщение, Сообщение.ЦиклОбмена));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьЦиклыОбменаСНовымиСообщениями() Экспорт
	
	Результат = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПолученныеТранспортныеСообщения) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.Ссылка В(&Ссылка)");
	Запрос.УстановитьПараметр("Ссылка", ПолученныеТранспортныеСообщения);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.ЦиклОбмена);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок) Экспорт
	
	// инициализируем вспомогательные переменные
	
	ТекДата = ТекущаяДата();
	
	ЗеленыйШар					= БиблиотекаКартинок.ЗеленыйШар;
	СерыйШар					= БиблиотекаКартинок.СерыйШар;
	ЗолотойШар					= БиблиотекаКартинок.ЗолотойШар;
	ЗолотойШарЗашифрованное		= БиблиотекаКартинок.ЗолотойШарСЗамком;
	ЗеленыйШарНерасшифрованное	= БиблиотекаКартинок.ЗеленыйШарСЗамком;
	
	КрасныйЦвет					= Новый Цвет(255, 0, 0);
	
	СоответствиеТипаСообщенияИмениКолонки = Новый Соответствие;
	
	// ФНС
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности, "ОтветНаПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности, "ПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности, "ПодтверждениеНаПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО, "ОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ, "ОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО, "ОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО, "ОтветНаОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, "ОтветНаПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН, "ОтветНаПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН, "ПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН, "ПодтверждениеНаПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН, "ОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН, "ОтветНаОтветНаЗапрос");
	
	// ФНС 534
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "ОтветНаПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, "ПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "ПодтверждениеНаПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, "ОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "ОтветНаОтветНаЗапрос");
	
	// ФНС 534 2-НДФЛ
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, "ПротоколПроверки");
	
	// ФНС 534 НФД
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, "ПротоколПроверки");
	
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП, "ПодтверждениеДоставки");
	
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП, "ПодтверждениеДоставки");
	
	// ФНС 534 ИОН
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, "ПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "ОтветНаПодтверждениеОтправки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, "ПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "ПодтверждениеНаПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, "ОтветНаЗапрос");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "ОтветНаОтветНаЗапрос");
	
	// ПФР
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, "ПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, "ПодтверждениеНаПротоколПроверки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР, "ПодтверждениеДоставки");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР, "ПервичноеСообщение");
	СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР, "ПодтверждениеДоставки");
	
	ПредставленияФорматовОтвета = Новый Соответствие;
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.HTML,				"HTML");
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.PDF,				"PDF");
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.RTF,				"RTF");
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.TXT,				"TXT");
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XML,				"XML");
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XLS,				"XLS");
	ПредставленияФорматовОтвета.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.ПустаяСсылка(),	"");
	
	МассивЦикловОбмена = Новый Массив;
	СоответствиеОформленийСтрокЦикламОбмена = Новый Соответствие;
	
	НаличиеПрочихКолонок = Новый Соответствие;
	НаличиеПрочихКолонок.Вставить("Период");
	НаличиеПрочихКолонок.Вставить("Вид");
	НаличиеПрочихКолонок.Вставить("ФорматОтвета");
	НаличиеПрочихКолонок.Вставить("ВидУслуги");
	
	// инициализируем признаки наличия колонок сообщений
	НаличиеКолонокСообщений = Новый Соответствие;
	Для Каждого ЭлементСоответствия Из СоответствиеТипаСообщенияИмениКолонки Цикл
		НаличиеКолонокСообщений.Вставить(ЭлементСоответствия.Значение, (Элемент.Колонки.Найти(ЭлементСоответствия.Значение) <> Неопределено));
	КонецЦикла;
	
	// инициализируем признаки наличия прочих колонок
	Для Каждого ЭлементНаличияПрочихКолонок Из НаличиеПрочихКолонок Цикл
		НаличиеПрочихКолонок.Вставить(ЭлементНаличияПрочихКолонок.Ключ, (Элемент.Колонки.Найти(ЭлементНаличияПрочихКолонок.Ключ) <> Неопределено));
	КонецЦикла;
	
	// формируем список циклов обмена, по которым есть новые непрочитанные сообщения
	ЦиклыОбменаСНовымиСообщениями = ПолучитьЦиклыОбменаСНовымиСообщениями();
	
	// обходим все прорисовываемые строки табличного поля
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ОформлениеСтроки.ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ЦиклОбмена = ОформлениеСтроки.ДанныеСтроки.Ссылка;
		Тип = ОформлениеСтроки.ДанныеСтроки.Тип;
		
		// собираем все циклы обмена в массив для последующей передачи в запрос
		// и формируем соответствие между ссылками и оформлениями строк для последующей быстрой прорисовки
		МассивЦикловОбмена.Добавить(ЦиклОбмена);
		СоответствиеОформленийСтрокЦикламОбмена.Вставить(ЦиклОбмена, ОформлениеСтроки);
		
		// прорисовываем колонку ДатаЗакрытия
		Если ОформлениеСтроки.ДанныеСтроки.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена() Тогда
			ОформлениеСтроки.Ячейки.ДатаЗакрытия.УстановитьТекст("Не завершен");
		КонецЕсли;
		
		// по умолчанию во всех колонках сообщений отображаем серый шар
		Для Каждого НаличиеКолонки Из НаличиеКолонокСообщений Цикл
			Если НаличиеКолонки.Значение Тогда
				ОформлениеСтроки.Ячейки[НаличиеКолонки.Ключ].Картинка = СерыйШар;
				ОформлениеСтроки.Ячейки[НаличиеКолонки.Ключ].ОтображатьКартинку = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// в зависимости от типа цикла обмена
		// скрываем картинки в неиспользуемых колонках сообщений
		// и прорисовываем текст в прочих колонках
		Если Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
			Если НаличиеПрочихКолонок["Период"] Тогда
				ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачалаПериода, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончанияПериода), "ФП=Истина"));
			КонецЕсли;
			Если НаличиеПрочихКолонок["Вид"] Тогда
				ОформлениеСтроки.Ячейки.Вид.УстановитьТекст(РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ОформлениеСтроки.ДанныеСтроки.ВидДокумента));
			КонецЕсли;
			Если ДанныеСтроки.ФорматДокументооборота <> Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
				Если НаличиеКолонокСообщений["ОтветНаОтветНаЗапрос"] Тогда
					ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = Ложь;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			Если НаличиеПрочихКолонок["Период"] Тогда
				ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачалаПериода, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончанияПериода), "ФП=Истина"));
			КонецЕсли;
			Если НаличиеПрочихКолонок["Вид"] Тогда
				ОформлениеСтроки.Ячейки.Вид.УстановитьТекст(РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ОформлениеСтроки.ДанныеСтроки.ВидДокумента));
			КонецЕсли;
			Если НаличиеКолонокСообщений["ОтветНаОтветНаЗапрос"] Тогда
				ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ОтветНаЗапрос"] Тогда
				ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
			Если НаличиеКолонокСообщений["ПервичноеСообщение"] Тогда
				ОформлениеСтроки.Ячейки.ПервичноеСообщение.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ПодтверждениеОтправки"] Тогда
				ОформлениеСтроки.Ячейки.ПодтверждениеОтправки.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ОтветНаПодтверждениеОтправки"] Тогда
				ОформлениеСтроки.Ячейки.ОтветНаПодтверждениеОтправки.ОтображатьКартинку	= Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ПодтверждениеДоставки"] Тогда
				ОформлениеСтроки.Ячейки.ПодтверждениеДоставки.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ПротоколПроверки"] Тогда
				ОформлениеСтроки.Ячейки.ПротоколПроверки.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ПодтверждениеНаПротоколПроверки"] Тогда
				ОформлениеСтроки.Ячейки.ПодтверждениеНаПротоколПроверки.ОтображатьКартинку = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
			Если НаличиеКолонокСообщений["ПротоколПроверки"] Тогда
				ОформлениеСтроки.Ячейки.ПротоколПроверки.ОтображатьКартинку	= Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ПодтверждениеНаПротоколПроверки"] Тогда
				ОформлениеСтроки.Ячейки.ПодтверждениеНаПротоколПроверки.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ОтветНаЗапрос"] Тогда
				ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = Ложь;
			КонецЕсли;
			Если НаличиеКолонокСообщений["ОтветНаОтветНаЗапрос"] Тогда
				ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = Ложь;
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
			Если НаличиеПрочихКолонок["Период"] Тогда
				ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачалаПериода, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончанияПериода), "ФП=Истина"));
			КонецЕсли;
			Если НаличиеПрочихКолонок["ФорматОтвета"] Тогда
				ОформлениеСтроки.Ячейки.ФорматОтвета.УстановитьТекст(ПредставленияФорматовОтвета[ОформлениеСтроки.ДанныеСтроки.ФорматОтвета]);
			КонецЕсли;
		ИначеЕсли Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
			Если НаличиеПрочихКолонок["Период"] Тогда
				ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачалаПериода, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончанияПериода), "ФП=Истина"));
			КонецЕсли;
		КонецЕсли;
		
		ПомеченНаУдаление = ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления;
		ИмеютсяНовыеСообщения = (ЦиклыОбменаСНовымиСообщениями.Найти(ЦиклОбмена) <> Неопределено);
		
		// помеченные на удаление циклы обмена прорисовываем зачеркнутым шрифтом
		Если ПомеченНаУдаление ИЛИ ИмеютсяНовыеСообщения Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , ИмеютсяНовыеСообщения, , , ПомеченНаУдаление);
		КонецЕсли;
		
	КонецЦикла;
	
	
	// выбираем информацию по сообщениям прорисовываемых циклов обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ТранспортныеСообщения.Тип КАК Тип,
	                      |	ТранспортныеСообщения.ЦиклОбмена КАК ЦиклОбмена,
	                      |	ТранспортныеСообщения.ДатаТранспорта,
	                      |	ТранспортныеСообщения.Дата,
	                      |	ТранспортныеСообщения.Статус КАК СтатусСообщения,
	                      |	ТранспортныеСообщения.Ссылка,
	                      |	ТранспортныеСообщения.ПротоколСОшибкой,
	                      |	ТранспортныеСообщения.ЦиклОбмена.Тип КАК ТипЦиклаОбмена,
	                      |	ТранспортныеСообщения.ЦиклОбмена.Вид КАК ВидЦиклаОбмена,
	                      |	ТранспортныеСообщения.ЦиклОбмена.ФорматДокументооборота КАК ФорматДокументооборота,
	                      |	ТранспортныеСообщения.ЦиклОбмена.ДатаСоздания КАК ДатаСозданияЦиклаОбмена,
	                      |	НерасшифрованныеВложения.КоличествоСообщений КАК КоличествоНерасшифрованных,
	                      |	РасшифрованныеВложения.КоличествоСообщений КАК КоличествоРасшифрованных
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортныеСообщения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ТранспортныеКонтейнеры.ТранспортноеСообщение КАК ТранспортноеСообщение,
	                      |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
	                      |		ИЗ
	                      |			РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |		ГДЕ
	                      |			ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ТранспортныеКонтейнеры.ТранспортноеСообщение) КАК НерасшифрованныеВложения
	                      |		ПО ТранспортныеСообщения.Ссылка = НерасшифрованныеВложения.ТранспортноеСообщение
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение,
	                      |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
	                      |		ИЗ
	                      |			РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |		ГДЕ
	                      |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение) КАК РасшифрованныеВложения
	                      |		ПО ТранспортныеСообщения.Ссылка = РасшифрованныеВложения.ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортныеСообщения.ЦиклОбмена В(&ЦиклОбмена)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЦиклОбмена,
	                      |	ТранспортныеСообщения.Тип.Порядок,
	                      |	ТранспортныеСообщения.Дата");
	Запрос.УстановитьПараметр("ЦиклОбмена", МассивЦикловОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока Выборка.Следующий() Цикл
		
		ЦиклОбмена = Выборка.ЦиклОбмена;
		ТипЦиклаОбмена = Выборка.ТипЦиклаОбмена;
		ОформлениеСтроки = СоответствиеОформленийСтрокЦикламОбмена[ЦиклОбмена];
		
		
		Если Выборка.ВидЦиклаОбмена = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
			
			
			Если Выборка.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
				
				
				Если Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда // обращение 535
					
					// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
					Если Выборка.ПротоколСОшибкой
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
						ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
					КонецЕсли;
					
					// определяем имя колонки по типу сообщения
					ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
					Если ИмяКолонки <> Неопределено Тогда
						
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное
						ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
							
							// предварительно прорисовываем шарик для входящих сообщений
							Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
							Иначе
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
							КонецЕсли;
							
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
						КонецЕсли;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
						
					КонецЕсли;
					
				ИначеЕсли Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда // письмо 535
					
					// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
					Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
						ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
					КонецЕсли;
					
					// определяем имя колонки по типу сообщения
					ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
					Если ИмяКолонки <> Неопределено Тогда
						
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное
						ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
							
							// предварительно прорисовываем шарик для входящих сообщений
							Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
							Иначе
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
							КонецЕсли;
							
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
						КонецЕсли;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
						
					КонецЕсли;
					
				ИначеЕсли Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Рассылка Тогда // рассылка 535
					
					ОформлениеСтроки.Ячейки.ПодтверждениеДоставки.ОтображатьКартинку = Ложь;
					
					// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
					Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
						ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
					КонецЕсли;
					
					// определяем имя колонки по типу сообщения
					ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
					Если ИмяКолонки <> Неопределено Тогда
						
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное
						ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
							
							// предварительно прорисовываем шарик для входящих сообщений
							Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
							Иначе
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
							КонецЕсли;
							
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
						КонецЕсли;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
						
					КонецЕсли;
					
				ИначеЕсли Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда // групповая рассылка 535
					
					// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
					Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
						ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
					КонецЕсли;
					
					// определяем имя колонки по типу сообщения
					ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
					Если ИмяКолонки <> Неопределено Тогда
						
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное
						ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
							
							// предварительно прорисовываем шарик для входящих сообщений
							Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
							Иначе
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
							КонецЕсли;
							
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
						КонецЕсли;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
						
					КонецЕсли;
					
				ИначеЕсли Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда // ИОН 535
					
					// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
					Если Выборка.ПротоколСОшибкой
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
						ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
					КонецЕсли;
					
					// определяем имя колонки по типу сообщения
					ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
					Если ИмяКолонки <> Неопределено Тогда
						
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное
						ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
							
							// если результат приема отчета - отрицательный, то ждать результат обработки нет смысла и соответствующий шарик скрывается
							Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
								
								ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
								Если НаличиеКолонокСообщений["ОтветНаОтветНаЗапрос"] Тогда
									ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
								КонецЕсли;
								
							// но если существуют результат обработки или ответ на него, то значит, что после отрицательного
							// результата приема приходил положительный (или наоборот) - значит последние этапы отобразить надо
							ИначеЕсли Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО
							ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
								
								ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = Истина;
								ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = Истина;
								
							КонецЕсли;
							
							// предварительно прорисовываем шарик для входящих сообщений
							Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
							Иначе
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
							КонецЕсли;
							
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
						КонецЕсли;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
						
					КонецЕсли;
					
				Иначе // отчетность и 2-НДФЛ 535
					
					// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
					Если Выборка.ПротоколСОшибкой
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка
					ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС Тогда
						ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
					КонецЕсли;
					
					// определяем имя колонки по типу сообщения
					ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
					Если ИмяКолонки <> Неопределено Тогда
						
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное
						ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
							
							// если результат приема отчета - отрицательный, то ждать результат обработки нет смысла и соответствующий шарик скрывается
							Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
								
								ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
								Если НаличиеКолонокСообщений["ОтветНаОтветНаЗапрос"] Тогда
									ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
								КонецЕсли;
								
							// но если существуют результат обработки или ответ на него, то значит, что после отрицательного
							// результата приема приходил положительный (или наоборот) - значит последние этапы отобразить надо
							ИначеЕсли Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО
							ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
								
								ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = Истина;
								ОформлениеСтроки.Ячейки.ОтветНаОтветНаЗапрос.ОтображатьКартинку = Истина;
								
							КонецЕсли;
							
							// предварительно прорисовываем шарик для входящих сообщений
							Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
							Иначе
								ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
							КонецЕсли;
							
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
						КонецЕсли;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
						
					КонецЕсли;
					
				КонецЕсли;
				
			// ФНС 141
			Иначе
				
				
				// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
				Если Выборка.ПротоколСОшибкой
				ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
					ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
				КонецЕсли;
				
				// определяем имя колонки по типу сообщения
				ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
				Если ИмяКолонки <> Неопределено Тогда
					
					ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
					
					// до начала применения 141-го приказа седьмой шарик в строках по циклам обмена отчетностью не использовался
					Если Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность И Выборка.ДатаСозданияЦиклаОбмена < '20090416' Тогда // !!!
						ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = Ложь;
					КонецЕсли;
					
					Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
						
						// если протокол от ГПР - отрицательный, то ждать протокол от ЭОД нет смысла и соответствующий шарик скрывается
						Если Выборка.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
							Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности Тогда
								ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
							ИначеЕсли Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ Тогда
								ОформлениеСтроки.Ячейки.ОтветНаЗапрос.ОтображатьКартинку = Истина;
							КонецЕсли;
						КонецЕсли;
						
						// предварительно прорисовываем шарик для входящих сообщений
						Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
						Иначе
							ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
						КонецЕсли;
						
					Иначе
						ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
						ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
					КонецЕсли;
					ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
					
				КонецЕсли; // Если ИмяКолонки <> Неопределено Тогда
				
				
			КонецЕсли;
			
			
		ИначеЕсли Выборка.ВидЦиклаОбмена = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
			
			
			// изменим цвет шрифта на красный, если у цикла обмена присутствуют критические ошибки или по нему существует протокол с ошибкой
			Если Выборка.ПротоколСОшибкой
			ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
			ИЛИ Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
				ОформлениеСтроки.ЦветТекста = КрасныйЦвет;
			КонецЕсли;
			
			// определяем имя колонки по типу сообщения
			ИмяКолонки = СоответствиеТипаСообщенияИмениКолонки[Выборка.Тип];
			Если ИмяКолонки <> Неопределено Тогда
				
				ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
				
				// видимость колонок протокола и подтверждения на него зависит от того, отрицательный ли протокол в подтверждении получения
				Если Выборка.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
					ОформлениеСтроки.Ячейки.ПротоколПроверки.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
					ОформлениеСтроки.Ячейки.ПодтверждениеНаПротоколПроверки.ОтображатьКартинку = НЕ Выборка.ПротоколСОшибкой;
				КонецЕсли;
				
				// если результат приема отчета - отрицательный, то ждать результат обработки нет смысла и соответствующий шарик скрывается
				Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Отправленное ИЛИ Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
					Если Выборка.СтатусСообщения = Перечисления.СтатусыПисем.Полученное И НЕ ЗначениеЗаполнено(Выборка.КоличествоРасшифрованных) Тогда
						ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШарНерасшифрованное;
					Иначе
						ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ЗеленыйШар;
					КонецЕсли;
				Иначе
					ОформлениеСтроки.Ячейки[ИмяКолонки].ОтображатьКартинку = Истина;
					ОформлениеСтроки.Ячейки[ИмяКолонки].Картинка = ?(ЗначениеЗаполнено(Выборка.КоличествоНерасшифрованных), ЗолотойШарЗашифрованное, ЗолотойШар);
				КонецЕсли;
				
				ОформлениеСтроки.Ячейки[ИмяКолонки].Значение = Выборка.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Для Каждого НаличиеКолонки Из НаличиеКолонокСообщений Цикл
			Если НаличиеКолонки.Значение Тогда
				ТекЯчейка = ОформлениеСтроки.Ячейки[НаличиеКолонки.Ключ];
				Если ТекЯчейка.ОтображатьКартинку И ТекЯчейка.Картинка <> СерыйШар Тогда
					ТекЯчейка.Текст = "Гиперссылка";
					ТекЯчейка.Гиперссылка = Истина;
				Иначе
					ТекЯчейка.Гиперссылка = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// скрываем колонку ПодтверждениеДоставки, если табличное поле показывает запросы 535
	// и нет ни одного подтверждения доставки (следовательно, обмен напрямую)
	Если НаличиеКолонокСообщений["ПодтверждениеДоставки"] = Истина Тогда
		ВидимостьКолонки = Ложь;
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если ОформлениеСтроки.ДанныеСтроки = Неопределено
			ИЛИ ОформлениеСтроки.ДанныеСтроки.Тип <> Перечисления.ТипыЦикловОбмена.ИОН
			ИЛИ ОформлениеСтроки.Ячейки.ПодтверждениеДоставки.Картинка <> СерыйШар Тогда
				ВидимостьКолонки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элемент.Колонки.ПодтверждениеДоставки.Видимость = ВидимостьКолонки;
	КонецЕсли;
	
	// скрываем колонки ПротоколПроверки и ПодтверждениеНаПротоколПроверки, если табличное
	// поле показывает циклы обмена по ОбращениеНП и нет ни одного результата приема
	// или извещения о его получении
	Если НаличиеКолонокСообщений["ПротоколПроверки"] = Истина И НаличиеКолонокСообщений["ПодтверждениеНаПротоколПроверки"] = Истина Тогда
		ВидимостьКолонок = Ложь;
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если ОформлениеСтроки.ДанныеСтроки = Неопределено
			ИЛИ ОформлениеСтроки.ДанныеСтроки.Тип <> Перечисления.ТипыЦикловОбмена.ОбращениеНП
			ИЛИ ОформлениеСтроки.Ячейки.ПротоколПроверки.Картинка <> СерыйШар
			ИЛИ ОформлениеСтроки.Ячейки.ПодтверждениеНаПротоколПроверки.Картинка <> СерыйШар Тогда
				ВидимостьКолонок = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Элемент.Колонки.ПротоколПроверки.Видимость = ВидимостьКолонок;
		Элемент.Колонки.ПодтверждениеНаПротоколПроверки.Видимость = ВидимостьКолонок;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка) Экспорт
	
	ИмяКолонки = Колонка.Имя;
	Если ИмяКолонки = "ПервичноеСообщение" ИЛИ ИмяКолонки = "ПодтверждениеОтправки" ИЛИ ИмяКолонки = "ОтветНаПодтверждениеОтправки"
	ИЛИ ИмяКолонки = "ПодтверждениеДоставки" ИЛИ ИмяКолонки = "ПротоколПроверки" ИЛИ ИмяКолонки = "ПодтверждениеНаПротоколПроверки"
	ИЛИ ИмяКолонки = "ОтветНаЗапрос" ИЛИ ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ТипСообщенияДляПоказа = Неопределено;
		Если ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
			Если ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО;
			ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН;
			ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН;
			ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
			Если ВыбраннаяСтрока.Ссылка.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
				Если ИмяКолонки = "ПервичноеСообщение" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
				ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
				ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
				ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО;
				ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО;
				ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
				ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО;
				ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
				КонецЕсли;
			Иначе
				Если ИмяКолонки = "ПервичноеСообщение" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность;
				ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности;
				ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности;
				ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности;
				ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности;
				ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
					ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности;
				ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
					ТипСообщенияДляПоказа = Новый Массив;
					ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО);
					ТипСообщенияДляПоказа.Добавить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			КонецЕсли;
		ИначеЕсли ВыбраннаяСтрока.Ссылка.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			Если ИмяКолонки = "ПервичноеСообщение" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
			ИначеЕсли ИмяКолонки = "ОтветНаПодтверждениеОтправки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
			ИначеЕсли ИмяКолонки = "ПодтверждениеДоставки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО;
			ИначеЕсли ИмяКолонки = "ПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО;
			ИначеЕсли ИмяКолонки = "ПодтверждениеНаПротоколПроверки" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
			ИначеЕсли ИмяКолонки = "ОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО;
			ИначеЕсли ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
				ТипСообщенияДляПоказа = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипСообщенияДляПоказа <> Неопределено Тогда
			ПоказатьСообщение(ВыбраннаяСтрока.Ссылка, ТипСообщенияДляПоказа);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// АВТОМАТИЧЕСКИЙ ОБМЕН
//

Процедура ОбработчикАвтообмена() Экспорт
	
	УчетныеЗаписиДляОбмена = Новый Массив;
	Для Каждого Стр Из ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота Цикл
		Стр.ТекущийСчетчик = Стр.ТекущийСчетчик + 1;
		Если Стр.ТекущийСчетчик >= Стр.ИнтервалАвтообмена Тогда
			Стр.ТекущийСчетчик = 0;
			УчетныеЗаписиДляОбмена.Добавить(Стр.УчетнаяЗапись);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УчетнаяЗаписьДляОбмена Из УчетныеЗаписиДляОбмена Цикл
		ОсуществитьОбменСНалоговымОрганом(УчетнаяЗаписьДляОбмена, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьТаблицуАвтообменаПоУчетнымЗаписямНалогоплательщика(УчетнаяЗапись) Экспорт
	
	Если РольДоступна("ПолныеПрава") ИЛИ РольДоступна("ПравоНаЗащищенныйДокументооборотСКонтролирующимиОрганами")
	ИЛИ (Метаданные.Роли.Найти("ПравоГлавногоБухгалтера") <> Неопределено И РольДоступна("ПравоГлавногоБухгалтера")) Тогда
	
		УчетныеЗаписиИИнтервалыАвтообмена = Новый Соответствие;
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	НастройкиПользователейУчетныхЗаписейДокументооборота.УчетнаяЗапись,
		                      |	НастройкиПользователейУчетныхЗаписейДокументооборота.ИнтервалАвтообмена,
		                      |	0 КАК ТекущийСчетчик
		                      |ИЗ
		                      |	РегистрСведений.НастройкиПользователейУчетныхЗаписейДокументооборота КАК НастройкиПользователейУчетныхЗаписейДокументооборота
		                      |ГДЕ
		                      |	НастройкиПользователейУчетныхЗаписейДокументооборота.ИнтервалАвтообмена <> &ИнтервалАвтообмена
		                      |	И НастройкиПользователейУчетныхЗаписейДокументооборота.Пользователь = &Пользователь
		                      |	И НастройкиПользователейУчетныхЗаписейДокументооборота.УчетнаяЗапись.ПометкаУдаления = &ПометкаУдаления
		                      |	И НастройкиПользователейУчетныхЗаписейДокументооборота.УчетнаяЗапись В(&УчетныеЗаписиПользователя)");
		Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			Запрос.Текст = Запрос.Текст + "
							  |	И НастройкиПользователейУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись";
			Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
		КонецЕсли;
		Запрос.УстановитьПараметр("ИнтервалАвтообмена", 0);
		Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
		Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
		Запрос.УстановитьПараметр("УчетныеЗаписиПользователя", ПараметрыСеанса.ТекущиеУчетныеЗаписиНалогоплательщика);
		РезультатЗапроса = Запрос.Выполнить();
		Если ТипЗнч(ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота) <> Тип("ТаблицаЗначений") ИЛИ НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота = РезультатЗапроса.Выгрузить();
			ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Индексы.Добавить("УчетнаяЗапись");
		Иначе
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				Стр = ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Найти(Выборка.УчетнаяЗапись, "УчетнаяЗапись");
				Если Стр = Неопределено Тогда
					Стр = ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Стр, Выборка);
			КонецЦикла;
			Выборка.Сбросить();
			Если ЗначениеЗаполнено(УчетнаяЗапись) И НЕ Выборка.НайтиСледующий(УчетнаяЗапись, "УчетнаяЗапись") Тогда
				РезультатПоиска = ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Найти(УчетнаяЗапись, "УчетнаяЗапись");
				Если РезультатПоиска <> Неопределено Тогда
					ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Удалить(РезультатПоиска);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Очистить();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодключитьОбработчикАвтообменаСНалоговымиОрганами(УчетнаяЗапись = Неопределено) Экспорт
	
	ОтключитьОбработчикОжидания("ОбработчикАвтообменаСНалоговымиОрганами");
	ИнициализироватьТаблицуАвтообменаПоУчетнымЗаписямНалогоплательщика(УчетнаяЗапись);
	Если ТаблицаАвтообменаПоУчетнымЗаписямДокументооборота.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ОбработчикАвтообменаСНалоговымиОрганами", 60);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИнтервалАвтообмена(УчетнаяЗапись, Пользователь = Неопределено) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	НастройкиПользователейУчетныхЗаписейДокументооборота.ИнтервалАвтообмена
	                      |ИЗ
	                      |	РегистрСведений.НастройкиПользователейУчетныхЗаписейДокументооборота КАК НастройкиПользователейУчетныхЗаписейДокументооборота
	                      |ГДЕ
	                      |	НастройкиПользователейУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И НастройкиПользователейУчетныхЗаписейДокументооборота.Пользователь = &Пользователь");
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("Пользователь", ?(Пользователь = Неопределено, глЗначениеПеременной("глТекущийПользователь"), Пользователь));
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Получить(0);
	КонецЕсли;
	
КонецФункции

Функция УстановитьИнтервалАвтообмена(УчетнаяЗапись, Пользователь = Неопределено, ИнтервалАвтообмена) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.НастройкиПользователейУчетныхЗаписейДокументооборота.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗапись;
	МенеджерЗаписи.Пользователь = ?(Пользователь = Неопределено, глЗначениеПеременной("глТекущийПользователь"), Пользователь);
	МенеджерЗаписи.ИнтервалАвтообмена = ИнтервалАвтообмена;
	Попытка
		МенеджерЗаписи.Записать(Истина);
		Возврат Истина;
	Исключение
		Сообщить("Невозможно записать настройку автоматического обмена с налоговыми органами:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура ПоказатьКритическиеОшибкиЦиклаОбмена(ЦиклОбмена) Экспорт
	
	ТипыОшибок = Новый Массив;
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка);
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР);
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС);
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 2
	                      |	ТранспортноеСообщение.Ссылка
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                      |ГДЕ
	                      |	ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И ТранспортноеСообщение.Тип В (&Тип)");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	Запрос.УстановитьПараметр("Тип", ТипыОшибок);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Сообщение = Выборка.Ссылка;
		Если НЕ Выборка.Следующий() Тогда
			ОткрытьЗначение(Сообщение);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаСписка = Документы.ТранспортноеСообщение.ПолучитьФормуСписка();
	ФормаСписка.Отбор.Сбросить();
	ФормаСписка.Отбор.ЦиклОбмена.Установить(ЦиклОбмена);
	ФормаСписка.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	ФормаСписка.Отбор.Тип.Значение.ЗагрузитьЗначения(ТипыОшибок);
	ФормаСписка.Отбор.Тип.Использование = Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

Функция УчетнаяЗаписьНастроенаВерно(Знач УчетнаяЗапись, УпрощеннаяПроверкаСертификатов = Истина) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		УчетнаяЗапись = УчетнаяЗаписьОрганизации(УчетнаяЗапись);
	КонецЕсли;
	
	Если УчетнаяЗапись = Неопределено ИЛИ УчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// определяем результирующую структуру
	СвойстваУчетнойЗаписи = Новый Структура("Наименование, АдресЭлектроннойПочты, ОбменНапрямую, " +
											"ИмяПользователяPOP3, ПарольPOP3, СерверPOP3, ИмяПользователяSMTP, ПарольSMTP, СерверSMTP, ТребуетсяSMTPАутентификация, " +
											"НалоговыйОрган, СерверДокументооборота, СертификатРуководителя, СертификатГлавногоБухгалтера, СертификатДляШифрования, " +
											"НалоговыйОрганАдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками, НалоговыйОрганСертификат, НалоговыйОрганКод, НалоговыйОрганНаименование, НалоговыйОрганПредставление, " +
											"СерверДокументооборотаПредставление, СерверДокументооборотаСертификат, СерверДокументооборотаАдресЭлектроннойПочтыФНС, СерверДокументооборотаАдресЭлектроннойПочтыПФР, " +
											"ПредназначенаДляДокументооборотаСФНС, ПредназначенаДляДокументооборотаСПФР, " +
											"ИдентификаторСпецоператора, ИдентификаторАбонента");
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникОбъект.УчетныеЗаписиДокументооборота") Тогда
		
		// заполняем свойства из объекта
		ЗаполнитьЗначенияСвойств(СвойстваУчетнойЗаписи, УчетнаяЗапись);
		
		ЗапросРеквизитыПоСсылкам = Новый Запрос("ВЫБРАТЬ
		                                        |	"""" КАК ИД,
		                                        |	"""" КАК Код,
		                                        |	"""" КАК Наименование,
		                                        |	"""" КАК Представление,
		                                        |	"""" КАК Сертификат,
		                                        |	"""" КАК Адрес1,
		                                        |	"""" КАК Адрес2");
		
		Если ЗначениеЗаполнено(УчетнаяЗапись.НалоговыйОрган) Тогда
			
			ЗапросРеквизитыПоСсылкам.Текст = ЗапросРеквизитыПоСсылкам.Текст + "
			                                        |
			                                        |ОБЪЕДИНИТЬ ВСЕ
			                                        |
			                                        |ВЫБРАТЬ
			                                        |	&ИДНалоговыйОрган,
			                                        |	НалоговыеОрганы.Код,
			                                        |	НалоговыеОрганы.Наименование,
			                                        |	НалоговыеОрганы.Представление,
			                                        |	"""",
			                                        |	НалоговыеОрганы.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками,
			                                        |	""""
			                                        |ИЗ
			                                        |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы
			                                        |ГДЕ
			                                        |	НалоговыеОрганы.Ссылка = &НалоговыйОрган";
			ЗапросРеквизитыПоСсылкам.УстановитьПараметр("ИДНалоговыйОрган", "НалоговыйОрган");
			ЗапросРеквизитыПоСсылкам.УстановитьПараметр("НалоговыйОрган", УчетнаяЗапись.НалоговыйОрган);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УчетнаяЗапись.СерверДокументооборота) Тогда
			
			ЗапросРеквизитыПоСсылкам.Текст = ЗапросРеквизитыПоСсылкам.Текст + "
			                                        |
			                                        |ОБЪЕДИНИТЬ ВСЕ
			                                        |
			                                        |ВЫБРАТЬ
			                                        |	&ИДСерверДокументооборота,
			                                        |	"""",
			                                        |	"""",
			                                        |	СерверыДокументооборота.Представление,
			                                        |	СерверыДокументооборота.Сертификат,
			                                        |	СерверыДокументооборота.АдресЭлектроннойПочтыФНС,
			                                        |	СерверыДокументооборота.АдресЭлектроннойПочтыПФР
			                                        |ИЗ
			                                        |	Справочник.СерверыДокументооборота КАК СерверыДокументооборота
			                                        |ГДЕ
			                                        |	СерверыДокументооборота.Ссылка = &СерверДокументооборота";
			ЗапросРеквизитыПоСсылкам.УстановитьПараметр("ИДСерверДокументооборота", "СерверДокументооборота");
			ЗапросРеквизитыПоСсылкам.УстановитьПараметр("СерверДокументооборота", УчетнаяЗапись.СерверДокументооборота);
			
		КонецЕсли;
		
		Выборка = ЗапросРеквизитыПоСсылкам.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ИД = Выборка.ИД;
			Если ИД = "НалоговыйОрган" Тогда
				СвойстваУчетнойЗаписи.НалоговыйОрганКод = Выборка.Код;
				СвойстваУчетнойЗаписи.НалоговыйОрганНаименование = Выборка.Наименование;
				СвойстваУчетнойЗаписи.НалоговыйОрганПредставление = Выборка.Представление;
				СвойстваУчетнойЗаписи.НалоговыйОрганАдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками = Выборка.Адрес1;
			ИначеЕсли ИД = "СерверДокументооборота" Тогда
				СвойстваУчетнойЗаписи.СерверДокументооборотаПредставление = Выборка.Представление;
				СвойстваУчетнойЗаписи.СерверДокументооборотаСертификат = Выборка.Сертификат;
				СвойстваУчетнойЗаписи.СерверДокументооборотаАдресЭлектроннойПочтыФНС = Выборка.Адрес1;
				СвойстваУчетнойЗаписи.СерверДокументооборотаАдресЭлектроннойПочтыПФР = Выборка.Адрес2;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	УчетныеЗаписиДокументооборота.Наименование,
		                      |	УчетныеЗаписиДокументооборота.ОбменНапрямую,
		                      |	УчетныеЗаписиДокументооборота.ИмяПользователяPOP3,
		                      |	УчетныеЗаписиДокументооборота.ПарольPOP3,
		                      |	УчетныеЗаписиДокументооборота.СерверPOP3,
		                      |	УчетныеЗаписиДокументооборота.ИмяПользователяSMTP,
		                      |	УчетныеЗаписиДокументооборота.ПарольSMTP,
		                      |	УчетныеЗаписиДокументооборота.СерверSMTP,
		                      |	УчетныеЗаписиДокументооборота.ТребуетсяSMTPАутентификация,
		                      |	УчетныеЗаписиДокументооборота.АдресЭлектроннойПочты,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота,
		                      |	УчетныеЗаписиДокументооборота.СертификатРуководителя,
		                      |	УчетныеЗаписиДокументооборота.СертификатГлавногоБухгалтера,
		                      |	УчетныеЗаписиДокументооборота.СертификатДляШифрования,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР,
		                      |	УчетныеЗаписиДокументооборота.ИдентификаторАбонента,
		                      |	УчетныеЗаписиДокументооборота.ИдентификаторСпецоператора,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Представление,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Код,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Наименование,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.Представление КАК СерверДокументооборотаПредставление,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.АдресЭлектроннойПочтыФНС КАК СерверДокументооборотаАдресЭлектроннойПочтыФНС,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.АдресЭлектроннойПочтыПФР КАК СерверДокументооборотаАдресЭлектроннойПочтыПФР,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.Сертификат КАК СерверДокументооборотаСертификат
		                      |ИЗ
		                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		                      |ГДЕ
		                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Сообщить("Не удалось извлечь из информационной базы информацию об учетной записи """ + УчетнаяЗапись + """!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СвойстваУчетнойЗаписи, Выборка);
		
	КонецЕсли;
	
	ПризнакОшибки = Ложь;
	
	// проверяем адрес электронной почты учетной записи
	Если ПустаяСтрока(СвойстваУчетнойЗаписи.АдресЭлектроннойПочты) Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан адрес электронной почты!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	// проверяем параметры доступа к учетной записи на сервере документооборота
	Если ПустаяСтрока(СвойстваУчетнойЗаписи.ИмяПользователяPOP3) Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задано имя пользователя для доступа по протоколу POP3!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(СвойстваУчетнойЗаписи.ПарольPOP3) Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан пароль для доступа по протоколу POP3!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(СвойстваУчетнойЗаписи.СерверPOP3) Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан адрес сервера POP3!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если СвойстваУчетнойЗаписи.ТребуетсяSMTPАутентификация Тогда
	
		Если ПустаяСтрока(СвойстваУчетнойЗаписи.ИмяПользователяSMTP) Тогда
			Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ требуется SMTP-аутентификация, но не задано имя пользователя для доступа по протоколу SMTP!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(СвойстваУчетнойЗаписи.ПарольSMTP) Тогда
			Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ требуется SMTP-аутентификация, но не задан пароль для доступа по протоколу SMTP!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// проверяем свойства налогового органа
	Если СвойстваУчетнойЗаписи.ПредназначенаДляДокументооборотаСФНС Тогда
		
		Если ТекущаяДата() >= ДатаПереходаНа534 Тогда
			//Если НЕ СвойстваУчетнойЗаписи.ОбменНапрямую И НЕ ЗначениеЗаполнено(СвойстваУчетнойЗаписи.ИдентификаторСпецоператора) Тогда
			//	Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан идентификатор спецоператора!", СтатусСообщения.Важное);
			//	ПризнакОшибки = Истина;
			//КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СвойстваУчетнойЗаписи.ИдентификаторАбонента) Тогда
				Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан идентификатор абонента!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СвойстваУчетнойЗаписи.НалоговыйОрган.Пустая() Тогда
			Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан налоговый орган!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
			
		Иначе
			
			Если ПустаяСтрока(СвойстваУчетнойЗаписи.НалоговыйОрганКод) Тогда
				Сообщить("Для налогового органа """ + СокрЛП(СвойстваУчетнойЗаписи.НалоговыйОрганПредставление)+ """, сопоставленного учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """, не задан код!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
			
			Если СвойстваУчетнойЗаписи.ОбменНапрямую И ПустаяСтрока(СвойстваУчетнойЗаписи.НалоговыйОрганАдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками) Тогда
				Сообщить("Для налогового органа """ + СокрЛП(СвойстваУчетнойЗаписи.НалоговыйОрганПредставление)+ """, сопоставленного учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """, не задан адрес электронной почты для целей обмена!", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// проверяем свойства сервера документооборота
	Если СвойстваУчетнойЗаписи.СерверДокументооборота.Пустая() Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан сервер документооборота!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	Иначе
		
		Если СвойстваУчетнойЗаписи.ПредназначенаДляДокументооборотаСФНС И ПустаяСтрока(СвойстваУчетнойЗаписи.СерверДокументооборотаСертификат) Тогда
			Сообщить("Для сервера документооборота """ + СокрЛП(СвойстваУчетнойЗаписи.СерверДокументооборотаПредставление)+ """, сопоставленного учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """, не задан цифровой сертификат!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
		Если СвойстваУчетнойЗаписи.ПредназначенаДляДокументооборотаСФНС И ПустаяСтрока(СвойстваУчетнойЗаписи.СерверДокументооборотаАдресЭлектроннойПочтыФНС) Тогда
			Сообщить("Для сервера документооборота """ + СокрЛП(СвойстваУчетнойЗаписи.СерверДокументооборотаПредставление)+ """, сопоставленного учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """, не задан адрес электронной почты для целей обмена с ФНС!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
		Если СвойстваУчетнойЗаписи.ПредназначенаДляДокументооборотаСПФР И ПустаяСтрока(СвойстваУчетнойЗаписи.СерверДокументооборотаАдресЭлектроннойПочтыПФР) Тогда
			Сообщить("Для сервера документооборота """ + СокрЛП(СвойстваУчетнойЗаписи.СерверДокументооборотаПредставление)+ """, сопоставленного учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """, не задан адрес электронной почты для целей обмена с ПФР!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(СвойстваУчетнойЗаписи.СертификатРуководителя) Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан сертификат руководителя!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(СвойстваУчетнойЗаписи.СертификатДляШифрования) Тогда
		Сообщить("Для учетной записи """ + СокрЛП(СвойстваУчетнойЗаписи.Наименование) + """ не задан сертификат для целей шифрования!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// ПРОВЕРКА ВОЗМОЖНОСТИ ИСПОЛЬЗОВАНИЯ ЦИФРОВЫХ СЕРТИФИКАТОВ,
	// СВЯЗАННЫХ С УЧЕТНОЙ ЗАПИСЬЮ
	//
	
	Если НЕ УпрощеннаяПроверкаСертификатов Тогда
	
		Крипт = СоздатьОбъектДляРаботыСКриптографией();
		Если Крипт = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		СертификатыИИхСвойства = Новый ТаблицаЗначений;
		СертификатыИИхСвойства.Колонки.Добавить("Тип");
		СертификатыИИхСвойства.Колонки.Добавить("Отпечаток");
		СертификатыИИхСвойства.Колонки.Добавить("Отпечаток64");
		СертификатыИИхСвойства.Колонки.Добавить("Поставщик");
		СертификатыИИхСвойства.Колонки.Добавить("СерийныйНомер");
		СертификатыИИхСвойства.Колонки.Добавить("ДействителенС");
		СертификатыИИхСвойства.Колонки.Добавить("ДействителенПо");
		
		// Преобразовываем все отпечатки к виду Base64.
		Если НЕ ПустаяСтрока(СвойстваУчетнойЗаписи.СертификатРуководителя) Тогда
			ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, СвойстваУчетнойЗаписи.СертификатРуководителя);
			ДвДанные.Позиция = 0;
			НовСтр = СертификатыИИхСвойства.Добавить();
			НовСтр.Тип = "Руководитель";
			НовСтр.Отпечаток = СвойстваУчетнойЗаписи.СертификатРуководителя;
			НовСтр.Отпечаток64 = СокрЛП(ДвДанные.ПолучитьСтрокуBase64(20));
		КонецЕсли;
		
		Если СвойстваУчетнойЗаписи.ПредназначенаДляДокументооборотаСФНС И НЕ ПустаяСтрока(СвойстваУчетнойЗаписи.СертификатГлавногоБухгалтера) Тогда
			ДвДанные.Очистить();
			ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, СвойстваУчетнойЗаписи.СертификатГлавногоБухгалтера);
			ДвДанные.Позиция = 0;
			НовСтр = СертификатыИИхСвойства.Добавить();
			НовСтр.Тип = "Главный бухгалтер";
			НовСтр.Отпечаток = СвойстваУчетнойЗаписи.СертификатГлавногоБухгалтера;
			НовСтр.Отпечаток64 = СокрЛП(ДвДанные.ПолучитьСтрокуBase64(20));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СвойстваУчетнойЗаписи.СертификатДляШифрования) Тогда
			ДвДанные.Очистить();
			ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, СвойстваУчетнойЗаписи.СертификатДляШифрования);
			ДвДанные.Позиция = 0;
			НовСтр = СертификатыИИхСвойства.Добавить();
			НовСтр.Тип = "Для шифрования";
			НовСтр.Отпечаток = СвойстваУчетнойЗаписи.СертификатДляШифрования;
			НовСтр.Отпечаток64 = СокрЛП(ДвДанные.ПолучитьСтрокуBase64(20));
		КонецЕсли;
		
		// Получаем прочие свойства сертификатов из системного хранилища.
		Пока Крипт.ПолучитьСледующийСертификат("MY") Цикл
			Отпечаток64 = СокрЛП(Крипт.Отпечаток);
			СертификатыСТемЖеОтпечатком = СертификатыИИхСвойства.НайтиСтроки(Новый Структура("Отпечаток64", Отпечаток64));
			Для Каждого Серт Из СертификатыСТемЖеОтпечатком Цикл
				Серт.Поставщик = Крипт.Поставщик;
				Серт.СерийныйНомер = Крипт.СерийныйНомер;
				Серт.ДействителенС = Крипт.ДействителенС;
				Серт.ДействителенПо = Крипт.ДействителенДо;
			КонецЦикла;
		КонецЦикла;
		
		// Проверяем, для всех ли сертификатов получены свойства.
		ТекДата = ТекущаяДата();
		Для Каждого Серт Из СертификатыИИхСвойства Цикл
			
			Если Серт.Тип = "Руководитель" Тогда
				ПользовательскоеПредставлениеТип = "Сертификат руководителя";
			ИначеЕсли Серт.Тип = "Главный бухгалтер" Тогда
				ПользовательскоеПредставлениеТип = "Сертификат главного бухгалтера";
			ИначеЕсли Серт.Тип = "Для шифрования" Тогда
				ПользовательскоеПредставлениеТип = "Сертификат для шифрования";
			КонецЕсли;
			
			Если ПустаяСтрока(Серт.Поставщик) ИЛИ ПустаяСтрока(Серт.СерийныйНомер) Тогда
				ПризнакОшибки = Истина;
				Сообщить(ПользовательскоеПредставлениеТип + ", сопоставленный учетной записи """ + УчетнаяЗапись + """, не зарегистрирован в хранилище ""Личные""!", СтатусСообщения.Важное);
			ИначеЕсли ТекДата < Серт.ДействителенС Тогда
				ПризнакОшибки = Истина;
				Сообщить(ПользовательскоеПредставлениеТип + ", сопоставленный учетной записи """ + УчетнаяЗапись + """: период действия сертификата еще не наступил (" + Серт.ДействителенС + ")!", СтатусСообщения.Важное);
			ИначеЕсли ТекДата > Серт.ДействителенПо Тогда
				ПризнакОшибки = Истина;
				Сообщить(ПользовательскоеПредставлениеТип + ", сопоставленный учетной записи """ + УчетнаяЗапись + """: период действия сертификата истек (" + Серт.ДействителенПо + ")!", СтатусСообщения.Важное);
			Иначе
				Попытка
					Если НЕ Крипт.ПроверитьСертификат(Серт.СерийныйНомер, Серт.Поставщик, , ) Тогда
						ПризнакОшибки = Истина;
						Сообщить(ПользовательскоеПредставлениеТип + ", сопоставленный учетной записи """ + УчетнаяЗапись + """, не валиден!", СтатусСообщения.Важное);
					КонецЕсли;
				Исключение
					ПризнакОшибки = Истина;
					Сообщить(ПользовательскоеПредставлениеТип + ", сопоставленный учетной записи """ + УчетнаяЗапись + """: не удалось проверить валидность сертификата!", СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат (НЕ ПризнакОшибки);
	
КонецФункции

Функция ВыбратьОрганизации(НачальноеЗначение, МножественныйВыбор = Истина) Экспорт
	
	ФормаВыбораОрганизаций = ПолучитьФорму("ВыборОрганизацииОбмена", , Новый УникальныйИдентификатор);
	ФормаВыбораОрганизаций.МножественныйВыбор = МножественныйВыбор;
	ФормаВыбораОрганизаций.НачальноеЗначениеВыбора = НачальноеЗначение;
	Возврат ФормаВыбораОрганизаций.ОткрытьМодально();
	
КонецФункции

Процедура ПоказатьОтветНаЗапрос(ЦиклОбмена) Экспорт
	
	// !!! ответ на запрос в формате XML должен показываться в удобочитаемом виде
	//ОтветНаЗапросСообщение = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН);
	
	// получаем список сообщений с ответами на запрос по заданному циклу обмена
	// если ответов больше одного, то предлагаем выбрать сообщения для показа
	ОтветыНаЗапросСообщение = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН);
	Если ОтветыНаЗапросСообщение.Количество() = 0 Тогда
		ОтветыНаЗапросСообщение = ПолучитьСообщенияЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО);
	КонецЕсли;
	
	КоличествоОтветов = ОтветыНаЗапросСообщение.Количество();
	Если КоличествоОтветов = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоОтветов > 1 Тогда
		СписокОтветовНаЗапрос = Новый СписокЗначений;
		Для Каждого ОтветНаЗапрос Из ОтветыНаЗапросСообщение Цикл
			СписокОтветовНаЗапрос.Добавить(ОтветНаЗапрос, ПредставлениеСообщения(ОтветНаЗапрос.Ссылка), Истина);
		КонецЦикла;
		Если НЕ СписокОтветовНаЗапрос.ОтметитьЭлементы("Выберите ответы") Тогда
			Возврат;
		КонецЕсли;
		Для Каждого ЭлементСписка Из СписокОтветовНаЗапрос Цикл
			Если НЕ ЭлементСписка.Пометка Тогда
				ОтветыНаЗапросСообщение.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ДИВ из каждого из сообщений с ответами выгружаем во временный каталог и открываем
	Для Каждого ОтветНаЗапрос Из ОтветыНаЗапросСообщение Цикл
		
		ВложенияОтвета = ПолучитьВложенияТранспортногоСообщения(ОтветНаЗапрос.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
		Если ВложенияОтвета.Количество() = 0 Тогда
			ВложенияОтвета = ПолучитьВложенияТранспортногоСообщения(ОтветНаЗапрос.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
		КонецЕсли;
		
		Если ВложенияОтвета.Количество() > 0 Тогда
			
			ВложениеОтвета = ВложенияОтвета[0];
			ВложениеОтветаДанные = ВложениеОтвета.Данные;
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(ВложениеОтвета.ИмяФайла);
			ВложениеОтветаДанные.Получить().Записать(ИмяВременногоФайла);
			
			Если ОтветНаЗапрос.Ссылка.ПротоколСОшибкой Тогда
				ПоказатьОтказВОбслуживанииИзФайла(ИмяВременногоФайла, ВложениеОтвета.ИмяФайла);
			Иначе
				Попытка
					ЗапуститьПриложение(ИмяВременногоФайла);
				Исключение
					Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьОтказВОбслуживанииИзФайла(ИмяФайлаНаДиске, ИмяФайла) Экспорт
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайлаНаДиске);
	ОтказТекст = ОбъектЧтение.ПрочитатьСтроку();
	ОбъектЧтение.Закрыть();
	
	ПоказатьОтказВОбслуживании(ИмяФайла, ОтказТекст);
	
КонецПроцедуры

Процедура ПоказатьОтказВОбслуживании(ИмяФайлаОтказа, ТекстОтказа) Экспорт
	
	ФормаПросмотрОтказаВОбслуживании = ПолучитьФорму("ПросмотрОтказаИОН");
	ФормаПросмотрОтказаВОбслуживании.ИмяФайлаОтказа = ИмяФайлаОтказа;
	ФормаПросмотрОтказаВОбслуживании.ТекстОтказа = ТекстОтказа;
	ФормаПросмотрОтказаВОбслуживании.Открыть();
	
КонецПроцедуры

Функция ВопросПредупреждение(ОсновнойТекст, ТекстПереключатель1, ТекстПереключатель2) Экспорт
	
	ФормаВопроса = ПолучитьФорму("ВопросПредупреждение", , Новый УникальныйИдентификатор);
	ФормаВопроса.ОсновнойТекст = ОсновнойТекст;
	ФормаВопроса.ЭлементыФормы.ПереключательСогласен.Заголовок = ТекстПереключатель1;
	ФормаВопроса.ЭлементыФормы.ПереключательСогласен2.Заголовок = ТекстПереключатель2;
	Возврат (ФормаВопроса.ОткрытьМодально() = КодВозвратаДиалога.Да);
	
КонецФункции

Функция ТекущийПользовательЯвляетсяАдминистраторомУчетныхЗаписейДокументооборота() Экспорт
	
	Возврат РольДоступна("ПолныеПрава");
	
КонецФункции

Функция СформироватьИмяФайла(ИсходноеИмяФайла) Экспорт
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// АВТОМАТИЧЕСКАЯ НАСТРОЙКА ПАРАМЕТРОВ УЧЕТНОЙ ЗАПИСИ (ПОДДЕРЖКА РОКИ)
//

Функция АвтоматическаяНастройкаУчетнойЗаписи(Знач УчетнаяЗапись,
											Организация = Неопределено,
											ЗапрашиватьПодтверждениеОПрименении = Неопределено,
											УведомлятьТолькоОбОшибках = Ложь,
											ИгнорироватьРежимАвтонастройки = Ложь,
											ТихийРежим = Ложь,
											ЗапрашиватьПараметрыОрганизацииПриНеобходимости = Ложь) Экспорт
	
	ТаблицаИсправлений = ПолучитьНастройкиУчетнойЗаписиССервера(УчетнаяЗапись,
											Организация,
											УведомлятьТолькоОбОшибках,
											ИгнорироватьРежимАвтонастройки,
											ТихийРежим,
											ЗапрашиватьПараметрыОрганизацииПриНеобходимости);
											
	Если ТаблицаИсправлений = Неопределено ИЛИ ТаблицаИсправлений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПрименитьИзмененныеНастройки(УчетнаяЗапись,
											ТаблицаИсправлений,
											ЗапрашиватьПодтверждениеОПрименении,
											УведомлятьТолькоОбОшибках);
	
КонецФункции

Функция АвтонастройкаНовойУчетнойЗаписи(УчетнаяЗаписьОбъект) Экспорт
	
	УчетнаяЗаписьОбъект.УстановитьСсылкуНового(Справочники[УчетнаяЗаписьОбъект.Метаданные().Имя].ПолучитьСсылку());
	
	Ответ = Вопрос("В ходе автоматической настройки информация об учетной записи и
					|связанных объектах будет записана в информационную базу.
					|
					|Продолжить?", РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыОрганизации = Неопределено;
	Результат = АвтоматическаяНастройкаУчетнойЗаписи(УчетнаяЗаписьОбъект, ПараметрыОрганизации, Ложь, Истина, Истина, , Истина);
	Если Результат = Неопределено Тогда
		Предупреждение("Учетная запись уже настроена верно!");
		Возврат Неопределено;
	ИначеЕсли НЕ Результат Тогда
		//Предупреждение("Ошибка автоматической настройки учетной записи.
		//				|Подробная информация приведена в окне сообщений.");
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОрганизации) <> Тип("СправочникСсылка.Организации") Тогда
		Ответ = Вопрос("Произведена автоматическая настройка параметров учетной записи.
						|Сопоставить настроенную учетную запись организации?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
		РезультатВыбора = Справочники.Организации.ПолучитьФормуВыбора().ОткрытьМодально();
		Если НЕ ЗначениеЗаполнено(РезультатВыбора) Тогда
			Возврат Истина;
		КонецЕсли;
		Организация = РезультатВыбора;
	Иначе
		Организация = ПараметрыОрганизации;
		ТекстВопроса = "Произведена автоматическая настройка параметров учетной записи.
						|Сопоставить настроенную учетную запись организации """ + Организация + """?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Организация.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
	И ЗначениеЗаполнено(Организация.УчетнаяЗаписьОбмена) Тогда
		ТекстВопроса = "В настоящее время организации """ + Организация + """ сопоставлена учетная запись """ + Организация.УчетнаяЗаписьОбмена + """.
						|Продолжить сопоставление с новой учетной записью?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОрганизацияОбъект = Организация.ПолучитьОбъект();
	ОрганизацияОбъект.УчетнаяЗаписьОбмена = УчетнаяЗаписьОбъект.Ссылка;
	ОрганизацияОбъект.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате;
	Попытка
		ОрганизацияОбъект.Записать();
	Исключение
		Сообщить("Не удалось сопоставить организации """ + Организация + """ учетную запись """ + УчетнаяЗаписьОбъект.Ссылка + """:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Истина;
	КонецПопытки;
	ОрганизацияОбъект.ПолучитьФорму().Открыть();
	Возврат Истина;
	
КонецФункции

Функция ПолучитьФайлНастроекУчетнойЗаписиССервераРОКИСУчетомКэша(Знач УчетнаяЗапись,
																Знач Организация = Неопределено,
																УведомлятьТолькоОбОшибках = Ложь,
																ИгнорироватьРежимАвтонастройки = Ложь,
																ТихийРежим = Ложь,
																ЗапрашиватьПараметрыОрганизацииПриНеобходимости = Ложь) Экспорт
	
	// учетной записью может оказаться организация
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
		Если УчетнаяЗапись.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			Возврат Неопределено;
		КонецЕсли;
		Организация = УчетнаяЗапись;
		УчетнаяЗапись = Организация.УчетнаяЗаписьОбмена;
	КонецЕсли;
	
	// получаем настройки учетной записи
	НастройкиУчетнойЗаписи = ПолучитьНастройкиУчетнойЗаписиИзИБ(УчетнаяЗапись);
	
	// если настройки недоступны или учетка для обмена напрямую, то прервемся
	Если НастройкиУчетнойЗаписи = Неопределено ИЛИ НастройкиУчетнойЗаписи.ОбменНапрямую Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// если включено принудительное игнорирование режима автонастройки
	// или отключена автонастройка в свойствах учетной записи, то прервемся
	Если НЕ ИгнорироватьРежимАвтонастройки
	И (НастройкиУчетнойЗаписи.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Отключена
	ИЛИ НастройкиУчетнойЗаписи.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.ПустаяСсылка()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// если автонастройка (любая) уже активна, то прервемся
	Если АвтонастройкаАктивна() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем вспомогательную таблицу сообщений
	Сообщения = СоздатьТаблицуСообщений();
	
	// инициализурем переменную, в которой будет храниться указатель на форму с информацией
	ФормаПрогресса = Неопределено;
	
	// соединяемся с сервером
	ПараметрыСоединенияССервером = СформироватьПараметрыСоединенияССервером(УчетнаяЗапись, Организация, ЗапрашиватьПараметрыОрганизацииПриНеобходимости, Сообщения);
	Если ПараметрыСоединенияССервером <> Неопределено Тогда
		
		ФайлНастроекРасшифрован = Ложь;
		ДатаОбновленияФайлаНастроекНаСервере = Неопределено;
		
		Состояние("Соединение с сервером ""ресурсов общей ключевой информации""...");
		Соединение = СоединитьсяССерверомРОКИ(ПараметрыСоединенияССервером, Сообщения);
		Состояние();
		
		// если соединение прошло успешно, то получаем дату обновления файла настроек
		Если Соединение <> Неопределено Тогда
			
			ДатаОбновленияФайлаНастроекНаСервере = ПолучитьДатуОбновленияФайлаНастроекНаСервере(Соединение, ПараметрыСоединенияССервером, Сообщения);
			Если НЕ ЗначениеЗаполнено(ДатаОбновленияФайлаНастроекНаСервере) Тогда
				ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках);
				Возврат Неопределено;
			КонецЕсли;
			
			ФайлНастроек = ПолучитьЗакэшированныйФайлНастроек(УчетнаяЗапись, ПараметрыСоединенияССервером, ДатаОбновленияФайлаНастроекНаСервере, ФайлНастроекРасшифрован, Сообщения);
			
			// если в кэше нет файла с такой датой, то получаем его с сервера
			Если ФайлНастроек = Неопределено Тогда
				
				ИнформацияОбОшибке = Неопределено;
				ФайлНастроек = ПолучитьФайлССервера(Соединение, ПараметрыСоединенияССервером.ИмяРесурсаСНастройками, ИнформацияОбОшибке);
				Соединение = Неопределено;
				ЗакрытьФормуПрогресса(ФормаПрогресса);
				
				Если ФайлНастроек = Неопределено Тогда
					ДобавитьСообщение(Сообщения, "Ошибка получения с сервера файла с информацией о настройках учетной записи:" + Символы.ПС + ИнформацияОбОшибке.Описание);
					ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках);
					Возврат Неопределено;
				КонецЕсли;
				
				// сохраняем полученный файл в кэше
				СохранитьВКэшеФайлНастроек(УчетнаяЗапись, ПараметрыСоединенияССервером.ИмяРесурсаСНастройками, ФайлНастроек, Ложь, ДатаОбновленияФайлаНастроекНаСервере);
				ФайлНастроекРасшифрован = Ложь;
				
			КонецЕсли;
			
			// закрываем соединение
			Соединение = Неопределено;
			
		Иначе
			ФайлНастроек = ПолучитьЗакэшированныйФайлНастроек(УчетнаяЗапись, ПараметрыСоединенияССервером, ДатаОбновленияФайлаНастроекНаСервере, ФайлНастроекРасшифрован, Сообщения);
		КонецЕсли;
		
		Возврат Новый Структура("Файл, Дата, Расшифрован, ИмяРесурса",
						ФайлНастроек, ДатаОбновленияФайлаНастроекНаСервере, ФайлНастроекРасшифрован, ПараметрыСоединенияССервером.ИмяРесурсаСНастройками);
		
	Иначе
		ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках);
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтпечатокСертификатаАбонентаИзФайлаНастроек(ФайлНастроек) Экспорт
	
	// создаем объект для работы с двоичными данными
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		
		// загружаем из файла
		ДвДанные.Прочитать(ФайлНастроек);
		
		// сдвигаемся на длину FileID и отпечатка первого сертификата
		ДвДанные.Позиция = 8 + 20;
		
		// извлекаем длину имени владельца сертификата, с помощью которого были зашифрованы данные
		ДлинаИмениВладельцаСертификата = ДвДанные.ПолучитьЧисло(4);
		
		// сдвигаем на соответствующее число байт
		ДвДанные.Позиция = ДвДанные.Позиция + ДлинаИмениВладельцаСертификата;
		
		// сдвигаем на длину отпечатка
		ДвДанные.Позиция = ДвДанные.Позиция + 4;
		
		// получаем отпечаток сертификата абонента
		ОтпечатокСертификатаАбонента = ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные);
		
		ДвДанные = Неопределено;
		Возврат ОтпечатокСертификатаАбонента;
		
	Исключение
		
		ДвДанные = Неопределено;
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ОтфильтроватьДеревоНастроекПоУчетнойЗаписи(ДеревоНастроек, АдресУчетнойЗаписи)
	
	// находим все узлы с адресами учетных записей абонента
	СтрокиСАдресамиУчетныхЗаписей = ДеревоНастроек.Строки.НайтиСтроки(Новый Структура("Параметр", "emailabsos"), Истина);
	Если СтрокиСАдресамиУчетныхЗаписей.Количество() < 2 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// ищем среди узлов адрес настраиваемой учетной записи
	ИскомыйУзелAbsos = Неопределено;
	Для Каждого СтрокаСАдресомУчетнойЗаписи Из СтрокиСАдресамиУчетныхЗаписей Цикл
		Если СтрокаСАдресомУчетнойЗаписи.Значение = АдресУчетнойЗаписи Тогда
			ИскомыйУзелAbsos = СтрокаСАдресомУчетнойЗаписи.Родитель;
		КонецЕсли;
	КонецЦикла;
	
	// если узел не найден, то предложим пользователю выбрать из нескольких узлов
	Если ИскомыйУзелAbsos = Неопределено Тогда
		
		// формируем список выбора
		СписокВыбора = Новый СписокЗначений;
		Для Каждого СтрокаСАдресомУчетнойЗаписи Из СтрокиСАдресамиУчетныхЗаписей Цикл
			СписокВыбора.Добавить(СтрокаСАдресомУчетнойЗаписи, СтрокаСАдресомУчетнойЗаписи.Значение);
		КонецЦикла;
		
		// предлагаем выбрать
		РезультатВыбора = СписокВыбора.ВыбратьЭлемент("Выберите одну из учетных записей");
		Если РезультатВыбора = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// инициализируем по выбранному узлу узел Absos
		ИскомыйУзелAbsos = РезультатВыбора.Значение.Родитель;
		
	КонецЕсли;
	
	// удаляем все узлы absos, кроме того, по которому будем автонастраивать
	Для Каждого СтрокаСАдресомУчетнойЗаписи Из СтрокиСАдресамиУчетныхЗаписей Цикл
		УзелAbsos = СтрокаСАдресомУчетнойЗаписи.Родитель;
		Если СтрокаСАдресомУчетнойЗаписи.Родитель <> ИскомыйУзелAbsos Тогда
			УзелAbsos.Родитель.Строки.Удалить(УзелAbsos);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьТаблицуИсправленийНаОсновеФайлаНастроек(УчетнаяЗапись = Неопределено, ФайлНастроек, УведомлятьТолькоОбОшибках) Экспорт
	
	Сообщения = СоздатьТаблицуСообщений();
	ФормаПрогресса = Неопределено;
	
	Попытка
		ДеревоНастроек = ВосстановитьXMLВДерево(ФайлНастроек, Сообщения);
		РезультатЗаполнения = Истина;
	Исключение
		РезультатЗаполнения = Ложь;
	КонецПопытки;
	Если НЕ РезультатЗаполнения ИЛИ НЕ ЗначениеЗаполнено(ДеревоНастроек) ИЛИ ДеревоНастроек.Строки.Количество() = 0 Тогда
		ВывестиСообщения(Неопределено, Сообщения, УведомлятьТолькоОбОшибках);
		ЗакрытьФормуПрогресса(ФормаПрогресса);
		Возврат Неопределено;
	КонецЕсли;
	
	//// проверяем подпись на данных файла настроек
	//РезультатПроверки = ПроверитьПодписьВФайлеНастроек(ФайлНастроек, ДеревоНастроек, Сообщения);
	//Если РезультатПроверки = Неопределено Тогда
	//	ЗакрытьФормуПрогресса(ФормаПрогресса);
	//	Возврат Неопределено;
	//ИначеЕсли НЕ РезультатПроверки Тогда
	//	ВывестиСообщения(Неопределено, Сообщения, УведомлятьТолькоОбОшибках);
	//	ЗакрытьФормуПрогресса(ФормаПрогресса);
	//	Возврат Неопределено;
	//КонецЕсли;
	
	// определяем адрес электронной почты настраиваемой учетной записи
	Если УчетнаяЗапись = Неопределено Тогда
		АдресУчетнойЗаписи = "";
	Иначе
		АдресУчетнойЗаписи = СокрЛП(УчетнаяЗапись.АдресЭлектроннойПочты);
	КонецЕсли;
	
	// оставляем только тот узел дерева, который соответствует настраиваемой учетке
	// если настраиваемую учетку определить не удалось, то предлагаем пользователю выбрать
	Если НЕ ОтфильтроватьДеревоНастроекПоУчетнойЗаписи(ДеревоНастроек, АдресУчетнойЗаписи) Тогда
		ЗакрытьФормуПрогресса(ФормаПрогресса);
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем "плоский список" настроек
	НастройкиРОКИ = СформироватьСписокНастроекРОКИПоДеревуНастроекXML(ДеревоНастроек, Сообщения);
	Если НЕ ЗначениеЗаполнено(НастройкиРОКИ) Тогда
		ВывестиСообщения(Неопределено, Сообщения, УведомлятьТолькоОбОшибках);
		ЗакрытьФормуПрогресса(ФормаПрогресса);
		Возврат Неопределено;
	КонецЕсли;
	НастройкиРОКИ.Вставить("СертификатБезопасности", ПолучитьОтпечатокСертификатаБезопасностиРОКИ());
	
	// получаем настройки учетной записи
	НастройкиУчетнойЗаписи = ПолучитьНастройкиУчетнойЗаписиИзИБ(УчетнаяЗапись);
	
	// формируем таблицу исправлений
	ТаблицаИсправлений = ПолучитьТаблицуНеобходимыхИсправлений(НастройкиУчетнойЗаписи, НастройкиРОКИ);
	
	// выводим сообщения ,если они есть, и закрываем форму прогресса
	ВывестиСообщения(Неопределено, Сообщения, УведомлятьТолькоОбОшибках);
	ЗакрытьФормуПрогресса(ФормаПрогресса);
	
	// возвращаем таблицу с командами настройки
	Возврат ТаблицаИсправлений;
	
КонецФункции

Функция ПолучитьОтпечатокСертификатаБезопасностиРОКИ()
	
	// получаем отпечаток сертификата безопасности
	КомментарийМакета = Метаданные().Макеты.СертификатБезопасностиРОКИ.Комментарий;
	ВхождениеДвоеточия = Найти(КомментарийМакета, ":");
	Если ВхождениеДвоеточия = 0 Тогда
		ОтпечатокСертификатаБезопасностиРОКИ = СокрЛП(КомментарийМакета);
	Иначе
		ОтпечатокСертификатаБезопасностиРОКИ = СокрЛП(Сред(КомментарийМакета, ВхождениеДвоеточия + 1));
	КонецЕсли;
	Возврат ОтпечатокСертификатаБезопасностиРОКИ;
	
КонецФункции

Функция ПолучитьНастройкиУчетнойЗаписиССервера(Знач УчетнаяЗапись,
											Знач Организация = Неопределено,
											УведомлятьТолькоОбОшибках = Ложь,
											ИгнорироватьРежимАвтонастройки = Ложь,
											ТихийРежим = Ложь,
											ЗапрашиватьПараметрыОрганизацииПриНеобходимости = Ложь) Экспорт
	
	// проверяем, включена ли автонастройка
	Если НЕ ИгнорироватьРежимАвтонастройки Тогда
		
		// учетной записью может оказаться организация
		Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.Организации") Тогда
			Если УчетнаяЗапись.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
				Возврат Неопределено;
			КонецЕсли;
			ссылкаУчетнаяЗапись = Организация.УчетнаяЗаписьОбмена;
		Иначе
			ссылкаУчетнаяЗапись = УчетнаяЗапись;
		КонецЕсли;
		
		// получаем настройки учетной записи
		// если настройки недоступны или учетка для обмена напрямую, то прервемся
		НастройкиУчетнойЗаписи = ПолучитьНастройкиУчетнойЗаписиИзИБ(ссылкаУчетнаяЗапись);
		Если НастройкиУчетнойЗаписи = Неопределено ИЛИ НастройкиУчетнойЗаписи.ОбменНапрямую Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// если включено принудительное игнорирование режима автонастройки
		// или отключена автонастройка в свойствах учетной записи, то прервемся
		Если НастройкиУчетнойЗаписи.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Отключена
		ИЛИ НастройкиУчетнойЗаписи.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.ПустаяСсылка() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ФормаПрогресса = Неопределено;
	ОтобразитьИнформациюВФормеПрогресса(ФормаПрогресса, ТихийРежим, "Получение данных с сервера...");
	
	// получаем файл настроек с сервера или из кэша
	ПараметрыФайлаНастроек = ПолучитьФайлНастроекУчетнойЗаписиССервераРОКИСУчетомКэша(УчетнаяЗапись, Организация, УведомлятьТолькоОбОшибках, ИгнорироватьРежимАвтонастройки, ТихийРежим, ЗапрашиватьПараметрыОрганизацииПриНеобходимости);
	Если НЕ ЗначениеЗаполнено(ПараметрыФайлаНастроек) Тогда // если Неопределено, то файл недоступен
		ЗакрытьФормуПрогресса(ФормаПрогресса);
		Возврат Неопределено;
	КонецЕсли;
	ФайлНастроек = ПараметрыФайлаНастроек.Файл;
	ДатаОбновленияФайлаНастроекНаСервере = ПараметрыФайлаНастроек.Дата;
	ФайлНастроекРасшифрован = ПараметрыФайлаНастроек.Расшифрован;
	ИмяРесурсаСНастройками = ПараметрыФайлаНастроек.ИмяРесурса;
	
	// если файл настроек зашифрован, то расшифровываем
	Если НЕ ФайлНастроекРасшифрован Тогда
		
		ОтобразитьИнформациюВФормеПрогресса(ФормаПрогресса, ТихийРежим, "Расшифровка контейнера с информацией о настройках...");
		
		// объявляем вспомогательные переменные
		Сообщения = СоздатьТаблицуСообщений();
		
		ПризнакОшибкиВФайлеНастроек = Ложь;
		РасшифрованныйФайлНастроек = РасшифроватьТранспортныйКонтейнерРОКИ(ФайлНастроек, Сообщения, ПризнакОшибкиВФайлеНастроек);
		
		Если РасшифрованныйФайлНастроек = Неопределено Тогда
			// кэшируем файл настроек, если в нем при расшфровке не была обнаружена ошибка
			Если НЕ ПризнакОшибкиВФайлеНастроек Тогда
				СохранитьВКэшеФайлНастроек(УчетнаяЗапись, ИмяРесурсаСНастройками, РасшифрованныйФайлНастроек, Истина, ДатаОбновленияФайлаНастроекНаСервере);
			КонецЕсли;
			ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках);
			ЗакрытьФормуПрогресса(ФормаПрогресса);
			Возврат Неопределено;
		Иначе
			ФайлНастроек = РасшифрованныйФайлНастроек;
			СохранитьВКэшеФайлНастроек(УчетнаяЗапись, ИмяРесурсаСНастройками, ФайлНастроек, Истина, ДатаОбновленияФайлаНастроекНаСервере);
		КонецЕсли;
		
	КонецЕсли;
	
	// формируем таблицу исправлений на основе расшифрованного файла настроек на диске
	ОтобразитьИнформациюВФормеПрогресса(ФормаПрогресса, ТихийРежим, "Анализ информации о настройках учетной записи...");
	ТаблицаИсправлений = СформироватьТаблицуИсправленийНаОсновеФайлаНастроек(УчетнаяЗапись, ФайлНастроек, УведомлятьТолькоОбОшибках);
	
	ЗакрытьФормуПрогресса(ФормаПрогресса);
	Возврат ТаблицаИсправлений;
	
КонецФункции

Функция ПолучитьНастройкиУчетнойЗаписиИзИБ(УчетнаяЗапись)
	
	Результат = Новый Структура;
	ТипУчетнойЗаписи = ТипЗнч(УчетнаяЗапись);
	Если ТипУчетнойЗаписи = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	УчетныеЗаписиДокументооборота.АдресЭлектроннойПочты,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.Код КАК КодНалоговогоОргана,
		                      |	УчетныеЗаписиДокументооборота.НалоговыйОрган.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками КАК АдресНалоговогоОргана,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.Сертификат КАК СертификатПочтовогоСервера,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.АдресЭлектроннойПочтыФНС КАК АдресЭлектроннойПочтыПочтовогоСервера,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота.АдресЭлектроннойПочтыПФР КАК АдресЭлектроннойПочтыПочтовогоСервераПФР,
		                      |	УчетныеЗаписиДокументооборота.СертификатРуководителя,
		                      |	УчетныеЗаписиДокументооборота.СертификатГлавногоБухгалтера,
		                      |	УчетныеЗаписиДокументооборота.СертификатДляШифрования,
		                      |	УчетныеЗаписиДокументооборота.ОбменНапрямую,
		                      |	УчетныеЗаписиДокументооборота.СерверДокументооборота КАК СерверДокументооборота,
		                      |	УчетныеЗаписиДокументооборота.ИмяПользователяPOP3 КАК ИмяПользователяPOP3,
		                      |	УчетныеЗаписиДокументооборота.ПарольPOP3 КАК ПарольPOP3,
		                      |	УчетныеЗаписиДокументооборота.СерверPOP3 КАК СерверPOP3,
		                      |	УчетныеЗаписиДокументооборота.ПортPOP3 КАК ПортPOP3,
		                      |	УчетныеЗаписиДокументооборота.ИмяПользователяSMTP КАК ИмяПользователяSMTP,
		                      |	УчетныеЗаписиДокументооборота.ПарольSMTP КАК ПарольSMTP,
		                      |	УчетныеЗаписиДокументооборота.СерверSMTP КАК СерверSMTP,
		                      |	УчетныеЗаписиДокументооборота.ПортSMTP КАК ПортSMTP,
		                      |	УчетныеЗаписиДокументооборота.ТребуетсяSMTPАутентификация КАК ТребуетсяSMTPАутентификация,
		                      |	УчетныеЗаписиДокументооборота.РежимАвтонастройки,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСФНС,
		                      |	УчетныеЗаписиДокументооборота.ПредназначенаДляДокументооборотаСПФР,
		                      |	УчетныеЗаписиДокументооборота.ИдентификаторАбонента,
		                      |	УчетныеЗаписиДокументооборота.ИдентификаторСпецоператора
		                      |ИЗ
		                      |	Справочник.УчетныеЗаписиДокументооборота КАК УчетныеЗаписиДокументооборота
		                      |ГДЕ
		                      |	УчетныеЗаписиДокументооборота.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", УчетнаяЗапись);
		Выборка = Запрос.Выполнить().Выбрать();
		Если НЕ Выборка.Следующий() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат.Вставить("АдресЭлектроннойПочты",							Выборка.АдресЭлектроннойПочты);
		Результат.Вставить("КодНалоговогоОргана",							Выборка.КодНалоговогоОргана);
		Результат.Вставить("АдресНалоговогоОргана",							Выборка.АдресНалоговогоОргана);
		Результат.Вставить("СертификатПочтовогоСервера",					Выборка.СертификатПочтовогоСервера);
		Результат.Вставить("АдресЭлектроннойПочтыПочтовогоСервера",			Выборка.АдресЭлектроннойПочтыПочтовогоСервера);
		Результат.Вставить("АдресЭлектроннойПочтыПочтовогоСервераПФР",		Выборка.АдресЭлектроннойПочтыПочтовогоСервераПФР);
		Результат.Вставить("СертификатРуководителя",						Выборка.СертификатРуководителя);
		Результат.Вставить("СертификатГлавногоБухгалтера",					Выборка.СертификатГлавногоБухгалтера);
		Результат.Вставить("СертификатДляШифрования",						Выборка.СертификатДляШифрования);
		Результат.Вставить("ОбменНапрямую",									Выборка.ОбменНапрямую);
		Результат.Вставить("СерверДокументооборота",						Выборка.СерверДокументооборота);
		Результат.Вставить("ИмяПользователяPOP3",							Выборка.ИмяПользователяPOP3);
		Результат.Вставить("ПарольPOP3",									Выборка.ПарольPOP3);
		Результат.Вставить("СерверPOP3",									Выборка.СерверPOP3);
		Результат.Вставить("ПортPOP3",										Выборка.ПортPOP3);
		Результат.Вставить("ИмяПользователяSMTP",							Выборка.ИмяПользователяSMTP);
		Результат.Вставить("ПарольSMTP",									Выборка.ПарольSMTP);
		Результат.Вставить("СерверSMTP",									Выборка.СерверSMTP);
		Результат.Вставить("ПортSMTP",										Выборка.ПортSMTP);
		Результат.Вставить("ТребуетсяSMTPАутентификация",					Выборка.ТребуетсяSMTPАутентификация);
		Результат.Вставить("РежимАвтонастройки",							Выборка.РежимАвтонастройки);
		Результат.Вставить("ПредназначенаДляДокументооборотаСФНС",			Выборка.ПредназначенаДляДокументооборотаСФНС);
		Результат.Вставить("ПредназначенаДляДокументооборотаСПФР",			Выборка.ПредназначенаДляДокументооборотаСПФР);
		Результат.Вставить("ИдентификаторАбонента",							Выборка.ИдентификаторАбонента);
		Результат.Вставить("ИдентификаторСпецоператора",					Выборка.ИдентификаторСпецоператора);
		
	ИначеЕсли ТипУчетнойЗаписи = Тип("СправочникОбъект.УчетныеЗаписиДокументооборота") Тогда
		
		Результат.Вставить("АдресЭлектроннойПочты",							УчетнаяЗапись.АдресЭлектроннойПочты);
		Результат.Вставить("КодНалоговогоОргана",							УчетнаяЗапись.НалоговыйОрган.Код);
		Результат.Вставить("АдресНалоговогоОргана",							УчетнаяЗапись.НалоговыйОрган.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками);
		Результат.Вставить("СертификатПочтовогоСервера",					УчетнаяЗапись.СерверДокументооборота.Сертификат);
		Результат.Вставить("АдресЭлектроннойПочтыПочтовогоСервера",			УчетнаяЗапись.СерверДокументооборота.АдресЭлектроннойПочтыФНС);
		Результат.Вставить("АдресЭлектроннойПочтыПочтовогоСервераПФР",		УчетнаяЗапись.СерверДокументооборота.АдресЭлектроннойПочтыПФР);
		Результат.Вставить("СертификатРуководителя",						УчетнаяЗапись.СертификатРуководителя);
		Результат.Вставить("СертификатГлавногоБухгалтера",					УчетнаяЗапись.СертификатГлавногоБухгалтера);
		Результат.Вставить("СертификатДляШифрования",						УчетнаяЗапись.СертификатДляШифрования);
		Результат.Вставить("ОбменНапрямую",									УчетнаяЗапись.ОбменНапрямую);
		Результат.Вставить("СерверДокументооборота",						УчетнаяЗапись.СерверДокументооборота);
		Результат.Вставить("ИмяПользователяPOP3",							УчетнаяЗапись.ИмяПользователяPOP3);
		Результат.Вставить("ПарольPOP3",									УчетнаяЗапись.ПарольPOP3);
		Результат.Вставить("СерверPOP3",									УчетнаяЗапись.СерверPOP3);
		Результат.Вставить("ПортPOP3",										УчетнаяЗапись.ПортPOP3);
		Результат.Вставить("ИмяПользователяSMTP",							УчетнаяЗапись.ИмяПользователяSMTP);
		Результат.Вставить("ПарольSMTP",									УчетнаяЗапись.ПарольSMTP);
		Результат.Вставить("СерверSMTP",									УчетнаяЗапись.СерверSMTP);
		Результат.Вставить("ПортSMTP",										УчетнаяЗапись.ПортSMTP);
		Результат.Вставить("ТребуетсяSMTPАутентификация",					УчетнаяЗапись.ТребуетсяSMTPАутентификация);
		Результат.Вставить("РежимАвтонастройки",							УчетнаяЗапись.РежимАвтонастройки);
		Результат.Вставить("ПредназначенаДляДокументооборотаСФНС",			УчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС);
		Результат.Вставить("ПредназначенаДляДокументооборотаСПФР",			УчетнаяЗапись.ПредназначенаДляДокументооборотаСПФР);
		Результат.Вставить("ИдентификаторАбонента",							УчетнаяЗапись.ИдентификаторАбонента);
		Результат.Вставить("ИдентификаторСпецоператора",					УчетнаяЗапись.ИдентификаторСпецоператора);
		
	Иначе
		
		Результат.Вставить("АдресЭлектроннойПочты",							"");
		Результат.Вставить("КодНалоговогоОргана",							"");
		Результат.Вставить("АдресНалоговогоОргана",							"");
		Результат.Вставить("СертификатПочтовогоСервера",					"");
		Результат.Вставить("АдресЭлектроннойПочтыПочтовогоСервера",			"");
		Результат.Вставить("АдресЭлектроннойПочтыПочтовогоСервераПФР",		"");
		Результат.Вставить("СертификатРуководителя",						"");
		Результат.Вставить("СертификатГлавногоБухгалтера",					"");
		Результат.Вставить("СертификатДляШифрования",						"");
		Результат.Вставить("ОбменНапрямую",									Ложь);
		Результат.Вставить("СерверДокументооборота",						"");
		Результат.Вставить("ИмяПользователяPOP3",							"");
		Результат.Вставить("ПарольPOP3",									"");
		Результат.Вставить("СерверPOP3",									"");
		Результат.Вставить("ПортPOP3",										0);
		Результат.Вставить("ИмяПользователяSMTP",							"");
		Результат.Вставить("ПарольSMTP",									"");
		Результат.Вставить("СерверSMTP",									"");
		Результат.Вставить("ПортSMTP",										0);
		Результат.Вставить("ТребуетсяSMTPАутентификация",					Ложь);
		Результат.Вставить("РежимАвтонастройки",							Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Отключена);
		Результат.Вставить("ПредназначенаДляДокументооборотаСФНС",			Ложь);
		Результат.Вставить("ПредназначенаДляДокументооборотаСПФР",			Ложь);
		Результат.Вставить("ИдентификаторАбонента",							"");
		Результат.Вставить("ИдентификаторСпецоператора",					"");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НастроитьПоРОКИ(УчетнаяЗапись, ТаблицаНеобходимыхИзменений, Сообщения)
	
	НачатьТранзакцию();
	ТранзакцияПустая = Истина;
	
	// получаем объект - учетную запись
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникОбъект.УчетныеЗаписиДокументооборота") Тогда
		УчетнаяЗаписьОбъект = УчетнаяЗапись;
	Иначе
		УчетнаяЗаписьОбъект = УчетнаяЗапись.ПолучитьОбъект();
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// Настройка сервера документооборота
	
	Если ЗначениеЗаполнено(УчетнаяЗаписьОбъект.СерверДокументооборота) Тогда
		СерверДокументооборотаОбъект = УчетнаяЗаписьОбъект.СерверДокументооборота.ПолучитьОбъект();
	Иначе
		СерверДокументооборотаОбъект = Справочники.СерверыДокументооборота.СоздатьЭлемент();
	КонецЕсли;
	
	// изменяем адреса сервера документооборота
	КомандаИзменитьАдресПочтовогоСервераФНС = ТаблицаНеобходимыхИзменений.Найти("ИзменитьАдресПочтовогоСервера", "Настройка");
	КомандаИзменитьАдресПочтовогоСервераПФР = ТаблицаНеобходимыхИзменений.Найти("ИзменитьАдресПочтовогоСервераПФР", "Настройка");
	Если КомандаИзменитьАдресПочтовогоСервераФНС <> Неопределено ИЛИ КомандаИзменитьАдресПочтовогоСервераПФР <> Неопределено Тогда
		
		//// пытаемся найти сервер документооборота по паре адресов - для ФНС и ПФР
		//Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//					  |	СерверыДокументооборота.Ссылка
		//					  |ИЗ
		//					  |	Справочник.СерверыДокументооборота КАК СерверыДокументооборота
		//					  |ГДЕ
		//					  |	СерверыДокументооборота.АдресЭлектроннойПочтыФНС = &АдресЭлектроннойПочтыФНС
		//					  |	И СерверыДокументооборота.АдресЭлектроннойПочтыПФР = &АдресЭлектроннойПочтыПФР
		//					  |	И СерверыДокументооборота.Ссылка <> &Ссылка");
		//Запрос.УстановитьПараметр("АдресЭлектроннойПочтыФНС", нрег(КомандаИзменитьАдресПочтовогоСервераФНС.НовоеЗначение));
		//Запрос.УстановитьПараметр("АдресЭлектроннойПочтыПФР", нрег(КомандаИзменитьАдресПочтовогоСервераПФР.НовоеЗначение));
		//Запрос.УстановитьПараметр("Ссылка", УчетнаяЗаписьОбъект.СерверДокументооборота);
		//Выборка = Запрос.Выполнить().Выбрать();
		//
		//// если такой сервер обнаружен, то модифицируем его
		//Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Ссылка) Тогда
		//	СерверДокументооборотаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		//	
		//// а если не обнаружен, то используем заданный в настройках учетки или вновь созданный
		//Иначе
		//	
		//	// 
		//	Если НЕ СерверДокументооборотаОбъект.ЭтоНовый() Тогда
		//		НовыйСерверДокументооборотаОбъект = Справочники.СерверыДокументооборота.СоздатьЭлемент();
		//		ЗаполнитьЗначенияСвойств(НовыйСерверДокументооборотаОбъект, СерверДокументооборотаОбъект, "АдресЭлектроннойПочтыФНС, Сертификат");
		//		СерверДокументооборотаОбъект = НовыйСерверДокументооборотаОбъект;
		//		ДобавитьСообщение(Сообщения, "Создан новый элемент справочника ""Серверы документооборота"".", Ложь);
		//	КонецЕсли;
		//	
		//КонецЕсли;
		
		// меняем адрес для обмена с ФНС при необходимости
		Если КомандаИзменитьАдресПочтовогоСервераФНС <> Неопределено Тогда
			СерверДокументооборотаОбъект.АдресЭлектроннойПочтыФНС = нрег(КомандаИзменитьАдресПочтовогоСервераФНС.НовоеЗначение);
			ДобавитьСообщение(Сообщения, "Изменен адрес электронной почты сервера документооборота для обмена с ФНС.", Ложь);
		КонецЕсли;
		
		// меняем адрес для обмена с ПФР при необходимости
		Если КомандаИзменитьАдресПочтовогоСервераПФР <> Неопределено Тогда
			СерверДокументооборотаОбъект.АдресЭлектроннойПочтыПФР = нрег(КомандаИзменитьАдресПочтовогоСервераПФР.НовоеЗначение);
			ДобавитьСообщение(Сообщения, "Изменен адрес электронной почты сервера документооборота для обмена с ПФР.", Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	// изменяем сертификат сервера документооборота
	КомандаИзменитьСертификатПочтовогоСервера = ТаблицаНеобходимыхИзменений.Найти("ИзменитьСертификатПочтовогоСервера", "Настройка");
	Если КомандаИзменитьСертификатПочтовогоСервера <> Неопределено Тогда
		СерверДокументооборотаОбъект.Сертификат = нрег(КомандаИзменитьСертификатПочтовогоСервера.НовоеЗначение.Отпечаток);
		ДобавитьСообщение(Сообщения, "Изменен сертификат сервера документооборота.", Ложь);
	КонецЕсли;
	
	// записываем изменения в свойствах сервера документооборота
	Если СерверДокументооборотаОбъект.Модифицированность() Тогда
		Попытка
			СерверДокументооборотаОбъект.Записать();
			ТранзакцияПустая = Ложь;
			//ДобавитьСообщение(Сообщения, "Зафиксированы изменения в свойствах почтового сервера.", Ложь);
		Исключение
			ОтменитьТранзакцию();
			Сообщить(ИнформацияОбОшибке().Описание);
			ДобавитьСообщение(Сообщения, "Ошибка обновления настроек учетной записи:" + Символы.ПС + ИнформацияОбОшибке().Описание);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// при необходимости, изменяем ссылку на сервер документооборота у учетной записи
	Если УчетнаяЗаписьОбъект.СерверДокументооборота <> СерверДокументооборотаОбъект.Ссылка Тогда
		УчетнаяЗаписьОбъект.СерверДокументооборота = СерверДокументооборотаОбъект.Ссылка;
		ДобавитьСообщение(Сообщения, "В свойствах учетной записи сервер документооборота изменен на вновь созданный.", Ложь);
	КонецЕсли;
	
	// Настройка сервера документооборота
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Настройка налоговых органов
	
	// регистрируем налоговые органы
	КомандыЗарегистрироватьИФНС = ТаблицаНеобходимыхИзменений.НайтиСтроки(Новый Структура("Настройка", "ЗарегистрироватьИФНС"));
	Для Каждого СтрКоманда Из КомандыЗарегистрироватьИФНС Цикл
		
		// параметры команды
		КодИФНС = СокрЛП(СтрКоманда.НовоеЗначение);
		НаименованиеИФНС = СтрКоманда.ДопПараметр;
		
		// создаем новый элемент справочника, присваиваем код и наименование, записываем
		НалоговыйОрганОбъект = Справочники.НалоговыеОрганы.СоздатьЭлемент();
		НалоговыйОрганОбъект.Код = КодИФНС;
		НалоговыйОрганОбъект.Наименование = НаименованиеИФНС;
		НалоговыйОрганОбъект.Записать();
		
		ТранзакцияПустая = Ложь;
		
		// генерируем сообщение
		ДобавитьСообщение(Сообщения, "Создан новый элемент справочника ""Налоговые органы"" с кодом """ + КодИФНС + """ и наименованием """ + НаименованиеИФНС + """.", Ложь);
		
	КонецЦикла;
	
	// меняем сертификаты
	КомандыИзменитьСертификатИФНС = ТаблицаНеобходимыхИзменений.НайтиСтроки(Новый Структура("Настройка", "ИзменитьСертификатИФНС"));
	Для Каждого СтрКоманда Из КомандыИзменитьСертификатИФНС Цикл
		
		// параметры команды
		СертификатыИФНС = СтрКоманда.НовоеЗначение;
		КодИФНС = СокрЛП(СтрКоманда.ДопПараметр);
		
		// ищем налоговый орган в справочнике по коду и меняем сертификат
		СсылкаНалоговыйОрган = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИФНС);
		Если ЗначениеЗаполнено(СсылкаНалоговыйОрган) Тогда
			
			ОбъектНалоговыйОрган = СсылкаНалоговыйОрган.ПолучитьОбъект();
			
			ОбъектНалоговыйОрган.Сертификаты.Очистить();
			Для Каждого СертификатИФНС Из СертификатыИФНС Цикл
				НовСтрСертификат = ОбъектНалоговыйОрган.Сертификаты.Добавить();
				НовСтрСертификат.Сертификат = СертификатИФНС.Отпечаток;
			КонецЦикла;
			
			ОбъектНалоговыйОрган.Записать();
			
			ТранзакцияПустая = Ложь;
			
		КонецЕсли;
		
		// генерируем сообщение
		ДобавитьСообщение(Сообщения, "Изменен сертификат налогового органа с кодом """ + КодИФНС + """.", Ложь);
		
	КонецЦикла;
	
	// Настройка налоговых органов
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Настройка основного налогового органа
	
	КомандаИзменитьОсновнуюИФНС = ТаблицаНеобходимыхИзменений.Найти("ИзменитьОсновнуюИФНС", "Настройка");
	Если КомандаИзменитьОсновнуюИФНС <> Неопределено Тогда
		КодОсновногоНалоговогоОргана = СокрЛП(КомандаИзменитьОсновнуюИФНС.НовоеЗначение.Код);
		СсылкаНаОсновнойНалоговыйОрган = Справочники.НалоговыеОрганы.НайтиПоКоду(КодОсновногоНалоговогоОргана);
		УчетнаяЗаписьОбъект.НалоговыйОрган = СсылкаНаОсновнойНалоговыйОрган;
		ДобавитьСообщение(Сообщения, "В свойствах учетной записи изменен налоговый орган.", Ложь);
	КонецЕсли;
	
	// Настройка основного налогового органа
	///////////////////////////////////////////////////////////////////////////////
	
	///////////////////////////////////////////////////////////////////////////////
	// Настройка отделений ПФР
	
	// регистрируем отделения ПФР
	КомандыЗарегистрироватьОрганПФР = ТаблицаНеобходимыхИзменений.НайтиСтроки(Новый Структура("Настройка", "ЗарегистрироватьОрганПФР"));
	Для Каждого СтрКоманда Из КомандыЗарегистрироватьОрганПФР Цикл
		
		// параметры команды
		КодОрганаПФР = СокрЛП(СтрКоманда.НовоеЗначение);
		НаименованиеОрганаПФР = СтрКоманда.ДопПараметр;
		
		// создаем новый элемент справочника, присваиваем код и наименование, записываем
		ОрганПФРОбъект = Справочники.ОрганыПФР.СоздатьЭлемент();
		ОрганПФРОбъект.Код = КодОрганаПФР;
		ОрганПФРОбъект.Наименование = НаименованиеОрганаПФР;
		ОрганПФРОбъект.Записать();
		
		ТранзакцияПустая = Ложь;
		
		// генерируем сообщение
		ДобавитьСообщение(Сообщения, "Создан новый элемент справочника ""Органы ПФР"" с кодом """ + КодОрганаПФР + """ и наименованием """ + НаименованиеОрганаПФР + """.", Ложь);
		
	КонецЦикла;
	
	// меняем сертификаты
	КомандыИзменитьСертификатОрганаПФР = ТаблицаНеобходимыхИзменений.НайтиСтроки(Новый Структура("Настройка", "ИзменитьСертификатОрганаПФР"));
	Для Каждого СтрКоманда Из КомандыИзменитьСертификатОрганаПФР Цикл
		
		// параметры команды
		СертификатыОрганаПФР = СтрКоманда.НовоеЗначение;
		КодОрганаПФР = СокрЛП(СтрКоманда.ДопПараметр);
		
		// ищем орган ПФР в справочнике по коду и меняем сертификат
		СсылкаОрганПФР = Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
		Если ЗначениеЗаполнено(СсылкаОрганПФР) Тогда
			
			ОбъектОрганПФР = СсылкаОрганПФР.ПолучитьОбъект();
			
			ОбъектОрганПФР.Сертификаты.Очистить();
			Для Каждого СертификатОрганаПФР Из СертификатыОрганаПФР Цикл
				НовСтрСертификат = ОбъектОрганПФР.Сертификаты.Добавить();
				НовСтрСертификат.Сертификат = СертификатОрганаПФР.Отпечаток;
			КонецЦикла;
			
			ОбъектОрганПФР.Записать();
			
			ТранзакцияПустая = Ложь;
			
		КонецЕсли;
		
		// генерируем сообщение
		ДобавитьСообщение(Сообщения, "Изменен сертификат органа ПФР с кодом """ + КодОрганаПФР + """.", Ложь);
		
	КонецЦикла;
	
	// устанавливаем признаки документооборота по учетке через ФНС и ПФР
	
	// Настройка отделений ПФР
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Настройка учетной записи непосредственно
	
	// настраиваем учетную запись
	КомандаПредназначенаДляДокументооборотаСФНС		= ТаблицаНеобходимыхИзменений.Найти("ИзменитьПризнакДокументооборотаСФНС", "Настройка");
	КомандаПредназначенаДляДокументооборотаСПФР		= ТаблицаНеобходимыхИзменений.Найти("ИзменитьПризнакДокументооборотаСПФР", "Настройка");
	
	КомандаИзменитьСерверPOP3						= ТаблицаНеобходимыхИзменений.Найти("ИзменитьСерверPOP3", "Настройка");
	КомандаИзменитьСерверPOP3						= ТаблицаНеобходимыхИзменений.Найти("ИзменитьСерверPOP3", "Настройка");
	КомандаИзменитьПортPOP3							= ТаблицаНеобходимыхИзменений.Найти("ИзменитьПортPOP3", "Настройка");
	КомандаИзменитьИмяПользователяPOP3				= ТаблицаНеобходимыхИзменений.Найти("ИзменитьИмяПользователяPOP3", "Настройка");
	КомандаИзменитьАдресЭлектроннойПочты			= ТаблицаНеобходимыхИзменений.Найти("ИзменитьАдресЭлектроннойПочты", "Настройка");
	КомандаИзменитьИдентификаторАбонента			= ТаблицаНеобходимыхИзменений.Найти("ИзменитьИдентификаторАбонента", "Настройка");
	КомандаИзменитьИдентификаторСпецоператора		= ТаблицаНеобходимыхИзменений.Найти("ИзменитьИдентификаторСпецоператора", "Настройка");
	КомандаИзменитьПарольPOP3						= ТаблицаНеобходимыхИзменений.Найти("ИзменитьПарольPOP3", "Настройка");
	КомандаИзменитьСерверSMTP						= ТаблицаНеобходимыхИзменений.Найти("ИзменитьСерверSMTP", "Настройка");
	КомандаИзменитьПортSMTP							= ТаблицаНеобходимыхИзменений.Найти("ИзменитьПортSMTP", "Настройка");
	КомандаИзменитьФлагТребуетсяSMTPАутентификация	= ТаблицаНеобходимыхИзменений.Найти("ИзменитьФлагТребуетсяSMTPАутентификация", "Настройка");
	КомандаИзменитьСертификатРуководителя			= ТаблицаНеобходимыхИзменений.Найти("ИзменитьСертификатРуководителя", "Настройка");
	КомандаИзменитьСертификатГлавногоБухгалтера		= ТаблицаНеобходимыхИзменений.Найти("ИзменитьСертификатГлавногоБухгалтера", "Настройка");
	КомандаИзменитьСертификатДляШифрования			= ТаблицаНеобходимыхИзменений.Найти("ИзменитьСертификатДляШифрования", "Настройка");
	
	// изменяем признак Назначение
	Если КомандаПредназначенаДляДокументооборотаСФНС <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ПредназначенаДляДокументооборотаСФНС = КомандаПредназначенаДляДокументооборотаСФНС.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен признак возможности документооборота с ФНС по учетной записи.", Ложь);
	КонецЕсли;
	Если КомандаПредназначенаДляДокументооборотаСПФР <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ПредназначенаДляДокументооборотаСПФР = КомандаПредназначенаДляДокументооборотаСПФР.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен признак возможности документооборота с ПФР по учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем идентификатор абонента
	Если КомандаИзменитьИдентификаторАбонента <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ИдентификаторАбонента = КомандаИзменитьИдентификаторАбонента.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен идентификатор абонента в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем идентификатор спецоператора
	Если КомандаИзменитьИдентификаторСпецоператора <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ИдентификаторСпецоператора = КомандаИзменитьИдентификаторСпецоператора.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен идентификатор спецоператора в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем адрес электронной почты
	Если КомандаИзменитьАдресЭлектроннойПочты <> Неопределено Тогда
		УчетнаяЗаписьОбъект.АдресЭлектроннойПочты = КомандаИзменитьАдресЭлектроннойПочты.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен адрес электронной почты в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем адрес сервера POP3
	Если КомандаИзменитьСерверPOP3 <> Неопределено Тогда
		УчетнаяЗаписьОбъект.СерверPOP3 = КомандаИзменитьСерверPOP3.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен адрес сервера POP3 в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем имя пользователя POP3
	Если КомандаИзменитьИмяПользователяPOP3 <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ИмяПользователяPOP3 = КомандаИзменитьИмяПользователяPOP3.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменено имя пользователя POP3 в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем пароль POP3
	Если КомандаИзменитьПарольPOP3 <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ПарольPOP3 = КомандаИзменитьПарольPOP3.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен пароль POP3 в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем порт POP3
	Если КомандаИзменитьПортPOP3 <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ПортPOP3 = КомандаИзменитьПортPOP3.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен порт POP3 в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем адрес сервера SMTP
	Если КомандаИзменитьСерверSMTP <> Неопределено Тогда
		УчетнаяЗаписьОбъект.СерверSMTP = КомандаИзменитьСерверSMTP.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен адрес сервера SMTP в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем порт SMTP
	Если КомандаИзменитьПортSMTP <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ПортSMTP = КомандаИзменитьПортSMTP.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен порт SMTP в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем признак необходимости авторизации на сервере SMTP
	Если КомандаИзменитьФлагТребуетсяSMTPАутентификация <> Неопределено Тогда
		УчетнаяЗаписьОбъект.ТребуетсяSMTPАутентификация = КомандаИзменитьФлагТребуетсяSMTPАутентификация.НовоеЗначение;
		ДобавитьСообщение(Сообщения, "Изменен признак необходимости авторизации на сервере SMTP в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем сертификат руководителя
	Если КомандаИзменитьСертификатРуководителя <> Неопределено Тогда
		УчетнаяЗаписьОбъект.СертификатРуководителя = КомандаИзменитьСертификатРуководителя.НовоеЗначение.Отпечаток;
		ДобавитьСообщение(Сообщения, "Изменен сертификат руководителя в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем сертификат главного бухгалтера
	Если КомандаИзменитьСертификатГлавногоБухгалтера <> Неопределено Тогда
		УчетнаяЗаписьОбъект.СертификатГлавногоБухгалтера = КомандаИзменитьСертификатГлавногоБухгалтера.НовоеЗначение.Отпечаток;
		ДобавитьСообщение(Сообщения, "Изменен сертификат главного бухгалтера в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// изменяем сертификат для шифрования
	Если КомандаИзменитьСертификатДляШифрования <> Неопределено Тогда
		УчетнаяЗаписьОбъект.СертификатДляШифрования = КомандаИзменитьСертификатДляШифрования.НовоеЗначение.Отпечаток;
		ДобавитьСообщение(Сообщения, "Изменен сертификат для шифрования в свойствах учетной записи.", Ложь);
	КонецЕсли;
	
	// если учетная запись была изменена, то пишем
	Если УчетнаяЗаписьОбъект.Модифицированность() Тогда
		Попытка
			УчетнаяЗаписьОбъект.Записать();
			ТранзакцияПустая = Ложь;
			//ДобавитьСообщение(Сообщения, "Зафиксированы изменения в свойствах учетной записи.", Ложь);
		Исключение
			ОтменитьТранзакцию();
			ДобавитьСообщение(Сообщения, "Ошибка обновления настроек учетной записи:" + Символы.ПС + ИнформацияОбОшибке().Описание);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// Настройка учетной записи непосредственно
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Фиксация изменений в ИБ
	
	// пытаемся зафиксировать изменения в ИБ
	Если НЕ ТранзакцияПустая Тогда
		Попытка
			ЗафиксироватьТранзакцию();
			//ДобавитьСообщение(Сообщения, "Изменения в настройках зафиксированы в информационной базе.", Ложь);
		Исключение
			ДобавитьСообщение(Сообщения, "Ошибка обновления настроек учетной записи:" + Символы.ПС + ИнформацияОбОшибке().Описание);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
	// Фиксация изменений в ИБ
	///////////////////////////////////////////////////////////////////////////////
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Регистрация сертификатов в системе
	
	// регистрируем сертификаты
	СоответствиеКомандРегистрацииСертификатовХранилищам = Новый Соответствие;
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатКорневойГНИВЦ", "ROOT");
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатКорневойТакском", "ROOT");
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатКроссГНИВЦ", "CA");
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатНалоговогоОргана", "AddressBook");
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатСОС", "AddressBook");
	
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатОрганаПФР", "AddressBook");
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатКорневойПФР", "ROOT");
	СоответствиеКомандРегистрацииСертификатовХранилищам.Вставить("ЗарегистрироватьСертификатКРОССПФР", "CA");
	
	СоответствиеКомандРегистрацииСертификатовПредставлениям = Новый Соответствие;
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатКорневойГНИВЦ", "корневой сертиифкат УЦ ГНИВЦ ФНС РФ");
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатКорневойТакском", "корневой сертификат УЦ ""Такском""");
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатКроссГНИВЦ", "кросс-сертификат УЦ ГНИВЦ ФНС РФ");
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатНалоговогоОргана", "сертификат налогового органа");
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатСОС", "сертификат спецоператора");
	
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатОрганаПФР", "сертификат органа ПФР");
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатКорневойПФР", "корневой сертификат, используемый при обмене с ПФР");
	СоответствиеКомандРегистрацииСертификатовПредставлениям.Вставить("ЗарегистрироватьСертификатКРОССПФР", "кросс-сертификат, используемый при обмене с ПФР");
	
	СоответствиеИдентификаторовХранилищПредставлениям = Новый Соответствие;
	СоответствиеИдентификаторовХранилищПредставлениям.Вставить("ROOT", "Доверенные корневые центры сертификации");
	СоответствиеИдентификаторовХранилищПредставлениям.Вставить("CA", "Промежуточные центры сертификации");
	СоответствиеИдентификаторовХранилищПредставлениям.Вставить("AddressBook", "Прочие пользователи");
	
	// цикл по всем возможным командам регистрации сертификатов
	Для Каждого Эл Из СоответствиеКомандРегистрацииСертификатовХранилищам Цикл
		
		// поиска команд текущего вида в таблице изменений
		ТекКоманды = ТаблицаНеобходимыхИзменений.НайтиСтроки(Новый Структура("Настройка", Эл.Ключ));
		Для Каждого ТекКоманда Из ТекКоманды Цикл
			
			РезультатРегистрации = Истина;
			ФайлСертификата = ЗаписатьСертификат64ВФайл(ТекКоманда.НовоеЗначение.Сертификат);
			Если ФайлСертификата <> Неопределено Тогда
				ИмяХранилища = Эл.Значение;
				РезультатРегистрации = (ЗарегистрироватьСертификатВСистеме(ФайлСертификата, ИмяХранилища) = Истина);
			Иначе
				РезультатРегистрации = Ложь;
			КонецЕсли;
			
			Если НЕ РезультатРегистрации Тогда
				ДобавитьСообщение(Сообщения, "Не удалось зарегистрировать " + СоответствиеКомандРегистрацииСертификатовПредставлениям[Эл.Ключ] + " в системном хранилище """ + СоответствиеИдентификаторовХранилищПредставлениям[Эл.Значение] + """!");
				Возврат Ложь;
			Иначе
				ПредставлениеСертификата = СоответствиеКомандРегистрацииСертификатовПредставлениям[Эл.Ключ];
				ДобавитьСообщение(Сообщения, ВРЕГ(Лев(ПредставлениеСертификата, 1)) + Сред(ПредставлениеСертификата, 2) + " успешно зарегистрирован в системном хранилище """ + СоответствиеИдентификаторовХранилищПредставлениям[Эл.Значение] + """.", Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Регистрация сертификатов в системе
	///////////////////////////////////////////////////////////////////////////////
	
	Возврат Истина;
	
КонецФункции

Функция ПрименитьИзмененныеНастройки(УчетнаяЗапись, ТаблицаИсправлений, ЗапрашиватьПодтверждениеОПрименении = Неопределено, УведомлятьТолькоОбОшибках = Ложь) Экспорт
	
	Сообщения = СоздатьТаблицуСообщений();
	
	// определяем, нужно ли настраивать
	Если ЗапрашиватьПодтверждениеОПрименении = Неопределено Тогда
		ЗапроситьПодтверждение = (УчетнаяЗапись.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Включена);
	Иначе
		ЗапроситьПодтверждение = ЗапрашиватьПодтверждениеОПрименении;
	КонецЕсли;
	Если ЗапроситьПодтверждение Тогда
		СледуетНастроить = ПоказатьФормуИзмененийНастроек(ТаблицаИсправлений, УчетнаяЗапись);
	Иначе
		СледуетНастроить = Истина;
	КонецЕсли;
	Если СледуетНастроить <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// настраиваем
	РезультатНастройки = НастроитьПоРОКИ(УчетнаяЗапись, ТаблицаИсправлений, Сообщения);
	Если НЕ РезультатНастройки Тогда
		ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках);
		Возврат Ложь;
	КонецЕсли;
	
	ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках);
	Возврат Истина;
	
КонецФункции

Функция ПолучитьТаблицуНеобходимыхИсправлений(НастройкиИБ, НастройкиРОКИ)
	
	Исправления = Новый ТаблицаЗначений;
	Исправления.Колонки.Добавить("Настройка");
	Исправления.Колонки.Добавить("Представление");
	Исправления.Колонки.Добавить("СтароеЗначение");
	Исправления.Колонки.Добавить("НовоеЗначение");
	Исправления.Колонки.Добавить("ДопПараметр");
	
	Если НастройкиИБ.ПредназначенаДляДокументооборотаСФНС <> НастройкиРОКИ.ПредназначенаДляДокументооборотаСФНС Тогда
		ОпределитьИзменение(Исправления, "ИзменитьПризнакДокументооборотаСФНС", НастройкиИБ.ПредназначенаДляДокументооборотаСФНС, НастройкиРОКИ.ПредназначенаДляДокументооборотаСФНС, "Изменен признак возможности документооборота с ФНС по учетной записи");
	КонецЕсли;
	
	Если НастройкиИБ.ПредназначенаДляДокументооборотаСПФР <> НастройкиРОКИ.ПредназначенаДляДокументооборотаСПФР Тогда
		ОпределитьИзменение(Исправления, "ИзменитьПризнакДокументооборотаСПФР", НастройкиИБ.ПредназначенаДляДокументооборотаСПФР, НастройкиРОКИ.ПредназначенаДляДокументооборотаСПФР, "Изменен признак возможности документооборота с ПФР по учетной записи");
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("АдресЭлектроннойПочты") Тогда
		Если нрег(НастройкиИБ.АдресЭлектроннойПочты) <> нрег(НастройкиРОКИ.АдресЭлектроннойПочты) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьАдресЭлектроннойПочты", НастройкиИБ.АдресЭлектроннойПочты, НастройкиРОКИ.АдресЭлектроннойПочты, "В настройках учетной записи изменен адрес электронной почты");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("ИдентификаторАбонента") Тогда
		Если СокрЛП(НастройкиИБ.ИдентификаторАбонента) <> СокрЛП(НастройкиРОКИ.ИдентификаторАбонента) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьИдентификаторАбонента", НастройкиИБ.ИдентификаторАбонента, НастройкиРОКИ.ИдентификаторАбонента, "В настройках учетной записи изменен идентификатор абонента");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("ИдентификаторСпецоператора") Тогда
		Если СокрЛП(НастройкиИБ.ИдентификаторСпецоператора) <> СокрЛП(НастройкиРОКИ.ИдентификаторСпецоператора) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьИдентификаторСпецоператора", НастройкиИБ.ИдентификаторСпецоператора, НастройкиРОКИ.ИдентификаторСпецоператора, "В настройках учетной записи изменен идентификатор спецоператора");
		КонецЕсли;
	КонецЕсли;
	
	// свойства сервера документооборота
	Если НастройкиРОКИ.Свойство("АдресСпецоператора") Тогда
		Если нрег(НастройкиИБ.АдресЭлектроннойПочтыПочтовогоСервера) <> нрег(НастройкиРОКИ.АдресСпецоператора) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьАдресПочтовогоСервера", НастройкиИБ.АдресЭлектроннойПочтыПочтовогоСервера, НастройкиРОКИ.АдресСпецоператора, "В настройках сервера документооборота изменен адрес электронной почты для документооборота с ФНС");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("АдресСпецоператораПФР") Тогда
		Если нрег(НастройкиИБ.АдресЭлектроннойПочтыПочтовогоСервераПФР) <> нрег(НастройкиРОКИ.АдресСпецоператораПФР) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьАдресПочтовогоСервераПФР", НастройкиИБ.АдресЭлектроннойПочтыПочтовогоСервераПФР, НастройкиРОКИ.АдресСпецоператораПФР, "В настройках сервера документооборота изменен адрес электронной почты для документооборота с ПФР");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("СертификатСОС") Тогда
		Если нрег(НастройкиИБ.СертификатПочтовогоСервера) <> нрег(НастройкиРОКИ.СертификатСОС.Отпечаток) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьСертификатПочтовогоСервера", нрег(НастройкиИБ.СертификатПочтовогоСервера), НастройкиРОКИ.СертификатСОС, "В настройках сервера документооборота изменен сертификат");
		КонецЕсли;
	КонецЕсли;
	
	
	// настройки доступа по POP3
	Если НастройкиРОКИ.Свойство("СерверPOP3") Тогда
		Если нрег(НастройкиИБ.СерверPOP3) <> нрег(НастройкиРОКИ.СерверPOP3) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьСерверPOP3", НастройкиИБ.СерверPOP3, НастройкиРОКИ.СерверPOP3, "В настройках учетной записи изменен адрес сервера POP3");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("ПортPOP3") Тогда
		Если нрег(НастройкиИБ.ПортPOP3) <> нрег(НастройкиРОКИ.ПортPOP3) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьПортPOP3", НастройкиИБ.ПортPOP3, НастройкиРОКИ.ПортPOP3, "В настройках учетной записи изменен порт сервера POP3");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("ИмяПользователяPOP3") Тогда
		Если нрег(НастройкиИБ.ИмяПользователяPOP3) <> нрег(НастройкиРОКИ.ИмяПользователяPOP3) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьИмяПользователяPOP3", НастройкиИБ.ИмяПользователяPOP3, НастройкиРОКИ.ИмяПользователяPOP3, "В настройках учетной записи изменено имя пользователя POP3");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("ПарольPOP3") Тогда
		Если нрег(НастройкиИБ.ПарольPOP3) <> нрег(НастройкиРОКИ.ПарольPOP3) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьПарольPOP3", НастройкиИБ.ПарольPOP3, НастройкиРОКИ.ПарольPOP3, "В настройках учетной записи изменен пароль POP3");
		КонецЕсли;
	КонецЕсли;
	
	
	// настройки доступа по SMTP
	Если НастройкиРОКИ.Свойство("СерверSMTP") Тогда
		Если нрег(НастройкиИБ.СерверSMTP) <> нрег(НастройкиРОКИ.СерверSMTP) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьСерверSMTP", НастройкиИБ.СерверSMTP, НастройкиРОКИ.СерверSMTP, "В настройках учетной записи изменен адрес сервера SMTP");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиРОКИ.Свойство("ПортSMTP") Тогда
		Если нрег(НастройкиИБ.ПортSMTP) <> нрег(НастройкиРОКИ.ПортSMTP) Тогда
			ОпределитьИзменение(Исправления, "ИзменитьПортSMTP", НастройкиИБ.ПортSMTP, НастройкиРОКИ.ПортSMTP, "В настройках учетной записи изменен порт сервера SMTP");
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиИБ.ТребуетсяSMTPАутентификация Тогда // считается, что аутентификация на сервере SMTP не требуется никогда
		ОпределитьИзменение(Исправления, "ИзменитьФлагТребуетсяSMTPАутентификация", Истина, Ложь, "В настройках учетной записи изменен признак необходимости аутентификации на сервере SMTP");
	КонецЕсли;
	
	
	// проверяем необходимость обновления информации о сертификатах ответственных лиц организации
	Если НастройкиРОКИ.Свойство("Сертификаты") И ТипЗнч(НастройкиРОКИ.Сертификаты) = Тип("ТаблицаЗначений") Тогда
		
		Сертификаты = НастройкиРОКИ.Сертификаты;
		
		// проверяем сертификат руководителя
		Если НЕ ЗначениеЗаполнено(НастройкиИБ.СертификатРуководителя) Тогда
			
			// сначала ищем сертификат руководителя
			СертификатыРуководителя = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 1));
			
			// если не найден - сертификат ответственного за шифрование
			Если СертификатыРуководителя.Количество() = 0 Тогда
				СертификатыРуководителя = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 3));
			КонецЕсли;
			
			// если сертификат ответственного не найден, то ищем сертификат главного бухгалтера
			Если СертификатыРуководителя.Количество() = 0 Тогда
				СертификатыРуководителя = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 2));
			КонецЕсли;
			
			// если и сертификат главного бухгалтера не найден, то берем первый в списке
			Если СертификатыРуководителя.Количество() = 0 Тогда
				Если Сертификаты.Количество() > 0 Тогда
					СертификатыРуководителя = Новый Массив;
					СертификатыРуководителя.Добавить(Сертификаты[0]);
				КонецЕсли;
			КонецЕсли;
			
			Если СертификатыРуководителя.Количество() > 0 Тогда
				ОпределитьИзменение(Исправления, "ИзменитьСертификатРуководителя", нрег(НастройкиИБ.СертификатРуководителя), СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СертификатыРуководителя[0]), "В настройках учетной записи изменен сертификат руководителя");
			КонецЕсли;
			
		Иначе
			СертификатИБВСписке = Ложь;
			
			// сначала ищем сертификат руководителя
			СертификатыРуководителя = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 1));
			
			// если не найден - сертификат ответственного за шифрование
			Если СертификатыРуководителя.Количество() = 0 Тогда
				СертификатыРуководителя = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 3));
			КонецЕсли;
			
			// если сертификат ответственного не найден, то ищем сертификат главного бухгалтера
			Если СертификатыРуководителя.Количество() = 0 Тогда
				СертификатыРуководителя = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 2));
			КонецЕсли;
			
			// если и сертификат главного бухгалтера не найден, то берем первый в списке
			Если СертификатыРуководителя.Количество() = 0 Тогда
				Если Сертификаты.Количество() > 0 Тогда
					СертификатыРуководителя = Новый Массив;
					СертификатыРуководителя.Добавить(Сертификаты[0]);
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого СертификатРуководителя Из СертификатыРуководителя Цикл
				Если нрег(СертификатРуководителя.Отпечаток) = нрег(НастройкиИБ.СертификатРуководителя) Тогда
					СертификатИБВСписке = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СертификатИБВСписке Тогда
				Если СертификатыРуководителя.Количество() = 0 Тогда
					НовоеЗначение = Новый Структура("Отпечаток");
				Иначе
					НовоеЗначение = СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СертификатыРуководителя[0]);
				КонецЕсли;
				ОпределитьИзменение(Исправления, "ИзменитьСертификатРуководителя", нрег(НастройкиИБ.СертификатРуководителя), НовоеЗначение, "В настройках учетной записи изменен сертификат руководителя");
			КонецЕсли;
			
		КонецЕсли;
		
		// проверяем сертификат главного бухгалтера
		Если НЕ ЗначениеЗаполнено(НастройкиИБ.СертификатГлавногоБухгалтера) Тогда
			СертификатыБухгалтера = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 2));
			Если СертификатыБухгалтера.Количество() > 0 Тогда
				ОпределитьИзменение(Исправления, "ИзменитьСертификатГлавногоБухгалтера", нрег(НастройкиИБ.СертификатГлавногоБухгалтера), СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СертификатыБухгалтера[0]), "В настройках учетной записи изменен сертификат главного бухгалтера");
			КонецЕсли;
		Иначе
			СертификатИБВСписке = Ложь;
			СертификатыБухгалтера = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 2));
			Для Каждого СертификатБухгалтера Из СертификатыБухгалтера Цикл
				Если нрег(СертификатБухгалтера.Отпечаток) = нрег(НастройкиИБ.СертификатГлавногоБухгалтера) Тогда
					СертификатИБВСписке = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СертификатИБВСписке Тогда
				Если СертификатыБухгалтера.Количество() = 0 Тогда
					НовоеЗначение = Новый Структура("Отпечаток");
				Иначе
					НовоеЗначение = СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СертификатыБухгалтера[0]);
				КонецЕсли;
				ОпределитьИзменение(Исправления, "ИзменитьСертификатГлавногоБухгалтера", нрег(НастройкиИБ.СертификатГлавногоБухгалтера), НовоеЗначение, "В настройках учетной записи изменен сертификат главного бухгалтера");
			КонецЕсли;
		КонецЕсли;
		
		// проверяем сертификат ответственного за шифрование
		Если НЕ ЗначениеЗаполнено(НастройкиИБ.СертификатДляШифрования) Тогда
			СертификатыДляШифрования = Сертификаты.НайтиСтроки(Новый Структура("ПризнакШифрования", Истина));
			Если СертификатыДляШифрования.Количество() = 0 Тогда
				СертификатыДляШифрования = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 3));
			КонецЕсли;
			Если СертификатыДляШифрования.Количество() > 0 Тогда
				ОпределитьИзменение(Исправления, "ИзменитьСертификатДляШифрования", нрег(НастройкиИБ.СертификатДляШифрования), СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СертификатыДляШифрования[0]), "В настройках учетной записи изменен сертификат для шифрования");
			КонецЕсли;
		Иначе
			СертификатИБВСписке = Ложь;
			СертификатыДляШифрования = Сертификаты.НайтиСтроки(Новый Структура("ПризнакШифрования", Истина));
			Если СертификатыДляШифрования.Количество() = 0 Тогда
				СертификатыДляШифрования = Сертификаты.НайтиСтроки(Новый Структура("ТипПодписи", 3));
			КонецЕсли;
			Для Каждого СертификатДляШифрования Из СертификатыДляШифрования Цикл
				Если нрег(СертификатДляШифрования.Отпечаток) = нрег(НастройкиИБ.СертификатДляШифрования) Тогда
					СертификатИБВСписке = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СертификатИБВСписке Тогда
				ОпределитьИзменение(Исправления, "ИзменитьСертификатДляШифрования", нрег(НастройкиИБ.СертификатДляШифрования), СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СертификатыДляШифрования[0]), "В настройках учетной записи изменен сертификат для шифрования");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// проверка ИФНС
	Если НастройкиРОКИ.Свойство("ИФНСы") И ТипЗнч(НастройкиРОКИ.ИФНСы) = Тип("ТаблицаЗначений") Тогда
		
		// проверка основной ИФНС
		ИФНСы = НастройкиРОКИ.ИФНСы;
		Если ИФНСы.Количество() = 1 Тогда
			ОсновнаяИФНС = ИФНСы[0];
		Иначе
			ОсновнаяИФНС = ИФНСы.Найти(Истина,"ИФНСПоУмолчанию");
		КонецЕсли;
		Если НастройкиИБ.КодНалоговогоОргана <> ОсновнаяИФНС.Код Тогда
			ОпределитьИзменение(Исправления, "ИзменитьОсновнуюИФНС", нрег(НастройкиИБ.КодНалоговогоОргана), СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(ОсновнаяИФНС), "В настройках учетной записи изменен налоговый орган");
		КонецЕсли;
		
		// формируем массив кодов ИФНС, задействованных по данным РОКИ
		МассивКодовИФНС = ИФНСы.ВыгрузитьКолонку("Код");
		
		// получаем из базы информацию об этих отделениях ПФР
		СведенияИзИБ = ПолучитьСвойстваИФНСИзИБ(МассивКодовИФНС);
		
		// проверка всех ИФНС
		Для Каждого СтрИФНС Из ИФНСы Цикл
		
			//Если нрег(НастройкиИБ.СертификатНалоговогоОргана) <> нрег(ОсновнаяИФНС.СертификатИФНС.Отпечаток) Тогда
			//	ОпределитьИзменение(Исправления, "ИзменитьСертификатИФНС", нрег(НастройкиИБ.СертификатНалоговогоОргана), ОсновнаяИФНС.СертификатИФНС, "Изменен сертификат налогового органа, указанного в настройках учетной записи");
			//КонецЕсли;
			//
			//// проверяем на необходимость регистрации сертификата почтового сервера
			//Если НЕ СертификатЗарегистрированВХранилище(ОсновнаяИФНС.СертификатИФНС.Отпечаток, "AddressBook") Тогда
			//	ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатНалоговогоОргана", , ОсновнаяИФНС.СертификатИФНС, "Сертификат налогового органа, указанного в настройках учетной записи, не зарегистрирован в системе");
			//КонецЕсли;
			
			// ищем ИФНС по коду
			КодИФНС = СокрЛП(СтрИФНС.Код);
			ЗаписьИФНС = СведенияИзИБ.Найти(КодИФНС, "Код");
			Если ЗаписьИФНС = Неопределено Тогда
				ОпределитьИзменение(Исправления, "ЗарегистрироватьИФНС", , КодИФНС, "Налоговый орган с кодом " + КодИФНС + " не определен в информационной базе", СтрИФНС.Наименование);
			КонецЕсли;
			
			// проверяем на необходимость изменения списка сертификатов инспекции ФНС в ИБ
			СертификатыИФНСсРОКИ = СтрИФНС.Сертификаты.ВыгрузитьКолонку("Отпечаток");
			СертификатыИФНСИзИБ = ?(ЗаписьИФНС = Неопределено, Неопределено, ЗаписьИФНС.Сертификаты);
			Если НЕ СравнитьМассивыБезУчетаПорядкаЭлементов(СертификатыИФНСсРОКИ, СертификатыИФНСИзИБ) Тогда
				ОпределитьИзменение(Исправления, "ИзменитьСертификатИФНС", СертификатыИФНСИзИБ, СтрИФНС.Сертификаты, "Сертификат налогового органа с кодом " + КодИФНС + " изменен", КодИФНС);
			КонецЕсли;
			
			// проверяем на необходимость добавления сертификатов ИФНС в список в ИБ и регистрации в системе
			Для Каждого СтрСертификатИФНС Из СтрИФНС.Сертификаты Цикл
				
				// проверяем на необходимость регистрации в системе
				Если НЕ СертификатЗарегистрированВХранилище(СтрСертификатИФНС.Отпечаток, "AddressBook") Тогда
					ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатНалоговогоОргана", , СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СтрСертификатИФНС), "Сертификат налогового органа с кодом " + КодИФНС + " не зарегистрирован в системе", КодИФНС);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	// проверка отделений ПФР
	ОтделенияПФР = Неопределено;
	Если НастройкиРОКИ.Свойство("ОтделенияПФР", ОтделенияПФР) Тогда
		
		// формируем массив кодов отделений ПФР, задействованных по данным РОКИ
		МассивКодовОтделенийПФР = ОтделенияПФР.ВыгрузитьКолонку("Код");
		
		// получаем из базы информацию об этих отделениях ПФР
		СведенияИзИБ = ПолучитьСвойстваОтделенийПФРИзИБ(МассивКодовОтделенийПФР);
		
		// перебираем отделения ПФР с РОКИ и определяем необходимость создания записи в справочнике отделений ПФР,
		// обновления списка сертификатов и регистрации их в системе
		Для Каждого СтрОтделениеПФР Из ОтделенияПФР Цикл
			
			// ищем отделение ПФР по коду
			КодОрганаПФР = СокрЛП(СтрОтделениеПФР.Код);
			ЗаписьОрганПФР = СведенияИзИБ.Найти(КодОрганаПФР, "Код");
			Если ЗаписьОрганПФР = Неопределено Тогда
				ОпределитьИзменение(Исправления, "ЗарегистрироватьОрганПФР", , КодОрганаПФР, "Орган ПФР с кодом " + КодОрганаПФР + " не определен в информационной базе", СтрОтделениеПФР.Наименование);
			КонецЕсли;
			
			// проверяем на необходимость изменения списка сертификатов органа ПФР в ИБ
			СертификатыОрганаПФРсРОКИ = СтрОтделениеПФР.Сертификаты.ВыгрузитьКолонку("Отпечаток");
			СертификатыОрганаПФРИзИБ = ?(ЗаписьОрганПФР = Неопределено, Неопределено, ЗаписьОрганПФР.Сертификаты);
			Если НЕ СравнитьМассивыБезУчетаПорядкаЭлементов(СертификатыОрганаПФРсРОКИ, СертификатыОрганаПФРИзИБ) Тогда
				ОпределитьИзменение(Исправления, "ИзменитьСертификатОрганаПФР", СертификатыОрганаПФРИзИБ, СтрОтделениеПФР.Сертификаты, "Сертификат органа ПФР с кодом " + КодОрганаПФР + " изменен", КодОрганаПФР);
			КонецЕсли;
			
			// проверяем на необходимость добавления сертификатов отделения ПФР в список в ИБ и регистрации в системе
			Для Каждого СтрСертификатОтделения Из СтрОтделениеПФР.Сертификаты Цикл
				
				// проверяем на необходимость регистрации в системе
				Если НЕ СертификатЗарегистрированВХранилище(СтрСертификатОтделения.Отпечаток, "AddressBook") Тогда
					ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатОрганаПФР", , СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СтрСертификатОтделения), "Сертификат органа ПФР с кодом " + КодОрганаПФР + " не зарегистрирован в системе", КодОрганаПФР);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	// проверка на необходимость регистрации сертификата СОС
	Если НастройкиРОКИ.Свойство("СертификатСОС") И НЕ СертификатЗарегистрированВХранилище(НастройкиРОКИ.СертификатСОС.Отпечаток, "AddressBook") Тогда
		ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатСОС", , НастройкиРОКИ.СертификатСОС, "Сертификат спецоператора не зарегистрирован в системе");
	КонецЕсли;
	
	// проверка на необходимость регистрации корневого сертификата ГНИВЦ
	Если НастройкиРОКИ.Свойство("СертификатКорневойГНИВЦ") И НЕ СертификатЗарегистрированВХранилище(НастройкиРОКИ.СертификатКорневойГНИВЦ.Отпечаток, "ROOT") Тогда
		ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатКорневойГНИВЦ", , НастройкиРОКИ.СертификатКорневойГНИВЦ, "Корневой сертификат ГНИВЦ не зарегистрирован в системе");
	КонецЕсли;
	
	// проверка на необходимость регистрации корневого сертификата Такском
	Если НастройкиРОКИ.Свойство("СертификатКорневойТакском") И НЕ СертификатЗарегистрированВХранилище(НастройкиРОКИ.СертификатКорневойТакском.Отпечаток, "ROOT") Тогда
		ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатКорневойТакском", , НастройкиРОКИ.СертификатКорневойТакском, "Корневой сертификат спецоператора не зарегистрирован в системе");
	КонецЕсли;
	
	// проверка на необходимость регистрации кросс-сертификата Такском
	Если НастройкиРОКИ.Свойство("СертификатКРОСС") И НЕ СертификатЗарегистрированВХранилище(НастройкиРОКИ.СертификатКРОСС.Отпечаток, "CA") Тогда
		ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатКроссГНИВЦ", , НастройкиРОКИ.СертификатКРОСС, "Кросс-сертификат ГНИВЦ не зарегистрирован в системе");
	КонецЕсли;
	
	
	// проверка не необходимость регистрации корневых сертификатов ПФР
	СертификатыКорневыеПФР = Неопределено;
	Если НастройкиРОКИ.Свойство("СертификатыКорневыеПФР", СертификатыКорневыеПФР) Тогда
		Для Каждого СтрКорневойСертификатПФР Из СертификатыКорневыеПФР Цикл
			Если НЕ СертификатЗарегистрированВХранилище(СтрКорневойСертификатПФР.Отпечаток, "ROOT") Тогда
				ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатКорневойПФР", , СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СтрКорневойСертификатПФР), "Корневой сертификат, используемый при обмене с ПФР, не зарегистрирован в системе");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// проверка не необходимость регистрации кросс-сертификатов ПФР
	СертификатыКроссПФР = Неопределено;
	Если НастройкиРОКИ.Свойство("СертификатыКРОССПФР", СертификатыКроссПФР) Тогда
		Для Каждого СтрКроссСертификатПФР Из СертификатыКроссПФР Цикл
			Если НЕ СертификатЗарегистрированВХранилище(СтрКроссСертификатПФР.Отпечаток, "CA") Тогда
				ОпределитьИзменение(Исправления, "ЗарегистрироватьСертификатКРОССПФР", , СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(СтрКроссСертификатПФР), "Кросс-сертификат, используемый при обмене с ПФР, не зарегистрирован в системе");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	// возвращаем таблицу-результат
	Возврат Исправления;
	
КонецФункции

Функция СравнитьМассивыБезУчетаПорядкаЭлементов(Массив1, Массив2)
	
	Если (НЕ ЗначениеЗаполнено(Массив1) И ЗначениеЗаполнено(Массив2))
	ИЛИ (НЕ ЗначениеЗаполнено(Массив2) И ЗначениеЗаполнено(Массив1)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// обходим элементы первого массива и ищем их во втором
	Для Каждого Эл Из Массив1 Цикл
		Если Массив2.Найти(Эл) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	// обходим элементы второго массива и ищем их в первом
	Для Каждого Эл Из Массив2 Цикл
		Если Массив1.Найти(Эл) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьСвойстваОтделенийПФРИзИБ(КодыОтделенийПФР)
	
	// создаем таблицу-результат
	СведенияОбОтделениях = Новый ТаблицаЗначений;
	СведенияОбОтделениях.Колонки.Добавить("Код");
	СведенияОбОтделениях.Колонки.Добавить("Наименование");
	СведенияОбОтделениях.Колонки.Добавить("Сертификаты");
	
	// получаем из ИБ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОрганыПФР.Код,
	                      |	ОрганыПФР.Наименование,
	                      |	ОрганыПФР.Сертификаты.(
	                      |		Сертификат
	                      |	)
	                      |ИЗ
	                      |	Справочник.ОрганыПФР КАК ОрганыПФР
	                      |ГДЕ
	                      |	ОрганыПФР.Код В(&Код)");
	Запрос.УстановитьПараметр("Код", КодыОтделенийПФР);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// формируем результат
	Пока Выборка.Следующий() Цикл
		
		НовСтр = СведенияОбОтделениях.Добавить();
		НовСтр.Код = СокрЛП(Выборка.Код);
		НовСтр.Наименование = СокрЛП(Выборка.Наименование);
		
		СертификатыОрганаПФР = Новый Массив;
		ВыборкаСертификаты = Выборка.Сертификаты.Выбрать();
		Пока ВыборкаСертификаты.Следующий() Цикл
			СертификатыОрганаПФР.Добавить(СокрЛП(ВыборкаСертификаты.Сертификат));
		КонецЦикла;
		НовСтр.Сертификаты = СертификатыОрганаПФР;
		
	КонецЦикла;
	
	Возврат СведенияОбОтделениях;
	
КонецФункции

Функция ПолучитьСвойстваИФНСИзИБ(КодыИФНС)
	
	// создаем таблицу-результат
	СведенияОбИФНС = Новый ТаблицаЗначений;
	СведенияОбИФНС.Колонки.Добавить("Код");
	СведенияОбИФНС.Колонки.Добавить("Наименование");
	СведенияОбИФНС.Колонки.Добавить("Сертификаты");
	
	// получаем из ИБ
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ИФНСы.Код,
	                      |	ИФНСы.Наименование,
	                      |	ИФНСы.Сертификаты.(
	                      |		Сертификат
	                      |	)
	                      |ИЗ
	                      |	Справочник.НалоговыеОрганы КАК ИФНСы
	                      |ГДЕ
	                      |	ИФНСы.Код В(&Код)");
	Запрос.УстановитьПараметр("Код", КодыИФНС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	// формируем результат
	Пока Выборка.Следующий() Цикл
		
		НовСтр = СведенияОбИФНС.Добавить();
		НовСтр.Код = СокрЛП(Выборка.Код);
		НовСтр.Наименование = СокрЛП(Выборка.Наименование);
		
		СертификатыИФНС = Новый Массив;
		ВыборкаСертификаты = Выборка.Сертификаты.Выбрать();
		Пока ВыборкаСертификаты.Следующий() Цикл
			СертификатыИФНС.Добавить(СокрЛП(ВыборкаСертификаты.Сертификат));
		КонецЦикла;
		НовСтр.Сертификаты = СертификатыИФНС;
		
	КонецЦикла;
	
	Возврат СведенияОбИФНС;
	
КонецФункции

Функция СформироватьСписокНастроекРОКИПоДеревуНастроекXML(ДеревоНастроек, Сообщения)
	
	Результат = Новый Структура;
	
	// позиционируемся на сведениях об абоненте
	УзелRegistrationFile = НайтиПодчиненныйУзел(ДеревоНастроек, "RegistrationFile");
	Если УзелRegistrationFile = Неопределено Тогда
		ДобавитьСообщение(Сообщения, "Некорректная структура файла настроек!");
		Возврат Результат;
	КонецЕсли;
	
	УзелRegistration = НайтиПодчиненныйУзел(УзелRegistrationFile, "Registration");
	Если УзелRegistration = Неопределено Тогда
		ДобавитьСообщение(Сообщения, "Некорректная структура файла настроек!");
		Возврат Результат;
	КонецЕсли;
	
	УзелAbonent = НайтиПодчиненныйУзел(УзелRegistration, "Abonent");
	Если УзелAbonent = Неопределено Тогда
		ДобавитьСообщение(Сообщения, "Некорректная структура файла настроек!");
		Возврат Результат;
	КонецЕсли;
	
	// заполняем пароль
	УзелIdentifier = НайтиПодчиненныйУзел(УзелAbonent, "Identifier");
	Если УзелIdentifier <> Неопределено Тогда
		ИдентификаторАбонента = СокрЛП(УзелIdentifier.Значение);
		Результат.Вставить("ИдентификаторАбонента", ИдентификаторАбонента);
		Результат.Вставить("ИдентификаторСпецоператора", Лев(ИдентификаторАбонента, 3));
	КонецЕсли;
	
	УзелAbsos = НайтиПодчиненныйУзел(УзелAbonent, "AbSos");
	Если УзелAbsos = Неопределено Тогда
		ДобавитьСообщение(Сообщения, "Некорректная структура файла настроек!");
		Возврат Результат;
	КонецЕсли;
	
	
	// заполняем параметры сервера POP3
	ПараметрыСервераPOP3 = РазложитьСтрокуАдресаСервера(НайтиПодчиненныйУзел(УзелAbsos, "AbSOS_POP3"));
	Если ПараметрыСервераPOP3 <> Неопределено Тогда
		Результат.Вставить("СерверPOP3", ПараметрыСервераPOP3.Сервер);
		Результат.Вставить("ПортPOP3", ПараметрыСервераPOP3.Порт);
	КонецЕсли;
	
	// заполняем параметры сервера SMTP
	ПараметрыСервераSMTP = РазложитьСтрокуАдресаСервера(НайтиПодчиненныйУзел(УзелAbsos, "AbSOS_SMTP"));
	Если ПараметрыСервераSMTP <> Неопределено Тогда
		Результат.Вставить("СерверSMTP", ПараметрыСервераSMTP.Сервер);
		Результат.Вставить("ПортSMTP", ПараметрыСервераSMTP.Порт);
	КонецЕсли;
	
	// заполняем адрес электронной почты и имя пользователя
	УзелEmailAbSOS = НайтиПодчиненныйУзел(УзелAbsos, "EmailAbSOS");
	Если УзелEmailAbSOS <> Неопределено Тогда
		Результат.Вставить("АдресЭлектроннойПочты", СокрЛП(УзелEmailAbSOS.Значение));
		ИмяПользователя = ВыделитьИмяПользователяИзEmail(УзелEmailAbSOS);
		Если ЗначениеЗаполнено(ИмяПользователя) Тогда
			Результат.Вставить("ИмяПользователяPOP3", СокрЛП(ИмяПользователя));
		КонецЕсли;
	КонецЕсли;
	
	// заполняем пароль
	УзелAbSOSPSW = НайтиПодчиненныйУзел(УзелAbsos, "AbSOSPSW");
	Если УзелAbSOSPSW <> Неопределено Тогда
		Результат.Вставить("ПарольPOP3", СокрЛП(УзелAbSOSPSW.Значение));
	КонецЕсли;
	
	УзелEmailSosSOS = НайтиПодчиненныйУзел(УзелAbsos, "EmailSosSOS");
	Если УзелEmailSosSOS <> Неопределено Тогда
		Результат.Вставить("АдресСпецоператора", СокрЛП(УзелEmailSosSOS.Значение));
	КонецЕсли;
	
	
	// заполняем признак сдачи напрямую
	УзелPR_GPR = НайтиПодчиненныйУзел(УзелAbsos, "PR_GPR");
	Если УзелPR_GPR <> Неопределено Тогда
		Результат.Вставить("ПризнакСдачиНапрямую", ПреобразоватьXMLКЗначению("Булево", УзелPR_GPR.Значение));
	КонецЕсли;
	
	
	// заполняем сведения о сертификатах абонента
	СертификатыАбонента = Новый ТаблицаЗначений;
	СертификатыАбонента.Колонки.Добавить("ИмяВладельца");
	СертификатыАбонента.Колонки.Добавить("ДолжностьВладельца");
	СертификатыАбонента.Колонки.Добавить("ДействителенС");
	СертификатыАбонента.Колонки.Добавить("ДействителенПо");
	СертификатыАбонента.Колонки.Добавить("Отпечаток");
	СертификатыАбонента.Колонки.Добавить("Сертификат");
	СертификатыАбонента.Колонки.Добавить("ПризнакШифрования");
	СертификатыАбонента.Колонки.Добавить("ТипПодписи");
	УзелCertificates = НайтиПодчиненныйУзел(УзелAbsos, "Certificates");
	Если УзелCertificates <> Неопределено Тогда
		УзлыCertificate_Ab = НайтиПодчиненныеУзлы(УзелCertificates, "Certificate_Ab");
		Для Каждого УзелCertificate_Ab Из УзлыCertificate_Ab Цикл
			СвойстваСертификатаПоУзлу(УзелCertificate_Ab, СертификатыАбонента.Добавить());
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("Сертификаты", СертификатыАбонента);
	
	
	// заполняем сведения об ИФНС
	ИФНСы = Новый ТаблицаЗначений;
	ИФНСы.Колонки.Добавить("Код");
	ИФНСы.Колонки.Добавить("Наименование");
	ИФНСы.Колонки.Добавить("Сертификаты");
	ИФНСы.Колонки.Добавить("ИФНСПоУмолчанию");
	ИФНСы.Колонки.Добавить("СерверДокументооборота");
	ИФНСы.Колонки.Добавить("СертификатПочтовогоСервера");
	УзлыIFNS = НайтиПодчиненныеУзлы(УзелAbsos, "IFNS");
	Для Каждого УзелIFNS Из УзлыIFNS Цикл
		
		СтрИФНС = ИФНСы.Добавить();
		
		УзелIFNS_CODE = НайтиПодчиненныйУзел(УзелIFNS, "IFNS_CODE");
		Если УзелIFNS_CODE <> Неопределено Тогда
			СтрИФНС.Код = СокрЛП(УзелIFNS_CODE.Значение);
		КонецЕсли;
		
		//УзелCertificate_IFNS = НайтиПодчиненныйУзел(УзелIFNS, "Certificate_IFNS");
		//Если УзелCertificate_IFNS <> Неопределено Тогда
		//	СтрИФНС.СертификатИФНС = СвойстваСертификатаПоУзлу(УзелCertificate_IFNS);
		//КонецЕсли;
		//"IFNS_name"
		
		УзелIFNS_name = НайтиПодчиненныйУзел(УзелIFNS, "IFNS_name");
		Если УзелIFNS_name <> Неопределено Тогда
			СтрИФНС.Наименование = СокрЛП(УзелIFNS_name.Значение);
		КонецЕсли;
		
		СертификатыИФНС = СоздатьТаблицуСертификатов();
		УзлыCertificate_IFNS = НайтиПодчиненныеУзлы(УзелIFNS, "Certificate_IFNS");
		Для Каждого УзелCertificate_IFNS Из УзлыCertificate_IFNS Цикл
			НовыйСертификатИФНС = СертификатыИФНС.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйСертификатИФНС, СвойстваСертификатаПоУзлу(УзелCertificate_IFNS));
		КонецЦикла;
		СтрИФНС.Сертификаты = СертификатыИФНС;
		
		УзелDuty_EMail = НайтиПодчиненныйУзел(УзелIFNS, "Duty_EMail");
		Если УзелDuty_EMail <> Неопределено Тогда
			СтрИФНС.ИФНСПоУмолчанию = ПреобразоватьXMLКЗначению("Булево", УзелDuty_EMail.Значение);
		КонецЕсли;
		
		УзелPostserver = НайтиПодчиненныйУзел(УзелIFNS, "Postserver");
		Если УзелPostserver <> Неопределено Тогда
			УзелEmailPOST = НайтиПодчиненныйУзел(УзелPostserver, "EmailPOST");
			Если УзелEmailPOST <> Неопределено Тогда
				СтрИФНС.СерверДокументооборота = СокрЛП(УзелEmailPOST.Значение);
			КонецЕсли;
			УзелCertificate_Post = НайтиПодчиненныйУзел(УзелPostserver, "Certificate_Post");
			Если УзелCertificate_Post <> Неопределено Тогда
				СтрИФНС.СертификатПочтовогоСервера = СвойстваСертификатаПоУзлу(УзелCertificate_Post);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Результат.Вставить("ИФНСы", ИФНСы);
	
	
	// заполняем сведения об отделениях ПФР
	УзелPFR = НайтиПодчиненныйУзел(УзелAbsos, "PFR");
	Если ЗначениеЗаполнено(УзелPFR) Тогда
		
		// заполняем адрес спецоператора для ПФР
		УзелEmailSosPFR = НайтиПодчиненныйУзел(УзелPFR, "EmailSosPFR");
		Если УзелEmailSosPFR <> Неопределено Тогда
			Результат.Вставить("АдресСпецоператораПФР", СокрЛП(УзелEmailSosPFR.Значение));
		КонецЕсли;
		
		// заполняем таблицу отделений ПФР
		ОтделенияПФР = Новый ТаблицаЗначений;
		ОтделенияПФР.Колонки.Добавить("Код");
		ОтделенияПФР.Колонки.Добавить("Наименование");
		ОтделенияПФР.Колонки.Добавить("Сертификаты");
		
		УзелDirections = НайтиПодчиненныйУзел(УзелPFR, "Directions");
		Если ЗначениеЗаполнено(УзелDirections) Тогда
			
			УзлыDirection = НайтиПодчиненныеУзлы(УзелDirections, "Direction");
			Для Каждого УзелDirection Из УзлыDirection Цикл
				
				НовоеОтделениеПФР = ОтделенияПФР.Добавить();
				
				УзелPFRYprCode = НайтиПодчиненныйУзел(УзелDirection, "PFRYprCode");
				Если УзелPFRYprCode <> Неопределено Тогда
					НовоеОтделениеПФР.Код = СокрЛП(УзелPFRYprCode.Значение);
				КонецЕсли;
				
				УзелPFRYprName = НайтиПодчиненныйУзел(УзелDirection, "PFRYprName");
				Если УзелPFRYprName <> Неопределено Тогда
					НовоеОтделениеПФР.Наименование = СокрЛП(УзелPFRYprName.Значение);
				КонецЕсли;
				
				УзелPFRCerts = НайтиПодчиненныйУзел(УзелDirection, "PFRCerts");
				Если ЗначениеЗаполнено(УзелPFRCerts) Тогда
					
					СертификатыОтделенияПФР = СоздатьТаблицуСертификатов();
					
					УзлыCertificate_PFR = НайтиПодчиненныеУзлы(УзелPFRCerts, "Certificate_PFR");
					Для Каждого УзелCertificate_PFR Из УзлыCertificate_PFR Цикл
						НовыйСертификатОтделенияПФР = СертификатыОтделенияПФР.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйСертификатОтделенияПФР, СвойстваСертификатаПоУзлу(УзелCertificate_PFR));
					КонецЦикла;
					
					НовоеОтделениеПФР.Сертификаты = СертификатыОтделенияПФР;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Результат.Вставить("ОтделенияПФР", ОтделенияПФР);
		
	КонецЕсли;
	
	
	// заполняем родительские сертификаты
	УзелCert_CA = НайтиПодчиненныйУзел(УзелRegistration, "Cert_CA");
	Если УзелCert_CA <> Неопределено Тогда
		УзелCert_ROOT_GNIVC = НайтиПодчиненныйУзел(УзелCert_CA, "Cert_ROOT_GNIVC");
		Если УзелCert_ROOT_GNIVC <> Неопределено Тогда
			Результат.Вставить("СертификатКорневойГНИВЦ", СвойстваСертификатаПоУзлу(УзелCert_ROOT_GNIVC));
		КонецЕсли;
		УзелCert_ROOT_SOS = НайтиПодчиненныйУзел(УзелCert_CA, "Cert_ROOT_SOS");
		Если УзелCert_ROOT_SOS <> Неопределено Тогда
			Результат.Вставить("СертификатКорневойТакском", СвойстваСертификатаПоУзлу(УзелCert_ROOT_SOS));
		КонецЕсли;
		УзелCert_SOS = НайтиПодчиненныйУзел(УзелCert_CA, "Cert_SOS");
		Если УзелCert_SOS <> Неопределено Тогда
			Результат.Вставить("СертификатСОС", СвойстваСертификатаПоУзлу(УзелCert_SOS));
		КонецЕсли;
		УзелCert_CROSS = НайтиПодчиненныйУзел(УзелCert_CA, "Cert_CROSS");
		Если УзелCert_CROSS <> Неопределено Тогда
			Результат.Вставить("СертификатКРОСС", СвойстваСертификатаПоУзлу(УзелCert_CROSS));
		КонецЕсли;
		//УзелCert_CROSS_PFR = НайтиПодчиненныйУзел(УзелCert_CA, "Cert_CROSS_PFR");
		//Если УзелCert_CROSS_PFR <> Неопределено Тогда
		//	Результат.Вставить("СертификатКРОСС_ПФР", СвойстваСертификатаПоУзлу(УзелCert_CROSS_PFR));
		//КонецЕсли;
	КонецЕсли;
	
	
	// заполняем сертификаты ПФР (их может не быть, если обмен с ПФР не задействован по учетной записи)
	УзелCertPFR = НайтиПодчиненныйУзел(УзелRegistration, "Cert_PFR");
	Если УзелCertPFR <> Неопределено Тогда
		
		// заполняем таблицу корневых сертификатов ПФР
		КорневыеСертификатыПФР = СоздатьТаблицуСертификатов();
		УзелRoot = НайтиПодчиненныйУзел(УзелCertPFR, "Root");
		Если УзелRoot <> Неопределено Тогда
			УзлыCertificate_PFR = НайтиПодчиненныеУзлы(УзелRoot, "Certificate_PFR");
			Для Каждого УзелCertificate_PFR Из УзлыCertificate_PFR Цикл
				КорневойСертификатПФР = КорневыеСертификатыПФР.Добавить();
				ЗаполнитьЗначенияСвойств(КорневойСертификатПФР, СвойстваСертификатаПоУзлу(УзелCertificate_PFR));
			КонецЦикла;
		КонецЕсли;
		Результат.Вставить("СертификатыКорневыеПФР", КорневыеСертификатыПФР);
		
		// заполняем таблицу кросс-сертификатов ПФР
		КроссСертификатыПФР = СоздатьТаблицуСертификатов();
		УзелCROSS = НайтиПодчиненныйУзел(УзелCertPFR, "CROSS");
		Если УзелCROSS <> Неопределено Тогда
			УзлыCertificate_PFR = НайтиПодчиненныеУзлы(УзелCROSS, "Certificate_PFR");
			Для Каждого УзелCertificate_PFR Из УзлыCertificate_PFR Цикл
				КроссСертификатПФР = КроссСертификатыПФР.Добавить();
				ЗаполнитьЗначенияСвойств(КроссСертификатПФР, СвойстваСертификатаПоУзлу(УзелCertificate_PFR));
			КонецЦикла;
		КонецЕсли;
		Результат.Вставить("СертификатыКРОССПФР", КроссСертификатыПФР);
		
	КонецЕсли;
	
	
	// инициализируем признаки обмена с ФНС и ПФР
	Результат.Вставить("ПредназначенаДляДокументооборотаСФНС", УзлыIFNS.Количество() > 0);
	Результат.Вставить("ПредназначенаДляДокументооборотаСПФР", ЗначениеЗаполнено(УзелPFR));
	
	
	// возвращаем результат
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с криптографией

Функция РасшифроватьТранспортныйКонтейнерРОКИ(ИмяФайлаВложения, Сообщения, ПризнакОшибки = Неопределено) Экспорт
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// пытаемся расшифровать
	ИмяФайлаСРасшифрованнымиДанными = ПолучитьИмяВременногоФайла("xml");
	Попытка
		Крипт.PKCS7Расшифровать(ИмяФайлаВложения, ИмяФайлаСРасшифрованнымиДанными);
	Исключение
		ДобавитьСообщение(Сообщения, "Не удалось расшифровать контейнер с настройками!");
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяФайлаСРасшифрованнымиДанными;
	
КонецФункции

Функция ЗарегистрироватьСертификатВСистеме(Сертификат, Хранилище, ОтпечатокСертификата = Неопределено) Экспорт
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипЗнчСертификат = ТипЗнч(Сертификат);
	Если ТипЗнчСертификат = Тип("ДвоичныеДанные") Тогда
		ФайлСертификата = ПолучитьИмяВременногоФайла("cer");
		Сертификат.Записать(ФайлСертификата);
	ИначеЕсли ТипЗнчСертификат = Тип("ХранилищеЗначения") Тогда
		ФайлСертификата = ПолучитьИмяВременногоФайла("cer");
		Сертификат.Получить().Записать(ФайлСертификата);
	Иначе
		ФайлСертификата = Сертификат;
	КонецЕсли;
	
	Попытка
		Крипт.ИмпортироватьСертификат(ФайлСертификата, Хранилище);
		ОтпечатокСертификата = Крипт.Отпечаток;
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Если ТипЗнчСертификат = Тип("ДвоичныеДанные") ИЛИ ТипЗнчСертификат = Тип("ХранилищеЗначения") Тогда
		УдалитьФайлы(ФайлСертификата);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с XML

Функция ВосстановитьXMLВДерево(ИмяФайла, Сообщения, Узел = Неопределено, ЧтениеXML = Неопределено)
	
	Если Узел = Неопределено Тогда
		
		ВерхнийУровень = Истина;
		Узел = Новый ДеревоЗначений;
		Узел.Колонки.Добавить("Параметр");
		Узел.Колонки.Добавить("Значение");
		
		ТекстXML = ПрочитатьТекстИзФайла(ИмяФайла, , Истина);
		
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(ТекстXML);
		
	Иначе
		ВерхнийУровень = Ложь;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовСтр = Узел.Строки.Добавить();
				НовСтр.Параметр = нрег(ЧтениеXML.Имя);
				ВосстановитьXMLВДерево(ИмяФайла, Сообщения, НовСтр, ЧтениеXML);
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Возврат Неопределено;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст Тогда
				Узел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ДобавитьСообщение(Сообщения, "Некорректный формат файла настроек!" + Символы.ПС + ИнформацияОбОшибке().Описание);
	КонецПопытки;
	
	Если ВерхнийУровень Тогда
		ЧтениеXML.Закрыть();
		Возврат Узел;
	КонецЕсли;
	
КонецФункции

Функция ПреобразоватьXMLКЗначению(Тип, СтрокаXML)
	
	Если ТипЗнч(Тип) = Тип("Строка") Тогда
		_Тип = Тип(Тип);
	Иначе
		_Тип = Тип;
	КонецЕсли;
	
	Если _Тип = Тип("Дата") Тогда
		Возврат ДатаПоСтроке(СтрокаXML);
	Иначе
		Попытка
			Возврат XMLЗначение(_Тип, СтрокаXML);
		Исключение
			Возврат ОбщегоНазначения.ПустоеЗначениеТипа(_Тип);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

Функция НайтиПодчиненныйУзел(Родитель, ИмяПодчиненногоУзла)
	
	Возврат Родитель.Строки.Найти(нрег(ИмяПодчиненногоУзла), "Параметр");
	
КонецФункции

Функция НайтиПодчиненныеУзлы(Родитель, ИмяПодчиненногоУзла)
	
	Возврат Родитель.Строки.НайтиСтроки(Новый Структура("Параметр", нрег(ИмяПодчиненногоУзла)));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с кэшем файлов настроек

Процедура СохранитьВКэшеФайлНастроек(УчетнаяЗапись, ИмяРесурсаСНастройками, ФайлНастроек, Расшифрован, ДатаФайла) Экспорт
	
	Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникОбъект.УчетныеЗаписиДокументооборота") Тогда
		УчетнаяЗаписьСсылка = ?(УчетнаяЗапись.ЭтоНовый(), УчетнаяЗапись.ПолучитьСсылкуНового(), УчетнаяЗапись.Ссылка);
	Иначе
		УчетнаяЗаписьСсылка = УчетнаяЗапись;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ФайлыСведенийРОКИ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.УчетнаяЗапись = УчетнаяЗаписьСсылка;
	МенеджерЗаписи.ИмяРесурса = ИмяРесурсаСНастройками;
	МенеджерЗаписи.Расшифрован = Расшифрован;
	МенеджерЗаписи.ДатаФайла = ДатаФайла;
	
	Попытка
		МенеджерЗаписи.Размер = ОпределитьРазмер(ФайлНастроек);
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ФайлНастроек), Новый СжатиеДанных);
		МенеджерЗаписи.Записать(Истина);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьЗакэшированныйФайлНастроек(УчетнаяЗапись, ПараметрыСоединения, ДатаОбновленияФайлаНаСервере = Неопределено, Расшифрован = Ложь, Сообщения)
	
	Если ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ФайлыСведенийРОКИ.Данные,
	                      |	ФайлыСведенийРОКИ.Расшифрован,
	                      |	ФайлыСведенийРОКИ.ДатаФайла
	                      |ИЗ
	                      |	РегистрСведений.ФайлыСведенийРОКИ КАК ФайлыСведенийРОКИ
	                      |ГДЕ
	                      |	ФайлыСведенийРОКИ.УчетнаяЗапись = &УчетнаяЗапись
	                      |	И ФайлыСведенийРОКИ.ИмяРесурса = &ИмяРесурса");
	Если ЗначениеЗаполнено(ДатаОбновленияФайлаНаСервере) Тогда
		Запрос.Текст = Запрос.Текст + "
						  |	И ФайлыСведенийРОКИ.ДатаФайла = &ДатаФайла";
		Запрос.УстановитьПараметр("ДатаФайла", ДатаОбновленияФайлаНаСервере);
	Иначе
		Запрос.Текст = Запрос.Текст + "
						  |УПОРЯДОЧИТЬ ПО
						  |	ФайлыСведенийРОКИ.ДатаФайла УБЫВ";
	КонецЕсли;
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ИмяРесурса", ПараметрыСоединения.ИмяРесурсаСНастройками);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Данные = Выборка.Данные;
		Если ЗначениеЗаполнено(Данные) Тогда
			ДатаОбновленияФайлаНаСервере = Выборка.ДатаФайла;
			Расшифрован = Выборка.Расшифрован;
			ФайлНастроек = ПолучитьИмяВременногоФайла();
			Попытка
				Данные.Получить().Записать(ФайлНастроек);
				Возврат ФайлНастроек;
			Исключение
				ДобавитьСообщение(Сообщения, "Ошибка разбора файла с информацией о настройках учетной записи:" + Символы.ПС + ИнформацияОбОшибке().Описание);
				Соединение = Неопределено;
				Возврат Неопределено;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сервером

Функция СоединитьсяССерверомРОКИ(ПараметрыСоединения, Сообщения)
	
	// инициализируем настройки прокси, если они определены
	НастройкиПрокси = ПолучитьНастройкиПрокси();
	Если ЗначениеЗаполнено(НастройкиПрокси.ИмяПользователя) Тогда
		Прокси = Новый ИнтернетПрокси;
		Прокси.Пользователь = НастройкиПрокси.ИмяПользователя;
		Прокси.Пароль = НастройкиПрокси.Пароль;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	// устанавливаем соединение
	Попытка
		Возврат Новый HTTPСоединение(ПараметрыСоединения.ИмяСервераРОКИ, , , , Прокси);
	Исключение
		ДобавитьСообщение(Сообщения, "Не удалось установить соединение с сервером ""Такском"": " + ИнформацияОбОшибке().Описание);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьФайлССервера(Соединение, ИмяФайла, ИнформацияОбОшибке = Неопределено)
	
	ВремФайл = ПолучитьИмяВременногоФайла(РасширениеФайла(ИмяФайла));
	Попытка
		Соединение.Получить(ИмяФайла, ВремФайл);
		Возврат ВремФайл;
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		//Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СформироватьПараметрыСоединенияССервером(УчетнаяЗапись, Организация, ЗапрашиватьПараметрыОрганизацииПриНеобходимости = Ложь, Сообщения)
	
	Если УчетнаяЗапись = Неопределено ИЛИ НЕ УчетнаяЗапись.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			ПарамОрганизация = Неопределено;
			Если ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота") Тогда
				Организация = ОпределитьОрганизациюПоУчетнойЗаписи(УчетнаяЗапись);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Организация) Тогда
				Если НЕ ЗапрашиватьПараметрыОрганизацииПриНеобходимости Тогда
					ДобавитьСообщение(Сообщения, "Не удалось определить ИНН\КПП налогоплательщика!");
					Возврат Неопределено;
				КонецЕсли;
				ФормаПараметров = ПолучитьФорму("РОКИПараметрыАвтонастройкиНовойУчетнойЗаписи");
				ПараметрыОрганизации = ФормаПараметров.ОткрытьМодально();
				Если ПараметрыОрганизации = Неопределено Тогда
					ДобавитьСообщение(Сообщения, "Не удалось определить ИНН\КПП налогоплательщика!");
					Возврат Неопределено;
				ИначеЕсли ПараметрыОрганизации.Свойство("Организация") Тогда
					Организация = ПараметрыОрганизации.Организация;
				Иначе
					Организация = ПараметрыОрганизации;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ИНН = Организация["ИНН"];
		КПП = Организация["КПП"];
		ПредставлениеОрганизация = ?(ТипЗнч(Организация) = Тип("СправочникСсылка.Организации"), "" + Организация, "");
	Иначе
		ИНН = СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя);
		КПП = СокрЛП(УчетнаяЗапись.КППУполномоченногоПредставителя);
		ПредставлениеОрганизация = СокрЛП(УчетнаяЗапись.ПолноеНаименованиеУполномоченногоПредставителя);
	КонецЕсли;
		
	Если СтрДлина(ИНН) <> 10 И СтрДлина(ИНН) <> 12 Тогда
		ДобавитьСообщение(Сообщения, "Некорректно задан ИНН организации " + ПредставлениеОрганизация + "!");
		Возврат Неопределено;
	ИначеЕсли СтрДлина(ИНН) = 10 И СтрДлина(КПП) <> 9 Тогда
		ДобавитьСообщение(Сообщения, "Некорректно задан КПП организации " + ПредставлениеОрганизация + "!");
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрДлина(ИНН) = 12 Тогда
		ИННКПП = ИНН;
	Иначе
		ИННКПП = ИНН + КПП;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ИмяСервераРОКИ", "cert01.taxcom.ru");
	Результат.Вставить("ИмяРесурсаДТ", "/config/sprinter/" + ИННКПП + "/dt.txt");
	Результат.Вставить("ИмяРесурсаСНастройками", "/config/sprinter/" + ИННКПП + "/config.xml.enc");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДатуОбновленияФайлаНастроекНаСервере(Соединение, ПараметрыСоединения, Сообщения)
	
	// получаем ресурс dt
	ИнформацияОбОшибке = Неопределено;
	ИмяФайлаДТ = ПолучитьФайлССервера(Соединение, ПараметрыСоединения.ИмяРесурсаДТ, ИнформацияОбОшибке);
	Если ИмяФайлаДТ = Неопределено Тогда
		ДобавитьСообщение(Сообщения, "На сервере ""Такском"" не найдена информация о настройках учетной записи (отсутствует файл " + ПараметрыСоединения.ИмяРесурсаДТ + ")!
							|" + ИнформацияОбОшибке.Описание);
		Соединение = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем значение даты из файла dt
	ЗначениеИзФайлаДТ = ПолучитьДатуИзФайлаДТ(ИмяФайлаДТ);
	УдалитьФайлы(ИмяФайлаДТ);
	Если ЗначениеИзФайлаДТ = Неопределено Тогда
		ДобавитьСообщение(Сообщения, "Некорректный файл с информацией о дате обновления настроек на сервере ""Такском""!");
		Соединение = Неопределено;
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеИзФайлаДТ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа со вспомогательными формами

Процедура ОтобразитьИнформациюВФормеПрогресса(Форма, ТолькоЕслиОткрыта, Информация, ОтражатьВСтрокеСостояния = Истина) Экспорт
	
	Если ТолькоЕслиОткрыта И (Форма = Неопределено ИЛИ НЕ Форма.Открыта()) Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма = Неопределено Тогда
		Форма = ПолучитьФорму("РОКИИдетПолучениеИнформацииССервера");
	КонецЕсли;
	
	Форма.Информация = Информация;
	
	Если НЕ Форма.Открыта() Тогда
		Форма.Открыть();
	КонецЕсли;
	
	Если ОтражатьВСтрокеСостояния Тогда
		Состояние(Информация);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьФормуПрогресса(Форма, ОтражатьВСтрокеСостояния = Истина) Экспорт
	
	Если Форма <> Неопределено И Форма.Открыта() Тогда
		Форма.Закрыть();
	КонецЕсли;
	
	Если ОтражатьВСтрокеСостояния Тогда
		Состояние();
	КонецЕсли;
	
КонецПроцедуры

Функция ПоказатьФормуИзмененийНастроек(ТаблицаИзменений, УчетнаяЗапись)
	
	ФормаИзмененийНастроек = ПолучитьФорму("РОКИИзмененияВНастройках");
	Если ФормаИзмененийНастроек.Открыта() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФормаИзмененийНастроек.ТаблицаИзменений = ТаблицаИзменений;
	ФормаИзмененийНастроек.УчетнаяЗапись = УчетнаяЗапись;
	Возврат ФормаИзмененийНастроек.ОткрытьМодально();
	
КонецФункции

Функция АвтонастройкаАктивна()
	
	АвтонастройкаАктивна = Ложь;
	Оповестить("Автонастройка параметров документооборота активна?", АвтонастройкаАктивна);
	Возврат АвтонастройкаАктивна;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с сообщениями

Функция СоздатьТаблицуСообщений() Экспорт
	
	Сообщения = Новый ТаблицаЗначений;
	Сообщения.Колонки.Добавить("Сообщение");
	Сообщения.Колонки.Добавить("Ошибка");
	Возврат Сообщения;
	
КонецФункции

Процедура ДобавитьСообщение(Сообщения, Сообщение, Ошибка = Истина)
	
	НовСтр = Сообщения.Добавить();
	НовСтр.Сообщение = Сообщение;
	НовСтр.Ошибка = Ошибка;
	
КонецПроцедуры

Процедура ВывестиСообщения(УчетнаяЗапись, Сообщения, УведомлятьТолькоОбОшибках)
	
	Если Сообщения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеУчетнаяЗапись = ?(ТипЗнч(УчетнаяЗапись) = Тип("СправочникСсылка.УчетныеЗаписиДокументооборота"), " """ + УчетнаяЗапись + """", "");
	
	Если Сообщения.Найти(Истина, "Ошибка") <> Неопределено Тогда
		Сообщить("Не удалось произвести автоматическую настройку параметров учетной записи" + ПредставлениеУчетнаяЗапись + ":", СтатусСообщения.Важное);
	Иначе
		Если НЕ УведомлятьТолькоОбОшибках Тогда
			Сообщить("Автоматическая настройка параметров учетной записи" + ПредставлениеУчетнаяЗапись + " успешно завершена:", СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;
	
	Для Инд = 1 По Сообщения.Количество() Цикл
		ТекСтр = Сообщения[Инд - 1];
		Если УведомлятьТолькоОбОшибках И НЕ ТекСтр.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		Сообщить(ТекСтр.Сообщение, ?(ТекСтр.Ошибка, СтатусСообщения.Внимание, СтатусСообщения.БезСтатуса));
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписатьСертификат64ВФайл(СтрСертификат64) Экспорт
	
	ВремФайлСертификат = ПолучитьИмяВременногоФайла("cer");
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ВремФайлСертификат, КодировкаТекста.ANSI);
		ЗаписьТекста.ЗаписатьСтроку("-----BEGIN CERTIFICATE-----");
		ЗаписьТекста.Записать(СтрСертификат64);
		ЗаписьТекста.ЗаписатьСтроку("-----END CERTIFICATE-----");
		ЗаписьТекста.Закрыть();
		Возврат ВремФайлСертификат;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции разбора XML с настройками

Процедура ОпределитьИзменение(ТаблицаИзменений, Настройка, СтароеЗначение, НовоеЗначение, Представление, ДополнительныйПараметр = Неопределено)
	
	НовСтр = ТаблицаИзменений.Добавить();
	НовСтр.Настройка = Настройка;
	НовСтр.Представление = Представление;
	НовСтр.СтароеЗначение = СтароеЗначение;
	НовСтр.НовоеЗначение = НовоеЗначение;
	НовСтр.ДопПараметр = ДополнительныйПараметр;
	
КонецПроцедуры

Функция СоздатьТаблицуСертификатов()
	
	ТаблицаСертификатов = Новый ТаблицаЗначений;
	ТаблицаСертификатов.Колонки.Добавить("ИмяВладельца");
	ТаблицаСертификатов.Колонки.Добавить("ДолжностьВладельца");
	ТаблицаСертификатов.Колонки.Добавить("ДействителенС");
	ТаблицаСертификатов.Колонки.Добавить("ДействителенПо");
	ТаблицаСертификатов.Колонки.Добавить("Отпечаток");
	ТаблицаСертификатов.Колонки.Добавить("Сертификат");
	Возврат ТаблицаСертификатов;
	
КонецФункции

Функция СвойстваИзСтрокиТаблицыЗначенийВСтруктуру(Стр)
	
	Результат = Новый Структура;
	Табл = Стр.Владелец();
	Для Каждого Колонка Из Табл.Колонки Цикл
		Результат.Вставить(Колонка.Имя, Стр[Колонка.Имя]);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Функция РасширениеФайла(ИмяФайла) Экспорт
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	Для Инд = 1 По ДлинаИмени Цикл
		ТекИнд = ДлинаИмени - Инд + 1;
		Если Сред(ИмяФайла, ТекИнд, 1) = "." Тогда
			Возврат Сред(ИмяФайла, ТекИнд + 1);
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДатуИзФайлаДТ(ФайлДТ)
	
	Попытка
		ЧтениеТекста = Новый ЧтениеТекста(ФайлДТ, "windows-1251");
		СтрокаДТ = СокрЛП(ЧтениеТекста.ПрочитатьСтроку());
		ЧтениеТекста.Закрыть();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	ВхождениеПробела = Найти(СтрокаДТ, " ");
	Если ВхождениеПробела = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДатаДТ = СокрЛП(Лев(СтрокаДТ, ВхождениеПробела - 1));
	ВремяДТ = СокрЛП(Сред(СтрокаДТ, ВхождениеПробела + 1));
	
	ВхождениеДефиса = Найти(ДатаДТ, "-");
	Если ВхождениеДефиса = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ГодДТ = СокрЛП(Лев(ДатаДТ, ВхождениеДефиса - 1));
	ДатаДТ = Сред(ДатаДТ, ВхождениеДефиса + 1);
	ВхождениеДефиса = Найти(ДатаДТ, "-");
	Если ВхождениеДефиса = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	МесяцДТ = СокрЛП(Лев(ДатаДТ, ВхождениеДефиса - 1));
	ДеньМесяцаДТ = СокрЛП(Сред(ДатаДТ, ВхождениеДефиса + 1));
	
	ВхождениеДвоеточия = Найти(ВремяДТ, ":");
	Если ВхождениеДвоеточия = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЧасДТ = СокрЛП(Лев(ВремяДТ, ВхождениеДвоеточия - 1));
	МинутаДТ = сокрЛП(Сред(ВремяДТ, ВхождениеДвоеточия + 1));
	
	Если ПустаяСтрока(ГодДТ)
	ИЛИ ПустаяСтрока(МесяцДТ)
	ИЛИ ПустаяСтрока(ДеньМесяцаДТ)
	ИЛИ ПустаяСтрока(ЧасДТ)
	ИЛИ ПустаяСтрока(МинутаДТ)
	ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ГодДТ)
	ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(МесяцДТ)
	ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ДеньМесяцаДТ)
	ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ЧасДТ)
	ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(МинутаДТ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Дата(Число(ГодДТ), Число(МесяцДТ), Число(ДеньМесяцаДТ), Число(ЧасДТ), Число(МинутаДТ), 0);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПолучитьЭлементДаты(МассивЭлементов, ИндексЭлемента)
	
	Если МассивЭлементов.Количество() <= ИндексЭлемента Тогда
		Возврат 0;
	Иначе
		ЭлементДаты = МассивЭлементов[ИндексЭлемента];
		Если ПустаяСтрока(ЭлементДаты) ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ЭлементДаты) Тогда
			Возврат 0;
		Иначе
			Возврат Число(ЭлементДаты);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ДатаПоСтроке(Знач Стр) ЭКспорт
	
	Попытка
		Если Найти(Стр, "-") <> 0 Тогда
			Если СтрДлина(Стр) > 10 Тогда
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))),
							Число(СокрЛП(Сред(Стр, 12, 2))),
							Число(СокрЛП(Сред(Стр, 15, 2))),
							Число(СокрЛП(Сред(Стр, 18, 2))));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 1, 4))),
							Число(СокрЛП(Сред(Стр, 6, 2))),
							Число(СокрЛП(Сред(Стр, 9, 2))));
			КонецЕсли;
		Иначе
			Если Найти(Стр, ":") <> 0 Тогда
				Стр = СтрЗаменить(Стр, " ", ",");
				Стр = СтрЗаменить(Стр, ":", ",");
				Стр = СтрЗаменить(Стр, ".", ",");
				Стр = СтрЗаменить(Стр, ",,", ",");
				МассивЭлементов = Новый Массив;
				ВхождениеРазделителя = Найти(Стр, ",");
				Пока ВхождениеРазделителя <> 0 Цикл
					МассивЭлементов.Добавить(СокрЛП(Лев(Стр, ВхождениеРазделителя - 1)));
					Стр = СокрЛП(Сред(Стр, ВхождениеРазделителя + 1));
					ВхождениеРазделителя = Найти(Стр, ",");
				КонецЦикла;
				Возврат Дата(ПолучитьЭлементДаты(МассивЭлементов, 2),
							ПолучитьЭлементДаты(МассивЭлементов, 1),
							ПолучитьЭлементДаты(МассивЭлементов, 0),
							ПолучитьЭлементДаты(МассивЭлементов, 3),
							ПолучитьЭлементДаты(МассивЭлементов, 4),
							ПолучитьЭлементДаты(МассивЭлементов, 5));
			Иначе
				Возврат Дата(Число(СокрЛП(Сред(Стр, 7, 4))),
							Число(СокрЛП(Сред(Стр, 4, 2))),
							Число(СокрЛП(Сред(Стр, 1, 2))));
			КонецЕсли;
		КонецЕсли;
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции

Функция СвойстваСертификатаПоУзлу(Узел, ЧтоЗаполнять = Неопределено)
	
	Если ЧтоЗаполнять = Неопределено Тогда
		ЧтоЗаполнять = Новый Структура("ИмяВладельца, ДолжностьВладельца, ДействителенС, ДействителенПо,"
										+ " Отпечаток, Сертификат, ПризнакШифрования, ТипПодписи");
	КонецЕсли;
	
	УзелSubject_CN				= НайтиПодчиненныйУзел(Узел, "Subject_CN");
	УзелSubject_OU				= НайтиПодчиненныйУзел(Узел, "Subject_OU");
	УзелValidity_Period_with	= НайтиПодчиненныйУзел(Узел, "Validity_Period_with");
	УзелValidity_Period_on		= НайтиПодчиненныйУзел(Узел, "Validity_Period_on");
	УзелThumbprint				= НайтиПодчиненныйУзел(Узел, "Thumbprint");
	УзелCert					= НайтиПодчиненныйУзел(Узел, "Cert");
	УзелCRYPT_FLAG				= НайтиПодчиненныйУзел(Узел, "CRYPT_FLAG");
	УзелSIGN_TYPE				= НайтиПодчиненныйУзел(Узел, "SIGN_TYPE");
	
	Если ЗначениеЗаполнено(УзелSubject_CN) Тогда
		ЧтоЗаполнять.ИмяВладельца = СокрЛП(УзелSubject_CN.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелSubject_OU) Тогда
		ЧтоЗаполнять.ДолжностьВладельца = СокрЛП(УзелSubject_OU.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелValidity_Period_with) Тогда
		ЧтоЗаполнять.ДействителенС = ПреобразоватьXMLКЗначению("Дата", УзелValidity_Period_with.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелValidity_Period_on) Тогда
		ЧтоЗаполнять.ДействителенПо = ПреобразоватьXMLКЗначению("Дата", УзелValidity_Period_on.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелThumbprint) Тогда
		ЧтоЗаполнять.Отпечаток = нрег(СокрЛП(УзелThumbprint.Значение));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелCert) Тогда
		ЧтоЗаполнять.Сертификат = СокрЛП(УзелCert.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелCRYPT_FLAG) Тогда
		ЧтоЗаполнять.ПризнакШифрования = ПреобразоватьXMLКЗначению("Булево", УзелCRYPT_FLAG.Значение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УзелSIGN_TYPE) Тогда
		ЧтоЗаполнять.ТипПодписи = ПреобразоватьXMLКЗначению("Число", УзелSIGN_TYPE.Значение);
	КонецЕсли;
	
	Возврат ЧтоЗаполнять;
	
КонецФункции

Функция РазложитьСтрокуАдресаСервера(ИсхУзел)
	
	Результат = Новый Структура("Сервер, Порт", "", 0);
	
	Если НЕ ЗначениеЗаполнено(ИсхУзел) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИсхСтрока = ИсхУзел.Значение;
	
	ВхождениеДвоеточия = Найти(ИсхСтрока, ":");
	Если ВхождениеДвоеточия = 0 Тогда
		Результат.Сервер = СокрЛП(ИсхСтрока);
	Иначе
		Сервер = СокрЛП(Лев(ИсхСтрока, ВхождениеДвоеточия - 1));
		Порт = СокрЛП(Сред(ИсхСтрока, ВхождениеДвоеточия + 1));
		Результат.Сервер = СокрЛП(Сервер);
		Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Порт) Тогда
			Результат.Порт = Число(Порт);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыделитьИмяПользователяИзEmail(ИсхУзел)
	
	Если НЕ ЗначениеЗаполнено(ИсхУзел) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИсхСтрока = ИсхУзел.Значение;
	
	ВхождениеРазделителя = Найти(ИсхСтрока, "@");
	Если ВхождениеРазделителя = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(Лев(ИсхСтрока, ВхождениеРазделителя - 1));
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСертификатаПоСвойствам(СвойстваСертификата) Экспорт
	
	Если НЕ ЗначениеЗаполнено(СвойстваСертификата) Тогда
		Возврат "<отсутствует>";
	КонецЕсли;
	
	Если ТипЗнч(СвойстваСертификата) = Тип("ТаблицаЗначений") ИЛИ ТипЗнч(СвойстваСертификата) = Тип("Массив") Тогда
		Возврат Формат(СвойстваСертификата.Количество(), "ЧН=") + " сертификатов";
	КонецЕсли;
	
	Наименование = "";
	Владелец = "";
	ДействителенС = "";
	ДействителенПо = "";
	Отпечаток = "";
	
	СвойстваСертификата.Свойство("Наименование", Наименование);
	СвойстваСертификата.Свойство("ИмяВладельца", Владелец);
	СвойстваСертификата.Свойство("ДействителенС", ДействителенС);
	СвойстваСертификата.Свойство("ДействителенПо", ДействителенПо);
	СвойстваСертификата.Свойство("Отпечаток", Отпечаток);
	
	ПредставлениеСертификата = "";
	Если ЗначениеЗаполнено(Наименование) Тогда
		ПредставлениеСертификата = СокрЛП(Наименование);
	ИначеЕсли ЗначениеЗаполнено(Владелец) Тогда
		ПредставлениеСертификата = СокрЛП(Владелец);
	Иначе
		ПредставлениеСертификата = СокрЛП(Отпечаток);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДействителенС) И ЗначениеЗаполнено(ДействителенПо) Тогда
		ПредставлениеСертификата = ПредставлениеСертификата + " (" + Формат(ДействителенС, "ДФ='dd.MM.yyyy HH:mm'") + " - " + Формат(ДействителенПо, "ДФ='dd.MM.yyyy HH:mm'") + ")";
	КонецЕсли;
	
	Возврат ПредставлениеСертификата;
	
КонецФункции

//
// АВТОМАТИЧЕСКАЯ НАСТРОЙКА ПАРАМЕТРОВ УЧЕТНОЙ ЗАПИСИ (ПОДДЕРЖКА РОКИ)
////////////////////////////////////////////////////////////////////////////////

Функция Отпечаток16ИзBase64(ОтпечатокBase64, ДвДанные= Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОтпечатокBase64) Тогда
		Возврат ОтпечатокBase64;
	КонецЕсли;
	
	Если ДвДанные = Неопределено Тогда
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	ДвДанные.Очистить();
	ДвДанные.ДобавитьИзСтрокиBase64(ОтпечатокBase64, Истина);
	ДвДанные.ТекущаяПозиция = 0;
	Возврат нрег(ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
	
КонецФункции

//
// АВТОМАТИЧЕСКАЯ НАСТРОЙКА ПАРАМЕТРОВ УЧЕТНОЙ ЗАПИСИ (ПОДДЕРЖКА РОКИ)
////////////////////////////////////////////////////////////////////////////////

Процедура ПоказатьДокументыЦикловОбмена(ПечатаемыеЦиклыОбмена) Экспорт
	
	Если ТипЗнч(ПечатаемыеЦиклыОбмена) <> Тип("Массив") Тогда
		ЦиклыОбмена = Новый Массив;
		ЦиклыОбмена.Добавить(ПечатаемыеЦиклыОбмена);
	Иначе
		ЦиклыОбмена = ПечатаемыеЦиклыОбмена;
	КонецЕсли;
	Если ЦиклыОбмена.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена для печати!");
		Возврат;
	КонецЕсли;
	
	// анализируем формат документооборота
	// для ФНС 534 вызываем отдельную форму настройки
	Если ЦиклыОбмена[0].ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		
		ФормаНастроекПечати = ПолучитьФорму("НастройкиГрупповойПечати534", , Новый УникальныйИдентификатор);
		ФормаНастроекПечати.ЦиклыОбмена = ЦиклыОбмена;
		РезультатНастройки = ФормаНастроекПечати.ОткрытьМодально();
		Если РезультатНастройки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		РезультатНастройки.Вставить("ФорматДокументооборота", Перечисления.ФорматыДокументооборотаСФНС.Приказ534);
		
		Для Инд = 1 По ЦиклыОбмена.Количество() Цикл
			СформироватьИПоказатьПечатныеДокументы(ЦиклыОбмена[Инд - 1], РезультатНастройки);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
	Иначе
		
		ФормаНастроекПечати = ПолучитьФорму("НастройкиГрупповойПечати", , Новый УникальныйИдентификатор);
		ФормаНастроекПечати.ЦиклыОбмена = ЦиклыОбмена;
		РезультатНастройки = ФормаНастроекПечати.ОткрытьМодально();
		Если РезультатНастройки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Инд = 1 По ЦиклыОбмена.Количество() Цикл
			СформироватьИПоказатьПечатныеДокументы(ЦиклыОбмена[Инд - 1], РезультатНастройки);
			ОбработкаПрерыванияПользователя();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьОтчетыОСостоянииЦикловОбмена(ПечатаемыеЦиклыОбмена) Экспорт
	
	Если ТипЗнч(ПечатаемыеЦиклыОбмена) <> Тип("Массив") Тогда
		ЦиклыОбмена = Новый Массив;
		ЦиклыОбмена.Добавить(ПечатаемыеЦиклыОбмена);
	Иначе
		ЦиклыОбмена = ПечатаемыеЦиклыОбмена;
	КонецЕсли;
	
	Для Инд = 1 По ЦиклыОбмена.Количество() Цикл
		СформироватьИПоказатьПечатныеДокументы(ЦиклыОбмена[Инд - 1], Новый Структура("ПечататьСостояние", Истина));
		ОбработкаПрерыванияПользователя();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С XML
//

Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
				Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
					Возврат Неопределено;
				КонецЕсли;
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

Функция СоздатьДеревоСтруктурыXML() Экспорт
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПолучитьЗначенияАтрибутовИЭлементовУзла(Узел) Экспорт
	
	Результат = Новый Структура;
	Для Каждого УзелСтр Из Узел.Строки Цикл
		Результат.Вставить(УзелСтр.Имя, УзелСтр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАтрибутыУзла(Узел) Экспорт
	
	УзлыАтрибуты = Узел.Строки.НайтиСтроки(Новый Структура("Тип", "А"));
	
	АтрибутыУзла = Новый Структура;
	Для Каждого УзелАтрибут Из УзлыАтрибуты Цикл
		АтрибутыУзла.Вставить(УзелАтрибут.Имя, УзелАтрибут.Значение);
	КонецЦикла;
	
	Возврат АтрибутыУзла;
	
КонецФункции

//
// ФУНКЦИИ РАБОТЫ С XML
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ АРХИВА ДОКУМЕНТООБОРОТА
//

Функция ВыгрузитьЦиклыОбмена(ВыгружаемыеЦиклыОбмена, ВыгружатьКонтейнеры = Истина, ВыгружатьСодержимое = Ложь, Путь = Неопределено, ДополнятьПуть = Истина) Экспорт
	
	Если ТипЗнч(ВыгружаемыеЦиклыОбмена) <> Тип("Массив") Тогда
		ЦиклыОбмена = Новый Массив;
		ЦиклыОбмена.Добавить(ВыгружаемыеЦиклыОбмена);
	Иначе
		ЦиклыОбмена = ВыгружаемыеЦиклыОбмена;
	КонецЕсли;
	
	// количество циклов обмена, по которым за один раз считывается информация из ИБ
	РазмерПорции = 10;
	
	СоответствиеСообщенияКаталогу = Новый Соответствие;
	
	// заданы ли циклы обмена
	Если НЕ ЗначениеЗаполнено(ЦиклыОбмена) Тогда
		Предупреждение("Не выбраны циклы обмена для выгрузки!");
		Возврат Ложь;
	КонецЕсли;
	
	ОбщееКоличествоФайлов = ПолучитьОбщееКоличествоВыгружаемыхФайлов(ЦиклыОбмена, ВыгружатьКонтейнеры, ВыгружатьСодержимое);
	Если ОбщееКоличествоФайлов = 0 Тогда
		Предупреждение("Нет информации для выгрузки!");
		Возврат Ложь;
	КонецЕсли;
	
	// заполнен ли путь
	Если НЕ ЗначениеЗаполнено(Путь) Тогда
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Заголовок = "Укажите каталог";
		Диалог.ПроверятьСуществованиеФайла = Истина;
		Если НЕ Диалог.Выбрать() Тогда
			Возврат Ложь;
		КонецЕсли;
		Путь = Диалог.Каталог;
	КонецЕсли;
	
	// формируем представления циклов обмена
	ПредставленияЦикловОбмена = ПолучитьПредставленияЦикловОбмена(ЦиклыОбмена);
	
	ЧислоВыгруженныхФайлов = 0;
	ЧислоВыгруженныхЦикловОбмена = 0;
	
	ОбщееЧислоЦикловОбмена = ЦиклыОбмена.Количество();
	Пока ЧислоВыгруженныхЦикловОбмена < ОбщееЧислоЦикловОбмена Цикл
		
		// формируем текущую порцию циклов обмена
		ПорцияЦиклов = Новый Массив;
		Для Инд = ЧислоВыгруженныхЦикловОбмена + 1 По Мин(ЧислоВыгруженныхЦикловОбмена + РазмерПорции, ОбщееЧислоЦикловОбмена) Цикл
			ПорцияЦиклов.Добавить(ЦиклыОбмена[Инд - 1]);
		КонецЦикла;
		ЧислоВыгруженныхЦикловОбмена = ЧислоВыгруженныхЦикловОбмена + РазмерПорции;
		
		// получаем выгружаемые файлы
		Выборка = ПолучитьВыгружаемыеФайлы(ПорцияЦиклов, ВыгружатьКонтейнеры, ВыгружатьСодержимое);
		
		// показываем форму прогресса
		ФормаПрогресса = ПолучитьФорму("ПрогрессВыгрузки");
		ФормаПрогресса.Открыть();
		
		ОбщееЧисло = Выборка.Количество();
		
		// для каждого из выгружаемых файлов...
		Пока Выборка.Следующий() Цикл
			
			ОбработкаПрерыванияПользователя();
			
			ЦиклОбмена = Выборка.ТранспортноеСообщениеЦиклОбмена;
			Сообщение = Выборка.ТранспортноеСообщение;
			ТипСообщения = Выборка.ТранспортноеСообщениеТип;
			
			ПредставлениеЦиклаОбмена = ПредставленияЦикловОбмена[ЦиклОбмена];
			КраткоеПредставлениеТипаСообщения = СоответствиеТипаСообщенияКраткомуПредставлению[ТипСообщения];
			Если НЕ ЗначениеЗаполнено(КраткоеПредставлениеТипаСообщения) Тогда
				КраткоеПредставлениеТипаСообщения = ТипСообщения;
			КонецЕсли;
			
			// если сообщение уже выгружалось, то используем каталог предыдущей выгрузки
			КаталогВыгрузки = СоответствиеСообщенияКаталогу[Сообщение];
			Если КаталогВыгрузки = Неопределено Тогда
				
				КаталогВыгрузки = Путь + ?(Прав(Путь, 1) = "\", "", "\");
				
				// дополняем путь каталогом цикла обмена
				Если ДополнятьПуть Тогда
					КаталогВыгрузки = КаталогВыгрузки + СформироватьИмяФайла(ПредставлениеЦиклаОбмена) + "\";
				КонецЕсли;
				
				// дополняем путь каталогом типа сообщения
				НомерКаталога = 1;
				ПолныйКаталогВыгрузки = КаталогВыгрузки + КраткоеПредставлениеТипаСообщения + "\";
				Пока ФайлСуществует(ПолныйКаталогВыгрузки) Цикл
					НомерКаталога = НомерКаталога + 1;
					ПолныйКаталогВыгрузки = КаталогВыгрузки + КраткоеПредставлениеТипаСообщения + " (" + Формат(НомерКаталога, "ЧГ=") + ")\";
				КонецЦикла;
				КаталогВыгрузки = ПолныйКаталогВыгрузки;
				
				// запоминаем путь сообщения
				СоответствиеСообщенияКаталогу.Вставить(Сообщение, КаталогВыгрузки);
				
			КонецЕсли;
			
			// сожержимое выгружаем в подкаталог "Содержимое" каталога сообщения
			Если Выборка.Получить(5) = "Содержимое" Тогда
				КаталогВыгрузки = КаталогВыгрузки + "Содержимое\";
			КонецЕсли;
			
			// прорисовываем состояние в форме прогресса
			ФормаПрогресса.ЦиклОбмена = ПредставлениеЦиклаОбмена;
			ФормаПрогресса.Сообщение = КраткоеПредставлениеТипаСообщения;
			ФормаПрогресса.Индикатор = ЧислоВыгруженныхФайлов / ОбщееКоличествоФайлов * 100;
			ЧислоВыгруженныхФайлов = ЧислоВыгруженныхФайлов + 1;
			
			// если каталог выгрузки не существует, то пытаемся создать
			ОбъектКаталог = Новый Файл(КаталогВыгрузки);
			Если НЕ ОбъектКаталог.Существует() Тогда
				Попытка
					СоздатьКаталог(КаталогВыгрузки);
				Исключение
					Сообщить("Ошибка создания каталога """ + КаталогВыгрузки + """:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
					Продолжить;
				КонецПопытки;
			КонецЕсли;
			
			// если в каталоге выгрузки уже присутствует файл с тем же именем,
			// то добавляем в конце имени выгружаемого файла счетчик
			Инд = 1;
			ПолноеИмяФайлаБезПрефикса = КаталогВыгрузки + СформироватьИмяФайла(Выборка.ИмяФайла);
			ПолноеИмяФайла = ПолноеИмяФайлаБезПрефикса;
			
			// определяем вхождение последней точки
			ПоследнееВхожденияТочки = 0;
			ДлинаПолногоИмениФайла = СтрДлина(ПолноеИмяФайлаБезПрефикса);
			Для Инд = 1 По ДлинаПолногоИмениФайла Цикл
				ТекИнд = ДлинаПолногоИмениФайла - Инд + 1;
				Если Сред(ПолноеИмяФайлаБезПрефикса, ТекИнд, 1) = "." Тогда
					ПоследнееВхожденияТочки = ТекИнд;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// определяем окончательное полное имя файла для сохранения
			Пока ФайлСуществует(ПолноеИмяФайла) Цикл
				Инд = Инд + 1;
				Если ПоследнееВхожденияТочки = 0 Тогда
					ПолноеИмяФайла = ПолноеИмяФайлаБезПрефикса + " (" + Формат(Инд, "ЧГ=") + ")";
				Иначе
					ПолноеИмяФайла = Лев(ПолноеИмяФайлаБезПрефикса, ПоследнееВхожденияТочки - 1) + " (" + Формат(Инд, "ЧГ=") + ")" + Сред(ПолноеИмяФайлаБезПрефикса, ПоследнееВхожденияТочки);
				КонецЕсли;
			КонецЦикла;
			
			// пробуем выгрузить
			Попытка
				Данные = Выборка.Данные.Получить();
				Если Данные <> Неопределено Тогда
					Данные.Записать(ПолноеИмяФайла);
				КонецЕсли;
			Исключение
				Сообщить("Ошибка сохранения файла на диск:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ФормаПрогресса.Закрыть();
	
	Возврат Истина;
	
КонецФункции

Функция ФайлСуществует(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	Возврат ОбъектФайл.Существует();
	
КонецФункции

Функция ПолучитьВыгружаемыеФайлы(ЦиклыОбмена, ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	Запрос = Новый Запрос;
	Запросы = Новый Массив;
	
	Если ВыгружатьСодержимое Тогда
		Запросы.Добавить("ВЫБРАТЬ &Разрешенные
						|	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
						|	СодержимоеТранспортныхКонтейнеров.Данные,
						|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение,
						|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип,
						|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена,
						|	&ИДСодержимое
						|ИЗ
						|	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						|ГДЕ
						|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						|	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						|	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Статус В (&Статусы)");
		Запрос.УстановитьПараметр("ИДСодержимое", "Содержимое");
	КонецЕсли;
	
	Если ВыгружатьКонтейнеры Тогда
		Запросы.Добавить("ВЫБРАТЬ &Разрешенные
						|	ТранспортныеКонтейнеры.ИмяФайла,
						|	ТранспортныеКонтейнеры.Данные,
						|	ТранспортныеКонтейнеры.ТранспортноеСообщение,
						|	ТранспортныеКонтейнеры.ТранспортноеСообщение.Тип,
						|	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена,
						|	&ИДКонтейнеры
						|ИЗ
						|	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						|ГДЕ
						|	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						|	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						|	И ТранспортныеКонтейнеры.ТранспортноеСообщение.Статус В (&Статусы)");
		Запрос.УстановитьПараметр("ИДКонтейнеры", "Контейнер");
	КонецЕсли;
	
	СтрОбъединитьВсе = "
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|";
	
	Для Инд = 1 По Запросы.Количество() Цикл
		ТекстЗапрос = СтрЗаменить(Запросы[Инд - 1], "&Разрешенные", ?(Инд = 1, "РАЗРЕШЕННЫЕ", ""));
		Запрос.Текст = Запрос.Текст + ?(Инд = 1, "", СтрОбъединитьВсе) + ТекстЗапрос;
	КонецЦикла;
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыПисем.Отправленное);
	Статусы.Добавить(Перечисления.СтатусыПисем.Полученное);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклыОбмена);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПолучитьОбщееКоличествоВыгружаемыхФайлов(ЦиклыОбмена, ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	Запрос = Новый Запрос;
	Запросы = Новый Массив;
	
	Если ВыгружатьСодержимое Тогда
		Запросы.Добавить("ВЫБРАТЬ &Разрешенные
						|	Количество(ИСТИНА)
						|ИЗ
						|	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						|ГДЕ
						|	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						|	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						|	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Статус В (&Статусы)");
		Запрос.УстановитьПараметр("ИДСодержимое", "Содержимое");
	КонецЕсли;
	
	Если ВыгружатьКонтейнеры Тогда
		Запросы.Добавить("ВЫБРАТЬ &Разрешенные
						|	Количество(ИСТИНА)
						|ИЗ
						|	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						|ГДЕ
						|	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						|	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ПометкаУдаления = &ПометкаУдаления
						|	И ТранспортныеКонтейнеры.ТранспортноеСообщение.Статус В (&Статусы)");
		Запрос.УстановитьПараметр("ИДКонтейнеры", "Контейнер");
	КонецЕсли;
	
	СтрОбъединитьВсе = "
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|";
	
	Для Инд = 1 По Запросы.Количество() Цикл
		ТекстЗапрос = СтрЗаменить(Запросы[Инд - 1], "&Разрешенные", ?(Инд = 1, "РАЗРЕШЕННЫЕ", ""));
		Запрос.Текст = Запрос.Текст + ?(Инд = 1, "", СтрОбъединитьВсе) + ТекстЗапрос;
	КонецЦикла;
	
	Статусы = Новый Массив;
	Статусы.Добавить(Перечисления.СтатусыПисем.Отправленное);
	Статусы.Добавить(Перечисления.СтатусыПисем.Полученное);
	Запрос.УстановитьПараметр("Статусы", Статусы);
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклыОбмена);
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Результат = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат = Результат + ?(ЗначениеЗаполнено(Выборка.Получить(0)), Выборка.Получить(0), 0);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПредставленияЦикловОбмена(ЦиклыОбмена)
	
	ПредставленияЦикловОбмена = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЦиклыОбмена.Ссылка,
	                      |	ЦиклыОбмена.Организация,
	                      |	ЦиклыОбмена.ВнешняяОрганизация,
	                      |	ЦиклыОбмена.ДатаСоздания,
	                      |	ЦиклыОбмена.Тип,
	                      |	ЦиклыОбмена.ВидОтчета,
	                      |	ЦиклыОбмена.ДатаНачалаПериода,
	                      |	ЦиклыОбмена.ДатаОкончанияПериода,
	                      |	ЦиклыОбмена.ВидДокумента,
	                      |	ЦиклыОбмена.ВидУслуги,
	                      |	ЦиклыОбмена.ФорматОтвета,
	                      |	ЦиклыОбмена.Предмет
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	                      |ГДЕ
	                      |	ЦиклыОбмена.Ссылка В(&Ссылка)");
	Запрос.УстановитьПараметр("Ссылка", ЦиклыОбмена);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПредставленияЦикловОбмена.Вставить(Выборка.Ссылка, ПредставлениеЦиклаОбмена(Выборка));
		
		//ПредставлениеЦиклаОбмена = "";
		//
		//Если Выборка.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		//	ПредставлениеЦиклаОбмена = "" + Выборка.ВидОтчета + " за " + ПредставлениеПериода(Выборка.ДатаНачалаПериода, КонецДня(Выборка.ДатаОкончанияПериода), "ФП=Истина") + " (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(Выборка.ВидДокумента) + ") от " + Выборка.ДатаСоздания;
		//ИначеЕсли Выборка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		//	ПредставлениеЦиклаОбмена = "Исх. док. для НО " + Выборка.ВнешняяОрганизация + " от " + Выборка.ДатаСоздания;
		//ИначеЕсли Выборка.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		//	ПредставлениеЦиклаОбмена = "Вход. док. от НО " + Выборка.ВнешняяОрганизация + " от " + Выборка.ДатаСоздания;
		//ИначеЕсли Выборка.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		//	ПредставлениеЦиклаОбмена = "Запрос """ + Выборка.ВидУслуги + """ (" + Выборка.ФорматОтвета + ") от " + Выборка.ДатаСоздания;
		//Иначе
		//	ПредставлениеЦиклаОбмена = Выборка.Ссылка;
		//КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставленияЦикловОбмена;
	
КонецФункции

Функция ПредставлениеЦиклаОбмена(ЦиклОбмена) Экспорт
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " (" + РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ЦиклОбмена.ВидДокумента) + ") от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		ПредставлениеЦиклаОбмена = "2-НДФЛ за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		ПредставлениеЦиклаОбмена = "Исх. док. для НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		ПредставлениеЦиклаОбмена = "Вход. док. от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		ПредставлениеЦиклаОбмена = "Вход. письмо от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		ПредставлениеЦиклаОбмена = "Вход. рассылка от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		ПредставлениеЦиклаОбмена = "Вход. групповая рассылка от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		ПредставлениеЦиклаОбмена = "Запрос """ + ЦиклОбмена.ВидУслуги + """ (" + ЦиклОбмена.ФорматОтвета + ") от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		Если НачалоДня(ЦиклОбмена.ДатаНачалаПериода) = НачалоДня(ЦиклОбмена.ДатаОкончанияПериода) Тогда
			ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.Предмет + ". Отправка от " + ЦиклОбмена.ДатаСоздания;
		ИначеЕсли ЦиклОбмена.ВидОтчета.ИсточникОтчета = "ПередачаСЗВ4вПФР" Тогда
			ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " и РСВ за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
		Иначе
			ПредставлениеЦиклаОбмена = "" + ЦиклОбмена.ВидОтчета + " за " + ПредставлениеПериода(ЦиклОбмена.ДатаНачалаПериода, КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина") + " от " + ЦиклОбмена.ДатаСоздания;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		ПредставлениеЦиклаОбмена = "Письмо для органа ПФР " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
		ПредставлениеЦиклаОбмена = "Письмо от органа ПФР " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		ПредставлениеЦиклаОбмена = "Запрос """ + ЦиклОбмена.ВидУслуги + """ (" + ЦиклОбмена.ФорматОтвета + ") от " + ЦиклОбмена.ДатаСоздания;
	Иначе
		ПредставлениеЦиклаОбмена = ЦиклОбмена.Ссылка;
	КонецЕсли;
	
	Возврат ПредставлениеЦиклаОбмена;
	
КонецФункции

//
// ФУНКЦИИ ВЫГРУЗКИ АРХИВА ДОКУМЕНТООБОРОТА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОНЛАЙН-ПРОВЕРКА РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ
//

Процедура ПроверитьОтчетСИспользованиемСервисаОнлайнПроверки(Отчет) Экспорт
	Перем ИмяФайлаВыгрузки, ТекстВыгрузки;
	
	ТипПараметра = ТипЗнч(Отчет);
	Если ТипПараметра = Тип("Форма") ИЛИ ТипПараметра = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		// если на входе - регламентированный отчет, то выгрузим его
		
		Если ТипПараметра = Тип("Форма") Тогда
			Если Отчет.Модифицированность Тогда
				Если Вопрос("Для продолжения необходимо сохранить отчет." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				Если НЕ Отчет.Сохранить() Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			СсылкаОтчет = Отчет.мСохраненныйДок.Ссылка;
			ФормаОтчета = Отчет;
		Иначе
			СсылкаОтчет = Отчет;
			ФормаОтчета = Неопределено;
		КонецЕсли;
		
		ОрганизацияОтчета = СсылкаОтчет.Организация;
		Если ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			Предупреждение("По организации отчета не включена возможность электронного документооборота с ФНС в универсальном формате!");
			Возврат;
		КонецЕсли;
		
		УчетнаяЗаписьОрганизации = УчетнаяЗаписьОрганизации(ОрганизацияОтчета);
		
		// актуализируем информацию в диалоге проверки
		ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Выгрузка регламентированного отчета...");
		
		// выгружаем отчет
		ФайлВыгрузки = ВыгрузитьРегламентированныйОтчетДляЦелейОнлайнПроверки(СсылкаОтчет, ФормаОтчета = Неопределено);
		Если ФайлВыгрузки = Неопределено Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("Не удалось выгрузить отчет!");
			Возврат;
		КонецЕсли;
		
		ОбъектФайлВыгрузки = Новый Файл(ФайлВыгрузки);
		ИмяФайлаВыгрузки = ОбъектФайлВыгрузки.Имя;
		
	ИначеЕсли ТипПараметра = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
		// если на входе электронное представление, то получим его из ИБ
		
		СсылкаОтчет = Отчет;
		ФормаОтчета = Неопределено;
		
		// актуализируем информацию в диалоге проверки
		ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Получение электронного представления из базы данных...");
		
		// получаем электронное представление отчета
		ИмяФайлаВыгрузки = Неопределено;
		ДанныеВыгрузки = Неопределено;
		ИзвлечьЭлектронноеПредставлениеИзХранилища(СсылкаОтчет, ИмяФайлаВыгрузки, ДанныеВыгрузки);
		Если ИмяФайлаВыгрузки = Неопределено Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("Не задано имя файла выгрузки!");
			Возврат;
		ИначеЕсли НЕ ЗначениеЗаполнено(ДанныеВыгрузки) Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("Отсутствует электронное представление!");
			Возврат;
		Иначе
			ДвДанныеВыгрузки = ДанныеВыгрузки.Получить();
			Если ДвДанныеВыгрузки = Неопределено Тогда
				ЗакрытьДиалогПрогрессаОнлайнПроверки();
				Предупреждение("Отсутствует электронное представление!");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ОрганизацияОтчета = СсылкаОтчет.Организация;
		Если ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("По организации отчета не включена возможность электронного документооборота с ФНС в универсальном формате!");
			Возврат;
		КонецЕсли;
		
		УчетнаяЗаписьОрганизации = УчетнаяЗаписьОрганизации(ОрганизацияОтчета);
		
		// записываем данные в файл выгрузки
		ВремКаталог = ПолучитьИмяВременногоФайла() + "\";
		СоздатьКаталог(ВремКаталог);
		ФайлВыгрузки = ВремКаталог + ИмяФайлаВыгрузки;
		ДвДанныеВыгрузки.Записать(ФайлВыгрузки);
		
	ИначеЕсли Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") <> Неопределено И ТипПараметра = Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган") Тогда
		
		СсылкаОтчет = Отчет;
		ФормаОтчета = Неопределено;
		
		// актуализируем информацию в диалоге проверки
		ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Получение электронного представления из базы данных...");
		
		ФайлВыгрузки = ВыгрузитьОтчет2НДФЛДляЦелейОнлайнПроверки(СсылкаОтчет);
		
		// 
		ОрганизацияОтчета = СсылкаОтчет.Организация;
		Если ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("По организации отчета не включена возможность электронного документооборота с ФНС в универсальном формате!");
			Возврат;
		КонецЕсли;
		
		УчетнаяЗаписьОрганизации = УчетнаяЗаписьОрганизации(ОрганизацияОтчета);
		
		ОбъектФайлВыгрузки = Новый Файл(ФайлВыгрузки);
		ИмяФайлаВыгрузки = ОбъектФайлВыгрузки.Имя;
		
	КонецЕсли;
	
	ПовторениеНеобходимо = Истина;
	Пока ПовторениеНеобходимо Цикл
		ПовторениеНеобходимо = НЕ ПовторениеНеобходимо; // сбрасываем флаг повторной попытки, при необходимо взводим ниже
		
		// вызываем онлайн-проверку
		РезультатПроверки = ОнлайнПроверкаОтчета(УчетнаяЗаписьОрганизации, ФайлВыгрузки);
		Если НЕ ЗначениеЗаполнено(РезультатПроверки) Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("Не удалось проверить отчет!");
		Иначе
			
			// анализируем код результата
			КодРезультатаПроверки = РезультатПроверки.КодРезультата;
			Если КодРезультатаПроверки = 0 Тогда
				ЗакрытьДиалогПрогрессаОнлайнПроверки();
				Ответ = Вопрос("Проверка успешно пройдена!" + Символы.ПС + "Хотите отправить отчет в ФНС сейчас?", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОтправкаРегламентированногоОтчета(СсылкаОтчет, , ФормаОтчета);
				КонецЕсли;
			ИначеЕсли КодРезультатаПроверки = 1 Тогда
				ДанныеСертификата = Неопределено;
				Если НЕ РезультатПроверки.Свойство("Сертификат", ДанныеСертификата) Тогда
					ЗакрытьДиалогПрогрессаОнлайнПроверки();
					Предупреждение("Не удалось проверить отчетность на сервере!
									|
									|Ответ сервера: " + РезультатПроверки.ПредставлениеРезультата);
				Иначе
					Если ЗарегистрироватьСертификатСервераОнлайнПроверки(ДанныеСертификата) Тогда
						ПовторениеНеобходимо = Истина;
					Иначе
						ЗакрытьДиалогПрогрессаОнлайнПроверки();
						Предупреждение("Не удалось зарегистрировать новый сертификат сервера онлайн-проверки!
										|Продолжение невозможно.");
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли КодРезультатаПроверки <> 4 Тогда
				ЗакрытьДиалогПрогрессаОнлайнПроверки();
				Если ЗначениеЗаполнено(РезультатПроверки.ПредставлениеРезультата) Тогда
					Предупреждение("Не удалось проверить отчетность на сервере!
									|
									|Ответ сервера: " + РезультатПроверки.ПредставлениеРезультата);
				Иначе
					Предупреждение("Во время проверки файла выгрузки на сервере произошла следующая неизвестная ошибка!");
				КонецЕсли;
			Иначе
				ЗакрытьДиалогПрогрессаОнлайнПроверки();
				Если ЗначениеЗаполнено(РезультатПроверки.Протокол) Тогда
					ЗагрузитьФайлВыгрузки(ФайлВыгрузки, ТекстВыгрузки);
					ПоказатьПротоколОнлайнПроверки(Отчет, ИмяФайлаВыгрузки, ТекстВыгрузки, РезультатПроверки.Протокол, РезультатПроверки.ИмяФайлаПротокола);
				Иначе
					Предупреждение("Отчет не прошел проверку! К сожалению, расширенный протокол недоступен.");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// удаляем временный каталог
	ОбъектФайлВыгрузки = Новый Файл(ФайлВыгрузки);
	УдалитьВременныйФайл(ОбъектФайлВыгрузки.Путь);
	
КонецПроцедуры

Процедура ПоказатьДетальныеРезультатыОнлайнПроверки(СвойстваВыгрузки, СвойстваРезультата)
	
	// извлекаем таблицы исходных файлов и результатов
	ТаблицаВыгрузки = СвойстваВыгрузки.Файлы;
	ТаблицаРезультата = СвойстваРезультата.РезультатыПоДокументам;
	
	// определяем дополнительные колонки в таблице результатов
	ТаблицаРезультата.Колонки.Добавить("ТипФайлаОтчета");
	ТаблицаРезультата.Колонки.Добавить("Документ");
	ТаблицаРезультата.Колонки.Добавить("ПолноеИмяФайлаВыгрузки");
	
	// заполняем новые колонки таблицы результатов
	Для Каждого СтрРезультат Из ТаблицаРезультата Цикл
		ИмяФайлаОтчета = СтрРезультат.ИмяФайлаОтчета;
		СтрФайлОтчета = ТаблицаВыгрузки.Найти(ИмяФайлаОтчета, "Имя");
		Если СтрФайлОтчета <> Неопределено Тогда
			СтрРезультат.ТипФайлаОтчета = СтрФайлОтчета.Тип;
			СтрРезультат.Документ = СтрФайлОтчета.Документ;
			СтрРезультат.ПолноеИмяФайлаВыгрузки = СвойстваВыгрузки.КаталогВыгрузки + СтрФайлОтчета.Имя;
		КонецЕсли;
	КонецЦикла;
	
	// показываем форму результатов
	ПоказатьРезультатыГрупповойОнлайнПроверки(ТаблицаРезультата);
	
КонецПроцедуры

Процедура ПоказатьРезультатыГрупповойОнлайнПроверки(ТаблицаРезультата)
	
	ФормаРезультатов = ПолучитьФорму("РезультатГрупповойОнлайнПроверки");
	Для Каждого Стр Из ТаблицаРезультата Цикл
		НовСтр = ФормаРезультатов.ТаблицаРезультатов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	ФормаРезультатов.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПроверитьОтчетСИспользованиемСервисаОнлайнПроверкиПФР(Отчет) Экспорт
	Перем ИмяФайлаВыгрузки, ТекстВыгрузки;
	
	ТипПараметра = ТипЗнч(Отчет);
	Если ТипПараметра = Тип("Форма") Тогда
		
		Если СвойствоОпределено(Отчет, "мСохраненныйДок") Тогда
			
			Если Отчет.Модифицированность Тогда
				Если Вопрос("Для продолжения необходимо сохранить отчет." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				Если НЕ Отчет.Сохранить() Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			СсылкаОтчет = Отчет.мСохраненныйДок.Ссылка;
			ФормаОтчета = Отчет;
			
		Иначе
			
			Если Отчет.Модифицированность() Тогда
				
				Если Вопрос("Для продолжения необходимо сохранить документ." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					Возврат;
				КонецЕсли;
				
				Попытка
					РезультатЗаписи = Отчет.ЗаписатьВФорме();
				Исключение
					РезультатЗаписи = Ложь;
				КонецПопытки;
				Если НЕ РезультатЗаписи Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			СсылкаОтчет = Отчет.Ссылка;
			ФормаОтчета = Отчет;
			
		КонецЕсли;
		
	Иначе
		
		СсылкаОтчет = Отчет;
		ФормаОтчета = Неопределено;
		
	КонецЕсли;
	
	ОрганизацияОтчета = СсылкаОтчет.Организация;
	Если ОрганизацияОтчета.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Предупреждение("По организации отчета не включена возможность электронного документооборота с ПФР!");
		Возврат;
	КонецЕсли;
	
	УчетнаяЗаписьОрганизации = УчетнаяЗаписьОрганизации(ОрганизацияОтчета);
	
	// актуализируем информацию в диалоге проверки
	ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Выгрузка регламентированного отчета...");
	
	// выгружаем отчет
	РезультатВыгрузкиОтчета = ВыгрузитьОтчетВПФР(СсылкаОтчет);
	Если НЕ ЗначениеЗаполнено(РезультатВыгрузкиОтчета) Тогда
		ЗакрытьДиалогПрогрессаОнлайнПроверки();
		Предупреждение("Не удалось выгрузить отчет!");
		Возврат;
	КонецЕсли;
	
	ФайлыВыгрузки = РезультатВыгрузкиОтчета.Файлы;
	Если ФайлыВыгрузки.Количество() = 0 Тогда
		ЗакрытьДиалогПрогрессаОнлайнПроверки();
		Предупреждение("Не удалось выгрузить отчет!");
		Возврат;
	КонецЕсли;
	
	// получаем свойства файла выгрузки
	МассивИменФайловВыгрузки = Новый Массив;
	Для Каждого ФайлВыгрузки Из ФайлыВыгрузки Цикл
		ИмяФайлаВыгрузки = ФайлВыгрузки.Имя;
		ПолноеИмяФайлаВыгрузки = РезультатВыгрузкиОтчета.КаталогВыгрузки + ИмяФайлаВыгрузки;
		МассивИменФайловВыгрузки.Добавить(ПолноеИмяФайлаВыгрузки);
	КонецЦикла;
	
	ПовторениеНеобходимо = Истина;
	Пока ПовторениеНеобходимо Цикл
		ПовторениеНеобходимо = НЕ ПовторениеНеобходимо; // сбрасываем флаг повторной попытки, при необходимо взводим ниже
		
		// вызываем онлайн-проверку
		РезультатПроверки = ОнлайнПроверкаОтчета(УчетнаяЗаписьОрганизации, МассивИменФайловВыгрузки);
		
		// анализируем код результата
		Если НЕ ЗначениеЗаполнено(РезультатПроверки) Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Предупреждение("Не удалось проверить отчет!");
		ИначеЕсли РезультатПроверки.КодРезультата = 0 Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Ответ = Вопрос("Проверка успешно пройдена!" + Символы.ПС + "Хотите отправить отчет в ПФР сейчас?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ОтправкаРегламентированногоОтчетаВПФР(СсылкаОтчет, , ФормаОтчета);
			КонецЕсли;
		ИначеЕсли РезультатПроверки.КодРезультата = 1 Тогда
			ДанныеСертификата = Неопределено;
			Если НЕ РезультатПроверки.Свойство("Сертификат", ДанныеСертификата) Тогда
				ЗакрытьДиалогПрогрессаОнлайнПроверки();
				Предупреждение("Не удалось проверить отчетность на сервере!
								|
								|Ответ сервера: " + РезультатПроверки.ПредставлениеРезультата);
			Иначе
				Если ЗарегистрироватьСертификатСервераОнлайнПроверки(ДанныеСертификата) Тогда
					ПовторениеНеобходимо = Истина;
				Иначе
					ЗакрытьДиалогПрогрессаОнлайнПроверки();
					Предупреждение("Не удалось зарегистрировать новый сертификат сервера онлайн-проверки!
									|Продолжение невозможно.");
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли РезультатПроверки.КодРезультата = 6 Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Если ЗначениеЗаполнено(РезультатПроверки.РезультатыПоДокументам) Тогда
				ПоказатьДетальныеРезультатыОнлайнПроверки(РезультатВыгрузкиОтчета, РезультатПроверки);
			Иначе
				Предупреждение("Отчетность не прошла проверку! К сожалению, детальные результаты недоступны.");
			КонецЕсли;
		ИначеЕсли РезультатПроверки.КодРезультата <> 4 Тогда
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Если ЗначениеЗаполнено(РезультатПроверки.ПредставлениеРезультата) Тогда
				Предупреждение("Не удалось проверить отчетность на сервере!
								|
								|Ответ сервера: " + РезультатПроверки.ПредставлениеРезультата);
			Иначе
				Предупреждение("Во время проверки файла выгрузки на сервере произошла следующая неизвестная ошибка!");
			КонецЕсли;
		Иначе
			ЗакрытьДиалогПрогрессаОнлайнПроверки();
			Если СвойствоОпределено(РезультатПроверки, "Протокол") И ЗначениеЗаполнено(РезультатПроверки.Протокол) Тогда
				ЗагрузитьФайлВыгрузки(ПолноеИмяФайлаВыгрузки, ТекстВыгрузки);
				ПоказатьПротоколОнлайнПроверки(Отчет, ИмяФайлаВыгрузки, ТекстВыгрузки, РезультатПроверки.Протокол, РезультатПроверки.ИмяФайлаПротокола);
			Иначе
				Предупреждение("Отчет не прошел проверку! К сожалению, расширенный протокол недоступен.");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// удаляем временный каталог
	УдалитьВременныйФайл(ФайлВыгрузки);
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ИмяФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьРегламентированныйОтчетДляЦелейОнлайнПроверки(Отчет, ПроверкаБлокировкиФормы)
	
	ДокВыгрузки = Документы.ВыгрузкаРегламентированныхОтчетов.СоздатьДокумент();
	Возврат ДокВыгрузки.ПолучитьФорму().ВыгрузитьОтчет(Отчет, ПроверкаБлокировкиФормы);
	
КонецФункции

Функция ЗарегистрироватьСертификатСервераОнлайнПроверки(ДанныеСертификата, ОтпечатокСертификата = Неопределено)
	
	// сохраняем сертификат в файл
	ИмяФайлаСертификата = ПолучитьИмяВременногоФайла("cer");
	ДанныеСертификата.Записать(ИмяФайлаСертификата);
	
	// регистрируем сертификат в хранилище AddressBook
	ОтпечатокСертификатаBase64 = Неопределено;
	Если НЕ ЗарегистрироватьСертификатВСистеме(ИмяФайлаСертификата, "AddressBook", ОтпечатокСертификатаBase64) ИЛИ НЕ ЗначениеЗаполнено(ОтпечатокСертификатаBase64) Тогда
		Сообщить("Не удалось зарегистрировать сертификат сервера онлайн-проверки в системном хранилище сертификатов.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	УдалитьВременныйФайл(ИмяФайлаСертификата);
	
	// регистрируем сертификат в ИБ
	ОтпечатокСертификата = Отпечаток16ИзBase64(ОтпечатокСертификатаBase64);
	КонстантыНабор = Константы.СоздатьНабор("ДокументооборотСКонтролирующимиОрганами_ОтпечатокСертификатаСервераОнлайнПроверки, ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки");
	КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ОтпечатокСертификатаСервераОнлайнПроверки = ОтпечатокСертификата;
	КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки = Новый ХранилищеЗначения(ДанныеСертификата);
	Попытка
		КонстантыНабор.Записать();
	Исключение
		Сообщить("Не удалось зарегистрировать сертификат сервера онлайн-проверки в информационной базе:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ОтобразитьВДиалогеПрогрессаОнлайнПроверки(ТекстСостояние)
	
	ФормаПрогресса = ПолучитьФорму("ПрогрессОнлайнПроверки");
	ФормаПрогресса.Состояние = ТекстСостояние;
	Если НЕ ФормаПрогресса.Открыта() Тогда
		ФормаПрогресса.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗакрытьДиалогПрогрессаОнлайнПроверки()
	
	ФормаПрогресса = ПолучитьФорму("ПрогрессОнлайнПроверки");
	Если ФормаПрогресса.Открыта() Тогда
		ФормаПрогресса.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПротоколОнлайнПроверки(Отчет, ИмяФайлаВыгрузки, ТекстВыгрузки, ПротоколПроверки, ИмяФайлаПротокола) Экспорт
	
	ФормаРезультатПроверки = ПолучитьФорму("РезультатОнлайнПроверки", , Новый УникальныйИдентификатор);
	ФормаРезультатПроверки.ИмяФайлаВыгрузки = ИмяФайлаВыгрузки;
	ФормаРезультатПроверки.Отчет = Отчет;
	ФормаРезультатПроверки.Протокол = ПротоколПроверки;
	ФормаРезультатПроверки.ИмяФайлаПротокола = ИмяФайлаПротокола;
	ФормаРезультатПроверки.ТекстВыгрузки = ТекстВыгрузки;
	ФормаРезультатПроверки.ОткрытьМодально();
	
КонецПроцедуры

Функция ПроверитьСертификат(Сертификат)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Крипт.ПроверитьСертификат(Сертификат.СерийныйНомер, Сертификат.Поставщик, , );
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПоказатьДиалогОшибкиДоступаВИнтернет(ОписаниеОшибки) Экспорт
	
	ФормаОшибкаДоступаВИнтернет = ПолучитьФорму("ОшибкаДоступаВИнтернет");
	ФормаОшибкаДоступаВИнтернет.ОписаниеОшибки = ОписаниеОшибки;
	Возврат ФормаОшибкаДоступаВИнтернет.ОткрытьМодально();
	
КонецФункции

Функция ПолучитьНастройкиПрокси() Экспорт
	
	ИмяПользователя = ВосстановитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_ИмяПользователя");
	Пароль = ВосстановитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_Пароль");
	Возврат Новый Структура("ИмяПользователя, Пароль", ИмяПользователя, Пароль);
	
КонецФункции

Функция ПолучитьИзИБСертификатСервераОнлайнПроверки() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ОтпечатокСертификатаСервераОнлайнПроверки КАК Отпечаток,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки КАК Сертификат
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Отпечаток = Выборка.Отпечаток;
		Сертификат = Выборка.Сертификат;
		Если ЗначениеЗаполнено(Отпечаток) И ЗначениеЗаполнено(Сертификат) Тогда
			Возврат Новый Структура("Отпечаток, Сертификат", Отпечаток, Сертификат);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИзИБЗарегистрироватьИПроверитьСертификатСервераОнлайнПроверки()
	
	// получаем сертификат из ИБ
	СертификатСервера = ПолучитьИзИБСертификатСервераОнлайнПроверки();
	Если СертификатСервера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем регистрацию сертификата сервера в системном хранилище и, при необходимости, регистрируем
	СертификатПолучателя = СертификатСервера.Отпечаток;
	СвойстваСертификатаПолучателя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатПолучателя, , Ложь);
	Если СвойстваСертификатаПолучателя = Неопределено Тогда
		Если НЕ ЗарегистрироватьСертификатВСистеме(СертификатСервера.Сертификат, "AddressBook") Тогда
			Сообщить("Не удалось зарегистрировать в системном хранилище сертификат сервера онлайн-проверки.", СтатусСообщения.Важное);
			Возврат Неопределено;
		Иначе
			СвойстваСертификатаПолучателя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатПолучателя, , Ложь);
			Если СвойстваСертификатаПолучателя = Неопределено Тогда
				Сообщить("Не удалось получить свойства сертификата сервера онлайн-проверки.
						|Вероятно, сертификат не зарегистрирован в системном хранилище.", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// проверяем сертификат получателя
	РезультатПроверки = ПроверитьСертификат(СвойстваСертификатаПолучателя);
	Если РезультатПроверки = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ РезультатПроверки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СвойстваСертификатаПолучателя;
	
КонецФункции

Функция ОтправитьЗапросДляОбработкиНаСерверОнлайнПроверки(ИмяФайлаЗапроса, ПолучитьСертификат = Ложь)
	
	АдресСервераОнлайнПроверки = "onlinefc.taxcom.ru";
	РесурсНаСервере = "/online_fc/online_fc.dll" + ?(ПолучитьСертификат, "?IncludeCertificate", "");
	
	// пытаемся проверить
	ПовторятьСоединение = Истина;
	Пока ПовторятьСоединение Цикл
		
		// актуализируем информацию в диалоге проверки
		ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Установка соединения с сервером онлайн-проверки...");
		
		// инициализируем настройки прокси, если они определены
		НастройкиПрокси = ПолучитьНастройкиПрокси();
		Если ЗначениеЗаполнено(НастройкиПрокси.ИмяПользователя) Тогда
			Прокси = Новый ИнтернетПрокси;
			Прокси.Пользователь = НастройкиПрокси.ИмяПользователя;
			Прокси.Пароль = НастройкиПрокси.Пароль;
		Иначе
			Прокси = Неопределено;
		КонецЕсли;
		
		// устанавливаем соединение с сервером
		Попытка
			Соединение = Новый HTTPСоединение(АдресСервераОнлайнПроверки, , , , Прокси);
		Исключение
			Сообщить("Не удалось установить соединение с сервером онлайн-проверки:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		// актуализируем информацию в диалоге проверки
		ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Отправка запроса на сервер онлайн-проверки...");
		
		// посылаем запрос
		ФайлРезультата = ПолучитьИмяВременногоФайла();
		Попытка
			Соединение.ОтправитьДляОбработки(ИмяФайлаЗапроса, РесурсНаСервере, ФайлРезультата);
			Соединение = Неопределено;
			ПовторятьСоединение = Ложь;
		Исключение
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			ПовторятьСоединение = ПоказатьДиалогОшибкиДоступаВИнтернет("Не удалось обратиться к серверу онлайн-проверки.");
			Если НЕ ПовторятьСоединение Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ФайлРезультата;
	
КонецФункции

Функция ПолучитьИзИнтернетЗарегистрироватьИПроверитьСертификатСервераОнлайнПроверки(УчетнаяЗаписьОрганизации)
	
	// актуализируем информацию в диалоге проверки
	ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Получение актуального сертификата сервера онлайн-проверки...");
	
	// инициализируем "константы"
	АдресСервераОнлайнПроверки = "onlinefc.taxcom.ru";
	РесурсНаСервере = "/online_fc/online_fc.dll?IncludeCertificate";
	
	// формируем запрос
	//ИмяФайлаЗапроса = СформироватьЗапросКСерверуОнлайнПроверки(УчетнаяЗаписьОрганизации, ИмяФайлаСертификата);
	ИмяФайлаЗапроса = СформироватьЗапросКСерверуОнлайнПроверки(УчетнаяЗаписьОрганизации);
	Если ИмяФайлаЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// отправляем запрос на сервер
	ФайлРезультата = ОтправитьЗапросДляОбработкиНаСерверОнлайнПроверки(ИмяФайлаЗапроса, Истина);
	Если ФайлРезультата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// разбираем полученный результат
	РезультатОтСервера = РазобратьРезультатОтСервераОнлайнПроверки(ФайлРезультата);
	Если РезультатОтСервера = Неопределено Тогда
		//Сообщить("Не удалось получить сертификат сервера онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли РезультатОтСервера.КодРезультата <> 5 Тогда
		ПредставлениеРезультата = РезультатОтСервера.ПредставлениеРезультата;
		Если ПредставлениеРезультата <> Неопределено Тогда
			ТекстСообщения = "Не удалось получить сертификат сервера онлайн-проверки: " + ПредставлениеРезультата;
		Иначе
			ТекстСообщения = "Не удалось получить сертификат сервера онлайн-проверки.";
		КонецЕсли;
		Сообщить(ТекстСообщения, СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли НЕ РезультатОтСервера.Свойство("КодРезультата") ИЛИ НЕ РезультатОтСервера.Свойство("Сертификат") Тогда
		Сообщить("Не удалось получить сертификат сервера онлайн-проверки: некорректный ответ сервера.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// регистрируем в ИБ и системе
	ОтпечатокСертификата = Неопределено;
	ДанныеСертификата = РезультатОтСервера.Сертификат;
	Если НЕ ЗарегистрироватьСертификатСервераОнлайнПроверки(ДанныеСертификата, ОтпечатокСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем свойства зарегистрированного в системе сертификата
	СвойстваСертификатаПолучателя = ПолучитьСвойстваСертификатаПоОтпечатку(ОтпечатокСертификата, "AddressBook", Ложь);
	Если СвойстваСертификатаПолучателя = Неопределено Тогда
		Сообщить("Ошибка регистрации в системном хранилище сертификата сервера онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем сертификат получателя
	РезультатПроверки = ПроверитьСертификат(СвойстваСертификатаПолучателя);
	Если РезультатПроверки = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ РезультатПроверки Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СвойстваСертификатаПолучателя;
	
КонецФункции

Функция ОнлайнПроверкаОтчета(УчетнаяЗаписьОрганизации, ФайлВыгрузки)
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьОрганизации) Тогда
		Сообщить("В свойствах организации отчета не задана учетная запись для документооборота с ФНС!", СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли УчетнаяЗаписьОрганизации.ОбменНапрямую Тогда
		Сообщить("В настройках учетной записи отключен признак обмена через специализированного оператора связи!
				|Возможность проверки в Интернете доступна только абонентам спецоператора ""Такском"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли НЕ УчетнаяЗаписьОрганизации.ИспользоватьСервисОнлайнПроверкиОтчетов Тогда
		Сообщить("В свойствах учетной записи организации отключена возможность использования сервиса онлайн-проверки отчетности!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// актуализируем информацию в диалоге проверки
	ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Формирование запроса к серверу онлайн-проверки...");
	
	///////////////////////////////////////////////////////////////////////////////
	// РАБОТА С СЕРТИФИКАТОМ ОТПРАВИТЕЛЯ
	
	// получаем сертификат отправителя
	СертификатОтправителя = УчетнаяЗаписьОрганизации.СертификатДляШифрования;
	Если НЕ ЗначениеЗаполнено(СертификатОтправителя) Тогда
		Сообщить("В свойствах учетной записи """ + УчетнаяЗаписьОрганизации + """ не задан сертификат для шифрования.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем свойства сертификата отправителя
	СвойстваСертификатаОтправителя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатОтправителя, "MY");
	Если СвойстваСертификатаОтправителя = Неопределено Тогда
		Сообщить("Не удалось получить свойства сертификата учетной записи """ + УчетнаяЗаписьОрганизации + """ для шифрования.
				|Вероятно, сертификат не зарегистрирован в системном хранилище.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем сертификат отправителя
	РезультатПроверки = ПроверитьСертификат(СвойстваСертификатаОтправителя);
	Если РезультатПроверки = Неопределено Тогда
		Сообщить("Не удалось проверить сертификат для шифрования учетной записи """ + УчетнаяЗаписьОрганизации + """.", СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли НЕ РезультатПроверки Тогда
		Сообщить("Сертификат для шифрования учетной записи """ + УчетнаяЗаписьОрганизации + """ не прошел проверку валидности.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// экспортируем сертификат отправителя
	ИмяФайлаСертификатаОтправителя = ЭкспортироватьСертификат(СвойстваСертификатаОтправителя);
	Если ИмяФайлаСертификатаОтправителя = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	// РАБОТА С СЕРТИФИКАТОМ ПОЛУЧАТЕЛЯ
	
	// определяем сертификат получателя
	СвойстваСертификатаПолучателя = ПолучитьИзИБЗарегистрироватьИПроверитьСертификатСервераОнлайнПроверки();
	Если НЕ ЗначениеЗаполнено(СвойстваСертификатаПолучателя) Тогда
		СвойстваСертификатаПолучателя = ПолучитьИзИнтернетЗарегистрироватьИПроверитьСертификатСервераОнлайнПроверки(УчетнаяЗаписьОрганизации);
		Если НЕ ЗначениеЗаполнено(СвойстваСертификатаПолучателя) Тогда
			Возврат Неопределено;
		КонецЕсли;
		ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Формирование запроса к серверу онлайн-проверки...");
	КонецЕсли;
	
	//// проверяем наличие зарегистрированного в ИБ сертификата сервера
	//ЗарегистрированныйВИБСертификатСервера = ПолучитьИзИБСертификатСервераОнлайнПроверки();
	
	// пакуем файл выгрузки
	ИмяФайлаАрхива = ПолучитьИмяВременногоФайла();
	РезультатАрхивирования = ЗаархивироватьФайл(ФайлВыгрузки, ИмяФайлаАрхива);
	Если НЕ РезультатАрхивирования Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем зашифрованный контейнер с файлом выгрузки
	ИмяФайлаЗашифрованногоКонтейнера = ЗашифроватьФайлPKCS7(ИмяФайлаАрхива, СвойстваСертификатаПолучателя);
	УдалитьВременныйФайл(ИмяФайлаАрхива);
	Если ИмяФайлаЗашифрованногоКонтейнера = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем запрос
	ИмяФайлаЗапроса = СформироватьЗапросКСерверуОнлайнПроверки(УчетнаяЗаписьОрганизации, ИмяФайлаСертификатаОтправителя, ИмяФайлаЗашифрованногоКонтейнера);
	Если ИмяФайлаЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ФайлРезультатаПроверки = ОтправитьЗапросДляОбработкиНаСерверОнлайнПроверки(ИмяФайлаЗапроса);
	Если ФайлРезультатаПроверки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// актуализируем информацию в диалоге проверки
	ОтобразитьВДиалогеПрогрессаОнлайнПроверки("Анализ результата проверки...");
	
	// анализируем результат
	ОбъектФайл = Новый Файл(ФайлРезультатаПроверки);
	Если НЕ ОбъектФайл.Существует() Тогда
		Сообщить("На запрос о проверке отчета не получен ответ от сервера.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// разбираем результат
	Возврат РазобратьРезультатОтСервераОнлайнПроверки(ФайлРезультатаПроверки);
	
КонецФункции

Функция XMLЗначениеВнутр(Тип, Значение)
	
	Попытка
		Возврат XMLЗначение(Тип, Значение)
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция РазобратьРезультатОтСервераОнлайнПроверки(ФайлРезультатаПроверки)
	
	СоответствиеКодаВозвратаПредставлению = Новый Соответствие;
	СоответствиеКодаВозвратаПредставлению.Вставить(-1, "произошла неизвестная ошибка.");
	СоответствиеКодаВозвратаПредставлению.Вставить(0, "проверка прошла успешно.");
	СоответствиеКодаВозвратаПредставлению.Вставить(1, "не удалось расшифровать полученные данные.");
	СоответствиеКодаВозвратаПредставлению.Вставить(2, "проверка файлов данного типа не поддерживается.");
	СоответствиеКодаВозвратаПредставлению.Вставить(3, "проверяемый файл поврежден или не соответствует требуемому формату.");
	СоответствиеКодаВозвратаПредставлению.Вставить(4, "проверка не прошла.");
	СоответствиеКодаВозвратаПредставлению.Вставить(5, "проверка не была выполнена.");
	СоответствиеКодаВозвратаПредставлению.Вставить(6, "один или несколько документов не прошли проверку.");
	
	СтекЭлементов = Новый Массив;
	
	// загружаем файл XML в дерево
	ОписаниеОшибки = "";
	ДеревоПроверки = ЗагрузитьXMLВДеревоЗначений(ФайлРезультатаПроверки, , ОписаниеОшибки);
	УдалитьВременныйФайл(ФайлРезультатаПроверки);
	Если ДеревоПроверки = Неопределено Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки:" + Символы.ПС + ОписаниеОшибки, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ДеревоПроверки.Строки.Количество() = 0 Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// позиционируемся на элементе верхнего уровня
	УзелReport = ДеревоПроверки.Строки.Найти("Report", "Имя");
	Если УзелReport = Неопределено Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// позиционируемся на узле результата
	УзелResult = УзелReport.Строки.Найти("Result", "Имя");
	Если УзелResult = Неопределено Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// ищем узлы Successed и ExtCode
	УзелSucceeded = УзелResult.Строки.Найти("Succeeded", "Имя");
	УзелExtCode = УзелResult.Строки.Найти("ExtCode", "Имя");
	Если УзелSucceeded = Неопределено ИЛИ УзелExtCode = Неопределено Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ПризнакУспешнойПроверки = XMLЗначениеВнутр(Тип("Булево"), УзелSucceeded.Значение);
	Если ПризнакУспешнойПроверки = Неопределено Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки: некорректный признак успешного завершения проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	КодЗавершения = XMLЗначениеВнутр(Тип("Число"), УзелExtCode.Значение);
	Если КодЗавершения = Неопределено Тогда
		Сообщить("Некорректный формат ответа сервера онлайн-проверки: некорректный код завершения проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Новый Структура;
	
	// загружаем из XML таблицу с детальной информацией о проверках каждого документа
	УзелDocuments = УзелReport.Строки.Найти("Documents", "Имя");
	Если УзелDocuments <> Неопределено Тогда
		
		ТаблицаРезультатовПоДокументам = Новый ТаблицаЗначений;
		ТаблицаРезультатовПоДокументам.Колонки.Добавить("ИмяФайлаОтчета");
		ТаблицаРезультатовПоДокументам.Колонки.Добавить("ИсходноеИмяФайлаПротокола");
		ТаблицаРезультатовПоДокументам.Колонки.Добавить("ИмяФайлаПротокола");
		ТаблицаРезультатовПоДокументам.Колонки.Добавить("ТипПротокола");
		ТаблицаРезультатовПоДокументам.Колонки.Добавить("РезультатПроверки");
		ТаблицаРезультатовПоДокументам.Колонки.Добавить("РезультатПроверкиСтр");
		
		УзлыDocument = УзелDocuments.Строки.НайтиСтроки(Новый Структура("Имя", "Document"));
		Для Каждого УзелDocument Из УзлыDocument Цикл
			АтрибутыУзлаDocument = ПолучитьАтрибутыУзла(УзелDocument);
			
			НовСтрТаблицыРезультатовПоДокументам = ТаблицаРезультатовПоДокументам.Добавить();
			НовСтрТаблицыРезультатовПоДокументам.ИмяФайлаОтчета = АтрибутыУзлаDocument.report;
			Если АтрибутыУзлаDocument.Свойство("protocol") Тогда
				НовСтрТаблицыРезультатовПоДокументам.ИсходноеИмяФайлаПротокола = АтрибутыУзлаDocument.protocol;
			КонецЕсли;
			Если АтрибутыУзлаDocument.Свойство("file") Тогда
				НовСтрТаблицыРезультатовПоДокументам.ИмяФайлаПротокола = АтрибутыУзлаDocument.file;
			КонецЕсли;
			Если АтрибутыУзлаDocument.Свойство("type") Тогда
				НовСтрТаблицыРезультатовПоДокументам.ТипПротокола = АтрибутыУзлаDocument.type;
			КонецЕсли;
			
			УзелResult = УзелDocument.Строки.Найти("Result", "Имя");
			Если УзелResult <> Неопределено Тогда
				АтрибутыУзлаResult = ПолучитьАтрибутыУзла(УзелResult);
				
				НовСтрТаблицыРезультатовПоДокументам.РезультатПроверки = XMLЗначениеВнутр(Тип("Булево"), АтрибутыУзлаResult.Succeeded);
				Если АтрибутыУзлаResult.Свойство("ExtCode") Тогда
					
					КодРезультатаПроверки = XMLЗначениеВнутр(Тип("Число"), АтрибутыУзлаResult.ExtCode);
					НовСтрТаблицыРезультатовПоДокументам.РезультатПроверки = КодРезультатаПроверки;
					
					ПредставлениеРезультата = СоответствиеКодаВозвратаПредставлению[КодРезультатаПроверки];
					НовСтрТаблицыРезультатовПоДокументам.РезультатПроверкиСтр = ПредставлениеРезультата;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Вставить("РезультатыПоДокументам", ТаблицаРезультатовПоДокументам);
		
	КонецЕсли;
	
	// добавляем сертификат в результат, если он есть
	УзелCertificate = УзелReport.Строки.Найти("Certificate", "Имя");
	Если УзелCertificate <> Неопределено Тогда
		Результат.Вставить("Certificate", XMLЗначениеВнутр(Тип("Строка"), УзелCertificate.Значение));
	КонецЕсли;
	
	// добавляем протокол в результат, если он есть
	УзелProtocol = УзелReport.Строки.Найти("Protocol", "Имя");
	Если УзелProtocol <> Неопределено Тогда
		Результат.Вставить("Protocol", XMLЗначениеВнутр(Тип("Строка"), УзелProtocol.Значение));
	КонецЕсли;
	
	
	// инициализируем структуру-результат
	ПредставлениеРезультата = СоответствиеКодаВозвратаПредставлению[КодЗавершения];
	Результат.Вставить("Результат", ПризнакУспешнойПроверки);
	Результат.Вставить("КодРезультата", КодЗавершения);
	Результат.Вставить("ПредставлениеРезультата", ПредставлениеРезультата);
	
	// получаем протокол
	ПротоколBase64 = Неопределено;
	Если (КодЗавершения = 4 ИЛИ КодЗавершения = 6) И Результат.Свойство("Protocol", ПротоколBase64) Тогда // получаем строку Base64 зашифрованного протокола
		
		// преобразовываем протокол в двоичные данные
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// преобразовываем протокол в двоичные данные
		Крипт = СоздатьОбъектДляРаботыСКриптографией();
		Если Крипт = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// преобразовываем контейнер из Base64 в двоичные данные
		Попытка
			ДвДанные.ДобавитьИзСтрокиBase64(ПротоколBase64, Ложь);
		Исключение
			Сообщить("Некорректный формат ответа сервера онлайн-проверки: некорректный формат протокола проверки.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		// записываем двоичные данные контейнера во временный файл
		ИмяФайлаКонтейнераПротокола = ПолучитьИмяВременногоФайла();
		Попытка
			ДвДанные.Записать(ИмяФайлаКонтейнераПротокола);
		Исключение
			Сообщить("Ошибка разбора ответа от сервера онлайн-проверки отчетности:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		// расшифровываем
		ИмяФайлаАрхиваСПротоколом = ПолучитьИмяВременногоФайла();
		Попытка
			Крипт.PKCS7Расшифровать(ИмяФайлаКонтейнераПротокола, ИмяФайлаАрхиваСПротоколом);
			РезультатРасшифровки = Истина;
		Исключение
			РезультатРасшифровки = Ложь;
		КонецПопытки;
		
		// удаляем файл контейнера
		УдалитьВременныйФайл(ИмяФайлаКонтейнераПротокола);
		
		// проверка на случай, когда расшифровка не произведена и исключение не сгенерировано (обход ошибки компоненты)
		Если РезультатРасшифровки Тогда
			ОбъектФайлИмяФайлаАрхиваСПротоколом = Новый Файл(ИмяФайлаАрхиваСПротоколом);
			Если НЕ ОбъектФайлИмяФайлаАрхиваСПротоколом.Существует() Тогда
				РезультатРасшифровки = НЕ РезультатРасшифровки;
			КонецЕсли;
		КонецЕсли;
		
		// если не удалось распаковать, то прерываемся
		Если НЕ РезультатРасшифровки Тогда
			Сообщить("Ошибка разбора ответа от сервера онлайн-проверки отчетности: не удалось расшифровать протокол.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		// распаковываем
		КаталогПротоколов = Разархивировать(ИмяФайлаАрхиваСПротоколом);
		ФайлыПротоколов = ФайлыКаталога(КаталогПротоколов);
		Если НЕ ЗначениеЗаполнено(ФайлыПротоколов) Тогда
			Сообщить("Ошибка разбора ответа от сервера онлайн-проверки отчетности.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		// если протокол один, то определяем свойства протокола в структуре результата
		// для совместимости с ранней реализацией
		Если ФайлыПротоколов.Количество() = 1 Тогда
			
			ФайлПротокола = ФайлыПротоколов[0];
			
			// читаем протокол из файла
			ОбъектЧтение = Новый ЧтениеТекста(ФайлПротокола.ПолноеИмя);
			ТекстПротокола = ОбъектЧтение.Прочитать();
			ОбъектЧтение.Закрыть();
			
			// определяем короткое имя файла протокола
			Результат.Вставить("ИмяФайлаПротокола", ФайлПротокола.Имя);
			
			// добавляем протокол в результат
			Результат.Вставить("Протокол", ТекстПротокола);
			
		КонецЕсли;
		
		// формируем полные пути к файлам протоколов в соотв. колонке таблицы РезультатыПоДокументам
		ТаблицаДокументов = Неопределено;
		Если Результат.Свойство("РезультатыПоДокументам", ТаблицаДокументов) Тогда
			Для Каждого СтрРезультат Из ТаблицаДокументов Цикл
				Если ЗначениеЗаполнено(СтрРезультат.ИмяФайлаПротокола) Тогда
					СтрРезультат.ИмяФайлаПротокола = КаталогПротоколов + СтрРезультат.ИмяФайлаПротокола;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли КодЗавершения = 1 ИЛИ КодЗавершения = 5 Тогда
		
		// получаем строку Base64 сертификата
		СертификатBase64 = Неопределено;
		Если НЕ Результат.Свойство("Certificate", СертификатBase64) Тогда
			Если КодЗавершения = 1 Тогда
				Возврат Результат;
			ИначеЕсли КодЗавершения = 5 Тогда
				Сообщить("Некорректный формат ответа сервера онлайн-проверки: в ответе на запрос о сертификате сервера отсутствуют данные сертификата.", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		// преобразовываем протокол в двоичные данные
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// преобразовываем сертификат из Base64 в двоичные данные
		Попытка
			ДвДанные.ДобавитьИзСтрокиBase64(СертификатBase64, Ложь);
		Исключение
			Сообщить("Некорректный формат ответа сервера онлайн-проверки: некорректный формат нового сертификата безопасности сервера.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		// записываем данные сертификата во временный файл
		ИмяФайлаСертификата = ПолучитьИмяВременногоФайла();
		Попытка
			ДвДанные.Записать(ИмяФайлаСертификата);
		Исключение
			Сообщить("Ошибка разбора ответа от сервера онлайн-проверки отчетности:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецПопытки;
		
		// читаем сертификат из файла
		ДанныеСертификата = Новый ДвоичныеДанные(ИмяФайлаСертификата);
		УдалитьВременныйФайл(ИмяФайлаСертификата);
		
		// добавляем сертификат в результат
		Результат.Вставить("Сертификат", ДанныеСертификата);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ФайлыКаталога(Каталог)
	
	Возврат НайтиФайлы(Каталог, "*.*");
	
КонецФункции

Функция Разархивировать(ИмяФайлаАрхива)
	
	// создаем каталог распаковки
	КаталогРаспаковки = ПолучитьИмяВременногоФайла() + "\";
	СоздатьКаталог(КаталогРаспаковки);
	
	// распаковываем все содержимое
	Попытка
		ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		ОбъектЧтение.ИзвлечьВсе(КаталогРаспаковки);
		ОбъектЧтение.Закрыть();
		Возврат КаталогРаспаковки;
	Исключение
		Сообщить("Ошибка распаковки пакета:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СформироватьЗапросКСерверуОнлайнПроверки(УчетнаяЗапись, ИмяФайлаСертификата = Неопределено, ИмяФайлаЗашифрованногоКонтейнера = Неопределено)
	
	АдресОтправителя = СокрЛП(УчетнаяЗапись.АдресЭлектроннойПочты);
	Если НЕ ЗначениеЗаполнено(АдресОтправителя) Тогда
		Сообщить("В свойствах учетной записи не указан адрес электронной почты.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// инициализируем объект для записи XML
	ИмяФайлаЗапроса = ПолучитьИмяВременногоФайла();
	ОбъектЗапись = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("windows-1251", , Ложь);
	ОбъектЗапись.ОткрытьФайл(ИмяФайлаЗапроса, ПараметрыЗаписиXML);
	ОбъектЗапись.ЗаписатьОбъявлениеXML();
	
	// выводим корневой элемент Request
	ОбъектЗапись.ЗаписатьНачалоЭлемента("Request");
	
	// выводим элемент ClientInfo
	ОбъектЗапись.ЗаписатьНачалоЭлемента("ClientInfo");
	ОбъектЗапись.ЗаписатьАтрибут("email", АдресОтправителя);
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	
	Если ИмяФайлаСертификата <> Неопределено Тогда
	
		// кодируем в Base64 сертификат
		ДвДанные.Прочитать(ИмяФайлаСертификата);
		ФайлСертификатаBase64 = ДвДанные.ПолучитьСтрокуBase64();
		
		// выводим элемент Certificate
		ОбъектЗапись.ЗаписатьНачалоЭлемента("Certificate");
		ОбъектЗапись.ЗаписатьТекст(ФайлСертификатаBase64);
		ОбъектЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	Если ИмяФайлаЗашифрованногоКонтейнера <> Неопределено Тогда
	
		// кодируем в Base64 зашифрованный контейнер
		ДвДанные.Прочитать(ИмяФайлаЗашифрованногоКонтейнера);
		ФайлЗашифрованногоКонтейнераBase64 = ДвДанные.ПолучитьСтрокуBase64();
		
		// выводим элемент Data
		ОбъектЗапись.ЗаписатьНачалоЭлемента("Data");
		ОбъектЗапись.ЗаписатьТекст(ФайлЗашифрованногоКонтейнераBase64);
		ОбъектЗапись.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	// записываем конец для корневого элемента
	ОбъектЗапись.ЗаписатьКонецЭлемента();
	
	ОбъектЗапись.Закрыть();
	
	Возврат ИмяФайлаЗапроса;
	
КонецФункции

Функция ЭкспортироватьСертификат(Сертификат, СпособКодирования = 2)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Сертификат) = Тип("Строка") Тогда
		СвойстваСертификата = ПолучитьСвойстваСертификатаПоОтпечатку(Сертификат, "MY", Ложь);
		Если СвойстваСертификата = Неопределено Тогда
			Сообщить("Не удалось найти сертификат отправителя для шифрования в системном хранилище сертификатов!", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		СвойстваСертификата = Сертификат;
	КонецЕсли;
	
	ИмяФайлаСертификата = ПолучитьИмяВременногоФайла();
	Попытка
		Крипт.ЭкспортироватьСертификат(СвойстваСертификата.СерийныйНомер, СвойстваСертификата.Поставщик, ИмяФайлаСертификата, СпособКодирования);
	Исключение
		Сообщить("Не удалось экспортировать в файл сертификат отправителя для шифрования!", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяФайлаСертификата;
	
КонецФункции

Функция ЗаархивироватьФайл(ИмяИсходногоФайла, ИмяФайлаАрхива)
	
	Если ТипЗнч(ИмяИсходногоФайла) = Тип("Массив") Тогда
		МассивФайлов = ИмяИсходногоФайла;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ИмяИсходногоФайла);
	КонецЕсли;
	
	Попытка
		ОбъектЗапись = Новый ЗаписьZipФайла(ИмяФайлаАрхива, , , , УровеньСжатияZIP.Максимальный);
		Для Каждого ЭлФайл Из МассивФайлов Цикл
			ОбъектЗапись.Добавить(ЭлФайл);
		КонецЦикла;
		ОбъектЗапись.Записать();
	Исключение
		Сообщить("Ошибка записи архива:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	Конецпопытки;
	
	Возврат Истина;
	
КонецФункции

Функция РазархивироватьФайл(ИмяФайлаАрхива, ИмяРаспакованногоФайла = Неопределено)
	
	Попытка
		ОбъектЧтение = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		Если ОбъектЧтение.Элементы.Количество() = 0 Тогда
			ОбъектЧтение.Закрыть();
			Возврат Неопределено;
		КонецЕсли;
		
		КаталогРаспаковки = ПолучитьИмяВременногоФайла() + "\";
		СоздатьКаталог(КаталогРаспаковки);
		ИмяФайлаИзАрхива = ОбъектЧтение.Элементы[0].Имя;
		
		ОбъектЧтение.Извлечь(ОбъектЧтение.Элементы[0], КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ОбъектЧтение.Закрыть();
		
		Если ИмяРаспакованногоФайла = Неопределено Тогда
			Возврат КаталогРаспаковки + ИмяФайлаИзАрхива;
		Иначе
			ПереместитьФайл(КаталогРаспаковки + ИмяФайлаИзАрхива, ИмяРаспакованногоФайла);
			Возврат ИмяРаспакованногоФайла;
		КонецЕсли;
	Исключение
		Сообщить("Ошибка распаковки архива:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ЗагрузитьФайлВыгрузки(ФайлВыгрузки, ТекстВыгрузки)
	
	// инициализируем имя файла
	ОбъектФайл = Новый Файл(ФайлВыгрузки);
	ИмяФайлаВыгрузки = ОбъектФайл.Имя;
	
	// инициализируем текст
	ОбъектЧтение = Новый ЧтениеТекста(ФайлВыгрузки, ?(ВРЕГ(Прав(ИмяФайлаВыгрузки, 3)) = "XML", КодировкаТекста.ANSI, КодировкаТекста.OEM));
	ТекстВыгрузки = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
КонецПроцедуры

// Используется только сервисом онлайн-проверки.
//
Функция ЗашифроватьФайлPKCS7(ИмяФайла, Сертификат)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяФайлаЗашифрованногоКонтейнера = ПолучитьИмяВременногоФайла();
	Попытка
		Крипт.PKCS7Зашифровать(ИмяФайла, Сертификат.СерийныйНомер, Сертификат.Поставщик, ИмяФайлаЗашифрованногоКонтейнера);
	Исключение
		Сообщить("Не удалось сформировать зашифрованный пакет для отправки на сервер онлайн-проверки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяФайлаЗашифрованногоКонтейнера;
	
КонецФункции

//
// ОНЛАЙН-ПРОВЕРКА РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСсылкуНаОтчетФормы(Форма)
	
	Если СвойствоОпределено(Форма, "мСохраненныйДок") И Форма.мСохраненныйДок <> Неопределено И СвойствоОпределено(Форма.мСохраненныйДок, "Ссылка") Тогда
		Возврат Форма.мСохраненныйДок.Ссылка;
	ИначеЕсли СвойствоОпределено(Форма, "Ссылка") Тогда
		Возврат Форма.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьСтатусОтправкиВРегламентированномОтчете(Форма) Экспорт
	
	// находим панель
	ПанельОтправки = Форма.ЭлементыФормы.Найти("ПанельОтправки");
	НадписьПанельОтправки = Форма.ЭлементыФормы.Найти("НадписьПанельОтправки");
	Если ПанельОтправки = Неопределено ИЛИ НадписьПанельОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// если организация не определена, то скроем панель
	Если НЕ СвойствоОпределено(Форма, "Организация") Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		Возврат;
	КонецЕсли;
	Организация = Форма.Организация;
	
	// определяем ссылку на отчет
	СсылкаНаОтчет = ПолучитьСсылкуНаОтчетФормы(Форма);
	
	// определяем последний цикл обмена по отчету
	Если ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		ПоследнийЦиклОбмена = ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Иначе
		ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка();
	КонецЕсли;
	
	// если у пользователя недостаточно прав для получения сведений об отправке, то скроем панель
	Если ПоследнийЦиклОбмена = Неопределено Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		Возврат;
	// если цикл обмена не найден и обмен с ФНС(!) по организации выключен, то скроем панель
	ИначеЕсли ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка() Тогда
		Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		ИЛИ НЕ Организация.УчетнаяЗаписьОбмена.ПредназначенаДляДокументооборотаСФНС Тогда
			ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем результат
	ТекстПанели = "";
	ИмеютсяОшибки = Ложь;
	ОтчетСдан = Ложь;
	
	// получаем список всех не помеченных на удаление сообщений последнего цикла
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена);
	
	Если ПоследнийЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		
		// выделяем основные типы сообщений
		СтрДекларацииНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ДекларацияНП));
		СтрПодтвержденияДекларацияНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО));
		СтрИзвещенияПодтверждениеНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияДекларацияНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО));
		СтрРезультатыПриемаДекларацияНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО));
		СтрИзвещенияРезультатПриемаНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		СтрРезультатыОбработкиДекларацияНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО));
		СтрИзвещенияРезультатОбработкиНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП));
		
		СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		
		// находим первичное
		Если СтрДекларацииНП.Количество() = 0 Тогда
			
			ТекстПанели = "Отчет не отправлялся.";
			ИмеютсяОшибки = Ложь;
			ОтчетСдан = Ложь;
			
		Иначе
			
			СтрДекларацияНП = СтрДекларацииНП[0];
			
			// получаем свойства для анализа
			СтатусПервичного = СтрДекларацияНП.Статус;
			ДатаСозданияПервичного = СтрДекларацияНП.Дата;
			ДатаОтправкиПервичного = СтрДекларацияНП.ДатаТранспорта;
			
			// отражаем статус первичного в строке статуса
			Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
				ТекстПанели = "Конверт для отправки отчета создан";
				Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ", но не отправлен. ";
			Иначе
				
				ТекстПанели = "Отчет отправлен";
				Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ". ";
				
				ВсеВходящиеПолученыИПроанализированы = Истина;
				Если СтрПодтвержденияДекларацияНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается подтверждение даты отправки. ";
				ИначеЕсли СтрИзвещенияДекларацияНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается извещение о получении. ";
				ИначеЕсли СтрРезультатыПриемаДекларацияНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее результат приема. ";
				Иначе
					
					// определяем наиболее свежее сообщение с результатом приема
					ПоследнийРезультатПриема = Неопределено;
					Для Каждого СтрРезультатПриемаДекларацияНО Из СтрРезультатыПриемаДекларацияНО Цикл
						Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаДекларацияНО.Дата > ПоследнийРезультатПриема.Дата Тогда
							ПоследнийРезультатПриема = СтрРезультатПриемаДекларацияНО;
						КонецЕсли;
					КонецЦикла;
					
					// если результат приема отрицательный, то выводим соответствующее сообщение
					Если ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
						ТекстПанели = ТекстПанели + "Отчет не принят: получено уведомление об отказе. ";
						ИмеютсяОшибки = Истина;
					Иначе
						
						Если СтрРезультатыОбработкиДекларацияНО.Количество() = 0 Тогда
							ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее результат обработки отчета. ";
						Иначе
							
							// определяем наиболее свежее сообщение с результатом обработки
							ПоследнийРезультатОбработки = Неопределено;
							Для Каждого СтрРезультатОбработки Из СтрРезультатыОбработкиДекларацияНО Цикл
								Если ПоследнийРезультатОбработки = Неопределено ИЛИ СтрРезультатОбработки.Дата > ПоследнийРезультатОбработки.Дата Тогда
									ПоследнийРезультатОбработки = СтрРезультатОбработки;
								КонецЕсли;
							КонецЦикла;
							
							// если результат обработки отрицательный, то выводим соответствующее сообщение
							Если ПоследнийРезультатОбработки.ПротоколСОшибкой Тогда
								ТекстПанели = ТекстПанели + "Отчет не принят: получено уведомление об уточнении. ";
								ИмеютсяОшибки = Истина;
							Иначе
								ТекстПанели = ТекстПанели + "Отчет сдан. ";
								ОтчетСдан = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
				ВсеПодтвержденияОтправлены = Истина;
				
				// проверяем наличие отправленных подтверждений на все подтверждения отправки
				Для Каждого СтрПодтверждениеДекларацияНО Из СтрПодтвержденияДекларацияНО Цикл
					СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
											Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,
											Перечисления.СтатусыПисем.Отправленное,
											СтрПодтверждениеДекларацияНО.Ссылка);
					СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
					Если СтрПодтверждения.Количество() = 0 Тогда
						ВсеПодтвержденияОтправлены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// проверяем наличие отправленных подтверждений на все результаты приема
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатПриемаДекларацияНО Из СтрРезультатыПриемаДекларацияНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатПриемаДекларацияНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// проверяем наличие отправленных подтверждений на все результаты обработки
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатОбработкиДекларацияНО Из СтрРезультатыОбработкиДекларацияНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатОбработкиДекларацияНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// компилируем предупреждающий текст
				СтрОбратитеВнимание = Новый Массив;
				Если СтрКритическиеОшибки.Количество() > 0 Тогда
					СтрОбратитеВнимание.Добавить("имеются критические ошибки");
					ИмеютсяОшибки = Истина;
				КонецЕсли;
				Если НЕ ВсеПодтвержденияОтправлены Тогда
					СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
				КонецЕсли;
				
				Если СтрОбратитеВнимание.Количество() > 0 Тогда
					ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
					Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
						ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
						ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
					КонецЦикла;
					ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
				КонецЕсли;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
	
		// выделяем основные типы сообщений
		СтрПервичныеСообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность));
		СтрПодтвержденияОтправки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности));
		СтрПереподписанныеПодтвержденияОтправки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности));
		СтрКвитанцииОПриеме = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности));
		СтрПротоколыВходногоКонтроля = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности));
		СтрПереподписанныеПротоколыВходногоКонтроля = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности));
		СтрУведомленияОбУточнении = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО));
		СтрПротоколы2НДФЛ = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ));
		СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
		
		// находим первичное
		Если СтрПервичныеСообщения.Количество() = 0 Тогда
			
			ТекстПанели = "Отчет не отправлялся.";
			ИмеютсяОшибки = Ложь;
			ОтчетСдан = Ложь;
			
		Иначе
			
			СтрПервичноеСообщение = СтрПервичныеСообщения[0];
			
			// получаем свойства для анализа
			СтатусПервичного = СтрПервичноеСообщение.Статус;
			ДатаСозданияПервичного = СтрПервичноеСообщение.Дата;
			ДатаОтправкиПервичного = СтрПервичноеСообщение.ДатаТранспорта;
			
			// отражаем статус первичного в строке статуса
			Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
				ТекстПанели = "Конверт для отправки отчета создан";
				Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ", но не отправлен. ";
			Иначе
				
				ТекстПанели = "Отчет отправлен";
				Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ". ";
				
				ОсталосьРасшифроватьУведомлениеОбУточнении = Ложь;
				ВсеВходящиеПолученыИПроанализированы = Истина;
				Если СтрПодтвержденияОтправки.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается подтверждение отправки. ";
				ИначеЕсли СтрКвитанцииОПриеме.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается квитанция о приеме. ";
				ИначеЕсли СтрПротоколыВходногоКонтроля.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается протокол форматно-логического контроля. ";
				Иначе
					
					ПоследнийПротокол = Неопределено;
					Для Каждого СтрПротокол Из СтрПротоколыВходногоКонтроля Цикл
						Если ПоследнийПротокол = Неопределено ИЛИ СтрПротокол.Дата > ПоследнийПротокол.Дата Тогда
							ПоследнийПротокол = СтрПротокол;
						КонецЕсли;
					КонецЦикла;
					
					Если ПоследнийПротокол.ПротоколСОшибкой Тогда
						ТекстПанели = ТекстПанели + "Отчет не принят: получен отрицательный протокол форматно-логического контроля. ";
						ИмеютсяОшибки = Истина;
					Иначе
						
						Если СтрУведомленияОбУточнении.Количество() = 0 Тогда
							ТекстПанели = ТекстПанели + "Ожидается уведомление об уточнении (протокол приема). ";
						Иначе
							
							ПоследнееУведомлениеОбУточнении = Неопределено;
							Для Каждого СтрУведомление Из СтрУведомленияОбУточнении Цикл
								Если ПоследнееУведомлениеОбУточнении = Неопределено ИЛИ СтрУведомление.Дата > ПоследнееУведомлениеОбУточнении.Дата Тогда
									ПоследнееУведомлениеОбУточнении = СтрУведомление;
								КонецЕсли;
							КонецЦикла;
							
							ОсталосьРасшифроватьУведомлениеОбУточнении = НЕ СообщениеРасшифровано(ПоследнееУведомлениеОбУточнении.Ссылка);
							Если ОсталосьРасшифроватьУведомлениеОбУточнении Тогда
								ТекстПанели = ТекстПанели + "Процесс сдачи не завершен: уведомление об уточнении (протокол приема) не расшифрован. ";
							ИначеЕсли ПоследнееУведомлениеОбУточнении.ПротоколСОшибкой Тогда
								ТекстПанели = ТекстПанели + "Отчет не принят: получено отрицательное уведомление об уточнении. ";
								ИмеютсяОшибки = Истина;
							Иначе
								ТекстПанели = ТекстПанели + "Отчет сдан. ";
								ОтчетСдан = Истина;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
				ВсеПодтвержденияОтправлены = Истина;
				
				Для Каждого СтрПодтверждениеОтправки Из СтрПодтвержденияОтправки Цикл
					СтруктураПоискаПодтверждения = Новый Структура("Тип, Статус", Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности, Перечисления.СтатусыПисем.Отправленное);
					Если ТекущаяДата() > '20090416' Тогда
						СтруктураПоискаПодтверждения.Вставить("Основание", СтрПодтверждениеОтправки.Ссылка);
					КонецЕсли;
					СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоискаПодтверждения);
					Если СтрПодтверждения.Количество() = 0 Тогда
						ВсеПодтвержденияОтправлены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрПротоколВходногоКонтроля Из СтрПротоколыВходногоКонтроля Цикл
						СтруктураПоискаПодтверждения = Новый Структура("Тип, Статус", Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности, Перечисления.СтатусыПисем.Отправленное);
						Если ТекущаяДата() > '20090416' Тогда
							СтруктураПоискаПодтверждения.Вставить("Основание", СтрПротоколВходногоКонтроля.Ссылка);
						КонецЕсли;
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоискаПодтверждения);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				СтрОбратитеВнимание = Новый Массив;
				Если СтрКритическиеОшибки.Количество() > 0 Тогда
					СтрОбратитеВнимание.Добавить("имеются критические ошибки");
					ИмеютсяОшибки = Истина;
				КонецЕсли;
				Если НЕ ВсеПодтвержденияОтправлены Тогда
					СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
				КонецЕсли;
				
				Если СтрОбратитеВнимание.Количество() > 0 Тогда
					ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
					Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
						ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
						ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
					КонецЦикла;
					ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтчетСдан Тогда
		ЦветШрифта = Новый Цвет(0, 179, 16);
		ЦветРамки = ЦветШрифта;
	ИначеЕсли ИмеютсяОшибки Тогда
		ЦветШрифта = Новый Цвет(255, 0, 0);
		ЦветРамки = ЦветШрифта;
	Иначе
		ЦветШрифта = Новый Цвет(0, 0, 192);
		ЦветРамки = Новый Цвет(227, 227, 227);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПанели) Тогда
		
		НадписьПанельОтправки.Заголовок = СокрЛП(ТекстПанели);
		НадписьПанельОтправки.ЦветТекста = ЦветШрифта;
		
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ПанельОтправкиВнутренняя = Форма.ЭлементыФормы.Найти("ПанельОтправкиВнутренняя");
		Если ПанельОтправкиВнутренняя <> Неопределено Тогда
			ПанельОтправкиВнутренняя.ЦветРамки = ЦветРамки;
		КонецЕсли;
		
	Иначе
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСтатусОтправкиВРегламентированномОтчетеПФР(Форма) Экспорт
	
	// находим панель
	ПанельОтправки = Форма.ЭлементыФормы.Найти("ПанельОтправки");
	НадписьПанельОтправки = Форма.ЭлементыФормы.Найти("НадписьПанельОтправки");
	Если ПанельОтправки = Неопределено ИЛИ НадписьПанельОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// если организация не определена, то скроем панель
	Если НЕ СвойствоОпределено(Форма, "Организация") Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		Возврат;
	КонецЕсли;
	Организация = Форма.Организация;
	
	// определяем ссылку на отчет
	Если СвойствоОпределено(Форма, "мСохраненныйДок") Тогда
		мСохраненныйДок = Форма.мСохраненныйДок;
		Если мСохраненныйДок = Неопределено Тогда
			СсылкаНаОтчет = Неопределено;
		Иначе
			СсылкаНаОтчет = мСохраненныйДок.Ссылка;
		КонецЕсли;
	Иначе
		СсылкаНаОтчет = Форма.Ссылка;
	КонецЕсли;
	
	// определяем последний цикл обмена по отчету
	Если ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		ПоследнийЦиклОбмена = ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Иначе
		ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка();
	КонецЕсли;
	
	// если у пользователя недостаточно прав для получения сведений об отправке, то скроем панель
	Если ПоследнийЦиклОбмена = Неопределено Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		Возврат;
	// если цикл обмена не найден и обмен с ПФР(!) по организации выключен, то скроем панель
	ИначеЕсли ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка() Тогда
		Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		ИЛИ НЕ Организация.УчетнаяЗаписьОбмена.ПредназначенаДляДокументооборотаСПФР Тогда
			ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем результат
	ТекстПанели = "";
	ИмеютсяОшибки = Ложь;
	ОтчетСдан = Ложь;
	
	// получаем список всех не помеченных на удаление сообщений последнего цикла
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена);
	
	// выделяем основные типы сообщений
	СтрПервичныеСообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР));
	СтрКвитанцииОПриеме = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР));
	СтрПротоколыВходногоКонтроля = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР));
	СтрПереподписанныеПротоколыВходногоКонтроля = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР));
	СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
	
	// находим первичное
	Если СтрПервичныеСообщения.Количество() = 0 Тогда
		
		ТекстПанели = "Отчет не отправлялся.";
		ИмеютсяОшибки = Ложь;
		ОтчетСдан = Ложь;
		
	Иначе
		
		СтрПервичноеСообщение = СтрПервичныеСообщения[0];
		
		// получаем свойства для анализа
		СтатусПервичного = СтрПервичноеСообщение.Статус;
		ДатаСозданияПервичного = СтрПервичноеСообщение.Дата;
		ДатаОтправкиПервичного = СтрПервичноеСообщение.ДатаТранспорта;
		
		// отражаем статус первичного в строке статуса
		Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
			ТекстПанели = "Конверт для отправки отчета создан";
			Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
				ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
			КонецЕсли;
			ТекстПанели = ТекстПанели + ", но не отправлен. ";
		Иначе
			
			ТекстПанели = "Отчет отправлен";
			Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
				ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
			КонецЕсли;
			ТекстПанели = ТекстПанели + ". ";
			
			ВсеВходящиеПолученыИПроанализированы = Истина;
			Если СтрКвитанцииОПриеме.Количество() = 0 Тогда
				ТекстПанели = ТекстПанели + "Ожидается подтверждение получения. ";
			ИначеЕсли СтрПротоколыВходногоКонтроля.Количество() = 0 Тогда
				ТекстПанели = ТекстПанели + "Ожидается протокол. ";
			Иначе
				
				ПоследнийПротокол = Неопределено;
				Для Каждого СтрПротокол Из СтрПротоколыВходногоКонтроля Цикл
					Если ПоследнийПротокол = Неопределено ИЛИ СтрПротокол.Дата > ПоследнийПротокол.Дата Тогда
						ПоследнийПротокол = СтрПротокол;
					КонецЕсли;
				КонецЦикла;
				
				Если ПоследнийПротокол.ПротоколСОшибкой Тогда
					ТекстПанели = ТекстПанели + "Отчет не принят: получен отрицательный протокол. ";
					ИмеютсяОшибки = Истина;
				Иначе
					ТекстПанели = ТекстПанели + "Отчет сдан. ";
					ОтчетСдан = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
			ВсеПодтвержденияОтправлены = Истина;
			
			Для Каждого СтрПротоколВходногоКонтроля Из СтрПротоколыВходногоКонтроля Цикл
				СтруктураПоискаПодтверждения = Новый Структура("Тип, Статус", Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, Перечисления.СтатусыПисем.Отправленное);
				СтруктураПоискаПодтверждения.Вставить("Основание", СтрПротоколВходногоКонтроля.Ссылка);
				СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоискаПодтверждения);
				Если СтрПодтверждения.Количество() = 0 Тогда
					ВсеПодтвержденияОтправлены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СтрОбратитеВнимание = Новый Массив;
			Если СтрКритическиеОшибки.Количество() > 0 Тогда
				СтрОбратитеВнимание.Добавить("имеются критические ошибки");
				ИмеютсяОшибки = Истина;
			КонецЕсли;
			Если НЕ ВсеПодтвержденияОтправлены Тогда
				СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
			КонецЕсли;
			
			Если СтрОбратитеВнимание.Количество() > 0 Тогда
				ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
				Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
					ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
					ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
				КонецЦикла;
				ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОтчетСдан Тогда
		ЦветШрифта = Новый Цвет(0, 179, 16);
		ЦветРамки = ЦветШрифта;
	ИначеЕсли ИмеютсяОшибки Тогда
		ЦветШрифта = Новый Цвет(255, 0, 0);
		ЦветРамки = ЦветШрифта;
	Иначе
		ЦветШрифта = Новый Цвет(0, 0, 192);
		ЦветРамки = Новый Цвет(227, 227, 227);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПанели) Тогда
		
		НадписьПанельОтправки.Заголовок = СокрЛП(ТекстПанели);
		НадписьПанельОтправки.ЦветТекста = ЦветШрифта;
		
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ПанельОтправкиВнутренняя = Форма.ЭлементыФормы.Найти("ПанельОтправкиВнутренняя");
		Если ПанельОтправкиВнутренняя <> Неопределено Тогда
			ПанельОтправкиВнутренняя.ЦветРамки = ЦветРамки;
		КонецЕсли;
		
	Иначе
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
	Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьКлючОсновногоРеквизитаФормы(Форма)
	
	Если СвойствоОпределено(Форма, "ЭтотОбъект") Тогда
		Возврат Форма.ЭтотОбъект.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура ПередОткрытиемФормы(ТипМетаданного, ИмяМетаданного, ИмяФормы, Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ИмяФормы = ТипМетаданного + "_" + ИмяМетаданного + "_" + ИмяФормы;
	Если Метаданные().Формы.Найти(ИмяФормы) <> Неопределено Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		ОсновнойРеквизит = ПолучитьКлючОсновногоРеквизитаФормы(Форма);
		Если ОсновнойРеквизит = Неопределено Тогда
			ОсновнойРеквизит = ИмяФормы;
		КонецЕсли;
		
		СтруктураОпроса = Новый Структура("Ключ, Форма", ОсновнойРеквизит);
		Оповестить("Опрос форм", СтруктураОпроса);
		Если ТипЗнч(СтруктураОпроса.Форма) = Тип("Форма") Тогда
			ПодменяющаяФорма = СтруктураОпроса.Форма;
		Иначе
			ПодменяющаяФорма = ПолучитьФорму(ИмяФормы, , ОсновнойРеквизит);
			ЗаполнитьЗначенияРеквизитовФорм(ПодменяющаяФорма, Форма);
			ПодменяющаяФорма.КлючУникальности = ОсновнойРеквизит;
		КонецЕсли;
		
		Если Форма.МодальныйРежим Тогда
			ПодменяющаяФорма.ОткрытьМодально();
		Иначе
			ПодменяющаяФорма.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияРеквизитовФорм(ПодменяющаяФорма, ИсходнаяФорма)
	
	ОтображаемыеРеквизиты = "СправочникОбъект, ДокументОбъект, ВладелецФормы, РежимВыбора, ПараметрВыборГруппИЭлементов, ПараметрВыборПоВладельцу, ПараметрОтборПоВладельцу, ПараметрОтборПоЗначению, ПараметрОтборПоИзмерению, ПараметрОтборПоРегистратору, ПараметрТекущаяСтрока, НачальноеЗначениеВыбора, ПараметрОбъектКопирования"; // СправочникСписок, ДокументСписок, РегистрСведенийСписок, 
	ОтображаемыеРеквизитыСтрукт = Новый Структура(ОтображаемыеРеквизиты);
	Для Каждого Эл Из ОтображаемыеРеквизитыСтрукт Цикл
		Если СвойствоОпределено(ИсходнаяФорма, Эл.Ключ) И СвойствоОпределено(ПодменяющаяФорма, Эл.Ключ) Тогда
			ПодменяющаяФорма[Эл.Ключ] = ИсходнаяФорма[Эл.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	// отдельно переносим свойство Отбор
	Если СвойствоОпределено(ПодменяющаяФорма, "Отбор") И СвойствоОпределено(ИсходнаяФорма, "Отбор") Тогда
		Для Каждого ЭлОтбор Из ИсходнаяФорма.Отбор Цикл
			ЭлОтборПодменяющейформы = ПодменяющаяФорма.Отбор.Найти(ЭлОтбор.Имя);
			Если ЭлОтборПодменяющейформы <> Неопределено Тогда
				ЭлОтборПодменяющейформы.ВидСравнения = ЭлОтбор.ВидСравнения;
				ЭлОтборПодменяющейформы.Значение = ЭлОтбор.Значение;
				ЭлОтборПодменяющейформы.ЗначениеС = ЭлОтбор.ЗначениеС;
				ЭлОтборПодменяющейформы.ЗначениеПо = ЭлОтбор.ЗначениеПо;
				ЭлОтборПодменяющейформы.Использование = ЭлОтбор.Использование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, ТипСообщения, ТипЦиклаОбмена)
	
	НовСтр = ПредусмотренныеТипыСообщений.Добавить();
	НовСтр.ТипСообщения = ТипСообщения;
	НовСтр.ТипЦиклаОбмена = ТипЦиклаОбмена;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПЕЧАТЬ ДОКУМЕНТОВ ЦИКЛОВ ОБМЕНА

// Основные методы

Функция СформироватьПечатныеДокументы(ЦиклОбмена, Настройки)
	
	ПечататьДокумент = (Настройки.Свойство("ПечататьДокумент") И Настройки.ПечататьДокумент = Истина);
	ПечататьПодтверждениеОтправки = (Настройки.Свойство("ПечататьПодтверждениеОтправки") И Настройки.ПечататьПодтверждениеОтправки = Истина);
	ПечататьПодтверждениеПолучения = (Настройки.Свойство("ПечататьИзвещениеОбОтказеПФР") И Настройки.ПечататьИзвещениеОбОтказеПФР = Истина);
	ПечататьПротокол = (Настройки.Свойство("ПечататьПротокол") И Настройки.ПечататьПротокол = Истина);
	ПечататьУведомлениеОбУточнении = (Настройки.Свойство("ПечататьУведомлениеОбУточнении") И Настройки.ПечататьУведомлениеОбУточнении = Истина);
	ПечататьПротоколПриема2НДФЛ = (Настройки.Свойство("ПечататьПротоколПриема2НДФЛ") И Настройки.ПечататьПротоколПриема2НДФЛ = Истина);
	ПечататьРеестр2НДФЛ = (Настройки.Свойство("ПечататьРеестрСведений2НДФЛ") И Настройки.ПечататьРеестрСведений2НДФЛ = Истина);
	ПечататьСостояние = (Настройки.Свойство("ПечататьСостояние") И Настройки.ПечататьСостояние = Истина);
	
	// 534
	ПечататьПодтверждениеДатыОтправки = (Настройки.Свойство("ПечататьПодтверждениеДатыОтправки") И Настройки.ПечататьПодтверждениеДатыОтправки = Истина);
	ПечататьРезультатПриема = (Настройки.Свойство("ПечататьРезультатПриема") И Настройки.ПечататьРезультатПриема = Истина);
	ПечататьРезультатОбработки = (Настройки.Свойство("ПечататьРезультатОбработки") И Настройки.ПечататьРезультатОбработки = Истина);
	
	Если Настройки.Свойство("ФорматДокументооборота") Тогда
		ФорматДокументооборота = Настройки.ФорматДокументооборота;
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	Если ТипЦиклаОбмена.Пустая() Тогда
		Возврат Результат;
	КонецЕсли;
	
	НижнийКолонтитул = печатьПредставлениеЦиклаОбмена(ЦиклОбмена);
	
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		
		Если ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			Файлы = ПолучитьФайлыЦиклаОбмена534(ЦиклОбмена, ПечататьДокумент, ПечататьПодтверждениеДатыОтправки, ПечататьРезультатПриема, ПечататьРезультатОбработки);
		Иначе
			Файлы = ПолучитьФайлыЦиклаОбмена(ЦиклОбмена, ПечататьДокумент, ПечататьПодтверждениеОтправки, ПечататьПодтверждениеПолучения, ПечататьПротокол, ПечататьУведомлениеОбУточнении, ПечататьПротоколПриема2НДФЛ, ПечататьРеестр2НДФЛ);
		КонецЕсли;
		
		// выводим электронное представление отчета (141 и 534)
		Если ПечататьДокумент Тогда
			ФайлОтчетности = Файлы.Найти("ФайлОтчетности", "ИдТипа");
			Если ФайлОтчетности <> Неопределено Тогда
				Кодировка = ?(нрег(Прав(ФайлОтчетности.ИмяФайла, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM);
				Тело = ПрочитатьТекстИзФайла(ФайлОтчетности.Файл, Кодировка);
				Подписи = ПолучитьЭЦП(Файлы, ФайлОтчетности);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Электронное представление отчета", ФайлОтчетности.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Электронное представление отчета");
			КонецЕсли;
		КонецЕсли;
		
		// 534
		
		// выводим подтверждение даты отправки
		Если ПечататьПодтверждениеДатыОтправки Тогда
			СтрПодтверждениеДатыОтправки = Файлы.Найти("ПодтверждениеДатыОтправки", "ИдТипа");
			Если СтрПодтверждениеДатыОтправки <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрПодтверждениеДатыОтправки.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрПодтверждениеДатыОтправки);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеПодтвержденияДатыОтправки("Подтверждение даты отправки отчета", СтрПодтверждениеДатыОтправки.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Подтверждение даты отправки отчета");
			КонецЕсли;
		КонецЕсли;
		
		// выводим результат приема
		Если ПечататьРезультатПриема Тогда
			СтрРезультатПриема = Файлы.Найти("РезультатПриема", "ИдТипа");
			Если СтрРезультатПриема <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрРезультатПриема.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрРезультатПриема);
				Если СтрРезультатПриема.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе Тогда
					ТаблДок = СформироватьТабличныйДокументНаОсновеУведомленияОбОтказе("Уведомление об отказе", СтрРезультатПриема.ИмяФайла, Тело, НижнийКолонтитул, Подписи);
					Результат.Добавить(ТаблДок, "Уведомление об отказе");
				Иначе
					ТаблДок = СформироватьТабличныйДокументНаОсновеКвитанцииОПриеме("Квитанция о приеме", СтрРезультатПриема.ИмяФайла, Тело, НижнийКолонтитул, Подписи);
					Результат.Добавить(ТаблДок, "Квитанция о приеме");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// выводим результат обработки
		Если ПечататьРезультатОбработки Тогда
			СтрРезультатОбработки = Файлы.Найти("РезультатОбработки", "ИдТипа");
			Если СтрРезультатОбработки <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрРезультатОбработки.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрРезультатОбработки);
				Если СтрРезультатОбработки.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении Тогда
					Результат.Добавить(СформироватьТабличныйДокументнаОсновеУведомленияОбУточнении("Уведомление об уточнении", СтрРезультатОбработки.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Уведомление об уточнении");
				Иначе
					Результат.Добавить(СформироватьТабличныйДокументнаОсновеИзвещенияОВводе("Извещение о вводе", СтрРезультатОбработки.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Извещение о вводе");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// 141
		
		// выводим подтверждение отправки
		Если ПечататьПодтверждениеОтправки Тогда
			СтрПодтверждениеОтправки = Файлы.Найти("ПодтверждениеОтправки", "ИдТипа");
			Если СтрПодтверждениеОтправки <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрПодтверждениеОтправки.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрПодтверждениеОтправки);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Подтверждение отправки отчета", СтрПодтверждениеОтправки.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Подтверждение отправки отчета");
			КонецЕсли;
		КонецЕсли;
		
		// выводим протокол
		Если ПечататьПротокол Тогда
			СтрПротокол = Файлы.Найти("Протокол", "ИдТипа");
			Если СтрПротокол <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрПротокол.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрПротокол);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Протокол входного контроля", СтрПротокол.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Протокол входного контроля");
			КонецЕсли;
		КонецЕсли;
		
		// выводим уведомление об уточнении
		Если ПечататьУведомлениеОбУточнении Тогда
			СтрУведомление = Файлы.Найти("Уведомление", "ИдТипа");
			Если СтрУведомление <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрУведомление.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрУведомление);
				Результат.Добавить(СформироватьТабличныйДокументнаОсновеУведомленияОбУточнении("Уведомление об уточнении отчета", СтрУведомление.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Уведомление об уточнении отчета");
			КонецЕсли;
		КонецЕсли;
		
		// выводим протокол приема 2-НДФЛ
		Если ПечататьПротоколПриема2НДФЛ Тогда
			СтрПротокол = Файлы.Найти("Протокол2НДФЛ", "ИдТипа");
			Если СтрПротокол <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрПротокол.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрПротокол);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Протокол приема 2-НДФЛ", СтрПротокол.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Протокол приема 2-НДФЛ");
			КонецЕсли;
		КонецЕсли;
		
		// выводим реестр сведений 2-НДФЛ
		Если ПечататьРеестр2НДФЛ Тогда
			СтрРеестр = Файлы.Найти("Реестр2НДФЛ", "ИдТипа");
			Если СтрРеестр <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрРеестр.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрРеестр);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Реестр сведений 2-НДФЛ", СтрРеестр.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Реестр сведений 2-НДФЛ");
			КонецЕсли;
		КонецЕсли;
		
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		Файлы = ПолучитьФайлыЦиклаОбмена534(ЦиклОбмена, ПечататьДокумент, ПечататьПодтверждениеДатыОтправки, ПечататьРезультатПриема, ПечататьРезультатОбработки);
		
		// выводим электронное представление 2-НДФЛ
		Если ПечататьДокумент Тогда
			ФайлОтчетности = Файлы.Найти("ФайлОтчетности", "ИдТипа");
			Если ФайлОтчетности <> Неопределено Тогда
				Кодировка = ?(нрег(Прав(ФайлОтчетности.ИмяФайла, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM);
				Тело = ПрочитатьТекстИзФайла(ФайлОтчетности.Файл, Кодировка);
				Подписи = ПолучитьЭЦП(Файлы, ФайлОтчетности);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Электронное представление 2-НДФЛ", ФайлОтчетности.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Электронное представление 2-НДФЛ");
			КонецЕсли;
		КонецЕсли;
		
		// выводим подтверждение даты отправки
		Если ПечататьПодтверждениеДатыОтправки Тогда
			СтрПодтверждениеДатыОтправки = Файлы.Найти("ПодтверждениеДатыОтправки", "ИдТипа");
			Если СтрПодтверждениеДатыОтправки <> Неопределено Тогда
				Тело = ПрочитатьТекстИзФайла(СтрПодтверждениеДатыОтправки.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрПодтверждениеДатыОтправки);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеПодтвержденияДатыОтправки("Подтверждение даты отправки 2-НДФЛ", СтрПодтверждениеДатыОтправки.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Подтверждение даты отправки 2-НДФЛ");
			КонецЕсли;
		КонецЕсли;
		
		// выводим результат приема
		Если ПечататьРезультатПриема Тогда
			СтрРезультатыПриема = Файлы.НайтиСтроки(Новый Структура("ИдТипа", "РезультатПриема"));
			Для Каждого СтрРезультатПриема Из СтрРезультатыПриема Цикл
				Тело = ПрочитатьТекстИзФайла(СтрРезультатПриема.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрРезультатПриема);
				Если СтрРезультатПриема.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ Тогда
					ТаблДок = СформироватьТабличныйДокументНаОсновеБланка("Реестр сведений 2-НДФЛ", СтрРезультатПриема.ИмяФайла, Тело, НижнийКолонтитул, Подписи);
					Результат.Добавить(ТаблДок,  "Реестр сведений 2-НДФЛ");
				ИначеЕсли СтрРезультатПриема.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ Тогда
					ТаблДок = СформироватьТабличныйДокументНаОсновеБланка("Протокол приема 2-НДФЛ", СтрРезультатПриема.ИмяФайла, Тело, НижнийКолонтитул, Подписи);
					Результат.Добавить(ТаблДок, "Протокол приема 2-НДФЛ");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		Файлы = ПолучитьФайлыЦиклаОбмена(ЦиклОбмена, ПечататьДокумент, ПечататьПодтверждениеОтправки, ПечататьПодтверждениеПолучения, ПечататьПротокол, ПечататьУведомлениеОбУточнении, ПечататьПротоколПриема2НДФЛ, ПечататьРеестр2НДФЛ);
		
		// выводим электронное представление отчета
		Если ПечататьДокумент Тогда
			ФайлыОтчетности = Файлы.НайтиСтроки(Новый Структура("ИдТипа", "ФайлОтчетностиПФР"));
			Для Каждого ФайлОтчетности Из ФайлыОтчетности Цикл
				Кодировка = ?(нрег(Прав(ФайлОтчетности.ИмяФайла, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM);
				Тело = ПрочитатьТекстИзФайла(ФайлОтчетности.Файл, Кодировка);
				Подписи = ПолучитьЭЦП(Файлы, ФайлОтчетности);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Электронное представление", ФайлОтчетности.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Электронное представление отчета");
			КонецЦикла;
		КонецЕсли;
		
		// выводим подтверждение получения
		Если ПечататьПодтверждениеПолучения Тогда
			ПодтвержденияПолученияПФР = Файлы.НайтиСтроки(Новый Структура("ИдТипа", "ПодтверждениеПолученияПФР"));
			Для Каждого ПодтверждениеПолученияПФР Из ПодтвержденияПолученияПФР Цикл
				Тело = ПрочитатьТекстИзФайла(ПодтверждениеПолученияПФР.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, ПодтверждениеПолученияПФР);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Подтверждение получения отчетности", ПодтверждениеПолученияПФР.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Подтверждение получения");
			КонецЦикла;
		КонецЕсли;
		
		// выводим протокол
		Если ПечататьПротокол Тогда
			Протоколы = Файлы.НайтиСтроки(Новый Структура("ИдТипа", "ПротоколПФР"));
			Для Каждого СтрПротокол Из Протоколы Цикл
				Тело = ПрочитатьТекстИзФайла(СтрПротокол.Файл, КодировкаТекста.ANSI);
				Подписи = ПолучитьЭЦП(Файлы, СтрПротокол);
				Результат.Добавить(СформироватьТабличныйДокументНаОсновеБланка("Протокол", СтрПротокол.ИмяФайла, Тело, НижнийКолонтитул, Подписи), "Протокол");
			КонецЦикла;
		КонецЕсли;
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		
		// выводим неформализованный документ налогоплательщика
		
		// выводим подтверждение отправки неформализованного документа налогоплательщика
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		
		// выводим неформализованный документ налогового органа
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		
		// выводим запрос на информационное обслуживание
		
		// выводим подтверждение отправки запроса на информационное обслуживание
		
		// выводим протокол входного контроля запроса на информационное обслуживание
		
		// выводим ответ на запрос на информационное обслуживание
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		
		// выводим отчет о состоянии
		Если ПечататьСостояние Тогда
			ТаблДок = ВывестиОтчетОСостоянии(ЦиклОбмена);
			Если ТаблДок <> Неопределено Тогда
				Результат.Добавить(ТаблДок, "Отчет о состоянии");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Файлы) Тогда
		УдалитьВременныйФайл(Файлы.ВыгрузитьКолонку("Файл"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВывестиОтчетОСостоянииФНС(ЦиклОбмена)
	
	ФорматДокументооборота = ЦиклОбмена.ФорматДокументооборота;
	Если ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Возврат ВывестиОтчетОСостоянииФНС534(ЦиклОбмена);
	Иначе
		Возврат ВывестиОтчетОСостоянииФНС141(ЦиклОбмена);
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеОтчетаПФР(ОтчетПФР)
	
	Если ТипЗнч(ОтчетПФР) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетПФР);
	Иначе
		Возврат "" + ОтчетПФР;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеПредметаПФР(Предмет)
	
	Если Предмет.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		Возврат "Входящее письмо """ + СокрЛП(Предмет.Наименование) + """ от " + Формат(Предмет.ДатаОтправки, "ДЛФ=DDT");
	Иначе
		Возврат "Исходящее письмо """ + СокрЛП(Предмет.Наименование) + """ от " + Формат(Предмет.ДатаСообщения, "ДЛФ=DDT");
	КонецЕсли;
	
КонецФункции

Функция ВывестиОтчетОСостоянииПФР(ЦиклОбмена)
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	
	ПредусмотренныеТипыСообщений = Новый ТаблицаЗначений;
	ПредусмотренныеТипыСообщений.Колонки.Добавить("ТипСообщения");
	ПредусмотренныеТипыСообщений.Колонки.Добавить("ТипЦиклаОбмена");
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР, Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР, Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР, Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР, Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР, Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР, Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие);
	
	// получаем шаблон бланка
	ШаблонМакета = ПолучитьМакет("БланкПечатиОтчетаОСостоянииПФР");
	
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ЗаполнитьЗначенияСвойств(ТаблДок.НижнийКолонтитул, ШаблонМакета.НижнийКолонтитул);
	ЗаполнитьЗначенияСвойств(ТаблДок.ВерхнийКолонтитул, ШаблонМакета.ВерхнийКолонтитул);
	// !!! устанавливать колонтитулы
	
	// получаем области-строки
	ОблШапка = ШаблонМакета.ПолучитьОбласть("Шапка");
	ОблСтрока = ШаблонМакета.ПолучитьОбласть("Строка");
	ОблПодвалСообщения = ШаблонМакета.ПолучитьОбласть("ПодвалСообщения");
	ОблШапкаКритическиеОшибки = ШаблонМакета.ПолучитьОбласть("ШапкаУведомленияОбОшибках");
	ОблСтрокаКритическаяОшибка = ШаблонМакета.ПолучитьОбласть("СтрокаУведомлениеОбОшибке");
	ОблКритическиеОшибкиОтсутствуют = ШаблонМакета.ПолучитьОбласть("УведомленияОбОшибкахОтсутствуют");
	ОблПодвал = ШаблонМакета.ПолучитьОбласть("Подвал");
	
	// инициализируем значения шапки
	ОблШапка.Области.Идентификатор.Текст = ЦиклОбмена.Идентификатор;
	ОблШапка.Области.Организация.Текст = ЦиклОбмена.Организация;
	ОблШапка.Области.ВнешняяОрганизация.Текст = ЦиклОбмена.ВнешняяОрганизация;
	
	// формируем строку с предметом
	СтрПредмет = "";
	ПредметыПереписки = ПолучитьПредметыЦиклаОбмена(ЦиклОбмена);
	Для Каждого ПредметПереписки Из ПредметыПереписки Цикл
		Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				СтрПредмет = СтрПредмет + Символы.ПС + ПредставлениеОтчетаПФР(ПредметПереписки);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(ПредметПереписки) Тогда
				СтрПредмет = СтрПредмет + Символы.ПС + ПредставлениеПредметаПФР(ПредметПереписки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если СтрПредмет = "" Тогда
		СтрПредмет = "<Отсутствует>";
	Иначе
		СтрПредмет = СокрЛП(СтрПредмет);
	КонецЕсли;
	
	// присваиваем текстовое представление предмета
	ОблШапка.Области.ПредметПереписки.Текст = СтрПредмет;
	
	ОблШапка.Области.Создан.Текст = Формат(ЦиклОбмена.ДатаСоздания, "ДЛФ=DDT");
	ОблШапка.Области.Завершен.Текст = ?(НЕ ЗначениеЗаполнено(ЦиклОбмена.ДатаЗакрытия) ИЛИ ЦиклОбмена.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), "<не завершен>", Формат(ЦиклОбмена.ДатаЗакрытия, "ДЛФ=DDT"));
	ОблШапка.Области.ПоследнееСообщение.Текст = Формат(ЦиклОбмена.ДатаПоследнегоСообщения, "ДЛФ=DDT");
	
	ТаблДок.Вывести(ОблШапка);
	
	// выбираем информацию по сообщениям цикла обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортныеСообщения.Тип КАК Тип,
						  |	ТранспортныеСообщения.ДатаТранспорта,
						  |	ТранспортныеСообщения.Статус КАК СтатусСообщения,
						  |	ТранспортныеСообщения.ПометкаУдаления,
						  |	ТранспортныеСообщения.ПротоколСОшибкой КАК ПротоколСОшибкой,
						  |	ТранспортныеСообщения.Ссылка КАК Ссылка,
						  |	ТранспортныеСообщения.Тема КАК Тема,
						  |	НерасшифрованныеВложения.КоличествоСообщений КАК КоличествоНерасшифрованных,
						  |	РасшифрованныеВложения.КоличествоСообщений КАК КоличествоРасшифрованных,
						  |	ТранспортныеСообщения.Дата КАК Дата
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортныеСообщения
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение КАК ТранспортноеСообщение,
						  |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
						  |		ИЗ
						  |			РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |		ГДЕ
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение) КАК НерасшифрованныеВложения
						  |		ПО ТранспортныеСообщения.Ссылка = НерасшифрованныеВложения.ТранспортноеСообщение
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение,
						  |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
						  |		ИЗ
						  |			РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						  |		ГДЕ
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение) КАК РасшифрованныеВложения
						  |		ПО ТранспортныеСообщения.Ссылка = РасшифрованныеВложения.ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортныеСообщения.ЦиклОбмена = &ЦиклОбмена
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ТранспортныеСообщения.ЦиклОбмена,
						  |	ТранспортныеСообщения.Тип.Порядок,
						  |	Дата");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
	
	ПоследнийТипСообщения = Неопределено;
	
	Для ИндТипСообщения = 1 По ПредусмотренныеТипыСообщений.Количество() Цикл
		
		ТекСтр = ПредусмотренныеТипыСообщений[ИндТипСообщения - 1];
		Если ТекСтр.ТипЦиклаОбмена <> ТипЦиклаОбмена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТипСообщения = ТекСтр.ТипСообщения;
		СообщенияТекТипа = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", ТекТипСообщения));
		
		Если СообщенияТекТипа.Количество() = 0 Тогда
			
			ОблСтрока.Области.ТипСообщения.Текст = СоответствиеТипаСообщенияКраткомуПредставлению[ТекТипСообщения];
			ОблСтрока.Области.СтатусСообщения.Текст = "Отсутствует";
			ОблСтрока.Области.СтатусСообщения.Шрифт = Новый Шрифт(ОблСтрока.Области.СтатусСообщения.Шрифт, , , , , , Ложь);
			
			ТаблДок.Вывести(ОблСтрока);
			
		Иначе
			
			Для Каждого СтрСообщение Из СообщенияТекТипа Цикл
				
				ТипСообщения = СтрСообщение.Тип;
				ДатаТранспортаСообщения = СтрСообщение.ДатаТранспорта;
				_СтатусСообщения = СтрСообщение.СтатусСообщения;
				ПометкаУдаленияСообщения = СтрСообщение.ПометкаУдаления;
				ЭтоПротоколСОшибкой = СтрСообщение.ПротоколСОшибкой;
				Сообщение = СтрСообщение.Ссылка;
				ЧислоКонтейнеровСообщения = СтрСообщение.КоличествоНерасшифрованных;
				ЧислоЭлементовСодержимого = СтрСообщение.КоличествоРасшифрованных;
				ДатаСообщения = СтрСообщение.Дата;
				
				ПредставлениеТипа = СоответствиеТипаСообщенияКраткомуПредставлению[ТипСообщения];
				Если ПредставлениеТипа = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// заполняем ТипСообщения
				Если ПоследнийТипСообщения <> ТипСообщения Тогда
					ОблСтрока.Области.ТипСообщения.Текст = ПредставлениеТипа;
				Иначе
					ОблСтрока.Области.ТипСообщения.Текст = "";
				КонецЕсли;
				ПоследнийТипСообщения = ТипСообщения;
				
				// заполняем строку статуса
				Если _СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
					ТекстСтатуса = "От " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Принято " + Формат(ДатаТранспортаСообщения, "ДЛФ=DDT") + ".";
					Если ЧислоЭлементовСодержимого = 0 Тогда
						ТекстСтатуса = ТекстСтатуса + " Не расшифровано.";
					КонецЕсли;
				ИначеЕсли _СтатусСообщения = Перечисления.СтатусыПисем.Исходящее Тогда
					ТекстСтатуса = "Создано " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Не отправлено.";
				ИначеЕсли _СтатусСообщения = Перечисления.СтатусыПисем.Отправленное Тогда
					ТекстСтатуса = "Создано " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Отправлено " + Формат(ДатаТранспортаСообщения, "ДЛФ=DDT") + ".";
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЭтоПротоколСОшибкой Тогда
					ТекстСтатуса = ТекстСтатуса + Символы.ПС + "Содержит сведения об ошибках!";
				КонецЕсли;
				
				ОблСтрока.Области.СтатусСообщения.Текст = ТекстСтатуса;
				ОблСтрока.Области.СтатусСообщения.Шрифт = Новый Шрифт(ОблСтрока.Области.СтатусСообщения.Шрифт, , , , , , ПометкаУдаленияСообщения);
				
				ТаблДок.Вывести(ОблСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблДок.Вывести(ОблПодвалСообщения);
	
	// вывод информации об ошибках
	ТипыОшибок = Новый Массив;
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР);
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка); // !!!
	Для Каждого ТипОшибки Из ТипыОшибок Цикл
		СообщенияОшибки = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", ТипОшибки));
		Если СообщенияОшибки.Количество() > 0 Тогда
			ТаблДок.Вывести(ОблШапкаКритическиеОшибки);
			Для Каждого СообщениеОшибка Из СообщенияОшибки Цикл
				ОблСтрокаКритическаяОшибка.Области.УведомлениеОбОшибке.Текст = СокрЛП(СообщениеОшибка.Тема);
				ОблСтрокаКритическаяОшибка.Области.УведомлениеОбОшибкеДата.Текст = Формат(СообщениеОшибка.ДатаТранспорта, "ДЛФ=DDT");
				ТаблДок.Вывести(ОблСтрокаКритическаяОшибка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТаблДок.Вывести(ОблПодвал);
	
	Возврат ТаблДок;
	
КонецФункции

// Формирование отчета о состоянии

Функция ВывестиОтчетОСостоянии(ЦиклОбмена)
	
	Если ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
		Возврат ВывестиОтчетОСостоянииПФР(ЦиклОбмена);
	Иначе
		Возврат ВывестиОтчетОСостоянииФНС(ЦиклОбмена);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФайлыЦиклаОбмена(ЦиклОбмена, ПечататьДокумент, ПечататьПодтверждениеОтправки, ПечататьПодтверждениеПолучения, ПечататьПротокол, ПечататьУведомлениеОбУточнении, ПечататьПротоколПриема2НДФЛ, ПечататьРеестр2НДФЛ)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	Подзапросы = Новый Массив;
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		
		Файлы = Новый ТаблицаЗначений;
		Файлы.Колонки.Добавить("ИдТипа");
		Файлы.Колонки.Добавить("Тип");
		Файлы.Колонки.Добавить("ИмяФайла");
		Файлы.Колонки.Добавить("Файл");
		
		Если ПечататьДокумент Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			          |	""ФайлОтчетности"" КАК ИдТипа,
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоФайлОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПервичноеСообщениеСодержащееОтчетность
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |
			          |ОБЪЕДИНИТЬ ВСЕ
			          |
			          |ВЫБРАТЬ
			          |	""ФайлОтчетностиПодписьНалогоплательщика"",
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПервичноеСообщениеСодержащееОтчетность
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |
			          |ОБЪЕДИНИТЬ ВСЕ
			          |
			          |ВЫБРАТЬ
			          |	""ФайлОтчетностиПодписьНалоговогоОргана"",
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияКвитанцияОПриемеФайлаОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
			Запрос.УстановитьПараметр("ТипСодержимогоФайлОтчетности", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
			Запрос.УстановитьПараметр("ТипСообщенияПервичноеСообщениеСодержащееОтчетность", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ТипСообщенияКвитанцияОПриемеФайлаОтчетности", Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности);
		КонецЕсли;
		
		Если ПечататьПодтверждениеОтправки Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			          |	""ПодтверждениеОтправки"" КАК ИдТипа,
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоПодтверждениеОбОтправке
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПодтверждениеОтправкиОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |
			          |ОБЪЕДИНИТЬ ВСЕ
			          |
			          |ВЫБРАТЬ
			          |	""ПодтверждениеОтправкиПодписьНалогоплательщика"",
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПереподписанноеПодтверждениеОтправкиОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |
			          |ОБЪЕДИНИТЬ ВСЕ
			          |
			          |ВЫБРАТЬ
			          |	""ПодтверждениеОтправкиПодписьПочтовогоСервера"",
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПодтверждениеОтправкиОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
			Запрос.УстановитьПараметр("ТипСодержимогоПодтверждениеОбОтправке", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
			Запрос.УстановитьПараметр("ТипСообщенияПодтверждениеОтправкиОтчетности", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ТипСообщенияПереподписанноеПодтверждениеОтправкиОтчетности", Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности);
		КонецЕсли;
		
		// !!! реализовать печать подтверждений получения
		
		Если ПечататьПротокол Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			                 |	""Протокол"" КАК ИдТипа,
			                 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоПротоколВходногоКонтроля
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротоколВходногоКонтроляОтчетности
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""ПротоколПодписьНалогоплательщика"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПереподписанныйПротоколВходногоКонтроляОтчетности
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""ПротоколПодписьНалоговогоОргана"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротоколВходногоКонтроляОтчетности
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
			Запрос.УстановитьПараметр("ТипСодержимогоПротоколВходногоКонтроля", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
			Запрос.УстановитьПараметр("ТипСообщенияПротоколВходногоКонтроляОтчетности", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ТипСообщенияПереподписанныйПротоколВходногоКонтроляОтчетности", Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности);
		КонецЕсли;
		
		Если ПечататьУведомлениеОбУточнении Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			                 |	""Уведомление"" КАК ИдТипа,
			                 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоУведомлениеОбУточнении
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияУведомлениеОбУточнении
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""УведомлениеПодписьНалоговогоОргана"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияУведомлениеОбУточнении
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
			Запрос.УстановитьПараметр("ТипСодержимогоУведомлениеОбУточнении", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииНБО);
			Запрос.УстановитьПараметр("ТипСообщенияУведомлениеОбУточнении", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		КонецЕсли;
		
		Если ПечататьПротоколПриема2НДФЛ Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			                 |	""Протокол2НДФЛ"" КАК ИдТипа,
			                 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоПротокол2НДФЛ
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротокол2НДФЛ
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""Протокол2НДФЛПодписьНалоговогоОргана"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротокол2НДФЛ
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ПрефиксИмениФайлаПодписиПодПротоколом");
			Запрос.УстановитьПараметр("ТипСодержимогоПротокол2НДФЛ", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
			Запрос.УстановитьПараметр("ТипСообщенияПротокол2НДФЛ", Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ПрефиксИмениФайлаПодписиПодПротоколом", "прот_%");
		КонецЕсли;
		
		Если ПечататьРеестр2НДФЛ Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			                    |	""Реестр2НДФЛ"" КАК ИдТипа,
			                    |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
			                    |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
			                    |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла
			                    |ИЗ
			                    |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                    |ГДЕ
			                    |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоРеестр2НДФЛ
			                    |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротокол2НДФЛ
			                    |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                    |
			                    |ОБЪЕДИНИТЬ ВСЕ
			                    |
			                    |ВЫБРАТЬ
			                    |	""Реестр2НДФЛПодписьНалоговогоОргана"",
			                    |	СодержимоеТранспортныхКонтейнеров.Данные,
			                    |	СодержимоеТранспортныхКонтейнеров.Тип,
			                    |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
			                    |ИЗ
			                    |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                    |ГДЕ
			                    |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                    |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротокол2НДФЛ
			                    |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                    |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ПрефиксИмениФайлаПодписиПодРеестром");
			Запрос.УстановитьПараметр("ТипСодержимогоРеестр2НДФЛ", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
			Запрос.УстановитьПараметр("ТипСообщенияПротокол2НДФЛ", Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ПрефиксИмениФайлаПодписиПодРеестром", "реестр_%");
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		
		Файлы = Новый ТаблицаЗначений;
		Файлы.Колонки.Добавить("ИдТипа");
		Файлы.Колонки.Добавить("Тип");
		Файлы.Колонки.Добавить("ИмяФайла");
		Файлы.Колонки.Добавить("Файл");
		Файлы.Колонки.Добавить("ИмяПодписанногоФайла");
		Файлы.Колонки.Добавить("Сертификат");
		
		Если ПечататьДокумент Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			          |	""ФайлОтчетностиПФР"" КАК ИдТипа,
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			          |	"""" КАК ИмяПодписанногоФайла,
			          |	"""" КАК Сертификат
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоФайлОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПервичноеСообщениеСодержащееОтчетность
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |
			          |ОБЪЕДИНИТЬ ВСЕ
			          |
			          |ВЫБРАТЬ
			          |	""ФайлОтчетностиПодписьСтрахователя"",
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			          |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
			          |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПервичноеСообщениеСодержащееОтчетность
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |	И СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента = &парамИстина
			          |
			          |ОБЪЕДИНИТЬ ВСЕ
			          |
			          |ВЫБРАТЬ
			          |	""ФайлОтчетностиПодписьОрганаПФР"",
			          |	СодержимоеТранспортныхКонтейнеров.Данные,
			          |	СодержимоеТранспортныхКонтейнеров.Тип,
			          |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			          |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
			          |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
			          |ИЗ
			          |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			          |ГДЕ
			          |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияКвитанцияОПриемеФайлаОтчетности
			          |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			          |	И СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента <> &парамИстина");
			Запрос.УстановитьПараметр("ТипСодержимогоФайлОтчетности", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
			Запрос.УстановитьПараметр("ТипСообщенияПервичноеСообщениеСодержащееОтчетность", Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ТипСообщенияКвитанцияОПриемеФайлаОтчетности", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
			Запрос.УстановитьПараметр("парамИстина", Истина);
		КонецЕсли;
		
		Если ПечататьПодтверждениеПолучения Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			                 |	""ПодтверждениеПолученияПФР"" КАК ИдТипа,
			                 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла,
			                 |	"""" КАК ИмяПодписанногоФайла,
			                 |	"""" КАК Сертификат
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоПодтверждениеПолученияОтчетностиПФР
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПодтверждениеПолученияОтчетностиПФР
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""ПодтверждениеПолученияПФРПодписьОрганаПФР"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			                 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
			                 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПодтверждениеПолученияОтчетностиПФР
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |	И СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента <> &парамИстина");
			Запрос.УстановитьПараметр("ТипСодержимогоПодтверждениеПолученияОтчетностиПФР", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР);
			Запрос.УстановитьПараметр("ТипСообщенияПодтверждениеПолученияОтчетностиПФР", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("парамИстина", Истина);
		КонецЕсли;
		
		Если ПечататьПротокол Тогда
			Подзапросы.Добавить("ВЫБРАТЬ
			                 |	""ПротоколПФР"" КАК ИдТипа,
			                 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла,
			                 |	"""" КАК ИмяПодписанногоФайла,
			                 |	"""" КАК Сертификат
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоПротоколВходногоКонтроля
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротоколВходногоКонтроляОтчетности
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""ПротоколПодписьСтрахователя"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			                 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
			                 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПереподписанныйПротоколВходногоКонтроляОтчетности
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |	И СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента = &парамИстина
			                 |
			                 |ОБЪЕДИНИТЬ ВСЕ
			                 |
			                 |ВЫБРАТЬ
			                 |	""ПротоколПодписьОрганаПФР"",
			                 |	СодержимоеТранспортныхКонтейнеров.Данные,
			                 |	СодержимоеТранспортныхКонтейнеров.Тип,
			                 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			                 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
			                 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
			                 |ИЗ
			                 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                 |ГДЕ
			                 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПротоколВходногоКонтроляОтчетности
			                 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
			                 |	И СодержимоеТранспортныхКонтейнеров.ЭЦПЭтоПодписьАбонента <> &парамИстина");
			Запрос.УстановитьПараметр("ТипСодержимогоПротоколВходногоКонтроля", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР);
			Запрос.УстановитьПараметр("ТипСообщенияПротоколВходногоКонтроляОтчетности", Перечисления.ТипыТранспортныхСообщений.ПротоколПФР);
			Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			Запрос.УстановитьПараметр("ТипСообщенияПереподписанныйПротоколВходногоКонтроляОтчетности", Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
			Запрос.УстановитьПараметр("парамИстина", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// компилируем запрос из подзапросов
	Для Инд = 0 По Подзапросы.Количество() - 1 Цикл
		ТекЗапрос = Подзапросы[Инд];
		Если Инд = 0 Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(ТекЗапрос, 8);
		Иначе
			Запрос.Текст = Запрос.Текст + "
				          |
				          |ОБЪЕДИНИТЬ ВСЕ
				          |
				          |" + ТекЗапрос;
		КонецЕсли;
	КонецЦикла;
	
	// выполняем запрос, сохраняем файлы во временный каталог и формируем таблицу файлов
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Данные) Тогда
				ВременныйФайл = СохранитьДвоичныеДанныеВоВременныйФайл(Выборка.Данные);
				Если ВременныйФайл <> Неопределено Тогда
					НовСтр = Файлы.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
					НовСтр.Файл = ВременныйФайл;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

// 

Функция СформироватьТабличныйДокументНаОсновеБланка(Заголовок, ИмяФайла, Тело, НижнийКолонтитул, Подписи = Неопределено)
	
	Бланк = ПолучитьМакет("БланкПечатиДИВ");
	
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	
	Секция_Заголовок = Бланк.ПолучитьОбласть("Секция_Заголовок");
	Секция_Заголовок.Области.Заголовок.Текст = Заголовок;
	Секция_Заголовок.Области.Файл.Текст = ИмяФайла;
	ТаблДок.Вывести(Секция_Заголовок);
	
	Секция_Разделитель = Бланк.ПолучитьОбласть("Секция_Разделитель");
	ТаблДок.Вывести(Секция_Разделитель);
	
	Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
	ВывестиТекстПострочно(ТаблДок, Секция_Тело, Тело);
	
	Если Подписи <> Неопределено И Подписи.Количество() <> 0 Тогда
		
		ТаблДок.Вывести(Секция_Разделитель);
		
		Секция_Подписи = Бланк.ПолучитьОбласть("Секция_Подписи");
		ТаблДок.Вывести(Секция_Подписи);
		
		Секция_Подпись = Бланк.ПолучитьОбласть("Секция_Подпись");
		Для Каждого Подпись Из Подписи Цикл
			Секция_Подпись.Области.Подпись.Текст = Подпись.Префикс + " " + Подпись.Владелец;// + " (файл " + Подпись.ИмяФайла + ")";
			ТаблДок.Вывести(Секция_Подпись);
		КонецЦикла;
			
	КонецЕсли;
	
	ТаблДок.НижнийКолонтитул.ТекстСлева = НижнийКолонтитул;
	
	//ЗаполнитьЗначенияСвойств(ТаблДок.ВерхнийКолонтитул, Бланк.ВерхнийКолонтитул);
	//ЗаполнитьЗначенияСвойств(ТаблДок.НижнийКолонтитул, Бланк.НижнийКолонтитул);
	
	Возврат ТаблДок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция печатьЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено)
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = печатьСоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				печатьЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			ИначеЕсли ТипУзла = ТипУзлаXML.Текст И ТипЗнч(ТекУзел) = Тип("СтрокаДереваЗначений") И ТекУзел.Тип = "Э" Тогда
				ТекУзел.Значение = ЧтениеXML.Значение;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

Функция печатьСоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция печатьПолучитьЗначенияАтрибутовИЭлементовУзла(Узел)
	
	Результат = Новый Структура;
	Для Каждого УзелСтр Из Узел.Строки Цикл
		Результат.Вставить(УзелСтр.Имя, УзелСтр.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваИзУведомления(СтрУведомление)
	
	Если НЕ ЗначениеЗаполнено(СтрУведомление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Дерево = печатьЗагрузитьСтрокуXMLВДеревоЗначений(СтрУведомление);
	
	УзлыСведУвед = Дерево.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "СведУвед", "Э"), Истина);
	Если УзлыСведУвед.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелСведУвед = УзлыСведУвед[0];
	
	УзлыОбщСвУвед = УзелСведУвед.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ОбщСвУвед", "Э"));
	Если УзлыОбщСвУвед.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелОбщСвУвед = УзлыОбщСвУвед[0];
	
	// заполняем обобщенный результат
	АтрибутыОбщСвУвед = печатьПолучитьЗначенияАтрибутовИЭлементовУзла(УзелОбщСвУвед);
	
	// заполняем рекомендации
	Рекомендации = Новый Массив;
	УзлыРекНал = УзелСведУвед.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "РекНал", "Э"));
	Для Каждого УзелРекНал Из УзлыРекНал Цикл
		Рекомендации.Добавить(СокрЛП(УзелРекНал.Значение));
	КонецЦикла;
	
	// заполняем ошибки
	Ошибки = Новый Массив;
	УзлыСвПоОшибке = УзелСведУвед.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "СвПоОшибке", "Э"));
	Для Каждого УзелСвПоОшибке Из УзлыСвПоОшибке Цикл
		Для Каждого Эл Из УзелСвПоОшибке.Строки Цикл
			Если Эл.Имя = "ТекстОш" Тогда
				Если ЗначениеЗаполнено(Эл.Значение) Тогда
					Ошибки.Добавить(СокрЛП(Эл.Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура("ОбщиеСведения, Рекомендации, Ошибки", АтрибутыОбщСвУвед, Рекомендации, Ошибки);
	
КонецФункции

// - Формирование печатной формы уведомления об уточнении

Процедура ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, Код, Имя)
	
	НовСтр = ПоляОбщихСведений.Добавить();
	НовСтр.Код = Код;
	НовСтр.Имя = Имя;
	
КонецПроцедуры

// - Формирование печатной формы извещения о вводе

// + Формирование печатной формы уведомления об уточнении

Функция СформироватьТабличныйДокументНаОсновеУведомленияОбУточнении(Заголовок, ИмяФайла, Тело, НижнийКолонтитул, Подписи = Неопределено)
	
	// формируем таблицу с объявлениями полей узла с общими сведениями
	ПоляОбщихСведений = Новый ТаблицаЗначений;
	ПоляОбщихСведений.Колонки.Добавить("Код");
	ПоляОбщихСведений.Колонки.Добавить("Имя");
	
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИмяОбрабФайла", "Идентификатор файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдДок", "Идентификатор документа");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "КНД", "Код формы отчетности по КНД");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НаимОтч", "Наименование формы отчета");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ВерсФорм", "Версия формата");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НомКорр", "Номер корректировки");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ОтчетГод", "Отчетный год");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ПериодНаим", "Период");
	
	
	// получаем бланк отчета из макета
	Бланк = ПолучитьМакет("БланкПечатиДИВ");
	
	// инициализируем итоговый табличный документ
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	
	// выводим секцию заголовка
	Секция_Заголовок = Бланк.ПолучитьОбласть("Секция_Заголовок");
	Секция_Заголовок.Области.Заголовок.Текст = Заголовок;
	Секция_Заголовок.Области.Файл.Текст = ИмяФайла;
	ТаблДок.Вывести(Секция_Заголовок);
	
	// выводим разделитель
	Секция_Разделитель = Бланк.ПолучитьОбласть("Секция_Разделитель");
	ТаблДок.Вывести(Секция_Разделитель);
	
	// пытаемся разобрать уведомление
	СвойстваИзУведомления = ПолучитьОсновныеСвойстваИзУведомления(Тело);
	
	// если разобрать не удалось - выводим его в виде текста
	Если НЕ ЗначениеЗаполнено(СвойстваИзУведомления) Тогда
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		ВывестиТекстПострочно(ТаблДок, Секция_Тело, Тело);
		
	// если текст уведомления разобрать удалось, то выводим основную инфорфмацию из него
	Иначе
		
		// получаем область для вывода единицы информации уведомления
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		
		ОбщиеСведения = СвойстваИзУведомления.ОбщиеСведения;
		Если ЗначениеЗаполнено(ОбщиеСведения) Тогда
			
			// выводим "шапку" общих сведений
			Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
			Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Общие сведения:";
			ТаблДок.Вывести(Секция_ЗаголовокГруппы);
			
			// выводим общие сведения поэлементно
			Для Каждого ПолеОбщихСведений Из ПоляОбщихСведений Цикл
				Если ОбщиеСведения.Свойство(ПолеОбщихСведений.Код) Тогда
					ЗначениеПоля = ОбщиеСведения[ПолеОбщихСведений.Код];
					Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
						Секция_Тело.Области.Тело.Текст = ПолеОбщихСведений.Имя + ": " + СокрЛП(ЗначениеПоля);
						ТаблДок.Вывести(Секция_Тело);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// выводим обобщенный результат проверки
			Если ОбщиеСведения.Свойство("ТекстОшОб") Тогда
				ТекстОшОб = СокрЛП(ОбщиеСведения.ТекстОшОб);
				Если ЗначениеЗаполнено(ТекстОшОб) Тогда
					
					Секция_ПустаяСтрока = Бланк.ПолучитьОбласть("Секция_ПустаяСтрока");
					ТаблДок.Вывести(Секция_ПустаяСтрока);
					
					Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Обобщенный результат проверки:";
					ТаблДок.Вывести(Секция_ЗаголовокГруппы);
					
					ВывестиТекстПострочно(ТаблДок, Секция_Тело, ТекстОшОб);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// выводим информацию о рекомендациях
		Если СвойстваИзУведомления.Рекомендации.Количество() > 0 Тогда
			
			Секция_ПустаяСтрока = Бланк.ПолучитьОбласть("Секция_ПустаяСтрока");
			ТаблДок.Вывести(Секция_ПустаяСтрока);
			
			Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
			Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Рекомендации:";
			ТаблДок.Вывести(Секция_ЗаголовокГруппы);
			
			Для Каждого Рекомендация Из СвойстваИзУведомления.Рекомендации Цикл
				ВывестиТекстПострочно(ТаблДок, Секция_Тело, Рекомендация);
			КонецЦикла;
			
		КонецЕсли;
		
		// выводим информацию об ошибках
		Если СвойстваИзУведомления.Ошибки.Количество() > 0 Тогда
			
			Секция_ПустаяСтрока = Бланк.ПолучитьОбласть("Секция_ПустаяСтрока");
			ТаблДок.Вывести(Секция_ПустаяСтрока);
			
			Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
			Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Ошибки:";
			ТаблДок.Вывести(Секция_ЗаголовокГруппы);
			
			Для Каждого Ошибка Из СвойстваИзУведомления.Ошибки Цикл
				ВывестиТекстПострочно(ТаблДок, Секция_Тело, Ошибка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// выводим информацию о подписях
	Если Подписи <> Неопределено И Подписи.Количество() <> 0 Тогда
		
		ТаблДок.Вывести(Секция_Разделитель);
		
		Секция_Подписи = Бланк.ПолучитьОбласть("Секция_Подписи");
		ТаблДок.Вывести(Секция_Подписи);
		
		Секция_Подпись = Бланк.ПолучитьОбласть("Секция_Подпись");
		Для Каждого Подпись Из Подписи Цикл
			Секция_Подпись.Области.Подпись.Текст = Подпись.Префикс + " " + Подпись.Владелец;// + " (файл " + Подпись.ИмяФайла + ")";
			ТаблДок.Вывести(Секция_Подпись);
		КонецЦикла;
			
	КонецЕсли;
	
	
	// инициализируем текст нижнего колонтитула
	ТаблДок.НижнийКолонтитул.ТекстСлева = НижнийКолонтитул;
	
	
	Возврат ТаблДок;
	
КонецФункции

Процедура ВывестиТекстПострочно(ТаблДок, МакетСтрока, Текст, ИмяОбласти = "Тело")
	
	Для Инд = 1 По СтрЧислоСтрок(Текст) Цикл
		МакетСтрока.Области[ИмяОбласти].Текст = СтрПолучитьСтроку(Текст, Инд);
		ТаблДок.Вывести(МакетСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЭЦП(Файлы, ИсходныйФайл)
	
	// константы
	СоответствиеИдТипаПрефиксуТипаПодписанта = Новый Соответствие;
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ФайлОтчетностиПодписьНалоговогоОргана", "Подпись налогового органа:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПодтверждениеОтправкиПодписьПочтовогоСервера", "Подпись сервера документооборота:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПротоколПодписьНалоговогоОргана", "Подпись налогового органа:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("УведомлениеПодписьНалоговогоОргана", "Подпись налогового органа:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("Протокол2НДФЛПодписьНалоговогоОргана", "Подпись налогового органа:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("Реестр2НДФЛПодписьНалоговогоОргана", "Подпись налогового органа:");
	
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ФайлОтчетностиПодписьОрганаПФР", "Подпись органа ПФР:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПодтверждениеПолученияПФРПодписьОрганаПФР", "Подпись органа ПФР:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПротоколПодписьОрганаПФР", "Подпись органа ПФР:");

	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ФайлОтчетностиПодписьНалогоплательщика", "Подпись налогоплательщика:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПодтверждениеОтправкиПодписьНалогоплательщика", "Подпись налогоплательщика:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПротоколПодписьНалогоплательщика", "Подпись налогоплательщика:");
	
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ФайлОтчетностиПодписьСтрахователя", "Подпись страхователя:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПротоколПодписьСтрахователя", "Подпись страхователя:");
	
	// 534
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПодтверждениеДатыОтправкиПодписьНалогоплательщика", "Подпись налогоплательщика:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("РезультатПриемаПодписьНалогоплательщика", "Подпись налогоплательщика:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("РезультатОбработкиПодписьНалогоплательщика", "Подпись налогоплательщика:");
	
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("ПодтверждениеДатыОтправкиПодписьПочтовогоСервера", "Подпись сервера документооборота:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("РезультатПриемаПодписьНалоговогоОргана", "Подпись налогового органа:");
	СоответствиеИдТипаПрефиксуТипаПодписанта.Вставить("РезультатОбработкиПодписьНалоговогоОргана", "Подпись налогового органа:");
	
	// инициализируем таблицу возможных подписей и их свойств
	КартаДокументовИПодписей = ИнициализироватьКартуДокументовИПодписей();
	
	// инициализируем таблицу результата
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Префикс");
	Результат.Колонки.Добавить("Владелец");
	Результат.Колонки.Добавить("ИмяФайла");
	
	// находим строку, соответствующую типу подписанного файла, во вспомогательной таблице
	СтрОпределениеТипа = КартаДокументовИПодписей.Найти(ИсходныйФайл.ИдТипа, "ИдТипа");
	Если СтрОпределениеТипа = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// определяем подписи сначала абонента, а затем сторонней организации
	Если Файлы.Колонки.Найти("ИмяПодписанногоФайла") <> Неопределено Тогда
		ПодписиАбонента = Файлы.НайтиСтроки(Новый Структура("ИдТипа, ИмяПодписанногоФайла", СтрОпределениеТипа.ИдПодписиНалогоплательщика, ИсходныйФайл.ИмяФайла));
		ПодписиКонтрагента = Файлы.НайтиСтроки(Новый Структура("ИдТипа, ИмяПодписанногоФайла", СтрОпределениеТипа.ИдПодписиКонтрагента, ИсходныйФайл.ИмяФайла));
	Иначе
		
		ПодписиАбонента = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиНалогоплательщика));
		Если ПодписиАбонента.Количество() = 0 И ЗначениеЗаполнено(СтрОпределениеТипа.ИдПодписиНалогоплательщика2) Тогда
			ПодписиАбонента = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиНалогоплательщика2));
		КонецЕсли;
		
		ПодписиКонтрагента = Файлы.НайтиСтроки(Новый Структура("ИдТипа", СтрОпределениеТипа.ИдПодписиКонтрагента));
		
	КонецЕсли;
	
	// помещаем подписи абонента в результирующую таблицу
	Если ЗначениеЗаполнено(ПодписиАбонента) Тогда
		Для Инд = 1 По ПодписиАбонента.Количество() Цикл
			ТекЭл = ПодписиАбонента[Инд - 1];
			ИмяВладельца = печатьПредставлениеЭЦП(ТекЭл);
			Если Результат.Найти(ИмяВладельца, "Владелец") = Неопределено Тогда
				НовСтр = Результат.Добавить();
				НовСтр.Владелец = ИмяВладельца;
				НовСтр.ИмяФайла = ТекЭл.ИмяФайла;
				НовСтр.Префикс = СоответствиеИдТипаПрефиксуТипаПодписанта[ТекЭл.ИдТипа];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// помещаем подписи контрагента в результирующую таблицу
	Если ЗначениеЗаполнено(ПодписиКонтрагента) Тогда
		Для Инд = 1 По ПодписиКонтрагента.Количество() Цикл
			ТекЭл = ПодписиКонтрагента[Инд - 1];
			ИмяВладельца = печатьПредставлениеЭЦП(ТекЭл);
			Если Результат.Найти(ИмяВладельца, "Владелец") = Неопределено Тогда
				НовСтр = Результат.Добавить();
				НовСтр.Владелец = ИмяВладельца;
				НовСтр.ИмяФайла = ТекЭл.ИмяФайла;
				НовСтр.Префикс = СоответствиеИдТипаПрефиксуТипаПодписанта[ТекЭл.ИдТипа];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция печатьПредставлениеЭЦП(СтрЭЦП)
	
	Если нрег(Прав(СтрЭЦП.ИмяФайла, 4)) = ".bin" Тогда // это файл подписи ПФР
		
		// пробуем определить имя владельца сертификата по отпечатку
		Если ЗначениеЗаполнено(СтрЭЦП.Сертификат) Тогда
			Сертификат = ПолучитьСвойстваСертификатаПоОтпечатку(СтрЭЦП.Сертификат);
			ПредставлениеСертификата = ПредставлениеСертификата(Сертификат);
			Если ЗначениеЗаполнено(ПредставлениеСертификата) Тогда
				Возврат ПредставлениеСертификата;
			КонецЕсли;
		КонецЕсли;
		
		// если не удалось определить ФИО по отпечатку, то возвращаем имя файла подписи
		Возврат СтрЭЦП.ИмяФайла;
		
	Иначе
		
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			Возврат "";
		КонецЕсли;
		ДвДанные.Прочитать(СтрЭЦП.Файл);
		
		Попытка
			ДвДанные.ТекущаяПозиция = 28;
			Стр1251 = ДвДанные.ПолучитьСтроку(ДвДанные.ПолучитьЧисло(4), "windows-1251");
			ДвДанные.ТекущаяПозиция = 28;
			Стр866 = ДвДанные.ПолучитьСтроку(ДвДанные.ПолучитьЧисло(4), "ibm866");
			Возврат АвтоматическиОпределитьКодировкуТекста(Стр1251, Стр866);
		Исключение
			Сообщить("Ошибка извлечения имени подписанта из файла подписи!", СтатусСообщения.Важное);
			Возврат "";
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция АвтоматическиОпределитьКодировкуТекста(Стр1, Стр2)
	
	РусскийАлфавит = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	
	Частота1 = 0;
	Для Инд = 1 По СтрДлина(Стр1) Цикл
		Частота1 = Частота1 + (Найти(РусскийАлфавит, ВРЕГ(Сред(Стр1, Инд, 1))) <> 0);
	КонецЦикла;
	
	Частота2 = 0;
	Для Инд = 1 По СтрДлина(Стр2) Цикл
		Частота2 = Частота2 + (Найти(РусскийАлфавит, ВРЕГ(Сред(Стр2, Инд, 1))) <> 0);
	КонецЦикла;
	
	Возврат ?(Частота2 > Частота1, Стр2, Стр1);
	
КонецФункции

Функция печатьПредставлениеЦиклаОбмена(ЦиклОбмена, ДляКолонтитула = Истина) Экспорт
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		Результат = ?(ЦиклОбмена.ВидДокумента = 0, "Первичный", "Корректирующий (корр. №" + ЦиклОбмена.ВидДокумента + ")") + " отчет вида """ + ЦиклОбмена.ВидОтчета + """"
					+ ?(ДляКолонтитула, Символы.ПС, " ")
					+ "по организации """ + ЦиклОбмена.Организация
					+ """ за " + ПредставлениеПериода(НачалоДня(ЦиклОбмена.ДатаНачалаПериода), КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина")
					+ " в ИФНС " + ЦиклОбмена.ВнешняяОрганизация;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		Результат = "2-НДФЛ"
					+ ?(ДляКолонтитула, Символы.ПС, " ")
					+ "по организации """ + ЦиклОбмена.Организация
					+ """ за " + ПредставлениеПериода(НачалоДня(ЦиклОбмена.ДатаНачалаПериода), КонецДня(ЦиклОбмена.ДатаОкончанияПериода), "ФП=Истина");
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		Результат = "";
		ПервичноеСообщение = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО);
		Если ЗначениеЗаполнено(ПервичноеСообщение) Тогда
			Результат = ПервичноеСообщение.Тема + ". От ИФНС " + ЦиклОбмена.ВнешняяОрганизация + " для организации " + ЦиклОбмена.Организация;
		Иначе
			Результат = "Неформализованный документ налогового органа";
		КонецЕсли;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		Предмет = ЦиклОбмена.Предмет;
		СвойстваДокумента = ПолучитьСвойстваНеформализованногоДокумента(Предмет);
		Если СвойстваДокумента <> Неопределено Тогда
			Результат = Строка(СвойстваДокумента.Тип);
		Иначе
			Результат = "Документ";
		КонецЕсли;
		Результат = Результат + " """ + СвойстваДокумента.ИмяФайла
					+ """ от организации """ + ЦиклОбмена.Организация
					+ """ в ИФНС " + ЦиклОбмена.ВнешняяОрганизация;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		Результат = "Запрос """ + ЦиклОбмена.ВидУслуги
					+ """ по организации """ + ЦиклОбмена.Организация
					+ """ за " + Формат(ЦиклОбмена.ДатаНачалаПериода, "ДФ='dd.MM.yyyy'") + " - " + Формат(ЦиклОбмена.ДатаОкончанияПериода, "ДФ='dd.MM.yyyy'");
					//+ " (формат ответа: " + ЦиклОбмена.ФорматОтвета + ")";
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		Результат = "Запрос """ + ЦиклОбмена.ВидУслуги
					+ """ по организации """ + ЦиклОбмена.Организация
					+ """ за " + Формат(ЦиклОбмена.ДатаНачалаПериода, "ДФ='dd.MM.yyyy'") + " - " + Формат(ЦиклОбмена.ДатаОкончанияПериода, "ДФ='dd.MM.yyyy'");
					//+ " (формат ответа: " + ЦиклОбмена.ФорматОтвета + ")";
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		ПредставлениеЦиклаОбмена = "Вход. письмо от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		ПредставлениеЦиклаОбмена = "Вход. рассылка от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		ПредставлениеЦиклаОбмена = "Вход. групповая рассылка от НО " + ЦиклОбмена.ВнешняяОрганизация + " от " + ЦиклОбмена.ДатаСоздания;
	Иначе
		Результат = ПредставлениеЦиклаОбмена(ЦиклОбмена);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойстваНеформализованногоДокумента(Предмет)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ВложенияНеформализованныхДокументов.ИмяФайла,
	                      |	ВложенияНеформализованныхДокументов.Тип
	                      |ИЗ
	                      |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	                      |ГДЕ
	                      |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент");
	Запрос.УстановитьПараметр("НеформализованныйДокумент", Предмет);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ИмяФайла) Тогда
		Возврат Новый Структура("ИмяФайла, Тип", Выборка.ИмяФайла, Выборка.Тип);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Формирование таблицы со свойствами типов подписей

Функция ИнициализироватьКартуДокументовИПодписей()
	
	КартаДокументовИПодписей = Новый ТаблицаЗначений;
	КартаДокументовИПодписей.Колонки.Добавить("ИдТипа");
	КартаДокументовИПодписей.Колонки.Добавить("ИдПодписиНалогоплательщика");
	КартаДокументовИПодписей.Колонки.Добавить("ИдПодписиКонтрагента");
	КартаДокументовИПодписей.Колонки.Добавить("ИдПодписиНалогоплательщика2");
	КартаДокументовИПодписей.Колонки.Добавить("ПрефиксПодписиКонтрагента");

	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"ФайлОтчетности",
											"ФайлОтчетностиПодписьНалогоплательщика",
											"ФайлОтчетностиПодписьНалоговогоОргана",
											,
											"Подпись налогового органа");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"ФайлОтчетностиПФР",
											"ФайлОтчетностиПодписьСтрахователя",
											"ФайлОтчетностиПодписьОрганаПФР",
											,
											"Подпись органа ПФР");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"ПодтверждениеПолученияПФР",
											,
											"ПодтверждениеПолученияПФРПодписьОрганаПФР",
											,
											"Подпись органа ПФР");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"ПодтверждениеОтправки",
											"ПодтверждениеОтправкиПодписьНалогоплательщика",
											"ПодтверждениеОтправкиПодписьПочтовогоСервера",
											"ПодтверждениеОтправкиПодписьНалогоплательщикаИзРегистраПодписей",
											"Подпись сервера документооборота");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"Протокол",
											"ПротоколПодписьНалогоплательщика",
											"ПротоколПодписьНалоговогоОргана",
											"ПротоколПодписьНалогоплательщикаИзРегистраПодписей",
											"Подпись налогового органа");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"ПротоколПФР",
											"ПротоколПодписьСтрахователя",
											"ПротоколПодписьОрганаПФР",
											"ПротоколПодписьНалогоплательщикаИзРегистраПодписей",
											"Подпись органа ПФР");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"Уведомление",
											,
											"УведомлениеПодписьНалоговогоОргана",
											,
											"Подпись налогового органа");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"Протокол2НДФЛ",
											,
											"Протокол2НДФЛПодписьНалоговогоОргана",
											,
											"Подпись налогового органа");
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"Реестр2НДФЛ",
											,
											"Реестр2НДФЛПодписьНалоговогоОргана",
											,
											"Подпись налогового органа");
											
	
	// подписи 534
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"ПодтверждениеДатыОтправки",
											"ПодтверждениеДатыОтправкиПодписьНалогоплательщика",
											"ПодтверждениеДатыОтправкиПодписьПочтовогоСервера",
											"",
											"Подпись сервера документооборота");
	
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"РезультатПриема",
											"РезультатПриемаПодписьНалогоплательщика",
											"РезультатПриемаПодписьНалоговогоОргана",
											"",
											"Подпись налогового органа");
	
	ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей,
											"РезультатОбработки",
											"РезультатОбработкиПодписьНалогоплательщика",
											"РезультатОбработкиПодписьНалоговогоОргана",
											"",
											"Подпись налогового органа");
	
	Возврат КартаДокументовИПодписей;
	
КонецФункции

Процедура ОпределитьСтрокуВКартеДокументовИПодписей(КартаДокументовИПодписей, ИдТипа, ИдПодписиНалогоплательщика, ИдПодписиКонтрагента, ИдПодписиНалогоплательщика2 = Неопределено, ПрефиксПодписиКонтрагента)
	
	НовСтр = КартаДокументовИПодписей.Добавить();
	НовСтр.ИдТипа = ИдТипа;
	НовСтр.ИдПодписиНалогоплательщика = ИдПодписиНалогоплательщика;
	НовСтр.ИдПодписиКонтрагента = ИдПодписиКонтрагента;
	НовСтр.ИдПодписиНалогоплательщика2 = ИдПодписиНалогоплательщика2;
	НовСтр.ПрефиксПодписиКонтрагента = ПрефиксПодписиКонтрагента;
	
КонецПроцедуры

// ПЕЧАТЬ ДОКУМЕНТОВ ЦИКЛОВ ОБМЕНА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ЗАПРОСА НА ИНФОРМАЦИОННОЕ ОБСЛУЖИВАНИЕ

Функция СформироватьЗапрос(ДокЗапрос, Запрос, ИмяФайла) Экспорт
	
	Параметры = СформироватьПараметры(ДокЗапрос);
	Если НЕ ПроверитьЗаполнениеЗапроса(ДокЗапрос, Параметры) Тогда
		Сообщить("Не удалось сформировать запрос!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	СоответствиеВидаУслугиКоду = Новый Соответствие;
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов, "4");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом, "2");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности, "3");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате, "5");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом, "1");

	СоответствиеФорматаКоду = Новый Соответствие;
	СоответствиеФорматаКоду.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.HTML,	"HTML"	);
	СоответствиеФорматаКоду.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.PDF,	"PDF"	);
	СоответствиеФорматаКоду.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.RTF,	"RTF"	);
	СоответствиеФорматаКоду.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.TXT,	"TXT"	);
	СоответствиеФорматаКоду.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XML,	"XML"	);
	СоответствиеФорматаКоду.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XLS,	"XLS"	);

	// инициализация дерева выгрузки
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Код");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	
	// заполнение дерева выгрузки
	СлЧаст = ДеревоСтруктуры.Строки.Добавить();
	СлЧаст.Код = "СлЧаст";
	СлЧаст.Тип = "С";
	
		ОбщСвСч = СлЧаст.Строки.Добавить();
		ОбщСвСч.Код = "ОбщСвСч";
		ОбщСвСч.Тип = "С";
		
			ИдФайл = ОбщСвСч.Строки.Добавить();
			ИдФайл.Код = "ИдФайл";
			ИдФайл.Тип = "С";
			
				НомФайл = ИдФайл.Строки.Добавить();
				НомФайл.Код = "НомФайл";
				НомФайл.Тип = "П";
				НомФайл.Значение = Строка(Новый УникальныйИдентификатор);
				
				ДатаФайл = ИдФайл.Строки.Добавить();
				ДатаФайл.Код = "ДатаФайл";
				ДатаФайл.Тип = "П";
				ДатаФайл.Значение = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
			
			ТипИнф = ОбщСвСч.Строки.Добавить();
			ТипИнф.Код = "ТипИнф";
			ТипИнф.Тип = "П";
			ТипИнф.Значение = "ЗАПРОСИНФУСЛ";
			
			ВерсФорм = ОбщСвСч.Строки.Добавить();
			ВерсФорм.Код = "ВерсФорм";
			ВерсФорм.Тип = "П";
			ВерсФорм.Значение = "1.01";
			
			КолЗапр = ОбщСвСч.Строки.Добавить();
			КолЗапр.Код = "КолЗапр";
			КолЗапр.Тип = "П";
			КолЗапр.Значение = "1";
			
			ВерсПрог = ОбщСвСч.Строки.Добавить();
			ВерсПрог.Код = "ВерсПрог";
			ВерсПрог.Тип = "П";
			ВерсПрог.Значение = РегламентированнаяОтчетность.СформироватьВерсПрог();
		
		ИдПол = СлЧаст.Строки.Добавить();
		ИдПол.Код = "ИдПол";
		ИдПол.Тип = "С";
		
			НО = ИдПол.Строки.Добавить();
			НО.Код = "НО";
			НО.Тип = "П";
			НО.Значение = СокрЛП(ДокЗапрос.Получатель.Код);
		
		ОтпрФайл = СлЧаст.Строки.Добавить();
		ОтпрФайл.Код = "ОтпрФайл";
		ОтпрФайл.Тип = "С";
		
			ИдОтпр = ОтпрФайл.Строки.Добавить();
			ИдОтпр.Код = "ИдОтпр";
			ИдОтпр.Тип = "С";
			
			Если Параметры.ЭтоПБОЮЛ Тогда
				
				ФЛ = ИдОтпр.Строки.Добавить();
				ФЛ.Код = "ФЛ";
				ФЛ.Тип = "С";
				
					ФИО = ФЛ.Строки.Добавить();
					ФИО.Код = "ФИО";
					ФИО.Тип = "С";
					
						Фамилия = ФИО.Строки.Добавить();
						Фамилия.Код = "Фамилия";
						Фамилия.Тип = "П";
						Фамилия.Значение = Параметры.ИПФамилия;
						
						Имя = ФИО.Строки.Добавить();
						Имя.Код = "Имя";
						Имя.Тип = "П";
						Имя.Значение = Параметры.ИПИмя;
						
						Если НЕ ПустаяСтрока(Параметры.ИПОтчество) Тогда
							Отчество = ФИО.Строки.Добавить();
							Отчество.Код = "Отчество";
							Отчество.Тип = "П";
							Отчество.Значение = Параметры.ИПОтчество;
						КонецЕсли;
					
					ИННФЛ = ФЛ.Строки.Добавить();
					ИННФЛ.Код = "ИННФЛ";
					ИННФЛ.Тип = "П";
					ИННФЛ.Значение = СокрЛП(Параметры.ИННФЛ);
					
			АдрОтпр = ОтпрФайл.Строки.Добавить();
			АдрОтпр.Код = "АдрОтпр";
			АдрОтпр.Тип = "С";
			ЗаписатьАдрес(АдрОтпр, Параметры.АдрМЖ);
			
			Если ЗначениеЗаполнено(Параметры.ТелДом) Тогда
				Тел = ОтпрФайл.Строки.Добавить();
				Тел.Код = "Тел";
				Тел.Тип = "П";
				Тел.Значение = СокрЛП(Лев(Параметры.ТелДом, 20));
			КонецЕсли;
			
			Иначе
				
				ЮЛ = ИдОтпр.Строки.Добавить();
				ЮЛ.Код = "ЮЛ";
				ЮЛ.Тип = "С";
				
					НаимОрг = ЮЛ.Строки.Добавить();
					НаимОрг.Код = "НаимОрг";
					НаимОрг.Тип = "П";
					НаимОрг.Значение = СокрЛП(Лев(Параметры.НаимЮЛПол, 1000));
					
					НаимОрг = ЮЛ.Строки.Добавить();
					НаимОрг.Код = "ИННЮЛ";
					НаимОрг.Тип = "П";
					НаимОрг.Значение = СокрЛП(Параметры.ИННЮЛ);
					
					НаимОрг = ЮЛ.Строки.Добавить();
					НаимОрг.Код = "КПП";
					НаимОрг.Тип = "П";
					НаимОрг.Значение = СокрЛП(Параметры.КППЮЛ);
					
			АдрОтпр = ОтпрФайл.Строки.Добавить();
			АдрОтпр.Код = "АдрОтпр";
			АдрОтпр.Тип = "С";
			ЗаписатьАдрес(АдрОтпр, Параметры.АдрЮР);
			
			Если ЗначениеЗаполнено(Параметры.ТелОрганизации) Тогда
				Тел = ОтпрФайл.Строки.Добавить();
				Тел.Код = "Тел";
				Тел.Тип = "П";
				Тел.Значение = СокрЛП(Лев(Параметры.ТелОрганизации, 20));
			КонецЕсли;
			
			КонецЕсли;
		
	ВидУслугиКод = СоответствиеВидаУслугиКоду[ДокЗапрос.ВидУслуги];
	
	ИнфЧаст = ДеревоСтруктуры.Строки.Добавить();
	ИнфЧаст.Код = "ИнфЧаст";
	ИнфЧаст.Тип = "С";
	
		ИдДок = ИнфЧаст.Строки.Добавить();
		ИдДок.Код = "ИдДок";
		ИдДок.Тип = "С";
		
			НомДок = ИдДок.Строки.Добавить();
			НомДок.Код = "НомДок";
			НомДок.Тип = "П";
			НомДок.Значение = Строка(Новый УникальныйИдентификатор);
			
			ДатаДок = ИдДок.Строки.Добавить();
			ДатаДок.Код = "ДатаДок";
			ДатаДок.Тип = "П";
			ДатаДок.Значение = Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		
		СвНП = ИнфЧаст.Строки.Добавить();
		СвНП.Код = "СвНП";
		СвНП.Тип = "С";
		
		Если Параметры.ЭтоПБОЮЛ Тогда
			
			СвНПИП = СВНП.Строки.Добавить();
			СвНПИП.Код = "СвНПИП";
			СвНПИП.Тип = "С";
			
				ФИО = СвНПИП.Строки.Добавить();
				ФИО.Код = "ФИО";
				ФИО.Тип = "С";
				
					Фамилия = ФИО.Строки.Добавить();
					Фамилия.Код = "Фамилия";
					Фамилия.Тип = "П";
					Фамилия.Значение = Параметры.ИПФамилия;
					
					Имя = ФИО.Строки.Добавить();
					Имя.Код = "Имя";
					Имя.Тип = "П";
					Имя.Значение = Параметры.ИПИмя;
					
					Если НЕ ПустаяСтрока(Параметры.ИПОтчество) Тогда
						Отчество = ФИО.Строки.Добавить();
						Отчество.Код = "Отчество";
						Отчество.Тип = "П";
						Отчество.Значение = Параметры.ИПОтчество;
					КонецЕсли;
			
				АдрМЖРФ = СвНПИП.Строки.Добавить();
				АдрМЖРФ.Код = "АдрМЖРФ";
				АдрМЖРФ.Тип = "С";
				ЗаписатьАдрес(АдрМЖРФ, Параметры.АдрМЖ);
				
				ИННФЛ = СвНПИП.Строки.Добавить();
				ИННФЛ.Код = "ИННФЛ";
				ИННФЛ.Тип = "П";
				ИННФЛ.Значение = Параметры.ИННЮЛ;
				
				СОНО = СвНПИП.Строки.Добавить();
				СОНО.Код = "СОНО";
				СОНО.Тип = "П";
				СОНО.Значение = Параметры.КодНО;
				
		Иначе
			
			СвНПЮЛ = СВНП.Строки.Добавить();
			СвНПЮЛ.Код = "СвНПЮЛ";
			СвНПЮЛ.Тип = "С";
			
				НаимЮЛПол = СвНПЮЛ.Строки.Добавить();
				НаимЮЛПол.Код = "НаимЮЛПол";
				НаимЮЛПол.Тип = "П";
				НаимЮЛПол.Значение = СокрЛП(Лев(Параметры.НаимЮЛПол, 1000));
				
				ИННЮЛ = СвНПЮЛ.Строки.Добавить();
				ИННЮЛ.Код = "ИННЮЛ";
				ИННЮЛ.Тип = "П";
				ИННЮЛ.Значение = Параметры.ИННЮЛ;
				
				КПП = СвНПЮЛ.Строки.Добавить();
				КПП.Код = "КПП";
				КПП.Тип = "П";
				КПП.Значение = Параметры.КППЮЛ;
				
				АдрМНЮЛ = СвНПЮЛ.Строки.Добавить();
				АдрМНЮЛ.Код = "АдрМНЮЛ";
				АдрМНЮЛ.Тип = "С";
				ЗаписатьАдрес(АдрМНЮЛ, Параметры.АдрЮр);
				
				СОНО = СвНПЮЛ.Строки.Добавить();
				СОНО.Код = "СОНО";
				СОНО.Тип = "П";
				СОНО.Значение = Параметры.КодНО;
				
		КонецЕсли;
		
		ВидУсл = ИнфЧаст.Строки.Добавить();
		ВидУсл.Код = "ВидУсл";
		ВидУсл.Тип = "П";
		ВидУсл.Значение = ВидУслугиКод;
		
		ГодЗапр = ИнфЧаст.Строки.Добавить();
		ГодЗапр.Код = "ГодЗапр";
		ГодЗапр.Тип = "П";
		ГодЗапр.Значение = Формат(Год(ДокЗапрос.ДатаНачалаПериода), "ЧГ=");
		
		ДатаЗапр = ИнфЧаст.Строки.Добавить();
		ДатаЗапр.Код = "ДатаЗапр";
		ДатаЗапр.Тип = "С";
		
			ДатаНач = ДатаЗапр.Строки.Добавить();
			ДатаНач.Код = "ДатаНач";
			ДатаНач.Тип = "П";
			ДатаНач.Значение = Формат(ДокЗапрос.ДатаНачалаПериода, "ДФ=dd.MM.yyyy");
			
			ДатаКон = ДатаЗапр.Строки.Добавить();
			ДатаКон.Код = "ДатаКон";
			ДатаКон.Тип = "П";
			ДатаКон.Значение = Формат(ДокЗапрос.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy");
		
		Для Каждого ЗапрашиваемыйНалог Из ДокЗапрос.ЗапрашиваемыеНалоги Цикл
				
			СвНал = ИнфЧаст.Строки.Добавить();
			СвНал.Код = "СвНал";
			СвНал.Тип = "С";
			
				КБК = СвНал.Строки.Добавить();
				КБК.Код = "КБК";
				КБК.Тип = "П";
				КБК.Значение = ЗапрашиваемыйНалог.КБК;
				
				ОКАТО = СвНал.Строки.Добавить();
				ОКАТО.Код = "ОКАТО";
				ОКАТО.Тип = "П";
				ОКАТО.Значение = ЗапрашиваемыйНалог.ОКАТО;
				
		КонецЦикла;
		
		ТребУслуг = ИнфЧаст.Строки.Добавить();
		ТребУслуг.Код = "ТребУслуг";
		ТребУслуг.Тип = "С";
		
		Если ВидУслугиКод = "1" Тогда
			
			УслВыбПолУсл = ТребУслуг.Строки.Добавить();
			УслВыбПолУсл.Код = "УслВыбПолУсл";
			УслВыбПолУсл.Тип = "П";
			УслВыбПолУсл.Значение = ?(ДокЗапрос.ДополнительныйПараметр = 1, "1", "2");
			
		ИначеЕсли ВидУслугиКод = "2" Тогда
			
			УслФорВып = ТребУслуг.Строки.Добавить();
			УслФорВып.Код = "УслФорВып";
			УслФорВып.Тип = "П";
			УслФорВып.Значение = ?(ДокЗапрос.ДополнительныйПараметр = 1, "1", "2");
			
		ИначеЕсли ВидУслугиКод = "3" Тогда
			
			УслВыбДек = ТребУслуг.Строки.Добавить();
			УслВыбДек.Код = "УслВыбДек";
			УслВыбДек.Тип = "П";
			УслВыбДек.Значение = Строка(ДокЗапрос.ДополнительныйПараметр);
			
		ИначеЕсли ВидУслугиКод = "4" Тогда
			
			АктСверк = ТребУслуг.Строки.Добавить();
			АктСверк.Код = "АктСверк";
			АктСверк.Тип = "П";
			АктСверк.Значение = "1";
			
		ИначеЕсли ВидУслугиКод = "5" Тогда
			
			УслИспОбяз = ТребУслуг.Строки.Добавить();
			УслИспОбяз.Код = "УслИспОбяз";
			УслИспОбяз.Тип = "С";
			
				ПредстСпр = УслИспОбяз.Строки.Добавить();
				ПредстСпр.Код = "ПредстСпр";
				ПредстСпр.Тип = "П";
				ПредстСпр.Значение = Строка(ДокЗапрос.ДополнительныйПараметр + 1);
				
				Если ПредстСпр.Значение = "2" Тогда
				
					АдрПрСпр = УслИспОбяз.Строки.Добавить();
					АдрПрСпр.Код = "АдрПрСпр";
					АдрПрСпр.Тип = "П";
					ЗаписатьАдрес(АдрПрСпр, ДокЗапрос.АдресПредставленияСправки);
					
				КонецЕсли;
				
		КонецЕсли;
		
		ФормОтв = ИнфЧаст.Строки.Добавить();
		ФормОтв.Код = "ФормОтв";
		ФормОтв.Тип = "П";
		ФормОтв.Значение = СоответствиеФорматаКоду[ДокЗапрос.ФорматОтвета];
		
	ТекстВыгрузкиXML = ВыгрузитьДеревоВXML(ДеревоСтруктуры);
	ВремФайл = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ТекстВыгрузкиXML);
	ЗаписьТекста.Закрыть();
	Запрос = Новый ДвоичныеДанные(ВремФайл);
	УдалитьФайлы(ВремФайл);
	
	ИмяФайла = "NP_NO_"
			 + СокрЛП(ДокЗапрос.Получатель.Код)
			 + "_"
			 + ?(Параметры.ЭтоПБОЮЛ, СокрЛП(Параметры.ИННЮЛ), СокрЛП(Параметры.ИННЮЛ) + СокрЛП(Параметры.КППЮЛ))
			 + "_"
			 + Формат(ТекущаяДата(), "ДФ=ddMMyyyy")
			 + "_"
			 + НомФайл.Значение
			 + ".xml";
		
	Возврат Истина;
	
КонецФункции

Функция ФИОИндивидуальногоПредпринимателя(Организация)
	
	ЗапросФИО = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ФИОФизЛицСрезПоследних.Фамилия,
	                      |	ФИОФизЛицСрезПоследних.Имя,
	                      |	ФИОФизЛицСрезПоследних.Отчество
	                      |ИЗ
	                      |	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ТекДата, ) КАК ФИОФизЛицСрезПоследних
	                      |ГДЕ
	                      |	ФИОФизЛицСрезПоследних.ФизЛицо = &ФизЛицо");
	ЗапросФИО.УстановитьПараметр("ТекДата", ТекущаяДата());
	ЗапросФИО.УстановитьПараметр("ФизЛицо", Организация.ИндивидуальныйПредприниматель);
	Выборка = ЗапросФИО.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Фамилия, Имя, Отчество", Выборка.Фамилия, Выборка.Имя, Выборка.Отчество);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПроверитьЗаполнениеЗапроса(ДокЗапрос, Параметры)
	
	СтатусПроверки = Истина;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.Организация) Тогда
		Сообщить("Не задана организация!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокЗапрос.Получатель) Тогда
		Сообщить("Не задан получатель!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	// если это крупнейший или обмен производится напрямую, то отправка запроса возможна только в основную инспекцию учетки
	УчетнаяЗаписьОбмена = УчетнаяЗаписьОрганизации(ДокЗапрос.Организация);
	Если СокрЛП(УчетнаяЗаписьОбмена.НалоговыйОрган.Код) <> СокрЛП(ДокЗапрос.Получатель.Код) Тогда
		Если ЗначениеЗаполнено(ДокЗапрос.Организация.КодИФНСПолучателя) ИЛИ УчетнаяЗаписьОбмена.ОбменНапрямую Тогда
			Сообщить("Отправка отчета возможна только в ту инспекцию, которая указана в учетной записи, сопоставленной организации (" + СокрЛП(УчетнаяЗаписьОбмена.НалоговыйОрган.Код) + ")!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Параметры.ЭтоПБОЮЛ Тогда
	
		Если ПустаяСтрока(Параметры.АдрЮр) Тогда
			Сообщить("Не задан адрес организации (индивидуального предпринимателя)!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Параметры.АдрЮР, ",") <> 9) И (СтрЧислоВхождений(Параметры.АдрЮР, ",") <> 12) Тогда
			Сообщить("Адрес организации (индивидуального предпринимателя) должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодРегионаИзАдреса(Параметры.АдрЮр) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе организации (индивидуального предпринимателя).
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Параметры.АдрМЖ) Тогда
			Сообщить("Не задан адрес места жительства индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Параметры.АдрМЖ, ",") <> 9) И (СтрЧислоВхождений(Параметры.АдрМЖ, ",") <> 12) Тогда
			Сообщить("Адрес места жительства индивидуального предпринимателя должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодРегионаИзАдреса(Параметры.АдрМЖ) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе места жительства индивидуального предпринимателя.
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КодНО) Тогда
		Сообщить("Не задан налоговый орган!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если СтрДлина(Параметры.КодНО) <> 4 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.КодНО) Тогда
		Сообщить("Код налогового органа должен состоять из четырех цифр!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ДатаНачалаПериода) Тогда
		Сообщить("Не задана дата начала периода!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ДатаОкончанияПериода) Тогда
		Сообщить("Не задана дата окончания периода!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ДокЗапрос.ДатаНачалаПериода > ДокЗапрос.ДатаОкончанияПериода Тогда
		Сообщить("Дата начала периода не может быть больше даты окончания!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Год(ДокЗапрос.ДатаНачалаПериода) <> Год(ДокЗапрос.ДатаОкончанияПериода) Тогда
		Сообщить("Год даты начала периода должен совпадать с годом даты окончания!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ВидУслуги) Тогда
		Сообщить("Не задан вид услуги!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате И ДокЗапрос.ДополнительныйПараметр = 1 Тогда
		Если ПустаяСтрока(ДокЗапрос.АдресПредставленияСправки) Тогда
			Сообщить("Не задан адрес для ответа по запросу справки об исполнении по уплате налогов, сборов, страховых взносов, пеней и налоговых санкций!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли (СтрЧислоВхождений(ДокЗапрос.АдресПредставленияСправки, ",") <> 9) И (СтрЧислоВхождений(ДокЗапрос.АдресПредставленияСправки, ",") <> 12) Тогда
			Сообщить("Адрес, по которому должна быть представлена справка, должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли КодРегионаИзАдреса(ДокЗапрос.АдресПредставленияСправки) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе представления справки.
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ФорматОтвета) Тогда
		Сообщить("Выберите один из типов файла ответа!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(Параметры.ИПФамилия) Тогда
			Сообщить("Не удалось определить фамилию индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИПИмя) Тогда
			Сообщить("Не удалось определить имя индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
		Если ДокЗапрос.ДополнительныйПараметр <> 1 И ДокЗапрос.ДополнительныйПараметр <> 2 И ДокЗапрос.ДополнительныйПараметр <> 3 Тогда
			Сообщить("Не задан фильтр по виду документа!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	ИначеЕсли ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
		Если ДокЗапрос.ДополнительныйПараметр <> 0 И ДокЗапрос.ДополнительныйПараметр <> 1 Тогда
			Сообщить("Не задан способ доставки!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция КодРегионаИзАдреса(Знач Адрес)
	
	Если ТипЗнч(Адрес) <> Тип("Структура") Тогда
		Адрес = РегламентированнаяОтчетность.РазложитьАдрес(Адрес);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Адрес.Регион) Тогда
		Возврат "";
	КонецЕсли;
	
	МакетРегионы = ПолучитьМакет("Регионы");
	нрегАдресРегион = нрег(Адрес.Регион);
	Для Инд = 1 По МакетРегионы.ВысотаТаблицы Цикл
		ТекРегион = СокрЛП(МакетРегионы.Область(Инд, 1, Инд, 1).Текст);
		Если Лев(нрегАдресРегион, СтрДлина(ТекРегион)) = нрег(ТекРегион) Тогда
			Возврат СокрЛП(МакетРегионы.Область(Инд, 2, Инд, 2).Текст);
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегламентированнаяОтчетность.КодРегионаПоНазванию(Адрес.Регион);
	
КонецФункции

Процедура ЗаписатьАдрес(Узел, СтрокаАдрес)
	
	АдресВСтруктуре = РегламентированнаяОтчетность.РазложитьАдрес(СтрокаАдрес);
	КодРегиона = КодРегионаИзАдреса(АдресВСтруктуре);
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Страна";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Страна, 3));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Индекс";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Индекс, 6));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Регион";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(КодРегиона, 2));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Район";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Район, 50));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Город";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Город, 50));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "НаселПункт";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.НаселенныйПункт, 50));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Улица";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Улица, 50));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Дом";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Дом, 8));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Корпус";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Корпус, 8));
	
	НовСтр = Узел.Строки.Добавить();
	НовСтр.Код = "Кварт";
	НовСтр.Тип = "П";
	НовСтр.Значение = СокрЛП(Лев(АдресВСтруктуре.Квартира, 8));
	
КонецПроцедуры

Функция СформироватьПараметры(ДокЗапрос)
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(ДокЗапрос.Организация);
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(ДокЗапрос.Организация);
	СведенияОбОрганизации.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	Если ЭтоПБОЮЛ Тогда
		ФИОИП = ФИОИндивидуальногоПредпринимателя(ДокЗапрос.Организация);
		Если ФИОИП = Неопределено Тогда
			СведенияОбОрганизации.Вставить("ИПФамилия", "");
			СведенияОбОрганизации.Вставить("ИПИмя", "");
			СведенияОбОрганизации.Вставить("ИПОтчество", "");
		Иначе
			СведенияОбОрганизации.Вставить("ИПФамилия", ФИОИП.Фамилия);
			СведенияОбОрганизации.Вставить("ИПИмя", ФИОИП.Имя);
			СведенияОбОрганизации.Вставить("ИПОтчество", ФИОИП.Отчество);
		КонецЕсли;
	Иначе
		СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(ДокЗапрос.Получатель.КПП));
	КонецЕсли;
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Функция ВыгрузитьДеревоВXML(ДеревоВыгрузки)
	
	ПотокXML = СоздатьНовыйПотокXML();
	ЗаписатьУзелДереваВXML(ДеревоВыгрузки, ПотокXML);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML(СтрокаДерева, ПотокXML)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		ПотокXML.ЗаписатьНачалоЭлемента("К_2_180_06_001_001");
		ПотокXML.ЗаписатьАтрибут("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ПотокXML.ЗаписатьАтрибут("xsi:noNamespaceSchemaLocation", "NP_NO_2_180_06_001_001.xsd");
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML(Стр, ПотокXML);
		КонецЦикла;
		ПотокXML.ЗаписатьКонецЭлемента();
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Если СтрокаДерева.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено И СтрокаДерева.ЭтоCDATA Тогда
				ПотокXML.ЗаписатьСекциюCDATA(СтрокаДерева.Значение);
			Иначе
				Для каждого Лист из СтрокаДерева.Строки Цикл
					ЗаписатьУзелДереваВXML(Лист, ПотокXML);
				КонецЦикла;
				ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			КонецЕсли;
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция СохранитьЗапросНаДиск(Запрос, ФайлДляЗаписи) Экспорт
	
	КаталогСохранения = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
	Если КаталогСохранения = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПолноеИмяФайла = КаталогСохранения + ФайлДляЗаписи;
	
	Попытка
		Запрос.Записать(ПолноеИмяФайла);
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		Предупреждение("Не удалось сохранить текст запроса на диск!");
		Возврат Ложь;
	КонецПопытки;
	
	Сообщить("Запрос сохранен в файл """ + ПолноеИмяФайла + """.", СтатусСообщения.Информация);
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ДОКУМЕНТА ТРАНСПОРТНОЕСООБЩЕНИЕ

Функция ОпределитьПолучателяВходящегоСообщенияПоОписаниюПакетаПФР(ОбъектСообщение)
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// ищем узел "получатель"
	УзлыПолучатель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "получатель", "Э"), Истина);
	Если УзлыПолучатель.Количество() = 0 Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	УзелПолучатель = УзлыПолучатель[0];
	
	// ищем атрибут "идентификаторСубъекта"
	УзелИдентификаторСубъекта = УзелПолучатель.Строки.Найти("идентификаторСубъекта", "Имя");
	Если УзелИдентификаторСубъекта = Неопределено Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	РегистрационныйНомерПФР = СокрЛП(УзелИдентификаторСубъекта.Значение);
	
	// ищем по справочнику
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.РегистрационныйНомерПФР = &РегистрационныйНомерПФР
	                      |	И Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами");
	Запрос.УстановитьПараметр("РегистрационныйНомерПФР", РегистрационныйНомерПФР);
	Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", ОбъектСообщение.УчетнаяЗапись);
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Организации.ПустаяСсылка();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Получить(0);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьПолучателяВходящегоСообщенияПФР(ОбъектСообщение)
	
	// сначала пробуем определить получателя из пакета
	ПолучательИзПакета = ОпределитьПолучателяВходящегоСообщенияПоОписаниюПакетаПФР(ОбъектСообщение);
	Если ЗначениеЗаполнено(ПолучательИзПакета) Тогда
		Возврат ПолучательИзПакета;
	КонецЕсли;
	
	// если по пакету получателя определить не удалось,
	// то пробуем получить из свойств цикла обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ОрганизацияЦиклаОбмена = ЦиклОбмена.Организация;
		Если ЗначениеЗаполнено(ОрганизацияЦиклаОбмена) Тогда
			Возврат ОрганизацияЦиклаОбмена;
		КонецЕсли;
	КонецЕсли;
	
	// если не удалось определить получателя ни по пакету,
	// ни по родительскому циклу обмена, то возвращаем текущее значение
	Возврат ОбъектСообщение.Получатель;
	
КонецФункции

Функция ОпределитьПолучателяВходящегоТранспортногоСообщения(Объект)
	
	Если ЗначениеЗаполнено(Объект.ЦиклОбмена) И Объект.Статус = Перечисления.СтатусыПисем.Полученное Тогда
		Возврат Объект.ЦиклОбмена.Организация;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР 
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
		
		Возврат ОпределитьПолучателяВходящегоСообщенияПФР(Объект);
		
	Иначе
	
		// если нет возможности определить получателя по циклу обмена, то определим его по учетной записи
		// если с учетной записью сообщения связана головная организация, то считаем, что получатель - она
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		                      |	Организации.Ссылка
		                      |ИЗ
		                      |	Справочник.Организации КАК Организации
		                      |ГДЕ
		                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
		                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
		                      |	И Организации.ГоловнаяОрганизация = &ПустаяГоловнаяОрганизация
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ ПЕРВЫЕ 1
		                      |	Организации.Ссылка
		                      |ИЗ
		                      |	Справочник.Организации КАК Организации
		                      |ГДЕ
		                      |	Организации.УчетнаяЗаписьОбмена = &УчетнаяЗаписьОбмена
		                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
		                      |	И Организации.ГоловнаяОрганизация <> &ПустаяГоловнаяОрганизация");
		Запрос.УстановитьПараметр("УчетнаяЗаписьОбмена", Объект.УчетнаяЗапись);
		Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
		Запрос.УстановитьПараметр("ПустаяГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
				Возврат Выборка.Ссылка;
			Иначе
				Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Неопределено);
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаПФР(ОбъектСообщение)
	
	// получаем дерево описания пакета
	ДеревоОписанияПакета = Неопределено;
	Если НЕ ОбъектСообщение.ДополнительныеСвойства.Свойство("ДеревоОписанияПакета", ДеревоОписанияПакета) Тогда
		ДеревоОписанияПакета = ЗагрузитьДеревоОписанияПакетаДляСообщения(ОбъектСообщение);
	КонецЕсли;
	
	// проверяем дерево на заполненность
	Если НЕ ЗначениеЗаполнено(ДеревоОписанияПакета) Тогда
		Возврат Справочники.ОрганыПФР.ПустаяСсылка();
	КонецЕсли;
	
	// ищем узел "отправитель"
	УзлыОтправитель = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "отправитель", "Э"), Истина);
	Если УзлыОтправитель.Количество() = 0 Тогда
		Возврат Справочники.ОрганыПФР.ПустаяСсылка();
	КонецЕсли;
	УзелОтправитель = УзлыОтправитель[0];
	
	// ищем атрибут "идентификаторСубъекта"
	УзелИдентификаторСубъекта = УзелОтправитель.Строки.Найти("идентификаторСубъекта", "Имя");
	Если УзелИдентификаторСубъекта = Неопределено Тогда
		Возврат Справочники.ОрганыПФР.ПустаяСсылка();
	КонецЕсли;
	КодОрганаПФР = СокрЛП(УзелИдентификаторСубъекта.Значение);
	
	// ищем по справочнику
	РезультатПоиска = Справочники.ОрганыПФР.НайтиПоКоду(КодОрганаПФР);
	Если ЗначениеЗаполнено(РезультатПоиска) Тогда
		Возврат РезультатПоиска;
	КонецЕсли;
	
	// пробуем определить отправителя по циклу обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат ЦиклОбмена.ВнешняяОрганизация;
	Иначе
		Возврат ОбъектСообщение.Отправитель;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьОтправителяВходящегоТранспортногоСообщенияПФР(ОбъектСообщение)
	
	// сначала пробуем определить отправителя из пакета
	ОтправительИзПакета = ОпределитьОтправителяВходящегоТранспортногоСообщенияПоСвойствамПакетаПФР(ОбъектСообщение);
	Если ЗначениеЗаполнено(ОтправительИзПакета) Тогда
		Возврат ОтправительИзПакета;
	КонецЕсли;
	
	// если по пакету отправителя определить не удалось,
	// то пробуем получить из свойств цикла обмена
	ЦиклОбмена = ОбъектСообщение.ЦиклОбмена;
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ВнешняяОрганизация = ЦиклОбмена.ВнешняяОрганизация;
		Если ЗначениеЗаполнено(ВнешняяОрганизация) Тогда
			Возврат ВнешняяОрганизация;
		КонецЕсли;
	КонецЕсли;
	
	// если не удалось определить отправителя ни по пакету,
	// ни по родительскому циклу обмена, то возвращаем текущее значение
	Возврат ОбъектСообщение.Отправитель;
	
КонецФункции

Функция ОпределитьОтправителяВходящегоТранспортногоСообщения(Объект)
	
	Если ЗначениеЗаполнено(Объект.Отправитель) Тогда
		Возврат Объект.Отправитель;
	ИначеЕсли Объект.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
		Возврат Неопределено;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
		Возврат ОпределитьОтправителяВходящегоТранспортногоСообщенияПФР(Объект);
	ИначеЕсли НЕ Объект.УчетнаяЗапись.ОбменНапрямую Тогда
		Возврат Объект.УчетнаяЗапись.СерверДокументооборота;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		ОтправительСообщения = Объект.УчетнаяЗапись.СерверДокументооборота;
		//ОтправительСообщения = ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(Объект.ОтКогоАдрес);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		ОтправительСообщения = Объект.УчетнаяЗапись.НалоговыйОрган;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		ОтправительСообщения = Объект.УчетнаяЗапись.НалоговыйОрган;
		//ОтправительСообщения = ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(ОтКогоАдрес);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
		ОтправительСообщения = ОпределитьСерверДокументооборотаПоАдресуЭлектроннойПочты(Объект.ОтКогоАдрес);
		Если НЕ ЗначениеЗаполнено(ОтправительСообщения) Тогда
			ОтправительСообщения = ОпределитьНалоговыйОрганПоАдресуЭлектроннойПочты(Объект.ОтКогоАдрес);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОтправительСообщения;
	
КонецФункции

Функция ТекстИзФайлаВСтроку(УведомлениеОбУточнении, ТекстИсключения = Неопределено)
	
	ДанныеУведомления = УведомлениеОбУточнении.Данные;
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	
	Попытка
		ДанныеУведомления.Получить().Записать(ИмяВременногоФайла);
	Исключение
		ТекстИсключения = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяВременногоФайла);
	ТекстУведомления = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	УдалитьФайлы(ИмяВременногоФайла);
	
	Возврат ТекстУведомления;
	
КонецФункции

Функция УведомлениеОбУточненииЯвляетсяОтрицательным(Объект)
	
	Уведомления = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииНБО);
	КоличествоУведомлений = Уведомления.Количество();
	Если КоличествоУведомлений = 0 Тогда
		Возврат Ложь;
	Иначе
		УведомлениеОбУточнении = Уведомления[0];
	КонецЕсли;
	
	ТекстОшибки = "";
	ТекстУведомления = ТекстИзФайлаВСтроку(УведомлениеОбУточнении, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстУведомления) Тогда
		Сообщить("Ошибка анализа уведомления об уточнении:" + Символы.ПС + ТекстОшибки, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ДеревоУведомления = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстУведомления);
	Если НЕ ЗначениеЗаполнено(ДеревоУведомления) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УзлыПрУточ = ДеревоУведомления.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ПрУточ", "А"), Истина);
	Если УзлыПрУточ.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УзелПрУточ = УзлыПрУточ[0];
	Если УзелПрУточ.Значение = "2" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция Протокол2НДФЛЯвляетсяОтрицательным(Объект)
	
	// ищем протокол 2-НДФЛ среди содержимого сообщения
	Протоколы2НДФЛ = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
	КоличествоПротоколов = Протоколы2НДФЛ.Количество();
	Если КоличествоПротоколов = 0 Тогда
		Возврат Ложь;
	Иначе
		Протокол2НДФЛ = Протоколы2НДФЛ[0];
	КонецЕсли;
	
	// загружаем протокол из файла в строку
	ТекстОшибки = "";
	ТекстПротокола = ТекстИзФайлаВСтроку(Протокол2НДФЛ, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстПротокола) Тогда
		Сообщить("Ошибка анализа уведомления об уточнении:" + Символы.ПС + ТекстОшибки, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// последовательно перебираем все строки в поисках строки с числом документов, содержащих ошибки
	КлючСтр = "КОЛИЧЕСТВО ДОКУМЕНТОВ С ОШИБКАМИ";
	Для ИндСтр = 1 По СтрЧислоСтрок(ТекстПротокола) Цикл
		ТекСтр = СтрПолучитьСтроку(ТекстПротокола, ИндСтр);
		
		// ищем ключ в текущей строке
		ВхождениеКлюча = Найти(ВРЕГ(ТекСтр), КлючСтр);
		Если ВхождениеКлюча <> 0 Тогда
			
			// перебираем все символы после ключа и до конца строки
			ПервоеВхождениеЦифры = 0;
			СтрокаКоличествоДокументовСОшибками = Неопределено;
			Для НомерСимвола = ВхождениеКлюча + СтрДлина(КлючСтр) По СтрДлина(ТекСтр) Цикл
				ТекСимв = Сред(ТекСтр, НомерСимвола, 1);
				
				Если ТекСимв >= "0" И ТекСимв <= "9" Тогда // если это цифра
					Если ПервоеВхождениеЦифры = 0 Тогда
						ПервоеВхождениеЦифры = НомерСимвола;
					КонецЕсли;
				Иначе
					Если ПервоеВхождениеЦифры <> 0 Тогда
						СтрокаКоличествоДокументовСОшибками = Сред(ТекСтр, ПервоеВхождениеЦифры, НомерСимвола - ПервоеВхождениеЦифры);
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЗначениеЗаполнено(СтрокаКоличествоДокументовСОшибками) И ПервоеВхождениеЦифры <> 0 Тогда
				СтрокаКоличествоДокументовСОшибками = Сред(ТекСтр, ПервоеВхождениеЦифры);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаКоличествоДокументовСОшибками) Тогда
				СтрокаКоличествоДокументовСОшибками = СокрЛП(СтрокаКоличествоДокументовСОшибками);
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(СтрокаКоличествоДокументовСОшибками) Тогда
					КоличествоДокументовСОшибками = Число(СтрокаКоличествоДокументовСОшибками);
					Если КоличествоДокументовСОшибками > 0 Тогда
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// если в протоколе отсутствует текст "КОЛИЧЕСТВО ДОКУМЕНТОВ С ОШИБКАМИ", то возможно
	// присутствует текст "ФАЙЛ НЕ ПРИНЯТ"
	КлючНеПринят = "ФАЙЛ НЕ ПРИНЯТ";
	Если Найти(ТекстПротокола, КлючНеПринят) <> 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;//!!!
	
КонецФункции

Функция ОтветНаЗапросИОНЯвляетсяОтрицательным(Объект)
	
	// ищем ответ на запрос среди содержимого сообщения
	ОтветыНаЗапросыИОН = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
	ЧислоОтветов = ОтветыНаЗапросыИОН.Количество();
	Если ЧислоОтветов = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ищем отказ
	ПрефиксИмениФайлаОтказа = "NO_NP";
	Для Каждого ОтветНаЗапросИОН Из ОтветыНаЗапросыИОН Цикл
		Если Лев(ОтветНаЗапросИОН.ИмяФайла, СтрДлина(ПрефиксИмениФайлаОтказа)) = ПрефиксИмениФайлаОтказа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ЯвляетсяОтрицательнымПротоколом(Объект)
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаДекларацияНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаОбращениеНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбОтказе-РезультатПриемаЗапросНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		КлючВТеме = "ФНС:1.0-уведомлениеОбУточнении-РезультатОбработкиДекларацияНО";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = ВРЕГ(КлючВТеме);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности Тогда
		КлючВТеме = "ОТЧЕТ НЕ ПРИНЯТ";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = КлючВТеме;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН Тогда
		КлючВТеме = "ФАЙЛ НЕ ПРИНЯТ";
		Возврат ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТеме))) = КлючВТеме;
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО Тогда
		Возврат УведомлениеОбУточненииЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		Возврат Протокол2НДФЛЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
		Возврат ОтветНаЗапросИОНЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
		Возврат ПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		
		КлючВТемеОтрицательный = "Pension-Protocol-N";
		КлючВТемеПоложительный = "Pension-Protocol-P";
		
		Если ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТемеОтрицательный))) = ВРЕГ(КлючВТемеОтрицательный) Тогда
			Возврат Истина;
		ИначеЕсли ВРЕГ(Лев(СокрЛП(Объект.Тема), СтрДлина(КлючВТемеПоложительный))) = ВРЕГ(КлючВТемеПоложительный) Тогда
			Возврат Ложь;
		Иначе
			Возврат ПротоколПФРЯвляетсяОтрицательным(Объект);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПодтверждениеПолученияОтчетностиПФРЯвляетсяОтрицательным(Объект)
	
	// получаем протокол из базы
	ОбъектСсылка = Объект.Ссылка;
	СтрПодтвержденияПолучения = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР);
	Если СтрПодтвержденияПолучения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выгружаем данные протокола во временный файл
	СтрПодтверждениеПолучения = СтрПодтвержденияПолучения[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		СтрПодтверждениеПолучения.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		Сообщить("Не удалось выгрузить подтверждение получения отчетности ПФР во временный файл для анализа:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из файла в память
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	УдалитьВременныйФайл(ИмяВременногоФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ищем атрибут, содержащий статус проверки протокола
	РезультатыПоиска = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "отчетПредставлен", "Э"), Истина);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// преобразовываем значение атрибута к Булево и возвращаем
	ЗначениеАтрибутаСтр = РезультатыПоиска[0].Значение;
	ЗначениеАтрибута = БулевоПоСтроке(ЗначениеАтрибутаСтр);
	Если ЗначениеАтрибута <> Неопределено Тогда
		Возврат НЕ ЗначениеАтрибута;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ПротоколПФРЯвляетсяОтрицательным(Объект)
	
	// получаем протокол из базы
	ОбъектСсылка = Объект.Ссылка;
	СтрПротоколы = ПолучитьВложенияТранспортногоСообщения(ОбъектСсылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР);
	Если СтрПротоколы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// выгружаем данные протокола во временный файл
	СтрПротокол = СтрПротоколы[0];
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		СтрПротокол.Данные.Получить().Записать(ИмяВременногоФайла);
	Исключение
		Сообщить("Не удалось выгрузить протокол во временный файл для анализа:
				|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// загружаем XML из файла в память
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ИмяВременногоФайла);
	УдалитьВременныйФайл(ИмяВременногоФайла);
	Если ДеревоXML = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// ищем атрибут, содержащий статус проверки протокола
	РезультатыПоиска = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "являетсяПоложительным", "Э"), Истина);
	Если РезультатыПоиска.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// преобразовываем значение атрибута к Булево и возвращаем
	ЗначениеАтрибутаСтр = РезультатыПоиска[0].Значение;
	ЗначениеАтрибута = БулевоПоСтроке(ЗначениеАтрибутаСтр);
	Если ЗначениеАтрибута <> Неопределено Тогда
		Возврат НЕ ЗначениеАтрибута;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура РаспознатьТранспортноеСообщение(Объект, Записывать = Истина) Экспорт
	
	Если Объект.Статус <> Перечисления.СтатусыПисем.Полученное Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаОшибки = "Не удалось записать транспортное сообщение """ + ПредставлениеТранспортногоСообщения(Объект) + """:";
	
	// распознаем тип
	Объект.Тип = ОпределитьТипСообщения(Объект);
	
	// распознаем, с ошибкой ли протокол (если это протокол)
	Объект.ПротоколСОшибкой = ЯвляетсяОтрицательнымПротоколом(Объект);
	
	// распознаем отправителя
	Объект.Отправитель = ОпределитьОтправителяВходящегоТранспортногоСообщения(Объект);
	
	// распознаем получателя
	Объект.Получатель = ОпределитьПолучателяВходящегоТранспортногоСообщения(Объект);
	
	// распознаем цикл обмена
	Если НЕ ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
		
		// если это документ от налогового органа, то создаем цикл обмена - основание
		Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) Тогда // если получатель не заполнен - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = Объект.ИдентификаторСообщения;
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.УчетнаяЗапись.НалоговыйОрган;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
				ЦиклОбменаОбъект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это письмо от ПФР, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект.Ссылка);
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.Отправитель;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это письмо от ФНС, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = Объект.ИдентификаторСообщения;
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.УчетнаяЗапись.НалоговыйОрган;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО;
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
				ЦиклОбменаОбъект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это рассылка от ФНС, то создаем цикл обмена - основание
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
			
			Если ЗначениеЗаполнено(Объект.Получатель) И ЗначениеЗаполнено(Объект.Отправитель) Тогда// если получатель или отправитель не заполнены - цикл обмена не запишется
			
				ЦиклОбменаОбъект = Справочники.ЦиклыОбмена.СоздатьЭлемент();
				ЦиклОбменаОбъект.Идентификатор = Объект.ИдентификаторСообщения;
				ЦиклОбменаОбъект.Организация = Объект.Получатель;
				ЦиклОбменаОбъект.УчетнаяЗапись = Объект.УчетнаяЗапись;
				ЦиклОбменаОбъект.ВнешняяОрганизация = Объект.УчетнаяЗапись.НалоговыйОрган;
				ЦиклОбменаОбъект.ДатаПоследнегоСообщения = Объект.ДатаТранспорта;
				ЦиклОбменаОбъект.Тип = ОпределитьТипЦиклаОбменаПоСообщениюРассылки(Объект.Ссылка);
				ЦиклОбменаОбъект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
				ЦиклОбменаОбъект.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
				ЦиклОбменаОбъект.Записать();
				
				Объект.ЦиклОбмена = ЦиклОбменаОбъект.Ссылка;
				
			КонецЕсли;
			
		// если это прочее сообщение от ПФР, то находим цикл обмена по
		// идентификатору документооборота из описания пакета
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
		ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
			
			ИдентификаторДокументооборота = ИзвлечьИдентификаторДокументооборотаИзПакета(Объект);
			Если ЗначениеЗаполнено(ИдентификаторДокументооборота) Тогда
				_ЦиклОбмена = Справочники.ЦиклыОбмена.НайтиПоРеквизиту("Идентификатор", ИдентификаторДокументооборота);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(_ЦиклОбмена) Тогда
				Объект.ЦиклОбмена = _ЦиклОбмена;
			КонецЕсли;
			
		// если это прочее сообщение от ФНС, то находим цикл обмена по
		// идентификатору первичного сообщения цикла из дополнительных реквизитов
		// заголовка почтового сообщения
		Иначе
			
			// пробуем найти цикл обмена по идентификатору первичного
			_ЦиклОбмена = Неопределено;
			стрИдентификаторПервичногоСообщения = Объект.ДополнительныеРеквизитыЗаголовка.Найти(Перечисления.ТипыДополнительныхРеквизитов.ИдентификаторПервичногоСообщения, "Тип");
			
			Если стрИдентификаторПервичногоСообщения <> Неопределено И НЕ ПустаяСтрока(стрИдентификаторПервичногоСообщения.Значение) Тогда
				_ЦиклОбмена = Справочники.ЦиклыОбмена.НайтиПоРеквизиту("Идентификатор", стрИдентификаторПервичногоСообщения.Значение);
			КонецЕсли;
			
			// если ничего не помогло...
			Если НЕ ЗначениеЗаполнено(_ЦиклОбмена) Тогда
				
				// обход особенностей различных версий реализации серверного ПО ФНС
				Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
					
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
										  |	ТранспортноеСообщение.ЦиклОбмена
										  |ИЗ
										  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
										  |ГДЕ
										  |	ТранспортноеСообщение.Статус = &Статус
										  |	И ТранспортноеСообщение.Тип = &Тип
										  |	И ТранспортноеСообщение.Отправитель = &Отправитель
										  |	И ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
										  |
										  |УПОРЯДОЧИТЬ ПО
										  |	ТранспортноеСообщение.ДатаТранспорта УБЫВ");
					Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Отправленное);
					Запрос.УстановитьПараметр("Тип", Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
					Запрос.УстановитьПараметр("Отправитель", Объект.Получатель);
					Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() Тогда
						_ЦиклОбмена = Выборка.ЦиклОбмена;
					КонецЕсли;
					
				ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда
					
					ВхождениеДвоеточия = Найти(Объект.Тема, ":");
					Если ВхождениеДвоеточия <> 0 Тогда
						
						ИсходнаяТема = СокрЛ(Сред(Объект.Тема, ВхождениеДвоеточия + 1));
						
						Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
											  |	ТранспортноеСообщение.ЦиклОбмена
											  |ИЗ
											  |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
											  |ГДЕ
											  |	ТранспортноеСообщение.Тема ПОДОБНО &Тема
											  |	И ТранспортноеСообщение.Статус = &Статус
											  |	И ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
											  |
											  |УПОРЯДОЧИТЬ ПО
											  |	ТранспортноеСообщение.ДатаТранспорта УБЫВ");
						Запрос.УстановитьПараметр("Тема", ИсходнаяТема);
						Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Отправленное);
						Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
						РезультатЗапроса = Запрос.Выполнить();
						Если НЕ РезультатЗапроса.Пустой() Тогда
							Выборка = РезультатЗапроса.Выбрать();
							Если Выборка.Следующий() Тогда
								_ЦиклОбмена = Выборка.ЦиклОбмена;
							КонецЕсли;
						КонецЕсли;
						
						Если НЕ ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
							Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
												  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена
												  |ИЗ
												  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
												  |ГДЕ
												  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла = &ИмяФайла
												  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Статус = &Статус
												  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.УчетнаяЗапись = &УчетнаяЗапись
												  |
												  |УПОРЯДОЧИТЬ ПО
												  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ДатаТранспорта УБЫВ");
							Запрос.УстановитьПараметр("ИмяФайла", СокрЛП(ИсходнаяТема));
							Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Отправленное);
							Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.УчетнаяЗапись);
							РезультатЗапроса = Запрос.Выполнить();
							Если НЕ РезультатЗапроса.Пустой() Тогда
								Выборка = РезультатЗапроса.Выбрать();
								Если Выборка.Следующий() Тогда
									_ЦиклОбмена = Выборка.ЦиклОбмена;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(_ЦиклОбмена) Тогда
				Объект.ЦиклОбмена = _ЦиклОбмена;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// если распознали цикл обмена, то пробуем еще раз распознать нераспознанных отправителя и получателя
	Если ЗначениеЗаполнено(Объект.ЦиклОбмена) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
			Объект.Получатель = ОпределитьПолучателяВходящегоТранспортногоСообщения(Объект);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Отправитель) Тогда
			Объект.Отправитель = ОпределитьОтправителяВходящегоТранспортногоСообщения(Объект);
		КонецЕсли;
	КонецЕсли;
	
	// фиксируем изменения
	Если Записывать И Объект.Модифицированность() Тогда
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция РаспаковатьПакет(ФайлПакета)
	
	КаталогРаспаковки = КаталогВременныхФайлов();
	Если Прав(КаталогРаспаковки, 1) <> "\" Тогда
		КаталогРаспаковки = КаталогРаспаковки + "\";
	КонецЕсли;
	
	КаталогРаспаковки = КаталогРаспаковки + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(КаталогРаспаковки);
	
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла(ФайлПакета);
		ЧтениеЗИП.ИзвлечьВсе(КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеЗИП.Закрыть();
	Исключение
		УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат КаталогРаспаковки;
	
КонецФункции

Функция ПроверитьПодписьPKCS7(Знач ФайлДанных, Знач ФайлПодписи, СерийныйНомерСертификатаПодписанта = Неопределено, ПоставщикСертификатаПодписанта = Неопределено)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СерийныйНомерСертификатаПодписанта = "";
	ПоставщикСертификатаПодписанта = "";
	Попытка
		Крипт.PKCS7ПолучитьСвойстваПодписи(ФайлПодписи, СерийныйНомерСертификатаПодписанта, ПоставщикСертификатаПодписанта);
	Исключение
		Сообщить("Вероятно, файл ЭЦП имеет неверную структуру.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Попытка
		РезультатПроверки = Крипт.PKCS7ПроверитьПодпись(СерийныйНомерСертификатаПодписанта, ПоставщикСертификатаПодписанта, ФайлПодписи, ФайлДанных);
	Исключение
		Сообщить("Во время проверки подписи возникла исключительная ситуация.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ПроверитьПодписьПодФайломПакета(ФайлДанных, ФайлПодписи)
	
	// !!! вставить проверки сертификатов
	
	Возврат ПроверитьПодписьPKCS7(ФайлДанных, ФайлПодписи);
	
КонецФункции

Функция РасшифроватьФайлPKCS7(ИмяЗашифрованногоФайла, ИмяРасшифрованногоФайла = Неопределено)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяРасшифрованногоФайла) Тогда
		ИмяРасшифрованногоФайла = ИмяЗашифрованногоФайла + ".dec";
	КонецЕсли;
	
	Попытка
		Крипт.PKCS7Расшифровать(ИмяЗашифрованногоФайла, ИмяРасшифрованногоФайла);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета, ИмяФайлаДокумента, ПолноеИмяФайлаДокумента, ТипДокумента, ИмяФайлаПодписи = Неопределено, ПолноеИмяФайлаПодписи = Неопределено, РезультатПроверкиПодписи = Неопределено, Идентификатор = Неопределено, ТипСодержимого = Неопределено, ОтпечатокСертификатаПодписи = Неопределено)
	
	НовСтр = ДокументыПакета.Добавить();
	НовСтр.ИмяФайла = ИмяФайлаДокумента;
	НовСтр.ПолноеИмяФайла = ПолноеИмяФайлаДокумента;
	НовСтр.ТипДокумента = ТипДокумента;
	НовСтр.ИмяФайлаПодписи = ИмяФайлаПодписи;
	НовСтр.ПолноеИмяФайлаПодписи = ПолноеИмяФайлаПодписи;
	НовСтр.СтатусПроверкиПодписи = РезультатПроверкиПодписи;
	НовСтр.Идентификатор = Идентификатор;
	НовСтр.ТипСодержимого = ТипСодержимого;
	НовСтр.ОтпечатокСертификатаПодписи = ОтпечатокСертификатаПодписи;
	
КонецПроцедуры

Функция ОпределитьТипСодержимогоПоТипуДокументаПакета(ТипДокумента, ТипСообщения)
	
	// типы ПФР
	Если ТипДокумента = "подтверждениеПолучения" Тогда
		Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР Тогда
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма;
		Иначе
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "протокол" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР;
	ИначеЕсли ТипДокумента = "протоколПриложение" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР;
	ИначеЕсли ТипДокумента = "пачкаИС" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР;
	ИначеЕсли ТипДокумента = "пачкаАДВ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР;
	ИначеЕсли ТипДокумента = "пачкаДСВ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР;
	ИначеЕсли ТипДокумента = "реестрДСВ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР;
	ИначеЕсли ТипДокумента = "пачкаРСВ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР;
	ИначеЕсли ТипДокумента = "пачкаСВВ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР;
	ИначеЕсли ТипДокумента = "описаниеСведений" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР;
	ИначеЕсли ТипДокумента = "описаниеОшибки" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибкиПФР;
	ИначеЕсли ТипДокумента = "описаниеОшибочногоПакета" Тогда
		Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибочногоПакетаПФР;
		Иначе
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибочногоПакетаФНС;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "письмоПриложение" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение;
	ИначеЕсли ТипДокумента = "письмо" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо;
	ИначеЕсли ТипДокумента = "транспортнаяИнформация" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация;
	ИначеЕсли ТипДокумента = "описаниеПисьма" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма;
	ИначеЕсли ТипДокумента = "сведенияПриложение" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.СведенияПриложениеПФР;
		
	// типы ФНС 534
	ИначеЕсли ТипДокумента = "декларация" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности;
	ИначеЕсли ТипДокумента = "описание" Тогда
		Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
		ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка;
		Иначе
			Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений;
		КонецЕсли;
	ИначеЕсли ТипДокумента = "доверенность" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность;
	ИначеЕсли ТипДокумента = "подтверждениеДатыОтправки" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки;
	ИначеЕсли ТипДокумента = "уведомлениеОбОтказе" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе;
	ИначеЕсли ТипДокумента = "квитанцияОПриеме" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме;
	ИначеЕсли ТипДокумента = "уведомлениеОбУточнении" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении;
	ИначеЕсли ТипДокумента = "извещениеОВводе" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе;
	ИначеЕсли ТипДокумента = "извещениеОПолучении" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении;
	ИначеЕсли ТипДокумента = "сообщениеОбОшибке" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеОшибкиФНС;
	ИначеЕсли ТипДокумента = "обращение" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение;
	ИначеЕсли ТипДокумента = "приложение" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение;
	ИначеЕсли ТипДокумента = "подтверждениеДатыПолучения" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения;
	ИначеЕсли ТипДокумента = "письмо" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо;
	ИначеЕсли ТипДокумента = "рассылка" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка;
	ИначеЕсли ТипДокумента = "запрос" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос;
	ИначеЕсли ТипДокумента = "ответ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ;
		
	// 2-НДФЛ
	ИначеЕсли ТипДокумента = "форма2НДФЛ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ;
	ИначеЕсли ТипДокумента = "протоколПриема2НДФЛ" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ;
	ИначеЕсли ТипДокумента = "реестрПринятыхДокументов" Тогда
		Возврат Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВыделитьКраткоеИмяФайлаИзПолного(ПолноеИмяФайлаДокумента)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайлаДокумента);
	Возврат ОбъектФайл.Имя;
	
КонецФункции

Функция ОтпечатокПодписиПоСерийномуНомеруИПоставщику(СерийныйНомерСертификата, ПоставщикСертификата)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией(Истина);
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		РезультатПозиционирования = Крипт.НайтиСертификат(СерийныйНомерСертификата, ПоставщикСертификата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	Если НЕ РезультатПозиционирования Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными(Истина);
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОтпечатокСертификата64 = Крипт.Отпечаток;
	ОтпечатокСертификата16 = Отпечаток16ИзBase64(ОтпечатокСертификата64, ДвДанные);
	
	Возврат ОтпечатокСертификата16;
	
КонецФункции

Функция РасшифроватьТранспортноеСообщение(Объект) Экспорт
	
	НачатьТранзакцию();
	
	// получаем расшифровываемый контейнер
	ТранспортныеКонтейнеры = ПолучитьТранспортныйКонтейнер(Объект.Ссылка, Истина);
	Если ТранспортныеКонтейнеры.Количество() = 0 Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	ТранспортныйКонтейнер = ТранспортныеКонтейнеры[0];
	
	// выгружаем контейнер во временный файл
	ВремФайл = ПолучитьИмяВременногоФайла();
	Попытка
		ТранспортныйКонтейнер.Данные.Получить().Записать(ВремФайл);
	Исключение
		Сообщить("Ошибка сохранения во временный файл:" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ТипСообщения = Объект.Тип;
	
	
	// сообщения ПФР
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
		
		// распаковываем пакет
		КаталогФайловПакета = РаспаковатьПакет(ВремФайл);
		УдалитьФайлы(ВремФайл);
		Если НЕ ЗначениеЗаполнено(КаталогФайловПакета) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// находим файл описания пакета
		ФайлыОписанияСведений = НайтиФайлы(КаталогФайловПакета, "packageDescription.xml");
		Если ФайлыОписанияСведений.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			УдалитьВременныйФайл(КаталогФайловПакета);
			Сообщить("Ошибка распаковки пакета: не найден файл описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ФайлОписанияСведений = ФайлыОписанияСведений[0];
		
		// находим файл подписи к файлу описания пакета
		ФайлыПодписиПодОписаниемСведений = НайтиФайлы(КаталогФайловПакета, "packageDescription.sign");
		Если ФайлыПодписиПодОписаниемСведений.Количество() = 0 Тогда
			Сообщить("Ошибка распаковки пакета: не найден файл подписи к файлу описания пакета (packageDescription.sign).", СтатусСообщения.Внимание);
		Иначе // проверяем подпись под файлом пакета
			ФайлПодписиПодОписаниемСведений = ФайлыПодписиПодОписаниемСведений[0];
			РезультатПроверки = ПроверитьПодписьПодФайломПакета(ФайлОписанияСведений.ПолноеИмя, ФайлПодписиПодОписаниемСведений.ПолноеИмя);
			Если РезультатПроверки <> Истина Тогда
				Сообщить("Ошибка распаковки пакета: не удалось проверить подпись к файлу описания пакета.", СтатусСообщения.Важное);
			КонецЕсли;
		КонецЕсли;
		
		// инициализируем таблицу документов пакета
		ДокументыПакета = Новый ТаблицаЗначений;
		ДокументыПакета.Колонки.Добавить("ИмяФайла");
		ДокументыПакета.Колонки.Добавить("ПолноеИмяФайла");
		ДокументыПакета.Колонки.Добавить("РазмерФайлаДокумента");
		ДокументыПакета.Колонки.Добавить("ТипДокумента");
		ДокументыПакета.Колонки.Добавить("Идентификатор");
		ДокументыПакета.Колонки.Добавить("ИмяФайлаПодписи");
		ДокументыПакета.Колонки.Добавить("ПолноеИмяФайлаПодписи");
		ДокументыПакета.Колонки.Добавить("СтатусПроверкиПодписи");
		ДокументыПакета.Колонки.Добавить("РазмерФайлаПодписи");
		ДокументыПакета.Колонки.Добавить("ТипСодержимого");
		ДокументыПакета.Колонки.Добавить("ОтпечатокСертификатаПодписи");
		
		// считываем файл описания пакета
		ТекстXML = Неопределено;
		ДеревоОписанияСведений = ЗагрузитьXMLВДеревоЗначений(ФайлОписанияСведений.ПолноеИмя, ТекстXML);
		Если ДеревоОписанияСведений = Неопределено Тогда
			ОтменитьТранзакцию();
			УдалитьВременныйФайл(КаталогФайловПакета);
			Возврат Ложь;
		КонецЕсли;
		
		// находим узлы "документ"
		УзлыДокумент = ДеревоОписанияСведений.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "документ", "Э"), Истина);
		Для Каждого УзелДокумент Из УзлыДокумент Цикл
			АтрибутыУзлаДокумент = ПолучитьАтрибутыУзла(УзелДокумент);
			
			// получаем узел "содержимое" с атрибутами
			УзелСодержимое = УзелДокумент.Строки.Найти("содержимое", "Имя");
			Если УзелСодержимое <> Неопределено Тогда
				АтрибутыУзлаСодержимое = ПолучитьАтрибутыУзла(УзелСодержимое);
			КонецЕсли;
			
			// получаем узел "подпись" с атрибутами
			УзелПодпись = УзелДокумент.Строки.Найти("подпись", "Имя");
			Если УзелПодпись <> Неопределено Тогда
				АтрибутыУзлаПодпись = ПолучитьАтрибутыУзла(УзелПодпись);
			КонецЕсли;
			
			// определяем тип документа
			ТипДокумента = Неопределено;
			АтрибутыУзлаДокумент.Свойство("типДокумента", ТипДокумента);
			ТипСодержимого = ОпределитьТипСодержимогоПоТипуДокументаПакета(ТипДокумента, Объект.Тип);
			Если ТипСодержимого = Неопределено Тогда
				ОтменитьТранзакцию();
				Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
				УдалитьВременныйФайл(КаталогФайловПакета);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем идентификатор документа
			ИдентификаторДокумента = Неопределено;
			АтрибутыУзлаДокумент.Свойство("идентификаторДокумента", ИдентификаторДокумента);
			
			// определяем тип содержимого
			ТипСодержимогоФайла = Неопределено;
			АтрибутыУзлаДокумент.Свойство("типСодержимого", ТипСодержимогоФайла);
			
			// определяем зашифрован ли документ
			ДокументЗашифрованСтр = Неопределено;
			АтрибутыУзлаДокумент.Свойство("зашифрован", ДокументЗашифрованСтр);
			ДокументЗашифрован = БулевоПоСтроке(ДокументЗашифрованСтр);
			Если ДокументЗашифрован = Неопределено Тогда
				ОтменитьТранзакцию();
				Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
				УдалитьВременныйФайл(КаталогФайловПакета);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем сжат ли документ
			ДокументСжатСтр = Неопределено;
			АтрибутыУзлаДокумент.Свойство("сжат", ДокументСжатСтр);
			ДокументСжат = БулевоПоСтроке(ДокументСжатСтр);
			Если ДокументСжат = Неопределено Тогда
				ОтменитьТранзакцию();
				Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
				УдалитьВременныйФайл(КаталогФайловПакета);
				Возврат Ложь;
			КонецЕсли;
			
			// получаем имя файла содержимого
			Если УзелСодержимое <> Неопределено Тогда
				
				ИмяФайлаДокумента = "";
				АтрибутыУзлаСодержимое.Свойство("имяФайла", ИмяФайлаДокумента);
				Если НЕ ЗначениеЗаполнено(ИмяФайлаДокумента) Тогда
					ОтменитьТранзакцию();
					Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
					УдалитьВременныйФайл(КаталогФайловПакета);
					Возврат Ложь;
				КонецЕсли;
				ИмяФайлаДокумента = СокрЛП(ИмяФайлаДокумента);
				
				// расшифровываем содержимое
				Если ДокументЗашифрован Тогда
					ИмяФайлаАрхиваДокумента = Неопределено;
					Если НЕ РасшифроватьФайлPKCS7(КаталогФайловПакета + ИмяФайлаДокумента, ИмяФайлаАрхиваДокумента) Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка расшифровки файла документа при распаковке пакета.", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
				Иначе
					ИмяФайлаАрхиваДокумента = КаталогФайловПакета + ИмяФайлаДокумента;
				КонецЕсли;
				
				// распаковываем содержимое
				Если ДокументСжат Тогда
					ПолноеИмяФайлаДокумента = РазархивироватьФайл(ИмяФайлаАрхиваДокумента);
					Если ПолноеИмяФайлаДокумента = Неопределено Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка распаковки файла документа из состава пакета.", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
					КраткоеИмяФайлаДокумента = ВыделитьКраткоеИмяФайлаИзПолного(ПолноеИмяФайлаДокумента);
					Если нрег(КраткоеИмяФайлаДокумента) = "file" Тогда // обход особенности некоторых ПК ПФР
						КраткоеИмяФайлаДокумента = ИмяФайлаДокумента;
					КонецЕсли;
				Иначе
					ПолноеИмяФайлаДокумента = ИмяФайлаАрхиваДокумента;
					КраткоеИмяФайлаДокумента = ИмяФайлаДокумента;
				КонецЕсли;
				
				Если Объект.Тип <> Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР Тогда
				
					// получаем узел "подпись" с атрибутами
					УзелПодпись = УзелДокумент.Строки.Найти("подпись", "Имя");
					Если УзелПодпись = Неопределено Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
					АтрибутыУзлаПодпись = ПолучитьАтрибутыУзла(УзелПодпись);
					
					// получаем имя файла подписи
					ИмяФайлаПодписи = Неопределено;
					АтрибутыУзлаПодпись.Свойство("имяФайла", ИмяФайлаПодписи);
					Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка при распаковке пакета: не определен файл подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
					ИмяФайлаПодписи = СокрЛП(ИмяФайлаПодписи);
					ПолноеИмяФайлаПодписи = КаталогФайловПакета + ИмяФайлаПодписи;
					
					// проверяем подпись под файлом (!!!)
					СерийныйНомерСертификатаПодписи = Неопределено;
					ПоставщикСертификатаПодписи = Неопределено;
					РезультатПроверкиПодписи = ПроверитьПодписьPKCS7(ПолноеИмяФайлаДокумента, ПолноеИмяФайлаПодписи, СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					Если РезультатПроверкиПодписи = Неопределено Тогда
						Сообщить("Ошибка проверки подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка();
					ИначеЕсли НЕ РезультатПроверкиПодписи Тогда
						Сообщить("Подпись под документом """ + ИмяФайлаДокумента + """ не валидна!", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.НеВалидна;//!!! исправить после того как можно будет точно определить, что подпись была невалидна
					ИначеЕсли РезультатПроверкиПодписи Тогда
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.Валидна;
					КонецЕсли;
					ОтпечатокСертификатаПодписи = ОтпечатокПодписиПоСерийномуНомеруИПоставщику(СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					
					// определяем строку в таблице документов пакета
					ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета,
															КраткоеИмяФайлаДокумента,
															ПолноеИмяФайлаДокумента,
															ТипСодержимого,
															ИмяФайлаПодписи,
															ПолноеИмяФайлаПодписи,
															?(ЗначениеЗаполнено(РезультатПроверкиПодписи), РезультатПроверкиПодписи, Неопределено),
															ИдентификаторДокумента,
															ТипСодержимогоПоСтроке(ТипСодержимогоФайла),
															ОтпечатокСертификатаПодписи);
					
				Иначе
					
					// определяем строку в таблице документов пакета
					ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета,
															КраткоеИмяФайлаДокумента,
															ПолноеИмяФайлаДокумента,
															ТипСодержимого,
															,
															,
															,
															ИдентификаторДокумента,
															ТипСодержимогоПоСтроке(ТипСодержимогоФайла));
					
				КонецЕсли;
				
			ИначеЕсли УзелПодпись <> Неопределено Тогда
				
				// получаем имя файла подписи
				ИмяФайлаПодписи = Неопределено;
				АтрибутыУзлаПодпись.Свойство("имяФайла", ИмяФайлаПодписи);
				Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
					ОтменитьТранзакцию();
					Сообщить("Ошибка при распаковке пакета: не определен файл подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
					УдалитьВременныйФайл(КаталогФайловПакета);
					Возврат Ложь;
				КонецЕсли;
				ИмяФайлаПодписи = СокрЛП(ИмяФайлаПодписи);
				ПолноеИмяФайлаПодписи = КаталогФайловПакета + ИмяФайлаПодписи;
				
				// находим подписанный документ в архиве
				ИмяФайлаДокумента = Неопределено;
				ИдентификаторПодписанногоДокумента = Неопределено;
				Если АтрибутыУзлаДокумент.Свойство("идентификаторДокумента", ИдентификаторПодписанногоДокумента) Тогда
					ИмяФайлаДокумента = ДокументПоИдентификатору(ИдентификаторПодписанногоДокумента, КаталогФайловПакета);
					Если ИмяФайлаДокумента = Неопределено Тогда
						Сообщить("При распаковке пакета не удалось проверить подпись """ + ИмяФайлаПодписи + """:
									|в архиве документооборота не удалось найти исходный подписанный документ с идентификатором """ + ИдентификаторПодписанногоДокумента + """.", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЕсли;
				
				// проверяем подпись под файлом (!!!)
				РезультатПроверкиПодписи = Неопределено;
				Если ИмяФайлаДокумента <> Неопределено Тогда
					
					СерийныйНомерСертификатаПодписи = Неопределено;
					ПоставщикСертификатаПодписи = Неопределено;
					РезультатПроверкиПодписи = ПроверитьПодписьPKCS7(ПолноеИмяФайлаДокумента, ПолноеИмяФайлаПодписи, СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					Если РезультатПроверкиПодписи = Неопределено Тогда
						Сообщить("Ошибка проверки подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка();
					ИначеЕсли НЕ РезультатПроверкиПодписи Тогда
						Сообщить("Подпись под документом """ + ИмяФайлаДокумента + """ не валидна!", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.НеВалидна;//!!! исправить после того как можно будет точно определить, что подпись была невалидна
					ИначеЕсли РезультатПроверкиПодписи Тогда
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.Валидна;
					КонецЕсли;
					
					ОтпечатокСертификатаПодписи = ОтпечатокПодписиПоСерийномуНомеруИПоставщику(СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					
				КонецЕсли;
				
				// определяем строку в таблице документов пакета
				
				ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета, ИмяФайлаДокумента, Неопределено, ТипСодержимого, ИмяФайлаПодписи, ПолноеИмяФайлаПодписи, РезультатПроверкиПодписи, ИдентификаторДокумента, ТипСодержимогоПоСтроке(ТипСодержимогоФайла), ОтпечатокСертификатаПодписи);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		// разбираем дополнительные описания с целью восстановить исходные имена файлов
		Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
			
			// ищем протокол
			СтрПротоколПФР = ДокументыПакета.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР, "ТипДокумента");
			Если СтрПротоколПФР <> Неопределено Тогда
				
				// загружаем протокол в дерево
				ТекстXML = Неопределено;
				ДеревоПротокола = ЗагрузитьXMLВДеревоЗначений(СтрПротоколПФР.ПолноеИмяФайла, ТекстXML);
				Если ДеревоПротокола <> Неопределено Тогда
					
					// ищем узлы "приложение"
					УзлыПриложение = ДеревоПротокола.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "приложение", "Э"), Истина);
					Для Каждого УзелПриложение Из УзлыПриложение Цикл
						
						// ищем подчиненный элемент "идентификаторДокумента"
						УзелИдентификаторДокумента = УзелПриложение.Строки.Найти("идентификаторДокумента", "Имя", Истина);
						
						// ищем подчиненный элемент "имяФайла"
						УзелИмяФайла = УзелПриложение.Строки.Найти("имяФайла", "Имя", Истина);
						
						Если УзелИдентификаторДокумента <> Неопределено И УзелИмяФайла <> Неопределено
						И ЗначениеЗаполнено(УзелИдентификаторДокумента.Значение) И ЗначениеЗаполнено(УзелИмяФайла.Значение) Тогда
							
							ИдентификаторДокумента = СокрЛП(УзелИдентификаторДокумента.Значение);
							ИмяФайлаПриложения = СокрЛП(УзелИмяФайла.Значение);
							
							СтрПриложение = ДокументыПакета.Найти(ИдентификаторДокумента, "идентификатор");
							Если СтрПриложение <> Неопределено Тогда
								СтрПриложение.ИмяФайла = ИмяФайлаПриложения;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		// разбираем дополнительные описания с целью восстановить исходные имена файлов
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР Тогда
			
			// ищем протокол
			СтрПротоколПФР = ДокументыПакета.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР, "ТипДокумента");
			Если СтрПротоколПФР <> Неопределено Тогда
				
				// загружаем протокол в дерево
				ТекстXML = Неопределено;
				ДеревоПротокола = ЗагрузитьXMLВДеревоЗначений(СтрПротоколПФР.ПолноеИмяФайла, ТекстXML);
				Если ДеревоПротокола <> Неопределено Тогда
					
					// ищем узлы "приложение"
					УзлыПриложение = ДеревоПротокола.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "приложение", "Э"), Истина);
					Для Каждого УзелПриложение Из УзлыПриложение Цикл
						
						// ищем подчиненный элемент "идентификаторДокумента"
						УзелИдентификаторДокумента = УзелПриложение.Строки.Найти("идентификаторДокумента", "Имя", Истина);
						
						// ищем подчиненный элемент "имяФайла"
						УзелИмяФайла = УзелПриложение.Строки.Найти("имяФайла", "Имя", Истина);
						
						Если УзелИдентификаторДокумента <> Неопределено И УзелИмяФайла <> Неопределено
						И ЗначениеЗаполнено(УзелИдентификаторДокумента.Значение) И ЗначениеЗаполнено(УзелИмяФайла.Значение) Тогда
							
							ИдентификаторДокумента = СокрЛП(УзелИдентификаторДокумента.Значение);
							ИмяФайлаПриложения = СокрЛП(УзелИмяФайла.Значение);
							
							СтрПриложение = ДокументыПакета.Найти(ИдентификаторДокумента, "идентификатор");
							Если СтрПриложение <> Неопределено Тогда
								СтрПриложение.ИмяФайла = ИмяФайлаПриложения;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
			
			// ищем протокол
			СтрОписаниеПисьма = ДокументыПакета.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма, "ТипДокумента");
			Если СтрОписаниеПисьма <> Неопределено Тогда
				
				// загружаем протокол в дерево
				ТекстXML = Неопределено;
				ДеревоОписания = ЗагрузитьXMLВДеревоЗначений(СтрОписаниеПисьма.ПолноеИмяФайла, ТекстXML);
				Если ДеревоОписания <> Неопределено Тогда
					
					// ищем узлы "приложение"
					УзлыПриложение = ДеревоОписания.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "приложение", "Э"), Истина);
					Для Каждого УзелПриложение Из УзлыПриложение Цикл
						
						// ищем подчиненный элемент "идентификаторДокумента"
						УзелИдентификаторДокумента = УзелПриложение.Строки.Найти("идентификаторДокумента", "Имя", Истина);
						
						// ищем подчиненный элемент "имяФайла"
						УзелИмяФайла = УзелПриложение.Строки.Найти("имяФайла", "Имя", Истина);
						
						Если УзелИдентификаторДокумента <> Неопределено И УзелИмяФайла <> Неопределено
						И ЗначениеЗаполнено(УзелИдентификаторДокумента.Значение) И ЗначениеЗаполнено(УзелИмяФайла.Значение) Тогда
							
							ИдентификаторДокумента = СокрЛП(УзелИдентификаторДокумента.Значение);
							ИмяФайлаПриложения = СокрЛП(УзелИмяФайла.Значение);
							
							СтрПриложение = ДокументыПакета.Найти(ИдентификаторДокумента, "идентификатор");
							Если СтрПриложение <> Неопределено Тогда
								СтрПриложение.ИмяФайла = ИмяФайлаПриложения;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		
		// помещаем файлы в регистр содержимого
		Для Каждого СтрДокументПакета Из ДокументыПакета Цикл
			
			Если ЗначениеЗаполнено(СтрДокументПакета.ПолноеИмяФайла) Тогда
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка,
															СтрДокументПакета.ТипДокумента,
															СтрДокументПакета.ПолноеИмяФайла,
															СтрДокументПакета.ИмяФайла,
															,
															,
															,
															,
															,
															,
															СтрДокументПакета.Идентификатор,
															СтрДокументПакета.ТипСодержимого);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрДокументПакета.ИмяФайлаПодписи) Тогда
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, СтрДокументПакета.ПолноеИмяФайлаПодписи, СтрДокументПакета.ИмяФайлаПодписи, , СтрДокументПакета.ИмяФайла, СтрДокументПакета.ОтпечатокСертификатаПодписи, СтрДокументПакета.СтатусПроверкиПодписи, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		// удаляем временный каталог файлов пакета
		УдалитьВременныйФайл(КаталогФайловПакета);
		
		
	// сообщения ФНС 534
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		
		// распаковываем пакет
		КаталогФайловПакета = РаспаковатьПакет(ВремФайл);
		УдалитьФайлы(ВремФайл);
		Если НЕ ЗначениеЗаполнено(КаталогФайловПакета) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// находим файл описания пакета
		ФайлыОписанияСведений = НайтиФайлы(КаталогФайловПакета, "packageDescription.xml");
		Если ФайлыОписанияСведений.Количество() = 0 Тогда
			ОтменитьТранзакцию();
			УдалитьВременныйФайл(КаталогФайловПакета);
			Сообщить("Ошибка распаковки пакета: не найден файл описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ФайлОписанияСведений = ФайлыОписанияСведений[0];
		
		// инициализируем таблицу документов пакета
		ДокументыПакета = Новый ТаблицаЗначений;
		ДокументыПакета.Колонки.Добавить("ИмяФайла");
		ДокументыПакета.Колонки.Добавить("ПолноеИмяФайла");
		ДокументыПакета.Колонки.Добавить("РазмерФайлаДокумента");
		ДокументыПакета.Колонки.Добавить("ТипДокумента");
		ДокументыПакета.Колонки.Добавить("Идентификатор");
		ДокументыПакета.Колонки.Добавить("ИмяФайлаПодписи");
		ДокументыПакета.Колонки.Добавить("ПолноеИмяФайлаПодписи");
		ДокументыПакета.Колонки.Добавить("СтатусПроверкиПодписи");
		ДокументыПакета.Колонки.Добавить("РазмерФайлаПодписи");
		ДокументыПакета.Колонки.Добавить("ТипСодержимого");
		ДокументыПакета.Колонки.Добавить("ОтпечатокСертификатаПодписи");
		
		// считываем файл описания пакета
		ТекстXML = Неопределено;
		ДеревоОписанияСведений = ЗагрузитьXMLВДеревоЗначений(ФайлОписанияСведений.ПолноеИмя, ТекстXML);
		Если ДеревоОписанияСведений = Неопределено Тогда
			ОтменитьТранзакцию();
			УдалитьВременныйФайл(КаталогФайловПакета);
			Возврат Ложь;
		КонецЕсли;
		
		// находим узлы "документ"
		УзлыДокумент = ДеревоОписанияСведений.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "документ", "Э"), Истина);
		Для Каждого УзелДокумент Из УзлыДокумент Цикл
			АтрибутыУзлаДокумент = ПолучитьАтрибутыУзла(УзелДокумент);
			
			// получаем узел "содержимое" с атрибутами
			УзелСодержимое = УзелДокумент.Строки.Найти("содержимое", "Имя");
			Если УзелСодержимое <> Неопределено Тогда
				АтрибутыУзлаСодержимое = ПолучитьАтрибутыУзла(УзелСодержимое);
			КонецЕсли;
			
			// получаем узел "подпись" с атрибутами
			УзелПодпись = УзелДокумент.Строки.Найти("подпись", "Имя");
			Если УзелПодпись <> Неопределено Тогда
				АтрибутыУзлаПодпись = ПолучитьАтрибутыУзла(УзелПодпись);
			КонецЕсли;
			
			// определяем тип документа по коду типа
			ТипДокумента = Неопределено;
			АтрибутыУзлаДокумент.Свойство("типДокумента", ТипДокумента);
			ТипСодержимого = ОпределитьТипСодержимогоПоТипуДокументаПакета(ТипДокумента, Объект.Тип);
			Если ТипСодержимого = Неопределено Тогда
				ОтменитьТранзакцию();
				Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
				УдалитьВременныйФайл(КаталогФайловПакета);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем идентификатор документа
			ИдентификаторДокумента = Неопределено;
			АтрибутыУзлаДокумент.Свойство("идентификаторДокумента", ИдентификаторДокумента);
			
			// определяем исходное имя файла
			ИсходноеИмяФайла = Неопределено;
			АтрибутыУзлаДокумент.Свойство("исходноеИмяФайла", ИсходноеИмяФайла);
			
			// определяем тип содержимого
			ТипСодержимогоФайла = Неопределено;
			АтрибутыУзлаДокумент.Свойство("типСодержимого", ТипСодержимогоФайла);
			
			// определяем зашифрован ли документ
			ДокументЗашифрованСтр = Неопределено;
			АтрибутыУзлаДокумент.Свойство("зашифрован", ДокументЗашифрованСтр);
			ДокументЗашифрован = БулевоПоСтроке(ДокументЗашифрованСтр);
			Если ДокументЗашифрован = Неопределено Тогда
				ОтменитьТранзакцию();
				Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
				УдалитьВременныйФайл(КаталогФайловПакета);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем сжат ли документ
			ДокументСжатСтр = Неопределено;
			АтрибутыУзлаДокумент.Свойство("сжат", ДокументСжатСтр);
			ДокументСжат = БулевоПоСтроке(ДокументСжатСтр);
			Если ДокументСжат = Неопределено Тогда
				ОтменитьТранзакцию();
				Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
				УдалитьВременныйФайл(КаталогФайловПакета);
				Возврат Ложь;
			КонецЕсли;
			
			// получаем имя файла содержимого
			Если УзелСодержимое <> Неопределено Тогда
				
				ИмяФайлаДокумента = "";
				АтрибутыУзлаСодержимое.Свойство("имяФайла", ИмяФайлаДокумента);
				Если НЕ ЗначениеЗаполнено(ИмяФайлаДокумента) Тогда
					ОтменитьТранзакцию();
					Сообщить("Ошибка при распаковке пакета: некорректная структура файла описания пакета (packageDescription.xml).", СтатусСообщения.Важное);
					УдалитьВременныйФайл(КаталогФайловПакета);
					Возврат Ложь;
				КонецЕсли;
				ИмяФайлаДокумента = СокрЛП(ИмяФайлаДокумента);
				
				// расшифровываем содержимое
				Если ДокументЗашифрован Тогда
					ИмяФайлаАрхиваДокумента = Неопределено;
					Если НЕ РасшифроватьФайлPKCS7(КаталогФайловПакета + ИмяФайлаДокумента, ИмяФайлаАрхиваДокумента) Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка расшифровки файла документа при распаковке пакета.", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
				Иначе
					ИмяФайлаАрхиваДокумента = КаталогФайловПакета + ИмяФайлаДокумента;
				КонецЕсли;
				
				// распаковываем содержимое
				Если ДокументСжат Тогда
					ПолноеИмяФайлаДокумента = РазархивироватьФайл(ИмяФайлаАрхиваДокумента);
					Если ПолноеИмяФайлаДокумента = Неопределено Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка распаковки файла документа из состава пакета.", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
					КраткоеИмяФайлаДокумента = ВыделитьКраткоеИмяФайлаИзПолного(ПолноеИмяФайлаДокумента);
				Иначе
					ПолноеИмяФайлаДокумента = ИмяФайлаАрхиваДокумента;
					КраткоеИмяФайлаДокумента = ИмяФайлаДокумента;
				КонецЕсли;
				
				// получаем узел "подпись" с атрибутами
				УзелПодпись = УзелДокумент.Строки.Найти("подпись", "Имя");
				
				Если Объект.Тип <> Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС И УзелПодпись <> Неопределено Тогда
				
					АтрибутыУзлаПодпись = ПолучитьАтрибутыУзла(УзелПодпись);
					
					// получаем имя файла подписи
					ИмяФайлаПодписи = Неопределено;
					АтрибутыУзлаПодпись.Свойство("имяФайла", ИмяФайлаПодписи);
					Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
						ОтменитьТранзакцию();
						Сообщить("Ошибка при распаковке пакета: не определен файл подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
						УдалитьВременныйФайл(КаталогФайловПакета);
						Возврат Ложь;
					КонецЕсли;
					ИмяФайлаПодписи = СокрЛП(ИмяФайлаПодписи);
					ПолноеИмяФайлаПодписи = КаталогФайловПакета + ИмяФайлаПодписи;
					
					// проверяем подпись под файлом (!!!)
					СерийныйНомерСертификатаПодписи = Неопределено;
					ПоставщикСертификатаПодписи = Неопределено;
					РезультатПроверкиПодписи = ПроверитьПодписьPKCS7(ПолноеИмяФайлаДокумента, ПолноеИмяФайлаПодписи, СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					Если РезультатПроверкиПодписи = Неопределено Тогда
						Сообщить("Ошибка проверки подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка();
					ИначеЕсли НЕ РезультатПроверкиПодписи Тогда
						Сообщить("Подпись под документом """ + ИмяФайлаДокумента + """ не валидна!", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.НеВалидна;//!!! исправить после того как можно будет точно определить, что подпись была невалидна
					ИначеЕсли РезультатПроверкиПодписи Тогда
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.Валидна;
					КонецЕсли;
					ОтпечатокСертификатаПодписи = ОтпечатокПодписиПоСерийномуНомеруИПоставщику(СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					
					// определяем строку в таблице документов пакета
					ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета,
															?(ЗначениеЗаполнено(ИсходноеИмяФайла), ИсходноеИмяФайла, КраткоеИмяФайлаДокумента),
															ПолноеИмяФайлаДокумента,
															ТипСодержимого,
															ИмяФайлаПодписи,
															ПолноеИмяФайлаПодписи,
															?(ЗначениеЗаполнено(РезультатПроверкиПодписи), РезультатПроверкиПодписи, Неопределено),
															ИдентификаторДокумента,
															ТипСодержимогоПоСтроке(ТипСодержимогоФайла),
															ОтпечатокСертификатаПодписи);
					
				Иначе
					
					// определяем строку в таблице документов пакета
					ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета,
															?(ЗначениеЗаполнено(ИсходноеИмяФайла), ИсходноеИмяФайла, КраткоеИмяФайлаДокумента),
															ПолноеИмяФайлаДокумента,
															ТипСодержимого,
															,
															,
															,
															ИдентификаторДокумента,
															ТипСодержимогоПоСтроке(ТипСодержимогоФайла));
					
				КонецЕсли;
				
			ИначеЕсли УзелПодпись <> Неопределено Тогда
				
				// получаем имя файла подписи
				ИмяФайлаПодписи = Неопределено;
				АтрибутыУзлаПодпись.Свойство("имяФайла", ИмяФайлаПодписи);
				Если НЕ ЗначениеЗаполнено(ИмяФайлаПодписи) Тогда
					ОтменитьТранзакцию();
					Сообщить("Ошибка при распаковке пакета: не определен файл подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
					УдалитьВременныйФайл(КаталогФайловПакета);
					Возврат Ложь;
				КонецЕсли;
				ИмяФайлаПодписи = СокрЛП(ИмяФайлаПодписи);
				ПолноеИмяФайлаПодписи = КаталогФайловПакета + ИмяФайлаПодписи;
				
				// находим подписанный документ в архиве
				ИмяФайлаДокумента = Неопределено;
				ИдентификаторПодписанногоДокумента = Неопределено;
				Если АтрибутыУзлаДокумент.Свойство("идентификаторДокумента", ИдентификаторПодписанногоДокумента) Тогда
					ИмяФайлаДокумента = ДокументПоИдентификатору(ИдентификаторПодписанногоДокумента, КаталогФайловПакета);
					Если ИмяФайлаДокумента = Неопределено Тогда
						Сообщить("При распаковке пакета не удалось проверить подпись """ + ИмяФайлаПодписи + """:
									|в архиве документооборота не удалось найти исходный подписанный документ с идентификатором """ + ИдентификаторПодписанногоДокумента + """.", СтатусСообщения.Внимание);
					КонецЕсли;
				КонецЕсли;
				
				// проверяем подпись под файлом (!!!)
				РезультатПроверкиПодписи = Неопределено;
				Если ИмяФайлаДокумента <> Неопределено Тогда
					
					СерийныйНомерСертификатаПодписи = Неопределено;
					ПоставщикСертификатаПодписи = Неопределено;
					РезультатПроверкиПодписи = ПроверитьПодписьPKCS7(КаталогФайловПакета + ИмяФайлаДокумента, ПолноеИмяФайлаПодписи, СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					Если РезультатПроверкиПодписи = Неопределено Тогда
						Сообщить("Ошибка проверки подписи под документом """ + ИмяФайлаДокумента + """.", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка();
					ИначеЕсли НЕ РезультатПроверкиПодписи Тогда
						Сообщить("Подпись под документом """ + ИмяФайлаДокумента + """ не валидна!", СтатусСообщения.Важное);
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.НеВалидна;//!!! исправить после того как можно будет точно определить, что подпись была невалидна
					ИначеЕсли РезультатПроверкиПодписи Тогда
						РезультатПроверкиПодписи = Перечисления.СтатусыПроверкиЭЦП.Валидна;
					КонецЕсли;
					
					ОтпечатокСертификатаПодписи = ОтпечатокПодписиПоСерийномуНомеруИПоставщику(СерийныйНомерСертификатаПодписи, ПоставщикСертификатаПодписи);
					
				КонецЕсли;
				
				// определяем строку в таблице документов пакета
				
				ОпределитьСтрокуВТаблицеДокументовПакета(ДокументыПакета, ИмяФайлаДокумента, Неопределено, ТипСодержимого, ИмяФайлаПодписи, ПолноеИмяФайлаПодписи, РезультатПроверкиПодписи, ИдентификаторДокумента, ТипСодержимогоПоСтроке(ТипСодержимогоФайла), ОтпечатокСертификатаПодписи);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		// !!!
		// необходимо разбирать дополнительные описания с целью восстановить исходные имена файлов
		
		
		// помещаем файлы в регистр содержимого
		Для Каждого СтрДокументПакета Из ДокументыПакета Цикл
			
			Если ЗначениеЗаполнено(СтрДокументПакета.ПолноеИмяФайла) Тогда
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка,
															СтрДокументПакета.ТипДокумента,
															СтрДокументПакета.ПолноеИмяФайла,
															СтрДокументПакета.ИмяФайла,
															,
															,
															,
															,
															,
															,
															СтрДокументПакета.Идентификатор,
															СтрДокументПакета.ТипСодержимого);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрДокументПакета.ИмяФайлаПодписи) Тогда
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, СтрДокументПакета.ПолноеИмяФайлаПодписи, СтрДокументПакета.ИмяФайлаПодписи, , СтрДокументПакета.ИмяФайла, СтрДокументПакета.ОтпечатокСертификатаПодписи, СтрДокументПакета.СтатусПроверкиПодписи, Ложь);
			КонецЕсли;
			
		КонецЦикла;
		
		// удаляем временный каталог файлов пакета
		УдалитьВременныйФайл(КаталогФайловПакета);
		
		
	// ФНС 141
	Иначе
		
		// расшифровываем выгруженный контейнер во временный каталог
		КаталогФайловТранспортногоКонтейнера = РасшифроватьТранспортныйКонтейнер(Объект.Ссылка, ВремФайл);
		УдалитьФайлы(ВремФайл);
		Если НЕ ЗначениеЗаполнено(КаталогФайловТранспортногоКонтейнера) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// анализируем состав файлов во временном каталоге, в который произведена расшифровка, и сохраняем их в ИБ
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ИмяВложения = ТранспортныйКонтейнер.ИмяФайла;
		СодержимоеТранспортногоКонтейнера = НайтиФайлы(КаталогФайловТранспортногоКонтейнера, "*.*");
		
		Для Каждого Содержимое Из СодержимоеТранспортногоКонтейнера Цикл
			
			ИмяПодписанногоФайла = "";
			Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".GNI.SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(ИмяВложения + ".SGN")) = ВРЕГ(ИмяВложения) + ".SGN" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Истина;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".INFO" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(Содержимое.Имя + ".SGN1")) = ВРЕГ(ИмяВложения) + ".SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля;
				ИначеЕсли ВРЕГ(Прав(Содержимое.Имя, 5)) = ".SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииНБО;
				ИначеЕсли ВРЕГ(Прав(Содержимое.Имя, 9)) = ".GNI.SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина("РЕЕСТР_")) = "РЕЕСТР_" И Прав(ВРЕГ(Содержимое.Имя), СтрДлина(".TXT")) = ".TXT" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ;
				ИначеЕсли ВРЕГ(Прав(Содержимое.Имя, СтрДлина(".GNI.SGN1"))) = ".GNI.SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = Лев(Содержимое.Имя, СтрДлина(Содержимое.Имя) - СтрДлина(".GNI.SGN1"));
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента;
				ИначеЕсли ВРЕГ(Лев(Прав(Содержимое.Имя, 5), 4)) = ".SGN" И ОбщегоНазначения.ТолькоЦифрыВСтроке(Прав(Содержимое.Имя, 1)) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = Лев(Содержимое.Имя, СтрДлина(Содержимое.Имя) - СтрДлина(".GNI.SGN1"));
					ЭтоЭЦПАбонента = Ложь;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(Содержимое.Имя) - 1) = ВРЕГ(ИмяВложения) + ".ATT" И ОбщегоНазначения.ТолькоЦифрыВСтроке(Прав(Содержимое.Имя, 1)) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".DESC" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента;
				ИначеЕсли ВРЕГ(Лев(Прав(Содержимое.Имя, 5), 4)) = ".CER" И ОбщегоНазначения.ТолькоЦифрыВСтроке(Прав(Содержимое.Имя, 1)) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(Содержимое.Имя + ".SGN1")) = ВРЕГ(ИмяВложения) + ".SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".GNI.SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(ИмяВложения + ".SGN")) = ВРЕГ(ИмяВложения) + ".SGN" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Истина;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".INFO" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(Содержимое.Имя + ".SGN1")) = ВРЕГ(ИмяВложения) + ".SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".RCPT.GNI.SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				ИначеЕсли Лев(ВРЕГ(Содержимое.Имя), СтрДлина(ИмяВложения + ".SGN")) = ВРЕГ(ИмяВложения) + ".SGN" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Истина;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".INFO" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля;
				ИначеЕсли ВРЕГ(Прав(Содержимое.Имя, 5)) = ".SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			ИначеЕсли ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
				Если ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН;
				ИначеЕсли ВРЕГ(Прав(Содержимое.Имя, 5)) = ".SGN1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
					ИмяПодписанногоФайла = ИмяВложения;
					ЭтоЭЦПАбонента = Ложь;
				ИначеЕсли ВРЕГ(Прав(Содержимое.Имя, 5)) = ".CER1" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат;
				ИначеЕсли ВРЕГ(Содержимое.Имя) = ВРЕГ(ИмяВложения) + ".INFO" Тогда
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера;
				Иначе
					ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
				КонецЕсли;
			Иначе
				ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПустаяСсылка();
			КонецЕсли;
			
			Если ТипСодержимого = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				
				ЭЦПСертификат = "";
				ЭЦПИмяВладельца = "";
				ЭЦПСтатусПроверки = Перечисления.СтатусыПроверкиЭЦП.Валидна;
				ПолноеИмяФайлаПодписи = Содержимое.ПолноеИмя;
				РезультатПроверки = ПроверитьПодписьФНС(КаталогФайловТранспортногоКонтейнера + ИмяПодписанногоФайла, ПолноеИмяФайлаПодписи, Истина, ЭЦПСертификат, ЭЦПИмяВладельца);
				
				Если РезультатПроверки = Неопределено Тогда
					ЭЦПСтатусПроверки = Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка();
					Сообщить("Не удалось проверить подпись """ + Содержимое.Имя + """ под файлом """ + ИмяПодписанногоФайла + """.", СтатусСообщения.Важное);
				ИначеЕсли НЕ РезультатПроверки Тогда
					ЭЦПСтатусПроверки = Перечисления.СтатусыПроверкиЭЦП.НеВалидна;
					Сообщить("Подпись """ + Содержимое.Имя + """ под файлом """ + ИмяПодписанногоФайла + """ невалидна!", СтатусСообщения.Важное);
				КонецЕсли;
				
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, ТипСодержимого, Содержимое.ПолноеИмя, Содержимое.Имя, , ИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки, ЭтоЭЦПАбонента);
				
			Иначе
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, ТипСодержимого, Содержимое.ПолноеИмя, Содержимое.Имя);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	// особая обработка в случае неформализованных документов налогового органа,
	// уведомлений об уточнении и протоколов приема 2-НДФЛ
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		СоздатьПредметЦиклаОбмена(Объект);
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО
	ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		Объект.ПротоколСОшибкой = ЯвляетсяОтрицательнымПротоколом(Объект);
	КонецЕсли;
	
	Если Объект.Модифицированность() Тогда
		Попытка
			Объект.Записать();
		Исключение
			Сообщить("Ошибка при записи расшифрованного сообщения """ + ПредставлениеСообщения(Объект.Ссылка) + """:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	УдалитьВременныйФайл(КаталогФайловТранспортногоКонтейнера);
	
	// в отправке оповещения необходимости нет, т.к. при записи сообщения генерируется аналогичное оповещение
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	//Оповестить("Изменение сообщения", Новый Структура("Сообщение, ЦиклОбмена, Предмет", Ссылка, ЦиклОбмена, Сообщение.ЦиклОбмена.Предмет));
	//#КонецЕсли
	
	ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Объект.Ссылка);
	
	//Если (ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности
	// ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности
	// ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика
	// ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН
	// ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН
	// ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН)
	// // ИЛИ ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО) // !!! т.к. в ответе на документ НО текст изменяется, то подписание при приеме не имеет смысла
	//   И НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
	//	
	//	Сообщить("Не удалось создать подпись ответственного за обмен к сообщению " + ПредставлениеСообщения(Объект.Ссылка) + "!", СтатусСообщения.Важное);
	//	
	//КонецЕсли;
	
	// сохраняем ответ на запрос
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		ОбновитьОтветНаЗапросИОНВРегистреОтветовПриНеобходимости(Объект);
	КонецЕсли;
	
	// формируем подтверждение на расшифрованное сообщение при необходимости
	Если НЕ Объект.УчетнаяЗапись.НеФормироватьПодтвержденияАвтоматически
	   И (Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО
	 ИЛИ Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО) Тогда
	
		Если НЕ СоздатьПодтверждение(Объект.Ссылка) Тогда
			Сообщить("Не удалось создать подтверждение к сообщению """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """!",  СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция БулевоПоСтроке(СтрБулево)
	
	Попытка
		Возврат XMLЗначение(Тип("Булево"), СокрЛП(СтрБулево));
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ТипСодержимогоПоСтроке(СтрТипСодержимого)
	
	Если СтрТипСодержимого = "plain866" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст866;
	ИначеЕсли СтрТипСодержимого = "plain1251" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Текст1251;
	ИначеЕсли СтрТипСодержимого = "xml" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.xml;
	ИначеЕсли СтрТипСодержимого = "html" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.html;
	ИначеЕсли СтрТипСодержимого = "pdf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.pdf;
	ИначеЕсли СтрТипСодержимого = "rtf" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.rtf;
	ИначеЕсли СтрТипСодержимого = "tiff" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.tiff;
	ИначеЕсли СтрТипСодержимого = "jpeg" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.jpeg;
	ИначеЕсли СтрТипСодержимого = "doc" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.ms_word;
	ИначеЕсли СтрТипСодержимого = "xls" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.ms_excel;
	ИначеЕсли СтрТипСодержимого = "odt" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.odf_text;
	ИначеЕсли СтрТипСодержимого = "ods" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet;
	ИначеЕсли СтрТипСодержимого = "docx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.oxml_word;
	ИначеЕсли СтрТипСодержимого = "xlsx" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet;
	ИначеЕсли СтрТипСодержимого = "unknown" Тогда
		Возврат Перечисления.ТипыСодержимогоФайлов.Неизвестный;
	Иначе
		Возврат Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ДокументПоИдентификатору(ИдентификаторПодписанногоДокумента, КаталогВыгрузки)
	
	Запрос =Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                     |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
	                     |	СодержимоеТранспортныхКонтейнеров.Данные
	                     |ИЗ
	                     |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                     |ГДЕ
	                     |	СодержимоеТранспортныхКонтейнеров.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", ИдентификаторПодписанногоДокумента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Попытка
			Выборка.Данные.Получить().Записать(КаталогВыгрузки + Выборка.ИмяФайла);
			Возврат Выборка.ИмяФайла;
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СоздатьПредметЦиклаОбмена(Объект)
	
	Если (Объект.Тип <> Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО
	И Объект.Тип <> Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР
	И Объект.Тип <> Перечисления.ТипыТранспортныхСообщений.ПисьмоНО
	И Объект.Тип <> Перечисления.ТипыТранспортныхСообщений.РассылкаНО)
	ИЛИ ЗначениеЗаполнено(Объект.ЦиклОбмена.Предмет)
	ИЛИ НЕ СообщениеРасшифровано(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО Тогда
	
		НачатьТранзакцию();
		
		НФД_НО = Документы.НеформализованныйДокументНалоговогоОргана.СоздатьДокумент();
		НФД_НО_Ссылка = Документы.НеформализованныйДокументНалоговогоОргана.ПолучитьСсылку();
		НФД_НО.УстановитьСсылкуНового(НФД_НО_Ссылка);
		
		Вложения = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина);
		
		ТекстовыеСообщения				= Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента));
		НеформализованныеДокументы		= Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент));
		ОписанияДокументов				= Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента));
		
		// инициализируем содержание неформализованного документа
		Если ТекстовыеСообщения.Количество() > 0 Тогда
			ВремФайл = ПолучитьИмяВременногоФайла();
			ТекстовыеСообщения[0].Данные.Получить().Записать(ВремФайл);
			Текст = Новый ТекстовыйДокумент;
			Текст.Прочитать(ВремФайл);
			УдалитьФайлы(ВремФайл);
			НФД_НО.Содержание = Текст.ПолучитьТекст();
		КонецЕсли;
		
		// обрабатываем неформализованные документы, если такие есть
		Если НеформализованныеДокументы.Количество() > 0 И ОписанияДокументов.Количество() > 0 Тогда
			ИменаФайловНФД = ИзвлечьИменаФайловНФДИзОписания(ОписанияДокументов[0].Данные);
			Если ЗначениеЗаполнено(ИменаФайловНФД) Тогда
				Для Каждого НФД ИЗ НеформализованныеДокументы Цикл
					ИмяФайлаНФД = ИменаФайловНФД.Получить(НФД.ИмяФайла);
					Если ИмяФайлаНФД = Неопределено Тогда
						Сообщить("Не удалось извлечь исходное имя файла """ + НФД.ИмяФайла + """ из описания неформализованного документа!", СтатусСообщения.Важное);
					Иначе
						МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.НеформализованныйДокумент = НФД_НО_Ссылка;
						МенеджерЗаписи.ИмяФайла = ИмяФайлаНФД;
						МенеджерЗаписи.Данные = НФД.Данные;
						МенеджерЗаписи.Записать(Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// инициализируем прочие свойства и записываем
		НФД_НО.Организация = Объект.ЦиклОбмена.Организация;
		НФД_НО.НалоговыйОрган = Объект.ЦиклОбмена.ВнешняяОрганизация;
		НФД_НО.Записать();
		
		// обновляем свойства родительского цикла обмена
		Если НЕ ОбновитьСвойстваЦиклаОбмена(Объект.ЦиклОбмена, НФД_НО_Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		// дополняем массив полученных писем
		ДополнитьСписокПолученныхПисем(НФД_НО_Ссылка);
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		
		НачатьТранзакцию();
		
		// извлекаем вложения расшифрованного входящего сообщения
		Вложения = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина);
		
		ВложенияПисьма = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо));
		ВложенияПриложенияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение));
		ВложенияОписанияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма));
		
		Если ВложенияПисьма.Количество() = 0 Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура входящего транспортного пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ВложенияОписанияКПисьму.Количество() = 0 Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура входящего транспортного пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВложениеПисьмо = ВложенияПисьма[0];
		ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
		
		// загружаем описание к письму
		ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
		ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
		ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
		УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
		Если ДеревоОписанияКПисьму = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// извлекаем тему, идентификатор и дату-время отправки из описания письма
		УзелОписаниеПисьма = ДеревоОписанияКПисьму.Строки.Найти("описаниеПисьма", "Имя");
		Если УзелОписаниеПисьма = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		УзелТема = УзелОписаниеПисьма.Строки.Найти("тема", "Имя");
		УзелДатаВремяОтправки = УзелОписаниеПисьма.Строки.Найти("датаВремяОтправки", "Имя");
		УзелИдентификаторПисьма = УзелОписаниеПисьма.Строки.Найти("идентификаторПисьма", "Имя");
		Если УзелТема = Неопределено ИЛИ УзелДатаВремяОтправки = Неопределено ИЛИ УзелИдентификаторПисьма = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Тема = XMLЗначениеВнутр(Тип("Строка"), УзелТема.Значение);
		ДатаВремяОтправки = XMLЗначениеВнутр(Тип("Дата"), УзелДатаВремяОтправки.Значение);
		ИдентификаторПисьма = XMLЗначениеВнутр(Тип("Строка"), УзелИдентификаторПисьма.Значение);
		
		УзелОтветНаПисьмо = УзелОписаниеПисьма.Строки.Найти("ответНаПисьмо", "Имя");
		Если УзелОтветНаПисьмо <> Неопределено Тогда
			ИдентификаторОснования = XMLЗначениеВнутр(Тип("Строка"), УзелОтветНаПисьмо.Значение);
		Иначе
			ИдентификаторОснования = "";
		КонецЕсли;
		
		УзелКатегорияПисьма = УзелОписаниеПисьма.Строки.Найти("категорияПисьма", "Имя");
		Если ЗначениеЗаполнено(УзелКатегорияПисьма) Тогда
			СтрКатегорияПисьма = XMLЗначениеВнутр(Тип("Строка"), УзелКатегорияПисьма.Значение);
			ПризнакРетроконверсии = (нрег(СтрКатегорияПисьма) = "ретроконверсия");
		Иначе
			ПризнакРетроконверсии = Ложь;
		КонецЕсли;
		
		// считываем содержание
		ВремФайлПисьмо = ПолучитьИмяВременногоФайла();
		ВложениеПисьмо.Данные.Получить().Записать(ВремФайлПисьмо);
		Содержание = ПрочитатьТекстИзФайла(ВремФайлПисьмо);
		УдалитьВременныйФайл(ВремФайлПисьмо);
		
		// создаем письмо
		Письмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
		Письмо.Наименование = Тема;
		Письмо.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР;
		Письмо.Статус = Перечисления.СтатусыПисем.Полученное;
		Письмо.Отправитель = Объект.ЦиклОбмена.ВнешняяОрганизация;
		Письмо.Получатель = Объект.ЦиклОбмена.Организация;
		Письмо.Содержание = Содержание;
		Письмо.ДатаСообщения = ТекущаяДата();
		Письмо.ДатаОтправки = ДатаВремяОтправки;
		Письмо.Идентификатор = ИдентификаторПисьма;
		Письмо.ИдентификаторОснования = ИдентификаторОснования;
		Письмо.Ретроконверсия = ПризнакРетроконверсии;
		Попытка
			Письмо.Записать();
		Исключение
			Сообщить("Ошибка записи входящего письма от ПФР:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		// добавляем вложения к письму
		Для Каждого ПриложениеКПисьму Из ВложенияПриложенияКПисьму Цикл
			ДобавитьВложенияПисьма(Письмо.Ссылка, ПриложениеКПисьму.ИмяФайла, ПриложениеКПисьму.Данные, ТипСодержимогоПоИмениФайла(ПриложениеКПисьму.ИмяФайла, Истина), ПриложениеКПисьму.Размер);
		КонецЦикла;
		
		// обновляем свойства родительского цикла обмена
		Если НЕ ОбновитьСвойстваЦиклаОбмена(Объект.ЦиклОбмена, Письмо.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		// добавляем письмо в массив полученных писем
		ДополнитьСписокПолученныхПисем(Письмо.Ссылка);
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		
		НачатьТранзакцию();
		
		// извлекаем вложения расшифрованного входящего сообщения
		Вложения = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина);
		
		ВложенияПисьма = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо));
		ВложенияПриложенияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение));
		ВложенияОписанияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка));
		
		Если ВложенияПисьма.Количество() = 0 Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура входящего транспортного пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ВложенияОписанияКПисьму.Количество() = 0 Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура входящего транспортного пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВложениеПисьмо = ВложенияПисьма[0];
		ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
		
		// загружаем описание к письму
		ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
		ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
		ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
		УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
		Если ДеревоОписанияКПисьму = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// извлекаем тему и идентификатор исходного письма, ответом на которое является данное
		УзелОписание = ДеревоОписанияКПисьму.Строки.Найти("описание", "Имя");
		Если УзелОписание = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// тема
		УзелТема = УзелОписание.Строки.Найти("тема", "Имя");
		Если УзелТема = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Тема = XMLЗначениеВнутр(Тип("Строка"), УзелТема.Значение);
		
		// идентификатор исходного письма
		УзелОтветНаПисьмо = УзелОписание.Строки.Найти("ответНаПисьмо", "Имя");
		Если УзелОтветНаПисьмо <> Неопределено Тогда
			ИдентификаторОснования = XMLЗначениеВнутр(Тип("Строка"), УзелОтветНаПисьмо.Значение);
		Иначе
			ИдентификаторОснования = "";
		КонецЕсли;
		
		// считываем само письмо
		ВремФайлПисьмо = ПолучитьИмяВременногоФайла();
		ВложениеПисьмо.Данные.Получить().Записать(ВремФайлПисьмо);
		СвойстваПисьма = РазобратьВходящееПисьмоФНС(ВремФайлПисьмо);
		УдалитьВременныйФайл(ВремФайлПисьмо);
		Если СвойстваПисьма = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: не удалось разобрать файл письма из состава входящего пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// создаем письмо в ИБ
		Письмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
		Письмо.Наименование = Тема;
		Письмо.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС;
		Письмо.Статус = Перечисления.СтатусыПисем.Полученное;
		Письмо.Отправитель = Объект.ЦиклОбмена.ВнешняяОрганизация;
		Письмо.Получатель = Объект.ЦиклОбмена.Организация;
		Письмо.Содержание = СвойстваПисьма.Текст;
		Письмо.ДатаСообщения = ТекущаяДата();
		Письмо.ДатаОтправки = ?(ЗначениеЗаполнено(СвойстваПисьма.Дата), СвойстваПисьма.Дата, Объект.ДатаТранспорта);
		Письмо.Идентификатор = Объект.ЦиклОбмена.Идентификатор;
		Письмо.ИдентификаторОснования = ИдентификаторОснования;
		Попытка
			Письмо.Записать();
		Исключение
			Сообщить("Ошибка записи входящего письма от ФНС:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		// добавляем вложения к письму
		Для Каждого ПриложениеКПисьму Из ВложенияПриложенияКПисьму Цикл
			ДобавитьВложенияПисьма(Письмо.Ссылка, ПриложениеКПисьму.ИмяФайла, ПриложениеКПисьму.Данные, ТипСодержимогоПоИмениФайла(ПриложениеКПисьму.ИмяФайла), ПриложениеКПисьму.Размер);
		КонецЦикла;
		
		// обновляем свойства родительского цикла обмена
		Если НЕ ОбновитьСвойстваЦиклаОбмена(Объект.ЦиклОбмена, Письмо.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		// добавляем письмо в массив полученных писем
		ДополнитьСписокПолученныхПисем(Письмо.Ссылка);
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		
		НачатьТранзакцию();
		
		// извлекаем вложения расшифрованного входящего сообщения
		Вложения = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина);
		
		ВложенияПисьма = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка));
		ВложенияПриложенияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение));
		ВложенияОписанияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка));
		
		Если ВложенияПисьма.Количество() = 0 Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура входящего транспортного пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Если ВложенияОписанияКПисьму.Количество() = 0 Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура входящего транспортного пакета.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ВложениеПисьмо = ВложенияПисьма[0];
		ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
		
		// загружаем описание к письму
		ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
		ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
		ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
		УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
		Если ДеревоОписанияКПисьму = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// извлекаем тему и идентификатор исходного письма, ответом на которое является данное
		УзелОписание = ДеревоОписанияКПисьму.Строки.Найти("описание", "Имя");
		Если УзелОписание = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// тема
		УзелТема = УзелОписание.Строки.Найти("тема", "Имя");
		Если УзелТема = Неопределено Тогда
			Сообщить("Не удалось создать входящее письмо: некорректная структура описания к письму.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		Тема = XMLЗначениеВнутр(Тип("Строка"), УзелТема.Значение);
		
		// идентификатор исходного письма
		УзелОтветНаПисьмо = УзелОписание.Строки.Найти("ответНаПисьмо", "Имя");
		Если УзелОтветНаПисьмо <> Неопределено Тогда
			ИдентификаторОснования = XMLЗначениеВнутр(Тип("Строка"), УзелОтветНаПисьмо.Значение);
		Иначе
			ИдентификаторОснования = "";
		КонецЕсли;
		
		// считываем само письмо
		ВремФайлПисьмо = ПолучитьИмяВременногоФайла();
		ВложениеПисьмо.Данные.Получить().Записать(ВремФайлПисьмо);
		ТекстПисьма = ПрочитатьТекстИзФайла(ВремФайлПисьмо, КодировкаТекста.ANSI);
		УдалитьВременныйФайл(ВремФайлПисьмо);
		
		// создаем письмо в ИБ
		Письмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
		Письмо.Наименование = Тема;
		Письмо.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС;
		Письмо.Статус = Перечисления.СтатусыПисем.Полученное;
		Письмо.Отправитель = Объект.ЦиклОбмена.ВнешняяОрганизация;
		Письмо.Получатель = Объект.ЦиклОбмена.Организация;
		Письмо.Содержание = ТекстПисьма;
		Письмо.ДатаСообщения = ТекущаяДата();
		Письмо.ДатаОтправки = Объект.ДатаТранспорта;
		Письмо.Идентификатор = Объект.ЦиклОбмена.Идентификатор;
		Письмо.ИдентификаторОснования = ИдентификаторОснования;
		Попытка
			Письмо.Записать();
		Исключение
			Сообщить("Ошибка записи входящего письма от ФНС:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		// добавляем вложения к письму
		Для Каждого ПриложениеКПисьму Из ВложенияПриложенияКПисьму Цикл
			ДобавитьВложенияПисьма(Письмо.Ссылка, ПриложениеКПисьму.ИмяФайла, ПриложениеКПисьму.Данные, ТипСодержимогоПоИмениФайла(ПриложениеКПисьму.ИмяФайла), ПриложениеКПисьму.Размер);
		КонецЦикла;
		
		// обновляем свойства родительского цикла обмена
		Если НЕ ОбновитьСвойстваЦиклаОбмена(Объект.ЦиклОбмена, Письмо.Ссылка) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		// добавляем письмо в массив полученных писем
		ДополнитьСписокПолученныхПисем(Письмо.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТемуСообщения(Объект) Экспорт
	
	Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Файл отчетности: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение отправки файла: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение о приеме протокола: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение о дате приема файла: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Прочие файлы: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение отправки: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросИОН Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Запрос на информационное обслуживание: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение отправки файла: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение о приеме протокола: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
		Запрос.УстановитьПараметр("ТранспортноеСообщение", Объект.Ссылка);
		Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Следующий() Тогда
				Возврат "Подтверждение о приеме ответа на запрос: " + СокрЛП(Выборка.ИмяФайла);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		Возврат "Pension";
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР Тогда
		
		Возврат "ReSign: Pension-Protocol";
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		
		Возврат "Pension-Unformal";
		
	ИначеЕсли Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		
		Возврат "ReSign: Pension-Unformal";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТОВ

Процедура ОбработкаЗаполненияОбъекта(Объект, Основание) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "НеформализованныйДокументНалогоплательщика" Тогда
		ОбработкаЗаполненияНеформализованногоДокументаНалогоплательщика(Объект, Основание);
	ИначеЕсли ИмяМетаданныхОбъекта = "ТранспортноеСообщение" Тогда
		ОбработкаЗаполненияТранспортногоСообщения(Объект, Основание);
	ИначеЕсли ИмяМетаданныхОбъекта = "ПерепискаСКонтролирующимиОрганами" Тогда
		ОбработкаЗаполненияПисьма(Объект, Основание);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюОбъекта(Объект, Отказ, РежимЗаписи = Неопределено, РежимПроведения = Неопределено, Замещение = Неопределено) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "ЭлектронныеПредставленияРегламентированныхОтчетов" Тогда
		ПередЗаписьюЭлектронногоПредставленияРегламентированногоОтчета(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ЦиклыОбмена" Тогда
		ПередЗаписьюЦиклаОбмена(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "УчетныеЗаписиДокументооборота" Тогда
		ПередЗаписьюУчетнойЗаписиНалогоплательщика(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "СерверыДокументооборота" Тогда
		ПередЗаписьюПочтовогоСервера(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "НеформализованныйДокументНалогоплательщика" Тогда
		ПередЗаписьюНеформализованногоДокументаНалогоплательщика(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "НеформализованныйДокументНалоговогоОргана" Тогда
		ПередЗаписьюНеформализованногоДокументаНалоговогоОргана(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "ЗапросНаИнформационноеОбслуживаниеНалогоплательщика" Тогда
		ПередЗаписьюЗапросаНаИнформационноеОбслуживаниеНалогоплательщика(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "ТранспортноеСообщение" Тогда
		ПередЗаписьюТранспортногоСообщения(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ИначеЕсли ИмяМетаданныхОбъекта = "ОрганыПФР" Тогда
		ПередЗаписьюОрганаПФР(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ПерепискаСКонтролирующимиОрганами" Тогда
		ПередЗаписьюПерепискиСКонтролирующимиОрганами(Объект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиОбъекта(Объект, Отказ, Замещение = Неопределено) Экспорт
	
	ИмяМетаданныхОбъекта = Объект.Метаданные().Имя;
	Если ИмяМетаданныхОбъекта = "ЭлектронныеПредставленияРегламентированныхОтчетов" Тогда
		ПриЗаписиЭлектронногоПредставленияРегламентированногоОтчета(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "УчетныеЗаписиДокументооборота" Тогда
		ПриЗаписиУчетнойЗаписиНалогоплательщика(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ЦиклыОбмена" Тогда
		ПриЗаписиЦиклаОбмена(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ТранспортноеСообщение" Тогда
		ПриЗаписиТранспортногоСообщения(Объект, Отказ);
	ИначеЕсли ИмяМетаданныхОбъекта = "ПользователиУчетныхЗаписейДокументооборота" Тогда
		ПриЗаписиПользователяУчетнойЗаписиНалогоплательщика(Объект, Отказ, Замещение);
	ИначеЕсли ИмяМетаданныхОбъекта = "НастройкиПользователейУчетныхЗаписейДокументооборота" Тогда
		ПриЗаписиНастройкиПользователяУчетнойЗаписиНалогоплательщика(Объект, Отказ, Замещение);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ УЧЕТНОЙ ЗАПИСИ НАЛОГОПЛАТЕЛЬЩИКА

Процедура ПередЗаписьюЭлектронногоПредставленияРегламентированногоОтчета(Объект, Отказ)
	
	ШапкаОшибки = "Не удалось записать электронное представление регламентированного отчета " + ?(ПустаяСтрока(Объект.Наименование), "<наименование не задано>", СокрЛП(Объект.Наименование)) + ":";
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидОтчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан вид отчета!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан налоговый орган!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана организация!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Объект.ДатаОкончания) ИЛИ НЕ ЗначениеЗаполнено(Объект.Периодичность) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан период отчета!", Отказ, ШапкаОшибки);
	ИначеЕсли Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Дата начала периода отчета больше, чем дата его окончания!", Отказ, ШапкаОшибки);
	ИначеЕсли Год(Объект.ДатаНачала) < 2000 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Год периода отчета не может быть меньше 2000!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ Отказ И ПустаяСтрока(Объект.Наименование) Тогда
		Объект.Наименование = СформироватьНаименованиеЭлектронногоПредставленияРегламентированногоОтчета(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиЭлектронногоПредставленияРегламентированногоОтчета(Объект, Отказ)
	
	Если Объект.мИмяФайла <> Неопределено ИЛИ Объект.мЭлектронноеПредставление <> Неопределено Тогда
		ДобавитьЭлектронноеПредставлениеВХранилище(Объект.Ссылка, Объект.мИмяФайла, Объект.мЭлектронноеПредставление);
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьНаименованиеЭлектронногоПредставленияРегламентированногоОтчета(ЭлПредставление) Экспорт
	
	Если ЭлПредставление.мИмяФайла = "" ИЛИ ЭлПредставление.мИмяФайла = Неопределено Тогда
		Возврат "Для НО " + ЭлПредставление.НалоговыйОрган + " от " + ЭлПредставление.Организация;
	Иначе
		Возврат СокрЛП(ЭлПредставление.мИмяФайла) + " для НО " + ЭлПредставление.НалоговыйОрган + " от " + ЭлПредставление.Организация;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ УЧЕТНОЙ ЗАПИСИ НАЛОГОПЛАТЕЛЬЩИКА

Процедура ПередЗаписьюУчетнойЗаписиНалогоплательщика(Объект, Отказ)

	ШапкаОшибки = "Не удалось записать учетную запись налогоплательщика " + ?(ПустаяСтрока(Объект.Наименование), "<наименование не задано>", СокрЛП(Объект.Наименование)) + ":";
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан адрес электронной почты!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СерверДокументооборота) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сервер документооборота!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	// проверка параметров SMTP
	Если НЕ ЗначениеЗаполнено(Объект.СерверSMTP) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан адрес SMTP-сервера налоговых органов!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПортSMTP) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан порт SMTP для доступа к серверу налоговых органов!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если Объект.ТребуетсяSMTPАутентификация Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ИмяПользователяSMTP) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не задано имя пользователя SMTP для доступа к серверу налоговых органов!", Отказ, ШапкаОшибки);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ПарольSMTP) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не задан пароль SMTP для доступа к серверу налоговых органов!", Отказ, ШапкаОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// проверка параметров POP3
	Если НЕ ЗначениеЗаполнено(Объект.СерверPOP3) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан адрес POP3-сервера налоговых органов!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПортPOP3) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указан порт POP3 для доступа к серверу налоговых органов!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИмяПользователяPOP3) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задано имя пользователя POP3 для доступа к серверу налоговых органов!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПарольPOP3) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан пароль POP3 для доступа к серверу налоговых органов!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если Объект.ПредназначенаДляДокументооборотаСФНС Тогда
		Если НЕ ЗначениеЗаполнено(Объект.НалоговыйОрган) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан налоговый орган!", Отказ, ШапкаОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СертификатРуководителя) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сертификат руководителя!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СертификатДляШифрования) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не выбран сертификат для целей шифрования!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Объект.Наименование = Объект.АдресЭлектроннойПочты;
		
		Если Объект.ОбменНапрямую Тогда
			Объект.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Отключена;
			Объект.ИспользоватьСервисОнлайнПроверкиОтчетов = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторСпецоператора) И СтрДлина(СокрЛП(Объект.ИдентификаторАбонента)) > 3 Тогда
			Объект.ИдентификаторСпецоператора = Лев(СокрЛП(Объект.ИдентификаторАбонента), 3);
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ЭтоЗаписьНового = Объект.ЭтоНовый();
	
КонецПроцедуры

Процедура ПриЗаписиУчетнойЗаписиНалогоплательщика(Объект, Отказ)
	
	// если пишется новый элемент и ему не сопоставлены пользователи,
	// то сопоставим ему текущего пользователя - автора
	Если Объект.ЭтоЗаписьНового И Объект.ЗаписатьПользователяПоУмолчанию Тогда
		ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ
			                      |	КОЛИЧЕСТВО(ПользователиУчетныхЗаписейДокументооборота.Пользователь) КАК Пользователь
			                      |ИЗ
			                      |	РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
			                      |ГДЕ
			                      |	ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись");
			Запрос.УстановитьПараметр("УчетнаяЗапись", Объект.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Если НЕ Выборка.Следующий() ИЛИ НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
				МенеджерЗаписи = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.УчетнаяЗапись = Объект.Ссылка;
				МенеджерЗаписи.Пользователь = ТекущийПользователь;
				МенеджерЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Оповестить("Изменение учетной записи налогоплательщика", Объект.Ссылка);
	//#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПОЧТОВОГО СЕРВЕРА

Процедура ПередЗаписьюПочтовогоСервера(Объект, Отказ)
	
	ШапкаОшибки = "Не удалось записать элемент справочника ""Серверы документооборота"" " + ?(ПустаяСтрока(Объект.Наименование), "<наименование не задано>", СокрЛП(Объект.Наименование)) + ":";
	
	Если ПустаяСтрока(Объект.АдресЭлектроннойПочтыФНС) И ПустаяСтрока(Объект.АдресЭлектроннойПочтыПФР) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан ни один из адресов электронной почты сервера документооборота.", Отказ, ШапкаОшибки);
	КонецЕсли;

	//Если ПустаяСтрока(Объект.АдресЭлектроннойПочтыФНС) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Адрес электронной почты почтового сервера не задан!", Отказ, ШапкаОшибки);
	//Иначе
	//	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//						  |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СерверыДокументооборота.Ссылка) КАК Ссылка
	//						  |ИЗ
	//						  |	Справочник.СерверыДокументооборота КАК СерверыДокументооборота
	//						  |ГДЕ
	//						  |	СерверыДокументооборота.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
	//						  |	И СерверыДокументооборота.Ссылка <> &Ссылка");
	//	Запрос.УстановитьПараметр("АдресЭлектроннойПочты", АдресЭлектроннойПочты);
	//	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	//	Выборка = Запрос.Выполнить().Выбрать();
	//	Выборка.Следующий();
	//	Если Выборка.Получить(0) <> 0 Тогда
	//		ОбщегоНазначения.СообщитьОбОшибке("Адрес электронной почты " + АдресЭлектроннойПочты + " уже сопоставлен почтовому серверу!", Отказ, ШапкаОшибки);
	//	КонецЕсли;
	//КонецЕсли;
	
	//Если ПустаяСтрока(Объект.Сертификат) Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не задан сертификат почтового сервера!", Отказ, ШапкаОшибки);
	//КонецЕсли;
	
	Если НЕ Отказ Тогда
		Объект.АдресЭлектроннойПочтыФНС = нрег(Объект.АдресЭлектроннойПочтыФНС);
		Объект.АдресЭлектроннойПочтыПФР = нрег(Объект.АдресЭлектроннойПочтыПФР);
		Если НЕ ЗначениеЗаполнено(Объект.ДлительностьОжиданияСервера) Тогда
			Объект.ДлительностьОжиданияСервера = 60;
		КонецЕсли;
		СгенерироватьНаименованиеПочтовогоСервера(Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СгенерироватьНаименованиеПочтовогоСервера(Объект, Обязательно = Ложь) Экспорт
	
	Если ПустаяСтрока(Объект.Наименование) Тогда
		
		СтрАдрес = Объект.АдресЭлектроннойПочтыФНС;
		ВхождениеА = Найти(СтрАдрес, "@");
		Если ВхождениеА = 0 Тогда
			СтрАдрес = Объект.АдресЭлектроннойПочтыПФР;
			ВхождениеА = Найти(СтрАдрес, "@");
		КонецЕсли;
		
		Если ВхождениеА <> 0 Тогда
			ДоменСервера = СокрЛП(Сред(СтрАдрес, ВхождениеА + 1));
			Если НЕ ПустаяСтрока(ДоменСервера) Тогда
				Объект.Наименование = "Сервер документооборота " + ДоменСервера;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Обязательно Тогда
		Объект.Наименование = ?(ПустаяСтрока(Объект.АдресЭлектроннойПочтыФНС), СокрЛП(Объект.АдресЭлектроннойПочтыПФР), СокрЛП(Объект.АдресЭлектроннойПочтыФНС));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЦИКЛА ОБМЕНА

Процедура ПередЗаписьюЦиклаОбмена(Объект, Отказ)
	
	Объект.ИзмененаПометкаУдаления = (Объект.Ссылка.ПометкаУдаления <> Объект.ПометкаУдаления);
	Если Объект.ИзмененаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	ШапкаОшибки = "Не удалось записать цикл обмена " + ПредставлениеЦиклаОбмена(Объект) + ":";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не указана организация!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ВнешняяОрганизация) Тогда
		Если Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан налоговый орган!", Отказ, ШапкаОшибки);
		ИначеЕсли Объект.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не указан орган ПФР!", Отказ, ШапкаОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда
			Объект.ДатаСоздания = ТекущаяДата();
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.Наименование) Тогда
			СгенерироватьНаименованиеЦиклаОбмена(Объект);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена();
		КонецЕсли;
		
		Если Объект.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
		ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			Объект.Период = СокрЛП(Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd") + Формат('39991231' - Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd"));
		ИначеЕсли Объект.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание
		ИЛИ Объект.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			Объект.Период = СокрЛП(Формат(Объект.ДатаНачалаПериода, "ДФ=yyyyMMdd") + Формат(Объект.ДатаОкончанияПериода, "ДФ=yyyyMMdd"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиЦиклаОбмена(Объект, Отказ)
	
	Если Объект.ИзмененаПометкаУдаления Тогда
		СообщенияЦиклаОбмена = ПолучитьСообщенияЦиклаОбмена(Объект.Ссылка);
		Для Каждого СообщениеЦиклаОбмена Из СообщенияЦиклаОбмена Цикл
			ОбъектСообщениеЦиклаОбмена = СообщениеЦиклаОбмена.Ссылка.ПолучитьОбъект();
			ОбъектСообщениеЦиклаОбмена.УстановитьПометкуУдаления(Объект.ПометкаУдаления);
		КонецЦикла;
		ОбновитьСтатусыСвязанногоОбъектаПриНеобходимости(Объект.Ссылка);
	КонецЕсли;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Оповестить("Изменение цикла обмена", Новый Структура("ЦиклОбмена, Отчет", Объект.Ссылка, ПолучитьПредметыЦиклаОбмена(Объект.Ссылка)));
	//#КонецЕсли
	
КонецПроцедуры

Функция ПолучитьИмяФайлаДИВЦиклаОбмена(Объект)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
	                      |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип)
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ ПЕРВЫЕ 1
	                      |	ТранспортныеКонтейнеры.ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |ГДЕ
	                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
	Запрос.УстановитьПараметр("ЦиклОбмена", ?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), Объект.Ссылка));
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	Запрос.УстановитьПараметр("Тип", ТипыВложений);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат СокрЛП(Выборка.ИмяФайла);
		КонецЕсли;
	КонецЕсли;
	Возврат "";
	
КонецФункции

Процедура СгенерироватьНаименованиеЦиклаОбмена(ЦиклОбмена)
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
	ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		ЦиклОбмена.Наименование = "От НО " + ЦиклОбмена.ВнешняяОрганизация;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		Если ТипЗнч(ЦиклОбмена.Предмет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ЦиклОбмена.Наименование = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ЦиклОбмена.Предмет) + " для " + СокрЛП(ЦиклОбмена.ВнешняяОрганизация);
		ИначеЕсли ЦиклОбмена.ВидОтчета.ИсточникОтчета = "ПередачаСЗВ4вПФР" Тогда
			ЦиклОбмена.Наименование = СокрЛП(ЦиклОбмена.Предмет) + " и РСВ для " + СокрЛП(ЦиклОбмена.ВнешняяОрганизация) + " от " + СокрЛП(ЦиклОбмена.Организация);
		Иначе
			ЦиклОбмена.Наименование = СокрЛП(ЦиклОбмена.Предмет) + " для " + СокрЛП(ЦиклОбмена.ВнешняяОрганизация) + " от " + СокрЛП(ЦиклОбмена.Организация);
		КонецЕсли;
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		ЦиклОбмена.Наименование = ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена);
	ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		ЦиклОбмена.Наименование = ПолучитьИмяФайлаДИВЦиклаОбмена(ЦиклОбмена);
		Если ЗначениеЗаполнено(ЦиклОбмена.ВнешняяОрганизация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " для НО " + ЦиклОбмена.ВнешняяОрганизация;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЦиклОбмена.Организация) Тогда
			ЦиклОбмена.Наименование = ЦиклОбмена.Наименование + " от " + ЦиклОбмена.Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ТемаПисьмаПоЦиклуОбмена(ЦиклОбмена)
	
	Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие
	ИЛИ ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		Возврат """" + СокрЛП(ЦиклОбмена.Предмет.Наименование) + """ для " + ЦиклОбмена.ВнешняяОрганизация;
	КонецЕсли;
	
	// получаем исходное сообщение
	Если ТипЗнч(ЦиклОбмена) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
		СсылкаНаЦиклОбмена = ЦиклОбмена;
	Иначе
		СсылкаНаЦиклОбмена = ?(ЦиклОбмена.ЭтоНовый(), ЦиклОбмена.ПолучитьСсылкуНового(), ЦиклОбмена.Ссылка);
	КонецЕсли;
	ТипПервичногоСообщения = ПолучитьТипПервичногоСообщенияПоЦиклуОбмена(ЦиклОбмена);
	
	ПисьмоВходящее = ПолучитьСообщениеЦиклаОбмена(СсылкаНаЦиклОбмена, ТипПервичногоСообщения);
	Если НЕ ЗначениеЗаполнено(ПисьмоВходящее) Тогда
		Возврат "";
	КонецЕсли;
	
	// извлекаем вложения расшифрованного входящего сообщения
	Если ТипПервичногоСообщения = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		ТипСодержимогоОписаниеПисьма = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма;
	Иначе
		ТипСодержимогоОписаниеПисьма = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка;
	КонецЕсли;
	
	ВложенияОписанияКПисьму = ПолучитьВложенияТранспортногоСообщения(ПисьмоВходящее, Истина, ТипСодержимогоОписаниеПисьма);
	Если ВложенияОписанияКПисьму.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	ВложенияОписаниеКПисьму = ВложенияОписанияКПисьму[0];
	
	// загружаем описание к письму
	ВремФайлОписаниеКПисьму = ПолучитьИмяВременногоФайла();
	ВложенияОписаниеКПисьму.Данные.Получить().Записать(ВремФайлОписаниеКПисьму);
	ДеревоОписанияКПисьму = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеКПисьму);
	УдалитьВременныйФайл(ВремФайлОписаниеКПисьму);
	Если ДеревоОписанияКПисьму = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	УзелТема = ДеревоОписанияКПисьму.Строки.Найти("тема", "Имя", Истина);
	Если УзелТема = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	Тема = XMLЗначениеВнутр(Тип("Строка"), УзелТема.Значение);
	
	Возврат """" + Тема + """ от " + ЦиклОбмена.ВнешняяОрганизация;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТРАНСПОРТНОГО СООБЩЕНИЯ

Процедура ПриЗаписиТранспортногоСообщения(Объект, Отказ)
	
	Если НЕ ОбновитьСвойстваЦиклаОбмена(Объект.ЦиклОбмена) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	//Если Объект.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
	//	ОбновитьОтветНаЗапросИОНВРегистреОтветовПриНеобходимости(Объект);
	//КонецЕсли;
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Если НЕ Отказ Тогда
		Оповестить("Изменение сообщения", Новый Структура("Сообщение, ЦиклОбмена, Предмет", Объект.Ссылка, Объект.ЦиклОбмена, ПолучитьПредметыЦиклаОбмена(Объект.ЦиклОбмена)));
	КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры

Процедура ПередЗаписьюТранспортногоСообщения(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.Статус = Перечисления.СтатусыПисем.ПустаяСсылка() Тогда
		Объект.Статус = Перечисления.СтатусыПисем.Сохраненное;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияТранспортногоСообщения(Объект, СообщениеОснование)
	Перем ИмяФайлаЭЦП;
	Перем ДанныеЭЦП;
	Перем ИмяФайлаСертификата;
	Перем ДанныеСертификата;
	Перем РазмерФайлаСертификата;
	Перем РазмерФайлаЭЦП;
	Перем ЭЦПИмяПодписанногоФайла;
	Перем ЭЦПСертификат;
	Перем ЭЦПСтатусПроверки;
	
	Если ТипЗнч(СообщениеОснование) <> Тип("ДокументСсылка.ТранспортноеСообщение") Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
		
	Если НЕ СообщениеРасшифровано(СообщениеОснование) Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СообщениеОснование.ЦиклОбмена) Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	Если СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности Тогда
		//формируем подтверждение налогоплательщика на подтверждение отправки отчетности
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		КвитанцииИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина,Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		Если КвитанцииИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ не обнаружена исходная квитанция об отправке от сервера документооборота.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тема = "Подтверждение отправки файла: " + СокрЛП(КвитанцииИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходную квитанцию к содержимому транспортного контейнера (.rcpt)
		ИмяФайлаРЦПТ = СокрЛП(КвитанцииИсходногоСообщения[0].ИмяФайла);
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, КвитанцииИсходногоСообщения[0].Данные, ИмяФайлаРЦПТ, КвитанцииИсходногоСообщения[0].Размер);
		
		// добавляем ИОП (.info)
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, СформироватьИОП(Объект.Ссылка), Лев(ИмяФайлаРЦПТ, СтрДлина(ИмяФайлаРЦПТ) - 5) + ".info");
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированную при приеме документа-основания подпись (вместе с сертификатом)
		//Если ПолучитьПодписьНалогоплательщика(СообщениеОснование, ИмяФайлаЭЦП, ДанныеЭЦП, ИмяФайлаСертификата, ДанныеСертификата, РазмерФайлаЭЦП, РазмерФайлаСертификата, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки) Тогда
		//	Если НЕ ПустаяСтрока(ИмяФайлаЭЦП) И НЕ ПустаяСтрока(ИмяФайлаСертификата) Тогда
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ДанныеЭЦП, ИмяФайлаЭЦП, РазмерФайлаЭЦП, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки, Истина);
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ДанныеСертификата, ИмяФайлаСертификата, РазмерФайлаСертификата);
		//	КонецЕсли;
		//КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности Тогда
		//формируем подтверждение налогоплательщика на протокол входного контроля
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		ПротоколыИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
		Если ПротоколыИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """ не обнаружен исходный протокол входного контроля, полученный от налогового органа.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тема = "Подтверждение о приеме протокола: " + СокрЛП(ПротоколыИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходный протокол входного контроля к содержимому транспортного контейнера
		ИмяФайлаЛОГ = СокрЛП(ПротоколыИсходногоСообщения[0].ИмяФайла);
		ИмяПротоколаВОтвете = ИмяФайлаЛОГ + ".nlp"; // имеет место несоответствие ГПР приказу 141
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, ПротоколыИсходногоСообщения[0].Данные, ИмяПротоколаВОтвете, ПротоколыИсходногоСообщения[0].Размер);
		
		// добавляем ИОП (.info)
		ФайлИОП = СформироватьИОП(Объект.Ссылка);
		Если ФайлИОП <> Неопределено Тогда
			ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ФайлИОП, Лев(ИмяФайлаЛОГ, СтрДлина(ИмяФайлаЛОГ) - 4) + ".info");
			УдалитьФайлы(ФайлИОП);
		Иначе
			Сообщить("Не удалось создать Файл информации об отправителе и получателе для сообщения """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированную при приеме документа-основания подпись (вместе с сертификатом)
		//Если ПолучитьПодписьНалогоплательщика(СообщениеОснование, ИмяФайлаЭЦП, ДанныеЭЦП, ИмяФайлаСертификата, ДанныеСертификата, РазмерФайлаЭЦП, РазмерФайлаСертификата, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки) Тогда
		//	Если НЕ ПустаяСтрока(ИмяФайлаЭЦП) И НЕ ПустаяСтрока(ИмяФайлаСертификата) Тогда
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ДанныеЭЦП, ИмяФайлаЭЦП, РазмерФайлаЭЦП, ЭЦПИмяПодписанногоФайла + ".nlp", ЭЦПСертификат, ЭЦПСтатусПроверки, Истина);
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ДанныеСертификата, ИмяФайлаСертификата, РазмерФайлаСертификата);
		//	КонецЕсли;
		//КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО Тогда
		//формируем подтверждение налогоплательщика на неформализованное сообщение налогового органа
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		ТекстовыеСообщенияИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента);
		Если ТекстовыеСообщенияИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """ не обнаружено исходное текстовое сообщение, полученное от налогового органа.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		НФД_ИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
		ОписанияНФД_ИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента);
		
		Объект.Тема = "Подтверждение о дате приема файла: " + СокрЛП(ТекстовыеСообщенияИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходное текстовое сообщение
		ИмяФайлаТекстовогоСообщения = СокрЛП(ТекстовыеСообщенияИсходногоСообщения[0].ИмяФайла);
		Если НЕ ДополнитьТекстовоеСообщениеИзНФДНОДатойПолучения(ТекстовыеСообщенияИсходногоСообщения[0], СообщениеОснование.ДатаТранспорта) Тогда
			ОтменитьТранзакцию();
			Сообщить("Ошибка создания сообщения " + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента, ТекстовыеСообщенияИсходногоСообщения[0].Данные, ИмяФайлаТекстовогоСообщения, ТекстовыеСообщенияИсходногоСообщения[0].Размер);
		
		// !!! в 141 НФД не входит в состав ответа налогоплательщика
		//Если НФД_ИсходногоСообщения.Количество() > 0 Тогда
		//	Для Каждого НФД Из НФД_ИсходногоСообщения Цикл
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент, НФД.Данные, СокрЛП(НФД.ИмяФайла));
		//	КонецЦикла;
		//КонецЕсли;
		
		Если ОписанияНФД_ИсходногоСообщения.Количество() > 0 Тогда
			Для Каждого ОписаниеНФД Из ОписанияНФД_ИсходногоСообщения Цикл
				ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента, ОписаниеНФД.Данные, СокрЛП(ОписаниеНФД.ИмяФайла), ОписаниеНФД.Размер);
			КонецЦикла;
		КонецЕсли;
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированные при приеме сообщения-основания подписи (вместе с сертификатами)
		//ПодписиНалогоплательщика = ПолучитьПодписиНалогоплательщика(СообщениеОснование);
		//Для Каждого ПодписьНалогоплательщика Из ПодписиНалогоплательщика Цикл
		//	ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ПодписьНалогоплательщика.Подпись, ПодписьНалогоплательщика.ИмяФайлаПодписи, ПодписьНалогоплательщика.РазмерПодписи, ПодписьНалогоплательщика.ЭЦПИмяПодписанногоФайла, ПодписьНалогоплательщика.ЭЦПСертификат, ПодписьНалогоплательщика.ЭЦПСтатусПроверки, Истина);
		//	ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ПодписьНалогоплательщика.Сертификат, ПодписьНалогоплательщика.ИмяФайлаСертификата, ПодписьНалогоплательщика.РазмерСертификата);
		//КонецЦикла;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика Тогда
		//формируем подтверждение налогоплательщика на подтверждение отправки неформализованного документа
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		КвитанцииИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина,Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		Если КвитанцииИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ не обнаружена исходная квитанция об отправке от сервера документооборота.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тема = "Подтверждение отправки: " + СокрЛП(КвитанцииИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходную квитанцию к содержимому транспортного контейнера (.rcpt)
		ИмяФайлаРЦПТ = СокрЛП(КвитанцииИсходногоСообщения[0].ИмяФайла);
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, КвитанцииИсходногоСообщения[0].Данные, ИмяФайлаРЦПТ, КвитанцииИсходногоСообщения[0].Размер);
		
		//// добавляем ИОП (.info)
		//ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, СформироватьИОП(Ссылка), Лев(ИмяФайлаРЦПТ, СтрДлина(ИмяФайлаРЦПТ) - 5) + ".info");
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированную при приеме документа-основания подпись (вместе с сертификатом)
		//Если ПолучитьПодписьНалогоплательщика(СообщениеОснование, ИмяФайлаЭЦП, ДанныеЭЦП, ИмяФайлаСертификата, ДанныеСертификата, РазмерФайлаЭЦП, РазмерФайлаСертификата, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки) Тогда
		//	Если НЕ ПустаяСтрока(ИмяФайлаЭЦП) И НЕ ПустаяСтрока(ИмяФайлаСертификата) Тогда
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ДанныеЭЦП, ИмяФайлаЭЦП, РазмерФайлаЭЦП, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки, Истина);
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ДанныеСертификата, ИмяФайлаСертификата, РазмерФайлаСертификата);
		//	КонецЕсли;
		//КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН Тогда
		//формируем подтверждение налогоплательщика на подтверждение отправки запроса на информационное обслуживание
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		КвитанцииИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		Если КвитанцииИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ не обнаружена исходная квитанция об отправке от сервера документооборота.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тема = "Подтверждение отправки файла: " + СокрЛП(КвитанцииИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходную квитанцию к содержимому транспортного контейнера (.rcpt)
		ИмяФайлаРЦПТ = СокрЛП(КвитанцииИсходногоСообщения[0].ИмяФайла);
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, КвитанцииИсходногоСообщения[0].Данные, ИмяФайлаРЦПТ, КвитанцииИсходногоСообщения[0].Размер);
		
		// добавляем ИОП (.info)
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, СформироватьИОП(Объект.Ссылка), Лев(ИмяФайлаРЦПТ, СтрДлина(ИмяФайлаРЦПТ) - 5) + ".info");
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированную при приеме документа-основания подпись (вместе с сертификатом)
		//Если ПолучитьПодписьНалогоплательщика(СообщениеОснование, ИмяФайлаЭЦП, ДанныеЭЦП, ИмяФайлаСертификата, ДанныеСертификата, РазмерФайлаЭЦП, РазмерФайлаСертификата, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки) Тогда
		//	Если НЕ ПустаяСтрока(ИмяФайлаЭЦП) И НЕ ПустаяСтрока(ИмяФайлаСертификата) Тогда
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ДанныеЭЦП, ИмяФайлаЭЦП, РазмерФайлаЭЦП, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки, Истина);
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ДанныеСертификата, ИмяФайлаСертификата, РазмерФайлаСертификата);
		//	КонецЕсли;
		//КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН Тогда
		//формируем подтверждение налогоплательщика на протокол входного контроля
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		ПротоколыИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
		Если ПротоколыИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """ не обнаружен исходный протокол входного контроля, полученный от налогового органа.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тема = "Подтверждение о приеме протокола: " + СокрЛП(ПротоколыИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходный протокол входного контроля к содержимому транспортного контейнера (.rcpt)
		ИмяФайлаЛОГ = СокрЛП(ПротоколыИсходногоСообщения[0].ИмяФайла);
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, ПротоколыИсходногоСообщения[0].Данные, ИмяФайлаЛОГ, ПротоколыИсходногоСообщения[0].Размер);
		
		// добавляем ИОП (.info)
		ФайлИОП = СформироватьИОП(Объект.Ссылка);
		Если ФайлИОП <> Неопределено Тогда
			ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ФайлИОП, Лев(ИмяФайлаЛОГ, СтрДлина(ИмяФайлаЛОГ) - 4) + ".info");
			УдалитьФайлы(ФайлИОП);
		Иначе
			Сообщить("Не удалось создать Файл информации об отправителе и получателе для сообщения """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированную при приеме документа-основания подпись (вместе с сертификатом)
		//Если ПолучитьПодписьНалогоплательщика(СообщениеОснование, ИмяФайлаЭЦП, ДанныеЭЦП, ИмяФайлаСертификата, ДанныеСертификата, РазмерФайлаЭЦП, РазмерФайлаСертификата, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки) Тогда
		//	Если НЕ ПустаяСтрока(ИмяФайлаЭЦП) И НЕ ПустаяСтрока(ИмяФайлаСертификата) Тогда
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ДанныеЭЦП, ИмяФайлаЭЦП, РазмерФайлаЭЦП, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки, Истина);
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ДанныеСертификата, ИмяФайлаСертификата, РазмерФайлаСертификата);
		//	КонецЕсли;
		//КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН Тогда
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		
		ОтветыНаЗапросИсходногоСообщения = ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
		Если ОтветыНаЗапросИсходногоСообщения.Количество() = 0 Тогда
			Сообщить("При создании подтверждения на сообщение """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """ не обнаружен исходный файл ответа на запрос на информационное обслуживание, полученный от налогового органа.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тема = "Подтверждение о приеме ответа на запрос: " + СокрЛП(ОтветыНаЗапросИсходногоСообщения[0].ИмяФайла);
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем исходный ответ на запрос к содержимому транспортного контейнера
		ИмяФайлаОтвета = СокрЛП(ОтветыНаЗапросИсходногоСообщения[0].ИмяФайла);
		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН, ОтветыНаЗапросИсходногоСообщения[0].Данные, ИмяФайлаОтвета, ОтветыНаЗапросИсходногоСообщения[0].Размер);
		
		// добавляем ИОП (.info)
		ФайлИОП = СформироватьИОП(Объект.Ссылка);
		Если ФайлИОП <> Неопределено Тогда
			ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ФайлИОП, Лев(ИмяФайлаОтвета, СтрДлина(ИмяФайлаОтвета) - 4) + ".info");
			УдалитьФайлы(ФайлИОП);
		Иначе
			Сообщить("Не удалось создать Файл информации об отправителе и получателе для сообщения """ + ПредставлениеТранспортногоСообщения(Объект.Ссылка) + """.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование");
		
		//// добавляем сформированную при приеме документа-основания подпись (вместе с сертификатом)
		//Если ПолучитьПодписьНалогоплательщика(СообщениеОснование, ИмяФайлаЭЦП, ДанныеЭЦП, ИмяФайлаСертификата, ДанныеСертификата, РазмерФайлаЭЦП, РазмерФайлаСертификата, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки) Тогда
		//	Если НЕ ПустаяСтрока(ИмяФайлаЭЦП) И НЕ ПустаяСтрока(ИмяФайлаСертификата) Тогда
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ДанныеЭЦП, ИмяФайлаЭЦП, РазмерФайлаЭЦП, ЭЦПИмяПодписанногоФайла, ЭЦПСертификат, ЭЦПСтатусПроверки, Истина);
		//		ДобавитьСодержимоеТранспортногоКонтейнера(Объект.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ДанныеСертификата, ИмяФайлаСертификата, РазмерФайлаСертификата);
		//	КонецЕсли;
		//КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколПФР Тогда
		//формируем подтверждение на протокол ПФР
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Pension-Protocol";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Руководитель");
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР Тогда
		// формируем подтверждение на входящее неформализованное от ПФР
		
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.ЦиклОбмена.ВнешняяОрганизация;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ReSign: Pension-Unformal";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Руководитель");
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = СообщениеОснование.УчетнаяЗапись.СерверДокументооборота;
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПодтверждениеНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатПриемаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО Тогда
		// формируем подтверждение на подтверждение даты отправки
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРезультатОбработкиНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО Тогда
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеПисьмоНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	ИначеЕсли СообщениеОснование.Тип = Перечисления.ТипыТранспортныхСообщений.РассылкаНО Тогда
		
		Если Объект.ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Рассылка Тогда // формируем ответ только на групповую рассылку
			Возврат;
		КонецЕсли;
		
		// если существуют непомеченные на удаление подтверждения
		Если ПолучитьСообщенияВведенныеНаОсновании(СообщениеОснование, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП).Количество() > 0 Тогда
			Сообщить("Подтверждение на транспортное сообщение """ + ПредставлениеТранспортногоСообщения(СообщениеОснование) + """ уже существует.", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП;
		Объект.ЦиклОбмена = СообщениеОснование.ЦиклОбмена;
		Объект.Отправитель = СообщениеОснование.ЦиклОбмена.Организация;
		Объект.Получатель = ?(НЕ СообщениеОснование.УчетнаяЗапись.ОбменНапрямую, СообщениеОснование.УчетнаяЗапись.СерверДокументооборота, СообщениеОснование.УчетнаяЗапись.НалоговыйОрган);
		Объект.УчетнаяЗапись = СообщениеОснование.УчетнаяЗапись;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Основание = СообщениеОснование;
		Объект.Тема = "ФНС:1.0-извещениеОПолучении-ИзвещениеРассылкаНП";
		
		НачатьТранзакцию();
		
		// пишем текущее сообщение, чтобы было к чему добавлять вложения
		Попытка
			Объект.Записать();
		Исключение
			ОтменитьТранзакцию();
			Сообщить("Ошибка записи сообщения """ + Объект.Тип + """ цикла обмена """ + Объект.ЦиклОбмена + """!", СтатусСообщения.Важное);
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецПопытки;
		
		// добавляем вложения
		Если НЕ СформироватьИзвещениеОПолучении(Объект.Ссылка) Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		// формируем подпись под извещением
		Если НЕ ПоставитьПодписьОтветственногоЛица(Объект.Ссылка, "Шифрование") Тогда
			ОтменитьТранзакцию();
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДополнитьТекстовоеСообщениеИзНФДНОДатойПолучения(ТекстовоеСообщение, ДатаПолучения)
	
	Попытка
		ВремФайл = ПолучитьИмяВременногоФайла();
		ТекстовоеСообщение.Данные.Получить().Записать(ВремФайл);
		ЧтениеТекста = Новый ЧтениеТекста(ВремФайл, "windows-1251");
		ТекстФайла = СокрЛП(ЧтениеТекста.Прочитать());
		ЧтениеТекста.Закрыть();
	Исключение
		Сообщить("Ошибка чтения текстового сообщения:" +Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	ТекстФайла = "Документ был получен " + Формат(ДатаПолучения, "ДЛФ=DDT") + ".
					|
					|" + ТекстФайла;
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ВремФайл, "windows-1251");
		ЗаписьТекста.Записать(ТекстФайла);
		ЗаписьТекста.Закрыть();
		ТекстовоеСообщение.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл), Новый СжатиеДанных(9));
	Исключение
		Сообщить("Ошибка записи измененного текстового сообщения:" +Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЗАПРОСА НА ИНФОРМАЦИОННОЕ ОБСЛУЖИВАНИЕ НАЛОГОПЛАТЕЛЬЩИКА

Процедура ПередЗаписьюЗапросаНаИнформационноеОбслуживаниеНалогоплательщика(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	Если Объект.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
		Объект.ЗапрашиваемыеНалоги.Очистить();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ НЕФОРМАЛИЗОВАННОГО ДОКУМЕНТА НАЛОГОПЛАТЕЛЬЩИКА

Процедура ОбработкаЗаполненияНеформализованногоДокументаНалогоплательщика(Объект, Основание)
	
	Объект.ОшибкаЗаполнения = Ложь;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.НеформализованныйДокументНалоговогоОргана") Тогда
		
		//#Если ТолстыйКлиентОбычноеПриложение Тогда
		Ответ = Вопрос("Ответное сообщение будет записано. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		//#КонецЕсли
		
		НачатьТранзакцию();
		
		Объект.Организация = Основание.Организация;
		
		КодПолучателя = СокрЛП(Основание.НалоговыйОрган.Код);
		Получатель = Справочники.РегистрацияВИФНС.НайтиПоКоду(КодПолучателя, , , Объект.Организация);
		Если НЕ ЗначениеЗаполнено(Получатель) Тогда
			Объект.ОшибкаЗаполнения = Истина;
			ОтменитьТранзакцию();
			//#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение("Для организации """ + Основание.Организация + """ в справочнике ""Регистрация в ИФНС"" не определена запись по налоговому органу " + КодПолучателя + ", которому должно быть адресовано ответное сообщение.");
			//#КонецЕсли
			Возврат;
		КонецЕсли;
		Объект.Получатель = Получатель;
		
		Попытка
			Объект.Записать();
		Исключение
			Объект.ОшибкаЗаполнения = Истина;
			ОтменитьТранзакцию();
			//#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение("Не удалось записать ответное сообщение:" + Символы.ПС + ОписаниеОшибки());
			//#КонецЕсли
			Возврат;
		КонецПопытки;
		
		ТекстПисьма = ОбработатьСодержаниеОснования(Основание.Содержание);
		ВремФайл = ПолучитьИмяВременногоФайла("txt");
		ОбъектЗаписьТекста = Новый ЗаписьТекста(ВремФайл);
		ОбъектЗаписьТекста.Записать(ТекстПисьма);
		ОбъектЗаписьТекста.Закрыть();
		ХранилищеФайла = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл), Новый СжатиеДанных(9));
		РазмерФайла = ОпределитьРазмер(ВремФайл);
		УдалитьФайлы(ВремФайл);
		
		Если НЕ ДобавитьВложениеНеформализованногоДокумента(Объект.Ссылка, "Текстовое сообщение.txt", ХранилищеФайла, Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ТекстовыйДокумент, РазмерФайла) Тогда
			Объект.ОшибкаЗаполнения = Истина;
			ОтменитьТранзакцию();
			//#Если ТолстыйКлиентОбычноеПриложение Тогда
			Предупреждение("Не удалось записать содержимое ответного сообщения:" + Символы.ПС + ОписаниеОшибки());
			//#КонецЕсли
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюНеформализованногоДокументаНалогоплательщика(Объект, Отказ, РежимЗаписи, РежимПроведения)
	
	ШапкаОшибки = "Не удалось записать неформализованный документ налогоплательщика """ + Объект.Ссылка + """:";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задана организация!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Получатель) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не задан получатель!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.Дата = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьСодержаниеОснования(Содержание)
	
	Результат = "";
	Для Инд = 1 По СтрЧислоСтрок(Содержание) Цикл
		Результат = Результат + "> " + СтрПолучитьСтроку(Содержание, Инд);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ НЕФОРМАЛИЗОВАННОГО ДОКУМЕНТА НАЛОГОВОГО ОРГАНА

Процедура ПередЗаписьюНеформализованногоДокументаНалоговогоОргана(Объект, Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СПРАВОЧНИКА УЧЕТНЫЕЗАПИСИДОКУМЕНТООБОРОТА

Процедура ПриЗаписиПользователяУчетнойЗаписиНалогоплательщика(Объект, Отказ, Замещение)
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Если Объект.Отбор.УчетнаяЗапись.Использование И Объект.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно Тогда
		Оповестить("Изменение состава пользователей учетной записи налогоплательщика", Объект.Отбор.УчетнаяЗапись.Значение);
	Иначе
		Оповестить("Изменение состава пользователей учетной записи налогоплательщика");
	КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры

Процедура ПриЗаписиНастройкиПользователяУчетнойЗаписиНалогоплательщика(Объект, Отказ, Замещение)
	
	//#Если ТолстыйКлиентОбычноеПриложение Тогда
	Если Объект.Отбор.УчетнаяЗапись.Использование И Объект.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.Равно Тогда
		ПодключитьОбработчикАвтообменаСНалоговымиОрганами(Объект.Отбор.УчетнаяЗапись.Значение);
	Иначе
		ПодключитьОбработчикАвтообменаСНалоговымиОрганами();
	КонецЕсли;
	//#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СПРАВОЧНИКА ОРГАНЫПФР

Процедура ПередЗаписьюОрганаПФР(Объект, Отказ)

	ШапкаОшибки = "Не удалось записать сведения об органе ПФР """ + Объект.Ссылка + """:";
	
	Если НЕ КодОрганаПФРСоответствуетТребованиям(СокрЛП(Объект.Код)) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Некорректно задан код органа ПФР.", Отказ, ШапкаОшибки);
	КонецЕсли;
	
	// проверка закомментирована из-за особенностей реализации автонастройки по РОКИ (пишутся элементы сначала без сертификатов)
	//Если Объект.Сертификаты.Количество() = 0 Тогда
	//	ОбщегоНазначения.СообщитьОбОшибке("Не указан сертификат.", Отказ, ШапкаОшибки);
	//КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ПустаяСтрока(Объект.Наименование) Тогда
			Объект.Наименование = "Отделение ПФР " + СокрЛП(Объект.Код);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ СПРАВОЧНИКА ПЕРЕПИСКАСКОНТРОЛИРУЮЩИМИОРГАНАМИ

Процедура ПередЗаписьюПерепискиСКонтролирующимиОрганами(Объект, Отказ)

	Если Объект.ЭтоНовый() Тогда // именно без проверки заполнения Идентификатора, т.к. возможна запись скопированного
		Объект.Идентификатор = СгенерироватьUUID();
	КонецЕсли;
	
	ТипОрганизации = Тип("СправочникСсылка.Организации");
	Если ТипЗнч(Объект.Отправитель) = ТипОрганизации Тогда
		Объект.Организация = Объект.Отправитель;
	ИначеЕсли ТипЗнч(Объект.Получатель) = ТипОрганизации Тогда
		Объект.Организация = Объект.Получатель;
	Иначе
		Объект.Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ОтветНаПисьмоСуществует(Ссылка)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	ПерепискаСКонтролирующимиОрганами.Ссылка
	                      |ИЗ
	                      |	Справочник.ПерепискаСКонтролирующимиОрганами КАК ПерепискаСКонтролирующимиОрганами
	                      |ГДЕ
	                      |	ПерепискаСКонтролирующимиОрганами.ИдентификаторОснования = &ИдентификаторОснования");
	Запрос.УстановитьПараметр("ИдентификаторОснования", Ссылка.Идентификатор);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура ОбработкаЗаполненияПисьма(Объект, Основание)
	
	Если ТипЗнч(Основание) <> Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
		Объект.ОшибкаЗаполнения = Истина;
		Возврат;
	КонецЕсли;
	
	// ищем существующий ответ
	Если ОтветНаПисьмоСуществует(Основание) Тогда
		Ответ = Вопрос("На данное письмо уже создан ответ. Вы уверены, что хотите создать новый?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// если это ретроконверсия, то обработка особая
	Если Основание.Ретроконверсия Тогда
		
		// показываем форму параметров ответа на ретроконверсию
		ФормаРетроконверсия = ПолучитьФорму("Ретроконверсия");
		ФормаРетроконверсия.Основание = Основание;
		НастройкиОтвета = ФормаРетроконверсия.ОткрытьМодально();
		Если НЕ ЗначениеЗаполнено(НастройкиОтвета) Тогда
			Объект.ОшибкаЗаполнения = Истина;
			Возврат;
		КонецЕсли;
		
		ВариантПодтверждения = НастройкиОтвета.ВариантПодтверждения;
		ПодтвержденныеФайлыСведений = НастройкиОтвета.ФайлыСведений;
		
		// заполняем свойства (кроме вложений)
		Объект.Наименование = "Re:" + СокрЛП(Основание.Наименование); // требование приемного ПО Калуга-Астрал
		Объект.Тип = Основание.Тип;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Отправитель = Основание.Получатель;
		Объект.Получатель = Основание.Отправитель;
		Объект.ДатаСообщения = ТекущаяДата();
		Объект.ИдентификаторОснования = Основание.Идентификатор;
		Объект.Ретроконверсия = Основание.Ретроконверсия;
		
		ОбработанноеСодержимоеОснования = ОбработатьСодержаниеОснования(Основание.Содержание);
		Если ВариантПодтверждения = 2 Тогда // отклонение сведений
			Объект.Содержание = "Сведения содержат ошибки." + Символы.ПС + Символы.ПС + ОбработанноеСодержимоеОснования;
		Иначе
			
			Если ВариантПодтверждения = 3 Тогда // частичное подтверждение
				Объект.Содержание = "Сведения подтверждены лишь частично." + Символы.ПС + Символы.ПС + ОбработанноеСодержимоеОснования;
			Иначе
				Объект.Содержание = "Сведения верны." + Символы.ПС + Символы.ПС + ОбработанноеСодержимоеОснования;
			КонецЕсли;
			
			Вложения = ПолучитьВложенияНеформализованногоДокумента(Основание, , Истина);
			
			НачатьТранзакцию();
			
			Попытка
				Объект.Записать();
			Исключение
				ОтменитьТранзакцию();
				Объект.ОшибкаЗаполнения = Истина;
				Сообщить("Не удалось создать ответ:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
			
			// копируем вложения
			Для Каждого Вложение Из Вложения Цикл
				Если ПодтвержденныеФайлыСведений.Найти(Вложение.ИмяФайла) <> Неопределено Тогда
					Если НЕ ДобавитьВложенияПисьма(Объект.Ссылка, Вложение.ИмяФайла, Вложение.Данные, Вложение.Тип, Вложение.Размер) Тогда
						ОтменитьТранзакцию();
						Объект.ОшибкаЗаполнения = Истина;
						Возврат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		
	Иначе
	
		// получаем вложения и, при необходимости, задаем уточняющий вопрос
		Вложения = ПолучитьВложенияНеформализованногоДокумента(Основание, , Истина);
		Если Вложения.Количество() > 0 Тогда
			Ответ = Вопрос("Ответ будет записан при создании. Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Объект.ОшибкаЗаполнения = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем свойства (кроме вложений)
		Объект.Наименование = "Ответ на: " + СокрЛП(Основание.Наименование);
		Объект.Тип = Основание.Тип;
		Объект.Статус = Перечисления.СтатусыПисем.Исходящее;
		Объект.Отправитель = Основание.Получатель;
		Объект.Получатель = Основание.Отправитель;
		Объект.Содержание = Символы.ПС + Символы.ПС + ОбработатьСодержаниеОснования(Основание.Содержание);
		Объект.ДатаСообщения = ТекущаяДата();
		Объект.ИдентификаторОснования = Основание.Идентификатор;
		Объект.Ретроконверсия = Основание.Ретроконверсия;
		
		// записываем, если необходимо скопировать вложения
		Если Вложения.Количество() > 0 Тогда
			
			// открываем транзакцию
			НачатьТранзакцию();
			
			Попытка
				Объект.Записать();
			Исключение
				ОтменитьТранзакцию();
				Объект.ОшибкаЗаполнения = Истина;
				Сообщить("Не удалось создать ответ:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
				Возврат;
			КонецПопытки;
			
			// копируем вложения
			Для Каждого Вложение Из Вложения Цикл
				Если НЕ ДобавитьВложенияПисьма(Объект.Ссылка, Вложение.ИмяФайла, Вложение.Данные, Вложение.Тип, Вложение.Размер) Тогда
					ОтменитьТранзакцию();
					Объект.ОшибкаЗаполнения = Истина;
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		КонецЕсли;
		
		Объект.ОшибкаЗаполнения = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьСвойстваМодуляДокументооборота() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль
	                      |ИЗ
	                      |	Константы КАК Константы");
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("ИспользоватьВнешнийМодуль, ВнешнийМодуль", Выборка.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль, Выборка.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ИзменениеСвойствМодуляДокументооборотаВозможно() Экспорт
	
	Возврат		ПравоДоступа("Изменение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль)
			И	ПравоДоступа("Изменение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль);
	
КонецФункции

Функция ПолучитьВерсиюИзФайлаВнешнегоМодуля(ФайлВнешнегоМодуля)
	
	Попытка
		ОбъектОтчет = ВнешниеОбработки.Создать(ФайлВнешнегоМодуля);
		Возврат ОбъектОтчет.мВерсияМодуля;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ПрименитьСвойстваМодуляДокументооборота(ИспользоватьВнешнийМодуль = Неопределено, ВнешнийМодуль = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	// определяем, какие константы будут меняться
	МодифицируемыеКонстанты = Новый Массив;
	
	// подготавливаем двоичные данные внешнего модуля
	Если ВнешнийМодуль <> Неопределено Тогда
		
		МодифицируемыеКонстанты.Добавить("ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля");
		МодифицируемыеКонстанты.Добавить("ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль");
		
		ТипЗнчВнешнийМодуль = ТипЗнч(ВнешнийМодуль);
		Если ТипЗнчВнешнийМодуль = Тип("Строка") Тогда
			ОбъектВнешнийМодуль = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВнешнийМодуль));
			ФайлВнешнегоМодуля = ВнешнийМодуль;
		Иначе
			ФайлВнешнегоМодуля = ПолучитьИмяВременногоФайла();
			Если ТипЗнчВнешнийМодуль = Тип("ДвоичныеДанные") Тогда
				ОбъектВнешнийМодуль = Новый ХранилищеЗначения(ВнешнийМодуль);
			ИначеЕсли ТипЗнчВнешнийМодуль = Тип("ХранилищеЗначения") Тогда
				ОбъектВнешнийМодуль = ВнешнийМодуль;
			КонецЕсли;
			ОбъектВнешнийМодуль.Получить().Записать(ФайлВнешнегоМодуля);
		КонецЕсли;
		
		ВерсияВнешнегоМодуля = ПолучитьВерсиюИзФайлаВнешнегоМодуля(ФайлВнешнегоМодуля);
		Если НЕ ЗначениеЗаполнено(ВерсияВнешнегоМодуля) Тогда
			ОписаниеОшибки = "Некорректный формат внешнего модуля: не удалось извлечь версию.";
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользоватьВнешнийМодуль <> Неопределено Тогда
		МодифицируемыеКонстанты.Добавить("ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль");
	КонецЕсли;
	
	КоличествоМодифицируемыхКонстант = МодифицируемыеКонстанты.Количество();
	Если КоличествоМодифицируемыхКонстант = 0 Тогда
		Возврат Истина;
	ИначеЕсли КоличествоМодифицируемыхКонстант = 1 Тогда
		СтрМодифицируемыеКонстанты = МодифицируемыеКонстанты[0];
	ИначеЕсли КоличествоМодифицируемыхКонстант > 1 Тогда
		СтрМодифицируемыеКонстанты = МодифицируемыеКонстанты[0] + ", " + МодифицируемыеКонстанты[1] + ", " + МодифицируемыеКонстанты[2];
	КонецЕсли;
	
	// инициализируем значения констант
	Попытка
		КонстантыНабор = Константы.СоздатьНабор(СтрМодифицируемыеКонстанты);
		Если ИспользоватьВнешнийМодуль <> Неопределено Тогда
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль = ИспользоватьВнешнийМодуль;
		КонецЕсли;
		Если ВнешнийМодуль <> Неопределено Тогда
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = ОбъектВнешнийМодуль;
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля = ВерсияВнешнегоМодуля;
		КонецЕсли;
		КонстантыНабор.Записать();
		Возврат Истина;
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ЭлектронныйДокументооборотИспользуется() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(Организации.Ссылка) КАК Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами
	                      |	И Организации.УчетнаяЗаписьОбмена <> &ПустаяУчетнаяЗаписьОбмена
	                      |	И Организации.ПометкаУдаления = &ПометкаУдаления
	                      |	И Организации.УчетнаяЗаписьОбмена.ПометкаУдаления = &ПометкаУдаления");
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Запрос.УстановитьПараметр("ПустаяУчетнаяЗаписьОбмена", Справочники.УчетныеЗаписиДокументооборота.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		Возврат ЗначениеЗаполнено(Выборка.Получить(0));
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ОбработкаОповещенияФормыРегламентированногоОтчета(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Имясобытия = "Изменение статуса отправки регламентированного отчета" И ЗначениеЗаполнено(Параметр) И Форма.мСохраненныйДок <> Неопределено И Источник = Форма.мСохраненныйДок.Ссылка Тогда
		ОбновитьСтатусОтправкиВРегламентированномОтчете(Форма);
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ЗначениеЗаполнено(Параметр) И Форма.мСохраненныйДок <> Неопределено И ОтчетЯвляетсяПредметом(Параметр.ЦиклОбмена, Форма.мСохраненныйДок.Ссылка) Тогда
		ОбновитьСтатусОтправкиВРегламентированномОтчете(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкаНаОтчетПоФорме(Форма)
	
	// определяем ссылку на отчет
	Если СвойствоОпределено(Форма, "мСохраненныйДок") Тогда
		мСохраненныйДок = Форма.мСохраненныйДок;
		Если мСохраненныйДок = Неопределено Тогда
			СсылкаНаОтчет = Неопределено;
		Иначе
			СсылкаНаОтчет = мСохраненныйДок.Ссылка;
		КонецЕсли;
	Иначе
		СсылкаНаОтчет = Форма.Ссылка;
	КонецЕсли;
	
	Возврат СсылкаНаОтчет;
	
КонецФункции

Процедура ОбработкаОповещенияФормыРегламентированногоОтчетаПФР(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "Изменение статуса отправки регламентированного отчета" И ЗначениеЗаполнено(Параметр) И Источник = СсылкаНаОтчетПоФорме(Форма) Тогда
		ОбновитьСтатусОтправкиВРегламентированномОтчетеПФР(Форма);
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ЗначениеЗаполнено(Параметр) И ОтчетЯвляетсяПредметом(Параметр.ЦиклОбмена, СсылкаНаОтчетПоФорме(Форма)) Тогда
		ОбновитьСтатусОтправкиВРегламентированномОтчетеПФР(Форма);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОНЛАЙН-ОБНОВЛЕНИЯ МОДУЛЯ

Функция ОбновитьМодульДокументооборотаСФНСПриНеобходимости() Экспорт
	
	// если обмен не используется, то и обновлять ничего не надо
	Если НЕ ЭлектронныйДокументооборотИспользуется() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РазрешитьОнлайнОбновлениеМодуля = ВосстановитьЗначение("ДокументооборотСКонтролирующимиОрганами_РазрешитьОнлайнОбновление");
	Если РазрешитьОнлайнОбновлениеМодуля = Неопределено Тогда
		РазрешитьОнлайнОбновлениеМодуля = ВосстановитьЗначение("ДокументооборотСНалоговымиОрганами_РазрешитьОнлайнОбновление"); // прежнее имя параметра
	КонецЕсли;
	
	Если РазрешитьОнлайнОбновлениеМодуля = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли РазрешитьОнлайнОбновлениеМодуля = Неопределено Тогда
		РезультатЗапросаРазрешения = ПолучитьФорму("ПодтверждениеВыходаВИнтернетДляЦелейОбновленияМодуля").ОткрытьМодально();
		Если РезультатЗапросаРазрешения <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// показываем форму "Подождите, пожалуйста..."
	ФормаПодождите = ПолучитьФорму("ПодождитеПожалуйста");
	ФормаПодождите.Состояние = "Производится проверка наличия обновлений модуля документооборота...";
	ФормаПодождите.Открыть();
	МоментОткрытияФормыПодождите = ТекущаяДата();
	
	URLСервера = "downloads.1c.ru";
	КаталогФайловНаСервере = "/RO_OnlineServices/XCHG_FNS";
	ИмяКлючевогоФайлаНаСервере = "/infomap.dat";
	
	ШапкаОшибки = "Ошибка обновления модуля защищенного документооборота:";
	
	// пытаемся установить соединение с сервером
	Соединение = УстановитьСоединениеССерверомИнтернета(URLСервера);
	Если Соединение = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка доступа к серверу обновлений модуля документооборота: " + ИнформацияОбОшибке().Описание, , ШапкаОшибки);
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	// пытаемся получить ключевой файл с сервера
	КлючевойФайл = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(КаталогФайловНаСервере + ИмяКлючевогоФайлаНаСервере, КлючевойФайл);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка доступа к серверу обновлений модуля документооборота: " + ИнформацияОбОшибке().Описание, , ШапкаОшибки);
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецПопытки;
	
	// извлекаем имя файла-карты релизов из ключевого файла
	ИмяФайлаКартыРелизовБезРасширения = ПолучитьИмяФайлаКартыРелизов(КлючевойФайл);
	УдалитьФайлы(КлючевойФайл);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаКартыРелизовБезРасширения) Тогда
		ВыждатьИЗакрытьФормуПодождите(ФормаПодождите, МоментОткрытияФормыПодождите);
		Возврат Ложь;
	КонецЕсли;
	
	// получаем версию справочника внешних модулей, закэшированного в ИБ
	СвойстваСправочникаВнешнихМодулейЗакэшированногоВИБ = ПолучитьСвойстваСправочникаВнешнихМодулейИзКэша();
	Если ЗначениеЗаполнено(СвойстваСправочникаВнешнихМодулейЗакэшированногоВИБ) Тогда
		ВерсияСправочникаВнешнихМодулейЗакэшированногоВИБ = СвойстваСправочникаВнешнихМодулейЗакэшированногоВИБ.Имя;
	КонецЕсли;
	
	// при необходимости получаем файл справочника внешних модулей с сервера и кэшируем его в ИБ
	ДеревоКартыРелизов = Неопределено;
	Если ВерсияСправочникаВнешнихМодулейЗакэшированногоВИБ <> ИмяФайлаКартыРелизовБезРасширения Тогда
		
		ИмяФайлаКартыРелизовНаСервере = "/" + ИмяФайлаКартыРелизовБезРасширения + ".zip";
		ФайлКартаРелизовАрхив = ПолучитьИмяВременногоФайла("zip");
		
		// получаем с сервера
		Попытка
			Соединение.Получить(КаталогФайловНаСервере + ИмяФайлаКартыРелизовНаСервере, ФайлКартаРелизовАрхив);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка доступа к серверу обновлений модуля документооборота: " + ИнформацияОбОшибке().Описание, , ШапкаОшибки);
			ФормаПодождите.Закрыть();
			Возврат Ложь;
		КонецПопытки;
		
		// распаковываем
		ОписаниеОшибки = "";
		ФайлКартаРелизов = РаспаковатьФайл(ФайлКартаРелизовАрхив, ОписаниеОшибки);
		УдалитьФайлы(ФайлКартаРелизовАрхив);
		Если НЕ ЗначениеЗаполнено(ФайлКартаРелизов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки, , ШапкаОшибки);
			ФормаПодождите.Закрыть();
			Возврат Ложь;
		КонецЕсли;
		
		// загружаем справочник в дерево
		ТекстФайлаСправочника = "";
		ОписаниеОшибки = "";
		ДеревоКартыРелизов = ЗагрузитьXMLВДеревоЗначений(ФайлКартаРелизов, ТекстФайлаСправочника, ОписаниеОшибки);
		УдалитьФайлы(ФайлКартаРелизов);
		Если НЕ ЗначениеЗаполнено(ДеревоКартыРелизов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки, , ШапкаОшибки);
			ФормаПодождите.Закрыть();
			Возврат Ложь;
		КонецЕсли;
		
		// сохраняем в кэше
		ЗакэшироватьСправочникВнешнихМодулейВИБ(ИмяФайлаКартыРелизовБезРасширения, ТекстФайлаСправочника);
		
	КонецЕсли;
	
	// получаем справочник из кэша
	Если ДеревоКартыРелизов = Неопределено Тогда
		
		СвойстваСправочникаВнешнихМодулейЗакэшированногоВИБ = ПолучитьСвойстваСправочникаВнешнихМодулейИзКэша(Истина);
		ТекстФайлаСправочника = СвойстваСправочникаВнешнихМодулейЗакэшированногоВИБ.Данные;
		
		// загружаем справочник в дерево
		ДеревоКартыРелизов = ЗагрузитьXMLВДеревоЗначений(, ТекстФайлаСправочника, ОписаниеОшибки);
		Если НЕ ЗначениеЗаполнено(ДеревоКартыРелизов) Тогда
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки, , ШапкаОшибки);
			ФормаПодождите.Закрыть();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// определяем последнюю доступную версию модуля документооборота для текущего релиза
	СвойстваМодуляДляТекущегоРелиза = ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов);
	Если НЕ ЗначениеЗаполнено(СвойстваМодуляДляТекущегоРелиза) Тогда
		ВыждатьИЗакрытьФормуПодождите(ФормаПодождите, МоментОткрытияФормыПодождите);
		Возврат Ложь;
	КонецЕсли;
	
	// сравниваем ее с той, которая хранится в ИБ
	Если СвойстваМодуляДляТекущегоРелиза.Версия = Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля.Получить() Тогда
		ВыждатьИЗакрытьФормуПодождите(ФормаПодождите, МоментОткрытияФормыПодождите);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ИзменениеСвойствМодуляДокументооборотаВозможно() Тогда
		Сообщить("В Интернете доступно обновление модуля документооборота,
				|но у Вас недостаточно прав для регистрации обновленного модуля в информационной базе.
				|Обратитесь к администратору информационной базы.", СтатусСообщения.Внимание);
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	ФормаПодождите.Состояние = "Обнаружена новая версия модуля";
	
	// запрашиваем подтверждение на закачку нового модуля
	ДатаВыпускаМодуля = ДатаПоСтроке(СвойстваМодуляДляТекущегоРелиза.Дата);
	ТекстВопроса = "В Интернете доступно обновление модуля документооборота.
				|
				|Новый модуль: версия " + СвойстваМодуляДляТекущегоРелиза.Версия;
	Если ЗначениеЗаполнено(ДатаВыпускаМодуля) Тогда
		ТекстВопроса = ТекстВопроса + " от " + Формат(ДатаВыпускаМодуля, "ДЛФ=DD");
	Иначе
		ТекстВопроса = ТекстВопроса + ".";
	КонецЕсли;
	ТекстВопроса = ТекстВопроса + "
				|
				|Обновить модуль сейчас (рекомендуется)?";
				
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	// закачиваем, кэшируем и включаем признак использования внешнего модуля
	ФормаПодождите.Состояние = "Производится получение новой версии модуля...";
	АрхивМодуля = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(КаталогФайловНаСервере + "/" + СвойстваМодуляДляТекущегоРелиза.Имя + ".zip", АрхивМодуля);
		УстановитьСоединение = Ложь;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ИнформацияОбОшибке().Описание, , ШапкаОшибки);
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецПопытки;
	
	// распаковываем модуль
	ФормаПодождите.Состояние = "Производится распаковка полученного модуля...";
	ОписаниеОшибки = "";
	ФайлМодуля = РаспаковатьФайл(АрхивМодуля, ОписаниеОшибки);
	УдалитьФайлы(АрхивМодуля);
	Если НЕ ЗначениеЗаполнено(ФайлМодуля) Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки, , ШапкаОшибки);
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	// регистрируем модуль в ИБ
	ФормаПодождите.Состояние = "Производится регистрация модуля в информационной базе...";
	РезультатРегистрации = ПрименитьСвойстваМодуляДокументооборота(Истина, ФайлМодуля, ОписаниеОшибки);
	УдалитьФайлы(ФайлМодуля);
	Если НЕ РезультатРегистрации Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки, , ШапкаОшибки);
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	// сообщаем
	Сообщить("Новая версия модуля документооборота зарегистрирована в информационной базе.", СтатусСообщения.Информация);
	
	ФормаПодождите.Закрыть();
	Возврат Истина;
	
КонецФункции

Процедура ВыждатьИЗакрытьФормуПодождите(ФормаПодождите, МоментОткрытия)
	
	Пока ТекущаяДата() - МоментОткрытия < 3 Цикл
	КонецЦикла;
	
	ФормаПодождите.Закрыть();
	
КонецПроцедуры

Процедура ЗакэшироватьСправочникВнешнихМодулейВИБ(ИмяФайла, ТекстСправочник)
	
	МенеджерЗаписи = РегистрыСведений.РесурсыМеханизмаОнлайнСервисовРО.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Тип = Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникВнешнихМодулейДокументооборота;
	МенеджерЗаписи.Данные = ТекстСправочник;
	МенеджерЗаписи.Имя = ИмяФайла;
	МенеджерЗаписи.ДатаПолучения = ТекущаяДата();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция РаспаковатьФайл(ФайлАрхива, ОписаниеОшибки = Неопределено)
	
	// создаем временный каталог
	ВременныйКаталог = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ВременныйКаталог);
	
	// определяем временный файл
	ФайлРезультат = ПолучитьИмяВременногоФайла("xml");
	
	// распаковываем во временный каталог
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла(ФайлАрхива);
		ПервыйЭлементАрхива = ЧтениеЗИП.Элементы.Получить(0);
		ЧтениеЗИП.Извлечь(ПервыйЭлементАрхива, ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеЗИП.Закрыть();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	// ищем файл в каталоге распаковки
	РезультатПоиска = НайтиФайлы(ВременныйКаталог, "*.*");
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переименовываем файл из архива
	ПервыйФайл = РезультатПоиска.Получить(0);
	ПереместитьФайл(ПервыйФайл.ПолноеИмя, ФайлРезультат);
	
	// удаляем каталог распаковки
	УдалитьФайлы(ВременныйКаталог);
	
	Возврат ФайлРезультат;
	
КонецФункции

Функция ОпределитьСвойстваВнешнегоМодуляДляТекущегоРелиза(ДеревоКартыРелизов)
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Для Каждого Стр1 Из ДеревоКартыРелизов.Строки Цикл // уровень узла Файл
		Для Каждого Стр2 Из Стр1.Строки Цикл // уровень узла Платформа
			Если Стр2.Тип = "Э" И ТекущаяПлатформаСоответствуетУзлу(Стр2, ИнформацияОПрограмме.ВерсияПлатформы) Тогда
				Для Каждого Стр3 Из Стр2.Строки Цикл // уровень узла Конфигурация
					Если Стр3.Тип = "Э" И ТекущаяКонфигурацияСоответствуетУзлу(Стр3, ИнформацияОПрограмме) Тогда
						Для Каждого Стр4 Из Стр3.Строки Цикл // уровень узла Релиз
							Если Стр4.Тип = "Э" Тогда
								
								РезультатПоискаАтрибутаСВерсиейРелиза = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Верс", "А"));
								Если РезультатПоискаАтрибутаСВерсиейРелиза.Количество() = 0 Тогда
									Продолжить;
								КонецЕсли;
								ВерсияРелиза = СокрЛП(РезультатПоискаАтрибутаСВерсиейРелиза[0].Значение);
								
								Если ВерсияРелиза <> ИнформацияОПрограмме.ВерсияКонфигурации Тогда
									Продолжить;
								КонецЕсли;
								
								Для Каждого Стр5 Из Стр4.Строки Цикл
									Если Стр5.Тип = "Э" И Стр5.Имя = "Мод" Тогда
										УзелВерсия = Стр5.Строки.Найти("Верс", "Имя");
										УзелИмя = Стр5.Строки.Найти("Имя", "Имя");
										УзелДата = Стр5.Строки.Найти("Дата", "Имя");
										Если УзелВерсия <> Неопределено И УзелИмя <> Неопределено Тогда
											Результат = Новый Структура("Версия, Имя", СокрЛП(УзелВерсия.Значение), СокрЛП(УзелИмя.Значение));
											Если ЗначениеЗаполнено(УзелДата) И ЗначениеЗаполнено(УзелДата.Значение) Тогда
												Результат.Вставить("Дата", УзелДата.Значение);
											КонецЕсли;
											Возврат Результат;
										КонецЕсли;
									КонецЕсли;
								КонецЦикла;
								
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИнформацияОПрограмме()
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы",			ПолучитьВерсиюТекущейПлатформы());
	Результат.Вставить("ИмяМетаданныхКонфигурации",	СокрЛП(Метаданные.Имя));
	Результат.Вставить("ИДКонфигурации",			РегламентированнаяОтчетность.ИДКонфигурации());
	Результат.Вставить("ВерсияКонфигурации",		СокрЛП(Метаданные.Версия));
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСвойстваСправочникаВнешнихМодулейИзКэша(СДанными = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Имя,
	                      |	РесурсыМеханизмаОнлайнСервисовРО.ДатаПолучения";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                      |ИЗ
	                      |	РегистрСведений.РесурсыМеханизмаОнлайнСервисовРО КАК РесурсыМеханизмаОнлайнСервисовРО
	                      |ГДЕ
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Тип = &Тип";
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникВнешнихМодулейДокументооборота);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Новый Структура;
		Результат.Вставить("Имя", Выборка.Имя);
		Результат.Вставить("ДатаПолучения", Выборка.ДатаПолучения);
		Если СДанными Тогда
			Результат.Вставить("Данные", Выборка.Данные);
		КонецЕсли;
		Возврат Результат;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ЗагрузитьXMLВДеревоЗначений(ИмяФайлаXML = Неопределено, ТекстXML = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	// считываем текст из файла
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ТекстXML = ПрочитатьТекстИзФайла(ИмяФайлаXML, , Истина);
		Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// восстанавливаем дерево
	Возврат ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML, ОписаниеОшибки);
	
КонецФункции

Функция ПрочитатьТекстИзФайла(ИмяФайла, _КодировкаТекста = Неопределено, АвтоопределениеКодировкиXML = Ложь) Экспорт
	
	ОбъектЧтение = Новый ЧтениеТекста(ИмяФайла, _КодировкаТекста);
	ТекстИзФайла = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	Если АвтоопределениеКодировкиXML И ЗначениеЗаполнено(ТекстИзФайла) Тогда
		ПерваяСтрокаФайла = ВРЕГ(Лев(СтрПолучитьСтроку(ТекстИзФайла, 1), 100));
		Если Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-8""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF8);
		ИначеЕсли Найти(ПерваяСтрокаФайла, ВРЕГ("encoding=""UTF-16""")) <> 0 Тогда
			ТекстИзФайла = ПрочитатьТекстИзФайла(ИмяФайла, КодировкаТекста.UTF16);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекстИзФайла;
	
КонецФункции

Функция ПолучитьИмяФайлаКартыРелизов(КлючевойФайл)
	
	// считываем содержимое ключевого файла
	ТекстКлючевогоФайла = ПрочитатьТекстИзФайла(КлючевойФайл);
	
	// выделяем имя файла-карты
	СтрРазделитель = "=";
	ВхождениеРазделителя = Найти(ТекстКлючевогоФайла, СтрРазделитель);
	Если НЕ ЗначениеЗаполнено(ВхождениеРазделителя) Тогда
		Возврат Неопределено;
	Иначе
		Возврат СокрЛП(Сред(ТекстКлючевогоФайла, ВхождениеРазделителя + 1));
	КонецЕсли;
	
КонецФункции

Функция УстановитьСоединениеССерверомИнтернета(URLСервера, ПараметрыСоединения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	Если ПараметрыСоединения = Неопределено Тогда
		НастройкиПрокси = ПолучитьНастройкиПрокси();
	Иначе
		НастройкиПрокси = ПараметрыСоединения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкиПрокси.ИмяПользователя) ИЛИ ЗначениеЗаполнено(НастройкиПрокси.Пароль) Тогда
		Попытка
			Прокси = Новый ИнтернетПрокси;
			Прокси.Пользователь	= НастройкиПрокси.ИмяПользователя;
			Прокси.Пароль		= НастройкиПрокси.Пароль;
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке().Описание;
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, , , , Прокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВЕРСИЯМИ ПЛАТФОРМЫ, КОНФИГУРАЦИИ, ОТЧЕТОВ...

Функция ИДТекущейКонфигурацииСоответствуетШаблону(ИДТекущейКонфигурации, ИДКонфигурации)
	
	Возврат ВРЕГ(СокрЛП(ИДТекущейКонфигурации)) = ВРЕГ(СокрЛП(ИДКонфигурации));
	
КонецФункции

Функция ТекущаяКонфигурацияСоответствуетУзлу(УзелКонфигурация, ИнформацияОПрограмме)
	
	РезультатПоискаАтрибута = УзелКонфигурация.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ИД", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ИДКонфигурацииУзла = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Если ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, ИДКонфигурацииУзла)
		ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, ИДКонфигурацииУзла) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТекущаяПлатформаСоответствуетУзлу(УзелПлатформа, ВерсияТекущейПлатформы)
	
	РезультатПоискаАтрибута = УзелПлатформа.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Верс", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ШаблонВерсии = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Возврат ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии);
	КонецЕсли;
	
КонецФункции

Функция ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии)
	
	МассивЧастейШаблона = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(ШаблонВерсии);
	МассивЧастейТекущейВерсии = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(ВерсияТекущейПлатформы);
	
	Для Инд = 0 По МассивЧастейШаблона.Количество() - 1 Цикл
		Если МассивЧастейТекущейВерсии.Количество() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекущаяЧастьШаблона = МассивЧастейШаблона[Инд];
		ТекущаяЧастьТекущейВерсии = МассивЧастейТекущейВерсии[Инд];
		Если НЕ ЧастьВерсииСоответствуетЧастиШаблонаВерсии(ТекущаяЧастьТекущейВерсии, ТекущаяЧастьШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЧастьВерсииСоответствуетЧастиШаблонаВерсии(Знач ЧастьТекущейВерсии, Знач ЧастьШаблона)
	
	ЧастьТекущейВерсии = СокрЛП(ЧастьТекущейВерсии);
	ЧастьШаблона = СокрЛП(ЧастьШаблона);
	
	Если Лев(ЧастьШаблона, 1) <> "[" ИЛИ Прав(ЧастьШаблона, 1) <> "]" Тогда
		Возврат (ЧастьШаблона = ЧастьТекущейВерсии);
	КонецЕсли;
	
	ЧастьШаблона = СокрЛП(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2));
	СоставляющиеЧастиШаблона = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(ЧастьШаблона, ",");
	Если СоставляющиеЧастиШаблона.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИДПеременной = "X";
	Для Каждого Составляющее Из СоставляющиеЧастиШаблона Цикл
		Если ЗначениеЗаполнено(Составляющее) Тогда
			Если НЕ УсловиеВыполняется(Составляющее, ИДПеременной, ЧастьТекущейВерсии) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УсловиеВыполняется(Условие, ИДПеременной, ЗначениеПеременной)
	
	РезультатВычисления = Неопределено;
	Попытка
		РезультатВычисления = Вычислить(СтрЗаменить(Условие, ИДПеременной, ЗначениеПеременной));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(РезультатВычисления) <> Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатВычисления;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерсиюТекущейПлатформы()
	
	ОбъектСисИнфо = Новый СистемнаяИнформация;
	Возврат СокрЛП(ОбъектСисИнфо.ВерсияПриложения);
	
КонецФункции

Процедура ПоказатьФормуНастроек() Экспорт
	
	ПолучитьФорму("Настройки").ОткрытьМодально();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ОНЛАЙН-ОБНОВЛЕНИЯ МОДУЛЯ
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТООБОРОТА С ПФР

Функция ОтправкаРегламентированногоОтчетаВПФР(Знач Док, Действие = 2, ФормаОтчета = Неопределено, ПараметрыГрупповойОбработки = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Сообщить("Не выбран документ для отправки.", СтатусСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем, включен ли механизм обмена с ПФР для организации отчета
	Организация = Док.Организация;
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС и ПФР по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ПФР
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСПФР Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ПФР.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// проверка статуса отчета
	СтатусОтправкиОтчета = ПолучитьСтатусОтправкиОбъекта(Док);
	Если ТипЗнч(Док) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		СтатусОтчета = РегламентированнаяОтчетность.ПолучитьСтатусРегламентированногоОтчета(Док);
	Иначе
		СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен;
	КонецЕсли;
	
	Если СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе Тогда
		
		ТекстСообщения = "Запрещено отправлять отчеты со статусом ""В работе""!
					 |Для отправки подтвердите статус отчета, переведя его в состояние ""Подготовлен"", и повторите попытку.";
		Если ФормаОтчета = Неопределено Тогда
			Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
			Возврат Ложь;
		Иначе
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение("Запрещено отправлять неподготовленные отчеты!
											|Изменить статус отчета с ""В работе"" на ""Подготовлен""?
											|
											|Подтверждайте изменение статуса только в случае,
											|ЕСЛИ ВЫ УВЕРЕНЫ В ТОМ, ЧТО ОТЧЕТ ГОТОВ К ПРЕДСТАВЛЕНИЮ!",
											"Нет, я не уверен(а) в том, что отчет готов к представлению.",
											"Да, я уверен(а) в том, что отчет готов к представлению.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(Док, Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
		КонецЕсли;
		
	ИначеЕсли СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.Сдан Тогда
		
		Если ПараметрыГрупповойОбработки = Неопределено Тогда
			Если Вопрос("Внимание! Вы действительно хотите отправить уже сданный отчет?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Сообщить("Судя по статусу, отчет уже представлен в ПФР.", СтатусСообщения.Внимание);
			Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
				Возврат Ложь;
			ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
				ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(СтатусОтправкиОтчета) Тогда
		
		Если ПараметрыГрупповойОбработки = Неопределено Тогда
			Если НЕ ВопросПредупреждение("Внимание! Не рекомендуется отправлять отчеты, предыдущая попытка отправки которых еще не завершена!
									|Вы действительно хотите отправить отчет? При этом будет начат новый цикл обмена!",
									"Нет, прервать отправку.",
									"Да, я хочу отправить отчет, предыдущая попытка отправки которого не завершена.") Тогда
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Сообщить("Предыдущая попытка отправки отчета не завершена!", СтатусСообщения.Внимание);
			Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
				Возврат Ложь;
			ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
				ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// !!! проверка на то, что отчет представляется за истекший период.
	
	// выгружаем отчет в файлы
	ДополнительныйДокумент = Неопределено;
	РезультатВыгрузкиОтчета = ВыгрузитьОтчетВПФР(Док, ФормаОтчета, ДополнительныйДокумент);
	Если НЕ ЗначениеЗаполнено(РезультатВыгрузкиОтчета) Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// создаем объект
	ОбъектОтчет = Док.ПолучитьОбъект();
	
	// открываем транзакцию
	НачатьТранзакцию();
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР;
	ЦиклОбмена.Предмет = Док;
	Если ЗначениеЗаполнено(ДополнительныйДокумент) Тогда
		НовСтр = ЦиклОбмена.ДополнительныеПредметы.Добавить();
		НовСтр.Предмет = ДополнительныйДокумент;
	КонецЕсли;
	ЦиклОбмена.Идентификатор = СгенерироватьUUID();
	
	// ищем отчет в справочнике отчетов
	ИсточникОтчета = РезультатВыгрузкиОтчета.ВидДокумента;
	РезультатПоиска = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчета);
	Если РезультатПоиска = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
		ОтменитьТранзакцию();
		Сообщить("В справочнике ""Регламентированные отчеты"" не найден отчет вида """ + ИсточникОтчета + """!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	ЦиклОбмена.ВидОтчета = РезультатПоиска;
	
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗапись;
	
	// инициализируем даты
	РеквизитыМетаданныхОтчета = ОбъектОтчет.Метаданные().Реквизиты;
	Если РеквизитыМетаданныхОтчета.Найти("ОтчетныйПериод") <> Неопределено И ЗначениеЗаполнено(ОбъектОтчет.ОтчетныйПериод) Тогда
		ОтчетныйГод = Год(ОбъектОтчет.ОтчетныйПериод);
		Если ОтчетныйГод >= 2011 Тогда // начиная с 2011 - разбивка по кварталам
			Если Месяц(ОбъектОтчет.ОтчетныйПериод) >= 10 Тогда
				ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 10, 1));
				ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 12, 1));
			ИначеЕсли Месяц(ОбъектОтчет.ОтчетныйПериод) >= 7 Тогда
				ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 7, 1));
				ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 9, 1));
			ИначеЕсли Месяц(ОбъектОтчет.ОтчетныйПериод) >= 4 Тогда
				ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 4, 1));
				ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 6, 1));
			Иначе
				ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 1, 1));
				ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 3, 1));
			КонецЕсли;
		ИначеЕсли ОтчетныйГод >= 2010 Тогда // начиная с 2010 - разбивка по полугодиям
			Если Месяц(ОбъектОтчет.ОтчетныйПериод) >= 7 Тогда // второе полугодие
				ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 1, 1));
				ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 12, 1));
			Иначе // первое полугодие
				ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 1, 1));
				ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 6, 1));
			КонецЕсли;
		Иначе // до 2010 - разбивка по годам
			ЦиклОбмена.ДатаНачалаПериода = НачалоГода(ОбъектОтчет.ОтчетныйПериод);
			ЦиклОбмена.ДатаОкончанияПериода = КонецГода(ОбъектОтчет.ОтчетныйПериод);
		КонецЕсли;
	ИначеЕсли РеквизитыМетаданныхОтчета.Найти("ПериодРегистрации") <> Неопределено Тогда
		ПериодРегистрации = ОбъектОтчет.ПериодРегистрации;
		ЦиклОбмена.ДатаНачалаПериода = НачалоМесяца(ПериодРегистрации);
		ЦиклОбмена.ДатаОкончанияПериода = КонецМесяца(ПериодРегистрации);
	ИначеЕсли РеквизитыМетаданныхОтчета.Найти("Год") <> Неопределено Тогда
		ДатаГода = Дата(ОбъектОтчет.Год, 1, 1);
		ЦиклОбмена.ДатаНачалаПериода = НачалоГода(ДатаГода);
		ЦиклОбмена.ДатаОкончанияПериода = КонецГода(ДатаГода);
	ИначеЕсли РеквизитыМетаданныхОтчета.Найти("ДатаНачала") <> Неопределено И РеквизитыМетаданныхОтчета.Найти("ДатаОкончания") <> Неопределено Тогда
		ЦиклОбмена.ДатаНачалаПериода = ОбъектОтчет.ДатаНачала;
		ЦиклОбмена.ДатаОкончанияПериода = ОбъектОтчет.ДатаОкончания;
	Иначе
		ЦиклОбмена.ДатаНачалаПериода = ОбъектОтчет.Дата;
		ЦиклОбмена.ДатаОкончанияПериода = ОбъектОтчет.Дата;
	КонецЕсли;
	
	// определяем получателя
	ПолучательПервичногоСообщения = ОпределитьОрганПФРОрганизации(Организация);
	Если ПолучательПервичногоСообщения = Неопределено Тогда
		ОтменитьТранзакцию();
		Сообщить("В свойствах организации не задан код органа ПФР.", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(ПолучательПервичногоСообщения) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось найти в справочнике ""Органы ПФР"" получателя отчетности.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	ЦиклОбмена.ВнешняяОрганизация = ПолучательПервичногоСообщения;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = ПолучательПервичногоСообщения;
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка прервана.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	// изменяем статус отчета
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.ВКонверте);
	Если ДополнительныйДокумент <> Неопределено Тогда
		ЗаписатьСтатусОтправкиОбъекта(ДополнительныйДокумент, Перечисления.СтатусыОтправки.ВКонверте);
	КонецЕсли;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// добавляем ДИВы
	КаталогВыгрузки = РезультатВыгрузкиОтчета.КаталогВыгрузки;
	ФайлыДИВ = РезультатВыгрузкиОтчета.Файлы;
	Для Каждого СтрФайлДИВ Из ФайлыДИВ Цикл
		Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР, КаталогВыгрузки + СтрФайлДИВ.Имя, СтрФайлДИВ.Имя, , , , , , СтрФайлДИВ.Тип, СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml) Тогда
			ОтменитьТранзакцию();
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	// готовим пакет
	Если НЕ СформироватьПакет(ТранспортноеСообщение) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка, , , ПараметрыГрупповойОбработки) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// фиксируем изменения
	ЗафиксироватьТранзакцию();
	
	// изменяем статус отчета
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.Отправлен);
	Если ДополнительныйДокумент <> Неопределено Тогда
		ЗаписатьСтатусОтправкиОбъекта(ДополнительныйДокумент, Перечисления.СтатусыОтправки.Отправлен);
	КонецЕсли;
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);
	
	Возврат Истина;
	
КонецФункции

Функция ПодписатьСообщениеПФР(Сообщение, парамТипыДИВ = Неопределено, СообщениеДокументыКоторогоПодписываются = Неопределено, СертификатПодписанта = Неопределено, ИмяСгенерированногоФайлаЭЦП = Неопределено)
	
	Если ТипЗнч(парамТипыДИВ) = Тип("Массив") Тогда
		ТипыДИВ = парамТипыДИВ;
	Иначе
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(парамТипыДИВ);
	КонецЕсли;
	
	// определяем набор документов, которые должны быть подписаны
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Сообщение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР);
		КонецЕсли;
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР Тогда
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Сообщение.Основание;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР);
		КонецЕсли;
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Сообщение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация);
		КонецЕсли;
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Сообщение.Основание;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение);
		КонецЕсли;
	КонецЕсли;
	
	// получаем и проверяем сертификат руководителя
	Если СертификатПодписанта = Неопределено ИЛИ ТипЗнч(СертификатПодписанта) = Тип("Строка") Тогда
		УчетнаяЗапись = Сообщение.УчетнаяЗапись;
		СертификатРуководителя = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
		Если ПустаяСтрока(СертификатРуководителя) Тогда
			Сообщить("В настройках учетной записи " + УчетнаяЗапись + " не задан сертификат руководителя.", СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			// ищем сертификат по отпечатку
			ОбъектСертификат = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатРуководителя, "MY");
			Если ОбъектСертификат = Неопределено Тогда
				Сообщить("Не удалось найти сертификат руководителя в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификат);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ОбъектСертификат = СертификатПодписанта;
	КонецЕсли;
	
	// определяем какие сообщения без подписи
	ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(СообщениеДокументыКоторогоПодписываются, , ТипыДИВ);
	Подписи = ПолучитьВложенияТранспортногоСообщения(Сообщение, , Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	
	ТребующиеПодписания = Новый Массив;
	Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
		ПодписиПодФайлом = Подписи.НайтиСтроки(Новый Структура("ЭЦПИмяПодписанногоФайла, ЭЦПСертификат", ВложениеДИВ.ИмяФайла, ОбъектСертификат.Отпечаток));
		Если ПодписиПодФайлом.Количество() = 0 Тогда
			ТребующиеПодписания.Добавить(ВложениеДИВ);
		КонецЕсли;
	КонецЦикла;
	
	Если ТребующиеПодписания.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// создаем массив с именами документов, требующих подписания
	ТребующиеПодписанияМассив = Новый Массив;
	Для Каждого ТребующийПодписанияСтр Из ТребующиеПодписания Цикл
		ТребующиеПодписанияМассив.Добавить(ТребующийПодписанияСтр.ИмяФайла);
	КонецЦикла;
	
	// последовательно подписываем
	ДокументыНаПодпись = ПолучитьВложенияТранспортногоСообщения(СообщениеДокументыКоторогоПодписываются, Истина, , ТребующиеПодписанияМассив);
	Для Каждого СтрДокументНаПодпись Из ДокументыНаПодпись Цикл
		
		состояние("Подписание файла """ + СтрДокументНаПодпись.ИмяФайла + """...");
		
		// выгружаем во временный файл
		ВременныйФайл = ПолучитьИмяВременногоФайла();
		Попытка
			СтрДокументНаПодпись.Данные.Получить().Записать(ВременныйФайл);
		Исключение
			Сообщить("Ошибка выгрузки документа """ + СтрДокументНаПодпись.ИмяФайла + """ во временный файл для подписания.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		
		// подписываем
		КороткоеИмяФайлаПодписи = СгенерироватьИмяФайлаДокументаВСоставеПакета();
		ФайлПодписи = ПодписатьФайлPKCS7(ОбъектСертификат, ВременныйФайл, КаталогВременныхФайлов() + КороткоеИмяФайлаПодписи);
		Если ФайлПодписи = Неопределено Тогда
			УдалитьВременныйФайл(ВременныйФайл);
			Возврат Ложь;
		КонецЕсли;
		
		// сохраняем в регистр
		ИмяСгенерированногоФайлаЭЦП = КороткоеИмяФайлаПодписи;
		ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ФайлПодписи, ИмяСгенерированногоФайлаЭЦП, , СтрДокументНаПодпись.ИмяФайла, ОбъектСертификат.Отпечаток, Перечисления.СтатусыПроверкиЭЦП.Валидна, Истина);
		
		// удаляем временные файлы
		УдалитьВременныйФайл(ВременныйФайл);
		УдалитьВременныйФайл(ФайлПодписи);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьОписаниеСведенийДляСообщения(Сообщение)
	
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР);
	Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, , ТипыВложений);
	
	Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР, "Тип") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// генерируем файл
	КороткоеИмяФайла = Неопределено;
	ФайлОписаниеСведений = СформироватьОписаниеСведений(Сообщение, Вложения, КороткоеИмяФайла);
	Если ФайлОписаниеСведений = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем файл в содержимое
	ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР, ФайлОписаниеСведений, КороткоеИмяФайла, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьОписаниеПисьмаДляСообщения(Сообщение)
	
	// сначала получаем строки вложений без данных
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
	Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, , ТипыВложений);
	
	// проверяем, не сформировано ли ранее описание письма
	Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма, "Тип") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получаем строки вложений ЭЦП с данными
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	ВложенияЭЦП = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	
	// добавляем строки описания ЭЦП к ранее полученным строкам описаний
	Вложения.Колонки.Добавить("Данные");
	Для Каждого СтрВложениеЭЦП Из ВложенияЭЦП Цикл
		НовСтр = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрВложениеЭЦП);
	КонецЦикла;
	
	// генерируем файл
	КороткоеИмяФайла = Неопределено;
	ФайлОписаниеПисьма = СформироватьОписаниеПисьма(Сообщение, Вложения, КороткоеИмяФайла);
	Если ФайлОписаниеПисьма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем файл в содержимое
	ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма, ФайлОписаниеПисьма, КороткоеИмяФайла, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
	
	Возврат Истина;
	
КонецФункции

Функция ПрочитатьBase64ИзФайла(ФайлСертификата)
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем данные из файла в объект
	Попытка
		ДвДанные.Прочитать(ФайлСертификата);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// считываем все данные из объекта как строку Base64
	ДвДанные.ТекущаяПозиция = 0;
	СтрокаРезультат = ДвДанные.ПолучитьСтрокуBase64();
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция СформироватьТранспортнуюИнформациюДляСообщения(Сообщение)
	
	// определяем отпечаток сертификата получателя
	Получатель = Сообщение.Получатель;
	СертификатыПолучателя = Получатель.Сертификаты;
	Если СертификатыПолучателя.Количество() = 0 Тогда
		Сообщить("Не задан сертификат получателя (" + Получатель + ").", СтатусСообщения.Важное);
		Возврат Ложь;
	Иначе
		ОтпечатокСертификатаПолучателя = СертификатыПолучателя[0].Сертификат;
	КонецЕсли;
	
	// находим сертификат по отпечатку в хранилище "Другие пользователи"
	СвойстваСертификатаПолучателя = ПолучитьСвойстваСертификатаПоОтпечатку(ОтпечатокСертификатаПолучателя);
	Если СвойстваСертификатаПолучателя = Неопределено Тогда
		Сообщить("Сертификат получателя (" + Получатель + ") не найден в хранилище ""Другие пользователи"" (""Other people"").", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// экспортируем сертификат в файл в DER-кодировке
	ФайлСертификата = ЭкспортироватьСертификат(СвойстваСертификатаПолучателя, 2);
	Если ФайлСертификата = Неопределено Тогда
		Сообщить("Не удалось экспортировать из хранилища сертификат получателя (" + Получатель + ").", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// считываем сертификат из файла в кодировке Base64
	СертификатBase64 = ПрочитатьBase64ИзФайла(ФайлСертификата);
	Если СертификатBase64 = Неопределено Тогда
		Сообщить("Не удалось экспортировать из хранилища сертификат получателя (" + Получатель + ").", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// удаляем файл сертификата
	УдалитьВременныйФайл(ФайлСертификата);
	
	// генерируем файл
	КороткоеИмяФайла = Неопределено;
	ФайлТранспортнаяИнформация = СформироватьТранспортнуюИнформацию(Сообщение, СертификатBase64, КороткоеИмяФайла);
	Если ФайлТранспортнаяИнформация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем файл в содержимое
	ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация, ФайлТранспортнаяИнформация, КороткоеИмяФайла, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьПакет(Сообщение) Экспорт
	
	ЦиклОбмена = Сообщение.ЦиклОбмена;
	ВидЦиклаОбмена = ЦиклОбмена.Вид;
	Если ВидЦиклаОбмена = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР Тогда
		Возврат СформироватьПакетПФР(Сообщение);
	ИначеЕсли ВидЦиклаОбмена = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС Тогда
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			Возврат СформироватьПакетФНС(Сообщение);
		Иначе
			Возврат ЗашифроватьТранспортноеСообщение(Сообщение);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеТипаСодержимогоФайла(ТипСодержимого)
	
	Если ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Текст866 Тогда
		Возврат "plain866";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Текст1251 Тогда
		Возврат "plain1251";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml Тогда
		Возврат "xml";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.html Тогда
		Возврат "html";
	Иначе
		Возврат "unknown";
	КонецЕсли;
	
КонецФункции

Функция СформироватьПодтверждениеПолученияДляСообщения(Сообщение)
	
	// формируем комбинированную таблицу с вложениями
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение);
	Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение.Основание, , ТипыВложений);
	Вложения.Колонки.Добавить("Данные");
	
	ТипыВложений = Новый Массив;
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма);
	ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	ВложенияТекСообщения = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыВложений);
	Для Каждого ВложениеТекСообщения Из ВложенияТекСообщения Цикл
		НовСтр = Вложения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВложениеТекСообщения);
	КонецЦикла;
	
	// проверяем, не сформировано ли ранее описание письма
	Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма, "Тип") <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// генерируем файл
	КороткоеИмяФайла = Неопределено;
	ФайлОписаниеПисьма = СформироватьПодтверждениеПолучения(Сообщение, Вложения, КороткоеИмяФайла);
	Если ФайлОписаниеПисьма = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем файл в содержимое
	ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма, ФайлОписаниеПисьма, КороткоеИмяФайла, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьПодтверждениеПолучения(Сообщение, Вложения, КороткоеИмяФайла = Неопределено)
	
	///////////////////////////////////////////////////////////////////////////////
	// ЗАГРУЗКА ОПИСАНИЯ ПИСЬМА ИЗ ВХОДЯЩЕГО СООБЩЕНИЯ
	
	// получаем описание письма из входящего сообщения
	ОписанияПисьма = ПолучитьВложенияТранспортногоСообщения(Сообщение.Основание, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
	Если ОписанияПисьма.Количество() = 0 Тогда
		Сообщить("Не удалось сформировать подтверждение получения письма: среди содержимого исходного письма не обнаружено обязательное описание.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	ОписаниеПисьма = ОписанияПисьма[0];
	
	// выгружаем данные во временный файл
	ВремФайлОписаниеПисьма = ПолучитьИмяВременногоФайла();
	ОписаниеПисьма.Данные.Получить().Записать(ВремФайлОписаниеПисьма);
	
	// загружаем в дерево
	ДеревоОписаниеПисьма = ЗагрузитьXMLВДеревоЗначений(ВремФайлОписаниеПисьма);
	УдалитьВременныйФайл(ВремФайлОписаниеПисьма);
	
	///////////////////////////////////////////////////////////////////////////////
	// АНАЛИЗ ОПИСАНИЯ ПИСЬМА ИЗ ВХОДЯЩЕГО СООБЩЕНИЯ
	
	// находим узел "описаниеПисьма"
	УзелОписаниеПисьма = ДеревоОписаниеПисьма.Строки.Найти("описаниеПисьма", "Имя");
	Если УзелОписаниеПисьма = Неопределено Тогда
		Сообщить("Не удалось сформировать подтверждение получения письма: некорректное описание письма в исходном сообщении.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// находим узел "идентификаторПисьма"
	УзелИдентификаторПисьма = УзелОписаниеПисьма.Строки.Найти("идентификаторПисьма", "Имя");
	Если УзелИдентификаторПисьма = Неопределено Тогда
		Сообщить("Не удалось сформировать подтверждение получения письма: некорректное описание письма в исходном сообщении.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	ИдентификаторПисьма = УзелИдентификаторПисьма.Значение;
	
	///////////////////////////////////////////////////////////////////////////////
	// СОЗДАНИЕ И ЗАПОЛНЕНИЕ ДЕРЕВА
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	// добавляем узел "датаВремяПолучения"
	ДобавитьУзелXML(Дерево, "датаВремяПолучения", , XMLСтрока(ТекущаяДата()));
	
	// добавляем узел "идентификаторПисьма"
	ДобавитьУзелXML(Дерево, "идентификаторПисьма", , XMLСтрока(ИдентификаторПисьма));
	
	// добавляем узел "телоПисьма"
	УзелТелоПисьма = ДобавитьУзелXML(Дерево, "телоПисьма");
	
	// ищем подпись под телом письма
	СвойстваПодписиПодТеломПисьма = ОпределитьСвойстваПодписиПодТеломПисьма(Вложения);
	Если СвойстваПодписиПодТеломПисьма = Неопределено Тогда
		Сообщить("Ошибка определения свойств подписи под телом письма при формировании описания письма из состава пакета.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// добавляем подузел "подписи"
	УзелПодписи = ДобавитьУзелXML(УзелТелоПисьма, "подписи");
	
	// добавляем узел "подпись"
	ДанныеПодписиПодТеломПисьма = ДвоичныеДанные64(СвойстваПодписиПодТеломПисьма.Данные); // !!!
	УзелПодпись = ДобавитьУзелXML(УзелПодписи, "подпись", , ДанныеПодписиПодТеломПисьма);
	
	// добавляем атрибут "роль"
	УзелАтрибутРоль = ДобавитьУзелXML(УзелПодпись, "роль", Истина, "руководитель");
	
	// добавляем узел "списокПриложений"
	УзелСписокПриложений = ДобавитьУзелXML(Дерево, "списокПриложений");
	
	// выгружаем описание приложений
	ПриложенияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение));
	Для Каждого ПриложениеКПисьму Из ПриложенияКПисьму Цикл
		
		// добавляем узел "приложение"
		УзелПриложение = ДобавитьУзелXML(УзелСписокПриложений, "приложение");
		
		// добавляем узел "идентификаторДокумента"
		УзелИдентификаторДокумента = ДобавитьУзелXML(УзелПриложение, "идентификаторДокумента", , ПриложениеКПисьму.Идентификатор);
		
		// добавляем узел "имяФайла"
		УзелИмяФайла = ДобавитьУзелXML(УзелПриложение, "имяФайла", , ПриложениеКПисьму.ИмяФайла);
		
		// добавляем узел "подписи"
		УзелПодписи = ДобавитьУзелXML(УзелПриложение, "подписи");
		
		// добавляем узлы "подпись"
		ПодписиПодДокументом = Вложения.НайтиСтроки(Новый Структура("ЭЦПИмяПодписанногоФайла", ПриложениеКПисьму.ИмяФайла));
		Для Каждого ПодписьПодДокументом Из ПодписиПодДокументом Цикл
			
			// добавляем узел "подпись"
			УзелПодпись = ДобавитьУзелXML(УзелПодписи, "подпись", , ДвоичныеДанные64(ПодписьПодДокументом.Данные));
			
			// добавляем узел "роль"
			ДобавитьУзелXML(УзелПодпись, "роль", Истина, "руководитель");
			
		КонецЦикла;
		
	КонецЦикла;
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "подтверждениеПолучения");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция ОпределитьТипСодержимогоПриложенияКПисьму(СтрВложение)
	
	Если ЗначениеЗаполнено(СтрВложение.ТипСодержимогоФайла) Тогда
		Результат = СтрВложение.ТипСодержимогоФайла;
	Иначе
		ТипСодержимого = ТипСодержимогоПоИмениФайла(СтрВложение.ИмяФайла, Истина);
		Если НЕ ЗначениеЗаполнено(ТипСодержимого) Тогда
			Результат = Перечисления.ТипыСодержимогоФайлов.Неизвестный;
		Иначе
			Результат = ТипСодержимого;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = Перечисления.ТипыСодержимогоФайлов.Неизвестный ИЛИ НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат "unknown";
	Иначе
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

Функция ЗашифроватьФайл(Сертификаты, ФайлДанных, Знач ФайлЗашифрованныхДанных = Неопределено) Экспорт
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// формируем имя временного файла, если оно не задано
	Если ФайлЗашифрованныхДанных = Неопределено Тогда
		ФайлЗашифрованныхДанных = КаталогВременныхФайлов() + СгенерироватьИмяФайлаДокументаВСоставеПакета();
	КонецЕсли;
	
	// разбрасываем ключевые свойства сертификатов по массивам для вызова метода шифрования на нескольких
	МассивСерийныхНомеров = Новый Массив;
	МассивПоставщиков = Новый Массив;
	Если ТипЗнч(Сертификаты) = Тип("Массив") Тогда
		Для Каждого Серт Из Сертификаты Цикл
			МассивСерийныхНомеров.Добавить(Серт.СерийныйНомер);
			МассивПоставщиков.Добавить(Серт.Поставщик);
		КонецЦикла;
	Иначе
		МассивСерийныхНомеров.Добавить(Сертификаты.СерийныйНомер);
		МассивПоставщиков.Добавить(Сертификаты.Поставщик);
	КонецЕсли;
	
	// шифруем
	Попытка
		Если МассивСерийныхНомеров.Количество() = 1 Тогда
			Крипт.PKCS7Зашифровать(ФайлДанных, МассивСерийныхНомеров[0], МассивПоставщиков[0], ФайлЗашифрованныхДанных);
		Иначе
			Крипт.PKCS7ЗашифроватьДляНескольких(ФайлДанных, МассивСерийныхНомеров, МассивПоставщиков, ФайлЗашифрованныхДанных);
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// возвращаем результат
	Возврат ФайлЗашифрованныхДанных;
	
КонецФункции

Функция СоздатьДеревоОписанияДокументовПакета() Экспорт
	
	ДеревоОписанияДокументовПакета = Новый ДеревоЗначений;
	ДеревоОписанияДокументовПакета.Колонки.Добавить("ТипДокумента");
	ДеревоОписанияДокументовПакета.Колонки.Добавить("ТипСодержимого");
	ДеревоОписанияДокументовПакета.Колонки.Добавить("ИдентификаторДокумента");
	ДеревоОписанияДокументовПакета.Колонки.Добавить("Сжат");
	ДеревоОписанияДокументовПакета.Колонки.Добавить("Зашифрован");
	ДеревоОписанияДокументовПакета.Колонки.Добавить("ИмяФайлаДокумента");
	ДеревоОписанияДокументовПакета.Колонки.Добавить("ИмяФайлаАрхива");
	Возврат ДеревоОписанияДокументовПакета;
	
КонецФункции

Функция ОпределитьДокументВДеревеОписания(ДеревоОписанияДокументовПакета, ТипДокумента = Неопределено, ТипСодержимого = Неопределено, ИдентификаторДокумента = Неопределено, Сжат = Неопределено, Зашифрован = Неопределено, ИмяФайлаДокумента = Неопределено, ИмяФайлаАрхива = Неопределено) Экспорт
	
	НовСтр = ДеревоОписанияДокументовПакета.Строки.Добавить();
	НовСтр.ТипДокумента = ТипДокумента;
	НовСтр.ТипСодержимого = ТипСодержимого;
	НовСтр.ИдентификаторДокумента = ИдентификаторДокумента;
	НовСтр.Сжат = Сжат;
	НовСтр.Зашифрован = Зашифрован;
	НовСтр.ИмяФайлаДокумента = ИмяФайлаДокумента;
	НовСтр.ИмяФайлаАрхива = ИмяФайлаАрхива;
	Возврат НовСтр;
	
КонецФункции

Функция СгенерироватьUUID() Экспорт
	
	Возврат нрег(СтрЗаменить(Строка(Новый("УникальныйИдентификатор")), "-", ""));
	
КонецФункции

Функция ГраницыПериодаПоДатеАДВ(ОтчетныйПериод)
	
	ОтчетныйГод = Год(ОтчетныйПериод);
	Если ОтчетныйГод <= 2009 Тогда
		ДатаНачалаПериода = НачалоГода(ОтчетныйПериод);
		ДатаОкончанияПериода = КонецГода(ОтчетныйПериод);
	ИначеЕсли ОтчетныйГод = 2010 Тогда
		Если Месяц(ОтчетныйПериод) >= 7 Тогда
			ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 1, 1));
			ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 12, 1));
		Иначе
			ДатаНачалаПериода = НачалоМесяца(Дата(ОтчетныйГод, 1, 1));
			ДатаОкончанияПериода = КонецМесяца(Дата(ОтчетныйГод, 6, 1));
		КонецЕсли;
	Иначе
		ДатаНачалаПериода = НачалоГода(ОтчетныйПериод);
		ДатаОкончанияПериода = КонецКвартала(ОтчетныйПериод);
	КонецЕсли;
	Возврат Новый Структура("ДатаНачала, ДатаОкончания", ДатаНачалаПериода, ДатаОкончанияПериода);
	
КонецФункции

Функция ПериодАДВСоответствуетПериодуАСВ(ДокАДВ, ДокРСВ)
	
	ГраницыПериодаАДВ = ГраницыПериодаПоДатеАДВ(ДокАДВ.ОтчетныйПериод);
	Если НачалоМесяца(ГраницыПериодаАДВ.ДатаНачала) <> НачалоМесяца(ДокРСВ.ДатаНачала) Тогда
		Возврат Ложь;
	ИначеЕсли КонецМесяца(ГраницыПериодаАДВ.ДатаОкончания) <> КонецМесяца(ДокРСВ.ДатаОкончания) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// функция выгружает регламентированный отчет для представления в ПФР
Функция ВыгрузитьОтчетВПФР(Док, ФормаОтчета = Неопределено, ДополнительныйДокумент = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Сообщить("Не выбран документ для выгрузки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// инициализируем структуру-результат
	Результат = Новый Структура;
	
	// формируем имя временного каталога, в который будут помещены файлы выгрузки
	КаталогВыгрузки = КаталогВременныхФайлов();
	Если Прав(КаталогВыгрузки, 1) <> "\" Тогда
		КаталогВыгрузки = КаталогВыгрузки + "\";
	КонецЕсли;
	КаталогВыгрузки = КаталогВыгрузки + Строка(Новый УникальныйИдентификатор) + "\";
	Результат.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	
	// создаем временный каталог
	СоздатьКаталог(КаталогВыгрузки);
	
	// определяем тип выгружаемого документа
	ОбъектМетаданныхДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Док));
	ИмяМетаданныхДокумента = ОбъектМетаданныхДокумента.Имя;
	
	// определяем таблицу с информацией о выгруженных файлах
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Тип");
	ТаблицаФайлов.Колонки.Добавить("Имя");
	ТаблицаФайлов.Колонки.Добавить("Документ");
	
	// для прохождения синтакс-контроля в конфигурациях, в которых
	// отсутствует общий модуль ПроцедурыПерсонифицированногоУчета
	Если Метаданные.ОбщиеМодули.Найти("ПроцедурыПерсонифицированногоУчета") = Неопределено Тогда
		ПроцедурыПерсонифицированногоУчета = РегламентированнаяОтчетность;
	КонецЕсли;
	
	// алгоритм выгрузки зависит от типа документа
	Если ИмяМетаданныхДокумента = "ПередачаСЗВ4вПФР" Тогда
		
		ДокАДВ = Док;
		ДокРСВ = ДокАДВ.РасчетСтраховыхВзносов;
		
		Если НЕ ЗначениеЗаполнено(ДокРСВ) Тогда
			
			Ответ = Вопрос("В соответствии с требованиями Пенсионного фонда Российской Федерации представление файлов отчетности
							|в электронной форме по страховым взносам и персонифицированному учету с 1 апреля 2011 года,
							|включая отчетность за первый квартал 2011 года, в обязательном порядке осуществляется одновременно и
							|одним отправлением.
							|
							|Текущему документу не сопоставлен расчет страховых взносов.
							|Для привязки используйте пункт ""Связать с РСВ-1"" в подменю ""Отправка"".
							|
							|Продолжить действие БЕЗ ПРИВЯЗКИ к расчету страховых взносов (не рекомендуется)?",
							РежимДиалогаВопрос.ДаНет,
							,
							КодВозвратаДиалога.Нет,
							"Внимание!");
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				УдалитьВременныйФайл(КаталогВыгрузки);
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектДокАДВ = ДокАДВ.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДокРСВ) Тогда
		
			// проверяем на совпадение организаций АДВ и РСВ
			Если ДокАДВ.Организация <> ДокРСВ.Организация Тогда
				УдалитьВременныйФайл(КаталогВыгрузки);
				Сообщить("Организация, указанная в связанном расчете страховых взносов, не совпадает с организацией документа.", СтатусСообщения.Внимание);
				Возврат Неопределено;
			КонецЕсли;
			
			// проверяем на совпадение периодов АДВ и РСВ
			Если НЕ ПериодАДВСоответствуетПериодуАСВ(ДокАДВ, ДокРСВ) Тогда
				УдалитьВременныйФайл(КаталогВыгрузки);
				Сообщить("Период, указанный в связанном расчете страховых взносов, не совпадает с периодом документа.", СтатусСообщения.Внимание);
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		// 
		Результат.Вставить("ВидДокумента", "ПередачаСЗВ4вПФР");
		
		// определяем кодировку файлов
		Если ОбъектДокАДВ.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
			КодировкаФайла = КодировкаТекста.OEM;
		ИначеЕсли ОбъектДокАДВ.ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
			КодировкаФайла = КодировкаТекста.ANSI;
		КонецЕсли;
		
		
		// вначале выгружаем АДВ
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДокАДВ, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(ДокАДВ, ОбъектДокАДВ.Год);
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки АДВ-11.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = ДокАДВ;
		
		
		// далее выгружаем СЗВ
		ТипФайлаОтчетности = ?(ОбъектДокАДВ.Год >= 2010, Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ, Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС);
		
		// перебираем и выгружаем пачки
		Для Каждого СтрПачка Из ОбъектДокАДВ.ПачкиДокументов Цикл
			
			ПачкаСсылка = СтрПачка.ДокументПачка;
			
			// получаем объект для вызова экспортного метода выгрузки
			ОбъетПачка = ПачкаСсылка.ПолучитьОбъект();
			
			// вызываем экспортный метод формирования текста выгрузки
			ЕстьОшибки = Ложь;
			ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъетПачка, ЕстьОшибки);
			Если ЕстьОшибки тогда
				УдалитьВременныйФайл(КаталогВыгрузки);
				Возврат Неопределено;
			КонецЕсли;
			
			// вызываем метод формирования имени файла
			ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(ПачкаСсылка, ОбъетПачка.Год);
			Если ИмяФайлаВыгрузки = "" Тогда
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки пачки №" + СтрПачка.НомерСтроки + "(""" + ПачкаСсылка + """).");
				УдалитьВременныйФайл(КаталогВыгрузки);
				Возврат Неопределено;
			КонецЕсли;
			
			// сохраняем текст выгрузки в каталог выгрузки
			ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
			ОбъектЗапись.Записать(ТекстВыгрузки);
			ОбъектЗапись.Закрыть();
			
			// определяем строку в таблице выгруженных файлов
			НовСтр = ТаблицаФайлов.Добавить();
			НовСтр.Тип = ТипФайлаОтчетности;
			НовСтр.Имя = ИмяФайлаВыгрузки;
			НовСтр.Документ = ПачкаСсылка;
			
		КонецЦикла;
		
		
		// далее выгружаем РСВ
		Если ЗначениеЗаполнено(ДокРСВ) Тогда
			
			ВидОтчета = ДокРСВ.ИсточникОтчета;
			Если ВидОтчета = "РегламентированныйОтчетРСВ1" Тогда
				ТипФайлаОтчетности = Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
			Иначе
				УдалитьВременныйФайл(КаталогВыгрузки);
				Предупреждение("Некорректный тип отчета, содержащего расчет страховых взносов.");
				Возврат Неопределено;
			КонецЕсли;
			
			// выгружаем отчет
			ТекстВыгрузки = "";
			ИмяФайлаВыгрузки = "";
			РезультатВыгрузки = ВыгрузитьРегламентированныйОтчет(ДокРСВ, Истина, ТекстВыгрузки, ИмяФайлаВыгрузки);
			Если НЕ РезультатВыгрузки Тогда
				Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
				Возврат Неопределено;
			КонецЕсли;
			
			// сохраняем текст выгрузки в каталог выгрузки
			ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаТекста.ANSI);
			ОбъектЗапись.Записать(ТекстВыгрузки);
			ОбъектЗапись.Закрыть();
			
			// определяем строку в таблице выгруженных файлов
			НовСтр = ТаблицаФайлов.Добавить();
			НовСтр.Тип = ТипФайлаОтчетности;
			НовСтр.Имя = ИмяФайлаВыгрузки;
			НовСтр.Документ = ДокРСВ;
			
			ДополнительныйДокумент = ДокРСВ;
			
		КонецЕсли;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "ПередачаДСВвПФР" Тогда
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		Результат.Вставить("ВидДокумента", ИмяМетаданныхДокумента);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДок, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Док, Год(ОбъектДок.Дата));
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "СведенияОВзносахИСтраховомСтажеСПВ1" Тогда
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		Результат.Вставить("ВидДокумента", ИмяМетаданныхДокумента);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДок, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Док, Год(ОбъектДок.ОтчетныйПериод));
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "АнкетаЗастрахованногоЛица" Тогда
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		Результат.Вставить("ВидДокумента", ИмяМетаданныхДокумента);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДок, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Док, Год(ОбъектДок.Дата));
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства" Тогда
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		Результат.Вставить("ВидДокумента", ИмяМетаданныхДокумента);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДок, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Док, Год(ОбъектДок.Дата));
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "РеестрДСВ3" Тогда
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		Результат.Вставить("ВидДокумента", ИмяМетаданныхДокумента);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДок, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Док, Год(ОбъектДок.Дата));
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.РеестрДСВ;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК" Тогда
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		Результат.Вставить("ВидДокумента", ИмяМетаданныхДокумента);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// вызываем экспортный метод формирования текста выгрузки
		ЕстьОшибки = Ложь;
		ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ОбъектДок, ЕстьОшибки);
		Если ЕстьОшибки тогда
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// вызываем метод формирования имени файла
		ИмяФайлаВыгрузки = ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Док, Год(ОбъектДок.Дата));
		Если ИмяФайлаВыгрузки = "" Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось сформировать имя файла выгрузки.");
			УдалитьВременныйФайл(КаталогВыгрузки);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	ИначеЕсли ИмяМетаданныхДокумента = "РегламентированныйОтчет" Тогда
		
		Если Док.ИсточникОтчета = "РегламентированныйОтчетРСВ1" Тогда
			
			Ответ = Вопрос("В соответствии с требованиями Пенсионного фонда Российской Федерации представление файлов отчетности
							|в электронной форме по страховым взносам и персонифицированному учету с 1 апреля 2011 года,
							|включая отчетность за первый квартал 2011 года, в обязательном порядке осуществляется одновременно и
							|одним отправлением.
							|
							|Используйте форму документа ""Опись сведений АДВ-6-2"" для совместной отправки.
							|
							|Продолжить действие БЕЗ ПРИВЯЗКИ к отчетности по персонифицированному учету (не рекомендуется)?",
							РежимДиалогаВопрос.ДаНет,
							,
							КодВозвратаДиалога.Нет,
							"Внимание!");
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		ОбъектДок = Док.ПолучитьОбъект();
		
		ВидОтчета = Док.ИсточникОтчета;
		Результат.Вставить("ВидДокумента", ВидОтчета);
		
		КодировкаФайла = КодировкаТекста.ANSI;
		
		// выгружаем отчет
		ТекстВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		РезультатВыгрузки = ВыгрузитьРегламентированныйОтчет(Док, ФормаОтчета = Неопределено, ТекстВыгрузки, ИмяФайлаВыгрузки);
		Если НЕ РезультатВыгрузки Тогда
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		
		// сохраняем текст выгрузки в каталог выгрузки
		ОбъектЗапись = Новый ЗаписьТекста(КаталогВыгрузки + ИмяФайлаВыгрузки, КодировкаФайла);
		ОбъектЗапись.Записать(ТекстВыгрузки);
		ОбъектЗапись.Закрыть();
		
		// определяем тип файла отчетности
		Если ВидОтчета = "РегламентированныйОтчетРСВ1" ИЛИ ВидОтчета = "РегламентированныйОтчетРСВ2" ИЛИ ВидОтчета = "РегламентированныйОтчетРВ3" Тогда
			ТипФайлаОтчетности = Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ;
		Иначе
			Предупреждение("Отправка отчетов данного типа не поддерживается.");
			Возврат Неопределено;
		КонецЕсли;
		
		// определяем строку в таблице выгруженных файлов
		НовСтр = ТаблицаФайлов.Добавить();
		НовСтр.Тип = ТипФайлаОтчетности;
		НовСтр.Имя = ИмяФайлаВыгрузки;
		НовСтр.Документ = Док;
		
		Результат.Вставить("Файлы", ТаблицаФайлов);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьВременныйКаталог() Экспорт
	
	ИмяКаталога = КаталогВременныхФайлов();
	Если Прав(ИмяКаталога, 1) <> "\" Тогда
		ИмяКаталога = ИмяКаталога + "\";
	КонецЕсли;
	
	ИмяКаталога = ИмяКаталога + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ИмяКаталога);
	
	Возврат ИмяКаталога;
	
КонецФункции

Функция ЗаархивироватьФайлПакета(ПолноеИмяФайлаПакета, ИмяФайлаАрхива = Неопределено)
	
	ОбъектФайлПакета = Новый Файл(ПолноеИмяФайлаПакета);
	КаталогФайлаПакета = ОбъектФайлПакета.Путь;
	Если Прав(КаталогФайлаПакета, 1) = "\" Тогда
		КаталогФайлаПакета = КаталогФайлаПакета + "\";
	КонецЕсли;
	
	Если ИмяФайлаАрхива = Неопределено Тогда
		ИмяФайлаАрхива = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	КонецЕсли;
	
	// !!! перед помещением в архив переименовываем файл
	Если нрег(ОбъектФайлПакета.Имя) <> нрег(ИмяФайлаАрхива) Тогда
		ПолноеИмяАрхивируемогоФайла = КаталогВременныхФайлов() + ИмяФайлаАрхива;
		КопироватьФайл(ПолноеИмяФайлаПакета, ПолноеИмяАрхивируемогоФайла);
		АрхивируемыйФайлВременный = Истина;
	Иначе
		ПолноеИмяАрхивируемогоФайла = ПолноеИмяФайлаПакета;
		АрхивируемыйФайлВременный = Ложь;
	КонецЕсли;
	
	Попытка
		ОбъектЗаписьЗИП = Новый ЗаписьZipФайла(КаталогФайлаПакета + ИмяФайлаАрхива, , , , УровеньСжатияZIP.Максимальный);
		ОбъектЗаписьЗИП.Добавить(ПолноеИмяАрхивируемогоФайла);
		ОбъектЗаписьЗИП.Записать();
		ОшибкаАрхивирования = Ложь;
	Исключение
		ОшибкаАрхивирования = Истина;
	КонецПопытки;
	
	Если АрхивируемыйФайлВременный Тогда
		УдалитьВременныйФайл(ПолноеИмяАрхивируемогоФайла);
	КонецЕсли;
	
	Если ОшибкаАрхивирования Тогда
		Сообщить("Ошибка создания архива: " + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяФайлаАрхива;
	
КонецФункции

Функция ПодписатьФайлPKCS7(СертификатПодписанта, ФайлДанных, Знач ФайлПодписи = Неопределено) Экспорт
	
	Если ФайлПодписи = Неопределено Тогда
		ФайлПодписи = КаталогВременныхФайлов() + СгенерироватьИмяФайлаДокументаВСоставеПакета();
	КонецЕсли;
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Крипт.PKCS7Подписать(СертификатПодписанта.СерийныйНомер, СертификатПодписанта.Поставщик, ФайлДанных, ФайлПодписи);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ФайлПодписи;
	
КонецФункции

Функция СформироватьОписаниеСведений(Сообщение, Вложения, КороткоеИмяФайла = Неопределено)
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	// добавляем узел "датаВремяОтправки"
	УзелДатаВремяОтправки = ДобавитьУзелXML(Дерево, "датаВремяОтправки", , XMLСтрока(ТекущаяДата()));
	
	// добавляем узел "регистрационныйНомерОрганизации"
	УзелРегистрационныйНомерОрганизации = ДобавитьУзелXML(Дерево, "регистрационныйНомерОрганизации", , СокрЛП(Сообщение.Отправитель.РегистрационныйНомерПФР));
	
	// добавляем узел "описаниеПачек"
	УзелОписаниеПачек = ДобавитьУзелXML(Дерево, "описаниеПачек");
	
	// добавляем информацию о документах пакета
	Для Каждого ДокументПакета Из Вложения Цикл
	
		// добавляем узел "пачка"
		УзелПачка = ДобавитьУзелXML(УзелОписаниеПачек, "пачка");
		
		// добавляем узел "идентификаторДокумента"
		УзелИдентификаторДокумента = ДобавитьУзелXML(УзелПачка, "идентификаторДокумента", , ДокументПакета.Идентификатор);
		
		// добавляем узел "имяФайла"
		УзелИмяФайла = ДобавитьУзелXML(УзелПачка, "имяФайла", , ДокументПакета.ИмяФайла);
		
	КонецЦикла;
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "описаниеСведений");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция ОпределитьСвойстваПодписиПодТеломПисьма(Вложения)
	
	// находим тело письма
	СтрПисьмо = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо, "Тип");
	Если СтрПисьмо = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// находим подпись под телом письма
	СтрПодписьПодПисьмом = Вложения.Найти(СтрПисьмо.ИмяФайла, "ЭЦПИмяПодписанногоФайла");
	Если СтрПодписьПодПисьмом = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// возвращаем идентификатор документа подписи под телом письма
	Возврат СтрПодписьПодПисьмом;
	
КонецФункции

Функция СформироватьОписаниеПисьма(Сообщение, Вложения, КороткоеИмяФайла = Неопределено)
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	// добавляем узел "тема"
	УзелТема = ДобавитьУзелXML(Дерево, "тема", , XMLСтрока(СокрЛП(Сообщение.ЦиклОбмена.Предмет.Наименование)));
	
	// добавляем узел "датаВремяОтправки"
	УзелДатаВремяОтправки = ДобавитьУзелXML(Дерево, "датаВремяОтправки", , XMLСтрока(ТекущаяДата()));
	
	// добавляем узел "идентификаторПисьма"
	УзелИдентификаторПисьма = ДобавитьУзелXML(Дерево, "идентификаторПисьма", , XMLСтрока(Сообщение.ЦиклОбмена.Предмет.Идентификатор));
	
	// добавляем узел "ответНаПисьмо"
	ИдентификаторОснования = Сообщение.ЦиклОбмена.Предмет.ИдентификаторОснования;
	Если ЗначениеЗаполнено(ИдентификаторОснования) Тогда
		УзелОтветНаПисьмо = ДобавитьУзелXML(Дерево, "ответНаПисьмо", , XMLСтрока(ИдентификаторОснования));
	КонецЕсли;
	
	// добавляем узел "категорияПисьма"
	СтрКатегорияПисьма = ?(Сообщение.ЦиклОбмена.Предмет.Ретроконверсия, "Ретроконверсия", "Рассылка");
	УзелКатегорияПисьма = ДобавитьУзелXML(Дерево, "категорияПисьма", , XMLСтрока(СтрКатегорияПисьма));
	
	// добавляем узел "телоПисьма"
	УзелТелоПисьма = ДобавитьУзелXML(Дерево, "телоПисьма");
	
	// добавляем подузел "ИдентификаторДокумента"
	СтрПисьмо = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо, "Тип");
	Если СтрПисьмо = Неопределено Тогда
		Сообщить("Ошибка формирования описания письма: не удалось обнаружить документ с телом письма.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	УзелИдентификаторДокумента = ДобавитьУзелXML(УзелТелоПисьма, "идентификаторДокумента", , СтрПисьмо.Идентификатор);
	
	// ищем подпись под телом письма
	СвойстваПодписиПодТеломПисьма = ОпределитьСвойстваПодписиПодТеломПисьма(Вложения);
	Если СвойстваПодписиПодТеломПисьма = Неопределено Тогда
		Сообщить("Ошибка определения свойств подписи под телом письма при формировании описания письма из состава пакета.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// добавляем подузел "подписи"
	УзелПодписи = ДобавитьУзелXML(УзелТелоПисьма, "подписи");
	
	// добавляем узел "подпись"
	ДанныеПодписиПодТеломПисьма = ДвоичныеДанные64(СвойстваПодписиПодТеломПисьма.Данные); // !!!
	УзелПодпись = ДобавитьУзелXML(УзелПодписи, "подпись", , ДанныеПодписиПодТеломПисьма);
	
	// добавляем атрибут "роль"
	УзелАтрибутРоль = ДобавитьУзелXML(УзелПодпись, "роль", Истина, "руководитель");
	
	// добавляем узел "списокПриложений"
	УзелСписокПриложений = ДобавитьУзелXML(Дерево, "списокПриложений");
	
	// выгружаем описание приложений
	ПриложенияКПисьму = Вложения.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение));
	Для Каждого ПриложениеКПисьму Из ПриложенияКПисьму Цикл
		
		// добавляем узел "приложение"
		УзелПриложение = ДобавитьУзелXML(УзелСписокПриложений, "приложение");
		
		// добавляем узел "идентификаторДокумента"
		УзелИдентификаторДокумента = ДобавитьУзелXML(УзелПриложение, "идентификаторДокумента", , ПриложениеКПисьму.Идентификатор);
		
		// добавляем узел "имяФайла"
		УзелИмяФайла = ДобавитьУзелXML(УзелПриложение, "имяФайла", , ПриложениеКПисьму.ИмяФайла);
		
		// добавляем узел "подписи"
		УзелПодписи = ДобавитьУзелXML(УзелПриложение, "подписи");
		
		// добавляем узлы "подпись"
		ПодписиПодДокументом = Вложения.НайтиСтроки(Новый Структура("ЭЦПИмяПодписанногоФайла", ПриложениеКПисьму.ИмяФайла));
		Для Каждого ПодписьПодДокументом Из ПодписиПодДокументом Цикл
			
			// добавляем узел "подпись"
			УзелПодпись = ДобавитьУзелXML(УзелПодписи, "подпись", , ДвоичныеДанные64(ПодписьПодДокументом.Данные));
			
			// добавляем узел "роль"
			ДобавитьУзелXML(УзелПодпись, "роль", Истина, "руководитель");
			
		КонецЦикла;
		
	КонецЦикла;
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "описаниеПисьма");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция СформироватьТранспортнуюИнформацию(Сообщение, СертификатBase64, КороткоеИмяФайла = Неопределено)
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	// добавляем узел "датаВремяОтправки"
	УзелДатаВремяОтправки = ДобавитьУзелXML(Дерево, "датаВремяОтправки", , XMLСтрока(ТекущаяДата()));
	
	// добавляем узел "сертификатПолучателя"
	УзелСертификатПолучателя = ДобавитьУзелXML(Дерево, "сертификатПолучателя", , XMLСтрока(СертификатBase64));
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "транспортнаяИнформация");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция ДвоичныеДанные64(Данные)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	Попытка
		Если ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			Данные.Записать(ВремФайл);
		Иначе
			Данные.Получить().Записать(ВремФайл);
		КонецЕсли;
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
	ДвДанные.Прочитать(ВремФайл);
	ДвДанные.ТекущаяПозиция = 0;
	СтрокаРезультат = ДвДанные.ПолучитьСтрокуBase64();
	
	УдалитьВременныйФайл(ВремФайл);
	
	Возврат СтрокаРезультат;
	
КонецФункции

Функция ПолучитьКаталогВременныхФайлов()
	
	ВременныйКаталог = КаталогВременныхФайлов();
	Возврат ?(Прав(ВременныйКаталог, 1) = "\", ВременныйКаталог, ВременныйКаталог + "\");
	
КонецФункции

Функция СгенерироватьИмяФайлаДокументаВСоставеПакета()
	
	Возврат СгенерироватьUUID() + ".bin";
	
КонецФункции

Функция СоздатьДеревоXML() Экспорт
	
	ДеревоXML = Новый ДеревоЗначений;
	ДеревоXML.Колонки.Добавить("Код");
	ДеревоXML.Колонки.Добавить("Тип");
	ДеревоXML.Колонки.Добавить("Значение");
	ДеревоXML.Колонки.Добавить("ЭтоCDATA");
	Возврат ДеревоXML;
	
КонецФункции

Функция ДобавитьУзелXML(Родитель = Неопределено, Код, ЭтоАтрибут = Ложь, Значение = Неопределено, Необязательный = Ложь, ЭтоCDATA = Ложь) Экспорт
	
	Если Необязательный И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовСтр = Родитель.Строки.Добавить();
	
	НовСтр.Код = Код;
	НовСтр.Значение = Значение;
	Если ТипЗнч(ЭтоАтрибут) = Тип("Булево") Тогда
		НовСтр.Тип = ?(ЭтоАтрибут, "А", "Э");
	Иначе
		НовСтр.Тип = ЭтоАтрибут;
	КонецЕсли;
	
	ТипЗнчРодитель = ТипЗнч(Родитель);
	Если (ТипЗнчРодитель = Тип("ДеревоЗначений") И Родитель.Колонки.Найти("ЭтоCDATA") <> Неопределено)
	ИЛИ (ТипЗнчРодитель = Тип("СтрокаДереваЗначений") И Родитель.Владелец().Колонки.Найти("ЭтоCDATA") <> Неопределено) Тогда
		НовСтр.ЭтоCDATA = ЭтоCDATA;
	КонецЕсли;
	
	Возврат НовСтр;
	
КонецФункции

Функция ЗаписатьXMLВФайл(ТекстДляЗаписи, ФайлДляЗаписи) Экспорт
	
	Попытка
		ПотокЗаписи = Новый ЗаписьТекста(ФайлДляЗаписи, КодировкаТекста.ANSI, , , Символы.ПС);
		ПотокЗаписи.Записать(ТекстДляЗаписи);
		ПотокЗаписи.Закрыть();
	Исключение
		Сообщить("Не удалось записать файл XML:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	Конецпопытки;
	Возврат Истина;
	
КонецФункции

Функция ВыгрузитьДеревоВXML_ПФР(ДеревоВыгрузки, ИмяКорневогоЭлемента = Неопределено)
	
	ПотокXML = СоздатьНовыйПотокXML_ПФР();
	ЗаписатьУзелДереваВXML_ПФР(ДеревоВыгрузки, ПотокXML, ИмяКорневогоЭлемента);
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции

Функция СоздатьНовыйПотокXML_ПФР()
	
	ПотокXML = Новый ЗаписьXML();
	ПотокXML.УстановитьСтроку("UTF-8");
	ПотокXML.ЗаписатьОбъявлениеXML();
	ПотокXML.Отступ = Истина;
	Возврат ПотокXML;
	
КонецФункции

Функция ЗаписатьУзелДереваВXML_ПФР(СтрокаДерева, ПотокXML, ИмяКорневогоЭлемента)
	
	Если ТипЗнч(СтрокаДерева) = Тип("ДеревоЗначений") Тогда
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьНачалоЭлемента(ИмяКорневогоЭлемента);
		КонецЕсли;
		Для каждого Стр Из СтрокаДерева.Строки Цикл
			ЗаписатьУзелДереваВXML_ПФР(Стр, ПотокXML, ИмяКорневогоЭлемента);
		КонецЦикла;
		Если ЗначениеЗаполнено(ИмяКорневогоЭлемента) Тогда
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если СтрокаДерева.Тип = "А" ИЛИ СтрокаДерева.Тип = "A" Тогда 
			ПотокXML.ЗаписатьАтрибут(СтрокаДерева.Код, Строка(СтрокаДерева.Значение));
		Иначе
			ПотокXML.ЗаписатьНачалоЭлемента(СтрокаДерева.Код);
			Для каждого Лист из СтрокаДерева.Строки Цикл
				ЗаписатьУзелДереваВXML_ПФР(Лист, ПотокXML, ИмяКорневогоЭлемента);
			КонецЦикла;
			ПотокXML.ЗаписатьТекст(Строка(СтрокаДерева.Значение));
			ПотокXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

КонецФункции

Функция ИдентификаторПоТипуДокументаПакета(ТипДокумента)
	
	Если ТипЗнч(ТипДокумента) = Тип("Строка") Тогда
		Возврат СокрЛП(ТипДокумента);
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыФайловОтчетностиПФР.ПачкаАДВ Тогда
		Возврат "пачкаАДВ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыФайловОтчетностиПФР.ПачкаИС Тогда
		Возврат "пачкаИС";
	ИначеЕсли ТипДокумента = Перечисления.ТипыФайловОтчетностиПФР.ПачкаДСВ Тогда
		Возврат "пачкаДСВ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыФайловОтчетностиПФР.РеестрДСВ Тогда
		Возврат "реестрДСВ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыФайловОтчетностиПФР.ПачкаРСВ Тогда
		Возврат "пачкаРСВ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыФайловОтчетностиПФР.ПачкаСВВ Тогда
		Возврат "пачкаСВВ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР Тогда
		Возврат "описаниеСведений";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР Тогда
		Возврат "протокол";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР Тогда
		Возврат "протоколПриложение";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо Тогда
		Возврат "письмо";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение Тогда
		Возврат "письмоПриложение";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма Тогда
		Возврат "описаниеПисьма";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация Тогда
		Возврат "транспортнаяИнформация";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма Тогда
		Возврат "подтверждениеПолучения";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности Тогда
		Возврат "декларация";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений Тогда
		Возврат "описание";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
		Возврат "доверенность";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки Тогда
		Возврат "подтверждениеДатыОтправки";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе Тогда
		Возврат "уведомлениеОбОтказе";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме Тогда
		Возврат "квитанцияОПриеме";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении Тогда
		Возврат "уведомлениеОбУточнении";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе Тогда
		Возврат "извещениеОВводе";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении Тогда
		Возврат "извещениеОПолучении";
		
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ Тогда
		Возврат "описание";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ Тогда
		Возврат "форма2НДФЛ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ Тогда
		Возврат "протоколПриема2НДФЛ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ Тогда
		Возврат "реестрПринятыхДокументов";
		
	// обращение
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение Тогда
		Возврат "обращение";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка Тогда
		Возврат "описание";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение Тогда
		Возврат "приложение";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения Тогда
		Возврат "подтверждениеДатыПолучения";
		
	// запрос
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос Тогда
		Возврат "запрос";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ Тогда
		Возврат "ответ";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос Тогда
		Возврат "описание";
	
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция ОпределитьТипСКЗИ()
	
	ПараметрыКриптографии = ПолучитьПараметрыКриптографии();
	Если Найти(нрег(ПараметрыКриптографии["ИмяКриптопровайдера"]), нрег("Infotecs")) <> 0 Тогда
		Возврат "Домен-К";
	Иначе
		Возврат "Крипто-Про";
	КонецЕсли;
	
КонецФункции

Функция РегистрационныйНомерПФРСоответствуетТребованиям(РегистрационныйНомерПФР)
	
	Возврат СтрокаСоответствуетШаблону(СокрЛП(РегистрационныйНомерПФР), "№№№-№№№-№№№№№№");
	
КонецФункции

Функция КодОрганаПФРСоответствуетТребованиям(КодОрганаПФР)
	
	Возврат СтрокаСоответствуетШаблону(СокрЛП(КодОрганаПФР), "№№№-№№№");
	
КонецФункции

Функция СтрокаСоответствуетШаблону(Стр, СтрШаблон)
	
	ДлинаСтроки = СтрДлина(Стр);
	ДлинаШаблона = СтрДлина(СтрШаблон);
	Если ДлинаСтроки <> ДлинаШаблона Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд =1 По ДлинаШаблона Цикл
		
		ТекСимволШаблона = Сред(СтрШаблон, Инд ,1);
		ТекСимволСтроки = Сред(Стр, Инд, 1);
		
		Если ТекСимволШаблона = "№" Тогда
			Если Найти("1234567890", ТекСимволСтроки) = 0 Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ТекСимволШаблона <> ТекСимволСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ПоказатьТекст(ИмяФайла, Содержимое) Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(Содержимое);
	Текст.ТолькоПросмотр = Истина;
	Текст.Показать(ИмяФайла + " - просмотр", ИмяФайла);
	
КонецПроцедуры

Процедура ПоказатьHTML(ИмяФайла, Содержимое) Экспорт
	
	ФормаПросмотраHTML = ПолучитьФорму("ПросмотрHTML");
	ФормаПросмотраHTML.ИмяФайла = ИмяФайла;
	ФормаПросмотраHTML.Содержимое = Содержимое;
	ФормаПросмотраHTML.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьXMLИзФайла(ИмяФайлаСодержимого, ИсходноеИмяФайла) Экспорт
	
	ФормаПросмотраXML = ПолучитьФорму("ПросмотрHTML");
	ФормаПросмотраXML.ИмяФайла = ИсходноеИмяФайла;
	ФормаПросмотраXML.ИмяФайлаСодержимого = ИмяФайлаСодержимого;
	ФормаПросмотраXML.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьТекстИзФайла(ИмяФайлаСодержимого, ИсходноеИмяФайла, КодировкаТекста = Неопределено) Экспорт
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяФайлаСодержимого, КодировкаТекста);
	Текст.ТолькоПросмотр = Истина;
	Текст.Показать(ИсходноеИмяФайла + " - просмотр", ИсходноеИмяФайла);
	
КонецПроцедуры

Функция ВКаталогеПрисутствуютФайлыСУказаннымиИменами(Каталог, ИменаФайлов) Экспорт
	
	// приводим указанные имена файлов к нижнему регистру для сравнения
	нрегИменаФайлов = Новый Массив;
	Для Каждого ИмяФайла Из ИменаФайлов Цикл
		нрегИменаФайлов.Добавить(нрег(ИмяФайла));
	КонецЦикла;
	
	// перебираем файлы в каталоге
	ФайлыКаталога = НайтиФайлы(Каталог, "*.*");
	Для Каждого ФайлКаталога Из ФайлыКаталога Цикл
		Если нрегИменаФайлов.Найти(ФайлКаталога.ПолноеИмя) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ПоказатьПриложениеПФР(СтрВложение) Экспорт
	
	Если СтрВложение.ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.html Тогда
		ПоказатьHTML(СтрВложение.ИмяФайла, СтрВложение.Данные);
	Иначе
		ВременныйКаталог = СоздатьВременныйКаталог();
		ИмяФайлаДокумента = ПолучитьИмяФайлаВложенияСУчетомТипаСодержимого(СтрВложение);
		ПолноеИмяФайлаПриложения = ВременныйКаталог + ИмяФайлаДокумента;
		СтрВложение.Данные.Получить().Записать(ПолноеИмяФайлаПриложения);
		ЗапуститьПриложение(ПолноеИмяФайлаПриложения);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИмяФайлаВложенияСУчетомТипаСодержимого(СтрВложение)
	
	ИсходноеИмяФайла = СокрЛП(СтрВложение.ИмяФайла);
	
	ДопРасширение = РасширениеФайлаПоТипуСодержимого(СтрВложение.ТипСодержимогоФайла);
	Если ЗначениеЗаполнено(ДопРасширение) Тогда
		ИсходноеИмяФайла = ИсходноеИмяФайла + "." + ДопРасширение;
	КонецЕсли;
	
	Возврат ИсходноеИмяФайла;
	
КонецФункции

Функция РасширениеФайлаПоТипуСодержимого(ТипСодержимого)
	
	Если ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.html Тогда
		Возврат "html";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml Тогда
		Возврат "xml";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Текст1251 Тогда
		Возврат "txt";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Текст866 Тогда
		Возврат "txt";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.pdf Тогда
		Возврат "pdf";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.rtf Тогда
		Возврат "rtf";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.tiff Тогда
		Возврат "tiff";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.jpeg Тогда
		Возврат "jpeg";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.ms_word Тогда
		Возврат "doc";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.ms_excel Тогда
		Возврат "xls";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.odf_text Тогда
		Возврат "odt";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet Тогда
		Возврат "ods";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.oxml_word Тогда
		Возврат "docx";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet Тогда
		Возврат "xlsx";
	ИначеЕсли ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Неизвестный
	ИЛИ ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка() Тогда
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция СоздатьОтветНаПисьмо(ОснованиеСсылка) Экспорт
	
	НовоеПисьмо = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
	Попытка
		НовоеПисьмо.Заполнить(ОснованиеСсылка);
	Исключение
		Сообщить("Не удалось создать ответ:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	Если НовоеПисьмо.ОшибкаЗаполнения <> Истина Тогда
		Возврат НовоеПисьмо;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьСписокПолученныхПисем(Письмо)
	
	Если ПолученныеПисьма = Неопределено Тогда
		ПолученныеПисьма = Новый Массив;
	КонецЕсли;
	
	ПолученныеПисьма.Добавить(Письмо);
	
КонецПроцедуры

Процедура ПометитьПисьмоКакПрочитанное(Письмо) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПолученныеПисьма) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексПисьмаВМассивеПолученных = ПолученныеПисьма.Найти(Письмо);
	Если ИндексПисьмаВМассивеПолученных <> Неопределено Тогда
		ПолученныеПисьма.Удалить(ИндексПисьмаВМассивеПолученных);
		Оповестить("Чтение письма", Письмо);
	КонецЕсли;
	
КонецПроцедуры

// Только для ПФР. Для ФНС определение производится по теме сообщения.
// 
Функция ОпределитьТипСообщенияПоДеревуОписанияПакета(ДеревоОписанияПакета)
	
	// ищем ключевые узлы
	УзлыТипДокументооборота = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "типДокументооборота", "А"), Истина);
	УзлыТипТранзакции = ДеревоОписанияПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "типТранзакции", "А"), Истина);
	Если УзлыТипДокументооборота.Количество() = 0 ИЛИ УзлыТипТранзакции.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелТипДокументооборота = УзлыТипДокументооборота[0];
	УзелТипТранзакции = УзлыТипТранзакции[0];
	
	// получаем значения узлов
	ТипДокументооборота = СокрЛП(УзелТипДокументооборота.Значение);
	ТипТранзакции = СокрЛП(УзелТипТранзакции.Значение);
	
	// анализируем значения
	Если ТипДокументооборота = "СведенияПФР" Тогда
		Если ТипТранзакции = "сведения" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
		ИначеЕсли ТипТранзакции = "подтверждениеПолучения" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР;
		ИначеЕсли ТипТранзакции = "протокол" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколПФР;
		ИначеЕсли ТипТранзакции = "протоколКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "Письмо" Тогда
		Если ТипТранзакции = "письмо" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР;
		ИначеЕсли ТипТранзакции = "письмоКвитанция" Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР;
		КонецЕсли;
	ИначеЕсли ТипДокументооборота = "ОшибкаОбработкиПакета" Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьТипПервичногоСообщенияПоЦиклуОбмена(ЦиклОбмена)
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		Если ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
		Иначе
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность;
		КонецЕсли;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросИОН;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОтчетностьПФР Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Рассылка Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
	Иначе
		Возврат Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТЫ С ПОДПИСЯМИ
//

Функция ПодписатьСообщениеФНС141(ТранспортноеСообщение, ОтветственноеЛицо, ИмяСгенерированногоФайлаЭЦП = Неопределено) Экспорт
	
	// объявляем соответствие типов ДИВ суффиксам файлов ЭЦП
	ТипСообщения = ТранспортноеСообщение.Тип;
	СуффиксыИменФайловЭЦП = Новый Соответствие;
	СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, ".sgn");
	СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке, ".nlp.sgn");
	
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности Тогда
		СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, ".sgn");
	Иначе
		СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля, ".nlp.sgn");
	КонецЕсли;
	
	СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента, ".nlp.sgn");
	
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика Тогда
		СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент, ".sgn");
		СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента, ".sgn");
	Иначе
		СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент, ".nlp.sgn");
		СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента, ".nlp.sgn");
	КонецЕсли;
	
	СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН, ".sgn");
	СуффиксыИменФайловЭЦП.Вставить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН, ".nlp.sgn");
	
	// формируем запрос для получения подписываемых файлов
	Если ТипСообщения = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                              |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
		                              |	СодержимоеТранспортныхКонтейнеров.Данные,
		                              |	СодержимоеТранспортныхКонтейнеров.Тип
		                              |ИЗ
		                              |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                              |ГДЕ
		                              |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                              |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип1)
		                              |
		                              |ОБЪЕДИНИТЬ ВСЕ
		                              |
		                              |ВЫБРАТЬ
		                              |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
		                              |	СодержимоеТранспортныхКонтейнеров.Данные,
		                              |	СодержимоеТранспортныхКонтейнеров.Тип
		                              |ИЗ
		                              |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                              |ГДЕ
		                              |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщениеОснование
		                              |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип2)";
		
		ТипыСодержимого1 = Новый Массив;
		ТипыСодержимого1.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента);
		ТипыСодержимого1.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента);
		Запрос.УстановитьПараметр("Тип1", ТипыСодержимого1);
		Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
		
		ТипыСодержимого2 = Новый Массив;
		ТипыСодержимого2.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
		Запрос.УстановитьПараметр("Тип2", ТипыСодержимого2);
		Запрос.УстановитьПараметр("ТранспортноеСообщениеОснование", ТранспортноеСообщение.Основание);
		
	Иначе
		
		ВыбиратьТолькоПервый = (ТранспортноеСообщение.Тип <> Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО
								И ТранспортноеСообщение.Тип <> Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика
								И ТранспортноеСообщение.Тип <> Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО);
		
		Запрос = Новый Запрос;
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ?(ВыбиратьТолькоПервый, " ПЕРВЫЕ 1", "") + "
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
		                      |	СодержимоеТранспортныхКонтейнеров.Данные,
		                      |	СодержимоеТранспортныхКонтейнеров.Тип
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип)";
		Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
		Запрос.УстановитьПараметр("Тип", ТипыСодержимого);
		
	КонецЕсли;
	
	// цикл по подписываемым файлам
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОсновнойФайл = Выборка.Данные;
		ИмяОсновногоФайла = Выборка.ИмяФайла;
		ТипОсновногоФайла = Выборка.Тип;
		
		Если НЕ ЗначениеЗаполнено(ОсновнойФайл) Тогда
			Продолжить;
		КонецЕсли;
		
		СуффиксИмениФайлаЭЦП = СуффиксыИменФайловЭЦП[ТипОсновногоФайла];
		
		ФайлДИВ = ПолучитьИмяВременногоФайла();
		ОсновнойФайл.Получить().Записать(ФайлДИВ);
		
		// определяем параметры извлечения сертификата
		Если ТипЗнч(ОтветственноеЛицо) = Тип("Структура") Тогда
			Сертификат = ОтветственноеЛицо;
		Иначе
			// определяем сертификат
			Сертификат = ПолучитьСертификат(ТранспортноеСообщение.УчетнаяЗапись, ОтветственноеЛицо);
			Если Сертификат = Неопределено Тогда
				Сообщить("Не удалось определить цифровой сертификат ответственного лица.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ДвДанные = СоздатьОбъектДляРаботыСДвоичнымиДанными();
		Если ДвДанные = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ИндексПарыЭЦПСертификат = 0;
		
		Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика
		ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО Тогда
			
			// выбираем все подписи и сертификаты
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
			                      |	СодержимоеТранспортныхКонтейнеров.Тип
			                      |ИЗ
			                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
			                      |ГДЕ
			                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
			                      |	И (СодержимоеТранспортныхКонтейнеров.Тип = &ТипСертификат
			                      |			ИЛИ (СодержимоеТранспортныхКонтейнеров.Тип = &ТипЭЦП
			                      |				И СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ИмяФайла))");
			Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
			Запрос.УстановитьПараметр("ИмяФайла", ИмяОсновногоФайла + ".nlp.sgn" + "%");
			Запрос.УстановитьПараметр("ТипСертификат", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат);
			Запрос.УстановитьПараметр("ТипЭЦП", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			
			ТаблФайлы = Запрос.Выполнить().Выгрузить();
			
			// ищем сертификат с соответствующим отпечатком
			СтрИндексСертификата = Неопределено;
			Для Каждого ТаблФайл Из ТаблФайлы Цикл
				Если ТаблФайл.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат
				И ВРЕГ(Лев(ТаблФайл.ИмяФайла, СтрДлина(Сертификат.Отпечаток))) = ВРЕГ(Сертификат.Отпечаток) Тогда
					СтрКлюч = ".cer";
					ВхождениеКлюча = Найти(нрег(ТаблФайл.ИмяФайла), СтрКлюч);
					Если ВхождениеКлюча <> 0 Тогда
						СтрИндексСертификата = Сред(ТаблФайл.ИмяФайла, ВхождениеКлюча + СтрДлина(СтрКлюч));
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// если сертификат найден, то находим ЭЦП с соответствующим индексом
			Если СтрИндексСертификата <> Неопределено Тогда
				РезультатПоиска = ТаблФайлы.НайтиСтроки(Новый Структура("ИмяФайла, Тип", ИмяОсновногоФайла + СуффиксИмениФайлаЭЦП + СтрИндексСертификата, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись));
				Если РезультатПоиска.Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			
			ПодписьУжеСуществует = Ложь;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
								  |ИЗ
								  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
								  |ГДЕ
								  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
								  |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
			Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат);
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				Выборка2 = РезультатЗапроса.Выбрать();
				Пока Выборка2.Следующий() Цикл
					Если ВРЕГ(Лев(Выборка2.ИмяФайла, СтрДлина(Выборка2.ИмяФайла) - 1)) = ВРЕГ(Сертификат.Отпечаток + ".cer") Тогда
						//Сообщить("Физическое лицо """ + ОтветственноеЛицо + """ уже подписывал(а) указанное транспортное сообщение.", СтатусСообщения.Информация);
						ПодписьУжеСуществует = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПодписьУжеСуществует Тогда
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		Крипт = СоздатьОбъектДляРаботыСКриптографией();
		Если Крипт = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// подписываем
		ДвДанные.Очистить();
		ДвДанные.ДобавитьЧисло(1, 4);// пишем версию (0х0001) и длину отпечатка сертификата (20)
		ДвДанные.ДобавитьЧисло(20, 4);// длина отпечатка сертификата
		ДобавитьОтпечатокКДвоичнымДанным(ДвДанные, Сертификат.Отпечаток);// пишем отпечаток
		ИмяВладельцаСертификата = ПолучитьИмяВладельцаСертификата(Сертификат);
		ДвДанные.ДобавитьЧисло(СтрДлина(ИмяВладельцаСертификата), 4);
		ДвДанные.ДобавитьСтроку(ИмяВладельцаСертификата);
		ФайлСПубличнымКлючом = ПолучитьИмяВременногоФайла("key");
		
		СерийныйНомерСертификата = Сертификат.СерийныйНомер;
		ПоставщикСертификата = Сертификат.Поставщик;
		Попытка
			Крипт.ЭкспортироватьКлюч(СерийныйНомерСертификата,
									ПоставщикСертификата,
									ФайлСПубличнымКлючом,
									ПолучитьПараметрыКриптографии()["АлгоритмШифрования"]);
		Исключение
			Сообщить("Не удалось экспортировать открытый ключ из сертификата ответственного лица.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		
		ОбъектФайл = Новый Файл(ФайлСПубличнымКлючом);
		РазмерФайлаСПубличнымКлючом = ОбъектФайл.Размер();
		ДвДанные.ДобавитьЧисло(РазмерФайлаСПубличнымКлючом, 4);
		ДвДанные.ДобавитьИзФайла(ФайлСПубличнымКлючом, Истина);
		ДвДанные.ДобавитьЧисло(32798, 4);
		ФайлПодписи = ПолучитьИмяВременногоФайла("sgn");
		
		Попытка
			Если НЕ Крипт.ПроверитьСертификат(СерийныйНомерСертификата, ПоставщикСертификата, , ) Тогда
				Сообщить("Не удалось подписать документ в транспортном сообщении """ + ПредставлениеТранспортногоСообщения(ТранспортноеСообщение) + """ сертификатом ответственного лица по причине невалидности сертификата """ + ПредставлениеСертификата(Сертификат) + """!", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		Исключение
			Сообщить("Во время проверки валидности сертификата """ + ПредставлениеСертификата(Сертификат) + """ возникла исключительная ситуация!
			|Возможно, сертификат больше не зарегистрирован в системе или период его действия истек.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		
		Попытка
			Крипт.Подписать(СерийныйНомерСертификата,
							ПоставщикСертификата,
							ФайлДИВ,
							ФайлПодписи,
							ПолучитьПараметрыКриптографии()["АлгоритмХешФункции"]);
		Исключение
			Сообщить("Не удалось подписать документ в транспортном сообщении """ + ПредставлениеТранспортногоСообщения(ТранспортноеСообщение) + """ сертификатом ответственного лица " + ПредставлениеСертификата(Сертификат) + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		
		ОбъектФайлПодписи = Новый Файл(ФайлПодписи);
		РазмерФайлаПодписи = ОбъектФайлПодписи.Размер();
		ДвДанные.ДобавитьЧисло(РазмерФайлаПодписи, 4);
		ДвДанные.ДобавитьИзФайла(ФайлПодписи, Истина);
		ИмяФайлаЭЦП = ПолучитьИмяВременногоФайла();
		ДвДанные.ТекущаяПозиция = 0;
		ДвДанные.Записать(ИмяФайлаЭЦП);
			
		// создаем файл с сертификатом
		ИмяФайлаСертификата = ПолучитьИмяВременногоФайла("cer");
		Попытка
			Крипт.ЭкспортироватьСертификат(СерийныйНомерСертификата, ПоставщикСертификата, ИмяФайлаСертификата, 0);
		Исключение
			Сообщить("Не удалось экспортировать сертификат ответственного лица " + ПредставлениеСертификата(Сертификат) + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецПопытки;
		
		Если НЕ ЗначениеЗаполнено(ИндексПарыЭЦПСертификат) Тогда
		
			ИндексПарыЭЦПСертификат = 1;
			
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла
								  |ИЗ
								  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
								  |ГДЕ
								  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
								  |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип");
			Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
			ЭЦПТС = Запрос.Выполнить().Выгрузить();
			
			Пока ЭЦПТС.Найти(ИмяОсновногоФайла + СуффиксИмениФайлаЭЦП + ИндексПарыЭЦПСертификат, "ИмяФайла") <> Неопределено Цикл
				ИндексПарыЭЦПСертификат = ИндексПарыЭЦПСертификат + 1;
			КонецЦикла;
			
		КонецЕсли;
		
		ИмяСгенерированногоФайлаЭЦП = ИмяФайлаЭЦП;
		ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ИмяСгенерированногоФайлаЭЦП, ИмяОсновногоФайла + СуффиксИмениФайлаЭЦП + ИндексПарыЭЦПСертификат, , ИмяОсновногоФайла, Сертификат.Отпечаток, Перечисления.СтатусыПроверкиЭЦП.Валидна, Истина);
		ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат, ИмяФайлаСертификата, ВРЕГ(Сертификат.Отпечаток) + ".cer" + ИндексПарыЭЦПСертификат);
		
	КонецЦикла; // цикл по подписываемым файлам
	
	Возврат Истина;
	
КонецФункции

Функция ОтправкаРегламентированногоОтчетаВФНС141(Док, Действие = 2, ФормаОтчета = Неопределено, ПараметрыГрупповойОбработки = Неопределено) Экспорт
	
	Организация = Док.Организация;
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ФНС
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ФНС.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем статус отчета
	ЭтоРегламентированныйОтчет = (ТипЗнч(Док) = Тип("ДокументСсылка.РегламентированныйОтчет"));
	Если ЭтоРегламентированныйОтчет Тогда
		
		СтатусОтчета = РегламентированнаяОтчетность.ПолучитьСтатусРегламентированногоОтчета(Док);
		СтатусОтправкиОтчета = ПолучитьСтатусОтправкиОбъекта(Док);
		
		Если СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе Тогда
			
			ТекстСообщения = "Запрещено отправлять отчеты со статусом ""В работе""!
						 |Для отправки подтвердите статус отчета, переведя его в состояние ""Подготовлен"", и повторите попытку.";
			Если ФормаОтчета = Неопределено Тогда
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Возврат Ложь;
			Иначе
				Если ПараметрыГрупповойОбработки = Неопределено Тогда
					Если НЕ ВопросПредупреждение("Запрещено отправлять неподготовленные отчеты!
												|Изменить статус отчета с ""В работе"" на ""Подготовлен""?
												|
												|Подтверждайте изменение статуса только в случае,
												|ЕСЛИ ВЫ УВЕРЕНЫ В ТОМ, ЧТО ОТЧЕТ ГОТОВ К ПРЕДСТАВЛЕНИЮ В НАЛОГОВЫЙ ОРГАН!",
												"Нет, я не уверен(а) в том, что отчет готов к представлению в налоговый орган.",
												"Да, я уверен(а) в том, что отчет готов к представлению в налоговый орган.") Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
					Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
						Возврат Ложь;
					ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
						ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(Док, Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
			КонецЕсли;
			
		ИначеЕсли СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.Сдан Тогда
			
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если Вопрос("Внимание! Вы действительно хотите отправить уже сданный отчет?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить("Судя по статусу, отчет уже представлен в налоговый орган.", СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтатусОтправкиОтчета) Тогда
			
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение("Внимание! Не рекомендуется отправлять отчеты, предыдущая попытка отправки которых еще не завершена!
										|Вы действительно хотите отправить отчет? При этом будет начат новый цикл обмена!",
										"Нет, прервать отправку.",
										"Да, я хочу отправить отчет, предыдущая попытка отправки которого не завершена.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить("Предыдущая попытка отправки отчета не завершена!", СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		// выгружаем
		
		ТекстВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		РезультатВыгрузки = ВыгрузитьРегламентированныйОтчет(Док, ФормаОтчета = Неопределено, ТекстВыгрузки, ИмяФайлаВыгрузки);
		Если НЕ РезультатВыгрузки Тогда
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ОтправляемыйОтчет = Док;
		КодНалоговогоОргана = СокрЛП(ОтправляемыйОтчет.КодИМНС);
		
	Иначе
		
		// получаем электронное представление
		ХранилищеВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		ИзвлечьЭлектронноеПредставлениеИзХранилища(Док, ИмяФайлаВыгрузки, ХранилищеВыгрузки);
		Если ИмяФайлаВыгрузки = "" ИЛИ ХранилищеВыгрузки = Неопределено Тогда
			Сообщить("Не обнаружена информация для отправки!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// пишем электронное представление в файл
		ВремФайл = ПолучитьИмяВременногоФайла();
		ХранилищеВыгрузки.Получить().Записать(ВремФайл);
		ОбъектЧтениеТекста = Новый ЧтениеТекста(ВремФайл, ?(нрег(Прав(ИмяФайлаВыгрузки, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM));
		ТекстВыгрузки = ОбъектЧтениеТекста.Прочитать();
		ОбъектЧтениеТекста.Закрыть();
		УдалитьФайлы(ВремФайл);
		
		ОтправляемыйОтчет = Док;
		ДокВыгрузки = Док;
		КодНалоговогоОргана = СокрЛП(Док.НалоговыйОрган.Код);
		
		НачатьТранзакцию();
		
		// наращиваем счетчики в имени файла выгрузки и в содержимом
		НараститьСчетчикДокументовПриНеобходимости(ТекстВыгрузки, ИмяФайлаВыгрузки, Организация, Док.ДатаОкончания);
		НараститьСчетчикВИмениФайлаВыгрузкиПриНеобходимости(ИмяФайлаВыгрузки, Организация, Док.ДатаОкончания, КодНалоговогоОргана);
		
	КонецЕсли;
	
	// Проверка на то, что отчет представляется за истекший период.
	Если ОтправляемыйОтчет.ДатаОкончания > РабочаяДата Тогда
		Сообщить("Невозможно представление отчета за неистекший период!
				|Дата окончания периода отчета не должна превышать рабочую дату.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем на пустой текст выгрузки
	Если СтрДлина(ТекстВыгрузки) = 0 Тогда
		Сообщить("Файл выгрузки пуст. Отправка отчета прервана!", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
	ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
	ЦиклОбмена.Предмет = Док;
	Если ЭтоРегламентированныйОтчет Тогда
		РезультатПоиска = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ОтправляемыйОтчет.ИсточникОтчета);
		Если РезультатПоиска = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
			Сообщить("Не найден отчет вида """ + ОтправляемыйОтчет.ИсточникОтчета + """!", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		ЦиклОбмена.ВидОтчета = РезультатПоиска;
		ЦиклОбмена.ВидДокумента = ОтправляемыйОтчет.Вид;
	Иначе
		ЦиклОбмена.ВидОтчета = Док.ВидОтчета;
		ЦиклОбмена.ВидДокумента = ОтправляемыйОтчет.Версия;
	КонецЕсли;
	ЦиклОбмена.ДатаНачалаПериода = ОтправляемыйОтчет.ДатаНачала;
	ЦиклОбмена.ДатаОкончанияПериода = ОтправляемыйОтчет.ДатаОкончания;
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗапись;
	
	// указываем ту инспекцию, в которую должен быть представлен отчет
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Сообщить("Не удалось определить налоговый орган, в который представляется отчетность!", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(КодНалоговогоОргана) = Тип("Строка") Тогда
		ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНалоговогоОргана);
		Если ИФНС = Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
			Сообщить("Не найден налоговый орган с кодом " + КодНалоговогоОргана + " в справочнике ""Налоговые органы""!", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ИФНС = КодНалоговогоОргана;
	КонецЕсли;
	
	ЦиклОбмена.ВнешняяОрганизация = ИФНС;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = ?(НЕ УчетнаяЗапись.ОбменНапрямую, УчетнаяЗапись.СерверДокументооборота, УчетнаяЗапись.НалоговыйОрган);
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// сохраняем выгрузку во временный файл
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстВыгрузки);
	Текст.Записать(ИмяВремФайла, ?(нрег(Прав(ИмяФайлаВыгрузки, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM));
	
	
	// добавляем ДИВ
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, ИмяВремФайла, ИмяФайлаВыгрузки) Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	// формируем файл описания отправителя и получателя
	ФайлИОП = СформироватьИОП(ТранспортноеСообщение, ТекстВыгрузки, ИмяФайлаВыгрузки);
	Если ФайлИОП = Неопределено Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// добавляем файл описания
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияКонтейнера, ФайлИОП, ИмяФайлаВыгрузки + ".info") Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	ТранспортноеСообщение.Тема = СформироватьТемуСообщения(ТранспортноеСообщение);
	
	//ТранспортноеСообщение.ПараметрыГрупповойОбработки = ПараметрыГрупповойОбработки;
	
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	// изменяем статус отчета
	Если ЭтоРегламентированныйОтчет Тогда
		ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.ВКонверте);
	КонецЕсли;
	
	// если требуется только подготовить пакет без подписания, то закончим
	Если Действие < 1 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке.", СтатусСообщения.Информация);
		Возврат Истина;
	КонецЕсли;
	
	// пытаемся подписать
	ОтветственныеЛицаПодписанты = Новый Массив;
	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатРуководителя) Тогда
		ОтветственныеЛицаПодписанты.Добавить("Руководитель");
	КонецЕсли;
	Если НЕ ПустаяСтрока(УчетнаяЗапись.СертификатГлавногоБухгалтера) Тогда
		ОтветственныеЛицаПодписанты.Добавить("Главный бухгалтер");
	КонецЕсли;
	Если ОтветственныеЛицаПодписанты.Количество() = 0 Тогда
		ОтменитьТранзакцию();
		Сообщить("Для учетной записи, сопоставленной организации """ + Организация + """, не заданы цифровые сертификаты ответственных лиц организации!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПоставитьПодписиОтветственныхЛиц(ТранспортноеСообщение.Ссылка, ОтветственныеЛицаПодписанты) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось проставить подписи ответственных лиц организации """ + Организация + """!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// если требуется подготовить и подписать без отправки, то закончим
	Если Действие < 2 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке и подписан.", СтатусСообщения.Информация);	
		Возврат Истина;
	КонецЕсли;
	
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка, , , ПараметрыГрупповойОбработки) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// фиксируем изменения перед окончанием
	ЗафиксироватьТранзакцию();
	
	// изменяем статус отчета
	Если ЭтоРегламентированныйОтчет Тогда
		ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.Отправлен);
	КонецЕсли;
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);
	
	Возврат Истина;
	
КонецФункции

Функция ОтправкаРегламентированногоОтчетаВФНС534(Док, Действие = 2, ФормаОтчета = Неопределено, ПараметрыГрупповойОбработки = Неопределено) Экспорт
	
	// проверяем, включен ли обмен по организации
	Организация = Док.Организация;
	Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ФНС
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ФНС.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем статус отчета
	ТипЗнчДок = ТипЗнч(Док);
	ЭтоРегламентированныйОтчет = (ТипЗнчДок = Тип("ДокументСсылка.РегламентированныйОтчет"));
	Если ЭтоРегламентированныйОтчет Тогда
		
		СтатусОтчета = РегламентированнаяОтчетность.ПолучитьСтатусРегламентированногоОтчета(Док);
		СтатусОтправкиОтчета = ПолучитьСтатусОтправкиОбъекта(Док);
		
		Если СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе Тогда
			
			ТекстСообщения = "Запрещено отправлять отчеты со статусом ""В работе""!
						 |Для отправки подтвердите статус отчета, переведя его в состояние ""Подготовлен"", и повторите попытку.";
			Если ФормаОтчета = Неопределено Тогда
				Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
				Возврат Ложь;
			Иначе
				Если ПараметрыГрупповойОбработки = Неопределено Тогда
					Если НЕ ВопросПредупреждение("Запрещено отправлять неподготовленные отчеты!
												|Изменить статус отчета с ""В работе"" на ""Подготовлен""?
												|
												|Подтверждайте изменение статуса только в случае,
												|ЕСЛИ ВЫ УВЕРЕНЫ В ТОМ, ЧТО ОТЧЕТ ГОТОВ К ПРЕДСТАВЛЕНИЮ В НАЛОГОВЫЙ ОРГАН!",
												"Нет, я не уверен(а) в том, что отчет готов к представлению в налоговый орган.",
												"Да, я уверен(а) в том, что отчет готов к представлению в налоговый орган.") Тогда
						Возврат Ложь;
					КонецЕсли;
				Иначе
					Сообщить(ТекстСообщения, СтатусСообщения.Внимание);
					Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
						Возврат Ложь;
					ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
						ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
				РегламентированнаяОтчетность.ЗаписатьСтатусОтчета(Док, Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
			КонецЕсли;
			
		ИначеЕсли СтатусОтчета = Перечисления.СтатусыРегламентированныхОтчетов.Сдан Тогда
			
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если Вопрос("Внимание! Вы действительно хотите отправить уже сданный отчет?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить("Судя по статусу, отчет уже представлен в налоговый орган.", СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(СтатусОтправкиОтчета) Тогда
			
			Если ПараметрыГрупповойОбработки = Неопределено Тогда
				Если НЕ ВопросПредупреждение("Внимание! Не рекомендуется отправлять отчеты, предыдущая попытка отправки которых еще не завершена!
										|Вы действительно хотите отправить отчет? При этом будет начат новый цикл обмена!",
										"Нет, прервать отправку.",
										"Да, я хочу отправить отчет, предыдущая попытка отправки которого не завершена.") Тогда
					Возврат Ложь;
				КонецЕсли;
			Иначе
				Сообщить("Предыдущая попытка отправки отчета не завершена!", СтатусСообщения.Внимание);
				Если ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 2 Тогда
					Возврат Ложь;
				ИначеЕсли ПараметрыГрупповойОбработки.ДействиеПриУведомлениях = 3 Тогда
					ПараметрыГрупповойОбработки.Вставить("НеобходимостьПрерыванияГрупповойОбработки", Истина);
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		// выгружаем
		
		ТекстВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		РезультатВыгрузки = ВыгрузитьРегламентированныйОтчет(Док, ФормаОтчета = Неопределено, ТекстВыгрузки, ИмяФайлаВыгрузки);
		Если НЕ РезультатВыгрузки Тогда
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ОтправляемыйОтчет = Док;
		КодНалоговогоОргана = СокрЛП(ОтправляемыйОтчет.КодИМНС);
		
		ДатаНачалаПериодаОтчета = ОтправляемыйОтчет.ДатаНачала;
		ДатаОкончанияПериодаОтчета = ОтправляемыйОтчет.ДатаОкончания;
		
		ВидОтправляемогоОтчета = ОтправляемыйОтчет.ИсточникОтчета;
		
		НеобходимоНараститьСчетчикФайлов = Ложь;
		
	ИначеЕсли Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") <> Неопределено И ТипЗнчДок = Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган") Тогда
		
		НачатьТранзакцию();
		
		// выгружаем
		
		ТекстВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		РезультатВыгрузки = ВыгрузитьОтчет2НДФЛ(Док, ТекстВыгрузки, ИмяФайлаВыгрузки);
		Если НЕ РезультатВыгрузки Тогда
			Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		ОтправляемыйОтчет = Док;
		КодНалоговогоОргана = СокрЛП(РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "КодНО").КодНО);
		
		ДатаНачалаОтчетногоГода = Дата(ОтправляемыйОтчет.НалоговыйПериод, 1, 1);
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаНачалаОтчетногоГода);
		ДатаОкончанияПериодаОтчета = КонецГода(ДатаНачалаОтчетногоГода);
		
		ВидОтправляемогоОтчета = "СправкаПоНДФЛВНалоговыйОрган";
		
		НеобходимоНараститьСчетчикФайлов = Ложь;
		
	Иначе // внешнее электронное представление
		
		// получаем электронное представление
		ХранилищеВыгрузки = "";
		ИмяФайлаВыгрузки = "";
		ИзвлечьЭлектронноеПредставлениеИзХранилища(Док, ИмяФайлаВыгрузки, ХранилищеВыгрузки);
		Если ИмяФайлаВыгрузки = "" ИЛИ ХранилищеВыгрузки = Неопределено Тогда
			Сообщить("Не обнаружена информация для отправки!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// пишем электронное представление в файл
		ВремФайл = ПолучитьИмяВременногоФайла();
		ХранилищеВыгрузки.Получить().Записать(ВремФайл);
		ОбъектЧтениеТекста = Новый ЧтениеТекста(ВремФайл, ?(нрег(Прав(ИмяФайлаВыгрузки, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM));
		ТекстВыгрузки = ОбъектЧтениеТекста.Прочитать();
		ОбъектЧтениеТекста.Закрыть();
		УдалитьФайлы(ВремФайл);
		
		ОтправляемыйОтчет = Док;
		ДокВыгрузки = Док;
		КодНалоговогоОргана = СокрЛП(Док.НалоговыйОрган.Код);
		
		НачатьТранзакцию();
		
		// наращиваем счетчики в имени файла выгрузки и в содержимом
		НараститьСчетчикДокументовПриНеобходимости(ТекстВыгрузки, ИмяФайлаВыгрузки, Организация, Док.ДатаОкончания);
		НеобходимоНараститьСчетчикФайлов = Истина;
		
		ДатаНачалаПериодаОтчета = ОтправляемыйОтчет.ДатаНачала;
		ДатаОкончанияПериодаОтчета = ОтправляемыйОтчет.ДатаОкончания;
		
		ВидОтправляемогоОтчета = ОтправляемыйОтчет.ВидОтчета.ИсточникОтчета;
		
	КонецЕсли;
	
	// инициализируем переменные, зависящие от типа отчета
	Если ВидОтправляемогоОтчета = "СправкаПоНДФЛВНалоговыйОрган" Тогда
		ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ;
		ТипТранспортногоСообщения = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
		ТипСодержимогоКонтейнера = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ;
	Иначе
		ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;
		ТипТранспортногоСообщения = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
		ТипСодержимогоКонтейнера = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности;
	КонецЕсли;
	
	// проверка на то, что отчет представляется за истекший период
	Если ДатаОкончанияПериодаОтчета > РабочаяДата Тогда
		Сообщить("Невозможно представление отчета за неистекший период!
				|Дата окончания периода отчета не должна превышать рабочую дату.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем на пустой текст выгрузки
	Если СтрДлина(ТекстВыгрузки) = 0 Тогда
		Сообщить("Файл выгрузки пуст. Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	
	// добавляем сведения о доверенности при необходимости
	ФайлДоверенности = Неопределено;
	КороткоеИмяФайлаДоверенности = Неопределено;
	ИмяФайлаВыгрузкиБылоИзменено = Ложь;
	
	// ищем РегистрацияВИФНС по организации и коду налогового органа, а для регл. отчета ещё по КПП
	ЭлРегистрацияВИФНС = РегистрацияВИФНСПоОрганизацииИКодуНО(Организация, КодНалоговогоОргана, ?(ЭтоРегламентированныйОтчет, Док.КПП, ""));
	
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		
		// формируем файл доверенности
		ФайлДоверенности = ВыгрузитьДоверенность(ЭлРегистрацияВИФНС, КороткоеИмяФайлаДоверенности);
		Если НЕ ЗначениеЗаполнено(ФайлДоверенности) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		
		// если представитель ЮЛ или [ФЛ и не сотрудник организации], то подменяем имя файла
		ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		Если ДоверенностьПредставителя.ПредставительЯвляетсяЮЛ
		ИЛИ (НЕ ДоверенностьПредставителя.ПредставительЯвляетсяЮЛ И НЕ ДоверенностьПредставителя.ПредставительЯвляетсяСотрудником) Тогда
			Если НЕ ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, ИмяФайлаВыгрузки, ДоверенностьПредставителя, КодНалоговогоОргана, ДатаОкончанияПериодаОтчета) Тогда
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецЕсли;
			ИмяФайлаВыгрузкиБылоИзменено = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// если имя файла выгрузки не было изменено в связи со сдачей от представителя
	// и при этом файл выгрузки - внешний (а значит, если он текстовый, то следует изменить счетчики)
	// то изменим счетчики в имени
	Если НЕ ИмяФайлаВыгрузкиБылоИзменено И НеобходимоНараститьСчетчикФайлов Тогда
		НараститьСчетчикВИмениФайлаВыгрузкиПриНеобходимости(ИмяФайлаВыгрузки, Организация, Док.ДатаОкончания, КодНалоговогоОргана);
	КонецЕсли;
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
	ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
	ЦиклОбмена.Предмет = Док;
	ЦиклОбмена.Идентификатор = СгенерироватьUUID();
	
	Если ЭтоРегламентированныйОтчет
	ИЛИ (Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") <> Неопределено И ТипЗнчДок = Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган")) Тогда
		
		РезультатПоиска = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ВидОтправляемогоОтчета);
		Если РезультатПоиска = Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
			Сообщить("В справочнике ""Регламентированные отчеты"" не найден отчет вида """ + ВидОтправляемогоОтчета + """!", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
		ЦиклОбмена.ВидОтчета = РезультатПоиска;
		ЦиклОбмена.Тип = ТипЦиклаОбмена;
		
		Если ЭтоРегламентированныйОтчет Тогда
			ЦиклОбмена.ВидДокумента = ОтправляемыйОтчет.Вид;
		КонецЕсли;
		
	Иначе
		ЦиклОбмена.ВидОтчета = Док.ВидОтчета;
		ЦиклОбмена.ВидДокумента = ОтправляемыйОтчет.Версия;
		ЦиклОбмена.Тип = ТипЦиклаОбмена;
	КонецЕсли;
	ЦиклОбмена.ДатаНачалаПериода = ДатаНачалаПериодаОтчета;
	ЦиклОбмена.ДатаОкончанияПериода = ДатаОкончанияПериодаОтчета;
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗапись;
	
	// указываем ту инспекцию, в которую должен быть представлен отчет
	Если НЕ ЗначениеЗаполнено(КодНалоговогоОргана) Тогда
		Сообщить("Не удалось определить налоговый орган, в который представляется отчетность!", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(КодНалоговогоОргана) = Тип("Строка") Тогда
		ИФНС = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНалоговогоОргана);
		Если ИФНС = Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
			Сообщить("Не найден налоговый орган с кодом " + КодНалоговогоОргана + " в справочнике ""Налоговые органы""!", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ИФНС = КодНалоговогоОргана;
	КонецЕсли;
	
	ЦиклОбмена.ВнешняяОрганизация = ИФНС;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = ТипТранспортногоСообщения;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = ?(НЕ УчетнаяЗапись.ОбменНапрямую, УчетнаяЗапись.СерверДокументооборота, УчетнаяЗапись.НалоговыйОрган);
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// сохраняем выгрузку во временный файл
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстВыгрузки);
	Если нрег(Прав(ИмяФайлаВыгрузки, 4)) = ".xml" Тогда
		КодировкаФайла = КодировкаТекста.ANSI;
		ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml;
	Иначе
		КодировкаФайла = КодировкаТекста.OEM;
		ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.Текст866;
	КонецЕсли;
	Текст.Записать(ИмяВремФайла, КодировкаФайла);
	
	// добавляем ДИВ
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, ТипСодержимогоКонтейнера, ИмяВремФайла, ИмяФайлаВыгрузки, , , , , , , СгенерироватьUUID(), ТипСодержимого) Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// добавляем доверенность, если она есть
	Если ЗначениеЗаполнено(ФайлДоверенности) Тогда
		Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность, ФайлДоверенности, КороткоеИмяФайлаДоверенности, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml) Тогда
			Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// пишем цикл обмена
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	// формируем файл описания сведений, если его нет
	РезультатФормирования = СформироватьОписаниеСведенийДляСообщенияФНС(ТранспортноеСообщение.Ссылка);
	Если НЕ РезультатФормирования Тогда
		Сообщить("Отправка отчета прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// изменяем статус отчета
	Если ЭтоРегламентированныйОтчет Тогда
		ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.ВКонверте);
	КонецЕсли;
	
	// если требуется только подготовить пакет без подписания, то закончим
	Если Действие < 1 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке.", СтатусСообщения.Информация);
		Возврат Истина;
	КонецЕсли;
	
	
	// готовим пакет
	Если НЕ СформироватьПакет(ТранспортноеСообщение) Тогда
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
	// если требуется подготовить и подписать без отправки, то закончим
	Если Действие < 2 Тогда
		ЗафиксироватьТранзакцию();
		Сообщить("Транспортный пакет подготовлен к отправке и подписан.", СтатусСообщения.Информация);
		Возврат Истина;
	КонецЕсли;
	
	
	// отправляем
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка, , , ПараметрыГрупповойОбработки) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	
	// фиксируем изменения
	ЗафиксироватьТранзакцию();
	
	// изменяем статус отчета
	Если ЭтоРегламентированныйОтчет Тогда
		ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.Отправлен);
	КонецЕсли;
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);
	
	Возврат Истина;
	
КонецФункции

Функция РегистрацияВИФНСПоОрганизацииИКодуНО(Организация, КодНО, КПП = "")
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	РегистрацияВИФНС.Ссылка,
	                      |	ВЫБОР
	                      |		КОГДА РегистрацияВИФНС.Доверенность <> &ПустаяСсылкаДоверенность
	                      |			ТОГДА 1
	                      |		ИНАЧЕ 0
	                      |	КОНЕЦ КАК ДоверенностьЗаполнена
	                      |ИЗ
	                      |	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	                      |ГДЕ
	                      |	РегистрацияВИФНС.Владелец = &Владелец
						  |	И РегистрацияВИФНС.Код = &Код
						  |" + ?(ЗначениеЗаполнено(КПП), "И РегистрацияВИФНС.КПП = &КПП", "") + "
	                      |	И РегистрацияВИФНС.ПометкаУдаления = &ПометкаУдаления
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ДоверенностьЗаполнена УБЫВ");
						  
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	Запрос.УстановитьПараметр("Владелец", Организация);
	Запрос.УстановитьПараметр("Код", КодНО);
	Запрос.УстановитьПараметр("ПустаяСсылкаДоверенность", Справочники.ДоверенностиНалогоплательщика.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(КПП) Тогда
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Получить(0);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция СформироватьИПоказатьПечатныеДокументы(ЦиклОбмена, Настройки)
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПечатныеДокументы = СформироватьПечатныеДокументы(ЦиклОбмена, Настройки);
	
	ДеревоПечатныхДокументов = Новый ДеревоЗначений;
	ДеревоПечатныхДокументов.Колонки.Добавить("Объект");
	ДеревоПечатныхДокументов.Колонки.Добавить("ТабличныйДокумент");
	
	НовСтр = ДеревоПечатныхДокументов.Строки.Добавить();
	НовСтр.Объект = ЦиклОбмена;
	Для Каждого ПечатныйДокумент Из ПечатныеДокументы Цикл
		НовСтр2 = НовСтр.Строки.Добавить();
		НовСтр2.Объект = ПечатныйДокумент.Представление;
		НовСтр2.ТабличныйДокумент = ПечатныйДокумент.Значение;
	КонецЦикла;
	
	ФормаПредпросмотра = ПолучитьФорму("ПредварительныйПросмотрПечатныхФорм");
	ФормаПредпросмотра.НачальноеЗначениеВыбора = ДеревоПечатныхДокументов;
	ФормаПредпросмотра.Открыть();
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьФайлыЦиклаОбмена534(ЦиклОбмена, ПечататьДокумент, ПечататьПодтверждениеДатыОтправки, ПечататьРезультатПриема, ПечататьРезультатОбработки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	
	Подзапросы = Новый Массив;
	
	Файлы = Новый ТаблицаЗначений;
	Файлы.Колонки.Добавить("ИдТипа");
	Файлы.Колонки.Добавить("Тип");
	Файлы.Колонки.Добавить("ИмяФайла");
	Файлы.Колонки.Добавить("Файл");
	Файлы.Колонки.Добавить("ИмяПодписанногоФайла");
	Файлы.Колонки.Добавить("Сертификат");
	
	Если ПечататьДокумент Тогда
		Подзапросы.Добавить("ВЫБРАТЬ
				  |	""ФайлОтчетности"" КАК ИдТипа,
				  |	СодержимоеТранспортныхКонтейнеров.Данные,
				  |	СодержимоеТранспортныхКонтейнеров.Тип,
				  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
				  |	"""" КАК ИмяПодписанногоФайла,
				  |	"""" КАК Сертификат
				  |ИЗ
				  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
				  |ГДЕ
				  |	СодержимоеТранспортныхКонтейнеров.Тип В (&ТипСодержимогоФайлОтчетности)
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияПервичноеСообщениеСодержащееОтчетность)
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |ВЫБРАТЬ
				  |	""ФайлОтчетностиПодписьНалогоплательщика"",
				  |	СодержимоеТранспортныхКонтейнеров.Данные,
				  |	СодержимоеТранспортныхКонтейнеров.Тип,
				  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
				  |ИЗ
				  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
				  |ГДЕ
				  |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияПервичноеСообщениеСодержащееОтчетность)
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |ВЫБРАТЬ
				  |	""ФайлОтчетностиПодписьНалоговогоОргана"",
				  |	СодержимоеТранспортныхКонтейнеров.Данные,
				  |	СодержимоеТранспортныхКонтейнеров.Тип,
				  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
				  |ИЗ
				  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
				  |ГДЕ
				  |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияКвитанцияОПриемеФайлаОтчетности)
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
		
		ТипСодержимогоФайлОтчетности = Новый Массив;
		ТипСодержимогоФайлОтчетности.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		ТипСодержимогоФайлОтчетности.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
		Запрос.УстановитьПараметр("ТипСодержимогоФайлОтчетности", ТипСодержимогоФайлОтчетности);
		
		ТипСообщенияПервичноеСообщениеСодержащееОтчетность = Новый Массив;
		ТипСообщенияПервичноеСообщениеСодержащееОтчетность.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
		ТипСообщенияПервичноеСообщениеСодержащееОтчетность.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
		Запрос.УстановитьПараметр("ТипСообщенияПервичноеСообщениеСодержащееОтчетность", ТипСообщенияПервичноеСообщениеСодержащееОтчетность);
		
		Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		
		ТипСообщенияКвитанцияОПриемеФайлаОтчетности = Новый Массив;
		ТипСообщенияКвитанцияОПриемеФайлаОтчетности.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
		ТипСообщенияКвитанцияОПриемеФайлаОтчетности.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
		Запрос.УстановитьПараметр("ТипСообщенияКвитанцияОПриемеФайлаОтчетности", ТипСообщенияКвитанцияОПриемеФайлаОтчетности);
	КонецЕсли;
	
	Если ПечататьПодтверждениеДатыОтправки Тогда
		Подзапросы.Добавить("ВЫБРАТЬ
				  |	""ПодтверждениеДатыОтправки"" КАК ИдТипа,
				  |	СодержимоеТранспортныхКонтейнеров.Данные,
				  |	СодержимоеТранспортныхКонтейнеров.Тип,
				  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
				  |	"""" КАК ИмяПодписанногоФайла,
				  |	"""" КАК Сертификат
				  |ИЗ
				  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
				  |ГДЕ
				  |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоПодтверждениеОбОтправке
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияПодтверждениеОтправкиОтчетности)
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |ВЫБРАТЬ
				  |	""ПодтверждениеДатыОтправкиПодписьНалогоплательщика"",
				  |	СодержимоеТранспортныхКонтейнеров.Данные,
				  |	СодержимоеТранспортныхКонтейнеров.Тип,
				  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
				  |ИЗ
				  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
				  |ГДЕ
				  |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПереподписанноеПодтверждениеОтправкиОтчетности
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
				  |
				  |ОБЪЕДИНИТЬ ВСЕ
				  |
				  |ВЫБРАТЬ
				  |	""ПодтверждениеДатыОтправкиПодписьПочтовогоСервера"",
				  |	СодержимоеТранспортныхКонтейнеров.Данные,
				  |	СодержимоеТранспортныхКонтейнеров.Тип,
				  |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
				  |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
				  |ИЗ
				  |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
				  |ГДЕ
				  |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияПодтверждениеОтправкиОтчетности)
				  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
		
		Запрос.УстановитьПараметр("ТипСодержимогоПодтверждениеОбОтправке", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
		
		ТипСообщенияПодтверждениеОтправкиОтчетности = Новый Массив;
		ТипСообщенияПодтверждениеОтправкиОтчетности.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО);
		ТипСообщенияПодтверждениеОтправкиОтчетности.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО);
		Запрос.УстановитьПараметр("ТипСообщенияПодтверждениеОтправкиОтчетности", ТипСообщенияПодтверждениеОтправкиОтчетности);
		
		Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		Запрос.УстановитьПараметр("ТипСообщенияПереподписанноеПодтверждениеОтправкиОтчетности", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
	КонецЕсли;
	
	Если ПечататьРезультатПриема Тогда
		Подзапросы.Добавить("ВЫБРАТЬ
						 |	""РезультатПриема"" КАК ИдТипа,
						 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
						 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
						 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла,
						 |	"""" КАК ИмяПодписанногоФайла,
						 |	"""" КАК Сертификат
						 |ИЗ
						 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						 |ГДЕ
						 |	СодержимоеТранспортныхКонтейнеров.Тип В (&ТипСодержимогоПротоколВходногоКонтроля)
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияПротоколВходногоКонтроляОтчетности)
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						 |
						 |ОБЪЕДИНИТЬ ВСЕ
						 |
						 |ВЫБРАТЬ
						 |	""РезультатПриемаПодписьНалогоплательщика"",
						 |	СодержимоеТранспортныхКонтейнеров.Данные,
						 |	СодержимоеТранспортныхКонтейнеров.Тип,
						 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
						 |ИЗ
						 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						 |ГДЕ
						 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияПереподписанныйПротоколВходногоКонтроляОтчетности
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						 |
						 |ОБЪЕДИНИТЬ ВСЕ
						 |
						 |ВЫБРАТЬ
						 |	""РезультатПриемаПодписьНалоговогоОргана"",
						 |	СодержимоеТранспортныхКонтейнеров.Данные,
						 |	СодержимоеТранспортныхКонтейнеров.Тип,
						 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
						 |ИЗ
						 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						 |ГДЕ
						 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипСообщенияПротоколВходногоКонтроляОтчетности)
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
						 
		ТипСодержимогоПротоколВходногоКонтроля = Новый Массив;
		ТипСодержимогоПротоколВходногоКонтроля.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме);
		ТипСодержимогоПротоколВходногоКонтроля.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе);
		ТипСодержимогоПротоколВходногоКонтроля.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
		ТипСодержимогоПротоколВходногоКонтроля.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
		Запрос.УстановитьПараметр("ТипСодержимогоПротоколВходногоКонтроля", ТипСодержимогоПротоколВходногоКонтроля);
		
		ТипСообщенияПротоколВходногоКонтроляОтчетности = Новый Массив;
		ТипСообщенияПротоколВходногоКонтроляОтчетности.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО);
		ТипСообщенияПротоколВходногоКонтроляОтчетности.Добавить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО);
		Запрос.УстановитьПараметр("ТипСообщенияПротоколВходногоКонтроляОтчетности", ТипСообщенияПротоколВходногоКонтроляОтчетности);
		
		Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		Запрос.УстановитьПараметр("ТипСообщенияПереподписанныйПротоколВходногоКонтроляОтчетности", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
	КонецЕсли;
	
	Если ПечататьРезультатОбработки Тогда
		Подзапросы.Добавить("ВЫБРАТЬ
						 |	""РезультатОбработки"" КАК ИдТипа,
						 |	СодержимоеТранспортныхКонтейнеров.Данные КАК Данные,
						 |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
						 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла,
						 |	"""" КАК ИмяПодписанногоФайла,
						 |	"""" КАК Сертификат
						 |ИЗ
						 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						 |ГДЕ
						 |	СодержимоеТранспортныхКонтейнеров.Тип В (&ТипСодержимогоРезультатаОбработки)
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияРезультатОбработкиДекларацияНО
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						 |
						 |ОБЪЕДИНИТЬ ВСЕ
						 |
						 |ВЫБРАТЬ
						 |	""РезультатОбработкиПодписьНалогоплательщика"",
						 |	СодержимоеТранспортныхКонтейнеров.Данные,
						 |	СодержимоеТранспортныхКонтейнеров.Тип,
						 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
						 |ИЗ
						 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						 |ГДЕ
						 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияИзвещениеРезультатОбработкиНП
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						 |
						 |ОБЪЕДИНИТЬ ВСЕ
						 |
						 |ВЫБРАТЬ
						 |	""РезультатОбработкиПодписьНалоговогоОргана"",
						 |	СодержимоеТранспортныхКонтейнеров.Данные,
						 |	СодержимоеТранспортныхКонтейнеров.Тип,
						 |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПИмяПодписанногоФайла,
						 |	СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат
						 |ИЗ
						 |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						 |ГДЕ
						 |	СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимогоЭлектронноЦифроваяПодпись
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип = &ТипСообщенияРезультатОбработкиДекларацияНО
						 |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена");
						 
		ТипСодержимогоРезультатаОбработки = Новый Массив;
		ТипСодержимогоРезультатаОбработки.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе);
		ТипСодержимогоРезультатаОбработки.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении);
		Запрос.УстановитьПараметр("ТипСодержимогоРезультатаОбработки", ТипСодержимогоРезультатаОбработки);
		
		Запрос.УстановитьПараметр("ТипСообщенияРезультатОбработкиДекларацияНО", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО);
		Запрос.УстановитьПараметр("ТипСодержимогоЭлектронноЦифроваяПодпись", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		Запрос.УстановитьПараметр("ТипСообщенияИзвещениеРезультатОбработкиНП", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);
	КонецЕсли;
	
	// компилируем запрос из подзапросов
	Для Инд = 0 По Подзапросы.Количество() - 1 Цикл
		ТекЗапрос = Подзапросы[Инд];
		Если Инд = 0 Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + Сред(ТекЗапрос, 8);
		Иначе
			Запрос.Текст = Запрос.Текст + "
				          |
				          |ОБЪЕДИНИТЬ ВСЕ
				          |
				          |" + ТекЗапрос;
		КонецЕсли;
	КонецЦикла;
	
	// выполняем запрос, сохраняем файлы во временный каталог и формируем таблицу файлов
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Данные) Тогда
				ВременныйФайл = СохранитьДвоичныеДанныеВоВременныйФайл(Выборка.Данные);
				Если ВременныйФайл <> Неопределено Тогда
					НовСтр = Файлы.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
					НовСтр.Файл = ВременныйФайл;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Файлы;
	
КонецФункции

Функция ВывестиОтчетОСостоянииФНС141(ЦиклОбмена)
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	
	ПредусмотренныеТипыСообщений = Новый ТаблицаЗначений;
	ПредусмотренныеТипыСообщений.Колонки.Добавить("ТипСообщения");
	ПредусмотренныеТипыСообщений.Колонки.Добавить("ТипЦиклаОбмена");
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика, Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика, Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО, Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО, Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ЗапросИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН, Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	
	// получаем шаблон бланка
	ШаблонМакета = ПолучитьМакет("БланкПечатиОтчетаОСостоянииФНС");
	
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ЗаполнитьЗначенияСвойств(ТаблДок.НижнийКолонтитул, ШаблонМакета.НижнийКолонтитул);
	ЗаполнитьЗначенияСвойств(ТаблДок.ВерхнийКолонтитул, ШаблонМакета.ВерхнийКолонтитул);
	// !!! устанавливать колонтитулы
	
	// получаем области-строки
	ОблШапка = ШаблонМакета.ПолучитьОбласть("Шапка");
	ОблСтрока = ШаблонМакета.ПолучитьОбласть("Строка");
	ОблПодвалСообщения = ШаблонМакета.ПолучитьОбласть("ПодвалСообщения");
	ОблШапкаКритическиеОшибки = ШаблонМакета.ПолучитьОбласть("ШапкаКритическиеОшибки");
	ОблСтрокаКритическаяОшибка = ШаблонМакета.ПолучитьОбласть("СтрокаКритическаяОшибка");
	ОблКритическиеОшибкиОтсутствуют = ШаблонМакета.ПолучитьОбласть("КритическиеОшибкиОтсутствуют");
	ОблПодвал = ШаблонМакета.ПолучитьОбласть("Подвал");
	
	// инициализируем значения шапки
	ОблШапка.Области.Идентификатор.Текст = ЦиклОбмена.Идентификатор;
	ОблШапка.Области.Организация.Текст = ЦиклОбмена.Организация;
	ОблШапка.Области.ВнешняяОрганизация.Текст = ЦиклОбмена.ВнешняяОрганизация;
	
	// формируем строку с предметом
	Предмет = ЦиклОбмена.Предмет;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
	
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СтрПредмет = "Отчет " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Предмет);
		ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда
			СтрПредмет = "Внешние отчет:" + Символы.ПС + Строка(Предмет);
		Иначе
			СтрПредмет = "<Отсутствует>";
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		
		СтрПредмет = Строка(Предмет);
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана Тогда
		
		Если ЗначениеЗаполнено(Предмет) тогда
			СтрПредмет = Строка(Предмет);
		Иначе
			СтрПредмет = "<Предмет будет создан в момент расшифровки первичного сообщения, содержащего документ налогового органа>";
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		
		СтрПредмет = Строка(Предмет);
		
	КонецЕсли;
		
	ОблШапка.Области.ПредметПереписки.Текст = СтрПредмет;
	
	ОблШапка.Области.Создан.Текст = Формат(ЦиклОбмена.ДатаСоздания, "ДЛФ=DDT");
	ОблШапка.Области.Завершен.Текст = ?(НЕ ЗначениеЗаполнено(ЦиклОбмена.ДатаЗакрытия) ИЛИ ЦиклОбмена.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), "<не завершен>", Формат(ЦиклОбмена.ДатаЗакрытия, "ДЛФ=DDT"));
	ОблШапка.Области.ПоследнееСообщение.Текст = Формат(ЦиклОбмена.ДатаПоследнегоСообщения, "ДЛФ=DDT");
	
	ТаблДок.Вывести(ОблШапка);
	
	// выбираем информацию по сообщениям цикла обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортныеСообщения.Тип КАК Тип,
						  |	ТранспортныеСообщения.ДатаТранспорта,
						  |	ТранспортныеСообщения.Статус КАК СтатусСообщения,
						  |	ТранспортныеСообщения.ПометкаУдаления,
						  |	ТранспортныеСообщения.ПротоколСОшибкой КАК ПротоколСОшибкой,
						  |	ТранспортныеСообщения.Ссылка КАК Ссылка,
						  |	ТранспортныеСообщения.Тема КАК Тема,
						  |	НерасшифрованныеВложения.КоличествоСообщений КАК КоличествоНерасшифрованных,
						  |	РасшифрованныеВложения.КоличествоСообщений КАК КоличествоРасшифрованных,
						  |	ТранспортныеСообщения.Дата КАК Дата
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортныеСообщения
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение КАК ТранспортноеСообщение,
						  |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
						  |		ИЗ
						  |			РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |		ГДЕ
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение) КАК НерасшифрованныеВложения
						  |		ПО ТранспортныеСообщения.Ссылка = НерасшифрованныеВложения.ТранспортноеСообщение
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение,
						  |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
						  |		ИЗ
						  |			РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						  |		ГДЕ
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение) КАК РасшифрованныеВложения
						  |		ПО ТранспортныеСообщения.Ссылка = РасшифрованныеВложения.ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортныеСообщения.ЦиклОбмена = &ЦиклОбмена
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ТранспортныеСообщения.ЦиклОбмена,
						  |	ТранспортныеСообщения.Тип.Порядок,
						  |	Дата");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
	
	ПоследнийТипСообщения = Неопределено;
	
	Для ИндТипСообщения = 1 По ПредусмотренныеТипыСообщений.Количество() Цикл
		
		ТекСтр = ПредусмотренныеТипыСообщений[ИндТипСообщения - 1];
		Если ТекСтр.ТипЦиклаОбмена <> ТипЦиклаОбмена Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТипСообщения = ТекСтр.ТипСообщения;
		СообщенияТекТипа = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", ТекТипСообщения));
		Если СообщенияТекТипа.Количество() = 0 И ТекТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО Тогда
			СообщенияТекТипа = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ));
		КонецЕсли;
		
		Если СообщенияТекТипа.Количество() = 0 Тогда
			
			Если ТекТипСообщения = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО Тогда
				ПредставлениеТипа = "Уведомление об уточнении / протокол приема";
			Иначе
				ПредставлениеТипа = СоответствиеТипаСообщенияКраткомуПредставлению[ТекТипСообщения];
			КонецЕсли;
			ОблСтрока.Области.ТипСообщения.Текст = ПредставлениеТипа;
			ОблСтрока.Области.СтатусСообщения.Текст = "Отсутствует";
			ОблСтрока.Области.СтатусСообщения.Шрифт = Новый Шрифт(ОблСтрока.Области.СтатусСообщения.Шрифт, , , , , , Ложь);
			ТаблДок.Вывести(ОблСтрока);
			
		Иначе
			
			Для Каждого СтрСообщение Из СообщенияТекТипа Цикл
				
				ТипСообщения = СтрСообщение.Тип;
				ДатаТранспортаСообщения = СтрСообщение.ДатаТранспорта;
				_СтатусСообщения = СтрСообщение.СтатусСообщения;
				ПометкаУдаленияСообщения = СтрСообщение.ПометкаУдаления;
				ЭтоПротоколСОшибкой = СтрСообщение.ПротоколСОшибкой;
				Сообщение = СтрСообщение.Ссылка;
				ЧислоКонтейнеровСообщения = СтрСообщение.КоличествоНерасшифрованных;
				ЧислоЭлементовСодержимого = СтрСообщение.КоличествоРасшифрованных;
				ДатаСообщения = СтрСообщение.Дата;
				
				ПредставлениеТипа = СоответствиеТипаСообщенияКраткомуПредставлению[ТипСообщения];
				Если ПредставлениеТипа = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// заполняем ТипСообщения
				Если ПоследнийТипСообщения <> ТипСообщения Тогда
					ОблСтрока.Области.ТипСообщения.Текст = ПредставлениеТипа;
				Иначе
					ОблСтрока.Области.ТипСообщения.Текст = "";
				КонецЕсли;
				ПоследнийТипСообщения = ТипСообщения;
				
				// заполняем строку статуса
				Если _СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
					ТекстСтатуса = "От " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Принято " + Формат(ДатаТранспортаСообщения, "ДЛФ=DDT") + ".";
					Если ЧислоЭлементовСодержимого = 0 Тогда
						ТекстСтатуса = ТекстСтатуса + " Не расшифровано.";
					КонецЕсли;
				ИначеЕсли _СтатусСообщения = Перечисления.СтатусыПисем.Исходящее Тогда
					ТекстСтатуса = "Создано " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Не отправлено.";
				ИначеЕсли _СтатусСообщения = Перечисления.СтатусыПисем.Отправленное Тогда
					ТекстСтатуса = "Создано " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Отправлено " + Формат(ДатаТранспортаСообщения, "ДЛФ=DDT") + ".";
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЭтоПротоколСОшибкой Тогда
					Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
						ТекстСтатуса = ТекстСтатуса + Символы.ПС + "Содержит отказ в обслуживании!";
					Иначе
						ТекстСтатуса = ТекстСтатуса + Символы.ПС + "Содержит сведения об ошибках!";
					КонецЕсли;
				КонецЕсли;
				
				ОблСтрока.Области.СтатусСообщения.Текст = ТекстСтатуса;
				ОблСтрока.Области.СтатусСообщения.Шрифт = Новый Шрифт(ОблСтрока.Области.СтатусСообщения.Шрифт, , , , , , ПометкаУдаленияСообщения);
				
				ТаблДок.Вывести(ОблСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблДок.Вывести(ОблПодвалСообщения);
	
	// вывод критических ошибок
	КритическиеОшибки = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
	Если КритическиеОшибки.Количество() > 0 Тогда
		ТаблДок.Вывести(ОблШапкаКритическиеОшибки);
		Для Каждого КритическаяОшибка Из КритическиеОшибки Цикл
			ОблСтрокаКритическаяОшибка.Области.УведомлениеОбОшибке.Текст = СокрЛП(КритическаяОшибка.Тема);
			ОблСтрокаКритическаяОшибка.Области.УведомлениеОбОшибкеДата.Текст = Формат(КритическаяОшибка.ДатаТранспорта, "ДЛФ=DDT");
			ТаблДок.Вывести(ОблСтрокаКритическаяОшибка);
		КонецЦикла;
	КонецЕсли;
	
	ТаблДок.Вывести(ОблПодвал);
	
	Возврат ТаблДок;
	
КонецФункции

Функция ВывестиОтчетОСостоянииФНС534(ЦиклОбмена)
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	
	ПредусмотренныеТипыСообщений = Новый ТаблицаЗначений;
	ПредусмотренныеТипыСообщений.Колонки.Добавить("ТипСообщения");
	ПредусмотренныеТипыСообщений.Колонки.Добавить("ТипЦиклаОбмена");
	
	// 534
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	
	// 534 2-НДФЛ
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	
	// 534 НФД
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, Перечисления.ТипыЦикловОбмена.ПисьмоНО);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП, Перечисления.ТипыЦикловОбмена.ПисьмоНО);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РассылкаНО, Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП, Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
	
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РассылкаНО, Перечисления.ТипыЦикловОбмена.Рассылка);
	
	// 534 ИОН
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ЗапросНП, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, Перечисления.ТипыЦикловОбмена.ИОН);
	ДобавитьСтрокуВТаблицуТиповСообщений(ПредусмотренныеТипыСообщений, Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, Перечисления.ТипыЦикловОбмена.ИОН);
	
	// получаем шаблон бланка
	ШаблонМакета = ПолучитьМакет("БланкПечатиОтчетаОСостоянииФНС534");
	
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	ТаблДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ЗаполнитьЗначенияСвойств(ТаблДок.НижнийКолонтитул, ШаблонМакета.НижнийКолонтитул);
	ЗаполнитьЗначенияСвойств(ТаблДок.ВерхнийКолонтитул, ШаблонМакета.ВерхнийКолонтитул);
	// !!! устанавливать колонтитулы
	
	// получаем области-строки
	ОблШапка = ШаблонМакета.ПолучитьОбласть("Шапка");
	ОблСтрока = ШаблонМакета.ПолучитьОбласть("Строка");
	ОблПодвалСообщения = ШаблонМакета.ПолучитьОбласть("ПодвалСообщения");
	ОблШапкаКритическиеОшибки = ШаблонМакета.ПолучитьОбласть("ШапкаКритическиеОшибки");
	ОблСтрокаКритическаяОшибка = ШаблонМакета.ПолучитьОбласть("СтрокаКритическаяОшибка");
	ОблКритическиеОшибкиОтсутствуют = ШаблонМакета.ПолучитьОбласть("КритическиеОшибкиОтсутствуют");
	ОблПодвал = ШаблонМакета.ПолучитьОбласть("Подвал");
	
	// инициализируем значения шапки
	ОблШапка.Области.Идентификатор.Текст = ЦиклОбмена.Идентификатор;
	ОблШапка.Области.Организация.Текст = ЦиклОбмена.Организация;
	ОблШапка.Области.ВнешняяОрганизация.Текст = ЦиклОбмена.ВнешняяОрганизация;
	
	// формируем строку с предметом
	Предмет = ЦиклОбмена.Предмет;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
	
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			СтрПредмет = "Отчет " + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Предмет);
		ИначеЕсли ЗначениеЗаполнено(Предмет) Тогда
			СтрПредмет = "Внешние отчет:" + Символы.ПС + Строка(Предмет);
		Иначе
			СтрПредмет = "<Отсутствует>";
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		
		СтрПредмет = Строка(Предмет);
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		
		СтрПредмет = Строка(Предмет);
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО
	ИЛИ ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Рассылка
	ИЛИ ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая Тогда
		
		Если ЗначениеЗаполнено(Предмет) тогда
			СтрПредмет = Строка(Предмет);
		Иначе
			СтрПредмет = "<Предмет будет создан в момент расшифровки первичного сообщения, содержащего документ налогового органа>";
		КонецЕсли;
		
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		
		СтрПредмет = Строка(Предмет);
		
	КонецЕсли;
		
	ОблШапка.Области.ПредметПереписки.Текст = СтрПредмет;
	
	ОблШапка.Области.Создан.Текст = Формат(ЦиклОбмена.ДатаСоздания, "ДЛФ=DDT");
	ОблШапка.Области.Завершен.Текст = ?(НЕ ЗначениеЗаполнено(ЦиклОбмена.ДатаЗакрытия) ИЛИ ЦиклОбмена.ДатаЗакрытия = ПолучитьПустуюДатуЗавершенияЦиклаОбмена(), "<не завершен>", Формат(ЦиклОбмена.ДатаЗакрытия, "ДЛФ=DDT"));
	ОблШапка.Области.ПоследнееСообщение.Текст = Формат(ЦиклОбмена.ДатаПоследнегоСообщения, "ДЛФ=DDT");
	
	ТаблДок.Вывести(ОблШапка);
	
	// выбираем информацию по сообщениям цикла обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
						  |	ТранспортныеСообщения.Тип КАК Тип,
						  |	ТранспортныеСообщения.ДатаТранспорта,
						  |	ТранспортныеСообщения.Статус КАК СтатусСообщения,
						  |	ТранспортныеСообщения.ПометкаУдаления,
						  |	ТранспортныеСообщения.ПротоколСОшибкой КАК ПротоколСОшибкой,
						  |	ТранспортныеСообщения.Ссылка КАК Ссылка,
						  |	ТранспортныеСообщения.Тема КАК Тема,
						  |	НерасшифрованныеВложения.КоличествоСообщений КАК КоличествоНерасшифрованных,
						  |	РасшифрованныеВложения.КоличествоСообщений КАК КоличествоРасшифрованных,
						  |	ТранспортныеСообщения.Дата КАК Дата
						  |ИЗ
						  |	Документ.ТранспортноеСообщение КАК ТранспортныеСообщения
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение КАК ТранспортноеСообщение,
						  |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
						  |		ИЗ
						  |			РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
						  |		ГДЕ
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			ТранспортныеКонтейнеры.ТранспортноеСообщение) КАК НерасшифрованныеВложения
						  |		ПО ТранспортныеСообщения.Ссылка = НерасшифрованныеВложения.ТранспортноеСообщение
						  |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение КАК ТранспортноеСообщение,
						  |			КОЛИЧЕСТВО(ИСТИНА) КАК КоличествоСообщений
						  |		ИЗ
						  |			РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
						  |		ГДЕ
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В(&ЦиклОбмена)
						  |		
						  |		СГРУППИРОВАТЬ ПО
						  |			СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение) КАК РасшифрованныеВложения
						  |		ПО ТранспортныеСообщения.Ссылка = РасшифрованныеВложения.ТранспортноеСообщение
						  |ГДЕ
						  |	ТранспортныеСообщения.ЦиклОбмена = &ЦиклОбмена
						  |
						  |УПОРЯДОЧИТЬ ПО
						  |	ТранспортныеСообщения.ЦиклОбмена,
						  |	ТранспортныеСообщения.Тип.Порядок,
						  |	Дата");
	Запрос.УстановитьПараметр("ЦиклОбмена", ЦиклОбмена);
	ТаблицаСообщений = Запрос.Выполнить().Выгрузить();
	
	ПоследнийТипСообщения = Неопределено;
	
	Для ИндТипСообщения = 1 По ПредусмотренныеТипыСообщений.Количество() Цикл
		
		// получаем очередной тип сообщения и проверяем, относится ли он к типу текущего цикла обмена
		ТекСтр = ПредусмотренныеТипыСообщений[ИндТипСообщения - 1];
		Если ТекСтр.ТипЦиклаОбмена <> ТипЦиклаОбмена Тогда
			Продолжить;
		КонецЕсли;
		
		// находим сообщения текущего типа у нашего цикла обмена
		ТекТипСообщения = ТекСтр.ТипСообщения;
		СообщенияТекТипа = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", ТекТипСообщения));
		
		// если сообщение текущего типа отсутствует, то так и выведем
		Если СообщенияТекТипа.Количество() = 0 Тогда
			
			// формируем представление типа
			ПредставлениеТипа = СоответствиеТипаСообщенияКраткомуПредставлению[ТекТипСообщения];
			
			ОблСтрока.Области.ТипСообщения.Текст = ПредставлениеТипа;
			ОблСтрока.Области.СтатусСообщения.Текст = "Отсутствует";
			ОблСтрока.Области.СтатусСообщения.Шрифт = Новый Шрифт(ОблСтрока.Области.СтатусСообщения.Шрифт, , , , , , Ложь);
			ТаблДок.Вывести(ОблСтрока);
			
		Иначе
			
			// если сообщения текущего типа присутствуют, то выведем информацию по каждому из них
			Для Каждого СтрСообщение Из СообщенияТекТипа Цикл
				
				ТипСообщения = СтрСообщение.Тип;
				ДатаТранспортаСообщения = СтрСообщение.ДатаТранспорта;
				_СтатусСообщения = СтрСообщение.СтатусСообщения;
				ПометкаУдаленияСообщения = СтрСообщение.ПометкаУдаления;
				ЭтоПротоколСОшибкой = СтрСообщение.ПротоколСОшибкой;
				ЧислоЭлементовСодержимого = СтрСообщение.КоличествоРасшифрованных;
				ДатаСообщения = СтрСообщение.Дата;
				
				ПредставлениеТипа = СоответствиеТипаСообщенияКраткомуПредставлению[ТипСообщения];
				Если ПредставлениеТипа = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				// заполняем ТипСообщения
				Если ПоследнийТипСообщения <> ТипСообщения Тогда
					ОблСтрока.Области.ТипСообщения.Текст = ПредставлениеТипа;
				Иначе
					ОблСтрока.Области.ТипСообщения.Текст = "";
				КонецЕсли;
				ПоследнийТипСообщения = ТипСообщения;
				
				// заполняем строку статуса
				Если _СтатусСообщения = Перечисления.СтатусыПисем.Полученное Тогда
					ТекстСтатуса = "От " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Принято " + Формат(ДатаТранспортаСообщения, "ДЛФ=DDT") + ".";
					Если ЧислоЭлементовСодержимого = 0 Тогда
						ТекстСтатуса = ТекстСтатуса + " Не расшифровано.";
					КонецЕсли;
				ИначеЕсли _СтатусСообщения = Перечисления.СтатусыПисем.Исходящее Тогда
					ТекстСтатуса = "Создано " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Не отправлено.";
				ИначеЕсли _СтатусСообщения = Перечисления.СтатусыПисем.Отправленное Тогда
					ТекстСтатуса = "Создано " + Формат(ДатаСообщения, "ДЛФ=DDT") + ". Отправлено " + Формат(ДатаТранспортаСообщения, "ДЛФ=DDT") + ".";
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если ЭтоПротоколСОшибкой Тогда
					Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
						ТекстСтатуса = ТекстСтатуса + Символы.ПС + "Содержит отказ в обслуживании!";
					Иначе
						ТекстСтатуса = ТекстСтатуса + Символы.ПС + "Содержит сведения об ошибках!";
					КонецЕсли;
				КонецЕсли;
				
				ОблСтрока.Области.СтатусСообщения.Текст = ТекстСтатуса;
				ОблСтрока.Области.СтатусСообщения.Шрифт = Новый Шрифт(ОблСтрока.Области.СтатусСообщения.Шрифт, , , , , , ПометкаУдаленияСообщения);
				
				ТаблДок.Вывести(ОблСтрока);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблДок.Вывести(ОблПодвалСообщения);
	
	
	// вывод информации об ошибках
	ТипыОшибок = Новый Массив;
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС);
	ТипыОшибок.Добавить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка);
	Для Каждого ТипОшибки Из ТипыОшибок Цикл
		СообщенияОшибки = ТаблицаСообщений.НайтиСтроки(Новый Структура("Тип", ТипОшибки));
		Если СообщенияОшибки.Количество() > 0 Тогда
			ТаблДок.Вывести(ОблШапкаКритическиеОшибки);
			Для Каждого СообщениеОшибка Из СообщенияОшибки Цикл
				ОблСтрокаКритическаяОшибка.Области.УведомлениеОбОшибке.Текст = СокрЛП(СообщениеОшибка.Тема);
				ОблСтрокаКритическаяОшибка.Области.УведомлениеОбОшибкеДата.Текст = Формат(СообщениеОшибка.ДатаТранспорта, "ДЛФ=DDT");
				ТаблДок.Вывести(ОблСтрокаКритическаяОшибка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	
	ТаблДок.Вывести(ОблПодвал);
	
	Возврат ТаблДок;
	
КонецФункции

// + Формирование печатной формы квитанции о приеме

Функция СформироватьТабличныйДокументНаОсновеКвитанцииОПриеме(Заголовок, ИмяФайла, Тело, НижнийКолонтитул, Подписи = Неопределено)
	
	// формируем таблицу с объявлениями полей узла с общими сведениями
	ПоляОбщихСведений = Новый ТаблицаЗначений;
	ПоляОбщихСведений.Колонки.Добавить("Код");
	ПоляОбщихСведений.Колонки.Добавить("Имя");
	
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИмяОбрабФайла", "Имя обработанного файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдФайл", "Идентификатор файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдДок", "Идентификатор документа");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаВремяПредст", "Дата и время представления");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "КНД", "Код формы по КНД");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НаимОтч", "Наименование формы");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НомКорр", "Номер корректировки");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ОтчетПериод", "Отчетный период");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ОтчетГод", "Отчетный год");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаПост", "Дата поступления отчета");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаПрин", "Дата принятия отчета");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "РегНом", "Рег. номер отчетности в налоговом органе");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ПрогрКомпл", "Проверившая программа");
	
	
	// получаем бланк отчета из макета
	Бланк = ПолучитьМакет("БланкПечатиДИВ");
	
	// инициализируем итоговый табличный документ
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	
	// выводим секцию заголовка
	Секция_Заголовок = Бланк.ПолучитьОбласть("Секция_Заголовок");
	Секция_Заголовок.Области.Заголовок.Текст = Заголовок;
	Секция_Заголовок.Области.Файл.Текст = ИмяФайла;
	ТаблДок.Вывести(Секция_Заголовок);
	
	// выводим разделитель
	Секция_Разделитель = Бланк.ПолучитьОбласть("Секция_Разделитель");
	ТаблДок.Вывести(Секция_Разделитель);
	
	// пытаемся разобрать уведомление
	СвойстваИзУведомления = ПолучитьОсновныеСвойстваИзКвитанцииОПриеме(Тело);
	
	// если разобрать не удалось - выводим его в виде текста
	Если НЕ ЗначениеЗаполнено(СвойстваИзУведомления) Тогда
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		ВывестиТекстПострочно(ТаблДок, Секция_Тело, Тело);
		
	// если текст уведомления разобрать удалось, то выводим основную инфорфмацию из него
	Иначе
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		
		// выводим пустую строку - разделитель
		Секция_Тело.Области.Тело.Текст = "";
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим информацию о налоговом органе
		Секция_Тело.Области.Тело.Текст = "Налоговый орган: " + СокрЛП(СвойстваИзУведомления.НалоговыйОрган);
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим пустую строку - разделитель
		Секция_Тело.Области.Тело.Текст = "";
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим "шапку" общих сведений
		Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
		Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Общие сведения:";
		ТаблДок.Вывести(Секция_ЗаголовокГруппы);
		
		// выводим общие сведения поэлементно
		ОбщиеСведенияУведомления = СвойстваИзУведомления.ОбщиеСведения;
		Для Каждого ПолеОбщихСведений Из ПоляОбщихСведений Цикл
			Если ОбщиеСведенияУведомления.Свойство(ПолеОбщихСведений.Код) Тогда
				ЗначениеПоля = ОбщиеСведенияУведомления[ПолеОбщихСведений.Код];
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Секция_Тело.Области.Тело.Текст = ПолеОбщихСведений.Имя + ": " + СокрЛП(ЗначениеПоля);
					ТаблДок.Вывести(Секция_Тело);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	// выводим информацию о подписях
	Если Подписи <> Неопределено И Подписи.Количество() <> 0 Тогда
		
		ТаблДок.Вывести(Секция_Разделитель);
		
		Секция_Подписи = Бланк.ПолучитьОбласть("Секция_Подписи");
		ТаблДок.Вывести(Секция_Подписи);
		
		Секция_Подпись = Бланк.ПолучитьОбласть("Секция_Подпись");
		Для Каждого Подпись Из Подписи Цикл
			Секция_Подпись.Области.Подпись.Текст = Подпись.Префикс + " " + Подпись.Владелец;// + " (файл " + Подпись.ИмяФайла + ")";
			ТаблДок.Вывести(Секция_Подпись);
		КонецЦикла;
			
	КонецЕсли;
	
	
	// инициализируем текст нижнего колонтитула
	ТаблДок.НижнийКолонтитул.ТекстСлева = НижнийКолонтитул;
	
	
	Возврат ТаблДок;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваИзКвитанцииОПриеме(СтрКвитанция)
	
	Если НЕ ЗначениеЗаполнено(СтрКвитанция) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	// создаем дерево на основе строки XML
	ОписаниеОшибки = "";
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений( , СтрКвитанция, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Сообщить("Ошибка разбора XML квитанции о приеме:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	
	// анализируем XML
	УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелФайл) Тогда
		Сообщить("Некорректная структура XML квитанции о приеме: не обнаружен узел ""Файл"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелДокумент) Тогда
		Сообщить("Некорректная структура XML квитанции о приеме: не обнаружен узел ""Документ"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелСвКвит = УзелДокумент.Строки.Найти("СвКвит", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелСвКвит) Тогда
		Сообщить("Некорректная структура XML квитанции о приеме: не обнаружен узел ""СвКвит"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	
	// разбираем узел с общими сведениями
	ОбщиеСведения = Новый Структура;
	Для Каждого УзелОбщСвед Из УзелСвКвит.Строки Цикл
		ОбщиеСведения.Вставить(УзелОбщСвед.Имя, СокрЛП(УзелОбщСвед.Значение));
	КонецЦикла;
	Если ОбщиеСведения.Свойство("ДатаПредст") И ОбщиеСведения.Свойство("ВремПредст") Тогда
		ОбщиеСведения.Вставить("ДатаВремяПредст", ОбщиеСведения.ДатаПредст + " " + ОбщиеСведения.ВремПредст);
	КонецЕсли;
	Если ОбщиеСведения.Свойство("Период") И ОбщиеСведения.Свойство("ПериодНаим") Тогда
		ОбщиеСведения.Вставить("ОтчетПериод", ОбщиеСведения.Период + " (" + ОбщиеСведения.ПериодНаим + ")");
	КонецЕсли;
	
	
	// разбираем сведения о налоговом органе
	УзелСвНалОргПост = УзелДокумент.Строки.Найти("СвНалОргПост", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелСвНалОргПост) Тогда
		Сообщить("Некорректная структура XML квитанции: не обнаружен узел ""СвНалОргПост"".", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	УзелКодНО = УзелСвНалОргПост.Строки.Найти("КодНО", "Имя");
	Если ЗначениеЗаполнено(УзелКодНО) Тогда
		НалоговыйОрган = СокрЛП(УзелКодНО.Значение);
	КонецЕсли;
	
	УзелНаимНО = УзелСвНалОргПост.Строки.Найти("НаимНО", "Имя");
	Если ЗначениеЗаполнено(УзелНаимНО) Тогда
		Если ЗначениеЗаполнено(НалоговыйОрган) Тогда
			НаименованиеНО = СокрЛП(УзелНаимНО.Значение);
			Если НалоговыйОрган <> НаименованиеНО Тогда
				НалоговыйОрган = НалоговыйОрган + " (" + НаименованиеНО + ")";
			КонецЕсли;
		Иначе
			НалоговыйОрган = СокрЛП(УзелНаимНО.Значение);
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Новый Структура("НалоговыйОрган, ОбщиеСведения", НалоговыйОрган, ОбщиеСведения);
	
КонецФункции

// - Формирование печатной формы квитанции о приеме

// + Формирование печатной формы уведомления об отказе

Функция СформироватьТабличныйДокументНаОсновеУведомленияОбОтказе(Заголовок, ИмяФайла, Тело, НижнийКолонтитул, Подписи = Неопределено)
	
	// формируем таблицу с объявлениями полей узла с общими сведениями
	ПоляОбщихСведений = Новый ТаблицаЗначений;
	ПоляОбщихСведений.Колонки.Добавить("Код");
	ПоляОбщихСведений.Колонки.Добавить("Имя");
	
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИмяОбрабФайла", "Имя обработанного файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдФайл", "Идентификатор файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдДок", "Идентификатор документа");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаВремяПредст", "Дата и время направления файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаПрием", "Дата поступления файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "КНД", "Код формы по КНД");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НаимОтч", "Наименование формы");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НомКорр", "Номер корректировки");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ОтчетГод", "Отчетный год");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "Период", "Код отчетного периода");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ВерсФорм", "Версия формата");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ПрогрКомпл", "Проверившая программа");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаФормУвед", "Дата формирования уведомления");
	
	
	// получаем бланк отчета из макета
	Бланк = ПолучитьМакет("БланкПечатиДИВ");
	
	// инициализируем итоговый табличный документ
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	
	// выводим секцию заголовка
	Секция_Заголовок = Бланк.ПолучитьОбласть("Секция_Заголовок");
	Секция_Заголовок.Области.Заголовок.Текст = Заголовок;
	Секция_Заголовок.Области.Файл.Текст = ИмяФайла;
	ТаблДок.Вывести(Секция_Заголовок);
	
	// выводим разделитель
	Секция_Разделитель = Бланк.ПолучитьОбласть("Секция_Разделитель");
	ТаблДок.Вывести(Секция_Разделитель);
	
	// пытаемся разобрать уведомление
	СвойстваИзУведомления = ПолучитьОсновныеСвойстваИзУведомленияОбОтказе(Тело);
	
	// если разобрать не удалось - выводим его в виде текста
	Если НЕ ЗначениеЗаполнено(СвойстваИзУведомления) Тогда
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		ВывестиТекстПострочно(ТаблДок, Секция_Тело, Тело);
		
	// если текст уведомления разобрать удалось, то выводим основную инфорфмацию из него
	Иначе
		
		// выводим "шапку" таблицы ошибок
		Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
		Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Выявленные нарушения:";
		ТаблДок.Вывести(Секция_ЗаголовокГруппы);
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		
		// получаем область для вывода единицы информации уведомления
		Для Каждого Ошибка Из СвойстваИзУведомления.Ошибки Цикл
			ВывестиТекстПострочно(ТаблДок, Секция_Тело, "Ошибка " + Ошибка.КодОшибки + ": " + Ошибка.Описание);
		КонецЦикла;
		
		// выводим пустую строку - разделитель
		Секция_Тело.Области.Тело.Текст = "";
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим "шапку" общих сведений
		Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
		Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Общие сведения:";
		ТаблДок.Вывести(Секция_ЗаголовокГруппы);
		
		// выводим общие сведения поэлементно
		ОбщиеСведенияУведомления = СвойстваИзУведомления.ОбщиеСведения;
		Для Каждого ПолеОбщихСведений Из ПоляОбщихСведений Цикл
			Если ОбщиеСведенияУведомления.Свойство(ПолеОбщихСведений.Код) Тогда
				ЗначениеПоля = ОбщиеСведенияУведомления[ПолеОбщихСведений.Код];
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Секция_Тело.Области.Тело.Текст = ПолеОбщихСведений.Имя + ": " + СокрЛП(ЗначениеПоля);
					ТаблДок.Вывести(Секция_Тело);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	// выводим информацию о подписях
	Если Подписи <> Неопределено И Подписи.Количество() <> 0 Тогда
		
		ТаблДок.Вывести(Секция_Разделитель);
		
		Секция_Подписи = Бланк.ПолучитьОбласть("Секция_Подписи");
		ТаблДок.Вывести(Секция_Подписи);
		
		Секция_Подпись = Бланк.ПолучитьОбласть("Секция_Подпись");
		Для Каждого Подпись Из Подписи Цикл
			Секция_Подпись.Области.Подпись.Текст = Подпись.Префикс + " " + Подпись.Владелец;// + " (файл " + Подпись.ИмяФайла + ")";
			ТаблДок.Вывести(Секция_Подпись);
		КонецЦикла;
			
	КонецЕсли;
	
	
	// инициализируем текст нижнего колонтитула
	ТаблДок.НижнийКолонтитул.ТекстСлева = НижнийКолонтитул;
	
	
	Возврат ТаблДок;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваИзУведомленияОбОтказе(СтрУведомление)
	
	Если НЕ ЗначениеЗаполнено(СтрУведомление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("КодОшибки");
	ТаблицаОшибок.Колонки.Добавить("Описание");
	
	
	// создаем дерево на основе строки XML
	ОписаниеОшибки = "";
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений( , СтрУведомление, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Сообщить("Ошибка разбора XML уведомления об отказе:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	
	// анализируем XML
	УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелФайл) Тогда
		Сообщить("Некорректная структура XML уведомления: не обнаружен узел ""Файл"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелДокумент) Тогда
		Сообщить("Некорректная структура XML уведомления: не обнаружен узел ""Документ"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелСведУведУточ = УзелДокумент.Строки.Найти("СведУведУточ", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелСведУведУточ) Тогда
		Сообщить("Некорректная структура XML уведомления: не обнаружен узел ""УзелСведУведУточ"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	
	// разбираем узел с перечнем выявленных нарушений
	УзлыВыявлНарФайл = УзелСведУведУточ.Строки.НайтиСтроки(Новый Структура("Имя", "ВыявлНарФайл"));
	Для Каждого УзелВыявНарФайл Из УзлыВыявлНарФайл Цикл
		
		УзлыПеречВыявНар = УзелВыявНарФайл.Строки.НайтиСтроки(Новый Структура("Имя", "ПеречВыявНар"));
		Для Каждого УзелПеречВыявНар Из УзлыПеречВыявНар Цикл
			
			УзелКодОш = УзелПеречВыявНар.Строки.Найти("КодОш", "Имя");
			УзелТекстОш = УзелПеречВыявНар.Строки.Найти("ТекстОш", "Имя");
			Если ЗначениеЗаполнено(УзелКодОш) ИЛИ ЗначениеЗаполнено(УзелТекстОш) Тогда
				
				КодОшибки = ?(ЗначениеЗаполнено(УзелКодОш), СокрЛП(УзелКодОш.Значение), "");
				ТекстОшибки = ?(ЗначениеЗаполнено(УзелТекстОш), СокрЛП(УзелТекстОш.Значение), "");
				
				НовСтр = ТаблицаОшибок.Добавить();
				НовСтр.КодОшибки = КодОшибки;
				НовСтр.Описание = ТекстОшибки;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	
	// разбираем узел с общими сведениями
	ОбщиеСведения = Новый Структура;
	УзлыОбщСвУвед = УзелСведУведУточ.Строки.НайтиСтроки(Новый Структура("Имя", "ОбщСвУвед"));
	Если УзлыОбщСвУвед.Количество() > 0 Тогда
		УзелОбщСвУвед = УзлыОбщСвУвед[0];
		Для Каждого УзелОбщСвед Из УзелОбщСвУвед.Строки Цикл
			ОбщиеСведения.Вставить(УзелОбщСвед.Имя, СокрЛП(УзелОбщСвед.Значение));
		КонецЦикла;
	КонецЕсли;
	
	// доп. обработка
	Если ОбщиеСведения.Свойство("ДатаПредст") И ОбщиеСведения.Свойство("ВремяПредст") Тогда
		ОбщиеСведения.Вставить("ДатаВремяПредст", СокрЛП(ОбщиеСведения.ДатаПредст + " " + ОбщиеСведения.ВремПредст));
	КонецЕсли;
	
	
	Возврат Новый Структура("Ошибки, ОбщиеСведения", ТаблицаОшибок, ОбщиеСведения);
	
КонецФункции

// - Формирование печатной формы уведомления об отказе

// + Формирование печатной формы подтверждения даты отправки

Функция СформироватьТабличныйДокументНаОсновеПодтвержденияДатыОтправки(Заголовок, ИмяФайла, Тело, НижнийКолонтитул, Подписи = Неопределено)
	
	// формируем таблицу с объявлениями полей узла с общими сведениями
	ПоляОбщихСведений = Новый ТаблицаЗначений;
	ПоляОбщихСведений.Колонки.Добавить("Код");
	ПоляОбщихСведений.Колонки.Добавить("Имя");
	
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ДатаВремяОтправки", "Дата и время отправки");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИмяФайла", "Имя отправленного файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ПодтвердившаяОрганизация", "Организация, подтверждающая отправку");
	
	
	// получаем бланк отчета из макета
	Бланк = ПолучитьМакет("БланкПечатиДИВ");
	
	// инициализируем итоговый табличный документ
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	
	// выводим секцию заголовка
	Секция_Заголовок = Бланк.ПолучитьОбласть("Секция_Заголовок");
	Секция_Заголовок.Области.Заголовок.Текст = Заголовок;
	Секция_Заголовок.Области.Файл.Текст = ИмяФайла;
	ТаблДок.Вывести(Секция_Заголовок);
	
	// выводим разделитель
	Секция_Разделитель = Бланк.ПолучитьОбласть("Секция_Разделитель");
	ТаблДок.Вывести(Секция_Разделитель);
	
	// пытаемся разобрать уведомление
	СвойстваИзПодтверждения = ПолучитьОсновныеСвойстваИзПодтвержденияДатыОтправки(Тело);
	
	// если разобрать не удалось - выводим его в виде текста
	Если НЕ ЗначениеЗаполнено(СвойстваИзПодтверждения) Тогда
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		ВывестиТекстПострочно(ТаблДок, Секция_Тело, Тело);
		
	// если текст уведомления разобрать удалось, то выводим основную инфорфмацию из него
	Иначе
		
		// выводим "шапку" общих сведений
		Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
		Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Сведения подтверждения:";
		ТаблДок.Вывести(Секция_ЗаголовокГруппы);
		
		// получаем область для вывода единицы информации уведомления
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		
		// выводим общие сведения поэлементно
		Для Каждого ПолеОбщихСведений Из ПоляОбщихСведений Цикл
			Если СвойстваИзПодтверждения.Свойство(ПолеОбщихСведений.Код) Тогда
				ЗначениеПоля = СвойстваИзПодтверждения[ПолеОбщихСведений.Код];
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Секция_Тело.Области.Тело.Текст = ПолеОбщихСведений.Имя + ": " + СокрЛП(ЗначениеПоля);
					ТаблДок.Вывести(Секция_Тело);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	// выводим информацию о подписях
	Если Подписи <> Неопределено И Подписи.Количество() <> 0 Тогда
		
		ТаблДок.Вывести(Секция_Разделитель);
		
		Секция_Подписи = Бланк.ПолучитьОбласть("Секция_Подписи");
		ТаблДок.Вывести(Секция_Подписи);
		
		Секция_Подпись = Бланк.ПолучитьОбласть("Секция_Подпись");
		Для Каждого Подпись Из Подписи Цикл
			Секция_Подпись.Области.Подпись.Текст = Подпись.Префикс + " " + Подпись.Владелец;// + " (файл " + Подпись.ИмяФайла + ")";
			ТаблДок.Вывести(Секция_Подпись);
		КонецЦикла;
			
	КонецЕсли;
	
	
	// инициализируем текст нижнего колонтитула
	ТаблДок.НижнийКолонтитул.ТекстСлева = НижнийКолонтитул;
	
	
	Возврат ТаблДок;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваИзПодтвержденияДатыОтправки(СтрУведомление)
	
	Если НЕ ЗначениеЗаполнено(СтрУведомление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// считываем подтверждение из файла в дерево XML
	ОписаниеОшибки = "";
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(, СтрУведомление, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Сообщить("Ошибка чтения XML подтверждения даты отправки:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	
	УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелФайл) Тогда
		Сообщить("Некорректная структура XML подтверждения: не обнаружен узел ""Файл"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелДокумент) Тогда
		Сообщить("Некорректная структура XML подтверждения: не обнаружен узел ""Документ"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелОргПодт = УзелДокумент.Строки.Найти("ОргПодт", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелОргПодт) Тогда
		Сообщить("Некорректная структура XML подтверждения: не обнаружен узел ""ОргПодт"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сведения об организации, подтвердившей дату отправки
	УзелСпецОперат = УзелОргПодт.Строки.Найти("СпецОперат", "Имя");
	УзелНО = УзелОргПодт.Строки.Найти("НО", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелСпецОперат) И НЕ ЗначениеЗаполнено(УзелНО) Тогда
		Сообщить("Некорректная структура XML подтверждения: отсутствуют сведения об организации, подтвердившей дату отправки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	ИначеЕсли ЗначениеЗаполнено(УзелСпецОперат) Тогда
		УзелНаимОрг = УзелСпецОперат.Строки.Найти("НаимОрг", "Имя");
		Если НЕ ЗначениеЗаполнено(УзелНаимОрг) Тогда
			Сообщить("Некорректная структура XML подтверждения: отсутствуют сведения об организации, подтвердившей дату отправки.", СтатусСообщения.Важное);
			Возврат Неопределено;
		КонецЕсли;
		ОрганизацияСтр = СокрЛП(УзелНаимОрг.Значение);
	ИначеЕсли ЗначениеЗаполнено(УзелНО) Тогда
		УзелКодНО = УзелНО.Строки.Найти("КодНО", "Имя");
		УзелНаимНО = УзелНО.Строки.Найти("НаимНО", "Имя");
		Если ЗначениеЗаполнено(УзелКодНО) И ЗначениеЗаполнено(УзелКодНО.Значение) Тогда
			ОрганизацияСтр = СокрЛП(УзелКодНО.Значение);
			Если ЗначениеЗаполнено(УзелНаимНО) И ЗначениеЗаполнено(УзелНаимНО.Значение) Тогда
				ОрганизацияСтр = ОрганизацияСтр + " (" + СокрЛП(УзелНаимНО.Значение) + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// получаем сведения подтверждения
	УзелСведПодтв = УзелДокумент.Строки.Найти("СведПодтв", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелСведПодтв) Тогда
		Сообщить("Некорректная структура XML подтверждения: отсутствуют сведения подтверждения.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сведения об имени поступившего файла
	УзелИмяПостФайла = УзелСведПодтв.Строки.Найти("ИмяПостФайла", "Имя", Истина);
	Если ЗначениеЗаполнено(УзелИмяПостФайла) Тогда
		ИмяПоступившегоФайла = СокрЛП(УзелИмяПостФайла.Значение);
	КонецЕсли;
	
	// получаем сведения о дате и времени поступившего файла
	УзелДатаОтпр = УзелСведПодтв.Строки.Найти("ДатаОтпр", "Имя");
	УзелВремяОтпр = УзелСведПодтв.Строки.Найти("ВремяОтпр", "Имя");
	Если ЗначениеЗаполнено(УзелДатаОтпр) Тогда
		ДатаОтправки = СокрЛП(УзелДатаОтпр.Значение);
	КонецЕсли;
	Если ЗначениеЗаполнено(УзелВремяОтпр) Тогда
		ДатаОтправки = СокрЛП(ДатаОтправки + " " + СокрЛП(УзелВремяОтпр.Значение));
	КонецЕсли;
	
	
	Возврат Новый Структура("ПодтвердившаяОрганизация, ДатаВремяОтправки, ИмяФайла", ОрганизацияСтр, ДатаОтправки, ИмяПоступившегоФайла);
	
КонецФункции

// - Формирование печатной формы подтверждения даты отправки

// + Формирование печатной формы извещения о вводе

Функция СформироватьТабличныйДокументНаОсновеИзвещенияОВводе(Заголовок, ИмяФайла, Тело, НижнийКолонтитул, Подписи = Неопределено)
	
	// формируем таблицу с объявлениями полей узла с общими сведениями
	ПоляОбщихСведений = Новый ТаблицаЗначений;
	ПоляОбщихСведений.Колонки.Добавить("Код");
	ПоляОбщихСведений.Колонки.Добавить("Имя");
	
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИмяОбрабФайла", "Имя обработанного файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдФайл", "Идентификатор файла");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ИдДок", "Идентификатор документа");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "КНД", "Код формы по КНД");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НаимОтч", "Наименование формы");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "НомКорр", "Номер корректировки");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ОтчетПериод", "Отчетный период");
	ДобавитьСтрокуВТаблицуПолейОбщихСведений(ПоляОбщихСведений, "ОтчетГод", "Отчетный год");
	
	
	// получаем бланк отчета из макета
	Бланк = ПолучитьМакет("БланкПечатиДИВ");
	
	// инициализируем итоговый табличный документ
	ТаблДок = Новый ТабличныйДокумент;
	ТаблДок.АвтоМасштаб = Истина;
	
	// выводим секцию заголовка
	Секция_Заголовок = Бланк.ПолучитьОбласть("Секция_Заголовок");
	Секция_Заголовок.Области.Заголовок.Текст = Заголовок;
	Секция_Заголовок.Области.Файл.Текст = ИмяФайла;
	ТаблДок.Вывести(Секция_Заголовок);
	
	// выводим разделитель
	Секция_Разделитель = Бланк.ПолучитьОбласть("Секция_Разделитель");
	ТаблДок.Вывести(Секция_Разделитель);
	
	// пытаемся разобрать уведомление
	СвойстваИзИзвещения = ПолучитьОсновныеСвойстваИзИзвещенияОВводе(Тело);
	
	// если разобрать не удалось - выводим его в виде текста
	Если НЕ ЗначениеЗаполнено(СвойстваИзИзвещения) Тогда
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		ВывестиТекстПострочно(ТаблДок, Секция_Тело, Тело);
		
	// если текст уведомления разобрать удалось, то выводим основную инфорфмацию из него
	Иначе
		
		Секция_Тело = Бланк.ПолучитьОбласть("Секция_Тело");
		
		// выводим пустую строку - разделитель
		Секция_Тело.Области.Тело.Текст = "";
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим информацию о налоговом органе
		Секция_Тело.Области.Тело.Текст = "Налоговый орган, подтверждающий ввод отчета: " + СокрЛП(СвойстваИзИзвещения.НалоговыйОрган);
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим пустую строку - разделитель
		Секция_Тело.Области.Тело.Текст = "";
		ТаблДок.Вывести(Секция_Тело);
		
		// выводим "шапку" общих сведений
		Секция_ЗаголовокГруппы = Бланк.ПолучитьОбласть("Секция_ЗаголовокГруппы");
		Секция_ЗаголовокГруппы.Области.ЗаголовокГруппы.Текст = "Общие сведения:";
		ТаблДок.Вывести(Секция_ЗаголовокГруппы);
		
		// выводим общие сведения поэлементно
		ОбщиеСведенияИзвещения = СвойстваИзИзвещения.ОбщиеСведения;
		Для Каждого ПолеОбщихСведений Из ПоляОбщихСведений Цикл
			Если ОбщиеСведенияИзвещения.Свойство(ПолеОбщихСведений.Код) Тогда
				ЗначениеПоля = ОбщиеСведенияИзвещения[ПолеОбщихСведений.Код];
				Если ЗначениеЗаполнено(ЗначениеПоля) Тогда
					Секция_Тело.Области.Тело.Текст = ПолеОбщихСведений.Имя + ": " + СокрЛП(ЗначениеПоля);
					ТаблДок.Вывести(Секция_Тело);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	// выводим информацию о подписях
	Если Подписи <> Неопределено И Подписи.Количество() <> 0 Тогда
		
		ТаблДок.Вывести(Секция_Разделитель);
		
		Секция_Подписи = Бланк.ПолучитьОбласть("Секция_Подписи");
		ТаблДок.Вывести(Секция_Подписи);
		
		Секция_Подпись = Бланк.ПолучитьОбласть("Секция_Подпись");
		Для Каждого Подпись Из Подписи Цикл
			Секция_Подпись.Области.Подпись.Текст = Подпись.Префикс + " " + Подпись.Владелец;// + " (файл " + Подпись.ИмяФайла + ")";
			ТаблДок.Вывести(Секция_Подпись);
		КонецЦикла;
			
	КонецЕсли;
	
	
	// инициализируем текст нижнего колонтитула
	ТаблДок.НижнийКолонтитул.ТекстСлева = НижнийКолонтитул;
	
	
	Возврат ТаблДок;
	
КонецФункции

Функция ПолучитьОсновныеСвойстваИзИзвещенияОВводе(СтрУведомление)
	
	Если НЕ ЗначениеЗаполнено(СтрУведомление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// считываем подтверждение из файла в дерево XML
	ОписаниеОшибки = "";
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(, СтрУведомление, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Сообщить("Ошибка чтения XML извещения о вводе:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	
	// анализируем XML
	УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелФайл) Тогда
		Сообщить("Некорректная структура XML извещения о вводе: не обнаружен узел ""Файл"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелДокумент) Тогда
		Сообщить("Некорректная структура XML извещения о вводе: не обнаружен узел ""Документ"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	УзелСвИзвещВ = УзелДокумент.Строки.Найти("СвИзвещВ", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелСвИзвещВ) Тогда
		Сообщить("Некорректная структура XML извещения о вводе: не обнаружен узел ""СвИзвещВ"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// разбираем узел с общими сведениями
	ОбщиеСведения = Новый Структура;
	Для Каждого УзелОбщСвед Из УзелСвИзвещВ.Строки Цикл
		ОбщиеСведения.Вставить(УзелОбщСвед.Имя, СокрЛП(УзелОбщСвед.Значение));
	КонецЦикла;
	Если ОбщиеСведения.Свойство("Период") И ОбщиеСведения.Свойство("ПериодНаим") Тогда
		ОбщиеСведения.Вставить("ОтчетныйПериод", ОбщиеСведения.Период + " (" + ОбщиеСведения.ПериодНаим + ")");
	КонецЕсли;
	
	// разбираем сведения о налоговом органе
	УзелКодНоОтпр = УзелДокумент.Строки.Найти("КодНоОтпр", "Имя");
	Если НЕ ЗначениеЗаполнено(УзелКодНоОтпр) Тогда
		Сообщить("Некорректная структура XML извещения о вводе: не обнаружен узел ""КодНоОтпр"".", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	НалоговыйОрган = СокрЛП(УзелКодНоОтпр.Значение);
	
	
	Возврат Новый Структура("НалоговыйОрган, ОбщиеСведения", НалоговыйОрган, ОбщиеСведения);
	
КонецФункции

Функция СохранитьДвоичныеДанныеВоВременныйФайл(Данные)
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	Попытка
		Данные.Получить().Записать(ВремФайл);
		Возврат ВремФайл;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция СформироватьИзвещениеОПолучении(ТранспортноеСообщение)
	
	// проверяем, не сформировано ли уже извещение
	ИмеющиесяИзвещения = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Ложь, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
	Если ИмеющиесяИзвещения.Количество() > 0 Тогда
		// Сообщить("", СтатусСообщения.Важное);
		Возврат Истина;
	КонецЕсли;
	
	// подписываем ДИВ основания, если он еще не подписан
	Если НЕ ПоставитьПодписьОтветственногоЛица(ТранспортноеСообщение, "Шифрование") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// определяем возможные типы документа, извещение о получении которого формируется
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении);
		ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		ТипыДИВ = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо;
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		ТипыДИВ = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка;
	КонецЕсли;
	
	// ищем ДИВ исходного сообщения
	ДИВы = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение.Основание, Ложь, ТипыДИВ);
	Если ДИВы.Количество() = 0 Тогда
		Сообщить("Не удалось создать извещение о получении документа: отсутствует исходный документ в сообщении-основании.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	ДИВы.Колонки.Добавить("ПодписьBase64");
	
	Для Каждого СтрДИВ Из ДИВы Цикл
		
		ИмяФайлаДИВ = СтрДИВ.ИмяФайла;
		
		// ищем подпись под ДИВ
		ПодписиСообщения = ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ПодписьПодДИВ = ПодписиСообщения.Найти(ИмяФайлаДИВ, "ЭЦПИмяПодписанногоФайла");
		Если ПодписьПодДИВ = Неопределено Тогда
			Сообщить("Не удалось создать извещение о получении документа: отсутствует подпись под исходным документом.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// пишем подпись во временный файл
		ВремФайл = ПолучитьИмяВременногоФайла();
		Попытка
			ПодписьПодДИВ.Данные.Получить().Записать(ВремФайл);
		Исключение
		КонецПопытки;
		
		// формируем Base64-представление подписи
		СтрДИВ.ПодписьBase64 = ПрочитатьBase64ИзФайла(ВремФайл);
		Если НЕ ЗначениеЗаполнено(СтрДИВ.ПодписьBase64) Тогда
			Сообщить("Не удалось создать извещение о получении документа: не удалось прочитать данные из файла подписи абонента под исходным документом.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		УдалитьВременныйФайл(ВремФайл);
		
	КонецЦикла;
	
	// формируем имя файла извещения
	UUIDИзвещения = СгенерироватьUUID();
	ИмяФайлаИзвещения = СформироватьИмяФайлаИзвещения(ТранспортноеСообщение, ДИВы, UUIDИзвещения);
	Если НЕ ЗначениеЗаполнено(ИмяФайлаИзвещения) Тогда
		Сообщить("Не удалось создать извещение о получении документа: не удалось сформировать имя файла извещения.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// формируем XML извещения о получении электронного документа
	ТекстИзвещения = СформироватьXMLИзвещенияОПолученииЭлектронногоДокумента(ТранспортноеСообщение, ДИВы, ИмяФайлаИзвещения);
	Если НЕ ЗначениеЗаполнено(ТекстИзвещения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// пишем XML во временный файл в кодировке windows-1251
	ФайлИзвещения = ВыгрузитьТекстВФайл(ТекстИзвещения);
	Если НЕ ЗначениеЗаполнено(ФайлИзвещения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// загружаем файл извещения в ИБ
	ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении, ФайлИзвещения, ИмяФайлаИзвещения, , , , , , , UUIDИзвещения, Перечисления.ТипыСодержимогоФайлов.xml);
	
	// удаляем временный файл с извещением
	УдалитьВременныйФайл(ФайлИзвещения);
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьИмяФайлаИзвещения(ТранспортноеСообщение, ДИВы, UUID)
	
	Префикс = "IP";
	
	// выделяем префикс из имени основного ДИВ основания
	Если ДИВы.Количество() = 1 Тогда
		ОсновнойДИВ = ДИВы[0];
	Иначе
		ОсновнойДИВ = ДИВы.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ, "Тип");
		Если ОсновнойДИВ = Неопределено Тогда
			ОсновнойДИВ = ДИВы[0];
		КонецЕсли;
	КонецЕсли;
	ИмяФайлаДИВ = ОсновнойДИВ.ИмяФайла;
	
	ПрефиксОснования = ВыделитьПрефиксИзИмениФайлаОснования(ИмяФайлаДИВ);
	Если НЕ ЗначениеЗаполнено(ПрефиксОснования) Тогда
		// если префикс выделить не удалось, то пишем хоть какой-нибудь (это лучше, чем не отправлять извещение вообще)
		ПрефиксОснования = "NO_PREF";
	КонецЕсли;
	
	// формируем идентификатор получателя
	ИдентификаторПолучателя = СформироватьИдентификаторПолучателя(ТранспортноеСообщение);
	
	// формируем идентификатор отправителя
	ИдентификаторОтправителя = СформироватьИдентификаторОтправителя(ТранспортноеСообщение);
	
	// формируем строку с текущей датой
	GGGGMMDD = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	
	// 
	ИдентификаторФайла = UUID;
	
	//
	РасширениеФайла = "xml";
	
	// собираем имя файла извещения из составляющих
	ИмяФайлаИзвещения = Префикс + "_" + ПрефиксОснования + "_" + ИдентификаторПолучателя + "_" + ИдентификаторПолучателя + "_" + ИдентификаторОтправителя + "_" + GGGGMMDD + "_" + ИдентификаторФайла + "." + РасширениеФайла;
	Возврат ИмяФайлаИзвещения;
	
КонецФункции

Функция СформироватьИдентификаторПолучателя(ТранспортноеСообщение)
	
	// если тип сообщения - ИзвещениеПодтверждениеНП, то идентификатор получателя
	// берется из имени контейнера сообщения-основания
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		Возврат ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(ТранспортноеСообщение.Основание);
	ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП
	ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		Возврат СокрЛП(ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация.Код);
	Иначе
		Получатель = ТранспортноеСообщение.Получатель;
		ТипПолучателя = ТипЗнч(Получатель);
		Если ТипПолучателя = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
			Возврат СокрЛП(ТранспортноеСообщение.УчетнаяЗапись.ИдентификаторСпецоператора);
		ИначеЕсли ТипПолучателя = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
			Возврат СокрЛП(Получатель.Код);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция СформироватьИдентификаторОтправителя(ТранспортноеСообщение)
	
	Если ТранспортноеСообщение.УчетнаяЗапись.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя Тогда
		Возврат СокрЛП(ТранспортноеСообщение.УчетнаяЗапись.ИННУполномоченногоПредставителя) + СокрЛП(ТранспортноеСообщение.УчетнаяЗапись.КППУполномоченногоПредставителя);
	Иначе
		Отправитель = ТранспортноеСообщение.Отправитель;
		Возврат ?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Отправитель), СокрЛП(Отправитель.ИНН), СокрЛП(Отправитель.ИНН) + СокрЛП(Отправитель.КПП));
	КонецЕсли;
	
КонецФункции

Функция ВыделитьПрефиксИзИмениФайлаОснования(ИмяФайлаДИВ)
	
	РасширениеФайлаДИВ = нрег(РасширениеФайла(ИмяФайлаДИВ));
	Если РасширениеФайлаДИВ = "txt" Тогда // если это текстовый файл, то префикс - это то, что до первой цифры, кроме случая протокола 2-НДФЛ
		
		ПрефиксПротокол2НДФЛ1 = "ПРОТ_ДОХОД_2НДФЛ"; // префикс протокола 2-НДФЛ
		ПрефиксПротокол2НДФЛ2 = "PROT_NO_NDFL2"; // префикс протокола 2-НДФЛ
		ПрефиксРассылки = "IU_RASS"; // префикс файла рассылки
		Если Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксПротокол2НДФЛ1)) = ПрефиксПротокол2НДФЛ1 Тогда
			Возврат ПрефиксПротокол2НДФЛ1;
		ИначеЕсли Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксПротокол2НДФЛ2)) = ПрефиксПротокол2НДФЛ2 Тогда
			Возврат ПрефиксПротокол2НДФЛ2;
		ИначеЕсли Лев(ИмяФайлаДИВ, СтрДлина(ПрефиксРассылки)) = ПрефиксРассылки Тогда
			Возврат ПрефиксРассылки;
		Иначе
			СтрЦифры = "0123456789";
			Для Инд = 1 По СтрДлина(ИмяФайлаДИВ) Цикл
				ТекСимв = Сред(ИмяФайлаДИВ, Инд, 1);
				Если Найти(СтрЦифры, ТекСимв) <> 0 Тогда
					Возврат Лев(ИмяФайлаДИВ, Инд - 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Разделитель = "_";
		ИндексВхожденияРазделителя = 0;
		Для Инд = 1 По СтрДлина(ИмяФайлаДИВ) Цикл
			ТекСимв = Сред(ИмяФайлаДИВ, Инд, 1);
			Если ТекСимв = Разделитель Тогда
				ИндексВхожденияРазделителя = ИндексВхожденияРазделителя + 1;
				Если ИндексВхожденияРазделителя = 2 Тогда
					Возврат СтрЗаменить(Лев(ИмяФайлаДИВ, Инд - 1), "_", "");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция СформироватьСведенияОПолучателеИзвещения(ТранспортноеСообщение)
	
	Если ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		УчастникДокументооборота = ТранспортноеСообщение.Получатель; // сервер документооборота СОС или ФНС
	//ИначеЕсли ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП
	//ИЛИ ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
	//	УчастникДокументооборота = ТранспортноеСообщение.Получатель; // НО-посредник (при пересылке для крупнейших)
	Иначе
		УчастникДокументооборота = ТранспортноеСообщение.ЦиклОбмена.ВнешняяОрганизация;
	КонецЕсли;
	
	Возврат СформироватьСведенияОбУчастникеДокументооборота(УчастникДокументооборота, ТранспортноеСообщение);
	
КонецФункции

Функция СформироватьСведенияОбОтправителеИзвещения(ТранспортноеСообщение)
	
	Возврат СформироватьСведенияОбУчастникеДокументооборота(ТранспортноеСообщение.Отправитель, ТранспортноеСообщение);
	
КонецФункции

Функция СформироватьСведенияОбУчастникеДокументооборота(Участник, ТранспортноеСообщение)
	
	Сведения = Новый Структура;
	
	УчетнаяЗапись = ТранспортноеСообщение.УчетнаяЗапись;
	
	ТипУчастника = ТипЗнч(Участник);
	Если ТипУчастника = Тип("СправочникСсылка.Организации") Тогда
		
		Сведения.Вставить("ТипУчастника", "Организация");
		Сведения.Вставить("Email", УчетнаяЗапись.АдресЭлектроннойПочты);
		
		Если УчетнаяЗапись.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя Тогда
			
			ЭтоФизЛицо = (СтрДлина(СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя)) = 12);
			Сведения.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
			Если ЭтоФизЛицо Тогда
				
				Сведения.Вставить("ИНН", СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя));
				
				ФИО = РазложитьФИО(СокрЛП(УчетнаяЗапись.ПолноеНаименованиеУполномоченногоПредставителя));
				Сведения.Вставить("Фамилия", СокрЛП(ФИО.Фамилия));
				Сведения.Вставить("Имя", СокрЛП(ФИО.Имя));
				Сведения.Вставить("Отчество", СокрЛП(ФИО.Отчество));
				
			Иначе
				СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Участник, , "НаимЮЛПол, ИННЮЛ, КППЮЛ");
				Сведения.Вставить("Наименование", СокрЛП(УчетнаяЗапись.ПолноеНаименованиеУполномоченногоПредставителя));
				Сведения.Вставить("ИНН", СокрЛП(УчетнаяЗапись.ИННУполномоченногоПредставителя));
				Сведения.Вставить("КПП", СокрЛП(УчетнаяЗапись.КППУполномоченногоПредставителя));
			КонецЕсли;
			
		Иначе
			
			ЭтоФизЛицо = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Участник);
			Сведения.Вставить("ЭтоФизЛицо", ЭтоФизЛицо);
			Если ЭтоФизЛицо Тогда
				
				Сведения.Вставить("ИНН", СокрЛП(Участник.ИНН));
				
				ФИО = ФИОИндивидуальногоПредпринимателя(Участник);
				Сведения.Вставить("Фамилия", СокрЛП(ФИО.Фамилия));
				Сведения.Вставить("Имя", СокрЛП(ФИО.Имя));
				Сведения.Вставить("Отчество", СокрЛП(ФИО.Отчество));
				
			Иначе
				СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Участник, , "НаимЮЛПол, ИННЮЛ, КППЮЛ");
				Сведения.Вставить("Наименование", СокрЛП(СведенияОбОрганизации.НаимЮЛПол));
				Сведения.Вставить("ИНН", СокрЛП(СведенияОбОрганизации.ИННЮЛ));
				Сведения.Вставить("КПП", СокрЛП(СведенияОбОрганизации.КППЮЛ));
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		
		Сведения.Вставить("ТипУчастника", "НалоговыйОрган");
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			Сведения.Вставить("Email", Участник.АдресЭлектроннойПочтыДляЦелейДокументооборотаСНалогоплательщиками);
		Иначе
			Сведения.Вставить("Email", ПолучитьEmailОтправителяИзПодтвержденияОПолучении(ТранспортноеСообщение.ЦиклОбмена));
		КонецЕсли;
		
		Сведения.Вставить("Код", СокрЛП(Участник.Код));
		
	ИначеЕсли ТипУчастника = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
		
		// особая обработка, если описывается получатель ИзвещениеПодтверждениеНП при обмене напрямую
		Если УчетнаяЗапись.ОбменНапрямую И ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
			
			Сведения.Вставить("ТипУчастника", "НалоговыйОрган");
			Сведения.Вставить("Код", ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(ТранспортноеСообщение.Основание));
			Сведения.Вставить("Email", Участник.АдресЭлектроннойПочтыФНС);
			
		Иначе
			
			Сведения.Вставить("ТипУчастника", "СерверДокументооборота");
			Сведения.Вставить("Email", Участник.АдресЭлектроннойПочтыФНС);
			
			Сведения.Вставить("Идентификатор", СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора));
			Сведения.Вставить("Наименование", СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора)); // !!!
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Сведения;
	
КонецФункции

Функция ПолучитьEmailОтправителяИзПодтвержденияОПолучении(ЦиклОбмена)
	
	// получаем извещение о получении декларации или 2-НДФЛ
	ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО);
	Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
		ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО);
		Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
			ИзвещениеДекларацияНО = ПолучитьСообщениеЦиклаОбмена(ЦиклОбмена, Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО);
			Если НЕ ЗначениеЗаполнено(ИзвещениеДекларацияНО) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// получаем данные извещения
	ИзвещенияОПолучении = ПолучитьВложенияТранспортногоСообщения(ИзвещениеДекларацияНО, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
	Если ИзвещенияОПолучении.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ДанныеИзвещенияОПолучении = ИзвещенияОПолучении[0].Данные;
	
	// выгружаем данные извещения во временный файл
	Попытка
		ФайлИзвещения = ПолучитьИмяВременногоФайла();
		ДанныеИзвещенияОПолучении.Получить().Записать(ФайлИзвещения);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	// создаем дерево из файла
	ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ФайлИзвещения);
	УдалитьВременныйФайл(ФайлИзвещения);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// находим узел ПодтвДок
	УзелПодтвДок = ДеревоXML.Строки.Найти("ПодтвДок", "Имя", Истина);
	Если УзелПодтвДок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// находим атрибут E-mail
	УзелEmail = УзелПодтвДок.Строки.Найти("E-mail", "Имя");
	Если УзелEmail = Неопределено ИЛИ НЕ ЗначениеЗаполнено(УзелEmail.Значение) Тогда
		Возврат Неопределено;
	Иначе
		Возврат СокрЛП(УзелEmail.Значение);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(ПодтверждениеДатыОтправки)
	
	КонтейнерыОснования = ПолучитьТранспортныйКонтейнер(ПодтверждениеДатыОтправки);
	Если КонтейнерыОснования.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ИмяФайлаКонтейнера = КонтейнерыОснования[0].ИмяФайла;
	
	КомпонентыИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаКонтейнера, "_");
	Если КомпонентыИмени.Количество() < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СокрЛП(КомпонентыИмени[1]);
	
КонецФункции

Функция ИмяФайлаБезРасширения(ИмяФайлаСРасширением)
	
	ДлинаИмениФайла = СтрДлина(ИмяФайлаСРасширением);
	Для Инд = 1 По ДлинаИмениФайла Цикл
		Если Сред(ИмяФайлаСРасширением, ДлинаИмениФайла - Инд + 1, 1) = "." Тогда
			Возврат Лев(ИмяФайлаСРасширением, ДлинаИмениФайла - Инд);
		КонецЕсли;
	КонецЦикла;
	Возврат ИмяФайлаСРасширением;
	
КонецФункции

Функция СформироватьXMLИзвещенияОПолученииЭлектронногоДокумента(ТранспортноеСообщение, ДИВы, ИмяФайлаИзвещения)
	
	// выделяем имя файла без расширения из короткого имени файла извещения
	РасширениеФайлаИзвещения = РасширениеФайла(ИмяФайлаИзвещения);
	ДлинаРасширенияИмениФайлаИзвещения = СтрДлина(РасширениеФайлаИзвещения);
	ИмяФайлаИзвещенияБезРасширения = Лев(ИмяФайлаИзвещения, СтрДлина(ИмяФайлаИзвещения) - ДлинаРасширенияИмениФайлаИзвещения - 1);
	
	// определяем дату получения основания
	ДатаПолученияОснования = ТранспортноеСообщение.Основание.ДатаТранспорта;
	
	// получаем сведения о получателе
	СведенияОПолучателе = СформироватьСведенияОПолучателеИзвещения(ТранспортноеСообщение);
	Если НЕ ЗначениеЗаполнено(СведенияОПолучателе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем сведения об отправителе
	СведенияОбОтправителе = СформироватьСведенияОбОтправителеИзвещения(ТранспортноеСообщение);
	Если НЕ ЗначениеЗаполнено(СведенияОбОтправителе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем XML-дерево извещения
	ДеревоXML = СоздатьДеревоXML();
	
	// иниицализируем атрибуты корневого элемента
	ДобавитьУзелXML(ДеревоXML, "ИдФайл", Истина, ИмяФайлаИзвещенияБезРасширения);
	ДобавитьУзелXML(ДеревоXML, "ВерсПрог", Истина, Лев(РегламентированнаяОтчетность.СформироватьВерсПрог(), 40));
	ДобавитьУзелXML(ДеревоXML, "ВерсФорм", Истина, "5.03");
	
	// создаем узел Документ
	УзелДокумент = ДобавитьУзелXML(ДеревоXML, "Документ");
	ДобавитьУзелXML(УзелДокумент, "КНД", Истина, "1166008");
	
	// добавляем сведения об организации
	УзелПодтвДок = ДобавитьУзелXML(УзелДокумент, "ПодтвДок");
	ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелПодтвДок, СведенияОбОтправителе);
	
	// создаем узел СвИзвещП
	УзелСвИзвещП = ДобавитьУзелXML(УзелДокумент, "СвИзвещП");
	ДобавитьУзелXML(УзелСвИзвещП, "ДатаПол", Истина, Формат(ДатаПолученияОснования, "ДФ=dd.MM.yyyy"));
	ДобавитьУзелXML(УзелСвИзвещП, "ВремяПол", Истина, Формат(ДатаПолученияОснования, "ДФ=HH.mm.ss"));
	
	Для Каждого СтрДИВ Из ДИВы Цикл
		
		// создаем узел СведПолФайл
		УзелСведПолФайл = ДобавитьУзелXML(УзелСвИзвещП, "СведПолФайл");
		ДобавитьУзелXML(УзелСведПолФайл, "ИмяПостФайла", Истина, ИмяФайлаБезРасширения(СтрДИВ.ИмяФайла));
		
		// добавляем подпись под ДИВ
		ДобавитьУзелXML(УзелСведПолФайл, "ЭЦППолФайл", , СтрДИВ.ПодписьBase64);
		
	КонецЦикла;
	
	//// добавляем сведения об адресате
	//УзелАдрДок = ДобавитьУзелXML(УзелДокумент, "АдрДок");
	//ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелАдрДок, СведенияОПолучателе);
	//
	//// добавляем сведения об организации
	//УзелПодтвДок = ДобавитьУзелXML(УзелДокумент, "ПодтвДок");
	//ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелПодтвДок, СведенияОбОтправителе);
	
	// добавляем сведения об отправителе исходного документа
	УзелОтпрДок = ДобавитьУзелXML(УзелДокумент, "ОтпрДок");
	ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелОтпрДок, СведенияОПолучателе);
	
	// добавляем сведения о получателе исходного документа
	УзелПолДок = ДобавитьУзелXML(УзелДокумент, "ПолДок");
	ЗаполнитьУзелСведениямиОбУчастникеЭДО(УзелПолДок, СведенияОбОтправителе);
	
	// формируем XML-строку на основе дерева
	ТекстXML = ВыгрузитьДеревоВXML_ПФР(ДеревоXML, "Файл");
	
	Возврат ТекстXML;
	
КонецФункции

Процедура ЗаполнитьУзелСведениямиОбУчастникеЭДО(Узел, Сведения)
	
	ТипУчастникаЭДО = Сведения.ТипУчастника;
	Если ТипУчастникаЭДО = "Организация" Тогда
		
		Если ЗначениеЗаполнено(Сведения.Email) Тогда
			ДобавитьУзелXML(Узел, "E-mail", Истина, Сведения.Email);
		КонецЕсли;
		
		Если Сведения.ЭтоФизЛицо Тогда
			
			УзелФЛ = ДобавитьУзелXML(Узел, "ФЛ");
			ДобавитьУзелXML(УзелФЛ, "ИННФЛ", Истина, Сведения.ИНН);
			
			УзелФИО = ДобавитьУзелXML(УзелФЛ, "ФИО");
			ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Сведения.Фамилия);
			ДобавитьУзелXML(УзелФИО, "Имя", Истина, Сведения.Имя);
			Если ЗначениеЗаполнено(Сведения.Отчество) Тогда
				ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Сведения.Отчество);
			КонецЕсли;
			
		Иначе
			
			УзелЮЛ = ДобавитьУзелXML(Узел, "ЮЛ");
			ДобавитьУзелXML(УзелЮЛ, "НаимОрг", Истина, Сведения.Наименование);
			ДобавитьУзелXML(УзелЮЛ, "ИННЮЛ", Истина, Сведения.ИНН);
			ДобавитьУзелXML(УзелЮЛ, "КПП", Истина, Сведения.КПП);
			
		КонецЕсли;
		
	ИначеЕсли ТипУчастникаЭДО = "НалоговыйОрган" Тогда
		
		Если ЗначениеЗаполнено(Сведения.Email) Тогда
			ДобавитьУзелXML(Узел, "E-mail", Истина, Сведения.Email);
		Иначе
			ДобавитьУзелXML(Узел, "E-mail", Истина, "-");
		КонецЕсли;
		ДобавитьУзелXML(Узел, "КодНО", , Сведения.Код);
		
	ИначеЕсли ТипУчастникаЭДО = "СерверДокументооборота" Тогда
		
		Если ЗначениеЗаполнено(Сведения.Email) Тогда
			ДобавитьУзелXML(Узел, "E-mail", Истина, Сведения.Email);
		КонецЕсли;
		
		УзелСпецоперат = ДобавитьУзелXML(Узел, "СпецОперат");
		ДобавитьУзелXML(УзелСпецоперат, "НаимОрг", Истина, Сведения.Наименование);
		ДобавитьУзелXML(УзелСпецоперат, "ИденСОС", Истина, Сведения.Идентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСоответствиеФИОПодписантаВФайлеВыгрузкиФИОВСертификате(ФайлОтчетности, ИмяФайлаОтчетности, ОбъектСертификат);
	
	Если НЕ ЗначениеЗаполнено(ФайлОтчетности) ИЛИ НЕ ЗначениеЗаполнено(ИмяФайлаОтчетности) ИЛИ НЕ ЗначениеЗаполнено(ОбъектСертификат) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем структуру с ФИО подписантов, полученных из текстов выгрузки
	ФИОПодписантов = Новый Массив;
	
	РасширениеФайлаОтчетности = РасширениеФайла(ИмяФайлаОтчетности);
	Если нрег(РасширениеФайлаОтчетности) = "xml" Тогда // пока проверка реализована только для xml-форматов
	
		// загружаем отчетность в дерево
		ДеревоXML = ЗагрузитьXMLВДеревоЗначений(ФайлОтчетности);
		Если ДеревоXML = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// ищем узел "Файл"
		УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
		Если УзелФайл = Неопределено Тогда // неизвестный формат
			Возврат Неопределено;
		КонецЕсли;
		
		// ищем атрибут ВерсФорм
		УзелВерсФорм = УзелФайл.Строки.Найти("ВерсФорм", "Имя");
		Если УзелВерсФорм = Неопределено Тогда // неизвестный формат
			Возврат Неопределено;
		КонецЕсли;
		
		Если Лев(УзелВерсФорм.Значение, 2) = "4." Тогда // формат 4.xx
			
			УзлыФИО = Новый Структура("СведРукОрг, СвРукОрг, ФИОПред, ФИОИП, ФИОФЛ");
			Для Каждого УзелФИО Из УзлыФИО Цикл
				РезультатПоиска = УзелФайл.Строки.Найти(УзелФИО.Ключ, "Имя", Истина);
				Если РезультатПоиска <> Неопределено Тогда
					УзлыФИО.Вставить(УзелФИО.Ключ, РезультатПоиска);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого УзелФИО Из УзлыФИО Цикл
				Если УзелФИО.Значение <> Неопределено Тогда
					
					АтрибутыФИО = ПолучитьАтрибутыУзла(УзелФИО.Значение);
					
					ФамилияПодписанта = "";
					ИмяПодписанта = "";
					ОтчествоПодписанта = "";
					
					АтрибутыФИО.Свойство("Фамилия", ФамилияПодписанта);
					АтрибутыФИО.Свойство("Имя", ИмяПодписанта);
					АтрибутыФИО.Свойство("Отчество", ОтчествоПодписанта);
					
					ФамилияПодписанта = СокрЛП(СокрЛП(ФамилияПодписанта) + " " + СокрЛП(ИмяПодписанта) + " " + СокрЛП(ОтчествоПодписанта));
					ФИОПодписантов.Добавить(ФамилияПодписанта);
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе // формат 5.xx и, возможно, старше
			
			// ищем узел "Документ"
			УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
			Если УзелДокумент = Неопределено Тогда // значит это не формат 5
				Возврат Неопределено;
			КонецЕсли;
			
			// ищем узел "Подписант"
			УзлыПодписант = УзелДокумент.Строки.НайтиСтроки(Новый Структура("Имя", "Подписант"));
			Если УзлыПодписант.Количество() = 0 Тогда // значит это не формат 5
				Возврат Неопределено;
			КонецЕсли;
			
			Для Каждого УзелПодписант Из УзлыПодписант Цикл
				
				УзелФИО = УзелПодписант.Строки.Найти("ФИО", "Имя");
				Если УзелФИО = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				АтрибутыФИО = ПолучитьАтрибутыУзла(УзелФИО);
				
				ФамилияПодписанта = "";
				ИмяПодписанта = "";
				ОтчествоПодписанта = "";
				
				АтрибутыФИО.Свойство("Фамилия", ФамилияПодписанта);
				АтрибутыФИО.Свойство("Имя", ИмяПодписанта);
				АтрибутыФИО.Свойство("Отчество", ОтчествоПодписанта);
				
				ФамилияПодписанта = СокрЛП(СокрЛП(ФамилияПодписанта) + " " + СокрЛП(ИмяПодписанта) + " " + СокрЛП(ОтчествоПодписанта));
				ФИОПодписантов.Добавить(ФамилияПодписанта);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ПоказателиФИО = Новый Структура("ФИО, ФИОРук, ФИОБух, ФИОУпПред, УпПред");
		
		ТекстВыгрузки = ПрочитатьТекстИзФайла(ФайлОтчетности, КодировкаТекста.OEM);
		Для Инд = 1 По СтрЧислоСтрок(ТекстВыгрузки) Цикл
			
			ТекСтр = СтрПолучитьСтроку(ТекстВыгрузки, Инд);
			Для Каждого ПоказательФИО Из ПоказателиФИО Цикл
				КодПоказателя = ПоказательФИО.Ключ;
				Если ВРЕГ(Лев(ТекСтр, СтрДлина(КодПоказателя) + 1)) = ВРЕГ(КодПоказателя + ":") Тогда
					ФИОЗнач = СтрЗаменить(СокрЛП(Сред(ТекСтр, СтрДлина(КодПоказателя) + 2)), ",", " ");
					Если ЗначениеЗаполнено(ФИОЗнач) Тогда
						ПоказателиФИО.Вставить(КодПоказателя, ФИОЗнач);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ПоказательФИО Из ПоказателиФИО Цикл
			ФИОПодписантов.Добавить(ПоказательФИО.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	// получаем ФИО из свойств сертификата
	СвойстваВладельца = РазобратьСтрокуСвойств(СокрЛП(ОбъектСертификат.Владелец));
	ФИОПодписантаИзСертификата = СокрЛП(СвойстваВладельца["CN"]);
	Если НЕ ЗначениеЗаполнено(ФИОПодписантаИзСертификата) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// сравниваем ФИО из сертификата с каждым из ФИО из файла
	Для Каждого ФИОПодписантаИзФайла Из ФИОПодписантов Цикл
		
		Если НЕ ЗначениеЗаполнено(ФИОПодписантаИзФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВРЕГ(Лев(ФИОПодписантаИзФайла, СтрДлина(ФИОПодписантаИзСертификата))) = ВРЕГ(ФИОПодписантаИзСертификата)
		ИЛИ ВРЕГ(Лев(ФИОПодписантаИзСертификата, СтрДлина(ФИОПодписантаИзФайла))) = ВРЕГ(ФИОПодписантаИзФайла) Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьНеобходимостьВыгрузкиСведенийОДоверенностиПредставителя(ТекстВыгрузки, ИмяФайлаОтчетности) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТекстВыгрузки) ИЛИ НЕ ЗначениеЗаполнено(ИмяФайлаОтчетности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РасширениеФайлаОтчетности = РасширениеФайла(ИмяФайлаОтчетности);
	Если нрег(РасширениеФайлаОтчетности) = "xml" Тогда // пока проверка реализована только для xml-форматов
		
		// загружаем отчетность в дерево
		ДеревоXML = ЗагрузитьXMLВДеревоЗначений(, ТекстВыгрузки);
		Если ДеревоXML = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// ищем узел "Файл"
		УзелФайл = ДеревоXML.Строки.Найти("Файл", "Имя");
		Если УзелФайл = Неопределено Тогда // неизвестный формат
			Возврат Неопределено;
		КонецЕсли;
		
		// ищем атрибут ВерсФорм
		УзелВерсФорм = УзелФайл.Строки.Найти("ВерсФорм", "Имя");
		Если УзелВерсФорм = Неопределено Тогда // неизвестный формат
			Возврат Неопределено;
		КонецЕсли;
		
		Если Лев(УзелВерсФорм.Значение, 2) = "4." Тогда // формат 4.xx
			
			// если в файле присутствует узел СвПред, то отчетность подписана представителем
			Возврат (УзелФайл.Строки.Найти("СвПред", "Имя", Истина) <> Неопределено);
			
		Иначе // формат 5.xx и, возможно, старше
			
			// сначала ищем признак ПрПодп
			УзелДокумент = УзелФайл.Строки.Найти("Документ", "Имя");
			Если УзелДокумент <> Неопределено Тогда
				УзелПодписант = УзелДокумент.Строки.Найти("Подписант", "Имя");
				Если УзелПодписант <> Неопределено Тогда
					УзелПрПодп = УзелПодписант.Строки.Найти("ПрПодп", "Имя");
					Если УзелПрПодп <> Неопределено Тогда
						Возврат (УзелПрПодп = "2");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// если не нашли, то ищем СвПред, как в форматах 4.xx (такой формат 5, например, в отчете "ЕСН адвокатов")
			Возврат (УзелФайл.Строки.Найти("СвПред", "Имя", Истина) <> Неопределено);
			
		КонецЕсли;
		
	Иначе // форматы 2 и 3
		
		ПоказателиФИОПредставителей = Новый Структура("ФИОУпПред, УпПред");
		
		Для Инд = 1 По СтрЧислоСтрок(ТекстВыгрузки) Цикл
			
			ТекСтр = СтрПолучитьСтроку(ТекстВыгрузки, Инд);
			Для Каждого ПоказательФИОПодписанта Из ПоказателиФИОПредставителей Цикл
				КодПоказателя = ПоказательФИОПодписанта.Ключ;
				Если ВРЕГ(Лев(ТекСтр, СтрДлина(КодПоказателя) + 1)) = ВРЕГ(КодПоказателя + ":") Тогда
					ФИОЗнач = СтрЗаменить(СокрЛП(Сред(ТекСтр, СтрДлина(КодПоказателя) + 2)), ",", " ");
					Если ЗначениеЗаполнено(ФИОЗнач) Тогда
						ПоказателиФИОПредставителей.Вставить(КодПоказателя, ФИОЗнач);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого ПоказательФИОПредставителя Из ПоказателиФИОПредставителей Цикл
			
			ФИОПредставителя = ПоказательФИОПредставителя.Значение;
			Если НЕ ЗначениеЗаполнено(ФИОПредставителя) Тогда
				Продолжить;
			КонецЕсли;
			
			// удаляем запятые и тире
			ФИОПредставителя = СтрЗаменить(ФИОПредставителя, ",", "");
			ФИОПредставителя = СтрЗаменить(ФИОПредставителя, "-", "");
			
			// если что-то осталось, то ФИО представителя определено
			Если ЗначениеЗаполнено(ФИОПредставителя) Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции

Функция ПодписатьСообщениеФНС(Сообщение, парамТипыДИВ = Неопределено, СообщениеДокументыКоторогоПодписываются = Неопределено, СертификатПодписанта = Неопределено, ИмяСгенерированногоФайлаЭЦП = Неопределено)
	
	// определяем массив ДИВ
	Если ТипЗнч(парамТипыДИВ) = Тип("Массив") Тогда
		ТипыДИВ = парамТипыДИВ;
	Иначе
		ТипыДИВ = Новый Массив;
		ТипыДИВ.Добавить(парамТипыДИВ);
	КонецЕсли;
	
	// определяем набор документов, которые должны быть подписаны
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Сообщение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение.Основание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение.Основание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение.Основание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение.Основание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		КонецЕсли;
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		
		Если СообщениеДокументыКоторогоПодписываются = Неопределено Тогда
			СообщениеДокументыКоторогоПодписываются = Новый Массив;
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение);
			СообщениеДокументыКоторогоПодписываются.Добавить(Сообщение.Основание);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(парамТипыДИВ) Тогда
			ТипыДИВ = Новый Массив;
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
			ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		КонецЕсли;
		
	КонецЕсли;
	
	
	// формируем массив сертификатов
	УчетнаяЗапись = Сообщение.УчетнаяЗапись;
	Если СертификатПодписанта = Неопределено Тогда
		СертификатыПодписантов = Новый Массив;
		СертификатыПодписантов.Добавить("Руководитель");
		Если ЗначениеЗаполнено(УчетнаяЗапись.СертификатГлавногоБухгалтера) Тогда
			СертификатыПодписантов.Добавить("Главный бухгалтер");
		КонецЕсли;
	ИначеЕсли ТипЗнч(СертификатПодписанта) = Тип("Строка") ИЛИ ТипЗнч(СертификатПодписанта) = Тип("Структура") Тогда
		СертификатыПодписантов = Новый Массив;
		СертификатыПодписантов.Добавить(СертификатПодписанта);
	Иначе
		СертификатыПодписантов = СертификатПодписанта;
	КонецЕсли;
	
	// получаем объекты сертификатов
	Для Инд = 0 По СертификатыПодписантов.Количество() - 1 Цикл
		Серт = СертификатыПодписантов[Инд];
		Если ТипЗнч(Серт) = Тип("Строка") Тогда
			ОбъектСерт = ПолучитьСертификат(УчетнаяЗапись, Серт);
			Если НЕ ЗначениеЗаполнено(ОбъектСерт) Тогда
				Сообщить("Не удалось подписать сообщение сертификатом ответственного лица """ + Серт + """: не удалось получить свойства сертификата.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			СертификатыПодписантов[Инд] = ОбъектСерт;
		КонецЕсли;
	КонецЦикла;
	
	// проверяем сертификаты
	Для Каждого Серт Из СертификатыПодписантов Цикл
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(Серт);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Сообщить("Ошибка проверки сертификата " + ПредставлениеСертификатаПоСвойствам(Серт) + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	
	// подписываем каждым из сертификатов
	ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(СообщениеДокументыКоторогоПодписываются, , ТипыДИВ);
	Подписи = ПолучитьВложенияТранспортногоСообщения(Сообщение, , Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	
	Для Каждого ОбъектСертификат Из СертификатыПодписантов Цикл
	
		// определяем какие сообщения без подписи текущего подписанта
		ТребующиеПодписания = Новый Массив;
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			ПодписиПодФайлом = Подписи.НайтиСтроки(Новый Структура("ЭЦПИмяПодписанногоФайла, ЭЦПСертификат", ВложениеДИВ.ИмяФайла, ОбъектСертификат.Отпечаток));
			Если ПодписиПодФайлом.Количество() = 0 Тогда
				ТребующиеПодписания.Добавить(ВложениеДИВ);
			КонецЕсли;
		КонецЦикла;
		
		Если ТребующиеПодписания.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// создаем массив с именами документов, требующих подписания
		ТребующиеПодписанияМассив = Новый Массив;
		Для Каждого ТребующийПодписанияСтр Из ТребующиеПодписания Цикл
			ТребующиеПодписанияМассив.Добавить(ТребующийПодписанияСтр.ИмяФайла);
		КонецЦикла;
		
		// последовательно подписываем
		ДокументыНаПодпись = ПолучитьВложенияТранспортногоСообщения(СообщениеДокументыКоторогоПодписываются, Истина, , ТребующиеПодписанияМассив);
		Для Каждого СтрДокументНаПодпись Из ДокументыНаПодпись Цикл
			
			Состояние("Подписание файла """ + СтрДокументНаПодпись.ИмяФайла + """...");
			
			// выгружаем во временный файл
			ВременныйФайл = ПолучитьИмяВременногоФайла();
			Попытка
				СтрДокументНаПодпись.Данные.Получить().Записать(ВременныйФайл);
			Исключение
				Сообщить("Ошибка выгрузки документа """ + СтрДокументНаПодпись.ИмяФайла + """ во временный файл для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
			
			// проверяем на соответствие имени подписанта в файле выгрузки имени в свойствах сертификата
			Если СтрДокументНаПодпись.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности Тогда
				РезультатПроверки = ПроверитьСоответствиеФИОПодписантаВФайлеВыгрузкиФИОВСертификате(ВременныйФайл, СтрДокументНаПодпись.ИмяФайла, ОбъектСертификат);
				Если РезультатПроверки = Ложь Тогда // РезультатПроверки может быть Неопределено
					Сообщить("Внимание! ФИО подписанта отчета не соответствует ФИО ответственного лица, указанном в сертификате ключа подписи!
							|Вероятно, отчетность не будет принята налоговым органом!", СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
			
			// подписываем
			КороткоеИмяФайлаПодписи = СгенерироватьИмяФайлаДокументаВСоставеПакета();
			ФайлПодписи = ПодписатьФайлPKCS7(ОбъектСертификат, ВременныйФайл, КаталогВременныхФайлов() + КороткоеИмяФайлаПодписи);
			Если ФайлПодписи = Неопределено Тогда
				УдалитьВременныйФайл(ВременныйФайл);
				Возврат Ложь;
			КонецЕсли;
			
			// сохраняем в регистр
			ИмяСгенерированногоФайлаЭЦП = КороткоеИмяФайлаПодписи;
			ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись, ФайлПодписи, ИмяСгенерированногоФайлаЭЦП, , СтрДокументНаПодпись.ИмяФайла, ОбъектСертификат.Отпечаток, Перечисления.СтатусыПроверкиЭЦП.Валидна, Истина);
			
			// удаляем временные файлы
			УдалитьВременныйФайл(ВременныйФайл);
			УдалитьВременныйФайл(ФайлПодписи);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьОписаниеСведенийДляСообщенияФНС(Сообщение)
	
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		
		// получаем список вложений сообщения
		ТипыВложений = Новый Массив;
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ);
		Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, , ТипыВложений);
		
		// если описание сведений уже сформировано, то прервемся
		Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ, "Тип") <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		// генерируем файл описания сведений
		КороткоеИмяФайла = Неопределено;
		ФайлОписаниеСведений = СформироватьОписаниеСведений2НДФЛ(Сообщение, Вложения, КороткоеИмяФайла);
		Если ФайлОписаниеСведений = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// загружаем файл в содержимое пакета
		ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ, ФайлОписаниеСведений, "TR_NDFL2.xml", , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		
		// получаем список вложений сообщения
		ТипыВложений = Новый Массив;
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка);
		Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, , ТипыВложений);
		
		// если описание сведений уже сформировано, то прервемся
		Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка, "Тип") <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		// генерируем файл описания сведений
		КороткоеИмяФайла = Неопределено;
		ФайлОписаниеСведений = СформироватьОписаниеСведенийОбращенияПисьмаРассылки(Сообщение, Вложения, КороткоеИмяФайла);
		Если ФайлОписаниеСведений = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// загружаем файл в содержимое пакета
		ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка, ФайлОписаниеСведений, "TR_PISRAS.xml", , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		
		// получаем список вложений сообщения
		ТипыВложений = Новый Массив;
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос);
		Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, , ТипыВложений);
		
		// если описание сведений уже сформировано, то прервемся
		Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос, "Тип") <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		// генерируем файл описания сведений
		КороткоеИмяФайла = Неопределено;
		ФайлОписаниеСведений = СформироватьОписаниеСведенийЗапроса(Сообщение, Вложения, КороткоеИмяФайла);
		Если ФайлОписаниеСведений = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// загружаем файл в содержимое пакета
		ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос, ФайлОписаниеСведений, "TR_ZAPION.xml", , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
		
	Иначе
		
		// получаем список вложений сообщения
		ТипыВложений = Новый Массив;
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыВложений.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений);
		Вложения = ПолучитьВложенияТранспортногоСообщения(Сообщение, , ТипыВложений);
		
		// если описание сведений уже сформировано, то прервемся
		Если Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений, "Тип") <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		// генерируем файл описания сведений
		КороткоеИмяФайла = Неопределено;
		ФайлОписаниеСведений = СформироватьОписаниеСведенийФНС(Сообщение, Вложения, КороткоеИмяФайла);
		Если ФайлОписаниеСведений = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// загружаем файл в содержимое пакета
		ДобавитьСодержимоеТранспортногоКонтейнера(Сообщение, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений, ФайлОписаниеСведений, "TR_DEKL.xml", , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml);
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьПакетПФР(Сообщение) Экспорт
	
	Если Сообщение.Статус <> Перечисления.СтатусыПисем.Сохраненное
	И Сообщение.Статус <> Перечисления.СтатусыПисем.Исходящее
	И Сообщение.Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Сообщить("Невозможно формирование пакета по входящему сообщению!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	
	// различные проверки перед формированием
	ПризнакОшибки = Ложь;
	
	ТипСообщения = Сообщение.Тип;
	СсылкаПолучатель = ОпределитьПолучателяТранспортногоКонтейнера(Сообщение);
	
	Если НЕ ЗначениеЗаполнено(ТипСообщения) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: тип транспортного сообщения не определен!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.Отправитель) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задан отправитель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПолучатель) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задан получатель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.УчетнаяЗапись) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задана учетная запись!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	ИначеЕсли НЕ Сообщение.УчетнаяЗапись.ПредназначенаДляДокументооборотаСПФР Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: учетная запись не предназначена для электронного документооборота с ПФР!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сообщение.ЦиклОбмена) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: цикл обмена не задан!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	УчетнаяЗапись = Сообщение.УчетнаяЗапись;
	
	// получаем и проверяем код отправителя
	КодОтправителя = СокрЛП(Сообщение.Отправитель.РегистрационныйНомерПФР);
	Если ПустаяСтрока(КодОтправителя) Тогда
		Сообщить("Не задан регистрационный номер ПФР организации-отправителя.", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли НЕ РегистрационныйНомерПФРСоответствуетТребованиям(КодОтправителя) Тогда
		Сообщить("Некорректно задан регистрационный номер ПФР организации-отправителя.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// получаем и проверяем код получателя
	КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
	Если ПустаяСтрока(КодПолучателя) Тогда
		Сообщить("Не задан код органа ПФР.", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли НЕ КодОрганаПФРСоответствуетТребованиям(КодПолучателя) Тогда
		Сообщить("Некорректно задан код органа ПФР.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// получаем и проверяем сертификат руководителя
	СертификатРуководителя = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
	Если ПустаяСтрока(СертификатРуководителя) Тогда
		Сообщить("В настройках учетной записи " + УчетнаяЗапись + " не задан сертификат руководителя.", СтатусСообщения.Важное);
		Возврат Ложь;
	Иначе
		// ищем сертификат по отпечатку
		ОбъектСертификатРуководителя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатРуководителя, "MY");
		Если ОбъектСертификатРуководителя = Неопределено Тогда
			Сообщить("Не удалось найти сертификат руководителя в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатРуководителя);
	Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверяем сертификат(ы) органа ПФР
	ОбъектыСертификатыОрганаПФР = Новый Массив;
	СертификатыОрганаПФР = СсылкаПолучатель.Сертификаты;
	Для Каждого СертификатОрганаПФР Из СертификатыОрганаПФР Цикл
		
		Если НЕ ЗначениеЗаполнено(СертификатОрганаПФР) Тогда
			Продолжить;
		КонецЕсли;
		
		// ищем сертификат по отпечатку
		ОбъектСертификатОрганаПФР = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатОрганаПФР.Сертификат, "AddressBook");
		Если ОбъектСертификатОрганаПФР = Неопределено Тогда
			Сообщить("Не удалось найти сертификат органа ПФР " + СсылкаПолучатель + " с отпечатком " + СертификатОрганаПФР.Сертификат + " в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем очередной сертификат
		//РезультатПроверкиСертификатаОрганаПФР = ПроверитьСертификат(ОбъектСертификатОрганаПФР);
		РезультатПроверкиСертификатаОрганаПФР = ПроверитьСертификатПоПериоду(ОбъектСертификатОрганаПФР);
		Если РезультатПроверкиСертификатаОрганаПФР <> Истина Тогда
			Сообщить("Ошибка проверки сертификата органа ПФР " + СсылкаПолучатель + " с отпечатком " + СертификатОрганаПФР.Сертификат + ".", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		ОбъектыСертификатыОрганаПФР.Добавить(ОбъектСертификатОрганаПФР);
		
	КонецЦикла;
	
	// проверяем на наличие хотя бы одного сертификата
	Если ОбъектыСертификатыОрганаПФР.Количество() = 0 Тогда 
		Сообщить("В свойствах органа ПФР " + СсылкаПолучатель + " не задан ни один сертификат.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР Тогда
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ СВЕДЕНИЙ
		
		// формируем файл описания сведений, если его нет
		РезультатФормирования = СформироватьОписаниеСведенийДляСообщения(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи, если их нет
		РезультатПодписания = ПодписатьСообщениеПФР(Сообщение.Ссылка);
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияОтчеты = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеОтчет Из ВложенияОтчеты Цикл
			Попытка
				ВложениеОтчет.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеОтчет.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала отчетами и описанием сведений
		Для Каждого ВложениеОтчет Из ВложенияОтчеты Цикл
			
			Если ВложениеОтчет.Тип <> Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР
			И ВложениеОтчет.Тип <> Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакета(КаталогФайловОтчетности + ВложениеОтчет.ИмяФайла);
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// шифруем файл
			РезультатШифрования = ЗашифроватьФайл(ОбъектыСертификатыОрганаПФР, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
			Если РезультатШифрования = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем документ в дереве описания
			ТипДокумента = ?(ВложениеОтчет.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР, ВложениеОтчет.ТипФайлаОтчетностиПФР, ВложениеОтчет.Тип);
			СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ТипДокумента, "xml", ВложениеОтчет.Идентификатор, Истина, Истина, ВложениеОтчет.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеОтчет Из ВложенияОтчеты Цикл
			Если ВложениеОтчет.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеОтчет.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеОтчет.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(Сообщение.ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаПФР(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, , , КодОтправителя, КодПолучателя, УчетнаяЗапись.ИдентификаторСистемыОтправителяПФР);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		// подписываем
		ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + "packageDescription.sign";
		РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		Если РезультатПодписания = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета);
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР Тогда
		
		// генерируем подписи, если их нет
		РезультатПодписания = ПодписатьСообщениеПФР(Сообщение.Ссылка);
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// создаем временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		// выгружаем в него все файлы сообщения
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВы = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВы Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить файлы пакета во временный каталог.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// извлекаем из сообщения-основания информацию о вложениях
		ДИВыОснования = ПолучитьВложенияТранспортногоСообщения(Сообщение.Основание, , , ВложенияДИВы.ВыгрузитьКолонку("ЭЦПИмяПодписанногоФайла"));
		
		// заполняем дерево описания сначала ДИВами
		Для Каждого СтрДИВОснование Из ДИВыОснования Цикл
			ОпределитьДокументВДеревеОписания(ДеревоДокументов, СтрДИВОснование.Тип, ТипСодержимогоПоОписаниюДИВ(СтрДИВОснование, Истина), СтрДИВОснование.Идентификатор, Истина, Истина, СтрДИВОснование.ИмяФайла);
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого СтрВложение Из ВложенияДИВы Цикл
			ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(СтрВложение.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
			Если ПодписанныйДокумент <> Неопределено Тогда
				ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , СтрВложение.ИмяФайла);
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(Сообщение.ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаПФР(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, , "протоколКвитанция", КодОтправителя, КодПолучателя, УчетнаяЗапись.ИдентификаторСистемыОтправителяПФР);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		// подписываем
		ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + "packageDescription.sign";
		РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		Если РезультатПодписания = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета);
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР Тогда
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ СВЕДЕНИЙ
		
		// сначала подписываем готовые файлы
		РезультатПодписания = ПодписатьСообщениеПФР(Сообщение.Ссылка);
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем файл описания письма, если его нет
		РезультатФормирования = СформироватьОписаниеПисьмаДляСообщения(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем файл с транспортной информацией, если его нет
		РезультатФормирования = СформироватьТранспортнуюИнформациюДляСообщения(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// подписываем файл описания письма
		МассивТиповПодписываемогоСодержимого = Новый Массив;
		МассивТиповПодписываемогоСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
		МассивТиповПодписываемогоСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация);
		РезультатПодписания = ПодписатьСообщениеПФР(Сообщение.Ссылка, МассивТиповПодписываемогоСодержимого);
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияОтчеты = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеОтчет Из ВложенияОтчеты Цикл
			Попытка
				ВложениеОтчет.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеОтчет.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания ДИВ'ами
		Для Каждого ВложениеДИВ Из ВложенияОтчеты Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакета(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			Если ВложениеДИВ.Тип <> Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеПисьма
			И ВложениеДИВ.Тип <> Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТранспортнаяИнформация Тогда
			
				// шифруем файл
				РезультатШифрования = ЗашифроватьФайл(ОбъектыСертификатыОрганаПФР, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
				Если РезультатШифрования = Неопределено Тогда
					УдалитьВременныйФайл(КаталогФайловОтчетности);
					Возврат Ложь;
				КонецЕсли;
				
				Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо Тогда
					// определяем документ в дереве описания
					СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "plain1251", ВложениеДИВ.Идентификатор, Истина, Истина, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				ИначеЕсли ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПисьмоПриложение Тогда
					// определяем документ в дереве описания
					ТипСодержимого = ОпределитьТипСодержимогоПриложенияКПисьму(ВложениеДИВ);
					СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, ТипСодержимого, ВложениеДИВ.Идентификатор, Истина, Истина, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				КонецЕсли;
				
			Иначе
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
			КонецЕсли;
			
			
		КонецЦикла;
		
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеЭЦП Из ВложенияОтчеты Цикл
			Если ВложениеЭЦП.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеЭЦП.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеЭЦП.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(Сообщение.ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаПФР(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, "Письмо", "письмо", КодОтправителя, КодПолучателя, УчетнаяЗапись.ИдентификаторСистемыОтправителяПФР);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		// подписываем
		ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + "packageDescription.sign";
		РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		Если РезультатПодписания = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета);
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР Тогда
		
		// генерируем подписи, если их нет
		РезультатПодписания = ПодписатьСообщениеПФР(Сообщение.Ссылка);
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем подтверждение получения
		СформироватьПодтверждениеПолученияДляСообщения(Сообщение.Ссылка);
		
		// генерируем подпись под подтверждением получения
		РезультатПодписания = ПодписатьСообщениеПФР(Сообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма, Сообщение.Ссылка);
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// создаем временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		// выгружаем в него все файлы сообщения
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВы = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВы Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить файлы пакета во временный каталог.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ И НАПОЛНЕНИЕ ДЕРЕВА ОПИСАНИЯ ДОКУМЕНТОВ
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// извлекаем из сообщения-основания информацию о вложениях
		ДИВыОснования = ПолучитьВложенияТранспортногоСообщения(Сообщение.Основание, , , ВложенияДИВы.ВыгрузитьКолонку("ЭЦПИмяПодписанногоФайла"));
		
		// заполняем дерево описания сначала ДИВами // !!! поправить "xml"
		Для Каждого СтрДИВОснование Из ДИВыОснования Цикл
			ОпределитьДокументВДеревеОписания(ДеревоДокументов, СтрДИВОснование.Тип, ПредставлениеТипаСодержимогоФайла(СтрДИВОснование.ТипСодержимогоФайла), СтрДИВОснование.Идентификатор, Истина, Истина, СтрДИВОснование.ИмяФайла);
		КонецЦикла;
		
		// дополняем дерево информацией об подтверждении получения
		ВложенияПодтвержденияПолучения = ВложенияДИВы.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияПисьма));
		Для Каждого СтрВложение Из ВложенияПодтвержденияПолучения Цикл
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакета(КаталогФайловОтчетности + СтрВложение.ИмяФайла);
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// шифруем файл
			РезультатШифрования = ЗашифроватьФайл(ОбъектыСертификатыОрганаПФР, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
			Если РезультатШифрования = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// дополняем дерево описания
			ОпределитьДокументВДеревеОписания(ДеревоДокументов, СтрВложение.Тип, "xml", СтрВложение.Идентификатор, Истина, Истина, СтрВложение.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого СтрВложение Из ВложенияДИВы Цикл
			Если ЗначениеЗаполнено(СтрВложение.ЭЦПИмяПодписанногоФайла) Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(СтрВложение.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , СтрВложение.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(Сообщение.ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаПФР(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, "Письмо", "письмоКвитанция", КодОтправителя, КодПолучателя, УчетнаяЗапись.ИдентификаторСистемыОтправителяПФР);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		// подписываем
		ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + "packageDescription.sign";
		РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		Если РезультатПодписания = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета);
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	КонецЕсли;
	
	УдалитьВременныйФайл(КаталогФайловОтчетности);
	Возврат Истина;
	
КонецФункции

Функция ПроверитьСертификатПоПериоду(ОбъектСертификат)
	
	Если НЕ ЗначениеЗаполнено(ОбъектСертификат) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекДата = ТекущаяДата();
	Если ОбъектСертификат.ДействителенС > ТекДата Тогда
		Сообщить("Период действия сертификата """ + ПредставлениеСертификатаПоСвойствам(ОбъектСертификат) + """ еще не наступил!", СтатусСообщения.Важное);
		Возврат Ложь;
	ИначеЕсли ОбъектСертификат.ДействителенПо < ТекДата Тогда
		Сообщить("Период действия сертификата """ + ПредставлениеСертификатаПоСвойствам(ОбъектСертификат) + """ истек!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПредставлениеПоТипуСодержимогоФайла(ТипСодержимогоФайла, ДляПФР)
	
	Если ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.Текст1251 Тогда
		Возврат "plain1251";
	ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.Текст866 Тогда
		Возврат "plain866";
	ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.xml Тогда
		Возврат "xml";
	ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.html Тогда
		Возврат "html";
	ИначеЕсли НЕ ДляПФР Тогда
		Если ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.pdf Тогда
			Возврат "pdf";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.rtf Тогда
			Возврат "rtf";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.tiff Тогда
			Возврат "tiff";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.jpeg Тогда
			Возврат "jpeg";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.ms_word Тогда
			Возврат "ms-word";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.ms_excel Тогда
			Возврат "ms-excel";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.odf_text Тогда
			Возврат "odf-text";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet Тогда
			Возврат "odf-spreadsheet";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.oxml_word Тогда
			Возврат "oxml-word";
		ИначеЕсли ТипСодержимогоФайла = Перечисления.ТипыСодержимогоФайлов.oxml_spreadsheet Тогда
			Возврат "oxml-spreadsheet";
		Иначе
			Возврат "unknown";
		КонецЕсли;
	Иначе
		Возврат "unknown";
	КонецЕсли;
	
КонецФункции

Функция ТипСодержимогоПоОписаниюДИВ(ВложениеДИВ, ДляПФР = Ложь)
	
	Если ЗначениеЗаполнено(ВложениеДИВ.ТипСодержимогоФайла) Тогда
		Возврат ПредставлениеПоТипуСодержимогоФайла(ВложениеДИВ.ТипСодержимогоФайла, ДляПФР);
	Иначе
		Возврат "xml";
	КонецЕсли;
	
КонецФункции

// Функция формирует пакет в формате приказа ФНС 534.
//
Функция СформироватьПакетФНС(Сообщение) Экспорт
	
	// проверка на то, что сообщение исходящее
	Если Сообщение.Статус <> Перечисления.СтатусыПисем.Сохраненное
	И Сообщение.Статус <> Перечисления.СтатусыПисем.Исходящее
	И Сообщение.Статус <> Перечисления.СтатусыПисем.Отправленное Тогда
		Сообщить("Невозможно формирование пакета по входящему сообщению!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	
	// различные проверки перед формированием
	ПризнакОшибки = Ложь;
	
	ТипСообщения = Сообщение.Тип;
	
	СсылкаОтправитель = Сообщение.Отправитель;
	СсылкаПолучатель = ОпределитьПолучателяТранспортногоКонтейнера(Сообщение);
	УчетнаяЗапись = Сообщение.УчетнаяЗапись;
	ЦиклОбмена = Сообщение.ЦиклОбмена;
	
	Если НЕ ЗначениеЗаполнено(ТипСообщения) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: тип транспортного сообщения не определен!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаОтправитель) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задан отправитель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СсылкаПолучатель) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задан получатель!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: не задана учетная запись!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	ИначеЕсли НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: учетная запись не предназначена для электронного документооборота с ФНС!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЦиклОбмена) Тогда
		Сообщить("Ошибка шифрования транспортного сообщения: цикл обмена не задан!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	// проверяем сертификат(ы) налогового органа
	ТипПолучателя = ТипЗнч(СсылкаПолучатель);
	Если ТипПолучателя = Тип("СправочникСсылка.НалоговыеОрганы") Тогда
		
		ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Налоговый орган", СсылкаПолучатель);
		Если ОбъектСертификатПолучателя = Неопределено Тогда
			Сообщить("Не удалось определить цифровой сертификат получателя """ + СсылкаПолучатель + """ для шифрования сообщения!", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		Иначе
			
			Для Каждого ОбъектСертификатНалоговогоОргана Из ОбъектСертификатПолучателя Цикл
				
				// проверяем очередной сертификат
				РезультатПроверкиСертификатаНалоговогоОргана = ПроверитьСертификатПоПериоду(ОбъектСертификатНалоговогоОргана);
				Если РезультатПроверкиСертификатаНалоговогоОргана <> Истина Тогда
					Сообщить("Ошибка проверки сертификата налогового органа " + СсылкаПолучатель + " с отпечатком " + ОбъектСертификатНалоговогоОргана.Отпечаток + ".", СтатусСообщения.Важное);
					ПризнакОшибки = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			// проверяем на наличие хотя бы одного сертификата
			Если ОбъектСертификатПолучателя.Количество() = 0 Тогда 
				Сообщить("В свойствах налогового органа " + СсылкаПолучатель + " не задан ни один сертификат.", СтатусСообщения.Важное);
				ПризнакОшибки = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипПолучателя = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
		
		ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Сервер документооборота", СсылкаПолучатель);
		
		// проверяем на пустое значение
		Если ОбъектСертификатПолучателя = Неопределено Тогда
			Сообщить("Не удалось определить цифровой сертификат получателя " + СсылкаПолучатель + ".", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
		// проверяем сертификат
		Если ПроверитьСертификат(ОбъектСертификатПолучателя) <> Истина Тогда
			Сообщить("Ошибка проверки сертификата сервера документооборота " + СсылкаПолучатель + ".", СтатусСообщения.Важное);
			ПризнакОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	
	Если Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ДекларацияНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат руководителя
		СертификатРуководителя = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
		Если ПустаяСтрока(СертификатРуководителя) Тогда
			Сообщить("В настройках учетной записи " + УчетнаяЗапись + " не задан сертификат руководителя.", СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			// ищем сертификат по отпечатку
			ОбъектСертификатРуководителя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатРуководителя, "MY");
			Если ОбъектСертификатРуководителя = Неопределено Тогда
				Сообщить("Не удалось найти сертификат руководителя в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// проверяем сертификат руководителя
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатРуководителя);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат бухгалтера
		СертификатГлавногоБухгалтера = СокрЛП(УчетнаяЗапись.СертификатГлавногоБухгалтера);
		Если НЕ ПустаяСтрока(СертификатГлавногоБухгалтера) Тогда
			
			// ищем сертификат по отпечатку
			ОбъектСертификатГлавногоБухгалтера = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатГлавногоБухгалтера, "MY");
			Если ОбъектСертификатГлавногоБухгалтера = Неопределено Тогда
				Сообщить("Не удалось найти сертификат главного бухгалтера в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			
			// проверяем сертификат главного бухгалтера
			РезультатПроверкиСертификатаГлавногоБухгалтера = ПроверитьСертификат(ОбъектСертификатГлавногоБухгалтера);
			Если РезультатПроверкиСертификатаГлавногоБухгалтера <> Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ СВЕДЕНИЙ
		
		// проверяем сертификат получателя (сервера документооборота или налогового органа)
		Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Сервер документооборота", СсылкаПолучатель);
		Иначе
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Налоговый орган", СсылкаПолучатель);
		КонецЕсли;
		Если ОбъектСертификатПолучателя = Неопределено Тогда
			Сообщить("Не удалось определить цифровой сертификат получателя """ + СсылкаПолучатель + """ для шифрования сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем файл описания сведений, если его нет
		РезультатФормирования = СформироватьОписаниеСведенийДляСообщенияФНС(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи руководителя
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Руководитель");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи главного бухгалтера
		Если ЗначениеЗаполнено(СертификатГлавногоБухгалтера) Тогда
			РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Главный бухгалтер");
			Если НЕ РезультатПодписания Тогда
				Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности
			ИЛИ ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ
			ИЛИ ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
				
				// шифруем файл
				РезультатШифрования = ЗашифроватьФайл(ОбъектСертификатПолучателя, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
				Если РезультатШифрования = Неопределено Тогда
					УдалитьВременныйФайл(КаталогФайловОтчетности);
					Возврат Ложь;
				КонецЕсли;
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, ТипСодержимогоПоОписаниюДИВ(ВложениеДИВ), ВложениеДИВ.Идентификатор, Истина, Истина, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			Иначе
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, "01", "Декларация", "01", "ДекларацияНП", КодОтправителя, КодСпецоператора, КодПолучателя, "налоговыйОрган");
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//// подписываем
		//ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + СгенерироватьИмяФайлаДокументаВСоставеПакета();
		//РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		//Если РезультатПодписания = Неопределено Тогда
		//	УдалитьВременныйФайл(КаталогФайловОтчетности);
		//	Возврат Ложь;
		//КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_01_01_01.zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		//ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат руководителя
		СертификатРуководителя = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
		Если ПустаяСтрока(СертификатРуководителя) Тогда
			Сообщить("В настройках учетной записи " + УчетнаяЗапись + " не задан сертификат руководителя.", СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			// ищем сертификат по отпечатку
			ОбъектСертификатРуководителя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатРуководителя, "MY");
			Если ОбъектСертификатРуководителя = Неопределено Тогда
				Сообщить("Не удалось найти сертификат руководителя в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// проверяем сертификат руководителя
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатРуководителя);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат бухгалтера
		СертификатГлавногоБухгалтера = СокрЛП(УчетнаяЗапись.СертификатГлавногоБухгалтера);
		Если НЕ ПустаяСтрока(СертификатГлавногоБухгалтера) Тогда
			
			// ищем сертификат по отпечатку
			ОбъектСертификатГлавногоБухгалтера = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатГлавногоБухгалтера, "MY");
			Если ОбъектСертификатГлавногоБухгалтера = Неопределено Тогда
				Сообщить("Не удалось найти сертификат главного бухгалтера в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			
			// проверяем сертификат главного бухгалтера
			РезультатПроверкиСертификатаГлавногоБухгалтера = ПроверитьСертификат(ОбъектСертификатГлавногоБухгалтера);
			Если РезультатПроверкиСертификатаГлавногоБухгалтера <> Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ СВЕДЕНИЙ
		
		// проверяем сертификат получателя (сервера документооборота или налогового органа)
		Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Сервер документооборота", СсылкаПолучатель);
		Иначе
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Налоговый орган", СсылкаПолучатель);
		КонецЕсли;
		Если ОбъектСертификатПолучателя = Неопределено Тогда
			Сообщить("Не удалось определить цифровой сертификат получателя """ + СсылкаПолучатель + """ для шифрования сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем файл описания сведений, если его нет
		РезультатФормирования = СформироватьОписаниеСведенийДляСообщенияФНС(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи руководителя
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Руководитель");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи главного бухгалтера
		Если ЗначениеЗаполнено(СертификатГлавногоБухгалтера) Тогда
			РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Главный бухгалтер");
			Если НЕ РезультатПодписания Тогда
				Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ
			ИЛИ ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
				
				// шифруем файл
				РезультатШифрования = ЗашифроватьФайл(ОбъектСертификатПолучателя, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
				Если РезультатШифрования = Неопределено Тогда
					УдалитьВременныйФайл(КаталогФайловОтчетности);
					Возврат Ложь;
				КонецЕсли;
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, ТипСодержимогоПоОписаниюДИВ(ВложениеДИВ), ВложениеДИВ.Идентификатор, Истина, Истина, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			Иначе
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, "08", "Сведения2НДФЛ", "01", "Форма2НДФЛНП", КодОтправителя, КодСпецоператора, КодПолучателя, "налоговыйОрган");
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//// подписываем
		//ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + СгенерироватьИмяФайлаДокументаВСоставеПакета();
		//РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		//Если РезультатПодписания = Неопределено Тогда
		//	УдалитьВременныйФайл(КаталогФайловОтчетности);
		//	Возврат Ложь;
		//КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_08_01_01.zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		//ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодПолучателя = ПолучитьИдентификаторОтправителяПодтвержденияДатыОтправки(Сообщение.Основание);
			Если ПустаяСтрока(КодПолучателя) Тогда
				Сообщить("При создании извещения на подтверждение даты отправки не удалось определить отправителя исходного подтверждения.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			ТипПолучателя = "налоговыйОрган";
		Иначе
			КодПолучателя = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодПолучателя) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			ТипПолучателя = "спецоператор";
		КонецЕсли;
		
		// получаем сертификат для шифрования
		ОбъектСертификатШифрование = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Шифрование");
		Если НЕ ЗначениеЗаполнено(ОбъектСертификатШифрование) Тогда
			Сообщить("Не удалось найти сертификат для шифрования в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификат для шифрования
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатШифрование);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		// формируем извещение, при необходимости (в процессе формируется подпись под ДИВ, при необходимости)
		Если НЕ СформироватьИзвещениеОПолучении(Сообщение.Ссылка) Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подпись под извещением
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Шифрование");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		//// извлекаем из сообщения-основания информацию о вложениях
		//ДИВыОснования = ПолучитьВложенияТранспортногоСообщения(Сообщение.Основание, , , ВложенияДИВ.ВыгрузитьКолонку("ЭЦПИмяПодписанногоФайла"));
		//
		//// заполняем дерево описания сначала ДИВами
		//Для Каждого СтрДИВОснование Из ДИВыОснования Цикл
		//	ОпределитьДокументВДеревеОписания(ДеревоДокументов, СтрДИВОснование.Тип, "xml", СтрДИВОснование.Идентификатор, Истина, Ложь, СтрДИВОснование.ИмяФайла);
		//КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем документ в дереве описания
			СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			КодТипаДокументооборота = "08";
			НаименованиеТипаДокументооборота = "Сведения2НДФЛ";
			КодТипаОсновногоДокумента = "07";
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
			КодТипаДокументооборота = "02";
			НаименованиеТипаДокументооборота = "ОбращениеНП";
			КодТипаОсновногоДокумента = "06";
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			КодТипаДокументооборота = "06";
			НаименованиеТипаДокументооборота = "ИОН";
			КодТипаОсновногоДокумента = "08";
		Иначе // прочая отчетность
			КодТипаДокументооборота = "01";
			НаименованиеТипаДокументооборота = "Декларация";
			КодТипаОсновногоДокумента = "09";
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, КодТипаДокументооборота, НаименованиеТипаДокументооборота, "11", "ИзвещениеПодтверждениеНП", КодОтправителя, КодСпецоператора, КодПолучателя, ТипПолучателя);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//// подписываем
		//ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + СгенерироватьИмяФайлаДокументаВСоставеПакета();
		//РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатШифрование, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		//Если РезультатПодписания = Неопределено Тогда
		//	УдалитьВременныйФайл(КаталогФайловОтчетности);
		//	Возврат Ложь;
		//КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_" + КодТипаДокументооборота + "_11_" + КодТипаОсновногоДокумента + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		//ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ТипПолучателя = ?(ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.НалоговыеОрганы"), "налоговыйОрган", "спецоператор");
		
		// получаем сертификат для шифрования
		ОбъектСертификатШифрование = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Шифрование");
		Если НЕ ЗначениеЗаполнено(ОбъектСертификатШифрование) Тогда
			Сообщить("Не удалось найти сертификат для шифрования в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификат для шифрования
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатШифрование);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		// формируем извещение, при необходимости (в процессе формируется подпись под ДИВ, при необходимости)
		Если НЕ СформироватьИзвещениеОПолучении(Сообщение.Ссылка) Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подпись под извещением
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Шифрование");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем документ в дереве описания
			СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
			КодТипаДокументооборота = "08";
			НаименованиеТипаДокументооборота = "Сведения2НДФЛ";
			КодТипаОсновногоДокумента = "07";
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
			КодТипаДокументооборота = "02";
			НаименованиеТипаДокументооборота = "ОбращениеНП";
			КодТипаОсновногоДокумента = "06";
		ИначеЕсли ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			КодТипаДокументооборота = "06";
			НаименованиеТипаДокументооборота = "ИОН";
			КодТипаОсновногоДокумента = "08";
		Иначе // прочая отчетность
			КодТипаДокументооборота = "01";
			НаименованиеТипаДокументооборота = "Декларация";
			КодТипаОсновногоДокумента = "09";
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, КодТипаДокументооборота, НаименованиеТипаДокументооборота, "06", "ИзвещениеРезультатПриемаНП", КодОтправителя, КодСпецоператора, КодПолучателя, ТипПолучателя);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_" + КодТипаДокументооборота + "_06_" + КодТипаОсновногоДокумента + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Записать();
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ТипПолучателя = ?(ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.НалоговыеОрганы"), "налоговыйОрган", "спецоператор");
		
		// получаем сертификат для шифрования
		ОбъектСертификатШифрование = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Шифрование");
		Если НЕ ЗначениеЗаполнено(ОбъектСертификатШифрование) Тогда
			Сообщить("Не удалось найти сертификат для шифрования в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификат для шифрования
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатШифрование);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		// формируем извещение, при необходимости (в процессе формируется подпись под ДИВ, при необходимости)
		Если НЕ СформироватьИзвещениеОПолучении(Сообщение.Ссылка) Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подпись под извещением
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Шифрование");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем документ в дереве описания
			СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН Тогда
			КодТипаДокументооборота = "06";
			НаименованиеТипаДокументооборота = "ИОН";
			КодТипаОсновногоДокумента = "08";
			КодТипаТранзакции = "09";
			НаименованиеТипаТранзакции = "ИзвещениеРезультатОбработкиНП";
		Иначе // прочая отчетность
			КодТипаДокументооборота = "01";
			НаименованиеТипаДокументооборота = "Декларация";
			КодТипаОсновногоДокумента = "09";
			КодТипаТранзакции = "09";
			НаименованиеТипаТранзакции = "ИзвещениеРезультатОбработкиНП";
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, КодТипаДокументооборота, НаименованиеТипаДокументооборота, КодТипаТранзакции, НаименованиеТипаТранзакции, КодОтправителя, КодСпецоператора, КодПолучателя, ТипПолучателя);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_" + КодТипаДокументооборота + "_" + КодТипаТранзакции + "_" + КодТипаОсновногоДокумента + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Записать();
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат руководителя
		СертификатРуководителя = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
		Если ПустаяСтрока(СертификатРуководителя) Тогда
			Сообщить("В настройках учетной записи " + УчетнаяЗапись + " не задан сертификат руководителя.", СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			// ищем сертификат по отпечатку
			ОбъектСертификатРуководителя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатРуководителя, "MY");
			Если ОбъектСертификатРуководителя = Неопределено Тогда
				Сообщить("Не удалось найти сертификат руководителя в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// проверяем сертификат руководителя
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатРуководителя);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат бухгалтера
		СертификатГлавногоБухгалтера = СокрЛП(УчетнаяЗапись.СертификатГлавногоБухгалтера);
		Если НЕ ПустаяСтрока(СертификатГлавногоБухгалтера) Тогда
			
			// ищем сертификат по отпечатку
			ОбъектСертификатГлавногоБухгалтера = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатГлавногоБухгалтера, "MY");
			Если ОбъектСертификатГлавногоБухгалтера = Неопределено Тогда
				Сообщить("Не удалось найти сертификат главного бухгалтера в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			
			// проверяем сертификат главного бухгалтера
			РезультатПроверкиСертификатаГлавногоБухгалтера = ПроверитьСертификат(ОбъектСертификатГлавногоБухгалтера);
			Если РезультатПроверкиСертификатаГлавногоБухгалтера <> Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ СВЕДЕНИЙ
		
		// проверяем сертификат получателя (сервера документооборота или налогового органа)
		Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Сервер документооборота", СсылкаПолучатель);
		Иначе
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Налоговый орган", СсылкаПолучатель);
		КонецЕсли;
		Если ОбъектСертификатПолучателя = Неопределено Тогда
			Сообщить("Не удалось определить цифровой сертификат получателя """ + СсылкаПолучатель + """ для шифрования сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем файл описания сведений, если его нет
		РезультатФормирования = СформироватьОписаниеСведенийДляСообщенияФНС(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи руководителя
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Руководитель");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи главного бухгалтера
		Если ЗначениеЗаполнено(СертификатГлавногоБухгалтера) Тогда
			РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Главный бухгалтер");
			Если НЕ РезультатПодписания Тогда
				Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение
			ИЛИ ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение
			ИЛИ ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
				
				// шифруем файл
				РезультатШифрования = ЗашифроватьФайл(ОбъектСертификатПолучателя, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
				Если РезультатШифрования = Неопределено Тогда
					УдалитьВременныйФайл(КаталогФайловОтчетности);
					Возврат Ложь;
				КонецЕсли;
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, ТипСодержимогоПоОписаниюДИВ(ВложениеДИВ), ВложениеДИВ.Идентификатор, Истина, Истина, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			Иначе
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, "02", "ОбращениеНП", "01", "ОбращениеНП", КодОтправителя, КодСпецоператора, КодПолучателя, "налоговыйОрган");
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//// подписываем
		//ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + СгенерироватьИмяФайлаДокументаВСоставеПакета();
		//РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		//Если РезультатПодписания = Неопределено Тогда
		//	УдалитьВременныйФайл(КаталогФайловОтчетности);
		//	Возврат Ложь;
		//КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_02_01_01.zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		//ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат руководителя
		СертификатРуководителя = СокрЛП(УчетнаяЗапись.СертификатРуководителя);
		Если ПустаяСтрока(СертификатРуководителя) Тогда
			Сообщить("В настройках учетной записи " + УчетнаяЗапись + " не задан сертификат руководителя.", СтатусСообщения.Важное);
			Возврат Ложь;
		Иначе
			// ищем сертификат по отпечатку
			ОбъектСертификатРуководителя = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатРуководителя, "MY");
			Если ОбъектСертификатРуководителя = Неопределено Тогда
				Сообщить("Не удалось найти сертификат руководителя в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// проверяем сертификат руководителя
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатРуководителя);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// получаем и проверяем сертификат бухгалтера
		СертификатГлавногоБухгалтера = СокрЛП(УчетнаяЗапись.СертификатГлавногоБухгалтера);
		Если НЕ ПустаяСтрока(СертификатГлавногоБухгалтера) Тогда
			
			// ищем сертификат по отпечатку
			ОбъектСертификатГлавногоБухгалтера = ПолучитьСвойстваСертификатаПоОтпечатку(СертификатГлавногоБухгалтера, "MY");
			Если ОбъектСертификатГлавногоБухгалтера = Неопределено Тогда
				Сообщить("Не удалось найти сертификат главного бухгалтера в системном хранилище сертификатов.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
			
			// проверяем сертификат главного бухгалтера
			РезультатПроверкиСертификатаГлавногоБухгалтера = ПроверитьСертификат(ОбъектСертификатГлавногоБухгалтера);
			Если РезультатПроверкиСертификатаГлавногоБухгалтера <> Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ СВЕДЕНИЙ
		
		// проверяем сертификат получателя (сервера документооборота или налогового органа)
		Если ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.СерверыДокументооборота") Тогда
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Сервер документооборота", СсылкаПолучатель);
		Иначе
			ОбъектСертификатПолучателя = ПолучитьСертификат(УчетнаяЗапись, "Налоговый орган", СсылкаПолучатель);
		КонецЕсли;
		Если ОбъектСертификатПолучателя = Неопределено Тогда
			Сообщить("Не удалось определить цифровой сертификат получателя """ + СсылкаПолучатель + """ для шифрования сообщения!", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// формируем файл описания сведений, если его нет
		РезультатФормирования = СформироватьОписаниеСведенийДляСообщенияФНС(Сообщение.Ссылка);
		Если НЕ РезультатФормирования Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи руководителя
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Руководитель");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подписи главного бухгалтера
		Если ЗначениеЗаполнено(СертификатГлавногоБухгалтера) Тогда
			РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Главный бухгалтер");
			Если НЕ РезультатПодписания Тогда
				Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос
			ИЛИ ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
				
				// шифруем файл
				РезультатШифрования = ЗашифроватьФайл(ОбъектСертификатПолучателя, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива, КаталогФайловОтчетности + КороткоеИмяФайлаАрхива);
				Если РезультатШифрования = Неопределено Тогда
					УдалитьВременныйФайл(КаталогФайловОтчетности);
					Возврат Ложь;
				КонецЕсли;
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, ТипСодержимогоПоОписаниюДИВ(ВложениеДИВ), ВложениеДИВ.Идентификатор, Истина, Истина, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			Иначе
				
				// определяем документ в дереве описания
				СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ И ПОДПИСАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		// формируем
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, "06", "ИОН", "01", "ЗапросНП", КодОтправителя, КодСпецоператора, КодПолучателя, "налоговыйОрган");
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//// подписываем
		//ФайлПодписиПодФайломОписанияПакета = КаталогФайловОтчетности + СгенерироватьИмяФайлаДокументаВСоставеПакета();
		//РезультатПодписания = ПодписатьФайлPKCS7(ОбъектСертификатРуководителя, ФайлОписаниеПакета, ФайлПодписиПодФайломОписанияПакета);
		//Если РезультатПодписания = Неопределено Тогда
		//	УдалитьВременныйФайл(КаталогФайловОтчетности);
		//	Возврат Ложь;
		//КонецЕсли;
		
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_06_01_01.zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		//ЗаписьZIP.Добавить(ФайлПодписиПодФайломОписанияПакета);
		
		ЗаписьZIP.Записать();
		
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ТипПолучателя = ?(ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.НалоговыеОрганы"), "налоговыйОрган", "спецоператор");
		
		// получаем сертификат для шифрования
		ОбъектСертификатШифрование = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Шифрование");
		Если НЕ ЗначениеЗаполнено(ОбъектСертификатШифрование) Тогда
			Сообщить("Не удалось найти сертификат для шифрования в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификат для шифрования
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатШифрование);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		// формируем извещение, при необходимости (в процессе формируется подпись под ДИВ, при необходимости)
		Если НЕ СформироватьИзвещениеОПолучении(Сообщение.Ссылка) Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подпись под извещением
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Шифрование");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем документ в дереве описания
			СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		КодТипаДокументооборота = "03";
		НаименованиеТипаДокументооборота = "ПисьмоНО";
		КодТипаОсновногоДокумента = "05";
		КодТипаТранзакции = "03";
		НаименованиеТипаТранзакции = "ИзвещениеПисьмоНП";
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, КодТипаДокументооборота, НаименованиеТипаДокументооборота, КодТипаТранзакции, НаименованиеТипаТранзакции, КодОтправителя, КодСпецоператора, КодПолучателя, ТипПолучателя);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_" + КодТипаДокументооборота + "_" + КодТипаТранзакции + "_" + КодТипаОсновногоДокумента + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Записать();
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	ИначеЕсли Сообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП Тогда
		
		// получаем и проверяем код отправителя
		КодОтправителя = СокрЛП(УчетнаяЗапись.ИдентификаторАбонента);
		Если ПустаяСтрока(КодОтправителя) Тогда
			Сообщить("Не указан идентификатор абонента в свойствах учетной записи.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем код спецоператора
		Если УчетнаяЗапись.ОбменНапрямую Тогда
			КодСпецоператора = Неопределено;
		Иначе
			КодСпецоператора = СокрЛП(УчетнаяЗапись.ИдентификаторСпецоператора);
			Если ПустаяСтрока(КодСпецоператора) Тогда
				Сообщить("Не указан идентификатор спецоператора в свойствах учетной записи.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// получаем и проверяем код получателя
		КодПолучателя = СокрЛП(СсылкаПолучатель.Код);
		Если ПустаяСтрока(КодПолучателя) Тогда
			Сообщить("Не задан код налогового органа.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		ТипПолучателя = ?(ТипЗнч(СсылкаПолучатель) = Тип("СправочникСсылка.НалоговыеОрганы"), "налоговыйОрган", "спецоператор");
		
		// получаем сертификат для шифрования
		ОбъектСертификатШифрование = ПолучитьСертификат(Сообщение.УчетнаяЗапись, "Шифрование");
		Если НЕ ЗначениеЗаполнено(ОбъектСертификатШифрование) Тогда
			Сообщить("Не удалось найти сертификат для шифрования в системном хранилище сертификатов.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// проверяем сертификат для шифрования
		РезультатПроверкиСертификатаРуководителя = ПроверитьСертификат(ОбъектСертификатШифрование);
		Если РезультатПроверкиСертификатаРуководителя <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
		
		
		// формируем извещение, при необходимости (в процессе формируется подпись под ДИВ, при необходимости)
		Если НЕ СформироватьИзвещениеОПолучении(Сообщение.Ссылка) Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// генерируем подпись под извещением
		РезультатПодписания = ПоставитьПодписьОтветственногоЛица(Сообщение.Ссылка, "Шифрование");
		Если НЕ РезультатПодписания Тогда
			Сообщить("Формирование пакета прервано.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		
		// создаем вспомогательное дерево описания документов пакета
		ДеревоДокументов = СоздатьДеревоОписанияДокументовПакета();
		
		// выгружаем все файлы сообщения во временный каталог
		КаталогФайловОтчетности = СоздатьВременныйКаталог();
		
		ТипыСодержимого = Новый Массив;
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
		ТипыСодержимого.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
		ВложенияДИВ = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, ТипыСодержимого);
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Попытка
				ВложениеДИВ.Данные.Получить().Записать(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла);
			Исключение
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Сообщить("Ошибка формирования пакета: не удалось сохранить документ во временный каталог для подписания.", СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
		// заполняем дерево описания сначала ДИВ
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				Продолжить;
			КонецЕсли;
			
			// пакуем файл
			КороткоеИмяФайлаАрхива = ЗаархивироватьФайлПакетаФНС(КаталогФайловОтчетности + ВложениеДИВ.ИмяФайла, "file");
			Если КороткоеИмяФайлаАрхива = Неопределено Тогда
				УдалитьВременныйФайл(КаталогФайловОтчетности);
				Возврат Ложь;
			КонецЕсли;
			
			// определяем документ в дереве описания
			СтрДокумент = ОпределитьДокументВДеревеОписания(ДеревоДокументов, ВложениеДИВ.Тип, "xml", ВложениеДИВ.Идентификатор, Истина, Ложь, ВложениеДИВ.ИмяФайла, КороткоеИмяФайлаАрхива);
			
		КонецЦикла;
		
		// дополняем дерево описания информацией об ЭЦП
		Для Каждого ВложениеДИВ Из ВложенияДИВ Цикл
			Если ВложениеДИВ.Тип = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись Тогда
				ПодписанныйДокумент = ДеревоДокументов.Строки.Найти(ВложениеДИВ.ЭЦПИмяПодписанногоФайла, "ИмяФайлаДокумента");
				Если ПодписанныйДокумент <> Неопределено Тогда
					ОпределитьДокументВДеревеОписания(ПодписанныйДокумент, , , , , , ВложениеДИВ.ИмяФайла);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		
		КодТипаДокументооборота = "05";
		НаименованиеТипаДокументооборота = "РассылкаГрупповая";
		КодТипаОсновногоДокумента = "05";
		КодТипаТранзакции = "03";
		НаименованиеТипаТранзакции = "ИзвещениеРассылкаНП";
		
		//////////////////////////////////////////////////////////////////////////////
		// ФОРМИРОВАНИЕ ФАЙЛА ОПИСАНИЯ ПАКЕТА
		
		UUIDПакета = СокрЛП(ЦиклОбмена.Идентификатор);
		ФайлОписаниеПакета = СформироватьОписаниеПакетаФНС(ДеревоДокументов, КаталогФайловОтчетности, UUIDПакета, КодТипаДокументооборота, НаименованиеТипаДокументооборота, КодТипаТранзакции, НаименованиеТипаТранзакции, КодОтправителя, КодСпецоператора, КодПолучателя, ТипПолучателя);
		Если ФайлОписаниеПакета = Неопределено Тогда
			УдалитьВременныйФайл(КаталогФайловОтчетности);
			Возврат Ложь;
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////
		// СОЗДАНИЕ АРХИВА ПАКЕТА
		
		КороткоеИмяФайлаПакета = "FNS_" + КодОтправителя + "_" + КодПолучателя + "_" + СгенерироватьUUID() + "_" + КодТипаДокументооборота + "_" + КодТипаТранзакции + "_" + КодТипаОсновногоДокумента + ".zip";
		ПолноеИмяФайлаПакета = КаталогФайловОтчетности + КороткоеИмяФайлаПакета;
		
		ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяФайлаПакета, , , МетодСжатияZIP.Копирование); // архив пакета создается без сжатия
		Для Каждого СтрДокумент Из ДеревоДокументов.Строки Цикл
			
			ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива), СтрДокумент.ИмяФайлаАрхива, СтрДокумент.ИмяФайлаДокумента);
			ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			
			Для Каждого СтрДокумент2 Из СтрДокумент.Строки Цикл
				ИмяДобавляемогоФайла = ?(ЗначениеЗаполнено(СтрДокумент2.ИмяФайлаАрхива), СтрДокумент2.ИмяФайлаАрхива, СтрДокумент2.ИмяФайлаДокумента);
				ЗаписьZIP.Добавить(КаталогФайловОтчетности + ИмяДобавляемогоФайла);
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписьZIP.Добавить(ФайлОписаниеПакета);
		ЗаписьZIP.Записать();
		
		//////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЕНИЕ ПАКЕТА В РЕГИСТР КОНТЕЙНЕРОВ
		
		ДобавитьТранспортныйКонтейнер(Сообщение.Ссылка, ПолноеИмяФайлаПакета, КороткоеИмяФайлаПакета);
		
		
	КонецЕсли;
	
	УдалитьВременныйФайл(КаталогФайловОтчетности);
	Возврат Истина;
	
КонецФункции

Функция ЗаархивироватьФайлПакетаФНС(ПолноеИмяФайлаПакета, ИмяФайлаАрхива = Неопределено)
	
	// получаем каталог из полного имени файла пакета
	ОбъектФайлПакета = Новый Файл(ПолноеИмяФайлаПакета);
	КаталогФайлаПакета = ОбъектФайлПакета.Путь;
	Если Прав(КаталогФайлаПакета, 1) = "\" Тогда
		КаталогФайлаПакета = КаталогФайлаПакета + "\";
	КонецЕсли;
	
	// если имя файла архива не задано, то генерируем новое
	Если ИмяФайлаАрхива = Неопределено Тогда
		ИмяФайлаАрхива = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	КонецЕсли;
	
	// создаем временный каталог, в который помещаем пакуемый файл
	КаталогВремФайлов = КаталогВременныхФайлов();
	ВременныйКаталог = КаталогВремФайлов + ?(Прав(КаталогВремФайлов, 1) = "\", "", "\") + СгенерироватьUUID() + "\";
	СоздатьКаталог(ВременныйКаталог);
	
	// формируем имя временного файла
	ПолноеИмяАрхивируемогоФайла = ВременныйКаталог + ИмяФайлаАрхива;
	
	// копируем архивируемый файл в новый, с нужным именем
	КопироватьФайл(ПолноеИмяФайлаПакета, ПолноеИмяАрхивируемогоФайла);
	
	// пишем архив
	КороткоеИмяФайлаАрхива = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	Попытка
		ОбъектЗаписьЗИП = Новый ЗаписьZipФайла(КаталогФайлаПакета + КороткоеИмяФайлаАрхива, , , , УровеньСжатияZIP.Максимальный);
		ОбъектЗаписьЗИП.Добавить(ПолноеИмяАрхивируемогоФайла);
		ОбъектЗаписьЗИП.Записать();
		ОшибкаАрхивирования = Ложь;
	Исключение
		ОшибкаАрхивирования = Истина;
	КонецПопытки;
	
	// удаляем временный каталог
	УдалитьВременныйФайл(ВременныйКаталог);
	
	// уведомляем об ошибке, если она была
	Если ОшибкаАрхивирования Тогда
		Сообщить("Ошибка создания архива: " + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КороткоеИмяФайлаАрхива;
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаВыгрузкиДляОписанияСведений(ФайлВыгрузки)

	ПоказателиВыгрузки = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
						ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Истина);
	Исключение
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыгрузки, КодировкаТекста.OEM);
		ТекСтр = Текст.ПрочитатьСтроку();
		Пока ТекСтр <> Неопределено Цикл
			ТекСтр = СокрЛП(ТекСтр);
			ВхождениеДвоеточия = Найти(ТекСтр, ":");
			ИмяПоказателя = СокрЛП(Лев(ТекСтр, ВхождениеДвоеточия - 1));
			ЗначениеПоказателя = СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1));
			Если ВхождениеДвоеточия <> 0 Тогда
				Если ПоказателиВыгрузки[ИмяПоказателя] = Неопределено Тогда
					ПоказателиВыгрузки.Вставить(ИмяПоказателя, ЗначениеПоказателя);
				КонецЕсли;
			КонецЕсли;
			ТекСтр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		Текст.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Ложь);
	КонецПопытки;
	Возврат ПоказателиВыгрузки;

КонецФункции

Функция ОпределитьКодПериодаОтчета(ЦиклОбмена, ПараметрыФайлаВыгрузки)
	
	ЭтоXML = ПараметрыФайлаВыгрузки["ЭтоXML"];
	Если ЭтоXML Тогда
		
		// если файл XML, то сначала пытаемся отыскать свойство Период
		КодПериода = ПараметрыФайлаВыгрузки["Период"];
		Если ЗначениеЗаполнено(КодПериода) Тогда
			Возврат СокрЛП(КодПериода);
		КонецЕсли;
		
		// пытаемся отыскать свойство ПериодОтч
		КодПериода = ПараметрыФайлаВыгрузки["ПериодОтч"];
		Если ЗначениеЗаполнено(КодПериода) Тогда
			Если ПараметрыФайлаВыгрузки["ТипИнф"] <> "ЕДУПР" ИЛИ ПараметрыФайлаВыгрузки["ВерсФорм"] <> "4.01" Тогда // ЕУНД в формате 4.01 - исключение
				Возврат СокрЛП(КодПериода);
			КонецЕсли;
		КонецЕсли;
		
		Возврат Неопределено;
		
	Иначе
		
		ПризПериодОтч = ПараметрыФайлаВыгрузки["ПризПериодОтч"];
		Если ПризПериодОтч = Неопределено Тогда
			ПризПериодОтч = ПараметрыФайлаВыгрузки["ПризПеридОтч"]; // в одном из форматов была опечатка
		КонецЕсли;
		
		НомерПериодОтч = ПараметрыФайлаВыгрузки["НомерПериодОтч"];
		
		// месяц
		Если ПризПериодОтч = "1" И НомерПериодОтч = "01" Тогда
			Возврат "01";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "02" Тогда
			Возврат "02";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "03" Тогда
			Возврат "03";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "04" Тогда
			Возврат "04";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "05" Тогда
			Возврат "05";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "06" Тогда
			Возврат "06";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "07" Тогда
			Возврат "07";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "08" Тогда
			Возврат "08";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "09" Тогда
			Возврат "09";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "10" Тогда
			Возврат "10";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "11" Тогда
			Возврат "11";
		ИначеЕсли ПризПериодОтч = "1" И НомерПериодОтч = "12" Тогда
			Возврат "12";
			
		// квартал
		//ИначеЕсли ПризПериодОтч = "3" И НомерПериодОтч = "01" Тогда
		//	Возврат "20";
		ИначеЕсли ПризПериодОтч = "3" И НомерПериодОтч = "01" Тогда
			Возврат "21";
		ИначеЕсли ПризПериодОтч = "3" И НомерПериодОтч = "02" Тогда
			Возврат "22";
		ИначеЕсли ПризПериодОтч = "3" И НомерПериодОтч = "03" Тогда
			Возврат "23";
		ИначеЕсли ПризПериодОтч = "3" И НомерПериодОтч = "04" Тогда
			Возврат "24";
			
		// полугодие
		ИначеЕсли ПризПериодОтч = "6" ИЛИ (ПризПериодОтч = "6" И НомерПериодОтч = "02") Тогда
			Возврат "31";
			
		// 9 месяцев
		ИначеЕсли ПризПериодОтч = "9" ИЛИ (ПризПериодОтч = "9" И НомерПериодОтч = "03") Тогда
			Возврат "33";
			
		// год
		ИначеЕсли ПризПериодОтч = "0" ИЛИ (ПризПериодОтч = "0" И НомерПериодОтч = "04") Тогда
			Возврат "34";
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "99";
	
КонецФункции

// Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		РазложитьСтрокуВМассивПодстрок(",ку,,,му", ",") возвратит массив значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		РазложитьСтрокуВМассивПодстрок(" ку   му", " ") возвратит массив значений из двух элементов
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",")
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции // глРазложить

Функция ОпределитьИнспекцииПоИмениФайла(ИмяФайла)
	
	Подстроки = РазложитьСтрокуВМассивПодстрок(ИмяФайла, "_");
	Если НЕ ЗначениеЗаполнено(Подстроки) ИЛИ Подстроки.Количество() < 4 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если нрег(РасширениеФайла(ИмяФайла)) = "txt" Тогда // это текстовый формат ФНС (2.00, 2.01, 3.00)
		
		Если СтрДлина(Подстроки[0]) = 13 Тогда // если отчет по физлицу, то коды ИФНС во второй компоненте имени
			СтрКодыИФНС = Подстроки[1];
		Иначе // иначе - в третьей
			СтрКодыИФНС = Подстроки[2];
		КонецЕсли;
		
		Если СтрДлина(СтрКодыИФНС) = 8 Тогда
			Возврат Новый Структура("КодИФНС1, КодИФНС2", Лев(СтрКодыИФНС, 4), Прав(СтрКодыИФНС, 4));
		КонецЕсли;
		
	Иначе
		
		ПервыйКодИФНС = СокрЛП(Подстроки[2]); // третья по порядку подстрока - первый код ИФНС
		ВторойКодИФНС = СокрЛП(Подстроки[3]); // четвертая по порядку подстрока - второй код ИФНС
		
		Если СтрДлина(ПервыйКодИФНС) <> 4 Тогда // если первый код не четырехзначный - значит есть проблемы
			Возврат Неопределено;
		КонецЕсли;
		
		Если СтрДлина(ВторойКодИФНС) <> 4 Тогда // если второй код отсутствует, то он равен первому (например, 2-НДФЛ)
			ВторойКодИФНС = ПервыйКодИФНС;
		КонецЕсли;
		
		Возврат Новый Структура("КодИФНС1, КодИФНС2", ПервыйКодИФНС, ВторойКодИФНС);
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьКлючевыеПараметрыФайлаВыгрузки(Сообщение, Вложения)
	
	// ищем файл выгрузки
	СтрФайлВыгрузки = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности, "Тип");
	Если СтрФайлВыгрузки = Неопределено Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось обнаружить файл выгрузки среди вложений сообщения.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	ФайлыВыгрузки = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, , СтрФайлВыгрузки.ИмяФайла);
	
	// сохраняем файл выгрузки во временный файл
	ИмяВременногоФайлаВыгрузки = ПолучитьИмяВременногоФайла();
	Попытка
		ФайлыВыгрузки[0].Данные.Получить().Записать(ИмяВременногоФайлаВыгрузки);
	Исключение
		Сообщить("Не удалось сформировать описание сведений: не удалось сохранить файл выгрузки во временный каталог.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// разбираем содержимое файла выгрузки
	ПараметрыФайлаВыгрузки = СформироватьСтруктуруПараметровФайлаВыгрузкиДляОписанияСведений(ИмяВременногоФайлаВыгрузки);
	Если НЕ ЗначениеЗаполнено(ПараметрыФайлаВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	ЦиклОбмена = Сообщение.ЦиклОбмена;
	
	// определяем наименование отчета
	ВидОтчета = ЦиклОбмена.ВидОтчета;
	ИмяФормы = ?(ПустаяСтрока(ВидОтчета.Описание), СокрЛП(ВидОтчета.Наименование), СокрЛП(ВидОтчета.Описание));
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось определить имя представляемой формы.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// ищем КНД
	КНДФормы = ПараметрыФайлаВыгрузки["КНД"];
	Если КНДФормы = Неопределено Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось определить КНД по файлу выгрузки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// определяем год
	Год = Формат(Год(ЦиклОбмена.ДатаНачалаПериода), "ЧГ=");
	Если НЕ ЗначениеЗаполнено(Год) Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось определить отчетный год.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// определяем код периода
	КодПериода = ОпределитьКодПериодаОтчета(ЦиклОбмена, ПараметрыФайлаВыгрузки);
	//Если НЕ ЗначениеЗаполнено(КодПериода) Тогда
	//	Сообщить("Не удалось сформировать описание сведений: не удалось определить код отчетного периода.", СтатусСообщения.Важное);
	//	Возврат Неопределено;
	//КонецЕсли;
	
	// определяем инспекции по имени файла
	Инспекции = ОпределитьИнспекцииПоИмениФайла(СтрФайлВыгрузки.ИмяФайла);
	Если НЕ ЗначениеЗаполнено(Инспекции) Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось выделить коды инспекций в имени файла выгрузки.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// удаляем временный файл выгрузки
	УдалитьВременныйФайл(ИмяВременногоФайлаВыгрузки);
	
	
	// 
	Возврат Новый Структура("	имяФормы,	КНДФормы,	год,	кодПериода,	НОПоМестуУчета,		НОПоМестуНахождения",
								ИмяФормы,	КНДФормы,	Год,	КодПериода,	Инспекции.КодИФНС1,	Инспекции.КодИФНС2);
	
КонецФункции

Функция СформироватьОписаниеСведенийФНС(Сообщение, Вложения, КороткоеИмяФайла = Неопределено)
	
	// извлекаем ключевые параметры
	КлючевыеПараметрыФайлаВыгрузки = ОпределитьКлючевыеПараметрыФайлаВыгрузки(Сообщение, Вложения);
	Если НЕ ЗначениеЗаполнено(КлючевыеПараметрыФайлаВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	ДобавитьУзелXML(Дерево, "имяФормы", , КлючевыеПараметрыФайлаВыгрузки["имяФормы"]);
	ДобавитьУзелXML(Дерево, "КНДФормы", , КлючевыеПараметрыФайлаВыгрузки["КНДФормы"]);
	ДобавитьУзелXML(Дерево, "год", , КлючевыеПараметрыФайлаВыгрузки["год"]);
	
	Если ЗначениеЗаполнено(КлючевыеПараметрыФайлаВыгрузки["кодПериода"]) Тогда
		ДобавитьУзелXML(Дерево, "кодПериода", , КлючевыеПараметрыФайлаВыгрузки["кодПериода"]);
	КонецЕсли;
	
	ДобавитьУзелXML(Дерево, "НОПоМестуУчета", , КлючевыеПараметрыФайлаВыгрузки["НОПоМестуУчета"]);
	ДобавитьУзелXML(Дерево, "НОПоМестуНахождения", , КлючевыеПараметрыФайлаВыгрузки["НОПоМестуНахождения"]);
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "описание");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция КодПоТипуДокументаПакета(ТипДокумента, КодТипаДокументоооборота)
	
	// отчетность ФНС
	Если ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности Тогда
		Возврат "01";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений Тогда
		Возврат "02";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность Тогда
		Если КодТипаДокументоооборота = "02" Тогда
			Возврат "04";
		Иначе
			Возврат "03";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки Тогда
		Если КодТипаДокументоооборота = "02" Тогда
			Возврат "05";
		Иначе
			Возврат "04";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе Тогда
		Если КодТипаДокументоооборота = "02" Тогда
			Возврат "07";
		ИначеЕсли КодТипаДокументоооборота = "06" Тогда // запрос
			Возврат "06";
		Иначе
			Возврат "05";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме Тогда
		Если КодТипаДокументоооборота = "06" Тогда // запрос
			Возврат "05";
		Иначе
			Возврат "06";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении Тогда
		Возврат "07";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе Тогда
		Возврат "08";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении Тогда
		Если КодТипаДокументоооборота = "08" Тогда // документооборот по 2-НДФЛ
			Возврат "07";
		ИначеЕсли КодТипаДокументоооборота = "02" Тогда
			Возврат "06";
		ИначеЕсли КодТипаДокументоооборота = "03" Тогда // письмоНО
			Возврат "05";
		ИначеЕсли КодТипаДокументоооборота = "05" Тогда // рассылка групповая
			Возврат "05";
		ИначеЕсли КодТипаДокументоооборота = "06" Тогда // запрос
			Возврат "08";
		Иначе
			Возврат "09";
		КонецЕсли;
		
	// 2-НДФЛ
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ Тогда
		Возврат "01";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ Тогда
		Возврат "02";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ Тогда
		Возврат "05";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ Тогда
		Возврат "06";
	
	// обращение
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение Тогда
		Возврат "01";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка Тогда
		Возврат "02";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение Тогда
		Возврат "03";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения Тогда
		Если КодТипаДокументоооборота = "06" Тогда // запрос
			Возврат "09";
		Иначе
			Возврат "08";
		КонецЕсли;
	
	// запрос
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос Тогда
		Возврат "01";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ Тогда
		Возврат "07";
	ИначеЕсли ТипДокумента = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос Тогда
		Возврат "02";
	
	КонецЕсли;
	
КонецФункции

Функция СформироватьОписаниеПакетаПФР(ОписаниеДокументов, КаталогВыгрузки, UUIDПакета = Неопределено, ТипДокументооборота = "СведенияПФР", ТипТранзакции = "сведения", КодОтправителя = "", КодПолучателя = "", Знач КодСистемыОтправителя = Неопределено) Экспорт
	
	Если UUIDПакета = Неопределено Тогда
		UUIDПакета = СгенерироватьUUID();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КодСистемыОтправителя) Тогда
		КодСистемыОтправителя = "1С";
	КонецЕсли;
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	// добавляем узел "пакет"
	УзелПакет = ДобавитьУзелXML(Дерево, "пакет");
	ДобавитьУзелXML(УзелПакет, "версияФормата",							Истина, "1.2");
	ДобавитьУзелXML(УзелПакет, "типДокументооборота",					Истина, ТипДокументооборота);
	ДобавитьУзелXML(УзелПакет, "типТранзакции",							Истина, ТипТранзакции);
	ДобавитьУзелXML(УзелПакет, "идентификаторДокументооборота", 		Истина, UUIDПакета);
	
	// добавляем узел СКЗИ
	УзелСКЗИ = ДобавитьУзелXML(УзелПакет, "СКЗИ");
	ДобавитьУзелXML(УзелСКЗИ, "типСКЗИ",								Истина, ОпределитьТипСКЗИ());
	
	// добавляем узел "отправитель"
	УзелОтправитель = ДобавитьУзелXML(УзелПакет, "отправитель");
	ДобавитьУзелXML(УзелОтправитель, "идентификаторСубъекта",			Истина, СокрЛП(КодОтправителя));
	ДобавитьУзелXML(УзелОтправитель, "типСубъекта",						Истина, "АбонентСЭД");
	
	// добавляем узел "системаОтправителя"
	УзелСистемаОтправителя = ДобавитьУзелXML(УзелПакет, "системаОтправителя");
	ДобавитьУзелXML(УзелСистемаОтправителя, "идентификаторСубъекта",	Истина, СокрЛП(КодСистемыОтправителя));
	ДобавитьУзелXML(УзелСистемаОтправителя, "типСубъекта",				Истина, "Провайдер");
	
	// добавляем узел "Получатель"
	УзелПолучатель = ДобавитьУзелXML(УзелПакет, "получатель");
	ДобавитьУзелXML(УзелПолучатель, "идентификаторСубъекта",			Истина, СокрЛП(КодПолучателя));
	ДобавитьУзелXML(УзелПолучатель, "типСубъекта",						Истина, "ОрганПФР");
	
	// добавляем узлы "Документ"
	Для Каждого СтрДокумент Из ОписаниеДокументов.Строки Цикл
		
		// добавляем очередной узел "Документ"
		УзелДокумент = ДобавитьУзелXML(УзелПакет, "документ");
		ДобавитьУзелXML(УзелДокумент, "типДокумента",					Истина, ИдентификаторПоТипуДокументаПакета(СтрДокумент.ТипДокумента));
		ДобавитьУзелXML(УзелДокумент, "типСодержимого",					Истина, СтрДокумент.ТипСодержимого);
		ДобавитьУзелXML(УзелДокумент, "идентификаторДокумента",			Истина, СтрДокумент.ИдентификаторДокумента);
		ДобавитьУзелXML(УзелДокумент, "сжат",							Истина, XMLСтрока(СтрДокумент.Сжат = Истина));
		ДобавитьУзелXML(УзелДокумент, "зашифрован",						Истина, XMLСтрока(СтрДокумент.Зашифрован = Истина));
		
		// добавляем узел "Содержимое"
		Если ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива) Тогда
			УзелСодержимое = ДобавитьУзелXML(УзелДокумент, "содержимое");
			ДобавитьУзелXML(УзелСодержимое, "имяФайла",					Истина, СтрДокумент.ИмяФайлаАрхива);
		КонецЕсли;
		
		// добавляем подписи под документом
		Для Каждого СтрПодпись Из СтрДокумент.Строки Цикл
			
			// добавляем очередной узел "Подпись"
			УзелПодпись = ДобавитьУзелXML(УзелДокумент, "подпись");
			ДобавитьУзелXML(УзелПодпись, "имяФайла",					Истина, СтрПодпись.ИмяФайлаДокумента);
			ДобавитьУзелXML(УзелПодпись, "роль",						Истина, "руководитель");
			
		КонецЦикла;
		
	КонецЦикла;
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево);
	
	// записываем дерево в файл
	ПолноеИмяФайла = КаталогВыгрузки + "packageDescription.xml";
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайла);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

Функция СформироватьОписаниеПакетаФНС(ОписаниеДокументов, КаталогВыгрузки, UUIDПакета = Неопределено, КодТипаДокументоооборота = "01", ТипДокументооборота = "Декларация", КодТипаТранзакции = "01", ТипТранзакции = "ДекларацияНП", КодОтправителя = "", КодСОС = Неопределено, КодПолучателя = "", ТипПолучателя = "налоговыйОрган") Экспорт
	
	Если UUIDПакета = Неопределено Тогда
		UUIDПакета = СгенерироватьUUID();
	КонецЕсли;
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	// добавляем узел "ТрансИнф"
	УзелТрансИнф = ДобавитьУзелXML(Дерево, "ТрансИнф");
	ДобавитьУзелXML(УзелТрансИнф, "версияФормата",							Истина, "ФНС:1.0");
	ДобавитьУзелXML(УзелТрансИнф, "кодТипаДокументооборота",				Истина, КодТипаДокументоооборота);
	ДобавитьУзелXML(УзелТрансИнф, "типДокументооборота",					Истина, ТипДокументооборота);
	ДобавитьУзелXML(УзелТрансИнф, "кодТипаТранзакции",						Истина, КодТипаТранзакции);
	ДобавитьУзелXML(УзелТрансИнф, "типТранзакции",							Истина, ТипТранзакции);
	ДобавитьУзелXML(УзелТрансИнф, "идентификаторДокументооборота", 			Истина, UUIDПакета);
	ДобавитьУзелXML(УзелТрансИнф, "ВерсПрог", 								Истина, СокрЛП(Лев(РегламентированнаяОтчетность.СформироватьВерсПрог(), 40)));
	
	// добавляем узел "отправитель"
	УзелОтправитель = ДобавитьУзелXML(УзелТрансИнф, "отправитель");
	ДобавитьУзелXML(УзелОтправитель, "идентификаторСубъекта",				Истина, КодОтправителя);
	ДобавитьУзелXML(УзелОтправитель, "типСубъекта",							Истина, "абонент");
	
	// добавляем узел "спецоператор"
	Если КодСОС <> Неопределено Тогда
		УзелСпецоператор = ДобавитьУзелXML(УзелТрансИнф, "спецоператор");
		ДобавитьУзелXML(УзелСпецоператор, "идентификаторСубъекта",			Истина, КодСОС);
		ДобавитьУзелXML(УзелСпецоператор, "типСубъекта",					Истина, "спецоператор");
	КонецЕсли;
	
	// добавляем узел "получатель"
	УзелПолучатель = ДобавитьУзелXML(УзелТрансИнф, "получатель");
	ДобавитьУзелXML(УзелПолучатель, "идентификаторСубъекта",				Истина, КодПолучателя);
	ДобавитьУзелXML(УзелПолучатель, "типСубъекта",							Истина, ТипПолучателя);
	
	// добавляем узлы "Документ"
	Для Каждого СтрДокумент Из ОписаниеДокументов.Строки Цикл
		
		// добавляем очередной узел "Документ"
		УзелДокумент = ДобавитьУзелXML(УзелТрансИнф, "документ");
		ДобавитьУзелXML(УзелДокумент, "кодТипаДокумента",				Истина, КодПоТипуДокументаПакета(СтрДокумент.ТипДокумента, КодТипаДокументоооборота));
		ДобавитьУзелXML(УзелДокумент, "типДокумента",					Истина, ИдентификаторПоТипуДокументаПакета(СтрДокумент.ТипДокумента));
		ДобавитьУзелXML(УзелДокумент, "типСодержимого",					Истина, СтрДокумент.ТипСодержимого);
		ДобавитьУзелXML(УзелДокумент, "сжат",							Истина, XMLСтрока(СтрДокумент.Сжат = Истина));
		ДобавитьУзелXML(УзелДокумент, "зашифрован",						Истина, XMLСтрока(СтрДокумент.Зашифрован = Истина));
		ДобавитьУзелXML(УзелДокумент, "идентификаторДокумента",			Истина, СтрДокумент.ИдентификаторДокумента);
		ДобавитьУзелXML(УзелДокумент, "исходноеИмяФайла",				Истина, СтрДокумент.ИмяФайлаДокумента);
		
		// добавляем узел "Содержимое"
		Если ЗначениеЗаполнено(СтрДокумент.ИмяФайлаАрхива) Тогда
			УзелСодержимое = ДобавитьУзелXML(УзелДокумент, "содержимое");
			ДобавитьУзелXML(УзелСодержимое, "имяФайла",					Истина, СтрДокумент.ИмяФайлаАрхива);
		КонецЕсли;
		
		// добавляем подписи под документом
		Для Каждого СтрПодпись Из СтрДокумент.Строки Цикл
			
			// добавляем очередной узел "Подпись"
			УзелПодпись = ДобавитьУзелXML(УзелДокумент, "подпись");
			ДобавитьУзелXML(УзелПодпись, "имяФайла",					Истина, СтрПодпись.ИмяФайлаДокумента);
			ДобавитьУзелXML(УзелПодпись, "роль",						Истина, "абонент");
			
		КонецЦикла;
		
	КонецЦикла;
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево);
	
	// записываем дерево в файл
	ПолноеИмяФайла = КаталогВыгрузки + "packageDescription.xml";
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайла);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

// ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТООБОРОТА С ПФР
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВИЗУАЛИЗАЦИИ ДИВ ПРИ ДОКУМЕНТООБОРОТЕ С ФНС (693) 534

Процедура ПоказатьПодтверждениеДатыОтправки(Сообщение, ИмяФайлаПодтверждения = Неопределено) Экспорт
	
	ФормаПодтверждения = ПолучитьФорму("ПодтверждениеДатыОтправки");
	ФормаПодтверждения.Сообщение = Сообщение;
	ФормаПодтверждения.ИмяФайлаПодтверждения = ИмяФайлаПодтверждения;
	ФормаПодтверждения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьИзвещениеОПолучении(Сообщение, ИмяФайлаИзвещения = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("ИзвещениеОПолучении");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаИзвещения = ИмяФайлаИзвещения;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьУведомлениеОбОтказе(Сообщение, ИмяФайлаУведомления = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("УведомлениеОбОтказе");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаУведомления = ИмяФайлаУведомления;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьКвитанциюОПриеме(Сообщение, ИмяФайлаКвитанции = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("КвитанцияОПриеме");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаКвитанции = ИмяФайлаКвитанции;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьКвитанциюОПриемеЗапроса(Сообщение, ИмяФайлаКвитанции = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("КвитанцияОПриемеЗапрос");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаКвитанции = ИмяФайлаКвитанции;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьИзвещениеОВводе(Сообщение, ИмяФайлаИзвещения = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("ИзвещениеОВводе");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаИзвещения = ИмяФайлаИзвещения;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьУведомлениеОбУточнении(Сообщение, ИмяФайлаУведомления = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("УведомлениеОбУточнении505");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаУведомления = ИмяФайлаУведомления;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

// ПРОЦЕДУРЫ И ФУНКЦИИ ВИЗУАЛИЗАЦИИ ДИВ ПРИ ДОКУМЕНТООБОРОТЕ С ФНС (693) 534
////////////////////////////////////////////////////////////////////////////////

Функция РазложитьФИО(Знач ФИОСтр) Экспорт
	
	ФИОСтр = СокрЛП(ФИОСтр);
	ФИО = Новый Структура("Фамилия, Имя, Отчество", "", "", "");
	
	ПервыйПробел = Найти(ФИОСтр, " ");
	Если ПервыйПробел = 0 Тогда
		ФИО.Фамилия = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Фамилия = СокрЛП(Лев(ФИОСтр, ПервыйПробел - 1));
	ФИОСтр = СокрЛП(Сред(ФИОСтр, ПервыйПробел + 1));
	
	ВторойПробел = Найти(ФИОСтр, " ");
	Если ВторойПробел = 0 Тогда
		ФИО.Имя = ФИОСтр;
		Возврат ФИО;
	КонецЕсли;
	ФИО.Имя = СокрЛП(Лев(ФИОСтр, ВторойПробел - 1));
	
	ФИО.Отчество = СокрЛП(Сред(ФиоСтр, ВторойПробел + 1));
	
	Возврат ФИО;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ДОВЕРЕННОСТИ 534

Функция СтроковоеПредставлениеЗначенияВыгрузки(ЗначениеВыгрузки)
	
	ТипЗначенияВыгрузки = ТипЗнч(ЗначениеВыгрузки);
	Если ТипЗначенияВыгрузки = Неопределено Тогда
		Возврат "";
	ИначеЕсли ТипЗначенияВыгрузки = Тип("Дата") Тогда
		Возврат Формат(ЗначениеВыгрузки, "ДФ=dd.MM.yyyy; ДП=");
	ИначеЕсли ТипЗначенияВыгрузки = Тип("Число") Тогда
		Возврат Формат(ЗначениеВыгрузки, "ЧН=; ЧГ=");
	ИначеЕсли ТипЗначенияВыгрузки = Тип("Булево") Тогда
		Возврат ?(ЗначениеВыгрузки, "true", "false");
	Иначе
		Возврат ЗначениеВыгрузки;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьЗначениеВыгрузки(Узел, Имя, Тип = "А", Значение, ОбрезатьДо = Неопределено, ТолькоЕслиЗаполнен = Ложь)
	
	Если ТолькоЕслиЗаполнен И НЕ ЗначениеЗаполнено(Значение) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НовУзел = Узел.Строки.Добавить();
	НовУзел.Имя = Имя;
	НовУзел.Тип = Тип;
	
	ЗначениеСтрока = СтроковоеПредставлениеЗначенияВыгрузки(Значение);
	ЗначениеУзла = ?(ОбрезатьДо = Неопределено, ЗначениеСтрока, СокрЛП(Лев(ЗначениеСтрока, ОбрезатьДо)));
	НовУзел.Значение = ЗначениеУзла;
	
	Возврат НовУзел;
	
КонецФункции

Функция ДобавитьУзел(Узел, Имя)
	
	НовУзел = Узел.Строки.Добавить();
	НовУзел.Имя = Имя;
	НовУзел.Тип = "Э";
	
	Возврат НовУзел;
	
КонецФункции

Функция СформироватьИдФайлДоверенности(РегистрацияВИФНС, СведенияДоверенности)
	
	Организация = РегистрацияВИФНС.Владелец;
	
	// R_T
	R_T = "NO_DOVER";
	
	// A_K
	НОКонечныйПолучатель = СведенияДоверенности.КодНО;
	НОПосредник = СокрЛП(Организация.КодИФНСПолучателя);
	A_K = ?(ЗначениеЗаполнено(НОПосредник), НОПосредник, НОКонечныйПолучатель) + "_" + НОКонечныйПолучатель;
	
	Если СведенияДоверенности.СвУпПред.СвПред.Свойство("СвОрг") Тогда // представитель - юрлицо
		СвПредст = СведенияДоверенности.СвУпПред.СвПред.СвОрг;
		O = СокрЛП(СвПредст.ИННЮЛ) + СокрЛП(СвПредст.КПП);
	Иначе // представитель - физлицо
		Если СведенияДоверенности.СвУпПред.СвПред.СведФизЛ.ЯвляетсяСотрудникомОрганизации Тогда
			Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
				Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "ИННФЛ");
				O = СокрЛП(Сведения.ИННФЛ);
			Иначе
				Сведения = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "ИННЮЛ, КППЮЛ");
				O = СокрЛП(Сведения.ИННЮЛ) + СокрЛП(Сведения.КППЮЛ);
			КонецЕсли;
		Иначе
			СвПредст = СведенияДоверенности.СвУпПред.СвПред.СведФизЛ;
			O = СокрЛП(СвПредст.ИННФЛ);
		КонецЕсли;
	КонецЕсли;
	
	// GGGGMMDD
	GGGGMMDD = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	
	// N
	N = ВРЕГ(Строка(Новый УникальныйИдентификатор));
	
	Возврат R_T + "_" + A_K + "_" + O + "_" + GGGGMMDD + "_" + N;
	
КонецФункции

Функция СформироватьФайлВыгрузкиДоверенности(РегистрацияВИФНС, СведенияДоверенности, КороткоеИмяФайлаДоверенности = Неопределено)
	
	
	ДеревоВыгрузки = Новый ДеревоЗначений;
	ДеревоВыгрузки.Колонки.Добавить("Имя");
	ДеревоВыгрузки.Колонки.Добавить("Тип");
	ДеревоВыгрузки.Колонки.Добавить("Значение");
	
	ИдФайл = СформироватьИдФайлДоверенности(РегистрацияВИФНС, СведенияДоверенности);
	
	
	// узел Файл
	УзелФайл = ДобавитьУзел(ДеревоВыгрузки, "Файл");
	ДобавитьЗначениеВыгрузки(УзелФайл, "ИдФайл", "А", ИдФайл, 150);
	ДобавитьЗначениеВыгрузки(УзелФайл, "ВерсПрог", "А", РегламентированнаяОтчетность.СформироватьВерсПрог(), 40);
	ДобавитьЗначениеВыгрузки(УзелФайл, "ВерсФорм", "А", "5.03");
	
	
	// узел Документ
	УзелДокумент = ДобавитьУзел(УзелФайл, "Документ");
	ДобавитьЗначениеВыгрузки(УзелДокумент, "КНД", "А", "1166005");
	ДобавитьЗначениеВыгрузки(УзелДокумент, "КодНО", "А", СведенияДоверенности.КодНО, 4);
	
	
	// узел УчСвДов
	УзелУчСвДов = ДобавитьУзел(УзелДокумент, "УчСвДов");
	
	УчСвДов = СведенияДоверенности.УчСвДов;
	ДобавитьЗначениеВыгрузки(УзелУчСвДов, "НомДовер", "А", УчСвДов.Номер);
	ДобавитьЗначениеВыгрузки(УзелУчСвДов, "ДатаНач", "А", УчСвДов.Дата);
	Если ЗначениеЗаполнено(УчСвДов.ДатаОкончания) Тогда
		ДобавитьЗначениеВыгрузки(УзелУчСвДов, "ДатаОкон", "А", УчСвДов.ДатаОкончания, , Истина);
	КонецЕсли;
	
	
	// узел СвПредст
	УзелСвПредст = ДобавитьУзел(УзелДокумент, "СвПредст");
	
	УчСвПредст = СведенияДоверенности.СвПредст;
	Если УчСвПредст.ЯвляетсяФЛ Тогда
		
		// узел НПФЛ
		УзелНПФЛ = ДобавитьУзел(УзелСвПредст, "НПФЛ");
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "ИННФЛ", "А", УчСвПредст.ИННФЛ, 12, Истина);
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "ОГРНИП", "А", УчСвПредст.ОГРНИП, 15, Истина);
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "Гражданство", "А", УчСвПредст.Гражданство, 3, Истина);
		ДобавитьЗначениеВыгрузки(УзелНПФЛ, "ДатаРожд", "А", УчСвПредст.ДатаРожд, , Истина);
		
		// узел ФИО
		УчФИО = УчСвПредст.ФИО;
		УзелФИО = ДобавитьУзел(УзелНПФЛ, "ФИО");
		ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчФИО.Фамилия, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчФИО.Имя, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчФИО.Отчество, 60, Истина);
		
		// узел АдрРФ
		УчАдрРФ = УчСвПредст.АдрРФ;
		УзелАдрРФ = ДобавитьУзел(УзелНПФЛ, "АдрРФ");
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
		
		// узел УдЛичн
		УчУдЛичн = УчСвПредст.УдЛичн;
		УзелУдЛичн = ДобавитьУзел(УзелНПФЛ, "УдЛичн");
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВидДок", "А", УчУдЛичн.ВидДок, 2);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "СерНомДок", "А", УчУдЛичн.СерНомДок, 25);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ДатаДок", "А", УчУдЛичн.ДатаДок, 10);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ВыдДок", "А", УчУдЛичн.ВыдДок, 255);
		ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВыдДок", "А", УчУдЛичн.КодВыдДок, 7, Истина);
		
	Иначе
		
		// узел НПЮЛ
		УзелНПЮЛ = ДобавитьУзел(УзелСвПредст, "НПЮЛ");
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "НаимОрг", "А", УчСвПредст.НаимОрг, 1000);
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "ИННЮЛ", "А", УчСвПредст.ИННЮЛ, 10);
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "КПП", "А", УчСвПредст.КПП, 9);
		ДобавитьЗначениеВыгрузки(УзелНПЮЛ, "ОГРН", "А", УчСвПредст.ОГРН, 13, Истина);
		
		// узел АдрРФ
		УчАдрРФ = УчСвПредст.АдрРФ;
		УзелАдрРФ = ДобавитьУзел(УзелНПЮЛ, "АдрРФ");
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
		
		// узел СвРукОрг
		УчСвРукОрг = УчСвПредст.СвРукОрг;
		УзелСвРукОрг = ДобавитьУзел(УзелНПЮЛ, "СвРукОрг");
		ДобавитьЗначениеВыгрузки(УзелСвРукОрг, "ИННФЛ", "А", УчСвРукОрг.ИННФЛ, 12, Истина);
		
		// узел ФИО
		УчСвРукОргФИО = УчСвРукОрг.ФИО;
		УзелФИО = ДобавитьУзел(УзелСвРукОрг, "ФИО");
		ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчСвРукОргФИО.Фамилия, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчСвРукОргФИО.Имя, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчСвРукОргФИО.Отчество, 60, Истина);
		
	КонецЕсли;
	
	
	// узел СвДовер
	УзелСвДовер = ДобавитьУзел(УзелДокумент, "СвДовер");
	
	УчСвДовер = СведенияДоверенности.СвДовер;
	ПризнакДоверителя = ?(ЗначениеЗаполнено(УчСвДовер.ПрДов), УчСвДовер.ПрДов, 1);
	ДобавитьЗначениеВыгрузки(УзелСвДовер, "ПрДов", "А", ПризнакДоверителя, 1);
	
	Если ПризнакДоверителя = 2 ИЛИ ПризнакДоверителя = 3 Тогда
		
		УзелСвЮЛФЛ = ДобавитьУзел(УзелСвДовер, "СвЮЛФЛ");
		
		// выгружаем сведения о доверителе-ЮЛ
		Если УчСвДовер.Свойство("СвЮЛ") Тогда
			
			УчСвЮЛ = УчСвДовер.СвЮЛ;
			
			// узел ЮЛ
			УзелЮЛ = ДобавитьУзел(УзелСвЮЛФЛ, "ЮЛ");
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "НаимОрг", "А", УчСвЮЛ.НаимОрг, 1000);
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "ИННЮЛ", "А", УчСвЮЛ.ИННЮЛ, 10);
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "КПП", "А", УчСвЮЛ.КПП, 9);
			ДобавитьЗначениеВыгрузки(УзелЮЛ, "ОГРН", "А", УчСвЮЛ.ОГРН, 13, Истина);
			
			// узел АдрРФ
			УчАдрРФ = УчСвЮЛ.АдрЮЛ;
			УзелАдрРФ = ДобавитьУзел(УзелЮЛ, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
			
			// узел СвРукОрг
			УчСвРукОрг = УчСвЮЛ.СвРукОрг;
			УзелСвРукОрг = ДобавитьУзел(УзелЮЛ, "СвРукОрг");
			ДобавитьЗначениеВыгрузки(УзелСвРукОрг, "ИННФЛ", "А", УчСвРукОрг.ИННФЛ, 12, Истина);
			
			// узел ФИО
			УчСвРукОргФИО = УчСвРукОрг.ФИО;
			УзелФИО = ДобавитьУзел(УзелСвРукОрг, "ФИО");
			ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчСвРукОргФИО.Фамилия, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчСвРукОргФИО.Имя, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчСвРукОргФИО.Отчество, 60, Истина);
			
		КонецЕсли;
		
		// выгружаем сведения о доверителе-ФЛ
		Если УчСвДовер.Свойство("СвФЛ") Тогда
			
			УчСвФЛ = УчСвДовер.СвФЛ;
			
			// узел ФЛ
			УзелФЛ = ДобавитьУзел(УзелСвЮЛФЛ, "ФЛ");
			ДобавитьЗначениеВыгрузки(УзелФЛ, "ИННФЛ", "А", УчСвФЛ.ИННФЛ, 12, Истина);
			ДобавитьЗначениеВыгрузки(УзелФЛ, "ОГРНИП", "А", УчСвФЛ.ОГРНИП, 15, Истина);
			ДобавитьЗначениеВыгрузки(УзелФЛ, "Гражданство", "А", УчСвФЛ.Гражданство, 3, Истина);
			ДобавитьЗначениеВыгрузки(УзелФЛ, "ДатаРожд", "А", УчСвФЛ.ДатаРожд, , Истина);
			
			// узел ФИО
			УчФИО = УчСвФЛ.ФИО;
			УзелФИО = ДобавитьУзел(УзелФЛ, "ФИО");
			ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчФИО.Фамилия, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчФИО.Имя, 60);
			ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчФИО.Отчество, 60, Истина);
			
			// узел АдрРФ
			УчАдрРФ = УчСвФЛ.АдрРФ;
			УзелАдрРФ = ДобавитьУзел(УзелФЛ, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
			
			// узел УдЛичн
			УчУдЛичн = УчСвФЛ.УдЛичн;
			УзелУдЛичн = ДобавитьУзел(УзелФЛ, "УдЛичн");
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВидДок", "А", УчУдЛичн.ВидДок, 2);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "СерНомДок", "А", УчУдЛичн.СерНомДок, 25);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ДатаДок", "А", УчУдЛичн.ДатаДок, 10);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ВыдДок", "А", УчУдЛичн.ВыдДок, 255);
			ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВыдДок", "А", УчУдЛичн.КодВыдДок, 7, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// узел СвУпПред
	УзелСвУпПред = ДобавитьУзел(УзелДокумент, "СвУпПред");
	СвУпПред = СведенияДоверенности.СвУпПред;
	СвПред = СвУппред.СвПред;
	
	// сведения о представителе
	УзелСвПред = ДобавитьУзел(УзелСвУпПред, "СвПред");
	
	
	// сведения о представителе-ЮЛ
	Если СвПред.Свойство("СвОрг") Тогда
		
		СвОрг = СвПред.СвОрг;
		
		УзелСвОрг = ДобавитьУзел(УзелСвПред, "СвОрг");
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "НаимОрг", "А", СвОрг.НаимОрг, 1000);
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "ИННЮЛ", "А", СвОрг.ИННЮЛ, 10);
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "КПП", "А", СвОрг.КПП, 9);
		ДобавитьЗначениеВыгрузки(УзелСвОрг, "ОГРН", "А", СвОрг.ОГРН, 13, Истина);
		
		// узел АдрРФ
		УчАдрРФ = СвОрг.АдрРФ;
		УзелАдрРФ = ДобавитьУзел(УзелСвОрг, "АдрРФ");
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
		ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
		
	// если представителем является физлицо - сотрудником представляемой организации,
	// то выгружаем в узел СвОрг сведения о представляемой организации
	ИначеЕсли СвПред.СведФизЛ.ЯвляетсяСотрудникомОрганизации Тогда
		
		// выгружаем сведения об организации представителя
		Если НЕ УчСвПредст.ЯвляетсяФЛ Тогда
			
			// узел НПЮЛ
			УзелСвОрг = ДобавитьУзел(УзелСвПред, "СвОрг");
			ДобавитьЗначениеВыгрузки(УзелСвОрг, "НаимОрг", "А", УчСвПредст.НаимОрг, 1000);
			ДобавитьЗначениеВыгрузки(УзелСвОрг, "ИННЮЛ", "А", УчСвПредст.ИННЮЛ, 10);
			ДобавитьЗначениеВыгрузки(УзелСвОрг, "КПП", "А", УчСвПредст.КПП, 9);
			ДобавитьЗначениеВыгрузки(УзелСвОрг, "ОГРН", "А", УчСвПредст.ОГРН, 13, Истина);
			
			// узел АдрРФ
			УчАдрРФ = УчСвПредст.АдрРФ;
			УзелАдрРФ = ДобавитьУзел(УзелСвОрг, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// сведения о представителе-ФЛ
	СведФизЛ = СвПред.СведФизЛ;
	
	// узел СведФизЛ
	УзелСведФизЛ = ДобавитьУзел(УзелСвПред, "СведФизЛ");
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "ИННФЛ", "А", СведФизЛ.ИННФЛ, 12, Истина);
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "ОГРНИП", "А", СведФизЛ.ОГРНИП, 15, Истина);
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "Гражданство", "А", СведФизЛ.Гражданство, 3, Истина);
	ДобавитьЗначениеВыгрузки(УзелСведФизЛ, "ДатаРожд", "А", СведФизЛ.ДатаРожд, , Истина);
	
	// узел ФИО
	УчФИО = СведФизЛ.ФИО;
	УзелФИО = ДобавитьУзел(УзелСведФизЛ, "ФИО");
	ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", УчФИО.Фамилия, 60);
	ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", УчФИО.Имя, 60);
	ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", УчФИО.Отчество, 60, Истина);
	
	// узел АдрРФ
	УчАдрРФ = СведФизЛ.АдрРФ;
	УзелАдрРФ = ДобавитьУзел(УзелСведФизЛ, "АдрРФ");
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", УчАдрРФ.Индекс, 6, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", УчАдрРФ.КодРегион, 2);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", УчАдрРФ.Район, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", УчАдрРФ.Город, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", УчАдрРФ.НаселПункт, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", УчАдрРФ.Улица, 50, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", УчАдрРФ.Дом, 8, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", УчАдрРФ.Корпус, 8, Истина);
	ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", УчАдрРФ.Кварт, 8, Истина);
	
	// узел УдЛичн
	УчУдЛичн = СведФизЛ.УдЛичн;
	УзелУдЛичн = ДобавитьУзел(УзелСведФизЛ, "УдЛичн");
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВидДок", "А", УчУдЛичн.ВидДок, 2);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "СерНомДок", "А", УчУдЛичн.СерНомДок, 25);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ДатаДок", "А", УчУдЛичн.ДатаДок, 10);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "ВыдДок", "А", УчУдЛичн.ВыдДок, 255);
	ДобавитьЗначениеВыгрузки(УзелУдЛичн, "КодВыдДок", "А", УчУдЛичн.КодВыдДок, 7, Истина);
	
	
	// сведения о полномочиях
	Для Каждого СтрПолнДов Из СвУпПред.ПолнДов Цикл
		
		УзелПолнДов = ДобавитьУзел(УзелСвУпПред, "ПолнДов");
		
		// узлы ПрОблПолн
		Для Каждого ЭлПрОблПолн Из СтрПолнДов.ПрОблПолн Цикл
			ДобавитьЗначениеВыгрузки(УзелПолнДов, "ПрОблПолн", "Э", ЭлПрОблПолн);
		КонецЦикла;
		
		// узел ОргФЛ
		СвОргФЛ = СтрПолнДов.ОргФЛ;
		Если СвОргФЛ.Свойство("ФЛ") Тогда
			Если ЗначениеЗаполнено(СтрПолнДов.ОКАТО) Тогда // признаком выгрузки ИНН ФЛ служит наличие ОКАТО
				УзелОргФЛ = ДобавитьУзел(УзелПолнДов, "ОргФЛ");
				ДобавитьЗначениеВыгрузки(УзелОргФЛ, "ФЛ", "Э", СвОргФЛ.ФЛ, 12);
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СвОргФЛ.КПП) Тогда
				УзелОргФЛ = ДобавитьУзел(УзелПолнДов, "ОргФЛ");
				УзелОрг = ДобавитьУзел(УзелОргФЛ, "Орг");
				ДобавитьЗначениеВыгрузки(УзелОрг, "ИННЮЛ", "А", СвОргФЛ.ИННЮЛ, 10);
				ДобавитьЗначениеВыгрузки(УзелОрг, "КПП", "А", СвОргФЛ.КПП, 9);
			КонецЕсли;
		КонецЕсли;
		
		// узел ОКАТО
		ДобавитьЗначениеВыгрузки(УзелПолнДов, "ОКАТО", "Э", СтрПолнДов.ОКАТО, 11, Истина);
		
	КонецЦикла;
	
	
	// сведения о нотариусе
	Если СведенияДоверенности.Свойство("Нотариус") Тогда
		
		СвНотариус = СведенияДоверенности.Нотариус;
		УзелУдостов = ДобавитьУзел(УзелДокумент, "Удостов");
		
		// сведения о нотариусе-ЮЛ
		Если СвНотариус.Свойство("СвОрган") Тогда
			
			СвОрган = СвНотариус.СвОрган;
			
			УзелСвОрган = ДобавитьУзел(УзелУдостов, "СвОрган");
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "НаимОрг", "А", СвОрган.НаимОрг, 1000);
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "ИННЮЛ", "А", СвОрган.ИННЮЛ, 10);
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "КПП", "А", СвОрган.КПП, 9);
			ДобавитьЗначениеВыгрузки(УзелСвОрган, "ОГРН", "А", СвОрган.ОГРН, 13, Истина);
			
		КонецЕсли;
		
		// сведения о нотариусе-ФЛ
		СвФизЛиц = СвНотариус.СвФизЛиц;
		
		УзелСвФизЛиц = ДобавитьУзел(УзелУдостов, "СвФизЛиц");
		ДобавитьЗначениеВыгрузки(УзелСвФизЛиц, "ИННФЛ", "А", СвФизЛиц.ИННФЛ, 12, Истина);
		
		СвФИО = СвФизЛиц.ФИО;
		УзелФИО = ДобавитьУзел(УзелСвФизЛиц, "ФИО");
		ДобавитьЗначениеВыгрузки(УзелФИО, "Фамилия", "А", СвФИО.Фамилия, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Имя", "А", СвФИО.Имя, 60);
		ДобавитьЗначениеВыгрузки(УзелФИО, "Отчество", "А", СвФИО.Отчество, 60, Истина);
		
		Если СвФизЛиц.Свойство("АдрРФ") Тогда
			
			СвАдрРФ = СвФизЛиц.АдрРФ;
			
			УзелАдрРФ = ДобавитьУзел(УзелСвФизЛиц, "АдрРФ");
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Индекс", "А", СвАдрРФ.Индекс, 6, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "КодРегион", "А", СвАдрРФ.КодРегион, 2);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Район", "А", СвАдрРФ.Район, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Город", "А", СвАдрРФ.Город, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "НаселПункт", "А", СвАдрРФ.НаселПункт, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Улица", "А", СвАдрРФ.Улица, 50, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Дом", "А", СвАдрРФ.Дом, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Корпус", "А", СвАдрРФ.Корпус, 8, Истина);
			ДобавитьЗначениеВыгрузки(УзелАдрРФ, "Кварт", "А", СвАдрРФ.Кварт, 8, Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// выгружаем дерево в файл
	КороткоеИмяФайлаДоверенности = ИдФайл + ".xml";
	ПолноеИмяФайлаДоверенности = КаталогВременныхФайлов() + КороткоеИмяФайлаДоверенности;
	Если НЕ ВыгрузитьДеревоДоверенностиВФайл(ДеревоВыгрузки, ПолноеИмяФайлаДоверенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДоверенности;
	
КонецФункции

Функция ВыгрузитьДеревоДоверенностиВФайл(Узел, ПолноеИмяФайлаДоверенности, ОбъектЗапись = Неопределено)
	
	ЭтоВерхнийУровеньРекурсии = (ОбъектЗапись = Неопределено);
	Если ЭтоВерхнийУровеньРекурсии Тогда
		ОбъектЗапись = Новый ЗаписьXML;
		ОбъектЗапись.ОткрытьФайл(ПолноеИмяФайлаДоверенности, "windows-1251");
		ОбъектЗапись.ЗаписатьОбъявлениеXML();
	КонецЕсли;
	
	// выгружаем текущий элемент и подчиненные
	Если НЕ ЭтоВерхнийУровеньРекурсии Тогда
		Если Узел.Тип = "А" ИЛИ Узел.Тип = "A" Тогда 
			ОбъектЗапись.ЗаписатьАтрибут(Узел.Имя, Строка(Узел.Значение));
		Иначе
			ОбъектЗапись.ЗаписатьНачалоЭлемента(Узел.Имя);
			Для каждого Лист из Узел.Строки Цикл
				ВыгрузитьДеревоДоверенностиВФайл(Лист, ПолноеИмяФайлаДоверенности, ОбъектЗапись);
			КонецЦикла;
			ОбъектЗапись.ЗаписатьТекст(Строка(Узел.Значение));
			ОбъектЗапись.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Для Каждого СтрУзел Из Узел.Строки Цикл
			ВыгрузитьДеревоДоверенностиВФайл(СтрУзел, ПолноеИмяФайлаДоверенности, ОбъектЗапись);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоВерхнийУровеньРекурсии Тогда
		ОбъектЗапись.Закрыть();
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ВыгрузитьДоверенность(РегистрацияВИФНС, КороткоеИмяФайлаДоверенности = Неопределено) Экспорт
	
	// получаем сведения доверенности из справочника
	СведенияДоверенности = ПолучитьСведенияДоверенности(РегистрацияВИФНС);
	Если НЕ ЗначениеЗаполнено(СведенияДоверенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, возможна ли выгрузка
	Если НЕ ПроверитьВозможностьВыгрузкиДоверенности(СведенияДоверенности) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СформироватьФайлВыгрузкиДоверенности(РегистрацияВИФНС, СведенияДоверенности, КороткоеИмяФайлаДоверенности);
	
КонецФункции

Функция ПолучитьСведенияДоверенности(РегистрацияВИФНС)
	
	
	Если НЕ ЗначениеЗаполнено(РегистрацияВИФНС) ИЛИ НЕ ЗначениеЗаполнено(РегистрацияВИФНС.Доверенность) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	// структура с результатом
	Сведения = Новый Структура;
	
	Доверенность = РегистрацияВИФНС.Доверенность;
	Организация = РегистрацияВИФНС.Владелец;
	
	
	// добавляем код НО
	Сведения.Вставить("КодНО", СокрЛП(РегистрацияВИФНС.Код));
	
	
	// формируем структуру с учетными сведениями о самой доверенности
	УчетныеСведенияОДоверенности = Новый Структура("Номер, Дата, ДатаОкончания", ?(ЗначениеЗаполнено(Доверенность.НомерДовер), СокрЛП(Доверенность.НомерДовер), "БН"), Доверенность.ДатаВыдачи, Доверенность.ДатаОкончания);
	Сведения.Вставить("УчСвДов", УчетныеСведенияОДоверенности);
	
	
	// формируем сведения о представляемом лице
	СведенияОПредставляемомЛице = Новый Структура;
	Если РегламентированнаяОтчетность.ЭтоПБОЮЛ(Организация) Тогда
		
		СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", Истина);
		
		// получаем все сведения о ФЛ
		СведенияОргФЛ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "ИННФЛ, ОГРН, Гражд, ДатаРожд, ФИО, ИндексМЖ, КодСубъектМЖ, РайонМЖ, ГородМЖ, НПунктМЖ, УлицаМЖ, ДомМЖ, КорпусМЖ, КвартираМЖ, КодУдЛичн, СерияУдЛичн, НомерУдЛичн, ДатаУдЛичн, ОрганВыданУдЛичн");
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("ИННФЛ", СокрЛП(СведенияОргФЛ.ИННФЛ));
		СведенияОПредставляемомЛице.Вставить("ОГРНИП", СокрЛП(СведенияОргФЛ.ОГРН));
		СведенияОПредставляемомЛице.Вставить("Гражданство", СокрЛП(СведенияОргФЛ.Гражд));
		СведенияОПредставляемомЛице.Вставить("ДатаРожд", СведенияОргФЛ.ДатаРожд);
		
		// формируем структуру с Ф.И.О.
		СведенияОПредставляемомЛице.Вставить("ФИО", РазложитьФИО(СведенияОргФЛ.ФИО));
		
		// формируем структуру с адресом предпринимателя
		АдресПредпринимателя = Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
												СокрЛП(СведенияОргФЛ.ИндексМЖ), СокрЛП(СведенияОргФЛ.КодСубъектМЖ), СокрЛП(СведенияОргФЛ.РайонМЖ), СокрЛП(СведенияОргФЛ.ГородМЖ),
												СокрЛП(СведенияОргФЛ.НПунктМЖ), СокрЛП(СведенияОргФЛ.УлицаМЖ), СокрЛП(СведенияОргФЛ.ДомМЖ), СокрЛП(СведенияОргФЛ.КорпусМЖ), СокрЛП(СведенияОргФЛ.КвартираМЖ));
		СведенияОПредставляемомЛице.Вставить("АдрРФ", АдресПредпринимателя);
		
		// формируем структуру со сведениями об удостоверении личности
		УдЛичнПредпринимателя = Новый Структура("ВидДок, СерНомДок, ДатаДок, ВыдДок, КодВыдДок", СокрЛП(СведенияОргФЛ.КодУдЛичн), СокрЛП(СокрЛП(СведенияОргФЛ.СерияУдЛичн) + " " + СокрЛП(СведенияОргФЛ.НомерУдЛичн)), СведенияОргФЛ.ДатаУдЛичн, СокрЛП(СведенияОргФЛ.ОрганВыданУдЛичн), "");
		СведенияОПредставляемомЛице.Вставить("УдЛичн", УдЛичнПредпринимателя);
		
	Иначе
		
		СведенияОПредставляемомЛице.Вставить("ЯвляетсяФЛ", Ложь);
		
		// получаем сведения о ЮЛ
		СведенияОргЮЛ = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Организация, , "НаимЮЛПол, ИННЮЛ, КППЮЛ, ОГРН, ОргИндекс, ОргКодСубъект, ОргРайон, ОргГород, ОргНПункт, ОргУлица, ОргДом, ОргКорпус, ОргКвартира, ФИОРук, ИННРук");
		
		// общие сведения
		СведенияОПредставляемомЛице.Вставить("НаимОрг", СокрЛП(СведенияОргЮЛ.НаимЮЛПол));
		СведенияОПредставляемомЛице.Вставить("ИННЮЛ", СокрЛП(СведенияОргЮЛ.ИННЮЛ));
		СведенияОПредставляемомЛице.Вставить("КПП", СокрЛП(СведенияОргЮЛ.КППЮЛ));
		СведенияОПредставляемомЛице.Вставить("ОГРН", СокрЛП(СведенияОргЮЛ.ОГРН));
		
		// формируем структуру с адресом предпринимателя
		АдресЮЛ = Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
									СокрЛП(СведенияОргЮЛ.ОргИндекс), СокрЛП(СведенияОргЮЛ.ОргКодСубъект), СокрЛП(СведенияОргЮЛ.ОргРайон), СокрЛП(СведенияОргЮЛ.ОргГород),
									СокрЛП(СведенияОргЮЛ.ОргНПункт), СокрЛП(СведенияОргЮЛ.ОргУлица), СокрЛП(СведенияОргЮЛ.ОргДом), СокрЛП(СведенияОргЮЛ.ОргКорпус), СокрЛП(СведенияОргЮЛ.ОргКвартира));
		СведенияОПредставляемомЛице.Вставить("АдрРФ", АдресЮЛ);
		
		// формируем структуру со сведениями о руководителе
		СвРукОргЮЛ = Новый Структура("ИННФЛ, ФИО", СокрЛП(СведенияОргЮЛ.ИННРук), РазложитьФИО(СведенияОргЮЛ.ФИОРук));
		СведенияОПредставляемомЛице.Вставить("СвРукОрг", СвРукОргЮЛ);
		
	КонецЕсли;
	
	Сведения.Вставить("СвПредст", СведенияОПредставляемомЛице);
	
	
	// формируем сведения о доверителе
	ПризнакДоверителя = Доверенность.ПризнакДоверителя;
	СвДовер = Новый Структура("ПрДов", ПризнакДоверителя);
	
	Если ПризнакДоверителя = 2 ИЛИ ПризнакДоверителя = 3 Тогда
		
		// выгружаем сведения о доверителе-ЮЛ
		Если Доверенность.ДоверительЯвляетсяЮЛ Тогда
			
			// общие сведения
			ДоверительЮЛ = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.ДоверительЮЛ_НаимОрг), СокрЛП(Доверенность.ДоверительЮЛ_ИНН), СокрЛП(Доверенность.ДоверительЮЛ_КПП), СокрЛП(Доверенность.ДоверительЮЛ_ОГРН));
			
			// адрес в РФ
			ДоверительЮЛ.Вставить("АдрЮЛ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительЮЛ));
			
			// сведения о руководителе
			СвРукОрг = Новый Структура("ИННФЛ, ФИО", СокрЛП(Доверенность.ДоверительРук_ИНН), ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительРук));
			ДоверительЮЛ.Вставить("СвРукОрг", СвРукОрг);
			
			СвДовер.Вставить("СвЮЛ", ДоверительЮЛ);
			
		КонецЕсли;
		
		// выгружаем сведения о довериетеле-ФЛ или об УЛ доверителя-ЮЛ
		Если НЕ Доверенность.ДоверительЯвляетсяЮЛ ИЛИ Доверенность.ДоверительИмеетУЛ Тогда
			
			// общие сведения
			ДоверительФЛ = Новый Структура("ИННФЛ, ОГРНИП, Гражданство, ДатаРожд", СокрЛП(Доверенность.ДоверительФЛ_ИНН), СокрЛП(Доверенность.ДоверительФЛ_ОГРН), СокрЛП(Доверенность.ДоверительФЛ_Гражданство.Код), Доверенность.ДоверительФЛ_ДатаРождения);
			
			// формируем ФИО
			ДоверительФЛ.Вставить("ФИО", ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			// формируем адрес
			ДоверительФЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			// формируем сведения об удостоверении личности
			ДоверительФЛ.Вставить("УдЛичн", ПолучитьУдЛичнДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ДоверительФЛ));
			
			СвДовер.Вставить("СвФЛ", ДоверительФЛ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Сведения.Вставить("СвДовер", СвДовер);
	
	
	// выгружаем сведения о представителе и его полномочиях
	СвУпПред = Новый Структура;
	
	// выгружаем сведения о представителе
	СвПред = Новый Структура;
	
	Если Доверенность.ПредставительЯвляетсяЮЛ Тогда
		СвПредставительЮЛ = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.ПредставительЮЛ_НаимОрг), СокрЛП(Доверенность.ПредставительЮЛ_ИНН), СокрЛП(Доверенность.ПредставительЮЛ_КПП), СокрЛП(Доверенность.ПредставительЮЛ_ОГРН));
		СвПредставительЮЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительЮЛ));
		СвПред.Вставить("СвОрг", СвПредставительЮЛ);
	КонецЕсли;
	
	СвПредставительФЛ = Новый Структура("ИННФЛ, ОГРНИП, Гражданство, ДатаРожд", СокрЛП(Доверенность.ПредставительФЛ_ИНН), СокрЛП(Доверенность.ПредставительФЛ_ОГРН), СокрЛП(Доверенность.ПредставительФЛ_Гражданство.Код), Доверенность.ПредставительФЛ_ДатаРождения);
	СвПредставительФЛ.Вставить("ФИО", ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("АдрРФ", ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("УдЛичн", ПолучитьУдЛичнДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.ПредставительФЛ));
	СвПредставительФЛ.Вставить("ЯвляетсяСотрудникомОрганизации", Доверенность.ПредставительЯвляетсяСотрудником);
	СвПред.Вставить("СведФизЛ", СвПредставительФЛ);
	
	СвУпПред.Вставить("СвПред", СвПред);
	
	СоответствиеРеквизитовКодамПолномочий = ПолучитьСоответствиеРеквизитовКодамПолномочийДоверенности();
	
	// выгружаем сведения о полномочиях
	ПолнДов = Новый Массив;
	Для Каждого ПолномочиеПредставителя Из Доверенность.ПолномочияПредставителя Цикл
		
		// собираем области полномочий
		ОбластиПолномочий = Новый Массив;
		Для Каждого Эл Из СоответствиеРеквизитовКодамПолномочий Цикл
			Если ПолномочиеПредставителя[Эл.Ключ] Тогда
				ОбластиПолномочий.Добавить(Эл.Значение);
			КонецЕсли;
		КонецЦикла;
		
		// собираем сведения о физ./юр.-лице по месту осуществления полномочий
		Если ЗначениеЗаполнено(ПолномочиеПредставителя.КПП) Тогда
			ОргФЛ = Новый Структура("ИННЮЛ, КПП", СокрЛП(Организация.ИНН), СокрЛП(ПолномочиеПредставителя.КПП));
		Иначе
			ОргФЛ = Новый Структура("ФЛ", СокрЛП(Организация.ИНН));
		КонецЕсли;
		
		ПолнДов.Добавить(Новый Структура("ПрОблПолн, ОргФЛ, ОКАТО", ОбластиПолномочий, ОргФЛ, СокрЛП(ПолномочиеПредставителя.ОКАТО)));
		
	КонецЦикла;
	СвУпПред.Вставить("ПолнДов", ПолнДов);
	
	Сведения.Вставить("СвУпПред", СвУпПред);
	
	
	// выгружаем сведения о нотариусе
	Если Доверенность.ЗаверенаНотариально Тогда
		
		Нотариус = Новый Структура;
		
		Если Доверенность.НотариусЯвляетсяЮЛ Тогда
			НотариусСвОрган = Новый Структура("НаимОрг, ИННЮЛ, КПП, ОГРН", СокрЛП(Доверенность.НотариусЮЛ_НаимОрг), СокрЛП(Доверенность.НотариусЮЛ_ИНН), СокрЛП(Доверенность.НотариусЮЛ_КПП), СокрЛП(Доверенность.НотариусЮЛ_ОГРН));
			Нотариус.Вставить("СвОрган", НотариусСвОрган);
		КонецЕсли;
		
		НотариусФЛФИО = ПолучитьФИОДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.НотариусФЛ);
		НотариусСвФизЛица = Новый Структура("ИННФЛ, ФИО", СокрЛП(Доверенность.НотариусФЛ_ИНН), НотариусФЛФИО);
		
		НотариусФЛАдрес = ПолучитьАдресДоверенности(Доверенность, Перечисления.СубъектыДоверенностиНалогоплательщика.НотариусФЛ);
		Если ЗначениеЗаполнено(НотариусФЛАдрес) Тогда
			НотариусСвФизЛица.Вставить("АдрРФ", НотариусФЛАдрес);
		КонецЕсли;
		
		Нотариус.Вставить("СвФизЛиц", НотариусСвФизЛица);
		
		Сведения.Вставить("Нотариус", Нотариус);
		
	КонецЕсли;
	
	
	// возвращаем полученную структуру
	Возврат Сведения;
	
КонецФункции

Функция ПолучитьАдресДоверенности(Доверенность, ТипСубъекта)
	
	АдресДоверенности = Доверенность.Адреса.Найти(ТипСубъекта, "Владелец");
	Если АдресДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Индекс, КодРегион, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт",
								СокрЛП(АдресДоверенности.Индекс), СокрЛП(АдресДоверенности.КодРегион), СокрЛП(АдресДоверенности.Район), СокрЛП(АдресДоверенности.Город),
								СокрЛП(АдресДоверенности.НаселПункт), СокрЛП(АдресДоверенности.Улица), СокрЛП(АдресДоверенности.Дом), СокрЛП(АдресДоверенности.Корпус), СокрЛП(АдресДоверенности.Кварт));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьФИОДоверенности(Доверенность, ТипСубъекта)
	
	ФИОДоверенности = Доверенность.ФИО.Найти(ТипСубъекта, "Владелец");
	Если ФИОДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("Фамилия, Имя, Отчество", СокрЛП(ФИОДоверенности.Фамилия), СокрЛП(ФИОДоверенности.Имя), СокрЛП(ФИОДоверенности.Отчество));
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУдЛичнДоверенности(Доверенность, ТипСубъекта)
	
	УдЛичнДоверенности = Доверенность.УдЛичности.Найти(ТипСубъекта, "Владелец");
	Если УдЛичнДоверенности = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат Новый Структура("ВидДок, СерНомДок, ДатаДок, ВыдДок, КодВыдДок",
								СокрЛП(УдЛичнДоверенности.ВидДок.КодИМНС), СокрЛП(СокрЛП(УдЛичнДоверенности.СерДок) + " " + СокрЛП(УдЛичнДоверенности.НомДок)), УдЛичнДоверенности.ДатаДок, СокрЛП(УдЛичнДоверенности.ВыдДок), СокрЛП(УдЛичнДоверенности.КодВыдДок));
	КонецЕсли;
	
КонецФункции

Процедура ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, ТекстОшибки)
	
	ПризнакОшибки = Истина;
	ОшибкиПроверки.Добавить(ТекстОшибки);
	
КонецПроцедуры

Функция ПроверитьВозможностьВыгрузкиДоверенности(СведенияДоверенности)
	
	ОшибкиПроверки = Новый Массив;
	ПризнакОшибки = Ложь;
	
	
	// код НО
	Если СтрДлина(СведенияДоверенности.КодНО) <> 4 Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код налогового органа!");
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// учетные сведения доверенности
	УчСвДов = СведенияДоверенности.УчСвДов;
	
	// при отсутствии номера проставляется "БН"
	//Если НЕ ЗначениеЗаполнено(УчСвДов.Номер) Тогда
	//	ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан номер доверенности!");
	//КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчСвДов.Дата) Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана дата выдачи доверенности!");
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения о представляемом лице
	СвПредст = СведенияДоверенности.СвПредст;
	Если СвПредст.ЯвляетсяФЛ Тогда
		
		// общие сведения представителя - ФЛ
		Если ЗначениеЗаполнено(СвПредст.ИННФЛ) И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвПредст.ИННФЛ, Истина) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН представляемого лица (" + СвПредст.ИННФЛ + ")!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвПредст.ОГРНИП) И СтрДлина(СвПредст.ОГРНИП) <> 15 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРНИП представляемого лица (" + СвПредст.ОГРНИП + ")!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвПредст.Гражданство) И СтрДлина(СвПредст.Гражданство) <> 3 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код страны гражданства представляемого лица (" + СвПредст.Гражданство + ")!");
		КонецЕсли;
		
		// ФИО
		ФИОПредстФЛ = СвПредст.ФИО;
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Фамилия) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана фамилия представляемого лица!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Имя) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано имя представляемого лица!");
		КонецЕсли;
		
		// адрес
		АдрПредстФЛ = СвПредст.АдрРФ;
		
		Если ЗначениеЗаполнено(АдрПредстФЛ.Индекс) И СтрДлина(АдрПредстФЛ.Индекс) <> 6 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе представляемого лица указан некорректный индекс!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдрПредстФЛ.КодРегион) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе представляемого лица не указан код региона!");
		ИначеЕсли СтрДлина(АдрПредстФЛ.КодРегион) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе представляемого лица некорректно указан код региона!");
		КонецЕсли;
		
		// удостоверение личности
		УдЛичнПредстФЛ = СвПредст.УдЛичн;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВидДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан код вида документа, удостоверяющего личность представляемого лица!");
		ИначеЕсли СтрДлина(УдЛичнПредстФЛ.ВидДок) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код вида документа, удостоверяющего личность представляемого лица!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.СерНомДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указаны серия и номер документа, удостоверяющего личность представляемого лица!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ДатаДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана дата документа, удостоверяющего личность представляемого лица!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВыдДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование органа, выдавшего документ, удостоверяющий личность представляемого лица!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдЛичнПредстФЛ.КодВыдДок) И СтрДлина(УдЛичнПредстФЛ.КодВыдДок) <> 7 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код подразделения органа, выдавшего документ, удостоверяющий личность представляемого лица!");
		КонецЕсли;
		
	Иначе
		
		// общие сведения
		Если НЕ ЗначениеЗаполнено(СвПредст.НаимОрг) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование организации - представляемого лица!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвПредст.ИННЮЛ) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан ИНН организации - представляемого лица!");
		ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвПредст.ИННЮЛ, Ложь) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН организации - представляемого лица (" + СвПредст.ИННЮЛ + ")!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвПредст.КПП) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан КПП организации - представляемого лица!");
		ИначеЕсли СтрДлина(СвПредст.КПП) <> 9 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный КПП организации - представляемого лица (" + СвПредст.КПП + ")!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвПредст.ОГРН) И СтрДлина(СвПредст.ОГРН) <> 13 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРН организации - представляемого лица (" + СвПредст.ОГРН + ")!");
		КонецЕсли;
		
		// адрес
		АдрПредстЮЛ = СвПредст.АдрРФ;
		
		Если ЗначениеЗаполнено(АдрПредстЮЛ.Индекс) И СтрДлина(АдрПредстЮЛ.Индекс) <> 6 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - представляемого лица указан некорректный индекс!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдрПредстЮЛ.КодРегион) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - представляемого лица не указан код региона!");
		ИначеЕсли СтрДлина(АдрПредстЮЛ.КодРегион) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - представляемого лица некорректно указан код региона!");
		КонецЕсли;
		
		// сведения о руководителе
		СвРукПредстЮЛ = СвПредст.СвРукОрг;
		
		Если ЗначениеЗаполнено(СвРукПредстЮЛ.ИННФЛ) И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвРукПредстЮЛ.ИННФЛ, Истина) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН руководителя организации - представляемого лица!");
		КонецЕсли;
		
		ФИОРукПредстЮЛ = СвРукПредстЮЛ.ФИО;
		Если НЕ ЗначениеЗаполнено(ФИОРукПредстЮЛ.Фамилия) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана фамилия руководителя организации - представляемого лица!");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФИОРукПредстЮЛ.Имя) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано имя руководителя организации - представляемого лица!");
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения о представительстве (доверителе)
	СвДовер = СведенияДоверенности.СвДовер;
	Если СвДовер.ПрДов = 2 ИЛИ СвДовер.ПрДов = 3 Тогда
		
		// сведения о юрлице
		Если СвДовер.Свойство("СвЮЛ") Тогда
			
			СвДоверЮЛ = СвДовер.СвЮЛ;
			
			// общие сведения
			Если НЕ ЗначениеЗаполнено(СвДоверЮЛ.НаимОрг) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование организации - доверителя!");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвДоверЮЛ.ИННЮЛ) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан ИНН организации - доверителя!");
			ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвДоверЮЛ.ИННЮЛ, Ложь) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН организации - доверителя (" + СвДоверЮЛ.ИННЮЛ + ")!");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвДоверЮЛ.КПП) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан КПП организации - доверителя!");
			ИначеЕсли СтрДлина(СвДоверЮЛ.КПП) <> 9 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный КПП организации - доверителя (" + СвДоверЮЛ.КПП + ")!");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвДоверЮЛ.ОГРН) И СтрДлина(СвДоверЮЛ.ОГРН) <> 13 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРН организации - доверителя (" + СвДоверЮЛ.ОГРН + ")!");
			КонецЕсли;
			
			// адрес
			АдрДоверЮЛ = СвДоверЮЛ.АдрЮЛ;
			Если ЗначениеЗаполнено(АдрДоверЮЛ) Тогда
				
				Если ЗначениеЗаполнено(АдрДоверЮЛ.Индекс) И СтрДлина(АдрДоверЮЛ.Индекс) <> 6 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - доверителя указан некорректный индекс!");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АдрДоверЮЛ.КодРегион) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - доверителя не указан код региона!");
				ИначеЕсли СтрДлина(АдрДоверЮЛ.КодРегион) <> 2 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - доверителя некорректно указан код региона!");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан адрес организации - доверителя!");
			КонецЕсли;
			
			// сведения о руководителе
			СвРукДоверЮЛ = СвДоверЮЛ.СвРукОрг;
			
			Если ЗначениеЗаполнено(СвРукДоверЮЛ.ИННФЛ) И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвРукДоверЮЛ.ИННФЛ, Истина) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН руководителя организации - доверителя!");
			КонецЕсли;
			
			ФИОРукДоверЮЛ = СвРукДоверЮЛ.ФИО;
			Если ЗначениеЗаполнено(ФИОРукДоверЮЛ) Тогда
				Если НЕ ЗначениеЗаполнено(ФИОРукДоверЮЛ.Фамилия) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана фамилия руководителя организации - доверителя!");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИОРукДоверЮЛ.Имя) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано имя руководителя организации - доверителя!");
				КонецЕсли;
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано ФИО руководителя организации - доверителя!");
			КонецЕсли;
			
		КонецЕсли;
		
		// сведения о физлице
		Если СвДовер.Свойство("СвФЛ") Тогда
			
			СвДоверФЛ = СвДовер.СвФЛ;
			
			// общие сведения представителя - ФЛ
			Если ЗначениеЗаполнено(СвДоверФЛ.ИННФЛ) И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвДоверФЛ.ИННФЛ, Истина) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН физического лица - доверителя (" + СвДоверФЛ.ИННФЛ + ")!");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвДоверФЛ.ОГРНИП) И СтрДлина(СвДоверФЛ.ОГРНИП) <> 15 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРНИП физического лица - доверителя (" + СвДоверФЛ.ОГРНИП + ")!");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвДоверФЛ.Гражданство) И СтрДлина(СвДоверФЛ.Гражданство) <> 3 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код страны гражданства физического лица - доверителя (" + СвДоверФЛ.Гражданство + ")!");
			КонецЕсли;
			
			// ФИО
			ФИОДоверФЛ = СвДоверФЛ.ФИО;
			Если ЗначениеЗаполнено(ФИОДоверФЛ) Тогда
				Если НЕ ЗначениеЗаполнено(ФИОДоверФЛ.Фамилия) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана фамилия физического лица - доверителя!");
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ФИОДоверФЛ.Имя) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано имя физического лица - доверителя!");
				КонецЕсли;
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано ФИО физического лица - доверителя!");
			КонецЕсли;
			
			// адрес
			АдрДоверФЛ = СвДоверФЛ.АдрРФ;
			Если ЗначениеЗаполнено(АдрДоверФЛ) Тогда
				
				Если ЗначениеЗаполнено(АдрДоверФЛ.Индекс) И СтрДлина(АдрДоверФЛ.Индекс) <> 6 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе физического лица - доверителя указан некорректный индекс!");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(АдрДоверФЛ.КодРегион) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе физического лица - доверителя не указан код региона!");
				ИначеЕсли СтрДлина(АдрДоверФЛ.КодРегион) <> 2 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе физического лица - доверителя некорректно указан код региона!");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан адрес физического лица - доверителя!");
			КонецЕсли;
			
			// удостоверение личности
			УдЛичнДоверФЛ = СвДоверФЛ.УдЛичн;
			Если ЗначениеЗаполнено(УдЛичнДоверФЛ) Тогда
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.ВидДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан код вида документа, удостоверяющего личность физического лица - доверителя!");
				ИначеЕсли СтрДлина(УдЛичнДоверФЛ.ВидДок) <> 2 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код вида документа, удостоверяющего личность физического лица - доверителя!");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.СерНомДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указаны серия и номер документа, удостоверяющего личность физического лица - доверителя!");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.ДатаДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана дата документа, удостоверяющего личность физического лица - доверителя!");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(УдЛичнДоверФЛ.ВыдДок) Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование органа, выдавшего документ, удостоверяющий личность физического лица - доверителя!");
				КонецЕсли;
				
				Если ЗначениеЗаполнено(УдЛичнДоверФЛ.КодВыдДок) И СтрДлина(УдЛичнДоверФЛ.КодВыдДок) <> 7 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код подразделения органа, выдавшего документ, удостоверяющий личность физического лица - доверителя!");
				КонецЕсли;
				
			Иначе
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указаны сведения о документе, удостоверяющем личность физического лица - доверителя!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения об уполномоченном представителе и его полномочиях
	СвУпПред = СведенияДоверенности.СвУпПред;
	
	СвПред = СвУпПред.СвПред;
	
	
	// сведения о представителе-ЮЛ
	Если СвПред.Свойство("СвОрг") Тогда
		
		СвОрг = СвПред.СвОрг;
		
		// общие сведения
		Если НЕ ЗначениеЗаполнено(СвОрг.НаимОрг) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование организации - представителя!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвОрг.ИННЮЛ) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан ИНН организации - представителя!");
		ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвОрг.ИННЮЛ, Ложь) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН организации - представителя (" + СвОрг.ИННЮЛ + ")!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвОрг.КПП) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан КПП организации - представителя!");
		ИначеЕсли СтрДлина(СвОрг.КПП) <> 9 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный КПП организации - представителя (" + СвОрг.КПП + ")!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СвОрг.ОГРН) И СтрДлина(СвОрг.ОГРН) <> 13 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРН организации - представителя (" + СвОрг.ОГРН + ")!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СвОрг.АдрРФ) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан адрес организации - представителя!");
		Иначе
			
			// адрес
			АдрПредстЮЛ = СвОрг.АдрРФ;
			
			Если ЗначениеЗаполнено(АдрПредстЮЛ.Индекс) И СтрДлина(АдрПредстЮЛ.Индекс) <> 6 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - представителя указан некорректный индекс!");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдрПредстЮЛ.КодРегион) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - представителя не указан код региона!");
			ИначеЕсли СтрДлина(АдрПредстЮЛ.КодРегион) <> 2 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе организации - представителя некорректно указан код региона!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// сведения о представителе-ФЛ
	СведПредстФЛ = СвПред.СведФизЛ;
	
	// общие сведения
	Если ЗначениеЗаполнено(СведПредстФЛ.ИННФЛ) И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СведПредстФЛ.ИННФЛ, Истина) Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН физического лица - представителя (" + СведПредстФЛ.ИННФЛ + ")!");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведПредстФЛ.ОГРНИП) И СтрДлина(СведПредстФЛ.ОГРНИП) <> 15 Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРНИП физического лица - представителя (" + СведПредстФЛ.ОГРНИП + ")!");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СведПредстФЛ.Гражданство) И СтрДлина(СведПредстФЛ.Гражданство) <> 3 Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код страны гражданства физического лица - представителя (" + СведПредстФЛ.Гражданство + ")!");
	КонецЕсли;
	
	// ФИО
	ФИОПредстФЛ = СведПредстФЛ.ФИО;
	Если ЗначениеЗаполнено(ФИОПредстФЛ) Тогда
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Фамилия) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана фамилия физического лица - представителя!");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ФИОПредстФЛ.Имя) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано имя физического лица - представителя!");
		КонецЕсли;
	Иначе
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано ФИО физического лица - представителя!");
	КонецЕсли;
	
	// адрес
	АдрПредстФЛ = СведПредстФЛ.АдрРФ;
	Если ЗначениеЗаполнено(АдрПредстФЛ) Тогда
		
		Если ЗначениеЗаполнено(АдрПредстФЛ.Индекс) И СтрДлина(АдрПредстФЛ.Индекс) <> 6 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе физического лица - представителя указан некорректный индекс!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(АдрПредстФЛ.КодРегион) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе физического лица - представителя не указан код региона!");
		ИначеЕсли СтрДлина(АдрПредстФЛ.КодРегион) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе физического лица - представителя некорректно указан код региона!");
		КонецЕсли;
		
	Иначе
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан адрес физического лица - представителя!");
	КонецЕсли;
	
	// удостоверение личности
	УдЛичнПредстФЛ = СведПредстФЛ.УдЛичн;
	
	Если ЗначениеЗаполнено(УдЛичнПредстФЛ) Тогда
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВидДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан код вида документа, удостоверяющего личность физического лица - представителя!");
		ИначеЕсли СтрДлина(УдЛичнПредстФЛ.ВидДок) <> 2 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код вида документа, удостоверяющего личность физического лица - представителя!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.СерНомДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указаны серия и номер документа, удостоверяющего личность физического лица - представителя!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ДатаДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана дата документа, удостоверяющего личность физического лица - представителя!");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УдЛичнПредстФЛ.ВыдДок) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование органа, выдавшего документ, удостоверяющий личность физического лица - представителя!");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(УдЛичнПредстФЛ.КодВыдДок) И СтрДлина(УдЛичнПредстФЛ.КодВыдДок) <> 7 Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный код подразделения органа, выдавшего документ, удостоверяющий личность физического лица - представителя!");
		КонецЕсли;
		
	Иначе
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указаны сведения о документе, удостоверяющем личность физического лица - представителя!");
	КонецЕсли;
	
	// сведения о полномочиях представителя
	ПолнДов = СвУпПред.ПолнДов;
	Если НЕ ЗначениеЗаполнено(ПолнДов) Тогда
		ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не определены полномочия представителя!");
	Иначе
	
		НомПП = 0;
		Для Каждого ЭлПолнДов Из ПолнДов Цикл
			
			НомПП = НомПП + 1;
			
			ОбластиПолномочий = ЭлПолнДов.ПрОблПолн;
			ОргФЛ = ЭлПолнДов.ОргФЛ;
			ОКАТО = ЭлПолнДов.ОКАТО;
			
			Если ОбластиПолномочий.Количество() = 0 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не определены полномочия в строке " + НомПП + " таблицы полномочий!");
			КонецЕсли;
			
			Если НЕ ОргФЛ.Свойство("ФЛ") Тогда
				Если ЗначениеЗаполнено(ОргФЛ.КПП) И СтрДлина(ОргФЛ.КПП) <> 9 Тогда
					ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В строке " + НомПП + " таблицы полномочий определен некорректный КПП!");
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОКАТО) И СтрДлина(ОКАТО) <> 11 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В строке " + НомПП + " таблицы полномочий определен некорректный ОКАТО!");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	
	// сведения о нотариусе
	Если СведенияДоверенности.Свойство("Нотариус") Тогда
		
		СвНотариус = СведенияДоверенности.Нотариус;
		
		Если СвНотариус.Свойство("СвОрган") Тогда
			
			СвОрган = СвНотариус.СвОрган;
			
			// общие сведения
			Если НЕ ЗначениеЗаполнено(СвОрган.НаимОрг) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано наименование организации нотариуса!");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвОрган.ИННЮЛ) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан ИНН организации нотариуса!");
			ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвОрган.ИННЮЛ, Ложь) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН организации нотариуса (" + СвОрган.ИННЮЛ + ")!");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СвОрган.КПП) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указан КПП организации нотариуса!");
			ИначеЕсли СтрДлина(СвОрган.КПП) <> 9 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный КПП организации нотариуса (" + СвОрган.КПП + ")!");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СвОрган.ОГРН) И СтрДлина(СвОрган.ОГРН) <> 13 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ОГРН организации нотариуса (" + СвОрган.ОГРН + ")!");
			КонецЕсли;
			
		КонецЕсли;
		
		СвФизЛиц = СвНотариус.СвФизЛиц;
		Если ЗначениеЗаполнено(СвФизЛиц.ИННФЛ) И НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(СвФизЛиц.ИННФЛ, Истина) Тогда
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Указан некорректный ИНН нотариуса - физического лица (" + СвФизЛиц.ИННФЛ + ")!");
		КонецЕсли;
		
		ФИОНотариусаФЛ = СвФизЛиц.ФИО;
		Если ЗначениеЗаполнено(ФИОНотариусаФЛ) Тогда
			Если НЕ ЗначениеЗаполнено(ФИОНотариусаФЛ.Фамилия) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указана фамилия нотариуса - физического лица!");
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ФИОНотариусаФЛ.Имя) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано имя нотариуса - физического лица!");
			КонецЕсли;
		Иначе
			ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "Не указано ФИО нотариуса - физического лица!");
		КонецЕсли;
		
		Если СвФизЛиц.Свойство("АдрРФ") Тогда
			
			АдресНотариусаФЛ = СвФизЛиц.АдрРФ;
			
			Если ЗначениеЗаполнено(АдресНотариусаФЛ.Индекс) И СтрДлина(АдресНотариусаФЛ.Индекс) <> 6 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе нотариуса - физического лица указан некорректный индекс!");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(АдресНотариусаФЛ.КодРегион) Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе нотариуса - физического лица не указан код региона!");
			ИначеЕсли СтрДлина(АдресНотариусаФЛ.КодРегион) <> 2 Тогда
				ЗарегистрироватьОшибкуПроверки(ПризнакОшибки, ОшибкиПроверки, "В адресе нотариуса - физического лица некорректно указан код региона!");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОшибкиПроверки.Количество() > 0 Тогда
		Сообщить("Не удалось выгрузить сведения о доверенности, выданной представителю:", СтатусСообщения.Важное);
		Для Каждого ТекстОшибки Из ОшибкиПроверки Цикл
			Сообщить(ТекстОшибки, СтатусСообщения.БезСтатуса);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НЕ ПризнакОшибки;
	
КонецФункции

Функция ПолучитьСоответствиеРеквизитовКодамПолномочийДоверенности()
	
	СоответствиеРеквизитовКодамПолномочий = Новый Соответствие;
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак01", "01");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак02", "02");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак03", "03");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак04", "04");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак05", "05");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак06", "06");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак07", "07");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак08", "08");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак09", "09");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак10", "10");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак11", "11");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак12", "12");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак13", "13");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак14", "14");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак15", "15");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак16", "16");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак17", "17");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак18", "18");
	СоответствиеРеквизитовКодамПолномочий.Вставить("Признак19", "19");
	СоответствиеРеквизитовКодамПолномочий.Вставить("ПризнакПолныеПолномочия", "99");
	
	Возврат СоответствиеРеквизитовКодамПолномочий;
	
КонецФункции

Процедура ПоказатьЦиклыОбменаОтчета2НДФЛ(мСохраненныйДок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(мСохраненныйДок) Тогда
		Предупреждение("Объект не записан.");
		Возврат;
	КонецЕсли;
	
	ПолучитьФорму("УправлениеОбменом").Открыть();
	Оповестить("Показать циклы обмена", мСохраненныйДок.Ссылка);
	
КонецПроцедуры

Процедура ОбновитьСтатусОтправкиВРегламентированномОтчете2НДФЛ(Форма) Экспорт
	
	// находим панель
	ПанельОтправки = Форма.ЭлементыФормы.Найти("ПанельОтправки");
	НадписьПанельОтправки = Форма.ЭлементыФормы.Найти("НадписьПанельОтправки");
	Если ПанельОтправки = Неопределено ИЛИ НадписьПанельОтправки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// если организация не определена, то скроем панель
	Если НЕ СвойствоОпределено(Форма, "Организация") Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		Возврат;
	КонецЕсли;
	Организация = Форма.Организация;
	
	// определяем ссылку на отчет
	СсылкаНаОтчет = ПолучитьСсылкуНаОтчетФормы(Форма);
	
	// определяем последний цикл обмена по отчету
	Если ЗначениеЗаполнено(СсылкаНаОтчет) Тогда
		ПоследнийЦиклОбмена = ПолучитьПоследнийЦиклОбмена(СсылкаНаОтчет);
	Иначе
		ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка();
	КонецЕсли;
	
	// если у пользователя недостаточно прав для получения сведений об отправке, то скроем панель
	Если ПоследнийЦиклОбмена = Неопределено Тогда
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
		Возврат;
	// если цикл обмена не найден и обмен с ФНС(!) по организации выключен, то скроем панель
	ИначеЕсли ПоследнийЦиклОбмена = Справочники.ЦиклыОбмена.ПустаяСсылка() Тогда
		Если Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате
		ИЛИ НЕ Организация.УчетнаяЗаписьОбмена.ПредназначенаДляДокументооборотаСФНС Тогда
			ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализируем результат
	ТекстПанели = "";
	ИмеютсяОшибки = Ложь;
	ОтчетСдан = Ложь;
	
	// получаем список всех не помеченных на удаление сообщений последнего цикла
	СообщенияЦикла = ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена);
	
	
	// выделяем основные типы сообщений
	СтрФормы2НДФЛНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП));
	СтрПодтвержденияФорма2НДФЛНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО));
	СтрИзвещенияПодтверждениеНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
	СтрИзвещенияФорма2НДФЛНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО));
	СтрРезультатыПриемаФорма2НДФЛНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО));
	СтрИзвещенияРезультатПриемаНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
	
	СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
	
	// находим первичное
	Если СтрФормы2НДФЛНП.Количество() = 0 Тогда
		
		ТекстПанели = "Документ не отправлялся.";
		ИмеютсяОшибки = Ложь;
		ОтчетСдан = Ложь;
		
	Иначе
		
		СтрДекларацияНП = СтрФормы2НДФЛНП[0];
		
		// получаем свойства для анализа
		СтатусПервичного = СтрДекларацияНП.Статус;
		ДатаСозданияПервичного = СтрДекларацияНП.Дата;
		ДатаОтправкиПервичного = СтрДекларацияНП.ДатаТранспорта;
		
		// отражаем статус первичного в строке статуса
		Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
			ТекстПанели = "Конверт для отправки документа создан";
			Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
				ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
			КонецЕсли;
			ТекстПанели = ТекстПанели + ", но не отправлен. ";
		Иначе
			
			ТекстПанели = "Документ отправлен";
			Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
				ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
			КонецЕсли;
			ТекстПанели = ТекстПанели + ". ";
			
			ВсеВходящиеПолученыИПроанализированы = Истина;
			Если СтрПодтвержденияФорма2НДФЛНО.Количество() = 0 Тогда
				ТекстПанели = ТекстПанели + "Ожидается подтверждение даты отправки. ";
			ИначеЕсли СтрИзвещенияФорма2НДФЛНО.Количество() = 0 Тогда
				ТекстПанели = ТекстПанели + "Ожидается извещение о получении. ";
			ИначеЕсли СтрРезультатыПриемаФорма2НДФЛНО.Количество() = 0 Тогда
				ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее результат приема. ";
			Иначе
				
				// определяем наиболее свежее сообщение с результатом приема
				ПоследнийРезультатПриема = Неопределено;
				Для Каждого СтрРезультатПриемаДекларацияНО Из СтрРезультатыПриемаФорма2НДФЛНО Цикл
					Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаДекларацияНО.Дата > ПоследнийРезультатПриема.Дата Тогда
						ПоследнийРезультатПриема = СтрРезультатПриемаДекларацияНО;
					КонецЕсли;
				КонецЦикла;
				
				// если результат приема отрицательный, то выводим соответствующее сообщение
				Если ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
					ТекстПанели = ТекстПанели + "Документ не принят: получен отрицательный протокол. ";
					ИмеютсяОшибки = Истина;
				Иначе
					ТекстПанели = ТекстПанели + "Документ сдан. ";
					ОтчетСдан = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
			ВсеПодтвержденияОтправлены = Истина;
			
			// проверяем наличие отправленных подтверждений на все подтверждения отправки
			Для Каждого СтрПодтверждениеДекларацияНО Из СтрПодтвержденияФорма2НДФЛНО Цикл
				СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
										Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,
										Перечисления.СтатусыПисем.Отправленное,
										СтрПодтверждениеДекларацияНО.Ссылка);
				СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
				Если СтрПодтверждения.Количество() = 0 Тогда
					ВсеПодтвержденияОтправлены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// проверяем наличие отправленных подтверждений на все результаты приема
			Если ВсеПодтвержденияОтправлены Тогда
				Для Каждого СтрРезультатПриемаДекларацияНО Из СтрРезультатыПриемаФорма2НДФЛНО Цикл
					СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
											Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,
											Перечисления.СтатусыПисем.Отправленное,
											СтрРезультатПриемаДекларацияНО.Ссылка);
					СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
					Если СтрПодтверждения.Количество() = 0 Тогда
						ВсеПодтвержденияОтправлены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// компилируем предупреждающий текст
			СтрОбратитеВнимание = Новый Массив;
			Если СтрКритическиеОшибки.Количество() > 0 Тогда
				СтрОбратитеВнимание.Добавить("имеются критические ошибки");
				ИмеютсяОшибки = Истина;
			КонецЕсли;
			Если НЕ ВсеПодтвержденияОтправлены Тогда
				СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
			КонецЕсли;
			
			Если СтрОбратитеВнимание.Количество() > 0 Тогда
				ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
				Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
					ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
					ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
				КонецЦикла;
				ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ОтчетСдан Тогда
		ЦветШрифта = Новый Цвет(0, 179, 16);
		ЦветРамки = ЦветШрифта;
	ИначеЕсли ИмеютсяОшибки Тогда
		ЦветШрифта = Новый Цвет(255, 0, 0);
		ЦветРамки = ЦветШрифта;
	Иначе
		ЦветШрифта = Новый Цвет(0, 0, 192);
		ЦветРамки = Новый Цвет(227, 227, 227);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстПанели) Тогда
		
		НадписьПанельОтправки.Заголовок = СокрЛП(ТекстПанели);
		НадписьПанельОтправки.ЦветТекста = ЦветШрифта;
		
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		ПанельОтправкиВнутренняя = Форма.ЭлементыФормы.Найти("ПанельОтправкиВнутренняя");
		Если ПанельОтправкиВнутренняя <> Неопределено Тогда
			ПанельОтправкиВнутренняя.ЦветРамки = ЦветРамки;
		КонецЕсли;
		
	Иначе
		ПанельОтправки.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияФормыРегламентированногоОтчета2НДФЛ(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ИмяСобытия = "Изменение статуса отправки регламентированного отчета" И ЗначениеЗаполнено(Параметр) И Источник = СсылкаНаОтчетПоФорме(Форма) Тогда
		ОбновитьСтатусОтправкиВРегламентированномОтчете2НДФЛ(Форма);
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ЗначениеЗаполнено(Параметр) И ОтчетЯвляетсяПредметом(Параметр.ЦиклОбмена.Предмет, СсылкаНаОтчетПоФорме(Форма)) Тогда
		ОбновитьСтатусОтправкиВРегламентированномОтчете2НДФЛ(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыгрузитьОтчет2НДФЛДляЦелейОнлайнПроверки(Док)
	
	ТекстВыгрузки = "";
	ИмяФайлаВыгрузки = "";
	Если НЕ ВыгрузитьОтчет2НДФЛ(Док, ТекстВыгрузки, ИмяФайлаВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПутьККаталогу = ПолучитьИмяВременногоФайла() + "\";
	СоздатьКаталог(ПутьККаталогу);
	ПолноеИмяФайлаВыгрузки = ПутьККаталогу + ИмяФайлаВыгрузки;
	
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(ТекстВыгрузки);
	Текст.Записать(ПолноеИмяФайлаВыгрузки, КодировкаТекста.ANSI);
	
	Возврат ПолноеИмяФайлаВыгрузки;
	
КонецФункции

// функция выгружает документ 2-НДФЛ для представления в ФНС
Функция ВыгрузитьОтчет2НДФЛ(Док, ТекстВыгрузки = Неопределено, ИмяФайлаВыгрузки = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Сообщить("Не выбран документ для выгрузки.", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// создаем объект
	ДокументОбъект = Док.ПолучитьОбъект();
	
	// формируем текст выгрузки
	ЕстьОшибки = Ложь;
	ТекстВыгрузки = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект, ЕстьОшибки);
	Если ЕстьОшибки тогда
		Возврат Ложь;
	КонецЕсли;
	
	// для прохождения синтакс-контроля в конфигурациях, в которых
	// отсутствует общий модуль ПроцедурыПерсонифицированногоУчета
	Если Метаданные.ОбщиеМодули.Найти("ПроцедурыПерсонифицированногоУчета") = Неопределено Тогда
		ПроцедурыПерсонифицированногоУчета = РегламентированнаяОтчетность;
	КонецЕсли;
	
	// преобразуем XML в дерево
	Дерево2НДФЛ = ПроцедурыПерсонифицированногоУчета.ПреобразоватьВДеревоXML(ТекстВыгрузки);
	Если Дерево2НДФЛ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// пишем текст в файл
	ИмяФайлаВыгрузки = СокрЛП(ДокументОбъект.ИмяФайла) + ".xml";
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьИННКППУполномоченногоПредставителя(Доверенность)
	
	Если Доверенность.ПредставительЯвляетсяЮЛ Тогда
		Возврат Новый Структура("ПредставительЯвляетсяЮЛ, ИНН, КПП", Доверенность.ПредставительЯвляетсяЮЛ, Доверенность.ПредставительЮЛ_ИНН, Доверенность.ПредставительЮЛ_КПП);
	Иначе
		Возврат Новый Структура("ПредставительЯвляетсяЮЛ, ИНН", Доверенность.ПредставительЯвляетсяЮЛ, Доверенность.ПредставительФЛ_ИНН);
	КонецЕсли;
	
КонецФункции

Функция ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, ИмяФайлаВыгрузки, Доверенность, КодНО, ДатаПериода = '00010101')
	
	ИмяФайлаБезРасширения = Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 4);
	РасширениеФайла = Прав(ИмяФайлаВыгрузки, 4);
	Если нрег(РасширениеФайла) = ".xml" Тогда // формат xml - меняем ИдФайл и имя файла
		
		// разбираем имя файла на компоненты
		КомпонентыИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаБезРасширения, "_");
		Если КомпонентыИмени.Количество() < 5 Тогда
			Сообщить("Невозможно изменить реквизиты отправителя в имени файла отчета: некорректное исходное имя файла выгрузки.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// получаем рег. данные представителя
		СведенияОПредставителе = ПолучитьИННКППУполномоченногоПредставителя(Доверенность);
		Если СведенияОПредставителе.ПредставительЯвляетсяЮЛ Тогда
			ИННКПП = СокрЛП(СведенияОПредставителе.ИНН) + СокрЛП(СведенияОПредставителе.КПП);
		Иначе
			ИННКПП = СокрЛП(СведенияОПредставителе.ИНН);
		КонецЕсли;
		
		// подменяем ИНН и КПП в компонентах имени файла
		Если КомпонентыИмени[0] = "ДОХОД" Тогда // 2-НДФЛ, старая форма
			КомпонентыИмени.Установить(3, ИННКПП);
		Иначе // прочие отчеты
			КомпонентыИмени.Установить(4, ИННКПП);
		КонецЕсли;
		
		// формируем новое имя файла
		НовоеИмяФайлаВыгрузкиБезРасширения = СформироватьСтрокуИзМассиваПодстрок(КомпонентыИмени, "_");
		
		// подменяем старое имя на новое в тексте выгрузки
		ТекстВыгрузки = СтрЗаменить(ТекстВыгрузки, ИмяФайлаБезРасширения, НовоеИмяФайлаВыгрузкиБезРасширения);
		
		// присваиваем значение нового имени файла переменной со старым именем
		ИмяФайлаВыгрузки = НовоеИмяФайлаВыгрузкиБезРасширения + РасширениеФайла;
		
	Иначе // текстовый формат - меняем имя файла
		
		// разбираем имя файла на компоненты
		КомпонентыИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаБезРасширения, "_");
		ЧислоКомпонентИмени = КомпонентыИмени.Количество();
		Если ЧислоКомпонентИмени <> 4 И ЧислоКомпонентИмени <> 5 Тогда // непонятный формат
			Сообщить("Невозможно изменить реквизиты отправителя в имени файла отчета: некорректное исходное имя файла выгрузки.", СтатусСообщения.Важное);
			Возврат Ложь;
		КонецЕсли;
		
		// если файл от юрлица, то объединяем ИНН и КПП (первую и вторую составляющие) в одну компоненту
		Если СтрДлина(КомпонентыИмени[1]) = 9 Тогда // вторая компонента - КПП, а значит файл от юрлица
			КомпонентыИмени.Установить(0, КомпонентыИмени[0] + "_" + КомпонентыИмени[1]);
			КомпонентыИмени.Удалить(1);
		КонецЕсли;
		
		// формируем первую компоненту нового имени (с ИНН и КПП)
		СведенияОПредставителе = ПолучитьИННКППУполномоченногоПредставителя(Доверенность);
		Если СведенияОПредставителе.ПредставительЯвляетсяЮЛ Тогда
			КомпонентыИмени.Установить(0, "O" + СведенияОПредставителе.ИНН + "_" + СведенияОПредставителе.КПП);
		Иначе
			КомпонентыИмени.Установить(0, "O" + СведенияОПредставителе.ИНН);
		КонецЕсли;
		
		// устанавливаем новый счетчик файлов
		СчетчикВыгруженныхФайлов = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайлов(СведенияОПредставителе.ИНН, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ДатаПериода, КодНО);
		КомпонентыИмени.Установить(3, Формат(СчетчикВыгруженныхФайлов, "ЧЦ=8; ЧН=00000000; ЧВН=; ЧГ="));
		РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайлов(СведенияОПредставителе.ИНН, СчетчикВыгруженныхФайлов, Перечисления.ТипыСчетчиковВыгрузки.СчетчикФайлов, ДатаПериода, КодНО);
		
		// формируем новое имя файла
		ИмяФайлаВыгрузки = СформироватьСтрокуИзМассиваПодстрок(КомпонентыИмени, "_") + РасширениеФайла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьСтрокуИзМассиваПодстрок(МассивПодстрок, Разделитель = "")
	
	Если НЕ ЗначениеЗаполнено(МассивПодстрок) Тогда
		Возврат "";
	КонецЕсли;
	
	СтрРезультат = МассивПодстрок[0];
	Для Инд = 2 По МассивПодстрок.Количество() Цикл
		СтрРезультат = СтрРезультат + Разделитель + МассивПодстрок[Инд - 1];
	КонецЦикла;
	
	Возврат СтрРезультат;
	
КонецФункции

Функция СформироватьОписаниеСведений2НДФЛ(Сообщение, Вложения, КороткоеИмяФайла = Неопределено)
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	ДобавитьУзелXML(Дерево, "имяФормы", , "2-НДФЛ");
	ДобавитьУзелXML(Дерево, "КНДФормы", , "1151078");
	ДобавитьУзелXML(Дерево, "год", , Формат(Год(Сообщение.ЦиклОбмена.ДатаНачалаПериода), "ЧГ="));
	ДобавитьУзелXML(Дерево, "кодНО", , СокрЛП(Сообщение.ЦиклОбмена.ВнешняяОрганизация.Код));
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "описание");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция ОтчетЯвляетсяПредметом(Предмет, Отчет) Экспорт
	
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
		Возврат (ПолучитьПредметыЦиклаОбмена(Предмет).Найти(Отчет) <> Неопределено);
	ИначеЕсли ТипЗнч(Предмет) = Тип("Массив") Тогда
		Возврат (Предмет.Найти(Отчет) <> Неопределено);
	Иначе
		Возврат (Предмет = Отчет);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредметыЦиклаОбмена(ЦиклОбмена) Экспорт
	
	Предметы = ЦиклОбмена.ДополнительныеПредметы.ВыгрузитьКолонку("Предмет");
	Предметы.Вставить(0, ЦиклОбмена.Предмет);
	Возврат Предметы;
	
КонецФункции

Функция ПолучитьЦиклыОбменаПоОтчету(Отчет) Экспорт
	
	ЦиклыОбмена = Новый Массив;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена,
	                      |	ЦиклыОбмена.ДатаСоздания
	                      |ИЗ
	                      |	(ВЫБРАТЬ
	                      |		ЦиклыОбмена.Ссылка КАК Ссылка,
	                      |		ЦиклыОбмена.ДатаСоздания КАК ДатаСоздания
	                      |	ИЗ
	                      |		Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	                      |	ГДЕ
	                      |		ЦиклыОбмена.Предмет В (&Предмет)
	                      |	
	                      |	ОБЪЕДИНИТЬ ВСЕ
	                      |	
	                      |	ВЫБРАТЬ
	                      |		ЦиклыОбменаДополнительныеПредметы.Ссылка,
	                      |		ЦиклыОбменаДополнительныеПредметы.Ссылка.ДатаСоздания
	                      |	ИЗ
	                      |		Справочник.ЦиклыОбмена.ДополнительныеПредметы КАК ЦиклыОбменаДополнительныеПредметы
	                      |	ГДЕ
	                      |		ЦиклыОбменаДополнительныеПредметы.Предмет В (&Предмет)) КАК ЦиклыОбмена
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ЦиклыОбмена.ДатаСоздания УБЫВ");
	Запрос.УстановитьПараметр("Предмет", Отчет);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ЦиклОбмена) = Тип("СправочникСсылка.ЦиклыОбмена") Тогда
			ЦиклыОбмена.Добавить(Выборка.ЦиклОбмена);
		КонецЕсли;
	КонецЦикла;
	Возврат ЦиклыОбмена;
	
КонецФункции

Процедура ПоказатьСвязанныйРСВ(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.РасчетСтраховыхВзносов) Тогда
		ОткрытьЗначение(Форма.РасчетСтраховыхВзносов);
	Иначе
		Предупреждение("Не найден связанный документ.");
	КонецЕсли;
	
КонецПроцедуры

Функция СвязатьСРСВ(Форма) Экспорт
	
	ФормаВыбораРСВ = ПолучитьФорму("ФормаВыбораРСВ");
	ФормаВыбораРСВ.НачальноеЗначениеВыбора = Форма.РасчетСтраховыхВзносов;
	ФормаВыбораРСВ.Организация = Форма.Организация;
	
	ПериодОтчета = ГраницыПериодаПоДатеАДВ(Форма.ОтчетныйПериод);
	ФормаВыбораРСВ.ДатаНачалаПериода = ПериодОтчета.ДатаНачала;
	ФормаВыбораРСВ.ДатаОкончанияПериода = ПериодОтчета.ДатаОкончания;
	
	ДокРСВ = ФормаВыбораРСВ.ОткрытьМодально();
	Если ДокРСВ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Форма.РасчетСтраховыхВзносов = ДокРСВ;
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьЗапросНаИнформационноеОбслуживание535(ДокЗапрос, Запрос, ИмяФайла) Экспорт
	
	Если ТипЗнч(ДокЗапрос) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
		ДокОбъект = ДокЗапрос.ПолучитьОбъект();
	Иначе
		ДокОбъект = ДокЗапрос;
	КонецЕсли;
	Возврат СформироватьФайлЗапросаИОН(ДокОбъект, Запрос, ИмяФайла);
	
КонецФункции

Процедура ОтправкаНеформализованногоДокументаВФНС(Док, Действие = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Сообщить("Не выбран документ для отправки.", СтатусСообщения);
		Возврат;
	КонецЕсли;
	
	// проверяем, заполнена ли организация-отправитель и включен ли механизм обмена
	Организация = Док.Отправитель;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// 
		Сообщить("Не выбрана организация-отправитель.", СтатусСообщения.Важное);
		Возврат;
	ИначеЕсли Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС и ПФР по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ФНС
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ФНС.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначен ли документ для переписки с ФНС
	Если Док.Тип <> Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС Тогда
		Сообщить("Письмо не предназначено для переписки с ФНС.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, указан ли получатель
	Если НЕ ЗначениеЗаполнено(Док.Получатель) Тогда
		Сообщить("Не задан получатель письма.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем статусы отправки
	СтатусОтправкиОбъекта = ПолучитьСтатусОтправкиОбъекта(Док);
	Если ЗначениеЗаполнено(СтатусОтправкиОбъекта) Тогда
		Если НЕ ВопросПредупреждение("Внимание, Вы уже отправляли это письмо!
								|Вы действительно хотите отправить его заново? При этом будет начат новый цикл обмена!",
								"Нет, прервать отправку.",
								"Да, я хочу отправить письмо, предыдущая попытка отправки которого не завершена.") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// получаем приложения
	Приложения = ПолучитьВложенияНеформализованногоДокумента(Док, , Истина);
	
	// проверяем на макс. объем 25Мб
	ОбщиеРазмер = Приложения.Итог("Размер");
	Если ОбщиеРазмер > 25 *1024*1024 Тогда // общие размер не может превышать 25Мб
		Сообщить("Общий размер вложений отправляемого сообщения привышает 25 Мб.
				|К сожалению, форматом запрещена отправка сообщений с вложениями общим размером более 25 Мб.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// формируем файл с содержимым
	ДвоичныеДанныеФайлаПисьма = Неопределено;
	ИмяФайлаПисьма = Неопределено;
	РезультатФормированияФайлаПисьма = СформироватьФайлПисьма(Док, ДвоичныеДанныеФайлаПисьма, ИмяФайлаПисьма);
	Если НЕ РезультатФормированияФайлаПисьма Тогда
		Возврат;
	КонецЕсли;
	
	КороткоеИмяФайлаПисьма = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	
	ФайлДоверенности = Неопределено;
	КороткоеИмяФайлаДоверенности = Неопределено;
	
	// ищем РегистрацияВИФНС по организации и коду налогового органа
	КодНалоговогоОргана = СокрЛП(Док.Получатель.Код);
	ЭлРегистрацияВИФНС = РегистрацияВИФНСПоОрганизацииИКодуНО(Организация, КодНалоговогоОргана);
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		
		// формируем файл доверенности
		ФайлДоверенности = ВыгрузитьДоверенность(ЭлРегистрацияВИФНС, КороткоеИмяФайлаДоверенности);
		Если НЕ ЗначениеЗаполнено(ФайлДоверенности) Тогда
			Возврат;
		КонецЕсли;
		
		//// если представитель ЮЛ или [ФЛ и не сотрудник организации], то подменяем имя файла
		//ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		//Если ДоверенностьПредставителя.ПредставительЯвляетсяЮЛ
		//ИЛИ (НЕ ДоверенностьПредставителя.ПредставительЯвляетсяЮЛ И НЕ ДоверенностьПредставителя.ПредставительЯвляетсяСотрудником) Тогда
		//	Если НЕ ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, ИмяФайлаВыгрузки, ДоверенностьПредставителя, КодНалоговогоОргана, ДатаОкончанияПериодаОтчета) Тогда
		//		Возврат;
		//	КонецЕсли;
		//	ИмяФайлаВыгрузкиБылоИзменено = Истина;
		//КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	НачатьТранзакцию();
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
	ЦиклОбмена.Предмет = Док;
	ЦиклОбмена.Идентификатор = Док.Идентификатор;
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗапись;
	ЦиклОбмена.ВнешняяОрганизация = Док.Получатель;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП;
	ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = Док.Получатель;
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка прервана.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// добавляем письмо
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение, ДвоичныеДанныеФайлаПисьма, ИмяФайлаПисьма, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml) Тогда
		Сообщить("Отправка письма прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// добавляем приложения к письму
	Для Каждого СтрПриложение Из Приложения Цикл
		Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение, СтрПриложение.Данные, СтрПриложение.ИмяФайла, СтрПриложение.Размер, , , , , , СгенерироватьUUID(), ТипСодержимогоПоИмениФайла(СтрПриложение.ИмяФайла)) Тогда
			Сообщить("Отправка письма прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// добавляем доверенность, если она есть
	Если ЗначениеЗаполнено(ФайлДоверенности) Тогда
		Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность, ФайлДоверенности, КороткоеИмяФайлаДоверенности, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml) Тогда
			Сообщить("Отправка письма прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// записываем цикл обмена
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка письма прервана.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// изменяем статус отправки
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.ВКонверте);
	
	// готовим пакет
	Если НЕ СформироватьПакет(ТранспортноеСообщение) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// отправляем сообщение
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// изменяем статус отправки
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.Отправлен);
	
	// фиксируем транзакцию
	ЗафиксироватьТранзакцию();
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);
	
КонецПроцедуры

Функция СформироватьПараметрыПисьма(Письмо)
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Письмо.Организация);
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Письмо.Организация);
	СведенияОбОрганизации.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	Если ЭтоПБОЮЛ Тогда
		ФИОИП = ФИОИндивидуальногоПредпринимателя(Письмо.Организация);
		Если ФИОИП = Неопределено Тогда
			СведенияОбОрганизации.Вставить("ИПФамилия", "");
			СведенияОбОрганизации.Вставить("ИПИмя", "");
			СведенияОбОрганизации.Вставить("ИПОтчество", "");
		Иначе
			СведенияОбОрганизации.Вставить("ИПФамилия", ФИОИП.Фамилия);
			СведенияОбОрганизации.Вставить("ИПИмя", ФИОИП.Имя);
			СведенияОбОрганизации.Вставить("ИПОтчество", ФИОИП.Отчество);
		КонецЕсли;
	Иначе
		СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(Письмо.Организация.КПП));
	КонецЕсли;
	
	
	// ищем РегистрацияВИФНС по организации и коду налогового органа
	КодНалоговогоОргана = СокрЛП(Письмо.Получатель.Код);
	ЭлРегистрацияВИФНС = РегистрацияВИФНСПоОрганизацииИКодуНО(Письмо.Организация, КодНалоговогоОргана);
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		
		ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		
		// признак подписания представителем
		СведенияОбОрганизации.Вставить("ПрПодп", 2);
		СведенияОбОрганизации.Вставить("Доверенность", ПолучитьСведенияДоверенности(ЭлРегистрацияВИФНС));
		
	Иначе
		
		// признак подписания налогоплательщиком
		СведенияОбОрганизации.Вставить("ПрПодп", 1);
		
	КонецЕсли;
	
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Функция СформироватьПараметрыЗапроса(Запрос)
	
	СведенияОбОрганизации = РегламентированнаяОтчетность.ПолучитьСведенияОбОрганизации(Запрос.Организация);
	
	ЭтоПБОЮЛ = РегламентированнаяОтчетность.ЭтоПБОЮЛ(Запрос.Организация);
	СведенияОбОрганизации.Вставить("ЭтоПБОЮЛ", ЭтоПБОЮЛ);
	
	Если ЭтоПБОЮЛ Тогда
		ФИОИП = ФИОИндивидуальногоПредпринимателя(Запрос.Организация);
		Если ФИОИП = Неопределено Тогда
			СведенияОбОрганизации.Вставить("ИПФамилия", "");
			СведенияОбОрганизации.Вставить("ИПИмя", "");
			СведенияОбОрганизации.Вставить("ИПОтчество", "");
		Иначе
			СведенияОбОрганизации.Вставить("ИПФамилия", ФИОИП.Фамилия);
			СведенияОбОрганизации.Вставить("ИПИмя", ФИОИП.Имя);
			СведенияОбОрганизации.Вставить("ИПОтчество", ФИОИП.Отчество);
		КонецЕсли;
	Иначе
		СведенияОбОрганизации.Вставить("КППЮЛ", СокрЛП(Запрос.Организация.КПП));
	КонецЕсли;
	
	
	// ищем РегистрацияВИФНС по организации и коду налогового органа
	ЭлРегистрацияВИФНС = Запрос.Получатель;
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		
		ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		
		// признак подписания представителем
		СведенияОбОрганизации.Вставить("ПрПодп", 2);
		СведенияОбОрганизации.Вставить("Доверенность", ПолучитьСведенияДоверенности(ЭлРегистрацияВИФНС));
		
	Иначе
		
		// признак подписания налогоплательщиком
		СведенияОбОрганизации.Вставить("ПрПодп", 1);
		
	КонецЕсли;
	
	
	Возврат СведенияОбОрганизации;
	
КонецФункции

Функция ПроверитьЗаполнениеПисьма(Письмо, Параметры)
	
	СтатусПроверки = Истина;
	
	
	Если НЕ ЗначениеЗаполнено(Письмо.Организация) Тогда
		Сообщить("Не задана организация!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	ИначеЕсли НЕ ЗначениеЗаполнено(Письмо.Получатель) Тогда
		Сообщить("Не задан получатель!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	
	// проверяем сведения об организации
	Если НЕ Параметры.ЭтоПБОЮЛ Тогда
	
		Если ПустаяСтрока(Параметры.АдрЮр) Тогда
			Сообщить("Не задан адрес организации (индивидуального предпринимателя)!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Параметры.АдрЮР, ",") <> 9) И (СтрЧислоВхождений(Параметры.АдрЮР, ",") <> 12) Тогда
			Сообщить("Адрес организации (индивидуального предпринимателя) должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодРегионаИзАдреса(Параметры.АдрЮр) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе организации (индивидуального предпринимателя).
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.НаимЮЛПол) Тогда
			Сообщить("Не задано полное наименование организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ИННЮЛ) Тогда
			Сообщить("Не задан ИНН организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННЮЛ, Ложь) Тогда
			Сообщить("Некорректно задан ИНН организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.КППЮЛ) Тогда
			Сообщить("Не задан КПП организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли СтрДлина(Параметры.КППЮЛ) <> 9 Тогда
			Сообщить("Неверно задан КПП организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Параметры.АдрМЖ) Тогда
			Сообщить("Не задан адрес места жительства индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Параметры.АдрМЖ, ",") <> 9) И (СтрЧислоВхождений(Параметры.АдрМЖ, ",") <> 12) Тогда
			Сообщить("Адрес места жительства индивидуального предпринимателя должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодРегионаИзАдреса(Параметры.АдрМЖ) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе места жительства индивидуального предпринимателя.
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ИННФЛ) Тогда
			Сообщить("Не задан ИНН индивидуального предпринимателя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Параметры.ИННФЛ, Истина) Тогда
			Сообщить("Неверно задан ИНН индивидуального предпринимателя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ИПФамилия) Тогда
			Сообщить("Не задана фамилия индивидуального предпринимателя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Параметры.ИПИмя) Тогда
			Сообщить("Не задано имя индивидуального предпринимателя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	// если представитель объявлен, то проверяем сведения о нем
	Если Параметры.ПрПодп = 2 Тогда
		
		СведенияДоверенности = Параметры.Доверенность;
		СведФизЛ = СведенияДоверенности.СвУпПред.СвПред.СведФизЛ;
		ФИОПодписанта = СведФизЛ.ФИО;
		Если НЕ ЗначениеЗаполнено(ФИОПодписанта) Тогда
			Сообщить("В сведениях о доверенности не задано ФИО уполномоченного лица представителя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ФИОПодписанта.Фамилия) Тогда
			Сообщить("В сведениях о доверенности не задана фамилия уполномоченного лица представителя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ФИОПодписанта.Имя) Тогда
			Сообщить("В сведениях о доверенности не задано имя уполномоченного лица представителя.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		ФИОПодписанта = РазложитьФИО(Параметры.ФИОРук);
		Если НЕ ЗначениеЗаполнено(ФИОПодписанта.Фамилия) Тогда
			Сообщить("Не задана фамилия руководителя организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		ИначеЕсли НЕ ЗначениеЗаполнено(ФИОПодписанта.Имя) Тогда
			Сообщить("Не задано имя руководителя организации.", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат СтатусПроверки;
	
КонецФункции

Функция СформироватьФайлПисьма(Письмо, ДвоичныеДанныеФайлаПисьма, ИмяФайлаПисьма)
	
	// собираем параметры письма
	ПараметрыПисьма = СформироватьПараметрыПисьма(Письмо);
	Если НЕ ПроверитьЗаполнениеПисьма(Письмо, ПараметрыПисьма) Тогда
		Сообщить("Не удалось сформировать пакет с письмом!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// формируем идентификатор отправителя
	Если ПараметрыПисьма.ПрПодп = 2 Тогда
		СвПред = ПараметрыПисьма.Доверенность.СвУпПред.СвПред;
		Если СвПред.Свойство("СвОрг") Тогда
			ИННКПП = СокрЛП(СвПред.СвОрг.ИННЮЛ) + СокрЛП(СвПред.СвОрг.КПП);
		Иначе
			ИННКПП = СокрЛП(СвПред.СведФизЛ.ИННФЛ);
		КонецЕсли;
	Иначе
		ИННКПП = ?(ПараметрыПисьма.ЭтоПБОЮЛ, СокрЛП(ПараметрыПисьма.ИННЮЛ), СокрЛП(ПараметрыПисьма.ИННЮЛ) + СокрЛП(ПараметрыПисьма.КППЮЛ));
	КонецЕсли;
	
	ИмяФайлаБезРасширения = "IU_OBRNP_"
							 + ?(ЗначениеЗаполнено(Письмо.Организация.КодИФНСПолучателя), СокрЛП(Письмо.Организация.КодИФНСПолучателя), СокрЛП(Письмо.Получатель.Код))
							 + "_"
							 + СокрЛП(Письмо.Получатель.Код)
							 + "_"
							 + ИННКПП
							 + "_"
							 + Формат(ТекущаяДата(), "ДФ=yyyyMMdd")
							 + "_"
							 + Строка(Новый УникальныйИдентификатор);
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	УзелФайл = ДобавитьУзелXML(Дерево, "Файл");
	ДобавитьУзелXML(УзелФайл, "ИдФайл", Истина, XMLСтрока(ИмяФайлаБезРасширения));
	ДобавитьУзелXML(УзелФайл, "ВерсПрог", Истина, Лев(XMLСтрока(РегламентированнаяОтчетность.СформироватьВерсПрог()), 40));
	ДобавитьУзелXML(УзелФайл, "ВерсФорм", Истина, XMLСтрока("5.01"));
	УзелДокумент = ДобавитьУзелXML(УзелФайл, "Документ");
	
		ДобавитьУзелXML(УзелДокумент, "КНД", Истина, XMLСтрока("1166102"));
		ДобавитьУзелXML(УзелДокумент, "ДатаДок", Истина, XMLСтрока(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));
		//ДобавитьУзелXML(УзелДокумент, "КодНО", Истина, XMLСтрока(СокрЛП(Письмо.Получатель.Код)));
		
		УзелСвНП = ДобавитьУзелXML(УзелДокумент, "СвНП");
		Если НЕ ПараметрыПисьма.ЭтоПБОЮЛ Тогда
			
			УзелНПЮЛ = ДобавитьУзелXML(УзелСвНП, "НПЮЛ");
			
				ДобавитьУзелXML(УзелНПЮЛ, "НаимОрг", Истина, Лев(XMLСтрока(ПараметрыПисьма.НаимЮЛПол), 1000));
				ДобавитьУзелXML(УзелНПЮЛ, "ИННЮЛ", Истина, XMLСтрока(ПараметрыПисьма.ИННЮЛ));
				ДобавитьУзелXML(УзелНПЮЛ, "КПП", Истина, XMLСтрока(ПараметрыПисьма.КППЮЛ));
				
			УзелАдрРФ = ДобавитьУзелXML(УзелСвНП, "АдрРФ");
			
				АдрНП = РегламентированнаяОтчетность.РазложитьАдрес(ПараметрыПисьма.АдрЮр);
				ДобавитьУзелXML(УзелАдрРФ, "Индекс", Истина, Лев(XMLСтрока(АдрНП.Индекс), 6), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "КодРегион", Истина, Лев(XMLСтрока(КодРегионаИзАдреса(АдрНП)), 2));
				ДобавитьУзелXML(УзелАдрРФ, "Район", Истина, Лев(XMLСтрока(АдрНП.Район), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Город", Истина, Лев(XMLСтрока(АдрНП.Город), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "НаселПункт", Истина, Лев(XMLСтрока(АдрНП.НаселенныйПункт), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Улица", Истина, Лев(XMLСтрока(АдрНП.Улица), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Дом", Истина, Лев(XMLСтрока(АдрНП.Дом), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Корпус", Истина, Лев(XMLСтрока(АдрНП.Корпус), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Кварт", Истина, Лев(XMLСтрока(АдрНП.Квартира), 8), Истина);
			
		Иначе
			
			УзелНПФЛ = ДобавитьУзелXML(УзелСвНП, "НПФЛ");
			
				ДобавитьУзелXML(УзелНПЮЛ, "ИННФЛ", Истина, XMLСтрока(СокрЛП(ПараметрыПисьма.ИННФЛ)), Истина);
				УзелФИО = ДобавитьУзелXML(УзелНПФЛ, "ФИО");
				
					ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПФамилия)), 60));
					ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПИмя)), 60));
					ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПОтчество)), 60), Истина);
					
			УзелАдрРФ = ДобавитьУзелXML(УзелСвНП, "АдрРФ");
			
				АдрНП = РегламентированнаяОтчетность.РазложитьАдрес(ПараметрыПисьма.АдрМЖ);
				ДобавитьУзелXML(УзелАдрРФ, "Индекс", Истина, Лев(XMLСтрока(АдрНП.Индекс), 6), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "КодРегион", Истина, Лев(XMLСтрока(КодРегионаИзАдреса(АдрНП)), 2));
				ДобавитьУзелXML(УзелАдрРФ, "Район", Истина, Лев(XMLСтрока(АдрНП.Район), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Город", Истина, Лев(XMLСтрока(АдрНП.Город), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "НаселПункт", Истина, Лев(XMLСтрока(АдрНП.НаселенныйПункт), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Улица", Истина, Лев(XMLСтрока(АдрНП.Улица), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Дом", Истина, Лев(XMLСтрока(АдрНП.Дом), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Корпус", Истина, Лев(XMLСтрока(АдрНП.Корпус), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Кварт", Истина, Лев(XMLСтрока(АдрНП.Квартира), 8), Истина);
			
		КонецЕсли;
		
		УзелСвНП = ДобавитьУзелXML(УзелДокумент, "СвОтпр");
		Если ПараметрыПисьма.ПрПодп = 1 Тогда // отправитель - налогоплательщик
			Если НЕ ПараметрыПисьма.ЭтоПБОЮЛ Тогда
				УзелНПЮЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрЮЛ");
					ДобавитьУзелXML(УзелНПЮЛ, "НаимОрг", Истина, Лев(XMLСтрока(ПараметрыПисьма.НаимЮЛПол), 1000));
					ДобавитьУзелXML(УзелНПЮЛ, "ИННЮЛ", Истина, XMLСтрока(ПараметрыПисьма.ИННЮЛ));
					ДобавитьУзелXML(УзелНПЮЛ, "КПП", Истина, XMLСтрока(ПараметрыПисьма.КППЮЛ));
			Иначе
				УзелНПФЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрФЛ");
					ДобавитьУзелXML(УзелНПЮЛ, "ИННФЛ", Истина, XMLСтрока(СокрЛП(ПараметрыПисьма.ИННФЛ)), Истина);
					УзелФИО = ДобавитьУзелXML(УзелНПФЛ, "ФИО");
						ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПФамилия)), 60));
						ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПИмя)), 60));
						ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПОтчество)), 60), Истина);
			КонецЕсли;
		Иначе
			СвДоверенность = ПараметрыПисьма.Доверенность;
			СвПредст = СвДоверенность.СвУпПред.СвПред;
			Если СвПредст.Свойство("СвОрг") Тогда // представитель - ЮЛ
				УзелНПЮЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрЮЛ");
					ДобавитьУзелXML(УзелНПЮЛ, "НаимОрг", Истина, Лев(XMLСтрока(СокрЛП(СвПредст.СвОрг.НаимОрг)), 1000));
					ДобавитьУзелXML(УзелНПЮЛ, "ИННЮЛ", Истина, XMLСтрока(СвПредст.СвОрг.ИННЮЛ));
					ДобавитьУзелXML(УзелНПЮЛ, "КПП", Истина, XMLСтрока(СвПредст.СвОрг.КПП));
			Иначе
				УзелНПФЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрФЛ");
					ДобавитьУзелXML(УзелНПЮЛ, "ИННФЛ", Истина, XMLСтрока(СокрЛП(СвПредст.СведФизЛ.ИННФЛ)), Истина);
					ФИОПредставителя = СвПредст.СведФизЛ.ФИО;
					УзелФИО = ДобавитьУзелXML(УзелНПФЛ, "ФИО");
						ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ФИОПредставителя.Фамилия)), 60));
						ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ФИОПредставителя.Имя)), 60));
						ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ФИОПредставителя.Отчество)), 60), Истина);
			КонецЕсли;
		КонецЕсли;
		
		УзелПодписант = ДобавитьУзелXML(УзелДокумент, "Подписант");
			ДобавитьУзелXML(УзелПодписант, "ПрПодп", Истина, ПараметрыПисьма.ПрПодп);
			УзелФИО = ДобавитьУзелXML(УзелПодписант, "ФИО");
			Если ПараметрыПисьма.ПрПодп = 1 Тогда
				ФИОПодписанта = РазложитьФИО(ПараметрыПисьма.ФИОРук);
				ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Фамилия)), 60));
				ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Имя)), 60));
				ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Отчество)), 60), Истина);
			Иначе
				ФИОПодписанта = ПараметрыПисьма.Доверенность.СвУпПред.СвПред.СведФизЛ.ФИО;
				ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Фамилия)), 60));
				ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Имя)), 60));
				ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Отчество)), 60), Истина);
			КонецЕсли;
		
		УзелОбращИнф = ДобавитьУзелXML(УзелДокумент, "ОбращИнф");
		
			ДобавитьУзелXML(УзелОбращИнф, "ИФНС", Истина, XMLСтрока(СокрЛП(Письмо.Получатель.Код)));
			ДобавитьУзелXML(УзелОбращИнф, "ОбращТекст", , СокрЛП(Письмо.Содержание), , Истина);
			УзелПрил = ДобавитьУзелXML(УзелОбращИнф, "Прил");
			
				Вложения = ПолучитьВложенияНеформализованногоДокумента(Письмо);
				ДобавитьУзелXML(УзелПрил, "КолФайл", Истина, XMLСтрока(Вложения.Количество()));
				Для Каждого Вложение Из Вложения Цикл
					ДобавитьУзелXML(УзелПрил, "НаимПрил", , XMLСтрока(СокрЛП(Вложение.ИмяФайла)));
				КонецЦикла;
		
	// сохранение дерева XML в файл и двоичные данные
	ТекстВыгрузкиXML = ЗаписатьДеревоВXML(Дерево);
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	ЗаписьТекста = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.ANSI);
	ЗаписьТекста.Записать(ТекстВыгрузкиXML);
	ЗаписьТекста.Закрыть();
	
	ДвоичныеДанныеФайлаПисьма = Новый ДвоичныеДанные(ВремФайл);
	УдалитьФайлы(ВремФайл);
	
	ИмяФайлаПисьма = ИмяФайлаБезРасширения + ".xml";
	
	Возврат Истина;
	
КонецФункции

Функция СформироватьФайлЗапросаИОН(Запрос, ДвоичныеДанныеФайлаЗапроса, ИмяФайлаЗапроса)
	
	// собираем параметры письма
	ПараметрыПисьма = СформироватьПараметрыЗапроса(Запрос);
	Если НЕ ПроверитьЗаполнениеЗапроса535(Запрос, ПараметрыПисьма) Тогда
		Сообщить("Не удалось сформировать запрос на информационное обслуживание!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// формируем идентификатор отправителя
	Если ПараметрыПисьма.ПрПодп = 2 Тогда
		СвПред = ПараметрыПисьма.Доверенность.СвУпПред.СвПред;
		Если СвПред.Свойство("СвОрг") Тогда
			ИННКПП = СокрЛП(СвПред.СвОрг.ИННЮЛ) + СокрЛП(СвПред.СвОрг.КПП);
		Иначе
			ИННКПП = СокрЛП(СвПред.СведФизЛ.ИННФЛ);
		КонецЕсли;
	Иначе
		ИННКПП = ?(ПараметрыПисьма.ЭтоПБОЮЛ, СокрЛП(ПараметрыПисьма.ИННФЛ), СокрЛП(ПараметрыПисьма.ИННЮЛ) + СокрЛП(ПараметрыПисьма.КППЮЛ));
	КонецЕсли;
	
	// формируем код получателя
	Если НЕ ЗначениеЗаполнено(Запрос.Получатель) Тогда
		КодИФНСПолучателя = "0000";
	Иначе
		КодИФНСПолучателя = СокрЛП(Запрос.Получатель.Код);
	КонецЕсли;
	
	// инициализируем служебные соответствия
	СоответствиеВидаУслугиКоду = Новый Соответствие;
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом, "1");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом, "2");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности, "3");
	СоответствиеВидаУслугиКоду.Вставить(Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов, "4");
	
	СоответствиеФорматовОтветовИдентификатору = Новый Соответствие;
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.RTF, "RTF");
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XML, "XML");
	СоответствиеФорматовОтветовИдентификатору.Вставить(Перечисления.ФорматОтветаНаЗапросИОН.XLS, "XLS");
	
	ИмяФайлаБезРасширения = "IU_ZAPR_"
							 + ?(ЗначениеЗаполнено(Запрос.Организация.КодИФНСПолучателя), СокрЛП(Запрос.Организация.КодИФНСПолучателя), СокрЛП(КодИФНСПолучателя))
							 + "_"
							 + СокрЛП(КодИФНСПолучателя)
							 + "_"
							 + ИННКПП
							 + "_"
							 + Формат(ТекущаяДата(), "ДФ=yyyyMMdd")
							 + "_"
							 + Строка(Новый УникальныйИдентификатор);
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	УзелФайл = ДобавитьУзелXML(Дерево, "Файл");
	ДобавитьУзелXML(УзелФайл, "ИдФайл", Истина, XMLСтрока(ИмяФайлаБезРасширения));
	ДобавитьУзелXML(УзелФайл, "ВерсПрог", Истина, Лев(XMLСтрока(РегламентированнаяОтчетность.СформироватьВерсПрог()), 40));
	ДобавитьУзелXML(УзелФайл, "ВерсФорм", Истина, XMLСтрока("5.01"));
	УзелДокумент = ДобавитьУзелXML(УзелФайл, "Документ");
	
		ДобавитьУзелXML(УзелДокумент, "КНД", Истина, XMLСтрока("1166101"));
		ДобавитьУзелXML(УзелДокумент, "ДатаДок", Истина, XMLСтрока(Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy")));
		УзелСвНП = ДобавитьУзелXML(УзелДокумент, "СвНП");
			
		Если НЕ ПараметрыПисьма.ЭтоПБОЮЛ Тогда
			
			УзелНПЮЛ = ДобавитьУзелXML(УзелСвНП, "НПЮЛ");
			
				ДобавитьУзелXML(УзелНПЮЛ, "НаимОрг", Истина, Лев(XMLСтрока(ПараметрыПисьма.НаимЮЛПол), 1000));
				ДобавитьУзелXML(УзелНПЮЛ, "ИННЮЛ", Истина, XMLСтрока(ПараметрыПисьма.ИННЮЛ));
				ДобавитьУзелXML(УзелНПЮЛ, "КПП", Истина, XMLСтрока(ПараметрыПисьма.КППЮЛ));
				
			УзелАдрРФ = ДобавитьУзелXML(УзелСвНП, "АдрРФ");
			
				АдрНП = РегламентированнаяОтчетность.РазложитьАдрес(ПараметрыПисьма.АдрЮр);
				ДобавитьУзелXML(УзелАдрРФ, "Индекс", Истина, Лев(XMLСтрока(АдрНП.Индекс), 6), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "КодРегион", Истина, Лев(XMLСтрока(КодРегионаИзАдреса(АдрНП)), 2));
				ДобавитьУзелXML(УзелАдрРФ, "Район", Истина, Лев(XMLСтрока(АдрНП.Район), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Город", Истина, Лев(XMLСтрока(АдрНП.Город), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "НаселПункт", Истина, Лев(XMLСтрока(АдрНП.НаселенныйПункт), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Улица", Истина, Лев(XMLСтрока(АдрНП.Улица), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Дом", Истина, Лев(XMLСтрока(АдрНП.Дом), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Корпус", Истина, Лев(XMLСтрока(АдрНП.Корпус), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Кварт", Истина, Лев(XMLСтрока(АдрНП.Квартира), 8), Истина);
			
		Иначе
			
			УзелНПФЛ = ДобавитьУзелXML(УзелСвНП, "НПФЛ");
			
				ДобавитьУзелXML(УзелНПФЛ, "ИННФЛ", Истина, XMLСтрока(СокрЛП(ПараметрыПисьма.ИННФЛ)), Истина);
				УзелФИО = ДобавитьУзелXML(УзелНПФЛ, "ФИО");
				
					ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПФамилия)), 60));
					ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПИмя)), 60));
					ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПОтчество)), 60), Истина);
					
			УзелАдрРФ = ДобавитьУзелXML(УзелСвНП, "АдрРФ");
			
				АдрНП = РегламентированнаяОтчетность.РазложитьАдрес(ПараметрыПисьма.АдрМЖ);
				ДобавитьУзелXML(УзелАдрРФ, "Индекс", Истина, Лев(XMLСтрока(АдрНП.Индекс), 6), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "КодРегион", Истина, Лев(XMLСтрока(КодРегионаИзАдреса(АдрНП)), 2));
				ДобавитьУзелXML(УзелАдрРФ, "Район", Истина, Лев(XMLСтрока(АдрНП.Район), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Город", Истина, Лев(XMLСтрока(АдрНП.Город), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "НаселПункт", Истина, Лев(XMLСтрока(АдрНП.НаселенныйПункт), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Улица", Истина, Лев(XMLСтрока(АдрНП.Улица), 50), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Дом", Истина, Лев(XMLСтрока(АдрНП.Дом), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Корпус", Истина, Лев(XMLСтрока(АдрНП.Корпус), 8), Истина);
				ДобавитьУзелXML(УзелАдрРФ, "Кварт", Истина, Лев(XMLСтрока(АдрНП.Квартира), 8), Истина);
			
		КонецЕсли;
		
		УзелСвНП = ДобавитьУзелXML(УзелДокумент, "СвОтпр");
		Если ПараметрыПисьма.ПрПодп = 1 Тогда // отправитель - налогоплательщик
			Если НЕ ПараметрыПисьма.ЭтоПБОЮЛ Тогда
				УзелНПЮЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрЮЛ");
					ДобавитьУзелXML(УзелНПЮЛ, "НаимОрг", Истина, Лев(XMLСтрока(ПараметрыПисьма.НаимЮЛПол), 1000));
					ДобавитьУзелXML(УзелНПЮЛ, "ИННЮЛ", Истина, XMLСтрока(ПараметрыПисьма.ИННЮЛ));
					ДобавитьУзелXML(УзелНПЮЛ, "КПП", Истина, XMLСтрока(ПараметрыПисьма.КППЮЛ));
			Иначе
				УзелНПФЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрФЛ");
					ДобавитьУзелXML(УзелНПФЛ, "ИННФЛ", Истина, XMLСтрока(СокрЛП(ПараметрыПисьма.ИННФЛ)), Истина);
					УзелФИО = ДобавитьУзелXML(УзелНПФЛ, "ФИО");
						ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПФамилия)), 60));
						ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПИмя)), 60));
						ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ПараметрыПисьма.ИПОтчество)), 60), Истина);
			КонецЕсли;
		Иначе
			СвДоверенность = ПараметрыПисьма.Доверенность;
			СвПредст = СвДоверенность.СвУпПред.СвПред;
			Если СвПредст.Свойство("СвОрг") Тогда // представитель - ЮЛ
				УзелНПЮЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрЮЛ");
					ДобавитьУзелXML(УзелНПЮЛ, "НаимОрг", Истина, Лев(XMLСтрока(СокрЛП(СвПредст.СвОрг.НаимОрг)), 1000));
					ДобавитьУзелXML(УзелНПЮЛ, "ИННЮЛ", Истина, XMLСтрока(СвПредст.СвОрг.ИННЮЛ));
					ДобавитьУзелXML(УзелНПЮЛ, "КПП", Истина, XMLСтрока(СвПредст.СвОрг.КПП));
			Иначе
				УзелНПФЛ = ДобавитьУзелXML(УзелСвНП, "СвОтпрФЛ");
					ДобавитьУзелXML(УзелНПФЛ, "ИННФЛ", Истина, XMLСтрока(СокрЛП(СвПредст.СведФизЛ.ИННФЛ)), Истина);
					ФИОПредставителя = СвПредст.СведФизЛ.ФИО;
					УзелФИО = ДобавитьУзелXML(УзелНПФЛ, "ФИО");
						ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ФИОПредставителя.Фамилия)), 60));
						ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ФИОПредставителя.Имя)), 60));
						ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ФИОПредставителя.Отчество)), 60), Истина);
			КонецЕсли;
		КонецЕсли;
		
		УзелПодписант = ДобавитьУзелXML(УзелДокумент, "Подписант");
		
			ДобавитьУзелXML(УзелПодписант, "ПрПодп", Истина, ПараметрыПисьма.ПрПодп);
			УзелФИО = ДобавитьУзелXML(УзелПодписант, "ФИО");
			Если ПараметрыПисьма.ПрПодп = 1 Тогда
				ФИОПодписанта = РазложитьФИО(ПараметрыПисьма.ФИОРук);
				ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Фамилия)), 60));
				ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Имя)), 60));
				ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Отчество)), 60), Истина);
			Иначе
				ФИОПодписанта = ПараметрыПисьма.Доверенность.СвУпПред.СвПред.СведФизЛ.ФИО;
				ДобавитьУзелXML(УзелФИО, "Фамилия", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Фамилия)), 60));
				ДобавитьУзелXML(УзелФИО, "Имя", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Имя)), 60));
				ДобавитьУзелXML(УзелФИО, "Отчество", Истина, Лев(XMLСтрока(СокрЛП(ФИОПодписанта.Отчество)), 60), Истина);
			КонецЕсли;
		
		УзелЗапрИнфУсл = ДобавитьУзелXML(УзелДокумент, "ЗапрИнфУсл");
		
			ДобавитьУзелXML(УзелЗапрИнфУсл, "ИФНС", Истина, XMLСтрока(КодИФНСПолучателя));
			ДобавитьУзелXML(УзелЗапрИнфУсл, "КодЗапр", Истина, СоответствиеВидаУслугиКоду[Запрос.ВидУслуги]);
			ДобавитьУзелXML(УзелЗапрИнфУсл, "ФормОтв", Истина, СоответствиеФорматовОтветовИдентификатору[Запрос.ФорматОтвета]);
			Если Запрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом Тогда
				УзелАктСвер = ДобавитьУзелXML(УзелЗапрИнфУсл, "СпрРасБюд");
					ДобавитьУзелXML(УзелАктСвер, "НаДату", Истина, XMLСтрока(Формат(Запрос.Дата, "ДФ=dd.MM.yyyy")));
			ИначеЕсли Запрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
				УзелВыпОперРас = ДобавитьУзелXML(УзелЗапрИнфУсл, "ВыпОперРас");
					ДобавитьУзелXML(УзелВыпОперРас, "УслФорВып", Истина, XMLСтрока(?(Запрос.ДополнительныйПараметр = 0, 2, 1)));
					ДобавитьУзелXML(УзелВыпОперРас, "Год", Истина, XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=yyyy")));
					Для Каждого Стр Из Запрос.ЗапрашиваемыеНалоги Цикл
						УзелСвНалог = ДобавитьУзелXML(УзелВыпОперРас, "СвНалог");
						ДобавитьУзелXML(УзелСвНалог, "КБК", Истина, XMLСтрока(Стр.КБК));
						ДобавитьУзелXML(УзелСвНалог, "ОКАТО", Истина, XMLСтрока(Стр.ОКАТО));
					КонецЦикла;
			ИначеЕсли Запрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
				УзелПеречНалДекл = ДобавитьУзелXML(УзелЗапрИнфУсл, "ПеречНалДекл");
					ДобавитьУзелXML(УзелПеречНалДекл, "ДатаНач", Истина, XMLСтрока(Формат(Запрос.ДатаНачалаПериода, "ДФ=dd.MM.yyyy")));
					ДобавитьУзелXML(УзелПеречНалДекл, "ДатаКон", Истина, XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=dd.MM.yyyy")));
					ДобавитьУзелXML(УзелПеречНалДекл, "УслВыбОтч", Истина, XMLСтрока(Запрос.ДополнительныйПараметр));
			ИначеЕсли Запрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
				УзелСпрРасБюд = ДобавитьУзелXML(УзелЗапрИнфУсл, "АктСвер");
					ДобавитьУзелXML(УзелСпрРасБюд, "Год", Истина, XMLСтрока(Формат(Запрос.ДатаОкончанияПериода, "ДФ=yyyy")));
					ДобавитьУзелXML(УзелСпрРасБюд, "НаДату", Истина, XMLСтрока(Формат(Запрос.Дата, "ДФ=dd.MM")));
					Для Каждого Стр Из Запрос.ЗапрашиваемыеНалоги Цикл
						УзелСвНалог = ДобавитьУзелXML(УзелСпрРасБюд, "СвНалог");
						ДобавитьУзелXML(УзелСвНалог, "КБК", Истина, XMLСтрока(Стр.КБК));
						ДобавитьУзелXML(УзелСвНалог, "ОКАТО", Истина, XMLСтрока(Стр.ОКАТО));
					КонецЦикла;
			КонецЕсли;
		
	// сохранение дерева XML в файл и двоичные данные
	ТекстВыгрузкиXML = ЗаписатьДеревоВXML(Дерево);
	
	// записываем XML запроса во временный файл
	ВремФайл = ПолучитьИмяВременногоФайла();
	Если НЕ ЗаписатьXMLВФайл(ТекстВыгрузкиXML, ВремФайл) Тогда
		Сообщить("Не удалось записать текст запроса во временный файл!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецЕсли;
	
	// считываем двоичные данные файла запроса, после чего удаляем файл
	ДвоичныеДанныеФайлаЗапроса = Новый ДвоичныеДанные(ВремФайл);
	УдалитьФайлы(ВремФайл);
	
	// формируем имя файла запроса
	ИмяФайлаЗапроса = ИмяФайлаБезРасширения + ".xml";
	
	Возврат Истина;
	
КонецФункции

Процедура ОтправкаЗапросаНаИнформационноеОбслуживание535(Док, Действие = 0) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Док) Тогда
		Сообщить("Не выбран документ для отправки.", СтатусСообщения);
		Возврат;
	КонецЕсли;
	
	// проверяем, заполнена ли организация-отправитель и включен ли механизм обмена
	Организация = Док.Организация;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		// 
		Сообщить("Не выбрана организация-отправитель.", СтатусСообщения.Важное);
		Возврат;
	ИначеЕсли Организация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Сообщить("Для организации """ + Организация + """ не включена возможность использования встроенного в конфигурацию механизма информационного взаимодействия с ФНС и ПФР по каналам связи.
				  |Отправка прервана!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем, предназначена ли эта учетная запись для документооборота с ФНС
	УчетнаяЗапись = УчетнаяЗаписьОрганизации(Организация);
	Если НЕ УчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС Тогда
		Сообщить("Учетная запись документооборота, сопоставленная организации, не предназначена для взаимодействия с ФНС.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// проверяем статусы отправки
	СтатусОтправкиОбъекта = ПолучитьСтатусОтправкиОбъекта(Док);
	Если ЗначениеЗаполнено(СтатусОтправкиОбъекта) Тогда
		Если НЕ ВопросПредупреждение("Внимание, Вы уже отправляли этот запрос!
								|Вы действительно хотите отправить его заново? При этом будет начат новый цикл обмена!",
								"Нет, прервать отправку.",
								"Да, я хочу отправить запрос, предыдущая попытка отправки которого не завершена.") Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// находим налоговый орган по коду
	КодНалоговогоОргана = СокрЛП(Док.Получатель.Код);
	НалоговыйОрган = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНалоговогоОргана);
	Если НЕ ЗначениеЗаполнено(НалоговыйОрган) Тогда
		Сообщить("Не удалось найти налоговый орган " + КодНалоговогоОргана + " в справочнике ""Налоговые органы"".", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// формируем файл с содержимым
	ДвоичныеДанныеФайлаЗапроса = Неопределено;
	ИмяФайлаЗапроса = Неопределено;
	РезультатФормированияФайлаЗапроса = СформироватьФайлЗапросаИОН(Док, ДвоичныеДанныеФайлаЗапроса, ИмяФайлаЗапроса);
	Если НЕ РезультатФормированияФайлаЗапроса Тогда
		Возврат;
	КонецЕсли;
	
	КороткоеИмяФайлаЗапроса = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	
	ФайлДоверенности = Неопределено;
	КороткоеИмяФайлаДоверенности = Неопределено;
	
	// ищем РегистрацияВИФНС по организации и коду налогового органа
	ЭлРегистрацияВИФНС = Док.Получатель;
	Если ЗначениеЗаполнено(ЭлРегистрацияВИФНС) И ЗначениеЗаполнено(ЭлРегистрацияВИФНС.Доверенность) Тогда
		
		// формируем файл доверенности
		ФайлДоверенности = ВыгрузитьДоверенность(ЭлРегистрацияВИФНС, КороткоеИмяФайлаДоверенности);
		Если НЕ ЗначениеЗаполнено(ФайлДоверенности) Тогда
			Возврат;
		КонецЕсли;
		
		//// если представитель ЮЛ или [ФЛ и не сотрудник организации], то подменяем имя файла
		//ДоверенностьПредставителя = ЭлРегистрацияВИФНС.Доверенность;
		//Если ДоверенностьПредставителя.ПредставительЯвляетсяЮЛ
		//ИЛИ (НЕ ДоверенностьПредставителя.ПредставительЯвляетсяЮЛ И НЕ ДоверенностьПредставителя.ПредставительЯвляетсяСотрудником) Тогда
		//	Если НЕ ИзменитьФайлВыгрузкиПриОтправкеЧерезУполномоченногоПредставителя(ТекстВыгрузки, ИмяФайлаВыгрузки, ДоверенностьПредставителя, КодНалоговогоОргана) Тогда
		//		Возврат;
		//	КонецЕсли;
		//	ИмяФайлаВыгрузкиБылоИзменено = Истина;
		//КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////
	НачатьТранзакцию();
	
	// формируем цикл обмена
	ЦиклОбмена = Справочники.ЦиклыОбмена.СоздатьЭлемент();
	ЦиклОбменаСсылка = Справочники.ЦиклыОбмена.ПолучитьСсылку();
	ЦиклОбмена.УстановитьСсылкуНового(ЦиклОбменаСсылка);
	ЦиклОбмена.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
	ЦиклОбмена.Предмет = Док;
	ЦиклОбмена.Идентификатор = СгенерироватьUUID();
	ЦиклОбмена.Организация = Организация;
	ЦиклОбмена.УчетнаяЗапись = УчетнаяЗапись;
	ЦиклОбмена.ВнешняяОрганизация = НалоговыйОрган;
	ЦиклОбмена.Тип = Перечисления.ТипыЦикловОбмена.ИОН;
	ЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
	ЦиклОбмена.ДатаНачалаПериода = Док.ДатаНачалаПериода;
	ЦиклОбмена.ДатаОкончанияПериода = Док.ДатаОкончанияПериода;
	ЦиклОбмена.ВидУслуги = Док.ВидУслуги;
	ЦиклОбмена.ФорматОтвета = Док.ФорматОтвета;
	
	// формируем первичное транспортное сообщение
	ТранспортноеСообщение = Документы.ТранспортноеСообщение.СоздатьДокумент();
	ТранспортноеСообщение.ЦиклОбмена = ЦиклОбменаСсылка;
	ТранспортноеСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
	ТранспортноеСообщение.Отправитель = Организация;
	ТранспортноеСообщение.Получатель = НалоговыйОрган;
	ТранспортноеСообщение.УчетнаяЗапись = УчетнаяЗапись;
	ТранспортноеСообщение.Статус = Перечисления.СтатусыПисем.Исходящее;
	Попытка
		ТранспортноеСообщение.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка прервана.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// ДОБАВЛЯЕМ ВЛОЖЕНИЯ
	
	// добавляем запрос
	Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос, ДвоичныеДанныеФайлаЗапроса, ИмяФайлаЗапроса, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml) Тогда
		Сообщить("Отправка запроса прервана.", СтатусСообщения.Важное);
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// добавляем доверенность, если она есть
	Если ЗначениеЗаполнено(ФайлДоверенности) Тогда
		Если НЕ ДобавитьСодержимоеТранспортногоКонтейнера(ТранспортноеСообщение.Ссылка, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность, ФайлДоверенности, КороткоеИмяФайлаДоверенности, , , , , , , СгенерироватьUUID(), Перечисления.ТипыСодержимогоФайлов.xml) Тогда
			Сообщить("Отправка запроса прервана.", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// записываем цикл обмена
	Попытка
		ЦиклОбмена.Записать();
	Исключение
		ОтменитьТранзакцию();
		Сообщить(ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Сообщить("Отправка запроса прервана.", СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	// изменяем статус отправки
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.ВКонверте);
	
	// готовим пакет
	Если НЕ СформироватьПакет(ТранспортноеСообщение) Тогда
		ОтменитьТранзакцию();
		Возврат;
	КонецЕсли;
	
	// отправляем сообщение
	Если НЕ ОтправитьТранспортноеСообщение(ТранспортноеСообщение.Ссылка) Тогда
		ОтменитьТранзакцию();
		Сообщить("Не удалось отправить транспортное сообщение!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	// изменяем статус отправки
	ЗаписатьСтатусОтправкиОбъекта(Док, Перечисления.СтатусыОтправки.Отправлен);
	
	// фиксируем транзакцию
	ЗафиксироватьТранзакцию();
	
	Сообщить("Транспортный пакет сформирован, подписан и отправлен.", СтатусСообщения.Информация);
	
КонецПроцедуры

Функция ПоказатьОтветНаЗапросИОН(Запрос) Экспорт
	
	// получаем все документы к показу
	ОтветыНаЗапросыИОН = ПолучитьОтветыНаЗапросИОН(Запрос, Истина);
	
	// определяем документ, который показываем
	КоличествоОтветов = ОтветыНаЗапросыИОН.Количество();
	Если КоличествоОтветов = 0 Тогда
		Возврат Ложь;
	ИначеЕсли КоличествоОтветов > 1 Тогда
		
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.ЗагрузитьЗначения(ОтветыНаЗапросыИОН.ВыгрузитьКолонку("ИмяФайла"));
		СписокВыбора.ЗаполнитьПометки(Истина);
		Если НЕ СписокВыбора.ОтметитьЭлементы() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// удаляем не помеченные строки из таблицы ответов
		Для Каждого СтрСписокВыбора Из СписокВыбора Цикл
			Если НЕ СтрСписокВыбора.Пометка Тогда
				СтрОтветНаЗапросИОН = ОтветыНаЗапросыИОН.Найти(СтрСписокВыбора.Значение, "ИмяФайла");
				ОтветыНаЗапросыИОН.Удалить(СтрОтветНаЗапросИОН);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// создаем временный каталог
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла() + "\";
	СоздатьКаталог(ИмяВременногоКаталога);
	
	// перебираем ответы
	Для Каждого СтрОтветНаЗапросИОН Из ОтветыНаЗапросыИОН Цикл
	
		// записываем содержимое во временный файл
		ИмяВременногоФайла = ИмяВременногоКаталога + СтрОтветНаЗапросИОН.ИмяФайла;
		СтрОтветНаЗапросИОН.Данные.Получить().Записать(ИмяВременногоФайла);
		
		// показываем
		Если СтрОтветНаЗапросИОН.ТипСодержимого = Перечисления.ТипыСодержимогоФайлов.xml Тогда
			ПоказатьXMLИзФайла(ИмяВременногоФайла, СтрОтветНаЗапросИОН.ИмяФайла);
		Иначе
			Попытка
				ЗапуститьПриложение(ИмяВременногоФайла);
			Исключение
				Сообщить("Не удалось открыть ответ на запрос:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	КонтекстЭДО.ПометитьЗапросОтветНаКоторыйПрочитан(Запрос);
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьЗаполнениеЗапроса535(ДокЗапрос, Параметры)
	
	СтатусПроверки = Истина;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.Организация) Тогда
		Сообщить("Не задана организация!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	ИначеЕсли НЕ ЗначениеЗаполнено(ДокЗапрос.Получатель) Тогда // !!! в приказе предусмотрена возможность формирования запроса в условную инспекцию 0000
		Сообщить("Не задан получатель!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
		Возврат СтатусПроверки;
	КонецЕсли;
	
	//// если это крупнейший или обмен производится напрямую, то отправка запроса возможна только в основную инспекцию учетки
	//УчетнаяЗаписьОбмена = УчетнаяЗаписьОрганизации(ДокЗапрос.Организация);
	//Если СокрЛП(УчетнаяЗаписьОбмена.НалоговыйОрган.Код) <> СокрЛП(ДокЗапрос.Получатель.Код) Тогда
	//	Если ЗначениеЗаполнено(ДокЗапрос.Организация.КодИФНСПолучателя) ИЛИ УчетнаяЗаписьОбмена.ОбменНапрямую Тогда
	//		Сообщить("Отправка отчета возможна только в ту инспекцию, которая указана в учетной записи, сопоставленной организации (" + СокрЛП(УчетнаяЗаписьОбмена.НалоговыйОрган.Код) + ")!", СтатусСообщения.Важное);
	//		СтатусПроверки = Ложь;
	//	КонецЕсли;
	//КонецЕсли;
	
	Если НЕ Параметры.ЭтоПБОЮЛ Тогда
	
		Если ПустаяСтрока(Параметры.АдрЮр) Тогда
			Сообщить("Не задан адрес организации (индивидуального предпринимателя)!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Параметры.АдрЮР, ",") <> 9) И (СтрЧислоВхождений(Параметры.АдрЮР, ",") <> 12) Тогда
			Сообщить("Адрес организации (индивидуального предпринимателя) должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодРегионаИзАдреса(Параметры.АдрЮр) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе организации (индивидуального предпринимателя).
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Параметры.АдрМЖ) Тогда
			Сообщить("Не задан адрес места жительства индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если (СтрЧислоВхождений(Параметры.АдрМЖ, ",") <> 9) И (СтрЧислоВхождений(Параметры.АдрМЖ, ",") <> 12) Тогда
			Сообщить("Адрес места жительства индивидуального предпринимателя должен содержать в себе 9 или 12 запятых!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
		Если КодРегионаИзАдреса(Параметры.АдрМЖ) = "" Тогда
			Сообщить("Не удалось определить код региона, указанного в адресе места жительства индивидуального предпринимателя.
					|Проверьте правильность указания региона!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.КодНО) Тогда
		Сообщить("Не задан налоговый орган!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если СтрДлина(Параметры.КодНО) <> 4 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.КодНО) Тогда
		Сообщить("Код налогового органа должен состоять из четырех цифр!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ДатаНачалаПериода) Тогда
		Сообщить("Не задана дата начала периода!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ДатаОкончанияПериода) Тогда
		Сообщить("Не задана дата окончания периода!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если ДокЗапрос.ДатаНачалаПериода > ДокЗапрос.ДатаОкончанияПериода Тогда
		Сообщить("Дата начала периода не может быть больше даты окончания!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Год(ДокЗапрос.ДатаНачалаПериода) <> Год(ДокЗапрос.ДатаОкончанияПериода) Тогда
		Сообщить("Год даты начала периода должен совпадать с годом даты окончания!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДокЗапрос.ФорматОтвета) Тогда
		Сообщить("Выберите один из типов файла ответа!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	ИначеЕсли ДокЗапрос.ФорматОтвета <> Перечисления.ФорматОтветаНаЗапросИОН.RTF
	И ДокЗапрос.ФорматОтвета <> Перечисления.ФорматОтветаНаЗапросИОН.XLS
	И ДокЗапрос.ФорматОтвета <> Перечисления.ФорматОтветаНаЗапросИОН.XML Тогда
		Сообщить("Выбранный формат ответа на запрос не поддерживается актуальным форматом документооборота с ФНС!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Если Параметры.ЭтоПБОЮЛ Тогда
		Если ПустаяСтрока(Параметры.ИПФамилия) Тогда
			Сообщить("Не удалось определить фамилию индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ПустаяСтрока(Параметры.ИПИмя) Тогда
			Сообщить("Не удалось определить имя индивидуального предпринимателя!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
		Если ДокЗапрос.ДополнительныйПараметр <> 1 И ДокЗапрос.ДополнительныйПараметр <> 2 И ДокЗапрос.ДополнительныйПараметр <> 3 Тогда
			Сообщить("Не задан фильтр по виду документа!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если Год(ДокЗапрос.ДатаНачалаПериода) <> Год(ДокЗапрос.ДатаОкончанияПериода) Тогда
			Сообщить("Год в дате начала периода запроса не соответствует в дате конца периода!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	ИначеЕсли ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
		Если НачалоДня(ДокЗапрос.ДатаНачалаПериода) <> НачалоГода(ДокЗапрос.ДатаНачалаПериода) Тогда
			Сообщить("Запрос данного типа формируется только за календарный год: дата начала периода запроса не соответствует концу года!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если КонецДня(ДокЗапрос.ДатаОкончанияПериода) <> КонецГода(ДокЗапрос.ДатаОкончанияПериода) Тогда
			Сообщить("Запрос данного типа формируется только за календарный год: дата конца периода запроса не соответствует концу года!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если ДокЗапрос.ЗапрашиваемыеНалоги.Количество() = 0 Тогда
			Сообщить("Должна быть указана хотя бы одна комбинация КБК и кода по ОКАТО в табличной части запрашиваемых налогов!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	ИначеЕсли ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
		Если НачалоДня(ДокЗапрос.ДатаНачалаПериода) <> НачалоГода(ДокЗапрос.ДатаНачалаПериода) Тогда
			Сообщить("Запрос данного типа формируется только за календарный год: дата начала периода запроса не соответствует концу года!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
		Если КонецДня(ДокЗапрос.ДатаОкончанияПериода) <> КонецГода(ДокЗапрос.ДатаОкончанияПериода) Тогда
			Сообщить("Запрос данного типа формируется только за календарный год: дата конца периода запроса не соответствует концу года!", СтатусСообщения.Важное);
			СтатусПроверки = Ложь;
		КонецЕсли;
	ИначеЕсли ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
		Сообщить("Формирование запросов данного типа не предусмотрено актуальным форматом документооборота с ФНС!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	ИначеЕсли ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом Тогда
		// проверки не требуются
	ИначеЕсли ДокЗапрос.ВидУслуги = Перечисления.ВидыУслугПриИОН.ПустаяСсылка() Тогда
		Сообщить("Не указан вид услуги!", СтатусСообщения.Важное);
		СтатусПроверки = Ложь;
	КонецЕсли;
	
	Возврат СтатусПроверки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ ЗАПРОСА В ФАЙЛ НА ДИСК

Функция ВыгрузитьЗапросИОНВФайл(ДокЗапрос) Экспорт
	
	Перем Запрос, ИмяФайлаЗапроса;
	
	Если ДокЗапрос.ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Возврат СформироватьФайлЗапросаИОН(ДокЗапрос, Запрос, ИмяФайлаЗапроса) И СохранитьЗапросНаДиск(Запрос, ИмяФайлаЗапроса);
	Иначе
		Возврат СформироватьЗапрос(ДокЗапрос, Запрос, ИмяФайлаЗапроса) И СохранитьЗапросНаДиск(Запрос, ИмяФайлаЗапроса);
	КонецЕсли;
	
КонецФункции

Функция ОпределитьТипЦиклаОбменаПоСообщениюРассылки(Сообщение)
	
	Контейнеры = ПолучитьТранспортныйКонтейнер(Сообщение);
	Если Контейнеры.Количество() = 0 Тогда
		Возврат Перечисления.ТипыЦикловОбмена.ПустаяСсылка();
	КонецЕсли;
	ИмяКонтейнера = нрег(Контейнеры[0].ИмяФайла);
	
	СуффиксКонтейнераРассылкаГрупповая = "05_01_01.zip";
	Если Прав(ИмяКонтейнера, СтрДлина(СуффиксКонтейнераРассылкаГрупповая)) = СуффиксКонтейнераРассылкаГрупповая Тогда
		Возврат Перечисления.ТипыЦикловОбмена.РассылкаГрупповая;
	Иначе
		Возврат Перечисления.ТипыЦикловОбмена.Рассылка;
	КонецЕсли;
	
КонецФункции

Функция РазобратьВходящееПисьмоФНС(ФайлПисьма)
	
	Дерево = ЗагрузитьXMLВДеревоЗначений(ФайлПисьма);
	Если НЕ ЗначениеЗаполнено(Дерево) Тогда // значит письмо в формате txt - такое возможно, несмотря на формат
		ТекстПисьма = ПрочитатьТекстИзФайла(ФайлПисьма);
		Возврат Новый Структура("Дата, Текст", Неопределено, ТекстПисьма);
	Иначе
		
		УзелПисьмоОтв = Дерево.Строки.Найти("ПисьмоОтв", "Имя", Истина);
		Если УзелПисьмоОтв = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Результат = Новый Структура("Дата, Текст");
		
		УзелДатаПисьмо = УзелПисьмоОтв.Строки.Найти("ДатаПисьмо", "Имя");
		Если УзелДатаПисьмо <> Неопределено Тогда
			Результат.Дата = ДатаПоСтроке(УзелДатаПисьмо.Значение);
		КонецЕсли;
		
		УзелПисьмоТекст = УзелПисьмоОтв.Строки.Найти("ПисьмоТекст", "Имя");
		Если УзелДатаПисьмо <> Неопределено Тогда
			Результат.Текст = XMLЗначениеВнутр(Тип("Строка"), УзелПисьмоТекст.Значение);
		КонецЕсли;
		
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОтветыНаЗапросИОН(парамЗапрос, СДанными = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ОтветыНаЗапросыИОН.ИмяФайла,
	                      |	ОтветыНаЗапросыИОН.Размер,
	                      |	ОтветыНаЗапросыИОН.ТипСодержимого";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
	                      |	ОтветыНаЗапросыИОН.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                      |ИЗ
	                      |	РегистрСведений.ОтветыНаЗапросыИОН КАК ОтветыНаЗапросыИОН
	                      |ГДЕ
	                      |	ОтветыНаЗапросыИОН.Запрос = &Запрос";
	Запрос.УстановитьПараметр("Запрос", парамЗапрос);
	Попытка
		Возврат Запрос.Выполнить().Выгрузить();
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Функция ДобавитьОтветНаЗапросИОН(Запрос, ИмяФайла, Данные, Размер = Неопределено, ТипСодержимогоФайла = Неопределено) Экспорт
	
	Если Размер = Неопределено Тогда
		Размер = ОпределитьРазмер(Данные);
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ОтветыНаЗапросыИОН.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Запрос = Запрос;
	МенеджерЗаписи.ИмяФайла = ИмяФайла;
	МенеджерЗаписи.Размер = Размер;
	
	Если ТипСодержимогоФайла <> Неопределено Тогда
		МенеджерЗаписи.ТипСодержимого = ТипСодержимогоФайла;
	КонецЕсли;
	
	ТипДанных = ТипЗнч(Данные);
	Если ТипДанных = Тип("ХранилищеЗначения") Тогда // если хранилище значения
		МенеджерЗаписи.Данные = Данные;
	ИначеЕсли ТипДанных = Тип("Строка") Тогда // если полное имя файла
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(Данные), Новый СжатиеДанных(9));
	Иначе // если двоичные данные
		МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Данные, Новый СжатиеДанных(9));
	КонецЕсли;
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
		Возврат Истина;
	Исключение
		Сообщить("Не удалось сохранить в информационной базе файл ответа на запрос ИОН """ + Запрос + """!" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ОбновитьОтветНаЗапросИОНВРегистреОтветовПриНеобходимости(Объект)
	
	ЗапросИОН = Объект.ЦиклОбмена.Предмет;
	ОтветыНаЗапрос = ПолучитьОтветыНаЗапросИОН(ЗапросИОН);
	Если НЕ ЗначениеЗаполнено(ОтветыНаЗапрос) ИЛИ ОтветыНаЗапрос.Количество() = 0 Тогда
		ВложенияОтветы = ПолучитьВложенияТранспортногоСообщения(Объект.Ссылка, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
		Для Каждого ВложениеОтвет Из ВложенияОтветы Цикл
			ДобавитьОтветНаЗапросИОН(ЗапросИОН, ВложениеОтвет.ИмяФайла, ВложениеОтвет.Данные, ВложениеОтвет.Размер, ВложениеОтвет.ТипсодержимогоФайла);
		КонецЦикла;
		ДополнитьСписокЗапросовПоКоторымПолученыОтветы(ЗапросИОН);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьСписокЗапросовПоКоторымПолученыОтветы(Запрос)
	
	Если ЗапросыПоКоторымПолученыОтветы = Неопределено Тогда
		ЗапросыПоКоторымПолученыОтветы = Новый Массив;
	КонецЕсли;
	
	ЗапросыПоКоторымПолученыОтветы.Добавить(Запрос);
	
КонецПроцедуры

Процедура ПометитьЗапросОтветНаКоторыйПрочитан(Запрос) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗапросыПоКоторымПолученыОтветы) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексЗапросаВМассивеПолученных = ЗапросыПоКоторымПолученыОтветы.Найти(Запрос);
	Если ИндексЗапросаВМассивеПолученных <> Неопределено Тогда
		ЗапросыПоКоторымПолученыОтветы.Удалить(ИндексЗапросаВМассивеПолученных);
		Оповестить("Чтение запроса", Запрос);
	КонецЕсли;
	
КонецПроцедуры

Функция ИзвлечьИдентификаторДокументооборотаИзПакета(ОбъектСообщение)
	
	// выгружаем контейнер во временный файл
	ИмяФайлаКонтейнера = ПолучитьИмяВременногоФайла();
	Контейнер = ПолучитьТранспортныйКонтейнер(ОбъектСообщение.Ссылка, Истина);
	Если НЕ ЗначениеЗаполнено(Контейнер) ИЛИ Контейнер.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Контейнер[0].Данные.Получить().Записать(ИмяФайлаКонтейнера);
	
	// распаковываем файл описания сведений архива
	ИмяФайлаОписанияСведений = "packageDescription.xml";
	ЧтениеЗИП = Новый ЧтениеZipФайла(ИмяФайлаКонтейнера);
	ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияСведений);
	Если ЭлементОписаниеСведений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КаталогРаспаковки = СоздатьВременныйКаталог();
	ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	
	// читаем XML
	ТекстXML = ПрочитатьТекстИзФайла(КаталогРаспаковки + ИмяФайлаОписанияСведений, , Истина);
	Если НЕ ЗначениеЗаполнено(ТекстXML) Тогда
		ЧтениеЗИП.Закрыть();
		УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// загружаем XML в дерево
	ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
	Если НЕ ЗначениеЗаполнено(ДеревоXML) Тогда
		ЧтениеЗИП.Закрыть();
		УдалитьВременныйФайл(ИмяФайлаКонтейнера);
		УдалитьВременныйФайл(КаталогРаспаковки);
		Возврат Неопределено;
	КонецЕсли;
	
	// в случае уведомления об ошибке, источником для получения идентификатора пакета должен служить
	// документ описаниеОшибочногоПакета, на который ссылается описание пакета
	Если ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС
	ИЛИ ОбъектСообщение.Тип = Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка Тогда // !!!
		
		// находим элемент описаниеОшибочногоПакета
		Узлы_ТипДокументаОписаниеОшибочногоПакета = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип, Значение", "типДокумента", "А", "описаниеОшибочногоПакета"), Истина);
		Если Узлы_ТипДокументаОписаниеОшибочногоПакета.Количество() > 0 Тогда
			
			Узел_ОписаниеОшибочногоПакета = Узлы_ТипДокументаОписаниеОшибочногоПакета[0].Родитель;
			
			// ищем в подчинении элемент Содержимое
			УзлыСодержимое = Узел_ОписаниеОшибочногоПакета.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "содержимое", "Э"));
			Если УзлыСодержимое.Количество() > 0 Тогда
				
				// ищем в подчинении атрибут имяФайла
				УзелСодержимое = УзлыСодержимое[0];
				УзлыИмяФайла = УзелСодержимое.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "имяФайла", "А"));
				Если УзлыИмяФайла.Количество() > 0 Тогда
					
					УзелИмяФайла = УзлыИмяФайла[0];
					ИмяФайлаОписанияОшибочногоПакета = СокрЛП(УзелИмяФайла.Значение);
					
					ЭлементОписаниеСведений = ЧтениеЗИП.Элементы.Найти(ИмяФайлаОписанияОшибочногоПакета);
					Если ЭлементОписаниеСведений <> Неопределено Тогда
						
						ЧтениеЗИП.Извлечь(ЭлементОписаниеСведений, КаталогРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
						
						// распаковываем
						ПолноеИмяФайлаДокумента = РазархивироватьФайл(КаталогРаспаковки + ИмяФайлаОписанияОшибочногоПакета);
						Если ПолноеИмяФайлаДокумента <> Неопределено Тогда
						
							// читаем XML
							ТекстXML = ПрочитатьТекстИзФайла(ПолноеИмяФайлаДокумента, , Истина);
							Если ЗначениеЗаполнено(ТекстXML) Тогда
								
								// загружаем XML в дерево
								_ДеревоXML = ЗагрузитьСтрокуXMLВДеревоЗначений(ТекстXML);
								
								// подменяем дерево описания сведений
								Если _ДеревоXML <> Неопределено Тогда
									ДеревоXML = _ДеревоXML;
								КонецЕсли;
								
							КонецЕсли;
							
							УдалитьВременныйФайл(ПолноеИмяФайлаДокумента);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// закрываем архив и удаляем временный файл контейнера
	ЧтениеЗИП.Закрыть();
	УдалитьВременныйФайл(ИмяФайлаКонтейнера);
	УдалитьВременныйФайл(КаталогРаспаковки);
	
	// ищем атрибут "идентификаторДокументооборота"
	Узлы_идентификаторДокументооборота = ДеревоXML.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "идентификаторДокументооборота", "А"), Истина);
	Если Узлы_идентификаторДокументооборота.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// возвращаем первое найденное значение атрибута
	Возврат СокрЛП(Узлы_идентификаторДокументооборота[0].Значение);
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаЗапросаДляОписанияСведений(ФайлВыгрузки)

	ПоказателиВыгрузки = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
	ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
	Пока ОбъектЧтениеXML.Прочитать() Цикл
		Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
				Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
					ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	ОбъектЧтениеXML.Закрыть();
	Возврат ПоказателиВыгрузки;

КонецФункции

Функция ОпределитьКлючевыеПараметрыФайлаЗапроса(Сообщение, Вложения)
	
	// ищем файл запроса
	СтрФайлЗапроса = Вложения.Найти(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос, "Тип");
	Если СтрФайлЗапроса = Неопределено Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось обнаружить файл запроса среди вложений сообщения.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	ФайлыЗапроса = ПолучитьВложенияТранспортногоСообщения(Сообщение, Истина, , СтрФайлЗапроса.ИмяФайла);
	
	// сохраняем файл запроса во временный файл
	ИмяВременногоФайлаЗапроса = ПолучитьИмяВременногоФайла();
	Попытка
		ФайлыЗапроса[0].Данные.Получить().Записать(ИмяВременногоФайлаЗапроса);
	Исключение
		Сообщить("Не удалось сформировать описание сведений: не удалось сохранить файл запроса во временный каталог.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	// разбираем содержимое файла запроса
	ПараметрыФайлаЗапроса = СформироватьСтруктуруПараметровФайлаЗапросаДляОписанияСведений(ИмяВременногоФайлаЗапроса);
	Если НЕ ЗначениеЗаполнено(ПараметрыФайлаЗапроса) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// ищем КНД
	КодЗапр = ПараметрыФайлаЗапроса["КодЗапр"];
	Если КодЗапр = Неопределено Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось определить код типа запроса по файлу запроса.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// определяем инспекции по имени файла
	Инспекции = ОпределитьИнспекцииПоИмениФайла(СтрФайлЗапроса.ИмяФайла);
	Если НЕ ЗначениеЗаполнено(Инспекции) Тогда
		Сообщить("Не удалось сформировать описание сведений: не удалось выделить коды инспекций в имени файла запроса.", СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;
	
	// удаляем временный файл выгрузки
	УдалитьВременныйФайл(ИмяВременногоФайлаЗапроса);
	
	// 
	Возврат Новый Структура("КодЗапр,	НОПоМестуПредставления,	НОПоМестуНахождения",
							КодЗапр,	Инспекции.КодИФНС1,		Инспекции.КодИФНС2);
	
КонецФункции

Функция СформироватьОписаниеСведенийОбращенияПисьмаРассылки(Сообщение, Вложения, КороткоеИмяФайла)
	
	Предмет = Сообщение.ЦиклОбмена.Предмет;
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	Если ЗначениеЗаполнено(Предмет.ИдентификаторОснования) Тогда
		ДобавитьУзелXML(Дерево, "ответНа", , Предмет.ИдентификаторОснования);
	КонецЕсли;
	
	ДобавитьУзелXML(Дерево, "тема", , СокрЛП(Предмет.Наименование));
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "описание");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Функция СформироватьОписаниеСведенийЗапроса(Сообщение, Вложения, КороткоеИмяФайла = Неопределено)
	
	// извлекаем ключевые параметры
	КлючевыеПараметрыФайлаВыгрузки = ОпределитьКлючевыеПараметрыФайлаЗапроса(Сообщение, Вложения);
	Если НЕ ЗначениеЗаполнено(КлючевыеПараметрыФайлаВыгрузки) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// создаем дерево описания XML
	Дерево = СоздатьДеревоXML();
	
	ДобавитьУзелXML(Дерево, "кодЗапроса", , КлючевыеПараметрыФайлаВыгрузки["кодЗапр"]);
	ДобавитьУзелXML(Дерево, "НОПоМестуПредставления", , КлючевыеПараметрыФайлаВыгрузки["НОПоМестуПредставления"]);
	ДобавитьУзелXML(Дерево, "НОПоМестуНахождения", , КлючевыеПараметрыФайлаВыгрузки["НОПоМестуНахождения"]);
	
	// формируем строку XML на основе дерева
	СтрокаXML = ВыгрузитьДеревоВXML_ПФР(Дерево, "описание");
	
	// записываем строку в файл
	КороткоеИмяФайла = СгенерироватьИмяФайлаДокументаВСоставеПакета();
	ПолноеИмяФайлаДокументаВСоставеПакета = ПолучитьКаталогВременныхФайлов() + КороткоеИмяФайла;
	РезультатЗаписи = ЗаписатьXMLВФайл(СтрокаXML, ПолноеИмяФайлаДокументаВСоставеПакета);
	Если РезультатЗаписи = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолноеИмяФайлаДокументаВСоставеПакета;
	
КонецФункции

Процедура ПоказатьПодтверждениеДатыПолучения(Сообщение, ИмяФайлаПодтверждения = Неопределено) Экспорт
	
	ФормаПодтверждения = ПолучитьФорму("ПодтверждениеДатыПолучения");
	ФормаПодтверждения.Сообщение = Сообщение;
	ФормаПодтверждения.ИмяФайлаПодтверждения = ИмяФайлаПодтверждения;
	ФормаПодтверждения.ОткрытьМодально();
	
КонецПроцедуры

Процедура ПоказатьУведомлениеОбОтказеОбращение(Сообщение, ИмяФайлаУведомления = Неопределено) Экспорт
	
	ФормаИзвещения = ПолучитьФорму("УведомлениеОбОтказеОбращениеЗапрос");
	ФормаИзвещения.Сообщение = Сообщение;
	ФормаИзвещения.ИмяФайлаУведомления = ИмяФайлаУведомления;
	ФормаИзвещения.ОткрытьМодально();
	
КонецПроцедуры

// ВЫГРУЗКА ДОВЕРЕННОСТИ 534
////////////////////////////////////////////////////////////////////////////////

Функция ЗаписатьДеревоВXML(Дерево);
	
	ПотокXML = СоздатьНовыйПотокXML();
	
	Для Каждого Стр Из Дерево.Строки Цикл
		ЗаписатьУзелДереваВXML(Стр, ПотокXML);
	КонецЦикла;
	
	ТекстДляЗаписи = ПотокXML.Закрыть();
	ТекстДляЗаписи = "<?xml version=""1.0"" encoding=""windows-1251""?>" + Сред(ТекстДляЗаписи, Найти(ТекстДляЗаписи, Символы.ПС));
	Возврат ТекстДляЗаписи;
	
КонецФункции


СоответствиеТипаСообщенияКраткомуПредставлению = Новый Соответствие;

// ФНС 141
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности, "Подтверждение отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности, "Переподписанное подтверждение отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности, "Квитанция о приеме");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности, "Протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности, "Переподписанный протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО, "Уведомление об уточнении");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ, "Протокол приема 2-НДФЛ");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика, "Документ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, "Подтверждение отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, "Переподписанное подтверждение отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика, "Квитанция о доставке");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО, "Документ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО, "Подтверждение приема документа");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН, "Запрос");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН, "Подтверждение отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН, "Переподписанное подтверждение отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН, "Квитанция о приеме");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН, "Протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН, "Переподписанный протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН, "Ответ на запрос");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН, "Переподписанный ответ на запрос");

// ФНС 534
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "Извещение на подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, "Извещение о получении отчета");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, "Результат приема");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "Извещение о получении результата приема");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, "Результат обработки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "Извещение о получении результата обработки");

// ФНС 534 2-НДФЛ
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, "Форма 2-НДФЛ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, "Извещение о получении формы 2-НДФЛ");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, "Результат приема");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС, "Уведомление об ошибке");

// ФНС 534 НФД
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, "Извещение о получении отчета");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, "Результат приема");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, "Письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП, "Извещение о получении письма");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО, "Рассылка");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП, "Извещение о получении рассылки");

// ФНС 534 ИОН
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП, "Запрос");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, "Подтверждение даты отправки");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, "Извещение о получении запроса");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, "Результат приема");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, "Результат обработки");

// ПФР
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетностьПФР, "Отчет");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеПолученияОтчетностиПФР, "Подтверждение получения");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколПФР, "Протокол");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР, "Квитанция на протокол");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР, "Исходящее письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР, "Квитанция на исходящее письмо");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееПФР, "Входящее письмо");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоВходящееКвитанцияПФР, "Квитанция на входящее письмо");

СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеПФР, "Уведомление об ошибке");

//
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка, "Критическая ошибка");
СоответствиеТипаСообщенияКраткомуПредставлению.Вставить(Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка(), "Неизвестный тип");

СвойстваСертификатов = Новый Соответствие;

ПодменяющиеФормы = Новый Соответствие;

ДатаПереходаНа534 = '20101115';

#КонецЕсли
