Перем ПоследняяУслуга;

Процедура ВидУслугиПриИзменении(Элемент)
	
	Если ПоследняяУслуга <> Элемент.Значение Тогда
		СброситьДополнительныйПараметр();
	КонецЕсли;
	ПоследняяУслуга = Элемент.Значение;
	УправлениеЭУ();
	
КонецПроцедуры

Процедура СброситьДополнительныйПараметр()
	
	Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
		ДополнительныйПараметр = 1;
	Иначе
		ДополнительныйПараметр = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	Если ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Верх;
	ИначеЕсли ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельДополнительныеПараметры.ТекущаяСтраница = ЭлементыФормы.ПанельДополнительныеПараметры.Страницы.ПредставлениеВыпискиОперацийИзКарточки;
	ИначеЕсли ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельДополнительныеПараметры.ТекущаяСтраница = ЭлементыФормы.ПанельДополнительныеПараметры.Страницы.ФильтрПоВиду;
	ИначеЕсли ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОбИсполненииОбязанностейПоУплате Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Нет;
	ИначеЕсли ВидУслуги = Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом Тогда
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельДополнительныеПараметры.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	ЭлементыФормы.ЗапрашиваемыеНалоги.Доступность = (ВидУслуги <> Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности
													И ВидУслуги <> Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом);
	
	Если ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Если ЭлементыФормы.ВидУслуги.ДоступныеЗначения.Количество() = 0 Тогда
			ЭлементыФормы.ВидУслуги.ДоступныеЗначения.Добавить(Перечисления.ВидыУслугПриИОН.ПредставлениеАктовСверкиРасчетов);
			ЭлементыФормы.ВидУслуги.ДоступныеЗначения.Добавить(Перечисления.ВидыУслугПриИОН.ПредставлениеВыпискиОперацийИзКарточкиРасчетыСБюджетом);
			ЭлементыФормы.ВидУслуги.ДоступныеЗначения.Добавить(Перечисления.ВидыУслугПриИОН.ПредставлениеПеречняБухгалтерскойИНалоговойОтчетности);
			ЭлементыФормы.ВидУслуги.ДоступныеЗначения.Добавить(Перечисления.ВидыУслугПриИОН.ПредставлениеСправкиОСостоянииРасчетовСБюджетом);
		КонецЕсли;
		Если ЭлементыФормы.ФорматОтвета.ДоступныеЗначения.Количество() = 0 Тогда
			ЭлементыФормы.ФорматОтвета.ДоступныеЗначения.Добавить(Перечисления.ФорматОтветаНаЗапросИОН.RTF);
			ЭлементыФормы.ФорматОтвета.ДоступныеЗначения.Добавить(Перечисления.ФорматОтветаНаЗапросИОН.XML);
			ЭлементыФормы.ФорматОтвета.ДоступныеЗначения.Добавить(Перечисления.ФорматОтветаНаЗапросИОН.XLS);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			
			УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
			ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
			
			ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
			Если ЗначениеЗаполнено(ОргПоУмолчанию)
			И КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена().Найти(ОргПоУмолчанию) <> Неопределено
			И ((ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
			ИЛИ (НЕ ЗначениеЗаполнено(Организация) И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию)))) Тогда
				Организация = ОргПоУмолчанию;
			КонецЕсли;
			
			ПриИзмененииОрганизации();
			
			ФорматОтвета = Перечисления.ФорматОтветаНаЗапросИОН.XLS;
			ДатаОкончанияПериода = РабочаяДата;
			ДатаНачалаПериода = НачалоГода(ДатаОкончанияПериода);
			
			Если НЕ ЗначениеЗаполнено(ФорматЗапроса) Тогда
				ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПоследняяУслуга = ВидУслуги;
	
	// управляем панелью статуса
	УправлениеСтатусомИДоступностью();
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ДатаНачалаПериода, ?(ДатаОкончанияПериода = '0001-01-01', ДатаОкончанияПериода, КонецДня(ДатаОкончанияПериода)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	Если НастройкаПериода.Редактировать() Тогда
		ДатаНачалаПериода = НастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончанияПериода = НастройкаПериода.ПолучитьДатуОкончания();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапрашиваемыеНалогиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = ЭлементыФормы.ЗапрашиваемыеНалоги.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекДанные.КБК) Тогда
		Отказ = Истина;
		Предупреждение("Не задан КБК!");
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекДанные.ОКАТО) Тогда
		Отказ = Истина;
		Предупреждение("Не задан ОКАТО!");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ТекДанные.КБК)) <> 20 Тогда
		Отказ = Истина;
		Предупреждение("Длина КБК должна быть равна 20 символам!");
		Возврат;
	КонецЕсли;
	
	Если СтрДлина(СокрЛП(ТекДанные.ОКАТО)) <> 11 Тогда
		Отказ = Истина;
		Предупреждение("Длина кода ОКАТО должна быть равна 11 символам!");
		Возврат;
	КонецЕсли;
	
	Налоги = ЗапрашиваемыеНалоги.НайтиСтроки(Новый Структура("КБК, ОКАТО", ТекДанные.КБК, ТекДанные.ОКАТО));
	Инд = 0;
	Для Каждого Стр Из Налоги Цикл
		Если Стр = ЭлементыФормы.ЗапрашиваемыеНалоги.ТекущиеДанные Тогда
			Налоги.Удалить(Инд);
			Прервать;
		КонецЕсли;
		Инд = Инд + 1;
	КонецЦикла;
	Если Налоги.Количество() >= 1 Тогда
		Отказ = Истина;
		Предупреждение("В таблице уже присутствует налог с КБК = """ + ТекДанные.КБК + """ и ОКАТО = """ + ТекДанные.ОКАТО + """!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗапрашиваемыеНалогиКБКНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборКБК = КонтекстЭДО.ПолучитьФорму("ФормаВыбораКБК");
	ВыборКБК.мКБК = Элемент.Значение;
	РезультатВыбора = ВыборКБК.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСохранитьНаДиск(Кнопка)
	
	КонтекстЭДО.ВыгрузитьЗапросИОНВФайл(ЭтотОбъект);
	
КонецПроцедуры

Процедура ДействияФормыОтправить(Кнопка)
	
	Если Модифицированность и Вопрос("Для продолжения необходимо сохранить введеную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Попытка
		РезультатЗаписи = ЗаписатьВФорме();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	Если НЕ РезультатЗаписи Тогда
		Предупреждение("Во время сохранения произошли ошибки! Продолжение невозможно.");
		Возврат;
	КонецЕсли;
	
	Если ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		КонтекстЭДО.ОтправкаЗапросаНаИнформационноеОбслуживание535(Ссылка);
	Иначе
		КонтекстЭДО.ОтправкаЗапросаНаИнформационноеОбслуживание(Ссылка, 2);
	КонецЕсли;
	
	УправлениеСтатусомИДоступностью();
	
КонецПроцедуры

Процедура ДействияФормыПеречитать(Кнопка)
	
	Если НЕ Модифицированность ИЛИ ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Параметры запроса были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Прочитать();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РезультатВыбора = КонтекстЭДО.ВыбратьОрганизации(Элемент.Значение, Ложь);
	Если РезультатВыбора <> Неопределено Тогда
		Организация = РезультатВыбора;
		ПриИзмененииОрганизации();
		Если НЕ ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхОрганизаций = Новый СписокЗначений;
	СписокДоступныхОрганизаций.ЗагрузитьЗначения(КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена());
	РезультатВыбора = ВыбратьИзСписка(СписокДоступныхОрганизаций, Элемент, СписокДоступныхОрганизаций.НайтиПоЗначению(Организация));
	Если РезультатВыбора <> Неопределено Тогда
		Организация = РезультатВыбора.Значение;
		ПриИзмененииОрганизации();
		Если НЕ ПустаяСтрока(Номер) Тогда
			МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации()
	
	Получатель = Неопределено;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	//МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Опрос форм" И Параметр.Ключ = Ссылка Тогда
		Параметр.Форма = ЭтаФорма;
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Предмет") И Параметр.Предмет = Ссылка Тогда
		УправлениеСтатусомИДоступностью();
	ИначеЕсли ИмяСобытия = "Чтение запроса" Тогда
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") И Параметр = Ссылка Тогда
			УправлениеПанельюОтвета();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеСтатусомИДоступностью()
	
	ЭтоИзменяемоеСообщение = Ложь;
	ПрорисоватьСтатус(ЭтоИзменяемоеСообщение);
	
	// устанавливаем картинку заголовка
	УправлениеЭУОтправка();
	
	// управление панелью ответа
	УправлениеПанельюОтвета();
	
	// регулируем ТолькоПросмотр
	УстановитьТолькоПросмотр(НЕ ЭтоИзменяемоеСообщение);
	
КонецПроцедуры

Процедура УправлениеЭУОтправка()
	
	// регулируем видимость кнопки Отправить
	СтатусОтправки = КонтекстЭДО.ПолучитьСтатусОтправкиОбъекта(Ссылка);
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		
		КнопкаОтправить = ЭлементыФормы.ДействияФормы.Кнопки.Найти("Отправить");
		Если КнопкаОтправить <> Неопределено Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(КнопкаОтправить);
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительОтправить);
		КонецЕсли;
		
		ЭлементыФормы.ПанельНалогиНадпись.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	Иначе
		
		ЭлементыФормы.ПанельНалогиНадпись.Свертка = РежимСверткиЭлементаУправления.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеПанельюОтвета()
	
	Если ЭтоНовый() Тогда
		ОтветСуществует = Ложь;
	Иначе
		ОтветыНаЗапросИОН = КонтекстЭДО.ПолучитьОтветыНаЗапросИОН(Ссылка);
		ОтветСуществует = (ОтветыНаЗапросИОН.Количество() > 0);
	КонецЕсли;
	
	Если ОтветСуществует Тогда
		ЭлементыФормы.ПанельОтветНаЗапрос.Свертка = РежимСверткиЭлементаУправления.Нет;
		Если КонтекстЭДО.ЗапросыПоКоторымПолученыОтветы <> Неопределено И КонтекстЭДО.ЗапросыПоКоторымПолученыОтветы.Найти(Ссылка) <> Неопределено Тогда
			ЭлементыФормы.НадписьОтвет.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьОтвет.Шрифт, , , Истина);
			ЭлементыФормы.НадписьОтветПоказать.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьОтветПоказать.Шрифт, , , Истина);
			ЭлементыФормы.НадписьОтветВыгрузить.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьОтветВыгрузить.Шрифт, , , Истина);
		Иначе
			ЭлементыФормы.НадписьОтвет.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьОтвет.Шрифт, , , Ложь);
			ЭлементыФормы.НадписьОтветПоказать.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьОтветПоказать.Шрифт, , , Ложь);
			ЭлементыФормы.НадписьОтветВыгрузить.Шрифт = Новый Шрифт(ЭлементыФормы.НадписьОтветВыгрузить.Шрифт, , , Ложь);
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельОтветНаЗапрос.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры

Функция ПрорисоватьСтатус(ЭтоИзменяемоеСообщение = Ложь)
	
	Если ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
		Возврат ПрорисоватьСтатус535(ЭтоИзменяемоеСообщение);
	Иначе
		Возврат ПрорисоватьСтатус141(ЭтоИзменяемоеСообщение);
	КонецЕсли;
	
КонецФункции

Функция ПрорисоватьСтатус535(ЭтоИзменяемоеСообщение = Ложь)
	
	// если сообщение исходящее, то анализируем циклы обмена
	Если НЕ ЭтоНовый() Тогда
		ПоследнийЦиклОбмена = КонтекстЭДО.ПолучитьПоследнийЦиклОбмена(Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
		ЭтоИзменяемоеСообщение = Истина;
		ТекстПанели = "Запрос не отправлялся.";
		ИмеютсяОшибки = Ложь;
		ОтчетСдан = Ложь;
	Иначе
		
		// инициализируем результат
		ТекстПанели = "";
		ИмеютсяОшибки = Ложь;
		ОтчетСдан = Ложь;
		
		// получаем список сообщений
		СообщенияЦикла = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена);
		
		// выделяем основные типы сообщений
		СтрЗапросыНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ЗапросНП));
		СтрПодтвержденияЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО));
		СтрИзвещенияПодтверждениеНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО));
		СтрРезультатыПриемаЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО));
		СтрИзвещенияРезультатПриемаНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		СтрРезультатыОбработкиЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО));
		СтрИзвещенияРезультатОбработкиНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП));
		
		СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		Если СтрКритическиеОшибки.Количество() = 0 Тогда
			СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
		КонецЕсли;
		
		// находим первичное
		Если СтрЗапросыНП.Количество() = 0 Тогда
			
			ТекстПанели = "Запрос не отправлялся.";
			ИмеютсяОшибки = Ложь;
			ОтчетСдан = Ложь;
			
		Иначе
			
			СтрЗапросНП = СтрЗапросыНП[0];
			
			// получаем свойства для анализа
			СтатусПервичного = СтрЗапросНП.Статус;
			ДатаСозданияПервичного = СтрЗапросНП.Дата;
			ДатаОтправкиПервичного = СтрЗапросНП.ДатаТранспорта;
			
			// отражаем статус первичного в строке статуса
			Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
				ТекстПанели = "Конверт для отправки запроса создан";
				Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ", но не отправлен. ";
			Иначе
				
				ТекстПанели = "Запрос отправлен";
				Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ". ";
				
				ВсеВходящиеПолученыИПроанализированы = Истина;
				Если СтрПодтвержденияЗапросНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается подтверждение даты отправки. ";
				//ИначеЕсли СтрИзвещенияЗапросНО.Количество() = 0 Тогда
				//	ТекстПанели = ТекстПанели + "Ожидается извещение о получении. ";
				ИначеЕсли СтрРезультатыПриемаЗапросНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее результат приема. ";
				Иначе
					
					// определяем наиболее свежее сообщение с результатом приема
					ПоследнийРезультатПриема = Неопределено;
					Для Каждого СтрРезультатПриемаЗапросНО Из СтрРезультатыПриемаЗапросНО Цикл
						Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаЗапросНО.Дата > ПоследнийРезультатПриема.Дата Тогда
							ПоследнийРезультатПриема = СтрРезультатПриемаЗапросНО;
						КонецЕсли;
					КонецЦикла;
					
					// если результат приема отрицательный, то выводим соответствующее сообщение
					Если ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
						ТекстПанели = ТекстПанели + "Запрос не принят к обработке: получено уведомление об отказе. ";
						ИмеютсяОшибки = Истина;
					Иначе
						
						Если СтрРезультатыОбработкиЗапросНО.Количество() = 0 Тогда
							ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее ответ на запрос. ";
						Иначе
							ТекстПанели = ТекстПанели + "Получен ответ на запрос. ";
							ОтчетСдан = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
				ВсеПодтвержденияОтправлены = Истина;
				
				// проверяем наличие отправленных подтверждений на все подтверждения отправки
				Для Каждого СтрПодтверждениеЗапросНО Из СтрПодтвержденияЗапросНО Цикл
					СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
											Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,
											Перечисления.СтатусыПисем.Отправленное,
											СтрПодтверждениеЗапросНО.Ссылка);
					СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
					Если СтрПодтверждения.Количество() = 0 Тогда
						ВсеПодтвержденияОтправлены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// проверяем наличие отправленных подтверждений на все результаты приема
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатПриемаЗапросНО Из СтрРезультатыПриемаЗапросНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатПриемаЗапросНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// проверяем наличие отправленных подтверждений на все результаты обработки
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатОбработкиЗапросНО Из СтрРезультатыОбработкиЗапросНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатОбработкиЗапросНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// компилируем предупреждающий текст
				СтрОбратитеВнимание = Новый Массив;
				Если СтрКритическиеОшибки.Количество() > 0 Тогда
					СтрОбратитеВнимание.Добавить("имеются критические ошибки");
					ИмеютсяОшибки = Истина;
				КонецЕсли;
				Если НЕ ВсеПодтвержденияОтправлены Тогда
					СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
				КонецЕсли;
				
				Если СтрОбратитеВнимание.Количество() > 0 Тогда
					ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
					Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
						ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
						ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
					КонецЦикла;
					ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетСдан Тогда
		ЦветШрифта = Новый Цвет(0, 179, 16);
		ЦветРамки = ЦветШрифта;
	ИначеЕсли ИмеютсяОшибки Тогда
		ЦветШрифта = Новый Цвет(255, 0, 0);
		ЦветРамки = ЦветШрифта;
	Иначе
		ЦветШрифта = Новый Цвет(0, 0, 192);
		ЦветРамки = Новый Цвет(227, 227, 227);
	КонецЕсли;
	
	ЭлементыФормы.НадписьПанельСтатуса.Заголовок = СокрЛП(ТекстПанели);
	ЭлементыФормы.НадписьПанельСтатуса.ЦветТекста = ЦветШрифта;
	ЭлементыФормы.ПанельСтатусаВнутренняя.ЦветРамки = ЦветРамки;
	
КонецФункции

Функция ПрорисоватьСтатус141(ЭтоИзменяемоеСообщение = Ложь)
	
	// если сообщение исходящее, то анализируем циклы обмена
	Если НЕ ЭтоНовый() Тогда
		ПоследнийЦиклОбмена = КонтекстЭДО.ПолучитьПоследнийЦиклОбмена(Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
		ЭтоИзменяемоеСообщение = Истина;
		ТекстПанели = "Запрос не отправлялся.";
		ИмеютсяОшибки = Ложь;
		ОтчетСдан = Ложь;
	Иначе
		
		// инициализируем результат
		ТекстПанели = "";
		ИмеютсяОшибки = Ложь;
		ОтчетСдан = Ложь;
		
		// получаем список сообщений
		СообщенияЦикла = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена);
		
		// выделяем основные типы сообщений
		СтрЗапросыНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ЗапросИОН));
		СтрПодтвержденияЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН));
		СтрИзвещенияПодтверждениеНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН));
		СтрИзвещенияЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН));
		СтрРезультатыПриемаЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН));
		СтрИзвещенияРезультатПриемаНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН));
		СтрРезультатыОбработкиЗапросНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН));
		СтрИзвещенияРезультатОбработкиНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН));
		
		СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		Если СтрКритическиеОшибки.Количество() = 0 Тогда
			СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.КритическаяОшибка));
		КонецЕсли;
		
		// находим первичное
		Если СтрЗапросыНП.Количество() = 0 Тогда
			
			ТекстПанели = "Запрос не отправлялся.";
			ИмеютсяОшибки = Ложь;
			ОтчетСдан = Ложь;
			
		Иначе
			
			СтрЗапросНП = СтрЗапросыНП[0];
			
			// получаем свойства для анализа
			СтатусПервичного = СтрЗапросНП.Статус;
			ДатаСозданияПервичного = СтрЗапросНП.Дата;
			ДатаОтправкиПервичного = СтрЗапросНП.ДатаТранспорта;
			
			// отражаем статус первичного в строке статуса
			Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
				ТекстПанели = "Конверт для отправки запроса создан";
				Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ", но не отправлен. ";
			Иначе
				
				ТекстПанели = "Запрос отправлен";
				Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ". ";
				
				ВсеВходящиеПолученыИПроанализированы = Истина;
				Если СтрПодтвержденияЗапросНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается подтверждение даты отправки. ";
				//ИначеЕсли СтрИзвещенияЗапросНО.Количество() = 0 Тогда
				//	ТекстПанели = ТекстПанели + "Ожидается извещение о получении. ";
				ИначеЕсли СтрРезультатыПриемаЗапросНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее протокол приема. ";
				Иначе
					
					// определяем наиболее свежее сообщение с результатом приема
					ПоследнийРезультатПриема = Неопределено;
					Для Каждого СтрРезультатПриемаЗапросНО Из СтрРезультатыПриемаЗапросНО Цикл
						Если ПоследнийРезультатПриема = Неопределено ИЛИ СтрРезультатПриемаЗапросНО.Дата > ПоследнийРезультатПриема.Дата Тогда
							ПоследнийРезультатПриема = СтрРезультатПриемаЗапросНО;
						КонецЕсли;
					КонецЦикла;
					
					// если результат приема отрицательный, то выводим соответствующее сообщение
					Если ПоследнийРезультатПриема.ПротоколСОшибкой Тогда
						ТекстПанели = ТекстПанели + "Запрос не принят к обработке: получен отрицательный протокол. ";
						ИмеютсяОшибки = Истина;
					Иначе
						
						Если СтрРезультатыОбработкиЗапросНО.Количество() = 0 Тогда
							ТекстПанели = ТекстПанели + "Ожидается сообщение, содержащее ответ на запрос. ";
						Иначе
							ТекстПанели = ТекстПанели + "Получен ответ на запрос. ";
							ОтчетСдан = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
				ВсеПодтвержденияОтправлены = Истина;
				
				// проверяем наличие отправленных подтверждений на все подтверждения отправки
				Для Каждого СтрПодтверждениеЗапросНО Из СтрПодтвержденияЗапросНО Цикл
					СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
											Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН,
											Перечисления.СтатусыПисем.Отправленное,
											СтрПодтверждениеЗапросНО.Ссылка);
					СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
					Если СтрПодтверждения.Количество() = 0 Тогда
						ВсеПодтвержденияОтправлены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// проверяем наличие отправленных подтверждений на все результаты приема
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатПриемаЗапросНО Из СтрРезультатыПриемаЗапросНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатПриемаЗапросНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// проверяем наличие отправленных подтверждений на все результаты обработки
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатОбработкиЗапросНО Из СтрРезультатыОбработкиЗапросНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатОбработкиЗапросНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// компилируем предупреждающий текст
				СтрОбратитеВнимание = Новый Массив;
				Если СтрКритическиеОшибки.Количество() > 0 Тогда
					СтрОбратитеВнимание.Добавить("имеются критические ошибки");
					ИмеютсяОшибки = Истина;
				КонецЕсли;
				Если НЕ ВсеПодтвержденияОтправлены Тогда
					СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
				КонецЕсли;
				
				Если СтрОбратитеВнимание.Количество() > 0 Тогда
					ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
					Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
						ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
						ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
					КонецЦикла;
					ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтчетСдан Тогда
		ЦветШрифта = Новый Цвет(0, 179, 16);
		ЦветРамки = ЦветШрифта;
	ИначеЕсли ИмеютсяОшибки Тогда
		ЦветШрифта = Новый Цвет(255, 0, 0);
		ЦветРамки = ЦветШрифта;
	Иначе
		ЦветШрифта = Новый Цвет(0, 0, 192);
		ЦветРамки = Новый Цвет(227, 227, 227);
	КонецЕсли;
	
	ЭлементыФормы.НадписьПанельСтатуса.Заголовок = СокрЛП(ТекстПанели);
	ЭлементыФормы.НадписьПанельСтатуса.ЦветТекста = ЦветШрифта;
	ЭлементыФормы.ПанельСтатусаВнутренняя.ЦветРамки = ЦветРамки;
	
КонецФункции

Процедура УстановитьТолькоПросмотр(ПризнакТолькоПросмотр = Истина)
	
	ЭлементыФормы.КнопкаВыбораПериода.Доступность = НЕ ПризнакТолькоПросмотр;
	
	ТолькоПросмотр = ПризнакТолькоПросмотр;
	
КонецПроцедуры

Процедура НадписьОтветПоказатьНажатие(Элемент)
	
	КонтекстЭДО.ПоказатьОтветНаЗапросИОН(Ссылка);
	
КонецПроцедуры

Процедура НадписьОтветВыгрузитьНажатие(Элемент)
	
	ОтветыНаЗапрос = КонтекстЭДО.ПолучитьОтветыНаЗапросИОН(Ссылка, Истина);
	Если ОтветыНаЗапрос.Количество() = 0 Тогда
		Предупреждение("Ответ для сохранения не найден!");
		Возврат;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	КаталогВыгрузки = Диалог.Каталог + ?(Прав(Диалог.Каталог, 1) = "\", "", "\");
	
	Для Каждого СтрОтветНаЗапрос Из ОтветыНаЗапрос Цикл
		
		КороткоеИмяФайла = СтрОтветНаЗапрос.ИмяФайла;
		Попытка
			СтрОтветНаЗапрос.Данные.Получить().Записать(КаталогВыгрузки + КороткоеИмяФайла);
			Сообщить("Ответ на запрос сохранен в файл """ + КаталогВыгрузки + КороткоеИмяФайла + """.", СтатусСообщения.Информация);
		Исключение
			Сообщить("Не удалось сохранить ответ на запрос в файл """ + Диалог.ПолноеИмяФайла + """:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры
