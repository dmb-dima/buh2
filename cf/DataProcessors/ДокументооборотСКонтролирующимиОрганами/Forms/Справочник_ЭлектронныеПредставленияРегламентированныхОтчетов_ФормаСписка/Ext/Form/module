Перем СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора;
Перем СоответствиеИмениКнопкиПодменюОтправкаКодуДействия;
Перем ДатаКонцаПериодаОтбора;
Перем ВыбранныеЭлементы;

Процедура УправлениеОтборамиТаблицыЦикловОбмена()
		
	Если ЭлементыФормы.ДействияФормы.Кнопки.ОтображатьСписокЦикловОбмена.Пометка Тогда
		Если ЭлементыФормы.СправочникСписок.ТекущиеДанные <> Неопределено Тогда
			ЦиклыОбмена.Отбор.Предмет.Установить(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
		Иначе
			ЦиклыОбмена.Отбор.Предмет.Установить(Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.ПустаяСсылка());
		КонецЕсли;
	Иначе
		ЦиклыОбмена.Отбор.Предмет.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеПоказомТаблицыЦикловОбмена()
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.ОтображатьСписокЦикловОбмена.Пометка Тогда
		Если ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			Возврат;
		КонецЕсли;
		ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.СправочникСписок.Высота = ЭлементыФормы.СправочникСписок.Высота - ЭлементыФормы.РазделительЦиклыОбмена.Высота - ЭлементыФормы.ЦиклыОбмена.Высота;
		ЭлементыФормы.СправочникСписок.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбмена, ГраницаЭлементаУправления.Верх);
	Иначе
		Если ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			Возврат;
		КонецЕсли;
		ВерхняяКоордината = ЭлементыФормы.ЦиклыОбмена.Верх;
		ВысотаДоРасширения = ЭлементыФормы.ЦиклыОбмена.Высота;
		ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.ЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.СправочникСписок.Высота = ЭлементыФормы.СправочникСписок.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбмена.Высота;
		ЭлементыФормы.СправочникСписок.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьЗначения()
	
	// восстанавливаем признак показа панели с циклами обмена
	сохрОтображатьСписокЦикловОбмена = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ОтображатьСписокЦикловОбмена");
	ЭлементыФормы.ДействияФормы.Кнопки.ОтображатьСписокЦикловОбмена.Пометка = (сохрОтображатьСписокЦикловОбмена = Истина);
	
	// восстанавливаем признак дополнительного отбора по реквизитам отчета
	сохрДополнительныйОтбор = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ДополнительныйОтбор");
	ЭлементыФормы.ДействияФормы.Кнопки.ДополнительныйОтбор.Пометка = (сохрДополнительныйОтбор = Истина);
	
	// восстанавливаем вид дополнительного отбора
	СохрВидДополнительногоОтбора = ВосстановитьЗначение("ФормаСпискаСправочникаЭлектронныеПредставленияРегламентированныхОтчетов_ВидДополнительногоОтбора");
	Если СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора[СохрВидДополнительногоОтбора] = Неопределено Тогда
		Для Каждого ТипОтбора Из СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора Цикл
			ВидДополнительногоОтбора = ТипОтбора.Ключ;
			Прервать;
		КонецЦикла;
	Иначе
		ВидДополнительногоОтбора = СохрВидДополнительногоОтбора;
	КонецЕсли;
	
	// восстанавливаем вид отчета для отбора
	ВидОтчетаДляОтбора = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВидОтчетаДляОтбора");
	
	// восстанавливаем вид документа (П/К) для отбора
	сохрВидДокумента = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВидДокумента");
	ВидДокумента = ?(сохрВидДокумента = Неопределено, 0, 1);
	
	// восстанавливаем признак уточнения номера корректировки для отбора
	сохрУточнениеНомераКорректировки = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_УточнениеНомераКорректировки");
	УточнениеНомераКорректировки = (сохрУточнениеНомераКорректировки = Истина);
	
	// восстанавливааем номер корректировки для отбора
	сохрНомерКорректировки = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_НомерКорректировки");
	НомерКорректировки = ?(сохрНомерКорректировки = Неопределено, 1, сохрНомерКорректировки);
	
	// восстанавливаем период отбора
	сохрДатаКонцаПериодаОтбора = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ДатаКонцаПериодаОтбора");
	Если сохрДатаКонцаПериодаОтбора = Неопределено Тогда
		ДатаКонцаПериодаОтбора = ДобавитьМесяц(РабочаяДата, -1);
	Иначе
		ДатаКонцаПериодаОтбора = сохрДатаКонцаПериодаОтбора;
	КонецЕсли;
	ДатаКонцаПериодаОтбора = КонецМесяца(ДатаКонцаПериодаОтбора);
	
	// восстанавливаем организацию
	сохрОрганизация = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_Организация");
	Если ТипЗнч(сохрОрганизация) = Тип("Массив") Тогда
		Организация.ЗагрузитьЗначения(сохрОрганизация);
	ИначеЕсли ТипЗнч(сохрОрганизация) = Тип("СписокЗначений") Тогда
		Организация = сохрОрганизация;
	КонецЕсли;
	
	// восстанавливаем налоговый орган
	сохрНалоговыйОрган = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_НалоговыйОрган");
	Если сохрНалоговыйОрган <> Неопределено Тогда
		НалоговыйОрган = сохрНалоговыйОрган;
	КонецЕсли;
	
	// восстанавливаем признак группового режима
	сохрГрупповойРежим = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ГрупповойРежим");
	ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим.Пометка = (сохрГрупповойРежим = Истина);
	
	// восстанавливаем выбранные элементы
	сохрВыбранныеЭлементы = ВосстановитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВыбранныеЭлеенты");
	Если ТипЗнч(сохрВыбранныеЭлементы) = Тип("Массив") Тогда
		ВыбранныеЭлементы.ЗагрузитьЗначения(сохрВыбранныеЭлементы);
	ИначеЕсли ТипЗнч(сохрВыбранныеЭлементы) = Тип("СписокЗначений") Тогда
		ВыбранныеЭлементы = сохрВыбранныеЭлементы;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ РежимВыбора Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(0);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(0);
	КонецЕсли;
	
	ВосстановитьЗначения();

	// позволяем сортировать основной список по любому реквизиту
	Для Каждого ЭлементПорядка Из ЭлементыФормы.СправочникСписок.НастройкаПорядка Цикл
		ЭлементПорядка.Доступность = Истина;
	КонецЦикла;
	
	// отключаем стандартные отборы в основном списке
	Для Каждого Настройка Из ЭлементыФормы.СправочникСписок.НастройкаОтбора Цикл
		Настройка.Доступность = Ложь;
	КонецЦикла;
	
	// устанавливаем обязательные отборы в списке циклов обмена
	ЭлементыФормы.ЦиклыОбмена.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбмена.НастройкаОтбора.Тип.Доступность = Ложь;
	ЦиклыОбмена.Отбор.ПометкаУдаления.Установить(Ложь);
	
	ЦиклыОбмена.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбмена.Отбор.Тип.Значение.Очистить();
	ЦиклыОбмена.Отбор.Тип.Значение.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ЦиклыОбмена.Отбор.Тип.Значение.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ЦиклыОбмена.Отбор.Тип.Использование = Истина;
	
	// пытаемся установить организацию по умолчанию
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	Если ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям Тогда
		Организация.Очистить();
		Организация.Добавить(ОргПоУмолчанию);
		ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
	ИначеЕсли Организация.Количество() = 0 И УчетПоВсемОрганизациям И ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		Организация.Добавить(ОргПоУмолчанию);
	КонецЕсли;
	
	УправлениеПоказомТаблицыЦикловОбмена();
	УправлениеОтборамиТаблицыЦикловОбмена();
	
	УправлениеВидимостьюЭУПакетногоРежима();
	
	ПоказатьПериод();
	УправлениеЭУ();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура СправочникСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачала, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончания), "ФП=Истина"));
		ОформлениеСтроки.Ячейки.Версия.УстановитьТекст(РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ОформлениеСтроки.ДанныеСтроки.Версия));
		Если ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим.Пометка Тогда
			Флажок = (ВыбранныеЭлементы.НайтиПоЗначению(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено);
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Пометка.Флажок = Флажок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначения();
	
КонецПроцедуры

Процедура СохранитьЗначения()
	
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ОтображатьСписокЦикловОбмена", ЭлементыФормы.ДействияФормы.Кнопки.ОтображатьСписокЦикловОбмена.Пометка);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ДополнительныйОтбор", ЭлементыФормы.ДействияФормы.Кнопки.ДополнительныйОтбор.Пометка);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВидДополнительногоОтбора", ВидДополнительногоОтбора);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВидОтчетаДляОтбора", ВидОтчетаДляОтбора);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВидДокумента", ВидДокумента);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_УточнениеНомераКорректировки", УточнениеНомераКорректировки);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_НомерКорректировки", НомерКорректировки);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ДатаКонцаПериодаОтбора", ДатаКонцаПериодаОтбора);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_Организация", Организация);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_НалоговыйОрган", НалоговыйОрган);
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ГрупповойРежим", ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим.Пометка);
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим.Пометка Тогда
		сохрВыбранныеЭлементы = ВыбранныеЭлементы.ВыгрузитьЗначения();
	Иначе
		сохрВыбранныеЭлементы = Неопределено;
	КонецЕсли;
	СохранитьЗначение("ЭлектронныеПредставленияРегламентированныхОтчетов_ВыбранныеЭлеенты", сохрВыбранныеЭлементы);
	
КонецПроцедуры

Процедура ДействияФормыОтображатьСписокЦикловОбмена(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеПоказомТаблицыЦикловОбмена();
	УправлениеОтборамиТаблицыЦикловОбмена();
	
КонецПроцедуры

Процедура ЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	Возврат;
	
КонецПроцедуры

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	УправлениеОтборамиТаблицыЦикловОбмена();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ЭлементыФормы.ЦиклыОбмена.ОбновитьСтроки(Параметр.ЦиклОбмена);
	ИначеЕсли ИмяСобытия = "Опрос форм" И Параметр.Ключ = "Справочник_ЭлектронныеПредставленияРегламентированныхОтчетов_ФормаСписка" Тогда
		Параметр.Форма = ЭтаФорма;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	ЭлементыФормы.ПанельДополнительныйОтбор.Свертка = ?(ЭлементыФормы.ДействияФормы.Кнопки.ДополнительныйОтбор.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	Если ЭлементыФормы.ПанельДополнительныйОтбор.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
		ЭлементыФормы.ПанельЗначениеДополнительногоОтбора.ТекущаяСтраница = СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора[ВидДополнительногоОтбора];
		ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Свертка = ?(ВидДополнительногоОтбора = "По периоду отчета", РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	Иначе
		ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	ЭлементыФормы.ФлажокУточнениеНомераКорректировки.Доступность = (ВидДокумента = 1);
	ЭлементыФормы.НомерКорректировки.Доступность = УточнениеНомераКорректировки И (ВидДокумента = 1);
	
КонецПроцедуры

Процедура ДействияФормыДополнительныйОтбор(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеЭУ();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВидДополнительногоОтбораНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВидовОтбораЦикловОбмена = Новый СписокЗначений;
	Для Каждого ВидОтбора из СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора Цикл
		СписокВидовОтбораЦикловОбмена.Добавить(ВидОтбора.Ключ);
	КонецЦикла;
	РезультатВыбора = ВыбратьИзСписка(СписокВидовОтбораЦикловОбмена, , СписокВидовОтбораЦикловОбмена.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УправлениеЭУ();
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборы() Экспорт
	
	// управление отбором по организации
	СправочникСписок.Отбор.Организация.Использование = Ложь;
	Если Организация.Количество() <> 0 Тогда
		СправочникСписок.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
		СправочникСписок.Отбор.Организация.Значение = Организация;
		СправочникСписок.Отбор.Организация.Использование = Истина;
	КонецЕсли;
	
	// управление отбором по налоговому органу
	Если ЗначениеЗаполнено(НалоговыйОрган) Тогда
		СправочникСписок.Отбор.НалоговыйОрган.Установить(НалоговыйОрган);
	Иначе
		СправочникСписок.Отбор.НалоговыйОрган.Использование = Ложь;
	КонецЕсли;
	
	ДопОтборВключен = ЭлементыФормы.ДействияФормы.Кнопки.ДополнительныйОтбор.Пометка;
	
	// управление отбором по виду отчета
	Если ДопОтборВключен И ВидДополнительногоОтбора = "По виду отчета" И ЗначениеЗаполнено(ВидОтчетаДляОтбора) Тогда
		Если ВидОтчетаДляОтбора.ЭтоГруппа Тогда
			СправочникСписок.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.ВИерархии;
			СправочникСписок.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбора;
			СправочникСписок.Отбор.ВидОтчета.Использование = Истина;
		Иначе
			СправочникСписок.Отбор.ВидОтчета.Установить(ВидОтчетаДляОтбора);
		КонецЕсли;
	Иначе
		СправочникСписок.Отбор.ВидОтчета.Использование = Ложь;
	КонецЕсли;
	
	// управление отбором по периоду отчета
	Если ДопОтборВключен И ВидДополнительногоОтбора = "По периоду отчета" Тогда
		СправочникСписок.Отбор.ДатаОкончания.Установить(ДатаКонцаПериодаОтбора);
	Иначе
		СправочникСписок.Отбор.ДатаОкончания.Использование = Ложь;
	КонецЕсли;
	
	// управление отбором по виду документа
	Если ДопОтборВключен И ВидДополнительногоОтбора = "По виду документа" Тогда
		Если ВидДокумента = 0 Тогда
			СправочникСписок.Отбор.Версия.Установить(ВидДокумента);
		ИначеЕсли ВидДокумента = 1 И НЕ УточнениеНомераКорректировки Тогда
			СправочникСписок.Отбор.Версия.ВидСравнения = ВидСравнения.НеРавно;
			СправочникСписок.Отбор.Версия.Значение = 0;
			СправочникСписок.Отбор.Версия.Использование = Истина;
		Иначе
			СправочникСписок.Отбор.Версия.Установить(ВидДокумента * НомерКорректировки);
		КонецЕсли;
	Иначе
		СправочникСписок.Отбор.Версия.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидДополнительногоОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПереключательВидДокументаПриИзменении(Элемент)
	
	УправлениеЭУ();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ФлажокУточнениеНомераКорректировкиПриИзменении(Элемент)
	
	УправлениеЭУ();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура НадписьМесяцНажатие(Элемент)
	
	МесяцМинус1 = Число(Сред(Элемент.Имя, 13)) - 1;
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ПриИзмененииМесяца()
	
	Месяц = МесяцМинус1 + 1;
	ДатаКонцаПериодаОтбора = КонецМесяца(Дата(Год, Месяц, 1));
	УправлениеНадписямиМесяцев();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтбора);
	Для Сч = 0 По 11 Цикл
		Если Сч = Месяц - 1 Тогда
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет(0, 0, 255);
		Иначе
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтбора);
	МесяцМинус1 = Месяц(ДатаКонцаПериодаОтбора) - 1;
	УправлениеНадписямиМесяцев();

КонецПроцедуры

Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтбора = Дата(Год, Месяц(ДатаКонцаПериодаОтбора), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтбора), 1))));
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ПолосаРегулированияПериодаПриИзменении(Элемент)
	
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ВидОтчетаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбораОрганизаций", ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Организации.Наименование");
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка"));
	РезультатВыбора = ВыбратьИзСписка(СписокОрганизаций, Элемент, ?(Элемент.Значение.Количество() = 1, СписокОрганизаций.НайтиПоЗначению(Элемент.Значение.Получить(0).Значение), Неопределено));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение.Очистить();
		Элемент.Значение.Добавить(РезультатВыбора.Значение);
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Значение.Количество() = 1 Тогда
		Элемент.Значение.Получить(0).Значение.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура НалоговыйОрганПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ДействияФормыГрупповойРежим(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеВидимостьюЭУПакетногоРежима();
	
КонецПроцедуры

Процедура УправлениеВидимостьюЭУПакетногоРежима()
	
	ГрупповойРежим = ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим.Пометка;
	ЭлементыФормы.СправочникСписок.Колонки.Пометка.Видимость = ГрупповойРежим;
	Если ГрупповойРежим Тогда
		Если ЭлементыФормы.ДействияФормы.Кнопки.Найти("СнятьФлажкиУВсех") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИндексКнопкиПакетногоРежима = ЭлементыФормы.ДействияФормы.Кнопки.Индекс(ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим);
		НовКн = ЭлементыФормы.ДействияФормы.Кнопки.Вставить(ИндексКнопкиПакетногоРежима + 1, "СнятьФлажкиУВсех", ТипКнопкиКоманднойПанели.Действие, "Снять флажки у всех отчетов", Новый Действие("ДействияФормыСнятьФлажкиУВсех"));
		НовКн.Картинка = БиблиотекаКартинок.СнятьФлажки;
		НовКн.Подсказка = НовКн.Текст;
		НовКн = ЭлементыФормы.ДействияФормы.Кнопки.Вставить(ИндексКнопкиПакетногоРежима + 1, "УстановитьФлажкиУВсех", ТипКнопкиКоманднойПанели.Действие, "Установить флажки у всех отчетов", Новый Действие("ДействияФормыУстановитьФлажкиУВсех"));
		НовКн.Картинка = БиблиотекаКартинок.УстановитьФлажки;
		НовКн.Подсказка = НовКн.Текст;
	Иначе
		Кн = ЭлементыФормы.ДействияФормы.Кнопки.Найти("СнятьФлажкиУВсех");
		Если Кн <> Неопределено Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(Кн);
		КонецЕсли;
		Кн = ЭлементыФормы.ДействияФормы.Кнопки.Найти("УстановитьФлажкиУВсех");
		Если Кн <> Неопределено Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(Кн);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСнятьФлажкиУВсех(Кнопка)
	
	ВидимыеОтчеты = ВидимыйНаборЭлементов();
	КоличествоВыбранныхОтчетов = ВыбранныеЭлементы.Количество();
	Для Инд = 1 По КоличествоВыбранныхОтчетов Цикл
		ТекОтч = ВыбранныеЭлементы.Получить(КоличествоВыбранныхОтчетов - Инд).Значение;
		Если ВыбранныеЭлементы.НайтиПоЗначению(ТекОтч) <> Неопределено Тогда
			ВыбранныеЭлементы.Удалить(КоличествоВыбранныхОтчетов - Инд);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.СправочникСписок.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ДействияФормыУстановитьФлажкиУВсех(Кнопка)
	
	ВидимыеОтчеты = ВидимыйНаборЭлементов();
	Для Каждого Отч Из ВидимыеОтчеты Цикл
		Если ВыбранныеЭлементы.НайтиПоЗначению(Отч.Значение) = Неопределено Тогда
			ВыбранныеЭлементы.Добавить(Отч.Значение);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.СправочникСписок.ОбновитьСтроки();
	
КонецПроцедуры

Функция ВидимыйНаборЭлементов()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЭлектронныеПредставленияРегламентированныхОтчетов.Ссылка
	                      |ИЗ
	                      |	Справочник.ЭлектронныеПредставленияРегламентированныхОтчетов КАК ЭлектронныеПредставленияРегламентированныхОтчетов");
						  
	НомерУсловия = 1;
	Для Каждого ЭлементОтбора Из СправочникСписок.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда 
			Если НомерУсловия = 1 Тогда
				Префикс = Символы.ПС + "ГДЕ" + Символы.ПС + Символы.Таб;
			Иначе
				Префикс = Символы.ПС + Символы.Таб + "И ";
			КонецЕсли;
			НомерУсловия = НомерУсловия + 1;
			Запрос.Текст = Запрос.Текст + Префикс + "ЭлектронныеПредставленияРегламентированныхОтчетов." + ЭлементОтбора.Имя;
			ИмяПараметра = "парам" + ЭлементОтбора.Имя;
			Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				Запрос.Текст = Запрос.Текст + " = &" + ИмяПараметра;
			Иначе
				Запрос.Текст = Запрос.Текст + " В (&" + ИмяПараметра + ")";
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
						  |УПОРЯДОЧИТЬ ПО";
	
	Для Каждого НастройкаПорядка Из СправочникСписок.Порядок Цикл
		Запрос.Текст = Запрос.Текст + "
						  |	ЭлектронныеПредставленияРегламентированныхОтчетов." + НастройкаПорядка.Данные + " " + ?(НастройкаПорядка.Направление = НаправлениеСортировки.Возр, "ВОЗР", "УБЫВ") + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
						  | ЭлектронныеПредставленияРегламентированныхОтчетов.Ссылка";
	
	СписокВидимыхОтчетов = Новый СписокЗначений;
	СписокВидимыхОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВидимыхОтчетов;
	
КонецФункции

Процедура СправочникСписокПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Пометка" Тогда
		Если Элемент.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ВыбранныеЭлементы.НайтиПоЗначению(Элемент.ТекущиеДанные.Ссылка) = Неопределено Тогда
			ВыбранныеЭлементы.Добавить(Элемент.ТекущиеДанные.Ссылка);
		Иначе
			ВыбранныеЭлементы.Удалить(ВыбранныеЭлементы.НайтиПоЗначению(Элемент.ТекущиеДанные.Ссылка));
		КонецЕсли;
		Элемент.ОбновитьСтроки(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналОтчетовОтправка(Кнопка)
	
	Если ЭлементыФормы.ДействияФормы.Кнопки.ГрупповойРежим.Пометка Тогда
		ЭлементыДляПакетнойОбработки = ВыбранныйНаборЭлементов();
		Если ЭлементыДляПакетнойОбработки.Количество() = 0 И ЭлементыФормы.СправочникСписок.ТекущаяСтрока <> Неопределено Тогда
			ЭлементыДляПакетнойОбработки.Добавить(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ЭлементыДляПакетнойОбработки = Новый СписокЗначений;
		Если ЭлементыФормы.СправочникСписок.ТекущаяСтрока <> Неопределено Тогда
			ЭлементыДляПакетнойОбработки.Добавить(ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	КонтекстЭДО.ОтправкаРегламентированныхОтчетов(ЭлементыДляПакетнойОбработки.ВыгрузитьЗначения(), СоответствиеИмениКнопкиПодменюОтправкаКодуДействия[Кнопка.Имя]);
	
КонецПроцедуры

Функция ВыбранныйНаборЭлементов()
	
	ВидимыеЭлементы = ВидимыйНаборЭлементов();
	АктуальныйНаборЭлементов = Новый СписокЗначений;
	Для Каждого ВидимыйЭлемент Из ВидимыеЭлементы Цикл
		Если ВыбранныеЭлементы.НайтиПоЗначению(ВидимыйЭлемент.Значение) <> Неопределено Тогда
			АктуальныйНаборЭлементов.Добавить(ВидимыйЭлемент.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат АктуальныйНаборЭлементов;
	
КонецФункции

Процедура ДействияФормыЖурналОбмена(Кнопка)
	
	КонтекстЭДО.ПолучитьФорму("УправлениеОбменом").Открыть();
	
КонецПроцедуры

СправочникСписок.Колонки.Добавить("ДатаНачала");
СправочникСписок.Колонки.Добавить("ДатаОкончания");
СправочникСписок.Колонки.Добавить("Версия");

ЦиклыОбмена.Колонки.Добавить("Тип");
ЦиклыОбмена.Колонки.Добавить("УчетнаяЗапись");
ЦиклыОбмена.Колонки.Добавить("ФорматДокументооборота");

СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора = Новый Соответствие;
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По виду отчета", ЭлементыФормы.ПанельЗначениеДополнительногоОтбора.Страницы.ПоВидуОтчета);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По периоду отчета", ЭлементыФормы.ПанельЗначениеДополнительногоОтбора.Страницы.ПоПериодуОтчета);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По виду документа", ЭлементыФормы.ПанельЗначениеДополнительногоОтбора.Страницы.ПоВидуДокумента);

ВыбранныеЭлементы = Новый СписокЗначений;

СоответствиеИмениКнопкиПодменюОтправкаКодуДействия = Новый Соответствие;
СоответствиеИмениКнопкиПодменюОтправкаКодуДействия.Вставить("Подготовить", 0);
СоответствиеИмениКнопкиПодменюОтправкаКодуДействия.Вставить("ПодготовитьИПодписать", 1);
СоответствиеИмениКнопкиПодменюОтправкаКодуДействия.Вставить("Отправить", 2);
