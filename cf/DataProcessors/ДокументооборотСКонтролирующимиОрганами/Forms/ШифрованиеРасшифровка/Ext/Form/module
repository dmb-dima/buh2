Перем ЗеленыйШар;
Перем ЗеленыйШарНерасшифрованное;
Перем СерыйШар;
Перем ЗолотойШар;
Перем ЗолотойШарЗашифрованное;
Перем ИменаКолонокСообщений;
Перем СообщенияКШифрованиюРасшифровке;
Перем ВыбранныеСообщения;
Перем ТипыПервичныхСообщенийДляШифрования;
Перем ВозможныеТипыЦикловОбмена;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	РасшифроватьЗашифровать();
	
КонецПроцедуры

Процедура РасшифроватьЗашифровать()
	
	СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса = Новый Соответствие;
	СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса.Вставить(НаправлениеСортировки.Возр, "ВОЗР");
	СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса.Вставить(НаправлениеСортировки.Убыв, "УБЫВ");
	
	СтрокаПорядкаЦикловОбмена = "";
	Для Каждого ЭлементПорядка Из ЦиклыОбмена.Порядок Цикл
		СтрокаПорядкаЦикловОбмена = СтрокаПорядкаЦикловОбмена + ", ЗапросНижнегоУровня.ЦиклОбмена." + ЭлементПорядка.Данные + " " + СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса[ЭлементПорядка.Направление];
	КонецЦикла;
	СтрокаПорядкаЦикловОбмена = СтрокаПорядкаЦикловОбмена + ", ЗапросНижнегоУровня.ЦиклОбмена.Ссылка";
	
	Запрос = ИнициализироватьЗапросНижнегоУровня(Истина);
	Если Запрос = Неопределено Тогда
		Предупреждение("Нет сообщений для расшифровки!");
		Возврат;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
					|ИЗ (" + Запрос.Текст + ") КАК ЗапросНижнегоУровня
					|СГРУППИРОВАТЬ ПО ЗапросНижнегоУровня.Организация, ЗапросНижнегоУровня.ЦиклОбмена, ЗапросНижнегоУровня.ПорядокТипаСообщения, ЗапросНижнегоУровня.ТранспортноеСообщение, ЗапросНижнегоУровня.Статус
					|УПОРЯДОЧИТЬ ПО ЗапросНижнегоУровня.Организация" + СтрокаПорядкаЦикловОбмена + ", ЗапросНижнегоУровня.ПорядокТипаСообщения";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = 0;
	КоличествоНеобработанных = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбработкаПрерыванияПользователя();
		Если Выборка.Статус = Перечисления.СтатусыПисем.Полученное Тогда
			ОбъектСообщение = Выборка.ТранспортноеСообщение.ПолучитьОбъект();
			РезультатОперации = КонтекстЭДО.РасшифроватьТранспортноеСообщение(ОбъектСообщение);
		ИначеЕсли Выборка.Статус = Перечисления.СтатусыПисем.Исходящее Тогда
			РезультатОперации = КонтекстЭДО.СформироватьПакет(Выборка.ТранспортноеСообщение);
		Иначе
			Продолжить;
		КонецЕсли;
		ЭлементыФормы.ЦиклыОбмена.ОбновитьСтроки(Выборка.ЦиклОбмена);
		Если РезультатОперации Тогда
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Иначе
			КоличествоНеобработанных = КоличествоНеобработанных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОбработанных = 0 И КоличествоНеобработанных = 0 Тогда
		Предупреждение("Нет сообщений для расшифровки!");
	ИначеЕсли КоличествоНеобработанных = 0 Тогда
		Предупреждение("Обработка завершена.
						|Обработано сообщений: " + КоличествоОбработанных + ".");
	Иначе
		Предупреждение("Не удалось обработать " + КоличествоНеобработанных + " из " + (КоличествоОбработанных + КоличествоНеобработанных) + " сообщений.");
	КонецЕсли;
	ПриИзмененииДанных();
	
КонецПроцедуры

Функция ИнициализироватьЗапросНижнегоУровня(ДляОбработки)
	
	Если Организация.Количество() = 0 ИЛИ (НЕ ТребующиеРасшифровки И НЕ ТребующиеШифрования) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса1 = "";
	Если ТребующиеРасшифровки Тогда
		ТекстЗапроса1 = "	ТранспортныеКонтейнеры.ТранспортноеСообщение,
		                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена,
							  |	ТранспортныеКонтейнеры.ТранспортноеСообщение.Получатель КАК Организация,
							  |	ТранспортныеКонтейнеры.ТранспортноеСообщение.Тип.Порядок КАК ПорядокТипаСообщения,
							  |	ТранспортныеКонтейнеры.ТранспортноеСообщение.Статус КАК Статус
		                      |ИЗ
		                      |	РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |		ПО ТранспортныеКонтейнеры.ТранспортноеСообщение = СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение ЕСТЬ NULL
		                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.Статус = &СтатусПолученное
							  |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ПометкаУдаления = &БулевоЛожь
							  |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &БулевоЛожь
							  |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.Организация В (&Организации)";
		Если НеУчитыватьЗавершенные Тогда
			ТекстЗапроса1 = ТекстЗапроса1 + "					  
		                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия = &ПустаяДатаЗакрытия";
		КонецЕсли;						 
		Если ТипыЦикловОбмена = 1 Тогда					  
			ТекстЗапроса1 = ТекстЗапроса1 + "					  
		                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.Тип = &Тип";
			Запрос.УстановитьПараметр("Тип", ВидЦиклаОбмена);
		Иначе
			ТекстЗапроса1 = ТекстЗапроса1 + "					  
		                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена.Тип В (&ТипыЦикловОбмена)";
			Запрос.УстановитьПараметр("ТипыЦикловОбмена", ВозможныеТипыЦикловОбмена);
		КонецЕсли;
		Если ДляОбработки Тогда
			ТекстЗапроса1 = ТекстЗапроса1 + "					  
		                      |	И ТранспортныеКонтейнеры.ТранспортноеСообщение В (&парамСообщения)
							  |	И ТранспортныеКонтейнеры.ТранспортноеСообщение.ЦиклОбмена В (&парамЦиклыОбмена)";
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса2 = "";
	Если ТребующиеШифрования Тогда
		ТекстЗапроса2 = "	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение,
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена,
							  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.Организация КАК Организация,
							  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип.Порядок КАК ПорядокТипаСообщения,
							  |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Статус КАК Статус
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
		                      |		ПО СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = ТранспортныеКонтейнеры.ТранспортноеСообщение
		                      |ГДЕ
		                      |	ТранспортныеКонтейнеры.ТранспортноеСообщение ЕСТЬ NULL
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Статус = &СтатусИсходящее
							  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ПометкаУдаления = &БулевоЛожь
							  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.ПометкаУдаления = &БулевоЛожь
							  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.Организация В (&Организации)";
		Если ШифрованиеПервичных Тогда
			ТекстЗапроса2 = ТекстЗапроса2 + "					  
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипыСообщений)";
			Запрос.УстановитьПараметр("ТипыСообщений", ТипыПервичныхСообщенийДляШифрования);
		Иначе
			ТекстЗапроса2 = ТекстЗапроса2 + "					  
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип НЕ В (&ТипыСообщений)";
			Запрос.УстановитьПараметр("ТипыСообщений", ТипыПервичныхСообщенийДляШифрования);
		КонецЕсли;
		Если НеУчитыватьЗавершенные Тогда
			ТекстЗапроса2 = ТекстЗапроса2 + "					  
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.ДатаЗакрытия = &ПустаяДатаЗакрытия";
		КонецЕсли;						 
		Если ТипыЦикловОбмена = 1 Тогда					  
			ТекстЗапроса2 = ТекстЗапроса2 + "					  
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.Тип = &Тип";
			Запрос.УстановитьПараметр("Тип", ВидЦиклаОбмена);
		Иначе
			ТекстЗапроса2 = ТекстЗапроса2 + "					  
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена.Тип В (&ТипыЦикловОбмена)";
			Запрос.УстановитьПараметр("ТипыЦикловОбмена", ВозможныеТипыЦикловОбмена);
		КонецЕсли;
		Если ДляОбработки Тогда
			ТекстЗапроса2 = ТекстЗапроса2 + "					  
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение В (&парамСообщения)
							  |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена В (&парамЦиклыОбмена)";
		КонецЕсли;
	КонецЕсли;
	
	Если ДляОбработки Тогда
		ВыбратьРазрешенные = "ВЫБРАТЬ
						|";
	Иначе
		ВыбратьРазрешенные = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
						|";
	КонецЕсли;
	Если ПустаяСтрока(ТекстЗапроса1) Тогда
		ТекстЗапроса2 = ВыбратьРазрешенные + ТекстЗапроса2;
		Запрос.Текст = ТекстЗапроса2;
	ИначеЕсли ПустаяСтрока(ТекстЗапроса2) Тогда
		ТекстЗапроса1 = ВыбратьРазрешенные + ТекстЗапроса1;
		Запрос.Текст = ТекстЗапроса1;
	Иначе
		ТекстЗапроса1 = ВыбратьРазрешенные + ТекстЗапроса1;
		ТекстЗапроса2 = "ВЫБРАТЬ
						|" + ТекстЗапроса2;
		Запрос.Текст = ТекстЗапроса1 + "
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|" + ТекстЗапроса2;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("БулевоЛожь", Ложь);
	Запрос.УстановитьПараметр("ПустаяДатаЗакрытия", КонтекстЭДО.ПолучитьПустуюДатуЗавершенияЦиклаОбмена());
	Запрос.УстановитьПараметр("Организации", Организация);
	Запрос.УстановитьПараметр("СтатусПолученное", Перечисления.СтатусыПисем.Полученное);
	Запрос.УстановитьПараметр("СтатусИсходящее", Перечисления.СтатусыПисем.Исходящее);
	
	Если ДляОбработки Тогда
		Запрос.УстановитьПараметр("парамСообщения", ВыбранныеСообщения);
		Запрос.УстановитьПараметр("парамЦиклыОбмена", ЦиклыОбмена.Отбор.Ссылка.Значение);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьЗапросПоЦикламОбмена(ДляОбработки = Ложь)
	
	ЗапросНижнегоУровня = ИнициализироватьЗапросНижнегоУровня(ДляОбработки);
	Если ЗапросНижнегоУровня = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЗапросНижнегоУровня.Выполнить();
	
КонецФункции

Процедура СформироватьМассивОбрабатываемыхСообщений()
	
	ЦиклыОбмена.Отбор.Ссылка.Значение.Очистить();
	РезультатВыполненияЗапросаПоЦикламОбмена = ВыполнитьЗапросПоЦикламОбмена();
	Если РезультатВыполненияЗапросаПоЦикламОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицаРезультат = РезультатВыполненияЗапросапоЦикламОбмена.Выгрузить();
	ТаблицаСообщения = ТаблицаРезультат.Скопировать(, "ТранспортноеСообщение");
	ТаблицаСообщения.Свернуть("ТранспортноеСообщение");
	СообщенияКШифрованиюРасшифровке = ТаблицаСообщения.ВыгрузитьКолонку("ТранспортноеСообщение");
	
	ТаблицаРезультат.Свернуть("ЦиклОбмена");
	ЦиклыОбмена.Отбор.Ссылка.Значение.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку("ЦиклОбмена"));
	
	// для первого раза пометим все возможные сообщения
	Если ТипЗнч(ВыбранныеСообщения) <> Тип("Массив") Тогда
		ВремСписок = Новый СписокЗначений;
		ВремСписок.ЗагрузитьЗначения(СообщенияКШифрованиюРасшифровке);
		ВыбранныеСообщения = ВремСписок.ВыгрузитьЗначения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Для Каждого ИмяКолонки Из ИменаКолонокСообщений Цикл
			ТекЯчейка = ОформлениеСтроки.Ячейки[ИмяКолонки];
			ТекДанные = ОформлениеСтроки.ДанныеСтроки;
			Если ТекЯчейка.ОтображатьКартинку Тогда
				ТекКартинка = ТекЯчейка.Картинка;
				Если ТребующиеШифрования Тогда
					ТипТекСообщенияВПервичных = (ИмяКолонки = "ПервичноеСообщение"
												И (ТекДанные.Тип = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность
												ИЛИ ТекДанные.Тип = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ
												ИЛИ ТекДанные.Тип = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание
												ИЛИ ТекДанные.Тип = Перечисления.ТипыЦикловОбмена.ОбращениеНП
												ИЛИ ТекДанные.Тип = Перечисления.ТипыЦикловОбмена.ИОН
												ИЛИ ТекДанные.Тип = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика));
					СледуетОтображатьФлажокДляВходящих = ?(ШифрованиеПервичных, ТипТекСообщенияВПервичных, НЕ ТипТекСообщенияВПервичных);
				Иначе
					СледуетОтображатьФлажокДляВходящих = Ложь;
				КонецЕсли;
				Если (ТребующиеРасшифровки И ТекКартинка = ЗеленыйШарНерасшифрованное)
				ИЛИ (СледуетОтображатьФлажокДляВходящих И ТекКартинка = ЗолотойШар) Тогда
					ТекЯчейка.ОтображатьФлажок = Истина;
					ТекЯчейка.ТолькоПросмотр = Ложь;
					ТекЯчейка.Флажок = (ВыбранныеСообщения <> Неопределено И ВыбранныеСообщения.Найти(ТекЯчейка.Значение) <> Неопределено);
				ИначеЕсли ТекКартинка = СерыйШар Тогда
					ТекЯчейка.ОтображатьФлажок = Ложь;
					ТекЯчейка.ТолькоПросмотр = Истина;
					ТекЯчейка.Флажок = Ложь;
				Иначе
					ТекЯчейка.ОтображатьФлажок = Ложь;
					ТекЯчейка.ТолькоПросмотр = Истина;
					ТекЯчейка.Флажок = Истина;
				КонецЕсли;
			Иначе
				ТекЯчейка.ОтображатьФлажок = Ложь;
				ТекЯчейка.ТолькоПросмотр = Истина;
				ТекЯчейка.Флажок = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	УправлениеДанными();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	ЭлементыФормы.ФлажокШифрованиеПервичных.Доступность = ТребующиеШифрования;
	ЭлементыФормы.ВидЦиклаОбмена.Доступность = (ТипыЦикловОбмена = 1);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выполнить.Доступность = (Организация.Количество() <> 0 И (ТребующиеРасшифровки ИЛИ ТребующиеШифрования));
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура УправлениеДанными()
	
	СформироватьМассивОбрабатываемыхСообщений();
	
КонецПроцедуры

Процедура ЦиклыОбменаПриИзмененииФлажка(Элемент, Колонка)
	
	ОформлениеСтроки = ЭлементыФормы.ЦиклыОбмена.ОформлениеСтроки(ЭлементыФормы.ЦиклыОбмена.ТекущаяСтрока);
	ЗначениеИзЯчейки = ОформлениеСтроки.Ячейки[Колонка.Имя].Значение;
	ИндексЭлемента = ВыбранныеСообщения.Найти(ЗначениеИзЯчейки);
	Если ИндексЭлемента <> Неопределено Тогда
		ВыбранныеСообщения.Удалить(ИндексЭлемента);
	Иначе
		ВыбранныеСообщения.Добавить(ЗначениеИзЯчейки);
	КонецЕсли;
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЦиклыОбмена.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбмена.Отбор.Ссылка.Использование = Истина;
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Если Организация.Количество() = 0 Тогда
		ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
		ИЛИ (Организация.Количество() = 0 И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
			Организация.Очистить();
			Организация.Добавить(ОргПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.Организация.СписокВыбора.ЗагрузитьЗначения(КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена());
	
	// устанавливаем ограничение по возможным типам цикла обмена для поля ввода
	Для Каждого ВозможныйТипЦиклаОбмена Из ВозможныеТипыЦикловОбмена Цикл
		ЭлементыФормы.ВидЦиклаОбмена.ДоступныеЗначения.Добавить(ВозможныйТипЦиклаОбмена);
	КонецЦикла;
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ПереключательВсеЦиклыОбменаПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ВидЦиклаОбменаПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ФлажокНеУчитыватьЗавершенныеПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ФлажокТребующиеРасшифровкиПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ФлажокТребующиеШифрованияПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаУстановитьФлажкиУВсех(Кнопка)
	
	ВремСписок = Новый СписокЗначений;
	ВремСписок.ЗагрузитьЗначения(СообщенияКШифрованиюРасшифровке);
	ВыбранныеСообщения = ВремСписок.ВыгрузитьЗначения();
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаСнятьФлажкиУВсех(Кнопка)
	
	ВыбранныеСообщения.Очистить();
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаОбновить(Кнопка)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РезультатВыбора = КонтекстЭДО.ВыбратьОрганизации(Элемент.Значение.ВыгрузитьЗначения(), Истина);
	Если РезультатВыбора <> Неопределено Тогда
		Организация.ЗагрузитьЗначения(РезультатВыбора);
		ПриИзмененииДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхОрганизаций = Новый СписокЗначений;
	СписокДоступныхОрганизаций.ЗагрузитьЗначения(КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена());
	РезультатВыбора = ВыбратьИзСписка(СписокДоступныхОрганизаций, Элемент, ?(Организация.Количество() <> 0, СписокДоступныхОрганизаций.НайтиПоЗначению(Организация[0].Значение), Неопределено));
	Если РезультатВыбора <> Неопределено Тогда
		Организация.Очистить();
		Организация.Добавить(РезультатВыбора.Значение);
		ПриИзмененииДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ФлажокШифрованиеПервичныхПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ПриИзмененииДанных();
	КонецЕсли;
	
КонецПроцедуры

ЦиклыОбмена.Колонки.Добавить("Организация");
ЦиклыОбмена.Колонки.Добавить("ДатаНачалаПериода");
ЦиклыОбмена.Колонки.Добавить("ДатаОкончанияПериода");
ЦиклыОбмена.Колонки.Добавить("ДатаЗакрытия");
ЦиклыОбмена.Колонки.Добавить("ВидДокумента");
ЦиклыОбмена.Колонки.Добавить("Тип");
ЦиклыОбмена.Колонки.Добавить("УчетнаяЗапись");
ЦиклыОбмена.Колонки.Добавить("ФорматДокументооборота");

ИменаКолонокСообщений = Новый Массив;
ИменаКолонокСообщений.Добавить("ПервичноеСообщение");
ИменаКолонокСообщений.Добавить("ПодтверждениеОтправки");
ИменаКолонокСообщений.Добавить("ОтветНаПодтверждениеОтправки");
ИменаКолонокСообщений.Добавить("ПодтверждениеДоставки");
ИменаКолонокСообщений.Добавить("ПротоколПроверки");
ИменаКолонокСообщений.Добавить("ПодтверждениеНаПротоколПроверки");
ИменаКолонокСообщений.Добавить("ОтветНаЗапрос");
ИменаКолонокСообщений.Добавить("ОтветНаОтветНаЗапрос");

ЗеленыйШар					= БиблиотекаКартинок.ЗеленыйШар;
СерыйШар					= БиблиотекаКартинок.СерыйШар;
ЗолотойШар					= БиблиотекаКартинок.ЗолотойШар;
ЗеленыйШарНерасшифрованное	= БиблиотекаКартинок.ЗеленыйШарСЗамком;
ЗолотойШарЗашифрованное		= БиблиотекаКартинок.ЗолотойШарСЗамком;

СообщенияКШифрованиюРасшифровке = Новый Массив;

ТипыПервичныхСообщенийДляШифрования = Новый Массив;
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика);
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
ТипыПервичныхСообщенийДляШифрования.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);

ВозможныеТипыЦикловОбмена = Новый Массив;
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ПисьмоНО);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.Рассылка);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ИОН);
