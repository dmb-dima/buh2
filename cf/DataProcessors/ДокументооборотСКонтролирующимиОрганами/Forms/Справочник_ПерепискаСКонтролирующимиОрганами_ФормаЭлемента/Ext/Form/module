Перем ТипНалоговыйОрган;
Перем ТипОрганПФР;
Перем ОписаниеТиповОрганизация;
Перем ВременныйКаталог;

////////////////////////////////////////////////////////////////////////////////

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = ЭтоНовый();
	
	// инициализация реквизитов сообщения
	Если ЭтоНовый Тогда
		
		Если Статус = Перечисления.СтатусыПисем.Полученное Тогда
			Предупреждение("Копирование входящих сообщений запрещено!");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Статус = Перечисления.СтатусыПисем.Сохраненное;
		ДатаСообщения = ТекущаяДата();
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
		
			Если НЕ ЗначениеЗаполнено(Тип) Тогда
			
				СписокВыбораПолучателя = Новый СписокЗначений;
				СписокВыбораПолучателя.Добавить(Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС, "Инспекция ФНС", , БиблиотекаКартинок.НДФЛ);
				СписокВыбораПолучателя.Добавить(Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР, "Отделение ПФР", , БиблиотекаКартинок.ПФР16);
				
				РезультатВыбора = СписокВыбораПолучателя.ВыбратьЭлемент("Выберите тип получателя");
				Если РезультатВыбора = Неопределено Тогда
					Отказ = Истина;
					Возврат;
				Иначе
					Тип = РезультатВыбора.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Отправитель) Тогда
				УстановитьПолучателяПоУмолчанию();
			КонецЕсли;
			
		Иначе
			
			ИдентификаторОснования = Неопределено;
			ДатаОтправки = Неопределено;
			
			ВложенияОснования = КонтекстЭДО.ПолучитьВложенияНеформализованногоДокумента(ПараметрОбъектКопирования.Ссылка, , Истина);
			Если ВложенияОснования.Количество() > 0 Тогда
				
				// удостоверяемся в необходимости копирования
				Ответ = Вопрос("Новое письмо будет записано перед показом.
								|Продолжить?", РежимДиалогаВопрос.ДаНет);
				Если Ответ <> КодВозвратаДиалога.Да Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				// записываем
				Если НЕ ЗаписатьВФорме() Тогда
					Отказ = Истина;
					Возврат;
				КонецЕсли;
				
				// копируем вложения основания
				Для Каждого ВложениеОснования Из ВложенияОснования Цикл
					КонтекстЭДО.ДобавитьВложенияПисьма(Ссылка, ВложениеОснования.ИмяФайла, ВложениеОснования.Данные, ВложениеОснования.Тип, ВложениеОснования.Размер);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// устанавливаем ограничения типов для полей Отправитель и Получатель
	Если Статус = Перечисления.СтатусыПисем.Сохраненное ИЛИ Статус = Перечисления.СтатусыПисем.Исходящее ИЛИ Статус = Перечисления.СтатусыПисем.Отправленное Тогда
		
		ЭлементыФормы.Отправитель.ОграничениеТипа = ОписаниеТиповОрганизация;
		ЭлементыФормы.Получатель.ОграничениеТипа = ОписаниеТипаВторогоУчастникаДокументооборота();
		
		Если ЭтоНовый Тогда
			Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
				ЭлементыФормы.Отправитель.Значение = ЭлементыФормы.Отправитель.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.Отправитель.Значение);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Получатель) Тогда
				ЭлементыФормы.Получатель.Значение = ЭлементыФормы.Получатель.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.Получатель.Значение);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Полученное Тогда
		
		ЭлементыФормы.Отправитель.ОграничениеТипа = ОписаниеТипаВторогоУчастникаДокументооборота();
		ЭлементыФормы.Получатель.ОграничениеТипа = ОписаниеТиповОрганизация;
		
		Если ЭтоНовый Тогда
			Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
				ЭлементыФормы.Отправитель.Значение = ЭлементыФормы.Отправитель.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.Отправитель.Значение);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(Получатель) Тогда
				ЭлементыФормы.Получатель.Значение = ЭлементыФормы.Получатель.ОграничениеТипа.ПривестиЗначение(ЭлементыФормы.Получатель.Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// регулируем доступность и показ подменю Отправка
	Если Статус = Перечисления.СтатусыПисем.Полученное Тогда
		
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Отправить);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительОтправка);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Скопировать);
		
	Иначе
		
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Ответить);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительОтветить);
		
	КонецЕсли;
	
	// устанавливаем возможность сортировки
	Для Каждого НастройкаПорядка Из ЭлементыФормы.Вложения.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	
	// устанавливаем картинку
	ЭлементыФормы.ПолеКартинкиСтатуса.Картинка = ?(Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР, БиблиотекаКартинок.ПФР16, БиблиотекаКартинок.НДФЛ);
	
	// устанавливаем заголовок
	Заголовок = ?(Статус = Перечисления.СтатусыПисем.Полученное, "Входящее сообщение", "Исходящее сообщение");
	
	// управляем панелью статуса
	УправлениеСтатусомИДоступностью();
	
	// устанавливаем отбор в таблице вложений
	УстановитьОтборВТаблицеВложений();
	
	// прорисовываем заголовок закладки Вложения
	ПрорисоватьЗаголовокЗакладкиВложения();
	
	// устанавливаем активный ЭУ
	Если НЕ ТолькоПросмотр Тогда
		Если ЗначениеЗаполнено(Наименование) Тогда
			ТекущийЭлемент = ЭлементыФормы.Содержание;
		Иначе
			ТекущийЭлемент = ЭлементыФормы.Наименование;
		КонецЕсли;
	КонецЕсли;
	
	Если Статус = Перечисления.СтатусыПисем.Полученное Тогда
		КонтекстЭДО.ПометитьПисьмоКакПрочитанное(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотр(ПризнакТолькоПросмотр = Истина)
	
	ТолькоПросмотр = ПризнакТолькоПросмотр;
	
	ЭлементыФормы.Вложения.ТолькоПросмотр = ПризнакТолькоПросмотр;
	
	ВидСвертки = ?(ПризнакТолькоПросмотр, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет);
	ЭлементыФормы.ПанельОбратитеВнимание.Свертка = ВидСвертки;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	УстановитьОтборВТаблицеВложений();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	// очищаем временный каталог
	ОчиститьВременныйКаталог();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельВложенияВыгрузить(Кнопка)
	
	ВыгрузитьВложения();
	
КонецПроцедуры

Процедура КоманднаяПанельВложенияОткрыть(Кнопка)
	
	ОткрытьВложение();
	
КонецПроцедуры

Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ДобавитьВложения();
	
КонецПроцедуры

Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	УдалитьВложения();
	
КонецПроцедуры

Процедура ДействияФормыОтправить(Кнопка)
	
	Если (ЭтоНовый() ИЛИ Модифицированность()) и Вопрос("Для продолжения необходимо сохранить введеную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РезультатЗаписи = ЗаписатьВФорме();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	
	Если НЕ РезультатЗаписи Тогда
		Предупреждение("Во время сохранения произошли ошибки! Продолжение невозможно.");
		Возврат;
	КонецЕсли;
	
	Если Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС Тогда
		КонтекстЭДО.ОтправкаНеформализованногоДокументаВФНС(Ссылка);
	ИначеЕсли Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
		КонтекстЭДО.ОтправкаНеформализованногоДокументаВПФР(Ссылка);
	КонецЕсли;
	
	УправлениеСтатусомИДоступностью();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Функция ОписаниеТипаВторогоУчастникаДокументооборота()
	
	МассивТипов = Новый Массив;
	Если Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС Тогда
		МассивТипов.Добавить(ТипНалоговыйОрган);
	ИначеЕсли Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
		МассивТипов.Добавить(ТипОрганПФР);
	Иначе
		МассивТипов.Добавить(ТипНалоговыйОрган);
		МассивТипов.Добавить(ТипОрганПФР);
	КонецЕсли;
	Возврат Новый ОписаниеТипов(МассивТипов);
	
КонецФункции

Процедура УправлениеСтатусомИДоступностью()
	
	ЭтоИзменяемоеСообщение = Ложь;
	ТекстСтатуса = ПолучитьТекстСтатуса(ЭтоИзменяемоеСообщение);
	
	// устанавливаем текст статуса
	ЭлементыФормы.НадписьПанельСтатуса.Заголовок = ТекстСтатуса;
	
	// устанавливаем картинку заголовка
	УправлениеЭУОтправка();
	
	// регулируем ТолькоПросмотр
	УстановитьТолькоПросмотр(НЕ ЭтоИзменяемоеСообщение);
	
КонецПроцедуры

Процедура УправлениеЭУОтправка()
	
	Если ЭтоНовый() Тогда
		КартинкаЗаголовка = БиблиотекаКартинок.РегламентированныйОтчетВКонверте;
	ИначеЕсли Статус = Перечисления.СтатусыПисем.Полученное Тогда
		КартинкаЗаголовка = БиблиотекаКартинок.ПолученноеПисьмо;
	Иначе
		СтатусОтправки = КонтекстЭДО.ПолучитьСтатусОтправкиОбъекта(Ссылка);
		Если НЕ ЗначениеЗаполнено(СтатусОтправки) ИЛИ СтатусОтправки = Перечисления.СтатусыОтправки.ВКонверте Тогда
			КартинкаЗаголовка = БиблиотекаКартинок.РегламентированныйОтчетВКонверте;
		ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
			КартинкаЗаголовка = БиблиотекаКартинок.РегламентированныйОтчетОтправлен;
		ИначеЕсли СтатусОтправки = Перечисления.СтатусыОтправки.Доставлен Тогда
			КартинкаЗаголовка = БиблиотекаКартинок.ПисьмоПодтверждениеПолучено;
		КонецЕсли;
	КонецЕсли;
	
	// регулируем видимость кнопки Отправить
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		КнопкаОтправить = ЭлементыФормы.ДействияФормы.Кнопки.Найти("Отправить");
		Если КнопкаОтправить <> Неопределено Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(КнопкаОтправить);
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьТекстСтатуса(ЭтоИзменяемоеСообщение = Ложь)
	
	// если сообщение входящее, то выводим дату получения
	Если Статус = Перечисления.СтатусыПисем.Полученное Тогда
		
		ТекСтатус = "Сообщение получено " + Формат(ДатаСообщения, "ДЛФ=DDT");
		Если ЗначениеЗаполнено(ДатаОтправки) Тогда
			Если НачалоДня(ДатаСообщения) = НачалоДня(ДатаОтправки) Тогда
				ТекСтатус = ТекСтатус + " (отправлено в " + Формат(ДатаОтправки, "ДЛФ=T") + ")";
			Иначе
				ТекСтатус = ТекСтатус + " (отправлено " + Формат(ДатаОтправки, "ДЛФ=DDT") + ")";
			КонецЕсли;
		КонецЕсли;
		ТекСтатус = ТекСтатус + ".";
		
		Возврат ТекСтатус;
		
	КонецЕсли;
	
	ТекСтатус = "Сообщение создано " + Формат(ДатаСообщения, "ДЛФ=DDT");
	
	// если сообщение исходящее, то анализируем циклы обмена
	Если НЕ ЭтоНовый() Тогда
		ПоследнийЦиклОбмена = КонтекстЭДО.ПолучитьПоследнийЦиклОбмена(Ссылка);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПоследнийЦиклОбмена) Тогда
		ЭтоИзменяемоеСообщение = Истина;
		Возврат ТекСтатус + ".";
	КонецЕсли;
	
	// получаем список сообщений
	СообщенияЦикла = КонтекстЭДО.ПолучитьСообщенияЦиклаОбмена(ПоследнийЦиклОбмена);
	
	Если Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
		
		// устанавливаем картинку в заголовке
		
		// выделяем основные типы сообщений
		СтрПервичныеСообщения = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееПФР));
		СтрКвитанции = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПисьмоИсходящееКвитанцияПФР));
		
		// анализируем первичное
		Если СтрПервичныеСообщения.Количество() = 0 Тогда
			Возврат ТекСтатус + ".";
		КонецЕсли;
		
		СтрПервичноеСообщение = СтрПервичныеСообщения[0];
		СтатусПервичного = СтрПервичноеСообщение.Статус;
		ДатаСозданияПервичного = СтрПервичноеСообщение.Дата;
		ДатаОтправкиПервичного = СтрПервичноеСообщение.ДатаТранспорта;
		
		Если СтатусПервичного = Перечисления.СтатусыПисем.Исходящее Тогда
			ТекСтатус = ТекСтатус + "." + " Конверт для отправки письма создан";
			Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
				ТекСтатус = ТекСтатус + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
			КонецЕсли;
			ТекСтатус = ТекСтатус + ", но не отправлен.";
			Возврат ТекСтатус;
		ИначеЕсли СтатусПервичного = Перечисления.СтатусыПисем.Отправленное Тогда
			ФорматДаты = ?(НачалоДня(ДатаСообщения) = НачалоДня(ДатаОтправкиПервичного), "ДЛФ=T", "ДЛФ=DDT");
			ТекСтатус = ТекСтатус + ", отправлено " + Формат(ДатаОтправкиПервичного, ФорматДаты) + ".";
		КонецЕсли;
		
		// анализируем подтверждение
		Если СтрКвитанции.Количество() = 0 Тогда
			Возврат ТекСтатус + " Ожидается квитанция.";
		КонецЕсли;
		
		СтрКвитанция = СтрКвитанции[0];
		ДатаПолученияКвитанции = СтрКвитанция.ДатаТранспорта;
		Если НЕ ЗначениеЗаполнено(ДатаПолученияКвитанции) Тогда
			Возврат ТекСтатус + " Ожидается квитанция.";
		Иначе
			Возврат ТекСтатус + " Квитанция получена " + Формат(ДатаПолученияКвитанции, "ДЛФ=DDT") + ".";
		КонецЕсли;
		
	Иначе // если переписка с ФНС
		
		// выделяем основные типы сообщений
		СтрОбращенияНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ОбращениеНП));
		СтрПодтвержденияОбращениеНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО));
		СтрИзвещенияПодтверждениеНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП));
		СтрИзвещенияОбращениеНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО));
		СтрРезультатыПриемаОбращениеНО = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО));
		СтрИзвещенияРезультатПриемаНП = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП));
		
		СтрКритическиеОшибки = СообщенияЦикла.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыТранспортныхСообщений.УведомлениеОбОшибкеФНС));
		
		// находим первичное
		Если СтрОбращенияНП.Количество() = 0 Тогда
			Возврат ТекСтатус + ".";
		Иначе
			
			СтрОбращениеНП = СтрОбращенияНП[0];
			
			// получаем свойства для анализа
			СтатусПервичного = СтрОбращениеНП.Статус;
			ДатаСозданияПервичного = СтрОбращениеНП.Дата;
			ДатаОтправкиПервичного = СтрОбращениеНП.ДатаТранспорта;
			
			// отражаем статус первичного в строке статуса
			Если СтатусПервичного <> Перечисления.СтатусыПисем.Отправленное Тогда
				ТекстПанели = "Конверт для отправки письма создан";
				Если ЗначениеЗаполнено(ДатаСозданияПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаСозданияПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ", но не отправлен. ";
			Иначе
				
				ТекстПанели = "Письмо отправлено";
				Если ЗначениеЗаполнено(ДатаОтправкиПервичного) Тогда
					ТекстПанели = ТекстПанели + " " + Формат(ДатаОтправкиПервичного, "ДЛФ=DDT");
				КонецЕсли;
				ТекстПанели = ТекстПанели + ". ";
				
				ВсеВходящиеПолученыИПроанализированы = Истина;
				Если СтрПодтвержденияОбращениеНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается подтверждение даты отправки. ";
				ИначеЕсли СтрИзвещенияОбращениеНО.Количество() = 0 Тогда
					ТекстПанели = ТекстПанели + "Ожидается извещение о получении. ";
				ИначеЕсли СтрРезультатыПриемаОбращениеНО.Количество() <> 0 Тогда
					ТекстПанели = ТекстПанели + "Письмо не принято: получено уведомление об отказе. ";
				Иначе
					ТекстПанели = ТекстПанели + "Письмо доставлено. ";
				КонецЕсли;
				
				// формируем предупреждение о наличии неотправленных подтверждений, при необходимости
				ВсеПодтвержденияОтправлены = Истина;
				
				// проверяем наличие отправленных подтверждений на все подтверждения отправки
				Для Каждого СтрПодтверждениеОбращениеНО Из СтрПодтвержденияОбращениеНО Цикл
					СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
											Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП,
											Перечисления.СтатусыПисем.Отправленное,
											СтрПодтверждениеОбращениеНО.Ссылка);
					СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
					Если СтрПодтверждения.Количество() = 0 Тогда
						ВсеПодтвержденияОтправлены = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				// проверяем наличие отправленных подтверждений на все результаты приема
				Если ВсеПодтвержденияОтправлены Тогда
					Для Каждого СтрРезультатПриемаОбращениеНО Из СтрРезультатыПриемаОбращениеНО Цикл
						СтруктураПоиска = Новый Структура("Тип, Статус, Основание",
												Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП,
												Перечисления.СтатусыПисем.Отправленное,
												СтрРезультатПриемаОбращениеНО.Ссылка);
						СтрПодтверждения = СообщенияЦикла.НайтиСтроки(СтруктураПоиска);
						Если СтрПодтверждения.Количество() = 0 Тогда
							ВсеПодтвержденияОтправлены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// компилируем предупреждающий текст
				СтрОбратитеВнимание = Новый Массив;
				Если СтрКритическиеОшибки.Количество() > 0 Тогда
					СтрОбратитеВнимание.Добавить("имеются критические ошибки");
				КонецЕсли;
				Если НЕ ВсеПодтвержденияОтправлены Тогда
					СтрОбратитеВнимание.Добавить("не все подтверждения отправлены");
				КонецЕсли;
				
				Если СтрОбратитеВнимание.Количество() > 0 Тогда
					ТекстОбратитеВнимание = СтрОбратитеВнимание[0];
					Для Инд = 1 По СтрОбратитеВнимание.Количество() - 1 Цикл
						ТекСтрОбратитеВнимание = СтрОбратитеВнимание[Инд];
						ТекстОбратитеВнимание = ТекстОбратитеВнимание + ?(Инд = СтрОбратитеВнимание.Количество() - 1, " и ", ", ") + ТекСтрОбратитеВнимание;
					КонецЦикла;
					ТекстПанели = ТекстПанели + "Обратите внимание, " + ТекстОбратитеВнимание + ". ";
				КонецЕсли;
				
			КонецЕсли;
			
			Возврат ТекстПанели;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура УстановитьОтборВТаблицеВложений()
	
	Вложения.Отбор.НеформализованныйДокумент.Установить(Ссылка);
	
КонецПроцедуры

Процедура ДобавитьВложения()
	
	Если ЭтоНовый() Тогда
		Если Вопрос("Для продолжения необходимо сохранить письмо." + Символы.ПС + "Продолжить с сохранением?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.МножественныйВыбор = Истина;
	Диалог.ПредварительныйПросмотр = Истина;
	Если Диалог.Выбрать() Тогда
		
		// составляем массив с объектами Файл
		МассивФайлов = Новый Массив;
		Для Каждого ЭлФайл Из Диалог.ВыбранныеФайлы Цикл
			МассивФайлов.Добавить(Новый Файл(ЭлФайл));
		КонецЦикла;
		
		// проверяем на пересечение имен с уже имеющимися
		Если ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов) Тогда
			Ответ = Вопрос("Среди выбранных файлов присутствует такие, имена которых пересекаются с уже имеющимися вложениями.
							|Продолжить действие с заменой имеющихся вложений на выбранные с аналогичными именами?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// последовательно загружаем в ИБ
		Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
			ЗагрузитьВложение(ВыбранныйФайл);
			Вложения.Обновить();
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьВложения()
	
	// получаем массив с именами выгружаемых вложений
	СтрВложения = ВыбранныеВложения();
	Если СтрВложения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// вводим каталог
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Заголовок = "Выберите каталог";
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	КаталогСохранения = Диалог.Каталог + ?(Прав(Диалог.Каталог, 1) = "\", "", "\");
	
	// проверяем, есть ли в выбранном каталоге файлы, которые будут перезаписаны
	Если КонтекстЭДО.ВКаталогеПрисутствуютФайлыСУказаннымиИменами(КаталогСохранения, СтрВложения) Тогда
		Ответ = Вопрос("В выбранным каталоге присутствуют файлы с именами выгружаемых вложений.
						|Продолжить с заменой файлов в каталоге на вложения с аналогичными именами?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// выгружаем вложения
	ВложенияСДанными = КонтекстЭДО.ПолучитьВложения(Ссылка, СтрВложения);
	Для Каждого СтрВложение Из ВложенияСДанными Цикл
		Попытка
			СтрВложение.Данные.Получить().Записать(КаталогСохранения + СтрВложение.ИмяФайла);
		Исключение
			Сообщить("Не удалось выгрузить вложение """ + СтрВложение.ИмяФайла + """:
					|" + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ВыбранныеВложения()
	
	ИменаФайлов = Новый Массив;
	
	// проверяем, выбраны ли строки
	ВыделенныеСтроки = ЭлементыФормы.Вложения.ВыделенныеСтроки;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ИменаФайлов.Добавить(ВыделеннаяСтрока.ИмяФайла);
	КонецЦикла;
	
	// если текущая строка определена, то добавляем ее
	Если ЭлементыФормы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ИменаФайлов.Добавить(ЭлементыФормы.Вложения.ТекущиеДанные.ИмяФайла);
	КонецЕсли;
	
	Возврат ИменаФайлов;
	
КонецФункции

Процедура УдалитьВложения()
	
	// проверяем, выбраны ли строки
	ВыделенныеСтроки = ЭлементыФормы.Вложения.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Предупреждение("Выберите строки для удаления!");
		Возврат;
	КонецЕсли;
	
	// формируем массив имен вложений к удалению
	ИменаВложений = Новый Массив;
	Для Каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		ИменаВложений.Добавить(ВыделеннаяСтрока.ИмяФайла);
	КонецЦикла;
	
	// если текущая строка определена, то добавляем ее
	Если ЭлементыФормы.Вложения.ТекущаяСтрока <> Неопределено Тогда
		ИмяФайлаТекущейСтроки = ЭлементыФормы.Вложения.ТекущиеДанные.ИмяФайла;
		Если ИменаВложений.Найти(ИмяФайлаТекущейСтроки) = Неопределено Тогда
			ИменаВложений.Добавить(ИмяФайлаТекущейСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ТекстВопроса = "Удалить " + ?(ИменаВложений.Количество() = 1, "вложение", "вложения") + "?";
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// удаляем выбранные вложения
	МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
	Для Каждого ИмяВложения Из ИменаВложений Цикл
		Состояние("Удаление вложения """ + ИмяВложения + """...");
		МенеджерЗаписи.НеформализованныйДокумент = Ссылка;
		МенеджерЗаписи.ИмяФайла = ИмяВложения;
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
	Вложения.Обновить();
	
	ПрорисоватьЗаголовокЗакладкиВложения();
	
КонецПроцедуры

Функция ЗагрузитьВложение(ОбъектФайл)
	
	Состояние("Загрузка вложения из файла """ + ОбъектФайл.ПолноеИмя + """ ...");
	
	МенеджерЗаписи = РегистрыСведений.ВложенияНеформализованныхДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.НеформализованныйДокумент = Ссылка;
	МенеджерЗаписи.ИмяФайла = ОбъектФайл.Имя;
	МенеджерЗаписи.Данные = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ОбъектФайл.ПолноеИмя));
	МенеджерЗаписи.Тип = ОпределитьТипФайлаВложения(ОбъектФайл);
	МенеджерЗаписи.Размер = ОбъектФайл.Размер();
	МенеджерЗаписи.Записать(Истина);
	
КонецФункции

Процедура ОткрытьВложение()
	
	ТекДанные = ЭлементыФормы.Вложения.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасширениеФайла = ВыделитьРасширениеИзИмениФайла(ТекДанные.ИмяФайла);
	Если РасширениеФайла = "txt" Тогда
		ПоказатьТекстовоеВложение(ТекДанные);
	Иначе
		ПоказатьПроизвольноеВложение(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

Функция ВложенияСПодобнымиИменамиУжеИмеются(МассивФайлов)
	
	МассивИменФайлов = Новый Массив;
	Для Каждого ЭлФайл Из МассивФайлов Цикл
		МассивИменФайлов.Добавить(ЭлФайл.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВложенияНеформализованныхДокументов.ИмяФайла КАК ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.ВложенияНеформализованныхДокументов КАК ВложенияНеформализованныхДокументов
	                      |ГДЕ
	                      |	ВложенияНеформализованныхДокументов.НеформализованныйДокумент = &НеформализованныйДокумент
	                      |	И ВложенияНеформализованныхДокументов.ИмяФайла В(&ИмяФайла)");
	Запрос.УстановитьПараметр("НеформализованныйДокумент", Ссылка);
	Запрос.УстановитьПараметр("ИмяФайла", МассивИменФайлов);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ОпределитьТипФайлаВложения(ОбъектФайл)
	
	РасширениеФайла = ОбъектФайл.Расширение;
	
	Если РасширениеФайла = ".txt" Тогда
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ТекстовыйДокумент;
	ИначеЕсли РасширениеФайла = ".doc" Тогда
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ДокументMicrosoftWord;
	ИначеЕсли РасширениеФайла = ".xls" Тогда
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ДокументMicrosoftExcel;
	Иначе
		ТипФайлаВложения = Перечисления.ТипыВложенийНеформализованныхДокументовНалогоплательщика.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ТипФайлаВложения;
	
КонецФункции

Процедура ПоказатьТекстовоеВложение(ТекДанные)
	
	// получаем вложение
	СтрВложения = КонтекстЭДО.ПолучитьВложения(Ссылка, ТекДанные.ИмяФайла);
	Если СтрВложения.Количество() = 0 Тогда
		Предупреждение("Вложение с именем """ + ТекДанные.ИмяФайла + """ не обнаружено.");
		Возврат;
	КонецЕсли;
	СтрВложение = СтрВложения[0];
	
	// сохраняем вложение на диск
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	СтрВложение.Данные.Получить().Записать(ИмяВременногоФайла);
	
	// считываем при помощи ЧтениеТекста, чтобы автоматически распозналась кодировка UTF? или ANSI
	ОбъектЧтение = Новый ЧтениеТекста(ИмяВременногоФайла);
	СтрТекст = ОбъектЧтение.Прочитать();
	ОбъектЧтение.Закрыть();
	
	// удаляем временный файл
	УдалитьФайлы(ИмяВременногоФайла);
	
	// выводим на экран
	Текст = Новый ТекстовыйДокумент;
	Текст.УстановитьТекст(СтрТекст);
	Текст.Показать(ТекДанные.ИмяФайла, ТекДанные.ИмяФайла);
	
КонецПроцедуры

Процедура ПоказатьПроизвольноеВложение(ТекДанные)
	
	// получаем вложение
	СтрВложения = КонтекстЭДО.ПолучитьВложения(Ссылка, ТекДанные.ИмяФайла);
	Если СтрВложения.Количество() = 0 Тогда
		Предупреждение("Вложение с именем """ + ТекДанные.ИмяФайла + """ не обнаружено.");
		Возврат;
	КонецЕсли;
	ТекДанные = СтрВложения[0];
	
	// создаем временный каталог
	ВременныйКаталог = СоздатьВременныйКаталог();
	
	// сохраняем вложение на диск
	ТекДанные.Данные.Получить().Записать(ВременныйКаталог + ТекДанные.ИмяФайла);
	
	// запускаем приложение
	ЗапуститьПриложение(ВременныйКаталог + ТекДанные.ИмяФайла);
	
КонецПроцедуры

Функция СоздатьВременныйКаталог()
	
	Если ЗначениеЗаполнено(ВременныйКаталог) Тогда
		Возврат ВременныйКаталог;
	КонецЕсли;
	
	ИмяКаталога = ПолучитьИмяВременногоФайла() + "\";
	СоздатьКаталог(ИмяКаталога);
	Возврат ИмяКаталога;
	
КонецФункции

Функция ВыделитьРасширениеИзИмениФайла(ИмяФайла)
	
	ДлинаИмени = СтрДлина(ИмяФайла);
	Для Инд = 1 По ДлинаИмени Цикл
		ТекИнд = ДлинаИмени - Инд + 1;
		ТекСимв = Сред(ИмяФайла, ТекИнд, 1);
		Если ТекСимв = "." Тогда
			Возврат нрег(СокрЛП(Сред(ИмяФайла, ТекИнд + 1)));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ОчиститьВременныйКаталог()
	
	Если НЕ ЗначениеЗаполнено(ВременныйКаталог) Тогда
		Возврат;
	КонецЕсли;
	
	ФайлыВременнногоКаталога = НайтиФайлы(ВременныйКаталог, "*.*");
	Для Каждого ФайлВременногоКаталога Из ФайлыВременнногоКаталога Цикл
		УдалитьВременныйФайл(ФайлВременногоКаталога.ПолноеИмя);
	КонецЦикла;
	
	УдалитьВременныйФайл(ВременныйКаталог);
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ПолноеИмяФайла)
	
	Попытка
		УдалитьФайлы(ПолноеИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Опрос форм" И Параметр.Ключ = Ссылка Тогда
		Параметр.Форма = ЭтаФорма;
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Предмет") И КонтекстЭДО.ОтчетЯвляетсяПредметом(Параметр.Предмет, Ссылка) Тогда
		УправлениеСтатусомИДоступностью();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОтветить(Кнопка)
	
	Если ЭтоНовый() тогда
		
		Ответ = Вопрос("Перед записью ", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			РезультатЗаписи = ЗаписатьВФорме();
		Исключение
			РезультатЗаписи = Ложь;
		КонецПопытки;
		
		Если НЕ РезультатЗаписи Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПисьмоОтвет = КонтекстЭДО.СоздатьОтветНаПисьмо(Ссылка);
	Если ПисьмоОтвет <> Неопределено Тогда
		ПисьмоОтвет.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВложенияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПрорисоватьЗаголовокЗакладкиВложения();
	
КонецПроцедуры

Процедура ПрорисоватьЗаголовокЗакладкиВложения()
	
	ЧислоВложений = ПолучитьЧислоВложений();
	ЭлементыФормы.ОсновнаяПанель.Страницы.Вложения.Заголовок = "Вложения (" + Формат(ЧислоВложений, "ЧН=; ЧГ=") + ")";
	
КонецПроцедуры

Функция ПолучитьЧислоВложений()
	
	Если ЭтоНовый() Тогда
		Возврат 0;
	КонецЕсли;
	
	ВложенияПисьма = КонтекстЭДО.ПолучитьВложенияНеформализованногоДокумента(Ссылка);
	Возврат ВложенияПисьма.Количество();
	
КонецФункции

Процедура ВложенияПослеУдаления(Элемент)
	
	ПрорисоватьЗаголовокЗакладкиВложения();
	
КонецПроцедуры

Процедура ОтправительПриИзменении(Элемент)
	
	УстановитьПолучателяПоУмолчанию();
	
КонецПроцедуры

Процедура УстановитьПолучателяПоУмолчанию()
	
	Если Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
		Если Статус = Перечисления.СтатусыПисем.Исходящее ИЛИ Статус = Перечисления.СтатусыПисем.Сохраненное Тогда
			Если ЗначениеЗаполнено(Отправитель) И НЕ ЗначениеЗаполнено(Получатель) Тогда
				Получатель = КонтекстЭДО.ОпределитьОрганПФРОрганизации(Отправитель);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

ТипОрганизация = Тип("СправочникСсылка.Организации");

ТипыОрганизация = Новый Массив;
ТипыОрганизация.Добавить(ТипОрганизация);

ТипНалоговыйОрган = Тип("СправочникСсылка.НалоговыеОрганы");
ТипОрганПФР = Тип("СправочникСсылка.ОрганыПФР");

ОписаниеТиповОрганизация = Новый ОписаниеТипов(ТипыОрганизация);
