Перем ЗначенияСертификатов;
Перем ТекущийПользователь;
Перем АдминистраторУчетнойЗаписи;

Функция ПроверитьПараметрыДоступа()
	
	Почта = КонтекстЭДО.СоздатьОбъектДляРаботыСПочтой();
	Если Почта = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Почта.АдресСервераSMTP = СерверSMTP;
	Почта.ПортSMTP = ПортSMTP;
	Если ТребуетсяSMTPАутентификация Тогда
		Почта.ПользовательSMTP = ИмяПользователяSMTP;
		Почта.ПарольSMTP = ПарольSMTP;
	КонецЕсли;
	Почта.АдресСервераPOP3 = СерверPOP3;
	Почта.ПортPOP3 = ПортPOP3;
	Почта.Пользователь = ИмяПользователяPOP3;
	Почта.Пароль = ПарольPOP3;
	Почта.ВремяОжидания = ?(ЗначениеЗаполнено(СерверДокументооборота.ДлительностьОжиданияСервера), СерверДокументооборота.ДлительностьОжиданияСервера, 60);
	
	Попытка
		Почта.Подключиться();
		Почта.Отключиться();
	Исключение
		Сообщить("При проверке настроек учетной записи произошли ошибки!", СтатусСообщения.Важное);
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура КнопкаПроверитьНастройкиУчетнойЗаписиНажатие(Элемент)
	
	Если ПроверитьПараметрыДоступа() Тогда
		Предупреждение("Проверка параметров доступа успешно пройдена.");	
	Иначе
		Предупреждение("Проверка параметров доступа не пройдена!");
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеДоступностьюНастроекSMTP()
	
	ЭлементыФормы.ИмяПользователяSMTP.АвтоВыборНезаполненного = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ИмяПользователяSMTP.АвтоОтметкаНезаполненного = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ПарольSMTP.АвтоВыборНезаполненного = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ПарольSMTP.АвтоОтметкаНезаполненного = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ИмяПользователяSMTP.Доступность = ТребуетсяSMTPАутентификация;
	ЭлементыФормы.ПарольSMTP.Доступность = ТребуетсяSMTPАутентификация;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
	
	ИнициализацияТаблицыНастроекПользователей();
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		
		ПортPOP3 = 110;
		ПортSMTP = 25;
		
		Если НЕ ЗначениеЗаполнено(РежимАвтонастройки) Тогда
			РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Включена;
			ИспользоватьСервисОнлайнПроверкиОтчетов = Истина;
		ИначеЕсли РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Включена
		ИЛИ РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.ВключенаВТихомРежиме Тогда
			РезультатНастройки = КонтекстЭДО.АвтонастройкаНовойУчетнойЗаписи(ЭтотОбъект);
			Если РезультатНастройки = Ложь Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьФорму();
	
	Если Метаданные.Роли.Найти("ПравоГлавногоБухгалтера") <> Неопределено Тогда
		АдминистраторУчетнойЗаписи = РольДоступна("ПравоГлавногоБухгалтера") ИЛИ РольДоступна("ПолныеПрава");
	Иначе
		АдминистраторУчетнойЗаписи = РольДоступна("ПолныеПрава");
	КонецЕсли;
	ЭлементыФормы.Пользователи.Колонки.Пометка.ТолькоПросмотр = НЕ АдминистраторУчетнойЗаписи;
	
КонецПроцедуры

Процедура ОбновитьФорму()
	
	ЗначенияСертификатов = Новый Соответствие;
	ЗначенияСертификатов.Вставить(ЭлементыФормы.СертификатРуководителя, СертификатРуководителя);
	ЗначенияСертификатов.Вставить(ЭлементыФормы.СертификатГлавногоБухгалтера, СертификатГлавногоБухгалтера);
	ЗначенияСертификатов.Вставить(ЭлементыФормы.СертификатДляШифрования, СертификатДляШифрования);
	
	ЭлементыФормы.ИдентификаторСпецоператора.Доступность = НЕ ОбменНапрямую;
	
	Для Каждого ЗначениеСертификата Из ЗначенияСертификатов Цикл
		КонтекстЭДО.ОтобразитьСертификатВПолеВвода(ЗначениеСертификата.Ключ, ЗначениеСертификата.Значение);
	КонецЦикла;
	
	ОбновитьНадписьПараметрАвтообмена();
	Если ПредназначенаДляДокументооборотаСФНС И ПредназначенаДляДокументооборотаСПФР Тогда
		Назначение = 2;
		ЭлементыФормы.ПанельНалоговыйОрган.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельСертификатГлавногоБухгалтера.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельИдентификацияАбонента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ОбменНапрямую.Доступность = Ложь;
	ИначеЕсли НЕ ПредназначенаДляДокументооборотаСФНС И ПредназначенаДляДокументооборотаСПФР Тогда
		Назначение = 0;
		ЭлементыФормы.ПанельНалоговыйОрган.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельСертификатГлавногоБухгалтера.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельИдентификацияАбонента.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ОбменНапрямую.Доступность = Ложь;
	ИначеЕсли ПредназначенаДляДокументооборотаСФНС И НЕ ПредназначенаДляДокументооборотаСПФР Тогда
		Назначение = 1;
		ЭлементыФормы.ПанельНалоговыйОрган.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельСертификатГлавногоБухгалтера.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельИдентификацияАбонента.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ОбменНапрямую.Доступность = Истина;
	Иначе
		Назначение = -1;
		ЭлементыФормы.ПанельНалоговыйОрган.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельСертификатГлавногоБухгалтера.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельИдентификацияАбонента.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ОбменНапрямую.Доступность = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ПанельАвтонастройка.Доступность = НЕ ОбменНапрямую;
	
	УправлениеДоступностьюНастроекSMTP();
	
КонецПроцедуры

Процедура ОбновитьНадписьПараметрАвтообмена()
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		ЭлементыФормы.НадписьИнтервалАвтообмена.Заголовок = "отключен";
	Иначе
		ИнтервалАвтообмена = КонтекстЭДО.ПолучитьИнтервалАвтообмена(Ссылка);
		Если ИнтервалАвтообмена = 0 Тогда
			ЭлементыФормы.НадписьИнтервалАвтообмена.Заголовок = "отключен";
		Иначе
			ЭлементыФормы.НадписьИнтервалАвтообмена.Заголовок = "каждые " + ИнтервалАвтообмена + " мин.";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТребуетсяSMTPАутентификацияПриИзменении(Элемент)
	
	УправлениеДоступностьюНастроекSMTP();
	Если ТребуетсяSMTPАутентификация И НЕ ПустаяСтрока(ИмяПользователяPOP3) И ПустаяСтрока(ИмяПользователяSMTP) И ПустаяСтрока(ПарольSMTP)
	И Вопрос("Параметры авторизации SMTP-сервера совпадают с параметрами авторизации POP3-сервера?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ИмяПользователяSMTP = ИмяПользователяPOP3;
		ПарольSMTP = ПарольPOP3;
	КонецЕсли;
	
КонецПроцедуры

Процедура СерверДокументооборотаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		
		АдресЭлектроннойПочтыСервера = СерверДокументооборота.АдресЭлектроннойПочтыФНС;
		АдресСервера = СокрЛП(Сред(АдресЭлектроннойПочтыСервера, Найти(АдресЭлектроннойПочтыСервера, "@") + 1));
		Если ПустаяСтрока(АдресСервера) Тогда
			АдресЭлектроннойПочтыСервера = СерверДокументооборота.АдресЭлектроннойПочтыПФР;
			АдресСервера = СокрЛП(Сред(АдресЭлектроннойПочтыСервера, Найти(АдресЭлектроннойПочтыСервера, "@") + 1));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(АдресСервера) Тогда
			Если ПустаяСтрока(СерверSMTP) Тогда
				СерверSMTP = АдресСервера;
			КонецЕсли;
			Если ПустаяСтрока(СерверPOP3) Тогда
				СерверPOP3 = АдресСервера;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	
	Если ПустаяСтрока(Наименование) Тогда
		Наименование = Элемент.Значение;
	КонецЕсли;
	
	ВхождениеРазделителя = Найти(Элемент.Значение, "@");
	Если ВхождениеРазделителя = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяПользователяИзАдреса = СокрЛП(Лев(Элемент.Значение, ВхождениеРазделителя - 1));
	Если ПустаяСтрока(СерверPOP3) Тогда
		ИмяПользователяPOP3 = ИмяПользователяИзАдреса;
	КонецЕсли;
	Если ТребуетсяSMTPАутентификация И ПустаяСтрока(СерверSMTP) Тогда
		ИмяПользователяSMTP = ИмяПользователяИзАдреса;
	КонецЕсли;
	
	АдресСервера = СокрЛП(Сред(Элемент.Значение, ВхождениеРазделителя + 1));
	Если ПустаяСтрока(СерверSMTP) Тогда
		СерверSMTP = АдресСервера;
	КонецЕсли;
	Если ПустаяСтрока(СерверPOP3) Тогда
		СерверPOP3 = АдресСервера;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяПользователяSMTPПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИмяПользователяPOP3) Тогда
		ИмяПользователяPOP3 = ИмяПользователяSMTP;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЛогинПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИмяПользователяSMTP) И ТребуетсяSMTPАутентификация Тогда
		ИмяПользователяSMTP = ИмяПользователяPOP3;
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатРуководителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		КонтекстЭДО.ПоказатьСертификат(ЗначенияСертификатов[Элемент], "MY");
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РезультатВыбора = КонтекстЭДО.ВыбратьСертификат(ЗначенияСертификатов[Элемент]);
	Если РезультатВыбора <> Неопределено Тогда
		ЗначенияСертификатов.Вставить(Элемент, РезультатВыбора.Отпечаток);
		КонтекстЭДО.ОтобразитьСертификатВПолеВвода(Элемент, ЗначенияСертификатов[Элемент]);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатОтветственногоДляШифрованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Если НЕ ПустаяСтрока(ЗначенияСертификатов[ЭлементыФормы.СертификатРуководителя]) Тогда
		СписокВыбора.Добавить(ЗначенияСертификатов[ЭлементыФормы.СертификатРуководителя], "Для целей шифрования использовать сертификат руководителя");
	КонецЕсли;
	Если НЕ ПустаяСтрока(ЗначенияСертификатов[ЭлементыФормы.СертификатГлавногоБухгалтера]) Тогда
		СписокВыбора.Добавить(ЗначенияСертификатов[ЭлементыФормы.СертификатГлавногоБухгалтера], "Для целей шифрования использовать сертификат главного бухгалтера");
	КонецЕсли;
	
	РезультатВыбора = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ЗначенияСертификатов[Элемент]));
	Если РезультатВыбора <> Неопределено Тогда
		ЗначенияСертификатов.Вставить(Элемент, РезультатВыбора.Значение);
		КонтекстЭДО.ОтобразитьСертификатВПолеВвода(Элемент, ЗначенияСертификатов[Элемент]);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализацияТаблицыНастроекПользователей()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВЫБОР
	                      |		КОГДА Настройки.УчетнаяЗапись ЕСТЬ NULL
	                      |			ТОГДА ЛОЖЬ
	                      |		ИНАЧЕ ИСТИНА
	                      |	КОНЕЦ КАК Пометка,
	                      |	Пользователи.Ссылка КАК Пользователь
	                      |ИЗ
	                      |	Справочник.Пользователи КАК Пользователи
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                      |			ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись КАК УчетнаяЗапись,
	                      |			ПользователиУчетныхЗаписейДокументооборота.Пользователь КАК Пользователь
	                      |		ИЗ
	                      |			РегистрСведений.ПользователиУчетныхЗаписейДокументооборота КАК ПользователиУчетныхЗаписейДокументооборота
	                      |		ГДЕ
	                      |			ПользователиУчетныхЗаписейДокументооборота.УчетнаяЗапись = &УчетнаяЗапись) КАК Настройки
	                      |		ПО Пользователи.Ссылка = Настройки.Пользователь
	                      |ГДЕ
	                      |	(НЕ Пользователи.ЭтоГруппа)
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Пользователи.Наименование");
	Запрос.УстановитьПараметр("УчетнаяЗапись", Ссылка);
	Пользователи = Запрос.Выполнить().Выгрузить();
	
	СтрокаПользователь = Пользователи.Найти(ТекущийПользователь, "Пользователь");
	Если СтрокаПользователь <> Неопределено Тогда
		Если ЭтоНовый() Тогда
			СтрокаПользователь.Пометка = Истина;
		КонецЕсли;
		ЭлементыФормы.Пользователи.ТекущаяСтрока = СтрокаПользователь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПользователиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ЭтоТекущийПользователь = ОформлениеСтроки.ДанныеСтроки.Пользователь = ТекущийПользователь;
		Если ЭтоТекущийПользователь Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	НаборЗаписей = РегистрыСведений.ПользователиУчетныхЗаписейДокументооборота.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УчетнаяЗапись.Установить(Ссылка);
	
	Для Каждого Стр Из Пользователи Цикл
		Если Стр.Пометка Тогда
			НовСтр = НаборЗаписей.Добавить();
			НовСтр.УчетнаяЗапись = Ссылка;
			НовСтр.Пользователь = Стр.Пользователь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , "Не удалось обновить список пользователей по учетной записи налогоплательщика """ + СокрЛП(Ссылка) + """.");
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

Процедура СертификатРуководителяОчистка(Элемент, СтандартнаяОбработка)
	
	ЗначенияСертификатов.Вставить(Элемент, "");
	КонтекстЭДО.ОтобразитьСертификатВПолеВвода(Элемент, ЗначенияСертификатов[Элемент]);
	Модифицированность = Истина;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	СертификатРуководителя = ЗначенияСертификатов[ЭлементыФормы.СертификатРуководителя];
	СертификатГлавногоБухгалтера = ЗначенияСертификатов[ЭлементыФормы.СертификатГлавногоБухгалтера];
	СертификатДляШифрования = ЗначенияСертификатов[ЭлементыФормы.СертификатДляШифрования];
	
	Если НЕ КонтекстЭДО.УчетнаяЗаписьНастроенаВерно(ЭтотОбъект) Тогда
		Сообщить("Учетная запись настроена некорректно!", СтатусСообщения.Важное);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНастройкиУчетнойЗаписи()
	
	Возврат ПроверитьПараметрыДоступа() И КонтекстЭДО.УчетнаяЗаписьНастроенаВерно(ЭтотОбъект);
	
КонецФункции

Процедура ДействияФормыПроверить(Кнопка)
	
	Если НЕ ПроверитьНастройкиУчетнойЗаписи() Тогда
		Предупреждение("Учетная запись настроена не верно!");
	Иначе
		Предупреждение("Проверка успешно пройдена.");
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьИнтервалАвтообменаНажатие(Элемент)
	
	ТекстВопроса = "Изменить интервал автоматического обмена?";
	Если ЭтоНовый() Тогда
		ТекстВопроса = ТекстВопроса + "
						|При этом, информация об учетной записи будет записана.";
	КонецЕсли;
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		РезультатЗаписи = ЗаписатьВФорме();
		Если НЕ РезультатЗаписи Тогда
			Предупреждение("Не удалось сохранить информацию об учетной записи!");
			//Сообщить("Не удалось сохранить настройку автоматического обмена:" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ФормаИзмененияИнтервалаАвтообмена = КонтекстЭДО.ПолучитьФорму("ИзменениеИнтервалаАвтообменаПоУчетнойЗаписи");
	ФормаИзмененияИнтервалаАвтообмена.УчетнаяЗапись = Ссылка;
	ФормаИзмененияИнтервалаАвтообмена.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	
	Если ФормаИзмененияИнтервалаАвтообмена.ОткрытьМодально() = Истина Тогда
		ОбновитьНадписьПараметрАвтообмена();
	КонецЕсли;
		
КонецПроцедуры

Процедура SMTPСерверПриИзменении(Элемент)
	
	Если ПустаяСтрока(СерверPOP3) Тогда
		СерверPOP3 = СерверSMTP;
	КонецЕсли;
	
КонецПроцедуры

Процедура POP3СерверПриИзменении(Элемент)
	
	Если ПустаяСтрока(СерверSMTP) Тогда
		СерверSMTP = СерверPOP3;
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьАвтоматическиСейчасНажатие(Элемент)
	
	Если Модифицированность ИЛИ Модифицированность() Тогда
		Ответ = Вопрос("В текущей форме были произведены изменения, которые необходимо применить перед настройкой.
						|Применить изменения?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РезультатЗаписи = ЗаписатьВФорме();
		Если НЕ РезультатЗаписи Тогда
			Предупреждение("Не удалось сохранить информацию об учетной записи!");
			//Сообщить("Ошибка при попытке сохранения изменений:" + Символы.ПС + ИнформацияОбОшибке().Описание, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = КонтекстЭДО.АвтоматическаяНастройкаУчетнойЗаписи(Ссылка, , Истина, , Истина, , Истина);
	Если Результат = Истина Тогда
		Прочитать();
		ОбновитьФорму();
		Предупреждение("Автоматическая настройка успешно завершена.");
	ИначеЕсли Результат = Ложь Тогда
		Предупреждение("Текущие настройки учетной записи актуальны!");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРасширенныеНастройки(Кнопка)
	
	ФормаНастроек = КонтекстЭДО.ПолучитьФорму("РасширенныеНастройкиУчетнойЗаписи");
	ФормаНастроек.СправочникОбъект = ЭтотОбъект;
	ФормаНастроек.ОткрытьМодально();
	
КонецПроцедуры

Процедура ОбменНапрямуюПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

Процедура НадписьАвтонастройкаПомощьНажатие(Элемент)
	
	Предупреждение("Сервис автоматической настройки параметров учетной записи доступен только для абонентов специализированного оператора связи ООО ""Такском""!");
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Опрос форм" И Параметр.Ключ = Ссылка Тогда
		Параметр.Форма = ЭтаФорма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереключательНазначениеПриИзменении(Элемент)
	
	Если Назначение = -1 Тогда
		ПредназначенаДляДокументооборотаСФНС = Ложь;
		ПредназначенаДляДокументооборотаСПФР = Ложь;
	ИначеЕсли Назначение = 0 Тогда
		ПредназначенаДляДокументооборотаСФНС = Ложь;
		ПредназначенаДляДокументооборотаСПФР = Истина;
	ИначеЕсли Назначение = 1 Тогда
		ПредназначенаДляДокументооборотаСФНС = Истина;
		ПредназначенаДляДокументооборотаСПФР = Ложь;
	ИначеЕсли Назначение = 2 Тогда
		ПредназначенаДляДокументооборотаСФНС = Истина;
		ПредназначенаДляДокументооборотаСПФР = Истина;
	КонецЕсли;
	
	Если ПредназначенаДляДокументооборотаСПФР Тогда
		ОбменНапрямую = Ложь;
		Если НЕ ПредназначенаДляДокументооборотаСФНС Тогда
			РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.Отключена;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ДействияФормыСерверыДокументооборота(Кнопка)
	
	Справочники.СерверыДокументооборота.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ДействияФормыНалоговыеОрганы(Кнопка)
	
	Справочники.НалоговыеОрганы.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ДействияФормыОрганыПФР(Кнопка)
	
	Справочники.ОрганыПФР.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ИдентификаторАбонентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторСпецоператора) И СтрДлина(СокрЛП(ИдентификаторАбонента)) > 3 Тогда
		ИдентификаторСпецоператора = Лев(СокрЛП(ИдентификаторАбонента), 3);
	КонецЕсли;
	
КонецПроцедуры
