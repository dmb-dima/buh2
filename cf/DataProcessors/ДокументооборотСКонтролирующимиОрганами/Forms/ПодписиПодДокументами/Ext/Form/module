Перем ЦветПоСтатусуПроверки;
Перем ЦветНепровереннойПодписи;
Перем ТипыСообщенийСДИВамиВОсновании;
Перем ТипыСообщенийСДИВамиВПроизвольномСообщении;

Процедура ПодписиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// собираем все отпечатки
	Отпечатки = Новый Массив;
	СоответствиеОтпечатковОформлениямСтрок = Новый Соответствие;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОтпечатокСертификата = ОформлениеСтроки.ДанныеСтроки.ЭЦПСертификат;
		
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
			// собираем отпечатки и формируем соответствие их оформлениям строк
			СоответствиеОтпечатковОформлениямСтрок.Вставить(ОтпечатокСертификата, ОформлениеСтроки);
			Отпечатки.Добавить(ОтпечатокСертификата);
		Иначе
			// если информация о сертификате подписи недоступна, то рисуем красивую надпись
			ОформлениеСтроки.Ячейки.ЭЦПСертификат.УстановитьТекст("<информация недоступна>");
			ОформлениеСтроки.Ячейки.ЭЦПСертификат.ЦветТекста = Новый Цвет(128, 128, 128);
		КонецЕсли;
		
	КонецЦикла;
	
	// перерисовываем каждую строку
	СвойстваСертификатов = КонтекстЭДО.ПолучитьСвойстваСертификатовПоОтпечаткам(Отпечатки, "MY, AddressBook");
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		// прорисовываем ячейку "Сертификат"
		ОтпечатокСертификата = ОформлениеСтроки.ДанныеСтроки.ЭЦПСертификат;
		Если ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
			СвойстваСертификата = СвойстваСертификатов[ОтпечатокСертификата];
			Если СвойстваСертификата = Неопределено Тогда
				ОформлениеСтроки.Ячейки.ЭЦПСертификат.УстановитьТекст("Отпечаток: " + ОтпечатокСертификата);
			Иначе
				ОформлениеСтроки.Ячейки.ЭЦПСертификат.УстановитьТекст(КонтекстЭДО.ПредставлениеСертификатаПоСвойствам(СвойстваСертификата));
			КонецЕсли;
		КонецЕсли;
		
		// прорисовываем cтатус проверки
		ОформлениеСтроки.ЦветТекста = ЦветПоСтатусуПроверки[ОформлениеСтроки.ДанныеСтроки.ЭЦПСтатусПроверки];
		Если ОформлениеСтроки.ДанныеСтроки.ЭЦПСтатусПроверки = Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка() Тогда
			ОформлениеСтроки.Ячейки.ЭЦПСтатусПроверки.УстановитьТекст("<не проверена>");
			ОформлениеСтроки.Ячейки.ЭЦПСтатусПроверки.ЦветТекста = ЦветНепровереннойПодписи;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИмяФайлаДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// получаем список возможных имен файлов
	ИменаФайловДИВСписок = ПолучитьСписокДокументовСообщения(ТранспортноеСообщение);
	
	// даем выбрать из списка
	РезультатВыбора = ВыбратьИзСписка(ИменаФайловДИВСписок, Элемент, ИменаФайловДИВСписок.НайтиПоЗначению(ИмяФайлаДокумента));
	Если РезультатВыбора <> Неопределено Тогда
		
		// присваиваем значение имени файла документа и прорисовываем его представление на форме
		ИмяФайлаДокумента = РезультатВыбора.Значение;
		ПрорисоватьДокумент();
		
		// прорисовываем форму
		УстановитьОтборы();
		УправлениеЭУ();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборы()
	
	Если Подписи.Отбор.ТранспортноеСообщение.Значение <> ТранспортноеСообщение Тогда
		Подписи.Отбор.ТранспортноеСообщение.Значение = ТранспортноеСообщение;
	КонецЕсли;
	
	Если Подписи.Отбор.ЭЦПИмяПодписанногоФайла.Значение <> ИмяФайлаДокумента Тогда
		Подписи.Отбор.ЭЦПИмяПодписанногоФайла.Значение = ИмяФайлаДокумента;
	КонецЕсли;
	
	Если (РаботаСЭЦПАбонента И РаботаСЭЦППрочихУчастников)
	ИЛИ (НЕ РаботаСЭЦПАбонента И НЕ РаботаСЭЦППрочихУчастников) Тогда
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.Использование = Ложь;
	ИначеЕсли РаботаСЭЦПАбонента Тогда
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.ВидСравнения = ВидСравнения.Равно;
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.Значение = Истина;
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.Использование = Истина;
	ИначеЕсли РаботаСЭЦППрочихУчастников Тогда
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.ВидСравнения = ВидСравнения.Равно;
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.Значение = Ложь;
		Подписи.Отбор.ЭЦПЭтоПодписьАбонента.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Подписи.Отбор.ТранспортноеСообщение.ВидСравнения = ВидСравнения.Равно;
	Подписи.Отбор.ТранспортноеСообщение.Использование = Истина;
	
	Подписи.Отбор.ЭЦПИмяПодписанногоФайла.ВидСравнения = ВидСравнения.Равно;
	Подписи.Отбор.ЭЦПИмяПодписанногоФайла.Использование = Истина;
	
	Подписи.Отбор.Тип.ВидСравнения = ВидСравнения.Равно;
	Подписи.Отбор.Тип.Использование = Истина;
	Подписи.Отбор.Тип.Значение = Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись;
	
	ЭлементыФормы.Подписи.НастройкаОтбора.ТранспортноеСообщение.Доступность = Ложь;
	ЭлементыФормы.Подписи.НастройкаОтбора.ЭЦПИмяПодписанногоФайла.Доступность = Ложь;
	ЭлементыФормы.Подписи.НастройкаОтбора.ЭЦПЭтоПодписьАбонента.Доступность = Ложь;
	ЭлементыФормы.Подписи.НастройкаОтбора.Тип.Доступность = Ложь;
	
	ИнициализироватьНачальныеПараметры();
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ИнициализироватьНачальныеПараметры()
	
	ЦиклОбменаЗадан = ЗначениеЗаполнено(ЦиклОбмена);
	Если ЦиклОбменаЗадан Тогда
		Если ТранспортноеСообщение.ЦиклОбмена <> ЦиклОбмена Тогда
			ТранспортноеСообщение = Неопределено;
		КонецЕсли;
	Иначе
		ЦиклОбмена = ТранспортноеСообщение.ЦиклОбмена;
	КонецЕсли;
	
	ТранспортноеСообщениеЗадано = ЗначениеЗаполнено(ТранспортноеСообщение);
	ИмяФайлаДокументаЗадано = ЗначениеЗаполнено(ИмяФайлаДокумента);
	Если НЕ ТранспортноеСообщениеЗадано И ИмяФайлаДокументаЗадано Тогда
		ИмяФайлаДокумента = "";
	ИначеЕсли ТранспортноеСообщениеЗадано И ИмяФайлаДокументаЗадано Тогда
		ДокументыСообщения = ПолучитьСписокДокументовСообщения(ТранспортноеСообщение);
		Если ДокументыСообщения.НайтиПоЗначению(ИмяФайлаДокумента) = Неопределено Тогда
			//Предупреждение("Для выбранного сообщения документ """ + ИмяФайлаДокумента + """ отсутствует!");
		КонецЕсли;
	КонецЕсли;
	
	ПрорисоватьТранспортноеСообщение();
	ПрорисоватьДокумент();
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	СтатусТранспортногоСообщения = ТранспортноеСообщение.Статус;
	РедактированиеРазрешено = НЕ (СтатусТранспортногоСообщения = Перечисления.СтатусыПисем.Отправленное ИЛИ СтатусТранспортногоСообщения = Перечисления.СтатусыПисем.Полученное);
	
	ЭлементыФормы.КоманднаяПанельПодписи.Кнопки.Добавить.Доступность = РедактированиеРазрешено;
	ЭлементыФормы.КоманднаяПанельПодписи.Кнопки.Удалить.Доступность = РедактированиеРазрешено;
	ЭлементыФормы.Подписи.ТолькоПросмотр = НЕ РедактированиеРазрешено;
	
КонецПроцедуры

Процедура ИмяФайлаДокументаПриИзменении(Элемент)
	
	ПрорисоватьДокумент();
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ТранспортноеСообщениеПриИзменении(Элемент)
	
	ОтработатьИзменениеТранспортногоСообщения();
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ОтработатьИзменениеТранспортногоСообщения()
	
	Если ЗначениеЗаполнено(ТранспортноеСообщение) Тогда
		ЦиклОбмена = ТранспортноеСообщение.ЦиклОбмена;
	КонецЕсли;
	
	СписокДокументов = ПолучитьСписокДокументовСообщения(ТранспортноеСообщение);
	Если СписокДокументов.НайтиПоЗначению(ИмяФайлаДокумента) = Неопределено Тогда
		ИмяФайлаДокумента = "";
		Если СписокДокументов.Количество() > 0 Тогда
			ИмяФайлаДокумента = СписокДокументов[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	ПрорисоватьТранспортноеСообщение();
	ПрорисоватьДокумент();
	
КонецПроцедуры

Функция ПолучитьСписокДокументовСообщения(ТранспортноеСообщение)
	
	ИменаФайловДИВ = Новый СписокЗначений;
	
	ТипыДИВ = Новый Массив;
	
	// ФНС 141
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЗапросИОН);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.НеформализованныйДокумент);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеНеформализованногоДокумента);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОтветНаЗапросИОН);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеОбОтправке);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Протокол2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколВходногоКонтроля);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Реестр2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ТекстовоеСообщениеНеформализованногоДокумента);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточненииНБО);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетности);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	
	// ПФР 190
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОписанияСведенийПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПриложениеПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПротоколПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеПолученияОтчетностиПФР);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ФайлОтчетностиПФР);
	
	// ФНС 534
	//ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений);
	//ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведений2НДФЛ);
	//ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийОбращениеПисьмоРассылка);
	//ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ОписаниеСведенийЗапрос);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Форма2НДФЛ);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Обращение);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Приложение);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Доверенность);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыОтправки);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ПодтверждениеДатыПолучения);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбОтказе);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.КвитанцияОПриеме);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОВводе);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.УведомлениеОбУточнении);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ИзвещениеОПолучении);
	
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Письмо);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Рассылка);
	
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Запрос);
	ТипыДИВ.Добавить(Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Ответ);
	
	// формируем запрос для выбора документов текущего сообщения
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	СодержимоеТранспортныхКонтейнеров.Тип КАК Тип,
	                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла,
	                      |	1 КАК Источник
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
	                      |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип)");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Запрос.УстановитьПараметр("Тип", ТипыДИВ);
	
	// при необходимости добавляем к выборке документы из сообщения-основания
	Если ТипыСообщенийСДИВамиВОсновании.Найти(ТранспортноеСообщение.Тип) <> Неопределено И ЗначениеЗаполнено(ТранспортноеСообщение.Основание) Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	СодержимоеТранспортныхКонтейнеров.Тип,
	                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
	                      |	2
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщениеОснование
	                      |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип)";
		Запрос.УстановитьПараметр("ТранспортноеСообщениеОснование", ТранспортноеСообщение.Основание);
	Иначе
		ТипСообщенияОснования = ТипыСообщенийСДИВамиВПроизвольномСообщении[ТранспортноеСообщение.Тип];
		Если ЗначениеЗаполнено(ТипСообщенияОснования) Тогда
			Запрос.Текст = Запрос.Текст + "
		                      |
		                      |ОБЪЕДИНИТЬ ВСЕ
		                      |
		                      |ВЫБРАТЬ
		                      |	СодержимоеТранспортныхКонтейнеров.Тип,
		                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла,
		                      |	2
		                      |ИЗ
		                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                      |ГДЕ
		                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена = &ЦиклОбмена
		                      |	И СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В(&ТипОснования)
		                      |	И СодержимоеТранспортныхКонтейнеров.Тип В(&Тип)";
			Запрос.УстановитьПараметр("ЦиклОбмена", ТранспортноеСообщение.ЦиклОбмена);
			Запрос.УстановитьПараметр("ТипОснования", ТипСообщенияОснования);
		КонецЕсли;
	КонецЕсли;
	
	// выполняем запрос
	ТаблицаДИВ = Запрос.Выполнить().Выгрузить();
	
	// находим ДИВы, полученные из сообщения-основания
	ДИВИзОснований = ТаблицаДИВ.НайтиСтроки(Новый Структура("Источник", 2));
	
	// если ДИВы аналогичного типа и с аналогичным именем есть в сообщении, введенном на основании, то удалим из таблицы ДИВ сообщения-основания
	Для Каждого СтрДИВ Из ДИВИзОснований Цикл
		СледуетУдалить = (ТаблицаДИВ.НайтиСтроки(Новый Структура("Тип, ИмяФайла, Источник", СтрДИВ.Тип, СтрДИВ.ИмяФайла, 1)).Количество() > 0);
		Если СледуетУдалить Тогда
			ТаблицаДИВ.Удалить(СтрДИВ);
		КонецЕсли;
	КонецЦикла;
	
	// сортируем по именам таблицу ДИВов перед формированием результата
	ТаблицаДИВ.Сортировать("ИмяФайла");
	
	// формируем список-результат
	Для Каждого Стр Из ТаблицаДИВ Цикл
		ИменаФайловДИВ.Добавить(Стр.ИмяФайла, "" + Стр.Тип + ": " + Стр.ИмяФайла);
	КонецЦикла;
	
	Возврат ИменаФайловДИВ;
	
КонецФункции

Процедура КоманднаяПанельПодписиУдалить(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.Подписи.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Выберите строку.");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Удалить выбранную запись?", РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ОтпечатокСертификата = СокрЛП(ЭлементыФормы.Подписи.ТекущиеДанные.ЭЦПСертификат);
	
	МенеджерЗаписи = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяСтрока);
	МенеджерЗаписи.Удалить();
	
	УдалитьСертификатЕслиНеИспользуется(ТранспортноеСообщение, ОтпечатокСертификата);
	
КонецПроцедуры

Процедура УдалитьСертификатЕслиНеИспользуется(ТранспортноеСообщение, ОтпечатокСертификата)
	
	// проверяем, используется ли сертификат ("сопровождает" ли он какую-нибудь подпись)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(ИСТИНА)
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
	                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип
	                      |	И СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат = &ЭЦПСертификат");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.ЭлектронноЦифроваяПодпись);
	Запрос.УстановитьПараметр("ЭЦПСертификат", ОтпечатокСертификата);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СертификатИспользуется = (Выборка.Получить(0) <> 0);
	Иначе
		СертификатИспользуется = Ложь;
	КонецЕсли;
	
	// если сертификат используется, то не удаляем его
	Если СертификатИспользуется Тогда
		Возврат;
	КонецЕсли;
	
	// определяем имя файла сертификата
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ИмяФайла КАК ИмяФайла
	                      |ИЗ
	                      |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |ГДЕ
	                      |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение = &ТранспортноеСообщение
	                      |	И СодержимоеТранспортныхКонтейнеров.Тип = &Тип
	                      |	И СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ИмяФайла");
	Запрос.УстановитьПараметр("ТранспортноеСообщение", ТранспортноеСообщение);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат);
	Запрос.УстановитьПараметр("ИмяФайла", ВРЕГ(ОтпечатокСертификата) + ".cer%");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИмяФайлаСертификата = Выборка.ИмяФайла;
	Иначе
		Возврат;
	КонецЕсли;
	
	// удаляем сертификат
	Если ЗначениеЗаполнено(ИмяФайлаСертификата) Тогда
		МенеджерЗаписи = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ТранспортноеСообщение = ТранспортноеСообщение;
		МенеджерЗаписи.ИмяФайла = ИмяФайлаСертификата;
		МенеджерЗаписи.Удалить();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПодписиПроверить(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.Подписи.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Выберите строку.");
		Возврат;
	КонецЕсли;
	
	// получаем ДИВ из сообщения или сообщения-основания, и сохраняем его во временный файл
	ФайлыДИВ = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, , ИмяФайлаДокумента);
	Если ФайлыДИВ.Количество() = 0 И ЗначениеЗаполнено(ТранспортноеСообщение.Основание) Тогда
		ФайлыДИВ = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение.Основание, Истина, , ИмяФайлаДокумента);
	КонецЕсли;
	Если ФайлыДИВ.Количество() = 0 Тогда
		ТипСообщенияОснования = ТипыСообщенийСДИВамиВПроизвольномСообщении[ТранспортноеСообщение.Тип];
		Если ЗначениеЗаполнено(ТипСообщенияОснования) Тогда
			СообщениеОснование = КонтекстЭДО.ПолучитьСообщениеЦиклаОбмена(ТранспортноеСообщение.ЦиклОбмена, ТипСообщенияОснования);
			Если ЗначениеЗаполнено(СообщениеОснование) Тогда
				ФайлыДИВ = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Истина, , ИмяФайлаДокумента);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ФайлыДИВ.Количество() = 0 Тогда
		Предупреждение("Не удалось получить подписанный файл из информационной базы!");
		Возврат;
	КонецЕсли;
	ИмяФайлаДИВ = ПолучитьИмяВременногоФайла();
	ФайлыДИВ[0].Данные.Получить().Записать(ИмяФайлаДИВ);
	
	// получаем ЭЦП из сообщения и сохраняем его во временный файл
	ФайлыЭЦП = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, , ТекущаяСтрока.ИмяФайла);
	Если ФайлыЭЦП.Количество() = 0 Тогда
		Предупреждение("Не удалось получить файл подписи из информационной базы!");
		Возврат;
	КонецЕсли;
	ИмяФайлаЭЦП = ПолучитьИмяВременногоФайла();
	ФайлыЭЦП[0].Данные.Получить().Записать(ИмяФайлаЭЦП);
	
	// проверяем подпись
	РезультатПроверки = КонтекстЭДО.ПроверитьПодпись(ИмяФайлаДИВ, ИмяФайлаЭЦП, Истина);
	КонтекстЭДО.УдалитьВременныйФайл(ИмяФайлаДИВ);
	КонтекстЭДО.УдалитьВременныйФайл(ИмяФайлаЭЦП);
	Если РезультатПроверки = Неопределено Тогда // не удалось проверить
		Предупреждение("Не удалось проверить электронно-цифровую подпись!");
		Возврат;
	КонецЕсли;
	
	// отображаем результат проверки
	Если НЕ РезультатПроверки Тогда
		Предупреждение("Электронно-цифровая подпись НЕ ВАЛИДНА!");
	Иначе
		Предупреждение("Электронно-цифровая подпись валидна.");
	КонецЕсли;
	
	РезультатПодписиСсылка = ?(РезультатПроверки, Перечисления.СтатусыПроверкиЭЦП.Валидна, Перечисления.СтатусыПроверкиЭЦП.НеВалидна);
	Если РезультатПодписиСсылка = ЭлементыФормы.Подписи.ТекущиеДанные.ЭЦПСтатусПроверки Тогда
		Возврат;
	КонецЕсли;
	
	// предлагаем сохранить результат проверки
	Ответ = Вопрос("Сохранить результат проверки электронно-цифровой подписи?", РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// пишем результат проверки в регистр
		МенеджерЗаписи = РегистрыСведений.СодержимоеТранспортныхКонтейнеров.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекущаяСтрока);
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.ЭЦПСтатусПроверки = РезультатПодписиСсылка;
		
		Попытка
			МенеджерЗаписи.Записать(Истина);
		Исключение
			Предупреждение("Не удалось записать результат проверки:
							|
							|" + ИнформацияОбОшибке().Описание);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПодписиДобавить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСообщение) Тогда
		Предупреждение("Не выбрано транспортное сообщение!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ИмяФайлаДокумента) Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	
	// предлагаем выбрать вариант сертификата для подписания
	СписокДляВыбора = Новый СписокЗначений;
	СписокДляВыбора.Добавить(0, "Выбрать сертификат ответственного лица");
	СписокДляВыбора.Добавить(1, "Выбрать произвольный сертификат");
	РезультатВыбора = ВыбратьИзМеню(СписокДляВыбора, ЭлементыФормы.КоманднаяПанельПодписи);
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// показываем соответствующую форму для выбора
	Если РезультатВыбора.Значение = 0 Тогда
		СертификатПодписи = КонтекстЭДО.ВыбратьСертификатОтветственногоЛицаДляПодписания(, ТранспортноеСообщение.Отправитель);
	Иначе
		СертификатПодписи = КонтекстЭДО.ВыбратьСертификат();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СертификатПодписи) Тогда
		Возврат;
	КонецЕсли;
	
	// формируем подпись
	ИмяФайлаЭЦП = Неопределено;
	РезультатПодписания = КонтекстЭДО.ПоставитьПодписьОтветственногоЛица(ТранспортноеСообщение, СертификатПодписи, ИмяФайлаЭЦП);
	Если НЕ РезультатПодписания Тогда
		Предупреждение("Не удалось подписать документ!");
		Возврат;
	ИначеЕсли ИмяФайлаЭЦП = Неопределено Тогда
		Предупреждение("Документ уже подписан выбранным сертификатом!
						|Для того чтобы подписать документ заново, удалите сущетсвующую подпись.");
		Возврат;
	Иначе
		Предупреждение("Документ успешно подписан.");
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклОбменаПриИзменении(Элемент)
	
	ОтработатьИзменениеЦиклаОбмена();
	
КонецПроцедуры

Процедура ОтработатьИзменениеЦиклаОбмена()
	
	Если ТранспортноеСообщение.ЦиклОбмена <> ЦиклОбмена Тогда
		ТранспортноеСообщение = Неопределено;
		ОтработатьИзменениеТранспортногоСообщения();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПодписиПоказатьСертификат(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.Подписи.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение("Выберите строку.");
		Возврат;
	КонецЕсли;
	
	ОтпечатокСертификата = ТекущиеДанные.ЭЦПСертификат;
	Если НЕ ЗначениеЗаполнено(ОтпечатокСертификата) Тогда
		Предупреждение("Не удалось определить сертификат!");
		Возврат;
	КонецЕсли;
	
	// сначала ищем сертификат в системном хранилище
	СвойстваСертификата = КонтекстЭДО.ПолучитьСвойстваСертификатаПоОтпечатку(ОтпечатокСертификата, , Ложь);
	Если СвойстваСертификата <> Неопределено Тогда
		КонтекстЭДО.ПоказатьСертификатВСистемномОкне(СвойстваСертификата);
		Возврат;
	КонецЕсли;
	
	// если в системном хранилище сертификат не найден, то пробуем найти его среди содержимого контейнера (для случая ФНС 141)
	СтрИскомыйСертификат = Неопределено;
	ПрефиксИмениСертификата = ВРЕГ(ОтпечатокСертификата + ".cer");
	СертификатыТранспортногоСообщения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Истина, Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат);
	Для Каждого СертификатТранспортногоСообщения Из СертификатыТранспортногоСообщения Цикл
		Если ВРЕГ(Лев(СертификатТранспортногоСообщения.ИмяФайла, СтрДлина(ПрефиксИмениСертификата))) = ПрефиксИмениСертификата Тогда
			СтрИскомыйСертификат = СертификатТранспортногоСообщения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрИскомыйСертификат = Неопределено Тогда
		Предупреждение("Сертификат не найден!");
		Возврат;
	КонецЕсли;
	
	// сохраняем сертификат во временный файл и запускаем файл для просмотра
	ИмяФайлаСертификата = ПолучитьИмяВременногоФайла("cer");
	СтрИскомыйСертификат.Данные.Получить().Записать(ИмяФайлаСертификата);
	ЗапуститьПриложение(ИмяФайлаСертификата, , Истина);
	УдалитьФайлы(ИмяФайлаСертификата);
	
КонецПроцедуры

Процедура ТранспортноеСообщениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ТранспортноеСообщение.ПолучитьФормуВыбора(, ЭлементыФормы.ТранспортноеСообщение);
	Если ЗначениеЗаполнено(ЦиклОбмена) Тогда
		ФормаВыбора.Отбор.ЦиклОбмена.Установить(ЦиклОбмена);
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ПрорисоватьТранспортноеСообщение()
	
	ТранспортноеСообщениеПредставление = ПредставлениеСообщения(ТранспортноеСообщение);
	
КонецПроцедуры

Процедура ПрорисоватьДокумент()
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДокумента) Тогда
		ДокументПредставление = "";
		Возврат;
	КонецЕсли;
	
	// извлекаем из ИБ тип документа
	Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение, Ложь, , ИмяФайлаДокумента);
	Если Вложения.Количество() = 0 Тогда
		Если ЗначениеЗаполнено(ТранспортноеСообщение.Основание) Тогда
			Если ТипыСообщенийСДИВамиВОсновании.Найти(ТранспортноеСообщение.Тип) <> Неопределено Тогда
				Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(ТранспортноеСообщение.Основание, Ложь, , ИмяФайлаДокумента);
			КонецЕсли;
		Иначе
			ТипСообщенияОснования = ТипыСообщенийСДИВамиВПроизвольномСообщении[ТранспортноеСообщение.Тип];
			Если ЗначениеЗаполнено(ТипСообщенияОснования) Тогда
				СообщениеОснование = КонтекстЭДО.ПолучитьСообщениеЦиклаОбмена(ТранспортноеСообщение.ЦиклОбмена, ТипСообщенияОснования);
				Если ЗначениеЗаполнено(СообщениеОснование) Тогда
					Вложения = КонтекстЭДО.ПолучитьВложенияТранспортногоСообщения(СообщениеОснование, Ложь, , ИмяФайлаДокумента);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// прорисываем представление
	Если Вложения.Количество() = 0 Тогда
		ДокументПредставление = ИмяФайлаДокумента;
	Иначе
		ДокументПредставление = "" + Вложения[0].Тип + ": " + ИмяФайлаДокумента;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТранспортноеСообщениеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТранспортноеСообщение = Неопределено;
	
КонецПроцедуры

Процедура ТранспортноеСообщениеПредставлениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ТранспортноеСообщение) Тогда
		ОткрытьЗначение(ТранспортноеСообщение);
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеСообщения(ТранспортноеСообщение)
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСообщение) Тогда
		Возврат "";
	Иначе
		Возврат "" + ТранспортноеСообщение.Тип + " от " + ТранспортноеСообщение.Дата;
	КонецЕсли;
	
КонецФункции

ЦветПоСтатусуПроверки = Новый Соответствие;
ЦветПоСтатусуПроверки.Вставить(Перечисления.СтатусыПроверкиЭЦП.ПустаяСсылка(),	Новый Цвет(0, 0, 0));
ЦветПоСтатусуПроверки.Вставить(Перечисления.СтатусыПроверкиЭЦП.Валидна,			Новый Цвет(0, 128, 0));
ЦветПоСтатусуПроверки.Вставить(Перечисления.СтатусыПроверкиЭЦП.НеВалидна,		Новый Цвет(255, 0, 0));

ЦветНепровереннойПодписи = Новый Цвет(192, 192, 192);

Подписи.Колонки.Добавить("ТранспортноеСообщение");
Подписи.Колонки.Добавить("ЭЦПИмяПодписанногоФайла");
Подписи.Колонки.Добавить("ЭЦПСтатусПроверки");
Подписи.Колонки.Добавить("ЭЦПЭтоПодписьАбонента");
Подписи.Колонки.Добавить("Тип");

ТипыСообщенийСДИВамиВОсновании = Новый Массив;
ТипыСообщенийСДИВамиВОсновании.Добавить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО);
ТипыСообщенийСДИВамиВОсновании.Добавить(Перечисления.ТипыТранспортныхСообщений.ПротоколКвитанцияПФР);
ТипыСообщенийСДИВамиВОсновании.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП);
ТипыСообщенийСДИВамиВОсновании.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП);
ТипыСообщенийСДИВамиВОсновании.Добавить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП);

ТипыСообщенийСДИВамиВПроизвольномСообщении = Новый Соответствие;
ТипыСообщенийСДИВамиВПроизвольномСообщении.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
ТипыСообщенийСДИВамиВПроизвольномСообщении.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
ТипыСообщенийСДИВамиВПроизвольномСообщении.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
