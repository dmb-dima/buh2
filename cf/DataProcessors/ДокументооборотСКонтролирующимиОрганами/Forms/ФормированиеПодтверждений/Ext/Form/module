Перем ЗеленыйШар;
Перем ЗеленыйШарНерасшифрованное;
Перем СерыйШар;
Перем ЗолотойШар;
Перем ИменаКолонокСообщений;
Перем СообщенияКОбработке;
Перем ВыбранныеСообщения;
Перем ОснованияИПодтверждения;
Перем СоответствиеТипаСообщенияИмениКолонки;
Перем ВозможныеТипыЦикловОбмена;

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	СформироватьПодтверждения();
	
КонецПроцедуры

Процедура СформироватьПодтверждения()
	
	СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса = Новый Соответствие;
	СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса.Вставить(НаправлениеСортировки.Возр, "ВОЗР");
	СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса.Вставить(НаправлениеСортировки.Убыв, "УБЫВ");
	
	СтрокаПорядкаЦикловОбмена = "";
	Для Каждого ЭлементПорядка Из ЦиклыОбмена.Порядок Цикл
		СтрокаПорядкаЦикловОбмена = СтрокаПорядкаЦикловОбмена + ", ЗапросНижнегоУровня.ЦиклОбмена." + ЭлементПорядка.Данные + " " + СоответствиеНаправленияСортировкиКлючевомуСловуЗапроса[ЭлементПорядка.Направление];
	КонецЦикла;
	СтрокаПорядкаЦикловОбмена = СтрокаПорядкаЦикловОбмена + ", ЗапросНижнегоУровня.ЦиклОбмена.Ссылка";
	
	Запрос = ИнициализироватьЗапросНижнегоУровня(Истина);
	Если Запрос = Неопределено Тогда
		Предупреждение("Нет сообщений для обработки!");
		Возврат;
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ *
					|ИЗ (" + Запрос.Текст + ") КАК ЗапросНижнегоУровня
					|СГРУППИРОВАТЬ ПО ЗапросНижнегоУровня.Организация, ЗапросНижнегоУровня.ЦиклОбмена, ЗапросНижнегоУровня.ПорядокТипаСообщения, ЗапросНижнегоУровня.ТранспортноеСообщение
					|УПОРЯДОЧИТЬ ПО ЗапросНижнегоУровня.Организация" + СтрокаПорядкаЦикловОбмена + ", ЗапросНижнегоУровня.ПорядокТипаСообщения";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОбработанных = 0;
	КоличествоНеобработанных = 0;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбработкаПрерыванияПользователя();
		Сообщение = Выборка.ТранспортноеСообщение;
		Если НЕ КонтекстЭДО.СообщениеРасшифровано(Сообщение) Тогда
			ОбъектСообщение = Сообщение.ПолучитьОбъект();
			РезультатРасшифровки = КонтекстЭДО.РасшифроватьТранспортноеСообщение(ОбъектСообщение);
			Если НЕ РезультатРасшифровки Тогда
				КоличествоНеобработанных = КоличествоНеобработанных + 1;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ПодтверждениеСуществует(Сообщение) Тогда
			КоличествоОбработанных = КоличествоОбработанных + 1;
			Продолжить;
		КонецЕсли;
		Если КонтекстЭДО.СоздатьПодтверждение(Сообщение) Тогда
			КоличествоОбработанных = КоличествоОбработанных + 1;
		Иначе
			КоличествоНеобработанных = КоличествоНеобработанных + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоОбработанных = 0 И КоличествоНеобработанных = 0 Тогда
		Предупреждение("Нет сообщений для обработки!");
	ИначеЕсли КоличествоНеобработанных = 0 Тогда
		Предупреждение("Обработка завершена.
						|Обработано сообщений: " + КоличествоОбработанных + ".");
	Иначе
		Предупреждение("Не удалось обработать " + КоличествоНеобработанных + " из " + (КоличествоОбработанных + КоличествоНеобработанных)+ " сообщений.");
	КонецЕсли;
	ПриИзмененииДанных();
	
КонецПроцедуры

Функция ПодтверждениеСуществует(Основание)
	
	СтрТаблицы = ОснованияИПодтверждения.Найти(Основание.Тип, "Основание");
	Если СтрТаблицы = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(КонтекстЭДО.ПолучитьСообщениеЦиклаОбмена(Основание.ЦиклОбмена, СтрТаблицы.Подтверждение, Основание));
	
КонецФункции

Функция СформироватьСтрокуВыбор(Запрос)
	
	СтрокаВыбор = "(&ПустойТипСообщения)";
	Запрос.УстановитьПараметр("ПустойТипСообщения", Перечисления.ТипыТранспортныхСообщений.ПустаяСсылка());
	Для Каждого Стр Из ОснованияИПодтверждения Цикл
		ИндексСтроки = ОснованияИПодтверждения.Индекс(Стр) + 1;
		ИндексСтрокиСтр = Формат(ИндексСтроки, "ЧГ=");
		ИмяПараметраОснование = "Основание" + ИндексСтрокиСтр;
		ИмяПараметраПодтверждение = "Подтверждение" + ИндексСтрокиСтр;
		СтрокаВыбор = "ВЫБОР 
					  |	КОГДА ТранспортноеСообщение.Тип = (&" + ИмяПараметраПодтверждение + ") ТОГДА (&" + ИмяПараметраОснование + ")
					  |	ИНАЧЕ " + СтрокаВыбор + "
					  |КОНЕЦ";
		Запрос.УстановитьПараметр(ИмяПараметраОснование, Стр.Основание);
		Запрос.УстановитьПараметр(ИмяПараметраПодтверждение, Стр.Подтверждение);
	КонецЦикла;
	Возврат СтрокаВыбор;			  
	
КонецФункции

Функция ИнициализироватьЗапросНижнегоУровня(ДляОбработки)
	
	Если Организация.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ФормироватьНаНерасшифрованные Тогда
		ТекстЗапросаПоОснованиям = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                           |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Ссылка КАК Ссылка,
		                           |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена,
		                           |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип КАК Тип,
		                           |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип.Порядок КАК ПорядокТипа
		                           |ИЗ
		                           |	РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
		                           |ГДЕ
		                           |	СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В(&ТипОснования)";
	Иначе
		ТекстЗапросаПоОснованиям = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                           |	ТранспортноеСообщение.Ссылка КАК Ссылка,
		                           |	ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена,
		                           |	ТранспортноеСообщение.Тип КАК Тип,
		                           |	ТранспортноеСообщение.Тип.Порядок КАК ПорядокТипа
		                           |ИЗ
		                           |	Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
		                           |ГДЕ
		                           |	ТранспортноеСообщение.Тип В(&ТипОснования)";
	КонецЕсли;							   
	
	Запрос = Новый Запрос;
	СтрокаВыбор = СформироватьСтрокуВыбор(Запрос);
	Запрос.Текст = "ВЫБРАТЬ " + ?(ДляОбработки, "", "РАЗРЕШЕННЫЕ") + "
	                              |	Основания.ЦиклОбмена,
	                              |	Основания.Ссылка КАК ТранспортноеСообщение,
								  |	Основания.ЦиклОбмена.Организация КАК Организация,
								  |	Основания.Тип.Порядок КАК ПорядокТипаСообщения
	                              |ИЗ
	                              |	(" + ТекстЗапросаПоОснованиям + ") КАК Основания
	                              |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                              |			ТранспортноеСообщение.Ссылка КАК Ссылка,
	                              |			ТранспортноеСообщение.ЦиклОбмена КАК ЦиклОбмена,
	                              |			ТранспортноеСообщение.Тип КАК Тип,
	                              |			" + СтрокаВыбор + " КАК ТипОснования
	                              |		ИЗ
	                              |			Документ.ТранспортноеСообщение КАК ТранспортноеСообщение
	                              |		ГДЕ
	                              |			ТранспортноеСообщение.Тип В(&ТипПодтверждения)) КАК Подтверждения
	                              |		ПО Основания.ЦиклОбмена = Подтверждения.ЦиклОбмена
	                              |			И Основания.Тип = Подтверждения.ТипОснования
								  |ГДЕ
								  |	(Основания.Ссылка ЕСТЬ NULL ИЛИ Подтверждения.Ссылка ЕСТЬ NULL)
								  |	И НЕ (Основания.Ссылка ЕСТЬ NULL И Подтверждения.Ссылка ЕСТЬ NULL)
								  | И Основания.ЦиклОбмена.Организация В (&Организации)";
	Запрос.УстановитьПараметр("ТипОснования", ОснованияИПодтверждения.ВыгрузитьКолонку("Основание"));
	Запрос.УстановитьПараметр("ТипПодтверждения", ОснованияИПодтверждения.ВыгрузитьКолонку("Подтверждение"));
	
	Если НеУчитыватьЗавершенные Тогда
		Запрос.Текст = Запрос.Текст + "					  
						  |	И Основания.ЦиклОбмена.ДатаЗакрытия = &ПустаяДатаЗакрытия";
	КонецЕсли;						 
	Если ТипыЦикловОбмена = 1 Тогда					  
		Запрос.Текст = Запрос.Текст + "					  
						  |	И Основания.ЦиклОбмена.Тип = &Тип";
		Запрос.УстановитьПараметр("Тип", ВидЦиклаОбмена);
	Иначе
		Запрос.Текст = Запрос.Текст + "					  
						  |	И Основания.ЦиклОбмена.Тип В (&Тип)";
		Запрос.УстановитьПараметр("Тип", ВозможныеТипыЦикловОбмена);
	КонецЕсли;
	Если ДляОбработки Тогда
		Запрос.Текст = Запрос.Текст + "					  
						  |	И Основания.Ссылка В (&парамСообщения)
						  |	И Основания.ЦиклОбмена В (&парамЦиклыОбмена)";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустаяДатаЗакрытия", КонтекстЭДО.ПолучитьПустуюДатуЗавершенияЦиклаОбмена());
	Запрос.УстановитьПараметр("Организации", Организация);
	
	Если ДляОбработки Тогда
		Запрос.УстановитьПараметр("парамСообщения", ВыбранныеСообщения);
		Запрос.УстановитьПараметр("парамЦиклыОбмена", ЦиклыОбмена.Отбор.Ссылка.Значение);
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ВыполнитьЗапросПоЦикламОбмена(ДляОбработки = Ложь)
	
	ЗапросНижнегоУровня = ИнициализироватьЗапросНижнегоУровня(ДляОбработки);
	Если ЗапросНижнегоУровня = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ЗапросНижнегоУровня.Выполнить();
	
КонецФункции

Процедура СформироватьМассивОбрабатываемыхСообщений()
	
	ЦиклыОбмена.Отбор.Ссылка.Значение.Очистить();
	РезультатВыполненияЗапросаПоЦикламОбмена = ВыполнитьЗапросПоЦикламОбмена();
	Если РезультатВыполненияЗапросаПоЦикламОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицаРезультат = РезультатВыполненияЗапросаПоЦикламОбмена.Выгрузить();
	ТаблицаСообщения = ТаблицаРезультат.Скопировать(, "ТранспортноеСообщение");
	ТаблицаСообщения.Свернуть("ТранспортноеСообщение");
	СообщенияКОбработке = ТаблицаСообщения.ВыгрузитьКолонку("ТранспортноеСообщение");
	
	ТаблицаРезультат.Свернуть("ЦиклОбмена");
	ЦиклыОбмена.Отбор.Ссылка.Значение.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку("ЦиклОбмена"));
	
	// для первого раза пометим все возможные сообщения
	Если ТипЗнч(ВыбранныеСообщения) <> Тип("Массив") Тогда
		ВремСписок = Новый СписокЗначений;
		ВремСписок.ЗагрузитьЗначения(СообщенияКОбработке);
		ВыбранныеСообщения = ВремСписок.ВыгрузитьЗначения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Для Каждого ИмяКолонки Из ИменаКолонокСообщений Цикл
			
			ТекЯчейка = ОформлениеСтроки.Ячейки[ИмяКолонки];
			ТекДанные = ОформлениеСтроки.ДанныеСтроки;
			Если ТекЯчейка.ОтображатьКартинку Тогда
				ТекКартинка = ТекЯчейка.Картинка;
				
				// Если это расшифрованное сообщение-основание...
				Если ОснованияИПодтверждения.НайтиСтроки(Новый Структура("ТипЦиклаОбмена, ИмяКолонкиОснования", ТекДанные.Тип, ИмяКолонки)).Количество() > 0
				И (ТекКартинка = ЗеленыйШар ИЛИ ?(ФормироватьНаНерасшифрованные, ТекКартинка = ЗеленыйШарНерасшифрованное, Ложь)) Тогда
					
					ТекЯчейка.ОтображатьФлажок = Истина;
					ТекЯчейка.ТолькоПросмотр = Ложь;
					ТекЯчейка.Флажок = (ВыбранныеСообщения <> Неопределено И ВыбранныеСообщения.Найти(ТекЯчейка.Значение) <> Неопределено);
				
				Иначе
					
					// Если это подтверждение...
					РезультатПоиска = ОснованияИПодтверждения.НайтиСтроки(Новый Структура("ТипЦиклаОбмена, ИмяКолонкиПодтверждения", ТекДанные.Тип, ИмяКолонки));
					Если РезультатПоиска.Количество() > 0 И ЗначениеЗаполнено(ТекЯчейка.Значение) Тогда
						ИмяКолонкиОснования = РезультатПоиска[0].ИмяКолонкиОснования;
						ЯчейкаОснования = ОформлениеСтроки.Ячейки[ИмяКолонкиОснования];
						ЯчейкаОснования.ОтображатьФлажок = Ложь;
						ЯчейкаОснования.ТолькоПросмотр = Истина;
						ЯчейкаОснования.Флажок = Ложь;
					Иначе
						ТекЯчейка.ОтображатьФлажок = Ложь;
						ТекЯчейка.ТолькоПросмотр = Истина;
						ТекЯчейка.Флажок = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	УправлениеДанными();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	ЭлементыФормы.ВидЦиклаОбмена.Доступность = (ТипыЦикловОбмена = 1);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Выполнить.Доступность = (Организация.Количество() <> 0);
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура УправлениеДанными()
	
	СформироватьМассивОбрабатываемыхСообщений();
	
КонецПроцедуры

Процедура ЦиклыОбменаПриИзмененииФлажка(Элемент, Колонка)
	
	ОформлениеСтроки = ЭлементыФормы.ЦиклыОбмена.ОформлениеСтроки(ЭлементыФормы.ЦиклыОбмена.ТекущаяСтрока);
	ЗначениеИзЯчейки = ОформлениеСтроки.Ячейки[Колонка.Имя].Значение;
	ИндексЭлемента = ВыбранныеСообщения.Найти(ЗначениеИзЯчейки);
	Если ИндексЭлемента <> Неопределено Тогда
		ВыбранныеСообщения.Удалить(ИндексЭлемента);
	Иначе
		ВыбранныеСообщения.Добавить(ЗначениеИзЯчейки);
	КонецЕсли;
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЦиклыОбмена.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбмена.Отбор.Ссылка.Использование = Истина;
	
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Если Организация.Количество() = 0 Тогда
		ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
		ИЛИ (Организация.Количество() = 0 И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
			Организация.Очистить();
			Организация.Добавить(ОргПоУмолчанию);
		КонецЕсли;
	КонецЕсли;
	ЭлементыФормы.Организация.СписокВыбора.ЗагрузитьЗначения(КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена());
	
	// устанавливаем ограничение по возможным типам цикла обмена для поля ввода
	Для Каждого ВозможныйТипЦиклаОбмена Из ВозможныеТипыЦикловОбмена Цикл
		ЭлементыФормы.ВидЦиклаОбмена.ДоступныеЗначения.Добавить(ВозможныйТипЦиклаОбмена);
	КонецЦикла;
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ПереключательВсеЦиклыОбменаПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ВидЦиклаОбменаПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ФлажокНеУчитыватьЗавершенныеПриИзменении(Элемент)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаУстановитьФлажкиУВсех(Кнопка)
	
	ВремСписок = Новый СписокЗначений;
	ВремСписок.ЗагрузитьЗначения(СообщенияКОбработке);
	ВыбранныеСообщения = ВремСписок.ВыгрузитьЗначения();
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаСнятьФлажкиУВсех(Кнопка)
	
	ВыбранныеСообщения.Очистить();
	ЦиклыОбмена.Обновить();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаОбновить(Кнопка)
	
	ПриИзмененииДанных();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РезультатВыбора = КонтекстЭДО.ВыбратьОрганизации(Элемент.Значение.ВыгрузитьЗначения(), Истина);
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение.ЗагрузитьЗначения(РезультатВыбора);
		ПриИзмененииДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхОрганизаций = Новый СписокЗначений;
	СписокДоступныхОрганизаций.ЗагрузитьЗначения(КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена());
	РезультатВыбора = ВыбратьИзСписка(СписокДоступныхОрганизаций, Элемент, ?(Организация.Количество() <> 0, СписокДоступныхОрганизаций.НайтиПоЗначению(Организация[0].Значение), Неопределено));
	Если РезультатВыбора <> Неопределено Тогда
		Организация.Очистить();
		Организация.Добавить(РезультатВыбора.Значение);
		ПриИзмененииДанных();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ПриИзмененииДанных();
	КонецЕсли;
	
КонецПроцедуры

ОснованияИПодтверждения = Новый ТаблицаЗначений;
ОснованияИПодтверждения.Колонки.Добавить("Основание");
ОснованияИПодтверждения.Колонки.Добавить("Подтверждение");
ОснованияИПодтверждения.Колонки.Добавить("ТипЦиклаОбмена");
ОснованияИПодтверждения.Колонки.Добавить("ИмяКолонкиОснования");
ОснованияИПодтверждения.Колонки.Добавить("ИмяКолонкиПодтверждения");

// 141
НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание;

// 534
НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность;

// 534 2-НДФЛ
НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ;

// 534 НФД
НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПисьмоНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ПисьмоНО;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РассылкаНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.РассылкаГрупповая;

// 534 ИОН
НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН;

НовСтр = ОснованияИПодтверждения.Добавить();
НовСтр.Основание = Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО;
НовСтр.Подтверждение = Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП;
НовСтр.ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН;


СоответствиеТипаСообщенияИмениКолонки = Новый Соответствие;
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиОтчетности, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиОтчетности, "ОтветНаПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеФайлаОтчетности, "ПодтверждениеДоставки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляОтчетности, "ПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляОтчетности, "ПодтверждениеНаПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.УведомлениеОбУточненииНБО, "ОтветНаЗапрос");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.Протокол2НДФЛ, "ОтветНаЗапрос");

// 534
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДекларацияНО, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "ОтветНаПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеДекларацияНО, "ПодтверждениеДоставки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаДекларацияНО, "ПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "ПодтверждениеНаПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиДекларацияНО, "ОтветНаЗапрос");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "ОтветНаОтветНаЗапрос");

// 534 2-НДФЛ
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеФорма2НДФЛНО, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеФорма2НДФЛНО, "ПодтверждениеДоставки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаФорма2НДФЛНО, "ПротоколПроверки");

// 534 НФД
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОбращениеНО, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "ОтветНаПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеОбращениеНО, "ПодтверждениеДоставки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаОбращениеНО, "ПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "ПодтверждениеНаПротоколПроверки");

СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПисьмоНО, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПисьмоНП, "ПодтверждениеДоставки");

СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РассылкаНО, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРассылкаНП, "ПодтверждениеДоставки");

// 534 ИОН
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеЗапросНО, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеПодтверждениеНП, "ОтветНаПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеЗапросНО, "ПодтверждениеДоставки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатПриемаЗапросНО, "ПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатПриемаНП, "ПодтверждениеНаПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.РезультатОбработкиЗапросНО, "ОтветНаЗапрос");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ИзвещениеРезультатОбработкиНП, "ОтветНаОтветНаЗапрос");

//
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНО, "ОтветНаЗапрос");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеНаНеформализованныйДокументНО, "ОтветНаОтветНаЗапрос");

СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиНеформализованногоДокументаНалогоплательщика, "ОтветНаПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеДоставкиНеформализованногоДокументаНалогоплательщика, "ПодтверждениеДоставки");

СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН, "ПервичноеСообщение");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПодтверждениеОтправкиЗапросаИОН, "ПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанноеПодтверждениеОтправкиЗапросаИОН, "ОтветНаПодтверждениеОтправки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.КвитанцияОПриемеЗапросаИОН, "ПодтверждениеДоставки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПротоколВходногоКонтроляЗапросаИОН, "ПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйПротоколВходногоКонтроляЗапросаИОН, "ПодтверждениеНаПротоколПроверки");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ОтветНаЗапросИОН, "ОтветНаЗапрос");
СоответствиеТипаСообщенияИмениКолонки.Вставить(Перечисления.ТипыТранспортныхСообщений.ПереподписанныйОтветНаЗапросИОН, "ОтветНаОтветНаЗапрос");

Для Каждого Стр Из ОснованияИПодтверждения Цикл
	Стр.ИмяКолонкиОснования = СоответствиеТипаСообщенияИмениКолонки[Стр.Основание];
	Стр.ИмяКолонкиПодтверждения = СоответствиеТипаСообщенияИмениКолонки[Стр.Подтверждение];
КонецЦикла;

ЦиклыОбмена.Колонки.Добавить("Организация");
ЦиклыОбмена.Колонки.Добавить("ДатаНачалаПериода");
ЦиклыОбмена.Колонки.Добавить("ДатаОкончанияПериода");
ЦиклыОбмена.Колонки.Добавить("ДатаЗакрытия");
ЦиклыОбмена.Колонки.Добавить("ВидДокумента");
ЦиклыОбмена.Колонки.Добавить("Тип");
ЦиклыОбмена.Колонки.Добавить("УчетнаяЗапись");
ЦиклыОбмена.Колонки.Добавить("ФорматДокументооборота");

ИменаКолонокСообщений = Новый Массив;
ИменаКолонокСообщений.Добавить("ПервичноеСообщение");
ИменаКолонокСообщений.Добавить("ПодтверждениеОтправки");
ИменаКолонокСообщений.Добавить("ОтветНаПодтверждениеОтправки");
ИменаКолонокСообщений.Добавить("ПодтверждениеДоставки");
ИменаКолонокСообщений.Добавить("ПротоколПроверки");
ИменаКолонокСообщений.Добавить("ПодтверждениеНаПротоколПроверки");
ИменаКолонокСообщений.Добавить("ОтветНаЗапрос");
ИменаКолонокСообщений.Добавить("ОтветНаОтветНаЗапрос");

ЗеленыйШар					= БиблиотекаКартинок.ЗеленыйШар;
СерыйШар					= БиблиотекаКартинок.СерыйШар;
ЗолотойШар					= БиблиотекаКартинок.ЗолотойШар;
ЗеленыйШарНерасшифрованное	= БиблиотекаКартинок.ЗеленыйШарСЗамком;

СообщенияКОбработке = Новый Массив;

ВозможныеТипыЦикловОбмена = Новый Массив;
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ПисьмоНО);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.Рассылка);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
ВозможныеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ИОН);
