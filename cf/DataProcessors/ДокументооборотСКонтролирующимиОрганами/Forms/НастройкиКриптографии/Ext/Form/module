Перем СоответствиеКлассаАлгоритмаПредставлению;
Перем СоответствиеКлассаАлгоритмаПолюВвода;
Перем ТаблицаКриптопровайдеры;
Перем ТаблицаАлгоритмы;
Перем Крипт;

Функция ИнициализироватьОбъектДляРаботыСКриптографией()
	
	ЗагрузитьКомпонентуОбменаСНалоговымиОрганами();
	
	Попытка
		Крипт = Новый("Addin.CryptS");
		Крипт.НеВыводитьСообщенияОбОшибках = Ложь;
	Исключение
		Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
		Предупреждение("Не удалось создать объект для работы с криптографией!");
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
	
КонецФункции

Функция ИнициализироватьПараметрыКриптографииЗначениямиПоУмолчанию()
	
	Возврат КонтекстЭДО.ПолучитьПараметрыКриптографииПоУмолчанию();
	
КонецФункции

Функция ПолучитьЗначенияКонстантКриптографии()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_АлгоритмПодписания,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_АлгоритмШифрования,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_АлгоритмХешФункции,
	                      |	Константы.ДокументооборотСКонтролирующимиОрганами_АлгоритмГенерацииСессионногоКлюча
	                      |ИЗ
	                      |	Константы КАК Константы");
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("Недостаточно прав!");
		Возврат Неопределено;
	КонецЕсли;
	
	КонстантыКриптографии = Новый Соответствие;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		
		КонстантыКриптографии.Вставить("ИмяКриптопровайдера", Выборка.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера);
		КонстантыКриптографии.Вставить("ТипКриптопровайдера", Выборка.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера);
		КонстантыКриптографии.Вставить("АлгоритмПодписания", Выборка.ДокументооборотСКонтролирующимиОрганами_АлгоритмПодписания);
		КонстантыКриптографии.Вставить("АлгоритмШифрования", Выборка.ДокументооборотСКонтролирующимиОрганами_АлгоритмШифрования);
		КонстантыКриптографии.Вставить("АлгоритмХешФункции", Выборка.ДокументооборотСКонтролирующимиОрганами_АлгоритмХешФункции);
		КонстантыКриптографии.Вставить("АлгоритмГенерацииСессионногоКлюча", Выборка.ДокументооборотСКонтролирующимиОрганами_АлгоритмГенерацииСессионногоКлюча);
		
		ВсеКонстантыНеЗаполнены = Истина;
		Для Каждого КонстантаКриптографии Из КонстантыКриптографии Цикл
			Если ЗначениеЗаполнено(КонстантаКриптографии.Значение) Тогда
				ВсеКонстантыНеЗаполнены = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВсеКонстантыНеЗаполнены Тогда
			КонстантыКриптографии = ИнициализироватьПараметрыКриптографииЗначениямиПоУмолчанию();
		КонецЕсли;
			
	КонецЕсли;
	Возврат КонстантыКриптографии;
	
КонецФункции

Процедура ВосстановитьЗначенияКонстант(КонстантыКриптографии)
	
	ТипКриптопровайдераИзКонстанты = КонстантыКриптографии["ТипКриптопровайдера"];
	ИмяКриптопровайдераИзКонстанты = КонстантыКриптографии["ИмяКриптопровайдера"];
	КриптопровайдерыИзКонстанты = ТаблицаКриптопровайдеры.НайтиСтроки(Новый Структура("Тип, Имя", ТипКриптопровайдераИзКонстанты, ИмяКриптопровайдераИзКонстанты));
	Если КриптопровайдерыИзКонстанты.Количество() = 0 Тогда
		Предупреждение("Внимание! В информационной базе задан некорректный криптопровайдер!
						|Тип криптопровайдера: " + ТипКриптопровайдераИзКонстанты + ".
						|Имя криптопровайдера: " + ИмяКриптопровайдераИзКонстанты + ".");
		Возврат;
	КонецЕсли;
	
	КриптопровайдерИзКонстанты = КриптопровайдерыИзКонстанты[0];
	Криптопровайдер = КриптопровайдерИзКонстанты.Представление;
	
	ЗаполнитьАлгоритмы(КриптопровайдерИзКонстанты);
	
	ТекстПредупреждения = "";
	
	АлгоритмПодписанияИзКонстанты = КонстантыКриптографии["АлгоритмПодписания"];
	АлгоритмШифрованияИзКонстанты = КонстантыКриптографии["АлгоритмШифрования"];
	АлгоритмХешФункцииИзКонстанты = КонстантыКриптографии["АлгоритмХешФункции"];
	АлгоритмГенерацииСессионногоКлючаИзКонстанты = КонстантыКриптографии["АлгоритмГенерацииСессионногоКлюча"];
	
	СтрокиАлгоритмПодписанияИзКонстанты = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("ИД, Класс", АлгоритмПодписанияИзКонстанты, 1));
	Если СтрокиАлгоритмПодписанияИзКонстанты.Количество() = 0 Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Неверно задан алгоритм подписания (идентификатор алгоритма: " + Формат(АлгоритмПодписанияИзКонстанты, "ЧГ=") + ")!" + Символы.ПС;
	Иначе
		АлгоритмПодписание = СтрокиАлгоритмПодписанияИзКонстанты[0].Представление;
	КонецЕсли;
	
	СтрокиАлгоритмШифрованияИзКонстанты = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("ИД, Класс", АлгоритмШифрованияИзКонстанты, 5));
	Если СтрокиАлгоритмШифрованияИзКонстанты.Количество() = 0 Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Неверно задан алгоритм генерации сессионных ключей (идентификатор алгоритма: " + Формат(АлгоритмШифрованияИзКонстанты, "ЧГ=") + ")!" + Символы.ПС;
	Иначе
		АлгоритмШифрование = СтрокиАлгоритмШифрованияИзКонстанты[0].Представление;
	КонецЕсли;
	
	СтрокиАлгоритмХешФункцииИзКонстанты = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("ИД, Класс", АлгоритмХешФункцииИзКонстанты, 4));
	Если СтрокиАлгоритмХешФункцииИзКонстанты.Количество() = 0 Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Неверно задан алгоритм вычисления хэширования (идентификатор алгоритма: " + Формат(АлгоритмХешФункцииИзКонстанты, "ЧГ=") + ")!" + Символы.ПС;
	Иначе
		АлгоритмХеширование = СтрокиАлгоритмХешФункцииИзКонстанты[0].Представление;
	КонецЕсли;
	
	СтрокиАлгоритмГенерацииСессионныхКлючейИзКонстанты = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("ИД, Класс", АлгоритмГенерацииСессионногоКлючаИзКонстанты, 3));
	Если СтрокиАлгоритмГенерацииСессионныхКлючейИзКонстанты.Количество() = 0 Тогда
		ТекстПредупреждения = ТекстПредупреждения + "Неверно задан алгоритм шифрования (идентификатор алгоритма: " + Формат(АлгоритмГенерацииСессионногоКлючаИзКонстанты, "ЧГ=") + ")!" + Символы.ПС;
	Иначе
		АлгоритмКлючи = СтрокиАлгоритмГенерацииСессионныхКлючейИзКонстанты[0].Представление;
	КонецЕсли;
	
	Если ТекстПредупреждения <> "" Тогда
		ТекстПредупреждения = "ВНИМАНИЕ!!! В информационной базе для некоторых алгоритмов хранятся недопустимые значения!
								|
								|Подробно:
								|" + ТекстПредупреждения;
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Перем ИмяКриптопровайдера, ТипКриптопровайдера;
	
	Если НЕ ИнициализироватьОбъектДляРаботыСКриптографией() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	КонстантыКриптографии = ПолучитьЗначенияКонстантКриптографии();
	Если КонстантыКриптографии = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотр = НЕ КонтекстЭДО.ТекущийПользовательЯвляетсяАдминистраторомУчетныхЗаписейДокументооборота();
	
	Пока Крипт.ПолучитьСледующийКриптопровайдер(ИмяКриптопровайдера, ТипКриптопровайдера) Цикл
		
		НовСтр = ТаблицаКриптопровайдеры.Добавить();
		НовСтр.Имя = СокрЛП(ИмяКриптопровайдера);
		НовСтр.Тип = ТипКриптопровайдера;
		
		НомерВарианта = 2;
		Представление = НовСтр.Имя + " (тип: " + НовСтр.Тип + ")";
		Пока ТаблицаКриптопровайдеры.НайтиСтроки(Новый Структура("Представление", Представление)).Количество() <> 0 Цикл
			Представление = НовСтр.Имя + " (тип: " + НовСтр.Тип + ") [" + НомерВарианта + "]";
			НомерВарианта = НомерВарианта + 1;
		КонецЦикла;
		НовСтр.Представление = Представление;
		
		ЭлементыФормы.Криптопровайдер.СписокВыбора.Добавить(НовСтр.Представление);
		
	КонецЦикла;
	
	ВосстановитьЗначенияКонстант(КонстантыКриптографии);
	
КонецПроцедуры

Процедура КриптопровайдерПриИзменении(Элемент)
	
	СтрКриптопровайдер = ТаблицаКриптопровайдеры.Найти(Элемент.Значение, "Представление");
	ЗаполнитьАлгоритмы(СтрКриптопровайдер);
	
КонецПроцедуры

Процедура ЗаполнитьАлгоритмы(СтрКриптопровайдер)
	Перем ИдАлгоритма, ИмяАлгоритма, ДлинаКлюча, КлассАлгоритма;
	
	ТаблицаАлгоритмы.Очистить();
	Для Каждого КлассАлгоритмаИПолеВвода Из СоответствиеКлассаАлгоритмаПолюВвода Цикл
		ПолеВводаКлассаАлгоритма = КлассАлгоритмаИПолеВвода.Значение;
		ПолеВводаКлассаАлгоритма.СписокВыбора.Очистить();
		ПолеВводаКлассаАлгоритма.Значение = "";
	КонецЦикла;
	
	Если СтрКриптопровайдер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НеподдерживаемыеКлассыАлгоритмов = Новый Массив;
	
	Крипт.ИмяКриптопровайдера = СтрКриптопровайдер.Имя;
	Крипт.ТипКриптопровайдера = СтрКриптопровайдер.Тип;
	Пока Крипт.ПолучитьСледующийАлгоритм(ИдАлгоритма, ИмяАлгоритма, ДлинаКлюча, КлассАлгоритма) Цикл
		НовСтр = ТаблицаАлгоритмы.Добавить();
		НовСтр.ИД = ИДАлгоритма;
		НовСтр.Имя = СокрЛП(ИмяАлгоритма);
		НовСтр.ДлинаКлюча = ДлинаКлюча;
		НовСтр.Класс = КлассАлгоритма;
		СформироватьПредставлениеАлгоритма(НовСтр);
	Конеццикла;
	
	Для Каждого КлассАлгоритмаИПолеВвода Из СоответствиеКлассаАлгоритмаПолюВвода Цикл
		КлассАлгоритма = КлассАлгоритмаИПолеВвода.Ключ;
		ПолеВводаКлассаАлгоритма = КлассАлгоритмаИПолеВвода.Значение;
		АлгоритмыКласса = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("Класс", КлассАлгоритма));
		Для Каждого АлгоритмКласса Из АлгоритмыКласса Цикл
			ПолеВводаКлассаАлгоритма.СписокВыбора.Добавить(АлгоритмКласса.Представление);
		КонецЦикла;
		Если ПолеВводаКлассаАлгоритма.СписокВыбора.Количество() = 1 Тогда
			ПолеВводаКлассаАлгоритма.Значение = ПолеВводаКлассаАлгоритма.СписокВыбора[0].Значение;
		КонецЕсли;
		Если АлгоритмыКласса.Количество() = 0 Тогда
			НеподдерживаемыеКлассыАлгоритмов.Добавить(КлассАлгоритма);
		КонецЕсли;
	КонецЦикла;
	
	Если НеподдерживаемыеКлассыАлгоритмов.Количество() <> 0 Тогда
		ТекстПредупреждения = "Для выбранного криптопровайдера не определены следующие классы алгоритмов:
								|";
		Инд = 1;						
		Для Каждого НеподдерживаемыйКлассАлгоритма Из НеподдерживаемыеКлассыАлгоритмов Цикл
			ТекстПредупреждения = ТекстПредупреждения + Инд + ". " + СоответствиеКлассаАлгоритмаПредставлению[НеподдерживаемыйКлассАлгоритма] + Символы.ПС;
			Инд = Инд + 1;
		КонецЦикла;
		ТекстПредупреждения = ТекстПредупреждения + "
								|Выбранный криптопровайдер не может быть использован.";
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПредставлениеАлгоритма(НовСтр)
	
	ТаблицаВладелец = НовСтр.Владелец();
	НомерВарианта = 2;
	ОсноваПредставления = Формат(НовСтр.ИД, "ЧГ=") + ": " + НовСтр.Имя + " (" + Формат(НовСтр.ДлинаКлюча, "ЧГ=") + " бит)";
	Представление = ОсноваПредставления;
	Пока ТаблицаВладелец.НайтиСтроки(Новый Структура("Представление, Класс", Представление, НовСтр.Класс)).Количество() <> 0 Цикл
		Представление = ОсноваПредставления + " [" + НомерВарианта + "]";
		НомерВарианта = НомерВарианта + 1;
	КонецЦикла;
	НовСтр.Представление = Представление;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	ПризнакОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Криптопровайдер) Тогда
		Сообщить("Не указан криптопровайдер!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АлгоритмПодписание) Тогда
		Сообщить("Не указан алгоритм подписания!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АлгоритмШифрование) Тогда
		Сообщить("Не указан алгоритм шифрования!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АлгоритмХеширование) Тогда
		Сообщить("Не указан алгоритм вычисления хэширования!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(АлгоритмКлючи) Тогда
		Сообщить("Не указан алгоритм генерации сессионных ключей!", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Предупреждение("Укажите незаполненные поля!");
		Возврат;
	КонецЕсли;
	
	НаборКонстант = Константы.СоздатьНабор("ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера,"
										+ "ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера,"
										+ "ДокументооборотСКонтролирующимиОрганами_АлгоритмПодписания,"
										+ "ДокументооборотСКонтролирующимиОрганами_АлгоритмШифрования,"
										+ "ДокументооборотСКонтролирующимиОрганами_АлгоритмХешФункции,"
										+ "ДокументооборотСКонтролирующимиОрганами_АлгоритмГенерацииСессионногоКлюча");
										
	СтрКриптопровайдер = ТаблицаКриптопровайдеры.Найти(Криптопровайдер, "Представление");
	НаборКонстант.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера = СтрКриптопровайдер.Имя;
	НаборКонстант.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера = СтрКриптопровайдер.Тип;
	
	СтрАлгоритмКласса1 = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("Класс, Представление", 1, АлгоритмПодписание))[0];
	СтрАлгоритмКласса3 = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("Класс, Представление", 3, АлгоритмКлючи))[0];
	СтрАлгоритмКласса4 = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("Класс, Представление", 4, АлгоритмХеширование))[0];
	СтрАлгоритмКласса5 = ТаблицаАлгоритмы.НайтиСтроки(Новый Структура("Класс, Представление", 5, АлгоритмШифрование))[0];
	
	НаборКонстант.ДокументооборотСКонтролирующимиОрганами_АлгоритмПодписания = СтрАлгоритмКласса1.ИД;
	НаборКонстант.ДокументооборотСКонтролирующимиОрганами_АлгоритмШифрования = СтрАлгоритмКласса5.ИД;
	НаборКонстант.ДокументооборотСКонтролирующимиОрганами_АлгоритмХешФункции = СтрАлгоритмКласса4.ИД;
	НаборКонстант.ДокументооборотСКонтролирующимиОрганами_АлгоритмГенерацииСессионногоКлюча = СтрАлгоритмКласса3.ИД;
	
	Попытка
		НаборКонстант.Записать();
	Исключение
		Предупреждение("Не удалось записать новые значения параметров криптографии!
						|
						|Подробнее об ошибке:
						|" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Закрыть();
	
КонецПроцедуры

СоответствиеКлассаАлгоритмаПолюВвода = Новый Соответствие;
СоответствиеКлассаАлгоритмаПолюВвода.Вставить(1, ЭлементыФормы.АлгоритмПодписание);
СоответствиеКлассаАлгоритмаПолюВвода.Вставить(5, ЭлементыФормы.АлгоритмШифрование);
СоответствиеКлассаАлгоритмаПолюВвода.Вставить(4, ЭлементыФормы.АлгоритмХеширование);
СоответствиеКлассаАлгоритмаПолюВвода.Вставить(3, ЭлементыФормы.АлгоритмКлючи);

СоответствиеКлассаАлгоритмаПредставлению = Новый Соответствие;
СоответствиеКлассаАлгоритмаПредставлению.Вставить(1, "Алгоритмы подписания.");
СоответствиеКлассаАлгоритмаПредставлению.Вставить(3, "Алгоритмы генерации сессионных ключей.");
СоответствиеКлассаАлгоритмаПредставлению.Вставить(4, "Алгоритмы хэширования.");
СоответствиеКлассаАлгоритмаПредставлению.Вставить(5, "Алгоритмы шифрования.");

ТаблицаАлгоритмы = Новый ТаблицаЗначений;
ТаблицаАлгоритмы.Колонки.Добавить("ИД");
ТаблицаАлгоритмы.Колонки.Добавить("Имя");
ТаблицаАлгоритмы.Колонки.Добавить("ДлинаКлюча");
ТаблицаАлгоритмы.Колонки.Добавить("Класс");
ТаблицаАлгоритмы.Колонки.Добавить("Представление");

ТаблицаКриптопровайдеры = Новый ТаблицаЗначений;
ТаблицаКриптопровайдеры.Колонки.Добавить("Имя");
ТаблицаКриптопровайдеры.Колонки.Добавить("Тип");
ТаблицаКриптопровайдеры.Колонки.Добавить("Представление");
