Перем СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора;
Перем СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора;
Перем СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена;
Перем ЗеленыйШар;
Перем ЗеленыйШарНерасшифрованное;
Перем СерыйШар;
Перем ЗолотойШар;
Перем ЗолотойШарЗашифрованное;
Перем МассивНаименованийПравыхГраницПериода;
Перем ДатаКонцаПериодаОтчета;
Перем ДатаНачалаПериодаОтчета;
Перем мДатаНачалаИнтервалаОтбора;
Перем мДатаОкончанияИнтервалаОтбора;
Перем СоответствиеСтраницыПанелиИсточникуЦикловОбмена;
//Перем СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности;
Перем ТабличныеПоляЦиклыОбмена;
Перем КрасныйЦвет;
Перем СерыйЦвет;
Перем ВыбранныеЦиклыОбмена;
Перем ВыбранныеЦиклыОбменаПФР;
Перем ИсточникиЦикловОбмена;
Перем НомерКартинкиПоСтатусуЗапроса;
Перем ЦветГиперссылки;

Процедура ПоказатьОкноСПредупреждением534ПриНеобходимости()
	
	// окно показываем только в случае, если были циклы обмена с ФНС в старом формате
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЦиклыОбмена.Ссылка) КАК Ссылка
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	                      |ГДЕ
	                      |	ЦиклыОбмена.Вид = &Вид
	                      |	И ЦиклыОбмена.ФорматДокументооборота В(&ФорматДокументооборота)
	                      |	И ЦиклыОбмена.Тип = &Тип");
	Запрос.УстановитьПараметр("Вид", Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	Запрос.УстановитьПараметр("Тип", Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	
	ФорматыДокументооборотаСФНС = Новый Массив;
	ФорматыДокументооборотаСФНС.Добавить(Перечисления.ФорматыДокументооборотаСФНС.Приказ141);
	ФорматыДокументооборотаСФНС.Добавить(Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	Запрос.УстановитьПараметр("ФорматДокументооборота", ФорматыДокументооборотаСФНС);
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
	Исключение
		Возврат;
	КонецПопытки;
	Если НЕ ЗначениеЗаполнено(Выборка.Получить(0)) Тогда
		Возврат;
	КонецЕсли;
	
	сохрНеПоказыватьПредупреждение534 = (ВосстановитьЗначение("КонтекстЭДО_НеПоказыватьПредупреждение534") = Истина);
	Если НЕ сохрНеПоказыватьПредупреждение534 Тогда
		КонтекстЭДО.ПолучитьФорму("ПредупреждениеПриПереходеНа534").Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// заполняем список учетных записей
	ЗаполнитьУчетныеЗаписи();
	
	Если УчетныеЗаписи.Количество() = 0 Тогда
		Ответ = Вопрос("Для работы с формой """ + СокрЛП(Заголовок) + """ Вы должны быть зарегистрированы
						|в информационной базе как пользователь хотя бы одной из активных учетных записей документооборота.
						|
						|Открыть справочник учетных записей документооборота?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Справочники.УчетныеЗаписиДокументооборота.ПолучитьФормуСписка().Открыть();
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//УправлениеВидимостьюПодменюЗащита();
	
	// регулируем доступность табличных полей циклов обмена
	Для Каждого ТабличноеПолеЦиклОбмена Из ТабличныеПоляЦиклыОбмена Цикл
		Для Каждого НастройкаОтбора Из ТабличноеПолеЦиклОбмена.НастройкаОтбора Цикл
			НастройкаОтбора.Доступность = Ложь;
		КонецЦикла;
		Для Каждого НастройкаПорядка Из ТабличноеПолеЦиклОбмена.НастройкаПорядка Цикл
			НастройкаПорядка.Доступность = Истина;
		КонецЦикла;
		ТабличноеПолеЦиклОбмена.ВосстанавливатьТекущуюСтроку = Истина;
	КонецЦикла;
	
	// запрещаем отбор в табличных полях циклов обмена
	ЭлементыФормы.ЦиклыОбменаОтчетность.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаИсходящиеДокументыФНС.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаВходящиеДокументыФНС.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаЗапросы.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ПрочиеСообщения.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаИсходящиеДокументыПФР.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаВходящиеДокументыПФР.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	
	// устанавливаем отбор по пометке удаления в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаИсходящиеДокументыФНС.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаВходящиеДокументыФНС.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаЗапросы.Отбор.ПометкаУдаления.Установить(Ложь);
	ПрочиеСообщения.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаОтчетностьПФР.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаИсходящиеДокументыПФР.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаВходящиеДокументыПФР.Отбор.ПометкаУдаления.Установить(Ложь);
	
	// устанавливаем отбор по виду в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	ЦиклыОбменаИсходящиеДокументыФНС.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	ЦиклыОбменаВходящиеДокументыФНС.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	ЦиклыОбменаЗапросы.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	
	// устанавливаем отбор по формату документооборота в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.ФорматДокументооборота.Установить(Перечисления.ФорматыДокументооборотаСФНС.Приказ534);
	ЦиклыОбменаИсходящиеДокументыФНС.Отбор.ФорматДокументооборота.Установить(Перечисления.ФорматыДокументооборотаСФНС.Приказ534);
	ЦиклыОбменаВходящиеДокументыФНС.Отбор.ФорматДокументооборота.Установить(Перечисления.ФорматыДокументооборотаСФНС.Приказ534);
	ЦиклыОбменаЗапросы.Отбор.ФорматДокументооборота.Установить(Перечисления.ФорматыДокументооборотаСФНС.Приказ534);
	
	ЦиклыОбменаОтчетностьПФР.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР);
	ЦиклыОбменаИсходящиеДокументыПФР.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР);
	ЦиклыОбменаВходящиеДокументыПФР.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСПФР);
	
	// устанавливаем отбор по типу в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбменаОтчетность.Отбор.Тип.Значение.Очистить();
	ЦиклыОбменаОтчетность.Отбор.Тип.Значение.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ЦиклыОбменаОтчетность.Отбор.Тип.Значение.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ЦиклыОбменаОтчетность.Отбор.Тип.Использование = Истина;
	
	ТипыЦикловОбменаВходящиеФНС = Новый Массив;
	ТипыЦикловОбменаВходящиеФНС.Добавить(Перечисления.ТипыЦикловОбмена.ПисьмоНО);
	ТипыЦикловОбменаВходящиеФНС.Добавить(Перечисления.ТипыЦикловОбмена.Рассылка);
	ТипыЦикловОбменаВходящиеФНС.Добавить(Перечисления.ТипыЦикловОбмена.РассылкаГрупповая);
	ЦиклыОбменаВходящиеДокументыФНС.Отбор.Тип.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбменаВходящиеДокументыФНС.Отбор.Тип.Значение.ЗагрузитьЗначения(ТипыЦикловОбменаВходящиеФНС);
	ЦиклыОбменаВходящиеДокументыФНС.Отбор.Тип.Использование = Истина;
	
	ЦиклыОбменаИсходящиеДокументыФНС.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ЦиклыОбменаЗапросы.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.ИОН);
	
	ЦиклыОбменаОтчетностьПФР.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.ОтчетностьПФР);
	ЦиклыОбменаИсходящиеДокументыПФР.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРИсходящие);
	ЦиклыОбменаВходящиеДокументыПФР.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.НеформализованнаяПерепискаПФРВходящие);
	
	// устанавливаем отборы в табличном поле исходящих сообщений
	ИсходящиеДокументыФНС.Отбор.Тип.Установить(Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС);
	ИсходящиеДокументыПФР.Отбор.Тип.Установить(Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР);
	
	СтатусыСообщенийСтрахователя = Новый СписокЗначений;
	СтатусыСообщенийСтрахователя.Добавить(Перечисления.СтатусыПисем.Сохраненное);
	СтатусыСообщенийСтрахователя.Добавить(Перечисления.СтатусыПисем.Исходящее);
	СтатусыСообщенийСтрахователя.Добавить(Перечисления.СтатусыПисем.Отправленное);
	
	ИсходящиеДокументыФНС.Отбор.Статус.ВидСравнения = ВидСравнения.ВСписке;
	ИсходящиеДокументыФНС.Отбор.Статус.Значение = СтатусыСообщенийСтрахователя;
	ИсходящиеДокументыФНС.Отбор.Статус.Использование = Истина;
	
	ЭлементыФормы.ИсходящиеДокументыФНС.НастройкаОтбора.Организация.Доступность = Ложь;
	
	Для Каждого НастройкаПорядка Из ЭлементыФормы.ИсходящиеДокументыФНС.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	ЭлементыФормы.ИсходящиеДокументыФНС.ВосстанавливатьТекущуюСтроку = Истина;
	
	ИсходящиеДокументыФНС.Отбор.Статус.ВидСравнения = ВидСравнения.ВСписке;
	ИсходящиеДокументыФНС.Отбор.Статус.Значение = СтатусыСообщенийСтрахователя;
	ИсходящиеДокументыФНС.Отбор.Статус.Использование = Истина;
	
	Для Каждого НастройкаПорядка Из ЭлементыФормы.ИсходящиеДокументыФНС.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	ЭлементыФормы.ИсходящиеДокументыФНС.ВосстанавливатьТекущуюСтроку = Истина;
	
	// устанавливаем отборы в табличном поле входящих сообщений в ФНС
	ВходящиеДокументыФНС.Отбор.Тип.Установить(Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС);
	ВходящиеДокументыФНС.Отбор.Статус.Установить(Перечисления.СтатусыПисем.Полученное);
	
	ЭлементыФормы.ВходящиеДокументыФНС.НастройкаОтбора.Организация.Доступность = Ложь;
	
	Для Каждого НастройкаПорядка Из ЭлементыФормы.ВходящиеДокументыФНС.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	ЭлементыФормы.ВходящиеДокументыФНС.ВосстанавливатьТекущуюСтроку = Истина;
	
	// устанавливаем отборы в табличном поле запросов
	ЭлементыФормы.Запросы.НастройкаОтбора.Организация.Доступность = Ложь;
	
	Для Каждого НастройкаПорядка Из ЭлементыФормы.Запросы.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	ЭлементыФормы.Запросы.ВосстанавливатьТекущуюСтроку = Истина;
	
	// устанавливаем отборы в табличном поле входящих сообщений в ПФР
	ВходящиеДокументыПФР.Отбор.Тип.Установить(Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР);
	ВходящиеДокументыПФР.Отбор.Статус.Установить(Перечисления.СтатусыПисем.Полученное);
	
	//ЭлементыФормы.ВходящиеДокументыПФР.НастройкаОтбора.Организация.Доступность = Ложь;
	
	Для Каждого НастройкаПорядка Из ЭлементыФормы.ВходящиеДокументыПФР.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	ЭлементыФормы.ВходящиеДокументыПФР.ВосстанавливатьТекущуюСтроку = Истина;
	
	// устанавливаем отборы в табличном поле прочих сообщений
	ПрочиеСообщения.Отбор.ЦиклОбмена.Установить(Справочники.ЦиклыОбмена.ПустаяСсылка());
	ПрочиеСообщения.Отбор.Статус.Установить(Перечисления.СтатусыПисем.Полученное);
	
	// запрещаем настройку отбора и настройку периода в табличном поле прочих сообщений
	ЭлементыФормы.ПрочиеСообщения.НастройкаОтбора.УчетнаяЗапись.Доступность = Ложь;
	ЭлементыФормы.ПрочиеСообщения.НастройкаОтбора.ДатаТранспорта.Доступность = Ложь;
	ЭлементыФормы.ПрочиеСообщения.РазрешитьНастройкуПериода = Ложь;
	
	// восстанавливаем настройки, сохраненные при последнем закрытии формы
	ВосстановитьЗначения();
	
	ПоказатьОкноСПредупреждением534ПриНеобходимости();
	
	// устанавливаем сортировку по дате создания в табличных полях циклов обмена
	Для Каждого ИсточникЦикловОбмена Из ИсточникиЦикловОбмена Цикл
		Если ИсточникЦикловОбмена.Порядок.Количество() = 0 Тогда
			ИсточникЦикловОбмена.Порядок.Установить("ДатаСоздания");
		КонецЕсли;
	КонецЦикла;
	
	// устанавливаем сортировку по дате сообщения в табличном поле исходящих сообщений
	Если ИсходящиеДокументыФНС.Порядок.Количество() = 0 Тогда
		ИсходящиеДокументыФНС.Порядок.Установить("ДатаСообщения");
	КонецЕсли;
	
	// устанавливаем сортировку по дате сообщения в табличном поле входящих сообщений
	Если ВходящиеДокументыФНС.Порядок.Количество() = 0 Тогда
		ВходящиеДокументыФНС.Порядок.Установить("ДатаСообщения");
	КонецЕсли;
	
	// устанавливаем сортировку по дате документа в табличном поле запросов ИОН
	Если Запросы.Порядок.Количество() = 0 Тогда
		Запросы.Порядок.Установить("Дата");
	КонецЕсли;
	
	// устанавливаем сортировку по дате сообщения в табличном поле исходящих сообщений
	Если ИсходящиеДокументыПФР.Порядок.Количество() = 0 Тогда
		ИсходящиеДокументыПФР.Порядок.Установить("ДатаСообщения");
	КонецЕсли;
	
	// устанавливаем сортировку по дате сообщения в табличном поле входящих сообщений
	Если ВходящиеДокументыПФР.Порядок.Количество() = 0 Тогда
		ВходящиеДокументыПФР.Порядок.Установить("ДатаСообщения");
	КонецЕсли;
	
	// устанавливаем сортировку по дате транспорта в табличном поле прочих сообщений
	Если ПрочиеСообщения.Порядок.Количество() = 0 Тогда
		ПрочиеСообщения.Порядок.Установить("ДатаТранспорта");
	КонецЕсли;
	
	// в конфигурациях, в которых отсутствует журнал документов перс. учета,
	// скрываем пункт вызова соответствующего журнала документов и
	// значение в поле ввода отчета для отбора приводим к единственно возможному типу
	Если Метаданные.ЖурналыДокументов.Найти("ПерсонифицированныйУчетПФР") = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Перейти.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Перейти.Кнопки.ДокументыПерсонифицированногоУчета);
		ЭлементыФормы.ОтчетДляОтбораПФР.ВыбиратьТип = Ложь;
	КонецЕсли;
	
	// регулируем отображение учетных записей и заполняем значение по умолчанию
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	
	ЭлементыФормы.ОтборУчетнаяЗапись.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка = Истина;
	
	Если ЗначениеЗаполнено(ОтборУчетнаяЗапись) И УчетныеЗаписи.Найти(ОтборУчетнаяЗапись, "Объект") = Неопределено Тогда
		ОтборУчетнаяЗапись = Неопределено;
	КонецЕсли;
	
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию)
	И УчетныеЗаписи.Найти(ОргПоУмолчанию, "Объект") <> Неопределено
	И ((ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
	ИЛИ (НЕ ЗначениеЗаполнено(ОтборУчетнаяЗапись) И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию)))) Тогда
		ОтборУчетнаяЗапись = ОргПоУмолчанию;
	КонецЕсли;
	
	// инициализируем даты отбора по периоду
	ОсвежитьИнтервалОтбораПоПериоду(, Ложь, Ложь);
	
	// регулируем отборы
	УстановитьОтборы();
	
	// прорисовываем элементы управления
	УправлениеЭУ();
	
	// прорисовываем элементы управления на панели отбора циклов обмена отчетность с ФНС по периоду
	ПоказатьПериод();
	
	// подключаем обработчик ожидания для отслеживания даты в отборе по периоду
	ПодключитьОбработчикОжидания("ПроверкаСменыДаты", 60);
	
КонецПроцедуры

Процедура ЗаполнитьУчетныеЗаписи()
	
	// заполняем по ФНС
	ВыбраныВсеУчетныеЗаписи = (УчетныеЗаписи.Найти(Ложь, "Пометка") = Неопределено);
	ВсеУчетныеЗаписиНевыбраны = (УчетныеЗаписи.Найти(Истина, "Пометка") = Неопределено);
	
	ДопустимыеУчетныеЗаписи = КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена();
	
	Для Каждого ДопустимаяУчетнаяЗаписьФНС Из ДопустимыеУчетныеЗаписи Цикл
		Если УчетныеЗаписи.Найти(ДопустимаяУчетнаяЗаписьФНС, "Объект") = Неопределено Тогда
			НовСтр = УчетныеЗаписи.Добавить();
			НовСтр.Объект = ДопустимаяУчетнаяЗаписьФНС;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчетныхЗаписей = УчетныеЗаписи.Количество();
	Для ОбратныйИндекс = 1 По КоличествоУчетныхЗаписей Цикл
		НомСтр = КоличествоУчетныхЗаписей - ОбратныйИндекс;
		ТекЗапись = УчетныеЗаписи[НомСтр].Объект;
		Если ДопустимыеУчетныеЗаписи.Найти(ТекЗапись) = Неопределено Тогда
			Если ОтборУчетнаяЗапись = ТекЗапись Тогда
				ОтборУчетнаяЗапись = Неопределено;
			КонецЕсли;
			УчетныеЗаписи.Удалить(НомСтр);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраныВсеУчетныеЗаписи Тогда
		УчетныеЗаписи.ЗаполнитьЗначения(Истина, "Пометка");
	ИначеЕсли ВсеУчетныеЗаписиНевыбраны Тогда
		УчетныеЗаписи.ЗаполнитьЗначения(Ложь, "Пометка");
	КонецЕсли;
	
	УчетныеЗаписи.Сортировать("Объект");
	
КонецПроцедуры

Процедура ВосстановитьЗначения()

	// восстанавливаем страницу панели формы
	сохрТекущаяСтраницаПанелиФормы = ВосстановитьЗначение("КонтекстЭДО_ТекущаяСтраницаПанелиФормы");
	РезультатПоиска = ЭлементыФормы.ПанельФормы.Страницы.Найти(сохрТекущаяСтраницаПанелиФормы);
	Если РезультатПоиска <> Неопределено Тогда
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = РезультатПоиска;
	КонецЕсли;
	
	// восстанавливаем свойства отображения ЭУ обмена с ФНС
	ПоказыватьПанельОтбораЦикловОбменаОтчетности = ВосстановитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораОтчетности");
	ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка = (ПоказыватьПанельОтбораЦикловОбменаОтчетности = Истина);
	
	// восстанавливаем признаки отображения циклов обмена по неформализованным ФНС
	сохрИсходящиеДокументыФНС_ОтображатьЦиклыОбмена = ВосстановитьЗначение("КонтекстЭДО_ИсходящиеДокументыФНС_ОтображатьЦиклыОбмена");
	Если сохрИсходящиеДокументыФНС_ОтображатьЦиклыОбмена <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельИсходящиеДокументыФНС.Кнопки.ОтображатьСписокЦикловОбмена.Пометка = сохрИсходящиеДокументыФНС_ОтображатьЦиклыОбмена;
	КонецЕсли;
	
	сохрВходящиеДокументыФНС_ОтображатьЦиклыОбмена = ВосстановитьЗначение("КонтекстЭДО_ВходящиеДокументыФНС_ОтображатьЦиклыОбмена");
	Если сохрВходящиеДокументыФНС_ОтображатьЦиклыОбмена <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельВходящиеДокументыФНС.Кнопки.ОтображатьСписокЦикловОбмена.Пометка = сохрВходящиеДокументыФНС_ОтображатьЦиклыОбмена;
	КонецЕсли;
	
	//ПоказыватьПанельОтбораЦикловОбменаВходящихДокументов = ВосстановитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораВходящихДокументов");
	//ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка = (ПоказыватьПанельОтбораЦикловОбменаВходящихДокументов = Истина);
	
	//ПоказыватьПанельОтбораЦикловОбменаИсходящихДокументов = ВосстановитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораИсходящихДокументов");
	//ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка = (ПоказыватьПанельОтбораЦикловОбменаИсходящихДокументов = Истина);
	
	//ПоказыватьПанельОтбораЦикловОбменаЗапросов = ВосстановитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораЗапросы");
	//ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка = (ПоказыватьПанельОтбораЦикловОбменаЗапросов = Истина);
	
	//ОтборВходящийДокумент = ВосстановитьЗначение("КонтекстЭДО_ОтборВходящийДокумент");
	//ОтборИсходящийДокумент = ВосстановитьЗначение("КонтекстЭДО_ОтборИсходящийДокумент");
	
	СохрВидОтбораЦикловОбмена = ВосстановитьЗначение("КонтекстЭДО_ВидОтбораЦикловОбмена");
	Если СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора[СохрВидОтбораЦикловОбмена] = Неопределено Тогда
		Для Каждого ТипОтбора Из СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора Цикл
			ВидОтбораЦикловОбмена = ТипОтбора.Ключ;
			Прервать;
		КонецЦикла;
	Иначе
		ВидОтбораЦикловОбмена = СохрВидОтбораЦикловОбмена;
	КонецЕсли;
	
	// восстанавливаем признак режима одной учетной записи
	сохрРежимОднойУчетнойЗаписи = ВосстановитьЗначение("КонтекстЭДО_РежимОднойУчетнойЗаписи");
	ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка = ?(сохрРежимОднойУчетнойЗаписи = Неопределено, Ложь, сохрРежимОднойУчетнойЗаписи);
	
	// восстанавливаем список выбранных учетных записей ФНС
	сохрВыбранныеУчетныеЗаписи = ВосстановитьЗначение("КонтекстЭДО_ВыбранныеУчетныеЗаписи");
	Если сохрВыбранныеУчетныеЗаписи <> Неопределено Тогда
		ВыбранныеУчетныеЗаписи = Новый СписокЗначений;
		ВыбранныеУчетныеЗаписи.ЗагрузитьЗначения(сохрВыбранныеУчетныеЗаписи);
	Иначе
		ВыбранныеУчетныеЗаписи = Новый СписокЗначений;
		ВыбранныеУчетныеЗаписи.ЗагрузитьЗначения(УчетныеЗаписи.ВыгрузитьКолонку("Объект"));
	КонецЕсли;
	Для Каждого УчЗапись Из УчетныеЗаписи Цикл
		УчЗапись.Пометка = (ВыбранныеУчетныеЗаписи.НайтиПоЗначению(УчЗапись.Объект) <> Неопределено);
	КонецЦикла;
	Если ВыбранныеУчетныеЗаписи.Количество() <> 0 Тогда
		ОтборУчетнаяЗапись = ВыбранныеУчетныеЗаписи.Получить(0).Значение;
	КонецЕсли;
	
	// восстанавливаем свойства отбора по периоду
	сохрДатаНачалаПериодаОтчета = ВосстановитьЗначение("КонтекстЭДО_ДатаНачалаПериодаОтчета");
	Если сохрДатаНачалаПериодаОтчета = Неопределено Тогда
		ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(РабочаяДата, -1));
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	Иначе
		ДатаНачалаПериодаОтчета = сохрДатаНачалаПериодаОтчета;
		ДатаКонцаПериодаОтчета = ВосстановитьЗначение("КонтекстЭДО_ДатаКонцаПериодаОтчета");
	КонецЕсли;
	
	//// восстанавливаем свойства отбора циклов обмена с ФНС по отчетности по завершенности
	//сохрФлажокОтборСодержащиеОшибки = ВосстановитьЗначение("КонтекстЭДО_Отчетность_ФлажокОтборСодержащиеОшибки");
	//Если сохрФлажокОтборСодержащиеОшибки <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиОтчетность.Кнопки.ОтборСОшибками.Пометка = сохрФлажокОтборСодержащиеОшибки;
	//КонецЕсли;
	//сохрФлажокОтборЗавершенные = ВосстановитьЗначение("КонтекстЭДО_Отчетность_ФлажокОтборЗавершенные");
	//Если сохрФлажокОтборЗавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиОтчетность.Кнопки.ОтборЗавершенные.Пометка = сохрФлажокОтборЗавершенные;
	//КонецЕсли;
	//сохрФлажокОтборНезавершенные = ВосстановитьЗначение("КонтекстЭДО_Отчетность_ФлажокОтборНезавершенные");
	//Если сохрФлажокОтборНезавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиОтчетность.Кнопки.ОтборНезавершенные.Пометка = сохрФлажокОтборНезавершенные;
	//КонецЕсли;
	
	//// восстанавливаем свойства отбора циклов обмена с ФНС по входящим документам по завершенности
	//сохрФлажокОтборСодержащиеОшибки = ВосстановитьЗначение("КонтекстЭДО_ВходящиеДокументы_ФлажокОтборСодержащиеОшибки");
	//Если сохрФлажокОтборСодержащиеОшибки <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиВходящиеДокументы.Кнопки.ОтборСОшибками.Пометка = сохрФлажокОтборСодержащиеОшибки;
	//КонецЕсли;
	//сохрФлажокОтборЗавершенные = ВосстановитьЗначение("КонтекстЭДО_ВходящиеДокументы_ФлажокОтборЗавершенные");
	//Если сохрФлажокОтборЗавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиВходящиеДокументы.Кнопки.ОтборЗавершенные.Пометка = сохрФлажокОтборЗавершенные;
	//КонецЕсли;
	//сохрФлажокОтборНезавершенные = ВосстановитьЗначение("КонтекстЭДО_ВходящиеДокументы_ФлажокОтборНезавершенные");
	//Если сохрФлажокОтборНезавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиВходящиеДокументы.Кнопки.ОтборНезавершенные.Пометка = сохрФлажокОтборНезавершенные;
	//КонецЕсли;
	
	//// восстанавливаем свойства отбора циклов обмена с ФНС по исходящим документам по завершенности
	//сохрФлажокОтборСодержащиеОшибки = ВосстановитьЗначение("КонтекстЭДО_ИсходящиеДокументы_ФлажокОтборСодержащиеОшибки");
	//Если сохрФлажокОтборСодержащиеОшибки <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиИсходящиеДокументы.Кнопки.ОтборСОшибками.Пометка = сохрФлажокОтборСодержащиеОшибки;
	//КонецЕсли;
	//сохрФлажокОтборЗавершенные = ВосстановитьЗначение("КонтекстЭДО_ИсходящиеДокументы_ФлажокОтборЗавершенные");
	//Если сохрФлажокОтборЗавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиИсходящиеДокументы.Кнопки.ОтборЗавершенные.Пометка = сохрФлажокОтборЗавершенные;
	//КонецЕсли;
	//сохрФлажокОтборНезавершенные = ВосстановитьЗначение("КонтекстЭДО_ИсходящиеДокументы_ФлажокОтборНезавершенные");
	//Если сохрФлажокОтборНезавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиИсходящиеДокументы.Кнопки.ОтборНезавершенные.Пометка = сохрФлажокОтборНезавершенные;
	//КонецЕсли;
	
	//// восстанавливаем свойства отбора циклов обмена с ФНС по запросам по завершенности
	//сохрФлажокОтборСодержащиеОшибки = ВосстановитьЗначение("КонтекстЭДО_Запросы_ФлажокОтборСодержащиеОшибки");
	//Если сохрФлажокОтборСодержащиеОшибки <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиЗапросы.Кнопки.ОтборСОшибками.Пометка = сохрФлажокОтборСодержащиеОшибки;
	//КонецЕсли;
	//сохрФлажокОтборЗавершенные = ВосстановитьЗначение("КонтекстЭДО_Запросы_ФлажокОтборЗавершенные");
	//Если сохрФлажокОтборЗавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиЗапросы.Кнопки.ОтборЗавершенные.Пометка = сохрФлажокОтборЗавершенные;
	//КонецЕсли;
	//сохрФлажокОтборНезавершенные = ВосстановитьЗначение("КонтекстЭДО_Запросы_ФлажокОтборНезавершенные");
	//Если сохрФлажокОтборНезавершенные <> Неопределено Тогда
	//	ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиЗапросы.Кнопки.ОтборНезавершенные.Пометка = сохрФлажокОтборНезавершенные;
	//КонецЕсли;
	
	// восстанавливаем значение отчета для отбора
	ОтчетДляОтбора = ВосстановитьЗначение("КонтекстЭДО_ОтчетДляОтбора");
	УстановитьПредставлениеОтчетаДляОтбора();
	
	// восстанавливаем значение внешнего электронного представления для отбора
	ЭлектронноеПредставлениеДляОтбора = ВосстановитьЗначение("КонтекстЭДО_ЭлектронноеПредставлениеДляОтбора");
	
	// восстанавливаем значение вида отчета для отбора
	ВидОтчетаДляОтбора = ВосстановитьЗначение("КонтекстЭДО_ВидОтчетаДляОтбора");
	
	// восстанавлвиаем значение вида документа
	сохрВидДокумента = ВосстановитьЗначение("КонтекстЭДО_ВидДокумента");
	Если сохрВидДокумента = Неопределено Тогда
		ВидДокумента = 0;
	Иначе
		ВидДокумента = сохрВидДокумента;
	КонецЕсли;
	
	// восстанавлвиаем значение номера корректировки
	сохрНомерКорректировки = ВосстановитьЗначение("КонтекстЭДО_НомерКорректировки");
	Если сохрНомерКорректировки = Неопределено Тогда
		НомерКорректировки = 1;
	Иначе
		НомерКорректировки = сохрНомерКорректировки;
	КонецЕсли;
	
	// восстанавливаем признак уточнения номера корректировки для отбора
	сохрУточнениеНомераКорректировки = ВосстановитьЗначение("КонтекстЭДО_УточнениеНомераКорректировки");
	Если сохрУточнениеНомераКорректировки = Неопределено Тогда
		УточнениеНомераКорректировки = Ложь;
	Иначе
		УточнениеНомераКорректировки = сохрУточнениеНомераКорректировки;
	КонецЕсли;
	
	// восстанавливаем текущую страницу панели обмена с ФНС
	сохрТекущаяСтраницаПанелиФНС = ВосстановитьЗначение("КонтекстЭДО_ТекущаяСтраницаПанелиФНС");
	Для Каждого Страница из ЭлементыФормы.ПанельФНС.Страницы Цикл
		Если Страница.Имя = сохрТекущаяСтраницаПанелиФНС Тогда
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = Страница;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// восстанавливаем текущую страницу панели обмена с ПФР
	сохрТекущаяСтраницаПанелиПФР = ВосстановитьЗначение("КонтекстЭДО_ТекущаяСтраницаПанелиПФР");
	Для Каждого Страница из ЭлементыФормы.ПанельПФР.Страницы Цикл
		Если Страница.Имя = сохрТекущаяСтраницаПанелиПФР Тогда
			ЭлементыФормы.ПанельПФР.ТекущаяСтраница = Страница;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// восстанавливаем период отбора
	сохрДатаНачалаИнтервалаОтбора = ВосстановитьЗначение("КонтекстЭДО_ДатаНачалаИнтервалаОтбора");
	Если сохрДатаНачалаИнтервалаОтбора <> Неопределено Тогда
		мДатаНачалаИнтервалаОтбора = сохрДатаНачалаИнтервалаОтбора;
	КонецЕсли;
	
	сохрДатаОкончанияИнтервалаОтбора = ВосстановитьЗначение("КонтекстЭДО_ДатаОкончанияИнтервалаОтбора");
	Если сохрДатаОкончанияИнтервалаОтбора <> Неопределено Тогда
		мДатаОкончанияИнтервалаОтбора = сохрДатаОкончанияИнтервалаОтбора;
	КонецЕсли;
	
	сохрВариантПериода = ВосстановитьЗначение("КонтекстЭДО_ВариантПериода");
	Если сохрВариантПериода <> Неопределено Тогда
		КнопкаПериода = ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки.Найти(сохрВариантПериода);
		Если КнопкаПериода <> Неопределено Тогда
			КнопкаПериода.Пометка = Истина;
		КонецЕсли;
	Иначе
		ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки.ТекущийМесяц.Пометка = Истина;
	КонецЕсли;
	
	//// восстанавлвиаем свойства отбора циклов обмена с ФНС по запросам
	//ОтборВидУслуги = ВосстановитьЗначение("КонтекстЭДО_ВидУслугиДляОтбора");
	//ОтборЗапрос = ВосстановитьЗначение("КонтекстЭДО_ЗапросДляОтбора");
	
	// восстанавливаем список выбранных циклов обмена по отчетности ФНС
	сохрВыбранныеЦиклыОбмена = ВосстановитьЗначение("КонтекстЭДО_ВыбранныеЦиклыОбменаПоОтчетности");
	Если сохрВыбранныеЦиклыОбмена <> Неопределено Тогда
		ВыбранныеЦиклыОбмена = сохрВыбранныеЦиклыОбмена;
	КонецЕсли;
	
	// восстанавливаем список выбранных циклов обмена по отчетности ПФР
	сохрВыбранныеЦиклыОбменаПФР = ВосстановитьЗначение("КонтекстЭДО_ВыбранныеЦиклыОбменаПоОтчетностиПФР");
	Если сохрВыбранныеЦиклыОбменаПФР <> Неопределено Тогда
		ВыбранныеЦиклыОбменаПФР = сохрВыбранныеЦиклыОбменаПФР;
	КонецЕсли;
	
	// если это первое открытие, то установим сортировку списка
	ЭтоПервоеОткрытие = (ВосстановитьЗначение("КонтекстЭДО_ПервоеОткрытие") <> Ложь);
	Если ЭтоПервоеОткрытие Тогда
		Для Каждого ИсточникЦикловОбмена Из ИсточникиЦикловОбмена Цикл
			ИсточникЦикловОбмена.Порядок.Установить("ДатаСоздания");
		КонецЦикла;
		ПрочиеСообщения.Порядок.Установить("ДатаТранспорта");
	КонецЕсли;
	
	// восстанавливаем признак показа панели отбора для отчетности ПФР
	ПоказыватьПанельОтбораЦикловОбменаОтчетностиПФР = ВосстановитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораОтчетностиПФР");
	ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Отобрать.Пометка = (ПоказыватьПанельОтбораЦикловОбменаОтчетностиПФР = Истина);
	
	// восстснавливаем вид отбора циклов обмена (ПФР)
	СохрВидОтбораЦикловОбменаПФР = ВосстановитьЗначение("КонтекстЭДО_ВидОтбораЦикловОбменаПФР");
	Если СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора[СохрВидОтбораЦикловОбменаПФР] = Неопределено Тогда
		Для Каждого ТипОтбора Из СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора Цикл
			ВидОтбораЦикловОбменаПФР = ТипОтбора.Ключ;
			Прервать;
		КонецЦикла;
	Иначе
		ВидОтбораЦикловОбменаПФР = СохрВидОтбораЦикловОбменаПФР;
	КонецЕсли;
	
	// восстанавливаем отчет для отбора (ПФР)
	сохрОтчетДляОтбораПФР = ВосстановитьЗначение("КонтекстЭДО_ОтчетДляОтбораПФР");
	Если сохрОтчетДляОтбораПФР <> Неопределено Тогда
		ОтчетДляОтбораПФР = сохрОтчетДляОтбораПФР;
		УстановитьПредставлениеОтчетаДляОтбораПФР();
	КонецЕсли;
	
	// восстанавливаем вид отчета для отбора (ПФР)
	сохрВидОтчетаДляОтбораПФР = ВосстановитьЗначение("КонтекстЭДО_ВидОтчетаДляОтбораПФР");
	Если сохрВидОтчетаДляОтбораПФР <> Неопределено Тогда
		ВидОтчетаДляОтбораПФР = сохрВидОтчетаДляОтбораПФР;
	КонецЕсли;
	
	// восстанавливаем признаки отображения циклов обмена по неформализованным ПФР
	сохрИсходящиеДокументыПФР_ОтображатьЦиклыОбмена = ВосстановитьЗначение("КонтекстЭДО_ИсходящиеДокументыПФР_ОтображатьЦиклыОбмена");
	Если сохрИсходящиеДокументыПФР_ОтображатьЦиклыОбмена <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельИсходящиеДокументыПФР.Кнопки.ОтображатьСписокЦикловОбмена.Пометка = сохрИсходящиеДокументыПФР_ОтображатьЦиклыОбмена;
	КонецЕсли;
	
	сохрВходящиеДокументыПФР_ОтображатьЦиклыОбмена = ВосстановитьЗначение("КонтекстЭДО_ВходящиеДокументыПФР_ОтображатьЦиклыОбмена");
	Если сохрВходящиеДокументыПФР_ОтображатьЦиклыОбмена <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельВходящиеДокументыПФР.Кнопки.ОтображатьСписокЦикловОбмена.Пометка = сохрВходящиеДокументыПФР_ОтображатьЦиклыОбмена;
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьЗначения()
	
	СохранитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораОтчетности",					ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка);
	//СохранитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораЗапросы",						ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка);
	//СохранитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораВходящихДокументов",			ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка);
	//СохранитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораИсходящихДокументов",		ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка);
	
	СохранитьЗначение("КонтекстЭДО_ПоказыватьПанельОтбораОтчетностиПФР",				ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Отобрать.Пометка);
	
	СохранитьЗначение("КонтекстЭДО_ИсходящиеДокументыФНС_ОтображатьЦиклыОбмена", 		ЭлементыФормы.КоманднаяПанельИсходящиеДокументыФНС.Кнопки.ОтображатьСписокЦикловОбмена.Пометка);
	СохранитьЗначение("КонтекстЭДО_ВходящиеДокументыФНС_ОтображатьЦиклыОбмена", 		ЭлементыФормы.КоманднаяПанельВходящиеДокументыФНС.Кнопки.ОтображатьСписокЦикловОбмена.Пометка);
	//СохранитьЗначение("КонтекстЭДО_ОтборИсходящийДокумент",								ОтборИсходящийДокумент);
	//СохранитьЗначение("КонтекстЭДО_ОтборВходящийДокумент",								ОтборВходящийДокумент);
	
	СохранитьЗначение("КонтекстЭДО_ВидОтбораЦикловОбмена",								ВидОтбораЦикловОбмена);
	СохранитьЗначение("КонтекстЭДО_ДатаНачалаПериодаОтчета",							ДатаНачалаПериодаОтчета);
	СохранитьЗначение("КонтекстЭДО_ДатаКонцаПериодаОтчета",								ДатаКонцаПериодаОтчета);
	СохранитьЗначение("КонтекстЭДО_ОтчетДляОтбора",										ОтчетДляОтбора);
	СохранитьЗначение("КонтекстЭДО_ЭлектронноеПредставлениеДляОтбора",					ЭлектронноеПредставлениеДляОтбора);
	СохранитьЗначение("КонтекстЭДО_ВидОтчетаДляОтбора",									ВидОтчетаДляОтбора);
	СохранитьЗначение("КонтекстЭДО_ВидДокумента",										ВидДокумента);
	СохранитьЗначение("КонтекстЭДО_НомерКорректировки",									НомерКорректировки);
	СохранитьЗначение("КонтекстЭДО_УточнениеНомераКорректировки",						УточнениеНомераКорректировки);
	
	СохранитьЗначение("КонтекстЭДО_ВидОтбораЦикловОбменаПФР",							ВидОтбораЦикловОбменаПФР);
	СохранитьЗначение("КонтекстЭДО_ОтчетДляОтбораПФР",									ОтчетДляОтбораПФР);
	СохранитьЗначение("КонтекстЭДО_ВидОтчетаДляОтбораПФР",								ВидОтчетаДляОтбораПФР);
	
	СохранитьЗначение("КонтекстЭДО_РежимОднойУчетнойЗаписи",							ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка);
	СохранитьЗначение("КонтекстЭДО_ТекущаяСтраницаПанелиФНС",							ЭлементыФормы.ПанельФНС.ТекущаяСтраница.Имя);
	СохранитьЗначение("КонтекстЭДО_ВыбранныеУчетныеЗаписи",								ВыбранныеУчетныеЗаписи(ЭлементыФормы.ПанельФормы.Страницы.ФНС));
	СохранитьЗначение("КонтекстЭДО_ДатаНачалаИнтервалаОтбора",							мДатаНачалаИнтервалаОтбора);
	СохранитьЗначение("КонтекстЭДО_ДатаОкончанияИнтервалаОтбора",						мДатаОкончанияИнтервалаОтбора);
	Для Каждого Кнопка Из ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки Цикл
		Если Кнопка.Пометка Тогда
			СохранитьЗначение("КонтекстЭДО_ВариантПериода", Кнопка.Имя);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СохранитьЗначение("КонтекстЭДО_ТекущаяСтраницаПанелиФормы",							ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя);
	
	СохранитьЗначение("КонтекстЭДО_ТекущаяСтраницаПанелиПФР",							ЭлементыФормы.ПанельПФР.ТекущаяСтраница.Имя);
	
	//СохранитьЗначение("КонтекстЭДО_ВидОтбораЦикловОбменаЗапросы",						ВидОтбораЦикловОбменаЗапросы);
	//СохранитьЗначение("КонтекстЭДО_ВидУслугиДляОтбора",									ОтборВидУслуги);
	//СохранитьЗначение("КонтекстЭДО_ЗапросДляОтбора",									ОтборЗапрос);
	
	СохранитьЗначение("КонтекстЭДО_ВыбранныеЦиклыОбменаПоОтчетности", 					ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность));
	СохранитьЗначение("КонтекстЭДО_ВыбранныеЦиклыОбменаПоОтчетностиПФР",				ВыбранныеЦиклыОбменаПФРСУчетомОтборов(ЦиклыОбменаОтчетностьПФР));
	
	СохранитьЗначение("КонтекстЭДО_ИсходящиеДокументыПФР_ОтображатьЦиклыОбмена", 		ЭлементыФормы.КоманднаяПанельИсходящиеДокументыПФР.Кнопки.ОтображатьСписокЦикловОбмена.Пометка);
	СохранитьЗначение("КонтекстЭДО_ВходящиеДокументыПФР_ОтображатьЦиклыОбмена", 		ЭлементыФормы.КоманднаяПанельВходящиеДокументыПФР.Кнопки.ОтображатьСписокЦикловОбмена.Пометка);
	
	СохранитьЗначение("КонтекстЭДО_ПервоеОткрытие", Ложь);
	
КонецПроцедуры

Процедура ОбновитьЗаголовокКнопкиОтбораПоПериоду()
	
	Если НЕ ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) И НЕ ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
		ЗаголовокКнопки = " Период: не ограничен";
	ИначеЕсли НЕ ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
		ЗаголовокКнопки = " Период: с " + Формат(мДатаНачалаИнтервалаОтбора, "ДФ=dd.MM.yyyy");
	ИначеЕсли НЕ ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) Тогда
		ЗаголовокКнопки = " Период: по " + Формат(мДатаОкончанияИнтервалаОтбора, "ДФ=dd.MM.yyyy");
	Иначе
		ЗаголовокКнопки = " Период: с " + Формат(мДатаНачалаИнтервалаОтбора, "ДФ=dd.MM.yyyy") + " по " + Формат(мДатаОкончанияИнтервалаОтбора, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Текст = ЗаголовокКнопки;
	
КонецПроцедуры

Функция ВыбранныеУчетныеЗаписи(Знач СтраницаФормы = Неопределено)
	
	Если СтраницаФормы = Неопределено Тогда
		СтраницаФормы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница;
	КонецЕсли;
	
	Если ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка Тогда
		УчЗаписи = Новый Массив;
		Если ЗначениеЗаполнено(ОтборУчетнаяЗапись) Тогда
			УчЗаписи.Добавить(ОтборУчетнаяЗапись);
		КонецЕсли;
		Возврат УчЗаписи;
	Иначе
		УчЗаписи = Новый Массив;
		Для Каждого УчЗап Из УчетныеЗаписи Цикл
			Если УчЗап.Пометка Тогда
				УчЗаписи.Добавить(УчЗап.Объект);
			КонецЕсли;
		КонецЦикла;
		Возврат УчЗаписи;
	КонецЕсли;
	
КонецФункции

Процедура УправлениеЭУ()
	
	РежимОднойУчетнойЗаписи = ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка;
	Если НЕ РежимОднойУчетнойЗаписи Тогда
		
		// регулируем показ верхней панели с учетной записью
		ЭлементыФормы.ПанельУчетнаяЗапись.Свертка = РежимСверткиЭлементаУправления.Верх;
		
		// регулируем показ левой панели с учетными записями
		Если ЭлементыФормы.Разделитель1.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
			
			// сбрасываем левую привязку панели формы перед изменением сверток остальных связанных элементов
			ЭлементыФормы.ПанельФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормы.ПанельУчетныеЗаписи.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			ЭлементыФормы.ПанельФормы.Ширина = ЭлементыФормы.ПанельФормы.Ширина - ЭлементыФормы.ПанельУчетныеЗаписи.Ширина - ЭлементыФормы.Разделитель1.Ширина;
			ЭлементыФормы.ПанельФормы.Лево = ЭлементыФормы.ПанельФормы.Лево + ЭлементыФормы.ПанельУчетныеЗаписи.Ширина + ЭлементыФормы.Разделитель1.Ширина;
			
			ЭлементыФормы.ПанельФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Право);
			
		КонецЕсли;
		
	Иначе
		
		// регулируем показ верхней панели с учетной записью
		ЭлементыФормы.ПанельУчетнаяЗапись.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		// регулируем показ левой панели с учетными записями
		Если ЭлементыФормы.Разделитель1.Свертка <> РежимСверткиЭлементаУправления.Лево Тогда
			
			ЛеваяКоордината = ЭлементыФормы.ПанельУчетныеЗаписи.Лево;
			ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Лево;
			ЭлементыФормы.ПанельУчетныеЗаписи.Свертка = РежимСверткиЭлементаУправления.Лево;
			ЛевоДоРасширения = ЭлементыФормы.ПанельФормы.Лево;
			
			ЭлементыФормы.ПанельФормы.Лево = ЛеваяКоордината;
			ЭлементыФормы.ПанельФормы.Ширина = ЭлементыФормы.ПанельФормы.Ширина + ЛевоДоРасширения - ЛеваяКоордината;
			
			ЭлементыФормы.ПанельФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельФормы, ГраницаЭлементаУправления.Лево);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница;
	Если ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.ФНС Тогда
	
		ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.ТекущаяСтраница;
		Если ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Отчетность Тогда
			ЭлементыФормы.ПанельЦиклыОбменаОтчетностьОтбор.Свертка = ?(ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			Если ЭлементыФормы.ПанельЦиклыОбменаОтчетностьОтбор.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
				ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.ТекущаяСтраница = СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора[ВидОтбораЦикловОбмена];
				ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Свертка = ?(ВидОтбораЦикловОбмена = "По периоду отчета", РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			Иначе
				ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Свертка = РежимСверткиЭлементаУправления.Верх;
			КонецЕсли;
			ЭлементыФормы.ФлажокУточнениеНомераКорректировки.Доступность = (ВидДокумента = 1);
			ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1 И УточнениеНомераКорректировки);
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы Тогда
			
			ПризнакПоказаПанелиОбмена = ЭлементыФормы.КоманднаяПанельВходящиеДокументыФНС.Кнопки.ОтображатьСписокЦикловОбмена.Пометка;
			Если ПризнакПоказаПанелиОбмена Тогда
				Если ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
					ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельВходящиеДокументыФНС.Высота = ЭлементыФормы.ПанельВходящиеДокументыФНС.Высота - ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Высота - ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыФНС.Высота;
					ЭлементыФормы.ПанельВходящиеДокументыФНС.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыФНС, ГраницаЭлементаУправления.Верх);
				КонецЕсли;
			Иначе
				Если ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
					ВерхняяКоордината = ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Верх;
					ВысотаДоРасширения = ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Высота;
					ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельВходящиеДокументыФНС.Высота = ЭлементыФормы.ПанельВходящиеДокументыФНС.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыФНС.Высота;
					ЭлементыФормы.ПанельВходящиеДокументыФНС.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельФНС, ГраницаЭлементаУправления.Низ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы Тогда
			
			ПризнакПоказаПанелиОбмена = ЭлементыФормы.КоманднаяПанельИсходящиеДокументыФНС.Кнопки.ОтображатьСписокЦикловОбмена.Пометка;
			Если ПризнакПоказаПанелиОбмена Тогда
				Если ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
					ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельИсходящиеДокументыФНС.Высота = ЭлементыФормы.ПанельИсходящиеДокументыФНС.Высота - ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Высота - ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыФНС.Высота;
					ЭлементыФормы.ПанельИсходящиеДокументыФНС.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыФНС, ГраницаЭлементаУправления.Верх);
				КонецЕсли;
			Иначе
				Если ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
					ВерхняяКоордината = ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Верх;
					ВысотаДоРасширения = ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Высота;
					ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыФНС.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельИсходящиеДокументыФНС.Высота = ЭлементыФормы.ПанельИсходящиеДокументыФНС.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыФНС.Высота;
					ЭлементыФормы.ПанельИсходящиеДокументыФНС.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельФНС, ГраницаЭлементаУправления.Низ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Запросы Тогда
			
			ПризнакПоказаПанелиОбмена = ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.ОтображатьСписокЦикловОбмена.Пометка;
			Если ПризнакПоказаПанелиОбмена Тогда
				Если ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
					ЭлементыФормы.РазделительЦиклыОбменаЗапросы.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельЗапросы.Высота = ЭлементыФормы.ПанельЗапросы.Высота - ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Высота - ЭлементыФормы.РазделительЦиклыОбменаЗапросы.Высота;
					ЭлементыФормы.ПанельЗапросы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбменаЗапросы, ГраницаЭлементаУправления.Верх);
				КонецЕсли;
			Иначе
				Если ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
					ВерхняяКоордината = ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Верх;
					ВысотаДоРасширения = ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Высота;
					ЭлементыФормы.РазделительЦиклыОбменаЗапросы.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельЦиклыОбменаЗапросы.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельЗапросы.Высота = ЭлементыФормы.ПанельЗапросы.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбменаЗапросы.Высота;
					ЭлементыФормы.ПанельЗапросы.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельФНС, ГраницаЭлементаУправления.Низ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.ПФР Тогда
		
		ТекущаяСтраницаОсновнойПанелиПФР = ЭлементыФормы.ПанельПФР.ТекущаяСтраница;
		Если ТекущаяСтраницаОсновнойПанелиПФР = ЭлементыФормы.ПанельПФР.Страницы.Отчетность Тогда
			
			ЭлементыФормы.ПанельЦиклыОбменаОтчетностьПФРОтбор.Свертка = ?(ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Отобрать.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			Если ЭлементыФормы.ПанельЦиклыОбменаОтчетностьПФРОтбор.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
				СтраницаПанели = СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора[ВидОтбораЦикловОбменаПФР];
				Если СтраницаПанели <> Неопределено Тогда
					ЭлементыФормы.ПанельЦиклыОбменаПФРЗначениеОтбора.ТекущаяСтраница = СтраницаПанели;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанелиПФР = ЭлементыФормы.ПанельПФР.Страницы.ИсходящиеДокументы Тогда
			
			ПризнакПоказаПанелиОбмена = ЭлементыФормы.КоманднаяПанельИсходящиеДокументыПФР.Кнопки.ОтображатьСписокЦикловОбмена.Пометка;
			Если ПризнакПоказаПанелиОбмена Тогда
				Если ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
					ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельИсходящиеДокументыПФР.Высота = ЭлементыФормы.ПанельИсходящиеДокументыПФР.Высота - ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Высота - ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыПФР.Высота;
					ЭлементыФормы.ПанельИсходящиеДокументыПФР.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыПФР, ГраницаЭлементаУправления.Верх);
				КонецЕсли;
			Иначе
				Если ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
					ВерхняяКоордината = ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Верх;
					ВысотаДоРасширения = ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Высота;
					ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельЦиклыОбменаИсходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельИсходящиеДокументыПФР.Высота = ЭлементыФормы.ПанельИсходящиеДокументыПФР.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбменаИсходящиеДокументыПФР.Высота;
					ЭлементыФормы.ПанельИсходящиеДокументыПФР.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельПФР, ГраницаЭлементаУправления.Низ);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанелиПФР = ЭлементыФормы.ПанельПФР.Страницы.ВходящиеДокументы Тогда
			
			ПризнакПоказаПанелиОбмена = ЭлементыФормы.КоманднаяПанельВходящиеДокументыПФР.Кнопки.ОтображатьСписокЦикловОбмена.Пометка;
			Если ПризнакПоказаПанелиОбмена Тогда
				Если ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
					ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Нет;
					ЭлементыФормы.ПанельВходящиеДокументыПФР.Высота = ЭлементыФормы.ПанельВходящиеДокументыПФР.Высота - ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Высота - ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыПФР.Высота;
					ЭлементыФормы.ПанельВходящиеДокументыПФР.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыПФР, ГраницаЭлементаУправления.Верх);
				КонецЕсли;
			Иначе
				Если ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
					ВерхняяКоордината = ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Верх;
					ВысотаДоРасширения = ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Высота;
					ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельЦиклыОбменаВходящиеДокументыПФР.Свертка = РежимСверткиЭлементаУправления.Низ;
					ЭлементыФормы.ПанельВходящиеДокументыПФР.Высота = ЭлементыФормы.ПанельВходящиеДокументыПФР.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбменаВходящиеДокументыПФР.Высота;
					ЭлементыФормы.ПанельВходящиеДокументыПФР.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельПФР, ГраницаЭлементаУправления.Низ);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура КоманднаяПанельУчетныеЗаписиУстановитьФлажки(Кнопка)
	
	УчетныеЗаписи.ЗаполнитьЗначения(Истина, "Пометка");
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельУчетныеЗаписиСнятьФлажки(Кнопка)
	
	УчетныеЗаписи.ЗаполнитьЗначения(Ложь, "Пометка");
	УстановитьОтборы();
	
КонецПроцедуры

Функция ВидимыеЦиклыОбмена(Элемент)
	
	Результат = Новый Массив;
	
	СоответствиеВидовСравненияЗнакамОпераций = Новый Соответствие;
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.Больше, ">");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.БольшеИлиРавно, ">=");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.ВИерархии, "В ИЕРАРХИИ");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.ВСписке, "В");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.Меньше, "<");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.МеньшеИлиРавно, "<=");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.НеВИерархии, "НЕ В ИЕРАРХИИ");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.НеВСписке, "НЕ В");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.НеРавно, "<>");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.Равно, "=");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦиклыОбмена.Ссылка
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена");
						  
	// генерируем доп. условия
	ДопУсловия = Новый Массив;
	Для Каждого ЭлементОтбора Из Элемент.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ИмяПараметра = "парам" + ЭлементОтбора.Имя;
			ДопУсловия.Добавить("ЦиклыОбмена."
								+ ЭлементОтбора.Имя
								+ " "
								+ СоответствиеВидовСравненияЗнакамОпераций[ЭлементОтбора.ВидСравнения]
								+ " (&" + ИмяПараметра + ")");
			Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 1 По ДопУсловия.Количество() Цикл
		ТекУсловие = ДопУсловия[Инд - 1];
		Если Инд = 1 Тогда
			Запрос.Текст = Запрос.ТЕкст + "
						|ГДЕ
						|	" + ТекУсловие;
		Иначе
			Запрос.Текст = Запрос.Текст + "
						|	И " + ТекУсловие;
		КонецЕсли;
	КонецЦикла;
	
	// генерируем код сортировки
	ЭлементыСортировки = Новый Массив;
	Для Каждого ЭлементПорядка Из Элемент.Порядок Цикл
		ЭлементыСортировки.Добавить("ЦиклыОбмена." + ЭлементПорядка.Данные + ?(ЭлементПорядка.Направление = НаправлениеСортировки.Возр, "", " УБЫВ"));
	КонецЦикла;
	ЭлементыСортировки.Добавить("ЦиклыОбмена.Ссылка");
	
	Для Инд = 1 По ЭлементыСортировки.Количество() Цикл
		ТекЭлементСортировки = ЭлементыСортировки[Инд - 1];
		Если Инд = 1 Тогда
			Запрос.Текст = Запрос.Текст + "
						|УПОРЯДОЧИТЬ ПО
						|	" + ТекЭлементСортировки;
		Иначе
			Запрос.Текст = Запрос.Текст + ",
						|	" + ТекЭлементСортировки;
		КонецЕсли;
	КонецЦикла;
	
	// выполняем запрос и заполняем массив результата
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ТабличноеПолеЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если Элемент.Колонки.Найти("Пометка") <> Неопределено И Элемент.Колонки.Пометка.Видимость Тогда
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Пометка.Флажок = (ВыбранныеЦиклыОбмена.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ТабличноеПолеЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Функция УчетныеЗаписиПоСпискуОрганизаций(СписокОрганизаций)
	
	Результат = Новый Массив;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Организации.УчетнаяЗаписьОбмена КАК УчетнаяЗапись
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.Ссылка В(&Ссылка)
	                      |	И Организации.ВидОбменаСКонтролирующимиОрганами = &ВидОбменаСКонтролирующимиОрганами");
	Запрос.УстановитьПараметр("Ссылка", СписокОрганизаций);
	Запрос.УстановитьПараметр("ВидОбменаСКонтролирующимиОрганами", Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.УчетнаяЗапись);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура УстановитьОтборы()
	
	ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.ФНС Тогда
	
		ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.ТекущаяСтраница;
		ТекущийИсточникЦикловОбмена = СоответствиеСтраницыПанелиИсточникуЦикловОбмена[ТекущаяСтраницаОсновнойПанели];
		//ТекущаяПанельОтбораПоЗавершенности = СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности[ТекущаяСтраницаОсновнойПанели];
		
		Для Каждого ЭлементОтбора Из ТекущийИсточникЦикловОбмена.Отбор Цикл
			Если ЭлементОтбора.Имя <> "Тип" И ЭлементОтбора.Имя <> "ПометкаУдаления" И ЭлементОтбора.Имя <> "Вид" И ЭлементОтбора.Имя <> "ФорматДокументооборота" Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ОтборПоОснованиюВключен = Ложь;
		Если (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Отчетность И ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка И (ВидОтбораЦикловОбмена = "По исходному отчету" ИЛИ ВидОтбораЦикловОбмена = "По эл. представлению")) Тогда
		//ИЛИ (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы И ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка)
		//ИЛИ (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы И ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка)
		//ИЛИ (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Запросы И ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка И ВидОтбораЦикловОбмена = "По запросу")
		
			ОтборПоОснованиюВключен = Истина;
		
		КонецЕсли;
		
		Если НЕ ОтборПоОснованиюВключен Тогда
			
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Использование = Ложь;
			ТекущийИсточникЦикловОбмена.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Использование = Истина;
			
			//ВозможныеСтатусыЗавершенности = Новый Массив;
			//Если ТекущаяПанельОтбораПоЗавершенности.Кнопки.ОтборНезавершенные.Пометка Тогда
			//	ВозможныеСтатусыЗавершенности.Добавить(0);
			//КонецЕсли;
			//Если ТекущаяПанельОтбораПоЗавершенности.Кнопки.ОтборЗавершенные.Пометка Тогда
			//	ВозможныеСтатусыЗавершенности.Добавить(1);
			//КонецЕсли;
			//Если ТекущаяПанельОтбораПоЗавершенности.Кнопки.ОтборСОшибками.Пометка Тогда
			//	ВозможныеСтатусыЗавершенности.Добавить(2);
			//КонецЕсли;
			//
			//КоличествоСтатусовОтбора = ВозможныеСтатусыЗавершенности.Количество();
			//Если КоличествоСтатусовОтбора = 3 ИЛИ КоличествоСтатусовОтбора = 0 Тогда
				ТекущийИсточникЦикловОбмена.Отбор.Ссылка.Использование = Ложь;
			//Иначе
			//	КартаЗавершенности = КонтекстЭДО.ПолучитьКартуЗавершенности(ВозможныеСтатусыЗавершенности);
			//	ТекущийИсточникЦикловОбмена.Отбор.Ссылка.Использование = Ложь;
			//	ТекущийИсточникЦикловОбмена.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			//	ТекущийИсточникЦикловОбмена.Отбор.Ссылка.Значение.ЗагрузитьЗначения(КартаЗавершенности.ВыгрузитьКолонку("ЦиклОбмена"));
			//	ТекущийИсточникЦикловОбмена.Отбор.Ссылка.Использование = Истина;
			//КонецЕсли;
			
			Если ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) Тогда
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Значение = мДатаНачалаИнтервалаОтбора;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Использование = Истина;
			Иначе
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Использование = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Значение = мДатаОкончанияИнтервалаОтбора;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Использование = Истина;
			Иначе
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийИсточникЦикловОбмена = ЦиклыОбменаОтчетность И ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка Тогда
			
			Если ВидОтбораЦикловОбмена = "По виду отчета" Тогда
				
				Если ВидОтчетаДляОтбора.ЭтоГруппа Тогда
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.ВИерархии;
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбора;
				Иначе
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.Равно;
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбора;
				Конецесли;
				ЦиклыОбменаОтчетность.Отбор.ВидОтчета.Использование = Истина;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По периоду отчета" Тогда
				
				ЦиклыОбменаОтчетность.Отбор.ДатаОкончанияПериода.ВидСравнения = ВидСравнения.Равно;
				ЦиклыОбменаОтчетность.Отбор.ДатаОкончанияПериода.Значение = НачалоДня(ДатаКонцаПериодаОтчета);
				ЦиклыОбменаОтчетность.Отбор.ДатаОкончанияПериода.Использование = Истина;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По виду документа" Тогда
				
				Если ВидДокумента = 0 ИЛИ УточнениеНомераКорректировки Тогда
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.ВидСравнения = ВидСравнения.Равно;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Значение = ВидДокумента*НомерКорректировки;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Использование = Истина;
				Иначе
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.ВидСравнения = ВидСравнения.Больше;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Значение = 0;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Использование = Истина;
				КонецЕсли;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По исходному отчету" Тогда
				
				Если ТипЗнч(ОтчетДляОтбора) = Тип("СписокЗначений") Тогда
					ОтчетыДляОтбора = ОтчетДляОтбора.ВыгрузитьЗначения();
				Иначе
					ОтчетыДляОтбора = Новый Массив;
					ОтчетыДляОтбора.Добавить(ОтчетДляОтбора);
				КонецЕсли;
				
				ЦиклыОбменаОтчетность.Отбор.Предмет.Использование = Ложь;
				ЦиклыОбменаОтчетность.Отбор.Предмет.ВидСравнения = ВидСравнения.ВСписке;
				ЦиклыОбменаОтчетность.Отбор.Предмет.Значение.ЗагрузитьЗначения(ОтчетыДляОтбора);
				ЦиклыОбменаОтчетность.Отбор.Предмет.Использование = Истина;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По эл. представлению" Тогда
				
				ЦиклыОбменаОтчетность.Отбор.Предмет.Установить(ЭлектронноеПредставлениеДляОтбора);
				
			КонецЕсли;
			
		ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаВходящиеДокументыФНС Тогда
			
			// сначала необходимо отключить отбор, иначе изменение отбора может не сработать
			// (особенность платформы при отборе с видом сравнения ВСписке)
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ВходящиеДокументыФНС.Отбор.Организация.Использование = Ложь;
			ВходящиеДокументыФНС.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ВходящиеДокументыФНС.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ВходящиеДокументыФНС.Отбор.Организация.Использование = Истина;
			
			// устанавливаем отбор в таблице циклов обмена по исходящим документам с ФНС
			ТекВходящее = ?(ЭлементыФормы.ВходящиеДокументыФНС.ТекущиеДанные = Неопределено, Неопределено, ЭлементыФормы.ВходящиеДокументыФНС.ТекущиеДанные.Ссылка);
			ЦиклыОбменаВходящиеДокументыФНС.Отбор.Предмет.Установить(ТекВходящее);
			
		ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаИсходящиеДокументыФНС Тогда
			
			// сначала необходимо отключить отбор, иначе изменение отбора может не сработать
			// (особенность платформы при отборе с видом сравнения ВСписке)
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ИсходящиеДокументыФНС.Отбор.Организация.Использование = Ложь;
			ИсходящиеДокументыФНС.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ИсходящиеДокументыФНС.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ИсходящиеДокументыФНС.Отбор.Организация.Использование = Истина;
			
			// устанавливаем отбор в таблице циклов обмена по исходящим документам с ФНС
			ТекИсходящее = ?(ЭлементыФормы.ИсходящиеДокументыФНС.ТекущиеДанные = Неопределено, Неопределено, ЭлементыФормы.ИсходящиеДокументыФНС.ТекущиеДанные.Ссылка);
			ЦиклыОбменаИсходящиеДокументыФНС.Отбор.Предмет.Установить(ТекИсходящее);
			
		ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаЗапросы Тогда
			
			// сначала необходимо отключить отбор, иначе изменение отбора может не сработать
			// (особенность платформы при отборе с видом сравнения ВСписке)
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			Запросы.Отбор.Организация.Использование = Ложь;
			Запросы.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			Запросы.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			Запросы.Отбор.Организация.Использование = Истина;
			
			// устанавливаем отбор в таблице циклов обмена по исходящим документам с ФНС
			ТекЗапрос = ?(ЭлементыФормы.Запросы.ТекущиеДанные = Неопределено, Неопределено, ЭлементыФормы.Запросы.ТекущиеДанные.Ссылка);
			ЦиклыОбменаЗапросы.Отбор.Предмет.Установить(ТекЗапрос);
			
		//ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаЗапросы И ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка Тогда
		//	
		//	Если ВидОтбораЦикловОбменаЗапросы = "По запросу" Тогда
		//		
		//		ЦиклыОбменаЗапросы.Отбор.Предмет.Установить(ОтборЗапрос);
		//		
		//	ИначеЕсли ВидОтбораЦикловОбменаЗапросы = "По виду услуги" Тогда
		//		
		//		Если ЗначениеЗаполнено(ОтборВидУслуги) Тогда
		//			ЦиклыОбменаЗапросы.Отбор.ВидУслуги.Установить(ОтборВидУслуги);
		//		Иначе
		//			ЦиклыОбменаЗапросы.Отбор.ВидУслуги.Использование = Ложь;
		//		КонецЕсли;
		//		
		//	КонецЕсли;
		//	
		КонецЕсли;
		
		ТекущееТабличноеПолеЦикловОбмена = СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена[ЭлементыФормы.ПанельФНС.ТекущаяСтраница];
		Если ТекущееТабличноеПолеЦикловОбмена <> Неопределено Тогда
			ТекущееТабличноеПолеЦикловОбмена.ОбновитьСтроки();
		КонецЕсли;
		
		ОбновитьПодсказкиЭлементовУправленияПериодом();
		
	ИначеЕсли ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.ПФР Тогда
		
		ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельПФР.ТекущаяСтраница;
		ТекущийИсточникЦикловОбмена = СоответствиеСтраницыПанелиИсточникуЦикловОбмена[ТекущаяСтраницаОсновнойПанели];
		
		Для Каждого ЭлементОтбора Из ТекущийИсточникЦикловОбмена.Отбор Цикл
			Если ЭлементОтбора.Имя <> "Тип" И ЭлементОтбора.Имя <> "ПометкаУдаления" И ЭлементОтбора.Имя <> "Вид" Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ОтборПоОснованиюВключен = Ложь;
		Если ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельПФР.Страницы.Отчетность
		И ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Отобрать.Пометка
		И ВидОтбораЦикловОбменаПФР = "По исходному отчету" Тогда
			ОтборПоОснованиюВключен = Истина;
		КонецЕсли;
		
		// 
		Если НЕ ОтборПоОснованиюВключен Тогда
			
			// отбор по организации
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Использование = Ложь;
			ТекущийИсточникЦикловОбмена.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Использование = Истина;
			
			// отбор по датам
			Если ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) Тогда
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Значение = мДатаНачалаИнтервалаОтбора;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Использование = Истина;
			Иначе
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Использование = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Значение = мДатаОкончанияИнтервалаОтбора;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Использование = Истина;
			Иначе
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// 
		Если ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельПФР.Страницы.Отчетность Тогда
		
			Если ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Отобрать.Пометка Тогда
				
				Если ВидОтбораЦикловОбменаПФР = "По виду отчета" Тогда
					
					Если ВидОтчетаДляОтбораПФР.ЭтоГруппа Тогда
						ЦиклыОбменаОтчетностьПФР.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.ВИерархии;
						ЦиклыОбменаОтчетностьПФР.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбораПФР;
					Иначе
						ЦиклыОбменаОтчетностьПФР.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.Равно;
						ЦиклыОбменаОтчетностьПФР.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбораПФР;
					Конецесли;
					ЦиклыОбменаОтчетностьПФР.Отбор.ВидОтчета.Использование = Истина;
					
				ИначеЕсли ВидОтбораЦикловОбменаПФР = "По исходному отчету" Тогда
					
					Если ТипЗнч(ОтчетДляОтбораПФР) = Тип("СписокЗначений") Тогда
						ОтчетыДляОтбораПФР = ОтчетДляОтбораПФР.ВыгрузитьЗначения();
					Иначе
						ОтчетыДляОтбораПФР = Новый Массив;
						ОтчетыДляОтбораПФР.Добавить(ОтчетДляОтбораПФР);
					КонецЕсли;
					
					ЦиклыОбменаПоОтчетам = КонтекстЭДО.ПолучитьЦиклыОбменаПоОтчету(ОтчетыДляОтбораПФР);
					
					ЦиклыОбменаОтчетностьПФР.Отбор.Ссылка.Использование = Ложь;
					ЦиклыОбменаОтчетностьПФР.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
					ЦиклыОбменаОтчетностьПФР.Отбор.Ссылка.Значение.ЗагрузитьЗначения(ЦиклыОбменаПоОтчетам);
					ЦиклыОбменаОтчетностьПФР.Отбор.Ссылка.Использование = Истина;
					
					//ЦиклыОбменаОтчетностьПФР.Отбор.Предмет.Использование = Ложь;
					//ЦиклыОбменаОтчетностьПФР.Отбор.Предмет.ВидСравнения = ВидСравнения.ВСписке;
					//ЦиклыОбменаОтчетностьПФР.Отбор.Предмет.Значение.ЗагрузитьЗначения(ОтчетыДляОтбораПФР);
					//ЦиклыОбменаОтчетностьПФР.Отбор.Предмет.Использование = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельПФР.Страницы.ИсходящиеДокументы Тогда
			
			// сначала необходимо отключить отбор, иначе изменение отбора может не сработать
			// (особенность платформы при отборе с видом сравнения ВСписке)
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ИсходящиеДокументыПФР.Отбор.Организация.Использование = Ложь;
			ИсходящиеДокументыПФР.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ИсходящиеДокументыПФР.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ИсходящиеДокументыПФР.Отбор.Организация.Использование = Истина;
			
			// устанавливаем отбор в таблице циклов обмена по исходящим документам с ПФР
			ТекИсходящее = ?(ЭлементыФормы.ИсходящиеДокументыПФР.ТекущиеДанные = Неопределено, Неопределено, ЭлементыФормы.ИсходящиеДокументыПФР.ТекущиеДанные.Ссылка);
			ЦиклыОбменаИсходящиеДокументыПФР.Отбор.Предмет.Установить(ТекИсходящее);
			
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельПФР.Страницы.ВходящиеДокументы Тогда
			
			// сначала необходимо отключить отбор, иначе изменение отбора может не сработать
			// (особенность платформы при отборе с видом сравнения ВСписке)
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ВходящиеДокументыПФР.Отбор.Организация.Использование = Ложь;
			ВходящиеДокументыПФР.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ВходящиеДокументыПФР.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ВходящиеДокументыПФР.Отбор.Организация.Использование = Истина;
			
			// устанавливаем отбор в таблице циклов обмена по исходящим документам с ПФР
			ТекВходящее = ?(ЭлементыФормы.ВходящиеДокументыПФР.ТекущиеДанные = Неопределено, Неопределено, ЭлементыФормы.ВходящиеДокументыПФР.ТекущиеДанные.Ссылка);
			ЦиклыОбменаВходящиеДокументыПФР.Отбор.Предмет.Установить(ТекВходящее);
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.Прочее Тогда
		
		// сначала необходимо отключить отбор, иначе изменение отбора может не сработать
		// (особенность платформы при отборе с видом сравнения ВСписке)
		ПрочиеСообщения.Отбор.УчетнаяЗапись.Использование = Ложь;
		ПрочиеСообщения.Отбор.УчетнаяЗапись.ВидСравнения = ВидСравнения.ВСписке;
		ПрочиеСообщения.Отбор.УчетнаяЗапись.Значение.ЗагрузитьЗначения(УчетныеЗаписиПоСпискуОрганизаций(ВыбранныеУчетныеЗаписи()));
		ПрочиеСообщения.Отбор.УчетнаяЗапись.Использование = Истина;
		
		Если ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) ИЛИ ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
			ПрочиеСообщения.Отбор.ДатаТранспорта.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
			ПрочиеСообщения.Отбор.ДатаТранспорта.ЗначениеС = мДатаНачалаИнтервалаОтбора;
			ПрочиеСообщения.Отбор.ДатаТранспорта.ЗначениеПо = мДатаОкончанияИнтервалаОтбора;
			ПрочиеСообщения.Отбор.ДатаТранспорта.Использование = Истина;
		Иначе
			ПрочиеСообщения.Отбор.ДатаТранспорта.Использование = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельОбменяться(Кнопка)
	
	ВыбранныеОрганизации = ВыбранныеУчетныеЗаписи();
	Если ВыбранныеОрганизации.Количество() = 0 Тогда
		Предупреждение("Учетная запись не выбрана.");
		Возврат;
	ИначеЕсли ВыбранныеОрганизации.Количество() = 1 Тогда
		ТекстВопроса = "Произвести обмен сообщениями по учетной записи """ + ВыбранныеОрганизации[0] + """?";
	Иначе
		ТекстВопроса = "Произвести обмен сообщениями по выбранным учетным записям?";
	КонецЕсли;
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// получаем массив учетных записей по массиву организаций
	ВыбранныеУчетныеЗаписи = КонтекстЭДО.УчетныеЗаписиПоОрганизациям(ВыбранныеОрганизации);
	
	// последовательно для каждой учетной записи производим обмен
	Для Каждого ВыбраннаяУчетнаяЗапись Из ВыбранныеУчетныеЗаписи Цикл
		КонтекстЭДО.ОсуществитьОбменСНалоговымОрганом(ВыбраннаяУчетнаяЗапись);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельПолучитьПочту(Кнопка)
	
	ВыбранныеОрганизации = ВыбранныеУчетныеЗаписи();
	Если ВыбранныеОрганизации.Количество() = 0 Тогда
		Предупреждение("Учетная запись не выбрана.");
		Возврат;
	ИначеЕсли ВыбранныеОрганизации.Количество() = 1 Тогда
		ТекстВопроса = "Получить сообщения по учетной записи """ + ВыбранныеОрганизации[0] + """?";
	Иначе
		ТекстВопроса = "Получить сообщения по выбранным учетным записям?";
	КонецЕсли;
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// получаем массив учетных записей по массиву организаций
	ВыбранныеУчетныеЗаписи = КонтекстЭДО.УчетныеЗаписиПоОрганизациям(ВыбранныеОрганизации);
	
	Для Каждого УчетнаяЗапись Из ВыбранныеУчетныеЗаписи Цикл
		
		// получаем сообщения по учетной записи
		Сообщить("Обработка учетной записи """ + УчетнаяЗапись + """..." , СтатусСообщения.Информация);
		КонтекстЭДО.ПолучитьИРасшифроватьСообщенияПоУчетнойЗаписи(УчетнаяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура УчетныеЗаписиПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВидовОтбораЦикловОбмена = Новый СписокЗначений;
	Для Каждого ВидОтбора из СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора Цикл
		СписокВидовОтбораЦикловОбмена.Добавить(ВидОтбора.Ключ);
	КонецЦикла;
	РезультатВыбора = ВыбратьИзСписка(СписокВидовОтбораЦикловОбмена, , СписокВидовОтбораЦикловОбмена.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УстановитьОтборы();
		УправлениеЭУ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначения();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаОтбор(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура УчетныеЗаписиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Для Каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		УчетнаяЗапись.Пометка = (УчетнаяЗапись = ВыбраннаяСтрока);
	КонецЦикла;
	УстановитьОтборы();
	
КонецПроцедуры

Процедура НадписьМесяц1Нажатие(Элемент)
	
	МесяцМинус1 = Число(Сред(Элемент.Имя, 13)) - 1;
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ПриИзмененииМесяца()
	
	Месяц = МесяцМинус1 + 1;
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	УправлениеНадписямиМесяцев();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОбновитьПодсказкиЭлементовУправленияПериодом()
	
	Если ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) Тогда
		Подсказка = "Отчеты, представляемые по истечении " + МассивНаименованийПравыхГраницПериода[Месяц(ДатаКонцаПериодаОтчета) - 1] + " " + Формат(Год, "ЧГ=0") + " года";
	Иначе
		Подсказка = "";
	КонецЕсли;
	
	ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Подсказка = Подсказка;
	ЭлементыФормы.ПолосаРегулированияПериода.Подсказка = Подсказка;
	ЭлементыФормы.Год.Подсказка = Подсказка;
	ЭлементыФормы.НадписьГод.Подсказка = Подсказка;
	
КонецПроцедуры

Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтчета);
	Для Сч = 0 По 11 Цикл
		Если Сч = Месяц - 1 Тогда
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет(0, 0, 255);
		Иначе
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтчета);
	МесяцМинус1 = Месяц(ДатаКонцаПериодаОтчета) - 1;
	УправлениеНадписямиМесяцев();

КонецПроцедуры

Процедура ПолосаРегулированияПериодаПриИзменении(Элемент)
	
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтчетДляОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОтчетДляОтбора = Неопределено;
	УстановитьПредставлениеОтчетаДляОтбора();
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ПереключательВидДокументаПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ПереключательВидДокумента1ПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ОтчетДляОтбораПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВидОтчетаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельНалоговыеОрганы(Кнопка)
	
	Справочники.НалоговыеОрганы.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельСерверыДокументооборота(Кнопка)
	
	Справочники.СерверыДокументооборота.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельУчетныеЗаписиДокументооборота(Кнопка)
	
	Справочники.УчетныеЗаписиДокументооборота.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельРегламентированныеОтчеты(Кнопка)
	
	РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью").Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаРегламентированныйОтчет(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельОтправитьПочту(Кнопка)
	
	ВыбранныеОрганизации = ВыбранныеУчетныеЗаписи();
	Если ВыбранныеОрганизации.Количество() = 0 Тогда
		Предупреждение("Учетная запись не выбрана.");
		Возврат;
	ИначеЕсли ВыбранныеОрганизации.Количество() = 1 Тогда
		ТекстВопроса = "Отправить сообщения по учетной записи """ + ВыбранныеОрганизации[0] + """?";
	Иначе
		ТекстВопроса = "Отправить сообщения по выбранным учетным записям?";
	КонецЕсли;
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// получаем массив учетных записей по массиву организаций
	ВыбранныеУчетныеЗаписи = КонтекстЭДО.УчетныеЗаписиПоОрганизациям(ВыбранныеОрганизации);
	
	Для Каждого УчетнаяЗапись Из ВыбранныеУчетныеЗаписи Цикл
		
		// шифруем сообщения по учетной записи
		КонтекстЭДО.ЗашифроватьСообщенияПоУчетнойЗаписи(УчетнаяЗапись);
		
		// отправляем сообщения по учетной записи
		КонтекстЭДО.ОтправитьСообщенияПоУчетнойЗаписи(УчетнаяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры


Процедура КоманднаяПанельЦиклыОбменаНайтиОтчетВСписке(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока <> Неопределено Тогда
		ПредметыЦиклаОбмена = КонтекстЭДО.ПолучитьПредметыЦиклаОбмена(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
		Для Каждого Предмет Из ПредметыЦиклаОбмена Цикл
			ТипЗнчПредмет = ТипЗнч(Предмет);
			Если ТипЗнчПредмет = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью").Открыть();
				Оповестить("Позиционирование в списке отчетов с предупреждением", Предмет);
			ИначеЕсли ТипЗнчПредмет = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
				ФормаСписка = Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьФормуСписка();
				ФормаСписка.Отбор.Сбросить();
				ФормаСписка.ПараметрТекущаяСтрока = Предмет;
				ФормаСписка.Открыть();
			ИначеЕсли Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") <> Неопределено И ТипЗнчПредмет = Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган") Тогда
				ФормаСписка = Документы.СправкаПоНДФЛВНалоговыйОрган.ПолучитьФормуСписка();
				ФормаСписка.Отбор.Сбросить();
				ФормаСписка.ПараметрТекущаяСтрока = Предмет;
				ФормаСписка.Открыть();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Процедура КоманднаяПанельОтборПоЗавершенностиПриИзменении(Кнопка)
//	
//	Кнопка.Пометка = НЕ Кнопка.Пометка;
//	УстановитьОтборы();
//	
//КонецПроцедуры

Процедура ФлажокУточнениеНомераКорректировкиПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтчетДляОтбораСтрокаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// сначала уточняем тип, если он не уточнен
	ТипЗнчОтчетДляОтбора = ТипЗнч(ОтчетДляОтбора);
	Если ТипЗнчОтчетДляОтбора = Тип("Неопределено") Тогда
		Если Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") = Неопределено Тогда
			ТипЗнчОтчетДляОтбора = Тип("ДокументСсылка.РегламентированныйОтчет");
		Иначе
			ВозможныеТипы = Новый СписокЗначений;
			ВозможныеТипы.Добавить(Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган"), "Формы 2-НДФЛ");
			ВозможныеТипы.Добавить(Тип("ДокументСсылка.РегламентированныйОтчет"), "Прочие регламентированные отчеты");
			РезультатВыбора = ВозможныеТипы.ВыбратьЭлемент("Выберите тип");
			Если РезультатВыбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТипЗнчОтчетДляОтбора = РезультатВыбора.Значение;
		КонецЕсли;
	КонецЕсли;
	
	// выбираем объекты соответствующего типа
	Если ТипЗнчОтчетДляОтбора = Тип("ДокументСсылка.РегламентированныйОтчет") ИЛИ ТипЗнчОтчетДляОтбора = Тип("СписокЗначений") Тогда
		
		УправлениеОтчетностью = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью", ЭтаФорма);
		УправлениеОтчетностью.РежимВыбора = Истина;
		РезультатВыбора = УправлениеОтчетностью.ОткрытьМодально();
		Если РезультатВыбора <> Неопределено Тогда
			Если ТипЗнч(РезультатВыбора) = Тип("СписокЗначений") Тогда
				Если РезультатВыбора.Количество() = 0 Тогда
					ОтчетДляОтбора = Неопределено;
				ИначеЕсли РезультатВыбора.Количество() = 1 Тогда
					ОтчетДляОтбора = РезультатВыбора.Получить(0).Значение;
				Иначе
					Для Каждого Эл Из РезультатВыбора Цикл
						Эл.Представление = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Эл.Значение);
					КонецЦикла;
					ОтчетДляОтбора = РезультатВыбора;
				КонецЕсли;
			Иначе
				ОтчетДляОтбора = РезультатВыбора;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ФормаВыбора = Документы.СправкаПоНДФЛВНалоговыйОрган.ПолучитьФормуВыбора();
		Если ЗначениеЗаполнено(ОтчетДляОтбора) Тогда
			ФормаВыбора.НачальноеЗначениеВыбора = ОтчетДляОтбора;
		КонецЕсли;
		РезультатВыбора = ФормаВыбора.ОткрытьМодально();
		Если НЕ ЗначениеЗаполнено(РезультатВыбора) Тогда
			Возврат;
		КонецЕсли;
		ОтчетДляОтбора = РезультатВыбора;
		
	КонецЕсли;
	
	УстановитьПредставлениеОтчетаДляОтбора();
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура УстановитьПредставлениеОтчетаДляОтбора()
	
	Если НЕ ЗначениеЗаполнено(ОтчетДляОтбора) Тогда
		ОтчетДляОтбораСтрока = "";
		Возврат;
	КонецЕсли;
	
	ТипОтчетаДляОтбора = ТипЗнч(ОтчетДляОтбора);
	Если Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") <> Неопределено И ТипОтчетаДляОтбора = Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган") Тогда
		ОтчетДляОтбораСтрока = Строка(ОтчетДляОтбора);
	Иначе
		Если ТипОтчетаДляОтбора = Тип("СписокЗначений") Тогда
			ОтчетДляОтбораСтрока = "";
			Для Каждого Отч Из ОтчетДляОтбора Цикл
				ОтчетДляОтбораСтрока = ОтчетДляОтбораСтрока + Отч + "; ";
			КонецЦикла;
			ОтчетДляОтбораСтрока = Лев(ОтчетДляОтбораСтрока, СтрДлина(ОтчетДляОтбораСтрока) - 2);
		Иначе
			ОтчетДляОтбораСтрока = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПредставлениеОтчетаПФР(ОтчетПФР)
	
	Если ТипЗнч(ОтчетПФР) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетПФР);
	Иначе
		Возврат Строка(ОтчетПФР);
	КонецЕсли;
	
КонецФункции

Процедура УстановитьПредставлениеОтчетаДляОтбораПФР()
	
	Если НЕ ЗначениеЗаполнено(ОтчетДляОтбораПФР) Тогда
		ОтчетДляОтбораСтрокаПФР = "";
	Иначе
		ТипОтчетаДляОтбора = ТипЗнч(ОтчетДляОтбораПФР);
		Если ТипОтчетаДляОтбора = Тип("СписокЗначений") Тогда
			ОтчетДляОтбораСтрокаПФР = "";
			Для Каждого Отч Из ОтчетДляОтбораПФР Цикл
				ОтчетДляОтбораСтрокаПФР = ОтчетДляОтбораСтрокаПФР + ПредставлениеОтчетаПФР(Отч.Значение) + "; ";
			КонецЦикла;
			ОтчетДляОтбораСтрокаПФР = Лев(ОтчетДляОтбораСтрокаПФР, СтрДлина(ОтчетДляОтбораСтрокаПФР) - 2);
		ИначеЕсли ТипОтчетаДляОтбора = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ОтчетДляОтбораСтрокаПФР = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетДляОтбораПФР);
		Иначе
			ОтчетДляОтбораСтрокаПФР = Строка(ОтчетДляОтбораПФР);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтчетДляОтбораОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнчОтчетаДляОтбора = ТипЗнч(ОтчетДляОтбора);
	Если ТипЗнчОтчетаДляОтбора <> Неопределено Тогда
		Если ТипЗнчОтчетаДляОтбора = Тип("СписокЗначений") Тогда
			РезультатВыбораОтчета = ОтчетДляОтбора.ВыбратьЭлемент("Выберите отчет для открытия");
			Если РезультатВыбораОтчета <> Неопределено Тогда
				РезультатВыбораОтчета.Значение.ПолучитьФорму().Открыть();
			КонецЕсли;
		Иначе
			ОтчетДляОтбора.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельРежимОднойУчетнойЗаписи(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеЭУ();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОтборУчетнаяЗаписьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокУчетныхЗаписей = Новый СписокЗначений;
	СписокУчетныхЗаписей.ЗагрузитьЗначения(УчетныеЗаписи.ВыгрузитьКолонку("Объект"));
	РезультатВыбора = ВыбратьИзСписка(СписокУчетныхЗаписей, , СписокУчетныхЗаписей.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборУчетнаяЗаписьПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ЦиклыОбменаПередУдалением(Элемент, Отказ)
	
	ИмяКолонки = ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяКолонка.Имя;
	Если ИмяКолонки = "ПервичноеСообщение" ИЛИ ИмяКолонки = "ПодтверждениеОтправки" ИЛИ ИмяКолонки = "ОтветНаПодтверждениеОтправки"
	ИЛИ ИмяКолонки = "ПодтверждениеДоставки" ИЛИ ИмяКолонки = "ПротоколПроверки" ИЛИ ИмяКолонки = "ПодтверждениеНаПротоколПроверки"
	ИЛИ ИмяКолонки = "ОтветНаЗапрос" ИЛИ ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
	
	    Отказ = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Показать циклы обмена" Тогда
		ТипЗначенияПараметра = ТипЗнч(Параметр);
		
		Если ТипЗначенияПараметра = Тип("ДокументСсылка.РегламентированныйОтчет")
		ИЛИ (Метаданные.Документы.Найти("СправкаПоНДФЛВНалоговыйОрган") <> Неопределено И ТипЗначенияПараметра = Тип("ДокументСсылка.СправкаПоНДФЛВНалоговыйОрган")) Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.Отчетность;
			ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка = Истина;
			ВидОтбораЦикловОбмена = "По исходному отчету";
			ОтчетДляОтбора = Параметр;
			УстановитьПредставлениеОтчетаДляОтбора();
		//ИначеЕсли ТипЗначенияПараметра = Тип("ДокументСсылка.НеформализованныйДокументНалоговогоОргана") Тогда
		//	ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
		//	ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы;
		//	ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка = Истина;
		//	ОтборВходящийДокумент = Параметр;
		//ИначеЕсли ТипЗначенияПараметра = Тип("ДокументСсылка.НеформализованныйДокументНалогоплательщика") Тогда
		//	ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
		//	ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы;
		//	ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка = Истина;
		//	ОтборИсходящийДокумент = Параметр;
		ИначеЕсли ТипЗначенияПараметра = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.Отчетность;
			ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка = Истина;
			ВидОтбораЦикловОбмена = "По эл. представлению";
			ЭлектронноеПредставлениеДляОтбора = Параметр;
		//ИначеЕсли ТипЗначенияПараметра = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
		//	ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
		//	ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.Запросы;
		//	ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка = Истина;
		//	ВидОтбораЦикловОбменаЗапросы = "По запросу";
		//	ОтборЗапрос = Параметр;
		КонецЕсли;
		
		УстановитьОтборы();
		УправлениеЭУ();
		
	ИначеЕсли ИмяСобытия = "Показать циклы обмена отчета ПФР" Тогда
		ТипЗначенияПараметра = ТипЗнч(Параметр);
		
		ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ПФР;
		ЭлементыФормы.ПанельПФР.ТекущаяСтраница = ЭлементыФормы.ПанельПФР.Страницы.Отчетность;
		ЭлементыФормы.КоманднаяПанельОтчетностьПФР.Кнопки.Отобрать.Пометка = Истина;
		ВидОтбораЦикловОбменаПФР = "По исходному отчету";
		ОтчетДляОтбораПФР = Параметр;
		
		УстановитьПредставлениеОтчетаДляОтбораПФР();
		
		УстановитьОтборы();
		УправлениеЭУ();
		
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		УстановитьОтборы();
		
	ИначеЕсли ИмяСобытия = "Чтение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ТЧЦикловОбмена = СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена[ЭлементыФормы.ПанельФНС.ТекущаяСтраница];
		Если ТЧЦикловОбмена <> Неопределено Тогда
			ТЧЦикловОбмена.ОбновитьСтроки(Параметр.ЦиклОбмена);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Чтение письма" Тогда
		
		Если ТипЗнч(Параметр) = Тип("СправочникСсылка.ПерепискаСКонтролирующимиОрганами") Тогда
			Если Параметр.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР Тогда
				ЭлементыФормы.ВходящиеДокументыПФР.ОбновитьСтроки(Параметр);
			Иначе
				ЭлементыФормы.ВходящиеДокументыФНС.ОбновитьСтроки(Параметр);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Чтение запроса" Тогда
		
		Если ТипЗнч(Параметр) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
			ЭлементыФормы.Запросы.ОбновитьСтроки(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Изменение учетной записи налогоплательщика"
	ИЛИ ИмяСобытия = "Изменение состава пользователей учетной записи налогоплательщика"
	ИЛИ ИмяСобытия = "Изменение организации" Тогда
		
		ЗаполнитьУчетныеЗаписи();
		УстановитьОтборы();
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура ОсновнаяКоманднаяПанельВходящиеДокументы(Кнопка)
//	
//	Документы.НеформализованныйДокументНалоговогоОргана.ПолучитьФормуСписка().Открыть();
//	
//КонецПроцедуры

//Процедура ОсновнаяКоманднаяПанельИсходящиеДокументы(Кнопка)
//	
//	Документы.НеформализованныйДокументНалогоплательщика.ПолучитьФормуСписка().Открыть();
//	
//КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельВыборПериода(Кнопка)
	
	СледуетОбновлятьОтборы = НЕ Кнопка.Пометка;
	Для Каждого _Кнопка Из ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки Цикл
		_Кнопка.Пометка = (_Кнопка = Кнопка);
	КонецЦикла;
	ОсвежитьИнтервалОтбораПоПериоду(Кнопка, , СледуетОбновлятьОтборы);
	
КонецПроцедуры

Процедура ОсвежитьИнтервалОтбораПоПериоду(Кнопка = Неопределено, МенятьИнтервал = Истина, СледуетОбновлятьОтборы = Истина)
	
	Если Кнопка = Неопределено Тогда
		Для Каждого _Кнопка Из ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки Цикл
			Если _Кнопка.Пометка Тогда
				Кнопка = _Кнопка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_мДатаНачалаИнтервалаОтбора = мДатаНачалаИнтервалаОтбора;
	_мДатаОкончанияИнтервалаОтбора = мДатаОкончанияИнтервалаОтбора;
	ИмяКнопки = Кнопка.Имя;
	ТекДата = РабочаяДата;
	СекундВСутках = 60*60*24;
	Если ИмяКнопки = "Сегодня" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоДня(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецДня(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущаяНеделя" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоНедели(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецНедели(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущийМесяц" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоМесяца(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецМесяца(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущийКвартал" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоКвартала(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецКвартала(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущийГод" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоГода(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецГода(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "Вчера" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоДня(ТекДата - СекундВСутках);
		мДатаОкончанияИнтервалаОтбора = КонецДня(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущаяНеделя" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоНедели(ТекДата - СекундВСутках * 7);
		мДатаОкончанияИнтервалаОтбора = КонецНедели(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущийМесяц" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоМесяца(ДобавитьМесяц(ТекДата, -1));
		мДатаОкончанияИнтервалаОтбора = КонецМесяца(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущийКвартал" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоКвартала(ДобавитьМесяц(ТекДата, -3));
		мДатаОкончанияИнтервалаОтбора = КонецКвартала(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущийГод" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоГода(ДобавитьМесяц(ТекДата, -12));
		мДатаОкончанияИнтервалаОтбора = КонецГода(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "БезОграничений" Тогда
		мДатаНачалаИнтервалаОтбора = '00010101000000';
		мДатаОкончанияИнтервалаОтбора = '00010101000000';
	ИначеЕсли ИмяКнопки = "ПроизвольныйПериод" И МенятьИнтервал Тогда
		ДиалогНастройкиПериода = Новый НастройкаПериода;
		ДиалогНастройкиПериода.УстановитьПериод(НачалоДня(мДатаНачалаИнтервалаОтбора), КонецДня(мДатаОкончанияИнтервалаОтбора));
		ДиалогНастройкиПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
		Если ДиалогНастройкиПериода.Редактировать() Тогда
			_ДатаНачала = ДиалогНастройкиПериода.ПолучитьДатуНачала();
			Если _ДатаНачала <> '00010101000000' Тогда
				мДатаНачалаИнтервалаОтбора = НачалоДня(_ДатаНачала);
			Иначе
				мДатаНачалаИнтервалаОтбора = _ДатаНачала;
			КонецЕсли;
			_ДатаОкончания = ДиалогНастройкиПериода.ПолучитьДатуОкончания();
			Если _ДатаОкончания <> '00010101000000' Тогда
				мДатаОкончанияИнтервалаОтбора = КонецДня(_ДатаОкончания);
			Иначе
				мДатаОкончанияИнтервалаОтбора = _ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьЗаголовокКнопкиОтбораПоПериоду();
	
	Если _мДатаНачалаИнтервалаОтбора <> мДатаНачалаИнтервалаОтбора ИЛИ _мДатаОкончанияИнтервалаОтбора <> мДатаОкончанияИнтервалаОтбора Тогда
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

//Процедура КоманднаяПанельИсходящиеДокументыНовый(Кнопка)
//	
//	Документы.НеформализованныйДокументНалогоплательщика.СоздатьДокумент().ПолучитьФорму().Открыть();
//	
//КонецПроцедуры

Процедура ПроверкаСменыДаты()
	
	ОсвежитьИнтервалОтбораПоПериоду(, Ложь);
	
КонецПроцедуры

//Процедура КоманднаяПанельИсходящиеДокументыОткрытьОснование(Кнопка)
//	
//	Если ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы.ТекущиеДанные <> Неопределено Тогда
//		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы.ТекущиеДанные.Ссылка.Предмет);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура КоманднаяПанельВходящиеДокументыОткрытьОснование(Кнопка)
//	
//	Если ЭлементыФормы.ЦиклыОбменаВходящиеДокументы.ТекущиеДанные <> Неопределено Тогда
//		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаВходящиеДокументы.ТекущиеДанные.Ссылка.Предмет);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура ОтборИсходящийДокументПриИзменении(Элемент)
//	
//	УстановитьОтборы();
//	
//КонецПроцедуры

//Процедура ОтборЗапросПриИзменении(Элемент)
//	
//	УстановитьОтборы();
//	
//КонецПроцедуры

Процедура ЭлектронноеПредставлениеДляОтбораПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ЭлектронноеПредставлениеДляОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельЭлектронныеПредставленияОтчетов(Кнопка)
	
	Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

//Процедура ОсновнаяКоманднаяПанельЗапросыНаИнформационноеОбслуживание(Кнопка)
//	
//	Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьФормуСписка().Открыть();
//	
//КонецПроцедуры

//Процедура КоманднаяПанельЗапросыНовый(Кнопка)
//	
//	Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент().ПолучитьФорму().Открыть();
//	
//КонецПроцедуры

//Процедура КоманднаяПанельЗапросыОткрытьОснование(Кнопка)
//	
//	Если ЭлементыФормы.ЦиклыОбменаЗапросы.ТекущиеДанные <> Неопределено Тогда
//		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаЗапросы.ТекущиеДанные.Ссылка.Предмет);
//	КонецЕсли;
//	
//КонецПроцедуры

//Процедура КоманднаяПанельЗапросыЖурнал(Кнопка)
//	
//	Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьФормуСписка().Открыть();
//	
//КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВывестиВОкно(Кнопка)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Показать документы по циклу обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ВидимыеЦиклы.Количество() + " циклов обмена." + Символы.ПС + "Показать документы по выбранным циклам обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		КонтекстЭДО.ПоказатьДокументыЦикловОбмена(ВидимыеЦиклы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекСсылка = ТекСтрока.Ссылка;
	Если НЕ Элемент.ОформлениеСтроки(ТекСтрока).Ячейки.Пометка.Флажок Тогда
		Если ВыбранныеЦиклыОбмена.Найти(ТекСсылка) = Неопределено Тогда
			ВыбранныеЦиклыОбмена.Добавить(ТекСсылка);
		КонецЕсли;
	Иначе
		РезультатПоиска = ВыбранныеЦиклыОбмена.Найти(ТекСсылка);
		Если РезультатПоиска <> Неопределено Тогда
			ВыбранныеЦиклыОбмена.Удалить(РезультатПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьУстановитьФлажкиУВсех(Кнопка)
	
	ВыбранныеЦиклыОбмена = ВидимыеЦиклыОбмена(ЦиклыОбменаОтчетность);
	ЭлементыФормы.ЦиклыОбменаОтчетность.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьСнятьФлажкиУВсех(Кнопка)
	
	ВыбранныеЦиклыОбмена.Очистить();
	ЭлементыФормы.ЦиклыОбменаОтчетность.ОбновитьСтроки();
	
КонецПроцедуры

Функция ВыбранныеЦиклыОбменаСУчетомОтборов(Элемент)
	
	ВидимыеЦиклы = ВидимыеЦиклыОбмена(ЦиклыОбменаОтчетность);
	ЧислоВидимыхЦиклов = ВидимыеЦиклы.Количество();
	Для Инд = 1 По ЧислоВидимыхЦиклов Цикл
		ТекЦикл = ВидимыеЦиклы[ЧислоВидимыхЦиклов - Инд];
		РезультатПоиска = ВыбранныеЦиклыОбмена.Найти(ТекЦикл);
		Если РезультатПоиска = Неопределено Тогда
			ВидимыеЦиклы.Удалить(ЧислоВидимыхЦиклов - Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидимыеЦиклы;
	
КонецФункции

Функция ВыбранныеЦиклыОбменаПФРСУчетомОтборов(Элемент)
	
	ВидимыеЦиклы = ВидимыеЦиклыОбмена(ЦиклыОбменаОтчетностьПФР);
	ЧислоВидимыхЦиклов = ВидимыеЦиклы.Количество();
	Для Инд = 1 По ЧислоВидимыхЦиклов Цикл
		ТекЦикл = ВидимыеЦиклы[ЧислоВидимыхЦиклов - Инд];
		РезультатПоиска = ВыбранныеЦиклыОбменаПФР.Найти(ТекЦикл);
		Если РезультатПоиска = Неопределено Тогда
			ВидимыеЦиклы.Удалить(ЧислоВидимыхЦиклов - Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидимыеЦиклы;
	
КонецФункции

Процедура ЦиклыОбменаОтчетностьПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = (Элемент.ТекущаяКолонка = Элемент.Колонки.Пометка);
	
КонецПроцедуры

Процедура КоманднаяПанельПрочиеОткрыть(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ПрочиеСообщения.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		ОткрытьЗначение(ТекСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочиеСообщенияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КолонкаПредставлениеОтправителяВидима = (Элемент.Колонки.Найти("ОтКогоПредставление") <> Неопределено И Элемент.Колонки.ОтКогоПредставление.Видимость);
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если НЕ КолонкаПредставлениеОтправителяВидима Тогда
			АдресОтправителя = СокрЛП(ДанныеСтроки.ОтКогоАдрес);
			ПредставлениеОтправителя = СокрЛП(ДанныеСтроки.ОтКогоПредставление);
			ОформлениеСтроки.Ячейки.ОтКогоАдрес.УстановитьТекст(АдресОтправителя + ?(ПредставлениеОтправителя = "", "", " (" + ПредставлениеОтправителя + ")"));
		КонецЕсли;
		Если ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , , , , Истина);
		КонецЕсли;
		Если КонтекстЭДО.ПолученныеТранспортныеСообщения <> Неопределено И КонтекстЭДО.ПолученныеТранспортныеСообщения.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочиеСообщенияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВыгрузить(Кнопка)
	
	ВыгрузитьЦиклыОбмена(Истина, Истина);
	
КонецПроцедуры

Процедура ВыгрузитьЦиклыОбмена(ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Выгрузить цикл обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выгрузить выбранные " + ВидимыеЦиклы.Количество() + " циклов обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если КонтекстЭДО.ВыгрузитьЦиклыОбмена(ВидимыеЦиклы, ВыгружатьКонтейнеры, ВыгружатьСодержимое) Тогда
			Предупреждение("Выгрузка завершена.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьЦиклыОбменаПФР(ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаПФРСУчетомОтборов(ЦиклыОбменаОтчетностьПФР);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Выгрузить цикл обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выгрузить выбранные " + ВидимыеЦиклы.Количество() + " циклов обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если КонтекстЭДО.ВыгрузитьЦиклыОбмена(ВидимыеЦиклы, ВыгружатьКонтейнеры, ВыгружатьСодержимое) Тогда
			Предупреждение("Выгрузка завершена.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВыгрузитьКонтейнеры(Кнопка)
	
	ВыгрузитьЦиклыОбмена(Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВыгрузитьСодержимое(Кнопка)
	
	ВыгрузитьЦиклыОбмена(Ложь, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПоказатьОтчетОСостоянии(Кнопка)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Показать отчет о состоянии цикла обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ВидимыеЦиклы.Количество() + " циклов обмена." + Символы.ПС + "Показать отчеты о состояниях выбранных циклов обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		КонтекстЭДО.ПоказатьОтчетыОСостоянииЦикловОбмена(ВидимыеЦиклы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаПФРНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВидовОтбораЦикловОбмена = Новый СписокЗначений;
	Для Каждого ВидОтбора из СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора Цикл
		СписокВидовОтбораЦикловОбмена.Добавить(ВидОтбора.Ключ);
	КонецЦикла;
	
	РезультатВыбора = ВыбратьИзСписка(СписокВидовОтбораЦикловОбмена, , СписокВидовОтбораЦикловОбмена.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УстановитьОтборы();
		УправлениеЭУ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаПФРОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПФРПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ТипЗнч(ДанныеСтроки.Предмет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ОформлениеСтроки.Ячейки.Отчет.УстановитьТекст(ДанныеСтроки.ВидОтчета);
		КонецЕсли;
	КонецЦикла;
	
	Если Элемент.Колонки.Найти("Пометка") <> Неопределено И Элемент.Колонки.Пометка.Видимость Тогда
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Пометка.Флажок = (ВыбранныеЦиклыОбменаПФР.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРУстановитьФлажкиУВсех(Кнопка)
	
	ВыбранныеЦиклыОбменаПФР = ВидимыеЦиклыОбмена(ЦиклыОбменаОтчетностьПФР);
	ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРСнятьФлажкиУВсех(Кнопка)
	
	ВыбранныеЦиклыОбменаПФР.Очистить();
	ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ОбновитьСтроки();
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПФРВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПФРПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = (Элемент.ТекущаяКолонка = Элемент.Колонки.Пометка);
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПФРПередУдалением(Элемент, Отказ)
	
	ИмяКолонки = ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяКолонка.Имя;
	Если ИмяКолонки = "ПервичноеСообщение" ИЛИ ИмяКолонки = "ПодтверждениеОтправки" ИЛИ ИмяКолонки = "ОтветНаПодтверждениеОтправки"
	ИЛИ ИмяКолонки = "ПодтверждениеДоставки" ИЛИ ИмяКолонки = "ПротоколПроверки" ИЛИ ИмяКолонки = "ПодтверждениеНаПротоколПроверки"
	ИЛИ ИмяКолонки = "ОтветНаЗапрос" ИЛИ ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
	
		Отказ = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПФРПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекСсылка = ТекСтрока.Ссылка;
	Если НЕ Элемент.ОформлениеСтроки(ТекСтрока).Ячейки.Пометка.Флажок Тогда
		Если ВыбранныеЦиклыОбменаПФР.Найти(ТекСсылка) = Неопределено Тогда
			ВыбранныеЦиклыОбменаПФР.Добавить(ТекСсылка);
		КонецЕсли;
	Иначе
		РезультатПоиска = ВыбранныеЦиклыОбменаПФР.Найти(ТекСсылка);
		Если РезультатПоиска <> Неопределено Тогда
			ВыбранныеЦиклыОбменаПФР.Удалить(РезультатПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРРегламентированныйОтчет(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущаяСтрока <> Неопределено Тогда
		
		ЦиклОбмена = ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущиеДанные.Ссылка;
		
		// открываем основной предмет
		ОткрытьЗначение(ЦиклОбмена.Предмет);
		
		// открываем дополнительные предметы
		Для Каждого СтрДополнительныйПредмет Из ЦиклОбмена.ДополнительныеПредметы Цикл
			ОткрытьЗначение(СтрДополнительныйПредмет.Предмет);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРВыгрузить(Кнопка)
	
	ВыгрузитьЦиклыОбменаПФР(Истина, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРВыгрузитьКонтейнеры(Кнопка)
	
	ВыгрузитьЦиклыОбменаПФР(Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРВыгрузитьСодержимое(Кнопка)
	
	ВыгрузитьЦиклыОбменаПФР(Ложь, Истина);
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельОрганыПФР(Кнопка)
	
	Справочники.ОрганыПФР.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРДокументыПерсонифицированногоУчета(Кнопка)
	
	ЖурналыДокументов.ПерсонифицированныйУчетПФР.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРПоказатьОтчетОСостоянии(Кнопка)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаПФРСУчетомОтборов(ЦиклыОбменаОтчетностьПФР);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Показать отчет о состоянии цикла обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ВидимыеЦиклы.Количество() + " циклов обмена." + Символы.ПС + "Показать отчеты о состояниях выбранных циклов обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		КонтекстЭДО.ПоказатьОтчетыОСостоянииЦикловОбмена(ВидимыеЦиклы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтчетДляОтбораПФРПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОтчетДляОтбораПФРНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТипРегламентированныйОтчет = Тип("ДокументСсылка.РегламентированныйОтчет");
	ТипСписокЗначений = Тип("СписокЗначений");
	
	// определяем тип выбираемого значения
	ТипЗначенияОтбора = ТипЗнч(ОтчетДляОтбораПФР);
	Если ОтчетДляОтбораПФР = Неопределено Тогда
		
		// инициализируем служебные переменные
		ТипыЗначенияОтбора = Новый СписокЗначений;
		
		// инициализируем массив возможных типов
		ТипыЭлемента = Элемент.ТипЗначения.Типы();
		Для Каждого ТипЗначения Из ТипыЭлемента Цикл
			Если ТипЗначения <> ТипРегламентированныйОтчет И ТипЗначения <> ТипСписокЗначений Тогда
				МетаданныеТип = Метаданные.НайтиПоТипу(ТипЗначения);
				ТипыЗначенияОтбора.Добавить(ТипЗначения, ?(ЗначениеЗаполнено(МетаданныеТип.Синоним), МетаданныеТип.Синоним,Строка(ТипЗначения)));
			КонецЕсли;
		КонецЦикла;
		ТипыЗначенияОтбора.Добавить(ТипРегламентированныйОтчет, "Прочие регламентированные отчеты");
		
		Если ТипыЗначенияОтбора.Количество() > 1 Тогда
			
			// даем пользователю выбрать один из возможных типов
			элТипЗначенияОтбора = ТипыЗначенияОтбора.ВыбратьЭлемент("Выберите тип");
			Если элТипЗначенияОтбора = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ТипЗначенияОтбора = элТипЗначенияОтбора.Значение;
			
		Иначе
			
			ТипЗначенияОтбора = ТипыЗначенияОтбора[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// открываем соответствующую форму выбора
	Если ТипЗначенияОтбора = ТипРегламентированныйОтчет Тогда
		
		УправлениеОтчетностью = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью", ЭтаФорма);
		УправлениеОтчетностью.РежимВыбора = Истина;
		РезультатВыбора = УправлениеОтчетностью.ОткрытьМодально();
		Если РезультатВыбора <> Неопределено Тогда
			ОтчетДляОтбораПФР = РезультатВыбора;
		КонецЕсли;
		
	Иначе
		МетаданныеПоТипу = Метаданные.НайтиПоТипу(ТипЗначенияОтбора);
		
		ДокументМенеджер = Документы[МетаданныеПоТипу.Имя].ПолучитьФормуВыбора();
		Если ЗначениеЗаполнено(ОтчетДляОтбораПФР) Тогда
			ДокументМенеджер.НачальноеЗначениеВыбора = ОтчетДляОтбораПФР;
		КонецЕсли;
		РезультатВыбора = ДокументМенеджер.ОткрытьМодально();
		Если НЕ ЗначениеЗаполнено(РезультатВыбора) Тогда
			Возврат;
		КонецЕсли;
		
		ОтчетДляОтбораПФР = РезультатВыбора;
		
	КонецЕсли;
	
	УстановитьПредставлениеОтчетаДляОтбораПФР();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ИсходящиеДокументыПФРПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхВТабличномПолеПерепискиСКонтролирующимиОрганами(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ПриПолученииДанныхВТабличномПолеПерепискиСКонтролирующимиОрганами(Элемент, ОформленияСтрок)
	
	КартинкаСтатусаПоказана = (Элемент.Колонки.Найти("Статус") <> Неопределено) И Элемент.Колонки.Статус.Видимость;
	
	Если КартинкаСтатусаПоказана Тогда
	
		// собираем ссылки на письма
		Письма = Новый Массив;
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
			Если ДанныеСтроки <> Неопределено И ДанныеСтроки <> Справочники.ПерепискаСКонтролирующимиОрганами.ПустаяСсылка() Тогда
				Письма.Добавить(ДанныеСтроки.Ссылка);
			КонецЕсли;
		КонецЦикла;
		
		// получаем статусы отправки писем
		СтатусыОтправкиПисем = КонтекстЭДО.ПолучитьСтатусыОтправкиОбъектов(Письма);
		
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		// регулируем жирность шрифта
		Если КонтекстЭДО.ПолученныеПисьма <> Неопределено И КонтекстЭДО.ПолученныеПисьма.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , Истина);
		КонецЕсли;
		
		// регулируем отображение наименования
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Наименование) Тогда
			ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст("Не задана");
			ОформлениеСтроки.Ячейки.Наименование.Шрифт = Новый Шрифт(ОформлениеСтроки.Ячейки.Наименование.Шрифт, , , , Истина);
			ОформлениеСтроки.Ячейки.Наименование.ЦветТекста = СерыйЦвет;
		КонецЕсли;
		
		// прорисовываем картинку статуса
		Если КартинкаСтатусаПоказана Тогда
			
			СтатусОтправкиПисьма = СтатусыОтправкиПисем[ДанныеСтроки.Ссылка];
			Если ДанныеСтроки.ПометкаУдаления Тогда
				Если ОформлениеСтроки.ДанныеСтроки.Статус = Перечисления.СтатусыПисем.Полученное Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 7;
				ИначеЕсли СтатусОтправкиПисьма = Перечисления.СтатусыОтправки.Отправлен Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 5;
				ИначеЕсли СтатусОтправкиПисьма = Перечисления.СтатусыОтправки.Доставлен Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 6;
				Иначе
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 4;
				КонецЕсли;
			Иначе
				Если ОформлениеСтроки.ДанныеСтроки.Статус = Перечисления.СтатусыПисем.Полученное Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 3;
				ИначеЕсли СтатусОтправкиПисьма = Перечисления.СтатусыОтправки.Отправлен Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 1;
				ИначеЕсли СтатусОтправкиПисьма = Перечисления.СтатусыОтправки.Доставлен Тогда
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 2;
				Иначе
					ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = 0;
				КонецЕсли;
			КонецЕсли;
			
			ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриПолученииДанныхВТабличномПолеЗапросов(Элемент, ОформленияСтрок)
	
	// прорисываем картинку статуса
	КартинкаСтатусаПоказана = (Элемент.Колонки.Найти("Статус") <> Неопределено) И Элемент.Колонки.Статус.Видимость;
	Если НЕ КартинкаСтатусаПоказана Тогда
		Возврат;
	КонецЕсли;
	
	// собираем ссылки на письма
	Письма = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки <> Неопределено И ДанныеСтроки <> Справочники.ПерепискаСКонтролирующимиОрганами.ПустаяСсылка() Тогда
			Письма.Добавить(ДанныеСтроки.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// получаем статусы отправки писем
	СтатусыОтправки = КонтекстЭДО.ПолучитьСтатусыОтправкиОбъектов(Письма);
	
	// получаем признаки наличия ответов на запросы
	ПризнакиОтветов = ПолучитьПризнакиНаличияОтветовНаЗапросы(Письма);
	
	// прорисовываем картинку статуса
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		// регулируем жирность шрифта
		Если КонтекстЭДО.ЗапросыПоКоторымПолученыОтветы <> Неопределено И КонтекстЭДО.ЗапросыПоКоторымПолученыОтветы.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено Тогда
			ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт, , , Истина);
		КонецЕсли;
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		// прорисовываем картинку
		СтатусОтправки = СтатусыОтправки[ДанныеСтроки.Ссылка];
		ИндексКартинки = НомерКартинкиПоСтатусуЗапроса[СтатусОтправки];
		Если ИндексКартинки = Неопределено Тогда
			ИндексКартинки = 1;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = ИндексКартинки + Число(ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления = Истина) * 7;
		ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
		
		// прорисовываем ответ
		ПризнакНаличияОтвета = ПризнакиОтветов[ДанныеСтроки.Ссылка];
		Если ЗначениеЗаполнено(ПризнакНаличияОтвета) Тогда
			ОформлениеСтроки.Ячейки.Ответ.Гиперссылка = Истина;
			ОформлениеСтроки.Ячейки.Ответ.УстановитьТекст("Показать");
			ОформлениеСтроки.Ячейки.Ответ.ЦветТекста = ЦветГиперссылки;
		Иначе
			ОформлениеСтроки.Ячейки.Ответ.Гиперссылка = Ложь;
			ОформлениеСтроки.Ячейки.Ответ.УстановитьТекст("<отсутствует>");
			ОформлениеСтроки.Ячейки.Ответ.ЦветТекста = СерыйЦвет;
			ОформлениеСтроки.Ячейки.Ответ.Шрифт = Новый Шрифт(ОформлениеСтроки.Ячейки.Ответ.Шрифт, , , , Истина);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПризнакиНаличияОтветовНаЗапросы(Запросы)
	
	Признаки = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка КАК Запрос,
	                      |	ВложенныйЗапрос.ПризнакНаличия
	                      |ИЗ
	                      |	Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК ЗапросНаИнформационноеОбслуживаниеНалогоплательщика
	                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	                      |			ОтветыНаЗапросыИОН.Запрос КАК Запрос,
	                      |			1 КАК ПризнакНаличия
	                      |		ИЗ
	                      |			РегистрСведений.ОтветыНаЗапросыИОН КАК ОтветыНаЗапросыИОН
	                      |		ГДЕ
	                      |			ОтветыНаЗапросыИОН.Запрос В(&Запросы)
	                      |		
	                      |		СГРУППИРОВАТЬ ПО
	                      |			ОтветыНаЗапросыИОН.Запрос) КАК ВложенныйЗапрос
	                      |		ПО ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка = ВложенныйЗапрос.Запрос
	                      |ГДЕ
	                      |	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка В(&Запросы)");
	Запрос.УстановитьПараметр("Запросы", Запросы);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Признаки.Вставить(Выборка.Запрос, ЗначениеЗаполнено(Выборка.ПризнакНаличия));
	КонецЦикла;
	Возврат Признаки;
	
КонецФункции

Процедура ИсходящиеДокументыПФРПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыПФРОткрыть(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ВходящиеДокументыПФР.ТекущаяСтрока;
	
	Если ТекСтрока <> Неопределено Тогда
		ОткрытьЗначение(ТекСтрока.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыПФРОтображатьСписокЦикловОбмена(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыПФРОтображатьСписокЦикловОбмена(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ИсходящиеДокументыПФРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Объект = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
	Объект.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСПФР;
	Если ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка Тогда
		Объект.Отправитель = ОтборУчетнаяЗапись;
	КонецЕсли;
	Объект.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ВходящиеДокументыПФРПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхВТабличномПолеПерепискиСКонтролирующимиОрганами(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыПФРОтветить(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ВходящиеДокументыПФР.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПисьмоОтвет = КонтекстЭДО.СоздатьОтветНаПисьмо(ТекСтрока.Ссылка);
	Если ПисьмоОтвет <> Неопределено Тогда
		ПисьмоОтвет.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПФРВывестиВОкно(Кнопка)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаПФРСУчетомОтборов(ЦиклыОбменаОтчетностьПФР);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Показать документы по циклу обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ВидимыеЦиклы.Количество() + " циклов обмена." + Символы.ПС + "Показать документы по выбранным циклам обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		КонтекстЭДО.ПоказатьДокументыЦикловОбмена(ВидимыеЦиклы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтчетДляОтбораПФРОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Неопределено;
	ОтчетДляОтбораПФР = Неопределено;
	
	УстановитьПредставлениеОтчетаДляОтбораПФР();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОтчетДляОтбораПФРОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(ОтчетДляОтбораПФР) Тогда
		Возврат;
	ИначеЕсли ТипЗнч(ОтчетДляОтбораПФР) = Тип("СписокЗначений") Тогда
		
		Если ОтчетДляОтбораПФР.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли ОтчетДляОтбораПФР.Количество() = 1 Тогда
			ОткрытьЗначение(ОтчетДляОтбораПФР[0].Значение);
		Иначе
			СписокДляВыбора = ОтчетДляОтбораПФР;
			Для Каждого Эл Из СписокДляВыбора Цикл
				Эл.Представление = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Эл.Значение);
			КонецЦикла;
			РезультатВыбора = СписокДляВыбора.ВыбратьЭлемент("Выберите отчет");
			Если РезультатВыбора <> Неопределено Тогда
				ОткрытьЗначение(РезультатВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		ОткрытьЗначение(ОтчетДляОтбораПФР);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельАрхивДокументооборотаСФНС(Кнопка)
	
	КонтекстЭДО.ПолучитьФорму("АрхивДокументооборота141").Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура КоманднаяПанельОтчетностьПодписать(Кнопка)
	
	КонтекстЭДО.ПолучитьФорму("Подписание").ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьСформироватьПодтверждения(Кнопка)
	
	ФормаШифрованиеРасшифровка = КонтекстЭДО.ПолучитьФорму("ФормированиеПодтверждений");
	ФормаШифрованиеРасшифровка.Организация.ЗагрузитьЗначения(ВыбранныеУчетныеЗаписи());
	ФормаШифрованиеРасшифровка.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьЗашифровать(Кнопка)
	
	ФормаШифрованиеРасшифровка = КонтекстЭДО.ПолучитьФорму("ШифрованиеРасшифровка");
	ФормаШифрованиеРасшифровка.Организация.ЗагрузитьЗначения(ВыбранныеУчетныеЗаписи());
	ФормаШифрованиеРасшифровка.ТребующиеШифрования = Истина;
	ФормаШифрованиеРасшифровка.ОткрытьМодально();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьРасшифровать(Кнопка)
	
	ФормаШифрованиеРасшифровка = КонтекстЭДО.ПолучитьФорму("ШифрованиеРасшифровка");
	ФормаШифрованиеРасшифровка.Организация.ЗагрузитьЗначения(ВыбранныеУчетныеЗаписи());
	ФормаШифрованиеРасшифровка.ТребующиеРасшифровки = Истина;
	ФормаШифрованиеРасшифровка.ОткрытьМодально();
	
КонецПроцедуры

Процедура ИсходящиеДокументыФНСПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ИсходящиеДокументыФНСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Объект = Справочники.ПерепискаСКонтролирующимиОрганами.СоздатьЭлемент();
	Объект.Тип = Перечисления.ТипыПерепискиСКонтролирующимиОрганами.ПерепискаСФНС;
	Если ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка Тогда
		Объект.Отправитель = ОтборУчетнаяЗапись;
	КонецЕсли;
	Объект.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ИсходящиеДокументыФНСПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхВТабличномПолеПерепискиСКонтролирующимиОрганами(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ВходящиеДокументыФНСПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВходящиеДокументыФНСПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхВТабличномПолеПерепискиСКонтролирующимиОрганами(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыФНСОткрыть(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ВходящиеДокументыФНС.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		ОткрытьЗначение(ТекСтрока.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыФНСОтветить(Кнопка)
	
	ТекСтрока = ЭлементыФормы.ВходящиеДокументыФНС.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПисьмоОтвет = КонтекстЭДО.СоздатьОтветНаПисьмо(ТекСтрока.Ссылка);
	Если ПисьмоОтвет <> Неопределено Тогда
		ПисьмоОтвет.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыФНСОтображатьСписокЦикловОбмена(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ЗапросыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ЗапросыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Объект = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент();
	Если ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОднойУчетнойЗаписи.Пометка Тогда
		Объект.Организация = ОтборУчетнаяЗапись;
	КонецЕсли;
	Объект.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ЗапросыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхВТабличномПолеЗапросов(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ЗапросыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Ответ" Тогда
		ПоказатьОтветНаЗапросИОН(ВыбраннаяСтрока.Ссылка, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьОтветНаЗапросИОН(Запрос, СтандартнаяОбработка = Неопределено)
	
	Если ТипЗнч(Запрос) = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") И ЗначениеЗаполнено(Запрос) Тогда
		СтандартнаяОбработка = НЕ КонтекстЭДО.ПоказатьОтветНаЗапросИОН(Запрос);
	КонецЕсли;
	
КонецПроцедуры

СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора = Новый Соответствие;
//СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По типам сообщений", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоТипамСообщений);
//СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По датам", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоДатам);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По исходному отчету", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоОтчету);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По эл. представлению", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоЭлектронномуПредставлению);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По виду отчета", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоВидуОтчета);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По периоду отчета", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоПериодуОтчета);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По виду документа", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоВидуДокумента);

СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора = Новый Соответствие;
СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора.Вставить("По исходному отчету", ЭлементыФормы.ПанельЦиклыОбменаПФРЗначениеОтбора.Страницы.ПоОтчету);
СоответствиеВидаОтбораЦикловОбменаПФРСтраницеПанелиОтбора.Вставить("По виду отчета", ЭлементыФормы.ПанельЦиклыОбменаПФРЗначениеОтбора.Страницы.ПоВидуОтчета);

ЗеленыйШар					= БиблиотекаКартинок.ЗеленыйШар;
СерыйШар					= БиблиотекаКартинок.СерыйШар;
ЗолотойШар					= БиблиотекаКартинок.ЗолотойШар;
ЗолотойШарЗашифрованное		= БиблиотекаКартинок.ЗолотойШарСЗамком;
ЗеленыйШарНерасшифрованное	= БиблиотекаКартинок.ЗеленыйШарСЗамком;

МассивНаименованийПравыхГраницПериода = Новый Массив;
МассивНаименованийПравыхГраницПериода.Добавить("января");
МассивНаименованийПравыхГраницПериода.Добавить("февраля");
МассивНаименованийПравыхГраницПериода.Добавить("I-го квартала");
МассивНаименованийПравыхГраницПериода.Добавить("апреля");
МассивНаименованийПравыхГраницПериода.Добавить("мая");
МассивНаименованийПравыхГраницПериода.Добавить("I-го полугодия");
МассивНаименованийПравыхГраницПериода.Добавить("июля");
МассивНаименованийПравыхГраницПериода.Добавить("августа");
МассивНаименованийПравыхГраницПериода.Добавить("III-го квартала");
МассивНаименованийПравыхГраницПериода.Добавить("октября");
МассивНаименованийПравыхГраницПериода.Добавить("ноября");
МассивНаименованийПравыхГраницПериода.Добавить("года");

ИсточникиЦикловОбмена = Новый Массив;
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаВходящиеДокументыФНС);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаИсходящиеДокументыФНС);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаОтчетность);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаЗапросы);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаОтчетностьПФР);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаИсходящиеДокументыПФР);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаВходящиеДокументыПФР);
Для Каждого Источник Из ИсточникиЦикловОбмена Цикл
	Источник.Колонки.Добавить("Организация");
	Источник.Колонки.Добавить("ДатаНачалаПериода");
	Источник.Колонки.Добавить("ДатаОкончанияПериода");
	Источник.Колонки.Добавить("ДатаЗакрытия");
	Источник.Колонки.Добавить("ВидДокумента");
	Источник.Колонки.Добавить("ВидОтчета");
	Источник.Колонки.Добавить("Вид");
	Источник.Колонки.Добавить("Тип");
	Источник.Колонки.Добавить("Предмет");
	Источник.Колонки.Добавить("ВидУслуги");
	Источник.Колонки.Добавить("ФорматОтвета");
	Источник.Колонки.Добавить("УчетнаяЗапись");
	Источник.Колонки.Добавить("ФорматДокументооборота");
КонецЦикла;

ПрочиеСообщения.Колонки.Добавить("ДатаТранспорта");
ПрочиеСообщения.Колонки.Добавить("ОтКогоАдрес");
ПрочиеСообщения.Колонки.Добавить("ОтКогоПредставление");
ПрочиеСообщения.Колонки.Добавить("УчетнаяЗапись");
ПрочиеСообщения.Колонки.Добавить("ПометкаУдаления");
ПрочиеСообщения.Колонки.Добавить("Статус");

ТабличныеПоляЦиклыОбмена = Новый Массив;
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаВходящиеДокументыФНС);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаИсходящиеДокументыФНС);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаЗапросы);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетностьПФР);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаИсходящиеДокументыПФР);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаВходящиеДокументыПФР);

мДатаНачалаИнтервалаОтбора		= '00010101000000';
мДатаОкончанияИнтервалаОтбора	= '00010101000000';

СоответствиеСтраницыПанелиИсточникуЦикловОбмена = Новый Соответствие;
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы, ЦиклыОбменаВходящиеДокументыФНС);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы, ЦиклыОбменаИсходящиеДокументыФНС);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Отчетность, ЦиклыОбменаОтчетность);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Запросы, ЦиклыОбменаЗапросы);

СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельПФР.Страницы.Отчетность, ЦиклыОбменаОтчетностьПФР);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельПФР.Страницы.ИсходящиеДокументы, ЦиклыОбменаИсходящиеДокументыПФР);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельПФР.Страницы.ВходящиеДокументы, ЦиклыОбменаВходящиеДокументыПФР);

СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена = Новый Соответствие;
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы, ЭлементыФормы.ЦиклыОбменаВходящиеДокументыФНС);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы, ЭлементыФормы.ЦиклыОбменаИсходящиеДокументыФНС);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Отчетность, ЭлементыФормы.ЦиклыОбменаОтчетность);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Запросы, ЭлементыФормы.ЦиклыОбменаЗапросы);

СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельПФР.Страницы.Отчетность, ЭлементыФормы.ЦиклыОбменаОтчетностьПФР);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельПФР.Страницы.ИсходящиеДокументы, ЭлементыФормы.ЦиклыОбменаИсходящиеДокументыПФР);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельПФР.Страницы.ВходящиеДокументы, ЭлементыФормы.ЦиклыОбменаВходящиеДокументыПФР);

//СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности = Новый Соответствие;
//СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы, ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиВходящиеДокументы);
//СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы, ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиИсходящиеДокументы);
//СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Отчетность, ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиОтчетность);
//СоответствиеСтраницыПанелиПанелиОтбораПоЗавершенности.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Запросы, ЭлементыФормы.КоманднаяПанельОтборПоЗавершенностиЗапросы);

КрасныйЦвет = Новый Цвет(255, 0, 0);
СерыйЦвет = Новый Цвет(192, 192, 192);
ЦветГиперссылки = Новый Цвет(0, 0, 222);

ВыбранныеЦиклыОбмена = Новый Массив;
ВыбранныеЦиклыОбменаПФР = Новый Массив;

ПрочиеСообщения.Колонки.Добавить("ЦиклОбмена");

ИсходящиеДокументыФНС.Колонки.Добавить("Статус");
ИсходящиеДокументыПФР.Колонки.Добавить("Статус");
ВходящиеДокументыФНС.Колонки.Добавить("Статус");
ВходящиеДокументыПФР.Колонки.Добавить("Статус");

НомерКартинкиПоСтатусуЗапроса = Новый Соответствие;
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе, 0);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен, 1);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыОтправки.ВКонверте, 2);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыОтправки.Отправлен, 3);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыОтправки.Доставлен, 4);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыОтправки.НеПринят, 5);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыОтправки.Сдан, 6);
НомерКартинкиПоСтатусуЗапроса.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.Сдан, 6);
