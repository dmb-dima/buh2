Перем СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора;
Перем СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбораЗапросы;
Перем СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена;
Перем ЗеленыйШар;
Перем ЗеленыйШарНерасшифрованное;
Перем СерыйШар;
Перем ЗолотойШар;
Перем ЗолотойШарЗашифрованное;
Перем МассивНаименованийПравыхГраницПериода;
Перем ДатаКонцаПериодаОтчета;
Перем ДатаНачалаПериодаОтчета;
Перем мДатаНачалаИнтервалаОтбора;
Перем мДатаОкончанияИнтервалаОтбора;
Перем СоответствиеСтраницыПанелиИсточникуЦикловОбмена;
Перем ТабличныеПоляЦиклыОбмена;
Перем КрасныйЦвет;
Перем СерыйЦвет;
Перем ВыбранныеЦиклыОбмена;
Перем ИсточникиЦикловОбмена;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// заполняем список учетных записей
	ЗаполнитьУчетныеЗаписи();
	
	// регулируем доступность табличных полей циклов обмена
	Для Каждого ТабличноеПолеЦиклОбмена Из ТабличныеПоляЦиклыОбмена Цикл
		Для Каждого НастройкаОтбора Из ТабличноеПолеЦиклОбмена.НастройкаОтбора Цикл
			НастройкаОтбора.Доступность = Ложь;
		КонецЦикла;
		Для Каждого НастройкаПорядка Из ТабличноеПолеЦиклОбмена.НастройкаПорядка Цикл
			НастройкаПорядка.Доступность = Истина;
		КонецЦикла;
		ТабличноеПолеЦиклОбмена.ВосстанавливатьТекущуюСтроку = Истина;
	КонецЦикла;
	
	// запрещаем отбор в табличных полях циклов обмена
	ЭлементыФормы.ЦиклыОбменаОтчетность.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаВходящиеДокументы.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаЗапросы.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	
	ЭлементыФормы.ЦиклыОбменаОтчетность.НастройкаОтбора.ФорматДокументооборота.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы.НастройкаОтбора.ФорматДокументооборота.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаВходящиеДокументы.НастройкаОтбора.ФорматДокументооборота.Доступность = Ложь;
	ЭлементыФормы.ЦиклыОбменаЗапросы.НастройкаОтбора.ФорматДокументооборота.Доступность = Ложь;
	
	// устанавливаем отбор по пометке удаления в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаИсходящиеДокументы.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаВходящиеДокументы.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаЗапросы.Отбор.ПометкаУдаления.Установить(Ложь);
	
	// устанавливаем отбор по виду в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	ЦиклыОбменаИсходящиеДокументы.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	ЦиклыОбменаВходящиеДокументы.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	ЦиклыОбменаЗапросы.Отбор.Вид.Установить(Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	
	// устанавливаем отбор по типу в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ЦиклыОбменаИсходящиеДокументы.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	ЦиклыОбменаВходящиеДокументы.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана);
	ЦиклыОбменаЗапросы.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	
	// устанавливаем отбор по формату документооборота в табличных полях циклов обмена
	ЦиклыОбменаОтчетность.Отбор.ФорматДокументооборота.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбменаИсходящиеДокументы.Отбор.ФорматДокументооборота.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбменаВходящиеДокументы.Отбор.ФорматДокументооборота.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбменаЗапросы.Отбор.ФорматДокументооборота.ВидСравнения = ВидСравнения.ВСписке;
	
	ЦиклыОбменаОтчетность.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.Приказ141);
	ЦиклыОбменаОтчетность.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	
	ЦиклыОбменаИсходящиеДокументы.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.Приказ141);
	ЦиклыОбменаИсходящиеДокументы.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	
	ЦиклыОбменаВходящиеДокументы.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.Приказ141);
	ЦиклыОбменаВходящиеДокументы.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	
	ЦиклыОбменаЗапросы.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.Приказ141);
	ЦиклыОбменаЗапросы.Отбор.ФорматДокументооборота.Значение.Добавить(Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	
	ЦиклыОбменаОтчетность.Отбор.ФорматДокументооборота.Использование = Истина;
	ЦиклыОбменаИсходящиеДокументы.Отбор.ФорматДокументооборота.Использование = Истина;
	ЦиклыОбменаВходящиеДокументы.Отбор.ФорматДокументооборота.Использование = Истина;
	ЦиклыОбменаЗапросы.Отбор.ФорматДокументооборота.Использование = Истина;
	
	// восстанавливаем настройки, сохраненные при последнем закрытии формы
	ВосстановитьЗначения();
	
	// устанавливаем сортировку по дате создания в табличных полях циклов обмена
	Для Каждого ИсточникЦикловОбмена Из ИсточникиЦикловОбмена Цикл
		Если ИсточникЦикловОбмена.Порядок.Количество() = 0 Тогда
			ИсточникЦикловОбмена.Порядок.Установить("ДатаСоздания");
		КонецЕсли;
	КонецЦикла;
	
	// регулируем отображение учетных записей и заполняем значение по умолчанию
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	
	ЭлементыФормы.ОтборУчетнаяЗапись.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	
	Если ЗначениеЗаполнено(ОтборУчетнаяЗапись) И УчетныеЗаписи.Найти(ОтборУчетнаяЗапись, "Объект") = Неопределено Тогда
		ОтборУчетнаяЗапись = Неопределено;
	КонецЕсли;
	
	ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию)
	И УчетныеЗаписи.Найти(ОргПоУмолчанию, "Объект") <> Неопределено
	И ((ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям)
	ИЛИ (НЕ ЗначениеЗаполнено(ОтборУчетнаяЗапись) И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию)))) Тогда
		ОтборУчетнаяЗапись = ОргПоУмолчанию;
	КонецЕсли;
	
	// инициализируем даты отбора по периоду
	ОсвежитьИнтервалОтбораПоПериоду(, Ложь, Ложь);
	
	// регулируем отборы
	УстановитьОтборы();
	
	// прорисовываем элементы управления
	УправлениеЭУ();
	
	// прорисовываем элементы управления на панели отбора циклов обмена отчетность с ФНС по периоду
	ПоказатьПериод();
	
	// подключаем обработчик ожидания для отслеживания даты в отборе по периоду
	ПодключитьОбработчикОжидания("ПроверкаСменыДаты", 60);
	
КонецПроцедуры

Процедура ЗаполнитьУчетныеЗаписи()
	
	// заполняем по ФНС
	ВыбраныВсеУчетныеЗаписи = (УчетныеЗаписи.Найти(Ложь, "Пометка") = Неопределено);
	ВсеУчетныеЗаписиНевыбраны = (УчетныеЗаписи.Найти(Истина, "Пометка") = Неопределено);
	
	ДопустимыеУчетныеЗаписи = КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена();
	
	Для Каждого ДопустимаяУчетнаяЗаписьФНС Из ДопустимыеУчетныеЗаписи Цикл
		Если УчетныеЗаписи.Найти(ДопустимаяУчетнаяЗаписьФНС, "Объект") = Неопределено Тогда
			НовСтр = УчетныеЗаписи.Добавить();
			НовСтр.Объект = ДопустимаяУчетнаяЗаписьФНС;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчетныхЗаписей = УчетныеЗаписи.Количество();
	Для ОбратныйИндекс = 1 По КоличествоУчетныхЗаписей Цикл
		НомСтр = КоличествоУчетныхЗаписей - ОбратныйИндекс;
		ТекЗапись = УчетныеЗаписи[НомСтр].Объект;
		Если ДопустимыеУчетныеЗаписи.Найти(ТекЗапись) = Неопределено Тогда
			Если ОтборУчетнаяЗапись = ТекЗапись Тогда
				ОтборУчетнаяЗапись = Неопределено;
			КонецЕсли;
			УчетныеЗаписи.Удалить(НомСтр);
		КонецЕсли;
	КонецЦикла;
	
	Если ВыбраныВсеУчетныеЗаписи Тогда
		УчетныеЗаписи.ЗаполнитьЗначения(Истина, "Пометка");
	ИначеЕсли ВсеУчетныеЗаписиНевыбраны Тогда
		УчетныеЗаписи.ЗаполнитьЗначения(Ложь, "Пометка");
	КонецЕсли;
	
	УчетныеЗаписи.Сортировать("Объект");
	
КонецПроцедуры

Процедура УстановитьРежимОтображения(РежимОднойУчетнойЗаписи)
	
	Если РежимОднойУчетнойЗаписи Тогда
		ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОтображения.Кнопки.ОднаУчетнаяЗапись.Пометка = Истина;
		ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОтображения.Кнопки.НесколькоУчетныхЗаписей.Пометка = Ложь;
	Иначе
		ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОтображения.Кнопки.ОднаУчетнаяЗапись.Пометка = Ложь;
		ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОтображения.Кнопки.НесколькоУчетныхЗаписей.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьЗначения()

	// восстанавливаем признак режима одной учетной записи
	сохрРежимОднойУчетнойЗаписи = ВосстановитьЗначение("КонтекстЭДО_РежимОднойУчетнойЗаписи");
	УстановитьРежимОтображения(сохрРежимОднойУчетнойЗаписи <> Ложь);
	
	// если это первое открытие, то установим сортировку списка
	ЭтоПервоеОткрытие = (ВосстановитьЗначение("Архив141_ПервоеОткрытие") <> Ложь);
	Если ЭтоПервоеОткрытие Тогда
		Для Каждого ИсточникЦикловОбмена Из ИсточникиЦикловОбмена Цикл
			ИсточникЦикловОбмена.Порядок.Установить("ДатаСоздания");
		КонецЦикла;
	КонецЕсли;
	
	// восстанавливаем отбор по учетным записям
	ВыбранныеУчетныеЗаписи = Новый СписокЗначений;
	ВыбранныеУчетныеЗаписи.ЗагрузитьЗначения(УчетныеЗаписи.ВыгрузитьКолонку("Объект"));
	Для Каждого УчЗапись Из УчетныеЗаписи Цикл
		УчЗапись.Пометка = (ВыбранныеУчетныеЗаписи.НайтиПоЗначению(УчЗапись.Объект) <> Неопределено);
	КонецЦикла;
	Если ВыбранныеУчетныеЗаписи.Количество() <> 0 Тогда
		ОтборУчетнаяЗапись = ВыбранныеУчетныеЗаписи.Получить(0).Значение;
	КонецЕсли;
	
	// устанавливаем отбор по периоду - без ограничений
	ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки.БезОграничений.Пометка = Истина;
	
	//
	ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(РабочаяДата, -1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	
КонецПроцедуры

Функция ПолучитьРежимОтображения()
	
	Возврат ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОтображения.Кнопки.ОднаУчетнаяЗапись.Пометка;
	
КонецФункции

Процедура СохранитьЗначения()
	
	СохранитьЗначение("КонтекстЭДО_РежимОднойУчетнойЗаписи", ПолучитьРежимОтображения());
	СохранитьЗначение("Архив141_ПервоеОткрытие", Ложь);
	
КонецПроцедуры

Процедура ОбновитьЗаголовокКнопкиОтбораПоПериоду()
	
	Если НЕ ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) И НЕ ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
		ЗаголовокКнопки = " Период: не ограничен";
	ИначеЕсли НЕ ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
		ЗаголовокКнопки = " Период: с " + Формат(мДатаНачалаИнтервалаОтбора, "ДФ=dd.MM.yyyy");
	ИначеЕсли НЕ ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) Тогда
		ЗаголовокКнопки = " Период: по " + Формат(мДатаОкончанияИнтервалаОтбора, "ДФ=dd.MM.yyyy");
	Иначе
		ЗаголовокКнопки = " Период: с " + Формат(мДатаНачалаИнтервалаОтбора, "ДФ=dd.MM.yyyy") + " по " + Формат(мДатаОкончанияИнтервалаОтбора, "ДФ=dd.MM.yyyy");
	КонецЕсли;
	ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Текст = ЗаголовокКнопки;
	
КонецПроцедуры

Функция ВыбранныеУчетныеЗаписи(Знач СтраницаФормы = Неопределено)
	
	Если СтраницаФормы = Неопределено Тогда
		СтраницаФормы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница;
	КонецЕсли;
	
	Если ПолучитьРежимОтображения() Тогда
		УчЗаписи = Новый Массив;
		Если ЗначениеЗаполнено(ОтборУчетнаяЗапись) Тогда
			УчЗаписи.Добавить(ОтборУчетнаяЗапись);
		КонецЕсли;
		Возврат УчЗаписи;
	Иначе
		УчЗаписи = Новый Массив;
		Для Каждого УчЗап Из УчетныеЗаписи Цикл
			Если УчЗап.Пометка Тогда
				УчЗаписи.Добавить(УчЗап.Объект);
			КонецЕсли;
		КонецЦикла;
		Возврат УчЗаписи;
	КонецЕсли;
	
КонецФункции

Процедура УправлениеЭУ()
	
	РежимОднойУчетнойЗаписи = ПолучитьРежимОтображения();
	Если НЕ РежимОднойУчетнойЗаписи Тогда
		
		// регулируем показ верхней панели с учетной записью
		ЭлементыФормы.ПанельУчетнаяЗапись.Свертка = РежимСверткиЭлементаУправления.Верх;
		
		// регулируем показ левой панели с учетными записями
		Если ЭлементыФормы.Разделитель1.Свертка <> РежимСверткиЭлементаУправления.Нет Тогда
			
			// сбрасываем левую привязку панели формы перед изменением сверток остальных связанных элементов
			ЭлементыФормы.ПанельФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево);
			
			ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормы.ПанельУчетныеЗаписи.Свертка = РежимСверткиЭлементаУправления.Нет;
			
			ЭлементыФормы.ПанельФормы.Ширина = ЭлементыФормы.ПанельФормы.Ширина - ЭлементыФормы.ПанельУчетныеЗаписи.Ширина - ЭлементыФормы.Разделитель1.Ширина;
			ЭлементыФормы.ПанельФормы.Лево = ЭлементыФормы.ПанельФормы.Лево + ЭлементыФормы.ПанельУчетныеЗаписи.Ширина + ЭлементыФормы.Разделитель1.Ширина;
			
			ЭлементыФормы.ПанельФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Право);
			
		КонецЕсли;
		
	Иначе
		
		// регулируем показ верхней панели с учетной записью
		ЭлементыФормы.ПанельУчетнаяЗапись.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		// регулируем показ левой панели с учетными записями
		Если ЭлементыФормы.Разделитель1.Свертка <> РежимСверткиЭлементаУправления.Лево Тогда
			
			ЛеваяКоордината = ЭлементыФормы.ПанельУчетныеЗаписи.Лево;
			ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Лево;
			ЭлементыФормы.ПанельУчетныеЗаписи.Свертка = РежимСверткиЭлементаУправления.Лево;
			ЛевоДоРасширения = ЭлементыФормы.ПанельФормы.Лево;
			
			ЭлементыФормы.ПанельФормы.Лево = ЛеваяКоордината;
			ЭлементыФормы.ПанельФормы.Ширина = ЭлементыФормы.ПанельФормы.Ширина + ЛевоДоРасширения - ЛеваяКоордината;
			
			ЭлементыФормы.ПанельФормы.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельФормы, ГраницаЭлементаУправления.Лево);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница;
	Если ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.ФНС Тогда
	
		ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.ТекущаяСтраница;
		Если ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Отчетность Тогда
			ЭлементыФормы.ПанельЦиклыОбменаОтчетностьОтбор.Свертка = ?(ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			Если ЭлементыФормы.ПанельЦиклыОбменаОтчетностьОтбор.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
				Если ЗначениеЗаполнено(ВидОтбораЦикловОбмена) Тогда
					ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.ТекущаяСтраница = СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора[ВидОтбораЦикловОбмена];
				КонецЕсли;
				ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Свертка = ?(ВидОтбораЦикловОбмена = "По периоду отчета", РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			Иначе
				ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Свертка = РежимСверткиЭлементаУправления.Верх;
			КонецЕсли;
			ЭлементыФормы.ФлажокУточнениеНомераКорректировки.Доступность = (ВидДокумента = 1);
			ЭлементыФормы.НомерКорректировки.Доступность = (ВидДокумента = 1 И УточнениеНомераКорректировки);
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы Тогда
			ЭлементыФормы.ПанельЦиклыОбменаВходящиеОтбор.Свертка = ?(ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы Тогда
			ЭлементыФормы.ПанельЦиклыОбменаИсходящиеОтбор.Свертка = ?(ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		ИначеЕсли ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Запросы Тогда
			ЭлементыФормы.ПанельЦиклыОбменаЗапросОтбор.Свертка = ?(ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
			Если ЗначениеЗаполнено(ВидОтбораЦикловОбменаЗапросы) Тогда
				ЭлементыФормы.ПанельЦиклыОбменаЗапросыЗначениеОтбора.ТекущаяСтраница = СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбораЗапросы[ВидОтбораЦикловОбменаЗапросы];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура КоманднаяПанельУчетныеЗаписиУстановитьФлажки(Кнопка)
	
	УчетныеЗаписи.ЗаполнитьЗначения(Истина, "Пометка");
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельУчетныеЗаписиСнятьФлажки(Кнопка)
	
	УчетныеЗаписи.ЗаполнитьЗначения(Ложь, "Пометка");
	УстановитьОтборы();
	
КонецПроцедуры

Функция ВидимыеЦиклыОбмена(Элемент)
	
	Результат = Новый Массив;
	
	СоответствиеВидовСравненияЗнакамОпераций = Новый Соответствие;
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.Больше, ">");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.БольшеИлиРавно, ">=");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.ВИерархии, "В ИЕРАРХИИ");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.ВСписке, "В");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.Меньше, "<");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.МеньшеИлиРавно, "<=");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.НеВИерархии, "НЕ В ИЕРАРХИИ");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.НеВСписке, "НЕ В");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.НеРавно, "<>");
	СоответствиеВидовСравненияЗнакамОпераций.Вставить(ВидСравнения.Равно, "=");
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦиклыОбмена.Ссылка
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена");
						  
	// генерируем доп. условия
	ДопУсловия = Новый Массив;
	Для Каждого ЭлементОтбора Из Элемент.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ИмяПараметра = "парам" + ЭлементОтбора.Имя;
			ДопУсловия.Добавить("ЦиклыОбмена."
								+ ЭлементОтбора.Имя
								+ " "
								+ СоответствиеВидовСравненияЗнакамОпераций[ЭлементОтбора.ВидСравнения]
								+ " (&" + ИмяПараметра + ")");
			Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Инд = 1 По ДопУсловия.Количество() Цикл
		ТекУсловие = ДопУсловия[Инд - 1];
		Если Инд = 1 Тогда
			Запрос.Текст = Запрос.ТЕкст + "
						|ГДЕ
						|	" + ТекУсловие;
		Иначе
			Запрос.Текст = Запрос.Текст + "
						|	И " + ТекУсловие;
		КонецЕсли;
	КонецЦикла;
	
	// генерируем код сортировки
	ЭлементыСортировки = Новый Массив;
	Для Каждого ЭлементПорядка Из Элемент.Порядок Цикл
		ЭлементыСортировки.Добавить("ЦиклыОбмена." + ЭлементПорядка.Данные + ?(ЭлементПорядка.Направление = НаправлениеСортировки.Возр, "", " УБЫВ"));
	КонецЦикла;
	ЭлементыСортировки.Добавить("ЦиклыОбмена.Ссылка");
	
	Для Инд = 1 По ЭлементыСортировки.Количество() Цикл
		ТекЭлементСортировки = ЭлементыСортировки[Инд - 1];
		Если Инд = 1 Тогда
			Запрос.Текст = Запрос.Текст + "
						|УПОРЯДОЧИТЬ ПО
						|	" + ТекЭлементСортировки;
		Иначе
			Запрос.Текст = Запрос.Текст + ",
						|	" + ТекЭлементСортировки;
		КонецЕсли;
	КонецЦикла;
	
	// выполняем запрос и заполняем массив результата
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Результат.Добавить(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ТабличноеПолеЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если Элемент.Колонки.Найти("Пометка") <> Неопределено И Элемент.Колонки.Пометка.Видимость Тогда
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Пометка.Флажок = (ВыбранныеЦиклыОбмена.Найти(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ТабличноеПолеЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УстановитьОтборы()
	
	ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница;
	
	Если ТекущаяСтраницаФормы = ЭлементыФормы.ПанельФормы.Страницы.ФНС Тогда
	
		ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.ТекущаяСтраница;
		ТекущийИсточникЦикловОбмена = СоответствиеСтраницыПанелиИсточникуЦикловОбмена[ТекущаяСтраницаОсновнойПанели];
		
		Для Каждого ЭлементОтбора Из ТекущийИсточникЦикловОбмена.Отбор Цикл
			Если ЭлементОтбора.Имя <> "Тип" И ЭлементОтбора.Имя <> "ПометкаУдаления" И ЭлементОтбора.Имя <> "Вид" И ЭлементОтбора.Имя <> "ФорматДокументооборота" Тогда
				ЭлементОтбора.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		ОтборПоОснованиюВключен = Ложь;
		Если (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Отчетность И ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка И (ВидОтбораЦикловОбмена = "По исходному отчету" ИЛИ ВидОтбораЦикловОбмена = "По эл. представлению"))
		ИЛИ (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы И ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка)
		ИЛИ (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы И ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка)
		ИЛИ (ТекущаяСтраницаОсновнойПанели = ЭлементыФормы.ПанельФНС.Страницы.Запросы И ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка И ВидОтбораЦикловОбмена = "По запросу") Тогда
		
			ОтборПоОснованиюВключен = Истина;
		
		КонецЕсли;
		
		Если НЕ ОтборПоОснованиюВключен Тогда
			
			ПомеченныеУчетныеЗаписи = ВыбранныеУчетныеЗаписи();
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Использование = Ложь;
			ТекущийИсточникЦикловОбмена.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Значение.ЗагрузитьЗначения(ПомеченныеУчетныеЗаписи);
			ТекущийИсточникЦикловОбмена.Отбор.Организация.Использование = Истина;
			
			ТекущийИсточникЦикловОбмена.Отбор.Ссылка.Использование = Ложь;
			
			Если ЗначениеЗаполнено(мДатаНачалаИнтервалаОтбора) Тогда
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Значение = мДатаНачалаИнтервалаОтбора;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Использование = Истина;
			Иначе
				ТекущийИсточникЦикловОбмена.Отбор.ДатаЗакрытия.Использование = Ложь;
			КонецЕсли;
			Если ЗначениеЗаполнено(мДатаОкончанияИнтервалаОтбора) Тогда
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Значение = мДатаОкончанияИнтервалаОтбора;
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Использование = Истина;
			Иначе
				ТекущийИсточникЦикловОбмена.Отбор.ДатаСоздания.Использование = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущийИсточникЦикловОбмена = ЦиклыОбменаОтчетность И ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка Тогда
			
			Если ВидОтбораЦикловОбмена = "По виду отчета" Тогда
				
				Если ВидОтчетаДляОтбора.ЭтоГруппа Тогда
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.ВИерархии;
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбора;
				Иначе
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.ВидСравнения = ВидСравнения.Равно;
					ЦиклыОбменаОтчетность.Отбор.ВидОтчета.Значение = ВидОтчетаДляОтбора;
				Конецесли;
				ЦиклыОбменаОтчетность.Отбор.ВидОтчета.Использование = Истина;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По периоду отчета" Тогда
				
				ЦиклыОбменаОтчетность.Отбор.ДатаОкончанияПериода.ВидСравнения = ВидСравнения.Равно;
				ЦиклыОбменаОтчетность.Отбор.ДатаОкончанияПериода.Значение = НачалоДня(ДатаКонцаПериодаОтчета);
				ЦиклыОбменаОтчетность.Отбор.ДатаОкончанияПериода.Использование = Истина;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По виду документа" Тогда
				
				Если ВидДокумента = 0 ИЛИ УточнениеНомераКорректировки Тогда
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.ВидСравнения = ВидСравнения.Равно;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Значение = ВидДокумента*НомерКорректировки;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Использование = Истина;
				Иначе
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.ВидСравнения = ВидСравнения.Больше;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Значение = 0;
					ЦиклыОбменаОтчетность.Отбор.ВидДокумента.Использование = Истина;
				КонецЕсли;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По исходному отчету" Тогда
				
				Если ТипЗнч(ОтчетДляОтбора) = Тип("СписокЗначений") Тогда
					ОтчетыДляОтбора = ОтчетДляОтбора.ВыгрузитьЗначения();
				Иначе
					ОтчетыДляОтбора = Новый Массив;
					ОтчетыДляОтбора.Добавить(ОтчетДляОтбора);
				КонецЕсли;
				
				ЦиклыОбменаОтчетность.Отбор.Предмет.Использование = Ложь;
				ЦиклыОбменаОтчетность.Отбор.Предмет.ВидСравнения = ВидСравнения.ВСписке;
				ЦиклыОбменаОтчетность.Отбор.Предмет.Значение.ЗагрузитьЗначения(ОтчетыДляОтбора);
				ЦиклыОбменаОтчетность.Отбор.Предмет.Использование = Истина;
				
			ИначеЕсли ВидОтбораЦикловОбмена = "По эл. представлению" Тогда
				
				ЦиклыОбменаОтчетность.Отбор.Предмет.Установить(ЭлектронноеПредставлениеДляОтбора);
				
			КонецЕсли;
			
		ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаВходящиеДокументы Тогда
			
			Если ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка Тогда
				ЦиклыОбменаВходящиеДокументы.Отбор.Предмет.Установить(ОтборВходящийДокумент);
			Иначе
				ЦиклыОбменаВходящиеДокументы.Отбор.Предмет.Использование = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаИсходящиеДокументы Тогда
			
			Если ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка Тогда
				ЦиклыОбменаИсходящиеДокументы.Отбор.Предмет.Установить(ОтборИсходящийДокумент);
			Иначе
				ЦиклыОбменаИсходящиеДокументы.Отбор.Предмет.Использование = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТекущийИсточникЦикловОбмена = ЦиклыОбменаЗапросы И ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка Тогда
			
			Если ВидОтбораЦикловОбменаЗапросы = "По запросу" Тогда
				
				ЦиклыОбменаЗапросы.Отбор.Предмет.Установить(ОтборЗапрос);
				
			ИначеЕсли ВидОтбораЦикловОбменаЗапросы = "По виду услуги" Тогда
				
				Если ЗначениеЗаполнено(ОтборВидУслуги) Тогда
					ЦиклыОбменаЗапросы.Отбор.ВидУслуги.Установить(ОтборВидУслуги);
				Иначе
					ЦиклыОбменаЗапросы.Отбор.ВидУслуги.Использование = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущееТабличноеПолеЦикловОбмена = СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена[ЭлементыФормы.ПанельФНС.ТекущаяСтраница];
		Если ТекущееТабличноеПолеЦикловОбмена <> Неопределено Тогда
			ТекущееТабличноеПолеЦикловОбмена.ОбновитьСтроки();
		КонецЕсли;
		
		ОбновитьПодсказкиЭлементовУправленияПериодом();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УчетныеЗаписиПриИзмененииФлажка(Элемент, Колонка)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВидовОтбораЦикловОбмена = Новый СписокЗначений;
	Для Каждого ВидОтбора из СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора Цикл
		СписокВидовОтбораЦикловОбмена.Добавить(ВидОтбора.Ключ);
	КонецЦикла;
	РезультатВыбора = ВыбратьИзСписка(СписокВидовОтбораЦикловОбмена, , СписокВидовОтбораЦикловОбмена.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УстановитьОтборы();
		УправлениеЭУ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначения();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаОтбор(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура УчетныеЗаписиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Для Каждого УчетнаяЗапись Из УчетныеЗаписи Цикл
		УчетнаяЗапись.Пометка = (УчетнаяЗапись = ВыбраннаяСтрока);
	КонецЦикла;
	УстановитьОтборы();
	
КонецПроцедуры

Процедура НадписьМесяц1Нажатие(Элемент)
	
	МесяцМинус1 = Число(Сред(Элемент.Имя, 13)) - 1;
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ПриИзмененииМесяца()
	
	Месяц = МесяцМинус1 + 1;
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	УправлениеНадписямиМесяцев();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОбновитьПодсказкиЭлементовУправленияПериодом()
	
	Если ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) Тогда
		Подсказка = "Отчеты, представляемые по истечении " + МассивНаименованийПравыхГраницПериода[Месяц(ДатаКонцаПериодаОтчета) - 1] + " " + Формат(Год, "ЧГ=0") + " года";
	Иначе
		Подсказка = "";
	КонецЕсли;
	
	ЭлементыФормы.ПанельЦиклыОбменаОтборПоПериодуОтчета.Подсказка = Подсказка;
	ЭлементыФормы.ПолосаРегулированияПериода.Подсказка = Подсказка;
	ЭлементыФормы.Год.Подсказка = Подсказка;
	ЭлементыФормы.НадписьГод.Подсказка = Подсказка;
	
КонецПроцедуры

Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтчета);
	Для Сч = 0 По 11 Цикл
		Если Сч = Месяц - 1 Тогда
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет(0, 0, 255);
		Иначе
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтчета);
	МесяцМинус1 = Месяц(ДатаКонцаПериодаОтчета) - 1;
	УправлениеНадписямиМесяцев();

КонецПроцедуры

Процедура ПолосаРегулированияПериодаПриИзменении(Элемент)
	
	ПриИзмененииМесяца();
	
КонецПроцедуры

Процедура ВидОтчетаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтчетДляОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.Значение = Неопределено;
	
КонецПроцедуры

Процедура ПереключательВидДокументаПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ПереключательВидДокумента1ПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ОтчетДляОтбораПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ВидОтчетаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаРегламентированныйОтчет(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока <> Неопределено Тогда
		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаНайтиОтчетВСписке(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока <> Неопределено Тогда
		Предмет = ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка.Предмет;
		Если ТипЗнч(Предмет) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью").Открыть();
			Оповестить("Позиционирование в списке отчетов с предупреждением", Предмет);
		Иначе
			ФормаСписка = Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьФормуСписка();
			ФормаСписка.Отбор.Сбросить();
			ФормаСписка.ПараметрТекущаяСтрока = Предмет;
			ФормаСписка.Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФлажокУточнениеНомераКорректировкиПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтчетДляОтбораСтрокаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УправлениеОтчетностью = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью", ЭтаФорма);
	УправлениеОтчетностью.РежимВыбора = Истина;
	РезультатВыбора = УправлениеОтчетностью.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		Если ТипЗнч(РезультатВыбора) = Тип("СписокЗначений") Тогда
			Если РезультатВыбора.Количество() = 0 Тогда
				ОтчетДляОтбора = Неопределено;
			ИначеЕсли РезультатВыбора.Количество() = 1 Тогда
				ОтчетДляОтбора = РезультатВыбора.Получить(0).Значение;
			Иначе
				Для Каждого Эл Из РезультатВыбора Цикл
					Эл.Представление = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(Эл.Значение);
				КонецЦикла;
				ОтчетДляОтбора = РезультатВыбора;
			КонецЕсли;
		Иначе
			ОтчетДляОтбора = РезультатВыбора;
		КонецЕсли;
	КонецЕсли;
	УстановитьПредставлениеОтчетаДляОтбора();
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура УстановитьПредставлениеОтчетаДляОтбора()
	
	Если НЕ ЗначениеЗаполнено(ОтчетДляОтбора) Тогда
		ОтчетДляОтбораСтрока = "";
	Иначе
		ТипОтчетаДляОтбора = ТипЗнч(ОтчетДляОтбора);
		Если ТипОтчетаДляОтбора = Тип("СписокЗначений") Тогда
			ОтчетДляОтбораСтрока = "";
			Для Каждого Отч Из ОтчетДляОтбора Цикл
				ОтчетДляОтбораСтрока = ОтчетДляОтбораСтрока + Отч + "; ";
			КонецЦикла;
			ОтчетДляОтбораСтрока = Лев(ОтчетДляОтбораСтрока, СтрДлина(ОтчетДляОтбораСтрока) - 2);
		Иначе
			ОтчетДляОтбораСтрока = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетДляОтбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтчетДляОтбораОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТипЗнчОтчетаДляОтбора = ТипЗнч(ОтчетДляОтбора);
	Если ТипЗнчОтчетаДляОтбора <> Неопределено Тогда
		Если ТипЗнчОтчетаДляОтбора = Тип("СписокЗначений") Тогда
			РезультатВыбораОтчета = ОтчетДляОтбора.ВыбратьЭлемент("Выберите отчет для открытия");
			Если РезультатВыбораОтчета <> Неопределено Тогда
				РезультатВыбораОтчета.Значение.ПолучитьФорму().Открыть();
			КонецЕсли;
		Иначе
			ОтчетДляОтбора.ПолучитьФорму().Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборУчетнаяЗаписьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокУчетныхЗаписей = Новый СписокЗначений;
	СписокУчетныхЗаписей.ЗагрузитьЗначения(УчетныеЗаписи.ВыгрузитьКолонку("Объект"));
	РезультатВыбора = ВыбратьИзСписка(СписокУчетныхЗаписей, , СписокУчетныхЗаписей.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборУчетнаяЗаписьПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ЦиклыОбменаПередУдалением(Элемент, Отказ)
	
	ИмяКолонки = ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяКолонка.Имя;
	Если ИмяКолонки = "ПервичноеСообщение" ИЛИ ИмяКолонки = "ПодтверждениеОтправки" ИЛИ ИмяКолонки = "ОтветНаПодтверждениеОтправки"
	ИЛИ ИмяКолонки = "ПодтверждениеДоставки" ИЛИ ИмяКолонки = "ПротоколПроверки" ИЛИ ИмяКолонки = "ПодтверждениеНаПротоколПроверки"
	ИЛИ ИмяКолонки = "ОтветНаЗапрос" ИЛИ ИмяКолонки = "ОтветНаОтветНаЗапрос" Тогда
	
		Отказ = Истина;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Показать циклы обмена" Тогда
		ТипЗначенияПараметра = ТипЗнч(Параметр);
		
		Если ТипЗначенияПараметра = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.Отчетность;
			ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка = Истина;
			ВидОтбораЦикловОбмена = "По исходному отчету";
			ОтчетДляОтбора = Параметр;
			УстановитьПредставлениеОтчетаДляОтбора();
		ИначеЕсли ТипЗначенияПараметра = Тип("ДокументСсылка.НеформализованныйДокументНалоговогоОргана") Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы;
			ЭлементыФормы.КоманднаяПанельВходящиеДокументы.Кнопки.Отобрать.Пометка = Истина;
			ОтборВходящийДокумент = Параметр;
		ИначеЕсли ТипЗначенияПараметра = Тип("ДокументСсылка.НеформализованныйДокументНалогоплательщика") Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы;
			ЭлементыФормы.КоманднаяПанельИсходящиеДокументы.Кнопки.Отобрать.Пометка = Истина;
			ОтборИсходящийДокумент = Параметр;
		ИначеЕсли ТипЗначенияПараметра = Тип("СправочникСсылка.ЭлектронныеПредставленияРегламентированныхОтчетов") Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.Отчетность;
			ЭлементыФормы.КоманднаяПанельОтчетность.Кнопки.Отобрать.Пометка = Истина;
			ВидОтбораЦикловОбмена = "По эл. представлению";
			ЭлектронноеПредставлениеДляОтбора = Параметр;
		ИначеЕсли ТипЗначенияПараметра = Тип("ДокументСсылка.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика") Тогда
			ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы.ФНС;
			ЭлементыФормы.ПанельФНС.ТекущаяСтраница = ЭлементыФормы.ПанельФНС.Страницы.Запросы;
			ЭлементыФормы.КоманднаяПанельЗапросы.Кнопки.Отобрать.Пометка = Истина;
			ВидОтбораЦикловОбменаЗапросы = "По запросу";
			ОтборЗапрос = Параметр;
		КонецЕсли;
		
		УстановитьОтборы();
		УправлениеЭУ();
		
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		УстановитьОтборы();
		
	ИначеЕсли ИмяСобытия = "Чтение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		ТЧЦикловОбмена = СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена[ЭлементыФормы.ПанельФНС.ТекущаяСтраница];
		Если ТЧЦикловОбмена <> Неопределено Тогда
			ТЧЦикловОбмена.ОбновитьСтроки(Параметр.ЦиклОбмена);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Изменение учетной записи налогоплательщика"
	ИЛИ ИмяСобытия = "Изменение состава пользователей учетной записи налогоплательщика"
	ИЛИ ИмяСобытия = "Изменение организации" Тогда
		
		ЗаполнитьУчетныеЗаписи();
		УстановитьОтборы();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельВходящиеДокументы(Кнопка)
	
	Документы.НеформализованныйДокументНалоговогоОргана.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельЗапросыНаИнформационноеОбслуживание(Кнопка)
	
	Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельВыборПериода(Кнопка)
	
	СледуетОбновлятьОтборы = НЕ Кнопка.Пометка;
	Для Каждого _Кнопка Из ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки Цикл
		_Кнопка.Пометка = (_Кнопка = Кнопка);
	КонецЦикла;
	ОсвежитьИнтервалОтбораПоПериоду(Кнопка, , СледуетОбновлятьОтборы);
	
КонецПроцедуры

Процедура ОсвежитьИнтервалОтбораПоПериоду(Кнопка = Неопределено, МенятьИнтервал = Истина, СледуетОбновлятьОтборы = Истина)
	
	Если Кнопка = Неопределено Тогда
		Для Каждого _Кнопка Из ЭлементыФормы.КоманднаяОтборПоПериоду.Кнопки.Период.Кнопки Цикл
			Если _Кнопка.Пометка Тогда
				Кнопка = _Кнопка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	_мДатаНачалаИнтервалаОтбора = мДатаНачалаИнтервалаОтбора;
	_мДатаОкончанияИнтервалаОтбора = мДатаОкончанияИнтервалаОтбора;
	ИмяКнопки = Кнопка.Имя;
	ТекДата = РабочаяДата;
	СекундВСутках = 60*60*24;
	Если ИмяКнопки = "Сегодня" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоДня(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецДня(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущаяНеделя" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоНедели(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецНедели(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущийМесяц" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоМесяца(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецМесяца(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущийКвартал" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоКвартала(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецКвартала(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ТекущийГод" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоГода(ТекДата);
		мДатаОкончанияИнтервалаОтбора = КонецГода(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "Вчера" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоДня(ТекДата - СекундВСутках);
		мДатаОкончанияИнтервалаОтбора = КонецДня(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущаяНеделя" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоНедели(ТекДата - СекундВСутках * 7);
		мДатаОкончанияИнтервалаОтбора = КонецНедели(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущийМесяц" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоМесяца(ДобавитьМесяц(ТекДата, -1));
		мДатаОкончанияИнтервалаОтбора = КонецМесяца(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущийКвартал" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоКвартала(ДобавитьМесяц(ТекДата, -3));
		мДатаОкончанияИнтервалаОтбора = КонецКвартала(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "ПредыдущийГод" Тогда
		мДатаНачалаИнтервалаОтбора = НачалоГода(ДобавитьМесяц(ТекДата, -12));
		мДатаОкончанияИнтервалаОтбора = КонецГода(мДатаНачалаИнтервалаОтбора);
	ИначеЕсли ИмяКнопки = "БезОграничений" Тогда
		мДатаНачалаИнтервалаОтбора = '00010101000000';
		мДатаОкончанияИнтервалаОтбора = '00010101000000';
	ИначеЕсли ИмяКнопки = "ПроизвольныйПериод" И МенятьИнтервал Тогда
		ДиалогНастройкиПериода = Новый НастройкаПериода;
		ДиалогНастройкиПериода.УстановитьПериод(НачалоДня(мДатаНачалаИнтервалаОтбора), КонецДня(мДатаОкончанияИнтервалаОтбора));
		ДиалогНастройкиПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
		Если ДиалогНастройкиПериода.Редактировать() Тогда
			_ДатаНачала = ДиалогНастройкиПериода.ПолучитьДатуНачала();
			Если _ДатаНачала <> '00010101000000' Тогда
				мДатаНачалаИнтервалаОтбора = НачалоДня(_ДатаНачала);
			Иначе
				мДатаНачалаИнтервалаОтбора = _ДатаНачала;
			КонецЕсли;
			_ДатаОкончания = ДиалогНастройкиПериода.ПолучитьДатуОкончания();
			Если _ДатаОкончания <> '00010101000000' Тогда
				мДатаОкончанияИнтервалаОтбора = КонецДня(_ДатаОкончания);
			Иначе
				мДатаОкончанияИнтервалаОтбора = _ДатаОкончания;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОбновитьЗаголовокКнопкиОтбораПоПериоду();
	
	Если _мДатаНачалаИнтервалаОтбора <> мДатаНачалаИнтервалаОтбора ИЛИ _мДатаОкончанияИнтервалаОтбора <> мДатаОкончанияИнтервалаОтбора Тогда
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ПроверкаСменыДаты()
	
	ОсвежитьИнтервалОтбораПоПериоду(, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыОткрытьОснование(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы.ТекущиеДанные.Ссылка.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельВходящиеДокументыОткрытьОснование(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаВходящиеДокументы.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаВходящиеДокументы.ТекущиеДанные.Ссылка.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтборИсходящийДокументПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОтборЗапросПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОтборВходящийДокументПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ЭлектронноеПредставлениеДляОтбораПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ЭлектронноеПредставлениеДляОтбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросыОткрытьОснование(Кнопка)
	
	Если ЭлементыФормы.ЦиклыОбменаЗапросы.ТекущиеДанные <> Неопределено Тогда
		ОткрытьЗначение(ЭлементыФормы.ЦиклыОбменаЗапросы.ТекущиеДанные.Ссылка.Предмет);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросыЖурнал(Кнопка)
	
	Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросыОтобрать(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьОтборы();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаЗапросыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВидовОтбораЦикловОбмена = Новый СписокЗначений;
	Для Каждого ВидОтбора из СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбораЗапросы Цикл
		СписокВидовОтбораЦикловОбмена.Добавить(ВидОтбора.Ключ);
	КонецЦикла;
	РезультатВыбора = ВыбратьИзСписка(СписокВидовОтбораЦикловОбмена, , СписокВидовОтбораЦикловОбмена.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение = РезультатВыбора.Значение;
		УстановитьОтборы();
		УправлениеЭУ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидОтбораЦикловОбменаЗапросыОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтборВидУслугиПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура ОтборВидУслугиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОтборЗапросОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельИсходящиеДокументы(Кнопка)
	
	Документы.НеформализованныйДокументНалогоплательщика.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВывестиВОкно(Кнопка)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Показать документы по циклу обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ВидимыеЦиклы.Количество() + " циклов обмена." + Символы.ПС + "Показать документы по выбранным циклам обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		КонтекстЭДО.ПоказатьДокументыЦикловОбмена(ВидимыеЦиклы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклыОбменаОтчетностьПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекСсылка = ТекСтрока.Ссылка;
	Если НЕ Элемент.ОформлениеСтроки(ТекСтрока).Ячейки.Пометка.Флажок Тогда
		Если ВыбранныеЦиклыОбмена.Найти(ТекСсылка) = Неопределено Тогда
			ВыбранныеЦиклыОбмена.Добавить(ТекСсылка);
		КонецЕсли;
	Иначе
		РезультатПоиска = ВыбранныеЦиклыОбмена.Найти(ТекСсылка);
		Если РезультатПоиска <> Неопределено Тогда
			ВыбранныеЦиклыОбмена.Удалить(РезультатПоиска);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьУстановитьФлажкиУВсех(Кнопка)
	
	ВыбранныеЦиклыОбмена = ВидимыеЦиклыОбмена(ЦиклыОбменаОтчетность);
	ЭлементыФормы.ЦиклыОбменаОтчетность.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьСнятьФлажкиУВсех(Кнопка)
	
	ВыбранныеЦиклыОбмена.Очистить();
	ЭлементыФормы.ЦиклыОбменаОтчетность.ОбновитьСтроки();
	
КонецПроцедуры

Функция ВыбранныеЦиклыОбменаСУчетомОтборов(Элемент)
	
	ВидимыеЦиклы = ВидимыеЦиклыОбмена(ЦиклыОбменаОтчетность);
	ЧислоВидимыхЦиклов = ВидимыеЦиклы.Количество();
	Для Инд = 1 По ЧислоВидимыхЦиклов Цикл
		ТекЦикл = ВидимыеЦиклы[ЧислоВидимыхЦиклов - Инд];
		РезультатПоиска = ВыбранныеЦиклыОбмена.Найти(ТекЦикл);
		Если РезультатПоиска = Неопределено Тогда
			ВидимыеЦиклы.Удалить(ЧислоВидимыхЦиклов - Инд);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидимыеЦиклы;
	
КонецФункции

Процедура ЦиклыОбменаОтчетностьПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = (Элемент.ТекущаяКолонка = Элемент.Колонки.Пометка);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВыгрузить(Кнопка)
	
	ВыгрузитьЦиклыОбмена(Истина, Истина);
	
КонецПроцедуры

Процедура ВыгрузитьЦиклыОбмена(ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Выгрузить цикл обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выгрузить выбранные " + ВидимыеЦиклы.Количество() + " циклов обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если КонтекстЭДО.ВыгрузитьЦиклыОбмена(ВидимыеЦиклы, ВыгружатьКонтейнеры, ВыгружатьСодержимое) Тогда
			Предупреждение("Выгрузка завершена.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВыгрузитьКонтейнеры(Кнопка)
	
	ВыгрузитьЦиклыОбмена(Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьВыгрузитьСодержимое(Кнопка)
	
	ВыгрузитьЦиклыОбмена(Ложь, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетностьПоказатьОтчетОСостоянии(Кнопка)
	
	ВидимыеЦиклы = ВыбранныеЦиклыОбменаСУчетомОтборов(ЦиклыОбменаОтчетность);
	Если ВидимыеЦиклы.Количество() = 0 И ЗначениеЗаполнено(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущаяСтрока) Тогда
		ВидимыеЦиклы.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность.ТекущиеДанные.Ссылка);
	КонецЕсли;
	Если ВидимыеЦиклы.Количество() = 0 Тогда
		Предупреждение("Не выбраны циклы обмена!");
	Иначе
		Если ВидимыеЦиклы.Количество() = 1 Тогда
			ТекстВопроса = "Показать отчет о состоянии цикла обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(ВидимыеЦиклы[0]) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ВидимыеЦиклы.Количество() + " циклов обмена." + Символы.ПС + "Показать отчеты о состояниях выбранных циклов обмена?";
		КонецЕсли;
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		КонтекстЭДО.ПоказатьОтчетыОСостоянииЦикловОбмена(ВидимыеЦиклы);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельРежимОтображения(Кнопка)
	
	ТекПометка = Кнопка.Пометка;
	Для Каждого Кн Из ЭлементыФормы.ОсновнаяКоманднаяПанель.Кнопки.РежимОтображения.Кнопки Цикл
		Если Кн = Кнопка Тогда
			Кн.Пометка = НЕ ТекПометка;
		Иначе
			Кн.Пометка = ТекПометка;
		КонецЕсли;
	КонецЦикла;
	
	УправлениеЭУ();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельИсходящиеДокументыНовый(Кнопка)
	
	Документы.НеформализованныйДокументНалогоплательщика.СоздатьДокумент().ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросыНовый(Кнопка)
	
	ДокЗапрос = Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.СоздатьДокумент();
	ДокЗапрос.ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
	ДокЗапрос.ПолучитьФорму().Открыть();
	
КонецПроцедуры

СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора = Новый Соответствие;
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По исходному отчету", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоОтчету);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По эл. представлению", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоЭлектронномуПредставлению);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По виду отчета", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоВидуОтчета);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По периоду отчета", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоПериодуОтчета);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбора.Вставить("По виду документа", ЭлементыФормы.ПанельЦиклыОбменаЗначениеОтбора.Страницы.ПоВидуДокумента);

СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбораЗапросы = Новый Соответствие;
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбораЗапросы.Вставить("По запросу", ЭлементыФормы.ПанельЦиклыОбменаЗапросыЗначениеОтбора.Страницы.ПоЗапросу);
СоответствиеВидаОтбораЦикловОбменаСтраницеПанелиОтбораЗапросы.Вставить("По виду услуги", ЭлементыФормы.ПанельЦиклыОбменаЗапросыЗначениеОтбора.Страницы.ПоВидуУслуги);

ЗеленыйШар					= БиблиотекаКартинок.ЗеленыйШар;
СерыйШар					= БиблиотекаКартинок.СерыйШар;
ЗолотойШар					= БиблиотекаКартинок.ЗолотойШар;
ЗолотойШарЗашифрованное		= БиблиотекаКартинок.ЗолотойШарСЗамком;
ЗеленыйШарНерасшифрованное	= БиблиотекаКартинок.ЗеленыйШарСЗамком;

МассивНаименованийПравыхГраницПериода = Новый Массив;
МассивНаименованийПравыхГраницПериода.Добавить("января");
МассивНаименованийПравыхГраницПериода.Добавить("февраля");
МассивНаименованийПравыхГраницПериода.Добавить("I-го квартала");
МассивНаименованийПравыхГраницПериода.Добавить("апреля");
МассивНаименованийПравыхГраницПериода.Добавить("мая");
МассивНаименованийПравыхГраницПериода.Добавить("I-го полугодия");
МассивНаименованийПравыхГраницПериода.Добавить("июля");
МассивНаименованийПравыхГраницПериода.Добавить("августа");
МассивНаименованийПравыхГраницПериода.Добавить("III-го квартала");
МассивНаименованийПравыхГраницПериода.Добавить("октября");
МассивНаименованийПравыхГраницПериода.Добавить("ноября");
МассивНаименованийПравыхГраницПериода.Добавить("года");

ИсточникиЦикловОбмена = Новый Массив;
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаВходящиеДокументы);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаИсходящиеДокументы);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаОтчетность);
ИсточникиЦикловОбмена.Добавить(ЦиклыОбменаЗапросы);
Для Каждого Источник Из ИсточникиЦикловОбмена Цикл
	Источник.Колонки.Добавить("Организация");
	Источник.Колонки.Добавить("ДатаНачалаПериода");
	Источник.Колонки.Добавить("ДатаОкончанияПериода");
	Источник.Колонки.Добавить("ДатаЗакрытия");
	Источник.Колонки.Добавить("ВидДокумента");
	Источник.Колонки.Добавить("ВидОтчета");
	Источник.Колонки.Добавить("Вид");
	Источник.Колонки.Добавить("Тип");
	Источник.Колонки.Добавить("Предмет");
	Источник.Колонки.Добавить("ВидУслуги");
	Источник.Колонки.Добавить("ФорматОтвета");
	Источник.Колонки.Добавить("УчетнаяЗапись");
	Источник.Колонки.Добавить("ФорматДокументооборота");
КонецЦикла;

ТабличныеПоляЦиклыОбмена = Новый Массив;
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаОтчетность);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаВходящиеДокументы);
ТабличныеПоляЦиклыОбмена.Добавить(ЭлементыФормы.ЦиклыОбменаЗапросы);

мДатаНачалаИнтервалаОтбора		= '00010101000000';
мДатаОкончанияИнтервалаОтбора	= '00010101000000';

СоответствиеСтраницыПанелиИсточникуЦикловОбмена = Новый Соответствие;
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы, ЦиклыОбменаВходящиеДокументы);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы, ЦиклыОбменаИсходящиеДокументы);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Отчетность, ЦиклыОбменаОтчетность);
СоответствиеСтраницыПанелиИсточникуЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Запросы, ЦиклыОбменаЗапросы);

СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена = Новый Соответствие;
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ВходящиеДокументы, ЭлементыФормы.ЦиклыОбменаВходящиеДокументы);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.ИсходящиеДокументы, ЭлементыФормы.ЦиклыОбменаИсходящиеДокументы);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Отчетность, ЭлементыФормы.ЦиклыОбменаОтчетность);
СоответствиеСтраницыПанелиТабличномуПолюЦикловОбмена.Вставить(ЭлементыФормы.ПанельФНС.Страницы.Запросы, ЭлементыФормы.ЦиклыОбменаЗапросы);

КрасныйЦвет = Новый Цвет(255, 0, 0);
СерыйЦвет = Новый Цвет(192, 192, 192);

ВыбранныеЦиклыОбмена = Новый Массив;
