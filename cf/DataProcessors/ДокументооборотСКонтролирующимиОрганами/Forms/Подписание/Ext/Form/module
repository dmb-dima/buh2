Перем ВыбранныеЦиклыОбмена;
Перем УжеПодписанныеЦиклыОбмена;
Перем СвойстваСертификата;
Перем Сертификат;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Для Каждого НастройкаПорядка Из ЭлементыФормы.ЦиклыОбмена.НастройкаПорядка Цикл
		НастройкаПорядка.Доступность = Истина;
	КонецЦикла;
	ЭлементыФормы.ЦиклыОбмена.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ЦиклыОбмена.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ЦиклыОбмена.Отбор.Ссылка.Использование = Истина;
	
	ЭлементыФормы.ЦиклыОбмена.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЦиклыОбмена.Отбор.ПометкаУдаления.Установить(Ложь);
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура УстановитьОтборы(УстановитьФлажки = Истина)
	
	Если ПустаяСтрока(Сертификат) Тогда
		ЦиклыОбмена.Отбор.Ссылка.Значение.Очистить();
		Возврат;
	КонецЕсли;
	
	ЦиклыОбмена.Отбор.Ссылка.Значение.Очистить();
	ЦиклыОбмена.Отбор.Ссылка.Использование = Ложь;
	
	// выбираем циклы обмена, которые будут отображаться в основном гриде
	//
	// для 141 - выбираем непомеченные на удаление, не закрытые циклы обмена,
	// со статусом первичного сообщения - Исходящее,
	// по которым нет вложений с именем, начинающимся с отпечатка выбранного сертификата
	//
	// для 534 - выбираем непомеченные на удаление, не закрытые циклы обмена,
	// со статусом первичного сообщения - Исходящее,
	// по которым нет ЭЦП, сформированных при помощи выбранного сертификата
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	Сообщение.ЦиклОбмена КАК ЦиклОбмена
	                      |ИЗ
	                      |	Документ.ТранспортноеСообщение КАК Сообщение
	                      |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТранспортныеКонтейнеры КАК ТранспортныеКонтейнеры
	                      |	ПО (ТранспортныеКонтейнеры.ТранспортноеСообщение = Сообщение.Ссылка)
	                      |ГДЕ
	                      |	Сообщение.ПометкаУдаления = &ПометкаУдаления
	                      |	И Сообщение.Тип В(&ДопустимыеТипыСообщений)
	                      |	И Сообщение.Отправитель = &Отправитель
	                      |	И Сообщение.Статус = &Статус
	                      |	И Сообщение.ЦиклОбмена.ДатаЗакрытия = &ДатаЗакрытия
	                      |	И Сообщение.ЦиклОбмена.ПометкаУдаления = &ПометкаУдаления
	                      |	И Сообщение.ЦиклОбмена.Тип В(&ДопустимыеТипыЦикловОбмена)
	                      |	И ЕСТЬNULL(ТранспортныеКонтейнеры.ТранспортноеСообщение, ИСТИНА) = ИСТИНА
	                      |	И ВЫБОР
	                      |			КОГДА Сообщение.ЦиклОбмена.ФорматДокументооборота = &Формат534
	                      |				ТОГДА (НЕ Сообщение.Ссылка В
	                      |							(ВЫБРАТЬ
	                      |								СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение
	                      |							ИЗ
	                      |								РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |							ГДЕ
	                      |								СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.Тип В (&ТипыПервичных534)
	                      |								И СодержимоеТранспортныхКонтейнеров.ЭЦПСертификат = &ОтпечатокСертфииката))
	                      |			ИНАЧЕ (НЕ Сообщение.ЦиклОбмена В
	                      |						(ВЫБРАТЬ
	                      |							СодержимоеТранспортныхКонтейнеров.ТранспортноеСообщение.ЦиклОбмена КАК ТранспортноеСообщениеЦиклОбмена
	                      |						ИЗ
	                      |							РегистрСведений.СодержимоеТранспортныхКонтейнеров КАК СодержимоеТранспортныхКонтейнеров
	                      |						ГДЕ
	                      |							(СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ИмяФайла1
	                      |								ИЛИ СодержимоеТранспортныхКонтейнеров.ИмяФайла ПОДОБНО &ИмяФайла2)
	                      |							И СодержимоеТранспортныхКонтейнеров.Тип = &ТипСодержимого))
	                      |		КОНЕЦ");
	Запрос.УстановитьПараметр("ПометкаУдаления", Ложь);
	
	ДопустимыеТипыСообщений = Новый Массив;
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность);
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика);
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросИОН);
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
	ДопустимыеТипыСообщений.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
	Запрос.УстановитьПараметр("ДопустимыеТипыСообщений", ДопустимыеТипыСообщений);
	
	Запрос.УстановитьПараметр("Отправитель", СвойстваСертификата.Организация);
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПисем.Исходящее);
	Запрос.УстановитьПараметр("ДатаЗакрытия", КонтекстЭДО.ПолучитьПустуюДатуЗавершенияЦиклаОбмена());
	Запрос.УстановитьПараметр("ИмяФайла1", нрег(СокрЛП(Сертификат)) + "%");
	Запрос.УстановитьПараметр("ИмяФайла2", ВРЕГ(СокрЛП(Сертификат)) + "%");
	Запрос.УстановитьПараметр("ТипСодержимого", Перечисления.ТипыСодержимогоТранспортногоКонтейнера.Сертификат);
	
	ДопустимыеТипыЦикловОбмена = Новый Массив;
	ДопустимыеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	ДопустимыеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.Форма2НДФЛ);
	ДопустимыеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	ДопустимыеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	ДопустимыеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ОбращениеНП);
	ДопустимыеТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ИОН);
	Запрос.УстановитьПараметр("ДопустимыеТипыЦикловОбмена", ДопустимыеТипыЦикловОбмена);
	
	ТипыПервичных534 = Новый Массив;
	ТипыПервичных534.Добавить(Перечисления.ТипыТранспортныхСообщений.ДекларацияНП);
	ТипыПервичных534.Добавить(Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП);
	ТипыПервичных534.Добавить(Перечисления.ТипыТранспортныхСообщений.ОбращениеНП);
	ТипыПервичных534.Добавить(Перечисления.ТипыТранспортныхСообщений.ЗапросНП);
	Запрос.УстановитьПараметр("ТипыПервичных534", ТипыПервичных534);
	
	Запрос.УстановитьПараметр("ОтпечатокСертфииката", нрег(СокрЛП(Сертификат)));
	
	Запрос.УстановитьПараметр("Формат534", Перечисления.ФорматыДокументооборотаСФНС.Приказ534);
	
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЦиклОбмена");
	ЦиклыОбмена.Отбор.Ссылка.Значение.ЗагрузитьЗначения(МассивСсылок);
	ЦиклыОбмена.Отбор.Ссылка.Использование = Истина;
	Если УстановитьФлажки Тогда
		ВыбранныеЦиклыОбмена.ЗагрузитьЗначения(МассивСсылок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ЦиклОбмена = ОформлениеСтроки.ДанныеСтроки.Ссылка;
		Если УжеПодписанныеЦиклыОбмена.НайтиПоЗначению(ЦиклОбмена) <> Неопределено Тогда
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Ложь;
		Иначе
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Пометка.Флажок = (ВыбранныеЦиклыОбмена.НайтиПоЗначению(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено);
			ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьВозможностьПодписиСертификатом(ВыбранныйСертификат)
	
	СвойстваОтпечатка = КонтекстЭДО.ПолучитьСвойстваСертификатаПоОтпечатку(ВыбранныйСертификат);
	Если СвойстваОтпечатка = Неопределено Тогда
		Предупреждение("Выбранный сертификат не зарегистрирован в системном хранилище!");
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДата();
	
	Если СвойстваОтпечатка.ДействителенС >= ТекущаяДата Тогда
		Предупреждение("Период действия сертификата еще не начался!");
		Возврат Ложь;
	КонецЕсли;
	
	Если СвойстваОтпечатка.ДействителенПо <= ТекущаяДата Тогда
		Предупреждение("Период действия сертификата истек!");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ СвойстваОтпечатка.ВозможностьПодписи Тогда
		Предупреждение("Сертификат не может быть использован для подписания!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьВсеФлажки()
	
	ВидимыеЦиклыОбмена = ВидимыйНаборЦикловОбмена();
	Для Каждого ЦиклОбмена Из ВидимыеЦиклыОбмена Цикл
		Если ВыбранныеЦиклыОбмена.НайтиПоЗначению(ЦиклОбмена.Значение) = Неопределено Тогда
			ВыбранныеЦиклыОбмена.Добавить(ЦиклОбмена.Значение);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ЦиклыОбмена.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаУстановитьФлажки(Кнопка)
	
	УстановитьВсеФлажки();
	
КонецПроцедуры

Функция ВидимыйНаборЦикловОбмена()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦиклыОбмена.Ссылка
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена");
						  
	НомерУсловия = 1;
	Для Каждого ЭлементОтбора Из ЦиклыОбмена.Отбор Цикл
		Если ЭлементОтбора.Использование Тогда 
			Если НомерУсловия = 1 Тогда
				Префикс = Символы.ПС + "ГДЕ" + Символы.ПС + Символы.Таб;
			Иначе
				Префикс = Символы.ПС + Символы.Таб + "И ";
			КонецЕсли;
			НомерУсловия = НомерУсловия + 1;
			Запрос.Текст = Запрос.Текст + Префикс + "ЦиклыОбмена." + ЭлементОтбора.Имя;
			ИмяПараметра = "парам" + ЭлементОтбора.Имя;
			Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
				Запрос.Текст = Запрос.Текст + " = &" + ИмяПараметра;
			Иначе
				Запрос.Текст = Запрос.Текст + " В (&" + ИмяПараметра + ")";
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяПараметра, ЭлементОтбора.Значение);
		КонецЕсли; 
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
						  |УПОРЯДОЧИТЬ ПО";
	
	Для Каждого НастройкаПорядка Из ЦиклыОбмена.Порядок Цикл
		Запрос.Текст = Запрос.Текст + "
						  |	ЦиклыОбмена." + НастройкаПорядка.Данные + " " + ?(НастройкаПорядка.Направление = НаправлениеСортировки.Возр, "ВОЗР", "УБЫВ") + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
						  | ЦиклыОбмена.Ссылка";
	
	СписокВидимыхОтчетов = Новый СписокЗначений;
	СписокВидимыхОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокВидимыхОтчетов;
	
КонецФункции

Процедура СнятьВсеФлажки()
	
	ВидимыеЦиклыОбмена = ВидимыйНаборЦикловОбмена();
	КоличествоВыбранныхЦикловОбмена = ВыбранныеЦиклыОбмена.Количество();
	Для Инд = 1 По КоличествоВыбранныхЦикловОбмена Цикл
		ЦиклОбмена = ВыбранныеЦиклыОбмена.Получить(КоличествоВыбранныхЦикловОбмена - Инд).Значение;
		Если ВидимыеЦиклыОбмена.НайтиПоЗначению(ЦиклОбмена) <> Неопределено Тогда
			ВыбранныеЦиклыОбмена.Удалить(КоличествоВыбранныхЦикловОбмена - Инд);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ЦиклыОбмена.ОбновитьСтроки();

КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаСнятьФлажки(Кнопка)
	
	СнятьВсеФлажки();
	
КонецПроцедуры

Процедура ЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЦиклыОбменаПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСсылка = ЭлементыФормы.ЦиклыОбмена.ТекущиеДанные.Ссылка;
	ЦиклОбменаВСпискеВыбранных = ВыбранныеЦиклыОбмена.НайтиПоЗначению(ТекСсылка);
	Если ЦиклОбменаВСпискеВыбранных <> Неопределено Тогда
		ВыбранныеЦиклыОбмена.Удалить(ЦиклОбменаВСпискеВыбранных);
	Иначе
		ВыбранныеЦиклыОбмена.Добавить(ТекСсылка);
	КонецЕсли;
	
КонецПроцедуры

Функция АктуальныеЦиклыОбмена()
	
	АктуальныеЦиклыОбмена = Новый Массив;
	ВидимыеЦиклыОбмена = ВидимыйНаборЦикловОбмена();
	Для Инд = 1 По ВидимыеЦиклыОбмена.Количество() Цикл
		ТекЦиклОбмена = ВидимыеЦиклыОбмена[Инд - 1].Значение;
		Если ВыбранныеЦиклыОбмена.НайтиПоЗначению(ТекЦиклОбмена) <> Неопределено Тогда
			АктуальныеЦиклыОбмена.Добавить(ТекЦиклОбмена);
		КонецЕсли;
	КонецЦикла;
	Возврат АктуальныеЦиклыОбмена;
	
КонецФункции

Функция ТипСообщенияДляПодписанияПоТипуЦиклаОбмена(ЦиклОбмена)
	
	ТипЦиклаОбмена = ЦиклОбмена.Тип;
	Если ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность Тогда
		ФорматДокументооборотаЦиклаОбмена = ЦиклОбмена.ФорматДокументооборота;
		Если ФорматДокументооборотаЦиклаОбмена = Перечисления.ФорматыДокументооборотаСФНС.Приказ534 Тогда
			Возврат Перечисления.ТипыТранспортныхСообщений.ДекларацияНП;
		Иначе
			Возврат Перечисления.ТипыТранспортныхСообщений.ПервичноеСообщениеСодержащееОтчетность;
		КонецЕсли;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.Форма2НДФЛ Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.Форма2НДФЛНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.НеформализованныйДокументНалогоплательщика;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросИОН;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ОбращениеНП Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ОбращениеНП;
	ИначеЕсли ТипЦиклаОбмена = Перечисления.ТипыЦикловОбмена.ИОН Тогда
		Возврат Перечисления.ТипыТранспортныхСообщений.ЗапросНП;
	КонецЕсли;
	
КонецФункции

Процедура ОсновныеДействияФормыОсновныеДействияФормыПодписать(Кнопка)
	
	УжеПодписанныеЦиклыОбмена.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Сертификат) Тогда
		Предупреждение("Не выбран сертификат.");
		ТекущийЭлемент = ЭлементыФормы.Сертификат;
		Возврат;
	КонецЕсли;
	
	АктуальныеЦиклыОбмена = АктуальныеЦиклыОбмена();
	Для Инд = 1 По АктуальныеЦиклыОбмена.Количество() Цикл
		
		ОбработкаПрерыванияПользователя();
		
		АктуальныйЦиклОбмена = АктуальныеЦиклыОбмена[Инд - 1];
		ТипСообщенияДляПодписания = ТипСообщенияДляПодписанияПоТипуЦиклаОбмена(АктуальныйЦиклОбмена);
		Если НЕ ЗначениеЗаполнено(ТипСообщенияДляПодписания) Тогда
			Сообщить("Не удалось определить тип сообщения для подписания в цикле обмена """ + АктуальныйЦиклОбмена + """!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ПервичноеСообщение = КонтекстЭДО.ПолучитьСообщениеЦиклаОбмена(АктуальныйЦиклОбмена, ТипСообщенияДляПодписания);
		Если НЕ ЗначениеЗаполнено(ПервичноеСообщение) Тогда
			Сообщить("Не удалось определить первичное сообщение для подписания, связанное с циклом обмена """ + АктуальныйЦиклОбмена + """!", СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		ЭлементыФормы.ЦиклыОбмена.ТекущаяСтрока = АктуальныйЦиклОбмена;
		РезультатПодписания = КонтекстЭДО.ПоставитьПодписьОтветственногоЛица(ПервичноеСообщение, СвойстваСертификата);
		Если РезультатПодписания Тогда
			ЦиклОбменаВОтборе = ЦиклыОбмена.Отбор.Ссылка.Значение.НайтиПоЗначению(АктуальныйЦиклОбмена);
			Если ЦиклОбменаВОтборе <> Неопределено Тогда
				ЦиклыОбмена.Отбор.Ссылка.Значение.Удалить(ЦиклОбменаВОтборе);
			КонецЕсли;
			УжеПодписанныеЦиклыОбмена.Добавить(АктуальныйЦиклОбмена);
			//ЭлементыФормы.ЦиклыОбмена.ОбновитьСтроки(АктуальныйЦиклОбмена);
			Сообщить("Сообщение по циклу обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(АктуальныйЦиклОбмена) + """ успешно подписано.", СтатусСообщения.Информация);
		Иначе
			Сообщить("Не удалось подписать сообщение по циклу обмена """ + КонтекстЭДО.ПредставлениеЦиклаОбмена(АктуальныйЦиклОбмена) + """.", СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЦикла;
	
	УжеПодписанныеЦиклыОбмена.Очистить();
	
	УстановитьОтборы(Ложь);

КонецПроцедуры

Процедура СертификатНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = КонтекстЭДО.ВыбратьСертификатОтветственногоЛицаДляПодписания(СокрЛП(Сертификат));
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда
		Если ПроверитьВозможностьПодписиСертификатом(РезультатВыбора.Отпечаток) Тогда
			Сертификат = СокрЛП(РезультатВыбора.Отпечаток);
			СвойстваСертификата = РезультатВыбора;
			КонтекстЭДО.ОтобразитьСертификатВПолеВвода(Элемент, Сертификат);
			УжеПодписанныеЦиклыОбмена.Очистить();
			УстановитьОтборы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ПустаяСтрока(Сертификат) Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ПоказатьСертификат(СокрЛП(Сертификат), "MY");
	
КонецПроцедуры

Процедура СертификатОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Сертификат = "";
	КонтекстЭДО.ОтобразитьСертификатВПолеВвода(Элемент, Сертификат);
	УжеПодписанныеЦиклыОбмена.Очистить();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаОбновить(Кнопка)
	
	УстановитьОтборы(Ложь);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

ЦиклыОбмена.Колонки.Добавить("Организация");
ЦиклыОбмена.Колонки.Добавить("ДатаНачалаПериода");
ЦиклыОбмена.Колонки.Добавить("ДатаОкончанияПериода");
ЦиклыОбмена.Колонки.Добавить("ДатаЗакрытия");
ЦиклыОбмена.Колонки.Добавить("ВидДокумента");
ЦиклыОбмена.Колонки.Добавить("Тип");
ЦиклыОбмена.Колонки.Добавить("Предмет");
ЦиклыОбмена.Колонки.Добавить("ВидУслуги");
ЦиклыОбмена.Колонки.Добавить("ФорматОтвета");
ЦиклыОбмена.Колонки.Добавить("УчетнаяЗапись");
ЦиклыОбмена.Колонки.Добавить("ФорматДокументооборота");

ВыбранныеЦиклыОбмена = Новый СписокЗначений;

УжеПодписанныеЦиклыОбмена = Новый СписокЗначений;
