Перем Крипт;
Перем ПрограммноеЗакрытие;
Перем ТаблицаИсправлений;
Перем СтраницыКоторыеНеобходимоНеПоказывать;
Перем ПараметрыФайлыНастроек;

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПрограммноеЗакрытие Тогда
		Ответ = Вопрос("Прервать работу мастера?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//Крипт = Неопределено;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	Если НЕ ПереходВпередВозможен() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПрименитьДанные() Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьСледующуюСтраницу();
	Если Открыта() Тогда
		УправлениеКнопкамиНавигации();
		УправлениеЭУ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	ПоказатьПредыдущуюСтраницу();
	УправлениеКнопкамиНавигации();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ПоказатьСледующуюСтраницу()
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(ТекущаяСтраница) <> ЭлементыФормы.ОсновнаяПанель.Страницы.Количество() - 1 Тогда
		СледСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(ТекущаяСтраница) + 1);
		Пока СтраницыКоторыеНеобходимоНеПоказывать.Найти(СледСтраница) <> Неопределено Цикл
			СледСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(СледСтраница) + 1);
		КонецЦикла;
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СледСтраница;
		
		//ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница) + 1);
	Иначе
		Завершить();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПредыдущуюСтраницу()
	
	СледСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница) - 1);
	Пока СтраницыКоторыеНеобходимоНеПоказывать.Найти(СледСтраница) <> Неопределено Цикл
		СледСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(СледСтраница) - 1);
	КонецЦикла;
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = СледСтраница;
	
	//ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Получить(ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница) - 1);
	
КонецПроцедуры

Процедура Завершить()
	
	ПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

Функция ПереходВпередВозможен()
	
	ТекСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница1 Тогда
		Возврат ПроверитьДанныеСтраницы1();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница2 Тогда
		Возврат ПроверитьДанныеСтраницы2();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница3 Тогда
		Возврат ПроверитьДанныеСтраницы3();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница4 Тогда
		Возврат ПроверитьДанныеСтраницы4();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница5 Тогда
		Возврат ПроверитьДанныеСтраницы5();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница6 Тогда
		Возврат ПроверитьДанныеСтраницы6();
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция ПрименитьДанные()
	
	ТекСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница1 Тогда
		Возврат ПрименитьДанныеСтраницы1();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница2 Тогда
		Возврат ПрименитьДанныеСтраницы2();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница3 Тогда
		Возврат ПрименитьДанныеСтраницы3();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница4 Тогда
		Возврат ПрименитьДанныеСтраницы4();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница5 Тогда
		Возврат ПрименитьДанныеСтраницы5();
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница6 Тогда
		Возврат ПрименитьДанныеСтраницы6();
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПрименитьДанныеСтраницы1()
	
	СтраницыКоторыеНеобходимоНеПоказывать.Добавить(ЭлементыФормы.ОсновнаяПанель.Страницы.Страница3);
	Возврат Истина;
	
КонецФункции

Функция ПрименитьДанныеСтраницы2()
	
	ФормаПрогресса = Неопределено;
	ОтобразитьИнформациюВФормеПрогресса(ФормаПрогресса, Ложь, "Получение данных с сервера ""Такском""...");
	
	// определяем объект с ИНН и КПП для получения файла настроек с сервера
	Если ПараметрыОрганизацииВручную Тогда
		параметрОрганизация = Новый Структура("ИНН, КПП", СокрЛП(ИНН), СокрЛП(КПП));
	Иначе
		параметрОрганизация = Организация;
	КонецЕсли;
	
	// получаем файл настроек с сервера или из кэша
	ПараметрыФайлыНастроек = Неопределено;
	ПараметрыФайлыНастроек = ПолучитьФайлНастроекУчетнойЗаписиССервераРОКИСУчетомКэша(Неопределено, параметрОрганизация, Истина, Истина, Ложь);
	Если НЕ ЗначениеЗаполнено(ПараметрыФайлыНастроек) Тогда // если Неопределено, то файл недоступен
		ЗакрытьФормуПрогресса(ФормаПрогресса);
		Предупреждение("При попытке получения и анализа параметров учетной записи произошла ошибка!");
		Возврат Ложь;
	КонецЕсли;
	ФайлНастроек = ПараметрыФайлыНастроек.Файл;
	ДатаОбновленияФайлаНастроекНаСервере = ПараметрыФайлыНастроек.Дата;
	ФайлНастроекРасшифрован = ПараметрыФайлыНастроек.Расшифрован;
	ИмяРесурсаСНастройками = ПараметрыФайлыНастроек.ИмяРесурса;
	
	// если файл настроек зашифрован, то расшифруем
	Если НЕ ФайлНастроекРасшифрован Тогда
		
		//////////////////////////////////////////////////////////////////////////////
		// решаем, следует ли показывать страницу с сертификатом абонента
		
		ОтобразитьИнформациюВФормеПрогресса(ФормаПрогресса, Ложь, "Расшифровка контейнера с настройками...");
		
		// расшифровываем файл настроек
		Сообщения = СоздатьТаблицуСообщений();
		ИмяРасшифрованногоФайлаСНастройками = РасшифроватьТранспортныйКонтейнерРОКИ(ФайлНастроек, Сообщения);
		Если НЕ ЗначениеЗаполнено(ИмяРасшифрованногоФайлаСНастройками) Тогда
			ЗакрытьФормуПрогресса(ФормаПрогресса);
			Предупреждение("Ошибка расшифровки контейнера с настройками!");
			Возврат Ложь;
		КонецЕсли;
		ПараметрыФайлыНастроек.Вставить("Файл", ИмяРасшифрованногоФайлаСНастройками);
		ПараметрыФайлыНастроек.Вставить("Расшифрован", Истина);
		
	// если файл настроек не зашифрован...
	Иначе
		ИмяРасшифрованногоФайлаСНастройками = ФайлНастроек;
	КонецЕсли;
	
	// формируем таблицу исправлений на основе расшифрованного файла настроек
	ОтобразитьИнформациюВФормеПрогресса(ФормаПрогресса, Ложь, "Анализ информации о настройках учетной записи...");
	ТаблицаИсправлений = СформироватьТаблицуИсправленийНаОсновеФайлаНастроек(, ИмяРасшифрованногоФайлаСНастройками, Истина);
	Если ТаблицаИсправлений = Неопределено ИЛИ ТаблицаИсправлений.Количество() = 0 Тогда
		ЗакрытьФормуПрогресса(ФормаПрогресса);
		Предупреждение("При попытке получения и анализа параметров учетной записи произошла ошибка!");
		Возврат Ложь;
	КонецЕсли;
	
	УправлениеСтраницамиССертификатами();
	
	СопоставитьУчетнуюЗаписьОрганизации = Истина;
	ОткрытьФормуУчетнойЗаписи = Истина;
	
	ЗакрытьФормуПрогресса(ФормаПрогресса);
	Возврат Истина;
	
КонецФункции

Функция ПрименитьДанныеСтраницы3()
	
	// регистрируем сертификат ответственного за шифрование
	РезультатРегистрацииСертификата = ЗарегистрироватьСертификатСПривязкойКЗакрытомуКлючу(СертификатШифрованиеФайл, СертификатШифрованиеКонтейнер);
	Если НЕ ЗначениеЗаполнено(РезультатРегистрацииСертификата) Тогда
		Предупреждение("Не удалось зарегистрировать в системе сертификат лица, ответственного за шифрование!");
		Возврат Ложь;
	КонецЕсли;
	
	// формируем объект со свойствами организации
	Если ПараметрыОрганизацииВручную Тогда
		параметрОрганизация = Новый Структура("ИНН, КПП", СокрЛП(ИНН), СокрЛП(КПП));
	Иначе
		параметрОрганизация = Организация;
	КонецЕсли;
	
	// получаем таблицу исправлений
	ТаблицаИсправлений = КонтекстЭДО.ПолучитьНастройкиУчетнойЗаписиССервера(Неопределено,
																			параметрОрганизация,
																			Истина,
																			Истина,
																			Ложь,
																			Ложь);
	Если ТаблицаИсправлений = Неопределено ИЛИ ТаблицаИсправлений.Количество() = 0 Тогда
		Предупреждение("При попытке получения и анализа параметров учетной записи произошла ошибка!");
		Возврат Ложь;
	КонецЕсли;
	
	// прорисовываем следующие страницы
	УправлениеСтраницамиССертификатами();
	
	СопоставитьУчетнуюЗаписьОрганизации = Истина;
	ОткрытьФормуУчетнойЗаписи = Истина;
	Возврат Истина;
	
КонецФункции

Функция ПрименитьДанныеСтраницы4()
	
	КомандаИзменитьСертификатРуководителя = ТаблицаИсправлений.Найти("ИзменитьСертификатРуководителя", "Настройка");
	Если КомандаИзменитьСертификатРуководителя <> Неопределено Тогда
		Возврат ЗарегистрироватьСертификатСПривязкойКЗакрытомуКлючу(КомандаИзменитьСертификатРуководителя.НовоеЗначение, СертификатРуководителяКонтейнер);
	Иначе
		Предупреждение("Не удалось определить свойства нового сертификата руководителя!");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПрименитьДанныеСтраницы5()
	
	КомандаИзменитьСертификатБухгалтера = ТаблицаИсправлений.Найти("ИзменитьСертификатГлавногоБухгалтера", "Настройка");
	Если КомандаИзменитьСертификатБухгалтера <> Неопределено Тогда
		Возврат ЗарегистрироватьСертификатСПривязкойКЗакрытомуКлючу(КомандаИзменитьСертификатБухгалтера.НовоеЗначение, СертификатБухгалтераКонтейнер);
	Иначе
		Предупреждение("Не удалось определить свойства нового сертификата главного бухгалтера!");
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПрименитьДанныеСтраницы6()
	
	НоваяУчетнаяЗапись = Справочники.УчетныеЗаписиДокументооборота.СоздатьЭлемент();
	//НоваяУчетнаяЗапись.ПредназначенаДляДокументооборотаСФНС = Истина;
	НоваяУчетнаяЗапись.ОбменНапрямую = Ложь;
	НоваяУчетнаяЗапись.РежимАвтонастройки = Перечисления.РежимыАвтонастройкиУчетнойЗаписиДокументооборота.ВключенаВТихомРежиме;
	НоваяУчетнаяЗапись.ИспользоватьСервисОнлайнПроверкиОтчетов = Истина;
	НоваяУчетнаяЗапись.ЗаписатьПользователяПоУмолчанию = Истина;
	НоваяУчетнаяЗапись.НеФормироватьПодтвержденияАвтоматически = Ложь;
	НоваяУчетнаяЗапись.ИдентификаторСистемыОтправителяПФР = "taxcom";
	
	РезультатПрименения = ПрименитьИзмененныеНастройки(НоваяУчетнаяЗапись, ТаблицаИсправлений, Ложь, Истина);
	Если НЕ РезультатПрименения Тогда
		Предупреждение("Во время сохранения информации в базу данных произошли ошибки!");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПараметрыОрганизацииВручную И СопоставитьУчетнуюЗаписьОрганизации Тогда
		
		// сначала пробуем подставить учетную запись в открытую форму организации
		СтруктураДляОповещения = Новый Структура("Организация, УчетнаяЗапись", Организация, НоваяУчетнаяЗапись.Ссылка);
		Оповестить("Привязка учетной записи к организации", СтруктураДляОповещения);
		
		// если не получилось подставить в форму, то фиксируем привязку в БД
		Если НЕ СтруктураДляОповещения.Свойство("ОповещениеОтработано") ИЛИ СтруктураДляОповещения.ОповещениеОтработано = Ложь Тогда
			ОрганизацияОбъект = Организация.ПолучитьОбъект();
			ОрганизацияОбъект.УчетнаяЗаписьОбмена = НоваяУчетнаяЗапись.Ссылка;
			ОрганизацияОбъект.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате;
			Попытка
				ОрганизацияОбъект.Записать();
			Исключение
				Предупреждение("Не удалось сопоставить вновь созданную учетной запись организации:
								|
								|" + ИнформацияОбОшибке().Описание);
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОткрытьФормуУчетнойЗаписи Тогда
		НоваяУчетнаяЗапись.ПолучитьФорму().Открыть();
	КонецЕсли;
	
	// сохраняем полученный с сервера и расшифрованный файл настроек в кэше
	// с привязкой к вновь созданной учетной записи
	СохранитьВКэшеФайлНастроек(НоваяУчетнаяЗапись.Ссылка, ПараметрыФайлыНастроек.ИмяРесурса, ПараметрыФайлыНастроек.Файл, Истина, ПараметрыФайлыНастроек.Дата);
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ПроверитьДанныеСтраницы1()
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьДанныеСтраницы2()
	
	Если ПараметрыОрганизацииВручную Тогда
		СтрИНН = СокрЛП(ИНН);
		СтрКПП = СокрЛП(КПП);
		ДлинаИНН = СтрДлина(СтрИНН);
		ДлинаКПП = СтрДлина(СтрКПП);
		Если ДлинаИНН = 10 Тогда
			Если ДлинаКПП = 0 Тогда
				Предупреждение("Укажите КПП.");
				Возврат Ложь;
			ИначеЕсли ДлинаКПП <> 9 Тогда
				Предупреждение("Укажите корректный КПП.");
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли ДлинаИНН = 0 Тогда
			Предупреждение("Укажите ИНН" + ?(ДлинаКПП = 0, "\КПП", "") + ".");
			Возврат Ложь;
		ИначеЕсли ДлинаИНН <> 12
		ИЛИ НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(СтрИНН) Тогда
			Предупреждение("Укажите корректный ИНН.");
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Если Организация.Пустая() Тогда
			Предупреждение("Укажите организацию.");
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьДанныеСтраницы3()
	
	Если НЕ ЗначениеЗаполнено(СертификатШифрованиеФайл) Тогда
		Предупреждение("Укажите размещение файла с сертификатом!");
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(СертификатШифрованиеФайл);
	Если НЕ ОбъектФайл.Существует() ИЛИ НЕ ОбъектФайл.ЭтоФайл() Тогда
		Предупреждение("Задано некорректное имя файла!");
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СертификатШифрованиеКонтейнер) Тогда
		Предупреждение("Выберите ключевой контейнер!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьДанныеСтраницы4()
	
	Если НЕ ЗначениеЗаполнено(СертификатРуководителяКонтейнер) Тогда
		Предупреждение("Выберите ключевой контейнер!");
		Возврат Ложь;
	//ИначеЕсли нрег(СокрЛП(СертификатРуководителяКонтейнер)) = нрег(СокрЛП(СертификатШифрованиеКонтейнер)) Тогда
	//	Предупреждение("Вы выбрали ключевой контейнер, связанный с сертификатом ответственного за шифрование.
	//					|Выберите другой контейнер для продолжения.");
	//	Возврат Ложь;
	//ИначеЕсли нрег(СокрЛП(СертификатРуководителяКонтейнер)) = нрег(СокрЛП(СертификатБухгалтераКонтейнер)) Тогда
	//	Предупреждение("Вы выбрали ключевой контейнер, связанный с сертификатом главного бухгалтера.
	//					|Выберите другой контейнер для продолжения.");
	//	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьДанныеСтраницы5()
	
	Если НЕ ЗначениеЗаполнено(СертификатБухгалтераКонтейнер) Тогда
		Предупреждение("Выберите ключевой контейнер!");
		Возврат Ложь;
	//ИначеЕсли нрег(СокрЛП(СертификатБухгалтераКонтейнер)) = нрег(СокрЛП(СертификатШифрованиеКонтейнер)) Тогда
	//	Предупреждение("Вы выбрали ключевой контейнер, связанный с сертификатом ответственного за шифрование.
	//					|Выберите другой контейнер для продолжения.");
	//	Возврат Ложь;
	//ИначеЕсли нрег(СокрЛП(СертификатРуководителяКонтейнер)) = нрег(СокрЛП(СертификатБухгалтераКонтейнер)) Тогда
	//	Предупреждение("Вы выбрали ключевой контейнер, связанный с сертификатом руководителя.
	//					|Выберите другой контейнер для продолжения.");
	//	Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПроверитьДанныеСтраницы6()
	
	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Процедура УправлениеСтраницамиССертификатами()
	
	// решаем, показывать ли страницу с сертификатом руководителя
	КомандаИзменитьСертификатРуководителя = ТаблицаИсправлений.Найти("ИзменитьСертификатРуководителя", "Настройка");
	Если КомандаИзменитьСертификатРуководителя <> Неопределено Тогда
		СвойстваСертификата = КомандаИзменитьСертификатРуководителя.НовоеЗначение;
		РезультатПоиска = СтраницыКоторыеНеобходимоНеПоказывать.Найти(ЭлементыФормы.ОсновнаяПанель.Страницы.Страница4);
		Если РезультатПоиска <> Неопределено Тогда
			СтраницыКоторыеНеобходимоНеПоказывать.Удалить(РезультатПоиска);
		КонецЕсли;
		СертификатРуководителя = ПредставлениеСертификатаПоСвойствам(СвойстваСертификата);
	Иначе
		СтраницыКоторыеНеобходимоНеПоказывать.Добавить(ЭлементыФормы.ОсновнаяПанель.Страницы.Страница4);
	КонецЕсли;
	
	// решаем, показывать ли страницу с сертификатом главного бухгалтера
	КомандаИзменитьСертификатГлавногоБухгалтера = ТаблицаИсправлений.Найти("ИзменитьСертификатГлавногоБухгалтера", "Настройка");
	Если КомандаИзменитьСертификатГлавногоБухгалтера <> Неопределено Тогда
		СвойстваСертификата = КомандаИзменитьСертификатГлавногоБухгалтера.НовоеЗначение;
		РезультатПоиска = СтраницыКоторыеНеобходимоНеПоказывать.Найти(ЭлементыФормы.ОсновнаяПанель.Страницы.Страница5);
		Если РезультатПоиска <> Неопределено Тогда
			СтраницыКоторыеНеобходимоНеПоказывать.Удалить(РезультатПоиска);
		КонецЕсли;
		СертификатБухгалтера = ПредставлениеСертификатаПоСвойствам(СвойстваСертификата);
	Иначе
		СтраницыКоторыеНеобходимоНеПоказывать.Добавить(ЭлементыФормы.ОсновнаяПанель.Страницы.Страница5);
	КонецЕсли;
	
КонецПроцедуры

Функция ЗарегистрироватьСертификатСПривязкойКЗакрытомуКлючу(Сертификат, СертификатКонтейнер)
	
	Если ТипЗнч(Сертификат) <> Тип("Строка") Тогда
		СертификатФайл = ЗаписатьСертификат64ВФайл(Сертификат.Сертификат);
		Если СертификатФайл = Неопределено Тогда
			Предупреждение("Не удалось выгрузить новый сертификат во временный файл на диск!");
			Возврат Ложь;
		КонецЕсли;
	Иначе
		СертификатФайл = Сертификат;
	КонецЕсли;
	
	// импортируем сертификат
	Попытка
		Крипт.ИмпортироватьСертификат(СертификатФайл, "MY");
	Исключение
		Предупреждение("Не удалось зарегистрировать сертификат в системном хранилище:" + Символы.ПС + Символы.ПС + ИнформацияОбОшибке().Описание + Символы.ПС + Символы.ПС + "Продолжение невозможно.");
		Возврат Ложь;
	КонецПопытки;
	
	СерийныйНомерСертификатаОтветственногоЗаШифрование = Крипт.СерийныйНомер;
	ПоставщикСертификатаОтветственногоЗаШифрование = Крипт.Поставщик;
	Попытка
		Крипт.СвязатьСертификатСКонтейнеромКлючей(СерийныйНомерСертификатаОтветственногоЗаШифрование,
												ПоставщикСертификатаОтветственногоЗаШифрование,
												СертификатКонтейнер);
	Исключение
		Предупреждение("Не удалось привязать сертификат к закрытому ключу:" + Символы.ПС + Символы.ПС + ИнформацияОбОшибке().Описание + Символы.ПС + Символы.ПС + "Продолжение невозможно.");
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура УправлениеКнопкамиНавигации()
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ИндексТекущейСтраницы = ЭлементыФормы.ОсновнаяПанель.Страницы.Индекс(ТекущаяСтраница);
	ВсегоСтраниц = ЭлементыФормы.ОсновнаяПанель.Страницы.Количество();
	Если ИндексТекущейСтраницы = 0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Текст = "<  Назад";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = "Далее  >";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
	ИначеЕсли ИндексТекущейСтраницы = ВсегоСтраниц - 1 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Текст = "<  Назад";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = "  Готово  ";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Текст = "<  Назад";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = "Далее  >";
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	ТекСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница1 Тогда
		
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница2 Тогда
		ЭлементыФормы.ПанельПараметры.Доступность = ПараметрыОрганизацииВручную;
		ЭлементыФормы.Организация.Доступность = НЕ ПараметрыОрганизацииВручную;
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница3 Тогда
		
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница4 Тогда
		
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница5 Тогда
		
	ИначеЕсли ТекСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Страница6 Тогда
		Если ПараметрыОрганизацииВручную Тогда
			ЭлементыФормы.СопоставитьУчетнуюЗаписьОрганизации.Видимость = Ложь;
		Иначе
			ЭлементыФормы.СопоставитьУчетнуюЗаписьОрганизации.Заголовок = "Сопоставить учетную запись организации " + Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатШифрованиеФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Укажите файл, содержащий сертификат";
	ДиалогВыбораФайла.Фильтр = "Файла сертификатов (*.cer)|*.cer|Файла сертификатов (*.crt)|*.crt";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Крипт = СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УправлениеКнопкамиНавигации();
	УправлениеЭУ();
	
КонецПроцедуры

Процедура СертификатШифрованиеКонтейнерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	КонтейнерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СертификатШифрованиеФайлОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(Элемент.Значение);
	Если НЕ ОбъектФайл.Существует() ИЛИ НЕ ОбъектФайл.ЭтоФайл() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложение(Элемент.Значение);
	
КонецПроцедуры

Процедура ПереключательПараметрыОрганизацииВручнуюПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура КонтейнерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДоступныеКонтейнеры = Новый СписокЗначений;
	Попытка
		ИмяКонтейнераКлючей = "";
		Пока Крипт.ПолучитьСледующийКонтейнерКлючей(ИмяКонтейнераКлючей) Цикл
			ДоступныеКонтейнеры.Добавить(ИмяКонтейнераКлючей);
		КонецЦикла;
	Исключение
	КонецПопытки;
	
	РезультатВыбора = ВыбратьИзСписка(ДоступныеКонтейнеры, , ДоступныеКонтейнеры.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = РезультатВыбора.Значение;
	
КонецПроцедуры

Процедура СертификатРуководителяКонтейнерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	КонтейнерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПолеВвода5НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	КонтейнерНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СертификатБухгалтераОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КомандаИзменитьСертификатГлавногоБухгалтера = ТаблицаИсправлений.Найти("ИзменитьСертификатГлавногоБухгалтера", "Настройка");
	Если КомандаИзменитьСертификатГлавногоБухгалтера <> Неопределено Тогда
		СведенияОСертификате = КомандаИзменитьСертификатГлавногоБухгалтера.НовоеЗначение;
		Если СведенияОСертификате.Свойство("Сертификат") Тогда
			ФайлСертификата = ЗаписатьСертификат64ВФайл(СведенияОСертификате.Сертификат);
			ЗапуститьПриложение(ФайлСертификата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатРуководителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	КомандаИзменитьСертификатРуководителя = ТаблицаИсправлений.Найти("ИзменитьСертификатРуководителя", "Настройка");
	Если КомандаИзменитьСертификатРуководителя <> Неопределено Тогда
		СведенияОСертификате = КомандаИзменитьСертификатРуководителя.НовоеЗначение;
		Если СведенияОСертификате.Свойство("Сертификат") Тогда
			ФайлСертификата = ЗаписатьСертификат64ВФайл(СведенияОСертификате.Сертификат);
			ЗапуститьПриложение(ФайлСертификата);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

ПрограммноеЗакрытие = Ложь;
СтраницыКоторыеНеобходимоНеПоказывать = Новый Массив;
