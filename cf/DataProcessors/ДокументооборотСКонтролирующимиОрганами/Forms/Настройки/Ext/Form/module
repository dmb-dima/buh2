Перем ИзменениеОбщихНастроекРазрешено;
Перем ИзмененыСвойстваМодуля;
Перем мПрограммноеЗакрытие;
Перем СвойстваМодуля;
Перем ТаблицаCSP;

Процедура УправлениеЭУ()
	
	ЭлементыФормы.МодульДокументооборотаПредставление.Доступность = ИспользоватьВнешнийМодуль;
	
	//ЭлементыФормы.ФлажокИспользоватьАвторизациюПрокси.Доступность = РазрешитьОбновлениеМодуля;
	//ЭлементыФормы.ПанельПараметрыАвторизации.Доступность = ИспользоватьАвторизациюПрокси И РазрешитьОбновлениеМодуля;
	ЭлементыФормы.ПанельПараметрыАвторизации.Доступность = ИспользоватьАвторизациюПрокси;
	
	Если НЕ ЗначениеЗаполнено(СвойстваМодуля) Тогда
		МодульДокументооборотаПредставление = "";
	Иначе
		МодульДокументооборотаПредставление = "";
		Если ЗначениеЗаполнено(СвойстваМодуля.Версия) Тогда
			МодульДокументооборотаПредставление = "Модуль версии " + СвойстваМодуля.Версия;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(МодульДокументооборотаПредставление) И СвойстваМодуля.Данные <> Неопределено И СвойстваМодуля.Данные.Получить() <> Неопределено Тогда
			МодульДокументооборотаПредставление = "Модуль загружен";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ПанельОбщиеНастройки.Доступность = ИзменениеОбщихНастроекРазрешено;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ВосстановитьНастройки();
	
	ИзменениеОбщихНастроекРазрешено = ПравоДоступа("Изменение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль);
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ВосстановитьНастройки()
	
	// читаем общие настройки
	Если ПравоДоступа("Чтение", Метаданные.Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль) Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера,
		                      |	Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера
		                      |ИЗ
		                      |	Константы КАК Константы");
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ИспользоватьВнешнийМодуль = Выборка.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль;
			СвойстваМодуля = Новый Структура;
			СвойстваМодуля.Вставить("Данные", Выборка.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль);
			СвойстваМодуля.Вставить("Версия", Выборка.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля);
			
			ИмяКриптопровайдера = Выборка.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера;
			ТипКриптопровайдера = Выборка.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера;
			
			СтрCSP = ТаблицаCSP.НайтиСтроки(Новый Структура("Имя, Тип", ИмяКриптопровайдера, ТипКриптопровайдера));
			Если СтрCSP.Количество() > 0 Тогда
				Криптопровайдер = СтрCSP[0].Код;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// читаем индивидуальные настройки
	сохрРазрешитьОбновлениеМодуля = ВосстановитьЗначение("ДокументооборотСКонтролирующимиОрганами_РазрешитьОнлайнОбновление");
	Если сохрРазрешитьОбновлениеМодуля = Неопределено Тогда
		сохрРазрешитьОбновлениеМодуля = ВосстановитьЗначение("ДокументооборотСНалоговымиОрганами_РазрешитьОнлайнОбновление"); // прежнее имя параметра
	КонецЕсли;
	РазрешитьОбновлениеМодуля = (сохрРазрешитьОбновлениеМодуля = Истина);
	
	сохрИмяПользователяПрокси = ВосстановитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_ИмяПользователя");
	сохрПарольПользователяПрокси = ВосстановитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_Пароль");
	Если ЗначениеЗаполнено(сохрИмяПользователяПрокси) Тогда
		ИспользоватьАвторизациюПрокси = Истина;
		ИмяПользователяПрокси = сохрИмяПользователяПрокси;
		ПарольПользователяПрокси = сохрПарольПользователяПрокси;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереключательМодульДокументооборотаПриИзменении(Элемент)
	
	ИзмененыСвойстваМодуля = Истина;
	
	УправлениеЭУ();
	
	Если Элемент.Значение И НЕ ЗначениеЗаполнено(СвойстваМодуля) Тогда
		ВыбратьВнешнийМодуль();
	КонецЕсли;
	
КонецПроцедуры

Процедура РазрешитьОбновлениеМодуляПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ФлажокИспользоватьАвторизациюПроксиПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	мПрограммноеЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если мПрограммноеЗакрытие Тогда
		Если НЕ СохранитьНастройки() Тогда
			мПрограммноеЗакрытие = Ложь;
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли Модифицированность Тогда
		Ответ = Вопрос("Настройки были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Если НЕ СохранитьНастройки() Тогда
				мПрограммноеЗакрытие = Ложь;
				Отказ = Истина;
			КонецЕсли;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			мПрограммноеЗакрытие = Ложь;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СохранитьНастройки()
	
	Если ИспользоватьВнешнийМодуль И НЕ ЗначениеЗаполнено(СвойстваМодуля) Тогда
		ТекущийЭлемент = ЭлементыФормы.МодульДокументооборотаПредставление;
		Предупреждение("Выберите внешний модуль.");
		Возврат Ложь;
	КонецЕсли;
	
	Если РазрешитьОбновлениеМодуля И ИспользоватьАвторизациюПрокси И НЕ ЗначениеЗаполнено(ИмяПользователяПрокси) Тогда
		ТекущийЭлемент = ЭлементыФормы.ИмяПользователяПрокси;
		Предупреждение("Укажите имя пользователя для авторизации на прокси.");
		Возврат Ложь;
	КонецЕсли;
	
	// сохраняем общие настройки
	Если ИзменениеОбщихНастроекРазрешено Тогда
		
		КонстантыНабор = Константы.СоздатьНабор("ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль,
												|ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль,
												|ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля,
												|ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера,
												|ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера");
		КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль = ИспользоватьВнешнийМодуль;
		
		Если ЗначениеЗаполнено(СвойстваМодуля) Тогда
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = СвойстваМодуля.Данные;
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля = СвойстваМодуля.Версия;
		Иначе
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль = Неопределено;
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля = Неопределено;
		КонецЕсли;
		
		СтрКриптопровайдер = ТаблицаCSP.Найти(Криптопровайдер, "Код");
		Если ЗначениеЗаполнено(СтрКриптопровайдер) Тогда
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера = СтрКриптопровайдер.Имя;
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера = СтрКриптопровайдер.Тип;
		Иначе
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера = Неопределено;
			КонстантыНабор.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера = Неопределено;
		КонецЕсли;
		
		КонстантыНабор.Записать();
		
	КонецЕсли;
	
	// сохраняем индивидуальные настройки
	СохранитьЗначение("ДокументооборотСКонтролирующимиОрганами_РазрешитьОнлайнОбновление", РазрешитьОбновлениеМодуля);
	
	// сохраняем настройки прокси
	Если ИспользоватьАвторизациюПрокси Тогда
		СохранитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_ИмяПользователя", ИмяПользователяПрокси);
		СохранитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_Пароль", ПарольПользователяПрокси);
	Иначе
		СохранитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_ИмяПользователя", Неопределено);
		СохранитьЗначение("ЗащищенныйДокументооборотСФНС_Прокси_Пароль", Неопределено);
	КонецЕсли;
	
	Если ИзмененыСвойстваМодуля Тогда
		Сообщить("Измененные настройки документооборота вступят в силу при повторном открытии программы.", СтатусСообщения.Информация);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура МодульДокументооборотаПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийМодуль();
	
КонецПроцедуры

Процедура ВыбратьВнешнийМодуль()
	
	ОбъектДиалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ОбъектДиалог.Фильтр = "Внешние обработки (*.epf)|*.epf";
	Если ОбъектДиалог.Выбрать() Тогда
		
		ОбъектФайл = Новый Файл(ОбъектДиалог.ПолноеИмяФайла);
		
		СвойстваМодуля = Новый Структура;
		СвойстваМодуля.Вставить("Данные", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ОбъектДиалог.ПолноеИмяФайла)));
		СвойстваМодуля.Вставить("Версия", ПолучитьВерсиюВнешнегоМодуляИзФайла(ОбъектДиалог.ПолноеИмяФайла));
		
		ИзмененыСвойстваМодуля = Истина;
		
		Модифицированность = Истина;
		УправлениеЭУ();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВерсиюВнешнегоМодуляИзФайла(ИмяФайла)
	
	Попытка
		ОбъектМодуль = ВнешниеОбработки.Создать(ИмяФайла);
		Возврат ОбъектМодуль.мВерсияМодуля;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура МодульДокументооборотаПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	
	ИзмененыСвойстваМодуля = Истина;
	
	СвойстваМодуля = Неопределено;
	
	Модифицированность = Истина;
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуCSP(ИмяКриптопровайдера, КодCSP, ТипCSP)
	
	НовСтр = ТаблицаCSP.Добавить();
	НовСтр.Имя = ИмяКриптопровайдера;
	НовСтр.Код = КодCSP;
	НовСтр.Тип = ТипCSP;
	
КонецПроцедуры

Процедура КриптопровайдерОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

мПрограммноеЗакрытие = Ложь;
ИзмененыСвойстваМодуля = Ложь;

ТаблицаCSP = Новый ТаблицаЗначений;
ТаблицаCSP.Колонки.Добавить("Имя");
ТаблицаCSP.Колонки.Добавить("Код");
ТаблицаCSP.Колонки.Добавить("Тип");

ДобавитьСтрокуВТаблицуCSP("Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider", 1, 75);
ДобавитьСтрокуВТаблицуCSP("Infotecs Cryptographic Service Provider", 2, 2);
