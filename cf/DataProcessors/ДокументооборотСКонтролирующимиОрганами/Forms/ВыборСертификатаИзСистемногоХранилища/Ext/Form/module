Перем Крипт;
Перем Хранилище Экспорт;
Перем ПоказыватьПросроченные Экспорт;
Перем СерыйЦвет;
Перем ПолнаяТаблицаСертификатов;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Крипт = КонтекстЭДО.СоздатьОбъектДляРаботыСКриптографией();
	Если Крипт = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДвДанные = КонтекстЭДО.СоздатьОбъектДляРаботыСДвоичнымиДанными();
	Если ДвДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбрабатываемоеХранилище = ?(ЗначениеЗаполнено(Хранилище), Хранилище, "MY");
	
	ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПоказыватьПросроченные.Пометка = (ПоказыватьПросроченные = Истина);
	ЭлементыФормы.Сертификаты.Колонки.ИНН.Видимость = (ОбрабатываемоеХранилище = "MY");
	
	Пока Крипт.ПолучитьСледующийСертификат(ОбрабатываемоеХранилище) Цикл
		
		НовСтр = ПолнаяТаблицаСертификатов.Добавить();
		
		НовСтр.ДействителенС = Крипт.ДействителенС;
		НовСтр.ДействителенПо = Крипт.ДействителенДо;
		НовСтр.Поставщик = ЗначениеПоля(Крипт.Поставщик);
		НовСтр.СерийныйНомер = ЗначениеПоля(Крипт.СерийныйНомер);
		НовСтр.Владелец = ЗначениеПоля(Крипт.Субъект);
		НовСтр.Наименование = ЗначениеПоля(Крипт.ИмяСертификата);
		НовСтр.ПригоденДляПодписания = Крипт.ПригоденДляПодписывания;
		
		ОтпечатокБейс64 = Крипт.Отпечаток;
		ДвДанные.Очистить();
		ДвДанные.ДобавитьИзСтрокиBase64(ОтпечатокБейс64, Истина);
		ДвДанные.ТекущаяПозиция = 0;
		НовСтр.Отпечаток = нрег(КонтекстЭДО.ИзвлечьОтпечатокИзДвоичныхДанных(ДвДанные));
		
		ПараметрыВладельца = РазложитьСтрокуВладелец(НовСтр.Владелец);
		
		НовСтр.ИмяВладельца = ЗначениеПоля(ПараметрыВладельца.Имя);
		НовСтр.Организация = ЗначениеПоля(ПараметрыВладельца.Организация);
		НовСтр.Должность = ЗначениеПоля(?(ЗначениеЗаполнено(ПараметрыВладельца.Должность) И ПараметрыВладельца.Должность <> "0", ПараметрыВладельца.Должность, ПараметрыВладельца.Подразделение));
		НовСтр.EMail = ЗначениеПоля(ПараметрыВладельца.ЭлектроннаяПочта);
		НовСтр.ИНН = ЗначениеПоля(ПараметрыВладельца.ИНН);
		
	КонецЦикла;
	ПолнаяТаблицаСертификатов.Сортировать("ИмяВладельца");
	
	// инициализируем массив с начальными значениями
	Если НЕ ЗначениеЗаполнено(НачальноеЗначениеВыбора) Тогда
		МассивНачальныхЗначенийВыбора = Новый Массив;
	ИначеЕсли ТипЗнч(НачальноеЗначениеВыбора) = Тип("Массив") Тогда
		МассивНачальныхЗначенийВыбора = НачальноеЗначениеВыбора;
	ИначеЕсли ТипЗнч(НачальноеЗначениеВыбора) = Тип("Строка") Тогда
		МассивНачальныхЗначенийВыбора = Новый Массив;
		МассивНачальныхЗначенийВыбора.Добавить(НачальноеЗначениеВыбора);
	Иначе
		МассивНачальныхЗначенийВыбора = НачальноеЗначениеВыбора.ВыгрузитьКолонку("Сертификат");
	КонецЕсли;
	
	Если МассивНачальныхЗначенийВыбора.Количество() > 1 Тогда
		ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.МножественныйВыбор.Пометка = Истина;
	КонецЕсли;
	
	// если сертификат из одного из начальных значений выбора просрочен,
	// то включим показ просроченных
	ТекДата = ТекущаяДата();
	Для Каждого ЭлНачальноеЗначениеВыбора Из МассивНачальныхЗначенийВыбора Цикл
		Если ЗначениеЗаполнено(ЭлНачальноеЗначениеВыбора) Тогда
			ТекСерт = ПолнаяТаблицаСертификатов.Найти(ЭлНачальноеЗначениеВыбора, "Отпечаток");
			Если ТекСерт <> Неопределено Тогда
				Если НЕ ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПоказыватьПросроченные.Пометка
				И (ТекДата < ТекСерт.ДействителенС ИЛИ ТекДата > ТекСерт.ДействителенПо) Тогда
					ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПоказыватьПросроченные.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОтобразитьТаблицуСертификатов();
	
	// активизируем начальные значения выбора
	Для Каждого ЭлНачальноеЗначениеВыбора Из МассивНачальныхЗначенийВыбора Цикл
		Если ЗначениеЗаполнено(ЭлНачальноеЗначениеВыбора) Тогда
			РезультатПоиска = Сертификаты.Найти(ЭлНачальноеЗначениеВыбора, "Отпечаток");
			Если РезультатПоиска <> Неопределено Тогда
				РезультатПоиска.Пометка = Истина;
				ЭлементыФормы.Сертификаты.ТекущаяСтрока = РезультатПоиска;
			Иначе
				Сообщить("Сертификат с отпечатком """ + ЭлНачальноеЗначениеВыбора + """ не найден в хранилище сертификатов.");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// показываем колонку с флажками, если форма в режиме множественного выбора
	Если НЕ МножественныйВыбор Тогда
		ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.МножественныйВыбор);
	КонецЕсли;
	
	УправлениеЭУ();
	
КонецПроцедуры

Функция ЗначениеПоля(СтрЗначениеПоля)
	
	Возврат ?(НЕ ЗначениеЗаполнено(СтрЗначениеПоля) ИЛИ СокрЛП(СтрЗначениеПоля) = "0", "", СтрЗначениеПоля);
	
КонецФункции

Процедура ОтобразитьТаблицуСертификатов()
	
	// запоминаем выбранные сертификаты
	ВыбранныеСертификаты = Новый Массив;
	Для Каждого ЭлСертификат Из Сертификаты Цикл
		Если ЭлСертификат.Пометка Тогда
			ВыбранныеСертификаты.Добавить(ЭлСертификат.Отпечаток);
		КонецЕсли;
	КонецЦикла;
	
	// запоминаем текущий сертификат
	Если ЭлементыФормы.Сертификаты.ТекущаяСтрока <> Неопределено Тогда
		ТекущийСертификат = ЭлементыФормы.Сертификаты.ТекущаяСтрока.Отпечаток;
	КонецЕсли;
	
	ПоказыватьПросроченные = ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ПоказыватьПросроченные.Пометка;
	ТекущаяДата = ТекущаяДата();
	
	Сертификаты.Очистить();
	Для Каждого Серт Из ПолнаяТаблицаСертификатов Цикл
		Если НЕ ПоказыватьПросроченные И (ТекущаяДата < Серт.ДействителенС ИЛИ ТекущаяДата > Серт.ДействителенПо) Тогда
			Продолжить;
		КонецЕсли;
		НовСтр = Сертификаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Серт);
	КонецЦикла;
	
	// устанавливаем выбранные сертификаты
	Для Каждого ВыбранныйСертификат Из ВыбранныеСертификаты Цикл
		СтрокаВыбранныйСертификат = Сертификаты.Найти(ВыбранныйСертификат, "Отпечаток");
		Если СтрокаВыбранныйСертификат <> Неопределено Тогда
			СтрокаВыбранныйСертификат.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// устанавливаем текущий сертификат
	Если ТекущийСертификат <> Неопределено Тогда
		СтрокаСертификат = Сертификаты.Найти(ТекущийСертификат, "Отпечаток");
		Если СтрокаСертификат <> Неопределено Тогда
			ЭлементыФормы.Сертификаты.ТекущаяСтрока = СтрокаСертификат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СертификатыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("МножественныйВыбор") <> Неопределено
	И ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.МножественныйВыбор.Пометка Тогда
		ПоказатьСертификат(ЭлементыФормы.Сертификаты.ТекущаяСтрока);
	Иначе
		ВыбратьСертификат();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьСертификат(ТекДанные)
	
	СерийныйНомер = ТекДанные.СерийныйНомер;
	Поставщик = ТекДанные.Поставщик;
	Крипт.ПоказатьСертификат(СерийныйНомер, Поставщик);
	
КонецПроцедуры

Процедура КоманднаяПанельСертификатыПоказать(Кнопка)
	
	ТекДанные = ЭлементыФормы.Сертификаты.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Предупреждение("Выберите в таблцие сертификат для показа.");
	Иначе
		ПоказатьСертификат(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьСертификат()
	
	ТекДата = ТекущаяДата();
	Если ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("МножественныйВыбор") <> Неопределено
	И ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.МножественныйВыбор.Пометка Тогда
		
		// помещаем сертификаты в массив и анализируем их периоды действия
		ТекСертификаты = Новый Массив;
		ОдинИзСертификатовПросрочен = Ложь;
		Для Каждого СтрСертификат Из Сертификаты Цикл
			
			// если строка не помечена, то продолжим
			Если НЕ СтрСертификат.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			// если сертификат просрочен, то взведем флаг
			СрокИстек = ТекДата > СтрСертификат.ДействителенПо;
			СрокНеНачался = ТекДата < СтрСертификат.ДействителенС;
			Если СрокИстек ИЛИ СрокНеНачался Тогда
				ОдинИзСертификатовПросрочен = Истина;
			КонецЕсли;
			
			// добавляем элемент в массив выбранных сертификатов
			ТекСертификат = Новый Структура;
			ТекСертификат.Вставить("ДействителенС",			СтрСертификат.ДействителенС);
			ТекСертификат.Вставить("ДействителенПо",		СтрСертификат.ДействителенПо);
			ТекСертификат.Вставить("Отпечаток",				СтрСертификат.Отпечаток);
			ТекСертификат.Вставить("Поставщик",				СтрСертификат.Поставщик);
			ТекСертификат.Вставить("СерийныйНомер",			СтрСертификат.СерийныйНомер);
			ТекСертификат.Вставить("Владелец",				СтрСертификат.Владелец);
			ТекСертификат.Вставить("Наименование",			СтрСертификат.Наименование);
			ТекСертификат.Вставить("ВозможностьПодписи",	СтрСертификат.ПригоденДляПодписания);
			ТекСертификат.Вставить("ВозможностьШифрования",	СтрСертификат.ПригоденДляШифрования);
			ТекСертификаты.Добавить(ТекСертификат);
			
		КонецЦикла;
		
		// если один из сертификатов просрочен, то задаем уточняющий вопрос
		Если ОдинИзСертификатовПросрочен Тогда
			Ответ = Вопрос("Среди выбранных сертификатов есть такие, срок действия которых истек.
							|Вы уверены, что хотите продолжить выбор?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Закрыть(ТекСертификаты);
		
	Иначе
		
		ТекДанные = ЭлементыФормы.Сертификаты.ТекущиеДанные;
		
		СрокИстек = ТекДата > ТекДанные.ДействителенПо;
		СрокНеНачался = ТекДата < ТекДанные.ДействителенС;
		Если СрокИстек ИЛИ СрокНеНачался Тогда
			Ответ = Вопрос("Вы уверены, что хотите выбрать сертификат, срок действия которого " + ?(СрокИстек, "истек", "еще не начался") + "?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		СвойстваСертификата = Новый Структура;
		СвойстваСертификата.Вставить("ДействителенС",			ТекДанные.ДействителенС);
		СвойстваСертификата.Вставить("ДействителенПо",			ТекДанные.ДействителенПо);
		СвойстваСертификата.Вставить("Отпечаток",				ТекДанные.Отпечаток);
		СвойстваСертификата.Вставить("Поставщик",				ТекДанные.Поставщик);
		СвойстваСертификата.Вставить("СерийныйНомер",			ТекДанные.СерийныйНомер);
		СвойстваСертификата.Вставить("Владелец",				ТекДанные.Владелец);
		СвойстваСертификата.Вставить("Наименование",			ТекДанные.Наименование);
		СвойстваСертификата.Вставить("ВозможностьПодписи",		ТекДанные.ПригоденДляПодписания);
		СвойстваСертификата.Вставить("ВозможностьШифрования",	ТекДанные.ПригоденДляШифрования);
		
		Закрыть(СвойстваСертификата);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыбрать(Кнопка)
	
	//ТекДанные = ЭлементыФормы.Сертификаты.ТекущиеДанные;
	//Если ТекДанные = Неопределено Тогда
	//	Предупреждение("Выберите сертификат!");
	//	Возврат;
	//КонецЕсли;
	
	ВыбратьСертификат();
	
КонецПроцедуры

Процедура СертификатыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если ПоказыватьПросроченные Тогда
		ТекДатаВермя = ТекущаяДата();
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Если ОформлениеСтроки.ДанныеСтроки.ДействителенС > ТекДатаВермя ИЛИ ОформлениеСтроки.ДанныеСтроки.ДействителенПо < ТекДатаВермя Тогда
				ОформлениеСтроки.ЦветТекста = СерыйЦвет;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПоказыватьПросроченные(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ОтобразитьТаблицуСертификатов();
	
КонецПроцедуры

Процедура КоманднаяПанельСертификатыСортироватьПоВозрастанию(Кнопка)
	
	ТекКолонка = ЭлементыФормы.Сертификаты.ТекущаяКолонка;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолнаяТаблицаСертификатов.Сортировать(ТекКолонка.Имя);
	Сертификаты.Сортировать(ТекКолонка.Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельСертификатыСортироватьПоУбыванию(Кнопка)
	
	ТекКолонка = ЭлементыФормы.Сертификаты.ТекущаяКолонка;
	Если ТекКолонка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолнаяТаблицаСертификатов.Сортировать(ТекКолонка.Имя + " УБЫВ");
	Сертификаты.Сортировать(ТекКолонка.Имя + " УБЫВ");
	
КонецПроцедуры

Функция РазложитьСтрокуВладелец(Знач Владелец)
	
	СоответствиеКодаИмениСвойства = Новый Соответствие;
	СоответствиеКодаИмениСвойства.Вставить("CN", "Имя");
	СоответствиеКодаИмениСвойства.Вставить("O", "Организация");
	СоответствиеКодаИмениСвойства.Вставить("OU", "Подразделение");
	СоответствиеКодаИмениСвойства.Вставить("E", "ЭлектроннаяПочта");
	СоответствиеКодаИмениСвойства.Вставить("T", "Должность");
	
	СвойстваРезультат = Новый Структура("Имя, Организация, Подразделение, ЭлектроннаяПочта, Должность, ИНН", "", "", "", "", "", "");
	Пока НЕ ПустаяСтрока(Владелец) Цикл
		ВхождениеЗапятой = Найти(Владелец, ",");
		СтрокаДоЗапятой = ?(ВхождениеЗапятой = 0, СокрЛП(Владелец), СокрЛП(Лев(Владелец, ВхождениеЗапятой - 1)));
		ВхождениеРавно = Найти(СтрокаДоЗапятой, "=");
		Если ВхождениеРавно <> 0 Тогда
			ДоРавно = СокрЛП(Лев(СтрокаДоЗапятой, ВхождениеРавно - 1));
			ПослеРавно = СокрЛП(Сред(СтрокаДоЗапятой, ВхождениеРавно + 1));
			Если ДоРавно <> "" И ПослеРавно <> "" Тогда
				ИмяСвойства = СоответствиеКодаИмениСвойства[ДоРавно];
				Если ИмяСвойства <> Неопределено Тогда
					СвойстваРезультат.Вставить(ИмяСвойства, ПослеРавно);
				ИначеЕсли Лев(ДоРавно, СтрДлина("OID.1.2.643.3.")) = "OID.1.2.643.3." И Прав(ДоРавно, СтрДлина(".1.1")) = ".1.1" Тогда
					СвойстваРезультат.Вставить("ИНН", ПослеРавно);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Владелец = ?(ВхождениеЗапятой = 0, "", СокрЛП(Сред(Владелец, ВхождениеЗапятой + 1)));
	КонецЦикла;

	Возврат СвойстваРезультат;

КонецФункции

Процедура КоманднаяПанельСертификатыМножественныйВыбор(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеЭУ();
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	Если ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("МножественныйВыбор") <> Неопределено
	И ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.МножественныйВыбор.Пометка Тогда
		
		ЭлементыФормы.Сертификаты.Колонки.Пометка.Видимость = Истина;
		
		// показываем кнопки групповой работы с флажками
		Если ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("УстановитьВсеФлажки") = Неопределено Тогда
			КнопкаУстановитьВсеФлажки = ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Добавить("УстановитьВсеФлажки", ТипКнопкиКоманднойПанели.Действие, "Установить все флажки", Новый Действие("КоманднаяПанельСертификатыУстановитьВсеФлажки"));
			КнопкаУстановитьВсеФлажки.Картинка = БиблиотекаКартинок.УстановитьФлажки;
			КнопкаУстановитьВсеФлажки.Отображение = ОтображениеКнопкиКоманднойПанели.Авто;
			КнопкаУстановитьВсеФлажки.Подсказка = "Установить все флажки";
		КонецЕсли;
		
		Если ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("СнятьВсеФлажки") = Неопределено Тогда
			КнопкаСнятьВсеФлажки = ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Добавить("СнятьВсеФлажки", ТипКнопкиКоманднойПанели.Действие, "Установить все флажки", Новый Действие("КоманднаяПанельСертификатыСнятьВсеФлажки"));
			КнопкаСнятьВсеФлажки.Картинка = БиблиотекаКартинок.СнятьФлажки;
			КнопкаСнятьВсеФлажки.Отображение = ОтображениеКнопкиКоманднойПанели.Авто;
			КнопкаСнятьВсеФлажки.Подсказка = "Снять все флажки";
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.Сертификаты.Колонки.Пометка.Видимость = Ложь;
		
		// скрываем кнопки групповой работы с флажками
		КнопкаСнятьВсеФлажки = ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("СнятьВсеФлажки");
		Если КнопкаСнятьВсеФлажки <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Удалить(КнопкаСнятьВсеФлажки);
		КонецЕсли;
		
		КнопкаУстановитьВсеФлажки = ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Найти("УстановитьВсеФлажки");
		Если КнопкаУстановитьВсеФлажки <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельСертификаты.Кнопки.Удалить(КнопкаУстановитьВсеФлажки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСертификатыУстановитьВсеФлажки(Кнопка)
	
	Сертификаты.ЗаполнитьЗначения(Истина, "Пометка");
	
КонецПроцедуры

Процедура КоманднаяПанельСертификатыСнятьВсеФлажки(Кнопка)
	
	Сертификаты.ЗаполнитьЗначения(Ложь, "Пометка");
	
КонецПроцедуры

ПоказыватьПросроченные = Ложь;

СерыйЦвет = Новый Цвет(128, 128, 128);

ПолнаяТаблицаСертификатов = Сертификаты.СкопироватьКолонки();
