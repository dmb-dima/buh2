Перем СоответствиеИмениКнопкиКодуДействия;
Перем мВременныеФайлы;
Перем СоответствиеВариантовПериодаПериодичностям;
Перем ПеридичностьПоПризПериодОтч;
Перем Периоды;
Перем СоответствиеКНДВидуОтчета;
Перем СоответствиеКНДПризнакуНарастающегоИтога;
Перем СдвигВМесяцахПоПериодичности;
Перем СоответствиеПериодОтчМесяцуОкончания;
Перем СоответствиеПериодОтчПериодичности;

Процедура ОтобразитьИмяФайла()
	
	ИмяФайла = мИмяФайла;
	
КонецПроцедуры

Процедура УстановитьПериодичность(НоваяПериодичность = Неопределено)
	
	Если НоваяПериодичность <> Неопределено Тогда
		Периодичность = НоваяПериодичность;
		Период = Неопределено;
	КонецЕсли;
	ПериодыПериодичности = Периоды.НайтиСтроки(Новый Структура("Периодичность", Периодичность));
	ЭлементыФормы.Период.СписокВыбора.Очистить();
	Для Каждого ПериодПериодичности Из ПериодыПериодичности Цикл
		ЭлементыФормы.Период.СписокВыбора.Добавить(ПериодПериодичности, ПериодПериодичности.Представление);
	КонецЦикла;
	
КонецПроцедуры

Функция ВидОтчетаПоКНД(КНД)
	
	ИсточникОтчета = СоответствиеКНДВидуОтчета[КНД];
	Если ИсточникОтчета <> Неопределено Тогда
		Возврат Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ИсточникОтчета);
	КонецЕсли;
	Возврат Справочники.РегламентированныеОтчеты.ПустаяСсылка();

КонецФункции

Функция ОпределитьОрганизациюПоИННиКПП(ИНН, КПП)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	                      |	Организации.Ссылка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	Организации.ИНН = &ИНН");
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Если КПП <> "" Тогда
		Запрос.Текст = Запрос.Текст + "
	                      |	И Организации.КПП = &КПП";
		Запрос.УстановитьПараметр("КПП", КПП);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Организации.ПустаяСсылка();
	
КонецФункции

Функция ПроанализироватьФайлВыгрузки(ПолноеИмяФайла)
	
	ОбъектФайл = Новый Файл(ПолноеИмяФайла);
	КороткоеИмяФайла = ОбъектФайл.Имя;
	
	// если точек в имени файла больше одной, то файл некорректный
	Если СтрЧислоВхождений(КороткоеИмяФайла, ".") <> 1 Тогда
		Предупреждение("Некорректное имя файла выгрузки!");
		Возврат Ложь;
	КонецЕсли;
	
	// определяем имя файла без расширения
	ВхождениеТочки = Найти(КороткоеИмяФайла, ".");
	Окончание = Сред(КороткоеИмяФайла, ВхождениеТочки);
	ИмяБезРасширения = Лев(КороткоеИмяФайла, ВхождениеТочки - 1);
	Если ИмяБезРасширения = "" ИЛИ СтрДлина(Окончание) < 4 Тогда
		Предупреждение("Некорректное имя файла выгрузки!");
		Возврат Ложь;
	КонецЕсли;
	
	// восстанавливаем из макета соответствия КНД виду отчета и признаку сдачи нарастающим итогом
	СоответствиеКНДВидуОтчета = Новый Соответствие;
	СоответствиеКНДПризнакуНарастающегоИтога = Новый Соответствие;
	МакетКНД = КонтекстЭДО.ПолучитьМакет("ОписаниеФормДляИмпорта");
	Для Инд = 1 По МакетКНД.ВысотаТаблицы Цикл
		_КНД = СокрЛП(МакетКНД.Область(Инд, 1, Инд, 1).Текст);
		_ИсточникОтчета = СокрЛП(МакетКНД.Область(Инд, 2, Инд, 2).Текст);
		_НарастающимИтогом = ?(СокрЛП(МакетКНД.Область(Инд, 3, Инд, 3).Текст) = "X", Ложь, Истина);
		СоответствиеКНДВидуОтчета.Вставить(_КНД, _ИсточникОтчета);
		СоответствиеКНДПризнакуНарастающегоИтога.Вставить(_КНД, _НарастающимИтогом);
	КонецЦикла;
	
	// определяем, должно ли наименование меняться автоматически
	АвтоНаименование = (ВРЕГ(Лев(Наименование, СтрДлина(мИмяФайла))) = ВРЕГ(мИмяФайла));
	
	ПараметрыИмпорта = Новый Структура;
	
	Если нрег(Окончание) = ".xml" Тогда
		// если это файл формата XML, то...
		
		// считываем показатели файла
		ОбъектЧтениеXML = Новый ЧтениеXML;
		Попытка
			ОбъектЧтениеXML.ОткрытьФайл(ПолноеИмяФайла);
			ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
			ПоказателиВыгрузки = Новый Соответствие;
			Пока ОбъектЧтениеXML.Прочитать() Цикл
				Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
					Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ПоказателиВыгрузки[ОбъектЧтениеXML.Имя] = Неопределено Тогда
							ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;	
			ОбъектЧтениеXML.Закрыть();
		Исключение
			Предупреждение("Выбранный файл не является файлом выгрузки в формате XML!");
			Возврат Ложь;
		КонецПопытки;
		
		// проверка количества документов
		стрЧислоДокументов = ПоказателиВыгрузки["КолДок"];
		Если стрЧислоДокументов <> Неопределено Тогда
			Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(стрЧислоДокументов) Тогда
				Предупреждение("Неизвестный формат файла выгрузки!");
				Возврат Ложь;
			КонецЕсли;
			ЧислоДокументов = Число(стрЧислоДокументов);
			Если ЧислоДокументов < 1 Тогда
				Предупреждение("Файл выгрузки должен содержать выгрузку хотя бы одного отчета!");
				Возврат Ложь;
			ИначеЕсли ЧислоДокументов > 1 Тогда
				Предупреждение("Файл выгрузки должен содержать выгрузку только одного отчета!");
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		// определение вида отчета
		КНД = ПоказателиВыгрузки["КНД"];
		Если КНД <> Неопределено И КНД <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтчетаПоКНД(КНД);
			Если ВидОтчетаВыгрузки <> Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение организации
		ИНН = ?(ПоказателиВыгрузки["ИННЮЛ"] = Неопределено, "", ПоказателиВыгрузки["ИННЮЛ"]);
		КПП = ?(ПоказателиВыгрузки["КПП"] = Неопределено, "", ПоказателиВыгрузки["КПП"]);
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение вида документа
		ВидДок = ПоказателиВыгрузки["ВидДок"];
		НомКорр = ПоказателиВыгрузки["НомКорр"];
		Если ВидДок <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(ВидДок) Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", Число(ВидДок));
		ИначеЕсли НомКорр <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(НомКорр) Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомКорр));
		КонецЕсли;
		
		// определение налогового органа
		ОшибкаОпределенияНО = Ложь;
		ИдФайл = ПоказателиВыгрузки["ИдФайл"];
		Если ИдФайл <> Неопределено Тогда
			Вхождение_1 = Найти(ИдФайл, "_");
			Если Вхождение_1 = 0 Тогда
				ОшибкаОпределенияНО = Истина;
			Иначе
				_ИдФайл = Сред(ИдФайл, Вхождение_1 + 1);
				Вхождение_2 = Найти(_ИдФайл, "_");
				Если Вхождение_2 = 0 Тогда
					ОшибкаОпределенияНО = Истина;
				Иначе
					КодИФНС = Сред(_ИдФайл, Вхождение_2 + 1, 4);
					Если СтрДлина(КодИФНС) <> 4 ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(КодИФНС) Тогда
						ОшибкаОпределенияНО = Истина;
					Иначе
						НОВыгрузки = Справочники.НалоговыеОрганы.НайтиПоКоду(КодИФНС);
						Если НОВыгрузки <> Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
							ПараметрыИмпорта.Вставить("НалоговыйОрган", НОВыгрузки);
						Иначе
							ОшибкаОпределенияНО = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОшибкаОпределенияНО = Истина;
		КонецЕсли;
		
		// определение периода
		ОшибкаОпределенияПериода = Ложь;
		ГодПериодОтч = ПоказателиВыгрузки["ГодПериодОтч"];
		Если ГодПериодОтч = Неопределено Тогда
			ГодПериодОтч = ПоказателиВыгрузки["ОтчетГод"];
		КонецЕсли;
		ПериодОтч = ПоказателиВыгрузки["ПериодОтч"];
		Если ГодПериодОтч = Неопределено ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ГодПериодОтч) ИЛИ (ПериодОтч <> Неопределено И НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПериодОтч)) Тогда
			ОшибкаОпределенияПериода = Истина;
		Иначе
			Если ПериодОтч = Неопределено Тогда
				ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(Число(ГодПериодОтч), 1, 1));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(ДатаНачалаПериодаОтчетаВыгрузки);
			Иначе
				ПериодичностьВыгрузки = СоответствиеПериодОтчПериодичности[ПериодОтч];
				НомерМесяцаПо = СоответствиеПериодОтчМесяцуОкончания[ПериодОтч];
				НарастающимИтогом = СоответствиеКНДПризнакуНарастающегоИтога[КНД];
				Если НомерМесяцаПо = Неопределено ИЛИ НарастающимИтогом = Неопределено ИЛИ ПериодичностьВыгрузки = Неопределено Тогда
					ОшибкаОпределенияПериода = Истина;
				Иначе
					Если НарастающимИтогом Тогда
						НомерМесяцаС = 1;
					Иначе
						СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
						Если СдвигМесяцев = Неопределено Тогда
							ОшибкаОпределенияПериода = Ложь;
						Иначе
							НомерМесяцаС = НомерМесяцаПо - СдвигМесяцев + 1;
							ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(Число(ГодПериодОтч), НомерМесяцаС, 1));
							ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(Число(ГодПериодОтч), НомерМесяцаПо, 1));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
		
		// инициализируем текст на форме
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекста.ANSI);
		ПараметрыИмпорта.Вставить("Текст", ЧтениеТекста.Прочитать());
		ЧтениеТекста.Закрыть();
		
		// инициализируем переменные, содержащие двоичные данные и имя файла
		ПараметрыИмпорта.Вставить("ИмяФайла", КороткоеИмяФайла);
		ПараметрыИмпорта.Вставить("ДанныеФайла", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных(9)));
		
	ИначеЕсли нрег(Окончание) = ".txt"
		ИЛИ (Сред(Окончание, 1, 1) = "."
		И (Сред(Окончание, 2, 1) >= "0" И Сред(Окончание, 2, 1) <= "9")
		И (Сред(Окончание, 3, 1) >= "0" И Сред(Окончание, 3, 1) <= "9")
		И (Сред(Окончание, 4, 1) >= "0" И Сред(Окончание, 4, 1) <= "9")) Тогда
		// если это текстовый файл выгрузки (форматы 2, 3 налоговой отчетности или декларации по алкоголю), то...
		
		// считываем текст и закрываем файл
		ЧтениеТекста = Новый ЧтениеТекста(ПолноеИмяФайла, КодировкаТекста.OEM);
		Текст = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		
		// проверка количества документов
		ЧислоДокументов = СтрЧислоВхождений(Текст, Символы.ПС + "@@@" + Символы.ПС) - 1;
		Если ЧислоДокументов < 1 Тогда
			Предупреждение("Файл выгрузки должен содержать выгрузку хотя бы одного отчета!");
			Возврат Ложь;
		ИначеЕсли ЧислоДокументов > 1 Тогда
			Предупреждение("Файл выгрузки должен содержать выгрузку только одного отчета!");
			Возврат Ложь;
		КонецЕсли;
		ПоказателиВыгрузки = Новый Соответствие;
		Для Инд = 1 По СтрЧислоСтрок(Текст) Цикл
			ТекСтрока = СтрПолучитьСтроку(Текст, Инд);
			ВхождениеДвоеточия = Найти(ТекСтрока, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтрока, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтрока, ВхождениеДвоеточия + 1)));
			КонецЕсли;
		КонецЦикла;
		КолДок = ПоказателиВыгрузки["КолДок"];
		КолФОтч = ПоказателиВыгрузки["КолФОтч"];
		Если (КолДок <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(КолДок) И Число(КолДок) > 1)
			ИЛИ (КолФОтч <> Неопределено И ОбщегоНазначения.ТолькоЦифрыВСтроке(КолФОтч) И Число(КолФОтч) > 1) Тогда
			Предупреждение("Файл выгрузки должен содержать выгрузку одного отчета!");
			Возврат Ложь;
		КонецЕсли;
		
		ТипИнф					= ПоказателиВыгрузки["ТипИнф"];
		ВерсФорм				= ПоказателиВыгрузки["ВерсФорм"];
		ЭтоАлко201				= (ВерсФорм <> Неопределено И ТипИнф <> Неопределено И ВерсФорм = "2.01" И Лев(ТипИнф, 5) = "11520");
		
		// определение организации
		КПП = "";
		КППИном					= ПоказателиВыгрузки["КППИном"];
		КППОП					= ПоказателиВыгрузки["КППОП"];
		КППЮЛ					= ПоказателиВыгрузки["КППЮЛ"];
		КППОПСРП				= ПоказателиВыгрузки["КППОПСРП"];
		Если КППИном <> Неопределено И КППИном <> "" Тогда
			КПП = КППИном;
		ИначеЕсли КППОП <> Неопределено И КППОП <> "" Тогда
			КПП = КППОП;
		ИначеЕсли КППОПСРП <> Неопределено И КППОПСРП <> "" Тогда
			КПП = КППОПСРП;
		ИначеЕсли КППЮЛ <> Неопределено Тогда
			КПП = КППЮЛ;
		КонецЕсли;
		
		ИНН = "";
		ИННИО					= ПоказателиВыгрузки["ИННИО"];
		ИННФЛ					= ПоказателиВыгрузки["ИННФЛ"];
		ИННЮЛ					= ПоказателиВыгрузки["ИННЮЛ"];
		Если ИННИО <> Неопределено И ИННИО <> "" Тогда
			ИНН = ИННИО;
		ИначеЕсли ИННФЛ <> Неопределено И ИННИО <> "" Тогда
			ИНН = ИННФЛ;
		ИначеЕсли ИННЮЛ <> Неопределено И ИННЮЛ <> "" Тогда
			ИНН = ИННЮЛ;
		КонецЕсли;
		
		Если ИНН <> "" ИЛИ КПП <> "" Тогда
			ОрганизацияВыгрузки = ОпределитьОрганизациюПоИННиКПП(ИНН, КПП);
			Если ОрганизацияВыгрузки <> Справочники.Организации.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("Организация", ОрганизацияВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение налогового органа
		ИдПол = ПоказателиВыгрузки["ИдПол"];
		Если ИдПол <> Неопределено Тогда
			КодНО = СокрЛП(Лев(ИдПол, 4));
			НОВыгрузки = Справочники.НалоговыеОрганы.НайтиПоКоду(КодНО);
			Если НОВыгрузки <> Справочники.НалоговыеОрганы.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("НалоговыйОрган", НОВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение вида отчета
		КНД = ПоказателиВыгрузки["КНД"];
		Если КНД <> Неопределено И КНД <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтчетаПоКНД(КНД);
			Если ВидОтчетаВыгрузки <> Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		ИначеЕсли ТипИнф <> Неопределено И ТипИнф <> "" Тогда
			ВидОтчетаВыгрузки = ВидОтчетаПоКНД(ТипИнф);
			Если ВидОтчетаВыгрузки <> Справочники.РегламентированныеОтчеты.ПустаяСсылка() Тогда
				ПараметрыИмпорта.Вставить("ВидОтчета", ВидОтчетаВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
		// определение периода
		ГодПериодОтч			= ПоказателиВыгрузки["ГодПериодОтч"];
		_ПризПериодОтч			= ПоказателиВыгрузки["ПризПериодОтч"];
		_ПризПеридОтч			= ПоказателиВыгрузки["ПризПеридОтч"];
		ПризПериодОтч			= ?(_ПризПериодОтч = Неопределено, _ПризПеридОтч, _ПризПериодОтч);
		НомерПериодОтч			= ПоказателиВыгрузки["НомерПериодОтч"];
		НачПериодОтч			= ПоказателиВыгрузки["НачПериодОтч"];
		КонПериодОтч			= ПоказателиВыгрузки["КонПериодОтч"];
		
		ОшибкаОпределенияПериода = Ложь;
		Если ЭтоАлко201 Тогда
			ОшибкаОпределенияПериода = Истина; // пока не обрабатываем
		ИначеЕсли НачПериодОтч <> Неопределено И КонПериодОтч <> Неопределено Тогда // это 2.01
			Если ПризПериодОтч <> "2" И ПризПериодОтч <> "3" Тогда // таких не знаем
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПризПериодОтч = "2" Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Квартал;
				ИначеЕсли ПризПериодОтч = "3" Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
				КонецЕсли;
				ДатаНачалаПериодаОтчетаВыгрузки = НачалоДня(Дата(Число(Сред(НачПериодОтч, 7)), Число(Сред(НачПериодОтч, 4, 2)), Число(Сред(НачПериодОтч, 1, 2))));
				ДатаОкончанияПериодаОтчетаВыгрузки = КонецДня(Дата(Число(Сред(КонПериодОтч, 7)), Число(Сред(КонПериодОтч, 4, 2)), Число(Сред(КонПериодОтч, 1, 2))));
			КонецЕсли;
		ИначеЕсли ГодПериодОтч <> Неопределено Тогда // это 3.00
			ГодВыгрузки = Число(ГодПериодОтч);
			ПериодичностьВыгрузки = ПеридичностьПоПризПериодОтч[ПризПериодОтч];
			Если ПериодичностьВыгрузки = Неопределено Тогда
				ОшибкаОпределенияПериода = Истина;
			Иначе
				Если ПризПериодОтч = Неопределено ИЛИ ПризПериодОтч = "" ИЛИ ПризПериодОтч = "0"  ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ПризПериодОтч) Тогда
					ПериодичностьВыгрузки = Перечисления.Периодичность.Год;
					ДатаНачалаПериодаОтчетаВыгрузки = НачалоГода(Дата(ГодПериодОтч, 1, 1));
					ДатаОкончанияПериодаОтчетаВыгрузки = КонецГода(ДатаНачалаПериодаОтчетаВыгрузки);
				Иначе 
					ПризПериодОтчЧисло = ?(ОбщегоНазначения.ТолькоЦифрыВСтроке(ПризПериодОтч), Число(ПризПериодОтч), 1);
					Если НомерПериодОтч = Неопределено ИЛИ НомерПериодОтч = ""
					ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(НомерПериодОтч) ИЛИ ПризПериодОтчЧисло > 3 Тогда
						НомерПериодОтчЧисло = 1;
					Иначе
						НомерПериодОтчЧисло = Число(НомерПериодОтч);
					КонецЕсли;
					НомерМесяцаПо = НомерПериодОтчЧисло * ПризПериодОтчЧисло;
					НарастающимИтогом = СоответствиеКНДПризнакуНарастающегоИтога[КНД];
					Если НарастающимИтогом = Неопределено Тогда
						ОшибкаОпределенияПериода = Истина;
					ИначеЕсли НарастающимИтогом = Истина Тогда
						НомерМесяцаС = 1;
					ИначеЕсли НарастающимИтогом = Ложь Тогда
						СдвигМесяцев = СдвигВМесяцахПоПериодичности[ПериодичностьВыгрузки];
						Если СдвигМесяцев = Неопределено Тогда
							ОшибкаОпределенияПериода = Ложь;
						Иначе
							НомерМесяцаС = НомерМесяцаПо - СдвигМесяцев + 1;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ОшибкаОпределенияПериода Тогда
						ДатаНачалаПериодаОтчетаВыгрузки = НачалоМесяца(Дата(ГодВыгрузки, НомерМесяцаС, 1));
						ДатаОкончанияПериодаОтчетаВыгрузки = КонецМесяца(Дата(ГодВыгрузки, НомерМесяцаПо, 1));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОшибкаОпределенияПериода = Истина;
		КонецЕсли;
		
		Если НЕ ОшибкаОпределенияПериода Тогда
			ПараметрыИмпорта.Вставить("Периодичность", ПериодичностьВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаНачалаПериода", ДатаНачалаПериодаОтчетаВыгрузки);
			ПараметрыИмпорта.Вставить("ДатаОкончанияПериода", ДатаОкончанияПериодаОтчетаВыгрузки);
		КонецЕсли;
		
		// определение вида документа
		ПризнакВидаДокумента	= ПоказателиВыгрузки["ПризВидДок"];
		_НомерКорректировки		= ПоказателиВыгрузки["НомерКорр"];
		ВариантОтчета			= ПоказателиВыгрузки["ВарФОтч"];
		ИдДок					= ПоказателиВыгрузки["ИдДок"];
		ОшибкаОпределенияВерсии = Ложь;
		Если ЭтоАлко201 Тогда
			Если ИдДок <> Неопределено Тогда
				НомерОтчета = Прав(ИдДок, 2);
				Если ОбщегоНазначения.ТолькоЦифрыВСтроке(НомерОтчета) Тогда
					ПараметрыИмпорта.Вставить("ВидДокумента", Число(НомерОтчета) - 1);
				Иначе
					ОшибкаОпределенияВерсии = Ложь;
				КонецЕсли;
			Иначе
				ОшибкаОпределенияВерсии = Ложь;
			КонецЕсли;
		ИначеЕсли ВариантОтчета <> Неопределено Тогда // это формы бух. отчетности 2.01
			ПараметрыИмпорта.Вставить("ВидДокумента", ?(ВариантОтчета <> "999" ИЛИ НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(ВариантОтчета), 0, Число(ВариантОтчета) - 1));
		ИначеЕсли _НомерКорректировки <> Неопределено Тогда
			ПараметрыИмпорта.Вставить("ВидДокумента", ?(ОбщегоНазначения.ТолькоЦифрыВСтроке(_НомерКорректировки), Число(_НомерКорректировки), 0));
		КонецЕсли;
		
		// инициализируем текст на форме
		ПараметрыИмпорта.Вставить("Текст", Текст);
		
		// инициализируем переменные, содержащие двоичные данные и имя файла
		ПараметрыИмпорта.Вставить("ИмяФайла", ?(нрег(Окончание) = ".txt", КороткоеИмяФайла, ИмяБезРасширения));
		ПараметрыИмпорта.Вставить("ДанныеФайла", Новый ХранилищеЗначения(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый СжатиеДанных(9)));
		
	Иначе
		
		Сообщить("Неизвестный формат файла!", СтатусСообщения.Важное);
		Возврат Ложь;
			
	КонецЕсли;
	
	Если НЕ УточнитьПараметрыИмпорта(ПараметрыИмпорта) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// инициализируем реквизиты элемента
	Организация = ПараметрыИмпорта.Организация;
	НалоговыйОрган = ПараметрыИмпорта.НалоговыйОрган;
	ВидОтчета = ПараметрыИмпорта.ВидОтчета;
	ДатаНачала = ПараметрыИмпорта.ДатаНачалаПериода;
	ДатаОкончания = ПараметрыИмпорта.ДатаОкончанияПериода;
	Версия = ПараметрыИмпорта.ВидДокумента;
	Периодичность = ПараметрыИмпорта.Периодичность;
	УстановитьПериодичность();
	
	// инициализируем хранящиеся в памяти данные файла и его имя
	мИмяФайла = ПараметрыИмпорта.ИмяФайла;
	мЭлектронноеПредставление = ПараметрыИмпорта.ДанныеФайла;
	
	// прорисовываем текст выгрузки на форме
	ПредставлениеТекст = ПараметрыИмпорта.Текст;
	
	// если предыдущее наименование было сгенерировано автоматически, то очистим его,
	// чтобы при записи сгенерировались новое.
	Если АвтоНаименование Тогда
		Наименование = "";
	КонецЕсли;
	
	ДатаИмпорта = ТекущаяДата();
	
	Возврат Истина;
	
КонецФункции

Функция УточнитьПараметрыИмпорта(ПараметрыИмпорта)
	
	ФормаПараметров = КонтекстЭДО.ПолучитьФорму("ПараметрыИмпортируемогоЭлектронногоПредставления");
	ФормаПараметров.НачальноеЗначениеВыбора = ПараметрыИмпорта;
	РезультатОткрытия = ФормаПараметров.ОткрытьМодально();
	Если РезультатОткрытия = Неопределено Тогда
		Возврат Ложь;
	Иначе
		ПараметрыИмпорта = РезультатОткрытия;
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ИмпортироватьДокумент()
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл для импорта";
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Фильтр = "Все файлы (*.*)|*.*";
	Если ДиалогВыбора.Выбрать() Тогда
		Возврат ПроанализироватьФайлВыгрузки(ДиалогВыбора.ПолноеИмяФайла);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Процедура ДействияФормыИмпорт(Кнопка)
	
	Если ИмпортироватьДокумент() Тогда
		ОбновитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() И НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		Если НЕ ИмпортироватьДокумент() Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	Иначе
		КонтекстЭДО.ИзвлечьЭлектронноеПредставлениеИзХранилища(?(НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования), Ссылка, ПараметрОбъектКопирования), мИмяФайла, мЭлектронноеПредставление);
		ОтобразитьИмяФайла();
		Если мЭлектронноеПредставление <> Неопределено Тогда
			ВремФайл = ПолучитьИмяВременногоФайла();
			мЭлектронноеПредставление.Получить().Записать(ВремФайл);
			ОбъектЧтениеТекста =  Новый ЧтениеТекста(ВремФайл, ?(нрег(Прав(мИмяФайла, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM));
			ПредставлениеТекст = ОбъектЧтениеТекста.Прочитать();
			ОбъектЧтениеТекста.Закрыть();
			УдалитьФайлы(ВремФайл);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПериодичность();
	ОбновитьФорму(Истина);
	
КонецПроцедуры

Процедура ОбновитьФорму(ТекстОбновился = Ложь)
	
	Если ТекстОбновился Тогда
		ЭтоВыгрузкаВXML = (нрег(Прав(мИмяФайла, 4)) = ".xml");
		Если ЭтоВыгрузкаВXML Тогда
			ЭлементыФормы.ПанельПредставление.ТекущаяСтраница = ЭлементыФормы.ПанельПредставление.Страницы.СтраницаXML;
			ВремФайл = ПолучитьИмяВременногоФайла("xml");
			мВременныеФайлы.Добавить(ВремФайл);
			ОбъектЗаписьТекста = Новый ЗаписьТекста(ВремФайл, КодировкаТекста.ANSI);
			ОбъектЗаписьТекста.Записать(ПредставлениеТекст);
			ОбъектЗаписьТекста.Закрыть();
			ЭлементыФормы.ПредставлениеXML.Перейти(ВремФайл);
		Иначе
			ЭлементыФормы.ПанельПредставление.ТекущаяСтраница = ЭлементыФормы.ПанельПредставление.Страницы.СтраницаТекст;
		КонецЕсли;
	КонецЕсли;
	Год		= Год(ДатаНачала);
	Период	= ОпределитьПериод();
	//Период	= ОпределитьПериод();
	
	ЭлементыФормы.НомерКорректировки.Доступность = (Версия <> 0);
	Если Версия = 0 Тогда
		ВидДокумента = 0;
		ЭлементыФормы.НомерКорректировки.Доступность = Ложь;
	Иначе
		ВидДокумента = 1;
		НомерКорректировки = Версия;
		ЭлементыФормы.НомерКорректировки.Доступность = Истина;
	КонецЕсли;
	
	ИмяФайла = мИмяФайла;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Состояние("Удаление временных файлов...");
	Для Каждого ИмяВременногоФайлаВыгрузкиВXML Из мВременныеФайлы Цикл
		ОбъектФайл = Новый Файл(ИмяВременногоФайлаВыгрузкиВXML);
		Если ОбъектФайл.Существует() Тогда
			Попытка
				УдалитьФайлы(ИмяВременногоФайлаВыгрузкиВXML);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьПериод()
	
	МесяцС = Месяц(ДатаНачала);
	МесяцПо = Месяц(ДатаОкончания);
	РезультатПоиска = Периоды.НайтиСтроки(Новый Структура("МесяцНачалаПериода, МесяцОкончанияПериода, Периодичность", МесяцС, МесяцПо, Периодичность));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатПоиска[0];
	КонецЕсли;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	Версия = ВидДокумента * НомерКорректировки;
	ВремФайл = ПолучитьИмяВременногоФайла();
	ОбъектЗаписьТекста = Новый ЗаписьТекста(ВремФайл, ?(ЭлементыФормы.ПанельПредставление.ТекущаяСтраница = ЭлементыФормы.ПанельПредставление.Страницы.СтраницаXML, КодировкаТекста.ANSI, КодировкаТекста.OEM));
	ОбъектЗаписьТекста.Записать(ПредставлениеТекст);
	ОбъектЗаписьТекста.Закрыть();
	мЭлектронноеПредставление = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл), Новый СжатиеДанных(9));
	УдалитьФайлы(ВремФайл);
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииВерсии();
	
КонецПроцедуры

Процедура ПриИзмененииВерсии()
	
	Версия = ВидДокумента * НомерКорректировки;
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ПолеВыбораВидДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	Элемент.Значение = 0;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПериодичностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.Периодичность.Месяц);
	СписокВыбора.Добавить(Перечисления.Периодичность.Квартал);
	Если Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти("Полугодие") <> Неопределено Тогда
		СписокВыбора.Добавить(Перечисления.Периодичность.Полугодие);
	КонецЕсли;
	СписокВыбора.Добавить(Перечисления.Периодичность.Год);
	
	РезультатВыбора = ВыбратьИзСписка(СписокВыбора, , СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если РезультатВыбора <> Неопределено Тогда
		УстановитьПериодичность(РезультатВыбора.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура НомерКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииВерсии();
	
КонецПроцедуры

Процедура ПериодичностьОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьПериодичность(Элемент.Значение);
	
КонецПроцедуры

Процедура ПериодПриИзменении(Элемент)
	
	ПриИзмененииЭлементовПериода();
	
КонецПроцедуры

Процедура ГодПриИзменении(Элемент)
	
	ПриИзмененииЭлементовПериода();
	
КонецПроцедуры

Процедура ПриИзмененииЭлементовПериода()
	
	ПериодСтрокаТЗ = Период;
	Если НЕ ЗначениеЗаполнено(ПериодСтрокаТЗ) Тогда
		ПустаяДата = '00010101000000';
		ДатаНачала = ПустаяДата;
		ДатаОкончания = ПустаяДата;
	Иначе
		ДатаНачала = НачалоМесяца(Дата(Год, ПериодСтрокаТЗ.МесяцНачалаПериода, 1));
		ДатаОкончания = КонецМесяца(Дата(Год, ПериодСтрокаТЗ.МесяцОкончанияПериода, 1));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОтправить(Кнопка)
	
	Если Модифицированность и Вопрос("Для продолжения необходимо сохранить введеную информацию." + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Попытка
		РезультатЗаписи = ЗаписатьВФорме();
	Исключение
		РезультатЗаписи = Ложь;
	КонецПопытки;
	Если НЕ РезультатЗаписи Тогда
		Предупреждение("Во время сохранения произошли ошибки! Продолжение невозможно.");
		Возврат;
	КонецЕсли;
	КонтекстЭДО.ОтправкаРегламентированногоОтчета(Ссылка, СоответствиеИмениКнопкиКодуДействия[Кнопка.Имя]);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Модифицированность = ЭтоНовый();
	
КонецПроцедуры

Процедура ДействияФормыЦиклыОбмена(Кнопка)
	
	Если ЭтоНовый() Тогда
		Предупреждение("Элемент еще не сохранялся.
		|Циклы обмена могут быть связаны только с сохраненными элементами.");
		Возврат;
	КонецЕсли;
	
	КонтекстЭДО.ПолучитьФорму("УправлениеОбменом").Открыть();
	Оповестить("Показать циклы обмена", Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ МАШИНОЧИТАЕМЫХ ФОРМ ОТЧЕТА
//

Процедура ОсновныеДействияФормыПросмотр(Кнопка)
	
	Если мЭлектронноеПредставление = Неопределено Тогда
		Предупреждение("Электронное представление не определено!");
		Возврат;
	КонецЕсли;
	
	ВремФайл = ПолучитьИмяВременногоФайла();
	Попытка
		мЭлектронноеПредставление.Получить().Записать(ВремФайл);
	Исключение
		Предупреждение("Не удалось выгрузить электронное представление отчета во временный файл!" + Символы.ПС + Символы.ПС + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	// извлекаем параметры сформированного файла выгрузки
	СтруктураПараметров = СформироватьСтруктуруПараметровФайлаВыгрузки(ВремФайл);
	КаталогВремФайлов = КаталогВременныхФайлов();
	КаталогВремФайлов = ?(Прав(КаталогВремФайлов, 1) = "\", КаталогВремФайлов, КаталогВремФайлов + "\");
	ВремКаталог = КаталогВремФайлов + Строка(Новый УникальныйИдентификатор) + "\";
	СоздатьКаталог(ВремКаталог);
	
	// пытаемся создать отчет заданного вида
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ОбъектОтчет = РегламентированнаяОтчетность.РеглОтчеты(ВидОтчета.ИсточникОтчета, Истина);
	КонецЕсли;
	
	// выгружаем во временный каталог шаблоны печати, соответствующие сформированному файлу выгрузки
	ВыгрузитьШаблоныПечатиВКаталог(ОбъектОтчет, ВремКаталог, СтруктураПараметров["КНД"], ?(СтруктураПараметров["ЭтоXML"], СтруктураПараметров["ВерсФорм"], СтруктураПараметров["ВерФОтч"]));
	
	// пытаемся создать объект для формирования машиночитаемой формы
	ТаксДокПринт = Неопределено;
	Попытка
		ТаксДокПринт = Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
	Исключение
		// если не удалось создать объект, то спрашиваем у пользователя, хочет ли он установить компоненту
		Если Вопрос("Для формирования машиночитаемой формы необходимо установить в системе вспомогательную компоненту.
					|Установить компоненту сейчас?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Иначе
			// если не удалось создать объект и пользователь не против, то запускаем установку компоненты
			Если НЕ УстановитьКомпонентуПечатиМашиночитаемыхФорм(Истина) Тогда
				Предупреждение("Формирование машиночитаемой формы прервано: в системе не установлена вспомогательная компонента.");
			Иначе
				ТаксДокПринт = Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
			КонецЕсли;
		КонецЕсли;
	КонецПопытки;
	
	Если ТаксДокПринт <> Неопределено Тогда
		Попытка
			ТаксДокПринт.PrintTiffFolder = ВремКаталог;
			ТаксДокПринт.PreviewFile1C(ВремФайл, 0);
			Результат = Истина;
		Исключение
			ОбработатьОшибкуМодуляПечати();
			ТаксДокПринт = Неопределено;
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ТаксДокПринт = Неопределено;
	УдалитьВременныйФайлИлиКаталог(ВремКаталог);
	УдалитьВременныйФайлИлиКаталог(ВремФайл);
	
КонецПроцедуры

Процедура ОбработатьОшибкуМодуляПечати()
	
	ОписаниеОшибки = СокрЛП(ОписаниеОшибки());
	КодОшибки = Сред(ОписаниеОшибки, Найти(ОписаниеОшибки, "0x"), 10);
	
	ТекстПредупреждения = "";
	Если КодОшибки = "0x80040004" ИЛИ КодОшибки = "0x80040005" Тогда
		ТекстПредупреждения = "Не удалось установить параметр печати!";
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = "При попытке печати в компоненте печати возникла неизвестная ошибка!";
	ИначеЕсли КодОшибки = "0x80040032" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти файл выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x80040033" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось получить доступ к файлу выгрузки отчета!";
	ИначеЕсли КодОшибки = "0x8004000A" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000B" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать формат файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004000F" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать версию формата выгрузки из текста выгрузки!";
	ИначеЕсли КодОшибки = "0x80040010" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось распознать форму по КНД в файле выгрузки!";
	ИначеЕсли КодОшибки = "0x80040014" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось сформировать машиночитаемую форму по причине некорректного файла выгрузки!";
	ИначеЕсли КодОшибки = "0x8004003C" Тогда
		Если Вопрос("Отсутствует шаблон для формирования машиночитаемой формы!
						|Возможно, необходимо зарегистрировать в информационной базе внешний шаблон.
						|Показать список зарегистрированных шаблонов?",
						 РежимДиалогаВопрос.ДаНет
						,
						,
						, "Ошибка при формировании машиночитаемой формы") = КодВозвратаДиалога.Да Тогда
			РегистрыСведений.ШаблоныПечатиМашиночитаемыхФорм.ПолучитьФормуСписка().Открыть();
		КонецЕсли;
		Возврат;
	ИначеЕсли КодОшибки = "0x80040046" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти каталог с шаблонами для печати!";
	ИначеЕсли КодОшибки = "0x80050035" Тогда
		ТекстПредупреждения = "Не найдена одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll)!";
	ИначеЕсли КодОшибки = "0x800501C5" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), подменена или устарела!";
	ИначеЕсли КодОшибки = "0x80050030" Тогда
		ТекстПредупреждения = "Одна из вспомогательных библиотек, используемых компонентой печати (GNIVCPDOC.dll), повреждена!";
	ИначеЕсли КодОшибки = "0x80040064" Тогда // печать прервана
		Возврат;
	ИначеЕсли КодОшибки = "0x80040001" Тогда
		ТекстПредупреждения = "Компоненте печати не удалось найти каталог с шаблонами для печати!";
	Иначе
		ТекстПредупреждения = ОписаниеОшибки;
	КонецЕсли;

	ТекстПредупреждения = ТекстПредупреждения + ?(ПустаяСтрока(ТекстПредупреждения), "", Символы.ПС + Символы.ПС) +
							"Возможно, необходимо переустановить компоненту или вспомогательные библиотеки, используемые ей.
							|Хотите переустановить компоненту сейчас?";
	Если Вопрос(ТекстПредупреждения,
				РежимДиалогаВопрос.ДаНет,
				,
				,
				"Ошибка при формировании машиночитаемой формы") = КодВозвратаДиалога.Да Тогда
		Если Вопрос("Сейчас будет запущена программа установки компоненты печати.
						|Возможно, в ходе установки потребуется завершение сеанса работы ""1С:Предприятие"".
						|Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			УстановитьКомпонентуПечатиМашиночитаемыхФорм(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива)
	
	Попытка
		УдалитьФайлы(ВремФайлДистрибутива);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция УстановитьКомпонентуПечатиМашиночитаемыхФорм(ЖдатьЗавершения = Истина)
	
	МетаданныеМакета = Метаданные.Обработки.ОбщиеОбъектыРегламентированнойОтчетности.Макеты.ДистрибутивКомпонентыПечатиМашиночитаемыхФорм;
	
	// сохраняем дистрибутив во временный файл с расширением = исходное имя файла дистрибутива
	ВремФайлДистрибутива = ПолучитьИмяВременногоФайла(МетаданныеМакета.Синоним);
	ДвоичныеДанныеДистрибутива = Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьМакет(МетаданныеМакета.Имя);
	Попытка
		ДвоичныеДанныеДистрибутива.Записать(ВремФайлДистрибутива);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Предупреждение("Не удалось сохранить дистрибутив компоненты печати машиночитаемых форм во временный файл!" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// запускаем инсталляцию
	Попытка
		ЗапуститьПриложение(ВремФайлДистрибутива, , ЖдатьЗавершения);
	Исключение
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Предупреждение("При попытке установки компоненты печати машиночитаемых форм произошла ошибка!" + Символы.ПС + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	// возвращаем признак
	Если ЖдатьЗавершения Тогда
		УдалитьВременныйФайлДистрибутива(ВремФайлДистрибутива);
		Возврат КомпонентаПечатиМашиночитаемыхФормДоступна();
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьВременныйФайлИлиКаталог(Объект)
	
	Попытка
		УдалитьФайлы(Объект);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция ВыгрузитьШаблоныПечатиВКаталог(Объект, ВремКаталог, Знач КНД = Неопределено, Знач ВерсияФорматаВыгрузки = Неопределено)
	
	ТочныеПараметрыШаблонаЗаданы = (ЗначениеЗаполнено(КНД) И ЗначениеЗаполнено(ВерсияФорматаВыгрузки));
	
	// если точные параметры заданы, то сначала пытаемся извлечь внутренний шаблон
	КоличествоВыгруженныхШаблонов = 0;
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		ИспользуемыйШаблон = Неопределено;
		Пока СтрДлина(ВерсияФорматаВыгрузки) < 7 Цикл
			ВерсияФорматаВыгрузки = ВерсияФорматаВыгрузки + "0";
		КонецЦикла;
		ПрефиксИмениШаблона = СокрЛП(КНД + "_" + ВерсияФорматаВыгрузки);
		ПрефиксИмениМакетаШаблона = "МБ_" + СтрЗаменить(ПрефиксИмениШаблона, ".", "_");
	Иначе
		ПрефиксИмениМакетаШаблона = "МБ_";
	КонецЕсли;
	
	Если Объект <> Неопределено Тогда
		Попытка
			МакетыОтчета = Объект.ПолучитьФорму().Метаданные().Макеты;
			Для Каждого МакетОтчета Из МакетыОтчета Цикл
				Если МакетОтчета.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ДвоичныеДанные
				И Лев(нрег(МакетОтчета.Имя), СтрДлина(ПрефиксИмениМакетаШаблона)) = нрег(ПрефиксИмениМакетаШаблона) Тогда
					СинонимМакета = СокрЛП(МакетОтчета.Синоним);
					ВхождениеПробела = Найти(СинонимМакета, " ");
					ИмяФайлаШаблона = ?(ВхождениеПробела = 0, СинонимМакета, Лев(СинонимМакета, СтрДлина(ВхождениеПробела - 1)));
					Попытка
						Объект.ПолучитьМакет(МакетОтчета.Имя).Записать(ВремКаталог + ИмяФайлаШаблона);
						КоличествоВыгруженныхШаблонов = КоличествоВыгруженныхШаблонов + 1;
					Исключение
						Сообщить("Не удалось выгрузить шаблон машиночитаемой формы """ + ИмяФайлаШаблона + """ во временный каталог!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Внимание);
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	// выгружаем внешние шаблоны
	Если ТочныеПараметрыШаблонаЗаданы Тогда
		РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ПрефиксИмениШаблона + "%");
		Если КоличествоВыгруженныхШаблонов = 0 И РезультатЗапроса.Пустой() Тогда
			РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
		КонецЕсли;
	Иначе
		РезультатЗапроса = ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм();
	КонецЕсли;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				Выборка.Шаблон.Получить().Записать(ВремКаталог + Выборка.ИмяФайлаШаблона);
			Исключение
				Сообщить("Не удалось выгрузить шаблон машиночитаемой формы """ + Выборка.ИмяФайлаШаблона + """ во временный каталог!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьЗапросКРегиструШаблоновПечатиМашиночитаемыхФорм(ИмяФайлаШаблона = Неопределено)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона,
	                      |	ШаблоныПечатиМашиночитаемыхФорм.Шаблон
	                      |ИЗ
	                      |	РегистрСведений.ШаблоныПечатиМашиночитаемыхФорм КАК ШаблоныПечатиМашиночитаемыхФорм");
	Если ИмяФайлаШаблона <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
						  |ГДЕ
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона ПОДОБНО &ИмяФайлаШаблона
						  |УПОРЯДОЧИТЬ ПО
						  |	ШаблоныПечатиМашиночитаемыхФорм.ИмяФайлаШаблона УБЫВ";
		Запрос.УстановитьПараметр("ИмяФайлаШаблона", ИмяФайлаШаблона);
	КонецЕсли;
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция СформироватьСтруктуруПараметровФайлаВыгрузки(ФайлВыгрузки)

	ПоказателиВыгрузки = Новый Соответствие;
	ОбъектЧтениеXML = Новый ЧтениеXML;
	Попытка
		ОбъектЧтениеXML.ОткрытьФайл(ФайлВыгрузки);
		ОбъектЧтениеXML.ИгнорироватьПробелы = Ложь;
		Пока ОбъектЧтениеXML.Прочитать() Цикл
			Если ОбъектЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ОбъектЧтениеXML.Имя <> "СодПерСвед" Тогда
				Пока ОбъектЧтениеXML.ПрочитатьАтрибут() Цикл
					ПоказателиВыгрузки.Вставить(ОбъектЧтениеXML.Имя, ОбъектЧтениеXML.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;	
		ОбъектЧтениеXML.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Истина);
	Исключение
		Текст = Новый ЧтениеТекста;
		Текст.Открыть(ФайлВыгрузки, КодировкаТекста.OEM);
		ТекСтр = Текст.ПрочитатьСтроку();
		Пока ТекСтр <> Неопределено Цикл
			ТекСтр = СокрЛП(ТекСтр);
			ВхождениеДвоеточия = Найти(ТекСтр, ":");
			Если ВхождениеДвоеточия <> 0 Тогда
				ПоказателиВыгрузки.Вставить(СокрЛП(Лев(ТекСтр, ВхождениеДвоеточия - 1)), СокрЛП(Сред(ТекСтр, ВхождениеДвоеточия + 1)));
			КонецЕсли;
			ТекСтр = Текст.ПрочитатьСтроку();
		КонецЦикла;
		Текст.Закрыть();
		ПоказателиВыгрузки.Вставить("ЭтоXML", Ложь);
	КонецПопытки;
	Возврат ПоказателиВыгрузки;

КонецФункции

Функция КомпонентаПечатиМашиночитаемыхФормДоступна()
	
	Попытка
		Объект = Новый COMОбъект("TAXDOCPrt.TAXDOCPrint");
		Объект = Неопределено;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура НадписьРедактироватьНажатие(Элемент)
	
	Ответ = КонтекстЭДО.ВопросПредупреждение("ИЗМЕНЯЙТЕ ФАЙЛ ОТЧЕТНОСТИ ТОЛЬКО ЕСЛИ ВЫ УВЕРЕНЫ В СВОИХ ДЕЙСТВИЯХ И РУКОВОДСТВУЕТЕСЬ ДОКУМЕНТОМ, ОПРЕДЕЛЯЮЩИМ ФОРМАТ ПРЕДСТАВЛЕНИЯ!
	|
	|НЕСООТВЕТСТВИЕ ФАЙЛА ВЫГРУЗКИ ФОРМАТУ ПРЕДСТАВЛЕНИЯ ИЛИ
	|НЕСООТВЕТСТВИЕ ДАННЫХ В ОТЧЕТЕ ДАННЫМ В ФАЙЛЕ ВЫГРУЗКИ МОГУТ ПРИВЕСТИ К НЕПРЕДСКАЗУЕМЫМ ПОСЛЕДСТВИЯМ!
	|
	|ВЫ УВЕРЕНЫ, ЧТО ХОТИТЕ ПРОДОЛЖИТЬ?", 
	"Нет, я не уверен(а) в своих действиях.",
	"Да, я уверен(а) в необходимости редактирования и руководствуюсь форматом представления.");
	
	Если НЕ Ответ Тогда
		Возврат;
	КонецЕсли;
	
	КодировкаТекстаВыгрузки = ?(нрег(Прав(мИмяФайла, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM);
	ВремФайл = ПолучитьИмяВременногоФайла();
	мЭлектронноеПредставление.Получить().Записать(ВремФайл);
	ОбъектЧтениеТекста = Новый ЧтениеТекста(ВремФайл, КодировкаТекстаВыгрузки);
	Текст = ОбъектЧтениеТекста.Прочитать();
	ОбъектЧтениеТекста.Закрыть();
	УдалитьФайлы(ВремФайл);
	
	ФормаРедактирования = КонтекстЭДО.ПолучитьФорму("РедактированиеФайлаВыгрузки");
	ФормаРедактирования.Текст = Текст;
	ФормаРедактирования.ИмяФайла = мИмяФайла;
	Если ФормаРедактирования.ОткрытьМодально() Тогда
		Ответ = Вопрос("Заменить файл отчетности?
					|Действие невозможно будет отменить!", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ПустаяСтрока(мИмяФайла) И ВРЕГ(Прав(мИмяФайла, 3)) <> ВРЕГ(Прав(ФормаРедактирования.ИмяФайла, 3)) Тогда
			ТекстВопроса = "Вы изменили расширение файла выгрузки.
							|
							|Программа определяет кодировку текста в файле выгрузки по расширению его имени.
							|Некорректно заданное расширение файла выгрузки может привести к некорректной определению программой кодировки его содержимого.
							|
							|Сохранить произведенные изменения?";
			Если НЕ КонтекстЭДО.ВопросПредупреждение(ТекстВопроса,
										"Нет. Я не уверен(а).",
										"Да. Я уверен(а) в том, что расширение файла следует изменить.") Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ВремФайл = ПолучитьИмяВременногоФайла();
		ОбъектЗаписьТекста = Новый ЗаписьТекста(ВремФайл, ?(нрег(Прав(мИмяФайла, 4)) = ".xml", КодировкаТекста.ANSI, КодировкаТекста.OEM));
		ОбъектЗаписьТекста.Записать(ФормаРедактирования.Текст);
		ОбъектЗаписьТекста.Закрыть();
		мЭлектронноеПредставление = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ВремФайл), Новый СжатиеДанных(9));
		ПредставлениеТекст = ФормаРедактирования.Текст;
		УдалитьФайлы(ВремФайл);
		мИмяФайла = ФормаРедактирования.ИмяФайла;
		ОбновитьФорму(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПроверить(Кнопка)
	
	Если Модифицированность Тогда
		Если Вопрос("Перед проверкой необходимо сохранить изменения?
					|Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Если НЕ ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КонтекстЭДО.ПроверитьОтчетСИспользованиемСервисаОнлайнПроверки(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Опрос форм" И Параметр.Ключ = Ссылка Тогда
		Параметр.Форма = ЭтаФорма;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

мВременныеФайлы = Новый Массив;

ПериодичностьПолугодиеДоступна = Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти("Полугодие") <> Неопределено;

Периоды = Новый ТаблицаЗначений;
Периоды.Колонки.Добавить("Периодичность");
Периоды.Колонки.Добавить("МесяцНачалаПериода");
Периоды.Колонки.Добавить("МесяцОкончанияПериода");
Периоды.Колонки.Добавить("Представление");

// год
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Год;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "Год";

// полугодие

Если ПериодичностьПолугодиеДоступна Тогда
	
	НовСтр = Периоды.Добавить();
	НовСтр.Периодичность		= Перечисления.Периодичность.Полугодие;
	НовСтр.МесяцНачалаПериода	= 1;
	НовСтр.МесяцОкончанияПериода= 6;
	НовСтр.Представление		= "I полугодие";
	
	НовСтр = Периоды.Добавить();
	НовСтр.Периодичность		= Перечисления.Периодичность.Полугодие;
	НовСтр.МесяцНачалаПериода	= 1;
	НовСтр.МесяцОкончанияПериода= 12;
	НовСтр.Представление		= "I - II полугодие";
	
	НовСтр = Периоды.Добавить();
	НовСтр.Периодичность		= Перечисления.Периодичность.Полугодие;
	НовСтр.МесяцНачалаПериода	= 7;
	НовСтр.МесяцОкончанияПериода= 12;
	НовСтр.Представление		= "II полугодие";
	
КонецЕсли;

// квартал
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 3;
НовСтр.Представление		= "I квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "I - II квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "I - III квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "I - IV квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 4;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "II квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 7;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "III квартал";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Квартал;
НовСтр.МесяцНачалаПериода	= 10;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "IV квартал";

// месяц
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 1;
НовСтр.Представление		= "январь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 2;
НовСтр.Представление		= "январь - февраль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 3;
НовСтр.Представление		= "январь - март";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 4;
НовСтр.Представление		= "январь - апрель";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 5;
НовСтр.Представление		= "январь - май";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "январь - июнь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 7;
НовСтр.Представление		= "январь - июль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 8;
НовСтр.Представление		= "январь - август";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "январь - сентябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 10;
НовСтр.Представление		= "январь - октябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 11;
НовСтр.Представление		= "январь - ноябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 1;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "январь - декабрь";

//
НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 2;
НовСтр.МесяцОкончанияПериода= 2;
НовСтр.Представление		= "февраль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 3;
НовСтр.МесяцОкончанияПериода= 3;
НовСтр.Представление		= "март";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 4;
НовСтр.МесяцОкончанияПериода= 4;
НовСтр.Представление		= "апрель";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 5;
НовСтр.МесяцОкончанияПериода= 5;
НовСтр.Представление		= "май";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 6;
НовСтр.МесяцОкончанияПериода= 6;
НовСтр.Представление		= "июнь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 7;
НовСтр.МесяцОкончанияПериода= 7;
НовСтр.Представление		= "июль";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 8;
НовСтр.МесяцОкончанияПериода= 8;
НовСтр.Представление		= "август";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 9;
НовСтр.МесяцОкончанияПериода= 9;
НовСтр.Представление		= "сентябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 10;
НовСтр.МесяцОкончанияПериода= 10;
НовСтр.Представление		= "октябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 11;
НовСтр.МесяцОкончанияПериода= 11;
НовСтр.Представление		= "ноябрь";

НовСтр = Периоды.Добавить();
НовСтр.Периодичность		= Перечисления.Периодичность.Месяц;
НовСтр.МесяцНачалаПериода	= 12;
НовСтр.МесяцОкончанияПериода= 12;
НовСтр.Представление		= "декабрь";

НомерКорректировки = 1;
Год = Год(ТекущаяДата());

ПеридичностьПоПризПериодОтч = Новый Соответствие;
ПеридичностьПоПризПериодОтч.Вставить("0", Перечисления.Периодичность.Год);
ПеридичностьПоПризПериодОтч.Вставить("1", Перечисления.Периодичность.Месяц);
ПеридичностьПоПризПериодОтч.Вставить("3", Перечисления.Периодичность.Квартал);
ПеридичностьПоПризПериодОтч.Вставить("6", Перечисления.Периодичность.Квартал);
ПеридичностьПоПризПериодОтч.Вставить("9", Перечисления.Периодичность.Квартал);

СдвигВМесяцахПоПериодичности = Новый Соответствие;
СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Месяц, 1);
СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Квартал, 3);
Если ПериодичностьПолугодиеДоступна Тогда
	СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Полугодие, 6);
КонецЕсли;
СдвигВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Год, 12);

СоответствиеИмениКнопкиКодуДействия = Новый Соответствие;
СоответствиеИмениКнопкиКодуДействия.Вставить("Отправить", 2);
СоответствиеИмениКнопкиКодуДействия.Вставить("ВКонвертИПодписать", 1);
СоответствиеИмениКнопкиКодуДействия.Вставить("ВКонверт", 0);

СоответствиеПериодОтчМесяцуОкончания = Новый Соответствие;
СоответствиеПериодОтчМесяцуОкончания.Вставить("01", 1);
СоответствиеПериодОтчМесяцуОкончания.Вставить("02", 2);
СоответствиеПериодОтчМесяцуОкончания.Вставить("03", 3);
СоответствиеПериодОтчМесяцуОкончания.Вставить("04", 4);
СоответствиеПериодОтчМесяцуОкончания.Вставить("05", 5);
СоответствиеПериодОтчМесяцуОкончания.Вставить("06", 6);
СоответствиеПериодОтчМесяцуОкончания.Вставить("07", 7);
СоответствиеПериодОтчМесяцуОкончания.Вставить("08", 8);
СоответствиеПериодОтчМесяцуОкончания.Вставить("09", 9);
СоответствиеПериодОтчМесяцуОкончания.Вставить("10", 10);
СоответствиеПериодОтчМесяцуОкончания.Вставить("11", 11);
СоответствиеПериодОтчМесяцуОкончания.Вставить("12", 12);
СоответствиеПериодОтчМесяцуОкончания.Вставить("21", 3);
СоответствиеПериодОтчМесяцуОкончания.Вставить("22", 6);
СоответствиеПериодОтчМесяцуОкончания.Вставить("23", 9);
СоответствиеПериодОтчМесяцуОкончания.Вставить("24", 12);
СоответствиеПериодОтчМесяцуОкончания.Вставить("31", 6);
СоответствиеПериодОтчМесяцуОкончания.Вставить("32", 12);
СоответствиеПериодОтчМесяцуОкончания.Вставить("33", 9);
СоответствиеПериодОтчМесяцуОкончания.Вставить("34", 12);

СоответствиеПериодОтчПериодичности = Новый Соответствие;
СоответствиеПериодОтчПериодичности.Вставить("01", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("02", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("03", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("04", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("05", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("06", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("07", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("08", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("09", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("10", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("11", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("12", Перечисления.Периодичность.Месяц);
СоответствиеПериодОтчПериодичности.Вставить("21", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("22", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("23", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("24", Перечисления.Периодичность.Квартал);
Если ПериодичностьПолугодиеДоступна Тогда
	СоответствиеПериодОтчПериодичности.Вставить("31", Перечисления.Периодичность.Полугодие);
	СоответствиеПериодОтчПериодичности.Вставить("32", Перечисления.Периодичность.Полугодие);
КонецЕсли;
СоответствиеПериодОтчПериодичности.Вставить("33", Перечисления.Периодичность.Квартал);
СоответствиеПериодОтчПериодичности.Вставить("34", Перечисления.Периодичность.Год);
