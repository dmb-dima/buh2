// Используется для учета порядкового номера формулы, при фильтрации данных.
Перем мПорядковыйНомерФормулы;

// Переменная с тектсом о выполненном соотношении.
Перем мСоотношениеВыполнено;
Перем мСоотношениеНеВыполнено;
Перем мТаблицаСоотношений;
Перем мСостояниеФормулы;
Перем мРезультатПоУсловию;

// Таблица, для хранения таблицы формул.
Перем мТаблицаФормул;

// Процедура формирует и выводит в поле табличного документа на форме расшифровку значения показателя,
// соответствующего текущей ячейке активного поля табличного документа вызывающей формы (задана в переменной модуля "Форма").
// В случае, если для показателя, соответсвующего текущей активной ячейки расшифровка неопределена, то расшифровка 
// выводится для всех показателей, для которых расшифровка определена.
// Процедура вызывается из модуля формы отчета.
//
// Параметры:
//  РежимРаботы      - Истина - интерактивный режим, ложь формирует кол-во ошибок.
//
Процедура Сформировать(Знач РежимРаботы = Истина) Экспорт

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(СохраненныйДокумент.ВыбраннаяФорма) Тогда

		мИнтерактивныйРежим = РежимРаботы;
		// В том случае, если в реквизите Форма ничего не указано, означает, что вызов произведен не из декларации, а например из ЗУПа, где
		// нет возможности записать ссылку на форму отчета. Тогда генерируем.

		Если НЕ ТипЗнч(Форма) = Тип("Форма") Тогда
			мФормаОтчета = Отчеты[СохраненныйДокумент.ИсточникОтчета].ПолучитьФорму(СохраненныйДокумент.ВыбраннаяФорма);
			мФормаОтчета.ФормироватьСтруктуруСвойствСтраниц();

			// мТаблицаСоставПоказателей
			мФормаОтчета.ЗаполнитьНачальныеНастройки();
			мТаблицаСоставПоказателей = мФормаОтчета.мТаблицаСоставПоказателей;
		Иначе
			мТаблицаСоставПоказателей = Форма.мТаблицаСоставПоказателей.Скопировать();
			мФормаОтчета = Форма;
		КонецЕсли;

		Попытка
			ПериодичностьОтчета = СохраненныйДокумент.Периодичность;
		Исключение
			ПериодичностьОтчета = Неопределено;
		КонецПопытки;

		// мТекстДляЗаголовочнойЧасти = мФормаОтчета.ЗаголовокРегламентированногоОтчета(СохраненныйДокумент.ДатаНачала, СохраненныйДокумент.ДатаОкончания, ПериодичностьОтчета);
		мТекстДляЗаголовочнойЧасти = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(СохраненныйДокумент);

		СформироватьТаблицыНастроек();

		// Попытка, т.к. в отчетах может не быть налогового периода, пример авансы по ЕСН, только отчетные периоды.
		Попытка
			мЭтоНалоговыйПериод = мФормаОтчета.ЭтоНалоговыйПериод(СохраненныйДокумент.Организация, СохраненныйДокумент.ДатаПодписи, СохраненныйДокумент.ДатаОкончания);
		Исключение
			мЭтоНалоговыйПериод = Неопределено;
		КонецПопытки;

		Если мИнтерактивныйРежим Тогда
			Открыть();
		Иначе
			// Подготовим таблицу, для сохранения ошибок.
			мТаблицаОшибокКС.Очистить();
		Конецесли;

		КонтрольныеСоотношения();

	Иначе

		Сообщить("Ошибка: в сохраненной структуре декларации не заполнен параметр ВыбраннаяФорма.");

	КонецЕсли;

КонецПроцедуры // Сформировать

// ВывестиШапкуОтчета
//
Процедура ВывестиШапкуОтчета()

	мТаблицаСоотношений.Очистить();
	ОбластьЗаголовок = ЭтотОбъект.ПолучитьМакет("Настройки").ПолучитьОбласть("Заголовок");
	мТаблицаСоотношений.Вывести(ОбластьЗаголовок);
	мТаблицаСоотношений.Области.Заг.Текст = мТекстДляЗаголовочнойЧасти;

КонецПроцедуры // ВывестиШапкуОтчета

// Показать
//  Параметры:
// ПересобратьИСнятьФлОшибок - если Истина, тогда будет осуществлен пересбор данных и флаг
//                 Выводить только ошибки - будет снят. Такой режим требуется для случая, когда
//                 при первом тести ошибок не найдено, но пользователь хочет посмотреть форму
//                 с формулами которые проверялись.
//
Процедура Показать(ПересобратьИСнятьФлОшибок = Неопределено) Экспорт

	мПересобратьИСнятьФлОшибок = ПересобратьИСнятьФлОшибок;
	Если мПересобратьИСнятьФлОшибок <> Неопределено И мПересобратьИСнятьФлОшибок = Истина Тогда
		//мИнтерактивныйРежим = Истина;
		Сформировать(Истина);
		// Открыть();
		// КонтрольныеСоотношения();
		Возврат;
	КонецЕсли;

	Если мИнтерактивныйРежим Тогда
		Возврат;
	КонецЕсли;

	ВывестиШапкуОтчета();

	СтрокаДанных1 = ПолучитьМакет("Настройки").ПолучитьОбласть("СтрокаДанных1");

	мИнтерактивныйРежим = Истина;
	// Признак активизации составной формулы "Если".
	ВключеноУсловие = Ложь;
	// Считчик подформул в "Если";
	КолвоСтрокФормулы = 0;
	Для Каждого Стр Из мТаблицаОшибокКС Цикл

		// В случае, если в макете идет секция "Если" при уже включенной "Если", это означает
		// что друг за другом идут подряд две составные формулы "Если", соответственно необходимо
		// обеспечение закрытия прошлой групиировки от Если, и открытия новой группировки.
		// КолвоСтрокФормулы сбросить на 1.
		Если (Найти(НРег(Стр.Расшифровка), "если ") > 0) И (ВключеноУсловие) Тогда
			Если КолвоСтрокФормулы > 2 Тогда
				// закроем прошлый Если...
				ЭлементыФормы.ПолеТабличногоДокументаКС.ЗакончитьГруппуСтрок();
			КонецЕсли;
			// откроем новую группировку.
			ЭлементыФормы.ПолеТабличногоДокументаКС.НачатьГруппуСтрок(, Ложь);
			КолвоСтрокФормулы = 1;
		КонецЕсли;

		// Если встретилась секция "Если" и она первая, т.е. открытой секции нет, тогда
		// Откроем группировку, возведем признак и увеличим кол-во строк формул до 1.
		Если (Найти(НРег(Стр.Расшифровка), "если ") > 0) И (НЕ ВключеноУсловие) Тогда
			ВключеноУсловие = Истина;
			КолвоСтрокФормулы = 1;
		КонецЕсли;

		// Откроем группировку, если кол-во строк формул = 2, т.е. со следующей подформулы в "Если".
		Если КолвоСтрокФормулы = 2 Тогда
			ЭлементыФормы.ПолеТабличногоДокументаКС.НачатьГруппуСтрок(, Ложь);
		КонецЕсли;

		// Если в номере нет точки, означает что формула не составная, и включено условие было, а также
		// в в условии больше 1 формулы, тогда закроем группировку, счатая, что составная формула
		// закончилась.
		Если ((Найти(Стр.Номер, ".") = 0) И (ВключеноУсловие) И (КолвоСтрокФормулы > 1)) Тогда
			// Закроем группировку.
			ЭлементыФормы.ПолеТабличногоДокументаКС.ЗакончитьГруппуСтрок();
			ВключеноУсловие = Ложь;
			КолвоСтрокФормулы = 0;
		КонецЕсли;

		ВывестиСекцию(мТаблицаСоотношений
		   , СтрокаДанных1
		   , Стр.Номер
		   , Стр.КонтрольноеСоотношение
		   , Стр.Расшифровка
		   , Стр.РезультатПроверки
		   , Стр.НормаЗаконодательства
		   , Стр.ОписаниеНарушения
		   , Стр.Комментарий
		   , Стр.ПометитьКрасным
		   , Стр.СсылкаНаТаблРасш);

		Если ВключеноУсловие Тогда
			// Увеличим счетчик вложенных подформул в Если.
			КолвоСтрокФормулы = КолвоСтрокФормулы + 1;
		КонецЕсли;

	КонецЦикла;
	Если КолвоСтрокФормулы <> 0 Тогда
		// Закроем группировку если пришлось так, что составная формула
		ЭлементыФормы.ПолеТабличногоДокументаКС.ЗакончитьГруппуСтрок();
	КонецЕсли;
	ЭлементыФормы.Индикатор1.Видимость = Ложь;

	Открыть();

КонецПроцедуры // Показать

// ВывестиСекцию
// Процедура выводит данные, в табличное поле, переданное через параметр.
//
// Параметры:
//  Таб            - табличное поле документ.
//  СтрокаДанных   - макет для одной строки.
//  Формула        - представление формулы.
//  Расшифровка    - расшифровка формулы.
//  Статус         - статус формулы.
//  Нарушение      - нарушения в законодательстве.
//  Описание       - описание нарушения.
//  Комментарий    - комментарий формулы.
//  ВыделитьКрасным- если истина, то выделим красным статус формулы.
// РегистрироватьОшибкуДляРасшифровки - в случае, когда список ошибок был сформирован не в интерактивном
//                               режиме, то списки расшифровок уже готовые и не нужно их ещё раз регистрировать
//                               для этого введен фгал РегистрироватьОшибкуДляРасшифровки
//                               который в обычном режиме всегда Истина, а при выводе ошибок из под не интер-
//                               активного режиме, должен быть ложь, т.к. ошибки регистрировать не нужно, т.к.
//                               они уже все заведены.
//
Процедура ВывестиСекцию(Таб, СтрокаДанных, Номер, Формула, Расшифровка, Статус, Нарушение, Описание, Комментарий, ВыделитьКрасным = Ложь, НомерЗарегистрированнойОшибкиПоФормуле = Неопределено)

	Если НомерЗарегистрированнойОшибкиПоФормуле = Неопределено Тогда
		// Заведем формулу в таблицу формул
		ЗарегистрироватьФормулуДляРасшифровки(Формула);
	КонецЕсли;

	// Если проверка выполняется без интерактивного режима, то сохраним все данные
	// по ошибкам в таблице.
	Если мИнтерактивныйРежим Тогда

		// Не используется пока... не дописано.
		Если Найти(Номер, ".0") > 0 Тогда
			// Для тех вариантов, когда в колонке 9 отсутствуют указатели на Если, для точного описания формулы, не генерируя автоматического представления.
			Номер = Сред(Номер, 1, Найти(Номер, ".0") - 1);
		КонецЕсли;
		СтрокаДанных.Области.Номер1Номер.Текст = Номер;
		СтрокаДанных.Области.Номер1Формула.Текст = Формула;
		СтрокаДанных.Области.Номер1Расшифровка.Текст = Расшифровка;
		СчетчикФормулГдеЕстьОшибка = ?(НомерЗарегистрированнойОшибкиПоФормуле = Неопределено, мСчетчикФормулДляРасшифровок, НомерЗарегистрированнойОшибкиПоФормуле);

		// В случае, если формула не проверяется, то расшифровку в табл. поле не сохраним.
		Если мСостояниеФормулы = Статус
		   Или мРезультатПоУсловию = Статус Тогда
			СтрокаДанных.Области.Номер1Расшифровка.Расшифровка = Неопределено;
			СтрокаДанных.Области.Номер1Формула.Расшифровка = Неопределено;
		Иначе
			СтрокаДанных.Области.Номер1Расшифровка.Расшифровка = СчетчикФормулГдеЕстьОшибка;
			СтрокаДанных.Области.Номер1Формула.Расшифровка = СчетчикФормулГдеЕстьОшибка;
		КонецЕсли;

		СтрокаДанных.Области.Номер1Статус.Текст = Статус;
		СтрокаДанных.Области.Номер1Нарушение.Текст = ?(ВыделитьКрасным, Нарушение, "");
		СтрокаДанных.Области.Номер1Описание.Текст = ?(ВыделитьКрасным, Описание, "");
		СтрокаДанных.Области.Номер1Комментарий.Текст = Комментарий;

		Если ВыделитьКрасным Тогда
			СтрокаДанных.Области.Номер1Статус.ЦветТекста = ЦветаСтиля.ЦветОсобогоТекста;
		Иначе
			СтрокаДанных.Области.Номер1Статус.ЦветТекста = Новый Цвет(0, 0,0);
		КонецЕсли;

		Таб.Вывести(СтрокаДанных);

	Иначе

		НовСтр = мТаблицаОшибокКС.Добавить();
		НовСтр.Номер = Номер;
		НовСтр.КонтрольноеСоотношение = Формула;
		НовСтр.Расшифровка = Расшифровка;
		НовСтр.РезультатПроверки = Статус;
		НовСтр.ПометитьКрасным = ВыделитьКрасным;
		НовСтр.НормаЗаконодательства = ?(ВыделитьКрасным, Нарушение, "");
		НовСтр.ОписаниеНарушения = ?(ВыделитьКрасным, Описание, "");
		НовСтр.Комментарий = Комментарий;
		Если НомерЗарегистрированнойОшибкиПоФормуле = Неопределено Тогда
			НовСтр.СсылкаНаТаблРасш = мСчетчикФормулДляРасшифровок;
		Иначе
			НовСтр.СсылкаНаТаблРасш = НомерЗарегистрированнойОшибкиПоФормуле;
		КонецЕсли;

		//НовСтр.НомерРасшифровкиДляСоставныхФормул = НомерЗарегистрированнойОшибкиПоФормуле;

	КонецЕсли;

КонецПроцедуры // ВывестиСекцию

// ФункцияОтноситсяНеКЭтомуОП
// Функция определяет, для этого ОП предназначена формула или нет. По полю комментарий.
//
// Параметры:
// Возвращаемое значение:
//  Истина          - в случае, если формула относится к другому ОП.
//  Ложь            - в случае, если формула относится к этому ОП.
//
Функция ФункцияОтноситсяНеКЭтомуОП(НастройкаФормулыПериод, Таб, ИндексФормулыНаЛисте)

	Если мЭтоНалоговыйПериод = Неопределено Тогда
		// В данном случае всё равное, что будет в меременной ЭтоНалоговыйПериод, тк. признаков ОНП и ОП в отчете не будет
		ЭтоНалоговыйПериод = Истина;
	Иначе
		ЭтоНалоговыйПериод = мЭтоНалоговыйПериод;
	КонецЕсли;

	Если (НастройкаФормулыПериод = "ОНП") И (ЭтоНалоговыйПериод) Тогда
		Таб.Комментарий = "";
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнять расчет
	ИначеЕсли (НастройкаФормулыПериод = "ОНП") И (НЕ ЭтоНалоговыйПериод) Тогда
		Таб.Комментарий = "Только для налогового периода.";
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // не выполнять расчет
	ИначеЕсли (НастройкаФормулыПериод = "ОП" И ЭтоНалоговыйПериод) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // не выполнять расчет
		Таб.Комментарий = "Только для отчетного периода.";
	ИначеЕсли (НастройкаФормулыПериод = "ОП" И (НЕ ЭтоНалоговыйПериод)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "1-Й КВАРТАЛ" И (Месяц(СохраненныйДокумент.ДатаОкончания) = 3)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "1-Й КВАРТАЛ ИЛИ ОНП" И (Месяц(СохраненныйДокумент.ДатаОкончания) = 3 Или Месяц(СохраненныйДокумент.ДатаОкончания) = 1 Или ЭтоНалоговыйПериод) ) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "1-Й КВАРТАЛ ИЛИ ОНП" И НЕ (Месяц(СохраненныйДокумент.ДатаОкончания) = 3 Или Месяц(СохраненныйДокумент.ДатаОкончания) = 1 Или ЭтоНалоговыйПериод) ) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // НЕ выполнять расчет
		Таб.Комментарий = "Формула проверяется только для отчета за 1-й квартал или налоговый период.";

	ИначеЕсли (НастройкаФормулыПериод = "1-Й КВАРТАЛ" И (Месяц(СохраненныйДокумент.ДатаОкончания) <> 3)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // НЕ выполнить расчет
		Таб.Комментарий = "Формула только для 1-го квартала.";
	ИначеЕсли (НастройкаФормулыПериод = "2-Й КВАРТАЛ" И (Месяц(СохраненныйДокумент.ДатаОкончания) = 6)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "2-Й КВАРТАЛ" И (Месяц(СохраненныйДокумент.ДатаОкончания) <> 6)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // НЕ выполнять расчет
		Таб.Комментарий = "Формула только для 2-го квартала.";
	ИначеЕсли (НастройкаФормулыПериод = "ПОЛУГОДИЕ" И (Месяц(СохраненныйДокумент.ДатаОкончания) = 6)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "ПОЛУГОДИЕ" И (Месяц(СохраненныйДокумент.ДатаОкончания) <> 6)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // НЕ выполнять расчет
		Таб.Комментарий = "Формула только для полугодия.";
	ИначеЕсли (НастройкаФормулыПериод = "9 МЕСЯЦЕВ" И (Месяц(СохраненныйДокумент.ДатаОкончания) = 9)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "9 МЕСЯЦЕВ" И (Месяц(СохраненныйДокумент.ДатаОкончания) <> 9)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // НЕ выполнять расчет
		Таб.Комментарий = "Формула только для отчета за 9 месяцев.";
	ИначеЕсли (НастройкаФормулыПериод = "3-Й КВАРТАЛ" И (Месяц(СохраненныйДокумент.ДатаОкончания) = 9)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь; // выполнить расчет
		Таб.Комментарий = "";
	ИначеЕсли (НастройкаФормулыПериод = "3-Й КВАРТАЛ" И (Месяц(СохраненныйДокумент.ДатаОкончания) <> 9)) Тогда
		ФормулаПринадлежитНеПроверяемомуПериоду = Истина; // НЕ выполнять расчет
		Таб.Комментарий = "Формула только для отчета за 3-й квартал.";

	Иначе

		ФормулаПринадлежитНеПроверяемомуПериоду = Ложь;
		Таб.Комментарий = "";
	КонецЕсли;

	Возврат ФормулаПринадлежитНеПроверяемомуПериоду;

КонецФункции // ФункцияОтноситсяНеКЭтомуОП

// ОбщиеНастройкиКонтрольныхСоотношений
// Функция возвращает общие настройки для контрольных соотношений в целом.
//  Параметры:
//  ОблМакет       - основной макет соотношений
//  Обл            - раздел в макете
//  ПараметрКС     - требуемый параметр
// Возвращаемое значение:
//  Значение параметра - строка.
//
Функция ОбщиеНастройкиКонтрольныхСоотношений(ОблМакет, Обл, ПараметрКС)

	Если Обл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Для Ном = Обл.Верх По Обл.Низ Цикл
		Параметр = ОблМакет.Область(Ном, 2).Текст;
		Если (ПараметрКС = "ИспользоватьТолькоДаннуюФормуПриПолученииЗначений")
		   И (Параметр = "ИспользоватьТолькоДаннуюФормуПриПолученииЗначений") Тогда

			Значение = ОблМакет.Область(Ном, 3).Текст;;
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				Возврат Неопределено;
			Иначе
				Возврат ОблМакет.Область(Ном, 3).Текст;
			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

КонецФункции // ОбщиеНастройкиКонтрольныхСоотношений

// ДанныеИзОбластиСчитатьВТаблицу
//
Функция ДанныеИзОбластиСчитатьВТаблицу(ОблМакет, Обл)

	РезультатТаблица = Новый ТаблицаЗначений;
	РезультатТаблица.Колонки.Добавить("Номер");
	РезультатТаблица.Колонки.Добавить("Формула");
	РезультатТаблица.Колонки.Добавить("Расшифровка");
	РезультатТаблица.Колонки.Добавить("Статус");
	РезультатТаблица.Колонки.Добавить("Нарушение");
	РезультатТаблица.Колонки.Добавить("Описание");
	РезультатТаблица.Колонки.Добавить("Комментарий");
	РезультатТаблица.Колонки.Добавить("ДопНастройка");
	РезультатТаблица.Колонки.Добавить("ПредставлениеФормулы");

	Для Ном = Обл.Верх По Обл.Низ Цикл
		// Перебираем строки макета.
		Формула = ОблМакет.Область(Ном, 2).Текст;
		Если РегламентированнаяОтчетность.ПустоеЗначение(Формула) Тогда
			Продолжить;
		КонецЕсли;

		НовСтр = РезультатТаблица.Добавить();
		НовСтр.Номер         = ОблМакет.Область(Ном, 1).Текст;
		НовСтр.Формула       = Формула;
		НовСтр.Расшифровка   = ОблМакет.Область(Ном, 3).Текст;
		НовСтр.Статус        = ОблМакет.Область(Ном, 4).Текст;
		НовСтр.Нарушение     = ОблМакет.Область(Ном, 5).Текст;
		НовСтр.Описание      = ОблМакет.Область(Ном, 6).Текст;
		НовСтр.Комментарий   = ОблМакет.Область(Ном, 7).Текст;
		НовСтр.ДопНастройка  = ОблМакет.Область(Ном, 8).Текст;
		НовСтр.ПредставлениеФормулы = ОблМакет.Область(Ном, 9).Текст;

	КонецЦикла;

	Возврат РезультатТаблица;

КонецФункции // ДанныеИзОбластиСчитатьВТаблицу

// КонтрольныеСоотношения
// Процедура выводит на лист результаты проверки формул камеральной проверки.
//
// Параметры:
//  ОбнулитьКэш    - если значение истина, то запускается процедура ОбнулитьКэшРезультатов, которая обнуляет кэш
//            от функции ПолучитьЗначениеПоказателя.
//
Процедура КонтрольныеСоотношения(ОбнулитьКэш = Истина)
	Перем Комментарий;

	// Для конструкции Если ... Тогда
	КСкакУсловие = Ложь;

	Если ОбнулитьКэш Тогда
		ОбнулитьКэшРезультатов();
	КонецЕсли;

	// Инициализируем настройки единиц измерения.
	ИнициализироватьЕдиницыИзмерения(СохраненныйДокумент);

	СписокРасшифровкиФормулы.Очистить();
	СписокРасшифровкиПоказателей.Очистить();

	// Если режим работы не интерактивный, то всегда работае только с ошибками
	Если НЕ мИнтерактивныйРежим Тогда
		ОтобразитьТолькоОшибочныеКС = Истина;
	КонецЕсли;

	ГодДекл = Формат(СохраненныйДокумент.ДатаНачала, "ДФ = гггг");

	// Таблица для конструкций Если ... Тогда ... КонецЕсли;
	ВременнаяТаблЕсли = Новый ТаблицаЗначений;
	ВременнаяТаблЕсли.Колонки.Добавить("НомерФормулы");
	ВременнаяТаблЕсли.Колонки.Добавить("НомерПодФормулы");
	ВременнаяТаблЕсли.Колонки.Добавить("Формула");
	ВременнаяТаблЕсли.Колонки.Добавить("Расшифровка");
	ВременнаяТаблЕсли.Колонки.Добавить("Статус");
	ВременнаяТаблЕсли.Колонки.Добавить("Нарушение");
	ВременнаяТаблЕсли.Колонки.Добавить("Описание");
	ВременнаяТаблЕсли.Колонки.Добавить("Комментарий");
	ВременнаяТаблЕсли.Колонки.Добавить("НомерРасшифровки");

	// Получим отчетный период из ссылки отчета.
	ОтчетныйПериод = Новый Структура();
	ОтчетныйПериод.Вставить("ДатаНач", СохраненныйДокумент.ДатаНачала);
	ОтчетныйПериод.Вставить("ДатаКон", СохраненныйДокумент.ДатаОкончания);

	ВывестиШапкуОтчета();

	ОбластьМакет = мФормаОтчета.ЭтотОбъект.ПолучитьМакет("СоотношенияПоказателей" + СтрЗаменить(СохраненныйДокумент.ВыбраннаяФорма, "ФормаОтчета", ""));

	Если мТаблицаФормул = Неопределено Или мТаблицаФормул.Количество() = 0 Тогда

		ТаблицаФормул = ДанныеИзОбластиСчитатьВТаблицу(ОбластьМакет, ОбластьМакет.Области.Найти("Формулы"));
		мТаблицаФормул = ТаблицаФормул.Скопировать();

	Иначе

		ТаблицаФормул = мТаблицаФормул.Скопировать();

	КонецЕсли;

	// Установим выбранную форму. В алгоритме получения значений из документов, будет анализироваться форма, с помощью которой создан был отчет.
	// Для тех случаев, когда в один период, могла действовать более 1 формы декларации и данные могли забиваться как в старой так и в новой форме отчета.
	// Данный показатель устанавливает, какую форму нужно использоваться при получении значений из документа.
	// В случае, если такой области как настройкаКС в макете нет или параметра нет или он не заполнен, всегда возвращается Неопределено и это
	// означает, что брать данные можно из любых действующих форм в требуемом периоде.
	ВыбраннаяФорма = ОбщиеНастройкиКонтрольныхСоотношений(ОбластьМакет, ОбластьМакет.Области.Найти("НастройкаКС"), "ИспользоватьТолькоДаннуюФормуПриПолученииЗначений");

	СтрокаДанных1 = ПолучитьМакет("Настройки").ПолучитьОбласть("СтрокаДанных1");
	ПустаяСтрока  = ПолучитьМакет("Настройки").ПолучитьОбласть("ПустаяСтрока");
	МакетРаздел   = ПолучитьМакет("Настройки").ПолучитьОбласть("Раздел");

	мТаблицаСоотношений.ТолькоПросмотр = Истина;

	ЭлементыФормы.Индикатор1.Видимость = Истина;
	ЭлементыФормы.Индикатор1.МаксимальноеЗначение = ТаблицаФормул.Количество();

	мПорядковыйНомерФормулы = 0;
	НомерПодФормулы = 0;
	ПризнакСоставнойФормулы = Ложь;

	// Получим таблицу подходящих документов для проверки.
	// В данном случае всегда получим ту декларацию, которая проверяется в настоящий момент.
	мТаблицаСПроверяемымДокументом = ПолучитьСохраненныеДокументы(СохраненныйДокумент.ИсточникОтчета, СохраненныйДокумент.Организация, Неопределено, ОтчетныйПериод,, Истина);

	// Позже нужно будет доработать, для бухгалтерских форм допускается более 1, т.к.
	// там нет номеров корр и признака первичности или исправленности.

	// Если группа деклараций, то делаем проверку на кол-во документов подпадающих под выборку.
	Если ПолучитьНастройкуОтчета(СохраненныйДокумент.ИсточникОтчета, "Группа") = "Группа_003" Тогда

		// Сверим текущие данные по корректировки и первичности с имующимися для работы с КС.
		ВидДок = мТаблицаСПроверяемымДокументом[0].ВидДок;
		НомерКорр = мТаблицаСПроверяемымДокументом[0].НомерКорректировки;

		//СохраненныйДок = СохраненныйДокумент.ДанныеОтчета.Получить();
		//ВидДокПереданный = ?(СохраненныйДокумент.Вид = 0, 1, 3);
		//НомерКоррПереданный = ?(СохраненныйДокумент.Вид <> 0, СохраненныйДокумент.Вид, 0);

	КонецЕсли;

	Если СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда

		Объект1 = мТаблицаСПроверяемымДокументом[0].СохраненныйДок.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Объект1;
		Объект2 = мТаблицаСПроверяемымДокументом[0].СохраненныйДок.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.Объект2;
		СистемаУСНвДекларацииДоходы = ?(Объект1 = "V", Истина, ?(Объект2 = "V", Ложь, Неопределено));
	ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетПрибыль" Тогда
		ЕстьОбособленныеПодразделения = мТаблицаСПроверяемымДокументом[0].СохраненныйДок.ЕстьОбособленныеПодразделения;
		ПоМестуНахожденияОрганизации = НЕ мТаблицаСПроверяемымДокументом[0].СохраненныйДок.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V";

	КонецЕсли;

	Инд = 0;
	мСчетчикФормулДляРасшифровок = -1;
	КонфигурацияИсполнения = РегламентированнаяОтчетность.ИДКонфигурации();

	// Флаг, позволяющий не вычислять значений по формулам, которых находятся внутре конструкции Если в макете описания формул соотношений.
	мУсловиеСоотношенияНеВыполнено = Ложь;

	Для Каждого СтрокаНастройки Из ТаблицаФормул Цикл

		Инд = Инд + 1;
		Индикатор = Инд;

		// Получим формулу
		Формула = СтрокаНастройки.Формула;

		// Увеличиваем счетчик для связи с таблицей расшифровок показателей.
		мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;

		Если Найти(Формула, "//") = 1 Тогда

			МакетРаздел.Параметры.Название = Сред(Формула, 3);
			мТаблицаСоотношений.Вывести(МакетРаздел);

			Продолжить;

		КонецЕсли;

		Если СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетУСН" Тогда
			// Только для декларации по УСН смотрим 8-ю колонку, на предмет
			// относится ли настройка к 6% или к 15% схеме.
			ДопНастройка = СтрокаНастройки.ДопНастройка;

			// Если нет отметки на титульном листе об объекте, тогда проверяем всё и выдаем соответствующие ошибки.
			Если СистемаУСНвДекларацииДоходы <> Неопределено Тогда
				Если (ДопНастройка = "доходы" И НЕ СистемаУСНвДекларацииДоходы)
				Или (ДопНастройка = "доходы - расходы" И СистемаУСНвДекларацииДоходы) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;

		ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетАвансыПоЕСН" Тогда
			ДопНастройка = СтрокаНастройки.ДопНастройка;
			// Если формула для ЗУПа исполнима не будет, то пропустим её
			Если ДопНастройка = "ЗУП-" И (КонфигурацияИсполнения = "ЗУП" ИЛИ КонфигурацияИсполнения = "ЗБУ") Тогда
				Продолжить;
			КонецЕсли;

		ИначеЕсли (СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетПрибыль")
		      Или (СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетЕдиныйНалогНаВмененныйДоход")
		      Или (СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетНДС") Тогда
			ДопНастройка = СтрокаНастройки.ДопНастройка;
			Если (ДопНастройка = "ПоМестуНахожденияОрганизации") И (НЕ ПоМестуНахожденияОрганизации) Тогда
				// Если формула задана только для орг. по месту нахождения орг., а на титульном листе стоит обратная отметка, тогда
				// пропустим формулу.
				Продолжить;
			КонецЕсли;

			Если (ДопНастройка = "ЕстьОбособленныеПодразделения И ПоМестуНахожденияОрганизации") Тогда
				// Аналогично процедуре Расчет в декларации по налогу на прибыль.
				Если (НЕ ЕстьОбособленныеПодразделения) И (ПоМестуНахожденияОрганизации) Тогда
					// Пропустим формулу, которая не удовлетворяет требованию наличия обособленных подразделений и учет по месту нахождения организации.
					Продолжить;
				КонецЕсли;
			КонецЕсли;

			Если Найти(ДопНастройка, "Год = ") > 0 Тогда
				// Ограничение выполнения формулы, только для заданного года
				ЗаданныйГод = Сред(ДопНастройка, Найти(ДопНастройка, "Год = ") + 6, 4);
				Если ЗаданныйГод <> ГодДекл Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Найти(ДопНастройка, "Год > ") > 0 Тогда

				// Ограничение выполнения формулы, только для заданного года
				ЗаданныйГод = Сред(ДопНастройка, Найти(ДопНастройка, "Год > ") + 6, 4);
				Если ГодДекл <= ЗаданныйГод Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли Найти(ДопНастройка, "Год >= ") > 0 Тогда

				// Ограничение выполнения формулы, только для заданного года
				ЗаданныйГод = Сред(ДопНастройка, Найти(ДопНастройка, "Год >= ") + 7, 4);
				Если ГодДекл < ЗаданныйГод Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Комментарий = СтрокаНастройки.Комментарий;
		ФормулаПринадлежитНеПроверяемомуПериоду = ФункцияОтноситсяНеКЭтомуОП(ВРег(Комментарий), СтрокаНастройки, Строка(Инд));
		Комментарий = СтрокаНастройки.Комментарий;

		ТекНарушение = СтрокаНастройки.Нарушение;
		ТекОписание = СтрокаНастройки.Описание;

		Если ОтобразитьФормулыВсехПериодов Или НЕ ФормулаПринадлежитНеПроверяемомуПериоду Тогда

			// Работает со счетчиком формул.
			Если Найти(Формула, "Если ") > 0 Тогда
				ПризнакСоставнойФормулы = Истина;
				// Это новая формула, увеличиваем счетчик на единицу.
				//ПорядковыйНомерФормулы = ПорядковыйНомерФормулы + 1;
				НомерПодФормулы = 0;

			ИначеЕсли Найти(Формула, "Если ") = 0 И ПризнакСоставнойФормулы И Найти(Формула, "КонецЕсли;") = 0 Тогда
				НомерПодФормулы = НомерПодФормулы + 1;
			ИначеЕсли Найти(Формула, "Если ") = 0 И ПризнакСоставнойФормулы И Найти(Формула, "КонецЕсли;") > 0 Тогда
				НомерПодФормулы = НомерПодФормулы + 1;
				ПризнакСоставнойФормулы = Ложь;
			ИначеЕсли Найти(Формула, "Если ") = 0 И НЕ ПризнакСоставнойФормулы Тогда
				НомерПодФормулы = 0;
				//ПорядковыйНомерФормулы = ПорядковыйНомерФормулы + 1;
			КонецЕсли;

		КонецЕсли;

		Расшифровка = "";

		Если ОтобразитьФормулыВсехПериодов Тогда

			Если ФормулаПринадлежитНеПроверяемомуПериоду Тогда

				Если (ПризнакСоставнойФормулы И НомерПодФормулы = 0)
				   Или (НЕ ПризнакСоставнойФормулы И НомерПодФормулы = 0) Тогда
					мПорядковыйНомерФормулы = мПорядковыйНомерФормулы + 1;
				КонецЕсли;

				// Преобразуем в нормальный вид
				ПредставлениеФормулы = ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки);

				Если ВРег(СокрЛП(ПредставлениеФормулы)) = Врег(СокрЛП(Формула)) Тогда
					ПредставлениеФормулы = ПолучитьНазваниеВыполняемойФормулы(Формула);
				Конецесли;

				НомФ = ?(НомерПодФормулы > 0, Строка(мПорядковыйНомерФормулы) + "." + Строка(НомерПодФормулы), Строка(мПорядковыйНомерФормулы));
				ВывестиСекцию(мТаблицаСоотношений, СтрокаДанных1, НомФ, ПредставлениеФормулы, " - ", мСостояниеФормулы, "", "", Комментарий);

				Продолжить;
			КонецЕсли;

		ИначеЕсли НЕ ОтобразитьФормулыВсехПериодов И ФормулаПринадлежитНеПроверяемомуПериоду Тогда
			// В случае, если галочки не стоит и формула показываться не должна из-за периода,
			// то такую запись пропускаем.
			Продолжить;
		КонецЕсли;

		РезультатПроверки = Неопределено;
		Если Найти(Формула, "Открыть ") > 0 Тогда

			РезультатПроверки = ОткрытьРаздел(ОтчетныйПериод, мТаблицаСПроверяемымДокументом, Формула, ТекОписание, СтрокаНастройки);

		ИначеЕсли Найти(Формула, "Вызвать ") > 0 Тогда

			РезультатПроверки = ВызватьПроверкуИзРодительскогоОтчета(Сред(Формула, 9), ОтчетныйПериод, мТаблицаСПроверяемымДокументом, Формула, ТекОписание, СтрокаНастройки);

		ИначеЕсли Формула = "ВыполнитьПроверкуУСН1" Тогда

			РезультатПроверки = ВыполнитьПроверкуУСН1(ОтчетныйПериод, мТаблицаСПроверяемымДокументом, СистемаУСНвДекларацииДоходы);

		ИначеЕсли Найти(Формула, "ВычислитьМногострочныйБлок") > 0 Тогда

			РезультатПроверки = ВычислитьМногострочныйБлок(Формула, СтрокаНастройки.ПредставлениеФормулы);

		ИначеЕсли Найти(Формула, "ПроверитьИНН") > 0 Тогда

			РезультатПроверки = ПроверитьИНН(Сред(Формула, Найти(Формула, " ") + 1), СтрокаНастройки);

		ИначеЕсли Найти(Формула, "ПроверитьВСписке ") > 0 Тогда

			ПараметрыФормулы = ПолучитьЗаданнуюЧасть(Сред(Формула, Найти(Формула, " ")), 0, "|");

			ДатаС1 = СокрЛП(ПараметрыФормулы[0].Представление);
			ДатаПо1 = СокрЛП(ПараметрыФормулы[1].Представление);

			ДатаС = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
			ДатаПО = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));

			ДатаПодписи = КонецДня(СохраненныйДокумент.ДатаПодписи);

			// Ограничения по дате подписания отчета
			Если СтрДлина(ДатаС1) = 10 Тогда
				// Проверим, удовлетворяет ли дата подписания текущего отчета нужному ограничению.
				ДатаС = КонецДня(Дата(Сред(ДатаС1, 7, 4) + Сред(ДатаС1, 4, 2) + Сред(ДатаС1, 1, 2)));
			КонецЕсли;

			// Ограничения по дате подписания отчета
			Если СтрДлина(ДатаПО1) = 10 Тогда
				// Проверим, удовлетворяет ли дата подписания текущего отчета нужному ограничению.
				ДатаПО = КонецДня(Дата(Сред(ДатаПО1, 7, 4) + Сред(ДатаПО1, 4, 2) + Сред(ДатаПО1, 1, 2)));
			КонецЕсли;

			Если НЕ ((ДатаПодписи >= ДатаС) И 
			         ((ДатаПодписи <= ДатаПО) Или (НЕ ЗначениеЗаполнено(ДатаПО)))) Тогда
				Продолжить;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ДатаПО) Тогда
				// Анализируем отчеты, где дата С больше
				Если ЗначениеЗаполнено(ДатаС) Тогда
					Если ДатаПодписи < ДатаС Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			РезультатПроверки = ПроверитьВСписке(ПараметрыФормулы[2].Представление, ПараметрыФормулы[3].Представление, // ИмяРаздела и ТипРаздела
			                                     ПараметрыФормулы[4].Представление, // Показатель
			                                     ПараметрыФормулы[5].Представление, // Тип показателя
			                                     ПараметрыФормулы[6].Представление, // Значение в квадратиках
			                                     ПараметрыФормулы[7].Представление, // Название списка
			                                     ПараметрыФормулы[8].Представление, // Название области
			                                     СтрокаНастройки.ПредставлениеФормулы, // Текст, проверяемое соотношение
			                                     ПараметрыФормулы[9].Представление, // Текст в заголовке к расшифровке
			                                     ПараметрыФормулы[10].Представление, // Название показателя
			                                     ПараметрыФормулы[11].Представление, // Пустое значение является ошибкой
			                                     мТаблицаСПроверяемымДокументом);

		КонецЕсли;

		Если РезультатПроверки <> Неопределено Тогда

			Если РезультатПроверки.КоличествоНайденныхОшибок + РезультатПроверки.КоличествоНайденныхБезОшибок > 0 Тогда

				ВывестиОшибки(мТаблицаСоотношений, СтрокаДанных1, РезультатПроверки, Формула, ТекНарушение, СтрокаНастройки);

			//Иначе

			//	Если НЕ ОтобразитьТолькоОшибочныеКС Тогда

			//		Если НЕ РезультатПроверки.Свойство("КоличествоНайденныхБезОшибок") Тогда
			//		// В том случае, если групповая проверка производилась, но расшифрока показателей не требуется. Например в УСН, при проверка
			//		// на заполняемость раздела. Расшифрока если всё удачно выводится для показателей не должна, поэтому итог - одна строчка в отчете
			//		// которая относится к всей проверяемой формуле.
			//			мПорядковыйНомерФормулы = мПорядковыйНомерФормулы + 1;
			//			НомФ = Строка(мПорядковыйНомерФормулы);

			//			ВывестиСекцию(мТаблицаСоотношений
			//			   , СтрокаДанных1
			//			   , НомФ
			//			   , ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки)
			//			   , ""
			//			   , мСоотношениеВыполнено
			//			   , ТекНарушение
			//			   , ТекОписание
			//			   , Комментарий);
			//		КонецЕсли;

			//		Если РезультатПроверки.Свойство("КоличествоНайденныхБезОшибок") Тогда
			//			ВывестиОшибки(мТаблицаСоотношений, СтрокаДанных1, РезультатПроверки, Формула, ТекНарушение, СтрокаНастройки);
			//		КонецЕсли;

			//	КонецЕсли;

			КонецЕсли;

			Продолжить;

		КонецЕсли;

		// Преобразуем в нормальный вид
		ПредставлениеФормулы = ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки);

		ЛогическийЗнакСтруктура = РегламентированнаяОтчетность.ВернутьЛогическийЗнакВСтроке(Формула);
		ЛогическийЗнак = ЛогическийЗнакСтруктура.СтрокаСравнения;
		ЛогическийЗнакПеречисление = ЛогическийЗнакСтруктура.ПеречислениеВидСравнения;

		СоставнаяФормула = Ложь;
		ОбщаяФормула = "";

		// Статус параметр по умолчанию, используется, для определения выполненности формулы.
		// 0 - не выполнена.
		// 1 - выполнена
		// 2 - условие не выполнено
		// 3 - условие выполнено.
		// 4 - Соотношение не проверяется, т.к. не выполнено условие 
		СтатусПараметр = 0;

		// Переменная необходима, чтобы если в правой или левой части только одно значение 
		// участвует из документа, то его через расчетформулы округлять не нужно, т.к.
		// ф-ция ПолучитьЗнИзДок сама знает что округлять нужно.
		КолвоЗначенийИзДок = 0;

		ЛогическийЗнакОбработан = Ложь;
		Если мУсловиеСоотношенияНеВыполнено Тогда
			Расшифровка = "";
			РасшифровкаПерваяЧастьЗнач = 0;
			РасшифровкаВтораяЧастьЗнач = 0;
			ЛогическийЗнакПеречисление = ВидСравнения.Равно;
		Иначе
			Для Инд2 = 1 По СтрЧислоВхождений(Формула, " ") + 1 Цикл
				Часть = ПолучитьЗаданнуюЧасть(Формула, Инд2);

				Если Найти(Часть, "[") > 0 И Найти(Часть, "]") = 0 Тогда
					// Возводим признак составной формулы
					СоставнаяФормула = Истина;
					ОбщаяФормула = Часть;
					Продолжить;
				КонецЕсли;

				Если СоставнаяФормула Тогда
					Если Найти(Часть, "]") > 0 Тогда
						ОбщаяФормула = ОбщаяФормула + " " + Часть;
						Часть = ОбщаяФормула;
						СоставнаяФормула = Ложь;
					Иначе
						ОбщаяФормула = ОбщаяФормула + " " + Часть;
						Продолжить;
					КонецЕсли;
				КонецЕсли;

				Если НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(Часть) И Найти(Часть, ".") > 0 Тогда
					Рез = ПолучитьЗначениеИзДокумента(Часть, ОтчетныйПериод, СохраненныйДокумент.Организация, СохраненныйДокумент.КодИМНС, ВыбраннаяФорма);
					КолвоЗначенийИзДок = КолвоЗначенийИзДок + 1;
					Если РегламентированнаяОтчетность.роЯвляетсяЧислом(Рез) Тогда
						Рез = Формат(Рез, "ЧРД=.;ЧН=0");
					КонецЕсли;

					Расшифровка = ?(Расшифровка = "", Рез, Расшифровка + " " + Рез)

				Иначе

					Если (СокрЛП(Часть) = ЛогическийЗнак) И (НЕ ЛогическийЗнакОбработан) Тогда

						ЛогическийЗнакОбработан = Истина;
						РасшифровкаПерваяЧастьЗнач = РасчетФормулы(Расшифровка, ?(КолвоЗначенийИзДок >= 1, Ложь, Истина));
						Расшифровка = Расшифровка + " [Итог  " + Формат(РасшифровкаПерваяЧастьЗнач, "ЧРД=.;ЧН=0") + "]";
						КолвоЗначенийИзДок = 0;

					КонецЕсли;

					Расшифровка = Расшифровка + " " + Часть;
				КонецЕсли;

			КонецЦикла;

			ПозЗнака = Найти(Расшифровка, ЛогическийЗнак);
			РасшифровкаВтораяЧасть = Сред(Расшифровка, ПозЗнака + СтрДлина(ЛогическийЗнак));
			РасшифровкаВтораяЧастьЗнач = РасчетФормулы(РасшифровкаВтораяЧасть, ?(КолвоЗначенийИзДок >= 1, Ложь, Истина));
			Расшифровка = Расшифровка + " [Итог  " + Формат(РасшифровкаВтораяЧастьЗнач, "ЧРД=.;ЧН=0") + "]";
			Расшифровка = УбратьСлужебныеОператоры(Расшифровка);

		КонецЕсли;

		ЛогическаяПроверкаНеПройдена = Ложь;

		Если ЛогическийЗнакПеречисление <> ВидСравнения.Равно Тогда

			ЛогическаяПроверкаНеПройдена = 
			   (ЛогическийЗнакПеречисление = ВидСравнения.Больше И РасшифровкаПерваяЧастьЗнач <= РасшифровкаВтораяЧастьЗнач)
			   Или
			   (ЛогическийЗнакПеречисление = ВидСравнения.Меньше И РасшифровкаПерваяЧастьЗнач >= РасшифровкаВтораяЧастьЗнач)
			   Или
			   (ЛогическийЗнакПеречисление = ВидСравнения.БольшеИлиРавно И РасшифровкаПерваяЧастьЗнач < РасшифровкаВтораяЧастьЗнач)
			   Или
			   (ЛогическийЗнакПеречисление = ВидСравнения.МеньшеИлиРавно И РасшифровкаПерваяЧастьЗнач > РасшифровкаВтораяЧастьЗнач)
			   Или
			   (ЛогическийЗнакПеречисление = ВидСравнения.НеРавно И РасшифровкаПерваяЧастьЗнач = РасшифровкаВтораяЧастьЗнач);

		КонецЕсли;

		// Возведем признак. Если есть Если в условии и не выполняется само условие, тогда возведем флаг, для того,
		// чтобы соотношения, которые считались бы при наступлении этого условия, не рассчитывались.
		Если (ПризнакСоставнойФормулы) Или (Найти(Формула, "КонецЕсли;") > 0) Тогда
			Если (Найти(Расшифровка, "Если ") > 0) Тогда

				Если (ЛогическаяПроверкаНеПройдена)
				 Или ((ЛогическийЗнакПеречисление = ВидСравнения.Равно)
				 И (РасшифровкаПерваяЧастьЗнач <> РасшифровкаВтораяЧастьЗнач)) Тогда
					// Возведем флаг, на основании которого не будем рассчитывать расшифровку формулы в струкуте Если ...... КонецЕсли;
					мУсловиеСоотношенияНеВыполнено = Истина;
				Иначе
					мУсловиеСоотношенияНеВыполнено = Ложь;
				КонецЕсли;

			// В случае, если проверяемая формула последняя в блоке Если, тогда возведем флаг не выполненного соотношения  в Ложь.
			ИначеЕсли (Найти(Формула, "КонецЕсли;") > 0) Тогда
				мУсловиеСоотношенияНеВыполнено = Ложь;
			КонецЕсли;
		Иначе
			мУсловиеСоотношенияНеВыполнено = Ложь;
		КонецЕсли;

		Если Найти(Формула, "Если ") > 0 Тогда
			// Тогда поставим в конец
			Расшифровка = СтрЗаменить(Расшифровка, "Тогда", "");
			//Расшифровка = Расшифровка + " Тогда";
			КСкакУсловие = Истина;
			// Пока условие не выполнено.
			УсловиеВыполнено = Ложь;
		ИначеЕсли (Найти(Формула, "Если ") = 0) И КСкакУсловие И НЕ УсловиеВыполнено Тогда

			Если НЕ ОтобразитьТолькоОшибочныеКС Тогда

				Если НомерПодФормулы = 1 Тогда
					ЭлементыФормы.ПолеТабличногоДокументаКС.НачатьГруппуСтрок(, Ложь);
				КонецЕсли;

				НомФ = Строка(мПорядковыйНомерФормулы) + "." + Строка(НомерПодФормулы);
				ВывестиСекцию(мТаблицаСоотношений, СтрокаДанных1, НомФ, ПредставлениеФормулы
				   , ""
				   , мРезультатПоУсловию
				   , ТекНарушение
				   , ТекОписание
				   , Комментарий
				   , Ложь);

			КонецЕсли;

			Если Найти(Формула, "КонецЕсли;") > 0 Тогда
				КСкакУсловие = Ложь;
				ВременнаяТаблЕсли.Очистить();
				НомерПодФормулы = 0;
				Если НЕ ОтобразитьТолькоОшибочныеКС Тогда
					ЭлементыФормы.ПолеТабличногоДокументаКС.ЗакончитьГруппуСтрок();
				КонецЕсли;
			КонецЕсли;

			// Пропустим все остальное
			Продолжить;

		ИначеЕсли (Найти(Формула, "Если ") = 0) И КСкакУсловие И УсловиеВыполнено Тогда

			Если Найти(Формула, "КонецЕсли;") > 0 Тогда
				КСкакУсловие = Ложь;
			КонецЕсли;

		КонецЕсли;

		Расш = СтрЗаменить(Расшифровка, "КонецЕсли;", "");

		// Блок вывода данных в табличное поле.
		ЭлементСоставнойФормулы = (Найти(Формула, "КонецЕсли;") > 0) Или ПризнакСоставнойФормулы Или НомерПодФормулы > 0;

		Если (ЛогическийЗнакПеречисление = ВидСравнения.Равно
		    И РасшифровкаПерваяЧастьЗнач = РасшифровкаВтораяЧастьЗнач
		    И Найти(Расшифровка, "Если ") = 0)
		 Или (Найти(Расшифровка, "Если ") = 0
		    И ЛогическийЗнакПеречисление <> ВидСравнения.Равно
		    И НЕ ЛогическаяПроверкаНеПройдена) Тогда
			//Область.Области["Статус" + Строка(Инд)].Текст = мСоотношениеВыполнено;
			СтатусПараметр = 1;

			Если (ЭлементСоставнойФормулы) И (НЕ ОтобразитьТолькоОшибочныеКС) Тогда

				ДобавитьДанныеВТаблицуСоставныхФормул(ВременнаяТаблЕсли, 0, 0
				   , ПредставлениеФормулы
				   , Расш
				   , мСоотношениеВыполнено // "Условие выполнено." //мСоотношениеВыполнено
				   , ТекНарушение
				   , ТекОписание
				   , Комментарий
				   , мСчетчикФормулДляРасшифровок);
			
			КонецЕсли;

		ИначеЕсли
		   (ЛогическийЗнакПеречисление = ВидСравнения.Равно И РасшифровкаПерваяЧастьЗнач <> РасшифровкаВтораяЧастьЗнач)
		Или
		   (Найти(Расшифровка, "Если ") = 0 И ЛогическаяПроверкаНеПройдена)
		Тогда
			// СтрокаНастройки.Статус = мСоотношениеНеВыполнено; // Контрольное соот не выполнено
			СтатусПараметр = 0; // СоотношениеНеВыполнено
			//СтатусПараметр = 1; // СоотношениеВыполнено
			//СтатусПараметр = 2; // условие не выполнено
			//СтатусПараметр = 3; // условие выполнено

			Если ЭлементСоставнойФормулы Тогда

				// Составные элементы записываем в таблицу.

				Если Найти(Формула, "Если ") > 0 Тогда
					ПризнакТекст = "Условие не выполнено";
					СтатусПараметр = 2;
				Иначе
					ПризнакТекст = мСоотношениеНеВыполнено;
				КонецЕсли;

				ДобавитьДанныеВТаблицуСоставныхФормул(ВременнаяТаблЕсли, 0, 0, ПредставлениеФормулы
				   , Расш
				   , ПризнакТекст
				   , ТекНарушение
				  , ТекОписание
				  , Комментарий
				  , мСчетчикФормулДляРасшифровок);

			КонецЕсли;

		ИначеЕсли (Найти(Расшифровка, "Если ") > 0)
		   И (ЛогическаяПроверкаНеПройдена) Тогда

			//СтрокаНастройки.Статус = "Условие не выполнено.";
			СтатусПараметр = 2;
			УсловиеВыполнено = Ложь;

			Если НЕ ОтобразитьТолькоОшибочныеКС Тогда
				ДобавитьДанныеВТаблицуСоставныхФормул(ВременнаяТаблЕсли, 0, 0, ПредставлениеФормулы, Расш, "Условие не выполнено", ТекНарушение
					  , ТекОписание, Комментарий, мСчетчикФормулДляРасшифровок);

			КонецЕсли;

		ИначеЕсли (Найти(Расшифровка, "Если ") > 0)
		И (НЕ ЛогическаяПроверкаНеПройдена) Тогда

			//СтрокаНастройки.Статус = "Условие выполнено.";
			СтатусПараметр = 3;
			УсловиеВыполнено = Истина;
			// Т.к. в конструкции Если предусмотрено много вложений до ... КонецЕсли; тогда

			ДобавитьДанныеВТаблицуСоставныхФормул(ВременнаяТаблЕсли, 0, 0
			   , ПредставлениеФормулы
			   , Расш
			   , "Условие выполнено."
			   , ТекНарушение
			   , ТекОписание
			   , Комментарий
			   , мСчетчикФормулДляРасшифровок);

		КонецЕсли;

		Если Не ЭлементСоставнойФормулы Тогда
			// Если это обычная формула не составная, то просто выводим или не выводим в табл. поле, в зависимости от флажка.

			Если (ОтобразитьТолькоОшибочныеКС И СтатусПараметр = 0)
			    Или (НЕ ОтобразитьТолькоОшибочныеКС) Тогда
				мПорядковыйНомерФормулы = мПорядковыйНомерФормулы + 1;

				Если СтатусПараметр = 0 Тогда
					Нарушение = мСоотношениеНеВыполнено;
				ИначеЕсли СтатусПараметр = 1 Тогда
					Нарушение = мСоотношениеВыполнено;
				Иначе
					// не должно здесь обработаться, т.к. это обычная формула, она может либо выполниться
					// верно или нет.
					Нарушение = "???";
				КонецЕсли;

				ВывестиСекцию(мТаблицаСоотношений, СтрокаДанных1, Строка(мПорядковыйНомерФормулы)
				   , ПредставлениеФормулы
				   , Расш
				   , Нарушение
				   , ТекНарушение
				   , ТекОписание
				   , Комментарий
				   , ?(СтатусПараметр = 1, Ложь, Истина));
			КонецЕсли;

		// если это элемент составной формулы, тогда
		Иначе
			// Если в табл. только одна запись, то это условие, его выводить нужно только если либо есть ошибки в целом в формуле либо нет.
			// если условие не выполнено или выполнено и не стоит галочка отобразить ошибки, то выводим всё, считаем что в формуле ошибки нет.
			// Выводим по-строчно, как обычно.
			//Если ((НЕ УсловиеВыполнено Или УсловиеВыполнено)) И (НЕ ОтобразитьТолькоОшибочныеКС) Тогда
			Если (НЕ ОтобразитьТолькоОшибочныеКС) Тогда
				НомФ = "";
				Если Найти(Формула, "Если ") > 0 Тогда
					// Увеличим счетчик, только если это начало формулы с Если...
					мПорядковыйНомерФормулы = мПорядковыйНомерФормулы + 1;
					НомФ = Строка(мПорядковыйНомерФормулы);
				КонецЕсли;

				Если СтатусПараметр = 0 Тогда
					СтатусТекст = мСоотношениеНеВыполнено;
				ИначеЕсли СтатусПараметр = 1 Тогда
					СтатусТекст = мСоотношениеВыполнено;
				ИначеЕсли СтатусПараметр = 2 Тогда
					СтатусТекст = "Условие не выполнено.";
				ИначеЕсли СтатусПараметр = 3 Тогда
					СтатусТекст = "Условие выполнено.";
				Иначе
					СтатусТекст = "??";
				КонецЕсли;

				Если НомерПодФормулы = 1 Тогда
					ЭлементыФормы.ПолеТабличногоДокументаКС.НачатьГруппуСтрок(, Ложь);
				КонецЕсли;

				//ПометитьКраснымЦветом = 
				ВывестиСекцию(мТаблицаСоотношений, СтрокаДанных1, ?(РегламентированнаяОтчетность.ПустоеЗначение(НомФ), Строка(мПорядковыйНомерФормулы) + "." + Строка(НомерПодФормулы), НомФ)
				   , ПредставлениеФормулы
				   , Расш
				   , СтатусТекст
				   , ТекНарушение
				   , ТекОписание
				   , Комментарий
				   , ?(СтатусПараметр = 0, Истина, Ложь));
				Если Найти(Формула, "КонецЕсли;") > 0 Тогда
					// Закроем группировку.
					ЭлементыФормы.ПолеТабличногоДокументаКС.ЗакончитьГруппуСтрок();
				КонецЕсли;

			// Стоит галочка отображать только ошибки, тогда
			ИначеЕсли ОтобразитьТолькоОшибочныеКС И Найти(Формула, "КонецЕсли;") > 0 И ВременнаяТаблЕсли.Количество() > 1 Тогда

				// Если только ошибки и формула закончилась, то
				// Развернем временную таблицу

				мПорядковыйНомерФормулы = мПорядковыйНомерФормулы + 1;
				Инд1 = -1;

				//СтрокаДанных1.Области.Номер1Номер.Текст = "";
				//СтрокаДанных1.Области.Номер1Формула.Текст = "";
				//СтрокаДанных1.Области.Номер1Расшифровка.Текст = "";
				//СтрокаДанных1.Области.Номер1Статус.Текст = "";
				//СтрокаДанных1.Области.Номер1Нарушение.Текст = "";
				//СтрокаДанных1.Области.Номер1Описание.Текст = "";
				//СтрокаДанных1.Области.Номер1Комментарий.Текст = "";

//				мТаблицаСоотношений.Вывести(ПустаяСтрока);

				Для Каждого Стр из ВременнаяТаблЕсли Цикл
					НомФ = "";
					Инд1 = Инд1 + 1;
					Если Найти(Стр.Формула, "Если ") > 0 Тогда
						НомФ = Строка(мПорядковыйНомерФормулы);
					Иначе
						НомФ = Строка(мПорядковыйНомерФормулы) + "." + Строка(Инд1);
					КонецЕсли;

					Если Инд1 = 1 Тогда
						// Прикрепим группировку начиная с первой формулы в Если.
						ЭлементыФормы.ПолеТабличногоДокументаКС.НачатьГруппуСтрок(, Ложь);
					КонецЕсли;

					ПометкаКраснымЦветом = ?(Стр.Статус = мСоотношениеНеВыполнено, Истина, Ложь);

					ВывестиСекцию(мТаблицаСоотношений, СтрокаДанных1, НомФ, Стр.Формула, Стр.Расшифровка, Стр.Статус, Стр.Нарушение, Стр.Описание, Стр.Комментарий, ПометкаКраснымЦветом, Стр.НомерРасшифровки);

				КонецЦикла;

				ЭлементыФормы.ПолеТабличногоДокументаКС.ЗакончитьГруппуСтрок();

				ВременнаяТаблЕсли.Очистить();
				НомерПодФормулы = 0;

			// В случае, если в конструкции только условие выполнилось, всё остально ОК, то не выводим. Очистим табл.
			ИначеЕсли ОтобразитьТолькоОшибочныеКС И Найти(Формула, "КонецЕсли;") > 0 И ВременнаяТаблЕсли.Количество() = 1 Тогда
				ВременнаяТаблЕсли.Очистить();
				НомерПодФормулы = 0;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	ЭлементыФормы.Индикатор1.Видимость = Ложь;

КонецПроцедуры // КонтрольныеСоотношения

// ВывестиОшибки
// Процедура выводит ошибки в табличное поле из переданной ей структуры.
//
// Параметры:
//  Таб            - Табличное поле, в которое будет осуществлен вывод.
//  СтруктураОшибок- Структура ошибок.
//
Процедура ВывестиОшибки(Таб, СтрокаДанных, СтруктураОшибок, Формула, Нарушение, СтрокаНастройки)

	КолвоОшибок = СтруктураОшибок.КоличествоНайденныхОшибок + СтруктураОшибок.КоличествоНайденныхБезОшибок;
	НомерОшибки = 0;

	Для Инд = 1 По КолвоОшибок Цикл

		Счетчик = Формат(Инд, "ЧГ=0");
		Описание = СтруктураОшибок.СтруктураОшибок["Описание" + Счетчик];
		Расшифровка = СтруктураОшибок.СтруктураОшибок["Расшифровка" + Счетчик];

		Если СтруктураОшибок.СтруктураОшибок.Свойство("ТекстовоеПредставлениеФормулы" + Счетчик) Тогда
			ФормулаПредставл = СтруктураОшибок.СтруктураОшибок["ТекстовоеПредставлениеФормулы" + Счетчик];
		Иначе
			ФормулаПредставл = ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки);
		КонецЕсли;

		НомерФормулыДляРасшифровки = СтруктураОшибок.СтруктураОшибок["НомерФормулыРасшифровки" + Счетчик];
		ЭтоОшибка = СтруктураОшибок.СтруктураОшибок["ЭтоОшибка" + Счетчик];
		КомментКОшибки = "";
		Если СтруктураОшибок.СтруктураОшибок.Свойство("Комментарий" + Счетчик) Тогда
			КомментКОшибки = СтруктураОшибок.СтруктураОшибок["Комментарий" + Счетчик];
		КонецЕсли;

		Если ОтобразитьТолькоОшибочныеКС Тогда
			Если НЕ ЭтоОшибка Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если СтруктураОшибок.СтруктураОшибок.Свойство("Нарушение" + Счетчик) Тогда
			НарушениеДоп = СтруктураОшибок.СтруктураОшибок["Нарушение" + Счетчик];
		Иначе
			НарушениеДоп = Нарушение;
		КонецЕсли;

		мПорядковыйНомерФормулы = мПорядковыйНомерФормулы + 1;
		НомФ = Формат(мПорядковыйНомерФормулы, "ЧГ=0");

		ТекстРезультат = ?(ЭтоОшибка, мСоотношениеНеВыполнено, мСоотношениеВыполнено);

		ВывестиСекцию(Таб, СтрокаДанных, НомФ, ФормулаПредставл, Расшифровка, ТекстРезультат, НарушениеДоп, Описание, КомментКОшибки, ЭтоОшибка, НомерФормулыДляРасшифровки);

	КонецЦикла;

КонецПроцедуры // ВывестиОшибки

// ДобавитьДанныеВТаблицуСоставныхФормул
// Процедруа добавит строку, переданную ей через параметры в таблицу.
// Параметры:
//  
//
Процедура ДобавитьДанныеВТаблицуСоставныхФормул(ТаблицаЕсли, НомерФормулы, НомерПодФормулы, ПредставлениеФормулы, Расшифровка, Статус, Нарушение, Описание, Комментарий, НомерРасшифровки)

	ЗарегистрироватьФормулуДляРасшифровки(ПредставлениеФормулы, НомерРасшифровки);

	НовСтр = ТаблицаЕсли.Добавить();
	НовСтр.НомерФормулы = НомерФормулы;
	НовСтр.НомерПодФормулы = НомерПодФормулы;
	НовСтр.Формула = ПредставлениеФормулы;
	НовСтр.Расшифровка = Расшифровка;
	НовСтр.Статус = Статус;
	НовСтр.Нарушение = Нарушение;
	НовСтр.Описание = Описание;
	НовСтр.Комментарий = Комментарий;
	НовСтр.НомерРасшифровки = НомерРасшифровки;

КонецПроцедуры // ДобавитьДанныеВТаблицуСоставныхФормул

// СформироватьТаблицыНастроек
//
Процедура СформироватьТаблицыНастроек();

	Если мДеревоОтчетов = Неопределено Тогда
		СформироватьОсновнуюТаблицуСвойствОтчетов();
	КонецЕсли;

	СформироватьТаблицуТекстовПоказателей();

КонецПроцедуры // СформироватьТаблицыНастроек

// СформироватьТаблицуТекстовПоказателей
// Процедура формирует таблицу с текстами показателей, которые будут подставлены в формулу.
//
Процедура СформироватьТаблицуТекстовПоказателей()

	мТекстыПоказателей = Новый ТаблицаЗначений;
	мТекстыПоказателей.Колонки.Добавить("Показатель");
	мТекстыПоказателей.Колонки.Добавить("ЯвныйТекст");
	мТекстыПоказателей.Колонки.Добавить("Чему");
	мТекстыПоказателей.Колонки.Добавить("БольшеЧегоПроцент");

	Макет = мФормаОтчета.ЭтотОбъект.ПолучитьМакет("СоотношенияПоказателей" + СтрЗаменить(СохраненныйДокумент.ВыбраннаяФорма, "ФормаОтчета", ""));
	ТекОбласть = Макет.Области.Найти("Показатели");

	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

		НовСтр = мТекстыПоказателей.Добавить();
		НовСтр.Показатель = СокрЛП(Макет.Область(Ном, 2).Текст); // Название показателя
		НовСтр.ЯвныйТекст = СокрЛП(Макет.Область(Ном, 3).Текст); // Явный текст показателя
		НовСтр.Чему = СокрЛП(Макет.Область(Ном, 4).Текст); // Чему
		НовСтр.БольшеЧегоПроцент = СокрЛП(Макет.Область(Ном, 5).Текст); // Больше чего и проценты

	КонецЦикла;

КонецПроцедуры // СформироватьТаблицуТекстовПоказателей

/////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, непосредственно участвующие в макете формул.
/////////////////////////////////////////////////////////////////////////////////////

// ВыполнитьПроверкуУСН1
// Функция выполняет проверку контрольного соотношения. По формуле ВыполнитьПроверкуУСН1,
// которая задана в шаблоне КС.
// Будет проверена правильность заполнения граф, в зависимости от выбранного объекта налогообложения.
// Параметры:
//  ОтчетныйПериод - базовый период проверки декларации. Структура.
//  ТаблицаПодходящихДокументов - таблица сохраненных документов.
// Возвращаемое значение:
//  Структура, содержащая параметры, кол-во ошибок и описания каждой ошибки.
//
Функция ВыполнитьПроверкуУСН1(ОтчетныйПериод, ТаблицаПодходящихДокументов, СистемаУСНвДекларацииДоходы)

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0;

	СтруктураОшибок = Новый Структура;

	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл

		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		// Проверка титульного листа.

		Если СистемаУСНвДекларацииДоходы = Неопределено Тогда

			Описание = "Не установлен объект налогообложения на титульном листе декларации.";

			ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
			мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;

			Расшифровка = "";
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), Описание);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), Истина);

			Формула = "РегламентированныйОтчетУСН.Объект1";
			Показатель = "Объект1";
			// Зарегистрируем формулу.

			ЗарегистрироватьФормулуДляРасшифровки(Описание);

			// Добавим к формуле показатель.
			ЗарегистрироватьПоказательДляРасшифровки(Показатель, Описание, "", Формула, Стр.СсылкаНаРО, "Титульный");
			Продолжить;


		КонецЕсли;

		Для Каждого ПоказательСтр Из Док.ПоказателиОтчета.ПолеТабличногоДокументаРаздел2 Цикл

			Показатель = ПоказательСтр.Ключ;

			// Должна быть одна строка. В декларации по прибыли в процедуре ИнициализацияСоставаПоказателей
			// данная колонка отсутствует, что сказывается при тестировании не открывая декларации (например, при выгрузке
			// с включенным флагом проверки КС).
			// Временно будем анализировать наличие этой колонки, и если она есть, то осуществлять по ней тоже поиск.
			// НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре");

			СтрокаКолонокДляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
			// Требуемый показатель данного сохраненного документа
			Если мТаблицаСоставПоказателей.Колонки.Найти("КодПоказателяПоСтруктуре") <> Неопределено Тогда
				СтрокаКолонокДляПоиска = СтрокаКолонокДляПоиска + ", КодПоказателяПоСтруктуре";
			КонецЕсли;

			НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(Показатель, СтрокаКолонокДляПоиска);

			// Если показателя нет в составе показателей, тогда пропускаем.
			Если НайденнаяСтрока = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			НомерГрафы = Прав(Показатель, 2);
			Значение = ПоказательСтр.Значение;
			ОшибкаПризнана = Ложь;
			Если (НомерГрафы = "04"
			   И СистемаУСНвДекларацииДоходы = Истина
			   И Значение <> 0
			   И Показатель <> "П000020007004"
			   И Показатель <> "П000020009004") 
			   Или (СистемаУСНвДекларацииДоходы = Неопределено
			   И Значение <> 0
			   И Показатель <> "П000020007004"
			   И Показатель <> "П000020009004"
			   И НомерГрафы = "04") Тогда

				Описание = "Найден заполненный показатель, заполняемый только в случае, если объект налогообложения ""доходы, уменьшенные на величину расходов"". " + РегламентированнаяОтчетность.УдобочитаемоеПредставлениеПоКодуПоказателя(Показатель);
				ОшибкаПризнана = Истина;

			ИначеЕсли (НомерГрафы = "03"
			   И (НЕ (СистемаУСНвДекларацииДоходы = Истина))
			   И Значение <> 0
			   И Показатель <> "П000020007003") 
			   Или (СистемаУСНвДекларацииДоходы = Неопределено
			   И Значение <> 0
			   И Показатель <> "П000020007003"
			   И НомерГрафы = "03") Тогда

				Описание = "Найден заполненный показатель, заполняемый только в случае, если объект налогообложения ""доходы"". " + РегламентированнаяОтчетность.УдобочитаемоеПредставлениеПоКодуПоказателя(Показатель);
				ОшибкаПризнана = Истина;

			КонецЕсли;

			Если ОшибкаПризнана Тогда

				ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
				мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;

				Расшифровка = Строка(Значение) + " Итог [" + Строка(Значение) + "]";
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), Описание);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшбика" + Формат(ОбщееЧислоОшибок, "ЧГ=0"), Истина);

				Формула = "РегламентированныйОтчетУСН." + Показатель;
				// Зарегистрируем формулу.

				ЗарегистрироватьФормулуДляРасшифровки("Проверка правильности заполнения граф, в соответствии с объектом налогообложения.");

				// Добавим к формуле показатель.
				ЗарегистрироватьПоказательДляРасшифровки(Показатель, ПолучитьТекстовоеПредставлениеФормулы(Формула, "РегламентированныйОтчетУСН"), Значение, Формула, Стр.СсылкаНаРО, "Раздел2");

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Если ОбщееЧислоОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ВыполнитьПроверкуУСН1

Процедура ИнициализироватьЕдиницыИзмерения(Док)

	Если Док.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1 Тогда
		мДелитель = 1;
	ИначеЕсли Док.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000 Тогда
		мДелитель = 1000;
	ИначеЕсли Док.ЕдиницаИзмерения = Перечисления.ПорядкиОкругленияОтчетности.Окр1000000 Тогда
		мДелитель = 1000000;
	КонецЕсли;

	мТочностьЕдиницыИзмерения = Док.ТочностьЕдиницыИзмерения;

КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////
/// ОБРАБОТЧИКИ СОБЫЙТИ
/////////////////////////////////////////////////////////////////////////////////////

// КоманднаяПанель1ПересчитатьОбновить
//
Процедура КоманднаяПанель1ПересчитатьОбновить(Кнопка)

	КонтрольныеСоотношения();

КонецПроцедуры // КоманднаяПанель1ПересчитатьОбновить

// Процедура - обработчик события "Нажатие" кнопки "КнопкаАктивизироватьРодительскийОтчет" нижней командной панели формы
// Активизирует форму родительского отчета, если та еще не закрыта
//
Процедура ОсновныеДействияФормыКнопкаАктивизироватьРодительскийОтчет(Кнопка)
	
	Если Форма <> Неопределено И Форма.Открыта() Тогда
		Форма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыКнопкаАктивизироватьРодительскийОтчет

// Процедура - обработчик события "Нажатие" кнопки "Сохранить" нижней командной панели формы
// Сохраняет табличный документ в виде файла MXL, в который выводятся расшифровки выбранных
// пользователем показателей
//
Процедура ОсновныеДействияФормыКнопкаСохранить(Кнопка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Расширение = "mxl";
	Диалог.Фильтр = "Табличные документы (*.mxl)|*.mxl";
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ЭлементыФормы.ПолеТабличногоДокументаКС.Записать(Диалог.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	Исключение
		Сообщить("Не удалось записать файл на диск. Возможно, диск защищен от записи или недостаточно места на диске", СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры // ОсновныеДействияФормыКнопкаСохранить

// ПриОткрытии
//
Процедура ПриОткрытии()

	Если мПересобратьИСнятьФлОшибок = Неопределено Тогда
		ОтобразитьТолькоОшибочныеКС = Истина;
	ИначеЕсли мПересобратьИСнятьФлОшибок = Истина Тогда
		ОтобразитьТолькоОшибочныеКС = Ложь;
	КонецЕсли;

	Если мЭтоНалоговыйПериод = Неопределено Тогда
		// Т.к. в расчете нет деления на ОП и ОНП тогда скроем флаг периодов.
		ЭлементыФормы.ОтобразитьФормулыВсехПериодов.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии

// ПолеТабличногоДокументаКСОбработкаРасшифровки
//
Процедура ПолеТабличногоДокументаКСОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормаРасшифровки = ПолучитьФорму("РасшифровкаКонтрольныхСоотношений");
	ФормаРасшифровки.НачальноеЗначениеВыбора = ЭтаФорма;
	ФормаРасшифровки.Показать(Расшифровка, СписокРасшифровкиПоказателей, СписокРасшифровкиформулы);

КонецПроцедуры // ПолеТабличногоДокументаКСОбработкаРасшифровки

// ОтобразитьТолькоОшибочныеКСПриИзменении
//
Процедура ОтобразитьТолькоОшибочныеКСПриИзменении(Элемент)
	КонтрольныеСоотношения();
КонецПроцедуры // ОтобразитьТолькоОшибочныеКСПриИзменении

// ОтобразитьФормулыВсехПериодовПриИзменении
//
Процедура ОтобразитьФормулыВсехПериодовПриИзменении(Элемент)
	КонтрольныеСоотношения();
КонецПроцедуры // ОтобразитьФормулыВсехПериодовПриИзменении

// ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если СохраненныйДокумент = Неопределено И Форма = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Обработка предназначена только для вызова из регламентированной отчетности и не предназначена для открытия из пункта ""Операции"" стандартного меню!");
	КонецЕсли;

КонецПроцедуры // ПередОткрытием


мСоотношениеВыполнено = "Соотношение выполнено.";
мСоотношениеНеВыполнено = "Соотношение не выполнено.";
мСостояниеФормулы = "Не проверяется.";
мРезультатПоУсловию = "Соотношение не проверяется, т.к. не выполнено условие.";

Если мТаблицаОшибокКС = Неопределено Тогда
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	мОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	мТаблицаОшибокКС = Новый ТаблицаЗначений;
	мТаблицаОшибокКС.Колонки.Добавить("Номер",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	мТаблицаОшибокКС.Колонки.Добавить("КонтрольноеСоотношение",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
	мТаблицаОшибокКС.Колонки.Добавить("Расшифровка",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
	мТаблицаОшибокКС.Колонки.Добавить("РезультатПроверки",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254));
	мТаблицаОшибокКС.Колонки.Добавить("ПометитьКрасным", мОписаниеТиповБулево);
	мТаблицаОшибокКС.Колонки.Добавить("НормаЗаконодательства",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
	мТаблицаОшибокКС.Колонки.Добавить("ОписаниеНарушения",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
	мТаблицаОшибокКС.Колонки.Добавить("Комментарий",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000));
	мТаблицаОшибокКС.Колонки.Добавить("СсылкаНаТаблРасш", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10));
	//мТаблицаОшибокКС.Колонки.Добавить("НомерРасшифровкиДляСоставныхФормул");
КонецЕсли;


мТаблицаСоотношений = ЭлементыФормы.ПолеТабличногоДокументаКС;//Новый ТабличныйДокумент;
мТаблицаСоотношений.АвтоМасштаб = Истина;
мТаблицаСоотношений.ОтображатьСетку = Ложь;
мТаблицаСоотношений.ОтображатьЗаголовки = Ложь;
мТаблицаСоотношений.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;

