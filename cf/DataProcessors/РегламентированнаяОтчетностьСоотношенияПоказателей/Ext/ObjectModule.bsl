#Если ТолстыйКлиентОбычноеПриложение Тогда
Перем мДеревоОтчетов Экспорт;
Перем мТекстыПоказателей Экспорт;
// Таблица состава показателей из декларации
Перем мТаблицаСоставПоказателей Экспорт;

// Ссылка на форму отчета
Перем мФормаОтчета Экспорт;

Перем мКэшТаблицаРезультатов;
Перем мКэшТаблицаДокументов;
// Используется для определения типа показателя, и страниц, где он находится.
// Для своего отчета источника не кэшируются данные.
Перем мКэшТблСоставПок;

Перем мДелитель Экспорт;
Перем мТочностьЕдиницыИзмерения Экспорт;

Перем мИнтерактивныйРежим Экспорт;
Перем мТаблицаОшибокКС Экспорт;

// Таблицы системы расшифровки показателей
Перем СписокРасшифровкиФормулы Экспорт;
Перем СписокРасшифровкиПоказателей Экспорт;

Перем мСчетчикФормулДляРасшифровок Экспорт;

// Признак, проверяемая декларация относится к налоговому или к отчетному периоду.
// Может принимать значение Неопределено, в том случае, если в декларации не предусмотрен налоговый период, пример в расчете по авансовым платежам.
Перем мЭтоНалоговыйПериод Экспорт;

Перем мТекстДляЗаголовочнойЧасти Экспорт;

// Переменная для определения режима пересбора и перепоказа данных из диалога
Перем мПересобратьИСнятьФлОшибок Экспорт;

// Таблица с текущим, проверяемым документом. Формируется в процедуре КонтрольныеСоотношения
Перем мТаблицаСПроверяемымДокументом Экспорт;

// ПроверитьВСписке
// Функция предназначена для проверки значений, которые в отчетах выбираются из списков. Списки можно отключать и вводить данные в ручную. Для проверки правильности ввода данных и соответствию их списку служит данная функция.
// Параметры:
//  ИмяРаздела   - название раздела или листа в отчете
//  ТипРаздела   - 0 – раздел не многостраничный, 1 – многостраничный
//  Показатель   - название показателя, непосредственное хранение данных, 
//                 если необходимо проверять многострочность, тогда указывается
//                 первый существующий элемент многострочного блока
//  ТипПоказателя - 0 – обычный показатель не входящий в многострочность,
//                 1 – показатель входит в многострочность,
//                 2 – показатель входит в многострочность и многостраничность,
//                 3 - показатель входит в многостраничность.
//  ЗначенияВКвадратиках - 1 - значение в квадратиках, указанный показатель имя первого квадратика без смысловой части, 0 - обычно.
//  НазваниеСписка - название макета в объекте декларации
//  НазваниеОбласти – название области в макете
//  ТекстПроверяемоеСоотношение – текст, который будет выводится на основной лист
//                 контрольных соотношений.
//  ТекстВЗаголовкеКРасшифровке – текст, который будет выводится в заголовке окна Расшифровка.
//  НазваниеПоказателя – название показателя, которое будет выводится в окне расшифровки,
//                 если показатель в многострочной части, будет добавлен номер строки,
//                 если многостраничной части, то номер страницы.
//  ПустоеЗначениеЯвляетсяОшибкой - если 1, тогда пустое значение будет являться ошибкой, если 0 - то пустое значение не явл. ошибкой
//  ТаблицаПодходящихДокументов - таблица подходящих для проверки документов.
// Возвращаемое значение:
//  Структура данных, содержащая результат проверки.
//
Функция ПроверитьВСписке(ИмяРаздела, ТипРаздела, Показатель, ТипПоказателя, ЗначенияВКвадратиках, НазваниеСписка,
                         НазваниеОбласти, ТекстПроверяемоеСоотношение, ТекстВЗаголовкеКРасшифровке,
                         НазваниеПоказателя, ПустоеЗначениеЯвляетсяОшибкой, ТаблицаПодходящихДокументов) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;
	ВозможныеЗначения = ПолучитьВозможныеЗначения(НазваниеСписка, НазваниеОбласти);
	Для каждого Стр Из ТаблицаПодходящихДокументов Цикл
		Док = Стр.СохраненныйДок;

		ПоказательДляРасш = Показатель;

		Если ТипРаздела = "0" Тогда

			Если ТипПоказателя = "0" Тогда

				мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
				ЗарегистрироватьФормулуДляРасшифровки(ТекстВЗаголовкеКРасшифровке);

				Если ЗначенияВКвадратиках = "1" Тогда
					Значение = СокрЛП(СобратьЗначениеВКвадратиках(Док.ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяРаздела], Показатель));
					ПоказательДляРасш = Показатель + "1";
					ОбработатьРезультатПроверкиВСписке(ПоказательДляРасш, ТекстВЗаголовкеКРасшифровке, Значение, Стр, ИмяРаздела, ВозможныеЗначения, ОбщееЧислоОшибок, ОбщееЧислоБЕЗОшибок, СтруктураОшибок, ТекстПроверяемоеСоотношение, ПустоеЗначениеЯвляетсяОшибкой);
				КонецЕсли;
			ИначеЕсли ТипПоказателя = "1" Тогда
				// П000040001001_
				// П000040001001
				// П0000400010
				Блок = Сред(Показатель, 1, 11);
				Колонка = Сред(Показатель, 1, 13);
				Для каждого СтрокаМнЧ Из Док.ДанныеМногострочныхРазделов[Блок] Цикл

					Инд = Док.ДанныеМногострочныхРазделов[Блок].Индекс(СтрокаМнЧ);
					ИндСтр = Формат(Инд + 1, "ЧГ=0");
					Значение = СокрЛП(СтрокаМнЧ[Колонка]);
					Если ПустаяСтрока(Значение) Тогда
						Продолжить;
					КонецЕсли;

					мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
					ЗарегистрироватьФормулуДляРасшифровки(ТекстВЗаголовкеКРасшифровке);

					ПоказательДляРасш = Колонка + "_" + ИндСтр;
					ТекстВЗаголовкеКРасшифровке1 = ТекстВЗаголовкеКРасшифровке + ", строка № " + Строка(ИндСтр);
					ОбработатьРезультатПроверкиВСписке(ПоказательДляРасш, ТекстВЗаголовкеКРасшифровке1, Значение, Стр, ИмяРаздела, ВозможныеЗначения, ОбщееЧислоОшибок, ОбщееЧислоБЕЗОшибок, СтруктураОшибок, ТекстПроверяемоеСоотношение, ПустоеЗначениеЯвляетсяОшибкой);
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ТипРаздела = "1" Тогда
			// РАЗДЕЛ МНОГОСТРАНИЧНЫЙ
			Для каждого Страница Из Док.ДанныеМногостраничныхРазделов[ИмяРаздела] Цикл
				// Регистрируем формулу для каждого экземпляра листа.
				мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
				ЗарегистрироватьФормулуДляРасшифровки(ТекстВЗаголовкеКРасшифровке);

				НомерСтраницы = Строка(Док.ДанныеМногостраничныхРазделов[ИмяРаздела].Индекс(Страница) + 1);
				Если ТипПоказателя = "3" Тогда
					Если ЗначенияВКвадратиках = "1" Тогда
						Значение = СокрЛП(СобратьЗначениеВКвадратиках(Страница.Данные, Показатель));
						ПоказательДляРасш = Показатель + "1";
					ИначеЕсли ЗначенияВКвадратиках = "0" Тогда
						Значение = Страница.Данные[Показатель];
					КонецЕсли;

					ТекстВЗаголовкеКРасшифровке1 = ТекстВЗаголовкеКРасшифровке + ", страница № " + НомерСтраницы;
					ОбработатьРезультатПроверкиВСписке(ПоказательДляРасш, ТекстВЗаголовкеКРасшифровке1, Значение, Стр, ИмяРаздела, ВозможныеЗначения, ОбщееЧислоОшибок, ОбщееЧислоБЕЗОшибок, СтруктураОшибок, ТекстПроверяемоеСоотношение, ПустоеЗначениеЯвляетсяОшибкой, НомерСтраницы);

				ИначеЕсли ТипПоказателя = "2" Тогда
					Блок = Сред(Показатель, 1, 11);
					Колонка = Сред(Показатель, 1, 13);

					Для каждого СтрокаМнЧ Из Страница.ДанныеДопСтрок Цикл

						Инд = Страница.ДанныеДопСтрок.Индекс(СтрокаМнЧ);
						ИндСтр = Формат(Инд + 1, "ЧГ=0");
						Значение = СокрЛП(СтрокаМнЧ[Колонка]);
						Если ПустаяСтрока(Значение) Тогда
							Продолжить;
						КонецЕсли;

						мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
						ЗарегистрироватьФормулуДляРасшифровки(ТекстВЗаголовкеКРасшифровке);

						ПоказательДляРасш = Колонка + "_" + ИндСтр;
						ТекстВЗаголовкеКРасшифровке1 = ТекстВЗаголовкеКРасшифровке + ", страница № " + НомерСтраницы + ", строка № " + Строка(ИндСтр);
						ОбработатьРезультатПроверкиВСписке(ПоказательДляРасш, ТекстВЗаголовкеКРасшифровке1, Значение, Стр, ИмяРаздела, ВозможныеЗначения, ОбщееЧислоОшибок, ОбщееЧислоБЕЗОшибок, СтруктураОшибок, ТекстПроверяемоеСоотношение, НомерСтраницы);

					КонецЦикла;
				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверитьВСписке

// ОбработатьРезультатПроверкиВСписке
//
Процедура ОбработатьРезультатПроверкиВСписке(ПоказательДляРасш, ТекстВЗаголовкеКРасшифровке, Знач Значение, Стр, ИмяРаздела, ВозможныеЗначения, ОбщееЧислоОшибок, ОбщееЧислоБЕЗОшибок, СтруктураОшибок, ТекстПроверяемоеСоотношение, ПустоеЗначениеЯвляетсяОшибкой, НомерСтраницыЭкз = Неопределено)
	// Для случаев, если код на многостраничном разделе, здесь анализируем на его пустоту.
	Если ПустаяСтрока(Значение) Тогда
		Значение = "";
	КонецЕсли;

	ЗарегистрироватьПоказательДляРасшифровки(ПоказательДляРасш, ТекстВЗаголовкеКРасшифровке, Значение, "", Стр.СсылкаНаРО, ИмяРаздела, Неопределено, НомерСтраницыЭкз);

	// Непосредственно проверяем на ошибку
	Если (ПустоеЗначениеЯвляетсяОшибкой = "1") И (ПустаяСтрока(Значение)) Тогда
		НайденнаяСтр = Неопределено
	Иначе
		НайденнаяСтр = ВозможныеЗначения.Найти(Значение, "Код");
	КонецЕсли;
	Если НайденнаяСтр = Неопределено Тогда
		ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
		ЭтоОшибка = Истина;
	Иначе
		ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
		ЭтоОшибка = Ложь;
	КонецЕсли;

	Если ПустаяСтрока(Значение) Тогда
		Расшифровка = "Пустое значение";
	Иначе
		Расшифровка = "Указанное значение " + Значение;
	КонецЕсли;
	СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Указанное значение отсутствует в списке значений, доступных для указания в отчете");
	СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
	СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), мСчетчикФормулДляРасшифровок);
	СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);
	СтруктураОшибок.Вставить("ТекстовоеПредставлениеФормулы" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ТекстПроверяемоеСоотношение);

КонецПроцедуры // ОбработатьРезультатПроверкиВСписке

// СобратьЗначениеВКвадратиках
//
Функция СобратьЗначениеВКвадратиках(СтруктураДанных, Префикс)
	Инд = 1;
	Результат = "";
	Пока СтруктураДанных.Свойство(Префикс + Строка(Инд)) Цикл
		Результат = Результат + СтруктураДанных[Префикс + Строка(Инд)];
		Инд = Инд + 1;
	КонецЦикла;
	Возврат Результат;
КонецФункции // СобратьЗначениеВКвадратиках

// ПолучитьВозможныеЗначения
//
Функция ПолучитьВозможныеЗначения(НазваниеСписка, НазваниеОбласти)
	ТаблРезультат = Новый ТаблицаЗначений;
	ТаблРезультат.Колонки.Добавить("Код");
	ТаблРезультат.Колонки.Добавить("Название");

	// Макет = Отчеты[СохраненныйДокумент.ИсточникОтчета].ПолучитьМакет(НазваниеСписка);
	Макет = мФормаОтчета.ЭтотОбъект.ПолучитьМакет(НазваниеСписка);
	ТекОбласть = Макет.Области.Найти(НазваниеОбласти);

	Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл
		// Перебираем строки макета.
		Код = СокрП(Макет.Область(Ном, 1).Текст);
		Название = СокрП(Макет.Область(Ном, 2).Текст);
		Если Код = "###" Тогда
			Прервать;
		Иначе
			НовСтрока = ТаблРезультат.Добавить();
			НовСтрока.Код= Код;
			НовСтрока.Название = Название;
		КонецЕсли;

	КонецЦикла;

	Возврат ТаблРезультат;

КонецФункции // ПолучитьВозможныеЗначения

// ПолучитьТаблицуУсловийОтПоказателя
// Функция разбирает строку переданную ей через параметр и составляет таблицу условий,
// которая будет задействована при считывании основного параметра заданного в формуле.
// Параметры:
//  Настройка      - настройка формулы, уже готовая к разбору
// Возвращаемое значение:
//  Таблица состоящая из показателя, логического знака и значения
//
Функция ПолучитьТаблицуУсловийОтПоказателя(Знач Настройка)
	Перем НовСтр;

	Табл = Новый ТаблицаЗначений;
	Табл.Колонки.Добавить("Показатель");
	Табл.Колонки.Добавить("ЛогическийЗнак");
	Табл.Колонки.Добавить("ЗначениеПоказателя");
	// Уберем знак ?
	Настройка = СокрЛП(СтрЗаменить(Настройка, "?", ""));

	ЛогическийЗнак = "";
	ЛогическийЗнак = "";

	Для Инд = 1 По СтрЧислоВхождений(Настройка, " ") + 1 Цикл
		Часть = ПолучитьЗаданнуюЧасть(Настройка, Инд);

		Если Часть = "=" Или Часть = "<=" Или Часть = ">" Или Часть = ">=" Или Часть = "<>" Тогда
			ЛогическийЗнак = Часть;
			НовСтр.ЛогическийЗнак = Часть;
			Продолжить;
		ИначеЕсли (Найти(ВРег(Часть), "ИЛИ") > 0)
		   Или (СтрДлина(Часть) = 1 И ВРег(Часть) = "И") Тогда
		    ЛогическоеУсловие = Нрег(Часть);
		    ЛогическийЗнак = "";
		Иначе
			Если РегламентированнаяОтчетность.ПустоеЗначение(ЛогическийЗнак) Тогда
				НовСтр = Табл.Добавить();
				НовСтр.Показатель = Часть;
			Иначе

				// Пытаемся определить, число ли задано или строка, чтобы в табл. уже с готовы типом записать.
				Если Найти(Часть, """") = 1 И Прав(Часть, 1) = """" Тогда
					Часть = Сред(Часть, 2, СтрДлина(Часть) - 2);
				Иначе

					Если (Найти(Часть, ",") > 0) Или (Найти(Часть, "-") > 0) Тогда
						ПредваритЧисло = СтрЗаменить(Часть, ",", "");
						ПредваритЧисло = СтрЗаменить(Часть, "-", "");
					Иначе
						ПредваритЧисло = Часть;
					КонецЕсли;

					ПредваритЧисло = СокрЛП(ПредваритЧисло);
					Если ОбщегоНазначения.ТолькоЦифрыВСтроке(ПредваритЧисло) Тогда
						Часть = Число(Часть);
					КонецЕсли;

				КонецЕсли;

				НовСтр.ЗначениеПоказателя = Часть;
				ЛогическийЗнак = "";

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	Возврат Табл;

КонецФункции // ПолучитьТаблицуУсловийОтПоказателя

// ЗарегистрироватьПоказательДляРасшифровки
// Процедура регистрирует показатель для расшифровки
//
Процедура ЗарегистрироватьПоказательДляРасшифровки(ИмяПоказателя, ПредставлениеПоказателя, ЗначениеПоказателя, ФормулаПоказателя, СсылкаНаДокументРО, ИмяСтраницы, ДополнительныеВозможности = Неопределено, НомерСтраницыДляМногостраничныхРазделов = Неопределено) Экспорт

	НовСтр = СписокРасшифровкиПоказателей.Добавить();
	НовСтр.Номер = мСчетчикФормулДляРасшифровок;
	НовСтр.ИмяПоказателя = ИмяПоказателя;
	НовСтр.ПредставлениеПоказателя = ПредставлениеПоказателя;
	НовСтр.ЗначениеПоказателя = ЗначениеПоказателя;
	НовСтр.ФормулаПоказателя = ФормулаПоказателя;
	НовСтр.СсылкаНаДокументРО = СсылкаНаДокументРО;
	НовСтр.ИмяСтраницы = ИмяСтраницы;
	НовСтр.Страница = ?(НомерСтраницыДляМногостраничныхРазделов = Неопределено, "", НомерСтраницыДляМногостраничныхРазделов);
	НовСтр.ДополнительныеВозможности = ДополнительныеВозможности;

КонецПроцедуры // ЗарегистрироватьПоказательДляРасшифровки

// ЗарегистрироватьФормулуДляРасшифровки
// Процедура регистрирует формулу в таблице расшифровок.
//  ТекстовоеПредставлениеФормулы    - текстовое представление формулы.
//  ТребуемыйНомерДляСоставныхФормул - для механизма составных формул, требуется не генерировать новый ключ формулы, а уже сохраненный использовать.
//                         использется только при выводе блока формул, которые оформлены как состовные части.
//
Процедура ЗарегистрироватьФормулуДляРасшифровки(ТекстовоеПредставлениеФормулы, ТребуемыйНомерДляСоставныхФормул = Неопределено) Экспорт

	НовСтр = СписокРасшифровкиФормулы.Добавить();
	НовСтр.ТекстовоеПредставлениеФормулы = ТекстовоеПредставлениеФормулы;
	НовСтр.Номер = ?(ТребуемыйНомерДляСоставныхФормул = Неопределено, мСчетчикФормулДляРасшифровок, ТребуемыйНомерДляСоставныхФормул);

КонецПроцедуры // ЗарегистрироватьФормулуДляРасшифровки

// ПолучитьЛогическоеУсловиеОтПоказателя
// Функция возвращает строку, логического знака "И" или "ИЛИ"
// Параметры:
//  НастройкаОтПоказателя - строка формулы
// Возвращаемое значение:
//  Строка "И" или "ИЛИ" в зависимости от формулы
//
Функция ПолучитьЛогическоеУсловиеОтПоказателя(Знач НастройкаОтПоказателя)
	Если Найти(ВРег(НастройкаОтПоказателя), " И ") > 0 Тогда
		Возврат "И";
	ИначеЕсли Найти(ВРег(НастройкаОтПоказателя), "ИЛИ") > 0 Тогда
		Возврат "ИЛИ";
	Иначе
		Возврат "И";
	КонецЕсли;

КонецФункции // ПолучитьЛогическоеУсловиеОтПоказателя

// СоздатьКэшРезультатов
// Процедура создает вспомогательную таблицу для хранения результатов, при повторной формуле
// значение рассчитываться не будет, а будет браться из таблицы кэша.
//
Процедура СоздатьКэшРезультатов()

	Если мКэшТаблицаРезультатов = Неопределено Тогда

		мКэшТаблицаРезультатов = Новый ТаблицаЗначений;
		мКэшТаблицаРезультатов.Колонки.Добавить("Формула");
		мКэшТаблицаРезультатов.Колонки.Добавить("Результат");
		мКэшТаблицаРезультатов.Колонки.Добавить("СсылкаНаТаблицуРасшифровок");
		мКэшТаблицаРезультатов.Колонки.Добавить("ИмяСтраницы");

	КонецЕсли;
	
	Если мКэшТаблицаДокументов = Неопределено Тогда

		мКэшТаблицаДокументов = Новый ТаблицаЗначений;
		мКэшТаблицаДокументов.Колонки.Добавить("Источник");
		мКэшТаблицаДокументов.Колонки.Добавить("НастройкаОтбораПоДатам");
		мКэшТаблицаДокументов.Колонки.Добавить("ДатаНач");
		мКэшТаблицаДокументов.Колонки.Добавить("ДатаКон");
		мКэшТаблицаДокументов.Колонки.Добавить("РезультирующаяТаблица");

	КонецЕсли;

	Если мКэшТблСоставПок = Неопределено Тогда
		мКэшТблСоставПок = Новый ТаблицаЗначений;
		мКэшТблСоставПок.Колонки.Добавить("ИсточникОтчета");
		мКэшТблСоставПок.Колонки.Добавить("ДатаОкончания");
		мКэшТблСоставПок.Колонки.Добавить("ТблСоставПок");
	КонецЕсли;

КонецПроцедуры // СоздатьКэшРезультатов

// ОбнулитьКэшРезультатов
// Процедура создает вспомогательную таблицу для хранения результатов, при повторной формуле
// значение рассчитываться не будет, а будет браться из таблицы кэша.
//
Процедура ОбнулитьКэшРезультатов() Экспорт

	мКэшТаблицаРезультатов = Неопределено;
	мКэшТаблицаДокументов = Неопределено;
	мКэшТблСоставПок = Неопределено;

КонецПроцедуры // ОбнулитьКэшРезультатов

// ПолучитьСохраненныеДокументы
// Функия вычислить все документы, которые подоходят под условия по периодам и корректировки декларации.
// Параметры:
//  ИсточникОтчета - источник отчета.
//  Организация    - ссылка на справочник организаций.
//  ТаблицаПериод  - таблица с периодами, подпадающими под выборку.
//  БазовыйПериод  - базовый период. Структура, дата начала и конца проверяемого док-та.
//  УчитыватьКорр  - учитывать признаки корректирующих и первичных деклараций.
//         по умолчанию, этот признак равен Истине.
// ОграничитьВыборкуЗаданнымДокументом - по умолчанию неопределено, если Истина
// то в итоговой таблице будет ссылка на текущий документ.
//  ИМНС           - для какой инспекции нужно отбирать декларации, по умолчанию Неопределено - для всех.
//  ВыбраннаяФорма - форма, которая использовалась при создании декларации.
//
// Возвращаемое значение:
//  ТаблицаДокументов - колонки:
//                "ВидДок" - вид документа.
//    "НомерКорректировки" - номер корректировки.
//        "СохраненныйДок" - данные декларации.
//
Функция ПолучитьСохраненныеДокументы(ИсточникОтчета, Организация, ТаблицаПериод, БазовыйПериод, УчитыватьКорр = Истина, ОграничитьВыборкуЗаданнымДокументом = Неопределено, ИМНС = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);

	// ИсточникОтчетаСтру = Новый Структура;
	// Структура для поиска отчетов в документах регламентированный отчет
	// ИсточникОтчетаСтру.Вставить("ИсточникОтчета", ИсточникОтчета);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Вид,
	               |	РегламентированныйОтчет.КодИМНС,
	               |	РегламентированныйОтчет.Ссылка,
	               |	РегламентированныйОтчет.ВыбраннаяФорма,
	               |	РегламентированныйОтчет.ДатаНачала,
	               |	РегламентированныйОтчет.ДатаОкончания
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	               |	И РегламентированныйОтчет.Организация = &Организация";

	ВсеОтчетыОрганизации = Запрос.Выполнить().Выгрузить();

	ТаблицаПодходящихДокументов = Новый ТаблицаЗначений;
	ТаблицаПодходящихДокументов.Колонки.Добавить("ВидДок", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3, 0));
	ТаблицаПодходящихДокументов.Колонки.Добавить("НомерКорректировки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(3, 0));
	ТаблицаПодходящихДокументов.Колонки.Добавить("СохраненныйДок");
	ТаблицаПодходящихДокументов.Колонки.Добавить("ИМНС",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(4));
	ТаблицаПодходящихДокументов.Колонки.Добавить("СсылкаНаРО");

	Если ТаблицаПериод = Неопределено Тогда

		ТаблицаПериод = Новый ТаблицаЗначений;
		ТаблицаПериод.Колонки.Добавить("ДатаНач", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаПериод.Колонки.Добавить("ДатаКон", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаПериод.Колонки.Добавить("ВсеДеклГода"); // Все декларации текущего отчетного года

		НовыйПериод = ТаблицаПериод.Добавить();
		НовыйПериод.ДатаНач = БазовыйПериод.ДатаНач;
		НовыйПериод.ДатаКон = БазовыйПериод.ДатаКон;

	Конецесли;

	Для каждого РегламентированныйОтчет Из ВсеОтчетыОрганизации Цикл

		Если ОграничитьВыборкуЗаданнымДокументом = Истина Тогда

			Если СохраненныйДокумент.Ссылка <> РегламентированныйОтчет.Ссылка Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		Если ИМНС <> Неопределено Тогда
			Если Найти(ИсточникОтчета, "РегламентированныйОтчетБаланс") = 0
		       И Найти(ИсточникОтчета, "РегламентированныйОтчетФорма2") = 0
		       И Найти(ИсточникОтчета, "РегламентированныйОтчетФорма3") = 0
		       И Найти(ИсточникОтчета, "РегламентированныйОтчетФорма4") = 0
		       И Найти(ИсточникОтчета, "РегламентированныйОтчетФорма5") = 0
		       И Найти(ИсточникОтчета, "РегламентированныйОтчетФорма6") = 0
		       И Найти(ИсточникОтчета, "РегламентированныйОтчет4ФСС") = 0 Тогда

			// Для форм бух. учета код ИФНС не сохраняется в документе РО, поэтому не анализируем.

				// Дополнительное условие по коду ИМНС
				Если РегламентированныйОтчет.КодИМНС <> ИМНС Тогда
					// Пропустим декларацию, где код ИМНС не совпадает с требованием.
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ВыбраннаяФорма <> Неопределено Тогда

			// В случае, если в формуле обращение идет к прошлому периоду, в котором возможно действовала другая форма отчета этого объекта, тогда
			// будем учитывать ту форму, которая указана в формуле. Допустимо, пнпФормаОтчета2006Кв1 или пнпФормаОтчета2006Кв1, ФормаОтчета2007Кв1
			Если Найти(ВыбраннаяФорма, "пнп") = 1 Тогда

				Если (Найти(ВыбраннаяФорма, РегламентированныйОтчет.ВыбраннаяФорма) = 0) И (СохраненныйДокумент.ИсточникОтчета = ИсточникОтчета) Тогда
					Продолжить;
				КонецЕсли;

			Иначе

				// Задано дополнительно условие по используемой форме.
				Если (РегламентированныйОтчет.ВыбраннаяФорма <> ВыбраннаяФорма) И (СохраненныйДокумент.ИсточникОтчета = ИсточникОтчета) Тогда
					// Пропустим декларацию, которая создана другой формой, т.к. состав показателей может отличаться и данные могут быть искажены.
					// По текущему проверяемому отчету.
					Продолжить;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если ДатыНеУдовлетворяютЗаданнымПараметрам(РегламентированныйОтчет.ДатаНачала, РегламентированныйОтчет.ДатаОкончания, ТаблицаПериод, БазовыйПериод.ДатаНач, БазовыйПериод.ДатаКон) Тогда
			// Если не подходит период
			Продолжить;
		КонецЕсли;

		// Если все подошло, и в будущем, будет стоять признак "УчаствуетВКамеральнойПроверки"
		СохраненныйДок = РегламентированныйОтчет.Ссылка.ДанныеОтчета.Получить();

		Попытка
			ВидДок = ?(РегламентированныйОтчет.Вид = 0, 1, 3);
			НомКоррект = ?(ВидДок = 3, РегламентированныйОтчет.Вид, 0);
		Исключение
			// Для форм бухгалтерской отчетности.
			ВидДок = 1;
			НомКоррект = 0;
		КонецПопытки;

		Если (ВидДок = 3 И НомКоррект = 0)
		   Или (ВидДок = 1 И НомКоррект <> 0)
		   Или (ВидДок <> 3 И ВидДок <> 1) Тогда
		// В таком случае, считаем, что пользователь ошибся, пропускаем эту декларацию.
			Продолжить;

		Иначе

			НовСтр = ТаблицаПодходящихДокументов.Добавить();
			НовСтр.ВидДок = ВидДок;
			НовСтр.НомерКорректировки = НомКоррект;
			НовСтр.СохраненныйДок = СохраненныйДок;
			НовСтр.ИМНС = РегламентированныйОтчет.КодИМНС;
			НовСтр.СсылкаНаРО = РегламентированныйОтчет.Ссылка;

		КонецЕсли;

	КонецЦикла; // Пока - цикл перебора документов, с одноименным названием

	// теперь определим, какие док-ты подойдуту, в связке ПервичыйКорректирующий

	Если НЕ УчитыватьКорр Тогда
		Возврат ТаблицаПодходящихДокументов;
	КонецЕсли;

	СтруктураДляПоиска = Новый Структура;
	СтруктураДляПоиска.Вставить("ВидДок", 3);

	КорректирующиеДекл = ТаблицаПодходящихДокументов.НайтиСтроки(СтруктураДляПоиска);

	Если КорректирующиеДекл = Неопределено Или КорректирующиеДекл.Количество() = 0 Тогда
		// Корректирующих деклараций нет.

		Возврат ТаблицаПодходящихДокументов;

	Иначе
	// найдены корректирующие декларации, нужно выбрать последние.
		ТаблицаПодходящихДокументов.Сортировать("НомерКорректировки Убыв");
		МаксЗнКорр = ТаблицаПодходящихДокументов[0].НомерКорректировки;

		СтруктураДляПоиска = Новый Структура;
		СтруктураДляПоиска.Вставить("НомерКорректировки", МаксЗнКорр);

		// Осуществим выборку по максимальному значению корректировки, т.к. может быть
		// больше одной декл. с одинаковой корректировкой.
		КорректирующиеДекл = ТаблицаПодходящихДокументов.НайтиСтроки(СтруктураДляПоиска);

		РезультирующаяТаблица = ТаблицаПодходящихДокументов.Скопировать();
		РезультирующаяТаблица.Очистить();
		Если КорректирующиеДекл.Количество() > 0 Тогда

			Для Каждого Стр из КорректирующиеДекл Цикл
				НовСтр = РезультирующаяТаблица.Добавить();
				НовСтр.ВидДок = Стр.ВидДок;
				НовСтр.НомерКорректировки = Стр.НомерКорректировки;
				НовСтр.СохраненныйДок = Стр.СохраненныйДок;
				НовСтр.ИМНС = Стр.ИМНС;
				НовСтр.СсылкаНаРО = Стр.СсылкаНаРО;

			КонецЦикла;

		КонецЕсли;

		Возврат РезультирующаяТаблица;

	КонецЕсли;

КонецФункции // ПолучитьСохраненныеДокументы

// СформироватьОсновнуюТаблицуСвойствОтчетов
// Формирует таблицу св-в отчетов.
//
// Параметры:
//  Нет
//
Процедура СформироватьОсновнуюТаблицуСвойствОтчетов() Экспорт

	КонстантаНазвМакетаОтчетов  = "СписокОтчетов";

	КонстантаНазвОбластивМакете = Новый СписокЗначений;
	КонстантаНазвОбластивМакете.Добавить("Группа_002"); // Бухгалтерские формы
	КонстантаНазвОбластивМакете.Добавить("Группа_003"); // Налоговые формы
	КонстантаНазвОбластивМакете.Добавить("Группа_004"); // Отчетность по ФЛ
	КонстантаНазвОбластивМакете.Добавить("Группа_005");
	КонстантаНазвОбластивМакете.Добавить("Группа_006");
	КонстантаНазвОбластивМакете.Добавить("Группа_007");
	КонстантаНазвОбластивМакете.Добавить("Группа_008");
	КонстантаНазвОбластивМакете.Добавить("Группа_009");
	КонстантаНазвОбластивМакете.Добавить("Группа_010");

	ОписаниеТиповСтрока3 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(3);
	ОписаниеТиповСтрока1000 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1000);

	мДеревоОтчетов           = Новый ДеревоЗначений;
	мДеревоОтчетов.Колонки.Добавить("Описание", ОписаниеТиповСтрока1000);
	мДеревоОтчетов.Колонки.Добавить("Источник", ОписаниеТиповСтрока1000);
	мДеревоОтчетов.Колонки.Добавить("Наименование", ОписаниеТиповСтрока1000);
	мДеревоОтчетов.Колонки.Добавить("Шаг", ОписаниеТиповСтрока3);
	мДеревоОтчетов.Колонки.Добавить("Нарастающий", ОписаниеТиповСтрока3);
	мДеревоОтчетов.Колонки.Добавить("Группа", ОписаниеТиповСтрока1000);

	ЭталонныеИсточники = Обработки.ОбновлениеРегламентированнойОтчетности.ПолучитьМакет(КонстантаНазвМакетаОтчетов);

	мДеревоОтчетов.Строки.Очистить();

	Для Каждого Обл Из КонстантаНазвОбластивМакете Цикл

		ТекОбласть = ЭталонныеИсточники.Области.Найти(Обл.Значение);

		ГруппаОтчетов = Обл.Значение;
		Для Ном = ТекОбласть.Верх По ТекОбласть.Низ Цикл

			СтрокаУровня1 = мДеревоОтчетов.Строки.Добавить();
			СтрокаУровня1.Наименование = ЭталонныеИсточники.Область(Ном, 2).Текст; // наименование
			СтрокаУровня1.Описание = ЭталонныеИсточники.Область(Ном, 3).Текст; // описание
			СтрокаУровня1.Источник = ЭталонныеИсточники.Область(Ном, 4).Текст; // Источник
			// Временно отключено. Не ясно как обращаться к данным прошлого периода бух. форм.
			//Если ГруппаОтчетов = "Группа_002" Тогда
			//	// Для бухгалтерской отчетности шаг всегда будет 3 (и квартально можно заполнять и по месяцам).
			//	СтрокаУровня1.Шаг = "3";
			//Иначе
				СтрокаУровня1.Шаг = ОпределитьПризнакиПериодов(ЭталонныеИсточники.Область(Ном, 5).Текст);
			//КонецЕсли;
			СтрокаУровня1.Нарастающий = ОпределитьПризнакиПериодичности(ЭталонныеИсточники.Область(Ном, 5).Текст);
			СтрокаУровня1.Группа = ГруппаОтчетов;

		КонецЦикла; // Ном =

	КонецЦикла;

КонецПроцедуры // СформироватьОсновнуюТаблицуСвойствОтчетов

// ОпределитьПризнакиПериодов
// Функция определяет признаки шагов отчета.
// Параметры:
//  ПериодыКолонка13 - строка из макета СписокОтчетов обработки ОбновлениеРегламентированнойОтчетности
//  ИсточникОтчета - название исчтоника, служит для определения формы у бухгалтерской отчетности.
// Возвращаемое значение:
//  Признак строка 1 - если квартально может сдаваться форма;
//                 2 - ежемесячно;
//                 3 - ежемесячно и квартально;
//                 4 - полугодие;
//                 5 - год;
//
Функция ОпределитьПризнакиПериодов(ПериодыКолонка13)

	Если (Найти(ПериодыКолонка13, "Месяц") > 0)
	   И (Найти(ПериодыКолонка13, "Квартал") > 0) Тогда
		Возврат "3";
	ИначеЕсли (Найти(ПериодыКолонка13, "Месяц") > 0)
		    И (Найти(ПериодыКолонка13, "Квартал") = 0) Тогда
		Возврат "2";
	ИначеЕсли (Найти(ПериодыКолонка13, "Квартал") > 0)
		    И (Найти(ПериодыКолонка13, "Месяц") = 0) Тогда
		Возврат "1";
	ИначеЕсли (Найти(ПериодыКолонка13, "Полугодие") > 0) Тогда
		Возврат "4";
	ИначеЕсли (Найти(ПериодыКолонка13, "Год:") > 0) Тогда
		Возврат "5";
	КонецЕсли;

КонецФункции // ОпределитьПризнакиПериодов

// ПериодичностьКолонка9
// Функция определяет признаки шагов отчета.
// Параметры:
//  ПериодичностьКолонка9 - строка из макета СписокОтчетов обработки ОбновлениеРегламентированнойОтчетности
// Возвращаемое значение:
//  Признак строка 1 - отчет нарастающим итогом
//                 0 - отчет не нарастающим итогом;
//
Функция ОпределитьПризнакиПериодичности(ПериодичностьКолонка9)

	Если (Найти(ПериодичностьКолонка9, "НарастающимИтогом") > 0) Тогда
		Возврат "1";
	Иначе
		Возврат "0";
	КонецЕсли;

КонецФункции // ПериодичностьКолонка9

// ОпределитьСпециальныеПараметрыПоказателя
// Функция возвращает настройки показателя, для тех случаев, когда в составе показателя явно не указаны св-ва показателя, его тип и т.д.
// Характерно для случаев, когда число разбито по квадратикам или многострочная часть в квадартиках, пример в авансах по ЕСН.
// Также используется в расшифровке при активизации на заданной ячейке.
// Возвращаемое значение:
//  Неопределено, если для показателя не предусмотрены специальные системы хранения. И структура, для специальных показателей, описывающая
//  данные из состава показателей, тип, адрес ячейки в табличном поле и т.д.
//
Функция ОпределитьСпециальныеПараметрыПоказателя(ИмяПоказателяИспользуемогоВФормуле) Экспорт
	// Для отчета по авансам по есн, форма 2005 г.
	Результат = Неопределено;
	Если (СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетАвансыПоЕСН") И
	      (СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2005Кв1" Или
	       СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2007Кв1")
	       Тогда
		Если (Найти(ИмяПоказателяИспользуемогоВФормуле, "СуммаМес1Раздел1_") > 0)
		   Или (Найти(ИмяПоказателяИспользуемогоВФормуле, "СуммаМес2Раздел1_") > 0)
		   Или (Найти(ИмяПоказателяИспользуемогоВФормуле, "СуммаМес3Раздел1_") > 0) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяСтраницы", "Раздел1");
			Результат.Вставить("ПоказательВМногостраничнойЧасти", Ложь);
			Результат.Вставить("ТипДанных", "Е");
			НомерМесяца = Сред(ИмяПоказателяИспользуемогоВФормуле, 9, 1);
			Фонд = Сред(ИмяПоказателяИспользуемогоВФормуле, 18, 1);

			Если Фонд = "1" Тогда
				ФондТекст = "ФБ";
			ИначеЕсли Фонд = "2" Тогда
				ФондТекст = "ФСС";
			ИначеЕсли Фонд = "3" Тогда
				ФондТекст = "ФФОМС";
			ИначеЕсли Фонд = "4" Тогда
				ФондТекст = "ТФОМС";
			КонецЕсли;

			ИмяПервойЯчейкиНаЛисте = "СумНалогМ" + НомерМесяца+ ФондТекст + "1";
			Результат.Вставить("КоординатаНаЛисте", ИмяПервойЯчейкиНаЛисте); // Для процедуры активизации на листе.
		КонецЕсли;
	ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетАвансыПФР" И СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2005Кв1" Тогда
		ИмяПервойЯчейкиНаЛисте = "";
		Если ИмяПоказателяИспользуемогоВФормуле = "Сумма1Раздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СумНалогСтрах1М1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Сумма2Раздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СумНалогСтрах2М1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Сумма3Раздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СумНалогСтрах3М1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Сумма1Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СумНалогНакоп1М1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Сумма2Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СумНалогНакоп2М1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Сумма3Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СумНалогНакоп3М1";
		КонецЕсли;
		Если НЕ ПустаяСтрока(ИмяПервойЯчейкиНаЛисте) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяСтраницы", "Раздел1");
			Результат.Вставить("ПоказательВМногостраничнойЧасти", Ложь);
			Результат.Вставить("ТипДанных", "Е");
			Результат.Вставить("КоординатаНаЛисте", ИмяПервойЯчейкиНаЛисте); // Для процедуры активизации на листе.
		КонецЕсли;
	ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетПрибыль" И (СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2006Кв1"
		  Или СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2007Кв1") Тогда
		ИмяПервойЯчейкиНаЛисте = "";
		Если ИмяПоказателяИспользуемогоВФормуле = "СуммаДоплФедРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаДоплФед_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаУменФедРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаУменФед_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаПерехФедРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаПерехФед_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаДоплСубРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаДоплСуб_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаУменСубРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаУменСуб1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаПерехСубРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаПерехСуб1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаПерехМестРаздел1_1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаПерехМест1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "КодОкатоРаздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "КодОКАТО_1_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СрокУплаты1Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СрокУплаты11";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СрокУплаты2Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СрокУплаты21";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СрокУплаты3Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СрокУплаты31";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "КБКвФБРаздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "КБКвФБ_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаФедПоСроку1Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаФедПоСроку1_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаФедПоСроку2Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаФедПоСроку2_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаФедПоСроку3Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаФедПоСроку3_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "КБКвБСРаздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "КБКвБС_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаСубПоСроку1Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаСубПоСроку1_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаСубПоСроку2Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаСубПоСроку2_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "СуммаСубПоСроку3Раздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаСубПоСроку3_1";
		КонецЕсли;

		Если НЕ ПустаяСтрока(ИмяПервойЯчейкиНаЛисте) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяСтраницы", "Раздел1_1");
			Результат.Вставить("ПоказательВМногостраничнойЧасти", Ложь);
			Результат.Вставить("ТипДанных", "Е");
			Результат.Вставить("КоординатаНаЛисте", ИмяПервойЯчейкиНаЛисте); // Для процедуры активизации на листе.
		КонецЕсли;
	ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетНДС0" И СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2006Кв1" Тогда
		ИмяПервойЯчейкиНаЛисте = "";
		Если ИмяПоказателяИспользуемогоВФормуле = "СумИсчКВозмРаздел1" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаИсчКВозм1";
		КонецЕсли;

		Если НЕ ПустаяСтрока(ИмяПервойЯчейкиНаЛисте) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяСтраницы", "Раздел1");
			Результат.Вставить("ПоказательВМногостраничнойЧасти", Ложь);
			Результат.Вставить("ТипДанных", "Е");
			Результат.Вставить("КоординатаНаЛисте", ИмяПервойЯчейкиНаЛисте); // Для процедуры активизации на листе.
		КонецЕсли;

	ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетНДС" И СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2006Кв1" Тогда
		ИмяПервойЯчейкиНаЛисте = "";
		Если ИмяПоказателяИспользуемогоВФормуле = "СуммаНалогаРаздел1_2" Тогда
			ИмяПервойЯчейкиНаЛисте = "СуммаНалога1";
		КонецЕсли;

		Если НЕ ПустаяСтрока(ИмяПервойЯчейкиНаЛисте) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяСтраницы", "Раздел1_2");
			Результат.Вставить("ПоказательВМногостраничнойЧасти", Ложь);
			Результат.Вставить("ТипДанных", "Е");
			Результат.Вставить("КоординатаНаЛисте", ИмяПервойЯчейкиНаЛисте); // Для процедуры активизации на листе.
		КонецЕсли;

	ИначеЕсли СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетНДС" И СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2007Кв1" Тогда
		ИмяПервойЯчейкиНаЛисте = "";
		Если ИмяПоказателяИспользуемогоВФормуле = "Строка090Раздел2" Тогда
			ИмяПервойЯчейкиНаЛисте = "Сумма090Раздел2_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Строка110Раздел2" Тогда
			ИмяПервойЯчейкиНаЛисте = "Сумма110Раздел2_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Строка120Раздел2" Тогда
			ИмяПервойЯчейкиНаЛисте = "Сумма120Раздел2_1";
		ИначеЕсли ИмяПоказателяИспользуемогоВФормуле = "Строка130Раздел2" Тогда
			ИмяПервойЯчейкиНаЛисте = "Сумма130Раздел2_1";
		КонецЕсли;

		Если НЕ ПустаяСтрока(ИмяПервойЯчейкиНаЛисте) Тогда
			Результат = Новый Структура;
			Результат.Вставить("ИмяСтраницы", "Раздел2");
			Результат.Вставить("ПоказательВМногостраничнойЧасти", Истина);
			Результат.Вставить("ТипДанных", "Е");
			Результат.Вставить("КоординатаНаЛисте", ИмяПервойЯчейкиНаЛисте); // Для процедуры активизации на листе.
		КонецЕсли;

	КонецЕсли;
	Возврат Результат;
КонецФункции // ОпределитьСпециальныеПараметрыПоказателя

// ПроверитьИНН
// Функция проверяет правильность указания ИНН.
// Раздел4.ТипРаздела.П000040008004_1.ТипПоказателя.ТипПоказателя2.Вар.Реакция
// =ТипРаздела
// 0-обычный
// 1-многостраничный
// =ТипПоказателя
// 0-не многострочный
// 1-многострочный - это первый показатель проверяемый
// =ТипПоказателя2
// 0-не составной показатель, не в квадратиках
// 1-составной, в случае, если составной, то не предусмотрена обработка как многострочной чатси, т.к. параметр ТипПоказателя должен быть равен 0 и проверять нужно по отдельности каждый показатель.
// =Вар
// 0-ИНН должны быть ЮР = 10
// 1-ИНН должны быть ФИЗ = 12
// 2-Могут быть и те и другие
// =Реаккция
// 0-если пустое значение, это не ошибка, просто не указан ИНН
// 1-если пустое значение, это ошибка, ИНН должен быть указан
// =ПредставлениееРаздела
//  Текст - представление раздела, например: Раздел 2
//
// Параметры:
//  ПолнаяФормула  - полный текст формулы
//  СтрокаНастройки- строка настройки макета
//
// Возвращаемое значение:
//  Структура, содержащая проверенные соотношения.
//
Функция ПроверитьИНН(Знач ПолнаяФормула, СтрокаНастройки) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;

	// Всегда только текущий документ
	ДокументыДляПроверки = мТаблицаСПроверяемымДокументом;

// *****************************
	// Разберем формулу, инициализируем настройку
	ПараметрыФормулы = ПолучитьЗаданнуюЧасть(ПолнаяФормула, 0, ".");
	ИмяСтраницы = ПараметрыФормулы[0].Представление; // ИмяСтраницы
	ТипРаздела = ПараметрыФормулы[1].Представление; // Тип раздела
	НачальноеИмяПоказателя = ПараметрыФормулы[2].Представление; // Имя показателя
	ТипПоказателя = ПараметрыФормулы[3].Представление; // ТипПоказателя
	ТипПоказателя2 = ПараметрыФормулы[4].Представление; // ТипПоказателя 2
	ПоказательВМногострочнойЧасти = ?(ТипПоказателя = "1", Истина, Ложь);
	СоставнойПоказатель = ?(ТипПоказателя2 = "1", Истина, Ложь);
	// ВариантУказанияИНН
	// 0 - только ЮР.
	// 1 - только Физ.
	// 2 - и ЮР и Физ
	ВариантУказанияИНН = ПараметрыФормулы[5].Представление; // Вариант указания ИНН

	Реакция = ПараметрыФормулы[6].Представление; // Реакция на пустое значение
	ПустойИННЭтоОшибка = ?(Реакция = "0", Ложь, Истина);
	ПредставлениеРаздела = ПараметрыФормулы[7].Представление; // Представление раздела

	Многостраничность = ?(ТипРаздела = "1", Истина, Ложь);

	Для каждого Стр Из ДокументыДляПроверки Цикл

		Если Многостраничность Тогда
			ВсегоСтраниц = Стр.СохраненныйДок.ДанныеМногостраничныхРазделов[ИмяСтраницы].Количество();
		Иначе
			ВсегоСтраниц = 1;
		КонецЕсли;

		Если Многостраничность Тогда
			НомерНужнойСтраницы = ВсегоСтраниц - 1;
			Старт = 0;
		Иначе
			Старт = 1;
			НомерНужнойСтраницы = 1;
		КонецЕсли;

		Для Инд = Старт По НомерНужнойСтраницы Цикл

			// Получим структуру данных.
			Если Многостраничность Тогда
				СтруктураДанных = Стр.СохраненныйДок.ДанныеМногостраничныхРазделов[ИмяСтраницы][Инд].Данные;
			Иначе
				СтруктураДанных = Стр.СохраненныйДок.ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяСтраницы];
			КонецЕсли;

			ВыполнятьЦикл = Истина;
			ИмяПоказателя = НачальноеИмяПоказателя;
			Пока СтруктураДанных.Свойство(ИмяПоказателя) И ВыполнятьЦикл Цикл

				Если СоставнойПоказатель Тогда
					Префикс = Сред(ИмяПоказателя, 1, СтрДлина(ИмяПоказателя) - 1);
					ЗначениеПоказателя = СобратьЗначениеВКвадратиках(СтруктураДанных, Префикс);
					// Далее не выполняем проверку, т.к. многострочность и составное представление
					// не предусмотрено, в этом случае необходимо каждый показатель проверять.
					ВыполнятьЦикл = Ложь;
				Иначе
					ЗначениеПоказателя = СтруктураДанных[ИмяПоказателя];
				КонецЕсли;

				Если ПустойИННЭтоОшибка И ПустаяСтрока(ЗначениеПоказателя) Тогда
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ЭтоОшибка = Истина;
				ИначеЕсли (НЕ ПустойИННЭтоОшибка) И (ПустаяСтрока(ЗначениеПоказателя)) Тогда
					// ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					// ЭтоОшибка = Ложь;

					Если ПоказательВМногострочнойЧасти Тогда
						ТекСчетчик = Число(Прав(ИмяПоказателя, СтрДлина(ИмяПоказателя) - НайтиСПрава(ИмяПоказателя, "_")));
						ТекСчетчик = ТекСчетчик + 1;
						ИмяПоказателя = Сред(ИмяПоказателя, 1, НайтиСПрава(ИмяПоказателя, "_")) + Формат(ТекСчетчик, "ЧГ=0");
					КонецЕсли;

					Продолжить;
				Иначе
					Если ВариантУказанияИНН = "0" Тогда
						// Только ЮР
						ИННВерный = РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ЗначениеПоказателя, Ложь);
					ИначеЕсли ВариантУказанияИНН = "1" Тогда
						// Только Физ.
						ИННВерный = РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ЗначениеПоказателя, Истина);
					ИначеЕсли ВариантУказанияИНН = "2" Тогда
						// Или Юр. или Физ.
						ИННВерный = РегламентированнаяОтчетность.ИННСоответствуетТребованиямБезТипа(ЗначениеПоказателя);
					КонецЕсли;

					Если ИННВерный Тогда
						ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
						ЭтоОшибка = Ложь;
					Иначе
						ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
						ЭтоОшибка = Истина;
					КонецЕсли;
				КонецЕсли;

				// Зарегистрируем формулу
				мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
				ЗарегистрироватьФормулуДляРасшифровки(СтрокаНастройки.ПредставлениеФормулы);

				Расшифровка = ЗначениеПоказателя;
				Описание = "Указанный ИНН " + ?(ЭтоОшибка, "не", "") + " соответствует требованиям. " + ПредставлениеРаздела;
				НазваниеПоказателя = "ИНН, " + ПредставлениеРаздела;
				Если Многостраничность Тогда
					Описание = Описание + ", лист № " + Строка(Инд + 1);
					НазваниеПоказателя = НазваниеПоказателя + ", лист № " + Строка(Инд + 1);
				КонецЕсли;

				Если ПоказательВМногострочнойЧасти Тогда
					ТекСчетчик = Число(Прав(ИмяПоказателя, СтрДлина(ИмяПоказателя) - НайтиСПрава(ИмяПоказателя, "_")));
					Описание = Описание + ", строка № " + Формат(ТекСчетчик, "ЧГ=0");
					НазваниеПоказателя = НазваниеПоказателя + ", строка № " + Формат(ТекСчетчик, "ЧГ=0");
				КонецЕсли;

				Расшифровка = ?(ПустаяСтрока(ЗначениеПоказателя), "ИНН не указан", "Указанный ИНН " + ЗначениеПоказателя);
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Описание);
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);

				// Зарегистрируем показатель для расшифровки
				ЗарегистрироватьПоказательДляРасшифровки(ИмяПоказателя
				   , НазваниеПоказателя
				   , ЗначениеПоказателя
				   , ПолнаяФормула
				   , Стр.СсылкаНаРО
				   , ИмяСтраницы
				   , , ?(Многостраничность, Формат(Инд + 1, "ЧГ=0"), Неопределено));

				Если ПоказательВМногострочнойЧасти Тогда
					ТекСчетчик = ТекСчетчик + 1;
					ИмяПоказателя = Сред(ИмяПоказателя, 1, НайтиСПрава(ИмяПоказателя, "_")) + Формат(ТекСчетчик, "ЧГ=0");
				КонецЕсли;
			КонецЦикла;
		КонецЦикла; // Перебор страниц
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ПроверитьИНН

// НайтиСПрава
//
Функция НайтиСПрава(Знач СтрокаПоиска, ПодСимвол)
	Результат = 0;
	Для Инд = (-1) * СтрДлина(СтрокаПоиска) По -1 Цикл
		Если Сред(СтрокаПоиска, Инд * (-1), 1) = ПодСимвол Тогда
			Результат = Инд * (-1);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции // НайтиСПрава

// ВычислитьМногострочныйБлок
// Функция предназначена для выполения формулы внутри многострочных блоков.
// Пример написания:
// РегламентированныйОтчетНДС0.ВычислитьМногострочныйБлок.-1.Раздел2 Округлить(П000020001002_1) + П000020001003_1 + П000020001002_1
//
// Параметры:
//  
Функция ВычислитьМногострочныйБлок(Знач ПолнаяФормула, ТекстСоотношенийИзМакета) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;

	// Всегда только текущий документ
	ДокументыДляПроверки = мТаблицаСПроверяемымДокументом;

	ИсточникПоФормуле = Сред(ПолнаяФормула, 1, Найти(ПолнаяФормула, ".") - 1);
	НомерНужнойСтраницы = Число(ПолучитьЗаданнуюЧасть(ПолнаяФормула, 3, "."));
	// -1 означает, что раздел не многостраничный
	// 0 - сложить суммы со всех страниц многостраничного раздела
	// число - только нужная страница.

	Многостраничность = ?(НомерНужнойСтраницы <> -1, Истина, Ложь);
	ИмяСтраницы = ПолучитьЗаданнуюЧасть(ПолнаяФормула, 4, ".");
	ИмяСтраницы = Сред(ИмяСтраницы, 1, Найти(ИмяСтраницы, " ") - 1);

	ВнутФормула = ПолнаяФормула;

	Для Инд = 1 По 4 Цикл
		ВнутФормула = Сред(ВнутФормула, Найти(ВнутФормула, ".") + 1);
	КонецЦикла;
	ВнутФормула = Сред(ВнутФормула, СтрДлина(ИмяСтраницы) + 2);

	ЭлементыФормулы = Новый СписокЗначений;
	ЭлементыФормулы.Добавить("+");
	ЭлементыФормулы.Добавить("-");
	ЭлементыФормулы.Добавить("*");
	ЭлементыФормулы.Добавить("/");
	ЭлементыФормулы.Добавить("=");
	ЭлементыФормулы.Добавить(">=");
	ЭлементыФормулы.Добавить("<=");
	ЭлементыФормулы.Добавить("<>");
	ЭлементыФормулы.Добавить("(");
	ЭлементыФормулы.Добавить(")");

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));

	ТаблПоказателей = Новый ТаблицаЗначений;
	ТаблПоказателей.Колонки.Добавить("ИмяПоказателя");
	ТаблПоказателей.Колонки.Добавить("Округлять", Новый ОписаниеТипов(МассивБулево));
	ТаблПоказателей.Колонки.Добавить("Значение");
	ТаблПоказателей.Колонки.Добавить("ЗначениеСтр");

	РазборФормулы = СокрЛП(ВнутФормула);
	ПраваяЧасть = Ложь;
	Пока СтрДлина(РазборФормулы) > 0 Цикл
		ПоказательФормулы = Сред(РазборФормулы, 1, Найти(РазборФормулы, " ") - 1);
		Если (ЭлементыФормулы.НайтиПоЗначению(ПоказательФормулы) = Неопределено)
		   И (ПоказательФормулы <> "ПростоеОкруглениеРезультатаОтТочности")
		   И (НЕ РегламентированнаяОтчетность.роЯвляетсяЧислом(ПоказательФормулы)) Тогда

			НовСтр = ТаблПоказателей.Добавить();

			Если Найти(ПоказательФормулы, "Округлить(") > 0 Тогда
				ПоказательФормулы = СтрЗаменить(ПоказательФормулы, "Округлить(", "");
				ПоказательФормулы = СтрЗаменить(ПоказательФормулы, ")", "");
				НовСтр.Округлять = Истина;
				ОбратныйПоказатель = "Округлить(" + ПоказательФормулы + ")";
			Иначе
				НовСтр.Округлять = Ложь;
				ОбратныйПоказатель = ПоказательФормулы;
			КонецЕсли;

			НовСтр.ИмяПоказателя = ПоказательФормулы;
		Иначе
			ОбратныйПоказатель = ПоказательФормулы;
			Если (ПоказательФормулы = "=")
			 Или (ПоказательФормулы = ">=")
			 Или (ПоказательФормулы = "<=")
			 Или (ПоказательФормулы = "<>") Тогда
				НовСтр = ТаблПоказателей.Добавить();
				НовСтр.ИмяПоказателя = "РазделяющийЗнакФормулы" + ПоказательФормулы;
				НовСтр.Округлять = Ложь;
			КонецЕсли;
		КонецЕсли;

		РазборФормулы = СокрЛП(Сред(РазборФормулы, 1 + СтрДлина(ОбратныйПоказатель)));

	КонецЦикла;
	// + - / * =
	// П000020001009_1 = Округлить(П000020001005_1) + Округлить(П000020001006_1) + Округлить(П000020001007_1) - Округлить(П000020001008_1)

	ПервыйПоказатель = ТаблПоказателей[0].ИмяПоказателя;
	Если Найти(ПервыйПоказатель, "Округлить(") > 0 Тогда
		ПервыйПоказатель = СтрЗаменить(ПервыйПоказатель, "Округлить(", "");
		ПервыйПоказатель = СтрЗаменить(ПервыйПоказатель, ")", "");
	КонецЕсли;

	НомерСтартовойСтроки = Число(Сред(ПервыйПоказатель, 15));

	Для каждого Стр Из ДокументыДляПроверки Цикл

		Если Многостраничность Тогда
			ВсегоСтраниц = Стр.СохраненныйДок.ДанныеМногостраничныхРазделов[ИмяСтраницы].Количество();
		Иначе
			ВсегоСтраниц = 1;
		КонецЕсли;

		Если Многостраничность Тогда
			Если НомерНужнойСтраницы > 0 Тогда
				// Работает только с указанной странице
				НомерНужнойСтраницы = НомерНужнойСтраницы - 1;
				Старт = НомерНужнойСтраницы;
			ИначеЕсли НомерНужнойСтраницы = 0 Тогда
				// соберем сумму по всем листам многостраничного раздела
				НомерНужнойСтраницы = ВсегоСтраниц - 1;
				Старт = 0;
			КонецЕсли;
		Иначе
			Старт = 1;
			НомерНужнойСтраницы = 1;
		КонецЕсли;
// ******
		Для Инд = Старт По НомерНужнойСтраницы Цикл

			Если Многостраничность Тогда
				СтруктураДанных = Стр.СохраненныйДок.ДанныеМногостраничныхРазделов[ИмяСтраницы][Инд].Данные;
			Иначе
				СтруктураДанных = Стр.СохраненныйДок.ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяСтраницы];
			КонецЕсли;

			ПоказательЦикл = ПервыйПоказатель;
			НомерСтроки = НомерСтартовойСтроки;
			Пока СтруктураДанных.Свойство(ПоказательЦикл) Цикл

				// Зарегистрируем формулу
				мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
				ЗарегистрироватьФормулуДляРасшифровки(ТекстСоотношенийИзМакета);

				РазделяющийЗнакФормулы = "";
				ИтогПоСтрокеЛево = 0;
				ИтогПоСтрокеПраво = 0;

				ТекстРасчета = ВнутФормула;
				// Соберем все данные по строке.
				Сч = 0;
				Для каждого Показатель Из ТаблПоказателей Цикл
					Сч = Сч + 1;
					Если Найти(Показатель.ИмяПоказателя, "РазделяющийЗнакФормулы") > 0 Тогда
						РазделяющийЗнакФормулы = СтрЗаменить(Показатель.ИмяПоказателя, "РазделяющийЗнакФормулы", "");
						ЛеваяЧастьСтр = Сред(ТекстРасчета, 1, Найти(ТекстРасчета, РазделяющийЗнакФормулы) - 1);
						ИтогПоСтрокеЛево = РасчетФормулы(ЛеваяЧастьСтр, Ложь);
						Продолжить;
					КонецЕсли;

					СмысловаяЧасть = Сред(Показатель.ИмяПоказателя, 1, 13);
					НазваниеПоказателя = ЗаглавнаяБуква(ПолучитьНазваниеЧастногоПоказателя(СмысловаяЧасть, ИсточникПоФормуле) + " (строка № " + Формат(НомерСтроки, "ЧГ=0") + ")");
					ТекущийПоказатель = СмысловаяЧасть + "_" + Формат(НомерСтроки, "ЧГ=0");
					Значение = СтруктураДанных[ТекущийПоказатель];
					Если Показатель.Округлять Тогда
						Значение = ОкруглитьЧислоПоФормату(Значение);
						ОбратныйПоказатель = "Округлить(" + Показатель.ИмяПоказателя + ")";
					Иначе
						ОбратныйПоказатель = Показатель.ИмяПоказателя;
					КонецЕсли;
					Показатель.Значение = Значение;
					Показатель.ЗначениеСтр = Формат(Значение, "ЧРД=.;ЧН=0");
					ЗарегистрироватьПоказательДляРасшифровки(ТекущийПоказатель
					   , НазваниеПоказателя
					   , Значение
					   , ПолнаяФормула
					   , Стр.СсылкаНаРО
					   , ИмяСтраницы
					   , , ?(Многостраничность, Формат(Инд + 1, "ЧГ=0"), Неопределено));
					// Зарегистрируем показатели

					// Нельзя использоваться СтрЗаменить. Т.к. в формуле могут повторяться показатели.
					Координата = Найти(ТекстРасчета, ОбратныйПоказатель);
					ДоРезультата = Сред(ТекстРасчета, 1, Координата - 1);
					ПослеРезультата = Сред(ТекстРасчета, Координата + СтрДлина(ОбратныйПоказатель));
					ТекстРасчета = ДоРезультата + Показатель.ЗначениеСтр + ПослеРезультата;
					// Если последний показатель обрабатывается, тогда
					Если ТаблПоказателей.Количество() = Сч Тогда
						// Вычислим правую часть.
						ПраваяЧастьСтр = Сред(ТекстРасчета, Найти(ТекстРасчета, РазделяющийЗнакФормулы) + 1 + СтрДлина(РазделяющийЗнакФормулы));
						ИтогПоСтрокеПраво = РасчетФормулы(ПраваяЧастьСтр, Ложь);
					КонецЕсли;

				КонецЦикла;

				Если РасчетФормулы(ТекстРасчета, Ложь, Истина) Тогда
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					ЭтоОшибка = Ложь;
				Иначе
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ЭтоОшибка = Истина;
				КонецЕсли;

				Расшифровка = ЛеваяЧастьСтр + " Итог [" + Строка(ИтогПоСтрокеЛево) + "] " + РазделяющийЗнакФормулы + " " + ПраваяЧастьСтр + " Итог [" + Строка(ИтогПоСтрокеПраво) + "]";
				СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), "Возможна арифметическая ошибка. Строка многострочной части № " + Формат(НомерСтроки, "ЧГ=0"));
				СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
				СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), мСчетчикФормулДляРасшифровок);
				СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);

				НомерСтроки = НомерСтроки + 1;
				ПоказательЦикл = Сред(ПоказательЦикл, 1, 14) + Формат(НомерСтроки, "ЧГ=0");
			КонецЦикла;

		КонецЦикла; // Перебор страниц
	КонецЦикла;

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ВычислитьМногострочныйБлок

// ПолучитьИтогПоКолонке
// Функция возвращает итог, по заданной первой строке колонки.
//
// Пример иполняемой формулы
//
// РегламентированныйОтчетНДС0.ПолучитьИтогПоКолонке.-1.Истина.Раздел2.П000020001002_1
// где:
// -1 - означает что раздел не многостраничный. Возможны варианты:
//  0 - сумма по всем листам многостраничного док-та
//  число - сумма по нужному экземпляру многостраничного раздела
//
// Истина - округлять каждое полученное значение
//
// Поддерживает расшифровку показателей.
//
// Параметры
//  ПолнаяФормула   - полная формула, например РегламентированныйОтчетНДС0[ОтборПериод].ПолучитьИтогПоКолонке.*.Раздел2.П000020001002_1
//  ИсточникИзФормулы - источник отчета, из формулы
//  ТаблицаФильтрПериод - таблица фильтр по периодам
//  ТолькоБазовыйПериод - признак 100 - только базовый период
// 
// Возвращаемое значение:
//  Арифметическая сумма по колонке
//
Функция ПолучитьИтогПоКолонке(Знач ПолнаяФормула, Знач ИсточникИзФормулы, ТаблицаФильтрПериод, Знач ТолькоБазовыйПериод, Знач БазовыйПериод, Организация, ВыбраннаяФорма = Неопределено, ИМНС = Неопределено, ИмяСтраницы = Неопределено)
	// Перем РезультатНастройкиДейстий;
	// ТаблицаФильтрПериод = ВернутьТаблицуУсловийПоПериодам(РезультатНастройкиДейстий, ПолнаяФормула);
	Если ТолькоБазовыйПериод = 100 Тогда
		ДокументыДляПроверки = мТаблицаСПроверяемымДокументом;
	Иначе
		ДокументыДляПроверки = ПолучитьСохраненныеДокументы(ИсточникИзФормулы, Организация, ТаблицаФильтрПериод, БазовыйПериод, Истина, Неопределено, ИМНС, ВыбраннаяФорма);
	КонецЕсли;

	// Определим из формулы, является лист многостраничным

	НомерНужнойСтраницы = Число(ПолучитьЗаданнуюЧасть(ПолнаяФормула, 3, "."));
	// -1 означает, что раздел не многостраничный
	// 0 - сложить суммы со всех страниц многостраничного раздела
	// число - только нужная страница.

	Многостраничность = ?(НомерНужнойСтраницы <> -1, Истина, Ложь);

	Если ИмяСтраницы = Неопределено Тогда
		ИмяСтраницы = ПолучитьЗаданнуюЧасть(ПолнаяФормула, 5, ".");
	КонецЕсли;
	
	Округлять = ?(ПолучитьЗаданнуюЧасть(ПолнаяФормула, 4, ".") = "Истина", Истина, Ложь);
	Показатель = ПолучитьЗаданнуюЧасть(ПолнаяФормула, 6, ".");

	СмысловаяЧасть = Сред(Показатель, 1, 14);

	ОбщаяСуммаСоВсехДокументов = 0;
	Для каждого Стр Из ДокументыДляПроверки Цикл

		Если Многостраничность Тогда
			ВсегоСтраниц = Стр.СохраненныйДок.ДанныеМногостраничныхРазделов[ИмяСтраницы].Количество();
		Иначе
			ВсегоСтраниц = 1;
		КонецЕсли;

		Если Многостраничность Тогда
			Если НомерНужнойСтраницы > 0 Тогда
				// Работает только с указанной странице
				НомерНужнойСтраницы = НомерНужнойСтраницы - 1;
				Старт = НомерНужнойСтраницы;
			ИначеЕсли НомерНужнойСтраницы = 0 Тогда
				// соберем сумму по всем листам многостраничного раздела
				НомерНужнойСтраницы = ВсегоСтраниц - 1;
				Старт = 0;
			КонецЕсли;
		Иначе
			Старт = 1;
			НомерНужнойСтраницы = 1;
		КонецЕсли;

		// Собираем данные
		ТекИнд = Число(Сред(Показатель, 15));

		ОбщаяСуммаСоВсехСтраницДокумента = 0;
		Для Инд = Старт По НомерНужнойСтраницы Цикл

			Если Многостраничность Тогда
				СтруктураДанных = Стр.СохраненныйДок.ДанныеМногостраничныхРазделов[ИмяСтраницы][Инд].Данные;
			Иначе
				СтруктураДанных = Стр.СохраненныйДок.ПоказателиОтчета["ПолеТабличногоДокумента" + ИмяСтраницы];
			КонецЕсли;

			ОбщаяСумма = 0; // Начальная сумма
			// ТекИнд = ТекИнд + 1;
			ПоказательЦикл = СмысловаяЧасть + Формат(ТекИнд, "ЧГ=0");
			НомерСтроки = 1;
			Пока СтруктураДанных.Свойство(ПоказательЦикл) Цикл
				Значение = СтруктураДанных[ПоказательЦикл];
				Если Значение = 0 Тогда
					// Строки, где значения = 0 пропустим

					ТекИнд = ТекИнд + 1;
					НомерСтроки = НомерСтроки + 1;
					ПоказательЦикл = СмысловаяЧасть + Формат(ТекИнд, "ЧГ=0");

					Продолжить;
				КонецЕсли;

				Если Округлять Тогда
					Значение = ОкруглитьЧислоПоФормату(Значение);
				КонецЕсли;

				// Зарегистрируем для расшифровки
				ЗарегистрироватьПоказательДляРасшифровки(ПоказательЦикл, ПолучитьНазваниеЧастногоПоказателя(Сред(СмысловаяЧасть, 1, 13), ИсточникИзФормулы) + "
				 | строка № " + Формат(НомерСтроки, "ЧГ=0")
				, Значение, ПолнаяФормула, Стр.СсылкаНаРО, ИмяСтраницы, Неопределено, ?(Многостраничность, Формат(Инд + 1, "ЧГ=0"), Неопределено));

				ОбщаяСумма = ОбщаяСумма + Значение;
				ТекИнд = ТекИнд + 1;
				НомерСтроки = НомерСтроки + 1;
				ПоказательЦикл = СмысловаяЧасть + Формат(ТекИнд, "ЧГ=0");

			КонецЦикла;
			ОбщаяСуммаСоВсехСтраницДокумента = ОбщаяСумма + ОбщаяСуммаСоВсехСтраницДокумента;
		КонецЦикла; // Перебор страниц

		ОбщаяСуммаСоВсехДокументов = ОбщаяСуммаСоВсехДокументов + ОбщаяСуммаСоВсехСтраницДокумента;

	КонецЦикла;

	Возврат ОбщаяСуммаСоВсехДокументов;

КонецФункции // ПолучитьИтогПоКолонке

// ПолучитьЗначениеИзДокумента
// Функция получает значение, основываясь на формуле, написанной в специальном формате.
//
// Обрабатывает нижний уровень формулы.
// Возможные варианты написания формул по состоянию на 15.09.2005
// ИсточникОтчета[ВаринатыВыборки].Показатель[ВариантыВыборки2]
// Где:
// ВариантыВыборки может принимать значения:
// [-1]            - взять прошлый период от базисного отчетного периода.
// [ВсеПериоды-]    - взять декл. со всеми периодами отчетного года, не вкл. текущий период.
// [ВсеПериоды+]    - взять декл. со всеми периодами отчетного года, вкл. текущий период.
//
// ВариантыВыборки2 может принимать значений:
// [? Показатель1 = Значение2 ИЛИ Показатель2 = Значение2]
// В таких случаях, будет считан требуемый показатель с условиями перечисленными в ВариантВыборки2
//
// Параметры:
//  Формула        - формула
//  БазовыйПериод  - Структура, ДанаНач ДатаКон - отчетный период - Базовое значение
//  Организация    - Ссылка на справочник организаций, организация
//  ИМНС           - код имнс, может быть не указан, тогда по всем документам не учитывая ИМНС, если указан, то только по указанному коду.
//  ВыбраннаяФорма - форма отчета, которая использовалась про составлении декларации.
// Возвращаемое значение:
//  Значение       - значение из документа регламентированной отчетности.
//  В случае, если есть две и более декларации за одну организации и период, то выбирается последняя
//  по номеру корректировки на титульном листе.
//  В случае, если показателя нет вообще в декларации, возвращается число 0.
//
Функция ПолучитьЗначениеИзДокумента(Знач Формула, Знач БазовыйПериод, Организация, ИМНС = Неопределено, ВыбраннаяФорма = Неопределено) Экспорт

	// 1. Получим источник (отделим)
	// 2. Проверим существование источника по макету
	// 3. Сделамем выборку по документам
	// 4. Найдем требуемый показатель

	СоздатьКэшРезультатов();
	НайденнаяСтрока = мКэшТаблицаРезультатов.Найти(Формула, "Формула");

	Если НайденнаяСтрока <> Неопределено Тогда
		// Скопируем в таблицу расшифровок, данные по расшифровке, которые были уже получены ранее.
		Кэш = СписокРасшифровкиПоказателей.НайтиСтроки(Новый Структура("Номер, ФормулаПоказателя", НайденнаяСтрока.СсылкаНаТаблицуРасшифровок, Формула));
		// Добавим в таблицу расшифровок
		// Т.к. в кэше может быть что показатель встречался в нескольких однотипных документов отчето, то организуем цикл
		Для Каждого Зап Из Кэш Цикл
			НовСтр = СписокРасшифровкиПоказателей.Добавить();
			НовСтр.Номер = мСчетчикФормулДляРасшифровок; // Новый счетчик формул
			НовСтр.ИмяПоказателя = Зап.ИмяПоказателя;
			НовСтр.ПредставлениеПоказателя = Зап.ПредставлениеПоказателя;
			НовСтр.ЗначениеПоказателя = Зап.ЗначениеПоказателя;
			НовСтр.СсылкаНаДокументРО = Зап.СсылкаНаДокументРО;
			НовСтр.ФормулаПоказателя  = Зап.ФормулаПоказателя;
			НовСтр.ИмяСтраницы = Зап.ИмяСтраницы;
			НовСтр.Страница = Зап.Страница;
			НовСтр.ДополнительныеВозможности = Зап.ДополнительныеВозможности;
		КонецЦикла;

		Возврат НайденнаяСтрока.Результат;

	КонецЕсли;

	Попытка

	ПозПроцент = Найти(Формула, "%");
	Процент = 0;

	Если ПозПроцент > 0 Тогда

		Процент = Число(Сред(Формула, 1, ПозПроцент - 1));
		ЭталоннаяФормула = Формула;
		Формула = СтрЗаменить(Формула, Строка(Процент) + "%", "");

	КонецЕсли;

	ИсточникОтчета           = ПолучитьЗаданнуюЧасть(Формула, 1, ".");
	ИсточникОтчетаСФормулой = ИсточникОтчета;

	Если Найти(ИсточникОтчета, "[") > 0 Тогда

		ИсточникОтчета = ПолучитьЗаданнуюЧасть(Формула, 1, "[");

	КонецЕсли;

	// Режим, когда функция используется только для получения значений из рег. отчетов.
	Если мДеревоОтчетов = Неопределено Тогда
		// Сформированная настройка уже есть
		СформироватьОсновнуюТаблицуСвойствОтчетов();
	КонецЕсли;

	ПериодШагОтчета          = ПолучитьНастройкуОтчета(ИсточникОтчета, "Шаг");
	ПризнакНарастающегоИтога = ПолучитьНастройкуОтчета(ИсточникОтчета, "Нарастающий");

	ЧислоВходяхихЭлементов = СтрЧислоВхождений(Формула, ".") + 1;

	// Находим требуемый показатель
	ТребуемыйПоказатель    = ПолучитьЗаданнуюЧасть(Формула, ЧислоВходяхихЭлементов, ".");
	ТребуемыйПоказательСформулой = ТребуемыйПоказатель;

	Если Найти(ТребуемыйПоказатель, "[") > 0 Тогда

		ТребуемыйПоказатель = ПолучитьЗаданнуюЧасть(ТребуемыйПоказатель, 1, "[");

	КонецЕсли;

	Настройка = ПолучитьНастройкиФормулы(ИсточникОтчетаСФормулой);

	НастройкаОтПоказателя = ПолучитьНастройкиФормулы(ТребуемыйПоказательСФормулой);

	// Если есть настройки по периоду, тогда работаем с периодами
	// могут быть значения:
	// -n - n периодов назад
	//  S - период с начала года
	//nквартал  - требуемый квартал
	//nмесяц    - требуемый месяц
	//ОПn-ОПn+1 - диапазон периодов
	//ВсеПериоды- - все периоды тек. годо до текущего, не включая его.
	//ВсеПериоды+ - все периоды тек. годо до текущего, включая его.

	Если Настройка <> Неопределено Тогда
		РезультатНастройкиДейстий = РазборНастройкиПериода(Настройка);
	Иначе
		// Признак, что тек. базовый период будет браться в расчет.
		РезультатНастройкиДейстий = 100;
	КонецЕсли;

	РезультатНастройкиПоказатель = 0;
	Если НастройкаОтПоказателя <> Неопределено Тогда
		РезультатНастройкиПоказатель = РазборНастройкиПоказателя(НастройкаОтПоказателя);
	КонецЕсли;

	Если РезультатНастройкиПоказатель = 1 Тогда

		// Выбрать показатель с условиями
		ТаблУсловий = ПолучитьТаблицуУсловийОтПоказателя(НастройкаОтПоказателя);
		ЛогическоеУсловие = ПолучитьЛогическоеУсловиеОтПоказателя(НастройкаОтПоказателя);

	КонецЕсли;

	Результат = 0; // Накопительный результат, если в двух формах и периодах есть показатель, то сложим их

	// Работаем с предыдущем периодом
	Если Настройка <> Неопределено Тогда

		// Если шаг может быть месяц или квартал (сдается по месячно или квартально)
		// Получим возможный шаг для формы, может быть 1, 2 или 3 (1 или 2)
		Шаг = ПериодШагОтчета;
		НарастающийИтог = ?(ПризнакНарастающегоИтога = "1", Истина, Ложь);
		ТаблицаФильтрПериод = СформироватьТаблицуДляФильтраПоДатам(РезультатНастройкиДейстий, Шаг, НарастающийИтог, БазовыйПериод.ДатаНач, БазовыйПериод.ДатаКон, Настройка);

	Иначе

		// Если настройки по периодам нет, тогда текущий период
		ТаблицаФильтрПериод = СформироватьТаблицуДляФильтраПоДатам(100, 0, 0, БазовыйПериод.ДатаНач, БазовыйПериод.ДатаКон, 0);

	КонецЕсли;

	Если Найти(Формула, "ПолучитьИтогПоКолонке") > 0 Тогда

		ИмяСтраницы = ПолучитьЗаданнуюЧасть(Формула, 5, ".");
		Результат = ПолучитьИтогПоКолонке(Формула,
		                           ИсточникОтчета,
		                      ТаблицаФильтрПериод,
		                РезультатНастройкиДейстий,
		                            БазовыйПериод,
		                              Организация,
		                                     ИМНС,
		                           ВыбраннаяФорма,
		                              ИмяСтраницы);

	// Запшем в кеш
		НовСтр = мКэшТаблицаРезультатов.Добавить();
		НовСтр.Формула = Формула;
		НовСтр.Результат = Результат;
		НовСтр.СсылкаНаТаблицуРасшифровок = мСчетчикФормулДляРасшифровок;
		НовСтр.ИмяСтраницы = ИмяСтраницы;

		Возврат Результат;
	КонецЕсли;

	// На этом этапе определим, в какой области данных находится требуемый нам параметр:
	// он может находится или в многостраничном документе или в обычных показателей отчета.
	// Зная это, можно серьезно убыстрить процесс получения значений из отчетов, особенно при
	// массовых запросах о получении данных.

	// В случае, если переменная ПоказательВМногостраничнойЧасти = Неопределено
	// означает, что неудалось определить принадлежность показателя к типу где он хранится
	// в этому случае искаться он будет по многостраничным и остальным документам. Возможно замедление,
	// особенно если есть условия, оператор [? И ]
	// ПоказательВМногостраничнойЧасти = Истина - искать только в многостраничных разделах.
	// ПоказательВМногостраничнойЧасти = Ложь - искать только в обычных листах.

	ПоказательВМногостраничнойЧасти = Неопределено;

	НужноОкруглять = Ложь;
	ИмяСтраницы = Неопределено;
	Если мФормаОтчета = Неопределено Тогда

		// Вызов функции осуществлен без указания на ссылку конкретной декларации.
		// Временно пока не реализовано.
	Иначе

		// В случае, если обращение происходит через опцию ПНП (прошлый нал. пер.) и в этот период форма менялась, например, как в УСНе
		// 2006 г. Форма 2006Кв1, 2007 - 2007Кв1, тогда в параметре ПНП следует указывать формы через зпт, если описание показатея (типЕ и
		// его местрорасположение в разделе) совпадают с обееми версиями формы.

		Если СохраненныйДокумент.ИсточникОтчета = ИсточникОтчета Тогда
			ТблСоставПоказателей = мТаблицаСоставПоказателей;
			// ФормаИсточника = мФормаОтчета;
		Иначе

			ИспользованиеКэша = Новый Структура;
			ИспользованиеКэша.Вставить("ИсточникОтчета", ИсточникОтчета);
			ИспользованиеКэша.Вставить("ДатаОкончания", КонецДня(БазовыйПериод.ДатаКон));

			РезультатПоиска = мКэшТблСоставПок.НайтиСтроки(ИспользованиеКэша);
			Если РезультатПоиска.Количество() <> 1 Тогда
				// Создадим образ отчета, получим таблицу состава показателей.

				НазваниеДействующейФормы = Отчеты[ИсточникОтчета].ПолучитьФорму().ПолучитьФормуДляПериода(КонецДня(БазовыйПериод.ДатаКон));
				ФормаОтчета = Отчеты[ИсточникОтчета].ПолучитьФорму(НазваниеДействующейФормы);
				ФормаОтчета.ЗаполнитьНачальныеНастройки();
				ТблСоставПоказателей = ФормаОтчета.мТаблицаСоставПоказателей.Скопировать();
				// Запишем в кэш
				НовСтр = мКэшТблСоставПок.Добавить();
				НовСтр.ИсточникОтчета = ИсточникОтчета;
				НовСтр.ДатаОкончания = КонецДня(БазовыйПериод.ДатаКон);
				НовСтр.ТблСоставПок = ТблСоставПоказателей;

			Иначе
				ТблСоставПоказателей = РезультатПоиска[0].ТблСоставПок.Скопировать();

			КонецЕсли;

		КонецЕсли;

		СтрокаКолонокДляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
		// Требуемый показатель данного сохраненного документа
		Если ТблСоставПоказателей.Колонки.Найти("КодПоказателяПоСтруктуре") <> Неопределено Тогда
			СтрокаКолонокДляПоиска = СтрокаКолонокДляПоиска + ", КодПоказателяПоСтруктуре";
		КонецЕсли;

		// При обращении напрямую к показателю многострочной части, необходимо по составу показателей искать не указанный показатель, а колонку.
		// Определим признакм имени показателя многострочной части.
		// Для тех случаев, когда многострочный блок в отчете имеет фиксированное, не изменяемое кол-во строк и находится в не многостраничном разделе.
		ПринадлежитМногострчномуБлоку = ПоказательМногострочнойЧасти(ТребуемыйПоказатель);
		Если ПринадлежитМногострчномуБлоку Тогда
			ТребуемыйПоказательПоиск = Сред(ТребуемыйПоказатель, 1, 13); // Для поиска по таблице состава показателей
		Иначе
			ТребуемыйПоказательПоиск = ТребуемыйПоказатель;
		КонецЕсли;

		НайденнаяСтрока = ТблСоставПоказателей.Найти(ТребуемыйПоказательПоиск, СтрокаКолонокДляПоиска);

		Если НайденнаяСтрока = Неопределено Тогда
			// Характерно для показателей многострочных частей для раздела 1 авансов по ЕСН.
			РезультатНастройкиПоказателя = ОпределитьСпециальныеПараметрыПоказателя(ТребуемыйПоказатель);
			Если РезультатНастройкиПоказателя <> Неопределено Тогда
				НужноОкруглять = ?(РезультатНастройкиПоказателя.ТипДанных = "Е", Истина, Ложь);
				ИмяСтраницы = РезультатНастройкиПоказателя.ИмяСтраницы;
				ПоказательВМногостраничнойЧасти = РезультатНастройкиПоказателя.ПоказательВМногостраничнойЧасти;
			КонецЕсли;
		Иначе

			// Получим название раздела
			ИмяСтраницы = НайденнаяСтрока.ИмяПоляТаблДокумента;
			ПоказательВМногостраничнойЧасти = ?(НайденнаяСтрока.ПризнМногострочности = "*", Истина, Ложь);
			//РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(мФормаОтчета, ИмяСтраницы, "МногостраничностьВРазделе");

			Если (НайденнаяСтрока.ТипДанныхПоказателя = "Е")
			  // Или Е латинская (что бывает)
			  Или (НайденнаяСтрока.ТипДанныхПоказателя = "E") Тогда
				// нужно округлять всегда.
				НужноОкруглять = Истина;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	ОсуществлятьПоискПоМногостраничнойЧасти = ?(ПоказательВМногостраничнойЧасти = Неопределено, Истина, ПоказательВМногостраничнойЧасти);
	ОсуществлятьПоискПоОбычнымЛистамДекларации = ?(ПоказательВМногостраничнойЧасти = Неопределено, Истина, НЕ ПоказательВМногостраничнойЧасти);

	// Создадим структуру для поиска в таблице кэш результатов.
	ИспользованиеКэша = Новый Структура;
	ИспользованиеКэша.Вставить("Источник", ИсточникОтчета);
	ИспользованиеКэша.Вставить("НастройкаОтбораПоДатам", РезультатНастройкиДейстий);
	ИспользованиеКэша.Вставить("ДатаНач", БазовыйПериод.ДатаНач);
	ИспользованиеКэша.Вставить("ДатаКон", БазовыйПериод.ДатаКон);

	РезультатПоиска = мКэшТаблицаДокументов.НайтиСтроки(ИспользованиеКэша);

	Если РезультатПоиска.Количество() <> 1 Тогда

		// Если в формуле задача получить значение из документа, который передали, без
		// условий на периоды, тек. периода, тогда в Функцию ПолучитьСохраненныеДокументы
		// передадим предпоследним параметром флаг Истина, чтобы в таблицу попал только
		// текущий отчет.

		// В случае, если функция вызывается отдельно от механизма КС, тогда если не указан основной документ проверки, то выборка идет по всем документам
		// Если же указан, то только по указанному.
		// В случае, если в задана формула прошлого периода - то всегда выбираются все документы прошлого периода без каких-либо фильтров.
		// За этот механизм отвечает переменная ФильтрПоОтчету, передается в 6-й параметр: Неопределено или Истина.

		Если (СохраненныйДокумент = Неопределено) Тогда
			ФильтрПоОтчету = Неопределено;
		ИначеЕсли (Найти(Формула, ИсточникОтчета + ".") > 0) И (СохраненныйДокумент.ИсточникОтчета = ИсточникОтчета) Тогда
			ФильтрПоОтчету = Истина;
		Иначе
			ФильтрПоОтчету = Неопределено;
		КонецЕсли;

		ВыбраннаяФормаП = ВыбраннаяФорма;
		Если Настройка <> Неопределено Тогда
			Если Найти(Настройка, "пнп") = 1 Тогда
				Если Настройка <> "пнп" Тогда
					// Если в параметре ПНП указана какая-то форма, тогда...
					ВыбраннаяФормаП = Настройка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Если в формуле указывается просто [пнп] без указания формы, то учитывается активная из настроек. ВыбраннаяФорма.
		ТаблицаПодходящихДокументов = ПолучитьСохраненныеДокументы(ИсточникОтчета, Организация, ТаблицаФильтрПериод, БазовыйПериод, Истина, ФильтрПоОтчету, ИМНС, ВыбраннаяФормаП);

		// Запишем результат в кэш таблицу, в следующий раз при таких же условиях, будем брать готовый результат.
		НовСтр = мКэшТаблицаДокументов.Добавить();
		НовСтр.Источник = ИсточникОтчета;
		НовСтр.НастройкаОтбораПоДатам = РезультатНастройкиДейстий;
		НовСтр.ДатаНач = БазовыйПериод.ДатаНач;
		НовСтр.ДатаКон = БазовыйПериод.ДатаКон;
		НовСтр.РезультирующаяТаблица = ТаблицаПодходящихДокументов.Скопировать();

	Иначе

		ТаблицаПодходящихДокументов = РезультатПоиска[0].РезультирующаяТаблица.Скопировать();

	КонецЕсли;

	НеЧисловоеЗначение = Ложь;
	РезультатСтр = "";
	// Для каждого сохраненного документа, получим требуемое значение.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// ЕНВД, раздел 3
		// Для случаев, когда необходимо получить данные по многостраничным разделам + расшифровка. Создадим структуру для передачи в функцию
		// ПолучитьИзОпределенногоДокумента, которая будет генерировать расшифровку.
		СтруктураРасшифровки = Неопределено;
		Если ОсуществлятьПоискПоМногостраничнойЧасти Тогда
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Формула", Формула);
			СтруктураРасшифровки.Вставить("ИсточникОтчета", ИсточникОтчета);
			СтруктураРасшифровки.Вставить("СсылкаНаРО", Стр.СсылкаНаРО);
		КонецЕсли;
		// Нужно обработать случае, когда значение не является значением числа.
		// В случае, если значение не число, то все возвращаем с символом Символы.ПС
		ПредварительныйРезультат = ПолучитьИзОпределенногоДокумента(Стр.СохраненныйДок, ТребуемыйПоказатель, ОсуществлятьПоискПоОбычнымЛистамДекларации, ОсуществлятьПоискПоМногостраничнойЧасти, РезультатНастройкиПоказатель, НужноОкруглять, ТаблУсловий, ЛогическоеУсловие, ИмяСтраницы, Неопределено, СтруктураРасшифровки);
		ПредварительныйРезультат = ?(ПредварительныйРезультат = Неопределено, 0, ПредварительныйРезультат);
		//ПредварительныйРезультат = ?(ПредварительныйРезультат = Неопределено, 0, ПредварительныйРезультат);
		Если ТипЗнч(ПредварительныйРезультат) = ТипЗнч("Строка")
		   Или ТипЗнч(ПредварительныйРезультат) = ТипЗнч("Дата")
		   Или НеЧисловоеЗначение Тогда
			НеЧисловоеЗначение = Истина;
			РезультатСтр = РезультатСтр + Строка(ПредварительныйРезультат) + Символы.ПС;
		ИначеЕсли (РегламентированнаяОтчетность.роЯвляетсяЧислом(ПредварительныйРезультат)) И (НЕ НеЧисловоеЗначение)Тогда
			Результат = Результат + ПредварительныйРезультат;
		КонецЕсли;

		//Если мИнтерактивныйРежим И мСчетчикФормулДляРасшифровок <> Неопределено И мСчетчикФормулДляРасшифровок > -1 Тогда
			// Добавим данные в таблицу расшифровок показателя.
		Если СтруктураРасшифровки = Неопределено Тогда
			ЗарегистрироватьПоказательДляРасшифровки(ТребуемыйПоказатель, ПолучитьТекстовоеПредставлениеФормулы(Формула, ИсточникОтчета), ПредварительныйРезультат, Формула, Стр.СсылкаНаРО, ИмяСтраницы);
		КонецЕсли;

	КонецЦикла;

	Если НеЧисловоеЗначение Тогда
		// Если было зафиксировано не числовые значения, то возвращаем всегда текст.
		Результат = РезультатСтр;
	КонецЕсли;

	// Если в формуле был знак процента, то вычислим процент
	Если (Процент > 0) И (НЕ НеЧисловоеЗначение) Тогда
		Результат = ОкруглитьЧислоПоФормату((Процент * Результат) / 100);
	КонецЕсли;

	// Добавим результат и формулу в кэш таблицу.
	НовСтр = мКэшТаблицаРезультатов.Добавить();
	Если ПозПроцент > 0 Тогда
		НовСтр.Формула = ЭталоннаяФормула;
	Иначе
		НовСтр.Формула = Формула;
	КонецЕсли;

	НовСтр.Результат = Результат;
	НовСтр.СсылкаНаТаблицуРасшифровок = мСчетчикФормулДляРасшифровок;
	НовСтр.ИмяСтраницы = ИмяСтраницы;

	Возврат Результат;

	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось получить данные из декларации: " + ИсточникОтчета + " 
		|" + "Формула = " + Формула + " 
		|" + ОписаниеОшибки());

	КонецПопытки;

КонецФункции // ПолучитьЗначениеИзДокумента

// ПоказательМногострочнойЧасти
// Функция определяет, переданное имя показателя относится к многострочному блоку или нет.
//
// В общем модуле рег. отчетности, если функция роПоказательВходитВМногострочнуюЧасть, она также возвращает число, сколько в группе строк
// если переданный показатель не в многострочной части, то всегда возвращает 0. В данном случае этот (более верный) механизм не используется
// чтобы не загружать механизмом определения каждого показателя, через струкруру многострочности. Потому используется более простой способ.
// Параметры:
//  ИмяПоказателя  - имя показателя, которое используется при написании формулы.
//
// Возвращаемое значение:
//  Истина         - если показатель принадлежит многострочному блоку - Истина,
//                 Ложь - если обычный показатель.
//
Функция ПоказательМногострочнойЧасти(ИмяПоказателя)
	Результат = Ложь;
	Если СтрДлина(ИмяПоказателя) >= 15 Тогда
		// П000070001003_1
		// 1. Определим наличие знака _ в позиции 14
		// 2. Определим наличие вхождения П00
		// В случае 1 и 2 признаем показатель относящимся к многострочному блоку.
		Если (Сред(ИмяПоказателя, 14, 1) = "_") И (Найти(ИмяПоказателя, "П00") = 1) Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции // ПоказательМногострочнойЧасти

// ПолучитьИзОпределенногоДокумента()
// Функция используется в функции ПолучитьЗначениеИзДокумента, ОткрытьРаздел.
// Получает значение из СохраненногоДокумента
// Параметры:
//  НазваниеРаздела - название многостраничного или простого раздела, где распологается показатель
//  НомерСтраницы = Неопределено    - индекс многостраничного раздела, где необходимо искать, если неопределено, то на всех.
//
Функция ПолучитьИзОпределенногоДокумента(СохраненныйДок, ТребуемыйПоказатель, ОсуществлятьПоискПоОбычнымЛистамДекларации = Истина, ОсуществлятьПоискПоМногостраничнойЧасти = Истина, РезультатНастройкиПоказатель = 0, НужноОкруглять, ТаблУсловий = Неопределено, ЛогическоеУсловие = Неопределено, НазваниеРаздела = Неопределено, НомерСтраницы = Неопределено, СтруктураРасшифровки = Неопределено) Экспорт

	Результат = Неопределено;

	ЗначениеНайденоВНЕмногостраничнойЧасти  = Ложь;
	ЗначениеНайденоВМногостраничнойЧасти    = Ложь;

	Если ОсуществлятьПоискПоОбычнымЛистамДекларации Тогда

		ПоказателиОтчета = СохраненныйДок.ПоказателиОтчета;

		Для Каждого СтраницаОтчета Из ПоказателиОтчета Цикл

			Если НазваниеРаздела <> Неопределено Тогда

				Если СтраницаОтчета.Ключ <> "ПолеТабличногоДокумента" + НазваниеРаздела Тогда
					Продолжить;
				КонецЕсли;

			КонецЕсли;

			// здесь нужно анализировать условия, если есть
			// необходимо также заранее знать, требуемый показатель относится к многостраничному
			// разделу или к обычному листу, через мСвойстваСтраницРаздела

			Если СтраницаОтчета.Значение.Свойство(ТребуемыйПоказатель) Тогда

				ЗначениеНайденоВНЕмногостраничнойЧасти = Истина;

				ПредварительныйРезультат = 0;
				Если РезультатНастройкиПоказатель = 1 Тогда

					Если УсловиеДляПоказателяВыполнено(ТаблУсловий, СтраницаОтчета, ЛогическоеУсловие, Ложь) Тогда
						ПоказательЗначение = СтраницаОтчета.Значение[ТребуемыйПоказатель];
						ПредварительныйРезультат = ?(НужноОкруглять, ОкруглитьЧислоПоФормату(ПоказательЗначение), ПоказательЗначение);
					КонецЕсли;

				ИначеЕсли РезультатНастройкиПоказатель = 0 Тогда

					ПоказательЗначение = СтраницаОтчета.Значение[ТребуемыйПоказатель];
					ПредварительныйРезультат = ?(НужноОкруглять, ОкруглитьЧислоПоФормату(ПоказательЗначение), ПоказательЗначение);

				КонецЕсли;

				//Прервать; // Перебирать далее области не будет
			КонецЕсли;


			// Прервать цикл перебора листов в показателях отчета
			Если ЗначениеНайденоВНЕмногостраничнойЧасти Тогда

				Прервать;

			КонецЕсли;

		КонецЦикла;

		Если ЗначениеНайденоВНЕмногостраничнойЧасти Тогда
			Если (ТипЗнч(ПредварительныйРезультат) = Тип("Строка"))
			   Или (ТипЗнч(ПредварительныйРезультат) = Тип("Дата")) Тогда
				Результат = ПредварительныйРезультат;
			ИначеЕсли РегламентированнаяОтчетность.роЯвляетсяЧислом(ПредварительныйРезультат) Тогда
				Результат = ?(Результат = Неопределено, 0, Результат) + ПредварительныйРезультат;
			КонецЕсли;

			ЗначениеНайденоВНЕмногостраничнойЧасти = Ложь;
			ПредварительныйРезультат = 0;

			Возврат Результат; // Продолжим основной цикл перебора документов
		КонецЕсли;

	КонецЕсли;

	Если ОсуществлятьПоискПоМногостраничнойЧасти Тогда

		// Если значение не найдено в показателях отчета, значит оно в многостраничной части
		// Организуем поиск по многостраничным частях
		Если НЕ ЗначениеНайденоВНЕмногостраничнойЧасти Тогда
			// В отчетах может не быть многостраничных разделов, поэтому результат всегда "Показатель не найден"
			ДанныеМногостраничныхРазделов = Неопределено;
			Если (НЕ (СохраненныйДок.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов))
			Или (ДанныеМногостраничныхРазделов = Неопределено)) Тогда
				Возврат Результат; // Перейти к следующему
			КонецЕсли;
		КонецЕсли;

		// Алгоритм поиска значения в многостраничных частях
		// 1. Если показатель найден в первмо экземпляре, то суммируем все его значения и далее в других разделах поиск не осуществляем
		// 2. Если показателя нет в пермо экземпляре, то остальные экземпляры этого раздела не перебираются, а переход к следующим разделам
		// 3. Результат успешного поска показателя в переменной ЗначениеНайденоВМногостраничнойЧасти
		Для Каждого СтраницаОтчета Из ДанныеМногостраничныхРазделов Цикл
			ТаблицаМногостраничногоДокумента = Неопределено;
			// В случае, если через параметр передано название конкретного раздела НазваниеРаздела, то берем для поиска ТОЛЬКО его.
			Если НазваниеРаздела = Неопределено Тогда

				ДанныеМногостраничныхРазделов.Свойство(СтраницаОтчета.Ключ, ТаблицаМногостраничногоДокумента);

			Иначе

				Если СтраницаОтчета.Ключ <> НазваниеРаздела Тогда

					Продолжить;

				Иначе

					ДанныеМногостраничныхРазделов.Свойство(НазваниеРаздела, ТаблицаМногостраничногоДокумента);

				КонецЕсли;

			КонецЕсли;

			ПоказательНаЛистеОбнаружен = Ложь;
			Для Инд = 0 По ТаблицаМногостраничногоДокумента.Количество() - 1 Цикл

				// В случае, если на многостраничном листе нет показателя, то нет смысла перебирать все остальные листа раздела

				Если НомерСтраницы <> Неопределено Тогда

					Если Инд <> НомерСтраницы Тогда
						Продолжить;
					КонецЕсли;

				КонецЕсли;

				ЛокальныйПоиск = Ложь;
				//Для Каждого Показатель Из ТаблицаМногостраничногоДокумента[Инд].Данные Цикл

				Если ТаблицаМногостраничногоДокумента[Инд].Данные.Свойство(ТребуемыйПоказатель) Тогда
					ЗначениеНайденоВМногостраничнойЧасти = Истина;
					Если РезультатНастройкиПоказатель = 1 Тогда

						Если УсловиеДляПоказателяВыполнено(ТаблУсловий, ТаблицаМногостраничногоДокумента[Инд].Данные, ЛогическоеУсловие, Истина) Тогда
							ПоказательЗначение = ТаблицаМногостраничногоДокумента[Инд].Данные[ТребуемыйПоказатель];
							ПоказательЗначение = ?(НужноОкруглять, ОкруглитьЧислоПоФормату(ПоказательЗначение), ПоказательЗначение);
							Результат = ?(Результат = Неопределено, 0, Результат) + ПоказательЗначение;
						КонецЕсли;

					ИначеЕсли РезультатНастройкиПоказатель = 0 Тогда

						ПоказательЗначение = ТаблицаМногостраничногоДокумента[Инд].Данные[ТребуемыйПоказатель];
						ПоказательЗначение = ?(НужноОкруглять, ОкруглитьЧислоПоФормату(ПоказательЗначение), ПоказательЗначение);
						Результат = ?(Результат = Неопределено, 0, Результат) + ПоказательЗначение;

					КонецЕсли;

					ЛокальныйПоиск = Истина;
					Если ТипЗнч(СтруктураРасшифровки) = Тип("Структура") Тогда
						// Зарегистрируем расшифроку для каждого экземпляра многостраничного раздела. Применяется в ЕНВД, при проверки раздела 3, стр. 010.

						// В случае, если в таблице расшифровок показателей есть данное выражение, то возьмем расшифровку выражения
						// из таблицы текстов показателей.
						// Иначе, генерируем.
						НазваниеПоказателя = мТекстыПоказателей.Найти(СтруктураРасшифровки.Формула, "Показатель");
						Если НазваниеПоказателя = Неопределено Тогда
							НазваниеПоказателяТекст = ПолучитьТекстовоеПредставлениеФормулы(СтруктураРасшифровки.Формула
							                                                         , СтруктураРасшифровки.ИсточникОтчета);
						Иначе
							НазваниеПоказателяТекст = НазваниеПоказателя.ЯвныйТекст;
						КонецЕсли;

						ЗарегистрироватьПоказательДляРасшифровки(ТребуемыйПоказатель
						                                       , НазваниеПоказателяТекст
						                                       , ПоказательЗначение
						                                       , СтруктураРасшифровки.Формула
						                                       , СтруктураРасшифровки.СсылкаНаРО
						                                       , СтраницаОтчета.Ключ
						                                       ,
						                                       , Инд + 1);
					КонецЕсли;
					//Прервать; // Далее искать не будем
				КонецЕсли;
				//КонецЦикла;

				// Если на первом листе многостраничного документа показатель не обнаружен, то следующие страницы не перебираем
				Если НЕ ЛокальныйПоиск Тогда
					Прервать;
				Иначе
					ПоказательНаЛистеОбнаружен = Истина;
				КонецЕсли;

			КонецЦикла;

			// Если показатель уже был найден на одном из листах,
			// то далее поиск осуществлять не будем, т.к. в других разделах показателья точно не будет
			Если ПоказательНаЛистеОбнаружен Тогда
				Прервать;
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьИзОпределенногоДокумента

// УсловиеДляПоказателяВыполнено
// Функция проверяет, выполнены ли условия или нет.
// Параметры:
//  ТаблУсловий    - таблица условий из формулы вида  [? И ]
//  ПоисковыеЗн    - данные, для анализа под условия
//  ЛогическийЗнак - логический знак И или ИЛИ
// Возвращаемое значение:
//  Истина         - условия выполнены
//  Ложь           - условия не выполнены
Функция УсловиеДляПоказателяВыполнено(ТаблУсловий, ПоисковыеЗн, Знач ЛогическийЗнак, Многостраничность)

	Результат = Ложь;
	ОдноИзУсловийВыполнено = Ложь;
	Для Каждого Стр Из ТаблУсловий Цикл

		Если ОдноИзУсловийВыполнено И ВРег(ЛогическийЗнак) = "ИЛИ" Тогда
			// В случае, если одно из условий выполнено и сравнение по ИЛИ нет смысла
			// проверять остальные условия.
			Прервать;
		КонецЕсли;

		Данные = ?(НЕ Многостраничность, ПоисковыеЗн.Значение, ПоисковыеЗн);
		// Для Каждого Стр2 Из Данные Цикл

			ЗавершитьРаботу = Ложь;
			// данный режим означает, если есть в названии !, тогда этот ключ в структуре может отсутствовать, тогда всё, что правее этого знака
			// будет считаться значением в случае, отсутствия показателя. т.е. по умолчанию.
			// Например, декл. по прибыли ВГруппуОПВходитОрганизация!Ложь - этот показатель введен позже в структуру и может отсутствовать у проверяемых
			// документов, тогда по умолчанию если его нет, будет считаться что он равен Ложь.

			УсловиеВСлучаеОтсутствия = Неопределено;
			Если Найти(Стр.Показатель, "!") > 0 Тогда
				// Данная ветка не используется.
				УсловиеВСлучаеОтсутствия = Сред(Стр.Показатель, Найти(Стр.Показатель, "!") + 1);
				Если УсловиеВСлучаеОтсутствия = "Ложь" Тогда
					УсловиеВСлучаеОтсутствия = Ложь;
				ИначеЕсли УсловиеВСлучаеОтсутствия = "Истина" Тогда
					УсловиеВСлучаеОтсутствия = Истина;
				КонецЕсли;

				// Уберем восклицательный знак и всё что правее от него.
				ОбработанныйПоказатель = Сред(Стр.Показатель, 1, Найти(Стр.Показатель, "!")-1)
			Иначе
				ОбработанныйПоказатель = Стр.Показатель;
			КонецЕсли;
			
			Если Данные.Свойство(ОбработанныйПоказатель)
			 Или (НЕ Данные.Свойство(ОбработанныйПоказатель) И УсловиеВСлучаеОтсутствия <> Неопределено)  Тогда

				Если НЕ Данные.Свойство(ОбработанныйПоказатель) Тогда
					ЗначениеПоказателя = УсловиеВСлучаеОтсутствия;
				Иначе
					ЗначениеПоказателя = Данные[ОбработанныйПоказатель];
				КонецЕсли;
				
				Если (Стр.ЛогическийЗнак = "=" И ЗначениеПоказателя = Стр.ЗначениеПоказателя)
				    Или (Стр.ЛогическийЗнак = ">=" И ЗначениеПоказателя >= Стр.ЗначениеПоказателя)
				    Или (Стр.ЛогическийЗнак = "<=" И ЗначениеПоказателя <= Стр.ЗначениеПоказателя)
				    Или (Стр.ЛогическийЗнак = ">" И ЗначениеПоказателя > Стр.ЗначениеПоказателя)
				    Или (Стр.ЛогическийЗнак = "<" И ЗначениеПоказателя < Стр.ЗначениеПоказателя)
				    Или (Стр.ЛогическийЗнак = "<>" И ЗначениеПоказателя <> Стр.ЗначениеПоказателя) Тогда

					Результат = Истина;
					ОдноИзУсловийВыполнено = Истина;
					//Прервать;
				Иначе
					// Ветка для прибыли. В случае, если сбор идет по признаку П002050000200 и он равен 1, тогда лист с кодом 4 анализируем на новый
					// признак ВГруппуОПВходитОрганизация, который может отсутствовать, в старых версиях.
					Если ОбработанныйПоказатель = "П002050000200" И Стр.ЗначениеПоказателя = "1" И ЗначениеПоказателя = "4" Тогда
						Если ?(Данные.Свойство("ВГруппуОПВходитОрганизация"), Данные.ВГруппуОПВходитОрганизация, Ложь) Тогда
							Результат = Истина;
							ОдноИзУсловийВыполнено = Истина;

						КонецЕсли;

					ИначеЕсли ВРег(ЛогическийЗнак) = "И" Тогда

						Результат = Ложь;
						ЗавершитьРаботу = Истина;
					КонецЕсли;

					//Прервать;

				КонецЕсли;

			Иначе
			// В случае, если указанного показателя нет вообще, то конечно уловие не выполнено.
				Если ВРег(ЛогическийЗнак) = "И" Тогда

					Результат = Ложь;
					ЗавершитьРаботу = Истина;

				КонецЕсли;

			КонецЕсли;

		//КонецЦикла;

		Если ЗавершитьРаботу Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

	//Табл.Колонки.Добавить("Показатель");
	//Табл.Колонки.Добавить("ЛогическийЗнак");
	//Табл.Колонки.Добавить("ЗначениеПоказателя");

КонецФункции // УсловиеДляПоказателяВыполнено

// ПолучитьЗаданнуюЧасть
// Вернет нужный номер коммандной строки
// Параметры:
//  ГлавнаяЧасть - строковый параметр, коммандная строка
//  НомерСтроки  - 0 - возвращает все, если не 0, то конкретный номер строки
//  Разделитель  - разделитель строки, по умолчанию " " пробел
//
Функция ПолучитьЗаданнуюЧасть(Знач ГлавнаяЧасть, Знач НомерСтроки, Знач Разделитель = " ") Экспорт

	ГлавнаяЧастьПС = СтрЗаменить(ГлавнаяЧасть, Разделитель, Символы.ПС);

	Если НомерСтроки > 0 Тогда
		Возврат СтрПолучитьСтроку(ГлавнаяЧастьПС, НомерСтроки);
	КонецЕсли;

	ВсегоПоказателей = 1 + СтрЧислоВхождений(ГлавнаяЧасть, Разделитель);

	Результат = Новый СписокЗначений;

	Для Инд = 1 По ВсегоПоказателей Цикл
		СтрокаЗнач = СтрПолучитьСтроку(ГлавнаяЧастьПС, Инд);
		Результат.Добавить(Инд,СтрокаЗнач);
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьЗаданнуюЧасть

// ПолучитьНастройкиФормулы
// Возвращает список значений настройки формулы, всегда первый и последние элементы формулы статичны, заняты источником и показателе
// 
// Параметры
// Формула        - основная формула
// 
// Возвращаемые значения:
// СписоЗначений - настройки, все что между первым и последним парметром
//
Функция ПолучитьНастройкиФормулы(Знач Формула)

	Результат = Неопределено;
	Скобка1 = Найти(Формула, "[");
	Если Скобка1 > 0 Тогда
		Скобка2 = Найти(Формула, "]");
		Результат = Сред(Формула, Скобка1, Скобка2 - Скобка1 + 1);
		Результат = СтрЗаменить(Результат, "[", "");
		Результат = СтрЗаменить(Результат, "]", "");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьНастройкиФормулы

// РазборНастройкиПериода
//
Функция РазборНастройкиПериода(Знач ФормулаПериод)
	// Если есть настройки по периоду, тогда работаем с периодами
	// могут быть значения:
	// -n - n периодов назад
	//  S - период с начала года
	//nквартал  - требуемый квартал (для квартальных декларация (1) или квартально/месячных (3))
	//nмесяц    - требуемый месяц
	//ОПn-ОПn+1 - диапазон периодов

	Если Лев(ФормулаПериод, 1) = "-" Тогда
		Возврат 1; // Варинат, когда необходимо работать с предыдущем периодом
	КонецЕсли;

	Если (Лев(ФормулаПериод, 1) = "S") Или (Лев(ФормулаПериод, 1) = "s")  Тогда
		Возврат 2; // Варинат, когда необходимо работать с начала года
	КонецЕсли;

	Если Найти(ФормулаПериод, "квартал") > 0 Тогда
		Возврат 3; // Варинат, когда необходимо работать с требуемым кварталом
	КонецЕсли;

	Если Найти(ФормулаПериод, "месяц") > 0 Тогда
		Возврат 4; // Варинат, когда необходимо работать с требуемым месяцем
	КонецЕсли;

	Если (Найти(ФормулаПериод, "ОП") > 0) Тогда
		Возврат 5; // Варинат, когда необходимо работать с диапазоном отчетных периодов
	КонецЕсли;

	Если ФормулаПериод = "ВсеПериоды-" Тогда
		Возврат 6; // Варинат, когда необходимо все периоды до текущего, не включая его.
	КонецЕсли;

	Если ФормулаПериод = "ВсеПериоды+" Тогда
		Возврат 7; // Варинат, когда необходимо все периоды до текущего, включая его.
	КонецЕсли;

	// структура может быть следующей:
	// 1. РегламентированныйОтчетУСН[пнп].П000020015004
	// 2. РегламентированныйОтчетУСН[пнпФормаОтчета2006Кв1].П000020008004
	// 3. РегламентированныйОтчетУСН[пнпФормаОтчета2006Кв1, ФормаОтчета2007Кв1].П000020008004
	// Можно указать название формы прошлого периода, из которой также будут получаться данные.

	Если Найти(ФормулаПериод, "пнп") = 1 Тогда
		Возврат 8; // Варинат, когда необходимо получить данные прошлого налогового периода.
	КонецЕсли;

КонецФункции // РазборНастройкиПериода

// РазборНастройкиПоказателя
// Функция разбирает формулу от показателя и возвращает номер варианта формулы
// Параметры:
//  Показатель     - правая часть общей формулы
// Возвращаемое значение:
//  1              - если указано условие в формуле
//  0              - в остальных случаях
//
Функция РазборНастройкиПоказателя(Знач Показатель)

	Если Найти(Показатель, "?") > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // РазборНастройкиПоказателя

// ПолучитьНастройкуОтчета
//
// Получает из дерево св-в необходимый параметр
// Параметры
//  ИсточникОтчета - строка, название источника рег. отчетности.
//  ЧтоВернуть     - поле в таблице.
//
Функция ПолучитьНастройкуОтчета(Знач ИсточникОтчета, Знач ЧтоВернуть) Экспорт

	Результат = Неопределено;

	Для Каждого СтрокаУровня1 Из мДеревоОтчетов.Строки Цикл
		Если ИсточникОтчета = СтрокаУровня1.Источник Тогда
			Результат = СтрокаУровня1[ЧтоВернуть];
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции // ПолучитьНастройкуОтчета

// СформироватьТаблицуДляФильтраПоДатам
// 
// Сформировывает таблицу ПериодыЗахватаОтчетов
// 
// Параметры:
//  РезультатНастройкиДействий  - принимает значения функции РазборНастройкиПериода, схема работы с периодами
//  Шаг                         - параметр из настроек, строка 1 - квартал, 2 - месяц, 3 и 1и2
//  НарастающийИтог             - параметр из настроек, булево, Истина - да, Ложь - нет
//  ДатаНач                     - Дата начала, передано из начальной формы декларации
//  ДатаКон                     - Дата окончания, передано из начальной формы декларации
//  Настройка                   - Настройка парметра Период []
//
// Возвращаемое значение:
//  Сформированная таблицы для фильтра в документах
//
Функция СформироватьТаблицуДляФильтраПоДатам(Знач РезультатНастройкиДейстий, Знач Шаг, Знач НарастающийИтог, Знач ДатаНач, Знач ДатаКон, Знач Настройка);

	ПериодыЗахватаОтчетов = Новый ТаблицаЗначений;
	ПериодыЗахватаОтчетов.Колонки.Добавить("ДатаНач");
	ПериодыЗахватаОтчетов.Колонки.Добавить("ДатаКон");
	ПериодыЗахватаОтчетов.Колонки.Добавить("ВсеДеклГода"); // Все декларации текущего отчетного года

	КварталОтчета  = РегламентированнаяОтчетность.ПолучитьКварталРО(ДатаКон);
	ГодОтчета      = Год(ДатаНач);
	ГодОтчетаСтр   = Формат(ДатаКон, "ДФ=гггг");
	ПереданМесяц = ?(Месяц(ДатаНач) - Месяц(ДатаКон) = 0, Истина, Ложь);

	Если РезультатНастройкиДейстий = 100 Тогда

		НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
		НовыйПериод.ДатаНач = ДатаНач;
		НовыйПериод.ДатаКон = ДатаКон;

	ИначеЕсли РезультатНастройкиДейстий = 1 Тогда

		// По квартально
		//
		Если Шаг = "1" Тогда
			НовыйПериод = ПериодыЗахватаОтчетов.Добавить();

			Если НарастающийИтог Тогда
				НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
			Иначе
				НовыйПериод.ДатаНач = НачалоКвартала(ДобавитьМесяц(ДатаНач, -1));
			КонецЕсли;

			НовыйПериод.ДатаКон = НачалоДня(КонецКвартала(ДобавитьМесяц(ДатаКон, -3)));


		// По месячно
		ИначеЕсли Шаг = "2" Тогда
			НовыйПериод = ПериодыЗахватаОтчетов.Добавить();

			Если НарастающийИтог Тогда
				НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
			Иначе
				НовыйПериод.ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаНач, -1));
			КонецЕсли;

			НовыйПериод.ДатаКон = НачалоДня(КонецМесяца(ДобавитьМесяц(ДатаКон, -1)));

		// Может сдавать и по месячно и по квартально
		ИначеЕсли Шаг = "3" Тогда

			// Если форма может сдаваться по месячно и по квартально, тогда будет два удовлетворяющих периода
			// например задан период 01.06 и 30.06 - передан месяц и второй квартал
			//
			// для выборки два периода:
			// 1. 01.05. - 31.05.
			// 2. 01.01. - 31.03.

			// Если передан квартал 01.04 - 30.06
			// 1. 01.03 - 31.03
			// 2. 01.01 - 21.03

			Если НЕ НарастающийИтог Тогда
				Если ПереданМесяц Тогда
					// Сформируем первый период
					НовыйПериод = ПериодыЗахватаОтчетов.Добавить();

					Если НарастающийИтог Тогда
						НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
					Иначе
						НовыйПериод.ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаНач, -1));
					КонецЕсли; // нарастающий итог - месяц

					НовыйПериод.ДатаКон = НачалоДня(КонецМесяца(ДобавитьМесяц(ДатаНач, -1)));

					// Сформируем второй период, для варианта под квартал

					НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
					Если НарастающийИтог Тогда
						НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
					Иначе
						НовыйПериод.ДатаНач = НачалоКвартала(ДобавитьМесяц(ДатаКон, -3));
					КонецЕсли; // нарастающий итог - месяц

					НовыйПериод.ДатаКон = КонецКвартала(ДобавитьМесяц(ДатаКон, -3));

				Иначе // Передан квартал

					// Сформируем первый период
					НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
					Если НарастающийИтог Тогда
						НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
					Иначе
						НовыйПериод.ДатаНач = НачалоКвартала(ДобавитьМесяц(ДатаНач, -1));
					КонецЕсли; // нарастающий

					НовыйПериод.ДатаКон = КонецКвартала(ДобавитьМесяц(ДатаНач, -1));

					// Сформируем второй период
					НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
					Если НарастающийИтог Тогда
						НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
					Иначе
						НовыйПериод.ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаНач, -1));
					КонецЕсли;
					НовыйПериод.ДатаКон = КонецМесяца(ДобавитьМесяц(ДатаНач, -1));

				КонецЕсли;
			Иначе
				НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
				НовыйПериод.ДатаНач = НачалоГода(ДатаНач);

				Если (Месяц(ДатаКон) = 6 ) ИЛИ (Месяц(ДатаКон) = 9) Или (Месяц(ДатаКон) = 12) Тогда
					НовыйПериод.ДатаКон = КонецКвартала(ДобавитьМесяц(ДатаКон, -3));

					НовыйПериод2 = ПериодыЗахватаОтчетов.Добавить();
					НовыйПериод2.ДатаНач = НачалоГода(ДатаНач);
					НовыйПериод2.ДатаКон = КонецМесяца(ДобавитьМесяц(ДатаКон, -1));

				Иначе

					НовыйПериод.ДатаКон = КонецМесяца(ДобавитьМесяц(ДатаКон, -1));

				КонецЕсли;


			КонецЕсли; // НЕ нарастающий

		КонецЕсли;

	ИначеЕсли РезультатНастройкиДейстий = 2 Тогда

		// Периоды с начала года, но не более дат отчета
		НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
		НовыйПериод.ВсеДеклГода = ДатаНач; // Граница

	ИначеЕсли РезультатНастройкиДейстий = 3 Тогда

		// параметр nквартал
		НомерТребуемогоКвартала = Лев(Настройка, Найти(Настройка, "квартал") - 1);
		НомерТребуемогоКвартЧис = Число(НомерТребуемогоКвартала);

		НомерТребуемогоКвартМес1 = РегламентированнаяОтчетность.ДополнитьСтроку(Строка((НомерТребуемогоКвартЧис * 3)-2), 2, "0");
		НомерТребуемогоКвартМес2 = РегламентированнаяОтчетность.ДополнитьСтроку(Строка((НомерТребуемогоКвартЧис * 3)), 2, "0");

		Квартал1 = НачалоКвартала(Дата(ГодОтчетаСтр + НомерТребуемогоКвартМес1 + "01"));
		Квартал2 = НачалоДня(КонецКвартала(Дата(ГодОтчетаСтр + НомерТребуемогоКвартМес2 + "01")));

		НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
		НовыйПериод.ДатаНач = Квартал1;
		НовыйПериод.ДатаКон = Квартал2;

	ИначеЕсли РезультатНастройкиДейстий = 4 Тогда

		// параметр nмесяц
		НомерТребуемогоМесяца = Лев(Настройка, Найти(Настройка, "месяц") - 1);
		НомерТребуемогоМесяца = РегламентированнаяОтчетность.ДополнитьСтроку(НомерТребуемогоМесяца, 2, "0");
		МесяцНач = НачалоДня(Дата(ГодОтчетаСтр + НомерТребуемогоМесяца + "01"));
		МесяцКон = НачалоДня(КонецМесяца(Дата(ГодОтчетаСтр + НомерТребуемогоМесяца + "01")));
		НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
		НовыйПериод.ДатаНач = Квартал1;
		НовыйПериод.ДатаКон = Квартал2;

	ИначеЕсли (РезультатНастройкиДейстий = 6) Или (РезультатНастройкиДейстий = 7) Тогда
	// Вариант, когда необходимо суммировать показатели по всем периодам "левее", не включая текущий
		Если Шаг = "1" Тогда
			Для Инд = 1 По КварталОтчета - ?(РезультатНастройкиДейстий = 6, 1, 0) Цикл

				НовыйПериод = ПериодыЗахватаОтчетов.Добавить();

				Если НарастающийИтог Тогда
					НовыйПериод.ДатаНач = НачалоГода(ДатаНач);
					НовыйПериод.ДатаКон = НачалоДня(КонецМесяца(ДобавитьМесяц( НачалоГода(ДатаНач), (3 * Инд) - 1)));
				Иначе
					НовыйПериод.ДатаНач = ?(Инд = 1, НачалоГода(ДатаНач), НачалоДня(ДобавитьМесяц(НачалоГода(ДатаНач), (3 * Инд) )));
					НовыйПериод.ДатаКон = НачалоДня(КонецМесяца(ДобавитьМесяц( НовыйПериод.ДатаНач, (3 * Инд) - 1)));
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли (РезультатНастройкиДейстий = 8) Тогда
		// пнп - Прошлый налоговый период.
		// Получаем только прошлый год.
		НовыйПериод = ПериодыЗахватаОтчетов.Добавить();
		НовыйПериод.ДатаНач = Дата(ГодОтчета - 1, 1, 1);
		НовыйПериод.ДатаКон = КонецГода(НовыйПериод.ДатаНач);

	КонецЕсли;

	Возврат ПериодыЗахватаОтчетов;

КонецФункции // СформироватьТаблицуДляФильтраПоДатам

// ДатыНеУдовлетворяютЗаданнымПараметрам
// 
// Параметры:
// ДатаНачДок - дата из документа, начальная
// ДатаКонДок - дата из документа, конечная
// ДатаНач    - дата анализируемого отчета, начальная
// ДатаКон    - дата анализируемого отчета, конечная
// Возврат:
// Истина, если даты из документов подпадают по требуемые из таблицы
//
Функция ДатыНеУдовлетворяютЗаданнымПараметрам(ДатаНачДок, ДатаКонДок, ТаблицаФильтрПериод, ДатаНач, ДатаКон)

	Результат = Истина;

	Для Каждого Стр из ТаблицаФильтрПериод Цикл

		// Если найтройка Период[S], соберать все до текущей декларации, тогда

		Если Стр.ВсеДеклГода <> Неопределено Тогда
			// все декларации года
			Если Год(ДатаНачДок) = Год(ДатаНач) И (ДатаКонДок < ДатаНач) Тогда
				Возврат Ложь;
			КонецЕсли;
		ИначеЕсли (НЕ ((Стр.ДатаНач = ДатаНачДок) И (КонецДня(Стр.ДатаКон) = КонецДня(ДатаКонДок)))) Тогда
		// Если условия по периодам не соответствуют, то выдаем истину и цикл перебора пропустим документ с такими параметрами
		  //Или (Год(Стр.ДатаНач) <> Год(ДатаНач))
		  //Или (Год(Стр.ДатаКон) <> Год(ДатаКон))
			Результат = Истина;
		Иначе
			// Периоды совпали, можно анализировать документ далее
			Возврат Ложь;
		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции // ДатыНеУдовлетворяютЗаданнымПараметрам

// ОткрытьРаздел
// Функция выполняет проверку контрольного соотношения. По формуле ,
// которая задана в шаблоне КС.
// Параметры:
//  ОтчетныйПериод - базовый период проверки декларации. Структура.
//  ТаблицаПодходящихДокументов - таблица сохраненных документов.
//  ОписаниеОшибки - в случае, обнаружения ошибки, это текст будет выводится в колонке описании таблицы.
//  СтрокаНастройки - строка из таблицы значений, для получения данных по текстовым представлениям формул.
// Возвращаемое значение:
//  Структура, содержащая параметры, кол-во ошибок и описания каждой ошибки.
//
Функция ОткрытьРаздел(ОтчетныйПериод, ТаблицаПодходящихДокументов, Знач Формула, ОписаниеОшибки, СтрокаНастройки) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", 0);
	СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", 0);
	СтруктураРезультата.Вставить("СтруктураОшибок", Неопределено);

	ОбщееЧислоОшибок = 0; // Счетчик учета ошибок.
	ОбщееЧислоБезОшибок = 0; // Счетчик учета проверенных соотношений, не являющиеся ошибками.

	СтруктураОшибок = Новый Структура;

	// Получим название многостраничного раздела для работы.
	ТребуемыйРаздел = ПолучитьЗаданнуюЧасть(Формула, 2);
	// Если за названием раздела идет символ ^, это означает, что при отсутствии показателя с условием, всю формулу нужно НЕ выполнять и не выводить.
	// Если такого знака нет, тогда в расшифровку будет попадать 0 и при попытки перейти к этому показателю будет выдоваться сообщение.
	// Через механизм дополнительных возможностей в расшифровке.

	Если Найти(ТребуемыйРаздел, "^") <> 0 Тогда
		ОтсутствуютНайденныеПоказателиПоФормулеНеВыводитьОшибку = Истина;
		// Удалим символ.
		ТребуемыйРаздел = СтрЗаменить(ТребуемыйРаздел, "^", "");
		Формула = СтрЗаменить(Формула, "^", "");
	Иначе
		ОтсутствуютНайденныеПоказателиПоФормулеНеВыводитьОшибку = Ложь;
	КонецЕсли;

	Если Найти(ТребуемыйРаздел, "~") <> 0 Тогда
		ПервыйПоказательОтсутствуетНеПроверяемСоотношение = Истина;
		// Удалим символ.
		ТребуемыйРаздел = СтрЗаменить(ТребуемыйРаздел, "~", "");
		Формула = СтрЗаменить(Формула, "~", "");
	Иначе
		ПервыйПоказательОтсутствуетНеПроверяемСоотношение = Ложь;
	КонецЕсли;

	Если Найти(Формула, "?") > 0 Тогда
		СложнаяФормула = Истина;
	Иначе
		СложнаяФормула = Ложь;
	КонецЕсли;

	// Получим стандартную формулу.
	ФормулаСтандарт = СокрЛП(СтрЗаменить(Формула, "Открыть " + ТребуемыйРаздел, ""));

	// Получим логический знак в формуле.
	ЛогическийЗнакСтруктура = РегламентированнаяОтчетность.ВернутьЛогическийЗнакВСтроке(Формула);
	ЛогическийЗнак = ЛогическийЗнакСтруктура.СтрокаСравнения;
	ЛогическийПеречисление = ЛогическийЗнакСтруктура.ПеречислениеВидСравнения;

	СоставнаяФормула = Ложь;
	ОбщаяФормула = "";

	// Создадим таблицу разбора формулы.
	ТаблицаФормулы = Новый ТаблицаЗначений;
	ТаблицаФормулы.Колонки.Добавить("ПолнаяФормула");
	ТаблицаФормулы.Колонки.Добавить("Показатель");
	ТаблицаФормулы.Колонки.Добавить("УсловияОтбора");
	ТаблицаФормулы.Колонки.Добавить("ЛогическоеУсловие");
	ТаблицаФормулы.Колонки.Добавить("НужноОкруглять");
	ТаблицаФормулы.Колонки.Добавить("ИмяСтраницы");
	ТаблицаФормулы.Колонки.Добавить("ОбщаяФормула");
	ТаблицаФормулы.Колонки.Добавить("ПоказательПрисутствует");
	ТаблицаФормулы.Колонки.Добавить("Многостраничность"); // Булево, признак многостраничности для показателя.
	ТаблицаФормулы.Колонки.Добавить("ДанныйПоказательИзУсловия"); // Данный показатель из условия под ?, если отсутствует в декларации, то всегда 0 это не ошибка
	// Значки ~ и ^ на него не влияют. Если в формуле нет знака ?, то всегда Ложь.

	ВошлиВУсловие = Ложь;
	ДанныйПоказательИзУсловия = Ложь;
	// Организуем разбор формулы.
	Для Инд = 1 По СтрЧислоВхождений(ФормулаСтандарт, " ") + 1 Цикл
		Часть = ПолучитьЗаданнуюЧасть(ФормулаСтандарт, Инд);

		Если Часть = "?" Тогда
			ВошлиВУсловие = Истина;
		КонецЕсли;

		Если ВошлиВУсловие Тогда
			Если Часть = "," Тогда
				ДанныйПоказательИзУсловия = Ложь;
				ВошлиВУсловие = Ложь;
			Иначе
				ДанныйПоказательИзУсловия = Истина;
			КонецЕсли;
		КонецЕсли;

		Если Найти(Часть, "[") > 0 И Найти(Часть, "]") = 0 Тогда
			// Возводим признак составной формулы
			СоставнаяФормула = Истина;
			ОбщаяФормула = Часть;
			Продолжить;
		КонецЕсли;

		Если СоставнаяФормула Тогда
			Если Найти(Часть, "]") > 0 Тогда
				ОбщаяФормула = ОбщаяФормула + " " + Часть;
				Часть = ОбщаяФормула;
				СоставнаяФормула = Ложь;
			Иначе
				ОбщаяФормула = ОбщаяФормула + " " + Часть;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Найти(Часть, ".") > 0 Тогда

			// Выделим из формулы только показатель.
			ЧислоВходяхихЭлементов = СтрЧислоВхождений(Часть, ".") + 1;
			ТребуемыйПоказательСФормулой    = ПолучитьЗаданнуюЧасть(Часть, ЧислоВходяхихЭлементов, ".");
			Если Найти(ТребуемыйПоказательСФормулой, "[") > 0 Тогда

				ТребуемыйПоказатель = ПолучитьЗаданнуюЧасть(ТребуемыйПоказательСФормулой, 1, "[");
				Настройка = ПолучитьНастройкиФормулы(ТребуемыйПоказательСФормулой);
				ТаблУсловий = ПолучитьТаблицуУсловийОтПоказателя(Настройка);
				ЛогическоеУсловие = ПолучитьЛогическоеУсловиеОтПоказателя(Настройка);

			Иначе

				ТребуемыйПоказатель = ТребуемыйПоказательСФормулой;
				ЛогическоеУсловие = Неопределено;
				ТаблУсловий = Неопределено;

			КонецЕсли;

			Если Найти(Часть, ".ПолучитьИтогПоКолонке.") > 0 Тогда
				НужноОкруглять = ?(ПолучитьЗаданнуюЧасть(Часть, 4, ".") = "Истина", Истина, Ложь);
				НомерНужнойСтраницы = ПолучитьЗаданнуюЧасть(Часть, 3, ".");
				Многостраничность = ?(НомерНужнойСтраницы = "КаждыйЛист", Истина, Ложь);
				ИмяПоляТаблДокумента = ПолучитьЗаданнуюЧасть(Часть, 5, ".");
			Иначе
				НужноОкруглять = Ложь;
				// Должна быть одна строка. В декларации по прибыли в процедуре ИнициализацияСоставаПоказателей
				// данная колонка отсутствует, что сказывается при тестировании не открывая декларации (например, при выгрузке
				// с включенным флагом проверки КС).
				// Временно будем анализировать наличие этой колонки, и если она есть, то осуществлять по ней тоже поиск.
				// НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(ТребуемыйПоказатель, "КодПоказателяПоСоставу, КодПоказателяПоФорме, КодПоказателяПоСтруктуре");

				СтрокаКолонокДляПоиска = "КодПоказателяПоСоставу, КодПоказателяПоФорме";
				// Требуемый показатель данного сохраненного документа
				Если мТаблицаСоставПоказателей.Колонки.Найти("КодПоказателяПоСтруктуре") <> Неопределено Тогда
					СтрокаКолонокДляПоиска = СтрокаКолонокДляПоиска + ", КодПоказателяПоСтруктуре";
				КонецЕсли;
				НайденнаяСтрока = мТаблицаСоставПоказателей.Найти(ТребуемыйПоказатель, СтрокаКолонокДляПоиска);

				ИмяПоляТаблДокумента = "";
				Если НайденнаяСтрока <> Неопределено Тогда

					Если (НайденнаяСтрока.ТипДанныхПоказателя = "Е")
					  // Или Е латинская (что бывает)
					  Или (НайденнаяСтрока.ТипДанныхПоказателя = "E") Тогда
						// нужно округлять всегда.
						НужноОкруглять = Истина;
					КонецЕсли;
					ИмяПоляТаблДокумента = НайденнаяСтрока.ИмяПоляТаблДокумента;
					Многостраничность = ?(НайденнаяСтрока.ПризнМногострочности = "*", Истина, Ложь);
					// Дополнительно, признак многостраничности может быть установлен не у каждого показателя, а у всего раздела в целом в составе показателей.
					// Поэтому, если признак не нашли сразу, то предпримем попытку найти для раздела в целом, чтобы была звездочка.
					
					Если НЕ Многостраничность Тогда
						Если мТаблицаСоставПоказателей.НайтиСтроки(Новый Структура("ИмяПоляТаблДокумента, ПризнМногострочности", ИмяПоляТаблДокумента, "*")).Количество() > 0 Тогда
							Многостраничность = Истина;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;

			НовСтр = ТаблицаФормулы.Добавить();
			НовСтр.ПолнаяФормула = Часть;
			НовСтр.Показатель = ТребуемыйПоказатель;
			НовСтр.УсловияОтбора = ?(ТаблУсловий <> Неопределено, ТаблУсловий.Скопировать(), Неопределено);
			НовСтр.ЛогическоеУсловие = ЛогическоеУсловие;
			НовСтр.НужноОкруглять = НужноОкруглять;
			НовСтр.ИмяСтраницы = ИмяПоляТаблДокумента;
			НовСтр.ОбщаяФормула = ОбщаяФормула;
			НовСтр.ПоказательПрисутствует = Истина; // Для случаев, когда показателя на листе нет. ПолучитьИзОпределенногоДокумента возвращает неопределено.
			НовСтр.Многостраничность = Многостраничность;
			НовСтр.ДанныйПоказательИзУсловия = ДанныйПоказательИзУсловия;

		КонецЕсли;
	КонецЦикла;

	// Стандартный цикл перебора документов.
	Для Каждого Стр из ТаблицаПодходящихДокументов Цикл
		// Получим сохраненный документ.
		Док = Стр.СохраненныйДок;

		Если СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетПрибыль" И (СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2006Кв1"
		 Или СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2007Кв1") Тогда

			Если Док.ПоказателиОтчета.ПолеТабличногоДокументаТитульный.ТипОрг2 = "V" Тогда
				ПоМестуНахожденияОрганизации = Ложь;
			Иначе
				ПоМестуНахожденияОрганизации = Истина;
			КонецЕсли;

			// Лист 02 не заполняется
			Если (ТребуемыйРаздел = "Лист02") И (НЕ ПоМестуНахожденияОрганизации) Тогда
				Продолжить;
			КонецЕсли;

		КонецЕсли;

		ДанныеМногостраничныхРазделов = Неопределено;
		// Получим все многостраничные разделы этого документа.
		Если НЕ Док.Свойство("ДанныеМногостраничныхРазделов", ДанныеМногостраничныхРазделов) Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;

		ТаблицаМногостраничногоДокумента = Неопределено;

		Если НЕ ДанныеМногостраничныхРазделов.Свойство(ТребуемыйРаздел, ТаблицаМногостраничногоДокумента) Тогда
			Возврат СтруктураРезультата;
		КонецЕсли;

		НомерЛиста = 0;

		Для Каждого Стр1 из ТаблицаМногостраничногоДокумента Цикл

			// Для декларации по налогу на прибыль, приложение 4 к листу 02, необходимо анализировать строку 010 приложения, для определения в необходимости
			// заполения и проверки данного приложения. В соответствии с расчетов в декларации.
			Если СохраненныйДокумент.ИсточникОтчета = "РегламентированныйОтчетПрибыль" И (СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2006Кв1"
			 Или СохраненныйДокумент.ВыбраннаяФорма = "ФормаОтчета2007Кв1") Тогда
				Если ТребуемыйРаздел = "Лист02_Прил4" Тогда
					Если Стр1.Данные.П002040001003 = 0 Тогда
						// Считаем, что приложение не представляется, т.к. нет остатка неперенесенного убытка.
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			НомерЛиста = ТаблицаМногостраничногоДокумента.Индекс(Стр1) + 1;

			мСчетчикФормулДляРасшифровок = мСчетчикФормулДляРасшифровок + 1;
			ЗарегистрироватьФормулуДляРасшифровки(ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки));

			СтрокаРезультата = ФормулаСтандарт;

			// Обнулим признак не найденности, кот. хранится в табл. ТаблицаФормулы
			Для каждого Зап Из ТаблицаФормулы Цикл
				Зап.ПоказательПрисутствует = Истина;
			КонецЦикла;
			
			КолвоНеНайденныхПоказателей = 0;
			ПрерватьВыполнениеФормулы = Ложь; // Признак прерывания формулы и выход на уровень вверх.
			// Причины прерывания формул: 1. Не найдено первое значение в формуле (левая часть) используется в декларации по прибыли.
			Для Каждого РазобраннаяФормула Из ТаблицаФормулы Цикл

				Если РазобраннаяФормула.УсловияОтбора <> Неопределено Тогда
					НазваниеПоказателя = ЗаглавнаяБуква(мТекстыПоказателей.Найти(РазобраннаяФормула.ОбщаяФормула, "Показатель").ЯвныйТекст);
				КонецЕсли;

				Если РазобраннаяФормула.УсловияОтбора = Неопределено Тогда
					// Нет условий для показателя.
					Если Найти(РазобраннаяФормула.ПолнаяФормула, "[") > 0 Тогда
						// Есть условия по периоду для отчета.
						СимволРазделитель = "[";
					Иначе
						СимволРазделитель = ".";
					КонецЕсли;

					// Получим источник отчета.
					ИсточникОтФормулы = ПолучитьЗаданнуюЧасть(РазобраннаяФормула.ПолнаяФормула, 1, СимволРазделитель);
					Если Найти(РазобраннаяФормула.ПолнаяФормула, "ПолучитьИтогПоКолонке") = 0 Тогда
						НазваниеПоказателя = ЗаглавнаяБуква(ПолучитьНазваниеЧастногоПоказателя(РазобраннаяФормула.Показатель, ИсточникОтФормулы));
					Иначе
						// Сумма по колонке многострочного блока многостраничного раздела.
						НазваниеПоказателя = ЗаглавнаяБуква(ПолучитьНазваниеЧастногоПоказателя(Сред(РазобраннаяФормула.Показатель, 1, 13), ИсточникОтФормулы));
					КонецЕсли;

				КонецЕсли;

				// МногостраничностьВРазделе = РегламентированнаяОтчетность.роПолучитьСвойствоРаздела(мФормаОтчета, РазобраннаяФормула.ИмяСтраницы, "МногостраничностьВРазделе");

				Если РазобраннаяФормула.Многостраничность Тогда
					// Требумый показатель принадлежит многостраничной части, поэтому организуем цикл, для получения показателя с каждой страницы
					// многостраничного раздела, с получением номера страницы для активизации ячейки в расшифровке.
					ИтоговоеЗначение = "";

					Если РазобраннаяФормула.ИмяСтраницы = ТребуемыйРаздел Тогда
						// Если многостраничный лист текущий по формуле, то проверяем всегда ТОЛЬКО ОДНУ страницу, по текущему циклу перебора страниц многостраничного раздела.
						ПерваяСтраница = НомерЛиста - 1;
						ОкончательнаяСтраница = НомерЛиста - 1;
					Иначе
						ПерваяСтраница = 0;
						ОкончательнаяСтраница = ДанныеМногостраничныхРазделов[РазобраннаяФормула.ИмяСтраницы].Количество() - 1;
					КонецЕсли;

					Для ИндСтраница = ПерваяСтраница По ОкончательнаяСтраница Цикл

						Если Найти(РазобраннаяФормула.ПолнаяФормула, "ПолучитьИтогПоКолонке") = 0 Тогда
							Значение = ПолучитьИзОпределенногоДокумента(Док
							                                          , РазобраннаяФормула.Показатель
							                                          , Ложь // поиск по обычным листам.
							                                          , Истина // поиска по многостраничным
							                                          , ?(РазобраннаяФормула.УсловияОтбора = Неопределено, 0, 1)
							                                          , РазобраннаяФормула.НужноОкруглять
							                                          , РазобраннаяФормула.УсловияОтбора // Таблица условий
							                                          , РазобраннаяФормула.ЛогическоеУсловие
							                                          , РазобраннаяФормула.ИмяСтраницы // название раздела многостраничного документа
							                                          , ИндСтраница);

							ДополнительныеВозможности = Неопределено;
							ЗначениеРасчет = 0;
							Если ИндСтраница >= 999 Тогда
								НомерСтр = Формат(ИндСтраница + 1, "ЧГ=0");
							Иначе
								НомерСтр = Строка(ИндСтраница + 1);
							КонецЕсли;

							Если СложнаяФормула И НЕ ПервыйПоказательОтсутствуетНеПроверяемСоотношение Тогда
								Если Значение = Неопределено Тогда
									Значение = 0;
									ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
								КонецЕсли;
							КонецЕсли;

							Если Значение <> Неопределено Тогда
								ЗначСтр = Формат(Значение, "ЧРД=.;ЧН=0");
								ИтоговоеЗначение = ИтоговоеЗначение + ?(ПустаяСтрока(ИтоговоеЗначение), "", " + ") + ?(Значение < 0, "(" + ЗначСтр + ")", ЗначСтр);
								ЗначениеРасчет = Значение;
							КонецЕсли;

							Если Значение = Неопределено Тогда
								ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
							КонецЕсли;

							ЗарегистрироватьПоказательДляРасшифровки(РазобраннаяФормула.Показатель, НазваниеПоказателя, ЗначениеРасчет, Формула, Стр.СсылкаНаРО, РазобраннаяФормула.ИмяСтраницы, ДополнительныеВозможности, НомерСтр);
						Иначе

							// Подставим вместо КаждыйЛист - номер нужного листа
							// Временно, только по текущему периоду отчета. По текущему отчету. без [-1] И т.д.
							ФормулаИтогПоКолонке = СтрЗаменить(РазобраннаяФормула.ПолнаяФормула, "КаждыйЛист", Формат(ИндСтраница + 1, "ЧГ=0"));
							Значение = ПолучитьИтогПоКолонке(ФормулаИтогПоКолонке,
							                                     ИсточникОтФормулы,
							                                     Неопределено, 100,
							 Новый Структура("ДатаНач, ДатаКон", СохраненныйДокумент.ДатаНачала, СохраненныйДокумент.ДатаОкончания),
							                                           СохраненныйДокумент.Организация,
							                                          Неопределено,
							                                          Неопределено,
							                                          ТребуемыйРаздел);
							ЗначСтр = Формат(Значение, "ЧРД=.;ЧН=0");
							ИтоговоеЗначение = ИтоговоеЗначение + ?(ПустаяСтрока(ИтоговоеЗначение), "", " + ") + ?(Значение < 0, "(" + ЗначСтр + ")", ЗначСтр);

						КонецЕсли;
					КонецЦикла;
				КонецЕсли;

				// Если показатель не в многостраничной части
				Если НЕ РазобраннаяФормула.Многостраничность Тогда

					Значение = ПолучитьИзОпределенногоДокумента(Док
					                                              , РазобраннаяФормула.Показатель
					                                              , Истина // поиск по обычным листам.
					                                              , Ложь // поиска по многостраничным
					                                              , ?(РазобраннаяФормула.УсловияОтбора = Неопределено, 0, 1)
					                                              , РазобраннаяФормула.НужноОкруглять
					                                              , РазобраннаяФормула.УсловияОтбора // Таблица условий
					                                              , РазобраннаяФормула.ЛогическоеУсловие
					                                              , РазобраннаяФормула.ИмяСтраницы); // название раздела многостраничного документа

					ДополнительныеВозможности = Неопределено;
					ЗначениеРасчет = 0;
					ИтоговоеЗначение = "";

					Если СложнаяФормула И НЕ ПервыйПоказательОтсутствуетНеПроверяемСоотношение Тогда
						Если Значение = Неопределено Тогда
							Значение = 0;
							ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
						КонецЕсли;
					КонецЕсли;

					Если Значение <> Неопределено Тогда
						ИтоговоеЗначение = Формат(Значение, "ЧРД=.;ЧН=0");
						ЗначениеРасчет = Значение;
					КонецЕсли;

					Если Значение = Неопределено Тогда
						ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
					КонецЕсли;

					ЗарегистрироватьПоказательДляРасшифровки(РазобраннаяФормула.Показатель, НазваниеПоказателя, ЗначениеРасчет, Формула, Стр.СсылкаНаРО, РазобраннаяФормула.ИмяСтраницы, ДополнительныеВозможности);
				КонецЕсли;

				// Если в многостраничном разделе не нашли ниодного показателя, тогда нужно пропустить
				Если ИтоговоеЗначение = "" Тогда
					РазобраннаяФормула.ПоказательПрисутствует = Ложь;
				КонецЕсли;

				Если ПервыйПоказательОтсутствуетНеПроверяемСоотношение Тогда
					Если ИтоговоеЗначение = "" Тогда
						// Если данных нет.
						Если ТаблицаФормулы.Индекс(РазобраннаяФормула) = 0 Тогда
							// Проверим, это первый показатель? Левая часть. Если да тогда пропустим формулу в целом.
							// Прервем выполнение данной формулы.
							ПрерватьВыполнениеФормулы = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Нельзя использоваться СтрЗаменить. Т.к. в формуле могут повторяться показатели.
				Координата = Найти(СтрокаРезультата, РазобраннаяФормула.ПолнаяФормула);
				ДоРезультата = Сред(СтрокаРезультата, 1, Координата - 1);
				ПослеРезультата = Сред(СтрокаРезультата, Координата + СтрДлина(РазобраннаяФормула.ПолнаяФормула));
				// СтрокаРезультата = ДоРезультата + Строка(?(ПустаяСтрока(ИтоговоеЗначение), "0", ИтоговоеЗначение)) + ПослеРезультата;
				СтрокаРезультата = ДоРезультата + Строка(ИтоговоеЗначение) + ПослеРезультата;

			КонецЦикла; // Перебор состава оной формулы.

			Если ПрерватьВыполнениеФормулы Тогда
				Продолжить;
			КонецЕсли;

			КоличествоНеНайденныхПоказателейВФормуле = ТаблицаФормулы.НайтиСтроки(Новый Структура("ПоказательПрисутствует", Ложь)).Количество();
			Если ОтсутствуютНайденныеПоказателиПоФормулеНеВыводитьОшибку
			   И КоличествоНеНайденныхПоказателейВФормуле = ТаблицаФормулы.Количество() Тогда
				// Применяется в декларации по прибыли.
				Продолжить;
			КонецЕсли;

			Если НЕ СложнаяФормула  Тогда
				ЛеваяЧасть = СокрЛП(Сред(СтрокаРезультата, 1, Найти(СтрокаРезультата, ЛогическийЗнак) - 1));
				ПраваяЧасть = СокрЛП(Сред(СтрокаРезультата, Найти(СтрокаРезультата, ЛогическийЗнак) + СтрДлина(ЛогическийЗнак)));

				ЛеваяЧасть = ?(ВСтрокеЕстьЦифры(ЛеваяЧасть), ЛеваяЧасть, "");
				ПраваяЧасть = ?(ВСтрокеЕстьЦифры(ПраваяЧасть), ПраваяЧасть, "");

				Если НЕ ЗначениеЗаполнено(ЛеваяЧасть) Тогда
					ЛеваяЧасть = "Значения нет";
				Иначе
					// Никогда не округляем, т.к. значения полученные из док-та всегда будут округлены.
					// В случае, если необходимо принудительно выражение округлять, нужно использователь в формуле
					// оператор ОкруглитьЧислоПоФормату (
					// Или
					// ОкруглитьЧислоПоФорматуБезДеления
					ЛеваяЧастьЧисло = РасчетФормулы(ЛеваяЧасть, Ложь);
				КонецЕсли;

				Если НЕ ЗначениеЗаполнено(ПраваяЧасть) Тогда
					ПраваяЧасть = "Значения нет";
				Иначе

					// Никогда не округляем, т.к. значения полученные из док-та всегда будут округлены.
					// В случае, если необходимо принудительно выражение округлять, нужно использователь в формуле
					// оператор ОкруглитьЧислоПоФормату (
					// Или
					// ОкруглитьЧислоПоФорматуБезДеления

					ПраваяЧастьЧисло = РасчетФормулы(ПраваяЧасть, Ложь);
				КонецЕсли;

			КонецЕсли;

			Если СложнаяФормула Тогда
				Если РасчетФормулы(СтрокаРезультата, Ложь, Истина) Тогда
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					ЭтоОшибка = Ложь;
				Иначе
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ЭтоОшибка = Истина;

				КонецЕсли;
			КонецЕсли;

			Если НЕ СложнаяФормула Тогда

				Если ЛеваяЧастьЧисло = Неопределено Или ПраваяЧастьЧисло = Неопределено Тогда
					ЛеваяЧастьЧисло = 0;
					ПраваяЧастьЧисло = 0;
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ЭтоОшибка = Истина;
				ИначеЕсли (ЛеваяЧастьЧисло <> ПраваяЧастьЧисло И ЛогическийПеречисление = ВидСравнения.Равно)
				   Или (ЛеваяЧастьЧисло > ПраваяЧастьЧисло И ЛогическийПеречисление = ВидСравнения.МеньшеИлиРавно)
				   Или (ЛеваяЧастьЧисло < ПраваяЧастьЧисло И ЛогическийПеречисление = ВидСравнения.БольшеИлиРавно)
				   Или (ЛеваяЧастьЧисло = ПраваяЧастьЧисло И ЛогическийПеречисление = ВидСравнения.НеРавно)
				   Или (НЕ ОтсутствуютНайденныеПоказателиПоФормулеНеВыводитьОшибку
				   И    КоличествоНеНайденныхПоказателейВФормуле = ТаблицаФормулы.Количество()) Тогда

					// Если ВСЕ показатели формулы отсутствуют, то смотрит признак символ ^.
					// При отсутствующем показатели, всегда подставляется 0 и может сама формула в этом случае быть верно, чтобы искусственно признаеть
					// её ошибочной, возведем признак ошибки.

					// Регистрируем ошибку.
					ОбщееЧислоОшибок = ОбщееЧислоОшибок + 1;
					ЭтоОшибка = Истина;
				Иначе
					ОбщееЧислоБезОшибок = ОбщееЧислоБезОшибок + 1;
					ЭтоОшибка = Ложь;
				КонецЕсли;
			КонецЕсли;

			// Все проверяемые листы будут сорханяться результат проверки, для того чтобы была возможность отобразить соотношения в многостраничных
			// разделах, которые выполнялись без ошибок.

			Если СложнаяФормула Тогда
				Расшифровка = СтрЗаменить(СтрокаРезультата, "? ", "Если ");
			Иначе
				Расшифровка = ЛеваяЧасть + " Итог [" + Формат(ЛеваяЧастьЧисло, "ЧРД=.;ЧН=0") + "] " + ЛогическийЗнак + " " + ПраваяЧасть + " Итог [" + Формат(ПраваяЧастьЧисло, "ЧРД=.;ЧН=0") + "], лист № " + Строка(НомерЛиста) + ".";
			КонецЕсли;

			Расшифровка = УбратьСлужебныеОператоры(Расшифровка);
			СтруктураОшибок.Вставить("Описание" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ОписаниеОшибки);
			СтруктураОшибок.Вставить("Расшифровка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), Расшифровка);
			СтруктураОшибок.Вставить("НомерФормулыРасшифровки" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), мСчетчикФормулДляРасшифровок);
			СтруктураОшибок.Вставить("ЭтоОшибка" + Формат(ОбщееЧислоОшибок + ОбщееЧислоБезОшибок, "ЧГ=0"), ЭтоОшибка);

		КонецЦикла; // По требуемой странице документа.

	КонецЦикла; // Перебор документов.

	Если ОбщееЧислоОшибок + ОбщееЧислоБезОшибок > 0 Тогда
		СтруктураРезультата.Вставить("КоличествоНайденныхОшибок", ОбщееЧислоОшибок);
		СтруктураРезультата.Вставить("КоличествоНайденныхБезОшибок", ОбщееЧислоБезОшибок);
		СтруктураРезультата.Вставить("СтруктураОшибок", СтруктураОшибок);
	КонецЕсли;

	Возврат СтруктураРезультата;

КонецФункции // ОткрытьРаздел

// ОставитьВСтрокеТолькоЦифры
// Функция удалит из строки все симовлы кроме цифр
// Параметры:
//  СтрокаПроверки   - строка
// Возвращаемое значение:
//  Строка
//
Функция ВСтрокеЕстьЦифры(Знач СтрокаПроверки) Экспорт

	Для а = 1 По СтрДлина(СтрокаПроверки) Цикл
		КодСимвола = КодСимвола(Сред(СтрокаПроверки, а, 1));
		Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;

КонецФункции // ВСтрокеЕстьЦифры

// УбратьСлужебныеОператоры
// Функция очищает расшифровку от операторов.
// Параметры:
//  СтрокаРасшифровки - строка, полученная как расшифровка.
// Возвращаемое значение:
//  Строка. Расшифровка.
//
Функция УбратьСлужебныеОператоры(Знач СтрокаРасшифровки) Экспорт

	Результат = СтрЗаменить(СтрокаРасшифровки, "ПростоеОкруглениеРезультатаОтТочности ", "");
	Результат = СтрЗаменить(Результат, "Макс (", "");
	Результат = СтрЗаменить(Результат, "Мин (", "");
	// Под формулу 115 и 116 в декларации по налогу на прибыль.
	Результат = СтрЗаменить(Результат, "Мин( ", "Минимальное значение из ( ");
	Результат = СтрЗаменить(Результат, ",0)", "");
	Результат = СтрЗаменить(Результат, ",1)", ""); // ЕНВД
	Возврат Результат;

КонецФункции // УбратьСлужебныеОператоры

// ПолучитьТекстовоеПредставлениеФормулы
// Параметры:
//  Формула        - непосредственно формула
//  Источник       - от лица какой форм делается проверка
//
// Возвращаемое значение:
//  Текст для пользователя, представление формулы
//
Функция ПолучитьТекстовоеПредставлениеФормулы(Формула, Источник = Неопределено) Экспорт

	Представление = "";

	ЛогическийЗнакСтруктура = РегламентированнаяОтчетность.ВернутьЛогическийЗнакВСтроке(Формула);
	ЛогическийЗнак = ЛогическийЗнакСтруктура.СтрокаСравнения;
	ЛогическийЗнакПеречисление = ЛогическийЗнакСтруктура.ПеречислениеВидСравнения;

	СоставнаяФормула = Ложь;
	ОбщаяФормула = "";

	ЛогическийЗнакПройден = Ложь;
	Для Инд = 1 По СтрЧислоВхождений(Формула, " ") + 1 Цикл
		Часть = ПолучитьЗаданнуюЧасть(Формула, Инд);
		Процент = "";

		// Если есть точки, тогда эта формула вида Рег...УСН.ИмяПоказателя
		// Если есть открывающая скобка, соберем формулу
		Если Найти(Часть, "[") > 0 И Найти(Часть, "]") = 0 Тогда
			// Возводим признак составной формулы
			СоставнаяФормула = Истина;
			ОбщаяФормула = Часть;
			Продолжить;
		КонецЕсли;

		Если СоставнаяФормула Тогда
			Если Найти(Часть, "]") > 0 Тогда
				ОбщаяФормула = ОбщаяФормула + " " + Часть;
				Часть = ОбщаяФормула;
				СоставнаяФормула = Ложь;
			Иначе
				ОбщаяФормула = ОбщаяФормула + " " + Часть;
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Если Найти(Часть, ".") > 0 Тогда

			Если Найти(Часть, "%") > 0 Тогда
				Процент = Сред(Часть, 1, Найти(Часть, "%"));
				Часть = СтрЗаменить(Часть, Процент, "");
			КонецЕсли;

			// по умолчанию или есть есть формула, то всегда выдавать полное название декларации.
			Если (Источник = Неопределено)
			   Или ((Найти(Часть, "[") > 0)
			     И (Найти(Часть, "?") = 0)) Тогда

				НазваниеОтчета = ПолучитьНазваниеОтчета(ПолучитьЗаданнуюЧасть(Часть, 1, "."));

			Иначе

				Если Найти(Часть, Источник) > 0 Тогда
					НазваниеОтчета = "";
					// в формуле указана форма, текущего отчета
					
				КонецЕсли;
			КонецЕсли;

			Если Не РегламентированнаяОтчетность.ПустоеЗначение(Процент) Тогда
				УточняющийПризнак = "БольшеЧегоПроцент";
			Иначе
				УточняющийПризнак = "ЯвныйТекст";
			КонецЕсли;

			Если ЛогическийЗнакПройден Тогда
				Если (ЛогическийЗнакПеречисление = ВидСравнения.Больше) Или (ЛогическийЗнакПеречисление = ВидСравнения.Меньше) Тогда
					УточняющийПризнак = "БольшеЧегоПроцент";
				Иначе
					УточняющийПризнак = "Чему";
					// Специально снимаем признак пройденности логического знака, чтобы больше обработка текста показателя по склонению не проходила,
					// а всегда шла как явный текст.
					// Склоняем только первый послей логического знака показатель.
					// Например
					// А равно Сумме1 + сумма2 + сумма3
					ЛогическийЗнакПройден = Ложь;
				КонецЕсли;
			КонецЕсли;

			Процент = ?(РегламентированнаяОтчетность.ПустоеЗначение(Процент), "", Процент + " от ");
			//Если Найти(Часть, "[") > 0 И Найти(Часть, "[") > 0 Тогда
			Если СтрЧислоВхождений(Часть, "[") > 1 Тогда
				НазваниеПоказателя = Сред(Часть, Найти(Часть, ".") + 1);
				ИсточникОтчетаОтПоказателя = Сред(Часть, 1, -1 + Найти(Часть, "["));
			Иначе
				НазваниеПоказателя = ПолучитьЗаданнуюЧасть(Часть, 2, ".");
				ИсточникОтчетаОтПоказателя = ПолучитьЗаданнуюЧасть(Часть, 1, ".");
				Если Найти(ИсточникОтчетаОтПоказателя, "[") > 0 Тогда
					ИсточникОтчетаОтПоказателя = Сред(ИсточникОтчетаОтПоказателя, 1, Найти(ИсточникОтчетаОтПоказателя, "[") -1);
				КонецЕсли;

			КонецЕсли;
			ПоказательОтчета = Процент + ПолучитьНазваниеПоказателя(НазваниеПоказателя, ИсточникОтчетаОтПоказателя, ?(РегламентированнаяОтчетность.ПустоеЗначение(Процент), УточняющийПризнак, "БольшеЧегоПроцент"));
			Представление = ?(Представление = "", ДобавлениеРазделителя(НазваниеОтчета) + ПоказательОтчета,Представление + " " + ДобавлениеРазделителя(НазваниеОтчета) + ПоказательОтчета);

		Иначе
			Представление = Представление + " " + Часть;

			Если ЛогическийЗнак = Часть Тогда
				ЛогическийЗнакПройден = Истина;
			КонецЕсли;

		КонецЕсли;
	КонецЦикла;

	ВместоЗнака = "";
	Если ЛогическийЗнак <> Неопределено Тогда

		ЛевЧасть = Сред(Представление, 1, Найти(Представление, ЛогическийЗнак));
		Если Найти(Нрег(ЛевЧасть), "сумма") > 0 Тогда
			МетодОбращения = "сумма";
		ИначеЕсли Найти(Нрег(ЛевЧасть), "база") = 1 Тогда
			МетодОбращения = "сумма";
		ИначеЕсли (Найти(Нрег(ЛевЧасть), "значение") > 0)
		      Или (Найти(Нрег(ЛевЧасть), "количество") > 0) Тогда
			МетодОбращения = "значение";
		ИначеЕсли Найти(Нрег(ЛевЧасть), "налоговая база") > 0 Тогда
			МетодОбращения = "сумма";
		КонецЕсли;

	Конецесли;

	// Проставим вместо логических занков текст.
	// В конструкции Если ... Тогда  и без конструкции
	Если Найти(Представление, "Если ") = 0 Тогда
		Если ЛогическийЗнакПеречисление = ВидСравнения.Равно Тогда
			ВместоЗнака = ?(МетодОбращения = "сумма", "должна быть равна",?(МетодОбращения = "значение", "должно быть равно", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.БольшеИлиРавно Тогда
			//ВместоЗнака = "должна быть больше или равна";
			ВместоЗнака = ?(МетодОбращения = "сумма", "должна быть больше или равна",?(МетодОбращения = "значение", "должно быть больше или равное", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.МеньшеИлиРавно Тогда
			//ВместоЗнака = "должна быть меньше или равна";
			ВместоЗнака = ?(МетодОбращения = "сумма", "должна быть меньше или равна",?(МетодОбращения = "значение", "должно быть меньше или равное", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.Меньше Тогда
			//ВместоЗнака = "должна быть меньше";
			ВместоЗнака = ?(МетодОбращения = "сумма", "должна быть меньше",?(МетодОбращения = "значение", "должно быть меньше", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.Больше Тогда
			// ВместоЗнака = "должна быть больше";
			ВместоЗнака = ?(МетодОбращения = "сумма", "должна быть больше",?(МетодОбращения = "значение", "должно быть больше", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.НеРавно Тогда
			ВместоЗнака = ?(МетодОбращения = "сумма", "не должна равняться",?(МетодОбращения = "значение", "не должно быть равным", ""));
			//ВместоЗнака = "не должна равняться";
		КонецЕсли;
	Иначе
		Если ЛогическийЗнакПеречисление = ВидСравнения.Равно Тогда
			ВместоЗнака = ?(МетодОбращения = "сумма", "равна",?(МетодОбращения = "значение", "равно", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.БольшеИлиРавно Тогда
			// ВместоЗнака = "должна быть больше или равна";
			ВместоЗнака = ?(МетодОбращения = "сумма", "больше или равна",?(МетодОбращения = "значение", "больше или равное", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.МеньшеИлиРавно Тогда
			// ВместоЗнака = "должна быть меньше или равна";
			ВместоЗнака = ?(МетодОбращения = "сумма", "меньше или равна",?(МетодОбращения = "значение", "меньше или равное", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.Меньше Тогда
			//ВместоЗнака = "должна быть меньше";
			ВместоЗнака = ?(МетодОбращения = "сумма", "меньше",?(МетодОбращения = "значение", "меньше", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.Больше Тогда
			// ВместоЗнака = "должна быть больше";
			ВместоЗнака = ?(МетодОбращения = "сумма", "больше",?(МетодОбращения = "значение", "больше", ""));
		ИначеЕсли ЛогическийЗнакПеречисление = ВидСравнения.НеРавно Тогда
			// ВместоЗнака = "не должна равняться";
			ВместоЗнака = ?(МетодОбращения = "сумма", "не должна равняться",?(МетодОбращения = "значение", "не должно равняться", ""));
		КонецЕсли;
	КонецЕсли;

	Если НЕ РегламентированнаяОтчетность.ПустоеЗначение(ВместоЗнака) Тогда
		Представление = СтрЗаменить(Представление, ЛогическийЗнак, ВместоЗнака);
	КонецЕсли;

	Представление = СтрЗаменить(Представление, "КонецЕсли", "");
	Представление = СтрЗаменить(Представление, "больше сумма", "больше суммы");
	Представление = СтрЗаменить(Представление, "больше значение", "больше значения");
	Представление = СтрЗаменить(Представление, "равна сумма", "равна сумме");
	Представление = СтрЗаменить(Представление, "равна среднегодовая стоимость", "равна среднегодовой стоимости");
	Представление = СтрЗаменить(Представление, "равна значение", "равна значению");
	Представление = СтрЗаменить(Представление, "равна база", "равна базе");
	Представление = СтрЗаменить(Представление, "равна налоговая база", "равна налоговой базе");

	Представление = СтрЗаменить(Представление, "больше Сумма", "больше суммы");
	Представление = СтрЗаменить(Представление, "больше Значение", "больше значения");
	Представление = СтрЗаменить(Представление, "равна Сумма", "равна сумме");
	Представление = СтрЗаменить(Представление, "равна Среднегодовая стоимость", "равна среднегодовой стоимости");
	Представление = СтрЗаменить(Представление, "равна Значение", "равна значению");
	Представление = СтрЗаменить(Представление, "равна База", "равна базе");
	Представление = СтрЗаменить(Представление, "равна Налоговая база", "равна налоговой базе");

	Возврат ЗаглавнаяБуква(Представление);

КонецФункции // ПолучитьТекстовоеПредставлениеФормулы

// ПолучитьНазваниеВыполняемойФормулы
// Функция возвращает название формулы (представления) только для не состоавных формул, выполяемых
// через модуль.
//
// Параметры:
//  Название       - название формулы, записанные на листе контрольных соотношений.
// Возвращаемое значение:
//  Строка         - название формулы.
//
Функция ПолучитьНазваниеВыполняемойФормулы(СтрокаНастройки) Экспорт
	ПредставлениеФормулы = СтрокаНастройки.ПредставлениеФормулы;

	Если РегламентированнаяОтчетность.ПустоеЗначение(ПредставлениеФормулы) Тогда

		Возврат ПолучитьТекстовоеПредставлениеФормулы(СтрокаНастройки.Формула, СохраненныйДокумент.ИсточникОтчета);

	Иначе

		Возврат СтрокаНастройки.ПредставлениеФормулы;

	КонецЕсли;

КонецФункции // ПолучитьНазваниеВыполняемойФормулы

Функция ЗаглавнаяБуква(Знач Строка) Экспорт
	Строка = СокрЛП(Строка);
	Возврат Врег(Сред(Строка, 1, 1)) + Сред(Строка, 2);
КонецФункции

// ДобавлениеРазделителя
// Функция используется в процедуре ПолучтьТекстовоеПредставлениеФормулы
// Вставляет разделитель между названием и текстом параметра.
// Параметры:
//  Значение       - часть формулы. (название отчета)
// Возвращаемое значение:
//  Возвращается либо пустое значение, либо с разделителем в конце.
//
Функция ДобавлениеРазделителя(Значение)
	Если РегламентированнаяОтчетность.ПустоеЗначение(Значение) Тогда
		Возврат "";
	Иначе
		Возврат Значение + ", ";
	КонецЕсли;
	
КонецФункции // ДобавлениеРазделителя

// ПолучитьНазваниеЧастногоПоказателя
// Функция возвращает название показателя, не обрабатывая его каким-либо образом.
// Параметры:
//  Показатель       - название показателя, как он хранится в декларации.
//  ВариантНаписания - вариант написания, по умолчанию ЯвныйТекст.
// Возвращаемое значение:
//  Текст, название показателя.
//
Функция ПолучитьНазваниеЧастногоПоказателя(Знач Показатель, ИсточникОтчетаОтПоказателя, ВариантНаписания = "ЯвныйТекст") Экспорт

	ПоисковаяСтр = ?(ИсточникОтчетаОтПоказателя = Неопределено, "", ИсточникОтчетаОтПоказателя) + "." + Показатель;
	// В том случае, если формула для текущего проверяемого документа, то коды показателей должны указываться БЕЗ ИсточникаОтчета
	Если ИсточникОтчетаОтПоказателя = СохраненныйДокумент.ИсточникОтчета Тогда
		ПоисковаяСтр = Показатель;
	КонецЕсли;

	НайденнаСтрока = мТекстыПоказателей.Найти(ПоисковаяСтр, "Показатель");

	Если НайденнаСтрока = Неопределено Тогда
		Возврат РегламентированнаяОтчетность.УдобочитаемоеПредставлениеПоКодуПоказателя(Показатель);
		// Нужно будет предусматреть вариант, когда в декларации есть не только разделы, но и листы и приложения.
		//Раздел = Сред(Показатель, 5, 2);
		// Уберем 0 если есть. Допустим 02 - раздел 2
		//Раздел = СтрЗаменить(Раздел, "0", "");
		// Поставим точку, например 21 - 2.1
		//Если СтрДлина(Раздел) > 1 Тогда
		//	Раздел = Сред(Раздел, 1, 1) + "." + Сред(Раздел, 2);
		//КонецЕсли;

		//// Возврат "сумма по строке " + Сред(Показатель, 9, 3) + ", раздела " + Раздел + " графа " + Прав(Показатель, 2);
		//Возврат "раздел " + Раздел + ", строка " + Сред(Показатель, 9, 3) + ", графа " + Прав(Показатель, 2);

	Иначе

		Возврат НайденнаСтрока[ВариантНаписания];

	КонецЕсли;

КонецФункции // ПолучитьНазваниеЧастногоПоказателя

// ПолучитьНазваниеПоказателя
// Функция возвращает представление показателя отчета.
//
// Параметры:
//  Показатель       - показатель отчета.
//  ВариантНаписания - "ЯвныйТекст, "Чему", "БольшеЧегоПроцент"
//
// Возвращаемое значение:
//  Представление показателя
//
Функция ПолучитьНазваниеПоказателя(Показатель, ИсточникОтчетаОтПоказателя, ВариантНаписания = "ЯвныйТекст")

	Скобка1 = Найти(Показатель, "[");
	Если Скобка1 > 0 Тогда

		ОснПоказатель = СокрЛП(ПолучитьЗаданнуюЧасть(Показатель, 1, "["));
		НастройкаОтПоказателя = ПолучитьНастройкиФормулы(Показатель);
		ТаблУсловий = ПолучитьТаблицуУсловийОтПоказателя(НастройкаОтПоказателя);
		ЛогическоеУсловие = ПолучитьЛогическоеУсловиеОтПоказателя(НастройкаОтПоказателя);

		Результат = ПолучитьНазваниеЧастногоПоказателя(ОснПоказатель, ИсточникОтчетаОтПоказателя, ВариантНаписания);
		Результат = Результат + ", при условии, что";

		Для Инд = 0 По ТаблУсловий.Количество() - 1 Цикл
			ТекстПоказатель = ПолучитьНазваниеЧастногоПоказателя(ТаблУсловий[Инд].Показатель, ИсточникОтчетаОтПоказателя, ВариантНаписания);

			// Знак @ означает признак, он не может быть чему-то равено, он или есть или нет.
			//
			Если Лев(ТекстПоказатель, 1) = "@" Тогда
				ПараметрПризнак = Истина;
				ТекстПоказатель = Сред(ТекстПоказатель, 2);

				// Если значение строка, то добавим кавычки
				Если ТипЗнч(ТаблУсловий[Инд].ЗначениеПоказателя) = Тип("Строка") Тогда
					ЗначДляПоиска = """" + ТаблУсловий[Инд].ЗначениеПоказателя + """";
				Иначе
					ЗначДляПоиска = ТаблУсловий[Инд].ЗначениеПоказателя;
				КонецЕсли;

				ПоисковаяСтрока = "Если " + ТаблУсловий[Инд].ЛогическийЗнак + " " + ЗначДляПоиска + " Тогда ";
				Если Найти(ТекстПоказатель, ПоисковаяСтрока) > 0 Тогда
					ВспомогатФормула = ТекстПоказатель;
					ВспомогатФормула = СтрЗаменить(ВспомогатФормула, ПоисковаяСтрока, Символы.ПС);
					ВспомогатФормула = СтрПолучитьСтроку(ВспомогатФормула, 2);
					ЕщеЕсли = Найти(ВспомогатФормула, " Если ");
					Если ЕщеЕсли > 0 Тогда
						ТекстПоказатель = Сред(ВспомогатФормула, 1, ЕщеЕсли - 1);
					Иначе
						ТекстПоказатель = ВспомогатФормула;
					КонецЕсли;
				Иначе
					ТекстПоказатель = "Ошибка разбора формулы - признака оператор @ конструкция Если .. Тогда";
				КонецЕсли;

				// ТекстПоказатель = Сред(ТекстПоказатель, "Если " + ТаблУсловий[Инд].ЛогическийЗнак + " " + ТаблУсловий[Инд].ЗначениеПоказателя
				// недописано
			Иначе
				ПараметрПризнак = Ложь;
			КонецЕсли;

			Результат = Результат + " " + ТекстПоказатель;

			Если Найти(нРег(ТекстПоказатель), "сумма") > 0 Тогда
				ТипОбращения = "сумма";
			ИначеЕсли Найти(нРег(ТекстПоказатель), "признак") > 0 Или Найти(нРег(ТекстПоказатель), "кбк") > 0 Или Найти(нРег(ТекстПоказатель), "показатель") > 0 Или Найти(нРег(ТекстПоказатель), "код бюджетной классификации") > 0 Тогда
				ТипОбращения = "код";
			ИначеЕсли Найти(нРег(ТекстПоказатель), "значение") > 0 Или Найти(нРег(ТекстПоказатель), "значение") > 0 Тогда
				ТипОбращения = "значение";
			КонецЕсли;

			Если ТаблУсловий[Инд].ЛогическийЗнак = "=" Тогда
				ЗнакТекст = ?(ТипОбращения = "сумма", "равна",?(ТипОбращения = "код", "равен", ?(ТипОбращения = "значение", "равно", "")));
			ИначеЕсли ТаблУсловий[Инд].ЛогическийЗнак = "<>" Тогда
				ЗнакТекст = ?(ТипОбращения = "сумма", "не равна",?(ТипОбращения = "код", "не равен", ?(ТипОбращения = "значение", "не равно", "")));
			ИначеЕсли ТаблУсловий[Инд].ЛогическийЗнак = ">" Тогда
				ЗнакТекст = "больше";
			ИначеЕсли ТаблУсловий[Инд].ЛогическийЗнак = "<" Тогда
				ЗнакТекст = "меньше";
			ИначеЕсли ТаблУсловий[Инд].ЛогическийЗнак = "<=" Тогда
				ЗнакТекст = ?(ТипОбращения = "сумма", "меньше или равна",?(ТипОбращения = "код", "меньше или равен", ?(ТипОбращения = "значение", "меньше или равно", "")));
			ИначеЕсли ТаблУсловий[Инд].ЛогическийЗнак = ">=" Тогда
				ЗнакТекст = ?(ТипОбращения = "сумма", "больше или равна",?(ТипОбращения = "код", "больше или равен", ?(ТипОбращения = "значение", "больше или равно", "")));
			КонецЕсли;

			Если НЕ ПараметрПризнак Тогда
				Результат = Результат + " " + ЗнакТекст + " " + ТаблУсловий[Инд].ЗначениеПоказателя;
			КонецЕсли;

			Если Инд <> ТаблУсловий.Количество() - 1 Тогда
				Результат = Результат + " " + Нрег(ЛогическоеУсловие);
			КонецЕсли;

		КонецЦикла;

		Возврат Результат;
	Иначе

		Возврат ПолучитьНазваниеЧастногоПоказателя(Показатель, ИсточникОтчетаОтПоказателя, ВариантНаписания);

	КонецЕсли;

КонецФункции // ПолучитьНазваниеПоказателя

// ПолучитьНазваниеОтчета
//
Функция ПолучитьНазваниеОтчета(Источник, ТипНазвания = "Наименование") Экспорт

	НачЗначение = Источник;
	Если Найти(Источник, "[") > 0 Тогда
		Источник = ПолучитьЗаданнуюЧасть(Источник, 1, "[");
	КонецЕсли;

	ИскомоеЗнач = ПолучитьНастройкуОтчета(Источник, ТипНазвания);
	Если ИскомоеЗнач <> Неопределено Тогда

		Если Найти(НачЗначение, "[-1]") > 0 Тогда
			Возврат ИскомоеЗнач + ", прошлого периода";
		ИначеЕсли Найти(НачЗначение, "[ВсеПериоды-]") > 0 Тогда // используется в УСН-е, проверено.
			Возврат ИскомоеЗнач + ", прошлые отчетные периоды, сумма строк";
		ИначеЕсли Найти(НачЗначение, "[ВсеПериоды+]") > 0 Тогда // пока нигде не используется
			Возврат ИскомоеЗнач + ", прошлые отчетные периоды, сумма строк, включая текущий отчет";

		Иначе
			Возврат ИскомоеЗнач;
		КонецЕсли;

	Иначе
		Возврат "[Ошибка разбора формулы]";
	КонецЕсли;

КонецФункции // ПолучитьНазваниеОтчета

// РасчетФормулы
//
Функция РасчетФормулы(Знач Формула, Округлять = Истина, ВозвращатьБулево = Ложь) Экспорт

	Формула = СтрЗаменить(Формула, "Если ", "");
	Формула = СтрЗаменить(Формула, " Тогда", "");
	Формула = СтрЗаменить(Формула, "КонецЕсли;", "");
	Формула = СтрЗаменить(Формула, Символ(160), "");
	Формула = СокрЛП(Формула);

	Результат = 0;
	Попытка
		Результат = Вычислить(Формула);
	Исключение

		Формула = ?(Найти(Формула, ",") > 0, СтрЗаменить(Формула, ",", "."), СтрЗаменить(Формула, ".", ","));

		Попытка

		Результат = Вычислить(Формула);
		//Результат = ОкруглитьЧислоПоФорматуБезДеления(Результат);

		Исключение
			Сообщить("Ошибка вычисления показатель-формула " + Формула);
			Возврат ?(ВозвращатьБулево, Ложь, 0);
		КонецПопытки;
	КонецПопытки;

	Если ВозвращатьБулево Тогда
		Возврат Результат;
	КонецЕсли;

	Если ТипЗнч(Результат) = Тип("Число") Тогда
		Возврат ?(Округлять, ОкруглитьЧислоПоФорматуБезДеления(Результат), Результат);
	Иначе
		Возврат 0;
	КонецЕсли;

КонецФункции // РасчетФормулы

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФормату(ИсходноеЧисло) Экспорт

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, мТочностьЕдиницыИзмерения);

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФормату()

// Функция округляет число согласно установленной размерности чисел.
// Функция применяется в декларации по прибыли. Округляет без деления, учитывая точность ед. измерения в декларации.
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ПростоеОкруглениеРезультатаОтТочности(ИсходноеЧисло) Экспорт

	ОкругленноеЧисло = Окр(ИсходноеЧисло / 1, мТочностьЕдиницыИзмерения);

	Возврат ОкругленноеЧисло;

КонецФункции // ПростоеОкруглениеРезультатаОтТочности()

// Функция округляет число согласно установленной размерности чисел.
//
// Параметры:
//  ИсходноеЧисло - заданное число;
//
// Возвращаемое значение:
//  число, округленное с заданной точностью с учетом установленной единицы измерения.
//
Функция ОкруглитьЧислоПоФорматуБезДеления(ИсходноеЧисло) Экспорт

	ОкругленноеЧисло = Окр(ИсходноеЧисло / мДелитель, мТочностьЕдиницыИзмерения) * мДелитель;

	Возврат ОкругленноеЧисло;

КонецФункции // ОкруглитьЧислоПоФорматуБезДеления()

// ВызватьПроверкуИзРодительскогоОтчета
// Функция вызывает специализированную функцию из родительского отчета
//
Функция ВызватьПроверкуИзРодительскогоОтчета(НазваниеФункцииПроверки, ОтчетныйПериод, ТаблицаПодходящихДокументов, Знач Формула, ОписаниеОшибки, СтрокаНастройки) Экспорт

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	СтруктураПараметров.Вставить("ТаблицаПодходящихДокументов", ТаблицаПодходящихДокументов);
	СтруктураПараметров.Вставить("Формула", Формула);
	СтруктураПараметров.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураПараметров.Вставить("СтрокаНастройки", СтрокаНастройки);

	Возврат мФормаОтчета.ПроверитьСоотношенияПоказателей(НазваниеФункцииПроверки, ЭтотОбъект, СтруктураПараметров);

КонецФункции // ВызватьПроверкуИзРодительскогоОтчета

// ПолучитьЗначениеИЗарегистрироватьПоказатель
//
// СвязкаУсловий       - в таблице условий, условия могут быть связаны по И или ИЛИ - строка.
// ОбрабатыватьОтсутствующиеЗначения - если Истина, тогда отсутствующее значение будет равно 0 и попадать в расшифровку.
// , ОбрабатыватьОтсутствующиеЗначения
//
Функция ПолучитьЗначениеИЗарегистрироватьПоказатель(Док, Раздел, Показатель, ПоискПоОбычнымЛистам, ПоискПоМногостраничных, Округлять, СсылкаНаРО, ТаблУсл, СвязкаУсловий = "И") Экспорт

	СуммаРасш = "";
	СуммаИтог = 0;

	Результат = Новый Структура("Значение, Расшифровка", СуммаИтог, "0");

	Для Инд = 0 По Док.ДанныеМногостраничныхРазделов[Раздел].Количество() - 1 Цикл
		Значение = ПолучитьИзОпределенногоДокумента(Док
											  , Показатель
											  , ПоискПоОбычнымЛистам // поиск по обычным листам.
											  , ПоискПоМногостраничных // поиска по многостраничным
											  , ?(ТаблУсл = Неопределено, 0, 1) // признак наличия условия
											  , Округлять
											  , ТаблУсл // Таблица условий, для не сельхоз. листа
											  , СвязкаУсловий
											  , Раздел // название раздела многостраничного документа
											  , Инд);

		//Если НЕ ОбрабатыватьОтсутствующиеЗначения Тогда
		//	// Режим игнорирования не найденных значений.
		//	Продолжить;
		//КонецЕсли;

		ДополнительныеВозможности = Неопределено;
		Если Значение = Неопределено Тогда
			ДополнительныеВозможности = "ВывестиТекстОтчетНеОткрывать:Требуемый показатель в отчете отсутствует. Возможно, что необходимо получить значение показателя с условиями, которые не выполнены.";
			Значение = 0;
			Продолжить; // Пропустим листы где не нашлись значения.
		КонецЕсли;

		НазваниеПоказателя = ЗаглавнаяБуква(ПолучитьНазваниеЧастногоПоказателя(Показатель, "РегламентированныйОтчетПрибыль"));
		НазваниеПоказателя = НазваниеПоказателя + ", лист № " + Строка(Инд + 1);

		СуммаРасш = ?(СуммаРасш = "", "", СуммаРасш + " + ") + Формат(Значение, "ЧРД=.;ЧН=0;ЧО=0");
		СуммаИтог = СуммаИтог + Значение;

		ЗарегистрироватьПоказательДляРасшифровки(Показатель, НазваниеПоказателя, Значение, "Формулы нет", СсылкаНаРО, Раздел, ДополнительныеВозможности, Формат(Инд + 1, "ЧН=0"));

	КонецЦикла;

	Результат.Значение = СуммаИтог;
	Результат.Расшифровка = СуммаРасш;

	Возврат Результат;

КонецФункции // ПолучитьЗначениеИЗарегистрироватьПоказатель

СписокРасшифровкиформулы = Новый ТаблицаЗначений;
СписокРасшифровкиформулы.Колонки.Добавить("Номер");
СписокРасшифровкиформулы.Колонки.Добавить("ТекстовоеПредставлениеФормулы");
//СписокРасшифровкиформулы.Колонки.Добавить("ОригинальнаяФормула");

СписокРасшифровкиПоказателей = Новый ТаблицаЗначений;
СписокРасшифровкиПоказателей.Колонки.Добавить("Номер"); // ссылка на формулу
СписокРасшифровкиПоказателей.Колонки.Добавить("ИмяПоказателя");
СписокРасшифровкиПоказателей.Колонки.Добавить("ПредставлениеПоказателя");
СписокРасшифровкиПоказателей.Колонки.Добавить("ЗначениеПоказателя");
СписокРасшифровкиПоказателей.Колонки.Добавить("ФормулаПоказателя");
СписокРасшифровкиПоказателей.Колонки.Добавить("СсылкаНаДокументРО"); // ссылка на декларацию
СписокРасшифровкиПоказателей.Колонки.Добавить("ИмяСтраницы");
СписокРасшифровкиПоказателей.Колонки.Добавить("Страница"); // Номер страницы для многостраничных разделов, для остальных "".
СписокРасшифровкиПоказателей.Колонки.Добавить("ДополнительныеВозможности"); // Для вывода сообщений в расшифровках, например, если показатель отсутствует.


#КонецЕсли