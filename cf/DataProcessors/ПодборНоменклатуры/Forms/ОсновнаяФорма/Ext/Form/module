Перем мСписокПометокНаборов;
Перем мТекущийЭлементФормы;
Перем мВремяПоследнегоПоиска;
Перем мВалютаРегламентированногоУчета;
Перем ПозицияПанелиНоменклатуры;

// Состояние иерархии и подбора.
Перем ИерархияСправочника;
Перем ИерархияЗапроса;
Перем ФильтрЗапроса;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает текущего родителя
//
// Параметры:
//  Родитель - ссылка, содержащая значение родителя
//
Процедура УстановитьТекущегоРодителя(Родитель)

	ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока = Родитель;
	
КонецПроцедуры // УстановитьТекущегоРодителя()

// Функция получить текущего родителя
//
// Возвращаемое значение:
//	Ссылку на текущего родителя
//
Функция ПолучитьТекущегоРодителя() Экспорт

	Возврат ЭлементыФормы.ДеревоНоменклатуры.ТекущаяСтрока;

КонецФункции // ПолучитьТекущегоРодителя()

// Процедура управляет видимостью, доступностью элементов диалога.
//
Процедура УправлениеДиалогом()

	Перем ЕстьЦена, ЕстьКоличество;

	Если СтруктураИсходныхПараметров.Свойство("ЕстьЦена" , ЕстьЦена) Тогда
		ЭлементыФормы.ЗапрашиватьЦену.Доступность  = ЕстьЦена;
		ЗапрашиватьЦену  = ?(ЕстьЦена,  ЗапрашиватьЦену,  Ложь);
	Иначе
		ЭлементыФормы.ЗапрашиватьЦену.Доступность  = Ложь;
		ЗапрашиватьЦену  = Ложь;
	КонецЕсли;
    
	Если СтруктураИсходныхПараметров.Свойство("ЕстьКоличество", ЕстьКоличество) Тогда
		ЭлементыФормы.ЗапрашиватьКоличество.Доступность = ЕстьКоличество;
		ЗапрашиватьКоличество = ?(ЕстьКоличество, ЗапрашиватьКоличество, Ложь);
	Иначе

		// по умолчанию если параметр не передан, то флаг запроса количества доступен,
		// а выставлен он или нет регулируется в процедуре ПриОткрытии()
		ЭлементыФормы.ЗапрашиватьКоличество.Доступность = Истина;
	КонецЕсли;

	ЭлементыФормы.НадписьДатаРасчетов.Видимость  = ЗначениеЗаполнено(ДатаРасчетов);
	ЭлементыФормы.ДатаРасчетов.Видимость         = ЗначениеЗаполнено(ДатаРасчетов);

КонецПроцедуры // УправлениеДиалогом()

// Процедура выполняет поиск номенклатуры по заданным критериям.
//
Процедура ВыполнитьПоиск()

	Если мВремяПоследнегоПоиска = ТекущаяДата() Тогда

		// Искать не надо, вероятно после изменения текста в окне поиска пользователь нажал на
		// кнопку открытия.

		Возврат;

	КонецЕсли;

	// Надо добавить шаблон в историю
	ЭлементИстории = ЭлементыФормы.ПолеПоиска.СписокВыбора.НайтиПоЗначению(ПолеПоиска);
	Если ЭлементИстории = Неопределено Тогда

		// Надо добавить
		ЭлементыФормы.ПолеПоиска.СписокВыбора.Вставить(0, ПолеПоиска);
	Иначе

		// Надо переместить в начало истории
		ИндексЭлементаИстории = ЭлементыФормы.ПолеПоиска.СписокВыбора.Индекс(ЭлементИстории);
		ЭлементыФормы.ПолеПоиска.СписокВыбора.Сдвинуть(ЭлементИстории, - ИндексЭлементаИстории);
	КонецЕсли;

	ШаблонПоиска = СокрЛП(ПолеПоиска);
	Если ШаблонПоиска = "" Тогда
		Возврат;
	КонецЕсли;

	// заменим спецсимволы
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "~", "~~");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "%", "~%");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "_", "~_");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "[", "~[");
	ШаблонПоиска = СтрЗаменить(ШаблонПоиска, "-", "~-");
	ШаблонПоиска = ШаблонПоиска+"%";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ШаблонПоиска", ШаблонПоиска);

	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 51
	|	Номенклатура.Код КАК Код,
	|	Номенклатура.Артикул КАК Артикул,
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
	|	Номенклатура.Родитель КАК Родитель
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|
	|ГДЕ
	|	Номенклатура." + ЭлементыФормы.СписокВидовПоиска.Значение + " ПОДОБНО &ШаблонПоиска СПЕЦСИМВОЛ ""~""
	|	И Номенклатура.ЭтоГруппа = Ложь
	|";

	ВыбраннаяНоменклатура = Неопределено;
	Родитель = Неопределено;

	ФормаВыбораПоиска = ПолучитьФорму("ФормаВыбораПоиска", ЭтаФорма);
	ФормаВыбораПоиска.ТаблицаНоменклатуры = Запрос.Выполнить().Выгрузить();

	ВыбраннаяНоменклатура = Неопределено;
	Если ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 0 Тогда
		Предупреждение("Отсутствует номенклатура с заданными критериями поиска!");
		мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
		Возврат;
	ИначеЕсли ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 1 Тогда
		ВыбраннаяНоменклатура = ФормаВыбораПоиска.ТаблицаНоменклатуры[0].Номенклатура;
		Родитель              = ФормаВыбораПоиска.ТаблицаНоменклатуры[0].Родитель;
	Иначе
		Если ФормаВыбораПоиска.ТаблицаНоменклатуры.Количество() = 51 Тогда
			Предупреждение("По заданным критериям поиска найдено более 50 элементов номенклатуры!
							|Будут показаны первые 50.");
			ФормаВыбораПоиска.ТаблицаНоменклатуры.Удалить(50);
		КонецЕсли;

		СтруктураПараметров = ФормаВыбораПоиска.ОткрытьМодально();

		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			СтруктураПараметров.Свойство("ВыбраннаяНоменклатура", ВыбраннаяНоменклатура);
			СтруктураПараметров.Свойство("Родитель"             , Родитель);
		Иначе
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат; // форма закрыта не по кнопке "ОК"
		КонецЕсли;

		Если ВыбраннаяНоменклатура = Неопределено Тогда
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	УстановитьТекущегоРодителя(Родитель);
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.СправочникНоменклатура.ТекущаяСтрока = ВыбраннаяНоменклатура;
		мТекущийЭлементФормы = ЭлементыФормы.СправочникНоменклатура;
	Иначе
		СтрокаНоменклатуры = НоменклатураДляПодбора.Найти(ВыбраннаяНоменклатура, "Номенклатура");
		Если СтрокаНоменклатуры = Неопределено Тогда
			Предупреждение("Найденная номенклатура отсутствует в подборе при заданных условиях!");
			мТекущийЭлементФормы = ЭлементыФормы.ПолеПоиска;
			Возврат;
		Иначе
			ЭлементыФормы.НоменклатураДляПодбора.ТекущаяСтрока = СтрокаНоменклатуры;
		КонецЕсли;
		мТекущийЭлементФормы = ЭлементыФормы.НоменклатураДляПодбора;
	КонецЕсли;

	мВремяПоследнегоПоиска = ТекущаяДата();

КонецПроцедуры // ВыполнитьПоиск()

// Процедура устанавливает отбор по номенклатурной группе.
//
Процедура УстановитьОтборПоНоменклатурнойГруппе()

	ЕстьНоменклатурнаяГруппа = ЗначениеЗаполнено(НоменклатурнаяГруппа);

	Если ПодборПоСправочнику Тогда
		ЭлементОтбора               = ЭлементыФормы.СправочникНоменклатура.Значение.Отбор.НоменклатурнаяГруппа;
		ЭлементОтбора.Значение      = НоменклатурнаяГруппа;
		ЭлементОтбора.Использование = ЕстьНоменклатурнаяГруппа;
	Иначе
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить("Группа");
		СписокОтбора.Добавить(?(ЕстьНоменклатурнаяГруппа, Строка(НоменклатурнаяГруппа), ""));

		ЭлементОтбора               = ЭлементыФормы.НоменклатураДляПодбора.ОтборСтрок.ПредставлениеНоменклатурнаяГруппа;
		ЭлементОтбора.ВидСравнения  = ВидСравнения.ВСписке;
		ЭлементОтбора.Значение      = СписокОтбора;
		ЭлементОтбора.Использование = ЕстьНоменклатурнаяГруппа;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует и выводит текст в информационной надписи о параметрах подбора.
//
// Параметры:
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса)

	Перем ВременнаяСтрока;
	Перем СтруктураПараметров;

	Если ЗначениеЗаполнено(СтруктураЗапроса) Тогда
	
		ВременнаяСтрока = "";
		
		НайденныйЭлементСпискаВыбора = ЭлементыФормы.СписокВидовПодбора.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.СписокВидовПодбора.Значение);
		Если НайденныйЭлементСпискаВыбора <> Неопределено Тогда
			ВременнаяСтрока = ВременнаяСтрока + НайденныйЭлементСпискаВыбора.Представление + "; ";
		КонецЕсли;
		
		СписокПараметровЗапроса = ПолучитьСписокПараметровЗапроса(ЭлементыФормы.СписокВидовПодбора.Значение);
		Для каждого ЭлементСписка Из СписокПараметровЗапроса Цикл
			Если ЗначениеЗаполнено(СтруктураИсходныхПараметров[ЭлементСписка.Значение]) Тогда
				ВременнаяСтрока = ВременнаяСтрока + СтруктураИсходныхПараметров[ЭлементСписка.Значение] + "; ";
			КонецЕсли; 
		КонецЦикла; 
		
		ВременнаяСтрока = Врег(Лев(ВременнаяСтрока, 1)) + Сред(ВременнаяСтрока, 2);
		ВременнаяСтрока = Лев(ВременнаяСтрока, СтрДлина(ВременнаяСтрока) - 2);

	КонецЕсли;

	ЭлементыФормы.ИнфНадписьПараметрыПодбора.Заголовок = ВременнаяСтрока;

КонецПроцедуры // ОбновитьИнформационнуюНадписьПараметрыПодбора()

// Перезаполняет таблицу номенклатуры по запросу по переданному родителю.
//
// Параметры: 
//  Родитель         - Справочник.Номенклатура (группа), таблица номенклатуры
//                     заполняется только подчиненными этой группе элементами,
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса) Экспорт

	Перем СтруктураПараметров;
	Перем Номенклатура;

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.СправочникНоменклатура.ТекущийРодитель = ?(Родитель.ЭтоГруппа, Родитель, Неопределено);
		УстановитьОтборПоНоменклатурнойГруппе();
		Возврат;
	КонецЕсли;

	Запрос = ПолучитьЗапросДляПодбора(ЭлементыФормы.СписокВидовПодбора.Значение, Родитель, ДатаРасчетов, ИерархияЗапроса, ФильтрЗапроса);
	
	Если Запрос = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	// Скроем колонки, которых нет в результате запроса.
	// Колонки скрытые пользователем тоже не будем показывать
	Для Каждого Колонка Из ЭлементыФормы.НоменклатураДляПодбора.Колонки Цикл
		ИмяКолонки = Колонка.Имя;

		Если ИмяКолонки = "Пиктограмма"
		 ИЛИ ИмяКолонки = "ПредставлениеНоменклатура" Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Истина;

		ИначеЕсли ИмяКолонки = "ПереходитьВверх"
		      ИЛИ ИмяКолонки = "ФлагУсловийПоставки" Тогда

			Колонка.ИзменятьВидимость = Ложь;
			Колонка.Видимость         = Ложь;

		Иначе

			ПризнакВидимости          = (НЕ РезультатЗапроса.Колонки.Найти(ИмяКолонки) = Неопределено);
			Колонка.ИзменятьВидимость = ПризнакВидимости;
			Колонка.Видимость         = ПризнакВидимости;
			ЭлементыФормы.НоменклатураДляПодбора.НастройкаОтбораСтрок[ИмяКолонки].Доступность = ПризнакВидимости;

		КонецЕсли;
	КонецЦикла;

	// Заполним табличную часть НоменклатураДляПодбора.
	НоменклатураДляПодбора.Загрузить(РезультатЗапроса.Выгрузить());

	ПлановыйТипЦен = Константы.ТипЦенПлановойСебестоимостиНоменклатуры.Получить();

	// Заполним группы для перехода на предыдущий уровень.
	ТекГруппа = Родитель;
	Пока ТекГруппа <> Справочники.Номенклатура.ПустаяСсылка() Цикл

		НоваяСтрока  = НоменклатураДляПодбора.Вставить(0);
		Номенклатура = ТекГруппа;

		НоваяСтрока.Код                               = Номенклатура.Код;
		НоваяСтрока.Номенклатура                      = Номенклатура;
		НоваяСтрока.ПредставлениеНоменклатура         = Номенклатура.Наименование;
		НоваяСтрока.ПредставлениеНоменклатурнаяГруппа = "Группа";
		НоваяСтрока.ПереходитьВверх                   = Истина;
		НоваяСтрока.ЭтоГруппа                         = Истина;

		ТекГруппа = ТекГруппа.Родитель;
	КонецЦикла;

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры // ПерезаполнитьТаблицуНоменклатуры()

// Показывает соответствующее выбранному виду подбора табличное поле
// и перезаполняет таблицу номенклатуры.
//  Если значение элемента списка "СписокВидовПодбора" не заполнено, то
// делает видимым табличное поле "СправочникНоменклатура", а если - заполнено,
// то - "НоменклатураДляПодбора".
//
// Параметры:
//  СтруктураЗапроса - структура, содержащая параметры и текст запроса
//
Процедура ПриИзмененииВидаПодбора(СтруктураЗапроса)

	Перем Команда;

	ПодборПоСправочнику = НЕ ЗначениеЗаполнено(СтруктураЗапроса);
	
	СтруктураИсходныхПараметров.Свойство("Команда", Команда);

	ЭлементыФормы.КнопкаОбновить.Видимость             = Не ПодборПоСправочнику;
	ЭлементыФормы.НадписьДатаРасчетов.Видимость        = Не (ПодборПоСправочнику или НЕ ЗначениеЗаполнено(ДатаРасчетов));
	ЭлементыФормы.ДатаРасчетов.Видимость               = Не (ПодборПоСправочнику или НЕ ЗначениеЗаполнено(ДатаРасчетов));

	Если ПодборПоСправочнику Тогда
		ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница = ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы["ПоСправочнику"];
		ЭлементыФормы.КомандныеПанелиДерева.ТекущаяСтраница = ЭлементыФормы.КомандныеПанелиДерева.Страницы["ПоСправочнику"];
		
		ЭлементыФормы.СправочникНоменклатура.ИерархическийПросмотр = ИерархияСправочника;
		ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Кнопки.Действие5.Пометка = ИерархияСправочника;
		
		УстановитьВидимостьПанелей(ИерархияСправочника);
			
	Иначе
		ЭлементыФормы.ПанельНоменклатураДляПодбора.ТекущаяСтраница = ЭлементыФормы.ПанельНоменклатураДляПодбора.Страницы["ПоЗапросу"];
		ЭлементыФормы.КомандныеПанелиДерева.ТекущаяСтраница = ЭлементыФормы.КомандныеПанелиДерева.Страницы["ПоЗапросу"];
		
		ЭлементыФормы.КоманднаяПанельЗапроса.Кнопки.ИерархияПоЗапросу.Пометка = ИерархияЗапроса;
		ЭлементыФормы.КоманднаяПанельЗапроса.Кнопки.Фильтр.Пометка = ФильтрЗапроса;
		
		УстановитьВидимостьПанелей(ИерархияЗапроса);
		
	КонецЕсли;

	// Заполним таблицу номенклатуры текущего родителя.
	Родитель = ПолучитьТекущегоРодителя();
	Родитель = ?(НЕ ЗначениеЗаполнено(Родитель), Справочники.Номенклатура.ПустаяСсылка(), Родитель);

	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
	ОбновитьИнформационнуюНадписьПараметрыПодбора(СтруктураЗапроса);

КонецПроцедуры // ПриИзмененииВидаПодбора()

// Процедура выполняет стандартные действия при открытии формы.
//  Вызывается при открытии, при повторном открытии 
//
Процедура ДействияПриОткрытии()

	Перем Команда;

	Если СтруктураИсходныхПараметров.Свойство("ДатаРасчетов") Тогда
		ДатаРасчетов = СтруктураИсходныхПараметров.ДатаРасчетов;
	Иначе
		ДатаРасчетов = ТекущаяДата();
	КонецЕсли; 
	ЭлементыФормы.СписокВидовПодбора.СписокВыбора = СтруктураИсходныхПараметров.СписокВидовПодбора;

	СписокВидовПоиска = Новый СписокЗначений;
	СписокВидовПоиска.Добавить("Наименование",       "наименованию");
	СписокВидовПоиска.Добавить("НаименованиеПолное", "полному наименованию");
	СписокВидовПоиска.Добавить("Код",                "коду");
	СписокВидовПоиска.Добавить("Артикул",            "артикулу");
	ЭлементыФормы.СписокВидовПоиска.СписокВыбора = СписокВидовПоиска;
	
	УправлениеДиалогом(); // если цен в подборе нет, скроем колонки, относящиеся к ценам
	ПроверитьВидимостьКартинки();
	
	//Восстановление значений
	// Считаем, что подбор зовется только из форм документов
	ПрефиксПараметра = СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) + СокрЛП(СтруктураИсходныхПараметров.Команда);
	
	НомерВидаПодбора 			= ВосстановитьЗначение(ПрефиксПараметра + "НомерВидаПодбора");
	НомерВидаПоиска 			= ВосстановитьЗначение(ПрефиксПараметра + "НомерВидаПоиска");
	ПараметрИерархияСправочника = ВосстановитьЗначение(ПрефиксПараметра + "ИерархияСправочника");
	ПараметрИерархияЗапроса 	= ВосстановитьЗначение(ПрефиксПараметра + "ИерархияЗапроса");
	ПараметрФильтрЗапроса 		= ВосстановитьЗначение(ПрефиксПараметра + "ФильтрЗапроса");

	//Установим восстановленные значения
	ЭлементыФормы.СписокВидовПодбора.Значение = ?(НомерВидаПодбора = Неопределено
	                                              Или НомерВидаПодбора >= СтруктураИсходныхПараметров.СписокВидовПодбора.Количество(), 
	                                              СтруктураИсходныхПараметров.СписокВидовПодбора[0].Значение,
	                                              СтруктураИсходныхПараметров.СписокВидовПодбора[НомерВидаПодбора].Значение);
    
	ЭлементыФормы.СписокВидовПоиска.Значение = ?(НомерВидаПоиска = Неопределено
	                                             Или НомерВидаПоиска >= ЭлементыФормы.СписокВидовПоиска.СписокВыбора.Количество(),
	                                             ЭлементыФормы.СписокВидовПоиска.СписокВыбора[0].Значение,
	                                             ЭлементыФормы.СписокВидовПоиска.СписокВыбора[НомерВидаПоиска].Значение);

	ИерархияСправочника = ?(ПараметрИерархияСправочника = Неопределено, Истина, ПараметрИерархияСправочника);
	ИерархияЗапроса 	= ?(ПараметрИерархияЗапроса = Неопределено, Истина, ПараметрИерархияЗапроса);
	ФильтрЗапроса 		= ?(ПараметрФильтрЗапроса = Неопределено, Ложь, ПараметрФильтрЗапроса);

	// Покажем соответствующее табличное поле и заполним таблицу номенклатуры текущего родителя.
	ПриИзмененииВидаПодбора(ЭлементыФормы.СписокВидовПодбора.Значение);

	ЭтаФорма.Заголовок = СтруктураИсходныхПараметров.Заголовок;

КонецПроцедуры // ДействияПриОткрытии()

// В зависимости от состояния кнопки Изображение устанавливает соответсвующую страницу панели дерева
//
Процедура ПроверитьВидимостьКартинки()

	ЭлементыФормы.ПанельДерева.ТекущаяСтраница = ЭлементыФормы.ПанельДерева.Страницы[0];
	
КонецПроцедуры // ПроверитьВидимостьКартинки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Проверим тип реквизита формы СтруктураПараметровФормы. Должен быть "Структура".
	// При неверном типе не будем запускать подбор.
	Если ТипЗнч(СтруктураИсходныхПараметров) <> Тип("Структура") Тогда
		
		Отказ = Истина;
		Предупреждение("Не верный тип параметра ""СтруктураПараметровФормы""!
		               |Данная обработка вызывается из других процедур конфигурации.
		               |Вручную ее вызывать запрещено."); 
		Возврат;

	КонецЕсли;
	
	РежимВыбора        = Истина;
	ЗакрыватьПриВыборе = Ложь;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ЭлементыФормы.ПанельНоменклатураДляПодбора.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;

	// Восстановим значения что надо запрашивать при подборе.
	// Это надо сделать до управления диалогом.
	ЗапрашиватьЦену           = ВосстановитьЗначение("ЗапрашиватьЦенуПриПодборе");
	ЗапрашиватьКоличество     = ВосстановитьЗначение("ЗапрашиватьКоличествоПриПодборе");

	ДействияПриОткрытии();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриПовторномОткрытии" формы.
//
Процедура ПриПовторномОткрытии()

	ДействияПриОткрытии();

КонецПроцедуры // ПриПовторномОткрытии()

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	Перем Команда;

	// Сохраним значения что надо запрашивать при подборе.
	// Это надо сделать если могли их менять.
	Если ЭлементыФормы.ЗапрашиватьЦену.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьЦенуПриПодборе", ЗапрашиватьЦену);
	КонецЕсли;

	Если ЭлементыФормы.ЗапрашиватьКоличество.Доступность Тогда
		СохранитьЗначение("ЗапрашиватьКоличествоПриПодборе", ЗапрашиватьКоличество);
	КонецЕсли;

	// Сохраним номер текущего вида подбора.
	СтруктураИсходныхПараметров.Свойство("Команда", Команда);
	ПрефиксПараметра = СокрЛП(ВладелецФормы.ЭтотОбъект.Метаданные().Имя) + СокрЛП(Команда);
	
	ЭлементФормы     = ЭлементыФормы.СписокВидовПодбора;
	НомерВидаПодбора = ЭлементФормы.СписокВыбора.Индекс(
	                   ЭлементФормы.СписокВыбора.НайтиПоЗначению(ЭлементФормы.Значение));
	СохранитьЗначение(ПрефиксПараметра + "НомерВидаПодбора", НомерВидаПодбора);

	// Сохраним номер текущего вида поиска.
	ЭлементФормы    = ЭлементыФормы.СписокВидовПоиска;
	НомерВидаПоиска = ЭлементФормы.СписокВыбора.Индекс(
	                  ЭлементФормы.СписокВыбора.НайтиПоЗначению(ЭлементФормы.Значение));
	СохранитьЗначение(ПрефиксПараметра + "НомерВидаПоиска", НомерВидаПоиска);
	
	СохранитьЗначение(ПрефиксПараметра + "ИерархияСправочника", ИерархияСправочника);
	СохранитьЗначение(ПрефиксПараметра + "ИерархияЗапроса", ИерархияЗапроса);
	СохранитьЗначение(ПрефиксПараметра + "ФильтрЗапроса", ФильтрЗапроса);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	Если мТекущийЭлементФормы <> Неопределено Тогда
		ТекущийЭлемент = мТекущийЭлементФормы;
		мТекущийЭлементФормы = Неопределено;
	КонецЕсли;
КонецПроцедуры // ОбновлениеОтображения()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ, ВЫЗЫВАЕМЫЕ ИЗ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Очистка" поля выбора списка видов подбора.
//
Процедура СписокВидовПодбораОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // Не будем давать очищать значение.
	
КонецПроцедуры // СписокВидовПодбораОчистка()

// Процедура - обработчик события "ПриИзменении" поля выбора списка видов поиска.
//
Процедура СписокВидовПоискаПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.СписокВидовПоиска.Значение) Тогда
		ЭлементыФормы.СписокВидовПоиска.Значение = ЭлементыФормы.СписокВидовПоиска.СписокВыбора[0].Значение;
	КонецЕсли;

	ВыполнитьПоиск();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода шаблона поиска.
//
Процедура ПолеПоискаПриИзменении(Элемент)

	ВыполнитьПоиск();

КонецПроцедуры // ПолеПоискаПриИзменении()

// Процедура - обработчик события "Открытие" поля ввода шаблона поиска.
//
Процедура ПолеПоискаОткрытие(Элемент, СтандартнаяОбработка)

	ВыполнитьПоиск();

КонецПроцедуры // ПолеПоискаОткрытие()

// Процедура - обработчик события "Нажатие" кнопки "Обновить".
//
Процедура КнопкаОбновитьНажатие(Элемент)

	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

КонецПроцедуры // КнопкаОбновитьНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода даты расчетов.
//
Процедура ДатаРасчетовПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ДатаРасчетов) Тогда
		СтруктураИсходныхПараметров.Свойство("ДатаРасчетов", ДатаРасчетов);
	КонецЕсли;

	Родитель         = ПолучитьТекущегоРодителя();
	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);

КонецПроцедуры // ДатаРасчетовПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода даты расчетов.
//
Процедура ДатаРасчетовОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ДатаРасчетовОчистка()

// Процедура - обработчик события "Выбор" табличного поля дерева номенклатуры.
//
Процедура ДеревоНоменклатурыВыбор(Элемент, ВыбРодитель, Колонка, СтандартнаяОбработка)

	СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;
	ПерезаполнитьТаблицуНоменклатуры(ВыбРодитель, СтруктураЗапроса);

КонецПроцедуры // ДеревоНоменклатурыВыбор()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля таблицы номенклатуры.
//
Процедура НоменклатураДляПодбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ЯчейкаПиктограмма = ОформлениеСтроки.Ячейки.Пиктограмма;
	ЯчейкаПиктограмма.ОтображатьКартинку = Истина;

	Если ДанныеСтроки.ЭтоГруппа Тогда

		ЯчейкаПиктограмма.ИндексКартинки = 0; // группа
		Если ДанныеСтроки.ПереходитьВверх Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
		КонецЕсли;

	Иначе

		ЯчейкаПиктограмма.ИндексКартинки = 1; // элемент

	КонецЕсли;

	// Выделим цветом те цены, которые заданы особыми условиями поставок
	Если ДанныеСтроки.ФлагУсловийПоставки Тогда
		ОформлениеСтроки.Ячейки.Цена.ЦветФона = WebЦвета.Лимонный;
	КонецЕсли; 
    	
КонецПроцедуры // НоменклатураДляПодбораПриВыводеСтроки()

// Процедура - обработчик события "Выбор" табличного поля таблицы номенклатуры.
//
Процедура ТаблицаНоменклатурыВыбор(Элемент, ВыбСтрока, Колонка, СтандартнаяОбработка)

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, ВалютаЦены, СпособЗаполненияЦен;
	Перем СтруктураПараметров;
	Перем Команда, СтруктураПодбора;
	Перем Склад, ТипЦен;

	СтруктураИсходныхПараметров.Свойство("ТипЦен",              ТипЦен);
	СтруктураИсходныхПараметров.Свойство("Склад",               Склад);
	СтруктураИсходныхПараметров.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураИсходныхПараметров.Свойство("Команда",             Команда);

	СтандартнаяОбработка = Ложь;

	// Инициализируем структуру выбранной строки (реквизиты обработки).
	Если ПодборПоСправочнику Тогда

		Если ВыбСтрока.ЭтоГруппа Тогда
			УстановитьТекущегоРодителя(ВыбСтрока);
			СтандартнаяОбработка = Истина;
			Возврат;
		КонецЕсли;

		Номенклатура     = ВыбСтрока;
		ЕдиницаИзмерения = ВыбСтрока.БазоваяЕдиницаИзмерения;
		Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(ВыбСтрока, ДатаРасчетов);

		// Получим Цену
		Цена = 0;
				
		Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
			Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,СтруктураИсходныхПараметров.ТипЦен, ДатаРасчетов, ВалютаЦены);
			КонецЕсли;
		КонецЕсли;
		
		ВалютаЦены     = ?(НЕ ЗначениеЗаполнено(ВалютаЦены), ?(СтруктураИсходныхПараметров.Свойство("ВалютаДокумента"), СтруктураИсходныхПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета), ВалютаЦены);
		
	Иначе // подбор по запросу

		Если НЕ ЗначениеЗаполнено(ВыбСтрока) Тогда
			Возврат;
		КонецЕсли;

		Если ВыбСтрока.Номенклатура.ЭтоГруппа Тогда
			Родитель         = ?(ВыбСтрока.ПереходитьВверх, ВыбСтрока.Номенклатура.Родитель, ВыбСтрока.Номенклатура);
			СтруктураЗапроса = ЭлементыФормы.СписокВидовПодбора.Значение;

			УстановитьТекущегоРодителя(Родитель);
			ПерезаполнитьТаблицуНоменклатуры(Родитель, СтруктураЗапроса);
			Возврат;
		КонецЕсли;

		Номенклатура     = ВыбСтрока.Номенклатура;
		ЕдиницаИзмерения = ВыбСтрока.Номенклатура.БазоваяЕдиницаИзмерения;
		Спецификация     = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ДатаРасчетов);

		Если СтруктураИсходныхПараметров.Свойство("ТипЦен") Тогда
			Если ТипЗнч(СтруктураИсходныхПараметров.ТипЦен) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
				Цена = Ценообразование.ПолучитьЦенуНоменклатуры(Номенклатура,СтруктураИсходныхПараметров.ТипЦен, ДатаРасчетов, ВалютаЦены);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВалютаЦены = ?(СтруктураИсходныхПараметров.Свойство("ВалютаДокумента"), СтруктураИсходныхПараметров.ВалютаДокумента, мВалютаРегламентированногоУчета);
		КонецЕсли;
		
	КонецЕсли;

	Количество = 1;

	Если ЗапрашиватьКоличество Или ЗапрашиватьЦену Тогда

		ИмяФормыВводаПараметров = "ВводПараметров";

		ФормаВводПараметров = ПолучитьФорму(ИмяФормыВводаПараметров, ЭтаФорма);

		ФормаВводПараметров.Номенклатура     = Номенклатура;
		ФормаВводПараметров.ЕдиницаИзмерения = ЕдиницаИзмерения;
		ФормаВводПараметров.Количество       = Количество;
		ФормаВводПараметров.Цена             = Цена;
		ФормаВводПараметров.ВалютаЦены       = ВалютаЦены;
		ФормаВводПараметров.ДатаРасчетов     = ДатаРасчетов;

		//ФормаВводПараметров.ЭлементыФормы.ЕдиницаИзмерения.ТолькоПросмотр = Истина;

		СтруктураПараметров = ФормаВводПараметров.ОткрытьМодально();

		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			СтруктураПараметров.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
			СтруктураПараметров.Свойство("Количество"      , Количество);
			СтруктураПараметров.Свойство("Цена"            , Цена);

		ИначеЕсли ТипЗнч(СтруктураПараметров) = Тип("Массив") Тогда
			Для Каждого ЭлементМассива Из СтруктураПараметров Цикл
				ЭлементМассива.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
				ЭлементМассива.Свойство("Количество",       Количество);
				ЭлементМассива.Свойство("Цена",             Цена);
				ЭлементМассива.Свойство("ВалютаЦены",       ВалютаЦены);
				
				СтруктураПодбора = Новый Структура();
				СтруктураПодбора.Вставить("Команда",             Команда);
				СтруктураПодбора.Вставить("ВалютаЦены",          ВалютаЦены);
				СтруктураПодбора.Вставить("Номенклатура",        Номенклатура);
				СтруктураПодбора.Вставить("ЕдиницаИзмерения",    ЕдиницаИзмерения);
				СтруктураПодбора.Вставить("Склад",               Склад);
				СтруктураПодбора.Вставить("Цена",                Цена);
				СтруктураПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
				СтруктураПодбора.Вставить("Количество",          Количество);
				СтруктураПодбора.Вставить("ЗапрашиватьЦену",     ЗапрашиватьЦену);
                СтруктураПодбора.Вставить("Спецификация"       , Спецификация);
				
				ОповеститьОВыборе(СтруктураПодбора);
			КонецЦикла;
			Возврат;
		Иначе
			Возврат; // форма ввода количества(количества и цены) закрыта не по кнопке "ОК"
		КонецЕсли;
	КонецЕсли;

	// Оповестим о выборе документ, инициировавший подбор.
	СтруктураИсходныхПараметров.Свойство("Команда",  Команда);

	СтруктураПодбора = Новый Структура();
	СтруктураПодбора.Вставить("Команда"            , Команда);
	СтруктураПодбора.Вставить("ВалютаЦены"         , ВалютаЦены);

	СтруктураПодбора.Вставить("Номенклатура"       , Номенклатура);
	СтруктураПодбора.Вставить("ЕдиницаИзмерения"   , ЕдиницаИзмерения);
	СтруктураПодбора.Вставить("Склад"              , Склад);
	СтруктураПодбора.Вставить("СпособЗаполненияЦен", СпособЗаполненияЦен);
	СтруктураПодбора.Вставить("Цена"        , Цена);
	СтруктураПодбора.Вставить("Количество"  , Количество);
	СтруктураПодбора.Вставить("Спецификация"  , Спецификация);

	СтруктураПодбора.Вставить("ЗапрашиватьЦену"    , ЗапрашиватьЦену);

	ОповеститьОВыборе(СтруктураПодбора);
	
КонецПроцедуры // ТаблицаНоменклатурыВыбор()

// Процедура - обработчик события "ПриИзменении" элемента формы СписокВидовПодбора.
//
Процедура СписокВидовПодбораПриИзменении(Элемент)

	// Покажем соответствующее табличное поле и заполним таблицу номенклатуры текущего родителя.
	ПриИзмененииВидаПодбора(Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатурнаяГруппа.
//
Процедура НоменклатурнаяГруппаПриИзменении(Элемент)

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы НоменклатурнаяГруппа.
//
Процедура НоменклатурнаяГруппаОчистка(Элемент, СтандартнаяОбработка)

	УстановитьОтборПоНоменклатурнойГруппе();

КонецПроцедуры

Процедура СправочникНоменклатураОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	ЭтаФорма.Активизировать();
КонецПроцедуры

Процедура УстановитьВидимостьПанелей(Иерархия)
	
	Если Иерархия Тогда
		
		ЭлементыФормы.ПанельНоменклатураДляПодбора.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельДерева.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
		ЭлементыФормы.ПанельДерева.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Верх);
		
	Иначе
		
		ЭлементыФормы.ПанельДерева.УстановитьПривязку(ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.Разделитель1.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельДерева, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельДерева.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.Разделитель1.Свертка = РежимСверткиЭлементаУправления.Верх;
		ЭлементыФормы.ПанельНоменклатураДляПодбора.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.Разделитель1, ГраницаЭлементаУправления.Низ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросаИерархияПоЗапросу(Кнопка)
	
	ИерархияЗапроса = НЕ ИерархияЗапроса;
	ЭлементыФормы.КоманднаяПанельЗапроса.Кнопки.ИерархияПоЗапросу.Пометка = ИерархияЗапроса;
	
	УстановитьВидимостьПанелей(ИерархияЗапроса);
	
	Родитель = ПолучитьТекущегоРодителя();
	ПерезаполнитьТаблицуНоменклатуры(Родитель, ЭлементыФормы.СписокВидовПодбора.Значение);
	
КонецПроцедуры

Процедура КоманднаяПанельЗапросаФильтр(Кнопка)
	
	ФильтрЗапроса = НЕ ФильтрЗапроса;
	ЭлементыФормы.КоманднаяПанельЗапроса.Кнопки.Фильтр.Пометка = ФильтрЗапроса;
	
	Родитель      = ПолучитьТекущегоРодителя();
	ПерезаполнитьТаблицуНоменклатуры(Родитель, ЭлементыФормы.СписокВидовПодбора.Значение);
	
КонецПроцедуры

Процедура ОтключитьВключитьИерархию(Элемент)
	
	ИерархияСправочника = НЕ ИерархияСправочника;	
	ЭлементыФормы.СправочникНоменклатура.ИерархическийПросмотр = ИерархияСправочника;
	ЭлементыФормы.КоманднаяПанельНоменклатураДляПодбора.Кнопки.Действие5.Пометка = ИерархияСправочника;	
	
	УстановитьВидимостьПанелей(ИерархияСправочника);
	
КонецПроцедуры

//Процедура - обработчик события вызова справочной информации для объекта Подбор номенклатуры
Процедура кнСправкаНажатие(Элемент)
	ОткрытьСправку(ЭтотОбъект.Метаданные());
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСписокПометокНаборов = Новый СписокЗначений;

мТекущийЭлементФормы  = Неопределено;

мВремяПоследнегоПоиска = Неопределено;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

// Зададим возможные состояния окна.
СоединяемоеОкно                 = Истина;
РазрешитьСостояниеПрикрепленное = Истина;
РазрешитьСостояниеСвободное     = Истина;

// Положение окна по умолчанию.
СостояниеОкна                   = ВариантСостоянияОкна.Прикрепленное;
ПоложениеПрикрепленногоОкна     = ВариантПрикрепленияОкна.Право;
ПозицияПанелиНоменклатуры		= 215;
