Перем СпП;// таблица расшифровок
Перем Знак;
Перем СуммаПоПоказателю;// сумма по показателю, складываемая из слагаемых
Перем Организация;// организация, требуется для открытия стандартных отчетов
Перем ДатаНачала;// дата начала периода формирования отчета, требуется для открытия стандартных отчетов
Перем ДатаКонца;// дата окончания периода формирования отчета, требуется для открытия стандартных отчетов
Перем ПланСчетов;// план счетов на основании данных из которых заполняется регламентированный отчет, требуется для открытия стандартных отчетов
Перем ОбластиГруппыСтрок;
Перем мКолонкаОрганизацияЕсть;

// Функция возвращает пользовательское представление слагаемого
//
// Параметры:
//	ИмяСлагаемого - макроимя или готовое имя слагаемого
//	КодСчета - код счета, соответствующего слагемому
//  КодКорСчета - код корсчета, соответствующего слагаемому
//	ДатаНачалаПериода - дата начала периода, на основании итогов или оборотов за который вычисляется
//		значение слагаемого
//	ДатаКонцаПериода - дата конца периода, на основании итогов или оборотов за который вычисляется
//		значение слагаемого
//
// Возвращаемое значение:
//	Строка - пользовательское представление слагаемого
Функция НаименованиеСлагаемого(ИмяСлагаемого, КодСчета, КодКорСчета, ДатаНачалаПериода, ДатаКонцаПериода)
	
	Если Лев(ИмяСлагаемого, 1)="!" Тогда
		// передана мнемоника, будем расшифровывать
		Наименование = "";
		Если НачалоДня(ДатаНачалаПериода) = НачалоДня(ДатаНачала) И КонецДня(ДатаКонцаПериода) = КонецДня(ДатаКонца) Тогда
			ПредставлениеПериодаС = " ";
		Иначе
			ПредставлениеПериодаС = " " + ПредставлениеПериода(ДатаНачалаПериода, ДатаКонцаПериода, "ФП = Истина" ) + " ";
		КонецЕсли;
		Макроимя = Сред(ИмяСлагаемого, 2);
		Если Макроимя = "СНД" Тогда
			Наименование = "Сальдо на начало периода" + ПредставлениеПериодаС + "по дебету счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СНДР" Тогда
			Наименование = "Сальдо на начало периода" + ПредставлениеПериодаС + "по дебету субсчетов счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СНДРС" Тогда
			Наименование = "Сальдо на начало периода" + ПредставлениеПериодаС + "по дебету счета " + СокрЛП(КодСчета) + " по субконто";
		ИначеЕсли Макроимя = "СКД" Тогда
			Наименование = "Сальдо на конец периода" + ПредставлениеПериодаС + "по дебету счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СКДР" Тогда
			Наименование = "Сальдо на конец периода" + ПредставлениеПериодаС + "по дебету субсчетов счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СКДРС" Тогда
			Наименование = "Сальдо на конец периода" + ПредставлениеПериодаС + "по дебету субсчетов счета " + СокрЛП(КодСчета) + " по субконто";
		ИначеЕсли Макроимя = "СНК" Тогда
			Наименование = "Сальдо на начало периода" + ПредставлениеПериодаС + "по кредиту счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СНКР" Тогда
			Наименование = "Сальдо на начало периода" + ПредставлениеПериодаС + "по кредиту субсчетов счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СНКРС" Тогда
			Наименование = "Сальдо на начало периода" + ПредставлениеПериодаС + "по кредиту счета " + СокрЛП(КодСчета) + " по субконто";
		ИначеЕсли Макроимя = "СКК" Тогда
			Наименование = "Сальдо на конец периода" + ПредставлениеПериодаС + "по кредиту счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СККР" Тогда
			Наименование = "Сальдо на конец периода" + ПредставлениеПериодаС + "по кредиту субсчетов счета " + СокрЛП(КодСчета);
		ИначеЕсли Макроимя = "СККРС" Тогда
			Наименование = "Сальдо на конец периода" + ПредставлениеПериодаС + "по кредиту счета " + СокрЛП(КодСчета) + " по субконто";
		ИначеЕсли Макроимя = "ДО" Тогда
			Если НЕ ЗначениеЗаполнено(КодКорСчета) Тогда
				Наименование = "Оборот по дебету счета " + СокрЛП(КодСчета) + ?(ПредставлениеПериодаС = " ", "", " за период " + ПредставлениеПериодаС);
			Иначе
				Наименование = "Оборот с кредита счета " + СокрЛП(КодКорСчета) + " в дебет счета " + СокрЛП(КодСчета) + ?(ПредставлениеПериодаС = " ", "", " за период " + ПредставлениеПериодаС);
			КонецЕсли;
		ИначеЕсли Макроимя = "КО" Тогда
			Если НЕ ЗначениеЗаполнено(КодКорСчета) Тогда
				Наименование = "Оборот по кредиту счета " + СокрЛП(КодСчета) + ?(ПредставлениеПериодаС = " ", "", " за период " + ПредставлениеПериодаС);
			Иначе
				Наименование = "Оборот с кредита счета " + СокрЛП(КодСчета) + " в дебет счета " + СокрЛП(КодКорСчета) + ?(ПредставлениеПериодаС = " ", "", " за период " + ПредставлениеПериодаС);
			КонецЕсли;
		ИначеЕсли Макроимя = "ОБ" Тогда
			Наименование = "Оборот с кредита счета " + СокрЛП(КодКорСчета) + " в дебет счета " + СокрЛП(КодСчета) + ?(ПредставлениеПериодаС = " ", "", " за период " + ПредставлениеПериодаС);
		КонецЕсли;
		Возврат Наименование;
	Иначе
		// передано имя, ничего расшифровывать не нужно
		Возврат ИмяСлагаемого;
	КонецЕсли;
	
КонецФункции	

// Процедура выводит секцию указанного вида с указанными значениями в поле табличного документа
//
// Параметры:
//	Таб - поле табличного документа или табличный документ, в который следует осуществить вывод
//	ИмяОбласти - имя области, которую следует вывести в Таб
//	Значение - первое значение для заполнения в области ИмяОбласти
//	Значение2 - второе значение для заполнения в области ИмяОбласти
//	Расшифровка - значение расшифровки для соответствующих ячеек области
//
Процедура ВывестиСекцию(ИмяОбласти, Значение = Неопределено, Значение2 = Неопределено, Расшифровка = Неопределено, НомерУзла = Неопределено)

	Если (Найти(ИмяОбласти, "НазваниеОргБезПлюса" + Символы.ПС) > 0) Или (Найти(ИмяОбласти, "НазваниеОрг" + Символы.ПС) > 0) Тогда
		Область = ПолучитьМакет("Макет").ПолучитьОбласть(СтрПолучитьСтроку(ИмяОбласти, 1));
	Иначе
		Область = ПолучитьМакет("Макет").ПолучитьОбласть(ИмяОбласти);
	КонецЕсли;

	Если Значение <> Неопределено ИЛИ Значение2 <> Неопределено Тогда
		НомерОбласти = 0;
		Для Каждого Обл Из Область.Области Цикл
			Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение Тогда
				НомерОбласти = НомерОбласти + 1;
				Обл.Значение = ?(НомерОбласти = 1, Значение, Значение2);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Расшифровка <> Неопределено Тогда
		Если ИмяОбласти = "Заголовок" Тогда
			
			Область.Область(1,1,Область.ВысотаТаблицы,Область.ШиринаТаблицы).Расшифровка = Новый Структура("Действие, Расшифровка", "Активизировать", Расшифровка);
			
		Иначе
		
			Область.Область(1,1,Область.ВысотаТаблицы,Область.ШиринаТаблицы).Расшифровка = Новый Структура("Реквизиты, Форма", Расшифровка);
			
		КонецЕсли;
	КонецЕсли;

	Если (Найти(ИмяОбласти, "НазваниеОргБезПлюса" + Символы.ПС) > 0) Или (Найти(ИмяОбласти, "НазваниеОрг" + Символы.ПС) > 0) Тогда
		Область.Параметры.НазваниеОрганизации = СтрПолучитьСтроку(ИмяОбласти, 2);
		ИтогПоОрганизации = СтрПолучитьСтроку(ИмяОбласти, 3); // Итоговая сумма по организации в целом.
		ИтогПоОрганизации = ?(ПустаяСтрока(ИтогПоОрганизации), "0", ИтогПоОрганизации);
		Область.Параметры.ИтогПоОрганизации = ИтогПоОрганизации;
	КонецЕсли;
	Если НомерУзла = Неопределено Тогда
		ЭлементыФормы.ПолеРасшифровки.Вывести(Область);
	Иначе
		ЭлементыФормы.ПолеРасшифровки.Вывести(Область, 1, Строка(НомерУзла));
	КонецЕсли;

КонецПроцедуры

// Процедура выводить слагаемое, описываемое строкой таблицы значений в поле табличного документа на форме
//
// Параметры:
//	Стр            - строка таблицы значений, описывающая выводимое слагаемое
//  НомерУзла      - номер группы.
//  ВыводСтрокиСлагаемого - используется в консолидированном режим. Если Истина, то строка Плюс не выводится, все остальное -вывод.
//
Процедура ВыводСтроки(Стр, НомерУзла = Неопределено, ВыводСтрокиСлагаемого = Неопределено)
	
	Если ТипЗнч(Стр.ИмяСлагаемого) <> Тип("Строка") Тогда
		Стр.ИмяСлагаемого = "субконто: " + Стр.ИмяСлагаемого;
	КонецЕсли;
	
	Если Лев(Стр.ИмяСлагаемого, 1)="#" Тогда
		// Получена строка-разделитель, просто выдаем эту секцию
		ПодзаголовокНаименование = Сред(Стр.ИмяСлагаемого, 2, СтрДлина(Стр.ИмяСлагаемого));
		ВывестиСекцию("Подзаголовок");
		НомерСтроки = НомерСтроки + 1;
		Возврат;
	Иначе
		СлагаемоеНаименование = НаименованиеСлагаемого(Стр.ИмяСлагаемого,Стр.КодСчета,Стр.КодКорСчета,Стр.ДатаНачала, Стр.ДатаКонца);
	КонецЕсли;
	
	Если Стр.Субконто1 <> Неопределено Тогда
		Если ТипЗнч(Стр.Субконто1) = Тип("СписокЗначений") Тогда
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + "Субконто " + Стр.КодСчета.ВидыСубконто[0].ВидСубконто.Наименование + " принимает одно из следующих значений:" + Символы.ПС;
			Для Каждого Эл Из Стр.Субконто1 Цикл
				СлагаемоеНаименование = СлагаемоеНаименование + Эл.Значение + ", ";
			КонецЦикла;
			СлагаемоеНаименование = Лев(СлагаемоеНаименование, СтрДлина(СлагаемоеНаименование) - 2) + "; ";
		Иначе
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + "Субконто " + Стр.КодСчета.ВидыСубконто[0].ВидСубконто.Наименование + " принимает значение " + Стр.Субконто1 + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если Стр.Субконто2 <> Неопределено Тогда
		Если ТипЗнч(Стр.Субконто2) = Тип("СписокЗначений") Тогда
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + "Субконто " + Стр.КодСчета.ВидыСубконто[1].ВидСубконто.Наименование + " принимает одно из следующих значений:" + Символы.ПС;
			Для Каждого Эл Из Стр.Субконто2 Цикл
				СлагаемоеНаименование = СлагаемоеНаименование + Эл.Значение + ", ";
			КонецЦикла;
			СлагаемоеНаименование = Лев(СлагаемоеНаименование, СтрДлина(СлагаемоеНаименование) - 2) + "; ";
		Иначе
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + "Субконто " + Стр.КодСчета.ВидыСубконто[1].ВидСубконто.Наименование + " принимает значение " + Стр.Субконто2 + ";";
		КонецЕсли;
	КонецЕсли;
	
	Если Стр.Субконто3 <> Неопределено Тогда
		Если ТипЗнч(Стр.Субконто3) = Тип("СписокЗначений") Тогда
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + "Субконто " + Стр.КодСчета.ВидыСубконто[2].ВидСубконто.Наименование + " принимает одно из следующих значений:" + Символы.ПС;
			Для Каждого Эл Из Стр.Субконто3 Цикл
				СлагаемоеНаименование = СлагаемоеНаименование + Эл.Значение + ", ";
			КонецЦикла;
			СлагаемоеНаименование = Лев(СлагаемоеНаименование, СтрДлина(СлагаемоеНаименование) - 2) + "; ";
		Иначе
			СлагаемоеНаименование = СлагаемоеНаименование + "." + Символы.ПС + "Субконто " + Стр.КодСчета.ВидыСубконто[2].ВидСубконто.Наименование + " принимает значение " + Стр.Субконто3 + ";";
		КонецЕсли;
	КонецЕсли;
	
	// ВыводСтрокиСлагаемого - только для консолидированного режима используется.
	// При выводе данных по организации, перед первой строкой расшифровки чтобы не выдавалась область Плюс.
	Если ВыводСтрокиСлагаемого = Неопределено Тогда
		Если Стр.ЗнакОперации <> Знак Тогда
			Если Стр.ЗнакОперации = "+" Тогда
				ВывестиСекцию("Плюс");
			Иначе
				ВывестиСекцию("Минус");
				//Знак = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Знак = "";
	
	Сумма = Стр.Сумма;
	СуммаПоПоказателю = СуммаПоПоказателю + Сумма;
	ВывестиСекцию("Слагаемое", СлагаемоеНаименование, Сумма, ?(Лев(Стр.ИмяСлагаемого, 1) = "!", Стр, Неопределено), НомерУзла);
	
КонецПроцедуры	

// Функция возвращает строку таблицы значений, описывающую значение ручной корректировки для показателя
//
// Параметры:
//	Стр - строка таблицы значений, описывающая показатель, для которого требуется получить корректировку
//
// Возвращаемое значение:
//	СтрокаТаблицыЗначений, описывающая значение ручной корректировки. Неопределено - если строка не задана.
//
Функция ПолучитьСмещение(Стр)
	Перем МассивВариантовЗаполненияСтраниц;
	
	Если НЕ Форма.мСтруктураВариантыЗаполнения.Свойство(Стр.Раздел, МассивВариантовЗаполненияСтраниц) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивВариантовЗаполненияСтраниц.Количество() < ?(Стр.Страница = Неопределено, 1, Стр.Страница) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаВариантовЗаполнения = МассивВариантовЗаполненияСтраниц[?(Стр.Страница = Неопределено, 0, Стр.Страница)];
	ИскомаяСтрока = ТаблицаВариантовЗаполнения.Найти(ИмяЯчейки, "КодПоказателя");
	
	Если ИскомаяСтрока = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИскомаяСтрока;
	
КонецФункции

// Процедура формирует и выводит в поле табличного документа на форме расшифровку значения показателя,
// соответствующего текущей ячейке активного поля табличного документа вызывающей формы (задана в переменной модуля "Форма").
// В случае, если для показателя, соответсвующего текущей активной ячейки расшифровка неопределена, то расшифровка 
// выводится для всех показателей, для которых расшифровка определена.
// Процедура вызывается из модуля формы отчета.
//
// Параметры:
//	Нет.
//
Процедура Показать() Экспорт
	
	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// копируем таблицы расшифровок из родительского отчета
	СпП = Новый ТаблицаЗначений;
	СпП = Форма.СпП.Скопировать();
	Для Каждого Стр Из СпП Цикл
		Если Стр.Раздел = Неопределено Тогда
			Стр.Раздел = "ФормаОтчета";
		КонецЕсли;
	КонецЦикла;
	СпП.Колонки.Добавить("ОтчетДляРасшифровки");

	мКолонкаОрганизацияЕсть = Ложь;
	Если СпП.Колонки.Найти("Организация") <> Неопределено Тогда
		мКолонкаОрганизацияЕсть = Истина;
	КонецЕсли;

	// инициализируем таблицу, в которой будут хранится описания областей отчета, соответствующих
	// расшифровкам показателей
	ОбластиГруппыСтрок = Новый ТаблицаЗначений;
	ОбластиГруппыСтрок.Колонки.Добавить("Наименование", , "Наименование показателя");
	ОбластиГруппыСтрок.Колонки.Добавить("Верх");
	ОбластиГруппыСтрок.Колонки.Добавить("Низ");

	// инициализируем все переменные модуля формы из переменных модуля вызывающей формы
	Организация = Форма.Организация;
	ДатаНачала = Форма.мДатаНачалаПериодаОтчета;
	ДатаКонца = Форма.мДатаКонцаПериодаОтчета;
	ПланСчетов = ?(СвойствоОпределено(Форма, "мОсновнойПланСчетов"), Форма.мОсновнойПланСчетов, ПланыСчетов.Хозрасчетный);
	
	Если СпП.Количество() = 0 Тогда
		Предупреждение("Расшифровка не сформирована." + Символы.ПС + "Расшифровка формируется при нажатии на кнопку ""Заполнить"".");
		Возврат;
	КонецЕсли;
	ЭлементыФормы.ПолеРасшифровки.Очистить();
	
	СуммаПоПоказателю = 0;
	Зг = 0;
	Стр = 1;
	
	НомерСтрокиЗначения = 0;
	НайденныеСтроки = СпП.НайтиСтроки(Новый Структура("ИмяЯчейки", ИмяЯчейки));
	НайденныеСтрокиТабл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(СпП);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(НайденныеСтроки, НайденныеСтрокиТабл);
	ТаблицаНайденныхЗаписей = НайденныеСтрокиТабл.Скопировать();

	// Колонка "Организация" может присутствовать в таблице СпП и в случае заполнения отчета не в режиме Консолидации. Для определения режима необходимо
	// свернуть таблицу по полю Организация и получить кол-во записей.

	Если мКолонкаОрганизацияЕсть Тогда
		НайденныеСтрокиТабл.Свернуть("Организация", "Сумма");
	Иначе
		НайденныеСтрокиТабл = Новый СписокЗначений;
	КонецЕсли;

	РежимКонсолидации = Ложь;
	Если НайденныеСтрокиТабл.Количество() <> 0 Тогда
		Если мКолонкаОрганизацияЕсть Тогда
			РежимКонсолидации = (НЕ НайденныеСтрокиТабл[0].Организация = Неопределено) И (НайденныеСтрокиТабл.Количество() > 1);
		КонецЕсли;
	КонецЕсли;

	Если РежимКонсолидации Тогда
		ВсегоПоказателей = НайденныеСтрокиТабл.Количество();
	КонецЕсли;

	Если (НайденныеСтроки.Количество() > 0) И (НЕ РежимКонсолидации)
	 Или (РежимКонсолидации И ВсегоПоказателей > 0) Тогда
		
		// Расшифровка для выбранного показателя найдена
		Знак = "+";
		
		Смещение = ПолучитьСмещение(СпП.Получить(0));
	
		Наименование = НайденныеСтроки[0].ИмяПоказателя;
		
		НовСтр = ОбластиГруппыСтрок.Добавить();
		НовСтр.Наименование = Наименование;
		НовСтр.Верх = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы + 1;
		
		ВывестиСекцию("Заголовок", Символы.ПС + Наименование + Символы.ПС + Символы.ПС, , НайденныеСтроки[0]);
		
		Если РежимКонсолидации Тогда
			// Выполняем цикл показа показателей с нужной организацией.
			НомерОрганизацииГруппы = 1;
			Для каждого ПоказательОтОрг Из НайденныеСтрокиТабл Цикл

				НайденныеСтроки = СпП.НайтиСтроки(Новый Структура("ИмяЯчейки, Организация", ИмяЯчейки, ПоказательОтОрг.Организация));
				ОбщееКолвоЗаписей = НайденныеСтроки.Количество();
				// Вывод названия организации.
				НазваниеОбл = "НазваниеОрг";
				Если НомерОрганизацииГруппы = 1 Тогда
					// Первое название организации выводим без верхнего плюса.
					НазваниеОбл = "НазваниеОргБезПлюса";
				Конецесли;

				ВывестиСекцию(НазваниеОбл + Символы.ПС
				                 + ПоказательОтОрг.Организация.Наименование + Символы.ПС
				                 + Строка(ПоказательОтОрг.Сумма));

				// Начинаем группировку.
				НомерОрганизацииГруппыСтр = Строка(НомерОрганизацииГруппы);
				ИмяГруппы = ПоказательОтОрг.Организация.Наименование;
				// Имя группы получим из названия организации, если оно не указано, то порядковый номер.
				НомерОрганизацииГруппыСтр = ?(ПустаяСтрока(ИмяГруппы), НомерОрганизацииГруппыСтр, ИмяГруппы);
				ЭлементыФормы.ПолеРасшифровки.НачатьГруппуСтрок(НомерОрганизацииГруппыСтр);

				ПервыйПрогон = Истина;
				// Организуем цикл по всем показателям внутри организации.
				Для Инд = 1 По ОбщееКолвоЗаписей Цикл
					ВыводСтроки(НайденныеСтроки[Инд - 1], НомерОрганизацииГруппыСтр, ПервыйПрогон);
					ПервыйПрогон = Неопределено;
				КонецЦикла;
				НомерОрганизацииГруппы = НомерОрганизацииГруппы + 1;
				// Начинаем группировку.
				ЭлементыФормы.ПолеРасшифровки.ЗакончитьГруппуСтрок();

			КонецЦикла;
		Иначе
			Для Каждого Стр Из НайденныеСтроки Цикл
				ВыводСтроки(Стр);
			КонецЦикла;
		КонецЕсли;

		Дельта = 0;
		Если Смещение <> Неопределено И Смещение.Дельта <> 0 Тогда
			ВывестиСекцию("Плюс");
			ВывестиСекцию("Слагаемое", Смещение.Комментарий + ?(ПустаяСтрока(Смещение.Комментарий), "Р", " - р") + "учная корректировка", Смещение.Дельта, НайденныеСтроки[0]);
			Дельта = Дельта + Смещение.Дельта;
		КонецЕсли;
		
		ВывестиСекцию("Итог", СуммаПоПоказателю + Дельта);
		
		НовСтр.Низ = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы;
		
		ЭлементыФормы.ПолеРасшифровки.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПолеРасшифровки.ОтображатьЗаголовки = Ложь;
		ЭлементыФормы.ПолеРасшифровки.ОтображатьСетку = Ложь;
		Заголовок = Наименование + " - расшифровка значения";
		Открыть();
		
	Иначе
		
		Если Вопрос( "Расшифровка для выбранной ячейки не существует.
					 |Показать расшифровку для всех ячеек формы?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда

			ИмяЯчейки = "";

			// Признак консолидированности отчета.
			РежимКонсолидации = Ложь;
			Если мКолонкаОрганизацияЕсть Тогда
				ВремТаблСпП = СпП.Скопировать();
				ВремТаблСпП.Свернуть("Организация");
				КолвоОрганизаций = ВремТаблСпП.Количество();
				РежимКонсолидации = КолвоОрганизаций > 1;
			КонецЕсли;

			Если РежимКонсолидации Тогда

				// Отсортируем таблицу расшифровки по названию показателя, чтобы построить расшифровку друг за другом.
				СпПВспомог = СпП.Скопировать();
				// Сгруппируем по имени показателя и организации
				СпПВспомог.Свернуть("ИмяЯчейки, Организация", "Сумма");
				СпПВспомог.Сортировать("ИмяЯчейки");

				// Получим список значений с организациями, с корректным порядком сортировки внутри каждого показателя.
				СписокОрганизаций = Новый СписокЗначений;
				СписокОрганизаций.Добавить(Форма.Организация);
				ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Форма.мГруппаОрганизаций, СписокОрганизаций);

				// Обработкаем порядок выдачи в расшифровки данных по организациям.
				// В расшифровки должно идти в том порядке, в котором организации
				// отображаются в форме отчета.
				СпПВспомогСортированоПоОрг = РасставитьПорядокПоОрганизации(СписокОрганизаций, СпПВспомог);

				Инд = 0;
				ИндексТекОрганизации = 0;
				ИтоговаяСуммаПоПоказателю = 0;
				Для каждого Зап Из СпПВспомогСортированоПоОрг Цикл
					ОбработкаПрерыванияПользователя();
					ИндексТекОрганизации = ИндексТекОрганизации + 1;
					ИтоговаяСуммаПоПоказателю = ИтоговаяСуммаПоПоказателю + Зап.Сумма;
					// Находим показатели для конкретной ячейки и организации.
					ГруппаСтрокПоказателя = СпП.НайтиСтроки(Новый Структура("ИмяЯчейки, Организация", Зап.ИмяЯчейки, Зап.Организация));
					ВремТабл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(СпП);
					ГруппаСтрокПоказателяТабл = ВремТабл.Скопировать();
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ГруппаСтрокПоказателя, ГруппаСтрокПоказателяТабл);
					ГруппаСтрокПоказателяТабл.Сортировать("ИмяПоказателя Убыв");

					ПервыйПроход = ИндексТекОрганизации = 1;
					ПервыйПроходПриВыводеПоказателей = Истина;
					Для каждого Стр Из ГруппаСтрокПоказателяТабл Цикл

						НазваниеОбл = "НазваниеОрг";
						Если ПервыйПроход Тогда
							НазваниеОбл = "НазваниеОргБезПлюса";

							НовСтр = ОбластиГруппыСтрок.Добавить();
							НовСтр.Верх = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы + 1;

							Наименование = Стр.ИмяПоказателя;

							НовСтр.Наименование = Наименование;
							ВывестиСекцию("Заголовок", Символы.ПС + Наименование + Символы.ПС + Символы.ПС, , Стр);
							Знак = "+";
							ПервыйПроход = Ложь;
						КонецЕсли;

						Инд = Инд + 1;
						// Начинаем группировку.
						НомерОрганизацииГруппыСтр = Строка(Инд);
						ИмяГруппы = Зап.Организация.Наименование;
						// Имя группы получим из названия организации, если оно не указано, то порядковый номер.
						НомерОрганизацииГруппыСтр = ?(ПустаяСтрока(ИмяГруппы), НомерОрганизацииГруппыСтр, ИмяГруппы);
						Если ПервыйПроходПриВыводеПоказателей Тогда

							ВывестиСекцию(НазваниеОбл + Символы.ПС
											 + Зап.Организация.Наименование + Символы.ПС
											 + Строка(Зап.Сумма));

							ЭлементыФормы.ПолеРасшифровки.НачатьГруппуСтрок(НомерОрганизацииГруппыСтр);
							ПервыйПроходПриВыводеПоказателей = Ложь;

							// Не выведем секцию с плюсом, после вывода названия организации.
							ВыводСтроки(Стр, НомерОрганизацииГруппыСтр, Истина);
							СтрДляПолученияСмещения = Стр;

						Иначе

							ВыводСтроки(Стр, НомерОрганизацииГруппыСтр, ?(ПервыйПроход, Неопределено, ПервыйПрогон));
							СтрДляПолученияСмещения = Стр;
						КонецЕсли;

					КонецЦикла;
					ЭлементыФормы.ПолеРасшифровки.ЗакончитьГруппуСтрок();

					// Эта последняя запись, выведем секцию Итог и закончим группировку.

					Если КолвоОрганизаций = ИндексТекОрганизации Тогда
						Смещение = ПолучитьСмещение(СтрДляПолученияСмещения);

						Дельта = 0;
						Если Смещение <> Неопределено И Смещение.Дельта <> 0 Тогда
							ВывестиСекцию("Плюс");
							ВывестиСекцию("Слагаемое", Смещение.Комментарий + ?(ПустаяСтрока(Смещение.Комментарий), "К", " - к") + "орректировка", Смещение.Дельта, Стр);
							Дельта = Дельта + Смещение.Дельта;
						КонецЕсли;

						ВывестиСекцию("Итог", ИтоговаяСуммаПоПоказателю + Дельта);
						ИтоговаяСуммаПоПоказателю = 0;

						НовСтр.Низ = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы;
						СуммаПоПоказателю = 0;
						ИндексТекОрганизации = 0;
					КонецЕсли;

				КонецЦикла;

				НовСтр.Низ = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы;
				ЭлементыФормы.ПолеРасшифровки.ТолькоПросмотр = Истина;
				ЭлементыФормы.ПолеРасшифровки.ОтображатьЗаголовки = Ложь;
				ЭлементыФормы.ПолеРасшифровки.ОтображатьСетку = Ложь;
				Заголовок = Форма.Заголовок + " - расшифровка значений";

			Иначе

				НовСтр = ОбластиГруппыСтрок.Добавить();
				НовСтр.Верх = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы + 1;

				Для Каждого Стр Из СпП Цикл
					
					Если Стр.ИмяЯчейки <> ИмяЯчейки Тогда
						
						Если ИмяЯчейки <> "" Тогда
							
							Смещение = ПолучитьСмещение(Стр);
					
							Дельта = 0;
							Если Смещение <> Неопределено И Смещение.Дельта <> 0 Тогда
								ВывестиСекцию("Плюс");
								ВывестиСекцию("Слагаемое", Смещение.Комментарий + ?(ПустаяСтрока(Смещение.Комментарий), "К", " - к") + "орректировка", Смещение.Дельта, Стр);
								Дельта = Дельта + Смещение.Дельта;
							КонецЕсли;
							
							ВывестиСекцию("Итог", СуммаПоПоказателю + Дельта);
							
							НовСтр.Низ = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы;
							
							НовСтр = ОбластиГруппыСтрок.Добавить();
							НовСтр.Верх = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы + 1;
							СуммаПоПоказателю = 0;
						КонецЕсли;
						
						Наименование = Стр.ИмяПоказателя;
						НовСтр.Наименование = Наименование;
						ВывестиСекцию("Заголовок", Символы.ПС + Наименование + Символы.ПС + Символы.ПС, , Стр);
						Знак = "+";
					КонецЕсли;
					
					ИмяЯчейки = Стр.ИмяЯчейки;
					
					ВыводСтроки(Стр);
				КонецЦикла;

				ВывестиСекцию("Итог", СуммаПоПоказателю);

				НовСтр.Низ = ЭлементыФормы.ПолеРасшифровки.ВысотаТаблицы;
				ЭлементыФормы.ПолеРасшифровки.ТолькоПросмотр = Истина;
				ЭлементыФормы.ПолеРасшифровки.ОтображатьЗаголовки = Ложь;
				ЭлементыФормы.ПолеРасшифровки.ОтображатьСетку = Ложь;
				Заголовок = Форма.Заголовок + " - расшифровка значений";

			КонецЕсли;

			Открыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// РасставитьПорядокПоОрганизации
// Функция устанавливает в таблице значений СпПВспомог порядок следования данных по организации, в соответствии с порядком, который
// указан в форме отчета.
//
// Параметры:
//  СписокОрганизаций - список значений, в котом указаны организации в нужном порядке для вывода расшифровки.
//  СпПВспомог     - таблица значений с данными по расшифровки, отсортированная по названию показателя.
//
// Возвращаемое значение:
//  Таблица значений, в которой строки расставлены в соответствии со списком организаций внутри каждого показателя.
//
Функция РасставитьПорядокПоОрганизации(СписокОрганизаций, СпПВспомог)
	
	Результат = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(СпПВспомог);
	ВременнаяТаблица = СпПВспомог.Скопировать();
	ВременнаяТаблица.Свернуть("ИмяЯчейки");
	ВременнаяТаблица.Сортировать("ИмяЯчейки");
	Для каждого Зап Из ВременнаяТаблица Цикл
		Для каждого Орг Из СписокОрганизаций Цикл
			ПодПоиск = СпПВспомог.НайтиСтроки(Новый Структура("ИмяЯчейки, Организация", Зап.ИмяЯчейки, Орг.Значение));
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПодПоиск, Результат);
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции // РасставитьПорядокПоОрганизации

// Функция возвращает вид стандартного отчета, который следует открыть при вызове расшифровки для слагаемого,
// описываемого в строке таблицы значений, переданной в процедуру в качестве параметра
// 
// Параметры:
//	Стр - СтрокаТаблицыЗначений, описывающая расшифровывавемое слагаемое
//
// Возвращемое значение:
//	Строка - префикс имени объекта метаданных - стандартного отчета
//
Функция ПолучитьВидОтчета(Стр)
	
	ИмяСлагаемого = Стр.ИмяСлагаемого;
	Если Лев(ИмяСлагаемого, 1) <> "!" Тогда
		ВидОтчета = "ОборотноСальдоваяВедомость";
	Иначе
		Макроимя = Сред(ИмяСлагаемого, 2);
		Если ЗначениеЗаполнено(Стр.КодСчета) И ЗначениеЗаполнено(Стр.КодКорСчета) Тогда
			ВидОтчета = "ОтчетПоПроводкам";
		ИначеЕсли Макроимя = "СНД" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНДР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНДРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКД" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКДР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКДРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНК" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНКР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СНКРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СКК" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СККР" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "СККРС" Тогда
			ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету";
		ИначеЕсли Макроимя = "ДО" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "ДОРС" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "КО" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "КОРС" Тогда
			ВидОтчета = "АнализСчета";
		ИначеЕсли Макроимя = "ОБ" Тогда
			ВидОтчета = "АнализСчета";
		Иначе
			ВидОтчета = "КарточкаСчета";
		КонецЕсли;
	КонецЕсли;
	Возврат ВидОтчета;
	
КонецФункции

// Процедура - обработчик события "Обработка расшифровки" поля табличного документа "ПолеРасшифровки" формы
// Открывает стандартный отчет, соответствующий активной ячейки поля табличного документа
//
Процедура ПолеРасшифровкиОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если НЕ Расшифровка.Свойство("Форма") Тогда
			Попытка
				Форма.АктивизироватьЯчейку(Расшифровка.Расшифровка);
				Форма.Активизировать();
			Исключение
			КонецПопытки;
		Иначе
			Если ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Лево = 3 И ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Право = 3 Тогда
				ТекОбл = ЭлементыФормы.ПолеРасшифровки.Область(ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Верх, 
							  2, ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Верх, 2);
				Расшифровка = ТекОбл.Расшифровка;
			КонецЕсли;
			
			Реквизиты = Расшифровка.Реквизиты;
			
			ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	       РедакцияКонфигурации = Лев(РегламентированнаяОтчетность.РедакцияКонфигурации(),1);
			
			Если ИДКонфигурации = "БПКОРП" ИЛИ ИДКонфигурации = "БАУКОРП" ИЛИ ИДКонфигурации = "БАУ" ИЛИ (ИДКонфигурации = "БП" И НЕ РедакцияКонфигурации = "1") Тогда
			
				ВидОтчета = ПолучитьВидОтчета(Реквизиты);
				
				ВидУчета = Новый Массив;
				Попытка
					ВидУчета.Добавить(Реквизиты.ВидУчета);
				Исключение
					ВидУчета.Добавить("БУ");
				КонецПопытки;
				
				Если ТипЗнч(Расшифровка.Форма) = Тип("Форма") Тогда
					Если Расшифровка.Форма.Открыта() Тогда
						ФормаОтчета = Расшифровка.Форма;
					Иначе
						ФормаОтчета = Отчеты[ВидОтчета].ПолучитьФорму();	
					КонецЕсли;
				Иначе
					ФормаОтчета = Отчеты[ВидОтчета].ПолучитьФорму();
				КонецЕсли;
				ФормаОтчета.РежимРасшифровки = Истина;
				ФормаОтчета.КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();
				Счет    = Реквизиты.КодСчета;
				КорСчет = Реквизиты.КодКорСчета;
				Если мКолонкаОрганизацияЕсть Тогда
					// Может быть пустой.
					ФормаОтчета.Организация = ?(Реквизиты.Организация = Неопределено, Организация, Реквизиты.Организация);
				Иначе
					ФормаОтчета.Организация = Организация;
				КонецЕсли;
				
				Попытка
					ФормаОтчета.ВключатьОбособленныеПодразделения = Реквизиты.ОрганизацияВЦелом;
				Исключение
				КонецПопытки;
				
				Если Реквизиты.Субконто1 <> Неопределено Тогда
					Если ТипЗнч(Реквизиты.Субконто1) = Тип("СписокЗначений") Тогда
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
					Иначе
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
					КонецЕсли;
					ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто1", Реквизиты.Субконто1, ВидСравненияОтбора);
				КонецЕсли;
				Если Реквизиты.Субконто2 <> Неопределено Тогда
					Если ТипЗнч(Реквизиты.Субконто2) = Тип("СписокЗначений") Тогда
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
					Иначе
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
					КонецЕсли;
					ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто2", Реквизиты.Субконто2, ВидСравненияОтбора);
				КонецЕсли;
				Если Реквизиты.Субконто3 <> Неопределено Тогда
					Если ТипЗнч(Реквизиты.Субконто3) = Тип("СписокЗначений") Тогда
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке; 
					Иначе
						ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
					КонецЕсли;
					ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Субконто3", Реквизиты.Субконто3, ВидСравненияОтбора);
				КонецЕсли;
				ФормаОтчета.НачалоПериода = Реквизиты.ДатаНачала;
				ФормаОтчета.КонецПериода  = Реквизиты.ДатаКонца;
				Если ВидОтчета <> "ОборотноСальдоваяВедомость" Тогда
					Если ВидОтчета = "АнализСчета" Тогда
						ФормаОтчета.Счет = Счет;
						ФормаОтчета.Настроить();
						Если ЗначениеЗаполнено(Счет) Тогда
							Если СвойствоОпределено(Счет, "Валютный") И Счет.Валютный Тогда
								ВидУчета.Добавить("ВалютнаяСумма");
							КонецЕсли;
							Если СвойствоОпределено(Счет, "Количественный") И Счет.Количественный Тогда
								ВидУчета.Добавить("Количество");
							КонецЕсли;
						КонецЕсли;
						ФормаОтчета.ПоСубсчетам          = Истина;
						ФормаОтчета.ПоСубсчетамКорСчетов = Истина;
					ИначеЕсли ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						ФормаОтчета.Счет = Счет;
						ФормаОтчета.Настроить();
						Если ЗначениеЗаполнено(Счет) Тогда
							Если СвойствоОпределено(Счет, "Валютный") И Счет.Валютный Тогда
								ВидУчета.Добавить("ВалютнаяСумма");
							КонецЕсли;
							Если СвойствоОпределено(Счет, "Количественный") И Счет.Количественный Тогда
								ВидУчета.Добавить("Количество");
							КонецЕсли;
						КонецЕсли;
						ФормаОтчета.ПоСубсчетам          = Истина;
					Иначе
						ФормаОтчета.Настроить();
						ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "Счет"   , Счет   , ВидСравненияКомпоновкиДанных.ВИерархии);
						ТиповыеОтчеты.ДобавитьОтбор(ФормаОтчета.КомпоновщикНастроек, "КорСчет", КорСчет, ВидСравненияКомпоновкиДанных.ВИерархии);
					КонецЕсли;
				Иначе
					ФормаОтчета.Настроить();
				КонецЕсли;
				
				Для Каждого Показатель Из ФормаОтчета.ДанныеОтчета.ПоказателиОтчета Цикл
					Показатель.Значение.Значение = Ложь;
				КонецЦикла;
				Для Каждого ЭлементМассива Из ВидУчета Цикл
					ФормаОтчета.ДанныеОтчета.ПоказателиОтчета[ЭлементМассива].Значение = Истина;
				КонецЦикла;
				
				Если ФормаОтчета.Открыта() Тогда
					ФормаОтчета.ОбновитьПанельНастроек();
					ФормаОтчета.Активизировать();
				Иначе
					ФормаОтчета.Открыть();
				КонецЕсли;
				
				ФормаОтчета.ОбновитьОтчет();
				
			Иначе
			
				ПараметрыНастройки = Новый Структура;
				Счет = Реквизиты.КодСчета;
				ПараметрыНастройки.Вставить("Счет", Счет);		
				ПараметрыНастройки.Вставить("КорСчет", Реквизиты.КодКорСчета);
				Если ПланСчетов = ПланыСчетов.Налоговый Тогда
					ПараметрыНастройки.Вставить("ВидУчета", Перечисления.ВидыУчетаПоПБУ18.НУ);
				КонецЕсли;
				Если мКолонкаОрганизацияЕсть Тогда
					// Может быть пустой.
					ПараметрыНастройки.Вставить("Организация", ?(Реквизиты.Организация = Неопределено, Организация, Реквизиты.Организация));
				Иначе
					ПараметрыНастройки.Вставить("Организация", Организация);
				КонецЕсли;
				ПараметрыНастройки.Вставить("ДатаНач", Реквизиты.ДатаНачала);
				ПараметрыНастройки.Вставить("ДатаКон", Реквизиты.ДатаКонца);
				
				ОтборПоСубконто = Новый Структура;
				Если Реквизиты.Субконто1 <> Неопределено Тогда
					ОтборПоСубконто.Вставить("Субконто1", Реквизиты.Субконто1);
				КонецЕсли;
				Если Реквизиты.Субконто2 <> Неопределено Тогда
					ОтборПоСубконто.Вставить("Субконто2", Реквизиты.Субконто2);
				КонецЕсли;
				Если Реквизиты.Субконто3 <> Неопределено Тогда
					ОтборПоСубконто.Вставить("Субконто3", Реквизиты.Субконто3);
				КонецЕсли;
				Если ОтборПоСубконто.Количество() > 0 Тогда
					ПараметрыНастройки.Вставить("Отбор", ОтборПоСубконто);
				КонецЕсли;
				ВидОтчета = ПолучитьВидОтчета(Реквизиты);
				Если ТипЗнч(Расшифровка.Форма) = Тип("Форма") Тогда
					ФормаОтчета = Расшифровка.Форма;
				Иначе
					Если ПланСчетов = ПланыСчетов.Хозрасчетный Тогда
						ИмяПланаСчетов = "Хозрасчетный";
					ИначеЕсли ПланСчетов = ПланыСчетов.Налоговый Тогда
						ИмяПланаСчетов = "Налоговый";
					КонецЕсли;
					Отчет = Отчеты[ВидОтчета + ИмяПланаСчетов].Создать();
					ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
				КонецЕсли;
				Если ВидОтчета <> "ОборотноСальдоваяВедомость" Тогда
					Если ВидОтчета = "АнализСчета" Тогда
						Если ЗначениеЗаполнено(Счет) Тогда
							Если СвойствоОпределено(Счет, "Валютный") И Счет.Валютный Тогда
								ПараметрыНастройки.Вставить("ПоВалютам", Истина);
							КонецЕсли;
							Если СвойствоОпределено(Счет, "Количественный") И Счет.Количественный Тогда
								ПараметрыНастройки.Вставить("ПоКоличеству", Истина);
							КонецЕсли;
						Иначе
							ПараметрыНастройки.Вставить("ПоВалютам", Ложь);
							ПараметрыНастройки.Вставить("ПоКоличеству", Ложь);
						КонецЕсли;
						ПараметрыНастройки.Вставить("ПоСубсчетамИСубконто", Истина);
						ПараметрыНастройки.Вставить("ПоКорСубсчетамИСубконто", Истина);
					ИначеЕсли ВидОтчета = "ОборотноСальдоваяВедомостьПоСчету" Тогда
						Если ЗначениеЗаполнено(Счет) Тогда
							Если СвойствоОпределено(Счет, "Валютный") И Счет.Валютный Тогда
								ПараметрыНастройки.Вставить("ПоВалютам", Истина);
							КонецЕсли;
							Если СвойствоОпределено(Счет, "Количественный") И Счет.Количественный Тогда
								ПараметрыНастройки.Вставить("ПоКоличеству", Истина);
							КонецЕсли;
						Иначе
							ПараметрыНастройки.Вставить("ПоВалютам", Ложь);
							ПараметрыНастройки.Вставить("ПоКоличеству", Ложь);
						КонецЕсли;
						ПараметрыНастройки.Вставить("ПоСубсчетам", Истина);
					КонецЕсли;
					ФормаОтчета.Настроить(ПараметрыНастройки);
				КонецЕсли;
				ФормаОтчета.ПоказыватьЗаголовок = Истина;
				ФормаОтчета.ОбновитьОтчет();
				Если ВидОтчета <> "ОборотноСальдоваяВедомость" Тогда
					ФормаОтчета.НеЗаполнятьНастройкиПриОткрытии = Истина;
				КонецЕсли;
				Если ФормаОтчета.Открыта() Тогда
					ФормаОтчета.Активизировать();
				Иначе
					ФормаОтчета.Открыть();
				КонецЕсли;
				
			КонецЕсли;
			
			Расшифровка.Вставить("Форма", ФормаОтчета);
			Если ТекОбл <> Неопределено Тогда
				ТекОбл.Расшифровка = Расшифровка;
			Иначе
				ЭлементыФормы.ПолеРасшифровки.ТекущаяОбласть.Расшифровка = Расшифровка;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Сохранить" нижней командной панели формы
// Сохраняет табличный документ в виде файла MXL, в который выводятся расшифровки выбранных
// пользователем показателей
//
Процедура ОсновныеДействияФормыКнопкаСохранить(Кнопка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Расширение = "mxl";
	Диалог.Фильтр = "Табличные документы (*.mxl)|*.mxl";
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	СписокПоказателей = Новый СписокЗначений;
	Для Каждого Стр Из ОбластиГруппыСтрок Цикл
		СписокПоказателей.Добавить(Стр, Стр.Наименование, Истина);
	КонецЦикла;
	
	Если НЕ СписокПоказателей.ОтметитьЭлементы("Выберите показатели") Тогда
		Возврат;
	КонецЕсли;
	
	Табл = Новый ТабличныйДокумент;
	Для Каждого Стр Из СписокПоказателей Цикл
		Если Стр.Пометка Тогда
			Табл.Вывести(ЭлементыФормы.ПолеРасшифровки.ПолучитьОбласть(Стр.Значение.Верх, , Стр.Значение.Низ, ));
		КонецЕсли;
	КонецЦикла;
	Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	
	Попытка
		Табл.Записать(Диалог.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.MXL);
	Исключение
		Сообщить("Не удалось записать файл на диск. Возможно, диск защищен от записи или недостаточно места на диске", СтатусСообщения.Внимание);
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "Печать" нижней командной панели формы
// Выводит на печать табличный документ, в который выводятся расшифровки выбранных
// пользователем показателей
//
Процедура ОсновныеДействияФормыКнопкаВывестиНаПечать(Кнопка)
	
	СписокПоказателей = Новый СписокЗначений;
	Для Каждого Стр Из ОбластиГруппыСтрок Цикл
		СписокПоказателей.Добавить(Стр, Стр.Наименование, Истина);
	КонецЦикла;
	
	Если НЕ СписокПоказателей.ОтметитьЭлементы("Выберите показатели для печати") Тогда
		Возврат;
	КонецЕсли;
	
	Табл = Новый ТабличныйДокумент;
	Для Каждого Стр Из СписокПоказателей Цикл
		Если Стр.Пометка Тогда
			Табл.Вывести(ЭлементыФормы.ПолеРасшифровки.ПолучитьОбласть(Стр.Значение.Верх, , Стр.Значение.Низ, ));
		КонецЕсли;
	КонецЦикла;
	Табл.ОтображатьЗаголовки = Ложь;
	Табл.ОтображатьСетку = Ложь;
	Табл.ТолькоПросмотр = Истина;
	Табл.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	Табл.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	Табл.ВерхнийКолонтитул.Выводить = Истина;
	Табл.ВерхнийКолонтитул.ТекстСлева = Заголовок + ". Страница [&НомерСтраницы] из [&СтраницВсего].";
	Табл.Показать(Заголовок);
		
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаАктивизироватьРодительскийОтчет" нижней командной панели формы
// Активизирует форму родительского отчета, если та еще не закрыта
//
Процедура ОсновныеДействияФормыКнопкаАктивизироватьРодительскийОтчет(Кнопка)
	
	Если Форма <> Неопределено И Форма.Открыта() Тогда
		Форма.Активизировать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = (Форма = Неопределено);
	
КонецПроцедуры

Функция СвойствоОпределено(Объект, ИмяСвойства)
	
	ГУИД = Новый УникальныйИдентификатор;
	ВремСтрукт = Новый Структура(ИмяСвойства, ГУИД);
	ЗаполнитьЗначенияСвойств(ВремСтрукт, Объект);
    Возврат (ВремСтрукт[ИмяСвойства] <> ГУИД);
	
КонецФункции
