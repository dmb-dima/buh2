////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПЕРЕМЕННЫЕ

Перем КлючСообщенияЖурналаРегистрации Экспорт; // строка сообщения для фиксации ошибок в журнале регистрации

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)
 
Перем Конвертация; // Структура свойств конвертации (Имя, Ид, обработчики событий обмена)

Перем Алгоритмы; // Структура, содержащая используемые алгоритмы
Перем Запросы; // Структура, содержащая используемые запросы
Перем ДопОбработки; // Структура, содержащая используемые внешние обработки

Перем Правила; // Структура, содержащая ссылки на ПКО

Перем Менеджеры; // Соответствие, содержащее поля Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, ПКО
Перем МенеджерыДляПлановОбмена;
Перем ФайлОбмена; // Последовательно записываемый/читаемый файл обмена

Перем ПараметрыДопОбработок; // Структура, содержащая параметры, используемых внешних обработок

Перем ПараметрыИнициализированы; // Если Истина, то необходимые параметры конвертации проинициализированы

Перем ФайлПротоколаДанных; // файл для ведения протокола обмена данными
Перем ФлагКомментироватьОбработкуОбъектов;

////////////////////////////////////////////////////////////////////////////////
// ФЛАГИ НАЛИЧИЯ ГЛОБАЛЬНЫХ ОБРАБОТЧИКОВ СОБЫТИЙ

Перем ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта;
Перем ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта;

Перем ЕстьГлобальныйОбработчикПередКонвертациейОбъекта;

Перем ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта;
Перем ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта;

Перем ВерсияПлатформыПриемника;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем ТипСтрока;                  // Тип("Строка")
Перем ТипБулево;                  // Тип("Булево")
Перем ТипЧисло;                   // Тип("Число")
Перем ТипДата;                    // Тип("Дата")
Перем ТипУникальныйИдентификатор; // Тип("УникальныйИдентификатор")
Перем ТипХранилищеЗначения;       // Тип("ХранилищеЗначения")
Перем ТипДвоичныеДанные;          // Тип("ДвоичныеДанные")
Перем ТипВидДвиженияНакопления;   // Тип("ВидДвиженияНакопления")
Перем ТипУдалениеОбъекта;         // Тип("УдалениеОбъекта")
Перем ТипВидСчета;                // Тип("ВидСчета")
Перем ТипТип;                     // Тип("Тип")
Перем ТипСоответствие;            // Тип("Соответствие")
Перем ТипСтрока36;
Перем ТипСтрока255;

Перем ТипРегистрСоответствия;

Перем ТипУзлаXMLКонецЭлемента;
Перем ТипУзлаXMLНачалоЭлемента;
Перем ТипУзлаXMLТекст;

Перем ЗначениеПустаяДата;

Перем СообщенияОбОшибках; // Соответствие. Ключ - код ошибки,  Значение - описание ошибки

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБРАБОТКИ ВЫГРУЗКИ
 
Перем СчетчикНПП;   // Число - счетчик НПП
Перем НППЗаписанногоВФайл;
Перем ТаблицаПравилКонвертацииСвойств;      // ТаблицаЗначений - шаблон для воссоздания структуры таблицы путем копирования
Перем XMLПравила;                           // xml-Строка, содержащая описание правил обмена
Перем СтрокаТиповДляПриемника;
Перем ПолеДокументыДляОтложенногоПроведения; // Таблица значений для проведения документов после загрузки данных

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБРАБОТКИ ЗАГРУЗКИ
 
Перем КоличествоВыполненныхОтложенныхДвиженийДокументов;
Перем АтрибутыФайлаОбмена;       // Структура. После открытия файла 
                                 // содержит атрибуты файла обмена согласно формату
Перем НомерПоследнегоПоискаПоСсылке;
Перем ЧислоХранимыхВыгруженныхОбъектовПоТипам;
Перем СоответствиеДопПараметровПоиска;
Перем СоответствиеАлгоритмовПоискаЭлементов;
Перем СоответствиеТиповИНазваниеОбъектов;
Перем ОбработкаДляЗагрузкиДанных;
Перем СоответствиеПустыхЗначенийТипов;
Перем СоответствиеОписаниеТипов;
Перем ПолеНомерВходящегоСообщения;
Перем ПолеНомерИсходящегоСообщения;
Перем РазрешитьПроведениеДокумента;
Перем СтекВызововВыгрузкиДанных;
Перем ГлобальныйСтекНеЗаписанныхОбъектов;
Перем СоответствиеДанныхДляОбновленияВыгруженныхЭлементов;
Перем ДатаНачалаВыполненияОтложенныхОперацийСДокументами;
Перем ДатаОкончанияВыполненияОтложенныхОперацийСДокументами;
Перем СобытияПослеЗагрузкиПараметров;
Перем МенеджерРегистраСоответствийОбъектов;
Перем ТекущийУровеньВложенностиВыгрузитьПоПравилу;
Перем РежимВизуальнойНастройкиОбмена;
Перем РежимЗагрузкиИнформацииОПравилахОбмена;
Перем ТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска;
Перем ИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных;
Перем ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных;
Перем ЗапросСоответствиеОбъектовИнформационныхБаз;
Перем ЕстьКорректировкаИнформацииОРегистрацииОбъекта;
Перем ЕстьИнформацияОРегистрацииОбъекта;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ДЛЯ ЗНАЧЕНИЙ СВОЙСТВ

Перем ПолеФлагОшибки;
Перем ПолеРезультатВыполненияОбмена;
Перем ПолеСостояниеОбменаДанными;

Перем ПолеТаблицыДанныхСообщенияОбмена;  // соответствие с таблицами значений данных из сообщения обмена; 
										 // Ключ - ИмяТипа (Строка); Значение - таблица с данными объектов (ТаблицаЗначений)
//
Перем ПолеТаблицаДанныхЗаголовкаПакета; // таблица значений с данными из файла заголовка пакета сообщений обмена
Перем ПолеСтрокаСообщенияОбОшибке; // Строка - переменная содержит строку с сообщением об ошибке
//
Перем ПолеСоответствиеТиповДанныхДляЗагрузки;

Перем ПолеСчетчикЗагруженныхОбъектов; // счетчик загруженных объектов
Перем ПолеСчетчикВыгруженныхОбъектов; // счетчик выгруженных объектов

Перем ПолеПриоритетыРезультатовОбмена; // Массив - приоритеты результатов обмена данными по убыванию

Перем ПолеТаблицыОписанийСвойствОбъектов; // Соответствие: Ключ - ОбъектМетаданных; Значение - ТаблицаЗначений - таблица описания свойств объекта метаданных

Перем ПолеВыгруженныеПоСсылкеОбъекты; // Массив объектов, выгруженных по ссылке. Элементы массива уникальны

Перем ПолеВыгружаемыеПоСсылкеОбъектыМетаданных; // (кэш) Соответствие: Ключ - ОбъектМетаданных; Значение - признак выгрузки объекта по ссылке: Истина - надо выгружать объект по ссылке, Ложь - не надо.

Перем ПолеПравилаРегистрацииОбъектов; // (кэш) ТаблицаЗначений - содержит правила регистрации объектов (правила только с видом "ФРО" и для текущего плана обмена).

Перем ПолеИмяПланаОбмена;

Перем ПолеСвойстваУзлаПланаОбмена;

Перем ПолеВерсияФорматаВходящегоСообщенияОбмена;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ СВОЙСТВА

// Функция-свойство: флаг ошибки выполнения обмена данными
//
// Тип: Булево
//
Функция ФлагОшибки() Экспорт
	
	Если ТипЗнч(ПолеФлагОшибки) <> Тип("Булево") Тогда
		
		ПолеФлагОшибки = Ложь;
		
	КонецЕсли;
	
	Возврат ПолеФлагОшибки;
	
КонецФункции

// Функция-свойство: результат выполнения обмена данными
//
// Тип: ПеречислениеСсылка.РезультатыВыполненияОбмена
//
Функция РезультатВыполненияОбмена() Экспорт
	
	Если ТипЗнч(ПолеРезультатВыполненияОбмена) <> Тип("ПеречислениеСсылка.РезультатыВыполненияОбмена") Тогда
		
		ПолеРезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено;
		
	КонецЕсли;
	
	Возврат ПолеРезультатВыполненияОбмена;
	
КонецФункции

// Функция-свойство: номер входящего сообщения обмена данными
//
// Тип: Число
//
Функция НомерВходящегоСообщения() Экспорт
	
	Если ТипЗнч(ПолеНомерВходящегоСообщения) <> Тип("Число") Тогда
		
		ПолеНомерВходящегоСообщения = 0;
		
	КонецЕсли;
	
	Возврат ПолеНомерВходящегоСообщения;
	
КонецФункции

// Функция-свойство: номер исходящего сообщения обмена данными
//
// Тип: Число
//
Функция НомерИсходящегоСообщения() Экспорт
	
	Если ТипЗнч(ПолеНомерИсходящегоСообщения) <> Тип("Число") Тогда
		
		ПолеНомерИсходящегоСообщения = 0;
		
	КонецЕсли;
	
	Возврат ПолеНомерИсходящегоСообщения;
	
КонецФункции

// Функция-свойство: соответствие с таблицами данных входящего сообщения обмена
//
// Тип: Соответствие
//
Функция ТаблицыДанныхСообщенияОбмена() Экспорт
	
	Если ТипЗнч(ПолеТаблицыДанныхСообщенияОбмена) <> Тип("Соответствие") Тогда
		
		ПолеТаблицыДанныхСообщенияОбмена = Новый Соответствие;
		
	КонецЕсли;
	
	Возврат ПолеТаблицыДанныхСообщенияОбмена;
	
КонецФункции

// Функция-свойство: таблица значений со статистической и дополнительной информацией о входящем сообщении обмена
//
// Тип: ТаблицаЗначений
//
Функция ТаблицаДанныхЗаголовкаПакета() Экспорт
	
	Если ТипЗнч(ПолеТаблицаДанныхЗаголовкаПакета) <> Тип("ТаблицаЗначений") Тогда
		
		ПолеТаблицаДанныхЗаголовкаПакета = Новый ТаблицаЗначений;
		
		Колонки = ПолеТаблицаДанныхЗаголовкаПакета.Колонки;
		
		Колонки.Добавить("ТипОбъектаСтрокой",            одОписаниеТипа("Строка"));
		Колонки.Добавить("КоличествоОбъектовВИсточнике", одОписаниеТипа("Число"));
		Колонки.Добавить("ПоляПоиска",                   одОписаниеТипа("Строка"));
		Колонки.Добавить("ПоляТаблицы",                  одОписаниеТипа("Строка"));
		
		Колонки.Добавить("ТипИсточникаСтрокой", одОписаниеТипа("Строка"));
		Колонки.Добавить("ТипПриемникаСтрокой", одОписаниеТипа("Строка"));
		
		Колонки.Добавить("СинхронизироватьПоИдентификатору", одОписаниеТипа("Булево"));
		Колонки.Добавить("ЭтоУдалениеОбъекта", одОписаниеТипа("Булево"));
		Колонки.Добавить("ИспользоватьПредварительныйПросмотр", одОписаниеТипа("Булево"));
		
	КонецЕсли;
	
	Возврат ПолеТаблицаДанныхЗаголовкаПакета;
	
КонецФункции

// Функция-свойство: строка, которая содержит сообщение об ошибке при обмене данными
//
// Тип: Строка
//
Функция СтрокаСообщенияОбОшибке() Экспорт
	
	Если ТипЗнч(ПолеСтрокаСообщенияОбОшибке) <> Тип("Строка") Тогда
		
		ПолеСтрокаСообщенияОбОшибке = "";
		
	КонецЕсли;
	
	Возврат ПолеСтрокаСообщенияОбОшибке;
	
КонецФункции

// Функция-свойство: количество объектов, которые были загружены
//
// Тип: Число
//
Функция СчетчикЗагруженныхОбъектов() Экспорт
	
	Если ТипЗнч(ПолеСчетчикЗагруженныхОбъектов) <> Тип("Число") Тогда
		
		ПолеСчетчикЗагруженныхОбъектов = 0;
		
	КонецЕсли;
	
	Возврат ПолеСчетчикЗагруженныхОбъектов;
	
КонецФункции

// Функция-свойство: количество объектов, которые были выгружены
//
// Тип: Число
//
Функция СчетчикВыгруженныхОбъектов() Экспорт
	
	Если ТипЗнч(ПолеСчетчикВыгруженныхОбъектов) <> Тип("Число") Тогда
		
		ПолеСчетчикВыгруженныхОбъектов = 0;
		
	КонецЕсли;
	
	Возврат ПолеСчетчикВыгруженныхОбъектов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВНУТРЕННИЕ СВОЙСТВА

Функция СостояниеОбменаДанными()
	
	Если ТипЗнч(ПолеСостояниеОбменаДанными) <> Тип("Структура") Тогда
		
		ПолеСостояниеОбменаДанными = Новый Структура;
		ПолеСостояниеОбменаДанными.Вставить("УзелИнформационнойБазы");
		ПолеСостояниеОбменаДанными.Вставить("ДействиеПриОбмене");
		ПолеСостояниеОбменаДанными.Вставить("РезультатВыполненияОбмена");
		ПолеСостояниеОбменаДанными.Вставить("ДатаНачала");
		ПолеСостояниеОбменаДанными.Вставить("ДатаОкончания");
		
	КонецЕсли;
	
	Возврат ПолеСостояниеОбменаДанными;
	
КонецФункции

Функция СоответствиеТиповДанныхДляЗагрузки()
	
	Если ТипЗнч(ПолеСоответствиеТиповДанныхДляЗагрузки) <> Тип("Соответствие") Тогда
		
		ПолеСоответствиеТиповДанныхДляЗагрузки = Новый Соответствие;
		
	КонецЕсли;
	
	Возврат ПолеСоответствиеТиповДанныхДляЗагрузки;
	
КонецФункции

Функция РежимЗагрузкиДанныхВИнформационнуюБазу()
	
	Возврат ПустаяСтрока(РежимЗагрузкиДанных) ИЛИ ВРег(РежимЗагрузкиДанных) = ВРег("ЗагрузкаВИнформационнуюБазу");
	
КонецФункции

Функция РежимЗагрузкиДанныхВТаблицуЗначений()
	
	Возврат Не РежимЗагрузкиДанныхВИнформационнуюБазу();
	
КонецФункции

Функция ИмяКолонкиУникальныйИдентификатор()
	
	Возврат "УникальныйИдентификатор";
	
КонецФункции

Функция ИмяКолонкиТипСтрокой()
	
	Возврат "ТипСтрокой";
	
КонецФункции

Функция КлючСообщенияЖурналаРегистрации()
	
	Если ТипЗнч(КлючСообщенияЖурналаРегистрации) <> Тип("Строка")
		ИЛИ ПустаяСтрока(КлючСообщенияЖурналаРегистрации) Тогда
		
		КлючСообщенияЖурналаРегистрации = "Обмен данными";
		
	КонецЕсли;
	
	Возврат КлючСообщенияЖурналаРегистрации;
КонецФункции

Функция ПриоритетыРезультатовОбмена()
	
	Если ТипЗнч(ПолеПриоритетыРезультатовОбмена) <> Тип("Массив") Тогда
		
		ПолеПриоритетыРезультатовОбмена = Новый Массив;
		ПолеПриоритетыРезультатовОбмена.Добавить(Перечисления.РезультатыВыполненияОбмена.Ошибка);
		ПолеПриоритетыРезультатовОбмена.Добавить(Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения);
		ПолеПриоритетыРезультатовОбмена.Добавить(Перечисления.РезультатыВыполненияОбмена.Отменено);
		ПолеПриоритетыРезультатовОбмена.Добавить(Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
		ПолеПриоритетыРезультатовОбмена.Добавить(Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями);
		ПолеПриоритетыРезультатовОбмена.Добавить(Перечисления.РезультатыВыполненияОбмена.Выполнено);
		ПолеПриоритетыРезультатовОбмена.Добавить(Неопределено);
		
	КонецЕсли;
	
	Возврат ПолеПриоритетыРезультатовОбмена;
КонецФункции

Функция ТаблицыОписанийСвойствОбъектов()
	
	Если ТипЗнч(ПолеТаблицыОписанийСвойствОбъектов) <> Тип("Соответствие") Тогда
		
		ПолеТаблицыОписанийСвойствОбъектов = Новый Соответствие;
		
	КонецЕсли;
	
	Возврат ПолеТаблицыОписанийСвойствОбъектов;
КонецФункции

Функция ДокументыДляОтложенногоПроведения()
	
	Если ТипЗнч(ПолеДокументыДляОтложенногоПроведения) <> Тип("ТаблицаЗначений") Тогда
		
		// инициализируем таблицу для отложенного проведения документов
		ПолеДокументыДляОтложенногоПроведения = Новый ТаблицаЗначений;
		ПолеДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументОбъект");
		ПолеДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументСсылка");
		ПолеДокументыДляОтложенногоПроведения.Колонки.Добавить("ДатаДокумента",           одОписаниеТипа("Дата"));
		ПолеДокументыДляОтложенногоПроведения.Колонки.Добавить("ДокументПроведенУспешно", одОписаниеТипа("Булево"));
		
	КонецЕсли;
	
	Возврат ПолеДокументыДляОтложенногоПроведения;
КонецФункции

Функция ВыгруженныеПоСсылкеОбъекты()
	
	Если ТипЗнч(ПолеВыгруженныеПоСсылкеОбъекты) <> Тип("Массив") Тогда
		
		ПолеВыгруженныеПоСсылкеОбъекты = Новый Массив;
		
	КонецЕсли;
	
	Возврат ПолеВыгруженныеПоСсылкеОбъекты;
КонецФункции

Функция ВыгружаемыеПоСсылкеОбъектыМетаданных()
	
	Если ТипЗнч(ПолеВыгружаемыеПоСсылкеОбъектыМетаданных) <> Тип("Соответствие") Тогда
		
		ПолеВыгружаемыеПоСсылкеОбъектыМетаданных = Новый Соответствие;
		
	КонецЕсли;
	
	Возврат ПолеВыгружаемыеПоСсылкеОбъектыМетаданных;
КонецФункции

Функция ВыгружатьОбъектПоСсылке(Объект, УзелПланаОбмена)
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// получаем значение из кэша
	Результат = ВыгружаемыеПоСсылкеОбъектыМетаданных().Получить(ОбъектМетаданных);
	
	Если Результат = Неопределено Тогда
		
		Результат = Ложь;
		
		// получаем признак выгрузки по ссылке
		Отбор = Новый Структура("ОбъектМетаданныхИмя", ОбъектМетаданных.ПолноеИмя());
		
		МассивПравил = ПравилаРегистрацииОбъектов(УзелПланаОбмена).НайтиСтроки(Отбор);
		
		Для Каждого Правило Из МассивПравил Цикл
			
			Если Не ПустаяСтрока(Правило.ИмяРеквизитаФлага) Тогда
				
				ЗначениеРеквизитаФлага = Неопределено;
				СвойстваУзлаПланаОбмена(УзелПланаОбмена).Свойство(Правило.ИмяРеквизитаФлага, ЗначениеРеквизитаФлага);
				
				Результат = Результат ИЛИ ( ЗначениеРеквизитаФлага = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости
										ИЛИ ЗначениеРеквизитаФлага = Перечисления.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка());
				//
				Если Результат Тогда
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// сохраняем полученное значение в кэше
		ВыгружаемыеПоСсылкеОбъектыМетаданных().Вставить(ОбъектМетаданных, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ИмяПланаОбмена()
	
	Если ТипЗнч(ПолеИмяПланаОбмена) <> Тип("Строка")
		ИЛИ ПустаяСтрока(ПолеИмяПланаОбмена) Тогда
		
		Если ЗначениеЗаполнено(УзелДляОбмена) Тогда
			
			ПолеИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелДляОбмена);
			
		ИначеЕсли ЗначениеЗаполнено(УзелОбменаЗагрузкаДанных) Тогда
			
			ПолеИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелОбменаЗагрузкаДанных);
			
		Иначе
			
			ПолеИмяПланаОбмена = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПолеИмяПланаОбмена;
КонецФункции

Функция СвойстваУзлаПланаОбмена(Узел)
	
	Если ТипЗнч(ПолеСвойстваУзлаПланаОбмена) <> Тип("Структура") Тогда
		
		ПолеСвойстваУзлаПланаОбмена = Новый Структура;
		
		// получаем имена реквизитов
		ИменаРеквизитов = ОбщегоНазначения.ИменаРеквизитовПоТипу(Узел, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"));
		
		// получаем значения реквизитов
		Если Не ПустаяСтрока(ИменаРеквизитов) Тогда
			
			ПолеСвойстваУзлаПланаОбмена = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Узел, ИменаРеквизитов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПолеСвойстваУзлаПланаОбмена;
КонецФункции

Функция ВерсияФорматаВходящегоСообщенияОбмена()
	
	Если ТипЗнч(ПолеВерсияФорматаВходящегоСообщенияОбмена) <> Тип("Строка") Тогда
		
		ПолеВерсияФорматаВходящегоСообщенияОбмена = "0.0.0.0";
		
	КонецЕсли;
	
	// дополняем версию формата входящего сообщения до 4-х разрядов
	РазрядыВерсий = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеВерсияФорматаВходящегоСообщенияОбмена, ".");
	
	Если РазрядыВерсий.Количество() < 4 Тогда
		
		КоличествоРазрядовДобавить = 4 - РазрядыВерсий.Количество();
		
		Для А = 1 По КоличествоРазрядовДобавить Цикл
			
			РазрядыВерсий.Добавить("0");
			
		КонецЦикла;
		
		ПолеВерсияФорматаВходящегоСообщенияОбмена = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(РазрядыВерсий, ".");
		
	КонецЕсли;
	
	Возврат ПолеВерсияФорматаВходящегоСообщенияОбмена;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ КЕШИРОВАНИЯ

Функция ТаблицаОписанияСвойствОбъекта(ОбъектМетаданных)
	
	Результат = ТаблицыОписанийСвойствОбъектов().Получить(ОбъектМетаданных);
	
	Если Результат = Неопределено Тогда
		
		Результат = ОбщегоНазначения.ПолучитьТаблицуОписанияСвойствОбъекта(ОбъектМетаданных, "Имя");
		
		ТаблицыОписанийСвойствОбъектов().Вставить(Результат);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПравилаРегистрацииОбъектов(УзелПланаОбмена)
	
	Если ТипЗнч(ПолеПравилаРегистрацииОбъектов) <> Тип("ТаблицаЗначений") Тогда
		
		ПравилаРегистрацииОбъектов = ОбменДаннымиСервер.ПараметрыСеансаПравилаРегистрацииОбъектов().Получить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяПланаОбмена", ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелПланаОбмена));
		
		ПолеПравилаРегистрацииОбъектов = ПравилаРегистрацииОбъектов.Скопировать(Отбор, "ОбъектМетаданныхИмя, ИмяРеквизитаФлага");
		ПолеПравилаРегистрацииОбъектов.Индексы.Добавить("ОбъектМетаданныхИмя");
		
	КонецЕсли;
	
	Возврат ПолеПравилаРегистрацииОбъектов;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// ВЫГРУЗКА ДАННЫХ

// Выполняет выгрузку данных
// -- Все объекты выгружаются в один файл
// -- В заголовок файла выгружаются:
//	 - правила обмена
//	 - информация о типах данных
//	 - данные по обмену (имя плана обмена, коды узлов, номера сообщений (квитирование))
//
// Параметры:
// 
Процедура ВыполнитьВыгрузкуДанных() Экспорт
	
	УстановитьФлагОшибки(Ложь);
	
	ПолеСтрокаСообщенияОбОшибке = "";
	ПолеСостояниеОбменаДанными = Неопределено;
	ПолеРезультатВыполненияОбмена = Неопределено;
	ПолеВыгруженныеПоСсылкеОбъекты = Неопределено;
	ПолеВыгружаемыеПоСсылкеОбъектыМетаданных = Неопределено;
	ПолеПравилаРегистрацииОбъектов = Неопределено;
	ПолеСвойстваУзлаПланаОбмена = Неопределено;
	
	// обновляем повторно используемые значения МРО
	ОбменДаннымиСервер.ОбновитьПовторноИспользуемыеЗначенияМРОПриНеобходимости();
	
	ИнициализироватьВедениеПротоколаОбмена();
	
	// Открываем файл обмена
	ОткрытьФайлВыгрузки();
	
	Если ФлагОшибки() Тогда
		ФайлОбмена = Неопределено;
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	// Включаем правила обмена в файл
	ФайлОбмена.ЗаписатьСтроку(XMLПравила);
	
	// ВЫГРУЗКА ДАННЫХ
	ВыполнитьВыгрузку();
	
	// Закрываем файл обмена
	ЗакрытьФайл();
	
	ЗавершитьВедениеПротоколаОбмена();
	
	// сбрасываем модальные переменные перед помещением обработки в платформенный кэш
	ПолеВыгруженныеПоСсылкеОбъекты = Неопределено;
	ПолеВыгружаемыеПоСсылкеОбъектыМетаданных = Неопределено;
	
КонецПроцедуры

// ЗАГРУЗКА ДАННЫХ

// Выполняет загрузку данных из файла сообщения обмена
// Данные загружаются в информационную базу
//
// Параметры:
// 
Процедура ВыполнитьЗагрузкуДанных() Экспорт
	
	РежимЗагрузкиДанных = "ЗагрузкаВИнформационнуюБазу";
	
	ПолеСтрокаСообщенияОбОшибке = "";
	ПолеСостояниеОбменаДанными = Неопределено;
	ПолеРезультатВыполненияОбмена = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ПолеСчетчикЗагруженныхОбъектов = Неопределено;
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСвойстваУзлаПланаОбмена = Неопределено;
	ПолеВерсияФорматаВходящегоСообщенияОбмена = Неопределено;
	
	ГлобальныйСтекНеЗаписанныхОбъектов = Новый Соответствие;
	НомерПоследнегоПоискаПоСсылке = 0;
	
	ИнициализироватьМенеджерыИСообщения();
	
	УстановитьФлагОшибки(Ложь);
	
	ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных();
	
	ИнициализироватьВедениеПротоколаОбмена();
	
	ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных = Новый Соответствие;
	
	СоответствиеДопПараметровПоиска = Новый Соответствие;
	СоответствиеАлгоритмовПоискаЭлементов = Новый Соответствие;
	
	КоличествоВыполненныхОтложенныхДвиженийДокументов = 0;
	
	Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
		ЗаписатьВПротоколВыполнения(15);
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	Если ФлагРежимОтладки Тогда
		ИспользоватьТранзакции = Ложь;
	КонецЕсли;
	
	Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
	КонецЕсли;
	
	// выполняем очистку правил обмена
	Правила.Очистить();
	ТаблицаПравилКонвертации.Очистить();
	
	// открываем файл сообщения обмена
	// зачитываем правила обмена
	ОткрытьФайлОбмена();
	
	Если ФлагОшибки() Тогда
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	// {Обработчик: ПередЗагрузкойДанных} Начало
	Отказ = Ложь;
	
	Если Не ПустаяСтрока(Конвертация.ПередЗагрузкойДанных) Тогда
		
		Попытка
			Выполнить(Конвертация.ПередЗагрузкойДанных);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(22, ОписаниеОшибки(), НСтр("ru = 'ПередЗагрузкойДанных (конвертация)'"));
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Отказ Тогда // Отказ от загрузки данных
		ЗавершитьВедениеПротоколаОбмена();
		ФайлОбмена.Закрыть();
		Возврат;
	КонецЕсли;
	// {Обработчик: ПередЗагрузкойДанных} Окончание
	
	// отрабатываем правила очистки данных
	ОбработатьПравилаОчистки(ТаблицаПравилОчистки.Строки);
	
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Попытка
		ПроизвестиЧтениеДанных();
	Исключение
		
		СтрокаСообщения = НСтр("ru = 'Ошибка при загрузке данных: %1'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(СтрокаСообщения,,,,,Истина);
	КонецПопытки;
	
	// отложенная запись того, что не записали
	ПровестиЗаписьНеЗаписанныхОбъектов();
	
	Если ИспользоватьТранзакции Тогда
		
		Если ФлагОшибки() Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		Конецесли;
		
	КонецЕсли;
	
	ФайлОбмена.Закрыть();
	
	// Обработчик ПослеЗагрузкиДанных
	Если Не ФлагОшибки() Тогда
		
		Если Не ПустаяСтрока(Конвертация.ПослеЗагрузкиДанных) Тогда
			
			Попытка
				Выполнить(Конвертация.ПослеЗагрузкиДанных);
			Исключение
				ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(23, ОписаниеОшибки(), НСтр("ru = 'ПослеЗагрузкиДанных (конвертация)'"));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ФлагОшибки() Тогда
		
		// выполняем проведение документов в очереди
		ВыполнитьОтложенноеПроведениеДокументов();
		
		// запишем информацию о номере входящего сообщения
		ОбъектУзла = УзелОбменаЗагрузкаДанных.ПолучитьОбъект();
		ОбъектУзла.НомерПринятого = НомерВходящегоСообщения();
		
		ОбъектУзла.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
		
		ОбъектУзла.Записать();
		
		Если ЕстьКорректировкаИнформацииОРегистрацииОбъекта = Истина Тогда
			
			РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ЗафиксироватьВыполнениеКорректировкиИнформацииСопоставленияБезусловно(УзелОбменаЗагрузкаДанных);
			
		КонецЕсли;
		
		Если ЕстьИнформацияОРегистрацииОбъекта = Истина Тогда
			
			РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.УдалитьНеактуальныеЗаписиРежимаВыгрузкиПоСсылке(УзелОбменаЗагрузкаДанных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗавершитьВедениеПротоколаОбмена();
	
	// сбрасываем модальные переменные перед помещением обработки в платформенный кэш
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ГлобальныйСтекНеЗаписанныхОбъектов = Неопределено;
	
КонецПроцедуры

// ЗАГРУЗКА ДАННЫХ ПАКЕТНАЯ

// Выполняет загрузку данных из файла сообщения обмена в Информационную Базу только заданных типов объектов
//
// Параметры:
//  ТаблицыДляЗагрузки - Массив - массив типов, которые необходимо загрузить из сообщения обмена; элемент массива - Строка
//  Например, для загрузки из сообщения обмена только элементов справочника Контрагенты:
//   ТаблицыДляЗагрузки = Новый Массив;
//   ТаблицыДляЗагрузки.Добавить("СправочникСсылка.Контрагенты");
// 
//  Список всех типов, которые содержаться в текущем сообщении обмена
//  можно получить вызовом процедуры ВыполнитьАнализСообщенияОбмена()
// 
Процедура ВыполнитьЗагрузкуДанныхВИнформационнуюБазу(ТаблицыДляЗагрузки) Экспорт
	
	РежимЗагрузкиДанных = "ЗагрузкаВИнформационнуюБазу";
	ПолеСостояниеОбменаДанными = Неопределено;
	ПолеРезультатВыполненияОбмена = Неопределено;
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСвойстваУзлаПланаОбмена = Неопределено;
	ПолеВерсияФорматаВходящегоСообщенияОбмена = Неопределено;
	
	// дата начала загрузки
	СостояниеОбменаДанными().ДатаНачала = ТекущаяДата();
	
	// запись в журнале регистрации
	СтрокаСообщения = НСтр("ru = 'Начало процесса обмена данными для узла: %1'");
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(УзелОбменаЗагрузкаДанных));
	ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, УровеньЖурналаРегистрации.Информация);
	
	ВыполнитьЗагрузкуФайлаПакета(ТаблицыДляЗагрузки);
	
	// дата окончания загрузки
	СостояниеОбменаДанными().ДатаОкончания = ТекущаяДата();
	
	// фиксируем завершение загрузки данных в РС
	ЗафиксироватьЗавершениеЗагрузкиДанных();
	
	// запись в журнале регистрации
	СтрокаСообщения = НСтр("ru = '%1, %2; Обработано %3 объектов'");
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
					РезультатВыполненияОбмена(),
					Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
					Формат(СчетчикЗагруженныхОбъектов(), "ЧГ=0"));
	//
	ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, УровеньЖурналаРегистрации.Информация);
	
	// сбрасываем модальные переменные перед помещением обработки в платформенный кэш
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ГлобальныйСтекНеЗаписанныхОбъектов = Неопределено;
	
КонецПроцедуры

// Выполняет загрузку данных из файла сообщения обмена в Таблицу значений только заданных типов объектов
//
// Параметры:
//  ТаблицыДляЗагрузки - Массив - массив типов, которые необходимо загрузить из сообщения обмена; элемент массива - Строка
//  Например, для загрузки из сообщения обмена только элементов справочника Контрагенты:
//   ТаблицыДляЗагрузки = Новый Массив;
//   ТаблицыДляЗагрузки.Добавить("СправочникСсылка.Контрагенты");
// 
//  Список всех типов, которые содержаться в текущем сообщении обмена
//  можно получить вызовом процедуры ВыполнитьАнализСообщенияОбмена()
// 
Процедура ВыполнитьЗагрузкуДанныхВТаблицуЗначений(ТаблицыДляЗагрузки) Экспорт
	
	РежимЗагрузкиДанных = "ЗагрузкаВТаблицуЗначений";
	ПолеСостояниеОбменаДанными = Неопределено;
	ПолеРезультатВыполненияОбмена = Неопределено;
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСвойстваУзлаПланаОбмена = Неопределено;
	ПолеВерсияФорматаВходящегоСообщенияОбмена = Неопределено;
	
	ИспользоватьТранзакции = Ложь;
	
	// инициализируем таблицы данных сообщения обмена
	Для Каждого КлючТаблицыДанных ИЗ ТаблицыДляЗагрузки Цикл
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючТаблицыДанных, "#");
		
		ТипОбъекта = МассивПодстрок[1];
		
		ТаблицыДанныхСообщенияОбмена().Вставить(КлючТаблицыДанных, ИнициализацияТаблицыДанныхСообщенияОбмена(Тип(ТипОбъекта)));
		
	КонецЦикла;
	
	ВыполнитьЗагрузкуФайлаПакета(ТаблицыДляЗагрузки);
	
	// сбрасываем модальные переменные перед помещением обработки в платформенный кэш
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ГлобальныйСтекНеЗаписанныхОбъектов = Неопределено;
	
КонецПроцедуры

// Выполняет последовательное чтение файла сообщения обмена при этом:
//  - удаляется регистрация изменений по номеру входящей квитанции
//  - загружаются правила обмена
//  - загружается информация о типах данных
//  - зачитывается информация сопоставления данных и записывается и ИБ
//  - собирается информация о типах объектов и их количестве
//
// Параметры:
//  Нет.
// 
Процедура ВыполнитьАнализСообщенияОбмена() Экспорт
	
	УстановитьФлагОшибки(Ложь);
	
	ИспользоватьТранзакции = Ложь;
	
	ПолеСтрокаСообщенияОбОшибке = "";
	ПолеСостояниеОбменаДанными = Неопределено;
	ПолеРезультатВыполненияОбмена = Неопределено;
	ПолеВерсияФорматаВходящегоСообщенияОбмена = Неопределено;
	
	ИнициализироватьВедениеПротоколаОбмена();
	
	Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
		ЗаписатьВПротоколВыполнения(15);
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	ИнициализироватьМенеджерыИСообщения();
	
	// дата начала анализа
	СостояниеОбменаДанными().ДатаНачала = ТекущаяДата();
	
	// открываем файл сообщения обмена
	// зачитываем правила обмена (при необходимости)
	ОткрытьФайлОбмена();
	
	Если ФлагОшибки() Тогда
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	// обнуляем значение модальной переменной
	ПолеТаблицаДанныхЗаголовкаПакета = Неопределено;
	
	Попытка
		
		// зачитываем данные из сообщения обмена
		ПроизвестиЧтениеДанныхВРежимеАнализа();
		
		// формируем временную таблицу данных
		ТаблицаДанныхЗаголовкаПакетаВременная = ТаблицаДанныхЗаголовкаПакета().Скопировать(, "ТипИсточникаСтрокой, ТипПриемникаСтрокой, ПоляПоиска, ПоляТаблицы");
		ТаблицаДанныхЗаголовкаПакетаВременная.Свернуть("ТипИсточникаСтрокой, ТипПриемникаСтрокой, ПоляПоиска, ПоляТаблицы");
		
		// сворачиваем таблицу данных заголовка пакета
		ТаблицаДанныхЗаголовкаПакета().Свернуть("ТипОбъектаСтрокой, ТипИсточникаСтрокой, ТипПриемникаСтрокой, СинхронизироватьПоИдентификатору, ЭтоУдалениеОбъекта, ИспользоватьПредварительныйПросмотр",
												"КоличествоОбъектовВИсточнике");
		//
		ТаблицаДанныхЗаголовкаПакета().Колонки.Добавить("ПоляПоиска",  одОписаниеТипа("Строка"));
		ТаблицаДанныхЗаголовкаПакета().Колонки.Добавить("ПоляТаблицы", одОписаниеТипа("Строка"));
		
		Для Каждого СтрокаТаблицы Из ТаблицаДанныхЗаголовкаПакета() Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ТипИсточникаСтрокой", СтрокаТаблицы.ТипИсточникаСтрокой);
			Отбор.Вставить("ТипПриемникаСтрокой", СтрокаТаблицы.ТипПриемникаСтрокой);
			
			СтрокиВременнойТаблицы = ТаблицаДанныхЗаголовкаПакетаВременная.НайтиСтроки(Отбор);
			
			СтрокаТаблицы.ПоляПоиска  = СтрокиВременнойТаблицы[0].ПоляПоиска;
			СтрокаТаблицы.ПоляТаблицы = СтрокиВременнойТаблицы[0].ПоляТаблицы;
			
		КонецЦикла;
		
	Исключение
		СтрокаСообщения = НСтр("ru = 'Ошибка при анализе данных: %1'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(СтрокаСообщения,,,,,Истина);
	КонецПопытки;
	
	ФайлОбмена.Закрыть();
	
	ЗавершитьВедениеПротоколаОбмена();
	
	// дата окончания анализа
	СостояниеОбменаДанными().ДатаОкончания = ТекущаяДата();
	
	// фиксируем завершение анализа данных в РС
	ЗафиксироватьЗавершениеЗагрузкиДанных();
	
	Если ЕстьКорректировкаИнформацииОРегистрацииОбъекта = Истина Тогда
		
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ЗафиксироватьВыполнениеКорректировкиИнформацииСопоставленияБезусловно(УзелОбменаЗагрузкаДанных);
		
	КонецЕсли;
	
	Если ЕстьИнформацияОРегистрацииОбъекта = Истина Тогда
		
		РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.УдалитьНеактуальныеЗаписиРежимаВыгрузкиПоСсылке(УзелОбменаЗагрузкаДанных);
		
	КонецЕсли;
	
	// сбрасываем модальные переменные перед помещением обработки в платформенный кэш
	ПолеДокументыДляОтложенногоПроведения = Неопределено;
	ПолеСоответствиеТиповДанныхДляЗагрузки = Неопределено;
	ГлобальныйСтекНеЗаписанныхОбъектов = Неопределено;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",")

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(СокрЛП(Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции // МассивИзСтроки() 

Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер)
	
	НомерБезПрефиксов = "";
	Сч = СтрДлина(Номер);
	
	Пока Сч > 0 Цикл
		
		Символ = Сред(Номер, Сч, 1);
		
		Если (Символ >= "0" И Символ <= "9") Тогда
			
			НомерБезПрефиксов = Символ + НомерБезПрефиксов;
			
		Иначе
			
			Возврат НомерБезПрефиксов;
			
		КонецЕсли;
		
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Возврат НомерБезПрефиксов;
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "")

	ЧисловаяЧасть = 0;
	Префикс = "";
	Стр = СокрЛП(Стр);
	Длина   = СтрДлина(Стр);
	
	СтроковыйНомерБезПрефикса = ПолучитьСтроковыйНомерБезПрефиксов(Стр);
	ДлинаСтроковойЧасти = СтрДлина(СтроковыйНомерБезПрефикса);
	Если ДлинаСтроковойЧасти > 0 Тогда
		ЧисловаяЧасть = Число(СтроковыйНомерБезПрефикса);
		Префикс = Сред(Стр, 1, Длина - ДлинаСтроковойЧасти);
	Иначе
		Префикс = Стр;	
	КонецЕсли;

	Если Режим = "Число" Тогда
		Возврат(ЧисловаяЧасть);
	Иначе
		Возврат(Префикс);
	КонецЕсли;

КонецФункции // ПолучитьПрефиксЧислоНомера()

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина, Префикс = "") Экспорт

	Стр             = СокрЛП(Стр);
	ВходящаяДлинаНомера = СтрДлина(Стр);

	ЧисловаяЧасть   = "";
	Результат       = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);
	
	Результат = ?(ПустаяСтрока(Префикс), Результат, Префикс);
	
	СтрокаЧисловойЧасти = Формат(ЧисловаяЧасть, "ЧГ=0");
	ДлинаЧисловойЧасти = СтрДлина(СтрокаЧисловойЧасти);

	Если (Длина >= ВходящаяДлинаНомера И ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера)
		ИЛИ (Длина < ВходящаяДлинаНомера) Тогда
		
		Для ВременнаяПеременная = 1 По Длина - СтрДлина(Результат) - ДлинаЧисловойЧасти Цикл
			
			Результат = Результат + "0";
			
		КонецЦикла;
	
	КонецЕсли;
		
	Результат = Результат + СтрокаЧисловойЧасти;

	Возврат(Результат);

КонецФункции // ПривестиНомерКДлине()

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добавляемая к префиксу подстрока;
//  Длина        - требуемая результирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева",
	НеДобавлятьПрефиксЕслиСНегоНачинаетсяНомер = Ложь,
	ОбрезатьЧисловуюЧастьСлеваВСлучаеПревышенияНомера = Ложь) Экспорт

	Стр = СокрЛП(Формат(Стр,"ЧГ=0"));
	
	Если ПустаяСтрока(Длина) Тогда
		Длина = СтрДлина(Стр);
	КонецЕсли;

	ЧисловаяЧасть   = "";
	Префикс         = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);
	ДополнениеКПрефиксу = СокрЛП(Добавок);
	
	Если НеДобавлятьПрефиксЕслиСНегоНачинаетсяНомер Тогда
		
		Если Найти(Префикс, ДополнениеКПрефиксу) = 1 Тогда
			Возврат Стр;
		КонецЕсли;
		
	КонецЕсли;

	Если Режим = "Слева" Тогда
		Результат = ДополнениеКПрефиксу + Префикс;
	Иначе
		Результат = Префикс + ДополнениеКПрефиксу;
	КонецЕсли;
	
	СтрокаЧисловойЧасти = Формат(ЧисловаяЧасть, "ЧГ=0");
	ДлинаЧисловойЧасти = СтрДлина(СтрокаЧисловойЧасти);
	ДлинаПрефикса = СтрДлина(Результат);
	
	Для НомерДобавления = 1 По Длина - ДлинаПрефикса - ДлинаЧисловойЧасти Цикл
	    Результат = Результат + "0";
	КонецЦикла;
	
	Если ОбрезатьЧисловуюЧастьСлеваВСлучаеПревышенияНомера 
		И ДлинаПрефикса + ДлинаЧисловойЧасти > Длина Тогда
		
		КоличествоСимволовУрезанияЧисловойЧасти = ДлинаЧисловойЧасти - Длина + ДлинаПрефикса;
		Если КоличествоСимволовУрезанияЧисловойЧасти > 0 Тогда
			СтрокаЧисловойЧасти = Сред(СтрокаЧисловойЧасти, КоличествоСимволовУрезанияЧисловойЧасти + 1);
		КонецЕсли;
		
	КонецЕсли;

	Результат = Результат + СтрокаЧисловойЧасти;

	Возврат Результат;

КонецФункции // ДобавитьКПрефиксу()

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт

	Результат = СокрЛП(Стр);
	Пока Длина - СтрДлина(Результат) > 0 Цикл
		Результат = Результат + Чем;
	КонецЦикла;

	Возврат(Результат);

КонецФункции // одДополнитьСтроку() 

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Значение     - значение перечисления
//
// Возвращаемое значение:
//  Строка       - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт

	ОбъектМД       = Значение.Метаданные();
	ИндексЗначения = Перечисления[ОбъектМД.Имя].Индекс(Значение);

	Возврат ОбъектМД.ЗначенияПеречисления[ИндексЗначения].Имя;

КонецФункции // одИмяЗначенияПеречисления()

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение       - значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//  Истина         - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь)

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Значение = NULL Тогда
		ЭтоNULL   = Истина;
		Возврат Истина;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = ТипХранилищеЗначения Тогда
		
		Результат = одПустое(Значение.Получить());
		Возврат Результат;		
		
	ИначеЕсли ТипЗначения = ТипДвоичныеДанные Тогда
		
		Возврат Ложь;
		
	Иначе

		// Для остальных будем считать значение пустым, если оно равно
		// значению по умолчанию своего типа.
		Попытка
			Результат = Не ЗначениеЗаполнено(Значение);
			Возврат Результат;
		Исключение
			Возврат Ложь;
		КонецПопытки;
			
	КонецЕсли;
    	
КонецФункции // одПустое()

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//  ЗначениеТипа - строка с именем типа или значение типа Тип.
//  
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа)

	ОписаниеТипов = СоответствиеОписаниеТипов[ЗначениеТипа];
	
	Если ОписаниеТипов = Неопределено Тогда
		
		МассивТипов = Новый Массив;
		Если ТипЗнч(ЗначениеТипа) = ТипСтрока Тогда
			МассивТипов.Добавить(Тип(ЗначениеТипа));
		Иначе
			МассивТипов.Добавить(ЗначениеТипа);
		КонецЕсли; 
		ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);
		
		СоответствиеОписаниеТипов.Вставить(ЗначениеТипа, ОписаниеТипов);
		
	КонецЕсли;	
	
	Возврат ОписаниеТипов;

КонецФункции // одОписаниеТипа()

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//  Тип          - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//  Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип)

	ПустоеЗначениеТипа = СоответствиеПустыхЗначенийТипов[Тип];
	
	Если ПустоеЗначениеТипа = Неопределено Тогда
		
		ПустоеЗначениеТипа = одОписаниеТипа(Тип).ПривестиЗначение(Неопределено);	
		
		СоответствиеПустыхЗначенийТипов.Вставить(Тип, ПустоеЗначениеТипа);
			
	КонецЕсли;
	
	Возврат ПустоеЗначениеТипа;

КонецФункции // ПолучитьПустоеЗначение()

Функция ПроверитьСуществованиеСсылки(Ссылка, Менеджер, НайденныйОбъектПоУникальномуИдентификатору, 
	РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору)
	
	Попытка
			
		Если РежимПоискаОсновногоОбъекта
			ИЛИ ПустаяСтрока(СтрокаЗапросаПоискаПоУникальномуИдентификатору) Тогда
			
			НайденныйОбъектПоУникальномуИдентификатору = Ссылка.ПолучитьОбъект();
			
			Если НайденныйОбъектПоУникальномуИдентификатору = Неопределено Тогда
			
				Возврат Менеджер.ПустаяСсылка();
				
			КонецЕсли;
			
		Иначе
			// это режим поиска по ссылке - достаточно сделать запрос к информационной базе
			// шаблон для запроса СтруктураСвойств.СтрокаПоиска 
			
			Запрос = Новый Запрос();
			Запрос.Текст = СтрокаЗапросаПоискаПоУникальномуИдентификатору + "  Ссылка = &Ссылка ";
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
			
				Возврат Менеджер.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ссылка;	
		
	Исключение
			
		Возврат Менеджер.ПустаяСсылка();
		
	КонецПопытки;
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение, 
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено, 
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено,
	РежимПоискаОсновногоОбъекта = Истина, СтрокаЗапросаПоискаПоУникальномуИдентификатору = "")

	Если Свойство = "Имя" Тогда
		
		Возврат Менеджер[Значение];
		
	ИначеЕсли Свойство = "{УникальныйИдентификатор}" Тогда
		
		СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		
		Ссылка =  ПроверитьСуществованиеСсылки(СсылкаПоИдентификатору, Менеджер, НайденныйОбъектПоУникальномуИдентификатору, 
			РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
			
		Возврат Ссылка;
		
	ИначеЕсли Свойство = "{ИмяПредопределенногоЭлемента}" Тогда
		
		Попытка
			
			Ссылка = Менеджер[Значение];
			
		Исключение
			
			Ссылка = Менеджер.НайтиПоКоду(Значение);
			
		КонецПопытки;
		
		Возврат Ссылка;
		
	Иначе
		
		СсылкаНаОбъект = НайтиЭлементЗапросом(ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска, , Менеджер);
		
		Возврат СсылкаНаОбъект;
		
	КонецЕсли;
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Стр            - Строка - значение свойства, по которому осуществляется 
//                   поиск объект;
//  Тип            - тип искомого объекта;
//  Свойство       - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "")

	Если ПустаяСтрока(Стр) Тогда
		Возврат Новый(Тип);
	КонецЕсли; 

	Свойства = Менеджеры[Тип];

	Если Свойства = Неопределено Тогда
		
		ОписаниеТипов = одОписаниеТипа(Тип);
		Возврат ОписаниеТипов.ПривестиЗначение(Стр);
		
	КонецЕсли;

	Если ПустаяСтрока(Свойство) Тогда
		
		Если Свойства.ИмяТипа = "Перечисление" Тогда
			Свойство = "Имя";
		Иначе
			Свойство = "{ИмяПредопределенногоЭлемента}";
		КонецЕсли;
		
	КонецЕсли; 

	Возврат одНайтиОбъектПоСвойству(Свойства.Менеджер, Свойство, Стр);

КонецФункции // одПолучитьЗначениеПоСтроке()

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип)

	ТипЗначения	= ТипЗнч(ЗначениеИлиТип);
	
	Если ТипЗначения = ТипТип Тогда
		ТипЗначения	= ЗначениеИлиТип;
	КонецЕсли; 
	
	Если (ТипЗначения = Неопределено) Или (ЗначениеИлиТип = Неопределено) Тогда
		Результат = "";
	ИначеЕсли ТипЗначения = ТипСтрока Тогда
		Результат = "Строка";
	ИначеЕсли ТипЗначения = ТипЧисло Тогда
		Результат = "Число";
	ИначеЕсли ТипЗначения = ТипДата Тогда
		Результат = "Дата";
	ИначеЕсли ТипЗначения = ТипБулево Тогда
		Результат = "Булево";
	ИначеЕсли ТипЗначения = ТипХранилищеЗначения Тогда
		Результат = "ХранилищеЗначения";
	ИначеЕсли ТипЗначения = ТипУникальныйИдентификатор Тогда
		Результат = "УникальныйИдентификатор";
	ИначеЕсли ТипЗначения = ТипВидДвиженияНакопления Тогда
		Результат = "ВидДвиженияНакопления";
	Иначе
		Менеджер = Менеджеры[ТипЗначения];
		Если Менеджер = Неопределено Тогда
		Иначе
			Результат = Менеджер.ТипСсылкиСтрокой;
		КонецЕсли; 
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // одТипЗначенияСтрокой()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЗапись

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт 

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);

	Возврат ЗаписьXML;

КонецФункции // СоздатьУзел()

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	УзелРодитель.ЗаписатьНачалоЭлемента(Имя);

	Возврат УзелРодитель;

КонецФункции // ДобавитьУзел()

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Стр = Узел.Закрыть();

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписьXML.ЗаписатьБезОбработки(Стр);

	Возврат ЗаписьXML;
	
КонецФункции 

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	Объект.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	Объект.ЗаписатьТекст(Стр);
	Объект.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // одЗаписатьЭлемент() 

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	Если ТипЗнч(Узел) <> ТипСтрока Тогда
		Узел.ЗаписатьКонецЭлемента();
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	УзелРодитель.ЗаписатьБезОбработки(ИнформацияДляЗаписиВФайл);
		
КонецПроцедуры // ДобавитьПодчиненный() 

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	СтрокаЗаписи = XMLСтрока(Значение);
	
	Узел.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры // УстановитьАтрибут()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя)

	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СтрЗначение);		
	ИначеЕсли      Тип = ТипСтрока Тогда
		Возврат ""; 
	ИначеЕсли Тип = ТипБулево Тогда
		Возврат Ложь;
	ИначеЕсли Тип = ТипЧисло Тогда
		Возврат 0;
	ИначеЕсли Тип = ТипДата Тогда
		Возврат ЗначениеПустаяДата;
	КонецЕсли; 
	
КонецФункции // одАтрибут() 
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя="")

	КолвоВложений = 0; // количество одноименных вложений

	Если Имя = "" Тогда
		
		Имя = Объект.ЛокальноеИмя;
		
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		
		Если Объект.ЛокальноеИмя <> Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = Объект.ТипУзла;
			
		Если ТипУзла = ТипУзлаXMLКонецЭлемента Тогда
				
			Если КолвоВложений = 0 Тогда
					
				Прервать;
					
			Иначе
					
				КолвоВложений = КолвоВложений - 1;
					
			КонецЕсли;
				
		ИначеЕсли ТипУзла = ТипУзлаXMLНачалоЭлемента Тогда
				
			КолвоВложений = КолвоВложений + 1;
				
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина)

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = ТипУзлаXMLТекст Тогда
			
			Значение = Объект.Значение;
			
			Если ОбрезатьСтрокуСправа Тогда
				
				Значение = СокрП(Значение);
				
			КонецЕсли;
						
		ИначеЕсли (Объект.ЛокальноеИмя = Имя) И (ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если (Тип = ТипСтрока)
		ИЛИ (Тип = ТипБулево)
		ИЛИ (Тип = ТипЧисло)
		ИЛИ (Тип = ТипДата)
		ИЛИ (Тип = ТипХранилищеЗначения)
		ИЛИ (Тип = ТипУникальныйИдентификатор)
		ИЛИ (Тип = ТипВидДвиженияНакопления)
		ИЛИ (Тип = ТипВидСчета)
		Тогда
		
		Возврат XMLЗначение(Тип, Значение);
		
	Иначе
		
		Возврат одПолучитьЗначениеПоСтроке(Значение, Тип, ИскатьПоСвойству);
		
	КонецЕсли; 
	
КонецФункции // одЗначениеЭлемента() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел)

	Если ТипЗнч(Узел) <> ТипСтрока Тогда
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	ФайлОбмена.ЗаписатьСтроку(ИнформацияДляЗаписиВФайл);
	
КонецПроцедуры // ЗаписатьВФайл()

// Открывает файл обмена, записывает заголовок файла в соответствие с форматом обмена
//
// Параметры:
//  Нет.
//
Функция ОткрытьФайлВыгрузки(СтрокаСообщенияОбОшибке = "")

	ФайлОбмена = Новый ЗаписьТекста;
	Попытка
		ФайлОбмена.Открыть(ИмяФайлаОбмена, КодировкаТекста.UTF8);
	Исключение
		
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(8);
		Возврат "";
		
	КонецПопытки;
	
	СтрокаИнформацииОXML = "<?xml version=""1.0"" encoding=""UTF-8""?>";
	
	ФайлОбмена.ЗаписатьСтроку(СтрокаИнформацииОXML);

	ВременныйЗаписьXML = Новый ЗаписьXML();
	
	ВременныйЗаписьXML.УстановитьСтроку();
	
	ВременныйЗаписьXML.ЗаписатьНачалоЭлемента("ФайлОбмена");
	
	УстановитьАтрибут(ВременныйЗаписьXML, "ВерсияФормата", 				ВерсияФорматаСообщенияОбмена());
	УстановитьАтрибут(ВременныйЗаписьXML, "ДатаВыгрузки",				ТекущаяДата());
	УстановитьАтрибут(ВременныйЗаписьXML, "ИмяКонфигурацииИсточника",	Конвертация.Источник);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИмяКонфигурацииПриемника",	Конвертация.Приемник);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИдПравилКонвертации",		Конвертация.Ид);
	
	ВременныйЗаписьXML.ЗаписатьКонецЭлемента();
	
	Стр = ВременныйЗаписьXML.Закрыть();
	
	Стр = СтрЗаменить(Стр, "/>", ">");
	
	ФайлОбмена.ЗаписатьСтроку(Стр);
	
	Возврат СтрокаИнформацииОXML + Символы.ПС + Стр;
	
КонецФункции

// Закрывает файл обмена
//
// Параметры:
//  Нет.
//
Процедура ЗакрытьФайл()
	
	ФайлОбмена.ЗаписатьСтроку("</ФайлОбмена>");
	ФайлОбмена.Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОТОКОЛОМ ОБМЕНА

// Возвращает объект типа структура, содержащий все возможные поля
// записи протокола выполнения (сообщения об ошибках и т.п.)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Объект типа структура
// 
Функция ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках = "", Знач СтрокаОшибки = "")

	СтруктураОшибки = Новый Структура("ИмяПКО,ИмяПОД,Нпп,ГНпп,Источник,ТипОбъекта,Свойство,Значение,ТипЗначения,ПКО,ПКС,ПКГС,ПВД,ПОД,Объект,СвойствоПриемника,КонвертируемоеЗначение,Обработчик,ОписаниеОшибки,ПозицияМодуля,Текст,КСообщенияОбОшибках,УзелПланаОбмена");
	
	СтрокаМодуля              = ОтделитьРазделителем(СтрокаОшибки, "{");
	ОписаниеОшибки            = ОтделитьРазделителем(СтрокаМодуля, "}: ");
	
	Если ОписаниеОшибки <> "" Тогда
		
		СтруктураОшибки.ОписаниеОшибки         = ОписаниеОшибки;
		СтруктураОшибки.ПозицияМодуля          = СтрокаМодуля;
				
	КонецЕсли;
	
	Если СтруктураОшибки.КСообщенияОбОшибках <> "" Тогда
		
		СтруктураОшибки.КСообщенияОбОшибках           = КСообщенияОбОшибках;
		
	КонецЕсли;
	
	Возврат СтруктураОшибки;
	
КонецФункции 

Процедура ИнициализироватьВедениеПротоколаОбмена()
	
	Если ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
		ФайлПротоколаДанных = Неопределено;
		ФлагКомментироватьОбработкуОбъектов = ВыводВОкноСообщенийИнформационныхСообщений;		
		Возврат;
		
	Иначе	
		
		ФлагКомментироватьОбработкуОбъектов = ВыводВПротоколИнформационныхСообщений ИЛИ ВыводВОкноСообщенийИнформационныхСообщений;		
		
	КонецЕсли;
	
	ФайлПротоколаДанных = Новый ЗаписьТекста(ИмяФайлаПротоколаОбмена, КодировкаТекста.ANSI, , ДописыватьДанныеВПротоколОбмена) ;
	
КонецПроцедуры

Процедура ЗавершитьВедениеПротоколаОбмена()
	
	Если ФайлПротоколаДанных <> Неопределено Тогда
		
		ФайлПротоколаДанных.Закрыть();
				
	КонецЕсли;	
	
	ФайлПротоколаДанных = Неопределено;
	
КонецПроцедуры

Процедура УстановитьРезультатВыполненияОбмена(РезультатВыполненияОбмена)
	
	ИндексТекущегоРезультата = ПриоритетыРезультатовОбмена().Найти(РезультатВыполненияОбмена());
	ИндексНовогоРезультата   = ПриоритетыРезультатовОбмена().Найти(РезультатВыполненияОбмена);
	
	Если ИндексТекущегоРезультата = Неопределено Тогда
		ИндексТекущегоРезультата = 100
	КонецЕсли;
	
	Если ИндексНовогоРезультата = Неопределено Тогда
		ИндексНовогоРезультата = 100
	КонецЕсли;
	
	Если ИндексНовогоРезультата < ИндексТекущегоРезультата Тогда
		
		ПолеРезультатВыполненияОбмена = РезультатВыполненияОбмена;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РезультатВыполненияОбменаОшибка(РезультатВыполненияОбмена)
	
	Возврат РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Ошибка_ТранспортСообщения;
	
КонецФункции

Функция РезультатВыполненияОбменаПредупреждение(РезультатВыполненияОбмена)
	
	Возврат РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято;
	
КонецФункции

// Сохраняет в протокол выполнения (или выводит на экран) сообщения указанной структуры
//
// Параметры:
//  Код               - Число. Код сообщения
//  СтруктураЗаписи   - Структура. Структура записи протокола
//  ВзвестиФлагОшибок - Если истина, то - это сообщение об ошибке. Взводится ФлагОшибки
// 
Функция ЗаписатьВПротоколВыполнения(Код = "",
									СтруктураЗаписи=Неопределено,
									ВзвестиФлагОшибок=Истина,
									Уровень=0,
									Выравнивание=22,
									БезусловнаяЗаписьВПротоколОбмена = Ложь,
									Знач РезультатВыполненияОбмена = Неопределено)
	//
	Отступ = "";
	Для Сч = 0 По Уровень-1 Цикл
		Отступ = Отступ + Символы.Таб;
	КонецЦикла; 
	
	Если ТипЗнч(Код) = ТипЧисло Тогда
		
		Если СообщенияОбОшибках = Неопределено Тогда
			ИнициализацияСообщений();
		КонецЕсли;
		
		Стр = СообщенияОбОшибках[Код];
		
	Иначе
		
		Стр = Строка(Код);
		
	КонецЕсли;

	Стр = Отступ + Стр;
	
	Если СтруктураЗаписи <> Неопределено Тогда
		
		Для каждого Поле Из СтруктураЗаписи Цикл
			
			Значение = Поле.Значение;
			Если Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Ключ = Поле.Ключ;
			Стр  = Стр + Символы.ПС + Отступ + Символы.Таб + одДополнитьСтроку(Поле.Ключ, Выравнивание) + " =  " + Строка(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЛитералПеревода = ?(ПустаяСтрока(СтрокаСообщенияОбОшибке()), "", Символы.ПС);
	
	ПолеСтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке() + ЛитералПеревода + Стр;
	
	Если ВзвестиФлагОшибок Тогда
		
		УстановитьФлагОшибки();
		
		РезультатВыполненияОбмена = ?(РезультатВыполненияОбмена = Неопределено,
										Перечисления.РезультатыВыполненияОбмена.Ошибка,
										РезультатВыполненияОбмена);
		//
	КонецЕсли;
	
	УстановитьРезультатВыполненияОбмена(РезультатВыполненияОбмена);
	
	Если ФайлПротоколаДанных <> Неопределено Тогда
		
		Если ВзвестиФлагОшибок Тогда
			
			ФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + "Ошибка!!!");
			
		КонецЕсли;
		
		Если ВзвестиФлагОшибок ИЛИ БезусловнаяЗаписьВПротоколОбмена ИЛИ ВыводВПротоколИнформационныхСообщений Тогда
			
			ФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + СтрокаСообщенияОбОшибке());
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполненияОбменаОшибка(РезультатВыполненияОбмена) Тогда
		
		УровеньЖР = УровеньЖурналаРегистрации.Ошибка;
		
	ИначеЕсли РезультатВыполненияОбменаПредупреждение(РезультатВыполненияОбмена) Тогда
		
		УровеньЖР = УровеньЖурналаРегистрации.Предупреждение;
		
	Иначе
		
		УровеньЖР = УровеньЖурналаРегистрации.Информация;
		
	КонецЕсли;
	
	// фиксируем событие в журнале регистрации
	ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщенияОбОшибке(), УровеньЖР);
	
	Возврат СтрокаСообщенияОбОшибке();
	
КонецФункции

Функция ЗаписатьИнформациюОбОшибкеВПротокол(КСообщенияОбОшибках, СтрокаОшибки, Объект, ТипОбъекта = Неопределено)
	
	ЗП         = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.Объект  = Объект;
	
	Если ТипОбъекта <> Неопределено Тогда
		ЗП.ТипОбъекта     = ТипОбъекта;
	КонецЕсли;	
		
	СтрокаОшибки = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);	
	
	Возврат СтрокаОшибки;
	
КонецФункции

Процедура ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(КСообщенияОбОшибках, СтрокаОшибки, ИмяПравилаОчисткиДанных, Объект = "", ИмяОбработчика = "")
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПОД                    = ИмяПравилаОчисткиДанных;
	
	Если Объект <> "" Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
	КонецЕсли;
	
	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик             = ИмяОбработчика;
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(КСообщенияОбОшибках, СтрокаОшибки, ИмяПравила, Источник = "", 
	ТипОбъекта, Объект = Неопределено, ИмяОбработчика)
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ИмяПКО                 = ИмяПравила;
	ЗП.ТипОбъекта             = ТипОбъекта;
	ЗП.Обработчик             = ИмяОбработчика;
						
	Если Не ПустаяСтрока(Источник) Тогда
							
		ЗП.Источник           = Источник;
							
	КонецЕсли;
						
	Если Объект <> Неопределено Тогда
	
		ЗП.Объект                 = Строка(Объект);
		
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(КСообщенияОбОшибках, СтрокаОшибки, ПКО, Источник = "", ИмяОбработчика)
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	
	Попытка
		ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
	Исключение
		ЗП.Объект                 = "(" + ТипЗнч(Источник) + ")";
	КонецПопытки;
	
	ЗП.Обработчик             = ИмяОбработчика;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КСообщенияОбОшибках, СтрокаОшибки, ПКО, ПКС, Источник = "", 
	ИмяОбработчика = "", Значение = Неопределено)
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	ЗП.ПКС                    = ПКС.Имя + "  (" + ПКС.Наименование + ")";
	
	Попытка
		ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
	Исключение
		ЗП.Объект                 = "(" + ТипЗнч(Источник) + ")";
	КонецПопытки;
	
	ЗП.СвойствоПриемника      = ПКС.Приемник + "  (" + ПКС.ТипПриемника + ")";
	
	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик         = ИмяОбработчика;
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		ЗП.КонвертируемоеЗначение = Строка(Значение) + "  (" + ТипЗнч(Значение) + ")";
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
		
КонецПроцедуры	

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПВД(КСообщенияОбОшибках, СтрокаОшибки, ИмяПравила, Объект = Неопределено, ИмяОбработчика)
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.ПВД                    = ИмяПравила;
	
	Если Объект <> Неопределено Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
	КонецЕсли;
	
	ЗП.Обработчик             = ИмяОбработчика;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(КСообщенияОбОшибках, СтрокаОшибки, ИмяОбработчика)
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках, СтрокаОшибки);
	ЗП.Обработчик             = ИмяОбработчика;
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП);
	Возврат СтрокаСообщенияОбОшибке;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ПРАВИЛ ОБМЕНА

// Осуществляет загрузку правила конвертации группы свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
// 
Процедура ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств, СвойстваОтключенные, СинхронизироватьПоИдентификатору)
	
	ЭтоПолеОтключено = одАтрибут(ПравилаОбмена, ТипБулево, "Отключить");
	
	Если ЭтоПолеОтключено Тогда
		
		НоваяСтрока = СвойстваОтключенные.Добавить();
		
	Иначе
		
		НоваяСтрока = ТаблицаСвойств.Добавить();
		
	КонецЕсли;
	
	НоваяСтрока.ЭтоГруппа     = Истина;
	
	НоваяСтрока.ПравилаГруппы            = ТаблицаПравилКонвертацииСвойств.Скопировать();
	НоваяСтрока.ПравилаГруппыОтключенные = ТаблицаПравилКонвертацииСвойств.Скопировать();
	
	// Значения по умолчанию
	НоваяСтрока.НеЗамещать               = Ложь;
	НоваяСтрока.ПолучитьИзВходящихДанных = Ложь;
	НоваяСтрока.УпрощеннаяВыгрузкаСвойства = Ложь;
	
	СтрокаПолейПоиска = "";
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Свойство" Тогда
			
			ЗагрузитьПКС(ПравилаОбмена, НоваяСтрока.ПравилаГруппы,, НоваяСтрока.ПравилаГруппыОтключенные, СтрокаПолейПоиска, СинхронизироватьПоИдентификатору);

		ИначеЕсли ИмяУзла = "ПередОбработкойВыгрузки" Тогда
			НоваяСтрока.ПередОбработкойВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередОбработкойВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПередОбработкойВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиВыгрузки" Тогда
			НоваяСтрока.ПослеОбработкиВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеОбработкиВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПослеОбработкиВыгрузки);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока.СтрокаПолейПоиска = СтрокаПолейПоиска;
	
	НоваяСтрока.НуженУзелXMLПриВыгрузке = НоваяСтрока.ЕстьОбработчикПриВыгрузке ИЛИ НоваяСтрока.ЕстьОбработчикПослеВыгрузки;
	
	НоваяСтрока.НуженУзелXMLПриВыгрузкеГруппы = НоваяСтрока.ЕстьОбработчикПослеОбработкиВыгрузки; 

КонецПроцедуры

Процедура ДобавитьПолеКСтрокеПоиска(СтрокаПолейПоиска, ИмяПоля)
	
	Если ПустаяСтрока(ИмяПоля) ТОгда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаПолейПоиска) Тогда
		СтрокаПолейПоиска = СтрокаПолейПоиска + ",";
	КонецЕсли;
	
	СтрокаПолейПоиска = СтрокаПолейПоиска + ИмяПоля;
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьПКС( ПравилаОбмена,
						ТаблицаСвойств,
						ТаблицаПоиска = Неопределено,
						СвойстваОтключенные,
						СтрокаПолейПоиска = "",
						СинхронизироватьПоИдентификатору = Ложь)
	//
	
	ЭтоПолеОтключено        = одАтрибут(ПравилаОбмена, ТипБулево, "Отключить");
	ЭтоПолеПоиска           = одАтрибут(ПравилаОбмена, ТипБулево, "Поиск");
	ЭтоОбязательноеСвойство = одАтрибут(ПравилаОбмена, ТипБулево, "Обязательное");
	
	Если ЭтоПолеОтключено Тогда
		
		НоваяСтрока = СвойстваОтключенные.Добавить();
		
	ИначеЕсли ЭтоОбязательноеСвойство И ТаблицаПоиска <> Неопределено Тогда
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		
	ИначеЕсли СинхронизироватьПоИдентификатору Тогда
		
		НоваяСтрока = ТаблицаСвойств.Добавить();
		
	ИначеЕсли ЭтоПолеПоиска И ТаблицаПоиска <> Неопределено Тогда
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		
	Иначе
		
		НоваяСтрока = ТаблицаСвойств.Добавить();
		
	КонецЕсли;
	
	// Значения по умолчанию
	НоваяСтрока.НеЗамещать               = Ложь;
	НоваяСтрока.ПолучитьИзВходящихДанных = Ложь;
	НоваяСтрока.ЭтоОбязательноеСвойство  = ЭтоОбязательноеСвойство;
	НоваяСтрока.ЭтоПолеПоиска            = ЭтоПолеПоиска;
		
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, ТипСтрока, "Тип");
			
			// заполняем переменную "СтрокаПолейПоиска" для поиска по всем реквизитам в ТЧ для которых есть ПКС
			ДобавитьПолеКСтрокеПоиска(СтрокаПолейПоиска, НоваяСтрока.Приемник);
			
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			
		ИначеЕсли ИмяУзла = "ПриводитьКДлине" Тогда
			НоваяСтрока.ПриводитьКДлине = одЗначениеЭлемента(ПравилаОбмена, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "ИмяПараметраДляПередачи" Тогда
			НоваяСтрока.ИмяПараметраДляПередачи = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПоискПоДатеНаРавенство" Тогда
			НоваяСтрока.ПоискПоДатеНаРавенство = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			
		ИначеЕсли (ИмяУзла = "Свойство") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока.УпрощеннаяВыгрузкаСвойства = НЕ НоваяСтрока.ПолучитьИзВходящихДанных
		И НЕ НоваяСтрока.ЕстьОбработчикПередВыгрузкой
		И НЕ НоваяСтрока.ЕстьОбработчикПриВыгрузке
		И НЕ НоваяСтрока.ЕстьОбработчикПослеВыгрузки
		И ПустаяСтрока(НоваяСтрока.ПравилоКонвертации)
		И НоваяСтрока.ТипИсточника = НоваяСтрока.ТипПриемника
		И (НоваяСтрока.ТипИсточника = "Строка" ИЛИ НоваяСтрока.ТипИсточника = "Число" ИЛИ НоваяСтрока.ТипИсточника = "Булево" ИЛИ НоваяСтрока.ТипИсточника = "Дата");
		
	НоваяСтрока.НуженУзелXMLПриВыгрузке = НоваяСтрока.ЕстьОбработчикПриВыгрузке ИЛИ НоваяСтрока.ЕстьОбработчикПослеВыгрузки;
	
КонецПроцедуры

// Осуществляет загрузку правил конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьСвойства(ПравилаОбмена,
							ТаблицаСвойств,
							ТаблицаПоиска,
							СвойстваОтключенные,
							Знач СинхронизироватьПоИдентификатору = Ложь)
	//
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Свойство" Тогда
			
			ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска, СвойстваОтключенные,, СинхронизироватьПоИдентификатору);
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств, СвойстваОтключенные, СинхронизироватьПоИдентификатору);
			
		ИначеЕсли (ИмяУзла = "Свойства") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСвойств.Сортировать("Порядок");
	ТаблицаПоиска.Сортировать("Порядок");
	СвойстваОтключенные.Сортировать("Порядок");
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьПКЗ(ПравилаОбмена, Значения, ТипИсточника)
	
	Источник = "";
	Приемник = "";
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Источник" Тогда
			Источник = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			Приемник = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		ИначеЕсли (ИмяУзла = "Значение") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Значения[одПолучитьЗначениеПоСтроке(Источник, ТипИсточника)] = Приемник;
	
КонецПроцедуры // ЗагрузитьПКЗ()

// Осуществляет загрузку правил конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьЗначения(ПравилаОбмена, Значения, ТипИсточника);

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Значение" Тогда
			ЗагрузитьПКЗ(ПравилаОбмена, Значения, ТипИсточника);
		ИначеЕсли (ИмяУзла = "Значения") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилоКонвертации(ПравилаОбмена, ЗаписьXML)

	ЗаписьXML.ЗаписатьНачалоЭлемента("Правило");

	НоваяСтрока = ТаблицаПравилКонвертации.Добавить();
	
	// Значения по умолчанию
	
	НоваяСтрока.ЗапоминатьВыгруженные = Истина;
	НоваяСтрока.НеЗамещать            = Ложь;
	НоваяСтрока.ПриоритетОбъектовОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
	
	ПоискПоТабличнымЧастям = Новый ТаблицаЗначений;
	ПоискПоТабличнымЧастям.Колонки.Добавить("ИмяЭлемента");
	ПоискПоТабличнымЧастям.Колонки.Добавить("МассивКлючевыхПолейПоиска");
	ПоискПоТабличнымЧастям.Колонки.Добавить("КлючевыеПоляПоиска");
	ПоискПоТабличнымЧастям.Колонки.Добавить("Валидное", одОписаниеТипа("Булево"));
	
	НоваяСтрока.ПоискПоТабличнымЧастям = ПоискПоТабличнымЧастям;		
	
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
				
		Если      ИмяУзла = "Код" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.Имя = Значение;
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "СинхронизироватьПоИдентификатору" Тогда
			
			НоваяСтрока.СинхронизироватьПоИдентификатору = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.СинхронизироватьПоИдентификатору);
			
		ИначеЕсли ИмяУзла = "НеСоздаватьЕслиНеНайден" Тогда
			
			НоваяСтрока.НеСоздаватьЕслиНеНайден = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);			
			
		ИначеЕсли ИмяУзла = "РегистрироватьОбъектНаУзлеОтправителе" Тогда // не поддерживается
			
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСвойствПоСсылкам" Тогда
			
			НоваяСтрока.НеВыгружатьОбъектыСвойствПоСсылкам = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
						
		ИначеЕсли ИмяУзла = "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли" Тогда
			
			НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли);
			
		ИначеЕсли ИмяУзла = "ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD" Тогда
			
			НоваяСтрока.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD);
			
		ИначеЕсли ИмяУзла = "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике" Тогда
			
			НоваяСтрока.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике);		
			
		ИначеЕсли ИмяУзла = "ИспользоватьБыстрыйПоискПриЗагрузке" Тогда
			
			НоваяСтрока.ИспользоватьБыстрыйПоискПриЗагрузке = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);	
			
		ИначеЕсли ИмяУзла = "ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки" Тогда
			
			НоваяСтрока.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
						
		ИначеЕсли ИмяУзла = "ГенерироватьНовыйНомерИлиКодЕслиНеУказан" Тогда
			
			НоваяСтрока.ГенерироватьНовыйНомерИлиКодЕслиНеУказан = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ГенерироватьНовыйНомерИлиКодЕслиНеУказан);
						
		ИначеЕсли ИмяУзла = "НеЗапоминатьВыгруженные" Тогда
			
			НоваяСтрока.ЗапоминатьВыгруженные = Не одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.НеЗамещать = Значение;
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
			НоваяСтрока.Приемник     = Значение;
			НоваяСтрока.ТипПриемника = Значение;
			
		ИначеЕсли ИмяУзла = "Источник" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
			НоваяСтрока.ТипИсточника = Значение;
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.Источник = Значение;
				
			Иначе
				
				Если Не ПустаяСтрока(Значение) Тогда
					
					Если Не РежимЗагрузкиИнформацииОПравилахОбмена Тогда
						
						Попытка
							
							НоваяСтрока.Источник = Тип(Значение);
							
							Менеджеры[НоваяСтрока.Источник].ПКО = НоваяСтрока;
							
						Исключение
							
							ЗаписатьИнформациюОбОшибкеВПротокол(11, ОписаниеОшибки(), Строка(НоваяСтрока.Источник));
							
						КонецПопытки;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		// Свойства
		
		ИначеЕсли ИмяУзла = "Свойства" Тогда
		
			НоваяСтрока.Свойства            = ТаблицаПравилКонвертацииСвойств.Скопировать();
			НоваяСтрока.СвойстваПоиска      = ТаблицаПравилКонвертацииСвойств.Скопировать();
			НоваяСтрока.СвойстваОтключенные = ТаблицаПравилКонвертацииСвойств.Скопировать();
			
			Если НоваяСтрока.СинхронизироватьПоИдентификатору = Истина Тогда
				
				СвойствоПоискаУИ = НоваяСтрока.СвойстваПоиска.Добавить();
				СвойствоПоискаУИ.Имя      = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.Источник = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.Приемник = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.ЭтоОбязательноеСвойство = Истина;
				
			КонецЕсли;
			
			ЗагрузитьСвойства(ПравилаОбмена, НоваяСтрока.Свойства, НоваяСтрока.СвойстваПоиска, НоваяСтрока.СвойстваОтключенные, НоваяСтрока.СинхронизироватьПоИдентификатору);
			
		// Значения
		ИначеЕсли ИмяУзла = "Значения" Тогда
		
			ЗагрузитьЗначения(ПравилаОбмена, НоваяСтрока.Значения, НоваяСтрока.Источник);

			
		// Обработчики событий
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
		
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиВФайл" Тогда
			
			НоваяСтрока.ПослеВыгрузкиВФайл = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузкиВФайл  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузкиВФайл);
			
		// Для загрузки
		
		ИначеЕсли ИмяУзла = "ПередЗагрузкой" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПередЗагрузкой               = Значение;
				НоваяСтрока.ЕстьОбработчикПередЗагрузкой = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПриЗагрузке" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПриЗагрузке               = Значение;
				НоваяСтрока.ЕстьОбработчикПриЗагрузке = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузки" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПослеЗагрузки               = Значение;
				НоваяСтрока.ЕстьОбработчикПослеЗагрузки = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПоследовательностьПолейПоиска" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПоследовательностьПолейПоиска               = Значение;
				НоваяСтрока.ЕстьОбработчикПоследовательностьПолейПоиска = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПриоритетОбъектовОбмена" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Если Значение = "Ниже" Тогда
				НоваяСтрока.ПриоритетОбъектовОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже;
			ИначеЕсли Значение = "Совпадает" Тогда
				НоваяСтрока.ПриоритетОбъектовОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает;
			КонецЕсли;
			
		//настройки вариантов поиска		
		ИначеЕсли ИмяУзла = "НастройкаВариантовПоискаОбъектов" Тогда
		
			ЗагрузитьНастройкиВариантовПоиска(ПравилаОбмена, НоваяСтрока);
			
		ИначеЕсли ИмяУзла = "ПоискПоТабличнымЧастям" Тогда
			
			// загружаем информацию по ключевым полям поиска в табличных частях
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Для Номер = 1 По СтрЧислоСтрок(Значение) Цикл
				
				ТекущаяСтрока = СтрПолучитьСтроку(Значение, Номер);
				
				СтрокаПоиска = ОтделитьРазделителем(ТекущаяСтрока, ":");
				
				СтрокаТаблицы = НоваяСтрока.ПоискПоТабличнымЧастям.Добавить();
				
				СтрокаТаблицы.ИмяЭлемента               = ТекущаяСтрока;
				СтрокаТаблицы.КлючевыеПоляПоиска        = СтрокаПоиска;
				СтрокаТаблицы.МассивКлючевыхПолейПоиска = ПолучитьМассивИзСтроки(СтрокаПоиска);
				СтрокаТаблицы.Валидное                  = СтрокаТаблицы.МассивКлючевыхПолейПоиска.Количество() <> 0;
				
			КонецЦикла;
			
		ИначеЕсли ИмяУзла = "ПоляПоиска" Тогда
			
			НоваяСтрока.ПоляПоиска = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПоляТаблицы" Тогда
			
			НоваяСтрока.ПоляТаблицы = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
		
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если РежимОбмена <> "Загрузка" Тогда
		
		// ПОЛУЧАЕМ СВОЙСТВА ПОИСКА ПОЛЕЙ ТЧ ДЛЯ ПРАВИЛ ЗАГРУЗКИ ДАННЫХ (ЗаписьXML)
		
		ИтоговаяСтрокаПоискаПоТЧ = "";
		
		// в приемник нужно передать информацию о полях поиска для табличных частей
		Для Каждого СтрокаСвойств Из НоваяСтрока.Свойства Цикл
			
			Если Не СтрокаСвойств.ЭтоГруппа
				ИЛИ ПустаяСтрока(СтрокаСвойств.ВидПриемника)
				ИЛИ ПустаяСтрока(СтрокаСвойств.Приемник) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаСвойств.СтрокаПолейПоиска) Тогда
				Продолжить;
			КонецЕсли;
			
			ИтоговаяСтрокаПоискаПоТЧ = ИтоговаяСтрокаПоискаПоТЧ + Символы.ПС + СтрокаСвойств.ВидПриемника + "." + СтрокаСвойств.Приемник + ":" + СтрокаСвойств.СтрокаПолейПоиска;
			
		КонецЦикла;
		
		ИтоговаяСтрокаПоискаПоТЧ = СокрЛП(ИтоговаяСтрокаПоискаПоТЧ);
		
		Если Не ПустаяСтрока(ИтоговаяСтрокаПоискаПоТЧ) Тогда
			
			одЗаписатьЭлемент(ЗаписьXML, "ПоискПоТабличнымЧастям", ИтоговаяСтрокаПоискаПоТЧ);
			
		КонецЕсли;
		
		// ПОЛУЧАЕМ ПОЛЯ ТАБЛИЦЫ И ПОЛЯ ПОИСКА ДЛЯ ПРАВИЛ ЗАГРУЗКИ ДАННЫХ (ЗаписьXML)
		
		СвойстваМассив = НоваяСтрока.Свойства.Скопировать(Новый Структура("ЭтоГруппа, ИмяПараметраДляПередачи", Ложь, ""), "Приемник").ВыгрузитьКолонку("Приемник");
		
		СвойстваПоискаМассив               = НоваяСтрока.СвойстваПоиска.Скопировать(Новый Структура("ЭтоГруппа, ИмяПараметраДляПередачи", Ложь, ""), "Приемник").ВыгрузитьКолонку("Приемник");
		СвойстваПоискаМассивДополнительный = НоваяСтрока.Свойства.Скопировать(Новый Структура("ЭтоПолеПоиска, ИмяПараметраДляПередачи", Истина, ""), "Приемник").ВыгрузитьКолонку("Приемник");
		
		Для каждого Значение Из СвойстваПоискаМассивДополнительный Цикл
			
			СвойстваПоискаМассив.Добавить(Значение);
			
		КонецЦикла;
		
		// удаляем из массива полей поиска значение {УникальныйИдентификатор}
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(СвойстваПоискаМассив, "{УникальныйИдентификатор}");
		
		// получаем значение переменной СвойстваМассив
		ТаблицаПоляТаблицы = Новый ТаблицаЗначений;
		ТаблицаПоляТаблицы.Колонки.Добавить("Приемник");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаПоляТаблицы, СвойстваМассив, "Приемник");
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицуИзМассива(ТаблицаПоляТаблицы, СвойстваПоискаМассив, "Приемник");
		
		ТаблицаПоляТаблицы.Свернуть("Приемник");
		СвойстваМассив = ТаблицаПоляТаблицы.ВыгрузитьКолонку("Приемник");
		
		ПоляТаблицы = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СвойстваМассив);
		ПоляПоиска  = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СвойстваПоискаМассив);
		
		Если Не ПустаяСтрока(ПоляТаблицы) Тогда
			одЗаписатьЭлемент(ЗаписьXML, "ПоляТаблицы", ПоляТаблицы);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ПоляПоиска) Тогда
			одЗаписатьЭлемент(ЗаписьXML, "ПоляПоиска", ПоляПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
	// закрываем узел
	ЗаписьXML.ЗаписатьКонецЭлемента(); // Правило
	
	// Быстрый доступ к ПКО по имени
	Правила.Вставить(НоваяСтрока.Имя, НоваяСтрока);
	
КонецПроцедуры // ЗагрузитьПравилоКонвертации() 

Процедура ЗагрузитьНастройкуВариантовПоиска(ПравилаОбмена, НоваяСтрока)
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "ИмяНастройкиДляАлгоритма" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Если РежимЗагрузкиИнформацииОПравилахОбмена Тогда
				НоваяСтрока.ИмяНастройкиДляАлгоритма = Значение;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ИмяНастройкиДляПользователя" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Если РежимЗагрузкиИнформацииОПравилахОбмена Тогда
				НоваяСтрока.ИмяНастройкиДляПользователя = Значение;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ОписаниеНастройкиДляПользователя" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Если РежимЗагрузкиИнформацииОПравилахОбмена Тогда
				НоваяСтрока.ОписаниеНастройкиДляПользователя = Значение;
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "ВариантПоиска") И (ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиВариантовПоиска(ПравилаОбмена, СтрокаБазовогоПКО)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "ВариантПоиска" Тогда
			
			Если РежимЗагрузкиИнформацииОПравилахОбмена Тогда
				СтрокаНастройки = ТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска.Добавить();
				СтрокаНастройки.КодПравилаОбмена = СтрокаБазовогоПКО.Имя;
				СтрокаНастройки.НаименованиеПравилаОбмена = СтрокаБазовогоПКО.Наименование;
			Иначе
				СтрокаНастройки = Неопределено;
			КонецЕсли;
			
			ЗагрузитьНастройкуВариантовПоиска(ПравилаОбмена, СтрокаНастройки);
			
		ИначеЕсли (ИмяУзла = "НастройкаВариантовПоискаОбъектов") И (ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правил конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаКонвертации(ПравилаОбмена, ЗаписьXML)

	ТаблицаПравилКонвертации.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаКонвертацииОбъектов");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоКонвертации(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли (ИмяУзла = "ПравилаКонвертацииОбъектов") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьПравилаКонвертации() 

// Осуществляет загрузку группы правил очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая группу правил очистки данных
// 
Процедура ЗагрузитьГруппуПОД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Включить  = Число(Не одАтрибут(ПравилаОбмена, ТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = ТипУзлаXMLНачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьГруппуПОД()

// Осуществляет загрузку правила очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая правило очистки данных
// 
Процедура ЗагрузитьПОД(ПравилаОбмена, НоваяСтрока)
	
	НоваяСтрока.Включить = Число(Не одАтрибут(ПравилаОбмена, ТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Код" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			НоваяСтрока.Имя = Значение;

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			
			Если Не РежимЗагрузкиИнформацииОПравилахОбмена Тогда
			
				ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
				Если Не ПустаяСтрока(ОбъектВыборки) Тогда
					НоваяСтрока.ОбъектВыборки = Тип(ОбъектВыборки);
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ИмяУзла = "УдалятьЗаПериод" Тогда
			НоваяСтрока.УдалятьЗаПериод = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Непосредственно" Тогда
			НоваяСтрока.Непосредственно = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);

		
		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередУдалениемОбъекта" Тогда
			НоваяСтрока.ПередУдалением = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);

		// Выход
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПОД()

// Осуществляет загрузку правил очистки данных
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаОчистки(ПравилаОбмена, ЗаписьXML)

	ТаблицаПравилОчистки.Строки.Очистить();
	СтрокиДЗ = ТаблицаПравилОчистки.Строки;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОчисткиДанных");

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ТипУзла = ТипУзлаXMLНачалоЭлемента Тогда
			ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
			Если РежимОбмена <> "Загрузка" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ПравилаОбмена.Имя);
				Пока ПравилаОбмена.ПрочитатьАтрибут() Цикл
					ЗаписьXML.ЗаписатьАтрибут(ПравилаОбмена.Имя, ПравилаОбмена.Значение);
				КонецЦикла;
			Иначе
				Если ИмяУзла = "Правило" Тогда
					СтрокаДЗ = СтрокиДЗ.Добавить();
					ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
				ИначеЕсли ИмяУзла = "Группа" Тогда
					СтрокаДЗ = СтрокиДЗ.Добавить();
					ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипУзла = ТипУзлаXMLКонецЭлемента Тогда
			ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
			Если ИмяУзла = "ПравилаОчисткиДанных" Тогда
				Прервать;
			Иначе
				Если РежимОбмена <> "Загрузка" Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипУзла = ТипУзлаXMLТекст Тогда
			Если РежимОбмена <> "Загрузка" Тогда
				ЗаписьXML.ЗаписатьТекст(ПравилаОбмена.Значение);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьПравилаОчистки() 

// Осуществляет загрузку алгоритма в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьАлгоритм(ПравилаОбмена, ЗаписьXML)

	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, ТипБулево, "ИспользуетсяПриЗагрузке");
	Имя                     = одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Текст" Тогда
			Текст = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		ИначеЕсли (ИмяУзла = "Алгоритм") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		Иначе
			одПропустить(ПравилаОбмена);
		КонецЕсли;
		
	КонецЦикла;

	
	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			Алгоритмы.Вставить(Имя, Текст);
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритм");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
			одЗаписатьЭлемент(ЗаписьXML, "Текст", Текст);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если РежимОбмена <> "Загрузка" Тогда
			Алгоритмы.Вставить(Имя, Текст);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ЗагрузитьАлгоритм() 

// Осуществляет загрузку алгоритмов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьАлгоритмы(ПравилаОбмена, ЗаписьXML)

	Алгоритмы.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритмы");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		Если      ИмяУзла = "Алгоритм" Тогда
			ЗагрузитьАлгоритм(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Алгоритмы") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьАлгоритмы() 

// Осуществляет загрузку запроса в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьЗапрос(ПравилаОбмена, ЗаписьXML)

	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, ТипБулево, "ИспользуетсяПриЗагрузке");
	Имя                     = одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Текст" Тогда
			Текст = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		ИначеЕсли (ИмяУзла = "Запрос") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		Иначе
			одПропустить(ПравилаОбмена);
		КонецЕсли;
		
	КонецЦикла;

	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			Запрос	= Новый Запрос(Текст);
			Запросы.Вставить(Имя, Запрос);
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Запрос");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
			одЗаписатьЭлемент(ЗаписьXML, "Текст", Текст);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если РежимОбмена <> "Загрузка" Тогда
			Запрос	= Новый Запрос(Текст);
			Запросы.Вставить(Имя, Запрос);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапрос() 

// Осуществляет загрузку запросов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьЗапросы(ПравилаОбмена, ЗаписьXML)

	Запросы.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Запросы");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Запрос" Тогда
			ЗагрузитьЗапрос(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Запросы") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьЗапросы() 

// Осуществляет загрузку параметров в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПараметры(ПравилаОбмена, ЗаписьXML)

	Параметры.Очистить();
	СобытияПослеЗагрузкиПараметров.Очистить();
	ТаблицаНастройкиПараметров.Очистить();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Параметры");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;

		Если ИмяУзла = "Параметр" И ТипУзла = ТипУзлаXMLНачалоЭлемента Тогда
			
			//Загрузка по версии правил 2.01
			Имя                     = одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
			Наименование            = одАтрибут(ПравилаОбмена, ТипСтрока, "Наименование");
			УстанавливатьВДиалоге   = одАтрибут(ПравилаОбмена, ТипБулево, "УстанавливатьВДиалоге");
			СтрокаТипаЗначения      = одАтрибут(ПравилаОбмена, ТипСтрока, "ТипЗначения");
			ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, ТипБулево, "ИспользуетсяПриЗагрузке");
			ПередаватьПараметрПриВыгрузке = одАтрибут(ПравилаОбмена, ТипБулево, "ПередаватьПараметрПриВыгрузке");
			ПравилоКонвертации = одАтрибут(ПравилаОбмена, ТипСтрока, "ПравилоКонвертации");
			АлгоритмПослеЗагрузкиПараметра = одАтрибут(ПравилаОбмена, ТипСтрока, "ПослеЗагрузкиПараметра");
			
			Если Не Пустаястрока(АлгоритмПослеЗагрузкиПараметра) тогда
				
				СобытияПослеЗагрузкиПараметров.Вставить(Имя, АлгоритмПослеЗагрузкиПараметра);
				
			Конецесли;
			
			// Определяем типы значений и устанавливаем начальные значения
			Если Не ПустаяСтрока(СтрокаТипаЗначения) Тогда
				
				Попытка
					ТипЗначенияДанных = Тип(СтрокаТипаЗначения);
					ТипОпределен = ИСТИНА;
				Исключение
					ТипОпределен = ЛОЖЬ;
				КонецПопытки;
				
			Иначе
				
				ТипОпределен = ЛОЖЬ;
				
			КонецЕсли;
			
			Если ТипОпределен Тогда
				ЗначениеПараметра = одПолучитьПустоеЗначение(ТипЗначенияДанных);
				Параметры.Вставить(Имя, ЗначениеПараметра);
			Иначе
				ЗначениеПараметра = "";
				Параметры.Вставить(Имя);
			КонецЕсли;
						
			Если УстанавливатьВДиалоге = ИСТИНА Тогда
				
				СтрокаТаблицы              = ТаблицаНастройкиПараметров.Добавить();
				СтрокаТаблицы.Наименование = Наименование;
				СтрокаТаблицы.Имя          = Имя;
				СтрокаТаблицы.Значение = ЗначениеПараметра;				
				СтрокаТаблицы.ПередаватьПараметрПриВыгрузке = ПередаватьПараметрПриВыгрузке;
				СтрокаТаблицы.ПравилоКонвертации = ПравилоКонвертации;
				
			КонецЕсли;
			
			Если ИспользуетсяПриЗагрузке
				И РежимОбмена = "Выгрузка" Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Параметр");
				УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
				УстановитьАтрибут(ЗаписьXML, "Наименование", Наименование);
					
				Если НЕ ПустаяСтрока(АлгоритмПослеЗагрузкиПараметра) Тогда
					УстановитьАтрибут(ЗаписьXML, "ПослеЗагрузкиПараметра", XMLСтрока(АлгоритмПослеЗагрузкиПараметра));
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;

		ИначеЕсли (ТипУзла = ТипУзлаXMLТекст) Тогда
			
			// Для совместимости с версией правил 2.0 используем загрузку из строки
			СтрокаПараметров = ПравилаОбмена.Значение;
			Для каждого Пар Из МассивИзСтроки(СтрокаПараметров) Цикл
				Параметры.Вставить(Пар);
			КонецЦикла;
			
		ИначеЕсли (ИмяУзла = "Параметры") И (ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку обработки в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьОбработку(ПравилаОбмена, ЗаписьXML)

	Имя                     = одАтрибут(ПравилаОбмена, ТипСтрока, "Имя");
	Наименование            = одАтрибут(ПравилаОбмена, ТипСтрока, "Наименование");
	ЭтоОбработкаНастройки   = одАтрибут(ПравилаОбмена, ТипБулево, "ЭтоОбработкаНастройки");
	
	ИспользуетсяПриВыгрузке = одАтрибут(ПравилаОбмена, ТипБулево, "ИспользуетсяПриВыгрузке");
	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, ТипБулево, "ИспользуетсяПриЗагрузке");

	СтрокаПараметров        = одАтрибут(ПравилаОбмена, ТипСтрока, "Параметры");
	
	ХранилищеОбработки      = одЗначениеЭлемента(ПравилаОбмена, ТипХранилищеЗначения);

	ПараметрыДопОбработок.Вставить(Имя, МассивИзСтроки(СтрокаПараметров));
	
	
	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена <> "Загрузка" Тогда
			ЗаписьXML.ЗаписатьНачалоЭлемента("Обработка");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",                     Имя);
			УстановитьАтрибут(ЗаписьXML, "Наименование",            Наименование);
			УстановитьАтрибут(ЗаписьXML, "ЭтоОбработкаНастройки",   ЭтоОбработкаНастройки);
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеОбработки));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;

	Если ЭтоОбработкаНастройки Тогда
		Если (РежимОбмена = "Загрузка") И ИспользуетсяПриЗагрузке Тогда
			ОбработкиНастройкиЗагрузки.Добавить(Имя, Наименование, , );
			
		ИначеЕсли (РежимОбмена = "Выгрузка") И ИспользуетсяПриВыгрузке Тогда
			ОбработкиНастройкиВыгрузки.Добавить(Имя, Наименование, , );
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьОбработку() 

// Осуществляет загрузку внешних обработок в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьОбработки(ПравилаОбмена, ЗаписьXML)

	ДопОбработки.Очистить();
	ПараметрыДопОбработок.Очистить();
	
	ОбработкиНастройкиВыгрузки.Очистить();
	ОбработкиНастройкиЗагрузки.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Обработки");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Обработка" Тогда
			ЗагрузитьОбработку(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Обработки") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку правила выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая правило выгрузки данных
// 
Процедура ЗагрузитьПВД(ПравилаОбмена)
	
	НоваяСтрока = ТаблицаПравилВыгрузки.Добавить();
	
	НоваяСтрока.Включить = Не одАтрибут(ПравилаОбмена, ТипБулево, "Отключить");
		
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		Если ИмяУзла = "Код" Тогда
			
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, ТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ВыбиратьДанныеДляВыгрузкиОднимЗапросом" Тогда
			
			// параметр игнорируется при on-line обмене данными
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСозданныеВБазеПриемнике" Тогда
			
			НоваяСтрока.НеВыгружатьОбъектыСозданныеВБазеПриемнике = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);

		ИначеЕсли ИмяУзла = "ИмяТипаПриемника" Тогда
			
			НоваяСтрока.ИмяТипаПриемника = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			
			ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
			Если Не РежимЗагрузкиИнформацииОПравилахОбмена Тогда
				
				НоваяСтрока.СинхронизироватьПоИдентификатору = СинхронизироватьПоИдентификаторуПВД(НоваяСтрока.ПравилоКонвертации);
				
				Если Не ПустаяСтрока(ОбъектВыборки) Тогда
					
					НоваяСтрока.ОбъектВыборки        = Тип(ОбъектВыборки);
					
				КонецЕсли;
				
				// Для поддержки отбора с помощью построителя
				Если Найти(ОбъектВыборки, "Ссылка.") Тогда
					НоваяСтрока.ИмяОбъектаДляЗапроса = СтрЗаменить(ОбъектВыборки, "Ссылка.", ".");
				Иначе
					НоваяСтрока.ИмяОбъектаДляЗапросаРегистра = СтрЗаменить(ОбъектВыборки, "Запись.", ".");
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);

		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьПВД()

// Осуществляет загрузку правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилаВыгрузки(ПравилаОбмена)
	
	ТаблицаПравилВыгрузки.Очистить();
	
	СтрокаНастройки = Неопределено;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПВД(ПравилаОбмена);
			
		ИначеЕсли (ИмяУзла = "ПравилаВыгрузкиДанных") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ЗагрузитьПравилаВыгрузки()

Функция СинхронизироватьПоИдентификаторуПВД(Знач ИмяПКО)
	
	ПКО = НайтиПравило(Неопределено, ИмяПКО);
	
	Если ПКО <> Неопределено Тогда
		
		Возврат (ПКО.СинхронизироватьПоИдентификатору = Истина);
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="")

	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		
	Иначе
		
		Правило = Менеджеры[ТипЗнч(Объект)];
		Если Правило <> Неопределено Тогда
			Правило    = Правило.ПКО;
			
			Если Правило <> Неопределено Тогда 
				ИмяПравила = Правило.Имя;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Правило; 
	
КонецФункции

// Восстанавливает правила из внутреннего формата
//
// Параметры:
// 
Процедура ВосстановитьПравилаИзВнутреннегоФормата() Экспорт

	Если СохраненныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПравил = СохраненныеНастройки.Получить();

	Конвертация                = СтруктураПравил.Конвертация;
	
	ТаблицаПравилВыгрузки      = СтруктураПравил.ТаблицаПравилВыгрузки;
	ТаблицаПравилКонвертации   = СтруктураПравил.ТаблицаПравилКонвертации;
	ТаблицаНастройкиПараметров = СтруктураПравил.ТаблицаНастройкиПараметров;
	
	Алгоритмы                  = СтруктураПравил.Алгоритмы;
	ЗапросыДляВосстановления   = СтруктураПравил.Запросы;
	Параметры                  = СтруктураПравил.Параметры;
	
	XMLПравила                = СтруктураПравил.XMLПравила;
	СтрокаТиповДляПриемника   = СтруктураПравил.СтрокаТиповДляПриемника;
	
	СтруктураПравил.Свойство("ВерсияПлатформыПриемника", ВерсияПлатформыПриемника);
		
	ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта    = Не ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта);
	ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта     = Не ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта);
	ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта    = Не ПустаяСтрока(Конвертация.ПередЗагрузкойОбъекта);
	ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта     = Не ПустаяСтрока(Конвертация.ПослеЗагрузкиОбъекта);
	ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Не ПустаяСтрока(Конвертация.ПередКонвертациейОбъекта);

	// Восстанавливаем запросы
	Запросы.Очистить();
	Для Каждого ЭлементСтруктуры Из ЗапросыДляВосстановления Цикл
		Запрос = Новый Запрос(ЭлементСтруктуры.Значение);
		Запросы.Вставить(ЭлементСтруктуры.Ключ, Запрос);
	КонецЦикла;

	ИнициализироватьМенеджерыИСообщения();
	
	Правила.Очистить();
	
	Если РежимОбмена = "Выгрузка" Тогда
	
		Для Каждого СтрокаТаблицы Из ТаблицаПравилКонвертации Цикл
			Правила.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);

			Если СтрокаТаблицы.Источник <> Неопределено Тогда
				
				Попытка
					Если ТипЗнч(СтрокаТаблицы.Источник) = ТипСтрока Тогда
						Менеджеры[Тип(СтрокаТаблицы.Источник)].ПКО = СтрокаТаблицы;
					Иначе
						Менеджеры[СтрокаТаблицы.Источник].ПКО = СтрокаТаблицы;
					КонецЕсли;			
				Исключение
					ЗаписатьИнформациюОбОшибкеВПротокол(11, ОписаниеОшибки(), Строка(СтрокаТаблицы.Источник));
				КонецПопытки;
				
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // ВосстановитьПравилаИзВнутреннегоФормата()

// Устанавливает значения параметров в структуре Параметры 
// по таблице ТаблицаНастройкиПараметров
//
Процедура УстановитьПараметрыИзДиалога() Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаНастройкиПараметров Цикл
		Параметры.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЗначениеПараметраВТаблице(ИмяПараметра, ЗначениеПараметра)
	
	СтрокаТаблицы = ТаблицаНастройкиПараметров.Найти(ИмяПараметра, "Имя");
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СтрокаТаблицы.Значение = ЗначениеПараметра;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПервоначальныеЗначенияПараметров()
	
	Для Каждого ТекПараметр Из Параметры Цикл
		
		УстановитьЗначениеПараметраВТаблице(ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРАВИЛ ОЧИСТКИ

Процедура УдалитьОбъект(Объект, УдалитьНепосредственно, ИмяТипа = "")
	
	Попытка
		
		Предопределенный = Объект.Предопределенный;
		
	Исключение
		
		Предопределенный = Ложь;
		
	КонецПопытки;
	
	Если Предопределенный Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УдалитьНепосредственно Тогда
		
		Объект.Удалить();
		
		// удалить регистрацию для узла откуда получены данные
		Попытка
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаЗагрузкаДанных, Объект.Ссылка);
		Исключение
			
		КонецПопытки;
		
	Иначе
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, ИмяТипа);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно)
	
	Если Свойства.ИмяТипа = "РегистрСведений" Тогда
			
		Объект.Удалить();
			
	Иначе
		
		УдалитьОбъект(Объект, УдалитьНепосредственно, Свойства.ИмяТипа);		
			
	КонецЕсли;	
	
КонецПроцедуры

// Производит удаление (или помечает на удаление) объект выборки в соответствии с указанным правилом
//
// Параметры:
//  Объект         - удаляемый (помечаемый на удаление) объект выборки
//  Правило        - ссылка на правило очистки данных
//  Свойства       - свойства объекта метаданного удаляемого объекта 
//  ВходящиеДанные - произвольные вспомогательные данные
// 
Процедура УдалениеОбъектаВыборки(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено)

	Отказ			       = Ложь;
	УдалитьНепосредственно = Правило.Непосредственно;


	// Обработчик ПередУдалениемОбъектаВыборки
	
	Если Не ПустаяСтрока(Правило.ПередУдалением) Тогда
	
		Попытка
				
			Выполнить(Правило.ПередУдалением);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(29, ОписаниеОшибки(), Правило.Имя, Объект, "ПередУдалениемОбъектаВыборки");
									
		КонецПопытки;
		
		Если Отказ Тогда
		
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Попытка
		
		ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно);
					
	Исключение
		
		ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(24, ОписаниеОшибки(), Правило.Имя, Объект, "");
								
	КонецПопытки;
	
КонецПроцедуры // УдалениеОбъектаВыборки()

// Очищает данные по указанному правилу
//
// Параметры:
//  Правило        - ссылка на правило очистки данных
// 
Процедура ОчиститьДанныеПоПравилу(Правило)
	
	// Обработчик ПередОбработкой

	Отказ			= Ложь;
	ВыборкаДанных	= Неопределено;

	ИсходящиеДанные	= Неопределено;


	// Обработчик ПередОбработкойПравилаОчистки
	Если Не ПустаяСтрока(Правило.ПередОбработкой) Тогда
		
		Попытка
			
			Выполнить(Правило.ПередОбработкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(27, ОписаниеОшибки(), Правило.Имя, "", "ПередОбработкойПравилаОчистки");
						
		КонецПопытки;
			
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли; 
		
	КонецЕсли;


    // Стандартная выборка
	
	Попытка
		Свойства	= Менеджеры[Правило.ОбъектВыборки];
	Исключение
		Свойства	= Неопределено;
	КонецПопытки;
	
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
		
		ИмяТипа		= Свойства.ИмяТипа;
		
		Если ИмяТипа = "РегистрБухгалтерии" 
			ИЛИ ИмяТипа = "Константы" Тогда
			
			Возврат;
			
		КонецЕсли;
		
		НужныВсеПоля  = Не ПустаяСтрока(Правило.ПередУдалением);
		
		Выборка = ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, Истина, Правило.Непосредственно, НужныВсеПоля);
		
		Пока Выборка.Следующий() Цикл
			
			Если ИмяТипа =  "РегистрСведений" Тогда
				
				МенеджерЗаписи = Свойства.Менеджер.СоздатьМенеджерЗаписи(); 
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
									
				УдалениеОбъектаВыборки(МенеджерЗаписи, Правило, Свойства, ИсходящиеДанные);				
									
			Иначе
					
				УдалениеОбъектаВыборки(Выборка.Ссылка.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
			КонецЕсли;
				
		КонецЦикла;		

	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда

		Если ВыборкаДанных <> Неопределено Тогда
			
			Выборка = ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных);
			
			Если Выборка <> Неопределено Тогда
				
				Пока Выборка.Следующий() Цикл
					
					Если ИмяТипа =  "РегистрСведений" Тогда
				
						МенеджерЗаписи = Свойства.Менеджер.СоздатьМенеджерЗаписи(); 
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
											
						УдалениеОбъектаВыборки(МенеджерЗаписи, Правило, Свойства, ИсходящиеДанные);				
											
					Иначе
							
						УдалениеОбъектаВыборки(Выборка.Ссылка.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
							
					КонецЕсли;					
					
				КонецЦикла;	
				
			Иначе
				
				Для каждого Объект Из ВыборкаДанных Цикл
					
					УдалениеОбъектаВыборки(Объект.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 
			
	КонецЕсли; 

	
	// Обработчик ПослеОбработкиПравилаОчистки
	
	Если Не ПустаяСтрока(Правило.ПослеОбработки) Тогда
	
		Попытка
			
			Выполнить(Правило.ПослеОбработки);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(28, ОписаниеОшибки(), Правило.Имя, "", "ПослеОбработкиПравилаОчистки");
									
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры // ОчиститьДанныеПоПравилу()

// Обходит дерево правил очистки данных и выполняет очистку
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
// 
Процедура ОбработатьПравилаОчистки(Строки)
	
	Для каждого ПравилоОчистки Из Строки Цикл
		
		Если ПравилоОчистки.Включить = 0 Тогда
			
			Продолжить;
			
		КонецЕсли; 

		Если ПравилоОчистки.ЭтоГруппа Тогда
			
			ОбработатьПравилаОчистки(ПравилоОчистки.Строки);
			Продолжить;
			
		КонецЕсли;
		
		ОчиститьДанныеПоПравилу(ПравилоОчистки);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьПравилаОчистки() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ДАННЫХ

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина)
	
	// не все объекты, которые участвуют в обмене, имеют свойство "ОбменДанными"
	Попытка
		Объект.ОбменДанными.Загрузка = Значение;
	Исключение
	КонецПопытки;
	
	Если УзелОбменаЗагрузкаДанных <> Неопределено
		И НЕ УзелОбменаЗагрузкаДанных.Пустая() Тогда
	
		Попытка
			Объект.ОбменДанными.Отправитель = УзелОбменаЗагрузкаДанных;
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьОбменДаннымиЗагрузка()

Функция УстановитьСсылкуНового(Объект, Менеджер, СвойстваПоиска)
	
	УИ = СвойстваПоиска["{УникальныйИдентификатор}"];
	
	Если УИ <> Неопределено Тогда
		
		НоваяСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИ));
		
		Объект.УстановитьСсылкуНового(НоваяСсылка);
		
		СвойстваПоиска.Удалить("{УникальныйИдентификатор}");
		
	Иначе
		
		НоваяСсылка = Неопределено;
		
	КонецЕсли;
	
	Возврат НоваяСсылка;
	
КонецФункции


// Ищет объект по номеру в списке уже загруженных объектов.
//
// Параметры:
//  Нпп          - номер искомого объекта в файле обмена
//
// Возвращаемое значение:
//  Ссылка на найденный объект. Если объект не найден, возвращается Неопределено.
// 
Функция НайтиОбъектПоНомеру(Нпп, ТипОбъекта, РежимПоискаОсновногоОбъекта = Ложь)
	
	Возврат Неопределено;
	
КонецФункции

Функция НайтиОбъектПоГлобальномуНомеру(Нпп, РежимПоискаОсновногоОбъекта = Ложь)
	
	Возврат Неопределено;
	
КонецФункции

Процедура СнятьПометкуУдаленияСПредопределенногоЭлемента(Объект, ТипОбъекта)
	
	Попытка
		ПометкаУдаления = Объект.ПометкаУдаления;
	Исключение
		ПометкаУдаления = Ложь;
	КонецПопытки;
	
	Если ПометкаУдаления Тогда
		
		Попытка
			Предопределенный = Объект.Предопределенный;
		Исключение
			Предопределенный = Ложь;
		КонецПопытки;
		
		Если Предопределенный Тогда
			
			Объект.ПометкаУдаления = Ложь;
			
			// фиксируем событие в ЖР
			ЗП            = ПолучитьСтруктуруЗаписиПротокола(80);
			ЗП.ТипОбъекта = ТипОбъекта;
			ЗП.Объект     = Строка(Объект);
			
			ЗаписатьВПротоколВыполнения(80, ЗП, Ложь,,,,Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьОбъектВИБ(Объект, Тип, НужноЗаписатьОбъект = Ложь)
	
	// в режиме загрузки в ТЗ объекты не записываем
	Если РежимЗагрузкиДанныхВТаблицуЗначений() Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	// устанавливаем режим загрузки данных для объекта
	УстановитьОбменДаннымиЗагрузка(Объект);
	
	// выполняем проверку на пометку удаления предопределенного элемента
	СнятьПометкуУдаленияСПредопределенногоЭлемента(Объект, Тип);
	
	ОбменДаннымиПереопределяемый.ПередЗаписьюОбъекта(Объект, Отказ);
	
	Если Отказ Тогда
		
		НайденЗапретЗагрузкиДанных = Объект.ДополнительныеСвойства.Свойство("НайденЗапретЗагрузкиДанных");
		
		Если НайденЗапретЗагрузкиДанных Тогда
			
			// При возникновении коллизии дат запрета изменений загрузку не прерываем. Фиксируем ошибку в протоколе.
			СтрокаСообщенияОбОшибке = "";
			Объект.ДополнительныеСвойства.Свойство("НайденЗапретЗагрузкиДанных", СтрокаСообщенияОбОшибке);
			
			ЗП = ПолучитьСтруктуруЗаписиПротокола(84, "{}: " + Строка(СтрокаСообщенияОбОшибке));
			ЗП.Объект = Объект;
			ЗП.ТипОбъекта = Тип;
			
			ЗаписатьВПротоколВыполнения(84, ЗП, Ложь);
			
		КонецЕсли;
		
		НужноЗаписатьОбъект = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("НеПроверятьДатыЗапретаИзмененияДанных");
	
	Попытка
		
		// записываем объект в транзакцию
		Объект.Записать();
		
	Исключение
		
		НужноЗаписатьОбъект = Ложь;
		
		СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеВПротокол(26, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Объект, Тип);
		
		Если Не ФлагРежимОтладки Тогда
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтменитьПроведениеОбъектаВИБ(Объект, Тип, НужноЗаписатьОбъект = Ложь)
	
	Отказ = Ложь;
	
	// устанавливаем режим загрузки данных для объекта
	УстановитьОбменДаннымиЗагрузка(Объект);
	
	ОбменДаннымиПереопределяемый.ПередЗаписьюОбъекта(Объект, Отказ);
	
	Если Отказ Тогда
		
		НайденЗапретЗагрузкиДанных = Объект.ДополнительныеСвойства.Свойство("НайденЗапретЗагрузкиДанных");
		
		Если НайденЗапретЗагрузкиДанных Тогда
			
			// При возникновении коллизии дат запрета изменений загрузку не прерываем. Фиксируем ошибку в протоколе.
			СтрокаСообщенияОбОшибке = "";
			Объект.ДополнительныеСвойства.Свойство("НайденЗапретЗагрузкиДанных", СтрокаСообщенияОбОшибке);
			
			ЗП = ПолучитьСтруктуруЗаписиПротокола(84, "{}: " + Строка(СтрокаСообщенияОбОшибке));
			ЗП.Объект = Объект;
			ЗП.ТипОбъекта = Тип;
			
			ЗаписатьВПротоколВыполнения(84, ЗП, Ложь);
			
		КонецЕсли;
		
		НужноЗаписатьОбъект = Ложь;
		Возврат;
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Вставить("НеПроверятьДатыЗапретаИзмененияДанных");
	
	Попытка
		
		// отменяем проведение документа
		Объект.Проведен = Ложь;
		Объект.Записать();
		
		УдалитьДвиженияУДокумента(Объект, Отказ);
		
	Исключение
		
		НужноЗаписатьОбъект = Ложь;
		
		СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеВПротокол(26, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Объект, Тип);
		
		Если Не ФлагРежимОтладки Тогда
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецПопытки;
	
КонецПроцедуры

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции


// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
Процедура УдалитьДвиженияУДокумента(ДокументОбъект, Отказ)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.
		СтрокаДвижения.НаборЗаписей = Набор;
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения ИЗ МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или подсистема даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
	// Удаление записей регистрации из всех последовательностей
	УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);

КонецПроцедуры

Процедура УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения = Ложь)
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект);
	КонецЕсли;      
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	Для Каждого НаборЗаписейРегистрацииВПоследовательности ИЗ КоллекцияПоследовательностей Цикл
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
		  ИЛИ (ПроверятьДвижения И (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено)) Тогда
		   НаборЗаписейРегистрацииВПоследовательности.Очистить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект)
	ТекстЗапроса = "";	
	
	Для Каждого Последовательность ИЗ ДокументОбъект.ПринадлежностьПоследовательностям Цикл
		// в запросе получаем имена последовательностей, в которых документ зарегистрирован
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя 
		+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()  
		+ " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();	
		Возврат ТаблицаЗапроса;
	КонецЕсли;
	
КонецФункции

// Процедура очищает коллекцию движений документа
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьТекущуюДатуРеквизиту(РеквизитОбъекта)
	
	РеквизитОбъекта = ТекущаяДата();
	
КонецПроцедуры

// Создает новый объект указанного типа, устанавливает реквизиты, указанные
// в структуре СвойстваПоиска.
//
// Параметры:
//  Тип            - тип создаваемого объекта
//  СвойстваПоиска - Структура, содержащая устанавливаемые реквизиты нового объекта
//
// Возвращаемое значение:
//  Новый объект информационной базы
// 
Функция СоздатьНовыйОбъект(Тип, СвойстваПоиска, Объект = Неопределено, 
	ЗаписыватьОбъектСразуПослеСоздания = Истина, НоваяСсылка = Неопределено, 
	Нпп = 0, ГНпп = 0, Правило = Неопределено, 
	ПараметрыОбъекта = Неопределено, УстанавливатьУОбъектаВсеСвойстваПоиска = Истина)

	СвойстваМД      = Менеджеры[Тип];
	ИмяТипа         = СвойстваМД.ИмяТипа;
	Менеджер        = СвойстваМД.Менеджер;
	ПометкаУдаления = Неопределено;

	Если ИмяТипа = "Справочник"
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" Тогда
		
		ЭтоГруппа = СвойстваПоиска["ЭтоГруппа"];
		
		Если ЭтоГруппа = Истина Тогда
			
			Объект = Менеджер.СоздатьГруппу();
						
		Иначе
			
			Объект = Менеджер.СоздатьЭлемент();
			
		КонецЕсли;		
				
	ИначеЕсли ИмяТипа = "Документ" Тогда
		
		Объект = Менеджер.СоздатьДокумент();
				
	ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
		
		Объект = Менеджер.СоздатьСчет();
				
	ИначеЕсли ИмяТипа = "ПланВидовРасчета" Тогда
		
		Объект = Менеджер.СоздатьВидРасчета();
				
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		
		Объект = Менеджер.СоздатьМенеджерЗаписи();
		Возврат Объект;
		
	ИначеЕсли ИмяТипа = "ПланОбмена" Тогда
		
		Объект = Менеджер.СоздатьУзел();
				
	ИначеЕсли ИмяТипа = "Задача" Тогда
		
		Объект = Менеджер.СоздатьЗадачу();
		
	ИначеЕсли ИмяТипа = "БизнесПроцесс" Тогда
		
		Объект = Менеджер.СоздатьБизнесПроцесс();	
		
	ИначеЕсли ИмяТипа = "Перечисление" Тогда
		
		Объект = СвойстваМД.ПустаяСсылка;	
		Возврат Объект;
		
	ИначеЕсли ИмяТипа = "ТочкаМаршрутаБизнесПроцесса" Тогда
		
		Возврат Неопределено;
				
	КонецЕсли;
	
	НоваяСсылка = УстановитьСсылкуНового(Объект, Менеджер, СвойстваПоиска);
	
	Если УстанавливатьУОбъектаВсеСвойстваПоиска Тогда
		УстановитьРеквизитыПоискаУОбъекта(Объект, СвойстваПоиска, , Ложь, Ложь);
	КонецЕсли;
	
	// Проверки
	Если ИмяТипа = "Документ"
		ИЛИ ИмяТипа = "Задача"
		ИЛИ ИмяТипа = "БизнесПроцесс" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			
			УстановитьТекущуюДатуРеквизиту(Объект.Дата);			
						
		КонецЕсли;
		
	КонецЕсли;
		
	Если ЗаписыватьОбъектСразуПослеСоздания Тогда
		
		ЗаписатьОбъектВИБ(Объект, Тип);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

// Читает из файла узел свойства объекта, устанавливает значение свойства
//
// Параметры:
//  Тип            - тип значения свойства
//  ОбъектНайден   - если после выполнения функции - Ложь, то значит
//                   объект свойства не найден в информационной базе и создан новый
//
// Возвращаемое значение:
//  Значение свойства
// 
Функция ПрочитатьСвойство(Тип, НеСоздаватьОбъектЕслиНеНайден = Ложь, СвойствоНеНайденоПоСсылке = Ложь)

	Значение = Неопределено;
	НаличиеСвойств = Ложь;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Значение" Тогда
			
			ИскатьПоСвойству = одАтрибут(ФайлОбмена, ТипСтрока, "Свойство");
			Значение         = одЗначениеЭлемента(ФайлОбмена, Тип, ИскатьПоСвойству, Ложь);
			НаличиеСвойств = Истина;
			
		ИначеЕсли ИмяУзла = "Ссылка" Тогда
			
			ОбъектНайден = Истина;
			Значение       = НайтиОбъектПоСсылке(Тип, , , ОбъектНайден, , НеСоздаватьОбъектЕслиНеНайден);
			
			Если НеСоздаватьОбъектЕслиНеНайден
				И НЕ ОбъектНайден Тогда
				
				СвойствоНеНайденоПоСсылке = Ложь;
				
			КонецЕсли;
			
			НаличиеСвойств = Истина;
			
		ИначеЕсли ИмяУзла = "Нпп" Тогда
			
			ФайлОбмена.Прочитать();
			Нпп = Число(ФайлОбмена.Значение);
			Если Нпп <> 0 Тогда
				Значение  = НайтиОбъектПоНомеру(Нпп, Тип);
				НаличиеСвойств = Истина;
			КонецЕсли;			
			ФайлОбмена.Прочитать();
			
		ИначеЕсли ИмяУзла = "ГНпп" Тогда
			
			ФайлОбмена.Прочитать();
			ГНпп = Число(ФайлОбмена.Значение);
			Если ГНпп <> 0 Тогда
				Значение  = НайтиОбъектПоГлобальномуНомеру(ГНпп);
				НаличиеСвойств = Истина;
			КонецЕсли;
			
			ФайлОбмена.Прочитать();
			
		ИначеЕсли (ИмяУзла = "Свойство" ИЛИ ИмяУзла = "ЗначениеПараметра") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Если Не НаличиеСвойств
				И ЗначениеЗаполнено(Тип) Тогда
				
				// если вообще ничего нет - значит пустое значение
				Значение = одПолучитьПустоеЗначение(Тип);
				
			КонецЕсли;
			
			Прервать;
			
		ИначеЕсли ИмяУзла = "Выражение" Тогда
			
			Значение = Вычислить(одЗначениеЭлемента(ФайлОбмена, ТипСтрока, , Ложь));
			НаличиеСвойств = Истина;
			
		ИначеЕсли ИмяУзла = "Пусто" Тогда
			
			Значение = одПолучитьПустоеЗначение(Тип);
			НаличиеСвойств = Истина;		
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции // ПрочитатьСвойство() 

Функция УстановитьРеквизитыПоискаУОбъекта(НайденныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать, 
	НужноСравниватьСТекущимиРеквизитами = Истина, НЕЗаменятьСвойстваНеПодлежащиеИзменению = Истина)
	
	ИзмененыРеквизитыОбъекта = Ложь;
				
	Для каждого Свойство Из СвойстваПоиска Цикл
					
		Имя      = Свойство.Ключ;
		Значение = Свойство.Значение;
		
		Если НЕЗаменятьСвойстваНеПодлежащиеИзменению
			И СвойстваПоискаНеЗамещать[Имя] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
					
		Если Имя = "ЭтоГруппа" 
			ИЛИ Имя = "{УникальныйИдентификатор}" 
			ИЛИ Имя = "{ИмяПредопределенногоЭлемента}"
			ИЛИ Имя = "{КлючПоискаВИБИсточнике}"
			ИЛИ Имя = "{КлючПоискаВИБПриемнике}"
			ИЛИ Имя = "{ИмяТипаВИБИсточнике}"
			ИЛИ Имя = "{ИмяТипаВИБПриемнике}" Тогда
						
			Продолжить;
						
		ИначеЕсли Имя = "ПометкаУдаления" Тогда
						
			Если НЕ НужноСравниватьСТекущимиРеквизитами
				ИЛИ НайденныйОбъект.ПометкаУдаления <> Значение Тогда
							
				НайденныйОбъект.ПометкаУдаления = Значение;
				ИзмененыРеквизитыОбъекта = Истина;
							
			КонецЕсли;
						
		Иначе
				
			// отличные реквизиты устанавливаем
			
			Если НайденныйОбъект[Имя] <> NULL Тогда
			
				Если НЕ НужноСравниватьСТекущимиРеквизитами
					ИЛИ НайденныйОбъект[Имя] <> Значение Тогда
						
					НайденныйОбъект[Имя] = Значение;
					ИзмененыРеквизитыОбъекта = Истина;
						
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат ИзмененыРеквизитыОбъекта;
	
КонецФункции

Функция НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств,
									ТипОбъекта,
									СвойстваПоиска,
									СвойстваПоискаНеЗамещать,
									ИмяТипаОбъекта,
									СвойствоПоиска,
									ЗначениеСвойстваПоиска,
									ОбъектНайден,
									СоздаватьНовыйЭлементЕслиНеНайден = Истина,
									НайденныйИлиСозданныйОбъект = Неопределено,
									РежимПоискаОсновногоОбъекта = Ложь,
									СвойстваОбъектаМодифицированы = Ложь,
									НоваяСсылкаУникальногоИдентификатора = Неопределено,
									Нпп = 0,
									ГНпп = 0,
									ПараметрыОбъекта = Неопределено,
									НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь,
									ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено)
	
	Объект = одНайтиОбъектПоСвойству(СтруктураСвойств.Менеджер, СвойствоПоиска, ЗначениеСвойстваПоиска, 
		НайденныйИлиСозданныйОбъект, , , РежимПоискаОсновногоОбъекта, СтруктураСвойств.СтрокаПоиска);
	
	ОбъектНайденИлиСоздан = НЕ (Объект = Неопределено
				ИЛИ Объект.Пустая());	
		
	ОбъектНайден = НЕ Объект.Пустая();
				
	
	Если Не ОбъектНайденИлиСоздан
		И СоздаватьНовыйЭлементЕслиНеНайден Тогда
		
		Объект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, НайденныйИлиСозданныйОбъект, 
			НЕ РежимПоискаОсновногоОбъекта, НоваяСсылкаУникальногоИдентификатора, Нпп, ГНпп, НайтиПервоеПравилоПоСтруктуреСвойств(СтруктураСвойств),
			ПараметрыОбъекта);
			
		СвойстваОбъектаМодифицированы = Истина;
		Возврат Объект;
		
	КонецЕсли;
			
	
	Если РежимПоискаОсновногоОбъекта Тогда
		
		//
		Попытка
			
			Если Не ЗначениеЗаполнено(Объект) Тогда
				Возврат Объект;
			КонецЕсли;
			
			Если НайденныйИлиСозданныйОбъект = Неопределено Тогда
				НайденныйИлиСозданныйОбъект = Объект.ПолучитьОбъект();
			КонецЕсли;
			
		Исключение
			Возврат Объект;
		КонецПопытки;
			
		СвойстваОбъектаМодифицированы = УстановитьРеквизитыПоискаУОбъекта(НайденныйИлиСозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
		
	КонецЕсли;
		
	Возврат Объект;
	
КонецФункции

Функция ПолучитьТипСвойства()
	
	СтроковыйТипСвойства = одАтрибут(ФайлОбмена, ТипСтрока, "Тип");
	Если ПустаяСтрока(СтроковыйТипСвойства) Тогда
		
		// нужно определять свойство по соответствию
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Тип(СтроковыйТипСвойства);
	
КонецФункции

Функция ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, ИмяСвойства)
	
	ТипСвойства = ПолучитьТипСвойства();
				
	Если ТипСвойства = Неопределено
		И ИнформацияОТипах <> Неопределено Тогда
		
		ТипСвойства = ИнформацияОТипах[ИмяСвойства];
		
	КонецЕсли;
	
	Возврат ТипСвойства;
	
КонецФункции

Процедура ПрочитатьСвойстваПоискаИзФайла(СвойстваПоиска, СвойстваПоискаНеЗамещать, ИнформацияОТипах, 
	ПоискПоДатеНаРавенство = Ложь, ПараметрыОбъекта = Неопределено, Знач РежимПоискаОсновногоОбъекта)
	
	ПоискПоДатеНаРавенство = Ложь;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если    ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЭтоПараметр = (ИмяУзла = "ЗначениеПараметра");
			
			Имя = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			
			ТипИсточникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипПриемника");
			ТипПриемникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипИсточника");
			
			СвойствоУникальныйИдентификатор = (Имя = "{УникальныйИдентификатор}");
			
			Если СвойствоУникальныйИдентификатор Тогда
				
				ТипСвойства = ТипСтрока;
				
			ИначеЕсли Имя = "{ИмяПредопределенногоЭлемента}"
				  ИЛИ Имя = "{КлючПоискаВИБИсточнике}"
				  ИЛИ Имя = "{КлючПоискаВИБПриемнике}"
				  ИЛИ Имя = "{ИмяТипаВИБИсточнике}"
				  ИЛИ Имя = "{ИмяТипаВИБПриемнике}" Тогда
				
				ТипСвойства = ТипСтрока;
				
			Иначе
				
				ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
				
			КонецЕсли;
			
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, ТипБулево, "НеЗамещать");
			
			ПоискПоДатеНаРавенство = ПоискПоДатеНаРавенство 
						ИЛИ одАтрибут(ФайлОбмена, ТипБулево, "ПоискПоДатеНаРавенство");
			//
			ЗначениеСвойства = ПрочитатьСвойство(ТипСвойства);
			
			Если СвойствоУникальныйИдентификатор Тогда
				
				ВыполнитьЗаменуУникальногоИдентификатораПриНеобходимости(ЗначениеСвойства, ТипИсточникаСтрокой, ТипПриемникаСтрокой, РежимПоискаОсновногоОбъекта);
				
			КонецЕсли;
			
			Если (Имя = "ЭтоГруппа") И (ЗначениеСвойства <> Истина) Тогда
				
				ЗначениеСвойства = Ложь;
												
			КонецЕсли; 
			
			Если ЭтоПараметр Тогда
				
				
				ДобавитьПараметрПриНеобходимости(ПараметрыОбъекта, Имя, ЗначениеСвойства);
				
			Иначе
			
				СвойстваПоиска[Имя] = ЗначениеСвойства;
				
				Если НеЗамещатьСвойство Тогда
					
					СвойстваПоискаНеЗамещать[Имя] = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "Ссылка") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьЗаменуУникальногоИдентификатораПриНеобходимости(УникальныйИдентификатор, Знач ТипИсточникаСтрокой, Знач ТипПриемникаСтрокой, Знач РежимПоискаОсновногоОбъекта)
	
	// в режиме сопоставления для основных объектов замену не выполняем
	Если РежимПоискаОсновногоОбъекта И РежимЗагрузкиДанныхВТаблицуЗначений() Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("УзелИнформационнойБазы", УзелОбменаЗагрузкаДанных);
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("УникальныйИдентификаторПриемника", УникальныйИдентификатор);
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("ТипПриемника", ТипПриемникаСтрокой);
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("ТипИсточника", ТипИсточникаСтрокой);
	
	РезультатЗапроса = ЗапросСоответствиеОбъектовИнформационныхБаз.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		УникальныйИдентификатор = Выборка.УникальныйИдентификаторИсточникаСтрокой;
		
	Иначе
		
		// если данных в регистре сопоставления нет, то заполняем регистр сопоставления необходимыми данными,
		// даже если объект еще не записан в ИБ.
		Если РежимПоискаОсновногоОбъекта И РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
			
			Менеджер = Менеджеры[Тип(ТипИсточникаСтрокой)].Менеджер;
			
			УникальныйИдентификаторИсточника = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификатор));
			
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбменаЗагрузкаДанных);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", УникальныйИдентификаторИсточника);
			СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", УникальныйИдентификатор);
			СтруктураЗаписи.Вставить("ТипПриемника", ТипПриемникаСтрокой);
			СтруктураЗаписи.Вставить("ТипИсточника", ТипИсточникаСтрокой);
			
			РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьУПоляНеограниченнаяДлина(МенеджерТипа, ИмяПараметра)
	
	ДлинныеСтроки = Неопределено;
	Если НЕ МенеджерТипа.Свойство("ДлинныеСтроки", ДлинныеСтроки) Тогда
		
		ДлинныеСтроки = Новый Соответствие;
		Для Каждого Реквизит Из МенеджерТипа.ОбъектМД.Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(ТипСтрока) 
				И (Реквизит.Тип.КвалификаторыСтроки.Длина = 0) Тогда
				
				ДлинныеСтроки.Вставить(Реквизит.Имя, Реквизит.Имя);	
				
			КонецЕсли;
			
		КонецЦикла;
		
		МенеджерТипа.Вставить("ДлинныеСтроки", ДлинныеСтроки);
		
	КонецЕсли;
	
	Возврат (ДлинныеСтроки[ИмяПараметра] <> Неопределено);
		
КонецФункции

Функция ОпределитьЭтотПараметрНеограниченнойДлинны(МенеджерТипа, ЗначениеПараметра, ИмяПараметра)
	
	Попытка
			
		Если ТипЗнч(ЗначениеПараметра) = ТипСтрока Тогда
			СтрокаНеограниченнойДлины = ОпределитьУПоляНеограниченнаяДлина(МенеджерТипа, ИмяПараметра);
		Иначе
			СтрокаНеограниченнойДлины = Ложь;
		КонецЕсли;		
												
	Исключение
				
		СтрокаНеограниченнойДлины = Ложь;
				
	КонецПопытки;
	
	Возврат СтрокаНеограниченнойДлины;	
	
КонецФункции

Функция НайтиЭлементЗапросом(СтруктураСвойств, СвойстваПоиска, ТипОбъекта = Неопределено, 
	МенеджерТипа = Неопределено, КоличествоРеальныхСвойствДляПоиска = Неопределено)
	
	КоличествоСвойствДляПоиска = ?(КоличествоРеальныхСвойствДляПоиска = Неопределено, СвойстваПоиска.Количество(), КоличествоРеальныхСвойствДляПоиска);
	
	Если КоличествоСвойствДляПоиска = 0
		И СтруктураСвойств.ИмяТипа = "Перечисление" Тогда
		
		Возврат СтруктураСвойств.ПустаяСсылка;
		
	КонецЕсли;
	
	ТекстЗапроса       = СтруктураСвойств.СтрокаПоиска;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат СтруктураСвойств.ПустаяСсылка;
	КонецЕсли;
	
	ЗапросПоиска       = Новый Запрос();
		
	КоличествоСвойствПоКоторымУстановленПоиск = 0;
			
	Для каждого Свойство Из СвойстваПоиска Цикл
				
		ИмяПараметра = Свойство.Ключ;
		
		// не по всем параметрам можно искать
		Если    ИмяПараметра = "{УникальныйИдентификатор}"
			ИЛИ ИмяПараметра = "{ИмяПредопределенногоЭлемента}" Тогда
						
			Продолжить;
						
		КонецЕсли;
		
		ЗначениеПараметра = Свойство.Значение;
		ЗапросПоиска.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
		Попытка
			
			СтрокаНеограниченнойДлины = ОпределитьЭтотПараметрНеограниченнойДлинны(СтруктураСвойств, ЗначениеПараметра, ИмяПараметра);
			
		Исключение
					
			СтрокаНеограниченнойДлины = Ложь;
					
		КонецПопытки;
		
		КоличествоСвойствПоКоторымУстановленПоиск = КоличествоСвойствПоКоторымУстановленПоиск + 1;
				
		Если СтрокаНеограниченнойДлины Тогда
					
			ТекстЗапроса = ТекстЗапроса + ?(КоличествоСвойствПоКоторымУстановленПоиск > 1, " И ", "") + ИмяПараметра + " ПОДОБНО &" + ИмяПараметра;
					
		Иначе
					
			ТекстЗапроса = ТекстЗапроса + ?(КоличествоСвойствПоКоторымУстановленПоиск > 1, " И ", "") + ИмяПараметра + " = &" + ИмяПараметра;
					
		КонецЕсли;
								
	КонецЦикла;
	
	Если КоличествоСвойствПоКоторымУстановленПоиск = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПоиска.Текст = ТекстЗапроса;
	Результат = ЗапросПоиска.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
								
	Иначе
		
		// возвращаем первый найденный объект
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаНаОбъект = Выборка.Ссылка;
				
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ОпределитьПоТипуОбъектаАлгоритмПоследовательностиПолейПоиска(ТипСсылкиСтрокой, НастройкаПоиска)
	
	ЗначениеСоответстствия = СоответствиеАлгоритмовПоискаЭлементов.Получить(ТипСсылкиСтрокой);
	
	Если ЗначениеСоответстствия <> Неопределено Тогда
		
		НастройкаПоиска = ЗначениеСоответстствия.НастройкаПоиска;
		Возврат ЗначениеСоответстствия.АлгоритмПоиска;
		
	КонецЕсли;
	
	Попытка
	
		Для Каждого Элемент Из Правила Цикл
			
			Если Элемент.Значение.Приемник = ТипСсылкиСтрокой Тогда
				
				Если Элемент.Значение.ЕстьОбработчикПоследовательностьПолейПоиска = Истина Тогда
					
					АлгоритмПоиска = Элемент.Значение.ПоследовательностьПолейПоиска;
					НастройкаПоиска = ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных[Элемент.Значение.Имя];
					Если НастройкаПоиска = Неопределено Тогда 
						НастройкаПоиска = "";
					КонецЕсли;
					
					СоответствиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, Новый Структура("АлгоритмПоиска,НастройкаПоиска", АлгоритмПоиска, НастройкаПоиска));
					
					Возврат АлгоритмПоиска;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СоответствиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, Новый Структура("АлгоритмПоиска,НастройкаПоиска", "", ""));
		Возврат "";
	
	Исключение
		
		СоответствиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, Новый Структура("АлгоритмПоиска,НастройкаПоиска", "", ""));
		Возврат "";
	
    КонецПопытки;
	
КонецФункции

Функция НайтиСсылкуНаДокумент(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом, ПоискПоДатеНаРавенство)
	
	// попробуем документ по дате и номеру найти
	ИскатьЗапросом = ПоискПоДатеНаРавенство ИЛИ (КоличествоРеальныхСвойствДляПоиска <> 2);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДокумента = СвойстваПоиска["Номер"];
	ДатаДокумента  = СвойстваПоиска["Дата"];
					
	Если (НомерДокумента <> Неопределено) И (ДатаДокумента <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(НомерДокумента, ДатаДокумента);
																		
	Иначе
						
		// по дате и номеру найти не удалось - надо искать запросом
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, 
	СтруктураСвойств, СтрокаИменСвойствПоиска, ПоискПоДатеНаРавенство)
	
	// не нужно искать по имени предопределенного элемента и по уникальной ссылке на объект
	// нужно искать только по тем свойствам, которые имеются в строке имен свойств. Если там пусто, то по
	// всем имеющимся свойствам поиска
	
	Если ПустаяСтрока(СтрокаИменСвойствПоиска) Тогда
		
		ВременныеСвойстваПоиска = СвойстваПоиска;
		
	Иначе
		
		ГотоваяСтрокаДляРазбора = СтрЗаменить(СтрокаИменСвойствПоиска, " ", "");
		ДлинаСтроки = СтрДлина(ГотоваяСтрокаДляРазбора);
		Если Сред(ГотоваяСтрокаДляРазбора, ДлинаСтроки, 1) <> "," Тогда
			
			ГотоваяСтрокаДляРазбора = ГотоваяСтрокаДляРазбора + ",";
			
		КонецЕсли;
		
		ВременныеСвойстваПоиска = Новый Соответствие;
		Для Каждого ЭлементСвойств Из СвойстваПоиска Цикл
			
			ИмяПараметра = ЭлементСвойств.Ключ;
			Если Найти(ГотоваяСтрокаДляРазбора, ИмяПараметра + ",") > 0 Тогда
				
				ВременныеСвойстваПоиска.Вставить(ИмяПараметра, ЭлементСвойств.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СвойствоУникальныйИдентификатор = ВременныеСвойстваПоиска["{УникальныйИдентификатор}"];
	СвойствоИмяПредопределенного    = ВременныеСвойстваПоиска["{ИмяПредопределенногоЭлемента}"];
	
	КоличествоРеальныхСвойствДляПоиска = ВременныеСвойстваПоиска.Количество();
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоУникальныйИдентификатор <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоИмяПредопределенного    <> Неопределено, 1, 0);
	
	ИскатьЗапросом = Ложь;
	
	Если ИмяТипаОбъекта = "Документ" Тогда
		
		СсылкаНаОбъект = НайтиСсылкуНаДокумент(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом, ПоискПоДатеНаРавенство);
		
	Иначе
		
		ИскатьЗапросом = Истина;
		
	КонецЕсли;
	
	Если ИскатьЗапросом Тогда
		
		СсылкаНаОбъект = НайтиЭлементЗапросом(СтруктураСвойств, ВременныеСвойстваПоиска, ТипОбъекта, , КоличествоРеальныхСвойствДляПоиска);
		
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
КонецФункции

Процедура ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, ТипОбъекта, СвойстваПоиска, 
	СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект, ЗаписыватьНовыйОбъектВИнформационнуюБазу = Истина, ИзмененыРеквизитыОбъекта = Ложь,
	НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь, ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено)
	
	Если УстанавливатьУОбъектаВсеСвойстваПоиска <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если СозданныйОбъект = Неопределено Тогда
			СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		
	Исключение
		Возврат;
	КонецПопытки;
		
	ИзмененыРеквизитыОбъекта = УстановитьРеквизитыПоискаУОбъекта(СозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
			
	// если было то что изменено, тогда перезаписываем объект
	Если ИзмененыРеквизитыОбъекта
		И ЗаписыватьНовыйОбъектВИнформационнуюБазу Тогда
		
		ЗаписатьОбъектВИБ(СозданныйОбъект, ТипОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать,
	ПоискПоДатеНаРавенство = Ложь, ПараметрыОбъекта = Неопределено, Знач РежимПоискаОсновногоОбъекта)
	
	Если СвойстваПоиска = "" Тогда
		СвойстваПоиска = Новый Соответствие;		
	КонецЕсли;
	
	Если СвойстваПоискаНеЗамещать = "" Тогда
		СвойстваПоискаНеЗамещать = Новый Соответствие;		
	КонецЕсли;	
	
	ИнформацияОТипах = СоответствиеТиповДанныхДляЗагрузки()[ТипОбъекта];
	ПрочитатьСвойстваПоискаИзФайла(СвойстваПоиска, СвойстваПоискаНеЗамещать, ИнформацияОТипах, ПоискПоДатеНаРавенство, ПараметрыОбъекта, РежимПоискаОсновногоОбъекта);
	
КонецПроцедуры

Процедура ОпределитьДополнительныеПараметрыПоискаОбъекта(СвойстваПоиска, ТипОбъекта, СтруктураСвойств, ИмяТипаОбъекта, ЭтоОбъектДокумент)
	
	Если ТипОбъекта = Неопределено Тогда
		
		// попробуем определить тип по свойствам поиска
		ИмяТипаПриемника = СвойстваПоиска["{ИмяТипаВИБПриемнике}"];
		Если ИмяТипаПриемника = Неопределено Тогда
			ИмяТипаПриемника = СвойстваПоиска["{ИмяТипаВИБИсточнике}"];
		КонецЕсли;
		
		Если ИмяТипаПриемника <> Неопределено Тогда
			
			ТипОбъекта = Тип(ИмяТипаПриемника);	
			
		КонецЕсли;		
		
	КонецЕсли;
	
	СтруктураСвойств   = Менеджеры[ТипОбъекта];
	ИмяТипаОбъекта     = СтруктураСвойств.ИмяТипа;	
	
КонецПроцедуры

Функция НайтиПервоеПравилоПоСтруктуреСвойств(СтруктураСвойств)
	
	Попытка
		
		СтрокаПриемника = СтруктураСвойств.ТипСсылкиСтрокой;
		
		Если ПустаяСтрока(СтрокаПриемника) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаПравила Из Правила Цикл
			
			Если СтрокаПравила.Значение.Приемник = СтрокаПриемника Тогда
				Возврат СтрокаПравила.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
    КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Производит поиск объекта в информационной базе, если не найден создает новый
//
// Параметры:
//  ТипОбъекта     - тип искомого объекта
//  СвойстваПоиска - структура, содержащая свойства по которым производится поиск объекта
//  ОбъектНайден   - если Ложь, то объект не найден, а создан новый
//
// Возвращаемое значение:
//  Новый или найденный объект информационной базы
//  
Функция НайтиОбъектПоСсылке(ТипОбъекта, 
							СвойстваПоиска = "", 
							СвойстваПоискаНеЗамещать = "", 
							ОбъектНайден = Истина, 
							СозданныйОбъект = Неопределено, 
							НеСоздаватьОбъектЕслиНеНайден = Ложь,
							РежимПоискаОсновногоОбъекта = Ложь,
							СвойстваОбъектаМодифицированы = Ложь,
							НППГлобальнойСсылки = 0,
							НппСсылки = 0,
							ОбъектНайденПоПолямПоиска = Ложь,
							ИзвестнаяСсылкаУникальногоИдентификатора = Неопределено,
							ЭтоПоискОбъектаЗагрузки = Ложь,
							ПараметрыОбъекта = Неопределено,
							НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь,
							ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено,
							РегистрироватьОбъектНаУзлеОтправителе = Ложь,
							УникальныйИдентификаторСтрокой = "")
							
	// создаем свойства поиска объектов
	ПоискПоДатеНаРавенство = Ложь;
	СсылкаНаОбъект = Неопределено;
	СтруктураСвойств = Неопределено;
	ИмяТипаОбъекта = Неопределено;
	ЭтоОбъектДокумент = Ложь;
	ЧтениеСвойствСсылкиВыполнено = Ложь;
	
	НППГлобальнойСсылки = одАтрибут(ФайлОбмена, ТипЧисло, "ГНпп");
	НппСсылки           = одАтрибут(ФайлОбмена, ТипЧисло, "Нпп");
	
	// признак того, что объект необходимо зарегистрировать к выгрузке для узла-отправителя (отправка объекта назад)
	РегистрироватьОбъектНаУзлеОтправителе = одАтрибут(ФайлОбмена, ТипБулево, "РегистрироватьОбъектНаУзлеОтправителе");
	
	ФлагНеСоздаватьОбъектЕслиНеНайден = одАтрибут(ФайлОбмена, ТипБулево, "НеСоздаватьЕслиНеНайден");
	Если НЕ ЗначениеЗаполнено(ФлагНеСоздаватьОбъектЕслиНеНайден) Тогда
		ФлагНеСоздаватьОбъектЕслиНеНайден = Ложь;
	КонецЕсли;
	
	Если НеСоздаватьОбъектЕслиНеНайден = Неопределено Тогда
		НеСоздаватьОбъектЕслиНеНайден = Ложь;
	КонецЕсли;
	
	ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = НЕ РежимПоискаОсновногоОбъекта;
		
	НеСоздаватьОбъектЕслиНеНайден = НеСоздаватьОбъектЕслиНеНайден ИЛИ ФлагНеСоздаватьОбъектЕслиНеНайден;
	
	ФлагНеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = одАтрибут(ФайлОбмена, ТипБулево, "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике");
	Если НЕ ЗначениеЗаполнено(ФлагНеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике) Тогда
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь;
	Иначе
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = ФлагНеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;	
	КонецЕсли;
	
	ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ПараметрыОбъекта, РежимПоискаОсновногоОбъекта);
	ОпределитьДополнительныеПараметрыПоискаОбъекта(СвойстваПоиска, ТипОбъекта, СтруктураСвойств, ИмяТипаОбъекта, ЭтоОбъектДокумент);
			
	СвойствоУникальныйИдентификатор = СвойстваПоиска["{УникальныйИдентификатор}"];
	СвойствоИмяПредопределенного    = СвойстваПоиска["{ИмяПредопределенногоЭлемента}"];
	
	УникальныйИдентификаторСтрокой = СвойствоУникальныйИдентификатор;
	
	ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD
	                                                  И СвойствоУникальныйИдентификатор <> Неопределено;
	//
	
	// ПОИСК ССЫЛКИ ПО GUID ИЛИ ПО ИМЕНИ ПРЕДОПРЕДЕЛЕННОГО ЭЛЕМЕНТА
	
	// если это предопределенный элемент ищем по имени
	Если СвойствоИмяПредопределенного <> Неопределено Тогда
		
		АвтоматическиСоздаватьНовыйОбъект = НЕ НеСоздаватьОбъектЕслиНеНайден
			И НЕ ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
		
		СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств,
													ТипОбъекта,
													СвойстваПоиска,
													СвойстваПоискаНеЗамещать,
													ИмяТипаОбъекта,
													"{ИмяПредопределенногоЭлемента}",
													СвойствоИмяПредопределенного,
													ОбъектНайден,
													АвтоматическиСоздаватьНовыйОбъект,
													СозданныйОбъект,
													РежимПоискаОсновногоОбъекта,
													СвойстваОбъектаМодифицированы,
													,
													НппСсылки, НППГлобальнойСсылки,
													ПараметрыОбъекта,
													НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике,
													ОбъектБылСозданВТекущейИнформационнойБазе);
									
	ИначеЕсли СвойствоУникальныйИдентификатор <> Неопределено Тогда
			
		Если РежимПоискаОсновногоОбъекта Тогда
			
			АвтоматическиСоздаватьНовыйОбъект = НЕ НеСоздаватьОбъектЕслиНеНайден И НЕ ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
			
			СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств,
														ТипОбъекта,
														СвойстваПоиска,
														СвойстваПоискаНеЗамещать,
														ИмяТипаОбъекта,
														"{УникальныйИдентификатор}",
														СвойствоУникальныйИдентификатор,
														ОбъектНайден,
														АвтоматическиСоздаватьНовыйОбъект,
														СозданныйОбъект,
														РежимПоискаОсновногоОбъекта,
														СвойстваОбъектаМодифицированы,
														ИзвестнаяСсылкаУникальногоИдентификатора,
														НппСсылки,
														НППГлобальнойСсылки,
														ПараметрыОбъекта,
														НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике,
														ОбъектБылСозданВТекущейИнформационнойБазе);
			
			Если Не ЗначениеЗаполнено(СсылкаНаОбъект)
				И ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD Тогда
				
				СсылкаНаОбъект = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойствоУникальныйИдентификатор));
				ОбъектНайден = Ложь;
				СсылкаНаОбъектФиктивная = Истина;
				
			КонецЕсли;
			
			// в обычном режиме обмена ищем ссылку только по GUID; поля поиска не используем
			Возврат СсылкаНаОбъект;
			
		Иначе
			
			// для неосновных объектов (выгруженных по ссылке) просто получаем ссылку с заданным GUID
			СсылкаНаОбъект = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойствоУникальныйИдентификатор));
			
			Возврат СсылкаНаОбъект;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если СсылкаНаОбъект <> Неопределено 
		И СсылкаНаОбъект.Пустая() Тогда
				
		СсылкаНаОбъект = Неопределено;
				
	КонецЕсли;
		
	Если    СсылкаНаОбъект <> Неопределено
		ИЛИ СозданныйОбъект <> Неопределено Тогда
				
		// объект был найден по GUID или по имени предопределенного элемента; выходим
		Возврат СсылкаНаОбъект;
		
	КонецЕсли;
	
	// ПОИСК ССЫЛКИ ПО ПОЛЯМ ПОИСКА
	
	НомерВариантаПоиска = 1;
	СтрокаИменСвойствПоиска = "";
	ПредыдущаяСтрокаПоиска = Неопределено;
	ПрекратитьПоиск = Ложь;
	УстанавливатьУОбъектаВсеСвойстваПоиска = Истина;
	
	НастройкаПоиска = "";
	АлгоритмПоиска = ОпределитьПоТипуОбъектаАлгоритмПоследовательностиПолейПоиска(СтруктураСвойств.ТипСсылкиСтрокой, НастройкаПоиска);
	
	ЕстьАлгоритмПоиска = Не ПустаяСтрока(АлгоритмПоиска);
	
	Пока НомерВариантаПоиска <= 10
		И ЕстьАлгоритмПоиска Цикл
							
		Попытка
			
			Выполнить(АлгоритмПоиска);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(73, ОписаниеОшибки(), "", "", 
				ТипОбъекта, Неопределено, "Последовательность полей поиска");				
							
		КонецПопытки;
			
		НеНужноВыполнятьПоиск = ПрекратитьПоиск = Истина 
			ИЛИ СтрокаИменСвойствПоиска = ПредыдущаяСтрокаПоиска
			ИЛИ ЗначениеЗаполнено(СсылкаНаОбъект);				
			
		Если НЕ НеНужноВыполнятьПоиск Тогда
	
			// сам поиск непосредственно
			СсылкаНаОбъект = НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, СтруктураСвойств, 
				СтрокаИменСвойствПоиска, ПоискПоДатеНаРавенство);
				
			НеНужноВыполнятьПоиск = ЗначениеЗаполнено(СсылкаНаОбъект);	
				
		КонецЕсли;
		
		Если НеНужноВыполнятьПоиск Тогда
		
			Если РежимПоискаОсновногоОбъекта Тогда
			
				ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, ТипОбъекта, СвойстваПоиска, 
					СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект, НЕ РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы,
					НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, ОбъектБылСозданВТекущейИнформационнойБазе);	
					
			КонецЕсли;
						
			Прервать;
			
		КонецЕсли;	
	
		НомерВариантаПоиска = НомерВариантаПоиска + 1;
		ПредыдущаяСтрокаПоиска = СтрокаИменСвойствПоиска;
		
	КонецЦикла;
		
	Если Не ЕстьАлгоритмПоиска Тогда
	
		// сам поиск непосредственно и без алгоритма поиска
		СсылкаНаОбъект = НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, СтруктураСвойств, 
			СтрокаИменСвойствПоиска, ПоискПоДатеНаРавенство);	
		
	КонецЕсли;
		
	Если РежимПоискаОсновногоОбъекта
		И ЗначениеЗаполнено(СсылкаНаОбъект)
		И (ИмяТипаОбъекта = "Документ" 
		ИЛИ ИмяТипаОбъекта = "Задача"
		ИЛИ ИмяТипаОбъекта = "БизнесПроцесс") Тогда
		
		// если у документа дата есть в свойствах поиска - то устанавливаем ее
		ДатаПустая = Не ЗначениеЗаполнено(СвойстваПоиска["Дата"]);
		МожноЗамещать = (Не ДатаПустая) 
			И (СвойстваПоискаНеЗамещать["Дата"] = Неопределено);
			
		Если МожноЗамещать Тогда
			
			Если СозданныйОбъект = Неопределено Тогда
				СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
			
			СозданныйОбъект.Дата = СвойстваПоиска["Дата"];
				
		КонецЕсли;
		
	КонецЕсли;		
	
	// создавать новый объект нужно не всегда
	Если (СсылкаНаОбъект = Неопределено
			ИЛИ СсылкаНаОбъект.Пустая())
		И СозданныйОбъект = Неопределено Тогда // объект не найден по полям поиска
		
		Если ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD Тогда
			
			СсылкаНаОбъект = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойствоУникальныйИдентификатор));	
			СсылкаНаОбъектФиктивная = Истина;
			
		ИначеЕсли НЕ НеСоздаватьОбъектЕслиНеНайден Тогда
		
			СсылкаНаОбъект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, СозданныйОбъект, 
				НЕ РежимПоискаОсновногоОбъекта, ИзвестнаяСсылкаУникальногоИдентификатора, НппСсылки, НППГлобальнойСсылки, 
				НайтиПервоеПравилоПоСтруктуреСвойств(СтруктураСвойств), ПараметрыОбъекта, УстанавливатьУОбъектаВсеСвойстваПоиска);		
				
			СвойстваОбъектаМодифицированы = Истина;
				
		КонецЕсли;
			
		ОбъектНайден = Ложь;
		
	Иначе
		
		// объект найден по полям поиска
		ОбъектНайден = Истина;
			
	КонецЕсли;
	
	Если СсылкаНаОбъект <> Неопределено
		И СсылкаНаОбъект.Пустая() Тогда
		
		СсылкаНаОбъект = Неопределено;
		
	КонецЕсли;
	
	ОбъектНайденПоПолямПоиска = ОбъектНайден;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции 

Процедура УстановитьСвойстваКоллекцииФайлаОбмена(КоллекцияФайлаОбмена, ИнформацияОТипах, ИмяВетки, ПараметрыОбъекта, НомерЗаписи)
	
	СтрокаКоллекции = КоллекцияФайлаОбмена.Добавить();
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство" ИЛИ
			 ИмяУзла = "ЗначениеПараметра" Тогда
			 
			ЭтоПараметр = (ИмяУзла = "ЗначениеПараметра");
			
			Имя = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			
			ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
			
			ЗначениеСвойства = ПрочитатьСвойство(ТипСвойства);
			
			Если ЭтоПараметр Тогда
				
				ДобавитьСложныйПараметрПриНеобходимости(ПараметрыОбъекта, ИмяВетки, НомерЗаписи, Имя, ЗначениеСвойства);
				
			Иначе
				
				СтрокаКоллекции[Имя] = ЗначениеСвойства;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт" Тогда
			
			одПропустить(ФайлОбмена);
				
		ИначеЕсли (ИмяУзла = "Запись") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает табличную часть объекта
//
Процедура ЗагрузитьТабличнуюЧасть(Объект, ИмяТабличнойЧасти, ОбщаяИнформацияОТипеДокумента, НужноЗаписатьОбъект, ПараметрыОбъекта, ПКО)
	
	Перем КлючевыеПоляПоиска;
	Перем МассивКлючевыхПолейПоиска;
	
	Результат = ПолучитьКлючевыеПоляПоискаПоТабличнойЧасти(ПКО, ИмяТабличнойЧасти, МассивКлючевыхПолейПоиска, КлючевыеПоляПоиска);
	
	Если Не Результат Тогда
		одПропустить(ФайлОбмена);
		Возврат;
	КонецЕсли;
	
	ТабличнаяЧастьОбъекта = Объект[ИмяТабличнойЧасти];
	
	ИмяКолонкиИтератора = "КлючевоеПолеИтератораЗначений";
	
	КоллекцияОбъекта     = ТабличнаяЧастьОбъекта.Выгрузить();
	КоллекцияФайлаОбмена = КоллекцияОбъекта.СкопироватьКолонки();
	
	ЗаполнитьКоллекциюФайлаОбмена(КоллекцияФайлаОбмена, ИмяТабличнойЧасти, ОбщаяИнформацияОТипеДокумента, ПараметрыОбъекта, МассивКлючевыхПолейПоиска);
	
	ДобавитьИтераторТаблице(КоллекцияФайлаОбмена, +1, ИмяКолонкиИтератора);
	ДобавитьИтераторТаблице(КоллекцияОбъекта,     -1, ИмяКолонкиИтератора);
	
	КоллекцияГруппировки = ИнициализацияТаблицыПоКлючевымПолям(МассивКлючевыхПолейПоиска);
	КоллекцияГруппировки.Колонки.Добавить(ИмяКолонкиИтератора);
	
	ЗаполнитьЗначенияСвойствТаблицы(КоллекцияФайлаОбмена, КоллекцияГруппировки);
	ЗаполнитьЗначенияСвойствТаблицы(КоллекцияОбъекта,     КоллекцияГруппировки);
	
	КоллекцияГруппировки.Свернуть(КлючевыеПоляПоиска, ИмяКолонкиИтератора);
	
	// очищаем табличную часть объекта
	Попытка
		ТабличнаяЧастьОбъекта.Очистить();
	Исключение
		
		Текст = НСтр("ru = 'Имя табличной части: %1'");
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(83, ОписаниеОшибки());
		ЗП.Объект     = Объект;
		ЗП.ТипОбъекта = ТипЗнч(Объект);
		ЗП.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Текст, ИмяТабличнойЧасти);
		ЗаписатьВПротоколВыполнения(83, ЗП);
		
		одПропустить(ФайлОбмена);
		Возврат;
	КонецПопытки;
	
	Для Каждого СтрокаКоллекции ИЗ КоллекцияГруппировки Цикл
		
		// получаем структуру отбора
		Отбор = Новый Структура();
		
		Для Каждого ИмяПоля ИЗ МассивКлючевыхПолейПоиска Цикл
			
			Отбор.Вставить(ИмяПоля, СтрокаКоллекции[ИмяПоля]);
			
		КонецЦикла;
		
		Если СтрокаКоллекции[ИмяКолонкиИтератора] = 0 Тогда
			
			//заполняем строки табличной части из старой версии объекта
			СтрокиКоллекцииОбъекта = КоллекцияОбъекта.НайтиСтроки(Отбор);
			
		Иначе
			
			// заполняем строки табличной части из коллекции файла обмена
			СтрокиКоллекцииОбъекта = КоллекцияФайлаОбмена.НайтиСтроки(Отбор);
			
		КонецЕсли;
		
		// добавляем строки табличной части объекта
		Для Каждого СтрокаКоллекции ИЗ СтрокиКоллекцииОбъекта Цикл
			
			ЗаполнитьЗначенияСвойств(ТабличнаяЧастьОбъекта.Добавить(), СтрокаКоллекции);
			
		КонецЦикла;
		
		НужноЗаписатьОбъект = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗначенияСвойствТаблицы(КоллекцияИсточник, КоллекцияПриемник)
	
	Для Каждого ЭлементКоллекции ИЗ КоллекцияИсточник Цикл
		
		ЗаполнитьЗначенияСвойств(КоллекцияПриемник.Добавить(), ЭлементКоллекции);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ИнициализацияТаблицыПоКлючевымПолям(МассивКлючевыхПолейПоиска)
	
	Коллекция = Новый ТаблицаЗначений;
	
	Для Каждого ИмяПоля ИЗ МассивКлючевыхПолейПоиска Цикл
		
		Коллекция.Колонки.Добавить(ИмяПоля);
		
	КонецЦикла;
	
	Возврат Коллекция;
	
КонецФункции

Процедура ДобавитьИтераторТаблице(Коллекция, Значение, ИмяКолонкиИтератора)
	
	Коллекция.Колонки.Добавить(ИмяКолонкиИтератора);
	Коллекция.ЗаполнитьЗначения(Значение, ИмяКолонкиИтератора);
	
КонецПроцедуры

Функция ПолучитьМассивИзСтроки(Знач СтрокаЭлементов)
	
	Результат = Новый Массив;
	
	СтрокаЭлементов = СтрокаЭлементов + ",";
	
	Пока Истина Цикл
		
		Поз = Найти(СтрокаЭлементов, ",");
		
		Если Поз = 0 Тогда
			Прервать; // выход
		КонецЕсли;
		
		Элемент = Лев(СтрокаЭлементов, Поз - 1);
		
		Результат.Добавить(СокрЛП(Элемент));
		
		СтрокаЭлементов = Сред(СтрокаЭлементов, Поз + 1);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьКоллекциюФайлаОбмена(КоллекцияФайлаОбмена, ИмяТабличнойЧасти, ОбщаяИнформацияОТипеДокумента, ПараметрыОбъекта, МассивКлючевыхПолейПоиска)
	
	ИмяВетки = ИмяТабличнойЧасти + "ТабличнаяЧасть";
	
	Если ОбщаяИнформацияОТипеДокумента <> Неопределено Тогда
		ИнформацияОТипах = ОбщаяИнформацияОТипеДокумента[ИмяВетки];
	Иначе
		ИнформацияОТипах = Неопределено;
	КонецЕсли;
	
	НомерЗаписи = 0;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Запись" Тогда
			
			УстановитьСвойстваКоллекцииФайлаОбмена(КоллекцияФайлаОбмена, ИнформацияОТипах, ИмяВетки, ПараметрыОбъекта, НомерЗаписи);
			
			НомерЗаписи = НомерЗаписи + 1;
			
		ИначеЕсли (ИмяУзла = "ТабличнаяЧасть") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКлючевыеПоляПоискаПоТабличнойЧасти(ПКО, ИмяТабличнойЧасти, МассивКлючевыхПолейПоиска, КлючевыеПоляПоиска)
	
	Если ПКО = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДанныеПоискаПоТЧ = ПКО.ПоискПоТабличнымЧастям.Найти("ТабличнаяЧасть." + ИмяТабличнойЧасти, "ИмяЭлемента");
	
	Если ДанныеПоискаПоТЧ = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ДанныеПоискаПоТЧ.Валидное Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивКлючевыхПолейПоиска = ДанныеПоискаПоТЧ.МассивКлючевыхПолейПоиска;
	КлючевыеПоляПоиска        = ДанныеПоискаПоТЧ.КлючевыеПоляПоиска;
	
	Возврат Истина;

КонецФункции

// Загружает движения объекта
//
// Параметры:
//  Объект         - объект, движения которого загружаем
//  Имя            - имя регистра
//  Очистить       - если Истина, то движения предварительно очищается
// 
Процедура ЗагрузитьДвижения(Объект, Имя, Очистить, ОбщаяИнформацияОТипеДокумента, НужноЗаписатьОбъект, 
	ПараметрыОбъекта, Правило)
	
	ИмяДвижений = Имя + "НаборЗаписей";
	Если ОбщаяИнформацияОТипеДокумента <> Неопределено Тогда
		ИнформацияОТипах = ОбщаяИнформацияОТипеДокумента[ИмяДвижений];
	Иначе
	    ИнформацияОТипах = Неопределено;
	КонецЕсли;
	
	ДанныеПоискаПоТЧ = Неопределено;
	
	КопияТЧДляПоиска = Неопределено;
	
	Движения = Объект.Движения[Имя];
	
	Движения.Прочитать();

	Если Очистить
		И Движения.Количество() <> 0 Тогда
		
		НужноЗаписатьОбъект = Истина;
		
		Если ДанныеПоискаПоТЧ <> Неопределено Тогда 
			КопияТЧДляПоиска = Движения.Выгрузить();
		КонецЕсли;
		
        Движения.Очистить();
		
	ИначеЕсли ДанныеПоискаПоТЧ <> Неопределено Тогда
		
		КопияТЧДляПоиска = Движения.Выгрузить();	
		
	КонецЕсли;
	
	НомерЗаписи = 0;
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
			
		Если      ИмяУзла = "Запись" Тогда
			
			Запись = Движения.Добавить();
			НужноЗаписатьОбъект = Истина;
			УстановитьСвойстваЗаписи(Запись, ИнформацияОТипах, ПараметрыОбъекта, ИмяДвижений, НомерЗаписи, ДанныеПоискаПоТЧ, КопияТЧДляПоиска);
			
			НомерЗаписи = НомерЗаписи + 1;
			
		ИначеЕсли (ИмяУзла = "НаборЗаписей") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает свойства объекта (записи)
//
// Параметры:
//  Запись         - объект, свойства которого устанавливаем
//                   Например, строка табличной части или запись регистра
//
Процедура УстановитьСвойстваЗаписи(Запись, ИнформацияОТипах, 
	ПараметрыОбъекта, ИмяВетки, НомерЗаписи,
	ДанныеПоискаПоТЧ = Неопределено, КопияТЧДляПоиска = Неопределено)
	
	НужноОрганизоватьПоискПоТЧ = (ДанныеПоискаПоТЧ <> Неопределено)
								И (КопияТЧДляПоиска <> Неопределено)
								И КопияТЧДляПоиска.Количество() <> 0;
								
	Если НужноОрганизоватьПоискПоТЧ Тогда
									
		СтруктураЧтенияСвойств = Новый Структура();
		СтруктураЧтенияСубконто = Новый Структура();
		
	КонецЕсли;
		
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			
			ЭтоПараметр = (ИмяУзла = "ЗначениеПараметра");
			
			Имя = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			
			Если Имя = "ВидДвижения" И Найти(Метаданные.НайтиПоТипу(ТипЗнч(Запись)).ПолноеИмя(), "РегистрНакопления") Тогда
				
				ТипСвойства = ТипВидДвиженияНакопления;
				
			Иначе
				
				ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
				
			КонецЕсли;
			
			ЗначениеСвойства = ПрочитатьСвойство(ТипСвойства);
			
			Если ЭтоПараметр Тогда
				ДобавитьСложныйПараметрПриНеобходимости(ПараметрыОбъекта, ИмяВетки, НомерЗаписи, Имя, ЗначениеСвойства);			
			ИначеЕсли НужноОрганизоватьПоискПоТЧ Тогда 
				СтруктураЧтенияСвойств.Вставить(Имя, ЗначениеСвойства);	
			Иначе
				Запись[Имя] = ЗначениеСвойства;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт" Тогда
			
			// поиск по субконто не реализован
			
			Ключ = Неопределено;
			Значение = Неопределено;
			
			Пока ФайлОбмена.Прочитать() Цикл
				
				ИмяУзла = ФайлОбмена.ЛокальноеИмя;
								
				Если ИмяУзла = "Свойство" Тогда
					
					Имя = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
					ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
										
					Если Имя = "Ключ" Тогда
						
						Ключ = ПрочитатьСвойство(ТипСвойства);
						
					ИначеЕсли Имя = "Значение" Тогда
						
						Значение = ПрочитатьСвойство(ТипСвойства);
						
					КонецЕсли;
					
				ИначеЕсли (ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
					
					Прервать;
					
				Иначе
					
					ЗаписатьВПротоколВыполнения(9);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Ключ <> Неопределено 
				И Значение <> Неопределено Тогда
				
				Если НЕ НужноОрганизоватьПоискПоТЧ Тогда
				
					Запись[ИмяУзла][Ключ] = Значение;
					
				Иначе
					
					СоответствиеЗаписи = Неопределено;
					Если НЕ СтруктураЧтенияСубконто.Свойство(ИмяУзла, СоответствиеЗаписи) Тогда
						СоответствиеЗаписи = Новый Соответствие;
						СтруктураЧтенияСубконто.Вставить(ИмяУзла, СоответствиеЗаписи);
					КонецЕсли;
					
					СоответствиеЗаписи.Вставить(Ключ, Значение);
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли (ИмяУзла = "Запись") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноОрганизоватьПоискПоТЧ Тогда
		
		СтруктураПоиска = Новый Структура();
		
		Для Каждого ЭлементПоиска Из  ДанныеПоискаПоТЧ.ПоляПоискаТЧ Цикл
			
			ЗначениеЭлемента = Неопределено;
			СтруктураЧтенияСвойств.Свойство(ЭлементПоиска, ЗначениеЭлемента);
			
			СтруктураПоиска.Вставить(ЭлементПоиска, ЗначениеЭлемента);		
			
		КонецЦикла;		
		
		МассивРезультатовПоиска = КопияТЧДляПоиска.НайтиСтроки(СтруктураПоиска);
		
		НайденаЗапись = МассивРезультатовПоиска.Количество() > 0;
		Если НайденаЗапись Тогда
			ЗаполнитьЗначенияСвойств(Запись, МассивРезультатовПоиска[0]);
		КонецЕсли;
		
		// поверх заполнение свойствами и значением субконто
		Для Каждого Эл Из СтруктураЧтенияСвойств Цикл
			
			Запись[Эл.Ключ] = Эл.Значение;
			
		КонецЦикла;
		
		Для Каждого ЭлИмя Из СтруктураЧтенияСубконто Цикл
			
			Для Каждого ЭлКлюч Из ЭлИмя.Значение Цикл
			
				Запись[ЭлИмя.Ключ][ЭлКлюч.Ключ] = ЭлКлюч.Значение;
				
			КонецЦикла;
			
		КонецЦикла;			
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойстваЗаписи()

// Загружает объект типа ОписаниеТипов из указанного xml-источника
//
// Параметры:
//  Источник         - xml-источник
// 
Функция ЗагрузитьТипыОбъекта(Источник)

	// КвалификаторыДаты

	СоставДаты =  одАтрибут(Источник, ТипСтрока,  "СоставДаты");

	
	// КвалификаторыСтроки

	Длина           =  одАтрибут(Источник, ТипЧисло,  "Длина");
	ДлинаДопустимая =  одАтрибут(Источник, ТипСтрока, "ДопустимаяДлина");

	
	// КвалификаторыЧисла

	Разрядность             = одАтрибут(Источник, ТипЧисло,  "Разрядность");
	РазрядностьДробнойЧасти = одАтрибут(Источник, ТипЧисло,  "РазрядностьДробнойЧасти");
	ЗнакДопустимый          = одАтрибут(Источник, ТипСтрока, "ДопустимыйЗнак");


	// Читаем массив типов
	
	МассивТипов = Новый Массив;
	
	Пока Источник.Прочитать() Цикл
		ИмяУзла = Источник.ЛокальноеИмя;
		
		Если      ИмяУзла = "Тип" Тогда
			МассивТипов.Добавить(Тип(одЗначениеЭлемента(Источник, ТипСтрока)));
		ИначеЕсли (ИмяУзла = "Типы") И ( Источник.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			Прервать;
		Иначе
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;


	
	Если МассивТипов.Количество() > 0 Тогда
		
		// КвалификаторыДаты
		
		Если СоставДаты = "Дата" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ИначеЕсли СоставДаты = "ДатаВремя" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		ИначеЕсли СоставДаты = "Время" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.Время);
		Иначе
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КонецЕсли; 


		// КвалификаторыЧисла
		
		Если Разрядность > 0 Тогда
			Если ЗнакДопустимый = "Неотрицательный" Тогда
				Знак = ДопустимыйЗнак.Неотрицательный;
			Иначе
				Знак = ДопустимыйЗнак.Любой;
			КонецЕсли; 
			КвалификаторыЧисла  = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак);
		Иначе
			КвалификаторыЧисла  = Новый КвалификаторыЧисла();
		КонецЕсли; 


		// КвалификаторыСтроки

		Если Длина > 0 Тогда
			Если ДлинаДопустимая = "Фиксированная" Тогда
				ДлинаДопустимая = ДопустимаяДлина.Фиксированная;
			Иначе
				ДлинаДопустимая = ДопустимаяДлина.Переменная;
			КонецЕсли;
			КвалификаторыСтроки = Новый КвалификаторыСтроки(Длина, ДлинаДопустимая);
		Иначе
			КвалификаторыСтроки = Новый КвалификаторыСтроки();
		КонецЕсли; 
        
		Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции // ЗагрузитьТипыОбъекта()

Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	Если (ПометкаУдаления = Неопределено)
		И (Объект.ПометкаУдаления <> Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ПометкаДляУстановки = ?(ПометкаУдаления <> Неопределено, ПометкаУдаления, Ложь);
	
	УстановитьОбменДаннымиЗагрузка(Объект);
		
	// дли иерархических объектов пометку удаления только у конкретного объекта ставим
	Если ИмяТипаОбъекта = "Справочник"
		ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик"
		ИЛИ ИмяТипаОбъекта = "ПланСчетов" Тогда
			
		Если Не ЭтоПредопределенныйЭлемент(Объект) Тогда
			
			Объект.УстановитьПометкуУдаления(ПометкаДляУстановки, Ложь);
			
		КонецЕсли;
		
	Иначе
		
		Объект.УстановитьПометкуУдаления(ПометкаДляУстановки);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьДокументВБезопасномРежиме(Документ, ТипОбъекта)
	
	Если Документ.Проведен Тогда
						
		Документ.Проведен = Ложь;
			
	КонецЕсли;		
								
	ЗаписатьОбъектВИБ(Документ, ТипОбъекта);	
	
КонецПроцедуры

Функция ПолучитьОбъектПоСсылкеИДопИнформации(СозданныйОбъект, Ссылка)
	
	// если объект создали, то работаем с ним, если нашли - получаем объект
	Если СозданныйОбъект <> Неопределено Тогда
		Объект = СозданныйОбъект;
	Иначе
		Если Ссылка.Пустая() Тогда
			Объект = Неопределено;
		Иначе
			Объект = Ссылка.ПолучитьОбъект();
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

Процедура КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Источник, ТипОбъекта, ГНпп = 0)
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Если Нпп <> 0 Тогда
			СтрокаСообщения = "Загрузка объекта № " + Нпп;
		Иначе
			СтрокаСообщения = "Загрузка объекта № " + ГНпп;
		КонецЕсли;
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола();
		
		Если Не ПустаяСтрока(ИмяПравила) Тогда
			
			ЗП.ИмяПКО = ИмяПравила;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Источник) Тогда
			
			ЗП.Источник = Источник;
			
		КонецЕсли;
		
		ЗП.ТипОбъекта = ТипОбъекта;
		ЗаписатьВПротоколВыполнения(СтрокаСообщения, ЗП, Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьПараметрПриНеобходимости(ПараметрыДанных, ИмяПараметра, ЗначениеПараметра)
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыДанных.Вставить(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

Процедура ДобавитьСложныйПараметрПриНеобходимости(ПараметрыДанных, ИмяВеткиПараметров, НомерСтроки, ИмяПараметра, ЗначениеПараметра)
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Соответствие;
	КонецЕсли;
	
	ТекущиеДанныеПараметра = ПараметрыДанных[ИмяВеткиПараметров];
	
	Если ТекущиеДанныеПараметра = Неопределено Тогда
		
		ТекущиеДанныеПараметра = Новый ТаблицаЗначений;
		ТекущиеДанныеПараметра.Колонки.Добавить("НомерСтроки");
		ТекущиеДанныеПараметра.Колонки.Добавить("ИмяПараметра");
		ТекущиеДанныеПараметра.Индексы.Добавить("НомерСтроки");
		
		ПараметрыДанных.Вставить(ИмяВеткиПараметров, ТекущиеДанныеПараметра);	
		
	КонецЕсли;
	
	Если ТекущиеДанныеПараметра.Колонки.Найти(ИмяПараметра) = Неопределено Тогда
		ТекущиеДанныеПараметра.Колонки.Добавить(ИмяПараметра);
	КонецЕсли;		
	
	ДанныеСтроки = ТекущиеДанныеПараметра.Найти(НомерСтроки, "НомерСтроки");
	Если ДанныеСтроки = Неопределено Тогда
		ДанныеСтроки = ТекущиеДанныеПараметра.Добавить();
		ДанныеСтроки.НомерСтроки = НомерСтроки;
	КонецЕсли;		
	
	ДанныеСтроки[ИмяПараметра] = ЗначениеПараметра;
	
КонецПроцедуры

Функция ПрочитатьИнформациюОРегистрацииОбъекта()
	
	// присваиваем ПЕРЕКРЕСТНЫЕ значения переменным; РС симметричен
	УникальныйИдентификаторПриемника = одАтрибут(ФайлОбмена, ТипСтрока, "УникальныйИдентификаторИсточника");
	УникальныйИдентификаторИсточника = одАтрибут(ФайлОбмена, ТипСтрока, "УникальныйИдентификаторПриемника");
	ТипПриемника                     = одАтрибут(ФайлОбмена, ТипСтрока, "ТипИсточника");
	ТипИсточника                     = одАтрибут(ФайлОбмена, ТипСтрока, "ТипПриемника");
	ПустойНабор                      = одАтрибут(ФайлОбмена, ТипБулево, "ПустойНабор");
	
	Попытка
		УникальныйИдентификаторИсточника = Новый УникальныйИдентификатор(УникальныйИдентификаторИсточника);
	Исключение
		
		одПропустить(ФайлОбмена, "ИнформацияОРегистрацииОбъекта");
		Возврат Неопределено;
		
	КонецПопытки;
	
	// получаем структуру свойств источника по типу источника
	СтруктураСвойств = Менеджеры[Тип(ТипИсточника)];
	
	// получаем ссылку источника по GUID
	УникальныйИдентификаторИсточника = СтруктураСвойств.Менеджер.ПолучитьСсылку(УникальныйИдентификаторИсточника);
	
	НаборЗаписей = МенеджерРегистраСоответствийОбъектов.СоздатьНаборЗаписей();
	
	// отбор для набора записей
	НаборЗаписей.Отбор.УзелИнформационнойБазы.Установить(УзелОбменаЗагрузкаДанных);
	НаборЗаписей.Отбор.УникальныйИдентификаторИсточника.Установить(УникальныйИдентификаторИсточника);
	НаборЗаписей.Отбор.УникальныйИдентификаторПриемника.Установить(УникальныйИдентификаторПриемника);
	НаборЗаписей.Отбор.ТипИсточника.Установить(ТипИсточника);
	НаборЗаписей.Отбор.ТипПриемника.Установить(ТипПриемника);
	
	Если Не ПустойНабор Тогда
		
		// добавляем одну запись в набор
		СтрокаНабора = НаборЗаписей.Добавить();
		
		СтрокаНабора.УзелИнформационнойБазы           = УзелОбменаЗагрузкаДанных;
		СтрокаНабора.УникальныйИдентификаторИсточника = УникальныйИдентификаторИсточника;
		СтрокаНабора.УникальныйИдентификаторПриемника = УникальныйИдентификаторПриемника;
		СтрокаНабора.ТипИсточника                     = ТипИсточника;
		СтрокаНабора.ТипПриемника                     = ТипПриемника;
		
	КонецЕсли;
	
	// записываем набор записей
	ЗаписатьОбъектВИБ(НаборЗаписей, "РегистрСведенийНаборЗаписей.СоответствиеОбъектовИнформационныхБаз");
	
	одПропустить(ФайлОбмена, "ИнформацияОРегистрацииОбъекта");
	
	Возврат НаборЗаписей;
	
КонецФункции

Процедура ВыгрузитьКорректировкуИнформацииСопоставления()
	
	ПравилаКонвертации = ТаблицаПравилКонвертации.Скопировать(Новый Структура("СинхронизироватьПоИдентификатору", Истина), "ТипИсточника, ТипПриемника");
	ПравилаКонвертации.Свернуть("ТипИсточника, ТипПриемника");
	
	Для Каждого Правило Из ПравилаКонвертации Цикл
		
		Менеджер = Менеджеры.Получить(Тип(Правило.ТипИсточника)).Менеджер;
		
		Если Менеджер <> Неопределено Тогда
			
			Выборка = Менеджер.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				УникальныйИдентификатор = Строка(Выборка.Ссылка.УникальныйИдентификатор());
				
				Приемник = СоздатьУзел("КорректировкаИнформацииОРегистрацииОбъекта");
				
				УстановитьАтрибут(Приемник, "УникальныйИдентификатор", УникальныйИдентификатор);
				УстановитьАтрибут(Приемник, "ТипИсточника",            Правило.ТипИсточника);
				УстановитьАтрибут(Приемник, "ТипПриемника",            Правило.ТипПриемника);
				
				Приемник.ЗаписатьКонецЭлемента(); // КорректировкаИнформацииОРегистрацииОбъекта
				
				ЗаписатьВФайл(Приемник);
				
				Инкремент(ПолеСчетчикВыгруженныхОбъектов);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьКорректировкуИнформацииСопоставления()
	
	// присваиваем ПЕРЕКРЕСТНЫЕ значения переменным; РС симметричен
	УникальныйИдентификатор = одАтрибут(ФайлОбмена, ТипСтрока, "УникальныйИдентификатор");
	ТипПриемника            = одАтрибут(ФайлОбмена, ТипСтрока, "ТипИсточника");
	ТипИсточника            = одАтрибут(ФайлОбмена, ТипСтрока, "ТипПриемника");
	
	УникальныйИдентификаторПриемника = УникальныйИдентификатор;
	УникальныйИдентификаторИсточника = УникальныйИдентификатор;
	
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("УзелИнформационнойБазы", УзелОбменаЗагрузкаДанных);
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("УникальныйИдентификаторПриемника", УникальныйИдентификаторПриемника);
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("ТипПриемника", ТипПриемника);
	ЗапросСоответствиеОбъектовИнформационныхБаз.УстановитьПараметр("ТипИсточника", ТипИсточника);
	
	РезультатЗапроса = ЗапросСоответствиеОбъектовИнформационныхБаз.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат; // информация в регистре уже имеется; пропускаем данные
	КонецЕсли;
	
	Попытка
		УникальныйИдентификатор = УникальныйИдентификаторИсточника;
		УникальныйИдентификаторИсточника = Новый УникальныйИдентификатор(УникальныйИдентификаторИсточника);
	Исключение
		Возврат;
	КонецПопытки;
	
	// получаем структуру свойств источника по типу источника
	СтруктураСвойств = Менеджеры[Тип(ТипИсточника)];
	
	// получаем ссылку источника по GUID
	УникальныйИдентификаторИсточника = СтруктураСвойств.Менеджер.ПолучитьСсылку(УникальныйИдентификаторИсточника);
	
	Объект = УникальныйИдентификаторИсточника.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Возврат; // такого объекта в базе нет; пропускаем данные
	КонецЕсли;
	
	// добавляем запись в регистр сопоставления
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелОбменаЗагрузкаДанных);
	СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", УникальныйИдентификаторИсточника);
	СтруктураЗаписи.Вставить("УникальныйИдентификаторПриемника", УникальныйИдентификаторПриемника);
	СтруктураЗаписи.Вставить("ТипПриемника",                     ТипПриемника);
	СтруктураЗаписи.Вставить("ТипИсточника",                     ТипИсточника);
	
	РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи);
	
	Инкремент(ПолеСчетчикЗагруженныхОбъектов);
	
КонецПроцедуры

Функция ПрочитатьНаборЗаписейРегистра()
	
	Нпп						= одАтрибут(ФайлОбмена, ТипЧисло,  "Нпп");
	ИмяПравила				= одАтрибут(ФайлОбмена, ТипСтрока, "ИмяПравила");
	ТипОбъектаСтрокой       = одАтрибут(ФайлОбмена, ТипСтрока, "Тип");
	ПриоритетОбъектаОбмена  = ПолучитьПриоритетОбъектаОбмена(ФайлОбмена);
	
	ЭтоПустойНабор			= одАтрибут(ФайлОбмена, ТипБулево, "ПустойНабор");
	Если Не ЗначениеЗаполнено(ЭтоПустойНабор) Тогда
		ЭтоПустойНабор = Ложь;
	КонецЕсли;
	
	ТипОбъекта 				= Тип(ТипОбъектаСтрокой);
	Источник 				= Неопределено;
	СвойстваПоиска 			= Неопределено;
	
	КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Неопределено, ТипОбъекта);
	
	ИмяТипаСтрокиРегистра = СтрЗаменить(ТипОбъектаСтрокой, "РегистрСведенийНаборЗаписей.", "РегистрСведенийЗапись.");
	ИмяРегистра = СтрЗаменить(ТипОбъектаСтрокой, "РегистрСведенийНаборЗаписей.", "");
	
	ТипСтрокиНабораРегистра = Тип(ИмяТипаСтрокиРегистра);
	
	СтруктураСвойств = Менеджеры[ТипСтрокиНабораРегистра];
	ИмяТипаОбъекта   = СтруктураСвойств.ИмяТипа;
	
	ИнформацияОТипах = СоответствиеТиповДанныхДляЗагрузки()[ТипСтрокиНабораРегистра];
    	
	Объект          = Неопределено;
		
	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		ЕстьОбработчикПередЗагрузкой = Правило.ЕстьОбработчикПередЗагрузкой;
		ЕстьОбработчикПриЗагрузке    = Правило.ЕстьОбработчикПриЗагрузке;
		ЕстьОбработчикПослеЗагрузки  = Правило.ЕстьОбработчикПослеЗагрузки;
		
	Иначе
		
		ЕстьОбработчикПередЗагрузкой = Ложь;
		ЕстьОбработчикПриЗагрузке    = Ложь;
		ЕстьОбработчикПослеЗагрузки  = Ложь;
		
	КонецЕсли;


    // Глобальный обработчик события ПередЗагрузкойОбъекта
	
	Если ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(Конвертация.ПередЗагрузкойОбъекта);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(53, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, НСтр("ru = 'ПередЗагрузкойОбъекта (глобальный)'"));
							
		КонецПопытки;			
				
		Если Отказ Тогда	//	Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
    // Обработчик события ПередЗагрузкойОбъекта
	Если ЕстьОбработчикПередЗагрузкой Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(Правило.ПередЗагрузкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(19, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта");				
							
		КонецПопытки;			
		
		
		Если Отказ Тогда // Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РежимЧтенияОтбора = Ложь;
	РежимЧтенияЗаписей = Ложь;
	
	ОтборРегистра = Неопределено;
	ТекущаяСтрокаНабораЗаписей = Неопределено;
	ПараметрыОбъекта = Неопределено;
	ПараметрыНабораЗаписей = Неопределено;
	НомерЗаписи = -1;
		
	НужноЗаписатьНаборЗаписей = Истина;
	
	
	// читаем что там в регистре записано
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Отбор" Тогда
			
			Если ФайлОбмена.ТипУзла <> ТипУзлаXMLКонецЭлемента тогда
					
				Объект = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				ОтборРегистра = Объект.Отбор;
			
				РежимЧтенияОтбора = Истина;
					
			КонецЕсли;			
		
		ИначеЕсли ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЭтоПараметрДляОбъекта = (ИмяУзла = "ЗначениеПараметра");
			
			Имя                = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, ТипБулево, "НеЗамещать");
            			
			// читаем и устанавливаем значение свойства
			ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
			СвойствоНеНайденоПоСсылке = Ложь;
			//Создавать нужно всегда
			Значение = ПрочитатьСвойство(ТипСвойства, ЭтоПустойНабор, СвойствоНеНайденоПоСсылке);
			//Значение = ПрочитатьСвойство(ТипСвойства, Ложь, СвойствоНеНайденоПоСсылке);
			
			Если ЭтоПустойНабор 
				И  СвойствоНеНайденоПоСсылке Тогда
				
				НужноЗаписатьНаборЗаписей = Ложь;
				
			КонецЕсли;
			
			Если ЭтоПараметрДляОбъекта Тогда
				
				Если РежимЧтенияОтбора Тогда
					ДобавитьПараметрПриНеобходимости(ПараметрыНабораЗаписей, Имя, Значение);
				Иначе
					// дополняем коллекцию параметров объекта
					ДобавитьПараметрПриНеобходимости(ПараметрыОбъекта, Имя, Значение);
					ДобавитьСложныйПараметрПриНеобходимости(ПараметрыНабораЗаписей, "Строки", НомерЗаписи, Имя, Значение);
				КонецЕсли;
				
			Иначе
 				
				Попытка
					
					Если РежимЧтенияОтбора Тогда
						ОтборРегистра[Имя].Установить(Значение);						
					ИначеЕсли РежимЧтенияЗаписей Тогда
						ТекущаяСтрокаНабораЗаписей[Имя] = Значение;
					КонецЕсли;
					
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(26, ОписаниеОшибки());
					ЗП.ИмяПКО           = ИмяПравила;
					ЗП.Источник         = Источник;
					ЗП.Объект           = Объект;
					ЗП.ТипОбъекта       = ТипОбъекта;
					ЗП.Свойство         = Имя;
					ЗП.Значение         = Значение;
					ЗП.ТипЗначения      = ТипЗнч(Значение);
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(26, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СтрокиНабораЗаписей" Тогда
			
			Если ФайлОбмена.ТипУзла <> ТипУзлаXMLКонецЭлемента Тогда
								
				// Обработчик события ПриЗагрузкеОбъекта
				// срабатывает перед чтением первой записи в наборе
				Если РежимЧтенияОтбора = Истина
					 И ЕстьОбработчикПриЗагрузке Тогда
					 
					 
					НужноБылоЗаписатьОбъект = НужноЗаписатьНаборЗаписей;
					ОбъектМодифицирован = Истина;
					 
					Попытка
						
						Выполнить(Правило.ПриЗагрузке);
						НужноЗаписатьНаборЗаписей = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
						
					КонецПопытки;
							
				КонецЕсли;
				
				РежимЧтенияОтбора = Ложь;
				РежимЧтенияЗаписей = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Объект" Тогда
			
			Если ФайлОбмена.ТипУзла <> ТипУзлаXMLКонецЭлемента Тогда
			
				ТекущаяСтрокаНабораЗаписей = Объект.Добавить();	
			    НомерЗаписи = НомерЗаписи + 1;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "НаборЗаписейРегистра" И ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента Тогда
			
			Прервать;
						
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// после загрузки
	Если ЕстьОбработчикПослеЗагрузки Тогда
		
		НужноБылоЗаписатьОбъект = НужноЗаписатьНаборЗаписей;
	    ОбъектМодифицирован = Истина;
		
		Попытка
			
			Выполнить(Правило.ПослеЗагрузки);
			НужноЗаписатьНаборЗаписей = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(21, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта");				
									
		КонецПопытки;
										
	КонецЕсли;
	
	
	Если НужноЗаписатьНаборЗаписей
		И Объект <> Неопределено тогда
		
		ЕстьКоллизия = ПроверитьНаличиеКоллизийДляОбъекта(Объект, "РегистрСведений", ИмяРегистра, ПриоритетОбъектаОбмена);
		
		// в случае наличия коллизии новая версия объекта записывается только при условии, что
		// приоритет ее записи ВЫШЕ, во всех остальных случаях версия не записывается
		Если ЕстьКоллизия Тогда
			
			Если ПриоритетОбъектаОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
				ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
			КонецЕсли;			
			
		Иначе
			
			ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Объект;	
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокой(Объект)
	
	СтроковоеПредставлениеОбъекта = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное);
	
	СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции

//функция проверяет наличие коллизий при загрузке
// и выдает информацию есть ли коллизия при обмене
Функция ПроверитьНаличиеКоллизийДляОбъекта(Объект, ИмяТипаОбъекта, ДополнительнаяИнформация = "", ПриоритетОбъектаОбмена)
	
	Попытка
		ЕстьКоллизия = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбменаЗагрузкаДанных, Объект);
	Исключение
		ЕстьКоллизия = Ложь;
	КонецПопытки;
	
	// выполняем дополнительную проверку на изменение объекта
	// если объект до коллизии и после коллизии не изменен,
	// то считаем, что коллизии нет
	Если ЕстьКоллизия Тогда
		
		СтрокаОбъектаДоИзменения    = ПолучитьДанныеОбъектаСтрокойДоИзменения(Объект, ДополнительнаяИнформация, ИмяТипаОбъекта);
		СтрокаОбъектаПослеИзменения = ПолучитьДанныеОбъектаСтрокойПослеИзменения(Объект, ИмяТипаОбъекта);
		
		// если значения совпадают, то коллизии нет
		Если СтрокаОбъектаДоИзменения = СтрокаОбъектаПослеИзменения Тогда
			
			ЕстьКоллизия = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// при наличии коллизии делаем запись в ЖР
	Если ЕстьКоллизия Тогда
		
		КСообщенияОбОшибках = ?(ПриоритетОбъектаОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше, 81, 82);
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(КСообщенияОбОшибках);
		ЗП.Объект     = Объект;
		ЗП.ТипОбъекта = ТипЗнч(Объект);
		ЗаписатьВПротоколВыполнения(КСообщенияОбОшибках, ЗП, Ложь,,,,Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями);
		
	КонецЕсли;
	
	Возврат ЕстьКоллизия
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокойДоИзменения(Объект, ДополнительнаяИнформация, ИмяТипаОбъекта)
	
	// возвращаемое значение функции
	СтрокаОбъекта = "";
	
	Если ИмяТипаОбъекта = "Константы" Тогда
		
		// получаем значение константы из ИБ
		СтрокаОбъекта = XMLСтрока(Константы[ДополнительнаяИнформация].Получить());
		
	ИначеЕсли ИмяТипаОбъекта = "РегистрСведений" Тогда
		
		СтарыйНаборЗаписей = РегистрыСведений[ДополнительнаяИнформация].СоздатьНаборЗаписей();
		
		Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
		
			Если ЗначениеОтбора.Использование = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
			СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
			СтрокаОтбора.Использование = Истина;
			
		КонецЦикла;
		
		СтарыйНаборЗаписей.Прочитать();
		
		// получаем набор записей регистра из ИБ с отбором как у Объекта
		СтрокаОбъекта = ПолучитьДанныеОбъектаСтрокой(СтарыйНаборЗаписей);
		
	Иначе
		
		Если ОбщегоНазначения.СсылкаСуществует(Объект.Ссылка) Тогда
			
			// получаем представление объекта из ИБ по ссылке
			СтрокаОбъекта = ПолучитьДанныеОбъектаСтрокой(Объект.Ссылка.ПолучитьОбъект());
			
		Иначе
			
			СтрокаОбъекта = "Объект удален";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаОбъекта;
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокойПослеИзменения(Объект, ИмяТипаОбъекта)
	
	// возвращаемое значение функции
	СтрокаОбъекта = "";
	
	Если ИмяТипаОбъекта = "Константы" Тогда
		
		СтрокаОбъекта = XMLСтрока(Объект.Значение);
		
	Иначе
		
		СтрокаОбъекта = ПолучитьДанныеОбъектаСтрокой(Объект);
		
	КонецЕсли;
	
	Возврат СтрокаОбъекта
	
КонецФункции

Процедура ДополнитьСтекНеЗаписанныхОбъектов(Нпп, ГНпп, Объект, ИзвестнаяСсылка, ТипОбъекта, ИмяТипа, АвтоматическиГенерироватьКод = Ложь, ПараметрыОбъекта = Неопределено)
	
	НомерДляСтека = ?(Нпп = 0, ГНпп, Нпп);
	
	СтрокаСтека = ГлобальныйСтекНеЗаписанныхОбъектов[НомерДляСтека];
	Если СтрокаСтека <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГлобальныйСтекНеЗаписанныхОбъектов.Вставить(НомерДляСтека, Новый Структура("Объект, ИзвестнаяСсылка, ТипОбъекта, ИмяТипа, АвтоматическиГенерироватьКод, ПараметрыОбъекта", 
		Объект, ИзвестнаяСсылка, ТипОбъекта, ИмяТипа, АвтоматическиГенерироватьКод, ПараметрыОбъекта));
	
КонецПроцедуры

Процедура УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп)
	
	НомерДляСтека = ?(Нпп = 0, ГНпп, Нпп);
	ГлобальныйСтекНеЗаписанныхОбъектов.Удалить(НомерДляСтека);	
	
КонецПроцедуры

Процедура ПровестиЗаписьНеЗаписанныхОбъектов()
	
	Для Каждого СтрокаДанных Из ГлобальныйСтекНеЗаписанныхОбъектов Цикл
		
		// отложенная запись объектов
		Объект = СтрокаДанных.Значение.Объект;
		НппСсылки = СтрокаДанных.Ключ;
		
		Если СтрокаДанных.Значение.АвтоматическиГенерироватьКод = Истина Тогда
			
			НужноЗаписатьОбъект = Истина;
			ПровестиГенерациюКодаНомераПриНеобходимости(Истина, Объект,
				СтрокаДанных.Значение.ИмяТипа, НужноЗаписатьОбъект, Истина);
			
		КонецЕсли;
		
		ЗаписатьОбъектВИБ(Объект, СтрокаДанных.Значение.ТипОбъекта);
		
	КонецЦикла;
	
	ГлобальныйСтекНеЗаписанныхОбъектов.Очистить();
	
КонецПроцедуры

Процедура ПровестиГенерациюКодаНомераПриНеобходимости(ГенерироватьНовыйНомерИлиКодЕслиНеУказан, Объект, ИмяТипаОбъекта, НужноЗаписатьОбъект, 
	РежимОбменДанными)
	
	Если Не ГенерироватьНовыйНомерИлиКодЕслиНеУказан
		ИЛИ НЕ РежимОбменДанными Тогда
		
		// если номер не нужно генерировать, или не в режиме обмена данными то ничего не нужно делать... платформа сама все сгенерирует
		Возврат;
	КонецЕсли;
	
	// по типу документа смотрим заполнен кол или номер
	Если ИмяТипаОбъекта = "Документ"
		ИЛИ ИмяТипаОбъекта =  "БизнесПроцесс"
		ИЛИ ИмяТипаОбъекта = "Задача" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			НужноЗаписатьОбъект = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТипаОбъекта = "Справочник"
		ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик"
		ИЛИ ИмяТипаОбъекта = "ПланОбмена" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
			
			Объект.УстановитьНовыйКод();
			НужноЗаписатьОбъект = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПриоритетОбъектаОбмена(ФайлОбмена)
		
	СтрокаПриоритета = одАтрибут(ФайлОбмена, ТипСтрока, "ПриоритетОбъектаОбмена");
	Если ПустаяСтрока(СтрокаПриоритета) Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
	ИначеЕсли СтрокаПриоритета = "Выше" Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
	ИначеЕсли СтрокаПриоритета = "Ниже" Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже;
	ИначеЕсли СтрокаПриоритета = "Совпадает" Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает;
	КонецЕсли;
	
	Возврат ЗначениеПриоритета;
	
КонецФункции

// Читает очередной объект из файла обмена, производит загрузку
//
// Параметры:
//  Нет.
// 
Функция ПрочитатьОбъект(УникальныйИдентификаторСтрокой = "")

	Нпп						= одАтрибут(ФайлОбмена, ТипЧисло,  "Нпп");
	ГНпп					= одАтрибут(ФайлОбмена, ТипЧисло,  "ГНпп");
	Источник				= одАтрибут(ФайлОбмена, ТипСтрока, "Источник");
	ИмяПравила				= одАтрибут(ФайлОбмена, ТипСтрока, "ИмяПравила");
	НеЗамещатьОбъект 		= одАтрибут(ФайлОбмена, ТипБулево, "НеЗамещать");
	ПрефиксАвтонумерации	= одАтрибут(ФайлОбмена, ТипСтрока, "ПрефиксАвтонумерации");
	ПриоритетОбъектаОбмена  = ПолучитьПриоритетОбъектаОбмена(ФайлОбмена);
	
	ТипОбъектаСтрокой       = одАтрибут(ФайлОбмена, ТипСтрока, "Тип");
	ТипОбъекта 				= Тип(ТипОбъектаСтрокой);
	ИнформацияОТипах = СоответствиеТиповДанныхДляЗагрузки()[ТипОбъекта];
	
    
	КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Источник, ТипОбъекта, ГНпп);
    	
	СтруктураСвойств = Менеджеры[ТипОбъекта];
	ИмяТипаОбъекта   = СтруктураСвойств.ИмяТипа;


	Если ИмяТипаОбъекта = "Документ" Тогда
		
		РежимЗаписи     = одАтрибут(ФайлОбмена, ТипСтрока, "РежимЗаписи");
		РежимПроведения = одАтрибут(ФайлОбмена, ТипСтрока, "РежимПроведения");
		
	КонецЕсли;
	
	
	Объект          = Неопределено;
	ОбъектНайден    = Истина;
	ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено;
	
	СвойстваПоиска  = Новый Соответствие;
	СвойстваПоискаНеЗамещать  = Новый Соответствие;
	
	НужноЗаписатьОбъект = НЕ ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты;
	
	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		ЕстьОбработчикПередЗагрузкой = Правило.ЕстьОбработчикПередЗагрузкой;
		ЕстьОбработчикПриЗагрузке    = Правило.ЕстьОбработчикПриЗагрузке;
		ЕстьОбработчикПослеЗагрузки  = Правило.ЕстьОбработчикПослеЗагрузки;
		ГенерироватьНовыйНомерИлиКодЕслиНеУказан = Правило.ГенерироватьНовыйНомерИлиКодЕслиНеУказан;
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике =  Правило.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;
		
	Иначе
		
		ЕстьОбработчикПередЗагрузкой = Ложь;
		ЕстьОбработчикПриЗагрузке    = Ложь;
		ЕстьОбработчикПослеЗагрузки  = Ложь;
		ГенерироватьНовыйНомерИлиКодЕслиНеУказан = Ложь;
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь;
		
	КонецЕсли;


    // Глобальный обработчик события ПередЗагрузкойОбъекта
	
	Если ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(Конвертация.ПередЗагрузкойОбъекта);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(53, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, НСтр("ru = 'ПередЗагрузкойОбъекта (глобальный)'"));				
							
		КонецПопытки;
				
		Если Отказ Тогда	//	Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
    // Обработчик события ПередЗагрузкойОбъекта
	Если ЕстьОбработчикПередЗагрузкой Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(Правило.ПередЗагрузкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(19, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта");				
							
		КонецПопытки;
				
		Если Отказ Тогда // Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;

	РежимРаботыСКонстантами = Ложь;
	ИмяКонстанты = "";
	
	СвойстваОбъектаМодифицированы = Ложь;
	НППГлобальнойСсылки = 0;
	НппСсылки = 0;
	ПараметрыОбъекта = Неопределено;
	
	// флаг определяет был ли объект найден по полям поиска в режиме сопоставления объектов или нет;
	// если флаг установлен, то в регистр сопоставления добавляется информация о сопоставлении GUID ссылки источника и приемника
	ОбъектНайденПоПолямПоиска = Ложь;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЭтоПараметрДляОбъекта = (ИмяУзла = "ЗначениеПараметра");
			
			Если Объект = Неопределено Тогда
				
				// объект не нашли и не создали - попробуем сейчас это сделать
				ОбъектНайден = Ложь;
				
				// Обработчик события ПриЗагрузкеОбъекта
				Если ЕстьОбработчикПриЗагрузке Тогда
					
					НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      				ОбъектМодифицирован = Истина;
					
					// если есть обработчик при загрузке, то объект нужно перезаписывать, так как могут быть изменения
					Попытка
						
						Выполнить(Правило.ПриЗагрузке);
						НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
						
					КонецПопытки;							
																				
				КонецЕсли;

				// так м не смогли создать объект в событии - создаем его отдельно
				Если Объект = Неопределено Тогда
					
					НужноЗаписатьОбъект = Истина;
					
					Если ИмяТипаОбъекта = "Константы" Тогда
						
						Объект = Неопределено;
						РежимРаботыСКонстантами = Истина;
												
					Иначе
						
						СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект, Ложь, , НппСсылки, НППГлобальнойСсылки, Правило, ПараметрыОбъекта);
																	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 

			
			Имя                = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, ТипБулево, "НеЗамещать");

			
			Если РежимРаботыСКонстантами Тогда
				
				Объект = Константы[Имя].СоздатьМенеджерЗначения();	
				ИмяКонстанты = Имя;
				Имя = "Значение";
				НужноЗаписатьОбъект = Истина;
				
			ИначеЕсли НЕ ЭтоПараметрДляОбъекта
				И ((ОбъектНайден И НеЗамещатьСвойство) 
				ИЛИ (Имя = "ЭтоГруппа") 
				ИЛИ (Объект[Имя] = NULL)) Тогда
				
				// неизвестное свойство
				одПропустить(ФайлОбмена, ИмяУзла);
				Продолжить;
				
			КонецЕсли; 

			
			// читаем и устанавливаем значение свойства
			ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
			Значение    = ПрочитатьСвойство(ТипСвойства);
			
			Если ЭтоПараметрДляОбъекта Тогда
				
				// дополняем коллекцию параметров объекта
				ДобавитьПараметрПриНеобходимости(ПараметрыОбъекта, Имя, Значение);
				
			Иначе
				
				Попытка
					
					Если Не НужноЗаписатьОбъект Тогда
						
						НужноЗаписатьОбъект = (Объект[Имя] <> Значение);
																		
					Конецесли;
					
					Если Не (Имя = "ПометкаУдаления" И ЭтоПредопределенныйЭлемент(Объект)) Тогда
						
						Объект[Имя] = Значение;
						
					КонецЕсли;
					
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(26, ОписаниеОшибки());
					ЗП.ИмяПКО           = ИмяПравила;
					ЗП.Нпп              = Нпп;
					ЗП.ГНпп             = ГНпп;
					ЗП.Источник         = Источник;
					ЗП.Объект           = Объект;
					ЗП.ТипОбъекта       = ТипОбъекта;
					ЗП.Свойство         = Имя;
					ЗП.Значение         = Значение;
					ЗП.ТипЗначения      = ТипЗнч(Значение);
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(26, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Ссылка" Тогда
			
			// ссылка на элемент - сначала получаем по ссылке объект, а потом устанавливаем свойства
			СозданныйОбъект = Неопределено;
			НеСоздаватьОбъектЕслиНеНайден = Неопределено;
			ИзвестнаяСсылкаУникальногоИдентификатора = Неопределено;
			НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь;
			РегистрироватьОбъектНаУзлеОтправителе = Ложь;
												
			Ссылка = НайтиОбъектПоСсылке(ТипОбъекта,
										СвойстваПоиска,
										СвойстваПоискаНеЗамещать,
										ОбъектНайден,
										СозданныйОбъект,
										НеСоздаватьОбъектЕслиНеНайден,
										Истина,
										СвойстваОбъектаМодифицированы,
										НППГлобальнойСсылки,
										НппСсылки,
										ОбъектНайденПоПолямПоиска,
										ИзвестнаяСсылкаУникальногоИдентификатора,
										Истина,
										ПараметрыОбъекта,
										НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике,
										ОбъектБылСозданВТекущейИнформационнойБазе,
										РегистрироватьОбъектНаУзлеОтправителе,
										УникальныйИдентификаторСтрокой);
				
			НужноЗаписатьОбъект = НужноЗаписатьОбъект ИЛИ СвойстваОбъектаМодифицированы;
			
			Если ИмяТипаОбъекта = "Перечисление" Тогда
				
				Объект = Ссылка;
				
			Иначе
				
				Объект = ПолучитьОбъектПоСсылкеИДопИнформации(СозданныйОбъект, Ссылка);
								
				Если Объект = Неопределено Тогда
					
					одПропустить(ФайлОбмена, "Объект");
					Прервать;	
					
				КонецЕсли;
				
				Если Ссылка = Неопределено Тогда
					
					ДополнитьСтекНеЗаписанныхОбъектов(Нпп, ГНпп, СозданныйОбъект, ИзвестнаяСсылкаУникальногоИдентификатора, ТипОбъекта, 
						ИмяТипаОбъекта, Правило.ГенерироватьНовыйНомерИлиКодЕслиНеУказан, ПараметрыОбъекта);
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Обработчик события ПриЗагрузкеОбъекта
			Если ЕстьОбработчикПриЗагрузке Тогда
				
				НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
				ОбъектМодифицирован     = Истина;
				
				Попытка
					
					Выполнить(Правило.ПриЗагрузке);
					НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник,
							ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");
					
				КонецПопытки;
					
			КонецЕсли;
			
			// устанавливаем признак для выборочной регистрации объекта на узле-отправителе
			Объект.ДополнительныеСвойства.Вставить("РегистрироватьОбъектНаУзлеОтправителе", РегистрироватьОбъектНаУзлеОтправителе);
			
		ИначеЕсли ИмяУзла = "ТабличнаяЧасть"
			  ИЛИ ИмяУзла = "НаборЗаписей" Тогда
			//
			
			Если РежимЗагрузкиДанныхВТаблицуЗначений() Тогда
				одПропустить(ФайлОбмена, ИмяУзла);
				Продолжить;
			КонецЕсли;
			
			Если Объект = Неопределено Тогда
				
				ОбъектНайден = Ложь;

			    // Обработчик события ПриЗагрузкеОбъекта
				
				Если ЕстьОбработчикПриЗагрузке Тогда
					
					НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      				ОбъектМодифицирован = Истина;
					
					Попытка
						
						Выполнить(Правило.ПриЗагрузке);
						НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");							
						
					КонецПопытки;
															
				КонецЕсли;
				 
			КонецЕсли;
			

			Имя                = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, ТипБулево, "НеЗамещать");
			НеОчищать          = одАтрибут(ФайлОбмена, ТипБулево, "НеОчищать");

			Если ОбъектНайден И НеЗамещатьСвойство Тогда
				
				одПропустить(ФайлОбмена, ИмяУзла);
				Продолжить;
				
			КонецЕсли;
			
			Если Объект = Неопределено Тогда
					
				СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект, Ложь, , НппСсылки, НППГлобальнойСсылки, Правило, ПараметрыОбъекта);
				НужноЗаписатьОбъект = Истина;
									
			КонецЕсли;
						
			Если ИмяУзла = "ТабличнаяЧасть" Тогда
				
				// загрузка элементов из табличной части
				ЗагрузитьТабличнуюЧасть(Объект, Имя, ИнформацияОТипах, НужноЗаписатьОбъект, ПараметрыОбъекта, Правило);
				
			ИначеЕсли ИмяУзла = "НаборЗаписей" Тогда
				
				// загрузка движений
				ЗагрузитьДвижения(Объект, Имя, Не НеОчищать, ИнформацияОТипах, НужноЗаписатьОбъект, ПараметрыОбъекта, Правило);
				
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "Объект") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Отказ = Ложь;
			
			// Глобальный обработчик события ПослеЗагрузкиОбъекта
			Если ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта Тогда
				
				НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
				ОбъектМодифицирован = Истина;
				
				Попытка
					
					Выполнить(Конвертация.ПослеЗагрузкиОбъекта);
					НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(54, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Объект, НСтр("ru = 'ПослеЗагрузкиОбъекта (глобальный)'"));					
					
				КонецПопытки;
				
			КонецЕсли;
			
			
			// Обработчик события ПослеЗагрузкиОбъекта
			Если ЕстьОбработчикПослеЗагрузки Тогда
				
				НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
				ОбъектМодифицирован = Истина;
				
				Попытка
					
					Выполнить(Правило.ПослеЗагрузки);
					НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(21, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта");				
					
				КонецПопытки;
				
			КонецЕсли;
			
			Если Отказ Тогда
				УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп);
				Возврат Неопределено;
			КонецЕсли;			
			
			Если ИмяТипаОбъекта = "Документ" Тогда
				
				Если РежимЗаписи = "Проведение" Тогда
					
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
					
				ИначеЕсли РежимЗаписи = "ОтменаПроведения" Тогда
					
					РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения; 
					
				Иначе
					
					// определим как записывать документ
					Если Объект.Проведен Тогда
						
						РежимЗаписи = РежимЗаписиДокумента.Проведение;
						
					Иначе
						
						// а документ вообще может проводиться или нет
						ДокументМожетПроводиться = (Объект.Метаданные().Проведение = РазрешитьПроведениеДокумента);
						
						Если ДокументМожетПроводиться Тогда
							РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
						Иначе
							РежимЗаписи = РежимЗаписиДокумента.Запись;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;				
				
				РежимПроведения = ?(РежимПроведения = "Оперативный", РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);				
				
				// если хотим провести документ, помеченный на удаление, то пометку удаления снимаем ...
				Если Объект.ПометкаУдаления
					И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
					
					Объект.ПометкаУдаления = Ложь;
					НужноЗаписатьОбъект = Истина;
					
				КонецЕсли;
				
				ПровестиГенерациюКодаНомераПриНеобходимости(ГенерироватьНовыйНомерИлиКодЕслиНеУказан, Объект, 
				ИмяТипаОбъекта, НужноЗаписатьОбъект, Истина);
				
				Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
					
					Попытка
						
						// просто записываем документ. информацию о необходимости его провести или отменить проведение отдельно фиксируем
						Если НужноЗаписатьОбъект Тогда
							
							// записываем документ - проверяем наличие коллизий
							ЕстьКоллизия = ПроверитьНаличиеКоллизийДляОбъекта(Объект, ТипОбъекта, ИмяКонстанты, ПриоритетОбъектаОбмена);
							
							Если ЕстьКоллизия
								И ПриоритетОбъектаОбмена <> Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
								
								НужноЗаписатьОбъект = Ложь;
								
							КонецЕсли;
							
							Если НужноЗаписатьОбъект Тогда
								
								// документы которые просто нужно записать - так и записываем
								Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
									
									ЗаписатьОбъектВИБ(Объект, ТипОбъекта, НужноЗаписатьОбъект);
									
								ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
									ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
									
									// проведение убираем всегда...
									ОтменитьПроведениеОбъектаВИБ(Объект, ТипОбъекта, НужноЗаписатьОбъект);
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
						Если НужноЗаписатьОбъект Тогда
							
							// документы, требующие проведения, записываем в очередь
							Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
								
								// если документ был успешно записан и создана ссылка, то помещаем в очередь для проведения
								Если  Объект <> Неопределено 
									И Объект.Ссылка <> Неопределено Тогда
									
									СтрокаТаблицы = ДокументыДляОтложенногоПроведения().Добавить();
									СтрокаТаблицы.ДокументОбъект = Объект;
									СтрокаТаблицы.ДокументСсылка = Объект.Ссылка;
									СтрокаТаблицы.ДатаДокумента  = Объект.Дата;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					Исключение
						
						СтрокаОписанияОшибки = ОписаниеОшибки();
						
						Если НужноЗаписатьОбъект Тогда
							// не смогли выполнить необходимые действия для документа
							ЗаписатьДокументВБезопасномРежиме(Объект, ТипОбъекта);
						КонецЕсли;						
						
						ЗП                        = ПолучитьСтруктуруЗаписиПротокола(25, СтрокаОписанияОшибки);
						ЗП.ИмяПКО                 = ИмяПравила;
						
						Если Не ПустаяСтрока(Источник) Тогда
							
							ЗП.Источник           = Источник;
							
						КонецЕсли;
						
						ЗП.ТипОбъекта             = ТипОбъекта;
						ЗП.Объект                 = Строка(Объект);
						ЗаписатьВПротоколВыполнения(25, ЗП);
						
						СтрокаСообщения = НСтр("ru = 'Ошибка при записи документа: %1. Описание ошибки: %2'");
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(Объект), СтрокаОписанияОшибки);
						
						// объект не смогли в нормальном режиме записать - надо об этом сообщить
						ВызватьИсключение СтрокаСообщения;
						
					КонецПопытки;
					
					УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп);
					
				КонецЕсли;
				
			ИначеЕсли ИмяТипаОбъекта <> "Перечисление" Тогда
				
				Если ИмяТипаОбъекта = "РегистрСведений" Тогда
					
					Периодический = СтруктураСвойств.Периодический;
					
					Если Периодический Тогда
						
						Если Не ЗначениеЗаполнено(Объект.Период) Тогда
							УстановитьТекущуюДатуРеквизиту(Объект.Период);
							НужноЗаписатьОбъект = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПровестиГенерациюКодаНомераПриНеобходимости(ГенерироватьНовыйНомерИлиКодЕслиНеУказан, Объект,
				ИмяТипаОбъекта, НужноЗаписатьОбъект, Истина);
				
				Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
					
					Если НужноЗаписатьОбъект Тогда
						
						// если объект подлежит записи - проверим наличие коллизий
						ЕстьКоллизия = ПроверитьНаличиеКоллизийДляОбъекта(Объект, ИмяТипаОбъекта, ИмяКонстанты, ПриоритетОбъектаОбмена);
						
						Если ЕстьКоллизия
							И ПриоритетОбъектаОбмена <> Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
							
							НужноЗаписатьОбъект = Ложь;	
							
						КонецЕсли;
						
						Если НужноЗаписатьОбъект Тогда
							ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ (ИмяТипаОбъекта = "РегистрСведений"
						 ИЛИ ИмяТипаОбъекта = "Константы") Тогда
						
						УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЭтоСсылочныйТипОбъекта = НЕ(ИмяТипаОбъекта = "РегистрСведений"
			                        ИЛИ ИмяТипаОбъекта = "Константы");
			
			Прервать;
			
		ИначеЕсли ИмяУзла = "НаборЗаписейПоследовательности" Тогда
			
			одПропустить(ФайлОбмена);
			
		ИначеЕсли ИмяУзла = "Типы" Тогда

			Если Объект = Неопределено Тогда
				
				ОбъектНайден = Ложь;
				Ссылка  = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект, , , НппСсылки, НППГлобальнойСсылки, Правило, ПараметрыОбъекта);
								
			КонецЕсли; 

			ОписаниеТиповОбъекта = ЗагрузитьТипыОбъекта(ФайлОбмена);

			Если ОписаниеТиповОбъекта <> Неопределено Тогда
				
				Объект.ТипЗначения = ОписаниеТиповОбъекта;
				
			КонецЕсли; 
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Объект;

КонецФункции // ПрочитатьОбъект() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ДАННЫХ ПО ПРАВИЛАМ ОБМЕНА

Функция ПолучитьНаборДвиженийДокумента(СсылкаНаДокумент, ВидИсточника, ИмяРегистра)
	
	Если ВидИсточника = "НаборДвиженийРегистраНакопления" Тогда
		
		НаборДвиженийДокумента = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраСведений" Тогда
		
		НаборДвиженийДокумента = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраБухгалтерии" Тогда
		
		НаборДвиженийДокумента = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраРасчета" Тогда	
		
		НаборДвиженийДокумента = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НаборДвиженийДокумента.Отбор.Регистратор.Установить(СсылкаНаДокумент.Ссылка);
	НаборДвиженийДокумента.Прочитать();
	
	Возврат НаборДвиженийДокумента;
	
КонецФункции

// Формирует узлы свойств объекта приемника в соответствии с указанной коллекцией правил конвертации свойств
//
// Параметры:
//  Источник		     - произвольный источник данных
//  Приемник		     - xml-узел объекта приемника
//  ВходящиеДанные	     - произвольные вспомогательные данные, передаваемые правилу
//                         для выполнения конвертации
//  ИсходящиеДанные      - произвольные вспомогательные данные, передаваемые правилам
//                         конвертации объектов свойств
//  ПКО				     - ссылка на правило конвертации объектов (родитель коллекции правил конвертации свойств)
//  ПКГС                 - ссылка на правило конвертации группы свойств
//  УзелКоллекцииСвойств - xml-узел коллекции свойств
// 
Процедура ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку)

	
	КоллекцияОбъектов = Неопределено;
	НеЗамещать        = ПКГС.НеЗамещать;
	НеОчищать         = Ложь;

	
	// Обработчик ПередОбработкойВыгрузки

	Если ПКГС.ЕстьОбработчикПередОбработкойВыгрузки Тогда
		
		Отказ = Ложь;
		Попытка
			
			Выполнить(ПКГС.ПередОбработкойВыгрузки);
			
		Исключение
			
			ЗП = ПолучитьСтруктуруЗаписиПротокола(48, ОписаниеОшибки());
			ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
			ЗП.ПКГС                   = ПКГС.Имя + "  (" + ПКГС.Наименование + ")";
			
			Попытка
				ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
			Исключение
				ЗП.Объект                 = "(" + ТипЗнч(Источник) + ")";
			КонецПопытки;
	
			ЗП.Обработчик             = "ПередОбработкойВыгрузкиГруппыСвойств";
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(48, ЗП);
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки;
							
		Если Отказ Тогда // Отказ от обработки группы свойств
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	
    ВидПриемника = ПКГС.ВидПриемника;
	ВидИсточника = ПКГС.ВидИсточника;
	
	
    // Создание узла коллекции подчиненных объектов
	СтруктураУзлаСвойств = Неопределено;
	УзелКоллекцииОбъектов = Неопределено;
	
	Если ВидПриемника = "ТабличнаяЧасть" Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, ИСТИНА, ПКГС.Приемник, "ТабличнаяЧасть");
		
		Если НеЗамещать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеЗамещать", "true");
						
		КонецЕсли;
		
		Если НеОчищать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеОчищать", "true");
						
		КонецЕсли;
		
	ИначеЕсли ВидПриемника = "ПодчиненныйСправочник" Тогда
				
		
	ИначеЕсли ВидПриемника = "НаборЗаписейПоследовательности" Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, ИСТИНА, ПКГС.Приемник, "НаборЗаписей");
		
	ИначеЕсли Найти(ВидПриемника, "НаборДвижений") > 0 Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, ИСТИНА, ПКГС.Приемник, "НаборЗаписей");
		
		Если НеЗамещать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеЗамещать", "true");
						
		КонецЕсли;
		
		Если НеОчищать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеОчищать", "true");
						
		КонецЕсли;
		
	Иначе  // это простая группировка
		
		ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС.ПравилаГруппы, 
			УзелКоллекцииСвойств, , , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ ВыгрузитьТолькоСсылку, Ложь);
		
		Если ПКГС.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
			
			Попытка
				
				Выполнить(ПКГС.ПослеОбработкиВыгрузки);
				
			Исключение
				
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(49);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	
	// Получение коллекции подчиненных объектов
	
	Если КоллекцияОбъектов <> Неопределено Тогда
		
		// Инициализировали коллекцию в обработчике ПередОбработкой
		
	ИначеЕсли ПКГС.ПолучитьИзВходящихДанных Тогда
		
		Попытка
			
			КоллекцияОбъектов = ВходящиеДанные[ПКГС.Приемник];
			
		Исключение
			
        	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(66);
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
            		
			Возврат;
			
		КонецПопытки;
		
	ИначеЕсли ВидИсточника = "ТабличнаяЧасть" Тогда
		
		КоллекцияОбъектов = Источник[ПКГС.Источник];
		
	ИначеЕсли ВидИсточника = "ПодчиненныйСправочник" Тогда
		
	ИначеЕсли Найти(ВидИсточника, "НаборДвижений") > 0 Тогда
		
		КоллекцияОбъектов = ПолучитьНаборДвиженийДокумента(Источник, ВидИсточника, ПКГС.Источник);
				
	ИначеЕсли ПустаяСтрока(ПКГС.Источник) Тогда
		
		КоллекцияОбъектов = Источник[ПКГС.Приемник];
		
	КонецЕсли;

	
	Для каждого ОбъектКоллекции Из КоллекцияОбъектов Цикл

		
		// Обработчик ПередВыгрузкой
		Если ПКГС.ЕстьОбработчикПередВыгрузкой Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКГС.ПередВыгрузкой);
				
			Исключение
				
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(50);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки подчиненного объекта
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли; 

		
		// Обработчик ПриВыгрузке
		
		Если ПКГС.НуженУзелXMLПриВыгрузке Тогда
			УзелОбъектаКоллекции = СоздатьУзел("Запись");
		Иначе
			УзелКоллекцииОбъектов.ЗаписатьНачалоЭлемента("Запись");
			УзелОбъектаКоллекции = УзелКоллекцииОбъектов;
		КонецЕсли;
		
		СтандартнаяОбработка	= Истина;
		
		Если ПКГС.ЕстьОбработчикПриВыгрузке Тогда
			
			Попытка
				
				Выполнить(ПКГС.ПриВыгрузке);
				
			Исключение
				
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(51);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки;
			
		КонецЕсли;


		//	Выгрузка свойств объекта коллекции
		Если СтандартнаяОбработка Тогда
			
			Если ПКГС.ПравилаГруппы.Количество() > 0 Тогда
				
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС.ПравилаГруппы, 
					УзелОбъектаКоллекции, ОбъектКоллекции, , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ ВыгрузитьТолькоСсылку, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;

		
		// Обработчик ПослеВыгрузки
		Если ПКГС.ЕстьОбработчикПослеВыгрузки Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКГС.ПослеВыгрузки);
				
			Исключение
								
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(52);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки; 
			
			Если Отказ Тогда	//	Отказ от выгрузки подчиненного объекта
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПКГС.НуженУзелXMLПриВыгрузке Тогда
			ДобавитьПодчиненный(УзелКоллекцииОбъектов, УзелОбъектаКоллекции);
		Иначе
			УзелКоллекцииОбъектов.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработчик ПослеОбработкиВыгрузки
	Если ПКГС.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(ПКГС.ПослеОбработкиВыгрузки);
			
		Исключение
			
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(49);
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки; 
		
		Если Отказ Тогда	//	Отказ от записи коллекции подчиненных объектов
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелКоллекцииОбъектов);
	
КонецПроцедуры

Процедура ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник, ВыборкаДанных = Неопределено)
	
	Если Значение <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПКС.ПолучитьИзВходящихДанных Тогда
			
		ОбъектДляПолученияДанных = ВходящиеДанные;
		
		Если Не ПустаяСтрока(ПКС.Приемник) Тогда
		
			ИмяСвойства = ПКС.Приемник;
			
		Иначе
			
			ИмяСвойства = ПКС.ИмяПараметраДляПередачи;
			
		КонецЕсли;
		
		КодОшибки = ?(ОбъектКоллекции <> Неопределено, 67, 68);
	
	ИначеЕсли ОбъектКоллекции <> Неопределено Тогда
		
		ОбъектДляПолученияДанных = ОбъектКоллекции;
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
			
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 16;
						
		Иначе
			
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = 17;
            							
		КонецЕсли;
		
	ИначеЕсли ВыборкаДанных <> Неопределено Тогда
		
		ОбъектДляПолученияДанных = ВыборкаДанных;	
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
		
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 13;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
						
	Иначе
		
		ОбъектДляПолученияДанных = Источник;
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
		
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 13;
		
		Иначе
			
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = 14;
		
		КонецЕсли;
			
	КонецЕсли;
	
	
	Попытка
					
		Значение = ОбъектДляПолученияДанных[ИмяСвойства];
					
	Исключение
		
		Если КодОшибки <> 14 Тогда
			ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КодОшибки, ОписаниеОшибки(), ПКО, ПКС, Источник, "");
		КонецЕсли;
																	
	КонецПопытки;					
			
КонецПроцедуры

Процедура ВыгрузитьТипСвойстваЭлемента(УзелСвойства, ТипСвойства)
	
	УстановитьАтрибут(УзелСвойства, "Тип", ТипСвойства);	
	
КонецПроцедуры

Процедура _ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКС, 
	УзелКоллекцииСвойств = Неопределено, ОбъектКоллекции = Неопределено, Знач ВыгрузитьТолькоСсылку = Ложь)
	
	// Инициализация значения
	Значение = Неопределено;
	ИмяПКО = "";
	ИмяПКОВидСубконто = "";
	
	// Обработчик ПередВыгрузкой
	Если ПКС.ЕстьОбработчикПередВыгрузкой Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Выполнить(ПКС.ПередВыгрузкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПКС(55, ОписаниеОшибки(), ПКО, ПКС, Источник, 
				"ПередВыгрузкойСвойства", Значение);				
							
		КонецПопытки;
					
		Если Отказ Тогда // Отказ от выгрузки
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник);
	
	Если ПКС.ПриводитьКДлине <> 0 Тогда
				
		ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС);
						
	КонецЕсли;
		
	Для каждого КлючИЗначение из Значение Цикл
		
		ВидСубконто = КлючИЗначение.Ключ;
		Субконто = КлючИЗначение.Значение;
		ИмяПКО = "";
		
		// Обработчик ПриВыгрузке
		Если ПКС.ЕстьОбработчикПриВыгрузке Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКС.ПриВыгрузке);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(56, ОписаниеОшибки(), ПКО, ПКС, Источник, 
					"ПриВыгрузкеСвойства", Значение);				
				
			КонецПопытки;
						
			Если Отказ Тогда // Отказ от выгрузки субконто
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Субконто = Неопределено
			ИЛИ НайтиПравило(Субконто, ИмяПКО) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		УзелСубконто = СоздатьУзел(ПКС.Приемник);
			
		// Ключ
		УзелСвойства = СоздатьУзел("Свойство");
			
		Если ИмяПКОВидСубконто = "" Тогда
				
			ПКОКлюч = НайтиПравило(ВидСубконто);
				
		Иначе
				
			ПКОКлюч = НайтиПравило(, ИмяПКОВидСубконто);
				
		КонецЕсли;
			
		УстановитьАтрибут(УзелСвойства, "Имя", "Ключ");
		ВыгрузитьТипСвойстваЭлемента(УзелСвойства, ПКОКлюч.Приемник);
		
		УзелСсылки = ВыгрузитьПоПравилу(ВидСубконто,, ИсходящиеДанные,, ИмяПКОВидСубконто,, ИСТИНА, ПКОКлюч, , , , , Ложь);
			
		Если УзелСсылки <> Неопределено Тогда
				
			ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
				
		КонецЕсли;
			
		ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
		
		
		
		// Значение
		УзелСвойства = СоздатьУзел("Свойство");
			
		ПКОЗначение = НайтиПравило(Субконто, ИмяПКО);
		
		ТипПриемника = ПКОЗначение.Приемник;
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(Субконто, ЭтоNULL);
		
		Если Пусто Тогда
			
			Если ЭтоNULL 
				Или Значение = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ТипПриемника) Тогда
				
				ТипПриемника = ОпределитьТипДанныхДляПриемника(Субконто);
								
			КонецЕсли;			
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
			
			Если Не ПустаяСтрока(ТипПриемника) Тогда
				УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			КонецЕсли;
							
			// если тип множественный, то возможно это пустая ссылка и выгрузить ее нужно именно с указанием типа
			одЗаписатьЭлемент(УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
		Иначе
			
			ЭтоПравилоСГлобальнойВыгрузкой = Ложь;
			УзелСсылки = ВыгрузитьПоПравилу(Субконто,, ИсходящиеДанные, , ИмяПКО, , ИСТИНА, ПКОЗначение, , , , , Ложь, ЭтоПравилоСГлобальнойВыгрузкой);
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
			ВыгрузитьТипСвойстваЭлемента(УзелСвойства, ТипПриемника);
						
				
			ТипУзлаСсылки = ТипЗнч(УзелСсылки);
				
			Если УзелСсылки = Неопределено Тогда
					
				Продолжить;
					
			КонецЕсли;
							
			ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства, ЭтоПравилоСГлобальнойВыгрузкой);						
			
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
		КонецЕсли;	
		
		
			
		// Обработчик ПослеВыгрузки
		Если ПКС.ЕстьОбработчикПослеВыгрузки Тогда
				
			Отказ = Ложь;
				
			Попытка
					
				Выполнить(ПКС.ПослеВыгрузки);
					
			Исключение
					
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(57, ОписаниеОшибки(), ПКО, ПКС, Источник, 
					"ПослеВыгрузкиСвойства", Значение);					
					
			КонецПопытки;
										
			Если Отказ Тогда // Отказ от выгрузки
					
				Продолжить;
					
			КонецЕсли;
							
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСубконто);
		
	КонецЦикла;
	
КонецПроцедуры // _ВыгрузитьСубконто()

Процедура ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства, ЭтоПравилоСГлобальнойВыгрузкой)
	
	Если ТипУзлаСсылки = ТипСтрока Тогда
				
		Если Найти(УзелСсылки, "<Ссылка") > 0 Тогда
					
			УзелСвойства.ЗаписатьБезОбработки(УзелСсылки);
					
		Иначе
			
			одЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
					
		КонецЕсли;
				
	ИначеЕсли ТипУзлаСсылки = ТипЧисло Тогда
		
		Если ЭтоПравилоСГлобальнойВыгрузкой Тогда
		
			одЗаписатьЭлемент(УзелСвойства, "ГНпп", УзелСсылки);
			
		Иначе     		
			
			одЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
			
		КонецЕсли;
				
	Иначе
				
		ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОпределитьВозможностьУстановкиЗначения(Значение, ТипЗначения, ТипПриемника, СвойствоУстановлено, НужноУказатьТип)
	
	СвойствоУстановлено = Истина;
		
	Если ТипЗначения = ТипСтрока Тогда
				
		Если ТипПриемника = "Строка"  Тогда
		ИначеЕсли ТипПриемника = "Число"  Тогда
					
			Значение = Число(Значение);
					
		ИначеЕсли ТипПриемника = "Булево"  Тогда
					
			Значение = Булево(Значение);
					
		ИначеЕсли ТипПриемника = "Дата"  Тогда
					
			Значение = Дата(Значение);
					
		ИначеЕсли ТипПриемника = "ХранилищеЗначения"  Тогда
					
			Значение = Новый ХранилищеЗначения(Значение);
					
		ИначеЕсли ТипПриемника = "УникальныйИдентификатор" Тогда
					
			Значение = Новый УникальныйИдентификатор(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Строка";
			НужноУказатьТип = Истина;
			
		КонецЕсли;
								
	ИначеЕсли ТипЗначения = ТипЧисло Тогда
				
		Если ТипПриемника = "Число"
			ИЛИ ТипПриемника = "Строка" Тогда
		ИначеЕсли ТипПриемника = "Булево"  Тогда
					
			Значение = Булево(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Число";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;
								
	ИначеЕсли ТипЗначения = ТипДата Тогда
				
		Если ТипПриемника = "Дата"  Тогда
		ИначеЕсли ТипПриемника = "Строка"  Тогда
					
			Значение = Лев(Строка(Значение), 10);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Дата";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = ТипБулево Тогда
				
		Если ТипПриемника = "Булево"  Тогда
		ИначеЕсли ТипПриемника = "Число"  Тогда
					
			Значение = Число(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Булево";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = ТипХранилищеЗначения Тогда
				
		Если ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "ХранилищеЗначения";
			НужноУказатьТип = Истина;
					
		ИначеЕсли ТипПриемника <> "ХранилищеЗначения"  Тогда
					
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = ТипУникальныйИдентификатор Тогда
				
		Если ТипПриемника = "УникальныйИдентификатор" Тогда
		ИначеЕсли ТипПриемника = "Строка" Тогда
			
			Значение = Строка(Значение);
			
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
			
			ТипПриемника = "УникальныйИдентификатор";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = ТипВидДвиженияНакопления Тогда
				
		Значение = Строка(Значение);		
		
	Иначе	
		
		СвойствоУстановлено = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ОпределитьТипДанныхДляПриемника(Значение)
	
	ТипПриемника = одТипЗначенияСтрокой(Значение);
	
	// есть ли хоть какое пко с типом приемника ТипПриемника
	// если правила нат - то "", если есть , то то что нашли оставляем
	СтрокаТаблицы = ТаблицаПравилКонвертации.Найти(ТипПриемника, "Приемник");
	
	Если СтрокаТаблицы = Неопределено Тогда
		ТипПриемника = "";
	КонецЕсли;
	
	Возврат ТипПриемника;
	
КонецФункции

Процедура ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС)
	
	Значение = ПривестиНомерКДлине(Строка(Значение), ПКС.ПриводитьКДлине);
		
КонецПроцедуры

Процедура ВыполнитьЗаписьСтруктурыВXML(СтруктураДанных, УзелКоллекцииСвойств, ЭтоОбычноеСвойство = Истина)
	
	УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента(?(ЭтоОбычноеСвойство, "Свойство", "ЗначениеПараметра"));
	
	Для Каждого ЭлементКоллекции Из СтруктураДанных Цикл
		
		Если ЭлементКоллекции.Ключ = "Выражение"
			ИЛИ ЭлементКоллекции.Ключ = "Значение"
			ИЛИ ЭлементКоллекции.Ключ = "Нпп"
			ИЛИ ЭлементКоллекции.Ключ = "ГНпп" Тогда
			
			одЗаписатьЭлемент(УзелКоллекцииСвойств, ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			
		ИначеЕсли ЭлементКоллекции.Ключ = "Ссылка" Тогда
			
			УзелКоллекцииСвойств.ЗаписатьБезОбработки(ЭлементКоллекции.Значение);
			
		Иначе
			
			УстановитьАтрибут(УзелКоллекцииСвойств, ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();		
	
КонецПроцедуры

Процедура СоздатьСложнуюИнформациюДляЗаписиВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяПриемника, ИмяПараметра)
	
	Если ПустаяСтрока(ИмяПараметра) Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяПриемника, "Свойство");
		
	Иначе
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяПараметра, "ЗначениеПараметра");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяУзла, НаименованиеУзлаXML = "Свойство")
	
	Если НуженУзелXML Тогда
		
		УзелСвойства = СоздатьУзел(НаименованиеУзлаXML);
		УстановитьАтрибут(УзелСвойства, "Имя", ИмяУзла);
		
	Иначе
		
		СтруктураДанных = Новый Структура("Имя", ИмяУзла);	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ИмяАтрибута, ЗначениеАтрибута)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		СтруктураУзлаСвойств.Вставить(ИмяАтрибута, ЗначениеАтрибута);
	Иначе
		УстановитьАтрибут(УзелСвойства, ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ИмяАтрибута, ЗначениеАтрибута)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		СтруктураУзлаСвойств.Вставить(ИмяАтрибута, ЗначениеАтрибута);
	Иначе
		одЗаписатьЭлемент(УзелСвойства, ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроизвольныеДанныеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ИмяАтрибута, ЗначениеАтрибута)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		СтруктураУзлаСвойств.Вставить(ИмяАтрибута, ЗначениеАтрибута);
	Иначе
		УзелСвойства.ЗаписатьБезОбработки(ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство = Истина)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		ВыполнитьЗаписьСтруктурыВXML(СтруктураУзлаСвойств, УзелКоллекцииСвойств, ЭтоОбычноеСвойство);
	Иначе
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
	КонецЕсли;
	
КонецПроцедуры


// Формирует узлы свойств объекта приемника в соответствии с указанной коллекцией правил конвертации свойств
//
// Параметры:
//  Источник		     - произвольный источник данных
//  Приемник		     - xml-узел объекта приемника
//  ВходящиеДанные	     - произвольные вспомогательные данные, передаваемые правилу
//                         для выполнения конвертации
//  ИсходящиеДанные      - произвольные вспомогательные данные, передаваемые правилам
//                         конвертации объектов свойств
//  ПКО				     - ссылка на правило конвертации объектов (родитель коллекции правил конвертации свойств)
//  КоллекцияПКС         - коллекция правил конвертации свойств
//  УзелКоллекцииСвойств - xml-узел коллекции свойств
//  ОбъектКоллекции      - если указан, то выполняется выгрузка свойств объекта коллекции, иначе Источника
//  ИмяПредопределенногоЭлемента - если указан, то в свойствах пишется имя предопределенного элемента
// 
Процедура ВыгрузитьСвойства(Источник, 
							Приемник, 
							ВходящиеДанные, 
							ИсходящиеДанные, 
							ПКО, 
							КоллекцияПКС, 
							УзелКоллекцииСвойств = Неопределено, 
							ОбъектКоллекции = Неопределено, 
							ИмяПредопределенногоЭлемента = Неопределено, 
							Знач ВыгрузитьТолькоСсылку = Ложь, 
							Знач ЭтоВыгрузкаСсылки = Ложь, 
							Знач ВыгружаетсяОбъект = Ложь, 
							КлючПоискаСсылки = "", 
							НеИспользоватьПравилаСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные = Ложь,
							ЗначениеСсылкиВДругойИБ = "")
							
	Если УзелКоллекцииСвойств = Неопределено Тогда
		
		УзелКоллекцииСвойств = Приемник;
		
	КонецЕсли;
	
	ВыборкаСвойств = Неопределено;
	
	Если ЭтоВыгрузкаСсылки Тогда
				
		// Выгружаем имя предопределенного если оно указано
		Если ИмяПредопределенногоЭлемента <> Неопределено Тогда
			
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{ИмяПредопределенногоЭлемента}");
			одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", ИмяПредопределенногоЭлемента);
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ПКС Из КоллекцияПКС Цикл
		
		Если ПКС.УпрощеннаяВыгрузкаСвойства Тогда
			
			
			 //	Создаем узел свойства
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", ПКС.Приемник);
			
			Если Не ПустаяСтрока(ПКС.ТипПриемника) Тогда
				
				УстановитьАтрибут(УзелКоллекцииСвойств, "Тип", ПКС.ТипПриемника);
				
			КонецЕсли;
			
			Если ПКС.НеЗамещать Тогда
				
				УстановитьАтрибут(УзелКоллекцииСвойств, "НеЗамещать",	"true");
				
			КонецЕсли;
			
			Если ПКС.ПоискПоДатеНаРавенство  Тогда
				
				УстановитьАтрибут(УзелКоллекцииСвойств, "ПоискПоДатеНаРавенство", "true");
				
			КонецЕсли;
			
			Значение = Неопределено;
			ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник, ВыборкаСвойств);
			
			Если ПКС.ПриводитьКДлине <> 0 Тогда
				
				ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС);
								
			КонецЕсли;
			
			ЭтоNULL = Ложь;
			Пусто = одПустое(Значение, ЭтоNULL);
						
			Если Пусто Тогда
				
				УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
				Продолжить;
				
			КонецЕсли;
			
			одЗаписатьЭлемент(УзелКоллекцииСвойств, 	"Значение", Значение);
			
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
			Продолжить;					
					
		ИначеЕсли ПКС.ВидПриемника = "ВидыСубконтоСчета" Тогда
			
			_ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, 
				ПКС, УзелКоллекцииСвойств, ОбъектКоллекции, ВыгрузитьТолькоСсылку);
			
			Продолжить;
			
		ИначеЕсли ПКС.Имя = "{УникальныйИдентификатор}" Тогда
			
			СсылкаНаИсточник = ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект);
			
			УникальныйИдентификатор = СсылкаНаИсточник.УникальныйИдентификатор();
			
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{УникальныйИдентификатор}");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Тип", "Строка");
			УстановитьАтрибут(УзелКоллекцииСвойств, "ТипИсточника", ПКО.ТипИсточника);
			УстановитьАтрибут(УзелКоллекцииСвойств, "ТипПриемника", ПКО.ТипПриемника);
			одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", УникальныйИдентификатор);
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
			
			Продолжить;
			
		ИначеЕсли ПКС.ЭтоГруппа Тогда
			
			ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку);
			
			Продолжить;
			
		КонецЕсли;
		
		//	Инициализируем значение, которое будем конвертировать
		Значение 	 = Неопределено;
		ИмяПКО		 = ПКС.ПравилоКонвертации;
		НеЗамещать   = ПКС.НеЗамещать;
		
		Пусто		 = Ложь;
		Выражение	 = Неопределено;
		ТипПриемника = ПКС.ТипПриемника;

		ЭтоNULL      = Ложь;

		
		// Обработчик ПередВыгрузкой
        Если ПКС.ЕстьОбработчикПередВыгрузкой Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКС.ПередВыгрузкой);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(55, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПередВыгрузкойСвойства", Значение);
														
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;

        		
        //	Создаем узел свойства
		СтруктураУзлаСвойств = Неопределено;
		УзелСвойства = Неопределено;
		
		СоздатьСложнуюИнформациюДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ПКС.НуженУзелXMLПриВыгрузке, ПКС.Приемник, ПКС.ИмяПараметраДляПередачи);
							
		Если НеЗамещать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "НеЗамещать", "true");			
						
		КонецЕсли;
		
		Если ПКС.ПоискПоДатеНаРавенство  Тогда
			
			УстановитьАтрибут(УзелКоллекцииСвойств, "ПоискПоДатеНаРавенство", "true");
			
		КонецЕсли;
		
		//	Возможно правило конвертации уже определено
		Если Не ПустаяСтрока(ИмяПКО) Тогда
			
			ПКОСвойств = Правила[ИмяПКО];
			
		Иначе
			
			ПКОСвойств = Неопределено;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТипПриемника) Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
			
		ИначеЕсли ПКОСвойств <> Неопределено Тогда
			
			//Попытка определить тип свойства приемника
			ТипПриемника = ПКОСвойств.Приемник;
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
			
		КонецЕсли;
		
		ЭтоОбычноеСвойство = ПустаяСтрока(ПКС.ИмяПараметраДляПередачи);
		
		//	Определяем конвертируемое значение
		Если Выражение <> Неопределено Тогда
			
			ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Выражение", Выражение);
			
			ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
			Продолжить;
			
		ИначеЕсли Пусто Тогда
			
			ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
			Продолжить;
			
		Иначе
			
			ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник, ВыборкаСвойств);
			
			Если ПКС.ПриводитьКДлине <> 0 Тогда
				
				ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС);
								
			КонецЕсли;
						
		КонецЕсли;

		СтароеЗначениеДоОбработчикаПриВыгрузке = Значение;
		Пусто = одПустое(Значение, ЭтоNULL);
		
		// Обработчик ПриВыгрузке
		Если ПКС.ЕстьОбработчикПриВыгрузке Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКС.ПриВыгрузке);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(56, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПриВыгрузкеСвойства", Значение);
														
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;


		// Инициализируем еще раз переменную Пусто, может быть Значение было изменено 
		// в обработчике "При выгрузке"
		Если СтароеЗначениеДоОбработчикаПриВыгрузке <> Значение Тогда
			
			Пусто = одПустое(Значение, ЭтоNULL);
			
		КонецЕсли;

		Если Пусто Тогда
			
			Если ЭтоNULL Тогда
				
				Значение = Неопределено;
				
			КонецЕсли;
			
			Если Значение <> Неопределено 
				И ПустаяСтрока(ТипПриемника) Тогда
				
				ТипПриемника = ОпределитьТипДанныхДляПриемника(Значение);
				
				Если Не ПустаяСтрока(ТипПриемника) Тогда
					
					ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
					
				КонецЕсли;
								
			КонецЕсли;			
			
			ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
			Продолжить;
			
		КонецЕсли;
      		
		УзелСсылки = Неопределено;
		
		Если ПКОСвойств = Неопределено
			И ПустаяСтрока(ИмяПКО) Тогда
			
			СвойствоУстановлено = Ложь;
			ТипЗначения = ТипЗнч(Значение);
			НужноУказатьТип = Ложь;
			ОпределитьВозможностьУстановкиЗначения(Значение, ТипЗначения, ТипПриемника, СвойствоУстановлено, НужноУказатьТип);
						
			Если СвойствоУстановлено Тогда
				
				// если нужно тип указываем
				Если НужноУказатьТип Тогда
					
					ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
					
				КонецЕсли;
				
				ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Значение", Значение);
								              				
			Иначе
				
				МенеджерЗначения = Менеджеры[ТипЗначения];
				
				Если МенеджерЗначения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПКОСвойств = МенеджерЗначения.ПКО;
				
				Если ПКОСвойств = Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				ИмяПКО = ПКОСвойств.Имя;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ПКОСвойств <> Неопределено) 
			Или (Не ПустаяСтрока(ИмяПКО)) Тогда
			
			ПараметрВыгрузитьТолькоСсылку = Истина;
			
			Если ВыгружатьОбъектПоСсылке(Значение, УзелДляОбмена) Тогда
				
				Если Не ОбъектПроходитФильтрРазрешенныхОбъектов(Значение) Тогда
					
					// выставляем признак того, что объект должен быть выгружен полностью
					ПараметрВыгрузитьТолькоСсылку = Ложь;
					
					// добавляем запись в регистр сопоставления
					СтруктураЗаписи = Новый Структура;
					СтруктураЗаписи.Вставить("УзелИнформационнойБазы", УзелДляОбмена);
					СтруктураЗаписи.Вставить("УникальныйИдентификаторИсточника", Значение);
					СтруктураЗаписи.Вставить("ОбъектВыгруженПоСсылке", Истина);
					
					РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.ДобавитьЗапись(СтруктураЗаписи, Истина);
					
					// добавляем объект в массив выгруженных по ссылке объектов
					// для последующей регистрации объектов на текущем узле
					// и для присвоения номера текущего отправленного сообщения обмена
					ВыгруженныеПоСсылкеОбъектыДобавитьЗначение(Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПравилоСГлобальнойВыгрузкой = Ложь;
			УзелСсылки = ВыгрузитьПоПравилу(Значение, , ИсходящиеДанные, , ИмяПКО, , ПараметрВыгрузитьТолькоСсылку, ПКОСвойств, , , , , Ложь, 
				ПравилоСГлобальнойВыгрузкой, НеИспользоватьПравилаСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные);
	
			Если УзелСсылки = Неопределено Тогда
						
				Продолжить;
						
			КонецЕсли;
			
			Если ПустаяСтрока(ТипПриемника) Тогда
						
				ТипПриемника  = ПКОСвойств.Приемник;
				ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
														
			КонецЕсли;			
				
			ТипУзлаСсылки = ТипЗнч(УзелСсылки);
						
			Если ТипУзлаСсылки = ТипСтрока Тогда
				
				Если Найти(УзелСсылки, "<Ссылка") > 0 Тогда
								
					ДобавитьПроизвольныеДанныеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Ссылка", УзелСсылки);
											
				Иначе
					
					ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Значение", УзелСсылки);
																	
				КонецЕсли;
						
			ИначеЕсли ТипУзлаСсылки = ТипЧисло Тогда
				
				Если ПравилоСГлобальнойВыгрузкой Тогда
					ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "ГНпп", УзелСсылки);
				Иначе
					ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Нпп", УзелСсылки);
				КонецЕсли;
														
			Иначе
				
				УзелСсылки.ЗаписатьКонецЭлемента();
				ИнформацияДляЗаписиВФайл = УзелСсылки.Закрыть();
				
				ДобавитьПроизвольныеДанныеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Ссылка", ИнформацияДляЗаписиВФайл);
										
			КонецЕсли;
													
		КонецЕсли;


		
		// Обработчик ПослеВыгрузки

		Если ПКС.ЕстьОбработчикПослеВыгрузки Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Выполнить(ПКС.ПослеВыгрузки);
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(57, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПослеВыгрузкиСвойства", Значение);					
				
			КонецПопытки;
									
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
		
	КонецЦикла; // по ПКС
	
КонецПроцедуры

Процедура ОпределитьПКОПоПараметрам(ПКО, Источник, ИмяПКО)
	
	// Поиск ПКО
	Если ПКО = Неопределено Тогда
		
        ПКО = НайтиПравило(Источник, ИмяПКО);
		
	ИначеЕсли (Не ПустаяСтрока(ИмяПКО))
		И ПКО.Имя <> ИмяПКО Тогда
		
		ПКО = НайтиПравило(Источник, ИмяПКО);
				
	КонецЕсли;	
	
КонецПроцедуры

Функция НайтиСтруктуруСвойствПоПараметрам(ПКО, Источник)
	
	СтруктураСвойств = Менеджеры[ПКО.Источник];
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Менеджеры[ТипЗнч(Источник)];
	КонецЕсли;	
	
	Возврат СтруктураСвойств;
	
КонецФункции

Функция ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект)
	
	Если ВыгружаетсяОбъект Тогда
		Возврат Источник.Ссылка;
	Иначе
		Возврат Источник;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВнутреннеПредставлениеДляПоиска(Источник, СтруктураСвойств)
	
	Если СтруктураСвойств.ИмяТипа = "Перечисление" Тогда
		Возврат Источник;
	Иначе
		Возврат ЗначениеВСтрокуВнутр(Источник);
	КонецЕсли
	
КонецФункции

Процедура ПровестиОбновлениеДанныхВВыгружаемыхДанных()
	
	Если СоответствиеДанныхДляОбновленияВыгруженныхЭлементов.Количество() > 0 Тогда
		
		СоответствиеДанныхДляОбновленияВыгруженныхЭлементов.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиУстановкуПризнаковВыгруженныхОбъектовВФайл()
	
	НППЗаписанногоВФайл = СчетчикНПП;		
	
КонецПроцедуры

Процедура ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, Узел)
	
	Если ЗначениеЗаполнено(ПриоритетОбъектовОбмена)
		И ПриоритетОбъектовОбмена <> Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
		
		Если ПриоритетОбъектовОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже Тогда
			УстановитьАтрибут(Узел, "ПриоритетОбъектаОбмена", "Ниже");
		ИначеЕсли ПриоритетОбъектовОбмена = Перечисления.ПриоритетыОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает Тогда
			УстановитьАтрибут(Узел, "ПриоритетОбъектаОбмена", "Совпадает");					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО						 - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "",
						   УзелСсылки				= Неопределено,
						   ТолькоПолучитьУзелСсылки	= Ложь,
						   ПКО						= Неопределено,
						   ВыгружатьСсылкиУПодчиненныхОбъектов = Истина,
						   ВыгрузкаСтрокиНабораЗаписейРегистра = Ложь,
						   УзелПредка				= Неопределено,
						   ИмяКонстантыДляВыгрузки  = "",
						   ЭтоВыгружаетсяОбъект = Неопределено,
						   ЭтоПравилоСГлобальнойВыгрузкойОбъектов = Ложь,
						   НеИспользоватьПравилоСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные = Ложь)
	//
	
	ОпределитьПКОПоПараметрам(ПКО, Источник, ИмяПКО);
			
	Если ПКО = Неопределено Тогда
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(45);
		
		ЗП.Объект = Источник;
		Попытка
			ЗП.ТипОбъекта = ТипЗнч(Источник);
		Исключение
		КонецПопытки;
		
		ЗаписатьВПротоколВыполнения(45, ЗП, Истина); // не найдено ПКО
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу + 1;
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Попытка
			ИсточникВСтроку = Строка(Источник);
		Исключение
			ИсточникВСтроку = " ";
		КонецПопытки;
		
		ПрОбъекта = ИсточникВСтроку + "  (" + ТипЗнч(Источник) + ")";
		
		СтрокаНазванияПКО = " ПКО: " + СокрЛП(ИмяПКО) + "  (" + СокрЛП(ПКО.Наименование) + ")";
		
		Если ТолькоПолучитьУзелСсылки Тогда
			СтрокаПользователю = "Конвертация ссылки на объект: ";
		Иначе
			СтрокаПользователю = "Конвертация объекта: ";
		КонецЕсли;
		
		ЗаписатьВПротоколВыполнения(СтрокаПользователю + ПрОбъекта + СтрокаНазванияПКО, , Ложь, ТекущийУровеньВложенностиВыгрузитьПоПравилу + 1, 7);
		
	КонецЕсли;
	
	ЭтоПравилоСГлобальнойВыгрузкойОбъектов = Ложь;
	
	ЗапоминатьВыгруженные       = Ложь;
	ВыгруженныеОбъекты          = ПКО.Выгруженные;
	ВсеОбъектыВыгружены         = ПКО.ВсеОбъектыВыгружены;
	НеЗамещатьОбъектПриЗагрузке = ПКО.НеЗамещать;
	НеСоздаватьЕслиНеНайден     = ПКО.НеСоздаватьЕслиНеНайден;
	ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD     = ПКО.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
	НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = ПКО.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;
	ПриоритетОбъектовОбмена = ПКО.ПриоритетОбъектовОбмена;
	
	РегистрироватьОбъектНаУзлеОтправителе = Ложь;
	
	ПрефиксАвтонумерации		= "";
	РежимЗаписи     			= "";
	РежимПроведения 			= "";

   	ИмяТипа          = "";
	ВыгружатьСвойстваОбъекта = Истина;
	
	СтруктураСвойств = НайтиСтруктуруСвойствПоПараметрам(ПКО, Источник);
			
	Если СтруктураСвойств <> Неопределено Тогда
		ИмяТипа = СтруктураСвойств.ИмяТипа;
	КонецЕсли;

	КлючВыгружаемыхДанных = ИмяПКО;
	
	ЭтоНеСсылочныйТип = ИмяТипа = "РегистрСведений" 
		ИЛИ ИмяТипа = "Константы";
	// КлючВыгружаемыхДанных
	Если ЭтоНеСсылочныйТип 
		ИЛИ ПустаяСтрока(ИмяТипа) Тогда
		
		ЗапоминатьВыгруженные = Ложь;
		
	КонецЕсли;
	
	СсылкаНаИсточник = Неопределено;
	ВыгружаетсяОбъект = ЭтоВыгружаетсяОбъект;
	
	Если (Источник <> Неопределено) 
		И НЕ ЭтоНеСсылочныйТип Тогда
		
		Если ВыгружаетсяОбъект = Неопределено Тогда
			// если не указано что выгружается, то считаем что выгружается объект
			ВыгружаетсяОбъект = Истина;	
		КонецЕсли;
		
		СсылкаНаИсточник = ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект);
		Если ЗапоминатьВыгруженные Тогда
			КлючВыгружаемыхДанных = ОпределитьВнутреннеПредставлениеДляПоиска(СсылкаНаИсточник, СтруктураСвойств);
		КонецЕсли;
		
	Иначе
		
		ВыгружаетсяОбъект = Ложь;
			
	КонецЕсли;
	
	// Переменная для хранения имени предопределенного элемента
	ИмяПредопределенногоЭлемента = Неопределено;

	// Глобальный обработчик ПередКонвертациейОбъекта
    Отказ = Ложь;	
	Если ЕстьГлобальныйОбработчикПередКонвертациейОбъекта Тогда
		
		Попытка
			Выполнить(Конвертация.ПередКонвертациейОбъекта);
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(64, ОписаниеОшибки(), ПКО, Источник, НСтр("ru = 'ПередКонвертациейОбъекта (глобальный)'"));
		КонецПопытки;
				
		Если Отказ Тогда	//	Отказ от дальнейшей обработки правила
			ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат Приемник;
		КонецЕсли;
		
	КонецЕсли;


	// Обработчик ПередВыгрузкой
    Если ПКО.ЕстьОбработчикПередВыгрузкой Тогда
				
		Попытка
			Выполнить(ПКО.ПередВыгрузкой);
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(41, ОписаниеОшибки(), ПКО, Источник, "ПередВыгрузкойОбъекта");				
		КонецПопытки;
				
		Если Отказ Тогда	//	Отказ от дальнейшей обработки правила
			ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат Приемник;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаВСтекеВыгрузки = Неопределено;
	
	НужноОбновитьЛокальныйКЭШВыгруженныхОбъектов = Ложь;
	ЗначениеСсылкиВДругойИБ = "";

    // Возможно такие данные уже выгружались
    Если Не ВсеОбъектыВыгружены Тогда
		
		Нпп = 0;
		
		Если ЗапоминатьВыгруженные Тогда
			
			СтрокаВыгруженныхОбъектов = ВыгруженныеОбъекты.Найти(КлючВыгружаемыхДанных, "Ключ");
			
			Если СтрокаВыгруженныхОбъектов <> Неопределено Тогда
				
				СтрокаВыгруженныхОбъектов.КоличествоОбращений = СтрокаВыгруженныхОбъектов.КоличествоОбращений + 1;
				СтрокаВыгруженныхОбъектов.НомерПоследнегоОбращения = СчетчикНПП;
				
				Если ТолькоПолучитьУзелСсылки Тогда
					
					ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
					Если Найти(СтрокаВыгруженныхОбъектов.УзелСсылки, "<Ссылка") > 0
						И НППЗаписанногоВФайл >= СтрокаВыгруженныхОбъектов.НППСсылки Тогда
						Возврат СтрокаВыгруженныхОбъектов.НППСсылки;
					Иначе
						Возврат СтрокаВыгруженныхОбъектов.УзелСсылки;
					КонецЕсли;
					
				КонецЕсли;
				
				НомерВыгруженнойСсылки = СтрокаВыгруженныхОбъектов.НППСсылки;
				
				Если НЕ СтрокаВыгруженныхОбъектов.ВыгруженаТолькоСсылка Тогда
					
					ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
					Если Найти(СтрокаВыгруженныхОбъектов.УзелСсылки, "<Ссылка") > 0
						И НППЗаписанногоВФайл >= СтрокаВыгруженныхОбъектов.НППСсылки Тогда
						Возврат СтрокаВыгруженныхОбъектов.НППСсылки;
					Иначе
						Возврат СтрокаВыгруженныхОбъектов.УзелСсылки;
					КонецЕсли;
					
				Иначе
					
					СтрокаВСтекеВыгрузки = СтекВызововВыгрузкиДанных.Найти(КлючВыгружаемыхДанных, "Ссылка");
				
					Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
						ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
						Возврат Неопределено;
					КонецЕсли;
					
					СтрокаВСтекеВыгрузки = СтекВызововВыгрузкиДанных.Добавить();
					СтрокаВСтекеВыгрузки.Ссылка = КлючВыгружаемыхДанных;
					
					Нпп = НомерВыгруженнойСсылки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Нпп = 0 Тогда
			
			СчетчикНПП = СчетчикНПП + 1;
			Нпп         = СчетчикНПП;
			
			
			// Это позволит избежать циклических ссылок
			Если ЗапоминатьВыгруженные Тогда
				
				Если СтрокаВыгруженныхОбъектов = Неопределено Тогда
					
					Если НЕ ЭтоПравилоСГлобальнойВыгрузкойОбъектов
						И НЕ НужноОбновитьЛокальныйКЭШВыгруженныхОбъектов
						И ВыгруженныеОбъекты.Количество() > ЧислоХранимыхВыгруженныхОбъектовПоТипам Тогда
						
						НужноОбновитьЛокальныйКЭШВыгруженныхОбъектов = Истина;
						СоответствиеДанныхДляОбновленияВыгруженныхЭлементов.Вставить(ПКО.Приемник, ПКО);
												
					КонецЕсли;
					
					СтрокаВыгруженныхОбъектов = ВыгруженныеОбъекты.Добавить();
					
				КонецЕсли;
				
				СтрокаВыгруженныхОбъектов.Ключ = КлючВыгружаемыхДанных;
				СтрокаВыгруженныхОбъектов.УзелСсылки = НПП;
				СтрокаВыгруженныхОбъектов.НППСсылки = НПП;
				СтрокаВыгруженныхОбъектов.НомерПоследнегоОбращения = НПП;
												
				Если ТолькоПолучитьУзелСсылки Тогда
					
					СтрокаВыгруженныхОбъектов.ВыгруженаТолькоСсылка = Истина;					
					
				Иначе
					
					СтрокаВСтекеВыгрузки = СтекВызововВыгрузкиДанных.Добавить();
					СтрокаВСтекеВыгрузки.Ссылка = КлючВыгружаемыхДанных;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;

	СоответствиеЗначений = ПКО.Значения;
	КоличествоЭлементовСоответствияЗначений = СоответствиеЗначений.Количество();
	
	// Обработка соответствий предопределенных элементов
	Если ВерсияПлатформыПриемника = "8.0" ИЛИ ВерсияПлатформыПриемника = "УП" Тогда
		
		Если ИмяПредопределенногоЭлемента = Неопределено Тогда
			
			Если СтруктураСвойств <> Неопределено
				И КоличествоЭлементовСоответствияЗначений > 0
				И СтруктураСвойств.ВозможенПоискПоПредопределенным Тогда
			
				Попытка
					ИмяПредопределенногоИсточник = СтруктураСвойств.Менеджер.ПолучитьИмяПредопределенного(СсылкаНаИсточник)
				Исключение
					ИмяПредопределенногоИсточник = "";
				КонецПопытки;
				
			Иначе
				
				ИмяПредопределенногоИсточник = "";
				
			Конецесли;
			
			Если НЕ ПустаяСтрока(ИмяПредопределенногоИсточник)
				И КоличествоЭлементовСоответствияЗначений > 0 Тогда
				
				ИмяПредопределенногоЭлемента = СоответствиеЗначений[СсылкаНаИсточник];
								
			Иначе
				ИмяПредопределенногоЭлемента = Неопределено;				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ИмяПредопределенногоЭлемента <> Неопределено Тогда
			КоличествоЭлементовСоответствияЗначений = 0;
		КонецЕсли;			
		
	Иначе	
		ИмяПредопределенногоЭлемента = Неопределено;	
	КонецЕсли;
	
	НеНужноВыгружатьПоСоответствиюЗначений = (КоличествоЭлементовСоответствияЗначений = 0);
	
	Если Не НеНужноВыгружатьПоСоответствиюЗначений Тогда
		
		// если нет объекта в соответствии значений - выгружаем его штатным образом
		УзелСсылки = СоответствиеЗначений[СсылкаНаИсточник];
		Если УзелСсылки = Неопределено Тогда
			
			// возможно это конвертация из перечисления в перечисление и мы просто не нашли по
			//ПКЗ нужное свойство - тогда просто выгружаем пустую ссылку и все
			Если СтруктураСвойств.ИмяТипа = "Перечисление"
				И Найти(ПКО.Приемник, "ПеречислениеСсылка.") > 0 Тогда
				
				// записываем ошибку в протокол выполнения
				ЗП = ПолучитьСтруктуруЗаписиПротокола();
				ЗП.ИмяПКО              = ИмяПКО;
				ЗП.Значение            = Источник;
				ЗП.ТипЗначения         = СтруктураСвойств.ТипСсылкиСтрокой;
				ЗП.КСообщенияОбОшибках = 71;
				ЗП.Текст               = НСтр("ru = 'В правиле конвертации значений (ПКЗ) необходимо сопоставить значение Источника значению Приемника.
													|Если подходящего значения приемника нет, то указать пустое значение.'");
				//
				ЗаписатьВПротоколВыполнения(71, ЗП);
				
				Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
					СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
				КонецЕсли;
				
				ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
				
				Возврат Неопределено;
				
			Иначе
				
				НеНужноВыгружатьПоСоответствиюЗначений = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НЕВыгружатьПодчиненныеОбъекты = ТолькоПолучитьУзелСсылки ИЛИ НЕ ВыгружатьСсылкиУПодчиненныхОбъектов;
	
	НужноЗапоминатьОбъект = ЗапоминатьВыгруженные И (Не ВсеОбъектыВыгружены);
	
	Если НеНужноВыгружатьПоСоответствиюЗначений Тогда
		
		Если ПКО.СвойстваПоиска.Количество() > 0 
			ИЛИ ИмяПредопределенногоЭлемента <> Неопределено Тогда			
			
			//	Формируем узел ссылки
			УзелСсылки = СоздатьУзел("Ссылка");
						
			Если НужноЗапоминатьОбъект Тогда
				
				Если ЭтоПравилоСГлобальнойВыгрузкойОбъектов Тогда
					УстановитьАтрибут(УзелСсылки, "ГНпп", Нпп);
				Иначе
					УстановитьАтрибут(УзелСсылки, "Нпп", Нпп);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НеСоздаватьЕслиНеНайден Тогда
				УстановитьАтрибут(УзелСсылки, "НеСоздаватьЕслиНеНайден", НеСоздаватьЕслиНеНайден);
			КонецЕсли;
			
			Если РегистрироватьОбъектНаУзлеОтправителе Тогда
				УстановитьАтрибут(УзелСсылки, "РегистрироватьОбъектНаУзлеОтправителе", РегистрироватьОбъектНаУзлеОтправителе);
			КонецЕсли;
			
			ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, УзелСсылки);
			
			Если НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике Тогда
				УстановитьАтрибут(УзелСсылки, "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике", НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике);				
			КонецЕсли;
			
			ВыгрузитьТолькоСсылку = ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ НЕВыгружатьПодчиненныеОбъекты;
			
			Если ВыгружатьСвойстваОбъекта = Истина Тогда
			
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКО.СвойстваПоиска, 
					УзелСсылки, , ИмяПредопределенногоЭлемента, ВыгрузитьТолькоСсылку, 
					Истина, ВыгружаетсяОбъект, КлючВыгружаемыхДанных, , ЗначениеСсылкиВДругойИБ);
					
			КонецЕсли;
			
			УзелСсылки.ЗаписатьКонецЭлемента();
			УзелСсылки = УзелСсылки.Закрыть();
			
			Если НужноЗапоминатьОбъект Тогда
				
				СтрокаВыгруженныхОбъектов.УзелСсылки = УзелСсылки;															
								
			КонецЕсли;			
			
		Иначе
			УзелСсылки = Нпп;
		КонецЕсли;
		
	Иначе
		
		// Поиск в соответствии значений по ПКЗ
		Если УзелСсылки = Неопределено Тогда
			
			// записываем ошибку в протокол выполнения
			ЗП = ПолучитьСтруктуруЗаписиПротокола();
			ЗП.ИмяПКО              = ИмяПКО;
			ЗП.Значение            = Источник;
			ЗП.ТипЗначения         = ТипЗнч(Источник);
			ЗП.КСообщенияОбОшибках = 71;
			
			ЗаписатьВПротоколВыполнения(71, ЗП);
			
			Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
				СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
			КонецЕсли;
			
			ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗапоминатьВыгруженные Тогда
			СтрокаВыгруженныхОбъектов.УзелСсылки = УзелСсылки;			
		КонецЕсли;
		
		Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
			СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
		КонецЕсли;
		
		ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
		Возврат УзелСсылки;
		
	КонецЕсли;

		
	Если ТолькоПолучитьУзелСсылки
		Или ВсеОбъектыВыгружены Тогда
		
		Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
			СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
		КонецЕсли;
		
		ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
		Возврат УзелСсылки;
		
	КонецЕсли; 

    Если Приемник = Неопределено Тогда
		
		Приемник = СоздатьУзел("Объект");
		
		Если НЕ ВыгрузкаСтрокиНабораЗаписейРегистра Тогда
			
			Если ЭтоПравилоСГлобальнойВыгрузкойОбъектов Тогда
				УстановитьАтрибут(Приемник, "ГНпп", Нпп);
			Иначе
				УстановитьАтрибут(Приемник, "Нпп",	Нпп);
			КонецЕсли;
			
			УстановитьАтрибут(Приемник, "Тип", 			ПКО.Приемник);
			УстановитьАтрибут(Приемник, "ИмяПравила",	ПКО.Имя);
			
			Если НЕ ПустаяСтрока(ИмяКонстантыДляВыгрузки) Тогда
				
				УстановитьАтрибут(Приемник, "ИмяКонстанты", ИмяКонстантыДляВыгрузки);
				
			КонецЕсли;
			
			ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, Приемник);
			
			Если НеЗамещатьОбъектПриЗагрузке Тогда
				УстановитьАтрибут(Приемник, "НеЗамещать",	"true");
			КонецЕсли;
			
			Если Не ПустаяСтрока(ПрефиксАвтонумерации) Тогда
				УстановитьАтрибут(Приемник, "ПрефиксАвтонумерации",	ПрефиксАвтонумерации);
			КонецЕсли;
			
			Если Не ПустаяСтрока(РежимЗаписи) Тогда
				
				УстановитьАтрибут(Приемник, "РежимЗаписи",	РежимЗаписи);
				Если Не ПустаяСтрока(РежимПроведения) Тогда
					УстановитьАтрибут(Приемник, "РежимПроведения",	РежимПроведения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(УзелСсылки) <> ТипЧисло Тогда
				ДобавитьПодчиненный(Приемник, УзелСсылки);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

	// Обработчик ПриВыгрузке
	СтандартнаяОбработка = Истина;
	Отказ = Ложь;
	
	Если ПКО.ЕстьОбработчикПриВыгрузке Тогда
		
		Попытка
			Выполнить(ПКО.ПриВыгрузке);
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(42, ОписаниеОшибки(), ПКО, Источник, "ПриВыгрузкеОбъекта");				
		КонецПопытки;
				
		Если Отказ Тогда	//	отказ от записи объекта в файл
			
			Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
				СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
			КонецЕсли;
			
			ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат УзелСсылки;
		КонецЕсли;
		
	КонецЕсли;

	// Выгрузка свойств
	Если СтандартнаяОбработка Тогда
		
		Если НЕ ПустаяСтрока(ИмяКонстантыДляВыгрузки) Тогда
			
			МассивСвойствДляВыгрузки = Новый Массив();
			
			СтрокаТаблицы = ПКО.Свойства.Найти(ИмяКонстантыДляВыгрузки, "Источник");
			
			Если СтрокаТаблицы <> Неопределено Тогда
				МассивСвойствДляВыгрузки.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
		Иначе
			
			МассивСвойствДляВыгрузки = ПКО.Свойства;
			
		КонецЕсли;
		
		Если ВыгружатьСвойстваОбъекта Тогда
		
			ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, МассивСвойствДляВыгрузки, , , , 
				ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ НЕВыгружатьПодчиненныеОбъекты, Ложь, ВыгружаетсяОбъект, КлючВыгружаемыхДанных, , ЗначениеСсылкиВДругойИБ);
				
		КонецЕсли;
			
	КонецЕсли;    
	
    // Обработчик ПослеВыгрузки

	Если ПКО.ЕстьОбработчикПослеВыгрузки Тогда
		
		Попытка
			Выполнить(ПКО.ПослеВыгрузки);
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(43, ОписаниеОшибки(), ПКО, Источник, "ПослеВыгрузкиОбъекта");				
		КонецПопытки;
			
		Если Отказ Тогда	//	отказ от записи объекта в файл
			
			Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
				СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
			КонецЕсли;
			
			ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат УзелСсылки;
		КонецЕсли;
	КонецЕсли;


	//	Запись объекта в файл
	Приемник.ЗаписатьКонецЭлемента();
	
	Инкремент(ПолеСчетчикВыгруженныхОбъектов);
	
	ТекущийУровеньВложенностиВыгрузитьПоПравилу = ТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
	
	Если УзелПредка <> Неопределено Тогда
		
		УзелПредка.ЗаписатьБезОбработки(Приемник.Закрыть());
		
	Иначе
	
		ЗаписатьВФайл(Приемник);
		
		Если НужноЗапоминатьОбъект
			И ЭтоПравилоСГлобальнойВыгрузкойОбъектов Тогда
				
			СтрокаВыгруженныхОбъектов.УзелСсылки = НПП;									
				
		КонецЕсли;
		
		Если ТекущийУровеньВложенностиВыгрузитьПоПравилу = 0 Тогда
			
			ПровестиУстановкуПризнаковВыгруженныхОбъектовВФайл();
			
		КонецЕсли;
		
		ПровестиОбновлениеДанныхВВыгружаемыхДанных();		
		
	КонецЕсли;
	
	Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
		СтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
	КонецЕсли;
	
	// Обработчик ПослеВыгрузкиВФайл
	Если ПКО.ЕстьОбработчикПослеВыгрузкиВФайл Тогда
		
		Попытка
			Выполнить(ПКО.ПослеВыгрузкиВФайл);
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(79, ОписаниеОшибки(), ПКО, Источник, "ЕстьОбработчикПослеВыгрузкиВФайл");				
		КонецПопытки;				
				
	КонецЕсли;
	
	Возврат УзелСсылки;

КонецФункции

Процедура ВыгрузитьИнформациюОЗарегистрированномОбъекте(НаборЗаписейДляВыгрузки)
	
	Если НаборЗаписейДляВыгрузки.Количество() = 0 Тогда // выгружаем пустой набор РС
		
		Отбор = Новый Структура;
		Отбор.Вставить("УникальныйИдентификаторИсточника", НаборЗаписейДляВыгрузки.Отбор.УникальныйИдентификаторИсточника.Значение);
		Отбор.Вставить("УникальныйИдентификаторПриемника", НаборЗаписейДляВыгрузки.Отбор.УникальныйИдентификаторПриемника.Значение);
		Отбор.Вставить("ТипИсточника",                     НаборЗаписейДляВыгрузки.Отбор.ТипИсточника.Значение);
		Отбор.Вставить("ТипПриемника",                     НаборЗаписейДляВыгрузки.Отбор.ТипПриемника.Значение);
		
		ВыгрузитьЗаписьСоответствияОбъектовИнформационныхБаз(Отбор, Истина);
		
	Иначе
		
		Для Каждого СтрокаНабора Из НаборЗаписейДляВыгрузки Цикл
			
			ВыгрузитьЗаписьСоответствияОбъектовИнформационныхБаз(СтрокаНабора, Ложь);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузитьЗаписьСоответствияОбъектовИнформационныхБаз(СтрокаНабора, ПустойНабор)
	
	Приемник = СоздатьУзел("ИнформацияОРегистрацииОбъекта");
	
	УстановитьАтрибут(Приемник, "УникальныйИдентификаторИсточника", Строка(СтрокаНабора.УникальныйИдентификаторИсточника.УникальныйИдентификатор()));
	УстановитьАтрибут(Приемник, "УникальныйИдентификаторПриемника",        СтрокаНабора.УникальныйИдентификаторПриемника);
	УстановитьАтрибут(Приемник, "ТипИсточника",                            СтрокаНабора.ТипИсточника);
	УстановитьАтрибут(Приемник, "ТипПриемника",                            СтрокаНабора.ТипПриемника);
	
	УстановитьАтрибут(Приемник, "ПустойНабор", ПустойНабор);
	
	Приемник.ЗаписатьКонецЭлемента(); // ИнформацияОРегистрацииОбъекта
	
	ЗаписатьВФайл(Приемник);
	
	Инкремент(ПолеСчетчикВыгруженныхОбъектов);
	
КонецПроцедуры

Процедура ВыгрузитьРегистр(НаборЗаписейДляВыгрузки, 
							Правило = Неопределено, 
							ВходящиеДанные = Неопределено, 
							НеВыгружатьОбъектыПоСсылкам = Ложь, 
							ИмяПКО = "",
							ПравилоВыгрузкиДанных = Неопределено) Экспорт
							
	ИсходящиеДанные = Неопределено;						
							
	
	ОпределитьПКОПоПараметрам(Правило, НаборЗаписейДляВыгрузки, ИмяПКО);
	
	Отказ			= Ложь;
	Свойства = Неопределено;
	ВходящиеДанные = Неопределено;
	ПриоритетОбъектовОбмена = Правило.ПриоритетОбъектовОбмена;
	
	Если ТипЗнч(НаборЗаписейДляВыгрузки) = Тип("Структура") Тогда
		
		ОтборНабораЗаписей  = НаборЗаписейДляВыгрузки.Отбор;
		СтрокиНабораЗаписей = НаборЗаписейДляВыгрузки.Строки;
		
	Иначе // НаборЗаписей
		
		ОтборНабораЗаписей  = НаборЗаписейДляВыгрузки.Отбор;
		СтрокиНабораЗаписей = НаборЗаписейДляВыгрузки;
		
	КонецЕсли;
	
	// записываем сначала отбор потом набор записей
	// отбор
	
	Приемник = СоздатьУзел("НаборЗаписейРегистра");
	
	КоличествоЗаписейВРегистре = СтрокиНабораЗаписей.Количество();
		
	СчетчикНПП = СчетчикНПП + 1;
	Нпп         = СчетчикНПП;
	
	УстановитьАтрибут(Приемник, "Нпп",			Нпп);
	УстановитьАтрибут(Приемник, "Тип", 			СтрЗаменить(Правило.Приемник, "РегистрСведенийЗапись.", "РегистрСведенийНаборЗаписей."));
	УстановитьАтрибут(Приемник, "ИмяПравила",	Правило.Имя);
	
	ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, Приемник);
	
	ВыгружаемПустойНабор = КоличествоЗаписейВРегистре = 0;
	Если ВыгружаемПустойНабор Тогда
		УстановитьАтрибут(Приемник, "ПустойНабор",	Истина);
	КонецЕсли;
	
	Приемник.ЗаписатьНачалоЭлемента("Отбор");
	
	СтруктураИсточник = Новый Структура;
	МассивПКСДляВыгрузки = Новый Массив();
	
	Для Каждого СтрокаОтбора Из ОтборНабораЗаписей Цикл
		
		Если СтрокаОтбора.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПКС = Правило.Свойства.Найти(СтрокаОтбора.Имя, "Источник");
		
		Если СтрокаПКС = Неопределено Тогда
			
			СтрокаПКС = Правило.Свойства.Найти(СтрокаОтбора.Имя, "Приемник");
			
		КонецЕсли;
		
		Если СтрокаПКС <> Неопределено
			И  (СтрокаПКС.ВидПриемника = "Свойство"
			ИЛИ СтрокаПКС.ВидПриемника = "Измерение") Тогда
			
			МассивПКСДляВыгрузки.Добавить(СтрокаПКС);
			
			Ключ = ?(ПустаяСтрока(СтрокаПКС.Источник), СтрокаПКС.Приемник, СтрокаПКС.Источник);
			
			СтруктураИсточник.Вставить(Ключ, СтрокаОтбора.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// добавляем параметры для отбора
	Для Каждого СтрокаСвойстваПоиска Из Правило.СвойстваПоиска Цикл
		
		Если ПустаяСтрока(СтрокаСвойстваПоиска.Приемник)
			И НЕ ПустаяСтрока(СтрокаСвойстваПоиска.ИмяПараметраДляПередачи) Тогда
			
			МассивПКСДляВыгрузки.Добавить(СтрокаСвойстваПоиска);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыгрузитьСвойства(СтруктураИсточник, , ВходящиеДанные, ИсходящиеДанные, Правило, МассивПКСДляВыгрузки, Приемник, 
		, , НеВыгружатьОбъектыПоСсылкам, , , , ВыгружаемПустойНабор);
	
	Приемник.ЗаписатьКонецЭлемента();
	
	Приемник.ЗаписатьНачалоЭлемента("СтрокиНабораЗаписей");
	
	// набор записей ВходящиеДанные = Неопределено;
	Для Каждого СтрокаРегистра Из СтрокиНабораЗаписей Цикл
		
		ВыгрузкаОбъектаВыборки(СтрокаРегистра, ПравилоВыгрузкиДанных, , ВходящиеДанные, НеВыгружатьОбъектыПоСсылкам, Истина, 
			Приемник, , ИмяПКО, ЛОЖЬ);
				
	КонецЦикла;
	
	Приемник.ЗаписатьКонецЭлемента();
	
	Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
	ПровестиОбновлениеДанныхВВыгружаемыхДанных();
	
	ПровестиУстановкуПризнаковВыгруженныхОбъектовВФайл();
	
	Инкремент(ПолеСчетчикВыгруженныхОбъектов, 1 - СтрокиНабораЗаписей.Количество());
	
КонецПроцедуры

Процедура ВызватьСобытияПередВыгрузкойОбъекта(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено, 
	НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, ИмяПКО, Отказ, ИсходящиеДанные)
	
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Попытка
			ПрОбъекта   = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";			
		Исключение
			ПрОбъекта   = ТипЗнч(Объект);
		КонецПопытки;
		
		ЗаписатьВПротоколВыполнения("ВЫГРУЗКА ОБЪЕКТА: " + ПрОбъекта, , Ложь, 1, 7);
		
	КонецЕсли;
	
	
	ИмяПКО			= Правило.ПравилоКонвертации;
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	

	// Глобальный обработчик ПередВыгрузкойОбъекта
    Если ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта Тогда
		
		Попытка
			Выполнить(Конвертация.ПередВыгрузкойОбъекта);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(65, ОписаниеОшибки(), Правило.Имя, Объект, НСтр("ru = 'ПередВыгрузкойОбъектаВыборки (глобальный)'"));
		КонецПопытки;
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	

	// Обработчик ПередВыгрузкой
	Если Не ПустаяСтрока(Правило.ПередВыгрузкой) Тогда
		
		Попытка
			Выполнить(Правило.ПередВыгрузкой);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(33, ОписаниеОшибки(), Правило.Имя, Объект, "ПередВыгрузкойОбъектаВыборки");
		КонецПопытки;
		
	КонецЕсли;		
		
КонецПроцедуры

Процедура ВызватьСобытияПослеВыгрузкиОбъекта(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено, 
	НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, ИмяПКО, Отказ, ИсходящиеДанные)
	
	// Глобальный обработчик ПослеВыгрузкиОбъекта
    Если ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта Тогда
		Попытка
			Выполнить(Конвертация.ПослеВыгрузкиОбъекта);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(69, ОписаниеОшибки(), Правило.Имя, Объект, НСтр("ru = 'ПослеВыгрузкиОбъектаВыборки (глобальный)'"));
		КонецПопытки;
	КонецЕсли;

	
    // Обработчик ПослеВыгрузки
	Если Не ПустаяСтрока(Правило.ПослеВыгрузки) Тогда
		
		Попытка
			Выполнить(Правило.ПослеВыгрузки);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(34, ОписаниеОшибки(), Правило.Имя, Объект, "ПослеВыгрузкиОбъектаВыборки");
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

// Производит выгрузку объекта выборки в соответствии с указанным правилом
//
// Параметры:
//  Объект         - выгружаемый объект выборки
//  Правило        - ссылка на правило выгрузки данных
//  Свойства       - свойства объекта метаданного выгружаемого объекта 
//  ВходящиеДанные - произвольные вспомогательные данные
// 
Функция ВыгрузкаОбъектаВыборки(Объект, 
								ПравилоВыгрузки, 
								Свойства=Неопределено, 
								ВходящиеДанные = Неопределено,
								НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, 
								ВыгрузкаСтрокиНабораЗаписей = Ложь, 
								УзелПредка = Неопределено, 
								ИмяКонстантыДляВыгрузки = "",
								ИмяПКО = "",
								ВызыватьСобытия = Истина)
								
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
		
	Если ВызыватьСобытия
		И ПравилоВыгрузки <> Неопределено Тогда							

		ИмяПКО			= "";		
		
		ВызватьСобытияПередВыгрузкойОбъекта(Объект, ПравилоВыгрузки, Свойства, ВходящиеДанные, 
			НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УзелСсылки = Неопределено;
	ВыгрузитьПоПравилу(Объект, , ВходящиеДанные, ИсходящиеДанные, ИмяПКО, УзелСсылки, , , НЕ НеВыгружатьОбъектыСвойствПоСсылкам, 
		ВыгрузкаСтрокиНабораЗаписей, УзелПредка, ИмяКонстантыДляВыгрузки, Истина);
		
		
	Если ВызыватьСобытия
		И ПравилоВыгрузки <> Неопределено Тогда
		
		ВызватьСобытияПослеВыгрузкиОбъекта(Объект, ПравилоВыгрузки, Свойства, ВходящиеДанные, 
		НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);	
		
	КонецЕсли;
	
	Возврат Не Отказ;
	
КонецФункции

Функция ВыгрузкаРегистра( НаборЗаписейДляВыгрузки, 
							Правило = Неопределено, 
							ВходящиеДанные = Неопределено, 
							НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, 
							ИмяПКО = "") Экспорт
							
	ИмяПКО			= "";
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
		
	ВызватьСобытияПередВыгрузкойОбъекта(НаборЗаписейДляВыгрузки, Правило, Неопределено, ВходящиеДанные, 
		НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);
		
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	
	ВыгрузитьРегистр(НаборЗаписейДляВыгрузки, 
					 Неопределено, 
					 ИсходящиеДанные, 
					 НеВыгружатьОбъектыСвойствПоСсылкам, 
					 ИмяПКО,
					 Правило);
		
	ВызватьСобытияПослеВыгрузкиОбъекта(НаборЗаписейДляВыгрузки, Правило, Неопределено, ВходящиеДанные, 
		НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);	
		
	Возврат Не Отказ;							
							
КонецФункции


Функция ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
	ВыборкаДляОчисткиДанных = Ложь, УдалятьОбъектыНепосредственно = Ложь, ВыбиратьВсеПоля = Истина) Экспорт 
	
	СтрокаРазрешения = ?(ВыгружатьТолькоРазрешенные, " РАЗРЕШЕННЫЕ ", "");
	
	СтрокаВыбораПолей = ?(ВыбиратьВсеПоля, " * ", "	ОбъектДляВыгрузки.Ссылка КАК Ссылка ");
	
	Если ИмяТипа = "Справочник" 
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" 
		ИЛИ ИмяТипа = "ПланСчетов" 
		ИЛИ ИмяТипа = "ПланВидовРасчета" 
		ИЛИ ИмяТипа = "РегистрБухгалтерии"
		ИЛИ ИмяТипа = "ПланОбмена"
		ИЛИ ИмяТипа = "Задача"
		ИЛИ ИмяТипа = "БизнесПроцесс" Тогда
		
		Запрос = Новый Запрос();
		
		Если ИмяТипа = "РегистрБухгалтерии" Тогда
			
			СтрокаВыбораПолей = "*";	
			
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	" + СтрокаВыбораПолей + "
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |";
		
		Если ВыборкаДляОчисткиДанных
			И УдалятьОбъектыНепосредственно Тогда
			
			Если (ИмяТипа = "Справочник"
				ИЛИ ИмяТипа = "ПланВидовХарактеристик") Тогда
				
				Попытка
					Если ИмяТипа = "Справочник" Тогда
						НужнаИерархия = Метаданные.Справочники[Свойства.Имя].Иерархический;
					Иначе
						НужнаИерархия = Метаданные.ПланыВидовХарактеристик[Свойства.Имя].Иерархический;
					КонецЕсли
				Исключение
					НужнаИерархия = Ложь
				КонецПопытки;
				
				Если НужнаИерархия Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|	ГДЕ ОбъектДляВыгрузки.Родитель = &Родитель
					|";
					
					Запрос.УстановитьПараметр("Родитель", Свойства.Менеджер.ПустаяСсылка());
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		 
					
	ИначеЕсли ИмяТипа = "Документ" Тогда
		
		Запрос = Новый Запрос();
		
		ИтоговоеОграничениеПоДате = "";
				
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	" + СтрокаВыбораПолей + "
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |" + ИтоговоеОграничениеПоДате;
					 
											
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		
		Непериодический = НЕ Свойства.Периодический;
		ПодчиненныйРегистратору = Свойства.ПодчиненныйРегистратору;
		
		
		НеНужноОграничениеПоДатам = ВыборкаДляОчисткиДанных	ИЛИ Непериодический;
				
		Запрос = Новый Запрос();
		
		ИтоговоеОграничениеПоДате = "";
				
		СтрокаДополненияПолейВыборкиПодчиненРегистратору = ?(НЕ ПодчиненныйРегистратору, ", NULL КАК Активность,
		|	NULL КАК Регистратор,
		|	NULL КАК НомерСтроки", "");
		
		СтрокаДополненияПолейВыборкиПериодичность = ?(Непериодический, ", NULL КАК Период", "");
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	*
				 |
				 | " + СтрокаДополненияПолейВыборкиПодчиненРегистратору + "
				 | " + СтрокаДополненияПолейВыборкиПериодичность + "
				 |
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |" + ИтоговоеОграничениеПоДате;
		
	Иначе
		
		Возврат Неопределено;
					
	КонецЕсли;
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
	ВыборкаДляОчисткиДанных = Ложь, УдалятьОбъектыНепосредственно = Ложь, ВыбиратьВсеПоля = Истина) Экспорт
	
	РезультатЗапроса = ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
			ВыборкаДляОчисткиДанных, УдалятьОбъектыНепосредственно, ВыбиратьВсеПоля);
			
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Выборка = РезультатЗапроса.Выбрать();
	
	
	Возврат Выборка;		
	
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиСОграничениями(Правило)
	
	ИмяМетаданных           = Правило.ИмяОбъектаДляЗапроса;
	
	СтрокаРазрешения = ?(ВыгружатьТолькоРазрешенные, " РАЗРЕШЕННЫЕ ", "");
	
	ПостроительОтчета.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + " Объект.Ссылка КАК Ссылка ИЗ " + ИмяМетаданных + " КАК Объект "+ "{ГДЕ Объект.Ссылка.* КАК " + СтрЗаменить(ИмяМетаданных, ".", "_") + "}";
	ПостроительОтчета.Отбор.Сбросить();
	Если НЕ Правило.НастройкиПостроителя = Неопределено Тогда
		ПостроительОтчета.УстановитьНастройки(Правило.НастройкиПостроителя);
	КонецЕсли;

	ПостроительОтчета.Выполнить();
	Выборка = ПостроительОтчета.Результат.Выбрать();
		
	Возврат Выборка;
		
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных)
	
	Выборка = Неопределено;
	
	ТипВыборки = ТипЗнч(ВыборкаДанных);
			
	Если ТипВыборки = Тип("ВыборкаИзРезультатаЗапроса") Тогда
				
		Выборка = ВыборкаДанных;
		
	ИначеЕсли ТипВыборки = Тип("РезультатЗапроса") Тогда
				
		Выборка = ВыборкаДанных.Выбрать();
					
	ИначеЕсли ТипВыборки = Тип("Запрос") Тогда
				
		РезультатЗапроса = ВыборкаДанных.Выполнить();
		Выборка          = РезультатЗапроса.Выбрать();
									
	КонецЕсли;
		
	Возврат Выборка;	
	
КонецФункции

Функция ПолучитьСтрокуНабораКонстантДляВыгрузки(ТаблицаДанныхКонстантДляВыгрузки)
	
	СтрокаНабораКонстант = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхКонстантДляВыгрузки Цикл
		
		Если Не ПустаяСтрока(СтрокаТаблицы.Источник) Тогда
		
			СтрокаНабораКонстант = СтрокаНабораКонстант + ", " + СтрокаТаблицы.Источник;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Не ПустаяСтрока(СтрокаНабораКонстант) Тогда
		
		СтрокаНабораКонстант = Сред(СтрокаНабораКонстант, 3);
		
	КонецЕсли;
	
	Возврат СтрокаНабораКонстант;
	
КонецФункции

Функция ВыгрузитьНаборКонстант(Правило, Свойства, ИсходящиеДанные, СтрокаИменНабораКонстант = "")
	
	Если СтрокаИменНабораКонстант = "" Тогда
		СтрокаИменНабораКонстант = ПолучитьСтрокуНабораКонстантДляВыгрузки(Свойства.ПКО.Свойства);
	КонецЕсли;
			
	НаборКонстант = Константы.СоздатьНабор(СтрокаИменНабораКонстант);
	НаборКонстант.Прочитать();
	РезультатВыгрузки = ВыгрузкаОбъектаВыборки(НаборКонстант, Правило, Свойства, ИсходящиеДанные, , , , СтрокаИменНабораКонстант);	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОпределитьНужноВыбиратьВсеПоля(Правило)
	
	НужныВсеПоляДляВыборки = НЕ ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта)
		ИЛИ НЕ ПустаяСтрока(Правило.ПередВыгрузкой)
		ИЛИ НЕ ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта)
		ИЛИ НЕ ПустаяСтрока(Правило.ПослеВыгрузки);		
		
	Возврат НужныВсеПоляДляВыборки;	
	
КонецФункции

// Выгружает данные по указанному правилу
//
// Параметры:
//  Правило        - ссылка на правило выгрузки данных
// 
Процедура ВыгрузитьДанныеПоПравилу(Правило) Экспорт
	
	ИмяПКО = Правило.ПравилоКонвертации;
	
	Если Не ПустаяСтрока(ИмяПКО) Тогда
		
		ПКО = Правила[ИмяПКО];
		
	КонецЕсли;


	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		СтрокаСообщения = НСтр("ru = 'ПРАВИЛО ВЫГРУЗКИ ДАННЫХ: %1 (%2)'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СокрЛП(Правило.Имя), СокрЛП(Правило.Наименование));
		ЗаписатьВПротоколВыполнения(СтрокаСообщения, , Ложь, , 4);
		
	КонецЕсли;
		
	
	// Обработчик ПередОбработкой
    Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	ВыборкаДанных	= Неопределено;

	
	Если Не ПустаяСтрока(Правило.ПередОбработкой) Тогда
	
		Попытка
			
			Выполнить(Правило.ПередОбработкой);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), Правило.Имя, , "ПередОбработкойВыгрузкиДанных");
									
		КонецПопытки;
				
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;


	// Стандартная выборка с отбором
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" И Правило.ИспользоватьОтбор Тогда

		Выборка = ПолучитьВыборкуДляВыгрузкиСОграничениями(Правило);
		
		Пока Выборка.Следующий() Цикл
			ВыгрузкаОбъектаВыборки(Выборка.Ссылка, Правило, , ИсходящиеДанные);
		КонецЦикла;

	// Стандартная выборка без отбора
	ИначеЕсли (Правило.СпособОтбораДанных = "СтандартнаяВыборка") Тогда
		
		Свойства	= Менеджеры[Правило.ОбъектВыборки];
		ИмяТипа		= Свойства.ИмяТипа;
		
		Если ИмяТипа = "Константы" Тогда
			
			ВыгрузитьНаборКонстант(Правило, Свойства, ИсходящиеДанные);		
			
		Иначе
			
			ЭтоНеСсылочныйТип = ИмяТипа =  "РегистрСведений" 
				ИЛИ ИмяТипа = "РегистрБухгалтерии";
			
			
			Если ЭтоНеСсылочныйТип Тогда
					
				ВыбиратьВсеПоля = ОпределитьНужноВыбиратьВсеПоля(Правило);
				
			Иначе
				
				// получаем только ссылку
				ВыбиратьВсеПоля = Ложь;	
				
			КонецЕсли;	
				
			
			Выборка = ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, , , ВыбиратьВсеПоля);
			
			Если Выборка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если ЭтоНеСсылочныйТип Тогда
					
					ВыгрузкаОбъектаВыборки(Выборка, Правило, Свойства, ИсходящиеДанные);
					
				Иначе
					
					ВыгрузкаОбъектаВыборки(Выборка.Ссылка, Правило, Свойства, ИсходящиеДанные);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда

		Если ВыборкаДанных <> Неопределено Тогда
			
			Выборка = ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных);
			
            Если Выборка <> Неопределено Тогда
				
				Пока Выборка.Следующий() Цикл
					
					ВыгрузкаОбъектаВыборки(Выборка, Правило, , ИсходящиеДанные);
					
				КонецЦикла;
				
			Иначе
				
				Для каждого Объект Из ВыборкаДанных Цикл
					
					ВыгрузкаОбъектаВыборки(Объект, Правило, , ИсходящиеДанные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	
	// Обработчик ПослеОбработки

	//ВсеОбъектыВыгружены   = ПКО.ВсеОбъектыВыгружены;
	
	Если Не ПустаяСтрока(Правило.ПослеОбработки) Тогда
	
		Попытка
			
			Выполнить(Правило.ПослеОбработки);
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), Правило.Имя, , "ПослеОбработкиВыгрузкиДанных");
			
		КонецПопытки;
		
	 КонецЕсли;
		
КонецПроцедуры // ВыгрузитьДанныеПоПравилу()

Процедура ОтработатьУдалениеОбъекта(ДанныеОбУдаленииОбъекта, СтрокаСообщенияОбОшибке = "")
	
	Ссылка = ДанныеОбУдаленииОбъекта.Ссылка;
	
	ТекстСобытия = "";
	Если Конвертация.Свойство("ПередОтправкойИнформацииОбУдалении", ТекстСобытия) Тогда
		
		Отказ = Ложь;
		
		Попытка
			Выполнить(ТекстСобытия);
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(76, ОписаниеОшибки(), "ПередОтправкойИнформацииОбУдалении (конвертация)");
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Менеджер = Менеджеры[ТипЗнч(Ссылка)];
	
	// проверка на существование менеджера и ПКО
	Если    Менеджер = Неопределено
		ИЛИ Менеджер.ПКО = Неопределено Тогда
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(45);
		
		ЗП.Объект = Ссылка;
		Попытка
			ЗП.ТипОбъекта = ТипЗнч(Ссылка);
		Исключение
		КонецПопытки;
		
		ЗаписатьВПротоколВыполнения(45, ЗП, Истина);
		Возврат;
		
	КонецЕсли;
	
	УникальныйИдентификатор = Ссылка.УникальныйИдентификатор();
	
	Приемник = СоздатьУзел("УдалениеОбъекта");
	
	УстановитьАтрибут(Приемник, "ТипПриемника", Менеджер.ПКО.ТипПриемника);
	УстановитьАтрибут(Приемник, "ТипИсточника", Менеджер.ПКО.ТипИсточника);
	
	УстановитьАтрибут(Приемник, "УникальныйИдентификатор", УникальныйИдентификатор);
	
	Приемник.ЗаписатьКонецЭлемента(); // УдалениеОбъекта
	
	ЗаписатьВФайл(Приемник);
	
	Инкремент(ПолеСчетчикВыгруженныхОбъектов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ КОМПИЛЯЦИИ ПРАВИЛ ОБМЕНА В СТРУКТУРУ

// возвращает структуру правил обмена
Функция ПолучитьСтруктуруПравилОбмена(Источник) Экспорт
	
	ЗагрузитьПравилаОбмена(Источник, "XMLФайл");
	
	Если ФлагОшибки() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// получаем таблицу реквизитов регистрации для механизма выборочной регистрации объектов
	ТаблицаРеквизитовРегистрацииОбъектов = ПолучитьТаблицуРеквизитовРегистрацииОбъектов();
	
	// сохраняем запросы
	ЗапросыДляСохранения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из Запросы Цикл
		
		ЗапросыДляСохранения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Текст);
		
	КонецЦикла;
	
	// сохраняем параметры
	ПараметрыДляСохранения = Новый Структура;
	
	Для Каждого ЭлементСтруктуры Из Параметры Цикл
		
		ПараметрыДляСохранения.Вставить(ЭлементСтруктуры.Ключ, Неопределено);
		
	КонецЦикла;
	
	СтруктураПравилОбмена = Новый Структура;
	
	СтруктураПравилОбмена.Вставить("Конвертация", Конвертация);
	
	СтруктураПравилОбмена.Вставить("ТаблицаНастройкиПараметров", ТаблицаНастройкиПараметров);
	СтруктураПравилОбмена.Вставить("ТаблицаПравилВыгрузки",      ТаблицаПравилВыгрузки);
	СтруктураПравилОбмена.Вставить("ТаблицаПравилКонвертации",   ТаблицаПравилКонвертации);
	
	СтруктураПравилОбмена.Вставить("Алгоритмы", Алгоритмы);
	СтруктураПравилОбмена.Вставить("Параметры", ПараметрыДляСохранения);
	СтруктураПравилОбмена.Вставить("Запросы",   ЗапросыДляСохранения);
	
	СтруктураПравилОбмена.Вставить("XMLПравила",              XMLПравила);
	СтруктураПравилОбмена.Вставить("СтрокаТиповДляПриемника", СтрокаТиповДляПриемника);
	
	СтруктураПравилОбмена.Вставить("ПравилаВыборочнойРегистрацииОбъектов", ТаблицаРеквизитовРегистрацииОбъектов);
	
	СтруктураПравилОбмена.Вставить("ВерсияПлатформыПриемника", ВерсияПлатформыПриемника);
	
	Возврат СтруктураПравилОбмена;
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииОбъектов()
	
	ТаблицаРеквизитовРегистрации = ИнициализацияТаблицыРеквизитовРегистрации();
	ТаблицаРезультат             = ИнициализацияТаблицыРеквизитовРегистрации();
	
	// получаем предварительную таблицу из правил конвертации
	Для Каждого ПКО ИЗ ТаблицаПравилКонвертации Цикл
		
		ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоПравилу(ПКО, ТаблицаРезультат);
		
	КонецЦикла;
	
	ТаблицаРезультатГруппировка = ТаблицаРезультат.Скопировать();
	
	ТаблицаРезультатГруппировка.Свернуть("ИмяОбъекта, ИмяТабличнойЧасти");
	
	// получаем итоговую таблицу с учетом сгруппированных строк предварительной таблицы
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРезультатГруппировка Цикл
		
		Отбор = Новый Структура("ИмяОбъекта, ИмяТабличнойЧасти", СтрокаТаблицы.ИмяОбъекта, СтрокаТаблицы.ИмяТабличнойЧасти);
		
		МассивСтрокТаблицыРезультат = ТаблицаРезультат.НайтиСтроки(Отбор);
		
		ДополнитьТаблицуРеквизитовРегистрации(МассивСтрокТаблицыРезультат, ТаблицаРеквизитовРегистрации);
		
	КонецЦикла;
	
	// строки с ошибками удаляем
	УдалитьСтрокиСОшибкамиТаблицыРеквизитовРегистрации(ТаблицаРеквизитовРегистрации);
	
	// выполняем проверку на наличие требуемых реквизитов шапки и реквизитов табличных частей объектов метаданных
	ВыполнитьПроверкуРеквизитовРегистрацииОбъектов(ТаблицаРеквизитовРегистрации);
	
	// заполняем таблицу значением имени Плана обмена
	ТаблицаРеквизитовРегистрации.ЗаполнитьЗначения(ИмяПланаОбменаВРО, "ИмяПланаОбмена");
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ИнициализацияТаблицыРеквизитовРегистрации()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	ТаблицаРезультат.Колонки.Добавить("Порядок",                        одОписаниеТипа("Число"));
	ТаблицаРезультат.Колонки.Добавить("ИмяОбъекта",                     одОписаниеТипа("Строка"));
	ТаблицаРезультат.Колонки.Добавить("ТипОбъектаСтрокой",              одОписаниеТипа("Строка"));
	ТаблицаРезультат.Колонки.Добавить("ИмяПланаОбмена",                 одОписаниеТипа("Строка"));
	ТаблицаРезультат.Колонки.Добавить("ИмяТабличнойЧасти",              одОписаниеТипа("Строка"));
	ТаблицаРезультат.Колонки.Добавить("РеквизитыРегистрации",           одОписаниеТипа("Строка"));
	ТаблицаРезультат.Колонки.Добавить("СтруктураРеквизитовРегистрации", одОписаниеТипа("Структура"));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовРегистрации(ТаблицаПКС)
	
	СтруктураРеквизитовРегистрации = Новый Структура;
	
	МассивСтрокПКС = ТаблицаПКС.НайтиСтроки(Новый Структура("ЭтоГруппа", Ложь));
	
	Для Каждого ПКС ИЗ МассивСтрокПКС Цикл
		
		Попытка
			СтруктураРеквизитовРегистрации.Вставить(ПКС.Источник);
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат СтруктураРеквизитовРегистрации;
	
КонецФункции

Функция ПолучитьСтруктуруРеквизитовРегистрацииПоМассивуСтрок(МассивСтрок)
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого СтрокаТаблицыРезультат ИЗ МассивСтрок Цикл
		
		СтруктураРеквизитовРегистрации = СтрокаТаблицыРезультат.СтруктураРеквизитовРегистрации;
		
		Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
			
			СтруктураРезультат.Вставить(РеквизитРегистрации.Ключ);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПолучитьРеквизитыРегистрации(СтруктураРеквизитовРегистрации)
	
	РеквизитыРегистрации = "";
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		РеквизитыРегистрации = РеквизитыРегистрации + РеквизитРегистрации.Ключ + ", ";
		
	КонецЦикла;
	
	СтроковыеФункцииКлиентСервер.УдалитьПоследнийСимволВСтроке(РеквизитыРегистрации, 2);
	
	Возврат РеквизитыРегистрации;
	
КонецФункции

Процедура ВыполнитьПроверкуРеквизитовРегистрацииОбъектов(ТаблицаРеквизитовРегистрации)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		Попытка
			ТипОбъекта = Тип(СтрокаТаблицы.ТипОбъектаСтрокой);
		Исключение
			
			СтрокаСообщения = НСтр("ru = 'Тип объекта не определен: %1'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаТаблицы.ТипОбъектаСтрокой);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			ЗаписатьВПротоколВыполнения(СтрокаСообщения);
			Продолжить;
			
		КонецПопытки;
		
		ОбъектМД = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		// проверку выполняем только для ссылочных типов
		Если НЕ ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ОбъектМД) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаТаблицы.ИмяТабличнойЧасти) Тогда // реквизиты шапки
			
			Для Каждого Реквизит ИЗ СтрокаТаблицы.СтруктураРеквизитовРегистрации Цикл
				
				Если ОбщегоНазначения.ЭтоЗадача(ОбъектМД) Тогда
					
					Если НЕ (ОбъектМД.Реквизиты.Найти(Реквизит.Ключ) <> Неопределено
						ИЛИ  ОбъектМД.РеквизитыАдресации.Найти(Реквизит.Ключ) <> Неопределено
						ИЛИ  ОбменДаннымиСервер.ЭтоСтандартныйРеквизит(ОбъектМД.СтандартныеРеквизиты, Реквизит.Ключ)) Тогда
						
						СтрокаСообщения = НСтр("ru = 'Неправильно указаны реквизиты шапки объекта ""%1"". Реквизит ""%2"" не существует.'");
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(ОбъектМД), Реквизит.Ключ);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						ЗаписатьВПротоколВыполнения(СтрокаСообщения);
						
					КонецЕсли;
					
				Иначе
					
					Если НЕ (ОбъектМД.Реквизиты.Найти(Реквизит.Ключ) <> Неопределено
						ИЛИ  ОбменДаннымиСервер.ЭтоСтандартныйРеквизит(ОбъектМД.СтандартныеРеквизиты, Реквизит.Ключ)) Тогда
						
						СтрокаСообщения = НСтр("ru = 'Неправильно указаны реквизиты шапки объекта ""%1"". Реквизит ""%2"" не существует.'");
						СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(ОбъектМД), Реквизит.Ключ);
						
						// выводим сообщение об ошибке пользователю
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
						
						ЗаписатьВПротоколВыполнения(СтрокаСообщения);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе // реквизиты табличной части
			
			Для Каждого Реквизит ИЗ СтрокаТаблицы.СтруктураРеквизитовРегистрации Цикл
				
				Если НЕ (ОбъектМД.ТабличныеЧасти[СтрокаТаблицы.ИмяТабличнойЧасти].Реквизиты.Найти(Реквизит.Ключ) <> Неопределено
					ИЛИ  ОбменДаннымиСервер.ЭтоСтандартныйРеквизит(ОбъектМД.ТабличныеЧасти[СтрокаТаблицы.ИмяТабличнойЧасти].СтандартныеРеквизиты, Реквизит.Ключ)) Тогда
					
					СтрокаСообщения = НСтр("ru = 'Неправильно указаны реквизиты табличной части ""%1"" объекта ""%2"". Реквизит ""%3"" не существует.'");
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, СтрокаТаблицы.ИмяТабличнойЧасти, Строка(ОбъектМД), Реквизит.Ключ);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
					ЗаписатьВПротоколВыполнения(СтрокаСообщения);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоПравилу(ПКО, ТаблицаРезультат)
	
	ИмяОбъекта        = СтрЗаменить(ПКО.ТипИсточника, "Ссылка", "");
	ТипОбъектаСтрокой = ПКО.ТипИсточника;
	
	// заполняем таблицу реквизитами шапки (свойства)
	ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, "", -50, ПКО.Свойства, ТаблицаРезультат);
	
	// заполняем таблицу реквизитами шапки (свойства поиска)
	ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, "", -50, ПКО.СвойстваПоиска, ТаблицаРезультат);
	
	// заполняем таблицу реквизитами шапки (свойства отключенные)
	ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, "", -50, ПКО.СвойстваОтключенные, ТаблицаРезультат);
	
	// табличные части правила
	МассивПКГС = ПКО.Свойства.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
	
	Для Каждого ПКГС ИЗ МассивПКГС Цикл
		
		// заполняем таблицу реквизитами табличной части
		ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, ПКГС.Источник, ПКГС.Порядок, ПКГС.ПравилаГруппы, ТаблицаРезультат);
		
		// заполняем таблицу реквизитами табличной части (отключенные)
		ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, ПКГС.Источник, ПКГС.Порядок, ПКГС.ПравилаГруппыОтключенные, ТаблицаРезультат);
		
	КонецЦикла;
	
	// табличные части правила (отключенные)
	МассивПКГС = ПКО.СвойстваОтключенные.НайтиСтроки(Новый Структура("ЭтоГруппа", Истина));
	
	Для Каждого ПКГС ИЗ МассивПКГС Цикл
		
		// заполняем таблицу реквизитами табличной части
		ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, ПКГС.Источник, ПКГС.Порядок, ПКГС.ПравилаГруппы, ТаблицаРезультат);
		
		// заполняем таблицу реквизитами табличной части (отключенные)
		ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, ПКГС.Источник, ПКГС.Порядок, ПКГС.ПравилаГруппыОтключенные, ТаблицаРезультат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуРеквизитовРегистрацииОбъектовПоТаблице(ТипОбъектаСтрокой, ИмяОбъекта, ИмяТабличнойЧасти, Порядок, ТаблицаСвойств, ТаблицаРезультат)
	
	СтрокаТаблицыРезультат = ТаблицаРезультат.Добавить();
	
	СтрокаТаблицыРезультат.Порядок                        = Порядок;
	СтрокаТаблицыРезультат.ИмяОбъекта                     = ИмяОбъекта;
	СтрокаТаблицыРезультат.ТипОбъектаСтрокой              = ТипОбъектаСтрокой;
	СтрокаТаблицыРезультат.ИмяТабличнойЧасти              = ИмяТабличнойЧасти;
	СтрокаТаблицыРезультат.СтруктураРеквизитовРегистрации = ПолучитьСтруктуруРеквизитовРегистрации(ТаблицаСвойств);
	
КонецПроцедуры

Процедура ДополнитьТаблицуРеквизитовРегистрации(МассивСтрок, ТаблицаРеквизитовРегистрации)
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	
	СтрокаТаблицы.Порядок                        = МассивСтрок[0].Порядок;
	СтрокаТаблицы.ИмяОбъекта                     = МассивСтрок[0].ИмяОбъекта;
	СтрокаТаблицы.ТипОбъектаСтрокой              = МассивСтрок[0].ТипОбъектаСтрокой;
	СтрокаТаблицы.ИмяТабличнойЧасти              = МассивСтрок[0].ИмяТабличнойЧасти;
	СтрокаТаблицы.СтруктураРеквизитовРегистрации = ПолучитьСтруктуруРеквизитовРегистрацииПоМассивуСтрок(МассивСтрок);
	СтрокаТаблицы.РеквизитыРегистрации           = ПолучитьРеквизитыРегистрации(СтрокаТаблицы.СтруктураРеквизитовРегистрации);
	
КонецПроцедуры

Процедура УдалитьСтрокиСОшибкамиТаблицыРеквизитовРегистрации(ТаблицаРеквизитовРегистрации)
	
	КолвоЭлементовКоллекции = ТаблицаРеквизитовРегистрации.Количество();
	
	Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
		
		СтрокаТаблицы = ТаблицаРеквизитовРегистрации[КолвоЭлементовКоллекции - ОбратныйИндекс];
		
		// если нет реквизитов регистрации, то удаляем строку
		Если ПустаяСтрока(СтрокаТаблицы.РеквизитыРегистрации) Тогда
			
			ТаблицаРеквизитовРегистрации.Удалить(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготавливает строку с информацией о правилах на основании зачитанных данных из XML-файла
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СтрокаИнформации - Строка - строка с информацией о правилах
//
Функция ПолучитьИнформациюОПравилах() Экспорт
	
	// возвращаемое значение функции
	СтрокаИнформации = "";
	
	Если ФлагОшибки() Тогда
		Возврат СтрокаИнформации;
	КонецЕсли;
	
	СтрокаИнформации = НСтр("ru = 'Правила обмена
						|Дата создания:         %1
						|Конфигурация источник: %2
						|Конфигурация приемник: %3'");
	
	ПредставлениеКонфигурацииИсточника = ПолучитьПредставлениеКонфигурацииИзПравилОбмена("Источника");
	ПредставлениеКонфигурацииПриемника = ПолучитьПредставлениеКонфигурацииИзПравилОбмена("Приемника");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаИнформации,
							Конвертация.ДатаВремяСоздания,
							ПредставлениеКонфигурацииИсточника,
							ПредставлениеКонфигурацииПриемника);
КонецФункции

Функция ПолучитьПредставлениеКонфигурацииИзПравилОбмена(ИмяОпределения)
	
	ИмяКонфигурации = "";
	Конвертация.Свойство("СинонимКонфигурации" + ИмяОпределения, ИмяКонфигурации);
	
	Если Не ЗначениеЗаполнено(ИмяКонфигурации) Тогда
		Возврат "";
	КонецЕсли;
	
	ТочнаяВерсия = "";
	Конвертация.Свойство("ВерсияКонфигурации" + ИмяОпределения, ТочнаяВерсия);
	
	Если ЗначениеЗаполнено(ТочнаяВерсия) Тогда
		
		ТочнаяВерсия = СтроковыеФункцииКлиентСервер.ВерсияКонфигурацииБезНомераСборки(ТочнаяВерсия);
		
		ИмяКонфигурации = ИмяКонфигурации + " (" + ТочнаяВерсия + ")";
		
	КонецЕсли;
	
	Возврат ИмяКонфигурации;
	
КонецФункции

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиПодчиненных(ТекСтрока, Реквизит) Экспорт

	Подчиненные = ТекСтрока.Строки;

	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Если Строка.НастройкиПостроителя = Неопределено 
			И Реквизит = "ИспользоватьОтбор" Тогда
			
			Строка[Реквизит] = 0;
			
		Иначе
			
			Строка[Реквизит] = ТекСтрока[Реквизит];
			
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(Строка, Реквизит);
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьПометкиПодчиненных()

Процедура ЗаполнитьСвойстваДляПоиска(СтруктураДанных, ПКС)
	
	Для Каждого СтрокаПолей Из ПКС Цикл
		
		Если СтрокаПолей.ЭтоГруппа ТОгда
						
			Если СтрокаПолей.ВидПриемника = "ТабличнаяЧасть" 
				ИЛИ Найти(СтрокаПолей.ВидПриемника, "НаборДвижений") > 0 Тогда
				
				ИмяСтруктурыПриемника = СтрокаПолей.Приемник + ?(СтрокаПолей.ВидПриемника = "ТабличнаяЧасть", "ТабличнаяЧасть", "НаборЗаписей");
				
				ВнутренняяСтруктура = СтруктураДанных[ИмяСтруктурыПриемника];
				
				Если ВнутренняяСтруктура = Неопределено Тогда
					ВнутренняяСтруктура = Новый Соответствие();
				КонецЕсли;
				
				СтруктураДанных[ИмяСтруктурыПриемника] = ВнутренняяСтруктура;
				
			Иначе
				
				ВнутренняяСтруктура = СтруктураДанных;	
				
			КонецЕсли;
			
			ЗаполнитьСвойстваДляПоиска(ВнутренняяСтруктура, СтрокаПолей.ПравилаГруппы);
									
		Иначе
			
			Если ПустаяСтрока(СтрокаПолей.ТипПриемника)	Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураДанных[СтрокаПолей.Приемник] = СтрокаПолей.ТипПриемника;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЛишниеЭлементыИзСоответствия(СтруктураДанных)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		
		Если ТипЗнч(Элемент.Значение) = ТипСоответствие Тогда
			
			УдалитьЛишниеЭлементыИзСоответствия(Элемент.Значение);
			
			Если Элемент.Значение.Количество() = 0 Тогда
				СтруктураДанных.Удалить(Элемент.Ключ);
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоТипамДанныхПриемника(СтруктураДанных, Правила)
	
	Для Каждого Строка Из Правила Цикл
		
		Если ПустаяСтрока(Строка.Приемник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтруктуры = СтруктураДанных[Строка.Приемник];
		Если ДанныеСтруктуры = Неопределено Тогда
			
			ДанныеСтруктуры = Новый Соответствие();
			СтруктураДанных[Строка.Приемник] = ДанныеСтруктуры;
			
		КонецЕсли;
		
		// бежим по полям поиск и прочим ПКС и запоминаем типы данных
		ЗаполнитьСвойстваДляПоиска(ДанныеСтруктуры, Строка.СвойстваПоиска);
				
		// Свойства
		ЗаполнитьСвойстваДляПоиска(ДанныеСтруктуры, Строка.Свойства);
		
	КонецЦикла;
	
	УдалитьЛишниеЭлементыИзСоответствия(СтруктураДанных);	
	
КонецПроцедуры

Процедура СоздатьСтрокуСТипамиСвойств(ЗаписьXML, ТипыСвойств)
	
	Если ТипЗнч(ТипыСвойств.Значение) = ТипСоответствие Тогда
		
		Если ТипыСвойств.Значение.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТипыСвойств.Ключ);
		
		Для Каждого Эл Из ТипыСвойств.Значение Цикл
			СоздатьСтрокуСТипамиСвойств(ЗаписьXML, Эл);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе		
		
		одЗаписатьЭлемент(ЗаписьXML, ТипыСвойств.Ключ, ТипыСвойств.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтрокуСТипамиДляПриемника(СтруктураДанных)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИнформацияОТипахДанных");	
	
	Для Каждого Строка Из СтруктураДанных Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТипДанных");
		УстановитьАтрибут(ЗаписьXML, "Имя", Строка.Ключ);
		
		Для Каждого СтрокаПодчинения Из Строка.Значение Цикл
			
			СоздатьСтрокуСТипамиСвойств(ЗаписьXML, СтрокаПодчинения);	
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СтрокаРезультата = ЗаписьXML.Закрыть();
	Возврат СтрокаРезультата;
	
КонецФункции

Процедура ЗагрузитьОдинТипДанных(ПравилаОбмена, СоответствиеТипа, ИмяЛокЭлемента)
	
	ИмяУзла = ИмяЛокЭлемента; 	
	
	ПравилаОбмена.Прочитать();
	
	Если (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
		
		ПравилаОбмена.Прочитать();
		Возврат;
		
	ИначеЕсли ПравилаОбмена.ТипУзла = ТипУзлаXMLНачалоЭлемента Тогда
			
		// это новый элемент
		НовоеСоответствие = Новый Соответствие;
		СоответствиеТипа.Вставить(ИмяУзла, НовоеСоответствие);
		
		ЗагрузитьОдинТипДанных(ПравилаОбмена, НовоеСоответствие, ПравилаОбмена.ЛокальноеИмя);			
		ПравилаОбмена.Прочитать();
		
	Иначе
		СоответствиеТипа.Вставить(ИмяУзла, Тип(ПравилаОбмена.Значение));
		ПравилаОбмена.Прочитать();
	КонецЕсли;	
	
	ЗагрузитьСоответствиеТиповДляОдногоТипа(ПравилаОбмена, СоответствиеТипа);
	
КонецПроцедуры

Процедура ЗагрузитьСоответствиеТиповДляОдногоТипа(ПравилаОбмена, СоответствиеТипа)
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
		    Прервать;
			
		КонецЕсли;
		
		// прочитали начало элемента
		ПравилаОбмена.Прочитать();
		
		Если ПравилаОбмена.ТипУзла = ТипУзлаXMLНачалоЭлемента Тогда
			
			// это новый элемент
			НовоеСоответствие = Новый Соответствие;
			СоответствиеТипа.Вставить(ИмяУзла, НовоеСоответствие);
			
			ЗагрузитьОдинТипДанных(ПравилаОбмена, НовоеСоответствие, ПравилаОбмена.ЛокальноеИмя);			
			
		Иначе
			СоответствиеТипа.Вставить(ИмяУзла, Тип(ПравилаОбмена.Значение));
			ПравилаОбмена.Прочитать();
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюОТипахДанных()
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "ТипДанных" Тогда
			
			ИмяТипа = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
			
			СоответствиеТипа = Новый Соответствие;
			СоответствиеТиповДанныхДляЗагрузки().Вставить(Тип(ИмяТипа), СоответствиеТипа);

			ЗагрузитьСоответствиеТиповДляОдногоТипа(ФайлОбмена, СоответствиеТипа);	
			
		ИначеЕсли (ИмяУзла = "ИнформацияОТипахДанных") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьЗначенияПараметровОбменаДанными()
	
	Имя = одАтрибут(ФайлОбмена, ТипСтрока, "Имя");
		
	ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(Неопределено, Имя);
	
	Значение = ПрочитатьСвойство(ТипСвойства);
	
	Параметры.Вставить(Имя, Значение);	
	
	АлгоритмПослеЗагрузкиПараметра = "";
	Если СобытияПослеЗагрузкиПараметров.Свойство(Имя, АлгоритмПослеЗагрузкиПараметра)
		И Не ПустаяСтрока(АлгоритмПослеЗагрузкиПараметра) Тогда
		
		Выполнить(АлгоритмПослеЗагрузкиПараметра);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗагрузитьИнформациюОПользовательскихПоляхПоиска()
	
	ИмяПравила = "";
	НастройкаПоиска = "";
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "ИмяПравила" Тогда
			
			ИмяПравила = одЗначениеЭлемента(ФайлОбмена, ТипСтрока);
			
		ИначеЕсли ИмяУзла = "НастройкаПоиска" Тогда
			
			НастройкаПоиска = одЗначениеЭлемента(ФайлОбмена, ТипСтрока);
			ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных.Вставить(ИмяПравила, НастройкаПоиска);	
			
		ИначеЕсли (ИмяУзла = "НастройкаПользовательскогоПоиска") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

// Осуществляет загрузку правил обмена в соответствии с форматом
//
// Параметры:
//  Источник       - Объект, из которого осуществляется загрузка правил обмена;
//  ТипИсточника   - Строка, указывающая тип источника: "XMLФайл", "ЧтениеXML", "Строка"
// 
Процедура ЗагрузитьПравилаОбмена(   Источник="",
									ТипИсточника="XMLФайл",
									СтрокаСообщенияОбОшибке = "",
									ЗагружатьТолькоЗаголовокПравил = Ложь) Экспорт
	//
	ИнициализироватьМенеджерыИСообщения();
	
	ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта    = Ложь;
	ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта     = Ложь;
	
	ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Ложь;

	ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта    = Ложь;
	ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта     = Ложь;
	
	СоздатьСтруктуруКонвертации();
	
	ТаблицаПравилКонвертацииСвойств = Новый ТаблицаЗначений;
	ИнициализацияТаблицыПравилКонвертацииСвойств(ТаблицаПравилКонвертацииСвойств);
	
	// Возможно выбраны встроенные правила обмена (один из макетов)
	
	ИмяВременногоФайлаПравилОбмена = "";
	Если ПустаяСтрока(Источник) Тогда
		
		Источник = ИмяФайлаПравилОбмена;
		
	КонецЕсли;
	
	Если ТипИсточника="XMLФайл" Тогда
		
		Если ПустаяСтрока(Источник) Тогда
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(12);
			Возврат; 
		КонецЕсли;
		
		Файл = Новый Файл(Источник);
		Если Не Файл.Существует() Тогда
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(3);
			Возврат; 
		КонецЕсли;
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.ОткрытьФайл(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="Строка" Тогда
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.УстановитьСтроку(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="ЧтениеXML" Тогда
		
		ПравилаОбмена = Источник;
		
	КонецЕсли; 
	

	Если Не ((ПравилаОбмена.ЛокальноеИмя = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLНачалоЭлемента)) Тогда
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(7);
		Возврат;
	КонецЕсли;


	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОбмена");
	

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		// Реквизиты конвертации
		Если ИмяУзла = "ВерсияФормата" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Конвертация.Вставить("ВерсияФормата", Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Ид" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Конвертация.Вставить("Ид",                   Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Конвертация.Вставить("Наименование",         Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "ДатаВремяСоздания" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипДата);
			Конвертация.Вставить("ДатаВремяСоздания",    Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Источник" Тогда
			
			ВерсияПлатформыИсточника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияПлатформы");
			СинонимКонфигурацииИсточника = ПравилаОбмена.ПолучитьАтрибут ("СинонимКонфигурации");
			ВерсияКонфигурацииИсточника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияКонфигурации");
			
			Конвертация.Вставить("ВерсияПлатформыИсточника", ВерсияПлатформыИсточника);
			Конвертация.Вставить("СинонимКонфигурацииИсточника", СинонимКонфигурацииИсточника);
			Конвертация.Вставить("ВерсияКонфигурацииИсточника", ВерсияКонфигурацииИсточника);
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Конвертация.Вставить("Источник",             Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			
			ВерсияПлатформыПриемника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияПлатформы");
			СинонимКонфигурацииПриемника = ПравилаОбмена.ПолучитьАтрибут ("СинонимКонфигурации");
			ВерсияКонфигурацииПриемника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияКонфигурации");
			
			Конвертация.Вставить("ВерсияПлатформыПриемника", ВерсияПлатформыПриемника);
			Конвертация.Вставить("СинонимКонфигурацииПриемника", СинонимКонфигурацииПриемника);
			Конвертация.Вставить("ВерсияКонфигурацииПриемника", ВерсияКонфигурацииПриемника);
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			Конвертация.Вставить("Приемник",             Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
			Если ЗагружатьТолькоЗаголовокПравил Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "ОсновнойПланОбмена" Тогда
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Параметры" Тогда
			ЗагрузитьПараметры(ПравилаОбмена, ЗаписьXML)

		// События конвертации
		
		ИначеЕсли ИмяУзла = "" Тогда
		
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиПравилОбмена" Тогда
			Конвертация.Вставить("ПослеЗагрузкиПравилОбмена", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойДанных" Тогда
			Конвертация.Вставить("ПередВыгрузкойДанных", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередПолучениемИзмененныхОбъектов" Тогда
			Конвертация.Вставить("ПередПолучениемИзмененныхОбъектов", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));			
			
		ИначеЕсли ИмяУзла = "ПослеПолученияИнформацииОбУзлахОбмена" Тогда
			
			Конвертация.Вставить("ПослеПолученияИнформацииОбУзлахОбмена", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));			
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеПолученияИнформацииОбУзлахОбмена);
						
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиДанных" Тогда
			Конвертация.Вставить("ПослеВыгрузкиДанных",  одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередОтправкойИнформацииОбУдалении" Тогда
			Конвертация.Вставить("ПередОтправкойИнформацииОбУдалении",  одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));

		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			Конвертация.Вставить("ПередВыгрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта = Не ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			Конвертация.Вставить("ПослеВыгрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта = Не ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта);

		ИначеЕсли ИмяУзла = "ПередЗагрузкойОбъекта" Тогда
			Конвертация.Вставить("ПередЗагрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта = Не ПустаяСтрока(Конвертация.ПередЗагрузкойОбъекта);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПередЗагрузкойОбъекта);

		ИначеЕсли ИмяУзла = "ПослеЗагрузкиОбъекта" Тогда
			Конвертация.Вставить("ПослеЗагрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта = Не ПустаяСтрока(Конвертация.ПослеЗагрузкиОбъекта);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеЗагрузкиОбъекта);

		ИначеЕсли ИмяУзла = "ПередКонвертациейОбъекта" Тогда
			Конвертация.Вставить("ПередКонвертациейОбъекта", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Не ПустаяСтрока(Конвертация.ПередКонвертациейОбъекта);
			
		ИначеЕсли ИмяУзла = "ПередЗагрузкойДанных" Тогда
			Конвертация.ПередЗагрузкойДанных = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПередЗагрузкойДанных);
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиДанных" Тогда
            Конвертация.ПослеЗагрузкиДанных = одЗначениеЭлемента(ПравилаОбмена, ТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеЗагрузкиДанных);
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиПараметров" Тогда
            Конвертация.Вставить("ПослеЗагрузкиПараметров", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПриПолученииИнформацииОбУдалении" Тогда
            Конвертация.Вставить("ПриПолученииИнформацииОбУдалении", одЗначениеЭлемента(ПравилаОбмена, ТипСтрока));
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПриПолученииИнформацииОбУдалении);
			
		ИначеЕсли ИмяУзла = "УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике" Тогда
            Конвертация.УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике = одЗначениеЭлемента(ПравилаОбмена, ТипБулево);
						
		// Правила
		
		ИначеЕсли ИмяУзла = "ПравилаВыгрузкиДанных" Тогда
			Если РежимОбмена = "Загрузка" Тогда
				одПропустить(ПравилаОбмена);
			Иначе
				ЗагрузитьПравилаВыгрузки(ПравилаОбмена);
			КонецЕсли; 
			
		ИначеЕсли ИмяУзла = "ПравилаКонвертацииОбъектов" Тогда
			ЗагрузитьПравилаКонвертации(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли ИмяУзла = "ПравилаОчисткиДанных" Тогда
			ЗагрузитьПравилаОчистки(ПравилаОбмена, ЗаписьXML)
		
		ИначеЕсли ИмяУзла = "ПравилаРегистрацииОбъектов" Тогда
			одПропустить(ПравилаОбмена);
			
		// Алгоритмы / Запросы / Обработки
		
		ИначеЕсли ИмяУзла = "Алгоритмы" Тогда
			ЗагрузитьАлгоритмы(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли ИмяУзла = "Запросы" Тогда
			ЗагрузитьЗапросы(ПравилаОбмена, ЗаписьXML);

		ИначеЕсли ИмяУзла = "Обработки" Тогда
			ЗагрузитьОбработки(ПравилаОбмена, ЗаписьXML);
			
		// Выход
		ИначеЕсли (ИмяУзла = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
		    Если РежимОбмена <> "Загрузка" Тогда
				ПравилаОбмена.Закрыть();
			КонецЕсли;
			Прервать;

			
		// Ошибка формата
		Иначе
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(7);
			Возврат;
		КонецЕсли;
	КонецЦикла;


	ЗаписьXML.ЗаписатьКонецЭлемента();
	XMLПравила = ЗаписьXML.Закрыть();
	
	// Удаляем временный файл правил
	Если Не ПустаяСтрока(ИмяВременногоФайлаПравилОбмена) Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
	// дополнительно нужна информация по типам данных приемника для быстрой загрузки данных
	СтруктураДанных = Новый Соответствие();
	ЗаполнитьИнформациюПоТипамДанныхПриемника(СтруктураДанных, ТаблицаПравилКонвертации);
	
	СтрокаТиповДляПриемника = СоздатьСтрокуСТипамиДляПриемника(СтруктураДанных);
	
	// нужно вызвать событие после загрузки правил обмена
	ТекстСобытияПослеЗагрузкиПравилОбмена = "";
	Если Конвертация.Свойство("ПослеЗагрузкиПравилОбмена", ТекстСобытияПослеЗагрузкиПравилОбмена)
		И Не ПустаяСтрока(ТекстСобытияПослеЗагрузкиПравилОбмена) Тогда
		
		Попытка
			Выполнить(ТекстСобытияПослеЗагрузкиПравилОбмена);
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(75, ОписаниеОшибки(), НСтр("ru = 'ПослеЗагрузкиПравилОбмена (конвертация)'"));
			Отказ = Истина;
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки;	
		
	КонецЕсли;
	
	ИнициализироватьПервоначальныеЗначенияПараметров();
	
КонецПроцедуры // ЗагрузитьПравилаОбмена()

Процедура ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки)
	
	Инкремент(ПолеСчетчикЗагруженныхОбъектов);
	
	Если СчетчикЗагруженныхОбъектов() % 100 = 0
		И ГлобальныйСтекНеЗаписанныхОбъектов.Количество() > 100 Тогда
		
		ПровестиЗаписьНеЗаписанныхОбъектов();
		
	КонецЕсли;
	
	Если ИспользоватьТранзакции
		И КоличествоОбъектовНаТранзакцию > 0 
		И СчетчикЗагруженныхОбъектов() % КоличествоОбъектовНаТранзакцию = 0 Тогда
		
		ЗафиксироватьТранзакцию();
		НачатьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьОбъектПоСсылке(Ссылка, СтрокаСообщенияОбОшибке)
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСобытия = "";
	Если Конвертация.Свойство("ПриПолученииИнформацииОбУдалении", ТекстСобытия) Тогда
		
		Отказ = Ложь;
		
		Попытка
			Выполнить(ТекстСобытия);
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(77, ОписаниеОшибки(), НСтр("ru = 'ПриПолученииИнформацииОбУдалении (конвертация)'"));
			Отказ = Истина;		
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьОбъект(Объект, Истина);	
			
КонецПроцедуры

Процедура ПрочитатьУдалениеОбъекта(СтрокаСообщенияОбОшибке)
	
	ТипИсточникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипПриемника");
	ТипПриемникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипИсточника");
	
	УникальныйИдентификаторСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "УникальныйИдентификатор");
	
	ВыполнитьЗаменуУникальногоИдентификатораПриНеобходимости(УникальныйИдентификаторСтрокой, ТипИсточникаСтрокой, ТипПриемникаСтрокой, Истина);
	
	СтруктураСвойств = Менеджеры[Тип(ТипИсточникаСтрокой)];
	
	Ссылка = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой));
	
	УдалитьОбъектПоСсылке(Ссылка, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

// Открывает файл сообщения обмена
// Проверяет файл сообщения на соответствие формату
// Зачитывает правила обмена (при необходимости)
//
// Параметры:
//  Нет.
// 
Процедура ОткрытьФайлОбмена()
	
	ФайлОбмена = Новый ЧтениеXML;
	
	Попытка
		ФайлОбмена.ОткрытьФайл(ИмяФайлаОбмена);
		ФайлОбмена.Прочитать();
	Исключение
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при загрузке данных: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(СтрокаСообщенияОбОшибке);
		Возврат;
	КонецПопытки;
	
	Если ФайлОбмена.ЛокальноеИмя <> "ФайлОбмена" Тогда
		
		ЗаписатьВПротоколВыполнения(9);
		Возврат;
		
	КонецЕсли;
	
	ПолеВерсияФорматаВходящегоСообщенияОбмена = одАтрибут(ФайлОбмена, ТипСтрока, "ВерсияФормата");
	
	ФайлОбмена.Прочитать();
	
	Если ФайлОбмена.ЛокальноеИмя <> "ПравилаОбмена" Тогда
		
		ЗаписатьВПротоколВыполнения(9);
		Возврат;
		
	КонецЕсли;
	
	Если ТаблицаПравилКонвертации.Количество() = 0 Тогда
		ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
	Иначе
		одПропустить(ФайлОбмена);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуФайлаПакета(ТаблицыДляЗагрузки)
	
	Если ТаблицыДляЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьФлагОшибки(Ложь);
	
	ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных();
	
	ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных = Новый Соответствие;
	СоответствиеДопПараметровПоиска = Новый Соответствие;
	СоответствиеАлгоритмовПоискаЭлементов = Новый Соответствие;
	
	// инициализируем ведение протокола обмена
	ИнициализироватьВедениеПротоколаОбмена();
	
	Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(15);
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
	КонецЕсли;
	
	ГлобальныйСтекНеЗаписанныхОбъектов = Новый Соответствие;
	
	ПолеСчетчикЗагруженныхОбъектов = Неопределено;
	НомерПоследнегоПоискаПоСсылке  = 0;
	
	ИнициализироватьМенеджерыИСообщения();
	
	// открываем файл сообщения обмена
	// загружаем правила обмена данными (при необходимости)
	ОткрытьФайлОбмена();
	
	Если ФлагОшибки() Тогда
		ЗавершитьВедениеПротоколаОбмена();
		Возврат;
	КонецЕсли;
	
	// {Обработчик: ПередЗагрузкойДанных} Начало
	Отказ = Ложь;
	
	Если Не ПустаяСтрока(Конвертация.ПередЗагрузкойДанных) Тогда
		
		Попытка
			Выполнить(Конвертация.ПередЗагрузкойДанных);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(22, ОписаниеОшибки(), НСтр("ru = 'ПередЗагрузкойДанных (конвертация)'"));
			Отказ = Истина;
		КонецПопытки;
		
	КонецЕсли;
	
	Если Отказ Тогда // Отказ от загрузки данных
		ЗавершитьВедениеПротоколаОбмена();
		ФайлОбмена.Закрыть();
		Возврат;
	КонецЕсли;
	// {Обработчик: ПередЗагрузкойДанных} Окончание
	
	Попытка
		
		ПроизвестиЧтениеДанныхДляТаблиц(ТаблицыДляЗагрузки);
		
	Исключение
		СтрокаСообщенияОбОшибке = НСтр("ru = 'Ошибка при загрузке данных: %1'");
		СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(СтрокаСообщенияОбОшибке,,,,,Истина);
	КонецПопытки;
	
	ФайлОбмена.Закрыть();
	
	// {Обработчик: ПослеЗагрузкиДанных} Начало
	Если Не ФлагОшибки() Тогда
		
		Если Не ПустаяСтрока(Конвертация.ПослеЗагрузкиДанных) Тогда
			
			Попытка
				Выполнить(Конвертация.ПослеЗагрузкиДанных);
			Исключение
				ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(23, ОписаниеОшибки(), НСтр("ru = 'ПослеЗагрузкиДанных (конвертация)'"));
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	// {Обработчик: ПослеЗагрузкиДанных} Окончание
	
	Если Не ФлагОшибки() Тогда
		
		// выполняем проведение документов в очереди
		ВыполнитьОтложенноеПроведениеДокументов();
		
	КонецЕсли;
	
	ЗавершитьВедениеПротоколаОбмена();
	
КонецПроцедуры

Процедура ПроизвестиЧтениеДанных(СтрокаСообщенияОбОшибке = "")
	
	ЭтоИмяУзлаИнформацияОРегистрацииОбъекта = Ложь;
	ЭтоИмяУзлаКорректировкаИнформацииОРегистрацииОбъекта = Ложь;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		// после прочтения всей информации сопоставления
		// необходимо зафиксировать транзакцию при необходимости
		// сбросить кэш наличия информации сопоставления
		Если ИспользоватьТранзакции Тогда
			
			Если  ЭтоИмяУзлаИнформацияОРегистрацииОбъекта
				И ИмяУзла <> "ИнформацияОРегистрацииОбъекта" Тогда
				
				ЭтоИмяУзлаИнформацияОРегистрацииОбъекта = Ложь;
				
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
					
				
			ИначеЕсли ЭтоИмяУзлаКорректировкаИнформацииОРегистрацииОбъекта
				И ИмяУзла <> "КорректировкаИнформацииОРегистрацииОбъекта" Тогда
				
				ЭтоИмяУзлаКорректировкаИнформацииОРегистрацииОбъекта = Ложь;
				
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяУзла = "Объект" Тогда
			
			ПоследнийОбъектЗагрузки = ПрочитатьОбъект();
			
			ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);
			
		ИначеЕсли ИмяУзла = "НаборЗаписейРегистра" Тогда
			
			// набор записей регистра
			ПоследнийОбъектЗагрузки = ПрочитатьНаборЗаписейРегистра();
			
			ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);
			
		ИначеЕсли ИмяУзла = "УдалениеОбъекта" Тогда
			
			// обработка удаления объекта из информационной базы
			ПрочитатьУдалениеОбъекта(СтрокаСообщенияОбОшибке);
			
			одПропустить(ФайлОбмена, "УдалениеОбъекта");
			
			ОбработатьОкончаниеЧтенияНовогоЭлемента("Удаление объекта");
			
		ИначеЕсли ИмяУзла = "ИнформацияОРегистрацииОбъекта" Тогда
			
			ЭтоИмяУзлаИнформацияОРегистрацииОбъекта = Истина;
			
			ЕстьИнформацияОРегистрацииОбъекта = Истина;
			
			ПоследнийОбъектЗагрузки = ПрочитатьИнформациюОРегистрацииОбъекта();
			
			ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);
			
		ИначеЕсли ИмяУзла = "Алгоритм" Тогда
			
			ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, ТипСтрока);
			
			Если Не ПустаяСтрока(ТекстАлгоритма) Тогда
				
				Попытка
					Выполнить(ТекстАлгоритма);					
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(39, ОписаниеОшибки());
					ЗП.Обработчик     = "АлгоритмФайлаОбмена";
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(39, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПравилаОбмена" Тогда
			
			Если ТаблицаПравилКонвертации.Количество() = 0 Тогда
				ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
			Иначе
				одПропустить(ФайлОбмена, ИмяУзла);
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "НастройкаПользовательскогоПоиска" Тогда
			
			ЗагрузитьИнформациюОПользовательскихПоляхПоиска();
			
		ИначеЕсли ИмяУзла = "ИнформацияОТипахДанных" Тогда
			
			Если СоответствиеТиповДанныхДляЗагрузки().Количество() > 0 Тогда
				
				одПропустить(ФайлОбмена, ИмяУзла);
				
			Иначе
				ЗагрузитьИнформациюОТипахДанных();
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ЗначениеПараметра" Тогда	
			
			ЗагрузитьЗначенияПараметровОбменаДанными();
			
		ИначеЕсли ИмяУзла = "АлгоритмПослеЗагрузкиПараметров" Тогда	
			
			Отказ = Ложь;
			ПричинаОтказа = "";
			
			ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, ТипСтрока);
			
			Если Не ПустаяСтрока(ТекстАлгоритма) Тогда
				
				Попытка
					
					Выполнить(ТекстАлгоритма);
					
					Если Отказ = Истина Тогда
						
						Если Не ПустаяСтрока(ПричинаОтказа) Тогда
							
							СтрокаСообщения = НСтр("ru = 'Загрузка данных отменена по причине: %1'");
							СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПричинаОтказа);
							ВызватьИсключение СтрокаСообщения;
						Иначе
							ВызватьИсключение НСтр("ru = 'Загрузка данных отменена'");
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(78, ОписаниеОшибки());
					ЗП.Обработчик     = "ПослеЗагрузкиПараметров";
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(78, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ДанныеПоОбмену" Тогда
			
			ПрочитатьДанныеПоОбмену();
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
			Если ФлагОшибки() Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "КорректировкаИнформацииОРегистрацииОбъекта" Тогда
			
			ПрочитатьКорректировкуИнформацииСопоставления();
			
			ЕстьКорректировкаИнформацииОРегистрацииОбъекта = Истина;
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
			ЭтоИмяУзлаКорректировкаИнформацииОРегистрацииОбъекта = Истина;
			
		ИначеЕсли (ИмяУзла = "ФайлОбмена") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать; // выходим
			
		Иначе
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
		КонецЕсли;
		
		// прерываем цикл чтения файла в случае возникновения ошибки загрузки
		Если ФлагОшибки() Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроизвестиЧтениеДанныхДляТаблиц(ТаблицыДляЗагрузки)
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Объект" Тогда
			
			ТипОбъектаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "Тип");
			
			Если ТипОбъектаСтрокой = "КонстантыНабор" Тогда
				
				ИмяКонстанты = одАтрибут(ФайлОбмена, ТипСтрока, "ИмяКонстанты");
				
				ТипИсточникаСтрокой = ИмяКонстанты;
				ТипПриемникаСтрокой = ИмяКонстанты;
				
			Иначе
				
				ИмяПравила = одАтрибут(ФайлОбмена, ТипСтрока, "ИмяПравила");
				
				ПКО = Правила[ИмяПравила];
				
				ТипИсточникаСтрокой = ПКО.ТипИсточника;
				ТипПриемникаСтрокой = ПКО.ТипПриемника;
				
			КонецЕсли;
			
			КлючТаблицыДанных = ОбменДаннымиСервер.КлючТаблицыДанных(ТипИсточникаСтрокой, ТипПриемникаСтрокой, Ложь);
			
			Если ТаблицыДляЗагрузки.Найти(КлючТаблицыДанных) <> Неопределено Тогда
				
				Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда // загрузка в информационную базу
					
					ОбработатьОкончаниеЧтенияНовогоЭлемента(ПрочитатьОбъект());
					
				Иначе // загрузка в таблицу значений
					
					УникальныйИдентификаторСтрокой = "";
					
					ПоследнийОбъектЗагрузки = ПрочитатьОбъект(УникальныйИдентификаторСтрокой);
					
					Если ПоследнийОбъектЗагрузки <> Неопределено Тогда
						
						ТаблицаДанныхСообщенияОбмена = ТаблицыДанныхСообщенияОбмена().Получить(КлючТаблицыДанных);
						
						СтрокаТаблицы = ТаблицаДанныхСообщенияОбмена.Найти(УникальныйИдентификаторСтрокой, ИмяКолонкиУникальныйИдентификатор());
						
						Если СтрокаТаблицы = Неопределено Тогда
							
							Инкремент(ПолеСчетчикЗагруженныхОбъектов);
							
							СтрокаТаблицы = ТаблицаДанныхСообщенияОбмена.Добавить();
							
							СтрокаТаблицы[ИмяКолонкиТипСтрокой()]              = ТипПриемникаСтрокой;
							СтрокаТаблицы["Ссылка"]                            = ПоследнийОбъектЗагрузки.Ссылка;
							СтрокаТаблицы[ИмяКолонкиУникальныйИдентификатор()] = УникальныйИдентификаторСтрокой;
							
						КонецЕсли;
						
						// заполняем значения свойств объекта
						ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПоследнийОбъектЗагрузки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				одПропустить(ФайлОбмена, ИмяУзла);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "НаборЗаписейРегистра" И РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда
			
			ИмяПравила = одАтрибут(ФайлОбмена, ТипСтрока, "ИмяПравила");
			
			ПКО = Правила[ИмяПравила];
			
			ТипИсточникаСтрокой = ПКО.ТипИсточника;
			ТипПриемникаСтрокой = ПКО.ТипПриемника;
			
			КлючТаблицыДанных = ОбменДаннымиСервер.КлючТаблицыДанных(ТипИсточникаСтрокой, ТипПриемникаСтрокой, Ложь);
			
			Если ТаблицыДляЗагрузки.Найти(КлючТаблицыДанных) <> Неопределено Тогда
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента(ПрочитатьНаборЗаписейРегистра());
				
			Иначе
				
				одПропустить(ФайлОбмена, ИмяУзла);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "УдалениеОбъекта" Тогда
			
			ТипПриемникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипПриемника");
			ТипИсточникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипИсточника");
			
			КлючТаблицыДанных = ОбменДаннымиСервер.КлючТаблицыДанных(ТипИсточникаСтрокой, ТипПриемникаСтрокой, Истина);
			
			Если ТаблицыДляЗагрузки.Найти(КлючТаблицыДанных) <> Неопределено Тогда
				
				Если РежимЗагрузкиДанныхВИнформационнуюБазу() Тогда // загрузка в информационную базу
					
					// обработка удаления объекта из информационной базы
					ПрочитатьУдалениеОбъекта("");
					
					ОбработатьОкончаниеЧтенияНовогоЭлемента("Удаление объекта");
					
				Иначе // загрузка в таблицу значений
					
					УникальныйИдентификаторСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "УникальныйИдентификатор");
					
					// добавляем удаление объекта в таблицу данных сообщения
					ТаблицаДанныхСообщенияОбмена = ТаблицыДанныхСообщенияОбмена().Получить(КлючТаблицыДанных);
					
					СтрокаТаблицы = ТаблицаДанныхСообщенияОбмена.Найти(УникальныйИдентификаторСтрокой, ИмяКолонкиУникальныйИдентификатор());
					
					Если СтрокаТаблицы = Неопределено Тогда
						
						Инкремент(ПолеСчетчикЗагруженныхОбъектов);
						
						СтрокаТаблицы = ТаблицаДанныхСообщенияОбмена.Добавить();
						
						// заполняем значения всех полей таблицы значением по умолчанию
						Для Каждого Колонка Из ТаблицаДанныхСообщенияОбмена.Колонки Цикл
							
							// фильтр
							Если    Колонка.Имя = ИмяКолонкиТипСтрокой()
								ИЛИ Колонка.Имя = ИмяКолонкиУникальныйИдентификатор()
								ИЛИ Колонка.Имя = "Ссылка" Тогда
								Продолжить;
							КонецЕсли;
							
							Если Колонка.ТипЗначения.СодержитТип(ТипСтрока) Тогда
								
								СтрокаТаблицы[Колонка.Имя] = НСтр("ru = 'удаление объекта'");
								
							КонецЕсли;
							
						КонецЦикла;
						
						СтруктураСвойств = Менеджеры[Тип(ТипПриемникаСтрокой)];
						
						СсылкаНаУдаляемыйОбъект = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УникальныйИдентификаторСтрокой));
						
						СтрокаТаблицы[ИмяКолонкиТипСтрокой()]              = ТипПриемникаСтрокой;
						СтрокаТаблицы["Ссылка"]                            = СсылкаНаУдаляемыйОбъект;
						СтрокаТаблицы[ИмяКолонкиУникальныйИдентификатор()] = УникальныйИдентификаторСтрокой;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
		ИначеЕсли ИмяУзла = "ПравилаОбмена" Тогда
			
			Если ТаблицаПравилКонвертации.Количество() = 0 Тогда
				ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
			Иначе
				одПропустить(ФайлОбмена);
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ИнформацияОТипахДанных" Тогда
			
			Если СоответствиеТиповДанныхДляЗагрузки().Количество() > 0 Тогда
				
				одПропустить(ФайлОбмена, ИмяУзла);
				
			Иначе
				ЗагрузитьИнформациюОТипахДанных();
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЗагрузитьЗначенияПараметровОбменаДанными();
			
		ИначеЕсли (ИмяУзла = "ФайлОбмена") И (ФайлОбмена.ТипУзла = ТипУзлаXMLКонецЭлемента) Тогда
			
			Прервать; // выходим
			
		Иначе
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроизвестиЧтениеДанныхВРежимеАнализа()
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если    ИмяУзла = "Объект"
			ИЛИ ИмяУзла = "НаборЗаписейРегистра" Тогда
			
			ТипОбъектаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "Тип");
			
			Если ТипОбъектаСтрокой = "КонстантыНабор" Тогда
				
				ИмяКонстанты = одАтрибут(ФайлОбмена, ТипСтрока, "ИмяКонстанты");
				
				СтрокаТаблицы = ТаблицаДанныхЗаголовкаПакета().Добавить();
				
				СтрокаТаблицы.КоличествоОбъектовВИсточнике = 1;
				
				СтрокаТаблицы.СинхронизироватьПоИдентификатору    = Ложь;
				СтрокаТаблицы.ИспользоватьПредварительныйПросмотр = Ложь;
				СтрокаТаблицы.ЭтоУдалениеОбъекта = Ложь;
				
				СтрокаТаблицы.ТипОбъектаСтрокой = "КонстантаМенеджерЗначения.[ИмяКонстанты]";
				СтрокаТаблицы.ТипОбъектаСтрокой = СтрЗаменить(СтрокаТаблицы.ТипОбъектаСтрокой, "[ИмяКонстанты]", ИмяКонстанты);
				
				СтрокаТаблицы.ТипПриемникаСтрокой = ИмяКонстанты;
				СтрокаТаблицы.ТипИсточникаСтрокой = ИмяКонстанты;
				
				СтрокаТаблицы.ПоляПоиска  = ИмяКонстанты;
				СтрокаТаблицы.ПоляТаблицы = ИмяКонстанты;
				
			Иначе
				
				ИмяПравила = одАтрибут(ФайлОбмена, ТипСтрока, "ИмяПравила");
				
				СтрокаТаблицы = ТаблицаДанныхЗаголовкаПакета().Добавить();
				
				СтрокаТаблицы.ТипОбъектаСтрокой = ТипОбъектаСтрокой;
				СтрокаТаблицы.КоличествоОбъектовВИсточнике = 1;
				
				ПКО = Правила[ИмяПравила];
				
				СтрокаТаблицы.ТипПриемникаСтрокой = ПКО.ТипПриемника;
				СтрокаТаблицы.ТипИсточникаСтрокой = ПКО.ТипИсточника;
				
				СтрокаТаблицы.ПоляПоиска  = ПКО.ПоляПоиска;
				СтрокаТаблицы.ПоляТаблицы = ПКО.ПоляТаблицы;
				
				СтрокаТаблицы.СинхронизироватьПоИдентификатору    = ПКО.СинхронизироватьПоИдентификатору;
				СтрокаТаблицы.ИспользоватьПредварительныйПросмотр = ПКО.СинхронизироватьПоИдентификатору;
				СтрокаТаблицы.ЭтоУдалениеОбъекта = Ложь;
				
			КонецЕсли;
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
		ИначеЕсли ИмяУзла = "УдалениеОбъекта" Тогда
			
			СтрокаТаблицы = ТаблицаДанныхЗаголовкаПакета().Добавить();
			
			СтрокаТаблицы.ТипПриемникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипПриемника");
			СтрокаТаблицы.ТипИсточникаСтрокой = одАтрибут(ФайлОбмена, ТипСтрока, "ТипИсточника");
			
			СтрокаТаблицы.ТипОбъектаСтрокой = СтрокаТаблицы.ТипПриемникаСтрокой;
			
			СтрокаТаблицы.КоличествоОбъектовВИсточнике = 1;
			
			СтрокаТаблицы.СинхронизироватьПоИдентификатору = Ложь;
			СтрокаТаблицы.ИспользоватьПредварительныйПросмотр = Истина;
			СтрокаТаблицы.ЭтоУдалениеОбъекта = Истина;
			
			СтрокаТаблицы.ПоляПоиска = ""; // поля поиска будут назначены в конструкторе обработки сопоставления объектов
			
			// определяем значения для колонки ПоляТаблицы
			// получаем описание всех полей объекта метаданного из конфигурации
			ТипОбъекта = Тип(СтрокаТаблицы.ТипОбъектаСтрокой);
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОбъекта);
			
			МассивПодстрок = ТаблицаОписанияСвойствОбъекта(ОбъектМетаданных).ВыгрузитьКолонку("Имя");
			
			// удаляем поле "Ссылка" из визуальных полей таблицы
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивПодстрок, "Ссылка");
			
			СтрокаТаблицы.ПоляТаблицы = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(МассивПодстрок);
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
		ИначеЕсли ИмяУзла = "ИнформацияОРегистрацииОбъекта" Тогда
			
			ПрочитатьИнформациюОРегистрацииОбъекта();
			
			ЕстьИнформацияОРегистрацииОбъекта = Истина;
			
		ИначеЕсли ИмяУзла = "КорректировкаИнформацииОРегистрацииОбъекта" Тогда
			
			ПрочитатьКорректировкуИнформацииСопоставления();
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
			ЕстьКорректировкаИнформацииОРегистрацииОбъекта = Истина;
			
		ИначеЕсли ИмяУзла = "Алгоритм" Тогда
			
			ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, ТипСтрока);
			
			Если Не ПустаяСтрока(ТекстАлгоритма) Тогда
				
				Попытка
					Выполнить(ТекстАлгоритма);
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(39, ОписаниеОшибки());
					ЗП.Обработчик     = "АлгоритмФайлаОбмена";
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(39, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЗагрузитьЗначенияПараметровОбменаДанными();
			
		ИначеЕсли ИмяУзла = "АлгоритмПослеЗагрузкиПараметров" Тогда	
			
			Отказ = Ложь;
			ПричинаОтказа = "";
			
			ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, ТипСтрока);
			
			Если Не ПустаяСтрока(ТекстАлгоритма) Тогда
				
				Попытка
					
					Выполнить(ТекстАлгоритма);
					
					Если Отказ = Истина Тогда
						
						Если Не ПустаяСтрока(ПричинаОтказа) Тогда
							
							СтрокаСообщения = НСтр("ru = 'Загрузка данных отменена по причине: %1'");
							СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ПричинаОтказа);
							ВызватьИсключение СтрокаСообщения;
						Иначе
							ВызватьИсключение НСтр("ru = 'Загрузка данных отменена'");
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(78, ОписаниеОшибки());
					ЗП.Обработчик     = "ПослеЗагрузкиПараметров";
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(78, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПравилаОбмена" Тогда
			
			Если ТаблицаПравилКонвертации.Количество() = 0 Тогда
				
				// загружаем правила обмена
				ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
				
			Иначе
				
				одПропустить(ФайлОбмена, ИмяУзла);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ДанныеПоОбмену" Тогда
			
			ПрочитатьДанныеПоОбмену();
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
			Если ФлагОшибки() Тогда
				Прервать;
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "ФайлОбмена") И (ФайлОбмена.ТипУзла = ТипУзлаXML.КонецЭлемента) Тогда
			
			Прервать; // выход
			
		Иначе
			
			одПропустить(ФайлОбмена, ИмяУзла);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьДанныеПоОбмену()
	
	ПолеИмяПланаОбмена           = одАтрибут(ФайлОбмена, ТипСтрока, "ПланОбмена");
	КодОтКого                    = одАтрибут(ФайлОбмена, ТипСтрока, "ОтКого");
	ПолеНомерВходящегоСообщения  = одАтрибут(ФайлОбмена, ТипЧисло,  "НомерИсходящегоСообщения");
	ПолеНомерИсходящегоСообщения = одАтрибут(ФайлОбмена, ТипЧисло,  "НомерВходящегоСообщения");
	УдалитьРегистрациюИзменений  = одАтрибут(ФайлОбмена, ТипБулево, "УдалитьРегистрациюИзменений");
	
	УзелОбменаПолучатель = ПланыОбмена[ИмяПланаОбмена()].НайтиПоКоду(КодОтКого);
	
	// проверка на наличие узла получателя
	// проверка на правильность указания узла получателя в сообщении обмена
	Если Не ЗначениеЗаполнено(УзелОбменаПолучатель)
		ИЛИ УзелОбменаПолучатель <> УзелОбменаЗагрузкаДанных Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не найден узел обмена для загрузки данных. План обмена: %1, Код: %2'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяПланаОбмена(), КодОтКого);
		ВызватьИсключение СтрокаСообщения;
		
	КонецЕсли;
	
	Если УзелОбменаЗагрузкаДанных.НомерПринятого >= НомерВходящегоСообщения() Тогда
		
		// Номер сообщения меньше либо равен ранее принятому
		ЗаписатьВПротоколВыполнения(174,,,,,Истина, Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято);
		Возврат;
	КонецЕсли;
	
	// удаляем регистрацию изменений при необходимости
	Если УдалитьРегистрациюИзменений Тогда
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаЗагрузкаДанных, НомерИсходящегоСообщения());
		
		Если СтроковыеФункцииКлиентСервер.СравнитьВерсии(ВерсияФорматаВходящегоСообщенияОбмена(), "3.1.0.0") >= 0 Тогда
			
			РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ЗафиксироватьВыполнениеКорректировкиИнформацииСопоставления(УзелОбменаЗагрузкаДанных, НомерИсходящегоСообщения());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеДокументов()
	
	Если ДокументыДляОтложенногоПроведения().Количество() = 0 Тогда
		Возврат // нет документов в очереди
	КонецЕсли;
	
	// сворачиваем таблицу по уникальным полям
	ДокументыДляОтложенногоПроведения().Свернуть("ДокументОбъект, ДокументСсылка, ДатаДокумента, ДокументПроведенУспешно");
	
	// сортируем документы по возрастанию даты документов
	ДокументыДляОтложенногоПроведения().Сортировать("ДатаДокумента");
	
	// инициализируем колонку результата проведения документа
	ДокументыДляОтложенногоПроведения().ЗаполнитьЗначения(Ложь, "ДокументПроведенУспешно");
	
	Для Каждого СтрокаТаблицы ИЗ ДокументыДляОтложенногоПроведения() Цикл
		
		Объект = СтрокаТаблицы.ДокументОбъект;
		
		// устанавливаем узел-отправитель для предотвращения регистрации объекта на узле, для которого производим загрузку
		// проведение выполняем не в режиме загрузки
		УстановитьОбменДаннымиЗагрузка(Объект, Ложь);
		
		ОписаниеОшибки = "";
		
		Попытка
			
			Если Объект.ПроверитьЗаполнение() Тогда
			
				// при проведении документа отказываемся от механизмов ВРО и ПРО,
				// т.к. они были ранее выполнены при записи объекта
				Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина);
				Объект.ДополнительныеСвойства.Вставить("НеПроверятьДатыЗапретаИзмененияДанных");
				
				// выполняем попытку проведения документа
				Объект.Записать(РежимЗаписиДокумента.Проведение);
				
				СтрокаТаблицы.ДокументПроведенУспешно = Объект.Проведен;
				
			Иначе
				
				СтрокаТаблицы.ДокументПроведенУспешно = Ложь;
				
				ОписаниеОшибки = НСтр("ru = 'Ошибка заполнения реквизитов документа'");
				
			КонецЕсли;
			
		Исключение
			
			ОписаниеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтрокаТаблицы.ДокументПроведенУспешно = Ложь;
			
		КонецПопытки;
		
		// если документ провести не удалось фиксируем ошибку в ЖР
		Если Не СтрокаТаблицы.ДокументПроведенУспешно Тогда
			
			СтрокаСообщения = НСтр("ru = 'Ошибка при отложенном проведении документа: %1. Описание ошибки: %2'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(Объект), ОписаниеОшибки);
			ЗаписьЖурналаРегистрацииОбменДанными(СтрокаСообщения, УровеньЖурналаРегистрации.Предупреждение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОбменеДаннымиЧерезПланыОбмена(Знач ВыгрузитьИнформациюСопоставления)
	
	ИтераторНомераИсходящегоСообщения = ?(ВыгрузитьИнформациюСопоставления, 2, 1);
	
	Приемник = СоздатьУзел("ДанныеПоОбмену");
	
	УстановитьАтрибут(Приемник, "ПланОбмена", ИмяПланаОбмена());
	УстановитьАтрибут(Приемник, "Кому",   УзелДляОбмена.Код);
	УстановитьАтрибут(Приемник, "ОтКого", ПланыОбмена[ИмяПланаОбмена()].ЭтотУзел().Код);	
	
	// атрибуты механизма квитирования сообщений обмена
	УстановитьАтрибут(Приемник, "НомерИсходящегоСообщения", УзелДляОбмена.НомерОтправленного + ИтераторНомераИсходящегоСообщения);
	УстановитьАтрибут(Приемник, "НомерВходящегоСообщения",  УзелДляОбмена.НомерПринятого);
	УстановитьАтрибут(Приемник, "УдалитьРегистрациюИзменений", Истина);
	
	//	Запись объекта в файл
	Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
КонецПроцедуры


Функция ВыгрузитьДанныеСсылочногоОбъекта(Значение, ИсходящиеДанные, ИмяПКО, ПКОСвойств, ТипПриемника, УзелСвойства, Знач ВыгрузитьТолькоСсылку)
	
	ЭтоПравилоСГлобальнойВыгрузкой = Ложь;
	УзелСсылки    = ВыгрузитьПоПравилу(Значение, , ИсходящиеДанные, , ИмяПКО, , ВыгрузитьТолькоСсылку, ПКОСвойств, ЭтоПравилоСГлобальнойВыгрузкой, , , , Ложь);
	ТипУзлаСсылки = ТипЗнч(УзелСсылки);

	Если ПустаяСтрока(ТипПриемника) Тогда
				
		ТипПриемника  = ПКОСвойств.Приемник;
		УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
				
	КонецЕсли;
			
	Если УзелСсылки = Неопределено Тогда
				
		Возврат Неопределено;
				
	КонецЕсли;
				
	ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства, ЭтоПравилоСГлобальнойВыгрузкой);	
	
	Возврат УзелСсылки;
	
КонецФункции

Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "")
	
	Если ПустаяСтрока(ПравилоКонвертации) Тогда
		
		УзелПараметра = СоздатьУзел("ЗначениеПараметра");
		
		УстановитьАтрибут(УзелПараметра, "Имя", Имя);
		УстановитьАтрибут(УзелПараметра, "Тип", Строка(ТипЗнч(ИсходноеЗначениеПараметра)));
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(ИсходноеЗначениеПараметра, ЭтоNULL);
					
		Если Пусто Тогда
			
			// надо записать что это пустое значение
			одЗаписатьЭлемент(УзелПараметра, "Пусто");
								
			УзелПараметра.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(УзелПараметра);
			
			Возврат;
								
		КонецЕсли;
	
		одЗаписатьЭлемент(УзелПараметра, "Значение", ИсходноеЗначениеПараметра);
	
		УзелПараметра.ЗаписатьКонецЭлемента();
		
		ЗаписатьВФайл(УзелПараметра);
		
	Иначе
		
		УзелПараметра = СоздатьУзел("ЗначениеПараметра");
		
		УстановитьАтрибут(УзелПараметра, "Имя", Имя);
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(ИсходноеЗначениеПараметра, ЭтоNULL);
					
		Если Пусто Тогда
			
			ПКОСвойств = НайтиПравило(ИсходноеЗначениеПараметра, ПравилоКонвертации);
			ТипПриемника  = ПКОСвойств.Приемник;
			УстановитьАтрибут(УзелПараметра, "Тип", ТипПриемника);
			
			// надо записать что это пустое значение
			одЗаписатьЭлемент(УзелПараметра, "Пусто");
								
			УзелПараметра.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(УзелПараметра);
			
			Возврат;
								
		КонецЕсли;
		
		ВыгрузитьДанныеСсылочногоОбъекта(ИсходноеЗначениеПараметра, , ПравилоКонвертации, , , УзелПараметра, Истина);
		
		УзелПараметра.ЗаписатьКонецЭлемента();
		
		ЗаписатьВФайл(УзелПараметра);				
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередатьДополнительныеПараметрыВПриемник()
	
	Для Каждого Параметр Из ТаблицаНастройкиПараметров Цикл
		
		Если Параметр.ПередаватьПараметрПриВыгрузке = Истина Тогда
			
			ПередатьОдинПараметрВПриемник(Параметр.Имя, Параметр.Значение, Параметр.ПравилоКонвертации);
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередатьИнформациюОТипахВПриемник()
	
	Если Не ПустаяСтрока(СтрокаТиповДляПриемника) Тогда
		ЗаписатьВФайл(СтрокаТиповДляПриемника);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередатьИнформациюОПользовательскихПоляхПоискаВПриемник()
	
	Для Каждого КлючИЗначенияСопоставления Из ИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных Цикл
		
		УзелПараметра = СоздатьУзел("НастройкаПользовательскогоПоиска");
		
		одЗаписатьЭлемент(УзелПараметра, "ИмяПравила", КлючИЗначенияСопоставления.Ключ);
		одЗаписатьЭлемент(УзелПараметра, "НастройкаПоиска", КлючИЗначенияСопоставления.Значение);
		
		УзелПараметра.ЗаписатьКонецЭлемента();
		ЗаписатьВФайл(УзелПараметра);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных()
	
	КомментарийПриВыгрузкеДанных = "";
	КомментарийПриЗагрузкеДанных = "";
	
КонецПроцедуры

Процедура ВыгруженныеПоСсылкеОбъектыДобавитьЗначение(Значение)
	
	Если ВыгруженныеПоСсылкеОбъекты().Найти(Значение) = Неопределено Тогда
		
		ВыгруженныеПоСсылкеОбъекты().Добавить(Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбъектПроходитФильтрРазрешенныхОбъектов(Значение)
	
	Возврат РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.ОбъектЕстьВРегистре(Значение, УзелДляОбмена);
	
КонецФункции

//

Процедура ВыполнитьВыгрузку(СтрокаСообщенияОбОшибке = "")
	
	ПолеИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелДляОбмена);
	
	ВыгрузитьИнформациюСопоставления = ВыгрузитьИнформациюСопоставленияОбъектов(УзелДляОбмена);
	
	ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных();
	
	ТекущийУровеньВложенностиВыгрузитьПоПравилу = 0;
	
	СтекВызововВыгрузкиДанных = Новый ТаблицаЗначений;
	СтекВызововВыгрузкиДанных.Колонки.Добавить("Ссылка");
	СтекВызововВыгрузкиДанных.Индексы.Добавить("Ссылка");
	
	ИнициализироватьМенеджерыИСообщения();
	
	ПолеСчетчикВыгруженныхОбъектов = Неопределено;
	СчетчикНПП 				= 0;
	НППЗаписанногоВФайл		= 0;
	
	Для Каждого Правило Из ТаблицаПравилКонвертации Цикл
		
		Правило.Выгруженные = СоздатьТаблицуВыгруженныхОбъектов();
		
	КонецЦикла;
	
	// получаем типы объектов метаданных, которые будут участвовать в выгрузке
	ТаблицаПравилВыгрузкиИспользуемые = ТаблицаПравилВыгрузки.Скопировать(Новый Структура("Включить", Истина));
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПравилВыгрузкиИспользуемые Цикл
		
		Если Не СтрокаТаблицы.ОбъектВыборки = Тип("КонстантыНабор") Тогда
			
			СтрокаТаблицы.ОбъектВыборкиМетаданные = Метаданные.НайтиПоТипу(СтрокаТаблицы.ОбъектВыборки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СоответствиеДанныхДляОбновленияВыгруженныхЭлементов = Новый Соответствие;
	
	// {ОБРАБОТЧИК ПередВыгрузкойДанных}
	Отказ = Ложь;
	
	Если Не ПустаяСтрока(Конвертация.ПередВыгрузкойДанных) Тогда
	
		Попытка
			Выполнить(Конвертация.ПередВыгрузкойДанных);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(62, ОписаниеОшибки(), НСтр("ru = 'ПередВыгрузкойДанных (конвертация)'"));
			Отказ = Истина;
		КонецПопытки; 
		
		Если Отказ Тогда // Отказ от выгрузки данных
			ЗавершитьВедениеПротоколаОбмена();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	// {ОБРАБОТЧИК ПередВыгрузкойДанных}
	
	ПередатьИнформациюОПользовательскихПоляхПоискаВПриемник();
	
	ПередатьИнформациюОТипахВПриемник();
	
	// передаем доп. параметры в приемник
	ПередатьДополнительныеПараметрыВПриемник();
	
	ТекстСобытияПослеЗагрузкиПараметров = "";
	Если Конвертация.Свойство("ПослеЗагрузкиПараметров", ТекстСобытияПослеЗагрузкиПараметров)
		И Не ПустаяСтрока(ТекстСобытияПослеЗагрузкиПараметров) Тогда
		
		ЗаписьСобытия = Новый ЗаписьXML;
		ЗаписьСобытия.УстановитьСтроку();
		одЗаписатьЭлемент(ЗаписьСобытия, "АлгоритмПослеЗагрузкиПараметров", ТекстСобытияПослеЗагрузкиПараметров);
		
		ЗаписатьВФайл(ЗаписьСобытия);
		
	КонецЕсли;
	
	ЗаписатьИнформациюОбОбменеДаннымиЧерезПланыОбмена(ВыгрузитьИнформациюСопоставления);
	
	Отказ = Ложь;
	
	// ВЫПОЛНЯЕМ ВЫГРУЗКУ РЕГИСТРА СОПОСТАВЛЕНИЯ
	Если ВыгрузитьИнформациюСопоставления Тогда
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелДляОбмена);
		
		Попытка
			ВыполнитьВыгрузкуРегистраСопоставленияОбъектов(ЗаписьСообщения, СтрокаСообщенияОбОшибке);
		Исключение
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда
			ЗаписьСообщения.ПрерватьЗапись();
		Иначе
			ЗаписьСообщения.ЗакончитьЗапись();
		КонецЕсли;
		
		ЗаписьXML.Закрыть();
		ЗаписьXML = Неопределено;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// ВЫПОЛНЯЕМ ВЫГРУЗКУ КОРРЕКТИРОВКИ РЕГИСТРА СОПОСТАВЛЕНИЯ
	Если НеобходимоВыполнитьКорректировкуИнформацииСопоставления() Тогда
		
		ВыгрузитьКорректировкуИнформацииСопоставления();
		
	КонецЕсли;
	
	// ВЫПОЛНЯЕМ ВЫГРУЗКУ ЗАРЕГИСТРИРОВАННЫХ ДАННЫХ
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелДляОбмена);
	
	Попытка
		ВыполнитьВыгрузкуЗарегистрированныхДанных(ЗаписьСообщения, СтрокаСообщенияОбОшибке, ТаблицаПравилВыгрузкиИспользуемые);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	// выполняем регистрацию объектов на текущем узле, которые были выгружены по ссылке
	Для Каждого Элемент Из ВыгруженныеПоСсылкеОбъекты() Цикл
		
		ПланыОбмена.ЗарегистрироватьИзменения(ЗаписьСообщения.Получатель, Элемент);
		
	КонецЦикла;
	
	// назначаем номер отправленного сообщения для объектов, выгруженных по ссылке
	Если ВыгруженныеПоСсылкеОбъекты().Количество() > 0 Тогда
		
		ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения, ВыгруженныеПоСсылкеОбъекты());
		
	КонецЕсли;
	
	Если Отказ Тогда
		ЗаписьСообщения.ПрерватьЗапись();
	Иначе
		ЗаписьСообщения.ЗакончитьЗапись();
	КонецЕсли;
	
	ЗаписьXML.Закрыть();
	ЗаписьXML = Неопределено;
	
	// {ОБРАБОТЧИК ПослеВыгрузкиДанных}
	Если Не ПустаяСтрока(Конвертация.ПослеВыгрузкиДанных) Тогда
		
		Попытка
			Выполнить(Конвертация.ПослеВыгрузкиДанных);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(63, ОписаниеОшибки(), НСтр("ru = 'ПослеВыгрузкиДанных (конвертация)'"));
		КонецПопытки;
	
	КонецЕсли;
	// {ОБРАБОТЧИК ПослеВыгрузкиДанных}
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуРегистраСопоставленияОбъектов(ЗаписьСообщения, СтрокаСообщенияОбОшибке)
	
	// выбираем изменения только для регистра сопоставления
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения, Метаданные.РегистрыСведений.СоответствиеОбъектовИнформационныхБаз);
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		// накладываем фильтр на выгрузку данных
		Если Данные.Отбор.УзелИнформационнойБазы.Значение <> УзелДляОбмена Тогда
			Продолжить;
		ИначеЕсли ПустаяСтрока(Данные.Отбор.УникальныйИдентификаторПриемника.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыгружатьОбъект = Истина;
		
		Для Каждого Запись Из Данные Цикл
			
			Если ВыгружатьОбъект И Запись.ОбъектВыгруженПоСсылке = Истина Тогда
				
				ВыгружатьОбъект = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// выгружаем зарегистрированную информацию РС СоответствиеОбъектовИнформационныхБаз;
		// правила конвертации РС прописаны в коде этой обработки;
		Если ВыгружатьОбъект Тогда
			
			ВыгрузитьИнформациюОЗарегистрированномОбъекте(Данные);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуЗарегистрированныхДанных(ЗаписьСообщения, СтрокаСообщенияОбОшибке, ТаблицаПравилВыгрузкиИспользуемые)
	
	// {ОБРАБОТЧИК ПередПолучениемИзмененныхОбъектов}
	Если Не ПустаяСтрока(Конвертация.ПередПолучениемИзмененныхОбъектов) Тогда
		
		Попытка
			Выполнить(Конвертация.ПередПолучениемИзмененныхОбъектов);
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(175, ОписаниеОшибки(), "ПередПолучениемИзмененныхОбъектов (конвертация)");
			Возврат;
		КонецПопытки;
	
	КонецЕсли;
	// {ОБРАБОТЧИК ПередПолучениемИзмененныхОбъектов}
	
	МассивВыгружаемыхМетаданных = ТаблицаПравилВыгрузкиИспользуемые.ВыгрузитьКолонку("ОбъектВыборкиМетаданные");
	
	// значение "Неопределено" свидетельствует о необходимости выгрузки констант
	Если МассивВыгружаемыхМетаданных.Найти(Неопределено) <> Неопределено Тогда
		
		ДополнитьМассивВыгружаемыхМетаданныхКонстантами(МассивВыгружаемыхМетаданных);
		
	КонецЕсли;
	
	// удаляем из массива элементы со значением "Неопределено"
	УдалитьНедопустимыеЗначенияИзМассиваВыгружаемыхМетаданных(МассивВыгружаемыхМетаданных);
	
	// ВЫБОРКА ИЗМЕНЕНИЙ
	ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения, МассивВыгружаемыхМетаданных);
	
	ОбъектМетаданныхПредыдущий      = Неопределено;
	ПравилоВыгрузкиДанныхПредыдущее = Неопределено;
	ПравилоВыгрузкиДанных           = Неопределено;
	НомерФайлаВыгрузки              = 0;
	СтрокаФайла                     = Неопределено;
	ВыгружаетсяРегистр              = Ложь;
	ВыгружаютсяКонстанты            = Ложь;
	
	Пока ВыборкаИзменений.Следующий() Цикл
		
		Данные = ВыборкаИзменений.Получить();
		
		ТипДанныхДляВыгрузки = ТипЗнч(Данные);
		
		// отрабатываем удаление объекта
		Если ТипДанныхДляВыгрузки = ТипУдалениеОбъекта Тогда
			
			ОтработатьУдалениеОбъекта(Данные);
			Продолжить;
			
		КонецЕсли;
		
		ОбъектМетаданныхТекущий = Данные.Метаданные();
		
		// выгружается новый тип объекта метаданных
		Если ОбъектМетаданныхПредыдущий <> ОбъектМетаданныхТекущий Тогда
			
			Если ОбъектМетаданныхПредыдущий <> Неопределено Тогда
				
				// {ОБРАБОТЧИК ПослеОбработки ПВД}
				Если ПравилоВыгрузкиДанныхПредыдущее <> Неопределено
					И Не ПустаяСтрока(ПравилоВыгрузкиДанныхПредыдущее.ПослеОбработки) Тогда
						
						Попытка
							Выполнить(ПравилоВыгрузкиДанныхПредыдущее.ПослеОбработки);
						Исключение
							ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПравилоВыгрузкиДанныхПредыдущее.Имя, , "ПослеОбработкиВыгрузкиДанных");
						КонецПопытки;
					
				КонецЕсли;
				// {ОБРАБОТЧИК ПослеОбработки ПВД}
				
			КонецЕсли;
			
			ОбъектМетаданныхПредыдущий = ОбъектМетаданныхТекущий;
			
			ВыгружаетсяРегистр = Ложь;
			ВыгружаютсяКонстанты = Ложь;
			
			СтруктураДанных = МенеджерыДляПлановОбмена[ОбъектМетаданныхТекущий];
			
			Если СтруктураДанных = Неопределено Тогда
				
				ВыгружаютсяКонстанты = Метаданные.Константы.Содержит(ОбъектМетаданныхТекущий);
				
			ИначеЕсли СтруктураДанных.ЭтоРегистр = Истина Тогда
				
				ВыгружаетсяРегистр = Истина;
				
			КонецЕсли;
			
			Если ВыгружаютсяКонстанты Тогда
				
				ПравилоВыгрузкиДанных = ТаблицаПравилВыгрузкиИспользуемые.Найти(Тип("КонстантыНабор"), "ОбъектВыборкиМетаданные");
				
			Иначе
				
				ПравилоВыгрузкиДанных = ТаблицаПравилВыгрузкиИспользуемые.Найти(ОбъектМетаданныхТекущий, "ОбъектВыборкиМетаданные");
				
			КонецЕсли;
			
			ПравилоВыгрузкиДанныхПредыдущее = ПравилоВыгрузкиДанных;
			
			// {ОБРАБОТЧИК ПередОбработкой ПВД}
			ИсходящиеДанные = Неопределено;
			
			Если ПравилоВыгрузкиДанных <> Неопределено
				И Не ПустаяСтрока(ПравилоВыгрузкиДанных.ПередОбработкой) Тогда
				
				Попытка
					Выполнить(ПравилоВыгрузкиДанных.ПередОбработкой);
				Исключение
					ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), ПравилоВыгрузкиДанных.Имя, , "ПередОбработкойВыгрузкиДанных");
				КонецПопытки;
				
			КонецЕсли;
			// {ОБРАБОТЧИК ПередОбработкой ПВД}
			
		КонецЕсли;
		
		// определяем вид отправки объекта
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
		
		Если ТипДанныхДляВыгрузки <> ТипРегистрСоответствия Тогда
			
			// получаем значение переменной ОтправкаЭлемента
			// очищаем набор записей регистров от срок, которые не прошли фильтр правил регистрации объектов (ПРО)
			ОбменДаннымиСобытия.ПриОтправкеДанных(Данные, ОтправкаЭлемента, УзелДляОбмена, ИмяПланаОбмена());
			
		КонецЕсли;
		
		// возможно это удаление объекта
		Если  Не ВыгружаетсяРегистр
			И Не ВыгружаютсяКонстанты
			И ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
			
			// посылаем информацию об удалении
			ОтработатьУдалениеОбъекта(Данные);
			Продолжить;
			
		КонецЕсли;
		
		// ВЫГРУЗКА ОБЪЕКТА
		Если ВыгружаетсяРегистр Тогда
			
			// выгрузка регистра
			ВыгрузкаРегистра(Данные, ПравилоВыгрузкиДанных, ИсходящиеДанные, НеВыгружатьОбъектыПоСсылкам);
			
		ИначеЕсли ВыгружаютсяКонстанты Тогда
			
			// выгрузка набора констант
			Свойства = Менеджеры[Тип("КонстантыНабор")];
			
			ВыгрузитьНаборКонстант(ПравилоВыгрузкиДанных, Свойства, ИсходящиеДанные, ОбъектМетаданныхТекущий.Имя);
			
		Иначе
			
			// выгрузка ссылочных типов
			ВыгрузкаОбъектаВыборки(Данные, ПравилоВыгрузкиДанных, , ИсходящиеДанные, НеВыгружатьОбъектыПоСсылкам);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОбъектМетаданныхПредыдущий <> Неопределено Тогда
		
		// {ОБРАБОТЧИК ПослеОбработки ПВД}
		Если ПравилоВыгрузкиДанных <> Неопределено
			И Не ПустаяСтрока(ПравилоВыгрузкиДанных.ПослеОбработки) Тогда
				
				Попытка
					Выполнить(ПравилоВыгрузкиДанных.ПослеОбработки);
				Исключение
					ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПравилоВыгрузкиДанных.Имя, , "ПослеОбработкиВыгрузкиДанных");
				КонецПопытки;
			
		КонецЕсли;
		// {ОБРАБОТЧИК ПослеОбработки ПВД}
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииОбменДанными(Комментарий, Уровень = Неопределено)
	
	Если Уровень = Неопределено Тогда
		Уровень = УровеньЖурналаРегистрации.Ошибка;
	КонецЕсли;
	
	ОбъектМетаданных = Неопределено;
	
	Если     УзелОбменаЗагрузкаДанных <> Неопределено
		И Не УзелОбменаЗагрузкаДанных.Пустая() Тогда
		
		ОбъектМетаданных = УзелОбменаЗагрузкаДанных.Метаданные();
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(КлючСообщенияЖурналаРегистрации(), Уровень, ОбъектМетаданных,, Комментарий);
	
КонецПроцедуры

Функция ВыгрузитьИнформациюСопоставленияОбъектов(УзелИнформационнойБазы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовИнформационныхБаз.Изменения КАК СоответствиеОбъектовИнформационныхБазИзменения
	|ГДЕ
	|	СоответствиеОбъектовИнформационныхБазИзменения.Узел = &УзелИнформационнойБазы
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НеобходимоВыполнитьКорректировкуИнформацииСопоставления()
	
	Возврат РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.НеобходимоВыполнитьКорректировкуИнформацииСопоставления(УзелДляОбмена, УзелДляОбмена.НомерОтправленного + 1);
	
КонецФункции

Процедура УдалитьНедопустимыеЗначенияИзМассиваВыгружаемыхМетаданных(МассивВыгружаемыхМетаданных)
	
	Если МассивВыгружаемыхМетаданных.Найти(Неопределено) <> Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(МассивВыгружаемыхМетаданных, Неопределено);
		
		УдалитьНедопустимыеЗначенияИзМассиваВыгружаемыхМетаданных(МассивВыгружаемыхМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьМассивВыгружаемыхМетаданныхКонстантами(МассивВыгружаемыхМетаданных)
	
	Состав = Метаданные.ПланыОбмена[ИмяПланаОбмена()].Состав;
	
	Для Каждого ОбъектМетаданныхКонстанта Из Метаданные.Константы Цикл
		
		Если Состав.Содержит(ОбъектМетаданныхКонстанта) Тогда
			
			МассивВыгружаемыхМетаданных.Добавить(ОбъектМетаданныхКонстанта);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоПредопределенныйЭлемент(Объект)
	
	Попытка
		Результат = Объект.Предопределенный;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ ПРАВИЛ ОБМЕНА

// Инициализирует колонки таблицы правил конвертации свойств объектов
//
// Параметры:
//  Таб            - ТаблицаЗначений. инициализируемая таблица правил конвертации свойств
// 
Процедура ИнициализацияТаблицыПравилКонвертацииСвойств(Таб)

	Колонки = Таб.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("ЭтоГруппа",     одОписаниеТипа("Булево"));
	Колонки.Добавить("ЭтоПолеПоиска", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПравилаГруппы");
	Колонки.Добавить("ПравилаГруппыОтключенные");

	Колонки.Добавить("ВидИсточника");
	Колонки.Добавить("ВидПриемника");
	
	Колонки.Добавить("УпрощеннаяВыгрузкаСвойства", одОписаниеТипа("Булево"));
	Колонки.Добавить("НуженУзелXMLПриВыгрузке", одОписаниеТипа("Булево"));
	Колонки.Добавить("НуженУзелXMLПриВыгрузкеГруппы", одОписаниеТипа("Булево"));

	Колонки.Добавить("ТипИсточника", одОписаниеТипа("Строка"));
	Колонки.Добавить("ТипПриемника", одОписаниеТипа("Строка"));
		
	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");

	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПолучитьИзВходящихДанных", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать",              одОписаниеТипа("Булево"));
	Колонки.Добавить("ЭтоОбязательноеСвойство", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");

	Колонки.Добавить("ПередОбработкойВыгрузки");
	Колонки.Добавить("ПослеОбработкиВыгрузки");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",			одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",				одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",				одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкойВыгрузки",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеОбработкиВыгрузки",	одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПриводитьКДлине",							одОписаниеТипа("Число"));
	Колонки.Добавить("ИмяПараметраДляПередачи", 				одОписаниеТипа("Строка"));
	Колонки.Добавить("ПоискПоДатеНаРавенство",					одОписаниеТипа("Булево"));
	
	Колонки.Добавить("СтрокаПолейПоиска");
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертацииСвойств()

Функция СоздатьТаблицуВыгруженныхОбъектов()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Ключ");
	Таблица.Колонки.Добавить("УзелСсылки");
	Таблица.Колонки.Добавить("ВыгруженаТолькоСсылка",    Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("НППСсылки",                Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("КоличествоОбращений",      Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("НомерПоследнегоОбращения", Новый ОписаниеТипов("Число"));
	
	Таблица.Индексы.Добавить("Ключ");
	
	Возврат Таблица;
	
КонецФункции

// Инициализирует колонки таблицы правил конвертации объектов
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилКонвертации()

	Колонки = ТаблицаПравилКонвертации.Колонки;
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СинхронизироватьПоИдентификатору",                        одОписаниеТипа("Булево"));
	Колонки.Добавить("НеСоздаватьЕслиНеНайден",                                 одОписаниеТипа("Булево"));
	Колонки.Добавить("НеВыгружатьОбъектыСвойствПоСсылкам",                      одОписаниеТипа("Булево"));
	Колонки.Добавить("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD",       одОписаниеТипа("Булево"));
	Колонки.Добавить("НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике",   одОписаниеТипа("Булево"));
	Колонки.Добавить("ИспользоватьБыстрыйПоискПриЗагрузке",                     одОписаниеТипа("Булево"));
	Колонки.Добавить("ГенерироватьНовыйНомерИлиКодЕслиНеУказан",                одОписаниеТипа("Булево"));
	Колонки.Добавить("ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки",             одОписаниеТипа("Булево"));
	Колонки.Добавить("МаленькоеКоличествоОбъектов",                             одОписаниеТипа("Булево"));
	Колонки.Добавить("КоличествоОбращенийДляВыгрузкиСсылки",                    одОписаниеТипа("Число"));
	Колонки.Добавить("КоличествоЭлементовВИБ",                                  одОписаниеТипа("Число"));
		
	Колонки.Добавить("СпособВыгрузки");

	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");
	
	Колонки.Добавить("ТипИсточника",  одОписаниеТипа("Строка"));
	Колонки.Добавить("ТипПриемника",  одОписаниеТипа("Строка"));
	
	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");
	Колонки.Добавить("ПослеВыгрузкиВФайл");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузкиВФайл",одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередЗагрузкой");
	Колонки.Добавить("ПриЗагрузке");
	Колонки.Добавить("ПослеЗагрузки");
	
	Колонки.Добавить("ПоследовательностьПолейПоиска");
	Колонки.Добавить("ПоискПоТабличнымЧастям");
	
	Колонки.Добавить("ПриоритетОбъектовОбмена");
	
	Колонки.Добавить("ЕстьОбработчикПередЗагрузкой", одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриЗагрузке",    одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеЗагрузки",  одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПоследовательностьПолейПоиска",  одОписаниеТипа("Булево"));

	Колонки.Добавить("Свойства",            одОписаниеТипа("ТаблицаЗначений"));
	Колонки.Добавить("СвойстваПоиска",      одОписаниеТипа("ТаблицаЗначений"));
	Колонки.Добавить("СвойстваОтключенные", одОписаниеТипа("ТаблицаЗначений"));
	
	Колонки.Добавить("Значения",		одОписаниеТипа("Соответствие"));

	Колонки.Добавить("Выгруженные",							одОписаниеТипа("ТаблицаЗначений"));
	Колонки.Добавить("ВыгружатьПредставлениеИсточника",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать",					одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЗапоминатьВыгруженные",       одОписаниеТипа("Булево"));
	Колонки.Добавить("ВсеОбъектыВыгружены",         одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПоляПоиска",  одОписаниеТипа("Строка"));
	Колонки.Добавить("ПоляТаблицы", одОписаниеТипа("Строка"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

// Инициализирует колонки таблицы правил выгрузки данных
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияТаблицыПравилВыгрузки()

	Колонки = ТаблицаПравилВыгрузки.Колонки;

	Колонки.Добавить("Включить", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	Колонки.Добавить("ОбъектВыборкиМетаданные");
	
	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");

	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПослеВыгрузки");
	
	// Колонки для поддержки отбора с помощью построителя
	Колонки.Добавить("ИспользоватьОтбор", одОписаниеТипа("Булево"));
	Колонки.Добавить("НастройкиПостроителя");
	Колонки.Добавить("ИмяОбъектаДляЗапроса");
	Колонки.Добавить("ИмяОбъектаДляЗапросаРегистра");
	Колонки.Добавить("ИмяТипаПриемника");
	
	Колонки.Добавить("НеВыгружатьОбъектыСозданныеВБазеПриемнике", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("СсылкаНаУзелОбмена");
	
	Колонки.Добавить("СинхронизироватьПоИдентификатору", одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилВыгрузки()

// Инициализирует колонки таблицы правил очистки данных
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилОчистки()

	Колонки = ТаблицаПравилОчистки.Колонки;

	Колонки.Добавить("Включить",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок",	одОписаниеТипа("Число"));

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	
	Колонки.Добавить("УдалятьЗаПериод");
	Колонки.Добавить("Непосредственно",	одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");
	Колонки.Добавить("ПередУдалением");

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

// Инициализирует колонки таблицы настройки параметров
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыНастройкиПараметров()

	Колонки = ТаблицаНастройкиПараметров.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Значение");
	Колонки.Добавить("ПередаватьПараметрПриВыгрузке");
	Колонки.Добавить("ПравилоКонвертации");

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Функция ИнициализацияТаблицыДанныхСообщенияОбмена(ТипОбъекта)
	
	ТаблицаДанныхСообщенияОбмена = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаДанныхСообщенияОбмена.Колонки;
	
	// обязательные поля
	Колонки.Добавить(ИмяКолонкиУникальныйИдентификатор(), ТипСтрока36);
	Колонки.Добавить(ИмяКолонкиТипСтрокой(),              ТипСтрока255);
	
	ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	// получаем описание всех полей объекта метаданного из конфигурации
	ТаблицаОписанияСвойствОбъекта = ОбщегоНазначения.ПолучитьТаблицуОписанияСвойствОбъекта(ОбъектМетаданных, "Имя, Тип");
	
	Для Каждого ОписаниеСвойства ИЗ ТаблицаОписанияСвойствОбъекта Цикл
		
		Колонки.Добавить(ОписаниеСвойства.Имя, ОписаниеСвойства.Тип);
		
	КонецЦикла;
	
	Возврат ТаблицаДанныхСообщенияОбмена;
	
КонецФункции

// Инициализирует переменную СообщенияОбОшибках, содержащую соответствия кодов сообщений их описаниям
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияСообщений()

	СообщенияОбОшибках			= Новый Соответствие;
		
	СообщенияОбОшибках.Вставить(2,  НСтр("ru = 'Ошибка распаковки файла обмена. Файл заблокирован.'"));
	СообщенияОбОшибках.Вставить(3,  НСтр("ru = 'Указанный файл правил обмена не существует!'"));
	СообщенияОбОшибках.Вставить(4,  НСтр("ru = 'Ошибка при создании COM-объекта Msxml2.DOMDocument'"));
	СообщенияОбОшибках.Вставить(5,  НСтр("ru = 'Ошибка открытия файла обмена'"));
	СообщенияОбОшибках.Вставить(6,  НСтр("ru = 'Ошибка при загрузке правил обмена'"));
	СообщенияОбОшибках.Вставить(7,  НСтр("ru = 'Ошибка формата правил обмена'"));
	СообщенияОбОшибках.Вставить(8,  НСтр("ru = 'Не корректно указано имя файла для выгрузки данных'"));
	СообщенияОбОшибках.Вставить(9,  НСтр("ru = 'Ошибка формата файла обмена'"));
	СообщенияОбОшибках.Вставить(10, НСтр("ru = 'Не указано имя файла для выгрузки данных (Имя файла данных)'"));
	СообщенияОбОшибках.Вставить(11, НСтр("ru = 'Ссылка на несуществующий объект метаданных в правилах обмена'"));
	СообщенияОбОшибках.Вставить(12, НСтр("ru = 'Не указано имя файла с правилами обмена (Имя файла правил)'"));
			
	СообщенияОбОшибках.Вставить(13, НСтр("ru = 'Ошибка получения значения свойства объекта (по имени свойства источника)'"));
	СообщенияОбОшибках.Вставить(14, НСтр("ru = 'Ошибка получения значения свойства объекта (по имени свойства приемника)'"));
	
	СообщенияОбОшибках.Вставить(15, НСтр("ru = 'Не указано имя файла для загрузки данных (Имя файла для загрузки)'"));
			
	СообщенияОбОшибках.Вставить(16, НСтр("ru = 'Ошибка получения значения свойства подчиненного объекта (по имени свойства источника)'"));
	СообщенияОбОшибках.Вставить(17, НСтр("ru = 'Ошибка получения значения свойства подчиненного объекта (по имени свойства приемника)'"));
		
	СообщенияОбОшибках.Вставить(19, НСтр("ru = 'Ошибка в обработчике события ПередЗагрузкойОбъекта'"));
	СообщенияОбОшибках.Вставить(20, НСтр("ru = 'Ошибка в обработчике события ПриЗагрузкеОбъекта'"));
	СообщенияОбОшибках.Вставить(21, НСтр("ru = 'Ошибка в обработчике события ПослеЗагрузкиОбъекта'"));
	СообщенияОбОшибках.Вставить(22, НСтр("ru = 'Ошибка в обработчике события ПередЗагрузкойДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(23, НСтр("ru = 'Ошибка в обработчике события ПослеЗагрузкиДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(24, НСтр("ru = 'Ошибка при удалении объекта'"));
	СообщенияОбОшибках.Вставить(25, НСтр("ru = 'Ошибка при записи документа'"));
	СообщенияОбОшибках.Вставить(26, НСтр("ru = 'Ошибка записи объекта'"));
	СообщенияОбОшибках.Вставить(27, НСтр("ru = 'Ошибка в обработчике события ПередОбработкойПравилаОчистки'"));
	СообщенияОбОшибках.Вставить(28, НСтр("ru = 'Ошибка в обработчике события ПослеОбработкиПравилаОчистки'"));
	СообщенияОбОшибках.Вставить(29, НСтр("ru = 'Ошибка в обработчике события ПередУдалениемОбъекта'"));
	
	СообщенияОбОшибках.Вставить(31, НСтр("ru = 'Ошибка в обработчике события ПередОбработкойПравилаВыгрузки'"));
	СообщенияОбОшибках.Вставить(32, НСтр("ru = 'Ошибка в обработчике события ПослеОбработкиПравилаВыгрузки'"));
	СообщенияОбОшибках.Вставить(33, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкойОбъекта'"));
	СообщенияОбОшибках.Вставить(34, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиОбъекта'"));
			
	СообщенияОбОшибках.Вставить(39, НСтр("ru = 'Ошибка при выполнении алгоритма, содержащегося в файле обмена'"));
			
	СообщенияОбОшибках.Вставить(41, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкойОбъекта'"));
	СообщенияОбОшибках.Вставить(42, НСтр("ru = 'Ошибка в обработчике события ПриВыгрузкеОбъекта'"));
	СообщенияОбОшибках.Вставить(43, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиОбъекта'"));
			
	СообщенияОбОшибках.Вставить(45, НСтр("ru = 'Не найдено правило конвертации объектов'"));
		
	СообщенияОбОшибках.Вставить(48, НСтр("ru = 'Ошибка в обработчике события ПередОбработкойВыгрузки группы свойств'"));
	СообщенияОбОшибках.Вставить(49, НСтр("ru = 'Ошибка в обработчике события ПослеОбработкиВыгрузки группы свойств'"));
	СообщенияОбОшибках.Вставить(50, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкой (объекта коллекции)'"));
	СообщенияОбОшибках.Вставить(51, НСтр("ru = 'Ошибка в обработчике события ПриВыгрузке (объекта коллекции)'"));
	СообщенияОбОшибках.Вставить(52, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузки (объекта коллекции)'"));
	СообщенияОбОшибках.Вставить(53, НСтр("ru = 'Ошибка в глобальном обработчике события ПередЗагрузкойОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(54, НСтр("ru = 'Ошибка в глобальном обработчике события ПослеЗагрузкиОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(55, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкой (свойства)'"));
	СообщенияОбОшибках.Вставить(56, НСтр("ru = 'Ошибка в обработчике события ПриВыгрузке (свойства)'"));
	СообщенияОбОшибках.Вставить(57, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузки (свойства)'"));
	
	СообщенияОбОшибках.Вставить(62, НСтр("ru = 'Ошибка в обработчике события ПередВыгрузкойДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(63, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиДанных (конвертация)'"));
	СообщенияОбОшибках.Вставить(64, НСтр("ru = 'Ошибка в глобальном обработчике события ПередКонвертациейОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(65, НСтр("ru = 'Ошибка в глобальном обработчике события ПередВыгрузкойОбъекта (конвертация)'"));
	СообщенияОбОшибках.Вставить(66, НСтр("ru = 'Ошибка получения коллекции подчиненных объектов из входящих данных'"));
	СообщенияОбОшибках.Вставить(67, НСтр("ru = 'Ошибка получения свойства подчиненного объекта из входящих данных'"));
	СообщенияОбОшибках.Вставить(68, НСтр("ru = 'Ошибка получения свойства объекта из входящих данных'"));
	
	СообщенияОбОшибках.Вставить(69, НСтр("ru = 'Ошибка в глобальном обработчике события ПослеВыгрузкиОбъекта (конвертация)'"));
	
	СообщенияОбОшибках.Вставить(71, НСтр("ru = 'Не найдено соответствие для значения Источника'"));
	
	СообщенияОбОшибках.Вставить(72, НСтр("ru = 'Ошибка при выгрузке данных для узла плана обмена'"));
	
	СообщенияОбОшибках.Вставить(73, НСтр("ru = 'Ошибка в обработчике события ПоследовательностьПолейПоиска'"));
	СообщенияОбОшибках.Вставить(74, НСтр("ru = 'Необходимо перезагрузить правила обмена для выгрузки данных.'"));
	
	СообщенияОбОшибках.Вставить(75, НСтр("ru = 'Ошибка в обработчике события ПослеЗагрузкиПравилОбмена (конвертация)'"));
	СообщенияОбОшибках.Вставить(76, НСтр("ru = 'Ошибка в обработчике события ПередОтправкойИнформацииОбУдалении (конвертация)'"));
	СообщенияОбОшибках.Вставить(77, НСтр("ru = 'Ошибка в обработчике события ПриПолученииИнформацииОбУдалении (конвертация)'"));
	
	СообщенияОбОшибках.Вставить(78, НСтр("ru = 'Ошибка при выполнении алгоритма после загрузки значений параметров'"));
	
	СообщенияОбОшибках.Вставить(79, НСтр("ru = 'Ошибка в обработчике события ПослеВыгрузкиОбъектаВФайл'"));
	
	СообщенияОбОшибках.Вставить(80, НСтр("ru = 'Ошибка установки свойства предопределенного элемента.
		|Нельзя помечать на удаление предопределенный элемент. Пометка на удаление для объекта не установлена.'"));
	//
	СообщенияОбОшибках.Вставить(81, НСтр("ru = 'Возникла коллизия изменений объектов!
		|Объект этой информационной базы был заменен версией объекта из второй информационной базы.'"));
	//
	СообщенияОбОшибках.Вставить(82, НСтр("ru = 'Возникла коллизия изменений объектов!
		|Объект из второй информационной базы не принят. Объект этой информационной базы не изменен.'"));
	//
	СообщенияОбОшибках.Вставить(83, НСтр("ru = 'Ошибка обращения к табличной части объекта. Табличная часть объекта не может быть изменена.'"));
	СообщенияОбОшибках.Вставить(84, НСтр("ru = 'Коллизия дат запрета изменения.'"));
	
	СообщенияОбОшибках.Вставить(174, НСтр("ru = 'Сообщение обмена было принято ранее'"));
	СообщенияОбОшибках.Вставить(175, НСтр("ru = 'Ошибка в обработчике события ПередПолучениемИзмененныхОбъектов (конвертация)'"));
	СообщенияОбОшибках.Вставить(176, НСтр("ru = 'Ошибка в обработчике события ПослеПолученияИнформацииОбУзлахОбмена (конвертация)'"));
		
КонецПроцедуры // ИнициализацияСообщений()

Процедура ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, ИмяТипа, Менеджер, ПрефиксИмениТипа, ВозможенПоискПоПредопределенным = Ложь)
	
	Имя              = ОбъектМД.Имя;
	ТипСсылкиСтрокой = ПрефиксИмениТипа + "." + Имя;
	СтрокаПоиска     = "ВЫБРАТЬ Ссылка ИЗ " + ИмяТипа + "." + Имя + " ГДЕ ";
	СтрокаПоискаВыгрузкиСсылки     = "ВЫБРАТЬ #ПоляПоиска# ИЗ " + ИмяТипа + "." + Имя;
	ТипСсылки        = Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,СтрокаПоиска,СтрокаПоискаВыгрузкиСсылки,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, СтрокаПоиска, СтрокаПоискаВыгрузкиСсылки, ВозможенПоискПоПредопределенным);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
	
	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Истина, Ложь);
	МенеджерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
КонецПроцедуры

Процедура ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, ИмяТипа, Менеджер, ПрефиксИмениТипаЗапись, ПрефиксИмениТипаВыборка)
	
	Периодический = Неопределено;
	
	Имя					= ОбъектМД.Имя;
	ТипСсылкиСтрокой	= ПрефиксИмениТипаЗапись + "." + Имя;
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, Ложь);
	
	Если ИмяТипа = "РегистрСведений" Тогда
		
		Периодический = (ОбъектМД.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
		ПодчиненныйРегистратору = (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		
		Структура.Вставить("Периодический", Периодический);
		Структура.Вставить("ПодчиненныйРегистратору", ПодчиненныйРегистратору);
		
	КонецЕсли;	
	
	Менеджеры.Вставить(ТипСсылки, Структура);
		

	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Ложь, Истина);
	МенеджерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
	
	ТипСсылкиСтрокой	= ПрефиксИмениТипаВыборка + "." + Имя;
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, Ложь);
	
	Если Периодический <> Неопределено Тогда
		
		Структура.Вставить("Периодический", Периодический);
		Структура.Вставить("ПодчиненныйРегистратору", ПодчиненныйРегистратору);	
		
	КонецЕсли;
	
	Менеджеры.Вставить(ТипСсылки, Структура);	
		
КонецПроцедуры

// Инициализирует переменную Менеджеры, содержащую соответствия типов объектов их свойствам
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияМенеджеров()

	Менеджеры = Новый Соответствие;
	
	МенеджерыДляПлановОбмена = Новый Соответствие;
    	
	// ССЫЛКИ
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Справочник", Справочники[ОбъектМД.Имя], "СправочникСсылка", Истина);
					
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Документ", Документы[ОбъектМД.Имя], "ДокументСсылка");
				
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланВидовХарактеристик", ПланыВидовХарактеристик[ОбъектМД.Имя], "ПланВидовХарактеристикСсылка", Истина);
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыСчетов Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланСчетов", ПланыСчетов[ОбъектМД.Имя], "ПланСчетовСсылка", Истина);
						
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыВидовРасчета Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланВидовРасчета", ПланыВидовРасчета[ОбъектМД.Имя], "ПланВидовРасчетаСсылка", Истина);
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыОбмена Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланОбмена", ПланыОбмена[ОбъектМД.Имя], "ПланОбменаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.Задачи Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Задача", Задачи[ОбъектМД.Имя], "ЗадачаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.БизнесПроцессы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "БизнесПроцесс", БизнесПроцессы[ОбъектМД.Имя], "БизнесПроцессСсылка");
		
		ИмяТипа = "ТочкаМаршрутаБизнесПроцесса";
		// ссылка на точки маршрута
		Имя              = ОбъектМД.Имя;
		Менеджер         = БизнесПроцессы[Имя].ТочкиМаршрута;
		СтрокаПоиска     = "";
		ТипСсылкиСтрокой = "ТочкаМаршрутаБизнесПроцессаСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО,ПустаяСсылка,ВозможенПоискПоПредопределенным,СтрокаПоиска", Имя, 
			ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, , Неопределено, Ложь, СтрокаПоиска);		
		Менеджеры.Вставить(ТипСсылки, Структура);
				
	КонецЦикла;
	
	// РЕГИСТРЫ

	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрСведений", РегистрыСведений[ОбъектМД.Имя], "РегистрСведенийЗапись", "РегистрСведенийВыборка");
						
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.РегистрыБухгалтерии Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрБухгалтерии", РегистрыБухгалтерии[ОбъектМД.Имя], "РегистрБухгалтерииЗапись", "РегистрБухгалтерииВыборка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.РегистрыНакопления Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрНакопления", РегистрыНакопления[ОбъектМД.Имя], "РегистрНакопленияЗапись", "РегистрНакопленияВыборка");
						
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.РегистрыРасчета Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрРасчета", РегистрыРасчета[ОбъектМД.Имя], "РегистрРасчетаЗапись", "РегистрРасчетаВыборка");
						
	КонецЦикла;
	
	ИмяТипа = "Перечисление";
	
	Для каждого ОбъектМД Из Метаданные.Перечисления Цикл
		
		Имя              = ОбъектМД.Имя;
		Менеджер         = Перечисления[Имя];
		ТипСсылкиСтрокой = "ПеречислениеСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО,ПустаяСсылка,ВозможенПоискПоПредопределенным", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, , Перечисления[Имя].ПустаяСсылка(), Ложь);
		Менеджеры.Вставить(ТипСсылки, Структура);
		
	КонецЦикла;
	
	// Константы
	ИмяТипа             = "Константы";
	ОбъектМД            = Метаданные.Константы;
	Имя					= "Константы";
	Менеджер			= Константы;
	ТипСсылкиСтрокой	= "КонстантыНабор";
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, Ложь);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
КонецПроцедуры // ИнициализацияМенеджеров()

Процедура ИнициализироватьМенеджерыИСообщения()
	
	Если Менеджеры = Неопределено Тогда
		ИнициализацияМенеджеров();
	КонецЕсли; 

	Если СообщенияОбОшибках = Неопределено Тогда
		ИнициализацияСообщений();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСтруктуруКонвертации()
	
	Конвертация  = Новый Структура("ПередВыгрузкойДанных, ПослеВыгрузкиДанных, ПередПолучениемИзмененныхОбъектов, ПослеПолученияИнформацииОбУзлахОбмена, ПередВыгрузкойОбъекта, ПослеВыгрузкиОбъекта, ПередКонвертациейОбъекта, ПередЗагрузкойОбъекта, ПослеЗагрузкиОбъекта, ПередЗагрузкойДанных, ПослеЗагрузкиДанных, ПриПолученииИнформацииОбУдалении, ПередОтправкойИнформацииОбУдалении");
	Конвертация.Вставить("УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике", Ложь);
	Конвертация.Вставить("ВерсияФормата");
	Конвертация.Вставить("ДатаВремяСоздания");
	
КонецПроцедуры

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()

	РежимВизуальнойНастройкиОбмена = Ложь;
	КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
	
	ЧислоХранимыхВыгруженныхОбъектовПоТипам = 2000;
		
	ПараметрыИнициализированы        = Ложь;
	
	ВестиДополнительныйКонтрольЗаписиВXML = Ложь;
	
	Менеджеры    = Неопределено;
	СообщенияОбОшибках  = Неопределено;
	
	УстановитьФлагОшибки(Ложь);
	
	СоздатьСтруктуруКонвертации();
	
	Правила      = Новый Структура;
	Алгоритмы    = Новый Структура;
	ДопОбработки = Новый Структура;
	Запросы      = Новый Структура;

	Параметры    = Новый Структура;
	СобытияПослеЗагрузкиПараметров = Новый Структура;
	
	ПараметрыДопОбработок = Новый Структура;
    	
	XMLПравила  = Неопределено;
	
	// Типы

	ТипСтрока                  = Тип("Строка");
	ТипБулево                  = Тип("Булево");
	ТипЧисло                   = Тип("Число");
	ТипДата                    = Тип("Дата");
	ТипХранилищеЗначения       = Тип("ХранилищеЗначения");
	ТипУникальныйИдентификатор = Тип("УникальныйИдентификатор");
	ТипДвоичныеДанные          = Тип("ДвоичныеДанные");
	ТипВидДвиженияНакопления   = Тип("ВидДвиженияНакопления");
	ТипУдалениеОбъекта         = Тип("УдалениеОбъекта");
	ТипВидСчета			       = Тип("ВидСчета");
	ТипТип                     = Тип("Тип");
	ТипСоответствие            = Тип("Соответствие");
	
	ТипСтрока36  = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36));
	ТипСтрока255 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(255));
	
	ТипРегистрСоответствия    = Тип("РегистрСведенийНаборЗаписей.СоответствиеОбъектовИнформационныхБаз");

	ЗначениеПустаяДата		   = Дата('00010101');

	// Типы узлов xml
	
	ТипУзлаXMLКонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	ТипУзлаXMLНачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	ТипУзлаXMLТекст          = ТипУзлаXML.Текст;
	
	ФайлПротоколаДанных = Неопределено;
	
	СоответствиеТиповИНазваниеОбъектов = Новый Соответствие();
	
	ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	
	СоответствиеПустыхЗначенийТипов = Новый Соответствие;
	СоответствиеОписаниеТипов = Новый Соответствие;
	
	РазрешитьПроведениеДокумента = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	РежимЗагрузкиИнформацииОПравилахОбмена = Ложь;
	
	ПолеРезультатВыполненияОбмена = Неопределено;
	
	ИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных = Новый Соответствие();
	ИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных = Новый Соответствие();
		
	МенеджерРегистраСоответствийОбъектов = РегистрыСведений.СоответствиеОбъектовИнформационныхБаз;
	
	// запрос для определения информации о сопоставлении объектов для подмены ссылки источника, на ссылку приемника
	ЗапросСоответствиеОбъектовИнформационныхБаз = Новый Запрос;
	ЗапросСоответствиеОбъектовИнформационныхБаз.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СоответствиеОбъектовИнформационныхБаз.УникальныйИдентификаторИсточникаСтрокой КАК УникальныйИдентификаторИсточникаСтрокой
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовИнформационныхБаз КАК СоответствиеОбъектовИнформационныхБаз
	|ГДЕ
	|	  СоответствиеОбъектовИнформационныхБаз.УзелИнформационнойБазы           = &УзелИнформационнойБазы
	|	И СоответствиеОбъектовИнформационныхБаз.УникальныйИдентификаторПриемника = &УникальныйИдентификаторПриемника
	|	И СоответствиеОбъектовИнформационныхБаз.ТипПриемника                     = &ТипПриемника
	|	И СоответствиеОбъектовИнформационныхБаз.ТипИсточника                     = &ТипИсточника
	|";
	//
	
КонецПроцедуры

Процедура УстановитьФлагОшибки(Значение = Истина)
	
	ПолеФлагОшибки = Значение;
	
КонецПроцедуры

Процедура Инкремент(Значение, Знач Итератор = 1)
	
	Если ТипЗнч(Значение) <> Тип("Число") Тогда
		
		Значение = 0;
		
	КонецЕсли;
	
	Значение = Значение + Итератор;
	
КонецПроцедуры

Процедура ЗафиксироватьЗавершениеЗагрузкиДанных()
	
	СостояниеОбменаДанными().РезультатВыполненияОбмена = РезультатВыполненияОбмена();
	СостояниеОбменаДанными().ДействиеПриОбмене         = Перечисления.ДействияПриОбмене.ЗагрузкаДанных;
	СостояниеОбменаДанными().УзелИнформационнойБазы    = УзелОбменаЗагрузкаДанных;
	
	// добавляем запись в РС
	РегистрыСведений.СостояниеОбменовДанными.ДобавитьЗапись(СостояниеОбменаДанными());
	
	// фиксируем успешное выполнение обмена в РС
	Если РезультатВыполненияОбмена() = Перечисления.РезультатыВыполненияОбмена.Выполнено Тогда
		
		// создаем и заполняем структуру для новой записи в РС
		СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, ДатаОкончания");
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СостояниеОбменаДанными());
		
		// добавляем запись в РС
		РегистрыСведений.СостояниеУспешныхОбменовДанными.ДобавитьЗапись(СтруктураЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// КОНСТАНТЫ

Функция ВерсияФорматаСообщенияОбмена()
	
	Возврат "3.1";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();

ИнициализацияТаблицыПравилКонвертации();
ИнициализацияТаблицыПравилВыгрузки();
ИнициализацияТаблицыПравилОчистки();
ИнициализацияТаблицыНастройкиПараметров();