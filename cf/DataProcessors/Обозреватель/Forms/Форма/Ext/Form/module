Перем КаталогДополнительнойИнформации;
Перем ФайлУстановки;
Перем ОтносительныйКаталог;
Перем ДомашняяСтраница;

// Копирование файлов с подкаталогами
//
// Параметры:
//  ИсхКаталог - имя исходного каталога
//  РезКаталог - имя результирующего каталога
//
Процедура КопироватьФайлы(ИсхКаталог,РезКаталог)

	СписокФайлов = НайтиФайлы(ИсхКаталог, "*.*");

	Если СписокФайлов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Для Индекс = 0 По СписокФайлов.ВГраница() Цикл

		Файл = СписокФайлов[Индекс];
		Файл.УстановитьТолькоЧтение(Ложь);

		Если Файл.ЭтоКаталог() Тогда
			СоздатьКаталог(РезКаталог + Файл.Имя+ "\" );
			КопироватьФайлы(Файл.ПолноеИмя,РезКаталог + Файл.Имя + "\" );
		Иначе
			СоздатьКаталог(РезКаталог);
			КопироватьФайл(Файл.ПолноеИмя,РезКаталог + Файл.Имя);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // КопироватьФайлы()

// Вспомогательная процедура выделения имени сервера, адреса ресурса и имя ресурса по ссылке
//
// Параметры
//  Ссылка  – <Строка> – исходная ссылка, содержащая имя сервера, адрес ресурса и имя ресурс
//  Сервер  – <Строка> – результат - имя сервера
//  Адрес   – <Строка> – результат - адрес ресурса
//  Ресурс  – <Строка> – результат - имя ресурса
//
Процедура СоставСсылки(Ссылка, Сервер, Адрес, Ресурс)

	Поз = Найти(НРег(Ссылка),".ru");

	Если Поз>0 Тогда

		М = Найти(НРег(Ссылка),"http://");
		М = ?(М=0,1,8);

		Сервер = Сред(Ссылка,М,Поз+3-М);

		Поз1 = Найти(Ссылка,"?");
		Поз1 = ?(Поз1=0,СтрДлина(Ссылка),Поз1-1);
		АдресРесурс = Сред(Ссылка,Поз+4,Поз1-Поз-3);
		Н    = СтрДлина(АдресРесурс);
		Поз2 = Н;
		Стр  = АдресРесурс;

		Пока Истина Цикл

			Н = Найти(Стр,"/");

			Если Н = 0 Тогда
				Прервать;
			КонецЕсли;

			Поз2 = Н;
			Стр  = Лев(Стр, Поз2 - 1) + " " + Сред(Стр, Поз2 + 1);

		КонецЦикла;

		Адрес = "/"+Лев(АдресРесурс, Поз2);
		Ресурс = СокрЛП(Сред(АдресРесурс, Поз2 + 1));

	КонецЕсли;

КонецПроцедуры // ПараметрыСсылки()

Функция РазобратьПараметры(Ссылка)

	СписокПараметров = Новый СписокЗначений();

	Стр = Ссылка;
	Поз = Найти(Стр,"?");
	Стр = Сред(Стр,Поз+1);

	Если Поз > 0 Тогда

		Пока СтрДлина(Стр) > 0 Цикл

			// есть параметры
			Поз = Найти(Стр,"?"); 
			Поз = ?(Поз=0,СтрДлина(Стр)+1,Поз); // Позиция конца параметра

			ПозПараметра = Найти(Стр,"=");
			ИмяПараметра = СокрЛП(Врег(Сред(Стр,1,ПозПараметра-1)));

			ЗначениеПараметра = СокрЛП(Сред(Стр,ПозПараметра+1,Поз-ПозПараметра-1));
			СписокПараметров.Добавить(ИмяПараметра,ЗначениеПараметра);

			Стр = Сред(Стр,Поз+1);

		КонецЦикла;

	КонецЕсли;

	Возврат СписокПараметров;

КонецФункции // РазобратьПараметры()

Функция РазборЗначенияПараметроWINS(СтрокаСписка)

	СписокПараметров = Новый СписокЗначений();
	Стр = СтрокаСписка;
	Поз = Найти(Стр,";");

	Если Поз > 0 Тогда

		Пока Поз > 0 Цикл

			// есть параметры
			ЗначениеПараметра = СокрЛП(Лев(Стр,Поз-1));
			СписокПараметров.Добавить(ЗначениеПараметра);
			Стр = Сред(Стр,Поз+1);
			Поз = Найти(Стр,";"); 

		КонецЦикла;

		СписокПараметров.Добавить(Стр);

	Иначе
		// только одна ссылка
		СписокПараметров.Добавить(СтрокаСписка);
	КонецЕсли;

	Возврат СписокПараметров;

КонецФункции // РазборЗначенияПараметроWINS

// Запускает установку обновления
//
Процедура ЗапуститьУстановкуОбновления(ИмяФайлаУстановки)

	Файл = Новый Файл(ИмяФайлаУстановки);

	Если Файл.Существует() Тогда
		ЗапуститьПриложение(ИмяФайлаУстановки);
	КонецЕсли;

КонецПроцедуры

// Получение заданного ресурса
//
// Параметры:
//  Ресурс - имя файл-ресурса (например: UpdSetup.exe)
// Возвращаемое значение:
//  Имя файла полученного ресурса. Тип - Строка. Если не получен - пустая строка
//
Функция Получить(Сервер, Адрес, Ресурс, Каталог, ДобавитьРесурс = Истина)

	Перем HTTP;

	ОбработкаПолученияФайлов = Обработки.ПолучениеФайловИзИнтернета.Создать();
	СоздатьКаталог(Каталог);
	Результат = ОбработкаПолученияФайлов.ЗапроситьФайлыССервера(Сервер, Адрес+?(ДобавитьРесурс,Ресурс,""), Каталог + Ресурс, HTTP);

	Если НЕ Результат Тогда
		Сообщить("Не удалось получить ресурс " + Ресурс ); 
		Возврат "";
	КонецЕсли;

	Файл      = Новый Файл(Каталог + Ресурс);
	Результат = Файл.ПолучитьТолькоЧтение();

	Если Результат Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
	КонецЕсли;

	Возврат Каталог + Ресурс;

КонецФункции

Процедура ПроверкаВозможностиЗавершения()

	Попытка
		УдалитьФайлы(КаталогОбновлений,ФайлУстановки);
		ОтключитьОбработчикОжидания("ПроверкаВозможностиЗавершения");
		РазрешитьЗакрытие = Истина;
	Исключение
		РазрешитьЗакрытие = Ложь;
	КонецПопытки;

КонецПроцедуры 

// Получает дистрибутив обновления
// Параметры:
//	Сервер  - имя сервера, на кот. расположен ресурс
//	Адрес   - адрес ресурса на сервере
//	Ресурс  - имя файла ресурса
//	Каталог - имя каталога, в кот. копируется дистрибутив
// Описание
//	Ресурс скачивается 
Функция ПолучитьДистрибутив(Сервер, Адрес, Ресурс, Каталог)
	СоздатьКаталог(Каталог);
	//проверка на занятость 
	Попытка
		УдалитьФайлы(Каталог,"*.*");
	Исключение
		Сообщить("Каталог для получения комплекта """+Каталог+""" занят. Получение невозможно.");
		Возврат "";
	КонецПопытки;
	ИмяФайла = Получить(Сервер, Адрес, Ресурс, Каталог, Истина);
	Если НЕ ПустаяСтрока(ИмяФайла) Тогда
		// распаковка архива
		Распаковать(Каталог, Ресурс);
		
		// запуск установки
		ЗапуститьУстановкуОбновления(Каталог+ФайлУстановки);
		ПодключитьОбработчикОжидания("ПроверкаВозможностиЗавершения",1);
		Возврат Истина;
	Иначе
		Сообщить("Комплект поставки обновления не получен");
		Возврат Ложь;
	КонецЕсли;
КонецФункции 

// Распаковывает дистрибутив обновления
// Параметры:
//	Каталог  - - имя каталога, в кот. расположен дистрибутив
//	Архив  - имя файла дистрибутива
//
Процедура Распаковать(Каталог, Архив)
	ИмяБатФайла = "" + Каталог + "Tmp.bat";
	БатФайл     = Новый ТекстовыйДокумент();
	БатФайл.Очистить();
	БатФайл.ДобавитьСтроку(Лев(Каталог,2));
	БатФайл.ДобавитьСтроку("cd """ + Сред(Каталог,3) + """");
	БатФайл.ДобавитьСтроку(Архив);
	БатФайл.Записать(ИмяБатФайла,КодировкаТекста.ANSI);
	КомандаСистемы(""""+ ИмяБатФайла + """");
	УдалитьФайлы(Каталог,"Tmp.bat");
	Попытка
		УдалитьФайлы(Каталог,Архив);
	Исключение
		Сообщить("Неудачная попытка удалить файл "+Каталог+Архив);
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////
//Предопределенные процедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ПустаяСтрока(СтартоваяСтраница) Тогда
		СтартоваяСтраница = СерверИсточник+"/"+АдресРесурсовОбозревателя+".aspx?Version="+Метаданные.Версия;
	КонецЕсли;
	Попытка
		ЭлементыФормы.ПолеHTMLДокумента1.Перейти(СтартоваяСтраница);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	Ссылка = СтартоваяСтраница;
	
	Если СтартоваяСтраница<>ДомашняяСтраница Тогда
		КнопкиКомПанели = ЭлементыФормы.ДействияФормы.Кнопки;
		КнопкиКомПанели.Удалить(КнопкиКомПанели.Индекс(КнопкиКомПанели.Действие3));
		КнопкиКомПанели.Удалить(КнопкиКомПанели.Индекс(КнопкиКомПанели.Справка));
		КнопкиКомПанели.Удалить(КнопкиКомПанели.Индекс(КнопкиКомПанели.Разделитель4));
		КнопкиКомПанели.Удалить(КнопкиКомПанели.Индекс(КнопкиКомПанели.Разделитель));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики событий элементов управлений

Процедура ПолеHTMLДокумента1onclick(Элемент, pEvtObj)
	pEvtObj.returnValue = Ложь;
	ПрежнееЗначениеСсылки = Ссылка;
	// проверка клика
	Попытка
		Ссылка = pEvtObj.srcElement.parentElement.document.activeElement.href;
		// это была ссылка
	Исключение
		Попытка
			// проверка клика по "не ссылке" (кнопка, флажок и др.)
			Стр = pEvtObj.srcElement.parentElement.innerHTML;
			pEvtObj.returnValue = Истина;
			Возврат; // это не ссылка, но нужно этот клик пропустить дальше
		Исключение
			// это был "пустой" клик (например, в текст)
			Ссылка = ПрежнееЗначениеСсылки;
			Возврат;
		КонецПопытки;
	КонецПопытки;
	Ссылка = СтрЗаменить(Ссылка,"&","?");
	СписокПараметров = РазобратьПараметры(Ссылка);
	
	Сервер=""; Адрес=""; Ресурс="";
	Если pEvtObj.shiftKey Тогда
		// была нажата клавиша Shift
		Параметр = СписокПараметров.НайтиПоЗначению("OPEN");
		Если Параметр<>Неопределено Тогда
			ОтносительныйКаталог = ?(НЕ ПустаяСтрока(Параметр.Представление),Параметр.Представление+"\","");
			Файл = Новый Файл(КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
			Если Не Файл.Существует() Тогда
				Ответ = Вопрос("Каталог "+КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог+" не существует. Создать?",РежимДиалогаВопрос.ДаНет,КодВозвратаДиалога.Да);
				Если Ответ=КодВозвратаДиалога.Да Тогда
					СоздатьКаталог(КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
				Иначе
					Возврат;
				КонецЕсли;
			КонецЕсли;
			ЗапуститьПриложение("explorer " + КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
		Иначе
			// открытие страницы в отдельном окне
			Форма = ПолучитьФорму("Форма",,Новый УникальныйИдентификатор());
			Форма.СтартоваяСтраница = Ссылка;
			Форма.Открыть();
		КонецЕсли;
		pEvtObj.returnValue = Ложь;
	Иначе
		// переход по ссылке в данном окне
		pEvtObj.returnValue = Истина;
		Параметр = СписокПараметров.НайтиПоЗначению("OPEN");
		Если Параметр<>Неопределено Тогда
			ОтносительныйКаталог = ?(НЕ ПустаяСтрока(Параметр.Представление),Параметр.Представление+"\","");
			Файл = Новый Файл(КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
			Если Не Файл.Существует() Тогда
				Ответ = Вопрос("Каталог "+КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог+" не существует. Создать?",РежимДиалогаВопрос.ДаНет); // ,КодВозвратаДиалога.Да
				Если Ответ=КодВозвратаДиалога.Да Тогда
					СоздатьКаталог(КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
				Иначе
					pEvtObj.returnValue = Ложь;
					Ссылка = ПрежнееЗначениеСсылки;
					Возврат;
				КонецЕсли;
			КонецЕсли;
			pEvtObj.returnValue = Ложь;
			ЗапуститьПриложение("explorer " + КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
		КонецЕсли;
		
		Параметр = СписокПараметров.НайтиПоЗначению("TYPE");
		Если Параметр<>Неопределено Тогда
			Если Параметр.Представление="UPD" Тогда
				// скачивание комплекта обновления
				// проверить возможность скачивания
				Параметр = СписокПараметров.НайтиПоЗначению("VERS");
				Если Параметр<>Неопределено Тогда
					// проверка соответствия текущей версии конфигурации выложенному комплекту обновления
					Если (Найти(";"+Параметр.Представление+";",";"+Метаданные.Версия+";")>0) 
							ИЛИ (Найти(Параметр.Представление,"*")>0) Тогда
						// скачать можно
						Параметр = СписокПараметров.НайтиПоЗначению("DIRU");
						ОтносительныйКаталог = ?(Параметр<>Неопределено,Параметр.Представление+"\","");
						Параметр = СписокПараметров.НайтиПоЗначению("MAIN");
						ФайлУстановки = ?(Параметр<>Неопределено,Параметр.Представление,"setup.exe");
						СоставСсылки(Ссылка, Сервер, Адрес, Ресурс);
						Параметр = СписокПараметров.НайтиПоЗначению("ID");
						Адрес = Адрес+?(Параметр<>Неопределено,"/get.jsp"+Параметр,"");
						Параметр = СписокПараметров.НайтиПоЗначению("FILE");
						Ресурс = ?(Параметр<>Неопределено,Параметр,"updsetup.exe");
						Если ПолучитьДистрибутив(Сервер, Адрес, Ресурс, КаталогОбновлений +"\"+ ОтносительныйКаталог) Тогда
							Параметр = СписокПараметров.НайтиПоЗначению("CONF");
							Если Параметр<>Неопределено Тогда
								Если Параметр.Представление="1" Тогда
									ЗапуститьПриложение(КаталогПрограммы()+"\1cv8.exe /CONFIG");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					Иначе
						// комплект не годится
						Предупреждение("Указанный комплект предназначен для обновления с версий:  "+СтрЗаменить(Параметр.Представление,";",", ")+Символы.ПС+"Текущая версия "+Метаданные.Версия);
					КонецЕсли;
				Иначе
					Сообщить("Отсутствует информация о версиях, для которых предназначен комплект обновления.");
				КонецЕсли;
				pEvtObj.returnValue = Ложь;
			ИначеЕсли Параметр.Представление="ADD" Тогда
				// скачивание дополнительной информации
				СоставСсылки(Ссылка, Сервер, Адрес, Ресурс);
				Добавить = Истина;
				Если Найти(Ссылка,"downloads.v8.1c.ru")>0 Тогда
					Параметр = СписокПараметров.НайтиПоЗначению("ID");
					Адрес = Адрес+?(Параметр<>Неопределено,"?id="+Параметр,"");
					Параметр = СписокПараметров.НайтиПоЗначению("FILE");
					Ресурс = ?(Параметр<>Неопределено,Параметр,Ресурс);
					Добавить = Ложь;
				КонецЕсли;
				Параметр = СписокПараметров.НайтиПоЗначению("DIR");
				ОтносительныйКаталог = ?(Параметр<>Неопределено,Параметр.Представление+"\","");
				Если ВРег(Прав(Ресурс,3))="EXE" Тогда
					КаталогПолучения = КаталогВременныхФайлов() + "tempIPP8\";
					ИмяФайла = Получить(Сервер, Адрес, Ресурс, КаталогПолучения, Добавить);
					Распаковать(КаталогПолучения,Ресурс);
					Если КаталогПолучения <> КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог Тогда 
						КопироватьФайлы(КаталогПолучения,КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог);
						Попытка
							УдалитьФайлы(КаталогПолучения);
						Исключение
						КонецПопытки;
					КонецЕсли;
					Параметр = СписокПараметров.НайтиПоЗначению("MAIN");
					ИмяФайла = КаталогДополнительнойИнформации+"\"+ОтносительныйКаталог+?(Параметр<>Неопределено,Параметр.Представление,Лев(Ресурс,СтрДлина(Ресурс)-4)+".epf");
				Иначе
					КаталогПолучения = КаталогДополнительнойИнформации +"\"+ ОтносительныйКаталог;
					ИмяФайла = Получить(Сервер, Адрес, Ресурс, КаталогПолучения);
				КонецЕсли;
				Параметр = СписокПараметров.НайтиПоЗначению("DO");
				Если Параметр<>Неопределено Тогда
					Если Параметр.Представление="0" Тогда
						// требуется только скачать
						pEvtObj.returnValue = Ложь;
						Возврат;
					КонецЕсли;
				КонецЕсли;
				Если НЕ ПустаяСтрока(ИмяФайла) Тогда
					Если ВРег(Прав(ИмяФайла,3))="TXT" Тогда
						Дос = Новый ТекстовыйДокумент();
						Дос.Прочитать(ИмяФайла);
						Дос.Показать();
					ИначеЕсли ВРег(Прав(ИмяФайла,3))="MXL" Тогда
						Дос = Новый ТабличныйДокумент();
						Дос.Прочитать(ИмяФайла);
						Дос.Показать();
					ИначеЕсли ВРег(Прав(ИмяФайла,3))="EPF" Тогда
						Форма = ВнешниеОбработки.Создать(ИмяФайла).ПолучитьФорму();
						Форма.Открыть();
					Иначе
						ЗапуститьПриложение("explorer " + ИмяФайла);
					КонецЕсли;
					pEvtObj.returnValue = Ложь;
				КонецЕсли
			КонецЕсли;
		КонецЕсли;
		Параметр = СписокПараметров.НайтиПоЗначению("WINS");
		Если Параметр<>Неопределено Тогда
			// открытие сопроводительных страниц (комментарии, реклама и проч.)
			СписокСтраниц = РазборЗначенияПараметроWINS(Параметр.Представление);
			Для каждого Страница Из СписокСтраниц Цикл
				Форма = ПолучитьФорму("Форма",,Новый УникальныйИдентификатор());
				Форма.СтартоваяСтраница = Страница.Значение;
				Форма.Открыть();
			КонецЦикла; 
			Если СписокПараметров.Количество()=1 Тогда
				ЭлементыФормы.ПолеHTMLДокумента1.Перейти(Ссылка);
			Иначе
				pEvtObj.returnValue = Ложь;
			КонецЕсли;
		КонецЕсли;
		Параметр = СписокПараметров.НайтиПоЗначению("PAGE");
		Если Параметр<>Неопределено Тогда
			Если Параметр.Представление="1" Тогда
				// открытие страницы в новом окне
				Форма = ПолучитьФорму("Форма",,Новый УникальныйИдентификатор());
				Форма.СтартоваяСтраница = СтрЗаменить(Врег(Ссылка),"?PAGE=1","");
				Форма.Открыть();
				pEvtObj.returnValue = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПоказатьГлавнуюСтраницу(Кнопка)

	Заголовок = "Web-страница конфигурации";
	СтартоваяСтраница = ДомашняяСтраница;
	ЭлементыФормы.ПолеHTMLДокумента1.Перейти(СтартоваяСтраница);

КонецПроцедуры

Процедура КоманднаяПанель2Справка(Кнопка)

	ОткрытьСправку(Метаданные.Обработки.Обозреватель);

КонецПроцедуры


ДомашняяСтраница = СерверИсточник+"/"+АдресРесурсовОбозревателя+".aspx?Version="+Метаданные.Версия;
КаталогДополнительнойИнформации = Константы.КаталогДополнительнойИнформации.Получить();
КаталогДополнительнойИнформации = ?(ПустаяСтрока(КаталогДополнительнойИнформации),КаталогВременныхФайлов() + "tempIPP8",КаталогДополнительнойИнформации);
СоздатьКаталог(КаталогДополнительнойИнформации);