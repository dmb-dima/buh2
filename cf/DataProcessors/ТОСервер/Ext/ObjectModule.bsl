#Если Клиент Тогда

///////////////////////////////////////////////////////////////////////////////
//// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДанныеСервера;
Перем мИмяКомпьютера;
Перем мНетОшибки;
Перем мОшибкаНеизвестно;
Перем мОшибкаЗагрузкиОтчета;

Перем мФискальныйРегистратор;

Перем мОписаниеОшибки;

Перем мМодельПодключаемогоТО;

Перем мВнешнееСобытиеОбработано;

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ)

// Функция осуществляет подключение клиента к серверу.
//
// Параметры:
//  Клиент                         – <*>
//                                 - Клиент, планирующий взаимодействие с механизмом.
//                                   В случае, если Клиент = Неопределено,
//                                   считается, что клиентом является модуль
//                                   приложения.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьКлиента(Клиент) Экспорт

	Результат = мНетОшибки;
	КонечныйРезультат = мНетОшибки;

	Клиенты   = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты[Клиент] <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;

	ВидТО = Неопределено;
	Для Каждого ВидТО Из Перечисления.ВидыТорговогоОборудования Цикл
		Если Клиент.ПоддерживаетсяВидТО(ВидТО) Тогда
			Результат = ПодключитьОборудование(ВидТО, Клиент);
			Если ЗначениеЗаполнено(Результат) Тогда
				КонечныйРезультат = мОшибкаНеизвестно;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если ЗначениеЗаполнено(КонечныйРезультат) Тогда
		мОписаниеОшибки = "Произошла ошибка при подключении торгового оборудования";
		Ошибка = ПолучитьТекстОшибкиТО(КонечныйРезультат);
		Сообщить(Ошибка, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат КонечныйРезультат;

КонецФункции // ПодключитьКлиента()

// Процедура осуществляет отключение клиента от сервера.
//
// Параметры:
//  Клиент                         – <*>
//                                 - Клиент, планирующий взаимодействие с механизмом.
//                                   В случае, если Клиент = Неопределено,
//                                   считается, что клиентом является модуль
//                                   приложения.
//
Процедура ОтключитьКлиента(Клиент) Экспорт

	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты[Клиент] = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ОтключитьОборудование(Клиент);

КонецПроцедуры // ОтключитьКлиента()

// Функция осуществляет обработку внешнего события, информация о котором была
// получена клиентом.
//
// Параметры:
//  Событие                        - <Строка>
//                                 - Строка, идентифицирующая внешнее событие. Передаётся в
//                                   качестве параметра обработчику «ВнешнееСобытие».
//
//  Данные                         - <Строка>
//                                 - Данные, связанные с событием. Также передаётся в
//                                   качестве параметра обработчику «ВнешнееСобытие».
//
//  Клиент                         - <*>
//                                 - Клиент-получатель внешнего события.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВнешнееСобытие(Событие, Данные, Клиент) Экспорт

	Результат = мНетОшибки;

	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	События = Клиенты[Клиент];
	Если События <> Неопределено Тогда
		ТекСобытие = События.Найти(Событие, "ИмяСобытия");
		Если ТекСобытие <> Неопределено Тогда
			Оборудование = ПолучитьПараметрСервераТО("Оборудование",    "ТаблицаЗначений");
			ТО           = Оборудование.Найти(ТекСобытие.Идентификатор, "Идентификатор");
			ВидТО        = ТО.Вид;
			Обработка    = ТО.Обработка;
			Объект       = ТО.Объект;
			Результат = ОбработатьВнешнееСобытиеВнутр(ВидТО, Обработка, Объект,
													  Клиент, Событие, Данные,
													  ТекСобытие.Идентификатор);
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция возвращает список идентификаторов подключенных устройств заданного вида.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информацию о котором необходимо получить.
//
//  КассаККМ - <СправочникСсылка.КассыККМ>
//           - Касса ККМ, к которой подключено данное оборудование.
//             В случае, если данный параметр соответствует пустой ссылке,
//             будет возвращено всё торговое оборудование указанного вида.
//
// Возвращаемое значение:
//  <Массив> - Список идентификаторов устройств.
//
Функция ПолучитьСписокУстройств(Вид, КассаККМ = Неопределено) Экспорт

	НеЗаданаКассаККМ = НЕ ЗначениеЗаполнено(КассаККМ);

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|    РегТО.Идентификатор КАК Идентификатор
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Вид = &Вид
	|    И РегТО.Компьютер = &Компьютер
	|    И РегТО.Подключено
	|" + ?(НеЗаданаКассаККМ, "", "    И РегТО.КассаККМ = &КассаККМ"));
	Запрос.УстановитьПараметр("Вид"       , Вид);
	Запрос.УстановитьПараметр("Компьютер" , ПолучитьИмяКомпьютераТО());
	Если Не НеЗаданаКассаККМ Тогда
		Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	КонецЕсли;

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

	Возврат Результат;

КонецФункции // ПолучитьСписокУстройств()

// Функция возвращает представление экземпляра торгового оборудования, пригодное
// для отображения в интерфейсе пользователя.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор, представление которого запрашивается.
//
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Выходной параметр; после удачного завершения работы данной
//                                   функции данный параметр будет содержать вид торгового
//                                   оборудования, к которому принадлежит устройство, соответствующее
//                                   переданному идентификатору.
//
//  Представление                  - <Строка>
//                                 - Выходной параметр; после удачного завершения работы данной
//                                   функции данный параметр будет содержать представление экземпляра
//                                   торгового оборудования, соответствующее переданному
//                                   идентификатору.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПолучитьПредставлениеУстройства(Идентификатор, Вид, Представление) Экспорт

	Результат = мНетОшибки;
	Запрос    = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|    РегТО.Модель.Наименование КАК Наименование,
	|    РегТО.Вид                 КАК Вид
	|ИЗ
	|    РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|    РегТО.Идентификатор = &Идентификатор");
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		РезультатЗапроса = РезультатЗапроса.Выгрузить()[0];
		Вид              = РезультатЗапроса.Вид;
		Представление    = РезультатЗапроса.Наименование;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПредставлениеУстройства()

// Функция возвращает текущую версию API конфигурации для торгового оборудования.
//
// Возвращаемое значение:
//  Число.
//
Функция ПолучитьВерсиюAPIКонфигурацииТО() Экспорт

	Результат = 2.04;

	Возврат Результат;

КонецФункции // ПолучитьВерсиюAPIКонфигурацииТО()

// Функция, производящая отключение обработок обслуживания
// Применяется для переподключения вновь загруженных обработок обслуживания
Функция ОтключитьОбработкиОбслуживания() Экспорт

	Результат = Ложь;
	Клиенты = ПолучитьПараметрСервераТО("Клиенты", "Соответствие");
	Если Клиенты.Количество() = 0 Тогда
		мДанныеСервера =Неопределено;
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Функция получает и возвращает ссылку на элемент справочника ОбработкиОбслуживания
// из переданной в параметре "СправочникТО" ссылки на элемент справочника "ТорговоеОборудование"
Функция ПолучитьОбработкуОбслуживания(СправочникТО) Экспорт

	Результат = Неопределено;
	Обработка = Неопределено;

	Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СправочникТО, Обработка);
	Если ЗначениеЗаполнено(Результат) Тогда
		Обработка = Неопределено;

		ТекстОшибки = """" + СправочникТО.Модель + """: " + ПолучитьТекстОшибкиТО(Результат);
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат Обработка;

КонецФункции

// Вызывает у переданной обработки обслуживания функцию создания объекта драйвера
// "Модель" и "Параметры" - выходные параметры
Функция СоздатьОбъектДрайвера(ОбработкаОбслуживания, Модель, Параметры) Экспорт

	Объект    = Неопределено;
	Результат = Неопределено;
	Форма     = ОбработкаОбслуживания.ПолучитьФорму();

	Результат = Форма.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
	Если ЗначениеЗаполнено(Результат) ТОгда
		Объект = Неопределено;

		ТекстОшибки = """" + Модель + """:
		    |" + ПолучитьТекстОшибкиТО(Результат);
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат Объект;

КонецФункции

// Вызывает у обработки обслуживания функцию, получающую и открывающую форму настройки
// параметров модели ТО
Процедура НастроитьДрайвер(ОбработкаОбслуживания, Модель, Параметры) Экспорт

	Форма = ОбработкаОбслуживания.ПолучитьФорму();

	Форма.НастроитьОборудование(Модель, Параметры);

КонецПроцедуры

// Вызывает у обработки обслуживания функцию проверки настроенных параметров
Функция ТестДрайвера(ОбработкаОбслуживания, ОбъектОО) Экспорт

	Результат = Неопределено;
	Форма     = ОбработкаОбслуживания.ПолучитьФорму();
	
	ОбъектОО.ОписаниеОшибки = "";
	Результат = Форма.ТестУстройства(ОбъектОО);
	ДопИнфо = ОбъектОО.ОписаниеОшибки;
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекстОшибки = """" + ОбъектОО.Модель + """:
		    |" + ПолучитьТекстОшибкиТО(Результат);
		ТекстОшибки = ТекстОшибки + "
		    |" + ДопИнфо;
		Сообщить(ТекстОшибки, СтатусСообщения.Важное);
	КонецЕсли;

	Возврат Не ЗначениеЗаполнено(Результат)

КонецФункции

// Возвращает версию API, поддерживаемую обработкой обслуживания
Функция ПолучитьВерсиюAPIОбработкиОбслуживания(ОбработкаОбслуживания) Экспорт

	Форма = ОбработкаОбслуживания.ПолучитьФорму();

	Возврат ?(Форма.ПолучитьВерсиюAPI() <> 2.1, Форма.ПолучитьВерсиюAPI(), 2.01);

КонецФункции

// Возвращает структуру, содержащую необходимую информацию об обработке обслуживания
Функция ПолучитьОписаниеОбработкиОбслуживания(ОбработкаОбслуживания) Экспорт

	Форма = ОбработкаОбслуживания.ПолучитьФорму();
	
	Попытка
		ОписаниеОО = ОбработкаОбслуживания.ПолучитьОписание();
	Исключение
		ОписаниеОО = Новый Структура("Вид, СписокМоделей, Наименование, Описание, ВерсияОбработки, Идентификатор");
	КонецПопытки;

	Возврат ОписаниеОО;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ФР)

// Функция осуществляет печать чека для приходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаПКО(Идентификатор, Пароль, НомерЧека, НомерСмены,
                         ОписаниеПлатежа, СуммаНал, СуммаБезнал) Экспорт

	Результат = мНетОшибки;

	Результат = ПечатьЧекаПКОРКО(Идентификатор, Ложь, Пароль, НомерЧека, НомерСмены,
								 ОписаниеПлатежа, СуммаНал, СуммаБезнал);

	Возврат Результат;

КонецФункции // ПечатьЧекаПКО()

// Функция осуществляет печать чека для расходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаРКО(Идентификатор, Пароль, НомерЧека, НомерСмены,
                         ОписаниеПлатежа, СуммаНал, СуммаБезнал) Экспорт

	Результат = мНетОшибки;

	Результат = ПечатьЧекаПКОРКО(Идентификатор, Истина, Пароль, НомерЧека, НомерСмены,
		                             ОписаниеПлатежа, СуммаНал, СуммаБезнал);

	Возврат Результат;

КонецФункции // ПечатьЧекаРКО()

// Функция осуществляет печать чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеЧека                   - <ТаблицаЗначений>
//                                 - Описание чека. Таблица имеет следующие колонки:
//                                     Наименование - <Строка>
//                                                  - Наименование позиции.
//                                     НомерСекции  - <Число>
//                                                  - Номер секции.
//                                     Цена         - <Число>
//                                                  - Цена за единицу.
//                                     Количество   - <Число>
//                                                  - Количество единиц.
//                                     Скидка       - <Число>
//                                                  - Процент скидки (>0) или наценки (<0).
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
//  ПризнакВозврата                - <Булево>
//                                 - Признак необходимости печати чека на возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧека(Идентификатор, Пароль, НомерЧека, НомерСмены,
                   ОписаниеЧека, СуммаНал, СуммаБезнал, ПризнакВозврата) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОткрытьЧек(Объект, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, Истина);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Позиция = Неопределено;
			Для Каждого Позиция Из ОписаниеЧека Цикл
				ЗначениеСкидки = Позиция.Количество * Позиция.Цена * Позиция.Скидка * 0.01;
				СуммаСоСкидкой1С = Окр(Позиция.Количество * Позиция.Цена - ЗначениеСкидки, 2);
				СуммаСоСкидкойФР = Окр(Позиция.Количество * Позиция.Цена - Окр(ЗначениеСкидки, 2), 2);

				Если СуммаСоСкидкой1С = СуммаСоСкидкойФР Тогда
					Результат = Обработка.ПечататьСтроку(Объект,
												   Позиция.Наименование,
												   Позиция.Количество,
												   Позиция.Цена,
												   Позиция.Скидка,
												   Позиция.НомерСекции,
												   Позиция.СтавкаНДС);
				Иначе
					Результат = Обработка.ПечататьСтроку(Объект,
												   Позиция.Наименование,
												   1,
												   СуммаСоСкидкой1С,
												   0,
												   Позиция.НомерСекции,
												   Позиция.СтавкаНДС);
				КонецЕсли;

				Если ЗначениеЗаполнено(Результат) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
			КонецЕсли;
		КонецЕсли;

		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПечатьЧека()

// Функция осуществляет открытие чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ПризнакВозврата                - <Булево>
//                                 - Признак необходимости печати чека на возврат.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОткрытьЧек(Идентификатор, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, ФискальныйЧек = Истина) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОткрытьЧек(Объект, Пароль, ПризнакВозврата, НомерЧека, НомерСмены, ФискальныйЧек);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОткрытьЧек()

// Функция осуществляет печать строки чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  СтрокаЧека                     - <Структура>
//                                     Наименование - <Строка>
//                                                  - Наименование позиции.
//                                     НомерСекции  - <Число>
//                                                  - Номер секции.
//                                     Цена         - <Число>
//                                                  - Цена за единицу.
//                                     Количество   - <Число>
//                                                  - Количество единиц.
//                                     Скидка       - <Число>
//                                                  - Процент скидки (>0) или наценки (<0).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьСтрокиЧека(Идентификатор, СтрокаЧека) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ПечататьСтроку(Объект,
		                                 СтрокаЧека.Наименование,
		                                 СтрокаЧека.Количество,
		                                 СтрокаЧека.Цена,
		                                 СтрокаЧека.Скидка,
		                                 СтрокаЧека.НомерСекции,
		                                 СтрокаЧека.СтавкаНДС);

		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПечатьСтрокиЧека()

// Функция осуществляет закрытие чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ЗакрытьЧек(Идентификатор, СуммаНал, СуммаБезнал) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ЗакрытьЧек()

// Функция осуществляет отмену чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтменитьЧек(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.ОтменитьЧек(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтменитьЧек()

// Функция осуществляет аннулирование чека.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция АннулироватьЧек(Идентификатор) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.АннулироватьЧек(Объект);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // АннулироватьЧек()

// Функция осуществляет внесение суммы в ФР.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  Сумма                          - <Число>
//                                 - Вносимая (>0) или изымаемая (<0) сумма.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ВнестиСумму(Идентификатор, Пароль, Сумма) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.Сумма(Объект, Пароль, Сумма);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВнестиСумму()

// Функция осуществляет снятие отчёта без гашения.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтчетБезГашения(Идентификатор, Пароль) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.XОтчет(Объект, Пароль, Неопределено, Неопределено);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтчетБезГашения()

// Функция осуществляет снятие отчёта с гашением.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ОтчетСГашением(Идентификатор, Пароль) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека  = Неопределено;
		НомерСмены = Неопределено;
		Результат  = Обработка.ZОтчет(Объект, Пароль, НомерЧека, НомерСмены);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции // ОтчетСГашением()

// Функция осуществляет печать массива произвольных строк.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  МассивСтрокСлипЧека            - <Массив>
//                                 - Массив строк для печати на ФР.
//
//  ШиринаЧека                     - <Число>
//                                 - Указывает маскимальную ширину строки передаваемого текста.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьТекста(Идентификатор, МассивСтрокСлипЧека, ШиринаЧека) Экспорт

	Обработка = Неопределено;
	Объект    = Неопределено;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Результат = Обработка.НапечататьСтроки(Объект, МассивСтрокСлипЧека, ШиринаЧека);
		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Возврат Результат;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ API МЕХАНИЗМА РАБОТЫ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ККМ)

// Функция возвращает пароль кассира, заданный в текущих настройках пользователя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <Число> - Пароль кассира.
//
Функция ПолучитьПарольКассираККМ() Экспорт

	Результат = ПолучитьПарольККМ(Истина);

	Возврат Результат;

КонецФункции // ПолучитьПарольКассираККМ()

// Функция возвращает пароль администратора, заданный в текущих настройках пользователя.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  <Число> - Пароль администратора.
//
Функция ПолучитьПарольАдминистратораККМ() Экспорт

	Результат = ПолучитьПарольККМ(Ложь);

	Возврат Результат;

КонецФункции // ПолучитьПарольАдминистратораККМ()

///////////////////////////////////////////////////////////////////////////////
//// ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает пароль кассира или администратора ККМ.
//
// Параметры:
//  ПарольКассира - <Булево>
//                - Возвращать пароль кассира. Если данный параметр имеет
//                  значение Ложь, возвращается пароль администратора ККМ.
//
// Возвращаемое значение:
//  <Число>       - Пароль ККМ.
//
Функция ПолучитьПарольККМ(ПарольКассира)

	Результат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),
	                                        ?(ПарольКассира,
	                                        "ПарольКассираФискальногоРегистратора",
	                                        "ПарольАдминистратораФискальногоРегистратора"));

	Возврат Результат;

КонецФункции // ПолучитьПарольККМ()

// Функция осуществляет печать чека для приходного и расходного кассового ордера.
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор фискального регистратора.
//
//  ЭтоРКО                         - <Булево>
//                                 - Осуществляется печать чека из РКО.
//
//  Пароль                         - <Число>
//                                 - Пароль фискального регистратора.
//
//  НомерЧека                      - <Число>
//                                 - Выходной параметр; номер чека.
//
//  НомерСмены                     - <Число>
//                                 - Выходной параметр; номер смены.
//
//  ОписаниеПлатежа                - <ТаблицаЗначений>
//                                 - Описание платежа. Таблица имеет следующие колонки:
//                                     Заголовок - <Строка>
//                                               - Описание позиции платежа.
//                                     Сумма     - <Число>
//                                               - Сумма позиции платежа.
//                                     НДС       - <Число>
//                                               - Ставка НДС в %.
//
//  СуммаНал                       - <Число>
//                                 - Сумма наличными (принятая, или выданная).
//
//  СуммаБезнал                    - <Число>
//                                 - Сумма безналичными (принятая, или выданная).
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПечатьЧекаПКОРКО(Идентификатор, ЭтоРКО, Пароль, НомерЧека, НомерСмены,
                         ОписаниеПлатежа, СуммаНал, СуммаБезнал)

	Обработка = Неопределено;
	Объект    = Неопределено;
	ВремНомерЧека = 0;
	Результат = ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект);

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерОтдела = Неопределено;
		Результат   = Обработка.ПолучитьПараметрыНаличнойОплаты(Объект, НомерОтдела);

		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат = Обработка.ОткрытьЧек(Объект, Пароль, ЭтоРКО, ВремНомерЧека, НомерСмены, Истина);
			Если НЕ ЗначениеЗаполнено(Результат) Тогда
				Позиция = Неопределено;
				Для Каждого Позиция Из ОписаниеПлатежа Цикл
					Результат = Обработка.ПечататьСтроку(Объект,
					                                     Позиция.Заголовок,
					                                     1,
					                                     Позиция.Сумма,
					                                     0,
					                                     НомерОтдела,
					                                     Позиция.НДС);

					Если ЗначениеЗаполнено(Результат) Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;

				Если НЕ ЗначениеЗаполнено(Результат) Тогда
					Результат = Обработка.ЗакрытьЧек(Объект, СуммаНал, СуммаБезнал);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		мОписаниеОшибки = Объект.ОписаниеОшибки;
	Иначе
		мОписаниеОшибки = ПолучитьТекстОшибкиПодключенияТО("ФР");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		НомерЧека = ВремНомерЧека
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПечатьЧекаПКО()

// Функция возвращает параметр механизма работы с торговым оборудованием.
//
// Параметры:
//  ИмяПараметра  - <Строка>
//                - Имя необходимого параметра.
//
//  ТипПараметра  - <Строка>
//                - Имя типа необходимого параметра.
//
// Возвращаемое значение:
//  <*>           - Описание возвращаемого значения.
//
Функция ПолучитьПараметрСервераТО(ИмяПараметра, ТипПараметра)

	Если мДанныеСервера = Неопределено Тогда
		мДанныеСервера = Новый Структура();
	КонецЕсли;

	Результат = Неопределено;
	мДанныеСервера.Свойство(ИмяПараметра, Результат);
	Если Результат = Неопределено Тогда
		Результат = Новый(Тип(ТипПараметра));
		мДанныеСервера.Вставить(ИмяПараметра, Результат);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьПараметрСервераТО()

// Функция, при необходимости, подключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид подключаемого оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ПодключитьОборудование(Вид, Клиент)

	Результат = мНетОшибки;
	ПоследняяОшибка = мНетОшибки;

	ТО      = ПолучитьТО();
	Клиенты = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");

	СтруктураПоиска = Новый Структура("Вид", Вид);
	СтрокиТО        = ТО.НайтиСтроки(СтруктураПоиска);
	Если СтрокиТО.Количество() = 0 Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|    РегТО.Идентификатор       КАК Идентификатор,
		|    РегТО.Модель.Наименование КАК Наименование,
		|    РегТО.Модель              КАК Модель,
		|    РегТО.Параметры           КАК Параметры
		|ИЗ
		|    РегистрСведений.ТорговоеОборудование КАК РегТО
		|ГДЕ
		|    РегТО.Вид = &Вид
		|    И РегТО.Компьютер                      = &Компьютер
		|    И РегТО.Подключено
		|");
		Запрос.УстановитьПараметр("Вид"      , Вид);
		Запрос.УстановитьПараметр("Компьютер", ПолучитьИмяКомпьютераТО());
		СтрокиТО = Запрос.Выполнить().Выгрузить();
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Идентификатор = СтрокаТО.Идентификатор;
			Наименование  = СтрокаТО.Наименование;
			Обработка     = Неопределено;
			Параметры     = ?(ПустаяСтрока(СтрокаТО.Параметры),
			                  Новый Структура(),
			                  ЗначениеИзСтрокиВнутр(СтрокаТО.Параметры));
			Модель        = СтрокаТО.Модель.Модель;
			мМодельПодключаемогоТО = Модель;

			Результат = РаботаСТорговымОборудованием.ПолучитьОбработкуОбслуживанияТО(СтрокаТО.Модель, Обработка);
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;

			Объект    = Неопределено;
			Результат = Обработка.СоздатьОбъектДрайвера(Объект, Модель, Параметры);
			Если ЗначениеЗаполнено(Результат) Тогда
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;

			Результат = Обработка.Подключить(Объект);
			Если ЗначениеЗаполнено(Результат) Тогда
				мОписаниеОшибки = Объект.ОписаниеОшибки;
				Ошибка = ПолучитьТекстОшибкиТО(Результат);
				Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
				ПоследняяОшибка = Результат;
				Продолжить;
			КонецЕсли;

			Оборудование                             = ТО.Добавить();
			Оборудование.Вид                         = Вид;
			Оборудование.Ссылки                      = 1;
			Оборудование.Идентификатор               = Идентификатор;
			Оборудование.Наименование                = Наименование;
			Оборудование.Обработка                   = Обработка;
			Оборудование.Объект                      = Объект;
			Оборудование.ИмяИсточникаВнешнегоСобытия = Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(Объект);

			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = Обработка.ПолучитьОписаниеСобытий(Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(Вид,           "Вид");

			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
	Иначе
		СтрокаТО = Неопределено;
		Для Каждого СтрокаТО Из СтрокиТО Цикл
			Если СтрокаТО.Ссылки = 0 Тогда
				мМодельПодключаемогоТО = СтрокаТО.Объект.Модель;
				Результат = СтрокаТО.Обработка.Подключить(СтрокаТО.Объект);

				Если ЗначениеЗаполнено(Результат) Тогда
					мОписаниеОшибки = СтрокаТО.Объект.ОписаниеОшибки;
					Ошибка = ПолучитьТекстОшибкиТО(Результат);
					Сообщить(мМодельПодключаемогоТО + ": " + Ошибка, СтатусСообщения.Важное);
					ПоследняяОшибка = Результат;
					Продолжить;
				КонецЕсли;
				СтрокаТО.ИмяИсточникаВнешнегоСобытия = СтрокаТО.Обработка.ПолучитьИмяИсточникаВнешнегоСобытия(СтрокаТО.Объект);
			КонецЕсли;

			СообщенияКлиента = Клиенты[Клиент];
			Сообщения        = СтрокаТО.Обработка.ПолучитьОписаниеСобытий(СтрокаТО.Объект);
			Сообщения.Колонки.Добавить("Идентификатор");
			Сообщения.Колонки.Добавить("Вид");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Идентификатор, "Идентификатор");
			Сообщения.ЗаполнитьЗначения(СтрокаТО.Вид,           "Вид");

			Если НЕ ЗначениеЗаполнено(СообщенияКлиента) Тогда
				Клиенты[Клиент] = Сообщения;
			Иначе
				Для Каждого СтрокаТаблицыИсточника Из Сообщения Цикл
					СтрокаТаблицыПриемника = Клиенты[Клиент].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
				КонецЦикла;
			КонецЕсли;

			СтрокаТО.Ссылки = СтрокаТО.Ссылки + 1;
		КонецЦикла;
	КонецЕсли;

	Возврат ПоследняяОшибка;

КонецФункции // ПодключитьОборудование()

// Процедура, при необходимости, отключает торговое оборудование и устанавливает
// необходимые параметры.
//
// Параметры:
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется подключение.
//
Процедура ОтключитьОборудование(Клиент)

	ТО              = ПолучитьТО();
	Клиенты         = ПолучитьПараметрСервераТО("Клиенты",      "Соответствие");
	ВидТО           = Неопределено;
	СтруктураПоиска = Новый Структура("Вид");

	Для Каждого ВидТО Из Перечисления.ВидыТорговогоОборудования Цикл
		Если Клиент.ПоддерживаетсяВидТО(ВидТО) Тогда
			СтруктураПоиска.Вид = ВидТО;
			СтрокиТО            = ТО.НайтиСтроки(СтруктураПоиска);
			СтрокаТО            = Неопределено;
			Для Каждого СтрокаТО Из СтрокиТО Цикл
				Если      СтрокаТО.Ссылки = 1 Тогда
					СтрокаТО.Ссылки = 0;
					СтрокаТО.Обработка.Отключить(СтрокаТО.Объект);
				ИначеЕсли СтрокаТО.Ссылки > 1 Тогда
					СтрокаТО.Ссылки = СтрокаТО.Ссылки - 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	Клиенты.Удалить(Клиент);

КонецПроцедуры // ОтключитьОборудование()

// Функция осуществляет обработку внешнего события.
//
// Параметры:
//  Вид                            - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//                                 - Вид торгового оборудования.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания торгового оборудования.
//
//  Объект                         - <*>
//                                 - Объект, идентифицирующий драйвер торгового оборудования.
//
//  Клиент                         - <*>
//                                 - Клиент, для которого осуществляется обработка события.
//
//  Событие                        - <Строка>
//                                 - Имя события.
//
//  Данные                         - <Строка>
//                                 - Данные события.
//
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции.
//
Функция ОбработатьВнешнееСобытиеВнутр(Вид, Обработка, Объект, Клиент, Событие, Данные, Идентификатор)

	Результат = мНетОшибки;

	Если Вид = мФискальныйРегистратор Тогда
	
	КонецЕсли;

	мВнешнееСобытиеОбработано = Истина;

	Возврат Результат;

КонецФункции // ОбработатьВнешнееСобытиеВнутр()

// Функция осуществляет получение объекта драйвера торгового оборудования по идентификатору
//
// Параметры:
//  Идентификатор                  - <Строка>
//                                 - Идентификатор устройства.
//
//  Обработка                      - <ВнешняяОбработкаОбъект.*>
//                                 - Обработка обслуживания.
//
//  Объект                         - <*>
//                                 - Объект драйвера торгового оборудования.
//
// Возвращаемое значение:
//  <ПеречислениеСсылка.ТООшибки*> - Результат работы функции
//
Функция ПолучитьОбъектДрайвера(Идентификатор, Обработка, Объект)

	Результат = мНетОшибки;

	ТО = ПолучитьТО();

	Оборудование = ТО.Найти(Идентификатор, "Идентификатор");
	Если Оборудование = Неопределено Тогда
		Результат = мОшибкаНеизвестно;
	Иначе
		Обработка = Оборудование.Обработка;
		Объект    = Оборудование.Объект;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьОбъектДрайвера()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ РАБОТЫ С ОШИБКАМИ ТОРГОВОГО ОБОРУДОВАНИЯ

// Функция возвращает текст ошибки при работе с торговым оборудованием.
//
// Параметры:
//  Ошибка   - <ПеречислениеСсылка.ТООшибки*>
//           - Ошибка, описание которой необходимо получить.
//
// Возвращаемое значение:
//  <Строка> - Описание ошибки.
//
Функция ПолучитьТекстОшибкиТО(Ошибка) Экспорт

	Если НЕ ЗначениеЗаполнено(Ошибка) Тогда
		Результат = "";
		мОписаниеОшибки = "";
	Иначе
		Если Ошибка = мОшибкаНеизвестно Тогда
			Результат = мОписаниеОшибки;
			мОписаниеОшибки = "";
		Иначе
			МетаданныеОшибки = Ошибка.Метаданные();
			КомментарийОшибки = МетаданныеОшибки.ЗначенияПеречисления.Получить(Перечисления[МетаданныеОшибки.Имя].Индекс(Ошибка)).Комментарий;
			Если КомментарийОшибки = "" Тогда
				Результат = СокрЛП(Ошибка) + ".";
			Иначе
				Результат = СокрЛП(Ошибка) + "." + Символы.ПС + КомментарийОшибки;
			КонецЕсли;

			Если мОписаниеОшибки <> "" Тогда
				Результат = Результат + Символы.ПС + Символы.ПС + мОписаниеОшибки;
			КонецЕсли;
			
			мОписаниеОшибки = "";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПолучитьТекстОшибкиТО()

// Функция возвращает текст ошибки при работе с фискальными регистраторами.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
// Возвращаемое значение:
//  <Строка>  - Описание ошибки.
//
Функция ПолучитьТекстОшибкиФРТО(Ошибка) Экспорт

	Текст = ПолучитьТекстОшибкиТО(Ошибка);

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиФРТО()

Функция ПолучитьТекстОшибкиПодключенияТО(ТО) Экспорт

	Текст = "Драйвер " + ТО + " не загружен";

	Возврат Текст;

КонецФункции // ПолучитьТекстОшибкиККМOfflineТО()

// Функция возвращает строку c именем компьютера для нужд торгового оборудования.
//
// Возвращаемое значение:
//  Строка - имя компьютера для торгового оборудования.
//
Функция ПолучитьИмяКомпьютераТО() Экспорт

	Если мИмяКомпьютера = Неопределено Тогда
		мИмяКомпьютера = ВРег(ИмяКомпьютера());
	КонецЕсли;

	Возврат мИмяКомпьютера;

КонецФункции // ПолучитьИмяКомпьютераТО()

// Процедура завершает обработку внешнего события. Вызывается из модуля приложения.
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ЗавершитьОбработкуВнешнегоСобытия(Источник, Событие, Данные) Экспорт

	Оборудование = ПолучитьТО();
	ТО           = Оборудование.Найти(Источник, "ИмяИсточникаВнешнегоСобытия");
	Если  ТО <> Неопределено Тогда
		Обработка    = ТО.Обработка;
		Объект       = ТО.Объект;

		Обработка.СобытиеОбработано(Объект, мВнешнееСобытиеОбработано);
	КонецЕсли;
	мВнешнееСобытиеОбработано = Ложь;

КонецПроцедуры // ЗавершитьОбработкуВнешнегоСобытия()

///////////////////////////////////////////////////////////////////////////////
//// ЛОКАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТО()

	ТО = ПолучитьПараметрСервераТО("Оборудование", "ТаблицаЗначений");
	Если ТО.Колонки.Количество() = 0 Тогда
		ТО.Колонки.Добавить("Вид");
		ТО.Колонки.Добавить("Ссылки");
		ТО.Колонки.Добавить("Идентификатор");
		ТО.Колонки.Добавить("Наименование");
		ТО.Колонки.Добавить("Обработка");
		ТО.Колонки.Добавить("Объект");
		ТО.Колонки.Добавить("ИмяИсточникаВнешнегоСобытия");
	КонецЕсли;

	Возврат ТО;

КонецФункции

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ВидыТО = Перечисления.ВидыТорговогоОборудования;

мФискальныйРегистратор = ВидыТО.ФискальныйРегистратор;

мНетОшибки        = Перечисления.ТООшибкиОбщие.ПустаяСсылка();
мОшибкаНеизвестно = Перечисления.ТООшибкиОбщие.ОшибкаНеизвестно;

мМодельПодключаемогоТО = "";

мВнешнееСобытиеОбработано = Ложь;

мОписаниеОшибки = "";

#КонецЕсли