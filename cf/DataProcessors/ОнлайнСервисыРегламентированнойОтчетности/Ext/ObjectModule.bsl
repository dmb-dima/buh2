#Если ТолстыйКлиентОбычноеПриложение Тогда
	
Перем КэшСправочнойИнформации Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ИЗ ИНТЕРНЕТ, РАЗБОРА И СОХРАНЕНИЯ В ИБ
// СПРАВОЧНОЙ ИНФОРМАЦИИ МЕХАНИЗМА

Процедура АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРОПриНеобходимости() Экспорт
	
	НастройкиМеханизмаОнлайнСервисов = ПолучитьНастройкиМеханизмаОнлайнСервисовРО();
	
	// если механизм выключен, то прервемся
	Если НЕ НастройкиМеханизмаОнлайнСервисов.Использовать Тогда
		Возврат;
	КонецЕсли;
	
	// анализируем признак - разрешение доступа в Интернет
	Если НастройкиМеханизмаОнлайнСервисов.РазрешитьДоступВИнтернет = Неопределено
	ИЛИ НастройкиМеханизмаОнлайнСервисов.РазрешитьДоступВИнтернет = Ложь Тогда
		ВерсияРелизаНаКоторомДоступВИнтернетЗапрещен = ВосстановитьЗначение("ОнлайнСервисыРО_ДоступЗапрещенВерсияРелиза");
		Если ВерсияРелизаНаКоторомДоступВИнтернетЗапрещен <> Метаданные.Версия Тогда
			Если ЗапроситьПодтверждениеДоступаВИнтернет() <> Истина Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// обновляем информацию в локальном кэше
	ТекстОшибки = "";
	Если НЕ АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРО(ТекстОшибки) Тогда
		Если НастройкиМеханизмаОнлайнСервисов.УведомлятьОбОшибках И НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Сообщить(ТекстОшибки, СтатусСообщения.Важное);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция АктуализироватьСлужебнуюИнформациюМеханизмаОнлайнСервисовРО(ОписаниеОшибки = Неопределено) Экспорт
	
	// константы
	ИмяКлючевогоФайла					= "infomap.dat";
	РасширениеФайловНаСервере			= ".zip";
	
	ТипРесурсаСправочникФормИФорматов	= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов;
	ТипРесурсаСправочникРелизов			= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникРелизов;
	ТипРесурсаИнформацияОРелизе			= Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе;
	
	ИДРесурсаСправочникФормИФорматов	= "SFF";
	ИДРесурсаСправочникРелизов			= "IVS";
	
	ДатаПолученияРесурсов				= ТекущаяДата();
	
	// объявляем "таблицу-результат"
	ТаблицаАктуальныхРесурсов = Новый ТаблицаЗначений;
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("Тип");
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("Имя");
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("Данные");
	ТаблицаАктуальныхРесурсов.Колонки.Добавить("ДатаПолучения");
	
	
	// показываем окно "Подождите, пожалуйста..."
	ВремяОткрытияФормыПодождите = ТекущаяДата();
	ФормаПодождите = ПолучитьФорму("ИдетОбновлениеИнформацииМеханизмаОнлайнСервисов");
	ФормаПодождите.Открыть();
	
	
	// устанавливаем соединение с сервером
	Соединение = УстановитьСоединениеССерверомМеханизмаОнлайнСервисовРО( , ОписаниеОшибки);
	Если Соединение = Неопределено Тогда
		ОписаниеОшибки = "Ошибка установки соединения с сервером справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	
	// получаем ключевой файл
	ИмяВременногоКлючевогоФайла = ПолучитьРесурсССервера(Соединение, ИмяКлючевогоФайла, ОписаниеОшибки);
	Если ИмяВременногоКлючевогоФайла = Неопределено Тогда
		ОписаниеОшибки = "Ошибка получения ключевого файла с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	// считываем ключевой файл
	СодержимоеКлючевогоФайла = ПрочитатьТекстовыйФайл(ИмяВременногоКлючевогоФайла, ОписаниеОшибки, Истина);
	Если СодержимоеКлючевогоФайла = Неопределено Тогда
		ОписаниеОшибки = "Некорректный формат ключевого файла" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	// разбираем ключевой файл
	РезультатРазбораКлючевогоФайла = РазобратьСодержимоеКлючевогоФайла(СодержимоеКлючевогоФайла, ОписаниеОшибки);
	Если НЕ ЗначениеЗаполнено(РезультатРазбораКлючевогоФайла) Тогда
		ОписаниеОшибки = "Некорректный формат ключевого файла" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
		ФормаПодождите.Закрыть();
		Возврат Ложь;
	КонецЕсли;
	
	
	// получаем версии файлов, хранимых в ИБ, для сравнения с опубликованными на сервере
	ХранимаяВИБИнформация = ПолучитьХранимуюВИБИнформациюМеханизмаОнлайнСервисовРО();
	
	
	// актуализация справочника форм и форматов
	ИмяФайлаСправочникаФормаИФорматов = РезультатРазбораКлючевогоФайла[ИДРесурсаСправочникФормИФорматов];
	СвойстваХранимогоВИБСправочникаФормИФорматов = ХранимаяВИБИнформация[ТипРесурсаСправочникФормИФорматов];
	Если ИмяФайлаСправочникаФормаИФорматов <> Неопределено Тогда
		
		// получаем версию хранящейся в ИБ информации
		ИмяХранимогоВИБФайла = ?(СвойстваХранимогоВИБСправочникаФормИФорматов = Неопределено, Неопределено, СвойстваХранимогоВИБСправочникаФормИФорматов.Имя);
		
		Если ИмяФайлаСправочникаФормаИФорматов <> ИмяХранимогоВИБФайла Тогда
		
			// получаем файл с сервера
			ИмяВременногоФайлаСправочникаФормИФорматов = ПолучитьРесурсССервера(Соединение, ИмяФайлаСправочникаФормаИФорматов + РасширениеФайловНаСервере, ОписаниеОшибки);
			Если ИмяВременногоФайлаСправочникаФормИФорматов = Неопределено Тогда
				ОписаниеОшибки = "Ошибка получения файла справочника форм и форматов с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// распаковываем полученный файл
			РезультатРаспаковки = РаспаковатьФайл(ИмяВременногоФайлаСправочникаФормИФорматов, ОписаниеОшибки);
			Если НЕ РезультатРаспаковки Тогда
				ОписаниеОшибки = "Некорректный формат файла - справочника форм и форматов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// считываем содержимое
			СодержимоеСправочникаФормИФорматов = ПрочитатьТекстовыйФайл(ИмяВременногоФайлаСправочникаФормИФорматов, ОписаниеОшибки, Истина);
			Если СодержимоеСправочникаФормИФорматов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла - справочника форм и форматов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// загружаем XML в дерево
			ДеревоСправочникаФормИФорматов = ЗагрузитьСтрокуXMLВДеревоЗначений(СодержимоеСправочникаФормИФорматов, ОписаниеОшибки);
			Если ДеревоСправочникаФормИФорматов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника форм и форматов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// сохраняем полученную XML-строку в таблице-результате
			ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, ИмяФайлаСправочникаФормаИФорматов, СодержимоеСправочникаФормИФорматов, ДатаПолученияРесурсов);
			
		Иначе
			Если СвойстваХранимогоВИБСправочникаФормИФорматов = Неопределено Тогда
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, , , ДатаПолученияРесурсов);
			Иначе
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, СвойстваХранимогоВИБСправочникаФормИФорматов.Имя, СвойстваХранимогоВИБСправочникаФормИФорматов.Данные, СвойстваХранимогоВИБСправочникаФормИФорматов.ДатаПолучения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваХранимогоВИБСправочникаФормИФорматов = Неопределено Тогда
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, , , ДатаПолученияРесурсов);
	Иначе
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникФормИФорматов, , , ?(ЗначениеЗаполнено(СвойстваХранимогоВИБСправочникаФормИФорматов.Имя), ДатаПолученияРесурсов, СвойстваХранимогоВИБСправочникаФормИФорматов.ДатаПолучения));
	КонецЕсли;
	
	
	// актуализация справочника релизов
	ДеревоСправочникаРелизов = Неопределено;
	ИмяФайлаСправочникаРелизов = РезультатРазбораКлючевогоФайла[ИДРесурсаСправочникРелизов];
	СвойстваХранимогоВИБСправочникаРелизов = ХранимаяВИБИнформация[ТипРесурсаСправочникРелизов];
	Если ИмяФайлаСправочникаРелизов <> Неопределено Тогда
		
		// получаем версию хранящейся в ИБ информации
		ИмяХранимогоВИБФайла = ?(СвойстваХранимогоВИБСправочникаРелизов = Неопределено, Неопределено, СвойстваХранимогоВИБСправочникаРелизов.Имя);
		
		Если ИмяФайлаСправочникаРелизов <> ИмяХранимогоВИБФайла Тогда
		
			// получаем файл
			ИмяВременногоФайлаСправочникаРелизов = ПолучитьРесурсССервера(Соединение, ИмяФайлаСправочникаРелизов + РасширениеФайловНаСервере, ОписаниеОшибки);
			Если ИмяВременногоФайлаСправочникаРелизов = Неопределено Тогда
				ОписаниеОшибки = "Ошибка получения справочника релизов с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// распаковываем полученный файл
			РезультатРаспаковки = РаспаковатьФайл(ИмяВременногоФайлаСправочникаРелизов, ОписаниеОшибки);
			Если НЕ РезультатРаспаковки Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// считываем содержимое
			СодержимоеФайлаСправочникаРелизов = ПрочитатьТекстовыйФайл(ИмяВременногоФайлаСправочникаРелизов, ОписаниеОшибки, Истина);
			Если НЕ ЗначениеЗаполнено(СодержимоеФайлаСправочникаРелизов) Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// загружаем XML в дерево
			ДеревоСправочникаРелизов = ЗагрузитьСтрокуXMLВДеревоЗначений(СодержимоеФайлаСправочникаРелизов, ОписаниеОшибки);
			Если ДеревоСправочникаРелизов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
			
			// сохраняем полученную XML-строку в таблице-результате
			ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, ИмяФайлаСправочникаРелизов, СодержимоеФайлаСправочникаРелизов, ДатаПолученияРесурсов);
			
		Иначе
			Если СвойстваХранимогоВИБСправочникаРелизов = Неопределено Тогда
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, , , ДатаПолученияРесурсов);
			Иначе
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, СвойстваХранимогоВИБСправочникаРелизов.Имя, СвойстваХранимогоВИБСправочникаРелизов.Данные, СвойстваХранимогоВИБСправочникаРелизов.ДатаПолучения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваХранимогоВИБСправочникаРелизов = Неопределено Тогда
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, , , ДатаПолученияРесурсов);
	Иначе
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаСправочникРелизов, , , ?(ЗначениеЗаполнено(СвойстваХранимогоВИБСправочникаРелизов.Имя), ДатаПолученияРесурсов, СвойстваХранимогоВИБСправочникаРелизов.ДатаПолучения));
	КонецЕсли;
	
	
	// актуализация информации о текущем релизе
	СвойстваХранимогоВИБФайлаСИнформациейОРелизе = ХранимаяВИБИнформация[ТипРесурсаИнформацияОРелизе];
	СтрСправочникРелизов = ТаблицаАктуальныхРесурсов.Найти(ТипРесурсаСправочникРелизов, "Тип");
	Если СтрСправочникРелизов <> Неопределено И ЗначениеЗаполнено(СтрСправочникРелизов.Данные) Тогда
		
		// формируем дерево справочника релизов, если оно еще не было сформировано
		Если ДеревоСправочникаРелизов = Неопределено Тогда
			ДеревоСправочникаРелизов = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрСправочникРелизов.Данные, ОписаниеОшибки);
			Если ДеревоСправочникаРелизов = Неопределено Тогда
				ОписаниеОшибки = "Некорректный формат файла справочника релизов" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
				ФормаПодождите.Закрыть();
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ИмяФайлаСИнформациейОТекущемРелизе = ИзвлечьИмяФайлаСИнформациейОТекущемРелизеИзДереваСправочникаРелизов(ДеревоСправочникаРелизов);
		
		// получаем версию хранящейся в ИБ информации
		ИмяХранимогоВИБФайла = ?(СвойстваХранимогоВИБФайлаСИнформациейОРелизе = Неопределено, Неопределено, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Имя);
		
		Если ИмяФайлаСИнформациейОТекущемРелизе <> Неопределено Тогда
			
			Если ИмяФайлаСИнформациейОТекущемРелизе <> ИмяХранимогоВИБФайла Тогда
			
				// получаем файл
				ИмяВременногоФайлаСИнформациейОТекущемРелизе = ПолучитьРесурсССервера(Соединение, ИмяФайлаСИнформациейОТекущемРелизе + РасширениеФайловНаСервере, ОписаниеОшибки);
				Если ИмяВременногоФайлаСИнформациейОТекущемРелизе = Неопределено Тогда
					ОписаниеОшибки = "Ошибка получения информации о текущем релизе с сервера справочной информации" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
					ФормаПодождите.Закрыть();
					Возврат Ложь;
				КонецЕсли;
				
				// распаковываем полученный файл
				РезультатРаспаковки = РаспаковатьФайл(ИмяВременногоФайлаСИнформациейОТекущемРелизе, ОписаниеОшибки);
				Если НЕ РезультатРаспаковки Тогда
					ОписаниеОшибки = "Некорректный формат файла с информацией о текущем релизе" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
					ФормаПодождите.Закрыть();
					Возврат Ложь;
				КонецЕсли;
				
				// считываем содержимое
				СодержимоеФайлаСИнформациейОТекущемРелизе = ПрочитатьТекстовыйФайл(ИмяВременногоФайлаСИнформациейОТекущемРелизе, ОписаниеОшибки, Истина);
				Если НЕ ЗначениеЗаполнено(СодержимоеФайлаСИнформациейОТекущемРелизе) Тогда
					ОписаниеОшибки = "Некорректный формат файла с информацией о текущем релизе" + ?(ЗначениеЗаполнено(ОписаниеОшибки), ": " + ОписаниеОшибки, ".");
					ФормаПодождите.Закрыть();
					Возврат Ложь;
				КонецЕсли;
				
				// сохраняем полученную XML-строку в таблице-результате
				ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, ИмяФайлаСИнформациейОТекущемРелизе, СодержимоеФайлаСИнформациейОТекущемРелизе, ДатаПолученияРесурсов);
				
			Иначе
				Если СвойстваХранимогоВИБФайлаСИнформациейОРелизе = Неопределено Тогда
					ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ДатаПолученияРесурсов);
				Иначе
					ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Имя, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Данные, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.ДатаПолучения);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ДатаПолученияРесурсов);
		КонецЕсли;
		
	ИначеЕсли СвойстваХранимогоВИБФайлаСИнформациейОРелизе = Неопределено Тогда
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ДатаПолученияРесурсов);
	Иначе
		ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаАктуальныхРесурсов, ТипРесурсаИнформацияОРелизе, , , ?(ЗначениеЗаполнено(СвойстваХранимогоВИБФайлаСИнформациейОРелизе.Имя), ДатаПолученияРесурсов, СвойстваХранимогоВИБФайлаСИнформациейОРелизе.ДатаПолучения));
	КонецЕсли;
	
	
	// считываем информацию из кэша механизма
	НаборЗаписей = РегистрыСведений.РесурсыМеханизмаОнлайнСервисовРО.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	// перебираем имеющиеся записи и перезаписываем их новыми данными
	ЧислоЗаписей = НаборЗаписей.Количество();
	Для Инд = 0 По ЧислоЗаписей - 1 Цикл
		ТекЗапись = НаборЗаписей.Получить(Инд);
		ТекЗаписьТип = ТекЗапись.Тип;
		СтрТекТип = ТаблицаАктуальныхРесурсов.Найти(ТекЗаписьТип, "Тип");
		Если СтрТекТип <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекЗапись, СтрТекТип);
			ТаблицаАктуальныхРесурсов.Удалить(СтрТекТип);
		КонецЕсли;
	КонецЦикла;
	
	// добавляем новые записи
	Для Каждого Стр Из ТаблицаАктуальныхРесурсов Цикл
		НовСтр = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Стр);
	КонецЦикла;
	
	// записываем новый набор
	Если НаборЗаписей.Модифицированность() Тогда
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОписаниеОшибки = "Ошибка сохранения в информационной базе информации, полученной с сервера: " + ИнформацияОбОшибке().Описание;
			ФормаПодождите.Закрыть();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	
	// закрываем форму "Подождите, пожалуйста..." по истечении минимум 2 секунд после открытия
	Пока ТекущаяДата() - ВремяОткрытияФормыПодождите <= 2 Цикл
	КонецЦикла;
	ФормаПодождите.Закрыть();
	
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСоединениеССерверомМеханизмаОнлайнСервисовРО(ПараметрыСоединения = Неопределено, ОписаниеОшибки = Неопределено) Экспорт
	
	URLСервера = "downloads.1c.ru";
	
	Если ПараметрыСоединения = Неопределено Тогда
		НастройкиДоступаВИнтернет = ПолучитьНастройкиВыходаВИнтернетМеханизмаОнлайнСервисовРО();
	Иначе
		НастройкиДоступаВИнтернет = ПараметрыСоединения;
	КонецЕсли;
	
	Если НастройкиДоступаВИнтернет.ИспользоватьПрокси = Истина Тогда
		Попытка
			Прокси = Новый ИнтернетПрокси;
			Прокси.Пользователь	= НастройкиДоступаВИнтернет.ИмяПользователя;
			Прокси.Пароль		= НастройкиДоступаВИнтернет.Пароль;
		Исключение
			ОписаниеОшибки = ИнформацияОбОшибке().Описание;
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Прокси = Неопределено;
	КонецЕсли;
	
	Попытка
		Соединение = Новый HTTPСоединение(URLСервера, , , , Прокси);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Соединение;
	
КонецФункции

Функция ПолучитьРесурсССервера(Соединение, ИмяРесурсаНаСервере, ОписаниеОшибки = Неопределено) Экспорт
	
	ПутьККаталогуРесурсов = "/RO_OnlineServices/";
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	Попытка
		Соединение.Получить(ПутьККаталогуРесурсов + ИмяРесурсаНаСервере, ИмяВременногоФайла);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ИмяВременногоФайла;
	
КонецФункции

Функция ЗапроситьПодтверждениеДоступаВИнтернет()
	
	ФормаПодтверждения = ПолучитьФорму("ПодтверждениеВыходаВИнтернет");
	РезультатПоказа = ФормаПодтверждения.ОткрытьМодально();
	Если РезультатПоказа = Ложь Тогда
		Предупреждение("Запрос на доступ в Интернет будет выдан повторно после обновления релиза конфигурации.");
		СохранитьЗначение("ОнлайнСервисыРО_ДоступЗапрещенВерсияРелиза", Метаданные.Версия);
	КонецЕсли;
	Возврат РезультатПоказа;
	
КонецФункции

Функция ПолучитьХранимуюВИБИнформациюМеханизмаОнлайнСервисовРО()
	
	ДанныеМеханизма = ПолучитьДанныеМеханизмаОнлайнСервисовРО();
	
	Результат = Новый Соответствие;
	Для Каждого Стр Из ДанныеМеханизма Цикл
		Результат.Вставить(Стр.Тип, Новый Структура("Имя, Данные, ДатаПолучения", СокрЛП(Стр.Имя), СокрЛП(Стр.Данные), Стр.ДатаПолучения));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСтрокуВТаблицуАктуальныхРесурсов(ТаблицаРесурсов, Тип, Имя = "", Данные = "", ДатаПолучения = Неопределено)
	
	НовСтр = ТаблицаРесурсов.Добавить();
	НовСтр.Тип				= Тип;
	НовСтр.Имя				= Имя;
	НовСтр.Данные			= Данные;
	НовСтр.ДатаПолучения	= ?(ДатаПолучения = Неопределено, ТекущаяДата(), ДатаПолучения);
	
КонецПроцедуры

Функция ИзвлечьИмяФайлаСИнформациейОТекущемРелизеИзДереваСправочникаРелизов(ДеревоСправочникаРелизов)
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	// если формат "непонятный", то разбирать не будем
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоСправочникаРелизов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого Стр1 Из ДеревоСправочникаРелизов.Строки Цикл // уровень узла Файл
		Для Каждого Стр2 Из Стр1.Строки Цикл // уровень узла Платформа
			Если Стр2.Тип = "Э" И ТекущаяПлатформаСоответствуетУзлу(Стр2, ИнформацияОПрограмме.ВерсияПлатформы) Тогда
				Для Каждого Стр3 Из Стр2.Строки Цикл // уровень узла Конфигурация
					Если Стр3.Тип = "Э" И ТекущаяКонфигурацияСоответствуетУзлу(Стр3, ИнформацияОПрограмме) Тогда
						Для Каждого Стр4 Из Стр3.Строки Цикл // уровень узла Релиз
							Если Стр4.Тип = "Э" Тогда
								РезультатПоискаАтрибутаСВерсиейРелиза = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Верс", "А"));
								Если РезультатПоискаАтрибутаСВерсиейРелиза.Количество() = 0 Тогда
									Возврат Неопределено;
								КонецЕсли;
								ВерсияРелиза = СокрЛП(РезультатПоискаАтрибутаСВерсиейРелиза[0].Значение);
								Если ВерсияРелиза = ИнформацияОПрограмме.ВерсияКонфигурации Тогда
									РезультатПоискаАтрибутаСИменемФайла = Стр4.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Свед", "А"));
									Если РезультатПоискаАтрибутаСИменемФайла.Количество() = 0 Тогда
										Возврат Неопределено;
									КонецЕсли;
									УзелАтрибутСИменемФайла = РезультатПоискаАтрибутаСИменемФайла[0];
									Возврат ?(ЗначениеЗаполнено(УзелАтрибутСИменемФайла.Значение), СокрЛП(УзелАтрибутСИменемФайла.Значение), Неопределено);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция РазобратьСодержимоеКлючевогоФайла(Стр, ОписаниеОшибки = Неопределено)
	
	Результат = Новый Соответствие;
	Разделитель = "=";
	Для НомСтр = 1 По СтрЧислоСтрок(Стр) Цикл
		ТекСтр = СтрПолучитьСтроку(Стр, НомСтр);
		ВхождениеРазделителя = Найти(ТекСтр, Разделитель);
		Если ВхождениеРазделителя <> 0 Тогда
			СтрКлюч = СокрЛП(Лев(ТекСтр, ВхождениеРазделителя - 1));
			СтрЗначение = СокрЛП(Сред(ТекСтр, ВхождениеРазделителя + 1));
			Если ЗначениеЗаполнено(СтрКлюч) И ЗначениеЗаполнено(СтрЗначение) Тогда
				Результат.Вставить(СтрКлюч, СтрЗначение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ИЗ ИБ СПРАВОЧНОЙ ИНФОРМАЦИИ МЕХАНИЗМА

Функция ПолучитьДанныеМеханизмаОнлайнСервисовРО(ФильтрПоТипу = Неопределено, СДанными = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Тип,
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Имя,
	                      |	РесурсыМеханизмаОнлайнСервисовРО.ДатаПолучения";
	Если СДанными Тогда
		Запрос.Текст = Запрос.Текст + ",
	                      |	РесурсыМеханизмаОнлайнСервисовРО.Данные";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	                      |ИЗ
	                      |	РегистрСведений.РесурсыМеханизмаОнлайнСервисовРО КАК РесурсыМеханизмаОнлайнСервисовРО";
	Если ЗначениеЗаполнено(ФильтрПоТипу) Тогда
		Запрос.Текст = Запрос.Текст + "
		                  |ГДЕ
		                  |	РесурсыМеханизмаОнлайнСервисовРО.Тип В (&ТипыДанных)";
		Запрос.УстановитьПараметр("ТипыДанных", ФильтрПоТипу);
	КонецЕсли;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ВЕРСИЯМИ ПЛАТФОРМЫ, КОНФИГУРАЦИИ, ОТЧЕТОВ...

Функция ИДТекущейКонфигурацииСоответствуетШаблону(ИДТекущейКонфигурации, ИДКонфигурации) Экспорт
	
	Возврат ВРЕГ(СокрЛП(ИДТекущейКонфигурации)) = ВРЕГ(СокрЛП(ИДКонфигурации));
	
КонецФункции

Функция ТекущаяКонфигурацияСоответствуетУзлу(УзелКонфигурация, ИнформацияОПрограмме)
	
	РезультатПоискаАтрибута = УзелКонфигурация.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ИД", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ИДКонфигурацииУзла = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Если ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, ИДКонфигурацииУзла)
		ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, ИДКонфигурацииУзла) Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ТекущаяПлатформаСоответствуетУзлу(УзелПлатформа, ВерсияТекущейПлатформы)
	
	РезультатПоискаАтрибута = УзелПлатформа.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Верс", "А"));
	Если РезультатПоискаАтрибута.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		ШаблонВерсии = СокрЛП(РезультатПоискаАтрибута[0].Значение);
		Возврат ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии);
	КонецЕсли;
	
КонецФункции

Функция ВерсияТекущейПлатформыСоответствуетШаблону(ВерсияТекущейПлатформы, ШаблонВерсии) Экспорт
	
	МассивЧастейШаблона = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(ШаблонВерсии);
	МассивЧастейТекущейВерсии = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(ВерсияТекущейПлатформы);
	
	Для Инд = 0 По МассивЧастейШаблона.Количество() - 1 Цикл
		Если МассивЧастейТекущейВерсии.Количество() <= Инд Тогда
			Прервать;
		КонецЕсли;
		ТекущаяЧастьШаблона = МассивЧастейШаблона[Инд];
		ТекущаяЧастьТекущейВерсии = МассивЧастейТекущейВерсии[Инд];
		Если НЕ ЧастьВерсииСоответствуетЧастиШаблонаВерсии(ТекущаяЧастьТекущейВерсии, ТекущаяЧастьШаблона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ЧастьВерсииСоответствуетЧастиШаблонаВерсии(Знач ЧастьТекущейВерсии, Знач ЧастьШаблона)
	
	ЧастьТекущейВерсии = СокрЛП(ЧастьТекущейВерсии);
	ЧастьШаблона = СокрЛП(ЧастьШаблона);
	
	Если Лев(ЧастьШаблона, 1) <> "[" ИЛИ Прав(ЧастьШаблона, 1) <> "]" Тогда
		Возврат (ЧастьШаблона = ЧастьТекущейВерсии);
	КонецЕсли;
	
	ЧастьШаблона = СокрЛП(Сред(ЧастьШаблона, 2, СтрДлина(ЧастьШаблона) - 2));
	СоставляющиеЧастиШаблона = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(ЧастьШаблона, ",");
	Если СоставляющиеЧастиШаблона.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ИДПеременной = "X";
	Для Каждого Составляющее Из СоставляющиеЧастиШаблона Цикл
		Если ЗначениеЗаполнено(Составляющее) Тогда
			Если НЕ УсловиеВыполняется(Составляющее, ИДПеременной, ЧастьТекущейВерсии) Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция УсловиеВыполняется(Условие, ИДПеременной, ЗначениеПеременной)
	
	РезультатВычисления = Неопределено;
	Попытка
		РезультатВычисления = Вычислить(СтрЗаменить(Условие, ИДПеременной, ЗначениеПеременной));
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(РезультатВычисления) <> Тип("Булево") Тогда
		Возврат Ложь;
	Иначе
		Возврат РезультатВычисления;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВерсиюТекущейПлатформы()
	
	ОбъектСисИнфо = Новый СистемнаяИнформация;
	Возврат СокрЛП(ОбъектСисИнфо.ВерсияПриложения);
	
КонецФункции

Функция ИнформацияОРелизеСоответствуетТекущейПрограмме(Данные) Экспорт
	
	УзлыФайл = Данные.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Файл", "Э"));
	Если УзлыФайл.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелФайл = УзлыФайл[0];
	
	УзлыРелиз = УзелФайл.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
	Если УзлыРелиз.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УзелРелиз = УзлыРелиз[0];
	
	АтрибутыУзла = ПолучитьАтрибутыУзла(УзелРелиз);
	
	Если НЕ АтрибутыУзла.Свойство("Верс")
	 ИЛИ НЕ АтрибутыУзла.Свойство("Платф")
	 ИЛИ НЕ АтрибутыУзла.Свойство("ИД") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Если НЕ ВерсияТекущейПлатформыСоответствуетШаблону(ИнформацияОПрограмме.ВерсияПлатформы, АтрибутыУзла.Платф)
	 ИЛИ НЕ (ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, АтрибутыУзла.ИД)
	 	ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, АтрибутыУзла.ИД))
	 ИЛИ НЕ ИнформацияОПрограмме.ВерсияКонфигурации = АтрибутыУзла.Верс Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКраткуюВерсиюОтчета(ОбъектОтчет) Экспорт
	
	Если РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мВерсияОтчета") Тогда
		ПолнаяВерсияОтчета = ОбъектОтчет.мВерсияОтчета;
		КраткаяВерсия = ВыделитьКраткуюВерсиюОтчетаИзПолной(ПолнаяВерсияОтчета);
		Возврат ?(ЗначениеЗаполнено(КраткаяВерсия), КраткаяВерсия, Неопределено);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВыделитьКраткуюВерсиюОтчетаИзПолной(ПолнаяВерсияОтчета)
	
	Если НЕ ЗначениеЗаполнено(ПолнаяВерсияОтчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВхождениеПробела = Найти(ПолнаяВерсияОтчета, " ");
	Если ВхождениеПробела = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат СокрЛП(Сред(ПолнаяВерсияОтчета, ВхождениеПробела + 1));
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С XML

Функция ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки = Неопределено, ЧтениеXML = Неопределено, Знач ТекУзел = Неопределено) Экспорт
	
	ПерваяИтерация = (ТекУзел = Неопределено);
	Если ПерваяИтерация Тогда
		ТекУзел = СоздатьДеревоСтруктурыXML();
		Попытка
			ЧтениеXML = Новый ЧтениеXML;
			ЧтениеXML.УстановитьСтроку(СтрокаXML);
		Исключение
			ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	Попытка
		Пока ЧтениеXML.Прочитать() Цикл
			ТипУзла = ЧтениеXML.ТипУзла;
			Если ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				НовУзел = ТекУзел.Строки.Добавить();
				НовУзел.Имя = ЧтениеXML.Имя;
				НовУзел.Тип = "Э";
				НовУзел.Значение = ЧтениеXML.Значение;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					НовАтрибут = НовУзел.Строки.Добавить();
					НовАтрибут.Имя = ЧтениеXML.Имя;
					НовАтрибут.Тип = "А";
					НовАтрибут.Значение = ЧтениеXML.Значение;
				КонецЦикла;
				ЗагрузитьСтрокуXMLВДеревоЗначений(СтрокаXML, ОписаниеОшибки, ЧтениеXML, НовУзел);
			ИначеЕсли ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ОписаниеОшибки = "Ошибка разбора XML: " + ИнформацияОбОшибке().Описание + ".";
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПерваяИтерация Тогда
		Возврат ТекУзел;
	КонецЕсли;
	
КонецФункции

Функция СоздатьДеревоСтруктурыXML()
	
	ДеревоСтруктуры = Новый ДеревоЗначений;
	ДеревоСтруктуры.Колонки.Добавить("Имя");
	ДеревоСтруктуры.Колонки.Добавить("Тип");
	ДеревоСтруктуры.Колонки.Добавить("Значение");
	Возврат ДеревоСтруктуры;
	
КонецФункции

Функция ПолучитьАтрибутыУзла(Узел)
	
	УзлыАтрибуты = Узел.Строки.НайтиСтроки(Новый Структура("Тип", "А"));
	
	АтрибутыУзла = Новый Структура;
	Для Каждого УзелАтрибут Из УзлыАтрибуты Цикл
		АтрибутыУзла.Вставить(УзелАтрибут.Имя, УзелАтрибут.Значение);
	КонецЦикла;
	
	Возврат АтрибутыУзла;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ МЕХАНИЗМА И ИНФОРМАЦИЕЙ О ПРОГРАММЕ

Функция ПолучитьНастройкиМеханизмаОнлайнСервисовРО() Экспорт
	
	Результат = Новый Структура("Использовать, УведомлятьОбОшибках, РазрешитьДоступВИнтернет, ИспользоватьПрокси, ИмяПользователяПрокси, ПарольПрокси");
	
	// заполняем общие настройки
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Константы.ИспользоватьМеханизмОнлайнСервисовРО,
	                      |	Константы.УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО
	                      |ИЗ
	                      |	Константы КАК Константы");
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат.Использовать = Выборка.ИспользоватьМеханизмОнлайнСервисовРО;
		Результат.УведомлятьОбОшибках = Выборка.УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО;
	КонецЕсли;
	
	// заполняем индивидуальные настройки
	Результат.РазрешитьДоступВИнтернет	= ВосстановитьЗначение("ОнлайнСервисыРО_ОбновлениеИнформацииИзИнтернетРазрешено");
	Результат.ИспользоватьПрокси		= ВосстановитьЗначение("ОнлайнСервисыРО_ИспользоватьАвторизациюПрокси");
	Результат.ИмяПользователяПрокси		= ВосстановитьЗначение("ОнлайнСервисыРО_ИмяПользователяПрокси");
	Результат.ПарольПрокси				= ВосстановитьЗначение("ОнлайнСервисыРО_ПарольПользователяПрокси");
	
	Возврат Результат;
	
КонецФункции

Процедура СохранитьИндивидуальныеНастройкиМеханизмаОнлайнСервисовРО(ОбновлениеИнформацииИзИнтернетРазрешено = Неопределено, ИспользоватьАвторизациюПрокси = Неопределено, ИмяПользователяПрокси = Неопределено, ПарольПользователяПрокси = Неопределено) Экспорт
	
	Если ОбновлениеИнформацииИзИнтернетРазрешено <> Неопределено Тогда
		СохранитьЗначение("ОнлайнСервисыРО_ОбновлениеИнформацииИзИнтернетРазрешено",	ОбновлениеИнформацииИзИнтернетРазрешено);
		Если ОбновлениеИнформацииИзИнтернетРазрешено Тогда
			СохранитьЗначение("ОнлайнСервисыРО_ДоступЗапрещенВерсияРелиза",				Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьАвторизациюПрокси <> Неопределено Тогда
		СохранитьЗначение("ОнлайнСервисыРО_ИспользоватьАвторизациюПрокси",				ИспользоватьАвторизациюПрокси);
	КонецЕсли;
	
	Если ИмяПользователяПрокси <> Неопределено Тогда
		СохранитьЗначение("ОнлайнСервисыРО_ИмяПользователяПрокси",						ИмяПользователяПрокси);
	КонецЕсли;
	
	Если ПарольПользователяПрокси <> Неопределено Тогда
		СохранитьЗначение("ОнлайнСервисыРО_ПарольПользователяПрокси",					ПарольПользователяПрокси);
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьОбщиеНастройкиМеханизмаОнлайнСервисовРО(ИспользоватьМеханизмОнлайнСервисовРО = Неопределено, УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО = Неопределено) Экспорт
	
	Если ИспользоватьМеханизмОнлайнСервисовРО <> Неопределено ИЛИ УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО <> Неопределено Тогда
		КонстантыНабор = Константы.СоздатьНабор("ИспользоватьМеханизмОнлайнСервисовРО, УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО");
		Если ИспользоватьМеханизмОнлайнСервисовРО <> Неопределено Тогда
			КонстантыНабор.ИспользоватьМеханизмОнлайнСервисовРО = ИспользоватьМеханизмОнлайнСервисовРО;
		КонецЕсли;
		Если УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО <> Неопределено Тогда
			КонстантыНабор.УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО = УведомлятьОбОшибкахМеханизмаОнлайнСервисовРО;
		КонецЕсли;
		КонстантыНабор.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкиВыходаВИнтернетМеханизмаОнлайнСервисовРО() Экспорт
	
	Результат = Новый Структура("ИспользоватьПрокси, ИмяПользователя, Пароль");
	Результат.Вставить("ИспользоватьПрокси",	ВосстановитьЗначение("ОнлайнСервисыРО_ИспользоватьАвторизациюПрокси"));
	Результат.Вставить("ИмяПользователя",		ВосстановитьЗначение("ОнлайнСервисыРО_ИмяПользователяПрокси"));
	Результат.Вставить("Пароль",				ВосстановитьЗначение("ОнлайнСервисыРО_ПарольПользователяПрокси"));
	Возврат Результат;
	
КонецФункции

Функция МеханизмОнлайнСервисовВключен()
	
	Возврат Константы.ИспользоватьМеханизмОнлайнСервисовРО.Получить();
	
КонецФункции

Функция ИнформацияОПрограмме() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("ВерсияПлатформы",			ПолучитьВерсиюТекущейПлатформы());
	Результат.Вставить("ИмяМетаданныхКонфигурации",	СокрЛП(Метаданные.Имя));
	Результат.Вставить("ИДКонфигурации",			РегламентированнаяОтчетность.ИДКонфигурации());
	Результат.Вставить("ВерсияКонфигурации",		СокрЛП(Метаданные.Версия));
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПрочитатьТекстовыйФайл(ИмяФайла, ОписаниеОшибки, УдалятьПослеПрочтения = Ложь)
	
	Попытка
		ОбъектЧтение = Новый ЧтениеТекста(ИмяФайла);
		Результат = ОбъектЧтение.Прочитать();
		ОбъектЧтение.Закрыть();
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Результат = Неопределено;
	КонецПопытки;
	
	Если УдалятьПослеПрочтения Тогда
		УдалитьФайл(ИмяФайла);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РаспаковатьФайл(ФайлАрхива, ОписаниеОшибки = Неопределено)
	
	Попытка
		ЧтениеЗИП = Новый ЧтениеZipФайла;
		ЧтениеЗИП.Открыть(ФайлАрхива);
		Если ЧтениеЗИП.Элементы.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		ПервыйЭлементАрхива = ЧтениеЗИП.Элементы.Получить(0);
		ИмяПервогоФайлаАрхива = ПервыйЭлементАрхива.Имя;
		ВременныйКаталог = ПолучитьИмяВременногоФайла() + "\";
		СоздатьКаталог(ВременныйКаталог);
		ЧтениеЗИП.Извлечь(ПервыйЭлементАрхива, ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		ЧтениеЗИП.Закрыть();
		УдалитьФайл(ФайлАрхива);
		ПереместитьФайл(ВременныйКаталог + ИмяПервогоФайлаАрхива, ФайлАрхива);
		УдалитьФайл(ВременныйКаталог);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке().Описание;
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьФайл(ИмяФайла)
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С БЛОКИРОВКАМИ

Функция ПолучитьТаблицуБлокировокОбъектовРО()
	
	// пытаемся получить из кэша актуальную таблицу блокировок
	ИнформацияОРелизеСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе, Ложь);
	Если ИнформацияОРелизеСвед.Количество() > 0 Тогда
		ДанныеИзКэша = ПолучитьДанныеИзКэшаСправочнойИнформации(СокрЛП(ИнформацияОРелизеСвед[0].Имя), "Блокировки");
		Если ЗначениеЗаполнено(ДанныеИзКэша) Тогда
			Возврат ДанныеИзКэша;
		КонецЕсли;
	КонецЕсли;
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеТекущегоРелиза = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе);
	Если СтрДанныеТекущегоРелиза.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрИнформацияОТекущемРелизе = СтрДанныеТекущегоРелиза[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрИнформацияОТекущемРелизе) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрИнформацияОТекущемРелизе);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем - соответствует ли информация текущему релизу (возможно, в ИБ информация об одном из прошлых релизов)
	Если ИнформацияОРелизеСоответствуетТекущейПрограмме(ДеревоДанных) <> Истина Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаБлокировокОбъектовРО = ЗаполнитьТаблицуБлокировокОбъектовРОНаОсновеДереваИнформацииОТекущемРелизе(ДеревоДанных);
	СохранитьДанныеВКэшеСправочнойИнформации(СтрДанныеТекущегоРелиза[0].Имя, "Блокировки", ТаблицаБлокировокОбъектовРО);
	
	Возврат ТаблицаБлокировокОбъектовРО;
	
КонецФункции

Функция ПолучитьДанныеИзКэшаСправочнойИнформации(Имя, Тип)
	
	РезультатПоиска = КэшСправочнойИнформации.НайтиСтроки(Новый Структура("Имя, Тип", Имя, Тип));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатПоиска[0].Данные;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьДанныеВКэшеСправочнойИнформации(Имя, Тип, Данные)
	
	РезультатПоиска = КэшСправочнойИнформации.Найти(Тип, "Тип");
	Если РезультатПоиска <> Неопределено Тогда
		КэшСправочнойИнформации.Удалить(РезультатПоиска);
	КонецЕсли;
	
	НовСтр = КэшСправочнойИнформации.Добавить();
	НовСтр.Имя = Имя;
	НовСтр.Тип = Тип;
	НовСтр.Данные = Данные;
	
КонецПроцедуры

Функция ЗаполнитьТаблицуБлокировокОбъектовРОНаОсновеДереваИнформацииОТекущемРелизе(ИнформацияОТекущемРелизе)
	
	ТаблицаБлокировокОбъектовРО = СоздатьТаблицуБлокировокОбъектовРО();
	
	УзлыФайл = ИнформацияОТекущемРелизе.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Файл", "Э"));
	Если УзлыФайл.Количество() = 0 Тогда
		Возврат ТаблицаБлокировокОбъектовРО;
	КонецЕсли;
	УзелФайл = УзлыФайл[0];
	
	УзлыРелиз = УзелФайл.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
	Если УзлыРелиз.Количество() = 0 Тогда
		Возврат ТаблицаБлокировокОбъектовРО;
	КонецЕсли;
	УзелРелиз = УзлыРелиз[0];
	
	// заполняем блокировки объектов в составе конфигурации
	УзлыБлокировки = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Блки", "Э"));
	Если УзлыБлокировки.Количество() > 0 Тогда
		
		УзелБлокировки = УзлыБлокировки[0];
		Для Каждого УзелБлокировка Из УзелБлокировки.Строки Цикл
			Если УзелБлокировка.Имя = "Блк" ИЛИ УзелБлокировка.Тип = "Э" Тогда
				ЗаполнитьТаблицуБлокировокПоУзлуБлокировка(ТаблицаБлокировокОбъектовРО, УзелБлокировка, ИнформацияОПрограмме().ВерсияКонфигурации);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// заполняем блокировки внешних отчетов
	УзлыДочерниеВыпуски = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ДочВып", "Э"));
	Если УзлыДочерниеВыпуски.Количество() > 0 Тогда
		
		УзелДочерниеВыпуски = УзлыДочерниеВыпуски[0];
		Для Каждого УзелВыпуск Из УзелДочерниеВыпуски.Строки Цикл
			
			Если УзелВыпуск.Имя = "Вып" И УзелВыпуск.Тип = "Э" Тогда
				
				АтрибутыУзла = ПолучитьАтрибутыУзла(УзелВыпуск);
				ВерсияВыпуска = ?(АтрибутыУзла.Свойство("Верс") И ЗначениеЗаполнено(АтрибутыУзла.Верс), СокрЛП(АтрибутыУзла.Верс), Неопределено);
				
				УзлыБлокировки = УзелВыпуск.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Блки", "Э"));
				Если УзлыБлокировки.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				УзелБлокировки = УзлыБлокировки[0];
				
				Для Каждого УзелБлокировка Из УзелБлокировки.Строки Цикл
					Если УзелБлокировка.Имя = "Блк" ИЛИ УзелБлокировка.Тип = "Э" Тогда
						ЗаполнитьТаблицуБлокировокПоУзлуБлокировка(ТаблицаБлокировокОбъектовРО, УзелБлокировка, ВерсияВыпуска);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаБлокировокОбъектовРО;
	
КонецФункции

Процедура ЗаполнитьТаблицуБлокировокПоУзлуБлокировка(ТаблицаБлокировок, УзелБлокировка, ВерсияОбъекта)
	
	АтрибутыУзла = ПолучитьАтрибутыУзла(УзелБлокировка);
	
	БлокировкаЖесткая = (АтрибутыУзла.Свойство("Урвн") И АтрибутыУзла.Урвн = "1");
	БлокируемаяФункция = ?(АтрибутыУзла.Свойство("Фнкц"), ВРЕГ(СокрЛП(АтрибутыУзла.Фнкц)), "И");
	Комментарий = ?(АтрибутыУзла.Свойство("Кмнт"), СокрЛП(АтрибутыУзла.Кмнт), "");
	
	Для Каждого УзелОбъект Из УзелБлокировка.Строки Цикл
		Если УзелОбъект.Имя = "Обкт" И УзелОбъект.Тип = "Э" Тогда
			АтрибутыУзла = ПолучитьАтрибутыУзла(УзелОбъект);
			Если АтрибутыУзла.Свойство("Отч") И ЗначениеЗаполнено(АтрибутыУзла.Отч) Тогда
				
				ИмяОтчета = СокрЛП(АтрибутыУзла.Отч);
				ИмяФормы = ?(АтрибутыУзла.Свойство("Фрм") И ЗначениеЗаполнено(АтрибутыУзла.Фрм), СокрЛП(АтрибутыУзла.Фрм), Неопределено);
				
				НовСтр = ТаблицаБлокировок.Добавить();
				НовСтр.Версия = ВРЕГ(ВерсияОбъекта);
				НовСтр.Отчет = ?(ЗначениеЗаполнено(ИмяОтчета), ВРЕГ(ИмяОтчета), Неопределено);
				НовСтр.Форма = ?(ЗначениеЗаполнено(ИмяФормы), ВРЕГ(ИмяФормы), Неопределено);
				НовСтр.Функция = ?(ЗначениеЗаполнено(БлокируемаяФункция), ВРЕГ(БлокируемаяФункция), Неопределено);
				НовСтр.Жесткая = БлокировкаЖесткая;
				НовСтр.Комментарий = Комментарий;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьТаблицуБлокировокОбъектовРО()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Версия");
	Результат.Колонки.Добавить("Отчет");
	Результат.Колонки.Добавить("Форма");
	Результат.Колонки.Добавить("Функция");
	Результат.Колонки.Добавить("Жесткая");
	Результат.Колонки.Добавить("Комментарий");
	
	Результат.Индексы.Добавить("Версия");
	Результат.Индексы.Добавить("Отчет");
	Результат.Индексы.Добавить("Форма");
	Результат.Индексы.Добавить("Функция");
	
	Возврат Результат;
	
КонецФункции

Функция ПоказатьУведомлениеОБлокировке(Объект, СвойстваБлокировки)
	
	ФормаУведомлениеОБлокировке = ПолучитьФорму("УведомлениеОБлокировке");
	ФормаУведомлениеОБлокировке.ЗапретНаПродолжение = СвойстваБлокировки.Жесткая;
	ФормаУведомлениеОБлокировке.Объект = Объект;
	ФормаУведомлениеОБлокировке.БлокируемаяФункция = СвойстваБлокировки.Функция;
	ФормаУведомлениеОБлокировке.ТекстПодробнее = СвойстваБлокировки.Комментарий;
	Возврат ФормаУведомлениеОБлокировке.ОткрытьМодально();
	
КонецФункции

Функция ПредставлениеОбъектаБлокировки(Объект) Экспорт
	
	ПредставлениеОтчета = СокрЛП(Объект.Метаданные().Синоним) + ".";
	Если ТипЗнч(Объект) = Тип("Форма") Тогда
		
		ПредставлениеФормы = Неопределено;
		Если РегламентированнаяОтчетность.СвойствоОпределено(Объект, "мВыбраннаяФорма") И РегламентированнаяОтчетность.СвойствоОпределено(Объект, "мТаблицаФормОтчета") Тогда
			РезультатПоиска = Объект.мТаблицаФормОтчета.Найти(Объект.мВыбраннаяФорма, "ФормаОтчета");
			Если РезультатПоиска <> Неопределено Тогда
				ПредставлениеФормы = РезультатПоиска.ОписаниеОтчета;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеФормы) Тогда
			Если РегламентированнаяОтчетность.СвойствоОпределено(Объект, "мДатаНачалаПериодаОтчета") И РегламентированнаяОтчетность.СвойствоОпределено(Объект, "мДатаКонцаПериодаОтчета") Тогда
				ДатаНачалаПериодаОтчета = Объект.мДатаНачалаПериодаОтчета;
				ДатаКонцаПериодаОтчета = Объект.мДатаКонцаПериодаОтчета;
				Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) Тогда
					ПредставлениеФормы = "за период " + ПредставлениеПериода(НачалоДня(ДатаНачалаПериодаОтчета), КонецДня(ДатаКонцаПериодаОтчета), "ФП = Истина");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ПредставлениеФормы) Тогда
			Возврат ПредставлениеОтчета;
		Иначе
			Возврат ПредставлениеОтчета + "<BR>" + СокрЛП(ПредставлениеФормы) + ".";
		КонецЕсли;
		
	Иначе
		Возврат ПредставлениеОтчета;
	КонецЕсли;
	
КонецФункции

Функция ПроверкаОнлайнБлокировки(Объект, БлокируемаяФункция = "И") Экспорт
	
	Если НЕ МеханизмОнлайнСервисовВключен() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВерсияОтчета = ПолучитьКраткуюВерсиюОтчета(Объект);
	ВерсияВыпуска = ВРЕГ(?(ЗначениеЗаполнено(ВерсияОтчета), ВерсияОтчета, ИнформацияОПрограмме().ВерсияКонфигурации));
	
	ИДОтчета = ВРЕГ(Объект.Метаданные().Имя);
	
	Если ТипЗнч(Объект) = Тип("Форма") Тогда
		Если РегламентированнаяОтчетность.СвойствоОпределено(Объект, "мВыбраннаяФорма") И ЗначениеЗаполнено(Объект.мВыбраннаяФорма) Тогда
			ИДФормы = ВРЕГ(Объект.мВыбраннаяФорма);
		ИначеЕсли РегламентированнаяОтчетность.СвойствоОпределено(Объект, "мСохраненныйДок") И ЗначениеЗаполнено(Объект.мСохраненныйДок) И ЗначениеЗаполнено(Объект.мСохраненныйДок.ВыбраннаяФорма) Тогда
			ИДФормы = ВРЕГ(Объект.мСохраненныйДок.ВыбраннаяФорма);
		Иначе
			ИДФормы = Неопределено;
		КонецЕсли;
	Иначе
		ИДФормы = Неопределено;
	КонецЕсли;
	
	ТаблицаБлокировок = ПолучитьТаблицуБлокировокОбъектовРО();
	Если НЕ ЗначениеЗаполнено(ТаблицаБлокировок) Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрБлокировкиОтчета = ТаблицаБлокировок.НайтиСтроки(Новый Структура("Версия, Отчет, Форма, Функция", ВерсияВыпуска, ИДОтчета, ИДФормы, БлокируемаяФункция));
	Если ЗначениеЗаполнено(ИДФормы) Тогда
		СтрБлокировкиОтчетаДоп = ТаблицаБлокировок.НайтиСтроки(Новый Структура("Версия, Отчет, Форма, Функция", ВерсияВыпуска, ИДОтчета, Неопределено, БлокируемаяФункция));
		Для Каждого СтрБлокировкаОтчетаДоп Из СтрБлокировкиОтчетаДоп Цикл
			СтрБлокировкиОтчета.Добавить(СтрБлокировкаОтчетаДоп);
		КонецЦикла;
	КонецЕсли;
	
	ЧислоБлокировокОтчета = СтрБлокировкиОтчета.Количество();
	Если ЧислоБлокировокОтчета = 0 Тогда
		Возврат Истина;
	ИначеЕсли ЧислоБлокировокОтчета = 1 Тогда
		СтрБлокировкаОтчета = СтрБлокировкиОтчета[0];
	Иначе // если блокировок несколько, то приоритетной является жесткая или, если жесткие отсутствуют, то последняя в списке
		СтрБлокировкаОтчета = СтрБлокировкиОтчета[0];
		Для Каждого Стр Из СтрБлокировкиОтчета Цикл
			Если Стр.Жесткая Тогда
				СтрБлокировкаОтчета = Стр;
			ИначеЕсли НЕ СтрБлокировкаОтчета.Жесткая Тогда
				СтрБлокировкаОтчета = Стр;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПоказатьУведомлениеОБлокировке(Объект, СтрБлокировкаОтчета);
	
КонецФункции

Функция ОбработатьДеревоФормИФорматовОтчета(Узел)
	
	ПоляДляОбработки = Новый Массив;
	ПоляДляОбработки.Добавить("Код");
	ПоляДляОбработки.Добавить("НомерПриказа");
	ПоляДляОбработки.Добавить("ИмяОбъекта");
	
	Для Каждого Стр Из Узел.Строки Цикл
		Для Каждого ПолеДляОбработки Из ПоляДляОбработки Цикл
			Если ЗначениеЗаполнено(Стр[ПолеДляОбработки]) Тогда
				Стр[ПолеДляОбработки] = ВРЕГ(Стр[ПолеДляОбработки]);
			КонецЕсли;
		КонецЦикла;
		ОбработатьДеревоФормИФорматовОтчета(Стр);
	КонецЦикла;
	
КонецФункции

Функция ПроверкаФормыПоПериодуПрименения(Форма) Экспорт
	
	// если механизм выключен, то прервем проверку
	Если НЕ МеханизмОнлайнСервисовВключен() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получаем таблицу периодов применения форм
	ТаблицаПериодовПримененияФорм = ПолучитьТаблицуПериодовПримененияФорм();
	Если ТаблицаПериодовПримененияФорм = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектОтчет = Форма.ЭтотОбъект;
	
	// получаем период отчета
	Если НЕ РегламентированнаяОтчетность.СвойствоОпределено(Форма, "мДатаНачалаПериодаОтчета") ИЛИ НЕ РегламентированнаяОтчетность.СвойствоОпределено(Форма, "мДатаКонцаПериодаОтчета") Тогда
		Возврат Истина;
	КонецЕсли;
	ДатаКонцаПериодаОтчета = Форма.мДатаКонцаПериодаОтчета;
	
	// получаем имя формы
	Если НЕ РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мВыбраннаяФорма") И НЕ РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мСохраненныйДок") Тогда
		Возврат Истина;
	ИначеЕсли РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мВыбраннаяФорма") И ЗначениеЗаполнено(ОбъектОтчет.мВыбраннаяФорма) Тогда
		ИмяФормы = ОбъектОтчет.мВыбраннаяФорма;
	ИначеЕсли РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мСохраненныйДок") И РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет.мСохраненныйДок, "ВыбраннаяФорма") И ЗначениеЗаполнено(ОбъектОтчет.мСохраненныйДок.ВыбраннаяФорма) Тогда
		ИмяФормы = ОбъектОтчет.мСохраненныйДок.ВыбраннаяФорма;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получаем дерево форм и форматов отчета
	Если НЕ РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мФормыИФорматы") Тогда
		Возврат Истина;
	КонецЕсли;
	ДеревоФормИФорматовОтчета = ОбъектОтчет.мФормыИФорматы;
	
	// приводим ключевые строковые поля дерева к верхнему регистру
	ОбработатьДеревоФормИФорматовОтчета(ДеревоФормИФорматовОтчета);
	
	// если одно из ключевых свойств отчета не заполнено, то прерываем проверку
	Если НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета)
	ИЛИ НЕ ЗначениеЗаполнено(ИмяФормы)
	ИЛИ НЕ ЗначениеЗаполнено(ДеревоФормИФорматовОтчета) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// ищем в дереве форму, соответствующую реализованной в проверяемом объекте
	РезультатПоиска = ДеревоФормИФорматовОтчета.Строки.НайтиСтроки(Новый Структура("ИмяОбъекта", ВРЕГ(ИмяФормы)));
	ЧислоРезультатовПоиска = РезультатПоиска.Количество();
	Если ЧислоРезультатовПоиска = 0 Тогда
		Возврат Истина;
	ИначеЕсли ЧислоРезультатовПоиска = 1 Тогда
		СтрФорма = РезультатПоиска[0];
	Иначе
		СтрФорма = Неопределено;
		Для Каждого Стр Из РезультатПоиска Цикл
			ДатаНачалаПериодаПримененияФормы = НачалоДня(Стр.ДатаНачалаДействия);
			ДатаКонцаПериодаПримененияФормы = КонецДня(?(ЗначениеЗаполнено(Стр.ДатаОкончанияДействия), Стр.ДатаОкончанияДействия, '39991231'));
			Если ДатаКонцаПериодаОтчета >= ДатаНачалаПериодаПримененияФормы И ДатаКонцаПериодаОтчета <= ДатаКонцаПериодаПримененияФормы Тогда
				СтрФорма = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// если в дереве форм и форматов отчета не найдена строка, соответствующая форме, реализованной в проверяемом объекте, то прервем проверку
	Если СтрФорма = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// извлекаем дату, номер приказа и код формы
	ДатаПриказаФормы = СтрФорма.ДатаПриказа;
	НомерПриказаФормы = СтрФорма.НомерПриказа;
	КодФормы = СтрФорма.Код;
	
	// проверяем форму на применимость в указанном периоде
	ПараметрыДиалогаБлокировки = Неопределено;
	Если ФормаПрименимаВУказанномПериоде(ТаблицаПериодовПримененияФорм, КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// показываем диалог пользователю
	Возврат ПоказатьУведомлениеОБлокировкеУтвержденнойФормы(Форма, ПараметрыДиалогаБлокировки);
	
КонецФункции

Функция ПроверкаФорматаПоПериодуПрименения(Форма) Экспорт
	
	// если механизм выключен, то прервем проверку
	Если НЕ МеханизмОнлайнСервисовВключен() Тогда
		Возврат Истина;
	КонецЕсли;
	
	// получаем таблицу периодов применения форм
	ТаблицаПериодовПримененияФорматов = ПолучитьТаблицуПериодовПримененияФорматов();
	Если ТаблицаПериодовПримененияФорматов = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектОтчет = Форма.ЭтотОбъект;
	
	// получаем период отчета
	Если НЕ РегламентированнаяОтчетность.СвойствоОпределено(Форма, "мДатаНачалаПериодаОтчета") ИЛИ НЕ РегламентированнаяОтчетность.СвойствоОпределено(Форма, "мДатаКонцаПериодаОтчета") Тогда
		Возврат Истина;
	КонецЕсли;
	ДатаКонцаПериодаОтчета = Форма.мДатаКонцаПериодаОтчета;
	
	// получаем имя формы
	Если НЕ РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мВыбраннаяФорма") И НЕ РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мСохраненныйДок") Тогда
		Возврат Истина;
	ИначеЕсли РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мВыбраннаяФорма") И ЗначениеЗаполнено(ОбъектОтчет.мВыбраннаяФорма) Тогда
		ИмяФормы = ОбъектОтчет.мВыбраннаяФорма;
	ИначеЕсли РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мСохраненныйДок") И РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет.мСохраненныйДок, "ВыбраннаяФорма") И ЗначениеЗаполнено(ОбъектОтчет.мСохраненныйДок.ВыбраннаяФорма) Тогда
		ИмяФормы = ОбъектОтчет.мСохраненныйДок.ВыбраннаяФорма;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ИмяФормы) Тогда
		Возврат Истина;
	КонецЕсли;
	ИмяФормы = ВРЕГ(ИмяФормы);
	
	// получаем дерево форм и форматов отчета
	Если НЕ РегламентированнаяОтчетность.СвойствоОпределено(ОбъектОтчет, "мФормыИФорматы") Тогда
		Возврат Истина;
	КонецЕсли;
	ДеревоФормИФорматовОтчета = ОбъектОтчет.мФормыИФорматы;
	
	// приводим ключевые строковые поля дерева к верхнему регистру
	ОбработатьДеревоФормИФорматовОтчета(ДеревоФормИФорматовОтчета);
	
	// если одно из ключевых свойств отчета не заполнено, то прерываем проверку
	Если НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета)
	ИЛИ НЕ ЗначениеЗаполнено(ИмяФормы)
	ИЛИ НЕ ЗначениеЗаполнено(ДеревоФормИФорматовОтчета) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// ищем в дереве форму, соответствующую реализованной в проверяемом объекте
	
	СтрФорма = Неопределено;
	РезультатПоиска = ДеревоФормИФорматовОтчета.Строки.НайтиСтроки(Новый Структура("ИмяОбъекта", ИмяФормы));
	ЧислоРезультатовПоиска = РезультатПоиска.Количество();
	Если ЧислоРезультатовПоиска = 0 Тогда
		Возврат Истина;
	ИначеЕсли ЧислоРезультатовПоиска = 1 Тогда
		СтрФорма = РезультатПоиска[0];
	Иначе
		СтрФорма = Неопределено;
		Для Каждого Стр Из РезультатПоиска Цикл
			ДатаНачалаПериодаПримененияФормы = НачалоДня(Стр.ДатаНачалаДействия);
			ДатаКонцаПериодаПримененияФормы = КонецДня(?(ЗначениеЗаполнено(Стр.ДатаОкончанияДействия), Стр.ДатаОкончанияДействия, '39991231'));
			Если ДатаКонцаПериодаОтчета >= ДатаНачалаПериодаПримененияФормы И ДатаКонцаПериодаОтчета <= ДатаКонцаПериодаПримененияФормы Тогда
				СтрФорма = Стр;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// если в дереве форм и форматов отчета не найдена строка, соответствующая форме, реализованной в проверяемом объекте, то прервем проверку
	Если СтрФорма = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрФормат = Неопределено;
	Для Каждого ЭлФормат Из СтрФорма.Строки Цикл
		ДатаНачалаПериодаПримененияФормата = НачалоДня(ЭлФормат.ДатаНачалаДействия);
		ДатаКонцаПериодаПримененияФормата = КонецДня(?(ЗначениеЗаполнено(ЭлФормат.ДатаОкончанияДействия), ЭлФормат.ДатаОкончанияДействия, '39991231'));
		Если ДатаКонцаПериодаОтчета >= ДатаНачалаПериодаПримененияФормата И ДатаКонцаПериодаОтчета <= ДатаКонцаПериодаПримененияФормата Тогда
			СтрФормат = ЭлФормат;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрФормат = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	// извлекаем дату, номер приказа и код формы
	ДатаПриказаФормы = ?(ЗначениеЗаполнено(СтрФорма.ДатаПриказа), СтрФорма.ДатаПриказа, Неопределено);
	НомерПриказаФормы = СтрФорма.НомерПриказа;
	КодФормы = СтрФорма.Код;
	
	// извлекаем версию, дату и номер приказа формата
	ВерсияФормата = ВРЕГ(СокрЛП(СтрФормат.Код));
	ДатаПриказаФормат = ?(ЗначениеЗаполнено(СтрФормат.ДатаПриказа), СтрФормат.ДатаПриказа, Неопределено);
	НомерПриказаФормат = ?(ЗначениеЗаполнено(СтрФормат.НомерПриказа), ВРЕГ(СокрЛП(СтрФормат.НомерПриказа)), Неопределено);
	
	// проверяем форму на применимость в указанном периоде
	ПараметрыДиалогаБлокировки = Неопределено;
	Если ФорматПрименимВУказанномПериоде(ТаблицаПериодовПримененияФорматов, КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ВерсияФормата, ДатаПриказаФормат, НомерПриказаФормат, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// показываем диалог пользователю
	Возврат ПоказатьУведомлениеОБлокировкеУтвержденногоФормата(Форма, ПараметрыДиалогаБлокировки);
	
КонецФункции

Функция ПоказатьУведомлениеОБлокировкеУтвержденнойФормы(Объект, ПараметрыДиалогаБлокировки)
	
	ФормаУведомлениеОБлокировке = ПолучитьФорму("УведомлениеОБлокировкеФормыИЛИФормата");
	ФормаУведомлениеОБлокировке.Объект = Объект;
	ФормаУведомлениеОБлокировке.ЗапретНаПродолжение = ПараметрыДиалогаБлокировки.Жесткая;
	ФормаУведомлениеОБлокировке.ТекстЗаголовок = ПараметрыДиалогаБлокировки.Заголовок;
	ФормаУведомлениеОБлокировке.ТекстПодробнее = ПараметрыДиалогаБлокировки.Подробно;
	ФормаУведомлениеОБлокировке.ЗаменяющийДокумент = ПараметрыДиалогаБлокировки.ЗаменяющийДокумент;
	ФормаУведомлениеОБлокировке.БлокировкаФормы = Истина;
	Возврат ФормаУведомлениеОБлокировке.ОткрытьМодально();
	
КонецФункции

Функция ПоказатьУведомлениеОБлокировкеУтвержденногоФормата(Объект, ПараметрыДиалогаБлокировки)
	
	ФормаУведомлениеОБлокировке = ПолучитьФорму("УведомлениеОБлокировкеФормыИЛИФормата");
	ФормаУведомлениеОБлокировке.Объект = Объект;
	ФормаУведомлениеОБлокировке.ЗапретНаПродолжение = ПараметрыДиалогаБлокировки.Жесткая;
	ФормаУведомлениеОБлокировке.ТекстЗаголовок = ПараметрыДиалогаБлокировки.Заголовок;
	ФормаУведомлениеОБлокировке.ТекстПодробнее = ПараметрыДиалогаБлокировки.Подробно;
	ФормаУведомлениеОБлокировке.ЗаменяющийДокумент = ПараметрыДиалогаБлокировки.ЗаменяющийДокумент;
	ФормаУведомлениеОБлокировке.БлокировкаФормы = Ложь;
	Возврат ФормаУведомлениеОБлокировке.ОткрытьМодально();
	
КонецФункции

Функция ФормаПрименимаВУказанномПериоде(ТаблицаПериодовПримененияФорм, КодФормы, ДатаПриказа, НомерПриказа, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки)
	
	РезультатПоиска = ТаблицаПериодовПримененияФорм.НайтиСтроки(Новый Структура("Код, ДатаПриказа, НомерПриказа", КодФормы, ДатаПриказа, НомерПриказа));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрРезультатПоиска = РезультатПоиска[0];
	
	Если ЗначениеЗаполнено(СтрРезультатПоиска.ДатаНачала) ИЛИ ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания) Тогда
		ДатаНачалаПрименимостиФормы = НачалоДня(СтрРезультатПоиска.ДатаНачала);
		ДатаКонцаПрименимостиФормы = КонецДня(?(ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания), СтрРезультатПоиска.ДатаОкончания, '39991231'));
	Иначе
		ДатаНачалаПрименимостиФормы = '00010101';
		ДатаКонцаПрименимостиФормы = '00010101';
	КонецЕсли;
	
	СтрЗаголовок = "Форма в редакции:" + Символы.ПС + СокрЛП(СтрРезультатПоиска.ПредставлениеПриказа) + Символы.ПС + "за период составления отчета более не применяется.";
	
	Если ДатаКонцаПериодаОтчета < ДатаНачалаПрименимостиФормы Тогда
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаНачалаСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаНачалаСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", СтрЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", НайтиЗаменяющиеДокументыФормы(ТаблицаПериодовПримененияФорм, СтрРезультатПоиска, ДатаКонцаПериодаОтчета));
	ИначеЕсли ДатаКонцаПериодаОтчета > ДатаКонцаПрименимостиФормы Тогда
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаОкончанияСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаОкончанияСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", СтрЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", НайтиЗаменяющиеДокументыФормы(ТаблицаПериодовПримененияФорм, СтрРезультатПоиска, ДатаКонцаПериодаОтчета));
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ФорматПрименимВУказанномПериоде(ТаблицаПериодовПримененияФорматов, КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ВерсияФормата, ДатаПриказаФормат, НомерПриказаФормат, ДатаКонцаПериодаОтчета, ПараметрыДиалогаБлокировки)
	
	РезультатПоиска = ТаблицаПериодовПримененияФорматов.НайтиСтроки(Новый Структура("КодФормы, ДатаПриказаФормы, НомерПриказаФормы, Версия, ДатаПриказа, НомерПриказа", КодФормы, ДатаПриказаФормы, НомерПриказаФормы, ВерсияФормата, ДатаПриказаФормат, НомерПриказаФормат));
	Если РезультатПоиска.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	СтрРезультатПоиска = РезультатПоиска[0];
	
	Если ЗначениеЗаполнено(СтрРезультатПоиска.ДатаНачала) ИЛИ ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания) Тогда
		ДатаНачалаПрименимостиФормата = НачалоДня(СтрРезультатПоиска.ДатаНачала);
		ДатаКонцаПрименимостиФормата = КонецДня(?(ЗначениеЗаполнено(СтрРезультатПоиска.ДатаОкончания), СтрРезультатПоиска.ДатаОкончания, '39991231'));
	Иначе
		ДатаНачалаПрименимостиФормата = '00010101';
		ДатаКонцаПрименимостиФормата = '00010101';
	КонецЕсли;
	
	ПредставлениеФормата = СокрЛП(ВерсияФормата);
	Если ЗначениеЗаполнено(СтрРезультатПоиска.ПредставлениеПриказа) Тогда
		ПредставлениеФормата = ПредставлениеФормата + " в редакции:<BR>" + СокрЛП(СтрРезультатПоиска.ПредставлениеПриказа) + "<BR>";
	КонецЕсли;
	ТекстЗаголовок = "Формат версии " + СокрЛП(ПредставлениеФормата) + " за период составления отчета более не применяется.";
	
	Если ДатаКонцаПериодаОтчета < ДатаНачалаПрименимостиФормата Тогда
		ЗаменяющиеДокументы = НайтиЗаменяющиеДокументыФормата(ТаблицаПериодовПримененияФорматов, СтрРезультатПоиска, ДатаКонцаПериодаОтчета);
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаНачалаСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаНачалаСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", ТекстЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", ЗаменяющиеДокументы);
	ИначеЕсли ДатаКонцаПериодаОтчета > ДатаКонцаПрименимостиФормата Тогда
		ЗаменяющиеДокументы = НайтиЗаменяющиеДокументыФормата(ТаблицаПериодовПримененияФорматов, СтрРезультатПоиска, ДатаКонцаПериодаОтчета);
		ПараметрыДиалогаБлокировки = Новый Структура;
		ПараметрыДиалогаБлокировки.Вставить("Жесткая", СтрРезультатПоиска.ДатаОкончанияСтрого);
		ПараметрыДиалогаБлокировки.Вставить("Подробно", СтрРезультатПоиска.ДатаОкончанияСообщение);
		ПараметрыДиалогаБлокировки.Вставить("Заголовок", ТекстЗаголовок);
		ПараметрыДиалогаБлокировки.Вставить("ЗаменяющийДокумент", ЗаменяющиеДокументы);
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция НайтиЗаменяющиеДокументыФормы(ТаблицаФорм, СтрИсходныйДокумент, ДатаКонцаПериодаОтчета, МассивРезультат = Неопределено)
	
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	Обновления = СтрИсходныйДокумент.Обновления;
	Если НЕ ЗначениеЗаполнено(Обновления) Тогда
		Возврат МассивРезультат;
	Иначе
		Для Каждого Стр Из Обновления Цикл
			СтрДатаОкончания = ?(НЕ ЗначениеЗаполнено(Стр.ДатаОкончания), '39991231', Стр.ДатаОкончания);
			Если (ЗначениеЗаполнено(Стр.ДатаНачала) ИЛИ ЗначениеЗаполнено(СтрДатаОкончания))
			И (НачалоМесяца(Стр.ДатаНачала) <= ДатаКонцаПериодаОтчета И КонецМесяца(СтрДатаОкончания) >= ДатаКонцаПериодаОтчета) Тогда
				Если ЗначениеЗаполнено(Стр.ПредставлениеПриказа) Тогда
					МассивРезультат.Добавить(Стр.ПредставлениеПриказа);
				КонецЕсли;
			Иначе
				НайтиЗаменяющиеДокументыФормы(ТаблицаФорм, Стр, ДатаКонцаПериодаОтчета, МассивРезультат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция НайтиЗаменяющиеДокументыФормата(ТаблицаФорм, СтрИсходныйДокумент, ДатаКонцаПериодаОтчета, МассивРезультат = Неопределено)
	
	Если МассивРезультат = Неопределено Тогда
		МассивРезультат = Новый Массив;
	КонецЕсли;
	
	Обновления = СтрИсходныйДокумент.Обновления;
	Если НЕ ЗначениеЗаполнено(Обновления) Тогда
		Возврат МассивРезультат;
	Иначе
		Для Каждого Стр Из Обновления Цикл
			СтрДатаОкончания = ?(НЕ ЗначениеЗаполнено(Стр.ДатаОкончания), '39991231', Стр.ДатаОкончания);
			Если (ЗначениеЗаполнено(Стр.ДатаНачала) ИЛИ ЗначениеЗаполнено(Стр.ДатаНачала))
			И (НачалоМесяца(Стр.ДатаНачала) <= ДатаКонцаПериодаОтчета И КонецМесяца(СтрДатаОкончания) >= ДатаКонцаПериодаОтчета) Тогда
				ПредставлениеФормата = СокрЛП(Стр.Версия);
				Если ЗначениеЗаполнено(Стр.ПредставлениеПриказа) Тогда
					ПредставлениеФормата = ПредставлениеФормата + ", в редакции: " + СокрЛП(Стр.ПредставлениеПриказа);
				КонецЕсли;
				МассивРезультат.Добавить(ПредставлениеФормата);
			Иначе
				НайтиЗаменяющиеДокументыФормата(ТаблицаФорм, Стр, ДатаКонцаПериодаОтчета, МассивРезультат);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивРезультат;
	
КонецФункции

Функция РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Экспорт
	
	НомерРедакцииФормата = "1";
	
	Для Каждого Стр Из ДеревоДанных.Строки Цикл
		АтрибутыКлючевогоУзла = ПолучитьАтрибутыУзла(Стр);
		Если АтрибутыКлючевогоУзла.Свойство("Формат") Тогда
			ФорматИнформации = АтрибутыКлючевогоУзла.Формат;
			Если ЗначениеЗаполнено(ФорматИнформации) Тогда
				СоставляющиеФорматаИнформации = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(СокрЛП(ФорматИнформации));
				Если СоставляющиеФорматаИнформации.Количество() > 0 И СоставляющиеФорматаИнформации[0] = НомерРедакцииФормата Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьИнформациюОбОбновленияхТекущегоРелиза() Экспорт
	
	Если НЕ МеханизмОнлайнСервисовВключен() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.ИнформацияОРелизе);
	Если НЕ ЗначениеЗаполнено(Результат) ИЛИ Результат.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеТекущегоРелиза = Результат[0].Данные;
	Если НЕ ЗначениеЗаполнено(ДанныеТекущегоРелиза) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДеревоИнформацииТекущегоРелиза = ЗагрузитьСтрокуXMLВДеревоЗначений(ДанныеТекущегоРелиза);
	Если НЕ ЗначениеЗаполнено(ДеревоИнформацииТекущегоРелиза) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоИнформацииТекущегоРелиза) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, точно ли для текущего релиза информация
	Если НЕ ИнформацияОРелизеСоответствуетТекущейПрограмме(ДеревоИнформацииТекущегоРелиза) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура;
	
	ТекущийРелиз = Новый Структура;
	
	ПолноеДеревоДополнительныеОтчеты = Новый ДеревоЗначений;
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("Версия");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("Состав");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("ДополнительнаяИнформация");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("URL");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("ДатаВыпуска");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("ИД");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("АктуальнаяВерсия");
	ПолноеДеревоДополнительныеОтчеты.Колонки.Добавить("Порядок");
	
	ПолнаяТаблицаКонфигураций = Новый ТаблицаЗначений;
	ПолнаяТаблицаКонфигураций.Колонки.Добавить("Версия");
	ПолнаяТаблицаКонфигураций.Колонки.Добавить("ДополнительнаяИнформация");
	ПолнаяТаблицаКонфигураций.Колонки.Добавить("URL");
	ПолнаяТаблицаКонфигураций.Колонки.Добавить("ДатаВыпуска");
	
	УзелФайл = ДеревоИнформацииТекущегоРелиза.Строки.Найти("Файл", "Имя");
	Если УзелФайл <> Неопределено Тогда
		УзлыРелиз = УзелФайл.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
		Если УзлыРелиз.Количество() > 0 Тогда
			УзелРелиз = УзлыРелиз[0];
			Если ФайлИнформацииОРелизеСоответствуетТекущейПрограмме(УзелРелиз) Тогда
				
				// заполняем свойства текущего релиза
				АтрибутыУзла = ПолучитьАтрибутыУзла(УзелРелиз);
				Если АтрибутыУзла.Свойство("Верс") Тогда
					ТекущийРелиз.Вставить("Версия", СокрЛП(АтрибутыУзла.Верс));
				КонецЕсли;
				Если АтрибутыУзла.Свойство("Платф") Тогда
					ТекущийРелиз.Вставить("Платформа", СокрЛП(АтрибутыУзла.Платф));
				КонецЕсли;
				Если АтрибутыУзла.Свойство("ИД") Тогда
					ТекущийРелиз.Вставить("ИД", СокрЛП(АтрибутыУзла.ИД));
				КонецЕсли;
				Если АтрибутыУзла.Свойство("URL") Тогда
					ТекущийРелиз.Вставить("URL", СокрЛП(АтрибутыУзла.URL));
				КонецЕсли;
				
				// заполняем дерево внешних отчетов
				УзлыДочерниеВыпуски = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "ДочВып", "Э"));
				Если УзлыДочерниеВыпуски.Количество() > 0 Тогда
					УзелДочерниеВыпуски = УзлыДочерниеВыпуски[0];
					УзлыВыпуск = УзелДочерниеВыпуски.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Вып", "Э"));
					Для Каждого УзелВыпуск Из УзлыВыпуск Цикл
						АтрибутыУзла = ПолучитьАтрибутыУзла(УзелВыпуск);
						СтрВыпуск = ПолноеДеревоДополнительныеОтчеты.Строки.Добавить();
						СтрВыпуск.Версия = АтрибутыУзла.Верс;
						Если АтрибутыУзла.Свойство("ПричиныВыпуска") Тогда
							СтрВыпуск.ДополнительнаяИнформация = АтрибутыУзла.ДопИнф;
						КонецЕсли;
						Если АтрибутыУзла.Свойство("URL") Тогда
							СтрВыпуск.URL = АтрибутыУзла.URL;
						КонецЕсли;
						Если АтрибутыУзла.Свойство("ДатаВ") Тогда
							СтрВыпуск.ДатаВыпуска = XMLЗначение(Тип("Дата"), АтрибутыУзла.ДатаВ);
						КонецЕсли;
						СтрВыпуск.Порядок = ПорядокПоНомеруВерсии(СтрВыпуск.Версия);
						УзлыОбъекты = УзелВыпуск.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Обкты", "Э"));
						Если УзлыОбъекты.Количество() > 0 Тогда
							УзелОбъекты = УзлыОбъекты[0];
							УзлыОбъект = УзелОбъекты.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Обкт", "Э"));
							Для Каждого УзелОбъект Из УзлыОбъект Цикл
								АтрибутыУзлаОбъект = ПолучитьАтрибутыУзла(УзелОбъект);
								Если АтрибутыУзлаОбъект.Свойство("Предст") Тогда
									СтрОбъект = СтрВыпуск.Строки.Добавить();
									СтрОбъект.Версия = АтрибутыУзла.Верс;
									СтрОбъект.Состав = АтрибутыУзлаОбъект.Предст;
									Если АтрибутыУзлаОбъект.Свойство("ИД") Тогда
										СтрОбъект.ИД = АтрибутыУзлаОбъект.ИД;
									КонецЕсли;
								ИначеЕсли АтрибутыУзлаОбъект.Свойство("ИД") Тогда
									СтрОбъект = СтрВыпуск.Строки.Добавить();
									СтрОбъект.Версия = АтрибутыУзла.Верс;
									СтрОбъект.ИД = АтрибутыУзлаОбъект.ИД;
									СтрОбъект.Представление = АтрибутыУзлаОбъект.ИД;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				// заполняем дерево обновлений конфигурации
				УзлыРелизыОбновления = УзелРелиз.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Обнов", "Э"));
				Если УзлыРелизыОбновления.Количество() > 0 Тогда
					УзелРелизыОбновления = УзлыРелизыОбновления[0];
					УзлыРелизОбновление = УзелРелизыОбновления.Строки.НайтиСтроки(Новый Структура("Имя, Тип", "Рлз", "Э"));
					Для Каждого УзелРелизОбновление Из УзлыРелизОбновление Цикл
						АтрибутыУзла = ПолучитьАтрибутыУзла(УзелРелизОбновление);
						НовСтр = ПолнаяТаблицаКонфигураций.Добавить();
						НовСтр.Версия = АтрибутыУзла.Верс;
						Если АтрибутыУзла.Свойство("ДопИнф") Тогда
							НовСтр.ДополнительнаяИнформация = АтрибутыУзла.ДопИнф;
						КонецЕсли;
						Если АтрибутыУзла.Свойство("URL") Тогда
							НовСтр.URL = АтрибутыУзла.URL;
						КонецЕсли;
						Если АтрибутыУзла.Свойство("ДатаВ") Тогда
							НовСтр.ДатаВыпуска = XMLЗначение(Тип("Дата"), АтрибутыУзла.ДатаВ);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПолноеДеревоДополнительныеОтчеты.Строки.Сортировать("Порядок");
	ПолнаяТаблицаКонфигураций.Сортировать("ДатаВыпуска");
	
	// заполняем признак "АктуальнаяВерсия" у внешних отчетов
	Для Каждого Стр1 Из ПолноеДеревоДополнительныеОтчеты.Строки Цикл
		Для Каждого Стр2 Из Стр1.Строки Цикл
			Если ЗначениеЗаполнено(Стр2.ИД) Тогда
				СтрАктуальныйОтчет = Неопределено;
				РезультатПоискаАналогичныхОтчетов = ПолноеДеревоДополнительныеОтчеты.Строки.НайтиСтроки(Новый Структура("ИД", Стр2.ИД), Истина);
				Для Каждого Результат Из РезультатПоискаАналогичныхОтчетов Цикл
					Если Результат.Уровень() = 1 И ЗначениеЗаполнено(Результат.Родитель.Порядок) И Результат.Родитель.Порядок > Стр1.Порядок Тогда
						Если СтрАктуальныйОтчет = Неопределено ИЛИ СтрАктуальныйОтчет.Порядок < Результат.Родитель.Порядок Тогда
							Стр2.АктуальнаяВерсия = Результат.Родитель.Версия;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// если все результирующие структуры пусты, то вернем Неопределено
	Если ТекущийРелиз.Количество() = 0 И ПолноеДеревоДополнительныеОтчеты.Строки.Количество() = 0 И ПолнаяТаблицаКонфигураций.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураРезультат.Вставить("ТекущийРелиз", ТекущийРелиз);
	СтруктураРезультат.Вставить("Отчеты", ПолноеДеревоДополнительныеОтчеты);
	СтруктураРезультат.Вставить("Конфигурации", ПолнаяТаблицаКонфигураций);
	
	Возврат СтруктураРезультат;
	
КонецФункции

Функция ПорядокПоНомеруВерсии(НомерВерсии)
	
	Результат = "";
	
	МассивСоставляющих = РегламентированнаяОтчетность.РазобратьСтрокуВМассивПоРазделителю(НомерВерсии);
	Для Инд = 0 По МассивСоставляющих.Количество() - 1 Цикл
		ТекСоставляющая = СокрЛП(МассивСоставляющих[Инд]);
		Для НомСимв = СтрДлина(ТекСоставляющая) + 1 По 5 Цикл
			ТекСоставляющая = "0" + ТекСоставляющая;
		КонецЦикла;
		Результат = Результат + ТекСоставляющая;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ФайлИнформацииОРелизеСоответствуетТекущейПрограмме(УзелРелиз)
	
	АтрибутыУзла = ПолучитьАтрибутыУзла(УзелРелиз);
	
	Если НЕ АтрибутыУзла.Свойство("Верс")
	 ИЛИ НЕ АтрибутыУзла.Свойство("Платф")
	 ИЛИ НЕ АтрибутыУзла.Свойство("ИД") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИнформацияОПрограмме = ИнформацияОПрограмме();
	
	Если НЕ ВерсияТекущейПлатформыСоответствуетШаблону(ИнформацияОПрограмме.ВерсияПлатформы, АтрибутыУзла.Платф)
	 ИЛИ НЕ (ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИмяМетаданныхКонфигурации, АтрибутыУзла.ИД)
	 	ИЛИ ИДТекущейКонфигурацииСоответствуетШаблону(ИнформацияОПрограмме.ИДКонфигурации, АтрибутыУзла.ИД))
	 ИЛИ НЕ ИнформацияОПрограмме.ВерсияКонфигурации = АтрибутыУзла.Верс Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СПРАВОЧНИКОМ ФОРМ И ФОРМАТОВ

Функция ПолучитьТаблицуПериодовПримененияФорматов()
	
	// пытаемся получить из кэша актуальную таблицу блокировок
	ДеревоФормИФорматовСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов, Ложь);
	Если ДеревоФормИФорматовСвед.Количество() > 0 Тогда
		ДанныеИзКэша = ПолучитьДанныеИзКэшаСправочнойИнформации(СокрЛП(ДеревоФормИФорматовСвед[0].Имя), "ТаблицаФорматов");
		Если ЗначениеЗаполнено(ДанныеИзКэша) Тогда
			Возврат ДанныеИзКэша;
		КонецЕсли;
	КонецЕсли;
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеДеревоФормИФорматов = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов);
	Если СтрДанныеДеревоФормИФорматов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрДеревоФормИФорматов = СтрДанныеДеревоФормИФорматов[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрДеревоФормИФорматов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрДеревоФормИФорматов);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаПериодовПримененияФорматов = ЗаполнитьТаблицуПериодовПримененияФорматовНаОсновеДереваФормИФорматов(ДеревоДанных);
	СохранитьДанныеВКэшеСправочнойИнформации(СтрДанныеДеревоФормИФорматов[0].Имя, "ТаблицаФорматов", ТаблицаПериодовПримененияФорматов);
	
	Возврат ТаблицаПериодовПримененияФорматов;
	
КонецФункции

Функция ПолучитьТаблицуПериодовПримененияФорм()
	
	// пытаемся получить из кэша актуальную таблицу блокировок
	ДеревоФормИФорматовСвед = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов, Ложь);
	Если ДеревоФормИФорматовСвед.Количество() > 0 Тогда
		ДанныеИзКэша = ПолучитьДанныеИзКэшаСправочнойИнформации(СокрЛП(ДеревоФормИФорматовСвед[0].Имя), "ТаблицаФорм");
		Если ЗначениеЗаполнено(ДанныеИзКэша) Тогда
			Возврат ДанныеИзКэша;
		КонецЕсли;
	КонецЕсли;
	
	// если в кэше актуальной таблицы нет, то получим XML с данными из регистра
	СтрДанныеДеревоФормИФорматов = ПолучитьДанныеМеханизмаОнлайнСервисовРО(Перечисления.ТипыРесурсовМеханизмаОнлайнСервисовРО.СправочникФормИФорматов);
	Если СтрДанныеДеревоФормИФорматов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	СтрДеревоФормИФорматов = СтрДанныеДеревоФормИФорматов[0].Данные;
	Если НЕ ЗначениеЗаполнено(СтрДеревоФормИФорматов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// преобразуем XML к дереву
	ДеревоДанных = ЗагрузитьСтрокуXMLВДеревоЗначений(СтрДеревоФормИФорматов);
	Если НЕ ЗначениеЗаполнено(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// проверяем, "понятная" ли редакция у справочной информации
	Если НЕ РедакцияФорматаСправочнойИнформацииПрименима(ДеревоДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// переводим дерево XML в таблицу
	ТаблицаПериодовПримененияФорм = ЗаполнитьТаблицуПериодовПримененияФормНаОсновеДереваФормИФорматов(ДеревоДанных);
	СохранитьДанныеВКэшеСправочнойИнформации(СтрДанныеДеревоФормИФорматов[0].Имя, "ТаблицаФорм", ТаблицаПериодовПримененияФорм);
	
	Возврат ТаблицаПериодовПримененияФорм;
	
КонецФункции

Функция ЗаполнитьТаблицуПериодовПримененияФормНаОсновеДереваФормИФорматов(ДеревоФормИФорматов)
	
	ТаблицаПериодовПримененияФорм = СоздатьТаблицуПериодовПримененияФорм();
	
	УзелФайл = ДеревоФормИФорматов.Строки.Найти("Файл", "Имя");
	Если УзелФайл = Неопределено Тогда
		Возврат ТаблицаПериодовПримененияФорм;
	КонецЕсли;
	
	ТаблицаЗамещений = Новый ТаблицаЗначений;
	ТаблицаЗамещений.Колонки.Добавить("Код");
	ТаблицаЗамещений.Колонки.Добавить("ДатаПриказа");
	ТаблицаЗамещений.Колонки.Добавить("НомерПриказа");
	ТаблицаЗамещений.Колонки.Добавить("СтрЗамещение");
	
	Для Каждого УзелФрм Из УзелФайл.Строки Цикл
		Если УзелФрм.Имя = "Фрм" И УзелФрм.Тип = "Э" Тогда
			
			АтрибутыУзлаФрм = ПолучитьАтрибутыУзла(УзелФрм);
			
			НовСтр = ТаблицаПериодовПримененияФорм.Добавить();
			
			НовСтр.Код						= ?(АтрибутыУзлаФрм.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ИД),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.ИД)),								Неопределено);
			НовСтр.ДатаПриказа				= ?(АтрибутыУзлаФрм.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДП),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДП, Неопределено),			Неопределено);
			НовСтр.НомерПриказа				= ?(АтрибутыУзлаФрм.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.НП),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.НП)),								Неопределено);
			НовСтр.ПредставлениеПриказа		= ?(АтрибутыУзлаФрм.Свойство("ПП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ПП),		СокрЛП(АтрибутыУзлаФрм.ПП),										Неопределено);
			НовСтр.ДатаНачала				= ?(АтрибутыУзлаФрм.Свойство("ДН") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДН),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДН),							'00010101');
			НовСтр.ДатаОкончания			= ?(АтрибутыУзлаФрм.Свойство("ДК") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДК),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДК),							'00010101');
			НовСтр.ДатаНачалаСтрого			= (АтрибутыУзлаФрм.Свойство("ДНС") И АтрибутыУзлаФрм.ДНС = "1");
			НовСтр.ДатаОкончанияСтрого		= (АтрибутыУзлаФрм.Свойство("ДКС") И АтрибутыУзлаФрм.ДКС = "1");
			НовСтр.ДатаНачалаСообщение		= ?(АтрибутыУзлаФрм.Свойство("ДНСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДНСбщ),	СокрЛП(АтрибутыУзлаФрм.ДНСбщ),		Неопределено);
			НовСтр.ДатаОкончанияСообщение	= ?(АтрибутыУзлаФрм.Свойство("ДКСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДКСбщ),	СокрЛП(АтрибутыУзлаФрм.ДКСбщ),		Неопределено);
			
			Для Каждого УзелОбнвл Из УзелФрм.Строки Цикл
				Если УзелОбнвл.Имя = "Обнвл" И УзелОбнвл.Тип = "Э" Тогда
					Для Каждого УзелОбнвлФрм Из УзелОбнвл.Строки Цикл
						Если УзелОбнвлФрм.Имя = "Фрм" И УзелОбнвлФрм.Тип = "Э" Тогда
							АтрибутыУзла = ПолучитьАтрибутыУзла(УзелОбнвлФрм);
							Если АтрибутыУзла.Свойство("ИД") И АтрибутыУзла.Свойство("ДП") И АтрибутыУзла.Свойство("НП") Тогда
								НовСтрЗамещение = ТаблицаЗамещений.Добавить();
								НовСтрЗамещение.Код = ВРЕГ(СокрЛП(АтрибутыУзла.ИД));
								НовСтрЗамещение.ДатаПриказа = СтрДатаXMLВДата1С(АтрибутыУзла.ДП, Неопределено);
								НовСтрЗамещение.НомерПриказа = ВРЕГ(СокрЛП(АтрибутыУзла.НП));
								НовСтрЗамещение.СтрЗамещение = НовСтр;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаЗамещений Цикл
		РезультатПоиска = ТаблицаПериодовПримененияФорм.НайтиСтроки(Новый Структура("Код, ДатаПриказа, НомерПриказа", Стр.Код, Стр.ДатаПриказа, Стр.НомерПриказа));
		Если РезультатПоиска.Количество() > 0 Тогда
			ПервыйРезультатПоиска = РезультатПоиска[0];
			ПервыйРезультатПоиска_Обновления = ПервыйРезультатПоиска.Обновления;
			Если НЕ ЗначениеЗаполнено(ПервыйРезультатПоиска_Обновления) Тогда
				ПервыйРезультатПоиска_Обновления = Новый Массив;
			КонецЕсли;
			ПервыйРезультатПоиска_Обновления.Добавить(Стр.СтрЗамещение);
			ПервыйРезультатПоиска.Обновления = ПервыйРезультатПоиска_Обновления;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПериодовПримененияФорм;
	
КонецФункции

Функция ЗаполнитьТаблицуПериодовПримененияФорматовНаОсновеДереваФормИФорматов(ДеревоФормИФорматов)
	
	ТаблицаПериодовПримененияФорматов = СоздатьТаблицуПериодовПримененияФорматов();
	
	УзелФайл = ДеревоФормИФорматов.Строки.Найти("Файл", "Имя");
	Если УзелФайл = Неопределено Тогда
		Возврат ТаблицаПериодовПримененияФорматов;
	КонецЕсли;
	
	ТаблицаЗамещений = Новый ТаблицаЗначений;
	ТаблицаЗамещений.Колонки.Добавить("Версия");
	ТаблицаЗамещений.Колонки.Добавить("ДатаПриказа");
	ТаблицаЗамещений.Колонки.Добавить("НомерПриказа");
	ТаблицаЗамещений.Колонки.Добавить("КодФормы");
	ТаблицаЗамещений.Колонки.Добавить("ДатаПриказаФормы");
	ТаблицаЗамещений.Колонки.Добавить("НомерПриказаФормы");
	ТаблицаЗамещений.Колонки.Добавить("СтрЗамещение");
	
	Для Каждого УзелФрм Из УзелФайл.Строки Цикл
		Если УзелФрм.Имя = "Фрм" И УзелФрм.Тип = "Э" Тогда
			
			АтрибутыУзлаФрм = ПолучитьАтрибутыУзла(УзелФрм);
			
			ФормаКод						= ?(АтрибутыУзлаФрм.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ИД),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.ИД)),								Неопределено);
			ФормаДатаПриказа				= ?(АтрибутыУзлаФрм.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.ДП),		СтрДатаXMLВДата1С(АтрибутыУзлаФрм.ДП, Неопределено),			Неопределено);
			ФормаНомерПриказа				= ?(АтрибутыУзлаФрм.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзлаФрм.НП),		ВРЕГ(СокрЛП(АтрибутыУзлаФрм.НП)),								Неопределено);
			
			Для Каждого УзелФрмт Из УзелФрм.Строки Цикл
				Если УзелФрмт.Имя = "Фрмт" И УзелФрмт.Тип = "Э" Тогда
					
					АтрибутыУзлаФрмт = ПолучитьАтрибутыУзла(УзелФрмт);
					
					НовСтр = ТаблицаПериодовПримененияФорматов.Добавить();
					
					НовСтр.КодФормы					= ФормаКод;
					НовСтр.ДатаПриказаФормы			= ФормаДатаПриказа;
					НовСтр.НомерПриказаФормы		= ФормаНомерПриказа;
					
					НовСтр.Версия					= ?(АтрибутыУзлаФрмт.Свойство("ИД") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ИД),		ВРЕГ(СокрЛП(АтрибутыУзлаФрмт.ИД)),						Неопределено);
					НовСтр.ДатаПриказа				= ?(АтрибутыУзлаФрмт.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДП),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.ДП, Неопределено),	Неопределено);
					НовСтр.НомерПриказа				= ?(АтрибутыУзлаФрмт.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.НП),		ВРЕГ(СокрЛП(АтрибутыУзлаФрмт.НП)),						Неопределено);
					НовСтр.ПредставлениеПриказа		= ?(АтрибутыУзлаФрмт.Свойство("ПП") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ПП),		СокрЛП(АтрибутыУзлаФрмт.ПП),							Неопределено);
					
					НовСтр.ДатаНачала				= ?(АтрибутыУзлаФрмт.Свойство("ДН") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДН),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.ДН),		'00010101');
					НовСтр.ДатаОкончания			= ?(АтрибутыУзлаФрмт.Свойство("ДК") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДК),		СтрДатаXMLВДата1С(АтрибутыУзлаФрмт.ДК),		'00010101');
					НовСтр.ДатаНачалаСтрого			= (АтрибутыУзлаФрмт.Свойство("ДНС") И АтрибутыУзлаФрмт.ДНС = "1");
					НовСтр.ДатаОкончанияСтрого		= (АтрибутыУзлаФрмт.Свойство("ДКС") И АтрибутыУзлаФрмт.ДКС = "1");
					НовСтр.ДатаНачалаСообщение		= ?(АтрибутыУзлаФрмт.Свойство("ДНСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДНСбщ),	СокрЛП(АтрибутыУзлаФрмт.ДНСбщ),				Неопределено);
					НовСтр.ДатаОкончанияСообщение	= ?(АтрибутыУзлаФрмт.Свойство("ДКСбщ") И ЗначениеЗаполнено(АтрибутыУзлаФрмт.ДКСбщ),	СокрЛП(АтрибутыУзлаФрмт.ДКСбщ),				Неопределено);
					
					Для Каждого УзелОбнвл Из УзелФрмт.Строки Цикл
						Если УзелОбнвл.Имя = "Обнвл" И УзелОбнвл.Тип = "Э" Тогда
							Для Каждого УзелОбнвлФрмт Из УзелОбнвл.Строки Цикл
								Если УзелОбнвлФрмт.Имя = "Фрмт" И УзелОбнвлФрмт.Тип = "Э" Тогда
									АтрибутыУзла = ПолучитьАтрибутыУзла(УзелОбнвлФрмт);
									Если АтрибутыУзла.Свойство("ИДФрм") И АтрибутыУзла.Свойство("ДПФрм") И АтрибутыУзла.Свойство("НПФрм") И АтрибутыУзла.Свойство("ИД") Тогда
										
										НовСтрЗамещение = ТаблицаЗамещений.Добавить();
										
										НовСтрЗамещение.Версия = ?(ЗначениеЗаполнено(АтрибутыУзла.ИД), ВРЕГ(СокрЛП(АтрибутыУзла.ИД)), Неопределено);
										НовСтрЗамещение.ДатаПриказа = ?(АтрибутыУзла.Свойство("ДП") И ЗначениеЗаполнено(АтрибутыУзла.ДП), СтрДатаXMLВДата1С(АтрибутыУзла.ДП, Неопределено), Неопределено);
										НовСтрЗамещение.НомерПриказа = ?(АтрибутыУзла.Свойство("НП") И ЗначениеЗаполнено(АтрибутыУзла.НП), ВРЕГ(СокрЛП(АтрибутыУзла.НП)), Неопределено);
										НовСтрЗамещение.КодФормы = ?(ЗначениеЗаполнено(АтрибутыУзла.ИДФрм), ВРЕГ(СокрЛП(АтрибутыУзла.ИДФрм)), Неопределено);
										НовСтрЗамещение.ДатаПриказаФормы = СтрДатаXMLВДата1С(АтрибутыУзла.ДПФрм, Неопределено);
										НовСтрЗамещение.НомерПриказаФормы = ?(ЗначениеЗаполнено(АтрибутыУзла.НПФрм), ВРЕГ(СокрЛП(АтрибутыУзла.НПФрм)), Неопределено);
										НовСтрЗамещение.СтрЗамещение = НовСтр;
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из ТаблицаЗамещений Цикл
		РезультатПоиска = ТаблицаПериодовПримененияФорматов.НайтиСтроки(Новый Структура("Версия, ДатаПриказа, НомерПриказа, КодФормы, ДатаПриказаФормы, НомерПриказаФормы", Стр.Версия, Стр.ДатаПриказа, Стр.НомерПриказа, Стр.КодФормы, Стр.ДатаПриказаФормы, Стр.НомерПриказаФормы));
		Если РезультатПоиска.Количество() > 0 Тогда
			ПервыйРезультатПоиска = РезультатПоиска[0];
			ПервыйРезультатПоиска_Обновления = ПервыйРезультатПоиска.Обновления;
			Если НЕ ЗначениеЗаполнено(ПервыйРезультатПоиска_Обновления) Тогда
				ПервыйРезультатПоиска_Обновления = Новый Массив;
			КонецЕсли;
			ПервыйРезультатПоиска_Обновления.Добавить(Стр.СтрЗамещение);
			ПервыйРезультатПоиска.Обновления = ПервыйРезультатПоиска_Обновления;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПериодовПримененияФорматов;
	
КонецФункции

Функция СоздатьТаблицуПериодовПримененияФорм()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Код");
	Результат.Колонки.Добавить("ДатаПриказа");
	Результат.Колонки.Добавить("НомерПриказа");
	Результат.Колонки.Добавить("ПредставлениеПриказа");
	Результат.Колонки.Добавить("ДатаНачала");
	Результат.Колонки.Добавить("ДатаОкончания");
	Результат.Колонки.Добавить("ДатаНачалаСтрого");
	Результат.Колонки.Добавить("ДатаОкончанияСтрого");
	Результат.Колонки.Добавить("ДатаНачалаСообщение");
	Результат.Колонки.Добавить("ДатаОкончанияСообщение");
	Результат.Колонки.Добавить("Обновления");
	
	Результат.Индексы.Добавить("Код");
	Результат.Индексы.Добавить("ДатаПриказа");
	Результат.Индексы.Добавить("НомерПриказа");
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьТаблицуПериодовПримененияФорматов()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("Версия");
	Результат.Колонки.Добавить("ДатаПриказа");
	Результат.Колонки.Добавить("НомерПриказа");
	Результат.Колонки.Добавить("ПредставлениеПриказа");
	Результат.Колонки.Добавить("КодФормы");
	Результат.Колонки.Добавить("ДатаПриказаФормы");
	Результат.Колонки.Добавить("НомерПриказаФормы");
	Результат.Колонки.Добавить("ДатаНачала");
	Результат.Колонки.Добавить("ДатаОкончания");
	Результат.Колонки.Добавить("ДатаНачалаСтрого");
	Результат.Колонки.Добавить("ДатаОкончанияСтрого");
	Результат.Колонки.Добавить("ДатаНачалаСообщение");
	Результат.Колонки.Добавить("ДатаОкончанияСообщение");
	Результат.Колонки.Добавить("Обновления");
	
	Результат.Индексы.Добавить("Версия");
	Результат.Индексы.Добавить("ДатаПриказа");
	Результат.Индексы.Добавить("НомерПриказа");
	Результат.Индексы.Добавить("КодФормы");
	Результат.Индексы.Добавить("ДатаПриказаФормы");
	Результат.Индексы.Добавить("НомерПриказаФормы");
	
	Возврат Результат;
	
КонецФункции

Функция СтрДатаXMLВДата1С(СтрДатаВремяXML, ЗначениеВозвращаемоеПриНеудаче = '00010101')
	
	Попытка
		Возврат XMLЗначение(Тип("Дата"), СтрДатаВремяXML);
	Исключение
		Возврат ЗначениеВозвращаемоеПриНеудаче;
	КонецПопытки;
	
КонецФункции

Процедура ПоказатьФормуНастроек() Экспорт
	
	ПолучитьФорму("НастройкиМеханизмаОнлайнСервисов").ОткрытьМодально();
	
КонецПроцедуры

Процедура ОткрытьФормуДоступныхОбновленийРО() Экспорт
	
	ПолучитьФорму("ДоступныеОбновленияРегламентированнойОтчетности").ОткрытьМодально();
	
КонецПроцедуры

КэшСправочнойИнформации = Новый ТаблицаЗначений;
КэшСправочнойИнформации.Колонки.Добавить("Имя");
КэшСправочнойИнформации.Колонки.Добавить("Тип");
КэшСправочнойИнформации.Колонки.Добавить("Данные");

#КонецЕсли