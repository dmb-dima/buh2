&НаКлиенте
Перем ПолеСтраницыСтатусаЗагрузкиДанных;

&НаКлиенте
Перем ПолеСтраницыСтатусаВыгрузкиДанных;

&НаКлиенте
Перем ПолеЗаголовкиГиперссылокЗагрузкиДанных;

&НаКлиенте
Перем ПолеЗаголовкиГиперссылокВыгрузкиДанных;

////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНЫЕ ПЕРЕМЕННЫЕ МАСТЕРА (Клиент)

&НаКлиенте
Перем мТекущийНомерСтраницы;

&НаКлиенте
Перем мСтраницыМастера;

&НаКлиенте
Перем мКнопкиМастера;

&НаКлиенте
Перем мЗакрытьФормуБезусловно;

&НаКлиенте
Перем мНомераСтраницИВариантыМастера;

////////////////////////////////////////////////////////////////////////////////
// НА СЕРВЕРЕ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("УзелИнформационнойБазы") Тогда
		
		Объект.ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Параметры.УзелИнформационнойБазы);
		
	ИначеЕсли Не Параметры.Свойство("ИмяПланаОбмена", Объект.ИмяПланаОбмена) Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Работа помощника поддерживается только при вызове из командного интерфейса! Работа помощника завершена.'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	// параметризация помощника по имени плана обмена (обязательно)
	Если ПустаяСтрока(Объект.ИмяПланаОбмена) Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не задано имя плана обмена! Работа помощника завершена.'"), Отказ);
		Возврат;
		
	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(Объект.ИмяПланаОбмена) Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Интерактивное выполнение обмена данными недоступно для узлов распределенной информационной базы (РИБ)'"), Отказ);
		Возврат;
		
	КонецЕсли;
	
	// определяем список настроек обмена для выполнения сопоставления данных
	ОпределитьСписокНастроекОбмена();
	
	Если Параметры.Свойство("УзелИнформационнойБазы") Тогда
		
		// проверяем настройку обмена на соответствие фильтру
		Если Элементы.УзелИнформационнойБазы.СписокВыбора.НайтиПоЗначению(Параметры.УзелИнформационнойБазы) = Неопределено Тогда
			
			НСтрока = НСтр("ru = 'Для заданного узла информационной базы нельзя выполнить сопоставление объектов!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
			Возврат;
		КонецЕсли;
		
		Объект.УзелИнформационнойБазы = Параметры.УзелИнформационнойБазы;
		
		Элементы.УзелИнформационнойБазы.Вид = ВидПоляФормы.ПолеНадписи;
		
		Параметры.Свойство("ВидТранспортаСообщенийОбмена", Объект.ВидТранспортаСообщенийОбмена);
		
		// задание вида транспорта сообщений обмена, если значение не было передано
		Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
			
			НастройкиТранспортаОбмена = РегистрыСведений.НастройкиТранспортаОбмена.ПолучитьНастройкиТранспортаДляУзла(Объект.УзелИнформационнойБазы);
			
			Объект.ВидТранспортаСообщенийОбмена = НастройкиТранспортаОбмена.ВидТранспортаСообщенийОбменаПоУмолчанию;
			
			Если Не ЗначениеЗаполнено(Объект.ВидТранспортаСообщенийОбмена) Тогда
				
				Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УзелИспользуетсяВСценарииОбмена = УзелИнформационнойБазыИспользуетсяВСценарииОбмена(Объект.УзелИнформационнойБазы);
		
		Элементы.ИнформационнаяНадписьНастройкиРасписания.Видимость = Не УзелИспользуетсяВСценарииОбмена И ОбменДаннымиСервер.РольДоступнаДобавлениеИзменениеОбменовДанными();
		
		ОбменДаннымиСервер.ЗаполнитьСписокВыбораДоступнымиВидамиТранспорта(Объект.УзелИнформационнойБазы, Элементы.ВидТранспортаСообщенийОбмена);
		
	КонецЕсли;
	
	Параметры.Свойство("ВыполнитьСопоставлениеПриОткрытии", ВыполнитьСопоставлениеПриОткрытии);
	
	ВариантРаботыМастера = "ВыполнитьСопоставление";
	ОткрытьПомощникСозданияСценарияОбменаДанными = ОбменДаннымиСервер.РольДоступнаДобавлениеИзменениеОбменовДанными();
	
	Элементы.ОткрытьКаталогОбменаИнформацией.Доступность = Не (Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ПолучитьЗаголовокПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ПолучитьСообщениеОбменаВоВременныйКаталог(Отказ, ИдентификаторФайлаПакетаДанных);
	
	Если Не Отказ Тогда
		
		ДанныеСтатистикиСопоставления = ПолучитьДанныеСтатистикиСопоставления();
		
		ИнформацияСтатистикиАктуальна = (ДанныеСтатистикиСопоставления.ИдентификаторФайлаПакетаДанных = ИдентификаторФайлаПакетаДанных);
		
		Если Не ИнформацияСтатистикиАктуальна Тогда
			
			// появился новый файл пакета данных; загружаем информацию из файла
			ОбработкаОбъект.ВыполнитьАнализСообщенияОбмена(Отказ);
			
			Если Не Отказ Тогда
				
				ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
				
			КонецЕсли;
			
		Иначе
			
			// файл пакета данных не изменился; загружаем информацию из кэша
			ОбработкаОбъект.ИнформацияСтатистики.Загрузить(ДанныеСтатистикиСопоставления.ИнформацияСтатистикиСопоставленияОбъектов.Скопировать());
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	КонецЕсли;
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// получаем статистическую информацию по сопоставлению
	ОбработкаОбъект.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// сохраняем данные статистики сопоставления
	ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// выполняем автоматическое сопоставление и получаем статистическую информацию
	ОбработкаОбъект.ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюИПолучитьСтатистикуСопоставления(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// сохраняем данные статистики сопоставления
	ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// выполняем загрузку данных
	ОбработкаОбъект.ВыполнитьЗагрузкуДанных(Отказ, ИндексыСтрок);
	
	// получаем статистическую информацию по сопоставлению
	ОбработкаОбъект.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// сохраняем данные статистики сопоставления
	ЗаписатьДанныеСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы, ОбработкаОбъект.ТаблицаИнформацииСтатистики(), ИдентификаторФайлаПакетаДанных);
	
	ПолучитьДеревоИнформацииСтатистики(ОбработкаОбъект.ТаблицаИнформацииСтатистики());
	
	УстановитьВидимостьГруппыДополнительнойИнформации();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьСписокНастроекОбмена()
	
	СписокНастроекОбмена = ПолучитьСписокНастроекОбмена();
	
	Если СписокНастроекОбмена.Количество() = 0 Тогда // нет настроек обмена
		
	Иначе // найдено несколько настроек обмена
		
		Объект.УзелИнформационнойБазы = СписокНастроекОбмена[0].Значение;
		
		ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(СписокНастроекОбмена, Элементы.УзелИнформационнойБазы.СписокВыбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, ПараметрыОповещения)
	
	СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", ПараметрыОповещения.КлючУникальности));
	
	ЗаполнитьЗначенияСвойств(СтрокиТаблицы[0], ПараметрыОповещения, "ДанныеУспешноЗагружены");
	
	КлючиСтрок = Новый Массив;
	КлючиСтрок.Добавить(ПараметрыОповещения.КлючУникальности);
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики)
	
	ОтборМассив = ИнформацияСтатистики.ВыгрузитьКолонку("ИмяТаблицыПриемника");
	
	ОтборСтрока = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ОтборМассив);
	
	Отбор = Новый Структура("ПолноеИмя", ОтборСтрока);
	
	// получаем дерево объектов метаданных конфигурации
	ДеревоИнформацииСтатистикиВременное = ОбменДаннымиПовтИсп.ПолучитьДеревоМетаданныхКонфигурации(Отбор).Скопировать();
	
	// добавляем колонки
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("Ключ");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("КоличествоОбъектовВИсточнике");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("КоличествоОбъектовВПриемнике");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("КоличествоОбъектовНесопоставленных");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ПроцентСопоставленияОбъектов");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ИндексКартинки");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ИспользоватьПредварительныйПросмотр");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ИмяТаблицыПриемника");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ТипОбъектаСтрокой");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ПоляТаблицы");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ПоляПоиска");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ТипИсточникаСтрокой");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ТипПриемникаСтрокой");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ЭтоУдалениеОбъекта");
	ДеревоИнформацииСтатистикиВременное.Колонки.Добавить("ДанныеУспешноЗагружены");
	
	ИнформацияСтатистикиОбычныеОбъекты = ИнформацияСтатистики.Скопировать(Новый Структура("ОдинКоМногим, ЭтоУдалениеОбъекта", Ложь, Ложь));
	
	// заполняем обычные строки
	Для Каждого СтрокаТаблицы Из ИнформацияСтатистикиОбычныеОбъекты Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистикиВременное.Строки.Найти(СтрокаТаблицы.ИмяТаблицыПриемника, "ПолноеИмя", Истина);
		
		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
		
	КонецЦикла;
	
	// добавляем строки с типом "ОдинКоМногим"
	Отбор = Новый Структура("ОдинКоМногим", Истина);
	ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистикиВременное, ИнформацияСтатистики, Отбор);
	
	// добавляем строки удаления объектов
	Отбор = Новый Структура("ЭтоУдалениеОбъекта", Истина);
	ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистикиВременное, ИнформацияСтатистики, Отбор);
	
	КоллекцияЭлементовДерева = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	КоллекцияЭлементовДерева.Очистить();
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева, ДеревоИнформацииСтатистикиВременное);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоИнформацииСтатистикиОдинКоМногим(ДеревоИнформацииСтатистикиВременное, ИнформацияСтатистики, Отбор)
	
	ИнформацияСтатистикиОдинКоМногим = ИнформацияСтатистики.Скопировать(Отбор);
	
	Если ИнформацияСтатистикиОдинКоМногим.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИнформацияСтатистикиОдинКоМногимВременная = ИнформацияСтатистикиОдинКоМногим.Скопировать(, "ИмяТаблицыПриемника");
	ИнформацияСтатистикиОдинКоМногимВременная.Свернуть("ИмяТаблицыПриемника");
	
	Для Каждого СтрокаТаблицы Из ИнформацияСтатистикиОдинКоМногимВременная Цикл
		
		Строки = ИнформацияСтатистикиОдинКоМногим.НайтиСтроки(Новый Структура("ИмяТаблицыПриемника", СтрокаТаблицы.ИмяТаблицыПриемника));
		
		СтрокаДерева = ДеревоИнформацииСтатистикиВременное.Строки.Найти(СтрокаТаблицы.ИмяТаблицыПриемника, "ПолноеИмя", Истина);
		
		Для Каждого Строка Из Строки Цикл
			
			НоваяСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаДерева);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, Строка);
			
			Если Строка.ЭтоУдалениеОбъекта Тогда
				
				НоваяСтрокаДерева.Картинка = БиблиотекаКартинок.ПометитьНаУдаление;
				
			Иначе
				
				Синоним = "[СинонимТаблицыПриемника] ([ИмяТаблицыИсточника])";
				Синоним = СтрЗаменить(Синоним, "[СинонимТаблицыПриемника]", НоваяСтрокаДерева.Синоним);
				Синоним = СтрЗаменить(Синоним, "[ИмяТаблицыИсточника]", УдалитьИмяКлассаИзИмениОбъекта(Строка.ТипИсточникаСтрокой));
				
				НоваяСтрокаДерева.Синоним = Синоним;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокНастроекОбмена()
	
	// Выбираем узлы плана обмена:
	// принадлежащие заданному плану обмена;
	// непомеченные на удаление;
	// ЭтоУзел не включаем в выборку;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ПланОбмена.Ссылка       КАК Ссылка,
	|	ПланОбмена.Наименование КАК Представление
	|ИЗ
	|	ПланОбмена.#ИмяПланаОбмена КАК ПланОбмена
	|ГДЕ
	|	ПланОбмена.Ссылка ССЫЛКА ПланОбмена.#ИмяПланаОбмена
	|	И НЕ ПланОбмена.ПометкаУдаления
	|	И ПланОбмена.Ссылка <> &ЭтотУзел
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ИмяПланаОбмена", Объект.ИмяПланаОбмена);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзел", ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(Объект.ИмяПланаОбмена));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// возвращаемое значение функции
	СписокНастроекОбмена = Новый СписокЗначений;
	
	Пока Выборка.Следующий() Цикл
		
		СписокНастроекОбмена.Добавить(Выборка.Ссылка, Выборка.Представление);
		
	КонецЦикла;
	
	Возврат СписокНастроекОбмена;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьГруппыДополнительнойИнформации()
	
	// если в таблице информации статистике есть хотя бы одна строка с сопоставлением меньшим 100%,
	// то группу дополнительной информации делаем видимой
	МассивСтрок = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("ИндексКартинки", 1));
	
	Элементы.ГруппаДополнительнойИнформации.Видимость = (МассивСтрок.Количество() > 0);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеСтатистикиСопоставления()
	Перем ДанныеСтатистикиСопоставления;
	
	ИмяФайла = ИмяФайлаДанныхСтатистикиСопоставления(Объект.ИмяПланаОбмена, Объект.УзелИнформационнойБазы);
	
	Файл = Новый Файл(ИмяФайла);
	
	Если Файл.Существует() Тогда
		
		ДанныеСтатистикиСопоставления = ЗначениеИзФайла(ИмяФайла);
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеСтатистикиСопоставления) <> Тип("Структура") Тогда
		
		ДанныеСтатистикиСопоставления = Новый Структура("ИдентификаторФайлаПакетаДанных, ИнформацияСтатистикиСопоставленияОбъектов");
		
	КонецЕсли;
	
	Возврат ДанныеСтатистикиСопоставления;
	
КонецФункции

&НаСервере
Функция ПакетДанныхЗагруженПолностью()
	
	ТаблицаУспешныхЗагрузок = Объект.ИнформацияСтатистики.Выгрузить(Новый Структура("ДанныеУспешноЗагружены", Истина) ,"ДанныеУспешноЗагружены");
	
	Возврат ТаблицаУспешныхЗагрузок.Количество() = Объект.ИнформацияСтатистики.Количество();
	
КонецФункции

&НаСервере
Функция ВсеТаблицыОбъектовСопоставлены()
	
	Возврат (Объект.ИнформацияСтатистики.Выгрузить(,"КоличествоОбъектовНесопоставленных").Итог("КоличествоОбъектовНесопоставленных") = 0);
	
КонецФункции

&НаСервере
Процедура ПолучитьСтруктуруПроверокПриЗавершенииСопоставления(СтруктураПроверок)
	
	СтруктураПроверок.ПакетДанныхЗагруженПолностью   = ПакетДанныхЗагруженПолностью();
	СтруктураПроверок.ВсеТаблицыОбъектовСопоставлены = ВсеТаблицыОбъектовСопоставлены();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Ключ ИЗ КлючиСтрок Цикл
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", Ключ));
		
		ИндексСтроки = Объект.ИнформацияСтатистики.Индекс(СтрокиТаблицы[0]);
		
		ИндексыСтрок.Добавить(ИндексСтроки);
		
	КонецЦикла;
	
	Возврат ИндексыСтрок;
	
КонецФункции

&НаСервере
Функция УдалитьИмяКлассаИзИмениОбъекта(Знач Результат)
	
	Результат = СтрЗаменить(Результат, "ДокументСсылка.", "");
	Результат = СтрЗаменить(Результат, "СправочникСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланВидовХарактеристикСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланСчетовСсылка.", "");
	Результат = СтрЗаменить(Результат, "ПланВидовРасчетаСсылка.", "");
	Результат = СтрЗаменить(Результат, "БизнесПроцессСсылка.", "");
	Результат = СтрЗаменить(Результат, "ЗадачаСсылка.", "");
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьСостояниеОбменовДанными(РезультатЗагрузкиДанных, РезультатВыгрузкиДанных, Знач УзелИнформационнойБазы)
	
	СостояниеОбменовДанными = РегистрыСведений.СостояниеОбменовДанными.СостояниеОбменовДаннымиДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
	
	РезультатЗагрузкиДанных = СостояниеОбменовДанными["РезультатЗагрузкиДанных"];
	РезультатВыгрузкиДанных = СостояниеОбменовДанными["РезультатВыгрузкиДанных"];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяФайлаДанныхСтатистикиСопоставления(ИмяПланаОбмена, УзелИнформационнойБазы)
	
	Ключ = "ДанныеСтатистикиСопоставления[ИмяПланаОбмена][КодУзла]";
	
	Ключ = СтрЗаменить(Ключ, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	Ключ = СтрЗаменить(Ключ, "[КодУзла]",        ОбщегоНазначения.ПолучитьЗначениеРеквизита(УзелИнформационнойБазы, "Код"));
	
	Возврат ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(КаталогВременныхФайлов(), Ключ);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеСтатистикиСопоставления(ИмяПланаОбмена, УзелИнформационнойБазы, Знач ИнформацияСтатистики, ИдентификаторФайлаПакетаДанных)
	
	Если ТипЗнч(ИнформацияСтатистики) = Тип("ДанныеФормыКоллекция") Тогда
		
		ИнформацияСтатистики = ИнформацияСтатистики.Выгрузить();
		
	КонецЕсли;
	
	ДанныеСтатистикиСопоставления = Новый Структура;
	ДанныеСтатистикиСопоставления.Вставить("ИдентификаторФайлаПакетаДанных",            ИдентификаторФайлаПакетаДанных);
	ДанныеСтатистикиСопоставления.Вставить("ИнформацияСтатистикиСопоставленияОбъектов", ИнформацияСтатистики);
	
	ЗначениеВФайл(ИмяФайлаДанныхСтатистикиСопоставления(ИмяПланаОбмена, УзелИнформационнойБазы), ДанныеСтатистикиСопоставления);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВременныйКаталогСообщенийОбмена(ИмяВременногоКаталога)
	
	Если Не ПустаяСтрока(ИмяВременногоКаталога) Тогда
		
		Попытка
			УдалитьФайлы(ИмяВременногоКаталога);
			ИмяВременногоКаталога = "";
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяКаталогаНаСервере(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы)
	
	Возврат РегистрыСведений.НастройкиТранспортаОбмена.ИмяКаталогаОбменаИнформацией(ВидТранспортаСообщенийОбмена, УзелИнформационнойБазы);
	
КонецФункции

&НаСервереБезКонтекста
Функция УзелИнформационнойБазыИспользуетсяВСценарииОбмена(УзелИнформационнойБазы)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 1 1
	|ИЗ
	|	Справочник.СценарииОбменовДанными.НастройкиОбмена КАК СценарииОбменовДаннымиНастройкиОбмена
	|ГДЕ
	|		 СценарииОбменовДаннымиНастройкиОбмена.УзелИнформационнойБазы = &УзелИнформационнойБазы
	|	И НЕ СценарииОбменовДаннымиНастройкиОбмена.Ссылка.ПометкаУдаления
	|";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НА КЛИЕНТЕ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализацияМастераНаКлиенте();
	
	УстановитьВидимостьНаКлиенте();
	
	мЗакрытьФормуБезусловно = Ложь;
	
	Если ВыполнитьСопоставлениеПриОткрытии Тогда
		
		// если необходимо выполнить сопоставление при открытии помощника,
		// то переходим сразу к странице загрузки информации статистики при открытии
		ИзменитьНомерСтраницы(+1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Выйти из помощника интерактивного обмена данными?'");
	
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	// удаляем временный каталог
	УдалитьВременныйКаталогСообщенийОбмена(Объект.ИмяВременногоКаталогаСообщенийОбмена);
	
	Оповестить("ЗакрытаФормаПомощникаСопоставленияОбъектов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыСопоставленияОбъектов" Тогда
		
		Отказ = Ложь;
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, Параметр);
		
		Если Отказ Тогда
			Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
		Иначе
			
			РазвернутьДеревоИнформацииСтатистики(Параметр.КлючУникальности);
			
			Состояние(НСтр("ru = 'Сбор информации завершен'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОбновитьИнформациюСопоставленияДляСтроки(Команда)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.ДеревоИнформацииСтатистики.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		
		НСтрока = НСтр("ru = 'Выберите имя таблицы в поле статистической информации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИнформацияСтатистики",, Отказ);
		Возврат;
	КонецЕсли;
	
	КлючиСтрок = ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки);
	
	Если КлючиСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючиСтрок[КлючиСтрок.ВГраница()]);
		
		Состояние(НСтр("ru = 'Сбор информации завершен'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформациюСопоставленияПолностью(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Сбор информации завершен'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтоматическоеСопоставлениеПоУмолчанию(Команда)
	
	НСтрока = НСтр("ru = 'Автоматическое сопоставление может занять много времени. Продолжить?'");
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется автоматическое сопоставление по умолчанию...'"));
		
		ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюПоСтрокеНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При выполнении автоматического сопоставления возникли ошибки'"));
		
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Автоматическое сопоставление завершено'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхВсехТаблиц(Команда)
	
	НСтрока = НСтр("ru = 'Выполнить загрузку всех данных в информационную базу?'");
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаДополнительнойИнформации.Видимость Тогда
		
		НСтрока = НСтр("ru = 'Имеются несопоставленные объекты!
					|При загрузке данных будут созданы дубли несопоставленных объектов. Продолжить?'");
		//
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		КлючТекущейСтроки = ТекущиеДанные.Ключ;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	КлючиСтрок = Новый Массив;
	
	ПолучитьКлючиВсехСтрок(КлючиСтрок, ДеревоИнформацииСтатистики.ПолучитьЭлементы());
	
	Если КлючиСтрок.Количество() > 0 Тогда
		
		Состояние(НСтр("ru = 'Выполняется загрузка данных...'"));
		
		ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		НСтрока = НСтр("ru = 'При загрузке данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		//
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
			
		КонецЕсли;
		
	Иначе
		РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
		
		Состояние(НСтр("ru = 'Загрузка данных завершена.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхДляСтроки(Команда)
	
	Отказ = Ложь;
	
	ВыделенныеСтроки = Элементы.ДеревоИнформацииСтатистики.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		НСтрока = НСтр("ru = 'Выберите имя таблицы в поле статистической информации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"ДеревоИнформацииСтатистики",, Отказ);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверкуНаличияСопоставленныхОбъектов(Отказ, ВыделенныеСтроки);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	КлючиСтрок = ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки);
	
	Если КлючиСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется загрузка данных...'"));
	
	ВыполнитьЗагрузкуДанныхНаСервере(Отказ, КлючиСтрок);
	
	Если Отказ Тогда
		
		НСтрока = НСтр("ru = 'При загрузке данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		//
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
			
		КонецЕсли;
		
	Иначе
		
		РазвернутьДеревоИнформацииСтатистики(КлючиСтрок[КлючиСтрок.ВГраница()]);
		
		Состояние(НСтр("ru = 'Загрузка данных завершена.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставления(Команда)
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ИспользоватьПредварительныйПросмотр Тогда
		Предупреждение(НСтр("ru = 'Для типа данных нельзя выполнить сопоставление объектов.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",            ТекущиеДанные.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника", ТекущиеДанные.ТипОбъектаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",           ТекущиеДанные.ПоляТаблицы);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",     ТекущиеДанные.ПоляПоиска);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",            ТекущиеДанные.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",            ТекущиеДанные.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ЭтоУдалениеОбъекта",             ТекущиеДанные.ЭтоУдалениеОбъекта);
	ПараметрыФормы.Вставить("ДанныеУспешноЗагружены",         ТекущиеДанные.ДанныеУспешноЗагружены);
	
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",               Объект.УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена",              Объект.ИмяФайлаСообщенияОбмена);
	
	ОткрытьФорму("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма", ПараметрыФормы, ЭтаФорма, ТекущиеДанные.Ключ);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИнформацииСтатистикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСопоставления(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКаталогОбменаИнформацией(Команда)
	
	// Вызов сервера без контекста
	ИмяКаталога = ПолучитьИмяКаталогаНаСервере(Объект.ВидТранспортаСообщенийОбмена, Объект.УзелИнформационнойБазы);
	
	Если ПустаяСтрока(ИмяКаталога) Тогда
		Предупреждение(НСтр("ru = 'Каталог обмена информацией не задан!'"));
		Возврат;
	КонецЕсли;
	
	// открываем каталог в приложении explorer
	ЗапуститьПриложение(ИмяКаталога);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиОткрытияКаталогаОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыТранспортаСообщенийОбмена(Команда)
	
	Отбор              = Новый Структура("Узел", Объект.УзелИнформационнойБазы);
	ЗначенияЗаполнения = Новый Структура("Узел", Объект.УзелИнформационнойБазы);
	
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ЗагрузкаДанных");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных(Команда)
	
	ОбменДаннымиКлиент.ПерейтиВЖурналРегистрацииСобытийДанныхМодально(Объект.УзелИнформационнойБазы, ЭтаФорма, "ВыгрузкаДанных");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МАСТЕРА

&НаКлиенте
Процедура мДалее(Команда)
	
	ИзменитьНомерСтраницы(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура мНазад(Команда)
	
	ИзменитьНомерСтраницы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура мГотово(Команда)
	
	Если Не УзелИспользуетсяВСценарииОбмена
		И ОткрытьПомощникСозданияСценарияОбменаДанными Тогда
		
		ПараметрыФормы = Новый Структура("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
		
		ОткрытьФормуМодально("Справочник.СценарииОбменовДанными.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
		
	КонецЕсли;
	
	мЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура мОтмена(Команда)
	
	мЗакрытьФормуБезусловно = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура мСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте()
	
	// устанавливаем текущую страницу мастера
	Элементы.СтраницыМастера.ТекущаяСтраница = мСтраницыМастера[мТекущийНомерСтраницы];
	
	// устанавливаем текущую страницу кнопок мастера
	Элементы.КнопкиМастера.ТекущаяСтраница = мКнопкиМастера[мТекущийНомерСтраницы];
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерСтраницы(Итератор)
	
	Отказ = Ложь;
	
	// изменяем номер текущей страницы
	Инкремент(мТекущийНомерСтраницы, Итератор);
	
	// обработчики событий при смене страницы мастера
	ВыполнитьОбработчикиСобытийМастераПриСменеСтраницы(Отказ, Итератор > 0);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// отображаем новую страницу мастера
	УстановитьВидимостьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияМастераНаКлиенте()
	
	мНомераСтраницИВариантыМастера = Новый Соответствие;
	мНомераСтраницИВариантыМастера.Вставить("ВыполнитьСопоставление", 20);
	
	мТекущийНомерСтраницы = мНомераСтраницИВариантыМастера[ВариантРаботыМастера];
	
	мСтраницыМастера = Новый Соответствие;
	мКнопкиМастера   = Новый Соответствие;
	
	// СТРАНИЦЫ МАСТЕРА
	
	// ВыполнитьСопоставление
	мСтраницыМастера.Вставить(20, Элементы.СтраницаНачала);
	мСтраницыМастера.Вставить(21, Элементы.СтраницаИнформацииСтатистики);
	мСтраницыМастера.Вставить(22, Элементы.СтраницаОжидания);
	мСтраницыМастера.Вставить(23, Элементы.СтраницаОкончанияСопоставления);
	
	// КНОПКИ МАСТЕРА
	
	// ВыполнитьСопоставление
	мКнопкиМастера.Вставить(20, Элементы.КнопкиНачала);
	мКнопкиМастера.Вставить(21, Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(22, Элементы.КнопкиОжидания);
	мКнопкиМастера.Вставить(23, Элементы.КнопкиОкончания);
	
КонецПроцедуры

&НаКлиенте
Процедура Инкремент(Число, Знач Итератор = 1)
	
	Число = Число + Итератор;
	
КонецПроцедуры

// ===== {ОБРАБОТЧИКИ СОБЫТИЙ СМЕНЫ СТРАНИЦЫ МАСТЕРА} Начало

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийМастераПриСменеСтраницы(Отказ, ЭтоУвеличениеНомераСтраницы)
	
	ПриИзмененииНомераСтраницы(Отказ);
	
	Если ЭтоУвеличениеНомераСтраницы Тогда
		
		ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
		
		Если Не Отказ Тогда
			
			ВыполнитьДействияПриПереходеНаСледующуюСтраницу(Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьПроверкиПриПереходеНаПредыдущуюСтраницу(Отказ);
		
		Если Не Отказ Тогда
			
			ВыполнитьДействияПриПереходеНаПредыдущуюСтраницу(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Если ЭтоУвеличениеНомераСтраницы Тогда
			
			Инкремент(мТекущийНомерСтраницы, -1);
			
		Иначе
			
			Инкремент(мТекущийНомерСтраницы, +1);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНомераСтраницы(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ)
	
	Если мТекущийНомерСтраницы = 21 Тогда
		
		Если Объект.УзелИнформационнойБазы.Пустая() Тогда
			
			НСтрока = НСтр("ru = 'Укажите узел информационной базы'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.УзелИнформационнойБазы",, Отказ);
			
		ИначеЕсли Объект.ВидТранспортаСообщенийОбмена.Пустая() Тогда
			
			НСтрока = НСтр("ru = 'Укажите вид транспорта сообщений обмена'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ВидТранспортаСообщенийОбмена",, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли мТекущийНомерСтраницы = 22 Тогда
		
		СтруктураПроверок = Новый Структура("ПакетДанныхЗагруженПолностью, ВсеТаблицыОбъектовСопоставлены", Ложь, Ложь);
		
		ПолучитьСтруктуруПроверокПриЗавершенииСопоставления(СтруктураПроверок);
		
		Если Не СтруктураПроверок.ПакетДанныхЗагруженПолностью Тогда
			
			НСтрока = НСтр("ru = 'Не все данные загружены. Все равно продолжить?'");
			Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СтруктураПроверок.ВсеТаблицыОбъектовСопоставлены Тогда
			
			НСтрока = НСтр("ru = 'Не все объекты сопоставлены. Все равно продолжить?'");
			Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриПереходеНаСледующуюСтраницу(Отказ)
	
	Если мТекущийНомерСтраницы = 21 Тогда
		
		ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
		
		Если ТекущиеДанные <> Неопределено Тогда
			
			КлючТекущейСтроки = ТекущиеДанные.Ключ;
			
		КонецЕсли;
		
		ИнформацияСтатистикиАктуальна = Истина;
		
		Состояние(НСтр("ru = 'Выполняется чтение заголовка пакета данных...'"));
		
		ПолучитьЗаголовокПакетаДанныхНаСервере(Отказ, ИнформацияСтатистикиАктуальна);
		
		Если Отказ Тогда
			
			// Чтение входящего сообщения обмена произошло с ошибками
			// Переходим к шагу выгрузки исходящего сообщения обмена
			
			Предупреждение(НСтр("ru = 'В процессе загрузки данных возникли ошибки.'"));
			
			Отказ = Ложь;
			
			ИзменитьНомерСтраницы(+1);
			
		ИначеЕсли Не ИнформацияСтатистикиАктуальна Тогда
			
			// если информация устарела (есть новый файл пакета данных), то обновляем ее
			ОбновитьИнформациюСопоставленияПолностью(Неопределено);
			
		Иначе
			
			РазвернутьДеревоИнформацииСтатистики(КлючТекущейСтроки);
			
		КонецЕсли;
		
	ИначеЕсли мТекущийНомерСтраницы = 22 Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьВыгрузкуНаКлиенте", 0.1, Истина);
		
	ИначеЕсли мТекущийНомерСтраницы = 23 Тогда
		
		ПолучитьСостояниеОбменовДанными(РезультатЗагрузкиДанных, РезультатВыгрузкиДанных, Объект.УзелИнформационнойБазы);
		
		ОбновитьОтображениеЭлементовСтатусаОбменаДанными();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаПредыдущуюСтраницу(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриПереходеНаПредыдущуюСтраницу(Отказ)
	
КонецПроцедуры

// ===== {ОБРАБОТЧИКИ СОБЫТИЙ СМЕНЫ СТРАНИЦЫ МАСТЕРА} Окончание

&НаКлиенте
Процедура ВыполнитьПроверкуНаличияСопоставленныхОбъектов(Отказ, ВыделенныеСтроки)
	
	Для Каждого ИдентификаторСтроки ИЗ ВыделенныеСтроки Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистики.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.КоличествоОбъектовНесопоставленных <> 0 Тогда
			
			НСтрока = НСтр("ru = 'Имеются несопоставленные объекты!
						|При загрузке данных будут созданы дубли несопоставленных объектов. Продолжить?'");
			//
			Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКлючиВыделенныхСтрок(ВыделенныеСтроки)
	
	// возвращаемое значение функции
	КлючиСтрок = Новый Массив;
	
	Для Каждого ИдентификаторСтроки ИЗ ВыделенныеСтроки Цикл
		
		СтрокаДерева = ДеревоИнформацииСтатистики.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Не ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			
			КлючиСтрок.Добавить(СтрокаДерева.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат КлючиСтрок;
КонецФункции

&НаКлиенте
Процедура ПолучитьКлючиВсехСтрок(КлючиСтрок, КоллекцияЭлементовДерева)
	
	Для Каждого СтрокаДерева ИЗ КоллекцияЭлементовДерева Цикл
		
		Если Не ПустаяСтрока(СтрокаДерева.Ключ) Тогда
			
			КлючиСтрок.Добавить(СтрокаДерева.Ключ);
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьКлючиВсехСтрок(КлючиСтрок, КоллекцияЭлементов);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуНаКлиенте()
	
	Отказ = Ложь;
	
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, Объект.УзелИнформационнойБазы, Ложь, Истина, Объект.ВидТранспортаСообщенийОбмена);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'В процессе выгрузки данных возникли ошибки.'"));
		
	КонецЕсли;
	
	// перелистываем страницу помощника на следующую
	ИзменитьНомерСтраницы(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиОткрытияКаталогаОбмена()
	
	Элементы.ОткрытьКаталогОбменаИнформацией.Доступность = Не (Объект.ВидТранспортаСообщенийОбмена = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.EMAIL"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеЭлементовСтатусаОбменаДанными()
	
	Элементы.СтраницыСтатусаЗагрузкиДанных.ТекущаяСтраница = Элементы[СтраницыСтатусаЗагрузкиДанных()[РезультатЗагрузкиДанных]];
	Элементы.СтраницыСтатусаВыгрузкиДанных.ТекущаяСтраница = Элементы[СтраницыСтатусаВыгрузкиДанных()[РезультатВыгрузкиДанных]];
	
	Элементы.ПерейтиВЖурналРегистрацииСобытийЗагрузкиДанных.Заголовок = ЗаголовкиГиперссылокЗагрузкиДанных()[РезультатЗагрузкиДанных];
	Элементы.ПерейтиВЖурналРегистрацииСобытийВыгрузкиДанных.Заголовок = ЗаголовкиГиперссылокВыгрузкиДанных()[РезультатВыгрузкиДанных];
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоИнформацииСтатистики(КлючСтроки = "")
	
	КоллекцияЭлементов = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Элементы.ДеревоИнформацииСтатистики.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
	// Позиционирование курсора в дереве значений
	Если Не ПустаяСтрока(КлючСтроки) Тогда
		
		ИдентификаторСтроки = 0;
		
		ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИдентификаторСтроки, ДеревоИнформацииСтатистики.ПолучитьЭлементы(), КлючСтроки, Ложь);
		
		Элементы.ДеревоИнформацииСтатистики.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИдентификаторСтроки, КоллекцияЭлементовДерева, КлючСтроки, ПрекратитьПоиск)
	
	Для Каждого СтрокаДерева ИЗ КоллекцияЭлементовДерева Цикл
		
		Если ПрекратитьПоиск Тогда
			Возврат;
		КонецЕсли;
		
		Если СтрокаДерева.Ключ = КлючСтроки Тогда
			
			ИдентификаторСтроки = СтрокаДерева.ПолучитьИдентификатор();
			
			ПрекратитьПоиск = Истина;
			
			Возврат;
			
		КонецЕсли;
		
		КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
		
		Если КоллекцияЭлементов.Количество() > 0 Тогда
			
			ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(ИдентификаторСтроки, КоллекцияЭлементов, КлючСтроки, ПрекратитьПоиск);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//

&НаКлиенте
Функция СтраницыСтатусаЗагрузкиДанных()
	
	Если ТипЗнч(ПолеСтраницыСтатусаЗагрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеСтраницыСтатусаЗагрузкиДанных = ОбменДаннымиКлиент.СтраницыСтатусаЗагрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеСтраницыСтатусаЗагрузкиДанных;
	
КонецФункции

&НаКлиенте
Функция СтраницыСтатусаВыгрузкиДанных()
	
	Если ТипЗнч(ПолеСтраницыСтатусаВыгрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеСтраницыСтатусаВыгрузкиДанных = ОбменДаннымиКлиент.СтраницыСтатусаВыгрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеСтраницыСтатусаВыгрузкиДанных;
КонецФункции

&НаКлиенте
Функция ЗаголовкиГиперссылокЗагрузкиДанных()
	
	Если ТипЗнч(ПолеЗаголовкиГиперссылокЗагрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеЗаголовкиГиперссылокЗагрузкиДанных = ОбменДаннымиКлиент.ЗаголовкиГиперссылокЗагрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеЗаголовкиГиперссылокЗагрузкиДанных;
	
КонецФункции

&НаКлиенте
Функция ЗаголовкиГиперссылокВыгрузкиДанных()
	
	Если ТипЗнч(ПолеЗаголовкиГиперссылокВыгрузкиДанных) <> Тип("Структура") Тогда
		
		ПолеЗаголовкиГиперссылокВыгрузкиДанных = ОбменДаннымиКлиент.ЗаголовкиГиперссылокВыгрузкиДанных();
		
	КонецЕсли;
	
	Возврат ПолеЗаголовкиГиперссылокВыгрузкиДанных;
КонецФункции
