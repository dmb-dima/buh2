Перем ПрефиксСтраниц;
Перем НомерСтраницы;
Перем ИмяИБ, ПутьКИБ;
Перем ИмяФайлаПравил, ИмяФайлаОбработки, ИмяФайлаДанных, ПутьВыгрузкиЗагрузки;
Перем ЭтапКонвертации;

Перем v7; // сервер 7.7

Перем ОбработкаОбмена;

Перем БазоваяПоставка;

Перем ДатаНачала, ДатаОкончания, ШагПериода;

Перем ФайлОбмена, Организация;

Перем ШрифтОбычный, ШрифтЖирный;

///////////////////////////////////////////////////////////////////////////////////////////////////
//Стандартные обработчики формы

Процедура ПриОткрытии()
	
	НомерСтраницы = 0;
	
КонецПроцедуры

// Процедура инициации процесса конвертации из ИБ
//
Процедура ЗагрузитьИзИБНажатие(Элемент)
	
	ИмяФайлаДанных = ПутьВыгрузкиЗагрузки + "ConvData.xml";
	
	ПрефиксСтраниц = "ИБ";
	
	ПолучитьСписокИБ();
	
	Шагнуть();
	
КонецПроцедуры

// Процедура инициации процесса конвертации из файла
//
Процедура ЗагрузитьИзФайлаНажатие(Элемент)
	
	ИмяФайлаДанных = "";
	
	ПрефиксСтраниц = "Ф";
	
	Шагнуть();
	
КонецПроцедуры

// Процедура отработки движения вперед
//
Процедура ДалееНажатие(Элемент)
	
	Шагнуть();
	ОтработатьНажатиеВперед();
	
КонецПроцедуры

// Процедура возврата к первой странице
//
Процедура ВНачалоНажатие(Элемент)
	
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы.СтраницаНачало;
	НомерСтраницы = 0;
	ОстаткиОбороты = 0;
	
КонецПроцедуры

// Процедура записывает путь в соответствующую переменную
//
Процедура ТаблицаПутиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		ПутьКИБ = "";
		ИмяИБ = "";
	Иначе
		ПутьКИБ = Элемент.ТекущиеДанные.Путь;
		ИмяИБ = Элемент.ТекущиеДанные.Имя;
	КонецЕсли;
	
КонецПроцедуры

// Процедура печати списка ошибок
//
Процедура ПечатьОшибкиНажатие(Элемент)
	
	Макет = ПолучитьМакет("СписокОшибок");
	ОтчетОбОшибках = Новый ТабличныйДокумент;
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
	
	Если ПрефиксСтраниц = "ИБ" Тогда
		ОбластьШапка.Параметры.ИмяИБ = ИмяИБ;
		ОбластьШапка.Параметры.ПутьКИБ = ПутьКИБ;
	Иначе
		ОбластьШапка.Параметры.ИмяИБ = "Файл данных";
		ОбластьШапка.Параметры.ПутьКИБ = ИмяФайлаВыгруженныхДанных;
	КонецЕсли;
	
	ОтчетОбОшибках.Вывести(ОбластьШапка);
	
	Для Каждого СтрокаТаблицы Из ТаблицаОшибок Цикл
		ОбластьСтрока.Параметры.Этап = СтрокаТаблицы.Этап;
		ОбластьСтрока.Параметры.Ошибка = СтрокаТаблицы.Ошибка;
		ОбластьСтрока.Параметры.Рекомендации = СтрокаТаблицы.Рекомендации;
		ОбластьСтрока.Параметры.Расшифровка = СтрокаТаблицы.Расшифровка;

		ОтчетОбОшибках.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ОтчетОбОшибках, , , "Список ошибок конвертации данных из 1С: 7.7", );
	
КонецПроцедуры

// Процедура отработки изменения пути к файлу выгрузки
//
Процедура ПутьКФайлуПриИзменении(Элемент)
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= "";
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= "";
	ЭлементыФормы.НадписьОрганизация.Заголовок	= "";
	ЭлементыФормы.НадписьПериод.Заголовок		= "";
	ЭлементыФормы.НадписьДата.Заголовок			= "";
	
	Если НЕ ФайлОбмена = Неопределено Тогда
		ФайлОбмена.Закрыть();
	КонецЕсли;
	
	ИнициализироватьОбмен(ИмяФайлаВыгруженныхДанных, Истина);
	
КонецПроцедуры

// Процедура выбора файла выгрузки
//
Процедура ИмяФайлаВыгруженныхДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент);
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
Процедура ИмяФайлаВыгруженныхДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры

// Процедура продолжения работы в том же варианте конвертации
//
Процедура ПродолжитьНажатие(Элемент)
	
	НомерСтраницы = 0;
	Шагнуть();
	
КонецПроцедуры

// Обработчик нажатия кнопки ПериодВперед
//
Процедура ПериодВпередНажатие(Элемент)
	
	ИзменитьПериод(ШагПериода);
	
КонецПроцедуры

// Обработчик нажатия кнопки ПериодНазад
//
Процедура ПериодНазадНажатие(Элемент)
	
	ИзменитьПериод(-ШагПериода);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции модуля формы

// Процедура отвечает за перемещение по страницам формы
//
Процедура Шагнуть(КоличествоШагов = 1)
	
	Если НомерСтраницы = 0 Тогда
		ОстаткиОбороты = ?(ОстаткиОбороты <> 0, ОстаткиОбороты, 0);
		
		Если ОстаткиОбороты = 0 Тогда
			ШагПериода = 12;
			ДатаНачала = НачалоГода(ТекущаяДата());
			ДатаОкончания = КонецГода(ДатаНачала);
		КонецЕсли;
		ИзменитьПредставлениеПериода();
		
		Если ПрефиксСтраниц = "Ф" Тогда
			ВыбФайл = Новый Файл("C:\v77_v8\Exp77_80.xml");
			Если ВыбФайл.Существует() Тогда
				ИмяФайлаВыгруженныхДанных = ВыбФайл.ПолноеИмя;
				ИнициализироватьОбмен(ВыбФайл.ПолноеИмя, Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	НомерСтраницы = НомерСтраницы + КоличествоШагов;
	
	Если НомерСтраницы = 1 Тогда
		ТекстСообщения = "";
		ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаПроцесс;
	КонецЕсли;
	
	Если НомерСтраницы = 2 И ПрефиксСтраниц = "Ф" Тогда
		Если НЕ ЗначениеЗаполнено(ИмяФайлаВыгруженныхДанных) Тогда
			Сообщить("Укажите путь к файлу данных.", СтатусСообщения.Важное);
			НомерСтраницы = НомерСтраницы - 1;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерСтраницы = 2 И ПрефиксСтраниц = "ИБ" Тогда
		Если ТаблицаПути.Количество() = 0 Тогда
			Сообщить("Список информационных баз 1С:Предприятия 7.7 пуст.", СтатусСообщения.Важное);
			НомерСтраницы = НомерСтраницы - 1;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяСтраницы = ПрефиксСтраниц + "Страница" + НомерСтраницы;
	ЭлементыФормы.ПанельКонвертации.ТекущаяСтраница = ЭлементыФормы.ПанельКонвертации.Страницы[ИмяСтраницы];
	
КонецПроцедуры

// Процедура отработки нажатия кнопки дале
//
Процедура ОтработатьНажатиеВперед()
	
	// Для загрузки из ИБ
	Если ПрефиксСтраниц = "ИБ" Тогда
		Если НомерСтраницы = 2 Тогда
			
			Перерисовать(1, "ВОчереди");
			
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточника"].Заголовок = ИмяИБ;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточникаБазовая"].Заголовок = ИмяИБ;
			
			КонвертацияИнформационнойБазы();
			
			ОтобразитьТекстСостояния("Окончание переноса данных: " + ТекущаяДата(), , 0);
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Для загрузки из файла
	Если ПрефиксСтраниц = "Ф" Тогда
		Если НомерСтраницы = 2 Тогда
			
			Перерисовать(3, "ВОчереди");
			
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаПроцесс;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточника"].Заголовок = ИмяФайлаВыгруженныхДанных;
			ЭлементыФормы[ПрефиксСтраниц + "НадписьИмяИсточникаБазовая"].Заголовок = ИмяФайлаВыгруженныхДанных;
			
			ЗагрузкаИнформационнойБазы();
			
			ОтобразитьТекстСостояния("Окончание переноса данных: " + ТекущаяДата(), , 0);
			
			КонвертацияЗавершена();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерСтраницы = 2 Тогда
		
		ЭлементыФормы[ПрефиксСтраниц + "ДалееКон"].Доступность = Истина;
		
		// Завершение процесса
		Если ТаблицаОшибок.Количество() > 0 Тогда
			
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаОшибка;
			
		ИначеЕсли БазоваяПоставка Тогда
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехБазовая;
		Иначе
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы.ИБПанельКонецРезультат.Страницы.СтраницаУспехПроф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заносит информацию об ошибках в специальную таблицу
//
Процедура ЗафиксироватьОшибку(Этап, ТекстОшибки, ТекстРекомендации = "", Расшифровка = Неопределено)
	
	ОтобразитьТекстСостояния(ТекстОшибки, Истина);
	
	Если НЕ ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;
	
	Если Этап = "Проверка данных" И НЕ ЗначениеЗаполнено(ТекстРекомендации) Тогда
		ТекстРекомендации = "Проверьте, все ли загруженные документы были проведены.";
	КонецЕсли;
	
	НоваяОшибка = ТаблицаОшибок.Добавить();
	НоваяОшибка.Этап = Этап;
	НоваяОшибка.Ошибка = ТекстОшибки;
	НоваяОшибка.Рекомендации = ТекстРекомендации;
	НоваяОшибка.Расшифровка = Расшифровка;
	
КонецПроцедуры

// Процедура инициализации универсальной обработки
//
Функция ИнициализироватьОбмен(ИмяФайла, ФормироватьСведения = Ложь)
	
	Попытка
		ОбработкаОбмена = Обработки.УниверсальныйОбменДаннымиXML.Создать();
		ОбработкаОбмена.РежимОбмена = "Загрузка";
		ВыбФайл = Новый Файл(ИмяФайла);
		Если ВыбФайл.Существует() Тогда
			ИмяФайлаОбмена = ВыбФайл.ПолноеИмя;
			ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаОбмена;	
			ОбработкаОбмена.ОткрытьФайлЗагрузки(Истина);
			
			Если НЕ ОбработкаОбмена.мБылиПрочитаныПравилаОбменаПриЗагрузке Тогда
				ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
				Возврат Ложь;
			КонецЕсли;
			
			Если БазоваяПоставка И НЕ ФормироватьСведения Тогда //для базовой отдельно обработаем загрузку сведений об организации
				Если НЕ ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена) Тогда
					ЗафиксироватьОшибку(ЭтапКонвертации, "Отсутствуют сведения об организации", "Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".");
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ПрефиксСтраниц = "Ф" И ФормироватьСведения Тогда
				СформироватьСведенияОФайле();
			КонецЕсли;
			Возврат Истина;
		Иначе
			ЗафиксироватьОшибку(ЭтапКонвертации, "Не найдена информация о выгруженных данных", "В каталоге, из которого производится загрузка, файл данных отсутствует. Укажите корректный путь к файлу данных.");
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось инициализировать обработку загрузки данных", "Структура файла данных, из которого производится загрузка нарушена. Возможно, при выгрузке были использованы некорректные правила выгрузки данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".");
		ЭлементыФормы.ИмяФайлаВыгруженныхДанных.Значение = "";
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Формирует внешнее представление периода, заданного датами начала и окончания периода. 
// Процедура используется в качестве обработчика события для полей ввода
// ДатаНачала и ДатаОкончания. Назначается методом ПодключитьОбработчикИзмененияДанных
// в обработчике "При открытии"
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//
//
// Параметры:
//  
// 
Процедура СформироватьСведенияОФайле()

	ОткрытьФайлДанных(ИмяФайлаВыгруженныхДанных);

	ТипДата                  = Тип("Дата");
	
	// Основные сведения
	Конфигурация = ФайлОбмена.ПолучитьАтрибут("Конфигурация");
	НомерРелиза = ФайлОбмена.ПолучитьАтрибут("НомерРелиза");
	Организация = ФайлОбмена.ПолучитьАтрибут("Организация");
	
	// Период выгрузки
	ДатаНачала = XMLЗначение(ТипДата, СокрП(ФайлОбмена.ПолучитьАтрибут("НачалоПериодаВыгрузки")));
	ДатаОкончания = XMLЗначение(ТипДата, СокрП(ФайлОбмена.ПолучитьАтрибут("ОкончаниеПериодаВыгрузки")));
		
	Если ДатаОкончания < ДатаНачала Тогда
		ПредставлениеПериодаВыгрузки = "";
	Иначе		
		Если ДатаНачала = ДатаОкончания Тогда
			Если (НачалоДня(НачалоГода(ДатаНачала)) =  НачалоДня(ДатаНачала)) Тогда
				ТекстПериода="Остатки на начало " + Формат(Год(ДатаОкончания),"ЧГ=0") + " г.";
			Иначе
				ТекстПериода="Остатки на дату " + Формат(ДатаНачала, "ДЛФ=DD");
			КонецЕсли;
			ПредставлениеПериодаВыгрузки = ТекстПериода;
		Иначе
			Если (Год(ДатаОкончания) =  Год(ДатаНачала)) И (НачалоДня(НачалоГода(ДатаНачала)) =  НачалоДня(ДатаНачала)) Тогда
				ТекстПериода="Остатки на начало " + Формат(Год(ДатаОкончания),"ЧГ=0") + " г.";
				ПредставлениеПериодаВыгрузки = ТекстПериода + Строка (" и обороты за период с 1 января по "+ Формат(ДатаОкончания, "ДЛФ=DD"));
			Иначе
				ТекстПериода="Остатки на дату " + Формат(ДатаНачала, "ДЛФ=DD");
				ПредставлениеПериодаВыгрузки = ТекстПериода + Строка (" и обороты за период с " + Формат(ДатаНачала, "ДЛФ=DD") + " по "+ Формат(ДатаОкончания, "ДЛФ=DD"));
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	//Дата создания файла
	ДатаВыгрузкиДанных = XMLЗначение(ТипДата, СокрП(ФайлОбмена.ПолучитьАтрибут("ДатаВыгрузки")));
	
	// Размещение надписей на форме
	ЭлементыФормы.НадписьКонфигурация.Заголовок	= Конфигурация;
	ЭлементыФормы.НадписьНомерРелиза.Заголовок	= НомерРелиза;
	ЭлементыФормы.НадписьОрганизация.Заголовок	= Организация;
	ЭлементыФормы.НадписьПериод.Заголовок		= ПредставлениеПериодаВыгрузки;
	ЭлементыФормы.НадписьДата.Заголовок			= Формат(ДатаВыгрузкиДанных, "ДЛФ=DD; ДП=-");
	
КонецПроцедуры // СформироватьПредставлениеПериода() 

// Функция замещает сведения в существующей организации для Базовой поставки
//
Функция ИзменитьСведенияОбОрганизации(ИмяФайлаОбмена)
	
	ОткрытьФайлДанных(ИмяФайлаОбмена);
	
	Попытка
		Организация_ИНН = ФайлОбмена.ПолучитьАтрибут("ИНН");
		Организация_КПП = ФайлОбмена.ПолучитьАтрибут("КПП");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка,
		|	Организации.ИНН,
		|	Организации.КПП
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество() <> 0 Тогда
			ТекОрганизация = Результат.Получить(0);
			Если ТекОрганизация.ИНН <> Организация_ИНН
				ИЛИ ТекОрганизация.КПП <> Организация_КПП Тогда
				Объект = ТекОрганизация.Ссылка.ПолучитьОбъект();
				Объект.ИНН = Организация_ИНН;
				Объект.КПП = Организация_КПП;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
			КонецЕсли;
		КонецЕсли;
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Процедура открывает файл с данными для чтения атрибутов
//
Процедура ОткрытьФайлДанных(ИмяФайла)
	
	// Архивные файлы будем идентифицировать по расширению ".zip"
	Если Найти(ИмяФайла, ".zip") > 0 Тогда
		ИмяФайлаЗагрузкиДанных = ОбработкаОбмена.РаспаковатьZipФайл(ИмяФайлаВыгруженныхДанных);
	Иначе
		ИмяФайлаЗагрузкиДанных = ИмяФайла;
	КонецЕсли; 
	
	ФайлОбмена = Новый ЧтениеXML();
	ФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
	ФайлОбмена.Прочитать();
	
КонецПроцедуры

// Прорисовка последней страницы обработки
//
Процедура КонвертацияЗавершена()
	
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаОшибка;
	Иначе
		
		Если БазоваяПоставка Тогда
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехБазовая;
		Иначе
			ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].ТекущаяСтраница = ЭлементыФормы[ПрефиксСтраниц + "ПанельКонецРезультат"].Страницы.СтраницаУспехПроф;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Перерисовывает все картинки начиная с указанной
//
Процедура Перерисовать(Этап, Состояние = "Ошибка", ОднаКартинка = Ложь)
	
	Если ОднаКартинка Тогда
		
		ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + Этап].Картинка = ОпределитьКартинку(Этап, Состояние);
		Если Состояние = "Выполняется" Тогда
			ТекущийШрифт = ШрифтЖирный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.Одинарная);
		Иначе
			ТекущийШрифт = ШрифтОбычный;
			ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		КонецЕсли;
		ЭлементыФормы[ПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт = ТекущийШрифт;
		ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка = ТекущаяРамка;
		
	Иначе
		
		ТекущаяРамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
		
		Для НомерКартинки = Этап По 5 Цикл
			ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + НомерКартинки].Картинка = ОпределитьКартинку(НомерКартинки, Состояние);
			ЭлементыФормы[ПрефиксСтраниц + "НадписьДействий" + Этап].Шрифт = ШрифтОбычный;
			ЭлементыФормы[ПрефиксСтраниц + "КартинкаДействий" + Этап].Рамка = ТекущаяРамка;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Определение картинки для текущего этапа
//
Функция ОпределитьКартинку(Этап, Состояние)
	
	Если Этап = 1 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Подключение"];
	ИначеЕсли Этап = 2 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Выгрузка"];
	ИначеЕсли Этап = 3 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Загрузка"];
	ИначеЕсли Этап = 4 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Проведение"];
	ИначеЕсли Этап = 5 Тогда
		Картинка = БиблиотекаКартинок["ПереходС77" + Состояние + "_Проверка"];
	КонецЕсли;
	
	Возврат Картинка;
	
КонецФункции

// Процедура изменения периода
//
Процедура ИзменитьПериод(Шаг)
	
	ИсхДата=ДатаНачала;

	ДатаВМесяце=ДобавитьМесяц(ДатаОкончания,Шаг);
	ДатаОкончания=КонецМесяца(ДатаВМесяце); 
	ДатаНачала=НачалоГода(ДатаОкончания);
	
	ИзменитьПредставлениеПериода();
		
КонецПроцедуры // ИзменитьПериод	

// Процедура управление шагом периода
Процедура ОстаткиОборотыПриИзменении(Элемент)
	
	Если ОстаткиОбороты = 0 Тогда
		ШагПериода = ШагПериода;
	ИначеЕсли ОстаткиОбороты = 1 Тогда		
		ШагПериода = 12;
		ДатаОкончания = КонецГода(ДатаНачала);
	Иначе
		ШагПериода = 1;
	КонецЕсли;
	
	ИзменитьПредставлениеПериода();
	
КонецПроцедуры

// Процедура изменяет представление периода выгрузки
//
Процедура ИзменитьПредставлениеПериода()
	
	СтрПериод="";
	Если НачалоМесяца(ДатаОкончания) = ДатаНачала Тогда
		СтрПериод = ПредставлениеПериода(ДатаНачала,ДатаОкончания);
	Иначе
		Если ШагПериода = 1 Тогда
			СтрПериод = "Январь - "+ПредставлениеПериода(НачалоМесяца(ДатаОкончания),ДатаОкончания);
		Иначе                                                             
			СтрПериод = ПредставлениеПериода(НачалоМесяца(ДатаНачала),ДатаОкончания);
		КонецЕсли;			
	КонецЕсли;
	
	ЭлементыФормы.ПериодПереносаДанных.Заголовок = СтрПериод;
	
	Если ОстаткиОбороты = 0 Тогда
		ТекстПериода="Переносить только данные справочников."
	ИначеЕсли ОстаткиОбороты = 1 Тогда
		ТекстПериода="Переносить данные справочников и остатки на начало "
	Иначе
		ТекстПериода="Переносить данные справочников, остатки на начало "
	КонецЕсли;
	
	Если ОстаткиОбороты <> 0 Тогда
		ТекстПериода=ТекстПериода + Формат(Год(ДатаНачала),"ЧГ=0") + " г.";
		Если ШагПериода = 1 Тогда 			
			ТекстПериода = ТекстПериода + Строка (" и обороты за период с 1 января по "+ Формат(ДатаОкончания, "ДЛФ=DD"));
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ПериодПереносаДанныхСтрокой.Заголовок = ТекстПериода;
	
	ЭлементыФормы.НадписьПериодЗаголовок.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодНазад.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодВперед.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодПереносаДанных.Доступность = ОстаткиОбороты <> 0;
	ЭлементыФормы.ПериодРамкаГруппы.Доступность = ОстаткиОбороты <> 0;
	
КонецПроцедуры

// Процедура выводит текст в окно состояния
//
Процедура ОтобразитьТекстСостояния(Текст, Ошибка = Ложь, Картинка = Неопределено)
	
	ТекстСообщения = Текст + Символы.ВК + Символы.ВК;
	//ТекстСообщения = ?(ТекстСообщения = "", Текст, ТекстСообщения + Символы.ВК + "" + Символы.ВК + Текст);
	Если Ошибка Тогда
		ТекстСтатусСообщения = СтатусСообщения.ОченьВажное;
	Иначе
		ТекстСтатусСообщения = СтатусСообщения.Информация;
	КонецЕсли;
	
	Сообщить(ТекстСообщения, ТекстСтатусСообщения);
	
КонецПроцедуры

//***********************************************************
// Процедуры и функции конвертации из информационной базы
//***********************************************************

// Процедура получает из реестра список зарегистрированных ИБ
//
Процедура ПолучитьСписокИБ() 
	Попытка
		ScrptCtrl=Новый COMObject("MSScriptControl.ScriptControl");
		ScrptCtrl.Language="vbscript";
		ScrptCtrl.AddCode("
		|Function Get1CV77Titles()
		|	const HKEY_CURRENT_USER = &H80000001
		|	Set oReg=GetObject(""winmgmts:{impersonationLevel=impersonate}!\\.\root\default:StdRegProv"")
		|	strKeyPath = ""Software\1C\1Cv7\7.7\Titles""
		|	oReg.EnumValues HKEY_CURRENT_USER, strKeyPath, arrValues
		|	strInfo=vbNullString
		|   Get1CV77Titles = strInfo
		|	On Error Resume Next
		|	For i = LBound(arrValues) To UBound(arrValues)
		|		call oReg.GetStringValue(HKEY_CURRENT_USER,strKeyPath,arrValues(i),Value)
		|		strInfo=strInfo & arrValues(i) & vbTab & Value & vbCrLf
		|	Next		
		| 	Get1CV77Titles = strInfo
		|End Function
		|");
		Текст=СокрЛП(ScrptCtrl.Run("Get1CV77Titles"));
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ТаблицаПути.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		Возврат;
	КонецЕсли;
		
	Для Ном=1 По СтрЧислоСтрок(Текст) Цикл
		СтрБазы=СтрПолучитьСтроку(Текст,Ном);
		Разд=Найти(СтрБазы,Символы.Таб);
		Путь=Лев(СтрБазы,Разд-1);
		Название=Прав(СтрБазы,СтрДлина(СтрБазы)-Разд);
		
		НоваяСтрока = ТаблицаПути.Добавить();
		НоваяСтрока.Имя = Название;
		НоваяСтрока.Путь = Путь;
	КонецЦикла;
	
	ТаблицаПути.Сортировать("Имя");

КонецПроцедуры //ПолучитьСписокИБ

// Запуск процесса конвертации из 7.7
//
Процедура КонвертацияИнформационнойБазы()
	
	ОтобразитьТекстСостояния("Начало переноса данных: " + ТекущаяДата(), , 0);
	
	ТаблицаОшибок.Очистить();
	
	Индикатор = 1;
	
	ЭлементыФормы[ПрефиксСтраниц + "ДалееКон"].Доступность = Ложь;
	
	// Шаг №1 - подключение к ИБ
	ОтобразитьТекстСостояния("Подключение к информационной базе: " + ИмяИБ);
	ЭтапКонвертации = "Подключение к информационной базе";
	Перерисовать(1, "Выполняется", Истина);
	Если НЕ ПодключитьсяКИБ() Тогда
		Перерисовать(1);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 5;
	
	ОтобразитьТекстСостояния("Определение конфигурации и номера релиза информационной базы: " + ИмяИБ);
	Если НЕ ОпределитьКонфигурациюИБ() Тогда
		Перерисовать(1);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 10;
	
	Перерисовать(1, "Успех", Истина);
	
	// Шаг № 2 выгрузка данных
	ОтобразитьТекстСостояния("Выгрузка данных из информационной базы: " + ИмяИБ);
	ЭтапКонвертации = "Выгрузка данных";
	Перерисовать(2, "Выполняется", Истина);
	Если НЕ ВыгрузитьИБ() Тогда
		Перерисовать(2);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 35;
	
	Перерисовать(2, "Успех", Истина);
	
	// Шаг № 3 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния("Чтение выгруженных данных информационной базы: " + ИмяИБ);
	ЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбмен(ИмяФайлаДанных) Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 40;
	
	ОтобразитьТекстСостояния("Загрузка данных информационной базы: " + ИмяИБ);
	ЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьВИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 65;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 4 проведение документов только при условии что выгружались остатки или обороты
	Если ОстаткиОбороты = 0 Тогда // Только справочники
		Перерисовать(4, "Успех", Истина);
	Иначе
		ОтобразитьТекстСостояния("Проведение документов, сформированных при загрузке данных");
		ЭтапКонвертации = "Проведение документов";
		Перерисовать(4, "Выполняется", Истина);
		Если НЕ ПровестиДокументы() Тогда
			Перерисовать(4);
			Индикатор = 100;
		Иначе
			Перерисовать(4, "Успех", Истина);
		КонецЕсли;
	КонецЕсли;
	Индикатор = 90;
	
	
	// Шаг № 5 проверка загруженных данных
	ОтобразитьТекстСостояния("Проверка загруженных данных");
	ЭтапКонвертации = "Проверка данных";
	Перерисовать(5, "Выполняется", Истина);
	ПроверитьДанные();
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(5);
		Индикатор = 100;
	Иначе
		Перерисовать(5, "Успех", Истина);
	КонецЕсли;
	Индикатор = 100;
	
	
КонецПроцедуры

// Попытка подключения к ИБ
//
Функция ПодключитьсяКИБ()
	
	Попытка
		v7 = Новый COMObject("V1CEnterprise.Application"); 
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести подключение к информационной базе: " + ИмяИБ, "Возможно, на Вашем компьютере не установлена платформа 1С:Предприятие 7.7, либо используется БАЗОВАЯ версия программы. Воспользуйтесь вариантом загрузки данных из файла, предварительно сформировав его в информационной базе, из которой производится перенос данных.");
		Возврат Ложь;
	КонецПопытки;
	
	Открыта = v7.Initialize(v7.RMTrade, "/D""" + ПутьКИБ + """ /M ", "NO_SPLASH_SHOW");
	
	Если НЕ Открыта Тогда
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести подключение к информационной базе: " + ИмяИБ, "Возможно, пользователь отменил подключение к информационной базе, либо была попытка немонопольного подключения.");
	КонецЕсли;
	
	Возврат Открыта;
	
КонецФункции

// Определение конфигурации и поиск соответствующих конвертаций
Функция ОпределитьКонфигурациюИБ()
	
	Попытка
		ИдентификаторКонфигурации = v7.глИдентификаторКонфигурации();
		НомерРелизаКонфигурации = v7.Константа.НомерРелиза;
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Производится перенос данных из нетиповой конфигурации", "Перенос из выбранной конфигурации не поддерживается.");
	КонецПопытки;
	
	Если ИдентификаторКонфигурации <> Неопределено 
		И НомерРелизаКонфигурации <> Неопределено Тогда
		
		ВозрастРелизаКонфигурации = Число(Прав(СокрЛП(НомерРелизаКонфигурации), 3));
		
		Отбор = Новый Структура("ИдентификаторКонфигурации");
		Отбор.Вставить("ИдентификаторКонфигурации", ИдентификаторКонфигурации);
		Выборка = Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.Выбрать(,,Отбор);
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.ПолучитьОбъект();
			
			ВозрастРелизаПравил = Число(Прав(СокрЛП(Объект.НомерРелиза), 3));
			
			Если ВозрастРелизаПравил > ВозрастРелизаКонфигурации Тогда
				ЗафиксироватьОшибку(ЭтапКонвертации, "Текущая версия правил предназначена для релиза конфигурации не ниже " + Объект.НомерРелиза, "Рекомендуется обновить релиз конфигурации информационной базы, из которой производится перенос данных.");
				Возврат Ложь;
			КонецЕсли;
			
			КонвертацияОбработка			= Объект.ХранилищеОбработка.Получить();
			КонвертацияПравила				= Объект.ХранилищеПравила.Получить();
			
			Если	КонвертацияОбработка = Неопределено
				ИЛИ	КонвертацияПравила = Неопределено Тогда
				КонвертацияОбработка	= Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.ПолучитьМакет(Объект.КонвертацияОбработка + "_ert");
				
				Если ОстаткиОбороты = 0 Тогда // Только справочники
					КонвертацияПравила		= Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.ПолучитьМакет(Объект.КонвертацияПравила + "_xml_Справочники");
					
				Иначе
					КонвертацияПравила		= Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.ПолучитьМакет(Объект.КонвертацияПравила + "_xml");
				КонецЕсли;
			КонецЕсли;
			
			КонвертацияОбработка.Записать(ПутьВыгрузкиЗагрузки + Объект.КонвертацияОбработка + ".ert");
			КонвертацияПравила.Записать(ПутьВыгрузкиЗагрузки + Объект.КонвертацияПравила + ".xml");
			ИмяФайлаОбработки = ПутьВыгрузкиЗагрузки + Объект.КонвертацияОбработка + ".ert";
			ИмяФайлаПравил = ПутьВыгрузкиЗагрузки + Объект.КонвертацияПравила + ".xml";
			Возврат Истина;
		КонецЦикла;
	КонецЕсли;
	
	ЗафиксироватьОшибку(ЭтапКонвертации, "Для выбранной конфигурации конвертация не поддерживается", "");
	Возврат Ложь;
	
КонецФункции

// Функция выгрузки данных из ИБ-источника
//
Функция ВыгрузитьИБ()
	
	Попытка

		ДатаНачалаСтр = Формат(НачалоГода(ДатаНачала), "ДФ=dd.MM.yyyy");
		Если ШагПериода = 12 Тогда
			ДатаОкончанияСтр = ДатаНачалаСтр;
		Иначе
			ДатаОкончанияСтр = Формат(КонецМесяца(ДатаОкончания), "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Результат = v7.ВыгрузкаВ1СБухгалтерию8(ДатаНачалаСтр, ДатаОкончанияСтр, ИмяФайлаОбработки, ИмяФайлаПравил, ИмяФайлаДанных );
		v7 = "";
		
		ТипЧисло = Тип("Число");
		Если ТипЗнч(Результат) = ТипЧисло Тогда
			ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести выгрузку данных из информационной базы " + ИмяИБ, "Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации. Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.");
			Возврат Ложь;
		КонецЕсли;
		
		Если Результат = "" Тогда
			Возврат Истина;
		Иначе
			СписокОшибок = СтрЗаменить(Результат, ",", Символы.ПС);
			Для НомерСтроки = 1 По СтрЧислоСтрок(СписокОшибок) Цикл
				ЗафиксироватьОшибку(ЭтапКонвертации, "Ошибка получения данных из информационной базы 1С:Предприятия 7.7: " + СтрПолучитьСтроку(СписокОшибок, НомерСтроки), "Проверьте корректность данных в информационной базе, из которой осуществляется перенос информации.");
			КонецЦикла;
			
			Возврат Ложь;
		КонецЕсли;
		
	Исключение
		v7 = "";
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести выгрузку данных из информационной базы " + ИмяИБ, "Возможно, с информационной базой работают пользователи. Перенос данных возможен только при наличии монопольного доступа к информационной базе, из которой выгружаются данные.");
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

//***********************************************************
// Процедуры и функции загрузки из файла
//***********************************************************

// Запуск процесса конвертации из выгруженного файла
//
Процедура ЗагрузкаИнформационнойБазы()
	
	ОтобразитьТекстСостояния("Начало переноса данных: " + ТекущаяДата(), , 0);
	
	ТаблицаОшибок.Очистить();
	
	Индикатор = 1;
	
	ЭлементыФормы[ПрефиксСтраниц + "ДалееКон"].Доступность = Ложь;
	
	ИмяФайлаДанных = ИмяФайлаВыгруженныхДанных;
	
	// Шаг № 1 инициализация обмена и загрузка данных
	ОтобразитьТекстСостояния("Чтение выгруженных данных из файла: " + ИмяФайлаВыгруженныхДанных);
	ЭтапКонвертации = "Запуск обработки загрузки данных";
	Перерисовать(3, "Выполняется", Истина);
	Если НЕ ИнициализироватьОбмен(ИмяФайлаДанных) Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 40;
	
	ОтобразитьТекстСостояния("Загрузка данных из файла: " + ИмяФайлаВыгруженныхДанных);
	ЭтапКонвертации = "Загрузка данных";
	Если НЕ ЗагрузитьВИБ() Тогда
		Перерисовать(3);
		Индикатор = 100;
		Возврат;
	КонецЕсли;
	Индикатор = 65;
	
	Перерисовать(3, "Успех", Истина);
	
	// Шаг № 2 проведение документов
	ОтобразитьТекстСостояния("Проведение документов, сформированных при загрузке данных");
	ЭтапКонвертации = "Проведение документов";
	Перерисовать(4, "Выполняется", Истина);
	Если НЕ ПровестиДокументы() Тогда
		Перерисовать(4);
		Индикатор = 100;
	Иначе
		Перерисовать(4, "Успех", Истина);
	КонецЕсли;
	Индикатор = 90;
	
	// Шаг № 3 проверка загруженных данных
	ЭтапКонвертации = "Проверка данных";
	ОтобразитьТекстСостояния("Проверка загруженных данных");
	Перерисовать(5, "Выполняется", Истина);
	ПроверитьДанные();
	Если ТаблицаОшибок.Количество() <> 0 Тогда
		Перерисовать(5);
		Индикатор = 100;
	Иначе
		Перерисовать(5, "Успех", Истина);
	КонецЕсли;
	Индикатор = 100;
	
КонецПроцедуры

// Процедура выбора файла для загрузки
//
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогВыбораФайла								=	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр						=	"Файл данных (*.xml)|*.xml|Архивный файл данных (*.aml)|*.aml";
	ДиалогВыбораФайла.Расширение					=	"xml";
	
	ДиалогВыбораФайла.Заголовок						=	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
		ИнициализироватьОбмен(ДиалогВыбораФайла.ПолноеИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

//***********************************************************
// Общие процедуры и функции загрузки данных
//***********************************************************

// Функция загрузки файла данных
//
Функция ЗагрузитьВИБ()
	
	Организация = "";
	
	ОбработкаОбмена.ИмяФайлаОбмена = ИмяФайлаДанных;
	ОбработкаОбмена.ФлагКомментироватьОбработкуОбъектов = Истина;
	ОбработкаОбмена.ОбрезатьСтрокиСправа = Истина;
	ОбработкаОбмена.ВыполнитьЗагрузку();	
	Если ОбработкаОбмена.ФлагОшибки Тогда
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось произвести загрузку данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".");
	Иначе
		Организация = ОбработкаОбмена.Параметры.Организация.ПолучитьОбъект();
	КонецЕсли;
	
	Возврат Не ОбработкаОбмена.ФлагОшибки;
	
КонецФункции

// Функция проведения загруженных документов
Функция ПровестиДокументы ()
		
	Перем ФормаПрогрессора;
	
	БезОшибок = Истина;
	
	Попытка
		Организация = ОбработкаОбмена.Параметры.Организация.ПолучитьОбъект();
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось прочитать файл данных и получить сведения о загружаемой организации", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".");
		Возврат Ложь;
	КонецПопытки;
	
	
	ДатаНач = НачалоДня(ОбработкаОбмена.ДатаНачала - 1);
	ДатаКон = ОбработкаОбмена.ДатаОкончания;
		
	мНаборыШаблон = Новый Структура;
	
	#Если Клиент Тогда
		ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Проведение созданных документов";
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация.Ссылка);
	
	Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
		
		УСН = ?(ДокументМетаданные.Имя = "ЗаписьКУДиР", "Истина", "Ложь");
		
		Если ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "", "
			|ОБЪЕДИНИТЬ ВСЕ
			|") + "ВЫБРАТЬ """ + ДокументМетаданные.Имя + """ КАК ИмяДокумента, Представление КАК Представление, Ссылка КАК Ссылка, Дата КАК Дата, " + УСН + " КАК УСН ИЗ Документ." + ДокументМетаданные.Имя + "
			|ГДЕ НЕ ПометкаУдаления И НЕ Проведен И Дата >= &ДатаНач И Организация = &Организация";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО УСН, Дата, Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));	
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
	ВсегоДокументов = ТаблицаДокументов.Количество();
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.МаксимальноеЗначение = ВсегоДокументов;
		ФормаПрогрессора.КомментарийОбработкиДанных  = "Проведение документов";		
		ФормаПрогрессора.Открыть();
	КонецЕсли;	

	ИндексСтрокиНачалаДаты = Неопределено;
	ТекущаяДатаПроведения = Неопределено;
	
	Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
		СтрокаДокумента = ТаблицаДокументов[индекс];
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
		КонецЕсли;
		
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.Метаданные().Проведение = Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекущаяДатаПроведения <> ДокументОбъект.Дата Тогда
			ИндексСтрокиНачалаДаты = индекс;
			ТекущаяДатаПроведения = ДокументОбъект.Дата;
		КонецЕсли;
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			БезОшибок = Ложь;
			ОписаниеОшибки = КраткоеОписаниеОшибки(ОписаниеОшибки());
			ЗафиксироватьОшибку(ЭтапКонвертации, "Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки, "Рекомендуется провести указанный документ вручную.", ДокументОбъект.Ссылка);
		КонецПопытки;		
	КонецЦикла;
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли;

	Возврат БезОшибок;
	
КонецФункции

// Функция избавляет служебное описание ошибки от лишней информации
Функция КраткоеОписаниеОшибки(ОписаниеОшибки);
	ПозКонцаСкобок = Найти(ОписаниеОшибки,"}");
	Если ПозКонцаСкобок = 0 Тогда
		
		Возврат ОписаниеОшибки;
		
	Иначе
		
		Возврат Сред(ОписаниеОшибки,ПозКонцаСкобок + 2);
		
	КонецЕсли;
	
КонецФункции // ()

// Процедура проверки загруженных данных
Процедура ПроверитьДанные()
	
	ПроверятьТолькоОстатки = Истина;
	Если ПрефиксСтраниц = "ИБ" Тогда
		Если ОстаткиОбороты = 0 Тогда
			Возврат;
		КонецЕсли;
		Если ШагПериода <>  12 Тогда
			ПроверятьТолькоОстатки = Ложь;
		КонецЕсли;
	Иначе
		Если ДатаНачала <> ДатаОкончания Тогда
			ПроверятьТолькоОстатки = Ложь;		
		КонецЕсли;
	КонецЕсли;
	
	ТекстПроверки = "";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация.Ссылка);
	Запрос.УстановитьПараметр("НачПериода", НачалоГода(ДатаНачала));
	Если ПроверятьТолькоОстатки Тогда
		Запрос.УстановитьПараметр("КонПериода", НачалоГода(ДатаНачала));
	Иначе
		Запрос.УстановитьПараметр("КонПериода", КонецМесяца(ДатаОкончания));
	КонецЕсли;
	
	Попытка

		ОткрытьФайлДанных(ИмяФайлаДанных);

		ИДКонфигурации = ФайлОбмена.ПолучитьАтрибут("ИдентификаторКонфигурации");
		ЗапросПоИДКонфигурации = Новый Запрос;
		ЗапросПоИДКонфигурации.УстановитьПараметр("ИДКонфигурации", ИДКонфигурации);
		ЗапросПоИДКонфигурации.Текст = 
		"ВЫБРАТЬ
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.Ссылка,
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.ИдентификаторКонфигурации,
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.КонтрольныеЗначения
		|ИЗ
		|	Справочник.КонвертацииИзИнформационныхБазПредыдущихВерсий КАК КонвертацииИзИнформационныхБазПредыдущихВерсий
		|ГДЕ
		|	КонвертацииИзИнформационныхБазПредыдущихВерсий.ИдентификаторКонфигурации = &ИДКонфигурации";
		
		Результат = ЗапросПоИДКонфигурации.Выполнить().Выгрузить().Получить(0);
		ТекстПроверки = Результат.КонтрольныеЗначения;
		Объект = Результат.Ссылка.ПолучитьОбъект();
		Объект.КонтрольныеЗначения = "";
		Объект.Записать();
		
	Исключение
		ЗафиксироватьОшибку(ЭтапКонвертации, "Не удалось получить правила проверки загруженных данных", "Возможно, нарушена структура файла данных из-за использования нетиповых правил переноса данных. Рекомендуется использовать правила выгрузки данных из справочника ""Конвертации из информационных баз 1С:Предприятия 7.7"".");
		ФайлОбмена.Закрыть();
		Возврат;
	КонецПопытки;
	
	Если НЕ ЗначениеЗаполнено(ТекстПроверки) Тогда
		ФайлОбмена.Закрыть();
		Возврат;
	КонецЕсли;
	
	Выполнить(ТекстПроверки);
	
	ФайлОбмена.Закрыть();
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ПервыйЗапуск Тогда	
		Обработки.ПанельФункций.ПолучитьФорму().Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаПутиПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ТаблицаПутиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////////////////////////
// Модуль формы

ЭтапКонвертации = "";

ПутьВыгрузкиЗагрузки = КаталогВременныхФайлов();

//ТаблицаОшибок.Колонки.Добавить("Статус");
ТаблицаОшибок.Колонки.Добавить("Этап");
ТаблицаОшибок.Колонки.Добавить("Ошибка");
ТаблицаОшибок.Колонки.Добавить("Рекомендации");
ТаблицаОшибок.Колонки.Добавить("Расшифровка");

ШрифтОбычный = Новый Шрифт(,,,,,);
ШрифтЖирный = Новый Шрифт(,, Истина,,,);

БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);