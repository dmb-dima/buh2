Перем мНаборыШаблон;

Перем мКэшОбработки;

Функция СформироватьСписокДатОкончанияПроведения(ДатаНач) Экспорт

	ДатаРассчитанныхИтогов = Дата('39990101');
	Для Каждого Регистр Из РегистрыНакопления Цикл
		МетаданныеРегистра = Метаданные.НайтиПоТипу(Тип(Регистр));
		Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда		
			ПериодИтоговРегистра = Регистр.ПолучитьПериодРассчитанныхИтогов();		
			Если ПериодИтоговРегистра < ДатаРассчитанныхИтогов Тогда
				ДатаРассчитанныхИтогов = ПериодИтоговРегистра;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокВыбора = Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ДатаНач) И КонецМесяца(ДатаНач) <= ДатаРассчитанныхИтогов Тогда
		
		ДатаКонцаПериода = КонецМесяца(ДатаНач);
		Пока ДатаКонцаПериода <= ДатаРассчитанныхИтогов Цикл
			СписокВыбора.Добавить(ДатаКонцаПериода, Формат(ДатаКонцаПериода, "ДФ=dd.MM.yyyy"));
			ДатаКонцаПериода = КонецМесяца(ДатаКонцаПериода + 1);
		КонецЦикла;		
		
	КонецЕсли;
	
	СписокВыбора.Добавить(Дата('00010101'), "без ограничений");
	
	Возврат СписокВыбора;

КонецФункции

Процедура ПровестиРегламентныеДокументыЗаМесяц(РегДокументы,Дата,ФормаПрогрессора,ВозниклаОшибка = ложь)
	
	Для каждого СтрокаДокумента из РегДокументы Цикл
		Если Не СтрокаДокумента.Выполнена И НачалоМесяца(СтрокаДокумента.Дата) <= Дата Тогда
			
			Если ФормаПрогрессора <> Неопределено Тогда
				ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
				ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			КонецЕсли;
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();

			ДокументОбъект.ВыполнитьОперацию();
			Если ДокументОбъект.Ошибки.Количество() > 0  Тогда
				Если ОстанавливатьсяПоОшибке Тогда
					ВозниклаОшибка = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаДокумента.Выполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПровестиРегламентныеДокументыЗаМесяцПоНДС(ВсеДокументы,Дата,ФормаПрогрессора,СдвигатьГраницуАктуальности,ЗаписыватьОшибкиВЖурналРегистрации,ИндексСтрокиНачалаДаты,ВозниклаОшибка=ложь)
	
	Для каждого СтрокаДокумента из ВсеДокументы Цикл
		Если СтрокаДокумента.РеглДокумент И Не СтрокаДокумента.Выполнена И НачалоМесяца(СтрокаДокумента.Дата) <= Дата Тогда
			
			Если ФормаПрогрессора <> Неопределено Тогда
				ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
				ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			КонецЕсли;
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				Если СдвигатьГраницуАктуальности Тогда
									
					Если СтрокаДокумента.БылаОшибка Тогда
						// для документа уже была ошибка проведения, продолжение не возможно
						ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
						Если ОстанавливатьсяПоОшибке Тогда
							ВозниклаОшибка = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					СдвигГраницыАктуальностиПоРазделам(СтрокаДокумента.ИмяДокумента, ДокументОбъект, ЗаписыватьОшибкиВЖурналРегистрации);
					СтрокаДокумента.БылаОшибка = Истина;
					индекс = ИндексСтрокиНачалаДаты;
					
				Иначе
					
					ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
					Если ОстанавливатьсяПоОшибке Тогда
						Прервать;
					КонецЕсли;				
				КонецЕсли;
			КонецПопытки;
			
			СтрокаДокумента.Выполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаДокумента из ВсеДокументы Цикл
		Если СтрокаДокумента.СвязанныйДокумент И Не СтрокаДокумента.Выполнена И НачалоМесяца(СтрокаДокумента.Дата) <= Дата Тогда
			
			Если ФормаПрогрессора <> Неопределено Тогда
				ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
				ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			КонецЕсли;
			
			ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Исключение
				Если СдвигатьГраницуАктуальности Тогда
									
					Если СтрокаДокумента.БылаОшибка Тогда
						// для документа уже была ошибка проведения, продолжение не возможно
						ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
						Если ОстанавливатьсяПоОшибке Тогда
							ВозниклаОшибка = Истина;
							Прервать;
						КонецЕсли;
					КонецЕсли;
					
					СдвигГраницыАктуальностиПоРазделам(СтрокаДокумента.ИмяДокумента, ДокументОбъект, ЗаписыватьОшибкиВЖурналРегистрации);
					СтрокаДокумента.БылаОшибка = Истина;
					индекс = ИндексСтрокиНачалаДаты;
					
				Иначе
					
					ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
					Если ОстанавливатьсяПоОшибке Тогда
						Прервать;
					КонецЕсли;				
				КонецЕсли;
			КонецПопытки;
			
			СтрокаДокумента.Выполнена = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура перепроведения документов
//
// Параметры: 
//  ДатаНач - дата, начиная с которой перепроводятся документы
//  ДатаКон - дата, по которою перепроводятся документы
//  Организация - организация, по которой перепроводятся документы
//  СдвигатьГраницуАктуальности - флаг сдвига назад даты актуальности по разделам учета при ошибке проведения документа
//
	Процедура ПерепроведениеДокументов(ДатаНач, ДатаКон = '00010101', Организация = Неопределено, СдвигатьГраницуАктуальности = Ложь, ЗаписыватьОшибкиВЖурналРегистрации = Ложь) Экспорт
	
	Перем ФормаПрогрессора;
	
	мНаборыШаблон = Новый Структура;
	
	#Если Клиент Тогда
		ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Групповое перепроведение документов";
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Для Каждого ДокументМетаданные ИЗ Метаданные.Документы Цикл
		
		// У некоторых ролей нет прав на отдельные документы
		Если НЕ РольДоступна("ПолныеПрава") Тогда 
			Если НЕ ПравоДоступа("Чтение", ДокументМетаданные) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ИмяДокумента = ДокументМетаданные.Имя;
		//Отсекаем документы, которые не следует перепроводить		
		Если ИмяДокумента = "ВыгрузкаРегламентированныхОтчетов" Тогда
			Продолжить;
		КонецЕсли;
			
		Запрос.Текст = Запрос.Текст + ?(Запрос.Текст = "", "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + " 
		|""" + ИмяДокумента + """ КАК ИмяДокумента, 
		|Представление КАК Представление, 
		|Ссылка КАК Ссылка, 
		|Дата КАК Дата,
		|" + ?(ДокументМетаданные.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено, "РучнаяКорректировка", "Ложь") + " КАК РучнаяКорректировка
		|ИЗ Документ." + ИмяДокумента + "
		|ГДЕ Проведен И Дата >= &ДатаНач";
		
		Если ДатаКон <> Дата('00010101') Тогда
			Запрос.Текст = Запрос.Текст + " И Дата <= &ДатаКон";
		КонецЕсли;
		
		Если Организация <> Неопределено И ДокументМетаданные.Реквизиты.Найти("Организация") <> Неопределено Тогда
			Если ТипЗнч(Организация) = Тип("Массив") Тогда
				Запрос.Текст = Запрос.Текст + " И Организация В (&Организация)";
			Иначе
				Запрос.Текст = Запрос.Текст + " И Организация = &Организация";
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО Дата, Ссылка";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаКон));
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	ТаблицаДокументов.Колонки.Добавить("БылаОшибка", Новый ОписаниеТипов("Булево"));
	ВсегоДокументов = ТаблицаДокументов.Количество();
	
	// Регламентные документы по НДС при групповом проведении делаем непроведенными.
	
	ТаблицаДокументов.Колонки.Добавить("РеглДокумент", Новый ОписаниеТипов("Булево"));
	ТаблицаДокументов.Колонки.Добавить("СвязанныйДокумент", Новый ОписаниеТипов("Булево"));
	ТаблицаДокументов.Колонки.Добавить("Выполнена", Новый ОписаниеТипов("Булево"));
	
	ЗапросПоРеглДокументам = Новый Запрос;
	ЗапросПоРеглДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоРеглДокументам.УстановитьПараметр("ДатаНач",     ДатаНач);
	ЗапросПоРеглДокументам.УстановитьПараметр("ДатаКон",     КонецДня(ДатаКон));
	
	ТекстЗапросаПоРеглДокументам =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Журнал.Ссылка КАК РеглДокумент
	|ИЗ
	|	ЖурналДокументов.РегламентныеДокументыНДС КАК Журнал
	|ГДЕ
	|	Журнал.Проведен
	|	И Журнал.Дата >= &ДатаНач";
	
	Если Организация <> Неопределено Тогда
		Если ТипЗнч(Организация) = Тип("Массив") Тогда
			ТекстЗапросаПоРеглДокументам = СтрЗаменить(ТекстЗапросаПоРеглДокументам, "Журнал.Проведен", "Журнал.Проведен И Журнал.Организация В (&Организация)");
		Иначе
			ТекстЗапросаПоРеглДокументам = СтрЗаменить(ТекстЗапросаПоРеглДокументам, "Журнал.Проведен", "Журнал.Проведен И Журнал.Организация = (&Организация)");
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаКон <> Дата('00010101') Тогда
		ТекстЗапросаПоРеглДокументам = СтрЗаменить(ТекстЗапросаПоРеглДокументам, "Журнал.Дата >= &ДатаНач", "Журнал.Дата МЕЖДУ &ДатаНач И &ДатаКон");
	КонецЕсли;
	
	ЗапросПоРеглДокументам.Текст = ТекстЗапросаПоРеглДокументам;
	МассивРеглДокументов = ЗапросПоРеглДокументам.Выполнить().Выгрузить().ВыгрузитьКолонку("РеглДокумент");
	
	ЗапросаПоСвязаннымРеглДокументам = Новый Запрос;
	ЗапросаПоСвязаннымРеглДокументам.Текст =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура,
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование КАК РеглДокумент
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.ДокументОснование В(&ДокументыОснования)";
	
	ЗапросаПоСвязаннымРеглДокументам.УстановитьПараметр("ДокументыОснования",     МассивРеглДокументов);
	МассивСвязанныхДокументов = ЗапросаПоСвязаннымРеглДокументам.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");	
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.МаксимальноеЗначение = ВсегоДокументов;		
		ФормаПрогрессора.КомментарийОбработкиДанных  = "Отмена проведения регламентных документов по НДС";		
		ФормаПрогрессора.Открыть();
	КонецЕсли;	
	
	Для Каждого СтрокаДокумента ИЗ ТаблицаДокументов Цикл
		
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
		КонецЕсли;
		
		Регистратор = СтрокаДокумента.Ссылка;
		СтрокаДокумента.РеглДокумент = МассивРеглДокументов.Найти(Регистратор) <> Неопределено;
		СтрокаДокумента.СвязанныйДокумент = МассивСвязанныхДокументов.Найти(Регистратор) <> Неопределено;
		
		НачатьТранзакцию();
		
		Если СтрокаДокумента.РучнаяКорректировка Тогда
			ОбщегоНазначения.УдалитьДвиженияРегистратора(СтрокаДокумента.Ссылка.ПолучитьОбъект(), Ложь, Истина);
		ИначеЕсли СтрокаДокумента.РеглДокумент Тогда
			СтрокаДокумента.Ссылка.ПолучитьОбъект().Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;	
	
	// Документы "Регламентная операция" при групповом проведении делаем неактуальными(отменяем проведение).
	
	ЗапросПоРеглОперациям = Новый Запрос;
	ЗапросПоРеглОперациям.УстановитьПараметр("Организация", Организация);
	ЗапросПоРеглОперациям.УстановитьПараметр("ДатаНач",     ДатаНач);
	ЗапросПоРеглОперациям.УстановитьПараметр("ДатаКон",     КонецМесяца(ДатаКон));
	ПорядокРегламентныхОпераций = новый ТаблицаЗначений;
	ПорядокРегламентныхОпераций.Колонки.Добавить("Порядок",Новый ОписаниеТипов("Число"));
	ПорядокРегламентныхОпераций.Колонки.Добавить("ВидОперации",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыРегламентныхОпераций"));
	Порядок = 1;
	Для каждого ВидРегОперации из Перечисления.ВидыРегламентныхОпераций Цикл
		НовыйПоярдок = ПорядокРегламентныхОпераций.Добавить();
		НовыйПоярдок.порядок = Порядок;
		НовыйПоярдок.ВидОперации = ВидРегОперации;
		Порядок = Порядок + 1;
	КонецЦикла;
	ЗапросПоРеглОперациям.УстановитьПараметр("ПорядокРегламентныхОпераций",ПорядокРегламентныхОпераций);
	
	ТекстЗапросаПоРеглОперациям =
	"ВЫБРАТЬ
	|	ВТ.Порядок,
	|	ВТ.ВидОперации
	|ПОМЕСТИТЬ ПорядокРегламентныхОпераций
	|ИЗ
	|	&ПорядокРегламентныхОпераций КАК ВТ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Ссылка КАК Ссылка,
	|	Док.Организация,
	|	Док.Дата КАК Дата,
	|	Док.ВидОперации,
	|	Док.Представление КАК Представление
	|ИЗ
	|	Документ.РегламентнаяОперация КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокРегламентныхОпераций КАК ПорядокРегламентныхОпераций
	|		ПО Док.ВидОперации = ПорядокРегламентныхОпераций.ВидОперации
	|ГДЕ
	|	Док.Дата >= &ДатаНач
	|	И (НЕ Док.ПометкаУдаления)
	|	И Док.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
	|	И Док.Состояние <> ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Пропущено)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	ПорядокРегламентныхОпераций.Порядок";
	
	Если Организация <> Неопределено Тогда
		Если ТипЗнч(Организация) = Тип("Массив") Тогда
			ТекстЗапросаПоРеглОперациям = СтрЗаменить(
				ТекстЗапросаПоРеглОперациям, "И (НЕ Док.ПометкаУдаления)", "И Док.Организация В (&Организация) И (НЕ Док.ПометкаУдаления)");
		Иначе
			ТекстЗапросаПоРеглОперациям = СтрЗаменить(
				ТекстЗапросаПоРеглОперациям, "И (НЕ Док.ПометкаУдаления)", "И Док.Организация = (&Организация) И (НЕ Док.ПометкаУдаления)");
		КонецЕсли;
	КонецЕсли;
	
	Если ДатаКон <> Дата('00010101') Тогда
		ТекстЗапросаПоРеглОперациям = СтрЗаменить(
			ТекстЗапросаПоРеглОперациям, "Док.Дата >= &ДатаНач", "Док.Дата МЕЖДУ &ДатаНач И &ДатаКон");
	КонецЕсли;
	
	ЗапросПоРеглОперациям.Текст = ТекстЗапросаПоРеглОперациям;
	ВыборкаРеглОпераций = ЗапросПоРеглОперациям.Выполнить().Выбрать();
	ТаблицаРеглДокументов = ЗапросПоРеглОперациям.Выполнить().Выгрузить();
	ТаблицаРеглДокументов.Колонки.Добавить("Выполнена", Новый ОписаниеТипов("Булево"));
	ВсегоРеглОпераций= ВыборкаРеглОпераций.Количество();
	
	Если ВсегоРеглОпераций>0 Тогда
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.Значение = 0;
			ФормаПрогрессора.МаксимальноеЗначение = ВсегоРеглОпераций;		
			ФормаПрогрессора.КомментарийОбработкиДанных  = "Отмена проведения регламентных операций";		
			ФормаПрогрессора.Открыть();
		КонецЕсли;	
		
		Пока ВыборкаРеглОпераций.Следующий() Цикл
			
			Если ФормаПрогрессора <> Неопределено Тогда
				ФормаПрогрессора.КомментарийЗначения = ВыборкаРеглОпераций.Представление;
				ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			ВыборкаРеглОпераций.Ссылка.ПолучитьОбъект().ОтменитьОперацию();
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
	КонецЕсли;

	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.МаксимальноеЗначение = ВсегоДокументов+ВсегоРеглОпераций;
		ФормаПрогрессора.КомментарийОбработкиДанных  = "Проведение документов";		
		ФормаПрогрессора.Открыть();
	КонецЕсли;		
	
	
	ИндексСтрокиНачалаДаты = Неопределено;
	ТекущаяДатаПроведения = Неопределено;
	ПроведениеПрервано = ложь;
	
	Для индекс = 0 ПО ВсегоДокументов - 1 Цикл
		СтрокаДокумента = ТаблицаДокументов[индекс];
		Если ФормаПрогрессора <> Неопределено Тогда
			ФормаПрогрессора.КомментарийЗначения = СтрокаДокумента.Представление;
			ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
		КонецЕсли;
		
		Если СтрокаДокумента.РеглДокумент ИЛИ СтрокаДокумента.СвязанныйДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		Если ТекущаяДатаПроведения<> неопределено и (НачалоМесяца(ТекущаяДатаПроведения) <> НачалоМесяца(ДокументОбъект.Дата)) Тогда
			ВозниклаОшибка = ложь;
			ПровестиРегламентныеДокументыЗаМесяцПоНДС(ТаблицаДокументов,НачалоМесяца(ТекущаяДатаПроведения),ФормаПрогрессора,СдвигатьГраницуАктуальности,ЗаписыватьОшибкиВЖурналРегистрации,ИндексСтрокиНачалаДаты,ВозниклаОшибка);
			ПровестиРегламентныеДокументыЗаМесяц(ТаблицаРеглДокументов,НачалоМесяца(ТекущаяДатаПроведения),ФормаПрогрессора,ВозниклаОшибка);
			Если ВозниклаОшибка Тогда
				ПроведениеПрервано = истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущаяДатаПроведения <> ДокументОбъект.Дата Тогда
			ИндексСтрокиНачалаДаты = индекс;
			ТекущаяДатаПроведения = ДокументОбъект.Дата;
		КонецЕсли;
		
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
		Исключение
			Если СдвигатьГраницуАктуальности Тогда
								
				Если СтрокаДокумента.БылаОшибка Тогда
					// для документа уже была ошибка проведения, продолжение не возможно
					ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
					Если ОстанавливатьсяПоОшибке Тогда
						ПроведениеПрервано = истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				СдвигГраницыАктуальностиПоРазделам(СтрокаДокумента.ИмяДокумента, ДокументОбъект, ЗаписыватьОшибкиВЖурналРегистрации);
				СтрокаДокумента.БылаОшибка = Истина;
				индекс = ИндексСтрокиНачалаДаты;
				
			Иначе
				
				ОбщегоНазначения.СообщитьОбОшибке("Документ " + Строка(ДокументОбъект) + " не проведен!" + Символы.ПС + "По причине: " + ОписаниеОшибки(), , "Ошибка проведения!");
				Если ОстанавливатьсяПоОшибке Тогда
					ПроведениеПрервано = истина;
					Прервать;
				КонецЕсли;				
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не	ПроведениеПрервано Тогда
		ПровестиРегламентныеДокументыЗаМесяцПоНДС(ТаблицаДокументов,?(ДатаКон <> Дата('00010101'),НачалоМесяца(ДатаКон),Дата('30010101')),ФормаПрогрессора,СдвигатьГраницуАктуальности,ЗаписыватьОшибкиВЖурналРегистрации,ИндексСтрокиНачалаДаты);
		ПровестиРегламентныеДокументыЗаМесяц(ТаблицаРеглДокументов,?(ДатаКон <> Дата('00010101'),НачалоМесяца(ДатаКон),Дата('30010101')),ФормаПрогрессора);
	КонецЕсли;

	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СдвигГраницыАктуальностиПоРазделам(ИмяДокумента, ДокументОбъект, ЗаписыватьКомментарийВЖурналРегистрации = Ложь)
	
	МетаданныеОбъекта = мКэшОбработки.МетаданныеОбъектов[ИмяДокумента];
	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = ДокументОбъект.Метаданные();
		мКэшОбработки.МетаданныеОбъектов[ИмяДокумента] = МетаданныеОбъекта;
	КонецЕсли;
	
	Если МетаданныеОбъекта.Реквизиты.Найти("Организация") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатыПоРазделам = мКэшОбработки.АктуальностьРазделовПоОрганизации[ДокументОбъект.Организация];
	Если ДатыПоРазделам = Неопределено Тогда
		ДатыПоРазделам = ПолучитьДатыАктуальностиПоОрганизации(ДокументОбъект.Организация);//РегистрыСведений.ДатаАктуальностиУчета.Получить(Новый Структура("Организация", ДокументОбъект.Организация));
		мКэшОбработки.АктуальностьРазделовПоОрганизации[ДокументОбъект.Организация] = ДатыПоРазделам;		
	КонецЕсли;
	
	НужнаЗапись = Ложь;
	Для Каждого КлючИЗначение ИЗ ДатыПоРазделам Цикл
		Если КлючИЗначение.Значение > НачалоДня(НачалоДня(ДокументОбъект.Дата) - 1) Тогда
			ДатыПоРазделам[КлючИЗначение.Ключ] = НачалоДня(НачалоДня(ДокументОбъект.Дата) - 1);
			НужнаЗапись = Истина;
		КонецЕсли;		
	КонецЦикла;	
	
	Если НужнаЗапись Тогда
		Запись = РегистрыСведений.ДатаАктуальностиУчета.СоздатьМенеджерЗаписи();
		Запись.Организация = ДокументОбъект.Организация;
		Для Каждого КлючИЗначение ИЗ ДатыПоРазделам Цикл
			Запись[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		Запись.Записать();
		
		ТекстКомментария = "Дата актуальности учета для организации """ + ДокументОбъект.Организация + """ установлена на " + НачалоДня(НачалоДня(ДокументОбъект.Дата) - 1) + " из-за ошибок при проведении документа " + ДокументОбъект;
		Если ЗаписыватьКомментарийВЖурналРегистрации Тогда			
			ЗаписьЖурналаРегистрации("Регламентное восстановление даты актуальности", УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегламентныеЗадания.УстановкаДатыАктуальностиУчета, , ТекстКомментария);
		Иначе
			Сообщить(ТекстКомментария);
		КонецЕсли;
	КонецЕсли;
			
КонецПроцедуры

Функция ПолучитьДатыАктуальностиПоОрганизации(Организация)
	
	Результат = Новый Структура;
	Для Каждого РазделУчета Из Метаданные.РегистрыСведений.ДатаАктуальностиУчета.Ресурсы Цикл
		Результат.Вставить(РазделУчета.Имя, '00010101');
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДатаАктуальностиУчета.ОценкаМПЗ,
	|	ДатаАктуальностиУчета.РасчетыСКонтрагентами,
	|	ДатаАктуальностиУчета.НДС,
	|	ДатаАктуальностиУчета.НУ
	|ИЗ
	|	РегистрСведений.ДатаАктуальностиУчета КАК ДатаАктуальностиУчета
	|ГДЕ
	|	ДатаАктуальностиУчета.Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЫБОР
	|		КОГДА ДатаАктуальностиУчета.Организация = &Организация
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;	
	
КонецФункции

мКэшОбработки = Новый Структура;
мКэшОбработки.Вставить("МетаданныеОбъектов", Новый Соответствие);
мКэшОбработки.Вставить("АктуальностьРазделовПоОрганизации", Новый Соответствие);