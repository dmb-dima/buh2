
Перем мОсновнаяПанель;
Перем мСтраницыОсновнойПанели;

Перем мМассивПереходовПоСтраницам;

Перем мДействиеНазад; 

Перем мБазоваяПоставка;

Перем мОбщаяТаблицаНастроекПолейПоиска Экспорт;
Перем мОбщаяТаблицаНастроекВыгрузки Экспорт;


Перем МакетЭтаповНастройки;

Перем МассивПройденныхЭтапов;

Перем мТекущаяНастройка;

Процедура ВосстановитьНастройкиЭтапов()
	
	ЕстьНастройки = УниверсальныеМеханизмы.ПолучитьНастройку(мТекущаяНастройка);
	
	Если ЕстьНастройки Тогда
		
		Если мТекущаяНастройка.СохраненнаяНастройка.Свойство("ТаблицаНастроек") 
			И мТекущаяНастройка.СохраненнаяНастройка.Свойство("АктуальнаяНастройка") Тогда
			
			Если мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка <> Неопределено 
				И НастройкаОбмена.Пустая() Тогда
				
				//настройка обмена была удалена
				Если ТипЗнч(мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка) = Тип("СправочникСсылка.НастройкиОбменаДанными")
					И НЕ мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка.Пустая() 
					И мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка.ПолучитьОбъект() = Неопределено Тогда
					
					СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка,"НастройкаОбмена");
					
					Если СтрокаНастроек <> Неопределено Тогда
						
						мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Удалить(СтрокаНастроек);
						
					КонецЕсли;
					
					мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка = Справочники.НастройкиОбменаДанными.ПустаяСсылка();
					
				Иначе
					
					НастройкаОбмена = мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка;
				
				КонецЕсли;
			
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда 
				
				ЭтапНастройки = 0;
				СценарийРаботы = 0;		
				
				
			Иначе	
				
				СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена");
				Если СтрокаНастроек <> Неопределено Тогда
					
					ЭтапНастройки 	 = СтрокаНастроек.НомерАктуальногоЭтапа-1;
					СценарийРаботы   = 1;
					ДействиеВыбранноеПользователем = СтрокаНастроек.ДействиеВыбранноеПользователем;
					ИмяФайлаНастроекОбменаПервойИнформационнойБазы = СтрокаНастроек.ИмяФайлаНастроекОбменаПервойИнформационнойБазы;
				Если СтрокаНастроек.НомерАктуальногоЭтапа >= 5 Тогда
					ЭтапНастройки = 0;
					СценарийРаботы = 0;		
				Иначе
					ЭтапНастройки 	 = СтрокаНастроек.НомерАктуальногоЭтапа-1;
					СценарийРаботы   = 1;
				КонецЕсли;	
					
				Иначе
					
					//ЭтапНастройки = 0;
					//СценарийРаботы = 0;		
					
				КонецЕсли;	
				
				
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	Иначе
		
		мТекущаяНастройка.Вставить("СохраненнаяНастройка",Новый Структура);
		ТаблицаНастроек = Новый ТаблицаЗначений;
		ТаблицаНастроек.Колонки.Добавить("НастройкаОбмена");
		ТаблицаНастроек.Колонки.Добавить("НомерАктуальногоЭтапа");
		ТаблицаНастроек.Колонки.Добавить("ДействиеВыбранноеПользователем");
		ТаблицаНастроек.Колонки.Добавить("ИмяФайлаНастроекОбменаПервойИнформационнойБазы");
		мТекущаяНастройка.СохраненнаяНастройка.Вставить("ТаблицаНастроек",ТаблицаНастроек);	
       	мТекущаяНастройка.СохраненнаяНастройка.Вставить("АктуальнаяНастройка");
	

		//ЭтапНастройки = 0;
		//СценарийРаботы = 0;		
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СохранитьНастройкиЭтапов()
	
	Если НЕ мТекущаяНастройка.Свойство("СохраненнаяНастройка") 
		ИЛИ ТипЗнч(мТекущаяНастройка.СохраненнаяНастройка) <> Тип("Структура") Тогда
	мТекущаяНастройка.Вставить("СохраненнаяНастройка",Новый Структура);	
	КонецЕсли;	
	
	Если НЕ мТекущаяНастройка.СохраненнаяНастройка.Свойство("ТаблицаНастроек") Тогда
		ТаблицаНастроек = Новый ТаблицаЗначений;
		ТаблицаНастроек.Колонки.Добавить("НастройкаОбмена");
		ТаблицаНастроек.Колонки.Добавить("НомерАктуальногоЭтапа");
		ТаблицаНастроек.Колонки.Добавить("ДействиеВыбранноеПользователем");
		ТаблицаНастроек.Колонки.Добавить("ИмяФайлаНастроекОбменаПервойИнформационнойБазы");
		мТекущаяНастройка.СохраненнаяНастройка.Вставить("ТаблицаНастроек",ТаблицаНастроек);	
		
	КонецЕсли;	
	
	Если НЕ мТекущаяНастройка.СохраненнаяНастройка.Свойство("АктуальнаяНастройка") Тогда
		мТекущаяНастройка.СохраненнаяНастройка.Вставить("АктуальнаяНастройка");
	КонецЕсли;
	
	Если МассивПройденныхЭтапов.Количество() > 0 Тогда
		
		
		
		МаксимальныйЭтап = МассивПройденныхЭтапов[0];
		Для Инд = 1 По МассивПройденныхЭтапов.ВГраница() цикл
			МаксимальныйЭтап = ?(МассивПройденныхЭтапов[Инд]>МаксимальныйЭтап,МассивПройденныхЭтапов[Инд],МаксимальныйЭтап);
		КонецЦикла;
		
		СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена");
		Если СтрокаНастроек = Неопределено Тогда
			
			СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Добавить();	
			
			Если МаксимальныйЭтап = 1 Тогда
				СтрокаНастроек.ДействиеВыбранноеПользователем = ДействиеВыбранноеПользователем;	
				Если ДействиеВыбранноеПользователем = 0 Тогда
					СтрокаНастроек.ИмяФайлаНастроекОбменаПервойИнформационнойБазы = ИмяФайлаНастроекОбменаПервойИнформационнойБазы;
				КонецЕсли;
			КонецЕсли;	
			
		КонецЕсли;	
		
		СтрокаНастроек.НастройкаОбмена = НастройкаОбмена;
		СтрокаНастроек.НомерАктуальногоЭтапа = МаксимальныйЭтап;
		
		
		мТекущаяНастройка.СохраненнаяНастройка.АктуальнаяНастройка = НастройкаОбмена;
		
		
		
		
	КонецЕсли;
	
	
	УниверсальныеМеханизмы.СохранитьНастройку(мТекущаяНастройка);
	
	
КонецПроцедуры	

Функция ПроверитьДоступностьВыполненияОбменаСИнформационнойБазой()
	
	СинонимИБДляОбмена = ПодключениеКПриемнику.Метаданные().Synonym;
	
	// ищем синонним в списке возможных обменов
	СтрокиОбмена = мТаблицаВозможныхОбменов.НайтиСтроки(Новый Структура("НаименованиеКонфигурации", СинонимИБДляОбмена));
	
	Если СтрокиОбмена.Количество() = 0 Тогда
		
		Сообщить("Не найдены правила для обмена с конфигурацией: " + СинонимИБДляОбмена);
		Сообщить("Укажите тип информационной базы приемника");
		
	Иначе
		
		// правила есть, нужно теперь в форме отсеять что бы отображались эти правила	
		ЗаполнитьСписокТиповИнформационныхБазДляОбмена(ЭлементыФормы.ТипИнформационнойБазыДляОбмена.СписокВыбора, СтрокиОбмена);
		
		ЭлементыФормы.ТипИнформационнойБазыДляОбмена.Значение = 0;	
		ТипИнформационнойБазыДляОбмена = СтрокиОбмена[0].ИмяПланаОбмена;
		
	КонецЕсли;	
	
	Возврат Истина;	
	
КонецФункции

Процедура УстановитьТипИнформационнойБазыДляОбменаПоПодлючению(ПодключениеКПриемнику)
	
	// по подключению определяем наименование конфигурации
	// по наименованию определяем одну из возможных строк в настройке
	
	НаименованиеКонфигурации = ПодключениеКПриемнику.Метаданные().Synonym;
	
	Для ТекущийНомер = 0 По мТаблицаВозможныхОбменов.Количество() - 1 Цикл
		
		Если мТаблицаВозможныхОбменов[0].НаименованиеКонфигурации = НаименованиеКонфигурации Тогда
			
			ИнформацияОТипеОбмена = ТекущийНомер;
			ЭлементыФормы.ТипИнформационнойБазыДляОбмена.Значение = ТекущийНомер;
			ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[ТекущийНомер].ИмяПланаОбмена;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 2
	|	НастройкиОбменаДанными.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиОбменаДанными КАК НастройкиОбменаДанными
	|ГДЕ
	|	НастройкиОбменаДанными.ПометкаУдаления = ЛОЖЬ
	|	И НастройкиОбменаДанными.OnLineОбмен = ИСТИНА
	|	И НастройкиОбменаДанными.ТипУзлаИнформационнойБазы = &ТипУзла";
	
	Запрос.УстановитьПараметр("ТипУзла", ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ПустаяСсылка());
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	Если ТаблицаРезультата.Количество() = 1 Тогда
		ЕдинственнаяНастройка = ТаблицаРезультата[0].Ссылка;
	КонецЕсли;
	
	Возврат ТаблицаРезультата.Количество();
	
КонецФункции

Функция ОпределитьВыбраныВсеЭлементыТаблицы(ТаблицаВыбора)
	
	Для Каждого СтрокаВыбора Из ТаблицаВыбора Цикл
		
		Если НЕ СтрокаВыбора.Пометка Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьЗагрузкуИнформацииОПравилахВыгрузкиИВариантахПоискаПоРекомендуемымНастройкам(ОбновлятьНастройкиПоиска = Ложь)
	ИнформацияОТипеОбмена = ОпределитьТипИБПоПараметрам();
	
	ПравилаВыгрузки = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена);
	
	НужноВнестиИзмененияВИнформационнуюБазуПриемника = ДействиеВыбранноеПользователем = 0;
	
	Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
		ПравилаЗагрузки = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
	Иначе
		ПравилаЗагрузки = Новый ХранилищеЗначения("");
	КонецЕсли;
	
	ТаблицаНастроекВыгрузкиДляПолейПоиска = Неопределено;
	ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки = Неопределено;
	
	ПроцедурыОбменаДанными.ПолучитьТаблицыИнформацииОПравилахОбмена(ПравилаВыгрузки, ТаблицаНастроекВыгрузкиДляПолейПоиска, ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки);
	
	ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки = ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки.Скопировать();
	ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Колонки.Добавить("ЭтоНастройкаДляВыгрузки");
	ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.ЗаполнитьЗначения(Истина, "ЭтоНастройкаДляВыгрузки");
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		
		
		ТаблицаНастроекЗагрузкиДляПолейПоиска = Неопределено;
		ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки = Неопределено;
		
		ПроцедурыОбменаДанными.ПолучитьТаблицыИнформацииОПравилахОбмена(ПравилаЗагрузки, ТаблицаНастроекЗагрузкиДляПолейПоиска, ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки);
		
		
		Для Каждого СтрокаНастроекЗагрузки Из ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки Цикл
			
			СтрокаДобавления = ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавления, СтрокаНастроекЗагрузки);
			СтрокаДобавления.ЭтоНастройкаДляВыгрузки = Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	
	ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки.Сортировать("ЭтоНастройкаДляВыгрузки Убыв, КодПравилаВыгрузки");
	
	ПроцедурыОбменаДаннымиКлиент.ОбновитьТаблицуНастроекВыгрузкиДанных(ЭтаФорма);
	
	Если ОбновлятьНастройкиПоиска Тогда
		//для вариантов поиска свои настройки
		ОбновитьНастройкиВариантовПоискаОбъектов();
	КонецЕсли;
КонецПроцедуры


Процедура ПользовательЗаполнилВсеНеобходимыеДанные()
	
	Настройка = Неопределено;
	
	РезультатПрименения = СохранитьНастройкиПервогоЭтапа(Настройка,ИнформацияОТипеОбмена);	
	Если НЕ РезультатПрименения Тогда
		Возврат;
	КонецЕсли;
	
	НастройкаОбмена = Настройка.Ссылка;
	
	мМассивПереходовПоСтраницам.Очистить();
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Ложь;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель.Доступность = Ложь;
	
	
	мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап1;
	
	
	Если ВладелецФормы <> Неопределено Тогда
		
		Попытка
			
			// оповещаем форму списка настроек о том, что создан новый элемент
			ВладелецФормы.ОповеститьОЗаписиНовогоОбъекта(НастройкаОбмена);
			
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
	
	
КонецПроцедуры


Процедура ОсновныеДействияФормыНазад(Кнопка)
	
	// назад
	ВыполнитьПереходНазад();
	
КонецПроцедуры

Процедура СоздатьКнопкуНазадПриНеобходимости()
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад.Доступность = Истина;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Разделитель.Доступность = Истина;	
	
КонецПроцедуры

Процедура ЗаполнитьСписокОграниченийДляПользователей()
	
	Если ТаблицаВыбораОрганизаций.Количество() = 0 Тогда
		
		ВыбраныВсеОрганизации = (Организации.Количество() = 0);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	Организации.Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(НЕ Организации.ПометкаУдаления)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокаТаблицы = ТаблицаВыбораОрганизаций.Добавить();	
			СтрокаТаблицы.Организация = Выборка.Ссылка;
			СтрокаТаблицы.Пометка = ВыбраныВсеОрганизации
			ИЛИ (Организации.Найти(Выборка.Ссылка, "Организация") <> Неопределено);
			
		КонецЦикла;		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСписокОграниченийДляПользователейПоНастройке(НастройкаОбменаДляЗаполнения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Организации.Ссылка КАК Организация,
	                      |	ВЫБОР
	                      |		КОГДА Организации.Ссылка В (&МассивОрганизаций)
	                      |				ИЛИ &ВсеОрганизации = 0
	                      |			ТОГДА ИСТИНА
	                      |		ИНАЧЕ ЛОЖЬ
	                      |	КОНЕЦ КАК Пометка
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |ГДЕ
	                      |	(НЕ Организации.ПометкаУдаления)");
	Запрос.УстановитьПараметр("МассивОрганизаций",НастройкаОбменаДляЗаполнения.УзелИнформационнойБазы.Организации.ВыгрузитьКолонку("Организация"));					 
	Запрос.УстановитьПараметр("ВсеОрганизации",НастройкаОбменаДляЗаполнения.УзелИнформационнойБазы.Организации.Количество());
	ТаблицаВыбораОрганизаций = Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры


Процедура УстановитьТекстыКнопокИКартинки(ТекстКнопки)
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Текст = ТекстКнопки;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее.Подсказка = ?(ТекстКнопки = "Готово", "Применить настройки", ?(ТекстКнопки = "Закрыть", "Закрыть", "Перейти к следующему пункту настройки"))	;
	
	ЭлементыФормы.ПанельКартинки.ТекущаяСтраница = ?(ТекстКнопки <> "Далее", 
	ЭлементыФормы.ПанельКартинки.Страницы.СтраницаГотово, 
	ЭлементыФормы.ПанельКартинки.Страницы.СтраницаНастройки);
	
КонецПроцедуры

// процедура устанавливает активной нужную страницу дополнительных настроек
Процедура УстановитьСтраницуДополнительныхНастроек()
	
	Если мБазоваяПоставка Тогда 
		ЭлементыФормы.ОбменЧерезCOMСоединение.Доступность = Ложь;
		ЭлементыФормы.ОбменЧерезCOMСоединение.Заголовок = ЭлементыФормы.ОбменЧерезCOMСоединение.Заголовок + " (недоступно в базовой версии)";
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;	
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда 
		ВозможностьПодключенияКоВторойИнформационнойБазе  = Истина;
	Иначе
		ВозможностьПодключенияКоВторойИнформационнойБазе  = Ложь;
	КонецЕсли;
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.Файловый;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаКаталог;
		НадписьПояснениеКПроцедуреОбмена = "Данные для обмена будут выгружаться и загружаться в единый для двух информационных баз каталог обмена.";
		
		Если ПустаяСтрока(КаталогОбменаИнформацией) Тогда
			
			КаталогОбменаИнформацией = ПроцедурыОбменаДанными.ОпределитьНовоеИмяКаталогаДляОбменаДанными();
			
		КонецЕсли;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.FTPОбмен;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаFTP;
		НадписьПояснениеКПроцедуреОбмена = "Данные для обмена будут выгружаться и загружаться в единый для двух информационных баз FTP адрес обмена.";
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.ОбменЧерезCOM;
		ЭлементыФормы.ПанельКартинокОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокОбмена.Страницы.СтраницаПодключение;
		ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();
		НадписьПояснениеКПроцедуреОбмена = "Данные будут передаваться путем подключения к информационной базе приемнику.";
		
	КонецЕсли;
	
КонецПроцедуры

// при изменении типа настройки
Процедура ТипНастройкиПриИзменении(Элемент)
	
	УстановитьСтраницуДополнительныхНастроек();
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога обмена информацией
Процедура КаталогОбменаИнформациейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РезультатВыбора = ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении каталога обмена информацией
Процедура КаталогОбменаИнформациейПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
КонецПроцедуры

// при изменении FTP адреса обмена
Процедура FTPАдресОбменаПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// открытие каталога FTP
Процедура FTPАдресОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение("ftp://" + ПроцедурыОбменаДанными.НормализоватьFTPАдрес(Элемент.Значение));
	
КонецПроцедуры

// при нажатии на кнопку проверить FTP соединение
Процедура ПроверитьНажатие(Элемент)
	
	ОчиститьСообщения();
	
	РезультатПроверки = ПроцедурыОбменаДанными.ПроверитьНастройкиFTPПодключения(ЭтотОбъект);
	
	Если РезультатПроверки Тогда
		Предупреждение("Проверка успешно пройдена !" , 30, "Проверка FTP подключения");
	Иначе
		Предупреждение("Возникли ошибки при подключении !", 30, "Проверка FTP подключения");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения()
	
	Если ТипИнформационнойБазыДляПодключения Тогда
		ЭлементыФормы.ПанельподключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник.Страницы.ПодключениеФайловаяИБ;
	Иначе
		ЭлементыФормы.ПанельподключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельподключениеИБПриемник.Страницы.ПодключениеСервернаяИБ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();		
	
КонецПроцедуры

Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьПользовательДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.НадписьПароль.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Функция ВыполнитьПроверкуДостаточностиПараметровДляПодключенияКПриемнику()
	
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();
	
	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);
	
	Результат = ОбработкаОбмена.ОпределитьДостаточностьПараметровДляПодключенияКПриемнику();
	
	Возврат Результат;	
	
КонецФункции

Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыполнитьДействияПриВыбореТипаИнформационнойБазы()
	
	// определим сколько узлов в плане обмена который выбрал пользователь. Если узел только свой - то зададим имя настройки по умолчанию
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ 
	|	Количество(ПланОбменаПользователя.Ссылка) КАК Количество
	|ИЗ
	|	ПланОбмена." + ТипИнформационнойБазыДляОбмена + " КАК ПланОбменаПользователя
	|	ГДЕ ПланОбменаПользователя.ПометкаУдаления = ЛОжь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоУзлов = 0;
	Если Выборка.Следующий() Тогда
		КоличествоУзлов = Выборка.Количество;
	КонецЕсли;
	
	Если КоличествоУзлов < 2 Тогда
		
		НаименованиеИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ПредставлениеКонфигурации;
		
	КонецЕсли;	
	
	Если НужныОграниченияПоОрганизации() Тогда
		
		ЭлементыФормы.ПанельНастроекУзлаОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекУзлаОбмена.Страницы.НастройкиОбменаПоОрганизации;
		Если СценарийРаботы = 0 Тогда
			ЗаполнитьСписокОграниченийДляПользователей();
		Иначе
			ЗаполнитьСписокОграниченийДляПользователейПоНастройке(НастройкаОбмена);
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.ПанельНастроекУзлаОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекУзлаОбмена.Страницы.ПустаяСтраница;
		
	КонецЕсли;
	
КонецПроцедуры


Процедура ТипИнформационнойБазыДляОбменаПриИзменении(Элемент)
	
	
	ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяПланаОбмена;
	
	ВыполнитьДействияПриВыбореТипаИнформационнойБазы();
	
КонецПроцедуры


// при нажатии на "Открытие" у каталога обмена данными
Процедура КаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ИмяФайлаНастроекОбменаПервойИнформационнойБазы1Открытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ДополнительныеНастройкиОбменаДаннымиНажатие(Элемент)
	
	ФормаДопНастроекАвтообмена = ПолучитьФорму("ДополнительныеНастройки", ЭтаФорма); 
	РезультатОткрытия = ФормаДопНастроекАвтообмена.ОткрытьМодально();	
	
КонецПроцедуры


Процедура Надпись121Нажатие(Элемент)
	
	ОткрытьПодсказкуПользователю("ПараметрыПодключения");	
	
КонецПроцедуры

Процедура ОткрытьПодсказкуПользователю(ИмяПодсказки)
	
	ФормаПомощи = ПолучитьФорму("ФормаПомощи");
	ФормаПомощи.ОткрытьПомощь(ИмяПодсказки);
	ФормаПомощи.Открыть();	
	
КонецПроцедуры

Функция ПолучитьСписокВыбораРазмеровПакетовFTP()
	
	СписокВыбора = Новый СписокЗначений();
	
	СписокВыбора.Добавить(256 , "256 КБт");
	СписокВыбора.Добавить(512 , "512 КБт");
	СписокВыбора.Добавить(1024 ,"1 MБт");
	СписокВыбора.Добавить(2048 ,"2 MБт");
	СписокВыбора.Добавить(4096 ,"4 MБт");
	СписокВыбора.Добавить(8192 ,"8 MБт");
	СписокВыбора.Добавить(16384,"16 MБт");
	СписокВыбора.Добавить(32768,"32 MБт");
	СписокВыбора.Добавить(65536,"64 MБт");
	СписокВыбора.Добавить(131072,"128 MБт");
	СписокВыбора.Добавить(262144,"256 MБт");
	СписокВыбора.Добавить(0 , "Без ограничений");
	
	Возврат СписокВыбора;
	
КонецФункции

Процедура МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ПолучитьСписокВыбораРазмеровПакетовFTP();
	
	ВыбранноеЗначениеСписка = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент);
	
	Если ВыбранноеЗначениеСписка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначениеСписка.Значение;
	КонецЕсли;	
	
КонецПроцедуры



Процедура НадписьДобавлениеНастройкиВСуществующееРасписаниеНажатие(Элемент)
	
	// добавить настройку в существующее расписание
	ФормаСписка = Справочники.НастройкиВыполненияОбмена.ПолучитьФормуСписка();
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура НадписьДобавлениеНастройкиВНовоеРасписаниеНажатие(Элемент)
	
	// создать новую настройку для расписания
	ЭлементОбмена = Справочники.НастройкиВыполненияОбмена.СоздатьЭлемент();
	Если ЭтапНастройки = 0 Тогда
		ЭлементОбмена.Заполнить(НастройкаОбмена);
	Иначе
		ЭлементОбмена.Заполнить(НастройкаОбмена);	
	КонецЕсли;
	
	ЭлементОбмена.ПолучитьФорму().Открыть();
	
КонецПроцедуры


Процедура НастройкаВариантовПоискаОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедурыОбменаДаннымиКлиент.ОпределитьИмяВыгрузкиЭлементаПоСтрокеНастройки(Элемент);
	
	// новые настройки для обмена, которые не поддерживаются правилами обмена загружать нельзя
	Если НоваяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ОбязательноОбновитьТаблицуНастроекИзПравил = Ложь) Экспорт
	
	ПравилаВыгрузки = Новый ХранилищеЗначения(ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена));
	
	НужноВнестиИзмененияВИнформационнуюБазуПриемника = (ДействиеВыбранноеПользователем = 0
	И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение);
	
	Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
		ПравилаЗагрузки = Новый ХранилищеЗначения(ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена));
	Иначе
		ПравилаЗагрузки = Новый ХранилищеЗначения("");
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ЭтаФорма, ПравилаВыгрузки, ПравилаЗагрузки, ОбязательноОбновитьТаблицуНастроекИзПравил);
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		
		ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные.ОписаниеНастройкиДляПользователя = "";	
		ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные.ВариантПоискаНеПоддерживается = Ложь;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Этаформа, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.НастройкаНеПоддерживается Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
	Если ДанныеСтроки.ЭтоНастройкаДляВыгрузки Тогда
		Если мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации = "УТ" Тогда
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("УТ->БП");
		Иначе
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("БП->УТ");
		КонецЕсли;	
	Иначе
		Если мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации = "УТ" Тогда
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("БП->УТ");
		Иначе
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("УТ->БП");
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанных1НастройкаВыгрузкиПриИзменении(Элемент)
	УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(ЭлементыФормы.НастройкаВыгрузкиДанных1, Элемент.Значение);	
КонецПроцедуры

Процедура УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(ЭлементНастройкиВыгрузкиДанных, Значение,СтрокаВыбора = Неопределено)
	Если СтрокаВыбора = Неопределено Тогда
		СтрокаВыбора = ЭлементНастройкиВыгрузкиДанных.ТекущиеДанные;
	КонецЕсли;
	
	Если Значение = "Не выгружать" Тогда
		
		СтрокаВыбора.ВыгружатьДанные = Ложь;
		СтрокаВыбора.ВыгружатьПоСсылке = Ложь;
		
	ИначеЕсли Значение = "Только по ссылке" Тогда
		
		СтрокаВыбора.ВыгружатьДанные = Истина;
		СтрокаВыбора.ВыгружатьПоСсылке = Истина;
		
	ИначеЕсли Значение = "Выгружать" Тогда
		
		СтрокаВыбора.ВыгружатьДанные = Истина;
		СтрокаВыбора.ВыгружатьПоСсылке = Ложь;		
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ЭтоНастройкаДляВыгрузки Тогда
		Если мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации = "УТ" Тогда
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("УТ->БП");
		Иначе
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("БП->УТ");
		КонецЕсли;	
	Иначе
		Если мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации = "УТ" Тогда
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("БП->УТ");
		Иначе
			ОформлениеСтроки.Ячейки.НаправлениеОбмена.УстановитьТекст("УТ->БП");
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры


Процедура ПрефиксДляИБПриемникаПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

Процедура ПрефиксДляИБИсточникаПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкаВыгрузкиДанныхИзменитьНастройку1(Кнопка)
	ИзменитьНастройкиВыгрузкиДляВыделенныхСтрок(ЭлементыФормы.НастройкаВыгрузкиДанных1);
КонецПроцедуры


Процедура ИзменитьНастройкиВыгрузкиДляВыделенныхСтрок(ЭлементНастройкиВыгрузкиДанных)
	ВыделенныеСтроки = ЭлементНастройкиВыгрузкиДанных.ВыделенныеСтроки;
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений();
	СписокЗначений.Добавить("Выгружать");
	СписокЗначений.Добавить("Только по ссылке");
	СписокЗначений.Добавить("Не выгружать");
	
	ВыбранныйЭлемент = СписокЗначений.ВыбратьЭлемент("Укажите вариант выгрузки", СписокЗначений.НайтиПоЗначению(ПроцедурыОбменаДаннымиКлиент.ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(ВыделенныеСтроки[0])));
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаВыбора Из ВыделенныеСтроки Цикл
		Если СтрокаВыбора = Неопределено Тогда
			СтрокаВыбора = ЭлементНастройкиВыгрузкиДанных.ТекущиеДанные;
		КонецЕсли;
		
		Если ВыбранныйЭлемент.Значение = "Не выгружать" Тогда
			
			СтрокаВыбора.ВыгружатьДанные = Ложь;
			СтрокаВыбора.ВыгружатьПоСсылке = Ложь;
			
		ИначеЕсли ВыбранныйЭлемент.Значение = "Только по ссылке" Тогда
			
			СтрокаВыбора.ВыгружатьДанные = Истина;
			СтрокаВыбора.ВыгружатьПоСсылке = Истина;
			
		ИначеЕсли ВыбранныйЭлемент.Значение = "Выгружать" Тогда
			
			СтрокаВыбора.ВыгружатьДанные = Истина;
			СтрокаВыбора.ВыгружатьПоСсылке = Ложь;		
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	


Процедура ВыполнитьПоискСовпадающихПолейНажатие(Элемент)
	
	ФормаПоиска = ПолучитьФорму("ПоискСовпадающихОбъектов", ЭтаФорма, ЭтаФорма);
	ФормаПоиска.ОбновитьПоиск();
	Если НЕ ФормаПоиска.Открыта() Тогда
		ФормаПоиска.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьНадписьОРежимеПоискаСовпадающихОбъектов()
	
	Если ВозможностьПодключенияКоВторойИнформационнойБазе тогда
		ЭлементыФормы.ИнфНадписьОДоступностиВидаСравненияОбъектов.Заголовок = "Поиск совпадающих по полям синхронизации объектов производится в базе-источнике и в базе-приемнике.";
	Иначе
		ЭлементыФормы.ИнфНадписьОДоступностиВидаСравненияОбъектов.Заголовок = "Поиск совпадающих по полям синхронизации объектов производится только в текущей базе.";
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьАнализСопоставленияОбъектовНажатие(Элемент)
	
	ФормаПроверки = ПолучитьФорму("ПроверкаСопоставленияОбъектов", ЭтаФорма, ЭтаФорма);
	ФормаПроверки.ОбновитьАнализ();
	Если НЕ ФормаПроверки.Открыта() Тогда
		ФормаПроверки.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПроверкуСопоставленияОбъектовНажатие(Элемент)
	СформироватьДеревоСопоставленияОбъектов();
КонецПроцедуры



Процедура СформироватьДеревоСопоставленияОбъектов()
	
	РезультатАнализаСопоставленияОбъектов.Строки.Очистить();
	Если РезультатАнализаСопоставленияОбъектов.Колонки.Найти("UIDОбъекта") = Неопределено тогда	
		РезультатАнализаСопоставленияОбъектов.Колонки.Добавить("UIDОбъекта");
	КонецЕсли;	
	
	АнализСопоставления = ВыполнитьАнализСопоставленияОбъектов(Истина);
	Если АнализСопоставления.ПерваяЧастьЭтаБаза.Строки.Количество() > 0  
		ИЛИ АнализСопоставления.ВтораяЧастьЭтаБаза.Строки.Количество() > 0  Тогда
	СтрокаИБ = РезультатАнализаСопоставленияОбъектов.Строки.Добавить();
	СтрокаИБ.ПерваяКолонка = "В этой информационной базе";

	КонецЕсли;	

		
	Для каждого СтрокаЗаголовка Из АнализСопоставления.ПерваяЧастьЭтаБаза.Строки цикл
		СтрокаЗаголовкаРезультата = СтрокаИБ.Строки.Добавить();
		СтрокаЗаголовкаРезультата.ПерваяКолонка = СтрокаЗаголовка.Заголовок;
		СтрокаЗаголовкаРезультата.ВтораяКолонка = "Ссылка в базе-приемнике";
		СтрокаЗаголовкаРезультата.КоличествоСопоставлений = "Количество дублей";
		Для каждого СтрокаУзлов Из СтрокаЗаголовка.Строки цикл
			СтрокаУзловРезультата = СтрокаЗаголовкаРезультата.Строки.Добавить();
			СтрокаУзловРезультата.ПерваяКолонка = СтрокаУзлов.УзелОбмена;
			СтрокаУзловРезультата.КоличествоСопоставлений = СтрокаУзлов.КоличествоСопоставлений;
			Для каждого СтрокаОбъектов Из СтрокаУзлов.Строки цикл
				СтрокаОбъектовРезультата = СтрокаУзловРезультата.Строки.Добавить();
				СтрокаОбъектовРезультата.ПерваяКолонка = СтрокаОбъектов.СобственнаяСсылка;
				СтрокаОбъектовРезультата.КоличествоСопоставлений = СтрокаОбъектов.КоличествоСопоставлений;
				Для каждого СтрокаДублей Из СтрокаОбъектов.Строки цикл
					СтрокаДублейРезультата = СтрокаОбъектовРезультата.Строки.Добавить();
					СтрокаДублейРезультата.ВтораяКолонка = "UID объекта";
					СтрокаДублейРезультата.UIDОбъекта = СтрокаДублей.СсылкаВДругойИБ;
				КонецЦикла;	
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Для каждого СтрокаЗаголовка Из АнализСопоставления.ВтораяЧастьЭтаБаза.Строки цикл
		СтрокаЗаголовкаРезультата = СтрокаИБ.Строки.Добавить();
		СтрокаЗаголовкаРезультата.ПерваяКолонка = СтрокаЗаголовка.Заголовок;
		СтрокаЗаголовкаРезультата.ВтораяКолонка = "Ссылка в базе-источнике";
		СтрокаЗаголовкаРезультата.КоличествоСопоставлений = "Количество дублей";
		Для каждого СтрокаУзлов Из СтрокаЗаголовка.Строки цикл
			СтрокаУзловРезультата = СтрокаЗаголовкаРезультата.Строки.Добавить();
			СтрокаУзловРезультата.ПерваяКолонка = СтрокаУзлов.УзелОбмена;
			СтрокаУзловРезультата.КоличествоСопоставлений = СтрокаУзлов.КоличествоСопоставлений;
			
			Для каждого СтрокаОбъектов Из СтрокаУзлов.Строки цикл
				СтрокаОбъектовРезультата = СтрокаУзловРезультата.Строки.Добавить();
				СтрокаОбъектовРезультата.ПерваяКолонка = "UID объекта";
				СтрокаОбъектовРезультата.UIDОбъекта    = СтрокаОбъектов.СсылкаВДругойИБ;
				СтрокаОбъектовРезультата.КоличествоСопоставлений    = СтрокаОбъектов.КоличествоСопоставлений;
				
				Для каждого СтрокаДублей Из СтрокаОбъектов.Строки цикл
					СтрокаДублейРезультата = СтрокаОбъектовРезультата.Строки.Добавить();
					СтрокаДублейРезультата.ВтораяКолонка = СтрокаДублей.СобственнаяСсылка;
					СтрокаДублейРезультата.КоличествоСопоставлений = СтрокаДублей.КоличествоСопоставлений;
				КонецЦикла;	
				
			КонецЦикла;	
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если АнализСопоставления.ПерваяЧастьДругаяБаза.Строки.Количество() > 0  
		ИЛИ АнализСопоставления.ВтораяЧастьДругаяБаза.Строки.Количество() > 0  Тогда
		СтрокаИБ = РезультатАнализаСопоставленияОбъектов.Строки.Добавить();
		СтрокаИБ.ПерваяКолонка = "В другой информационной базе";
	КонецЕсли;	
	
	Если АнализСопоставления.ПерваяЧастьДругаяБаза.Строки.Количество() > 0 Тогда  
		
		Для каждого СтрокаЗаголовка Из АнализСопоставления.ПерваяЧастьДругаяБаза.Строки цикл
			СтрокаЗаголовкаРезультата = СтрокаИБ.Строки.Добавить();
			СтрокаЗаголовкаРезультата.ПерваяКолонка = СтрокаЗаголовка.Заголовок;
			СтрокаЗаголовкаРезультата.ВтораяКолонка = "Ссылка в базе-приемнике";
			СтрокаЗаголовкаРезультата.КоличествоСопоставлений = "Количество дублей";
			Для каждого СтрокаУзлов Из СтрокаЗаголовка.Строки цикл
				СтрокаУзловРезультата = СтрокаЗаголовкаРезультата.Строки.Добавить();
				СтрокаУзловРезультата.ПерваяКолонка = СтрокаУзлов.УзелОбмена;
				СтрокаУзловРезультата.КоличествоСопоставлений = СтрокаУзлов.КоличествоСопоставлений;
				Для каждого СтрокаОбъектов Из СтрокаУзлов.Строки цикл
					СтрокаОбъектовРезультата = СтрокаУзловРезультата.Строки.Добавить();
					СтрокаОбъектовРезультата.ПерваяКолонка = "UID объекта";
					СтрокаОбъектовРезультата.UIDОбъекта = СтрокаОбъектов.СобственнаяСсылка;
					
					СтрокаОбъектовРезультата.КоличествоСопоставлений = СтрокаОбъектов.КоличествоСопоставлений;
					Для каждого СтрокаДублей Из СтрокаОбъектов.Строки цикл
						СтрокаДублейРезультата = СтрокаОбъектовРезультата.Строки.Добавить();
						СтрокаДублейРезультата.ВтораяКолонка = СтрокаДублей.СсылкаВДругойИБ;
						
					КонецЦикла;	
					
				КонецЦикла;	
				
			КонецЦикла;
			
		КонецЦикла;	
	КонецЕсли;
	Если АнализСопоставления.ВтораяЧастьДругаяБаза.Строки.Количество() > 0  Тогда
		Для каждого СтрокаЗаголовка Из АнализСопоставления.ВтораяЧастьДругаяБаза.Строки цикл
			СтрокаЗаголовкаРезультата = СтрокаИБ.Строки.Добавить();
			СтрокаЗаголовкаРезультата.ПерваяКолонка = СтрокаЗаголовка.Заголовок;
			СтрокаЗаголовкаРезультата.ВтораяКолонка = "Ссылка в базе-источнике";
			СтрокаЗаголовкаРезультата.КоличествоСопоставлений = "Количество дублей";
			Для каждого СтрокаУзлов Из СтрокаЗаголовка.Строки цикл
				СтрокаУзловРезультата = СтрокаЗаголовкаРезультата.Строки.Добавить();
				СтрокаУзловРезультата.ПерваяКолонка = СтрокаУзлов.УзелОбмена;
				СтрокаУзловРезультата.КоличествоСопоставлений = СтрокаУзлов.КоличествоСопоставлений;
				
				Для каждого СтрокаОбъектов Из СтрокаУзлов.Строки цикл
					СтрокаОбъектовРезультата = СтрокаУзловРезультата.Строки.Добавить();
					СтрокаОбъектовРезультата.ПерваяКолонка = СтрокаОбъектов.СсылкаВДругойИБ; 
					
					СтрокаОбъектовРезультата.КоличествоСопоставлений    = СтрокаОбъектов.КоличествоСопоставлений;
					
					Для каждого СтрокаДублей Из СтрокаОбъектов.Строки цикл
						СтрокаДублейРезультата = СтрокаОбъектовРезультата.Строки.Добавить();
						СтрокаДублейРезультата.ВтораяКолонка = "UID объекта";
						СтрокаДублейРезультата.UIDОбъекта    = СтрокаДублей.СобственнаяСсылка;
						СтрокаДублейРезультата.КоличествоСопоставлений = СтрокаДублей.КоличествоСопоставлений;
					КонецЦикла;	
					
				КонецЦикла;	
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура РезультатАнализаСопоставленияОбъектовПерваяКолонкаОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭлементыФормы.РезультатАнализаСопоставленияОбъектов.ТекущаяСтрока.UIDОбъекта) тогда
		СтандартнаяОбработка = Ложь;
		СтрокаЗаголовка = "UID Объекта";
		ЗначенияРеквизитов = Новый Соответствие;
		ЗначенияРеквизитов.Вставить(СтрокаЗаголовка,ЭлементыФормы.РезультатАнализаСопоставленияОбъектов.ТекущаяСтрока.UIDОбъекта);
		
		ОткрытьФормуРеквизитовОбъекта(ЗначенияРеквизитов,СтрокаЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

Процедура РезультатАнализаСопоставленияОбъектовВтораяКолонкаОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭлементыФормы.РезультатАнализаСопоставленияОбъектов.ТекущаяСтрока.UIDОбъекта) тогда
		СтандартнаяОбработка = Ложь;
		СтрокаЗаголовка = "UID Объекта";
		ЗначенияРеквизитов = Новый Соответствие;
		ЗначенияРеквизитов.Вставить(СтрокаЗаголовка,ЭлементыФормы.РезультатАнализаСопоставленияОбъектов.ТекущаяСтрока.UIDОбъекта);
		
		ОткрытьФормуРеквизитовОбъекта(ЗначенияРеквизитов,СтрокаЗаголовка);
	КонецЕсли;
КонецПроцедуры

//открывает форму реквизитов объекта
//Параметры: 
//РеквизитыОбъекта  - соответствие;
//ЗаголовокФормы    - строка
Процедура ОткрытьФормуРеквизитовОбъекта(РеквизитыОбъекта,СтрокаЗаголовка = "")
	ФормаРеквизитовОбъектов = ПолучитьФорму("СписокРеквизитовОбъектаСравнения");
	ФормаРеквизитовОбъектов.Заголовок = СтрокаЗаголовка;
	Для каждого РеквизитИЗначение Из РеквизитыОбъекта цикл
		НовСтр = ФормаРеквизитовОбъектов.ТаблицаРеквизитовОбъекта.Добавить();	
		НовСтр.Реквизит = РеквизитИЗначение.Ключ;
		НовСтр.ЗначениеРеквизита = РеквизитИЗначение.Значение;
	КонецЦикла;	
	ФормаРеквизитовОбъектов.ОткрытьМодально();
КонецПроцедуры	

//удаляет записи из РС "Сопоставление объектов информационных баз"
Процедура УбратьДублиОбъектовСопоставленияНажатие(Элемент)
	УбратьДублиОбъектовСопоставления(ВыполнитьАнализСопоставленияОбъектов());
	СформироватьДеревоСопоставленияОбъектов();
КонецПроцедуры

Процедура КоманднаяПанельНастройкаВариантовПоискаОбъектовОбновитьНастройкиПоНовомуОбмену(Кнопка)
	ОбновитьНастройкиВариантовПоискаОбъектов();
КонецПроцедуры

Процедура НастройкаВариантовПоискаНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// начало выбора настройки из списка
	ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(Ложь);
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеСтроки.НастройкаНеПоддерживается Тогда
		
		Если ДанныеСтроки.ЭтоНастройкаДляВыгрузки Тогда
			Предупреждение("Настройка выгрузки данных для правила: " + ДанныеСтроки.НаименованиеПравилаОбмена + "  не поддерживается правилами обмена.");
		Иначе
			Предупреждение("Настройка загрузки данных для правила: " + ДанныеСтроки.НаименованиеПравилаОбмена + "  не поддерживается правилами обмена.");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// получаем массив строк таблицы для показа
	СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена", ДанныеСтроки.ЭтоНастройкаДляВыгрузки, ДанныеСтроки.КодПравилаОбмена);
	МассивСтрок = мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
	
	ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораВариантаСопоставления", ЭтаФорма);
	Для Каждого ЭлементМассива Из МассивСтрок Цикл
		СтрокаВыбора = ФормаВыбора.НастройкаВариантовПоискаОбъектов.Добавить();	
		ЗаполнитьЗначенияСвойств(СтрокаВыбора, ЭлементМассива);
	КонецЦикла;
	
	СтрокаВыбора = ФормаВыбора.НастройкаВариантовПоискаОбъектов.Найти(ДанныеСтроки.ИмяНастройкиДляАлгоритма, "ИмяНастройкиДляАлгоритма");
	
	Если СтрокаВыбора <> Неопределено Тогда
		
		ФормаВыбора.ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущаяСтрока = СтрокаВыбора;
		
	КонецЕсли;
	
	ВыборВариантаСопоставления = ФормаВыбора.ОткрытьМодально();
	
	Если Не ЗначениеЗаполнено(ВыборВариантаСопоставления) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ИмяНастройкиДляАлгоритма = ВыборВариантаСопоставления;
	
	СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки,КодПравилаОбмена,ИмяНастройкиДляАлгоритма", ДанныеСтроки.ЭтоНастройкаДляВыгрузки, ДанныеСтроки.КодПравилаОбмена, ДанныеСтроки.ИмяНастройкиДляАлгоритма);
	МассивСтрок = мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок <> Неопределено
		И МассивСтрок.Количество() > 0 Тогда
		
		ДанныеСтроки.ОписаниеНастройкиДляПользователя = МассивСтрок[0].ОписаниеНастройкиДляПользователя;	
		ДанныеСтроки.НаименованиеПравилаОбмена = МассивСтрок[0].НаименованиеПравилаОбмена;
		ДанныеСтроки.НастройкаНеПоддерживается = Ложь;
		ДанныеСтроки.ВариантПоискаНеПоддерживается = Ложь;
		ДанныеСтроки.ИмяНастройкиДляПользователя = МассивСтрок[0].ИмяНастройкиДляПользователя;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ИмяФайлаНастроекОбменаПервойИнформационнойБазыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.Заголовок = "Файл для настройки обмена";
	Диалог.Фильтр = "Файл для настройки обмена (*.xml)|*.xml";
	
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.ПолноеИмяФайла = "НастройкиДляВторойИнформационнойБазы.xml";
	
	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	Иначе
		Элемент.Значение = Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаНастроекОбменаПервойИнформационнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыДалее(Кнопка)
	
	ВыполнитьПереходДалее();
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
		Предупреждение("Не выбрана настройка обмена данными");
		Возврат;
	КонецЕсли;	
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(НастройкаОбмена,, глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
		
	ОбновитьДоступностьЭтаповОбмена(Элемент.Имя);

КонецПроцедуры

Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	
	
	НужнаКопкаГотово = Ложь;
	НужнаКнопкаЗакрыть = Ложь;
	ДоступностьКнопкиНазад = Истина;
	ДоступностьКнопкиВперед = Истина;
	
	Если мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена Тогда
		
		КоличествоНастроекДляВыбора = ЭлементыФормы.ТипИнформационнойБазыДляОбмена.СписокВыбора.Количество();
		
		Если ПустаяСтрока(ТипИнформационнойБазыДляОбмена)
			И КоличествоНастроекДляВыбора > 0 Тогда
			
			ЭлементыФормы.ТипИнформационнойБазыДляОбмена.Значение = 0;	
			ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[0].ИмяПланаОбмена;
			
		КонецЕсли;
		
		Если  ЭтапНастройки = 5 тогда
			ЗаполнитьСписокОграниченийДляПользователейПоНастройке(НастройкаОбмена);
		Иначе
			ВыполнитьДействияПриВыбореТипаИнформационнойБазы();
		КонецЕсли;
		
		Если КоличествоНастроекДляВыбора = 1 Тогда
			
			ТекущийЭлемент = ЭлементыФормы.НаименованиеИнформационнойБазыДляОбмена;
			
		КонецЕсли;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПередачаДанныхМеждуИБ Тогда
		
		
		
		УстановитьСтраницуДополнительныхНастроек();
		
		ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Старт Тогда
		
		ДоступностьКнопкиНазад = Ложь;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДанными Тогда
		
		
		Если ТипНастройки <> Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение 
			ИЛИ СценарийРаботы = 2 Тогда
			ЭлементыФормы.ПрефиксДляИБПриемника.Видимость = Ложь;
			ЭлементыФормы.НадписьПрефиксТекущейБазыПриемника.Видимость = Ложь;
		КонецЕсли;	
		
		Если СценарийРаботы = 0 
			ИЛИ СценарийРаботы = 1 Тогда
			
			Если ДействиеВыбранноеПользователем = 0 Тогда
			
				Если НЕ ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов) Тогда
					ДатаНачалаВыгрузкиДокументов = ОпределитьДатуНачалаВыгрузкиДокументов();
				КонецЕсли;	
			Иначе
				ЭлементыФормы.ДатаНачалаВыгрузкиДокументов.Доступность = Ложь;
			КонецЕсли;
			
			
			Если ПустаяСтрока(мПрефиксДляИБПриемника) Тогда
				Если ПустаяСтрока(ПрефиксДляИБПриемника) Тогда
					ПрефиксДляИБПриемника = мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ПрефиксПоУмолчанию;	
				КонецЕсли;
			Иначе
				ПрефиксДляИБПриемника = мПрефиксДляИБПриемника;
				ЭлементыФормы.ПрефиксДляИБПриемника.Доступность = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(мПрефиксДляИБИсточника) Тогда
				Если ПустаяСтрока(ПрефиксДляИБИсточника) Тогда
				ПрефиксДляИБИсточника = мСтруктураИнформацииОТекущейИнформационнойБазе.ПрефиксПоУмолчанию;	
				КонецЕсли;
			
			Иначе
				ПрефиксДляИБИсточника = мПрефиксДляИБИсточника;
				ЭлементыФормы.ПрефиксДляИБИсточника.Доступность = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли СценарийРаботы = 2 Тогда
			
			ПрефиксДляИБИсточника = мПрефиксДляИБИсточника;
			
			Если НЕ ПустаяСтрока(мПрефиксДляИБИсточника) Тогда
				
				ЭлементыФормы.ПрефиксДляИБИсточника.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПоискСовпадающихОбъектовДоПервогоОбмена Тогда	
		
		УстановитьНадписьОРежимеПоискаСовпадающихОбъектов();
		Если (СценарийРаботы = 1 Или
			СценарийРаботы = 0) Тогда
			
			ДоступностьКнопкиНазад = Ложь;
			
			Если ТипНастройки <> Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				
				Если  НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
					
					ЭлементыФормы.НадписьПоискСовпадающихОбъектовФайловыйРежимВтораяИБ.Заголовок = "Настройки вариантов поиска в этой информационной базе должны быть идентичны настройкам вариантов поиска в другой информационной базе.";
					ЭлементыФормы.ВыполнитьПоискСовпадающихПолей.Доступность = Истина;
					ЭлементыФормы.НастройкаВариантовПоискаОбъектов.Доступность = Истина;
					
				Иначе
					
					ЭлементыФормы.НадписьПоискСовпадающихОбъектовФайловыйРежимВтораяИБ.Заголовок = "Поиск в этой информационной базе производить не нужно. Перейдите далее.";
					ЭлементыФормы.ВыполнитьПоискСовпадающихПолей.Доступность = Ложь;
					ЭлементыФормы.НастройкаВариантовПоискаОбъектов.Доступность = Ложь;
					
				КонецЕсли;	

				
			КонецЕсли;
			
		ИначеЕсли СценарийРаботы = 2 Тогда
			
			Если мТекущаяНастройка.СохраненнаяНастройка.Свойство("ТаблицаНастроек") 
				И мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена")<> Неопределено 
				И мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена").НомерАктуальногоЭтапа >= 3 Тогда
				
				//СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена");
				ЭлементыФормы.НадписьПоискСовпадающихОбъектовФайловыйРежимВтораяИБ.Заголовок = "Поиск в этой информационной базе производить не нужно. Перейдите далее.";		
				ЭлементыФормы.ВыполнитьПоискСовпадающихПолей.Доступность = Ложь;
				ЭлементыФормы.НастройкаВариантовПоискаОбъектов.Доступность = Ложь;
				
			Иначе	
				
				ЭлементыФормы.ВыполнитьПоискСовпадающихПолей.Доступность = Истина;
				ЭлементыФормы.НастройкаВариантовПоискаОбъектов.Доступность = Истина;
				
			КонецЕсли;	
			
			
		КонецЕсли;	
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.АнализСопоставленияОбъектов  Тогда
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОбменСправочниками  Тогда	
		
		ДоступностьКнопкиВперед = Ложь;
		ДоступностьКнопкиНазад = Ложь;
		
		
		Если ТипНастройки  = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельНастроекОбменСправочниками.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекОбменСправочниками.Страницы.ОбменСОМ;
		Иначе
			ЭлементыФормы.ПанельНастроекОбменСправочниками.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекОбменСправочниками.Страницы.ОбменФайл;
		КонецЕсли;	
		
		Если РежимЭксперта Тогда
			ЭлементыФормы.ПанельРежимовОбменСправочниками.ТекущаяСтраница = ЭлементыФормы.ПанельРежимовОбменСправочниками.Страницы.РежимЭксперта;	
		Иначе
			ЭлементыФормы.ПанельРежимовОбменСправочниками.ТекущаяСтраница = ЭлементыФормы.ПанельРежимовОбменСправочниками.Страницы.РежимПользователя;
		КонецЕсли;	
		
			
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОбменДокументами  Тогда		
		
		ДоступностьКнопкиВперед = Ложь;
		ДоступностьКнопкиНазад = Ложь;
		
		Если ТипНастройки  = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельНастроекОбменДокументами.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекОбменДокументами.Страницы.ОбменСОМ;
		Иначе
			ЭлементыФормы.ПанельНастроекОбменДокументами.ТекущаяСтраница = ЭлементыФормы.ПанельНастроекОбменДокументами.Страницы.ОбменФайл;
		КонецЕсли;	
		
		Если РежимЭксперта Тогда
			ЭлементыФормы.ПанельРежимовОбменДокументами.ТекущаяСтраница = ЭлементыФормы.ПанельРежимовОбменДокументами.Страницы.РежимЭксперта;	
		Иначе
			ЭлементыФормы.ПанельРежимовОбменДокументами.ТекущаяСтраница = ЭлементыФормы.ПанельРежимовОбменДокументами.Страницы.РежимПользователя;
		КонецЕсли;	
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РасписаниеАвтоматическогоОбмена	Тогда
		
		ДоступностьКнопкиНазад = Ложь;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап1 Тогда
		
		НужнаКнопкаГотово = Истина;	
		
		ДоступностьКнопкиНазад = Ложь;
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельПриЗавершенииПервогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииПервогоЭтапа.Страницы.ТипНастройкиСОМ;
		Иначе
			Если ДействиеВыбранноеПользователем = 0 Тогда
				ЭлементыФормы.ПанельПриЗавершенииПервогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииПервогоЭтапа.Страницы.ТипНастройкиФайл;
	    	ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
				ЭлементыФормы.ПанельПриЗавершенииПервогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииПервогоЭтапа.Страницы.ТипНастройкиСОМ;	
			КонецЕсли;
			
		КонецЕсли;	
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап2 Тогда
		
		НужнаКнопкаГотово = Истина;	
		
		ДоступностьКнопкиНазад = Ложь;
		
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельПриЗавершенииВторогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииВторогоЭтапа.Страницы.ТипНастройкиСОМ;
		Иначе
			Если ДействиеВыбранноеПользователем = 0 Тогда
				ЭлементыФормы.ПанельПриЗавершенииВторогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииВторогоЭтапа.Страницы.ТипНастройкиФайл;
			ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
				ЭлементыФормы.ПанельПриЗавершенииВторогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииВторогоЭтапа.Страницы.ТипНастройкиСОМ;
			КонецЕсли;
		КонецЕсли;	
		
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап3 Тогда
		
		НужнаКнопкаГотово = Истина;		
		
		ДоступностьКнопкиНазад = Ложь;
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.Страницы.ТипНастройкиСОМ;
		Иначе
			ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.Страницы.ТипНастройкиФайл;
			
			Если ДействиеВыбранноеПользователем = 0 Тогда
				ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.Страницы.ТипНастройкиФайл;
			ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
				ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииТретьегоЭтапа.Страницы.ТипНастройкиСОМ;
			КонецЕсли;
			
		КонецЕсли;	
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап4 Тогда
		
		НужнаКнопкаГотово = Истина;		
		
		ДоступностьКнопкиНазад = Ложь;
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельПриЗавершенииЧетвертогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииЧетвертогоЭтапа.Страницы.ТипНастройкиСОМ;
		Иначе
			
			Если ДействиеВыбранноеПользователем = 0 Тогда
				ЭлементыФормы.ПанельПриЗавершенииЧетвертогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииЧетвертогоЭтапа.Страницы.ТипНастройкиФайл;
			ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
				ЭлементыФормы.ПанельПриЗавершенииЧетвертогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииЧетвертогоЭтапа.Страницы.ТипНастройкиСОМ;
			КонецЕсли;
			
		КонецЕсли;	
		
		
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап5 Тогда
		
		НужнаКнопкаГотово = Истина;			
		
		ДоступностьКнопкиНазад = Ложь;
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			ЭлементыФормы.ПанельПриЗавершенииПятогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииПятогоЭтапа.Страницы.ТипНастройкиСОМ;
		Иначе
		
			Если ДействиеВыбранноеПользователем = 0 Тогда
				ЭлементыФормы.ПанельПриЗавершенииПятогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииПятогоЭтапа.Страницы.ТипНастройкиФайл;
			ИначеЕсли ДействиеВыбранноеПользователем = 1 Тогда
				ЭлементыФормы.ПанельПриЗавершенииПятогоЭтапа.ТекущаяСтраница =  ЭлементыФормы.ПанельПриЗавершенииПятогоЭтапа.Страницы.ТипНастройкиСОМ;
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап6 Тогда
		
		НужнаКнопкаГотово = Истина;			
		
		ДоступностьКнопкиНазад = Ложь;
		
		
	ИначеЕсли  мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария Тогда	
		
		Если МассивПройденныхЭтапов.Количество() = 0 Тогда
			Если ЭтапНастройки = 0 Тогда
				//создаем новую настройку
			ИначеЕсли ЭтапНастройки > 0 Тогда
				
			КонецЕсли;
			
		Иначе
			//некоторые этапы завершены.
			
			
			МаксимальныйЭтап = МассивПройденныхЭтапов[0];
			Для Инд = 1 По МассивПройденныхЭтапов.ВГраница() цикл
				МаксимальныйЭтап = ?(МассивПройденныхЭтапов[Инд]>МаксимальныйЭтап,МассивПройденныхЭтапов[Инд],МаксимальныйЭтап);
			КонецЦикла;
			
			
			
			
		КонецЕсли;	
		
		Если СценарийРаботы = 0 Тогда
			ЭтапНастройки = 0; 
		КонецЕсли;	
		
		ДоступностьКнопкиНазад = Ложь;
		
		
	ИначеЕсли  ТекущаяСтраница = мСтраницыОсновнойПанели.РежимПомощникаОбмена Тогда
		
		
		
	ИначеЕсли  мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНастройкиОбмена Тогда	 
		Если ДействиеВыбранноеПользователем	= 1 Тогда
			ЭлементыФормы.ИмяФайлаНастроекОбменаПервойИнформационнойБазы2.Доступность = Истина;
			ЭлементыФормы.НадписьИнформацияОФайлеСНастройками.Доступность = Истина;
		Иначе
			ЭлементыФормы.ИмяФайлаНастроекОбменаПервойИнформационнойБазы2.Доступность = Ложь;
			ЭлементыФормы.НадписьИнформацияОФайлеСНастройками.Доступность = Ложь;
		КонецЕсли;	
	КонецЕсли;
	
	УстановитьТекстыКнопокИКартинки(?(НужнаКопкаГотово, "Готово", ?(НужнаКнопкаЗакрыть, "Закрыть", "Далее")));
	
	УстановитьДоступностьКнопки(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Назад,ДоступностьКнопкиНазад);
	УстановитьДоступностьКнопки(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее,ДоступностьКнопкиВперед);
	
	ОбновитьСписокЭтапов();

	
КонецПроцедуры

Процедура УстановитьДоступностьКнопки(Элемент,Доступность)
	Элемент.Доступность = Доступность;
КонецПроцедуры	

Процедура ВыполнитьПереходДалее()
	
	ТекущаяСтраница = мОсновнаяПанель.ТекущаяСтраница;
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ТекущаяСтраница = мСтраницыОсновнойПанели.Старт Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РежимПомощникаОбмена;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.РежимПомощникаОбмена Тогда
		
		Если СценарийРаботы = 0 Тогда
			ЭлементыФормы.ПанельВыбораНастройки.Доступность = Ложь;
			ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Ложь;
		ИначеЕсли СценарийРаботы = 1 Тогда 
			ЭлементыФормы.ПанельВыбораНастройки.Доступность = Истина;
			ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Ложь;
		ИначеЕсли СценарийРаботы = 2 Тогда
			ЭлементыФормы.ПанельВыбораНастройки.Доступность = Ложь;
			ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Истина;
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария;
		
		УстановитьДоступностьСценариев();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария Тогда
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		Если СценарийРаботы = 0 Тогда 
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНастройкиОбмена;
			НастройкаОбмена = Справочники.НастройкиОбменаДанными.ПустаяСсылка();
			ЗаполнитьДанныеПередНачаломПервогоСценария();
			ЭтапНастройки = 0;
			ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(ЭтотОбъект);
		ИначеЕсли СценарийРаботы = 1 Тогда
			//переход на контрольную точку
			Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
				СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена");
				Если СтрокаНастроек <> Неопределено Тогда
					Если СтрокаНастроек.НомерАктуальногоЭтапа >= 5 Тогда
						Сообщить("Данная настройка обмена данными была завершена");
						Возврат;
					Иначе
						ЭтапНастройки 	 = СтрокаНастроек.НомерАктуальногоЭтапа-1;
						СценарийРаботы   = 1;
						ПрочитатьНастройкуОбменаДанными(НастройкаОбмена);
						мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели["ЗавершениеЭтап"+СтрокаНастроек.НомерАктуальногоЭтапа];
						ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(ЭтотОбъект);
					КонецЕсли;
				Иначе
					Сообщить("По данной настройке нет сохраненных этапов");
					Возврат;
				КонецЕсли;
				
			Иначе
				Сообщить("Не выбрана настройка обмена данными");
				Возврат;
				
			КонецЕсли;
			
		ИначеЕсли СценарийРаботы = 2 Тогда
			ЭтапНастройки = 6;
			ПрочитатьНастройкуОбменаДанными(НастройкаОбмена);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПередачаДанныхМеждуИБ;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНастройкиОбмена Тогда
		
		Если ДействиеВыбранноеПользователем = 1 Тогда
			
			Если Не ЗначениеЗаполнено(ИмяФайлаНастроекОбменаПервойИнформационнойБазы) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указано имя файла настроек обмена данными в первой информационной базе.", Отказ);
				
				Возврат;
				
			КонецЕсли;
			
			РезультатЗагрузкиНастроекИзФайла = ЗагрузитьНастройкиИзФайла(ИмяФайлаНастроекОбменаПервойИнформационнойБазы);
			
			Если Отказ ИЛИ НЕ РезультатЗагрузкиНастроекИзФайла Тогда
				Возврат;
			КонецЕсли;
			
			СоздатьКнопкуНазадПриНеобходимости();
			
			мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПередачаДанныхМеждуИБ;
			
		ИначеЕсли ДействиеВыбранноеПользователем = 0 Тогда
			
			УзелИнформационнойБазы = ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ПустаяСсылка();
			
			Если мБазоваяПоставка Тогда
				ВозможностьПодключенияКоВторойИнформационнойБазе = Ложь;
			КонецЕсли;
			
			ЕдинственнаяНастройка = Неопределено;
			КоличествоНастроек = ОпределитьКоличествоНастроекОбмена(ЕдинственнаяНастройка);
			
			Если КоличествоНастроек  = 0  Тогда
				мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
				
				мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПередачаДанныхМеждуИБ;
				
				СоздатьКнопкуНазадПриНеобходимости();
				
			Иначе
				ВопросПользователю = "Настройка обмена уже существует. 
				|
				|Продолжить и создать еще одну настройку?";
				
				ОтветПользователя = Вопрос(ВопросПользователю, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,"Внимание");
				
				Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
					мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
					ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение;
					УстановитьСтраницуДополнительныхНастроек();
					мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПередачаДанныхМеждуИБ;
					СоздатьКнопкуНазадПриНеобходимости();
				Иначе
					ДействиеВыбранноеПользователем = 1;
					УстановитьВидимостьЭлементовФормыФайлаНастроек();
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ПередачаДанныхМеждуИБ Тогда
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда  
			
			Если ПустаяСтрока(КаталогОбменаИнформацией) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указан каталог для обмена данными", Отказ);
				
			Иначе
				
				// существует ли указанный каталог обмена данными
				Если НЕ РаботаСФайлами.ПроверитьСуществованиеКаталога(КаталогОбменаИнформацией) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Не существует каталог обмена данными", Отказ);	
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда 
			
			Если ПустаяСтрока(FTPАдресОбмена) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указан FTP адрес для обмена данными", Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
			
			ПараметровДостаточно = ВыполнитьПроверкуДостаточностиПараметровДляПодключенияКПриемнику();
			
			Если Не ПараметровДостаточно Тогда
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если СценарийРаботы = 0
			ИЛИ СценарийРаботы = 1 Тогда
			
			Если ВозможностьПодключенияКоВторойИнформационнойБазе Тогда
				
				// ко второй базе можно подлючиться, все в один этап делаем
				ПодключитьсяБезопасно();
				
				Если ПодключениеКПриемнику = Неопределено Тогда
					
					// подключиться не смогли
					Предупреждение("Подключиться к информационной базе-приемнику не удалось.
					|Проверьте параметры подключения и повторите попытку.");
				
					ПрефиксДляИБПриемника = "";
					мПрефиксДляИБПриемника = "";
				
					Возврат;
				Иначе
					
					ПрефиксДляИБПриемника = ПодключениеКПриемнику.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
					мПрефиксДляИБПриемника = ПрефиксДляИБПриемника;
				
				КонецЕсли;
				
				// нужно проверить можно ли с этой информационной базой настроить обмен данными
				// есть ли соотвествующие правила обмена
				ДоступностьВыполненияОбмена = ПроверитьДоступностьВыполненияОбменаСИнформационнойБазой();
				Если Не ДоступностьВыполненияОбмена Тогда
					Возврат;
				КонецЕсли;
				
				// смогли подключиться к информационной базе применику, нужно тип обмена установить
				УстановитьТипИнформационнойБазыДляОбменаПоПодлючению(ПодключениеКПриемнику);
				
				ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение;			
				
			Иначе
				
				ПодключениеКПриемнику = Неопределено;
				
			КонецЕсли;
			
			мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОтветныеПакетыВторойИнформационнойБазы;
			
		ИначеЕсли СценарийРаботы = 2 Тогда
			ИнформацияОТипеОбмена = ОпределитьТипИБПоПараметрам();
			мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена Тогда
		
		Если ЭтапНастройки = 0 Тогда
			// проверка на заполненность параметров
			Если ПустаяСтрока(ТипИнформационнойБазыДляОбмена) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указан тип информационной базы для обмена данными", Отказ);
				
			КонецЕсли;
			
			Если ПустаяСтрока(НаименованиеИнформационнойБазыДляОбмена) Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("Не указано наименование информационной базы для обмена данными", Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НужныОграниченияПоОрганизации() Тогда
			
			// смотрим список выбранных организаций
			// если они все - то список пуст
			Организации.Очистить();
			
			ВыбраныВсеОрганизации = ОпределитьВыбраныВсеЭлементыТаблицы(ТаблицаВыбораОрганизаций);
			Если Не ВыбраныВсеОрганизации Тогда
				
				Для Каждого СтрокаВыбора Из ТаблицаВыбораОрганизаций Цикл
					
					Если СтрокаВыбора.Пометка Тогда
						
						СтрокаТЧ = Организации.Добавить();
						СтрокаТЧ.Организация = СтрокаВыбора.Организация;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		мОбщаяТаблицаНастроекПолейПоиска = Неопределено;
		мОбщаяТаблицаНастроекВыгрузки = Неопределено;
		
		Если ЭтапНастройки = 1 Тогда
			НастройкаВариантовПоискаОбъектов.Очистить();
			НастройкаВыгрузкиДанных.Очистить();
		КонецЕсли;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		Если СценарийРаботы = 0 
			ИЛИ СценарийРаботы = 1 Тогда
			
			ВыполнитьДействияПередПереходомНаСтраницуПараметров();
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДанными;
		ИначеЕсли СценарийРаботы = 2 Тогда
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДанными;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ОтветныеПакетыВторойИнформационнойБазы Тогда
		
		ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[0].ИмяПланаОбмена;
		ИнформацияОТипеОбмена = ОпределитьТипИБПоПараметрам();
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.СозданиеНовогоОбмена;
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ПараметрыОбменаДанными Тогда
		
		Если СценарийРаботы = 0
			ИЛИ СценарийРаботы = 1 Тогда
			
			Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				Если ПустаяСтрока(ПрефиксДляИБПриемника) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Заполните префикс для объектов в  информационной базе-приемнике",Отказ);
				КонецЕсли;
				Если ПустаяСтрока(ПрефиксДляИБИсточника) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Заполните префикс для объектов в текущей информационной базе",Отказ);
				КонецЕсли;
			Иначе
				
				Если ПустаяСтрока(ПрефиксДляИБИсточника) Тогда
					ОбщегоНазначения.СообщитьОбОшибке("Заполните префикс для объектов в текущей информационной базе",Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если СценарийРаботы = 2 Тогда
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПоискСовпадающихОбъектовДоПервогоОбмена;
			
		КонецЕсли;
		
		ДействияПередЗавершениемЭтапа();

	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ПоискСовпадающихОбъектовДоПервогоОбмена Тогда
		
		Если  ПроверитьНастройкиВариантовПоиска() Тогда
			Возврат;
		КонецЕсли;
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если СценарийРаботы = 2 Тогда
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.АнализСопоставленияОбъектов;
			
		ИначеЕсли СценарийРаботы = 0
			ИЛИ СценарийРаботы = 1 Тогда
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап2;
			
		КонецЕсли;
		
		ДействияПередЗавершениемЭтапа();
		
	ИначеЕсли ТекущаяСтраница =  мСтраницыОсновнойПанели.АнализСопоставленияОбъектов тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		Если СценарийРаботы = 2 Тогда
			
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап6;
			
		ИначеЕсли СценарийРаботы = 0
			ИЛИ СценарийРаботы = 1 Тогда
			
			Если ЭтапНастройки = 1 Тогда
				
				мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап2;
				
			ИначеЕсли ЭтапНастройки = 3 Тогда
				
				мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап4;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли  мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОбменСправочниками Тогда
		
		Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Предупреждение("Не выбрана настройка обмена данными");
			Возврат;
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап3;
		
		ДействияПередЗавершениемЭтапа();
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.АнализСопоставленияОбъектов Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап2;
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОбменДокументами Тогда
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);	
		
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап4;
		
		ДействияПередЗавершениемЭтапа();
		
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РасписаниеАвтоматическогоОбмена Тогда	
		
		Если НЕ ЗначениеЗаполнено(НастройкаОбмена) Тогда
			Предупреждение("Не выбрана настройка обмена данными");
			Возврат;
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Добавить(мОсновнаяПанель.ТекущаяСтраница);	
		мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап5;
		
		ДействияПередЗавершениемЭтапа();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап1 тогда
		
		ДействияПриЗавершенииЭтапа();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап2 тогда
		
		ДействияПриЗавершенииЭтапа();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап3 тогда
		
		ДействияПриЗавершенииЭтапа();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап4 тогда
		
		ДействияПриЗавершенииЭтапа();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап5 тогда
		
		ДействияПриЗавершенииЭтапа();
		
	ИначеЕсли ТекущаяСтраница = мСтраницыОсновнойПанели.ЗавершениеЭтап6 тогда
		
		ДействияПриЗавершенииЭтапа();
		
	Иначе
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьНастройкиВариантовПоиска()
	ЕстьЗамечания = Ложь;
	ТекстПредупреждения = "Нельзя указывать различные варианты поиска для объектов," + Символы.ПС+"мигрирующих в обоих направлениях обмена данными:" +Символы.ПС;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ЭтоНастройкаДляВыгрузки",Истина);
	МассивСтрокВыгрузки = НастройкаВариантовПоискаОбъектов.НайтиСтроки(СтруктураОтбора);
	Для каждого СтрокаВыгрузки Из МассивСтрокВыгрузки цикл
		СтруктураОтбора.Вставить("ЭтоНастройкаДляВыгрузки",Ложь);
		СтруктураОтбора.Вставить("КодПравилаОбмена",СтрокаВыгрузки.КодПравилаОбмена);
		МассивСтрок = НастройкаВариантовПоискаОбъектов.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаНастроекВариантовПоиска Из МассивСтрок цикл
			Если СтрокаВыгрузки.ИмяНастройкиДляАлгоритма <> СтрокаНастроекВариантовПоиска.ИмяНастройкиДляАлгоритма Тогда
				ЕстьЗамечания = Истина;
				ТекстПредупреждения =  ТекстПредупреждения + "Некорректная настройка вариантов поиска : " + СтрЗаменить(СтрокаНастроекВариантовПоиска.НаименованиеПравилаОбмена,":","") + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;	
	
	Если ЕстьЗамечания Тогда
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;	
	
	Возврат ЕстьЗамечания;
	
КонецФункции

Процедура ЗаполнитьДанныеПередНачаломПервогоСценария()
	ИспользовалсяСтарыйОбмен = Ложь;
	НаименованиеИнформационнойБазыДляОбмена = "";
	ДействиеВыбранноеПользователем = 0;
	ИмяФайлаНастроекОбменаПервойИнформационнойБазы = "";
	ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Ложь;
	ИспользоватьРегламентныеЗадания = Ложь;
	ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю = Перечисления.ВыгрузкаДокументовЗаказПокупателяСчетНаОплатуПокупателю.НеВыгружать;
	Организации.Очистить();
	ТаблицаВыбораОрганизаций.Очистить();
	ДатаНачалаВыгрузкиДокументов = Дата(1,1,1);
	ПрефиксДляИБПриемника = "";
	НастройкаВыгрузкиДанных.Очистить();
	ПодключениеКПриемнику = Неопределено;
КонецПроцедуры	

Процедура ДействияПередЗавершениемЭтапа()
	Если СценарийРаботы = 1 
		ИЛИ СценарийРаботы = 0 Тогда
		МассивПройденныхЭтапов.Добавить(ЭтапНастройки+1);
		Если ЭтапНастройки = 0 Тогда
			ПользовательЗаполнилВсеНеобходимыеДанные();
		ИначеЕсли ЭтапНастройки = 1 Тогда
			//сохранение настройки обмена данными
			СохранитьОтредактированнуюНастройкуОбменаДанными();
			
			
			//регистрация изменений для справочников
			УзелДляРегистрацииИзменений = НастройкаОбмена.УзелИнформационнойБазы;
			
			ОсновныеПравилаОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена);
			//удаление регистрации для всех объектов 
			ОтменитьРегистрациюИзмененийДляУзла(УзелДляРегистрацииИзменений);
			
			ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ОсновныеПравилаОбмена,, "Справочники");
			
			Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				ПодключитьсяБезопасно();
				Если ПодключениеКПриемнику <> Неопределено Тогда
					УзелДляРегистрацииИзменений = ПодключениеКПриемнику.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.НайтиПоКоду(ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел().Код);
					//удаление регистрации для всех объектов
					ОтменитьРегистрациюИзмененийДляУзла(УзелДляРегистрацииИзменений,Истина);
					ПравилаОбменаИзПриемникаВИсточник = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
					ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ПравилаОбменаИзПриемникаВИсточник, Истина, "Справочники");
				КонецЕсли;	
				
			КонецЕсли;	
			
		ИначеЕсли ЭтапНастройки = 2 Тогда	
			//регистрация изменений для документов
			
			УзелДляРегистрацииИзменений = НастройкаОбмена.УзелИнформационнойБазы;
			
			ОсновныеПравилаОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена);
			
			ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ОсновныеПравилаОбмена,, "Документы");
			
			Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				ПодключитьсяБезопасно();
				Если ПодключениеКПриемнику <> Неопределено Тогда
					УзелДляРегистрацииИзменений = ПодключениеКПриемнику.ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.НайтиПоКоду(ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ЭтотУзел().Код);
					ПравилаОбменаИзПриемникаВИсточник = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
					ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ПравилаОбменаИзПриемникаВИсточник, Истина, "Документы");
				КонецЕсли;	
				
			КонецЕсли;	
			
			//подмена комплекта правил
			ОсновныеПравилаОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена,Истина);
			НастройкаОбменаОбъект = НастройкаОбмена.ПолучитьОбъект();
			НастройкаОбменаОбъект.ПравилаОбмена = Новый ХранилищеЗначения(ОсновныеПравилаОбмена);
			
			Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				
				ПравилаОбменаИзПриемникаВИсточник = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена,Истина);
				НастройкаОбменаОбъект.ПравилаОбменаДляПриемника = Новый ХранилищеЗначения(ПравилаОбменаИзПриемникаВИсточник);
			
			КонецЕсли;
			
			НастройкаОбменаОбъект.Записать();
			
		КонецЕсли;
	ИначеЕсли СценарийРаботы = 2 Тогда
		Если ЭтапНастройки = 6 Тогда
			СтруктураДляПереопределенияПравилОбмена = Новый Структура;
			СтруктураДляПереопределенияПравилОбмена.Вставить("мТекущаяНастройка",мТекущаяНастройка);
			СохранитьОтредактированнуюНастройкуОбменаДанными(СтруктураДляПереопределенияПравилОбмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	

Процедура ДействияПриЗавершенииЭтапа()
	
	УвеличитьЗначениеЭтапа();
	
	
	Если СценарийРаботы = 0 Тогда
		СохранитьНастройкиЭтапов();
	ИначеЕсли СценарийРаботы = 1 Тогда
		//переход к актуальному этапу
		//этап настройки на этот момент уже задан. 
		//если настройку обмена перевыбирают в поле ввода, надо актуализировать список этапов
		СохранитьНастройкиЭтапов();
		
	ИначеЕсли СценарийРаботы = 2 Тогда
		
	КонецЕсли;
	
	
	Если ДействиеПриЗавершенииЭтапа = 0 Тогда
		//переход к следующему этапу	
				
		Если ЭтапНастройки = 1 Тогда
			ПрочитатьНастройкуОбменаДанными(НастройкаОбмена);
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ПоискСовпадающихОбъектовДоПервогоОбмена;
		ИначеЕсли ЭтапНастройки = 2 Тогда
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОбменСправочниками;
		ИначеЕсли ЭтапНастройки = 3 Тогда	
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ОбменДокументами;
		ИначеЕсли ЭтапНастройки = 4 Тогда
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РасписаниеАвтоматическогоОбмена;
		ИначеЕсли ЭтапНастройки = 5 Тогда
			СценарийРаботы = 0;
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария;
			УстановитьДоступностьСценариев();
		ИначеЕсли ЭтапНастройки = 6 Тогда	
			СценарийРаботы = 0;
			мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария;
			УстановитьДоступностьСценариев();
		КонецЕсли;
		
		мМассивПереходовПоСтраницам.Очистить();
		
	ИначеЕсли ДействиеПриЗавершенииЭтапа = 1 Тогда
		//завершение работы
		Закрыть();
		
	ИначеЕсли ДействиеПриЗавершенииЭтапа = 2 Тогда 
		//переход к началу работы с помощником
	КонецЕсли;
	
КонецПроцедуры	

Процедура УвеличитьЗначениеЭтапа()
	
	Если ЭтапНастройки < 5 Тогда 
		ЭтапНастройки = ЭтапНастройки + 1;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ВыполнитьПереходНазад()
	
	КоличествоСтраницИстории = мМассивПереходовПоСтраницам.Количество();
	
	Если КоличествоСтраницИстории = 0 Тогда
		Возврат;
	КонецЕсли;
	
	мОсновнаяПанель.ТекущаяСтраница = мМассивПереходовПоСтраницам[КоличествоСтраницИстории - 1];
	
	мМассивПереходовПоСтраницам.Удалить(КоличествоСтраницИстории - 1);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	мДействиеНазад = Новый Действие("ОсновныеДействияФормыНазад");
	
	мОсновнаяПанель = ЭлементыФормы.ПанельОсновная;
	мСтраницыОсновнойПанели =  мОсновнаяПанель.Страницы;
	
	ЗаполнитьСписокТиповИнформационныхБазДляОбмена(ЭлементыФормы.ТипИнформационнойБазыДляОбмена.СписокВыбора, мТаблицаВозможныхОбменов);
	
	мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Старт;
	
	ОбновитьСписокЭтапов();
	
КонецПроцедуры


Процедура ВыполнитьДействияПередПереходомНаСтраницуПараметров()
	
	ЭлементыФормы.НастройкиВыгрузки.Видимость = РежимЭксперта;
	
	Если ЭтапНастройки  = 0 
		ИЛИ ЭтапНастройки = 2 Тогда
		
		Если ДействиеВыбранноеПользователем = 0 Тогда
			ВыполнитьЗагрузкуИнформацииОПравилахВыгрузкиИВариантахПоискаПоРекомендуемымНастройкам(Истина);
		Иначе
			ВыполнитьЗагрузкуИнформацииОПравилахВыгрузкиИВариантахПоискаПоРекомендуемымНастройкам(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СозданиеНовойНастройкиОбменаПриИзменении(Элемент)
	УстановитьВидимостьЭлементовФормыФайлаНастроек();
КонецПроцедуры

Процедура УстановитьВидимостьЭлементовФормыФайлаНастроек()
	ЭлементыФормы.ИмяФайлаНастроекОбменаПервойИнформационнойБазы2.Доступность = ДействиеВыбранноеПользователем = 1;	
	ЭлементыФормы.НадписьИнформацияОФайлеСНастройками.Доступность = ДействиеВыбранноеПользователем = 1;
КонецПроцедуры	

Процедура УстановитьДоступностьСценариев()
	
	Если НЕ РежимЭксперта Тогда
		ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Ложь;
		ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Видимость = Ложь;
		ЭлементыФормы.РедактироватьНастройкуОбмена.Видимость = Ложь;
		ЭлементыФормы.РедактироватьНастройкуОбмена.Доступность = Ложь;
	КонецЕсли;
	
	Если СценарийРаботы = 0 Тогда
		ЭлементыФормы.ПанельВыбораНастройки.Доступность = Ложь;
		ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Ложь;
	ИначеЕсли СценарийРаботы = 1 Тогда 
		ЭлементыФормы.ПанельВыбораНастройки.Доступность = Истина;
		ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Ложь;
	ИначеЕсли СценарийРаботы = 2 Тогда
		ЭлементыФормы.ПанельВыбораНастройки.Доступность = Ложь;
		ЭлементыФормы.ПанельВыбораНастройкиРедактирование.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораНастройкиОбменаУТ_БП(Элемент)
	
	ФормаВыбораНастройки = Справочники.НастройкиОбменаДанными.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбораНастройки.Заголовок = "Выберите настройку для переноса данных";
	ФормаВыбораНастройки.Отбор.OnLineОбмен.Установить(Истина);
	ФормаВыбораНастройки.Отбор.ТипУзлаИнформационнойБазы.Установить(ПланыОбмена.ОбменУправлениеТорговлейБухгалтерияКОРП.ПустаяСсылка());
	ФормаВыбораНастройки.Открыть();
	
КонецПроцедуры	

Процедура ВыбратьНастройкуОбменаДаннымиИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка  = Ложь;
	ОткрытьФормуВыбораНастройкиОбменаУТ_БП(Элемент);
	
КонецПроцедуры

Процедура ОбработкаВыбораНастройки(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПрочитатьНастройкуОбменаДанными(ВыбранноеЗначение);
	КонецЕсли;
	
	Если мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РасписаниеАвтоматическогоОбмена Тогда	
		ОбновитьСтраницыРасписанияАвтоматическогоОбмена();  
	КонецЕсли;	
	
КонецПроцедуры


Процедура ОбновитьСтраницыРасписанияАвтоматическогоОбмена()
	
	Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
		ЭлементыФормы.ПанельРасписанияАвтоматическогоОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельРасписанияАвтоматическогоОбмена.Страницы.РасписаниеФоновогоОбмена;
	Иначе
		ЭлементыФормы.ПанельРасписанияАвтоматическогоОбмена.ТекущаяСтраница = ЭлементыФормы.ПанельРасписанияАвтоматическогоОбмена.Страницы.Пустышка;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбновитьСписокЭтапов()
	
	
	ЭлементыФормы.ПолеЭтаповНастройки.Очистить();
	
	Если РежимЭксперта Тогда
		ДополнениеИмениОбласти = "Эксперт_";
	Иначе
		ДополнениеИмениОбласти = "Пользователь_";
	КонецЕсли;	
	
	
	
	
	Если мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария Тогда
		
		ИмяОбласти = ДополнениеИмениОбласти + "Сценарий"+СценарийРаботы;
		
	ИначеЕсли	мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Старт
		ИЛИ мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РежимПомощникаОбмена Тогда 
		ИмяОбласти = ДополнениеИмениОбласти+"Шапка_"+мОсновнаяПанель.ТекущаяСтраница.Имя+"|СписокЭтапов";
		
	Иначе
		ИмяОбласти =  ДополнениеИмениОбласти + "Сценарий"+СценарийРаботы+"_Этап" + (ЭтапНастройки) + "_" + мОсновнаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	
	мШрифт = МакетЭтаповНастройки.Область(ИмяОбласти).Шрифт;
	МакетЭтаповНастройки.Область(ИмяОбласти).Шрифт = Новый Шрифт(,,Истина);
	
	//выводим область шапки
	Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Шапка" + "|СписокЭтапов");	 
	ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
	
	//выводим сценарии и этапы
	Если	мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.Старт
		ИЛИ мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.РежимПомощникаОбмена Тогда 
		
		Для Инд = 0 По ?(РежимЭксперта,2,1) цикл
			Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ Инд+ "|СписокЭтапов");	 
			ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
			
			Если Инд = 0 Тогда
				Для ИндексЭтапа = 0 По 4 цикл
					Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"_Начало"+ "|СписокЭтапов");	 
					ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
					
					Если ИндексЭтапа = 4 Тогда
						Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"_ЗавершениеЭтап"+(ИндексЭтапа+1)+"|СписокЭтапов");	 
						ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
					КонецЕсли;	
					
				КонецЦикла;	
				
				
			КонецЕсли;	
			
		КонецЦикла;	
	ИначеЕсли мОсновнаяПанель.ТекущаяСтраница = мСтраницыОсновнойПанели.ВыборСценария Тогда //разворачиваем выбранный сценарий
		
		Для Инд = 0 По ?(РежимЭксперта,2,1)  цикл
			Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ Инд+ "|СписокЭтапов");	 
			ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
			
			Если СценарийРаботы = Инд Тогда
				Для ИндексЭтапа = ?(РежимЭксперта И СценарийРаботы = 2,6,0) По ?(РежимЭксперта И СценарийРаботы = 2,6,4) цикл
					Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"_Начало"+ "|СписокЭтапов");	 
					ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
					Если ИндексЭтапа = 5 Тогда
						Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"_ЗавершениеЭтап"+(ИндексЭтапа+1)+"|СписокЭтапов");	 
						ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
					КонецЕсли;	
					
				КонецЦикла;	
				
				
			КонецЕсли;	
			
		КонецЦикла;	
	Иначе
		//разворачиваем сценарий и этап
		Инд = СценарийРаботы;
		Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ Инд+ "|СписокЭтапов");	 
		ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
		
		Если СценарийРаботы = Инд Тогда
			Для ИндексЭтапа = ?(РежимЭксперта И СценарийРаботы = 2,6,0) По ?(РежимЭксперта И СценарийРаботы = 2,6,4) цикл
				
				Если ИндексЭтапа = (ЭтапНастройки) Тогда
					//выводим область этапа
					Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"|СписокЭтапов");	 
					ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);		
				Иначе
					
					Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"_Начало"+ "|СписокЭтапов");	 
					ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);	
					Если ИндексЭтапа = 5 Тогда
						Область = МакетЭтаповНастройки.ПолучитьОбласть(ДополнениеИмениОбласти + "Сценарий"+ СценарийРаботы+"_Этап" +ИндексЭтапа+"_ЗавершениеЭтап"+(ИндексЭтапа+1)+"|СписокЭтапов");	 
						ЭлементыФормы.ПолеЭтаповНастройки.Вывести(Область);
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЦикла;	
			
			
		КонецЕсли;	
		
		
		
	КонецЕсли;
	
	
	МакетЭтаповНастройки.Область(ИмяОбласти).Шрифт = мШрифт;
	
КонецПроцедуры	

Процедура РежимЭксперта2ПриИзменении(Элемент)
	ОбновитьСписокЭтапов();
КонецПроцедуры

Процедура ПриЗакрытии()
	СохранитьНастройкиЭтапов();
КонецПроцедуры

Процедура НадписьКакРаботатьСАнализомСопоставленияНажатие(Элемент)
	ОткрытьПодсказкуПользователю("ПроверкаСопоставленияОбъектов");
КонецПроцедуры

Процедура СценарийРаботыПриИзменении(Элемент)
	
	Если СценарийРаботы = 0  Тогда
		ЭтапНастройки = 0;  
		ЗаполнитьДанныеПередНачаломПервогоСценария();
	ИначеЕсли СценарийРаботы = 1 Тогда
		Если ЗначениеЗаполнено(НастройкаОбмена) Тогда
			
			Если мТекущаяНастройка.СохраненнаяНастройка.Свойство("ТаблицаНастроек") Тогда
				СтрокаНастроек = мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена");
				Если  СтрокаНастроек <> Неопределено Тогда
					ЭтапНастройки  = СтрокаНастроек.НомерАктуальногоЭтапа;
				КонецЕсли;
			КонецЕсли;	
			
			
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьДоступностьСценариев();	
	ОбновитьСписокЭтапов();
КонецПроцедуры

Процедура КассыПриИзмененииФлажка(Элемент, Колонка)
	Если Элемент.ТекущаяСтрока.Использовать  Тогда 
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Использовать",Истина);
		СтруктураОтбора.Вставить("Организация",Элемент.ТекущаяСтрока.Организация);
		МассивСтрокКасс = ТаблицаВыбораКасс.НайтиСтроки(СтруктураОтбора);
		Для каждого СтрокаКасс Из МассивСтрокКасс цикл
			Если СтрокаКасс.Касса <> Элемент.ТекущаяСтрока.Касса Тогда
				СтрокаКасс.Использовать  = Ложь;
			КонецЕсли;
		КонецЦикла;	 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьДоступностьЭтаповОбмена(ИмяЭлемента = Неопределено)
	
	ПрошлиВсеЭтапы =  ИмяЭлемента <> Неопределено;

	УстановитьДоступностьКнопки(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Далее,ПрошлиВсеЭтапы);
	
КонецПроцедуры	

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ВосстановитьНастройкиЭтапов();

КонецПроцедуры

Процедура ТаблицаВыбораОрганизацийПриИзмененииФлажка(Элемент, Колонка)
	
	Если СценарийРаботы = 2 Тогда
		
		Запрос  = Новый Запрос("ВЫБРАТЬ
		|	ОрганизацииИзменения.Ссылка
		|ИЗ
		|	Справочник.Организации.Изменения КАК ОрганизацииИзменения
		|ГДЕ
		|	ОрганизацииИзменения.Узел = &Узел
		|	И ОрганизацииИзменения.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Узел",УзелИнформационнойБазы);
		Запрос.УстановитьПараметр("Ссылка",Элемент.ТекущаяСтрока.Организация);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОбщегоНазначения.СообщитьОбОшибке("По выбранной организации существуют зарегистрированные изменения," + 
			Символы.ПС + "в таком случае изменять фильтры по организациям нельзя." + 
			Символы.ПС + "Выполните обмен данными, после этого измените фильтр по организации.");
			Элемент.ТекущаяСтрока.Пометка = НЕ Элемент.ТекущаяСтрока.Пометка;
		КонецЕсли;	
		
	КонецЕсли;

КонецПроцедуры




мМассивПереходовПоСтраницам = Новый Массив();

мБазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);

мОбщаяТаблицаНастроекПолейПоиска = Неопределено;

мОбщаяТаблицаНастроекВыгрузки = Неопределено;

МакетЭтаповНастройки = ПолучитьМакет("МакетЭтаповНастройкиОбмена");

МассивПройденныхЭтапов = Новый Массив;

мТекущаяНастройка = Новый Структура;
мТекущаяНастройка.Вставить("ИмяОбъекта"             , "ОбработкаОбъект.ПомощникНастройкиОбменаДанными");
мТекущаяНастройка.Вставить("Пользователь"           , глЗначениеПеременной("глТекущийПользователь"));
мТекущаяНастройка.Вставить("НаименованиеНастройки"  , "Основная");
мТекущаяНастройка.Вставить("ИспользоватьПриОткрытии", Ложь);
мТекущаяНастройка.Вставить("СохранятьАвтоматически" , Ложь);
мТекущаяНастройка.Вставить("СохраненнаяНастройка"   , Новый Структура);

