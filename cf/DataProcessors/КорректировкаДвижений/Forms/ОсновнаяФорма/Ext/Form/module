Перем ИмяДокумента;
Перем Открытие;
Перем КоличествоВидимыхСтраниц;

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(ДокументОбъект.Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ПолучитьСписокДляОтбора(СтрокиДерева, СписокПодсистем, ЕстьГруппы = Ложь)

	Для каждого СтрокаДерева из СтрокиДерева Цикл

		Если СтрокаДерева.Флажок = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если ЕстьГруппы Тогда
			Если НЕ СтрокаДерева.Группа Тогда

				Если СтрокаДерева.Флажок = 1 ИЛИ СтрокаДерева.Флажок = 2 Тогда
					СписокПодсистем.Добавить(СтрокаДерева.ТипОбъекта,, Истина);
				КонецЕсли;

			КонецЕсли;
		Иначе
			Если СтрокаДерева.Флажок = 1 ИЛИ СтрокаДерева.Флажок = 2 Тогда
				СписокПодсистем.Добавить(СтрокаДерева.Подсистема,, Истина);
			КонецЕсли;
		КонецЕсли;

		ПолучитьСписокДляОтбора(СтрокаДерева.Строки, СписокПодсистем, ЕстьГруппы);

	КонецЦикла;

КонецПроцедуры // ПолучитьСписокДляОтбора()

// Процедура создает и настраивает табличные поля на страницах панели ОсновнаяПанель
//
Процедура НастроитьЗакладкиПанели()

	КоличествоВидимыхСтраниц = 0;
	ТекСтраница = неопределено;
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Видимость Тогда
		ТекСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРегистров из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если СтрокаТаблицыРегистров.Имя = "СоставДвижений" или регистры.найти(СтрокаТаблицыРегистров.Имя)=неопределено Тогда
			продолжить;
		КонецЕсли;
		СтрокаТаблицыРегистров.Видимость = регистры.найти(СтрокаТаблицыРегистров.Имя).Отображение;
		
		Если регистры.найти(СтрокаТаблицыРегистров.Имя).Отображение Тогда
			КоличествоВидимыхСтраниц = КоличествоВидимыхСтраниц + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоВидимыхСтраниц > 5 Тогда
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.СверхуМногострочный;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
	КонецЕсли;
	
	Если ТекСтраница = неопределено ИЛИ Не ТекСтраница.Видимость Тогда
		Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			Если Страница.Видимость Тогда
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Страница;
				ЗаполнитьСтраницу(Страница);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ЗаполнитьСтраницу(ТекСтраница);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСтраницу(Страница)
	
	//Перем Первый_элемент, Граница_первого_элемента, Второй_элемент, Граница_второго_элемента;
	
	СтрокаТаблицыРегистров = Регистры.Найти(Страница.Имя, "Имя");
	Если СтрокаТаблицыРегистров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицыРегистров.Отображение И (НЕ СтрокаТаблицыРегистров.Отрисован) Тогда
		
		// Расположим на странице командную панель
		КоманднаяПанельРегистра = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), ("КоманднаяПанель" + СтрокаТаблицыРегистров.Имя), Истина, ЭлементыФормы.ОсновнаяПанель);
		КоманднаяПанельРегистра.Верх = 6;
		КоманднаяПанельРегистра.Лево = 6;
		КоманднаяПанельРегистра.Ширина = ЭлементыФормы.ОсновнаяПанель.Ширина - 12 - 2;
		КоманднаяПанельРегистра.Высота = 24;
		
		КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,КоманднаяПанельРегистра,ГраницаЭлементаУправления.Верх);
		КоманднаяПанельРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ОсновнаяПанель,ГраницаЭлементаУправления.Право);
		
		// Расположим на странице табличное поле
		ПолеРегистра = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), СтрокаТаблицыРегистров.Имя, Истина, ЭлементыФормы.ОсновнаяПанель);
		ПолеРегистра.Данные = СтрокаТаблицыРегистров.Имя;
		ПолеРегистра.Значение.Отбор.Регистратор.Значение = ДокументОбъект.Ссылка;
		ПолеРегистра.Значение.Отбор.Регистратор.Использование = Истина;
		
		ПолеРегистра.Видимость = ложь;
		ПолеРегистра.Верх = 30;
		ПолеРегистра.Лево = 6;
		ПолеРегистра.Высота = ЭлементыФормы.ОсновнаяПанель.Высота - 30 - 12 - 20;
		ПолеРегистра.Ширина = ЭлементыФормы.ОсновнаяПанель.Ширина - 12 - 2;
		ПолеРегистра.Видимость = истина;
		ПолеРегистра.ТолькоПросмотр = Ложь;
		ПолеРегистра.ИзменятьПорядокСтрок = Истина;
		ПолеРегистра.ИзменятьСоставСтрок = Истина;
		
		ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Низ,ЭлементыФормы.ОсновнаяПанель,ГраницаЭлементаУправления.Низ);
		ПолеРегистра.УстановитьПривязку(ГраницаЭлементаУправления.Право,ЭлементыФормы.ОсновнаяПанель,ГраницаЭлементаУправления.Право);
		
		ПолеРегистра.СоздатьКолонки();
		
		Если СтрокаТаблицыРегистров.ТипРегистра = "РегистрНакопления" Тогда
			Если Метаданные.РегистрыНакопления[СтрокаТаблицыРегистров.Имя].ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки Тогда
				КолонкаВидДвижения = ПолеРегистра.Колонки.Вставить(1, "Вид движения");
				КолонкаВидДвижения.Имя = "ВидДвиженияРегистраНакопления";
				КолонкаВидДвижения.УстановитьЭлементУправления(Тип("ПолеВвода"));
				КолонкаВидДвижения.Данные = "ВидДвижения";
				КолонкаВидДвижения.ЭлементУправления.КнопкаВыбора = Истина;
				КолонкаВидДвижения.ЭлементУправления.ВыбиратьТип = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ПолеРегистра.Колонки.Регистратор.Видимость = Ложь;
		
		Если СтрокаТаблицыРегистров.ТипРегистра = "РегистрСведений" Тогда
			Если НЕ Метаданные.РегистрыСведений[СтрокаТаблицыРегистров.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				ПолеРегистра.Колонки.Период.Видимость      = Ложь;
			КонецЕсли;
		Иначе
			ПолеРегистра.Колонки.Период.Видимость      = Ложь;
		КонецЕсли;
		
		ПолеРегистра.Колонки.НомерСтроки.Видимость = Ложь;
		
		КоманднаяПанельРегистра.АвтоЗаполнение = Истина;
		КоманднаяПанельРегистра.Кнопки.Добавить("Разделитель" + СтрокаТаблицыРегистров.Имя);
		Кнопка = КоманднаяПанельРегистра.Кнопки.Добавить(СтрокаТаблицыРегистров.Имя, ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ОткрытьСправкуРегистра"));
		Кнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
		Кнопка.Картинка    = БиблиотекаКартинок.Справка;
		Кнопка.Подсказка   = "Открыть справку";
		
		СтрокаТаблицыРегистров.Отрисован = Истина;
		
		Если КоличествоВидимыхСтраниц > 5 Тогда
			//Инициализируем изменение размера табличного поля по установленным привязкам
			ПолеРегистра.Высота = ПолеРегистра.Высота - 5;
		КонецЕсли;
		
	КонецЕсли;
		
	Если СтрокаТаблицыРегистров.Отображение И (НЕ СтрокаТаблицыРегистров.Прочитан) Тогда
		ЭлементыФормы[СтрокаТаблицыРегистров.Имя].Значение.Прочитать();
		СтрокаТаблицыРегистров.Прочитан = Истина;
	КонецЕсли;
	
	Если СтрокаТаблицыРегистров.Отображение И СтрокаТаблицыРегистров.Отрисован Тогда
		ЭлементыФормы[СтрокаТаблицыРегистров.Имя].ТолькоПросмотр = НЕ РучнаяКорректировка;
		ЭлементыФормы["КоманднаяПанель" + СтрокаТаблицыРегистров.Имя].ИсточникДействий = ЭлементыФормы[СтрокаТаблицыРегистров.Имя];
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет наличие движения по регистрам для документа
Функция ОпределитьНаличиеДвижений(ДокументСсылка)
	
	ТекстЗапроса = "";	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапроса;			
	
КонецФункции

Процедура ЗаполнитьТЧ()
	ИмяДокумента = ДокументОбъект.Метаданные().Имя;
	ТаблицаДвижений = ОпределитьНаличиеДвижений(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Индексы.Добавить("Имя");
	Регистры.Очистить();
	
	Для каждого Регистр Из ДокументОбъект.Движения Цикл
		СтрокаТаблицыРегистров = Регистр.Метаданные();
		ПолноеИмя = СтрокаТаблицыРегистров.ПолноеИмя();
		ЕстьДвижения = (НЕ ТаблицаДвижений.Найти(ПолноеИмя,"Имя") = Неопределено);
		
		Строка = Регистры.Добавить();
		Строка.Имя = СтрокаТаблицыРегистров.Имя;
		
		Если (Строка.Имя = "Хозрасчетный") или (Строка.Имя = "КнигаУчетаДоходовИРасходов") или (Строка.Имя = "РасшифровкаКУДиР") Тогда
			ЭлементыФормы[Строка.Имя].Значение.Отбор.Регистратор.Значение = ДокументОбъект.Ссылка;
			ЭлементыФормы[Строка.Имя].Значение.Отбор.Регистратор.Использование = Истина;
		КонецЕсли;
		
		ПозицияТочки = Найти(ПолноеИмя, ".");
		ТипРегистра = Лев(ПолноеИмя, ПозицияТочки - 1);
		Строка.ТипРегистра = ТипРегистра;
		Строка.Синоним = СтрокаТаблицыРегистров.Синоним;
		
		Строка.ЕстьДвижения = (НЕ ТаблицаДвижений.Найти(ПолноеИмя,"Имя") = Неопределено);
		Строка.Отображение = Строка.ЕстьДвижения;
		Строка.Прочитан	= Ложь;
		
		НомерЗакладки = ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(СтрокаТаблицыРегистров.Имя);
		Если НомерЗакладки = Неопределено Тогда
			Строка.Отрисован = Ложь;
			СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы.Добавить(СтрокаТаблицыРегистров.Имя, СтрокаТаблицыРегистров.Синоним);
		Иначе
			Строка.Отрисован = Истина;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	Для Каждого СтрокаТаблицыРегистров из Регистры Цикл
		Если СтрокаТаблицыРегистров.Отображение И СтрокаТаблицыРегистров.Отрисован Тогда
			ЭлементыФормы[СтрокаТаблицыРегистров.Имя].ТолькоПросмотр = НЕ РучнаяКорректировка;
			ЭлементыФормы[СтрокаТаблицыРегистров.Имя].ИзменяетДанные = РучнаяКорректировка;
			ЭлементыФормы["КоманднаяПанель" + СтрокаТаблицыРегистров.Имя].ИсточникДействий = ЭлементыФормы[СтрокаТаблицыРегистров.Имя];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.Хозрасчетный.Колонки.СуммаВРДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.Хозрасчетный.Колонки.СуммаВРКт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.Хозрасчетный.Колонки.СуммаНУДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.Хозрасчетный.Колонки.СуммаНУКт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.Хозрасчетный.Колонки.СуммаПРДт.Видимость = ПоказыватьДанныеНУ;
	ЭлементыФормы.Хозрасчетный.Колонки.СуммаПРКт.Видимость = ПоказыватьДанныеНУ;
	
КонецПроцедуры // УстановитьВидимость()

Процедура КнопкаВыполнитьНажатие(Кнопка)
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументОбъект.Метаданные()) Тогда
		
	ИначеЕсли РучнаяКорректировка И (РольДоступна("ПравоГлавногоБухгалтера") ИЛИ РольДоступна("ПолныеПрава")) Тогда
		
		//Заполним недостающие поля записей регистров
		Для каждого СтрокаТаблицы Из Регистры Цикл
			
			Если СтрокаТаблицы.Отображение И СтрокаТаблицы.Прочитан Тогда
				ТабличнаяЧасть = ЭлементыФормы[СтрокаТаблицы.Имя].Значение;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Для каждого Запись Из ТабличнаяЧасть Цикл
				Если СтрокаТаблицы.ТипРегистра = "РегистрСведений" Тогда
					Если НЕ Метаданные.РегистрыСведений[СтрокаТаблицы.Имя].ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
						Если Запись.Период = Дата('00010101') Тогда
							Запись.Период = ДокументОбъект.Дата;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если Запись.Период = Дата('00010101') Тогда
						Запись.Период = ДокументОбъект.Дата;
					КонецЕсли;
				КонецЕсли;
				
				Запись.Активность = ДокументОбъект.Проведен или (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РегламентнаяОперация"));
				Если НЕ ЗначениеЗаполнено(Запись.Регистратор) Тогда
					Запись.Регистратор = ДокументОбъект.Ссылка;
				КонецЕсли;
				
				//Обработаем регистры, формы которых предопределены в обработке
				Если (СтрокаТаблицы.Имя = "Хозрасчетный") Тогда
					Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
						Запись.Организация = ДокументОбъект.Организация;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла;
		
		//Установим признак ручной корректировки в документе
		Для каждого СтрокаТаблицыРегистров из Регистры Цикл
			Если СтрокаТаблицыРегистров.Прочитан Тогда
				ИмяРегистра = СтрокаТаблицыРегистров.Имя;
				Если ЭлементыФормы.Найти(ИмяРегистра)<>неопределено Тогда
					ДокументОбъект.Движения[ИмяРегистра].Загрузить(ЭлементыФормы[ИмяРегистра].Значение.Выгрузить());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДокументОбъект.РучнаяКорректировка = РучнаяКорректировка;
		Попытка
			ДокументОбъект.Записать();
		Исключение
			Сообщить("При попытке записи документа возникла ошибка:" + ОписаниеОшибки(), СтатусСообщения.Важное);
			Возврат;
		КонецПопытки;
		
	ИначеЕсли ДокументОбъект.РучнаяКорректировка И (РольДоступна("ПравоГлавногоБухгалтера") ИЛИ РольДоступна("ПолныеПрава")) Тогда
		
		//Восстановим автоматические движения документа
		Если Вопрос("Ручная корректировка движений документа отменена. 
					|Восстановить движения сформированные автоматически?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ДокументОбъект.РучнаяКорректировка = РучнаяКорректировка;
		Попытка
			ОбщегоНазначения.ИзменитьАктивностьПоРегистратору(ДокументОбъект,ложь);
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РегламентнаяОперация") Тогда
				ФормаДокумента = ДокументОбъект.ПолучитьФорму("ФормаДокумента");
				ФормаДокумента.ВыполнитьОперацию();
			Иначе
				ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения));
			КонецЕсли;	
		Исключение
			Сообщить("При попытке проведения документа возникла ошибка. Проведение документа отменено.", СтатусСообщения.Важное);
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);			
		КонецПопытки;
		
	КонецЕсли;
		
	Закрыть();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Открытие = Истина;
	ТолькоСДвижениями = Истина;
	
	Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументОбъект.Метаданные()) Тогда 
	    ЭлементыФормы.ПанельФлага.Свертка = РежимСверткиЭлементаУправления.Верх;
		РучнаяКорректировка = Ложь;
		
	ИначеЕсли РольДоступна("ПравоГлавногоБухгалтера") ИЛИ РольДоступна("ПолныеПрава") Тогда
		РучнаяКорректировка = ДокументОбъект.РучнаяКорректировка;
		Если ДокументОбъект.Проведен ИЛИ РучнаяКорректировка ИЛИ ДокументОбъект.метаданные().Проведение =  Метаданные.СвойстваОбъектов.Проведение.Запретить Тогда
			ЭлементыФормы.ПанельФлага.Свертка = РежимСверткиЭлементаУправления.Нет;
		Иначе
			ЭлементыФормы.ПанельФлага.Свертка = РежимСверткиЭлементаУправления.Верх;
		КонецЕсли;		
		
	Иначе
		ЭлементыФормы.ПанельФлага.Свертка = РежимСверткиЭлементаУправления.Верх;
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = "Результат проведения документа " + ДокументОбъект;
	
	// Управление видимостью данных НУ
	ПоказыватьДанныеНУ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВПроводкахДанныеНУ");
	ЭлементыФормы.КоманднаяПанельХозрасчетный.Кнопки.ПоказатьСкрытьДанныеНУ.Пометка = ПоказыватьДанныеНУ;

	УстановитьВидимость();

	ЗаполнитьТЧ();
	
	НастроитьЗакладкиПанели();
	
	Открытие = Ложь;	
КонецПроцедуры

Процедура КоманднаяПанельНастройка(Кнопка)
	
	Форма = ПолучитьФорму("ФормаНастройки");
	Форма.ОткрытьМодально();
	НастроитьЗакладкиПанели();
	
КонецПроцедуры

Процедура РегистрыПриИзмененииФлажка(Элемент, Колонка)
	
	НастроитьЗакладкиПанели();
	
КонецПроцедуры

Процедура РучнаяКорректировкаПриИзменении(Элемент)
	
	УстановитьДоступность();
	Если НЕ РучнаяКорректировка Тогда
		Для Каждого СтрокаТаблицыРегистров из Регистры Цикл
			Если СтрокаТаблицыРегистров.Отображение И СтрокаТаблицыРегистров.Отрисован Тогда
				ЭлементыФормы[СтрокаТаблицыРегистров.Имя].Значение.Прочитать();
				СтрокаТаблицыРегистров.Прочитан = Истина;
			Иначе
				СтрокаТаблицыРегистров.Прочитан = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / Запись.Кратность;
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ 

Процедура ТабличноеПолеДвиженияБУСубконтоДтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.Хозрасчетный.ТекущиеДанные;
		Договор       = ТекущаяСтрока.СубконтоДт.Договоры;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				ТекущаяСтрока.СубконтоДт.Договоры = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСубконтоКтПриИзменении(Элемент)

	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Контрагенты") Тогда

		ТекущаяСтрока = ЭлементыФормы.Хозрасчетный.ТекущиеДанные;
		Договор       = ТекущаяСтрока.СубконтоКт.Договоры;

		Если ЗначениеЗаполнено(Договор) Тогда
			Если НЕ (Договор.Владелец = Элемент.Значение) Тогда
				ТекущаяСтрока.СубконтоКт.Договоры = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры
Процедура ТабличноеПолеДвиженияБУСчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФорму("ФормаВыбора");

	ФормаВыбора.ПараметрСчет            = ЭлементыФормы.Хозрасчетный.ТекущиеДанные.СчетКт;
	ФормаВыбора.ВладелецФормы           = Элемент;
	ФормаВыбора.ЗакрыватьПриВыборе      = Истина;
	ФормаВыбора.РежимВыбора             = Истина;
	ФормаВыбора.ПараметрКорреспонденция       = ВидДвиженияБухгалтерии.Кредит;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора       = ЭлементыФормы.Хозрасчетный.ТекущиеДанные.СчетДт;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура ТабличноеПолеДвиженияБУСчетКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФорму("ФормаВыбора");

	ФормаВыбора.ПараметрСчет       = ЭлементыФормы.Хозрасчетный.ТекущиеДанные.СчетДт;
	ФормаВыбора.ВладелецФормы      = Элемент;
	ФормаВыбора.ЗакрыватьПриВыборе = Истина;
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.ПараметрКорреспонденция       = ВидДвиженияБухгалтерии.Дебет;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора       = ЭлементыФормы.Хозрасчетный.ТекущиеДанные.СчетКт;

	ФормаВыбора.Открыть();

КонецПроцедуры
	
// Процедура - обработчик события "ПриНачалеРедактирования" элемента ТабличноеПолеДвиженияБУ 
//
Процедура ХозрасчетныйПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Строка = Элемент.ТекущиеДанные;

	Строка.Период      = ДокументОбъект.Дата;
	Строка.Организация = ДокументОбъект.Организация;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетДт
//
Процедура ТабличноеПолеДвиженияБУСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетКт
//
Процедура ТабличноеПолеДвиженияБУСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаДт
//
Процедура ТабличноеПолеДвиженияБУВалютаДтПриИзменении(Элемент)

	ТД       = ЭлементыФормы.Хозрасчетный.ТекущиеДанные;
	ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, ДокументОбъект.Дата);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаКт
//
Процедура ТабличноеПолеДвиженияБУВалютаКтПриИзменении(Элемент)

	ТД = ЭлементыФормы.Хозрасчетный.ТекущиеДанные;

	Если НЕ ТД.СчетДт.Валютный Тогда
		ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, ДокументОбъект.Дата);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" полей СубконтоДт
//
Процедура ТабличноеПолеДвиженияБУСубконтоДтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.Хозрасчетный.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДокументОбъект.Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетДт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоДт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоДт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоДт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоДт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Дт");

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ДокументОбъект.Организация, СписокПараметров);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ТабличноеПолеДвиженияБУСубконтоКтНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекущаяСтрока = ЭлементыФормы.Хозрасчетный.ТекущиеДанные;

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",         ДокументОбъект.Дата);
	СписокПараметров.Вставить("СчетУчета",    ТекущаяСтрока.СчетКт);
	СписокПараметров.Вставить("Номенклатура", ТекущаяСтрока.СубконтоКт.Номенклатура);
	СписокПараметров.Вставить("Склад",        ТекущаяСтрока.СубконтоКт.Склады);
	СписокПараметров.Вставить("Организация",  ТекущаяСтрока.Организация);
	СписокПараметров.Вставить("Контрагент",   ТекущаяСтрока.СубконтоКт.Контрагенты);
	СписокПараметров.Вставить("ДоговорКонтрагента", ТекущаяСтрока.СубконтоКт.Договоры);
	СписокПараметров.Вставить("СторонаПроводки", "Кт");
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, ДокументОбъект.Организация, СписокПараметров);

КонецПроцедуры

Процедура ОткрытьСправкуРегистра(Кнопка)
	ИмяРегистра = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтрокаРегистра = Регистры.Найти(ИмяРегистра, "Имя");
	Если НЕ СтрокаРегистра = Неопределено Тогда
		ТипРегистра = СтрокаРегистра.ТипРегистра;
		Если ТипРегистра = "РегистрБухгалтерии" Тогда
			ОткрытьСправку(Метаданные["РегистрыБухгалтерии"][ИмяРегистра]);
		ИначеЕсли ТипРегистра = "РегистрНакопления" Тогда
			ОткрытьСправку(Метаданные["РегистрыНакопления"][ИмяРегистра]);
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			ОткрытьСправку(Метаданные["РегистрыСведений"][ИмяРегистра]);
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			ОткрытьСправку(Метаданные["РегистрыРасчета"][ИмяРегистра]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ДокументОбъект = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Если НЕ ОбщегоНазначения.ЕстьРеквизитДокумента("РучнаяКорректировка", ДокументОбъект.Метаданные()) Тогда 
			РучнаяКорректировка = Ложь;
		Иначе
			РучнаяКорректировка = ДокументОбъект.РучнаяКорректировка;
		КонецЕсли;
		Если НЕ (ДокументОбъект.Проведен ИЛИ РучнаяКорректировка Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РегламентнаяОперация")) Тогда 
			Предупреждение("Документ не проведен. Для получения информации о результатах проведения документ необходимо провести.");
			Отказ = Истина;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если НЕ Открытие Тогда
		ЗаполнитьСтраницу(ЭлементыФормы.ОсновнаяПанель.Страницы[ТекущаяСтраница]);
	КонецЕсли;
КонецПроцедуры

Процедура КоманднаяПанельХозрасчетныйПоказатьСкрытьДанныеНУ(Кнопка)
	
	ПоказыватьДанныеНУ = НЕ ПоказыватьДанныеНУ;
	Кнопка.Пометка = ПоказыватьДанныеНУ;
	УстановитьВидимость();

КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ПриОткрытии();

КонецПроцедуры

