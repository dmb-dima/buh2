Перем БылаНажатаКнопкаОК;
Перем мНаВходеКодРегиона;

// Обработка тайпинга для ВИДА
Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

// Обработка тайпинга для Региона
Перем мРегионОбработкаТайпинга;
Перем мРегионТекстТайпинга;
Перем мРегионПоследнееЗначениеЭлементаТайпинга;

// Обработка тайпинга для Района
Перем мРайонОбработкаТайпинга;
Перем мРайонТекстТайпинга;
Перем мРайонПоследнееЗначениеЭлементаТайпинга;

// Обработка тайпинга для Города
Перем мГородОбработкаТайпинга;
Перем мГородТекстТайпинга;
Перем мГородПоследнееЗначениеЭлементаТайпинга;

// Обработка тайпинга для Населенного Пункта
Перем мНаселенныйПунктОбработкаТайпинга;
Перем мНаселенныйПунктТекстТайпинга;
Перем мНаселенныйПунктПоследнееЗначениеЭлементаТайпинга;

// Обработка тайпинга для Улицы
Перем мУлицаОбработкаТайпинга;
Перем мУлицаТекстТайпинга;
Перем мУлицаПоследнееЗначениеЭлементаТайпинга;

Перем мСтруктураИзмерений Экспорт;

Перем мПромежуточныйАдресЗаПределамиРФ;
Перем мПромежуточнаяСтранаЗаПределамиРФ;
Перем мПромежуточныйИндекс;

Перем мПроверятьВведенныйИндекс;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура по коду устанавливает атрибуты адресного элемента
Процедура ЗаполнитьПоКодуАдресныеЭлементы(КодАдресногоЭлемента) Экспорт

	УправлениеКонтактнойИнформацией.ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(КодАдресногоЭлемента, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7);
		
КонецПроцедуры

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставление(Запись = Неопределено)

	Если НачальноеЗначениеВыбора = Неопределено Тогда
		Представление = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(?(Запись = Неопределено, ЭтотОбъект, Запись));
		
	Иначе
		Представление = 
		СокрЛП(КодСтраны) + "," 
		+ СокрЛП(Поле1) + ","
		+ ?(мНаВходеКодРегиона, СокрЛП(КодРегиона), СокрЛП(Поле2)) + ","
		+ СокрЛП(Поле3) + ","
		+ СокрЛП(Поле4) + ","
		+ СокрЛП(Поле5) + ","
		+ СокрЛП(Поле6) + ","
		+ СокрЛП(Поле7) + ","
		+ СокрЛП(Поле8) + ","
		+ СокрЛП(Поле9) + ","
		
		+ СокрЛП(ТипДома)    + ","
		+ СокрЛП(ТипКорпуса) + ","
		+ СокрЛП(ТипКвартиры);

		ПредставлениеНаФорме = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Представление);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обслуживает событие изменения типа адреса
// Российский адрес и Адрес за пределами РФ
// 
// Параметры
//  НЕТ
//
Процедура ПриИзмененииТипаАдреса()

	Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
		
		ЭлементыФормы.РоссийскийАдрес.Доступность    = Ложь;
		ЭлементыФормы.АдресЗаПределамиРФ.Доступность = Ложь;
		
		ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.ПроизвольныйАдрес;
		
	Иначе
	
		ЭлементыФормы.РоссийскийАдрес.Доступность    = Истина;
		ЭлементыФормы.АдресЗаПределамиРФ.Доступность = Истина;
		
		Если ПроизвольныйАдрес Тогда
			ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.ПроизвольныйАдрес;
		Иначе
			ЭлементыФормы.ПанельАдреса.ТекущаяСтраница = ЭлементыФормы.ПанельАдреса.Страницы.РегламентированныйАдрес;
		КонецЕсли;
		
	КонецЕсли; 

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура вызывается при открытии формы.
//
Процедура ПриОткрытии()
	
	Если НачальноеЗначениеВыбора = Неопределено Тогда
		
		ЭлементыФормы.Объект.ТолькоПросмотр     = НЕ ДоступностьОбъекта;
		
		Если Вид = Неопределено Тогда
			Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект) И ДоступностьОбъекта Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Объект;
		ИначеЕсли НЕ ЗначениеЗаполнено(Вид) Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Вид;
		Иначе
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Регион;
		КонецЕсли; 
		
		Если Вид = Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица Тогда
			ПроизвольныйАдрес = Истина;
		Иначе
			ПроизвольныйАдрес = (ВРЕГ(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдреса(ЭтотОбъект)) <> ВРЕГ(Представление));
		КонецЕсли;
		
		ПриИзмененииТипаАдреса();
		
		Если мВозвратСтруктуры = Истина Тогда
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = Ложь;
		КонецЕсли;
		
		УстановитьПредставлениеДляСложногоАдреса();
		
	КонецЕсли;
	
	мПоследнееЗначениеЭлементаТайпинга		 			= Вид;
	мРегионПоследнееЗначениеЭлементаТайпинга			= Поле2;
	мРайонПоследнееЗначениеЭлементаТайпинга 			= Поле3;
	мГородПоследнееЗначениеЭлементаТайпинга				= Поле4;
	мНаселенныйПунктПоследнееЗначениеЭлементаТайпинга	= Поле5;
	мУлицаПоследнееЗначениеЭлементаТайпинга				= Поле6;
	
	БылаНажатаКнопкаОК = Ложь;
	
	Если НачальноеЗначениеВыбора <> Неопределено Тогда
		
		СвернутьПанель(ЭлементыФормы.ПанельОбъектаИВида);
		СвернутьПанель(ЭлементыФормы.ПанельВыбораТипаАдреса);
		
	Иначе
		
		СвернутьПанель(ЭлементыФормы.ПанельРеглОтчетности);
		
		Если Не ДоступностьОбъекта И ЗначениеЗаполнено(Вид) Тогда
			СвернутьПанель(ЭлементыФормы.ПанельОбъектаИВида);
			
			Если (ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации")) И Вид.МожноРедактироватьТолькоВДиалоге Тогда
				СвернутьПанель(ЭлементыФормы.ПанельВыбораТипаАдреса);
				СвернутьПанель(ЭлементыФормы.ПанельРамкиАдреса);
				ПроизвольныйАдрес = Ложь;
				ПриИзмененииТипаАдреса();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверитьЗаполненностьПолейТипов(Ложь);
	ЗадатьЗаголовокФормы(ЭтаФорма);
	ОбновитьКнопкуПроверкиИндекса();
	
	ОсновноеПодменю      = ЭлементыФормы.ДействияФормы.Кнопки.Подменю;
	ПодменюСкопироватьИз = ОсновноеПодменю.Кнопки.СкопироватьИз;
	
	Если АдресаДляКопирования.Количество() = 0 Тогда
		ОсновноеПодменю.Кнопки.Удалить(ПодменюСкопироватьИз);
	Иначе
		Сч = 0;
		ДействиеКопирования = Новый Действие("ДействиеКопирования");
		
		Для Каждого КлючЗначение Из АдресаДляКопирования Цикл
			Сч = Сч + 1;
			Кнопка = ПодменюСкопироватьИз.Кнопки.Добавить("СкопироватьИз" + Сч, ТипКнопкиКоманднойПанели.Действие, КлючЗначение.Представление, ДействиеКопирования);
			Кнопка.Картинка = БиблиотекаКартинок.КИАдрес;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура СвернутьПанель(Панель)
	
	Панель.Свертка  = РежимСверткиЭлементаУправления.Верх;
	ЭтаФорма.Высота = ЭтаФорма.Высота - Панель.Высота;
	
КонецПроцедуры


// Процедура вызывается при ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()
	
	ЭтаФорма.ЭлементыФормы.Вид.ТолькоПросмотр = (Объект = Неопределено);

	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Вид, мОбработкаТайпинга, мТекстТайпинга);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Регион, мРегионОбработкаТайпинга, мРегионТекстТайпинга);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Район, мРайонОбработкаТайпинга, мРайонТекстТайпинга);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Город, мГородОбработкаТайпинга, мГородТекстТайпинга);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.НаселенныйПункт, мНаселенныйПунктОбработкаТайпинга, мНаселенныйПунктТекстТайпинга);
	ПроцедурыПоискаПоСтроке.ОбновлениеОтображенияВФормеПриТайпинге(ЭтаФорма, ЭтаФорма.ЭлементыФормы.Улица, мУлицаОбработкаТайпинга, мУлицаТекстТайпинга);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

Процедура Поле1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = Справочники.КлассификаторСтранМира.ПолучитьФормуВыбора(, Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Элемент.Значение);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "РоссийскийАдрес".
//
Процедура РоссийскийАдресПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		ПриИзмененииТипаАдреса();
		мПромежуточныйИндекс = Поле1;
		УстановитьПредставлениеДляСложногоАдреса();
		Поле1 = мПромежуточнаяСтранаЗаПределамиРФ;
		мПромежуточныйАдресЗаПределамиРФ  = "";
		мПромежуточнаяСтранаЗаПределамиРФ = "";
		
	Иначе
		мПромежуточныйАдресЗаПределамиРФ  = ПредставлениеАдреса;
		мПромежуточнаяСтранаЗаПределамиРФ = Поле1;
		Поле1 = мПромежуточныйИндекс;
		мПромежуточныйИндекс = "";
		СформироватьПредставление();
		ПриИзмененииТипаАдреса();
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при очистке значения элемента формы Объект.
//
Процедура ОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Вид = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры



// Процедура - обработчик события "ПриИзменении" поля ввода "Регион".
//
Процедура РегионПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мРегионПоследнееЗначениеЭлементаТайпинга);
	ПоРегионуОпределитьКодРегиона();
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Район".
//
Процедура РайонПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мРайонПоследнееЗначениеЭлементаТайпинга);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Город".
//
Процедура ГородПриИзменении(Элемент)
	
	Если ПустаяСтрока(Поле2) И ПустаяСтрока(Поле3) И Не ПустаяСтрока(Поле4) Тогда
		масГородов = Новый Массив;
		масГородов.Добавить("Москва");
		масГородов.Добавить("Санкт-Петербург");
		
		Стр = СокрЛП(Поле4);
		Поз = Найти(Стр, " ");
		Если Поз <> 0 Тогда
			Стр = Лев(Стр, Поз-1);
		КонецЕсли;
		
		Для Каждого ЭлементГород Из масГородов Цикл
			Если ВРег(ЭлементГород) = ВРег(Стр) Тогда
				Предупреждение("Города Москва и Санкт-Петербург являются регионами!" + Символы.ПС + "Введенное значение будет перенесено в поле регион.");
				Поле2 = Стр;
				Поле4 = "";
				ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Регион;
				
				РегионОкончаниеВводаТекста(ЭлементыФормы.Регион, Поле2, Поле2, Истина);
				РегионПриИзменении(ЭлементыФормы.Регион);
				
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мГородПоследнееЗначениеЭлементаТайпинга);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мНаселенныйПунктПоследнееЗначениеЭлементаТайпинга);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Улица".
//
Процедура УлицаПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементПриИзменении(Элемент, Поле1, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, мУлицаПоследнееЗначениеЭлементаТайпинга);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дом".
//
Процедура ДомПриИзменении(Элемент)

	Если ПустаяСтрока(Поле1) Тогда
		Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КонецЕсли;
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Корпус".
//
Процедура КорпусПриИзменении(Элемент)

	Если ПустаяСтрока(Поле1) Тогда
		Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КонецЕсли;
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Квартира".
//
Процедура КвартираПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Индекс".
//
Процедура ИндексПриИзменении(Элемент)

	// Если заполнен индекс, но не заполнен регион, попробуем по индексу восстановить данные
	Если Не ПустаяСтрока(Поле1) И ПустаяСтрока(Поле2) И ПустаяСтрока(Поле3) И ПустаяСтрока(Поле4) И ПустаяСтрока(Поле5) И ПустаяСтрока(Поле6) Тогда
		ПоИндексуВосстановитьДанные();
		ПоРегионуОпределитьКодРегиона();
	КонецЕсли;

	СформироватьПредставление();

КонецПроцедуры




// Процедура перехватывает момент начала выбора вида контактной информации.
//
// Параметры
//  Элемент - элемент формы, выбор значения которого должен произойти
//  СтандартнаяОбработка - булево, флаг стандартной обработки выбора.
Процедура ВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект = Неопределено ИЛИ Объект.Ссылка.Пустая() Тогда
		
		Сообщить("Выберите объект.");
		Возврат;
		
	КонецЕсли;

	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект));
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Регион".
//
Процедура РегионНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле2);
	ФормаВыбора.ОтобратьТолькоРегионы();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Район".
//
Процедура РайонНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле3);
	ФормаВыбора.УстановитьРодителя(Поле2, "", "", "");
	ФормаВыбора.ОтобратьТолькоРайоны();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Город".
//
Процедура ГородНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле4);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, "", "");
	ФормаВыбора.ОтобратьТолькоГорода();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле5);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, "");
	ФормаВыбора.ОтобратьТолькоНаселенныеПункты();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Улица".
//
Процедура УлицаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле6);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, Поле5);
	ФормаВыбора.ОтобратьТолькоУлицы();
	ФормаВыбора.Открыть();

КонецПроцедуры



// Процедура заполняет поля родителя и проверяет потомков при кстановке адреса
Процедура ОбновитьАдресныеЭлементы(АдреснаяЗапись)
	
	УправлениеКонтактнойИнформацией.АдресныйЭлементЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, АдреснаяЗапись);
	// Для всех элементов ниже по иерархии надо определить подходят ли он под ограничения
	УправлениеКонтактнойИнформацией.АдресныйЭлементПроверитьПравильностьЗаполненияПотомков(Поле2, Поле3, Поле4, Поле5, Поле6, АдреснаяЗапись);
	// последние значения тайпингов запоминаем
	УправлениеКонтактнойИнформацией.УстановитьПоследниеЗначенияТайпинговДляАдресныхЭлементов(Поле2, Поле3, Поле4, Поле5, Поле6,
	 	мРегионПоследнееЗначениеЭлементаТайпинга, мРайонПоследнееЗначениеЭлементаТайпинга, мГородПоследнееЗначениеЭлементаТайпинга,
	 	мНаселенныйПунктПоследнееЗначениеЭлементаТайпинга, мУлицаПоследнееЗначениеЭлементаТайпинга);
		
	// получаем индекс
	Если ПустаяСтрока(Поле1) Тогда
		Поле1 = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КонецЕсли;
	СформироватьПредставление();
	
КонецПроцедуры

//Процедура - универсальный обработчик для события обработка выбора адресных элементов
Процедура УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдреснаяЗапись = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, АдреснаяЗапись);
	ОбновитьАдресныеЭлементы(АдреснаяЗапись);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Регион".
//
Процедура РегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	ПоРегионуОпределитьКодРегиона();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Район".
//
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Город".
//
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Улица".
//
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	УниверсальноОбработатьВыбор(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры



// Процедура перехватывает момент начала выбора Объекта.
//
// Параметры
//  Элемент - элемент формы, выбор значения которого должен произойти
//  СтандартнаяОбработка - булево, флаг стандартной обработки выбора.
Процедура ОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = УправлениеКонтактнойИнформацией.НачалоВыбораОбъектаКИ(ЭтаФорма, Элемент, глЗначениеПеременной("глТекущийПользователь"));

КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Вид.
//
Процедура ВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Вид.
//
Процедура ВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(Объект)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга);
	
КонецПроцедуры

// Процедура обработчик события ПриИзменении элемента формы Вид.
//
Процедура ВидПриИзменении(Элемент)
	
	мПоследнееЗначениеЭлементаТайпинга = Элемент.Значение;
	ПриИзмененииТипаАдреса();
	
КонецПроцедуры



// Процедура автоподбора текста для различных территориальных делений
Процедура УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента)
												 
	СтруктураЭлемента = Неопределено;											 
	УправлениеКонтактнойИнформацией.АдресныйЭлементАвтоподборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
												 ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
												 СтруктураЭлемента);

	Если ЗначениеЗаполнено(ТекстАвтоПодбора) Тогда											  
													  
		ТекстАвтоПодбора = ТекстАвтоПодбора + " " + СокрЛП(СтруктураЭлемента.Сокращение); 
		// не надо предков и потомков обновлять - пользователь может еще не определился
		//ОбновитьАдресныеЭлементы(СтруктураЭлемента);

	КонецЕсли;
	
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
		
КонецПроцедуры

//Универсальня процедура обработки окончания ввода текста для территориального подразделения
Процедура УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга)
	СтруктураЭлемента = Неопределено;
	УправлениеКонтактнойИнформацией.АдресныйЭлементОкончаниеВводаТекстаАдреса(ЭтаФорма, Элемент, Текст, Значение, СтандартнаяОбработка,
													ПолеРегиона, ПолеРайона, ПолеГорода, ПолеНаселенногоПункта, УровеньЭлемента,
													ОбработкаТайпинга, ТекстТайпинга, ПоследнееЗначениеЭлементаТайпинга,
													СтруктураЭлемента);

	Если СтруктураЭлемента.Количество() > 0 Тогда											  
		Значение = Значение + " " + СокрЛП(СтруктураЭлемента.Сокращение);
		ОбновитьАдресныеЭлементы(СтруктураЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Регион
Процедура РегионАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 "", "", "", "", 1);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Регион
Процедура РегионОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											"", "", "", "", 1,
											мРегионОбработкаТайпинга, мРегионТекстТайпинга, мРегионПоследнееЗначениеЭлементаТайпинга);
		
КонецПроцедуры

// Процедура обработчик события АвтоПодборТекста элемента формы Район
Процедура РайонАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, "", "", "", 2);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Район
Процедура РайонОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, "", "", "", 2,
											мРайонОбработкаТайпинга, мРайонТекстТайпинга, мРайонПоследнееЗначениеЭлементаТайпинга);
	
КонецПроцедуры
	
// Процедура обработчик события АвтоПодборТекста элемента формы Город
Процедура ГородАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, Поле3, "", "", 3);

КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы Город
Процедура ГородОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, "", "", 3,
											мГородОбработкаТайпинга, мГородТекстТайпинга, мГородПоследнееЗначениеЭлементаТайпинга);

КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, "", 4);									  
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура НаселенныйПунктОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, "", 4,
											мНаселенныйПунктОбработкаТайпинга, мНаселенныйПунктТекстТайпинга, мНаселенныйПунктПоследнееЗначениеЭлементаТайпинга);
											
КонецПроцедуры

// Процедура обработчик события АвтоподборТекста элемента формы НаселенныйПункт
Процедура УлицаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	УниверсальныйАвтоподборТекстаДляАдреса(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка,
											 Поле2, Поле3, Поле4, Поле5, 5);
											 
КонецПроцедуры

// Процедура обработчик события ОкончаниеВводаТекста элемента формы НаселенныйПункт
Процедура УлицаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	УниверсальныйОкончаниеВводаТекстаАдреса(Элемент, Текст, Значение, СтандартнаяОбработка,
											Поле2, Поле3, Поле4, Поле5, 5,
											мУлицаОбработкаТайпинга, мУлицаТекстТайпинга, мУлицаПоследнееЗначениеЭлементаТайпинга);
											
КонецПроцедуры


//Процедура устанавливает представление для сложного адреса
Процедура УстановитьПредставлениеДляСложногоАдреса()
	
	Если НЕ ПустаяСтрока(мПромежуточныйАдресЗаПределамиРФ) Тогда
		ТекущееПредставлениеАдреса = мПромежуточныйАдресЗаПределамиРФ;
	Иначе
		ТекущееПредставлениеАдреса = СокрЛП(ЭтотОбъект.Представление);
	КонецЕсли;
	
	
	Если ПроизвольныйАдрес Тогда
		
		ТекущееПредставлениеАдреса = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаЗаПределамиРФБезСтраны(ЭтотОбъект.Поле1, ТекущееПредставлениеАдреса);
	
	КонецЕсли;
	
	ПредставлениеАдреса = ТекущееПредставлениеАдреса;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

// Процедура - обработчик события "ЗагрузитьАК" командной панели "ДействияФормы".
//
Процедура ДействияФормыЗагрузитьАК(Кнопка)

	РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗагрузкиАдресногоКлассификатора").Открыть();

КонецПроцедуры

Процедура ОсновныеДействияФормыЗаписать(Кнопка)
	
	Если Не ПроверитьПравильностьВведенногоИндекса() Тогда
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)
	
	Если Не ПроверитьПравильностьВведенногоИндекса() Тогда
		Возврат;
	КонецЕсли;
	
	БылаНажатаКнопкаОК = Истина;
	
	// Если Адрес за пределами РФ, то надо к представлению страну добавить
	Если ПроизвольныйАдрес Тогда
		
		ЭтотОбъект.Представление = УправлениеКонтактнойИнформацией.СформироватьПредставлениеАдресаЗаПределамиРФ(ЭтотОбъект.Поле1, ЭтаФорма.ПредставлениеАдреса);
		// Для произвольного адреса поля со 2 по 10 - незначимые
		Для а = 2 По 10 Цикл
			ЭтотОбъект["Поле" + Строка(а)] = "";			
		КонецЦикла;
				
	КонецЕсли;
	
	
	Если мВозвратСтруктуры = Истина Тогда
		СтруктураАдреса = Новый Структура;
		СтруктураАдреса.Вставить("Представление",  Представление);		
		Для а = 1 По 10 Цикл
			СтруктураАдреса.Вставить("Поле" + Строка(а), ЭтотОбъект["Поле" + Строка(а)]);
		КонецЦикла;
		Модифицированность = Ложь;
		ОповеститьОВыборе(СтруктураАдреса);
	Иначе	
		Если Записать() Тогда
			Модифицированность = Ложь;
			Закрыть(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранятьДанные = БылаНажатаКнопкаОК;
	
	Если Модифицированность Тогда
		СохранятьДанные = Истина;
		Отказ = ЗакрыватьФормуРедактирования(НачальноеЗначениеВыбора = Неопределено, СохранятьДанные);
	КонецЕсли; 
	
	Если НЕ Отказ Тогда
		Если НачальноеЗначениеВыбора = Неопределено Тогда
			Закрыть(БылаНажатаКнопкаОК);
		Иначе
			Закрыть(СохранятьДанные);
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

// Процедура возвращает название региона по его коду.
Функция НазваниеРегионаПоКоду(КодРег)
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(КодРег) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка 
		КодРегЧисло = Число(КодРег);
	Исключение
		Возврат "";
	КонецПопытки;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АдресныйКлассификатор.КодРегионаВКоде,
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Код
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |
	               |ГДЕ
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	               |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";
	
	Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		Возврат УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(Выборка.Код);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Процедура разбирает адрес в формате "9 или 12 запятых" на составляющие.
Процедура РазобратьПредставление()
	
	Параметры = Новый СписокЗначений;
	
	ПредыдущаяЗапятая = 0;
	Для Сч = 1 По СтрДлина(Представление) Цикл
		ТекСимв = Сред(Представление, Сч, 1);
		Если ТекСимв = "," Тогда
			Параметры.Добавить(Сред(Представление, ПредыдущаяЗапятая + 1, Сч - (ПредыдущаяЗапятая + 1)));
			ПредыдущаяЗапятая = Сч;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредыдущаяЗапятая <> СтрДлина(Представление) Тогда
		Параметры.Добавить(Сред(Представление, ПредыдущаяЗапятая + 1, СтрДлина(Представление) - ПредыдущаяЗапятая));
	КонецЕсли;
	
	Для Сч = Параметры.Количество() + 1 По 13 Цикл
		
		Параметры.Добавить("");
		
	КонецЦикла;
	
	КодСтраны = Параметры.Получить(0);
	Поле1 = Параметры.Получить(1);
	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Параметры.Получить(2).Значение) ИЛИ ПустаяСтрока(Параметры.Получить(2)) Тогда
		мНаВходеКодРегиона = Ложь;
		Поле2 = Параметры.Получить(2);
		КодРегиона = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	Иначе
		мНаВходеКодРегиона = Истина;
		КодРегиона = Параметры.Получить(2);
		Поле2 = НазваниеРегионаПоКоду(КодРегиона);
	КонецЕсли;
	Поле3 = Параметры.Получить(3);
	Поле4 = Параметры.Получить(4);
	Поле5 = Параметры.Получить(5);
	Поле6 = Параметры.Получить(6);
	Поле7 = Параметры.Получить(7);
	Поле8 = Параметры.Получить(8);
	Поле9 = Параметры.Получить(9);
	
	Для каждого ЭлементПеречисления Из Перечисления.ТипыДомов Цикл
		Если Строка(ЭлементПеречисления) = СокрЛП(Параметры.Получить(10)) Тогда
		    ТипДома = ЭлементПеречисления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементПеречисления Из Перечисления.ТипыКорпусов Цикл
		Если Строка(ЭлементПеречисления) = СокрЛП(Параметры.Получить(11)) Тогда
		    ТипКорпуса = ЭлементПеречисления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для каждого ЭлементПеречисления Из Перечисления.ТипыКвартир Цикл
		Если Строка(ЭлементПеречисления) = СокрЛП(Параметры.Получить(12)) Тогда
		    ТипКвартиры = ЭлементПеречисления;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьЗаполненностьПолейТипов(Ложь);
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НачальноеЗначениеВыбора <> Неопределено Тогда
		
		НачальноеЗначениеВыбора.Свойство("Индекс", Поле1);
		НачальноеЗначениеВыбора.Свойство("Регион", КодРегиона);
		НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", Поле2);
		Если ПустаяСтрока(Поле2) Тогда
			Поле2 = НазваниеРегионаПоКоду(КодРегиона);
		КонецЕсли;
		НачальноеЗначениеВыбора.Свойство("Район", Поле3);
		НачальноеЗначениеВыбора.Свойство("Город", Поле4);
		НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", Поле5);
		НачальноеЗначениеВыбора.Свойство("Улица", Поле6);
		НачальноеЗначениеВыбора.Свойство("Дом", Поле7);
		НачальноеЗначениеВыбора.Свойство("Корпус", Поле8);
		НачальноеЗначениеВыбора.Свойство("Квартира", Поле9);
		НачальноеЗначениеВыбора.Свойство("Представление", Представление);
		
		
		КодСтраны = "643";
		мНаВходеКодРегиона = Ложь;
		
		Если РегламентированнаяОтчетность.ПустоеЗначение(Поле1) 
			И РегламентированнаяОтчетность.ПустоеЗначение(КодРегиона) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле2) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле3) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле4) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле5) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле6) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле7) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле8) 
			И РегламентированнаяОтчетность.ПустоеЗначение(Поле9) 
			И НЕ ПустаяСтрока(Представление) Тогда
			
			РазобратьПредставление();
			
		КонецЕсли;
		
		СформироватьПредставление();
		
		мВозвратСтруктуры = Истина;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать);
		
	КонецЕсли;
	
	
	БылаНажатаКнопкаОК = Ложь;
	
	ЭлементыФормы.ПолеТипДома.СписокВыбора     = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ТипыДомов");
	ЭлементыФормы.ПолеТипКорпуса.СписокВыбора  = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ТипыКорпусов");
	ЭлементыФормы.ПолеТипКвартиры.СписокВыбора = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ТипыКвартир");
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ТипЗнч(НачальноеЗначениеВыбора) <> Тип("Структура") Тогда
		НачальноеЗначениеВыбора = Новый Структура;
	КонецЕсли;
	
	НачальноеЗначениеВыбора.Вставить("Индекс", СокрЛП(Поле1));
	НачальноеЗначениеВыбора.Вставить("Регион", ?(СтрДлина(КодРегиона) = 1, "0" + КодРегиона, КодРегиона));
	НачальноеЗначениеВыбора.Вставить("НазваниеРегиона", Поле2);
	НачальноеЗначениеВыбора.Вставить("Район", Поле3);
	НачальноеЗначениеВыбора.Вставить("Город", Поле4);
	НачальноеЗначениеВыбора.Вставить("НаселенныйПункт", Поле5);
	НачальноеЗначениеВыбора.Вставить("Улица", Поле6);
	НачальноеЗначениеВыбора.Вставить("Дом", Поле7);
	НачальноеЗначениеВыбора.Вставить("Корпус", Поле8);
	НачальноеЗначениеВыбора.Вставить("Квартира", Поле9);
	НачальноеЗначениеВыбора.Вставить("Представление", Представление);
	НачальноеЗначениеВыбора.Вставить("КодСтраны", КодСтраны);

КонецПроцедуры

// Для регламентированной отчетности - после выбора региона установить код региона
Процедура ПоРегионуОпределитьКодРегиона()

	Если НачальноеЗначениеВыбора = Неопределено ИЛИ ПустаяСтрока(Поле2) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйКод = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	Если Не ПустаяСтрока(НайденныйКод) Тогда
		КодРегиона = НайденныйКод;
	КонецЕсли;

КонецПроцедуры

// После ввода кода региона подставить название региона
Процедура КодРегионаПриИзменении(Элемент)
	
	Если ПустаяСтрока(Поле2) И Не ПустаяСтрока(КодРегиона) Тогда
		Поле2 = НазваниеРегионаПоКоду(КодРегиона);
		СформироватьПредставление();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоИндексуВосстановитьДанные()

	НайденныйРегион = "";
	НайденныйРайон  = "";
	НайтиЗаписиВКИПоИндексу(Поле1, НайденныйРегион, НайденныйРайон);
		
	Найдено = НайденныеЗаписиПоИндексу.Количество();
	Если Найдено = 0 Тогда
		Возврат;
	ИначеЕсли Найдено = 1 Тогда
		НайденныйКод = НайденныеЗаписиПоИндексу[0].Код;
	Иначе
		// откроем форму выбора
		Форма = ПолучитьФорму("ФормаПоискаПоИндексу");
		Форма.НайденныйРегион = НайденныйРегион;
		Форма.НайденныйРайон  = НайденныйРайон;
		НайденныйКод = Форма.ОткрытьМодально();
		
		Если НайденныйКод = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПолучитьПоКодуАдресногоЭлементаЕгоКомпоненты(НайденныйКод, Поле2, Поле3, Поле4, Поле5, Поле6, "");
	
	Если Не ПустаяСтрока(Поле6) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Дом;
	ИначеЕсли Не ПустаяСтрока(Поле5) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Улица;
	ИначеЕсли Не ПустаяСтрока(Поле4) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.НаселенныйПункт;
	ИначеЕсли Не ПустаяСтрока(Поле3) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Город;
	ИначеЕсли Не ПустаяСтрока(Поле2) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Район;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТипДомаПриИзменении(Элемент)
	ПроверитьЗаполненностьПолейТипов(Истина);
КонецПроцедуры

Процедура ПолеТипКорпусаПриИзменении(Элемент)
	ПроверитьЗаполненностьПолейТипов(Истина);
КонецПроцедуры

Процедура ПолеТипКвартирыПриИзменении(Элемент)
	ПроверитьЗаполненностьПолейТипов(Истина);
КонецПроцедуры

Процедура ПроверитьЗаполненностьПолейТипов(ОбновлятьПредставление)

	Если ТипДома.Пустая() Тогда
		ТипДома = Перечисления.ТипыДомов.Дом;
	КонецЕсли;

	Если ТипКорпуса.Пустая() Тогда
		ТипКорпуса = Перечисления.ТипыКорпусов.Корпус;
	КонецЕсли;

	Если ТипКвартиры.Пустая() Тогда
		ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
	КонецЕсли;
	
	Если ОбновлятьПредставление Тогда
		СформироватьПредставление();
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыПроверятьИндекс(Кнопка)
	
	мПроверятьВведенныйИндекс = Не мПроверятьВведенныйИндекс;
	СохранитьЗначение("ВФормеВводаАдресаПроверятьИндекс", мПроверятьВведенныйИндекс);
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПроверятьИндекс.Пометка = мПроверятьВведенныйИндекс;
	
КонецПроцедуры

// <Описание функции>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   – <описание возвращаемого значения>
//
Функция ПроверитьПравильностьВведенногоИндекса()

	Если Не мПроверятьВведенныйИндекс Тогда
		// не нужно проверять индекс
		Возврат Истина;
		
	ИначеЕсли ПустаяСтрока(Поле1) Тогда
		// индекс не был введен
		Возврат Истина;
		
	ИначеЕсли (НачальноеЗначениеВыбора = Неопределено) И ПроизвольныйАдрес Тогда
		// вводится произвольный адрес
		Возврат Истина;
		
	КонецЕсли;
	
	ПравильныйИндекс = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	Если ПустаяСтрока(ПравильныйИндекс) Тогда
		// правильный индекс определить не удалось
		Возврат Истина;
		
	ИначеЕсли ПравильныйИндекс = Поле1 Тогда
		// введен правильный индекс
		Возврат Истина;
		
	КонецЕсли;
	
	Форма = ПолучитьФорму("ФормаВопросаНаЗаменуИндекса");
	Форма.ВведенныйИндекс = Поле1;
	Форма.ПравильныйИндекс = ПравильныйИндекс;
	Результат = Форма.ОткрытьМодально();
	
	ОбновитьКнопкуПроверкиИндекса();
	
	Если Результат = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли Результат Тогда
		Поле1 = ПравильныйИндекс;
		СформироватьПредставление();
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ПроверитьПравильностьВведенногоИндекса()

Процедура ОбновитьКнопкуПроверкиИндекса()

	мПроверятьВведенныйИндекс = ВосстановитьЗначение("ВФормеВводаАдресаПроверятьИндекс");
	Если мПроверятьВведенныйИндекс = Неопределено Тогда
		мПроверятьВведенныйИндекс = Истина;
	КонецЕсли;
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПроверятьИндекс.Пометка = мПроверятьВведенныйИндекс;


КонецПроцедуры

Процедура СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст)

	Запись = Новый Структура;
	Запись.Вставить("Поле1",       ?(Элемент = ЭлементыФормы.Индекс,          Текст, ЭлементыФормы.Индекс.Значение));
	Запись.Вставить("Поле2",       ?(Элемент = ЭлементыФормы.Регион,          Текст, ЭлементыФормы.Регион.Значение));
	Запись.Вставить("Поле3",       ?(Элемент = ЭлементыФормы.Район,           Текст, ЭлементыФормы.Район.Значение));
	Запись.Вставить("Поле4",       ?(Элемент = ЭлементыФормы.Город,           Текст, ЭлементыФормы.Город.Значение));
	Запись.Вставить("Поле5",       ?(Элемент = ЭлементыФормы.НаселенныйПункт, Текст, ЭлементыФормы.НаселенныйПункт.Значение));
	Запись.Вставить("Поле6",       ?(Элемент = ЭлементыФормы.Улица,           Текст, ЭлементыФормы.Улица.Значение));
	Запись.Вставить("Поле7",       ?(Элемент = ЭлементыФормы.Дом,             Текст, ЭлементыФормы.Дом.Значение));
	Запись.Вставить("Поле8",       ?(Элемент = ЭлементыФормы.Корпус,          Текст, ЭлементыФормы.Корпус.Значение));
	Запись.Вставить("Поле9",       ?(Элемент = ЭлементыФормы.Квартира,        Текст, ЭлементыФормы.Квартира.Значение));
	Запись.Вставить("ТипДома",     ?(Элемент = ЭлементыФормы.ПолеТипДома,     Текст, ЭлементыФормы.ПолеТипДома.Значение));
	Запись.Вставить("ТипКорпуса",  ?(Элемент = ЭлементыФормы.ПолеТипКорпуса,  Текст, ЭлементыФормы.ПолеТипКорпуса.Значение));
	Запись.Вставить("ТипКвартиры", ?(Элемент = ЭлементыФормы.ПолеТипКвартиры, Текст, ЭлементыФормы.ПолеТипКвартиры.Значение));
	
	СформироватьПредставление(Запись);

КонецПроцедуры

Процедура ДомАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
КонецПроцедуры

Процедура КорпусАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
КонецПроцедуры

Процедура КвартираАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
КонецПроцедуры

Процедура ИндексАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	СформироватьПредставлениеВОбработчикеАвтоПодбора(Элемент, Текст);
КонецПроцедуры

Процедура ДействияФормыОчистить(Кнопка)
	
	Поле1  = "";
	Поле2  = "";
	Поле3  = "";
	Поле4  = "";
	Поле5  = "";
	Поле6  = "";
	Поле7  = "";
	Поле8  = "";
	Поле9  = "";
	Поле10 = "";
	Комментарий = "";
	ТипДома     = Перечисления.ТипыДомов.Дом;
	ТипКорпуса  = Перечисления.ТипыКорпусов.Корпус;
	ТипКвартиры = Перечисления.ТипыКвартир.Квартира;
	
	СформироватьПредставление();
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДействиеКопирования(Элемент)

	Представление = Элемент.Текст;
	Для Каждого Вариант Из АдресаДляКопирования Цикл
		Если Вариант.Представление <> Представление Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Вариант.Значение;
		УправлениеКонтактнойИнформацией.СкопироватьДанныеКИИзЗаписиВДругую(Запись, ОбработкаОбъект);
		
		ЭтаФорма.Модифицированность = Истина;
		Прервать;
	КонецЦикла;

КонецПроцедуры









ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиТайпинга(мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиТайпинга(мРегионОбработкаТайпинга, мРегионТекстТайпинга, мРегионПоследнееЗначениеЭлементаТайпинга);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиТайпинга(мРайонОбработкаТайпинга, мРайонТекстТайпинга, мРайонПоследнееЗначениеЭлементаТайпинга);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиТайпинга(мГородОбработкаТайпинга, мГородТекстТайпинга, мГородПоследнееЗначениеЭлементаТайпинга);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиТайпинга(мНаселенныйПунктОбработкаТайпинга, мНаселенныйПунктТекстТайпинга, мНаселенныйПунктПоследнееЗначениеЭлементаТайпинга);
ПроцедурыПоискаПоСтроке.ИнициализироватьПараметрыОбработкиТайпинга(мУлицаОбработкаТайпинга, мУлицаТекстТайпинга, мУлицаПоследнееЗначениеЭлементаТайпинга);


мСтруктураИзмерений = Неопределено;

мПромежуточныйАдресЗаПределамиРФ  = "";
мПромежуточнаяСтранаЗаПределамиРФ = "";
мПромежуточныйИндекс              = "";
