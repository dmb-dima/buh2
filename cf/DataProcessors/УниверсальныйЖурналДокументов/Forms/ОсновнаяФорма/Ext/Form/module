Перем ПостроительОтчета;

// Хранит имя документа, для которого заполнены пункты меню "Ввод на основании"
// и "Перейти". Позволяет не выполнять их перезаполнение для одного и того же документа.
Перем мМенюДляДокумента;

// Сожержит флаг наличия в конфигурации универсального отчета "ОтчетПоДвижению"
Перем мЕстьОтчетПоДвижению;

// Сожержит флаг наличия в конфигурации общей формы "ФормаСтруктурыПодчиненности"
Перем мЕстьФормаСтруктурыПодчиненности;

// Хранит таблицу, предназначенную для быстрого получения списка документов,
// которые вводятся на основании искомого
Перем мВводНаОсновании;

Перем мТекущаяНастройка;

Процедура УстановитьЗаголовокОкна()
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.Свойство("НаименованиеНастройки") И мТекущаяНастройка.НаименованиеНастройки <> Неопределено Тогда
		
		Заголовок = СокрЛП(ЭтотОбъект.Метаданные().Синоним) + ". Настройка: " + СокрЛП(мТекущаяНастройка.НаименованиеНастройки);
		
	Иначе
		
		Заголовок = СокрЛП(ЭтотОбъект.Метаданные().Синоним);
		
	КонецЕсли;
	
	ДатаНачала    = НастройкаПериодаЖурнала.ПолучитьДатуНачала();
	ДатаОкончания = НастройкаПериодаЖурнала.ДатаОкончания;
	
	Если ЗначениеЗаполнено(ДатаНачала) или ЗначениеЗаполнено(ДатаОкончания) Тогда
		Заголовок = Заголовок + ": " + Формат(ДатаНачала, "ДФ=dd.MM.yyyy; ДП=...") + " - " + Формат(ДатаОкончания, "ДФ=dd.MM.yyyy; ДП=...");
	КонецЕсли;
	
КонецПроцедуры // () 

Функция ВосстановитьНастройки()
	
	Перем СохраненнаяНастройка;
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	
	Результат = УниверсальныеМеханизмы.ВосстановлениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
		ВосстановитьНастройкиИзСтруктуры(Результат.СохраненнаяНастройка);
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	УстановитьЗаголовокОкна();
	
КонецФункции // ВосстановитьНастройки()

Процедура СохранитьНастройки()
	
	Перем СохраненнаяНастройка;
	
	СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
	СтруктураНастройки.Вставить("НаименованиеНастройки", ?(мТекущаяНастройка = Неопределено, Неопределено, мТекущаяНастройка.НаименованиеНастройки));
	СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
	СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", Ложь);
	СтруктураНастройки.Вставить("СохранятьАвтоматически", Ложь);
	
	Результат = УниверсальныеМеханизмы.СохранениеНастроек(СтруктураНастройки);
	
	Если Результат <> Неопределено Тогда
			
		мТекущаяНастройка = Результат;
			
	Иначе
		
		мТекущаяНастройка = СтруктураНастройки;
		
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройки()

Процедура СформироватьСтруктуруДляСохраненияНастроек(СтруктураСНастройками)
	
	Если ТипЗнч(СтруктураСНастройками) <> Тип("Структура") Тогда
		
		СтруктураСНастройками = Новый Структура;
		
	КонецЕсли;
	
	СохраненноеЗначениеНастройкиПостроителя = ЗначениеВСтрокуВнутр(ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Ложь, Ложь, Ложь));
	
	СтруктураСНастройками.Вставить("СохраненноеЗначениеНастройкиПостроителя", СохраненноеЗначениеНастройкиПостроителя);
	СтруктураСНастройками.Вставить("НастройкаКолонокТабличногоПоля", мПолучитьНастройкуКолонокСписка(ЭлементыФормы.СписокДокументов.Колонки));
	СтруктураСНастройками.Вставить("НастройкаПериодаЖурнала", НастройкаПериодаЖурнала);
	СтруктураСНастройками.Вставить("ДоступныеДокументы", ДоступныеДокументы.Выгрузить());
	СтруктураСНастройками.Вставить("ВыводимыеГрафы", ВыводимыеГрафы.Выгрузить());
	
КонецПроцедуры // СформироватьСтруктуруДляСохраненияНастроек()

Функция ВосстановитьНастройкиИзСтруктуры(СтруктураСНастройками)

	Перем СохраненныеКонечныеПланы, СохраненныеСтратегииРасчета, СохраненныеНастройкиПостроителя;
	
	Если ТипЗнч(СтруктураСНастройками) = Тип("Структура") Тогда
		
		Для каждого Настройка из СтруктураСНастройками Цикл
			
			Если Настройка.Ключ = "СохраненноеЗначениеНастройкиПостроителя" Тогда
				
				СохраненноеЗначениеНастройкиПостроителя = Настройка.Значение;
				
			ИначеЕсли Настройка.Ключ = "НастройкаКолонокТабличногоПоля" Тогда
				
				НастройкаКолонокТабличногоПоля = Настройка.Значение;
				
			ИначеЕсли Настройка.Ключ = "НастройкаПериодаЖурнала" Тогда
				
				НастройкаПериодаЖурнала = Настройка.Значение;
				
			ИначеЕсли Настройка.Ключ = "ДоступныеДокументы" Тогда
				
				Если ТипЗНЧ(Настройка.Значение) = Тип("ТаблицаЗначений") Тогда
					
					ДоступныеДокументы.Загрузить(Настройка.Значение);
					
				КонецЕсли;
				
			ИначеЕсли Настройка.Ключ = "ВыводимыеГрафы" Тогда
				
				Если ТипЗНЧ(Настройка.Значение) = Тип("ТаблицаЗначений") Тогда
					
					ВыводимыеГрафы.Загрузить(Настройка.Значение);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИнициализироватьНастройкуПериодаЖурнала();
	
	НастройкиПостроителя = ?(ПустаяСтрока(СохраненноеЗначениеНастройкиПостроителя), Неопределено, ЗначениеИзСтрокиВнутр(СохраненноеЗначениеНастройкиПостроителя));
	ИнициализироватьПостроитель(НастройкиПостроителя);
	ОбновитьТаблицуДокументов();
	НастроитьДополнительныеКолонки();
	НадписьОтбор = мОписаниеОтбора(ПостроительОтчета.Отбор);
	
	мПрименитьНастройкуКолонокСписка(НастройкаКолонокТабличногоПоля, ЭлементыФормы.СписокДокументов.Колонки);
	
	Возврат Истина;

КонецФункции // ВосстановитьНастройкиИзСтруктуры()


// Возвращает натсройку сортировок в виде таблицы
//
// Параметры:
//  Отбор - (Порядок) - Порядок, по которому строится таблица
//
// Возвращаемое значение:
//  СтрокаОтборов (Строка) - описание установленных отборов.
//
Функция мОписаниеОтбора(Отбор)

	ОписаниеОтбора = "" + Отбор;
	
	Если ПустаяСтрока(ОписаниеОтбора) Тогда
		Возврат "Отбор не установлен";
	Иначе
		Возврат "Установлен отбор: " + ОписаниеОтбора;
	КонецЕсли;
	

КонецФункции

// Возвращает насройки колонок списка в виде таблицы.
//
// Параметры:
//  Колонки - (Колонки) - колонки списка, по которым строится таблица
//
// Возвращаемое значение:
//  (ТаблицаЗначений) - таблица с значениями настроек
//
Функция мПолучитьНастройкуКолонокСписка(Колонки)

	// Сохранение настроек отборов
	ТаблицаНастроек = Новый ТаблицаЗначений();

	ТаблицаНастроек.Колонки.Добавить("ИмяКолонки");
	ТаблицаНастроек.Колонки.Добавить("Видимость");
	ТаблицаНастроек.Колонки.Добавить("Положение");
	ТаблицаНастроек.Колонки.Добавить("ИзменениеРазмера");
	ТаблицаНастроек.Колонки.Добавить("Ширина");
	ТаблицаНастроек.Колонки.Добавить("ВысотаЯчейки");
	ТаблицаНастроек.Колонки.Добавить("АвтоВысотаЯчейки");

	Для Каждого Колонка Из Колонки Цикл
		СтрокаПараметров = ТаблицаНастроек.Добавить();

		СтрокаПараметров.ИмяКолонки       = Колонка.Имя;
		СтрокаПараметров.Видимость        = Колонка.Видимость;
		СтрокаПараметров.Положение        = Колонка.Положение;
		СтрокаПараметров.ИзменениеРазмера = Колонка.ИзменениеРазмера;
		СтрокаПараметров.Ширина           = Колонка.Ширина;
		СтрокаПараметров.ВысотаЯчейки     = Колонка.ВысотаЯчейки;
		СтрокаПараметров.АвтоВысотаЯчейки = Колонка.АвтоВысотаЯчейки;
	КонецЦикла;

	Возврат ТаблицаНастроек;

КонецФункции

// Устанавливает настройки колонок списка по сохраненным значениям из таблицы.
//
// Параметры:
//  СтруктураНастроек - Структура - структура применяемых настроек.
//  КлючЗначения      - Строка - ключ применяемой настройки.
//  Колонки           - (Колонки) - настраиваемые колонки списка.
//
Процедура мПрименитьНастройкуКолонокСписка(ТаблицаНастроек, Колонки)

	Если ТаблицаНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТаблицы Из ТаблицаНастроек Цикл
		Колонка = Колонки.Найти(СтрокаТаблицы.ИмяКолонки);
		
		Если Колонка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Колонки.Сдвинуть(Колонка, ТаблицаНастроек.Индекс(СтрокаТаблицы) - Колонки.Индекс(Колонка));
		
		Колонка.Видимость        = СтрокаТаблицы.Видимость;
		Колонка.Положение        = СтрокаТаблицы.Положение;
		Колонка.ИзменениеРазмера = ИзменениеРазмераКолонки.Изменять; // это чтобы сработало присвоение ширины
		Колонка.Ширина           = СтрокаТаблицы.Ширина;
		Колонка.ИзменениеРазмера = СтрокаТаблицы.ИзменениеРазмера;
		Колонка.ВысотаЯчейки     = СтрокаТаблицы.ВысотаЯчейки;
		Колонка.АвтоВысотаЯчейки = СтрокаТаблицы.АвтоВысотаЯчейки;
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьКнопки()
	
	ТекущиеДанные = ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	
	ТекущееМенюДляДокумента = ?(ТекущиеДанные = Неопределено, Неопределено, ТекущиеДанные.Ссылка.Метаданные().Имя);
	
	КнопкиМеню          = ЭлементыФормы.КоманднаяПанель.Кнопки;
	
	ОтборУстановлен = Ложь;
	Для каждого Отбор Из ПостроительОтчета.Отбор Цикл
		Если Отбор.Использование Тогда
			ОтборУстановлен = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	КнопкиМеню.ОтборИСортировка.Пометка = ОтборУстановлен;
	
	Если мМенюДляДокумента = ТекущееМенюДляДокумента Тогда
		Возврат;
	КонецЕсли;
	
	КнопкиДействия      = КнопкиМеню.Действия.Кнопки;
	МенюПерейти         = КнопкиМеню.Перейти;
	МенюВводПоОснованию = КнопкиМеню.ВводПоОснованию;
	
	МенюПерейти          .Кнопки.Очистить();
	МенюВводПоОснованию  .Кнопки.Очистить();
	КнопкиДействия.ВводПоОснованию.Кнопки.Очистить();
	КнопкиДействия.Перейти        .Кнопки.Очистить();
	
	Если ТекущееМенюДляДокумента = Неопределено Тогда
		
		КнопкиДействия.УстановитьПометкуУдаления.Доступность = Ложь;
		КнопкиДействия.Провести                 .Доступность = Ложь;
		КнопкиДействия.ОтменаПроведения         .Доступность = Ложь;
		КнопкиДействия.ВводПоОснованию          .Доступность = Ложь;
		КнопкиДействия.Перейти                  .Доступность = Ложь;
		
		КнопкиМеню.УстановитьПометкуУдаления    .Доступность = Ложь;
		КнопкиМеню.Провести                     .Доступность = Ложь;
		КнопкиМеню.ОтменаПроведения             .Доступность = Ложь;
		КнопкиМеню.ВводПоОснованию              .Доступность = Ложь;
		КнопкиМеню.Перейти                      .Доступность = Ложь;
		
		
	Иначе
		
		МетаданныеДокумента = ТекущиеДанные.Ссылка.Метаданные();
		
		ДоступностьПровести         = (МетаданныеДокумента.Проведение = Метаданные.СвойстваОбъектов.Проведение.Разрешить);
		
		КнопкиДействия.УстановитьПометкуУдаления.Доступность = Истина;
		КнопкиДействия.Провести                 .Доступность = ДоступностьПровести;
		КнопкиДействия.ОтменаПроведения         .Доступность = ТекущиеДанные.Проведен;
		
		КнопкиМеню.УстановитьПометкуУдаления    .Доступность = Истина;
		КнопкиМеню.Провести                     .Доступность = ДоступностьПровести;
		КнопкиМеню.ОтменаПроведения             .Доступность = ТекущиеДанные.Проведен;
		
		Если мЕстьОтчетПоДвижению Тогда
			МенюПерейти.Кнопки.Добавить("ДвиженияПоРегистрам", ТипКнопкиКоманднойПанели.Действие, "Движения документа по регистрам", Новый Действие("ОткрытьОтчетДвиженияДокумента"));
			КнопкиДействия.Перейти.Кнопки.Добавить("ДвиженияПоРегистрам", ТипКнопкиКоманднойПанели.Действие, "Движения документа по регистрам", Новый Действие("ОткрытьОтчетДвиженияДокумента"));
		КонецЕсли;
		
		Если мЕстьФормаСтруктурыПодчиненности Тогда
			МенюПерейти.Кнопки.Добавить("СтруктураПодчиненности", ТипКнопкиКоманднойПанели.Действие, "Структура подчиненности документа", Новый Действие("ПоказатьСтруктуруПодчиненностиДокументаИзФормы"));
			КнопкиДействия.Перейти.Кнопки.Добавить("СтруктураПодчиненности", ТипКнопкиКоманднойПанели.Действие, "Структура подчиненности документа", Новый Действие("ПоказатьСтруктуруПодчиненностиДокументаИзФормы"));
		КонецЕсли;
		
		Если (мЕстьОтчетПоДвижению или мЕстьФормаСтруктурыПодчиненности) и МетаданныеДокумента.Движения.Количество() Тогда
			МенюПерейти.Кнопки.Добавить("РазделительДвижений", ТипКнопкиКоманднойПанели.Разделитель);
			КнопкиДействия.Перейти.Кнопки.Добавить("РазделительДвижений", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
		
		Для Каждого ВидДвижения Из МетаданныеДокумента.Движения Цикл
			МенюПерейти.Кнопки.Добавить(ВидДвижения.Имя, ТипКнопкиКоманднойПанели.Действие, ВидДвижения.Синоним, Новый Действие("ПоказатьДвиженияДокумента"));
			КнопкиДействия.Перейти.Кнопки.Добавить(ВидДвижения.Имя, ТипКнопкиКоманднойПанели.Действие, ВидДвижения.Синоним, Новый Действие("ПоказатьДвиженияДокумента"));
		КонецЦикла;
	
		Структура = Новый Структура("ВводитсяНаОсновании", МетаданныеДокумента);
		НайденныеСтроки = мВводНаОсновании.НайтиСтроки(Структура);
		Для Каждого ДокПоОснованию ИЗ НайденныеСтроки Цикл
			МенюВводПоОснованию.Кнопки.Добавить(ДокПоОснованию.Документ.Имя, ТипКнопкиКоманднойПанели.Действие, ДокПоОснованию.Документ.Синоним, Новый Действие("ВвестиДокументПоОснованию"));
			КнопкиДействия.ВводПоОснованию.Кнопки.Добавить(ДокПоОснованию.Документ.Имя, ТипКнопкиКоманднойПанели.Действие, ДокПоОснованию.Документ.Синоним, Новый Действие("ВвестиДокументПоОснованию"));
		КонецЦикла;
		МенюВводПоОснованию.Доступность = НайденныеСтроки.Количество();
		КнопкиДействия.ВводПоОснованию.Доступность = НайденныеСтроки.Количество();
		
	КонецЕсли;
	мМенюДляДокумента = ТекущееМенюДляДокумента;

КонецПроцедуры // () 

Процедура ОбновитьДанныеПоСсылке(СсылкаДокумента)
	
	МетаданныеДокумента = СсылкаДокумента.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	Если ДоступныеДокументы.Найти(ИмяДокумента, "ИмяДокумента") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекстЗапроса = "Выбрать разрешенные
	|	__Документ.Ссылка,
	|	__Документ.ПометкаУдаления,
	|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер","NULL") + " КАК Номер,
	|	__Документ.Дата,
	|	__Документ.Проведен,
	|	""" + МетаданныеДокумента.Представление() + """  КАК ВидДокумента,
	|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 2 ИНАЧЕ 1 КОНЕЦ КОНЕЦ КАК Иконка";
		
	Для каждого ВыводимаяГрафа Из ПолучитьСтруктуруГраф() Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	," + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
	КонецЦикла;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ Документ." + ИмяДокумента + " КАК __Документ
	| ГДЕ __Документ.Ссылка = &СсылкаДокумента";
	
	ПостроительОднойСтроки = Новый ПостроительОтчета;
	ПостроительОднойСтроки.Текст = ТекстЗапроса;
	ПостроительОднойСтроки.Параметры.Вставить("СсылкаДокумента", СсылкаДокумента);
	ПостроительОднойСтроки.ЗаполнитьНастройки();
	ПостроительОднойСтроки.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Ложь, Ложь, Ложь));
	
	ПостроительОднойСтроки.Выполнить();
	Результат = ПостроительОднойСтроки.Результат.Выгрузить();
	
	ТекущаяСтрока = СписокДокументов.Найти(СсылкаДокумента, "Ссылка");
	
	Если Результат.Количество() Тогда
		
		Если ТекущаяСтрока = Неопределено Тогда
			ТекущаяСтрока = СписокДокументов.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат[0]);
		ЭлементыФормы.СписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
	Иначе
		
		Если Не ТекущаяСтрока = Неопределено Тогда
			СписокДокументов.Удалить(ТекущаяСтрока);
		КонецЕсли;
		Предупреждение("Данные не соответствуют текущему отбору списка универсального журнала.");
		
	КонецЕсли;
	
	
КонецПроцедуры // ОбновитьДанныеПоСтроке()

Процедура СоздатьНовыйДокумент()
	
	Спс=Новый СписокЗначений;
	Для Каждого Док Из ДоступныеДокументы Цикл
		МетаданныеДокумента = Метаданные.Документы[Док.ИмяДокумента];
		Спс.Добавить(Док.ИмяДокумента, МетаданныеДокумента.Представление(), ,БиблиотекаКартинок.ДокументОбъект);
	КонецЦикла;
	
	Если Спс.Количество()=1 Тогда
		ТипДока=Спс[0];
	Иначе
		ТекущийДокумент=?(ЭлементыФормы.СписокДокументов.ТекущиеДанные=Неопределено,Неопределено,Спс.НайтиПоЗначению(Метаданные.НайтиПоТипу(ТипЗнч(ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка)).Имя));
		ТипДока=Спс.ВыбратьЭлемент("Выбор вида документа", ТекущийДокумент);
	КонецЕсли;
	
	Если ТипДока<>Неопределено Тогда
		Документы[ТипДока.Значение].ПолучитьФормуНовогоДокумента(, ЭлементыФормы.СписокДокументов).Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьДокумент()
	
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		Попытка
			ТекДок=ТекущиеДанныеСтроки.Ссылка;
			Объект = ТекДок.ПолучитьОбъект();
			Объект.ПолучитьФорму(, ЭлементыФормы.СписокДокументов).Открыть();
		Исключение
			Информация = ИнформацияОбОшибке();
			Описание = ?(Информация.Причина = Неопределено, Информация.Описание, Информация.Причина.Описание);
			Предупреждение(Описание);
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры


Процедура УстановитьПометкуУдаления()
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		ТекДок=ТекущиеДанныеСтроки.Ссылка;
		НадоОбновлять=Ложь;
		Если ТекДок.ПометкаУдаления Тогда
			Если Вопрос("Снять с объекта пометку на удаление?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				Попытка
					ТекДок.ПолучитьОбъект().УстановитьПометкуУдаления(Ложь);
					НадоОбновлять=Истина;
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
					Предупреждение("Операция не выполнена!");
				КонецПопытки;
			КонецЕсли;
		Иначе
			Если Вопрос("Пометить объект на удаление?", РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
				Попытка
					ТекДок.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
					НадоОбновлять=Истина;
				Исключение
					ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
					Предупреждение("Операция не выполнена!");
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		ОбновитьДанныеПоСсылке(ТекущиеДанныеСтроки.Ссылка);
	КонецЕсли;
КонецПроцедуры


Функция ПроверитьТипГрафаБулево(ВыводимаяГрафа)
	СписокОбъектов = ЗначениеИзСтрокиВнутр(ВыводимаяГрафа.СоставГрафы);
	Для Каждого ТекЭлемент Из СписокОбъектов Цикл
		НазваниеОбъектаМД = СокрЛП(ТекЭлемент.Значение);
		НазваниеРеквизитаОбъектаМД = СокрЛП(ТекЭлемент.Представление);
		
		Если НЕ Метаданные.Документы[НазваниеОбъектаМД].Реквизиты[НазваниеРеквизитаОбъектаМД].Тип = Новый ОписаниеТипов("Булево") ТОгда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;	
	Возврат Истина;	
КонецФункции

Процедура НастроитьДополнительныеКолонки()
	
	Счетчик = 0;
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл
		Счетчик = Счетчик + 1;
		ИмяГрафы = "__Графа" + Счетчик;
		
		СтараяКолонка = ЭлементыФормы.СписокДокументов.Колонки.Найти(ИмяГрафы);
		Если СтараяКолонка <> Неопределено Тогда
			ЭлементыФормы.СписокДокументов.Колонки.Удалить(СтараяКолонка);
		КонецЕсли;
		
		НоваяКолонка = ЭлементыФормы.СписокДокументов.Колонки.Добавить(ИмяГрафы, ВыводимаяГрафа.ГрафаЖурнала);
		
		Если ПроверитьТипГрафаБулево(ВыводимаяГрафа) Тогда
			НоваяКолонка.УстановитьЭлементУправления(Тип("Флажок"));
			НоваяКолонка.ДанныеФлажка = ИмяГрафы;
			НоваяКолонка.Ширина = 5;
		Иначе	
			НоваяКолонка.Данные = ИмяГрафы;
			НоваяКолонка.Ширина = 20;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // НастроитьДополнительныеКолонки()

Процедура ОбновитьТаблицуДокументов()
	
	ТекущаяСсылка = ?(ЭлементыФормы.СписокДокументов.ТекущиеДанные = Неопределено, Неопределено, ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка);
	
	ПостроительОтчета.Параметры.Вставить("ДатаНачалаПериодаЖурнала"   , НастройкаПериодаЖурнала.ПолучитьДатуНачала());
	ПостроительОтчета.Параметры.Вставить("ДатаОкончанияПериодаЖурнала", НастройкаПериодаЖурнала.ПолучитьДатуОкончания());
	
	ПостроительОтчета.Выполнить();
	СписокДокументов = ПостроительОтчета.Результат.Выгрузить();
	
	Если Не ТекущаяСсылка = Неопределено Тогда
		СписокДокументов.Индексы.Добавить("Ссылка");
		ТекущаяСтрока = СписокДокументов.Найти(ТекущаяСсылка, "Ссылка");
		Если Не ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.СписокДокументов.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТаблицуДокументов()() 


Функция ПолучитьСтруктуруГраф()
	
	ОписаниеТиповСтрокаНеограниченная = Новый ОписаниеТипов("Строка");
	ОписаниеТиповХранилищеЗначений = Новый ОписаниеТипов("ХранилищеЗначения");
	
	СтруктураГраф = Новый Структура;
	Счетчик = 0;
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл
		Счетчик = Счетчик + 1;
		ИмяГрафы = "__Графа" + Счетчик;
		
		СоставГрафы = ЗначениеИзСтрокиВнутр(ВыводимаяГрафа.СоставГрафы);
		
		СтруктураСоставаГрафы = Новый Структура;
		
		Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
			СтрокаСоставаГрафы = СоставГрафы.НайтиПоЗначению(ДоступныйДокумент.ИмяДокумента);
			Если СтрокаСоставаГрафы = Неопределено Тогда
				СтруктураСоставаГрафы.Вставить(ДоступныйДокумент.ИмяДокумента, "NULL")
			Иначе
				ТипМетаданныхРеквизита = Метаданные.Документы[ДоступныйДокумент.ИмяДокумента].Реквизиты[СтрокаСоставаГрафы.Представление].Тип;
				Если ТипМетаданныхРеквизита = ОписаниеТиповХранилищеЗначений Тогда
					СтруктураСоставаГрафы.Вставить(ДоступныйДокумент.ИмяДокумента, "NULL")
				ИначеЕсли ТипМетаданныхРеквизита = ОписаниеТиповСтрокаНеограниченная Тогда
					СтруктураСоставаГрафы.Вставить(ДоступныйДокумент.ИмяДокумента, "Подстрока(__Документ." + СтрокаСоставаГрафы.Представление + ", 1, 200)");
				Иначе
					СтруктураСоставаГрафы.Вставить(ДоступныйДокумент.ИмяДокумента, "__Документ." + СтрокаСоставаГрафы.Представление)
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		СтруктураГраф.Вставить(ИмяГрафы, СтруктураСоставаГрафы)
		
	КонецЦикла;
	
	Возврат СтруктураГраф;
	
КонецФункции // () 

Процедура ИнициализироватьПостроитель(НастройкиПостроителя = Неопределено);
	
	Если ПостроительОтчета = Неопределено Тогда
		ПостроительОтчета = Новый ПостроительОтчета;
	КонецЕсли; 
	
	Если НастройкиПостроителя = Неопределено Тогда
		НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Ложь, Ложь, Ложь);
	КонецЕсли; 
	
	Если Не ДоступныеДокументы.Количество() Тогда
		ПостроительОтчета.Текст = 
		"ВЫБРАТЬ
		|	NULL КАК Ссылка,
		|	Ложь КАК ПометкаУдаления,
		|	NULL КАК Номер,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Дата,
		|	Ложь КАК Проведен,
		|	NULL КАК Иконка,
		|	NULL КАК ВидДокумента
		|ГДЕ
		|	ЛОЖЬ";
		ПостроительОтчета.ЗаполнитьНастройки();
		Возврат;
	КонецЕсли;
	
	СтруктураГраф = ПолучитьСтруктуруГраф();
	
	ТекстЗапроса = "";
	
	Для каждого ДоступныйДокумент Из ДоступныеДокументы Цикл
		
		ИмяДокумента = ДоступныйДокумент.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы[ИмяДокумента];
		ТекстЗапроса = ?(ПустаяСтрока(ТекстЗапроса), "Выбрать разрешенные", ТекстЗапроса + Символы.ПС + "Объединить Все Выбрать");
		
		ТекстЗапроса = ТекстЗапроса + "
		|	__Документ.Ссылка,
		|	__Документ.ПометкаУдаления,
		|	" + ?(МетаданныеДокумента.ДлинаНомера, "__Документ.Номер","NULL") + " КАК Номер,
		|	__Документ.Дата,
		|	__Документ.Проведен,
		|	""" + МетаданныеДокумента.Представление() + """  КАК ВидДокумента,
		|	ВЫБОР КОГДА __Документ.Проведен ТОГДА 0 ИНАЧЕ ВЫБОР КОГДА __Документ.ПометкаУдаления ТОГДА 2 ИНАЧЕ 1 КОНЕЦ КОНЕЦ КАК Иконка";
		
		Для каждого ВыводимаяГрафа Из СтруктураГраф Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	," + ВыводимаяГрафа.Значение[ИмяДокумента] + " КАК " + ВыводимаяГрафа.Ключ;
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ Документ." + ИмяДокумента + " КАК __Документ
		|ГДЕ 
		|	__Документ.Дата >= НАЧАЛОПЕРИОДА(&ДатаНачалаПериодаЖурнала, ДЕНЬ)
		|	И (__Документ.Дата <= КОНЕЦПЕРИОДА(&ДатаОкончанияПериодаЖурнала, ДЕНЬ) или &ДатаОкончанияПериодаЖурнала = ДатаВремя(1,1,1))
		|";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + " 
	|УПОРЯДОЧИТЬ ПО Дата";
	
	ПостроительОтчета.Текст = ТекстЗапроса;
	ПостроительОтчета.ЗаполнитьНастройки();
	
	Счетчик = 0;
	Для каждого ВыводимаяГрафа Из ВыводимыеГрафы Цикл
		Счетчик = Счетчик + 1;
		ПостроительОтчета.ДоступныеПоля["__Графа" + Счетчик].Представление = ВыводимаяГрафа.ГрафаЖурнала;
	КонецЦикла; 
	ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	ПостроительОтчета.ДоступныеПоля.Ссылка.Поля.Очистить();
	
	ПостроительОтчета.ДоступныеПоля.Дата.Отбор = Ложь;
	ПостроительОтчета.ДоступныеПоля.Иконка.Отбор = Ложь;
	ПостроительОтчета.ДоступныеПоля.ВидДокумента.Представление = "Вид документа";
	ПостроительОтчета.ДоступныеПоля.ПометкаУдаления.Представление = "Пометка удаления";
	
КонецПроцедуры // () 

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
	СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
		
	Если УниверсальныеМеханизмы.ПолучитьНастройкуИспользоватьПриОткрытии(СтруктураНастройки) Тогда
		
		мТекущаяНастройка = СтруктураНастройки;
		ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СохраненнаяНастройка);
	Иначе
		ИнициализироватьПостроитель();
		ОбновитьТаблицуДокументов();
		НастроитьДополнительныеКолонки();
		
		НадписьОтбор = мОписаниеОтбора(ПостроительОтчета.Отбор);
	КонецЕсли;
	
	УстановитьЗаголовокОкна();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	Перем СохраненнаяНастройка;
	
	Если мТекущаяНастройка <> Неопределено И мТекущаяНастройка.НаименованиеНастройки <> Неопределено И мТекущаяНастройка.Свойство("СохранятьАвтоматически") И мТекущаяНастройка.СохранятьАвтоматически Тогда
	
		СформироватьСтруктуруДляСохраненияНастроек(СохраненнаяНастройка);
		
		СтруктураНастройки = Новый Структура;
		СтруктураНастройки.Вставить("Пользователь", глЗначениеПеременной("глТекущийПользователь"));
		СтруктураНастройки.Вставить("ИмяОбъекта", "Обработка." + Строка(ЭтотОбъект));
		СтруктураНастройки.Вставить("НаименованиеНастройки", мТекущаяНастройка.НаименованиеНастройки);
		СтруктураНастройки.Вставить("СохраненнаяНастройка", СохраненнаяНастройка);
		СтруктураНастройки.Вставить("ИспользоватьПриОткрытии", мТекущаяНастройка.ИспользоватьПриОткрытии);
		СтруктураНастройки.Вставить("СохранятьАвтоматически", мТекущаяНастройка.СохранятьАвтоматически);
		
		УниверсальныеМеханизмы.СохранитьНастройку(СтруктураНастройки);

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "СписокДокументов"
Процедура СписокДокументовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
		Если ТекущиеДанныеСтроки<>Неопределено Тогда
			НовДок = ТекущиеДанныеСтроки.Ссылка.Скопировать();
			Форма  = НовДок.ПолучитьФорму(, Элемент);
			Форма.ПараметрОбъектКопирования = ТекущиеДанныеСтроки.Ссылка;
			Форма.Открыть();
		КонецЕсли;
	Иначе
		
		Если ДоступныеДокументы.Количество() Тогда
			СоздатьНовыйДокумент();
		Иначе
			Предупреждение("Не определен состав документов журнала!");
		КонецЕсли;
		
	КонецЕсли;
	Отказ=Истина;
	
КонецПроцедуры // СписокДокументовПередНачаломДобавления()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "СписокДокументов"
Процедура СписокДокументовПередНачаломИзменения(Элемент, Отказ)
	ИзменитьДокумент();
	Отказ=Истина;
КонецПроцедуры // СписокДокументовПередНачаломИзменения()

// Процедура - обработчик события "ПередУдалением" табличного поля "СписокДокументов"
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	УстановитьПометкуУдаления();
	Отказ=Истина;
КонецПроцедуры // СписокДокументовПередУдалением()

// Процедура - обработчик события "ПриАктивизацииСтроки"
// табличного поля СписокДокументов
//
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокДокументовПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры // СписокДокументовПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля СписокДокументов
//
Процедура ОбработчикОжиданияСписокДокументовПриАктивизацииСтроки()
	ОбновитьКнопки();
КонецПроцедуры // ОбработчикОжиданияСписокДокументовПриАктивизацииСтроки
    
// Процедура вызывается при нажатии кнопки "Обновить" командной панели
Процедура КоманднаяПанельОбновитьСписок(Кнопка)
	
	Если ДоступныеДокументы.Количество() Тогда
		ОбновитьТаблицуДокументов();
	Иначе
		Предупреждение("Не определен состав документов журнала!");
	КонецЕсли;
	
	
КонецПроцедуры // КоманднаяПанельОбновитьСписок()

Процедура КоманднаяПанельОтбор(Кнопка)
	
	ФормаОтбора = ПолучитьФорму("ФормаОтбора");
	НастройкиПостроителя = ПостроительОтчета.ПолучитьНастройки(Истина, Истина, Ложь, Ложь, Ложь);
	
	ФормаОтбора.Отбор = ПостроительОтчета.Отбор;
	ФормаОтбора.Порядок = ПостроительОтчета.Порядок;
	Если ФормаОтбора.ОткрытьМодально() = Истина Тогда
		ОбновитьТаблицуДокументов();
		НадписьОтбор = мОписаниеОтбора(ПостроительОтчета.Отбор);
	Иначе
		ПостроительОтчета.УстановитьНастройки(НастройкиПостроителя);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки");
	Если ФормаНастройки.ОткрытьМодально() = Истина Тогда
		
		ИнициализироватьПостроитель();
		ОбновитьТаблицуДокументов();
		НастроитьДополнительныеКолонки();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Установить пометку удаления" командной панели
Процедура КоманднаяПанельУстановитьПометкуУдаления(Кнопка)
	УстановитьПометкуУдаления();
КонецПроцедуры // КоманднаяПанельУстановитьПометкуУдаления()

// Процедура вызывается при нажатии кнопок "Провести", "Отмена проведения" командной панели
Процедура КоманднаяПанельПровестиРаспровести(Кнопка)
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		ТекДок=ТекущиеДанныеСтроки.Ссылка;
		НадоОбновлять=Ложь;
		Если (ТекущиеДанныеСтроки.Проведен) И (Кнопка.Имя="ОтменаПроведения") Тогда
			ДокОбъект=ТекДок.ПолучитьОбъект();
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				НадоОбновлять=Истина;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Предупреждение("Операция не выполнена!");
			КонецПопытки;
		ИначеЕсли (Кнопка.Имя="Провести") Тогда
			ДокОбъект=ТекДок.ПолучитьОбъект();
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				НадоОбновлять=Истина;
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
				Предупреждение("Операция не выполнена!");
			КонецПопытки;
		КонецЕсли;
		Если НадоОбновлять Тогда
			ОбновитьДанныеПоСсылке(ТекущиеДанныеСтроки.Ссылка);
			ОбновитьКнопки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // КоманднаяПанельПровестиРаспровести()

// Процедура вызывается при выборе пункта подменю кнопки "Перейти" командной панели
// Процедура назначается обработчику события динамически.
Процедура ПоказатьДвиженияДокумента(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	Если Метаданные.РегистрыНакопления.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыНакопления[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыСведений.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыСведений[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыБухгалтерии[Кнопка.Имя].ПолучитьФормуСписка();
	ИначеЕсли Метаданные.РегистрыРасчета.Найти(Кнопка.Имя)<>Неопределено Тогда
		Форма = РегистрыРасчета[Кнопка.Имя].ПолучитьФормуСписка();
	КонецЕсли;
	Форма.ПараметрОтборПоРегистратору = ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка;
	Форма.Открыть(); 
Конецпроцедуры // ПоказатьДвиженияДокумента()

// Процедура вызывается при выборе пункта подменю кнопки "Ввести на основании" командной панели
// Процедура назначается обработчику события динамически.
Процедура ВвестиДокументПоОснованию(Кнопка) // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	Док = Документы[Кнопка.Имя].СоздатьДокумент();
	Док.Заполнить(ЭлементыФормы.СписокДокументов.ТекущиеДанные.Ссылка);
	Форма = Док.ПолучитьФорму();
	Форма.Открыть();
Конецпроцедуры // ВвестиДокументПоОснованию()

// Процедура вызывает отчет конфигурации "ДвиженияДокумента"
// Процедура назначается обработчику события динамически.
Процедура ОткрытьОтчетДвиженияДокумента() // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		РаботаСДиалогами.НапечататьДвиженияДокумента(ТекущиеДанныеСтроки.Ссылка);
	КонецЕсли;
КонецПроцедуры

// Процедуры выводит отчет по структуре подчиненности текущего документа
// Процедура назначается обработчику события динамически.
Процедура ПоказатьСтруктуруПодчиненностиДокументаИзФормы() // Подключение данной процедуры-обработчика выполняется из кода конфигурации
	ТекущиеДанныеСтроки=ЭлементыФормы.СписокДокументов.ТекущиеДанные;
	Если ТекущиеДанныеСтроки<>Неопределено Тогда
		Форма = ПолучитьОбщуюФорму("ФормаСтруктурыПодчиненности", ЭтаФорма);
		Если Форма.Открыта() Тогда
			Форма.Закрыть();
		КонецЕсли;
		Форма.ДокументСсылка = ТекущиеДанныеСтроки.Ссылка;
		Форма.Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ОбновитьКнопки();
КонецПроцедуры

Процедура СписокДокументовОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	ОбновитьДанныеПоСсылке(Объект.Ссылка);
КонецПроцедуры

Процедура КоманднаяПанельУстановитьИнтервалДат(Кнопка)
	
	Если НастройкаПериодаЖурнала.Редактировать() Тогда
		ИнициализироватьНастройкуПериодаЖурнала();
		ОбновитьТаблицуДокументов();
	КонецЕсли;
	УстановитьЗаголовокОкна();
	
КонецПроцедуры

Процедура ИнициализироватьНастройкуПериодаЖурнала()
	
	Если Не ТипЗНЧ(НастройкаПериодаЖурнала) = Тип("НастройкаПериода") Тогда
		НастройкаПериодаЖурнала = Новый НастройкаПериода;
		НастройкаПериодаЖурнала.РедактироватьКакИнтервал = Истина;
		НастройкаПериодаЖурнала.РедактироватьКакПериод = Истина;
		НастройкаПериодаЖурнала.ВариантНастройки = ВариантНастройкиПериода.Интервал;
		
	КонецЕсли;
	
КонецПроцедуры // () 

// Процедура - обработчик нажатия кнопки "ВосстановитьЗначения"
//
Процедура КоманднаяПанельФормыДействиеВосстановитьЗначения(Кнопка)
	
	ВосстановитьНастройки();
	УстановитьЗаголовокОкна();
	
КонецПроцедуры // КоманднаяПанельФормыДействиеВосстановитьЗначения()

// Процедура - обработчик нажатия кнопки "СохранитьЗначения"
//
Процедура КоманднаяПанельФормыДействиеСохранитьЗначения(Кнопка)
	
	СохранитьНастройки();
	УстановитьЗаголовокОкна();
	
КонецПроцедуры // КоманднаяПанельФормыДействиеСохранитьЗначения()



мЕстьОтчетПоДвижению = Не (Метаданные.Отчеты.Найти("ДвиженияДокумента") = Неопределено);
мЕстьФормаСтруктурыПодчиненности = Не (Метаданные.ОбщиеФормы.Найти("ФормаСтруктурыПодчиненности") = Неопределено);

мВводНаОсновании = Новый ТаблицаЗначений;
мВводНаОсновании.Колонки.Добавить("ВводитсяНаОсновании");
мВводНаОсновании.Колонки.Добавить("Документ");
мВводНаОсновании.Индексы.Добавить("ВводитсяНаОсновании");

Для Каждого Док Из Метаданные.Документы Цикл
	Для Каждого НаОсновании ИЗ Док.ВводитсяНаОсновании Цикл
		НоваяСтрока = мВводНаОсновании.Добавить();
		НоваяСтрока.ВводитсяНаОсновании = НаОсновании;
		НоваяСтрока.Документ = Док;
	КонецЦикла;
КонецЦикла;

мМенюДляДокумента = Неопределено;

ИнициализироватьНастройкуПериодаЖурнала();