////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает блокировку соединений с ИБ,
// в соответствиями со значениями реквизитов объекта.
// При установке блокировки в информационной базе включается
// механизм завершения работы пользователей (включая пользователя,
// инициировавшего блокировку).
//
Процедура УстановитьБлокировку() Экспорт	
	
    // параметры блокировки
	Блокировка = Новый БлокировкаУстановкиСоединений;
	
	Блокировка.Начало 			= НачалоБлокировки;
	Блокировка.Конец  			= ОкончаниеБлокировки;
	Блокировка.Сообщение 		= УправлениеСоединениямиИБ.СформироватьСообщениеБлокировки(Сообщение, КодРазрешения);
	Блокировка.Установлена 		= УстановитьБлокировкуСоединений;
	Блокировка.КодРазрешения 	= КодРазрешения;	
	
	// установка блокировки соединений
	УстановитьБлокировкуУстановкиСоединений(Блокировка);
	
#Если Клиент Тогда             
	Если УстановитьБлокировкуСоединений Тогда
		// поскольку блокировка еще не установлена, то при входе в систему
		// для данного пользователя был подключен обработчик ожидания завершения работы.
		// Отключаем его. Так как для этого пользователя подключается специализированный обработчик ожидания
		// "ЗавершитьРаботуПользователей", который ориентирован на то, что данный пользователь
		// должен быть отключен последним.        
		
		ОтключитьОбработчикОжидания("КонтрольРежимаЗавершенияРаботыПользователей");
		ПодключитьОбработчикОжидания("ЗавершитьРаботуПользователей", 60);	
		ЗавершитьРаботуПользователей();
	КонецЕсли;
#КонецЕсли 
	
КонецПроцедуры // УстановитьБлокировку()

Процедура ПолучитьПараметрыБлокировки() Экспорт
	
	ТекущийРежим = ПолучитьБлокировкуУстановкиСоединений();
	
	УстановитьБлокировкуСоединений = ТекущийРежим.Установлена;
	Сообщение                      = УправлениеСоединениямиИБ.ИзвлечьСообщениеБлокировки(ТекущийРежим.Сообщение);
	КодРазрешения                  = ТекущийРежим.КодРазрешения;
	
	Если УстановитьБлокировкуСоединений Тогда
		НачалоБлокировки           = ТекущийРежим.Начало;
		ОкончаниеБлокировки        = ТекущийРежим.Конец;
	Иначе	
		// Если блокировка не установлена, можно предположить, что
		// пользователь открыл форму для установки блокировки.
		// Поэтому устанавливаем дату блокировки равной текущей дате
		НачалоБлокировки           = ТекущаяДата();
	КонецЕсли;

	Если ПравоДоступа("Чтение", Метаданные.Константы.ПараметрыАдминистрированияИБ) Тогда
		ПараметрыАдминистрированияИБ = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
		АдминистраторИБ              = Справочники.Пользователи.НайтиПоКоду(ПараметрыАдминистрированияИБ.ИмяАдминистратораИБ);
		ПарольАдминистратораИБ       = ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ;
		ИмяАдминистратораКластера    = ПараметрыАдминистрированияИБ.ИмяАдминистратораКластера;
		ПарольАдминистратораКластера = ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера;
		ПортКластераСерверов         = ПараметрыАдминистрированияИБ.ПортКластераСерверов;
		ПортАгентаСервера            = ПараметрыАдминистрированияИБ.ПортАгентаСервера;
		НестандартныеПорты           = ПортКластераСерверов <> 0 ИЛИ ПортАгентаСервера <> 0;
		КластерТребуетАвторизации    = НЕ ПустаяСтрока(ИмяАдминистратораКластера);
    КонецЕсли;
		
КонецПроцедуры

Функция СформироватьПараметрыАдминистрированияИБ() Экспорт

	ПараметрыАдминистрированияИБ = УправлениеСоединениямиИБ.ПолучитьПараметрыАдминистрированияИБ();
	ПараметрыАдминистрированияИБ.ИмяАдминистратораИБ = СокрЛП(АдминистраторИБ.Код);
	ПараметрыАдминистрированияИБ.ПарольАдминистратораИБ = ПарольАдминистратораИБ;
	Если КластерТребуетАвторизации Тогда
		ПараметрыАдминистрированияИБ.ИмяАдминистратораКластера = ИмяАдминистратораКластера;
		ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера = ПарольАдминистратораКластера;
	Иначе	
		ПараметрыАдминистрированияИБ.ИмяАдминистратораКластера = "";
		ПараметрыАдминистрированияИБ.ПарольАдминистратораКластера = "";
	КонецЕсли;	
	Если НестандартныеПорты Тогда
		ПараметрыАдминистрированияИБ.ПортКластераСерверов = ПортКластераСерверов;
		ПараметрыАдминистрированияИБ.ПортАгентаСервера = ПортАгентаСервера;
	Иначе	
		ПараметрыАдминистрированияИБ.ПортКластераСерверов = 0;
		ПараметрыАдминистрированияИБ.ПортАгентаСервера = 0;
	КонецЕсли;	
	
	Возврат ПараметрыАдминистрированияИБ;
	
КонецФункции

Функция ПроверитьПараметрыАдминистрированияИБ() Экспорт
	
	Если ОпределитьЭтаИнформационнаяБазаФайловая() Тогда
		Возврат Истина;
	КонецЕсли;
	ПараметрыАдминистрированияИБ = СформироватьПараметрыАдминистрированияИБ();
	Возврат УправлениеСоединениямиИБ.ПроверитьПараметрыАдминистрированияИБ(ПараметрыАдминистрированияИБ, Истина);

КонецФункции
