Перем мВалютаРегламентированногоУчета Экспорт;

// {ОбособленныеПодразделения
Перем мРегистрацияВИФНС;
// }ОбособленныеПодразделения 

# Если Клиент Тогда

// Заполнение таблицы бух.остатков на конец указанной даты
//
Функция ЗаполнитьОстаткиНаСчетах68и69(КонДата) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Поле1,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	-ХозрасчетныйОстатки.СуммаОстаток КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоНалогам))
	|				ИЛИ Счет В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию)),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстаток < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетУчета,
	|	Поле1
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ГраницаОстатков", Новый Граница(КонецДня(КонДата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции

Функция СоздатьПустуюТаблицуДанных()

	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("СуммаДокумента",      ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("КодБК",               ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаДанных.Колонки.Добавить("КодОКАТО",            ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(11));
	ТаблицаДанных.Колонки.Добавить("ОчередностьПлатежа",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1, 0));
	ТаблицаДанных.Колонки.Добавить("СтатусСоставителя",   ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2));
	ТаблицаДанных.Колонки.Добавить("ИННПлательщика",      ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(12));
	ТаблицаДанных.Колонки.Добавить("КПППлательщика",      ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(9));
	ТаблицаДанных.Колонки.Добавить("ПоказательОснования", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2));
	ТаблицаДанных.Колонки.Добавить("ПоказательТипа",      ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(2));
	ТаблицаДанных.Колонки.Добавить("ПоказательПериода",   ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаДанных.Колонки.Добавить("НазначениеПлатежа",   ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(250));
	ТаблицаДанных.Колонки.Добавить("Контрагент",          Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаДанных.Колонки.Добавить("СчетКонтрагента",     Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТаблицаДанных.Колонки.Добавить("ВидПлатежа",          ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(15));
	
	Возврат ТаблицаДанных;

КонецФункции 

// {ОбособленныеПодразделения

Функция ПолучитьТаблицуРеквизитовПлатежаПоРегистрацииВИФНС(ИмяРеквизита, ЗначениеРеквизита, КодВидаПлатежа = "")

	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	1 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа,
	|	СписокРеквизитов.ВидПлатежа.КодБК КАК КодБК,
	|	СписокРеквизитов.ВидПлатежа.СчетУчета КАК СчетУчета,
	|	СписокРеквизитов.Получатель КАК Контрагент,
	|	СписокРеквизитов.СчетПолучателя КАК СчетКонтрагента,
	|	СписокРеквизитов.СтатусСоставителя,
	|	СписокРеквизитов.ПоказательОснования,
	|	СписокРеквизитов.ПоказательТипа,
	|	СписокРеквизитов.ОчередностьПлатежа,
	|	СписокРеквизитов.ПоказательПериода,
	|	СписокРеквизитов.НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &ЗначениеРеквизита
	|	И СписокРеквизитов.Организация = &Организация
	|	И СписокРеквизитов.РегистрацияВИФНС = &РегистрацияВИФНС";
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|	И ПОДСТРОКА(СписокРеквизитов.ВидПлатежа.КодБК, 14, 1) = &КодВидаПлатежа";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	2 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа,
	|	СписокРеквизитов.ВидПлатежа.КодБК,
	|	СписокРеквизитов.ВидПлатежа.СчетУчета,
	|	СписокРеквизитов.Получатель,
	|	СписокРеквизитов.СчетПолучателя,
	|	СписокРеквизитов.СтатусСоставителя,
	|	СписокРеквизитов.ПоказательОснования,
	|	СписокРеквизитов.ПоказательТипа,
	|	СписокРеквизитов.ОчередностьПлатежа,
	|	СписокРеквизитов.ПоказательПериода,
	|	СписокРеквизитов.НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &ЗначениеРеквизита
	|	И СписокРеквизитов.Организация = &Организация
	|	И СписокРеквизитов.РегистрацияВИФНС = ЗНАЧЕНИЕ(Справочник.РегистрацияВИФНС.ПустаяСсылка)";
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|	И ПОДСТРОКА(СписокРеквизитов.ВидПлатежа.КодБК, 14, 1) = &КодВидаПлатежа";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	3 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа,
	|	СписокРеквизитов.ВидПлатежа.КодБК,
	|	СписокРеквизитов.ВидПлатежа.СчетУчета,
	|	СписокРеквизитов.Получатель,
	|	СписокРеквизитов.СчетПолучателя,
	|	СписокРеквизитов.СтатусСоставителя,
	|	СписокРеквизитов.ПоказательОснования,
	|	СписокРеквизитов.ПоказательТипа,
	|	СписокРеквизитов.ОчередностьПлатежа,
	|	СписокРеквизитов.ПоказательПериода,
	|	СписокРеквизитов.НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &ЗначениеРеквизита
	|	И СписокРеквизитов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И СписокРеквизитов.РегистрацияВИФНС = ЗНАЧЕНИЕ(Справочник.РегистрацияВИФНС.ПустаяСсылка)";
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|	И ПОДСТРОКА(СписокРеквизитов.ВидПлатежа.КодБК, 14, 1) = &КодВидаПлатежа";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, 
		"ВидПлатежа.СчетУчета = &ЗначениеРеквизита", 
		"ВидПлатежа" + ?(ИмяРеквизита = "Ссылка", "", "." + ИмяРеквизита) + " = &ЗначениеРеквизита"); 
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
		Запрос.УстановитьПараметр("КодВидаПлатежа", КодВидаПлатежа);
	КонецЕсли;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("РегистрацияВИФНС", мРегистрацияВИФНС);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции // ПолучитьТаблицуРеквизитовПлатежаПоРегистрацииВИФНС()

// }ОбособленныеПодразделения 

Функция ПолучитьТаблицуРеквизитовПлатежаПоОрганизации(ИмяРеквизита, ЗначениеРеквизита, КодВидаПлатежа = "") 
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	1 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа,
	|	СписокРеквизитов.ВидПлатежа.КодБК КАК КодБК,
	|	СписокРеквизитов.ВидПлатежа.СчетУчета КАК СчетУчета,
	|	СписокРеквизитов.Получатель КАК Контрагент,
	|	СписокРеквизитов.СчетПолучателя КАК СчетКонтрагента,
	|	СписокРеквизитов.СтатусСоставителя,
	|	СписокРеквизитов.ПоказательОснования,
	|	СписокРеквизитов.ПоказательТипа,
	|	СписокРеквизитов.ОчередностьПлатежа,
	|	СписокРеквизитов.ПоказательПериода,
	|	СписокРеквизитов.НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &ЗначениеРеквизита
	|	И СписокРеквизитов.Организация = &Организация";
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|	И ПОДСТРОКА(СписокРеквизитов.ВидПлатежа.КодБК, 14, 1) = &КодВидаПлатежа";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	2 КАК Приоритет,
	|	СписокРеквизитов.ВидПлатежа,
	|	СписокРеквизитов.ВидПлатежа.КодБК,
	|	СписокРеквизитов.ВидПлатежа.СчетУчета,
	|	СписокРеквизитов.Получатель,
	|	СписокРеквизитов.СчетПолучателя,
	|	СписокРеквизитов.СтатусСоставителя,
	|	СписокРеквизитов.ПоказательОснования,
	|	СписокРеквизитов.ПоказательТипа,
	|	СписокРеквизитов.ОчередностьПлатежа,
	|	СписокРеквизитов.ПоказательПериода,
	|	СписокРеквизитов.НазначениеПлатежа
	|ИЗ
	|	РегистрСведений.РеквизитыУплатыНалоговИПлатежейВБюджет КАК СписокРеквизитов
	|ГДЕ
	|	СписокРеквизитов.ВидПлатежа.СчетУчета = &ЗначениеРеквизита
	|	И СписокРеквизитов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|	И ПОДСТРОКА(СписокРеквизитов.ВидПлатежа.КодБК, 14, 1) = &КодВидаПлатежа";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет ВОЗР";
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, 
		"ВидПлатежа.СчетУчета = &ЗначениеРеквизита", 
		"ВидПлатежа" + ?(ИмяРеквизита = "Ссылка", "", "." + ИмяРеквизита) + " = &ЗначениеРеквизита"); 
	Запрос.УстановитьПараметр("ЗначениеРеквизита", ЗначениеРеквизита);
	Если ЗначениеЗаполнено(КодВидаПлатежа) Тогда
		Запрос.УстановитьПараметр("КодВидаПлатежа", КодВидаПлатежа);
	КонецЕсли;	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаРезультата;

КонецФункции // ПолучитьТаблицуРеквизитовПлатежаПоОрганизации()

Функция ПолучитьТаблицуРеквизитовПлатежа(ИмяРеквизита, ЗначениеРеквизита, КодВидаПлатежа = "")
	
	// {ОбособленныеПодразделения
	Если мРегистрацияВИФНС <> Неопределено Тогда
		ТаблицаРезультата = ПолучитьТаблицуРеквизитовПлатежаПоРегистрацииВИФНС(ИмяРеквизита, ЗначениеРеквизита, КодВидаПлатежа);
		Возврат ТаблицаРезультата;
	КонецЕсли;
	// }ОбособленныеПодразделения 
	
	ТаблицаРезультата = ПолучитьТаблицуРеквизитовПлатежаПоОрганизации(ИмяРеквизита, ЗначениеРеквизита, КодВидаПлатежа);
	Возврат ТаблицаРезультата;

КонецФункции // ПолучитьТаблицуРеквизитовПлатежа()

Функция ПодготовитьТаблицуДанныхПоОстатку(СтрокаОстатка)

	ТаблицаДанных = СоздатьПустуюТаблицуДанных();
	
	СтрокаДанных = ТаблицаДанных.Добавить();
	СтрокаДанных.СуммаДокумента = СтрокаОстатка.Сумма;
	
	СтрокаДанных.КодОКАТО       = Организация.КодПоОКАТО;
	
	ЭтоФизЛицо = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо );
	СтрокаДанных.КПППлательщика = ?(ЭтоФизЛицо, "0", Организация.КПП);
	
	// {ОбособленныеПодразделения
	Если ТипЗнч(СтрокаОстатка.Субконто1) = Тип("СправочникСсылка.РегистрацияВИФНС") Тогда
		мРегистрацияВИФНС = СтрокаОстатка.Субконто1;
	ИначеЕсли ТипЗнч(СтрокаОстатка.Субконто2) = Тип("СправочникСсылка.РегистрацияВИФНС") Тогда
		мРегистрацияВИФНС = СтрокаОстатка.Субконто2;
	ИначеЕсли ТипЗнч(СтрокаОстатка.Субконто3) = Тип("СправочникСсылка.РегистрацияВИФНС") Тогда
		мРегистрацияВИФНС = СтрокаОстатка.Субконто3;
	Иначе
		мРегистрацияВИФНС = Организация.РегистрацияВИФНС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мРегистрацияВИФНС) Тогда
		СтрокаДанных.КодОКАТО       = мРегистрацияВИФНС.КодПоОКАТО;
		СтрокаДанных.КПППлательщика = ?(ЭтоФизЛицо, "0", мРегистрацияВИФНС.КПП);
	КонецЕсли;
	// }ОбособленныеПодразделения
	
	КодВидаПлатежа = "";
	Если ТипЗнч(СтрокаОстатка.Субконто1) = Тип("ПеречислениеСсылка.ВидыПлатежейВГосБюджет") Тогда
		Если СтрокаОстатка.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.НалогСам Тогда
			КодВидаПлатежа = "1";
		ИначеЕсли СтрокаОстатка.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.НалогАкт Тогда
			КодВидаПлатежа = "1";
		ИначеЕсли СтрокаОстатка.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			КодВидаПлатежа = "1";
		ИначеЕсли СтрокаОстатка.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт Тогда
			КодВидаПлатежа = "2";
		ИначеЕсли СтрокаОстатка.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ПениСам Тогда
			КодВидаПлатежа = "2";
		ИначеЕсли СтрокаОстатка.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Штраф Тогда
			КодВидаПлатежа = "3";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРеквизитовПлатежа = ПолучитьТаблицуРеквизитовПлатежа("СчетУчета", СтрокаОстатка.СчетУчета, КодВидаПлатежа);
	
	Если ТаблицаРеквизитовПлатежа.Количество() > 0 Тогда
		СтрокаРеквизитов = ТаблицаРеквизитовПлатежа[0];
		ЗаполнитьЗначенияСвойств(СтрокаДанных, СтрокаРеквизитов);
		ПериодичностьУплаты = СтрокаРеквизитов.ПоказательПериода;
		НазначениеПлатежа = СтрокаРеквизитов.НазначениеПлатежа;
	Иначе
		ПериодичностьУплаты = "МС";
		НазначениеПлатежа = "Уплата налога";
	КонецЕсли;
	
	ДатаНачисленияНалога = НачалоМесяца(ДатаОстатков) - 1;
	
	Если ПериодичностьУплаты = "КВ" Тогда
		ДатаОкончания = КонецКвартала(ДатаНачисленияНалога);
		ДатаНачала    = НачалоКвартала(ДатаОкончания);
		СтрокаДанных.ПоказательПериода = "КВ." + Формат(ДатаОкончания, "ДФ=кк") + "." + Формат(ДатаОкончания, "ДФ=гггг");
		СтрокаДанных.НазначениеПлатежа = НазначениеПлатежа 
			+ " за " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина");
	ИначеЕсли ПериодичностьУплаты = "МС" Тогда
		ДатаОкончания = КонецМесяца(ДатаНачисленияНалога);
		ДатаНачала    = НачалоМесяца(ДатаОкончания);
		СтрокаДанных.ПоказательПериода = "МС." + Формат(ДатаОкончания, "ДФ=ММ") + "." + Формат(ДатаОкончания, "ДФ=гггг");
		СтрокаДанных.НазначениеПлатежа = НазначениеПлатежа 
			+ " за " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина");
	ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
		ДатаОкончания = КонецГода(ДатаНачисленияНалога);
		ДатаНачала    = НачалоГода(ДатаОкончания);
		Если Месяц(ДатаНачисленияНалога) <= 6 Тогда
			СтрокаДанных.ПоказательПериода = "ПЛ.01." + Формат(ДатаОкончания, "ДФ=гггг");
			СтрокаДанных.НазначениеПлатежа = НазначениеПлатежа 
				+ " за 1 полугодие " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина");
		Иначе
			СтрокаДанных.ПоказательПериода = "ПЛ.02." + Формат(ДатаОкончания, "ДФ=гггг");
			СтрокаДанных.НазначениеПлатежа = НазначениеПлатежа 
				+ " за 2 полугодие " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина");
		КонецЕсли;
	ИначеЕсли ПериодичностьУплаты = "ГД" Тогда
		ДатаОкончания = КонецГода(ДатаНачисленияНалога);
		ДатаНачала    = НачалоГода(ДатаОкончания);
		СтрокаДанных.ПоказательПериода = "ГД.00." + Формат(ДатаОкончания, "ДФ=гггг");
		СтрокаДанных.НазначениеПлатежа = НазначениеПлатежа 
			+ " за " + ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП = Истина");
	Иначе
		СтрокаДанных.ПоказательПериода = "0";
		СтрокаДанных.НазначениеПлатежа = НазначениеПлатежа;
	КонецЕсли;
	
	// Заполняем вид платежа так, как он заполнился бы при ручном вводе платежных поручений
	ВидПлатежаПоУмолчанию = ВосстановитьЗначение("ПлатежноеПоручениеВидПлатежа");
	ВидПлатежаБылСохранен = ВидПлатежаПоУмолчанию = ""
		ИЛИ (ТипЗнч(ВидПлатежаПоУмолчанию) = Тип("Строка") 
			И (Найти("Почтой;Телеграфом;Электронно;Срочно;", ВидПлатежаПоУмолчанию) > 0));
	Если НЕ ВидПлатежаБылСохранен Тогда
		ВидПлатежаПоУмолчанию = "Электронно";
	Иначе
		Если ВидПлатежаПоУмолчанию = "" Тогда 
			ВидПлатежаПоУмолчанию = "Электронно";
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаДанных.ЗаполнитьЗначения(ВидПлатежаПоУмолчанию, "ВидПлатежа");
	
	Возврат ТаблицаДанных;

КонецФункции 

Процедура СформироватьПлатежныеПорученияПоОстаткам() Экспорт

	ПлатежныеПоручения.Очистить();
		
	Для каждого СтрокаОстатка Из БухОстатки Цикл
	
		Если НЕ СтрокаОстатка.Оплатить Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДанных = ПодготовитьТаблицуДанныхПоОстатку(СтрокаОстатка);
	
		Для каждого СтрокаДанных Из ТаблицаДанных Цикл
		
			НовыйДокумент = СоздатьПлатежноеПоручение(СтрокаДанных, Неопределено);
			
			Если ЗначениеЗаполнено(НовыйДокумент) Тогда
			
				НоваяСтрока = ПлатежныеПоручения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НовыйДокумент);
			
			КонецЕсли;
		
		КонецЦикла; 
		
	КонецЦикла;

КонецПроцедуры

Функция СоздатьПлатежноеПоручение(СтрокаДанных, РегламентированныйОтчет = Неопределено)

	ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
	
	ДокументОбъект.Организация     = Организация;
	ДокументОбъект.СчетОрганизации = СчетОрганизации;
	ДокументОбъект.ПеречислениеВБюджет    = Истина;
	ДокументОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		
	ПоРеглОтчету = (ТипЗнч(РегламентированныйОтчет) = Тип("ДокументСсылка.РегламентированныйОтчет"));
	
	Если ПоРеглОтчету Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ДокументОбъект, РегламентированныйОтчет);
	Иначе
		ДокументОбъект.Дата = ОбщегоНазначения.ПолучитьРабочуюДату();
		ТекПользователь = ОбщегоНазначения.ПолучитьЗначениеПеременной("глТекущийПользователь");
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, мВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДокументОбъект, СтрокаДанных);
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		ДокументОбъект.Организация, ДокументОбъект.СчетОрганизации, 
		ДокументОбъект.Контрагент, ДокументОбъект.СчетКонтрагента, Истина);
	
	ДокументОбъект.ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	ДокументОбъект.ИННПлательщика   = АвтоЗначенияРеквизитов.ИННПлательщика;
	// КПП плательщика из значений по умолчанию не заполняем - он может отличаться
	
	ДокументОбъект.ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
	ДокументОбъект.ИННПолучателя   = АвтоЗначенияРеквизитов.ИННПолучателя;
	ДокументОбъект.КПППолучателя   = АвтоЗначенияРеквизитов.КПППолучателя;
	
	ДокументОбъект.ПоказательНомера = "0";
	ДокументОбъект.ПоказательДаты   = ?(ПоРеглОтчету, РегламентированныйОтчет.ДатаПодписи, "0");
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ОчередностьПлатежа) Тогда
		ДокументОбъект.ОчередностьПлатежа = "4";
	КонецЕсли;
		
	Попытка
	
		ДокументОбъект.Записать();
		Возврат ДокументОбъект.Ссылка;
	
	Исключение
		
		ОбщегоНазначения.СообщитьОбОшибке("Не сформировано платежное поручение на " 
			+ СтрокаДанных.СуммаДокумента + " руб." + Символы.ПС + Символы.Таб + СтрокаДанных.НазначениеПлатежа);
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		
		Возврат Документы.ПлатежноеПоручение.ПустаяСсылка();
	
	КонецПопытки;

КонецФункции

# КонецЕсли

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();