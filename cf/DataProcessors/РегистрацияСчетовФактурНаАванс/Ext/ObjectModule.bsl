Перем мВалютаРегламентированногоУчета Экспорт; 
Перем Структура_ТипыДокументовАванса;
Перем мПорядокРегистрацииСчетовФактурНаАванс Экспорт;
Перем мКонецНалоговогоПериода Экспорт;
Перем мКонецНалоговогоПериодаПоДатам Экспорт;

//Пересчет суммы НДС и валютной суммы при изменении суммы регл.
Процедура ПересчетНДСиВалютнойСуммыПоСтроке(ТД, ПересчетВалютнойСуммы = Ложь, СуммаСтарая = 0) Экспорт
	
	ТД.СуммаНДС = 0;
	
	Если ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 100;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120 Тогда
		ТД.СуммаНДС = ТД.Сумма * 20 / 120;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110 Тогда
		ТД.СуммаНДС = ТД.Сумма * 10 / 110;
	ИначеЕсли ТД.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118 Тогда
		ТД.СуммаНДС = ТД.Сумма * 18 / 118;
	КонецЕсли;
	
	Если ПересчетВалютнойСуммы = Истина тогда 
		Если ТД.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			ТД.ВалютнаяСумма = ТД.Сумма;
		Иначе
			ТД.ВалютнаяСумма = ?(НЕ ЗначениеЗаполнено(СуммаСтарая) , 0, ТД.ВалютнаяСумма * ТД.Сумма / СуммаСтарая);
		КонецЕсли;
	КонецЕсли; 
	СуммаСтарая = ТД.Сумма;
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Заполнить" в диалоге формы
// Реализует алгоритм автоматического заполнения документа.
//
Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "") Экспорт
	
	ТаблицаРезультатов = Список.ВыгрузитьКолонки();
	
	ЗаполнитьСтрокиДокумента(ТаблицаРезультатов);
	
	Список.Загрузить(ТаблицаРезультатов);
	
	Если Не (Список.Количество() > 0) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения+Символы.ПС+" - авансы не обнаружены"
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Регистрация счетов-фактур на аванс не требуется:"+СтрокаСообщения);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокумент()

Процедура ЗаполнитьСтрокиДокумента(ТаблицаРезультатов) Экспорт
	
	мПорядокРегистрацииСчетовФактурНаАванс = УчетНДС.ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(Организация, КонецПериода);
	мКонецНалоговогоПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода);
	мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(КонецПериода), мКонецНалоговогоПериода);
	
	СоответствиеСтавок = Новый Соответствие();
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС10, Перечисления.СтавкиНДС.НДС10_110);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС18, Перечисления.СтавкиНДС.НДС18_118);
	СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС20, Перечисления.СтавкиНДС.НДС20_120);
	
	// По ставке НДС 0% СФ на аванс выписывается по расчетной ставке 18/118
	Если НачалоПериода>'20051231' Тогда
		// Регистрация авансов по реализации на экспорт не производится
	Иначе
		СоответствиеСтавок.Вставить(Перечисления.СтавкиНДС.НДС0, Перечисления.СтавкиНДС.НДС18_118);
	КонецЕсли; 
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецПериода, Неопределено, Организация);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ТекущийПорядокРегистрацииСчетовФактурНаАванс", мПорядокРегистрацииСчетовФактурНаАванс);
	Запрос.УстановитьПараметр("КонецНалоговогоПериода", УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, КонецПериода));
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);
	
	МассивСчетовАвансов = Новый Массив();
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным); // 62.02
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	МассивСчетовАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ); // 62.32
	// Движения по курсовым разницам не должны вызывать регистрации аванса
	Запрос.УстановитьПараметр("МассивСчетовАвансов", МассивСчетовАвансов);
	
	СубконтоСчетаРасчетов_ЕстьДР = Новый Массив();
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	СубконтоСчетаРасчетов_ЕстьДР.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	Запрос.УстановитьПараметр("СубконтоСчетаРасчетов_ЕстьДР",  СубконтоСчетаРасчетов_ЕстьДР);
	
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(КонецДня(КонецПериода), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоПериода));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Расчеты.Период КАК Период,
	|	Расчеты.Организация,
	|	Расчеты.Контрагент,
	|	Расчеты.ДоговорКонтрагента,
	|	Расчеты.ДокументОснование,
	|	Расчеты.ВалютаРасчетов,
	|	0 КАК СуммаАванса,
	|	0 КАК ВалютнаяСуммаАванса,
	|	Расчеты.КонечныйОстаток,
	|	Расчеты.НачальныйОстаток,
	|	Расчеты.ВалютныйКонечныйОстаток,
	|	Расчеты.ВалютныйНачальныйОстаток,
	|	Расчеты.РасчетыВУсловныхЕдиницах,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДокументАвансаДата,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаВыписки,
	|	Расчеты.ПорядокРегистрацииСчетовФактурНаАванс,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК КонецНалоговогоПериода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Период КАК Период,
	|		ХозрасчетныйОстатки.Организация КАК Организация,
	|		ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|		ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|		ХозрасчетныйОстатки.Субконто3 КАК ДокументОснование,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|					И (НЕ ХозрасчетныйОстатки.ВалютнаяСуммаКонечныйОстаток ЕСТЬ NULL )
	|				ТОГДА ХозрасчетныйОстатки.Валюта
	|			ИНАЧЕ &ВалютаРегламентированногоУчета
	|		КОНЕЦ КАК ВалютаРасчетов,
	|		-1 * ХозрасчетныйОстатки.СуммаКонечныйОстаток КАК КонечныйОстаток,
	|		-1 * ХозрасчетныйОстатки.СуммаНачальныйОстаток КАК НачальныйОстаток,
	|		-1 * ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|					И ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаНачальныйОстаток, 0) <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаНачальныйОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаНачальныйОстаток
	|		КОНЕЦ КАК ВалютныйНачальныйОстаток,
	|		-1 * ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|					И ЕСТЬNULL(ХозрасчетныйОстатки.ВалютнаяСуммаКонечныйОстаток, 0) <> 0
	|				ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаКонечныйОстаток
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаКонечныйОстаток
	|		КОНЕЦ КАК ВалютныйКонечныйОстаток,
	|		ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто2 КАК Справочник.ДоговорыКонтрагентов).РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Субконто2.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(УчетнаяПолитикаОрганизаций.ПорядокРегистрацииСчетовФактурНаАванс, &ТекущийПорядокРегистрацииСчетовФактурНаАванс)
	|			ИНАЧЕ ХозрасчетныйОстатки.Субконто2.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору
	|		КОНЕЦ КАК ПорядокРегистрацииСчетовФактурНаАванс
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|				&НачалоПериода,
	|				&КонецПериода,
	|				День,
	|				,
	|				Счет В
	|					(ВЫБРАТЬ
	|						Хозрасчетный.Ссылка
	|					ИЗ
	|						ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|					ГДЕ
	|						Хозрасчетный.Ссылка В ИЕРАРХИИ (&МассивСчетовАвансов)
	|						И Хозрасчетный.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСконтрагентами)),
	|				&СубконтоСчетаРасчетов_ЕстьДР,
	|				Организация = &Организация) КАК ХозрасчетныйОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|			ПО (УчетнаяПолитикаОрганизаций.Организация = ХозрасчетныйОстатки.Организация)
	|				И (УчетнаяПолитикаОрганизаций.Период В
	|					(ВЫБРАТЬ
	|						МАКСИМУМ(УчетнаяПолитикаОрганизаций.Период) КАК Период
	|					ИЗ
	|						РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитикаОрганизаций
	|					ГДЕ
	|						ХозрасчетныйОстатки.Период >= УчетнаяПолитикаОрганизаций.Период
	|						И УчетнаяПолитикаОрганизаций.Организация = ХозрасчетныйОстатки.Организация))
	|	ГДЕ
	|		(ХозрасчетныйОстатки.СуммаКонечныйОстаток < 0
	|				ИЛИ ХозрасчетныйОстатки.СуммаНачальныйОстаток < 0)
	|		И ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Документ.ДокументРасчетовСКонтрагентом
	|					ТОГДА ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто3 КАК Документ.ДокументРасчетовСКонтрагентом).ДокументОснование = ЗНАЧЕНИЕ(Документ.ВводНачальныхОстатков.ПустаяСсылка)
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ) КАК Расчеты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Расчеты.ПорядокРегистрацииСчетовФактурНаАванс = ЗНАЧЕНИЕ(Перечисление.ПорядокРегистрацииСчетовФактурНаАванс.НеРегистрироватьСчетаФактурыНаАвансы)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";

	Если Структура_ТипыДокументовАванса.Количество()>0 Тогда
		ОграничениеТиповДокументов = "";
		
		Для Каждого ТипДокументовАванса Из Структура_ТипыДокументовАванса Цикл
			ОграничениеТиповДокументов = ОграничениеТиповДокументов + ?(ПустаяСтрока(ОграничениеТиповДокументов), " И ( ", " ИЛИ ") + "Субконто3 ССЫЛКА Документ." + ТипДокументовАванса.Ключ;
		КонецЦикла; 
		
		ОграничениеТиповДокументов = ОграничениеТиповДокументов+") ";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация", "Организация = &Организация" + ОграничениеТиповДокументов);
	КонецЕсли; 
		
	ТаблицаАвансовТекущая = Запрос.Выполнить().Выгрузить();
	ДобавитьДатуДокументаКРезультатуЗапроса(ТаблицаАвансовТекущая,"ДокументОснование","ДокументАвансаДата");
	
	Авансы = ТаблицаАвансовТекущая.Скопировать(, "ДокументОснование, ДоговорКонтрагента");
	Авансы.Свернуть("ДокументОснование, ДоговорКонтрагента");
		
	ТаблицаАвансовТекущая.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));
	ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансовТекущая);
	
	ТаблицаАвансовТекущая.Индексы.Добавить("ДокументОснование");
	ТаблицаАвансов = ТаблицаАвансовТекущая.СкопироватьКолонки();
	
	ПоискПартии = Новый Структура("ДокументОснование, ДоговорКонтрагента");
		
	Для	Каждого Аванс из Авансы Цикл
		
		ЗаполнитьЗначенияСвойств(ПоискПартии, Аванс);
		Таблица = ТаблицаАвансовТекущая.НайтиСтроки(ПоискПартии);
		
		ПорядокРегистрацииСчетовФактурНаАванс = Таблица[0].ПорядокРегистрацииСчетовФактурНаАванс;
		ДатаПоступленияАванса = Таблица[0].ДокументАвансаДата;
		//Вычислим крайнюю дату зачета аванса
		Если ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней Тогда
			Если КонецДня(ДатаПоступленияАванса+345600) > КонецКвартала(ДатаПоступленияАванса) Тогда
				ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
			Иначе
				ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса+345600);
			КонецЕсли;
		ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца Тогда
			ДатаЗачетаАванса = КонецМесяца(ДатаПоступленияАванса);
		ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода Тогда
			ДатаЗачетаАванса = КонецКвартала(ДатаПоступленияАванса);
		ИначеЕсли ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы Тогда
			ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
		Иначе
			ДатаЗачетаАванса = КонецДня(ДатаПоступленияАванса);
		КонецЕсли;				
		
		Если ДатаЗачетаАванса < НачалоПериода Тогда
			ДатаЗачетаАванса = НачалоПериода;
		КонецЕсли;
		
		Для	Каждого Строка из Таблица Цикл
			Если ДатаЗачетаАванса > КонецДня(Строка.Период) Тогда
				Продолжить;
			ИначеЕсли КонецДня(ДатаЗачетаАванса) = КонецДня(Строка.Период) 
				И Строка.КонечныйОстаток = 0 Тогда
				Продолжить;
			Иначе
				Если КонецДня(ДатаЗачетаАванса) = КонецДня(Строка.Период) Тогда
					СуммаАванса = Строка.КонечныйОстаток;
					ВалютнаяСуммаАванса = Строка.ВалютныйКонечныйОстаток;
				Иначе
					СуммаАванса = Строка.НачальныйОстаток;
					ВалютнаяСуммаАванса = Строка.ВалютныйНачальныйОстаток;
				КонецЕсли;
				Если СуммаАванса <> 0 Тогда
					Если Строка.ДатаВыписки = '00010101' Тогда
						Если ДатаЗачетаАванса > Строка.Период Тогда
							Строка.ДатаВыписки = Строка.Период;
						Иначе
							Строка.ДатаВыписки = ДатаЗачетаАванса;
						КонецЕсли;
					КонецЕсли;
					Строка.КонецНалоговогоПериода = КонецКвартала(Строка.ДокументАвансаДата);
					
					Если Не ЗначениеЗаполнено(Строка.СчетФактура) 
						Или НачалоДня(Строка.ДатаВыписки) >= НачалоДня(НачалоПериода) Тогда
						НоваяСтрока = ТаблицаАвансов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						НоваяСтрока.СуммаАванса = СуммаАванса;
						НоваяСтрока.ВалютнаяСуммаАванса = ВалютнаяСуммаАванса;
					КонецЕсли;
					Прервать;
				КонецЕсли;
			КонецЕсли
		КонецЦикла;
		
	КонецЦикла;
	
	НомерСтроки = 1;
	
	Если ТаблицаАвансов <> Неопределено 
		И ТаблицаАвансов.Количество() <> 0 Тогда
		
		ТаблицаАвансов.Сортировать("ДокументАвансаДата Возр");
		
		Для Каждого Выборка Из ТаблицаАвансов Цикл
			
			мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(Выборка.ДокументАвансаДата), Выборка.КонецНалоговогоПериода);
			
			ДокАванса = Выборка.ДокументОснование;
			ДокАвансаМетаданные = ДокАванса.Метаданные();
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВалютаРасчетов) или Выборка.РасчетыВУсловныхЕдиницах Тогда
				//Незаполненное значение приравнивается к валюте регл. учета
				ВалютаДокумента = мВалютаРегламентированногоУчета;	
			Иначе
				ВалютаДокумента = Выборка.ВалютаРасчетов;     
			КонецЕсли; 
			
			Если ЗначениеЗаполнено(ДокАванса) 
				И (ДокАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено
					Или ТипЗнч(ДокАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) Тогда
				
				ТаблицаПоСтавкам = Новый ТаблицаЗначений();
				ТаблицаПоСтавкам.Колонки.Добавить("СтавкаНДС",Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
				ТаблицаПоСтавкам.Колонки.Добавить("Сумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15,2));
				ТаблицаПоСтавкам.Колонки.Добавить("СчетНаОплату", Новый ОписаниеТипов("ДокументСсылка.СчетНаОплатуПокупателю"));
				
				ЕстьСчетНаОплату = ДокАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетНаОплату") <> Неопределено;
				
				Если ТипЗнч(ДокАванса) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
					
					Для Каждого СтрПлатежа Из ДокАванса.ДенежныеСредства Цикл
						Если СтрПлатежа.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Аванс Тогда
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.Сумма;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.Сумма;
						КонецЕсли;
					КонецЦикла;
					
				Иначе
					
					ЕстьСчетНаОплату = ДокАвансаМетаданные.ТабличныеЧасти.РасшифровкаПлатежа.Реквизиты.Найти("СчетНаОплату") <> Неопределено;
					
					Для Каждого СтрПлатежа Из ДокАванса.РасшифровкаПлатежа Цикл
						Если СтрПлатежа.ДоговорКонтрагента = Выборка.ДоговорКонтрагента Тогда
							
							Если СоответствиеСтавок[СтрПлатежа.СтавкаНДС] = Неопределено Тогда
								ТекСтавкаНДС = СтрПлатежа.СтавкаНДС;
							Иначе
								ТекСтавкаНДС = СоответствиеСтавок[СтрПлатежа.СтавкаНДС];
							КонецЕсли; 
							СтрокаПоСтавке = ТаблицаПоСтавкам.Добавить();
							СтрокаПоСтавке.СтавкаНДС = ТекСтавкаНДС;
							СтрокаПоСтавке.Сумма = СтрПлатежа.СуммаПлатежа;
							СтрокаПоСтавке.ВалютнаяСумма = СтрПлатежа.СуммаПлатежа;
							Если ЕстьСчетНаОплату Тогда
								СтрокаПоСтавке.СчетНаОплату = СтрПлатежа.СчетНаОплату;
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
				ТаблицаПоСтавкам.Свернуть("СтавкаНДС, СчетНаОплату", "Сумма, ВалютнаяСумма");
				
				//Распределение суммы рег учета
				МассивСумм = ОбщегоНазначения.РаспределитьПропорционально(Выборка.СуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма"));
				Если не МассивСумм = Неопределено Тогда
					ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"Сумма");
				Иначе
					МассивСумм = ТаблицаПоСтавкам.ВыгрузитьКолонку("Сумма");
				КонецЕсли; 
				
				//Распределение валютной суммы
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					Если не МассивСумм = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				Иначе
					МассивСуммВал = ОбщегоНазначения.РаспределитьПропорционально(Выборка.ВалютнаяСуммаАванса,ТаблицаПоСтавкам.ВыгрузитьКолонку("ВалютнаяСумма"));
					Если не МассивСуммВал = Неопределено Тогда
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСуммВал,"ВалютнаяСумма");
					Иначе
						ТаблицаПоСтавкам.ЗагрузитьКолонку(МассивСумм,"ВалютнаяСумма");
					КонецЕсли; 
				КонецЕсли; 
				
				Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
					
					Если Выборка.ДокументАвансаДата >= '20060101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
						// НДС с авансов под экспортные поставки не начисляется с 2006 года
						Продолжить;
					ИначеЕсли Выборка.ДокументАвансаДата >= '20080101' 
						И СтрокаПоСтавке.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
						// НДС с авансов под необлагаемую НДС реализацию не начисляется с 2008 года
						Продолжить;
					КонецЕсли;
					
					СтрокаТП = ТаблицаРезультатов.Добавить();
					СтрокаТП.НомерСтроки		= НомерСтроки;
					СтрокаТП.Дата				= Выборка.ДатаВыписки;
					СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
					СтрокаТП.Контрагент			= Выборка.Контрагент;
					СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
					СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
					СтрокаТП.СчетНаОплату		= СтрокаПоСтавке.СчетНаОплату;
					
					СтрокаТП.ВалютаДокумента	= ВалютаДокумента;
					
					СтрокаТП.Сумма				= СтрокаПоСтавке.Сумма;
					СтрокаТП.ВалютнаяСумма		= СтрокаПоСтавке.ВалютнаяСумма;
					СтрокаТП.СтавкаНДС			= СтрокаПоСтавке.СтавкаНДС;
					СтрокаТП.СчетФактура		= Выборка.СчетФактура;
					СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
					
					ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
					ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
					
					НомерСтроки = НомерСтроки + 1;
					
				КонецЦикла; // Для Каждого СтрокаПоСтавке Из ТаблицаПоСтавкам Цикл
				
			Иначе // Если ДокАвансаМетаданные).ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента)
					И Выборка.ДоговорКонтрагента.РеализацияНаЭкспорт Тогда
					// В случае, если в договоре установлен флаг "Реализация на экспорт", 
					// то счет-фактура не создается, так как при реализации на экспорт используется ставка 0%
					// и создавать счет-фактуру нет необходимости
					Продолжить;
				КонецЕсли;
				
				СтрокаТП = ТаблицаРезультатов.Добавить();
				СтрокаТП.НомерСтроки		= НомерСтроки;
				СтрокаТП.Дата				= Выборка.ДатаВыписки;
				СтрокаТП.ДатаДокументаОснования	= Выборка.ДокументАвансаДата;
				СтрокаТП.Контрагент			= Выборка.Контрагент;
				СтрокаТП.ДоговорКонтрагента	= Выборка.ДоговорКонтрагента;
				СтрокаТП.ДокументОснование	= Выборка.ДокументОснование;
				
				СтрокаТП.ВалютаДокумента	= ВалютаДокумента;
				
				СтрокаТП.Сумма				= Выборка.СуммаАванса;
				СтрокаТП.СтавкаНДС			= Перечисления.СтавкиНДС.НДС18_118;
				
				Если НЕ ЗначениеЗаполнено(Выборка.ВалютнаяСуммаАванса) или ВалютаДокумента  = мВалютаРегламентированногоУчета Тогда
					СтрокаТП.ВалютнаяСумма	= СтрокаТП.Сумма;
				Иначе
					СтрокаТП.ВалютнаяСумма	= Выборка.ВалютнаяСуммаАванса;
				КонецЕсли;
				СтрокаТП.СчетФактура		= Выборка.СчетФактура;
				СтрокаТП.ПорядокРегистрацииСчетовФактурНаАванс	= Выборка.ПорядокРегистрацииСчетовФактурНаАванс;
				
				ПересчетНДСиВалютнойСуммыПоСтроке(СтрокаТП);
				ПроверитьДатуВыпискиПоСтроке(СтрокаТП);
				
				СтрокаТП.НомерСтроки		= НомерСтроки;

			КонецЕсли; //Если ДокАвансаМетаданные.ТабличныеЧасти.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
			
		КонецЦикла; // Пока Выборка.Следующий() Цикл
	КонецЕсли;
	
	ОпределитьНаличиеНереализованныхОтгрузок(ТаблицаРезультатов);
		
КонецПроцедуры

Функция ДобавитьДатуДокументаКРезультатуЗапроса(Результат,КолонкаДокумента,КолонкаСДатой)

	КэшПоТипам = Новый Соответствие;

		Для каждого СтрокаТаблицы из Результат Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КолонкаДокумента]) тогда 
				Продолжить;
			КонецЕсли;
			
			ТипТекущегоДокумента = ТипЗнч(СтрокаТаблицы[КолонкаДокумента]);
			МассивТипа = КэшПоТипам[ТипТекущегоДокумента];
			Если МассивТипа = Неопределено Тогда
				МассивТипа = Новый Массив;
				КэшПоТипам.Вставить(ТипТекущегоДокумента, МассивТипа);
			КонецЕсли;
			МассивТипа.Добавить(СтрокаТаблицы[КолонкаДокумента]);
		КонецЦикла;
	
	Если КэшПоТипам.Количество()=0 тогда
		Возврат Результат;
	КонецЕсли;
	
	Запрос = новый запрос;

	Для Каждого КлючИЗначение ИЗ КэшПоТипам Цикл
		ИмяМетаданных = Метаданные.НайтиПоТипу(КлючИЗначение.Ключ).Имя;

		Запрос.Текст = Запрос.Текст+
		?(Запрос.Текст="","",
		" 
		|Объединить все")+
		"
		|	ВЫБРАТЬ
		|		Док.Ссылка Как Ссылка,
		|		Док.Дата
		|	ИЗ Документ."+ИмяМетаданных+" КАК Док
		|	Где Док.ссылка в  (&ДокументыТипа_"+ИмяМетаданных+")";
		Запрос.УстановитьПараметр("ДокументыТипа_"+ИмяМетаданных, КлючИЗначение.Значение);
		
	КонецЦикла;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);

		НайденныеСтроки = Результат.НайтиСтроки(ПараметрыОтбора);
		для каждого строка из НайденныеСтроки цикл
			строка[КолонкаСДатой] = Выборка.Дата;
		Конеццикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ДобавитьДатуДокументаКРезультатуЗапроса()

Процедура ПроверитьДатуВыпискиПоСтроке(СтрокаТаблицы)
	
	КонецНалоговогоПериода = ПолучитьКонецНалоговогоПериодаПоДате(СтрокаТаблицы.ДатаДокументаОснования);
	
	Если СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы 
		И (СтрокаТаблицы.Дата > КонецНалоговогоПериода
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		
		ОбщегоНазначения.СообщитьИнформациюПользователю("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(?(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400 > КонецНалоговогоПериода, КонецНалоговогоПериода, СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400), "ДФ=dd.MM.yyyy"));
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеПятиДней 
		И (КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода)
		Или СтрокаТаблицы.Дата - СтрокаТаблицы.ДатаДокументаОснования > 4 * 86400) Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + ?(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400) > КонецМесяца(КонецНалоговогоПериода), 
																																							Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"), Формат(СтрокаТаблицы.ДатаДокументаОснования + 4 * 86400, "ДФ=dd.MM.yyyy")));
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеМесяца 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования) Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецМесяца(СтрокаТаблицы.ДатаДокументаОснования), "ДФ=dd.MM.yyyy"));
	ИначеЕсли СтрокаТаблицы.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.КромеЗачтенныхВТечениеНалоговогоПериода 
		И КонецМесяца(СтрокаТаблицы.Дата) > КонецМесяца(КонецНалоговогоПериода) Тогда
		ОбщегоНазначения.СообщитьИнформациюПользователю("Строка №" + (СтрокаТаблицы.НомерСтроки) + ": счет-фактура должен быть выписан не позднее " + Формат(КонецНалоговогоПериода, "ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьРанееВыписанныеСчетаФактуры(ТаблицаАвансов)
	
	Если ТаблицаАвансов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СчетФактураВыданный.Ссылка КАК СчетФактура,
			|	СчетФактураВыданный.Ссылка.Дата КАК ДатаВыписки,
			|	СчетФактураВыданный.Ссылка.ДоговорКонтрагента,
			|	СчетФактураВыданный.ДокументОснование
			|ИЗ
			|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
			|ГДЕ
			|	СчетФактураВыданный.ДокументОснование В(&ДокументыОснования)
			|	И СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
			|	И СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("ДокументыОснования", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаАвансов.ВыгрузитьКолонку("ДокументОснование"), Истина));
		
		СФПоДокументам = Запрос.Выполнить().Выгрузить();
		
		Если СФПоДокументам.Количество()>0 Тогда
			
			СтруктураОтбора = Новый Структура("ДокументОснование, ДоговорКонтрагента");
			Для Каждого СФ Из СФПоДокументам Цикл
				ЗаполнитьЗначенияСвойств(СтруктураОтбора, СФ);
				СтрокиОтбора = ТаблицаАвансов.НайтиСтроки(СтруктураОтбора);
				Для Каждого СтрокаОтбора Из СтрокиОтбора Цикл
					СтрокаОтбора.СчетФактура = СФ.СчетФактура;
					СтрокаОтбора.ДатаВыписки = СФ.ДатаВыписки;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьНаличиеНереализованныхОтгрузок(ТаблицаАвансов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСРасчетыСПокупателямиОстатки.Покупатель,
		|	НДСРасчетыСПокупателямиОстатки.ДоговорКонтрагента
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(
		|		&Период,
		|		Организация = &Организация
		|		    И Покупатель В (&СписокПокупателей)
		|		    И ДоговорКонтрагента В (&СписокДоговоров)
		|		    И СчетФактура ССЫЛКА Документ.РеализацияТоваровУслуг
		|		    И СчетФактура.ВидОперации = &ОперацияОтгрузка) КАК НДСРасчетыСПокупателямиОстатки";
				   
	Запрос.УстановитьПараметр("Период", Новый Граница(КонецПериода, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокПокупателей", ТаблицаАвансов.ВыгрузитьКолонку("Контрагент"));
	Запрос.УстановитьПараметр("СписокДоговоров", ТаблицаАвансов.ВыгрузитьКолонку("ДоговорКонтрагента"));
	Запрос.УстановитьПараметр("ОперацияОтгрузка", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = РезультатЗапроса.Выгрузить();
	
	Сообщить("Некоторые авансы могут быть отнесены к отгрузкам без перехода права собственности, но не отражена реализация в указанном периоде.
			|Возможно по данным суммам аванса не требуется начислять НДС, так как такая оплата не является предварительной для целей НДС:", СтатусСообщения.Важное);

	Для Каждого СтрокаРезультата Из РезультатЗапроса Цикл
		Сообщить("Контрагент <" + СтрокаРезультата.Покупатель + ">, договор <" + СтрокаРезультата.ДоговорКонтрагента + ">", СтатусСообщения.Важное);
	КонецЦикла;		
	
КонецПроцедуры

Процедура СформироватьСчетаФактуры(НеиспользуемыеСчетаФактуры, ЕстьОшибки = ложь) Экспорт
	
	ИспользоватьРанееОбнаруженныеДокументы = (НеиспользуемыеСчетаФактуры.Количество()>0);
	
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	МассивДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("ДокументОснование"));
	МассивДоговоров = Новый Массив;
	
	СтруктураОтбораДокумент = Новый Структура("ДокументОснование");
	СтруктураОтбораДоговор = Новый Структура("ДокументОснование, ДоговорКонтрагента");
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");			
		
	Для Каждого Документ Из МассивДокументов Цикл
		
		СтруктураОтбораДокумент.ДокументОснование = Документ;
		СтрокиПоДокументу = Список.НайтиСтроки(СтруктураОтбораДокумент);
		
		МассивДоговоров.Очистить();
		Для Каждого СтрокаОтбора Из СтрокиПоДокументу Цикл
			МассивДоговоров.Добавить(СтрокаОтбора.ДоговорКонтрагента);
		КонецЦикла;
		МассивДоговоров = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		ТЧАвансыСтарые = Новый Соответствие;
		
		Для Каждого Договор Из МассивДоговоров Цикл
			СтруктураОтбораДоговор.ДокументОснование = Документ;
			СтруктураОтбораДоговор.ДоговорКонтрагента = Договор;
			СтрокиПоДоговору = Список.НайтиСтроки(СтруктураОтбораДоговор);
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
				
				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если не СтрокаОтбораДоговор.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаОтбораДоговор.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					ИначеЕсли ИспользоватьРанееОбнаруженныеДокументы тогда
						СчФ = НеиспользуемыеСчетаФактуры.Найти(Ложь,"Использован");
						Если СчФ = Неопределено Тогда
							ИспользоватьРанееОбнаруженныеДокументы = Ложь;
							СчФ  = Документы.СчетФактураВыданный.СоздатьДокумент();
							СчФ.Ответственный = Ответственный;
						Иначе
							СчФ.Использован = Истина;
							СчФ = СчФ.Ссылка.ПолучитьОбъект();
						КонецЕсли; 
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
					КонецЕсли; 
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаОтбораДоговор);
					СчФ.Организация = Организация;
					СчФ.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НаАванс;
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					
					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаОтбораДоговор.ДокументОснование;
					
					СчФ.СуммаДокумента = СтрокаОтбораДоговор.ВалютнаяСумма;
					
					СчФ.Авансы.Очистить();
					
					СчФ.ПометкаУдаления = Ложь;
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					
					ТипОснования = ТипЗнч(СтрокаОтбораДоговор.ДокументОснование);
					
					СчФ.ДатаНомерДокументовОплаты.Очистить();
					
					Если ТипОснования = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = СчФ.ДокументОснование.НомерВходящегоДокумента;
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.ДатаВходящегоДокумента;
						
					ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
						СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СчФ.ДокументОснование);
						СчФ.ДатаПлатежноРасчетногоДокумента =  СчФ.ДокументОснование.Дата;
					Иначе
						СчФ.НомерПлатежноРасчетногоДокумента = "";
						СчФ.ДатаПлатежноРасчетногоДокумента =  Неопределено;
					КонецЕсли;
					
					СтрокаПРД = СчФ.ДатаНомерДокументовОплаты.Добавить();
					СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
					СтрокаПРД.НомерПлатежноРасчетногоДокумента	= СчФ.НомерПлатежноРасчетногоДокумента;
				Иначе
					СчФ.Сумма = СчФ.Сумма + СтрокаОтбораДоговор.Сумма;
					СчФ.СуммаНДС = СчФ.СуммаНДС + СтрокаОтбораДоговор.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаОтбораДоговор.ВалютнаяСумма;
				КонецЕсли;
				
				СуммаПоСтроке = СтрокаОтбораДоговор.Сумма;
				СуммаНДСПоСтроке = СтрокаОтбораДоговор.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаОтбораДоговор.СтавкаНДС;
				Если ЗначениеЗаполнено(СтрокаОтбораДоговор.СчетНаОплату) Тогда
					ТаблицаАвансов = СчФ.ПолучитьТаблицуАвансовПоСчетуНаОплату(СуммаПоСтроке, СуммаНДСПоСтроке, СтавкаНДСПоСтроке, СтрокаОтбораДоговор.СчетНаОплату);
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаАвансов, СчФ.Авансы);
				Иначе
					Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
						Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
							Если СуммаПоСтроке = 0 Тогда
								Прервать;
							КонецЕсли;
							Если СтрокаСтарая.Сумма = 0 Тогда
								Продолжить;
							КонецЕсли;
							Если СтрокаОтбораДоговор.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
								НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
								НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
								НоваяСтрокаПоСуммам.Содержание = СтрокаСтарая.Содержание;
								НоваяСтрокаПоСуммам.Сумма = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
								НоваяСтрокаПоСуммам.СуммаНДС = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
								НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
								СуммаПоСтроке = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
								СуммаНДСПоСтроке = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
								СтрокаСтарая.Сумма = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
								СтрокаСтарая.СуммаНДС = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;								
							КонецЕсли;
						КонецЦикла;
						Если СуммаПоСтроке <> 0 Тогда
							НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Сумма = СуммаПоСтроке;
							НоваяСтрокаПоСуммам.СуммаНДС = СуммаНДСПоСтроке;
							НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
							НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
						КонецЕсли;
					Иначе
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаОтбораДоговор);
						НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					КонецЕсли;					
				КонецЕсли;
				
			КонецЦикла;
			
			СообщениеОбОшибке = СчФ.ПроверитьВозможностьЗаписиСФ(ОшибкаФормирования);
			Если ОшибкаФормирования Тогда
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке("Строка "+Строка(СтрокаОтбораДоговор.НомерСтроки)+", не выписан счет-фактура на аванс."+Символы.ПС+СообщениеОбОшибке);
					СтрокаОтбораДоговор.СФсформирован = ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли; 
				
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					Сообщить(?(НовыйСФ,"Выписан","Обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаОтбораДоговор.НомерСтроки)+" № " + СчФ.Номер + " от " + СчФ.Дата);
					СтрокаОтбораДоговор.СФсформирован = истина;
					СтрокаОтбораДоговор.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке(?(НовыйСФ,"Не выписан","Не обновлен")+" счет-фактура на аванс по строке "+Строка(СтрокаОтбораДоговор.НомерСтроки));
					СтрокаОтбораДоговор.СФсформирован = ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЦикла;   		
		
	КонецЦикла;
			
КонецПроцедуры

Функция ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация
	|	И (НЕ СчетФактураВыданный.Ссылка В (&СФдляОбновления))
	|	И (НЕ СчетФактураВыданный.СформированПриВводеНачальныхОстатковНДС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.Ссылка.Дата,
	|	СчетФактураВыданный.Ссылка.Номер";

	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	Запрос.УстановитьПараметр("СФдляОбновления", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина));

	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	
	Возврат Результат;

КонецФункции // ОпределитьНаличиеНеиспользуемыхСчетовФактурЗаПериод()

Функция ПолучитьКонецНалоговогоПериодаПоДате(ДатаПериода) Экспорт
	
	Если мКонецНалоговогоПериодаПоДатам[КонецМесяца(ДатаПериода)] = Неопределено Тогда
		мКонецНалоговогоПериодаПоДатам.Вставить(КонецМесяца(ДатаПериода), УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, ДатаПериода));
	КонецЕсли;
	
	Возврат мКонецНалоговогоПериодаПоДатам[КонецМесяца(ДатаПериода)];
	
КонецФункции

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

Массив_ТипыДокументовАванса = Метаданные.РегистрыНакопления.НДСсАвансов.Измерения.СчетФактура.Тип.Типы();
ОписаниеТипов_ДокументыРасчетовСПокупателями = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения
;
Структура_ТипыДокументовАванса = Новый Структура();
Для каждого ТипДокументаАванса Из Массив_ТипыДокументовАванса Цикл
	Если ТипДокументаАванса = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") тогда
		Продолжить;
	ИначеЕсли ОписаниеТипов_ДокументыРасчетовСПокупателями.СодержитТип(ТипДокументаАванса) Тогда
		Структура_ТипыДокументовАванса.Вставить(Метаданные.НайтиПоТипу(ТипДокументаАванса).Имя,ТипДокументаАванса);
	КонецЕсли; 
КонецЦикла;

мКонецНалоговогоПериодаПоДатам = Новый Соответствие;
