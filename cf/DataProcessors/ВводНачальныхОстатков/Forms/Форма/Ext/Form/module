Перем МакетПомощника;
Перем УСН, УСН_ДР, Предприниматель, ОСН;
Перем УчетнаяПолитикаНеЗадана;
Перем ТаблицаСчетовРазделовУчета;
Перем мЕстьДокументы;
Перем КартинкаСчетовА, КартинкаСчетовП, КартинкаСчетовАП;
Перем КартинкаРасходов;
Перем мУпрощенныйУчетНДС, мСложныйУчетНДС;

Процедура УстановитьТипОрганизации()
	
	//Учетную политику получаем на 1 день позже.
	Если ДатаВводаОстатков <> '00010101' Тогда
		УчетнаяПолитикаНеЗадана = Ложь;
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаВводаОстатков + 24*60*60, УчетнаяПолитикаНеЗадана, Организация);
		Если УчетнаяПолитикаНеЗадана Тогда
			мУпрощенныйУчетНДС	= Ложь; 
			мСложныйУчетНДС		= Ложь;
		Иначе
			мУпрощенныйУчетНДС	= УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, ДатаВводаОстатков+24*60*60);
			мСложныйУчетНДС		= УчетнаяПолитика.СложныйУчетНДС И Не УчетнаяПолитика.УСН И Не УчетнаяПолитика.УпрощенныйУчетНДС;
		КонецЕсли;
		
		УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, ДатаВводаОстатков+24*60*60);
		УСН_ДР = УСН И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, ДатаВводаОстатков+24*60*60));
		Предприниматель = (Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ УСН);
		ОСН = НЕ УСН И НЕ Предприниматель;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДатуНачалаУчета()

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		ДатаВводаОстатков = МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков;
	Иначе
		ДатаВводаОстатков = '00010101';
	КонецЕсли;
	
КонецПроцедуры // ПолучитьДатуНачалаУчета()

Процедура УстановитьДатуНачалаУчета(ДатаНачалаУчета)
	
	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если НЕ МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Организация = Организация;
	КонецЕсли;
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаНачалаУчета;
	ПерезаписатьДокументыНаНовуюДату(ДатаНачалаУчета);
	МенеджерЗаписиРегистра.Записать();
	ПолучитьДатуНачалаУчета();
	
КонецПроцедуры // УстановитьДатуНачалаУчета()

Процедура ПерезаписатьДокументыНаНовуюДату(ДатаНачалаУчета, ПодсчитатьКоличество = Ложь)

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	ВводНачальныхОстатков.Ссылка,
	                           |	ВводНачальныхОстатков.Организация,
	                           |	ВводНачальныхОстатков.Проведен
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация
	                           |	И ВводНачальныхОстатков.ОтражатьВБухгалтерскомУчете = ИСТИНА
	                           |	И ВводНачальныхОстатков.ОтражатьВНалоговомУчете = ИСТИНА
	                           |	И ВводНачальныхОстатков.ОтражатьПоСпециальнымРегистрам = ИСТИНА";
	
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	СписокДокументов = ЗапросПоДокументам.Выполнить().Выгрузить();
	
	Если СписокДокументов.Количество() = 0 Тогда
		мЕстьДокументы = Ложь;
		Возврат;
	Иначе
		мЕстьДокументы = Истина;
	КонецЕсли;
	
	Если ПодсчитатьКоличество Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		ФормаПрогрессора.НаименованиеОбработкиДанных = "Перезапись ранее созданных документов";
	#КонецЕсли
	
	Если ФормаПрогрессора <> Неопределено Тогда
		ФормаПрогрессора.Значение = 0;
		ФормаПрогрессора.МаксимальноеЗначение = СписокДокументов.Количество();
		ФормаПрогрессора.КомментарийОбработкиДанных = "Перезапись документов";
		ФормаПрогрессора.Открыть();
	КонецЕсли;	
	
	НачатьТранзакцию();
	
	Сообщить("Изменение даты введенных ранее документов.");
	Сообщить("------------------------------------------");
	
	Попытка
		Для Каждого ДокументВводаОстатков Из СписокДокументов Цикл
			
			Если ФормаПрогрессора <> Неопределено Тогда
				ФормаПрогрессора.КомментарийЗначения = ДокументВводаОстатков.Ссылка;
				ФормаПрогрессора.Значение = ФормаПрогрессора.Значение + 1;
			КонецЕсли;
			
			ДокументОбъект = ДокументВводаОстатков.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.Дата = ДатаНачалаУчета;
			РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, ДокументВводаОстатков.Ссылка.Дата);
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				Сообщить("Документ: " + ДокументВводаОстатков.Ссылка + " записан и перепроведен.");
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
				Сообщить("Документ: " + ДокументВводаОстатков.Ссылка + " записан.");
			КонецЕсли;
		КонецЦикла;
		
		Сообщить("------------------------------------------");
	Исключение
		ФормаПрогрессора.Закрыть();
		ОтменитьТранзакцию();
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	ФормаПрогрессора.Закрыть();
	
КонецПроцедуры

Процедура СформироватьСписокРазделов()
	
	ТаблицаСчетовРазделовУчета = Новый ТаблицаЗначений;
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаГруппы");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("Счета");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("СчетаИсключения");
	ТаблицаСчетовРазделовУчета.Колонки.Добавить("РазделУчета");
	
	СписокСчетовРазделовУчета = ПолучитьМакет("СписокСчетовРазделовУчета");
	ТаблицаСоответствий = СписокСчетовРазделовУчета.ПолучитьОбласть("Строки|Колонки");
	Для Строка = 1 По ТаблицаСоответствий.ВысотаТаблицы Цикл
		НоваяСтрока = ТаблицаСчетовРазделовУчета.Добавить();
		НоваяСтрока.СчетаГруппы		= ТаблицаСоответствий.Область("R" + Строка + "C1").Текст;
		НоваяСтрока.Счета			= ТаблицаСоответствий.Область("R" + Строка + "C2").Текст;
		НоваяСтрока.СчетаИсключения	= ТаблицаСоответствий.Область("R" + Строка + "C3").Текст;
		ИмяРазделаУчета				= ТаблицаСоответствий.Область("R" + Строка + "C4").Текст;
		НоваяСтрока.РазделУчета		= Перечисления.РазделыУчетаДляВводаОстатков[ИмяРазделаУчета];
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьФорму(ОбновитьПодсказку = Ложь)
	
	УстановитьТипОрганизации();
	
	УстановитьВидимость();
	
	УстановитьДоступность();
	
	ПолучитьСальдоПоСчетам();
	
	Если Предприниматель ИЛИ УСН_ДР Тогда
		ПолучитьСальдоПрочихРасходов();
	КонецЕсли;
	
	Если НЕ УСН И НЕ мУпрощенныйУчетНДС Тогда
		ПолучитьСальдоНДС();
	КонецЕсли;
	
	Если ОбновитьПодсказку Тогда
		ПоказатьПодсказку();
	КонецЕсли;
	
	Если ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ОсновныеСчетаПланаСчетов Тогда
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.СписокСчетов;
	ИначеЕсли ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ЗабалансовыеСчета Тогда
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.СписокСчетовЗаб;
	ИначеЕсли ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ПрочиеНепризнанныеРасходыУСНИИП Тогда
		Если ЭлементыФормы.ПанельСчетов.Страницы.ПрочиеНепризнанныеРасходыУСНИИП.Видимость Тогда
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.ПрочиеРасходы;
		Иначе
			ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ОсновныеСчетаПланаСчетов;
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.СписокСчетов;
		КонецЕсли;
	ИначеЕсли ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.НДСПоРеализации Тогда
		Если ЭлементыФормы.ПанельСчетов.Страницы.НДСПоРеализации.Видимость Тогда
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.НДСПоРеализации;
		Иначе
			ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ОсновныеСчетаПланаСчетов;
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.СписокСчетов;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	ДоступностьПанелей = ЗначениеЗаполнено(Организация) И НЕ УчетнаяПолитикаНеЗадана И ДатаВводаОстатков <> '00010101';
	ЭлементыФормы.КоманднаяПанель1.Доступность = ДоступностьПанелей;
	ЭлементыФормы.КоманднаяПанель2.Доступность = ДоступностьПанелей;
	ЭлементыФормы.КоманднаяПанель3.Доступность = ДоступностьПанелей;
	ЭлементыФормы.КоманднаяПанель4.Доступность = ДоступностьПанелей;
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВидимость()
	
	ЭлементыФормы.ПанельСчетов.Страницы.НДСПоРеализации.Видимость = НЕ УСН И НЕ мУпрощенныйУчетНДС;
	ЭлементыФормы.ПанельСчетов.Страницы.ПрочиеНепризнанныеРасходыУСНиИП.Видимость = (Предприниматель) ИЛИ (УСН_ДР);
	
	Если НЕ ОСН Тогда
		ПрочиеРасходы.Очистить();
		НоваяСтрока = ПрочиеРасходы.Добавить();
		НоваяСтрока.Идентификатор = "Номенклатура";
		НоваяСтрока.ВидРасхода = "Стоимость реализованных МПЗ";
		НоваяСтрока = ПрочиеРасходы.Добавить();
		НоваяСтрока.Идентификатор = "ДопРасходы";
		НоваяСтрока.ВидРасхода = "Сумма дополнительных расходов на приобретение МПЗ";
		Если УСН_ДР Тогда
			НоваяСтрока = ПрочиеРасходы.Добавить();
			НоваяСтрока.Идентификатор = "Услуги";
			НоваяСтрока.ВидРасхода = "Стоимость услуг непроизводственного характера";
			ЭлементыФормы.ПанельСчетов.Страницы.ПрочиеНепризнанныеРасходыУСНиИП.Заголовок = "Прочие непризнанные расходы УСН";
		Иначе
			НоваяСтрока = ПрочиеРасходы.Добавить();
			НоваяСтрока.Идентификатор = "Прочие";
			НоваяСтрока.ВидРасхода = "Сумма прочих не признанных расходов";
			ЭлементыФормы.ПанельСчетов.Страницы.ПрочиеНепризнанныеРасходыУСНиИП.Заголовок = "Прочие непризнанные расходы ИП";
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ УСН И НЕ мУпрощенныйУчетНДС Тогда
		НДСПоРеализации.Очистить();
		НоваяСтрока = НДСПоРеализации.Добавить();
		НоваяСтрока.Идентификатор = "НДС";
		НоваяСтрока.ВидРасхода = "НДС всего";
		НоваяСтрока = НДСПоРеализации.Добавить();
		НоваяСтрока.Идентификатор = "НДСОплата";
		НоваяСтрока.ВидРасхода = "НДС оплаченный";
		Если мСложныйУчетНДС Тогда
			НоваяСтрока = НДСПоРеализации.Добавить();
			НоваяСтрока.Идентификатор = "НДСПодтверждено";
			НоваяСтрока.ВидРасхода = "НДС подтвержденный (реализация по ставке 0%)";
			НоваяСтрока = НДСПоРеализации.Добавить();
			НоваяСтрока.Идентификатор = "НДСНеПодтверждено";
			НоваяСтрока.ВидРасхода = "НДС неподтвержденный (реализация по ставке 0%)";
			НоваяСтрока = НДСПоРеализации.Добавить();
			НоваяСтрока.Идентификатор = "НДСОжидаетПодтверждения";
			НоваяСтрока.ВидРасхода = "НДС ожидает подтверждения (реализация по ставке 0%)";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиПолныйСписокСчетов()
	
	СписокСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка КАК Счет,
	               |	Хозрасчетный.Наименование,
	               |	Хозрасчетный.Вид,
	               |	Хозрасчетный.Забалансовый,
	               |	Хозрасчетный.ЗапретитьИспользоватьВПроводках,
	               |	Хозрасчетный.Код
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	СписокСчетовВключенныхОсобымОбразом = "МЦ.04, ГТД";
	Для Каждого СтрокаТабСписокСчетов Из ТаблицаСчетов Цикл
		Если СтрокаТабСписокСчетов.Счет = ПланыСчетов.Хозрасчетный.Вспомогательный Тогда
			Продолжить;
		КонецЕсли;
		Попытка 
			Если Найти(СписокСчетовВключенныхОсобымОбразом, СтрокаТабСписокСчетов.Код) <> 0
				ИЛИ ТипЗнч(Число(Лев(СтрокаТабСписокСчетов.Код, 1))) = Тип("Число") Тогда
				НоваяСтрока = СписокСчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабСписокСчетов);
				Вид = СтрокаТабСписокСчетов.Вид;
				Если Вид = ВидСчета.Активный  Тогда
					НоваяСтрока.Вид = "А";
				ИначеЕсли Вид = ВидСчета.Пассивный  Тогда
					НоваяСтрока.Вид = "П";
				Иначе
					НоваяСтрока.Вид = "АП";
				КонецЕсли;
			КонецЕсли;
		Исключение
			
		КонецПопытки
		
	КонецЦикла;

КонецПроцедуры

Процедура ОчиститьТабличнуюЧасть()
	
	Для Каждого СтрокаТЧ ИЗ СписокСчетов Цикл
		СтрокаТЧ.СальдоНачальноеДт = 0;
		СтрокаТЧ.СальдоНачальноеКт = 0;
		СтрокаТЧ.СальдоНачальноеДтГр = 0;
		СтрокаТЧ.СальдоНачальноеКтГр = 0;
	КонецЦикла;
	
	Если НЕ ОСН Тогда
		Для Каждого СтрокаТЧ ИЗ ПрочиеРасходы Цикл
			СтрокаТЧ.СальдоНачальное = 0;
		КонецЦикла;
	КонецЕсли;
	
 КонецПроцедуры

Процедура ПолучитьСальдоПоСчетам()
	
	//ВывестиПолныйСписокСчетов();
	ОчиститьТабличнуюЧасть();
	
	Если НЕ ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК Счет,";
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ХозрасчетныйОстатки.Подразделение,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Счет.Наименование,
	|	ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	|	ХозрасчетныйОстатки.Счет.Вид,
	|	СУММА(ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт) КАК СальдоНачальноеДтРазв,
	|	СУММА(ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт) КАК СальдоНачальноеКтРазв
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаВводаОстатков, , , ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.Организация = &Организация";
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (ХозрасчетныйОстатки.Подразделение = &Подразделение ИЛИ ХозрасчетныйОстатки.Подразделение ЕСТЬ NULL)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,";
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ХозрасчетныйОстатки.Подразделение,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Счет.Наименование,
	|	ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	|	ХозрасчетныйОстатки.Счет.Вид
	|ИТОГИ
	|	СУММА(СальдоНачальноеДтРазв),
	|	СУММА(СальдоНачальноеКтРазв)
	|ПО
	|	Счет ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ДатаВводаОстатков", ДатаВводаОстатков + 60 * 60 * 24);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	КонецЕсли;
	мТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТабСписокСчетов Из мТаблицаОстатков Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабСписокСчетов.Счет) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТабСписокСчетов.СчетЗапретитьИспользоватьВПроводках Тогда
			СтрокаСпискаСчетов = СписокСчетов.Найти(СтрокаТабСписокСчетов.Счет, "Счет");
			Если СтрокаСпискаСчетов <> Неопределено Тогда
				ВидСчетаСписка = СтрокаСпискаСчетов.Счет.Вид;
				Если ВидСчетаСписка = ВидСчета.Активный И СтрокаТабСписокСчетов.СальдоНачальноеКтРазв <> 0 Тогда
					СтрокаСпискаСчетов.СальдоНачальноеДтГр = -СтрокаТабСписокСчетов.СальдоНачальноеКтРазв;
					СтрокаТабСписокСчетов.СальдоНачальноеКтРазв = 0;
					СтрокаСпискаСчетов.СальдоНачальноеКтГр = 0;
				ИначеЕсли ВидСчетаСписка = ВидСчета.Пассивный И СтрокаТабСписокСчетов.СальдоНачальноеДтРазв <> 0 Тогда
					СтрокаСпискаСчетов.СальдоНачальноеКтГр = -СтрокаТабСписокСчетов.СальдоНачальноеДтРазв;
					СтрокаТабСписокСчетов.СальдоНачальноеДтРазв = 0;
					СтрокаСпискаСчетов.СальдоНачальноеДтГр = 0;
				Иначе
					СтрокаСпискаСчетов.СальдоНачальноеДтГр = СтрокаТабСписокСчетов.СальдоНачальноеДтРазв;
					СтрокаСпискаСчетов.СальдоНачальноеКтГр = СтрокаТабСписокСчетов.СальдоНачальноеКтРазв;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК Счет,";
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ХозрасчетныйОстатки.Подразделение,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.Счет.Наименование,
	|	ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	|	ХозрасчетныйОстатки.Счет.Вид,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК СальдоНачальноеДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СальдоНачальноеКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаВводаОстатков, , , ) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.Организация = &Организация
	|	И ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (ХозрасчетныйОстатки.Подразделение = &Подразделение ИЛИ ХозрасчетныйОстатки.Подразделение ЕСТЬ NULL)";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет,";
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ХозрасчетныйОстатки.Подразделение,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.Счет.Наименование,
	|	ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	|	ХозрасчетныйОстатки.Счет.Вид,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаОстатокКт
	|ИТОГИ ПО
	|	Счет";
	
	Запрос.УстановитьПараметр("ДатаВводаОстатков", ДатаВводаОстатков + 60 * 60 * 24);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	КонецЕсли;
	мТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТабСписокСчетов Из мТаблицаОстатков Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТабСписокСчетов.Счет) Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ СтрокаТабСписокСчетов.СчетЗапретитьИспользоватьВПроводках Тогда
			СтрокаСпискаСчетов = СписокСчетов.Найти(СтрокаТабСписокСчетов.Счет, "Счет");
			Если СтрокаСпискаСчетов <> Неопределено Тогда
				СтрокаСпискаСчетов.СальдоНачальноеДт = СтрокаТабСписокСчетов.СальдоНачальноеДт;
				СтрокаСпискаСчетов.СальдоНачальноеКт = СтрокаТабСписокСчетов.СальдоНачальноеКт;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСальдоПрочихРасходов()
	
	Если НЕ ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если УСН_ДР Тогда 
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВложенныйЗапрос.Услуги) КАК Услуги,
		|	СУММА(ВложенныйЗапрос.ДопРасходы) КАК ДопРасходы,
		|	СУММА(ВложенныйЗапрос.Номенклатура) КАК Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВводНачальныхОстатковУслугиУСН.Сумма КАК Услуги,
		|		0 КАК ДопРасходы,
		|		0 КАК Номенклатура
		|	ИЗ
		|		Документ.ВводНачальныхОстатков.УслугиУСН КАК ВводНачальныхОстатковУслугиУСН
		|	ГДЕ
		|		ВводНачальныхОстатковУслугиУСН.Ссылка.Организация = &Организация
		|		И ВводНачальныхОстатковУслугиУСН.Ссылка.РазделУчета = &РазделУчета
		|		И ВводНачальныхОстатковУслугиУСН.Ссылка.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		СУММА(ВводНачальныхОстатковДопРасходыУСН.Сумма),
		|		0
		|	ИЗ
		|		Документ.ВводНачальныхОстатков.ДопРасходыУСН КАК ВводНачальныхОстатковДопРасходыУСН
		|	ГДЕ
		|		ВводНачальныхОстатковДопРасходыУСН.Ссылка.Организация = &Организация
		|		И ВводНачальныхОстатковДопРасходыУСН.Ссылка.РазделУчета = &РазделУчета
		|		И ВводНачальныхОстатковДопРасходыУСН.Ссылка.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		СУММА(ВводНачальныхОстатковМПЗРеализованныеУСН.Сумма)
		|	ИЗ
		|		Документ.ВводНачальныхОстатков.МПЗРеализованныеУСН КАК ВводНачальныхОстатковМПЗРеализованныеУСН
		|	ГДЕ
		|		ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.Организация = &Организация
		|		И ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.РазделУчета = &РазделУчета
		|		И ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.Проведен) КАК ВложенныйЗапрос";
		
		Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СтрокаПрочихРасходов = ПрочиеРасходы.Найти("Номенклатура", "Идентификатор");
			СтрокаПрочихРасходов.СальдоНачальное = Результат.Номенклатура;
			СтрокаПрочихРасходов = ПрочиеРасходы.Найти("ДопРасходы", "Идентификатор");
			СтрокаПрочихРасходов.СальдоНачальное = Результат.ДопРасходы;
			СтрокаПрочихРасходов = ПрочиеРасходы.Найти("Услуги", "Идентификатор");
			СтрокаПрочихРасходов.СальдоНачальное = Результат.Услуги;
		КонецЕсли;
	КонецЕсли;
	
	Если Предприниматель Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВложенныйЗапрос.Прочие) КАК Прочие,
		|	СУММА(ВложенныйЗапрос.ДопРасходы) КАК ДопРасходы,
		|	СУММА(ВложенныйЗапрос.Номенклатура) КАК Номенклатура
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВводНачальныхОстатковПрочиеРасходыИП.Сумма КАК Прочие,
		|		0 КАК ДопРасходы,
		|		0 КАК Номенклатура
		|	ИЗ
		|		Документ.ВводНачальныхОстатков.ПрочиеРасходыИП КАК ВводНачальныхОстатковПрочиеРасходыИП
		|	ГДЕ
		|		ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.Организация = &Организация
		|		И ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.РазделУчета = &РазделУчета
		|		И ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		СУММА(ВводНачальныхОстатковДопРасходыИП.Сумма),
		|		0
		|	ИЗ
		|		Документ.ВводНачальныхОстатков.ДопРасходыИП КАК ВводНачальныхОстатковДопРасходыИП
		|	ГДЕ
		|		ВводНачальныхОстатковДопРасходыИП.Ссылка.Организация = &Организация
		|		И ВводНачальныхОстатковДопРасходыИП.Ссылка.РазделУчета = &РазделУчета
		|		И ВводНачальныхОстатковДопРасходыИП.Ссылка.Проведен
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		0,
		|		СУММА(ВводНачальныхОстатковМПЗРеализованныеИП.Сумма)
		|	ИЗ
		|		Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК ВводНачальныхОстатковМПЗРеализованныеИП
		|	ГДЕ
		|		ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.Организация = &Организация
		|		И ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.РазделУчета = &РазделУчета
		|		И ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.Проведен) КАК ВложенныйЗапрос";
		
		Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП);
		Запрос.УстановитьПараметр("Организация", Организация);
		Результат = Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			СтрокаПрочихРасходов = ПрочиеРасходы.Найти("Номенклатура", "Идентификатор");
			СтрокаПрочихРасходов.СальдоНачальное = Результат.Номенклатура;
			СтрокаПрочихРасходов = ПрочиеРасходы.Найти("ДопРасходы", "Идентификатор");
			СтрокаПрочихРасходов.СальдоНачальное = Результат.ДопРасходы;
			СтрокаПрочихРасходов = ПрочиеРасходы.Найти("Прочие", "Идентификатор");
			СтрокаПрочихРасходов.СальдоНачальное = Результат.Прочие;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСальдоНДС()
	
	Если НЕ ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДС) КАК СуммаБезНДС,
		|	СУММА(ВводНачальныхОстатковДанныеПоСФНДС.НДС) КАК НДС,
		|	СУММА(ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСОплата) КАК СуммаБезНДСОплата,
		|	СУММА(ВводНачальныхОстатковДанныеПоСФНДС.НДСОплата) КАК НДСОплата,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.НДСПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСНеПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСНеПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.НДСНеПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСНеПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДС - ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСПодтверждено0 - (ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСНеПодтверждено0 + ВЫБОР
		|						КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДСНеПодтверждена0 В (&РасчетныеСтавкиНДС)
		|							ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.НДСПодтверждено0
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСОжидаетПодтверждения
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоСФНДС КАК ВводНачальныхОстатковДанныеПоСФНДС
		|ГДЕ
		|	ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Проведен = ИСТИНА
		|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Организация = &Организация
		|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.РазделУчета = &РазделУчета";
		Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.ПодразделениеОрганизации = &Подразделение";
		КонецЕсли;
		
	
	Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	КонецЕсли;
	РасчетныеСтавкиНДС = Новый СписокЗначений;
	РасчетныеСтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС10_110);
	РасчетныеСтавкиНДС.Добавить(Перечисления.СтавкиНДС.НДС18_118);
	Запрос.УстановитьПараметр("РасчетныеСтавкиНДС", РасчетныеСтавкиНДС);
	
	мТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	//мТаблицаОстатков.Свернуть("РазделУчета", "СуммаБезНДС, НДС, СуммаБезНДСОплата, НДСОплата, СуммаБезНДСПодтверждено, НДСПодтверждено, СуммаБезНДСНеПодтверждено, НДСНеПодтверждено");
	Если мТаблицаОстатков.Количество() <> 0 Тогда
		СтрокаТаб = мТаблицаОстатков[0];
		СтрокаПрочихРасходов = НДСПоРеализации.Найти("НДС", "Идентификатор");
		СтрокаПрочихРасходов.СуммаБезНДС		= СтрокаТаб.СуммаБезНДС;
		СтрокаПрочихРасходов.СальдоНачальное	= СтрокаТаб.НДС;
		СтрокаПрочихРасходов = НДСПоРеализации.Найти("НДСОплата", "Идентификатор");
		СтрокаПрочихРасходов.СуммаБезНДС		= СтрокаТаб.СуммаБезНДСОплата;
		СтрокаПрочихРасходов.СальдоНачальное	= СтрокаТаб.НДСОплата;
		Если мСложныйУчетНДС Тогда
			СтрокаПрочихРасходов = НДСПоРеализации.Найти("НДСПодтверждено", "Идентификатор");
			СтрокаПрочихРасходов.СуммаБезНДС		= СтрокаТаб.СуммаБезНДСПодтверждено;
			СтрокаПрочихРасходов.СальдоНачальное	= СтрокаТаб.НДСПодтверждено;
			СтрокаПрочихРасходов = НДСПоРеализации.Найти("НДСНеПодтверждено", "Идентификатор");
			СтрокаПрочихРасходов.СуммаБезНДС		= СтрокаТаб.СуммаБезНДСНеПодтверждено;
			СтрокаПрочихРасходов.СальдоНачальное	= СтрокаТаб.НДСНеПодтверждено;
			СтрокаПрочихРасходов = НДСПоРеализации.Найти("НДСОжидаетПодтверждения", "Идентификатор");
			СтрокаПрочихРасходов.СуммаБезНДС		= СтрокаТаб.СуммаБезНДСОжидаетПодтверждения;
			СтрокаПрочихРасходов.СальдоНачальное	= 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтбор()
	
	ЭлементыФормы.СписокСчетов.ОтборСтрок.Забалансовый.Использование	= Истина;
	ЭлементыФормы.СписокСчетов.ОтборСтрок.Забалансовый.ВидСравнения		= ВидСравнения.Равно;
	ЭлементыФормы.СписокСчетов.ОтборСтрок.Забалансовый.Значение			= Ложь;
	ЭлементыФормы.СписокСчетовЗаб.ОтборСтрок.Забалансовый.Использование	= Истина;
	ЭлементыФормы.СписокСчетовЗаб.ОтборСтрок.Забалансовый.ВидСравнения	= ВидСравнения.Равно;
	ЭлементыФормы.СписокСчетовЗаб.ОтборСтрок.Забалансовый.Значение		= Истина;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОСН = Истина;
	УСН = Ложь;
	УСН_ДР = Ложь;
	Предприниматель = Ложь;
	УчетнаяПолитикаНеЗадана = Истина;
	мУпрощенныйУчетНДС = Ложь;
	мСложныйУчетНДС = Ложь;
	
	МакетПомощника = ПолучитьМакет("Справка");
	
	СформироватьСписокРазделов();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = глЗначениеПеременной("ОсновнаяОрганизация");
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	ЭлементыФормы.ПодразделениеОрганизации.Видимость = Истина;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = Истина;
	// }ОбособленныеПодразделения 
	
	ПолучитьДатуНачалаУчета();
	ВывестиПолныйСписокСчетов();
	ОбновитьФорму(Истина);
	
	УстановитьОтбор();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.СписокСчетов;
	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.Организация;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокСчетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Колонка = ОформлениеСтроки.Ячейки;
	
	Если ДанныеСтроки.ЗапретитьИспользоватьВПроводках Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;
	КонецЕсли;
	
	Если ДанныеСтроки.СальдоНачальноеДтГр <> 0 Тогда
		ОформлениеСтроки.Ячейки.СальдоНачальноеДт.Текст = Формат(ДанныеСтроки.СальдоНачальноеДтГр, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '");
		Если ДанныеСтроки.СальдоНачальноеДтГр < 0 Тогда
			ОформлениеСтроки.Ячейки.СальдоНачальноеДт.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.СальдоНачальноеКтГр <> 0 Тогда
		ОформлениеСтроки.Ячейки.СальдоНачальноеКт.Текст = Формат(ДанныеСтроки.СальдоНачальноеКтГр, "ЧЦ=15; ЧДЦ=2; ЧРД=,; ЧРГ=' '");
		Если ДанныеСтроки.СальдоНачальноеКтГр < 0 Тогда
			ОформлениеСтроки.Ячейки.СальдоНачальноеКт.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.Вид = "А" Тогда
		Колонка.КолонкаСПиктограммой.УстановитьКартинку(КартинкаСчетовА);
	ИначеЕсли ДанныеСтроки.Вид = "П" Тогда
		Колонка.КолонкаСПиктограммой.УстановитьКартинку(КартинкаСчетовП);
	Иначе
		Колонка.КолонкаСПиктограммой.УстановитьКартинку(КартинкаСчетовАП);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрочиеРасходыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Колонка = ОформлениеСтроки.Ячейки;
	Колонка.КолонкаСПиктограммой.УстановитьКартинку(КартинкаРасходов);
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	ПроверитьПодразделение();
	ПолучитьДатуНачалаУчета();
	ВывестиПолныйСписокСчетов();
	ОбновитьФорму(Истина);
	
КонецПроцедуры

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ОбновитьФорму();
	
КонецПроцедуры

Процедура ПроверитьПодразделение()
	
	Если ПодразделениеОрганизации.Владелец <> Организация Тогда
		ПодразделениеОрганизации = "";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьПодсказку()
	
	ОбластьТекстЗаголовок			= "Заголовок|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстЗаголовок);
	ТекстЗаголовок = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
	
	ОбластьТекстОбщий			= "Общий|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ОбластьТекстОрганизация		= "ОрганизацияУстановить|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОрганизация);
		ТекстОбласти = "<BODY><FONT color=#ff0000>" + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "</FONT></BODY>";
		ТекстОбщий = ТекстОбщий + ТекстОбласти + "
		|";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			ОбластьТекстДата	= "ДатаВводаОстатковИзменить|Справка";
			ОбластьСсылкаДата	= "ДатаВводаОстатковИзменить|Ссылка";
		Иначе
			ОбластьТекстДата	= "ДатаВводаОстатковУстановить|Справка";
			ОбластьСсылкаДата	= "ДатаВводаОстатковУстановить|Ссылка";
		КонецЕсли;
		
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстДата);
		ТекстОбласти = ОбластьТекстаСправки.ТекущаяОбласть.Текст;
		ТекстОбласти = СтрЗаменить(ТекстОбласти, "##ДАТА##", Формат(ДатаВводаОстатков, "ДЛФ=DD"));
		ТекстОбласти = СтрЗаменить(ТекстОбласти, "##ОРГАНИЗАЦИЯ##", СокрЛП(Организация.Наименование));
		
		Если НЕ ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			ТекстОбщий = ТекстОбщий + 
			"<BODY><FONT color=#ff0000>" + ТекстОбласти + "</FONT></BODY>
			|";
		Иначе
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";
		КонецЕсли;
		
		ОбластьТекстаСсылки= МакетПомощника.ПолучитьОбласть(ОбластьСсылкаДата);
		ТекстОбласти = "<A id=Команда href=""1C:ВвестиДату"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
		ТекстОбщий = ТекстОбщий + ТекстОбласти + "
		|";
		
		Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
			Если УчетнаяПолитикаНеЗадана Тогда
				ОбластьТекстУП = "УчетнаяПолитикаНеЗадана|Справка";
				ОбластьСсылкаУП = "УчетнаяПолитикаНеЗадана|Ссылка";
			Иначе
				ОбластьТекстУП = "УчетнаяПолитикаЗадана|Справка";
				ОбластьСсылкаУП = "УчетнаяПолитикаЗадана|Ссылка";
			КонецЕсли;
			
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстУП);
			Если УчетнаяПолитикаНеЗадана Тогда
				ТекстОбщий = ТекстОбщий + 
				"<BODY><FONT color=#ff0000>" + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "</FONT></BODY>
				|";
			Иначе
				ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
				|";
			КонецЕсли;
			ОбластьТекстаСсылки = МакетПомощника.ПолучитьОбласть(ОбластьСсылкаУП);
			ТекстОбласти = "<A id=Команда href=""1C:ЗадатьУчетнуюПолитику"">" + ОбластьТекстаСсылки.ТекущаяОбласть.Текст + "</A>";
			ТекстОбщий = ТекстОбщий + ТекстОбласти + "
			|";
		КонецЕсли;
	КонецЕсли;
	
	ОбластьТекстОбщий			= "ОбщееОписание|Справка";
	ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
	ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
	|";
	
	Если УСН_ДР ИЛИ Предприниматель Тогда
		ОбластьТекстОбщий			= "ОписаниеУСНиИП|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
		|";
	КонецЕсли;
	
	Если УСН_ДР Тогда
		ОбластьТекстОбщий			= "ОписаниеУСН|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
		|";
	ИначеЕсли Предприниматель Тогда
		ОбластьТекстОбщий			= "ОписаниеИП|Справка";
		ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
		ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
		|";
	КонецЕсли;
	
	Если НЕ УСН Тогда
		Если НЕ мУпрощенныйУчетНДС Тогда
			ОбластьТекстОбщий			= "ОписаниеНДС|Справка";
			ОбластьТекстаСправки = МакетПомощника.ПолучитьОбласть(ОбластьТекстОбщий);
			ТекстОбщий = ТекстОбщий + ОбластьТекстаСправки.ТекущаяОбласть.Текст + "
			|";
		КонецЕсли;
	КонецЕсли;
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ТекстВстроеннойСправки = 
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|		<DIV class=""top"" id=true style=""DISPLAY:inline"">
	|			<DIV><STRONG>" + ТекстЗаголовок + "</STRONG></DIV>
	|		</DIV>";
	
	Если СтрЧислоСтрок(ТекстОбщий) > 0 Тогда
		Для НомСтроки = 1 По СтрЧислоСтрок(ТекстОбщий) Цикл
			ТекстСправки = СтрПолучитьСтроку(ТекстОбщий,НомСтроки);
			ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
			|	<DIV>" + ТекстСправки + "</DIV>";
		КонецЦикла;
	КонецЕсли;
	
	ТекстВстроеннойСправки = ТекстВстроеннойСправки + "
	|	</BODY>
	|</HTML>";
		
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстВстроеннойСправки);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	Элемент_HTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если Элемент_HTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент_HTML.id = "Команда" Тогда
		Попытка
			ВыполнитьКомандуФормы(Элемент_HTML.pathname, Элемент_HTML.target);
		Исключение
			Сообщить("Операция не выполнена!", СтатусСообщения.Важное);// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(Элемент_HTML, НазваниеТега)
	
	ТекущийЭлемент_HTML = Элемент_HTML;
	Пока Истина Цикл
		Если ТекущийЭлемент_HTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлемент_HTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлемент_HTML;
		Иначе
			ТекущийЭлемент_HTML = ТекущийЭлемент_HTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ВыполнитьКомандуФормы(Команда, Значение) Экспорт
	
	Если Команда = "ВвестиДату" Тогда
		
		ДатаНачалаУчета = ДатаВводаОстатков;
		Форма = ОбработкаОбъект.ПолучитьФорму("ФормаУстановкиДатыНачалаВеденияУчета", ДатаВводаОстатков,);
		Форма.ОбработкаОбъект = ОбработкаОбъект;
		Форма.ОткрытьМодально();
		
		Если ДатаВводаОстатков = '00010101' Тогда
			ТекстПодсказки = "Установка даты начала ведения учета в программе:";
		Иначе
			ТекстПодсказки = "Изменение даты начала ведения учета в программе:";
		КонецЕсли;
		
		Если ДатаВводаОстатков = ДатаНачалаУчета Тогда
			Возврат;
		КонецЕсли;
		
		Ответ = КодВозвратаДиалога.Да;
		
		УстановитьТипОрганизации();
		ПерезаписатьДокументыНаНовуюДату(ДатаВводаОстатков, Истина);
		
		Если УчетнаяПолитикаНеЗадана и мЕстьДокументы Тогда
			Предупреждение("На указанную дату не задана учетная политика организации!
			|Операция не выполнена!");
			ДатаВводаОстатков = ДатаНачалаУчета;
			Возврат;
		КонецЕсли;
		
		
		Если мЕстьДокументы Тогда
			Если ЗначениеЗаполнено(ДатаВводаОстатков) Тогда
				ТекстВопроса = "Изменена дата ввода начальных остатков!
				|Документы ввода остатков текущей организации будут 
				|перепроведены на новую дату. Продолжить?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			УстановитьДатуНачалаУчета(ДатаВводаОстатков);
			ОбновитьФорму(Истина);
		Иначе
			ДатаВводаОстатков = ДатаНачалаУчета;
		КонецЕсли;
		
	ИначеЕсли Команда = "ЗадатьУчетнуюПолитику" Тогда
		
		Если НЕ УчетнаяПолитикаНеЗадана Тогда
			ОтборПоОрганизации = Новый Структура;
			ОтборПоОрганизации.Вставить("Организация",Организация);
			ЗаписиРегистра = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(ДатаВводаОстатков+24*60*60, ОтборПоОрганизации);
			УчетнаяПолитикаНеЗадана = Истина;
			Если ЗаписиРегистра.Количество() > 0 Тогда
				МенеджерЗаписиРегистраУчетнойПолитики = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();
				МенеджерЗаписиРегистраУчетнойПолитики.Организация = ЗаписиРегистра[0].Организация;
				МенеджерЗаписиРегистраУчетнойПолитики.Период = ЗаписиРегистра[0].Период;
				МенеджерЗаписиРегистраУчетнойПолитики.Прочитать();
				УчетнаяПолитика = МенеджерЗаписиРегистраУчетнойПолитики.ПолучитьФорму();
				УчетнаяПолитикаНеЗадана = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если УчетнаяПолитикаНеЗадана Тогда
			УчетнаяПолитика = РегистрыСведений.УчетнаяПолитикаОрганизаций.ПолучитьФормуРедактированияЗаписи();
			УчетнаяПолитика.Организация = Организация;
			УчетнаяПолитика.ЭлементыФормы.Период.Значение = ДатаВводаОстатков+24*60*60;
		КонецЕсли;
		
		УчетнаяПолитика.ОткрытьМодально();
		
		ОбновитьФорму(Истина);
	Иначе
		Сообщить("Неизвестная команда: " + Команда);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВвестиОстатки(Кнопка = "")
	
	МожноВвестиДокумент = ЗначениеЗаполнено(Организация) И НЕ УчетнаяПолитикаНеЗадана И ДатаВводаОстатков <> '00010101';
	Если НЕ МожноВвестиДокумент Тогда
		Возврат;
	КонецЕсли;
	
	РазделУчета = ОпределитьРазделУчета();
	Если РазделУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КлючУникальностиДокумента = Новый Структура();
	КлючУникальностиДокумента.Вставить("Организация", Организация);
	КлючУникальностиДокумента.Вставить("РазделУчета", РазделУчета);
	КлючУникальностиДокумента.Вставить("ПодразделениеОрганизации", ПодразделениеОрганизации);
	ДокументВводаОстатков				= Документы.ВводНачальныхОстатков.ПолучитьФормуНовогоДокумента(,,КлючУникальностиДокумента);
	ДокументВводаОстатков.Организация	= Организация;
	ДокументВводаОстатков.Дата			= ДатаВводаОстатков;
	ДокументВводаОстатков.РазделУчета	= РазделУчета;
	ДокументВводаОстатков.ПодразделениеОрганизации = ПодразделениеОрганизации;
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ДокументВводаОстатков.ЭлементыФормы.ПодразделениеОрганизации.ТолькоПросмотр	= Истина;
	Иначе
		ДокументВводаОстатков.ЭлементыФормы.ПодразделениеОрганизации.ТолькоПросмотр	= Ложь;
	КонецЕсли;
	ДокументВводаОстатков.ЭлементыФормы.РазделУчета.ТолькоПросмотр = Истина;
	ДокументВводаОстатков.ЭлементыФормы.Дата.ТолькоПросмотр = Истина;
	
	ДокументВводаОстатков.ЭлементыФормы.ДействияФормы.Кнопки.РежимВводаОстатков.Доступность = Ложь;
	ДокументВводаОстатков.ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.РежимВводаОстатков.Доступность = Ложь;
	ДокументВводаОстатков.Открыть();
	ДокументВводаОстатков.ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
	
КонецПроцедуры

Функция ОпределитьРазделУчета()
	
	Если ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ОсновныеСчетаПланаСчетов Тогда
		ТекущиеДанные = ЭлементыФормы.СписокСчетов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТекущийСчет = ТекущиеДанные.Счет;
	ИначеЕсли ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ЗабалансовыеСчета Тогда
		ТекущиеДанные = ЭлементыФормы.СписокСчетовЗаб.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТекущийСчет = ТекущиеДанные.Счет;
	ИначеЕсли ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ПрочиеНепризнанныеРасходыУСНИИП Тогда
		Возврат Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП;
	ИначеЕсли ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.НДСПоРеализации Тогда
		Возврат Перечисления.РазделыУчетаДляВводаОстатков.НДСНачисленный;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийСчет.Код) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ ИЗ ТаблицаСчетовРазделовУчета Цикл
		
		Если Найти(СтрокаТЧ.Счета, ТекущийСчет.Код) <> 0 Тогда
			Если Найти(СтрокаТЧ.СчетаИсключения, """"+ТекущийСчет.Код+"""") = 0 Тогда
				Возврат СтрокаТЧ.РазделУчета;
			КонецЕсли;
		КонецЕсли; 
		
		Если ТекущийСчет.Забалансовый Тогда
			Прервать;
		КонецЕсли;
		
		Если Найти(СтрокаТЧ.СчетаГруппы, Лев(Строка(ТекущийСчет.Код), 2)) <> 0 Тогда
			Если Найти(СтрокаТЧ.СчетаИсключения, """"+ТекущийСчет.Код+"""") = 0 Тогда
				Возврат СтрокаТЧ.РазделУчета;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета;
	
КонецФункции

Процедура ОткрытьСписокДокументов(Кнопка = "")
	
	СписокДокументов				= Документы.ВводНачальныхОстатков.ПолучитьФормуСписка();
	СписокДокументов.Организация	= Организация;
	СписокДокументов.Отбор.Организация.Установить(Организация);
	
	// {ОбособленныеПодразделения
	Если ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		СписокДокументов.Отбор.ПодразделениеОрганизации.Установить(ПодразделениеОрганизации);
	КонецЕсли;
	// }ОбособленныеПодразделения 	
	
	СписокДокументов.Отбор.Дата.Использование = Истина;
	СписокДокументов.Отбор.Дата.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
	СписокДокументов.Отбор.Дата.Значение = КонецДня(ДатаВводаОстатков);
	РазделУчета = ОпределитьРазделУчета();
	Если РазделУчета <> Неопределено Тогда
		СписокДокументов.РазделУчета	= РазделУчета;
		СписокДокументов.Отбор.РазделУчета.Установить(РазделУчета);
	КонецЕсли;
	СписокДокументов.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	СписокДокументов.ЭлементыФормы.Организация.Доступность = Ложь;
	СписокДокументов.Открыть();
	
КонецПроцедуры

Функция СформироватьОбщуюСтруктуруДляРасшифровки() Экспорт
	
	СтруктураНастроекОтчета = Новый Структура;
	СтруктураНастроекОтчета.Вставить("ДатаНач", НачалоДня(ДатаВводаОстатков));
	СтруктураНастроекОтчета.Вставить("ДатаКон", КонецДня(ДатаВводаОстатков));
	СтруктураНастроекОтчета.Вставить("Организация", Организация);
	
	Возврат СтруктураНастроекОтчета;
	
КонецФункции

Процедура СформироватьОтчетКарточкаСчета(Кнопка = "")
	
	Таблица = ?(ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ОсновныеСчетаПланаСчетов, "СписокСчетов", "СписокСчетовЗаб");
	ОтчетБУ = Отчеты.КарточкаСчета.Создать();
	ОтчетБУ.РежимРасшифровки = Истина;
	ОтчетБУ.Счет = ЭлементыФормы[Таблица].ТекущиеДанные.Счет;
	ОтчетБУ.Организация = Организация;
	ОтчетБУ.НачалоПериода = НачалоДня(ДатаВводаОстатков);
	ОтчетБУ.КонецПериода  = КонецДня(ДатаВводаОстатков);
	ОтчетБУ.Настроить();
	ФормаОтчетаБУ = ОтчетБУ.ПолучитьФорму(, , Новый УникальныйИдентификатор);
	ФормаОтчетаБУ.Открыть();
	ФормаОтчетаБУ.ОбновитьОтчет();
	
КонецПроцедуры

Процедура СформироватьОтчетОСВПоСчету(Кнопка = "")
	
	Таблица = ?(ЭлементыФормы.ПанельСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельСчетов.Страницы.ОсновныеСчетаПланаСчетов, "СписокСчетов", "СписокСчетовЗаб");
	ОтчетБУ = Отчеты.ОборотноСальдоваяВедомостьПоСчету.Создать();
	ОтчетБУ.РежимРасшифровки = Истина;
	ОтчетБУ.Счет = ЭлементыФормы[Таблица].ТекущиеДанные.Счет;
	ОтчетБУ.Организация = Организация;
	ОтчетБУ.НачалоПериода = НачалоДня(ДатаВводаОстатков);
	ОтчетБУ.КонецПериода  = КонецДня(ДатаВводаОстатков);
	ОтчетБУ.Настроить();
	ФормаОтчетаБУ = ОтчетБУ.ПолучитьФорму(, , Новый УникальныйИдентификатор);
	ФормаОтчетаБУ.Открыть();
	ФормаОтчетаБУ.ОбновитьОтчет();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФормуПомощникаВводаОстатков" И Источник = "ВводНачальныхОстатков" И Параметр = Организация Тогда
		
		ОбновитьФорму();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельОбновить(Кнопка = "")
	
	ОбновитьФорму();
	
КонецПроцедуры

Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	ВвестиОстатки();
	
КонецПроцедуры

Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Организация) И НЕ УчетнаяПолитикаНеЗадана И ДатаВводаОстатков <> '00010101' Тогда
		ОткрытьСписокДокументов();
	КонецЕсли;
	
КонецПроцедуры

КартинкаСчетовА = БиблиотекаКартинок.СчетАктивный;
КартинкаСчетовП = БиблиотекаКартинок.СчетПассивный;
КартинкаСчетовАП = БиблиотекаКартинок.СчетАктивноПассивный;
КартинкаРасходов = БиблиотекаКартинок.ПрочиеРасходы;

