
Перем мТаблицаВозможныхОбменов Экспорт;
Перем мСтруктураИнформацииОТекущейИнформационнойБазе Экспорт;
Перем мРегламентноеЗадание Экспорт;
Перем мСтруктураНастроек Экспорт;
Перем ПодключениеКПриемнику Экспорт;
Перем мФормаХодаВыполненияОбмена;
Перем мОбработкаОбменаДаннымиXML Экспорт;
Перем мТаблицаНастроекПолейВРежимеВыгрузки Экспорт;
Перем мТаблицаПравилВыгрузкиВРежимеВыгрузки Экспорт;
Перем мТаблицаНастроекПолей Экспорт;
Перем мТаблицаПравилВыгрузки Экспорт;
Перем мТаблицаНастроекПолейВРежимеЗагрузки Экспорт;
Перем мТаблицаПравилВыгрузкиВРежимеЗагрузки Экспорт;
Перем мТаблицаВариантовСопоставленияПоНовомуОбмену;
Перем мТаблицаВариантовСопоставленияПоСтаромуОбмену;
Перем мПрефиксДляИБИсточника Экспорт;
Перем мПрефиксДляИБПриемника Экспорт;

#Если Клиент Тогда
	
Процедура ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка) Экспорт
		
	ПроцедурыОбменаДаннымиКлиент.ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
		
КонецПроцедуры
	
#КонецЕсли

//Загружает настройки из файла настроек для второй ИБ в файловом варианте работы обмена
//
//
Функция ЗагрузитьНастройкиИзФайла(ИмяФайла, СтрокаДляЗагрузки = "") Экспорт
	
	Попытка
		
		мРегламентноеЗадание = Неопределено;
		
		ЧтениеXML = Новый ЧтениеXML;
		Если ПустаяСтрока(СтрокаДляЗагрузки) Тогда
			ЧтениеXML.ОткрытьФайл(ИмяФайла);
		Иначе
			ЧтениеXML.УстановитьСтроку(СтрокаДляЗагрузки);
		КонецЕсли;
		
		ЧтениеXML.Прочитать();
		
		ЧтениеXML.Прочитать();
		
		мСтруктураНастроек = СчитатьДанныеВСтуктуру(ЧтениеXML);
		
		ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(ЭтотОбъект);
		ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";

		// заполняем текущий объект настройками
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, мСтруктураНастроек);
		
		
		Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
			
			Если ЧтениеXML.Имя = "НастройкаВариантовПоискаОбъектов" Тогда	
				
				ПрочитатьНастройкиВариантовПоискаОбъектов(ЧтениеXML);
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		
		
	Исключение
		
		#Если Клиент Тогда
			СтрокаОшибки = ОписаниеОшибки();
			Сообщить("Ошибка при чтении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);		
		#КонецЕсли
		Возврат Ложь;
		
	КонецПопытки;
	
	#Если Клиент Тогда
		Сообщить("Настройки обмена данными первой информационной базы успешно загружены.");
	#КонецЕсли
	
	Возврат Истина;
	
КонецФункции

Функция НужныОграниченияПоОрганизации() Экспорт
	
	Возврат ТипИнформационнойБазыДляОбмена = "ОбменРозницаБухгалтерия20";
	
КонецФункции

Функция ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена,ПостоянныйОбмен = Ложь) Экспорт 
	
	Если ДействиеВыбранноеПользователем = 1
		И ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
		
		ИмяМакета = "ПравилаОбмена_ПустыеПравила";
		
	Иначе
		
		ИмяМакета = "ПравилаОбмена_" + мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации + "_" + мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяКонфигурации;
		
	КонецЕсли;
	
	ТекстПравилОбмена = ПолучитьТекстПравилОбменаПоназваниюМакета(ИмяМакета,ПостоянныйОбмен);
	
	Возврат ТекстПравилОбмена;
	
КонецФункции

Функция ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена,ПостоянныйОбмен = Ложь) Экспорт
	
	Если ДействиеВыбранноеПользователем = 0
		И ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
		
		ИмяМакета = "ПравилаОбмена_ПустыеПравила";
		
	Иначе
		
		ИмяМакета = "ПравилаОбмена_" + мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяКонфигурации + "_" + мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации;
		
	КонецЕсли;
	
	ТекстПравилОбмена = ПолучитьТекстПравилОбменаПоназваниюМакета(ИмяМакета,ПостоянныйОбмен);
	
	Возврат ТекстПравилОбмена;
	
КонецФункции

Процедура ЗаполнитьСписокТиповИнформационныхБазДляОбмена(СписокВыбора, ТаблицаВозможныхОбменов) Экспорт
	
	СписокВыбора.Очистить();
	
	НомерСтроки = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаВозможныхОбменов Цикл
		
		СписокВыбора.Добавить(НомерСтроки, СтрокаТаблицы.ПредставлениеКонфигурации);	
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрочитатьТаблицыИнформацииПравил(ТекстПравил,РежимОбмена = "",НадоПереинициализироватьОбработуОбменаДанными = Ложь) Экспорт
		
	Если РежимОбмена = "Выгрузка" 
		И (НЕ ЗначениеЗаполнено(мТаблицаНастроекПолейВРежимеВыгрузки)) тогда
		НадоПереинициализироватьОбработуОбменаДанными = Истина;
	ИначеЕсли РежимОбмена = "Загрузка" 
		И (НЕ ЗначениеЗаполнено(мТаблицаНастроекПолейВРежимеЗагрузки)) тогда
		НадоПереинициализироватьОбработуОбменаДанными = Истина;
	ИначеЕсли РежимОбмена = "" 
		И (НЕ ЗначениеЗаполнено(мТаблицаНастроекПолей)) тогда
		НадоПереинициализироватьОбработуОбменаДанными = Истина;
	КонецЕсли;
	
	Если НадоПереинициализироватьОбработуОбменаДанными тогда
		мОбработкаОбменаДаннымиXML.ИнициализацияТаблицДанныхОПравилахОбмена();
		Если НЕ ПустаяСтрока(ТекстПравил) Тогда
			мОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравил, "Строка");		
		КонецЕсли;
	КонецЕсли;
	
	
	ТаблицаНастроекПолей = мОбработкаОбменаДаннымиXML.мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска;
	ТаблицаПравилВыгрузки = мОбработкаОбменаДаннымиXML.мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации;
	
	
	Если РежимОбмена = "Выгрузка" тогда
		мТаблицаНастроекПолейВРежимеВыгрузки  = ТаблицаНастроекПолей;
		мТаблицаПравилВыгрузкиВРежимеВыгрузки = ТаблицаПравилВыгрузки;
	ИначеЕсли РежимОбмена = "Загрузка" тогда
		мТаблицаНастроекПолейВРежимеЗагрузки  = ТаблицаНастроекПолей;
		мТаблицаПравилВыгрузкиВРежимеЗагрузки = ТаблицаПравилВыгрузки;
	ИначеЕсли РежимОбмена = "" тогда
		мТаблицаНастроекПолей  = ТаблицаНастроекПолей;
		мТаблицаПравилВыгрузки = ТаблицаПравилВыгрузки;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗадатьПараметрыОбработкиОбменаДанными(мРежимЗагрузкиИнформацииОПравилахОбмена = Истина,РежимОбмена)  Экспорт
	
	мОбработкаОбменаДаннымиXML.мРежимЗагрузкиИнформацииОПравилахОбмена = мРежимЗагрузкиИнформацииОПравилахОбмена;
	Если РежимОбмена = "Выгрузка" тогда
		мОбработкаОбменаДаннымиXML.РежимОбмена = "Выгрузка"; 
	ИначеЕсли РежимОбмена = "Загрузка" тогда
		мОбработкаОбменаДаннымиXML.РежимОбмена = "Загрузка"; 
	КонецЕсли;		
	
КонецПроцедуры	

Функция ПолучитьТекстПравилОбменаПоназваниюМакета(НазваниеМакета,ПостоянныйОбмен) Экспорт
	Если ПостоянныйОбмен Тогда	
		Макет = ПолучитьОбщийМакет(НазваниеМакета);
	Иначе	
		Макет = ПолучитьМакет(НазваниеМакета);
	КонецЕсли;
	
	ТекстПравилОбмена = Макет.ПолучитьТекст();
	
	Возврат ТекстПравилОбмена;	
	
КонецФункции

Функция ПолучитьИмяОбъектаПодлежащегоРегистрацииПриПервомЗнакомствеПоМетаданным(МетаданныеОбъекта, 
	НужноПодключение = Ложь, ЭтоРегистр = Неопределено, ЭтоДокумент = Неопределено) Экспорт
	
	Если НужноПодключение Тогда
		ПодключитьсяБезопасно();
	КонецЕсли;
	
	ДаннеДляОпределения = ?(НужноПодключение И ПодключениеКПриемнику <> Неопределено,  ПодключениеКПриемнику.Метаданные(),Метаданные);
	ЭтоРегистр = Ложь;
	ЭтоДокумент = Ложь;
	
	ИмяТаблицыДляПоискаЗарегистрированных = "";
	
	Если ДаннеДляОпределения.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Справочник." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Документ." + МетаданныеОбъекта.Имя;
		ЭтоДокумент = Истина;
		
	ИначеЕсли ДаннеДляОпределения.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовХарактеристик." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "ПланСчетов." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовРасчета." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "БизнесПроцесс." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "Задача." + МетаданныеОбъекта.Имя;
		
	ИначеЕсли ДаннеДляОпределения.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		ИмяТаблицыДляПоискаЗарегистрированных = "РегистрСведений." + МетаданныеОбъекта.Имя;
		ЭтоРегистр = Истина;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
	Возврат ИмяТаблицыДляПоискаЗарегистрированных;	
	
КонецФункции

#Если Клиент Тогда
	
Процедура ОбработчикКаталогОткрытие1(Элемент, СтандартнаяОбработка) Экспорт
		
	ПроцедурыОбменаДаннымиКлиент.ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
		
КонецПроцедуры
// при изменении каталога
Процедура ОбработчикПриИзмененииКаталога(Элемент) Экспорт
		
	Элемент.Значение = СокрЛП(Элемент.Значение);
		
КонецПроцедуры
	
// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт
		
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
		
	Возврат РезультатВыбора;
		
КонецФункции
	
#КонецЕсли

Функция СчитатьДанныеВСтуктуру(ЧтениеXML) Экспорт
	
	Структура = Новый Структура;
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда		
		ВызватьИсключение "Ошибка чтения XML";		
	КонецЕсли;
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		ИмяУзла = ЧтениеXML.Имя;
		Структура.Вставить(ИмяУзла, ПрочитатьXML(ЧтениеXML));
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат Структура;
	
КонецФункции

Функция СчитатьДанныеВМассив(ЧтениеXML) Экспорт
	
	МассивДанных = Новый Массив;
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда		
		ВызватьИсключение "Ошибка чтения XML";		
	КонецЕсли;
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		МассивДанных.Добавить(ПрочитатьXML(ЧтениеXML));
	КонецЦикла;
	ЧтениеXML.Прочитать();
	
	Возврат МассивДанных;
	
КонецФункции

Процедура ПрочитатьНастройкиВариантовПоискаОбъектов(ЧтениеXML) Экспорт
	
	ИмяУзла = ЧтениеXML.Имя;
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		
		ИмяУзла = ЧтениеXML.Имя;
		ЧтениеXML.Прочитать(); 
		
		Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда		
			ВызватьИсключение "Ошибка чтения XML";		
		КонецЕсли;
		
		НастройкаВариантовПоиска = НастройкаВариантовПоискаОбъектов.Добавить();
		НастройкаВариантовПоиска.КодПравилаОбмена = ЧтениеXML.Имя;
		
		Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
			НастройкаВариантовПоиска[ЧтениеXML.Имя] = ПрочитатьXML(ЧтениеXML);
			
		КонецЦикла;
		ЧтениеXML.Прочитать();
		
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	
	
КонецПроцедуры

Процедура ПроверитьСобственныйКодУзлаУПриемника(ПодключениеКПриемнику, ИмяПланаОбмена, КодЭлемента) Экспорт
	
	МенеджерПланаОбменаПриемника = ПодключениеКПриемнику.ПланыОбмена[ИмяПланаОбмена];
	
	СобственныйУзел = МенеджерПланаОбменаПриемника.ЭтотУзел();
	
	Если СобственныйУзел.Код = КодЭлемента Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементУзелПриемника = МенеджерПланаОбменаПриемника.НайтиПоКоду(КодЭлемента);
	
	Если ЭлементУзелПриемника.Пустая() Тогда 
		
		
		
		ОбъектУзла = СобственныйУзел.ПолучитьОбъект();
		ОбъектУзла.Код = КодЭлемента;
		
		Если ПустаяСтрока(ОбъектУзла.Наименование) Тогда
			
			ОбъектУзла.Наименование	= "Эта информационная база";
			
		КонецЕсли;
		
		ОбъектУзла.Записать();
		
	Иначе
		
		ВызватьИсключение "В информационной базе приемнике уже настроен обмен данными с другой информационной базой."
		+Символы.ПС + "Проверьте номера кодов узлов плана обмена!"
		+Символы.ПС + "Настраивать второй обмен данными между информационными базами следует из той информационной базы,"
		+Символы.ПС + "которая будет общей для первого и второго обмена данными.";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьНулевойНомерПринятогоСообщенияУУзлаОбмена(УзелПланаОбмена) Экспорт
	
	Если УзелПланаОбмена.НомерПринятого <> 0 Тогда
		
		УзелПланаОбмена.НомерПринятого = 0;
		УзелПланаОбмена.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ВыполнитьПодключениеКИБПриемнику() Экспорт
	
	// подключаемся к ИБ приемнику...
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();
	
	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);
	
	ПодключениеКПриемнику = ОбработкаОбмена.ВернутьПодключениеКПриемнику();
	
	Возврат ПодключениеКПриемнику;
	
КонецФункции

Процедура ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ТекстПравилОбмена,НужноПодключение = Ложь, МетаданныеРегистрации = "Все") Экспорт
	
	Если НужноПодключение = Ложь Тогда
		МетаданныеПланаОбмена = Метаданные.ПланыОбмена[ТипИнформационнойБазыДляОбмена];
	Иначе
		ПодключитьсяБезопасно();
		МетаданныеПланаОбмена = ПодключениеКПриемнику.Метаданные().ПланыОбмена[ТипИнформационнойБазыДляОбмена];
	КонецЕсли;
	
	Если НужноПодключение = Ложь Тогда
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
	Иначе
		ОбработкаОбменаДаннымиXML = ПодключениеКПриемнику.Обработки.ОбменДаннымиXML.Создать();
	КонецЕсли;
	
	ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ТекстПравилОбмена, "Строка");
	
	ДеревоИнформацииОВыгрузке = ОбработкаОбменаДаннымиXML.ТаблицаПравилВыгрузки;
	
	Для Каждого ЭлементСостава из МетаданныеПланаОбмена.Состав Цикл
		
		МетаданныеДляОбмена = ЭлементСостава.Метаданные;
		
		ЭтоРегистр  = Ложь;
		ЭтоДокумент = Ложь;
		ИмяСсылочногоТипа = ПолучитьИмяОбъектаПодлежащегоРегистрацииПриПервомЗнакомствеПоМетаданным(МетаданныеДляОбмена, НужноПодключение, ЭтоРегистр, ЭтоДокумент);
		
		Если МетаданныеРегистрации <> "Все" И МетаданныеРегистрации = "Документы" И Не ЭтоДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если МетаданныеРегистрации <> "Все" И МетаданныеРегистрации = "Справочники" И ЭтоДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяСсылочногоТипа) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭтоРегистр Тогда
			СтрокаДерева = ДеревоИнформацииОВыгрузке.Строки.Найти(ИмяСсылочногоТипа, "ИмяОбъектаДляЗапроса", Истина);
		Иначе
			СтрокаДерева = ДеревоИнформацииОВыгрузке.Строки.Найти(ИмяСсылочногоТипа, "ИмяОбъектаДляЗапросаРегистра", Истина);
		КонецЕсли;
		
		ЕстьПравилоВыгрузкиДанных = СтрокаДерева <> Неопределено;
		
		Если НЕ ЕстьПравилоВыгрузкиДанных Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДерева.Включить <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		РегистрироватьВсе = (ЭлементСостава.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить);
		
		ВыполнитьРегистрациюИзмененийПоУзлуИМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, НужноПодключение , РегистрироватьВсе);
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("");	
	#КонецЕсли
	
КонецПроцедуры

Процедура ОтменитьРегистрациюИзмененийДляУзла(УзелДляРегистрацииИзменений,НужноПодключение = Ложь) Экспорт
	
	Попытка
		
		Если НужноПодключение Тогда
			ПодключитьсяБезопасно();
			Если ПодключениеКПриемнику <> Неопределено Тогда
				ПодключениеКПриемнику.ПланыОбмена.УдалитьРегистрациюИзменений(УзелДляРегистрацииИзменений);
			КонецЕсли;
		Иначе
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелДляРегистрацииИзменений);
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры	

Процедура ВыполнитьРегистрациюИзмененийПоУзлуИМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, 
	НужноПодключение, РегистрироватьВсеИзменения = Ложь) Экспорт
	
	ЭтоРегистр = Ложь;
	ЭтоДокумент = Ложь;
	ИмяСсылочногоТипа = ПолучитьИмяОбъектаПодлежащегоРегистрацииПриПервомЗнакомствеПоМетаданным(МетаданныеДляОбмена, 
	НужноПодключение, ЭтоРегистр, ЭтоДокумент);
	
	Если ПустаяСтрока(ИмяСсылочногоТипа) Тогда
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Регистрация изменений для объектов: " + ИмяСсылочногоТипа);
	#КонецЕсли
	
	НужноЗарегистрироватьИзмененияДляВсехОбъектов = Истина;	
	
	
	// если есть дополнительные отборы, то нужно провести регистрацию согласно отборам данных
	Если (НЕ РегистрироватьВсеИзменения)
		И НЕ НужноПодключение Тогда
		//регистрируем изменения в РТ
		ВозможныОрганиченияПоОрганизации = Организации.Количество() > 0 И ЭтоДокумент;
	
		ВозможныОрганиченияПоДате = ЭтоДокумент И ЗначениеЗаполнено(ДатаНачалаВыгрузкиДокументов);	
	    	 
		Если НЕ ЭтоРегистр Тогда
			
			НаличиеОрганизации = (МетаданныеДляОбмена.Реквизиты.Найти("Организация") <> Неопределено);
			
			МассивРеквизитовПоОрганизации = ОпределитьНаличиеОрганизацииВМетаданныхДляРегистрации(МетаданныеДляОбмена);
			НаличиеОрганизации      = МассивРеквизитовПоОрганизации.Количество() > 0 И ВозможныОрганиченияПоОрганизации;
            			
		Иначе
			
			НаличиеОрганизации   = (МетаданныеДляОбмена.Измерения.Найти("Организация") <> Неопределено);
			
		КонецЕсли;
		
		НаличиеОрганизации = ВозможныОрганиченияПоОрганизации И НаличиеОрганизации; 
		
		Если НаличиеОрганизации
			ИЛИ ВозможныОрганиченияПоДате Тогда
			
			ОграничениеВыборки = "";
			
			НужноЗарегистрироватьИзмененияДляВсехОбъектов = Ложь;
			
			Запрос = Новый Запрос();

			// нужно ограничить выборку  и зарегистрировать только эти изменения
						
			Если НаличиеОрганизации Тогда
				
				ОграничениеВыборкиПоОрганизации = "(";
				
				Для каждого РеквизитОрганизация Из МассивРеквизитовПоОрганизации Цикл
					
					ОграничениеВыборкиПоОрганизации = ОграничениеВыборкиПоОрганизации + "РегистрацияИзменений."+ РеквизитОрганизация + " В (&МассивОрганизаций) ИЛИ "
					
				КонецЦикла;
				//уберем последенее "ИЛИ"
				
				ОграничениеВыборкиПоОрганизации = Лев(ОграничениеВыборкиПоОрганизации,СтрДлина(ОграничениеВыборкиПоОрганизации)-4);
				ОграничениеВыборкиПоОрганизации = ОграничениеВыборкиПоОрганизации + " )";
				
				Запрос.УстановитьПараметр("МассивОрганизаций", Организации.Выгрузить().ВыгрузитьКолонку("Организация"));
				
			Иначе	
				
				ОграничениеВыборкиПоОрганизации = "";
				
			КонецЕсли;	
            			
			Если ВозможныОрганиченияПоДате Тогда
				
				ОграничениеВыборкиПоДате = "РегистрацияИзменений.Дата >= &ДатаОграничений";
				
				Запрос.УстановитьПараметр("ДатаОграничений", ДатаНачалаВыгрузкиДокументов);
				
			Иначе
				
				ОграничениеВыборкиПоДате = "";
				
			КонецЕсли;
						
			ОграничениеВыборки = "ГДЕ ИСТИНА" + Символы.ПС;
			
			Если ВозможныОрганиченияПоДате Тогда
				
				ОграничениеВыборки = ОграничениеВыборки + "
				|И " + ОграничениеВыборкиПоДате; 
				
			КонецЕсли;
			
			Если НаличиеОрганизации Тогда
				
				ОграничениеВыборки = ОграничениеВыборки + "
				|И " + ОграничениеВыборкиПоОрганизации; 
				
			КонецЕсли;	
						
			Если НЕ ЭтоРегистр Тогда
				
				Запрос.Текст = "ВЫБРАТЬ Ссылка КАК Ссылка
				|ИЗ
				|	" + ИмяСсылочногоТипа + " КАК РегистрацияИзменений
				|" + ОграничениеВыборки;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, Выборка.Ссылка, НужноПодключение);	
					
				КонецЦикла;
				
			Иначе
				
				МассивПолейВыбора = Новый Массив();				
				
				Если МетаданныеДляОбмена.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
					
					МассивПолейВыбора.Добавить("Регистратор");
					
				Иначе
					
					Если МетаданныеДляОбмена.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.НеПериодический Тогда
						
						МассивПолейВыбора.Добавить("Период");
						
					Конецесли;
					
					Для Каждого ИзмерениеРегистра Из МетаданныеДляОбмена.Измерения Цикл
						
						Если ИзмерениеРегистра.ОсновнойОтбор Тогда
							
							МассивПолейВыбора.Добавить(ИзмерениеРегистра.Имя);	
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтрокаПолейДляВыбора = "";
				Для Каждого ЭлементПолей Из МассивПолейВыбора Цикл
					СтрокаПолейДляВыбора = СтрокаПолейДляВыбора + "," + ЭлементПолей;
				КонецЦикла;
				
				СтрокаПолейДляВыбора = Сред(СтрокаПолейДляВыбора, 2);
				
				Запрос.Текст = "ВЫБРАТЬ Различные
				| " + СтрокаПолейДляВыбора + "
				|ИЗ
				|	" + ИмяСсылочногоТипа + " КАК РегистрацияИзменений
				|" + ОграничениеВыборки;
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					НаборЗаписейРегистра = РегистрыСведений[МетаданныеДляОбмена.Имя].СоздатьНаборЗаписей();
					Для Каждого ЭлементПолей Из МассивПолейВыбора Цикл
						НаборЗаписейРегистра.Отбор[ЭлементПолей].Установить(Выборка[ЭлементПолей]);
					КонецЦикла;
					
					ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, НаборЗаписейРегистра, НужноПодключение);	
					
				КонецЦикла;	
				
			КонецЕсли;				
			
		Конецесли;
		
	ИначеЕсли (НЕ РегистрироватьВсеИзменения)
		И НужноПодключение Тогда
		
		НужноЗарегистрироватьИзмененияДляВсехОбъектов = Ложь;
		
	КонецЕсли;
	
	Если НужноЗарегистрироватьИзмененияДляВсехОбъектов Тогда
		
		ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, НужноПодключение);	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПолнуюРегистрациюИзмененийДляУзлаПоМетаданному(УзелДляРегистрацииИзменений, МетаданныеДляОбмена, НужноПодключение) Экспорт
	
	Попытка
		
		Если НужноПодключение Тогда
			ПодключитьсяБезопасно();
			Если ПодключениеКПриемнику <> Неопределено Тогда
				ПодключениеКПриемнику.ПланыОбмена.ЗарегистрироватьИзменения(УзелДляРегистрацииИзменений, МетаданныеДляОбмена);
			КонецЕсли;
		Иначе
			ПланыОбмена.ЗарегистрироватьИзменения(УзелДляРегистрацииИзменений, МетаданныеДляОбмена);	
		КонецЕсли;	
		
	Исключение
		
	КонецПопытки;	
	
КонецПроцедуры

Процедура ПроверитьУстановленностьКодаУСобственногоУзла(ИмяПланаОбмена) Экспорт
	
	СобственныйУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
	Если ДействиеВыбранноеПользователем = 0 Тогда
		
		Если ЗначениеЗаполнено(СобственныйУзел.Код) Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		НужныйКод = мСтруктураНастроек.КодУзлаОбмена;
		
		Если СобственныйУзел.Код = НужныйКод Тогда
			Возврат;
		КонецЕсли;			
		
	КонецЕсли;
	
	ОбъектУзла = СобственныйУзел.ПолучитьОбъект();
	
	Если ДействиеВыбранноеПользователем = 0 Тогда
		ОбъектУзла.УстановитьНовыйКод();
	Иначе
		ОбъектУзла.Код = НужныйКод;
	КонецЕсли;
	
	Если ПустаяСтрока(ОбъектУзла.Наименование) Тогда
		
		ОбъектУзла.Наименование	= "Эта информационная база";
		
	КонецЕсли;
	
	ОбъектУзла.Записать();		
	
КонецПроцедуры


//возвращает массив имен реквизитов, которые могут участвовать в фильтрах
Функция ОпределитьНаличиеОрганизацииВМетаданныхДляРегистрации(МетаданныеОбъекта)
	
	МассивРеквизитов = Новый Массив;
		
	Если МетаданныеОбъекта = Метаданные.Документы.ПоступлениеТоваров
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.ВозвратТоваровОтПокупателя 
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.ВозвратТоваровПоставщику
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.ИнвентаризацияТоваров
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.СписаниеТоваров
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.ОприходованиеТоваров
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.РеализацияТоваров
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.КомплектацияНоменклатуры Тогда
		
		МассивРеквизитов.Добавить("Склад.Организация");
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ОтчетОРозничныхПродажах Тогда	
		
		МассивРеквизитов.Добавить("КассаККМ.Организация");
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ПриходныйКассовыйОрдер
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.РасходныйКассовыйОрдер
		ИЛИ МетаданныеОбъекта = Метаданные.Документы.ОплатаОтПокупателяПлатежнойКартой Тогда	
		
		МассивРеквизитов.Добавить("Организация");
		
	ИначеЕсли МетаданныеОбъекта = Метаданные.Документы.ПеремещениеТоваров Тогда	
		
		МассивРеквизитов.Добавить("СкладОтправитель.Организация");
		
	КонецЕсли;	
		
	Возврат МассивРеквизитов;
		
КонецФункции


//ПОИСК СОВПАДАЮЩИХ ОБЪЕКТОВ И АНАЛИЗ СОПОСТАВЛЕНИЯ ОБЪЕКТОВ

//Проверяет , является ли реквизит строкой неограниченной длины
//Параметры:
//ИмяРеквизита: строка . 
//МетаданныеОбъекта: метаданные проверяемого объекта
Функция ЭтоСтрокаНеограниченнойДлины(ИмяРеквизита,МетаданныеОбъекта) Экспорт
	
	ЭтоСтрокаНеограниченнойДлины = Ложь;
	
	Если НЕ (ИмяРеквизита="Код" 
		ИЛИ ИмяРеквизита="Наименование" 
		ИЛИ ИмяРеквизита="ЭтоГруппа" 
		ИЛИ ИмяРеквизита="Владелец"
		ИЛИ ИмяРеквизита="Родитель") Тогда
		Если МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Тип = Новый ОписаниеТипов("Строка") И
			МетаданныеОбъекта.Реквизиты[ИмяРеквизита].Тип.КвалификаторыСтроки.Длина = 0 тогда
			ЭтоСтрокаНеограниченнойДлины = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЭтоСтрокаНеограниченнойДлины;
	
КонецФункции
//возвращает v8x.ComConnector
Функция ПодключитьсяИВернутьРезультатПодключения()
	
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();
	
	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ФайловыйРежим", ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформыИнформационнойБазыДляПодключения);	
	РезультатПодключения = ОбработкаОбмена.ПодключитсяКИнформационнойБазе(СтруктураПодключения);
	
	Возврат РезультатПодключения;	
	
КонецФункции	

//выполняет поиск совпадающих объектов в одной или двух базах. 
//Возврат: дерево совпадающих элементов
Функция ВыполнитьПоискСовпадающихОбъектов() Экспорт
	
	ПоискОбъектов = Новый ДеревоЗначений;
	ПоискОбъектов.Колонки.Добавить("ВидОбъекта");
	ПоискОбъектов.Колонки.Добавить("Объект");
	ПоискОбъектов.Колонки.Добавить("КолВо_Всего");
	ПоискОбъектов.Колонки.Добавить("Группа");
	ПоискОбъектов.Колонки.Добавить("ЭтоСОМОбъект");
	ПоискОбъектов.Колонки.Добавить("ЗначенияРеквизитов");
	ПоискОбъектов.Колонки.Добавить("КоличествоЭлементов",Новый ОписаниеТипов("Число"));
	
	Если (НЕ НастройкаОбмена.Пустая()) ИЛИ ЭтапНастройки < 2 тогда
		
		Если ВозможностьПодключенияКоВторойИнформационнойБазе 
			И (НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение 
			ИЛИ ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение)  тогда
			
			ПодключитьсяБезопасно();
			НужноПодключение = Истина;
			
			Если ПодключениеКПриемнику = Неопределено Тогда
				
				#Если Клиент Тогда
					Предупреждение("Возникли ошибки при подключении к информационной базе-приемнику.");
				#КонецЕсли
				
			КонецЕсли;
			
		Иначе		
			
			НужноПодключение = Ложь;
			
		КонецЕсли;
		
		Если ВозможностьПодключенияКоВторойИнформационнойБазе
			И (НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение 
			ИЛИ ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение )
			И ПодключениеКПриемнику <> Неопределено Тогда
			
			ДанныеОбъектовМетаданных = ПодготовитьДанныеОбъектовМетаданных(НужноПодключение);	
			КопияДанныхОбъектовМетаданных = ДанныеОбъектовМетаданных.Скопировать();
			КоличествоСтрок = КопияДанныхОбъектовМетаданных.Количество()-1;
			
			Для Инд = 0 По КоличествоСтрок цикл
				
				Если КопияДанныхОбъектовМетаданных[КоличествоСтрок-Инд].ЭтоСОМОбъект тогда
					
					КопияДанныхОбъектовМетаданных.Удалить(КоличествоСтрок-Инд);
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		Иначе
			
			КопияДанныхОбъектовМетаданных = ПодготовитьДанныеОбъектовМетаданных();	
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СформироватьТекстЗапросаДляДанныхОбъектовМетаданных(КопияДанныхОбъектовМетаданных);
		Корень = ПоискОбъектов.Строки.Добавить();
		Корень.Объект = "База-источник(эта база)";
		
		Если СтрДлина(Запрос.Текст) > 0 Тогда
			
			ПакетПоискаОбъектов = Запрос.ВыполнитьПакет();
			СтрокаПервойЧасти = Корень.Строки.Добавить();
			СтрокаПервойЧасти.Объект = "Справочники";
			КоличествоОбъектов = 0;
			
			Для каждого РезультатЗапроса Из ПакетПоискаОбъектов цикл
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					ТаблицаНайденныхОбъектов = РезультатЗапроса.Выгрузить();
					СтрокаВидОбъектаДерева = СтрокаПервойЧасти.Строки.Добавить();	
					СтрокаВидОбъектаДерева.Объект = ТаблицаНайденныхОбъектов[0].ВидОбъекта;	
					МетаданныеОбъекта = КопияДанныхОбъектовМетаданных.Найти(ТаблицаНайденныхОбъектов[0].ВидОбъекта,"ИмяМетаданныхОбъекта");
					МассивОтборов     = МетаданныеОбъекта.МассивОтборов;
					КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
					СтрокаВидОбъектаДерева.КоличествоЭлементов = КоличествоНайденныхОбъектов+1; 
					КоличествоОбъектов = КоличествоОбъектов + СтрокаВидОбъектаДерева.КоличествоЭлементов;
					Инд = 0;
					
					Пока КоличествоНайденныхОбъектов > 0 цикл
						
						СтрокаГруппыДерева = СтрокаВидОбъектаДерева.Строки.Добавить();	
						СтрокаГруппыДерева.Объект = "" + Строка(Инд+1)+ " группа (";
						СтрокаГруппы = ТаблицаНайденныхОбъектов[КоличествоНайденныхОбъектов-1];
						ОтборГруппы  = Новый Структура;
						
						Для каждого ЭлементОтбора Из МассивОтборов цикл
							
							ОтборГруппы.Вставить(ЭлементОтбора,СтрокаГруппы[ЭлементОтбора]);
							СтрокаГруппыДерева.Объект = СтрокаГруппыДерева.Объект + ЭлементОтбора + ":"+Строка(СтрокаГруппы[ЭлементОтбора])+";"; 
							
						КонецЦикла;	
						//заменим последнюю ; на )
						СтрокаГруппыДерева.Объект = Лев(СтрокаГруппыДерева.Объект,СтрДлина(СтрокаГруппыДерева.Объект)-1) +")";
						МассивНайденныхСтрок = ТаблицаНайденныхОбъектов.НайтиСтроки(ОтборГруппы);
						СтрокаГруппыДерева.КоличествоЭлементов = МассивНайденныхСтрок.Количество();
						
						Для каждого НайденнаяСтрока из МассивНайденныхСтрок цикл
							
							СтрокаЭлементаДерева = СтрокаГруппыДерева.Строки.Добавить();	
							СтрокаЭлементаДерева.ЭтоСОМОбъект = Ложь;
							СтрокаЭлементаДерева.Объект      = НайденнаяСтрока.Объект;
							//-1 - это сам элемент
							СтрокаЭлементаДерева.КолВо_Всего = НайденнаяСтрока.КолВо_Всего-1;
							СтрокаЭлементаДерева.КоличествоЭлементов = 1;
							ТаблицаНайденныхОбъектов.Удалить(НайденнаяСтрока);		
							
						КонецЦикла;
						
						КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
						Инд = Инд+ 1;	
						
					КонецЦикла;	
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаПервойЧасти.КоличествоЭлементов = КоличествоОбъектов;
			Корень.КоличествоЭлементов = КоличествоОбъектов;
			
			Если КоличествоОбъектов = 0 Тогда
				
				Корень.Строки.Удалить(СтрокаПервойЧасти);
				
			КонецЕсли;	
			
		КонецЕсли;
		//документы
		Если ВозможностьПодключенияКоВторойИнформационнойБазе
			И (НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение 
			ИЛИ ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение )
			И ПодключениеКПриемнику <> Неопределено Тогда
			
			ДанныеОбъектовМетаданныхДокументов = ПодготовитьДанныеОбъектовМетаданныхДокументов(НужноПодключение);	
			КопияДанныхОбъектовМетаданныхДокументов = ДанныеОбъектовМетаданныхДокументов.Скопировать();
			КоличествоСтрок = КопияДанныхОбъектовМетаданныхДокументов.Количество()-1;
			
			Для Инд = 0 По КоличествоСтрок цикл
				
				Если КопияДанныхОбъектовМетаданныхДокументов[КоличествоСтрок-Инд].ЭтоСОМОбъект тогда
					
					КопияДанныхОбъектовМетаданныхДокументов.Удалить(КоличествоСтрок-Инд);
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		Иначе
			
			КопияДанныхОбъектовМетаданныхДокументов = ПодготовитьДанныеОбъектовМетаданныхДокументов();	
			
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = СформироватьТекстЗапросаДляДанныхОбъектовМетаданныхДокументов(КопияДанныхОбъектовМетаданныхДокументов);
		
		Если СтрДлина(Запрос.Текст) > 0 Тогда
			
			ПакетПоискаОбъектов = Запрос.ВыполнитьПакет();
			СтрокаПервойЧасти = Корень.Строки.Добавить();
			СтрокаПервойЧасти.Объект = "Документы";
			КоличествоОбъектов = 0;
			
			Для каждого РезультатЗапроса Из ПакетПоискаОбъектов цикл
				
				Если НЕ РезультатЗапроса.Пустой() Тогда
					
					ТаблицаНайденныхОбъектов = РезультатЗапроса.Выгрузить();
					СтрокаВидОбъектаДерева = СтрокаПервойЧасти.Строки.Добавить();	
					СтрокаВидОбъектаДерева.Объект = ТаблицаНайденныхОбъектов[0].ВидОбъекта;	
					МетаданныеОбъекта = КопияДанныхОбъектовМетаданныхДокументов.Найти(ТаблицаНайденныхОбъектов[0].ВидОбъекта,"ИмяМетаданныхОбъекта");
					МассивОтборов     = МетаданныеОбъекта.МассивОтборов;
					КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
					СтрокаВидОбъектаДерева.КоличествоЭлементов = КоличествоНайденныхОбъектов+1; 
					КоличествоОбъектов = КоличествоОбъектов + СтрокаВидОбъектаДерева.КоличествоЭлементов;
					Инд = 0;
					
					Пока КоличествоНайденныхОбъектов > 0 цикл
						
						СтрокаГруппыДерева = СтрокаВидОбъектаДерева.Строки.Добавить();	
						СтрокаГруппыДерева.Объект = "" + Строка(Инд+1)+ " группа (";
						СтрокаГруппы = ТаблицаНайденныхОбъектов[КоличествоНайденныхОбъектов-1];
						ОтборГруппы  = Новый Структура;
						
						Для каждого ЭлементОтбора Из МассивОтборов цикл
							
							ОтборГруппы.Вставить(ЭлементОтбора,СтрокаГруппы[ЭлементОтбора]);
							СтрокаГруппыДерева.Объект = СтрокаГруппыДерева.Объект + ЭлементОтбора + ":"+Строка(СтрокаГруппы[ЭлементОтбора])+";"; 
							
						КонецЦикла;	
						//заменим последнюю ; на )
						СтрокаГруппыДерева.Объект = Лев(СтрокаГруппыДерева.Объект,СтрДлина(СтрокаГруппыДерева.Объект)-1) +")";
						МассивНайденныхСтрок = ТаблицаНайденныхОбъектов.НайтиСтроки(ОтборГруппы);
						СтрокаГруппыДерева.КоличествоЭлементов = МассивНайденныхСтрок.Количество();
						
						Для каждого НайденнаяСтрока из МассивНайденныхСтрок цикл
							
							СтрокаЭлементаДерева = СтрокаГруппыДерева.Строки.Добавить();	
							СтрокаЭлементаДерева.ЭтоСОМОбъект = Ложь;
							СтрокаЭлементаДерева.Объект      = НайденнаяСтрока.Объект;
							//-1 - это сам элемент
							СтрокаЭлементаДерева.КолВо_Всего = НайденнаяСтрока.КолВо_Всего-1;
							СтрокаЭлементаДерева.КоличествоЭлементов = 1;
							ТаблицаНайденныхОбъектов.Удалить(НайденнаяСтрока);		
							
						КонецЦикла;
						
						КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
						Инд = Инд + 1;	
						
					КонецЦикла;	
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаПервойЧасти.КоличествоЭлементов = КоличествоОбъектов;
			Корень.КоличествоЭлементов = Корень.КоличествоЭлементов + КоличествоОбъектов;
			
			Если КоличествоОбъектов = 0 Тогда
				
				Корень.Строки.Удалить(СтрокаПервойЧасти);
				
			КонецЕсли;	
				
		КонецЕсли;
		//документы
		
		//СОМ
		Если (НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение
			ИЛИ ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение)
			И ПодключениеКПриемнику <> Неопределено Тогда
			//справочники
			Корень = ПоискОбъектов.Строки.Добавить();
			Корень.Объект = "База-приемник(удаленная база)";
			КопияДанныхОбъектовМетаданных = ДанныеОбъектовМетаданных.Скопировать();
			КоличествоСтрок = КопияДанныхОбъектовМетаданных.Количество()-1;
			
			Для Инд = 0 По КоличествоСтрок цикл
				
				Если НЕ КопияДанныхОбъектовМетаданных[КоличествоСтрок-Инд].ЭтоСОМОбъект тогда
					
					КопияДанныхОбъектовМетаданных.Удалить(КоличествоСтрок-Инд);
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			Запрос = ПодключениеКПриемнику.NewObject("Query");
			Запрос.Текст = СформироватьТекстЗапросаДляДанныхОбъектовМетаданных(КопияДанныхОбъектовМетаданных);
			
			Если СтрДлина(Запрос.Текст) > 0 Тогда
				
				ПакетПоискаОбъектов = Запрос.ВыполнитьПакет();
				КоличествоОбъектов = 0;
				СтрокаВторойЧасти = Корень.Строки.Добавить();
				СтрокаВторойЧасти.Объект = "Справочники";
				
				Для каждого РезультатЗапроса Из ПакетПоискаОбъектов цикл
					
					Если НЕ РезультатЗапроса.Пустой() Тогда
						
						ТаблицаНайденныхОбъектов = РезультатЗапроса.Выгрузить();
						
						СтрокаВидОбъектаДерева = СтрокаВторойЧасти.Строки.Добавить();	
						СтрокаВидОбъектаДерева.Объект = ТаблицаНайденныхОбъектов.Получить(0).ВидОбъекта;	
						МетаданныеОбъекта = КопияДанныхОбъектовМетаданных.Найти(ТаблицаНайденныхОбъектов.Получить(0).ВидОбъекта,"ИмяМетаданныхОбъекта");
						МассивОтборов     = МетаданныеОбъекта.МассивОтборов;
						КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
						СтрокаВидОбъектаДерева.КоличествоЭлементов = КоличествоНайденныхОбъектов+1; 
						КоличествоОбъектов = КоличествоОбъектов + СтрокаВидОбъектаДерева.КоличествоЭлементов;
						Инд = 0;
						
						Пока КоличествоНайденныхОбъектов > 0 цикл
							
							СтрокаГруппыДерева = СтрокаВидОбъектаДерева.Строки.Добавить();	
							СтрокаГруппыДерева.Объект = "" + Строка(Инд+1)+ " группа (";
							СтрокаГруппы = ТаблицаНайденныхОбъектов.Получить(КоличествоНайденныхОбъектов-1);
							ОтборГруппы  = ПодключениеКПриемнику.NewObject("Structure"); 
							
							Для каждого ЭлементОтбора Из МассивОтборов цикл
								
								ОтборГруппы.Вставить(ЭлементОтбора,СтрокаГруппы[ЭлементОтбора]);
								СтрокаГруппыДерева.Объект = СтрокаГруппыДерева.Объект + ЭлементОтбора + ":"+Строка(СтрокаГруппы[ЭлементОтбора])+";"; 
								
							КонецЦикла;	
							//заменим последнюю ; на )
							СтрокаГруппыДерева.Объект = Лев(СтрокаГруппыДерева.Объект,СтрДлина(СтрокаГруппыДерева.Объект)-1) +")";
							МассивНайденныхСтрок = ТаблицаНайденныхОбъектов.НайтиСтроки(ОтборГруппы);
							СтрокаГруппыДерева.КоличествоЭлементов = МассивНайденныхСтрок.Количество();
							
							Для каждого НайденнаяСтрока из МассивНайденныхСтрок цикл
								
								СтрокаЭлементаДерева = СтрокаГруппыДерева.Строки.Добавить();	
								СтрокаЭлементаДерева.ЭтоСОМОбъект = Истина;
								СтрокаЭлементаДерева.Объект      = НайденнаяСтрока.Объект.Наименование;
								//-1 - это сам элемент
								СтрокаЭлементаДерева.КолВо_Всего = НайденнаяСтрока.КолВо_Всего-1;
								СтрокаЭлементаДерева.КоличествоЭлементов = 1;
								//значение реквизитов объекта из второй ИБ
								СтрокаЭлементаДерева.ЗначенияРеквизитов = Новый Соответствие;
								ДанныеОбъекта = КопияДанныхОбъектовМетаданных.Найти(НайденнаяСтрока.ВидОбъекта,"ИмяМетаданныхОбъекта");
								
								Если ДанныеОбъекта<>Неопределено тогда
									
									СтрокаЭлементаДерева.ЭтоСОМОбъект = Истина;
									
									Для каждого Реквизит Из ДанныеОбъекта.МассивОтборов цикл
										
										СтрокаЭлементаДерева.ЗначенияРеквизитов.Вставить(Реквизит,НайденнаяСтрока.Объект[Реквизит]);
										
									КонецЦикла;	
									
								КонецЕсли;	 
								
								ТаблицаНайденныхОбъектов.Удалить(НайденнаяСтрока);		
								
							КонецЦикла;
							
							КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
							
							Инд = Инд + 1;	
						КонецЦикла;	
						
					КонецЕсли;
					
				КонецЦикла;
				//справочники
				СтрокаВторойЧасти.КоличествоЭлементов = КоличествоОбъектов;
				Корень.КоличествоЭлементов = Корень.КоличествоЭлементов + КоличествоОбъектов;
				
				Если КоличествоОбъектов = 0 Тогда
					
					Корень.Строки.Удалить(СтрокаВторойЧасти);
					
				КонецЕсли;	

				
			КонецЕсли;
			
			КопияДанныхОбъектовМетаданныхДокументов = ДанныеОбъектовМетаданныхДокументов.Скопировать();
			КоличествоСтрок = КопияДанныхОбъектовМетаданныхДокументов.Количество()-1;
			
			Для Инд = 0 По КоличествоСтрок цикл
				
				Если НЕ КопияДанныхОбъектовМетаданныхДокументов[КоличествоСтрок-Инд].ЭтоСОМОбъект тогда
					
					КопияДанныхОбъектовМетаданныхДокументов.Удалить(КоличествоСтрок-Инд);
					
				КонецЕсли;	
				
			КонецЦикла;	
			
			Запрос = ПодключениеКПриемнику.NewObject("Query");
			Запрос.Текст = СформироватьТекстЗапросаДляДанныхОбъектовМетаданныхДокументов(КопияДанныхОбъектовМетаданныхДокументов,Истина);
			
			Если СтрДлина(Запрос.Текст) > 0 Тогда
				
				ПакетПоискаОбъектов = Запрос.ВыполнитьПакет();
				СтрокаВторойЧасти = Корень.Строки.Добавить();
				СтрокаВторойЧасти.Объект = "Документы";
				КоличествоОбъектов = 0;
				
				Для каждого РезультатЗапроса Из ПакетПоискаОбъектов цикл
					
					Если НЕ РезультатЗапроса.Пустой() Тогда
						
						ТаблицаНайденныхОбъектов = РезультатЗапроса.Выгрузить();
						СтрокаВидОбъектаДерева = СтрокаВторойЧасти.Строки.Добавить();	
						СтрокаВидОбъектаДерева.Объект = ТаблицаНайденныхОбъектов.Получить(0).ВидОбъекта;	
						МетаданныеОбъекта = КопияДанныхОбъектовМетаданныхДокументов.Найти(ТаблицаНайденныхОбъектов.Получить(0).ВидОбъекта,"ИмяМетаданныхОбъекта");
						МассивОтборов     = МетаданныеОбъекта.МассивОтборов;
						КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
						СтрокаВидОбъектаДерева.КоличествоЭлементов = КоличествоНайденныхОбъектов+1; 
						КоличествоОбъектов = КоличествоОбъектов + СтрокаВидОбъектаДерева.КоличествоЭлементов;
						Инд = 0;
						
						Пока КоличествоНайденныхОбъектов > 0 цикл
							
							СтрокаГруппыДерева = СтрокаВидОбъектаДерева.Строки.Добавить();	
							СтрокаГруппыДерева.Объект = "" + Строка(Инд+1)+ " группа (";
							СтрокаГруппы = ТаблицаНайденныхОбъектов.Получить(КоличествоНайденныхОбъектов-1);
							ОтборГруппы  = ПодключениеКПриемнику.NewObject("Structure"); 
							
							Для каждого ЭлементОтбора Из МассивОтборов цикл
								
								ОтборГруппы.Вставить(ЭлементОтбора,СтрокаГруппы[ЭлементОтбора]);
								СтрокаГруппыДерева.Объект = СтрокаГруппыДерева.Объект + ЭлементОтбора + ":"+Строка(СтрокаГруппы[ЭлементОтбора])+";"; 
								
							КонецЦикла;	
							//заменим последнюю ; на )
							СтрокаГруппыДерева.Объект = Лев(СтрокаГруппыДерева.Объект,СтрДлина(СтрокаГруппыДерева.Объект)-1) +")";
							МассивНайденныхСтрок = ТаблицаНайденныхОбъектов.НайтиСтроки(ОтборГруппы);
							СтрокаГруппыДерева.КоличествоЭлементов = МассивНайденныхСтрок.Количество();
							
							Для каждого НайденнаяСтрока из МассивНайденныхСтрок цикл
								
								СтрокаЭлементаДерева = СтрокаГруппыДерева.Строки.Добавить();	
								СтрокаЭлементаДерева.ЭтоСОМОбъект = Истина;
								СтрокаЭлементаДерева.Объект      = НайденнаяСтрока.Объект.Метаданные().Синоним + " №" + НайденнаяСтрока.Номер +  " от " + НайденнаяСтрока.Объект.Дата;
								//-1 - это сам элемент
								СтрокаЭлементаДерева.КолВо_Всего = НайденнаяСтрока.КолВо_Всего-1;
								СтрокаЭлементаДерева.КоличествоЭлементов = 1;
								//значение реквизитов объекта из второй ИБ
								СтрокаЭлементаДерева.ЗначенияРеквизитов = Новый Соответствие;
								ДанныеОбъекта = КопияДанныхОбъектовМетаданных.Найти(НайденнаяСтрока.ВидОбъекта,"ИмяМетаданныхОбъекта");
								
								Если ДанныеОбъекта<>Неопределено тогда
									
									СтрокаЭлементаДерева.ЭтоСОМОбъект = Истина;
									
									Для каждого Реквизит Из ДанныеОбъекта.МассивОтборов цикл
										
										СтрокаЭлементаДерева.ЗначенияРеквизитов.Вставить(Реквизит,НайденнаяСтрока.Объект[Реквизит]);
										
									КонецЦикла;	
									
								КонецЕсли;	 
								
								ТаблицаНайденныхОбъектов.Удалить(НайденнаяСтрока);		
								
							КонецЦикла;
							
							КоличествоНайденныхОбъектов = ТаблицаНайденныхОбъектов.Количество()-1;
							Инд = Инд + 1;	
							
						КонецЦикла;	
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаВторойЧасти.КоличествоЭлементов = КоличествоОбъектов;
				Корень.КоличествоЭлементов = Корень.КоличествоЭлементов + КоличествоОбъектов;
				
				Если КоличествоОбъектов = 0 Тогда
					
					Корень.Строки.Удалить(СтрокаВторойЧасти);
					
				КонецЕсли;	

				
			КонецЕсли;
			
		КонецЕсли;
		КоличествоСтрок = ПоискОбъектов.Строки.Количество()-1;
		Для Инд = 0 По КоличествоСтрок Цикл
			
			Если ПоискОбъектов.Строки[КоличествоСтрок-Инд].КоличествоЭлементов = 0 Тогда
				
				ПоискОбъектов.Строки.Удалить(КоличествоСтрок-Инд);
				
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	Возврат ПоискОбъектов;
	
КонецФункции	

//Производит анализ правил выгрузки,настроек вариантов поиска, считывая поля поиска объектов
//
Функция ПодготовитьДанныеОбъектовМетаданных(НужноПодключение = Ложь) Экспорт
	
	ДанныеОбъектовМетаданных = Новый ТаблицаЗначений;
	ДанныеОбъектовМетаданных.Колонки.Добавить("МетаданныеОбъекта");
	ДанныеОбъектовМетаданных.Колонки.Добавить("МассивОтборов");
	ДанныеОбъектовМетаданных.Колонки.Добавить("НастройкаПоиска");
	ДанныеОбъектовМетаданных.Колонки.Добавить("ЭтоСОМОбъект");
	ДанныеОбъектовМетаданных.Колонки.Добавить("ИмяМетаданныхОбъекта");
	ДанныеОбъектовМетаданных.Колонки.Добавить("ВидИерархии");
	
	ЗадатьПараметрыОбработкиОбменаДанными(Истина,"Выгрузка");
	
	Если ЭтапНастройки < 2 тогда                  
		
		ПравилаВыгрузки = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ОпределитьТипИБПоПараметрам());
		
	Иначе 
		ПравилаВыгрузки = НастройкаОбмена.ПравилаОбмена.Получить();
		
	КонецЕсли;	
	
	ПрочитатьТаблицыИнформацииПравил(ПравилаВыгрузки,"Выгрузка");
	
	ТаблицаНастроекВыгрузкиДляПолейПоиска = мТаблицаНастроекПолейВРежимеВыгрузки;
	ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки = мТаблицаПравилВыгрузкиВРежимеВыгрузки;
	
	
	_ОбщаяТаблицаНастроекПолейПоиска = НастройкаВариантовПоискаОбъектов.Выгрузить();
	
	
	ПравилОбменаДляПоискаПоУмолчанию = ТаблицаНастроекВыгрузкиДляПолейПоиска.Скопировать();
	ПравилОбменаДляПоискаПоУмолчанию.Свернуть("КодПравилаОбмена");
	
	Для каждого ПравилоОбменаДляПоиска из ПравилОбменаДляПоискаПоУмолчанию цикл
		
		НастройкаПоиска = Неопределено;
		ПользовательскаяНастройкаПоиска = _ОбщаяТаблицаНастроекПолейПоиска.Найти(ПравилоОбменаДляПоиска.КодПравилаОбмена,"КодПравилаОбмена");
		
		Если ПользовательскаяНастройкаПоиска = Неопределено тогда  
			НастройкаПоиска = _ОбщаяТаблицаНастроекПолейПоиска.Добавить();
			НастройкаПоиска.ЭтоНастройкаДляВыгрузки = Истина;
		ИначеЕсли ПользовательскаяНастройкаПоиска.ИмяНастройкиДляАлгоритма = "" тогда 
			
			НастройкаПоиска = ПользовательскаяНастройкаПоиска;
			
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		
		Если мОбработкаОбменаДаннымиXML.Параметры.Свойство("ВариантыНастроекПоиска") И мОбработкаОбменаДаннымиXML.Параметры.ВариантыНастроекПоиска.Свойство(ПравилоОбменаДляПоиска.КодПравилаОбмена)  тогда
			ИмяНастройкиДляАлгоритма  = мОбработкаОбменаДаннымиXML.Параметры.ВариантыНастроекПоиска[ПравилоОбменаДляПоиска.КодПравилаОбмена];
			СтруктураОтбора.Вставить("ИмяНастройкиДляАлгоритма",ИмяНастройкиДляАлгоритма);
		КонецЕсли;	
		СтруктураОтбора.Вставить("КодПравилаОбмена",ПравилоОбменаДляПоиска.КодПравилаОбмена);
		СтрокиПоиска = ТаблицаНастроекВыгрузкиДляПолейПоиска.НайтиСтроки(СтруктураОтбора);
		СтрокаПоиска = СтрокиПоиска[0];	
		Если НастройкаПоиска<>Неопределено тогда
			ЗаполнитьЗначенияСвойств(НастройкаПоиска,СтрокаПоиска); 
		КонецЕсли;
		
	КонецЦикла;	
	
	
	
	КопияПравилОбменаДляПоиска = _ОбщаяТаблицаНастроекПолейПоиска.Скопировать();
	КопияПравилОбменаДляПоиска.Свернуть("КодПравилаОбмена,ЭтоНастройкаДляВыгрузки");
	
	Для каждого ПравилоОбменаДляПоиска Из КопияПравилОбменаДляПоиска цикл
		
		Если ПравилоОбменаДляПоиска.ЭтоНастройкаДляВыгрузки тогда
			ДанныеОбъектов = ДанныеОбъектовМетаданных.Добавить();
			ДанныеОбъектов.МетаданныеОбъекта = Метаданные.Справочники[ПравилоОбменаДляПоиска.КодПравилаОбмена];
			ДанныеОбъектов.ЭтоСОМОбъект = Ложь;
			ДанныеОбъектов.ИмяМетаданныхОбъекта = Метаданные.Справочники[ПравилоОбменаДляПоиска.КодПравилаОбмена].Имя;
			
		ИначеЕсли НужноПодключение И ПодключениеКПриемнику = Неопределено тогда
			Продолжить;
		Иначе
			ДанныеОбъектов = ДанныеОбъектовМетаданных.Добавить();
			ДанныеОбъектов.МетаданныеОбъекта = ПодключениеКПриемнику.Метаданные().Справочники[ПравилоОбменаДляПоиска.КодПравилаОбмена];
			ДанныеОбъектов.ЭтоСОМОбъект = Истина;
			ДанныеОбъектов.ИмяМетаданныхОбъекта = ПодключениеКПриемнику.Метаданные().Справочники[ПравилоОбменаДляПоиска.КодПравилаОбмена].Имя;
			
		КонецЕсли;	
		
		ДанныеОбъектов.НастройкаПоиска = ПравилоОбменаДляПоиска;
		ДанныеОбъектов.МассивОтборов = Новый Массив;
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("КодПравилаОбмена",ПравилоОбменаДляПоиска.КодПравилаОбмена);
		СтрокиПоиска = _ОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураОтбора);
		СтрокаПоиска = СтрокиПоиска[0];
		СтрокаРеквизитов = СтрокаПоиска.ИмяНастройкиДляАлгоритма;
		Поз = 1;
		Для Инд = 1 По СтрДлина(СтрокаРеквизитов) цикл
			
			ИмяРеквизита=Сред(СтрокаРеквизитов,Поз,Инд-Поз+1);
			Если ДанныеОбъектов.МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено 
				И НЕ ((ИмяРеквизита = "Код" И ДанныеОбъектов.МетаданныеОбъекта.ДлинаКода>0)
				ИЛИ (ИмяРеквизита = "Наименование" И ДанныеОбъектов.МетаданныеОбъекта.ДлинаНаименования>0))
				И НЕ (ИмяРеквизита = "Родитель" ИЛИ ИмяРеквизита = "ЭтоГруппа") Тогда
				
				Продолжить;
				
			КонецЕсли;
			ДанныеОбъектов.МассивОтборов.Добавить(ИмяРеквизита);
			Поз = Поз + СтрДлина(ИмяРеквизита);
			
		КонецЦикла;	
		
		
		
	КонецЦикла;	
	
	ЗадатьПараметрыОбработкиОбменаДанными(Истина,"Загрузка");
	
	ПрочитатьТаблицыИнформацииПравил(ПравилаВыгрузки,"Загрузка",Истина);
	
	ТаблицаПравилКонвертации = мОбработкаОбменаДаннымиXML.ТаблицаПравилКонвертации;
	
	Для каждого МетаСправочник Из Метаданные.Справочники цикл
		Если ДанныеОбъектовМетаданных.Найти(МетаСправочник.Имя,"ИмяМетаданныхОбъекта") =Неопределено тогда
			ПКО = ТаблицаПравилКонвертации.Найти("СправочникСсылка." + МетаСправочник.Имя,"Источник");
			Если ПКО <> Неопределено 
				И ПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли 
				И ПКО.СвойстваПоиска.Количество()>0  Тогда
				
				Если  ПКО.ЕстьОбработчикПоследовательностьПолейПоиска тогда
					//в правилах описана структура с поиском без вариантов настроек поиска, но с условиями в коде
					Если мОбработкаОбменаДаннымиXML.Параметры.Свойство("ПоискБезВариантовПоиска")
						И мОбработкаОбменаДаннымиXML.Параметры.ПоискБезВариантовПоиска.Свойство(ПКО.Имя)  Тогда
						
						ДанныеОбъектов = ДанныеОбъектовМетаданных.Добавить();
						ДанныеОбъектов.ИмяМетаданныхОбъекта = МетаСправочник.Имя;
						ДанныеОбъектов.МетаданныеОбъекта    = МетаСправочник;
						ДанныеОбъектов.ЭтоСОМОбъект         = Ложь;
						ДанныеОбъектов.МассивОтборов = Новый Массив;
						
						
						СтрокаРеквизитов  = мОбработкаОбменаДаннымиXML.Параметры.ПоискБезВариантовПоиска[ПКО.Имя];
						
						
						Поз = 1;
						Для Инд = 1 По СтрДлина(СтрокаРеквизитов) цикл
							
							ИмяРеквизита=Сред(СтрокаРеквизитов,Поз,Инд-Поз+1);
							Если ДанныеОбъектов.МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено 
								И НЕ ((ИмяРеквизита = "Код" И ДанныеОбъектов.МетаданныеОбъекта.ДлинаКода>0)
								ИЛИ (ИмяРеквизита = "Наименование" И ДанныеОбъектов.МетаданныеОбъекта.ДлинаНаименования>0)) 
								И НЕ (ИмяРеквизита = "Родитель" 
								ИЛИ ИмяРеквизита = "ЭтоГруппа"
								ИЛИ ИмяРеквизита = "Владелец") Тогда
								Продолжить;
								
							КонецЕсли;
							ДанныеОбъектов.МассивОтборов.Добавить(ИмяРеквизита);
							Поз = Поз + СтрДлина(ИмяРеквизита);
							
						КонецЦикла;	
						
					КонецЕсли;	
					
					
					
					
				Иначе	
					ДанныеОбъекта = ДанныеОбъектовМетаданных.Добавить();
					ДанныеОбъекта.ИмяМетаданныхОбъекта = МетаСправочник.Имя;
					ДанныеОбъекта.МетаданныеОбъекта    = МетаСправочник;
					ДанныеОбъекта.ЭтоСОМОбъект         = Ложь;
					ДанныеОбъекта.МассивОтборов = Новый Массив;
					
					Для каждого СвойствоПоиска Из ПКО.СвойстваПоиска цикл
						
						ИмяРеквизита = СвойствоПоиска.Источник; 
						Если ДанныеОбъекта.МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено 
							И НЕ (ИмяРеквизита = "Код" 
							ИЛИ ИмяРеквизита = "Наименование"
							ИЛИ ИмяРеквизита = "Владелец"
							ИЛИ ИмяРеквизита = "ЭтоГруппа"
							ИЛИ ИмяРеквизита = "Родитель"
							) Тогда
							Продолжить;
							
						КонецЕсли;
						ДанныеОбъекта.МассивОтборов.Добавить(ИмяРеквизита);
						
						
					КонецЦикла;	 
					
				КонецЕсли;
				
				
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	
	
	
	
	Если НужноПодключение И ПодключениеКПриемнику <> Неопределено тогда
		
		ОбработкаОбменаДаннымиXML = ПодключениеКПриемнику.Обработки.ОбменДаннымиXML.Создать();
		ОбработкаОбменаДаннымиXML.мРежимЗагрузкиИнформацииОПравилахОбмена = Истина;
		ОбработкаОбменаДаннымиXML.РежимОбмена = "Загрузка";
		ОбработкаОбменаДаннымиXML.ИнициализацияТаблицДанныхОПравилахОбмена();		
		
		
		Если ЭтапНастройки  < 2 тогда
			
			ПравилаВыгрузкиПриемника = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ОпределитьТипИБПоПараметрам());
			
		Иначе 
			ПравилаВыгрузкиПриемника = НастройкаОбмена.ПравилаОбменаДляПриемника.Получить();
			
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПравилаВыгрузкиПриемника) Тогда
			
			ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ПравилаВыгрузкиПриемника, "Строка");		
			
		КонецЕсли;
		
		ТаблицаПравилКонвертации = ОбработкаОбменаДаннымиXML.ТаблицаПравилКонвертации;
		
		//надо обнулить 
		мТаблицаНастроекПолейВРежимеЗагрузки = Неопределено;
		мТаблицаНастроекПолейВРежимеВыгрузки = Неопределено;
		
		Для каждого МетаСправочник Из ПодключениеКПриемнику.Метаданные().Справочники цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭтоСОМОбъект",Истина);
			СтруктураОтбора.Вставить("ИмяМетаданныхОбъекта",МетаСправочник.Имя);
			
			Если ДанныеОбъектовМетаданных.НайтиСтроки(СтруктураОтбора).Количество() = 0 тогда
				ПКО = ТаблицаПравилКонвертации.Найти("СправочникСсылка." + МетаСправочник.Имя,"Источник");
				Если ПКО <> Неопределено 
					И ПКО.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли 
					И ПКО.СвойстваПоиска.Количество()>0 
					И НЕ ПКО.ЕстьОбработчикПоследовательностьПолейПоиска тогда
					ДанныеОбъекта = ДанныеОбъектовМетаданных.Добавить();
					ДанныеОбъекта.ИмяМетаданныхОбъекта = МетаСправочник.Имя;
					ДанныеОбъекта.МетаданныеОбъекта    = МетаСправочник;
					ДанныеОбъекта.ЭтоСОМОбъект         = Истина;
					ДанныеОбъекта.МассивОтборов = Новый Массив;
					
					Для каждого СвойствоПоиска Из ПКО.СвойстваПоиска цикл
						
						ИмяРеквизита = СвойствоПоиска.Источник; 
						Если ДанныеОбъекта.МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизита) = Неопределено 
							И НЕ (ИмяРеквизита = "Код" 
							ИЛИ ИмяРеквизита = "Наименование"
							ИЛИ ИмяРеквизита = "Владелец"
							ИЛИ ИмяРеквизита = "ЭтоГруппа"
							ИЛИ ИмяРеквизита = "Родитель"
							
							) тогда
							Продолжить;
							
						КонецЕсли;
						ДанныеОбъекта.МассивОтборов.Добавить(ИмяРеквизита);
						
						
					КонецЦикла;	 
					
				КонецЕсли;	 
			КонецЕсли;	
		КонецЦикла;	
		
		
		ПКО = Неопределено;
		ТаблицаПравилКонвертации = Неопределено;
		ОбработкаОбменаДаннымиXML = Неопределено;
		
	КонецЕсли;
	
	//пост-проверка
	КоличествоСтрок = ДанныеОбъектовМетаданных.Количество()-1;
	Для Инд = 0 По КоличествоСтрок цикл
		Если ДанныеОбъектовМетаданных[КоличествоСтрок-Инд].МассивОтборов.Количество() = 0 тогда
			ДанныеОбъектовМетаданных.Удалить(КоличествоСтрок-Инд);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДанныеОбъектовМетаданных;
	
	
КонецФункции	

//Производит формирование запроса по нескольким объектам метаданных 
//Параметры: 
//ДанныеОбъектовМетаданных: таблица значений
Функция СформироватьТекстЗапросаДляДанныхОбъектовМетаданных(ДанныеОбъектовМетаданных) Экспорт
	
	ТекстЗапроса = "";
	
	Для  ИндексДанныхОбъектов = 0 По ДанныеОбъектовМетаданных.Количество()-1 цикл
		
		МетаданныеОбъекта = ДанныеОбъектовМетаданных[ИндексДанныхОбъектов].МетаданныеОбъекта;
		МассивОтборов     = ДанныеОбъектовМетаданных[ИндексДанныхОбъектов].МассивОтборов;
		
		ТекстЗапроса =ТекстЗапроса+"ВЫБРАТЬ
		| """ +МетаданныеОбъекта.Имя+""" " + "КАК ВидОбъекта,  
		|Объекты.Ссылка " +"КАК  Объект,";
		
		Для Инд = 0 По МассивОтборов.ВГраница() цикл
			Если ЭтоСтрокаНеограниченнойДлины(МассивОтборов[Инд],МетаданныеОбъекта) тогда
				ТекстЗапроса = ТекстЗапроса+"
				|ВЫРАЗИТЬ(Объекты."+МассивОтборов[Инд]+ " КАК СТРОКА(200)) КАК "+МассивОтборов[Инд]+","; 	
			Иначе
				ТекстЗапроса = ТекстЗапроса+"
				|Объекты."+МассивОтборов[Инд]+ " КАК "+МассивОтборов[Инд]+","; 
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "
		|Дубли_Всего.КолВо_Всего " +?(ИндексДанныхОбъектов=0,"КАК КолВо_Всего","")+ "";
		
		ТекстЗапроса = ТекстЗапроса + "
		| ИЗ Справочник."+МетаданныеОбъекта.Имя+ " КАК Объекты"+" ";
		ТекстЗапроса = ТекстЗапроса+"
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ";
		Для Инд = 0 По МассивОтборов.ВГраница() цикл
			Если ЭтоСтрокаНеограниченнойДлины(МассивОтборов[Инд],МетаданныеОбъекта) тогда
				ТекстЗапроса = ТекстЗапроса+"
				|ВЫРАЗИТЬ("+МетаданныеОбъекта.Имя+"."+МассивОтборов[Инд]+ " КАК СТРОКА(200)) КАК "+МассивОтборов[Инд]+","; 	
			Иначе
				ТекстЗапроса = ТекстЗапроса+"
				|"+МетаданныеОбъекта.Имя+"."+МассивОтборов[Инд]+ " КАК "+МассивОтборов[Инд]+","; 
			КонецЕсли;
			
			
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|КОЛИЧЕСТВО("+МетаданныеОбъекта.Имя+".Ссылка) КАК КолВо_Всего
		|ИЗ Справочник."+МетаданныеОбъекта.Имя+ " КАК "+МетаданныеОбъекта.Имя+" "; 
		
		Если МетаданныеОбъекта.Иерархический 
			И Строка(МетаданныеОбъекта.ВидИерархии) = "ИерархияГруппИЭлементов" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ НЕ "+МетаданныеОбъекта.Имя+ ".ЭтоГруппа"; 
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|СГРУППИРОВАТЬ ПО";
		Для Инд = 0 По МассивОтборов.ВГраница() цикл
			Если ЭтоСтрокаНеограниченнойДлины(МассивОтборов[Инд],МетаданныеОбъекта) тогда
				ТекстЗапроса = ТекстЗапроса+"
				|ВЫРАЗИТЬ("+МетаданныеОбъекта.Имя+"."+МассивОтборов[Инд]+ " КАК СТРОКА(200)),"; 	
			Иначе	
				ТекстЗапроса = ТекстЗапроса+"
				|"+МетаданныеОбъекта.Имя+"."+МассивОтборов[Инд]+ " ,"; 
			КонецЕсли;
			
		КонецЦикла;
		ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);
		Если ЭтоСтрокаНеограниченнойДлины(МассивОтборов[0],МетаданныеОбъекта) тогда
			ТекстЗапроса = ТекстЗапроса + ") КАК Дубли_Всего
			|	ПО  Дубли_Всего."+МассивОтборов[0]+"=ВЫРАЗИТЬ(Объекты."+МассивОтборов[0]+" КАК СТРОКА(200))";
		Иначе
			ТекстЗапроса = ТекстЗапроса + ") КАК Дубли_Всего
			|	ПО  Дубли_Всего."+МассивОтборов[0]+"=Объекты."+МассивОтборов[0]+" ";	
		КонецЕсли;
		
		Для Инд = 1 По МассивОтборов.ВГраница() цикл
			Если ЭтоСтрокаНеограниченнойДлины(МассивОтборов[Инд],МетаданныеОбъекта) тогда
			Иначе	
				ТекстЗапроса = ТекстЗапроса+"
				| И Дубли_Всего."+МассивОтборов[Инд]+"=Объекты."+МассивОтборов[Инд]+ " "; 
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса +"
		|ГДЕ
		| Дубли_Всего.КолВо_Всего > 1";
		
		Если НЕ (ИндексДанныхОбъектов = ДанныеОбъектовМетаданных.Количество()-1) тогда
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;	
	
КонецФункции

//Производит формирование запроса по нескольким объектам метаданных 
//Параметры: 
//ДанныеОбъектовМетаданных: таблица значений
Функция СформироватьТекстЗапросаДляДанныхОбъектовМетаданныхДокументов(ДанныеОбъектовМетаданных,НужноПодключение = Ложь) Экспорт
	
	ТекстЗапроса = "";
	
	Для  ИндексДанныхОбъектов = 0 По ДанныеОбъектовМетаданных.Количество()-1 цикл
		
		МетаданныеОбъекта = ДанныеОбъектовМетаданных[ИндексДанныхОбъектов].МетаданныеОбъекта;
		МассивОтборов     = ДанныеОбъектовМетаданных[ИндексДанныхОбъектов].МассивОтборов;
		
		ТекстЗапроса =ТекстЗапроса+"ВЫБРАТЬ
		| """ +МетаданныеОбъекта.Имя+""" " + "КАК ВидОбъекта,  
		|Объекты.Ссылка " +"КАК  Объект,
		|Объекты.Номер КАК Номер,"; 
		
		Если НЕ НужноПодключение  Тогда
			Если МетаданныеОбъекта.ПериодичностьНомера  <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|НАЧАЛОПЕРИОДА(Объекты.Дата,"+Строка(МетаданныеОбъекта.ПериодичностьНомера)+ ") КАК Дата,"; 
				
			КонецЕсли;	
		ИначеЕсли ПодключениеКПриемнику <> Неопределено Тогда
			Если МетаданныеОбъекта.ПериодичностьНомера  <> ПодключениеКПриемнику.Метаданные().СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|НАЧАЛОПЕРИОДА(Объекты.Дата,"+ПодключениеКПриемнику.String(МетаданныеОбъекта.ПериодичностьНомера)+ ") КАК Дата,"; 
				
			КонецЕсли;	
			
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "
		|Дубли_Всего.КолВо_Всего " +?(ИндексДанныхОбъектов=0,"КАК КолВо_Всего","")+ "";
		
		ТекстЗапроса = ТекстЗапроса + "
		| ИЗ Документ."+МетаданныеОбъекта.Имя+ " КАК Объекты"+" ";
		
		ТекстЗапроса = ТекстЗапроса+"
		|ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ";
		ТекстЗапроса = ТекстЗапроса+"
		|"+МетаданныеОбъекта.Имя+".Номер КАК Номер,";
		Если НЕ НужноПодключение Тогда
			
			Если МетаданныеОбъекта.ПериодичностьНомера  <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|НАЧАЛОПЕРИОДА("+МетаданныеОбъекта.Имя+".Дата,"+Строка(МетаданныеОбъекта.ПериодичностьНомера)+ ")  КАК Дата,"; 
			КонецЕсли;	
			
		ИначеЕсли ПодключениеКПриемнику <> Неопределено Тогда
			
			Если МетаданныеОбъекта.ПериодичностьНомера  <> ПодключениеКПриемнику.Метаданные().СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|НАЧАЛОПЕРИОДА("+МетаданныеОбъекта.Имя+".Дата,"+ПодключениеКПриемнику.String(МетаданныеОбъекта.ПериодичностьНомера)+ ")  КАК Дата,"; 
			КонецЕсли;	
			
			
		КонецЕсли;	
		
		ТекстЗапроса = ТекстЗапроса + "
		|КОЛИЧЕСТВО("+МетаданныеОбъекта.Имя+".Ссылка) КАК КолВо_Всего
		|ИЗ Документ."+МетаданныеОбъекта.Имя+ " КАК "+МетаданныеОбъекта.Имя+" 
		|СГРУППИРОВАТЬ ПО";
		ТекстЗапроса = ТекстЗапроса+"
		|"+МетаданныеОбъекта.Имя+".Номер ,"; 
		
		
		
		Если НЕ НужноПодключение Тогда
			
			Если МетаданныеОбъекта.ПериодичностьНомера  <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|НАЧАЛОПЕРИОДА("+МетаданныеОбъекта.Имя+".Дата,"+Строка(МетаданныеОбъекта.ПериодичностьНомера)+ "),"; 
			КонецЕсли;	
		ИначеЕсли ПодключениеКПриемнику <> Неопределено Тогда
			
			Если МетаданныеОбъекта.ПериодичностьНомера  <> ПодключениеКПриемнику.Метаданные().СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				|НАЧАЛОПЕРИОДА("+МетаданныеОбъекта.Имя+".Дата,"+ПодключениеКПриемнику.String(МетаданныеОбъекта.ПериодичностьНомера)+ "),"; 
			КонецЕсли;	
			
			
			
		КонецЕсли;	
		
		ТекстЗапроса = Сред(ТекстЗапроса,1,СтрДлина(ТекстЗапроса)-1);
		ТекстЗапроса = ТекстЗапроса + ") КАК Дубли_Всего
		|	ПО  Дубли_Всего.Номер=Объекты.Номер ";	
		
		
		Если НЕ НужноПодключение Тогда
			
			Если МетаданныеОбъекта.ПериодичностьНомера  <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				| И Дубли_Всего.Дата=НАЧАЛОПЕРИОДА(Объекты.Дата,"+Строка(МетаданныеОбъекта.ПериодичностьНомера)+ ") "+" "; 
			КонецЕсли;
			
		ИначеЕсли ПодключениеКПриемнику <> Неопределено Тогда
			
			Если МетаданныеОбъекта.ПериодичностьНомера  <> ПодключениеКПриемнику.Метаданные().СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
				ТекстЗапроса = ТекстЗапроса+"
				| И Дубли_Всего.Дата=НАЧАЛОПЕРИОДА(Объекты.Дата,"+ПодключениеКПриемнику.String(МетаданныеОбъекта.ПериодичностьНомера)+ ") "+" "; 
			КонецЕсли;
			
			
			
		КонецЕсли;	
		
		
		ТекстЗапроса = ТекстЗапроса +"
		|ГДЕ
		| Дубли_Всего.КолВо_Всего > 1";
		
		Если НЕ (ИндексДанныхОбъектов = ДанныеОбъектовМетаданных.Количество()-1) тогда
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;	
	
КонецФункции

//Производит анализ правил выгрузки,настроек вариантов поиска, считывая поля поиска объектов
//
Функция ПодготовитьДанныеОбъектовМетаданныхДокументов(НужноПодключение = Ложь) Экспорт
	
	ДанныеОбъектовМетаданных = Новый ТаблицаЗначений;
	ДанныеОбъектовМетаданных.Колонки.Добавить("МетаданныеОбъекта");
	ДанныеОбъектовМетаданных.Колонки.Добавить("МассивОтборов");
	ДанныеОбъектовМетаданных.Колонки.Добавить("ЭтоСОМОбъект");
	ДанныеОбъектовМетаданных.Колонки.Добавить("ИмяМетаданныхОбъекта");
	
	ЗадатьПараметрыОбработкиОбменаДанными(Истина,"Выгрузка");
	
	Если ЭтапНастройки < 2 тогда                  
		
		ПравилаВыгрузки = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ОпределитьТипИБПоПараметрам());
		
	Иначе 
		ПравилаВыгрузки = НастройкаОбмена.ПравилаОбмена.Получить();
		
	КонецЕсли;	
	
	ЗадатьПараметрыОбработкиОбменаДанными(Истина,"Загрузка");
	
	ПрочитатьТаблицыИнформацииПравил(ПравилаВыгрузки,"Загрузка");
	
	ТаблицаПравилКонвертации = мОбработкаОбменаДаннымиXML.ТаблицаПравилКонвертации;
	
	Для каждого МетаДокумент Из Метаданные.Документы цикл
		Если ДанныеОбъектовМетаданных.Найти(МетаДокумент.Имя,"ИмяМетаданныхОбъекта") =Неопределено тогда
			ПКО = ТаблицаПравилКонвертации.Найти("ДокументСсылка." + МетаДокумент.Имя,"Источник");
			Если ПКО <> Неопределено Тогда
				
				
				ДанныеОбъекта = ДанныеОбъектовМетаданных.Добавить();
				ДанныеОбъекта.ИмяМетаданныхОбъекта = МетаДокумент.Имя;
				ДанныеОбъекта.МетаданныеОбъекта    = МетаДокумент;
				ДанныеОбъекта.ЭтоСОМОбъект         = Ложь;
				ДанныеОбъекта.МассивОтборов = Новый Массив;
				ДанныеОбъекта.МассивОтборов.Добавить("Номер");
				
				Если ДанныеОбъекта.МетаданныеОбъекта.ПериодичностьНомера  <> Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
					ДанныеОбъекта.МассивОтборов.Добавить("Дата");
				КонецЕсли;	
				
			КонецЕсли;	 
		КонецЕсли;	
	КонецЦикла;	
	
	Если НужноПодключение И ПодключениеКПриемнику <> Неопределено тогда
		
		ОбработкаОбменаДаннымиXML = ПодключениеКПриемнику.Обработки.ОбменДаннымиXML.Создать();
		ОбработкаОбменаДаннымиXML.мРежимЗагрузкиИнформацииОПравилахОбмена = Истина;
		ОбработкаОбменаДаннымиXML.РежимОбмена = "Загрузка";
		ОбработкаОбменаДаннымиXML.ИнициализацияТаблицДанныхОПравилахОбмена();		
		
		
		Если ЭтапНастройки < 2 тогда
			
			ПравилаВыгрузкиПриемника = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ОпределитьТипИБПоПараметрам());
			
		Иначе 
			ПравилаВыгрузкиПриемника = НастройкаОбмена.ПравилаОбменаДляПриемника.Получить();
			
		КонецЕсли;
		
		
		Если НЕ ПустаяСтрока(ПравилаВыгрузкиПриемника) Тогда
			
			ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ПравилаВыгрузкиПриемника, "Строка");		
			
		КонецЕсли;
		
		ТаблицаПравилКонвертации = ОбработкаОбменаДаннымиXML.ТаблицаПравилКонвертации;
		
		Для каждого МетаДокумент Из ПодключениеКПриемнику.Метаданные().Документы цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ЭтоСОМОбъект",Истина);
			СтруктураОтбора.Вставить("ИмяМетаданныхОбъекта",МетаДокумент.Имя);
			Если ДанныеОбъектовМетаданных.НайтиСтроки(СтруктураОтбора).Количество() = 0 тогда
				ПКО = ТаблицаПравилКонвертации.Найти("ДокументСсылка." + МетаДокумент.Имя,"Источник");
				Если ПКО <> Неопределено Тогда
					
					
					ДанныеОбъекта = ДанныеОбъектовМетаданных.Добавить();
					ДанныеОбъекта.ИмяМетаданныхОбъекта = МетаДокумент.Имя;
					ДанныеОбъекта.МетаданныеОбъекта    = МетаДокумент;
					ДанныеОбъекта.ЭтоСОМОбъект         = Истина;
					ДанныеОбъекта.МассивОтборов = Новый Массив;
					ДанныеОбъекта.МассивОтборов.Добавить("Номер");
					
					Если ДанныеОбъекта.МетаданныеОбъекта.ПериодичностьНомера  <> ПодключениеКПриемнику.Метаданные().СвойстваОбъектов.ПериодичностьНомераДокумента.Непериодический Тогда
						ДанныеОбъекта.МассивОтборов.Добавить("Дата");
					КонецЕсли;	
					
				КонецЕсли;	 
			КонецЕсли;	
		КонецЦикла;	
		
		
		ПКО = Неопределено;
		ТаблицаПравилКонвертации = Неопределено;
		ОбработкаОбменаДаннымиXML = Неопределено;
		
	КонецЕсли;
	
	//пост-проверка
	КоличествоСтрок = ДанныеОбъектовМетаданных.Количество()-1;
	Для Инд = 0 По КоличествоСтрок цикл
		Если ДанныеОбъектовМетаданных[КоличествоСтрок-Инд].МассивОтборов.Количество() = 0 тогда
			ДанныеОбъектовМетаданных.Удалить(КоличествоСтрок-Инд);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДанныеОбъектовМетаданных;
	
	
КонецФункции	

//Возврат : Структура анализа с деревьями-вариантами анализа в значениях 
Функция ВыполнитьАнализСопоставленияОбъектов(ДляОтображения = Ложь) Экспорт
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		ПодключитьсяБезопасно();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ";
	
	Если ДляОтображения тогда
		
		Запрос.Текст = Запрос.Текст+"
		|	""Объекты базы-источника"" КАК Заголовок,";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст+"
	|	ПодЗапрос.УзелОбмена КАК УзелОбмена,
	|	ПодЗапрос.СобственнаяСсылка КАК СобственнаяСсылка,
	|	КОЛИЧЕСТВО(СсылкиВДругихИБ.СсылкаВДругойИБ) КАК КоличествоСопоставлений,
	|	СсылкиВДругихИБ.СсылкаВДругойИБ КАК СсылкаВДругойИБ
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоответствиеОбъектовДляОбмена.УзелОбмена КАК УзелОбмена,
	|		СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка,
	|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ) КАК КоличествоСопоставлений
	|	ИЗ
	|		РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|   ГДЕ 
	|   (СоответствиеОбъектовДляОбмена.УзелОбмена  = &УзелОбмена
	|    ИЛИ СоответствиеОбъектовДляОбмена.УзелОбмена = &ЭтотУзел)                                                   
	|
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоответствиеОбъектовДляОбмена.УзелОбмена,
	|		СоответствиеОбъектовДляОбмена.СобственнаяСсылка
	|	
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ) > 1) КАК ПодЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляОбмена КАК СсылкиВДругихИБ
	|		ПО ПодЗапрос.УзелОбмена = СсылкиВДругихИБ.УзелОбмена
	|			И ПодЗапрос.СобственнаяСсылка = СсылкиВДругихИБ.СобственнаяСсылка
	|СГРУППИРОВАТЬ ПО
	|ПодЗапрос.УзелОбмена,
	|ПодЗапрос.СобственнаяСсылка,
	|СсылкиВДругихИБ.СсылкаВДругойИБ";
	
	Если ДляОтображения тогда
		
		Запрос.Текст = Запрос.Текст+"
	|ИТОГИ 
	|  СУММА(КоличествоСопоставлений)
	|ПО
	|	Заголовок,
	|	УзелОбмена,
	|	СобственнаяСсылка";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////////////////////
	|
	|ВЫБРАТЬ";
	
	Если ДляОтображения тогда
		
		Запрос.Текст = Запрос.Текст+"
	|	""Объекты базы-приемника"" КАК Заголовок,";
	
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст+"
	|	ПодЗапрос.УзелОбмена КАК УзелОбмена,
	|	ПодЗапрос.СсылкаВДругойИБ КАК СсылкаВДругойИБ,
	|	КОЛИЧЕСТВО(СсылкиВДругихИБ.СобственнаяСсылка)  КАК КоличествоСопоставлений,
	|	СсылкиВДругихИБ.СобственнаяСсылка КАК СобственнаяСсылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		СоответствиеОбъектовДляОбмена.УзелОбмена КАК УзелОбмена,
	|		СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ,
	|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СобственнаяСсылка) КАК КоличествоСопоставлений
	|	ИЗ
	|		РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	|	ГДЕ
	|		СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ <> """"
	|   И 
	|   (СоответствиеОбъектовДляОбмена.УзелОбмена  = &УзелОбмена
	|    ИЛИ СоответствиеОбъектовДляОбмена.УзелОбмена = &ЭтотУзел)    
	|	
	|	СГРУППИРОВАТЬ ПО
	|		СоответствиеОбъектовДляОбмена.УзелОбмена,
	|		СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ
	|	
	|	ИМЕЮЩИЕ
	|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СобственнаяСсылка) > 1) КАК ПодЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляОбмена КАК СсылкиВДругихИБ
	|		ПО ПодЗапрос.УзелОбмена = СсылкиВДругихИБ.УзелОбмена
	|			И ПодЗапрос.СсылкаВДругойИБ = СсылкиВДругихИБ.СсылкаВДругойИБ
	|СГРУППИРОВАТЬ ПО
	|ПодЗапрос.УзелОбмена,
	|ПодЗапрос.СсылкаВДругойИБ,
	|СсылкиВДругихИБ.СобственнаяСсылка";
	
	Если ДляОтображения тогда
		
		Запрос.Текст = Запрос.Текст+"	
	|ИТОГИ 
	|  СУММА(КоличествоСопоставлений)
	| ПО
	|	Заголовок,
	|	УзелОбмена,
	|	СсылкаВДругойИБ";
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзелОбмена",?(ЗначениеЗаполнено(НастройкаОбмена),НастройкаОбмена.УзелИнформационнойБазы,УзелИнформационнойБазы));
	Запрос.УстановитьПараметр("ЭтотУзел",ПланыОбмена.ОбменРозницаБухгалтерия20.ЭтотУзел());
	МассивРезультатов = Запрос.ВыполнитьПакет();
	СтруктураАнализа = Новый Структура;
		
	Если ДляОтображения Тогда 
		
		СтруктураАнализа.Вставить("ПерваяЧастьЭтаБаза",МассивРезультатов[0].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
		СтруктураАнализа.Вставить("ВтораяЧастьЭтаБаза",МассивРезультатов[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам));
		СтруктураАнализа.Вставить("ПерваяЧастьДругаяБаза",Новый ДеревоЗначений);
		СтруктураАнализа.Вставить("ВтораяЧастьДругаяБаза",Новый ДеревоЗначений);
		
	Иначе
		
		СтруктураАнализа.Вставить("ПерваяЧастьЭтаБаза",МассивРезультатов[0].Выгрузить());
		СтруктураАнализа.Вставить("ВтораяЧастьЭтаБаза",МассивРезультатов[1].Выгрузить());
		СтруктураАнализа.Вставить("ПерваяЧастьДругаяБаза",Новый ТаблицаЗначений);
		СтруктураАнализа.Вставить("ВтораяЧастьДругаяБаза",Новый ТаблицаЗначений);
		
	КонецЕсли;
	
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				
		Запрос = ПодключениеКПриемнику.NewObject("Query");
		Запрос.Текст ="ВЫБРАТЬ ";
		
		Если ДляОтображения тогда
			
			Запрос.Текст = Запрос.Текст+"
		|	""Объекты базы-источника"" КАК Заголовок,";
		
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст+"
		|	ПодЗапрос.УзелОбмена КАК УзелОбмена,
		|	ПодЗапрос.СобственнаяСсылка КАК СобственнаяСсылка,
		|	КОЛИЧЕСТВО(СсылкиВДругихИБ.СсылкаВДругойИБ) КАК КоличествоСопоставлений,
		|	СсылкиВДругихИБ.СсылкаВДругойИБ КАК СсылкаВДругойИБ
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоответствиеОбъектовДляОбмена.УзелОбмена КАК УзелОбмена,
		|		СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка,
		|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ) КАК КоличествоСопоставлений
		|	ИЗ
		|		РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|   ГДЕ 
		|   (СоответствиеОбъектовДляОбмена.УзелОбмена.Код  = &УзелОбмена
		|    ИЛИ СоответствиеОбъектовДляОбмена.УзелОбмена.Код = &ЭтотУзел)                                                   
		|	И СоответствиеОбъектовДляОбмена.УзелОбмена ССЫЛКА ПланОбмена.ОбменРозницаБухгалтерия20
		|
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СоответствиеОбъектовДляОбмена.УзелОбмена,
		|		СоответствиеОбъектовДляОбмена.СобственнаяСсылка
		|	
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ) > 1) КАК ПодЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляОбмена КАК СсылкиВДругихИБ
		|		ПО ПодЗапрос.УзелОбмена = СсылкиВДругихИБ.УзелОбмена
		|			И ПодЗапрос.СобственнаяСсылка = СсылкиВДругихИБ.СобственнаяСсылка
		|СГРУППИРОВАТЬ ПО
		|ПодЗапрос.УзелОбмена,
		|ПодЗапрос.СобственнаяСсылка,
		|СсылкиВДругихИБ.СсылкаВДругойИБ";
		Если ДляОтображения тогда
			
			Запрос.Текст = Запрос.Текст+"
		|ИТОГИ 
		|  СУММА(КоличествоСопоставлений)
		|ПО
		|	Заголовок,
		|	УзелОбмена,
		|	СобственнаяСсылка";
		
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////////////////////////////
		|
		|ВЫБРАТЬ";
		
		Если ДляОтображения тогда
			
			Запрос.Текст = Запрос.Текст+"
		|	""Объекты базы-приемника"" КАК Заголовок,";
		
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст+"
		|	ПодЗапрос.УзелОбмена КАК УзелОбмена,
		|	ПодЗапрос.СсылкаВДругойИБ КАК СсылкаВДругойИБ,
		|	КОЛИЧЕСТВО(СсылкиВДругихИБ.СобственнаяСсылка)  КАК КоличествоСопоставлений,
		|	СсылкиВДругихИБ.СобственнаяСсылка КАК СобственнаяСсылка
		|ИЗ
		|	(ВЫБРАТЬ
		|		СоответствиеОбъектовДляОбмена.УзелОбмена КАК УзелОбмена,
		|		СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ,
		|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СобственнаяСсылка) КАК КоличествоСопоставлений
		|	ИЗ
		|		РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
		|	ГДЕ
		|		СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ <> """"
		|   И 
		|   (СоответствиеОбъектовДляОбмена.УзелОбмена.Код  = &УзелОбмена
		|    ИЛИ СоответствиеОбъектовДляОбмена.УзелОбмена.Код = &ЭтотУзел)    
		|	И СоответствиеОбъектовДляОбмена.УзелОбмена ССЫЛКА ПланОбмена.ОбменРозницаБухгалтерия20
		|	
		|	СГРУППИРОВАТЬ ПО
		|		СоответствиеОбъектовДляОбмена.УзелОбмена,
		|		СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ
		|	
		|	ИМЕЮЩИЕ
		|		КОЛИЧЕСТВО(СоответствиеОбъектовДляОбмена.СобственнаяСсылка) > 1) КАК ПодЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовДляОбмена КАК СсылкиВДругихИБ
		|		ПО ПодЗапрос.УзелОбмена = СсылкиВДругихИБ.УзелОбмена
		|			И ПодЗапрос.СсылкаВДругойИБ = СсылкиВДругихИБ.СсылкаВДругойИБ
		|СГРУППИРОВАТЬ ПО
		|ПодЗапрос.УзелОбмена,
		|ПодЗапрос.СсылкаВДругойИБ,
		|СсылкиВДругихИБ.СобственнаяСсылка";
		
		Если ДляОтображения тогда
			
			Запрос.Текст = Запрос.Текст+"
		|ИТОГИ 
		|  СУММА(КоличествоСопоставлений)
		| ПО
		|	Заголовок,
		|	УзелОбмена,
		|	СсылкаВДругойИБ";
		
		КонецЕсли;
		
		Запрос.УстановитьПараметр("УзелОбмена",?(ЗначениеЗаполнено(НастройкаОбмена),НастройкаОбмена.УзелИнформационнойБазы.Код,УзелИнформационнойБазы.Код));
		Запрос.УстановитьПараметр("ЭтотУзел",ПланыОбмена.ОбменРозницаБухгалтерия20.ЭтотУзел().Код);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		//необходимо преобразовать результаты запросов
		Если ДляОтображения Тогда 
			
			ДеревоРезультатовСОМ = МассивРезультатов.Получить(0).Выгрузить(ПодключениеКПриемнику.ОбходРезультатаЗапроса.ПоГруппировкам);
			ДеревоРезультатов    = Новый ДеревоЗначений;
			
			Для каждого КолонкаСОМ Из ДеревоРезультатовСОМ.Колонки цикл
				
				ДеревоРезультатов.Колонки.Добавить(КолонкаСОМ.Имя);
				
			КонецЦикла;	
			
			Для каждого СтрокаЗаголовкаСОМ Из ДеревоРезультатовСОМ.Строки цикл
				
				СтрокаЗаголовка = ДеревоРезультатов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаголовка,СтрокаЗаголовкаСОМ);
						
				Для каждого СтрокаУзлаСОМ Из СтрокаЗаголовкаСОМ.Строки цикл
					
					СтрокаУзла = СтрокаЗаголовка.Строки.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаУзла,СтрокаУзлаСОМ);
					СтрокаУзла.УзелОбмена        = СтрокаУзла.УзелОбмена.Наименование;
								
					Для каждого СтрокаОбъектаСОМ Из СтрокаУзлаСОМ.Строки цикл
						
						СтрокаОбъекта = СтрокаУзла.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОбъекта,СтрокаОбъектаСОМ);
						СтрокаОбъекта.СобственнаяСсылка = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаОбъекта.СобственнаяСсылка);
						
						Если СтрокаОбъекта.СсылкаВДругойИБ <> Null Тогда
							
							СтрокаОбъекта.СсылкаВДругойИБ   = ЗначениеИзСтрокиВнутр(СтрокаОбъекта.СсылкаВДругойИБ);
												
						КонецЕсли;
						
						Для каждого СтрокаДубляСОМ Из СтрокаОбъектаСОМ.Строки цикл
							
							СтрокаДубля = СтрокаОбъекта.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДубля,СтрокаДубляСОМ);
							
							СтрокаДубля.СобственнаяСсылка = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаДубля.СобственнаяСсылка);
							СтрокаДубля.СсылкаВДругойИБ   = ЗначениеИзСтрокиВнутр(СтрокаДубля.СсылкаВДругойИБ);
							СтрокаДубля.УзелОбмена        = ПланыОбмена.ОбменРозницаБухгалтерия20.НайтиПоКоду(СтрокаДубля.УзелОбмена.Код);
														
						КонецЦикла;	
						
					КонецЦикла;	
					
				КонецЦикла;	
				
				
			КонецЦикла;	
			
			СтруктураАнализа.Вставить("ПерваяЧастьДругаяБаза",ДеревоРезультатов);
			
			ДеревоРезультатовСОМ = МассивРезультатов.Получить(1).Выгрузить(ПодключениеКПриемнику.ОбходРезультатаЗапроса.ПоГруппировкам);
			ДеревоРезультатов    = Новый ДеревоЗначений;
			
			Для каждого КолонкаСОМ Из ДеревоРезультатовСОМ.Колонки цикл
				
				ДеревоРезультатов.Колонки.Добавить(КолонкаСОМ.Имя);
				
			КонецЦикла;	
			
			Для каждого СтрокаЗаголовкаСОМ Из ДеревоРезультатовСОМ.Строки цикл
				
				СтрокаЗаголовка = ДеревоРезультатов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗаголовка,СтрокаЗаголовкаСОМ);
				
				Для каждого СтрокаУзлаСОМ Из СтрокаЗаголовкаСОМ.Строки цикл
					
					СтрокаУзла = СтрокаЗаголовка.Строки.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаУзла,СтрокаУзлаСОМ);
					СтрокаУзла.УзелОбмена        = СтрокаУзла.УзелОбмена.Наименование;
										
					Для каждого СтрокаОбъектаСОМ Из СтрокаУзлаСОМ.Строки цикл
						
						СтрокаОбъекта = СтрокаУзла.Строки.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаОбъекта,СтрокаОбъектаСОМ);
						СтрокаОбъекта.СобственнаяСсылка = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаОбъекта.СобственнаяСсылка);
						
						Если СтрокаОбъекта.СсылкаВДругойИБ <> Null Тогда
							
							СтрокаОбъекта.СсылкаВДругойИБ   = ЗначениеИзСтрокиВнутр(СтрокаОбъекта.СсылкаВДругойИБ);
							
						КонецЕсли;
						
						Для каждого СтрокаДубляСОМ Из СтрокаОбъектаСОМ.Строки цикл
							
							СтрокаДубля = СтрокаОбъекта.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаДубля,СтрокаДубляСОМ);
							
							СтрокаДубля.СобственнаяСсылка = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаДубля.СобственнаяСсылка);
							СтрокаДубля.СсылкаВДругойИБ   = ЗначениеИзСтрокиВнутр(СтрокаДубля.СсылкаВДругойИБ);
							СтрокаДубля.УзелОбмена        = ПланыОбмена.ОбменРозницаБухгалтерия20.НайтиПоКоду(СтрокаДубля.УзелОбмена.Код);
																				
						КонецЦикла;	
						
					КонецЦикла;	
					
				КонецЦикла;	
				        				
			КонецЦикла;	
			            			
			СтруктураАнализа.Вставить("ВтораяЧастьДругаяБаза",ДеревоРезультатов);
			
		Иначе
			
			ТаблицаРезультатовСОМ = МассивРезультатов.Получить(0).Выгрузить();
			ТаблицаРезультатов    = Новый ТаблицаЗначений;
			
			Для каждого КолонкаСОМ Из ТаблицаРезультатовСОМ.Колонки цикл
				
				ТаблицаРезультатов.Колонки.Добавить(КолонкаСОМ.Имя);
				
			КонецЦикла;	
			
			Для каждого СтрокаСОМ Из ТаблицаРезультатовСОМ цикл
				
				СтрокаТЗ = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаСОМ);
				СтрокаТЗ.СобственнаяСсылка    = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаТЗ.СобственнаяСсылка);
				СтрокаТЗ.УзелОбмена    = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаТЗ.УзелОбмена);
				
			КонецЦикла;	
						
			СтруктураАнализа.Вставить("ПерваяЧастьДругаяБаза",ТаблицаРезультатов);
			
			ТаблицаРезультатовСОМ = МассивРезультатов.Получить(1).Выгрузить();
			ТаблицаРезультатов    = Новый ТаблицаЗначений;
			
			Для каждого КолонкаСОМ Из ТаблицаРезультатовСОМ.Колонки цикл
				
				ТаблицаРезультатов.Колонки.Добавить(КолонкаСОМ.Имя);
				
			КонецЦикла;	
			
			Для каждого СтрокаСОМ Из ТаблицаРезультатовСОМ цикл
				
				СтрокаТЗ = ТаблицаРезультатов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗ,СтрокаСОМ);
				СтрокаТЗ.СобственнаяСсылка    = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаТЗ.СобственнаяСсылка);
				СтрокаТЗ.УзелОбмена    = ПодключениеКПриемнику.ЗначениеВСтрокуВнутр(СтрокаТЗ.УзелОбмена);
				
			КонецЦикла;	
			
			СтруктураАнализа.Вставить("ВтораяЧастьДругаяБаза",ТаблицаРезультатов);
			
		КонецЕсли;
		
	КонецЕсли;	
		
	Возврат СтруктураАнализа;
	
КонецФункции	

//удаляет некорректные записи из РС "Соответствие  объектов для обмена"
//при этом будут удалены две или более записей. Потому что для двух совпадающих записей определить, 
//какая из них "правильная", не представляется возможным
//Параметры: Анализ сопоставления - структура
Процедура УбратьДублиОбъектовСопоставления(АнализСопоставления) Экспорт
	
	НаборЗаписей = РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьНаборЗаписей();
	
	Для каждого СтрокаТЧ Из АнализСопоставления.ПерваяЧастьЭтаБаза цикл
		
		НаборЗаписей.Отбор.Сбросить();	
		
		НаборЗаписей.Отбор.УзелОбмена.Использование = Истина;
		НаборЗаписей.Отбор.УзелОбмена.ВидСравнения  = ВидСравнения.Равно;
		НаборЗаписей.Отбор.УзелОбмена.Значение      = СтрокаТЧ.УзелОбмена;
		
		НаборЗаписей.Отбор.СобственнаяСсылка.Использование = Истина;
		НаборЗаписей.Отбор.СобственнаяСсылка.ВидСравнения  = ВидСравнения.Равно;
		НаборЗаписей.Отбор.СобственнаяСсылка.Значение      = СтрокаТЧ.СобственнаяСсылка;
		
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Для каждого СтрокаТЧ Из АнализСопоставления.ВтораяЧастьЭтаБаза цикл
		
		НаборЗаписей.Отбор.Сбросить();	
		
		НаборЗаписей.Отбор.УзелОбмена.Использование = Истина;
		НаборЗаписей.Отбор.УзелОбмена.ВидСравнения  = ВидСравнения.Равно;
		НаборЗаписей.Отбор.УзелОбмена.Значение      = СтрокаТЧ.УзелОбмена;
		
		НаборЗаписей.Отбор.СсылкаВДругойИБ.Использование = Истина;
		НаборЗаписей.Отбор.СсылкаВДругойИБ.ВидСравнения  = ВидСравнения.Равно;
		НаборЗаписей.Отбор.СсылкаВДругойИБ.Значение      = СтрокаТЧ.СсылкаВДругойИБ;
		
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		ПодключитьсяБезопасно();
		
	КонецЕсли;
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		НаборЗаписей = ПодключениеКПриемнику.РегистрыСведений.СоответствиеОбъектовДляОбмена.СоздатьНаборЗаписей();
		
		Для каждого СтрокаТЧ Из АнализСопоставления.ПерваяЧастьДругаяБаза цикл
			
			НаборЗаписей.Отбор.Сбросить();	
			
			НаборЗаписей.Отбор.УзелОбмена.Использование = Истина;
			НаборЗаписей.Отбор.УзелОбмена.ВидСравнения  = ПодключениеКПриемнику.ВидСравнения.Равно;
			НаборЗаписей.Отбор.УзелОбмена.Значение      = ПодключениеКПриемнику.ЗначениеИзСтрокиВнутр(СтрокаТЧ.УзелОбмена);
			
			НаборЗаписей.Отбор.СобственнаяСсылка.Использование = Истина;
			НаборЗаписей.Отбор.СобственнаяСсылка.ВидСравнения  = ПодключениеКПриемнику.ВидСравнения.Равно;
			НаборЗаписей.Отбор.СобственнаяСсылка.Значение      = ПодключениеКПриемнику.ЗначениеИзСтрокиВнутр(СтрокаТЧ.СобственнаяСсылка);
			
			НаборЗаписей.Прочитать();
			
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Записать();
				
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из АнализСопоставления.ВтораяЧастьДругаяБаза цикл
			
			НаборЗаписей.Отбор.Сбросить();	
			
			НаборЗаписей.Отбор.УзелОбмена.Использование = Истина;
			НаборЗаписей.Отбор.УзелОбмена.ВидСравнения  = ПодключениеКПриемнику.ВидСравнения.Равно;
			НаборЗаписей.Отбор.УзелОбмена.Значение      = ПодключениеКПриемнику.ЗначениеИзСтрокиВнутр(СтрокаТЧ.УзелОбмена);;
			
			НаборЗаписей.Отбор.СсылкаВДругойИБ.Использование = Истина;
			НаборЗаписей.Отбор.СсылкаВДругойИБ.ВидСравнения  = ПодключениеКПриемнику.ВидСравнения.Равно;
			НаборЗаписей.Отбор.СсылкаВДругойИБ.Значение      = СтрокаТЧ.СсылкаВДругойИБ;
			
			НаборЗаписей.Прочитать();
			
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Записать();
					
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПодключитьсяБезопасно() Экспорт
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда 
		
		Если ПодключениеКПриемнику = Неопределено Тогда
			
			Попытка
				
				ПодключениеКПриемнику = ПодключитьсяИВернутьРезультатПодключения();
				
			Исключение
				
				ПодключениеКПриемнику = Неопределено;	
				
			КонецПопытки;
			
		Иначе
			//проверим подключение
			Попытка
				
				A = ПодключениеКПриемнику.String("");	
				A = Неопределено;
				
			Исключение
				
				Попытка
					
					ПодключениеКПриемнику = ПодключитьсяИВернутьРезультатПодключения();
					
				Исключение
					
					ПодключениеКПриемнику = Неопределено;	
					
				КонецПопытки;
				
			КонецПопытки;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

//заполняет одно дерево по другому
Процедура ЗаполнитьОдинаковыеСтрокиДерева(СтрокаИсточник,СтрокаПриемник,Рекурсивно = Истина) Экспорт
	
	ЗаполнитьЗначенияСвойств(СтрокаПриемник,СтрокаИсточник);
	
	Для каждого СтрокаИсточника Из СтрокаИсточник.Строки цикл
		
		СтрокаПриемника = СтрокаПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПриемника,СтрокаИсточника);
		
		Если Рекурсивно тогда
			
			ЗаполнитьОдинаковыеСтрокиДерева(СтрокаИсточника,СтрокаПриемника,Рекурсивно = Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

//ФОРМА ХОДА ОБРАБОТКИ

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ОтобразитьНовоеСообщениеВФормеХодаОбработки(Знач ТекстСообщения, Знач ПроцентПрибавления = 0)
	
	мФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	мФормаХодаВыполненияОбмена.Значение = мФормаХодаВыполненияОбмена.Значение + ПроцентПрибавления;		
	
КонецПроцедуры

// Процедура показывает новое сообщение в форме хода обработки данных
Процедура ИнициализироватьФормуХодаОбработки(Знач ТекстСообщения = "", Знач ПроцентПрибавления = 0)
	
	Если мФормаХодаВыполненияОбмена = Неопределено Тогда
		
		мФормаХодаВыполненияОбмена = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
		
	КонецЕсли;
	
	мФормаХодаВыполненияОбмена.НаименованиеОбработкиДанных = "Сохранение настроек для обмена данными ...";
	мФормаХодаВыполненияОбмена.КомментарийОбработкиДанных = ТекстСообщения;	
	мФормаХодаВыполненияОбмена.Значение = ПроцентПрибавления;
	мФормаХодаВыполненияОбмена.МаксимальноеЗначение = 100;
	
	Если Не мФормаХодаВыполненияОбмена.Открыта() Тогда
		мФормаХодаВыполненияОбмена.Открыть();
	КонецЕсли;		
	
КонецПроцедуры

//Процедура закрывает форму хода обработки данных
Процедура ЗакрытьФормуОбработкиДанных()
	
	Если мФормаХодаВыполненияОбмена <> Неопределено Тогда
		
		Если мФормаХодаВыполненияОбмена.Открыта() Тогда
			мФормаХодаВыполненияОбмена.Закрыть();
		КонецЕсли;		
		
	КонецЕсли;	
	
КонецПроцедуры

//Прочие

Функция ВсеНастройкиЗаданыХотимИхПрименить(НастройкаОбменаОбъект, ИнформацияОТипеОбмена, НужноРегистрироватьИзмененияДляОбмена = Истина) Экспорт
	
	НужноВнестиИзмененияВИнформационнуюБазуПриемника = (ДействиеВыбранноеПользователем = 0
	И ПодключениеКПриемнику <> Неопределено);
	
	// диалог выбора файла настроек для второго этапа
	Если ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику = Неопределено Тогда
		
		ИмяФайлаНастроекОбменаПервойИнформационнойБазы = "";
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
			И Не ПустаяСтрока(КаталогОбменаИнформацией) Тогда
			
			КаталогНаДиске = Новый Файл(КаталогОбменаИнформацией);
			Если КаталогНаДиске.Существует()
				И КаталогНаДиске.ЭтоКаталог() Тогда
				
				ИмяКаталогаДляФайлаНастроек = КаталогОбменаИнформацией;
				Если Сред(ИмяКаталогаДляФайлаНастроек, СтрДлина(ИмяКаталогаДляФайлаНастроек), 1) <> "\" Тогда
					ИмяКаталогаДляФайлаНастроек = ИмяКаталогаДляФайлаНастроек + "\";
				КонецЕсли;
				
				ИмяФайлаНастроекОбменаПервойИнформационнойБазы = ИмяКаталогаДляФайлаНастроек + "НастройкиДляВторойИнформационнойБазы.xml";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяФайлаНастроекОбменаПервойИнформационнойБазы) Тогда
			
			ИмяФайлаНастроекОбменаПервойИнформационнойБазы = КаталогВременныхФайлов() + "НастройкиДляВторойИнформационнойБазы.xml";		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ИнициализироватьФормуХодаОбработки("Подготовка данных для сохранения", 0);
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подключение к информационной базе приемнику", 10);
			
			Если ПодключениеКПриемнику = Неопределено Тогда
				
				ПодключитьсяБезопасно();
				
				Если ПодключениеКПриемнику = Неопределено Тогда
					
					// подключиться не смогли
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			ПодключениеКПриемнику.НачатьТранзакцию();
		КонецЕсли;
		
		Попытка
			
			// 1. создаем узел обмена
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Создание объектов для регистрации изменений", 10);
			
			// надо еще проверить что бы код у собственного узла был установлен
			ПроверитьУстановленностьКодаУСобственногоУзла(ТипИнформационнойБазыДляОбмена);
			
			Если ДействиеВыбранноеПользователем = 1 Тогда
				
				Узел = ПланыОбмена[ТипИнформационнойБазыДляОбмена].НайтиПоКоду(мСтруктураНастроек.КодСобственногоУзла);
				
				//ошибка построения структуры РИБ
				Если ЗначениеЗаполнено(Узел) Тогда
					
					ВызватьИсключение  "" + Символы.ПС + "Неправильно заданы коды узлов в базе-источнике и в базе - приемнике." + Символы.ПС + 
					"Для устранения проблемы в базе-источнике в плане обмена ""Обмен Розница - Бухгалтерия предприятия 2.0 """ + Символы.ПС  + 
					"измените код созданного узла таким образом, чтобы он стал отличен от кодов узлов в базе-приемнике." + Символы.ПС + 
					"Настройку обмена в базе-источнике необходимо будет создать заново."; 
					
				КонецЕсли;	
				
				НужноСоздаватьНовыйУзел = НЕ ЗначениеЗаполнено(Узел);
				
			Иначе
				
				НужноСоздаватьНовыйУзел = Истина;
				
			КонецЕсли;
			
			
			Если НужноСоздаватьНовыйУзел Тогда
				
				УзелПланаОбмена = ПланыОбмена[ТипИнформационнойБазыДляОбмена].СоздатьУзел();
				УзелПланаОбмена.Наименование = НаименованиеИнформационнойБазыДляОбмена;
				
				Если ДействиеВыбранноеПользователем = 0 Тогда
					
					УзелПланаОбмена.УстановитьНовыйКод();
					
					Если НужныОграниченияПоОрганизации() Тогда
						
						УзелПланаОбмена.Организации.Загрузить(Организации.Выгрузить());
						
					КонецЕсли;
					
				Иначе
					УзелПланаОбмена.Код = мСтруктураНастроек.КодСобственногоУзла;
				КонецЕсли;
				Если ДействиеВыбранноеПользователем = 0 Тогда
					УзелПланаОбмена.ДатаНачалаВыгрузкиДокументов = ДатаНачалаВыгрузкиДокументов;
				КонецЕсли;
				УзелПланаОбмена.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных = НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции;
				УзелПланаОбмена.Записать();
				
			Иначе
				
				УзелПланаОбмена = Узел.ПолучитьОбъект();
				//если мы создаем настройку в дополнение к существующей, не нужно обнулять номера сообщений
				Если УзелИнформационнойБазы.Пустая()  тогда
					УстановитьНулевойНомерПринятогоСообщенияУУзлаОбмена(УзелПланаОбмена);
				КонецЕсли;
			КонецЕсли;
			
			УзелБазыПриемникаФоновыйОбмен = Неопределено;
			
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				
				// в приемнике собственный код плана обмена должен быть такой же как у УзелПланаОбмена
				// а узел для обмена данными иметь код собственного узла текущей ИБ
				ПроверитьСобственныйКодУзлаУПриемника(ПодключениеКПриемнику, ТипИнформационнойБазыДляОбмена, УзелПланаОбмена.Код);
				
				УзелБазыПриемникаФоновыйОбмен = СоздатьЭлементПланаОбменаВИнформационнойбазеПодключения(ПодключениеКПриемнику, ТипИнформационнойБазыДляОбмена, 
				ПланыОбмена[ТипИнформационнойБазыДляОбмена].ЭтотУзел().Код, мСтруктураИнформацииОТекущейИнформационнойБазе.ПредставлениеКонфигурации);
				
			КонецЕсли;
			
			
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подготовка к первоначальному обмену данными", 10);
			
			// надо еще проверить что бы код у собственного узла был установлен
			
			УзелДляРегистрацииИзменений = УзелПланаОбмена.Ссылка;
			
			
			
			// 3. регистрируем необходимые изменения
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подготовка объектов к первому обмену данными", 40);
			
			ОсновныеПравилаОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена);
			
			Если НужноРегистрироватьИзмененияДляОбмена Тогда 
				// нужно определить какими правилами обмена нужно пользоваться для выгрузки данных
				ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелДляРегистрацииИзменений, ОсновныеПравилаОбмена);
			КонецЕсли;
			
			Если УзелБазыПриемникаФоновыйОбмен <> Неопределено Тогда
				
				// регистрируем изменения для нужного узла	
				ПравилаОбменаИзПриемникаВИсточник = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
				
				Если НужноРегистрироватьИзмененияДляОбмена Тогда
					ЗарегистрироватьНеобходимыеИзмененияДляУзлаПоИмениПланаОбмена(УзелБазыПриемникаФоновыйОбмен, ПравилаОбменаИзПриемникаВИсточник, ПодключениеКПриемнику);
				КонецЕсли;
				
			КонецЕсли;
			
			
			
			// 4. Создаем настройку обмена данными
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Сохранение настроек для обмена данными", 40);
			
			НастройкаОбменаОбъект = Справочники.НастройкиОбменаДанными.СоздатьЭлемент();
			НастройкаОбменаОбъект.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Истина;
			НастройкаОбменаОбъект.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 5;
			
			ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, ЭтотОбъект);
			
			НастройкаОбменаОбъект.Наименование = "Обмен с """ + НаименованиеИнформационнойБазыДляОбмена + """";
			НастройкаОбменаОбъект.OnLineОбмен = Истина;
			НастройкаОбменаОбъект.УзелИнформационнойБазы = УзелПланаОбмена.Ссылка;
			
			НастройкаОбменаОбъект.ДобавлениеОбъектовИзФоновогоОбмена = 0;
			
			
			
			//загружаем правила обмена
			НастройкаОбменаОбъект.ПравилаОбмена = Новый ХранилищеЗначения(ОсновныеПравилаОбмена);			
			
			Если ПодключениеКПриемнику <> Неопределено Тогда
				
				ТекстПравилОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
				НастройкаОбменаОбъект.ПравилаОбменаДляПриемника = Новый ХранилищеЗначения(ТекстПравилОбмена);			
				
			КонецЕсли;
			
			// устанавливаем параметры пользователя для синхронизации
			НастройкаОбменаОбъект.НастройкаВариантовПоискаОбъектов.Очистить();
			Для Каждого СтрокаНастроекПользователя Из НастройкаВариантовПоискаОбъектов Цикл
				
				Если ЗначениеЗаполнено(СтрокаНастроекПользователя.ИмяНастройкиДляАлгоритма) Тогда
					
					СтрокаНастройки = НастройкаОбменаОбъект.НастройкаВариантовПоискаОбъектов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НастройкаОбменаОбъект.НастройкаВыгрузкиДанных.Очистить();
			Для Каждого СтрокаНастроекПользователя Из НастройкаВыгрузкиДанных Цикл
				
				Если ЗначениеЗаполнено(СтрокаНастроекПользователя.КодПравилаВыгрузки) Тогда
					
					СтрокаНастройки = НастройкаОбменаОбъект.НастройкаВыгрузкиДанных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НастройкаОбменаОбъект.Записать();
			
			Если  ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение тогда
				НастройкаОбмена = НастройкаОбменаОбъект.Ссылка;
			КонецЕсли;	
			
			Если НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
				
				СтароеЗначениеКонстанты = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
				Если СтароеЗначениеКонстанты <> Истина Тогда
					Константы.СохранятьИнформациюОМестеСозданияОбъектов.Установить(Истина);
				КонецЕсли;
				
				Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
					
					СтароеЗначениеКонстанты = ПодключениеКПриемнику.Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
					Если СтароеЗначениеКонстанты <> Истина Тогда
						ПодключениеКПриемнику.Константы.СохранятьИнформациюОМестеСозданияОбъектов.Установить(Истина);
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДействиеВыбранноеПользователем = 0
				И НЕ НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				
				// настройку сохраняем в файл обмена, для последующего чтения из него
				СохранитьПараметрыНастройкиВФайл(НастройкаОбменаОбъект);				
				
			КонецЕсли;		
			
			
			
		Исключение
			
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				ПодключениеКПриемнику.ОтменитьТранзакцию();
			КонецЕсли;
			
			ОтменитьТранзакцию();
			
			СтрокаОшибки = ОписаниеОшибки();
			Сообщить("Ошибка при сохранении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);
			
			ЗакрытьФормуОбработкиДанных();
			
			Возврат Ложь;
			
		КонецПопытки;
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			ПодключениеКПриемнику.ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ЗакрытьФормуОбработкиДанных();
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		Сообщить("Ошибка при сохранении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);		
		
		ЗакрытьФормуОбработкиДанных();
		
		Возврат Ложь;
		
	КонецПопытки;	
	
	Возврат Истина;
	
КонецФункции

//сохранение настроек первого этапа
//создает настройку обмена данными, узел обмена
Функция СохранитьНастройкиПервогоЭтапа(НастройкаОбменаОбъект, ИнформацияОТипеОбмена, НужноРегистрироватьИзмененияДляОбмена = Истина) Экспорт
	НужноВнестиИзмененияВИнформационнуюБазуПриемника = (ДействиеВыбранноеПользователем = 0
	И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение);
	
	ИнформацияОТипеОбмена  = Неопределено;
	// диалог выбора файла настроек для второго этапа
	Если ДействиеВыбранноеПользователем = 0
		И ПодключениеКПриемнику = Неопределено Тогда
		
		ИмяФайлаНастроекОбменаПервойИнформационнойБазы = "";
		
		Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
			И Не ПустаяСтрока(КаталогОбменаИнформацией) Тогда
			
			КаталогНаДиске = Новый Файл(КаталогОбменаИнформацией);
			Если КаталогНаДиске.Существует()
				И КаталогНаДиске.ЭтоКаталог() Тогда
				
				ИмяКаталогаДляФайлаНастроек = КаталогОбменаИнформацией;
				Если Сред(ИмяКаталогаДляФайлаНастроек, СтрДлина(ИмяКаталогаДляФайлаНастроек), 1) <> "\" Тогда
					ИмяКаталогаДляФайлаНастроек = ИмяКаталогаДляФайлаНастроек + "\";
				КонецЕсли;
				
				ИмяФайлаНастроекОбменаПервойИнформационнойБазы = ИмяКаталогаДляФайлаНастроек + "НастройкиДляВторойИнформационнойБазы.xml";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяФайлаНастроекОбменаПервойИнформационнойБазы) Тогда
			
			ИмяФайлаНастроекОбменаПервойИнформационнойБазы = КаталогВременныхФайлов() + "НастройкиДляВторойИнформационнойБазы.xml";		
			
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		
		ИнициализироватьФормуХодаОбработки("Подготовка данных для сохранения", 0);
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Подключение к информационной базе приемнику", 10);
			
			ПодключитьсяБезопасно();
			
			Если ПодключениеКПриемнику = Неопределено Тогда
				
				Возврат Ложь;
				
				
			КонецЕсли;
			
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			ПодключениеКПриемнику.НачатьТранзакцию();
		КонецЕсли;
		
		Попытка

			Если НЕ ЗначениеЗаполнено(Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) 
				И ЗначениеЗаполнено(ПрефиксДляИБИсточника) Тогда
				
				Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(ПрефиксДляИБИсточника));
				
				#Если Клиент Тогда
				Сообщить("Для корректной работы механизма назначения префиксов этой информационной базы 
				|необходимо завершить работу всех пользователей.");	
				#КонецЕсли	
				
				мПрефиксДляИБИсточника = ПрефиксДляИБИсточника;
				
			КонецЕсли;	
			
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Создание объектов для регистрации изменений", 10);
			
			// надо еще проверить что бы код у собственного узла был установлен
			ПроверитьУстановленностьКодаУСобственногоУзла(ТипИнформационнойБазыДляОбмена);
			
			Если ДействиеВыбранноеПользователем = 1 Тогда
				
				Узел = ПланыОбмена[ТипИнформационнойБазыДляОбмена].НайтиПоКоду(мСтруктураНастроек.КодСобственногоУзла);
				
				//ошибка построения структуры РИБ
				Если ЗначениеЗаполнено(Узел) Тогда
					
					ВызватьИсключение "" + Символы.ПС + "Неправильно заданы коды узлов в базе-источнике и в базе-приемнике." + Символы.ПС + 
					"Для устранения проблемы в базе-источнике в плане обмена ""Обмен Розница - Бухгалтерия предприятия 2.0""" + Символы.ПС  + 
					"измените код созданного узла таким образом, чтобы он стал отличен от кодов узлов в базе-приемнике." + Символы.ПС + 
					"Настройку обмена в базе-источнике необходимо будет создать заново."; 
					
				КонецЕсли;	
			
				НужноСоздаватьНовыйУзел = НЕ ЗначениеЗаполнено(Узел);
				
			Иначе
				
				НужноСоздаватьНовыйУзел = Истина;
				
			КонецЕсли;
			
			
			Если НужноСоздаватьНовыйУзел Тогда
				
				УзелПланаОбмена = ПланыОбмена[ТипИнформационнойБазыДляОбмена].СоздатьУзел();
				УзелПланаОбмена.Наименование = НаименованиеИнформационнойБазыДляОбмена;
				
				Если ДействиеВыбранноеПользователем = 0 Тогда
					
					УзелПланаОбмена.УстановитьНовыйКод();
					
					Если НужныОграниченияПоОрганизации() Тогда
						
						УзелПланаОбмена.Организации.Загрузить(Организации.Выгрузить());
						
					КонецЕсли;
					
				Иначе
					УзелПланаОбмена.Код = мСтруктураНастроек.КодСобственногоУзла;
				КонецЕсли;
				Если ДействиеВыбранноеПользователем = 0 Тогда
					УзелПланаОбмена.ДатаНачалаВыгрузкиДокументов = ДатаНачалаВыгрузкиДокументов;
				КонецЕсли;
				УзелПланаОбмена.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных = НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции;
				УзелПланаОбмена.Записать();
				
			Иначе
				
				УзелПланаОбмена = Узел.ПолучитьОбъект();
				
			КонецЕсли;
			
					
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				
				// в приемнике собственный код плана обмена должен быть такой же как у УзелПланаОбмена
				// а узел для обмена данными иметь код собственного узла текущей ИБ
				ПроверитьСобственныйКодУзлаУПриемника(ПодключениеКПриемнику, ТипИнформационнойБазыДляОбмена, УзелПланаОбмена.Код);
				УзелБазыПриемника = СоздатьЭлементПланаОбменаВИнформационнойбазеПодключения(ПодключениеКПриемнику, ТипИнформационнойБазыДляОбмена, 
				ПланыОбмена[ТипИнформационнойБазыДляОбмена].ЭтотУзел().Код, мСтруктураИнформацииОТекущейИнформационнойБазе.ПредставлениеКонфигурации);
				
				//установим префикс РИБ
				
				Если НЕ ЗначениеЗаполнено(ПодключениеКПриемнику.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить()) 
					И ЗначениеЗаполнено(ПрефиксДляИБПриемника) Тогда
					
					ПодключениеКПриемнику.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(ПрефиксДляИБПриемника));
				
					#Если Клиент Тогда
						Сообщить("Для корректной работы механизма назначения префиксов информационной базы-приемника необходимо 
						|завершить работу всех пользователей в информационной базе-приемнике");	
					#КонецЕсли	
										
					мПрефиксДляИБПриемника = ПрефиксДляИБПриемника;
					
				КонецЕсли;	
						
			КонецЕсли;
			
			
			ОсновныеПравилаОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ИнформацияОТипеОбмена);
					
			ОтобразитьНовоеСообщениеВФормеХодаОбработки("Сохранение настроек для обмена данными", 40);
			
			НастройкаОбменаОбъект = Справочники.НастройкиОбменаДанными.СоздатьЭлемент();
			НастройкаОбменаОбъект.ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Истина;
			НастройкаОбменаОбъект.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 5;
			
			ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, ЭтотОбъект);
			
			НастройкаОбменаОбъект.Наименование = "Обмен с """ + НаименованиеИнформационнойБазыДляОбмена + """";
			НастройкаОбменаОбъект.OnLineОбмен = Истина;
			НастройкаОбменаОбъект.УзелИнформационнойБазы = УзелПланаОбмена.Ссылка;
			
			НастройкаОбменаОбъект.ДобавлениеОбъектовИзФоновогоОбмена = 0;
			
			НастройкаОбменаОбъект.ПравилаОбмена = Новый ХранилищеЗначения(ОсновныеПравилаОбмена);			
			
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				
				ТекстПравилОбмена = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ИнформацияОТипеОбмена);
				НастройкаОбменаОбъект.ПравилаОбменаДляПриемника = Новый ХранилищеЗначения(ТекстПравилОбмена);			
				
			КонецЕсли;
			
			// устанавливаем параметры пользователя для синхронизации
			НастройкаОбменаОбъект.НастройкаВариантовПоискаОбъектов.Очистить();
			Для Каждого СтрокаНастроекПользователя Из НастройкаВариантовПоискаОбъектов Цикл
				
				Если ЗначениеЗаполнено(СтрокаНастроекПользователя.ИмяНастройкиДляАлгоритма) Тогда
					
					СтрокаНастройки = НастройкаОбменаОбъект.НастройкаВариантовПоискаОбъектов.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НастройкаОбменаОбъект.НастройкаВыгрузкиДанных.Очистить();
			Для Каждого СтрокаНастроекПользователя Из НастройкаВыгрузкиДанных Цикл
				
				Если ЗначениеЗаполнено(СтрокаНастроекПользователя.КодПравилаВыгрузки) Тогда
					
					СтрокаНастройки = НастройкаОбменаОбъект.НастройкаВыгрузкиДанных.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НастройкаОбменаОбъект.Записать();
			
			Если  ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение тогда
				НастройкаОбмена = НастройкаОбменаОбъект.Ссылка;
			КонецЕсли;	
			
			Если НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
				
				СтароеЗначениеКонстанты = Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
				Если СтароеЗначениеКонстанты <> Истина Тогда
					Константы.СохранятьИнформациюОМестеСозданияОбъектов.Установить(Истина);
				КонецЕсли;
				
				Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
					
					СтароеЗначениеКонстанты = ПодключениеКПриемнику.Константы.СохранятьИнформациюОМестеСозданияОбъектов.Получить();
					Если СтароеЗначениеКонстанты <> Истина Тогда
						ПодключениеКПриемнику.Константы.СохранятьИнформациюОМестеСозданияОбъектов.Установить(Истина);
					КонецЕсли;	
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ДействиеВыбранноеПользователем = 0
				И НЕ НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				
				// настройку сохраняем в файл обмена, для последующего чтения из него
				СохранитьПараметрыНастройкиВФайл(НастройкаОбменаОбъект);				
				
			КонецЕсли;		
			
		    
			
		Исключение
			
			Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
				ПодключениеКПриемнику.ОтменитьТранзакцию();
			КонецЕсли;
			
			ОтменитьТранзакцию();
			
			СтрокаОшибки = ОписаниеОшибки();
			Сообщить("Ошибка при сохранении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);
			
			ЗакрытьФормуОбработкиДанных();
			
			Возврат Ложь;
			
		КонецПопытки;
		
		//для РТ 
		//ПолныеПрава.УстановитьПараметрыСеансаДляОбменаСБухгалтерией20();
		//
		//Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда 
		//	
		//	ПодключениеКПриемнику.ПолныеПрава.УстановитьИзменяемыеПараметрыСеансаПользователя();
		//	
		//КонецЕсли;
		//для БП 
		ПолныеПрава.УстановитьИзменяемыеПараметрыСеансаПользователя();
				
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда 
		
			ПодключениеКПриемнику.ПолныеПрава.УстановитьПараметрыСеансаДляОбменаСБухгалтерией20();
			
		КонецЕсли;	
		
		
		Если НужноВнестиИзмененияВИнформационнуюБазуПриемника Тогда
			ПодключениеКПриемнику.ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		
			
		ЗафиксироватьТранзакцию();
		
		ЗакрытьФормуОбработкиДанных();
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		Сообщить("Ошибка при сохранении настроек обмена данными: " + СтрокаОшибки, СтатусСообщения.Важное);		
		
		ЗакрытьФормуОбработкиДанных();
		
		Возврат Ложь;
		
	КонецПопытки;	
	
	Возврат Истина;
	
	
КонецФункции

Процедура СохранитьОтредактированнуюНастройкуОбменаДанными(СтруктураДляПереопределенияПравилаОбмена = Неопределено) Экспорт
	
	Попытка
		НастройкаОбменаОбъект = НастройкаОбмена.ПолучитьОбъект();
		УзелПланаОбмена = НастройкаОбмена.УзелИнформационнойБазы.ПолучитьОбъект();	
		
		Если мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации = "РТ" Тогда
			
			УзелПланаОбмена.Организации.Загрузить(Организации.Выгрузить());
			УзелПланаОбмена.ДатаНачалаВыгрузкиДокументов = ДатаНачалаВыгрузкиДокументов;
			
		КонецЕсли;
		
		УзелПланаОбмена.Записать();
		
		ЗаполнитьЗначенияСвойств(НастройкаОбменаОбъект, ЭтотОбъект);
		
		НастройкаОбменаОбъект.Наименование = "Обмен с """ + НаименованиеИнформационнойБазыДляОбмена + """";
		НастройкаОбменаОбъект.OnLineОбмен = Истина;
		
		НастройкаОбменаОбъект.ТипНастройки = ТипНастройки;	
		// устанавливаем параметры пользователя для синхронизации
		НастройкаОбменаОбъект.НастройкаВариантовПоискаОбъектов.Очистить();
		Для Каждого СтрокаНастроекПользователя Из НастройкаВариантовПоискаОбъектов Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроекПользователя.ИмяНастройкиДляАлгоритма) Тогда
				
				СтрокаНастройки = НастройкаОбменаОбъект.НастройкаВариантовПоискаОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
				
			КонецЕсли;
			
		КонецЦикла;
		
		НастройкаОбменаОбъект.НастройкаВыгрузкиДанных.Очистить();
		Для Каждого СтрокаНастроекПользователя Из НастройкаВыгрузкиДанных Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастроекПользователя.КодПравилаВыгрузки) Тогда
				
				СтрокаНастройки = НастройкаОбменаОбъект.НастройкаВыгрузкиДанных.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНастройки, СтрокаНастроекПользователя);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураДляПереопределенияПравилаОбмена <> Неопределено Тогда
			
			Если НастройкаОбменаОбъект.ТипНастройки <> НастройкаОбмена.ТипНастройки Тогда
				ИнформацияОТипеОбмена = ОпределитьТипИБПоПараметрам();	
				
				Если ТипЗнч(СтруктураДляПереопределенияПравилаОбмена.мТекущаяНастройка) = Тип("Структура")
					И СтруктураДляПереопределенияПравилаОбмена.мТекущаяНастройка.Свойство("СохраненнаяНастройка")
					И ТипЗнч(СтруктураДляПереопределенияПравилаОбмена.мТекущаяНастройка.СохраненнаяНастройка) = Тип("Структура")
					И СтруктураДляПереопределенияПравилаОбмена.мТекущаяНастройка.СохраненнаяНастройка.Свойство("ТаблицаНастроек") 
					И СтруктураДляПереопределенияПравилаОбмена.мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена") <> Неопределено Тогда
					СтрокаНастроек = СтруктураДляПереопределенияПравилаОбмена.мТекущаяНастройка.СохраненнаяНастройка.ТаблицаНастроек.Найти(НастройкаОбмена,"НастройкаОбмена");
					
					Если СтрокаНастроек.НомерАктуальногоЭтапа >= 3  Тогда
						ПостоянныйОбмен = Истина;
					Иначе 
						ПостоянныйОбмен = Ложь;
					КонецЕсли;
				Иначе		
					ПостоянныйОбмен = Истина;
				КонецЕсли;	
				
				Если НастройкаОбменаОбъект.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
					
					Если ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
						ИмяМакета = "ПравилаОбмена_ПустыеПравила";
					Иначе
						ИмяМакета = "ПравилаОбмена_" + мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяКонфигурации + "_" + мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации;	
					КонецЕсли;	
					
					НастройкаОбменаОбъект.ПравилаОбменаДляПриемника = Новый ХранилищеЗначения(ПолучитьТекстПравилОбменаПоНазваниюМакета(ИмяМакета,ПостоянныйОбмен));
					
				Иначе 
					
					Если ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
						ИмяМакета = "ПравилаОбмена_ПустыеПравила";
					Иначе
						ИмяМакета = "ПравилаОбмена_" + мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации + "_" + мТаблицаВозможныхОбменов[ИнформацияОТипеОбмена].ИмяКонфигурации;	
					КонецЕсли;
					
					НастройкаОбменаОбъект.ПравилаОбмена = Новый ХранилищеЗначения(ПолучитьТекстПравилОбменаПоНазваниюМакета(ИмяМакета,ПостоянныйОбмен));
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		НастройкаОбменаОбъект.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Ошибка записи настроек обмена данными: " + ОписаниеОшибки());
	КонецПопытки;	
	
	
	
	
КонецПроцедуры

Процедура ОбновитьНастройкиВариантовПоискаОбъектов() Экспорт
	
	ИмяПараметраВКонвертации = "ВариантыНастроекПоиска";	
	
	НастройкаВариантовПоискаОбъектов.Очистить();
	//нужна инициализированная таблица правил конвертации для источника:
	ЗадатьПараметрыОбработкиОбменаДанными(Истина,"Выгрузка");
	
	Если ДействиеВыбранноеПользователем <2 тогда                  
		
		ПравилаВыгрузки = ОпределитьПравилаОбменаДляВыгрузкиИзТекущейИнформационнойБазыВПриемник(ОпределитьТипИБПоПараметрам());
		
	Иначе 
		ПравилаВыгрузки = НастройкаОбмена.ПравилаОбмена.Получить();
		
	КонецЕсли;	
	
	ПрочитатьТаблицыИнформацииПравил(ПравилаВыгрузки,"Выгрузка");
	
	ТаблицаНастроекВыгрузкиДляПолейПоиска =	мТаблицаНастроекПолейВРежимеВыгрузки;
	ТаблицаНастроекВыгрузкиДляВыбораОбъектовВыгрузки = мТаблицаПравилВыгрузкиВРежимеВыгрузки;
	
	СтруктураОтбораВариантовПоиска = Новый Структура;
	//если такая настройка поиска определена тогда подставим его
	Если мОбработкаОбменаДаннымиXML.Параметры.Свойство(ИмяПараметраВКонвертации) тогда
		ВариантыНастроекПоискаПоУмолчанию  = мОбработкаОбменаДаннымиXML.Параметры[ИмяПараметраВКонвертации];
		Для каждого ВариантНастройкиПоискаПоУмолчанию Из ВариантыНастроекПоискаПоУмолчанию цикл
			СтруктураОтбораВариантовПоиска.Вставить("ИмяНастройкиДляАлгоритма",ВариантНастройкиПоискаПоУмолчанию.Значение);
			СтруктураОтбораВариантовПоиска.Вставить("КодПравилаОбмена",ВариантНастройкиПоискаПоУмолчанию.Ключ);
			МассивНайденныхВариантовПоиска = ТаблицаНастроекВыгрузкиДляПолейПоиска.НайтиСтроки(СтруктураОтбораВариантовПоиска);
			Если МассивНайденныхВариантовПоиска.Количество() > 0 тогда
				НоваяСтрокаНастроекВТаблицеПользователя = НастройкаВариантовПоискаОбъектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВТаблицеПользователя,МассивНайденныхВариантовПоиска[0]);
				НоваяСтрокаНастроекВТаблицеПользователя.ЭтоНастройкаДляВыгрузки = Истина;
			КонецЕсли;	
			
			
		КонецЦикла;	
	КонецЕсли;	
	
	//для загрузки в случае COM - соединения правила хранятся здесь же в макетах.
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		Если ДействиеВыбранноеПользователем <2 тогда                  
			
			ПравилаЗагрузки = ОпределитьПравилаОбменаДляВыгрузкиИзБазыПриемникаВТекущуюИнформационнуюБазу(ОпределитьТипИБПоПараметрам());
			
		Иначе 
			ПравилаЗагрузки = НастройкаОбмена.ПравилаОбменаДляПриемника.Получить();
			
		КонецЕсли;	
		
		ОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();
		ОбработкаОбменаДаннымиXML.мРежимЗагрузкиИнформацииОПравилахОбмена = Истина;
		ОбработкаОбменаДаннымиXML.ИнициализацияТаблицДанныхОПравилахОбмена();		
		
		Если НЕ ПустаяСтрока(ПравилаЗагрузки) Тогда
			
			ОбработкаОбменаДаннымиXML.ЗагрузитьПравилаОбмена(ПравилаЗагрузки, "Строка");		
			
		КонецЕсли;
		
		ТаблицаНастроекЗагрузкиДляПолейПоиска = ОбработкаОбменаДаннымиXML.мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска;
		ТаблицаНастроекЗагрузкиДляВыбораОбъектовВыгрузки = ОбработкаОбменаДаннымиXML.мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации;
		
		
		
		СтруктураОтбораВариантовПоиска = Новый Структура;
		//если такая настройка поиска определена тогда подставим его
		Если ОбработкаОбменаДаннымиXML.Параметры.Свойство(ИмяПараметраВКонвертации) тогда
			ВариантыНастроекПоискаПоУмолчанию  = ОбработкаОбменаДаннымиXML.Параметры[ИмяПараметраВКонвертации];
			Для каждого ВариантНастройкиПоискаПоУмолчанию Из ВариантыНастроекПоискаПоУмолчанию цикл
				СтруктураОтбораВариантовПоиска.Вставить("ИмяНастройкиДляАлгоритма",ВариантНастройкиПоискаПоУмолчанию.Значение);
				СтруктураОтбораВариантовПоиска.Вставить("КодПравилаОбмена",ВариантНастройкиПоискаПоУмолчанию.Ключ);
				МассивНайденныхВариантовПоиска = ТаблицаНастроекЗагрузкиДляПолейПоиска.НайтиСтроки(СтруктураОтбораВариантовПоиска);
				Если МассивНайденныхВариантовПоиска.Количество() > 0 тогда
					НоваяСтрокаНастроекВТаблицеПользователя = НастройкаВариантовПоискаОбъектов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВТаблицеПользователя,МассивНайденныхВариантовПоиска[0]);
					НоваяСтрокаНастроекВТаблицеПользователя.ЭтоНастройкаДляВыгрузки = Ложь;
				КонецЕсли;	
				
				
			КонецЦикла;	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПрочитатьНастройкуОбменаДанными(НастройкаОбменаДанными) Экспорт
	
	Для каждого Реквизит Из НастройкаОбменаДанными.Метаданные().Реквизиты цикл
		Если ЭтотОбъект.Метаданные().Реквизиты.Найти(Реквизит.Имя)<>Неопределено тогда
			ЭтотОбъект[Реквизит.Имя]= НастройкаОбменаДанными[Реквизит.Имя];
		КонецЕсли;	
	КонецЦикла;
	НаименованиеИнформационнойБазыДляОбмена = НастройкаОбменаДанными.УзелИнформационнойБазы.Наименование;
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение тогда
		ВозможностьПодключенияКоВторойИнформационнойБазе  = Истина;
	Иначе
		ВозможностьПодключенияКоВторойИнформационнойБазе  = Ложь;
	КонецЕсли;
	
	Если НастройкаОбмена.ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		Если СтрЧислоСтрок(НастройкаОбмена.ПравилаОбменаДляПриемника.Получить()) > 50 Тогда 
			ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Ложь;
		Иначе
			ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Истина;
		КонецЕсли;	
	Иначе
		Если СтрЧислоСтрок(НастройкаОбмена.ПравилаОбмена.Получить()) > 50 Тогда 
			ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Ложь;
		Иначе
			ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	НастройкаВыгрузкиДанных.Загрузить(НастройкаОбменаДанными.НастройкаВыгрузкиДанных.Выгрузить());
	НастройкаВариантовПоискаОбъектов.Загрузить(НастройкаОбменаДанными.НастройкаВариантовПоискаОбъектов.Выгрузить());
	НастройкаОбмена = НастройкаОбменаДанными;
	
	Если мСтруктураИнформацииОТекущейИнформационнойБазе.ИмяКонфигурации = "РТ" Тогда
		
		Организации.Загрузить(УзелИнформационнойБазы.Организации.Выгрузить());
		ДатаНачалаВыгрузкиДокументов = УзелИнформационнойБазы.ДатаНачалаВыгрузкиДокументов;
		
	КонецЕсли;	
	
	мПрефиксДляИБИсточника = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();
	
	ТипИнформационнойБазыДляОбмена = мТаблицаВозможныхОбменов[0].ИмяПланаОбмена;
	
КонецПроцедуры

Функция ОпределитьТипИБПоПараметрам() Экспорт
	
	Для Номер = 0 По мТаблицаВозможныхОбменов.Количество() - 1 Цикл
		
		СтрокаТаблицы = мТаблицаВозможныхОбменов[Номер];
		
		Если СтрокаТаблицы.ИмяПланаОбмена = ТипИнформационнойБазыДляОбмена
			И СтрокаТаблицы.ПредставлениеКонфигурации = НаименованиеИнформационнойБазыДляОбмена Тогда
			
			Возврат Номер;
			
		КонецЕсли;				
		
	КонецЦикла;	
	
	Возврат 0;
	
Конецфункции

Функция СоздатьЭлементПланаОбменаВИнформационнойбазеПодключения(ПодключениеКПриемнику, ИмяПланаОбмена, КодЭлемента, Наименование) Экспорт
	
	УзелПланаОбмена = ПодключениеКПриемнику.ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодЭлемента);
	
	Если УзелПланаОбмена <> Неопределено
		И НЕ УзелПланаОбмена.Пустая() Тогда
		
		Если УзелПланаОбмена.НомерПринятого <> 0 Тогда
			
			ЭлементПланаОбмена = УзелПланаОбмена.ПолучитьОбъект();
			ЭлементПланаОбмена.НомерПринятого = 0;
			ЭлементПланаОбмена.Записать();
			
		КонецЕсли;
		
		Возврат УзелПланаОбмена.Ссылка;
		
	КонецЕсли;
	
	УзелПланаОбмена = ПодключениеКПриемнику.ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
	УзелПланаОбмена.Наименование = Наименование;
	УзелПланаОбмена.Код = КодЭлемента;
	УзелПланаОбмена.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных = НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции;
	
	УзелПланаОбмена.Записать();
	
	Возврат УзелПланаОбмена.Ссылка;
	
КонецФункции

Процедура ЗаписатьБазовуюИнформациюОРассписании(ЧтениеXML, РасписаниеРегламентногоЗадания) Экспорт
	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ВремяЗавершения, "ВремяЗавершения", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ВремяКонца, "ВремяКонца", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ВремяНачала, "ВремяНачала", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДатаКонца, "ДатаКонца", НазначениеТипаXML.Явное);	
	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДатаНачала, "ДатаНачала", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДеньВМесяце, "ДеньВМесяце", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ДеньНеделиВМесяце, "ДеньНеделиВМесяце", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ИнтервалЗавершения, "ИнтервалЗавершения", НазначениеТипаXML.Явное);	
	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПаузаПовтора, "ПаузаПовтора", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПериодНедель, "ПериодНедель", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПериодПовтораВТечениеДня, "ПериодПовтораВТечениеДня", НазначениеТипаXML.Явное);	
	ЗаписатьXML(ЧтениеXML, РасписаниеРегламентногоЗадания.ПериодПовтораДней, "ПериодПовтораДней", НазначениеТипаXML.Явное);
	
КонецПроцедуры

Процедура ЗаписатьРасписанияРегламентногоЗаданияВXML(ЗаписьXML, РасписаниеРегламентногоЗадания) Экспорт
	
	ЗаписатьБазовуюИнформациюОРассписании(ЗаписьXML, РасписаниеРегламентногоЗадания);
	
	//ДниНедели
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДниНедели");
	
	Для Каждого ДеньНастройки Из РасписаниеРегламентногоЗадания.ДниНедели Цикл
		
		ЗаписатьXML(ЗаписьXML, ДеньНастройки, "День", НазначениеТипаXML.Явное);	
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	//Месяцы
	ЗаписьXML.ЗаписатьНачалоЭлемента("Месяцы");
	
	Для Каждого Месяц Из РасписаниеРегламентногоЗадания.Месяцы Цикл
		
		ЗаписатьXML(ЗаписьXML, Месяц, "Месяц", НазначениеТипаXML.Явное);	
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ДетальныеРасписанияДня");
	
	Для Каждого ЭлементДетельногоРасписания Из РасписаниеРегламентногоЗадания.ДетальныеРасписанияДня Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасписаниеДня");
		
		ЗаписатьБазовуюИнформациюОРассписании(ЗаписьXML, ЭлементДетельногоРасписания);
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры

Функция СохранитьПараметрыНастройкиВФайл(НастройкаОбмена, СохранитьПравилаВФайл = Истина) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	
	Если СохранитьПравилаВФайл Тогда
		ЗаписьXML.ОткрытьФайл(ИмяФайлаНастроекОбменаПервойИнформационнойБазы, "UTF-8");
	Иначе
		ЗаписьXML.УстановитьСтроку("UTF-8");
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыНастройки");
	
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ОсновныеПараметрыОбмена");
	
	ЗаписатьXML(ЗаписьXML, ТипИнформационнойБазыДляОбмена, "ТипИнформационнойБазыДляОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, мСтруктураИнформацииОТекущейИнформационнойБазе.ПредставлениеКонфигурации, "НаименованиеИнформационнойБазыДляОбмена", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, НастройкаОбмена.УзелИнформационнойБазы.Код, "КодУзлаОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПланыОбмена[ТипИнформационнойБазыДляОбмена].ЭтотУзел().Код, "КодСобственногоУзла", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ТипНастройки, "ТипНастройки", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ВыполнятьАвтоматически, "ВыполнятьАвтоматически", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КоличествоЭлементовВТранзакцииНаВыгрузкуДанных, "КоличествоЭлементовВТранзакцииНаВыгрузкуДанных", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, КоличествоЭлементовВТранзакцииНаЗагрузкуДанных, "КоличествоЭлементовВТранзакцииНаЗагрузкуДанных", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ВыполнятьАрхивациюФайловОбмена, "ВыполнятьАрхивациюФайловОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПарольНаПрием, "ПарольНаОтправку", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПарольНаОтправку, "ПарольНаПрием", НазначениеТипаXML.Явное);
	//ЗаписатьXML(ЗаписьXML, ВестиЛог, "ВестиЛог", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, КаталогОбменаИнформацией, "КаталогОбменаИнформацией", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, FTPАдресОбмена, "FTPАдресОбмена", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПортFTPСоединения, "ПортFTPСоединения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПользовательFTPСоединения, "ПользовательFTPСоединения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПарольFTPСоединения, "ПарольFTPСоединения", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, Комментарий, "Комментарий", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ВариантНастройкиПериодическогоОбмена, "ВариантНастройкиПериодическогоОбмена", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ИспользоватьРегламентныеЗадания, "ИспользоватьРегламентныеЗадания", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP, "МаксимальныйРазмерОтправляемогоПолучаемогоПакетаЧерезFTP", НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, ПассивноеFTPСоединение, "ПассивноеFTPСоединение", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, OnLineОбмен, "OnLineОбмен", НазначениеТипаXML.Явное);
	
	Если НЕ ЗначениеЗаполнено(ИмяФайлаПротоколаОбменаOnLineОбмен) Тогда
		ИмяПротоколаДляЗагрузки = "";	
	Иначе
		ИмяПротоколаДляЗагрузки = ПроцедурыОбменаДанными.ПолучитьИмяПротоколаЗагрузки(ИмяФайлаПротоколаОбменаOnLineОбмен);
	КонецЕсли;
	
	ЗаписатьXML(ЗаписьXML, ИмяПротоколаДляЗагрузки, "ИмяФайлаПротоколаОбменаOnLineОбмен", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ИспользоватьРегламентныеЗаданияДляФоновогоОбмена, "ИспользоватьРегламентныеЗаданияДляФоновогоОбмена", НазначениеТипаXML.Явное);		
	
	ЗаписатьXML(ЗаписьXML, ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции, "ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции", НазначениеТипаXML.Явное);
	
	ЗаписатьXML(ЗаписьXML, ДатаНачалаВыгрузкиДокументов, "ДатаНачалаВыгрузкиДокументов", НазначениеТипаXML.Явное);
		
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("НастройкаВариантовПоискаОбъектов");
	
	Если НЕ ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции Тогда
		
		Для каждого ВариантНастройкиПоиска Из НастройкаВариантовПоискаОбъектов цикл
			Если ВариантНастройкиПоиска.ЭтоНастройкаДляВыгрузки И НЕ ВариантНастройкиПоиска.ВариантПоискаНеПоддерживается тогда	
				ЗаписьXML.ЗаписатьНачалоЭлемента(ВариантНастройкиПоиска.КодПравилаОбмена);
				ЗаписатьXML(ЗаписьXML, ВариантНастройкиПоиска.ИмяНастройкиДляАлгоритма, "ИмяНастройкиДляАлгоритма", НазначениеТипаXML.Явное);
				ЗаписатьXML(ЗаписьXML, ВариантНастройкиПоиска.КодПравилаОбмена, "КодПравилаОбмена", НазначениеТипаXML.Явное);
				ЗаписатьXML(ЗаписьXML, ВариантНастройкиПоиска.ИмяНастройкиДляПользователя, "ИмяНастройкиДляПользователя", НазначениеТипаXML.Явное);
				ЗаписатьXML(ЗаписьXML, ВариантНастройкиПоиска.ОписаниеНастройкиДляПользователя, "ОписаниеНастройкиДляПользователя", НазначениеТипаXML.Явное);
				ЗаписатьXML(ЗаписьXML, ВариантНастройкиПоиска.НаименованиеПравилаОбмена, "НаименованиеПравилаОбмена", НазначениеТипаXML.Явное);
				ЗаписатьXML(ЗаписьXML, ВариантНастройкиПоиска.ЭтоНастройкаДляВыгрузки, "ЭтоНастройкаДляВыгрузки", НазначениеТипаXML.Явное);
				ЗаписьXML.ЗаписатьКонецЭлемента();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	
	Если мРегламентноеЗадание <> Неопределено Тогда 
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("РасписаниеОсновногоРегламентного");
		ЗаписатьРасписанияРегламентногоЗаданияВXML(ЗаписьXML, мРегламентноеЗадание.Расписание);
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЕсли;
	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СтрокаЗаписи = ЗаписьXML.Закрыть();
	Возврат СтрокаЗаписи;
	
КонецФункции

Процедура СоздатьНастройкуОбменаПоДанным(СтрокаДанных) Экспорт
	
	ЗагрузитьНастройкиИзФайла("", СтрокаДанных);
	ДействиеВыбранноеПользователем = 1;
	
	ИнформацияОТипах = ОпределитьТипИБПоПараметрам();
	
	ВсеНастройкиЗаданыХотимИхПрименить(Неопределено, ИнформацияОТипах, Ложь);
	
КонецПроцедуры

Функция ОпределитьДатуНачалаВыгрузкиДокументов()  Экспорт
	Возврат НачалоГода(ТекущаяДата());
КонецФункции

Функция УстановитьПараметрыВнешнегоВызоваДляРедактированияНастройки(РедактируемаяНастройкаОбмена)  Экспорт
	
	РежимЭксперта = Истина;
	//СценарийРаботы = 2;
	//ЭтапНастройки  = 6;
	НастройкаОбмена = РедактируемаяНастройкаОбмена;
КонецФункции	

мТаблицаВозможныхОбменов = ПараметрыОбменаДанными.ПолучитьТаблицуВозможныхОбменовСБухгалтерией2();
мСтруктураИнформацииОТекущейИнформационнойБазе = ПараметрыОбменаДанными.ПолучитьИнформациюОТекущейИнформационнойБазеРТБП2();

мРегламентноеЗадание = Неопределено;

ВозможностьПодключенияКоВторойИнформационнойБазе = Истина;

ВерсияПлатформыИнформационнойБазыДляПодключения = "V82";   

ВтораяИнформационнаяБазаТолькоОтсылаетКвитанции = Истина;
ИспользоватьРегламентныеЗадания = Ложь;

мОбработкаОбменаДаннымиXML = Обработки.ОбменДаннымиXML.Создать();

мПрефиксДляИБИсточника = Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Получить();