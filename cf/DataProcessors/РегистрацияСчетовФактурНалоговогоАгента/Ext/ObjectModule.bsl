Перем мВалютаРегламентированногоУчета Экспорт; 

Процедура ЗаполнитьДокумент(ОшибкаЗаполнения = Ложь, Сообщать = Истина, СтрокаСообщения = "") Экспорт
	
	ТаблицаРезультатов = Список.ВыгрузитьКолонки();
	
	ЗаполнитьСтрокиДокумента(ТаблицаРезультатов);
	
	Список.Загрузить(ТаблицаРезультатов);
	
	Если Не (Список.Количество() > 0) Тогда
		ОшибкаЗаполнения = Истина;
		СтрокаСообщения = СтрокаСообщения + Символы.ПС + " - начисления не обнаружены"
	КонецЕсли;
	
	Если ОшибкаЗаполнения Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Регистрация счетов-фактур налогового агента не требуется:"+СтрокаСообщения, , , СтатусСообщения.Информация);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокиДокумента(ТаблицаРезультатов) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	СчетаИсключения = Новый Массив;
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	
	Запрос.УстановитьПараметр("СчетаИсключения", СчетаИсключения);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОборотыДтКт.Регистратор КАК ДокументОснование,
	               |	ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118) КАК СтавкаНДС,
	               |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот + ХозрасчетныйОборотыДтКт.СуммаОборот * 0.18) КАК Сумма,
	               |	СУММА(ХозрасчетныйОборотыДтКт.СуммаОборот * 0.18) КАК СуммаНДС,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1 КАК Контрагент,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2 КАК ДоговорКонтрагента,
	               |	ХозрасчетныйОборотыДтКт.Регистратор.Дата КАК Дата,
	               |	ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО) КАК СчетФактура
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	               |			&НачалоПериода,
	               |			&КонецПериода,
	               |			Регистратор,
	               |			(НЕ СчетДт В (&СчетаИсключения)),
	               |			&ВидыСубконто,
	               |			(НЕ СчетКт.ВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)),
	               |			,
	               |			Организация = &Организация
	               |				И СубконтоДт2.УчетАгентскогоНДС
	               |				И СубконтоДт2.НалоговыйАгентПоОплате) КАК ХозрасчетныйОборотыДтКт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	               |		ПО ХозрасчетныйОборотыДтКт.Регистратор = СчетФактураВыданный.ДокументОснование
	               |			И ХозрасчетныйОборотыДтКт.СубконтоДт2 = СчетФактураВыданный.Ссылка.ДоговорКонтрагента
	               |			И (СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НалоговыйАгент))
	               |			И (СчетФактураВыданный.Ссылка.ПометкаУдаления = ЛОЖЬ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(СчетФактураВыданный.Ссылка, НЕОПРЕДЕЛЕНО),
	               |	ХозрасчетныйОборотыДтКт.Регистратор,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт1,
	               |	ХозрасчетныйОборотыДтКт.СубконтоДт2,
	               |	ХозрасчетныйОборотыДтКт.Регистратор.Дата
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
	
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	// В результате содержатся строки, соответсвующие начислению НДС при поступлении,
	// тип значение в колонке ДокументОснование не соответствует разрешенным. Такие строки надо удалить
	СтрокиКУдалению = Новый Массив;
	Для Каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
		Если Не ЭтотОбъект.Метаданные().ТабличныеЧасти.Список.Реквизиты.ДокументОснование.Тип.СодержитТип(ТипЗнч(СтрокаТаблицы.ДокументОснование)) Тогда
			СтрокиКУдалению.Добавить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаРезультатов.Удалить(СтрокаКУдалению);		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьСчетаФактуры(ЕстьОшибки = Ложь) Экспорт
	
	ПустаяСсылкаСФ = Новый(Тип("ДокументСсылка.СчетФактураВыданный"));
	////////////////////////////////////////////////////////////////////////////
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	СписокСФ = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("СчетФактура"),Истина);
	Для каждого СчФ Из СписокСФ Цикл
		Если СчФ = ПустаяСсылкаСФ Тогда
			Продолжить;
		Иначе
			СчФ = СчФ.Ссылка.ПолучитьОбъект();
			СчФ.УстановитьПометкуУдаления(Истина);
		КонецЕсли; 
	КонецЦикла; 
	// Предварительная установка пометки на удаление для СФ, выбранных в таблице
	////////////////////////////////////////////////////////////////////////////
	
	МассивДокументов = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(Список.ВыгрузитьКолонку("ДокументОснование"));
	МассивДоговоров = Новый Массив;
	
	СтруктураОтбораДокумент = Новый Структура("ДокументОснование");
	СтруктураОтбораДоговор = Новый Структура("ДокументОснование, ДоговорКонтрагента");
	Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
		
	Для Каждого Документ Из МассивДокументов Цикл
		
		СтруктураОтбораДокумент.ДокументОснование = Документ;
		СтрокиПоДокументу = Список.НайтиСтроки(СтруктураОтбораДокумент);
		
		МассивДоговоров.Очистить();
		Для Каждого СтрокаОтбора Из СтрокиПоДокументу Цикл
			МассивДоговоров.Добавить(СтрокаОтбора.ДоговорКонтрагента);
		КонецЦикла;
		МассивДоговоров = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивДоговоров);
		ТЧАвансыСтарые = Новый Соответствие;
		
		Для Каждого Договор Из МассивДоговоров Цикл
			СтруктураОтбораДоговор.ДокументОснование = Документ;
			СтруктураОтбораДоговор.ДоговорКонтрагента = Договор;
			СтрокиПоДоговору = Список.НайтиСтроки(СтруктураОтбораДоговор);
			
			СчФ = Неопределено;
			ТЧАвансыСтарые.Очистить();
			
			ОшибкаФормирования = Ложь;
			
			Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
				
				Если СчФ = Неопределено Тогда
					// Создать/использовать Счет-фактуру
					Если Не СтрокаОтбораДоговор.СчетФактура = ПустаяСсылкаСФ Тогда
						СчФ = СтрокаОтбораДоговор.СчетФактура.ПолучитьОбъект();
						Если ТЧАвансыСтарые[СчФ] = Неопределено Тогда
							ТЧАвансыСтарые.Вставить(СчФ, СчФ.Авансы.Выгрузить());
						КонецЕсли;
					Иначе
						СчФ = Документы.СчетФактураВыданный.СоздатьДокумент();
						СчФ.Ответственный = Ответственный;
					КонецЕсли;
					ЗаполнитьЗначенияСвойств(СчФ, СтрокаОтбораДоговор);
					
					СчФ.Дата = КонецДня(СчФ.Дата);
					
					СчФ.ПометкаУдаления = Ложь;
					СчФ.Организация = Организация;
					СчФ.ВидСчетаФактуры = Перечисления.НДСВидСчетаФактуры.НалоговыйАгент;
					СчФ.Под0 = Ложь;
					СчФ.СформированПриВводеНачальныхОстатковНДС = Ложь;
					
					СчФ.ВалютаДокумента = мВалютаРегламентированногоУчета;
					СчФ.СуммаДокумента = СтрокаОтбораДоговор.Сумма;
					
					СчФ.ДокументыОснования.Очистить();
					СчФ.ДокументыОснования.Добавить().ДокументОснование = СтрокаОтбораДоговор.ДокументОснование;
					
					СчФ.Авансы.Очистить();
			
				Иначе
					
					СчФ.Сумма = СчФ.Сумма + СтрокаОтбораДоговор.Сумма;
					СчФ.СуммаНДС = СчФ.СуммаНДС + СтрокаОтбораДоговор.СуммаНДС;
					СчФ.СуммаДокумента = СчФ.СуммаДокумента + СтрокаОтбораДоговор.ВалютнаяСумма;
					
				КонецЕсли;
				
				СчФ.ДатаНомерДокументовОплаты.Очистить();
				Если ТипЗнч(СтрокаОтбораДоговор.ДокументОснование) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
					СчФ.НомерПлатежноРасчетногоДокумента = СтрокаОтбораДоговор.ДокументОснование.НомерВходящегоДокумента;
					СчФ.ДатаПлатежноРасчетногоДокумента =  СтрокаОтбораДоговор.ДокументОснование.ДатаВходящегоДокумента;
				Иначе
					СчФ.НомерПлатежноРасчетногоДокумента = ОбщегоНазначения.ПолучитьНомерНаПечать(СтрокаОтбораДоговор.ДокументОснование);
					СчФ.ДатаПлатежноРасчетногоДокумента = СтрокаОтбораДоговор.ДокументОснование.Дата;
				КонецЕсли;
		
				СтрокаПРД = СчФ.ДатаНомерДокументовОплаты.Добавить();
				СтрокаПРД.ДатаПлатежноРасчетногоДокумента	= СчФ.ДатаПлатежноРасчетногоДокумента;
				СтрокаПРД.НомерПлатежноРасчетногоДокумента	= СчФ.НомерПлатежноРасчетногоДокумента;
				
				СуммаПоСтроке = СтрокаОтбораДоговор.Сумма;
				СуммаНДСПоСтроке = СтрокаОтбораДоговор.СуммаНДС;
				СтавкаНДСПоСтроке = СтрокаОтбораДоговор.СтавкаНДС;
				Если ТЧАвансыСтарые[СчФ] <> Неопределено Тогда
					Для Каждого СтрокаСтарая Из ТЧАвансыСтарые[СчФ] Цикл
						Если СуммаПоСтроке = 0 Тогда
							Прервать;
						КонецЕсли;
						Если СтрокаСтарая.Сумма = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если СтрокаОтбораДоговор.СтавкаНДС = СтрокаСтарая.СтавкаНДС Тогда
							НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
							НоваяСтрокаПоСуммам.Номенклатура = СтрокаСтарая.Номенклатура;
							НоваяСтрокаПоСуммам.Содержание = СтрокаСтарая.Содержание;
							НоваяСтрокаПоСуммам.Сумма = Мин(СуммаПоСтроке, СтрокаСтарая.Сумма);
							НоваяСтрокаПоСуммам.СуммаНДС = Мин(СуммаНДСПоСтроке, СтрокаСтарая.СуммаНДС);
							НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
							СуммаПоСтроке = СуммаПоСтроке - НоваяСтрокаПоСуммам.Сумма;
							СуммаНДСПоСтроке = СуммаНДСПоСтроке - НоваяСтрокаПоСуммам.СуммаНДС;
							СтрокаСтарая.Сумма = СтрокаСтарая.Сумма - НоваяСтрокаПоСуммам.Сумма;
							СтрокаСтарая.СуммаНДС = СтрокаСтарая.СуммаНДС - НоваяСтрокаПоСуммам.СуммаНДС;								
						КонецЕсли;
					КонецЦикла;
					Если СуммаПоСтроке <> 0 Тогда
						НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
						НоваяСтрокаПоСуммам.Сумма = СуммаПоСтроке;
						НоваяСтрокаПоСуммам.СуммаНДС = СуммаНДСПоСтроке;
						НоваяСтрокаПоСуммам.СтавкаНДС = СтрокаОтбораДоговор.СтавкаНДС;
						НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					КонецЕсли;
				Иначе
					НоваяСтрокаПоСуммам = СчФ.Авансы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПоСуммам, СтрокаОтбораДоговор);
					НоваяСтрокаПоСуммам.Номенклатура = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс;
					Если НоваяСтрокаПоСуммам.Номенклатура.Услуга Тогда
						НоваяСтрокаПоСуммам.Содержание = СтрокаОтбораДоговор.ДоговорКонтрагента.НаименованиеДляСчетаФактурыНаАванс.НаименованиеПолное;
					КонецЕсли;
				КонецЕсли;
				
				СчФ.Авансы.Свернуть("Номенклатура, Содержание, СтавкаНДС", "Сумма, СуммаНДС");
				
			КонецЦикла;
			
			СообщениеОбОшибке = СчФ.ПроверитьВозможностьЗаписиСФ(ОшибкаФормирования);
			Если ОшибкаФормирования Тогда
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке("Строка "+Строка(СтрокаОтбораДоговор.НомерСтроки)+", не выписан счет-фактура налогового агента."+Символы.ПС+СообщениеОбОшибке);
					СтрокаОтбораДоговор.СчетФактураСформирован = Ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
				Продолжить;
			КонецЕсли; 
				
			Попытка
				НовыйСФ = СчФ.ЭтоНовый();
				СчФ.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
				
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					Сообщить(?(НовыйСФ,"Выписан", "Обновлен") + " счет-фактура налогового агента по строке " + Строка(СтрокаОтбораДоговор.НомерСтроки) + " № " + СчФ.Номер + " от " + СчФ.Дата);
					СтрокаОтбораДоговор.СчетФактураСформирован = Истина;
					СтрокаОтбораДоговор.СчетФактура = СчФ.Ссылка;
				КонецЦикла;
			Исключение
				Для Каждого СтрокаОтбораДоговор Из СтрокиПоДоговору Цикл
					ОбщегоНазначения.СообщитьОбОшибке(?(НовыйСФ, "Не выписан", "Не обновлен") + " счет-фактура налогового агента по строке " + Строка(СтрокаОтбораДоговор.НомерСтроки));
					СтрокаОтбораДоговор.СчетФактураСформирован = Ложь;
					СтрокаОтбораДоговор.СчетФактура = Неопределено;
				КонецЦикла;
				ЕстьОшибки = Истина;
			КонецПопытки;
			
		КонецЦикла;   		
		
	КонецЦикла;
			
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
