Перем ОбновитьСписокОпераций;
Перем ОбновитьСостояниеОпераций;
Перем ОтменаКонтроляВручную;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НАСТРОЙКИ ПЕРИОДА РЕГИСТРАЦИИ ДОКУМЕНТА

// Функция преобразовывает дату в представление периода
//
// Параметры:
//   ПериодРегистрации - Дата периода
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат ПредставлениеПериода(НачалоКвартала(ПериодРегистрации), КонецКвартала(ПериодРегистрации), "ФП = Истина")
	Иначе
		Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'");
	КонецЕсли; 

КонецФункции

// Процедура обрабатывает событие регулирования в поле периода регистрации
//
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 Тогда
		ПериодРегистрации = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал,КонецКвартала(ПериодРегистрации),КонецМесяца(ПериодРегистрации)) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал,НачалоКвартала(ПериодРегистрации),НачалоМесяца(ПериодРегистрации)) - 1);
	КонецЕсли;
	
	ПериодичностьПериодаРегистрации = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, ПериодРегистрации);
	Если ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал Тогда
		ПериодРегистрации = НачалоКвартала(ПериодРегистрации);
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации,ПериодичностьПериодаРегистрации);

КонецПроцедуры

// Процедура обрабатывает событие начала выбора из списка в поле периода регистрации
//
Процедура НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, НачальноеЗначение = Неопределено) Экспорт

	СтандартнаяОбработка = Ложь;
	
	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли; 
	
	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоМесяцаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	ТекДата = НачалоТекущегоГода;
	ДатаКон = КонецГода(НачальноеЗначение);
	Пока ТекДата < ДатаКон Цикл
	
		НалоговыйПериод = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, ПериодРегистрации);
		
		ЭтоНачалоНалоговогоПериода = (НалоговыйПериод = Перечисления.Периодичность.Месяц
								 ИЛИ ТекДата = НачалоКвартала(ТекДата));
		Если ЭтоНачалоНалоговогоПериода Тогда
			КонПериода = ?(НалоговыйПериод = Перечисления.Периодичность.Месяц,
							 КонецМесяца(ТекДата), КонецКвартала(ТекДата));
			ДобавленныйЭлемент = СписокВыбора.Добавить(ТекДата,ПредставлениеПериода(НачалоДня(ТекДата), КонецДня(КонПериода), "ФП = Истина"),(не НалоговыйПериод = Перечисления.Периодичность.Месяц));
		КонецЕсли;
		
		Если НачальноеЗначение = ТекДата Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли; 
		
		ТекДата = ДобавитьМесяц(ТекДата, 1);
	
	КонецЦикла;

	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(НачальноеЗначение) Тогда
		НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма, ВыбранныйЭлемент.Значение);
		Возврат;
	КонецЕсли;
	
	ПериодРегистрации = ВыбранныйЭлемент.Значение;
	Элемент.Значение  = ВыбранныйЭлемент.Представление;
	ПериодичностьПериодаРегистрации = ?(ВыбранныйЭлемент.Пометка, Перечисления.Периодичность.Квартал,  Перечисления.Периодичность.Месяц);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьВидимость()

КонецПроцедуры

Процедура ОбновитьСостояниеВыполненияОпераций()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Факт.РегламентнаяОперация КАК РегламентнаяОперация,
		|	Факт.Актуальность КАК Актуальность,
		|	Факт.РегламентныйДокумент КАК Регистратор,
		|	Факт.НеКонтролировать КАК НеКонтролировать
		|ИЗ
		|	РегистрСведений.ВыполнениеРегламентныхОпераций КАК Факт
		|ГДЕ
		|	Факт.Организация = &Организация
		|	И ВЫБОР
		|			КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА НАЧАЛОПЕРИОДА(Факт.ПериодРегистрации, КВАРТАЛ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, КВАРТАЛ)
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(Факт.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|		КОНЕЦ
		|ИТОГИ
		|	МИНИМУМ(Актуальность),
		|	МАКСИМУМ(НеКонтролировать)
		|ПО
		|	РегламентнаяОперация";
				   
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Периодичность", ПериодичностьПериодаРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);	
	
	ДеревоЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	мСостояниеОпераций.Очистить();
	
	ОтменаКонтроляВручную = Новый Соответствие();
	Для Каждого СтрокаДерева ИЗ ДеревоЗапроса.Строки Цикл
		
		Если СтрокаДерева.НеКонтролировать Тогда
			ОтменаКонтроляВручную.Вставить(СтрокаДерева.РегламентнаяОперация, Истина);
			// Удалим строки отмены контроля
			КоличествоСтрок = СтрокаДерева.Строки.Количество();
			
			Для Индекс = 1 По КоличествоСтрок Цикл
				Если СтрокаДерева.Строки[КоличествоСтрок-Индекс].НеКонтролировать Тогда
					Если не ЗначениеЗаполнено(СтрокаДерева.Строки[КоличествоСтрок-Индекс].Регистратор) Тогда
						СтрокаДерева.Строки.Удалить(КоличествоСтрок-Индекс);
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли; 
		Если СтрокаДерева.Строки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		мСостояниеОпераций[СтрокаДерева.РегламентнаяОперация] = СтрокаДерева;
	КонецЦикла;	
	
	ВсеОперацииВыполнены = Истина;
	НеВыполненнаяОперация = Неопределено;
	
	ВсеОперацииАктуальны = Истина;
	НеАктуальнаяОперация = Неопределено;
	
	ОбластьОшибки = Неопределено;
	
	Для Каждого СтрокаУзла ИЗ мПолноеДерево Цикл
		РегламентнаяОперация = СтрокаУзла.Узел;
		ПараметрыОперации = мСостояниеОпераций[РегламентнаяОперация];
		
		ОперацияВыполнена = (не ПараметрыОперации = Неопределено);
		ОперацияАктуальна = (ОперацияВыполнена и ПараметрыОперации.Актуальность);
		
		СтрокаУзла.ОтменаКонтроляВручную = ?(ОтменаКонтроляВручную[РегламентнаяОперация] = Неопределено, Ложь, ОтменаКонтроляВручную[РегламентнаяОперация]);
		
		ТекущаяОбласть = ОтобразитьРеглОперацию(РегламентнаяОперация,СтрокаУзла.Контроль,ОперацияВыполнена,ОперацияАктуальна, СтрокаУзла.ОтменаКонтроляВручную);
		
		//Установка расшифровки для выполнения действия по умолчанию
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
			Или РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
			или РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы
			тогда
			Если ОперацияАктуальна Тогда
				ТекущаяОбласть.Расшифровка = "ОткрытьСписокДокументов";
			Иначе	
				ТекущаяОбласть.Расшифровка = "ДокументВвести";
			КонецЕсли; 
		Иначе
			Если ОперацияВыполнена Тогда
				Если ПараметрыОперации.Строки.Количество()>1 Тогда
					ТекущаяОбласть.Расшифровка = "ОткрытьСписокДокументов";
				Иначе 	
					ТекущаяОбласть.Расшифровка = "ДокументОткрыть";
				КонецЕсли; 
			Иначе
				ТекущаяОбласть.Расшифровка = "ДокументВвести";
			КонецЕсли; 
		КонецЕсли; 
		
		Если СтрокаУзла.Контроль и не СтрокаУзла.ОтменаКонтроляВручную и ВсеОперацииВыполнены и ВсеОперацииАктуальны Тогда
			ВсеОперацииВыполнены = ВсеОперацииВыполнены и (ОперацияВыполнена);
			ВсеОперацииАктуальны = ВсеОперацииАктуальны и (ОперацияАктуальна);
			Если не ВсеОперацииВыполнены Тогда
				НеВыполненнаяОперация = СтрокаУзла.Узел;
				ОбластьОшибки = ТекущаяОбласть;
			ИначеЕсли не ВсеОперацииАктуальны тогда
				НеАктуальнаяОперация = СтрокаУзла.Узел;
				ОбластьОшибки = ТекущаяОбласть;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	Если мУпрощенныйУчетНДС Тогда
		Рекомендации = "По организации ведется учет НДС без использования регламентных документов (признак учетной политики)."+Символы.ПС
		+"Формирование регламентных документов не требуется.";
	ИначеЕсли не ВсеОперацииВыполнены Тогда
		Рекомендации = "Выполнены не все регламентные операции, необходимые для завершения налогового периода по НДС.
		|Необходимо выполнить операцию: «"+Строка(НеВыполненнаяОперация)+"»";
	ИначеЕсли не ВсеОперацииАктуальны Тогда
		Если НеАктуальнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс 
			Или НеАктуальнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента 
			или НеАктуальнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы 
			Тогда
			ДействиеОбновления = "заново провести регистрацию";
		Иначе
			ДействиеОбновления = "заново заполнить и провести документы";
		КонецЕсли; 
		
		Рекомендации = "Не все регламентные операции, необходимые для завершения налогового периода по НДС, актуальны.
		|Необходимо обновить операцию: «"+Строка(НеАктуальнаяОперация)+"» ("+ДействиеОбновления+")";
	Иначе
		Рекомендации = "Выполнены все регламентные операции, необходимые для завершения налогового периода по НДС.
		|Можно формировать книги покупок и продаж, а так же декларацию по НДС.";
	КонецЕсли;
	
	Если не ОбластьОшибки = Неопределено Тогда
		ЭлементыФормы.ПланВыполненияСхема.Области.СтрелкаТекущаяОперация.Расположить(ЭлементыФормы.ПланВыполненияСхема.Область(ОбластьОшибки.Верх - 2, ОбластьОшибки.Лево + 1,ОбластьОшибки.Верх - 1, ОбластьОшибки.Лево + 1));
		ЭлементыФормы.ПланВыполненияСхема.ТекущаяОбласть = ЭлементыФормы.ПланВыполненияСхема.Область(ОбластьОшибки.Верх - 2, ОбластьОшибки.Лево + 1,ОбластьОшибки.Верх - 1, ОбластьОшибки.Лево + 1);
	Иначе
		ЭлементыФормы.ПланВыполненияСхема.Области.СтрелкаТекущаяОперация.Расположить(ЭлементыФормы.ПланВыполненияСхема.Область(ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Верх - 2, ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Лево +1,ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Верх - 1, ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Лево + 1));
		ЭлементыФормы.ПланВыполненияСхема.ТекущаяОбласть = ЭлементыФормы.ПланВыполненияСхема.Область(ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Верх - 2, ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Лево +1,ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Верх - 1, ЭлементыФормы.ПланВыполненияСхема.Области.Декларация.Лево + 1);
	КонецЕсли; 
	
	ЭлементыФормы.ОписаниеТекущегоСостоянияМакета.Значение = Рекомендации;
	
КонецПроцедуры

Функция ОтобразитьРеглОперацию(Операция, КонтролироватьОперацию, ОперацияВыполнена, ОперацияАктуальна, ОтменаКонтроляВручную)
	
	Область = ЭлементыФормы.ПланВыполненияСхема.Область(Операция.Метаданные().ЗначенияПеречисления.Получить(Перечисления.РегламентныеОперации.Индекс(Операция)).Имя);
	
	СплошнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
	ТочечнаяЛиния = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Точечная, 1);
	БольшойПунктир = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.БольшойПунктир, 2);
	
	Если КонтролироватьОперацию и ОтменаКонтроляВручную Тогда
		Область.ЦветРамки = WebЦвета.ОранжевоКрасный;
		Область.Обвести(БольшойПунктир,БольшойПунктир,БольшойПунктир,БольшойПунктир);
	ИначеЕсли КонтролироватьОперацию тогда
		Область.ЦветРамки = Новый Цвет(0, 0, 0);
		Область.Обвести(СплошнаяЛиния,СплошнаяЛиния,СплошнаяЛиния,СплошнаяЛиния);
	Иначе
		Область.ЦветРамки = Новый Цвет(128, 128, 128);
		Область.Обвести(ТочечнаяЛиния,ТочечнаяЛиния,ТочечнаяЛиния,ТочечнаяЛиния);
	КонецЕсли; 
	
	Если не ОперацияВыполнена Тогда
		Если КонтролироватьОперацию и не ОтменаКонтроляВручную Тогда
			ЦветФона = WebЦвета.СеребристоСерый;
		Иначе
			ЦветФона = WebЦвета.Белый;
		КонецЕсли;
	ИначеЕсли ОперацияАктуальна Тогда
		ЦветФона = WebЦвета.НейтральноЗеленый;
	Иначе
		ЦветФона = WebЦвета.ТусклоРозовый;
	КонецЕсли; 
	Область.ЦветФона = ЦветФона;
	
	Если не ОперацияВыполнена и не (КонтролироватьОперацию и не ОтменаКонтроляВручную) Тогда
		Область.ЦветТекста = Новый Цвет(128, 128, 128);
	Иначе
		Область.ЦветТекста = WebЦвета.Черный;
	КонецЕсли; 
	
	Возврат Область;
КонецФункции

Процедура ОбработкаВыбранногоДействия(ВыбранноеДействие, ИмяОперации, ОперацияСсылка, ДокументСсылка = Неопределено, ОпределитьНаличиеДокументов = Ложь)

	НачалоПериодаРегистрации = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, НачалоКвартала(ПериодРегистрации), НачалоМесяца(ПериодРегистрации));
	КонецПериодаРегистрации = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, КонецКвартала(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	Если ВыбранноеДействие = "ДокументВвести" Тогда
		ВвестиДокумент(ИмяОперации, ОпределитьНаличиеДокументов);	
	ИначеЕсли ВыбранноеДействие = "ДокументОткрыть" и Не ДокументСсылка = Неопределено Тогда
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		ФормаДокумента = ДокументОбъект.ПолучитьФорму(,ЭтаФорма);
		РегламентнаяОперация = Перечисления.РегламентныеОперации[ИмяОперации];		
		ПараметрыОперации = мСостояниеОпераций[РегламентнаяОперация];
		Если Не (Не ПараметрыОперации = Неопределено и ПараметрыОперации.Актуальность) Тогда
			ОшибкаАвтозаполнения = Ложь;
			СтрокаСообщения = "";
			ФормаДокумента.Открыть();
			Если ДокументОбъект.Проведен Тогда
				Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					Попытка
						ФормаДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						ФормаДокумента.ЗаполнитьДокумент(ОшибкаАвтозаполнения, Ложь, СтрокаСообщения, Истина);
					Исключение
					    // Для документа не прописано автозаполнение
					КонецПопытки;
					
					Если ОшибкаАвтозаполнения Тогда
						СтрокаСообщения = "Документ «"+ФормаДокумента.Метаданные().Синоним+"» за "+ПредставлениеПериодаРегистрации+" не может быть заполнен автоматически по причине:"+СтрокаСообщения;
						Если мПолноеДерево.НайтиСтроки(Новый Структура("Узел, Контроль", РегламентнаяОперация, Истина)).Количество()>0 тогда
							СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Перед заполнением документа рекомендуется проверить и, при необходимости, исправить ошибки в учете.";
						Иначе
							СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Возможно документ «"+ФормаДокумента.Метаданные().Синоним+"» в этом периоде не нужен.";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ДокументОбъект, ФормаДокумента);
		Иначе
			ФормаДокумента.Открыть();
		КонецЕсли;
	ИначеЕсли ВыбранноеДействие = "ОткрытьОтчет" тогда
		Если ИмяОперации = "КнигаПокупок" Тогда
			ФормаОтчета = Отчеты.КнигаПокупок.ПолучитьФорму(,ЭтаФорма);
			ФормаОтчета.Открыть();
			ФормаОтчета.Организация = Организация;
			ФормаОтчета.НачалоПериода = НачалоПериодаРегистрации;
			ФормаОтчета.КонецПериода = КонецПериодаРегистрации;
			ФормаОтчета.КоманднаяПанельСформировать(Неопределено);
		ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
			ФормаОтчета = Отчеты.КнигаПродаж.ПолучитьФорму(,ЭтаФорма);
			ФормаОтчета.Открыть();
			ФормаОтчета.Организация = Организация;
			ФормаОтчета.НачалоПериода = НачалоПериодаРегистрации;
			ФормаОтчета.КонецПериода = КонецПериодаРегистрации;
			ФормаОтчета.Сформировать(Неопределено);
		ИначеЕсли ИмяОперации = "Декларация" Тогда
			ФормаДекларации = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностью");
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("Организация", Организация);
			ПараметрыОткрытия.Вставить("ДатаОкончанияПериода", КонецПериодаРегистрации);
			ПараметрыОткрытия.Вставить("ВидыОтчетов", "РегламентированныйОтчетНДС");
			Если не (мУчетнаяПолитикаНУ = Неопределено
				или мУчетнаяПолитикаНУ.Количество() = 0) Тогда
				ПараметрыОткрытия.Вставить("Периодичность", Перечисления.Периодичность.Квартал);
			КонецЕсли; 
			ФормаДекларации.ПараметрыОткрытия = ПараметрыОткрытия;

			ФормаДекларации.Открыть();
		КонецЕсли; 
	ИначеЕсли ВыбранноеДействие = "ОткрытьЖурналУчетаПолученныхСчетовФактур" Тогда	
		ФормаОтчета = Отчеты.ЖурналУчетаПолученныхСчетовФактур.ПолучитьФорму(,ЭтаФорма);
		ФормаОтчета.Открыть();
		ФормаОтчета.Организация = Организация;
		ФормаОтчета.НачалоПериода = НачалоПериодаРегистрации;
		ФормаОтчета.КонецПериода = КонецПериодаРегистрации;
		ФормаОтчета.Сформировать(Неопределено);
	ИначеЕсли ВыбранноеДействие = "ОткрытьЖурналУчетаВыданныхСчетовФактур" Тогда	
		ФормаОтчета = Отчеты.ЖурналУчетаВыданныхСчетовФактур.ПолучитьФорму(,ЭтаФорма);
		ФормаОтчета.Открыть();
		ФормаОтчета.Организация = Организация;
		ФормаОтчета.НачалоПериода = НачалоПериодаРегистрации;
		ФормаОтчета.КонецПериода = КонецПериодаРегистрации;
		ФормаОтчета.Сформировать(Неопределено);
	Иначе
		Если ВыбранноеДействие = "ОткрытьСписокСчетовФактур" тогда
			Если ИмяОперации = "КнигаПокупок" Тогда
				ФормаСписка = Документы.СчетФактураПолученный.ПолучитьФормуСписка();
			ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
				ФормаСписка = Документы.СчетФактураВыданный.ПолучитьФормуСписка();
			КонецЕсли;
		ИначеЕсли ВыбранноеДействие = "ОткрытьСписокДокументов" тогда
			Если ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0 Тогда
				ФормаСписка = Документы.ФормированиеЗаписейКнигиПокупок.ПолучитьФормуСписка();
				ФормаСписка.Отбор.ПредъявленНДСКВычету0.Установить(Истина,Истина);
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок Тогда
				ФормаСписка = Документы.ФормированиеЗаписейКнигиПокупок.ПолучитьФормуСписка();
				ФормаСписка.Отбор.ПредъявленНДСКВычету0.Установить(Ложь,Истина);
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
				ФормаСписка = Документы.ФормированиеЗаписейКнигиПродаж.ПолучитьФормуСписка();
				ФормаСписка.Отбор.Реализация0.Установить(Истина,Истина);
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж Тогда
				ФормаСписка = Документы.ФормированиеЗаписейКнигиПродаж.ПолучитьФормуСписка();
				ФормаСписка.Отбор.Реализация0.Установить(Ложь,Истина);
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс Тогда
				ФормаСписка = Документы.СчетФактураВыданный.ПолучитьФормуСписка();
				ФормаСписка.Отбор.ВидСчетаФактуры.Установить(Перечисления.НДСВидСчетаФактуры.НаАванс,Истина);
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента Тогда
				ФормаСписка = Документы.СчетФактураВыданный.ПолучитьФормуСписка();
				ФормаСписка.Отбор.ВидСчетаФактуры.Установить(Перечисления.НДСВидСчетаФактуры.НалоговыйАгент,Истина);
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда
				ФормаСписка = Документы.СчетФактураВыданный.ПолучитьФормуСписка();
				ФормаСписка.Отбор.ВидСчетаФактуры.Установить(Перечисления.НДСВидСчетаФактуры.НаСуммовуюРазницу,Истина);
			Иначе
				ФормаСписка = Документы[ИмяОперации].ПолучитьФормуСписка();
			КонецЕсли;
		КонецЕсли;
		ФормаСписка.Отбор.Дата.Использование = Истина;
		ФормаСписка.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		ФормаСписка.Отбор.Дата.ЗначениеС = НачалоПериодаРегистрации;
		ФормаСписка.Отбор.Дата.ЗначениеПо = КонецПериодаРегистрации;
		
		ФормаСписка.Отбор.Организация.Установить(Организация, истина);
		
		ФормаСписка.Открыть();
	КонецЕсли; 


КонецПроцедуры

Процедура ВвестиДокумент(КнопкаИмя, ОпределитьНаличиеДокументов)
	
	Попытка
		РегламентнаяОперация = Перечисления.РегламентныеОперации[КнопкаИмя];
	Исключение
		РегламентнаяОперация = Неопределено;
		Возврат;
	КонецПопытки; 
	
 	Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс Тогда		
		ОткрытьОбработку(КнопкаИмя, РегламентнаяОперация);
		Возврат;
		
 	ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента Тогда		
		ОткрытьОбработку(КнопкаИмя, РегламентнаяОперация);
		Возврат;
		
	ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда
		ОткрытьОбработку(КнопкаИмя, РегламентнаяОперация);
		Возврат;
	Иначе
		
		Если ОпределитьНаличиеДокументов Тогда
			ДокументыПоОперацииЗаПериод = ПолучитьДокументыПоКодуОперации(РегламентнаяОперация, КнопкаИмя);
			Если ДокументыПоОперацииЗаПериод.Количество() > 0 
				и НЕ ДокументыПоОперацииЗаПериод[0].ПометкаУдаления Тогда
				Если ДокументыПоОперацииЗаПериод.Количество() = 1 Тогда
					Ответ = Вопрос("Обнаружен документ «"+Строка(ДокументыПоОперацииЗаПериод[0].Представление)+"»,
					|который может быть использован для отражения операции «"+Строка(РегламентнаяОперация)+"».
					|Открыть найденный документ (документ будет заполнен автоматически)?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						// ДокументОбъект = ДокументыПоОперацииЗаПериод[0].Ссылка.ПолучитьОбъект();
						// ОбработкаВыбранногоДействия("ДокументОткрыть", КнопкаИмя, РегламентнаяОперация,ДокументыПоОперацииЗаПериод[0].Ссылка);
						
						ДокументОбъект = ДокументыПоОперацииЗаПериод[0].Ссылка.ПолучитьОбъект();
						ФормаДокумента = ДокументОбъект.ПолучитьФорму(, ЭтаФорма);
						
						ОшибкаАвтозаполнения = Ложь;
						СтрокаСообщения = "";
						ФормаДокумента.Открыть();
						Если ДокументыПоОперацииЗаПериод[0].Проведен Тогда
							Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
							Если Ответ = КодВозвратаДиалога.Да Тогда
								Попытка
									ФормаДокумента.Записать(РежимЗаписиДокумента.ОтменаПроведения);
									ФормаДокумента.ЗаполнитьДокумент(ОшибкаАвтозаполнения, Ложь, СтрокаСообщения, Истина);
								Исключение
								    // Для документа не прописано автозаполнение
								КонецПопытки;
								
								Если ОшибкаАвтозаполнения Тогда
									СтрокаСообщения = "Документ «"+ФормаДокумента.Метаданные().Синоним+"» за "+ПредставлениеПериодаРегистрации+" не может быть заполнен автоматически по причине:"+СтрокаСообщения;
									Если мПолноеДерево.НайтиСтроки(Новый Структура("Узел, Контроль", РегламентнаяОперация, Истина)).Количество()>0 тогда
										СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Перед заполнением документа рекомендуется проверить и, при необходимости, исправить ошибки в учете.";
									Иначе
										СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Возможно документ «"+ФормаДокумента.Метаданные().Синоним+"» в этом периоде не нужен.";
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						Иначе
							Попытка
								ФормаДокумента.ЗаполнитьДокумент(ОшибкаАвтозаполнения, Ложь, СтрокаСообщения, Истина);
							Исключение
								// Для документа не прописано автозаполнение
							КонецПопытки;
							
							Если ОшибкаАвтозаполнения Тогда
								СтрокаСообщения = "Документ «"+ФормаДокумента.Метаданные().Синоним+"» за "+ПредставлениеПериодаРегистрации+" не может быть заполнен автоматически по причине:"+СтрокаСообщения;
								Если мПолноеДерево.НайтиСтроки(Новый Структура("Узел, Контроль", РегламентнаяОперация, Истина)).Количество()>0 тогда
									СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Перед заполнением документа рекомендуется проверить и, при необходимости, исправить ошибки в учете.";
								Иначе
									СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Возможно документ «"+ФормаДокумента.Метаданные().Синоним+"» в этом периоде не нужен.";
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ДокументОбъект, ФормаДокумента);

						Возврат;
					КонецЕсли;
				Иначе // Несколько документов - открываем список
					Ответ = Вопрос("Обнаружены документы, которые могут быть использованы для отражения операции 
					|«"+Строка(РегламентнаяОперация)+"».
					|Открыть список найденных документов?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
					Если Ответ = КодВозвратаДиалога.Да Тогда
						ОбработкаВыбранногоДействия("ОткрытьСписокДокументов", КнопкаИмя, РегламентнаяОперация);
						Возврат;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0 Тогда
			ФормаДокумента = Документы.ФормированиеЗаписейКнигиПокупок.ПолучитьФормуНовогоДокумента(,ЭтаФорма);
			ФормаДокумента.ПредъявленНДСКВычету0 = Истина;
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
			ФормаДокумента = Документы.ФормированиеЗаписейКнигиПродаж.ПолучитьФормуНовогоДокумента(,ЭтаФорма);
			ФормаДокумента.Реализация0 = Истина;
		Иначе
			ФормаДокумента = Документы[КнопкаИмя].ПолучитьФормуНовогоДокумента(,ЭтаФорма);
		КонецЕсли; 
		ФормаДокумента.Дата = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, КонецКвартала(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
		ФормаДокумента.Организация = Организация;
		
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РаспределениеНДСКосвенныхРасходов Тогда
			ФормаДокумента.НачалоПериода = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, НачалоКвартала(ПериодРегистрации), НачалоМесяца(ПериодРегистрации)); 
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДС Тогда
			ФормаДокумента.ОтразитьВКнигеПродаж = (ПериодРегистрации>='20070101');
		КонецЕсли; 
		
		ОшибкаАвтозаполнения = Ложь;
		СтрокаСообщения = "";
		Попытка
			ФормаДокумента.ЗаполнитьДокумент(ОшибкаАвтозаполнения, Ложь, СтрокаСообщения, Истина);
		Исключение
		    // Для документа не прописано автозаполнение
		КонецПопытки;
		
		Если ОшибкаАвтозаполнения Тогда
			СтрокаСообщения = "Документ «"+ФормаДокумента.Метаданные().Синоним+"» за "+ПредставлениеПериодаРегистрации+" не может быть заполнен автоматически по причине:"+СтрокаСообщения;
			Если мПолноеДерево.НайтиСтроки(Новый Структура("Узел, Контроль", РегламентнаяОперация, Истина)).Количество()>0 тогда
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Перед вводом документа рекомендуется проверить и, при необходимости, исправить ошибки в учете.";
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + Символы.ПС+ "Для отключения контроля операции в текущем налоговом периоде необходимо выбрать соответствующий пункт в выпадающем контекстном меню.";
				СтрокаСообщения = СтрокаСообщения+ Символы.ПС + Символы.ПС + "Открыть документ для заполнения вручную?";
				
			Иначе
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Возможно документ «"+ФормаДокумента.Метаданные().Синоним+"» в этом периоде не нужен.";
				СтрокаСообщения = СтрокаСообщения+ Символы.ПС + Символы.ПС + "Открыть документ для заполнения вручную?";
			КонецЕсли;
			Если Вопрос(СтрокаСообщения,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
				ФормаДокумента.Открыть();
			КонецЕсли; 
		Иначе
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры
	
Процедура ОткрытьОбработку(КнопкаИмя, РегламентнаяОперация)
    
 	Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс Тогда		
		ИмяДокумента = "РегистрацияСчетовФактурНаАванс";
 	ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента Тогда		
		ИмяДокумента = "РегистрацияСчетовФактурНалоговогоАгента";
	ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда
		Если НачалоКвартала(ПериодРегистрации) >= '20111001' Тогда
			ТекстСообщения = "Счета-фактуры на суммовые разницы не выписываются, начиная с 01.10.2011 г.";
			Предупреждение(ТекстСообщения);
			Возврат;
		КонецЕсли;
		ИмяДокумента = "РегистрацияСчетовФактурНаСуммовыеРазницы";
	КонецЕсли;
	
	ФормаДокумента = Обработки[ИмяДокумента].ПолучитьФорму(,ЭтаФорма );

	ФормаДокумента.ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
	ФормаДокумента.Организация = Организация;
	ФормаДокумента.НачалоПериода = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, НачалоКвартала(ПериодРегистрации), НачалоМесяца(ПериодРегистрации));
	ФормаДокумента.КонецПериода = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, КонецКвартала(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	ФормаДокумента.ЭлементыФормы.НачалоПериода.ТолькоПросмотр = Истина;
	ФормаДокумента.ЭлементыФормы.КонецПериода.ТолькоПросмотр = Истина;
	ФормаДокумента.ЭлементыФормы.КнопкаВыбораПериода.Доступность = Ложь;
	
	ОшибкаАвтозаполнения = Ложь;
	СтрокаСообщения = "";
	Попытка
		ФормаДокумента.ЗаполнитьДокумент(ОшибкаАвтозаполнения, Ложь, СтрокаСообщения);
	Исключение
		// Для документа не прописано автозаполнение
	КонецПопытки;
	
	Если ОшибкаАвтозаполнения Тогда
		СтрокаСообщения = "Обработка «"+ФормаДокумента.Метаданные().Синоним+"» за "+ПредставлениеПериодаРегистрации+" не может быть заполнена автоматически по причине:"+СтрокаСообщения;
		Если мПолноеДерево.НайтиСтроки(Новый Структура("Узел, Контроль", РегламентнаяОперация, Истина)).Количество()>0 тогда
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Перед запуском обработки рекомендуется проверить и, при необходимости, исправить ошибки в учете.";
		Иначе
			СтрокаСообщения = СтрокаСообщения + Символы.ПС + "Возможно выполнение обработки «"+ФормаДокумента.Метаданные().Синоним+"» в этом периоде не требуется.";
		КонецЕсли;
	
		СтрокаСообщения = СтрокаСообщения+ Символы.ПС+ Символы.ПС + "Открыть обработку для заполнения вручную?";
		Если Вопрос(СтрокаСообщения,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ФормаДокумента.Открыть();
	
	ФормаДокумента.Организация = Организация;
	ФормаДокумента.ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
	ФормаДокумента.НачалоПериода = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, НачалоКвартала(ПериодРегистрации), НачалоМесяца(ПериодРегистрации));
	ФормаДокумента.КонецПериода = ?(ПериодичностьПериодаРегистрации = Перечисления.Периодичность.Квартал, КонецКвартала(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	
КонецПроцедуры

Процедура УстановитьПризнакАктуальностиОперации(РегламентнаяОперация)
	ПараметрыОперации = мСостояниеОпераций[РегламентнаяОперация];
	
	Если не ПараметрыОперации = Неопределено Тогда
		РегистрВыполнения = РегистрыСведений.ВыполнениеРегламентныхОпераций.СоздатьНаборЗаписей();
		РегистрВыполнения.Отбор.ПериодРегистрации.Установить(ПериодРегистрации,Истина);
		РегистрВыполнения.Отбор.Организация.Установить(Организация,Истина);
		РегистрВыполнения.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация,Истина);
		РегистрВыполнения.Прочитать();
		Для каждого Запись Из РегистрВыполнения Цикл
			Если Не Запись.Актуальность Тогда
				Запись.Актуальность = Истина;
			КонецЕсли; 
		КонецЦикла; 
		Если РегистрВыполнения.Модифицированность() Тогда
			РегистрВыполнения.Записать();
			ОбновитьСостояниеВыполненияОпераций();
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры
 
Процедура ОтключитьКонтрольВыполненияОперации(РегламентнаяОперация, Отключить)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Факт.ПериодРегистрации КАК ПериодРегистрации
		|ИЗ
		|	РегистрСведений.ВыполнениеРегламентныхОпераций КАК Факт
		|ГДЕ
		|	Факт.Организация = &Организация
		|	И Факт.РегламентнаяОперация = &РегламентнаяОперация
		|	И ВЫБОР
		|			КОГДА &Отключить
		|				ТОГДА Факт.РегламентныйДокумент = НЕОПРЕДЕЛЕНО
		|			ИНАЧЕ Факт.НеКонтролировать
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|				ТОГДА НАЧАЛОПЕРИОДА(Факт.ПериодРегистрации, КВАРТАЛ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, КВАРТАЛ)
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(Факт.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПериодРегистрации";
				   
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("Периодичность", ПериодичностьПериодаРегистрации);
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("РегламентнаяОперация", РегламентнаяОперация);
	Запрос.УстановитьПараметр("Отключить", Отключить);
	ПериодыЗаписей = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодРегистрации");
	
	РегистрВыполнения = РегистрыСведений.ВыполнениеРегламентныхОпераций.СоздатьНаборЗаписей();
	РегистрВыполнения.Отбор.Организация.Установить(Организация,Истина);
	РегистрВыполнения.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация,Истина);
	
	Если Отключить Тогда
		ЗаписьВнесена = Ложь;
		РегистрВыполнения.Отбор.РегламентныйДокумент.Установить(Неопределено,Истина);
		Для каждого Период Из ПериодыЗаписей Цикл
			РегистрВыполнения.Отбор.ПериодРегистрации.Установить(Период,Истина);
			РегистрВыполнения.Прочитать();
			Если РегистрВыполнения.Количество()>0 Тогда
				РегистрВыполнения[0].НеКонтролировать = Истина;
				ЗаписьВнесена = Истина;
			КонецЕсли;
			Если РегистрВыполнения.Модифицированность() Тогда
				РегистрВыполнения.Записать();
				ОбновитьСостояниеВыполненияОпераций();
			КонецЕсли;
			Если ЗаписьВнесена Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если не ЗаписьВнесена тогда 
			РегистрВыполнения.Отбор.ПериодРегистрации.Установить(ПериодРегистрации,Истина);
			РегистрВыполнения.Прочитать();
			
			ЗаписьОтменыКонтроля = РегистрВыполнения.Добавить();
			ЗаписьОтменыКонтроля.ПериодРегистрации = ПериодРегистрации;
			ЗаписьОтменыКонтроля.Организация = Организация;
			ЗаписьОтменыКонтроля.РегламентнаяОперация = РегламентнаяОперация;
			ЗаписьОтменыКонтроля.НеКонтролировать = Истина;
			ЗаписьОтменыКонтроля.Актуальность	  = Истина;
			ЗаписьОтменыКонтроля.Ответственный = ПараметрыСеанса.ТекущийПользователь;
			РегистрВыполнения.Записать();
			ОбновитьСостояниеВыполненияОпераций();
		КонецЕсли;
	Иначе
		Для каждого Период Из ПериодыЗаписей Цикл
			РегистрВыполнения.Отбор.ПериодРегистрации.Установить(Период,Истина);
			РегистрВыполнения.Прочитать();
			СтрокиКУдалению = Новый Массив;
			Для каждого Запись Из РегистрВыполнения Цикл
				Если не Запись.НеКонтролировать Тогда
					Продолжить;
				ИначеЕсли ЗначениеЗаполнено(Запись.РегламентныйДокумент) Тогда
					Запись.НеКонтролировать = Ложь;
				Иначе
					СтрокиКУдалению.Добавить(Запись);
				КонецЕсли; 
			КонецЦикла; 
			Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				РегистрВыполнения.Удалить(СтрокаКУдалению);
			КонецЦикла;
			Если РегистрВыполнения.Модифицированность() Тогда
				РегистрВыполнения.Записать();
				ОбновитьСостояниеВыполненияОпераций();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьКонтекстноеМенюТекущейЯчейки()
	КонтекстноеМеню = ЭлементыФормы.КоманднаяПанельКонтекстноеМеню.Кнопки;
	КонтекстноеМеню.Очистить();
	
	ИмяТекущейОбласти = ЭлементыФормы.ПланВыполненияСхема.ТекущаяОбласть.Имя;
	
	Если ИмяТекущейОбласти = "КнигаПокупок" тогда
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьОтчет", ТипКнопкиКоманднойПанели.Действие, "Открыть книгу покупок", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.Отчет;
		Кнопка.Пояснение = "";
		КонтекстноеМеню.Добавить("РазделительСписка", ТипКнопкиКоманднойПанели.Разделитель);
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьЖурналУчетаПолученныхСчетовФактур", ТипКнопкиКоманднойПанели.Действие, "Открыть отчет «Журнал учета полученных счетов-фактур»", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.Отчет;
		Кнопка.Пояснение = "";
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьСписокСчетовФактур", ТипКнопкиКоманднойПанели.Действие, "Открыть список полученных счетов-фактур", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.ЖурналДокументов;
		Кнопка.Пояснение = "";
	ИначеЕсли ИмяТекущейОбласти = "КнигаПродаж" тогда
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьОтчет", ТипКнопкиКоманднойПанели.Действие, "Открыть книгу продаж", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.Отчет;
		Кнопка.Пояснение = "";
		КонтекстноеМеню.Добавить("РазделительСписка", ТипКнопкиКоманднойПанели.Разделитель);
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьЖурналУчетаВыданныхСчетовФактур", ТипКнопкиКоманднойПанели.Действие, "Открыть отчет «Журнал учета выданных счетов-фактур»", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.Отчет;
		Кнопка.Пояснение = "";
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьСписокСчетовФактур", ТипКнопкиКоманднойПанели.Действие, "Открыть список выданных счетов-фактур", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.ЖурналДокументов;
		Кнопка.Пояснение = "";
	ИначеЕсли ИмяТекущейОбласти = "Декларация" тогда
		Кнопка = КонтекстноеМеню.Добавить("ОткрытьОтчет", ТипКнопкиКоманднойПанели.Действие, "Открыть декларацию по НДС", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Кнопка.Картинка = БиблиотекаКартинок.Отчет;
		Кнопка.Пояснение = "";
	Иначе
		//Обработка регламентной операции
		Попытка
			ОперацияСсылка = Перечисления.РегламентныеОперации[ИмяТекущейОбласти];
		Исключение
			Возврат;
		КонецПопытки;
		
		ПараметрыОперации = мСостояниеОпераций[ОперацияСсылка];
		
		Если ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс тогда
			Кнопка = КонтекстноеМеню.Добавить("ДокументВвести", ТипКнопкиКоманднойПанели.Действие, "Открыть обработку", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.Обработка;
			Кнопка.Пояснение = "";
			Кнопка = КонтекстноеМеню.Добавить("ОткрытьСписокДокументов", ТипКнопкиКоманднойПанели.Действие, "Открыть список счетов-фактур на аванс", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.ЖурналДокументов;
			Кнопка.Пояснение = "";
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента тогда
			Кнопка = КонтекстноеМеню.Добавить("ДокументВвести", ТипКнопкиКоманднойПанели.Действие, "Открыть обработку", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.Обработка;
			Кнопка.Пояснение = "";
			Кнопка = КонтекстноеМеню.Добавить("ОткрытьСписокДокументов", ТипКнопкиКоманднойПанели.Действие, "Открыть список счетов-фактур налогового агента", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.ЖурналДокументов;
			Кнопка.Пояснение = "";
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда
			Кнопка = КонтекстноеМеню.Добавить("ДокументВвести", ТипКнопкиКоманднойПанели.Действие, "Открыть обработку", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.Обработка;
			Кнопка.Пояснение = "";
			Кнопка = КонтекстноеМеню.Добавить("ОткрытьСписокДокументов", ТипКнопкиКоманднойПанели.Действие, "Открыть список счетов-фактур на сумм.разницу", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.ЖурналДокументов;
			Кнопка.Пояснение = "";
		Иначе
			Кнопка = КонтекстноеМеню.Добавить("ДокументВвести", ТипКнопкиКоманднойПанели.Действие, "Ввести новый документ", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.СоздатьДокумент;
			Кнопка.Пояснение = "";
			Кнопка = КонтекстноеМеню.Добавить("ОткрытьСписокДокументов", ТипКнопкиКоманднойПанели.Действие, "Открыть список документов", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Картинка = БиблиотекаКартинок.ЖурналДокументов;
			Кнопка.Пояснение = "";
		КонецЕсли;
		
		ДокументыПоОперацииЗаПериод = ПолучитьДокументыПоКодуОперации(ОперацияСсылка, ИмяТекущейОбласти);
		
		// Операция выполнена ранее, могут иметься документы или нарушена актуальность
		ВставитьРазделительДляДокументов = Истина;
		СчетчикДокументов = 0;
		Если не ПараметрыОперации = Неопределено Тогда
			Если не ПараметрыОперации.Актуальность Тогда
				//Принудительная установка признака актуальности операции
				КонтекстноеМеню.Добавить("РазделительДляАктуальности", ТипКнопкиКоманднойПанели.Разделитель);
				Кнопка = КонтекстноеМеню.Добавить("СделатьАктуальной", ТипКнопкиКоманднойПанели.Действие, "Считать операцию актуальной", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			КонецЕсли; 
			Для каждого ЗафиксированнаяРегламентнаяОперация Из ПараметрыОперации.Строки Цикл
				Если ЗначениеЗаполнено(ЗафиксированнаяРегламентнаяОперация.Регистратор) Тогда
					Если ВставитьРазделительДляДокументов Тогда
						ВставитьРазделительДляДокументов = Ложь;
						КонтекстноеМеню.Добавить("РазделительСпискаДокументов", ТипКнопкиКоманднойПанели.Разделитель);
					КонецЕсли; 
					СчетчикДокументов = СчетчикДокументов + 1;
					Кнопка = КонтекстноеМеню.Добавить("ДокументОткрыть"+СчетчикДокументов, ТипКнопкиКоманднойПанели.Действие, Строка(ЗафиксированнаяРегламентнаяОперация.Регистратор), новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
					Кнопка.Пояснение = ЗначениеВСтрокуВнутр(ЗафиксированнаяРегламентнаяОперация.Регистратор);
					
					СтрокаДокумента = ДокументыПоОперацииЗаПериод.Найти(ЗафиксированнаяРегламентнаяОперация.Регистратор);
					Если не СтрокаДокумента = Неопределено Тогда
						СтрокаДокумента.Использован = Истина;
						
						Если СтрокаДокумента.Проведен Тогда
							Кнопка.Картинка = ЭлементыФормы.КартинкаДокументПроведен.Картинка;
						ИначеЕсли СтрокаДокумента.ПометкаУдаления Тогда
							Кнопка.Картинка = ЭлементыФормы.КартинкаДокументУдален.Картинка;
						Иначе
							Кнопка.Картинка = ЭлементыФормы.КартинкаДокументНеПроведен.Картинка;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
		КонецЕсли;
		Для каждого СтрокаДокумента Из ДокументыПоОперацииЗаПериод Цикл
			Если СтрокаДокумента.Использован Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВставитьРазделительДляДокументов Тогда
				ВставитьРазделительДляДокументов = Ложь;
				КонтекстноеМеню.Добавить("РазделительСпискаДокументов", ТипКнопкиКоманднойПанели.Разделитель);
			КонецЕсли; 
			
			СчетчикДокументов = СчетчикДокументов + 1;
			Кнопка = КонтекстноеМеню.Добавить("ДокументОткрыть"+СчетчикДокументов, ТипКнопкиКоманднойПанели.Действие, Строка(СтрокаДокумента.Ссылка), новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
			Кнопка.Пояснение = ЗначениеВСтрокуВнутр(СтрокаДокумента.Ссылка);
			
			Если СтрокаДокумента.Проведен Тогда
				Кнопка.Картинка = ЭлементыФормы.КартинкаДокументПроведен.Картинка;
			ИначеЕсли СтрокаДокумента.ПометкаУдаления Тогда
				Кнопка.Картинка = ЭлементыФормы.КартинкаДокументУдален.Картинка;
			Иначе
				Кнопка.Картинка = ЭлементыФормы.КартинкаДокументНеПроведен.Картинка;
			КонецЕсли; 
		
		КонецЦикла; 
		
		КонтекстноеМеню.Добавить("РазделительАвтоКонтроля", ТипКнопкиКоманднойПанели.Разделитель);
		Если ?(ОтменаКонтроляВручную[ОперацияСсылка]= Неопределено, Ложь, ОтменаКонтроляВручную[ОперацияСсылка]) Тогда
			Кнопка = КонтекстноеМеню.Добавить("ВключитьАвтоматическийКонтроль", ТипКнопкиКоманднойПанели.Действие, "Включить автоматический контроль операции", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		Иначе
			Кнопка = КонтекстноеМеню.Добавить("ОтключитьАвтоматическийКонтроль", ТипКнопкиКоманднойПанели.Действие, "Отключить автоматический контроль операции", новый Действие("ВыполнитьКомандуКонтекстногоМеню"));
		КонецЕсли;
	
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьКомандуКонтекстногоМеню(Кнопка)
	
	ИмяТекущейОбласти = ЭлементыФормы.ПланВыполненияСхема.ТекущаяОбласть.Имя;

	Если Найти(Кнопка.Имя, "ДокументОткрыть") > 0 Тогда
		Попытка
			ДокументСсылка = ЗначениеИзСтрокиВнутр(Кнопка.Пояснение);
			ОбработкаВыбранногоДействия("ДокументОткрыть", ИмяТекущейОбласти, Неопределено, ДокументСсылка);
		Исключение
		    // Документ потерялся
		КонецПопытки;
	ИначеЕсли Кнопка.Имя = "ОткрытьОтчет" тогда
		ОбработкаВыбранногоДействия(Кнопка.Имя, ИмяТекущейОбласти, Неопределено);
	ИначеЕсли Кнопка.Имя = "СделатьАктуальной" тогда
		Попытка
			ОперацияСсылка = Перечисления.РегламентныеОперации[ИмяТекущейОбласти];
		Исключение
			Возврат;
		КонецПопытки;
		УстановитьПризнакАктуальностиОперации(ОперацияСсылка);
	ИначеЕсли Кнопка.Имя = "ОтключитьАвтоматическийКонтроль" или Кнопка.Имя = "ВключитьАвтоматическийКонтроль" тогда
		Попытка
			ОперацияСсылка = Перечисления.РегламентныеОперации[ИмяТекущейОбласти];
		Исключение
			Возврат;
		КонецПопытки;
		ОтключитьКонтрольВыполненияОперации(ОперацияСсылка, (Кнопка.Имя = "ОтключитьАвтоматическийКонтроль"));
	ИначеЕсли Кнопка.Имя = "ОткрытьСписокСчетовФактур" 
		Или Кнопка.Имя = "ОткрытьЖурналУчетаПолученныхСчетовФактур"
		Или Кнопка.Имя = "ОткрытьЖурналУчетаВыданныхСчетовФактур" Тогда
		ОбработкаВыбранногоДействия(Кнопка.Имя, ИмяТекущейОбласти, Неопределено);
	Иначе
		Попытка
			ОперацияСсылка = Перечисления.РегламентныеОперации[ИмяТекущейОбласти];
		Исключение
			Возврат;
		КонецПопытки;
		ОбработкаВыбранногоДействия(Кнопка.Имя, ИмяТекущейОбласти, ОперацияСсылка);
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьДокументыПоКодуОперации(ОперацияСсылка, ИмяТекущейОбласти)

		Если НЕ (ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
			ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
			ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы)
			Тогда
			
			// Проверим наличие непроведенных документов за период
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Документы.Ссылка,
			|	Документы.Проведен КАК Проведен,
			|	Документы.ПометкаУдаления КАК ПометкаУдаления,
			|	Документы.Представление
			|ИЗ
			|	Документ.ФормированиеЗаписейКнигиПокупок КАК Документы
			|ГДЕ
			|	Документы.Организация = &Организация
			|	И Документы.Дата >= &НачалоПериода
			|	И Документы.Дата <= &КонецПериода";
			
			
			Если ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0 Тогда
				Запрос.Текст = Запрос.Текст +" И Документы.ПредъявленНДСКВычету0";
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок Тогда
				Запрос.Текст = Запрос.Текст +" И НЕ Документы.ПредъявленНДСКВычету0";
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
				Запрос.Текст = Запрос.Текст +" И Документы.Реализация0";
			ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
				Запрос.Текст = Запрос.Текст +" И НЕ Документы.Реализация0";
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок",ИмяТекущейОбласти);
			КонецЕсли; 
			
			Запрос.Текст = Запрос.Текст + "
				|
				|УПОРЯДОЧИТЬ ПО
				|	Проведен УБЫВ,
				|	ПометкаУдаления,
				|	Документы.Дата";
				
			Запрос.УстановитьПараметр("Организация", Организация);
			Запрос.УстановитьПараметр("НачалоПериода",УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, ПериодРегистрации));
			Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(ПериодРегистрации));
			
			ДокументыПоОперацииЗаПериод = Запрос.Выполнить().Выгрузить();
			ДокументыПоОперацииЗаПериод.Колонки.Добавить("Использован", новый ОписаниеТипов("Булево"));
		Иначе
			ДокументыПоОперацииЗаПериод = новый ТаблицаЗначений();
			ДокументыПоОперацииЗаПериод.Колонки.Добавить("Ссылка");
		КонецЕсли;
	Возврат ДокументыПоОперацииЗаПериод;
КонецФункции // ПолучитьДокументыПоКодуОперации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ПланВыполненияСхема.Очистить();
	ЭлементыФормы.ПланВыполненияСхема.Вывести(ПолучитьМакет("Макет"));
	ЭлементыФормы.ПланВыполненияСхема.Защита = Истина;

	УниверсальныеМеханизмы.ЗаполнитьЗначенияДереваОпераций(мПолноеДерево, "НДС");
	мПолноеДерево.Колонки.Добавить("Контроль",Новый ОписаниеТипов("Булево"));
	мПолноеДерево.Колонки.Добавить("ОтменаКонтроляВручную",Новый ОписаниеТипов("Булево"));
	
	Организация = ?(ЗначениеЗаполнено(Организация), Организация, глЗначениеПеременной("ОсновнаяОрганизация"));
	ПериодРегистрации = ?(ЗначениеЗаполнено(ПериодРегистрации), ПериодРегистрации, НачалоМесяца(ТекущаяДата()-24*60*60*21));
	
	ПериодичностьПериодаРегистрации = УчетНДС.ПолучитьУПНДСНалоговыйПериод(Организация, ПериодРегистрации);

	ПредставлениеПериодаРегистрации = ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, ПериодичностьПериодаРегистрации);
	
	ОпределениеСпискаРекомендуемыхОпераций();
	
	ОбновитьСостояниеВыполненияОпераций();
	
	ЭлементыФормы.ПланВыполненияСхема.ТекущаяОбласть = ЭлементыФормы.ПланВыполненияСхема.Область(1,1);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ПредставлениеПериодаРегистрации;

	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленоСостояниеРегламентнойОперации" Тогда
		
		Если Параметр = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС Тогда
			// Переопределим список необходимых операций
			// Вероятно потребуется формирование записей книг по 0%
			ОбновитьСписокОпераций = Истина;
			//ОпределениеСпискаРекомендуемыхОпераций();
		КонецЕсли; 
		ОбновитьСостояниеОпераций = Истина;
		//ОбновитьСостояниеВыполненияОпераций();
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ОрганизацияПриИзменении(Элемент)
	
	ОпределениеСпискаРекомендуемыхОпераций();
	ОбновитьСостояниеВыполненияОпераций();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);
	
	ОпределениеСпискаРекомендуемыхОпераций();
	ОбновитьСостояниеВыполненияОпераций();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	ОпределениеСпискаРекомендуемыхОпераций();

	ОбновитьСостояниеВыполненияОпераций();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ДОКУМЕНТА

Процедура ПланВыполненияСхемаВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Элемент.Области.Найти(Область.Имя) = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ИмяТекущейОбласти = Область.Имя;
	
	Если ИмяТекущейОбласти = "КнигаПокупок" 
		Или ИмяТекущейОбласти = "КнигаПродаж" 
		Или ИмяТекущейОбласти = "Декларация" тогда
		ОбработкаВыбранногоДействия("ОткрытьОтчет", ИмяТекущейОбласти, Неопределено);
		Возврат;
    КонецЕсли;
	
	Попытка
		ОперацияСсылка = Перечисления.РегламентныеОперации[ИмяТекущейОбласти];
	Исключение
		Возврат;
	КонецПопытки;
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(Область.Расшифровка) Тогда
		ПараметрыОперации = мСостояниеОпераций[ОперацияСсылка];
		ОбработкаВыбранногоДействия(Область.Расшифровка, ИмяТекущейОбласти, ОперацияСсылка, ?(ПараметрыОперации = Неопределено,Неопределено,ПараметрыОперации.Строки[0].Регистратор), Истина);
		Возврат;
	КонецЕсли; 
	
	МенюРасшифровки = Новый СписокЗначений();
	ЕстьЗаписиОВыполнении = Ложь;
	
	Если ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс 
		Или ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
		или ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда
		ВвестиДокумент(Область.Имя, Ложь);
	Иначе
		
		ПараметрыОперации = мСостояниеОпераций[ОперацияСсылка];
		
		Если мПолноеДерево.НайтиСтроки(Новый Структура("Узел, Контроль", ОперацияСсылка, Истина)).Количество()>0 Тогда
			МенюРасшифровки.Добавить("ДокументВвести", "Ввести новый документ");
		КонецЕсли;
		
		МенюРасшифровки.Добавить("ОткрытьСписокДокументов", "Открыть список документов");
	
		ЭлементКВыбору = ВыбратьИзМеню(МенюРасшифровки,Элемент);
		
		Если не ЭлементКВыбору = Неопределено Тогда
			ОбработкаВыбранногоДействия(ЭлементКВыбору.Значение, ИмяТекущейОбласти, ОперацияСсылка, ?(ПараметрыОперации = Неопределено,Неопределено,ПараметрыОперации.Строки[0].Регистратор));
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПланВыполненияСхемаПриАктивизацииОбласти(Элемент)
	
	Если ЭлементыФормы.ПланВыполненияСхема.Области.Найти(ЭлементыФормы.ПланВыполненияСхема.ТекущаяОбласть.Имя) = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельКонтекстноеМеню.Кнопки.Очистить();
		Возврат;		
	Иначе
		ОбновитьКонтекстноеМенюТекущейЯчейки();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	Если ОбновитьСписокОпераций Тогда
		ОпределениеСпискаРекомендуемыхОпераций();
		ОбновитьСписокОпераций = Ложь;
	КонецЕсли; 
	
	Если ОбновитьСостояниеОпераций Тогда
		ОбновитьСостояниеВыполненияОпераций();
		ОбновитьСостояниеОпераций = Ложь;
	КонецЕсли; 
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Оповестить("РегОперация", , "НДС");

КонецПроцедуры

ОбновитьСписокОпераций = Ложь;
ОбновитьСостояниеОпераций = Ложь;
