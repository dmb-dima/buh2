////////////////////////////////////////////////////////////////////////////////
// ПРИКЛАДНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МАСТЕРА
////////////////////////////////////////////////////////////////////////////////

// Соответствие ошибок исключений и представлений этих ошибок в прикладном выражении.
// Для чтения этого поля предназначена функция ОшибкиИсключений()
Перем СоответствиеОшибок;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ

// Выполняет действия при создании нового обмена данными:
// - создает или обновляет узлы текущего плана обмена
// - загружает правила конвертации данными из макета текущего плана обмена (если НЕ РИБ)
// - загружает правила регистрации данными из макета текущего плана обмена
// - загружает настройки транспорта сообщений обмена
// - устанавливает значение константы префикса информационной базы (если не задано)
// - выполняет регистрацию всех данных на текущем узле плана обмена с учетом правил регистрации объектов
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
// 
Процедура ВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// создаем новый узел
		СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
		
		// загружаем правила конвертации
		Если Не ЭтоНастройкаРаспределеннойИнформационнойБазы
			И ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаОбмена") Тогда
			
			ОбменДаннымиСервер.ЗагрузитьПравилаДляОбменаДанными(Отказ, ИмяПланаОбмена, "ПравилаКонвертацииОбъектов", "ПравилаОбмена");
			
		КонецЕсли;
		
		// загружаем правила регистрации
		Если ОбменДаннымиПовтИсп.ЕстьМакетПланаОбмена(ИмяПланаОбмена, "ПравилаРегистрации") Тогда
			
			ОбменДаннымиСервер.ЗагрузитьПравилаДляОбменаДанными(Отказ, ИмяПланаОбмена, "ПравилаРегистрацииОбъектов", "ПравилаРегистрации");
			
		КонецЕсли;
		
		// загружаем настройки транспорта сообщений
		ОбновитьНастройкиТранспортаСообщенийОбмена();
		
		// обновляем значение константы префикса ИБ
		Если Не ПрефиксИнформационнойБазыИсточникаУстановлен Тогда
			
			ОбновитьЗначениеКонстантыПрефиксаИнформационнойБазы();
			
		КонецЕсли;
		
		Если ЭтоНастройкаРаспределеннойИнформационнойБазы
			И ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
			
			Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Установить(Истина);
			
		КонецЕсли;
		
	Исключение
		
		СообщитьИнформациюОбОшибке(ИнформацияОбОшибке(), Отказ);
		
	КонецПопытки;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		Возврат;
		
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Не ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		// обновляем повторно используемые значения МРО
		ОбменДаннымиСервер.ОбновитьПовторноИспользуемыеЗначенияМРОПриНеобходимости();
		
		// выполняем регистрацию изменений на узле плана обмена
		ЗарегистрироватьИзмененияДляОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

//

// Выполняет выгрузку параметров помощника во временное хранилище для продолжения настройки обмена во второй базе
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
//  АдресВременногоХранилища – Строка – при успешной выгрузке xml-файла с настройками
//                                      в эту переменную записывается адрес временного хранилища,
//                                      по которому будут доступны данные файла на сервере и на клиенте
// 
Процедура ВыполнитьВыгрузкуПараметровМастераВоВременноеХранилище(Отказ, АдресВременногоХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Попытка
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	Исключение
		ОбменДаннымиСервер.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Отказ);
		Возврат;
	КонецПопытки;
	
	СтрокаXML = ВыполнитьВыгрузкуПараметровМастера(Отказ);
	
	Если Не Отказ Тогда
		
		ЗаписьТекста.Записать(СтрокаXML);
		
	КонецЕсли;
	
	ЗаписьТекста.Закрыть();
	ЗаписьТекста = Неопределено;
	
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
КонецПроцедуры

// Выполняет выгрузку параметров помощника в константу для продолжения настройки обмена в подчиненном узле РИБ
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
// 
Процедура ВыполнитьВыгрузкуПараметровМастераВКонстанту(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаXML = ВыполнитьВыгрузкуПараметровМастера(Отказ);
	
	Если Не Отказ Тогда
		
		Константы.НастройкиПодчиненногоУзлаРИБ.Установить(СтрокаXML);
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Метаданные.Константы.НастройкиПодчиненногоУзлаРИБ);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет загрузку параметров помощника из временного хранилища для продолжения настройки обмена во второй базе
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
//  АдресВременногоХранилища – Строка – адрес временного хранилища с данными xml-файла для загрузки
//
Процедура ВыполнитьЗагрузкуПараметровМастераИзВременногоХранилища(Отказ, АдресВременногоХранилища) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	// получаем имя временного файла в локальной ФС на сервере
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	// получаем файл для считывания
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, КодировкаТекста.UTF8);
	
	СтрокаXML = ЧтениеТекста.Прочитать();
	
	// удаляем временный файл
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
	ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML);
	
КонецПроцедуры

// Выполняет загрузку параметров помощника из константы для продолжения настройки обмена во второй базе
//
// Параметры:
//  Отказ – Булево – флаг отказа; поднимается в случае возникновения ошибок при работе процедуры
//
Процедура ВыполнитьЗагрузкуПараметровМастераИзКонстанты(Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаXML = Константы.НастройкиПодчиненногоУзлаРИБ.Получить();
	
	ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СоздатьОбновитьУзлыПланаОбмена(НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле)
	
	МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
	
	// ПРЕДОПРЕДЕЛЕННЫЙ УЗЕЛ
	
	// получение ссылки на предопределенный узел плана обмена
	ЭтотУзел = МенеджерПланаОбмена.ЭтотУзел();
	
	Если ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
		
		Если ЭтотУзел.Код <> КодПредопределенногоУзла Тогда
			
			ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
			
			ЭтотУзелОбъект.Код          = КодПредопределенногоУзла;
			ЭтотУзелОбъект.Наименование = ?(ПустаяСтрока(ЭтотУзелОбъект.Наименование),"Эта информационная база", ЭтотУзелОбъект.Наименование);
			
			ЭтотУзелОбъект.Записать();
			
		КонецЕсли;
		
	Иначе
		
		// проверка заполнения обязательных полей предопределенного узла
		Если ПустаяСтрока(ЭтотУзел.Код) Тогда
			
			ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
			
			ЭтотУзелОбъект.Код          = "000";
			ЭтотУзелОбъект.Наименование = ?(ЭтоНастройкаРаспределеннойИнформационнойБазы, НСтр("ru = 'Обмен с главным узлом'"), НСтр("ru = 'Эта информационная база'"));
			ЭтотУзелОбъект.Записать();
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	// УЗЕЛ ДЛЯ ОБМЕНА
	
	Если ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
		
		Если ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
			
			НовыйУзел = МенеджерПланаОбмена.НайтиПоКоду(КодНовогоУзла).ПолучитьОбъект();
			
		Иначе
			
			Если Не МенеджерПланаОбмена.НайтиПоКоду(КодНовогоУзла).Пустая() Тогда
				
				ВызватьИсключение НСтр("ru = 'В этой информационной базе уже настроен обмен. Удалите предыдущую настройку обмена.'");
				
			КонецЕсли;
			
			НовыйУзел = МенеджерПланаОбмена.СоздатьУзел();
			НовыйУзел.Код = КодНовогоУзла;
			
		КонецЕсли;
		
	Иначе
		
		// создание нового узла плана обмена
		НовыйУзел = МенеджерПланаОбмена.СоздатьУзел();
		НовыйУзел.УстановитьНовыйКод();
		
	КонецЕсли;
	
	// установка значений отборов на новом узле
	УстановитьЗначенияОтборовНаУзле(НовыйУзел, НастройкаОтборовНаУзле);
	
	// установка значений по умолчанию на новом узле
	УстановитьЗначенияПоУмолчаниюНаУзле(НовыйУзел, ЗначенияПоУмолчаниюНаУзле);
	
	Если Не (ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными"
		   И ЭтоНастройкаРаспределеннойИнформационнойБазы) Тогда
		
		НовыйУзел.Наименование = НаименованиеНастройкиВыполненияОбмена;
		
	КонецЕсли;
	
	// сбрасываем счетчики сообщений
	НовыйУзел.НомерОтправленного = 0;
	НовыйУзел.НомерПринятого     = 0;
	
	НовыйУзел.Записать();
	
	УзелИнформационнойБазы = НовыйУзел.Ссылка;
	
КонецПроцедуры

Процедура ОбновитьНастройкиТранспортаСообщенийОбмена()
	
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("Узел",                                    УзелИнформационнойБазы);
	СтруктураЗаписи.Вставить("ВидТранспортаСообщенийОбменаПоУмолчанию", ВидТранспортаСообщенийОбмена);
	
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "EMAILМаксимальныйДопустимыйРазмерСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "EMAILСжиматьФайлИсходящегоСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "EMAILУчетнаяЗапись");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FILEКаталогОбменаИнформацией");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FILEСжиматьФайлИсходящегоСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСжиматьФайлИсходящегоСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеМаксимальныйДопустимыйРазмерСообщения");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПароль");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПассивноеСоединение");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПользователь");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПорт");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "FTPСоединениеПуть");
	ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, "ПарольАрхиваСообщенияОбмена");
	
	// добавляем запись в РС
	РегистрыСведений.НастройкиТранспортаОбмена.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруЗначениемРеквизита(СтруктураЗаписи, ИмяРеквизита)
	
	СтруктураЗаписи.Вставить(ИмяРеквизита, ЭтотОбъект[ИмяРеквизита]);
	
КонецПроцедуры

Процедура ОбновитьЗначениеКонстантыПрефиксаИнформационнойБазы()
	
	ЗначениеДоОбновления = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	
	Если ЗначениеДоОбновления <> ПрефиксИнформационнойБазыИсточника Тогда
		
		Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы.Установить(СокрЛП(ПрефиксИнформационнойБазыИсточника));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуУзлаПланаОбмена(Узел, СтруктураТабличнойЧасти, ИмяТаблицы)
	
	ТаблицаУзла = Узел[ИмяТаблицы];
	
	ТаблицаУзла.Очистить();
	
	Для Каждого Элемент ИЗ СтруктураТабличнойЧасти Цикл
		
		ОбменДаннымиСервер.УстановитьКоличествоСтрокТаблицы(ТаблицаУзла, Элемент.Значение.Количество());
		
		ТаблицаУзла.ЗагрузитьКолонку(Элемент.Значение, Элемент.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляОбмена()
	
	// получаем таблицу метаданных состава плана обмена
	МетаданныеДляРегистрации = Новый ТаблицаЗначений;
	МетаданныеДляРегистрации.Колонки.Добавить("ОбъектМетаданных");
	МетаданныеДляРегистрации.Колонки.Добавить("АвтоРегистрация", Новый ОписаниеТипов("АвтоРегистрацияИзменений"));
	
	Для Каждого ЭлементСостава ИЗ Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав Цикл
		
		СтрокаТаблицы = МетаданныеДляРегистрации.Добавить();
		
		СтрокаТаблицы.ОбъектМетаданных = ЭлементСостава.Метаданные;
		СтрокаТаблицы.АвтоРегистрация  = ЭлементСостава.АвтоРегистрация;
		
	КонецЦикла;
	
	// удаляем всю регистрацию изменений
	ПланыОбмена.УдалитьРегистрациюИзменений(УзелИнформационнойБазы);
	
	// выполняем регистрацию изменений для отобранных объектов метаданных
	Для Каждого СтрокаТаблицы ИЗ МетаданныеДляРегистрации Цикл
		
		// Регистрацию с учетом ПРО выполняем только для ссылочных типов для которых признак авторегистрации отключен
		// Для всех остальных типов (регистров) регистрацию выполняем без фильтра ПРО; объекты будут отфильтрованы при выгрузке
		Если Не АвтоРегистрацияРазрешена(СтрокаТаблицы)
			И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(СтрокаТаблицы.ОбъектМетаданных) Тогда
			
			// Регистрацию выполняем с учетом ПРО
			ЗарегистрироватьИзмененияПоПравиламРегистрации(СтрокаТаблицы.ОбъектМетаданных);
			
		Иначе
			
			// регистрацию выполняем для всех объектов ИБ одного типа
			ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, СтрокаТаблицы.ОбъектМетаданных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПоПравиламРегистрации(ОбъектМетаданных)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	" + ОбъектМетаданных.ПолноеИмя() + "
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектДанных = Выборка.Ссылка.ПолучитьОбъект();
		
		// определяем массив узлов для регистрации объекта
		МассивУзловДляРегистрацииОбъекта = ОбменДаннымиСобытия.ОпределитьПолучателейПриРегистрацииДанных(ОбъектДанных, ОбъектМетаданных, ИмяПланаОбмена);
		
		НомерВМассиве = МассивУзловДляРегистрацииОбъекта.Найти(УзелИнформационнойБазы);
		
		Если НомерВМассиве <> Неопределено Тогда
			
			// объект прошел фильтр ПРО; выполняем регистрацию на узле
			ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, ОбъектДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначенияОтборовНаУзле(УзелПланаОбмена, НастройкаОтборовНаУзле)
	
	Для Каждого НастройкаОтбора ИЗ НастройкаОтборовНаУзле Цикл
		
		Если ТипЗнч(НастройкаОтбора.Значение) = Тип("Структура") Тогда
			
			ЗаполнитьТаблицуУзлаПланаОбмена(УзелПланаОбмена, НастройкаОтбора.Значение, НастройкаОтбора.Ключ);
			
		Иначе // примитивные типы
			
			УзелПланаОбмена[НастройкаОтбора.Ключ] = НастройкаОтбора.Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗначенияПоУмолчаниюНаУзле(УзелПланаОбмена, ЗначенияПоУмолчаниюНаУзле)
	
	Для Каждого Настройка ИЗ ЗначенияПоУмолчаниюНаУзле Цикл
		
		УзелПланаОбмена[Настройка.Ключ] = Настройка.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВыполнитьВыгрузкуПараметровМастера(Отказ)
	
	Попытка
		
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку("UTF-8");
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ПараметрыНастройки");
		
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsd", "http://www.w3.org/2001/XMLSchema");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/data");
		
		// выгрузка параметров мастера
		ЗаписьXML.ЗаписатьНачалоЭлемента("ОсновныеПараметрыОбмена");
		ВыгрузитьПараметрыМастера(ЗаписьXML);
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ОсновныеПараметрыОбмена
		
		Если ИспользоватьПараметрыТранспортаEMAIL Тогда
			
			ЗаписьXML.ЗаписатьНачалоЭлемента("УчетнаяЗаписьЭлектроннойПочты");
			ЗаписатьXML(ЗаписьXML, ?(ЗначениеЗаполнено(EMAILУчетнаяЗапись), EMAILУчетнаяЗапись.ПолучитьОбъект(), Неопределено));
			ЗаписьXML.ЗаписатьКонецЭлемента(); // УчетнаяЗаписьЭлектроннойПочты
			
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьКонецЭлемента(); // ПараметрыНастройки
		
	Исключение
		ОбменДаннымиСервер.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), Отказ);
		Возврат "";
	КонецПопытки;
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

//

Процедура ПрочитатьПараметрыВСтруктуру(Отказ, СтрокаXML, СтруктураНастроек)
	
	Попытка
		ЧтениеXML = Новый ЧтениеXML;
		ЧтениеXML.УстановитьСтроку(СтрокаXML);
	Исключение
		Отказ = Истина;
		ЧтениеXML = Неопределено;
		Возврат;
	КонецПопытки;
	
	Попытка
		
		ЧтениеXML.Прочитать(); // ПараметрыНастройки
		ЧтениеXML.Прочитать(); // ОсновныеПараметрыОбмена
		
		// зачитываем узел ОсновныеПараметрыОбмена
		СтруктураНастроек = СчитатьДанныеВСтуктуру(ЧтениеXML);
		
		Если СтруктураНастроек.Свойство("ИспользоватьПараметрыТранспортаEMAIL", ИспользоватьПараметрыТранспортаEMAIL)
			И ИспользоватьПараметрыТранспортаEMAIL Тогда
			
			// зачитываем узел УчетнаяЗаписьЭлектроннойПочты
			ЧтениеXML.Прочитать(); // УчетнаяЗаписьЭлектроннойПочты {НачалоЭлемента}
			
			СтруктураНастроек.Вставить("УчетнаяЗаписьЭлектроннойПочты", ПрочитатьXML(ЧтениеXML));
			
			ЧтениеXML.Прочитать(); // УчетнаяЗаписьЭлектроннойПочты {КонецЭлемента}
			
		КонецЕсли;
		
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	ЧтениеXML.Закрыть();
	ЧтениеXML = Неопределено;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуПараметровМастера(Отказ, СтрокаXML)
	
	Перем СтруктураНастроек;
	
	ПрочитатьПараметрыВСтруктуру(Отказ, СтрокаXML, СтруктураНастроек);
	
	Если СтруктураНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// выполняем проверку зачитанных параметров из файла
	Если СтруктураНастроек.Свойство("ИмяПланаОбмена")
		И СтруктураНастроек.ИмяПланаОбмена <> ИмяПланаОбмена Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Файл содержит настройки обмена для другой информационной базы!'"), Отказ);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		// заполняем свойства обработки значениями из файла
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроек);
		
		УчетнаяЗаписьЭлектроннойПочты = Неопределено;
		
		Если СтруктураНастроек.Свойство("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗаписьЭлектроннойПочты)
			И УчетнаяЗаписьЭлектроннойПочты <> Неопределено Тогда
			
			УчетнаяЗаписьЭлектроннойПочты.Записать();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СчитатьДанныеВСтуктуру(ЧтениеXML)
	
	// возвращаемое значение функции
	Структура = Новый Структура;
	
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента Тогда
		
		ВызватьИсключение НСтр("ru = 'Ошибка чтения XML'");
		
	КонецЕсли;
	
	ЧтениеXML.Прочитать();
	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		
		ИмяУзла = ЧтениеXML.Имя;
		
		Структура.Вставить(ИмяУзла, ПрочитатьXML(ЧтениеXML));
		
	КонецЦикла;
	
	ЧтениеXML.Прочитать();
	
	Возврат Структура;
	
КонецФункции

Процедура ВыгрузитьПараметрыМастера(ЗаписьXML)
	
	ДобавитьЗаписьXML(ЗаписьXML, "ИмяПланаОбмена");
	ДобавитьЗаписьXML(ЗаписьXML, "НаименованиеНастройкиВыполненияОбмена");
	
	ЗаписатьXML(ЗаписьXML, ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().Код, "КодНовогоУзла",            НазначениеТипаXML.Явное);
	ЗаписатьXML(ЗаписьXML, УзелИнформационнойБазы.Код,                 "КодПредопределенногоУзла", НазначениеТипаXML.Явное);
	
	// настройки транспорта сообщений обмена
	ДобавитьЗаписьXML(ЗаписьXML, "ВидТранспортаСообщенийОбмена");
	ДобавитьЗаписьXML(ЗаписьXML, "ПарольАрхиваСообщенияОбмена");
	
	Если ИспользоватьПараметрыТранспортаEMAIL Тогда
		
		ДобавитьЗаписьXML(ЗаписьXML, "EMAILМаксимальныйДопустимыйРазмерСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "EMAILСжиматьФайлИсходящегоСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "EMAILУчетнаяЗапись");
		
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаFILE Тогда
		
		ДобавитьЗаписьXML(ЗаписьXML, "FILEКаталогОбменаИнформацией");
		ДобавитьЗаписьXML(ЗаписьXML, "FILEСжиматьФайлИсходящегоСообщения");
		
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаFTP Тогда
		
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСжиматьФайлИсходящегоСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеМаксимальныйДопустимыйРазмерСообщения");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПароль");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПассивноеСоединение");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПользователь");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПорт");
		ДобавитьЗаписьXML(ЗаписьXML, "FTPСоединениеПуть");
		
	КонецЕсли;
	
	ДобавитьЗаписьXML(ЗаписьXML, "ИспользоватьПараметрыТранспортаEMAIL");
	ДобавитьЗаписьXML(ЗаписьXML, "ИспользоватьПараметрыТранспортаFILE");
	ДобавитьЗаписьXML(ЗаписьXML, "ИспользоватьПараметрыТранспортаFTP");
	
КонецПроцедуры

Процедура ДобавитьЗаписьXML(ЗаписьXML, ИмяРеквизита)
	
	ЗаписатьXML(ЗаписьXML, ЭтотОбъект[ИмяРеквизита], ИмяРеквизита, НазначениеТипаXML.Явное);
	
КонецПроцедуры

Процедура УдалитьВременныйФайл(ИмяВременногоФайла)
	
	Попытка
		
		Если Не ПустаяСтрока(ИмяВременногоФайла) Тогда
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Функция АвтоРегистрацияРазрешена(Элемент)
	
	Возврат Элемент.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить;
	
КонецФункции

//

Процедура СообщитьИнформациюОбОшибке(ИнформацияОбОшибке, Отказ)
	
	ПолучитьПервуюИнформациюОбОшибке(ИнформацияОбОшибке);
	
	ОписаниеОшибки = ОшибкиИсключений().Получить(ИнформацияОбОшибке.Описание);
	
	Если ОписаниеОшибки = Неопределено Тогда
		
		ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		
	КонецЕсли;
	
	ОбменДаннымиСервер.СообщитьОбОшибке(ОписаниеОшибки, Отказ);
	
КонецПроцедуры

Процедура ПолучитьПервуюИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
		
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
		
		ПолучитьПервуюИнформациюОбОшибке(ИнформацияОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОшибкиИсключений()
	
	Если СоответствиеОшибок = Неопределено Тогда
		
		ИнициализацияОшибокИсключений();
		
	КонецЕсли;
	
	Возврат СоответствиеОшибок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ИНИЦИАЛИЗАЦИИ

Процедура ИнициализацияОшибокИсключений()
	
	СоответствиеОшибок = Новый Соответствие;
	СоответствиеОшибок.Вставить("Значение поля ""Код"" не уникально", НСтр("ru = 'В этой информационной базе уже настроен обмен. Удалите предыдущую настройку обмена.'"));
	
КонецПроцедуры

