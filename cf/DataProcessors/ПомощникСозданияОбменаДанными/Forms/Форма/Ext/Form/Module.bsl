////////////////////////////////////////////////////////////////////////////////
// МОДАЛЬНЫЕ ПЕРЕМЕННЫЕ МАСТЕРА (Клиент)

&НаКлиенте
Перем мТекущийНомерСтраницы;

&НаКлиенте
Перем мСтраницыМастера;

&НаКлиенте
Перем мКнопкиМастера;

&НаКлиенте
Перем мНомераСтраницИВариантыМастера;

&НаКлиенте
Перем мЗакрытьФормуБезусловно;

&НаКлиенте
Перем мПредставленияНастроекТранспорта;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбменДаннымиСервер.РольДоступнаДобавлениеИзменениеОбменовДанными() Тогда
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Недостаточно прав доступа!'"), Отказ);
		Возврат;
	КонецЕсли;
	
	// параметризация мастера по имени плана обмена (обязательно)
	Если Не Параметры.Свойство("ИмяПланаОбмена", Объект.ИмяПланаОбмена) Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Работа помощника поддерживается только при вызове из командного интерфейса! Работа помощника завершена.'"), Отказ);
		
	ИначеЕсли ПустаяСтрока(Объект.ИмяПланаОбмена) Тогда
		
		ОбменДаннымиСервер.СообщитьОбОшибке(НСтр("ru = 'Не задано имя плана обмена! Работа помощника завершена.'"), Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// установка значений по умолчанию - общих
	РасположениеИнформационнойБазы          = "ПодключениеНеДоступно";
	ТипИнформационнойБазы                   = "Серверный";
	ВыполнитьОбменДаннымиСейчас             = Истина;
	ВыполнитьСозданиеНачальногоОбразаСейчас = Истина;
	
	Объект.EMAILСжиматьФайлИсходящегоСообщения = Истина;
	Объект.FTPСжиматьФайлИсходящегоСообщения   = Истина;
	Объект.FTPСоединениеПорт = 21;
	
	// значение по умолчанию для вида транспорта сообщений обмена
	Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	
	// выполняем проверку наличия для плана обмена формы создания начального образа
	ФормаСозданияНачальногоОбразаСуществует = (Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена].Формы.Найти("ФормаСозданияНачальногоОбраза") <> Неопределено);
	
	// получаем значения по умолчанию для плана обмена
	ПолучитьЗначенияПоУмолчаниюПланаОбмена();
	
	Объект.ПрефиксИнформационнойБазыИсточника           = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Объект.ПрефиксИнформационнойБазыИсточникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыИсточника);
	
	Если Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен Тогда
		Объект.ПрефиксИнформационнойБазыИсточника = ОбменДаннымиПереопределяемый.ПрефиксИнформационнойБазыПоУмолчанию();
	КонецЕсли;
	
	ВариантРаботыМастера = "НастроитьНовыйОбменДанными";
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена];
	
	Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы = МетаданныеПланаОбмена.РаспределеннаяИнформационнаяБаза;
	
	УстановитьВидимостьНаСервере();
	
	//
	Объект.ИспользоватьПараметрыТранспортаFILE  = Истина;
	Объект.ИспользоватьПараметрыТранспортаFTP   = Ложь;
	Объект.ИспользоватьПараметрыТранспортаEMAIL = Ложь;
	
	Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
	Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
	// назначаем значения поясняющим надписям внизу страницы для перехода по кнопке "Далее"
	
	// поясняющая надпись на первой странице мастера
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		
		Элементы.НадписьДалееВариантРаботыМастера.Заголовок = НадписьДалееFILE();
		
	ИначеЕсли ИспользоватьТранспортСообщенийОбменаFTP Тогда
		
		Элементы.НадписьДалееВариантРаботыМастера.Заголовок = НадписьДалееFTP();
		
	ИначеЕсли ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		
		Элементы.НадписьДалееВариантРаботыМастера.Заголовок = НадписьДалееEMAIL();
		
	Иначе
		
		Элементы.НадписьДалееВариантРаботыМастера.Заголовок = НадписьДалееНастройки();
		
	КонецЕсли;
	
	// поясняющая надпись на странице мастера настроек FILE
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		
		Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееFTP();
			
		ИначеЕсли ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееEMAIL();
			
		Иначе
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// поясняющая надпись на странице мастера настроек FTP
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		
		Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
			
			Элементы.НадписьДалееFTP.Заголовок = НадписьДалееEMAIL();
			
		Иначе
			
			Элементы.НадписьДалееFTP.Заголовок = НадписьДалееНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// поясняющая надпись на странице мастера настроек EMAIL
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		
		Элементы.НадписьДалееEMAIL.Заголовок = НадписьДалееНастройки();
		
	КонецЕсли;
	
	ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ = Параметры.Свойство("ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ");
	
	Если Не ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		
		ЭтоПодчиненныйУзелРИБ = ПланыОбмена.ГлавныйУзел() <> Неопределено;
		
		Если ЭтоПодчиненныйУзелРИБ Тогда
			
			ИмяПланаОбменаРИБ = ПланыОбмена.ГлавныйУзел().Метаданные().Имя;
			
			Если Объект.ИмяПланаОбмена = ИмяПланаОбменаРИБ
				И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда
				
				ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		
		ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными";
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		ОбработкаОбъект.ВыполнитьЗагрузкуПараметровМастераИзКонстанты(Ложь);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
		Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
		Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// проверка для работы мастера в Веб-клиенте
	Если Не ПодключитьРасширениеРаботыСФайлами() Тогда
		
		НСтрока = НСтр("ru = 'Для работы помощника необходимо установить расширение работы с файлами!'");
		
		Предупреждение(НСтрока);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	мТекущийНомерСтраницы = 0;
	
	ИнициализацияМастераНаКлиенте();
	
	УстановитьВидимостьНаКлиенте();
	
	мЗакрытьФормуБезусловно = Ложь;
	
	ВариантРаботыМастераПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если мЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Отменить настройку обмена и выйти из помощника?'");
	
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗакрытаФормаПомощникаСозданияОбменаДанными");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ МАСТЕРА

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьНомерСтраницы(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьНомерСтраницы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Отказ = Ложь;
	
	ВыполнитьПроверкиПриНажатииГотово(Отказ);
	
	Если Не Отказ Тогда
		
		ВыполнитьДействияПриНажатииГотово(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыМастераПриИзменении(Элемент)
	
	ОтображениеЭлементовКомпозицииКартинокПервойСтраницыМастера();
	
	мТекущийНомерСтраницы = мНомераСтраницИВариантыМастера[ВариантРаботыМастера];
	
	Элементы.СтраницыВыбораФайлаСНастройкамиОбмена.ТекущаяСтраница = ?(ВариантРаботыМастера = врмПродолжитьНастройкуОбменаДанными(),
																		Элементы.СтраницаВыбораФайлаСНастройкамиОбмена,
																		Элементы.СтраницаВыбораФайлаСНастройкамиОбменаПустая);
	//
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МАСТЕРА

&НаКлиенте
Процедура УстановитьВидимостьНаКлиенте()
	
	// устанавливаем текущую страницу мастера
	Элементы.СтраницыМастера.ТекущаяСтраница = мСтраницыМастера[мТекущийНомерСтраницы];
	
	// устанавливаем текущую страницу кнопок мастера
	Элементы.КнопкиМастера.ТекущаяСтраница = мКнопкиМастера[мТекущийНомерСтраницы];
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНомерСтраницы(Итератор)
	
	Отказ = Ложь;
	
	// изменяем номер текущей страницы
	Инкремент(мТекущийНомерСтраницы, Итератор);
	
	// обработчики событий при смене страницы мастера
	ВыполнитьОбработчикиСобытийМастераПриСменеСтраницы(Отказ, Итератор > 0);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// отображаем новую страницу мастера
	УстановитьВидимостьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийМастераПриСменеСтраницы(Отказ, ЭтоУвеличениеНомераСтраницы)
	
	ПриИзмененииНомераСтраницы(Отказ);
	
	Если ЭтоУвеличениеНомераСтраницы Тогда
		
		ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ);
		
		Если Не Отказ Тогда
			
			ВыполнитьДействияПриПереходеНаСледующуюСтраницу(Отказ);
			
		КонецЕсли;
		
	Иначе
		
		ВыполнитьПроверкиПриПереходеНаПредыдущуюСтраницу(Отказ);
		
		Если Не Отказ Тогда
			
			ВыполнитьДействияПриПереходеНаПредыдущуюСтраницу(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		Инкремент(мТекущийНомерСтраницы, ?(ЭтоУвеличениеНомераСтраницы, -1, +1));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияМастераНаКлиенте()
	
	// инициализация коллекций значений для формирования описания настроек транспорта сообщений обмена
	ПредставлениеНастроекТранспортаFILE = Новый Структура;
	ПредставлениеНастроекТранспортаFILE.Вставить("FILEКаталогОбменаИнформацией",       НСтр("ru = 'Каталог обмена информацией'"));
	ПредставлениеНастроекТранспортаFILE.Вставить("FILEСжиматьФайлИсходящегоСообщения", НСтр("ru = 'Выполнять сжатие файла сообщения обмена'"));
	
	ПредставлениеНастроекТранспортаFTP = Новый Структура;
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСоединениеПуть",                 НСтр("ru = 'Путь к каталогу'"));
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСоединениеПорт",                 НСтр("ru = 'Порт'"));
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСоединениеПользователь",         НСтр("ru = 'Пользователь (логин)'"));
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСоединениеПароль",               НСтр("ru = 'Пароль'"));
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСоединениеМаксимальныйДопустимыйРазмерСообщения", НСтр("ru = 'Допустимый размер сообщения обмена (0 – нет ограничений), КБт'"));
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСоединениеПассивноеСоединение",  НСтр("ru = 'Пассивное соединение'"));
	ПредставлениеНастроекТранспортаFTP.Вставить("FTPСжиматьФайлИсходящегоСообщения", НСтр("ru = 'Выполнять сжатие файла сообщения обмена'"));
	
	ПредставлениеНастроекТранспортаEMAIL = Новый Структура;
	ПредставлениеНастроекТранспортаEMAIL.Вставить("EMAILУчетнаяЗапись",                         НСтр("ru = 'Учетная запись электронной почты'"));
	ПредставлениеНастроекТранспортаEMAIL.Вставить("EMAILМаксимальныйДопустимыйРазмерСообщения", НСтр("ru = 'Допустимый размер сообщения обмена (0 – нет ограничений), КБт'"));
	ПредставлениеНастроекТранспортаEMAIL.Вставить("EMAILСжиматьФайлИсходящегоСообщения",        НСтр("ru = 'Выполнять сжатие файла сообщения обмена'"));
	
	мПредставленияНастроекТранспорта = Новый Соответствие;
	мПредставленияНастроекТранспорта.Вставить("Обмен через локальный или сетевой каталог", ПредставлениеНастроекТранспортаFILE);
	мПредставленияНастроекТранспорта.Вставить("Обмен через FTP-ресурс",                    ПредставлениеНастроекТранспортаFTP);
	мПредставленияНастроекТранспорта.Вставить("Обмен по почте",                            ПредставлениеНастроекТранспортаEMAIL);
	
	// инициализация переключения страниц мастера
	мНомераСтраницИВариантыМастера = Новый Соответствие;
	мНомераСтраницИВариантыМастера.Вставить("НастроитьНовыйОбменДанными",       смНачало_1());
	мНомераСтраницИВариантыМастера.Вставить("ПродолжитьНастройкуОбменаДанными", смНачало_2());
	
	Если мТекущийНомерСтраницы = 0 Тогда
		мТекущийНомерСтраницы = мНомераСтраницИВариантыМастера[ВариантРаботыМастера];
	КонецЕсли;
	
	мСтраницыМастера  = Новый Соответствие;
	мКнопкиМастера    = Новый Соответствие;
	
	// СТРАНИЦЫ МАСТЕРА
	
	// НастроитьНовыйОбменДанными
	мСтраницыМастера.Вставить(смНачало_1(),                            Элементы.СтраницаМастераНачало);
	мСтраницыМастера.Вставить(смЗаданиеПараметровТранспорта_1_FILE(),  Элементы.СтраницаМастераЗаданиеПараметровТранспортаFILE);
	мСтраницыМастера.Вставить(смЗаданиеПараметровТранспорта_1_FTP(),   Элементы.СтраницаМастераЗаданиеПараметровТранспортаFTP);
	мСтраницыМастера.Вставить(смЗаданиеПараметровТранспорта_1_EMAIL(), Элементы.СтраницаМастераЗаданиеПараметровТранспортаEMAIL);
	мСтраницыМастера.Вставить(смНастройкаПараметров_1(),               Элементы.СтраницаМастераНастройкаПараметров);
	мСтраницыМастера.Вставить(смИтогНастройкиОбмена_1(),               Элементы.СтраницаМастераИтогНастройкиОбмена);
	мСтраницыМастера.Вставить(смОкончаниеСВыгрузкойНастройки_1(),      Элементы.СтраницаМастераОкончаниеСВыгрузкойНастройки);
	
	// ПродолжитьНастройкуОбменаДанными
	мСтраницыМастера.Вставить(смНачало_2(),                            Элементы.СтраницаМастераНачало);
	мСтраницыМастера.Вставить(смЗаданиеПараметровТранспорта_2_FILE(),  Элементы.СтраницаМастераЗаданиеПараметровТранспортаFILE);
	мСтраницыМастера.Вставить(смЗаданиеПараметровТранспорта_2_FTP(),   Элементы.СтраницаМастераЗаданиеПараметровТранспортаFTP);
	мСтраницыМастера.Вставить(смЗаданиеПараметровТранспорта_2_EMAIL(), Элементы.СтраницаМастераЗаданиеПараметровТранспортаEMAIL);
	мСтраницыМастера.Вставить(смНастройкаПараметров_2(),               Элементы.СтраницаМастераНастройкаПараметров);
	мСтраницыМастера.Вставить(смИтогНастройкиОбмена_2(),               Элементы.СтраницаМастераИтогНастройкиОбмена);
	
	// КНОПКИ МАСТЕРА
	
	// НастроитьНовыйОбменДанными
	мКнопкиМастера.Вставить(смНачало_1(),                            Элементы.КнопкиНачала);
	мКнопкиМастера.Вставить(смЗаданиеПараметровТранспорта_1_FILE(),  Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смЗаданиеПараметровТранспорта_1_FTP(),   Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смЗаданиеПараметровТранспорта_1_EMAIL(), Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смНастройкаПараметров_1(),               Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смИтогНастройкиОбмена_1(),               Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смОкончаниеСВыгрузкойНастройки_1(),      Элементы.КнопкиОкончания);
	
	// ПродолжитьНастройкуОбменаДанными
	мКнопкиМастера.Вставить(смНачало_2(),                            Элементы.КнопкиНачала);
	мКнопкиМастера.Вставить(смЗаданиеПараметровТранспорта_2_FILE(),  Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смЗаданиеПараметровТранспорта_2_FTP(),   Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смЗаданиеПараметровТранспорта_2_EMAIL(), Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смНастройкаПараметров_2(),               Элементы.КнопкиПродолжения);
	мКнопкиМастера.Вставить(смИтогНастройкиОбмена_2(),               Элементы.КнопкиОкончанияВоВторойБазе);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРИКЛАДНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ МАСТЕРА
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРИКЛАДНЫЕ ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанных(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.ФормаНастройкиУзла";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, НастройкаОтборовНаУзле, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора ИЗ НастройкаОтборовНаУзле Цикл
			
			НастройкаОтборовНаУзле[НастройкаОтбора.Ключ] = РезультатОткрытия[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеОграниченийПередачиДанных();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчанию(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.ФормаНастройкиЗначенийПоУмолчанию";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ЗначенияПоУмолчаниюНаУзле, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого Настройка ИЗ ЗначенияПоУмолчаниюНаУзле Цикл
			
			ЗначенияПоУмолчаниюНаУзле[Настройка.Ключ] = РезультатОткрытия[Настройка.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеЗначенийПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНастроекОбменаДанными(Команда)
	
	Перем АдресВременногоХранилища;
	
	Отказ = Ложь;
	
	// вызов сервера
	ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При сохранении файла настроек обмена данными возникли ошибки!'"));
		
	Иначе
		
		#Если ВебКлиент Тогда
			
			ПолучитьФайл(АдресВременногоХранилища, ИмяФайлаНастроекДляПриемника, Истина);
			
			Объект.ИмяФайлаНастроекОбменаДанными = ИмяФайлаНастроекДляПриемника;
			
		#Иначе
			
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			Диалог.Заголовок      = НСтр("ru = 'Укажите имя файла настроек обмена данными'");
			Диалог.Расширение     = "xml";
			Диалог.Фильтр         = "Файл настроек обмена данными(*.xml)|*.xml";
			Диалог.ПолноеИмяФайла = ИмяФайлаНастроекДляПриемника;
			
			Если Диалог.Выбрать() Тогда
				
				Объект.ИмяФайлаНастроекОбменаДанными = Диалог.ПолноеИмяФайла;
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
				
				УдалитьИзВременногоХранилища(АдресВременногоХранилища);
				
				// получаем файл
				ДвоичныеДанные.Записать(Объект.ИмяФайлаНастроекОбменаДанными);
				
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFILE(Команда)
	
	ПроверитьПодключение("FILE");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFTP(Команда)
	
	ПроверитьПодключение("FTP");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеEMAIL(Команда)
	
	ПроверитьПодключение("EMAIL");
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаFILEПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаFILE.Доступность = Объект.ИспользоватьПараметрыТранспортаFILE;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаFTPПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаFTP.Доступность = Объект.ИспользоватьПараметрыТранспортаFTP;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаEMAILПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаПервойИнформационнойБазы1Нажатие(Элемент)
	
	ВариантРаботыМастера = врмНастроитьНовыйОбменДанными();
	
	ВариантРаботыМастераПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаВторойИнформационнойБазы1Нажатие(Элемент)
	
	ВариантРаботыМастера = врмПродолжитьНастройкуОбменаДанными();
	
	ВариантРаботыМастераПриИзменении(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекОбменаДаннымиДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлНастроекОбмена(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекОбменаДаннымиДляЗагрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки);
	
	Если    Не Файл.Существует()
		ИЛИ Не Файл.ЭтоФайл() Тогда
		
		Предупреждение(НСтр("ru = 'Имя файла указано неправильно!'"));
		Возврат;
	КонецЕсли;
	
	ВыбратьФайлНастроекОбмена(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлНастроекОбмена(Интерактивно)
	
	Перем ВыбранноеИмяФайла;
	Перем АдресВременногоХранилища;
	
	ИмяФайлаПоУмолчанию = ?(ПустаяСтрока(Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки), ИмяФайлаНастроекДляПриемника, Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки);
	
	Если ПоместитьФайл(АдресВременногоХранилища, ИмяФайлаПоУмолчанию, ВыбранноеИмяФайла, Интерактивно, УникальныйИдентификатор) Тогда
		
		Отказ = Ложь;
		
		// вызов сервера
		ЗагрузитьПараметрыМастера(Отказ, АдресВременногоХранилища);
		
		Если Отказ Тогда
			Предупреждение(НСтр("ru = 'Указан неправильный файл настроек обмена данными!'"));
			Возврат;
		КонецЕсли;
			
		Если Интерактивно Тогда
			
			Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки = ВыбранноеИмяФайла;
			
		Иначе
			
			Предупреждение(НСтр("ru = 'Настройки обмена успешно загружены.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////
// ПРИКЛАДНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ВыполнитьПроверкиПриНажатииГотово(Отказ)
	
	ОчиститьСообщения();
	
	Если ЭтоСтраницаМастера(Элементы.СтраницаМастераОкончаниеСВыгрузкойНастройки)
		И Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Если ПустаяСтрока(Объект.ИмяФайлаНастроекОбменаДанными) Тогда
			
			НСтрока = НСтр("ru = 'Сохраните файл с настройками для информационной базы-приемника'");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИмяФайлаНастроекОбменаДанными",, Отказ);
			
		КонецЕсли;
		
	ИначеЕсли мТекущийНомерСтраницы = смИтогНастройкиОбмена_2() Тогда // Создание новой настройки обмена данными
		
		НастроитьНовыйОбменДаннымиНаКлиенте(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриНажатииГотово(Отказ)
	
	Если ЭтоСтраницаМастера(Элементы.СтраницаМастераОкончаниеСВыгрузкойНастройки) Тогда
		
		ЗакрытьФормуВыполнитьОбменНаКлиенте(Отказ);
		
	ИначеЕсли мТекущийНомерСтраницы = смИтогНастройкиОбмена_2() Тогда
		
		// закрываем форму; открываем помщник сопоставления с заданной настройкой обмена
		мЗакрытьФормуБезусловно = Истина;
		
		Закрыть();
		
		ОткрытьПомощникСопоставления = Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы;
		
		Если ОткрытьПомощникСопоставления Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("УзелИнформационнойБазы",         Объект.УзелИнформационнойБазы);
			ПараметрыФормы.Вставить("ВидТранспортаСообщенийОбмена",   Объект.ВидТранспортаСообщенийОбмена);
			ПараметрыФормы.Вставить("ВыполнитьСопоставлениеПриОткрытии", Ложь);
			
			ОткрытьФорму("Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ===== {ОБРАБОТЧИКИ СОБЫТИЙ СМЕНЫ СТРАНИЦЫ МАСТЕРА} Начало

&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаСледующуюСтраницу(Отказ)
	
	ОчиститьСообщения();
	
	Если    ПредыдущийНомерСтраницы() = смНастройкаПараметров_1()
		ИЛИ ПредыдущийНомерСтраницы() = смНастройкаПараметров_2() Тогда // Наименование настройки обмена данными
		
		ПроверитьНаименованиеНастройкиВыполненияОбмена(Отказ);
		
	ИначеЕсли ( ПредыдущийНомерСтраницы() = смЗаданиеПараметровТранспорта_1_FILE()
			ИЛИ ПредыдущийНомерСтраницы() = смЗаданиеПараметровТранспорта_2_FILE())
		И Объект.ИспользоватьПараметрыТранспортаFILE Тогда // Проверка подключения обработки транспорта FILE
		
		ПроверитьПодключениеНаКлиенте(Отказ, "FILE");
		
	ИначеЕсли ( ПредыдущийНомерСтраницы() = смЗаданиеПараметровТранспорта_1_FTP()
			ИЛИ ПредыдущийНомерСтраницы() = смЗаданиеПараметровТранспорта_2_FTP())
		И Объект.ИспользоватьПараметрыТранспортаFTP Тогда // Проверка подключения обработки транспорта FTP
		
		ПроверитьПодключениеНаКлиенте(Отказ, "FTP");
		
	ИначеЕсли ( ПредыдущийНомерСтраницы() = смЗаданиеПараметровТранспорта_1_EMAIL()
			ИЛИ ПредыдущийНомерСтраницы() = смЗаданиеПараметровТранспорта_2_EMAIL())
		И Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда // Проверка подключения обработки транспорта EMAIL
		
		ПроверитьПодключениеНаКлиенте(Отказ, "EMAIL");
		
	ИначеЕсли ПредыдущийНомерСтраницы() = смНачало_2() Тогда // Проверка выполнения загрузки параметров настройки из источника
		
		Если Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
			
			ПроверитьИмяФайлаНастроекОбменаДаннымиДляЗагрузки(Отказ);
			
			// вызов сервера
			ПроверитьВозможностьСозданияНастройкиОбмена(Отказ, Объект.ИмяПланаОбмена, Объект.КодНовогоУзла);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если  (мТекущийНомерСтраницы = смНастройкаПараметров_1()
			ИЛИ мТекущийНомерСтраницы = смНастройкаПараметров_2())
			И НЕ   (Объект.ИспользоватьПараметрыТранспортаEMAIL
				ИЛИ Объект.ИспользоватьПараметрыТранспортаFILE
				ИЛИ Объект.ИспользоватьПараметрыТранспортаFTP) Тогда
		// если перешли на страницу доп. параметров, и не выбран ни одни вид транспорта
		// то это предупреждаем об ошибке
		
		Отказ = Истина;
		
		Предупреждение(НСтр("ru = 'Не указаны настройки ни для одного вида обмена данными!
						|Следует использовать хотя бы один вид обмена данными.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриПереходеНаСледующуюСтраницу(Отказ)
	
	Если ЭтоСтраницаМастера(Элементы.СтраницаМастераИтогНастройкиОбмена) Тогда // Представление результата настройки обмена
		
		ПолучитьПредставлениеРезультатаНастройкиОбмена();
		
		Элементы.СтраницыНадписиИнформацииОбОткрытииПомощникаСопоставления.ТекущаяСтраница = ?(
				(ВариантРаботыМастера = врмПродолжитьНастройкуОбменаДанными()
				И Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы),
												Элементы.СтраницаНадписиИнформацииОбОткрытииПомощникаСопоставления,
												Элементы.СтраницаНадписиИнформацииОбОткрытииПомощникаСопоставленияПустая);
		//
	ИначеЕсли ЭтоСтраницаМастера(Элементы.СтраницаМастераОкончаниеСВыгрузкойНастройки) Тогда // Создание новой настройки обмена данными
		
		Состояние(НСтр("ru = 'Выполняется создание настройки обмена данными'"));
		
		// создаем настройку обмена; выгружаем файл с настройками для второй ИБ
		ВыполнитьДействияПриПереходеНаЗавершающуюСтраницуПервогоШагаНастройки(Отказ);
		
		Если Отказ Тогда
			
			Предупреждение(НСтр("ru = 'При создании настройки обмена данными возникли ошибки!'"));
			
		КонецЕсли;
		
	ИначеЕсли ЭтоСтраницаМастера(Элементы.СтраницаМастераНастройкаПараметров) Тогда
		
		СписокЗначений = ДоступныеВариантыРаботыМастера(
							Объект.ИспользоватьПараметрыТранспортаEMAIL,
							Объект.ИспользоватьПараметрыТранспортаFILE,
							Объект.ИспользоватьПараметрыТранспортаFTP);
		//
		
		СписокВыбора = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора;
		СписокВыбора.Очистить();
		
		Для каждого Элемент Из СписокЗначений Цикл
			
			ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), Элемент);
			
		КонецЦикла;
		
		Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
			
			Объект.ВидТранспортаСообщенийОбмена = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.FILE")
			
		ИначеЕсли Объект.ИспользоватьПараметрыТранспортаFTP Тогда
			
			Объект.ВидТранспортаСообщенийОбмена = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.FTP")
			
		ИначеЕсли Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
			
			Объект.ВидТранспортаСообщенийОбмена = ПредопределенноеЗначение("Перечисление.ВидыТранспортаСообщенийОбмена.EMAIL")
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкиПриПереходеНаПредыдущуюСтраницу(Отказ)
	
	ОчиститьСообщения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПриПереходеНаПредыдущуюСтраницу(Отказ)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииНомераСтраницы(Отказ)
	
КонецПроцедуры

// ===== {ОБРАБОТЧИКИ СОБЫТИЙ СМЕНЫ СТРАНИЦЫ МАСТЕРА} Окончание

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервере(Отказ)
	
	ОпределитьТипАвтоматическогоОбменаДанными();
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПриПереходеНаЗавершающуюСтраницуПервогоШагаНастройки(Отказ)
	
	НастроитьНовыйОбменДаннымиНаСервере(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		ОбработкаОбъект.ВыполнитьВыгрузкуПараметровМастераВКонстанту(Отказ);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	ИначеЕсли Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		АдресВременногоХранилища = "";
		
		ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища);
		
		Если Не Отказ Тогда
			
			Объект.ИмяФайлаНастроекОбменаДанными = ОбщегоНазначенияКлиентСервер.ПолучитьИмяФайла(Объект.FILEКаталогОбменаИнформацией, ИмяФайлаНастроекДляПриемника);
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
			
			УдалитьИзВременногоХранилища(АдресВременногоХранилища);
			
			// получаем файл
			ДвоичныеДанные.Записать(Объект.ИмяФайлаНастроекОбменаДанными);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТипАвтоматическогоОбменаДанными()
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Элементы.ПояснениеВыбораКаталогаОбменаИнформациейНаСервере.Видимость = Не ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Элементы.ГиперссылкаМетодикаВыбораИнформационнойБазы.Видимость = Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы;
	
	Элементы.РамкаГруппыПрефиксаИнформационнойБазы.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	
	Элементы.РамкаГруппыЗначенийПоУмолчанию.Видимость = Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы;
	
	Элементы.СтраницыОтображенияФинальногоДействия.ТекущаяСтраница = ?(Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы,
					Элементы.СтраницаВыполнитьСозданиеНачальногоОбразаПодчиненногоУзла,
					Элементы.СтраницаВыполнитьВыгрузкуДанныхДляСопоставления);
	//
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Элементы.ВариантРаботыМастера.Доступность = Ложь;
		Элементы.КартинкаПервойИнформационнойБазы.Гиперссылка = Ложь;
		Элементы.КартинкаПервойИнформационнойБазы1.Гиперссылка = Ложь;
		Элементы.КартинкаВторойИнформационнойБазы.Гиперссылка = Ложь;
		Элементы.КартинкаВторойИнформационнойБазы1.Гиперссылка = Ложь;
		
		// для узла РИБ файл настроек не формируем; настройки для второй базы передаем через константу
		Элементы.ГруппаФайлаНастроекОбмена1.Видимость = Ложь;
		Элементы.СтраницыВыбораФайлаСНастройкамиОбмена.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПредставлениеРезультатаНастройкиОбмена()
	
	СтрокаСообщения = НСтр("ru = '%1%2%3Префикс информационной базы: %4'");
	
	ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
						ПредставлениеРезультатаТранспортСообщений(),
						ПредставлениеРезультатаОтборыНаУзле(),
						ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
						ПредставлениеРезультатаПрефиксИнформационнойБазы());
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеРезультатаТранспортСообщений()
	
	Результат = Строка(Объект.ВидТранспортаСообщенийОбмена)
		+ НСтр("ru = ', параметры:'") + Символы.ПС
		+ ПолучитьОписаниеНастроекТранспортаОбмена();
	//
	Возврат Результат + Символы.ПС;
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаОтборыНаУзле()
	
	Возврат ?(ПустаяСтрока(ОписаниеОграниченийПередачиДанных), "", ОписаниеОграниченийПередачиДанных + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле()
	
	Возврат ?(ПустаяСтрока(ОписаниеЗначенийПоУмолчанию), "", ОписаниеЗначенийПоУмолчанию + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаПрефиксИнформационнойБазы()
	
	Возврат Объект.ПрефиксИнформационнойБазыИсточника;
	
КонецФункции

&НаСервере
Процедура ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьВыгрузкуПараметровМастераВоВременноеХранилище(Отказ, АдресВременногоХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыМастера(Отказ, АдресВременногоХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьЗагрузкуПараметровМастераИзВременногоХранилища(Отказ, АдресВременногоХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
	Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗначенияПоУмолчаниюПланаОбмена()
	
	МенеджерПланаОбмена = ПланыОбмена[Объект.ИмяПланаОбмена];
	
	ИмяФайлаНастроекДляПриемника = МенеджерПланаОбмена.ИмяФайлаНастроекДляПриемника() + ".xml";
	
	НастройкаОтборовНаУзле    = МенеджерПланаОбмена.НастройкаОтборовНаУзле();
	ЗначенияПоУмолчаниюНаУзле = МенеджерПланаОбмена.ЗначенияПоУмолчаниюНаУзле();
	
	ОписаниеОграниченийПередачиДанных = МенеджерПланаОбмена.ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле);
	ОписаниеЗначенийПоУмолчанию       = МенеджерПланаОбмена.ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле);
	
	ИмяФормыСозданияНачальногоОбраза = МенеджерПланаОбмена.ИмяФормыСозданияНачальногоОбраза();
	
	ИспользуемыеТранспортыСообщенийОбмена = МенеджерПланаОбмена.ИспользуемыеТранспортыСообщенийОбмена();
	
	ИспользоватьТранспортСообщенийОбменаEMAIL = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаFILE  = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.FILE) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаFTP   = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.FTP) <> Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеОграниченийПередачиДанных()
	
	ОписаниеОграниченийПередачиДанных = ПланыОбмена[Объект.ИмяПланаОбмена].ОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеЗначенийПоУмолчанию()
	
	ОписаниеЗначенийПоУмолчанию = ПланыОбмена[Объект.ИмяПланаОбмена].ОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияОбменаДаннымиНаКлиенте(Отказ)
	
	Состояние(НСтр("ru = 'Выполняется выгрузка данных...'"));
	
	// выполняем выгрузку данных
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, Объект.УзелИнформационнойБазы, Ложь, Истина, Объект.ВидТранспортаСообщенийОбмена);
	
	Состояние(НСтр("ru = 'Выгрузка данных завершена'"));
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Во время выгрузки данных возникли ошибки!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьНовыйОбменДаннымиНаКлиенте(Отказ)
	
	Состояние(НСтр("ru = 'Выполняется создание настройки обмена данными'"));
	
	НастроитьНовыйОбменДаннымиНаСервере(Отказ);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При создании настройки обмена данными возникли ошибки!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаименованиеНастройкиВыполненияОбмена(Отказ)
	
	Если ПустаяСтрока(Объект.НаименованиеНастройкиВыполненияОбмена) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование настройки обмена данными'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеНастройкиВыполненияОбмена",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьИмяФайлаНастроекОбменаДаннымиДляЗагрузки(Отказ)
	
	Если ПустаяСтрока(Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки) Тогда
		
		НСтрока = НСтр("ru = 'Выберите файл с настройками обмена данными'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуВыполнитьОбменНаКлиенте(Отказ)
	
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Если ВыполнитьСозданиеНачальногоОбразаСейчас Тогда
			
			ПараметрыФормы = Новый Структура("Ключ, Узел", Объект.УзелИнформационнойБазы, Объект.УзелИнформационнойБазы);
			
			ОткрытьФормуМодально(ИмяФормыСозданияНачальногоОбраза, ПараметрыФормы);
			
		КонецЕсли;
		
	Иначе
		
		Если ВыполнитьОбменДаннымиСейчас Тогда
			
			ИнициализацияОбменаДаннымиНаКлиенте(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	мЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьОписаниеНастроекТранспортаОбмена()
	
	// возвращаемое значение функции
	Результат = "";
	
	СписокВыбора = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора;
	Элемент = СписокВыбора.НайтиПоЗначению(Объект.ВидТранспортаСообщенийОбмена);
	
	Для Каждого Элемент ИЗ мПредставленияНастроекТранспорта[Элемент.Представление] Цикл
		
		ЗначениеНастройки = Объект[Элемент.Ключ];
		
		Если Найти(ВРег(Элемент.Значение), "ПАРОЛЬ") <> 0 Тогда
			
			// если задан пароль, то значение пароля не выводим
			ЗначениеНастройки = ?(ПустаяСтрока(ЗначениеНастройки), НСтр("ru = '<не задан>'"), НСтр("ru = '<указан>'"));
			
		ИначеЕсли  Не ТипЗначения(ЗначениеНастройки, "Число")
				 И Не ТипЗначения(ЗначениеНастройки, "Булево")
				 И Не ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			
			// если значение настройки не задано, то выводим значение "<пусто>"
			ЗначениеНастройки = НСтр("ru = '<пусто>'");
			
		КонецЕсли;
		
		СтрокаНастройки = "[Представление]: [Значение]";
		СтрокаНастройки = СтрЗаменить(СтрокаНастройки, "[Представление]", Элемент.Значение);
		СтрокаНастройки = СтрЗаменить(СтрокаНастройки, "[Значение]", ЗначениеНастройки);
		
		Результат = Результат + СтрокаНастройки + Символы.ПС;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = НСтр("ru = 'Параметры транспорта не заданы.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипЗначения(Значение, ИмяТипа)
	
	Возврат ТипЗнч(Значение) = Тип(ИмяТипа);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключение(ВидТранспорта)
	
	Отказ = Ложь;
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта);
	
	СтрокаСообщения = ?(Отказ,  НСтр("ru = 'Ошибка установки подключения!'"),
								НСтр("ru = 'Подключение успешно установлено!'"));
	//
	Предупреждение(СтрокаСообщения);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта)
	
	Если ТипЗнч(ВидТранспорта) = Тип("Строка") Тогда
		
		ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена[ВидТранспорта];
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, ВидТранспорта);
	
КонецПроцедуры

&НаКлиенте
Процедура Инкремент(Число, Знач Итератор = 1)
	
	Число = Число + Итератор;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоСтраницаМастера(ЭлементФормы)
	
	Возврат мСтраницыМастера[мТекущийНомерСтраницы] = ЭлементФормы;
	
КонецФункции

&НаКлиенте
Функция ПредыдущийНомерСтраницы()
	
	Возврат мТекущийНомерСтраницы - 1;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключениеНаКлиенте(Отказ, ВидТранспорта)
	
	Состояние(НСтр("ru = 'Выполняется проверка параметров транспорта...'"));
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Ошибка установки подключения!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДоступныеВариантыРаботыМастера(
								Знач ИспользоватьПараметрыТранспортаEMAIL,
								Знач ИспользоватьПараметрыТранспортаFILE,
								Знач ИспользоватьПараметрыТранспортаFTP)
	//
	СписокЗначений = Новый СписокЗначений;
	
	Если ИспользоватьПараметрыТранспортаFILE Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаFTP Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Если ИспользоватьПараметрыТранспортаEMAIL Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Возврат СписокЗначений;
КонецФункции

&НаКлиенте
Процедура ОтображениеЭлементовКомпозицииКартинокПервойСтраницыМастера()
	
	ЭтоПерваяИнформационнаяБаза = (ВариантРаботыМастера = врмНастроитьНовыйОбменДанными());
	
	Постфикс1 = ?(ЭтоПерваяИнформационнаяБаза, "Активная", "Неактивная");
	Постфикс2 = ?(ЭтоПерваяИнформационнаяБаза, "Неактивная", "Активная");
	
	ИмяСтраницыПервойИнформационнойБазы = "СтраницаПервойИнформационнойБазы[Постфикс]";
	ИмяСтраницыПервойИнформационнойБазы = СтрЗаменить(ИмяСтраницыПервойИнформационнойБазы, "[Постфикс]", Постфикс1);
	
	ИмяСтраницыВторойИнформационнойБазы = "СтраницаВторойИнформационнойБазы[Постфикс]";
	ИмяСтраницыВторойИнформационнойБазы = СтрЗаменить(ИмяСтраницыВторойИнформационнойБазы, "[Постфикс]", Постфикс2);
	
	Элементы.СтраницыПервойИнформационнойБазы.ТекущаяСтраница = Элементы[ИмяСтраницыПервойИнформационнойБазы];
	Элементы.СтраницыВторойИнформационнойБазы.ТекущаяСтраница = Элементы[ИмяСтраницыВторойИнформационнойБазы];
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПроверитьВозможностьСозданияНастройкиОбмена(Отказ, Знач ИмяПланаОбмена, Знач КодНовогоУзла)
	
	МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
	
	Если Не МенеджерПланаОбмена.НайтиПоКоду(КодНовогоУзла).Пустая() Тогда
		
		НСтрока = НСтр("ru = 'В этой информационной базе уже настроен обмен. Удалите предыдущую настройку обмена.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

// ЗНАЧЕНИЯ КОНСТАНТ

&НаКлиенте
Функция врмНастроитьНовыйОбменДанными()
	
	Возврат "НастроитьНовыйОбменДанными";
	
КонецФункции

&НаКлиенте
Функция врмПродолжитьНастройкуОбменаДанными()
	
	Возврат "ПродолжитьНастройкуОбменаДанными";
	
КонецФункции

Функция НадписьДалееFILE()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для задания настроек обмена через локальный или сетевой каталог.'");
	
КонецФункции

Функция НадписьДалееFTP()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для задания настроек обмена через FTP-ресурс.'");
	
КонецФункции

Функция НадписьДалееEMAIL()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для задания настроек обмена по почте.'");
	
КонецФункции

Функция НадписьДалееНастройки()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки дополнительных параметров обмена данными.'");
	
КонецФункции

// КОНСТАНТЫ ПЕРВОГО ЭТАПА НАСТРОЙКИ

&НаКлиенте
Функция смНачало_1()
	
	Возврат 10;
	
КонецФункции

&НаКлиенте
Функция смЗаданиеПараметровТранспорта_1_FILE()
	
	Результат = 10;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если Не ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смЗаданиеПараметровТранспорта_1_FTP()
	
	Результат = 10;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если Не ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смЗаданиеПараметровТранспорта_1_EMAIL()
	
	Результат = 10;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если Не ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смНастройкаПараметров_1()
	
	Результат = 11;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смИтогНастройкиОбмена_1()
	
	Результат = 12;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смОкончаниеСВыгрузкойНастройки_1()
	
	Результат = 13;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// КОНСТАНТЫ ВТОРОГО ЭТАПА НАСТРОЙКИ

&НаКлиенте
Функция смНачало_2()
	
	Возврат 40;
	
КонецФункции

&НаКлиенте
Функция смЗаданиеПараметровТранспорта_2_FILE()
	
	Результат = 40;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если Не ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смЗаданиеПараметровТранспорта_2_FTP()
	
	Результат = 40;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если Не ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смЗаданиеПараметровТранспорта_2_EMAIL()
	
	Результат = 40;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если Не ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смНастройкаПараметров_2()
	
	Результат = 41;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция смИтогНастройкиОбмена_2()
	
	
	Результат = 42;
	
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		Инкремент(Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

