///////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

Процедура ВидимостьСтраниц()

	Если ПоказыватьНастройку Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Настройка;
		ЭлементыФормы.ПанельКартинокПерехода.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокПерехода.Страницы.ПерейтиКОтчету;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Отчет;
		ЭлементыФормы.ПанельКартинокПерехода.ТекущаяСтраница = ЭлементыФормы.ПанельКартинокПерехода.Страницы.ПерейтиКНастройке;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с деревом проверок

Процедура ВывестиТекущуюПрограммуПроверки(ТекущаяПрограммаПроверки = Неопределено)
	
	НетВосстановленнойИзНастроекПрограммы = ТекущаяПрограммаПроверки = Неопределено 
	                                    ИЛИ ТипЗнч(ТекущаяПрограммаПроверки) <> Тип("ДеревоЗначений");
	Если НетВосстановленнойИзНастроекПрограммы Тогда
		
		// Включаем все проверки
		ИзменитьПометкуПодчиненных(ДеревоПроверок, Истина);
		
	Иначе
		
		Для каждого СтрокаРаздела Из ДеревоПроверок.Строки Цикл
		
			СохраненнаяСтрока   = ТекущаяПрограммаПроверки.Строки.Найти(СтрокаРаздела.Идентификатор, "Идентификатор", Истина);
			СтрокаБылаСохранена = СохраненнаяСтрока <> Неопределено;
			Если СтрокаБылаСохранена Тогда
				СтрокаРаздела.Включить = СохраненнаяСтрока.Включить;
			Иначе
				СтрокаРаздела.Включить = 0; // По умолчанию вновь добавленные проверки отключены
			КонецЕсли;
			
			Для каждого СтрокаПроверки Из СтрокаРаздела.Строки Цикл
				
				СохраненнаяСтрока   = ТекущаяПрограммаПроверки.Строки.Найти(СтрокаПроверки.Идентификатор, "Идентификатор", Истина);
				СтрокаБылаСохранена = СохраненнаяСтрока <> Неопределено;
				Если СтрокаБылаСохранена Тогда
					СтрокаПроверки.Включить = СохраненнаяСтрока.Включить;
				Иначе
					СтрокаПроверки.Включить = 0; // По умолчанию вновь добавленные проверки отключены
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	
	КонецЕсли;
	
	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, Ложь);
	
КонецПроцедуры

Процедура ДеревоПроверокПриИзмененииФлажка(Элемент, Колонка)
	
	// Серую пометку интерактивно установить нельзя
	ИмяКолонки = Колонка.Имя;
	Если ЭлементыФормы.ДеревоПроверок.ТекущаяСтрока[ИмяКолонки] = 2 Тогда
		ЭлементыФормы.ДеревоПроверок.ТекущаяСтрока[ИмяКолонки] = 0;
	КонецЕсли;
	ИзменитьПометкуПодчиненных(ЭлементыФормы.ДеревоПроверок.ТекущаяСтрока, , , Истина, ДеревоПроверок);
	
КонецПроцедуры

Процедура ДеревоПроверокПриАктивизацииСтроки(Элемент)
	
	ЭлементыФормы.НадписьПредметКонтроля.Заголовок = ЭлементыФормы.ДеревоПроверок.ТекущаяСтрока.ПредметКонтроля;
	
КонецПроцедуры

Процедура ДеревоПроверокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Включить.УстановитьТекст(ДанныеСтроки.Наименование);
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ЖирныйШрифт = Истина;
		ОформлениеСтроки.Шрифт = Новый Шрифт(ОформлениеСтроки.Шрифт,,,ЖирныйШрифт);
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с командной панелью дерева проверок

Процедура КоманднаяПанельВыбораПроверокВключитьВсе(Кнопка)
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Истина);
КонецПроцедуры

Процедура КоманднаяПанельВыбораПроверокСнятьВсеПометки(Кнопка)
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь);
КонецПроцедуры

Процедура КоманднаяПанельВыбораПроверокРазвернутьВсе(Кнопка)
	
	Для Каждого Стр Из ДеревоПроверок.Строки Цикл
		ЭлементыФормы.ДеревоПроверок.Развернуть(Стр, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельВыбораПроверокСвернутьВсе(Кнопка)
	
	Для Каждого Стр Из ДеревоПроверок.Строки Цикл
		ЭлементыФормы.ДеревоПроверок.Свернуть(Стр);
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с табличным документом отчета

Процедура ПоказатьУровеньОтчета(НомерУровня = 0)

	ЭлементыФормы.ДокументРезультат.ПоказатьУровеньГруппировокСтрок(НомерУровня);
	ТекОбластьНижеОтчета    = ЭлементыФормы.ДокументРезультат.ТекущаяОбласть.Верх > ЭлементыФормы.ДокументРезультат.ВысотаТаблицы;
	ТекОбластьСталаНевидима = НЕ ЭлементыФормы.ДокументРезультат.ТекущаяОбласть.Видимость;
	Если ТекОбластьСталаНевидима ИЛИ ТекОбластьНижеОтчета Тогда
		НомПервойСтрокиОтчета = ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок + 1;
		ОбластьНачалаОтчета = ЭлементыФормы.ДокументРезультат.Область(НомПервойСтрокиОтчета, 1, НомПервойСтрокиОтчета, 1);
		ЭлементыФормы.ДокументРезультат.ТекущаяОбласть = ОбластьНачалаОтчета;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельОтчетаУровень1(Кнопка)
	
	ПоказатьУровеньОтчета(0);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетаУровень2(Кнопка)
	
	ПоказатьУровеньОтчета(1);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетаУровень3(Кнопка)
	
	ПоказатьУровеньОтчета(2);
	
КонецПроцедуры

Процедура КоманднаяПанельОтчетаУровень4(Кнопка)
	
	ПоказатьУровеньОтчета(3);
	
КонецПроцедуры

Процедура КнопкаНапечататьОтчетНажатие(Элемент)
	
	ВремТабДокумент = Новый ТабличныйДокумент;
	ВремТабДокумент.Вывести(ЭлементыФормы.ДокументРезультат);
	// Делаем видимой шапку таблицы
	НомСтроки = 1;
	ВидимостьСтроки = ВремТабДокумент.Область(НомСтроки, , НомСтроки, ).Видимость;
	Пока НЕ ВидимостьСтроки Цикл
		ВремТабДокумент.Область(НомСтроки, , НомСтроки, ).Видимость = Истина;
		НомСтроки = НомСтроки + 1;
		ВидимостьСтроки = ВремТабДокумент.Область(НомСтроки, , НомСтроки, ).Видимость;
	КонецЦикла; 
	
	ВремТабДокумент.Напечатать(Ложь);
	
КонецПроцедуры
 
Процедура КнопкаСохранитьОтчетНажатие(Элемент)
	
	ДиалогФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогФайла.Фильтр = 
	"Табличный документ (*.mxl)|*.mxl
	||Документ HTML (*.htm)|*.htm
	||Лист Excel (*.xls)|*.xls
	||Текстовый файл UTF-8 (*.txt)|*.txt
	|";
	ТипыТабДокумента = Новый Соответствие;
	ТипыТабДокумента.Вставить(0, ТипФайлаТабличногоДокумента.MXL);
	ТипыТабДокумента.Вставить(1, ТипФайлаТабличногоДокумента.HTML);
	ТипыТабДокумента.Вставить(2, ТипФайлаТабличногоДокумента.XLS);
	ТипыТабДокумента.Вставить(3, ТипФайлаТабличногоДокумента.TXT);
	ДиалогФайла.ПолноеИмяФайла = "Экспресс-проверка "+Формат(ТекущаяДата(), "ДФ='дд-ММ-гггг ЧЧ-мм-сс'");
	Если ДиалогФайла.Выбрать() Тогда
		Попытка
			ВремТабДокумент = Новый ТабличныйДокумент;
			ВремТабДокумент.Вывести(ЭлементыФормы.ДокументРезультат.Область());
			// Делаем видимой шапку таблицы
			НомСтроки = 1;
			ВидимостьСтроки = ВремТабДокумент.Область(НомСтроки, , НомСтроки, ).Видимость;
			Пока НЕ ВидимостьСтроки Цикл
				ВремТабДокумент.Область(НомСтроки, , НомСтроки, ).Видимость = Истина;
				НомСтроки = НомСтроки + 1;
				ВидимостьСтроки = ВремТабДокумент.Область(НомСтроки, , НомСтроки, ).Видимость;
			КонецЦикла; 
			ТипТабДокумента = ТипыТабДокумента[ДиалогФайла.ИндексФильтра];
			ВремТабДокумент.Записать(ДиалогФайла.ПолноеИмяФайла, ТипТабДокумента);
		Исключение
			Предупреждение("Файл отчета не сохранен!
			|" + ОписаниеОшибки()); 
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с другими элементами формы 

Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ДатаНачПриИзменении(Элемент)
	
	ДатаНач = НачалоМесяца(ДатаНач);
	ПериодВПределахГода = НачалоГода(ДатаНач) = НачалоГода(ДатаКон);
	Если НЕ ПериодВПределахГода Тогда
		
		Предупреждение("Период должен находиться в пределах одного года!");
		ДатаКон = КонецГода(ДатаНач);
		
	КонецЕсли;
	
	Если ДатаКон < ДатаНач Тогда
		ДатаКон = КонецМесяца(ДатаНач);
	КонецЕсли;
	
	ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
	
КонецПроцедуры

Процедура ДатаКонПриИзменении(Элемент)
	
	ДатаКон = КонецМесяца(ДатаКон);
	ПериодВПределахГода = НачалоГода(ДатаНач) = НачалоГода(ДатаКон);
	Если НЕ ПериодВПределахГода Тогда
		
		Предупреждение("Период должен находиться в пределах одного года!");
		ДатаНач = НачалоГода(ДатаКон);
		
	КонецЕсли;
	
	Если ДатаНач > ДатаКон Тогда
		ДатаНач = НачалоМесяца(ДатаКон);
	КонецЕсли;
	
	ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
	
КонецПроцедуры

Процедура КнопкаВыборПериодаНажатие(Элемент)
	
	НП.УстановитьПериод(НачалоДня(ДатаНач), КонецДня(ДатаКон));
	Если НП.Редактировать() Тогда
		
		ДатаКон = КонецМесяца(НП.ПолучитьДатуОкончания());
		
		ПериодВПределахГода = НачалоГода(НП.ПолучитьДатуНачала()) = НачалоГода(НП.ПолучитьДатуОкончания());
		Если ПериодВПределахГода Тогда
			
			ДатаНач = НачалоМесяца(НП.ПолучитьДатуНачала());
			
		Иначе
			
			Предупреждение("Период должен находиться в пределах одного года!");
			ДатаНач = НачалоГода(ДатаКон);
			
		КонецЕсли;
		ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьВыполнитьПроверкуНажатие(Элемент)
	
	ИмяТекущегоЭлементаФормы = "";
	НельзяВыполнятьПроверку = НЕ ПроверитьЗаполнениеРеквизитов(ИмяТекущегоЭлементаФормы);
	Если НельзяВыполнятьПроверку Тогда
		ПерейтиКЭлементуСОшибкой = ЭлементыФормы.Найти(ИмяТекущегоЭлементаФормы) <> Неопределено;
		Если ПерейтиКЭлементуСОшибкой Тогда
			ТекущийЭлемент = ЭлементыФормы[ИмяТекущегоЭлементаФормы];
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПоказыватьНастройку = Ложь;
	ВидимостьСтраниц();
	
	СформироватьОтчет(ЭлементыФормы.ДокументРезультат, Истина);
	
КонецПроцедуры

Процедура НадписьНастроитьНажатие(Элемент)
	
	ПоказыватьНастройку = Истина;
	ВидимостьСтраниц();
	
КонецПроцедуры

Процедура НадписьВернутьсяКОтчетуНажатие(Элемент)
	
	ПоказыватьНастройку = Ложь;
	ВидимостьСтраниц();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с событиями формы

Процедура ПриОткрытии()
	
	БылоВосстановлениеНастроек = ДеревоПроверок.Строки.Количество() > 0;
	
	Если НЕ БылоВосстановлениеНастроек Тогда
		
		Если ДатаНач = '00010101' Тогда
			ДатаНач = НачалоГода(РабочаяДата);
		КонецЕсли;
		Если ДатаКон = '00010101' Тогда
			ДатаКон = КонецМесяца(РабочаяДата);
		КонецЕсли;
		ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
		
		Если ЗначениеЗаполнено(глЗначениеПеременной("ОсновнаяОрганизация")) Тогда 
			Организация = глЗначениеПеременной("ОсновнаяОрганизация"); 
		КонецЕсли;
		
		ВходящиеДанные = Новый Соответствие;
		СоздатьКолонкиДереваПроверок();
		ЗаполнитьДеревоПроверокИзМакетаMXL();
		
		ВывестиТекущуюПрограммуПроверки();
		
	КонецЕсли;
	
	// В отчете показываем только разделы
	ЭлементыФормы.ДокументРезультат.ПоказатьУровеньГруппировокСтрок(0); 
	
	// Открываем страницу отчета
	ПоказыватьНастройку = Ложь;
	ВидимостьСтраниц();
	
КонецПроцедуры

Процедура СохранитьТекущуюПрограммуПроверки()

	ТекущаяПрограмма = Новый ДеревоЗначений;
	ТекущаяПрограмма.Колонки.Добавить("Идентификатор",,,0);
	ТекущаяПрограмма.Колонки.Добавить("Включить",,,0);
	
	Для каждого СтрокаРаздела Из ДеревоПроверок.Строки Цикл
	
		СтрокаРазделаПрограммы = ТекущаяПрограмма.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРазделаПрограммы, СтрокаРаздела);
		Для каждого СтрокаПроверки Из СтрокаРаздела.Строки Цикл
			СтрокаПроверкиПрограммы = СтрокаРазделаПрограммы.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПроверкиПрограммы, СтрокаПроверки);
		КонецЦикла;
		
	КонецЦикла;

	СохраненныеНастройки.Вставить("ТекущаяПрограмма", ТекущаяПрограмма);
	
КонецПроцедуры
 
Процедура ПередСохранениемЗначений(Отказ)
	
	СохраненныеНастройки = Новый Структура;
	СохранитьТекущуюПрограммуПроверки();
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ СохраненныеНастройки.Свойство("ТекущаяПрограмма") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПрограмма = СохраненныеНастройки.ТекущаяПрограмма;
	Если ТипЗнч(ТекущаяПрограмма) <> Тип("ДеревоЗначений")  Тогда
		Возврат;
	КонецЕсли;
		
	ПериодПроверкиСтрокой = ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
	
	ЭтоВосстановлениеПриОткрытии = ДеревоПроверок.Строки.Количество() = 0;
		
	Если ЭтоВосстановлениеПриОткрытии Тогда
			
		СоздатьКолонкиДереваПроверок();
		ЗаполнитьДеревоПроверокИзМакетаMXL();
		
	КонецЕсли;
	
	// Проверка ведения однофирменности
	Организация = глЗначениеПеременной("ОсновнаяОрганизация"); 
		
	ВывестиТекущуюПрограммуПроверки(ТекущаяПрограмма);
	
КонецПроцедуры

