# Если Клиент Тогда
Перем НП Экспорт;                  // Настройка периода

// Цвета, используемые в печатной форме отчета
Перем ЦветФонаОшибок;
Перем ЦветФонаБезОшибок;
Перем ЦветФонаКолОшибок;
Перем ЦветТекстаОшибок;
Перем ЦветТекстаКолОшибок;

# КонецЕсли

Перем ВысотаОбластей Экспорт;      // Структура. Ключ - имя области, значение - высота области
Перем КонецДатыКон;                // Конец дня
Перем ОписаниеТипаСуммы;           // Число, 15, 2
Перем ОбщаяСтруктураФорматаПолей;  // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураЗаголовков;    // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураШириныКолонок; // Для автоформатирования областей детального отчета
Перем ОбщаяСтруктураРасшифровки;   // Для расшифровки детального отчета

///////////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и функции

Функция ПолучитьНомерЧислом(НомерСтрокой)

	ЧисловаяЧастьНомера = "";
	ДлинаСтроки = СтрДлина(НомерСтрокой);
	Для Счетчик = 0 По ДлинаСтроки - 1 Цикл
		НомерСимвола = ДлинаСтроки - Счетчик;
		ТекСимвол = Сред(НомерСтрокой, НомерСимвола, 1);
		ЭтоЧисло = Найти("0123456789", ТекСимвол) > 0;
		Если ЭтоЧисло Тогда
			ЧисловаяЧастьНомера = ТекСимвол + ЧисловаяЧастьНомера;
		ИначеЕсли НЕ ПустаяСтрока(ЧисловаяЧастьНомера) Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерЧислом = Число("0"+ЧисловаяЧастьНомера);
	Возврат НомерЧислом;

КонецФункции 

Функция ПроверитьЗаполнениеРеквизитов(ИмяЭлементаФормыСОшибкой = "") Экспорт

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать организацию для проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "Организация";
		Возврат Ложь;
	КонецЕсли;

	Если ДатаНач = '00010101' Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату начала периода проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаНач";
		Возврат Ложь;
	КонецЕсли;
	
	Если ДатаКон = '00010101' Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату окончания периода проверки!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаКон";
		Возврат Ложь;
	ИначеЕсли ДатаКон < ДатаНач Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать дату окончания периода проверки
		|более позднюю, чем дата начала!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДатаКон";
		Возврат Ложь;
	КонецЕсли;
	
	НетВыбранныхПроверок = ДеревоПроверок.Строки.Найти(1, "Включить", Истина) = Неопределено;
	Если НетВыбранныхПроверок Тогда
		#Если Клиент Тогда
		Предупреждение("Необходимо выбрать хотя бы одну проверку!");
		#КонецЕсли
		ИмяЭлементаФормыСОшибкой = "ДеревоПроверок";
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьЗаполнениеРеквизитов()

///////////////////////////////////////////////////////////////////////////////////////
// Функции получают исходящие данные. Если нужного значения в структуре нет - оно определяется и вставляется

Функция ПолучитьДанныеУчетнаяПолитика()
	
	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("УчетнаяПолитика");
	Если НетВИсходящихДанных Тогда
		СтрокаПравила = ДеревоПроверок.Строки.Найти("НаличиеУчП", "Идентификатор", Истина);
		ПроверитьПравило(СтрокаПравила);
	КонецЕсли;
	УчетнаяПолитика = ИсходящиеДанные.УчетнаяПолитика;
	
	Возврат УчетнаяПолитика;

КонецФункции

Функция ПолучитьДанныеВестиРасчетыПоДокументам()

	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("ВестиРасчетыПоДокументам");
	Если НетВИсходящихДанных Тогда
		СчетРасчетов = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;
		ВестиРасчетыПоДокументам = СчетРасчетов.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто") <> Неопределено;
		ИсходящиеДанные.Вставить("ВестиРасчетыПоДокументам", ВестиРасчетыПоДокументам);
	Иначе
		ВестиРасчетыПоДокументам = ИсходящиеДанные.ВестиРасчетыПоДокументам;
	КонецЕсли;
	
	Возврат ВестиРасчетыПоДокументам;

КонецФункции

Функция ПолучитьДанныеТаблицаОшибокДатАктуальности()

	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("ТаблицаОшибокДатАктуальности");
	Если НетВИсходящихДанных Тогда
		ПустаяДата = '00010101';
		//! не отрабатывается пустая организация в регистре
		СтруктураДатАктуальности        = РегистрыСведений.ДатаАктуальностиУчета.Получить(Новый Структура("Организация", Организация));
		ЕстьОшибкаНДС                   = СтруктураДатАктуальности.НДС <> ПустаяДата И КонецДня(СтруктураДатАктуальности.НДС) < КонецДатыКон;
		ЕстьОшибкаРасчетыСКонтрагентами = СтруктураДатАктуальности.РасчетыСКонтрагентами <> ПустаяДата И КонецДня(СтруктураДатАктуальности.РасчетыСКонтрагентами) < КонецДатыКон;
		ЕстьОшибкаОценкаМПЗ             = СтруктураДатАктуальности.ОценкаМПЗ <> ПустаяДата И КонецДня(СтруктураДатАктуальности.ОценкаМПЗ) < КонецДатыКон;
		ЕстьОшибкаНУ                    = СтруктураДатАктуальности.НУ <> ПустаяДата И КонецДня(СтруктураДатАктуальности.НУ) < КонецДатыКон;
		
		ОбнаруженыОшибки  = ЕстьОшибкаНДС ИЛИ ЕстьОшибкаРасчетыСКонтрагентами ИЛИ ЕстьОшибкаОценкаМПЗ ИЛИ ЕстьОшибкаНУ;
		
		ТаблицаОшибокДатАктуальности = Новый ТаблицаЗначений;
		ТаблицаОшибокДатАктуальности.Колонки.Добавить("РазделУчета");
		ТаблицаОшибокДатАктуальности.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
		
		Если ОбнаруженыОшибки Тогда
			
			Если ЕстьОшибкаНДС Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.НДС;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.НДС;
			КонецЕсли;
			Если ЕстьОшибкаРасчетыСКонтрагентами Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.РасчетыСКонтрагентами;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.РасчетыСКонтрагентами;
			КонецЕсли;
			Если ЕстьОшибкаОценкаМПЗ Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.ОценкаМПЗ;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.ОценкаМПЗ;
			КонецЕсли;
			Если ЕстьОшибкаНУ Тогда
				СтрокаОшибки = ТаблицаОшибокДатАктуальности.Добавить();
				СтрокаОшибки.РазделУчета = Перечисления.РазделыУчета.НУ;
				СтрокаОшибки.ДатаАктуальности = СтруктураДатАктуальности.НУ;
			КонецЕсли;
			
		КонецЕсли; 
		
		ИсходящиеДанные.Вставить("ТаблицаОшибокДатАктуальности", ТаблицаОшибокДатАктуальности);
		
	Иначе
		
		ТаблицаОшибокДатАктуальности = ИсходящиеДанные.ТаблицаОшибокДатАктуальности;
		
	КонецЕсли;
	
	Возврат ТаблицаОшибокДатАктуальности;

КонецФункции

Функция ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС()
	Перем Отказ;
	
	НетВИсходящихДанных = НЕ ИсходящиеДанные.Свойство("ТаблицаНалоговыхПериодовПоНДС");
	Если НетВИсходящихДанных Тогда
		
		ТаблицаНалоговыхПериодов = Новый ТаблицаЗначений;
		ТаблицаНалоговыхПериодов.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаНалоговыхПериодов.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
		ТаблицаНалоговыхПериодов.Колонки.Добавить("Результат", Новый ОписаниеТипов("Строка"));
		ТаблицаНалоговыхПериодов.Колонки.Добавить("ПериодМеньшеРегламентного", Новый ОписаниеТипов("Булево"));
		ТекДата = ДатаНач;
		Пока ТекДата < ДатаКон Цикл
			
			ЭтоНачалоНалоговогоПериода = (ТекДата = НачалоКвартала(ТекДата));
			Если ЭтоНачалоНалоговогоПериода Тогда
				КонПериода = КонецКвартала(ТекДата);
				СтрокаПериода = ТаблицаНалоговыхПериодов.Добавить();
				СтрокаПериода.НачПериода = ТекДата;
				СтрокаПериода.КонПериода = Мин(КонПериода, КонецДатыКон);
				СтрокаПериода.ПериодМеньшеРегламентного = СтрокаПериода.КонПериода < КонПериода;
			КонецЕсли;
			ТекДата = ДобавитьМесяц(ТекДата, 1);
		
		КонецЦикла;
		ИсходящиеДанные.Вставить("ТаблицаНалоговыхПериодовПоНДС", ТаблицаНалоговыхПериодов);
		
	Иначе
		ТаблицаНалоговыхПериодов = ИсходящиеДанные.ТаблицаНалоговыхПериодовПоНДС;
	КонецЕсли;
	
	Возврат ТаблицаНалоговыхПериодов;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Общие алгоритмы для проверки правил 

// Шаблон
//Процедура ВыполнитьИмяАлгоритма(СтрокаПравила)

//	// Текст алгоритма...
//	
//КонецПроцедуры

Процедура ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть выполнена, так как не определена учетная политика организации "
		                                    + " на "+Формат(ДатаНач, "ДФ=dd.MM.yyyy");
		ИсходящиеДанные.Вставить("Отказ", Истина);
		Возврат;
	
	КонецЕсли;
	
	ОрганизацияПрименяетУСН = УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
	Если ОрганизацияПрименяетУСН Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть выполнена, так как организация на "+Формат(ДатаНач, "ДФ=dd.MM.yyyy")
		                                    + " применяет упрощенную систему налогообложения";
		ИсходящиеДанные.Вставить("Отказ", Истина);
		Возврат;
	
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, ДатаНач, УчетнаяПолитика);
	
	Если УпрощенныйУчетНДС Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть выполнена, так как организация на "+Формат(ДатаНач, "ДФ=dd.MM.yyyy")
		                                    + " применяет упрощенный учет НДС";
		ИсходящиеДанные.Вставить("Отказ", Истина);
		Возврат;
	
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры проверки правил
// Имя процедуры составляется стандартно из "ПроверитьПравило" плюс идентификатор правила
// после отладки тексты могут быть перенесены в макет НаборПравилВыгрузки (область Правила|ТекстАлгоритма)

// Шаблон процедуры
//Процедура ПроверитьПравилоИмяПравила(СтрокаПравила)

//	// Алгоритм проверки
//	//...
//	Запрос = Новый Запрос;
//	//...
//	Результат = Запрос.Выполнить();
//	
//	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
//	СтрокаПравила.ПроверкаВыполнена = Истина;
//	
//	// Добавляем в ИсходящиеДанные данные, необходимые для формирования детального отчета по ошибкам
//	// или данные для последующего использования другими проверками
//	Если СтрокаПравила.ОбнаруженыОшибки Тогда
//		ИсходящиеДанные.Вставить("ИмяПравилаРезультатЗапроса", Результат);
//	КонецЕсли; 
//	
//КонецПроцедуры

// Учетная политика

Процедура ПроверитьПравилоНаличиеУчП(СтрокаПравила)
	Перем Отказ;
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДатаНач, Отказ, Организация);
	ИсходящиеДанные.Вставить("УчетнаяПолитика", УчетнаяПолитика);
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитики;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеУчП_Перс(СтрокаПравила)
	
	УчетЗПВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	Если УчетЗПВоВнешнейПрограмме Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Учет зарплаты и кадров ведется во внешней программе";
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация,
	|	УчетнаяПолитикаПоПерсоналу.ПоддержкаВнутреннегоСовместительства КАК ПоддержкаВнутреннегоСовместительства,
	|	УчетнаяПолитикаПоПерсоналу.УпрощенныйУчетНДФЛ КАК УпрощенныйУчетНДФЛ
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоПерсоналу КАК УчетнаяПолитикаПоПерсоналу
	|		ПО (ВЫБОР
	|				КОГДА Организации.ГоловнаяОрганизация = &парамПустаяОрганизация
	|					ТОГДА Организации.Ссылка
	|				ИНАЧЕ Организации.ГоловнаяОрганизация
	|			КОНЕЦ = УчетнаяПолитикаПоПерсоналу.Организация)
	|ГДЕ
	|	Организации.Ссылка = &Организация
	|	И УчетнаяПолитикаПоПерсоналу.ПоддержкаВнутреннегоСовместительства ЕСТЬ НЕ NULL ");
	
	Запрос.УстановитьПараметр("парамПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("Организация", Организация);
	Результат = Запрос.Выполнить();
	НетУчетнойПолитикиПоПерсоналу = Результат.Пустой();
	
	Если НетУчетнойПолитикиПоПерсоналу Тогда
		ИсходящиеДанные.Вставить("УчетнаяПолитикаПоПерсоналу", Неопределено);
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		УчетнаяПолитикаПоПерсоналу = Новый Структура;
		УчетнаяПолитикаПоПерсоналу.Вставить("ПоддержкаВнутреннегоСовместительства", Выборка.ПоддержкаВнутреннегоСовместительства);
		УчетнаяПолитикаПоПерсоналу.Вставить("УпрощенныйУчетНДФЛ", Выборка.УпрощенныйУчетНДФЛ);
		
		ИсходящиеДанные.Вставить("УчетнаяПолитикаПоПерсоналу", УчетнаяПолитикаПоПерсоналу);
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = НетУчетнойПолитикиПоПерсоналу;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
КонецПроцедуры

Процедура ПроверитьПравилоНеизменностьУчП_БУ(СтрокаПравила)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодДень", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ЭлементУчетнойПолитики");
	ТаблицаОшибок.Колонки.Добавить("НовоеЗначение");
	ТаблицаОшибок.Колонки.Добавить("СтароеЗначение");
	ДеревоУчетнойПолитики        = глЗначениеПеременной("глУчетнаяПолитика");
	УчетнаяПолитикаПоОрганизации = ДеревоУчетнойПолитики.Строки.Найти(?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация), Организация.ГоловнаяОрганизация, Организация), "Организация").Строки;
	
	ИменаРесурсовБУ = Новый Массив;
	ИменаРесурсовБУ.Добавить("СпособОценкиМПЗ");
	ИменаРесурсовБУ.Добавить("СпособОценкиТоваровВРознице");
	ИменаРесурсовБУ.Добавить("ДиректКостинг");
	ИменаРесурсовБУ.Добавить("ПоддержкаПБУ18");
	ИменаРесурсовБУ.Добавить("ПорядокРаспределенияРасходовНаОказаниеУслуг");
	ИменаРесурсовБУ.Добавить("ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг");
	ИменаРесурсовБУ.Добавить("СпособУчетаВыпускаГотовойПродукции");
	ИменаРесурсовБУ.Добавить("СпособРасчетаСебестоимостиПроизводства");
	
	СинонимыРесурсов = Новый Соответствие;
	Для каждого ИмяРесурсаБУ Из ИменаРесурсовБУ Цикл
		
		Ресурс = Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций.Ресурсы.Найти(ИмяРесурсаБУ);
		Если НЕ Ресурс = Неопределено Тогда
			СинонимыРесурсов.Вставить(Ресурс.Имя, Ресурс.Синоним);
		КонецЕсли; 
		
	КонецЦикла;
	
	Для ИндексСтроки = 1 По УчетнаяПолитикаПоОрганизации.Количество() - 1 Цикл
	
		ТекУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки];
		Если ТекУчетнаяПолитика.Период < ДатаНач Тогда
			Продолжить;
		ИначеЕсли ТекУчетнаяПолитика.Период > ДатаКон Тогда
		    Прервать;
		КонецЕсли;
		
		СтараяУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки - 1];
		Для каждого КолонкаЭлементаУчетнойПолитики Из ДеревоУчетнойПолитики.Колонки Цикл
			
			ЭлементУчетнойПолитики = КолонкаЭлементаУчетнойПолитики.Имя;
			
			Если СинонимыРесурсов[ЭлементУчетнойПолитики] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
		    ИзменилсяЭлементУчетнойПолитики = ТекУчетнаяПолитика[ЭлементУчетнойПолитики] <> СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
			Если ИзменилсяЭлементУчетнойПолитики Тогда
				ИзменениеНеСНачалаГода = ТекУчетнаяПолитика.Период <> НачалоГода(ТекУчетнаяПолитика.Период);
				Если ИзменениеНеСНачалаГода Тогда
				
					 НоваяОшибка = ТаблицаОшибок.Добавить();
					 НоваяОшибка.ПериодДень             = ТекУчетнаяПолитика.Период;
					 НоваяОшибка.ЭлементУчетнойПолитики = СинонимыРесурсов[ЭлементУчетнойПолитики];
					 НоваяОшибка.НовоеЗначение          = ТекУчетнаяПолитика[ЭлементУчетнойПолитики];
					 НоваяОшибка.СтароеЗначение         = СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
				
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НеизменностьУчП_БУТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ЭлементУчетнойПолитики", "Элемент учетной политики");
		СтруктураЗаголовков.Вставить("НовоеЗначение", "Новое значение");
		СтруктураЗаголовков.Вставить("СтароеЗначение", "Старое значение");
		ИсходящиеДанные.Вставить("НеизменностьУчП_БУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНеизменностьУчП_НУ(СтрокаПравила)
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодДень", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("ЭлементУчетнойПолитики");
	ТаблицаОшибок.Колонки.Добавить("НовоеЗначение");
	ТаблицаОшибок.Колонки.Добавить("СтароеЗначение");
	ДеревоУчетнойПолитики       = глЗначениеПеременной("глУчетнаяПолитика");
	УчетнаяПолитикаПоОрганизации = ДеревоУчетнойПолитики.Строки.Найти(?(ЗначениеЗаполнено(Организация.ГоловнаяОрганизация), Организация.ГоловнаяОрганизация, Организация), "Организация").Строки;
	
	ИменаРесурсовБУ = Новый Массив;
	ИменаРесурсовБУ.Добавить("СпособОценкиМПЗ");
	ИменаРесурсовБУ.Добавить("СпособОценкиТоваровВРознице");
	ИменаРесурсовБУ.Добавить("ДиректКостинг");
	ИменаРесурсовБУ.Добавить("ПоддержкаПБУ18");
	ИменаРесурсовБУ.Добавить("ПорядокРаспределенияРасходовНаОказаниеУслуг");
	ИменаРесурсовБУ.Добавить("ПорядокРаспределенияРасходовНаОказаниеВнутреннихУслуг");
	ИменаРесурсовБУ.Добавить("СпособУчетаВыпускаГотовойПродукции");
	ИменаРесурсовБУ.Добавить("СпособРасчетаСебестоимостиПроизводства");
	
	СинонимыРесурсов = Новый Соответствие;
	Для каждого Ресурс Из Метаданные.РегистрыСведений.УчетнаяПолитикаОрганизаций.Ресурсы Цикл
		
		ЭтоРесурсБУ = НЕ ИменаРесурсовБУ.Найти(Ресурс.Имя) = Неопределено;
		Если ЭтоРесурсБУ Тогда
			Продолжить;
		КонецЕсли;
		СинонимыРесурсов.Вставить(Ресурс.Имя, Ресурс.Синоним);
	
	КонецЦикла;
	
	ВозможныеИзмененияСНачалаКвартала = Новый ТаблицаЗначений;
	ВозможныеИзмененияСНачалаКвартала.Колонки.Добавить("ЭлементУчетнойПолитики");
	ВозможныеИзмененияСНачалаКвартала.Колонки.Добавить("Значение");
	
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "НДСНалоговыйПериод";
	СтрокаИзменения.Значение = Неопределено; // То есть любое
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "ОрганизацияЯвляетсяПлательщикомЕНВД";
	СтрокаИзменения.Значение = Неопределено; // То есть любое
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "РозничнаяТорговляОблагаетсяЕНВД";
	СтрокаИзменения.Значение = Неопределено; // То есть любое
	СтрокаИзменения = ВозможныеИзмененияСНачалаКвартала.Добавить();
	СтрокаИзменения.ЭлементУчетнойПолитики = "СистемаНалогообложения";
	СтрокаИзменения.Значение = Перечисления.СистемыНалогообложения.Общая; // Можно потерять право на УСН с начала квартала
	
	ВозможныеИзмененияСНачалаМесяца = Новый ТаблицаЗначений;
	ВозможныеИзмененияСНачалаМесяца.Колонки.Добавить("ЭлементУчетнойПолитики");
	ВозможныеИзмененияСНачалаМесяца.Колонки.Добавить("Значение");
	
	Для ИндексСтроки = 1 По УчетнаяПолитикаПоОрганизации.Количество() - 1 Цикл
	
		ТекУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки];
		Если ТекУчетнаяПолитика.Период < ДатаНач Тогда
			Продолжить;
		ИначеЕсли ТекУчетнаяПолитика.Период > ДатаКон Тогда
		    Прервать;
		КонецЕсли;
		
		СтараяУчетнаяПолитика = УчетнаяПолитикаПоОрганизации[ИндексСтроки - 1];
		Для каждого КолонкаЭлементаУчетнойПолитики Из ДеревоУчетнойПолитики.Колонки Цикл
			
			ЭлементУчетнойПолитики = КолонкаЭлементаУчетнойПолитики.Имя;
			
			Если СинонимыРесурсов[ЭлементУчетнойПолитики] = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбора        = Новый Структура("ЭлементУчетнойПолитики", ЭлементУчетнойПолитики);
			
		    ИзменилсяЭлементУчетнойПолитики = ТекУчетнаяПолитика[ЭлементУчетнойПолитики] <> СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
			Если ИзменилсяЭлементУчетнойПолитики Тогда
				ИзменениеНеСНачалаГода = ТекУчетнаяПолитика.Период <> НачалоГода(ТекУчетнаяПолитика.Период);
				Если ИзменениеНеСНачалаГода Тогда
					
					ИзменениеВозможно = Ложь;
					// Сначала проверяем изменения, которые возможно делать каждый месяц
					ВозможныеИзменения = ВозможныеИзмененияСНачалаМесяца.НайтиСтроки(СтруктураОтбора);
					Для каждого ВозможноеИзменение Из ВозможныеИзменения Цикл
						
						ИзменениеВозможно = ВозможноеИзменение.Значение = Неопределено 
						                ИЛИ ТекУчетнаяПолитика[ЭлементУчетнойПолитики] = ВозможноеИзменение.Значение;
						Если ИзменениеВозможно Тогда
							Прервать;
						КонецЕсли;
						
					КонецЦикла;
					
					// Потом проверяем изменения, которые возможно делать каждый квартал
					Если НЕ ИзменениеВозможно Тогда
						
						ИзменениеСНачалаКвартала = ТекУчетнаяПолитика.Период = НачалоКвартала(ТекУчетнаяПолитика.Период);
						Если ИзменениеСНачалаКвартала Тогда
							
							ВозможныеИзменения = ВозможныеИзмененияСНачалаКвартала.НайтиСтроки(СтруктураОтбора);
							Для каждого ВозможноеИзменение Из ВозможныеИзменения Цикл
							 
						 		ИзменениеВозможно = ВозможноеИзменение.Значение = Неопределено 
							     	            ИЛИ ТекУчетнаяПолитика[ЭлементУчетнойПолитики] = ВозможноеИзменение.Значение;
								Если ИзменениеВозможно Тогда
									Прервать;
								КонецЕсли;
								
							 КонецЦикла;
						КонецЕсли;
					
					КонецЕсли;
					
					Если НЕ ИзменениеВозможно Тогда
							
						НоваяОшибка = ТаблицаОшибок.Добавить();
						НоваяОшибка.ПериодДень             = ТекУчетнаяПолитика.Период;
						НоваяОшибка.ЭлементУчетнойПолитики = СинонимыРесурсов[ЭлементУчетнойПолитики];
						НоваяОшибка.НовоеЗначение          = ТекУчетнаяПолитика[ЭлементУчетнойПолитики];
						НоваяОшибка.СтароеЗначение         = СтараяУчетнаяПолитика[ЭлементУчетнойПолитики];
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла; 
	
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НеизменностьУчП_НУТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ЭлементУчетнойПолитики", "Элемент учетной политики");
		СтруктураЗаголовков.Вставить("НовоеЗначение", "Новое значение");
		СтруктураЗаголовков.Вставить("СтароеЗначение", "Старое значение");
		ИсходящиеДанные.Вставить("НеизменностьУчП_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоОценкаРозницы(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика организации";
		Возврат;
	КонецЕсли;
	
	СпособОценкиТоваровВРознице = УчетнаяПолитика.СпособОценкиТоваровВРознице;
	Если СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "В учетной политике организации установлен способ оценки стоимости товаров "
		                                    + """По продажной стоимости""";
		Возврат;
	КонецЕсли;
	
	// Дополнительно проверяем, что нет проводок по счетам, связанным с ПБУ 18/02
	
	СчетаУчетаТоваровПоПродажнойСтоимости = Новый Массив;
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	СчетаУчетаТоваровПоПродажнойСтоимости.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Счет,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт КАК НачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт КАК НачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт КАК ОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК КонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК КонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетаУчетаТоваровПоПродажнойСтоимости), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстаткиИОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаУчетаТоваровПоПродажнойСтоимости", СчетаУчетаТоваровПоПродажнойСтоимости);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ОценкаРозницыРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НачальныйОстатокДт", "Нач. остаток Дт");
		СтруктураЗаголовков.Вставить("НачальныйОстатокКт", "Нач. остаток Кт");
		СтруктураЗаголовков.Вставить("ОборотДт", "Оборот Дт");
		СтруктураЗаголовков.Вставить("ОборотКт", "Оборот Кт");
		СтруктураЗаголовков.Вставить("КонечныйОстатокДт", "Кон. остаток Дт");
		СтруктураЗаголовков.Вставить("КонечныйОстатокКт", "Кон. остаток Кт");
		ИсходящиеДанные.Вставить("ОценкаРозницыСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоДиректКостингИСчет26(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика организации";
		Возврат;
	КонецЕсли;
	
    ПрименяетсяДиректКостинг = УчетнаяПолитика.ДиректКостинг;
	ДопустимыеКорсчета = Новый Массив;
	Если ПрименяетсяДиректКостинг Тогда
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходы);
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);
	Иначе
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_);
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства);
		ДопустимыеКорсчета.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредитуСчета26
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет26), , Организация = &Организация, (НЕ КорСчет В ИЕРАРХИИ (&ДопустимыеКорсчета)), ) КАК ХозрасчетныйОбороты";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет26", ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	Запрос.УстановитьПараметр("ДопустимыеКорсчета", ДопустимыеКорсчета);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ДиректКостингИСчет26РезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("КорСчет", "Кор.счет");
		СтруктураЗаголовков.Вставить("ОборотПоКредитуСчета26", "Оборот по кредиту счета 26");
		ИсходящиеДанные.Вставить("ДиректКостингИСчет26СтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПрименениеПБУ18Счета(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика организации";
		Возврат;
	КонецЕсли;
	
    ПрименяетсяПБУ18 = УчетнаяПолитика.ПоддержкаПБУ18;
	Если ПрименяетсяПБУ18 Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "В учетной политике организации установлена поддержка ПБУ 18/02";
		Возврат;
	КонецЕсли;
	
	СчетаПоддержкиПБУ18 = Новый Массив;
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеАктивы);
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.ОтложенныеНалоговыеОбязательства);
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.ПрибылиИУбытки_НалогНаПрибыль);
	СчетаПоддержкиПБУ18.Добавить(ПланыСчетов.Хозрасчетный.РасчетНалогаНаПрибыль);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотПоДебету,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&СчетаПоддержкиПБУ18), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СчетаПоддержкиПБУ18", СчетаПоддержкиПБУ18);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПрименениеПБУ18СчетаРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОборотПоДебету", "Оборот по дебету");
		СтруктураЗаголовков.Вставить("ОборотПоКредиту", "Оборот по кредиту");
		ИсходящиеДанные.Вставить("ПрименениеПБУ18СчетаСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНетНУприУСН(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика организации";
		Возврат;
	КонецЕсли;
	
    ОрганизацияПрименяетУСН = УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
	Если НЕ ОрганизацияПрименяетУСН Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Организация не применяет упрощенную систему налогообложения";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.СуммаНУОборотДт КАК ОборотНУПоДебету,
	|	ХозрасчетныйОбороты.СуммаНУОборотКт КАК ОборотНУПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , , , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НетНУприУСНРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СчетУчета", "Счет учета");
		СтруктураЗаголовков.Вставить("ОборотНУПоДебету", "Оборот НУ по дебету");
		СтруктураЗаголовков.Вставить("ОборотНУПоКредиту", "Оборот НУ по кредиту");
		ИсходящиеДанные.Вставить("НетНУприУСНСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНетЕНВД(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика организации";
		Возврат;
	КонецЕсли;
	
    ОрганизацияЯвляетсяПлательщикомЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	Если ОрганизацияЯвляетсяПлательщикомЕНВД Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Организация является плательщиком ЕНВД";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК Счет,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК ОборотПоДебету,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК ОборотПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				СчетаДоходовИРасходовЕНВД.Счет
	|			ИЗ
	|				РегистрСведений.СчетаДоходовИРасходовЕНВД КАК СчетаДоходовИРасходовЕНВД),
	|		,
	|		Организация = &Организация,
	|		,
	|		) КАК ХозрасчетныйОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОбороты.Счет.Порядок";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НетЕНВДРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОборотПоДебету", "Оборот по дебету");
		СтруктураЗаголовков.Вставить("ОборотПоКредиту", "Оборот по кредиту");
		ИсходящиеДанные.Вставить("НетЕНВДСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНаличиеСложногоНДС(СтрокаПравила)
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	НетУчетнойПолитики = УчетнаяПолитика.Количество() = 0;
	Если НетУчетнойПолитики Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Ложь;
		СтрокаПравила.КомментарийРезультата = "Проверка не может быть проведена, так как неопределена учетная политика организации";
		Возврат;
	КонецЕсли;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
    СложныйУчетНДС = УчетнаяПолитика.СложныйУчетНДС;
	Если СложныйУчетНДС Тогда
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Организация, согласно учетной политике, может осуществлять операции без НДС или с НДС 0%";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|	ХозрасчетныйОбороты.СуммаОборотДт КАК Оборот90ПоДебету,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Оборот90ПоКредиту
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|		&ДатаНач,
	|		&ДатаКон,
	|		,
	|		Счет В ИЕРАРХИИ (&Счет90_01_1),
	|		&ВидСубконтоСтавкиНДС,
	|		Организация = &Организация
	|		    И Субконто1 В (&СтавкиСложногоНДС),
	|		,
	|		) КАК ХозрасчетныйОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ЕНВД"",
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0),
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет90_01_2), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0) <> 0
	|		ИЛИ ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	СтавкиСложногоНДС = Новый Массив;
	СтавкиСложногоНДС.Добавить(Перечисления.СтавкиНДС.БезНДС);
	СтавкиСложногоНДС.Добавить(Перечисления.СтавкиНДС.НДС0);
	Запрос.УстановитьПараметр("СтавкиСложногоНДС", СтавкиСложногоНДС);
	Запрос.УстановитьПараметр("Счет90_01_2", ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НаличиеСложногоНДСРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
		СтруктураЗаголовков.Вставить("Оборот90ПоДебету", "Оборот сч.90 по дебету");
		СтруктураЗаголовков.Вставить("Оборот90ПоКредиту", "Оборот сч. 90 по кредиту");
		ИсходящиеДанные.Вставить("НаличиеСложногоНДССтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

// Касса

Процедура ПроверитьПравилоНепроведенныеПКО_РКО(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер,
	|	ПриходныйКассовыйОрдер.ВидОперации,
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	ПриходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка,
	|	РасходныйКассовыйОрдер.Дата,
	|	РасходныйКассовыйОрдер.Номер,
	|	РасходныйКассовыйОрдер.ВидОперации,
	|	РасходныйКассовыйОрдер.СуммаДокумента,
	|	РасходныйКассовыйОрдер.Ответственный
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.Проведен = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ВидОперации", "Вид операции");
		СтруктураЗаголовков.Вставить("СуммаДокумента", "Сумма документа");
		ИсходящиеДанные.Вставить("НепроведенныеПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоМинусыПоКассе(СтрокаПравила)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, ДвиженияИГраницыПериода, Счет В ИЕРАРХИИ (&СчетКассы), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт < 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Хозрасчетный.Касса);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("МинусыПоКассеРезультатЗапроса", Результат);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЛимитКассы(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ПОМЕСТИТЬ СчетаКасса
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Касса))
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументы)
	|	И Хозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДенежныеДокументыВал)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛимитыОстаткаКассы.Период,
	|	ЛимитыОстаткаКассы.Лимит
	|ПОМЕСТИТЬ ЛимитыОстаткаКассы
	|ИЗ
	|	РегистрСведений.ЛимитОстаткаКассыОрганизаций КАК ЛимитыОстаткаКассы
	|ГДЕ
	|	ЛимитыОстаткаКассы.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток
	|ПОМЕСТИТЬ ОстаткиПоКассе
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			День,
	|			ДвиженияИГраницыПериода,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКасса.Ссылка
	|				ИЗ
	|					СчетаКасса КАК СчетаКасса),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКассе.ПериодДень,
	|	МАКСИМУМ(ЛимитыОстаткаКассы.Период) КАК Период
	|ПОМЕСТИТЬ ПериодыЛимитов
	|ИЗ
	|	ОстаткиПоКассе КАК ОстаткиПоКассе
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛимитыОстаткаКассы КАК ЛимитыОстаткаКассы
	|		ПО ОстаткиПоКассе.ПериодДень >= ЛимитыОстаткаКассы.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиПоКассе.ПериодДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ЛимитыОстаткаКассы.Лимит, 0) КАК Лимит,
	|	ПериодыЛимитов.ПериодДень
	|ПОМЕСТИТЬ Лимиты
	|ИЗ
	|	ПериодыЛимитов КАК ПериодыЛимитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЛимитыОстаткаКассы КАК ЛимитыОстаткаКассы
	|		ПО ПериодыЛимитов.Период = ЛимитыОстаткаКассы.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиПоКассе.ПериодДень,
	|	ОстаткиПоКассе.Остаток,
	|	Лимиты.Лимит,
	|	ОстаткиПоКассе.Остаток - Лимиты.Лимит КАК Превышение
	|ИЗ
	|	ОстаткиПоКассе КАК ОстаткиПоКассе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Лимиты КАК Лимиты
	|		ПО ОстаткиПоКассе.ПериодДень = Лимиты.ПериодДень
	|			И ОстаткиПоКассе.Остаток > Лимиты.Лимит";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЛимитКассыРезультатЗапроса", Результат);
		СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаОшибка;
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Остаток", "Остаток в кассе");
		СтруктураЗаголовков.Вставить("Лимит", "Лимит остатка кассы");
		ИсходящиеДанные.Вставить("ЛимитКассыСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураФорматаПолей = Новый Структура;
		СтруктураФорматаПолей.Вставить("Лимит", "ЧДЦ=2; ЧН='не задан'");
		СтруктураФорматаПолей.Вставить("Превышение", "ЧДЦ=2");
		ИсходящиеДанные.Вставить("ЛимитКассыСтруктураФорматаПолей", СтруктураФорматаПолей);
	Иначе
		СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНетОшибок;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЛимитРасчетовСКонтрагентами(СтрокаПравила)
	
	// До 21.07.07 лимит кассы составлял 60000 руб. и распространялся на расчеты только между юр.лицами.
	// После 21.07.07 лимит кассы составляет 100000 руб. и распространяется как на юр., так и на физ.лиц.
	
	ОрганизацияЯвляетсяФизЛицом = Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
	Если КонецДатыКон < '20070721' И ОрганизацияЯвляетсяФизЛицом Тогда
	
		СтрокаПравила.ОбнаруженыОшибки  = Ложь;
		СтрокаПравила.ПроверкаВыполнена = Истина;
		СтрокаПравила.КомментарийРезультата = "Проверяемая организация является физическим лицом, поэтому лимит расчетов "
		                                    + " между юридическими лицами на нее не распространяется";
		Возврат;
	
	КонецЕсли;

	Запрос = Новый Запрос;
	
	Если КонецДатыКон < '20070721' Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК Выдано,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК Получено
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&ДатаНач,
		|		&ДатаКон,
		|		,
		|		,
		|		&ВидыСубконтоКонтрагентыДоговоры,
		|		&Организация = Организация
		|			И Субконто1.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо),
		|		КорСчет В ИЕРАРХИИ (&СчетКассы),
		|		) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.СуммаОборотДт > &Лимит
		|	ИЛИ ХозрасчетныйОбороты.СуммаОборотКт > &Лимит
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Договор
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	ИначеЕсли ДатаНач >= '20070721' Тогда
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК Выдано,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК Получено
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&ДатаНач,
		|		&ДатаКон,
		|		,
		|		,
		|		&ВидыСубконтоКонтрагентыДоговоры,
		|		&Организация = Организация,
		|		КорСчет В ИЕРАРХИИ (&СчетКассы),
		|		) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	ХозрасчетныйОбороты.СуммаОборотДт > &Лимит
		|	ИЛИ ХозрасчетныйОбороты.СуммаОборотКт > &Лимит
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Договор
		|АВТОУПОРЯДОЧИВАНИЕ";

	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщиеОбороты.Контрагент,
		|	ОбщиеОбороты.Договор,
		|	ОбщиеОбороты.Выдано,
		|	ОбщиеОбороты.ВыданоДо21072007,
		|	ОбщиеОбороты.Получено,
		|	ОбщиеОбороты.ПолученоДо21072007
		|ИЗ
		|
		|(ВЫБРАТЬ
		|	ЗапросПоОборотам.Контрагент,
		|	ЗапросПоОборотам.Договор,
		|	ЗапросПоОборотам.РасчетыМеждуЮрЛицами,
		|	СУММА(ЗапросПоОборотам.ВыданоДо21072007 + ЗапросПоОборотам.ВыданоПосле21072007) КАК Выдано,
		|	СУММА(ЗапросПоОборотам.ПолученоДо21072007 + ЗапросПоОборотам.ПолученоПосле21072007) КАК Получено,
		|	СУММА(ЗапросПоОборотам.ВыданоДо21072007) КАК ВыданоДо21072007,
		|	СУММА(ЗапросПоОборотам.ПолученоДо21072007) КАК ПолученоДо21072007,
		|	СУММА(ЗапросПоОборотам.ВыданоПосле21072007) КАК ВыданоПосле21072007,
		|	СУММА(ЗапросПоОборотам.ПолученоПосле21072007) КАК ПолученоПосле21072007
		|ИЗ
		|
		|(ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ИСТИНА КАК РасчетыМеждуЮрЛицами,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК ВыданоДо21072007,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ПолученоДо21072007,
		|	0 КАК ВыданоПосле21072007,
		|	0 КАК ПолученоПосле21072007
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&ДатаНач,
		|		ДАТАВРЕМЯ(2007, 7, 20, 23, 59, 59),
		|		,
		|		,
		|		&ВидыСубконтоКонтрагентыДоговоры,
		|		&Организация = Организация
		|			И Организация.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			И Субконто1.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо),
		|		КорСчет В ИЕРАРХИИ (&СчетКассы),
		|		) КАК ХозрасчетныйОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ИСТИНА КАК РасчетыМеждуЮрЛицами,
		|	0 КАК ВыданоДо21072007,
		|	0 КАК ПолученоДо21072007,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК ВыданоПосле21072007,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ПолученоПосле21072007
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&ДатаНачПосле,
		|		&ДатаКон,
		|		,
		|		,
		|		&ВидыСубконтоКонтрагентыДоговоры,
		|		&Организация = Организация
		|			И Организация.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|			И Субконто1.ЮрФизЛицо <> ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо),
		|		КорСчет В ИЕРАРХИИ (&СчетКассы),
		|		) КАК ХозрасчетныйОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ЛОЖЬ КАК РасчетыМеждуЮрЛицами,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК ВыданоДо21072007,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ПолученоДо21072007,
		|	0 КАК ВыданоПосле21072007,
		|	0 КАК ПолученоПосле21072007
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&ДатаНач,
		|		ДАТАВРЕМЯ(2007, 7, 20, 23, 59, 59),
		|		,
		|		,
		|		&ВидыСубконтоКонтрагентыДоговоры,
		|		&Организация = Организация
		|			И (Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|				ИЛИ Субконто1.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)),
		|		КорСчет В ИЕРАРХИИ (&СчетКассы),
		|		) КАК ХозрасчетныйОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|	ХозрасчетныйОбороты.Субконто2 КАК Договор,
		|	ЛОЖЬ КАК РасчетыМеждуЮрЛицами,
		|	0 КАК ВыданоДо21072007,
		|	0 КАК ПолученоДо21072007,
		|	ХозрасчетныйОбороты.СуммаОборотДт КАК ВыданоПосле21072007,
		|	ХозрасчетныйОбороты.СуммаОборотКт КАК ПолученоПосле21072007
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|		&ДатаНачПосле,
		|		&ДатаКон,
		|		,
		|		,
		|		&ВидыСубконтоКонтрагентыДоговоры,
		|		&Организация = Организация
		|			И (Организация.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)
		|				ИЛИ Субконто1.ЮрФизЛицо = ЗНАЧЕНИЕ(Перечисление.ЮрФизЛицо.ФизЛицо)),
		|		КорСчет В ИЕРАРХИИ (&СчетКассы),
		|		) КАК ХозрасчетныйОбороты) КАК ЗапросПоОборотам
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗапросПоОборотам.Контрагент,
		|	ЗапросПоОборотам.Договор,
		|	ЗапросПоОборотам.РасчетыМеждуЮрЛицами) КАК ОбщиеОбороты
		|
		|ГДЕ
		|	(ОбщиеОбороты.Выдано > &Лимит 
		|		И (ОбщиеОбороты.РасчетыМеждуЮрЛицами
		|			ИЛИ ОбщиеОбороты.ВыданоПосле21072007 > 0))
		|	ИЛИ (ОбщиеОбороты.Получено > &Лимит 
		|		И (ОбщиеОбороты.РасчетыМеждуЮрЛицами
		|			ИЛИ ОбщиеОбороты.ПолученоПосле21072007 > 0))
		|	ИЛИ (ОбщиеОбороты.ВыданоДо21072007 > 60000
		|		И ОбщиеОбороты.РасчетыМеждуЮрЛицами)
		|	ИЛИ (ОбщиеОбороты.ПолученоДо21072007 > 60000
		|		И ОбщиеОбороты.РасчетыМеждуЮрЛицами)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Контрагент,
		|	Договор
		|АВТОУПОРЯДОЧИВАНИЕ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаНачПосле", Макс(ДатаНач, '20070721'));
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	ВидыСубконтоКонтрагентыДоговоры = Новый Массив;
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКонтрагентыДоговоры.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	Запрос.УстановитьПараметр("ВидыСубконтоКонтрагентыДоговоры", ВидыСубконтоКонтрагентыДоговоры);
	Запрос.УстановитьПараметр("СчетКассы", ПланыСчетов.Хозрасчетный.Касса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Если КонецДатыКон > '20070721' Тогда
		Запрос.УстановитьПараметр("Лимит", 100000);
	Иначе
		Запрос.УстановитьПараметр("Лимит", 60000);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ТаблицаРезультата = Результат.Выгрузить();
		ИсходящиеДанные.Вставить("ЛимитРасчетовСКонтрагентамиТаблицаЗначений", ТаблицаРезультата);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ВыданоДо21072007",   "в т.ч. выдано до 21.07.2007");
		СтруктураЗаголовков.Вставить("ПолученоДо21072007", "в т.ч. получено до 21.07.2007");
		ИсходящиеДанные.Вставить("ЛимитРасчетовСКонтрагентамиСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		СтруктураРасшифровки.Вставить("Договор", "Договор");
		ИсходящиеДанные.Вставить("ЛимитРасчетовСКонтрагентамиСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНумерацияПКО_РКО(СтрокаПравила)
	
	ТаблицаНарушений = Новый ТаблицаЗначений;
	ТаблицаНарушений.Колонки.Добавить("НомерДокумента");
	ТаблицаНарушений.Колонки.Добавить("ДатаДокумента");
	ТаблицаНарушений.Колонки.Добавить("Документ");
	ТаблицаНарушений.Колонки.Добавить("НомерСледующего");
	ТаблицаНарушений.Колонки.Добавить("ДатаСледующего");
	ТаблицаНарушений.Колонки.Добавить("СледДокумент");
	
	// Сначала проверяем последовательность нумерации приходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.Ссылка КАК Документ,
	|	ПриходныйКассовыйОрдер.Дата КАК Дата,
	|	ПриходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|ГДЕ
	|	ПриходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПриходныйКассовыйОрдер.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	// Затем проверяем последовательность нумерации расходных кассовых ордеров
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Документ,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.Номер
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ПометкаУдаления = ЛОЖЬ
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РасходныйКассовыйОрдер.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Добавить("НомерЧислом");
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		СтрокаТаблицы.НомерЧислом = ПолучитьНомерЧислом(СтрокаТаблицы.Номер);
	КонецЦикла;
	ТаблицаРезультата.Сортировать("НомерЧислом ВОЗР, Дата ВОЗР");
	
	Для ИндексСтроки = 1 По ТаблицаРезультата.Количество() - 1 Цикл
		
		ДатаТекущейСтроки    = ТаблицаРезультата[ИндексСтроки].Дата;
		ДатаПредыдущейСтроки = ТаблицаРезультата[ИндексСтроки - 1].Дата;
		НарушенаНумерация    = ДатаТекущейСтроки < ДатаПредыдущейСтроки;
		
		Если НарушенаНумерация Тогда
			
			СтрокаНарушения = ТаблицаНарушений.Добавить();
			СтрокаНарушения.НомерДокумента  = ТаблицаРезультата[ИндексСтроки].Номер;
			СтрокаНарушения.ДатаДокумента   = ТаблицаРезультата[ИндексСтроки].Дата;
			СтрокаНарушения.Документ        = ТаблицаРезультата[ИндексСтроки].Документ;
			СтрокаНарушения.НомерСледующего = ТаблицаРезультата[ИндексСтроки - 1].Номер;
			СтрокаНарушения.ДатаСледующего  = ТаблицаРезультата[ИндексСтроки - 1].Дата;
			СтрокаНарушения.СледДокумент    = ТаблицаРезультата[ИндексСтроки - 1].Документ;
		
		КонецЕсли; 
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаНарушений.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОТаблицаЗначений", ТаблицаНарушений);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НомерДокумента" , "Номер документа");
		СтруктураЗаголовков.Вставить("ДатаДокумента"  , "Дата документа");
		СтруктураЗаголовков.Вставить("НомерСледующего", "Номер след. документа");
		СтруктураЗаголовков.Вставить("ДатаСледующего" , "Дата след. документа");
		СтруктураЗаголовков.Вставить("СледДокумент"   , "Следующий документ");
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("НомерДокумента" , 25);
		СтруктураШириныКолонок.Вставить("НомерСледующего", 25);
		СтруктураШириныКолонок.Вставить("ДатаДокумента"  , 20);
		СтруктураШириныКолонок.Вставить("ДатаСледующего" , 20);
		СтруктураШириныКолонок.Вставить("СледДокумент"   , 40);
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("СледДокумент", "СледДокумент");
		ИсходящиеДанные.Вставить("НумерацияПКО_РКОСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВыдачаПодотчетПослеОтчета(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстаткиИОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Сотрудник,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК Выдано,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК Остаток,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт - ХозрасчетныйОстаткиИОбороты.СуммаОборотДт КАК ОстатокПредыдущихАвансов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День, Движения, Счет В ИЕРАРХИИ (&Счет71), &ВидСубконтоСотрудники, Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт > 0
	|		И ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт > ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Сотрудник
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Запрос.УстановитьПараметр("ВидСубконтоСотрудники", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВыдачаПодотчетПослеОтчетаРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПредыдущихАвансов", "Остаток предыдущих авансов");
		ИсходящиеДанные.Вставить("ВыдачаПодотчетПослеОтчетаСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Сотрудник", "Сотрудник");
		ИсходящиеДанные.Вставить("ВыдачаПодотчетПослеОтчетаСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоДвижениеВнутри71Счета(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйДвиженияССубконто.Период КАК Период,
	|	ХозрасчетныйДвиженияССубконто.Регистратор КАК Документ,
	|	ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК Кому,
	|	ХозрасчетныйДвиженияССубконто.СубконтоКт1 КАК ОтКого,
	|	ХозрасчетныйДвиженияССубконто.Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|		&ДатаНач,
	|		&ДатаКон,
	|		Активность = ИСТИНА
	|		    И Организация = &Организация
	|		    И СчетДт В ИЕРАРХИИ (&Счет71)
	|		    И СчетКт В ИЕРАРХИИ (&Счет71)) КАК ХозрасчетныйДвиженияССубконто
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет71", ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ДвижениеВнутри71СчетаРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОтКого", "От кого");
		ИсходящиеДанные.Вставить("ДвижениеВнутри71СчетаСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ОтКого", "ОтКого");
		СтруктураРасшифровки.Вставить("Кому", "Кому");
		ИсходящиеДанные.Вставить("ДвижениеВнутри71СчетаСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПодотчетТолькоРаботникам(СтрокаПравила)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.Сотрудник.Физлицо
	|ПОМЕСТИТЬ РаботникиОрганизаций
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	(РаботникиОрганизаций.Сотрудник.ВидЗанятости ЕСТЬ NULL 
	|			ИЛИ РаботникиОрганизаций.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|	И (&Организация = РаботникиОрганизаций.Организация
	|			ИЛИ &Организация = РаботникиОрганизаций.ОбособленноеПодразделение)
	|
	|СГРУППИРОВАТЬ ПО
	|	РаботникиОрганизаций.Сотрудник.Физлицо,
	|	РаботникиОрганизаций.Период
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					ИЛИ РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПустаяСсылка)
	|				ТОГДА 1
	|			КОГДА РаботникиОрганизаций.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.ПриемНаРаботу)
	|				ТОГДА -1
	|			ИНАЧЕ 0
	|		КОНЕЦ) = -1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВложенныйЗапрос.Период КАК Дата,
	|	ВложенныйЗапрос.Регистратор КАК Документ,
	|	ВложенныйЗапрос.ФизЛицо,
	|	ВложенныйЗапрос.Сумма,
	|	ВложенныйЗапрос.ПериодПоследнейЗаписи
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйДвиженияССубконто.Период КАК Период,
	|		ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1 КАК ФизЛицо,
	|		ХозрасчетныйДвиженияССубконто.Сумма КАК Сумма,
	|		МАКСИМУМ(ЕСТЬNULL(ПоследниеЗаписиПоРаботникам.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ПериодПоследнейЗаписи
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Активность = ИСТИНА
	|					И Организация = &Организация
	|					И СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами_)),
	|				,
	|				) КАК ХозрасчетныйДвиженияССубконто
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПоследниеЗаписиПоРаботникам
	|			ПО (ХозрасчетныйДвиженияССубконто.Организация = ПоследниеЗаписиПоРаботникам.Организация
	|					ИЛИ ХозрасчетныйДвиженияССубконто.Организация = ПоследниеЗаписиПоРаботникам.ОбособленноеПодразделение)
	|				И ХозрасчетныйДвиженияССубконто.СубконтоДт1 = ПоследниеЗаписиПоРаботникам.Сотрудник.Физлицо
	|				И ХозрасчетныйДвиженияССубконто.Период >= ПоследниеЗаписиПоРаботникам.Период
	|	ГДЕ
	|		(ПоследниеЗаписиПоРаботникам.Сотрудник.ВидЗанятости ЕСТЬ NULL 
	|				ИЛИ ПоследниеЗаписиПоРаботникам.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ХозрасчетныйДвиженияССубконто.Период,
	|		ХозрасчетныйДвиженияССубконто.Регистратор,
	|		ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	|		ХозрасчетныйДвиженияССубконто.Сумма) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РаботникиОрганизаций КАК РаботникиОрганизаций
	|		ПО ВложенныйЗапрос.ФизЛицо = РаботникиОрганизаций.СотрудникФизлицо
	|			И ВложенныйЗапрос.ПериодПоследнейЗаписи = РаботникиОрганизаций.Период
	|ГДЕ
	|	РаботникиОрганизаций.СотрудникФизлицо ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);

	Результат = Запрос.Выполнить();

	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПодотчетТолькоРаботникамРезультатЗапроса", Результат);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ФизЛицо", "Физ.лицо");
		ИсходящиеДанные.Вставить("ПодотчетТолькоРаботникамСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("ФизЛицо", "ФизЛицо");
		ИсходящиеДанные.Вставить("ПодотчетТолькоРаботникамСтруктураРасшифровки", СтруктураРасшифровки);
	КонецЕсли; 
	
КонецПроцедуры

// Книга продаж

Процедура ПроверитьПравилоДатаАктуальностиНДСПродажи(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОшибокДатАктуальности = ПолучитьДанныеТаблицаОшибокДатАктуальности();
	ТаблицаОшибокДатАктуальности.Индексы.Добавить("РазделУчета");
	
	СтрокаОшибкиНДС                   = ТаблицаОшибокДатАктуальности.Найти(Перечисления.РазделыУчета.НДС, "РазделУчета");
	ЕстьОшибкаНДС                     = СтрокаОшибкиНДС <> Неопределено;
	СтрокаОшибкиРасчетыСКонтрагентами = ТаблицаОшибокДатАктуальности.Найти(Перечисления.РазделыУчета.РасчетыСКонтрагентами, "РазделУчета");
	ЕстьОшибкаРасчетыСКонтрагентами   = СтрокаОшибкиРасчетыСКонтрагентами <> Неопределено;
	СтрокаОшибкиОценкаМПЗ             = ТаблицаОшибокДатАктуальности.Найти(Перечисления.РазделыУчета.ОценкаМПЗ, "РазделУчета");
	ЕстьОшибкаОценкаМПЗ               = СтрокаОшибкиОценкаМПЗ <> Неопределено;
	
	СтрокаПравила.ОбнаруженыОшибки  = ЕстьОшибкаНДС ИЛИ ЕстьОшибкаРасчетыСКонтрагентами ИЛИ ЕстьОшибкаОценкаМПЗ;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("РазделУчета");
	ТаблицаОшибок.Колонки.Добавить("ДатаАктуальности", Новый ОписаниеТипов("Дата"));
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		
		Если ЕстьОшибкаНДС Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.РазделУчета = "НДС";
			СтрокаОшибки.ДатаАктуальности = СтрокаОшибкиНДС.ДатаАктуальности;
		КонецЕсли;
		Если ЕстьОшибкаРасчетыСКонтрагентами Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.РазделУчета = "Расчеты с контрагентами";
			СтрокаОшибки.ДатаАктуальности = СтрокаОшибкиРасчетыСКонтрагентами.ДатаАктуальности;
		КонецЕсли;
		Если ЕстьОшибкаОценкаМПЗ Тогда
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			СтрокаОшибки.РазделУчета = "Оценка МПЗ при выбытии";
			СтрокаОшибки.ДатаАктуальности = СтрокаОшибкиОценкаМПЗ.ДатаАктуальности;
		КонецЕсли;
		
	КонецЕсли; 
	
	ИсходящиеДанные.Вставить("ДатаАктуальностиНДСПродажиТаблицаЗначений", ТаблицаОшибок);
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("РазделУчета", "Раздел учета");
	СтруктураЗаголовков.Вставить("ДатаАктуальности", "Дата актуальности");
	ИсходящиеДанные.Вставить("ДатаАктуальностиНДСПродажиСтруктураЗаголовков", СтруктураЗаголовков);
	
КонецПроцедуры

Процедура ПроверитьПравилоПолнотаСФПоРеализации(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, ДатаНач, УчетнаяПолитика);
	
	Если УпрощенныйУчетНДС Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыРеализации.Дата КАК Дата,
		|	ДокументыРеализации.Ссылка КАК Документ,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ТОГДА ""Нет счета-фактуры""
		|		ИНАЧЕ ""Счет-фактура не проведен""
		|	КОНЕЦ КАК Ошибка,
		|	0 КАК Строка
		|ИЗ
		|	(ВЫБРАТЬ
		|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
		|		РеализацияТоваровУслуг.Дата КАК Дата
		|	ИЗ
		|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|	ГДЕ
		|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|		И РеализацияТоваровУслуг.Проведен = ИСТИНА
		|		И РеализацияТоваровУслуг.Организация = &Организация
		|		И РеализацияТоваровУслуг.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		АктОбОказанииПроизводственныхУслуг.Ссылка,
		|		АктОбОказанииПроизводственныхУслуг.Дата
		|	ИЗ
		|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
		|	ГДЕ
		|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И АктОбОказанииПроизводственныхУслуг.Проведен = ИСТИНА
		|		И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
		|		И АктОбОказанииПроизводственныхУслуг.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РеализацияУслугПоПереработке.Ссылка,
		|		РеализацияУслугПоПереработке.Дата
		|	ИЗ
		|		Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
		|	ГДЕ
		|		РеализацияУслугПоПереработке.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И РеализацияУслугПоПереработке.Проведен = ИСТИНА
		|		И РеализацияУслугПоПереработке.Организация = &Организация
		|		И РеализацияУслугПоПереработке.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПередачаОС.Ссылка,
		|		ПередачаОС.Дата
		|	ИЗ
		|		Документ.ПередачаОС КАК ПередачаОС
		|	ГДЕ
		|		ПередачаОС.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПередачаОС.Проведен = ИСТИНА
		|		И ПередачаОС.Организация = &Организация
		|		И ПередачаОС.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПередачаНМА.Ссылка,
		|		ПередачаНМА.Дата
		|	ИЗ
		|		Документ.ПередачаНМА КАК ПередачаНМА
		|	ГДЕ
		|		ПередачаНМА.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ПередачаНМА.Проведен = ИСТИНА
		|		И ПередачаНМА.Организация = &Организация
		|		И ПередачаНМА.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтчетКомиссионераОПродажах.Ссылка,
		|		ОтчетКомиссионераОПродажах.Дата
		|	ИЗ
		|		Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
		|	ГДЕ
		|		ОтчетКомиссионераОПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ОтчетКомиссионераОПродажах.Проведен = ИСТИНА
		|		И ОтчетКомиссионераОПродажах.Организация = &Организация
		|		И ОтчетКомиссионераОПродажах.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтчетКомитентуОПродажах.Ссылка,
		|		ОтчетКомитентуОПродажах.Дата
		|	ИЗ
		|		Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
		|	ГДЕ
		|		ОтчетКомитентуОПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ОтчетКомитентуОПродажах.Проведен = ИСТИНА
		|		И ОтчетКомитентуОПродажах.Организация = &Организация
		|		И ОтчетКомитентуОПродажах.УчитыватьНДС = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НачислениеНДСпоСМРхозспособом.Ссылка,
		|		НачислениеНДСпоСМРхозспособом.Дата
		|	ИЗ
		|		Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
		|	ГДЕ
		|		НачислениеНДСпоСМРхозспособом.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И НачислениеНДСпоСМРхозспособом.Проведен = ИСТИНА
		|		И НачислениеНДСпоСМРхозспособом.Организация = &Организация
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ОтражениеНачисленияНДС.Ссылка,
		|		ОтражениеНачисленияНДС.Дата
		|	ИЗ
		|		Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
		|	ГДЕ
		|		ОтражениеНачисленияНДС.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|		И ОтражениеНачисленияНДС.Проведен = ИСТИНА
		|		И ОтражениеНачисленияНДС.Организация = &Организация) КАК ДокументыРеализации
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО ДокументыРеализации.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	(СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка.Проведен = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОказаниеУслугКонтрагенты.Ссылка.Дата,
		|	ОказаниеУслугКонтрагенты.Ссылка,
		|	ВЫБОР
		|		КОГДА ОказаниеУслугКонтрагенты.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ТОГДА ""Нет счета-фактуры""
		|		ИНАЧЕ ""Счет-фактура не проведен""
		|	КОНЕЦ,
		|	ОказаниеУслугКонтрагенты.НомерСтроки
		|ИЗ
		|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
		|ГДЕ
		|	ОказаниеУслугКонтрагенты.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОказаниеУслугКонтрагенты.Ссылка.Проведен = ИСТИНА
		|	И ОказаниеУслугКонтрагенты.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОказаниеУслугКонтрагенты.Ссылка.Организация = &Организация
		|	И ОказаниеУслугКонтрагенты.Сумма > 0
		|	И (ОказаниеУслугКонтрагенты.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ИЛИ ОказаниеУслугКонтрагенты.СчетФактура.Проведен = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ,
		|	Строка
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			ИсходящиеДанные.Вставить("ПолнотаСФПоРеализацииРезультатЗапроса", Результат);
		КонецЕсли; 
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НДСНачисленный.СчетФактура.Дата КАК Дата,
		|	НДСНачисленный.СчетФактура КАК Документ,
		|	ВЫБОР
		|		КОГДА СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ТОГДА ""Нет счета-фактуры""
		|		ИНАЧЕ ""Счет-фактура не проведен""
		|	КОНЕЦ КАК Ошибка,
		|	0 КАК Строка
		|ИЗ
		|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
		|		ПО НДСНачисленный.СчетФактура = СчетФактураВыданныйДокументыОснования.ДокументОснование
		|ГДЕ
		|	НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И НДСНачисленный.Активность = ИСТИНА
		|	И НДСНачисленный.ВидДвижения = &ВидДвиженияПриход
		|	И НДСНачисленный.Организация = &Организация
		|	И (НЕ НДСНачисленный.ВидНачисления В (&НепроверяемыеВидыНачисления))
		|	И (НЕ НДСНачисленный.ВидЦенности В (&НепроверяемыеВидыЦенностей))
		|	И (НЕ НДСНачисленный.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах)
		|	И (НЕ НДСНачисленный.СчетФактура ССЫЛКА Документ.СчетФактураВыданный)
		|	И (СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ NULL 
		|			ИЛИ СчетФактураВыданныйДокументыОснования.Ссылка.Проведен = ЛОЖЬ)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОказаниеУслугКонтрагенты.Ссылка.Дата,
		|	ОказаниеУслугКонтрагенты.Ссылка,
		|	ВЫБОР
		|		КОГДА ОказаниеУслугКонтрагенты.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ТОГДА ""Нет счета-фактуры""
		|		ИНАЧЕ ""Счет-фактура не проведен""
		|	КОНЕЦ,
		|	ОказаниеУслугКонтрагенты.НомерСтроки
		|ИЗ
		|	Документ.ОказаниеУслуг.Контрагенты КАК ОказаниеУслугКонтрагенты
		|ГДЕ
		|	ОказаниеУслугКонтрагенты.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ОказаниеУслугКонтрагенты.Ссылка.Проведен = ИСТИНА
		|	И ОказаниеУслугКонтрагенты.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ОказаниеУслугКонтрагенты.Ссылка.Организация = &Организация
		|	И ОказаниеУслугКонтрагенты.Сумма > 0
		|	И (ОказаниеУслугКонтрагенты.СчетФактура = ЗНАЧЕНИЕ(Документ.СчетФактураВыданный.ПустаяСсылка)
		|			ИЛИ ОказаниеУслугКонтрагенты.СчетФактура.Проведен = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Документ,
		|	Строка";
		
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);
		
		НепроверяемыеВидыНачисления = Новый Массив;
		НепроверяемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСсАвансов);
		НепроверяемыеВидыНачисления.Добавить(Перечисления.НДСВидНачисления.НДСВосстановлен);
		Запрос.УстановитьПараметр("НепроверяемыеВидыНачисления", НепроверяемыеВидыНачисления);
		
		НепроверяемыеВидыЦенностей = Новый Массив;
		НепроверяемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
		НепроверяемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
		НепроверяемыеВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		Запрос.УстановитьПараметр("НепроверяемыеВидыЦенностей", НепроверяемыеВидыЦенностей);
		
		Результат = Запрос.Выполнить();
		
		СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
		СтрокаПравила.ПроверкаВыполнена = Истина;
		
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			ИсходящиеДанные.Вставить("ПолнотаСФПоРеализацииРезультатЗапроса", Результат);
		КонецЕсли; 
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ПроверитьПравилоСвоевременностьСФПоРеализации(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыРеализации.Дата КАК Дата,
	|	ДокументыРеализации.Ссылка КАК Документ,
	|	СчетФактураВыданныйДокументыОснования.Ссылка.Дата КАК ДатаСчетаФактуры,
	|	СчетФактураВыданныйДокументыОснования.Ссылка КАК СчетФактура
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|		РеализацияТоваровУслуг.Дата КАК Дата
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|	ГДЕ
	|		РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|		И РеализацияТоваровУслуг.Организация = &Организация
	|		И РеализацияТоваровУслуг.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		АктОбОказанииПроизводственныхУслуг.Ссылка,
	|		АктОбОказанииПроизводственныхУслуг.Дата
	|	ИЗ
	|		Документ.АктОбОказанииПроизводственныхУслуг КАК АктОбОказанииПроизводственныхУслуг
	|	ГДЕ
	|		АктОбОказанииПроизводственныхУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И АктОбОказанииПроизводственныхУслуг.Проведен = ИСТИНА
	|		И АктОбОказанииПроизводственныхУслуг.Организация = &Организация
	|		И АктОбОказанииПроизводственныхУслуг.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеализацияУслугПоПереработке.Ссылка,
	|		РеализацияУслугПоПереработке.Дата
	|	ИЗ
	|		Документ.РеализацияУслугПоПереработке КАК РеализацияУслугПоПереработке
	|	ГДЕ
	|		РеализацияУслугПоПереработке.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РеализацияУслугПоПереработке.Проведен = ИСТИНА
	|		И РеализацияУслугПоПереработке.Организация = &Организация
	|		И РеализацияУслугПоПереработке.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаОС.Ссылка,
	|		ПередачаОС.Дата
	|	ИЗ
	|		Документ.ПередачаОС КАК ПередачаОС
	|	ГДЕ
	|		ПередачаОС.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПередачаОС.Проведен = ИСТИНА
	|		И ПередачаОС.Организация = &Организация
	|		И ПередачаОС.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПередачаНМА.Ссылка,
	|		ПередачаНМА.Дата
	|	ИЗ
	|		Документ.ПередачаНМА КАК ПередачаНМА
	|	ГДЕ
	|		ПередачаНМА.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ПередачаНМА.Проведен = ИСТИНА
	|		И ПередачаНМА.Организация = &Организация
	|		И ПередачаНМА.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомиссионераОПродажах.Ссылка,
	|		ОтчетКомиссионераОПродажах.Дата
	|	ИЗ
	|		Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|	ГДЕ
	|		ОтчетКомиссионераОПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ОтчетКомиссионераОПродажах.Проведен = ИСТИНА
	|		И ОтчетКомиссионераОПродажах.Организация = &Организация
	|		И ОтчетКомиссионераОПродажах.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтчетКомитентуОПродажах.Ссылка,
	|		ОтчетКомитентуОПродажах.Дата
	|	ИЗ
	|		Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|	ГДЕ
	|		ОтчетКомитентуОПродажах.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ОтчетКомитентуОПродажах.Проведен = ИСТИНА
	|		И ОтчетКомитентуОПродажах.Организация = &Организация
	|		И ОтчетКомитентуОПродажах.УчитыватьНДС = ИСТИНА
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НачислениеНДСпоСМРхозспособом.Ссылка,
	|		НачислениеНДСпоСМРхозспособом.Дата
	|	ИЗ
	|		Документ.НачислениеНДСпоСМРхозспособом КАК НачислениеНДСпоСМРхозспособом
	|	ГДЕ
	|		НачислениеНДСпоСМРхозспособом.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И НачислениеНДСпоСМРхозспособом.Проведен = ИСТИНА
	|		И НачислениеНДСпоСМРхозспособом.Организация = &Организация
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтражениеНачисленияНДС.Ссылка,
	|		ОтражениеНачисленияНДС.Дата
	|	ИЗ
	|		Документ.ОтражениеНачисленияНДС КАК ОтражениеНачисленияНДС
	|	ГДЕ
	|		ОтражениеНачисленияНДС.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И ОтражениеНачисленияНДС.Проведен = ИСТИНА
	|		И ОтражениеНачисленияНДС.Организация = &Организация) КАК ДокументыРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО ДокументыРеализации.Ссылка = СчетФактураВыданныйДокументыОснования.ДокументОснование
	|ГДЕ
	|	СчетФактураВыданныйДокументыОснования.Ссылка ЕСТЬ НЕ NULL 
	|	И РАЗНОСТЬДАТ(ДокументыРеализации.Дата, СчетФактураВыданныйДокументыОснования.Ссылка.Дата, ДЕНЬ) > 5
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("СвоевременностьСФПоРеализацииРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ДатаСчетаФактуры", "Дата счета-фактуры");
		СтруктураЗаголовков.Вставить("СчетФактура", "Счет-фактура");
		ИсходящиеДанные.Вставить("СвоевременностьСФПоРеализацииСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствие90_НДС_БУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитика = ИсходящиеДанные.УчетнаяПолитика;
	
	УчитыватьПоложительныеСуммовыеРазницы = УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	
	ВозможныОтклонения = Истина; // по отрицательным разницам отклонения возможны всегда
	
	Если ВозможныОтклонения Тогда
		
		// Считаем суммовые разницы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2 КАК СтавкаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА &УчитыватьПоложительныеСуммовыеРазницы = ЛОЖЬ
		|					И ХозрасчетныйДвиженияССубконто.Сумма > 0
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПоложительнаяРазница,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.Сумма < 0
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтрицательнаяРазница
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		&ДатаНач,
		|		&ДатаКон,
		|		Активность = ИСТИНА
		|		    И Организация = &Организация
		|		    И СчетКт В ИЕРАРХИИ (&Счет90_01_1)
		|		    И СчетДт = &Счет62_31
		|		    И Регистратор <> СубконтоДт3) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйДвиженияССубконто.СубконтоКт2";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		Запрос.УстановитьПараметр("Счет62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
		Запрос.УстановитьПараметр("УчитыватьПоложительныеСуммовыеРазницы", УчитыватьПоложительныеСуммовыеРазницы);
		
		РезультатПоСуммовымРазницам = Запрос.Выполнить();
		ТаблицаСуммовыхРазниц = РезультатПоСуммовымРазницам.Выгрузить();
		ТаблицаСуммовыхРазниц.Индексы.Добавить("СтавкаНДС");
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотыПоСтавкамНДС.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ОборотыПоСтавкамНДС.СуммаВыручки) КАК СуммаВыручки,
	|	СУММА(ОборотыПоСтавкамНДС.НДСНачисленный) КАК НДСНачисленный
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Субконто1 КАК СтавкаНДС,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Счет90_01_1)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаВыручки,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет В ИЕРАРХИИ (&Счет90_03)
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК НДСНачисленный
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Счет В ИЕРАРХИИ (&Счет90_01_1)
	|			    ИЛИ Счет В ИЕРАРХИИ (&Счет90_03),
	|			&ВидСубконтоСтавкиНДС,
	|			Организация = &Организация,
	|			,
	|			) КАК ХозрасчетныйОбороты) КАК ОборотыПоСтавкамНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоСтавкамНДС.СтавкаНДС
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтавкаНДС
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	Запрос.УстановитьПараметр("Счет90_03", ПланыСчетов.Хозрасчетный.Продажи_НДС);
	Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Вставить(2, "ПоложительнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(3, "ОтрицательнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(4, "НДСРассчитанный", ОписаниеТипаСуммы);
	
	Если ВозможныОтклонения Тогда
		Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			
			РазницыПоТекСтавке = ТаблицаСуммовыхРазниц.Найти(СтрокаТабРезультата.СтавкаНДС, "СтавкаНДС");
			ЕстьРазницыПоТекСтавке = РазницыПоТекСтавке <> Неопределено;
			Если ЕстьРазницыПоТекСтавке Тогда
				СтрокаТабРезультата.ПоложительнаяРазница = РазницыПоТекСтавке.ПоложительнаяРазница;
				СтрокаТабРезультата.ОтрицательнаяРазница = РазницыПоТекСтавке.ОтрицательнаяРазница;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ЗначениеСтавки = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабРезультата.СтавкаНДС);
		БазаДляНДС = СтрокаТабРезультата.СуммаВыручки - СтрокаТабРезультата.ПоложительнаяРазница 
		           + СтрокаТабРезультата.ОтрицательнаяРазница;
		НДСРассчитанный = Окр(БазаДляНДС / (100 + ЗначениеСтавки) * ЗначениеСтавки, 2);
		СтрокаТабРезультата.НДСРассчитанный = НДСРассчитанный;
		ОбнаруженыОшибки = (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) > 1
		               ИЛИ (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) < -1;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	// Таблица требуется для других правил - вставляем ее в исходящие данные при любом результате проверки
	ИсходящиеДанные.Вставить("Соответствие90_НДС_БУТаблицаЗначений", ТаблицаРезультата);
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
	СтруктураЗаголовков.Вставить("СуммаВыручки", "Сумма выручки");
	СтруктураЗаголовков.Вставить("НДСНачисленный", "НДС начисленный");
	СтруктураЗаголовков.Вставить("ПоложительнаяРазница", "Положительная разница");
	СтруктураЗаголовков.Вставить("ОтрицательнаяРазница", "Отрицательная разница");
	СтруктураЗаголовков.Вставить("НДСРассчитанный", "НДС рассчитанный");
	ИсходящиеДанные.Вставить("Соответствие90_НДС_БУСтруктураЗаголовков", СтруктураЗаголовков);
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствие91_НДС_БУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитика = ИсходящиеДанные.УчетнаяПолитика;
	
	УчитыватьПоложительныеСуммовыеРазницы = УчетнаяПолитика.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС;
	
	ВозможныОтклонения = Истина; // по отрицательным разницам отклонения возможны всегда
    НДСПоОтгрузкеБезПереходаСобственностиНедвижимости = УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости;
	
	ВидыДоходовОблагаемыеНДС = Новый Массив;
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСБезвозмезднымПолучениемИмущества);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСоСдачейИмуществаВАренду);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейНематериальныхАктивов);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейПрочегоИмущества);
	ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ШтрафыПениНеустойкиКПолучениюУплате);
    ВидыДоходовОблагаемыеНДС.Добавить(Перечисления.ВидыПрочихДоходовИРасходов.ДоходыРасходыСвязанныеСРеализациейОсновныхСредств);
   
	
	Если ВозможныОтклонения Тогда
		
		// Считаем суммовые разницы
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ОсновнаяСтавкаНДС КАК СтавкаНДС,
		|	СУММА(ВЫБОР
		|			КОГДА &УчитыватьПоложительныеСуммовыеРазницы = ЛОЖЬ
		|					И ХозрасчетныйДвиженияССубконто.Сумма > 0
		|				ТОГДА ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ПоложительнаяРазница,
		|	СУММА(ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.Сумма < 0
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОтрицательнаяРазница
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|		&ДатаНач,
		|		&ДатаКон,
		|		Активность = ИСТИНА
		|		    И Организация = &Организация
		|		    И СчетКт В ИЕРАРХИИ (&Счет91_01)
		|		    И СубконтоКт1.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС)
		|		    И СубконтоКт1.ВидДеятельностиДляНалоговогоУчетаЗатрат <> &РасходыОтносятсяКЕНВД
		|		    И СчетДт = &Счет62_31
		|		    И Регистратор <> СубконтоДт3) КАК ХозрасчетныйДвиженияССубконто
		|
		|СГРУППИРОВАТЬ ПО
		|	&ОсновнаяСтавкаНДС";
		
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет91_01", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("Счет62_31", ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ);
		Запрос.УстановитьПараметр("УчитыватьПоложительныеСуммовыеРазницы", УчитыватьПоложительныеСуммовыеРазницы);
		Запрос.УстановитьПараметр("ВидыДоходовОблагаемыеНДС", ВидыДоходовОблагаемыеНДС);
		Запрос.УстановитьПараметр("РасходыОтносятсяКЕНВД", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
		Запрос.УстановитьПараметр("ОсновнаяСтавкаНДС", Перечисления.СтавкиНДС.НДС18);
		
		РезультатПоСуммовымРазницам = Запрос.Выполнить();
		ТаблицаСуммовыхРазниц = РезультатПоСуммовымРазницам.Выгрузить();
		ТаблицаСуммовыхРазниц.Индексы.Добавить("СтавкаНДС");
		
	КонецЕсли;
	 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
    |   ОборотыПоСтавкамНДС.СтавкаНДС КАК СтавкаНДС,
    |   СУММА(ОборотыПоСтавкамНДС.СуммаВыручки) КАК СуммаВыручки,
    |   СУММА(ОборотыПоСтавкамНДС.НДСНачисленный) КАК НДСНачисленный
    |ИЗ
    |   (ВЫБРАТЬ
    |       &ОсновнаяСтавкаНДС КАК СтавкаНДС,
    |       ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаВыручки,
    |       0 КАК НДСНачисленный
    |   ИЗ
    |       РегистрБухгалтерии.Хозрасчетный.Обороты(
    |               &ДатаНач,
    |               &ДатаКон,
    |               ,
    |               Счет В ИЕРАРХИИ (&Счет91_01),
    |               &ВидыСубконто91,
    |               Организация = &Организация
    |                   И Субконто1.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС)
    |                   И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат <> &РасходыОтносятсяКЕНВД,
    |               ,
    |               ) КАК ХозрасчетныйОбороты
    |   
    |   ОБЪЕДИНИТЬ ВСЕ
    |   
    |   ВЫБРАТЬ
    |       &ОсновнаяСтавкаНДС,
    |       0,
    |       ХозрасчетныйОбороты.СуммаОборотДт
    |   ИЗ
    |       РегистрБухгалтерии.Хозрасчетный.Обороты(
    |               &ДатаНач,
    |               &ДатаКон,
    |               ,
    |               Счет В ИЕРАРХИИ (&Счет91_02),
    |               &ВидыСубконто91,
    |               Организация = &Организация
    |                   И Субконто1.ВидПрочихДоходовИРасходов В (&ВидыДоходовОблагаемыеНДС)
    |                   И Субконто1.ВидДеятельностиДляНалоговогоУчетаЗатрат <> &РасходыОтносятсяКЕНВД,
    |               Корсчет = &Счет68_02
    |                   ИЛИ Корсчет = &Счет76_Н ИЛИ Корсчет = &Счет76_ОТ,
    |               ) КАК ХозрасчетныйОбороты) КАК ОборотыПоСтавкамНДС
    |
    |СГРУППИРОВАТЬ ПО
    |   ОборотыПоСтавкамНДС.СтавкаНДС
    |
    |УПОРЯДОЧИТЬ ПО
    |   СтавкаНДС
    |АВТОУПОРЯДОЧИВАНИЕ";

	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет91_01", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	Запрос.УстановитьПараметр("Счет91_02", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	Запрос.УстановитьПараметр("Счет68_02", ПланыСчетов.Хозрасчетный.НДС);
	Запрос.УстановитьПараметр("Счет76_Н", ПланыСчетов.Хозрасчетный.РасчетыПоНДСотложенномуДляУплатыВБюджет);
	Запрос.УстановитьПараметр("Счет76_ОТ",ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
    
	ВидыСубконто91 = Новый Массив;
	ВидыСубконто91.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы);
	Запрос.УстановитьПараметр("ВидыСубконто91", ВидыСубконто91);
	Запрос.УстановитьПараметр("ВидыДоходовОблагаемыеНДС", ВидыДоходовОблагаемыеНДС);
	Запрос.УстановитьПараметр("РасходыОтносятсяКЕНВД", Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД);
	Запрос.УстановитьПараметр("ОсновнаяСтавкаНДС", Перечисления.СтавкиНДС.НДС18);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	ТаблицаРезультата.Колонки.Вставить(2, "ПоложительнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(3, "ОтрицательнаяРазница", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Вставить(4, "НДСРассчитанный", ОписаниеТипаСуммы);
    
	Если ВозможныОтклонения Тогда
		Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
			
			РазницыПоТекСтавке = ТаблицаСуммовыхРазниц.Найти(СтрокаТабРезультата.СтавкаНДС, "СтавкаНДС");
			ЕстьРазницыПоТекСтавке = РазницыПоТекСтавке <> Неопределено;
			Если ЕстьРазницыПоТекСтавке Тогда
				СтрокаТабРезультата.ПоложительнаяРазница = РазницыПоТекСтавке.ПоложительнаяРазница;
				СтрокаТабРезультата.ОтрицательнаяРазница = РазницыПоТекСтавке.ОтрицательнаяРазница;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаТабРезультата Из ТаблицаРезультата Цикл
		
		ЗначениеСтавки = УчетНДС.ПолучитьСтавкуНДС(СтрокаТабРезультата.СтавкаНДС);
		БазаДляНДС = СтрокаТабРезультата.СуммаВыручки - СтрокаТабРезультата.ПоложительнаяРазница 
		           + СтрокаТабРезультата.ОтрицательнаяРазница;
		НДСРассчитанный = Окр(БазаДляНДС / (100 + ЗначениеСтавки) * ЗначениеСтавки, 2);
		СтрокаТабРезультата.НДСРассчитанный = НДСРассчитанный;
		ОбнаруженыОшибки = (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) > 1
		               ИЛИ (СтрокаТабРезультата.НДСРассчитанный - СтрокаТабРезультата.НДСНачисленный) < -1;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	// Таблица требуется для других правил - вставляем ее в исходящие данные при любом результате проверки
	ИсходящиеДанные.Вставить("Соответствие91_НДС_БУТаблицаЗначений", ТаблицаРезультата);
	СтруктураЗаголовков = Новый Структура;
	СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
	СтруктураЗаголовков.Вставить("СуммаВыручки", "Сумма выручки");
	СтруктураЗаголовков.Вставить("НДСНачисленный", "НДС начисленный");
	СтруктураЗаголовков.Вставить("ПоложительнаяРазница", "Положительная разница");
	СтруктураЗаголовков.Вставить("ОтрицательнаяРазница", "Отрицательная разница");
	СтруктураЗаголовков.Вставить("НДСРассчитанный", "НДС рассчитанный");
	ИсходящиеДанные.Вставить("Соответствие91_НДС_БУСтруктураЗаголовков", СтруктураЗаголовков);
	
КонецПроцедуры

Процедура ПроверитьПравилоСоответствие90и91_НДС_НУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НетВИсходящихДанных  = НЕ ИсходящиеДанные.Свойство("Соответствие90_НДС_БУТаблицаЗначений");
	Если НетВИсходящихДанных Тогда
		ПравилоСоответствие90_НДС_БУ = ДеревоПроверок.Строки.Найти("Соответствие90_НДС_БУ", "Идентификатор", Истина);
		ПроверитьПравило(ПравилоСоответствие90_НДС_БУ);
	КонецЕсли;
	ТаблицаСчета90 = ИсходящиеДанные.Соответствие90_НДС_БУТаблицаЗначений;
	
	НетВИсходящихДанных  = НЕ ИсходящиеДанные.Свойство("Соответствие91_НДС_БУТаблицаЗначений");
	Если НетВИсходящихДанных Тогда
		ПравилоСоответствие91_НДС_БУ = ДеревоПроверок.Строки.Найти("Соответствие91_НДС_БУ", "Идентификатор", Истина);
		ПроверитьПравило(ПравилоСоответствие91_НДС_БУ);
	КонецЕсли;
	ТаблицаСчета91 = ИсходящиеДанные.Соответствие91_НДС_БУТаблицаЗначений;
	
	// Добавляем данные по выручке ЕНВД - в регистре НДСНачисленный она тоже должна отражаться
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ЕНВД"" КАК СтавкаНДС,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаВыручки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В ИЕРАРХИИ (&Счет90_01_2), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|ГДЕ
	|	ХозрасчетныйОбороты.СуммаОборотКт <> 0";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Счет90_01_2", ПланыСчетов.Хозрасчетный.ВыручкаЕНВД);
	
	Результат = Запрос.Выполнить();
	ТаблицаЕНВД = Результат.Выгрузить();
	
	УчетнаяПолитика = ИсходящиеДанные.УчетнаяПолитика;
	НДСПоОтгрузкеБезПереходаСобственности = УчетнаяПолитика.НачислятьНДСПоОтгрузке;
	
	Если НДСПоОтгрузкеБезПереходаСобственности Тогда
		
		// Считаем суммы по отгрузке без перехода собственности (увеличивает базу бухучета)
		// и по реализации отгруженных товаров (уменьшает базу бухучета)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.СтавкаНДС,
		|	СУММА(ВложенныйЗапрос.БазаНДСпоОтгрузкеБезПереходаСобственности) КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
		|	СУММА(ВложенныйЗапрос.СуммаНДСпоОтгрузкеБезПереходаСобственности) КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДСНачисленный.СтавкаНДС КАК СтавкаНДС,
		|		НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
		|		НДСНачисленный.НДС КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
		|	ИЗ
		|		РегистрНакопления.НДСНачисленный КАК НДСНачисленный
		|	ГДЕ
		|		НДСНачисленный.Активность = ИСТИНА
		|		И НДСНачисленный.ВидДвижения = &Приход
		|		И НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
		|		И НДСНачисленный.Организация = &Организация
		|		И НДСНачисленный.ВидНачисления В(&ВидыНачислений)
		|		И НДСНачисленный.Событие В(&ВключаемыеСобытия)
		|		И (НЕ НДСНачисленный.ВидЦенности В (&ВидыИсключаемыхЦенностей))
		|		И НДСНачисленный.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
		|		И ВЫРАЗИТЬ(НДСНачисленный.Регистратор КАК Документ.РеализацияТоваровУслуг).ВидОперации = &ОтгрузкаБезПереходаСобственности
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт1 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт1
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт2 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт2
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоДт3 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоДт3
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт1 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт1
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт2 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт2
		|			КОГДА ХозрасчетныйДвиженияССубконто.ВидСубконтоКт3 = &ВидСубконтоСтавкиНДС
		|				ТОГДА ХозрасчетныйДвиженияССубконто.СубконтоКт3
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&Счет90_01_1)
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ,
		|		ВЫБОР
		|			КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&Счет90_03)
		|				ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Организация = &Организация
		|			    И Активность = ИСТИНА
		|			    И Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
		|			    И (СчетДт В ИЕРАРХИИ (&Счет90_03)
		|			        ИЛИ СчетКт В ИЕРАРХИИ (&Счет90_01_1))) КАК ХозрасчетныйДвиженияССубконто) КАК ВложенныйЗапрос
		|
		|СГРУППИРОВАТЬ ПО
		|	ВложенныйЗапрос.СтавкаНДС";
		
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
		Запрос.УстановитьПараметр("Счет90_01_1", ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
		Запрос.УстановитьПараметр("Счет90_03", ПланыСчетов.Хозрасчетный.Продажи_НДС);
		Запрос.УстановитьПараметр("ОтгрузкаБезПереходаСобственности", Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);
		
		ВидыНачислений = Новый Массив;
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.Реализация0);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
		Запрос.УстановитьПараметр("ВидыНачислений", ВидыНачислений);
		Запрос.УстановитьПараметр("РеализацияЕНВД", Перечисления.НДСВидНачисления.РеализацияЕНВД);
		
		ВидыИсключаемыхЦенностей = Новый Массив;
		ВидыИсключаемыхЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
		Запрос.УстановитьПараметр("ВидыИсключаемыхЦенностей", ВидыИсключаемыхЦенностей);
		
		ВключаемыеСобытия = Новый Массив;
		ВключаемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		Запрос.УстановитьПараметр("ВключаемыеСобытия", ВключаемыеСобытия);
		
		Результат = Запрос.Выполнить();
		ТаблицаОтгрузкиБезПереходаСобственности = Результат.Выгрузить();
		
	КонецЕсли;
    
    НДСПоОтгрузкеБезПереходаСобственностиНедвижимости = УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости;
	
	Если НДСПоОтгрузкеБезПереходаСобственностиНедвижимости Тогда
		
		// Считаем суммы по отгрузке без перехода собственности (увеличивает базу бухучета)
		// и по реализации отгруженных товаров (уменьшает базу бухучета)
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
        |   ВложенныйЗапрос.СтавкаНДС,
        |   СУММА(ВложенныйЗапрос.БазаНДСпоОтгрузкеБезПереходаСобственности) КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
        |   СУММА(ВложенныйЗапрос.СуммаНДСпоОтгрузкеБезПереходаСобственности) КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
        |ИЗ
        |   (ВЫБРАТЬ
        |       НДСНачисленный.СтавкаНДС КАК СтавкаНДС,
        |       НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС КАК БазаНДСпоОтгрузкеБезПереходаСобственности,
        |       НДСНачисленный.НДС КАК СуммаНДСпоОтгрузкеБезПереходаСобственности
        |   ИЗ
        |       РегистрНакопления.НДСНачисленный КАК НДСНачисленный
        |   ГДЕ
        |       НДСНачисленный.Активность = ИСТИНА
        |       И НДСНачисленный.ВидДвижения = &Приход
        |       И НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
        |       И НДСНачисленный.Организация = &Организация
        |       И НДСНачисленный.ВидНачисления В(&ВидыНачислений)
        |       И НДСНачисленный.Событие В(&ВключаемыеСобытия)
        |       И (НЕ НДСНачисленный.ВидЦенности В (&ВидыИсключаемыхЦенностей))
        |       И НДСНачисленный.Регистратор ССЫЛКА Документ.ПередачаОС
        |       И ВЫРАЗИТЬ(НДСНачисленный.Регистратор КАК Документ.ПередачаОС).ПравоСобственностиПереходитПослеГосРегистрации
        |   
        |   ОБЪЕДИНИТЬ ВСЕ
        |   
        |   ВЫБРАТЬ
        |       &ОсновнаяСтавкаНДС,
        |       ВЫБОР
        |           КОГДА ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&Счет91_01)
        |               ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
        |           ИНАЧЕ 0
        |       КОНЕЦ,
        |       ВЫБОР
        |           КОГДА ХозрасчетныйДвиженияССубконто.СчетДт В ИЕРАРХИИ (&Счет91_02)
        |                   И ХозрасчетныйДвиженияССубконто.СчетКт В ИЕРАРХИИ (&Счет76_ОТ)
        |               ТОГДА -ХозрасчетныйДвиженияССубконто.Сумма
        |           ИНАЧЕ 0
        |       КОНЕЦ
        |   ИЗ
        |       РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
        |               &ДатаНач,
        |               &ДатаКон,
        |               Организация = &Организация
        |                   И Активность = ИСТИНА
        |                   И Регистратор ССЫЛКА Документ.РеализацияОтгруженныхТоваров
        |                   И Регистратор.ДокументОтгрузки ССЫЛКА Документ.ПередачаОС
        |                   И (СчетДт В ИЕРАРХИИ (&Счет91_02)
        |                           И СчетКт В ИЕРАРХИИ (&Счет76_ОТ)
        |                       ИЛИ СчетКт В ИЕРАРХИИ (&Счет91_01)),
        |               ,
        |               ) КАК ХозрасчетныйДвиженияССубконто) КАК ВложенныйЗапрос
        |
        |СГРУППИРОВАТЬ ПО
        |   ВложенныйЗапрос.СтавкаНДС";
		
		Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
		Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидСубконтоСтавкиНДС", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтавкиНДС);
		Запрос.УстановитьПараметр("Счет91_01", ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
		Запрос.УстановитьПараметр("Счет91_02", ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
		Запрос.УстановитьПараметр("Счет76_ОТ", ПланыСчетов.Хозрасчетный.НДСНачисленныйПоОтгрузке);
	    Запрос.УстановитьПараметр("ОсновнаяСтавкаНДС", Перечисления.СтавкиНДС.НДС18);
		
		ВидыНачислений = Новый Массив;
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.Реализация0);
		ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
		Запрос.УстановитьПараметр("ВидыНачислений", ВидыНачислений);
		Запрос.УстановитьПараметр("РеализацияЕНВД", Перечисления.НДСВидНачисления.РеализацияЕНВД);
		
		ВидыИсключаемыхЦенностей = Новый Массив;
		ВидыИсключаемыхЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
		Запрос.УстановитьПараметр("ВидыИсключаемыхЦенностей", ВидыИсключаемыхЦенностей);
		
		ВключаемыеСобытия = Новый Массив;
		ВключаемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		Запрос.УстановитьПараметр("ВключаемыеСобытия", ВключаемыеСобытия);
		
		Результат = Запрос.Выполнить();
		ТаблицаОтгрузкиБезПереходаСобственностиНедвижимости = Результат.Выгрузить();
		
	КонецЕсли;
 
    
    ТаблицаРезультата = Новый ТаблицаЗначений;
	ТаблицаРезультата.Колонки.Добавить("СтавкаНДС");
	ТаблицаРезультата.Колонки.Добавить("БазаНДСпоБУ", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Добавить("СуммаНДСпоБУ", ОписаниеТипаСуммы);
	
	Если НДСПоОтгрузкеБезПереходаСобственности Или НДСПоОтгрузкеБезПереходаСобственностиНедвижимости Тогда
		ТаблицаРезультата.Колонки.Добавить("БазаНДСпоОтгрузкеБезПереходаСобственности", ОписаниеТипаСуммы);
		ТаблицаРезультата.Колонки.Добавить("СуммаНДСпоОтгрузкеБезПереходаСобственности", ОписаниеТипаСуммы);
	КонецЕсли;
	
	ТаблицаРезультата.Колонки.Добавить("БазаНДСпоРегистру", ОписаниеТипаСуммы);
	ТаблицаРезультата.Колонки.Добавить("СуммаНДСпоРегистру", ОписаниеТипаСуммы);
	
	Для каждого СтрокаТаблицы90 Из ТаблицаСчета90 Цикл
		СтрокаТаблицыРезультата              = ТаблицаРезультата.Добавить();
		СтрокаТаблицыРезультата.СтавкаНДС    = СтрокаТаблицы90.СтавкаНДС;
		СтрокаТаблицыРезультата.БазаНДСпоБУ  = СтрокаТаблицы90.СуммаВыручки - СтрокаТаблицы90.ПоложительнаяРазница 
		                                     + СтрокаТаблицы90.ОтрицательнаяРазница;
		СтрокаТаблицыРезультата.СуммаНДСпоБУ = СтрокаТаблицы90.НДСНачисленный;
	КонецЦикла;
	
	Для каждого СтрокаТаблицы91 Из ТаблицаСчета91 Цикл
		СтрокаТаблицыРезультата              = ТаблицаРезультата.Добавить();
		СтрокаТаблицыРезультата.СтавкаНДС    = СтрокаТаблицы91.СтавкаНДС;
		СтрокаТаблицыРезультата.БазаНДСпоБУ  = СтрокаТаблицы91.СуммаВыручки - СтрокаТаблицы91.ПоложительнаяРазница 
		                                     + СтрокаТаблицы91.ОтрицательнаяРазница;
		СтрокаТаблицыРезультата.СуммаНДСпоБУ = СтрокаТаблицы91.НДСНачисленный;
	КонецЦикла;
	
	Для каждого СтрокаТаблицыЕНВД Из ТаблицаЕНВД Цикл
		СтрокаТаблицыРезультата              = ТаблицаРезультата.Добавить();
		СтрокаТаблицыРезультата.СтавкаНДС    = СтрокаТаблицыЕНВД.СтавкаНДС;
		СтрокаТаблицыРезультата.БазаНДСпоБУ  = СтрокаТаблицыЕНВД.СуммаВыручки;
	КонецЦикла;
	
	Если НДСПоОтгрузкеБезПереходаСобственности Тогда
		Для каждого СтрокаТаблицыОтгрузкиБезПереходаСобственности Из ТаблицаОтгрузкиБезПереходаСобственности Цикл
			СтрокаТаблицыРезультата          = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, СтрокаТаблицыОтгрузкиБезПереходаСобственности);
		КонецЦикла;
    КонецЕсли;
    
	Если НДСПоОтгрузкеБезПереходаСобственностиНедвижимости Тогда
		Для каждого СтрокаТаблицыОтгрузкиБезПереходаСобственности Из ТаблицаОтгрузкиБезПереходаСобственностиНедвижимости Цикл
			СтрокаТаблицыРезультата          = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыРезультата, СтрокаТаблицыОтгрузкиБезПереходаСобственности);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НДСНачисленный.ВидНачисления = &РеализацияЕНВД
	|			ТОГДА ""ЕНВД""
	|		ИНАЧЕ НДСНачисленный.СтавкаНДС
	|	КОНЕЦ КАК СтавкаНДС,
	|	СУММА(НДСНачисленный.СуммаБезНДС + НДСНачисленный.НДС) КАК БазаНДСпоРегистру,
	|	СУММА(НДСНачисленный.НДС) КАК СуммаНДСпоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный КАК НДСНачисленный
	|ГДЕ
	|	НДСНачисленный.Активность = ИСТИНА
	|	И НДСНачисленный.ВидДвижения = &Приход
	|	И НДСНачисленный.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И НДСНачисленный.Организация = &Организация
	|	И НДСНачисленный.ВидНачисления В(&ВидыНачислений)
	|	И НДСНачисленный.Событие В(&ВключаемыеСобытия)
	|	И (НЕ НДСНачисленный.ВидЦенности В (&ВидыИсключаемыхЦенностей))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА НДСНачисленный.ВидНачисления = &РеализацияЕНВД
	|			ТОГДА ""ЕНВД""
	|		ИНАЧЕ НДСНачисленный.СтавкаНДС
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("Приход", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	ВидыНачислений = Новый Массив;
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.Реализация0);
	ВидыНачислений.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);
	Запрос.УстановитьПараметр("ВидыНачислений", ВидыНачислений);
	Запрос.УстановитьПараметр("РеализацияЕНВД", Перечисления.НДСВидНачисления.РеализацияЕНВД);
	
	ВидыИсключаемыхЦенностей = Новый Массив;
	ВидыИсключаемыхЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент);
	Запрос.УстановитьПараметр("ВидыИсключаемыхЦенностей", ВидыИсключаемыхЦенностей);
	
	ВключаемыеСобытия = Новый Массив;
	ВключаемыеСобытия.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
	Запрос.УстановитьПараметр("ВключаемыеСобытия", ВключаемыеСобытия);
	
	Результат = Запрос.Выполнить();
	ТаблицаРегистра = Результат.Выгрузить();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРегистра, ТаблицаРезультата);
	
	Если НДСПоОтгрузкеБезПереходаСобственности Или НДСПоОтгрузкеБезПереходаСобственностиНедвижимости Тогда
		ТаблицаРезультата.Свернуть("СтавкаНДС", "БазаНДСпоБУ, СуммаНДСпоБУ, 
			|БазаНДСпоОтгрузкеБезПереходаСобственности, СуммаНДСпоОтгрузкеБезПереходаСобственности, БазаНДСпоРегистру, СуммаНДСпоРегистру");
	Иначе
		ТаблицаРезультата.Свернуть("СтавкаНДС", "БазаНДСпоБУ, СуммаНДСпоБУ, БазаНДСпоРегистру, СуммаНДСпоРегистру");
	КонецЕсли;
	
	ОбнаруженыОшибки = Ложь;
    Для каждого СтрокаРезультата Из ТаблицаРезультата Цикл
        
        Если НДСПоОтгрузкеБезПереходаСобственности Или НДСПоОтгрузкеБезПереходаСобственностиНедвижимости Тогда
            Если СтрокаРезультата.БазаНДСпоБУ <> 0 Или СтрокаРезультата.БазаНДСпоОтгрузкеБезПереходаСобственности <> 0
                Или  СтрокаРезультата.СуммаНДСпоБУ <> 0 Или СтрокаРезультата.СуммаНДСпоОтгрузкеБезПереходаСобственности <> 0 Тогда
                Если СтрокаРезультата.БазаНДСпоБУ + СтрокаРезультата.БазаНДСпоОтгрузкеБезПереходаСобственности <> СтрокаРезультата.БазаНДСпоРегистру 
                    ИЛИ СтрокаРезультата.СуммаНДСпоБУ + СтрокаРезультата.СуммаНДСпоОтгрузкеБезПереходаСобственности <> СтрокаРезультата.СуммаНДСпоРегистру Тогда
                    ОбнаруженыОшибки = Истина;
                    Прервать;
                КонецЕсли;
            КонецЕсли;    
            Иначе
                Если СтрокаРезультата.БазаНДСпоБУ <> СтрокаРезультата.БазаНДСпоРегистру 
                    ИЛИ СтрокаРезультата.СуммаНДСпоБУ <> СтрокаРезультата.СуммаНДСпоРегистру Тогда
                    ОбнаруженыОшибки = Истина;
                    Прервать;
                КонецЕсли;
            КонецЕсли;
        
    КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("Соответствие90и91_НДС_НУТаблицаЗначений", ТаблицаРезультата);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СтавкаНДС", "Ставка НДС");
		СтруктураЗаголовков.Вставить("БазаНДСпоБУ", "База НДС по данным БУ");
		СтруктураЗаголовков.Вставить("СуммаНДСпоБУ", "Сумма НДС по данным БУ");
		СтруктураЗаголовков.Вставить("БазаНДСпоОтгрузкеБезПереходаСобственности", "База НДС по отгрузке без перехода собственности");
		СтруктураЗаголовков.Вставить("СуммаНДСпоОтгрузкеБезПереходаСобственности", "Сумма НДС по отгрузке без перехода собственности");
		СтруктураЗаголовков.Вставить("БазаНДСпоРегистру", "База НДС по регистру");
		СтруктураЗаголовков.Вставить("СуммаНДСпоРегистру", "Сумма НДС по регистру");
		ИсходящиеДанные.Вставить("Соответствие90и91_НДС_НУСтруктураЗаголовков", СтруктураЗаголовков);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("СтавкаНДС", 15);
		СтруктураШириныКолонок.Вставить("БазаНДСпоБУ", 20);
		СтруктураШириныКолонок.Вставить("СуммаНДСпоБУ", 20);
		СтруктураШириныКолонок.Вставить("БазаНДСпоОтгрузкеБезПереходаСобственности", 20);
		СтруктураШириныКолонок.Вставить("СуммаНДСпоОтгрузкеБезПереходаСобственности", 20);
		СтруктураШириныКолонок.Вставить("БазаНДСпоРегистру", 20);
		СтруктураШириныКолонок.Вставить("СуммаНДСпоРегистру", 20);
		ИсходящиеДанные.Вставить("Соответствие90и91_НДС_НУСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьЗаписиКнигиПродаж(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФормированиеЗаписейКнигиПродаж.Ссылка
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПродаж КАК ФормированиеЗаписейКнигиПродаж
		|ГДЕ
		|	ФормированиеЗаписейКнигиПродаж.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ФормированиеЗаписейКнигиПродаж.Проведен = ИСТИНА
		|	И ФормированиеЗаписейКнигиПродаж.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		ЕстьДокумент = НЕ Результат.Пустой();
		Если ЕстьДокумент Тогда
			СтрокаПериода.Результат = "Есть документ формирования книги продаж";
		Иначе
			Если СтрокаПериода.ПериодМеньшеРегламентного Тогда
				СтрокаПериода.Результат = "Документ формирования книги продаж не обязателен на данном временном интервале (налоговый период - квартал)";
				СтрокаПравила.КомментарийРезультата = СтрокаПериода.Результат;
			Иначе
				ОбнаруженыОшибки = Истина;
				СтрокаПериода.Результат = "Нет документа формирования книги продаж";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьЗаписиКнигиПродажТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНачислениеНДСсАвансов(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Период КАК ПериодДень,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаАвансов
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, День, Счет В ИЕРАРХИИ (&СчетаАвансов), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			НАЧАЛОПЕРИОДА(СчетФактураВыданный.Дата, ДЕНЬ) КАК ПериодДень
	|		ИЗ
	|			Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ГДЕ
	|			СчетФактураВыданный.Организация = &Организация
	|			И СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаАванс)
	|			И СчетФактураВыданный.Проведен = ИСТИНА
	|			И СчетФактураВыданный.Дата МЕЖДУ &ДатаНач И &ДатаКон) КАК ДниАвансовыхСФ
	|		ПО ХозрасчетныйОбороты.Период = ДниАвансовыхСФ.ПериодДень
	|ГДЕ
	|	ДниАвансовыхСФ.ПериодДень ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	СчетаАвансов = Новый Массив;
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
	Запрос.УстановитьПараметр("СчетаАвансов", СчетаАвансов);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НачислениеНДСсАвансовРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаАвансов", "Сумма авансов");
		ИсходящиеДанные.Вставить("НачислениеНДСсАвансовСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНДСсАвансовБУ_НУ(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Данные.СуммаПоСчету76_АВ) КАК СуммаПоСчету76_АВ,
		|	СУММА(Данные.СуммаПоРегистру) КАК СуммаПоРегистру
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаПоСчету76_АВ,
		|		0 КАК СуммаПоРегистру
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		НДСсАвансовОбороты.НДСПриход
		|	ИЗ
		|		РегистрНакопления.НДСсАвансов.Обороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				,
		|				Организация = &Организация
		|					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОбороты) КАК Данные
		|
		|ИМЕЮЩИЕ
		|	(НЕ СУММА(Данные.СуммаПоСчету76_АВ) = СУММА(Данные.СуммаПоРегистру))";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НДСсАвансовБУ_НУРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаПоСчету76_АВ", "Сумма по счету 76.АВ");
		СтруктураЗаголовков.Вставить("СуммаПоРегистру", "Сумма по регистру");
		ИсходящиеДанные.Вставить("НДСсАвансовБУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПолнотаНДСАгенты(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|			И ВидЦенности В (&ВидыЦенностиАгенты)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	ВидыЦенностиАгенты = Новый Массив;
	ВидыЦенностиАгенты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
	ВидыЦенностиАгенты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
	ВидыЦенностиАгенты.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Запрос.УстановитьПараметр("ВидыЦенностиАгенты", ВидыЦенностиАгенты);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПолнотаНДСАгентыРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("ПолнотаНДСАгентыСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНДСсСМРхозспособомВКнигеПродаж(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|			И ВидЦенности В (&ВидыЦенностиСМР)) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	ВидыЦенностиСМР = Новый Массив;
	ВидыЦенностиСМР.Добавить(Перечисления.ВидыЦенностей.СМРСобственнымиСилами);
	Запрос.УстановитьПараметр("ВидыЦенностиСМР", ВидыЦенностиСМР);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НДСсСМРхозспособомВКнигеПродажРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("НДСсСМРхозспособомВКнигеПродажСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНДСсАвансовВКнигеПродаж(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) КАК ОстатокПоРегистру
	|ИЗ
	|	РегистрНакопления.НДСНачисленный.Остатки(
	|		&ГраницаКон,
	|		Организация = &Организация
	|		    И ВидНачисления = &ВидНачисленияАвансы) КАК НДСНачисленныйОстатки
	|ГДЕ
	|	ЕСТЬNULL(НДСНачисленныйОстатки.НДСОстаток, 0) <> 0";
	
	Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(КонецДатыКон, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидНачисленияАвансы", Перечисления.НДСВидНачисления.НДСсАвансов);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НДСсАвансовВКнигеПродажРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ОстатокПоРегистру", "Остаток по регистру");
		ИсходящиеДанные.Вставить("НДСсАвансовВКнигеПродажСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

// Книга покупок

Процедура ПроверитьПравилоДатаАктуальностиНДСПокупки(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НеБылоПроверкиДатаАктуальностиНДСПродажи = НЕ ИсходящиеДанные.Свойство("ДатаАктуальностиНДСПродажиТаблицаЗначений");
	
	Если НеБылоПроверкиДатаАктуальностиНДСПродажи Тогда
	
		ПравилоДатаАктуальностиНДСПродажи = ДеревоПроверок.Строки.Найти("ДатаАктуальностиНДСПродажи", "Идентификатор", Истина);
		ПроверитьПравило(ПравилоДатаАктуальностиНДСПродажи);
	
		СтрокаПравила.ОбнаруженыОшибки  = ПравилоДатаАктуальностиНДСПродажи.ОбнаруженыОшибки;
		СтрокаПравила.ПроверкаВыполнена = ПравилоДатаАктуальностиНДСПродажи.ПроверкаВыполнена;
		
	КонецЕсли;
	
	ТаблицаОшибок = ИсходящиеДанные.ДатаАктуальностиНДСПродажиТаблицаЗначений;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ДатаАктуальностиНДСПокупкиТаблицаЗначений", ТаблицаОшибок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПолнотаСФПолученных(СтрокаПравила)
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	
	УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, ДатаНач, УчетнаяПолитика);
	
	// Проверяем только сам факт отсутствия счета-фактуры
	Если УпрощенныйУчетНДС Тогда
		ТаблицаОшибок = УчетНДС.УпрощенныйНДС_ОпределитьНаличиеСчетовФактурПолученных(ДатаНач, КонецДатыКон, Организация, , , Ложь, , );
	Иначе
		ТаблицаОшибок = УчетНДС.ОпределитьНаличиеСчетовФактурПолученных(ДатаНач, КонецДатыКон, Организация, , , Ложь, , );
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.ДокументОснование);
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.СчетФактура);
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.СчетФактураДата);
		ТаблицаОшибок.Колонки.Удалить(ТаблицаОшибок.Колонки.СчетФактураПроведен);
		ТаблицаОшибок.Колонки.Добавить("Ошибка");
		ТаблицаОшибок.ЗаполнитьЗначения("Нет счета-фактуры", "Ошибка");
		ИсходящиеДанные.Вставить("ПолнотаСФПолученныхТаблицаЗначений", ТаблицаОшибок);
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Ошибка", 40);
		ИсходящиеДанные.Вставить("ПолнотаСФПолученныхСтруктураШириныКолонок", СтруктураШириныКолонок);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьРаспределениеКосвРасходов(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	СложныйУчетНДС = УчетнаяПолитика.СложныйУчетНДС;
	
	ДолжноБытьРаспределениеРасходов = СложныйУчетНДС;
	
	ОбнаруженыОшибки = Ложь;
	Если ДолжноБытьРаспределениеРасходов Тогда
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	РаспределениеНДСКосвенныхРасходов.Ссылка
			|ИЗ
			|	Документ.РаспределениеНДСКосвенныхРасходов КАК РаспределениеНДСКосвенныхРасходов
			|ГДЕ
			|	РаспределениеНДСКосвенныхРасходов.Дата МЕЖДУ &ДатаНач И &ДатаКон
			|	И РаспределениеНДСКосвенныхРасходов.Проведен = ИСТИНА
			|	И РаспределениеНДСКосвенныхРасходов.Организация = &Организация";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Результат = Запрос.Выполнить();
			ЕстьРегистрацияОплаты = НЕ Результат.Пустой();
			Если ЕстьРегистрацияОплаты Тогда
				СтрокаПериода.Результат = "Есть документ распределения косвенных расходов";
			Иначе
				Если СтрокаПериода.ПериодМеньшеРегламентного Тогда
					СтрокаПериода.Результат = "Документ распределения косвенных расходов не обязателен на данном временном интервале (налоговый период - квартал)";
					СтрокаПравила.КомментарийРезультата = СтрокаПериода.Результат;
				Иначе
					ОбнаруженыОшибки = Истина;
					СтрокаПериода.Результат = "Нет документа распределения косвенных расходов";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтрокаПравила.КомментарийРезультатаНетОшибок = "Документы распределения косвенных расходов не нужны, так как в учетной политике организации "
		                                             + "не включена возможность наличия операций без НДС или с НДС 0%";
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьРаспределениеКосвРасходовТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВсеКосвРасходыРаспределены(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	СложныйУчетНДС = УчетнаяПолитика.СложныйУчетНДС;
	
	ДолжноБытьРаспределениеРасходов = СложныйУчетНДС;
	
	ОбнаруженыОшибки = Ложь;
	Если ДолжноБытьРаспределениеРасходов Тогда
		
		ТаблицаОшибок = Новый ТаблицаЗначений;
		ТаблицаОшибок.Колонки.Добавить("НачПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("КонПериода", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТаблицаОшибок.Колонки.Добавить("НераспределеннаяСумма", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(15, 2));
		
		Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
	
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	НДСКосвенныеРасходыОбороты.СуммаБезНДСПриход + НДСКосвенныеРасходыОбороты.НДСПриход 
			|		- НДСКосвенныеРасходыОбороты.СуммаБезНДСРасход - НДСКосвенныеРасходыОбороты.НДСРасход КАК НераспределеннаяСумма
			|ИЗ
			|	РегистрНакопления.НДСКосвенныеРасходы.Обороты(&ДатаНач, &ДатаКон, , Организация = &Организация) КАК НДСКосвенныеРасходыОбороты
			|ГДЕ
			|	НДСКосвенныеРасходыОбороты.СуммаБезНДСПриход + НДСКосвенныеРасходыОбороты.НДСПриход 
			|		- НДСКосвенныеРасходыОбороты.СуммаБезНДСРасход - НДСКосвенныеРасходыОбороты.НДСРасход <> 0";
			
			Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
			Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Результат = Запрос.Выполнить();
			ВсяСуммаРаспределена = Результат.Пустой();
			Если НЕ ВсяСуммаРаспределена Тогда
				
				Выборка = Результат.Выбрать();
				Выборка.Следующий();
				
				ОбнаруженыОшибки = Истина;
				
				СтрокаОшибки = ТаблицаОшибок.Добавить();
				
				СтрокаОшибки.НачПериода = СтрокаПериода.НачПериода;
				СтрокаОшибки.КонПериода = СтрокаПериода.КонПериода;
				СтрокаОшибки.НераспределеннаяСумма = Выборка.НераспределеннаяСумма;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		СтрокаПравила.КомментарийРезультата = "Распределение косвенных расходов не требуется, так как в учетной политике организации "
		                                    + "не включена возможность наличия операций без НДС или с НДС 0%";
	КонецЕсли;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВсеКосвРасходыРаспределеныТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НераспределеннаяСумма", "Нераспределенная сумма");
		ИсходящиеДанные.Вставить("ВсеКосвРасходыРаспределеныСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьЗаписиКнигиПокупок(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ФормированиеЗаписейКнигиПокупок.Ссылка
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПокупок КАК ФормированиеЗаписейКнигиПокупок
		|ГДЕ
		|	ФормированиеЗаписейКнигиПокупок.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ФормированиеЗаписейКнигиПокупок.Проведен = ИСТИНА
		|	И ФормированиеЗаписейКнигиПокупок.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		ЕстьРегистрацияОплаты = НЕ Результат.Пустой();
		Если ЕстьРегистрацияОплаты Тогда
			СтрокаПериода.Результат = "Есть документ формирования записей книги покупок";
		Иначе
			ОбнаруженыОшибки = Истина;
			СтрокаПериода.Результат = "Нет документа  формирования записей книги покупок";
		КонецЕсли;
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьЗаписиКнигиПокупокТаблицаЗначений", ТаблицаРезультата);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоНетОтрицательногоНДСПредъявленного(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("ПериодМесяц", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Документ");
	ТаблицаОшибок.Колонки.Добавить("СуммаОстатка", ОписаниеТипаСуммы);
	
	УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
	
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ДатаКон КАК ПериодМесяц,
		|	НДСПредъявленныйОстатки.СчетФактура КАК Документ,
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) КАК СуммаОстатка
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(&ГраницаКон, Организация = &Организация) КАК НДСПредъявленныйОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&ГраницаКон, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
		|		ПО НДСПредъявленныйОстатки.Организация = НДСПредъявленныйРеализация0Остатки.Организация
		|			И НДСПредъявленныйОстатки.СчетФактура = НДСПредъявленныйРеализация0Остатки.СчетФактура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСпоОСиНМА.Остатки(
		|		&ГраницаКон,
		|		Организация = &Организация
		|		    И НеВлияетНаВычет = ЛОЖЬ) КАК НДСпоОСиНМАОстатки
		|		ПО НДСПредъявленныйОстатки.Организация = НДСпоОСиНМАОстатки.Организация
		|			И НДСПредъявленныйОстатки.СчетФактура = НДСпоОСиНМАОстатки.СчетФактура
		|ГДЕ
		|	ЕСТЬNULL(НДСПредъявленныйОстатки.СуммаБезНДСОстаток, 0) + ЕСТЬNULL(НДСПредъявленныйОстатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСПредъявленныйРеализация0Остатки.НДСОстаток, 0) 
		|	- ЕСТЬNULL(НДСпоОСиНМАОстатки.СуммаБезНДСОстаток, 0) - ЕСТЬNULL(НДСпоОСиНМАОстатки.НДСОстаток, 0) < 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ
		|АВТОУПОРЯДОЧИВАНИЕ";
		
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("ГраницаКон", Новый Граница(СтрокаПериода.КонПериода, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
		
			СтрокаОшибки = ТаблицаОшибок.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОшибки, Выборка);
		
		КонецЦикла; 
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ТаблицаОшибок.Количество() > 0;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("НетОтрицательногоНДСПредъявленногоТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаОстатка", "Сумма остатка");
		ИсходящиеДанные.Вставить("НетОтрицательногоНДСПредъявленногоСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВычетНДС_БУ_НУ(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(Данные.СуммаНДСпоСчету19) КАК СуммаНДСпоСчету19,
	|	СУММА(Данные.СуммаНДСпоРегистрам) КАК СуммаНДСпоРегистрам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОборотыДтКт.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ * ЕСТЬNULL(ХозрасчетныйОборотыДтКт.СуммаОборот, 0) КАК СуммаНДСпоСчету19,
	|		0 КАК СуммаНДСпоРегистрам
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				(НЕ СчетДт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям)))
	|					ИЛИ СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0),
	|				,
	|				СчетКт В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымЦенностям))
	|					И (НЕ СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АкцизыПоОплаченнымМатериальнымЦенностям)),
	|				,
	|				Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		НДСПредъявленныйОбороты.НДСРасход
	|	ИЗ
	|		РегистрНакопления.НДСПредъявленный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Регистратор,
	|				Организация = &Организация
	|					И ВидЦенности <> ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыВыданные)) КАК НДСПредъявленныйОбороты
	|	ГДЕ
	|		(НЕ НДСПредъявленныйОбороты.Регистратор = НДСПредъявленныйОбороты.СчетФактура)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		НДСНачисленныйОбороты.НДСПриход
	|	ИЗ
	|		РегистрНакопления.НДСНачисленный.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Организация = &Организация
	|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.НДСВидНачисления.НДСВосстановлен)) КАК НДСНачисленныйОбороты) КАК Данные
	|
	|ИМЕЮЩИЕ
	|	(НЕ СУММА(Данные.СуммаНДСпоРегистрам) = СУММА(Данные.СуммаНДСпоСчету19))";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВычетНДС_БУ_НУРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("СуммаНДСпоСчету19", "Сумма НДС по счету 19");
		СтруктураЗаголовков.Вставить("СуммаНДСпоРегистрам", "Сумма НДС по регистрам НДС");
		ИсходящиеДанные.Вставить("ВычетНДС_БУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоПравильностьРегОплатыНДСАгентом(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗапросПоДокументамРегистрации.ДокументОплаты КАК Документ,
	|	ЗапросПоДокументамРегистрации.СуммаНДС КАК СуммаНДСПоДокументу,
	|	ЕСТЬNULL(ЗапросПоДебету68_02.СуммаОборотДт, 0) КАК СуммаНДСПоДебету68_02
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрацияОплатыНДСВБюджетАгент.ДокументОплаты КАК ДокументОплаты,
	|		СУММА(РегистрацияОплатыНДСВБюджетАгент.НДС) КАК СуммаНДС
	|	ИЗ
	|		Документ.РегистрацияОплатыНДСВБюджет.ОплатаПоДоговорамНалоговогоАгента КАК РегистрацияОплатыНДСВБюджетАгент
	|	ГДЕ
	|		РегистрацияОплатыНДСВБюджетАгент.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|		И РегистрацияОплатыНДСВБюджетАгент.Ссылка.Проведен = ИСТИНА
	|		И РегистрацияОплатыНДСВБюджетАгент.Ссылка.Организация = &Организация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РегистрацияОплатыНДСВБюджетАгент.ДокументОплаты) КАК ЗапросПоДокументамРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ХозрасчетныйОбороты.Регистратор КАК Регистратор,
	|			ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный.Обороты(
	|					&ДатаНач,
	|					&ДатаКон,
	|					Регистратор,
	|					Счет = &Счет68_02,
	|					,
	|					Организация = &Организация
	|						И Субконто1 = &Налог,
	|					,
	|					) КАК ХозрасчетныйОбороты
	|		ГДЕ
	|			ХозрасчетныйОбороты.Организация = &Организация) КАК ЗапросПоДебету68_02
	|		ПО ЗапросПоДокументамРегистрации.ДокументОплаты = ЗапросПоДебету68_02.Регистратор
	|ГДЕ
	|	ЗапросПоДокументамРегистрации.СуммаНДС > ЕСТЬNULL(ЗапросПоДебету68_02.СуммаОборотДт, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Документ
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон", КонецДатыКон);
	Запрос.УстановитьПараметр("Счет68_02", ПланыСчетов.Хозрасчетный.НДС);
	Запрос.УстановитьПараметр("Налог", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	
	СтрокаПравила.ОбнаруженыОшибки  = НЕ Результат.Пустой();
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ПравильностьРегОплатыНДСАгентомРезультатЗапроса", Результат);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("Документ", "Документ оплаты");
		СтруктураЗаголовков.Вставить("СуммаНДСПоДокументу", "НДС по документу");
		СтруктураЗаголовков.Вставить("СуммаНДСПоДебету68_02", "НДС по дебету сч. 68.02");
		ИсходящиеДанные.Вставить("ПравильностьРегОплатыНДСАгентомСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоЕстьВычетНДСсАвансов(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("Контрагент");
	ТаблицаОшибок.Колонки.Добавить("ЗачетАвансов", ОписаниеТипаСуммы);
	ТаблицаОшибок.Колонки.Добавить("ОборотКт76_АВ", ОписаниеТипаСуммы);
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&ДатаНач КАК НачПериода,
		|	&ДатаКон КАК КонПериода,
		|	ЗапросПоБУ.Контрагент,
		|	ЕСТЬNULL(ЗапросПоБУ.ОборотКт76_АВ, 0) КАК ОборотКт76_АВ,
		|	ЕСТЬNULL(ЗапросПоБУ.ОборотДтПоАвансам, 0) КАК ЗачетАвансов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ХозрасчетныйОбороты.Организация КАК Организация,
		|		ХозрасчетныйОбороты.Субконто1 КАК Контрагент,
		|		СУММА(ВЫБОР
		|				КОГДА ХозрасчетныйОбороты.Счет = &Счет76_АВ
		|					ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОборотКт76_АВ,
		|		СУММА(ВЫБОР
		|				КОГДА ХозрасчетныйОбороты.Счет = &Счет62_02
		|						ИЛИ ХозрасчетныйОбороты.Счет = &Счет62_32
		|					ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
		|				ИНАЧЕ 0
		|			КОНЕЦ) КАК ОборотДтПоАвансам
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет В (&СчетаПоАвансамПокупателей), &ВидСубконтоКонтрагенты, Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ХозрасчетныйОбороты.Организация,
		|		ХозрасчетныйОбороты.Субконто1) КАК ЗапросПоБУ
		|ГДЕ
		|	ЕСТЬNULL(ЗапросПоБУ.ОборотКт76_АВ, 0) = 0 И ЕСТЬNULL(ЗапросПоБУ.ОборотДтПоАвансам, 0) > 0";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ВидСубконтоКонтрагенты", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
		СчетаПоАвансамПокупателей = Новый Массив;
		СчетаПоАвансамПокупателей.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
		СчетаПоАвансамПокупателей.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
		СчетаПоАвансамПокупателей.Добавить(ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		Запрос.УстановитьПараметр("СчетаПоАвансамПокупателей", СчетаПоАвансамПокупателей);
		Запрос.УстановитьПараметр("Счет62_02", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);
		Запрос.УстановитьПараметр("Счет62_32", ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);
		Запрос.УстановитьПараметр("Счет76_АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			ОбнаруженыОшибки = Истина;
			
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОшибок, Выборка);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовТаблицаЗначений", ТаблицаОшибок);
		
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("ЗачетАвансов", "Зачет авансов (62.02, 62.32)");
		СтруктураЗаголовков.Вставить("ОборотКт76_АВ", "Оборот по кредиту счета 76.АВ");
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовСтруктураЗаголовков", СтруктураЗаголовков);
		
		СтруктураШириныКолонок = Новый Структура;
		СтруктураШириныКолонок.Вставить("Контрагент", 40);
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовСтруктураШириныКолонок", СтруктураШириныКолонок);
		
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Контрагент", "Контрагент");
		ИсходящиеДанные.Вставить("ЕстьВычетНДСсАвансовСтруктураРасшифровки", СтруктураРасшифровки);
		
		УчетнаяПолитика = ПолучитьДанныеУчетнаяПолитика();
		УпрощенныйУчетНДС = УчетНДС.ПолучитьУПУпрощенныйУчетНДС(Организация, ДатаНач, УчетнаяПолитика);
		Если УпрощенныйУчетНДС Тогда
			СтрокаПравила.ПричиныОшибокРезультата = 
				"Не введены документы «Отражение НДС к вычету» по зачтенным авансам.";
			СтрокаПравила.РекомендацииРезультата = 
				"Ввести на основании счетов-фактур на авансы, которые были зачтены при реализации, " 
				+ "документы «Отражение НДС к вычету» и провести их.";
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПроверитьПравилоВычетНДСсАвансов_БУ_НУ(СтрокаПравила)
	Перем Отказ;
	
	ИсходящиеДанные.Вставить("Отказ", Ложь);
	ВыполнитьПроверитьНеприменениеУСН(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьПроверитьНеупрощенныйУчетНДС(СтрокаПравила);
	Если ИсходящиеДанные.Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаРезультата = ПолучитьДанныеТаблицаНалоговыхПериодовПоНДС();
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("НачПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("КонПериода", Новый ОписаниеТипов("Дата"));
	ТаблицаОшибок.Колонки.Добавить("НДСпоРегистру", ОписаниеТипаСуммы);
	ТаблицаОшибок.Колонки.Добавить("ОборотКт76_АВ", ОписаниеТипаСуммы);
	
	ОбнаруженыОшибки = Ложь;
	Для каждого СтрокаПериода Из ТаблицаРезультата Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Данные.ОборотКт76_АВ) КАК ОборотКт76_АВ,
		|	СУММА(Данные.НДСпоРегистру) КАК НДСпоРегистру
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотКт, 0) КАК ОборотКт76_АВ,
		|		0 КАК НДСпоРегистру
		|	ИЗ
		|		РегистрБухгалтерии.Хозрасчетный.Обороты(&ДатаНач, &ДатаКон, , Счет = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		0,
		|		ЕСТЬNULL(НДСсАвансовОбороты.НДСРасход, 0)
		|	ИЗ
		|		РегистрНакопления.НДСсАвансов.Обороты(
		|				&ДатаНач,
		|				&ДатаКон,
		|				,
		|				Организация = &Организация
		|					И ВидЦенности = ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.АвансыПолученные)) КАК НДСсАвансовОбороты) КАК Данные";
		
		Запрос.УстановитьПараметр("ДатаНач", СтрокаПериода.НачПериода);
		Запрос.УстановитьПараметр("ДатаКон", СтрокаПериода.КонПериода);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Счет76_АВ", ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам);
		
		Результат = Запрос.Выполнить();
		Выборка   = Результат.Выбрать();
		Выборка.Следующий();
		СтрокаТаблицыОшибок = ТаблицаОшибок.Добавить();
		СтрокаТаблицыОшибок.НачПериода    = СтрокаПериода.НачПериода;
		СтрокаТаблицыОшибок.КонПериода    = СтрокаПериода.КонПериода;
		СтрокаТаблицыОшибок.НДСпоРегистру = Выборка.НДСпоРегистру;
		СтрокаТаблицыОшибок.ОборотКт76_АВ = Выборка.ОборотКт76_АВ;
		
		ЕстьОшибкиВПериоде = (не Выборка.НДСпоРегистру = Выборка.ОборотКт76_АВ);
		Если ЕстьОшибкиВПериоде Тогда
			ОбнаруженыОшибки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПравила.ОбнаруженыОшибки  = ОбнаруженыОшибки;
	СтрокаПравила.ПроверкаВыполнена = Истина;
	
	Если СтрокаПравила.ОбнаруженыОшибки Тогда
		ИсходящиеДанные.Вставить("ВычетНДСсАвансов_БУ_НУТаблицаЗначений", ТаблицаОшибок);
		СтруктураЗаголовков = Новый Структура;
		СтруктураЗаголовков.Вставить("НДСпоРегистру", "Сумма НДС по регистру");
		СтруктураЗаголовков.Вставить("ОборотКт76_АВ", "Оборот по кредиту сч. 76.АВ");
		ИсходящиеДанные.Вставить("ВычетНДСсАвансов_БУ_НУСтруктураЗаголовков", СтруктураЗаголовков);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура-оболочка, вызывающая другие процедуры на выполнение или выполняющая текст алгоритма
Процедура ПроверитьПравило(СтрокаПравила)
	
	СтрокаПравила.КомментарийРезультата   = "";
	СтрокаПравила.ПричиныОшибокРезультата = "";
	СтрокаПравила.РекомендацииРезультата  = "";
	
	РежимОтладки = СтрокаПравила.РежимОтладки ИЛИ ПустаяСтрока(СтрокаПравила.ТекстАлгоритма);
	
	Если РежимОтладки Тогда
		Попытка
			Выполнить("ПроверитьПравило"+СтрокаПравила.Идентификатор+"(СтрокаПравила)");
		Исключение
			ЗаголовокСообщения = "Ошибка при попытке выполнения процедуры "+"ПроверитьПравило"+СтрокаПравила.Идентификатор;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , ЗаголовокСообщения);
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	Иначе
		Попытка
			Выполнить(СтрокаПравила.ТекстАлгоритма);
		Исключение
			ЗаголовокСообщения = "Ошибка при попытке выполнения алгоритма правила "+СтрокаПравила.Идентификатор;
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(), , ЗаголовокСообщения);
			СтрокаПравила.ПроверкаВыполнена = Ложь;
			СтрокаПравила.ОбнаруженыОшибки = Ложь;
		КонецПопытки;
	КонецЕсли;

	КомментарийЗаданВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.КомментарийРезультата);
	Если НЕ КомментарийЗаданВАлгоритме Тогда
		Если СтрокаПравила.ОбнаруженыОшибки Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаОшибка;
		ИначеЕсли СтрокаПравила.ПроверкаВыполнена Тогда
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНетОшибок;
		Иначе
			СтрокаПравила.КомментарийРезультата = СтрокаПравила.КомментарийРезультатаНеВыполнена;
		КонецЕсли;
	КонецЕсли;
	
	ПричиныОшибокЗаданыВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.ПричиныОшибокРезультата);
	Если НЕ ПричиныОшибокЗаданыВАлгоритме Тогда
		СтрокаПравила.ПричиныОшибокРезультата = СтрокаПравила.ПричиныОшибок;
	КонецЕсли;
	
	РекомендацииЗаданыВАлгоритме = НЕ ПустаяСтрока(СтрокаПравила.РекомендацииРезультата);
	Если НЕ РекомендацииЗаданыВАлгоритме Тогда
		СтрокаПравила.РекомендацииРезультата = СтрокаПравила.Рекомендации;
	КонецЕсли;
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с деревом проверок

Процедура СоздатьКолонкиДереваПроверок() Экспорт

	ДеревоПроверок.Колонки.Добавить("Идентификатор", , , 0);
	ДеревоПроверок.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("Включить", Новый ОписаниеТипов("Число"), , 0); // у флажка 3 состояния
	ДеревоПроверок.Колонки.Добавить("Наименование", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПредметКонтроля", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаНетОшибок", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаОшибка", , , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультатаНеВыполнена", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПричиныОшибок", , , 0);
	ДеревоПроверок.Колонки.Добавить("Рекомендации", , , 0);
	ДеревоПроверок.Колонки.Добавить("ТекстАлгоритма", , , 0);
	ДеревоПроверок.Колонки.Добавить("РежимОтладки", Новый ОписаниеТипов("Булево"), , 0);
	// В этих колонках хранятся результаты выполнения проверки
	// Значения колонок КомментарийРезультата, РекомендацииРезультата, ПричиныОшибокРезультата могут быть переопределены в алгоритме проверки
	ДеревоПроверок.Колонки.Добавить("ПроверкаВыполнена", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("ОбнаруженыОшибки", Новый ОписаниеТипов("Булево"), , 0);
	ДеревоПроверок.Колонки.Добавить("КомментарийРезультата", , , 0);
	ДеревоПроверок.Колонки.Добавить("РекомендацииРезультата", , , 0);
	ДеревоПроверок.Колонки.Добавить("ПричиныОшибокРезультата", , , 0);

КонецПроцедуры

// Устанавливает/снимает пометки в строках табличного поля ДеревоОтчетов, подчиненных заданной.
// Процедура вызывается рекурсивно.
// 
// Параметры:
//	Узел - ДеревоЗначений или СтрокаДереваЗначений, начиная с которой следует обрабатывать дерево.
//	Пометка - значение пометки, которое следует установить.
//	СписокВыбранных - СписокЗначений, содержащий ссылки вида СправочникСсылка.РегламентированныеОтчеты.
//						Если параметр задан, то пометка меняется только у тех строк, для которых свойство Ссылка
//						находится в указанном списке.
//
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, 
	                                 ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено,
	                                 ИмяКолонки = "Включить", ИмяКолонкиПоискаВыбранных = "Идентификатор") Экспорт
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел[ИмяКолонки];
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2[ИмяКолонки] = Пометка;
			КонецЦикла;
			Стр1[ИмяКолонки] = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2[ИмяКолонки] = Число(СписокВыбранных.НайтиПоЗначению(Стр2[ИмяКолонкиПоискаВыбранных]) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1[ИмяКолонки] = Число(СписокВыбранных.НайтиПоЗначению(Стр1[ИмяКолонкиПоискаВыбранных]) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.Строки Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.Строки Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2[ИмяКолонки]);
		КонецЦикла;
		Если СуммаПометок = Стр1.Строки.Количество() Тогда
			Стр1[ИмяКолонки] = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1[ИмяКолонки] = 0;
		Иначе
			Стр1[ИмяКолонки] = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сканирует все строки дерева значений, подчиненные заданной, проверяет
// у них свойство Пометка на равенство заданному значению Пометка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - исходная строка для сканирования.
//	Пометка - Булево, значение пометки.
//	ПервыйПроход - признак первого захода в процедуру (используется только при рекурсивных вызовах).
//
// Возвращаемое значение:
//	Булево - признак того, что у всех строк в дереве значений, подчиненных заданной, пометка = Пометка.
//
Функция УВсехПодчиненныхПометкаРавна(Узел, Пометка, ПервыйПроход = Истина, ИмяКолонки = "Включить") Экспорт
	
	Если НЕ ПервыйПроход И Узел[ИмяКолонки] <> Пометка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УВсехПодчиненныхПометкаРавна(Стр, Пометка, Ложь, ИмяКолонки) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////////
// Процедуры работы с макетом MXL

Процедура ЗаполнитьДеревоПроверокИзМакетаMXL() Экспорт
	
	ДеревоПроверок.Строки.Очистить();
	МакетПравил   = ПолучитьМакет("НаборПравилПроверки");
	ОбластьПравил = МакетПравил.Область("Правила");
	
	НомПервойСтрокиПравил    = ОбластьПравил.Верх;
	НомПоследнейСтрокиПравил = ОбластьПравил.Низ;
	
	// На случай, когда строки проверок надо вставлять прямо в корень дерева
	СтрокаРаздела = ДеревоПроверок;
	
	Для НомСтроки = НомПервойСтрокиПравил По НомПоследнейСтрокиПравил Цикл
		ОбластьСтроки    = МакетПравил.Область(НомСтроки, , НомСтроки, );
		ИмяОбластиСтроки = ОбластьСтроки.Имя;
		// Правило идентифицируется по имени области - строки,
		// поэтому строки, для которых не задано имя области, пропускаем 
		ЕстьИмяУСтроки = НЕ (ИмяОбластиСтроки = "R"+Формат(НомСтроки, "ЧГ="));
		Если ЕстьИмяУСтроки Тогда
			// Разбираем строку таблицы
			
			// Правило это или группа правил
			Если МакетПравил.Область(ИмяОбластиСтроки + "|ЭтоГруппа").Текст = "1" Тогда
				ЭтоГруппа = Истина;
			Иначе
				ЭтоГруппа = Ложь;
			КонецЕсли;
			// Правила не-группы могут быть отключены в макете
			// Отключенные правила не выводим в дерево
			Если НЕ ЭтоГруппа Тогда
				Если МакетПравил.Область(ИмяОбластиСтроки + "|Отключено").Текст = "1" Тогда
					Отключено = Истина;
				Иначе
					Отключено = Ложь;
				КонецЕсли;
				Если Отключено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли;
			
			Наименование = МакетПравил.Область(ИмяОбластиСтроки + "|Наименование").Текст;
			
			ПредметКонтроля                  = МакетПравил.Область(ИмяОбластиСтроки + "|ПредметКонтроля").Текст;
			
			// Для групп больше ничего не нужно - добавляем новую строку раздела в дерево
			Если ЭтоГруппа Тогда
				СтрокаРаздела = ДеревоПроверок.Строки.Добавить();
				
				СтрокаРаздела.Идентификатор       = ИмяОбластиСтроки;
				СтрокаРаздела.Наименование        = Наименование;
				СтрокаРаздела.ЭтоГруппа           = Истина;
				СтрокаРаздела.ПредметКонтроля     = ПредметКонтроля;
				Продолжить;
			КонецЕсли;
			
			// Для обычных проверок продолжаем разбор строки
			КомментарийРезультатаНетОшибок   = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНетОшибок").Текст;
			КомментарийРезультатаОшибка      = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаОшибка").Текст;
			КомментарийРезультатаНеВыполнена = МакетПравил.Область(ИмяОбластиСтроки + "|КомментарийРезультатаНеВыполнена").Текст;
			ПричиныОшибок                    = МакетПравил.Область(ИмяОбластиСтроки + "|ПричиныОшибок").Текст;
			Рекомендации                     = МакетПравил.Область(ИмяОбластиСтроки + "|Рекомендации").Текст;
			ТекстАлгоритма                   = МакетПравил.Область(ИмяОбластиСтроки + "|ТекстАлгоритма").Текст;
			Если МакетПравил.Область(ИмяОбластиСтроки + "|РежимОтладки").Текст = "1" Тогда
				РежимОтладки = Истина;
			Иначе
				РежимОтладки = Ложь;
			КонецЕсли;
			
			// Добавляем новую строку проверки
			СтрокаПроверки = СтрокаРаздела.Строки.Добавить();
			
			СтрокаПроверки.Идентификатор                    = ИмяОбластиСтроки;
			СтрокаПроверки.Наименование                     = Наименование;
			СтрокаПроверки.ЭтоГруппа                        = Ложь;
			СтрокаПроверки.ПредметКонтроля                  = ПредметКонтроля;
			СтрокаПроверки.КомментарийРезультатаНетОшибок   = КомментарийРезультатаНетОшибок;
			СтрокаПроверки.КомментарийРезультатаОшибка      = КомментарийРезультатаОшибка;
			СтрокаПроверки.КомментарийРезультатаНеВыполнена = КомментарийРезультатаНеВыполнена;
			СтрокаПроверки.ПричиныОшибок                    = ПричиныОшибок;
			СтрокаПроверки.Рекомендации                     = Рекомендации;
			СтрокаПроверки.ТекстАлгоритма                   = ТекстАлгоритма;
			СтрокаПроверки.РежимОтладки                     = РежимОтладки;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

# Если Клиент Тогда
	
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования детальных отчетов

// Универсальная процедура 
Процедура СформироватьДетальныйОтчет(СтрокаПравила, ТабДокумент)
	
	ИдентификаторПравила = СтрокаПравила.Идентификатор;
	
	СохраненРезультатЗапросаПроверки = ИсходящиеДанные.Свойство(ИдентификаторПравила+"РезультатЗапроса");
	СохраненаТаблицаОшибокПроверки   = ИсходящиеДанные.Свойство(ИдентификаторПравила+"ТаблицаЗначений");
	
	Если СохраненРезультатЗапросаПроверки Тогда
		ИсточникДанных = ИсходящиеДанные[ИдентификаторПравила+"РезультатЗапроса"];
		Если ТипЗнч(ИсточникДанных) <> Тип("РезультатЗапроса") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"РезультатЗапроса!"); 
			Возврат;
		КонецЕсли;
	ИначеЕсли СохраненаТаблицаОшибокПроверки Тогда
		ИсточникДанных = ИсходящиеДанные[ИдентификаторПравила+"ТаблицаЗначений"];
		Если ТипЗнч(ИсточникДанных) <> Тип("ТаблицаЗначений") Тогда
			Сообщить("Неправильный тип значения "+ИдентификаторПравила+"ТаблицаЗначений!"); 
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЕстьСтруктураЗаголовков    = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураЗаголовков");
	Если ЕстьСтруктураЗаголовков Тогда
		СтруктураЗаголовков = ИсходящиеДанные[ИдентификаторПравила+"СтруктураЗаголовков"];
	Иначе
		СтруктураЗаголовков = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураФорматаПолей = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураФорматаПолей");
	Если ЕстьСтруктураФорматаПолей Тогда
		СтруктураФорматаПолей = ИсходящиеДанные[ИдентификаторПравила+"СтруктураФорматаПолей"];
	Иначе
		СтруктураФорматаПолей = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураШириныКолонок = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураШириныКолонок");
	Если ЕстьСтруктураШириныКолонок Тогда
		СтруктураШириныКолонок = ИсходящиеДанные[ИдентификаторПравила+"СтруктураШириныКолонок"];
	Иначе
		СтруктураШириныКолонок = Новый Структура;
	КонецЕсли;
	ЕстьСтруктураРасшифровки  = ИсходящиеДанные.Свойство(ИдентификаторПравила+"СтруктураРасшифровки");
	Если ЕстьСтруктураРасшифровки Тогда
		СтруктураРасшифровки  = ИсходящиеДанные[ИдентификаторПравила+"СтруктураРасшифровки"];
	Иначе
		СтруктураРасшифровки  = Новый Структура;
	КонецЕсли;
	
	Если ТипЗнч(ТабДокумент) <> Тип("ТабличныйДокумент") Тогда
		ТабДокумент = Новый ТабличныйДокумент;
	КонецЕсли;
	Построитель = Новый ПостроительОтчета;
	
	Построитель.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсточникДанных);
	Построитель.ЗаполнитьНастройки();
	Построитель.Выполнить();
	
	Построитель.ВыводитьЗаголовокОтчета = Ложь;
	Построитель.ВыводитьПодвалТаблицы   = Ложь;
	Построитель.ВыводитьПодвалОтчета    = Ложь;
	
	Построитель.МакетОформления = ПолучитьМакетОформления(СтандартноеОформление.Классика);
	Построитель.ОформитьМакет();
	
	Макет = Построитель.Макет;
	
	ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
	Для НомСтроки = ШапкаТаблицыМакета.Верх По ШапкаТаблицыМакета.Низ Цикл
		Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
			ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			ТекОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
			ТекОбласть.Шрифт = Новый Шрифт(ТекОбласть.Шрифт, ,8);
			ТекОбласть.ЦветРамки = WebЦвета.Серый;
			ТекОбласть.ЦветФона  = ЦветФонаОшибок;
			
			ТекЗаголовок = ТекОбласть.Текст;
			
			Если ОбщаяСтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.ШиринаКолонки = ОбщаяСтруктураШириныКолонок[ТекЗаголовок];
			КонецЕсли;
			Если СтруктураШириныКолонок.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.ШиринаКолонки = СтруктураШириныКолонок[ТекЗаголовок];
			КонецЕсли;
			
			Если ОбщаяСтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.Текст = ОбщаяСтруктураЗаголовков[ТекЗаголовок];
			КонецЕсли;
			Если СтруктураЗаголовков.Свойство(ТекЗаголовок) Тогда
				ТекОбласть.Текст = СтруктураЗаголовков[ТекЗаголовок];
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	ДеталиМакета = Макет.Область("Детали");
	ШапкаТаблицыМакета = Макет.Область("ШапкаТаблицы");
	Для НомСтроки = ДеталиМакета.Верх По ДеталиМакета.Низ Цикл
		Для НомКолонки = 2 По Макет.ШиринаТаблицы Цикл
			ТекОбласть = Макет.Область(НомСтроки, НомКолонки, НомСтроки, НомКолонки);
			ТекОбласть.ЦветРамки = WebЦвета.Серый;
			ТекИмяПараметра = ТекОбласть.Параметр;
			
			Если ОбщаяСтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.Формат = ОбщаяСтруктураФорматаПолей[ТекИмяПараметра];
			КонецЕсли;
			Если СтруктураФорматаПолей.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.Формат = СтруктураФорматаПолей[ТекИмяПараметра];
			КонецЕсли;
			
			Если ОбщаяСтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.ПараметрРасшифровки = ОбщаяСтруктураРасшифровки[ТекИмяПараметра];
			КонецЕсли;
			Если СтруктураРасшифровки.Свойство(ТекИмяПараметра) Тогда
				ТекОбласть.ПараметрРасшифровки = СтруктураРасшифровки[ТекИмяПараметра];
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Построитель.Макет = Макет;
	
	Построитель.Вывести(ТабДокумент);
	
КонецПроцедуры
 
///////////////////////////////////////////////////////////////////////////////////////
// Процедуры формирования табличного документа отчета

// Если проверки не выполняются, отчет формируется как бланк
// (например, при открытии формы)
Процедура СформироватьОтчет(ДокРезультат, ВыполнятьПроверки = Истина)Экспорт
	
	ВремТабДокумент   = Новый ТабличныйДокумент;
	ВидимостьОбластей = Новый Структура;
	
	КолВыполняемыхПроверок = 0;
	КолВыполненныхПроверок = 0;
	КолПроверокСОшибками   = 0;
	
	// Общее количество выполняемых проверок показываем в заголовке отчета и в строке состояния
	МассивВыполняемыхСтрокДерева = ДеревоПроверок.Строки.НайтиСтроки(Новый Структура("Включить", 1), Истина);
	Для каждого СтрокаДерева Из МассивВыполняемыхСтрокДерева Цикл
		Если НЕ СтрокаДерева.ЭтоГруппа Тогда
			КолВыполняемыхПроверок = КолВыполняемыхПроверок + 1;
		КонецЕсли;
	КонецЦикла;
		
	Если ВыполнятьПроверки Тогда
		
		КонецДатыКон = КонецДня(ДатаКон);
		
		// Очищаем результаты прошлых вычислений, которые делали проверки, чтобы они не влияли на текущий цикл
		ИсходящиеДанные = Новый Структура;
		
		ТекущийЭлемент = ДокРезультат;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЕсли;
	
	ДокРезультат.Очистить();
	Макет = ПолучитьМакет("МакетОтчета");
	
	// Общая ширина колонок для вывода детальных отчетов
	ОбщаяШиринаКолонокОтчета = 0;
	НомПервойКолонкиДетальногоОтчета = 6;
	Для НомКолонки = НомПервойКолонкиДетальногоОтчета По Макет.ШиринаТаблицы Цикл
		ОбщаяШиринаКолонокОтчета = ОбщаяШиринаКолонокОтчета + Макет.Область( , НомКолонки, , НомКолонки).ШиринаКолонки;
	КонецЦикла;
	
	ОбластьШапкиМакета               = Макет.ПолучитьОбласть("Шапка");
	ОбластьЗаголовкаМакета           = Макет.ПолучитьОбласть("Заголовок");
	ОбластьРазделаУчетаМакета        = Макет.ПолучитьОбласть("РазделУчета");
	ОбластьПроверкиМакета            = Макет.ПолучитьОбласть("Проверка");
	ОбластьПредметаКонтроляМакета    = Макет.ПолучитьОбласть("ПредметКонтроля");
	ОбластьКомментарияМакета         = Макет.ПолучитьОбласть("КомментарийРезультата");
	ОбластьПричинОшибокМакета        = Макет.ПолучитьОбласть("ПричиныОшибок");
	ОбластьРекомендацийМакета        = Макет.ПолучитьОбласть("Рекомендации");
	ОбластьПодвалаПроверкиМакета     = Макет.ПолучитьОбласть("ПодвалПроверки");
	ОбластьРазделителяРазделаМакета  = Макет.ПолучитьОбласть("РазделительРазделаУчета");
	
	// Выводим шапку и заголовок отчета
	СведенияОбОрганизации = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Организация);
	НазваниеОрганизации = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");;
	Если ПустаяСтрока(НазваниеОрганизации) Тогда
		НазваниеОрганизации = Организация.Наименование;
	КонецЕсли;
	ОбластьШапкиМакета.Параметры.НазваниеОрганизации = НазваниеОрганизации;
	ОбластьШапкиМакета.Параметры.ПериодПроверки      = ПериодПроверкиСтрокой;
	ДокРезультат.Вывести(ОбластьШапкиМакета);
	
	// Шапку скрываем
	ОбластьШапки = ДокРезультат.Область(1, , ДокРезультат.ВысотаТаблицы, );
	ОбластьШапки.Видимость = Ложь;
	
	ДокРезультат.Вывести(ОбластьЗаголовкаМакета);
	
	ОбластьНадписиОПроверках = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - 1, 2, ДокРезультат.ВысотаТаблицы - 1, 2);
	ОбластьНадписиОбОшибках  = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 2, ДокРезультат.ВысотаТаблицы, 2);
	ОбластьСтрокиНадписиОбОшибках  = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 2, ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
	
	ОбластьНадписиОПроверках.Текст = "Проведено проверок: 0 из " + КолВыполняемыхПроверок;
	ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
	ДокРезультат.Показать();
	
	// При открытии формы в отчете показываются только 2 верхние строки с количеством проверок
	Если НЕ ВыполнятьПроверки Тогда
		Возврат;
	КонецЕсли;
	
	РезультатПроверки = ?(ВыполнятьПроверки, "Выполняется проверка...", "Проверка не выполнялась");
	
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь, , , , "ПроверкаВыполнена");
	ИзменитьПометкуПодчиненных(ДеревоПроверок, Ложь, , , , "ОбнаруженыОшибки");
	
	НомерТекПроверки = 0;
	
	Для каждого СтрокаРаздела Из ДеревоПроверок.Строки Цикл
		
		//Полностью отключенные разделы пропускаем
		Если СтрокаРаздела.Включить = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Отделяем наименование раздела от проверок предыдущих разделов
		ДокРезультат.Вывести(ОбластьРазделителяРазделаМакета, 1);
		
		ЗаполнитьЗначенияСвойств(ОбластьРазделаУчетаМакета.Параметры, СтрокаРаздела);
		ОбластьРазделаУчетаМакета.Параметры.РезультатПроверки = РезультатПроверки;
		ДокРезультат.Вывести(ОбластьРазделаУчетаМакета, 1);
		
		//Задаем области раздела документа-результата имя - идентификатор раздела
		ОбластьРазделаУчета = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - ВысотаОбластей.РазделУчета + 1, , ДокРезультат.ВысотаТаблицы, );
		ОбластьРазделаУчета.Имя = СтрокаРаздела.Идентификатор;
		Если ВыполнятьПроверки Тогда
			// Выделяем выполняющийся раздел курсивом
			Курсив = Истина;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , , Курсив);
			
			ПроведеныПроверкиВРазделе = Ложь;
			КолОшибокВРазделе         = 0;
			
			ДокРезультат.Показать();
		КонецЕсли;
		
		РаскрыватьПроверкиРаздела = Ложь;
		ДокРезультат.НачатьГруппуСтрок(, РаскрыватьПроверкиРаздела); // Заголовки проверок
		
		// Отделяем наименование раздела от проверок
		ДокРезультат.Вывести(ОбластьРазделителяРазделаМакета, 2);
		
		Для каждого СтрокаПроверки Из СтрокаРаздела.Строки Цикл
			
			Если СтрокаПроверки.Включить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НомерТекПроверки = НомерТекПроверки + 1;
			НомерПервойСтрокиПроверки = ДокРезультат.ВысотаТаблицы + 1;
			// Выводим область заголовка проверки
			ЗаполнитьЗначенияСвойств(ОбластьПроверкиМакета.Параметры, СтрокаПроверки);
			ОбластьПроверкиМакета.Параметры.РезультатПроверки = РезультатПроверки;
			ДокРезультат.Вывести(ОбластьПроверкиМакета, 2);
			ОбластьСостоянияПроверки = ДокРезультат.Область(НомерПервойСтрокиПроверки, 11, НомерПервойСтрокиПроверки, 13);
			
			РаскрыватьДеталиПроверки = Ложь;
			ДокРезультат.НачатьГруппуСтрок(, РаскрыватьДеталиПроверки); // Детали проверки
			
			НомерПервойСтрокиДеталейПроверки = ДокРезультат.ВысотаТаблицы + 1;
			// Выводим область предмета контроля
			ЗаполнитьЗначенияСвойств(ОбластьПредметаКонтроляМакета.Параметры, СтрокаПроверки);
			ДокРезультат.Вывести(ОбластьПредметаКонтроляМакета, 3);
			
			ОбластьПроверки        = ДокРезультат.Область(НомерПервойСтрокиПроверки, , ДокРезультат.ВысотаТаблицы, );
			ОбластьДеталейПроверки = ДокРезультат.Область(НомерПервойСтрокиДеталейПроверки, , ДокРезультат.ВысотаТаблицы, );
			
			Если ВыполнятьПроверки Тогда
				
				Состояние("Выполняется проверка " + НомерТекПроверки + " из " + КолВыполняемыхПроверок + ": " + СтрокаПроверки.Наименование);
				
				ОбластьЗаголовкаПроверки = ДокРезультат.Область(НомерПервойСтрокиПроверки, , НомерПервойСтрокиПроверки, );
				Курсив = Истина;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , , Курсив);
				
				Если РаскрыватьПроверкиРаздела Тогда
					ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(ОбластьПроверки.Низ, 1, ОбластьПроверки.Низ, 1);
					ДокРезультат.Показать();
				КонецЕсли; 
				
				// Выполняем проверку правила
				ПроверитьПравило(СтрокаПроверки); 
				ПроверкаВыполнена = СтрокаПроверки.ПроверкаВыполнена;
				ОбнаруженыОшибки  = СтрокаПроверки.ОбнаруженыОшибки;
				
				Если ОбнаруженыОшибки Тогда
					КолПроверокСОшибками = КолПроверокСОшибками + 1;
					КолОшибокВРазделе    = КолОшибокВРазделе + 1;
				КонецЕсли;
				Если ПроверкаВыполнена Тогда
					КолВыполненныхПроверок = КолВыполненныхПроверок + 1;
					ПроведеныПроверкиВРазделе = Истина;
				КонецЕсли;
				
				Курсив = Ложь;
				ОбластьЗаголовкаПроверки.Шрифт = Новый Шрифт(ОбластьЗаголовкаПроверки.Шрифт, , , , Курсив);
				
				Если ПроверкаВыполнена И ОбнаруженыОшибки Тогда
					
					// Выделяем проверку с ошибками цветом фона
					ОбластьОшибки = ДокРезультат.Область(ОбластьЗаголовкаПроверки.Верх, 2, 
					                ОбластьЗаголовкаПроверки.Низ, ОбластьСостоянияПроверки.Лево - 1);
					ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
					ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
					ОбластьСостоянияПроверки.Текст      = "Обнаружены ошибки";
					ОбластьСостоянияПроверки.ЦветФона   = ЦветФонаКолОшибок;
					ОбластьСостоянияПроверки.ЦветТекста = ЦветТекстаКолОшибок;
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					ОбластьКомментария = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы - ВысотаОбластей.КомментарийРезультата + 1, 2, 
					                     ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
					ОбластьКомментария.ЦветФона = ЦветФонаОшибок;
					
					// Добавляем возможные причины ошибок 
					ОбластьПричинОшибокМакета.Параметры.ПричиныОшибок = СтрокаПроверки.ПричиныОшибокРезультата;
					ДокРезультат.Вывести(ОбластьПричинОшибокМакета);
					
					// Добавляем рекомендации по устранению ошибок
					ОбластьРекомендацийМакета.Параметры.Рекомендации = СтрокаПроверки.РекомендацииРезультата;
					ДокРезультат.Вывести(ОбластьРекомендацийМакета);
					
					// Добавляем детальный отчет об ошибках
					ВремТабДокумент = Новый ТабличныйДокумент;
					СформироватьДетальныйОтчет(СтрокаПроверки, ВремТабДокумент);
					
					Если ВремТабДокумент.ВысотаТаблицы > 0 Тогда
						
						ДокРезультат.НачатьГруппуСтрок( , Ложь);
						
						ОбластьДетальногоОтчета      = ВремТабДокумент.Область(1, 1, 
						ВремТабДокумент.ВысотаТаблицы, ВремТабДокумент.ШиринаТаблицы);
						НомПервойСтрокиНовогоФормата = ДокРезультат.ВысотаТаблицы + 1;
						ОбластьНовогоФорматаСтрок    = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, , 
						НомПервойСтрокиНовогоФормата + ВремТабДокумент.ВысотаТаблицы, );
						ОбластьНовогоФорматаСтрок.СоздатьФорматСтрок();
						ОбщаяШиринаКолонокДетальногоОтчета = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							ОбщаяШиринаКолонокДетальногоОтчета = ОбщаяШиринаКолонокДетальногоОтчета + ШиринаТекКолонки;
						КонецЦикла;
						КоэффИзмененияШирины = ?(ОбщаяШиринаКолонокДетальногоОтчета = 0, 1, ОбщаяШиринаКолонокОтчета / ОбщаяШиринаКолонокДетальногоОтчета);
						ИзменятьШиринуКолонок = КоэффИзмененияШирины <= 1.2;
						НоваяОбщаяШирина = 0;
						Для НомКолонки = 2 По ВремТабДокумент.ШиринаТаблицы - 1 Цикл
							ШиринаТекКолонки = ВремТабДокумент.Область(1, НомКолонки).ШиринаКолонки;
							Если ИзменятьШиринуКолонок Тогда
								НужнаяШирина = Окр(ШиринаТекКолонки * КоэффИзмененияШирины,0);
							Иначе
								НужнаяШирина = ШиринаТекКолонки;
							КонецЕсли;
							ДокРезультат.Область(НомПервойСтрокиНовогоФормата, НомКолонки + 4).ШиринаКолонки = НужнаяШирина;
							
							НоваяОбщаяШирина = НоваяОбщаяШирина + НужнаяШирина;
						КонецЦикла;
						
						ПоследняяЯчейка = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, ВремТабДокумент.ШиринаТаблицы + 4);
						Если ИзменятьШиринуКолонок Тогда
							ПоследняяЯчейка.ШиринаКолонки = ОбщаяШиринаКолонокОтчета - НоваяОбщаяШирина;
						Иначе
							ШиринаПоследнейКолонки = ВремТабДокумент.Область(1, ВремТабДокумент.ШиринаТаблицы).ШиринаКолонки;
							ПоследняяЯчейка.ШиринаКолонки = ШиринаПоследнейКолонки;
						КонецЕсли;
						
						ОбластьЗаголовка = ДокРезультат.Область(НомПервойСтрокиНовогоФормата, 6, НомПервойСтрокиНовогоФормата, 6);
						ОбластьЗаголовка.Текст = "Детальный отчет об ошибках";
						ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт, , 8, Истина);
						
						ОбластьПриемник = ДокРезультат.Область(НомПервойСтрокиНовогоФормата + 1, 5);
						ДокРезультат.ВставитьОбласть(ОбластьДетальногоОтчета, ОбластьПриемник);
						
						ДокРезультат.ЗакончитьГруппуСтрок();
					КонецЕсли;
					
				ИначеЕсли НЕ ПроверкаВыполнена Тогда
					
					ОбластьСостоянияПроверки.Текст      = "Проверка не выполнена";
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					
				Иначе // ПроверкаВыполнена И НЕ ОбнаруженыОшибки
					
					ОбластьСостоянияПроверки.Текст      = "Ошибок не обнаружено";
					
					// Добавляем комментарий результата
					ОбластьКомментарияМакета.Параметры.КомментарийРезультата = СтрокаПроверки.КомментарийРезультата;
					ДокРезультат.Вывести(ОбластьКомментарияМакета);
					
				КонецЕсли;
				
				// Переопределяем область проверки и область деталей проверки - включаем добавленные строки
				ОбластьПроверки        = ДокРезультат.Область(НомерПервойСтрокиПроверки, , ДокРезультат.ВысотаТаблицы, );
				ОбластьДеталейПроверки = ДокРезультат.Область(НомерПервойСтрокиДеталейПроверки, , ДокРезультат.ВысотаТаблицы, );
				
			КонецЕсли;
			
			// Добавляем область - разделитель
			ДокРезультат.Вывести(ОбластьПодвалаПроверкиМакета);
			
			ДокРезультат.ЗакончитьГруппуСтрок(); // Строки деталей проверки
			
			ОбластьПроверки.Имя = СтрокаПроверки.Идентификатор;
			ОбластьДеталейПроверки.Имя = "Детали"+СтрокаПроверки.Идентификатор;
				
			Если ВыполнятьПроверки Тогда
				Если РаскрыватьПроверкиРаздела Тогда
					ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(ДокРезультат.ВысотаТаблицы, 1, ДокРезультат.ВысотаТаблицы, 1);
				КонецЕсли;
				
				ОбластьНадписиОПроверках.Текст = "Проведено проверок: " + КолВыполненныхПроверок +" из " + КолВыполняемыхПроверок;
				ОбластьНадписиОбОшибках.Текст = "Обнаружено ошибок: " + КолПроверокСОшибками;
				Если КолПроверокСОшибками > 0 Тогда
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаОшибок;
				Иначе
					ОбластьСтрокиНадписиОбОшибках.ЦветФона = ЦветФонаБезОшибок;
				КонецЕсли;
				
				НомерПоследнейСтрокиПроверки = ДокРезультат.ВысотаТаблицы;
				ДокРезультат.Область(НомерПервойСтрокиПроверки, ,НомерПоследнейСтрокиПроверки, ).Видимость = Ложь;
				
				ДокРезультат.Показать();
				
			КонецЕсли; 
				
		КонецЦикла;
		
		ДокРезультат.ЗакончитьГруппуСтрок(); // Строки проверок раздела
		
		Если ВыполнятьПроверки Тогда
			
			СтрокаРаздела.ОбнаруженыОшибки = КолОшибокВРазделе > 0;
			
			Курсив = Ложь;
			ОбластьРазделаУчета.Шрифт = Новый Шрифт(ОбластьРазделаУчета.Шрифт, , , , Курсив);
			
			ОбластьСостоянияРаздела = ДокРезультат.Область(ОбластьРазделаУчета.Верх, 11, ОбластьРазделаУчета.Верх, 13);
			Если СтрокаРаздела.ОбнаруженыОшибки Тогда
				// Выделяем раздел с ошибками цветом
				ОбластьОшибки = ДокРезультат.Область(ОбластьРазделаУчета.Верх, 2, ОбластьРазделаУчета.Низ, ОбластьСостоянияРаздела.Лево - 1);
				ОбластьОшибки.ЦветФона   = ЦветФонаОшибок;
				ОбластьОшибки.ЦветТекста = ЦветТекстаОшибок;
				ОбластьСостоянияРаздела.Текст  = "Обнаружены ошибки (" + КолОшибокВРазделе + ")";
				ОбластьСостоянияРаздела.ЦветФона   = ЦветФонаКолОшибок;
				ОбластьСостоянияРаздела.ЦветТекста = ЦветТекстаКолОшибок;
			ИначеЕсли ПроведеныПроверкиВРазделе Тогда
				ОбластьСостоянияРаздела.Текст = "Ошибок не обнаружено";
			Иначе
				ОбластьСостоянияРаздела.Текст = "Проверка не выполнена";
			КонецЕсли;
			
			ДокРезультат.Показать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДокРезультат.ТолькоПросмотр = Истина;
	ДокРезультат.ФиксацияСверху = ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок;
	//ДокРезультат.ПовторятьПриПечатиСтроки = ДокРезультат.Область(ВысотаОбластей.Шапка + 1, , ВысотаОбластей.Шапка + ВысотаОбластей.Заголовок);
	ДокРезультат.ОбластьПечати = ДокРезультат.Область(1, 2, ДокРезультат.ВысотаТаблицы, ДокРезультат.ШиринаТаблицы);
	ДокРезультат.ИмяПараметровПечати = "ЭкспрессПроверкаВеденияУчета";
	
	ДокРезультат.ТекущаяОбласть = ДокРезультат.Область(1, 1, 1, 1);
	ДокРезультат.Показать();
	
КонецПроцедуры

# КонецЕсли

# Если Клиент Тогда
НП = Новый НастройкаПериода;
НП.РедактироватьКакПериод   = Истина;
НП.РедактироватьКакИнтервал = Ложь;
НП.ВариантНастройки         = ВариантНастройкиПериода.Период;

ЦветФонаОшибок       = Новый Цвет(253, 236, 229); // светло-розовый
ЦветТекстаОшибок     = Новый Цвет(83, 23, 22);    // темно-коричневый
ЦветФонаКолОшибок    = Новый Цвет(240, 54, 0);    // красный
ЦветТекстаКолОшибок  = Новый Цвет(255, 240, 96);  // ярко-желтый
ЦветФонаБезОшибок    = Новый Цвет(249, 255, 236); // светло-зеленый

# КонецЕсли
	
ВысотаОбластей = Новый Структура;
Макет   = ПолучитьМакет("МакетОтчета");
ВысотаОбластей.Вставить("Шапка", Макет.ПолучитьОбласть("Шапка").ВысотаТаблицы);
ВысотаОбластей.Вставить("Заголовок", Макет.ПолучитьОбласть("Заголовок").ВысотаТаблицы);
ВысотаОбластей.Вставить("РазделУчета", Макет.ПолучитьОбласть("РазделУчета").ВысотаТаблицы);
ВысотаОбластей.Вставить("Проверка", Макет.ПолучитьОбласть("Проверка").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПредметКонтроля", Макет.ПолучитьОбласть("ПредметКонтроля").ВысотаТаблицы);
ВысотаОбластей.Вставить("КомментарийРезультата", Макет.ПолучитьОбласть("КомментарийРезультата").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПричиныОшибок", Макет.ПолучитьОбласть("ПричиныОшибок").ВысотаТаблицы);
ВысотаОбластей.Вставить("Рекомендации", Макет.ПолучитьОбласть("Рекомендации").ВысотаТаблицы);
ВысотаОбластей.Вставить("ПодвалПроверки", Макет.ПолучитьОбласть("ПодвалПроверки").ВысотаТаблицы);
ВысотаОбластей.Вставить("РазделительРазделаУчета", Макет.ПолучитьОбласть("РазделительРазделаУчета").ВысотаТаблицы);

ОписаниеТипаСуммы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));

ОбщаяСтруктураФорматаПолей = Новый Структура;
ОбщаяСтруктураФорматаПолей.Вставить("ПериодГод", "ДФ = ""гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодКвартал", "ДФ = ""к"""" квартал"""" гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодМесяц", "ДФ = ""ММММ гггг """"г.""""""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодНеделя","ДФ = """"""Неделя с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодДень", "ДФ = дд.ММ.гггг");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодДекада","ДФ = """"""Декада с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("ПериодПолугодие","ДФ = """"""Полугодие с"""" дд.ММ.гггг """"""");
ОбщаяСтруктураФорматаПолей.Вставить("НачПериода", "ДФ = дд.ММ.гггг");
ОбщаяСтруктураФорматаПолей.Вставить("КонПериода", "ДФ = дд.ММ.гггг");

ОбщаяСтруктураЗаголовков = Новый Структура;
ОбщаяСтруктураЗаголовков.Вставить("ПериодГод", "Год");
ОбщаяСтруктураЗаголовков.Вставить("ПериодКвартал", "Квартал");
ОбщаяСтруктураЗаголовков.Вставить("ПериодМесяц", "Месяц");
ОбщаяСтруктураЗаголовков.Вставить("ПериодНеделя","Неделя");
ОбщаяСтруктураЗаголовков.Вставить("ПериодДень", "День");
ОбщаяСтруктураЗаголовков.Вставить("ПериодДекада","Декада");
ОбщаяСтруктураЗаголовков.Вставить("ПериодПолугодие","Полугодие");
ОбщаяСтруктураЗаголовков.Вставить("НачПериода", "Начало периода");
ОбщаяСтруктураЗаголовков.Вставить("КонПериода", "Конец периода");

ОбщаяСтруктураШириныКолонок = Новый Структура;
ОбщаяСтруктураШириныКолонок.Вставить("Документ", 40);
ОбщаяСтруктураШириныКолонок.Вставить("Дата", 20);

ОбщаяСтруктураРасшифровки = Новый Структура;
ОбщаяСтруктураРасшифровки.Вставить("Документ", "Документ");