Перем КоличествоЭтапов;
Перем КоличествоШагов;
Перем СписокШагов;
Перем мОбъектКИ;
Перем Этап;
Перем Шаг;
Перем Базовая;
Перем Руководители;
Перем ЕстьПартионныйУчет;
Перем БуферОрганизации;
Перем БуферЗаполнен;
Перем мСтруктураРедактированияКИ;
Перем АвтоНаименование;

////////////////////////////////////////////////////////////////////////////
//ОБРАБОТКА ОСНОВНЫХ ДЕЙСТВИЙ ФОРМЫ И НАВИГАЦИИ ПО СТРАНИЦАМ
////////////////////////////////////////////////////////////////////////////

Процедура КнопкаНазад(Элемент)
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Если (Шаг > 1) И НЕ(Этап = 1 И Шаг = 2)Тогда
		Шаг = Шаг - 1;
	Иначе
		Если Этап > 1 Тогда
			Этап = Этап - 1;
			ОпределитьКоличествоШагов();
			Шаг = КоличествоШагов;
						
		КонецЕсли;
	КонецЕсли;
	ПроверитьБуфер();
	УстановитьСтраницу();
КонецПроцедуры

Процедура КнопкаВпередНажатие(Элемент)
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
	КонецЕсли;
	ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
	Если Шаг < КоличествоШагов Тогда
		Шаг = Шаг + 1;
	Иначе
		Если Этап < КоличествоЭтапов Тогда
			Этап = Этап + 1;
			ОпределитьКоличествоШагов();
			Шаг = 1;
		Иначе
			Шаг = 0;
			Этап = 0;
		КонецЕсли;
	КонецЕсли;
				
	ОбработатьНажатиеВперед();
	УстановитьСтраницу();
КонецПроцедуры

Процедура ПриОткрытии()
		
	Этап = 1;
	Шаг = 1;
	Базовая = (Метаданные.Имя = "БухгалтерияПредприятияБазовая");
	ОпределитьКоличествоЭтапов();
	ОпределитьКоличествоШагов();
	ГодУП = '19800101';
	БуферЗаполнен = Ложь;
	//Дерево
	ЗаполнитьДеревоШагов();
	//Наполнение первой страницы
	ОбработатьНажатиеВперед();
	УстановитьСтраницу();
	
КонецПроцедуры

Процедура УстановитьСтраницу()
	Если (Шаг = 0 ) И (Этап = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПанельЭтапов.ТекущаяСтраница = ЭлементыФормы.ПанельЭтапов.Страницы[Этап - 1];
	ЭлементыФормы.ПанельКартинки.ТекущаяСтраница = ЭлементыФормы.ПанельКартинки.Страницы[Этап - 1];
	ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].ТекущаяСтраница = ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].Страницы[Шаг - 1];
	
//	ЭлементыФормы.КнопкаНазад.Доступность = НЕ (Этап = 1 И Шаг = 1);
//	ЭлементыФормы.КнопкаВперед.Доступность = НЕ (Этап = КоличествоЭтапов И Шаг = КоличествоШагов);
	ЭлементыФормы.НадписьНазад.Видимость = НЕ (Этап = 1 И Шаг <= 2);
//	ЭлементыФормы.КнопкаВперед.Доступность = НЕ (Этап = КоличествоЭтапов И Шаг = КоличествоШагов);
	
	Если Шаг > 1 Тогда
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_" + Строка(Шаг)].Шрифт = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
	Иначе
		ЭлементыФормы.ПолеТабличногоДокумента1.Области[Строка(Этап) + "_"].Шрифт = Новый Шрифт(, 10, Истина, Ложь, Ложь, Ложь);
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура УстановитьДоступность()
	
	ДоступностьВперед = Истина;
	
	Если ((Этап = 1) И (Шаг = 2)) Тогда
		// {УчетДоходовИРасходовИП
		ЭлементыФормы.ЮрФизЛицо.Доступность = (НЕ Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя);
		// }УчетДоходовИРасходовИП
		ДоступностьВперед = ЗначениеЗаполнено(Организация.Наименование);
		
		Если НЕ ЗначениеЗаполнено(Организация.ЮрФизЛицо) Тогда
			ЭлементыФормы.ПредупреждениеИНН.Заголовок = "Не указан тип организации (юр./физ. лицо)";
			ДоступностьВперед = Ложь;
		Иначе
			ТекстЗаголовок = "Не корректное значение ";
			ОшибкаИНН = Ложь;
			ОшибкаКПП = Ложь;
			Если (НЕ ПустаяСтрока(Организация.ИНН)) Тогда
				ОшибкаИНН = (НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Организация.ИНН, Организация.ЮрФизЛицо));
			КонецЕсли;
			Если (НЕ ПустаяСтрока(Организация.КПП)) Тогда
				ОшибкаКПП = (СтрДлина(Организация.КПП) <> 9);
			КонецЕсли;
			Если ОшибкаИНН ИЛИ ОшибкаКПП Тогда
				ТекстЗаголовок = ТекстЗаголовок + ?(ОшибкаИНН, "ИНН", "") + ?(ОшибкаКПП, ?(ОшибкаИНН, " и ", "") + "КПП", "");
				ТекстЗаголовок = ТекстЗаголовок + ". Укажите корректное значение или очистите поле.";
				ЭлементыФормы.ПредупреждениеИНН.Заголовок = ТекстЗаголовок;
				ДоступностьВперед = Ложь;			
			Иначе
				ЭлементыФормы.ПредупреждениеИНН.Заголовок = "";			
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ((Этап = 1) И (Шаг = 3)) Тогда
		ЕстьСчет = ЗначениеЗаполнено(НомерСчета);
		ЕстьБанк = ЗначениеЗаполнено(Банк.Код);
		ЕстьБанкКорр = ЗначениеЗаполнено(БанкДляРасчетов.Код);
		
		ЭлементыФормы.БанкНаименование.Доступность 	= ЕстьБанк;
		//ЭлементыФормы.КоррСчет.Доступность 			= ЕстьБанк;
		ЭлементыФормы.БанкГород.Доступность 		= ЕстьБанк;
		
		ЭлементыФормы.БанкНаименование1.Доступность = ЕстьБанкКорр;
		//ЭлементыФормы.КоррСчет1.Доступность 		= ЕстьБанкКорр;
		ЭлементыФормы.БанкГород1.Доступность 		= ЕстьБанкКорр;
		
		Если ЕстьСчет и (НЕ ЕстьБанк) Тогда
			ДоступностьВперед = Ложь;
		КонецЕсли;
		
	ИначеЕсли ((Этап = 1) И (Шаг = 4)) Тогда
		ЗаполнитьКИ();
		
	КонецЕсли;
	
	Если (Этап = КоличествоЭтапов) и (Шаг = КоличествоШагов) Тогда
		ЭлементыФормы.ПанельКнопок.ТекущаяСтраница = ЭлементыФормы.ПанельКнопок.Страницы.Готово;
	Иначе
		ЭлементыФормы.ПанельКнопок.ТекущаяСтраница = ЭлементыФормы.ПанельКнопок.Страницы.Далее;
	Конецесли;
	
	ЭлементыФормы.КнопкаВперед.Доступность = ДоступностьВперед;
	ЭлементыФормы.НадписьВперед.Доступность = ДоступностьВперед;
	
КонецПроцедуры

Процедура ОпределитьКоличествоЭтапов()
	КоличествоЭтапов = ЭлементыФормы.ПанельЭтапов.Страницы.Количество();
КонецПроцедуры

Процедура ОпределитьКоличествоШагов()
	КоличествоШагов = ЭлементыФормы["ШагиЭтапа" + Строка(Этап)].Страницы.Количество();	
КонецПроцедуры

Процедура ЗаполнитьДеревоШагов()
	
	НомерСтроки = 2;
	Отступ = "	";
	
	Для Каждого СтраницаЭтапа из ЭлементыФормы.ПанельЭтапов.Страницы Цикл
		НомерЭтапа = ЭлементыФормы.ПанельЭтапов.Страницы.Индекс(СтраницаЭтапа)+1;
		
		Область = ЭлементыФормы.ПолеТабличногоДокумента1.Область(НомерСтроки,2,НомерСтроки,4);
		Область.Шрифт = Новый Шрифт(, 10, Ложь, Ложь, Ложь, Ложь);
		Область.Объединить();
		Область.Имя = Строка(НомерЭтапа) + "_";
		Область.Текст = СтраницаЭтапа.Заголовок;
		НомерСтроки = НомерСтроки + 1;
		
		Для Каждого Страница ИЗ ЭлементыФормы["ШагиЭтапа" + Строка(НомерЭтапа)].Страницы Цикл
			
			НомерШага = ЭлементыФормы["ШагиЭтапа" + Строка(НомерЭтапа)].Страницы.Индекс(Страница)+1;
			Если НомерШага > 1 Тогда
				Область = ЭлементыФормы.ПолеТабличногоДокумента1.Область(НомерСтроки,3,НомерСтроки,4);
				Область.Объединить();
				Область.Имя = Строка(НомерЭтапа) + "_" + Строка(НомерШага);
				Область.Шрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
				Область.Текст = Страница.Заголовок;
				НомерСтроки = НомерСтроки + 1;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
//ОСНОВНАЯ ОБРАБОТКА ВВЕДЕННЫХ ДАННЫХ
////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьБуфер()
	Если (Этап = 1) И (Шаг = КоличествоШагов) И БуферЗаполнен Тогда
		Этап = 2;
		ОпределитьКоличествоШагов();
		Шаг = КоличествоШагов;
		
		Организация				= БуферОрганизации.Организация;
		Банк					= БуферОрганизации.Банк;
		ОсновнойБанковскийСчет 	= БуферОрганизации.ОсновнойБанковскийСчет;
		СчетБанк 				= БуферОрганизации.СчетБанк;
		БанкДляРасчетов 		= БуферОрганизации.БанкДляРасчетов;
		БСчетНаименование 		= БуферОрганизации.БСчетНаименование;
		НомерСчета 				= БуферОрганизации.НомерСчета;
								
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьНажатиеВперед() Экспорт
	Если Этап = 1 Тогда
		//Пропустим пустую страницу
		Если (Шаг = 1) Тогда
			Шаг = 2;
		КонецЕсли;	
		Если (Шаг = 2) Тогда
			
			Организация				= Неопределено;
			Банк					= Неопределено;
			ОсновнойБанковскийСчет 	= Неопределено;
			СчетБанк 				= Неопределено;
			БанкДляРасчетов 		= Неопределено;
			БСчетНаименование 		= Неопределено;
			НомерСчета 				= Неопределено;
						
			Если Базовая Тогда
				Выборка = Справочники.Организации.Выбрать();
				Если Выборка.Следующий() Тогда
					Организация = Выборка.ПолучитьОбъект();
				Иначе
					Организация = Справочники.Организации.СоздатьЭлемент();
					Организация.ВидСтавокЕСНиПФР	= Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
					Организация.ЮрФизЛицо			= Перечисления.ЮрФизЛицо.ЮрЛицо;
					Организация.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
					// {УчетДоходовИРасходовИП
					Организация.ЮрФизЛицо			= ?(Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя, Перечисления.ЮрФизЛицо.ФизЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо);
					// }УчетДоходовИРасходовИП
				КонецЕсли;
			Иначе
				ОрганизацияСсылка = Справочники.Организации.НайтиПоНаименованию("Наша организация", Истина);
				// {УчетДоходовИРасходовИП
				Если ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка() Тогда
					ОрганизацияСсылка = Справочники.Организации.НайтиПоНаименованию("Предприниматель", Истина);
				КонецЕсли;
				// }УчетДоходовИРасходовИП
				ЗаполнитьНачальнуюОрганизацию = Ложь;
				Если НЕ ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка() Тогда
					ПолнНаименование = СокрЛП(ОрганизацияСсылка.НаименованиеПолное);
					Если ПолнНаименование = "Наша организация"
					// {УчетДоходовИРасходовИП
					 ИЛИ ПолнНаименование = "Предприниматель"
					// }УчетДоходовИРасходовИП
					 ИЛИ ПолнНаименование = "" Тогда
						
						КоличествоОрганизаций = 1;
						Запрос = Новый Запрос();
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Организации.Ссылка) КАК КоличествоОрганизаций
						|ИЗ
						|	Справочник.Организации КАК Организации";
						Выборка = Запрос.Выполнить().Выбрать();
						Если Выборка.Следующий() Тогда
							КоличествоОрганизаций = Выборка.КоличествоОрганизаций;
						КонецЕсли;
						
						Если (КоличествоОрганизаций = 1) Тогда
					        ЗаполнитьНачальнуюОрганизацию = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЗаполнитьНачальнуюОрганизацию Тогда
					Организация = ОрганизацияСсылка.ПолучитьОбъект();
				Иначе
					Организация = Справочники.Организации.СоздатьЭлемент();
					Организация.ВидСтавокЕСНиПФР	= Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
					Организация.ЮрФизЛицо			= Перечисления.ЮрФизЛицо.ЮрЛицо;
					Организация.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
					// {УчетДоходовИРасходовИП
					Организация.ЮрФизЛицо			= ?(Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя, Перечисления.ЮрФизЛицо.ФизЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо);
					// }УчетДоходовИРасходовИП
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (Шаг = 3) Тогда //Запись организации
			
			// {УчетДоходовИРасходовИП
			Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо И НЕ ЗначениеЗаполнено(Организация.ИндивидуальныйПредприниматель) Тогда
				Предприниматель = Справочники.ФизическиеЛица.НайтиПоНаименованию(Организация.Наименование);
				Если Предприниматель = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
					ПредпринимательОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();					
				Иначе
					ПредпринимательОбъект = Предприниматель.ПолучитьОбъект();				
				КонецЕсли;
				ПредпринимательОбъект.Наименование 	= Организация.Наименование;
				ПредпринимательОбъект.ИНН 			= Организация.ИНН;
				ПредпринимательОбъект.Записать();
				
				Организация.ИндивидуальныйПредприниматель = ПредпринимательОбъект.Ссылка;
				
			КонецЕсли;
			// }УчетДоходовИРасходовИП
			
			Организация.Записать();
			РаботаСДиалогами.УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации();
			ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();	
			
			Если ЗначениеЗаполнено(Организация.ОсновнойБанковскийСчет) Тогда
				
				ОсновнойБанковскийСчет 	= Организация.ОсновнойБанковскийСчет;
				СчетБанк 				= ОсновнойБанковскийСчет.Банк;
				БанкДляРасчетов 		= ОсновнойБанковскийСчет.БанкДляРасчетов;
				БСчетНаименование 		= ОсновнойБанковскийСчет.Наименование;
				НомерСчета 				= ОсновнойБанковскийСчет.НомерСчета;
							
				Если ЗначениеЗаполнено(ОсновнойБанковскийСчет.Банк) Тогда
					Банк = ОсновнойБанковскийСчет.Банк.ПолучитьОбъект();
				КонецЕсли;
				Если ЗначениеЗаполнено(ОсновнойБанковскийСчет.БанкДляРасчетов) Тогда
					БанкДляРасчетов = ОсновнойБанковскийСчет.БанкДляРасчетов.ПолучитьОбъект();
				КонецЕсли;
				
			Иначе
				
				Банк					= Неопределено;
				ОсновнойБанковскийСчет 	= Неопределено;
				СчетБанк 				= Неопределено;
				БанкДляРасчетов 		= Неопределено;
				БСчетНаименование 		= Неопределено;
				НомерСчета 				= Неопределено;
				
			КонецЕсли;
			
		ИначеЕсли (Шаг = 4) Тогда
			
			СчетБанк = Справочники.Банки.ПустаяСсылка();
			СчетБанкДляРасчетов = Справочники.Банки.ПустаяСсылка();
			
			Если НЕ(НЕ ЗначениеЗаполнено(Банк.Код)) Тогда
				Банк.Записать();
				СчетБанк = Банк.Ссылка;
			КонецЕсли;
			Если (НЕ(НЕ ЗначениеЗаполнено(Банк.Код))) И (НЕ(НЕ ЗначениеЗаполнено(БанкДляРасчетов.Код))) И (Банк.Код = БанкДляРасчетов.Код) Тогда
				//Банк корреспондент и банк равны, банк корреспондент не запоминаем
			Иначе
				Если НЕ(НЕ ЗначениеЗаполнено(БанкДляРасчетов.Код)) Тогда
					БанкДляРасчетов.Записать();
					СчетБанкДляРасчетов = БанкДляРасчетов.Ссылка;
				КонецЕсли;
			КонецЕсли;
						
			Если (ЗначениеЗаполнено(НомерСчета)) И (ЗначениеЗаполнено(СчетБанк)) Тогда
				Если НЕ ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
					БанковскийСчетСсылка = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", НомерСчета,, Организация.Ссылка);
					Если БанковскийСчетСсылка = Справочники.БанковскиеСчета.ПустаяСсылка() Тогда
						БанковскийСчетОбъект = Справочники.БанковскиеСчета.СоздатьЭлемент();
					Иначе
						БанковскийСчетОбъект = БанковскийСчетСсылка.ПолучитьОбъект();
					КонецЕсли;
				Иначе
					БанковскийСчетОбъект = ОсновнойБанковскийСчет.ПолучитьОбъект();
				КонецЕсли;
                				
				БанковскийСчетОбъект.Банк 					= СчетБанк;
				БанковскийСчетОбъект.БанкДляРасчетов 		= СчетБанкДляРасчетов;
				БанковскийСчетОбъект.ВалютаДенежныхСредств 	= Константы.ВалютаРегламентированногоУчета.Получить();
				БанковскийСчетОбъект.ВидСчета 				= "Расчетный";
				БанковскийСчетОбъект.Владелец 				= Организация.Ссылка;
				БанковскийСчетОбъект.Наименование 			= БСчетНаименование;
				БанковскийСчетОбъект.НомерСчета 			= НомерСчета;
				
				Попытка
					БанковскийСчетОбъект.Записать();
					ОсновнойБанковскийСчет = БанковскийСчетОбъект.Ссылка;
					
					Организация.ОсновнойБанковскийСчет = ОсновнойБанковскийСчет;
					Организация.Записать();
					
				Исключение
					
				КонецПопытки;
											
			КонецЕсли;
						
		ИначеЕсли (Шаг = 5) Тогда
			
			Если мОбъектКИ <> Неопределено Тогда
				Отказ = Ложь;
				УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);
			КонецЕсли;
			
			Фамилия1 	= "";
			Фамилия2 	= "";
			Фамилия3 	= "";
			Имя1 		= "";
			Имя2 		= "";
			Имя3 		= "";
			Отчество1 	= "";
			Отчество2 	= "";
			Отчество3 	= "";
			Должность1 	= "";
			Должность2 	= "";
			Должность3 	= "";
										
			Руководители = Неопределено;
			Руководители = ОбщегоНазначения.ОтветственныеЛица(Организация.Ссылка, НачалоГода(ГодУП));
			
			Если ЗначениеЗаполнено(Руководители.РуководительФИО) Тогда
				Фамилия1 	= Руководители.РуководительФИО.Фамилия;
				Имя1 		= Руководители.РуководительФИО.Имя;
				Отчество1 	= Руководители.РуководительФИО.Отчество;			
			КонецЕсли;
			Если ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
				Должность1 	= Руководители.РуководительДолжность.Наименование;			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерФИО) Тогда
				Фамилия2 	= Руководители.ГлавныйБухгалтерФИО.Фамилия;
				Имя2 		= Руководители.ГлавныйБухгалтерФИО.Имя;
				Отчество2 	= Руководители.ГлавныйБухгалтерФИО.Отчество;			
			КонецЕсли;
			Если ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДолжность) Тогда
				Должность2 	= Руководители.ГлавныйБухгалтерДолжность.Наименование;			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Руководители.КассирФИО) Тогда
				Фамилия3 	= Руководители.КассирФИО.Фамилия;
				Имя3 		= Руководители.КассирФИО.Имя;
				Отчество3 	= Руководители.КассирФИО.Отчество;			
			КонецЕсли;
			Если ЗначениеЗаполнено(Руководители.КассирДолжность) Тогда
				Должность3 	= Руководители.КассирДолжность.Наименование;			
			КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (Шаг = 0) И (Этап = 0) Тогда //КНОПКА "ГОТОВО"
			
			//Запишем ответственных лиц
			//РУКОВОДИТЕЛЬ
			//Создаем должность
			Если НЕ ПустаяСтрока(Должность1) Тогда
				Если НЕ ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
					Руководители.РуководительДолжность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Должность1, истина);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Руководители.РуководительДолжность) Тогда
					Должность = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
				Иначе
					Должность = Руководители.РуководительДолжность.ПолучитьОбъект();
				КонецЕсли;
				Должность.Наименование = Должность1;
				Должность.Записать();
				Руководители.РуководительДолжность = Должность.Ссылка;
			КонецЕсли;
			//Создаем Физ лицо
			Если НЕ ПустаяСтрока(Фамилия1) Тогда
				ФИО = Фамилия1 + " " + Имя1 + " " + Отчество1;
				Если НЕ ЗначениеЗаполнено(Руководители.Руководитель) Тогда
					Руководители.Руководитель = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО, истина);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Руководители.Руководитель) Тогда
					ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				Иначе
					ФизЛицо = Руководители.Руководитель.ПолучитьОбъект();
				КонецЕсли;
				ФизЛицо.Наименование = ФИО;
				ФизЛицо.Записать();
				Руководители.Руководитель = ФизЛицо.Ссылка;
				
				Запись = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
				Запись.Период 	= НачалоГода(ГодУП);
				Запись.ФизЛицо 	= Руководители.Руководитель;
				Запись.Фамилия 	= Фамилия1;
				Запись.Имя 		= Имя1;
				Запись.Отчество = Отчество1;
				Запись.Записать();
				
				Запись = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
				Запись.Период 				= НачалоГода(ГодУП);
				Запись.ОтветственноеЛицо 	= Перечисления.ОтветственныеЛицаОрганизаций.Руководитель;
				Запись.СтруктурнаяЕдиница 	= Организация.Ссылка;
				Запись.ФизическоеЛицо 		= Руководители.Руководитель;
				Запись.Должность 	  		= Руководители.РуководительДолжность;
				Запись.Записать();
			КонецЕсли;
			
			//ГЛАВНЫЙ БУХГАЛТЕР
			//Создаем должность
			Если НЕ ПустаяСтрока(Должность2) Тогда
				Если НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДолжность) Тогда
					Руководители.ГлавныйБухгалтерДолжность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Должность2, истина);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтерДолжность) Тогда
					Должность = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
				Иначе
					Должность = Руководители.ГлавныйБухгалтерДолжность.ПолучитьОбъект();
				КонецЕсли;
				Должность.Наименование = Должность2;
				Должность.Записать();
				Руководители.ГлавныйБухгалтерДолжность = Должность.Ссылка;
			КонецЕсли;
			//Создаем Физ лицо
			Если НЕ ПустаяСтрока(Фамилия2) Тогда
				ФИО = Фамилия2 + " " + Имя2 + " " + Отчество2;
				Если НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
					Руководители.ГлавныйБухгалтер = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО, истина);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Руководители.ГлавныйБухгалтер) Тогда
					ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				Иначе
					ФизЛицо = Руководители.ГлавныйБухгалтер.ПолучитьОбъект();
				КонецЕсли;
				ФизЛицо.Наименование = ФИО;
				ФизЛицо.Записать();
				Руководители.ГлавныйБухгалтер = ФизЛицо.Ссылка;
				
				Запись = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
				Запись.Период 	= НачалоГода(ГодУП);
				Запись.ФизЛицо 	= Руководители.ГлавныйБухгалтер;
				Запись.Фамилия 	= Фамилия2;
				Запись.Имя 		= Имя2;
				Запись.Отчество = Отчество2;
				Запись.Записать();
				
				Запись = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
				Запись.Период 				= НачалоГода(ГодУП);
				Запись.ОтветственноеЛицо 	= Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер;
				Запись.СтруктурнаяЕдиница 	= Организация.Ссылка;
				Запись.ФизическоеЛицо 		= Руководители.ГлавныйБухгалтер;
				Запись.Должность 	  		= Руководители.ГлавныйБухгалтерДолжность;
				Запись.Записать();
			КонецЕсли;
			
			//КАССИР
			//Создаем должность
			Если НЕ ПустаяСтрока(Должность3) Тогда
				Если НЕ ЗначениеЗаполнено(Руководители.КассирДолжность) Тогда
					Руководители.КассирДолжность = Справочники.ДолжностиОрганизаций.НайтиПоНаименованию(Должность3, истина);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Руководители.КассирДолжность) Тогда
					Должность = Справочники.ДолжностиОрганизаций.СоздатьЭлемент();
				Иначе
					Должность = Руководители.КассирДолжность.ПолучитьОбъект();
				КонецЕсли;
				Должность.Наименование = Должность3;
				Должность.Записать();
				Руководители.КассирДолжность = Должность.Ссылка;
			КонецЕсли;
			//Создаем Физ лицо
			Если НЕ ПустаяСтрока(Фамилия3) Тогда
				ФИО = Фамилия3 + " " + Имя3 + " " + Отчество3;
				Если НЕ ЗначениеЗаполнено(Руководители.Кассир) Тогда
					Руководители.Кассир = Справочники.ФизическиеЛица.НайтиПоНаименованию(ФИО, истина);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Руководители.Кассир) Тогда
					ФизЛицо = Справочники.ФизическиеЛица.СоздатьЭлемент();
				Иначе
					ФизЛицо = Руководители.Кассир.ПолучитьОбъект();
				КонецЕсли;
				ФизЛицо.Наименование = ФИО;
				ФизЛицо.Записать();
				Руководители.Кассир = ФизЛицо.Ссылка;
				
				Запись = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
				Запись.Период 	= НачалоГода(ГодУП);
				Запись.ФизЛицо 	= Руководители.Кассир;
				Запись.Фамилия 	= Фамилия3;
				Запись.Имя 		= Имя3;
				Запись.Отчество = Отчество3;
				Запись.Записать();
				
				Запись = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
				Запись.Период 				= НачалоГода(ГодУП);
				Запись.ОтветственноеЛицо 	= Перечисления.ОтветственныеЛицаОрганизаций.Кассир;
				Запись.СтруктурнаяЕдиница 	= Организация.Ссылка;
				Запись.ФизическоеЛицо 		= Руководители.Кассир;
				Запись.Должность 	  		= Руководители.КассирДолжность;
				Запись.Записать();
			КонецЕсли;
					
			Закрыть();
		
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////
//ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
////////////////////////////////////////////////////////////////////////////

//ЭТАП 1, ШАГ 2
//
Процедура ОргНаименованиеПриИзменении(Элемент)
	
	ОрганизацияСсылка = Справочники.Организации.НайтиПоНаименованию(Организация.Наименование, Истина);
	Если НЕ ОрганизацияСсылка = Справочники.Организации.ПустаяСсылка() И ОрганизацияСсылка <> Организация.Ссылка Тогда
		Если Вопрос("Организация с таким наименованием уже введена.
					|Перейти к редактированию существующей организации?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
					
			Организация = ОрганизацияСсылка.ПолучитьОбъект();
	    КонецЕсли;
	КонецЕсли;	
	
	Если ПустаяСтрока(Организация.НаименованиеСокращенное) Тогда
		Организация.НаименованиеСокращенное = Организация.Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.НаименованиеПолное) Тогда
		Организация.НаименованиеПолное = Организация.Наименование;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура ИННПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

//ЭТАП 1, ШАГ 3
Процедура НомерСчетаПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры

Процедура УстановитьНаименованиеСчета()
	
	Если ПустаяСтрока(БСчетНаименование) ИЛИ БСчетНаименование = АвтоНаименование Тогда
		БСчетНаименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	
КонецПроцедуры // УстановитьНаименование()

Функция СформироватьАвтоНаименование()
	
	ЭлементыФормы.БСчетНаименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = Лев("Расчетный в " + Банк,   100);
	ЭлементыФормы.БСчетНаименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = Лев(НомерСчета+  ", " + Банк,100);
	ЭлементыФормы.БСчетНаименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = Лев(""+ Банк+ " (Расчетный)",100);
	ЭлементыФормы.БСчетНаименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции // СформироватьАвтоНаименование()

Процедура БИКПриИзменении(Элемент)
	
	БанкСсылка = НайтиБанкВКлассификаторе(Элемент.Значение, "Код",Элемент);
	Если БанкСсылка = Справочники.Банки.ПустаяСсылка() Тогда
		БанкБИК				= Банк.Код;
		БанкНаименование 	= Банк.Наименование;
		БанкКоррСчет 		= Банк.КоррСчет;
		БанкГород 			= Банк.Город;
		Банк 				= Справочники.Банки.СоздатьЭлемент();
		Банк.Код 			= БанкБИК;
		Банк.Наименование 	= БанкНаименование;
		Банк.КоррСчет 		= БанкКоррСчет;
		Банк.Город 			= БанкГород;
	Иначе
		Банк = БанкСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура БИКНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура БИКОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Банк = ВыбранноеЗначение.ПолучитьОбъект();;
		
	УстановитьНаименованиеСчета();
	УстановитьДоступность();

КонецПроцедуры

Процедура КоррСчетПриИзменении(Элемент)
	
	БанкСсылка = НайтиБанкВКлассификаторе(Элемент.Значение, "КоррСчет",Элемент);
	Если БанкСсылка = Справочники.Банки.ПустаяСсылка() Тогда
		БанкБИК				= Банк.Код;
		БанкНаименование 	= Банк.Наименование;
		БанкКоррСчет 		= Банк.КоррСчет;
		БанкГород 			= Банк.Город;
		Банк 				= Справочники.Банки.СоздатьЭлемент();
		Банк.Код 			= БанкБИК;
		Банк.Наименование 	= БанкНаименование;
		Банк.КоррСчет 		= БанкКоррСчет;
		Банк.Город 			= БанкГород;
	Иначе
		Банк = БанкСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура КоррСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КоррСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Банк = ВыбранноеЗначение.ПолучитьОбъект();;
		
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура БанкНаименованиеПриИзменении(Элемент)

	УстановитьНаименованиеСчета();
	
КонецПроцедуры


Процедура БИК1ПриИзменении(Элемент)
	
	БанкСсылка = НайтиБанкВКлассификаторе(Элемент.Значение, "Код",Элемент);
	Если БанкСсылка = Справочники.Банки.ПустаяСсылка() Тогда
		БанкБИК				= БанкДляРасчетов.Код;
		БанкНаименование 	= БанкДляРасчетов.Наименование;
		БанкКоррСчет 		= БанкДляРасчетов.КоррСчет;
		БанкГород 			= БанкДляРасчетов.Город;
		
		БанкДляРасчетов 	= Справочники.Банки.СоздатьЭлемент();
		БанкДляРасчетов.Код 			= БанкБИК;
		БанкДляРасчетов.Наименование 	= БанкНаименование;
		БанкДляРасчетов.КоррСчет 		= БанкКоррСчет;
		БанкДляРасчетов.Город 			= БанкГород;
	Иначе
		БанкДляРасчетов = БанкСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура БИК1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура БИК1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БанкДляРасчетов = ВыбранноеЗначение.ПолучитьОбъект();;
		
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура КоррСчет1ПриИзменении(Элемент)
	
	БанкСсылка = НайтиБанкВКлассификаторе(Элемент.Значение, "КоррСчет",Элемент);
	Если БанкСсылка = Справочники.Банки.ПустаяСсылка() Тогда
		БанкБИК				= БанкДляРасчетов.Код;
		БанкНаименование 	= БанкДляРасчетов.Наименование;
		БанкКоррСчет 		= БанкДляРасчетов.КоррСчет;
		БанкГород 			= БанкДляРасчетов.Город;
		
		БанкДляРасчетов 	= Справочники.Банки.СоздатьЭлемент();
		БанкДляРасчетов.Код 			= БанкБИК;
		БанкДляРасчетов.Наименование 	= БанкНаименование;
		БанкДляРасчетов.КоррСчет 		= БанкКоррСчет;
		БанкДляРасчетов.Город 			= БанкГород;
	Иначе
		БанкДляРасчетов = БанкСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура КоррСчет1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КоррСчет1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БанкДляРасчетов = ВыбранноеЗначение.ПолучитьОбъект();;
		
	УстановитьНаименованиеСчета();
	УстановитьДоступность();
	
КонецПроцедуры

Процедура БанкНаименование1ПриИзменении(Элемент)

	УстановитьНаименованиеСчета();
	
КонецПроцедуры


Функция НайтиБанкВКлассификаторе(ТекстДляПоиска, ОбластьПоиска = "Код",Элемент=неопределено)
	
	БанкСсылка = Справочники.Банки.ПустаяСсылка();
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		Возврат БанкСсылка;
	КонецЕсли;
	
	ОбластьПоиска = НРег(ОбластьПоиска);
	СписокНайденныхБанков = новый СписокЗначений;
	Если ОбластьПоиска = "код" Тогда
		Отбор = Новый Структура("Код");
		Отбор.Код = ТекстДляПоиска;
	ИначеЕсли ОбластьПоиска = "коррсчет" Тогда
		Отбор = Новый Структура("КоррСчет");
		Отбор.КоррСчет = ТекстДляПоиска;
	КонецЕсли;
	Выборка = Справочники.Банки.Выбрать(,,Отбор,"Код Возр");
	Пока Выборка.Следующий() и Не Выборка.ЭтоГруппа Цикл
		СписокНайденныхБанков.Добавить(Выборка.Ссылка); 
	КонецЦикла;
	
	НетБанкаВКлассификаторе = СписокНайденныхБанков.Количество()=0;
		
	Если НетБанкаВКлассификаторе Тогда
		Возврат БанкСсылка;
	ИначеЕсли СписокНайденныхБанков.Количество()=1 Тогда
		Возврат СписокНайденныхБанков[0].Значение;
	Иначе
		ВыбранныйБанк = ВыбратьИзСписка(СписокНайденныхБанков,Элемент,);
		Если ВыбранныйБанк<>неопределено Тогда
			Возврат ВыбранныйБанк.Значение;
		Иначе
			Возврат БанкСсылка;
		КонецЕсли;
	КонецЕсли;


КонецФункции

//ЭТАП 1, ШАГ 4
//
Процедура ЗаполнитьКИ()
	
	ОбъектКИ = Организация.Ссылка;
	// {УчетДоходовИРасходовИП
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ОбъектКИ = Организация.ИндивидуальныйПредприниматель;
	Конецесли;
	// }УчетДоходовИРасходовИП
	
	Если ОбъектКИ = мОбъектКИ Тогда
		Возврат;
	Иначе
		мОбъектКИ = ОбъектКИ;
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
	
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, Ложь);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);
	
КонецПроцедуры

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ВидДругаяИнформация = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	// {УчетДоходовИРасходовИП
	Если Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ВидДругаяИнформация = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица;
	КонецЕсли;
	// }УчетДоходовИРасходовИП
	
	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			ВидОбъектаКИ,
			Неопределено,
			НаборКонтактнойИнформации,
			Неопределено,
			Неопределено,
			Неопределено,
			Неопределено,
			ВидДругаяИнформация,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ2, Неопределено, ЭлементыФормы.ПолеКИ2);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ3, Неопределено, ЭлементыФормы.ПолеКИ3);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ4, Неопределено, ЭлементыФормы.ПолеКИ4);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ5, Неопределено, ЭлементыФормы.ПолеКИ5);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ6, Неопределено, ЭлементыФормы.ПолеКИ6);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ7, Неопределено, ЭлементыФормы.ПолеКИ7);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ8, Неопределено, ЭлементыФормы.ПолеКИ8);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

Процедура ПриЗакрытии()
	
	Если ПервыйЗапуск Тогда	
		Обработки.ПанельФункций.ПолучитьФорму().Открыть();
	КонецЕсли;
			
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ РольДоступна("ПолныеПрава") Тогда
		Предупреждение("Недостаточно прав для запуска помощника ввода сведений об организации");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
