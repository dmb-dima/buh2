
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АБРЕВИАТУРЫ)

//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных

////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ

// Обработка позволяет совершать отладку обработчиков событий и генерировать 
// модуль отладки обработчиков из файла-правил или файла-данных.
// Функционал по созданию модуля отладки берется из обработки «УниверсальныйОбменДаннымиXML» 
// Для корректного вызова обработчиков в режиме отладки правила обмена дополняются
// интерфейсами обработчиков по средствам процедуры
// «УниверсальныйОбменДаннымиXML.ДополнитьПравилаИнтерфейсамиОбработчиков()».

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)
 
Перем Конвертация  Экспорт;  // Структура свойств конвертации (Имя, Ид, обработчики событий обмена)

Перем Алгоритмы    Экспорт;  // Структура, содержащая используемые алгоритмы
Перем Запросы      Экспорт;  // Структура, содержащая используемые запросы
Перем ДопОбработки Экспорт;  // Структура, содержащая используемые внешние обработки

Перем Правила      Экспорт;  // Структура, содержащая ссылки на ПКО

Перем Менеджеры    Экспорт;  // Соответствие, содержащее поля Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, ПКО
Перем МенеджерыДляПлановОбмена Экспорт;
Перем ФайлОбмена            Экспорт;// Последовательно записываемый/читаемый файл обмена

Перем ПараметрыДопОбработок Экспорт;  // Структура, содержащая параметры, используемых внешних обработок

Перем ПараметрыИнициализированы Экспорт;  // Если Истина, то необходимые параметры конвертации проинициализированы

Перем мФайлПротоколаДанных Экспорт; // файл для ведения протокола обмена данными
Перем ФлагКомментироватьОбработкуОбъектов Экспорт;

Перем УниверсальныйОбменДанными Экспорт; // Переменная типа ОбработкаОбъект, содержит экземпляр обработки "УниверсальныйОбменДаннымиXML"

////////////////////////////////////////////////////////////////////////////////
// ФЛАГИ НАЛИЧИЯ ГЛОБАЛЬНЫХ ОБРАБОТЧИКОВ СОБЫТИЙ

Перем ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта;
Перем ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта;

Перем ЕстьГлобальныйОбработчикПередКонвертациейОбъекта;

Перем ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта;
Перем ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта;

Перем ВерсияПлатформыПриемника;

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем мТипРегистрСоответствия;

Перем одТипУзлаXML_КонецЭлемента  Экспорт;
Перем одТипУзлаXML_НачалоЭлемента Экспорт;
Перем одТипУзлаXML_Текст          Экспорт;

Перем ЗначениеПустаяДата Экспорт;

Перем одСообщения;             // Соответствие. Ключ - код ошибки,  Значение - описание ошибки

Перем мСписокМакетовПравилОбмена Экспорт;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБРАБОТКИ ВЫГРУЗКИ
 
Перем мСчетчикВыгруженныхОбъектов Экспорт;   // Число - счетчик выгруженных объектов
Перем мСчетчикНПП Экспорт;   // Число - счетчик НПП
Перем мНППЗаписанногоВФайл Экспорт;
Перем мXMLДокумент;                          // Вспомогательный DOM-XML документ, используемый при создании узлов xml
Перем мТаблицаПравилКонвертацииСвойств;      // ТаблицаЗначений - шаблон для воссоздания структуры таблицы путем копирования
Перем мXMLПравила Экспорт;                           // xml-Строка, содержащая описание правил обмена
Перем мСтрокаТиповДляПриемника;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ ОБРАБОТКИ ЗАГРУЗКИ
 
Перем мСчетчикЗагруженныхОбъектов Экспорт;// Число - счетчик загруженных объектов

Перем мКоличествоВыполненныхОтложенныхДвиженийДокументов Экспорт;
                                                                                                
Перем мАтрибутыФайлаОбмена Экспорт;       // Структура. После открытия файла 
                                          // содержит атрибуты файла обмена 
                                          // согласно формату

Перем ЗагруженныеОбъекты Экспорт;         // Соответствие. Ключ - Нпп объекта в файле,
                                          // Значение - ссылка на загруженный объект
Перем мНомерПоследнегоПоискаПоСсылке Экспорт;
										  
Перем ЗагруженныеГлобальныеОбъекты Экспорт;										  
										  
Перем ЧислоХранимыхВыгруженныхОбъектовПоТипам Экспорт;									  
										  
Перем ЗапоминатьЗагруженныеОбъекты Экспорт;

Перем мСоответствиеДопПараметровПоиска;
Перем мСоответствиеАлгоритмовПоискаЭлементов;
Перем мСоответствиеПравилКонвертации; // Соответствие для определения правила конвертации объекта по типу этого объекта

Перем мСоответствиеТиповИНазваниеОбъектов;

Перем мОбработкаДляЗагрузкиДанных Экспорт;

Перем мСоответствиеПустыхЗначенийТипов;
Перем мСоответствиеОписаниеТипов;

Перем мБылиПрочитаныПравилаОбменаПриЗагрузке Экспорт;

Перем мНомерВходящегоСообщения;

Перем мЗапросСтрокРегистраСоответствияОбъектов;
Перем мЗапросСтрокРегистраОпределенияНаличияВыгрузки;
Перем мЗапросНаличияСтрокВРегистреСоответствия;
Перем мЗапросНаличияПустыхДляИсточникаВРегистреСоответствия;
Перем мЗапросИнформацииОМестеСозданияОбъекта;

Перем мСоответствиеЗапросовПоПКО;
Перем мСоответствиеНаличияТиповПриемника;

Перем мПроверятьЗагруженностьПравилПриВыгрузке Экспорт;

Перем мРазрешитьПроведениеДокумента;
Перем мСтекВызововВыгрузкиДанных;

Перем мСоответствиеТиповДанныхДляЗагрузки;
Перем мГлобальныйСтекНеЗаписанныхОбъектов;
Перем мСоответствиеДанныхДляОбновленияВыгруженныхЭлементов;


Перем мДатаНачалаВыгрузки;
Перем мДатаОкончанияВыгрузки;

Перем мДатаНачалаЗагрузки;
Перем мДатаОкончанияЗагрузки;

Перем мДатаНачалаВыполненияОтложенныхОперацийСДокументами;
Перем мДатаОкончанияВыполненияОтложенныхОперацийСДокументами;

Перем СобытияПослеЗагрузкиПараметров Экспорт;

Перем мМенеджерРегистраСоответствийОбъектов;
Перем мМенеджерРегистраОтложенныеДвижения;
Перем мМенеджерРегистраКоллизий;

Перем мПрефиксДокументовПриЗагрузке Экспорт;
Перем мДатаДокументовДляУстановкиПрефикса Экспорт;
Перем мДлинаПрефиксаДокументовПриЗагрузке Экспорт;
Перем мИспользоватьИнформациюОМестеСозданияОбъектовПриЗагрузке;

Перем мТекущийУровеньВложенностиВыгрузитьПоПравилу;

Перем мРежимВизуальнойНастройкиОбмена;

Перем мРежимЗагрузкиИнформацииОПравилахОбмена Экспорт;
Перем мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска Экспорт;
Перем мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации Экспорт;

Перем мИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных Экспорт;
Перем мИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//  Стр          - разбираемая строка;
//  Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//  Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт

	ПраваяЧасть         = "";
	ПозРазделителя      = Найти(Стр, Разделитель);
	ДлинаРазделителя    = СтрДлина(Разделитель);
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	 = Сред(Стр, ПозРазделителя + ?(Режим=2, 0, ДлинаРазделителя));
		Стр          = СокрЛП(Лев(Стр, ПозРазделителя - ?(Режим=1, -ДлинаРазделителя + 1, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);

КонецФункции // ОтделитьРазделителем()

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//  Стр            - Разбираемая строка
//  Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//  Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Массив      = Новый Массив;
	ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	
	Пока Не ПустаяСтрока(Стр) Цикл
		Массив.Добавить(СокрЛП(Стр));
		Стр         = ПраваяЧасть;
		ПраваяЧасть = ОтделитьРазделителем(Стр, Разделитель);
	КонецЦикла; 

	Возврат(Массив);
	
КонецФункции // МассивИзСтроки() 

Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер) Экспорт
	
	НомерБезПрефиксов = "";
	Сч = СтрДлина(Номер);
	
	Пока Сч > 0 Цикл
		
		Символ = Сред(Номер, Сч, 1);
		
		Если (Символ >= "0" И Символ <= "9") Тогда
			
			НомерБезПрефиксов = Символ + НомерБезПрефиксов;
			
		Иначе
			
			Возврат НомерБезПрефиксов;
			
		КонецЕсли;
		
		Сч = Сч - 1;
		
	КонецЦикла;
	
	Возврат НомерБезПрефиксов;
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "") Экспорт

	ЧисловаяЧасть = 0;
	Префикс = "";
	Стр = СокрЛП(Стр);
	Длина   = СтрДлина(Стр);
	
	СтроковойНомерБезПрефикса = ПолучитьСтроковыйНомерБезПрефиксов(Стр);
	ДлинаСтроковойЧасти = СтрДлина(СтроковойНомерБезПрефикса);
	Если ДлинаСтроковойЧасти > 0 Тогда
		ЧисловаяЧасть = Число(СтроковойНомерБезПрефикса);
		Префикс = Сред(Стр, 1, Длина - ДлинаСтроковойЧасти);
	Иначе
		Префикс = Стр;	
	КонецЕсли;

	Если Режим = "Число" Тогда
		Возврат(ЧисловаяЧасть);
	Иначе
		Возврат(Префикс);
	КонецЕсли;

КонецФункции // ПолучитьПрефиксЧислоНомера()

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина, Префикс = "") Экспорт

	Стр             = СокрЛП(Стр);
	ВходящаяДлинаНомера = СтрДлина(Стр);

	ЧисловаяЧасть   = "";
	Результат       = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);
	
	Результат = ?(ПустаяСтрока(Префикс), Результат, Префикс);
	
	СтрокаЧисловойЧасти = Формат(ЧисловаяЧасть, "ЧГ=0");
	ДлинаЧисловойЧасти = СтрДлина(СтрокаЧисловойЧасти);

	Если (Длина >= ВходящаяДлинаНомера И ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера)
		ИЛИ (Длина < ВходящаяДлинаНомера) Тогда
		
		Для ВременнаяПеременная = 1 По Длина - СтрДлина(Результат) - ДлинаЧисловойЧасти Цикл
			
			Результат = Результат + "0";
			
		КонецЦикла;
	
	КонецЕсли;
		
	Результат = Результат + СтрокаЧисловойЧасти;

	Возврат(Результат);

КонецФункции // ПривестиНомерКДлине()

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добавляемая к префиксу подстрока;
//  Длина        - требуемая результирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева",
	НеДобавлятьПрефиксЕслиСНегоНачинаетсяНомер = Ложь,
	ОбрезатьЧисловуюЧастьСлеваВСлучаеПревышенияНомера = Ложь) Экспорт

	Стр = СокрЛП(Формат(Стр,"ЧГ=0"));
	
	Если ПустаяСтрока(Длина) Тогда
		Длина = СтрДлина(Стр);
	КонецЕсли;

	ЧисловаяЧасть   = "";
	Префикс         = ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть);
	ДополнениеКПрефиксу = СокрЛП(Добавок);
	
	Если НеДобавлятьПрефиксЕслиСНегоНачинаетсяНомер Тогда
		
		Если Найти(Префикс, ДополнениеКПрефиксу) = 1 Тогда
			Возврат Стр;
		КонецЕсли;
		
	КонецЕсли;

	Если Режим = "Слева" Тогда
		Результат = ДополнениеКПрефиксу + Префикс;
	Иначе
		Результат = Префикс + ДополнениеКПрефиксу;
	КонецЕсли;
	
	СтрокаЧисловойЧасти = Формат(ЧисловаяЧасть, "ЧГ=0");
	ДлинаЧисловойЧасти = СтрДлина(СтрокаЧисловойЧасти);
	ДлинаПрефикса = СтрДлина(Результат);
	
	Для НомерДобавления = 1 По Длина - ДлинаПрефикса - ДлинаЧисловойЧасти Цикл
	    Результат = Результат + "0";
	КонецЦикла;
	
	Если ОбрезатьЧисловуюЧастьСлеваВСлучаеПревышенияНомера 
		И ДлинаПрефикса + ДлинаЧисловойЧасти > Длина Тогда
		
		КоличествоСимволовУрезанияЧисловойЧасти = ДлинаЧисловойЧасти - Длина + ДлинаПрефикса;
		Если КоличествоСимволовУрезанияЧисловойЧасти > 0 Тогда
			СтрокаЧисловойЧасти = Сред(СтрокаЧисловойЧасти, КоличествоСимволовУрезанияЧисловойЧасти + 1);
		КонецЕсли;
		
	КонецЕсли;

	Результат = Результат + СтрокаЧисловойЧасти;

	Возврат Результат;

КонецФункции // ДобавитьКПрефиксу()

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт

	Результат = СокрЛП(Стр);
	Пока Длина - СтрДлина(Результат) > 0 Цикл
		Результат = Результат + Чем;
	КонецЦикла;

	Возврат(Результат);

КонецФункции // одДополнитьСтроку() 


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Значение     - значение перечисления
//
// Возвращаемое значение:
//  Строка       - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт

	ОбъектМД       = Значение.Метаданные();
	ИндексЗначения = Перечисления[ОбъектМД.Имя].Индекс(Значение);

	Возврат ОбъектМД.ЗначенияПеречисления[ИндексЗначения].Имя;

КонецФункции // одИмяЗначенияПеречисления()

// Определяет заполнено ли переданное значение
//
// Параметры: 
//  Значение       - значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//  Истина         - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь) Экспорт

	// Сначала примитивные типы
	Если Значение = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Значение = NULL Тогда
		ЭтоNULL   = Истина;
		Возврат Истина;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(Значение);
	
	//Если ТипЗначения = одТипБулево Тогда
	//	
	//	Возврат НЕ Значение;
	//	
	//Иначе
		
	Если ТипЗначения = одТипХранилищеЗначения Тогда
		
		Результат = одПустое(Значение.Получить());
		Возврат Результат;		
		
	ИначеЕсли ТипЗначения = одТипДвоичныеДанные Тогда
		
		Возврат Ложь;
		
	Иначе

		// Для остальных будем считать значение пустым, если оно равно
		// значению по умолчанию своего типа.
		Попытка
			Результат = Не ЗначениеЗаполнено(Значение);
			Возврат Результат;
		Исключение
			Возврат Ложь;
		КонецПопытки;
			
	КонецЕсли;
    	
КонецФункции // одПустое()

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//  ЗначениеТипа - строка с именем типа или значение типа Тип.
//  
// Возвращаемое значение:
//  ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа) Экспорт

	ОписаниеТипов = мСоответствиеОписаниеТипов[ЗначениеТипа];
	
	Если ОписаниеТипов = Неопределено Тогда
		
		МассивТипов = Новый Массив;
		Если ТипЗнч(ЗначениеТипа) = одТипСтрока Тогда
			МассивТипов.Добавить(Тип(ЗначениеТипа));
		Иначе
			МассивТипов.Добавить(ЗначениеТипа);
		КонецЕсли; 
		ОписаниеТипов	= Новый ОписаниеТипов(МассивТипов);
		
		мСоответствиеОписаниеТипов.Вставить(ЗначениеТипа, ОписаниеТипов);
		
	КонецЕсли;	
	
	Возврат ОписаниеТипов;

КонецФункции // одОписаниеТипа()

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//  Тип          - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//  Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип) Экспорт

	ПустоеЗначениеТипа = мСоответствиеПустыхЗначенийТипов[Тип];
	
	Если ПустоеЗначениеТипа = Неопределено Тогда
		
		ПустоеЗначениеТипа = одОписаниеТипа(Тип).ПривестиЗначение(Неопределено);	
		
		мСоответствиеПустыхЗначенийТипов.Вставить(Тип, ПустоеЗначениеТипа);
			
	КонецЕсли;
	
	Возврат ПустоеЗначениеТипа;

КонецФункции // ПолучитьПустоеЗначение()

Функция ПроверитьСуществованиеСсылки(Ссылка, Менеджер, НайденныйОбъектПоУникальномуИдентификатору, 
	РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору)
	
	Попытка
			
		Если РежимПоискаОсновногоОбъекта
			ИЛИ ПустаяСтрока(СтрокаЗапросаПоискаПоУникальномуИдентификатору) Тогда
			
			НайденныйОбъектПоУникальномуИдентификатору = Ссылка.ПолучитьОбъект();
			
			Если НайденныйОбъектПоУникальномуИдентификатору = Неопределено Тогда
			
				Возврат Менеджер.ПустаяСсылка();
				
			КонецЕсли;
			
		Иначе
			// это режим поиска по ссылке - достаточно сделать запрос к информационной базе
			// шаблон для запроса СтруктураСвойств.СтрокаПоиска 
			
			Запрос = Новый Запрос();
			Запрос.Текст = СтрокаЗапросаПоискаПоУникальномуИдентификатору + "  Ссылка = &Ссылка ";
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если РезультатЗапроса.Пустой() Тогда
			
				Возврат Менеджер.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Ссылка;	
		
	Исключение
			
		Возврат Менеджер.ПустаяСсылка();
		
	КонецПопытки;
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение, 
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено, 
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено,
	РежимПоискаОсновногоОбъекта = Истина, СтрокаЗапросаПоискаПоУникальномуИдентификатору = "") Экспорт

	Если Свойство = "Имя" Тогда
		
		Возврат Менеджер[Значение];
		
	ИначеЕсли Свойство = "Код" Тогда
		
		Возврат Менеджер.НайтиПоКоду(Значение);
		
	ИначеЕсли Свойство = "Наименование" Тогда
		
		Возврат Менеджер.НайтиПоНаименованию(Значение, ИСТИНА);
		
	ИначеЕсли Свойство = "Номер" Тогда
		
		Возврат Менеджер.НайтиПоНомеру(Значение);
		
	ИначеЕсли Свойство = "{УникальныйИдентификатор}" Тогда
		
		СсылкаПоИдентификатору = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(Значение));
		
		Ссылка =  ПроверитьСуществованиеСсылки(СсылкаПоИдентификатору, Менеджер, НайденныйОбъектПоУникальномуИдентификатору, 
			РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
			
		Возврат Ссылка;
		
	ИначеЕсли Свойство = "{КлючПоискаВИБПриемнике}" Тогда
		
		Попытка
			СсылкаПоИдентификатору = ЗначениеИзСтрокиВнутр(Значение);
		Исключение
			Возврат Менеджер.ПустаяСсылка();
		КонецПопытки;
		
		Ссылка =  ПроверитьСуществованиеСсылки(СсылкаПоИдентификатору, Менеджер, НайденныйОбъектПоУникальномуИдентификатору, 
			РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);	
			
		Возврат Ссылка;
		
	ИначеЕсли Свойство = "{ИмяПредопределенногоЭлемента}" Тогда
		
		Попытка
			
			Ссылка = Менеджер[Значение];
			
		Исключение
			
			Ссылка = Менеджер.НайтиПоКоду(Значение);
			
		КонецПопытки;
		
		Возврат Ссылка;
		
	Иначе
		
		// можно найти только по реквизиту, кроме строк произвольной длины и хранилища значений
		Если НЕ (Свойство = "Дата"
			ИЛИ Свойство = "Проведен"
			ИЛИ Свойство = "ПометкаУдаления"
			ИЛИ Свойство = "Владелец"
			ИЛИ Свойство = "Родитель"
			ИЛИ Свойство = "ЭтоГруппа") Тогда
			
			Попытка
			
				СтрокаНеограниченнойДлины = ОпределитьЭтотПараметрНеограниченнойДлинны(ОбщаяСтруктураСвойств, Значение, Свойство);		
														
			Исключение
						
				СтрокаНеограниченнойДлины = Ложь;
						
			КонецПопытки;
			
			Если НЕ СтрокаНеограниченнойДлины Тогда
			
				Возврат Менеджер.НайтиПоРеквизиту(Свойство, Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СсылкаНаОбъект = НайтиЭлементЗапросом(ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска, , Менеджер);
		Возврат СсылкаНаОбъект;
				
	КонецЕсли; 

КонецФункции // одНайтиОбъектПоСвойству() 

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Стр            - Строка - значение свойства, по которому осуществляется 
//                   поиск объект;
//  Тип            - тип искомого объекта;
//  Свойство       - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "") Экспорт

	Если ПустаяСтрока(Стр) Тогда
		Возврат Новый(Тип);
	КонецЕсли; 

	Свойства = Менеджеры[Тип];

	Если Свойства = Неопределено Тогда
		
		ОписаниеТипов = одОписаниеТипа(Тип);
		Возврат ОписаниеТипов.ПривестиЗначение(Стр);
		
	КонецЕсли;

	Если ПустаяСтрока(Свойство) Тогда
		
		Если Свойства.ИмяТипа = "Перечисление" Тогда
			Свойство = "Имя";
		Иначе
			Свойство = "{ИмяПредопределенногоЭлемента}";
		КонецЕсли;
		
	КонецЕсли; 

	Возврат одНайтиОбъектПоСвойству(Свойства.Менеджер, Свойство, Стр);

КонецФункции // одПолучитьЗначениеПоСтроке()

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип) Экспорт

	ТипЗначения	= ТипЗнч(ЗначениеИлиТип);
	
	Если ТипЗначения = одТипТип Тогда
		ТипЗначения	= ЗначениеИлиТип;
	КонецЕсли; 
	
	Если (ТипЗначения = Неопределено) Или (ЗначениеИлиТип = Неопределено) Тогда
		Результат = "";
	ИначеЕсли ТипЗначения = одТипСтрока Тогда
		Результат = "Строка";
	ИначеЕсли ТипЗначения = одТипЧисло Тогда
		Результат = "Число";
	ИначеЕсли ТипЗначения = одТипДата Тогда
		Результат = "Дата";
	ИначеЕсли ТипЗначения = одТипБулево Тогда
		Результат = "Булево";
	ИначеЕсли ТипЗначения = одТипХранилищеЗначения Тогда
		Результат = "ХранилищеЗначения";
	ИначеЕсли ТипЗначения = одТипВидДвиженияНакопления Тогда
		Результат = "ВидДвиженияНакопления";
	Иначе
		Менеджер = Менеджеры[ТипЗначения];
		Если Менеджер = Неопределено Тогда
			#Если Клиент Тогда
			Сообщить("Неизвестный тип:  " + Строка(ТипЗнч(ТипЗначения)));
			#КонецЕсли
		Иначе
			Результат = Менеджер.ТипСсылкиСтрокой;
		КонецЕсли; 
	КонецЕсли; 

	Возврат Результат;
	
КонецФункции // одТипЗначенияСтрокой()

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт

	УзелТипов = DOM_СоздатьУзел("Типы");

	Если ТипЗнч(ОписаниеТипов) = Тип("Структура") Тогда
		DOM_УстановитьАтрибут(УзелТипов, "ДопустимыйЗнак",          СокрЛП(ОписаниеТипов.ДопустимыйЗнак));
		DOM_УстановитьАтрибут(УзелТипов, "Разрядность",             СокрЛП(ОписаниеТипов.Разрядность));
		DOM_УстановитьАтрибут(УзелТипов, "РазрядностьДробнойЧасти", СокрЛП(ОписаниеТипов.РазрядностьДробнойЧасти));
		DOM_УстановитьАтрибут(УзелТипов, "Длина",                   СокрЛП(ОписаниеТипов.Длина));
		DOM_УстановитьАтрибут(УзелТипов, "ДопустимаяДлина",         СокрЛП(ОписаниеТипов.ДопустимаяДлина));
		DOM_УстановитьАтрибут(УзелТипов, "СоставДаты",              СокрЛП(ОписаниеТипов.ЧастиДаты));
		
		Для каждого СтрТип Из ОписаниеТипов.Типы Цикл
			DOM_ДобавитьЭлемент(УзелТипов, "Тип", СокрЛП(СтрТип));
		КонецЦикла;
	Иначе
		КвЧисла       = ОписаниеТипов.КвалификаторыЧисла;
		КвСтроки      = ОписаниеТипов.КвалификаторыСтроки;
		КвДаты        = ОписаниеТипов.КвалификаторыДаты;

		DOM_УстановитьАтрибут(УзелТипов, "ДопустимыйЗнак",          СокрЛП(КвЧисла.ДопустимыйЗнак));
		DOM_УстановитьАтрибут(УзелТипов, "Разрядность",             СокрЛП(КвЧисла.Разрядность));
		DOM_УстановитьАтрибут(УзелТипов, "РазрядностьДробнойЧасти", СокрЛП(КвЧисла.РазрядностьДробнойЧасти));
		DOM_УстановитьАтрибут(УзелТипов, "Длина",                   СокрЛП(КвСтроки.Длина));
		DOM_УстановитьАтрибут(УзелТипов, "ДопустимаяДлина",         СокрЛП(КвСтроки.ДопустимаяДлина));
		DOM_УстановитьАтрибут(УзелТипов, "СоставДаты",              СокрЛП(КвДаты.ЧастиДаты));

		Для каждого Тип Из ОписаниеТипов.Типы() Цикл
			DOM_ДобавитьЭлемент(УзелТипов, "Тип", одТипЗначенияСтрокой(Тип));
		КонецЦикла;
	КонецЕсли;

	Возврат(УзелТипов.XML);
	
КонецФункции // одПолучитьXMLПредставлениеОписанияТипов() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ DOM_XML

// Создает и возвращает узел нового xml-документа
//
// Параметры:
//  Нет.
//  
// Возвращаемое значение:
//  Узел нового xml-документа
//
Функция DOM_НовыйXMLДокумент() Экспорт

    Попытка
		XML = Новый COMОбъект("Msxml2.DOMDocument.4.0");
	Исключение
	    Попытка
			XML = Новый COMОбъект("Msxml2.DOMDocument.3.0");
		Исключение
			ЗаписатьВПротоколВыполнения(4);
			
			УстановитьФлагОшибки(Истина);

			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;

	Возврат XML;

КонецФункции // DOM_НовыйXMLДокумент()

// Создает новый xml-узел
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция DOM_СоздатьУзел(Имя) Экспорт

	Возврат мXMLДокумент.createElement(Имя);

КонецФункции // DOM_СоздатьУзел()

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция DOM_ДобавитьУзел(УзелРодитель, Имя) Экспорт

	XMLDOMNode = мXMLДокумент.createElement(Имя);
	УзелРодитель.appendChild(XMLDOMNode);
	Возврат XMLDOMNode;

КонецФункции // DOM_ДобавитьУзел()

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция DOM_КопироватьУзел(Узел) Экспорт

	Возврат Узел.cloneNode(Истина);
	
КонецФункции // DOM_Копироватьузел() 

// Добавляет новый xml-узел к указанному узлу-родителю, устанавливает значение
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//  Значение       - значение добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция DOM_ДобавитьЭлемент(УзелРодитель, Имя, Значение="") Экспорт

	XMLDOMElement = мXMLДокумент.createElement(Имя);
	XMLDOMElement.text = Значение;
	УзелРодитель.appendChild(XMLDOMElement);
	Возврат XMLDOMElement;

КонецФункции // DOM_ДобавитьЭлемент()

// Подчиняет xml-узел указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура DOM_ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	УзелРодитель.appendChild(Узел);
	
КонецПроцедуры // DOM_ДобавитьПодчиненный() 

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура DOM_УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	Узел.setAttribute(Имя, XMLСтрока(Значение));
	
КонецПроцедуры // DOM_УстановитьАтрибут()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЗапись

Процедура ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(Стр)
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат;
	КонецЕсли;
		
	ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(Стр);	
		
	Если ПозицияНедопустимогоСимвола > 0 Тогда
		
		//СтруктураОшибки = Новый Структура("ОписаниеОшибки,Объект");
		//СтруктураОшибки.ОписаниеОшибки = "Найдены недопустимые символы";
		//ЗаписатьВПротоколВыполнения("", СтруктураОшибки);
		
		НоваяСтрока = "";
		Пока ПозицияНедопустимогоСимвола > 0 Цикл
			НоваяСтрока = НоваяСтрока + Лев(Стр, ПозицияНедопустимогоСимвола - 1);
			Стр = Сред(Стр, ПозицияНедопустимогоСимвола + 1);
			ПозицияНедопустимогоСимвола = НайтиНедопустимыеСимволыXML(Стр);	
		КонецЦикла;
		Стр = НоваяСтрока + Стр;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт 

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента(Имя);

	Возврат ЗаписьXML;

КонецФункции // СоздатьУзел()

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	УзелРодитель.ЗаписатьНачалоЭлемента(Имя);

	Возврат УзелРодитель;

КонецФункции // ДобавитьУзел()

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Стр = Узел.Закрыть();

	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	Если ВестиДополнительныйКонтрольЗаписиВXML Тогда
		
		ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(Стр);	
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьБезОбработки(Стр);

	Возврат ЗаписьXML;
	
КонецФункции // Копироватьузел() 

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	Объект.ЗаписатьНачалоЭлемента(Имя);
	Стр = XMLСтрока(Значение);
	
	Если ВестиДополнительныйКонтрольЗаписиВXML Тогда
		
		ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(Стр);	
		
	КонецЕсли;
	
	Объект.ЗаписатьТекст(Стр);
	Объект.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // одЗаписатьЭлемент() 

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	Если ТипЗнч(Узел) <> одТипСтрока Тогда
		Узел.ЗаписатьКонецЭлемента();
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	УзелРодитель.ЗаписатьБезОбработки(ИнформацияДляЗаписиВФайл);
		
КонецПроцедуры // ДобавитьПодчиненный() 

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт

	СтрокаЗаписи = XMLСтрока(Значение);
	
	Если ВестиДополнительныйКонтрольЗаписиВXML Тогда
		
		ВыполнитьПроверкуНеДопустимыхСимволовВСтроке(СтрокаЗаписи);	
		
	КонецЕсли;	
	
	Узел.ЗаписатьАтрибут(Имя, СтрокаЗаписи);
	
КонецПроцедуры // УстановитьАтрибут()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт

	СтрЗначение = СокрП(Объект.ПолучитьАтрибут(Имя));
	Если Не ПустаяСтрока(СтрЗначение) Тогда
		Возврат XMLЗначение(Тип, СтрЗначение);		
	ИначеЕсли      Тип = одТипСтрока Тогда
		Возврат ""; 
	ИначеЕсли Тип = одТипБулево Тогда
		Возврат Ложь;
	ИначеЕсли Тип = одТипЧисло Тогда
		Возврат 0;
	ИначеЕсли Тип = одТипДата Тогда
		Возврат ЗначениеПустаяДата;
	КонецЕсли; 
	
КонецФункции // одАтрибут() 
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя="") Экспорт

	КолвоВложений = 0; // количество одноименных вложений

	Если Имя = "" Тогда
		
		Имя = Объект.ЛокальноеИмя;
		
	КонецЕсли; 
	
	Пока Объект.Прочитать() Цикл
		
		Если Объект.ЛокальноеИмя <> Имя Тогда
			Продолжить;
		КонецЕсли;
		
		ТипУзла = Объект.ТипУзла;
			
		Если ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
				
			Если КолвоВложений = 0 Тогда
					
				Прервать;
					
			Иначе
					
				КолвоВложений = КолвоВложений - 1;
					
			КонецЕсли;
				
		ИначеЕсли ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
				
			КолвоВложений = КолвоВложений + 1;
				
		КонецЕсли;
					
	КонецЦикла;
	
КонецПроцедуры // одПропустить() 

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт

	Значение = "";
	Имя      = Объект.ЛокальноеИмя;

	Пока Объект.Прочитать() Цикл
		
		ТипУзла = Объект.ТипУзла;
		
		Если ТипУзла = одТипУзлаXML_Текст Тогда
			
			Значение = Объект.Значение;
			
			Если ОбрезатьСтрокуСправа Тогда
				
				Значение = СокрП(Значение);
				
			КонецЕсли;
						
		ИначеЕсли (Объект.ЛокальноеИмя = Имя) И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если (Тип = одТипСтрока) ИЛИ (Тип = одТипБулево) ИЛИ (Тип = одТипЧисло) ИЛИ (Тип = одТипДата) 
		ИЛИ (Тип = одТипХранилищеЗначения) ИЛИ (Тип = одТипВидДвиженияНакопления) 
		ИЛИ (Тип = одТипВидСчета) Тогда
		
		Возврат XMLЗначение(Тип, Значение);
		
	Иначе
		
		Возврат одПолучитьЗначениеПоСтроке(Значение, Тип, ИскатьПоСвойству);
		
	КонецЕсли; 
	
КонецФункции // одЗначениеЭлемента() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт

	Если ТипЗнч(Узел) <> одТипСтрока Тогда
		ИнформацияДляЗаписиВФайл = Узел.Закрыть();
	Иначе
		ИнформацияДляЗаписиВФайл = Узел;
	КонецЕсли;
	
	Если НепосредственноеЧтениеВИБПриемнике Тогда
		
		СтрокаОшибкиВБазеПриемнике = "";
		ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
		Если Не ПустаяСтрока(СтрокаОшибкиВБазеПриемнике) Тогда
			
			ВызватьИсключение СтрокаОшибкиВБазеПриемнике;
			
		КонецЕсли;
		
	Иначе
		
		ФайлОбмена.ЗаписатьСтроку(ИнформацияДляЗаписиВФайл);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьВФайл()

// Открывает файл обмена, записывает заголовок файла в соответствии с форматом обмена
//
// Параметры:
//  Нет.
//
Функция ОткрытьФайлВыгрузки(СтрокаСообщенияОбОшибке = "")

	// Архивные файлы будем идентифицировать по расширению ".aml"
	Если АрхивироватьФайл Тогда
		ИмяФайлаОбмена = СтрЗаменить(ИмяФайлаОбмена, ".xml", ".aml");
	КонецЕсли;
    	
	ФайлОбмена = Новый ЗаписьТекста;
	Попытка
		
		Если НепосредственноеЧтениеВИБПриемнике Тогда
			ФайлОбмена.Открыть(ПолучитьИмяВременногоФайла(".xml"), КодировкаТекста.UTF8);
		Иначе
			ФайлОбмена.Открыть(ИмяФайлаОбмена, КодировкаТекста.UTF8);
		КонецЕсли;
				
	Исключение
		
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(8);
		Возврат "";
		
	КонецПопытки; 
	
	СтрокаИнформацииОXML = "<?xml version=""1.0"" encoding=""UTF-8""?>";
	
	ФайлОбмена.ЗаписатьСтроку(СтрокаИнформацииОXML);

	ВременныйЗаписьXML = Новый ЗаписьXML();
	
	ВременныйЗаписьXML.УстановитьСтроку();
	
	ВременныйЗаписьXML.ЗаписатьНачалоЭлемента("ФайлОбмена");
							
	УстановитьАтрибут(ВременныйЗаписьXML, "ВерсияФормата", "2.0");
	УстановитьАтрибут(ВременныйЗаписьXML, "ДатаВыгрузки",				ТекущаяДата());
	УстановитьАтрибут(ВременныйЗаписьXML, "ИмяКонфигурацииИсточника",	Конвертация.Источник);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИмяКонфигурацииПриемника",	Конвертация.Приемник);
	УстановитьАтрибут(ВременныйЗаписьXML, "ИдПравилКонвертации",		Конвертация.Ид);
	УстановитьАтрибут(ВременныйЗаписьXML, "Комментарий",				Комментарий);
	
	ВременныйЗаписьXML.ЗаписатьКонецЭлемента();
	
	Стр = ВременныйЗаписьXML.Закрыть(); 
	
	Стр = СтрЗаменить(Стр, "/>", ">");
	
	ФайлОбмена.ЗаписатьСтроку(Стр);
	
	Возврат СтрокаИнформацииОXML + Символы.ПС + Стр;
			
КонецФункции

// Закрывает файл обмена
//
// Параметры:
//  Нет.
//
Процедура ЗакрытьФайл()

    ФайлОбмена.ЗаписатьСтроку("</ФайлОбмена>");
	ФайлОбмена.Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОТОКОЛОМ ОБМЕНА

// Возвращает объект типа структура, содержащий все возможные поля
// записи протокола выполнения (сообщения об ошибках и т.п.)
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Объект типа структура
// 
Функция ПолучитьСтруктуруЗаписиПротокола(КодСообщения = "", Знач СтрокаОшибки = "") Экспорт

	СтруктураОшибки = Новый Структура("ИмяПКО,ИмяПОД,Нпп,Гнпп,Источник,ТипОбъекта,Свойство,Значение,ТипЗначения,ПКО,ПКС,ПКГС,ПВД,ПОД,Объект,СвойствоПриемника,КонвертируемоеЗначение,Обработчик,ОписаниеОшибки,ПозицияМодуля,Текст,КодСообщения,УзелПланаОбмена");
	
	СтрокаМодуля              = ОтделитьРазделителем(СтрокаОшибки, "{");
	ОписаниеОшибки            = ОтделитьРазделителем(СтрокаМодуля, "}: ");
	
	Если ОписаниеОшибки <> "" Тогда
		
		СтруктураОшибки.ОписаниеОшибки         = ОписаниеОшибки;
		СтруктураОшибки.ПозицияМодуля          = СтрокаМодуля;
				
	КонецЕсли;
	
	Если СтруктураОшибки.КодСообщения <> "" Тогда
		
		СтруктураОшибки.КодСообщения           = КодСообщения;
		
	КонецЕсли;
	
	Возврат СтруктураОшибки;
	
КонецФункции 

Процедура ИнициализироватьВедениеПротоколаОбмена() Экспорт
	
	Если ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
		мФайлПротоколаДанных = Неопределено;
		ФлагКомментироватьОбработкуОбъектов = ВыводВОкноСообщенийИнформационныхСообщений;		
		Возврат;
		
	Иначе	
		
		ФлагКомментироватьОбработкуОбъектов = ВыводВПротоколИнформационныхСообщений ИЛИ ВыводВОкноСообщенийИнформационныхСообщений;		
		
	КонецЕсли;
	
	мФайлПротоколаДанных = Новый ЗаписьТекста(ИмяФайлаПротоколаОбмена, КодировкаТекста.ANSI, , ДописыватьДанныеВПротоколОбмена) ;
	
КонецПроцедуры

Процедура ЗавершитьВедениеПротоколаОбмена() Экспорт
	
	Если мФайлПротоколаДанных <> Неопределено Тогда
		
		мФайлПротоколаДанных.Закрыть();
				
	КонецЕсли;	
	
	мФайлПротоколаДанных = Неопределено;
	
КонецПроцедуры

// Сохраняет в протокол выполнения (или выводит на экран) сообщения указанной структуры
//
// Параметры:
//  Код               - Число. Код сообщения
//  СтруктураЗаписи   - Структура. Структура записи протокола
//  ВзвестиФлагОшибок - Если истина, то - это сообщение об ошибке. Взводится ФлагОшибки
// 
Функция ЗаписатьВПротоколВыполнения(Код="", СтруктураЗаписи=Неопределено, ВзвестиФлагОшибок=Истина, 
	Уровень=0, Выравнивание=22, БезусловнаяЗаписьВПротоколОбмена = Ложь) Экспорт

	Отступ = "";
    Для Сч = 0 По Уровень-1 Цикл
		Отступ = Отступ + Символы.Таб;
	КонецЦикла; 
	
	Если ТипЗнч(Код) = одТипЧисло Тогда
		
		Если одСообщения = Неопределено Тогда
			ИнициализацияСообщений();
		КонецЕсли;
		
		Стр = одСообщения[Код];
		
	Иначе
		
		Стр = Строка(Код);
		
	КонецЕсли;

	Стр = Отступ + Стр;
	
	Если СтруктураЗаписи <> Неопределено Тогда
		
		Для каждого Поле Из СтруктураЗаписи Цикл
			
			Значение = Поле.Значение;
			Если Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли; 
			Ключ = Поле.Ключ;
			Стр  = Стр + Символы.ПС + Отступ + Символы.Таб + одДополнитьСтроку(Поле.Ключ, Выравнивание) + " =  " + Строка(Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИтоговаяСтрокаДляЗаписи = Символы.ПС + Стр;

	
	Если ВзвестиФлагОшибок Тогда
		
		УстановитьФлагОшибки(Истина);

		#Если Клиент Тогда
		Сообщить(ИтоговаяСтрокаДляЗаписи, СтатусСообщения.ОченьВажное);
		#КонецЕсли
		
	Иначе
		
		Если БезусловнаяЗаписьВПротоколОбмена ИЛИ ВыводВОкноСообщенийИнформационныхСообщений Тогда
			
			#Если Клиент Тогда
			Сообщить(ИтоговаяСтрокаДляЗаписи, СтатусСообщения.Информация);
			#КонецЕсли
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если мФайлПротоколаДанных <> Неопределено Тогда
		
		Если ВзвестиФлагОшибок Тогда
			
			мФайлПротоколаДанных.ЗаписатьСтроку(Символы.ПС + "Ошибка!!!");
			
		КонецЕсли;
		
		Если ВзвестиФлагОшибок ИЛИ БезусловнаяЗаписьВПротоколОбмена ИЛИ ВыводВПротоколИнформационныхСообщений Тогда
			
			мФайлПротоколаДанных.ЗаписатьСтроку(ИтоговаяСтрокаДляЗаписи);
		
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Стр;
		
КонецФункции

Функция ЗаписатьИнформациюОбОшибкеВПротокол(КодСообщения, СтрокаОшибки, Объект, ТипОбъекта = Неопределено) Экспорт
	
	ЗП         = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.Объект  = Объект;
	
	Если ТипОбъекта <> Неопределено Тогда
		ЗП.ТипОбъекта     = ТипОбъекта;
	КонецЕсли;	
		
	СтрокаОшибки = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);	
	
	Возврат СтрокаОшибки;
	
КонецФункции

Процедура ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(КодСообщения, СтрокаОшибки, ИмяПравилаОчисткиДанных, Объект = "", ИмяОбработчика = "") Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПОД                    = ИмяПравилаОчисткиДанных;
	
	Если Объект <> "" Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
	КонецЕсли;
	
	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик             = ИмяОбработчика;
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(КодСообщения, СтрокаОшибки, ИмяПравила, Источник = "", 
	ТипОбъекта, Объект = Неопределено, ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ИмяПКО                 = ИмяПравила;
	ЗП.ТипОбъекта             = ТипОбъекта;
	ЗП.Обработчик             = ИмяОбработчика;
						
	Если Не ПустаяСтрока(Источник) Тогда
							
		ЗП.Источник           = Источник;
							
	КонецЕсли;
						
	Если Объект <> Неопределено Тогда
	
		ЗП.Объект                 = Строка(Объект);
		
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(КодСообщения, СтрокаОшибки, ПКО, Источник = "", ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	
	Попытка
		ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
	Исключение
		ЗП.Объект                 = "(" + ТипЗнч(Источник) + ")";
	КонецПопытки;
	
	ЗП.Обработчик             = ИмяОбработчика;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КодСообщения, СтрокаОшибки, ПКО, ПКС, Источник = "", 
	ИмяОбработчика = "", Значение = Неопределено) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
	ЗП.ПКС                    = ПКС.Имя + "  (" + ПКС.Наименование + ")";
	
	Попытка
		ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
	Исключение
		ЗП.Объект                 = "(" + ТипЗнч(Источник) + ")";
	КонецПопытки;
	
	ЗП.СвойствоПриемника      = ПКС.Приемник + "  (" + ПКС.ТипПриемника + ")";
	
	Если ИмяОбработчика <> "" Тогда
		ЗП.Обработчик         = ИмяОбработчика;
	КонецЕсли;
	
	Если Значение <> Неопределено Тогда
		ЗП.КонвертируемоеЗначение = Строка(Значение) + "  (" + ТипЗнч(Значение) + ")";
	КонецЕсли;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
		
КонецПроцедуры	

Процедура ЗаписатьИнформациюОбОшибкеОбработчикиПВД(КодСообщения, СтрокаОшибки, ИмяПравила, Объект = Неопределено, ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.ПВД                    = ИмяПравила;
	
	Если Объект <> Неопределено Тогда
		ЗП.Объект                 = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";
	КонецЕсли;
	
	ЗП.Обработчик             = ИмяОбработчика;
	
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	
	Если Не ФлагРежимОтладки Тогда
		ВызватьИсключение СтрокаСообщенияОбОшибке;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(КодСообщения, СтрокаОшибки, ИмяОбработчика) Экспорт
	
	ЗП                        = ПолучитьСтруктуруЗаписиПротокола(КодСообщения, СтрокаОшибки);
	ЗП.Обработчик             = ИмяОбработчика;
	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(КодСообщения, ЗП);
	Возврат СтрокаСообщенияОбОшибке;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ПРАВИЛ ОБМЕНА

// Осуществляет загрузку правила конвертации группы свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
// 
Процедура ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств)

	Если одАтрибут(ПравилаОбмена, одТипБулево, "Отключить") Тогда
		одПропустить(ПравилаОбмена);
		Возврат;
	КонецЕсли;

	
	НоваяСтрока               = ТаблицаСвойств.Добавить();
	НоваяСтрока.ЭтоГруппа     = Истина;
	НоваяСтрока.ПравилаГруппы = мТаблицаПравилКонвертацииСвойств.Скопировать();

	
	// Значения по умолчанию

	НоваяСтрока.НеЗамещать               = Ложь;
	НоваяСтрока.ПолучитьИзВходящихДанных = Ложь;
	НоваяСтрока.УпрощеннаяВыгрузкаСвойства = Ложь;
	
	
	СтрокаПолейПоиска = "";
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Свойство" Тогда
			
			ЗагрузитьПКС(ПравилаОбмена, НоваяСтрока.ПравилаГруппы, , СтрокаПолейПоиска);

		ИначеЕсли ИмяУзла = "ПередОбработкойВыгрузки" Тогда
			НоваяСтрока.ПередОбработкойВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередОбработкойВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПередОбработкойВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиВыгрузки" Тогда
			НоваяСтрока.ПослеОбработкиВыгрузки	= одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеОбработкиВыгрузки = Не ПустаяСтрока(НоваяСтрока.ПослеОбработкиВыгрузки);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока.СтрокаПолейПоиска = СтрокаПолейПоиска;
	
	НоваяСтрока.НуженУзелXMLПриВыгрузке = НоваяСтрока.ЕстьОбработчикПриВыгрузке ИЛИ НоваяСтрока.ЕстьОбработчикПослеВыгрузки;
	
	НоваяСтрока.НуженУзелXMLПриВыгрузкеГруппы = НоваяСтрока.ЕстьОбработчикПослеОбработкиВыгрузки; 

КонецПроцедуры // ЗагрузитьПКГС() 

Процедура ДобавитьПолеКСтрокеПоиска(СтрокаПолейПоиска, ИмяПоля)
	
	Если ПустаяСтрока(ИмяПоля) ТОгда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(СтрокаПолейПоиска) Тогда
		СтрокаПолейПоиска = СтрокаПолейПоиска + ",";
	КонецЕсли;
	
	СтрокаПолейПоиска = СтрокаПолейПоиска + ИмяПоля;
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска = Неопределено, СтрокаПолейПоиска = "")

	Если одАтрибут(ПравилаОбмена, одТипБулево, "Отключить") Тогда
		одПропустить(ПравилаОбмена);
		Возврат;
	КонецЕсли;
	
	ЭтоПолеПоиска = одАтрибут(ПравилаОбмена, одТипБулево, "Поиск");
	
	Если ЭтоПолеПоиска 
		И ТаблицаПоиска <> Неопределено Тогда
		
		НоваяСтрока = ТаблицаПоиска.Добавить();
		
	Иначе
		
		НоваяСтрока = ТаблицаСвойств.Добавить();
		
	КонецЕсли; 

	
	// Значения по умолчанию

	НоваяСтрока.НеЗамещать               = Ложь;
	НоваяСтрока.ПолучитьИзВходящихДанных = Ложь;
		
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Источник" Тогда
			НоваяСтрока.Источник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипИсточника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			НоваяСтрока.Приемник		= одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			НоваяСтрока.ВидПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Вид");
			НоваяСтрока.ТипПриемника	= одАтрибут(ПравилаОбмена, одТипСтрока, "Тип");
			
			Если ЭтоПолеПоиска Тогда
				ДобавитьПолеКСтрокеПоиска(СтрокаПолейПоиска, НоваяСтрока.Приемник);
			КонецЕсли;
			
			одПропустить(ПравилаОбмена);
			
		ИначеЕсли ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			НоваяСтрока.НеЗамещать = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
	        НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПолучитьИзВходящихДанных" Тогда
			НоваяСтрока.ПолучитьИзВходящихДанных = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "ПриводитьКДлине" Тогда
			НоваяСтрока.ПриводитьКДлине = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "ИмяПараметраДляПередачи" Тогда
			НоваяСтрока.ИмяПараметраДляПередачи = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПоискПоДатеНаРавенство" Тогда
			НоваяСтрока.ПоискПоДатеНаРавенство = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли (ИмяУзла = "Свойство") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	НоваяСтрока.УпрощеннаяВыгрузкаСвойства = НЕ НоваяСтрока.ПолучитьИзВходящихДанных
		И НЕ НоваяСтрока.ЕстьОбработчикПередВыгрузкой
		И НЕ НоваяСтрока.ЕстьОбработчикПриВыгрузке
		И НЕ НоваяСтрока.ЕстьОбработчикПослеВыгрузки
		И ПустаяСтрока(НоваяСтрока.ПравилоКонвертации)
		И НоваяСтрока.ТипИсточника = НоваяСтрока.ТипПриемника
		И (НоваяСтрока.ТипИсточника = "Строка" ИЛИ НоваяСтрока.ТипИсточника = "Число" ИЛИ НоваяСтрока.ТипИсточника = "Булево" ИЛИ НоваяСтрока.ТипИсточника = "Дата");
		
	НоваяСтрока.НуженУзелXMLПриВыгрузке = НоваяСтрока.ЕстьОбработчикПриВыгрузке ИЛИ НоваяСтрока.ЕстьОбработчикПослеВыгрузки;
	
КонецПроцедуры // ЗагрузитьПКС() 

// Осуществляет загрузку правил конвертации свойств
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ТаблицаСвойств - таблица значений, содержащая ПКС
//  ТаблицаПоиска  - таблица значений, содержащая ПКС (синхронизирующих)
// 
Процедура ЗагрузитьСвойства(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Свойство" Тогда
			
			ЗагрузитьПКС(ПравилаОбмена, ТаблицаСвойств, ТаблицаПоиска);
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			ЗагрузитьПКГС(ПравилаОбмена, ТаблицаСвойств);
			
		ИначеЕсли (ИмяУзла = "Свойства") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	ТаблицаСвойств.Сортировать("Порядок");
	ТаблицаПоиска.Сортировать("Порядок");
	
КонецПроцедуры // ЗагрузитьСвойства()

// Осуществляет загрузку правила конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьПКЗ(ПравилаОбмена, Значения, ТипИсточника)
	
	Источник = "";
	Приемник = "";
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Источник" Тогда
			Источник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			Приемник = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Значение") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Значения[одПолучитьЗначениеПоСтроке(Источник, ТипИсточника)] = Приемник;
	
КонецПроцедуры // ЗагрузитьПКЗ()

// Осуществляет загрузку правил конвертации значений
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  Значения       - соответствие значений объекта источника - строковым
//                   представлениям объекта приемника
//  ТипИсточника   - значение типа Тип - тип объекта источника
// 
Процедура ЗагрузитьЗначения(ПравилаОбмена, Значения, ТипИсточника);

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Значение" Тогда
			ЗагрузитьПКЗ(ПравилаОбмена, Значения, ТипИсточника);
		ИначеЕсли (ИмяУзла = "Значения") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правила конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилоКонвертации(ПравилаОбмена, ЗаписьXML)

	ЗаписьXML.ЗаписатьНачалоЭлемента("Правило");

	НоваяСтрока = ТаблицаПравилКонвертации.Добавить();
	
	// Значения по умолчанию
	
	НоваяСтрока.ЗапоминатьВыгруженные = Истина;
	НоваяСтрока.НеЗамещать            = Ложь;
	НоваяСтрока.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
	
	ТаблицаПоискПоТЧ = Новый ТаблицаЗначений;
	ТаблицаПоискПоТЧ.Колонки.Добавить("ИмяЭлемента");
	ТаблицаПоискПоТЧ.Колонки.Добавить("ПоляПоискаТЧ");
	
	НоваяСтрока.ПоискПоТабличнымЧастям = ТаблицаПоискПоТЧ;		
	
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
				
		Если      ИмяУзла = "Код" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.Имя = Значение;
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Правило конвертации объектов: " + НоваяСтрока.Наименование);
			#КонецЕсли
			
		ИначеЕсли ИмяУзла = "СинхронизироватьПоИдентификатору" Тогда
			
			НоваяСтрока.СинхронизироватьПоИдентификатору = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.СинхронизироватьПоИдентификатору);
			
		ИначеЕсли ИмяУзла = "НеСоздаватьЕслиНеНайден" Тогда
			
			НоваяСтрока.НеСоздаватьЕслиНеНайден = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);			
			
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСвойствПоСсылкам" Тогда
			
			НоваяСтрока.НеВыгружатьОбъектыСвойствПоСсылкам = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
						
		ИначеЕсли ИмяУзла = "ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли" Тогда
			
			НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли);
			
		ИначеЕсли ИмяУзла = "ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD" Тогда
			
			НоваяСтрока.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD);
			
		ИначеЕсли ИмяУзла = "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике" Тогда
			
			НоваяСтрока.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);	
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике);		
			
		ИначеЕсли ИмяУзла = "ИспользоватьБыстрыйПоискПриЗагрузке" Тогда
			
			НоваяСтрока.ИспользоватьБыстрыйПоискПриЗагрузке = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);	
			
		ИначеЕсли ИмяУзла = "ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки" Тогда
			
			НоваяСтрока.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
						
		ИначеЕсли ИмяУзла = "ГенерироватьНовыйНомерИлиКодЕслиНеУказан" Тогда
			
			НоваяСтрока.ГенерироватьНовыйНомерИлиКодЕслиНеУказан = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, НоваяСтрока.ГенерироватьНовыйНомерИлиКодЕслиНеУказан);
						
		ИначеЕсли ИмяУзла = "НеЗапоминатьВыгруженные" Тогда
			
			НоваяСтрока.ЗапоминатьВыгруженные = Не одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "НеЗамещать" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.НеЗамещать = Значение;
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			НоваяСтрока.Приемник = Значение;
			
		ИначеЕсли ИмяУзла = "Источник" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.Источник	= Значение;
				
			Иначе
				
				Если Не ПустаяСтрока(Значение) Тогда
					
					НоваяСтрока.ТипИсточника = Значение;
					
					Если Не мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
						
						НоваяСтрока.Источник	 = Тип(Значение);					
					
						Попытка
							
							Менеджеры[НоваяСтрока.Источник].ПКО = НоваяСтрока;
							
						Исключение
							
							ЗаписатьИнформациюОбОшибкеВПротокол(11, ОписаниеОшибки(), Строка(НоваяСтрока.Источник));
							
						КонецПопытки;
					
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;


		// Свойства
		
		ИначеЕсли ИмяУзла = "Свойства" Тогда
		
			НоваяСтрока.СвойстваПоиска	= мТаблицаПравилКонвертацииСвойств.Скопировать();
			НоваяСтрока.Свойства		= мТаблицаПравилКонвертацииСвойств.Скопировать();
			
			
			Если НоваяСтрока.СинхронизироватьПоИдентификатору <> Неопределено И НоваяСтрока.СинхронизироватьПоИдентификатору Тогда
				
				СвойствоПоискаУИ = НоваяСтрока.СвойстваПоиска.Добавить();
				СвойствоПоискаУИ.Имя = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.Источник = "{УникальныйИдентификатор}";
				СвойствоПоискаУИ.Приемник = "{УникальныйИдентификатор}";
				
			КонецЕсли;
			
			ЗагрузитьСвойства(ПравилаОбмена, НоваяСтрока.Свойства, НоваяСтрока.СвойстваПоиска);

			
		// Значения
		
		ИначеЕсли ИмяУзла = "Значения" Тогда
		
			ЗагрузитьЗначения(ПравилаОбмена, НоваяСтрока.Значения, НоваяСтрока.Источник);

			
		// Обработчики событий
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкой" Тогда
		
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПередВыгрузкой = Не ПустаяСтрока(НоваяСтрока.ПередВыгрузкой);
			
		ИначеЕсли ИмяУзла = "ПриВыгрузке" Тогда
			
			НоваяСтрока.ПриВыгрузке = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПриВыгрузке    = Не ПустаяСтрока(НоваяСтрока.ПриВыгрузке);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузки" Тогда
			
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузки  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузки);
			
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиВФайл" Тогда
			
			НоваяСтрока.ПослеВыгрузкиВФайл = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.ЕстьОбработчикПослеВыгрузкиВФайл  = Не ПустаяСтрока(НоваяСтрока.ПослеВыгрузкиВФайл);
			
		// Для загрузки
		
		ИначеЕсли ИмяУзла = "ПередЗагрузкой" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПередЗагрузкой               = Значение;
				НоваяСтрока.ЕстьОбработчикПередЗагрузкой = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПриЗагрузке" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПриЗагрузке               = Значение;
				НоваяСтрока.ЕстьОбработчикПриЗагрузке = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли; 
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузки" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПослеЗагрузки               = Значение;
				НоваяСтрока.ЕстьОбработчикПослеЗагрузки = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПоследовательностьПолейПоиска" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если РежимОбмена = "Загрузка" Тогда
				
				НоваяСтрока.ПоследовательностьПолейПоиска               = Значение;
				НоваяСтрока.ЕстьОбработчикПоследовательностьПолейПоиска = Не ПустаяСтрока(Значение);
				
			Иначе
				
				одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ПриоритетОбъектовОбмена" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если Значение = "Ниже" Тогда
				НоваяСтрока.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже;
			ИначеЕсли Значение = "Совпадает" Тогда
				НоваяСтрока.ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает;
			КонецЕсли;
			
		//настройки вариантов поиска		
		ИначеЕсли ИмяУзла = "НастройкаВариантовПоискаОбъектов" Тогда
		
			ЗагрузитьНастройкиВариантовПоиска(ПравилаОбмена, НоваяСтрока);
			
		ИначеЕсли ИмяУзла = "ПоискПоТабличнымЧастям" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Для Номер = 1 По СтрЧислоСтрок(Значение) Цикл
				
				ТекущаяСтрока = СтрПолучитьСтроку(Значение, Номер);
				
				СтрокаПоиска = ОтделитьРазделителем(ТекущаяСтрока, ":");
				
				СтрокаТаблицы = ТаблицаПоискПоТЧ.Добавить();
				СтрокаТаблицы.ИмяЭлемента = ТекущаяСтрока;
				
				СтрокаТаблицы.ПоляПоискаТЧ = Новый Массив();
				Пока Истина Цикл
					
					ТекущееПоле = ОтделитьРазделителем(СтрокаПоиска, ",");	
					Если ПустаяСтрока(ТекущееПоле) Тогда
						Прервать;
					КонецЕсли;
					СтрокаТаблицы.ПоляПоискаТЧ.Добавить(СокрЛП(ТекущееПоле));
					
				КонецЦикла;
				
				СтрокаТаблицы.ПоляПоискаТЧ.Добавить(СокрЛП(СтрокаПоиска));
							
			КонецЦикла;	
						
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИтоговаяСтрокаПоискаПоТЧ = "";
	
	// в приемник нужно передать информацию о полях поиска для табличных частей
	Для Каждого СтрокаСвойств Из НоваяСтрока.Свойства Цикл
		
		Если Не СтрокаСвойств.ЭтоГруппа
			ИЛИ ПустаяСтрока(СтрокаСвойств.ВидИсточника)
			ИЛИ ПустаяСтрока(СтрокаСвойств.Приемник) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаСвойств.СтрокаПолейПоиска) Тогда
			Продолжить;
		КонецЕсли;
		
		ИтоговаяСтрокаПоискаПоТЧ = ИтоговаяСтрокаПоискаПоТЧ + Символы.ПС + СтрокаСвойств.ВидИсточника + "." + СтрокаСвойств.Приемник + ":" + СтрокаСвойств.СтрокаПолейПоиска;
		
	КонецЦикла;
	
	ИтоговаяСтрокаПоискаПоТЧ = СокрЛП(ИтоговаяСтрокаПоискаПоТЧ);
	
	Если Не ПустаяСтрока(ИтоговаяСтрокаПоискаПоТЧ) Тогда
		
		одЗаписатьЭлемент(ЗаписьXML, "ПоискПоТабличнымЧастям", ИтоговаяСтрокаПоискаПоТЧ);	
		
	КонецЕсли;

	ЗаписьXML.ЗаписатьКонецЭлемента();

	
	// Быстрый доступ к ПКО по имени
	
	Правила.Вставить(НоваяСтрока.Имя, НоваяСтрока);
	
КонецПроцедуры // ЗагрузитьПравилоКонвертации() 

Процедура ЗагрузитьНастройкуВариантовПоиска(ПравилаОбмена, НоваяСтрока)
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "ИмяНастройкиДляАлгоритма" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Если мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
				НоваяСтрока.ИмяНастройкиДляАлгоритма = Значение;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ИмяНастройкиДляПользователя" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Если мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
				НоваяСтрока.ИмяНастройкиДляПользователя = Значение;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "ОписаниеНастройкиДляПользователя" Тогда
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Если мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
				НоваяСтрока.ОписаниеНастройкиДляПользователя = Значение;
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "ВариантПоиска") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиВариантовПоиска(ПравилаОбмена, СтрокаБазовогоПКО)

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ИмяУзла = "ВариантПоиска" Тогда
			
			Если мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
            	СтрокаНастройки = мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска.Добавить();
				СтрокаНастройки.КодПравилаОбмена = СтрокаБазовогоПКО.Имя;
				СтрокаНастройки.НаименованиеПравилаОбмена = СтрокаБазовогоПКО.Наименование;
			Иначе
				СтрокаНастройки = Неопределено;
			КонецЕсли;
			
			ЗагрузитьНастройкуВариантовПоиска(ПравилаОбмена, СтрокаНастройки);
			
		ИначеЕсли (ИмяУзла = "НастройкаВариантовПоискаОбъектов") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСвойства()

Процедура ИнициализацияТаблицДанныхОПравилахОбмена() Экспорт
	
	ИнициализацияТаблицыНастроекВариантовПоиска();
	ИнициализацияТаблицыНастроекВыгрузкиИКонвертации();
	
КонецПроцедуры

Процедура ИнициализацияТаблицыНастроекВариантовПоиска()
	
	мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска = Новый ТаблицаЗначений;
	
	Колонки = мТаблицаРезультатовЗагрузкиИнформацииОПоляхПоиска.Колонки;

	Колонки.Добавить("КодПравилаОбмена");
	Колонки.Добавить("НаименованиеПравилаОбмена");
	
	Колонки.Добавить("ИмяНастройкиДляАлгоритма");
	Колонки.Добавить("ИмяНастройкиДляПользователя");
	Колонки.Добавить("ОписаниеНастройкиДляПользователя");	
	
КонецПроцедуры

Процедура ИнициализацияТаблицыНастроекВыгрузкиИКонвертации()
	
	мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации = Новый ТаблицаЗначений;
	
	Колонки = мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации.Колонки;

	Колонки.Добавить("КодПравилаВыгрузки");
	Колонки.Добавить("НаименованиеПравилаВыгрузки");
	Колонки.Добавить("КодПравилаОбмена");
	
	Колонки.Добавить("ВыгружатьДанные", одОписаниеТипа("Булево"));
	Колонки.Добавить("ВыгружатьПоСсылке", одОписаниеТипа("Булево"));
		
КонецПроцедуры

 
// Осуществляет загрузку правил конвертации объектов
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаКонвертации(ПравилаОбмена, ЗаписьXML)

	ТаблицаПравилКонвертации.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаКонвертацииОбъектов");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Правило" Тогда
			
			ЗагрузитьПравилоКонвертации(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли (ИмяУзла = "ПравилаКонвертацииОбъектов") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьПравилаКонвертации() 

// Осуществляет загрузку группы правил очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая группу правил очистки данных
// 
Процедура ЗагрузитьГруппуПОД(ПравилаОбмена, НоваяСтрока)

	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Включить  = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Группа правил очистки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли			
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьГруппуПОД()

// Осуществляет загрузку правила очистки данных в соответствии с форматом правил обмена
//
// Параметры:
//  НоваяСтрока    - строка дерева значений, описывающая правило очистки данных
// 
Процедура ЗагрузитьПОД(ПравилаОбмена, НоваяСтрока)
	
	НоваяСтрока.Включить = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Код" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			НоваяСтрока.Имя = Значение;

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Правило очистки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			
			Если Не мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
			
				ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
				Если Не ПустаяСтрока(ОбъектВыборки) Тогда
					НоваяСтрока.ОбъектВыборки = Тип(ОбъектВыборки);
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ИмяУзла = "УдалятьЗаПериод" Тогда
			НоваяСтрока.УдалятьЗаПериод = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Непосредственно" Тогда
			НоваяСтрока.Непосредственно = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);

		
		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередУдалениемОбъекта" Тогда
			НоваяСтрока.ПередУдалением = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		// Выход
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьПОД()

// Осуществляет загрузку правил очистки данных
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьПравилаОчистки(ПравилаОбмена, ЗаписьXML)

	ТаблицаПравилОчистки.Строки.Очистить();
	СтрокиДЗ = ТаблицаПравилОчистки.Строки;
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОчисткиДанных");

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ТипУзла = ПравилаОбмена.ТипУзла;
		
		Если ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
			Если РежимОбмена <> "Загрузка" Тогда
				ЗаписьXML.ЗаписатьНачалоЭлемента(ПравилаОбмена.Имя);
				Пока ПравилаОбмена.ПрочитатьАтрибут() Цикл
					ЗаписьXML.ЗаписатьАтрибут(ПравилаОбмена.Имя, ПравилаОбмена.Значение);
				КонецЦикла;
			Иначе
				Если ИмяУзла = "Правило" Тогда
					СтрокаДЗ = СтрокиДЗ.Добавить();
					ЗагрузитьПОД(ПравилаОбмена, СтрокаДЗ);
				ИначеЕсли ИмяУзла = "Группа" Тогда
					СтрокаДЗ = СтрокиДЗ.Добавить();
					ЗагрузитьГруппуПОД(ПравилаОбмена, СтрокаДЗ);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
			ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
			Если ИмяУзла = "ПравилаОчисткиДанных" Тогда
				Прервать;
			Иначе
				Если РежимОбмена <> "Загрузка" Тогда
					ЗаписьXML.ЗаписатьКонецЭлемента();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипУзла = одТипУзлаXML_Текст Тогда
			Если РежимОбмена <> "Загрузка" Тогда
				ЗаписьXML.ЗаписатьТекст(ПравилаОбмена.Значение);
			КонецЕсли;
		КонецЕсли; 
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьПравилаОчистки() 

// Осуществляет загрузку алгоритма в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьАлгоритм(ПравилаОбмена, ЗаписьXML)

	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
	Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Текст" Тогда
			Текст = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Алгоритм") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			одПропустить(ПравилаОбмена);
		КонецЕсли;
		
	КонецЦикла;

	
	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			Алгоритмы.Вставить(Имя, Текст);
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритм");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
			одЗаписатьЭлемент(ЗаписьXML, "Текст", Текст);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если РежимОбмена <> "Загрузка" Тогда
			Алгоритмы.Вставить(Имя, Текст);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ЗагрузитьАлгоритм() 

// Осуществляет загрузку алгоритмов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьАлгоритмы(ПравилаОбмена, ЗаписьXML)

	Алгоритмы.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Алгоритмы");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		Если      ИмяУзла = "Алгоритм" Тогда
			ЗагрузитьАлгоритм(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Алгоритмы") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьАлгоритмы() 

// Осуществляет загрузку запроса в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьЗапрос(ПравилаОбмена, ЗаписьXML)

	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
	Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Текст" Тогда
			Текст = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		ИначеЕсли (ИмяУзла = "Запрос") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			одПропустить(ПравилаОбмена);
		КонецЕсли;
		
	КонецЦикла;

	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			Запрос	= Новый Запрос(Текст);
			Запросы.Вставить(Имя, Запрос);
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Запрос");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
			одЗаписатьЭлемент(ЗаписьXML, "Текст", Текст);
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	Иначе
		Если РежимОбмена <> "Загрузка" Тогда
			Запрос	= Новый Запрос(Текст);
			Запросы.Вставить(Имя, Запрос);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗапрос() 

// Осуществляет загрузку запросов в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьЗапросы(ПравилаОбмена, ЗаписьXML)

	Запросы.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Запросы");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Запрос" Тогда
			ЗагрузитьЗапрос(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Запросы") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьЗапросы() 

// Осуществляет загрузку параметров в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПараметры(ПравилаОбмена, ЗаписьXML)

	Параметры.Очистить();
	СобытияПослеЗагрузкиПараметров.Очистить();
	ТаблицаНастройкиПараметров.Очистить();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Параметры");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;

		Если ИмяУзла = "Параметр" И ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			
			//Загрузка по версии правил 2.01
			Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
			Наименование            = одАтрибут(ПравилаОбмена, одТипСтрока, "Наименование");
			УстанавливатьВДиалоге   = одАтрибут(ПравилаОбмена, одТипБулево, "УстанавливатьВДиалоге");
			СтрокаТипаЗначения      = одАтрибут(ПравилаОбмена, одТипСтрока, "ТипЗначения");
			ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");
			ПередаватьПараметрПриВыгрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ПередаватьПараметрПриВыгрузке");
			ПравилоКонвертации = одАтрибут(ПравилаОбмена, одТипСтрока, "ПравилоКонвертации");
			АлгоритмПослеЗагрузкиПараметра = одАтрибут(ПравилаОбмена, одТипСтрока, "ПослеЗагрузкиПараметра");
			
			Если Не Пустаястрока(АлгоритмПослеЗагрузкиПараметра) тогда
				
				СобытияПослеЗагрузкиПараметров.Вставить(Имя, АлгоритмПослеЗагрузкиПараметра);
				
			Конецесли;
			
			// Определяем типы значений и устанавливаем начальные значения
			Если Не ПустаяСтрока(СтрокаТипаЗначения) Тогда
				
				Попытка
					ТипЗначенияДанных = Тип(СтрокаТипаЗначения);
					ТипОпределен = ИСТИНА;
				Исключение
					ТипОпределен = ЛОЖЬ;
				КонецПопытки;
				
			Иначе
				
				ТипОпределен = ЛОЖЬ;
				
			КонецЕсли;
			
			Если ТипОпределен Тогда
				ЗначениеПараметра = одПолучитьПустоеЗначение(ТипЗначенияДанных);
				Параметры.Вставить(Имя, ЗначениеПараметра);
			Иначе
				ЗначениеПараметра = "";
				Параметры.Вставить(Имя);
			КонецЕсли;
						
			Если УстанавливатьВДиалоге = ИСТИНА Тогда
				
				СтрокаТаблицы              = ТаблицаНастройкиПараметров.Добавить();
				СтрокаТаблицы.Наименование = Наименование;
				СтрокаТаблицы.Имя          = Имя;
				СтрокаТаблицы.Значение = ЗначениеПараметра;				
				СтрокаТаблицы.ПередаватьПараметрПриВыгрузке = ПередаватьПараметрПриВыгрузке;
				СтрокаТаблицы.ПравилоКонвертации = ПравилоКонвертации;
				
			КонецЕсли;
			
			Если ИспользуетсяПриЗагрузке
				И РежимОбмена = "Выгрузка" Тогда
				
				ЗаписьXML.ЗаписатьНачалоЭлемента("Параметр");
				УстановитьАтрибут(ЗаписьXML, "Имя",   Имя);
				УстановитьАтрибут(ЗаписьXML, "Наименование", Наименование);
					
				Если НЕ ПустаяСтрока(АлгоритмПослеЗагрузкиПараметра) Тогда
					УстановитьАтрибут(ЗаписьXML, "ПослеЗагрузкиПараметра", XMLСтрока(АлгоритмПослеЗагрузкиПараметра));
				КонецЕсли;
				
				ЗаписьXML.ЗаписатьКонецЭлемента();
				
			КонецЕсли;

		ИначеЕсли (ТипУзла = одТипУзлаXML_Текст) Тогда
			
			// Для совместимости с версией правил 2.0 используем загрузку из строки
			СтрокаПараметров = ПравилаОбмена.Значение;
			Для каждого Пар Из МассивИзСтроки(СтрокаПараметров) Цикл
				Параметры.Вставить(Пар);
			КонецЦикла;
			
		ИначеЕсли (ИмяУзла = "Параметры") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();

КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку обработки в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьОбработку(ПравилаОбмена, ЗаписьXML)

	Имя                     = одАтрибут(ПравилаОбмена, одТипСтрока, "Имя");
	Наименование            = одАтрибут(ПравилаОбмена, одТипСтрока, "Наименование");
	ЭтоОбработкаНастройки   = одАтрибут(ПравилаОбмена, одТипБулево, "ЭтоОбработкаНастройки");
	
	ИспользуетсяПриВыгрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриВыгрузке");
	ИспользуетсяПриЗагрузке = одАтрибут(ПравилаОбмена, одТипБулево, "ИспользуетсяПриЗагрузке");

	СтрокаПараметров        = одАтрибут(ПравилаОбмена, одТипСтрока, "Параметры");
	
	ХранилищеОбработки      = одЗначениеЭлемента(ПравилаОбмена, одТипХранилищеЗначения);

	ПараметрыДопОбработок.Вставить(Имя, МассивИзСтроки(СтрокаПараметров));
	
	
	Если ИспользуетсяПриЗагрузке Тогда
		Если РежимОбмена = "Загрузка" Тогда
			#Если Клиент Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор();
			ИмяВременногоФайла      = КаталогВременныхФайлов() + УникальныйИдентификатор + ".epf";
			ХранилищеОбработки.Получить().Записать(ИмяВременногоФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
			УдалитьФайлы(ИмяВременногоФайла);
            ДопОбработки.Вставить(Имя, ВнешняяОбработка);
			#КонецЕсли
		Иначе
			ЗаписьXML.ЗаписатьНачалоЭлемента("Обработка");
			УстановитьАтрибут(ЗаписьXML, "ИспользуетсяПриЗагрузке", Истина);
			УстановитьАтрибут(ЗаписьXML, "Имя",                     Имя);
			УстановитьАтрибут(ЗаписьXML, "Наименование",            Наименование);
			УстановитьАтрибут(ЗаписьXML, "ЭтоОбработкаНастройки",   ЭтоОбработкаНастройки);
			ЗаписьXML.ЗаписатьТекст(XMLСтрока(ХранилищеОбработки));
			ЗаписьXML.ЗаписатьКонецЭлемента();
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользуетсяПриВыгрузке Тогда
		Если РежимОбмена <> "Загрузка" Тогда
			#Если Клиент Тогда
			УникальныйИдентификатор = Новый УникальныйИдентификатор();
			ИмяВременногоФайла      = КаталогВременныхФайлов() + УникальныйИдентификатор + ".epf";
			ХранилищеОбработки.Получить().Записать(ИмяВременногоФайла);
			ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);
			УдалитьФайлы(ИмяВременногоФайла);
            ДопОбработки.Вставить(Имя, ВнешняяОбработка);
			#КонецЕсли
		КонецЕсли;
	КонецЕсли;

	Если ЭтоОбработкаНастройки Тогда
		Если (РежимОбмена = "Загрузка") И ИспользуетсяПриЗагрузке Тогда
			ОбработкиНастройкиЗагрузки.Добавить(Имя, Наименование, , );
			
		ИначеЕсли (РежимОбмена = "Выгрузка") И ИспользуетсяПриВыгрузке Тогда
			ОбработкиНастройкиВыгрузки.Добавить(Имя, Наименование, , );
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьОбработку() 

// Осуществляет загрузку внешних обработок в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  ЗаписьXML      - Объект типа XMLЗапись - правила, сохраняемые в файл обмена и
//                   используемые при загрузке данных
// 
Процедура ЗагрузитьОбработки(ПравилаОбмена, ЗаписьXML)

	ДопОбработки.Очистить();
	ПараметрыДопОбработок.Очистить();
	
	ОбработкиНастройкиВыгрузки.Очистить();
	ОбработкиНастройкиЗагрузки.Очистить();

	ЗаписьXML.ЗаписатьНачалоЭлемента("Обработки");
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если      ИмяУзла = "Обработка" Тогда
			ЗагрузитьОбработку(ПравилаОбмена, ЗаписьXML);
		ИначеЕсли (ИмяУзла = "Обработки") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	ЗаписьXML.ЗаписатьКонецЭлемента();
	
КонецПроцедуры // ЗагрузитьОбработки() 

// Осуществляет загрузку группы правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая группу правил выгрузки данных
// 
Процедура ЗагрузитьГруппуПВД(ПравилаОбмена, НоваяСтрока)

	СтрокаНастройки = Неопределено;
	НоваяСтрока.ЭтоГруппа = Истина;
	НоваяСтрока.Включить  = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
	
	Пока ПравилаОбмена.Прочитать() Цикл
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		ТипУзла = ПравилаОбмена.ТипУзла;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Группа правил выгрузки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "Правило" Тогда
			
			Если мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
				СтрокаНастройки = мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации.Добавить();
			КонецЕсли;
			
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьПВД(ПравилаОбмена, СтрокаДЗ, СтрокаНастройки);
			
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_НачалоЭлемента) Тогда
			СтрокаДЗ = НоваяСтрока.Строки.Добавить();
			ЗагрузитьГруппуПВД(ПравилаОбмена, СтрокаДЗ);
					
		ИначеЕсли (ИмяУзла = "Группа") И (ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	
	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли; 
	
КонецПроцедуры // ЗагрузитьГруппуПВД()

// Осуществляет загрузку правила выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
//  НоваяСтрока    - строка дерева значений, описывающая правило выгрузки данных
// 
Процедура ЗагрузитьПВД(ПравилаОбмена, НоваяСтрока, СтрокаНастройки)

	НоваяСтрока.Включить = Число(Не одАтрибут(ПравилаОбмена, одТипБулево, "Отключить"));
		
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		Если      ИмяУзла = "Код" Тогда
			НоваяСтрока.Имя = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			НоваяСтрока.Наименование = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			#Если Клиент Тогда
			Состояние("Правило выгрузки данных: " + НоваяСтрока.Наименование);
			#КонецЕсли
		
		ИначеЕсли ИмяУзла = "Порядок" Тогда
			НоваяСтрока.Порядок = одЗначениеЭлемента(ПравилаОбмена, одТипЧисло);
			
		ИначеЕсли ИмяУзла = "СпособОтбораДанных" Тогда
			НоваяСтрока.СпособОтбораДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ВыбиратьДанныеДляВыгрузкиОднимЗапросом" Тогда
			// параметр игнорируется при on-line обмене данными
			ВыбиратьДанныеДляВыгрузкиОднимЗапросом = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
			
		ИначеЕсли ИмяУзла = "НеВыгружатьОбъектыСозданныеВБазеПриемнике" Тогда
			
			НоваяСтрока.НеВыгружатьОбъектыСозданныеВБазеПриемнике = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);

		ИначеЕсли ИмяУзла = "ОбъектВыборки" Тогда
			
			ОбъектВыборки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
			Если Не мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
			    				
				Если Не ПустаяСтрока(ОбъектВыборки) Тогда
					НоваяСтрока.ОбъектВыборки = Тип(ОбъектВыборки);
				КонецЕсли;
				// Для поддержки отбора с помощью построителя
				Если Найти(ОбъектВыборки, "Ссылка.") Тогда
					НоваяСтрока.ИмяОбъектаДляЗапроса = СтрЗаменить(ОбъектВыборки, "Ссылка.", ".");
				Иначе
					НоваяСтрока.ИмяОбъектаДляЗапросаРегистра = СтрЗаменить(ОбъектВыборки, "Запись.", ".");
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли ИмяУзла = "КодПравилаКонвертации" Тогда
			НоваяСтрока.ПравилоКонвертации = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		// Обработчики событий

		ИначеЕсли ИмяУзла = "ПередОбработкойПравила" Тогда
			НоваяСтрока.ПередОбработкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "ПослеОбработкиПравила" Тогда
			НоваяСтрока.ПослеОбработки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			НоваяСтрока.ПередВыгрузкой = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			НоваяСтрока.ПослеВыгрузки = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
        		
		ИначеЕсли (ИмяУзла = "Правило") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Если ПустаяСтрока(НоваяСтрока.Наименование) Тогда
		НоваяСтрока.Наименование = НоваяСтрока.Имя;
	КонецЕсли;
	
	Если СтрокаНастройки <> Неопределено Тогда
		
		СтрокаНастройки.КодПравилаВыгрузки = НоваяСтрока.Имя;
		СтрокаНастройки.НаименованиеПравилаВыгрузки = НоваяСтрока.Наименование;
		СтрокаНастройки.КодПравилаОбмена = НоваяСтрока.ПравилоКонвертации;
		СтрокаНастройки.ВыгружатьДанные = НоваяСтрока.Включить;
		
		Если Не ПустаяСтрока(СтрокаНастройки.КодПравилаОбмена) Тогда
			
			СтрокаПКО = ТаблицаПравилКонвертации.Найти(СтрокаНастройки.КодПравилаОбмена, "Имя");
			Если СтрокаПКО <> Неопределено Тогда
				СтрокаНастройки.ВыгружатьПоСсылке = СтрокаПКО.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьПВД()

// Осуществляет загрузку правил выгрузки данных в соответствии с форматом правил обмена
//
// Параметры:
//  ПравилаОбмена  - Объект типа XMLЧтение
// 
Процедура ЗагрузитьПравилаВыгрузки(ПравилаОбмена)

	ТаблицаПравилВыгрузки.Строки.Очистить();
	СтрокаНастройки = Неопределено;

	СтрокиДЗ = ТаблицаПравилВыгрузки.Строки;
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Правило" Тогда
			
			Если мРежимЗагрузкиИнформацииОПравилахОбмена Тогда
				СтрокаНастройки = мТаблицаРезультатовЗагрузкиИнформацииОПравилахВыгрузкиИКонвертации.Добавить();
			КонецЕсли;
						
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьПВД(ПравилаОбмена, СтрокаДЗ, СтрокаНастройки);
			
		ИначеЕсли ИмяУзла = "Группа" Тогда
			
			СтрокаДЗ = СтрокиДЗ.Добавить();
			ЗагрузитьГруппуПВД(ПравилаОбмена, СтрокаДЗ);
			
		ИначеЕсли (ИмяУзла = "ПравилаВыгрузкиДанных") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	СтрокиДЗ.Сортировать("Порядок", Истина);

КонецПроцедуры // ЗагрузитьПравилаВыгрузки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

Функция НайтиПравилоПоТипу(ТипОбъекта) Экспорт
	
	Правило = Менеджеры[ТипОбъекта];
	Возврат Правило;	
	
КонецФункции

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="") Экспорт

	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		
	Иначе
		
		Правило = Менеджеры[ТипЗнч(Объект)];
		Если Правило <> Неопределено Тогда
			Правило    = Правило.ПКО;
			
			Если Правило <> Неопределено Тогда 
				ИмяПравила = Правило.Имя;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Возврат Правило; 
	
КонецФункции

// Сохраняет правила обмена фо внутреннем формате
//
// Параметры:
//  Нет.
// 
Процедура СохранитьПравилаВоВнутреннемФормате() Экспорт

	Для Каждого Правило Из ТаблицаПравилКонвертации Цикл
		Правило.Выгруженные = СоздатьТаблицуВыгруженныхОбъектов();
	КонецЦикла;

	СтруктураПравил = Новый Структура;
	
	//Сохраняем запросы
	ЗапросыДляСохранения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из Запросы Цикл
		ЗапросыДляСохранения.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение.Текст);
	КонецЦикла;

	ПараметрыДляСохранения = Новый Структура;
	Для Каждого ЭлементСтруктуры Из Параметры Цикл
		ПараметрыДляСохранения.Вставить(ЭлементСтруктуры.Ключ, Неопределено);
	КонецЦикла;

	СтруктураПравил.Вставить("ТаблицаПравилВыгрузки",      ТаблицаПравилВыгрузки);
	СтруктураПравил.Вставить("ТаблицаПравилКонвертации",   ТаблицаПравилКонвертации);
	СтруктураПравил.Вставить("Алгоритмы",                  Алгоритмы);
	СтруктураПравил.Вставить("Запросы",                    ЗапросыДляСохранения);
	СтруктураПравил.Вставить("Конвертация",                Конвертация);
	СтруктураПравил.Вставить("мXMLПравила",                мXMLПравила);
	СтруктураПравил.Вставить("ТаблицаНастройкиПараметров", ТаблицаНастройкиПараметров);
	СтруктураПравил.Вставить("Параметры",                  ПараметрыДляСохранения);
	
	СтруктураПравил.Вставить("ВерсияПлатформыПриемника",   ВерсияПлатформыПриемника);
	
	СохраненныеНастройки  = Новый ХранилищеЗначения(СтруктураПравил);
	
КонецПроцедуры // СохранитьПравилаВоВнутреннемФормате()

// Восстанавливает правила из внутреннего формата
//
// Параметры:
// 
Процедура ВосстановитьПравилаИзВнутреннегоФормата() Экспорт

	Если СохраненныеНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПравил = СохраненныеНастройки.Получить();

	ТаблицаПравилВыгрузки      = СтруктураПравил.ТаблицаПравилВыгрузки;
	ТаблицаПравилКонвертации   = СтруктураПравил.ТаблицаПравилКонвертации;
	Алгоритмы                  = СтруктураПравил.Алгоритмы;
	ЗапросыДляВосстановления   = СтруктураПравил.Запросы;
	Конвертация                = СтруктураПравил.Конвертация;
	мXMLПравила                = СтруктураПравил.мXMLПравила;
	ТаблицаНастройкиПараметров = СтруктураПравил.ТаблицаНастройкиПараметров;
	Параметры                  = СтруктураПравил.Параметры;
	
	СтруктураПравил.Свойство("ВерсияПлатформыПриемника", ВерсияПлатформыПриемника);
		
	ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта    = Не ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта);
	ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта     = Не ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта);
	ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта    = Не ПустаяСтрока(Конвертация.ПередЗагрузкойОбъекта);
	ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта     = Не ПустаяСтрока(Конвертация.ПослеЗагрузкиОбъекта);
	ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Не ПустаяСтрока(Конвертация.ПередКонвертациейОбъекта);

	// Восстанавливаем запросы
	Запросы.Очистить();
	Для Каждого ЭлементСтруктуры Из ЗапросыДляВосстановления Цикл
		Запрос = Новый Запрос(ЭлементСтруктуры.Значение);
		Запросы.Вставить(ЭлементСтруктуры.Ключ, Запрос);
	КонецЦикла;

	ИнициализироватьМенеджерыИСообщения();
	
	Правила.Очистить();
	
	Если РежимОбмена = "Выгрузка" Тогда
	
		Для Каждого СтрокаТаблицы Из ТаблицаПравилКонвертации Цикл
			Правила.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы);

			Если СтрокаТаблицы.Источник <> Неопределено Тогда
				
				Попытка
					Если ТипЗнч(СтрокаТаблицы.Источник) = одТипСтрока Тогда
						Менеджеры[Тип(СтрокаТаблицы.Источник)].ПКО = СтрокаТаблицы;
					Иначе
						Менеджеры[СтрокаТаблицы.Источник].ПКО = СтрокаТаблицы;
					КонецЕсли;			
				Исключение
					ЗаписатьИнформациюОбОшибкеВПротокол(11, ОписаниеОшибки(), Строка(СтрокаТаблицы.Источник));
				КонецПопытки;
				
			КонецЕсли;

		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры // СохранитьПравилаВоВнутреннемФормате()

// Устанавливает значения параметров в структуре Параметры 
// по таблице ТаблицаНастройкиПараметров
//
Процедура УстановитьПараметрыИзДиалога() Экспорт

	Для Каждого СтрокаТаблицы Из ТаблицаНастройкиПараметров Цикл
		Параметры.Вставить(СтрокаТаблицы.Имя, СтрокаТаблицы.Значение);
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьЗначениеПараметраВТаблице(ИмяПараметра, ЗначениеПараметра) Экспорт
	
	СтрокаТаблицы = ТаблицаНастройкиПараметров.Найти(ИмяПараметра, "Имя");
	
	Если СтрокаТаблицы <> Неопределено Тогда
		
		СтрокаТаблицы.Значение = ЗначениеПараметра;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПервоначальныеЗначенияПараметров() Экспорт
	
	Для Каждого ТекПараметр Из Параметры Цикл
		
		УстановитьЗначениеПараметраВТаблице(ТекПараметр.Ключ, ТекПараметр.Значение);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА ПРАВИЛ ОЧИСТКИ

Процедура УдалитьОбъект(Объект, УдалитьНепосредственно, ИмяТипа = "")
	
	Попытка
		
		Предопределенный = Объект.Предопределенный;
		
	Исключение
		
		Предопределенный = Ложь;
		
	КонецПопытки;
	
	Если Предопределенный Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если УдалитьНепосредственно Тогда
		
		//УстановитьОбменДаннымиЗагрузка(Объект);
		
		Объект.Удалить();
		
		// удалить регистрацию для узла откуда получены данные
		Попытка
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаЗагрузкаДанных, Объект.Ссылка);
		Исключение
			
		КонецПопытки;		
				
	Иначе
		
		УстановитьПометкуУдаленияУОбъекта(Объект, Истина, ИмяТипа);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно)
	
	Если Свойства.ИмяТипа = "РегистрСведений" Тогда
			
		Объект.Удалить();
			
	Иначе
		
		УдалитьОбъект(Объект, УдалитьНепосредственно, Свойства.ИмяТипа);		
			
	КонецЕсли;	
	
КонецПроцедуры

// Производит удаление (или помечает на удаление) объект выборки в соответствии с указанным правилом
//
// Параметры:
//  Объект         - удаляемый (помечаемый на удаление) объект выборки
//  Правило        - ссылка на правило очистки данных
//  Свойства       - свойства объекта метаданного удаляемого объекта 
//  ВходящиеДанные - произвольные вспомогательные данные
// 
Процедура УдалениеОбъектаВыборки(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено)

	Отказ			       = Ложь;
	УдалитьНепосредственно = Правило.Непосредственно;


	// Обработчик ПередУдалениемОбъектаВыборки
	
	Если Не ПустаяСтрока(Правило.ПередУдалением) Тогда
	
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПередУдалением"));
				
			Иначе
				
 				Выполнить(Правило.ПередУдалением);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(29, ОписаниеОшибки(), Правило.Имя, Объект, "ПередУдалениемОбъектаВыборки");
									
		КонецПопытки;
		
		Если Отказ Тогда
		
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	Попытка
		
		ВыполнитьУдалениеОбъекта(Объект, Свойства, УдалитьНепосредственно);
					
	Исключение
		
		ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(24, ОписаниеОшибки(), Правило.Имя, Объект, "");
								
	КонецПопытки;
	
КонецПроцедуры // УдалениеОбъектаВыборки()

// Очищает данные по указанному правилу
//
// Параметры:
//  Правило        - ссылка на правило очистки данных
// 
Процедура ОчиститьДанныеПоПравилу(Правило)
	
	// Обработчик ПередОбработкой

	Отказ			= Ложь;
	ВыборкаДанных	= Неопределено;

	ИсходящиеДанные	= Неопределено;


	// Обработчик ПередОбработкойПравилаОчистки
	Если Не ПустаяСтрока(Правило.ПередОбработкой) Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПередОбработкой"));
				
			Иначе
				
				Выполнить(Правило.ПередОбработкой);
				
			КонецЕсли;
			
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(27, ОписаниеОшибки(), Правило.Имя, "", "ПередОбработкойПравилаОчистки");
						
		КонецПопытки;
			
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли; 
		
	КонецЕсли;


    // Стандартная выборка
	
	Попытка
		Свойства	= Менеджеры[Правило.ОбъектВыборки];
	Исключение
		Свойства	= Неопределено;
	КонецПопытки;
	
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" Тогда
		
		ИмяТипа		= Свойства.ИмяТипа;
		
		Если ИмяТипа = "РегистрБухгалтерии" 
			ИЛИ ИмяТипа = "Константы" Тогда
			
			Возврат;
			
		КонецЕсли;
		
		НужныВсеПоля  = Не ПустаяСтрока(Правило.ПередУдалением);
		
		Выборка = ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, Истина, Правило.Непосредственно, НужныВсеПоля);
		
		Пока Выборка.Следующий() Цикл
			
			#Если Клиент тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли			
				
			Если ИмяТипа =  "РегистрСведений" Тогда
				
				МенеджерЗаписи = Свойства.Менеджер.СоздатьМенеджерЗаписи(); 
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
									
				УдалениеОбъектаВыборки(МенеджерЗаписи, Правило, Свойства, ИсходящиеДанные);				
									
			Иначе
					
				УдалениеОбъектаВыборки(Выборка.Ссылка.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
			КонецЕсли;
				
		КонецЦикла;		

	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда

		Если ВыборкаДанных <> Неопределено Тогда
			
			Выборка = ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных);
			
			Если Выборка <> Неопределено Тогда
				
				Пока Выборка.Следующий() Цикл
					
					Если ИмяТипа =  "РегистрСведений" Тогда
				
						МенеджерЗаписи = Свойства.Менеджер.СоздатьМенеджерЗаписи(); 
						ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
											
						УдалениеОбъектаВыборки(МенеджерЗаписи, Правило, Свойства, ИсходящиеДанные);				
											
					Иначе
							
						УдалениеОбъектаВыборки(Выборка.Ссылка.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
							
					КонецЕсли;					
					
				КонецЦикла;	
				
			Иначе
				
				Для каждого Объект Из ВыборкаДанных Цикл
					
					УдалениеОбъектаВыборки(Объект.ПолучитьОбъект(), Правило, Свойства, ИсходящиеДанные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли; 
			
	КонецЕсли; 

	
	// Обработчик ПослеОбработкиПравилаОчистки
	
	Если Не ПустаяСтрока(Правило.ПослеОбработки) Тогда
	
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПослеОбработки"));
				
			Иначе
				
				Выполнить(Правило.ПослеОбработки);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикаОчисткиДанных(28, ОписаниеОшибки(), Правило.Имя, "", "ПослеОбработкиПравилаОчистки");
									
		КонецПопытки;
		
	КонецЕсли;	
	
КонецПроцедуры // ОчиститьДанныеПоПравилу()

// Обходит дерево правил очистки данных и выполняет очистку
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
// 
Процедура ОбработатьПравилаОчистки(Строки)
	
	Для каждого ПравилоОчистки Из Строки Цикл
		
		Если ПравилоОчистки.Включить = 0 Тогда
			
			Продолжить;
			
		КонецЕсли; 

		Если ПравилоОчистки.ЭтоГруппа Тогда
			
			ОбработатьПравилаОчистки(ПравилоОчистки.Строки);
			Продолжить;
			
		КонецЕсли;
		
		ОчиститьДанныеПоПравилу(ПравилоОчистки);
		
	КонецЦикла; 
	
КонецПроцедуры // ОбработатьПравилаОчистки() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАГРУЗКИ ДАННЫХ

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина) Экспорт
	
	Попытка
		Объект.ОбменДанными.Загрузка = Значение;
	Исключение
	КонецПопытки;
	
	Если УзелОбменаЗагрузкаДанных <> Неопределено
		И НЕ УзелОбменаЗагрузкаДанных.Пустая() Тогда
	
		Попытка
			Объект.ОбменДанными.Отправитель = УзелОбменаЗагрузкаДанных;
		Исключение
		КонецПопытки;
	
	КонецЕсли;
	
КонецПроцедуры // УстановитьОбменДаннымиЗагрузка()

Функция УстановитьСсылкуНового(Объект, Менеджер, СвойстваПоиска)
	
	УИ = СвойстваПоиска["{УникальныйИдентификатор}"];
	
	Если УИ <> Неопределено Тогда
		
		НоваяСсылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(УИ));
		
		Объект.УстановитьСсылкуНового(НоваяСсылка);
		
		СвойстваПоиска.Удалить("{УникальныйИдентификатор}");
		
	Иначе
		
		НоваяСсылка = Неопределено;
		
	КонецЕсли;
	
	Возврат НоваяСсылка;
	
КонецФункции


// Ищет объект по номеру в списке уже загруженных объектов.
//
// Параметры:
//  Нпп          - номер искомого объекта в файле обмена
//
// Возвращаемое значение:
//  Ссылка на найденный объект. Если объект не найден, возвращается Неопределено.
// 
Функция НайтиОбъектПоНомеру(Нпп, ТипОбъекта, РежимПоискаОсновногоОбъекта = Ложь)
	
	ТаблицаДляПоиска = ЗагруженныеОбъекты[ТипОбъекта];
	Если ТаблицаДляПоиска = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаДляПоиска.Найти(НПП, "НППСсылки");
	
	мНомерПоследнегоПоискаПоСсылке = мНомерПоследнегоПоискаПоСсылке + 1;
	
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		
		СтрокаТаблицы.КоличествоОбращений = СтрокаТаблицы.КоличествоОбращений + 1;
		СтрокаТаблицы.НомерПоследнегоОбращения = мНомерПоследнегоПоискаПоСсылке;
		
		Если РежимПоискаОсновногоОбъекта И СтрокаТаблицы.СсылкаФиктивная Тогда
			Возврат Неопределено;
		Иначе
			Возврат СтрокаТаблицы.УзелСсылки;
		КонецЕсли;       
				
	КонецЕсли
	
КонецФункции 

Функция НайтиОбъектПоГлобальномуНомеру(Нпп, РежимПоискаОсновногоОбъекта = Ложь)

	СтруктураРезультата = ЗагруженныеГлобальныеОбъекты[Нпп];
	
	Если СтруктураРезультата = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РежимПоискаОсновногоОбъекта И СтруктураРезультата.СсылкаФиктивная Тогда
		Возврат Неопределено;
	Иначе
		Возврат СтруктураРезультата.СсылкаНаОбъект;
	КонецЕсли;
	
КонецФункции 

Процедура ЗаписатьОбъектВИБ(Объект, Тип)
		
	Попытка
		
		УстановитьОбменДаннымиЗагрузка(Объект);
		Объект.Записать();
		
	Исключение
		
		СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеВПротокол(26, ОписаниеОшибки(), Объект, Тип);
		
		Если Не ФлагРежимОтладки Тогда
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецПопытки;		
		
КонецПроцедуры

Функция ОпределитьНаличиеДвиженийПоДокументу(ДокументСсылка)
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции


// Процедура удаления существующих движений документа при перепроведении (отмене проведения)
Процедура УдалитьДвиженияУДокумента(ДокументОбъект, Отказ)
	
	МассивОбрабатываемыхСтрокТаблицыДвижений = Новый Массив();
	
	// получение списка регистров, по которым существуют движения
	ТаблицаДвижений = ОпределитьНаличиеДвиженийПоДокументу(ДокументОбъект.Ссылка);
	ТаблицаДвижений.Колонки.Добавить("НаборЗаписей");
	ТаблицаДвижений.Колонки.Добавить("БезусловноеУдаление", Новый ОписаниеТипов("Булево"));
		
	Для Каждого СтрокаДвижения ИЗ ТаблицаДвижений Цикл
		// имя регистра передается как значение, полученное с помощью
		// функции ПолноеИмя() метаданных регистра
		ПозицияТочки = Найти(СтрокаДвижения.Имя, ".");
		ТипРегистра = Лев(СтрокаДвижения.Имя, ПозицияТочки - 1);
		ИмяРегистра = СокрП(Сред(СтрокаДвижения.Имя, ПозицияТочки + 1));

		МассивОбрабатываемыхСтрокТаблицыДвижений.Добавить(СтрокаДвижения);
		
		Если ТипРегистра = "РегистрНакопления" Тогда
			МетаданныеНабора = Метаданные.РегистрыНакопления[ИмяРегистра];
			Набор = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
			МетаданныеНабора = Метаданные.РегистрыБухгалтерии[ИмяРегистра];
			Набор = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
			МетаданныеНабора = Метаданные.РегистрыСведений[ИмяРегистра];
			Набор = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			
		ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
			МетаданныеНабора = Метаданные.РегистрыРасчета[ИмяРегистра];
			Набор = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
			
		КонецЕсли;
		
		Если НЕ ПравоДоступа("Изменение", Набор.Метаданные()) Тогда
			// отсутствуют права на всю таблицу регистра
			ВызватьИсключение "Нарушение прав доступа: " + СтрокаДвижения.Имя;
			Возврат;
		КонецЕсли;

		Набор.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);			

		// набор не записывается сразу, чтобы не откатывать транзакцию, если впоследствии
		// выяснится, что на один из регистров не хватает прав.		
		СтрокаДвижения.НаборЗаписей = Набор;		
		
	КонецЦикла;	
	
	Для Каждого СтрокаДвижения ИЗ МассивОбрабатываемыхСтрокТаблицыДвижений Цикл		
		Попытка
			СтрокаДвижения.НаборЗаписей.Записать();
		Исключение
			// возможно «сработал» RLS или механизм даты запрета изменения
			ВызватьИсключение "Операция не выполнена: " + СтрокаДвижения.Имя + Символы.ПС + ОписаниеОшибки();
		КонецПопытки;		
	КонецЦикла;
	
	ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект);
	
	// Удаление записей регистрации из всех последовательностей
	УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, Истина);

КонецПроцедуры

Процедура УдалитьРегистрациюДокументаВПоследовательностях(ДокументОбъект, ПроверятьДвижения = Ложь)
	// получение списка последовательностей в которых зарегистрирован документ
	Если ПроверятьДвижения Тогда
		ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект);
	КонецЕсли;      
	КоллекцияПоследовательностей = ДокументОбъект.ПринадлежностьПоследовательностям;
	Для Каждого НаборЗаписейРегистрацииВПоследовательности ИЗ КоллекцияПоследовательностей Цикл
		Если (НаборЗаписейРегистрацииВПоследовательности.Количество() > 0)
		  ИЛИ (ПроверятьДвижения И (НЕ ТаблицаРегистраций.Найти(НаборЗаписейРегистрацииВПоследовательности.Метаданные().Имя,"Имя") = Неопределено)) Тогда
		   НаборЗаписейРегистрацииВПоследовательности.Очистить();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры//УдалитьРегистрациюДокументаВПоследовательностях

Функция ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументОбъект)
	ТекстЗапроса = "";	
	
	Для Каждого Последовательность ИЗ ДокументОбъект.ПринадлежностьПоследовательностям Цикл
		// в запросе получаем имена последовательностей, в которых документ зарегистрирован
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ """ + Последовательность.Метаданные().Имя 
		+  """ КАК Имя ИЗ " + Последовательность.Метаданные().ПолноеИмя()  
		+ " ГДЕ Регистратор = &Регистратор";
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений();
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
		ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();	
		Возврат ТаблицаЗапроса;
	КонецЕсли;
	
КонецФункции

// Процедура очищает коллекцию движений документа
//
Процедура ОчисткаКоллекцииДвиженийДокумента(ДокументОбъект)
		
	Для Каждого Движение ИЗ ДокументОбъект.Движения Цикл
		Если Движение.Количество() > 0 Тогда
			Движение.Очистить();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Процедура ОтменитьПроведениеОбъектаВИБ(Объект, Тип)
		
	Попытка
		
		// отменяем проведение документа
		Объект.Проведен = Ложь;
		УстановитьОбменДаннымиЗагрузка(Объект);
		Объект.Записать();
		
		Отказ = Ложь;
		УдалитьДвиженияУДокумента(Объект, Отказ);
		
	Исключение
		
		СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеВПротокол(26, ОписаниеОшибки(), Объект, Тип);
		
		Если Не ФлагРежимОтладки Тогда
			ВызватьИсключение СтрокаСообщенияОбОшибке;
		КонецЕсли;
		
	КонецПопытки;	
			
КонецПроцедуры

Процедура УстановитьТекущуюДатуРеквизиту(РеквизитОбъекта)
	
	#Если Клиент Тогда
		РеквизитОбъекта = РабочаяДата;
	#Иначе
		РеквизитОбъекта = ТекущаяДата();
	#КонецЕсли	
	
КонецПроцедуры

Процедура УдалитьПриНеобходимостиЗаписьСНеуказаннойСсылкойВДругойИБВРегистреСоответствий(СсылкаНаОбъект, ЗаписатьВРежимеОбмена = Ложь)
	
	мЗапросНаличияПустыхДляИсточникаВРегистреСоответствия.УстановитьПараметр("СвояСсылка", СсылкаНаОбъект);
	
	РезультатЗапроса = мЗапросНаличияПустыхДляИсточникаВРегистреСоответствия.Выполнить();
		
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат;
				
	КонецЕсли;
	
	НаборЗаписей = мМенеджерРегистраСоответствийОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
	НаборЗаписей.Отбор.СсылкаВДругойИБ.Установить("");
	НаборЗаписей.Отбор.СобственнаяСсылка.Установить(СсылкаНаОбъект);
	
	Если ЗаписатьВРежимеОбмена Тогда
		ЗаписатьОбъектВИБ(НаборЗаписей, "РегистрСведенийНаборЗаписей.СоответствиеОбъектовДляОбмена");
	Иначе	
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьСоответствиеОбъектовДляОбмена(СсылкаНаОбъект, СвойстваПоиска)
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// нужно дописать информацию в регистр соответствия объектов для обмена
	КлючВИсточнике = СвойстваПоиска["{КлючПоискаВИБИсточнике}"];
	ИмяТипаВИсточнике = СвойстваПоиска["{ИмяТипаВИБИсточнике}"];
	
	Если КлючВИсточнике = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// перед записью проверим, может уже есть такая запись, тогда ничего делать не нужно
	мЗапросНаличияСтрокВРегистреСоответствия.УстановитьПараметр("СвояСсылка", СсылкаНаОбъект);
	мЗапросНаличияСтрокВРегистреСоответствия.УстановитьПараметр("СсылкаВДругойИБ", КлючВИсточнике);
	мЗапросНаличияСтрокВРегистреСоответствия.УстановитьПараметр("ИмяТипаПриемника", ИмяТипаВИсточнике);
	
	РезультатЗапроса = мЗапросНаличияСтрокВРегистреСоответствия.Выполнить();
		
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Возврат;
				
	КонецЕсли;
	
	// возможно есть запись с неуказанной ссылкой в другой ИБ. ЕЕ нужно удалить
	УдалитьПриНеобходимостиЗаписьСНеуказаннойСсылкойВДругойИБВРегистреСоответствий(СсылкаНаОбъект, Ложь);
		
	НаборЗаписей = мМенеджерРегистраСоответствийОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
	НаборЗаписей.Отбор.СсылкаВДругойИБ.Установить(КлючВИсточнике);
	НаборЗаписей.Отбор.СобственнаяСсылка.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписей.Добавить();
	СтрокаНабора.УзелОбмена = УзелОбменаЗагрузкаДанных;
	СтрокаНабора.СсылкаВДругойИБ = КлючВИсточнике;
	СтрокаНабора.СобственнаяСсылка = СсылкаНаОбъект;
	СтрокаНабора.ИмяТипаПриемника = ИмяТипаВИсточнике;
	
	НаборЗаписей.Записать();	
	
КонецПроцедуры

// Создает новый объект указанного типа, устанавливает реквизиты, указанные
// в структуре СвойстваПоиска.
//
// Параметры:
//  Тип            - тип создаваемого объекта
//  СвойстваПоиска - Структура, содержащая устанавливаемые реквизиты нового объекта
//
// Возвращаемое значение:
//  Новый объект информационной базы
// 
Функция СоздатьНовыйОбъект(Тип, СвойстваПоиска, Объект = Неопределено, 
	ЗаписыватьОбъектСразуПослеСоздания = Истина, НоваяСсылка = Неопределено, 
	Нпп = 0, ГНпп = 0, Правило = Неопределено, 
	ПараметрыОбъекта = Неопределено, УстанавливатьУОбъектаВсеСвойстваПоиска = Истина)

	СвойстваМД      = Менеджеры[Тип];
	ИмяТипа         = СвойстваМД.ИмяТипа;
	Менеджер        = СвойстваМД.Менеджер;
	ПометкаУдаления = Неопределено;

	Если ИмяТипа = "Справочник"
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" Тогда
		
		ЭтоГруппа = СвойстваПоиска["ЭтоГруппа"];
		
		Если ЭтоГруппа = Истина Тогда
			
			Объект = Менеджер.СоздатьГруппу();
						
		Иначе
			
			Объект = Менеджер.СоздатьЭлемент();
			
		КонецЕсли;		
				
	ИначеЕсли ИмяТипа = "Документ" Тогда
		
		Объект = Менеджер.СоздатьДокумент();
				
	ИначеЕсли ИмяТипа = "ПланСчетов" Тогда
		
		Объект = Менеджер.СоздатьСчет();
				
	ИначеЕсли ИмяТипа = "ПланВидовРасчета" Тогда
		
		Объект = Менеджер.СоздатьВидРасчета();
				
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		
		Объект = Менеджер.СоздатьМенеджерЗаписи();
		Возврат Объект;
		
	ИначеЕсли ИмяТипа = "ПланОбмена" Тогда
		
		Объект = Менеджер.СоздатьУзел();
				
	ИначеЕсли ИмяТипа = "Задача" Тогда
		
		Объект = Менеджер.СоздатьЗадачу();
		
	ИначеЕсли ИмяТипа = "БизнесПроцесс" Тогда
		
		Объект = Менеджер.СоздатьБизнесПроцесс();	
		
	ИначеЕсли ИмяТипа = "Перечисление" Тогда
		
		Объект = СвойстваМД.ПустаяСсылка;	
		Возврат Объект;
		
	ИначеЕсли ИмяТипа = "ТочкаМаршрутаБизнесПроцесса" Тогда
		
		Возврат Неопределено;
				
	КонецЕсли;
	
	НоваяСсылка = УстановитьСсылкуНового(Объект, Менеджер, СвойстваПоиска);
	
	Если УстанавливатьУОбъектаВсеСвойстваПоиска Тогда
		УстановитьРеквизитыПоискаУОбъекта(Объект, СвойстваПоиска, , Ложь, Ложь);
	КонецЕсли;
	
	// Проверки
	Если ИмяТипа = "Документ"
		ИЛИ ИмяТипа = "Задача"
		ИЛИ ИмяТипа = "БизнесПроцесс" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			
			УстановитьТекущуюДатуРеквизиту(Объект.Дата);			
						
		КонецЕсли;
		
	КонецЕсли;
		
	//	!!! Если Владелец не установлен, то нужно поле добавить
	// в возможные поля поиска, а в событии ПОЛЯПОИСКА указать поля без Владельца, если по нему поиск реально не нужен
	
	Если ЗаписыватьОбъектСразуПослеСоздания Тогда
		
		// не загружаем объекты выгруженные по ссылке с пометкой удаления
		//Объект.ПометкаУдаления = Истина;
		
		Если ГНпп <> 0
			ИЛИ Не ОптимизированнаяЗаписьОбъектов Тогда
		
			ЗаписатьОбъектВИБ(Объект, Тип);
			
		Иначе
			
			// записывать объект сразу не будем, а только запомним что нужно записать
			// сохраним эту информацию в специальном стеке объектов для записи
			// вернем и новую ссылку и сам объект, хотя он еще не записан
			Если НоваяСсылка = Неопределено Тогда
				
				// самостоятельно генерируем новую ссылку
				НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор;
				НоваяСсылка = Менеджер.ПолучитьСсылку(НовыйУникальныйИдентификатор);
				Объект.УстановитьСсылкуНового(НоваяСсылка);
				
			КонецЕсли;			
			
			Если Правило <> Неопределено Тогда
				АвтоматическиГенерироватьКод = Правило.ГенерироватьНовыйНомерИлиКодЕслиНеУказан;
			Иначе
				АвтоматическиГенерироватьКод = Ложь;
			КонецЕсли;
			
			ДополнитьСтекНеЗаписанныхОбъектов(Нпп, ГНпп, Объект, НоваяСсылка, Тип, ИмяТипа, АвтоматическиГенерироватьКод, ПараметрыОбъекта);
			
			Возврат НоваяСсылка;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Объект.Ссылка;
	
КонецФункции

// Читает из файла узел свойства объекта, устанавливает значение свойства
//
// Параметры:
//  Тип            - тип значения свойства
//  ОбъектНайден   - если после выполнения функции - Ложь, то значит
//                   объект свойства не найден в информационной базе и создан новый
//
// Возвращаемое значение:
//  Значение свойства
// 
Функция ПрочитатьСвойство(Тип, НеСоздаватьОбъектЕслиНеНайден = Ложь, СвойствоНеНайденоПоСсылке = Ложь)

	Значение = Неопределено;
	НаличиеСвойств = Ложь;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Значение" Тогда
			
			ИскатьПоСвойству = одАтрибут(ФайлОбмена, одТипСтрока, "Свойство");
			Значение         = одЗначениеЭлемента(ФайлОбмена, Тип, ИскатьПоСвойству, Ложь);
			НаличиеСвойств = Истина;
			
		ИначеЕсли ИмяУзла = "Ссылка" Тогда
			
			ОбъектНайден = Истина;
			Значение       = НайтиОбъектПоСсылке(Тип, , , ОбъектНайден, , НеСоздаватьОбъектЕслиНеНайден);
			
			Если НеСоздаватьОбъектЕслиНеНайден
				И НЕ ОбъектНайден Тогда
				
				СвойствоНеНайденоПоСсылке = Ложь;
				
			КонецЕсли;
			
			НаличиеСвойств = Истина;
			
		ИначеЕсли ИмяУзла = "Нпп" Тогда
			
			ФайлОбмена.Прочитать();
			Нпп = Число(ФайлОбмена.Значение);
			Если Нпп <> 0 Тогда
				Значение  = НайтиОбъектПоНомеру(Нпп, Тип);
				НаличиеСвойств = Истина;
			КонецЕсли;			
			ФайлОбмена.Прочитать();
			
		ИначеЕсли ИмяУзла = "ГНпп" Тогда
			
			ФайлОбмена.Прочитать();
			ГНпп = Число(ФайлОбмена.Значение);
			Если ГНпп <> 0 Тогда
				Значение  = НайтиОбъектПоГлобальномуНомеру(ГНпп);
				НаличиеСвойств = Истина;
			КонецЕсли;
			
			ФайлОбмена.Прочитать();
			
		ИначеЕсли (ИмяУзла = "Свойство" ИЛИ ИмяУзла = "ЗначениеПараметра") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Если Не НаличиеСвойств
				И ЗначениеЗаполнено(Тип) Тогда
				
				// если вообще ничего нет - значит пустое значение
				Значение = одПолучитьПустоеЗначение(Тип);
				
			КонецЕсли;
			
			Прервать;
			
		ИначеЕсли ИмяУзла = "Выражение" Тогда
			
			Значение = Вычислить(одЗначениеЭлемента(ФайлОбмена, одТипСтрока, , Ложь));
			НаличиеСвойств = Истина;
			
		ИначеЕсли ИмяУзла = "Пусто" Тогда
			
			Значение = одПолучитьПустоеЗначение(Тип);
			НаличиеСвойств = Истина;		
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции // ПрочитатьСвойство() 

Функция УстановитьРеквизитыПоискаУОбъекта(НайденныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать, 
	НужноСравниватьСТекущимиРеквизитами = Истина, НЕЗаменятьСвойстваНеПодлежащиеИзменению = Истина)
	
	ИзмененыРеквизитыОбъекта = Ложь;
				
	Для каждого Свойство Из СвойстваПоиска Цикл
					
		Имя      = Свойство.Ключ;
		Значение = Свойство.Значение;
		
		Если НЕЗаменятьСвойстваНеПодлежащиеИзменению
			И СвойстваПоискаНеЗамещать[Имя] <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
					
		Если Имя = "ЭтоГруппа" 
			ИЛИ Имя = "{УникальныйИдентификатор}" 
			ИЛИ Имя = "{ИмяПредопределенногоЭлемента}"
			ИЛИ Имя = "{КлючПоискаВИБИсточнике}"
			ИЛИ Имя = "{КлючПоискаВИБПриемнике}"
			ИЛИ Имя = "{ИмяТипаВИБИсточнике}"
			ИЛИ Имя = "{ИмяТипаВИБПриемнике}" Тогда
						
			Продолжить;
						
		ИначеЕсли Имя = "ПометкаУдаления" Тогда
						
			Если НЕ НужноСравниватьСТекущимиРеквизитами
				ИЛИ НайденныйОбъект.ПометкаУдаления <> Значение Тогда
							
				НайденныйОбъект.ПометкаУдаления = Значение;
				ИзмененыРеквизитыОбъекта = Истина;
							
			КонецЕсли;
						
		Иначе
				
			// отличные реквизиты устанавливаем
			
			Если НайденныйОбъект[Имя] <> NULL Тогда
			
				Если НЕ НужноСравниватьСТекущимиРеквизитами
					ИЛИ НайденныйОбъект[Имя] <> Значение Тогда
						
					НайденныйОбъект[Имя] = Значение;
					ИзмененыРеквизитыОбъекта = Истина;
						
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
					
	КонецЦикла;
	
	Возврат ИзмененыРеквизитыОбъекта;
	
КонецФункции

Функция НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать,
	ИмяТипаОбъекта, СвойствоПоиска, ЗначениеСвойстваПоиска, ОбъектНайден, 
	СоздаватьНовыйЭлементЕслиНеНайден = Истина, НайденныйИлиСозданныйОбъект = Неопределено, 
	РежимПоискаОсновногоОбъекта = Ложь, СвойстваОбъектаМодифицированы = Ложь, 
	НоваяСсылкаУникальногоИдентификатора = Неопределено, Нпп = 0, ГНпп = 0, ПараметрыОбъекта = Неопределено,
	НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь, ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено)
	
	Объект = одНайтиОбъектПоСвойству(СтруктураСвойств.Менеджер, СвойствоПоиска, ЗначениеСвойстваПоиска, 
		НайденныйИлиСозданныйОбъект, , , РежимПоискаОсновногоОбъекта, СтруктураСвойств.СтрокаПоиска);
	
	ОбъектНайденИлиСоздан = НЕ (Объект = Неопределено
				ИЛИ Объект.Пустая());	
		
	ОбъектНайден = НЕ Объект.Пустая();
				
	
	Если Не ОбъектНайденИлиСоздан 
		И СоздаватьНовыйЭлементЕслиНеНайден Тогда			
		
		Объект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, НайденныйИлиСозданныйОбъект, 
			НЕ РежимПоискаОсновногоОбъекта, НоваяСсылкаУникальногоИдентификатора, Нпп, ГНпп, НайтиПервоеПравилоПоСтруктуреСвойств(СтруктураСвойств),
			ПараметрыОбъекта);
			
		СвойстваОбъектаМодифицированы = Истина;
		Возврат Объект;
		
	КонецЕсли;
			
	
	Если РежимПоискаОсновногоОбъекта Тогда
		
		//
		Попытка
			
			Если Не ЗначениеЗаполнено(Объект) Тогда
				Возврат Объект;
			КонецЕсли;
			
			Если НайденныйИлиСозданныйОбъект = Неопределено Тогда
				НайденныйИлиСозданныйОбъект = Объект.ПолучитьОбъект();
			КонецЕсли;
			
		Исключение
			Возврат Объект;
		КонецПопытки;
			
		СвойстваОбъектаМодифицированы = УстановитьРеквизитыПоискаУОбъекта(НайденныйИлиСозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
				
		// если было то что изменено, тогда перезаписываем объект
		Если СвойстваОбъектаМодифицированы
			И НЕ РежимПоискаОсновногоОбъекта Тогда
			
			Если ОбъектНайден Тогда
				
				ЗаписатьОбъектВИБ(НайденныйИлиСозданныйОбъект, ТипОбъекта);
			
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат Объект;
	
КонецФункции

Функция ПолучитьТипСвойства()
	
	СтроковыйТипСвойства = одАтрибут(ФайлОбмена, одТипСтрока, "Тип");
	Если ПустаяСтрока(СтроковыйТипСвойства) Тогда
		
		// нужно определять свойство по соответствию
		Возврат Неопределено;
		
	КонецЕсли;
	
	Возврат Тип(СтроковыйТипСвойства);
	
КонецФункции

Функция ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, ИмяСвойства)
	
	ТипСвойства = ПолучитьТипСвойства();
				
	Если ТипСвойства = Неопределено
		И ИнформацияОТипах <> Неопределено Тогда
		
		ТипСвойства = ИнформацияОТипах[ИмяСвойства];
		
	КонецЕсли;
	
	Возврат ТипСвойства;
	
КонецФункции

Процедура ПрочитатьСвойстваПоискаИзФайла(СвойстваПоиска, СвойстваПоискаНеЗамещать, ИнформацияОТипах, 
	ПоискПоДатеНаРавенство = Ложь, ПараметрыОбъекта = Неопределено)
	
	ПоискПоДатеНаРавенство = Ложь;
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЭтоПараметр = (ИмяУзла = "ЗначениеПараметра");
			
			Имя = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			
			Если Имя = "{УникальныйИдентификатор}" 
				ИЛИ Имя = "{ИмяПредопределенногоЭлемента}"
				ИЛИ Имя = "{КлючПоискаВИБИсточнике}"
				ИЛИ Имя = "{КлючПоискаВИБПриемнике}"
				ИЛИ Имя = "{ИмяТипаВИБИсточнике}"
				ИЛИ Имя = "{ИмяТипаВИБПриемнике}" Тогда
				
				ТипСвойства = одТипСтрока;
								
			Иначе
				
				ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
											
			КонецЕсли;
			
			НеЗамещатьСвойство 	= одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать"); 
			ПоискПоДатеНаРавенство = ПоискПоДатеНаРавенство 
				ИЛИ одАтрибут(ФайлОбмена, одТипБулево, "ПоискПоДатеНаРавенство");
			
			ЗначениеСвойства    = ПрочитатьСвойство(ТипСвойства);
			
			Если (Имя = "ЭтоГруппа") И (ЗначениеСвойства <> Истина) Тогда
				
				ЗначениеСвойства = Ложь;
												
			КонецЕсли; 
			
			Если ЭтоПараметр Тогда
				
				
				ДобавитьПараметрПриНеобходимости(ПараметрыОбъекта, Имя, ЗначениеСвойства);
				
			Иначе
			
				СвойстваПоиска[Имя] = ЗначениеСвойства;
				
				Если НеЗамещатьСвойство Тогда
					
					СвойстваПоискаНеЗамещать[Имя] = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "Ссылка") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ОпределитьУПоляНеограниченнаяДлина(МенеджерТипа, ИмяПараметра)
	
	ДлинныеСтроки = Неопределено;
	Если НЕ МенеджерТипа.Свойство("ДлинныеСтроки", ДлинныеСтроки) Тогда
		
		ДлинныеСтроки = Новый Соответствие;
		Для Каждого Реквизит Из МенеджерТипа.ОбъектМД.Реквизиты Цикл
			
			Если Реквизит.Тип.СодержитТип(одТипСтрока) 
				И (Реквизит.Тип.КвалификаторыСтроки.Длина = 0) Тогда
				
				ДлинныеСтроки.Вставить(Реквизит.Имя, Реквизит.Имя);	
				
			КонецЕсли;
			
		КонецЦикла;
		
		МенеджерТипа.Вставить("ДлинныеСтроки", ДлинныеСтроки);
		
	КонецЕсли;
	
	Возврат (ДлинныеСтроки[ИмяПараметра] <> Неопределено);
		
КонецФункции

Функция ОпределитьЭтотПараметрНеограниченнойДлинны(МенеджерТипа, ЗначениеПараметра, ИмяПараметра)
	
	Попытка
			
		Если ТипЗнч(ЗначениеПараметра) = одТипСтрока Тогда
			СтрокаНеограниченнойДлины = ОпределитьУПоляНеограниченнаяДлина(МенеджерТипа, ИмяПараметра);
		Иначе
			СтрокаНеограниченнойДлины = Ложь;
		КонецЕсли;		
												
	Исключение
				
		СтрокаНеограниченнойДлины = Ложь;
				
	КонецПопытки;
	
	Возврат СтрокаНеограниченнойДлины;	
	
КонецФункции

Функция НайтиЭлементЗапросом(СтруктураСвойств, СвойстваПоиска, ТипОбъекта = Неопределено, 
	МенеджерТипа = Неопределено, КоличествоРеальныхСвойствДляПоиска = Неопределено)
	
	КоличествоСвойствДляПоиска = ?(КоличествоРеальныхСвойствДляПоиска = Неопределено, СвойстваПоиска.Количество(), КоличествоРеальныхСвойствДляПоиска);
	
	Если КоличествоСвойствДляПоиска = 0
		И СтруктураСвойств.ИмяТипа = "Перечисление" Тогда
		
		Возврат СтруктураСвойств.ПустаяСсылка;
		
	КонецЕсли;
	
	ТекстЗапроса       = СтруктураСвойств.СтрокаПоиска;
	
	Если ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат СтруктураСвойств.ПустаяСсылка;
	КонецЕсли;
	
	ЗапросПоиска       = Новый Запрос();
		
	КоличествоСвойстПоКоторымУстановленПоиск = 0;
			
	Для каждого Свойство Из СвойстваПоиска Цикл
				
		ИмяПараметра      = Свойство.Ключ;
		
		// не по всем параметрам можно искать
		Если ИмяПараметра = "{УникальныйИдентификатор}"
			ИЛИ ИмяПараметра = "{ИмяПредопределенногоЭлемента}"
			ИЛИ ИмяПараметра = "{КлючПоискаВИБИсточнике}"
			ИЛИ ИмяПараметра = "{КлючПоискаВИБПриемнике}"
			ИЛИ ИмяПараметра = "{ИмяТипаВИБИсточнике}"
			ИЛИ ИмяПараметра = "{ИмяТипаВИБПриемнике}" Тогда
						
			Продолжить;
						
		КонецЕсли;
		
		ЗначениеПараметра = Свойство.Значение;
		ЗапросПоиска.УстановитьПараметр(ИмяПараметра, ЗначениеПараметра);
		
		Попытка
			
			//МенеджерТипа = ?(МенеджерТипа = Неопределено, Менеджеры[ТипОбъекта], МенеджерТипа);
			
			СтрокаНеограниченнойДлины = ОпределитьЭтотПараметрНеограниченнойДлинны(СтруктураСвойств, ЗначениеПараметра, ИмяПараметра);		
													
		Исключение
					
			СтрокаНеограниченнойДлины = Ложь;
					
		КонецПопытки;
		
		КоличествоСвойстПоКоторымУстановленПоиск = КоличествоСвойстПоКоторымУстановленПоиск + 1;
				
		Если СтрокаНеограниченнойДлины Тогда
					
			ТекстЗапроса = ТекстЗапроса + ?(КоличествоСвойстПоКоторымУстановленПоиск > 1, " И ", "") + ИмяПараметра + " ПОДОБНО &" + ИмяПараметра;
					
		Иначе
					
			ТекстЗапроса = ТекстЗапроса + ?(КоличествоСвойстПоКоторымУстановленПоиск > 1, " И ", "") + ИмяПараметра + " = &" + ИмяПараметра;
					
		КонецЕсли;
								
	КонецЦикла;
	
	Если КоличествоСвойстПоКоторымУстановленПоиск = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗапросПоиска.Текст = ТекстЗапроса;
	Результат = ЗапросПоиска.Выполнить();
			
	Если Результат.Пустой() Тогда
		
		Возврат Неопределено;
								
	Иначе
		
		// возвращаем первый найденный объект
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СсылкаНаОбъект = Выборка.Ссылка;
				
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция ОпределитьПоТипуОбъектаИспользоватьДополнительныйПоискПоПолямПоиска(ТипСсылкиСтрокой)
	
	ЗначениеСоответствия = мСоответствиеДопПараметровПоиска.Получить(ТипСсылкиСтрокой);
	
	Если ЗначениеСоответствия <> Неопределено Тогда
		Возврат ЗначениеСоответствия;
	КонецЕсли;
	
	Попытка
	
		Для Каждого Элемент Из Правила Цикл
			
			Если Элемент.Значение.Приемник = ТипСсылкиСтрокой Тогда
				
				Если Элемент.Значение.СинхронизироватьПоИдентификатору = Истина Тогда
					
					НужноПродолжитьПоиск = (Элемент.Значение.ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли = Истина);
					мСоответствиеДопПараметровПоиска.Вставить(ТипСсылкиСтрокой, НужноПродолжитьПоиск);
					
					Возврат НужноПродолжитьПоиск;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		мСоответствиеДопПараметровПоиска.Вставить(ТипСсылкиСтрокой, Ложь);
		Возврат Ложь;
	
	Исключение
		
		мСоответствиеДопПараметровПоиска.Вставить(ТипСсылкиСтрокой, Ложь);
		Возврат Ложь;
	
    КонецПопытки;
	
КонецФункции

Функция ОпределитьПоТипуОбъектаАлгоритмПоследовательностиПолейПоиска(ТипСсылкиСтрокой, НастройкаПоиска)
	
	ЗначениеСоответствия = мСоответствиеАлгоритмовПоискаЭлементов.Получить(ТипСсылкиСтрокой);
	
	Если ЗначениеСоответствия <> Неопределено Тогда
		
		НастройкаПоиска = ЗначениеСоответствия.НастройкаПоиска;
		Возврат ЗначениеСоответствия.АлгоритмПоиска;
		
	КонецЕсли;
	
	Попытка
	
		Для Каждого Элемент Из Правила Цикл
			
			Если Элемент.Значение.Приемник = ТипСсылкиСтрокой Тогда
				
				Если Элемент.Значение.ЕстьОбработчикПоследовательностьПолейПоиска = Истина Тогда
					
					АлгоритмПоиска = Элемент.Значение.ПоследовательностьПолейПоиска;
					НастройкаПоиска = мИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных[Элемент.Значение.Имя];
					Если НастройкаПоиска = Неопределено Тогда 
						НастройкаПоиска = "";
					КонецЕсли;
					
					мСоответствиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, Новый Структура("АлгоритмПоиска,НастройкаПоиска", АлгоритмПоиска, НастройкаПоиска));
					
					Возврат АлгоритмПоиска;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		мСоответствиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, Новый Структура("АлгоритмПоиска,НастройкаПоиска", "", ""));
		Возврат "";
	
	Исключение
		
		мСоответствиеАлгоритмовПоискаЭлементов.Вставить(ТипСсылкиСтрокой, Новый Структура("АлгоритмПоиска,НастройкаПоиска", "", ""));
		Возврат "";
	
    КонецПопытки;
	
КонецФункции

// Определяет по типу объекта приемника правило конвертации объекта (ПКО)
//
// Параметры:
//  ТипСсылкиСтрокой - Строка - тип объекта в строковом представлении, например, "СправочникСсылка.Номенклатура".
// 
// Возвращаемое значение:
//  ЗначениеСоответствия = Правило конвертации объекта
// 
Функция ОпределитьПоТипуОбъектаПриемникаПравилоКонвертации(ТипСсылкиСтрокой)
	
	ЗначениеСоответствия = мСоответствиеПравилКонвертации.Получить(ТипСсылкиСтрокой);
	
	Если ЗначениеСоответствия <> Неопределено Тогда
		Возврат ЗначениеСоответствия;
	КонецЕсли;
	
	Попытка
	
		Для Каждого Элемент Из Правила Цикл
			
			Если Элемент.Значение.Приемник = ТипСсылкиСтрокой Тогда
				
				Если Элемент.Значение.ЕстьОбработчикПоследовательностьПолейПоиска = Истина Тогда
					
					Правило = Элемент.Значение;
					
					мСоответствиеПравилКонвертации.Вставить(ТипСсылкиСтрокой, Правило);
					
					Возврат Правило;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		мСоответствиеПравилКонвертации.Вставить(ТипСсылкиСтрокой, Неопределено);
		Возврат Неопределено;
	
	Исключение
		
		мСоответствиеПравилКонвертации.Вставить(ТипСсылкиСтрокой, Неопределено);
		Возврат Неопределено;
	
	КонецПопытки;
	
КонецФункции

Функция НайтиСсылкуНаОбъектПоОдномуСвойству(СвойстваПоиска, СтруктураСвойств)
	
	Для каждого Свойство Из СвойстваПоиска Цикл
					
		ИмяПараметра      = Свойство.Ключ;
					
		// не по всем параметрам можно искать
		Если ИмяПараметра = "{УникальныйИдентификатор}"
			ИЛИ ИмяПараметра = "{ИмяПредопределенногоЭлемента}"
			ИЛИ ИмяПараметра = "{КлючПоискаВИБИсточнике}"
			ИЛИ ИмяПараметра = "{КлючПоискаВИБПриемнике}"
			ИЛИ ИмяПараметра = "{ИмяТипаВИБИсточнике}"
			ИЛИ ИмяПараметра = "{ИмяТипаВИБПриемнике}" Тогда
						
			Продолжить;
						
		КонецЕсли;
					
		ЗначениеПараметра = Свойство.Значение;
		СсылкаНаОбъект    = одНайтиОбъектПоСвойству(СтруктураСвойств.Менеджер, ИмяПараметра, ЗначениеПараметра, , СтруктураСвойств, СвойстваПоиска);
					
	КонецЦикла;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаДокумент(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом, ПоискПоДатеНаРавенство)
	
	// попробуем документ по дате и номеру найти
	ИскатьЗапросом = ПоискПоДатеНаРавенство ИЛИ (КоличествоРеальныхСвойствДляПоиска <> 2);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НомерДокумента = СвойстваПоиска["Номер"];
	ДатаДокумента  = СвойстваПоиска["Дата"];
					
	Если (НомерДокумента <> Неопределено) И (ДатаДокумента <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(НомерДокумента, ДатаДокумента);
																		
	Иначе
						
		// по дате и номеру найти не удалось - надо искать запросом
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаСправочник(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Владелец     = СвойстваПоиска["Владелец"];
	Родитель     = СвойстваПоиска["Родитель"];
	Код          = СвойстваПоиска["Код"];
	Наименование = СвойстваПоиска["Наименование"];
				
	Кол          = 0;
				
	Если Владелец <> Неопределено Тогда	Кол = 1 + Кол; КонецЕсли;
	Если Родитель <> Неопределено Тогда	Кол = 1 + Кол; КонецЕсли;
	Если Код <> Неопределено Тогда Кол = 1 + Кол; КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол; КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоКоду(Код, , Родитель, Владелец);
																		
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА, Родитель, Владелец);
											
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаПВХ(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Родитель     = СвойстваПоиска["Родитель"];
	Код          = СвойстваПоиска["Код"];
	Наименование = СвойстваПоиска["Наименование"];
	Кол          = 0;
				
	Если Родитель     <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
	Если Код          <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если     (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоКоду(Код, Родитель);
												
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА, Родитель);
																	
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
			
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаПланОбмена(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Код          = СвойстваПоиска["Код"];
	Наименование = СвойстваПоиска["Наименование"];
	Кол          = 0;
				
	Если Код          <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если     (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоКоду(Код);
												
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА);
																	
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаЗадачу(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Код          = СвойстваПоиска["Номер"];
	Наименование = СвойстваПоиска["Наименование"];
	Кол          = 0;
				
	Если Код          <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
	Если Наименование <> Неопределено Тогда	Кол = 1 + Кол КонецЕсли;
				
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
	
					
	Если     (Код <> Неопределено) И (Наименование = Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(Код);
												
	ИначеЕсли (Код = Неопределено) И (Наименование <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНаименованию(Наименование, ИСТИНА);
																	
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Функция НайтиСсылкуНаБизнесПроцесс(СвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом)
	
	Код          = СвойстваПоиска["Номер"];
	Кол          = 0;
				
	Если Код <> Неопределено Тогда Кол = 1 + Кол КонецЕсли;
								
	ИскатьЗапросом = (Кол <> КоличествоРеальныхСвойствДляПоиска);
				
	Если ИскатьЗапросом Тогда
		Возврат Неопределено;
	КонецЕсли;
					
	Если  (Код <> Неопределено) Тогда
						
		СсылкаНаОбъект = СтруктураСвойств.Менеджер.НайтиПоНомеру(Код);
												
	Иначе
						
		ИскатьЗапросом = Истина;
		СсылкаНаОбъект = Неопределено;
						
	КонецЕсли;
															
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ДобавитьСсылкуВСписокЗагруженныхОбъектов(ГНппСсылки, НппСсылки, СсылкаНаОбъект, ТипОбъекта, СсылкаФиктивная = Ложь)
	
	// запоминаем ссылку на объект
	Если НЕ ЗапоминатьЗагруженныеОбъекты 
		ИЛИ СсылкаНаОбъект = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ГНппСсылки <> 0 Тогда
		
		СтруктураЗаписи = Новый Структура("СсылкаНаОбъект, СсылкаФиктивная", СсылкаНаОбъект, СсылкаФиктивная);
		
		ЗагруженныеГлобальныеОбъекты[ГНппСсылки] = СтруктураЗаписи;
		
	ИначеЕсли НппСсылки <> 0 Тогда

		ТаблицаДляПоиска = ЗагруженныеОбъекты[ТипОбъекта];
		Если ТаблицаДляПоиска = Неопределено Тогда
			
			ТаблицаДляПоиска = СоздатьТаблицуЗагруженныхОбъектов();
			ЗагруженныеОбъекты[ТипОбъекта] = ТаблицаДляПоиска;
			
		КонецЕсли;
				
		СтрокаЗагруженныхОбъектов = ТаблицаДляПоиска.Найти(НппСсылки, "НппСсылки");
		
		Если СтрокаЗагруженныхОбъектов <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаЗагруженныхОбъектов = ТаблицаДляПоиска.Добавить();
		
		СтрокаЗагруженныхОбъектов.НппСсылки = НппСсылки;
		СтрокаЗагруженныхОбъектов.СсылкаФиктивная = СсылкаФиктивная;
		СтрокаЗагруженныхОбъектов.УзелСсылки = СсылкаНаОбъект;
		СтрокаЗагруженныхОбъектов.НомерПоследнегоОбращения = мНомерПоследнегоПоискаПоСсылке;
						
	КонецЕсли;
		
КонецПроцедуры

Функция НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, 
	СтруктураСвойств, СтрокаИменСвойствПоиска, ПоискПоДатеНаРавенство)
	
	// не нужно искать по имени предопределенного элемента и по уникальной ссылке на объект
	// нужно искать только по тем свойствам, которые имеются в строке имен свойств. Если там пусто, то по
	// всем имеющимся свойствам поиска
		
	ИскатьЗапросом = Ложь;	
	
	Если ПустаяСтрока(СтрокаИменСвойствПоиска) Тогда
		
		ВременныеСвойстваПоиска = СвойстваПоиска;
		
	Иначе
		
		ГотоваяСтрокаДляРазбора = СтрЗаменить(СтрокаИменСвойствПоиска, " ", "");
		ДлинаСтроки = СтрДлина(ГотоваяСтрокаДляРазбора);
		Если Сред(ГотоваяСтрокаДляРазбора, ДлинаСтроки, 1) <> "," Тогда
			
			ГотоваяСтрокаДляРазбора = ГотоваяСтрокаДляРазбора + ",";
			
		КонецЕсли;
		
		ВременныеСвойстваПоиска = Новый Соответствие;
		Для Каждого ЭлементСвойств Из СвойстваПоиска Цикл
			
			ИмяПараметра = ЭлементСвойств.Ключ;
			Если Найти(ГотоваяСтрокаДляРазбора, ИмяПараметра + ",") > 0 Тогда
				
				ВременныеСвойстваПоиска.Вставить(ИмяПараметра, ЭлементСвойств.Значение); 	
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СвойствоУникальныйИдентификатор = ВременныеСвойстваПоиска["{УникальныйИдентификатор}"];
	СвойствоИмяПредопределенного = ВременныеСвойстваПоиска["{ИмяПредопределенногоЭлемента}"];
	СвойствоКлючПоискаВИБИсточнике = ВременныеСвойстваПоиска["{КлючПоискаВИБИсточнике}"];
	СвойствоКлючПоискаВИБПриемнике = ВременныеСвойстваПоиска["{КлючПоискаВИБПриемнике}"];
	СвойствоИмяТипаВИБИсточнике = ВременныеСвойстваПоиска["{ИмяТипаВИБИсточнике}"];
	СвойствоИмяТипаВИБПриемнике = ВременныеСвойстваПоиска["{ИмяТипаВИБПриемнике}"];
					
	КоличествоРеальныхСвойствДляПоиска = ВременныеСвойстваПоиска.Количество();
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоУникальныйИдентификатор <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоИмяПредопределенного <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоКлючПоискаВИБИсточнике <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоКлючПоискаВИБПриемнике <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоИмяТипаВИБИсточнике <> Неопределено, 1, 0);
	КоличествоРеальныхСвойствДляПоиска = КоличествоРеальныхСвойствДляПоиска - ?(СвойствоИмяТипаВИБПриемнике <> Неопределено, 1, 0);
	
	
	Если КоличествоРеальныхСвойствДляПоиска = 1 Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаОбъектПоОдномуСвойству(ВременныеСвойстваПоиска, СтруктураСвойств);
																						
	ИначеЕсли ИмяТипаОбъекта = "Документ" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаДокумент(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом, ПоискПоДатеНаРавенство);
											
	ИначеЕсли ИмяТипаОбъекта = "Справочник" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаСправочник(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
								
	ИначеЕсли ИмяТипаОбъекта = "ПланВидовХарактеристик" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаПВХ(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
							
	ИначеЕсли ИмяТипаОбъекта = "ПланОбмена" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаПланОбмена(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
							
	ИначеЕсли ИмяТипаОбъекта = "Задача" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаЗадачу(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
												
	ИначеЕсли ИмяТипаОбъекта = "БизнесПроцесс" Тогда
				
		СсылкаНаОбъект = НайтиСсылкуНаБизнесПроцесс(ВременныеСвойстваПоиска, СтруктураСвойств, КоличествоРеальныхСвойствДляПоиска, ИскатьЗапросом);
									
	Иначе
				
		ИскатьЗапросом = Истина;
				
	КонецЕсли;
		
	Если ИскатьЗапросом Тогда
			
		СсылкаНаОбъект = НайтиЭлементЗапросом(СтруктураСвойств, ВременныеСвойстваПоиска, ТипОбъекта, , КоличествоРеальныхСвойствДляПоиска);
				
	КонецЕсли;
	
	Возврат СсылкаНаОбъект;
	
КонецФункции

Процедура ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, ТипОбъекта, СвойстваПоиска, 
	СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект, ЗаписыватьНовыйОбъектВИнформационнуюБазу = Истина, ИзмененыРеквизитыОбъекта = Ложь,
	НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь, ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено)
	
	Если УстанавливатьУОбъектаВсеСвойстваПоиска <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			Возврат;
		КонецЕсли;
		
		Если СозданныйОбъект = Неопределено Тогда
			СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
		КонецЕсли;
		
	Исключение
		Возврат;
	КонецПопытки;
		
	ИзмененыРеквизитыОбъекта = УстановитьРеквизитыПоискаУОбъекта(СозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
			
	// если было то что изменено, тогда перезаписываем объект
	Если ИзмененыРеквизитыОбъекта
		И ЗаписыватьНовыйОбъектВИнформационнуюБазу Тогда
		
		ЗаписатьОбъектВИБ(СозданныйОбъект, ТипОбъекта);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбработатьПоискОбъектаПоСтруктуре(НомерОбъекта, ТипОбъекта, СозданныйОбъект, 
	РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы, ОбъектНайден, ЭтоГлобальныйНомер,
	СвойстваПоиска = Неопределено, СвойстваПоискаНеЗамещать = Неопределено, ПоискПоДатеНаРавенство = Ложь, ЧтениеСвойствСсылкиВыполнено = Ложь,
	ПараметрыОбъекта = Неопределено)
	
	Если НомерОбъекта = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураДанных = мГлобальныйСтекНеЗаписанныхОбъектов[НомерОбъекта];
		
	Если СтруктураДанных <> Неопределено Тогда
				
		СвойстваОбъектаМодифицированы = Истина;
		СозданныйОбъект = СтруктураДанных.Объект;
		
		Если СтруктураДанных.ИзвестнаяСсылка = Неопределено Тогда
			
			УстановитьСсылкуДляОбъекта(СтруктураДанных);
								
		КонецЕсли;
			
		СсылкаНаОбъект = СтруктураДанных.ИзвестнаяСсылка;
		ПараметрыОбъекта = СтруктураДанных.ПараметрыОбъекта;
		
		ОбъектНайден = Ложь;
							
	Иначе
		
		СозданныйОбъект = Неопределено;
		
		Если ЭтоГлобальныйНомер Тогда
			СсылкаНаОбъект = НайтиОбъектПоГлобальномуНомеру(НомерОбъекта);
		Иначе
			СсылкаНаОбъект = НайтиОбъектПоНомеру(НомерОбъекта, ТипОбъекта);
		КонецЕсли;
		
	КонецЕсли;			
	
	
	Если СсылкаНаОбъект <> Неопределено Тогда
		
		Если РежимПоискаОсновногоОбъекта Тогда
			
			СвойстваПоиска = "";
			СвойстваПоискаНеЗамещать = "";
			СтруктураСвойств = Неопределено;
			ИмяТипаОбъекта = Неопределено;
			ЭтоОбъектДокумент = Ложь;
			ЧтениеСвойствСсылкиВыполнено = Истина;
			
			ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ПараметрыОбъекта);
			ОпределитьДополнительныеПараметрыПоискаОбъекта(СвойстваПоиска, ТипОбъекта, СтруктураСвойств, ИмяТипаОбъекта, ЭтоОбъектДокумент);
						
			// для основного поиска нужно поля поиска еще раз проверить, возможно нужно их переустановить...
			Если СозданныйОбъект = Неопределено Тогда
				
				СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
				
			КонецЕсли;
			
			СвойстваОбъектаМодифицированы = УстановитьРеквизитыПоискаУОбъекта(СозданныйОбъект, СвойстваПоиска, СвойстваПоискаНеЗамещать);
			
		Иначе
			
			одПропустить(ФайлОбмена);			
			
		КонецЕсли;		
		
		Возврат СсылкаНаОбъект;
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Процедура ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, 
	ПоискПоДатеНаРавенство = Ложь, ПараметрыОбъекта = Неопределено)
	
	Если СвойстваПоиска = "" Тогда
		СвойстваПоиска = Новый Соответствие;		
	КонецЕсли;
	
	Если СвойстваПоискаНеЗамещать = "" Тогда
		СвойстваПоискаНеЗамещать = Новый Соответствие;		
	КонецЕсли;	
	
	ИнформацияОТипах = мСоответствиеТиповДанныхДляЗагрузки[ТипОбъекта];
	ПрочитатьСвойстваПоискаИзФайла(СвойстваПоиска, СвойстваПоискаНеЗамещать, ИнформацияОТипах, ПоискПоДатеНаРавенство, ПараметрыОбъекта);	
	
КонецПроцедуры

Функция ДобавитьПрефиксОбменаКНомеруОбъекта(НомерОбъекта, ДатаОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(НомерОбъекта) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мДатаДокументовДляУстановкиПрефикса)
		И ЗначениеЗаполнено(ДатаОбъекта)
		И ДатаОбъекта < мДатаДокументовДляУстановкиПрефикса Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	ТекущийНомер = НомерОбъекта;
	НомерОбъекта = ДобавитьКПрефиксу(ТекущийНомер, мПрефиксДокументовПриЗагрузке, , "Слева", Истина, Истина);
	
	УдачнаяЗаменаНомера = СтрДлина(НомерОбъекта) <= СтрДлина(ТекущийНомер);
	
	Если Не УдачнаяЗаменаНомера Тогда
		НомерОбъекта = ТекущийНомер;
	КонецЕсли;
	
	Возврат УдачнаяЗаменаНомера;
	
КонецФункции

Процедура ОпределитьДополнительныеПараметрыПоискаОбъекта(СвойстваПоиска, ТипОбъекта, СтруктураСвойств, ИмяТипаОбъекта, ЭтоОбъектДокумент)
	
	Если ТипОбъекта = Неопределено Тогда
		
		// попробуем определить тип по свойствам поиска
		ИмяТипаПриемника = СвойстваПоиска["{ИмяТипаВИБПриемнике}"];
		Если ИмяТипаПриемника = Неопределено Тогда
			ИмяТипаПриемника = СвойстваПоиска["{ИмяТипаВИБИсточнике}"];
		КонецЕсли;
		
		Если ИмяТипаПриемника <> Неопределено Тогда
			
			ТипОбъекта = Тип(ИмяТипаПриемника);	
			
		КонецЕсли;		
		
	КонецЕсли;
	
	СтруктураСвойств   = Менеджеры[ТипОбъекта];
	ИмяТипаОбъекта     = СтруктураСвойств.ИмяТипа;	
	
	ЭтоОбъектДокумент = ИмяТипаОбъекта = "Документ" 
				ИЛИ ИмяТипаОбъекта = "Задача"
				ИЛИ ИмяТипаОбъекта = "БизнесПроцесс";
				
	Если ЭтоОбъектДокумент Тогда
		
		ПровестиУстановкуПрефиксаУОбъекта(СвойстваПоиска["Номер"], СвойстваПоиска["Дата"], ИмяТипаОбъекта);		
							
	КонецЕсли;
	
КонецПроцедуры

Процедура ПровестиУстановкуПрефиксаУОбъекта(НомерОбъекта, ДатаОбъекта, ИмяТипаОбъекта)
	
	Если мДлинаПрефиксаДокументовПриЗагрузке <= 0 Тогда
		Возврат;
	КонецЕсли;
		
	УдачнаяЗаменаНомера = ДобавитьПрефиксОбменаКНомеруОбъекта(НомерОбъекта, ДатаОбъекта);
	Если Не УдачнаяЗаменаНомера Тогда
		
		ВызватьИсключение "При добавлении префикса """ + мПрефиксДокументовПриЗагрузке + """ к номеру объекта: " + ИмяТипаОбъекта + " № " + НомерОбъекта + 
			"длина номера превысит допустимую длину. Номер не может быть изменен.";	
		
	КонецЕсли;							
		
КонецПроцедуры

Функция НайтиПервоеПравилоПоСтруктуреСвойств(СтруктураСвойств)
	
	Попытка
		
		СтрокаПриемника = СтруктураСвойств.ТипСсылкиСтрокой;
		
		Если ПустаяСтрока(СтрокаПриемника) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Для Каждого СтрокаПравила Из Правила Цикл
			
			Если СтрокаПравила.Значение.Приемник = СтрокаПриемника Тогда
				Возврат СтрокаПравила.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		
    КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

// Производит поиск объекта в информационной базе, если не найден создает новый
//
// Параметры:
//  ТипОбъекта     - тип искомого объекта
//  СвойстваПоиска - структура, содержащая свойства по которым производится поиск объекта
//  ОбъектНайден   - если Ложь, то объект не найден, а создан новый
//
// Возвращаемое значение:
//  Новый или найденный объект информационной базы
//  
Функция НайтиОбъектПоСсылке(ТипОбъекта, 
							СвойстваПоиска = "", 
							СвойстваПоискаНеЗамещать = "", 
							ОбъектНайден = Истина, 
							СозданныйОбъект = Неопределено, 
							НеСоздаватьОбъектЕслиНеНайден = Ложь,
							РежимПоискаОсновногоОбъекта = Ложь,
							СвойстваОбъектаМодифицированы = Ложь,
							НППГлобальнойСсылки = 0,
							НппСсылки = 0,
							ОбъектНайденПоКлючуВПриемнике = Ложь,
							ИзвестнаяСсылкаУникальногоИдентификатора = Неопределено,
							ЭтоПоискОбъектаЗагрузки = Ложь,
							ПараметрыОбъекта = Неопределено,
							НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь,
							ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено)
							
	// создаем свойства поиска объектов
	ПоискПоДатеНаРавенство = Ложь;
	СсылкаНаОбъект = Неопределено;
	СтруктураСвойств = Неопределено;
	ИмяТипаОбъекта = Неопределено;
	ЭтоОбъектДокумент = Ложь;
	ЧтениеСвойствСсылкиВыполнено = Ложь;
	
	Если ЗапоминатьЗагруженныеОбъекты Тогда
		
		// есть номер по порядку из файла - по нему и ищем
		НППГлобальнойСсылки = одАтрибут(ФайлОбмена, одТипЧисло, "ГНпп");
		
		Если НППГлобальнойСсылки <> 0 Тогда
			
			СсылкаНаОбъект = ОбработатьПоискОбъектаПоСтруктуре(НППГлобальнойСсылки, ТипОбъекта, СозданныйОбъект, 
				РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы, ОбъектНайден, Истина, 
				СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ЧтениеСвойствСсылкиВыполнено, ПараметрыОбъекта);
			
			Если СсылкаНаОбъект <> Неопределено Тогда
				Если ЭтоПоискОбъектаЗагрузки
					И НЕ ЧтениеСвойствСсылкиВыполнено Тогда	
					ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ПараметрыОбъекта);	
				КонецЕсли;
				Возврат СсылкаНаОбъект;
			КонецЕсли;				
			
		КонецЕсли;
		
		// есть номер по порядку из файла - по нему и ищем
		НппСсылки = одАтрибут(ФайлОбмена, одТипЧисло, "Нпп");
		
		Если НппСсылки <> 0 Тогда
		
			СсылкаНаОбъект = ОбработатьПоискОбъектаПоСтруктуре(НппСсылки, ТипОбъекта, СозданныйОбъект, 
				РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы, ОбъектНайден, Ложь, 
				СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ЧтениеСвойствСсылкиВыполнено, ПараметрыОбъекта);
				
			Если СсылкаНаОбъект <> Неопределено Тогда
				Если ЭтоПоискОбъектаЗагрузки
					И НЕ ЧтениеСвойствСсылкиВыполнено Тогда	
					ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ПараметрыОбъекта);
				КонецЕсли;
				Возврат СсылкаНаОбъект;
			КонецЕсли;				
			
		КонецЕсли;
		
	КонецЕсли;
	
	ФлагНеСоздаватьОбъектЕслиНеНайден = одАтрибут(ФайлОбмена, одТипБулево, "НеСоздаватьЕслиНеНайден");
	Если НЕ ЗначениеЗаполнено(ФлагНеСоздаватьОбъектЕслиНеНайден) Тогда
		ФлагНеСоздаватьОбъектЕслиНеНайден = Ложь;
	КонецЕсли;
	
	Если НеСоздаватьОбъектЕслиНеНайден = Неопределено Тогда
		НеСоздаватьОбъектЕслиНеНайден = Ложь;
	КонецЕсли;
	
	ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = НЕ РежимПоискаОсновногоОбъекта 
		И одАтрибут(ФайлОбмена, одТипБулево, "ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD");			
		
	НеСоздаватьОбъектЕслиНеНайден = НеСоздаватьОбъектЕслиНеНайден ИЛИ ФлагНеСоздаватьОбъектЕслиНеНайден;
	
	ФлагНеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике");
	Если НЕ ЗначениеЗаполнено(ФлагНеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике) Тогда
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь;
	Иначе
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = ФлагНеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;	
	КонецЕсли;
	
	ПрочитатьИнформациюОСвойствахПоиска(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ПоискПоДатеНаРавенство, ПараметрыОбъекта);
	ОпределитьДополнительныеПараметрыПоискаОбъекта(СвойстваПоиска, ТипОбъекта, СтруктураСвойств, ИмяТипаОбъекта, ЭтоОбъектДокумент);
			
	СвойствоУникальныйИдентификатор = СвойстваПоиска["{УникальныйИдентификатор}"];
	СвойствоИмяПредопределенного = СвойстваПоиска["{ИмяПредопределенногоЭлемента}"];
	СвойствоСсылкаТекущегоЭлемента = СвойстваПоиска["{КлючПоискаВИБПриемнике}"];
	
	ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD = ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD
		И СвойствоУникальныйИдентификатор <> Неопределено;
					
	// если это предопределенный элемент ищем по имени
	Если СвойствоСсылкаТекущегоЭлемента <> Неопределено Тогда
		
		СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, 
			ИмяТипаОбъекта, "{КлючПоискаВИБПриемнике}", СвойствоСсылкаТекущегоЭлемента, ОбъектНайден, 
			Ложь, СозданныйОбъект, РежимПоискаОсновногоОбъекта, 
			СвойстваОбъектаМодифицированы, , НппСсылки, НППГлобальнойСсылки, 
			ПараметрыОбъекта, НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, ОбъектБылСозданВТекущейИнформационнойБазе);		
			
		// объект может быть и не найден вовсе, тогда по остальным критериям
		ОбъектНайденПоКлючуВПриемнике = ОбъектНайден;
		
	КонецЕсли;
	
	Если СсылкаНаОбъект = Неопределено
		ИЛИ СсылкаНаОбъект.Пустая() Тогда
				
		Если СвойствоИмяПредопределенного <> Неопределено Тогда
			
			АвтоматическиСоздаватьНовыйОбъект = НЕ НеСоздаватьОбъектЕслиНеНайден
				И НЕ ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
			
			СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска,СвойстваПоискаНеЗамещать, 
				ИмяТипаОбъекта, "{ИмяПредопределенногоЭлемента}", СвойствоИмяПредопределенного, ОбъектНайден, 
				АвтоматическиСоздаватьНовыйОбъект, СозданныйОбъект, РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы, , 
				НппСсылки, НППГлобальнойСсылки, 
				ПараметрыОбъекта, НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, ОбъектБылСозданВТекущейИнформационнойБазе);
										
		ИначеЕсли СвойствоУникальныйИдентификатор <> Неопределено Тогда
				
			// не всегда нужно по уникальному идентификатору новый элемент создавать, возможно нужно продолжить поиск
										
			НужноПродолжитьПоискЕслиЭлементПоGUIDНеНайден = ОпределитьПоТипуОбъектаИспользоватьДополнительныйПоискПоПолямПоиска(СтруктураСвойств.ТипСсылкиСтрокой);
			
			АвтоматическиСоздаватьНовыйОбъект = (НЕ НеСоздаватьОбъектЕслиНеНайден
				И НЕ НужноПродолжитьПоискЕслиЭлементПоGUIDНеНайден)
				И НЕ ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
				
			СсылкаНаОбъект = НайтиИлиСоздатьОбъектПоСвойству(СтруктураСвойств, ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать,
				ИмяТипаОбъекта, "{УникальныйИдентификатор}", СвойствоУникальныйИдентификатор, 
				ОбъектНайден, АвтоматическиСоздаватьНовыйОбъект, 
				СозданныйОбъект, РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы, ИзвестнаяСсылкаУникальногоИдентификатора, 
				НппСсылки, НППГлобальнойСсылки, 
				ПараметрыОбъекта, НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, ОбъектБылСозданВТекущейИнформационнойБазе);
				
			Если Не НужноПродолжитьПоискЕслиЭлементПоGUIDНеНайден Тогда
				
				Если Не ЗначениеЗаполнено(СсылкаНаОбъект)
					И ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD Тогда
					
					СсылкаНаОбъект = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойствоУникальныйИдентификатор));
					ОбъектНайден = Ложь;
					СсылкаНаОбъектФиктивная = Истина;
				
				КонецЕсли;
			
				Если СсылкаНаОбъект <> Неопределено 
					И СсылкаНаОбъект.Пустая() Тогда
							
					СсылкаНаОбъект = Неопределено;
							
				КонецЕсли;
					
				// СсылкаНаОбъект пока не найден
				Если СсылкаНаОбъект <> Неопределено
					ИЛИ СозданныйОбъект <> Неопределено Тогда
							
					ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, СсылкаНаОбъект, ТипОбъекта);					
					
				КонецЕсли;			
				
				Возврат СсылкаНаОбъект;	
				
			КонецЕсли;
								
		КонецЕсли;
		
	КонецЕсли;
		
	Если СсылкаНаОбъект <> Неопределено 
		И СсылкаНаОбъект.Пустая() Тогда
				
		СсылкаНаОбъект = Неопределено;
				
	КонецЕсли;
		
	// СсылкаНаОбъект пока не найден
	Если СсылкаНаОбъект <> Неопределено
		ИЛИ СозданныйОбъект <> Неопределено Тогда
				
		ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, СсылкаНаОбъект, ТипОбъекта);
				
		Возврат СсылкаНаОбъект;
		
	КонецЕсли;
	
	ОбъектНайденПоКлючуВПриемнике = Ложь;
			
	НомерВариантаПоиска = 1;
	СтрокаИменСвойствПоиска = "";
	ПредыдущаяСтрокаПоиска = Неопределено;
	ПрекратитьПоиск = Ложь;
	УстанавливатьУОбъектаВсеСвойстваПоиска = Истина;
	
	НастройкаПоиска = "";
	АлгоритмПоиска = ОпределитьПоТипуОбъектаАлгоритмПоследовательностиПолейПоиска(СтруктураСвойств.ТипСсылкиСтрокой, НастройкаПоиска);
	
	ЕстьАлгоритмПоиска = Не ПустаяСтрока(АлгоритмПоиска);
	
	Пока НомерВариантаПоиска <= 10
		И ЕстьАлгоритмПоиска Цикл
							
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ОпределитьПоТипуОбъектаПриемникаПравилоКонвертации(СтруктураСвойств.ТипСсылкиСтрокой), 
					        "ПоследовательностьПолейПоиска"));
					
			Иначе
				
				Выполнить(АлгоритмПоиска);
			
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(73, ОписаниеОшибки(), "", "", 
				ТипОбъекта, Неопределено, "Последовательность полей поиска");				
							
		КонецПопытки;
			
		НеНужноВыполнятьПоиск = ПрекратитьПоиск = Истина 
			ИЛИ СтрокаИменСвойствПоиска = ПредыдущаяСтрокаПоиска
			ИЛИ ЗначениеЗаполнено(СсылкаНаОбъект);				
			
		Если НЕ НеНужноВыполнятьПоиск Тогда
	
			// сам поиск непосредственно
			СсылкаНаОбъект = НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, СтруктураСвойств, 
				СтрокаИменСвойствПоиска, ПоискПоДатеНаРавенство);
				
			НеНужноВыполнятьПоиск = ЗначениеЗаполнено(СсылкаНаОбъект);	
				
		КонецЕсли;
		
		Если НеНужноВыполнятьПоиск Тогда
		
			Если РежимПоискаОсновногоОбъекта Тогда
			
				ОбработатьУстановкуСвойствПоискаУОбъекта(УстанавливатьУОбъектаВсеСвойстваПоиска, ТипОбъекта, СвойстваПоиска, 
					СвойстваПоискаНеЗамещать, СсылкаНаОбъект, СозданныйОбъект, НЕ РежимПоискаОсновногоОбъекта, СвойстваОбъектаМодифицированы,
					НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, ОбъектБылСозданВТекущейИнформационнойБазе);	
					
			КонецЕсли;
						
			Прервать;
			
		КонецЕсли;	
	
		НомерВариантаПоиска = НомерВариантаПоиска + 1;
		ПредыдущаяСтрокаПоиска = СтрокаИменСвойствПоиска;
		
	КонецЦикла;
		
	Если Не ЕстьАлгоритмПоиска Тогда
	
		// сам поиск непосредственно и без алгоритма поиска
		СсылкаНаОбъект = НайтиЭлементПоСвойствамПоиска(ТипОбъекта, ИмяТипаОбъекта, СвойстваПоиска, СтруктураСвойств, 
			СтрокаИменСвойствПоиска, ПоискПоДатеНаРавенство);	
		
	КонецЕсли;
		
	Если РежимПоискаОсновногоОбъекта
		И ЗначениеЗаполнено(СсылкаНаОбъект)
		И (ИмяТипаОбъекта = "Документ" 
		ИЛИ ИмяТипаОбъекта = "Задача"
		ИЛИ ИмяТипаОбъекта = "БизнесПроцесс") Тогда
		
		// если у документа дата есть в свойствах поиска - то устанавливаем ее
		ДатаПустая = Не ЗначениеЗаполнено(СвойстваПоиска["Дата"]);
		МожноЗамещать = (Не ДатаПустая) 
			И (СвойстваПоискаНеЗамещать["Дата"] = Неопределено);
			
		Если МожноЗамещать Тогда
			
			Если СозданныйОбъект = Неопределено Тогда
				СозданныйОбъект = СсылкаНаОбъект.ПолучитьОбъект();
			КонецЕсли;
			
			СозданныйОбъект.Дата = СвойстваПоиска["Дата"];
				
		КонецЕсли;
		
	КонецЕсли;		
	
	// создавать новый объект нужно не всегда
	Если (СсылкаНаОбъект = Неопределено
			ИЛИ СсылкаНаОбъект.Пустая())
		И СозданныйОбъект = Неопределено Тогда
		
		Если ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD Тогда
			
			СсылкаНаОбъект = СтруктураСвойств.Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(СвойствоУникальныйИдентификатор));	
			СсылкаНаОбъектФиктивная = Истина;
			
		ИначеЕсли НЕ НеСоздаватьОбъектЕслиНеНайден Тогда
		
			СсылкаНаОбъект = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, СозданныйОбъект, 
				НЕ РежимПоискаОсновногоОбъекта, ИзвестнаяСсылкаУникальногоИдентификатора, НппСсылки, НППГлобальнойСсылки, 
				НайтиПервоеПравилоПоСтруктуреСвойств(СтруктураСвойств), ПараметрыОбъекта, УстанавливатьУОбъектаВсеСвойстваПоиска);		
				
			СвойстваОбъектаМодифицированы = Истина;
				
		КонецЕсли;
			
		ОбъектНайден = Ложь;
			
	КонецЕсли;
	
	Если СсылкаНаОбъект <> Неопределено
		И СсылкаНаОбъект.Пустая() Тогда
		
		СсылкаНаОбъект = Неопределено;	
		
	КонецЕсли;
	
	ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, СсылкаНаОбъект, ТипОбъекта);
				
	Возврат СсылкаНаОбъект;
	
КонецФункции 

// Устанавливает свойства объекта (записи)
//
// Параметры:
//  Запись         - объект, свойства которого устанавливаем
//                   Например, строка табличной части или запись регистра
//
Процедура УстановитьСвойстваЗаписи(Запись, ИнформацияОТипах, 
	ПараметрыОбъекта, ИмяВетки, НомерЗаписи,
	ДанныеПоискаПоТЧ = Неопределено, КопияТЧДляПоиска = Неопределено)
	
	НужноОрганизоватьПоискПоТЧ = (ДанныеПоискаПоТЧ <> Неопределено)
								И (КопияТЧДляПоиска <> Неопределено)
								И КопияТЧДляПоиска.Количество() <> 0;
								
	Если НужноОрганизоватьПоискПоТЧ Тогда
									
		СтруктураЧтенияСвойств = Новый Структура();
		СтруктураЧтенияСубконто = Новый Структура();
		
	КонецЕсли;
		
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			
			ЭтоПараметр = (ИмяУзла = "ЗначениеПараметра");
			
			Имя = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			
			Если Имя = "ВидДвижения" И Найти(Метаданные.НайтиПоТипу(ТипЗнч(Запись)).ПолноеИмя(), "РегистрНакопления") Тогда
				
				ТипСвойства = одТипВидДвиженияНакопления;
				
			Иначе
				
				ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
				
			КонецЕсли;
			
			ЗначениеСвойства = ПрочитатьСвойство(ТипСвойства);
			
			Если ЭтоПараметр Тогда
				ДобавитьСложныйПараметрПриНеобходимости(ПараметрыОбъекта, ИмяВетки, НомерЗаписи, Имя, ЗначениеСвойства);			
			ИначеЕсли НужноОрганизоватьПоискПоТЧ Тогда 
				СтруктураЧтенияСвойств.Вставить(Имя, ЗначениеСвойства);	
			Иначе
				Запись[Имя] = ЗначениеСвойства;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт" Тогда
			
			// поиск по субконто не реализован
			
			Ключ = Неопределено;
			Значение = Неопределено;
			
			Пока ФайлОбмена.Прочитать() Цикл
				
				ИмяУзла = ФайлОбмена.ЛокальноеИмя;
								
				Если ИмяУзла = "Свойство" Тогда
					
					Имя = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
					ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
										
					Если Имя = "Ключ" Тогда
						
						Ключ = ПрочитатьСвойство(ТипСвойства);
						
					ИначеЕсли Имя = "Значение" Тогда
						
						Значение = ПрочитатьСвойство(ТипСвойства);
						
					КонецЕсли;
					
				ИначеЕсли (ИмяУзла = "СубконтоДт" ИЛИ ИмяУзла = "СубконтоКт") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
					
					Прервать;
					
				Иначе
					
					ЗаписатьВПротоколВыполнения(9);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если Ключ <> Неопределено 
				И Значение <> Неопределено Тогда
				
				Если НЕ НужноОрганизоватьПоискПоТЧ Тогда
				
					Запись[ИмяУзла][Ключ] = Значение;
					
				Иначе
					
					СоответствиеЗаписи = Неопределено;
					Если НЕ СтруктураЧтенияСубконто.Свойство(ИмяУзла, СоответствиеЗаписи) Тогда
						СоответствиеЗаписи = Новый Соответствие;
						СтруктураЧтенияСубконто.Вставить(ИмяУзла, СоответствиеЗаписи);
					КонецЕсли;
					
					СоответствиеЗаписи.Вставить(Ключ, Значение);
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли (ИмяУзла = "Запись") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НужноОрганизоватьПоискПоТЧ Тогда
		
		СтруктураПоиска = Новый Структура();
		
		Для Каждого ЭлементПоиска Из  ДанныеПоискаПоТЧ.ПоляПоискаТЧ Цикл
			
			ЗначениеЭлемента = Неопределено;
			СтруктураЧтенияСвойств.Свойство(ЭлементПоиска, ЗначениеЭлемента);
			
			СтруктураПоиска.Вставить(ЭлементПоиска, ЗначениеЭлемента);		
			
		КонецЦикла;		
		
		МассивРезультатовПоиска = КопияТЧДляПоиска.НайтиСтроки(СтруктураПоиска);
		
		НайденаЗапись = МассивРезультатовПоиска.Количество() > 0;
		Если НайденаЗапись Тогда
			ЗаполнитьЗначенияСвойств(Запись, МассивРезультатовПоиска[0]);
		КонецЕсли;
		
		// поверх заполнение свойствами и значением субконто
		Для Каждого Эл Из СтруктураЧтенияСвойств Цикл
			
			Запись[Эл.Ключ] = Эл.Значение;
			
		КонецЦикла;
		
		Для Каждого ЭлИмя Из СтруктураЧтенияСубконто Цикл
			
			Для Каждого ЭлКлюч Из ЭлИмя.Значение Цикл
			
				Запись[ЭлИмя.Ключ][ЭлКлюч.Ключ] = ЭлКлюч.Значение;
				
			КонецЦикла;
			
		КонецЦикла;			
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСвойстваЗаписи()

// Загружает табличную часть объекта
//
// Параметры:
//  Объект         - объект, табличную часть которого загружаем
//  Имя            - имя табличной части
//  Очистить       - если Истина, то табличная часть предварительно очищается
// 
Процедура ЗагрузитьТабличнуюЧасть(Объект, Имя, Очистить, ОбщаяИнформацияОТипеДокумента, НужноЗаписатьОбъект, 
	ПараметрыОбъекта, Правило)
	
	ИмяТабличнойЧасти = Имя + "ТабличнаяЧасть";
	Если ОбщаяИнформацияОтипеДокумента <> Неопределено Тогда
		ИнформацияОТипах = ОбщаяИнформацияОТипеДокумента[ИмяТабличнойЧасти];
	Иначе
	    ИнформацияОТипах = Неопределено;
	КонецЕсли;
			
	ДанныеПоискаПоТЧ = Неопределено;
	Если Правило <> Неопределено Тогда
		ДанныеПоискаПоТЧ = Правило.ПоискПоТабличнымЧастям.Найти("ТабличнаяЧасть." + Имя, "ИмяЭлемента");
	КонецЕсли;
	
	КопияТЧДляПоиска = Неопределено;
	
	ТЧ = Объект[Имя];

	Если Очистить
		И ТЧ.Количество() <> 0 Тогда
		
		НужноЗаписатьОбъект = Истина;
		
		Попытка
			
			Если ДанныеПоискаПоТЧ <> Неопределено Тогда 
				КопияТЧДляПоиска = ТЧ.Выгрузить();
			КонецЕсли;
			
			ТЧ.Очистить();
			
		Исключение
			
		КонецПопытки;
		
	ИначеЕсли ДанныеПоискаПоТЧ <> Неопределено Тогда
		
		КопияТЧДляПоиска = ТЧ.Выгрузить();	
		
	КонецЕсли;
	
	НомерЗаписи = 0;
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если      ИмяУзла = "Запись" Тогда
			Попытка
				
				НужноЗаписатьОбъект = Истина;
				Запись = ТЧ.Добавить();
				
			Исключение
				Запись = Неопределено;
			КонецПопытки;
			
			Если Запись = Неопределено Тогда
				одПропустить(ФайлОбмена);
			Иначе
				УстановитьСвойстваЗаписи(Запись, ИнформацияОТипах, ПараметрыОбъекта, ИмяТабличнойЧасти, НомерЗаписи, ДанныеПоискаПоТЧ, КопияТЧДляПоиска);
			КонецЕсли;
			
			НомерЗаписи = НомерЗаписи + 1;
			
		ИначеЕсли (ИмяУзла = "ТабличнаяЧасть") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры 

// Загружает движения объекта
//
// Параметры:
//  Объект         - объект, движения которого загружаем
//  Имя            - имя регистра
//  Очистить       - если Истина, то движения предварительно очищается
// 
Процедура ЗагрузитьДвижения(Объект, Имя, Очистить, ОбщаяИнформацияОТипеДокумента, НужноЗаписатьОбъект, 
	ПараметрыОбъекта, Правило)
	
	ИмяДвижений = Имя + "НаборЗаписей";
	Если ОбщаяИнформацияОтипеДокумента <> Неопределено Тогда
		ИнформацияОТипах = ОбщаяИнформацияОтипеДокумента[ИмяДвижений];
	Иначе
	    ИнформацияОТипах = Неопределено;
	КонецЕсли;
	
	ДанныеПоискаПоТЧ = Неопределено;
	Если Правило <> Неопределено Тогда
		ДанныеПоискаПоТЧ = Правило.ПоискПоТабличнымЧастям.Найти("НаборЗаписей." + Имя, "ИмяЭлемента");
	КонецЕсли;
	
	КопияТЧДляПоиска = Неопределено;
	
	Движения = Объект.Движения[Имя];
	
	Движения.Прочитать();

	Если Очистить
		И Движения.Количество() <> 0 Тогда
		
		НужноЗаписатьОбъект = Истина;
		
		Если ДанныеПоискаПоТЧ <> Неопределено Тогда 
			КопияТЧДляПоиска = Движения.Выгрузить();
		КонецЕсли;
		
        Движения.Очистить();
		
	ИначеЕсли ДанныеПоискаПоТЧ <> Неопределено Тогда
		
		КопияТЧДляПоиска = Движения.Выгрузить();	
		
	КонецЕсли;
	
	НомерЗаписи = 0;
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
			
		Если      ИмяУзла = "Запись" Тогда
			
			Запись = Движения.Добавить();
			НужноЗаписатьОбъект = Истина;
			УстановитьСвойстваЗаписи(Запись, ИнформацияОТипах, ПараметрыОбъекта, ИмяДвижений, НомерЗаписи, ДанныеПоискаПоТЧ, КопияТЧДляПоиска);
			
			НомерЗаписи = НомерЗаписи + 1;
			
		ИначеЕсли (ИмяУзла = "НаборЗаписей") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает объект типа ОписаниеТипов из указанного xml-источника
//
// Параметры:
//  Источник         - xml-источник
// 
Функция ЗагрузитьТипыОбъекта(Источник)

	// КвалификаторыДаты

	СоставДаты =  одАтрибут(Источник, одТипСтрока,  "СоставДаты");

	
	// КвалификаторыСтроки

	Длина           =  одАтрибут(Источник, одТипЧисло,  "Длина");
	ДлинаДопустимая =  одАтрибут(Источник, одТипСтрока, "ДопустимаяДлина");

	
	// КвалификаторыЧисла

	Разрядность             = одАтрибут(Источник, одТипЧисло,  "Разрядность");
	РазрядностьДробнойЧасти = одАтрибут(Источник, одТипЧисло,  "РазрядностьДробнойЧасти");
	ЗнакДопустимый          = одАтрибут(Источник, одТипСтрока, "ДопустимыйЗнак");


	// Читаем массив типов
	
	МассивТипов = Новый Массив;
	
	Пока Источник.Прочитать() Цикл
		ИмяУзла = Источник.ЛокальноеИмя;
		
		Если      ИмяУзла = "Тип" Тогда
			МассивТипов.Добавить(Тип(одЗначениеЭлемента(Источник, одТипСтрока)));
		ИначеЕсли (ИмяУзла = "Типы") И ( Источник.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			Прервать;
		Иначе
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;


	
	Если МассивТипов.Количество() > 0 Тогда
		
		// КвалификаторыДаты
		
		Если СоставДаты = "Дата" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.Дата);
		ИначеЕсли СоставДаты = "ДатаВремя" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		ИначеЕсли СоставДаты = "Время" Тогда
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.Время);
		Иначе
			КвалификаторыДаты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
		КонецЕсли; 


		// КвалификаторыЧисла
		
		Если Разрядность > 0 Тогда
			Если ЗнакДопустимый = "Неотрицательный" Тогда
				Знак = ДопустимыйЗнак.Неотрицательный;
			Иначе
				Знак = ДопустимыйЗнак.Любой;
			КонецЕсли; 
			КвалификаторыЧисла  = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак);
		Иначе
			КвалификаторыЧисла  = Новый КвалификаторыЧисла();
		КонецЕсли; 


		// КвалификаторыСтроки

		Если Длина > 0 Тогда
			Если ДлинаДопустимая = "Фиксированная" Тогда
				ДлинаДопустимая = ДопустимаяДлина.Фиксированная;
			Иначе
				ДлинаДопустимая = ДопустимаяДлина.Переменная;
			КонецЕсли;
			КвалификаторыСтроки = Новый КвалификаторыСтроки(Длина, ДлинаДопустимая);
		Иначе
			КвалификаторыСтроки = Новый КвалификаторыСтроки();
		КонецЕсли; 
        
		Возврат Новый ОписаниеТипов(МассивТипов, КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты);
	КонецЕсли;

	Возврат Неопределено;
	
КонецФункции // ЗагрузитьТипыОбъекта()

Процедура УстановитьПометкуУдаленияУОбъекта(Объект, ПометкаУдаления, ИмяТипаОбъекта)
	
	Если (ПометкаУдаления = Неопределено)
		И (Объект.ПометкаУдаления <> Истина) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПометкаДляУстановки = ?(ПометкаУдаления <> Неопределено, ПометкаУдаления, Ложь);
	
	УстановитьОбменДаннымиЗагрузка(Объект);
		
	// дли иерархических объектов пометку удаления только у конкретного объекта ставим
	Если ИмяТипаОбъекта = "Справочник"
		ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик"
		ИЛИ ИмяТипаОбъекта = "ПланСчетов" Тогда
			
		Объект.УстановитьПометкуУдаления(ПометкаДляУстановки, Ложь);
			
	Иначе	
		
		Объект.УстановитьПометкуУдаления(ПометкаДляУстановки);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаписатьДокументВБезопасномРежиме(Документ, ТипОбъекта)
	
	Если Документ.Проведен Тогда
						
		Документ.Проведен = Ложь;
			
	КонецЕсли;		
								
	ЗаписатьОбъектВИБ(Документ, ТипОбъекта);	
	
КонецПроцедуры

Функция ПолучитьОбъектПоСсылкеИДопИнформации(СозданныйОбъект, Ссылка)
	
	// если объект создали, то работаем с ним, если нашли - получаем объект
	Если СозданныйОбъект <> Неопределено Тогда
		Объект = СозданныйОбъект;
	Иначе
		Если Ссылка.Пустая() Тогда
			Объект = Неопределено;
		Иначе
			Объект = Ссылка.ПолучитьОбъект();
		КонецЕсли;		
	КонецЕсли;
	
	Возврат Объект;
	
КонецФункции

Процедура КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Источник, ТипОбъекта, ГНпп = 0)
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Если Нпп <> 0 Тогда
			СтрокаСообщения = "Загрузка объекта № " + Нпп;
		Иначе
			СтрокаСообщения = "Загрузка объекта № " + ГНпп;
		КонецЕсли;
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола();
		
		Если Не ПустаяСтрока(ИмяПравила) Тогда
			
			ЗП.ИмяПКО = ИмяПравила;
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(Источник) Тогда
			
			ЗП.Источник = Источник;
			
		КонецЕсли;
		
		ЗП.ТипОбъекта = ТипОбъекта;
		ЗаписатьВПротоколВыполнения(СтрокаСообщения, ЗП, Ложь);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьПараметрПриНеобходимости(ПараметрыДанных, ИмяПараметра, ЗначениеПараметра)
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыДанных.Вставить(ИмяПараметра, ЗначениеПараметра);
	
КонецПроцедуры

Процедура ДобавитьСложныйПараметрПриНеобходимости(ПараметрыДанных, ИмяВеткиПараметров, НомерСтроки, ИмяПараметра, ЗначениеПараметра) Экспорт
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Соответствие;
	КонецЕсли;
	
	ТекущиеДанныеПараметра = ПараметрыДанных[ИмяВеткиПараметров];
	
	Если ТекущиеДанныеПараметра = Неопределено Тогда
		
		ТекущиеДанныеПараметра = Новый ТаблицаЗначений;
		ТекущиеДанныеПараметра.Колонки.Добавить("НомерСтроки");
		ТекущиеДанныеПараметра.Колонки.Добавить("ИмяПараметра");
		ТекущиеДанныеПараметра.Индексы.Добавить("НомерСтроки");
		
		ПараметрыДанных.Вставить(ИмяВеткиПараметров, ТекущиеДанныеПараметра);	
		
	КонецЕсли;
	
	Если ТекущиеДанныеПараметра.Колонки.Найти(ИмяПараметра) = Неопределено Тогда
		ТекущиеДанныеПараметра.Колонки.Добавить(ИмяПараметра);
	КонецЕсли;		
	
	ДанныеСтроки = ТекущиеДанныеПараметра.Найти(НомерСтроки, "НомерСтроки");
	Если ДанныеСтроки = Неопределено Тогда
		ДанныеСтроки = ТекущиеДанныеПараметра.Добавить();
		ДанныеСтроки.НомерСтроки = НомерСтроки;
	КонецЕсли;		
	
	ДанныеСтроки[ИмяПараметра] = ЗначениеПараметра;
	
КонецПроцедуры

Функция ПрочитатьИнформациюОбУдаленииРегистрацииОбъекта()
	
	Попытка
		
		СсылкаВДругойИБ	  = одАтрибут(ФайлОбмена, одТипСтрока, "СсылкаВДругойИБ");
		СобственнаяСсылка = одАтрибут(ФайлОбмена, одТипСтрока, "СобственнаяСсылка");
				
		СсылкаНаЭлемент = ЗначениеИзСтрокиВнутр(СсылкаВДругойИБ);
			
		НаборЗаписей = мМенеджерРегистраСоответствийОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
		НаборЗаписей.Отбор.СсылкаВДругойИБ.Установить(СобственнаяСсылка);
		НаборЗаписей.Отбор.СобственнаяСсылка.Установить(СсылкаНаЭлемент);
			
		ЗаписатьОбъектВИБ(НаборЗаписей, "РегистрСведенийНаборЗаписей.СоответствиеОбъектовДляОбмена");
		
		одПропустить(ФайлОбмена, "ИнформацияОбУдаленииРегистрицииОбъекта");
		
		Возврат НаборЗаписей;
		
	Исключение
		
		одПропустить(ФайлОбмена, "ИнформацияОбУдаленииРегистрицииОбъекта");
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПрочитатьИнформациюОРегистрацииОбъекта()
	
	Попытка
		
		СсылкаВДругойИБ	  = одАтрибут(ФайлОбмена, одТипСтрока, "СсылкаВДругойИБ");
		СобственнаяСсылка = одАтрибут(ФайлОбмена, одТипСтрока, "СобственнаяСсылка");
		ИмяТипаПриемника  = одАтрибут(ФайлОбмена, одТипСтрока, "ИмяТипаПриемника");
			
		СсылкаНаЭлемент = ЗначениеИзСтрокиВнутр(СсылкаВДругойИБ);
		
		УдалитьПриНеобходимостиЗаписьСНеуказаннойСсылкойВДругойИБВРегистреСоответствий(СсылкаНаЭлемент, Истина);
			
		НаборЗаписей = мМенеджерРегистраСоответствийОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
		НаборЗаписей.Отбор.СсылкаВДругойИБ.Установить(СобственнаяСсылка);
		НаборЗаписей.Отбор.СобственнаяСсылка.Установить(СсылкаНаЭлемент);
		
		СтрокаНабора = НаборЗаписей.Добавить();
		СтрокаНабора.УзелОбмена = УзелОбменаЗагрузкаДанных;
		СтрокаНабора.СсылкаВДругойИБ = СобственнаяСсылка;
		СтрокаНабора.СобственнаяСсылка = СсылкаНаЭлемент;
		СтрокаНабора.ИмяТипаПриемника = ИмяТипаПриемника;
		
		ЗаписатьОбъектВИБ(НаборЗаписей, "РегистрСведенийНаборЗаписей.СоответствиеОбъектовДляОбмена");
		
		одПропустить(ФайлОбмена, "ИнформацияОРегистрицииОбъекта");
		
		Возврат НаборЗаписей;
		
	Исключение
		
		одПропустить(ФайлОбмена, "ИнформацияОРегистрицииОбъекта");
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции

Функция ПрочитатьНаборЗаписейРегистра()
	
	Нпп						= одАтрибут(ФайлОбмена, одТипЧисло,  "Нпп");
	ИмяПравила				= одАтрибут(ФайлОбмена, одТипСтрока, "ИмяПравила");
	ТипОбъектаСтрокой       = одАтрибут(ФайлОбмена, одТипСтрока, "Тип");
	ПриоритетОбъектаОбмена  = ПолучитьПриоритетОбъектаОбмена(ФайлОбмена);
	
	ЭтоПустойНабор			= одАтрибут(ФайлОбмена, одТипБулево, "ПустойНабор");
	Если Не ЗначениеЗаполнено(ЭтоПустойНабор) Тогда
		ЭтоПустойНабор = Ложь;
	КонецЕсли;
	
	ТипОбъекта 				= Тип(ТипОбъектаСтрокой);
	Источник 				= Неопределено;
	СвойстваПоиска 			= Неопределено;
	
	КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Неопределено, ТипОбъекта);
	
	ИмяТипаСтрокиРегистра = СтрЗаменить(ТипОбъектаСтрокой, "РегистрСведенийНаборЗаписей.", "РегистрСведенийЗапись.");
	ИмяРегистра = СтрЗаменить(ТипОбъектаСтрокой, "РегистрСведенийНаборЗаписей.", "");
	
	ТипСтрокиНабораРегистра = Тип(ИмяТипаСтрокиРегистра);
	
	СтруктураСвойств = Менеджеры[ТипСтрокиНабораРегистра];
	ИмяТипаОбъекта   = СтруктураСвойств.ИмяТипа;
	
	ИнформацияОТипах = мСоответствиеТиповДанныхДляЗагрузки[ТипСтрокиНабораРегистра];
    	
	Объект          = Неопределено;
		
	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		ЕстьОбработчикПередЗагрузкой = Правило.ЕстьОбработчикПередЗагрузкой;
		ЕстьОбработчикПриЗагрузке    = Правило.ЕстьОбработчикПриЗагрузке;
		ЕстьОбработчикПослеЗагрузки  = Правило.ЕстьОбработчикПослеЗагрузки;
		
	Иначе
		
		ЕстьОбработчикПередЗагрузкой = Ложь;
		ЕстьОбработчикПриЗагрузке    = Ложь;
		ЕстьОбработчикПослеЗагрузки  = Ложь;
		
	КонецЕсли;


    // Глобальный обработчик события ПередЗагрузкойОбъекта
	
	Если ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередЗагрузкойОбъекта"));
				
			Иначе
				
				Выполнить(Конвертация.ПередЗагрузкойОбъекта);
			
			КонецЕсли;
			
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(53, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта (глобальный)");				
							
		КонецПопытки;			
				
		Если Отказ Тогда	//	Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
    // Обработчик события ПередЗагрузкойОбъекта
	Если ЕстьОбработчикПередЗагрузкой Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПередЗагрузкой"));
				
			Иначе
				
				Выполнить(Правило.ПередЗагрузкой);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(19, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта");				
							
		КонецПопытки;			
		
		
		Если Отказ Тогда // Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РежимЧтенияОтбора = Ложь;
	РежимЧтенияЗаписей = Ложь;
	
	ОтборРегистра = Неопределено;
	ТекущаяСтрокаНабораЗаписей = Неопределено;
	ПараметрыОбъекта = Неопределено;
	ПараметрыНабораЗаписей = Неопределено;
	НомерЗаписи = -1;
		
	НужноЗаписатьНаборЗаписей = Истина;
	
	
	// читаем что там в регистре записано
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "Отбор" Тогда
			
			Если ФайлОбмена.ТипУзла <> одТипУзлаXML_КонецЭлемента тогда
					
				Объект = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
				ОтборРегистра = Объект.Отбор;
			
				РежимЧтенияОтбора = Истина;
					
			КонецЕсли;			
		
		ИначеЕсли ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЭтоПараметрДляОбъекта = (ИмяУзла = "ЗначениеПараметра");
			
			Имя                = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");
            			
			// читаем и устанавливаем значение свойства
			ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
			СвойствоНеНайденоПоСсылке = Ложь;
			//Создавать нужно всегда
			Значение = ПрочитатьСвойство(ТипСвойства, ЭтоПустойНабор, СвойствоНеНайденоПоСсылке);
			//Значение = ПрочитатьСвойство(ТипСвойства, Ложь, СвойствоНеНайденоПоСсылке);
			
			Если ЭтоПустойНабор 
				И  СвойствоНеНайденоПоСсылке Тогда
				
				НужноЗаписатьНаборЗаписей = Ложь;
				
			КонецЕсли;
			
			Если ЭтоПараметрДляОбъекта Тогда
				
				Если РежимЧтенияОтбора Тогда
					ДобавитьПараметрПриНеобходимости(ПараметрыНабораЗаписей, Имя, Значение);
				Иначе
					// дополняем коллекцию параметров объекта
					ДобавитьПараметрПриНеобходимости(ПараметрыОбъекта, Имя, Значение);
					ДобавитьСложныйПараметрПриНеобходимости(ПараметрыНабораЗаписей, "Строки", НомерЗаписи, Имя, Значение);
				КонецЕсли;
				
			Иначе
 				
				Попытка
					
					Если РежимЧтенияОтбора Тогда
						ОтборРегистра[Имя].Установить(Значение);						
					ИначеЕсли РежимЧтенияЗаписей Тогда
						ТекущаяСтрокаНабораЗаписей[Имя] = Значение;
					КонецЕсли;
					
				Исключение
					
					ЗП = ПолучитьСтруктуруЗаписиПротокола(26, ОписаниеОшибки());
					ЗП.ИмяПКО           = ИмяПравила;
					ЗП.Источник         = Источник;
					ЗП.Объект           = Объект;
					ЗП.ТипОбъекта       = ТипОбъекта;
					ЗП.Свойство         = Имя;
					ЗП.Значение         = Значение;
					ЗП.ТипЗначения      = ТипЗнч(Значение);
					СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(26, ЗП, Истина);
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "СтрокиНабораЗаписей" Тогда
			
			Если ФайлОбмена.ТипУзла <> одТипУзлаXML_КонецЭлемента Тогда
								
				// Обработчик события ПриЗагрузкеОбъекта
				// срабатывает перед чтением первой записи в наборе
				Если РежимЧтенияОтбора = Истина
					 И ЕстьОбработчикПриЗагрузке Тогда
					 
					 
					НужноБылоЗаписатьОбъект = НужноЗаписатьНаборЗаписей;
					ОбъектМодифицирован = Истина;
					 
					Попытка
						
						Если ФлагРежимОтладкиОбработчиков Тогда
							
							Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПриЗагрузке"));
							
						Иначе
							
							Выполнить(Правило.ПриЗагрузке);
						
						КонецЕсли;
						
						НужноЗаписатьНаборЗаписей = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
								ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
						
					КонецПопытки;
							
				КонецЕсли;
				
				РежимЧтенияОтбора = Ложь;
				РежимЧтенияЗаписей = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Объект" Тогда
			
			Если ФайлОбмена.ТипУзла <> одТипУзлаXML_КонецЭлемента Тогда
			
				ТекущаяСтрокаНабораЗаписей = Объект.Добавить();	
			    НомерЗаписи = НомерЗаписи + 1;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "НаборЗаписейРегистра" И ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента Тогда
			
			Прервать;
						
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Отказ = Ложь;
	
	// Глобальный обработчик события ПослеЗагрузкиОбъекта
	Если ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта Тогда
		
		НужноБылоЗаписатьОбъект = НужноЗаписатьНаборЗаписей;
	    ОбъектМодифицирован = Истина;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПослеЗагрузкиОбъекта"));
				
			Иначе
				
				Выполнить(Конвертация.ПослеЗагрузкиОбъекта);
				
			КонецЕсли;
			
			НужноЗаписатьНаборЗаписей = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(54, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта (глобальный)");					
			
		КонецПопытки;
						
	КонецЕсли;
	
	// после загрузки
	Если ЕстьОбработчикПослеЗагрузки Тогда
		
		НужноБылоЗаписатьОбъект = НужноЗаписатьНаборЗаписей;
	    ОбъектМодифицирован = Истина;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПослеЗагрузки"));
				
			Иначе
				
				Выполнить(Правило.ПослеЗагрузки);
				
			КонецЕсли;
			
			НужноЗаписатьНаборЗаписей = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(21, ОписаниеОшибки(), ИмяПравила, Источник, 
					ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта");				
									
		КонецПопытки;
				
	КонецЕсли;
	
	Если Отказ Тогда
				
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если НужноЗаписатьНаборЗаписей
		И Объект <> Неопределено тогда
		
		НаличиеКоллизии = ПроверитьналичиеКоллизийИзмененийДляОбъекта(Объект, "РегистрСведений", ИмяРегистра, ПриоритетОбъектаОбмена);
		
		// в случае наличия коллизии новая версия объекта записывается только при условии, что
		// приоритет ее записи ВЫШЕ, во всех остальных случаях версия не записывается
		Если НаличиеКоллизии Тогда
			
			Если ПриоритетОбъектаОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
				ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
			КонецЕсли;			
			
		Иначе
			
			ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Объект;	
	
КонецФункции

Функция ПолучитьДанныеОбъектаСтрокой(Объект)
	
	СтроковоеПредставлениеОбъекта = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное); 
	
	СтроковоеПредставлениеОбъекта = ЗаписьXML.Закрыть();
	
	Возврат СтроковоеПредставлениеОбъекта;
	
КонецФункции

//функция проверяет наличие коллизий при загрузке
// и выдает информацию есть ли коллизия при обмене
Функция ПроверитьНаличиеКоллизийИзмененийДляОбъекта(Объект, ИмяТипаОбъекта, ДополнительнаяИнформация = "", ПриоритетОбъектаОбмена)
	
	Если Не ОтслеживатьКоллизииПриЗагрузкеДанных Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если Объект.ЭтоНовый() Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Попытка
		НаличиеКоллизии = ПланыОбмена.ИзменениеЗарегистрировано(УзелОбменаЗагрузкаДанных, Объект);
	Исключение
		НаличиеКоллизии = Ложь;
	КонецПопытки;
	
	Если НаличиеКоллизии Тогда
		
		Если ИмяТипаОбъекта = "Константы" Тогда
			
			СтрокаНачальная = XMLСтрока(Константы[ДополнительнаяИнформация].Получить());
			СтрокаКонечная = XMLСтрока(Объект.Значение);
			
		ИначеЕсли ИмяТипаОбъекта = "РегистрСведений" Тогда
			
			СтарыйНаборЗаписей = РегистрыСведений[ДополнительнаяИнформация].СоздатьНаборЗаписей();
			
			Для Каждого ЗначениеОтбора Из Объект.Отбор Цикл
			
				Если ЗначениеОтбора.Использование = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаОтбора = СтарыйНаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
				СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
				СтрокаОтбора.Использование = Истина;
				
			КонецЦикла;
			
			СтарыйНаборЗаписей.Прочитать();
			
			СтрокаНачальная = ПолучитьДанныеОбъектаСтрокой(СтарыйНаборЗаписей);
			СтрокаКонечная = ПолучитьДанныеОбъектаСтрокой(Объект);	
			
		Иначе
			
			СтрокаНачальная = ПолучитьДанныеОбъектаСтрокой(Объект.Ссылка.ПолучитьОбъект());
			СтрокаКонечная = ПолучитьДанныеОбъектаСтрокой(Объект);
			
		КонецЕсли;
		
		// если значения совпадают то коллизии нет
		Если СтрокаНачальная = СтрокаКонечная Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МенеджерЗаписи = мМенеджерРегистраКоллизий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ДатаКоллизии = ТекущаяДата();
		МенеджерЗаписи.УзелОбмена = УзелОбменаЗагрузкаДанных;
		
		Если ИмяТипаОбъекта = "Константы" Тогда
			
			МенеджерЗаписи.СсылкаНаОбъект = "Константа: " + ДополнительнаяИнформация;
			
		ИначеЕсли ИмяТипаОбъекта = "РегистрСведений" Тогда
			
			МенеджерЗаписи.СсылкаНаОбъект = "Регистр сведений: " + ДополнительнаяИнформация;
			
		Иначе
			
			МенеджерЗаписи.СсылкаНаОбъект = Объект.Ссылка;
			
		КонецЕсли;
		
		МенеджерЗаписи.ЗначениеВИнформационнойБазеДоКоллизии = СтрокаНачальная;
		МенеджерЗаписи.ЗначениеДляЗаменыПриОбмене = СтрокаКонечная;
		МенеджерЗаписи.ПриоритетОбъектовОбмена = ПриоритетОбъектаОбмена;
		
		Если ПриоритетОбъектаОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
			
			МенеджерЗаписи.РезультатРассмотренияКоллизии = Перечисления.РезультатРассмотренияКоллизии.ОбъектЗамененНаВерсиюПоступившуюПриОбмене;
			МенеджерЗаписи.КоллизияРассмотрена = Истина;
			
		ИначеЕсли ПриоритетОбъектаОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже Тогда
			
			МенеджерЗаписи.РезультатРассмотренияКоллизии = Перечисления.РезультатРассмотренияКоллизии.ОбъектНеБылИзменен;
			МенеджерЗаписи.КоллизияРассмотрена = Истина;
			
		ИначеЕсли ПриоритетОбъектаОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает Тогда
			
			МенеджерЗаписи.РезультатРассмотренияКоллизии = Перечисления.РезультатРассмотренияКоллизии.ОбъектНеБылИзменен;
			МенеджерЗаписи.КоллизияРассмотрена = Ложь;
			
		КонецЕсли;			
		
		МенеджерЗаписи.Записать();
		
	КонецЕсли;
	
	Возврат НаличиеКоллизии;
	
КонецФункции

Процедура УстановитьСсылкуДляОбъекта(СтрокаСтекаНезаписанныхОбъектов)
	
	// объект еще не записан, а на него ссылаются
	ОбъектДляЗаписи = СтрокаСтекаНезаписанныхОбъектов.Объект;
	
	СвойстваМД      = Менеджеры[СтрокаСтекаНезаписанныхОбъектов.ТипОбъекта];
	Менеджер        = СвойстваМД.Менеджер;
		
	НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор;
	НоваяСсылка = Менеджер.ПолучитьСсылку(НовыйУникальныйИдентификатор);
		
	ОбъектДляЗаписи.УстановитьСсылкуНового(НоваяСсылка);
	СтрокаСтекаНезаписанныхОбъектов.ИзвестнаяСсылка = НоваяСсылка;
	
КонецПроцедуры

Процедура ДополнитьСтекНеЗаписанныхОбъектов(Нпп, ГНпп, Объект, ИзвестнаяСсылка, ТипОбъекта, ИмяТипа, АвтоматическиГенерироватьКод = Ложь, ПараметрыОбъекта = Неопределено)
	
	НомерДляСтека = ?(Нпп = 0, Гнпп, Нпп);
	
	СтрокаСтека = мГлобальныйСтекНеЗаписанныхОбъектов[НомерДляСтека];
	Если СтрокаСтека <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мГлобальныйСтекНеЗаписанныхОбъектов.Вставить(НомерДляСтека, Новый Структура("Объект, ИзвестнаяСсылка, ТипОбъекта, ИмяТипа, АвтоматическиГенерироватьКод, ПараметрыОбъекта", 
		Объект, ИзвестнаяСсылка, ТипОбъекта, ИмяТипа, АвтоматическиГенерироватьКод, ПараметрыОбъекта));
	
КонецПроцедуры

Процедура НайтиИЗаписатьНеЗаписанныйОбъект(Нпп)
	
	СтрокаСтека = мГлобальныйСтекНеЗаписанныхОбъектов[Нпп];
	Если СтрокаСтека = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСтека.АвтоматическиГенерироватьКод = Истина Тогда
		
		НужноЗаписатьОбъект = Истина;
		ПровестиГенерациюКодаНомераПриНеобходимости(Истина, СтрокаСтека.Объект, 
					СтрокаСтека.ИмяТипа, НужноЗаписатьОбъект, Истина);
		
	КонецЕсли;
	
	ЗаписатьОбъектВИБ(СтрокаСтека.Объект, СтрокаСтека.ТипОбъекта);	
	
	мГлобальныйСтекНеЗаписанныхОбъектов.Удалить(Нпп);	
	
КонецПроцедуры

Процедура УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп)
	
	НомерДляСтека = ?(Нпп = 0, Гнпп, Нпп);
	мГлобальныйСтекНеЗаписанныхОбъектов.Удалить(НомерДляСтека);	
	
КонецПроцедуры

Процедура ПровестиЗаписьНеЗаписанныхОбъектов()
	
	Для Каждого СтрокаДанных Из мГлобальныйСтекНеЗаписанныхОбъектов Цикл
		
		// отложенная запись объектов
		Объект = СтрокаДанных.Значение.Объект;
		НппСсылки = СтрокаДанных.Ключ;
		
		Если СтрокаДанных.Значение.АвтоматическиГенерироватьКод = Истина Тогда
		
			НужноЗаписатьОбъект = Истина;
			ПровестиГенерациюКодаНомераПриНеобходимости(Истина, Объект, 
						СтрокаДанных.Значение.ИмяТипа, НужноЗаписатьОбъект, Истина);
			
		КонецЕсли;
		
		ЗаписатьОбъектВИБ(Объект, СтрокаДанных.Значение.ТипОбъекта);
		
		ДобавитьСсылкуВСписокЗагруженныхОбъектов(0, НппСсылки, Объект.Ссылка, СтрокаДанных.Значение.ТипОбъекта);
				
	КонецЦикла;
	
	мГлобальныйСтекНеЗаписанныхОбъектов.Очистить();
	
КонецПроцедуры

Процедура ПровестиГенерациюКодаНомераПриНеобходимости(ГенерироватьНовыйНомерИлиКодЕслиНеУказан, Объект, ИмяТипаОбъекта, НужноЗаписатьОбъект, 
	РежимОбменДанными)
	
	Если Не ГенерироватьНовыйНомерИлиКодЕслиНеУказан
		ИЛИ НЕ РежимОбменДанными Тогда
		
		// если номер не нужно генерировать, или не в режиме обмена данными то ничего не нужно делать... платформа сама все сгенерирует
		Возврат;
	КонецЕсли;
	
	// по типу документа смотрим заполнен кол или номер
	Если ИмяТипаОбъекта = "Документ"
		ИЛИ ИмяТипаОбъекта =  "БизнесПроцесс"
		ИЛИ ИмяТипаОбъекта = "Задача" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Номер) Тогда
			
			Объект.УстановитьНовыйНомер();
			НужноЗаписатьОбъект = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТипаОбъекта = "Справочник"
		ИЛИ ИмяТипаОбъекта = "ПланВидовХарактеристик"
		ИЛИ ИмяТипаОбъекта = "ПланОбмена" Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Код) Тогда
			
			Объект.УстановитьНовыйКод();
			НужноЗаписатьОбъект = Истина;
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПриоритетОбъектаОбмена(ФайлОбмена)
		
	СтрокаПриоритета = одАтрибут(ФайлОбмена, одТипСтрока, "ПриоритетОбъектаОбмена");
	Если ПустаяСтрока(СтрокаПриоритета) Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
	ИначеЕсли СтрокаПриоритета = "Выше" Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше;
	ИначеЕсли СтрокаПриоритета = "Ниже" Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже;
	ИначеЕсли СтрокаПриоритета = "Совпадает" Тогда
		ЗначениеПриоритета = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает;
	КонецЕсли;
	
	Возврат ЗначениеПриоритета;
	
КонецФункции

Процедура ВыполнитьНеобходимыеДействияПриОтказеОтЗаписиОбъекта(ФайлОбмена, Объект, СвойстваПоиска, ОбъектНайденПоКлючуВПриемнике)
	
	одПропустить(ФайлОбмена, "Объект");
						
	Если НЕ ОбъектНайденПоКлючуВПриемнике Тогда
		ЗарегистрироватьСоответствиеОбъектовДляОбмена(Объект.Ссылка, СвойстваПоиска);
	КонецЕсли;
	
КонецПроцедуры

// Читает очередной объект из файла обмена, производит загрузку
//
// Параметры:
//  Нет.
// 
Функция ПрочитатьОбъект()

	Нпп						= одАтрибут(ФайлОбмена, одТипЧисло,  "Нпп");
	ГНпп					= одАтрибут(ФайлОбмена, одТипЧисло,  "ГНпп");
	Источник				= одАтрибут(ФайлОбмена, одТипСтрока, "Источник");
	ИмяПравила				= одАтрибут(ФайлОбмена, одТипСтрока, "ИмяПравила");
	НеЗамещатьОбъект 		= одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");
	ПрефиксАвтонумерации	= одАтрибут(ФайлОбмена, одТипСтрока, "ПрефиксАвтонумерации");
	ПриоритетОбъектаОбмена  = ПолучитьПриоритетОбъектаОбмена(ФайлОбмена);
	
	ТипОбъектаСтрокой       = одАтрибут(ФайлОбмена, одТипСтрока, "Тип");
	ТипОбъекта 				= Тип(ТипОбъектаСтрокой);
	ИнформацияОТипах = мСоответствиеТиповДанныхДляЗагрузки[ТипОбъекта];
	
    
	КомментарииКЗагрузкеОбъекта(Нпп, ИмяПравила, Источник, ТипОбъекта, ГНпп);
    	
	СтруктураСвойств = Менеджеры[ТипОбъекта];
	ИмяТипаОбъекта   = СтруктураСвойств.ИмяТипа;


	Если ИмяТипаОбъекта = "Документ" Тогда
		
		РежимЗаписи     = одАтрибут(ФайлОбмена, одТипСтрока, "РежимЗаписи");
		РежимПроведения = одАтрибут(ФайлОбмена, одТипСтрока, "РежимПроведения");
		
	КонецЕсли;
	
	Ссылка          = Неопределено;
	Объект          = Неопределено;
	ОбъектНайден    = Истина;
	ПометкаУдаления = Неопределено;
	ОбъектБылСозданВТекущейИнформационнойБазе = Неопределено;
	
	СвойстваПоиска  = Новый Соответствие;
	СвойстваПоискаНеЗамещать  = Новый Соответствие;
	
	НужноЗаписатьОбъект = НЕ ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты;
	
	Если Не ПустаяСтрока(ИмяПравила) Тогда
		
		Правило = Правила[ИмяПравила];
		ЕстьОбработчикПередЗагрузкой = Правило.ЕстьОбработчикПередЗагрузкой;
		ЕстьОбработчикПриЗагрузке    = Правило.ЕстьОбработчикПриЗагрузке;
		ЕстьОбработчикПослеЗагрузки  = Правило.ЕстьОбработчикПослеЗагрузки;
		ГенерироватьНовыйНомерИлиКодЕслиНеУказан = Правило.ГенерироватьНовыйНомерИлиКодЕслиНеУказан;
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике =  Правило.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;
		
	Иначе
		
		ЕстьОбработчикПередЗагрузкой = Ложь;
		ЕстьОбработчикПриЗагрузке    = Ложь;
		ЕстьОбработчикПослеЗагрузки  = Ложь;
		ГенерироватьНовыйНомерИлиКодЕслиНеУказан = Ложь;
		НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь;
		
	КонецЕсли;


    // Глобальный обработчик события ПередЗагрузкойОбъекта
	
	Если ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередЗагрузкойОбъекта"));
				
			Иначе
				
				Выполнить(Конвертация.ПередЗагрузкойОбъекта);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(53, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта (глобальный)");				
							
		КонецПопытки;
				
		Если Отказ Тогда	//	Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
    // Обработчик события ПередЗагрузкойОбъекта
	Если ЕстьОбработчикПередЗагрузкой Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПередЗагрузкой"));
				
			Иначе
				
				Выполнить(Правило.ПередЗагрузкой);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(19, ОписаниеОшибки(), ИмяПравила, Источник, 
				ТипОбъекта, Неопределено, "ПередЗагрузкойОбъекта");				
							
		КонецПопытки;
				
		Если Отказ Тогда // Отказ от загрузки объекта
			
			одПропустить(ФайлОбмена, "Объект");
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;

	РежимРаботыСКонстантами = Ложь;
	ИмяКонстанты = "";
	
	СвойстваОбъектаМодифицированы = Ложь;
	НППГлобальнойСсылки = 0;
	НппСсылки = 0;
	ОбъектНайденПоКлючуВПриемнике = Ложь;
	ПараметрыОбъекта = Неопределено;
		
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
				
		Если ИмяУзла = "Свойство"
			ИЛИ ИмяУзла = "ЗначениеПараметра" Тогда
			
			ЭтоПараметрДляОбъекта = (ИмяУзла = "ЗначениеПараметра");
			
			Если Объект = Неопределено Тогда
				
				// объект не нашли и не создали - попробуем сейчас это сделать
				ОбъектНайден = Ложь;
							    // Обработчик события ПриЗагрузкеОбъекта
				Если ЕстьОбработчикПриЗагрузке Тогда
					
					НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      				ОбъектМодифицирован = Истина;
					
					// если есть обработчик при загрузке, то объект нужно перезаписывать, так как могут быть изменения
					Попытка
						
						Если ФлагРежимОтладкиОбработчиков Тогда
							
							Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПриЗагрузке"));
							
						Иначе
							
							Выполнить(Правило.ПриЗагрузке);
							
						КонецЕсли;
						
						НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
						
					КонецПопытки;							
																				
				КонецЕсли;

				// так м не смогли создать объект в событии - создаем его отдельно
				Если Объект = Неопределено Тогда
					
					НужноЗаписатьОбъект = Истина;
					
					Если ИмяТипаОбъекта = "Константы" Тогда
						
						Объект = Неопределено;
						РежимРаботыСКонстантами = Истина;
												
					Иначе
						
						СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект, Ложь, , НппСсылки, НППГлобальнойСсылки, Правило, ПараметрыОбъекта);
																	
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 

			
			Имя                = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");

			
			Если РежимРаботыСКонстантами Тогда
				
				Объект = Константы[Имя].СоздатьМенеджерЗначения();	
				ИмяКонстанты = Имя;
				Имя = "Значение";
				НужноЗаписатьОбъект = Истина;
				
			ИначеЕсли НЕ ЭтоПараметрДляОбъекта
				И ((ОбъектНайден И НеЗамещатьСвойство) 
				ИЛИ (Имя = "ЭтоГруппа") 
				ИЛИ (Объект[Имя] = NULL)) Тогда
				
				// неизвестное свойство
				одПропустить(ФайлОбмена, ИмяУзла);
				Продолжить;
				
			КонецЕсли; 

			
			// читаем и устанавливаем значение свойства
			ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(ИнформацияОТипах, Имя);
			Значение    = ПрочитатьСвойство(ТипСвойства);
			
			Если ЭтоПараметрДляОбъекта Тогда
				
				// дополняем коллекцию параметров объекта
				ДобавитьПараметрПриНеобходимости(ПараметрыОбъекта, Имя, Значение);
				
			Иначе
                			
				Если Имя = "ПометкаУдаления" Тогда
					
					ПометкаУдаления = Значение;
					
					Если Объект.ПометкаУдаления <> ПометкаУдаления Тогда
						Объект.ПометкаУдаления = ПометкаУдаления;
						НужноЗаписатьОбъект = Истина;
					КонецЕсли;						
										
				Иначе
					
					Попытка
						
						Если Не НужноЗаписатьОбъект Тогда
							
							НужноЗаписатьОбъект = (Объект[Имя] <> Значение);
																			
						Конецесли;
						
						Объект[Имя] = Значение;
																		
					Исключение
						
						ЗП = ПолучитьСтруктуруЗаписиПротокола(26, ОписаниеОшибки());
						ЗП.ИмяПКО           = ИмяПравила;
						ЗП.Нпп              = Нпп;
						ЗП.ГНпп             = ГНпп;
						ЗП.Источник         = Источник;
						ЗП.Объект           = Объект;
						ЗП.ТипОбъекта       = ТипОбъекта;
						ЗП.Свойство         = Имя;
						ЗП.Значение         = Значение;
						ЗП.ТипЗначения      = ТипЗнч(Значение);
						СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(26, ЗП, Истина);
						
						Если Не ФлагРежимОтладки Тогда
							ВызватьИсключение СтрокаСообщенияОбОшибке;
						КонецЕсли;
						
					КонецПопытки;				
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Ссылка" Тогда
			
			// ссылка на элемент - сначала получаем по ссылке объект, а потом устанавливаем свойства
			СозданныйОбъект = Неопределено;
			НеСоздаватьОбъектЕслиНеНайден = Неопределено;
			ИзвестнаяСсылкаУникальногоИдентификатора = Неопределено;
			НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = Ложь;
												
			Ссылка = НайтиОбъектПоСсылке(ТипОбъекта, СвойстваПоиска, СвойстваПоискаНеЗамещать, ОбъектНайден, 
				СозданныйОбъект, НеСоздаватьОбъектЕслиНеНайден, Истина, СвойстваОбъектаМодифицированы, 
				НППГлобальнойСсылки, НппСсылки, ОбъектНайденПоКлючуВПриемнике, ИзвестнаяСсылкаУникальногоИдентификатора, Истина, ПараметрыОбъекта,
				НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике, ОбъектБылСозданВТекущейИнформационнойБазе);
				
			НужноЗаписатьОбъект = НужноЗаписатьОбъект ИЛИ СвойстваОбъектаМодифицированы;
			
			Если Ссылка = Неопределено
				И НеСоздаватьОбъектЕслиНеНайден = Истина Тогда
				
				одПропустить(ФайлОбмена, "Объект");
				Прервать;	
			
			ИначеЕсли ИмяТипаОбъекта = "Перечисление" Тогда
				
				Объект = Ссылка;	
			
			Иначе
				
				Объект = ПолучитьОбъектПоСсылкеИДопИнформации(СозданныйОбъект, Ссылка);
								
				Если Объект = Неопределено Тогда
					
					одПропустить(ФайлОбмена, "Объект");
					Прервать;	
					
				ИначеЕсли ОбъектНайден Тогда
					
					Если Объект.ПометкаУдаления Тогда // Объект создан по ссылке
						
						// пометку удаления у объекта ставим, если он загружен по ссылке
						ПометкаУдаления = Ложь;
						Объект.ПометкаУдаления = Ложь;
						НужноЗаписатьОбъект = Истина;
																										
					ИначеЕсли НеЗамещатьОбъект И (Не ЕстьОбработчикПриЗагрузке) Тогда
						
						// если не нужно замещать существующий объект - выходим из обработки
						ВыполнитьНеобходимыеДействияПриОтказеОтЗаписиОбъекта(ФайлОбмена, Объект, СвойстваПоиска, ОбъектНайденПоКлючуВПриемнике);
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Ссылка = Неопределено Тогда
					
					ДополнитьСтекНеЗаписанныхОбъектов(Нпп, ГНпп, СозданныйОбъект, ИзвестнаяСсылкаУникальногоИдентификатора, ТипОбъекта, 
						ИмяТипаОбъекта, Правило.ГенерироватьНовыйНомерИлиКодЕслиНеУказан, ПараметрыОбъекта);
					
				КонецЕсли;
							
			КонецЕсли; 
						
		    // Обработчик события ПриЗагрузкеОбъекта
			Если ЕстьОбработчикПриЗагрузке Тогда
				
				НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      			ОбъектМодифицирован = Истина;
				
				Попытка
					
					Если ФлагРежимОтладкиОбработчиков Тогда
						
						Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПриЗагрузке"));
						
					Иначе
						
						Выполнить(Правило.ПриЗагрузке);
						
					КонецЕсли;
					
					НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");						
					
				КонецПопытки;
					
								
				Если ОбъектНайден Тогда
					
					Если НеЗамещатьОбъект Тогда
					
						ВыполнитьНеобходимыеДействияПриОтказеОтЗаписиОбъекта(ФайлОбмена, Объект, СвойстваПоиска, ОбъектНайденПоКлючуВПриемнике);
						Прервать;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// нашли объект по ссылке - можно определить если для него зарегистрированные изменения
			
			
		ИначеЕсли ИмяУзла = "ТабличнаяЧасть"
			ИЛИ ИмяУзла = "НаборЗаписей" Тогда

			Если Объект = Неопределено Тогда
				
				ОбъектНайден = Ложь;

			    // Обработчик события ПриЗагрузкеОбъекта
				
				Если ЕстьОбработчикПриЗагрузке Тогда
					
					НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      				ОбъектМодифицирован = Истина;
					
					Попытка
						
						Если ФлагРежимОтладкиОбработчиков Тогда
							
							Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПриЗагрузке"));
							
						Иначе
							
							Выполнить(Правило.ПриЗагрузке);
							
						КонецЕсли;
						
						НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
						
					Исключение
						
						ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(20, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПриЗагрузкеОбъекта");							
						
					КонецПопытки;
															
				КонецЕсли;
				 
			КонецЕсли;
			

			Имя                = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			НеЗамещатьСвойство = одАтрибут(ФайлОбмена, одТипБулево, "НеЗамещать");
			НеОчищать          = одАтрибут(ФайлОбмена, одТипБулево, "НеОчищать");

			Если ОбъектНайден И НеЗамещатьСвойство Тогда
				
				одПропустить(ФайлОбмена, ИмяУзла);
				Продолжить;
				
			КонецЕсли;
			
			Если Объект = Неопределено Тогда
					
				СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект, Ложь, , НппСсылки, НППГлобальнойСсылки, Правило, ПараметрыОбъекта);
				НужноЗаписатьОбъект = Истина;
									
			КонецЕсли;
						
			Если ИмяУзла = "ТабличнаяЧасть" Тогда
				
				// загрузка элементов из табличной части
				ЗагрузитьТабличнуюЧасть(Объект, Имя, Не НеОчищать, ИнформацияОТипах, НужноЗаписатьОбъект, ПараметрыОбъекта, Правило);
				
			ИначеЕсли ИмяУзла = "НаборЗаписей" Тогда
				
				// загрузка движений
				ЗагрузитьДвижения(Объект, Имя, Не НеОчищать, ИнформацияОТипах, НужноЗаписатьОбъект, ПараметрыОбъекта, Правило);
				
			КонецЕсли;
			
		ИначеЕсли (ИмяУзла = "Объект") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Отказ = Ложь;
			
		    // Глобальный обработчик события ПослеЗагрузкиОбъекта
			Если ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта Тогда
				
				НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      			ОбъектМодифицирован = Истина;
				
				Попытка
					
					Если ФлагРежимОтладкиОбработчиков Тогда
						
						Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПослеЗагрузкиОбъекта"));
						
					Иначе
						
						Выполнить(Конвертация.ПослеЗагрузкиОбъекта);
						
					КонецЕсли;
					
					НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(54, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта (глобальный)");					
					
				КонецПопытки;
								
			КонецЕсли;

			
		    // Обработчик события ПослеЗагрузкиОбъекта
			Если ЕстьОбработчикПослеЗагрузки Тогда
				
				НужноБылоЗаписатьОбъект = НужноЗаписатьОбъект;
      			ОбъектМодифицирован = Истина;
				
				Попытка
					
					Если ФлагРежимОтладкиОбработчиков Тогда
						
						Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПослеЗагрузки"));
						
					Иначе
						
						Выполнить(Правило.ПослеЗагрузки);
						
					КонецЕсли;
					
					НужноЗаписатьОбъект = ОбъектМодифицирован ИЛИ НужноБылоЗаписатьОбъект;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеЗагрузкиОбработчикаПКО(21, ОписаниеОшибки(), ИмяПравила, Источник, 
							ТипОбъекта, Объект, "ПослеЗагрузкиОбъекта");				
											
				КонецПопытки;
												
			КонецЕсли;
			
			Если Отказ Тогда
				ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, Неопределено, ТипОбъекта);
				УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп);
				Возврат Неопределено;
			КонецЕсли;			
			
			Если ИмяТипаОбъекта = "Документ" Тогда
				
				Если РежимЗаписи = "Проведение" Тогда
					
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
					
				ИначеЕсли РежимЗаписи = "ОтменаПроведения" Тогда
					
					РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения; 
					
				Иначе
					
					// определим как записывать документ
					Если Объект.Проведен Тогда
						
						РежимЗаписи = РежимЗаписиДокумента.Проведение;
						
					Иначе
						
						// а документ вообще может проводиться или нет
						ДокументМожетПроводиться = (Объект.Метаданные().Проведение = мРазрешитьПроведениеДокумента);
						
						Если ДокументМожетПроводиться Тогда
							РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
						Иначе
							РежимЗаписи = РежимЗаписиДокумента.Запись;
						КонецЕсли;
						
					КонецЕсли;
										
				КонецЕсли;				
				
				РежимПроведения = ?(РежимПроведения = "Оперативный", РежимПроведенияДокумента.Оперативный, РежимПроведенияДокумента.Неоперативный);				

				// если хотим провести документ помеченный на удаление, то пометку удаления снимаем ...
				Если Объект.ПометкаУдаления
					И (РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
					
					Объект.ПометкаУдаления = Ложь;
					НужноЗаписатьОбъект = Истина;										
					ПометкаУдаления = Ложь;
									
				КонецЕсли;				
				
				Попытка
					
					// просто записываем документ. информацию о необходимости его провести или отменить проведение отдельно фиксируем
					
					ПровестиГенерациюКодаНомераПриНеобходимости(ГенерироватьНовыйНомерИлиКодЕслиНеУказан, Объект, 
						ИмяТипаОбъекта, НужноЗаписатьОбъект, Истина);
						
						
					Если НЕ ЗначениеЗаполнено(СвойстваПоиска["Номер"])
						И Объект.ЭтоНовый()	Тогда
						
						ПровестиУстановкуПрефиксаУОбъекта(Объект.Номер, Объект.Дата, ИмяТипаОбъекта);
						
					КонецЕсли;					
					
					Если НужноЗаписатьОбъект Тогда
						
						// записываем документ - проверяем наличие коллизий
						НаличиеКоллизии = ПроверитьНаличиеКоллизийИзмененийДляОбъекта(Объект, ТипОбъекта, ИмяКонстанты, ПриоритетОбъектаОбмена);
						
						Если НаличиеКоллизии
							И ПриоритетОбъектаОбмена <> Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
							
							НужноЗаписатьОбъект = Ложь;	
							
						КонецЕсли;
						
						Если НужноЗаписатьОбъект Тогда
						
							// документы которые просто нужно записать - так и записываем
							Если РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
								
								ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
								
							ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения
								ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
								
								// проведение убираем всегда...
								ОтменитьПроведениеОбъектаВИБ(Объект, ТипОбъекта);							
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ОбъектНайденПоКлючуВПриемнике Тогда
						ЗарегистрироватьСоответствиеОбъектовДляОбмена(Объект.Ссылка, СвойстваПоиска);
					КонецЕсли;
					
					Если НужноЗаписатьОбъект Тогда
					
						Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
							
							ЗаписатьИнформациюОбОтложенныхДвижениях(Объект.Ссылка, Объект.Дата);
																			
						Иначе
							
							УдалитьСсылкуНаДокументИзОтложенныхДвижений(Объект.Ссылка);	
													
						КонецЕсли;
						
					КонецЕсли;
						
				Исключение
					
					СтрокаОписанияОшибки = ОписаниеОшибки();
					
					Если НужноЗаписатьОбъект Тогда
						// не смогли выполнить необходимые действия для документа
						ЗаписатьДокументВБезопасномРежиме(Объект, ТипОбъекта);
					КонецЕсли;						
						
					ЗП                        = ПолучитьСтруктуруЗаписиПротокола(25, СтрокаОписанияОшибки);
					ЗП.ИмяПКО                 = ИмяПравила;
						
					Если Не ПустаяСтрока(Источник) Тогда
							
						ЗП.Источник           = Источник;
							
					КонецЕсли;
						
					ЗП.ТипОбъекта             = ТипОбъекта;
					ЗП.Объект                 = Строка(Объект);
					ЗаписатьВПротоколВыполнения(25, ЗП);
					
					// объект не смогли в нормальном режиме записать - надо об этом сообщить
					ВызватьИсключение "Ошибка при записи документа: " + Строка(Объект) + Символы.ПС + СтрокаОписанияОшибки;
						
				КонецПопытки;
				
				ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, Объект.Ссылка, ТипОбъекта);
				УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп);														
				
			ИначеЕсли ИмяТипаОбъекта <> "Перечисление" Тогда
				
				Если ИмяТипаОбъекта = "РегистрСведений" Тогда
				
					Периодический = СтруктураСвойств.Периодический;
					
					Если Периодический Тогда
						
						Если Не ЗначениеЗаполнено(Объект.Период) Тогда
							УстановитьТекущуюДатуРеквизиту(Объект.Период);
							НужноЗаписатьОбъект = Истина;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				ПровестиГенерациюКодаНомераПриНеобходимости(ГенерироватьНовыйНомерИлиКодЕслиНеУказан, Объект, 
						ИмяТипаОбъекта, НужноЗаписатьОбъект, Истина);				
						
				Если (ИмяТипаОбъекта =  "БизнесПроцесс"
						ИЛИ ИмяТипаОбъекта = "Задача")
					И (НЕ ЗначениеЗаполнено(СвойстваПоиска["Номер"]))
					И Объект.ЭтоНовый() Тогда
						
					ПровестиУстановкуПрефиксаУОбъекта(Объект.Номер, Объект.Дата, ИмяТипаОбъекта);
					
				КонецЕсли;
				
				Если НужноЗаписатьОбъект Тогда
					
					// если объект подлежит записи - проверим наличие коллизий
					НаличиеКоллизии = ПроверитьНаличиеКоллизийИзмененийДляОбъекта(Объект, ИмяТипаОбъекта, ИмяКонстанты, ПриоритетОбъектаОбмена);
					
					Если НаличиеКоллизии
						И ПриоритетОбъектаОбмена <> Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
						
						НужноЗаписатьОбъект = Ложь;	
						
					КонецЕсли;
					
					Если НужноЗаписатьОбъект Тогда
						ЗаписатьОбъектВИБ(Объект, ТипОбъекта);
					КонецЕсли;
										
				КонецЕсли;				
								
				Если НЕ (ИмяТипаОбъекта = "РегистрСведений"
					ИЛИ ИмяТипаОбъекта = "Константы") Тогда
					
					Если НЕ ОбъектНайденПоКлючуВПриемнике Тогда
						ЗарегистрироватьСоответствиеОбъектовДляОбмена(Объект.Ссылка, СвойстваПоиска);
					КонецЕсли;
					
					ДобавитьСсылкуВСписокЗагруженныхОбъектов(НППГлобальнойСсылки, НппСсылки, Объект.Ссылка, ТипОбъекта);
					
					УдалитьИзСтекаНеЗаписанныхОбъектов(Нпп, ГНпп);
					
				КонецЕсли;				
								
			КонецЕсли;
			
			ЭтоСсылочныйТипОбъекта = НЕ(ИмяТипаОбъекта = "РегистрСведений"
					ИЛИ ИмяТипаОбъекта = "Константы");					
			
			Если ЭтоСсылочныйТипОбъекта Тогда 	
					
				Если Объект.ПометкаУдаления <> ПометкаУдаления Тогда
					Объект.ПометкаУдаления = ПометкаУдаления;
					НужноЗаписатьОбъект = Истина;
				КонецЕсли;
				
			КонецЕсли;

			Прервать;
			
		ИначеЕсли ИмяУзла = "НаборЗаписейПоследовательности" Тогда
			
			одПропустить(ФайлОбмена);
			
		ИначеЕсли ИмяУзла = "Типы" Тогда

			Если Объект = Неопределено Тогда
				
				ОбъектНайден = Ложь;
				Ссылка  = СоздатьНовыйОбъект(ТипОбъекта, СвойстваПоиска, Объект, , , НппСсылки, НППГлобальнойСсылки, Правило, ПараметрыОбъекта);
								
			КонецЕсли; 

			ОписаниеТиповОбъекта = ЗагрузитьТипыОбъекта(ФайлОбмена);

			Если ОписаниеТиповОбъекта <> Неопределено Тогда
				
				Объект.ТипЗначения = ОписаниеТиповОбъекта;
				
			КонецЕсли; 
			
		Иначе
			
			ЗаписатьВПротоколВыполнения(9);
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Объект;

КонецФункции // ПрочитатьОбъект() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ДАННЫХ ПО ПРАВИЛАМ ОБМЕНА

Функция ПолучитьНаборДвиженийДокумента(СсылкаНаДокумент, ВидИсточника, ИмяРегистра)
	
	Если ВидИсточника = "НаборДвиженийРегистраНакопления" Тогда
		
		НаборДвиженийДокумента = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраСведений" Тогда
		
		НаборДвиженийДокумента = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраБухгалтерии" Тогда
		
		НаборДвиженийДокумента = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
		
	ИначеЕсли ВидИсточника = "НаборДвиженийРегистраРасчета" Тогда	
		
		НаборДвиженийДокумента = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	НаборДвиженийДокумента.Отбор.Регистратор.Установить(СсылкаНаДокумент.Ссылка);
	НаборДвиженийДокумента.Прочитать();
	
	Возврат НаборДвиженийДокумента;
	
КонецФункции

// Формирует узлы свойств объекта приемника в соответствии с указанной коллекцией правил конвертации свойств
//
// Параметры:
//  Источник		     - произвольный источник данных
//  Приемник		     - xml-узел объекта приемника
//  ВходящиеДанные	     - произвольные вспомогательные данные, передаваемые правилу
//                         для выполнения конвертации
//  ИсходящиеДанные      - произвольные вспомогательные данные, передаваемые правилам
//                         конвертации объектов свойств
//  ПКО				     - ссылка на правило конвертации объектов (родитель коллекции правил конвертации свойств)
//  ПКГС                 - ссылка на правило конвертации группы свойств
//  УзелКоллекцииСвойств - xml-узел коллекции свойств
// 
Процедура ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку)

	
	КоллекцияОбъектов = Неопределено;
	НеЗамещать        = ПКГС.НеЗамещать;
	НеОчищать         = Ложь;

	
	// Обработчик ПередОбработкойВыгрузки

	Если ПКГС.ЕстьОбработчикПередОбработкойВыгрузки Тогда
		
		Отказ = Ложь;
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКГС, "ПередОбработкойВыгрузки"));
				
			Иначе
				
				Выполнить(ПКГС.ПередОбработкойВыгрузки);
				
			КонецЕсли;
			
		Исключение
			
			ЗП = ПолучитьСтруктуруЗаписиПротокола(48, ОписаниеОшибки());
			ЗП.ПКО                    = ПКО.Имя + "  (" + ПКО.Наименование + ")";
			ЗП.ПКГС                   = ПКГС.Имя + "  (" + ПКГС.Наименование + ")";
			
			Попытка
				ЗП.Объект                 = Строка(Источник) + "  (" + ТипЗнч(Источник) + ")";
			Исключение
				ЗП.Объект                 = "(" + ТипЗнч(Источник) + ")";
			КонецПопытки;
	
			ЗП.Обработчик             = "ПередОбработкойВыгрузкиГруппыСвойств";
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(48, ЗП);
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки;
							
		Если Отказ Тогда // Отказ от обработки группы свойств
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	
    ВидПриемника = ПКГС.ВидПриемника;
	ВидИсточника = ПКГС.ВидИсточника;
	
	
    // Создание узла коллекции подчиненных объектов
	СтруктураУзлаСвойств = Неопределено;
	УзелКоллекцииОбъектов = Неопределено;
	
	Если ВидПриемника = "ТабличнаяЧасть" Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, ИСТИНА, ПКГС.Приемник, "ТабличнаяЧасть");
		
		Если НеЗамещать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеЗамещать", "true");
						
		КонецЕсли;
		
		Если НеОчищать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеОчищать", "true");
						
		КонецЕсли;
		
	ИначеЕсли ВидПриемника = "ПодчиненныйСправочник" Тогда
				
		
	ИначеЕсли ВидПриемника = "НаборЗаписейПоследовательности" Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, ИСТИНА, ПКГС.Приемник, "НаборЗаписей");
		
	ИначеЕсли Найти(ВидПриемника, "НаборДвижений") > 0 Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, ИСТИНА, ПКГС.Приемник, "НаборЗаписей");
		
		Если НеЗамещать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеЗамещать", "true");
						
		КонецЕсли;
		
		Если НеОчищать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелКоллекцииОбъектов, "НеОчищать", "true");
						
		КонецЕсли;
		
	Иначе  // это простая группировка
		
		ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС.ПравилаГруппы, 
			УзелКоллекцииСвойств, , , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ ВыгрузитьТолькоСсылку, Ложь);
		
		Если ПКГС.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКГС, "ПослеОбработкиВыгрузки"));
					
				Иначе
					
					Выполнить(ПКГС.ПослеОбработкиВыгрузки);
					
				КонецЕсли;
				
			Исключение
				
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(49);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;

	
	// Получение коллекции подчиненных объектов
	
	Если КоллекцияОбъектов <> Неопределено Тогда
		
		// Инициализировали коллекцию в обработчике ПередОбработкой
		
	ИначеЕсли ПКГС.ПолучитьИзВходящихДанных Тогда
		
		Попытка
			
			КоллекцияОбъектов = ВходящиеДанные[ПКГС.Приемник];
			
		Исключение
			
        	СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(66);
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
            		
			Возврат;
			
		КонецПопытки;
		
	ИначеЕсли ВидИсточника = "ТабличнаяЧасть" Тогда
		
		КоллекцияОбъектов = Источник[ПКГС.Источник];
		
	ИначеЕсли ВидИсточника = "ПодчиненныйСправочник" Тогда
		
	ИначеЕсли Найти(ВидИсточника, "НаборДвижений") > 0 Тогда
		
		КоллекцияОбъектов = ПолучитьНаборДвиженийДокумента(Источник, ВидИсточника, ПКГС.Источник);
				
	ИначеЕсли ПустаяСтрока(ПКГС.Источник) Тогда
		
		КоллекцияОбъектов = Источник[ПКГС.Приемник];
		
	КонецЕсли;

	
	Для каждого ОбъектКоллекции Из КоллекцияОбъектов Цикл

		
		// Обработчик ПередВыгрузкой
		Если ПКГС.ЕстьОбработчикПередВыгрузкой Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКГС, "ПередВыгрузкой"));
					
				Иначе
					
					Выполнить(ПКГС.ПередВыгрузкой);
					
				КонецЕсли;
				
			Исключение
				
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(50);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки подчиненного объекта
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли; 

		
		// Обработчик ПриВыгрузке
		
		Если ПКГС.НуженУзелXMLПриВыгрузке Тогда
			УзелОбъектаКоллекции = СоздатьУзел("Запись");
		Иначе
			УзелКоллекцииОбъектов.ЗаписатьНачалоЭлемента("Запись");
			УзелОбъектаКоллекции = УзелКоллекцииОбъектов;
		КонецЕсли;
		
		СтандартнаяОбработка	= Истина;
		
		Если ПКГС.ЕстьОбработчикПриВыгрузке Тогда
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКГС, "ПриВыгрузке"));
					
				Иначе
					
					Выполнить(ПКГС.ПриВыгрузке);
					
				КонецЕсли;
				
			Исключение
				
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(51);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки;
			
		КонецЕсли;


		//	Выгрузка свойств объекта коллекции
		Если СтандартнаяОбработка Тогда
			
			Если ПКГС.ПравилаГруппы.Количество() > 0 Тогда
				
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКГС.ПравилаГруппы, 
					УзелОбъектаКоллекции, ОбъектКоллекции, , ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ ВыгрузитьТолькоСсылку, Ложь);
				
			КонецЕсли;
			
		КонецЕсли;

		
		// Обработчик ПослеВыгрузки
		Если ПКГС.ЕстьОбработчикПослеВыгрузки Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКГС, "ПослеВыгрузки"));
					
				Иначе
					
					Выполнить(ПКГС.ПослеВыгрузки);
					
				КонецЕсли;
				
			Исключение
								
				СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(52);
				Если Не ФлагРежимОтладки Тогда
					ВызватьИсключение СтрокаСообщенияОбОшибке;
				КонецЕсли;
				
				Прервать;
				
			КонецПопытки; 
			
			Если Отказ Тогда	//	Отказ от выгрузки подчиненного объекта
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПКГС.НуженУзелXMLПриВыгрузке Тогда
			ДобавитьПодчиненный(УзелКоллекцииОбъектов, УзелОбъектаКоллекции);
		Иначе
			УзелКоллекцииОбъектов.ЗаписатьКонецЭлемента();
		КонецЕсли;
		
	КонецЦикла;

	
    // Обработчик ПослеОбработкиВыгрузки

	Если ПКГС.ЕстьОбработчикПослеОбработкиВыгрузки Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКГС, "ПослеОбработкиВыгрузки"));
				
			Иначе
				
				Выполнить(ПКГС.ПослеОбработкиВыгрузки);
				
			КонецЕсли;
			
		Исключение
			
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(49);
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки; 
		
		Если Отказ Тогда	//	Отказ от записи коллекции подчиненных объектов
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелКоллекцииОбъектов);
		
КонецПроцедуры

Процедура ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник, ВыборкаДанных = Неопределено)
	
	Если Значение <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПКС.ПолучитьИзВходящихДанных Тогда
			
		ОбъектДляПолученияДанных = ВходящиеДанные;
		
		Если Не ПустаяСтрока(ПКС.Приемник) Тогда
		
			ИмяСвойства = ПКС.Приемник;
			
		Иначе
			
			ИмяСвойства = ПКС.ИмяПараметраДляПередачи;
			
		КонецЕсли;
		
		КодОшибки = ?(ОбъектКоллекции <> Неопределено, 67, 68);
	
	ИначеЕсли ОбъектКоллекции <> Неопределено Тогда
		
		ОбъектДляПолученияДанных = ОбъектКоллекции;
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
			
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 16;
						
		Иначе
			
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = 17;
            							
		КонецЕсли;
		
	ИначеЕсли ВыборкаДанных <> Неопределено Тогда
		
		ОбъектДляПолученияДанных = ВыборкаДанных;	
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
		
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 13;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
						
	Иначе
		
		ОбъектДляПолученияДанных = Источник;
		
		Если Не ПустаяСтрока(ПКС.Источник) Тогда
		
			ИмяСвойства = ПКС.Источник;
			КодОшибки = 13;
		
		Иначе
			
			ИмяСвойства = ПКС.Приемник;
			КодОшибки = 14;
		
		КонецЕсли;
			
	КонецЕсли;
	
	
	Попытка
					
		Значение = ОбъектДляПолученияДанных[ИмяСвойства];
					
	Исключение
		
		Если КодОшибки <> 14 Тогда
			ЗаписатьИнформациюОбОшибкеОбработчикиПКС(КодОшибки, ОписаниеОшибки(), ПКО, ПКС, Источник, "");
		КонецЕсли;
																	
	КонецПопытки;					
			
КонецПроцедуры

Процедура ВыгрузитьТипСвойстваЭлемента(УзелСвойства, ТипСвойства)
	
	УстановитьАтрибут(УзелСвойства, "Тип", ТипСвойства);	
	
КонецПроцедуры

Процедура _ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКС, 
	УзелКоллекцииСвойств = Неопределено, ОбъектКоллекции = Неопределено, Знач ВыгрузитьТолькоСсылку = Ложь)
	
	// Инициализация значения
	Значение = Неопределено;
	ИмяПКО = "";
	ИмяПКОВидСубконто = "";
	
	// Обработчик ПередВыгрузкой
	Если ПКС.ЕстьОбработчикПередВыгрузкой Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКС, "ПередВыгрузкой"));
				
			Иначе
				
				Выполнить(ПКС.ПередВыгрузкой);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПКС(55, ОписаниеОшибки(), ПКО, ПКС, Источник, 
				"ПередВыгрузкойСвойства", Значение);				
							
		КонецПопытки;
					
		Если Отказ Тогда // Отказ от выгрузки
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник);
	
	Если ПКС.ПриводитьКДлине <> 0 Тогда
				
		ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС);
						
	КонецЕсли;
		
	Для каждого КлючИЗначение из Значение Цикл
		
		ВидСубконто = КлючИЗначение.Ключ;
		Субконто = КлючИЗначение.Значение;
		
		// Обработчик ПриВыгрузке
		Если ПКС.ЕстьОбработчикПриВыгрузке Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКС, "ПриВыгрузке"));
					
				Иначе
					
					Выполнить(ПКС.ПриВыгрузке);
					
				КонецЕсли;
				
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(56, ОписаниеОшибки(), ПКО, ПКС, Источник, 
					"ПриВыгрузкеСвойства", Значение);				
				
			КонецПопытки;
						
			Если Отказ Тогда // Отказ от выгрузки субконто
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Субконто = Неопределено
			ИЛИ НайтиПравило(Субконто) = Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		УзелСубконто = СоздатьУзел(ПКС.Приемник);
			
		// Ключ
		УзелСвойства = СоздатьУзел("Свойство");
			
		Если ИмяПКОВидСубконто = "" Тогда
				
			ПКОКлюч = НайтиПравило(ВидСубконто);
				
		Иначе
				
			ПКОКлюч = НайтиПравило(, ИмяПКОВидСубконто);
				
		КонецЕсли;
			
		УстановитьАтрибут(УзелСвойства, "Имя", "Ключ");
		ВыгрузитьТипСвойстваЭлемента(УзелСвойства, ПКОКлюч.Приемник);
		
		УзелСсылки = ВыгрузитьПоПравилу(ВидСубконто,, ИсходящиеДанные,, ИмяПКОВидСубконто,, ИСТИНА, ПКОКлюч, , , , , Ложь);
			
		Если УзелСсылки <> Неопределено Тогда
				
			ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
				
		КонецЕсли;
			
		ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
		
		
		
		// Значение
		УзелСвойства = СоздатьУзел("Свойство");
			
		ПКОЗначение = НайтиПравило(Субконто);
		
		ТипПриемника = ПКОЗначение.Приемник;
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(Субконто, ЭтоNULL);
		
		Если Пусто Тогда
			
			Если ЭтоNULL 
				Или Значение = Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ТипПриемника) Тогда
				
				ТипПриемника = ОпределитьТипДанныхДляПриемника(Субконто);
								
			КонецЕсли;			
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
			
			Если Не ПустаяСтрока(ТипПриемника) Тогда
				УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
			КонецЕсли;
							
			// если тип множественный, то возможно это пустая ссылка и выгрузить ее нужно именно с указанием типа
			одЗаписатьЭлемент(УзелСвойства, "Пусто");
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
		Иначе
			
			ЭтоПравилоСГлобальнойВыгрузкой = Ложь;
			УзелСсылки = ВыгрузитьПоПравилу(Субконто,, ИсходящиеДанные, , ИмяПКО, , ИСТИНА, ПКОЗначение, , , , , Ложь, ЭтоПравилоСГлобальнойВыгрузкой);
			
			УстановитьАтрибут(УзелСвойства, "Имя", "Значение");
			ВыгрузитьТипСвойстваЭлемента(УзелСвойства, ТипПриемника);
						
				
			ТипУзлаСсылки = ТипЗнч(УзелСсылки);
				
			Если УзелСсылки = Неопределено Тогда
					
				Продолжить;
					
			КонецЕсли;
							
			ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства, ЭтоПравилоСГлобальнойВыгрузкой);						
			
			ДобавитьПодчиненный(УзелСубконто, УзелСвойства);
			
		КонецЕсли;	
		
		
			
		// Обработчик ПослеВыгрузки
		Если ПКС.ЕстьОбработчикПослеВыгрузки Тогда
				
			Отказ = Ложь;
				
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКС, "ПослеВыгрузки"));
					
				Иначе
					
					Выполнить(ПКС.ПослеВыгрузки);
					
				КонецЕсли;
					
			Исключение
					
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(57, ОписаниеОшибки(), ПКО, ПКС, Источник, 
					"ПослеВыгрузкиСвойства", Значение);					
					
			КонецПопытки;
										
			Если Отказ Тогда // Отказ от выгрузки
					
				Продолжить;
					
			КонецЕсли;
							
		КонецЕсли;
		
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСубконто);
		
	КонецЦикла;
	
КонецПроцедуры // _ВыгрузитьСубконто()

Процедура ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства, ЭтоПравилоСГлобальнойВыгрузкой)
	
	Если ТипУзлаСсылки = одТипСтрока Тогда
				
		Если Найти(УзелСсылки, "<Ссылка") > 0 Тогда
					
			УзелСвойства.ЗаписатьБезОбработки(УзелСсылки);
					
		Иначе
			
			одЗаписатьЭлемент(УзелСвойства, "Значение", УзелСсылки);
					
		КонецЕсли;
				
	ИначеЕсли ТипУзлаСсылки = одТипЧисло Тогда
		
		Если ЭтоПравилоСГлобальнойВыгрузкой Тогда
		
			одЗаписатьЭлемент(УзелСвойства, "ГНпп", УзелСсылки);
			
		Иначе     		
			
			одЗаписатьЭлемент(УзелСвойства, "Нпп", УзелСсылки);
			
		КонецЕсли;
				
	Иначе
				
		ДобавитьПодчиненный(УзелСвойства, УзелСсылки);
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОпределитьВозможностьУстановкиЗначения(Значение, ТипЗначения, ТипПриемника, СвойствоУстановлено, НужноУказатьТип)
	
	СвойствоУстановлено = Истина;
		
	Если ТипЗначения = одТипСтрока Тогда
				
		Если ТипПриемника = "Строка"  Тогда
		ИначеЕсли ТипПриемника = "Число"  Тогда
					
			Значение = Число(Значение);
					
		ИначеЕсли ТипПриемника = "Булево"  Тогда
					
			Значение = Булево(Значение);
					
		ИначеЕсли ТипПриемника = "Дата"  Тогда
					
			Значение = Дата(Значение);
					
		ИначеЕсли ТипПриемника = "ХранилищеЗначения"  Тогда
					
			Значение = Новый ХранилищеЗначения(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Строка";
			НужноУказатьТип = Истина;
			
		КонецЕсли;
								
	ИначеЕсли ТипЗначения = одТипЧисло Тогда
				
		Если ТипПриемника = "Число"
			ИЛИ ТипПриемника = "Строка" Тогда
		ИначеЕсли ТипПриемника = "Булево"  Тогда
					
			Значение = Булево(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Число";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;
								
	ИначеЕсли ТипЗначения = одТипДата Тогда
				
		Если ТипПриемника = "Дата"  Тогда
		ИначеЕсли ТипПриемника = "Строка"  Тогда
					
			Значение = Лев(Строка(Значение), 10);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Дата";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = одТипБулево Тогда
				
		Если ТипПриемника = "Булево"  Тогда
		ИначеЕсли ТипПриемника = "Число"  Тогда
					
			Значение = Число(Значение);
					
		ИначеЕсли ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "Булево";
			НужноУказатьТип = Истина;
			
		Иначе
			
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = одТипХранилищеЗначения Тогда
				
		Если ПустаяСтрока(ТипПриемника) Тогда
					
			ТипПриемника = "ХранилищеЗначения";
			НужноУказатьТип = Истина;
					
		ИначеЕсли ТипПриемника <> "ХранилищеЗначения"  Тогда
					
			СвойствоУстановлено = Ложь;
					
		КонецЕсли;				
						
	ИначеЕсли ТипЗначения = одТипВидДвиженияНакопления Тогда
				
		Значение = Строка(Значение);		
		
	Иначе	
		
		СвойствоУстановлено = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры

Функция НайтиСтрокуВРегистреСоответствийОбъектов(СсылкаСобственная, ТипПриемника, ОпределитьТолькоНаличиеВыгрузкиСсылки = Ложь)
	
	Если ОпределитьТолькоНаличиеВыгрузкиСсылки Тогда
		
		Запрос = мЗапросСтрокРегистраОпределенияНаличияВыгрузки;
		
	Иначе		
		
		Если мСоответствиеНаличияТиповПриемника.Получить(ТипПриемника) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Запрос = мЗапросСтрокРегистраСоответствияОбъектов;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СвояСсылка", СсылкаСобственная);
	Запрос.УстановитьПараметр("ТипПриемникаСтрокой", ТипПриемника);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		ТаблицаДанных = РезультатЗапроса.Выгрузить();
	    Возврат ТаблицаДанных;
	КонецЕсли;
	
КонецФункции


Функция ОпределитьТипДанныхДляПриемника(Значение)
	
	ТипПриемника = одТипЗначенияСтрокой(Значение);
	
	// есть ли хоть какое пко с типом приемника ТипПриемника
	// если правила нат - то "", если есть , то то что нашли оставляем
	СтрокаТаблицы = ТаблицаПравилКонвертации.Найти(ТипПриемника, "Приемник");
	
	Если СтрокаТаблицы = Неопределено Тогда
		ТипПриемника = "";
	КонецЕсли;
	
	Возврат ТипПриемника;
	
КонецФункции

Процедура ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС)
	
	Значение = ПривестиНомерКДлине(Строка(Значение), ПКС.ПриводитьКДлине);
		
КонецПроцедуры

Функция ПолучитьЗапросИлиТаблицуДляВыборкиСвойств(СсылкаНаИсточник, ПКО, КоллекцияПКС, ПринудительноСоздатьЗапросДляПоискаНаКлиенте = Ложь)
	
	Если Не ПринудительноСоздатьЗапросДляПоискаНаКлиенте Тогда
		Запрос = мСоответствиеЗапросовПоПКО.Получить(ПКО.Имя);
	Иначе
		Запрос = Неопределено;
	КонецЕсли;
	
	Если Запрос = "" Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли Запрос = Неопределено Тогда
		
		СтруктураСвойств = НайтиСтруктуруСвойствПоПараметрам(ПКО, СсылкаНаИсточник);
		
		Если СтруктураСвойств = Неопределено тогда
			
			мСоответствиеЗапросовПоПКО.Вставить(ПКО.Имя, "");
			Возврат Неопределено;
			
		КонецЕсли;
		
		// для быстрого поиска все кэшируем 
		СтрокаПоискаВыгрузкиСсылки = СтруктураСвойств.СтрокаПоискаВыгрузкиСсылки;
		
		НужноИспользоватьБыстрыйПоиск = ПКО.ИспользоватьБыстрыйПоискПриЗагрузке ИЛИ ПринудительноСоздатьЗапросДляПоискаНаКлиенте;
		
		Если Не НужноИспользоватьБыстрыйПоиск Тогда
			
			// попробуем определить общее количество объектов в информационной базе для данного типа
			ЗапросДляОпределенияКоличестваОбъектов = СтрокаПоискаВыгрузкиСсылки;
			Запрос = Новый Запрос();
			Запрос.Текст = СтрЗаменить(СтрокаПоискаВыгрузкиСсылки, "#ПоляПоиска#", " Количество(*) КАК Количество ");
			ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
			
			Если ТаблицаРезультата.Количество() > 0 ТОгда
				
				ОбщееКоличествоОбъектовДанногоТипа = ТаблицаРезультата[0].Количество;
				Если ОбщееКоличествоОбъектовДанногоТипа <> Null Тогда
					
					ПКО.КоличествоЭлементовВИБ = ОбщееКоличествоОбъектовДанногоТипа;
					ПКО.МаленькоеКоличествоОбъектов = (ОбщееКоличествоОбъектовДанногоТипа <= ЧислоХранимыхВыгруженныхОбъектовПоТипам * 1.5);
					НужноИспользоватьБыстрыйПоиск = ПКО.МаленькоеКоличествоОбъектов; 	
					
				Иначе
					
					ПКО.КоличествоЭлементовВИБ = 0;
					ПКО.МаленькоеКоличествоОбъектов = Истина;
					НужноИспользоватьБыстрыйПоиск = Истина;
						
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не НужноИспользоватьБыстрыйПоиск ТОгда
			СтрокаПоискаВыгрузкиСсылки = СтруктураСвойств.СтрокаПоискаВыгрузкиСсылки + " ГДЕ Ссылка = &Ссылка";
		КонецЕсли;
		
		ПоляПоиска = "";
		
		Для Каждого ПолеПоиска Из КоллекцияПКС Цикл
			
			Если Пустаястрока(ПолеПоиска.Источник) Тогда
				
				мСоответствиеЗапросовПоПКО.Вставить(ПКО.Имя, "");
				Возврат Неопределено;
				
			КонецЕсли;
			
			Если ПолеПоиска.Источник = "{УникальныйИдентификатор}" Тогда
				Продолжить;
			КонецЕсли;

			
			ПоляПоиска = ПоляПоиска + ПолеПоиска.Источник + ", ";
			
		КонецЦикла;
		
		ПоляПоиска = Лев(ПоляПоиска, СтрДлина(ПоляПоиска) - 2);
		
		Если Пустаястрока(ПоляПоиска) Тогда
				
			мСоответствиеЗапросовПоПКО.Вставить(ПКО.Имя, "");
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если НужноИспользоватьБыстрыйПоиск ТОгда
			
			ПоляПоиска = "Ссылка, " + ПоляПоиска;
			
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = СтрЗаменить(СтрокаПоискаВыгрузкиСсылки, "#ПоляПоиска#", ПоляПоиска);
		
		Если НужноИспользоватьБыстрыйПоиск Тогда
			
			ТаблицаПоиска = Запрос.Выполнить().Выгрузить();
			ТаблицаПоиска.Индексы.Добавить("Ссылка");
			
			мСоответствиеЗапросовПоПКО.Вставить(ПКО.Имя, ТаблицаПоиска);
			Возврат ТаблицаПоиска;
			
		Иначе
			
			мСоответствиеЗапросовПоПКО.Вставить(ПКО.Имя, Запрос);
			Возврат Запрос;		
			
		КонецЕсли;
		
	Иначе
		
		Возврат Запрос;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВыборкуСвойств(СсылкаНаИсточник, ПКО, КоллекцияПКС)
	
	ЗапросДляВыборки = ПолучитьЗапросИлиТаблицуДляВыборкиСвойств(СсылкаНаИсточник, ПКО, КоллекцияПКС);
	
	Если ЗапросДляВыборки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПКО.КоличествоОбращенийДляВыгрузкиСсылки = ПКО.КоличествоОбращенийДляВыгрузкиСсылки + 1;
	
	Попытка
		
		Если ПКО.ИспользоватьБыстрыйПоискПриЗагрузке
			ИЛИ ПКО.МаленькоеКоличествоОбъектов Тогда
			
			Выборка = ЗапросДляВыборки.Найти(СсылкаНаИсточник, "Ссылка");
			Возврат Выборка;
			
		Иначе
			
			Если (ПКО.КоличествоОбращенийДляВыгрузкиСсылки % 100 = 0) 
				И ПКО.КоличествоОбращенийДляВыгрузкиСсылки * 4 > ПКО.КоличествоЭлементовВИБ Тогда
				
				// слишком много обращений для выгрузки ссылок - нужно все закачивать на клиента и локально все обрабатывать
				ЗапросДляВыборки = ПолучитьЗапросИлиТаблицуДляВыборкиСвойств(СсылкаНаИсточник, ПКО, КоллекцияПКС, Истина);
				ПКО.МаленькоеКоличествоОбъектов = Истина;
				
				Выборка = ЗапросДляВыборки.Найти(СсылкаНаИсточник, "Ссылка");
				Возврат Выборка;
	
			КонецЕсли;
			
			ЗапросДляВыборки.УстановитьПараметр("Ссылка", СсылкаНаИсточник);
			
			Выборка = ЗапросДляВыборки.Выполнить().Выбрать();
			Если НЕ Выборка.Следующий() Тогда
				Возврат Неопределено;
			Иначе
				Возврат Выборка;
			Конецесли;
			
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Процедура ВыполнитьЗаписьСтруктурыВXML(СтруктураДанных, УзелКоллекцииСвойств, ЭтоОбычноеСвойство = Истина)
	
	УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента(?(ЭтоОбычноеСвойство, "Свойство", "ЗначениеПараметра"));
	
	Для Каждого ЭлементКоллекции Из СтруктураДанных Цикл
		
		Если ЭлементКоллекции.Ключ = "Выражение"
			ИЛИ ЭлементКоллекции.Ключ = "Значение"
			ИЛИ ЭлементКоллекции.Ключ = "Нпп"
			ИЛИ ЭлементКоллекции.Ключ = "ГНпп" Тогда
			
			одЗаписатьЭлемент(УзелКоллекцииСвойств, ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			
		ИначеЕсли ЭлементКоллекции.Ключ = "Ссылка" Тогда
			
			УзелКоллекцииСвойств.ЗаписатьБезОбработки(ЭлементКоллекции.Значение);
			
		Иначе
			
			УстановитьАтрибут(УзелКоллекцииСвойств, ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();		
	
КонецПроцедуры

Процедура СоздатьСложнуюИнформациюДляЗаписиВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяПриемника, ИмяПараметра)
	
	Если ПустаяСтрока(ИмяПараметра) Тогда
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяПриемника, "Свойство");
		
	Иначе
		
		СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяПараметра, "ЗначениеПараметра");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектыДляЗаписиДанныхВXML(СтруктураДанных, УзелСвойства, НуженУзелXML, ИмяУзла, НаименованиеУзлаXML = "Свойство")
	
	Если НуженУзелXML Тогда
		
		УзелСвойства = СоздатьУзел(НаименованиеУзлаXML);
		УстановитьАтрибут(УзелСвойства, "Имя", ИмяУзла);
		
	Иначе
		
		СтруктураДанных = Новый Структура("Имя", ИмяУзла);	
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ИмяАтрибута, ЗначениеАтрибута)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		СтруктураУзлаСвойств.Вставить(ИмяАтрибута, ЗначениеАтрибута);
	Иначе
		УстановитьАтрибут(УзелСвойства, ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ИмяАтрибута, ЗначениеАтрибута)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		СтруктураУзлаСвойств.Вставить(ИмяАтрибута, ЗначениеАтрибута);
	Иначе
		одЗаписатьЭлемент(УзелСвойства, ИмяАтрибута, ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПроизвольныеДанныеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ИмяАтрибута, ЗначениеАтрибута)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		СтруктураУзлаСвойств.Вставить(ИмяАтрибута, ЗначениеАтрибута);
	Иначе
		УзелСвойства.ЗаписатьБезОбработки(ЗначениеАтрибута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство = Истина)
	
	Если СтруктураУзлаСвойств <> Неопределено Тогда
		ВыполнитьЗаписьСтруктурыВXML(СтруктураУзлаСвойств, УзелКоллекцииСвойств, ЭтоОбычноеСвойство);
	Иначе
		ДобавитьПодчиненный(УзелКоллекцииСвойств, УзелСвойства);
	КонецЕсли;
	
КонецПроцедуры


// Формирует узлы свойств объекта приемника в соответствии с указанной коллекцией правил конвертации свойств
//
// Параметры:
//  Источник		     - произвольный источник данных
//  Приемник		     - xml-узел объекта приемника
//  ВходящиеДанные	     - произвольные вспомогательные данные, передаваемые правилу
//                         для выполнения конвертации
//  ИсходящиеДанные      - произвольные вспомогательные данные, передаваемые правилам
//                         конвертации объектов свойств
//  ПКО				     - ссылка на правило конвертации объектов (родитель коллекции правил конвертации свойств)
//  КоллекцияПКС         - коллекция правил конвертации свойств
//  УзелКоллекцииСвойств - xml-узел коллекции свойств
//  ОбъектКоллекции      - если указан, то выполняется выгрузка свойств объекта коллекции, иначе Источника
//  ИмяПредопределенногоЭлемента - если указан, то в свойствах пишется имя предопределенного элемента
// 
Процедура ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, КоллекцияПКС, УзелКоллекцииСвойств = Неопределено, 
	ОбъектКоллекции = Неопределено, ИмяПредопределенногоЭлемента = Неопределено, Знач ВыгрузитьТолькоСсылку = Ложь, 
	Знач ЭтоВыгрузкаСсылки = Ложь, Знач ВыгружаетсяОбъект = Ложь, КлючПоискаСсылки = "", 
	НеИспользоватьПравилаСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные = Ложь, ЗначениеСсылкиВДругойИБ = "")
	
	Перем КлючИЗначение, ВидСубконто, Субконто, ИмяПКОВидСубконто, УзелСубконто; //Пустышки, для корректного запуска обработчиков
	
	Если УзелКоллекцииСвойств = Неопределено Тогда
		
		УзелКоллекцииСвойств = Приемник;
		
	КонецЕсли;
	
	ВыборкаСвойств = Неопределено;
	
	Если ЭтоВыгрузкаСсылки Тогда
		
		НайденаСсылкаВБазеПриемнике = Ложь;
		НужноСтроитьВыборку = Истина;
		
		Попытка
			
			СсылкаНаИсточник = ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект); 
			
			Если СсылкаНаИсточник <> Неопределено
				И НЕ СсылкаНаИсточник.Пустая() Тогда
			
				ТипПриемника = ПКО.Приемник;
				
				Если НЕ ЗначениеЗаполнено(ЗначениеСсылкиВДругойИБ) Тогда
					
					ТаблицаПоискаСсылки = НайтиСтрокуВРегистреСоответствийОбъектов(СсылкаНаИсточник, ТипПриемника); 
				
					Если ТаблицаПоискаСсылки <> Неопределено Тогда
						
						ЗначениеСсылкиВДругойИБ = ТаблицаПоискаСсылки[0].СсылкаВДругойИБ;
																									
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ЗначениеСсылкиВДругойИБ) Тогда
					
					УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
					УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{КлючПоискаВИБПриемнике}");
					одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", ЗначениеСсылкиВДругойИБ);
					УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
																		
				КонецЕсли;
				
				УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
				УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{КлючПоискаВИБИсточнике}");
				
				Если ПустаяСтрока(КлючПоискаСсылки)
					ИЛИ Найти(КлючПоискаСсылки, "{") <> 1 Тогда
					
					СтруктураСвойств = НайтиСтруктуруСвойствПоПараметрам(ПКО, СсылкаНаИсточник);
					КлючПоискаСсылки = ОпределитьВнутреннеПредставлениеДляПоиска(СсылкаНаИсточник, СтруктураСвойств);					
					
				КонецЕсли;
				
				одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", КлючПоискаСсылки);
				УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
				
			КонецЕсли;
			
		Исключение
			
			НужноСтроитьВыборку = Ложь;
			
		КонецПопытки;
		
		УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
		УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{ИмяТипаВИБИсточнике}");
		одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", ПКО.ТипИсточника);
		УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
		
		// если тип источника не совпадает с типом приемника то пишем оба свойства
		Если ПКО.ТипИсточника <> ПКО.Приемник Тогда
			
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{ИмяТипаВИБПриемнике}");
			одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", ПКО.Приемник);
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
		
		КонецЕсли;
				
		// Выгружаем имя предопределенного если оно указано
		Если ИмяПредопределенногоЭлемента <> Неопределено Тогда
			
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{ИмяПредопределенногоЭлемента}");
			одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", ИмяПредопределенногоЭлемента);
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
			
		КонецЕсли;
		
		Если НайденаСсылкаВБазеПриемнике
			И ВыгрузитьТолькоСсылку Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ВыгрузитьТолькоСсылку
			И НЕ ВыгружаетсяОбъект
			И НужноСтроитьВыборку Тогда
			
			ВыборкаСвойств = ПолучитьВыборкуСвойств(СсылкаНаИсточник, ПКО, КоллекцияПКС);	
			
		КонецЕсли;		
		
	КонецЕсли;
	
	
	Для каждого ПКС Из КоллекцияПКС Цикл
		
		Если ПКС.УпрощеннаяВыгрузкаСвойства Тогда
			
			
			 //	Создаем узел свойства
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", ПКС.Приемник);
			
			Если ПКС.НеЗамещать Тогда
				
				УстановитьАтрибут(УзелКоллекцииСвойств, "НеЗамещать",	"true");
				
			КонецЕсли;
			
			Если ПКС.ПоискПоДатеНаРавенство  Тогда
				
				УстановитьАтрибут(УзелКоллекцииСвойств, "ПоискПоДатеНаРавенство", "true");
				
			КонецЕсли;
			
			Значение = Неопределено;
			ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник, ВыборкаСвойств);
			
			Если ПКС.ПриводитьКДлине <> 0 Тогда
				
				ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС);
								
			КонецЕсли;
			
			ЭтоNULL = Ложь;
			Пусто = одПустое(Значение, ЭтоNULL);
						
			Если Пусто Тогда
				
				УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
				Продолжить;
				
			КонецЕсли;
			
			одЗаписатьЭлемент(УзелКоллекцииСвойств, 	"Значение", Значение);
			
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
			Продолжить;					
					
		ИначеЕсли ПКС.ВидПриемника = "ВидыСубконтоСчета" Тогда
			
			_ВыгрузитьСубконто(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, 
				ПКС, УзелКоллекцииСвойств, ОбъектКоллекции, ВыгрузитьТолькоСсылку);
			
			Продолжить;
			
		ИначеЕсли ПКС.Имя = "{УникальныйИдентификатор}" Тогда
			
			Попытка
				
				УникальныйИдентификатор = СсылкаНаИсточник.УникальныйИдентификатор();
				
			Исключение
				
				Продолжить;					
								
			КонецПопытки;
			
			УзелКоллекцииСвойств.ЗаписатьНачалоЭлемента("Свойство");
			УстановитьАтрибут(УзелКоллекцииСвойств, "Имя", "{УникальныйИдентификатор}");
			одЗаписатьЭлемент(УзелКоллекцииСвойств, "Значение", УникальныйИдентификатор);
			УзелКоллекцииСвойств.ЗаписатьКонецЭлемента();
			
			Продолжить;
			
		ИначеЕсли ПКС.ЭтоГруппа Тогда
			
			ВыгрузитьГруппуСвойств(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКС, УзелКоллекцииСвойств, ВыгрузитьТолькоСсылку);
			Продолжить;
			
		КонецЕсли;

		
		//	Инициализируем значение, которое будем конвертировать
		Значение 	 = Неопределено;
		ИмяПКО		 = ПКС.ПравилоКонвертации;
		НеЗамещать   = ПКС.НеЗамещать;
		
		Пусто		 = Ложь;
		Выражение	 = Неопределено;
		ТипПриемника = ПКС.ТипПриемника;

		ЭтоNULL      = Ложь;

		
		// Обработчик ПередВыгрузкой
        Если ПКС.ЕстьОбработчикПередВыгрузкой Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКС, "ПередВыгрузкой"));
					
				Иначе
					
					Выполнить(ПКС.ПередВыгрузкой);
				
				КонецЕсли;
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(55, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПередВыгрузкойСвойства", Значение);
														
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;

        		
        //	Создаем узел свойства
		СтруктураУзлаСвойств = Неопределено;
		УзелСвойства = Неопределено;
		
		СоздатьСложнуюИнформациюДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, ПКС.НуженУзелXMLПриВыгрузке, ПКС.Приемник, ПКС.ИмяПараметраДляПередачи);
							
		Если НеЗамещать Тогда
			
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "НеЗамещать", "true");			
						
		КонецЕсли;
		
		Если ПКС.ПоискПоДатеНаРавенство  Тогда
			
			УстановитьАтрибут(УзелКоллекцииСвойств, "ПоискПоДатеНаРавенство", "true");
			
		КонецЕсли;
		
		//	Возможно правило конвертации уже определено
		Если Не ПустаяСтрока(ИмяПКО) Тогда
			
			ПКОСвойств = Правила[ИмяПКО];
			
		Иначе
			
			ПКОСвойств = Неопределено;
			
		КонецЕсли;


		//	Попытка определить тип свойства приемника
		Если ПустаяСтрока(ТипПриемника)
			И ПКОСвойств <> Неопределено Тогда
			
			ТипПриемника = ПКОСвойств.Приемник;
			ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
						
		КонецЕсли;
		
		ЭтоОбычноеСвойство = ПустаяСтрока(ПКС.ИмяПараметраДляПередачи);
		
		//	Определяем конвертируемое значение
		Если Выражение <> Неопределено Тогда
			
			ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Выражение", Выражение);
			
			ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
			Продолжить;
			
		ИначеЕсли Пусто Тогда
			
			ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
			Продолжить;
			
		Иначе
			
			ПолучитьЗначениеСвойства(Значение, ОбъектКоллекции, ПКО, ПКС, ВходящиеДанные, Источник, ВыборкаСвойств);
			
			Если ПКС.ПриводитьКДлине <> 0 Тогда
				
				ВыполнитьПриведениеЗначенияКДлине(Значение, ПКС);
								
			КонецЕсли;
						
		КонецЕсли;

		СтароеЗначениеДоОбработчикаПриВыгрузке = Значение;
		Пусто = одПустое(Значение, ЭтоNULL);
		
		// Обработчик ПриВыгрузке
		Если ПКС.ЕстьОбработчикПриВыгрузке Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКС, "ПриВыгрузке"));
					
				Иначе
					
					Выполнить(ПКС.ПриВыгрузке);
					
				КонецЕсли;
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(56, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПриВыгрузкеСвойства", Значение);
														
			КонецПопытки;
			
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;


		// Инициализируем еще раз переменную Пусто, может быть Значение было изменено 
		// в обработчике "При выгрузке"
		Если СтароеЗначениеДоОбработчикаПриВыгрузке <> Значение Тогда
			
			Пусто = одПустое(Значение, ЭтоNULL);
			
		КонецЕсли;

		Если Пусто Тогда
			
			Если ЭтоNULL Тогда
				
				Значение = Неопределено;
				
			КонецЕсли;
			
			Если Значение <> Неопределено 
				И ПустаяСтрока(ТипПриемника) Тогда
				
				ТипПриемника = ОпределитьТипДанныхДляПриемника(Значение);
				
				Если Не ПустаяСтрока(ТипПриемника) Тогда
					
					ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
					
				КонецЕсли;
								
			КонецЕсли;			
			
			ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
			Продолжить;
			
		КонецЕсли;
      		
		УзелСсылки = Неопределено;
		
		Если ПКОСвойств = Неопределено
			И ПустаяСтрока(ИмяПКО) Тогда
			
			СвойствоУстановлено = Ложь;
			ТипЗначения = ТипЗнч(Значение);
			НужноУказатьТип = Ложь;
			ОпределитьВозможностьУстановкиЗначения(Значение, ТипЗначения, ТипПриемника, СвойствоУстановлено, НужноУказатьТип);
						
			Если СвойствоУстановлено Тогда
				
				// если нужно тип указываем
				Если НужноУказатьТип Тогда
					
					ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
					
				КонецЕсли;
				
				ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Значение", Значение);
								              				
			Иначе
				
				МенеджерЗначения = Менеджеры[ТипЗначения];
				
				Если МенеджерЗначения = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПКОСвойств = МенеджерЗначения.ПКО;
				
				Если ПКОСвойств = Неопределено Тогда
					Продолжить;
				КонецЕсли;
					
				ИмяПКО = ПКОСвойств.Имя;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если (ПКОСвойств <> Неопределено) 
			Или (Не ПустаяСтрока(ИмяПКО)) Тогда
			
			ПравилоСГлобальнойВыгрузкой = Ложь;
			УзелСсылки = ВыгрузитьПоПравилу(Значение, , ИсходящиеДанные, , ИмяПКО, , ИСТИНА, ПКОСвойств, , , , , Ложь, 
				ПравилоСГлобальнойВыгрузкой, НеИспользоватьПравилаСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные);
	
			Если УзелСсылки = Неопределено Тогда
						
				Продолжить;
						
			КонецЕсли;
			
			Если ПустаяСтрока(ТипПриемника) Тогда
						
				ТипПриемника  = ПКОСвойств.Приемник;
				ДобавитьАтрибутДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Тип", ТипПриемника);
														
			КонецЕсли;			
				
			ТипУзлаСсылки = ТипЗнч(УзелСсылки);
						
			Если ТипУзлаСсылки = одТипСтрока Тогда
				
				Если Найти(УзелСсылки, "<Ссылка") > 0 Тогда
								
					ДобавитьПроизвольныеДанныеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Ссылка", УзелСсылки);
											
				Иначе
					
					ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Значение", УзелСсылки);
																	
				КонецЕсли;
						
			ИначеЕсли ТипУзлаСсылки = одТипЧисло Тогда
				
				Если ПравилоСГлобальнойВыгрузкой Тогда
					ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "ГНпп", УзелСсылки);
				Иначе
					ДобавитьЗначениеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Нпп", УзелСсылки);
				КонецЕсли;
														
			Иначе
				
				УзелСсылки.ЗаписатьКонецЭлемента();
				ИнформацияДляЗаписиВФайл = УзелСсылки.Закрыть();
				
				ДобавитьПроизвольныеДанныеДляЗаписиВXML(СтруктураУзлаСвойств, УзелСвойства, "Ссылка", ИнформацияДляЗаписиВФайл);
										
			КонецЕсли;
													
		КонецЕсли;


		
		// Обработчик ПослеВыгрузки

		Если ПКС.ЕстьОбработчикПослеВыгрузки Тогда
			
			Отказ = Ложь;
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКС, "ПослеВыгрузки"));
					
				Иначе
					
					Выполнить(ПКС.ПослеВыгрузки);
					
				КонецЕсли;
				
			Исключение
				
				ЗаписатьИнформациюОбОшибкеОбработчикиПКС(57, ОписаниеОшибки(), ПКО, ПКС, Источник, 
						"ПослеВыгрузкиСвойства", Значение);					
				
			КонецПопытки;
									
			Если Отказ Тогда	//	Отказ от выгрузки свойства
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПроизвестиЗаписьДанныхВГоловнойУзел(УзелКоллекцииСвойств, СтруктураУзлаСвойств, УзелСвойства, ЭтоОбычноеСвойство);
		
	КонецЦикла;		//	по ПКС

КонецПроцедуры

Процедура ОпределитьПКОПоПараметрам(ПКО, Источник, ИмяПКО)
	
	// Поиск ПКО
	Если ПКО = Неопределено Тогда
		
        ПКО = НайтиПравило(Источник, ИмяПКО);
		
	ИначеЕсли (Не ПустаяСтрока(ИмяПКО))
		И ПКО.Имя <> ИмяПКО Тогда
		
		ПКО = НайтиПравило(Источник, ИмяПКО);
				
	КонецЕсли;	
	
КонецПроцедуры

Функция НайтиСтруктуруСвойствПоПараметрам(ПКО, Источник)
	
	СтруктураСвойств = Менеджеры[ПКО.Источник];
	Если СтруктураСвойств = Неопределено Тогда
		СтруктураСвойств = Менеджеры[ТипЗнч(Источник)];
	КонецЕсли;	
	
	Возврат СтруктураСвойств;
	
КонецФункции

Функция ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект)
	
	Если ВыгружаетсяОбъект Тогда
		Возврат Источник.Ссылка;
	Иначе
		Возврат Источник;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьВнутреннеПредставлениеДляПоиска(Источник, СтруктураСвойств)
	
	Если СтруктураСвойств.ИмяТипа = "Перечисление" Тогда
		Возврат Источник;
	Иначе
		Возврат ЗначениеВСтрокуВнутр(Источник);
	КонецЕсли
	
КонецФункции

Процедура ОбрезатьТаблицуВыгруженныхОбъектов(Таблица)
	
	Оставить = Цел(Таблица.Количество() / 10);
	
	// таблицу урезаем по полам
	// оставляем только верхние 20 процентов по производительности
	// и 20 процентов последние к которым было обращение
	Таблица.Колонки.Добавить("НаУдаление", одОписаниеТипа("Булево"));
	Таблица.ЗаполнитьЗначения(Истина, "НаУдаление");
	
	КоличествоОбращенийКТаблице = Таблица.Итог("КоличествоОбращений"); 
	
	Если КоличествоОбращенийКТаблице > 0 Тогда
	
		Таблица.Сортировать("КоличествоОбращений Убыв, НППСсылки Убыв");
		Для НомерСтроки = 0 по 3 * Оставить - 1 Цикл
			
			Таблица[НомерСтроки].НаУдаление = Ложь;	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Таблица.Сортировать("НомерПоследнегоОбращения Убыв");
	Для НомерСтроки = 0 по Оставить - 1 Цикл
		
		Таблица[НомерСтроки].НаУдаление = Ложь;	
		
	КонецЦикла;
	
	Таблица.Сортировать("НаУдаление Убыв");
	Пока Таблица[0].НаУдаление Цикл
		
		Таблица.Удалить(0);	
		
	КонецЦикла;
	
	Таблица.Колонки.Удалить("НаУдаление");
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбОставшихсяОбъектахВКЭШе(ИмяПриемника, ВыгруженныеОбъекты)
	
	// выгружаем только список номеров, которые находятся в кэше
	Приемник = СоздатьУзел("КЕШСсылок");
	
	УстановитьАтрибут(Приемник, "ИмяПриемника", ИмяПриемника);
	ИтоговаяСтрокаРезультата = "";
	
	Для Каждого СтрокаВыгруженного Из ВыгруженныеОбъекты Цикл
		
		ИтоговаяСтрокаРезультата = ИтоговаяСтрокаРезультата + ", " + СтрЗаменить(Строка(СтрокаВыгруженного.НППСсылки), Символы.НПП, ""); 		
		
	КонецЦикла;
	
	ИтоговаяСтрокаРезультата = Прав(ИтоговаяСтрокаРезультата, СтрДлина(ИтоговаяСтрокаРезультата) - 2);
	
	одЗаписатьЭлемент(Приемник, "СохраненныеСсылки", ИтоговаяСтрокаРезультата);
	
	Приемник.ЗаписатьКонецЭлемента();
	Приемник = Приемник.Закрыть();
	
	ЗаписатьВФайл(Приемник);	
	
КонецПроцедуры

Процедура ПровестиОбновлениеДанныхВВыгружаемыхДанных()
	
	Если мСоответствиеДанныхДляОбновленияВыгруженныхЭлементов.Количество() > 0 Тогда
		
		Для Каждого ЭлементСоответствия Из мСоответствиеДанныхДляОбновленияВыгруженныхЭлементов Цикл
			
			ОбрезатьТаблицуВыгруженныхОбъектов(ЭлементСоответствия.Значение.Выгруженные);	
						
			ЗаписатьИнформациюОбОставшихсяОбъектахВКЭШе(ЭлементСоответствия.Ключ, ЭлементСоответствия.Значение.Выгруженные);
			
		КонецЦикла;
		
		мСоответствиеДанныхДляОбновленияВыгруженныхЭлементов.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПровестиУстановкуПризнаковВыгруженныхОбъектовВФайл()
	
	мНППЗаписанногоВФайл = мСчетчикНПП;		
	
КонецПроцедуры

Процедура ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, Узел)
	
	Если ЗначениеЗаполнено(ПриоритетОбъектовОбмена)
		И ПриоритетОбъектовОбмена <> Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаВыше Тогда
		
		Если ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаНиже Тогда
			УстановитьАтрибут(Узел, "ПриоритетОбъектаОбмена", "Ниже");
		ИначеЕсли ПриоритетОбъектовОбмена = Перечисления.ПриоритетОбъектовОбмена.ПриоритетПоступившегоПриОбменеОбъектаСовпадает Тогда
			УстановитьАтрибут(Узел, "ПриоритетОбъектаОбмена", "Совпадает");					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО						 - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "",
						   УзелСсылки				= Неопределено,
						   ТолькоПолучитьУзелСсылки	= Ложь,
						   ПКО						= Неопределено,
						   ВыгружатьСсылкиУПодчиненныхОбъектов = Истина,
						   ВыгрузкаСтрокиНабораЗаписейРегистра = Ложь,
						   УзелПредка				= Неопределено,
						   ИмяКонстантыДляВыгрузки  = "",
						   ЭтоВыгружаетсяОбъект = Неопределено,
						   ЭтоПравилоСГлобальнойВыгрузкойОбъектов = Ложь,
						   НеИспользоватьПравилоСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные = Ложь) Экспорт
						   
	#Если Клиент тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	ОпределитьПКОПоПараметрам(ПКО, Источник, ИмяПКО);
			
	Если ПКО = Неопределено Тогда
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(45);
		
		ЗП.Объект = Источник;
		Попытка
			ЗП.ТипОбъекта = ТипЗнч(Источник);
		Исключение
		КонецПопытки;
		
		ЗаписатьВПротоколВыполнения(45, ЗП, Истина); // не найдено ПКО
		Возврат Неопределено;
		
	КонецЕсли;
	
	мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу + 1;
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Попытка
			ИсточникВСтроку = Строка(Источник);
		Исключение
			ИсточникВСтроку = " ";
		КонецПопытки;
		
		ПрОбъекта = ИсточникВСтроку + "  (" + ТипЗнч(Источник) + ")";
		
		СтрокаНазванияПКО = " ПКО: " + СокрЛП(ИмяПКО) + "  (" + СокрЛП(ПКО.Наименование) + ")";
		
		Если ТолькоПолучитьУзелСсылки Тогда
			СтрокаПользователю = "Конвертация ссылки на объект: ";
		Иначе
			СтрокаПользователю = "Конвертация объекта: ";
		КонецЕсли;
		
		ЗаписатьВПротоколВыполнения(СтрокаПользователю + ПрОбъекта + СтрокаНазванияПКО, , Ложь, мТекущийУровеньВложенностиВыгрузитьПоПравилу + 1, 7);
		
	КонецЕсли;
	
	ЭтоПравилоСГлобальнойВыгрузкойОбъектов = (НеИспользоватьПравилоСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные = Ложь) 
		И ПКО.ИспользоватьБыстрыйПоискПриЗагрузке;
	
    ЗапоминатьВыгруженные       = (НеИспользоватьПравилоСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные = Ложь) И ПКО.ЗапоминатьВыгруженные;
	ВыгруженныеОбъекты          = ПКО.Выгруженные;
	ВсеОбъектыВыгружены         = ПКО.ВсеОбъектыВыгружены;
	НеЗамещатьОбъектПриЗагрузке = ПКО.НеЗамещать;
	НеСоздаватьЕслиНеНайден     = ПКО.НеСоздаватьЕслиНеНайден;
	ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD     = ПКО.ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD;
	НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике = ПКО.НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике;
	ПриоритетОбъектовОбмена = ПКО.ПриоритетОбъектовОбмена;
	
	ПрефиксАвтонумерации		= "";
	РежимЗаписи     			= "";
	РежимПроведения 			= "";

   	ИмяТипа          = "";
	ВыгружатьСвойстваОбъекта = Истина;
	
	СтруктураСвойств = НайтиСтруктуруСвойствПоПараметрам(ПКО, Источник);
			
	Если СтруктураСвойств <> Неопределено Тогда
		ИмяТипа = СтруктураСвойств.ИмяТипа;
	КонецЕсли;

	КлючВыгружаемыхДанных = ИмяПКО;
	
	ЭтоНеСсылочныйТип = ИмяТипа = "РегистрСведений" 
		ИЛИ ИмяТипа = "Константы";
	// КлючВыгружаемыхДанных
	Если ЭтоНеСсылочныйТип 
		ИЛИ ПустаяСтрока(ИмяТипа) Тогда
		
		ЗапоминатьВыгруженные = Ложь;
		
	КонецЕсли;
	
	СсылкаНаИсточник = Неопределено;
	ВыгружаетсяОбъект = ЭтоВыгружаетсяОбъект;
	
	Если (Источник <> Неопределено) 
		И НЕ ЭтоНеСсылочныйТип Тогда
		
		Если ВыгружаетсяОбъект = Неопределено Тогда
			// если не указано что выгружается, то считаем что выгружается объект
			ВыгружаетсяОбъект = Истина;	
		КонецЕсли;
		
		СсылкаНаИсточник = ОпределитьСсылкуПоОбъектуИлиСсылке(Источник, ВыгружаетсяОбъект);
		Если ЗапоминатьВыгруженные Тогда
			КлючВыгружаемыхДанных = ОпределитьВнутреннеПредставлениеДляПоиска(СсылкаНаИсточник, СтруктураСвойств);
		КонецЕсли;
		
	Иначе
		
		ВыгружаетсяОбъект = Ложь;	
			
	КонецЕсли;
	
	
	// Переменная для хранения имени предопределенного элемента
	ИмяПредопределенногоЭлемента = Неопределено;

	// Глобальный обработчик ПередКонвертациейОбъекта
    Отказ = Ложь;	
	Если ЕстьГлобальныйОбработчикПередКонвертациейОбъекта Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередКонвертациейОбъекта"));
				
			Иначе
				
				Выполнить(Конвертация.ПередКонвертациейОбъекта);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(64, ОписаниеОшибки(), ПКО, Источник, "ПередКонвертациейОбъекта (глобальный)");
		КонецПопытки;
				
		Если Отказ Тогда	//	Отказ от дальнейшей обработки правила
			мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат Приемник;
		КонецЕсли;
		
	КонецЕсли;


	// Обработчик ПередВыгрузкой
    Если ПКО.ЕстьОбработчикПередВыгрузкой Тогда
				
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКО, "ПередВыгрузкой"));
				
			Иначе
				
				Выполнить(ПКО.ПередВыгрузкой);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(41, ОписаниеОшибки(), ПКО, Источник, "ПередВыгрузкойОбъекта");				
		КонецПопытки;
				
		Если Отказ Тогда	//	Отказ от дальнейшей обработки правила
			мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат Приемник;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаВСтекеВыгрузки = Неопределено;
	
	НужноОбновитьЛокальныйКЭШВыгруженныхОбъектов = Ложь;
	ЗначениеСсылкиВДругойИБ = "";

    // Возможно такие данные уже выгружались
    Если Не ВсеОбъектыВыгружены Тогда
		
		Нпп = 0;
		
		Если ЗапоминатьВыгруженные Тогда
			
			СтрокаВыгруженныхОбъектов = ВыгруженныеОбъекты.Найти(КлючВыгружаемыхДанных, "Ключ");
			
			Если СтрокаВыгруженныхОбъектов <> Неопределено Тогда
				
				СтрокаВыгруженныхОбъектов.КоличествоОбращений = СтрокаВыгруженныхОбъектов.КоличествоОбращений + 1;
				СтрокаВыгруженныхОбъектов.НомерПоследнегоОбращения = мСчетчикНПП;
				
				Если ТолькоПолучитьУзелСсылки Тогда
					
					мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
					Если Найти(СтрокаВыгруженныхОбъектов.УзелСсылки, "<Ссылка") > 0
						И мНППЗаписанногоВФайл >= СтрокаВыгруженныхОбъектов.НППСсылки Тогда
						Возврат СтрокаВыгруженныхОбъектов.НППСсылки;
					Иначе
						Возврат СтрокаВыгруженныхОбъектов.УзелСсылки;
					КонецЕсли;
					
				КонецЕсли;
				
				НомерВыгруженнойСсылки = СтрокаВыгруженныхОбъектов.НППСсылки;
				
				Если НЕ СтрокаВыгруженныхОбъектов.ВыгруженаТолькоСсылка Тогда
					
					мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
					Если Найти(СтрокаВыгруженныхОбъектов.УзелСсылки, "<Ссылка") > 0
						И мНППЗаписанногоВФайл >= СтрокаВыгруженныхОбъектов.НППСсылки Тогда
						Возврат СтрокаВыгруженныхОбъектов.НППСсылки;
					Иначе
						Возврат СтрокаВыгруженныхОбъектов.УзелСсылки;
					КонецЕсли;
					
				Иначе
					
					СтрокаВСтекеВыгрузки = мСтекВызововВыгрузкиДанных.Найти(КлючВыгружаемыхДанных, "Ссылка");
				
					Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
						мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
						Возврат Неопределено;
					КонецЕсли;
					
					СтрокаВСтекеВыгрузки = мСтекВызововВыгрузкиДанных.Добавить();
					СтрокаВСтекеВыгрузки.Ссылка = КлючВыгружаемыхДанных;
					
					Нпп = НомерВыгруженнойСсылки;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПКО.ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки Тогда
		
			// 1. Если объект выгружался, то выгружаем как есть
			// 2. Если объект не выгружался, то не выгружаем
			// 3. Если объект выгружается по ссылке, то выгружаем его целиком и все на что он ссылается выгружаем по их правилам
			
			Если СсылкаНаИсточник <> Неопределено
				И НЕ СсылкаНаИсточник.Пустая() Тогда
				
				ТипПриемника = ПКО.Приемник;
				
				ТаблицаПоискаСсылки = НайтиСтрокуВРегистреСоответствийОбъектов(СсылкаНаИсточник, ТипПриемника, Истина);
			
				Если мТекущийУровеньВложенностиВыгрузитьПоПравилу = 1 Тогда
					
					// выгружается основной объект
					// анализируем выгружался или нет
					
					Если ТаблицаПоискаСсылки = Неопределено Тогда
						мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
						Возврат Неопределено;
					КонецЕсли;
					
					ЗначениеСсылкиВДругойИБ = ТаблицаПоискаСсылки[0].СсылкаВДругойИБ;						
										
					// проверки пройдены - выгружаем как есть
					
				Иначе	
					
					// выгружается по ссылке
					// кроме полей поиска нужно еще сам объект выгрузить
					// и зарегистрировать что в источник объект был выгружен
					
					// отмечаем что объект был выгружен
					Если ТаблицаПоискаСсылки = Неопределено Тогда
						
						//вносим запись в регистр соответствий, но не регистрируем эти данные соответствия нигде
						НаборЗаписей = мМенеджерРегистраСоответствийОбъектов.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.УзелОбмена.Установить(УзелДляОбмена);
						НаборЗаписей.Отбор.СсылкаВДругойИБ.Установить("");
						НаборЗаписей.Отбор.СобственнаяСсылка.Установить(СсылкаНаИсточник);
						
						СтрокаНабора = НаборЗаписей.Добавить();
						СтрокаНабора.УзелОбмена = УзелДляОбмена;
						СтрокаНабора.СсылкаВДругойИБ = "";
						СтрокаНабора.СобственнаяСсылка = СсылкаНаИсточник;
						СтрокаНабора.ИмяТипаПриемника = ТипПриемника;
						
						// информация служебного плана
						НаборЗаписей.Записать();
												
					КонецЕсли;
					
					Если ТолькоПолучитьУзелСсылки Тогда
					
						мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
						
						УзелОбъекта = ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные,
								   ИмяПКО, УзелСсылки, ЛОЖЬ, ПКО, ВыгружатьСсылкиУПодчиненныхОбъектов,
								   ВыгрузкаСтрокиНабораЗаписейРегистра, УзелПредка,  ИмяКонстантыДляВыгрузки,
								   ВыгружаетсяОбъект, ЭтоПравилоСГлобальнойВыгрузкойОбъектов,
								   НеИспользоватьПравилоСГлобальнойВыгрузкойИНеЗапоминатьВыгруженные);
								
						Если ЗапоминатьВыгруженные Тогда
							
							СтрокаВыгруженныхОбъектов = ВыгруженныеОбъекты.Найти(КлючВыгружаемыхДанных, "Ключ");
							
							Если СтрокаВыгруженныхОбъектов <> Неопределено Тогда
								
								СтрокаВыгруженныхОбъектов.КоличествоОбращений = СтрокаВыгруженныхОбъектов.КоличествоОбращений + 1;
								СтрокаВыгруженныхОбъектов.НомерПоследнегоОбращения = мСчетчикНПП;
								
								Если Найти(СтрокаВыгруженныхОбъектов.УзелСсылки, "<Ссылка") > 0
									И мНППЗаписанногоВФайл >= СтрокаВыгруженныхОбъектов.НППСсылки Тогда
									
									Возврат СтрокаВыгруженныхОбъектов.НППСсылки;
									
								Иначе
									
									Возврат СтрокаВыгруженныхОбъектов.УзелСсылки;
									
								КонецЕсли;
									
								
							КонецЕсли;
							
						КонецЕсли;
						
						Возврат УзелОбъекта;
						
					КонецЕсли;
					
			   КонецЕсли;
						   
			КонецЕсли;
			
		КонецЕсли;
		
		Если Нпп = 0 Тогда
			
			мСчетчикНПП = мСчетчикНПП + 1;
			Нпп         = мСчетчикНПП;
			
			
			// Это позволит избежать циклических ссылок
			Если ЗапоминатьВыгруженные Тогда
				
				Если СтрокаВыгруженныхОбъектов = Неопределено Тогда
					
					Если НЕ ЭтоПравилоСГлобальнойВыгрузкойОбъектов
						И НЕ НужноОбновитьЛокальныйКЭШВыгруженныхОбъектов
						И ВыгруженныеОбъекты.Количество() > ЧислоХранимыхВыгруженныхОбъектовПоТипам Тогда
						
						НужноОбновитьЛокальныйКЭШВыгруженныхОбъектов = Истина;
						мСоответствиеДанныхДляОбновленияВыгруженныхЭлементов.Вставить(ПКО.Приемник, ПКО);
												
					КонецЕсли;
					
					СтрокаВыгруженныхОбъектов = ВыгруженныеОбъекты.Добавить();
					
				КонецЕсли;
				
				СтрокаВыгруженныхОбъектов.Ключ = КлючВыгружаемыхДанных;
				СтрокаВыгруженныхОбъектов.УзелСсылки = НПП;
				СтрокаВыгруженныхОбъектов.НППСсылки = НПП;
				СтрокаВыгруженныхОбъектов.НомерПоследнегоОбращения = НПП;
												
				Если ТолькоПолучитьУзелСсылки Тогда
					
					СтрокаВыгруженныхОбъектов.ВыгруженаТолькоСсылка = Истина;					
					
				Иначе
					
					СтрокаВСтекеВыгрузки = мСтекВызововВыгрузкиДанных.Добавить();
					СтрокаВСтекеВыгрузки.Ссылка = КлючВыгружаемыхДанных;
					
				КонецЕсли;
				
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЕсли;

	СоответствиеЗначений = ПКО.Значения;
	КоличествоЭлементовСоответствияЗначений = СоответствиеЗначений.Количество();
	
	// Обработка  соответствий предопределенных элементов
	Если ВерсияПлатформыПриемника = "8.0" ИЛИ ВерсияПлатформыПриемника = "УП" Тогда
		
		Если ИмяПредопределенногоЭлемента = Неопределено Тогда
			
			Если СтруктураСвойств <> Неопределено
				И КоличествоЭлементовСоответствияЗначений > 0
				И СтруктураСвойств.ВозможенПоискПоПредопределенным Тогда
			
				Попытка
					ИмяПредопределенногоИсточник = СтруктураСвойств.Менеджер.ПолучитьИмяПредопределенного(СсылкаНаИсточник)
				Исключение
					ИмяПредопределенногоИсточник = "";
				КонецПопытки;
				
			Иначе
				
				ИмяПредопределенногоИсточник = "";
				
			Конецесли;
			
			Если НЕ ПустаяСтрока(ИмяПредопределенногоИсточник)
				И КоличествоЭлементовСоответствияЗначений > 0 Тогда
				
				ИмяПредопределенногоЭлемента = СоответствиеЗначений[СсылкаНаИсточник];
								
			Иначе
				ИмяПредопределенногоЭлемента = Неопределено;				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если ИмяПредопределенногоЭлемента <> Неопределено Тогда
			КоличествоЭлементовСоответствияЗначений = 0;
		КонецЕсли;			
		
	Иначе	
		ИмяПредопределенногоЭлемента = Неопределено;	
	КонецЕсли;
	
	НеНужноВыгружатьПоСоответствиюЗначений = (КоличествоЭлементовСоответствияЗначений = 0);
	
	Если Не НеНужноВыгружатьПоСоответствиюЗначений Тогда
		
		// если нет объекта в соответствии значений - выгружаем его штатным образом
		УзелСсылки = СоответствиеЗначений[СсылкаНаИсточник];
		Если УзелСсылки = Неопределено
			И ПКО.СвойстваПоиска.Количество() > 0 Тогда
			
			// возможно это конвертация из перечисления в перечисление и мы просто не нашли по
			//ПКЗ нужное свойство - тогда просто выгружаем пустую ссылку и все
			Если СтруктураСвойств.ИмяТипа = "Перечисление"
				И Найти(ПКО.Приемник, "ПеречислениеСсылка.") > 0 Тогда
				
				УзелСсылки = "";	
				
			Иначе
						
				НеНужноВыгружатьПоСоответствиюЗначений = Истина;	
				
			КонецЕсли;
			
	    КонецЕсли;
		
	КонецЕсли;
	
	НЕВыгружатьПодчиненныеОбъекты = ТолькоПолучитьУзелСсылки ИЛИ НЕ ВыгружатьСсылкиУПодчиненныхОбъектов;
	
	НужноЗапоминатьОбъект = ЗапоминатьВыгруженные И (Не ВсеОбъектыВыгружены);

	Если НеНужноВыгружатьПоСоответствиюЗначений Тогда
		
		Если ПКО.СвойстваПоиска.Количество() > 0 
			ИЛИ ИмяПредопределенногоЭлемента <> Неопределено Тогда			
			
			//	Формируем узел ссылки
			УзелСсылки = СоздатьУзел("Ссылка");
						
			Если НужноЗапоминатьОбъект Тогда
				
				Если ЭтоПравилоСГлобальнойВыгрузкойОбъектов Тогда
					УстановитьАтрибут(УзелСсылки, "ГНпп", Нпп);
				Иначе
					УстановитьАтрибут(УзелСсылки, "Нпп", Нпп);
				КонецЕсли;
				
			КонецЕсли;
			
			Если НеСоздаватьЕслиНеНайден Тогда
				УстановитьАтрибут(УзелСсылки, "НеСоздаватьЕслиНеНайден", НеСоздаватьЕслиНеНайден);				
			КонецЕсли;
			
			ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, УзелСсылки);
								
			Если ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD Тогда
				УстановитьАтрибут(УзелСсылки, "ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD", ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD);				
			КонецЕсли;
			
			Если НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике Тогда
				УстановитьАтрибут(УзелСсылки, "НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике", НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике);				
			КонецЕсли;
			
			ВыгрузитьТолькоСсылку = ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ НЕВыгружатьПодчиненныеОбъекты;
			
			Если ВыгружатьСвойстваОбъекта = Истина Тогда
			
				ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, ПКО.СвойстваПоиска, 
					УзелСсылки, , ИмяПредопределенногоЭлемента, ВыгрузитьТолькоСсылку, 
					Истина, ВыгружаетсяОбъект, КлючВыгружаемыхДанных, , ЗначениеСсылкиВДругойИБ);
					
			КонецЕсли;
			
			УзелСсылки.ЗаписатьКонецЭлемента();
			УзелСсылки = УзелСсылки.Закрыть();
			
			Если НужноЗапоминатьОбъект Тогда
				
				СтрокаВыгруженныхОбъектов.УзелСсылки = УзелСсылки;															
								
			КонецЕсли;			
			
		Иначе
			УзелСсылки = Нпп;
		КонецЕсли;
		
	Иначе
		
		// Поиск в соответствии значений по ПКЗ
		Если УзелСсылки = Неопределено Тогда
			// по соответвию значений не нашли - пробуем найти по свойствам поиска
			ЗаписатьВПротоколВыполнения(71);
			
			Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
				мСтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
			КонецЕсли;
			
			мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат Неопределено;
		КонецЕсли;
		
		Если ЗапоминатьВыгруженные Тогда
			СтрокаВыгруженныхОбъектов.УзелСсылки = УзелСсылки;			
		КонецЕсли;
		
		Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
			мСтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
		КонецЕсли;
		
		мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
		Возврат УзелСсылки;
		
	КонецЕсли;

		
	Если ТолькоПолучитьУзелСсылки
		Или ВсеОбъектыВыгружены Тогда
		
		Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
			мСтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
		КонецЕсли;
		
		мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
		Возврат УзелСсылки;
		
	КонецЕсли; 

    Если Приемник = Неопределено Тогда
		
		Приемник = СоздатьУзел("Объект");
		
		Если НЕ ВыгрузкаСтрокиНабораЗаписейРегистра Тогда
			
			Если ЭтоПравилоСГлобальнойВыгрузкойОбъектов Тогда
				УстановитьАтрибут(Приемник, "ГНпп", Нпп);
			Иначе
				УстановитьАтрибут(Приемник, "Нпп",	Нпп);
			КонецЕсли;
			
			УстановитьАтрибут(Приемник, "Тип", 			ПКО.Приемник);
			УстановитьАтрибут(Приемник, "ИмяПравила",	ПКО.Имя);
			
			ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, Приемник);
			
			Если НеЗамещатьОбъектПриЗагрузке Тогда
				УстановитьАтрибут(Приемник, "НеЗамещать",	"true");
			КонецЕсли;
			
			Если Не ПустаяСтрока(ПрефиксАвтонумерации) Тогда
				УстановитьАтрибут(Приемник, "ПрефиксАвтонумерации",	ПрефиксАвтонумерации);
			КонецЕсли;
			
			Если Не ПустаяСтрока(РежимЗаписи) Тогда
				
				УстановитьАтрибут(Приемник, "РежимЗаписи",	РежимЗаписи);
				Если Не ПустаяСтрока(РежимПроведения) Тогда
					УстановитьАтрибут(Приемник, "РежимПроведения",	РежимПроведения);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТипЗнч(УзелСсылки) <> одТипЧисло Тогда
				ДобавитьПодчиненный(Приемник, УзелСсылки);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;

	// Обработчик ПриВыгрузке
	СтандартнаяОбработка = Истина;
	Отказ = Ложь;
	
	Если ПКО.ЕстьОбработчикПриВыгрузке Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКО, "ПриВыгрузке"));
				
			Иначе
				
				Выполнить(ПКО.ПриВыгрузке);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(42, ОписаниеОшибки(), ПКО, Источник, "ПриВыгрузкеОбъекта");				
		КонецПопытки;
				
		Если Отказ Тогда	//	отказ от записи объекта в файл
			
			Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
				мСтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
			КонецЕсли;
			
			мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат УзелСсылки;
		КонецЕсли;
		
	КонецЕсли;

	// Выгрузка свойств
	Если СтандартнаяОбработка Тогда
		
		Если НЕ ПустаяСтрока(ИмяКонстантыДляВыгрузки) Тогда
			
			МассивСвойствДляВыгрузки = Новый Массив();
			
			СтрокаТаблицы = ПКО.Свойства.Найти(ИмяКонстантыДляВыгрузки, "Источник");
			
			Если СтрокаТаблицы <> Неопределено Тогда
				МассивСвойствДляВыгрузки.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
		Иначе
			
			МассивСвойствДляВыгрузки = ПКО.Свойства;
			
		КонецЕсли;
		
		Если ВыгружатьСвойстваОбъекта Тогда
		
	        ВыгрузитьСвойства(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ПКО, МассивСвойствДляВыгрузки, , , , 
				ПКО.НеВыгружатьОбъектыСвойствПоСсылкам ИЛИ НЕВыгружатьПодчиненныеОбъекты, Ложь, ВыгружаетсяОбъект, КлючВыгружаемыхДанных, , ЗначениеСсылкиВДругойИБ);
				
		КонецЕсли;
			
	КонецЕсли;    
	
    // Обработчик ПослеВыгрузки

	Если ПКО.ЕстьОбработчикПослеВыгрузки Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКО, "ПослеВыгрузки"));
				
			Иначе
				
				Выполнить(ПКО.ПослеВыгрузки);
			
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(43, ОписаниеОшибки(), ПКО, Источник, "ПослеВыгрузкиОбъекта");				
		КонецПопытки;
			
		Если Отказ Тогда	//	отказ от записи объекта в файл
			
			Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
				мСтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
			КонецЕсли;
			
			мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;
			Возврат УзелСсылки;
		КонецЕсли;
	КонецЕсли;


	//	Запись объекта в файл
    Приемник.ЗаписатьКонецЭлемента();
	
	мСчетчикВыгруженныхОбъектов = 1 + мСчетчикВыгруженныхОбъектов;
	мТекущийУровеньВложенностиВыгрузитьПоПравилу = мТекущийУровеньВложенностиВыгрузитьПоПравилу - 1;

	Если УзелПредка <> Неопределено Тогда
		
		УзелПредка.ЗаписатьБезОбработки(Приемник.Закрыть());
		
	Иначе
	
		ЗаписатьВФайл(Приемник);
		
		Если НужноЗапоминатьОбъект
			И ЭтоПравилоСГлобальнойВыгрузкойОбъектов Тогда
				
			СтрокаВыгруженныхОбъектов.УзелСсылки = НПП;									
				
		КонецЕсли;
		
		Если мТекущийУровеньВложенностиВыгрузитьПоПравилу = 0 Тогда
			
			ПровестиУстановкуПризнаковВыгруженныхОбъектовВФайл();
			
		КонецЕсли;
		
		ПровестиОбновлениеДанныхВВыгружаемыхДанных();		
		
	КонецЕсли;
	
	Если СтрокаВСтекеВыгрузки <> Неопределено Тогда
		мСтекВызововВыгрузкиДанных.Удалить(СтрокаВСтекеВыгрузки);				
	КонецЕсли;
	
	// Обработчик ПослеВыгрузкиВФайл
	Если ПКО.ЕстьОбработчикПослеВыгрузкиВФайл Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(ПКО, "ПослеВыгрузкиВФайл"));
				
			Иначе
				
				Выполнить(ПКО.ПослеВыгрузкиВФайл);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеВыгрузкиОбработчикаПКО(79, ОписаниеОшибки(), ПКО, Источник, "ЕстьОбработчикПослеВыгрузкиВФайл");				
		КонецПопытки;				
				
	КонецЕсли;
	
	Возврат УзелСсылки;

КонецФункции

Функция ОпределитьПоСсылкеПредставление(СсылкаНаОбъект)
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(СсылкаНаОбъект);
	
	СтрокаСоответствия = мСоответствиеТиповИНазваниеОбъектов.Получить(ТипОбъекта);
	
	Если СтрокаСоответствия = Неопределено Тогда 
		
		МетаданныеСсылки = СсылкаНаОбъект.Метаданные();
		
		Если Метаданные.Справочники.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "СправочникСсылка.";
			
		ИначеЕсли Метаданные.Документы.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "ДокументСсылка.";
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "ПланВидовХарактеристикСсылка.";
			
		ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "ПланСчетовСсылка.";
			
		ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "ПланВидовРасчетаСсылка.";
			
		ИначеЕсли Метаданные.ПланыОбмена.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "ПланОбменаСсылка.";
			
		ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "ЗадачаСсылка.";
			
		ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеСсылки) Тогда
			
			ИмяТипа = "БизнесПроцессСсылка.";
			
		Иначе
			
			ИмяТипа = "";
			
		КонецЕсли;
		
		ИмяТипа = ИмяТипа + МетаданныеСсылки.Имя;
 		
		мСоответствиеТиповИНазваниеОбъектов.Вставить(ТипОбъекта, ИмяТипа);
		
		Возврат ИмяТипа;
	
	КонецЕсли;
	
	Возврат СтрокаСоответствия;
	
КонецФункции

Процедура ВыгрузитьИнформациюОЗарегистрированномОбъекте(НаборЗаписейДляВыгрузки, СтрокаСообщенияОбОшибке)
	
	//Выгружать нужно только те записи которые относятся к нашему узлу обмена,
	// все другие записи передаче не подлежат
	Если (НаборЗаписейДляВыгрузки.Отбор.УзелОбмена.Значение <> УзелДляОбмена)
		ИЛИ Не ЗначениеЗаполнено(НаборЗаписейДляВыгрузки.Отбор.СсылкаВДругойИБ.Значение)Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НаборЗаписейДляВыгрузки.Количество() = 0 Тогда
		
		Ссылка = НаборЗаписейДляВыгрузки.Отбор.СобственнаяСсылка.Значение;
		
		// нет смысла передавать информацию об удалении регистрации объекта, если собственная ссылка не представляет реального объект, то есть
		// если объект уже удален. В этом случае мы вообще не передаем информацию об удалении регистрации
		
		// проверка на существование объекта
		ОбъектСуществует = Истина;
		Попытка
			
			СобственныйОбъект = Ссылка.ПолучитьОбъект();
			ОбъектСуществует = СобственныйОбъект <> Неопределено;
			
		Исключение
			ОбъектСуществует = Истина;	
		КонецПопытки;
		
		Если ОбъектСуществует Тогда
		
			Приемник = СоздатьУзел("ИнформацияОбУдаленииРегистрицииОбъекта");
				
			УстановитьАтрибут(Приемник, "СсылкаВДругойИБ", НаборЗаписейДляВыгрузки.Отбор.СсылкаВДругойИБ.Значение);
			УстановитьАтрибут(Приемник, "СобственнаяСсылка", ЗначениеВСтрокуВнутр(Ссылка));
					
			Приемник.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(Приемник);
			
			мСчетчикВыгруженныхОбъектов = 1 + мСчетчикВыгруженныхОбъектов;		
			
		ИначеЕсли Конвертация.УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике Тогда
							
			ТекстСобытия = "";
			
			Если Конвертация.Свойство("ПередОтправкойИнформацииОбУдалении", ТекстСобытия) И Не ПустаяСтрока(ТекстСобытия) Тогда
				
				Отказ = Ложь;
				
				Попытка
					
					Если ФлагРежимОтладкиОбработчиков Тогда
						
						Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередОтправкойИнформацииОбУдалении"));
						
					Иначе
						
						Выполнить(ТекстСобытия);
						
					КонецЕсли;
					
				Исключение
					СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(76, ОписаниеОшибки(), "ПередОтправкойИнформацииОбУдалении (конвертация)");
					
					Если Не ФлагРежимОтладки Тогда
						ВызватьИсключение СтрокаСообщенияОбОшибке;
					КонецЕсли;
					
					Отказ = Истина;		
				КонецПопытки;
				
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;
			
			ОтработатьУдалениеОбъектаПоСтрокеСсылкеВБазеПриемнике(НаборЗаписейДляВыгрузки.Отбор.СсылкаВДругойИБ.Значение);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого СтрокаНабора Из НаборЗаписейДляВыгрузки Цикл;
	
			Приемник = СоздатьУзел("ИнформацияОРегистрицииОбъекта");
			
			УстановитьАтрибут(Приемник, "СсылкаВДругойИБ", СтрокаНабора.СсылкаВДругойИБ);
			УстановитьАтрибут(Приемник, "СобственнаяСсылка", ЗначениеВСтрокуВнутр(СтрокаНабора.СобственнаяСсылка));
			УстановитьАтрибут(Приемник, "ИмяТипаПриемника",	ОпределитьПоСсылкеПредставление(СтрокаНабора.СобственнаяСсылка));
			
			Приемник.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(Приемник);
			
			мСчетчикВыгруженныхОбъектов = 1 + мСчетчикВыгруженныхОбъектов;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыгрузитьРегистр(НаборЗаписейДляВыгрузки, 
							Правило = Неопределено, 
							ВходящиеДанные = Неопределено, 
							НеВыгружатьОбъектыПоСсылкам = Ложь, 
							ИмяПКО = "",
							ПравилоВыгрузкиДанных = Неопределено) Экспорт
							
	ИсходящиеДанные = Неопределено;						
							
	#Если Клиент тогда
	ОбработкаПрерыванияПользователя();
	#КонецЕсли
	
	ОпределитьПКОПоПараметрам(Правило, НаборЗаписейДляВыгрузки, ИмяПКО);
	
	Отказ			= Ложь;
	Свойства = Неопределено;
	ВходящиеДанные = Неопределено;
	ПриоритетОбъектовОбмена = Правило.ПриоритетОбъектовОбмена;
			
	// записываем сначала отбор потом набор записей
	// отбор
	
	Приемник = СоздатьУзел("НаборЗаписейРегистра");
	
	КоличествоЗаписейВРегистре = НаборЗаписейДляВыгрузки.Количество();
		
	мСчетчикНПП = мСчетчикНПП + 1;
	Нпп         = мСчетчикНПП;
	
	УстановитьАтрибут(Приемник, "Нпп",			Нпп);
	УстановитьАтрибут(Приемник, "Тип", 			СтрЗаменить(Правило.Приемник, "РегистрСведенийЗапись.", "РегистрСведенийНаборЗаписей."));
	УстановитьАтрибут(Приемник, "ИмяПравила",	Правило.Имя);
	
	ЗаписатьПриоритетОбъектовОбмена(ПриоритетОбъектовОбмена, Приемник);
	
	ВыгружаемПустойНабор = КоличествоЗаписейВРегистре = 0;
	Если ВыгружаемПустойНабор Тогда
		УстановитьАтрибут(Приемник, "ПустойНабор",	Истина);
	КонецЕсли;
	
	Приемник.ЗаписатьНачалоЭлемента("Отбор");
	
	СтруктураИсточник = Новый Структура;
	МассивПКСДляВыгрузки = Новый Массив();
	
	Для Каждого СтрокаОтбора Из НаборЗаписейДляВыгрузки.Отбор Цикл
		
		Если СтрокаОтбора.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		// дописываем отбор
		// нужно найти в ПКо соответствующие ПКС и по нему выгрузить значение отбора
		СтруктураИсточник.Вставить(СтрокаОтбора.Имя, СтрокаОтбора.Значение);
		
		СтрокаПКС = Правило.Свойства.Найти(СтрокаОтбора.Имя, "Источник");
		
		Если СтрокаПКС <> Неопределено Тогда
		
			МассивПКСДляВыгрузки.Добавить(СтрокаПКС);
		
		КонецЕсли;
		
	КонецЦикла;
	
	// добавляем параметры для отбора
	Для Каждого СтрокаСвойстваПоиска Из Правило.СвойстваПоиска Цикл
		
		Если ПустаяСтрока(СтрокаСвойстваПоиска.Приемник)
			И НЕ ПустаяСтрока(СтрокаСвойстваПоиска.ИмяПараметраДляПередачи) Тогда
			
			МассивПКСДляВыгрузки.Добавить(СтрокаСвойстваПоиска);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВыгрузитьСвойства(СтруктураИсточник, , ВходящиеДанные, ИсходящиеДанные, Правило, МассивПКСДляВыгрузки, Приемник, 
		, , НеВыгружатьОбъектыПоСсылкам, , , , ВыгружаемПустойНабор);
	
	Приемник.ЗаписатьКонецЭлемента();
	
	
	Приемник.ЗаписатьНачалоЭлемента("СтрокиНабораЗаписей");
	
	// набор записей ВходящиеДанные = Неопределено;
	Для Каждого СтрокаРегистра Из НаборЗаписейДляВыгрузки Цикл
		
		ВыгрузкаОбъектаВыборки(СтрокаРегистра, ПравилоВыгрузкиДанных, , ВходящиеДанные, НеВыгружатьОбъектыПоСсылкам, Истина, 
			Приемник, , ИмяПКО, ЛОЖЬ);
				
	КонецЦикла;
	
	Приемник.ЗаписатьКонецЭлемента();
	
	
	Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
	ПровестиОбновлениеДанныхВВыгружаемыхДанных();
	
	ПровестиУстановкуПризнаковВыгруженныхОбъектовВФайл();
	
	мСчетчикВыгруженныхОбъектов = мСчетчикВыгруженныхОбъектов + 1 - НаборЗаписейДляВыгрузки.Количество();	
		
КонецПроцедуры


Процедура ВызватьСобытияПередВыгрузкойОбъекта(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено, 
	НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, ИмяПКО, Отказ, ИсходящиеДанные)
	
	
	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		Попытка
			ПрОбъекта   = Строка(Объект) + "  (" + ТипЗнч(Объект) + ")";			
		Исключение
			ПрОбъекта   = ТипЗнч(Объект);
		КонецПопытки;
		
		ЗаписатьВПротоколВыполнения("ВЫГРУЗКА ОБЪЕКТА: " + ПрОбъекта, , Ложь, 1, 7);
		
	КонецЕсли;
	
	
	ИмяПКО			= Правило.ПравилоКонвертации;
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	

	// Глобальный обработчик ПередВыгрузкойОбъекта
    Если ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередВыгрузкойОбъекта"));
				
			Иначе
				
				Выполнить(Конвертация.ПередВыгрузкойОбъекта);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(65, ОписаниеОшибки(), Правило.Имя, Объект, "ПередВыгрузкойОбъектаВыборки (глобальный)");							
		КонецПопытки;
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;	

	// Обработчик ПередВыгрузкой
	Если Не ПустаяСтрока(Правило.ПередВыгрузкой) Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПередВыгрузкой"));
				
			Иначе
				
				Выполнить(Правило.ПередВыгрузкой);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(33, ОписаниеОшибки(), Правило.Имя, Объект, "ПередВыгрузкойОбъектаВыборки");
		КонецПопытки;
		
	КонецЕсли;		
		
КонецПроцедуры

Процедура ВызватьСобытияПослеВыгрузкиОбъекта(Объект, Правило, Свойства=Неопределено, ВходящиеДанные=Неопределено, 
	НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, ИмяПКО, Отказ, ИсходящиеДанные)
	
	Перем УзелСсылки; // Пустышка для корректного запуска обработчиков в отладке
	
	// Глобальный обработчик ПослеВыгрузкиОбъекта
    Если ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта Тогда
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПослеВыгрузкиОбъекта"));
				
			Иначе
				
				Выполнить(Конвертация.ПослеВыгрузкиОбъекта);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(69, ОписаниеОшибки(), Правило.Имя, Объект, "ПослеВыгрузкиОбъектаВыборки (глобальный)");
		КонецПопытки;
	КонецЕсли;

	
    // Обработчик ПослеВыгрузки
	Если Не ПустаяСтрока(Правило.ПослеВыгрузки) Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПослеВыгрузки"));
				
			Иначе
				
				Выполнить(Правило.ПослеВыгрузки);
				
			КонецЕсли;
			
		Исключение
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(34, ОписаниеОшибки(), Правило.Имя, Объект, "ПослеВыгрузкиОбъектаВыборки");
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры


// Производит выгрузку объекта выборки в соответствии с указанным правилом
//
// Параметры:
//  Объект         - выгружаемый объект выборки
//  Правило        - ссылка на правило выгрузки данных
//  Свойства       - свойства объекта метаданного выгружаемого объекта 
//  ВходящиеДанные - произвольные вспомогательные данные
// 
Функция ВыгрузкаОбъектаВыборки(Объект, 
								ПравилоВыгрузки, 
								Свойства=Неопределено, 
								ВходящиеДанные = Неопределено,
								НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, 
								ВыгрузкаСтрокиНабораЗаписей = Ложь, 
								УзелПредка = Неопределено, 
								ИмяКонстантыДляВыгрузки = "",
								ИмяПКО = "",
								ВызыватьСобытия = Истина)
								
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
		
	Если ВызыватьСобытия
		И ПравилоВыгрузки <> Неопределено Тогда							

		ИмяПКО			= "";		
		
		ВызватьСобытияПередВыгрузкойОбъекта(Объект, ПравилоВыгрузки, Свойства, ВходящиеДанные, 
			НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);
		
		Если Отказ Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УзелСсылки = Неопределено;
	ВыгрузитьПоПравилу(Объект, , ВходящиеДанные, ИсходящиеДанные, ИмяПКО, УзелСсылки, , , НЕ НеВыгружатьОбъектыСвойствПоСсылкам, 
		ВыгрузкаСтрокиНабораЗаписей, УзелПредка, ИмяКонстантыДляВыгрузки, Истина);
		
		
		Если ВызыватьСобытия
			И ПравилоВыгрузки <> Неопределено Тогда
			
		ВызватьСобытияПослеВыгрузкиОбъекта(Объект, ПравилоВыгрузки, Свойства, ВходящиеДанные, 
			НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);	
		
	КонецЕсли;
		
	Возврат Не Отказ;		
	
КонецФункции

Функция ВыгрузкаРегистра( НаборЗаписейДляВыгрузки, 
							Правило = Неопределено, 
							ВходящиеДанные = Неопределено, 
							НеВыгружатьОбъектыСвойствПоСсылкам = Ложь, 
							ИмяПКО = "") Экспорт
							
	ИмяПКО			= "";
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
		
	ВызватьСобытияПередВыгрузкойОбъекта(НаборЗаписейДляВыгрузки, Правило, Неопределено, ВходящиеДанные, 
		НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);
		
	Если Отказ Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	
	ВыгрузитьРегистр(НаборЗаписейДляВыгрузки, 
					 Неопределено, 
					 ИсходящиеДанные, 
					 НеВыгружатьОбъектыСвойствПоСсылкам, 
					 ИмяПКО,
					 Правило);
		
	ВызватьСобытияПослеВыгрузкиОбъекта(НаборЗаписейДляВыгрузки, Правило, Неопределено, ВходящиеДанные, 
		НеВыгружатьОбъектыСвойствПоСсылкам, ИмяПКО, Отказ, ИсходящиеДанные);	
		
	Возврат Не Отказ;							
							
КонецФункции


Функция ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
	ВыборкаДляОчисткиДанных = Ложь, УдалятьОбъектыНепосредственно = Ложь, ВыбиратьВсеПоля = Истина) Экспорт 
	
	СтрокаРазрешения = ?(ВыгружатьТолькоРазрешенные, " РАЗРЕШЕННЫЕ ", "");
	
	СтрокаВыбораПолей = ?(ВыбиратьВсеПоля, " * ", "	ОбъектДляВыгрузки.Ссылка КАК Ссылка ");
	
	Если ИмяТипа = "Справочник" 
		ИЛИ ИмяТипа = "ПланВидовХарактеристик" 
		ИЛИ ИмяТипа = "ПланСчетов" 
		ИЛИ ИмяТипа = "ПланВидовРасчета" 
		ИЛИ ИмяТипа = "РегистрБухгалтерии"
		ИЛИ ИмяТипа = "ПланОбмена"
		ИЛИ ИмяТипа = "Задача"
		ИЛИ ИмяТипа = "БизнесПроцесс" Тогда
		
		Запрос = Новый Запрос();
		
		Если ИмяТипа = "РегистрБухгалтерии" Тогда
			
			СтрокаВыбораПолей = "*";	
			
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	" + СтрокаВыбораПолей + "
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |";
		
		Если ВыборкаДляОчисткиДанных
			И УдалятьОбъектыНепосредственно Тогда
			
			Если (ИмяТипа = "Справочник"
				ИЛИ ИмяТипа = "ПланВидовХарактеристик") Тогда
				
				Попытка
					Если ИмяТипа = "Справочник" Тогда
						НужнаИерархия = Метаданные.Справочники[Свойства.Имя].Иерархический;
					Иначе
						НужнаИерархия = Метаданные.ПланыВидовХарактеристик[Свойства.Имя].Иерархический;
					КонецЕсли
				Исключение
					НужнаИерархия = Ложь
				КонецПопытки;
				
				Если НужнаИерархия Тогда
					
					Запрос.Текст = Запрос.Текст + "
					|	ГДЕ ОбъектДляВыгрузки.Родитель = &Родитель
					|";
					
					Запрос.УстановитьПараметр("Родитель", Свойства.Менеджер.ПустаяСсылка());
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;		 
					
	ИначеЕсли ИмяТипа = "Документ" Тогда
		
		Запрос = Новый Запрос();
		
		ИтоговоеОграничениеПоДате = "";
				
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	" + СтрокаВыбораПолей + "
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |" + ИтоговоеОграничениеПоДате;
					 
											
	ИначеЕсли ИмяТипа = "РегистрСведений" Тогда
		
		Непериодический = НЕ Свойства.Периодический;
		ПодчиненныйРегистратору = Свойства.ПодчиненныйРегистратору;
		
		
		НеНужноОграничениеПоДатам = ВыборкаДляОчисткиДанных	ИЛИ Непериодический;
				
		Запрос = Новый Запрос();
		
		ИтоговоеОграничениеПоДате = "";
				
		СтрокаДополненияПолейВыборкиПодчиненРегистратору = ?(НЕ ПодчиненныйРегистратору, ", NULL КАК Активность,
		|	NULL КАК Регистратор,
		|	NULL КАК НомерСтроки", "");
		
		СтрокаДополненияПолейВыбокиПериодичность = ?(Непериодический, ", NULL КАК Период", "");
		
		Запрос.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + "
		         |	*
				 |
				 | " + СтрокаДополненияПолейВыборкиПодчиненРегистратору + "
				 | " + СтрокаДополненияПолейВыбокиПериодичность + "
				 |
		         |ИЗ
		         |	" + ИмяТипа + "." + Свойства.Имя + " КАК ОбъектДляВыгрузки
				 |
				 |" + ИтоговоеОграничениеПоДате;
		
	Иначе
		
		Возврат Неопределено;
					
	КонецЕсли;
	
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
	ВыборкаДляОчисткиДанных = Ложь, УдалятьОбъектыНепосредственно = Ложь, ВыбиратьВсеПоля = Истина) Экспорт
	
	РезультатЗапроса = ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, 
			ВыборкаДляОчисткиДанных, УдалятьОбъектыНепосредственно, ВыбиратьВсеПоля);
			
	Если РезультатЗапроса = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Выборка = РезультатЗапроса.Выбрать();
	
	#Если Клиент Тогда
	Если ВыборкаДляОчисткиДанных Тогда
		Состояние("Очистка " + ИмяТипа + ":  " + Свойства.Имя);
	Иначе
		Состояние("Выгрузка " + ИмяТипа + ":  " + Свойства.Имя);
	КонецЕсли;
	#КонецЕсли
		
	
	Возврат Выборка;		
	
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиСОграничениями(Правило)
	
	ИмяМетаданных           = Правило.ИмяОбъектаДляЗапроса;
	
	СтрокаРазрешения = ?(ВыгружатьТолькоРазрешенные, " РАЗРЕШЕННЫЕ ", "");
	
	ПостроительОтчета.Текст = "ВЫБРАТЬ " + СтрокаРазрешения + " Объект.Ссылка КАК Ссылка ИЗ " + ИмяМетаданных + " КАК Объект "+ "{ГДЕ Объект.Ссылка.* КАК " + СтрЗаменить(ИмяМетаданных, ".", "_") + "}";
	ПостроительОтчета.Отбор.Сбросить();
	Если НЕ Правило.НастройкиПостроителя = Неопределено Тогда
		ПостроительОтчета.УстановитьНастройки(Правило.НастройкиПостроителя);
	КонецЕсли;

	ПостроительОтчета.Выполнить();
	Выборка = ПостроительОтчета.Результат.Выбрать();
		
	Возврат Выборка;
		
КонецФункции

Функция ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных)
	
	Выборка = Неопределено;
	
	ТипВыборки = ТипЗнч(ВыборкаДанных);
			
	Если ТипВыборки = Тип("ВыборкаИзРезультатаЗапроса") Тогда
				
		Выборка = ВыборкаДанных;
		
	ИначеЕсли ТипВыборки = Тип("РезультатЗапроса") Тогда
				
		Выборка = ВыборкаДанных.Выбрать();
					
	ИначеЕсли ТипВыборки = Тип("Запрос") Тогда
				
		РезультатЗапроса = ВыборкаДанных.Выполнить();
		Выборка          = РезультатЗапроса.Выбрать();
									
	КонецЕсли;
		
	Возврат Выборка;	
	
КонецФункции

Функция ПолучитьСтрокуНабораКонстантДляВыгрузки(ТаблицаДанныхКонстантДляВыгрузки)
	
	СтрокаНабораКонстант = "";
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанныхКонстантДляВыгрузки Цикл
		
		Если Не ПустаяСтрока(СтрокаТаблицы.Источник) Тогда
		
			СтрокаНабораКонстант = СтрокаНабораКонстант + ", " + СтрокаТаблицы.Источник;
			
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если Не ПустаяСтрока(СтрокаНабораКонстант) Тогда
		
		СтрокаНабораКонстант = Сред(СтрокаНабораКонстант, 3);
		
	КонецЕсли;
	
	Возврат СтрокаНабораКонстант;
	
КонецФункции

Функция ВыгрузитьНаборКонстант(Правило, Свойства, ИсходящиеДанные, СтрокаИменНабораКонстант = "")
	
	Если СтрокаИменНабораКонстант = "" Тогда
		СтрокаИменНабораКонстант = ПолучитьСтрокуНабораКонстантДляВыгрузки(Свойства.ПКО.Свойства);
	КонецЕсли;
			
	НаборКонстант = Константы.СоздатьНабор(СтрокаИменНабораКонстант);
	НаборКонстант.Прочитать();
	РезультатВыгрузки = ВыгрузкаОбъектаВыборки(НаборКонстант, Правило, Свойства, ИсходящиеДанные, , , , СтрокаИменНабораКонстант);	
	Возврат РезультатВыгрузки;
	
КонецФункции

Функция ОпределитьНужноВыбиратьВсеПоля(Правило)
	
	НужныВсеПоляДляВыборки = НЕ ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта)
		ИЛИ НЕ ПустаяСтрока(Правило.ПередВыгрузкой)
		ИЛИ НЕ ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта)
		ИЛИ НЕ ПустаяСтрока(Правило.ПослеВыгрузки);		
		
	Возврат НужныВсеПоляДляВыборки;	
	
КонецФункции

// Выгружает данные по указанному правилу
//
// Параметры:
//  Правило        - ссылка на правило выгрузки данных
// 
Процедура ВыгрузитьДанныеПоПравилу(Правило) Экспорт
	
	ИмяПКО = Правило.ПравилоКонвертации;
	
	Если Не ПустаяСтрока(ИмяПКО) Тогда
		
		ПКО = Правила[ИмяПКО];
		
	КонецЕсли;


	Если ФлагКомментироватьОбработкуОбъектов Тогда
		
		ЗаписатьВПротоколВыполнения("ПРАВИЛО ВЫГРУЗКИ ДАННЫХ:  " + СокрЛП(Правило.Имя) + "  (" + СокрЛП(Правило.Наименование) + ")", , Ложь, , 4);
		
	КонецЕсли;
		
	
	// Обработчик ПередОбработкой
    Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	ВыборкаДанных	= Неопределено;

	
	Если Не ПустаяСтрока(Правило.ПередОбработкой) Тогда
	
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПередОбработкой"));
				
			Иначе
				
				Выполнить(Правило.ПередОбработкой);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), Правило.Имя, , "ПередОбработкойВыгрузкиДанных");
									
		КонецПопытки;
				
		Если Отказ Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;


	// Стандартная выборка с отбором
	Если Правило.СпособОтбораДанных = "СтандартнаяВыборка" И Правило.ИспользоватьОтбор Тогда

		Выборка = ПолучитьВыборкуДляВыгрузкиСОграничениями(Правило);
		
		Пока Выборка.Следующий() Цикл
			ВыгрузкаОбъектаВыборки(Выборка.Ссылка, Правило, , ИсходящиеДанные);
		КонецЦикла;

	// Стандартная выборка без отбора
	ИначеЕсли (Правило.СпособОтбораДанных = "СтандартнаяВыборка") Тогда
		
		Свойства	= Менеджеры[Правило.ОбъектВыборки];
		ИмяТипа		= Свойства.ИмяТипа;
		
		Если ИмяТипа = "Константы" Тогда
			
			ВыгрузитьНаборКонстант(Правило, Свойства, ИсходящиеДанные);		
			
		Иначе
			
			ЭтоНеСсылочныйТип = ИмяТипа =  "РегистрСведений" 
				ИЛИ ИмяТипа = "РегистрБухгалтерии";
			
			
			Если ЭтоНеСсылочныйТип Тогда
					
				ВыбиратьВсеПоля = ОпределитьНужноВыбиратьВсеПоля(Правило);
				
			Иначе
				
				// получаем только ссылку
				ВыбиратьВсеПоля = Ложь;	
				
			КонецЕсли;	
				
			
			Выборка = ПолучитьВыборкуДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, , , ВыбиратьВсеПоля);
			
			Если Выборка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Пока Выборка.Следующий() Цикл
				
				Если ЭтоНеСсылочныйТип Тогда
					
					ВыгрузкаОбъектаВыборки(Выборка, Правило, Свойства, ИсходящиеДанные);
					
				Иначе
					
					ВыгрузкаОбъектаВыборки(Выборка.Ссылка, Правило, Свойства, ИсходящиеДанные);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Правило.СпособОтбораДанных = "ПроизвольныйАлгоритм" Тогда

		Если ВыборкаДанных <> Неопределено Тогда
			
			Выборка = ПолучитьВыборкуДляВыгрузкиПоПроизвольномуАлгоритму(ВыборкаДанных);
			
            Если Выборка <> Неопределено Тогда
				
				Пока Выборка.Следующий() Цикл
					
					ВыгрузкаОбъектаВыборки(Выборка, Правило, , ИсходящиеДанные);
					
				КонецЦикла;
				
			Иначе
				
				Для каждого Объект Из ВыборкаДанных Цикл
					
					ВыгрузкаОбъектаВыборки(Объект, Правило, , ИсходящиеДанные);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЕсли;

	
	// Обработчик ПослеОбработки

	//ВсеОбъектыВыгружены   = ПКО.ВсеОбъектыВыгружены;
	
	Если Не ПустаяСтрока(Правило.ПослеОбработки) Тогда
	
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Правило, "ПослеОбработки"));
				
			Иначе
				
				Выполнить(Правило.ПослеОбработки);
				
			КонецЕсли;
			
		Исключение
			
			ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), Правило.Имя, , "ПослеОбработкиВыгрузкиДанных");
			
		КонецПопытки;
		
	 КонецЕсли;
		
КонецПроцедуры // ВыгрузитьДанныеПоПравилу()

// Обходит дерево правил выгрузки данных и выполняет выгрузку
//
// Параметры:
//  Строки         - Коллекция строк дерева значений
// 
Процедура СформироватьМассивПравилВыгрузки(Строки, МассивПравилВыгрузки)
	
	Для каждого ПравилоВыгрузки Из Строки Цикл
		
		Если ПравилоВыгрузки.Включить = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПравилоВыгрузки.ЭтоГруппа Тогда
			
			СформироватьМассивПравилВыгрузки(ПравилоВыгрузки.Строки, МассивПравилВыгрузки);
			Продолжить;
						
		КонецЕсли;
		
		Если (УзелДляОбмена <> Неопределено 
				И НЕ УзелДляОбмена.Пустая()) Тогда
			
			МассивПравилВыгрузки.Добавить(ПравилоВыгрузки);
									
		КонецЕсли;
 				
	КонецЦикла; 
	
КонецПроцедуры 

Функция СкопироватьМассивПравилВыгрузки(ИсходныйМассив)
	
	РезультирующийМассив = Новый Массив();
	
	Для Каждого Элемент Из ИсходныйМассив Цикл
		
		РезультирующийМассив.Добавить(Элемент);	
		
	КонецЦикла;
	
	Возврат РезультирующийМассив;
	
КонецФункции

Функция НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(МассивСтрок, ТипВыгрузки)
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		Если СтрокаМассива.ОбъектВыборки = ТипВыгрузки Тогда
			
			Возврат СтрокаМассива;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьСтрокуДереваПравилВыгрузкиПоТипуВыгрузкиИзМассива(МассивСтрок, ЭлементУдаления)
	
	Счетчик = МассивСтрок.Количество() - 1;
	Пока Счетчик >= 0 Цикл
		
		СтрокаМассива = МассивСтрок[Счетчик];
		
		Если СтрокаМассива = ЭлементУдаления Тогда
			
			МассивСтрок.Удалить(Счетчик);
			Возврат;
			
		КонецЕсли; 
		
		Счетчик = Счетчик - 1;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьСтрокуПравилВыгрузкиПоОбъектуОбмена(Данные, МетаданныеПоследнегоОбъекта, МетаданныеОбъектаВыгрузки, 
	ПоследняяСтрокаПравилВыгрузки, ТекущаяСтрокаПравилаВыгрузки, ВременныйМассивПравилВыгрузкиДанных, ОбъектДляПравилВыгрузки, 
	ВыгружаетсяРегистр, ВыгружаютсяКонстанты, КонстантыБылиВыгружены)
	
	ТекущаяСтрокаПравилаВыгрузки = Неопределено;
	ОбъектДляПравилВыгрузки = Неопределено;
	ВыгружаетсяРегистр = Ложь;
	ВыгружаютсяКонстанты = Ложь;
	
	Если МетаданныеПоследнегоОбъекта = МетаданныеОбъектаВыгрузки
		И ПоследняяСтрокаПравилВыгрузки = Неопределено Тогда
		
		ОбъектДляПравилВыгрузки = Данные;
		Возврат;
		
	КонецЕсли;
	
	СтруктураДанных = МенеджерыДляПлановОбмена[МетаданныеОбъектаВыгрузки];
	
	Если СтруктураДанных = Неопределено тогда
		
		ВыгружаютсяКонстанты = Метаданные.Константы.Содержит(МетаданныеОбъектаВыгрузки);
		
		Если КонстантыБылиВыгружены 
			ИЛИ НЕ ВыгружаютсяКонстанты Тогда
			
			Возврат;
			
		КонецЕсли;
		
		// нужно найти правило для констант
		Если МетаданныеПоследнегоОбъекта <> МетаданныеОбъектаВыгрузки Тогда
		
			ТекущаяСтрокаПравилаВыгрузки = НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(ВременныйМассивПравилВыгрузкиДанных, Тип("КонстантыНабор"));
			
		Иначе
			
			ТекущаяСтрокаПравилаВыгрузки = ПоследняяСтрокаПравилВыгрузки;	
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если СтруктураДанных.ЭтоСсылочныйТип = Истина Тогда
						
		Если МетаданныеПоследнегоОбъекта <> МетаданныеОбъектаВыгрузки Тогда
		
			ТекущаяСтрокаПравилаВыгрузки = НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(ВременныйМассивПравилВыгрузкиДанных, СтруктураДанных.ТипСсылки);
			
		Иначе
			
			ТекущаяСтрокаПравилаВыгрузки = ПоследняяСтрокаПравилВыгрузки;	
			
		КонецЕсли;
		
		ОбъектДляПравилВыгрузки = Данные;
		
	ИначеЕсли СтруктураДанных.ЭтоРегистр = Истина Тогда
		
		Если МетаданныеПоследнегоОбъекта <> МетаданныеОбъектаВыгрузки Тогда
		
			ТекущаяСтрокаПравилаВыгрузки = НайтиСтрокуДереваПравилВыгрузкиПоТипуВыгрузки(ВременныйМассивПравилВыгрузкиДанных, СтруктураДанных.ТипСсылки);
			
		Иначе
			
			ТекущаяСтрокаПравилаВыгрузки = ПоследняяСтрокаПравилВыгрузки;	
			
		КонецЕсли;
		
		ОбъектДляПравилВыгрузки = Данные;
		
		ВыгружаетсяРегистр = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОтработатьУдалениеОбъекта(ДанныеОбУдаленииОбъекта, СтрокаСообщенияОбОшибке)
	
	Ссылка = ДанныеОбУдаленииОбъекта.Ссылка;
	
	ТекстСобытия = "";
	
	Если Конвертация.Свойство("ПередОтправкойИнформацииОбУдалении", ТекстСобытия) И Не ПустаяСтрока(ТекстСобытия) Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередОтправкойИнформацииОбУдалении"));
				
			Иначе
				
				Выполнить(ТекстСобытия);
				
			КонецЕсли;
			
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(76, ОписаниеОшибки(), "ПередОтправкойИнформацииОбУдалении (конвертация)");
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
			Отказ = Истина;		
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Приемник = СоздатьУзел("УдалениеОбъекта");
	УстановитьАтрибут(Приемник, "СсылкаНаОбъект", ЗначениеВСтрокуВнутр(Ссылка));
	
	//	Запись объекта в файл
    Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
	мСчетчикВыгруженныхОбъектов = мСчетчикВыгруженныхОбъектов + 1;	
	
КонецПроцедуры

Процедура ОтработатьУдалениеОбъектаПоСтрокеСсылкеВБазеПриемнике(СтрокаСсылки)
	
	Если НЕ ЗначениеЗаполнено(СтрокаСсылки) Тогда
		Возврат;
	КонецЕсли;
	
	Приемник = СоздатьУзел("УдалениеОбъектаПоСсылке");
	УстановитьАтрибут(Приемник, "СсылкаНаОбъект", СтрокаСсылки);
	
	//	Запись объекта в файл
    Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
	мСчетчикВыгруженныхОбъектов = мСчетчикВыгруженныхОбъектов + 1;	
	
КонецПроцедуры


// фоновый обмен
///////////////////////////////////////////////////////////////////////////////

Функция ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта)
	
	НазваниеМетаданных = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Справочник";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Документ";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовХарактеристик";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланСчетов";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрСведений";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовРасчета";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрРасчета";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "БизнесПроцесс";
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Задача";
					   
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Константа";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Последовательность";
		
	Иначе
		
		НазваниеМетаданных = "";
				
	КонецЕсли;
	
	Возврат НазваниеМетаданных;
	
КонецФункции

Функция ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта, Узел)
	
	Запрос = Новый Запрос();
	
	ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта);
	
	Если ПустаяСтрока(ИмяТаблицыДляПоискаЗарегистрированных) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяТаблицыДляПоискаЗарегистрированных = ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения";
		
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Количество
	   |ИЗ
	   |	" + ИмяТаблицыДляПоискаЗарегистрированных + " КАК РегистрацияИзменений
	   |ГДЕ
	   |РегистрацияИзменений.Узел = &Узел";
				   
	Запрос.УстановитьПараметр("Узел", Узел);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат 0;
	Иначе
		
		Возврат ТаблицаДанных[0].Количество;
		
	КонецЕсли;
	
КонецФункции

// работа с фоновым обменом данными
Функция ОпределитьДляУзлаОбменаКоличествоЗарегистрированныхИзменений(УзелОбмена, Знач МаксимальноеКоличествоИнтересующихОбъектов = 0)
	
	// по узлу определяем план обмена и состав его данных
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат 0;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	
	ИтоговоеКоличествоРегистрации = 0;
	
	Для Каждого ЭлементСостава из МетаданныеПланаОбмена.Состав Цикл
		
		МетаданныеДляОбмена = ЭлементСостава.Метаданные;
		
		КоличествоЗарегистрированныхЭлементов = ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеДляОбмена, УзелОбмена);
		
		ИтоговоеКоличествоРегистрации = ИтоговоеКоличествоРегистрации + КоличествоЗарегистрированныхЭлементов;
		
		Если МаксимальноеКоличествоИнтересующихОбъектов <> 0 
			И ИтоговоеКоличествоРегистрации >= МаксимальноеКоличествоИнтересующихОбъектов Тогда
			
			Возврат ИтоговоеКоличествоРегистрации;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтоговоеКоличествоРегистрации; 
	
КонецФункции

Функция ИзменитьРегистрацияДляОбъекта(УзелИсточник, УзелПриемник, Объект)
	
	Попытка
		
		ПланыОбмена.УдалитьРегистрациюИзменений(УзелИсточник, Объект);
		ПланыОбмена.ЗарегистрироватьИзменения(УзелПриемник, Объект);
						
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ПровестиИзменениеРегистрацииДляСсылочногоОбъекта(ИмяТаблицыДляВыбора, КоличествоДляЗапроса, УзелИсточник, УзелПриемник, КоличествоРеальноПеренесенныхОбъектов)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые " + КоличествоДляЗапроса + " Ссылка КАК Ссылка
   |ИЗ
   |	" + ИмяТаблицыДляВыбора + " КАК РегистрацияИзменений
   |ГДЕ
   |РегистрацияИзменений.Узел = &Узел";
			   
	Запрос.УстановитьПараметр("Узел", УзелИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		УдачноеИзменение = ИзменитьРегистрацияДляОбъекта(УзелИсточник, УзелПриемник, Выборка.Ссылка);
			
		Если УдачноеИзменение Тогда
			КоличествоРеальноПеренесенныхОбъектов = КоличествоРеальноПеренесенныхОбъектов + 1;
		КонецЕсли;		
	
	КонецЦикла;
		
КонецПроцедуры

Процедура ПровестиИзменениеРегистрацииДляРегистра(ИмяТаблицыДляВыбора, МенеджерТипов, КоличествоДляЗапроса, УзелИсточник, УзелПриемник, 
	КоличествоРеальноПеренесенныхОбъектов, НуженТолькоРегистратор)
	
	Запрос = Новый Запрос();
	
	ПерваяСтрокаЗапроса = ?(НуженТолькоРегистратор, " Регистратор КАК Регистратор", " * ");
	
	Запрос.Текст = "ВЫБРАТЬ Различные Первые " + КоличествоДляЗапроса + ПерваяСтрокаЗапроса + "
   |ИЗ
   |	" + ИмяТаблицыДляВыбора + " КАК РегистрацияИзменений
   |ГДЕ
   |РегистрацияИзменений.Узел = &Узел";
			   
	Запрос.УстановитьПараметр("Узел", УзелИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СоответствиеПропускаемыхИмен = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = МенеджерТипов.СоздатьНаборЗаписей();
		
		Если НуженТолькоРегистратор Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		Иначе
			
			Для Каждого ДанныеОтбора Из НаборЗаписей.Отбор Цикл
				
				Если СоответствиеПропускаемыхИмен.Получить(ДанныеОтбора.Имя) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					
					ЗначениеВыборкиОтбора = Выборка[ДанныеОтбора.Имя]; 
						
				Исключение
					
					СоответствиеПропускаемыхИмен.Вставить(ЗначениеВыборкиОтбора, Истина);
					Продолжить;
					
				КонецПопытки;
				
				ДанныеОтбора.Установить(ЗначениеВыборкиОтбора);
				
			КонецЦикла;
			
		КонецЕсли;
		
		УдачноеИзменение = ИзменитьРегистрацияДляОбъекта(УзелИсточник, УзелПриемник, НаборЗаписей);
		
		Если УдачноеИзменение Тогда
			КоличествоРеальноПеренесенныхОбъектов = КоличествоРеальноПеренесенныхОбъектов + 1;
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры


Функция ИзменитьРегистрациюУОбъектовМетаданных(УзелИсточник, УзелПриемник, МетаданныеОбъекта, КоличествоОбъектовДляПереноса)
	
	КоличествоРеальноПеренесенныхОбъектов = 0;
	
	КоличествоДляЗапроса = СтрЗаменить(Строка(КоличествоОбъектовДляПереноса), Символы.НПП, "");
	
	ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта);
	
	Если ПустаяСтрока(ИмяТаблицыДляПоискаЗарегистрированных) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ИмяТаблицыДляПоискаЗарегистрированных = "Константа" Тогда
		
		ИмяТаблицы = ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения";
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ Первые " + КоличествоДляЗапроса + " *
	   |ИЗ
	   |	" + ИмяТаблицы + " КАК РегистрацияИзменений
	   |ГДЕ
	   |РегистрацияИзменений.Узел = &Узел";
				   
		Запрос.УстановитьПараметр("Узел", УзелИсточник);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			КонстантаДляПередачи = Константы[МетаданныеОбъекта.Имя];
			
			УдачноеИзменение = ИзменитьРегистрацияДляОбъекта(УзелИсточник, УзелПриемник, КонстантаДляПередачи);
			
			Если УдачноеИзменение Тогда
				КоличествоРеальноПеренесенныхОбъектов = КоличествоРеальноПеренесенныхОбъектов + 1;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "Справочник"
			ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "Документ"
			ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовХарактеристик"
			ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "ПланСчетов"
			ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "БизнесПроцесс"
			ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "Задача" Тогда
		
		ПровестиИзменениеРегистрацииДляСсылочногоОбъекта(ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения", КоличествоДляЗапроса, УзелИсточник, УзелПриемник, КоличествоРеальноПеренесенныхОбъектов);
				
	ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "РегистрСведений" Тогда
		
		ПровестиИзменениеРегистрацииДляРегистра(ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения", РегистрыСведений[МетаданныеОбъекта.Имя], КоличествоДляЗапроса, УзелИсточник, УзелПриемник, 
			КоличествоРеальноПеренесенныхОбъектов, ЛОЖЬ);		
				
	ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовРасчета" Тогда
		
		ПровестиИзменениеРегистрацииДляСсылочногоОбъекта(ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения", КоличествоДляЗапроса, УзелИсточник, УзелПриемник, КоличествоРеальноПеренесенныхОбъектов);
		
	ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "РегистрНакопления"
		ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "РегистрБухгалтерии"
		ИЛИ ИмяТаблицыДляПоискаЗарегистрированных = "РегистрРасчета" Тогда
		
		ПровестиИзменениеРегистрацииДляРегистра(ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения", РегистрыНакопления[МетаданныеОбъекта.Имя], КоличествоДляЗапроса, УзелИсточник, УзелПриемник, 
			КоличествоРеальноПеренесенныхОбъектов, Истина);
			
	Иначе
		
		Возврат 0;
				
	КонецЕсли;
	
	Возврат КоличествоРеальноПеренесенныхОбъектов;
	
КонецФункции

Функция ПеренестиРегистрациюОбъектовИзОдногоУзлаВДругой(УзелИсточник, УзелПриемник, КоличествоОбъектовДляРегистрации)
	
	Если НЕ ЗначениеЗаполнено(УзелИсточник)
		ИЛИ НЕ ЗначениеЗаполнено(УзелПриемник) Тогда
		Возврат 0;
	КонецЕсли;
	
	МетаданныеПланаОбмена = УзелИсточник.Метаданные();
	
	ТекущееКоличествоДляРегистрации = КоличествоОбъектовДляРегистрации;
	
	ТаблицаМетаданныхДляОбхода = Новый ТаблицаЗначений;
	ТаблицаМетаданныхДляОбхода.Колонки.Добавить("Метаданные");
	ТаблицаМетаданныхДляОбхода.Колонки.Добавить("Порядок");
	
	ТаблицаМетаданныхДляОбхода.Индексы.Добавить("Порядок");
	
	Для Каждого ЭлементСостава из МетаданныеПланаОбмена.Состав Цикл
		
		МетаданныеДляОбмена = ЭлементСостава.Метаданные;
		
		ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеДляОбмена);
		
		Если ИмяТаблицыДляПоискаЗарегистрированных = "Константа" Тогда
			Порядок = 1;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "Справочник" Тогда
			Порядок = 2;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовХарактеристик" Тогда
			Порядок = 3;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "ПланСчетов" Тогда
			Порядок = 4;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "БизнесПроцесс" Тогда
			Порядок = 5;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "Задача" Тогда
			Порядок = 6;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "ПланВидовРасчета" Тогда
			Порядок = 7;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "РегистрСведений" Тогда
			Порядок = 8;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "Документ" Тогда
			Порядок = 9;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "РегистрНакопления" Тогда
			Порядок = 10;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "РегистрБухгалтерии" Тогда
			Порядок = 11;
		ИначеЕсли ИмяТаблицыДляПоискаЗарегистрированных = "РегистрРасчета" Тогда
			Порядок = 12;
		Иначе
			Порядок = 100;
		КонецЕсли;		
		
		// порядок: Константы, справочники, ПланВидовХарактеристик ПланСчетов БизнесПроцесс Задача ПланВидовРасчета РегистрСведений Документ
		//  РегистрНакопления РегистрБухгалтерии РегистрРасчета 
        СтрокаТаблицы = ТаблицаМетаданныхДляОбхода.Добавить();
		СтрокаТаблицы.Метаданные = МетаданныеДляОбмена;
		СтрокаТаблицы.Порядок = Порядок;			
		
	КонецЦикла;
	
	ТаблицаМетаданныхДляОбхода.Сортировать("Порядок ВОЗР");
	
	Для Каждого ЭлементСостава Из ТаблицаМетаданныхДляОбхода Цикл
		
		МетаданныеДляОбмена = ЭлементСостава.Метаданные;
		
		КоличествоПеренесенных = ИзменитьРегистрациюУОбъектовМетаданных(УзелИсточник, УзелПриемник, МетаданныеДляОбмена, ТекущееКоличествоДляРегистрации);
		
		ТекущееКоличествоДляРегистрации = ТекущееКоличествоДляРегистрации - КоличествоПеренесенных;
		
		Если ТекущееКоличествоДляРегистрации = 0 Тогда
			Возврат КоличествоОбъектовДляРегистрации;
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат КоличествоОбъектовДляРегистрации - ТекущееКоличествоДляРегистрации; 
	
КонецФункции

Функция ДополнитьРегистрациюИзмененийФоновымОбменом(УзелОбмена)
	
	Если НЕ ЗначениеЗаполнено(УзелДляФоновогоОбмена)
		ИЛИ ДобавлениеОбъектовИзФоновогоОбмена = 0
		ИЛИ КоличествоОбъектовДляФоновогоОбмена = 0 Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	Если ДобавлениеОбъектовИзФоновогоОбмена = 2 Тогда
		НачальноеКоличествоЗарегистрированныхИзменений = ОпределитьДляУзлаОбменаКоличествоЗарегистрированныхИзменений(УзелОбмена, КоличествоОбъектовДляФоновогоОбмена);
	Иначе
		НачальноеКоличествоЗарегистрированныхИзменений = 0;
	КонецЕсли;
	
	КоличествоОбъектовКоторыеНужноДобавить = КоличествоОбъектовДляФоновогоОбмена - НачальноеКоличествоЗарегистрированныхИзменений;
	
	Если КоличествоОбъектовКоторыеНужноДобавить <= 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	ОбщееКоличествоДляКоторыхБылПеренос = ПеренестиРегистрациюОбъектовИзОдногоУзлаВДругой(УзелДляФоновогоОбмена, УзелОбмена, КоличествоОбъектовКоторыеНужноДобавить);
	
	Возврат ОбщееКоличествоДляКоторыхБылПеренос;
	
КонецФункции

Функция ПолучитьСтрокуВызоваОбработчика(Правило, ИмяОбработчика)
	
	Возврат "УниверсальныйОбменДанными.ВнешняяОбработкаОбработчиковСобытий." + Правило["ИнтерфейсОбработчика" + ИмяОбработчика] + ";";
	
КонецФункции 

///////////////////////////////////////////////////////////////////////////////




Функция ВыполнитьВыгрузкуИзмененныхДанныхДляУзлаОбмена(УзелОбмена, МассивПравилВыгрузкиДанных, 
	СтрокаСообщенияОбОшибке = "", НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам = Ложь)
	
	Перем ИмяПКО, Правило; // Пустышки для корректного запуска обработчиков в отладке
			
	ЗаписьXML = Новый ЗаписьXML();
	
	ЗаписьXML.УстановитьСтроку();
		
	// Создаем новое сообщение
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
		
	ЗаписьСообщения.НачатьЗапись(ЗаписьXML, УзелОбмена);
	
	// считаем количество записанных объектов
	КоличествоНайденныхДляЗаписиОбъектов = 0;
	
	// начинаем транзакцию
	Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ПоследнийОбъектМетаданных = Неопределено;
	ПоследняяСтрокаПравилаВыгрузки = Неопределено;
	
	ТекущийОбъектМетаданных = Неопределено;
	ТекущаяСтрокаПравилаВыгрузки = Неопределено;
	
	ИсходящиеДанные = Неопределено;
	
	ВременныйМассивПравилВыгрузкиДанных = СкопироватьМассивПравилВыгрузки(МассивПравилВыгрузкиДанных);
	
	Отказ			= Ложь;
	ИсходящиеДанные	= Неопределено;
	ВыборкаДанных	= Неопределено;
	
	ОбъектДляПравилВыгрузки = Неопределено;
	КонстантыБылиВыгружены = Ложь;
	
	ОбъектУзлаОбмена = УзелОбмена.ПолучитьОбъект();
	
	Попытка
		
		ПереданоОбъектовФоновогоОбмена = ДополнитьРегистрациюИзмененийФоновымОбменом(УзелОбмена);
		
		// запишем информацию по фоновому обмену данными
		ЗаписатьИнформациюОбОбменеДаннымиЧерезПланыОбмена();
		
		ЗаписатьИнформациюОФоновомОбменеДаннымиЧерезПланыОбмена(ПереданоОбъектовФоновогоОбмена);
				
		Если Не ПустаяСтрока(Конвертация.ПередПолучениемИзмененныхОбъектов) Тогда
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередПолучениемИзмененныхОбъектов"));
					
				Иначе
					
					Выполнить(Конвертация.ПередПолучениемИзмененныхОбъектов);
					
				КонецЕсли;
				
			Исключение
				СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(175, ОписаниеОшибки(), "ПередПолучениемИзмененныхОбъектов (конвертация)");
				Возврат Ложь;
			КонецПопытки;
		
		КонецЕсли;	
		
		// возможно обмен только в одну сторону и нет
		// вообще правил выгрузки никаких, тогда нужно передавать только данные о зарегистрированных объектах
		// и квитанции. Можно ограничить выборку данных только по метаданным регистра, где хранится сопоставление объектов
		
		МассивВыгружаемыхМетаданных = Новый Массив();
		МассивВыгружаемыхМетаданных.Добавить(Метаданные.РегистрыСведений.СоответствиеОбъектовДляОбмена);
		
		// дополняем массив только теми метаданными по которым есть правила выгрузки - остальные метаданные нас не интересуют
		Для Каждого СтрокаПравилаВыгрузки Из ВременныйМассивПравилВыгрузкиДанных Цикл
			
			МетаданныеПВД = Метаданные.НайтиПоТипу(СтрокаПравилаВыгрузки.ОбъектВыборки);
			МассивВыгружаемыхМетаданных.Добавить(МетаданныеПВД);
			
		КонецЦикла;
		
		// выбираем не все, а только то что указано для выгрузки в правилах выгрузки
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(ЗаписьСообщения.Получатель, ЗаписьСообщения.НомерСообщения, МассивВыгружаемыхМетаданных);
						
		Пока ВыборкаИзменений.Следующий() Цикл
					
			Данные = ВыборкаИзменений.Получить();
			КоличествоНайденныхДляЗаписиОбъектов = КоличествоНайденныхДляЗаписиОбъектов + 1;
			
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
			ОбъектУзлаОбмена.ОпределитьТипОтправкиДанных(Данные, ОтправкаЭлемента);			
			
			Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
				Продолжить;
			КонецЕсли;			
			
			ТипДанныхДляВыгрузки = ТипЗнч(Данные); 
			
			Удаление = (ТипДанныхДляВыгрузки = одТипУдалениеОбъекта);
			
			// удаление не отрабатываем
			Если Удаление Тогда
				
				ОтработатьУдалениеОбъекта(Данные, СтрокаСообщенияОбОшибке);
								
				Продолжить;
				
			КонецЕсли;
			
			ТекущийОбъектМетаданных = Данные.Метаданные();
			
			// возможно это удаление объекта
			Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить Тогда
				
				// если это регистр то просто удаляем записи и продолжаем - иначе посылаем информацию об удалении
				Если Метаданные.РегистрыСведений.Содержит(ТекущийОбъектМетаданных) Тогда
					
					Данные.Очистить();
					
				Иначе
				
					ОтработатьУдалениеОбъекта(Данные, СтрокаСообщенияОбОшибке);
									
					Продолжить;
				
				КонецЕсли;
				
			КонецЕсли;
						
			// работа с данными полученными из узла обмена
			// по данным определяем правило конвертации и производим выгрузку данных
			
			ВыгружаетсяРегистр = Ложь;
			ВыгружаютсяКонстанты = Ложь;
			ПравилоОтключено = Ложь;
			
			ПолучитьСтрокуПравилВыгрузкиПоОбъектуОбмена(Данные, ПоследнийОбъектМетаданных, ТекущийОбъектМетаданных, 
				ПоследняяСтрокаПравилаВыгрузки, ТекущаяСтрокаПравилаВыгрузки, ВременныйМассивПравилВыгрузкиДанных, ОбъектДляПравилВыгрузки, 
				ВыгружаетсяРегистр, ВыгружаютсяКонстанты, КонстантыБылиВыгружены);
				
				
			Если ПоследнийОбъектМетаданных <> ТекущийОбъектМетаданных Тогда
				
				
				// после обработки
				Если ПоследняяСтрокаПравилаВыгрузки <> Неопределено
					И ПоследняяСтрокаПравилаВыгрузки.Включить <> 0 Тогда
					
					Если Не ПустаяСтрока(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки) Тогда
					
						Попытка
							
							Если ФлагРежимОтладкиОбработчиков Тогда
								
								Выполнить(ПолучитьСтрокуВызоваОбработчика(ПоследняяСтрокаПравилаВыгрузки, "ПослеОбработки"));
								
							Иначе
								
								Выполнить(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки);
							
							КонецЕсли;
									
						Исключение
									
							ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПоследняяСтрокаПравилаВыгрузки.Имя, , "ПослеОбработкиВыгрузкиДанных");
									
						КонецПопытки;
						
					КонецЕсли;	
									
				КонецЕсли;
				
				
				
				// перед обработкой
				Если ТекущаяСтрокаПравилаВыгрузки <> Неопределено
					И ТекущаяСтрокаПравилаВыгрузки.Включить <> 0 Тогда
					
					Если ФлагКомментироватьОбработкуОбъектов Тогда
		
						ЗаписатьВПротоколВыполнения("ПРАВИЛО ВЫГРУЗКИ ДАННЫХ:  " + СокрЛП(ТекущаяСтрокаПравилаВыгрузки.Имя) + "  (" + СокрЛП(ТекущаяСтрокаПравилаВыгрузки.Наименование) + ")", , Ложь, , 4);
							
					КонецЕсли;
										
					// Обработчик ПередОбработкой
				    Отказ			= Ложь;
					ИсходящиеДанные	= Неопределено;
					ВыборкаДанных	= Неопределено;
					
					Если Не ПустаяСтрока(ТекущаяСтрокаПравилаВыгрузки.ПередОбработкой) Тогда
					
						Попытка
							
							Если ФлагРежимОтладкиОбработчиков Тогда
								
								Выполнить(ПолучитьСтрокуВызоваОбработчика(ТекущаяСтрокаПравилаВыгрузки, "ПередОбработкой"));
								
							Иначе
								
								Выполнить(ТекущаяСтрокаПравилаВыгрузки.ПередОбработкой);
								
							КонецЕсли;
							
						Исключение
							
							ЗаписатьИнформациюОбОшибкеОбработчикиПВД(31, ОписаниеОшибки(), ТекущаяСтрокаПравилаВыгрузки.Имя, , "ПередОбработкойВыгрузкиДанных");
													
						КонецПопытки;
						
					КонецЕсли;
					
					Если Отказ Тогда
						
						// удаляем правило из массива правил
						ТекущаяСтрокаПравилаВыгрузки = Неопределено;
						УдалитьСтрокуДереваПравилВыгрузкиПоТипуВыгрузкиИзМассива(ВременныйМассивПравилВыгрузкиДанных, ТекущаяСтрокаПравилаВыгрузки);
                        ОбъектДляПравилВыгрузки = Неопределено;						
						
					КонецЕсли;
					
				КонецЕсли;				
				
				
			КонецЕсли;
			
			// есть правило по которому нужно делать выгрузку данных
			Если ТекущаяСтрокаПравилаВыгрузки = Неопределено Тогда
				
				Если ТипДанныхДляВыгрузки = мТипРегистрСоответствия Тогда
					
					ВыгрузитьИнформациюОЗарегистрированномОбъекте(ОбъектДляПравилВыгрузки, СтрокаСообщенияОбОшибке);	
					
				КонецЕсли;
				
			ИначеЕсли ТекущаяСтрокаПравилаВыгрузки.Включить <> 0 Тогда
				
				Если ВыгружаетсяРегистр Тогда
					
					ВыгрузкаРегистра(ОбъектДляПравилВыгрузки, ТекущаяСтрокаПравилаВыгрузки, ИсходящиеДанные, НеВыгружатьОбъектыПоСсылкам);
															
				ИначеЕсли ВыгружаютсяКонстанты ТОгда
					
					Свойства	= Менеджеры[ТекущаяСтрокаПравилаВыгрузки.ОбъектВыборки];
					ВыгрузитьНаборКонстант(ТекущаяСтрокаПравилаВыгрузки, Свойства, ИсходящиеДанные, ТекущийОбъектМетаданных.Имя);
					
				Иначе
					
					// для ссылочных данных выполняем проверку на принадлежность объекта к ИБ-приемнику;
					// если объект изначально был создан в ИБ-приемнике, то не выгружаем объект
					Если  НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам
						И ОбъектСозданнВБазеПриемнике(Данные, ТекущаяСтрокаПравилаВыгрузки) Тогда
						
						// не выгружаем объект, если он был создан в базе-приемнике
						
					Иначе
						
						ВыгрузкаОбъектаВыборки(ОбъектДляПравилВыгрузки, ТекущаяСтрокаПравилаВыгрузки, , ИсходящиеДанные, НеВыгружатьОбъектыПоСсылкам);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПоследнийОбъектМетаданных = ТекущийОбъектМетаданных;
			ПоследняяСтрокаПравилаВыгрузки = ТекущаяСтрокаПравилаВыгрузки; 
			
			Если КоличествоНайденныхДляЗаписиОбъектов % КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
				
				Попытка
					ИмяМетаданных = ТекущийОбъектМетаданных.ПолноеИмя();
				Исключение
					ИмяМетаданных = "";
				КонецПопытки;
				
				#Если Клиент Тогда
				Попытка
					Состояние("Запись изменений для узла """ + УзелОбмена.Наименование + 
						""". Прочитано: " + Строка(КоличествоНайденныхДляЗаписиОбъектов) +
						" Объект: " + ИмяМетаданных);
				Исключение
				КонецПопытки;
				#КонецЕсли
				
			КонецЕсли;
			
			Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена 
				И (КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена > 0)
				И (КоличествоНайденныхДляЗаписиОбъектов = КоличествоЭлементовВТранзакцииПриВыгрузкеДляПлановОбмена) Тогда
				
				// промежуточную транзакцию закрываем и открываем новую
				ЗафиксироватьТранзакцию();
				НачатьТранзакцию();
				
				КоличествоНайденныхДляЗаписиОбъектов = 0;
			КонецЕсли;
			

		КонецЦикла;
		
		Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
		
		// Завершаем запись сообщения
		ЗаписьСообщения.ЗакончитьЗапись();
				
		ЗаписьXML.Закрыть();
		
		
		
		
		// событие после обработки
		Если ПоследняяСтрокаПравилаВыгрузки <> Неопределено
			И ПоследняяСтрокаПравилаВыгрузки.Включить <> 0 Тогда
			
			Если Не ПустаяСтрока(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки) Тогда
			
				Попытка
					
					Если ФлагРежимОтладкиОбработчиков Тогда
						
						Выполнить(ПолучитьСтрокуВызоваОбработчика(ПоследняяСтрокаПравилаВыгрузки, "ПослеОбработки"));
						
					Иначе
						
						Выполнить(ПоследняяСтрокаПравилаВыгрузки.ПослеОбработки);
						
					КонецЕсли;
					
				Исключение
					
					ЗаписатьИнформациюОбОшибкеОбработчикиПВД(32, ОписаниеОшибки(), ПоследняяСтрокаПравилаВыгрузки.Имя, , "ПослеОбработкиВыгрузкиДанных");
					
				КонецПопытки;
				
			КонецЕсли;
					
		КонецЕсли;
		
		
	Исключение
		
		Если ИспользоватьТранзакцииПриВыгрузкеДляПлановОбмена Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ЗП = ПолучитьСтруктуруЗаписиПротокола(72, ОписаниеОшибки());
		ЗП.УзелПланаОбмена  = УзелОбмена;
		ЗП.Объект = Данные;
		ЗП.ТипОбъекта = ТипДанныхДляВыгрузки;
		
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(72, ЗП, Истина);
						
		ЗаписьXML.Закрыть();
		
		Возврат Ложь;
				
	КонецПопытки;
	
	Возврат Истина;
			
КонецФункции

Функция ОбъектСозданнВБазеПриемнике(Данные, ТекущаяСтрокаПравилаВыгрузки)
	
	Результат = Ложь;
	
	Если ТекущаяСтрокаПравилаВыгрузки.НеВыгружатьОбъектыСозданныеВБазеПриемнике = Истина Тогда
		
		// проверка наличия информации по объекту в регистре где хранится информация о местах создания объектов
		мЗапросИнформацииОМестеСозданияОбъекта.УстановитьПараметр("Объект", Данные.Ссылка);
		
		РезультатЗапроса = мЗапросИнформацииОМестеСозданияОбъекта.Выполнить();
		
		Результат = Не РезультатЗапроса.Пустой();
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Открывает файл обмена, читает атрибуты корневого узла файла в соответствии с форматом обмена
//
// Параметры:
//  ТолькоПрочитатьШапку - Булево. если Истина, то после прочтения шапки файла обмена
//  (корневой узел), файл закрывается
//
Процедура ОткрытьФайлЗагрузки(ТолькоПрочитатьШапку=Ложь, ДанныеФайлаОбмена = "") Экспорт

	Если ПустаяСтрока(ИмяФайлаОбмена) И ТолькоПрочитатьШапку Тогда
		ДатаВыгрузкиДанных = "";
		ВерсияПравилОбмена = "";
		Комментарий        = "";
		Возврат;
	КонецЕсли;


    ИмяФайлаЗагрузкиДанных = ИмяФайлаОбмена;
	
	
	// Архивные файлы будем идентифицировать по расширению ".aml"
	Если Найти(ИмяФайлаОбмена, ".aml") > 0 Тогда
		
		ИмяФайлаЗагрузкиДанных = РаспаковатьВходящийФайлОбмена();		 
		
	КонецЕсли; 
	
	
	ФлагОшибки = Ложь;
	ФайлОбмена = Новый ЧтениеXML();

	Попытка
		Если НЕ ПустаяСтрока(ДанныеФайлаОбмена) Тогда
			ФайлОбмена.УстановитьСтроку(ДанныеФайлаОбмена);
		Иначе
			ФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
		КонецЕсли;
	Исключение
		ЗаписатьВПротоколВыполнения(5);
		Возврат;
	КонецПопытки;
	
	ФайлОбмена.Прочитать();


	мАтрибутыФайлаОбмена = Новый Структура;
	
	
	Если ФайлОбмена.ЛокальноеИмя = "ФайлОбмена" Тогда
		
		мАтрибутыФайлаОбмена.Вставить("ВерсияФормата",            одАтрибут(ФайлОбмена, одТипСтрока, "ВерсияФормата"));
		мАтрибутыФайлаОбмена.Вставить("ДатаВыгрузки",             одАтрибут(ФайлОбмена, одТипДата,   "ДатаВыгрузки"));
		мАтрибутыФайлаОбмена.Вставить("ИмяКонфигурацииИсточника", одАтрибут(ФайлОбмена, одТипСтрока, "ИмяКонфигурацииИсточника"));
		мАтрибутыФайлаОбмена.Вставить("ИмяКонфигурацииПриемника", одАтрибут(ФайлОбмена, одТипСтрока, "ИмяКонфигурацииПриемника"));
		мАтрибутыФайлаОбмена.Вставить("ИдПравилКонвертации",      одАтрибут(ФайлОбмена, одТипСтрока, "ИдПравилКонвертации"));

		ДатаВыгрузкиДанных = мАтрибутыФайлаОбмена.ДатаВыгрузки;
		Комментарий        = одАтрибут(ФайлОбмена, одТипСтрока, "Комментарий");
		
	Иначе
		
		ЗаписатьВПротоколВыполнения(9);
		Возврат;
		
	КонецЕсли;


	ФайлОбмена.Прочитать();
			
	ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
	Если ИмяУзла = "ПравилаОбмена" Тогда
		ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
	Иначе
		ФайлОбмена.Закрыть();
		ФайлОбмена = Новый ЧтениеXML();
		Попытка
			
			Если НЕ ПустаяСтрока(ДанныеФайлаОбмена) Тогда
				ФайлОбмена.УстановитьСтроку(ДанныеФайлаОбмена);
			Иначе
				ФайлОбмена.ОткрытьФайл(ИмяФайлаЗагрузкиДанных);
			КонецЕсли;
			
		Исключение
			ЗаписатьВПротоколВыполнения(5);
			Возврат;
		КонецПопытки;
		ФайлОбмена.Прочитать();
	КонецЕсли; 

	мБылиПрочитаныПравилаОбменаПриЗагрузке = Истина;
	
	Если ТолькоПрочитатьШапку Тогда
		ФайлОбмена.Закрыть();
		Возврат;
	КонецЕсли;
   
КонецПроцедуры // ОткрытьФайлЗагрузки()

Процедура ЗаполнитьСписокТиповДоступныхДляУдаления(Список) Экспорт
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		Список.Добавить("СправочникСсылка." + ОбъектМД.Имя);
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		Список.Добавить("ПланВидовХарактеристикСсылка." + ОбъектМД.Имя);
	КонецЦикла;

    Для каждого ОбъектМД Из Метаданные.Документы Цикл
		Список.Добавить("ДокументСсылка." + ОбъектМД.Имя);
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		Подчинен		=	(ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		Если Подчинен Тогда Продолжить КонецЕсли;
		Список.Добавить("РегистрСведенийЗапись." + ОбъектМД.Имя);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает состояние пометки у подчиненных строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиПодчиненных(ТекСтрока, Реквизит) Экспорт

	Подчиненные = ТекСтрока.Строки;

	Если Подчиненные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка из Подчиненные Цикл
		
		Если Строка.НастройкиПостроителя = Неопределено 
			И Реквизит = "ИспользоватьОтбор" Тогда
			
			Строка[Реквизит] = 0;
			
		Иначе
			
			Строка[Реквизит] = ТекСтрока[Реквизит];
			
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(Строка, Реквизит);
		
	КонецЦикла;
		
КонецПроцедуры // УстановитьПометкиПодчиненных()

// Устанавливает состояние пометки у родительских строк строки дерева значений
// в зависимости от пометки текущей строки
//
// Параметры:
//  ТекСтрока      - Строка дерева значений
// 
Процедура УстановитьПометкиРодителей(ТекСтрока, Реквизит) Экспорт

	Родитель = ТекСтрока.Родитель;
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ТекСостояние       = Родитель[Реквизит];

	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;

	Если Реквизит = "ИспользоватьОтбор" Тогда
		
		Для Каждого Строка из Родитель.Строки Цикл
			
			Если Строка[Реквизит] = 0 И 
				Строка.НастройкиПостроителя <> Неопределено Тогда
				
				НайденыВыключенные = Истина;
				
			ИначеЕсли Строка[Реквизит] = 1 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Строка из Родитель.Строки Цикл
			Если Строка[Реквизит] = 0 Тогда
				НайденыВыключенные = Истина;
			ИначеЕсли Строка[Реквизит] = 1
				ИЛИ Строка[Реквизит] = 2 Тогда
				НайденыВключенные  = Истина;
			КонецЕсли; 
			Если НайденыВключенные И НайденыВыключенные Тогда
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли;

	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;

	Если Включить = ТекСостояние Тогда
		Возврат;
	Иначе
		Родитель[Реквизит] = Включить;
		УстановитьПометкиРодителей(Родитель, Реквизит);
	КонецЕсли; 
	
КонецПроцедуры // УстановитьПометкиРодителей()


Функция ОбновитьПометкиВсехРодителейУПравилВыгрузки(СтрокиДереваПравилВыгрузки, НужноУстанавливатьПометки = Истина) Экспорт
	
	Если СтрокиДереваПравилВыгрузки.Строки.Количество() = 0 Тогда
		
		Если НужноУстанавливатьПометки Тогда
			УстановитьПометкиРодителей(СтрокиДереваПравилВыгрузки, "Включить");	
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		НужныПометки = Истина;
		
		Для Каждого СтрокаДереваПравил Из СтрокиДереваПравилВыгрузки.Строки Цикл
			
			РезультатУстановки = ОбновитьПометкиВсехРодителейУПравилВыгрузки(СтрокаДереваПравил, НужныПометки);
			Если НужныПометки = Истина Тогда
				НужныПометки = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецФункции


Процедура ЗаполнитьСвойстваДляПоиска(СтруктураДанных, ПКС)
	
	Для Каждого СтрокаПолей Из ПКС Цикл
		
		Если СтрокаПолей.ЭтоГруппа ТОгда
						
			Если СтрокаПолей.ВидПриемника = "ТабличнаяЧасть" 
				ИЛИ Найти(СтрокаПолей.ВидПриемника, "НаборДвижений") > 0 Тогда
				
				ИмяСтруктурыПриемника = СтрокаПолей.Приемник + ?(СтрокаПолей.ВидПриемника = "ТабличнаяЧасть", "ТабличнаяЧасть", "НаборЗаписей");
				
				ВнутренняяСтруктура = СтруктураДанных[ИмяСтруктурыПриемника];
				
				Если ВнутренняяСтруктура = Неопределено Тогда
					ВнутренняяСтруктура = Новый Соответствие();
				КонецЕсли;
				
				СтруктураДанных[ИмяСтруктурыПриемника] = ВнутренняяСтруктура;
				
			Иначе
				
				ВнутренняяСтруктура = СтруктураДанных;	
				
			КонецЕсли;
			
			ЗаполнитьСвойстваДляПоиска(ВнутренняяСтруктура, СтрокаПолей.ПравилаГруппы);
									
		Иначе
			
			Если ПустаяСтрока(СтрокаПолей.ТипПриемника)	Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураДанных[СтрокаПолей.Приемник] = СтрокаПолей.ТипПриемника;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьЛишниеЭлементыИзСоответствия(СтруктураДанных)
	
	Для Каждого Элемент Из СтруктураДанных Цикл
		
		Если ТипЗнч(Элемент.Значение) = одТипСоответствие Тогда
			
			УдалитьЛишниеЭлементыИзСоответствия(Элемент.Значение);
			
			Если Элемент.Значение.Количество() = 0 Тогда
				СтруктураДанных.Удалить(Элемент.Ключ);
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ЗаполнитьИнформациюПоТипамДанныхПриемника(СтруктураДанных, Правила)
	
	Для Каждого Строка Из Правила Цикл
		
		Если ПустаяСтрока(Строка.Приемник) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеСтруктуры = СтруктураДанных[Строка.Приемник];
		Если ДанныеСтруктуры = Неопределено Тогда
			
			ДанныеСтруктуры = Новый Соответствие();
			СтруктураДанных[Строка.Приемник] = ДанныеСтруктуры;
			
		КонецЕсли;
		
		// бежим по полям поиск и прочим пкс и запоминаем типы данных
		ЗаполнитьСвойстваДляПоиска(ДанныеСтруктуры, Строка.СвойстваПоиска);
				
		// Свойства
		ЗаполнитьСвойстваДляПоиска(ДанныеСтруктуры, Строка.Свойства);
		
	КонецЦикла;
	
	УдалитьЛишниеЭлементыИзСоответствия(СтруктураДанных);	
	
КонецПроцедуры

Процедура СоздатьСтрокуСТипамиСвойств(ЗаписьXML, ТипыСвойств)
	
	Если ТипЗнч(ТипыСвойств.Значение) = одТипСоответствие Тогда
		
		Если ТипыСвойств.Значение.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьНачалоЭлемента(ТипыСвойств.Ключ);
		
		Для Каждого Эл Из ТипыСвойств.Значение Цикл
			СоздатьСтрокуСТипамиСвойств(ЗаписьXML, Эл);
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	Иначе		
		
		одЗаписатьЭлемент(ЗаписьXML, ТипыСвойств.Ключ, ТипыСвойств.Значение);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьСтрокуСТипамиДляПриемника(СтруктураДанных)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ИнформацияОТипахДанных");	
	
	Для Каждого Строка Из СтруктураДанных Цикл
		
		ЗаписьXML.ЗаписатьНачалоЭлемента("ТипДанных");
		УстановитьАтрибут(ЗаписьXML, "Имя", Строка.Ключ);
		
		Для Каждого СтрокаПодчинения Из Строка.Значение Цикл
			
			СоздатьСтрокуСТипамиСвойств(ЗаписьXML, СтрокаПодчинения);	
			
		КонецЦикла;
		
		ЗаписьXML.ЗаписатьКонецЭлемента();
		
	КонецЦикла;	
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	СтрокаРезультата = ЗаписьXML.Закрыть();
	Возврат СтрокаРезультата;
	
КонецФункции

Процедура ЗагрузитьОдинТипДанных(ПравилаОбмена, СоответствиеТипа, ИмяЛокЭлемента)
	
	ИмяУзла = ИмяЛокЭлемента; 	
	
	ПравилаОбмена.Прочитать();
	
	Если (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		
		ПравилаОбмена.Прочитать();
		Возврат;
		
	ИначеЕсли ПравилаОбмена.ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			
		// это новый элемент
		НовоеСоответствие = Новый Соответствие;
		СоответствиеТипа.Вставить(ИмяУзла, НовоеСоответствие);
		
		ЗагрузитьОдинТипДанных(ПравилаОбмена, НовоеСоответствие, ПравилаОбмена.ЛокальноеИмя);			
		ПравилаОбмена.Прочитать();
		
	Иначе
		СоответствиеТипа.Вставить(ИмяУзла, Тип(ПравилаОбмена.Значение));
		ПравилаОбмена.Прочитать();
	КонецЕсли;	
	
	ЗагрузитьСоответствиеТиповДляОдногоТипа(ПравилаОбмена, СоответствиеТипа);
	
КонецПроцедуры

Процедура ЗагрузитьСоответствиеТиповДляОдногоТипа(ПравилаОбмена, СоответствиеТипа)
	
	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		Если (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
		    Прервать;
			
		КонецЕсли;
		
		// прочитали начало элемента
		ПравилаОбмена.Прочитать();
		
		Если ПравилаОбмена.ТипУзла = одТипУзлаXML_НачалоЭлемента Тогда
			
			// это новый элемент
			НовоеСоответствие = Новый Соответствие;
			СоответствиеТипа.Вставить(ИмяУзла, НовоеСоответствие);
			
			ЗагрузитьОдинТипДанных(ПравилаОбмена, НовоеСоответствие, ПравилаОбмена.ЛокальноеИмя);			
			
		Иначе
			СоответствиеТипа.Вставить(ИмяУзла, Тип(ПравилаОбмена.Значение));
			ПравилаОбмена.Прочитать();
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьИнформациюОТипахДанных()
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "ТипДанных" Тогда
			
			ИмяТипа = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
			
			СоответствиеТипа = Новый Соответствие;
			мСоответствиеТиповДанныхДляЗагрузки.Вставить(Тип(ИмяТипа), СоответствиеТипа);

			ЗагрузитьСоответствиеТиповДляОдногоТипа(ФайлОбмена, СоответствиеТипа);	
			
		ИначеЕсли (ИмяУзла = "ИнформацияОТипахДанных") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗагрузитьЗначенияПараметровОбменаДанными()
	
	Имя = одАтрибут(ФайлОбмена, одТипСтрока, "Имя");
		
	ТипСвойства = ПолучитьТипСвойстваПоДополнительнымДанным(Неопределено, Имя);
	
	Значение = ПрочитатьСвойство(ТипСвойства);
	
	Параметры.Вставить(Имя, Значение);	
	
	АлгоритмПослеЗагрузкиПараметра = "";
	Если СобытияПослеЗагрузкиПараметров.Свойство(Имя, АлгоритмПослеЗагрузкиПараметра)
		И Не ПустаяСтрока(АлгоритмПослеЗагрузкиПараметра) Тогда
		
		Выполнить(АлгоритмПослеЗагрузкиПараметра);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗагрузитьИнформациюОПользовательскихПоляхПоиска()
	
	ИмяПравила = "";
	НастройкаПоиска = "";
	
	Пока ФайлОбмена.Прочитать() Цикл
		
		ИмяУзла = ФайлОбмена.ЛокальноеИмя;
		
		Если ИмяУзла = "ИмяПравила" Тогда
			
			ИмяПравила = одЗначениеЭлемента(ФайлОбмена, одТипСтрока);
			
		ИначеЕсли ИмяУзла = "НастройкаПоиска" Тогда
			
			НастройкаПоиска = одЗначениеЭлемента(ФайлОбмена, одТипСтрока);
			мИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных.Вставить(ИмяПравила, НастройкаПоиска);	
			
		ИначеЕсли (ИмяУзла = "НастройкаПользовательскогоПоиска") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьИнформациюИзКЭШаСсылок()
	
	ИмяПриемника = одАтрибут(ФайлОбмена, одТипСтрока, "ИмяПриемника");
	ФайлОбмена.Прочитать();
	СтрокаОставляемыхСсылок = одЗначениеЭлемента(ФайлОбмена, одТипСтрока);
	ФайлОбмена.Прочитать();
	ТипДанныхДляОбновления = Тип(ИмяПриемника);
	
	ТаблицаДляПоиска = ЗагруженныеОбъекты[ТипДанныхДляОбновления];
	Если ТаблицаДляПоиска = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаНомеров = Новый ТаблицаЗначений();
	ТаблицаНомеров.Колонки.Добавить("Номер");
	ТаблицаНомеров.Индексы.Добавить("Номер");
	
	Пока Не ПустаяСтрока(СтрокаОставляемыхСсылок) Цикл
		
		ПозицияЗапятой = Найти(СтрокаОставляемыхСсылок, ",");
		Если ПозицияЗапятой = 0 Тогда
			
			ОчередноеЧисло = Число(СтрокаОставляемыхСсылок);
			СтрокаОставляемыхСсылок = "";
			
		Иначе
			
			ВременнаяСтрока = СокрЛП(Сред(СтрокаОставляемыхСсылок, 1, ПозицияЗапятой - 1));
			
			ОчередноеЧисло = Число(ВременнаяСтрока);
			СтрокаОставляемыхСсылок = Сред(СтрокаОставляемыхСсылок, ПозицияЗапятой + 1);	
			
		КонецЕсли;
		
		СтрокаДобавления = ТаблицаНомеров.Добавить();
		СтрокаДобавления.Номер = ОчередноеЧисло;
		
	КонецЦикла;
	
	НомерСтроки = ТаблицаДляПоиска.Количество() - 1;
	
	Пока НомерСтроки >= 0 Цикл
		
		СтрокаТаблицы = ТаблицаДляПоиска[НомерСтроки];
		
		Если ТаблицаНомеров.Найти(СтрокаТаблицы.НППСсылки, "Номер") = Неопределено Тогда
			
			// объект может еще быть не записан в информационную базу. Его нужно записать
			
			НайтиИЗаписатьНеЗаписанныйОбъект(СтрокаТаблицы.НППСсылки);
			
			ТаблицаДляПоиска.Удалить(СтрокаТаблицы);
			
		КонецЕсли;
		
		НомерСтроки = НомерСтроки - 1;		
			
	КонецЦикла;
	
КонецПроцедуры

// Осуществляет загрузку правил обмена в соответствии с форматом
//
// Параметры:
//  Источник       - Объект, из которого осуществляется загрузка правил обмена;
//  ТипИсточника   - Строка, указывающая тип источника: "XMLФайл", "ЧтениеXML", "Строка"
// 
Процедура ЗагрузитьПравилаОбмена(Источник="", ТипИсточника="XMLФайл", СтрокаСообщенияОбОшибке = "", 
	ЗагружатьТолькоЗаголовокПравил = Ложь) Экспорт

	#Если Клиент Тогда
	Состояние("Выполняется загрузка правил обмена ...");
	#КонецЕсли

    ИнициализироватьМенеджерыИСообщения();
	
	ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта    = Ложь;
	ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта     = Ложь;
	
	ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Ложь;

	ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта    = Ложь;
	ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта     = Ложь;
	
	СоздатьСтруктуруКонвертации();
	
	мТаблицаПравилКонвертацииСвойств = Новый ТаблицаЗначений;
	ИнициализацияТаблицыПравилКонвертацииСвойств(мТаблицаПравилКонвертацииСвойств);


	// Возможно выбраны встроенные правила обмена (один из макетов)
	
	ИмяВременногоФайлаПравилОбмена = "";
	Если ПустаяСтрока(Источник) Тогда
		
		Источник = ИмяФайлаПравилОбмена;
		Если мСписокМакетовПравилОбмена.НайтиПоЗначению(Источник) <> Неопределено Тогда
			Для каждого Макет Из ЭтотОбъект.Метаданные().Макеты Цикл
				Если Макет.Синоним = Источник Тогда
					Источник = Макет.Имя;
					Прервать;
				КонецЕсли; 
			КонецЦикла; 
			МакетПравилОбмена              = ПолучитьМакет(Источник);
			УникальныйИдентификатор        = Новый УникальныйИдентификатор();
			ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИдентификатор + ".xml";
			МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
			Источник = ИмяВременногоФайлаПравилОбмена;
		КонецЕсли;
		
	КонецЕсли;

	
	Если ТипИсточника="XMLФайл" Тогда
		
		Если ПустаяСтрока(Источник) Тогда
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(12);
			Возврат; 
		КонецЕсли;
		
		Файл = Новый Файл(Источник);
		Если Не Файл.Существует() Тогда
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(3);
			Возврат; 
		КонецЕсли;
		
		ФайлПравилЗаархивирован = (Файл.Расширение = ".aml");
		
		Если ФайлПравилЗаархивирован Тогда
			
			// распаковка файла правил
			Источник = РаспаковатьВходящийФайлОбмена(Источник);
			
		КонецЕсли;
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.ОткрытьФайл(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="Строка" Тогда
		
		ПравилаОбмена = Новый ЧтениеXML();
		ПравилаОбмена.УстановитьСтроку(Источник);
		ПравилаОбмена.Прочитать();
		
	ИначеЕсли ТипИсточника="ЧтениеXML" Тогда
		
		ПравилаОбмена = Источник;
		
	КонецЕсли; 
	

	Если Не ((ПравилаОбмена.ЛокальноеИмя = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_НачалоЭлемента)) Тогда
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(6);
		Возврат;
	КонецЕсли;


	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("ПравилаОбмена");
	

	Пока ПравилаОбмена.Прочитать() Цикл
		
		ИмяУзла = ПравилаОбмена.ЛокальноеИмя;
		
		#Если Клиент тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
        		
		// Реквизиты конвертации
		Если ИмяУзла = "ВерсияФормата" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("ВерсияФормата", Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Ид" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Ид",                   Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "Наименование" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Наименование",         Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
		ИначеЕсли ИмяУзла = "ДатаВремяСоздания" Тогда
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипДата);
			Конвертация.Вставить("ДатаВремяСоздания",    Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			ВерсияПравилОбмена = Конвертация.ДатаВремяСоздания;
		ИначеЕсли ИмяУзла = "Источник" Тогда
			
			ВерсияПлатформыИсточника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияПлатформы");
			СинонимКонфигурацииИсточника = ПравилаОбмена.ПолучитьАтрибут ("СинонимКонфигурации");
			ВерсияКонфигурацииИсточника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияКонфигурации");
			
			Конвертация.Вставить("ВерсияПлатформыИсточника", ВерсияПлатформыИсточника);
			Конвертация.Вставить("СинонимКонфигурацииИсточника", СинонимКонфигурацииИсточника);
			Конвертация.Вставить("ВерсияКонфигурацииИсточника", ВерсияКонфигурацииИсточника);
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Источник",             Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
		ИначеЕсли ИмяУзла = "Приемник" Тогда
			
			ВерсияПлатформыПриемника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияПлатформы");
			СинонимКонфигурацииПриемника = ПравилаОбмена.ПолучитьАтрибут ("СинонимКонфигурации");
			ВерсияКонфигурацииПриемника = ПравилаОбмена.ПолучитьАтрибут ("ВерсияКонфигурации");
			
			Конвертация.Вставить("ВерсияПлатформыПриемника", ВерсияПлатформыПриемника);
			Конвертация.Вставить("СинонимКонфигурацииПриемника", СинонимКонфигурацииПриемника);
			Конвертация.Вставить("ВерсияКонфигурацииПриемника", ВерсияКонфигурацииПриемника);
			
			Значение = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			Конвертация.Вставить("Приемник",             Значение);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Значение);
			
			Если ЗагружатьТолькоЗаголовокПравил Тогда
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ИмяУзла = "Комментарий" Тогда
			одПропустить(ПравилаОбмена);

		ИначеЕсли ИмяУзла = "Параметры" Тогда
			ЗагрузитьПараметры(ПравилаОбмена, ЗаписьXML)

		// События конвертации
		
		ИначеЕсли ИмяУзла = "" Тогда
		
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиПравилОбмена" Тогда
			Конвертация.Вставить("ПослеЗагрузкиПравилОбмена", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
		
		ИначеЕсли ИмяУзла = "ПередВыгрузкойДанных" Тогда
			Конвертация.Вставить("ПередВыгрузкойДанных", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередПолучениемИзмененныхОбъектов" Тогда
			Конвертация.Вставить("ПередПолучениемИзмененныхОбъектов", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));			
			
		ИначеЕсли ИмяУзла = "ПослеПолученияИнформацииОбУзлахОбмена" Тогда
			
			Конвертация.Вставить("ПослеПолученияИнформацииОбУзлахОбмена", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));			
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеПолученияИнформацииОбУзлахОбмена);
						
		ИначеЕсли ИмяУзла = "ПослеВыгрузкиДанных" Тогда
			Конвертация.Вставить("ПослеВыгрузкиДанных",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПередОтправкойИнформацииОбУдалении" Тогда
			Конвертация.Вставить("ПередОтправкойИнформацииОбУдалении",  одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));

		ИначеЕсли ИмяУзла = "ПередВыгрузкойОбъекта" Тогда
			Конвертация.Вставить("ПередВыгрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПередВыгрузкойОбъекта = Не ПустаяСтрока(Конвертация.ПередВыгрузкойОбъекта);

		ИначеЕсли ИмяУзла = "ПослеВыгрузкиОбъекта" Тогда
			Конвертация.Вставить("ПослеВыгрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПослеВыгрузкиОбъекта = Не ПустаяСтрока(Конвертация.ПослеВыгрузкиОбъекта);

		ИначеЕсли ИмяУзла = "ПередЗагрузкойОбъекта" Тогда
			Конвертация.Вставить("ПередЗагрузкойОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПередЗагрузкойОбъекта = Не ПустаяСтрока(Конвертация.ПередЗагрузкойОбъекта);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПередЗагрузкойОбъекта);

		ИначеЕсли ИмяУзла = "ПослеЗагрузкиОбъекта" Тогда
			Конвертация.Вставить("ПослеЗагрузкиОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПослеЗагрузкиОбъекта = Не ПустаяСтрока(Конвертация.ПослеЗагрузкиОбъекта);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеЗагрузкиОбъекта);

		ИначеЕсли ИмяУзла = "ПередКонвертациейОбъекта" Тогда
			Конвертация.Вставить("ПередКонвертациейОбъекта", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			ЕстьГлобальныйОбработчикПередКонвертациейОбъекта = Не ПустаяСтрока(Конвертация.ПередКонвертациейОбъекта);
			
		ИначеЕсли ИмяУзла = "ПередЗагрузкойДанных" Тогда
			Конвертация.ПередЗагрузкойДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПередЗагрузкойДанных);
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиДанных" Тогда
            Конвертация.ПослеЗагрузкиДанных = одЗначениеЭлемента(ПравилаОбмена, одТипСтрока);
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПослеЗагрузкиДанных);
			
		ИначеЕсли ИмяУзла = "ПослеЗагрузкиПараметров" Тогда
            Конвертация.Вставить("ПослеЗагрузкиПараметров", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			
		ИначеЕсли ИмяУзла = "ПриПолученииИнформацииОбУдалении" Тогда
            Конвертация.Вставить("ПриПолученииИнформацииОбУдалении", одЗначениеЭлемента(ПравилаОбмена, одТипСтрока));
			одЗаписатьЭлемент(ЗаписьXML, ИмяУзла, Конвертация.ПриПолученииИнформацииОбУдалении);
			
		ИначеЕсли ИмяУзла = "УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике" Тогда
            Конвертация.УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике = одЗначениеЭлемента(ПравилаОбмена, одТипБулево);
						
		// Правила
		
		ИначеЕсли ИмяУзла = "ПравилаВыгрузкиДанных" Тогда
			Если РежимОбмена = "Загрузка" Тогда
				одПропустить(ПравилаОбмена);
			Иначе
				ЗагрузитьПравилаВыгрузки(ПравилаОбмена);
			КонецЕсли; 
			
		ИначеЕсли ИмяУзла = "ПравилаКонвертацииОбъектов" Тогда
			ЗагрузитьПравилаКонвертации(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли ИмяУзла = "ПравилаОчисткиДанных" Тогда
			ЗагрузитьПравилаОчистки(ПравилаОбмена, ЗаписьXML)

			
		// Алгоритмы / Запросы / Обработки
		
		ИначеЕсли ИмяУзла = "Алгоритмы" Тогда
			ЗагрузитьАлгоритмы(ПравилаОбмена, ЗаписьXML);
			
		ИначеЕсли ИмяУзла = "Запросы" Тогда
			ЗагрузитьЗапросы(ПравилаОбмена, ЗаписьXML);

		ИначеЕсли ИмяУзла = "Обработки" Тогда
			ЗагрузитьОбработки(ПравилаОбмена, ЗаписьXML);
			
		// Выход
		ИначеЕсли (ИмяУзла = "ПравилаОбмена") И (ПравилаОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
		    Если РежимОбмена <> "Загрузка" Тогда
				ПравилаОбмена.Закрыть();
			КонецЕсли;
			Прервать;

			
		// Ошибка формата
		Иначе
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(7);
			Возврат;
		КонецЕсли;
	КонецЦикла;


	ЗаписьXML.ЗаписатьКонецЭлемента();
	мXMLПравила = ЗаписьXML.Закрыть();
	
	Для Каждого СтрокаПравилВыгрузки Из ТаблицаПравилВыгрузки.Строки Цикл
		ОбновитьПометкиВсехРодителейУПравилВыгрузки(СтрокаПравилВыгрузки, Истина);
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли


	// Удаляем временный файл правил
	Если Не ПустаяСтрока(ИмяВременногоФайлаПравилОбмена) Тогда
		Попытка
			УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);
		Исключение 
		КонецПопытки;
	КонецЕсли;
	
	Если ТипИсточника="XMLФайл"
		И ФайлПравилЗаархивирован Тогда
		
		Попытка
			УдалитьФайлы(Источник);
		Исключение 
		КонецПопытки;	
		
	КонецЕсли;
	
	// дополнительно нужна информация по типам данных приемника для быстрой загрузки данных
	СтруктураДанных = Новый Соответствие();
	ЗаполнитьИнформациюПоТипамДанныхПриемника(СтруктураДанных, ТаблицаПравилКонвертации);
	
	мСтрокаТиповДляПриемника = СоздатьСтрокуСТипамиДляПриемника(СтруктураДанных);
	
	// нужно вызвать событие после загрузки правил обмена
	ТекстСобытияПослеЗагрузкиПравилОбмена = "";
	Если Конвертация.Свойство("ПослеЗагрузкиПравилОбмена", ТекстСобытияПослеЗагрузкиПравилОбмена)
		И Не ПустаяСтрока(ТекстСобытияПослеЗагрузкиПравилОбмена) Тогда
		
		Попытка
			Выполнить(ТекстСобытияПослеЗагрузкиПравилОбмена);
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(75, ОписаниеОшибки(), "ПослеЗагрузкиПравилОбмена (конвертация)");
			Отказ = Истина;
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки;	
		
	КонецЕсли;
	
	ИнициализироватьПервоначальныеЗначенияПараметров();
	
КонецПроцедуры // ЗагрузитьПравилаОбмена()

Процедура ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки)
	
	мСчетчикЗагруженныхОбъектов = 1 + мСчетчикЗагруженныхОбъектов;
				
	Если мСчетчикЗагруженныхОбъектов % КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		
		Если ПоследнийОбъектЗагрузки <> Неопределено Тогда
			
			СтрокаОбъектаЗагрузки = ", Объект: " + Строка(ТипЗнч(ПоследнийОбъектЗагрузки)) + "  " + Строка(ПоследнийОбъектЗагрузки);
								
		Иначе
			
			СтрокаОбъектаЗагрузки = "";
			
		КонецЕсли;
		
		#Если Клиент Тогда
		Состояние("Обработано объектов:  " + мСчетчикЗагруженныхОбъектов + " " + СтрокаОбъектаЗагрузки);
		#КонецЕсли
						
	КонецЕсли;
	
	Если мСчетчикЗагруженныхОбъектов % 100 = 0
		И мГлобальныйСтекНеЗаписанныхОбъектов.Количество() > 100 Тогда
		
		ПровестиЗаписьНеЗаписанныхОбъектов();
		
	КонецЕсли;
	
	Если ИспользоватьТранзакции
		И КоличествоОбъектовНаТранзакцию > 0 
		И мСчетчикЗагруженныхОбъектов % КоличествоОбъектовНаТранзакцию = 0 Тогда
		
		ЗафиксироватьТранзакцию();
		НачатьТранзакцию();
		
	КонецЕсли;	

КонецПроцедуры

Процедура УдалитьОбъектПоСсылке(Ссылка, СтрокаСообщенияОбОшибке)
	
	Объект = Ссылка.ПолучитьОбъект();
	
	Если Объект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСобытия = "";
	
	Если Конвертация.Свойство("ПриПолученииИнформацииОбУдалении", ТекстСобытия) И Не ПустаяСтрока(ТекстСобытия) Тогда
		
		Отказ = Ложь;
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПриПолученииИнформацииОбУдалении"));
				
			Иначе
				
				Выполнить(ТекстСобытия);
				
			КонецЕсли;
			
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(77, ОписаниеОшибки(), "ПриПолученииИнформацииОбУдалении (конвертация)");
			Отказ = Истина;		
			
			Если Не ФлагРежимОтладки Тогда
				ВызватьИсключение СтрокаСообщенияОбОшибке;
			КонецЕсли;
			
		КонецПопытки;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьОбъект(Объект, Истина);	
			
КонецПроцедуры

Процедура ВыполнитьУдалениеОбъектаПоСсылкеВИсточнике(СтрокаСсылкиИсточника, СтрокаСообщенияОбОшибке)
	
	Если Не ЗначениеЗаполнено(СтрокаСсылкиИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоответствиеОбъектовДляОбмена.СобственнаяСсылка КАК СобственнаяСсылка
	               |	
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
				   |ГДЕ
				   |	СоответствиеОбъектовДляОбмена.УзелОбмена = &УзелОбмена
				   |	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = &СсылкаВДругойИБ";
				   
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбменаЗагрузкаДанных);
	Запрос.УстановитьПараметр("СсылкаВДругойИБ", СтрокаСсылкиИсточника);
				   
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаРезультата Цикл
		
		УдалитьОбъектПоСсылке(СтрокаТаблицы.СобственнаяСсылка, СтрокаСообщенияОбОшибке);	
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПроизвестиЧтениеДанных(РезультирующаяСтрокаСИнформациейОбОшибке = "") Экспорт
	
	Попытка
		
		ОбработатьПравилаОчистки(ТаблицаПравилОчистки.Строки);
		
	    Если ИспользоватьТранзакции Тогда
			НачатьТранзакцию();
		КонецЕсли;	

		Пока ФайлОбмена.Прочитать() Цикл
			
			ИмяУзла = ФайлОбмена.ЛокальноеИмя;
			
			#Если Клиент тогда
			ОбработкаПрерыванияПользователя();
			#КонецЕсли
			
			Если ИмяУзла = "Объект" Тогда
				
				ПоследнийОбъектЗагрузки = ПрочитатьОбъект();
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);
				
			ИначеЕсли ИмяУзла = "НаборЗаписейРегистра" Тогда
				
				// набор записей регистра
				ПоследнийОбъектЗагрузки = ПрочитатьНаборЗаписейРегистра();
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);				
				
			ИначеЕсли ИмяУзла = "УдалениеОбъекта" Тогда
				
				// обработка удаления объекта из информационной базы
				СсылкаУдаленияСтрокой = одАтрибут(ФайлОбмена, одТипСтрока, "СсылкаНаОбъект");
				
				// по ссылке находим объект
				// в регистре СоответствиеОбъектовДляОбмена
				
				ВыполнитьУдалениеОбъектаПоСсылкеВИсточнике(СсылкаУдаленияСтрокой, РезультирующаяСтрокаСИнформациейОбОшибке);
												
				одПропустить(ФайлОбмена, "УдалениеОбъекта");
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента("Удаление объекта");
				
			ИначеЕсли ИмяУзла = "УдалениеОбъектаПоСсылке" Тогда
				
				// обработка удаления объекта из информационной базы
				СтрокаСсылкиУдаления = одАтрибут(ФайлОбмена, одТипСтрока, "СсылкаНаОбъект");
				
				Попытка
					
					Ссылка = ЗначениеИзСтрокиВнутр(СтрокаСсылкиУдаления);
					
					УдалитьОбъектПоСсылке(Ссылка, РезультирующаяСтрокаСИнформациейОбОшибке);
					
				Исключение
					// возможны ошибки при удалении
				КонецПопытки;
				
				одПропустить(ФайлОбмена, "УдалениеОбъектаПоСсылке");
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента("Удаление объекта");
				
			ИначеЕсли ИмяУзла = "ИнформацияОРегистрицииОбъекта" Тогда
				
				ПоследнийОбъектЗагрузки = ПрочитатьИнформациюОРегистрацииОбъекта();
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);
				
			ИначеЕсли ИмяУзла = "ИнформацияОбУдаленииРегистрицииОбъекта" Тогда
				
				ПоследнийОбъектЗагрузки = ПрочитатьИнформациюОбУдаленииРегистрацииОбъекта();
				
				ОбработатьОкончаниеЧтенияНовогоЭлемента(ПоследнийОбъектЗагрузки);
				
			ИначеЕсли ИмяУзла = "Алгоритм" Тогда
				
				ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, одТипСтрока);
				
				Если Не ПустаяСтрока(ТекстАлгоритма) Тогда
				
					Попытка
						Выполнить(ТекстАлгоритма);					
					Исключение
						
						ЗП = ПолучитьСтруктуруЗаписиПротокола(39, ОписаниеОшибки());
						ЗП.Обработчик     = "АлгоритмФайлаОбмена";
						СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(39, ЗП, Истина);
						
						Если Не ФлагРежимОтладки Тогда
							ВызватьИсключение СтрокаСообщенияОбОшибке;
						КонецЕсли;
						
					КонецПопытки;
					
				КонецЕсли;
								
			ИначеЕсли ИмяУзла = "ПравилаОбмена" Тогда
				
				мБылиПрочитаныПравилаОбменаПриЗагрузке = Истина;
				
				Если ТаблицаПравилКонвертации.Количество() = 0 Тогда
					ЗагрузитьПравилаОбмена(ФайлОбмена, "ЧтениеXML");
				Иначе
					одПропустить(ФайлОбмена);
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "НастройкаПользовательскогоПоиска" Тогда
				
				ЗагрузитьИнформациюОПользовательскихПоляхПоиска();
				
			ИначеЕсли ИмяУзла = "ИнформацияОТипахДанных" Тогда
				
				ЗагрузитьИнформациюОТипахДанных();
				
			ИначеЕсли ИмяУзла = "ЗначениеПараметра" Тогда	
				
				ЗагрузитьЗначенияПараметровОбменаДанными();
				
			ИначеЕсли ИмяУзла = "АлгоритмПослеЗагрузкиПараметров" Тогда	
				
				Отказ = Ложь;
				ПричинаОтказа = "";
				
				ТекстАлгоритма = одЗначениеЭлемента(ФайлОбмена, одТипСтрока);
				
				Если Не ПустаяСтрока(ТекстАлгоритма) Тогда
				
					Попытка
						
						Выполнить(ТекстАлгоритма);
						
						Если Отказ = Истина Тогда
							
							Если Не ПустаяСтрока(ПричинаОтказа) Тогда
								ВызватьИсключение "Загрузка данных отменена по причине: " + ПричинаОтказа;
							Иначе
								ВызватьИсключение "Загрузка данных отменена";
							КонецЕсли;
							
						КонецЕсли;
						
					Исключение
												
						ЗП = ПолучитьСтруктуруЗаписиПротокола(78, ОписаниеОшибки());
						ЗП.Обработчик     = "ПослеЗагрузкиПараметров";
						СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(78, ЗП, Истина);
						
						Если Не ФлагРежимОтладки Тогда
							ВызватьИсключение СтрокаСообщенияОбОшибке;
						КонецЕсли;
						
					КонецПопытки;
					
				КонецЕсли;
				
			ИначеЕсли ИмяУзла = "КЕШСсылок" Тогда
				
				ОбновитьИнформациюИзКЭШаСсылок();
								
			ИначеЕсли ИмяУзла = "ДанныеПоОбмену" Тогда
				
				// обработка удаления объекта из информационной базы
				ИмяПланаОбмена = одАтрибут(ФайлОбмена, одТипСтрока, "ПланОбмена");
				
				КодКому = одАтрибут(ФайлОбмена, одТипСтрока, "Кому");
				КодОтКого = одАтрибут(ФайлОбмена, одТипСтрока, "ОтКого");
				
				УзелОбменаЗагрузкаДанных = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодОтКого);
				
				Если Не ЗначениеЗаполнено(УзелОбменаЗагрузкаДанных) Тогда
					
					ВызватьИсключение "Не найден узел обмена для загрузки данных. План обмена: " + ИмяПланаОбмена + ", Код: " + КодОтКого;		
					
				КонецЕсли;
				
				мНомерВходящегоСообщения = одАтрибут(ФайлОбмена, одТипЧисло, "НомерИсходящегоСообщения");
				НомерПринятогоСообщения = одАтрибут(ФайлОбмена, одТипЧисло, "НомерВходящегоСообщения");
				
				Если УзелОбменаЗагрузкаДанных.НомерПринятого >= мНомерВходящегоСообщения Тогда
					
					ВызватьИсключение "Номер сообщения меньше либо равен ранее принятому";		
					
				КонецЕсли;
				
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбменаЗагрузкаДанных, НомерПринятогоСообщения);				
				
				мЗапросНаличияСтрокВРегистреСоответствия.УстановитьПараметр("Узел", УзелОбменаЗагрузкаДанных);
				мЗапросНаличияПустыхДляИсточникаВРегистреСоответствия.УстановитьПараметр("Узел", УзелОбменаЗагрузкаДанных);
								
				Попытка
					мПрефиксДокументовПриЗагрузке = СокрЛП(УзелОбменаЗагрузкаДанных.ПрефиксДляЗагружаемыхДокументов);
					мДлинаПрефиксаДокументовПриЗагрузке = СтрДлина(мПрефиксДокументовПриЗагрузке);					
				Исключение
					мПрефиксДокументовПриЗагрузке = "";
					мДлинаПрефиксаДокументовПриЗагрузке = 0;					
				КонецПопытки;
				
				Попытка
					мДатаДокументовДляУстановкиПрефикса = УзелОбменаЗагрузкаДанных.ДатаНачалаВыгрузкиДокументов;
				Исключение
					мДатаДокументовДляУстановкиПрефикса = Неопределено;
				КонецПопытки;
				
				Попытка
					мИспользоватьИнформациюОМестеСозданияОбъектовПриЗагрузке = УзелОбменаЗагрузкаДанных.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных;
				Исключение
					мИспользоватьИнформациюОМестеСозданияОбъектовПриЗагрузке = Неопределено;
				КонецПопытки;
				
				одПропустить(ФайлОбмена, "ДанныеПоОбмену");	
				
			ИначеЕсли ИмяУзла = "ДанныеПоФоновомуОбмену" Тогда
				
				// обработка удаления объекта из информационной базы
				ИмяПланаОбмена = одАтрибут(ФайлОбмена, одТипСтрока, "ПланОбмена");
				
				КодКому = одАтрибут(ФайлОбмена, одТипСтрока, "Кому");
				КодОтКого = одАтрибут(ФайлОбмена, одТипСтрока, "ОтКого");
				
				Если Не ПустаяСтрока(ИмяПланаОбмена) Тогда
					
					Попытка
						УзелОбменаЗагрузкаФоновыхДанных = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодОтКого);
					Исключение
						УзелОбменаЗагрузкаФоновыхДанных = Неопределено;
					КонецПопытки;
				
				Иначе
					УзелОбменаЗагрузкаФоновыхДанных = Неопределено;
				КонецЕсли;
				
				ДобавлениеОбъектовИзФоновогоОбменаЗагрузка = одАтрибут(ФайлОбмена, одТипЧисло, "ДобавлениеОбъектовИзФоновогоОбмена");
				КоличествоОбъектовДляФоновогоОбменаЗагрузка = одАтрибут(ФайлОбмена, одТипЧисло, "КоличествоОбъектовДляФоновогоОбмена");
				ПолученоОбъектовФоновогоОбмена = одАтрибут(ФайлОбмена, одТипЧисло, "ПереданоОбъектовФоновогоОбмена");
											
				одПропустить(ФайлОбмена, "ДанныеПоФоновомуОбмену");
				
				Если Не ПустаяСтрока(Конвертация.ПослеПолученияИнформацииОбУзлахОбмена) Тогда
			
					Попытка
						
						Если ФлагРежимОтладкиОбработчиков Тогда
							
							Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПослеПолученияИнформацииОбУзлахОбмена"));
							
						Иначе
							
							Выполнить(Конвертация.ПослеПолученияИнформацииОбУзлахОбмена);
							
						КонецЕсли;
						
					Исключение
						СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(176, ОписаниеОшибки(), "ПослеПолученияИнформацииОбУзлахОбмена (конвертация)");
						
						Если Не ФлагРежимОтладки Тогда
							ВызватьИсключение СтрокаСообщенияОбОшибке;
						КонецЕсли;
						
						Возврат Ложь;
					КонецПопытки;
				
				КонецЕсли;
											
			ИначеЕсли (ИмяУзла = "ФайлОбмена") И (ФайлОбмена.ТипУзла = одТипУзлаXML_КонецЭлемента) Тогда
				
			Иначе
				ЗаписатьВПротоколВыполнения(9);
			КонецЕсли; 
			
		КонецЦикла;	
		
	Исключение
		
		СтрокаОшибки = ОписаниеОшибки();
		
		РезультирующаяСтрокаСИнформациейОбОшибке = СтрокаОшибки;
		ЗаписатьВПротоколВыполнения("Ошибка при загрузке данных: " + СтрокаОшибки, Неопределено, Истина, , , Истина);
		
		ЗавершитьВедениеПротоколаОбмена();
		ФайлОбмена.Закрыть();
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ВыполнитьДействияПередЧтениемДанных(СтрокаДанных = "", СтрокаСообщенияОбОшибке) Экспорт
	
	мИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных = Новый Соответствие;	
	
	мСоответствиеДопПараметровПоиска       = Новый Соответствие;
	мСоответствиеАлгоритмовПоискаЭлементов = Новый Соответствие;
	мСоответствиеПравилКонвертации         = Новый Соответствие;

	
	Правила.Очистить();
	РезультатВыполненияОтложенныхДвижений = Неопределено;
	
	ИнициализироватьВедениеПротоколаОбмена();
	
	ЗагрузкаВозможна = Истина;
	ПолученоОбъектовФоновогоОбмена = 0;
	мКоличествоВыполненныхОтложенныхДвиженийДокументов = 0;
	
	Если ПустаяСтрока(СтрокаДанных) Тогда
	
		Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
			
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(15);
			ЗагрузкаВозможна = Ложь;
			
		КонецЕсли;
	
	КонецЕсли;
	
	//Инициализируем Универсальный обмен данными
	ИнициализацияОбработкиУниверсальныйОбменДанными(ЗагрузкаВозможна);
	
	//Инициализируем внешнюю обработку с экспортными обработчиками
	ИнициализацияВнешнейОбработкиОбработчиковСобытий(ЗагрузкаВозможна);
	
	Если Не ЗагрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мДатаНачалаЗагрузки = ТекущаяДата();
	ЗаписатьВПротоколВыполнения("Начало загрузки:   " + мДатаНачалаЗагрузки, , Ложь, , , Истина);
	
	Если ФлагРежимОтладки Тогда
		ИспользоватьТранзакции = Ложь;
	КонецЕсли;
	
	Если КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 0 Тогда
		
		КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
		
	КонецЕсли;
	
	мСоответствиеТиповДанныхДляЗагрузки = Новый Соответствие;
	мГлобальныйСтекНеЗаписанныхОбъектов = Новый Соответствие;
	
	мСчетчикЗагруженныхОбъектов = 0;
	ФлагОшибки                  = Ложь;
	ЗагруженныеОбъекты          = Новый Соответствие;
	мНомерПоследнегоПоискаПоСсылке = 0;
	ЗагруженныеГлобальныеОбъекты = Новый Соответствие;

	ИнициализироватьМенеджерыИСообщения();
	
	ОткрытьФайлЗагрузки(,СтрокаДанных);
	
	Если ФлагОшибки Тогда 
		ЗавершитьВедениеПротоколаОбмена();
		Возврат Ложь; 
	КонецЕсли;

	//Определяем интерфейсы обработчиков
	Если ФлагРежимОтладкиОбработчиков Тогда
		
		УниверсальныйОбменДанными.ДополнитьПравилаИнтерфейсамиОбработчиков(Конвертация, ТаблицаПравилКонвертации, ТаблицаПравилВыгрузки, ТаблицаПравилОчистки);
		
	КонецЕсли; 
	
	// Обработчик ПередЗагрузкойДанных
	Отказ = Ложь;
	
	Если Не ПустаяСтрока(Конвертация.ПередЗагрузкойДанных) Тогда
		
		Попытка
			
			Если ФлагРежимОтладкиОбработчиков Тогда
				
				Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередЗагрузкойДанных"));
				
			Иначе
				
				Выполнить(Конвертация.ПередЗагрузкойДанных);
				
			КонецЕсли;
			
		Исключение
			СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(22, ОписаниеОшибки(), "ПередЗагрузкойДанных (конвертация)");
			Отказ = Истина;
		КонецПопытки;
		
		Если Отказ Тогда // Отказ от загрузки данных
			ЗавершитьВедениеПротоколаОбмена();
			ФайлОбмена.Закрыть();
			ДеструкторВнешнейОбработкиОбработчиковСобытий();
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	// Очистка информационной базы по правилам
	ОбработатьПравилаОчистки(ТаблицаПравилОчистки.Строки);
		
	Если ИспользоватьТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаписатьИнформациюОбОтложенныхДвижениях(СсылкаНаОбъект, ДатаДокумента, ИнформацияОбОшибке = "", НомерОшибкиПроведения = 0)
	
	НаборЗаписейРегистра = мМенеджерРегистраОтложенныеДвижения.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
	НаборЗаписейРегистра.Отбор.Документ.Установить(СсылкаНаОбъект);
	
	СтрокаНабора = НаборЗаписейРегистра.Добавить();
	СтрокаНабора.УзелОбмена = УзелОбменаЗагрузкаДанных;
	СтрокаНабора.Документ = СсылкаНаОбъект;
	СтрокаНабора.ДатаДокумента = ДатаДокумента;	
	СтрокаНабора.СообщениеОбОшибкеПроведения = ИнформацияОбОшибке;
	СтрокаНабора.КоличествоНеудачныхПроведений = НомерОшибкиПроведения;	
								
	ЗаписатьОбъектВИБ(НаборЗаписейРегистра, "РегистрСведенийНаборЗаписей.ОтложенныеДвиженияДокументов");	
	
КонецПроцедуры

Процедура УдалитьСсылкуНаДокументИзОтложенныхДвижений(СсылкаНаОбъект)
	
	НаборЗаписейРегистра = мМенеджерРегистраОтложенныеДвижения.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Отбор.УзелОбмена.Установить(УзелОбменаЗагрузкаДанных);
	НаборЗаписейРегистра.Отбор.Документ.Установить(СсылкаНаОбъект);
			
	ЗаписатьОбъектВИБ(НаборЗаписейРегистра, "РегистрСведенийНаборЗаписей.ОтложенныеДвиженияДокументов");	
	
КонецПроцедуры

Функция ВыполнитьОтложенныеОперацииСДокументами(СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "", 
	ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Ложь, 
	КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 0,
	ФормаОтображенияПользователю = Неопределено) Экспорт
	
	СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "";
	
	// если идет фоновый обмен, то ничего проводить не будем
	Если ПолученоОбъектовФоновогоОбмена <> 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатОтложенногоПроведения = Неопределено;
	ТекущееКоличествоОшибок = 0;
	
	ТаблицаПриоритетов = Новый ТаблицаЗначений;
	ТаблицаПриоритетов.Колонки.Добавить("Документ");
	ТаблицаПриоритетов.Колонки.Добавить("Приоритет");
	
	Попытка
		
		МакетПриоритетов = ПолучитьОбщийМакет("ПорядокОтложенногоПроведенияДокументов");
		
		КоличествоСтрок = МакетПриоритетов.КоличествоСтрок();
		Для НомерСтроки = 1 По КоличествоСтрок Цикл
			
			ТекущаяСтрока = МакетПриоритетов.ПолучитьСтроку(НомерСтроки);
			Если ПустаяСтрока(ТекущаяСтрока) Тогда
				Продолжить;
			КонецЕсли;
			
			ПервыйСимвол = Сред(ТекущаяСтрока, 1, 1);
			Если ПервыйСимвол = ";" Тогда
				Продолжить;
			КонецЕсли;
			
			Приоритет = ОтделитьРазделителем(ТекущаяСтрока, "=");
			
			Если Не ЗначениеЗаполнено(ТекущаяСтрока)
				ИЛИ Не ЗначениеЗаполнено(Приоритет) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ТекущаяСтрока = СокрЛП(ТекущаяСтрока);
						
			Попытка
				
				ТипДокумента = Тип("ДокументСсылка." + ТекущаяСтрока);
				Приоритет = Число(СокрЛП(Приоритет));
				
				СтрокаТаблицы = ТаблицаПриоритетов.Добавить();
				СтрокаТаблицы.Документ = ТекущаяСтрока;
				СтрокаТаблицы.Приоритет = Приоритет;
				
			Исключение
			КонецПопытки;			
			
		КонецЦикла;
		
	Исключение
		
		
	КонецПопытки;
	
	Запрос = Новый Запрос;
	
	Если ТаблицаПриоритетов.Количество() = 0 Тогда
	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтложенныеДвиженияДокументов.Документ КАК СсылкаНаДокумент,
		               |	ОтложенныеДвиженияДокументов.КоличествоНеудачныхПроведений КАК КоличествоНеудачныхПроведений
		               |ИЗ
		               |	РегистрСведений.ОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
		               |ГДЕ
		               |	ОтложенныеДвиженияДокументов.УзелОбмена = &УзелОбмена
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ОтложенныеДвиженияДокументов.ДатаДокумента";					   
		
		
	Иначе
		
		СтрокаПриоритетов = "";
		Для Каждого СтрокаТаблицы Из ТаблицаПриоритетов Цикл
			
			СтрокаПриоритетов = СтрокаПриоритетов + "
			| Когда ОтложенныеДвиженияДокументов.Документ ССЫЛКА Документ." + СтрокаТаблицы.Документ + "
			|			ТОГДА " + СтрЗаменить(Строка(СтрокаТаблицы.Приоритет), Символы.НПП, "");
			
		КонецЦикла;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ОтложенныеДвиженияДокументов.Документ КАК СсылкаНаДокумент,
					   |	ОтложенныеДвиженияДокументов.КоличествоНеудачныхПроведений КАК КоличествоНеудачныхПроведений,
					   |    Выбор 
					   |		" + СтрокаПриоритетов + "
					   |	ИНАЧЕ 0 КОНЕЦ КАК ПриоритетПроведения
		               |ИЗ
		               |	РегистрСведений.ОтложенныеДвиженияДокументов КАК ОтложенныеДвиженияДокументов
		               |ГДЕ
		               |	ОтложенныеДвиженияДокументов.УзелОбмена = &УзелОбмена
		               |
		               |УПОРЯДОЧИТЬ ПО
					   |	ПриоритетПроведения ВОЗР,
		               |	ОтложенныеДвиженияДокументов.ДатаДокумента";
					   
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзелОбмена", УзелОбменаЗагрузкаДанных);
	
	мДатаНачалаВыполненияОтложенныхОперацийСДокументами = ТекущаяДата();
	ЗаписатьВПротоколВыполнения("Выполнение отложенных операций с документами. Начало выполнения: " + мДатаНачалаВыполненияОтложенныхОперацийСДокументами, , Ложь, , , Истина);
	
	мКоличествоВыполненныхОтложенныхДвиженийДокументов = 0;
	Объект = Неопределено;	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		мДатаОкончанияВыполненияОтложенныхОперацийСДокументами = ТекущаяДата();
		ЗаписатьВПротоколВыполнения("Выполнение отложенных операций с документами. Окончание выполнения: " + мДатаОкончанияВыполненияОтложенныхОперацийСДокументами, , Ложь, , , Истина);
		Возврат Истина;
	КонецЕсли;
		
	Выборка = РезультатЗапроса.Выбрать();
	
	Если ФормаОтображенияПользователю <> Неопределено Тогда
		
		ТаблицаВыполненныхОпераций = ФормаОтображенияПользователю.ДвиженияДокументов;
		ФормаОтображенияПользователю.УспешноПроведено = 0;
		ФормаОтображенияПользователю.НЕПроведено = 0;
		ФормаОтображенияПользователю.Открыть();
		
	Иначе
		
		ТаблицаВыполненныхОпераций = Неопределено;
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли
	
	    СсылкаНаОбъект = Выборка.СсылкаНаДокумент;
		
		Если НЕ ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
			
			// УДАЛЯЕМ ТЕКУЩУЮ ЗАПИСЬ ИЗ РЕГИСТРА
			УдалитьСсылкуНаДокументИзОтложенныхДвижений(СсылкаНаОбъект);			
			
		Иначе
		
			Объект = СсылкаНаОбъект.ПолучитьОбъект();
			
			Если Объект <> Неопределено Тогда
									
				Попытка
					Объект.ОбменДанными.Отправитель = УзелОбменаЗагрузкаДанных;
				Исключение
				КонецПопытки;
				
				Если ТаблицаВыполненныхОпераций <> Неопределено Тогда
									
					СтрокаОтображения = ТаблицаВыполненныхОпераций.Добавить();
					СтрокаОтображения.Объект = СсылкаНаОбъект;
					СтрокаОтображения.Проведен = Неопределено;
					ФормаОтображенияПользователю.ЭлементыФормы.ДвиженияДокументов.ТекущаяСтрока = СтрокаОтображения;
					
				КонецЕсли;
					
				
				Попытка
				
					Объект.Записать(РежимЗаписиДокумента.Проведение);
					
					Если Объект.Проведен Тогда // успешное проведение
						
						Если ТаблицаВыполненныхОпераций <> Неопределено Тогда
							СтрокаОтображения.Проведен = Истина;
							ФормаОтображенияПользователю.УспешноПроведено = ФормаОтображенияПользователю.УспешноПроведено + 1;
						КонецЕсли;
						
						// УДАЛЯЕМ ТЕКУЩУЮ ЗАПИСЬ ИЗ РЕГИСТРА
						УдалитьСсылкуНаДокументИзОтложенныхДвижений(СсылкаНаОбъект);
				
						мКоличествоВыполненныхОтложенныхДвиженийДокументов = мКоличествоВыполненныхОтложенныхДвиженийДокументов + 1;
						
					Иначе // ошибка проведения
						
						Если ТаблицаВыполненныхОпераций <> Неопределено Тогда
							СтрокаОтображения.Проведен = Ложь;
							ФормаОтображенияПользователю.НеПроведено = ФормаОтображенияПользователю.НеПроведено + 1;
						КонецЕсли;
			
						СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов + "
							|Ошибка при проведении документа """ + Строка(Объект) + """";
						
						РезультатОтложенногоПроведения = Ложь;
						
						// в историю нужно записать информацию об ошибке
						ЗаписатьИнформациюОбОтложенныхДвижениях(Объект.Ссылка, Объект.Дата, 
							, Выборка.КоличествоНеудачныхПроведений + 1);
						
						ТекущееКоличествоОшибок = ТекущееКоличествоОшибок + 1;
						Если ПослеОшибкиОтложенногоПроведенияПрекратитьОперации
							И ТекущееКоличествоОшибок >= КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации Тогда
							
							Если ФормаОтображенияПользователю = Неопределено Тогда
								ЗаписатьВПротоколВыполнения("Выполнение отложенных операций с документами завершено с ошибками. Окончание выполнения: " + мДатаОкончанияВыполненияОтложенныхОперацийСДокументами + "
								| Описание ошибки : " + СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, , Ложь, , , Истина);	
							КонецЕсли;
								
							мДатаОкончанияВыполненияОтложенныхОперацийСДокументами = ТекущаяДата();	
							Возврат Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Исключение
					
					Если ТаблицаВыполненныхОпераций <> Неопределено Тогда
						СтрокаОтображения.Проведен = Ложь;
						ФормаОтображенияПользователю.НеПроведено = ФормаОтображенияПользователю.НеПроведено + 1;
					КонецЕсли;
		
					ОписаниеОшибкиДляДокумента = СформироватьТекстСообщенияПользователю(ОписаниеОшибки());
										
					СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов + "
						|Ошибка при проведении документа """ + Строка(Объект) + """" + "
						|" + ОписаниеОшибкиДляДокумента;
					
					РезультатОтложенногоПроведения = Ложь;
					
					// в историю нужно записать информацию об ошибке
					ЗаписатьИнформациюОбОтложенныхДвижениях(Объект.Ссылка, Объект.Дата, 
						ОписаниеОшибкиДляДокумента, Выборка.КоличествоНеудачныхПроведений + 1);
					
					ТекущееКоличествоОшибок = ТекущееКоличествоОшибок + 1;
					Если ПослеОшибкиОтложенногоПроведенияПрекратитьОперации
						И ТекущееКоличествоОшибок >= КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации Тогда
						
						Если ФормаОтображенияПользователю = Неопределено Тогда
							ЗаписатьВПротоколВыполнения("Выполнение отложенных операций с документами завершено с ошибками. Окончание выполнения: " + мДатаОкончанияВыполненияОтложенныхОперацийСДокументами + "
							| Описание ошибки : " + СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, , Ложь, , , Истина);	
						КонецЕсли;
							
						мДатаОкончанияВыполненияОтложенныхОперацийСДокументами = ТекущаяДата();	
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Попытка
			
		Если Объект = Неопределено Тогда
			Состояние("Изменение состояния у объектов. Обработано: " + Строка(мКоличествоВыполненныхОтложенныхДвиженийДокументов));
		Иначе
			Состояние("Изменение состояния у объектов. Обработано: " + Строка(мКоличествоВыполненныхОтложенныхДвиженийДокументов) +
				" Объект: " + Строка(Объект));
		КонецЕсли;
			
	Исключение
	КонецПопытки;
	#КонецЕсли		
		
	мДатаОкончанияВыполненияОтложенныхОперацийСДокументами = ТекущаяДата();
	
	ЗаписатьВПротоколВыполнения("Выполнение отложенных операций с документами. Окончание выполнения: " + мДатаОкончанияВыполненияОтложенныхОперацийСДокументами, , Ложь, , , Истина);
	
	Если РезультатОтложенногоПроведения = Ложь Тогда
			
		Если ФормаОтображенияПользователю = Неопределено Тогда
			ЗаписатьВПротоколВыполнения("Выполнение отложенных операций с документами завершено с ошибками. Окончание выполнения: " + мДатаОкончанияВыполненияОтложенныхОперацийСДокументами + "
							| Описание ошибки : " + СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, , Ложь, , , Истина);
		КонецЕсли;
						
		Возврат Ложь;
		
	ИначеЕсли мКоличествоВыполненныхОтложенныхДвиженийДокументов > 0 Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции

Процедура ВыполнитьДействияПослеЗавершенияЧтенияДанных(ЧтениеУспешноЗавершено = Истина, 
	СтрокаСообщенияОбОшибке = "", 
	СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "", 
	ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Ложь,
	КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 0) Экспорт
	
	// отложенная запись того, что не записали с самого начала
	ПровестиЗаписьНеЗаписанныхОбъектов();
	
	Если ИспользоватьТранзакции Тогда
		
		Если ЧтениеУспешноЗавершено Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		Конецесли;
		
	КонецЕсли;
	
	ФайлОбмена.Закрыть();	
	
	Если ЧтениеУспешноЗавершено Тогда
	    	
		// Обработчик ПослеЗагрузкиДанных
		Если Не ПустаяСтрока(Конвертация.ПослеЗагрузкиДанных) Тогда
		
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПослеЗагрузкиДанных"));
					
				Иначе
					
					Выполнить(Конвертация.ПослеЗагрузкиДанных);
					
				КонецЕсли;
				
			Исключение
				СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(23, ОписаниеОшибки(), "ПослеЗагрузкиДанных (конвертация)");
			КонецПопытки;
			
		КонецЕсли;
		
		// запишем информацию о номере входящего сообщения
		Если ЗначениеЗаполнено(УзелОбменаЗагрузкаДанных) Тогда
			
			ОбъектУзла = УзелОбменаЗагрузкаДанных.ПолучитьОбъект();
			Если ОбъектУзла <> Неопределено Тогда
				
				Если ОбъектУзла.НомерПринятого <= мНомерВходящегоСообщения Тогда
				
					ОбъектУзла.НомерПринятого = мНомерВходящегоСообщения;	
					ОбъектУзла.Записать();
				
				КонецЕсли;
						
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	мДатаОкончанияЗагрузки = ТекущаяДата();
	
	ЗаписатьВПротоколВыполнения("Окончание загрузки: " + мДатаОкончанияЗагрузки, , Ложь, , , Истина);
	Если ЧтениеУспешноЗавершено Тогда
		ЗаписатьВПротоколВыполнения("Загружено объектов: " + мСчетчикЗагруженныхОбъектов, , Ложь, , , Истина);
	Иначе
		
		ИнформацияДляПользователя = "Ошибка при загрузке объектов. Было загружено: " + мСчетчикЗагруженныхОбъектов;
		
		СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке + Символы.ПС + ИнформацияДляПользователя;
		
		ЗаписатьВПротоколВыполнения(ИнформацияДляПользователя, , Ложь, , , Истина);
	КонецЕсли;
	
	// нужно выполнить регламентные проведения или отмены проведения документов по регистру отложенных действий с документами
	
	СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "";
	
	Если ЧтениеУспешноЗавершено
		И ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных Тогда
				
		РезультатВыполненияОтложенныхДвижений = ВыполнитьОтложенныеОперацииСДокументами(СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, 
			ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации, Неопределено);
				
	КонецЕсли;

	ДеструкторВнешнейОбработкиОбработчиковСобытий();

	ЗавершитьВедениеПротоколаОбмена();
	
	#Если Клиент Тогда
    	Если ЭтоИнтерактивныйРежим Тогда
			Предупреждение("Загрузка данных завершена!");
		КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры


// Выполняет загрузку данных в соответствии с установленными режимами (правилами обмена)
//
// Параметры:
//  Нет.
//
Функция ВыполнитьЗагрузку(СтрокаСообщенияОбОшибке = "", 
	СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "", 
	ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Ложь,
	КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 0) Экспорт
	
	ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных();
	
	РаботаВозможна = ВыполнитьДействияПередЧтениемДанных(, СтрокаСообщенияОбОшибке);
	
	Если НЕ РаботаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;	
    	
	УспешноПереданыДанные = ПроизвестиЧтениеДанных(СтрокаСообщенияОбОшибке);
	
	ВыполнитьДействияПослеЗавершенияЧтенияДанных(УспешноПереданыДанные, СтрокаСообщенияОбОшибке, 
		СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, 
		ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
	
	Возврат УспешноПереданыДанные;

КонецФункции 

Процедура СжатьРезультирующийФайлОбмена()
	
	#Если Клиент Тогда
	Состояние("Выполняется архивация файла обмена...");
	#КонецЕсли
	Хранилище      = Новый ХранилищеЗначения(Новый ДвоичныеДанные(ИмяФайлаОбмена), Новый СжатиеДанных(9));
	АрхивныйФайл   = Новый ЗаписьТекста;
	АрхивныйФайл.Открыть(ИмяФайлаОбмена, КодировкаТекста.UTF8);
	АрхивныйФайл.ЗаписатьСтроку(XMLСтрока(Хранилище));
	АрхивныйФайл.Закрыть();
	
КонецПроцедуры

Функция РаспаковатьВходящийФайлОбмена(ИмяФайлаДляРаспаковки = "") Экспорт
	
	ИмяФайлаДляРаспаковки = ?(ПустаяСтрока(ИмяФайлаДляРаспаковки), ИмяФайлаОбмена, ИмяФайлаДляРаспаковки);
	
	#Если Клиент Тогда
	Состояние("Выполняется распаковка файла обмена...");
	#КонецЕсли
	РаспаковкаФайла        = Новый ЧтениеТекста(ИмяФайлаДляРаспаковки, КодировкаТекста.UTF8);
	Хранилище              = XMLЗначение(одТипХранилищеЗначения, РаспаковкаФайла.Прочитать());
	ДвоичныеДанные         = Хранилище.Получить();
	ИмяФайлаЗагрузкиДанных = СтрЗаменить(ИмяФайлаДляРаспаковки, ".aml", ".xml");
	Попытка
			
		ДвоичныеДанные.Записать(ИмяФайлаЗагрузкиДанных);
			
	Исключение
			
		ЗП = ПолучитьСтруктуруЗаписиПротокола(2, ОписаниеОшибки());
		ЗаписатьВПротоколВыполнения(2, ЗП, Истина);
			
	КонецПопытки;
	
	Возврат ИмяФайлаЗагрузкиДанных;
	
КонецФункции

Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	мОбработкаДляЗагрузкиДанных.ФайлОбмена.УстановитьСтроку(ИнформацияДляЗаписиВФайл);
		
	УспешноПереданыДанные = мОбработкаДляЗагрузкиДанных.ПроизвестиЧтениеДанных(СтрокаОшибкиВБазеПриемнике);	
	
	Если Не ПустаяСтрока(СтрокаОшибкиВБазеПриемнике) Тогда
		
		ЗаписатьВПротоколВыполнения("ЗАГРУЗКА В ПРИЕМНИКЕ: " + СтрокаОшибкиВБазеПриемнике, Неопределено, Истина, , , Истина);	
		
	КонецЕсли;
		
КонецПроцедуры

Функция ВыполнитьПередачуИнформацииОНачалеОбменаВПриемник(ТекущаяСтрокаДляЗаписи)
	
	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТекущаяСтрокаДляЗаписи = ТекущаяСтрокаДляЗаписи + Символы.ПС + мXMLПравила + Символы.ПС + "</ФайлОбмена>" + Символы.ПС;
	СтрокаСообщенияОбОшибке = "";
	
	РаботаВозможна = мОбработкаДляЗагрузкиДанных.ВыполнитьДействияПередЧтениемДанных(ТекущаяСтрокаДляЗаписи, СтрокаСообщенияОбОшибке);
	
	Если НЕ РаботаВозможна
		И НЕ ПустаяСтрока(СтрокаСообщенияОбОшибке) Тогда
		
		СообщитьОбОшибкеДляПользователю(СтрокаСообщенияОбОшибке);
		
	КонецЕсли;
	
	Возврат РаботаВозможна;	
    		
КонецФункции

Функция ВыполнитьПередачуИнформацииПриЗавершенииПередачиДанных(ЧтениеУспешноЗавершено = Истина, 
	СтрокаСообщенияОбОшибке = "", 
	СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов = "",
	ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Ложь,
	КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 0)
	
	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		Возврат Истина;
	КонецЕсли;
	
	мОбработкаДляЗагрузкиДанных.ВыполнитьДействияПослеЗавершенияЧтенияДанных(ЧтениеУспешноЗавершено, СтрокаСообщенияОбОшибке, 
		СтрокаСообщенияОбОшибкеОтложенногоДвиженияДокументов, ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
	
КонецФункции

Процедура ЗаписатьИнформациюОбОбменеДаннымиЧерезПланыОбмена()
	
	Приемник = СоздатьУзел("ДанныеПоОбмену");
	
	ИмяПланаОбмена = УзелДляОбмена.Метаданные().Имя;
	
	УстановитьАтрибут(Приемник, "ПланОбмена", ИмяПланаОбмена);
	УстановитьАтрибут(Приемник, "Кому", УзелДляОбмена.Код);
	УстановитьАтрибут(Приемник, "ОтКого", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().Код);	
	
	УстановитьАтрибут(Приемник, "НомерИсходящегоСообщения", УзелДляОбмена.НомерОтправленного + 1);
	УстановитьАтрибут(Приемник, "НомерВходящегоСообщения", УзелДляОбмена.НомерПринятого);
	
	//	Запись объекта в файл
    Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОФоновомОбменеДаннымиЧерезПланыОбмена(КоличествоОбъектовФоновогоОбмена)
	
	Приемник = СоздатьУзел("ДанныеПоФоновомуОбмену");
	
	Если ЗначениеЗаполнено(УзелДляФоновогоОбмена) Тогда
		ИмяПланаОбмена = УзелДляФоновогоОбмена.Метаданные().Имя;
		
		УстановитьАтрибут(Приемник, "ПланОбмена", ИмяПланаОбмена);
		УстановитьАтрибут(Приемник, "Кому", УзелДляФоновогоОбмена.Код);
		УстановитьАтрибут(Приемник, "ОтКого", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел().Код);
	
	Иначе
		
		УстановитьАтрибут(Приемник, "ПланОбмена", "");
		УстановитьАтрибут(Приемник, "Кому", 0);
		УстановитьАтрибут(Приемник, "ОтКого", 0);
		
	КонецЕсли;
	
	УстановитьАтрибут(Приемник, "ДобавлениеОбъектовИзФоновогоОбмена", ДобавлениеОбъектовИзФоновогоОбмена);
	УстановитьАтрибут(Приемник, "КоличествоОбъектовДляФоновогоОбмена", КоличествоОбъектовДляФоновогоОбмена);
	УстановитьАтрибут(Приемник, "ПереданоОбъектовФоновогоОбмена", КоличествоОбъектовФоновогоОбмена);
	
	//	Запись объекта в файл
    Приемник.ЗаписатьКонецЭлемента();
	
	ЗаписатьВФайл(Приемник);
	
КонецПроцедуры


Функция ВыгрузитьДанныеСсылочногоОбъекта(Значение, ИсходящиеДанные, ИмяПКО, ПКОСвойств, ТипПриемника, УзелСвойства, Знач ВыгрузитьТолькоСсылку)
	
	ЭтоПравилоСГлобальнойВыгрузкой = Ложь;
	УзелСсылки    = ВыгрузитьПоПравилу(Значение, , ИсходящиеДанные, , ИмяПКО, , ВыгрузитьТолькоСсылку, ПКОСвойств, ЭтоПравилоСГлобальнойВыгрузкой, , , , Ложь);
	ТипУзлаСсылки = ТипЗнч(УзелСсылки);

	Если ПустаяСтрока(ТипПриемника) Тогда
				
		ТипПриемника  = ПКОСвойств.Приемник;
		УстановитьАтрибут(УзелСвойства, "Тип", ТипПриемника);
				
	КонецЕсли;
			
	Если УзелСсылки = Неопределено Тогда
				
		Возврат Неопределено;
				
	КонецЕсли;
				
	ДобавитьСвойстваДляВыгрузки(УзелСсылки, ТипУзлаСсылки, УзелСвойства, ЭтоПравилоСГлобальнойВыгрузкой);	
	
	Возврат УзелСсылки;
	
КонецФункции

Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	Если ПустаяСтрока(ПравилоКонвертации) Тогда
		
		УзелПараметра = СоздатьУзел("ЗначениеПараметра");
		
		УстановитьАтрибут(УзелПараметра, "Имя", Имя);
		УстановитьАтрибут(УзелПараметра, "Тип", Строка(ТипЗнч(ИсходноеЗначениеПараметра)));
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(ИсходноеЗначениеПараметра, ЭтоNULL);
					
		Если Пусто Тогда
			
			// надо записать что это пустое значение
			одЗаписатьЭлемент(УзелПараметра, "Пусто");
								
			УзелПараметра.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(УзелПараметра);
			
			Возврат;
								
		КонецЕсли;
	
		одЗаписатьЭлемент(УзелПараметра, "Значение", ИсходноеЗначениеПараметра);
	
		УзелПараметра.ЗаписатьКонецЭлемента();
		
		ЗаписатьВФайл(УзелПараметра);
		
	Иначе
		
		УзелПараметра = СоздатьУзел("ЗначениеПараметра");
		
		УстановитьАтрибут(УзелПараметра, "Имя", Имя);
		
		ЭтоNULL = Ложь;
		Пусто = одПустое(ИсходноеЗначениеПараметра, ЭтоNULL);
					
		Если Пусто Тогда
			
			ПКОСвойств = НайтиПравило(ИсходноеЗначениеПараметра, ПравилоКонвертации);
			ТипПриемника  = ПКОСвойств.Приемник;
			УстановитьАтрибут(УзелПараметра, "Тип", ТипПриемника);
			
			// надо записать что это пустое значение
			одЗаписатьЭлемент(УзелПараметра, "Пусто");
								
			УзелПараметра.ЗаписатьКонецЭлемента();
			
			ЗаписатьВФайл(УзелПараметра);
			
			Возврат;
								
		КонецЕсли;
		
		ВыгрузитьДанныеСсылочногоОбъекта(ИсходноеЗначениеПараметра, , ПравилоКонвертации, , , УзелПараметра, Истина);
		
		УзелПараметра.ЗаписатьКонецЭлемента();
		
		ЗаписатьВФайл(УзелПараметра);				
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	Для Каждого Параметр Из ТаблицаНастройкиПараметров Цикл
		
		Если Параметр.ПередаватьПараметрПриВыгрузке = Истина Тогда
			
			ПередатьОдинПараметрВПриемник(Параметр.Имя, Параметр.Значение, Параметр.ПравилоКонвертации);
					
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПередатьИнформациюОТипахВПриемник()
	
	Если Не ПустаяСтрока(мСтрокаТиповДляПриемника) Тогда
		ЗаписатьВФайл(мСтрокаТиповДляПриемника);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередатьИнформациюОПользовательскихПоляхПоискаВПриемник() Экспорт
			
	Для Каждого КлючИЗначенияСопоставления Из мИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных Цикл
		
		УзелПараметра = СоздатьУзел("НастройкаПользовательскогоПоиска");
		
		одЗаписатьЭлемент(УзелПараметра, "ИмяПравила", КлючИЗначенияСопоставления.Ключ);
		одЗаписатьЭлемент(УзелПараметра, "НастройкаПоиска", КлючИЗначенияСопоставления.Значение);
		
		УзелПараметра.ЗаписатьКонецЭлемента();
		ЗаписатьВФайл(УзелПараметра);		
								
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных()
	
	КомментарийПриВыгрузкеДанных = "";
	КомментарийПриЗагрузкеДанных = "";
	
КонецПроцедуры

Процедура ЗаписатьДанныеВПротоколОбменаЧерезCOMСоединение(СтруктураИстории) Экспорт
	
	// выполняет запись информации об обмене данными через COM соединение для информационной базы приемника
	Если СтруктураИстории = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		НаборЗаписейИстории = РегистрыСведений.ИсторияОбменаДанными.СоздатьНаборЗаписей();
		НаборЗаписейИстории.Отбор.УзелИнформационнойБазы.Установить(УзелДляОбмена);
		НаборЗаписейИстории.Отбор.Период.Установить(СтруктураИстории.Период);
		
		СтрокаИстории = НаборЗаписейИстории.Добавить();
		
		СтрокаИстории.УзелИнформационнойБазы = УзелДляОбмена;
		СтрокаИстории.Период = СтруктураИстории.Период;
		
		СтрокаИстории.ДатаПоследнейЗагрузки = СтруктураИстории.ДатаПоследнейВыгрузки;
		СтрокаИстории.ДатаПоследнейВыгрузки = СтруктураИстории.ДатаПоследнейЗагрузки;
		СтрокаИстории.РезультатПоследнейЗагрузки = СтруктураИстории.РезультатПоследнейВыгрузки;
		СтрокаИстории.РезультатПоследнейВыгрузки = СтруктураИстории.РезультатПоследнейЗагрузки;
		СтрокаИстории.РезультатОтложенныхДвиженийДокументов = СтруктураИстории.РезультатОтложенныхДвиженийДокументов;
		СтрокаИстории.НаличиеДанныхФоновойЗагрузки = СтруктураИстории.НаличиеДанныхФоновойЗагрузки;
		СтрокаИстории.КомментарийКЗагрузкеДанных = СтруктураИстории.КомментарийКВыгрузкеДанных;
		СтрокаИстории.КомментарийКВыгрузкеДанных = СтруктураИстории.КомментарийКЗагрузкеДанных;
		СтрокаИстории.КомментарийКОтложенномуДвижениюДокументов = СтруктураИстории.КомментарийКОтложенномуДвижениюДокументов;
		СтрокаИстории.ДатаНачалаПоследнейЗагрузки = СтруктураИстории.ДатаНачалаПоследнейВыгрузки;
		СтрокаИстории.ДатаНачалаПоследнейВыгрузки = СтруктураИстории.ДатаНачалаПоследнейЗагрузки;
		
		НаборЗаписейИстории.Записать();
		
	Исключение
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет выгрузку данных в соответствии с установленными режимами (правилами обмена)
//
// Параметры:
//  Нет.
//
Функция ВыполнитьВыгрузку(НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных = Истина, 
	СтрокаСообщенияОбОшибке = "", 
	СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокумента = "",
	ПослеОшибкиОтложенногоПроведенияПрекратитьОперации = Ложь,
	КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации = 0) Экспорт
	
	ИнициализироватьКомментарииПриВыгрузкеИЗагрузкеДанных();
	
	ИнициализироватьВедениеПротоколаОбмена();
	мТекущийУровеньВложенностиВыгрузитьПоПравилу = 0;
	
	ВыгрузкаВозможна = Истина;
	
	мСтекВызововВыгрузкиДанных = Новый ТаблицаЗначений;
	мСтекВызововВыгрузкиДанных.Колонки.Добавить("Ссылка");
	мСтекВызововВыгрузкиДанных.Индексы.Добавить("Ссылка");
	
	Если мБылиПрочитаныПравилаОбменаПриЗагрузке = Истина тогда
		
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(74);
		ВыгрузкаВозможна = Ложь;	
		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаПравилОбмена) Тогда
		СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(12);
		ВыгрузкаВозможна = Ложь;
	КонецЕсли;
	
	Если Не ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		
		Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
			СтрокаСообщенияОбОшибке = ЗаписатьВПротоколВыполнения(10);
			ВыгрузкаВозможна = Ложь;
		КонецЕсли;
		
	Иначе
		
		мОбработкаДляЗагрузкиДанных = ВыполнитьПодключениеКИБПриемнику(мОбработкаДляЗагрузкиДанных, СтрокаСообщенияОбОшибке); 
		ВыгрузкаВозможна = мОбработкаДляЗагрузкиДанных <> Неопределено;
		
    КонецЕсли;
	
	//Инициализируем Универсальный обмен данными
	ИнициализацияОбработкиУниверсальныйОбменДанными(ВыгрузкаВозможна);

	//Инициализируем внешнюю обработку с экспортными обработчиками
	ИнициализацияВнешнейОбработкиОбработчиковСобытий(ВыгрузкаВозможна);
	
	Если Не ВыгрузкаВозможна Тогда
		Возврат Ложь;
	КонецЕсли;
	
	мДатаНачалаВыгрузки = ТекущаяДата();
	ЗаписатьВПротоколВыполнения("Начало выгрузки:   " + мДатаНачалаВыгрузки, , Ложь, , , Истина);

	ИнициализироватьМенеджерыИСообщения();	

	мXMLДокумент                = DOM_НовыйXMLДокумент();
	мСчетчикВыгруженныхОбъектов = 0;
	мСчетчикНПП 				= 0;
	мНППЗаписанногоВФайл		= 0;
	ФлагОшибки                  = Ложь;
	
	ПереданоОбъектовФоновогоОбмена = 0;

	// Загрузка правил обмена
	Если мПроверятьЗагруженностьПравилПриВыгрузке
		И Конвертация.Количество() = 9 Тогда
		
		ЗагрузитьПравилаОбмена(, , СтрокаСообщенияОбОшибке);
		Если ФлагОшибки Тогда
			
			ЗавершитьВедениеПротоколаОбмена();
			Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
				мОбработкаДляЗагрузкиДанных = Неопределено;
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Для каждого Правило Из ТаблицаПравилКонвертации Цикл
			Правило.Выгруженные = СоздатьТаблицуВыгруженныхОбъектов();
		КонецЦикла; 
		
	КонецЕсли; 

	//Присваиваем параметры установленные в диалоге
	Если мРежимВизуальнойНастройкиОбмена Тогда
		УстановитьПараметрыИзДиалога();
	КонецЕсли;

	// Открываем файл обмена
	ТекущаяСтрокаДляЗаписи = ОткрытьФайлВыгрузки(СтрокаСообщенияОбОшибке) + Символы.ПС;
	
	Если ФлагОшибки Тогда
		
		ФайлОбмена = Неопределено;
		ЗавершитьВедениеПротоколаОбмена();
		Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
			мОбработкаДляЗагрузкиДанных = Неопределено;
		КонецЕсли;
		Возврат Ложь; 
		
	КонецЕсли;
	
	УспешнаяВыгрузка = Истина;
	
	//Определяем интерфейсы обработчиков
	Если ФлагРежимОтладкиОбработчиков Тогда
		
		УниверсальныйОбменДанными.ДополнитьПравилаИнтерфейсамиОбработчиков(Конвертация, ТаблицаПравилКонвертации, ТаблицаПравилВыгрузки, ТаблицаПравилОчистки);
		
	КонецЕсли;
	
	Попытка
		
		мСоответствиеЗапросовПоПКО = Новый Соответствие;
		мСоответствиеНаличияТиповПриемника = Новый Соответствие();		
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ различные
	               |	СоответствиеОбъектовДляОбмена.ИмяТипаПриемника КАК ИмяТипаПриемника
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	               |ГДЕ
	               |	СоответствиеОбъектовДляОбмена.УзелОбмена = &Узел
				   |	И СоответствиеОбъектовДляОбмена.ИмяТипаПриемника <> """"
	               |";
				   
		Запрос.УстановитьПараметр("Узел", УзелДляОбмена);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ИмяТипаПриемника) Тогда 
				мСоответствиеНаличияТиповПриемника.Вставить(Выборка.ИмяТипаПриемника, Выборка.ИмяТипаПриемника);
			КонецЕсли;				
			
		КонецЦикла;
		
		Попытка
			НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам = УзелДляОбмена.ИспользоватьИнформациюОМестеСозданияОбъектовПриВыгрузкеИЗагрузкеДанных;
			
			Если НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам Тогда
				
				// определим есть ли хоть один объект который был создан в базе обмена и который выгружать не следует
				Запрос = Новый Запрос();
				Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1
				               |	
				               |ИЗ
				               |	РегистрСведений.ОбъектыИнформационныхБаз КАК ОбъектыИнформационныхБаз
				               |ГДЕ
				               |	ОбъектыИнформационныхБаз.УзелОбмена = &Узел";
				Запрос.УстановитьПараметр("Узел", УзелДляОбмена);
				РезультатЗапроса = Запрос.Выполнить();
				Если РезультатЗапроса.Пустой() Тогда
					НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		Исключение
			НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам = Ложь;
		КонецПопытки;
		
		мЗапросСтрокРегистраСоответствияОбъектов.УстановитьПараметр("Узел", УзелДляОбмена);
		мЗапросСтрокРегистраОпределенияНаличияВыгрузки.УстановитьПараметр("Узел", УзелДляОбмена);
		мЗапросИнформацииОМестеСозданияОбъекта.УстановитьПараметр("Узел", УзелДляОбмена);
				
		мСоответствиеДанныхДляОбновленияВыгруженныхЭлементов = Новый Соответствие;
		
	    // Включаем правила обмена в файл
	    ФайлОбмена.ЗаписатьСтроку(мXMLПравила);
		
		РаботаВозможна = ВыполнитьПередачуИнформацииОНачалеОбменаВПриемник(ТекущаяСтрокаДляЗаписи);
		
		Если Не РаботаВозможна Тогда
			
			ФайлОбмена = Неопределено;
			ЗавершитьВедениеПротоколаОбмена();
			Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
				мОбработкаДляЗагрузкиДанных = Неопределено;
			КонецЕсли;
			ДеструкторВнешнейОбработкиОбработчиковСобытий();
			Возврат Ложь;
			
		КонецЕсли;
	    		
	    // Обработчик ПередВыгрузкойДанных
		Отказ = Ложь;
		
		Если Не ПустаяСтрока(Конвертация.ПередВыгрузкойДанных) Тогда
		
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПередВыгрузкойДанных"));
					
				Иначе
					
					Выполнить(Конвертация.ПередВыгрузкойДанных);
					
				КонецЕсли;
				
			Исключение
				СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(62, ОписаниеОшибки(), "ПередВыгрузкойДанных (конвертация)");
				Отказ = Истина;		
			КонецПопытки; 
			
			Если Отказ Тогда // Отказ от выгрузки данных
				
				ФайлОбмена = Неопределено;
				ЗавершитьВедениеПротоколаОбмена();
				Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
					мОбработкаДляЗагрузкиДанных = Неопределено;
				КонецЕсли;
				ДеструкторВнешнейОбработкиОбработчиковСобытий();
				Возврат Ложь;
				
			КонецЕсли;		
			
		КонецЕсли;
		
		ПередатьИнформациюОПользовательскихПоляхПоискаВПриемник();
		
		ПередатьИнформациюОТипахВПриемник();
				
		// нужно параметры передать в приемник
		ПередатьДополнительныеПараметрыВПриемник();
		
		ТекстСобытияПослеЗагрузкиПараметров = "";
		Если Конвертация.Свойство("ПослеЗагрузкиПараметров", ТекстСобытияПослеЗагрузкиПараметров)
			И Не ПустаяСтрока(ТекстСобытияПослеЗагрузкиПараметров) Тогда
			
			ЗаписьСобытия = Новый ЗаписьXML;
			ЗаписьСобытия.УстановитьСтроку();
			одЗаписатьЭлемент(ЗаписьСобытия, "АлгоритмПослеЗагрузкиПараметров", ТекстСобытияПослеЗагрузкиПараметров);
			ЗаписатьВФайл(ЗаписьСобытия);			
								
		КонецЕсли;
				
		МассивПравилВыгрузки = Новый Массив();
				
		СформироватьМассивПравилВыгрузки(ТаблицаПравилВыгрузки.Строки, МассивПравилВыгрузки);
		
		УспешнаяВыгрузка = ВыполнитьВыгрузкуИзмененныхДанныхДляУзлаОбмена(УзелДляОбмена, МассивПравилВыгрузки, СтрокаСообщенияОбОшибке, НужноОграничиватьВыгрузкуПоПринадлежностиОбъектовКИнформационнымБазам);		
						
		// Обработчик ПослеВыгрузкиДанных
		
		Если Не ПустаяСтрока(Конвертация.ПослеВыгрузкиДанных) Тогда
			
			Попытка
				
				Если ФлагРежимОтладкиОбработчиков Тогда
					
					Выполнить(ПолучитьСтрокуВызоваОбработчика(Конвертация, "ПослеВыгрузкиДанных"));
					
				Иначе
					
					Выполнить(Конвертация.ПослеВыгрузкиДанных);
					
				КонецЕсли;
				
			Исключение
				СтрокаСообщенияОбОшибке = ЗаписатьИнформациюОбОшибкеОбработчикиКонвертации(63, ОписаниеОшибки(), "ПослеВыгрузкиДанных (конвертация)");
				УспешнаяВыгрузка = Ложь;
			КонецПопытки;
		
		КонецЕсли;
		
	Исключение
		
		СтрокаСообщенияОбОшибке = ОписаниеОшибки();
		
		ЗаписатьВПротоколВыполнения("Ошибка при выгрузке данных: " + СтрокаСообщенияОбОшибке, Неопределено, Истина, , , Истина);
		
		ВыполнитьПередачуИнформацииПриЗавершенииПередачиДанных(Ложь);
		
		ЗавершитьВедениеПротоколаОбмена();
		ЗакрытьФайл();
		Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
			мОбработкаДляЗагрузкиДанных = Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Если Отказ Тогда // Отказ от записи файла данных
		
		ВыполнитьПередачуИнформацииПриЗавершенииПередачиДанных(Ложь);
		
		ЗавершитьВедениеПротоколаОбмена();
		Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
			мОбработкаДляЗагрузкиДанных = Неопределено;
		КонецЕсли;
		ФайлОбмена = Неопределено;
		
		ДеструкторВнешнейОбработкиОбработчиковСобытий();
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Закрываем файл обмена
	ЗакрытьФайл();
	
	Если АрхивироватьФайл Тогда
		СжатьРезультирующийФайлОбмена();
	КонецЕсли; 
	
	ВыполнитьПередачуИнформацииПриЗавершенииПередачиДанных(УспешнаяВыгрузка, СтрокаСообщенияОбОшибке, 
		СтрокаСообщенияОбОшибкеОтложенныеДвиженияДокумента, 
		ПослеОшибкиОтложенногоПроведенияПрекратитьОперации, КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации);
	
	мДатаОкончанияВыгрузки = ТекущаяДата();
	ЗаписатьВПротоколВыполнения("Окончание выгрузки: " + мДатаОкончанияВыгрузки, , Ложь, , ,Истина);
	
	Если УспешнаяВыгрузка Тогда
		ЗаписатьВПротоколВыполнения("Выгружено объектов: " + мСчетчикВыгруженныхОбъектов, , Ложь, , , Истина);
	Иначе
		
		ИнформацияДляПользователя = "Произошла ошибка при выгрузке объектов. Было выгружено: " + мСчетчикВыгруженныхОбъектов;
		
		СтрокаСообщенияОбОшибке = СтрокаСообщенияОбОшибке + Символы.ПС + ИнформацияДляПользователя;
		ЗаписатьВПротоколВыполнения(ИнформацияДляПользователя, , Ложь, , , Истина);
		
	КонецЕсли;

	ЗавершитьВедениеПротоколаОбмена();
	
	Если НужноУдалитьПодключениеКИБПриемникуПослеВыгрузкиДанных Тогда
		мОбработкаДляЗагрузкиДанных = Неопределено;
	КонецЕсли;
	
	ДеструкторВнешнейОбработкиОбработчиковСобытий();
	
	
	#Если Клиент тогда
	Если ЭтоИнтерактивныйРежим Тогда
		Предупреждение("Выгрузка данных завершена!");
	КонецЕсли; 
	#КонецЕсли

    Возврат УспешнаяВыгрузка;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УСТАНОВКА ЗНАЧЕНИЙ РЕКВИЗИТОВ И МОДАЛЬНЫХ ПЕРЕМЕННЫХ ОБРАБОТКИ

// Процедура установки значения глобальной переменной "ФлагОшибки"
//
// Параметры:
//  Значение - Булево, новое значение переменной "ФлагОшибки"
//  
Процедура УстановитьФлагОшибки(Значение)
	
	ФлагОшибки = Значение;
	
	Если ФлагОшибки Тогда
		
		ДеструкторВнешнейОбработкиОбработчиковСобытий();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текущее значение версии обработки
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  Текущее значение версии обработки
//
Функция ВерсияОбъекта() Экспорт
	
	Возврат "1.0.5"; // от 30.03.2011
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ТАБЛИЦ ПРАВИЛ ОБМЕНА

// Инициализирует колонки таблицы правил конвертации свойств объектов
//
// Параметры:
//  Таб            - ТаблицаЗначений. инициализируемая таблица правил конвертации свойств
// 
Процедура ИнициализацияТаблицыПравилКонвертацииСвойств(Таб) Экспорт

	Колонки = Таб.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("ЭтоГруппа", 			одОписаниеТипа("Булево"));
    Колонки.Добавить("ПравилаГруппы");

	Колонки.Добавить("ВидИсточника");
	Колонки.Добавить("ВидПриемника");
	
	Колонки.Добавить("УпрощеннаяВыгрузкаСвойства", одОписаниеТипа("Булево"));
	Колонки.Добавить("НуженУзелXMLПриВыгрузке", одОписаниеТипа("Булево"));
	Колонки.Добавить("НуженУзелXMLПриВыгрузкеГруппы", одОписаниеТипа("Булево"));

	Колонки.Добавить("ТипИсточника", одОписаниеТипа("Строка"));
	Колонки.Добавить("ТипПриемника", одОписаниеТипа("Строка"));
		
	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");

	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПолучитьИзВходящихДанных", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");

	Колонки.Добавить("ПередОбработкойВыгрузки");
	Колонки.Добавить("ПослеОбработкиВыгрузки");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",			одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",				одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",				одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПередОбработкойВыгрузки",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеОбработкиВыгрузки",	одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ПриводитьКДлине",							одОписаниеТипа("Число"));
	Колонки.Добавить("ИмяПараметраДляПередачи");
	Колонки.Добавить("ПоискПоДатеНаРавенство",					одОписаниеТипа("Булево"));
	
	Колонки.Добавить("СтрокаПолейПоиска");
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертацииСвойств()

Функция СоздатьТаблицуВыгруженныхОбъектов()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("Ключ");
	Таблица.Колонки.Добавить("УзелСсылки");
	Таблица.Колонки.Добавить("ВыгруженаТолькоСсылка", одОписаниеТипа("Булево"));
	Таблица.Колонки.Добавить("НППСсылки", одОписаниеТипа("Число"));
	Таблица.Колонки.Добавить("КоличествоОбращений", одОписаниеТипа("Число"));
	Таблица.Колонки.Добавить("НомерПоследнегоОбращения", одОписаниеТипа("Число"));
					
	Таблица.Индексы.Добавить("Ключ");
	Возврат Таблица;
	
КонецФункции

Функция СоздатьТаблицуЗагруженныхОбъектов()
	
	Таблица = Новый ТаблицаЗначений();
	Таблица.Колонки.Добавить("НППСсылки");
	Таблица.Колонки.Добавить("УзелСсылки");
	Таблица.Колонки.Добавить("КоличествоОбращений", одОписаниеТипа("Число"));
	Таблица.Колонки.Добавить("НомерПоследнегоОбращения", одОписаниеТипа("Число"));
	Таблица.Колонки.Добавить("СсылкаФиктивная", одОписаниеТипа("Булево"));
		
	Таблица.Индексы.Добавить("НППСсылки");
	Возврат Таблица;
	
КонецФункции

// Инициализирует колонки таблицы правил конвертации объектов
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилКонвертации()

	Колонки = ТаблицаПравилКонвертации.Колонки;
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СинхронизироватьПоИдентификатору");
	Колонки.Добавить("НеСоздаватьЕслиНеНайден", одОписаниеТипа("Булево"));
	Колонки.Добавить("НеВыгружатьОбъектыСвойствПоСсылкам", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПродолжитьПоискПоПолямПоискаЕслиПоИдентификаторуНеНашли", одОписаниеТипа("Булево"));
	Колонки.Добавить("ПриПереносеОбъектаПоСсылкеУстанавливатьТолькоGIUD", одОписаниеТипа("Булево"));
	Колонки.Добавить("НеЗамещатьОбъектСозданныйВИнформационнойБазеПриемнике", одОписаниеТипа("Булево"));
	Колонки.Добавить("ИспользоватьБыстрыйПоискПриЗагрузке", одОписаниеТипа("Булево"));
	Колонки.Добавить("ГенерироватьНовыйНомерИлиКодЕслиНеУказан", одОписаниеТипа("Булево"));
	Колонки.Добавить("ВыгружатьОбъектТолькоПриНаличииНаНегоСсылки", одОписаниеТипа("Булево"));
	Колонки.Добавить("МаленькоеКоличествоОбъектов", одОписаниеТипа("Булево"));
	Колонки.Добавить("КоличествоОбращенийДляВыгрузкиСсылки", одОписаниеТипа("Число"));
	Колонки.Добавить("КоличествоЭлементовВИБ", одОписаниеТипа("Число"));
		
	Колонки.Добавить("СпособВыгрузки");

	Колонки.Добавить("Источник");
	Колонки.Добавить("Приемник");
	
	Колонки.Добавить("ТипИсточника",  одОписаниеТипа("Строка"));
	
	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПриВыгрузке");
	Колонки.Добавить("ПослеВыгрузки");
	Колонки.Добавить("ПослеВыгрузкиВФайл");

	Колонки.Добавить("ЕстьОбработчикПередВыгрузкой",	одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриВыгрузке",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузки",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеВыгрузкиВФайл",одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередЗагрузкой");
	Колонки.Добавить("ПриЗагрузке");
	Колонки.Добавить("ПослеЗагрузки");
	
	Колонки.Добавить("ПоследовательностьПолейПоиска");
	Колонки.Добавить("ПоискПоТабличнымЧастям");
	
	Колонки.Добавить("ПриоритетОбъектовОбмена");
	
	Колонки.Добавить("ЕстьОбработчикПередЗагрузкой", одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПриЗагрузке",    одОписаниеТипа("Булево"));
	Колонки.Добавить("ЕстьОбработчикПослеЗагрузки",  одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЕстьОбработчикПоследовательностьПолейПоиска",  одОписаниеТипа("Булево"));

	Колонки.Добавить("СвойстваПоиска",	одОписаниеТипа("ТаблицаЗначений"));
	Колонки.Добавить("Свойства",		одОписаниеТипа("ТаблицаЗначений"));
	
	Колонки.Добавить("Значения",		одОписаниеТипа("Соответствие"));

	Колонки.Добавить("Выгруженные",							одОписаниеТипа("ТаблицаЗначений"));
	Колонки.Добавить("ВыгружатьПредставлениеИсточника",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("НеЗамещать",					одОписаниеТипа("Булево"));
	
	Колонки.Добавить("ЗапоминатьВыгруженные",       одОписаниеТипа("Булево"));
	Колонки.Добавить("ВсеОбъектыВыгружены",         одОписаниеТипа("Булево"));
	
КонецПроцедуры // ИнициализацияТаблицыПравилКонвертации()

// Инициализирует колонки таблицы правил выгрузки данных
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияТаблицыПравилВыгрузки()

	Колонки = ТаблицаПравилВыгрузки.Колонки;

	Колонки.Добавить("Включить",		одОписаниеТипа("Число"));
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок");

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	
	//Колонки.Добавить("ОбъектВыборкиСтрокой");
	
	Колонки.Добавить("ПравилоКонвертации");

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");

	Колонки.Добавить("ПередВыгрузкой");
	Колонки.Добавить("ПослеВыгрузки");
	
	// Колонки для поддержки отбора с помощью построителя
	Колонки.Добавить("ИспользоватьОтбор", одОписаниеТипа("Булево"));
	Колонки.Добавить("НастройкиПостроителя");
	Колонки.Добавить("ИмяОбъектаДляЗапроса");
	Колонки.Добавить("ИмяОбъектаДляЗапросаРегистра");
	
	Колонки.Добавить("НеВыгружатьОбъектыСозданныеВБазеПриемнике", одОписаниеТипа("Булево"));
	
	Колонки.Добавить("СсылкаНаУзелОбмена");

КонецПроцедуры // ИнициализацияТаблицыПравилВыгрузки()

// Инициализирует колонки таблицы правил очистки данных
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыПравилОчистки()

	Колонки = ТаблицаПравилОчистки.Колонки;

	Колонки.Добавить("Включить",		одОписаниеТипа("Булево"));
	Колонки.Добавить("ЭтоГруппа",		одОписаниеТипа("Булево"));
	
	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Порядок",	одОписаниеТипа("Число"));

	Колонки.Добавить("СпособОтбораДанных");
	Колонки.Добавить("ОбъектВыборки");
	
	Колонки.Добавить("УдалятьЗаПериод");
	Колонки.Добавить("Непосредственно",	одОписаниеТипа("Булево"));

	Колонки.Добавить("ПередОбработкой");
	Колонки.Добавить("ПослеОбработки");
	Колонки.Добавить("ПередУдалением");

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

// Инициализирует колонки таблицы настройки параметров
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияТаблицыНастройкиПараметров()

	Колонки = ТаблицаНастройкиПараметров.Колонки;

	Колонки.Добавить("Имя");
	Колонки.Добавить("Наименование");
	Колонки.Добавить("Значение");
	Колонки.Добавить("ПередаватьПараметрПриВыгрузке");
	Колонки.Добавить("ПравилоКонвертации");

КонецПроцедуры // ИнициализацияТаблицыПравилОчистки()

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ РЕКВИЗИТОВ И МОДУЛЬНЫХ ПЕРЕМЕННЫХ

// Инициализирует переменную одСообщения, содержащую соответствия кодов сообщений их описаниям
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияСообщений()

	одСообщения			= Новый Соответствие;
		
	одСообщения.Вставить(2,  "Ошибка распаковки файла обмена. Файл заблокирован.");
	одСообщения.Вставить(3,  "Указанный файл правил обмена не существует!");
	одСообщения.Вставить(4,  "Ошибка при создании COM-объекта Msxml2.DOMDocument");
	одСообщения.Вставить(5,  "Ошибка открытия файла обмена");
	одСообщения.Вставить(6,  "Ошибка при загрузке правил обмена");
	одСообщения.Вставить(7,  "Ошибка формата правил обмена");
	одСообщения.Вставить(8,  "Не корректно указано имя файла для выгрузки данных");
	одСообщения.Вставить(9,  "Ошибка формата файла обмена");
	одСообщения.Вставить(10, "Не указано имя файла для выгрузки данных (Имя файла данных)");
	одСообщения.Вставить(11, "Ссылка на несуществующий объект метаданных в правилах обмена");
	одСообщения.Вставить(12, "Не указано имя файла с правилами обмена (Имя файла правил)");
			
	одСообщения.Вставить(13, "Ошибка получения значения свойства объекта (по имени свойства источника)");
	одСообщения.Вставить(14, "Ошибка получения значения свойства объекта (по имени свойства приемника)");
	
	одСообщения.Вставить(15, "Не указано имя файла для загрузки данных (Имя файла для загрузки)");
			
	одСообщения.Вставить(16, "Ошибка получения значения свойства подчиненного объекта (по имени свойства источника)");
	одСообщения.Вставить(17, "Ошибка получения значения свойства подчиненного объекта (по имени свойства приемника)");
		
	одСообщения.Вставить(19, "Ошибка в обработчике события ПередЗагрузкойОбъекта");
	одСообщения.Вставить(20, "Ошибка в обработчике события ПриЗагрузкеОбъекта");
	одСообщения.Вставить(21, "Ошибка в обработчике события ПослеЗагрузкиОбъекта");
	одСообщения.Вставить(22, "Ошибка в обработчике события ПередЗагрузкойДанных (конвертация)");
	одСообщения.Вставить(23, "Ошибка в обработчике события ПослеЗагрузкиДанных (конвертация)");
	одСообщения.Вставить(24, "Ошибка при удалении объекта");
	одСообщения.Вставить(25, "Ошибка при записи документа");
	одСообщения.Вставить(26, "Ошибка записи объекта");
	одСообщения.Вставить(27, "Ошибка в обработчике события ПередОбработкойПравилаОчистки");
	одСообщения.Вставить(28, "Ошибка в обработчике события ПослеОбработкиПравилаОчистки");
	одСообщения.Вставить(29, "Ошибка в обработчике события ПередУдалениемОбъекта");
	
	одСообщения.Вставить(31, "Ошибка в обработчике события ПередОбработкойПравилаВыгрузки");
	одСообщения.Вставить(32, "Ошибка в обработчике события ПослеОбработкиПравилаВыгрузки");
	одСообщения.Вставить(33, "Ошибка в обработчике события ПередВыгрузкойОбъекта");
	одСообщения.Вставить(34, "Ошибка в обработчике события ПослеВыгрузкиОбъекта");
			
	одСообщения.Вставить(39, "Ошибка при выполнении алгоритма, содержащегося в файле обмена");
			
	одСообщения.Вставить(41, "Ошибка в обработчике события ПередВыгрузкойОбъекта");
	одСообщения.Вставить(42, "Ошибка в обработчике события ПриВыгрузкеОбъекта");
	одСообщения.Вставить(43, "Ошибка в обработчике события ПослеВыгрузкиОбъекта");
			
	одСообщения.Вставить(45, "Не найдено правило конвертации объектов");
		
	одСообщения.Вставить(48, "Ошибка в обработчике события ПередОбработкойВыгрузки группы свойств");
	одСообщения.Вставить(49, "Ошибка в обработчике события ПослеОбработкиВыгрузки группы свойств");
	одСообщения.Вставить(50, "Ошибка в обработчике события ПередВыгрузкой (объекта коллекции)");
	одСообщения.Вставить(51, "Ошибка в обработчике события ПриВыгрузке (объекта коллекции)");
	одСообщения.Вставить(52, "Ошибка в обработчике события ПослеВыгрузки (объекта коллекции)");
	одСообщения.Вставить(53, "Ошибка в глобальном обработчике события ПередЗагрузкойОбъекта (конвертация)");
	одСообщения.Вставить(54, "Ошибка в глобальном обработчике события ПослеЗагрузкиОбъекта (конвертация)");
	одСообщения.Вставить(55, "Ошибка в обработчике события ПередВыгрузкой (свойства)");
	одСообщения.Вставить(56, "Ошибка в обработчике события ПриВыгрузке (свойства)");
	одСообщения.Вставить(57, "Ошибка в обработчике события ПослеВыгрузки (свойства)");
	
	одСообщения.Вставить(62, "Ошибка в обработчике события ПередВыгрузкойДанных (конвертация)");
	одСообщения.Вставить(63, "Ошибка в обработчике события ПослеВыгрузкиДанных (конвертация)");
	одСообщения.Вставить(64, "Ошибка в глобальном обработчике события ПередКонвертациейОбъекта (конвертация)");
	одСообщения.Вставить(65, "Ошибка в глобальном обработчике события ПередВыгрузкойОбъекта (конвертация)");
	одСообщения.Вставить(66, "Ошибка получения коллекции подчиненных объектов из входящих данных ");
	одСообщения.Вставить(67, "Ошибка получения свойства подчиненного объекта из входящих данных ");
	одСообщения.Вставить(68, "Ошибка получения свойства объекта из входящих данных ");
	
	одСообщения.Вставить(69, "Ошибка в глобальном обработчике события ПослеВыгрузкиОбъекта (конвертация)");
	
	одСообщения.Вставить(71, "Не найдено соответствие для значения Источника");
	
	одСообщения.Вставить(72, "Ошибка при выгрузке данных для узла плана обмена ");
	
	одСообщения.Вставить(73, "Ошибка в обработчике события ПоследовательностьПолейПоиска ");	
	одСообщения.Вставить(74, "Необходимо перезагрузить правила обмена для выгрузки данных.");
	
	одСообщения.Вставить(75, "Ошибка в обработчике события ПослеЗагрузкиПравилОбмена (конвертация)");
	одСообщения.Вставить(76, "Ошибка в обработчике события ПередОтправкойИнформацииОбУдалении (конвертация)");
	одСообщения.Вставить(77, "Ошибка в обработчике события ПриПолученииИнформацииОбУдалении (конвертация)");
	
	одСообщения.Вставить(78, "Ошибка при выполнении алгоритма после загрузки значений параметров");
	
	одСообщения.Вставить(79, "Ошибка в обработчике события ПослеВыгрузкиОбъектаВФайл");
	
	одСообщения.Вставить(174, "Номер входящего сообщения меньше либо номеру равен ранее принятому ");
	одСообщения.Вставить(175, "Ошибка в обработчике события ПередПолучениемИзмененныхОбъектов (конвертация)");
	одСообщения.Вставить(176, "Ошибка в обработчике события ПослеПолученияИнформацииОбУзлахОбмена (конвертация)");
		
КонецПроцедуры // ИнициализацияСообщений()

Процедура ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, ИмяТипа, Менеджер, ПрефиксИмениТипа, ВозможенПоискПоПредопределенным = Ложь)
	
	Имя              = ОбъектМД.Имя;
	ТипСсылкиСтрокой = ПрефиксИмениТипа + "." + Имя;
	СтрокаПоиска     = "ВЫБРАТЬ Ссылка ИЗ " + ИмяТипа + "." + Имя + " ГДЕ ";
	СтрокаПоискаВыгрузкиСсылки     = "ВЫБРАТЬ #ПоляПоиска# ИЗ " + ИмяТипа + "." + Имя;
	ТипСсылки        = Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,СтрокаПоиска,СтрокаПоискаВыгрузкиСсылки,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, СтрокаПоиска, СтрокаПоискаВыгрузкиСсылки, ВозможенПоискПоПредопределенным);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
	
	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Истина, Ложь);
	МенеджерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
КонецПроцедуры

Процедура ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, ИмяТипа, Менеджер, ПрефиксИмениТипаЗапись, ПрефиксИмениТипаВыборка)
	
	Периодический = Неопределено;
	
	Имя					= ОбъектМД.Имя;
	ТипСсылкиСтрокой	= ПрефиксИмениТипаЗапись + "." + Имя;
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, Ложь);
	
	Если ИмяТипа = "РегистрСведений" Тогда
		
		Периодический = (ОбъектМД.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
		ПодчиненныйРегистратору = (ОбъектМД.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору);
		
		Структура.Вставить("Периодический", Периодический);
		Структура.Вставить("ПодчиненныйРегистратору", ПодчиненныйРегистратору);
		
	КонецЕсли;	
	
	Менеджеры.Вставить(ТипСсылки, Структура);
		

	СтруктураДляПланаОбмена = Новый Структура("Имя,ТипСсылки,ЭтоСсылочныйТип,ЭтоРегистр", Имя, ТипСсылки, Ложь, Истина);
	МенеджерыДляПлановОбмена.Вставить(ОбъектМД, СтруктураДляПланаОбмена);
	
	
	ТипСсылкиСтрокой	= ПрефиксИмениТипаВыборка + "." + Имя;
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, Ложь);
	
	Если Периодический <> Неопределено Тогда
		
		Структура.Вставить("Периодический", Периодический);
		Структура.Вставить("ПодчиненныйРегистратору", ПодчиненныйРегистратору);	
		
	КонецЕсли;
	
	Менеджеры.Вставить(ТипСсылки, Структура);	
		
КонецПроцедуры

// Инициализирует переменную Менеджеры, содержащую соответствия типов объектов их свойствам
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияМенеджеров()

	Менеджеры = Новый Соответствие;
	
	МенеджерыДляПлановОбмена = Новый Соответствие;
    	
	// ССЫЛКИ
	
	Для каждого ОбъектМД Из Метаданные.Справочники Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Справочник", Справочники[ОбъектМД.Имя], "СправочникСсылка", Истина);
					
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.Документы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Документ", Документы[ОбъектМД.Имя], "ДокументСсылка");
				
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.ПланыВидовХарактеристик Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланВидовХарактеристик", ПланыВидовХарактеристик[ОбъектМД.Имя], "ПланВидовХарактеристикСсылка", Истина);
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыСчетов Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланСчетов", ПланыСчетов[ОбъектМД.Имя], "ПланСчетовСсылка", Истина);
						
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыВидовРасчета Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланВидовРасчета", ПланыВидовРасчета[ОбъектМД.Имя], "ПланВидовРасчетаСсылка", Истина);
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.ПланыОбмена Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "ПланОбмена", ПланыОбмена[ОбъектМД.Имя], "ПланОбменаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.Задачи Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "Задача", Задачи[ОбъектМД.Имя], "ЗадачаСсылка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.БизнесПроцессы Цикл
		
		ДополнитьМассивМенеджеровСсылочнымТипом(Менеджеры, МенеджерыДляПлановОбмена, ОбъектМД, "БизнесПроцесс", БизнесПроцессы[ОбъектМД.Имя], "БизнесПроцессСсылка");
		
		ИмяТипа = "ТочкаМаршрутаБизнесПроцесса";
		// ссылка на точки маршрута
		Имя              = ОбъектМД.Имя;
		Менеджер         = БизнесПроцессы[Имя].ТочкиМаршрута;
		СтрокаПоиска     = "";
		ТипСсылкиСтрокой = "ТочкаМаршрутаБизнесПроцессаСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО,ПустаяСсылка,ВозможенПоискПоПредопределенным,СтрокаПоиска", Имя, 
			ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, , Неопределено, Ложь, СтрокаПоиска);		
		Менеджеры.Вставить(ТипСсылки, Структура);
				
	КонецЦикла;
	
	// РЕГИСТРЫ

	Для каждого ОбъектМД Из Метаданные.РегистрыСведений Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрСведений", РегистрыСведений[ОбъектМД.Имя], "РегистрСведенийЗапись", "РегистрСведенийВыборка");
						
	КонецЦикла;

	Для каждого ОбъектМД Из Метаданные.РегистрыБухгалтерии Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрБухгалтерии", РегистрыБухгалтерии[ОбъектМД.Имя], "РегистрБухгалтерииЗапись", "РегистрБухгалтерииВыборка");
				
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.РегистрыНакопления Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрНакопления", РегистрыНакопления[ОбъектМД.Имя], "РегистрНакопленияЗапись", "РегистрНакопленияВыборка");
						
	КонецЦикла;
	
	Для каждого ОбъектМД Из Метаданные.РегистрыРасчета Цикл
		
		ДополнитьМассивМенеджеровТипомРегистра(Менеджеры, ОбъектМД, "РегистрРасчета", РегистрыРасчета[ОбъектМД.Имя], "РегистрРасчетаЗапись", "РегистрРасчетаВыборка");
						
	КонецЦикла;
	
	ИмяТипа = "Перечисление";
	
	Для каждого ОбъектМД Из Метаданные.Перечисления Цикл
		
		Имя              = ОбъектМД.Имя;
		Менеджер         = Перечисления[Имя];
		ТипСсылкиСтрокой = "ПеречислениеСсылка." + Имя;
		ТипСсылки        = Тип(ТипСсылкиСтрокой);
		Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ПКО,ПустаяСсылка,ВозможенПоискПоПредопределенным", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, , Перечисления[Имя].ПустаяСсылка(), Ложь);
		Менеджеры.Вставить(ТипСсылки, Структура);
		
	КонецЦикла;
	
	// Константы
	ИмяТипа             = "Константы";
	ОбъектМД            = Метаданные.Константы;
	Имя					= "Константы";
	Менеджер			= Константы;
	ТипСсылкиСтрокой	= "КонстантыНабор";
	ТипСсылки			= Тип(ТипСсылкиСтрокой);
	Структура = Новый Структура("Имя,ИмяТипа,ТипСсылкиСтрокой,Менеджер,ОбъектМД,ВозможенПоискПоПредопределенным,ПКО", Имя, ИмяТипа, ТипСсылкиСтрокой, Менеджер, ОбъектМД, Ложь);
	Менеджеры.Вставить(ТипСсылки, Структура);
	
КонецПроцедуры // ИнициализацияМенеджеров()

Процедура ИнициализироватьМенеджерыИСообщения() Экспорт
	
	Если Менеджеры = Неопределено Тогда
		ИнициализацияМенеджеров();
	КонецЕсли; 

	Если одСообщения = Неопределено Тогда
		ИнициализацияСообщений();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьСтруктуруКонвертации()
	
	Конвертация  = Новый Структура("ПередВыгрузкойДанных, ПослеВыгрузкиДанных, ПередПолучениемИзмененныхОбъектов, ПослеПолученияИнформацииОбУзлахОбмена, ПередВыгрузкойОбъекта, ПослеВыгрузкиОбъекта, ПередКонвертациейОбъекта, ПередЗагрузкойОбъекта, ПослеЗагрузкиОбъекта, ПередЗагрузкойДанных, ПослеЗагрузкиДанных, ПриПолученииИнформацииОбУдалении, ПередОтправкойИнформацииОбУдалении");
	Конвертация.Вставить("УдалятьСопоставленныеОбъектыВПриемникеПриИхУдаленииВИсточнике", Ложь);
	
КонецПроцедуры

// Инициализирует реквизиты обработки и модульные переменные
//
// Параметры:
//  Нет.
// 
Процедура ИнициализацияРеквизитовИМодульныхПеременных()

	мРежимВизуальнойНастройкиОбмена = Ложь;
	КоличествоОбработанныхОбъектовДляОбновленияСтатуса = 100;
	
	ЗапоминатьЗагруженныеОбъекты     = Истина;
	ЧислоХранимыхВыгруженныхОбъектовПоТипам = 2000;
		
	ПараметрыИнициализированы        = Ложь;
	
	ВестиДополнительныйКонтрольЗаписиВXML = Ложь;
	НепосредственноеЧтениеВИБПриемнике = Ложь;
	ОтслеживатьКоллизииПриЗагрузкеДанных = Истина;
	ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных = Истина;
	
	Менеджеры    = Неопределено;
	одСообщения  = Неопределено;
	
	ФлагОшибки   = Ложь;
	
	СоздатьСтруктуруКонвертации();
	
	Правила      = Новый Структура;
	Алгоритмы    = Новый Структура;
	ДопОбработки = Новый Структура;
	Запросы      = Новый Структура;

	Параметры    = Новый Структура;
	СобытияПослеЗагрузкиПараметров = Новый Структура;
	
	ПараметрыДопОбработок = Новый Структура;
    	
	мXMLПравила  = Неопределено;
	мXMLДокумент = DOM_НовыйXMLДокумент();

	
	// Типы

	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	мТипРегистрСоответствия 	   = Тип("РегистрСведенийНаборЗаписей.СоответствиеОбъектовДляОбмена");

	ЗначениеПустаяДата		   = Дата('00010101');

	// Типы узлов xml
	
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;


	мСписокМакетовПравилОбмена  = Новый СписокЗначений;

	Для каждого Макет Из ЭтотОбъект.Метаданные().Макеты Цикл
		мСписокМакетовПравилОбмена.Добавить(Макет.Синоним);
	КонецЦикла; 
	
    мФайлПротоколаДанных = Неопределено;
	
	мСоответствиеТиповИНазваниеОбъектов = Новый Соответствие();
	
	ТипИнформационнойБазыДляПодключения = Истина;
	АутентификацияWindowsИнформационнойБазыДляПодключения = Ложь;
	ВерсияПлатформыИнформационнойБазыДляПодключения = "V81";
	ЗаписыватьВИнформационнуюБазуТолькоИзмененныеОбъекты = Истина;
	ОптимизированнаяЗаписьОбъектов = Истина;
	
	
	мСоответствиеПустыхЗначенийТипов = Новый Соответствие;
	мСоответствиеОписаниеТипов = Новый Соответствие;
	
	мБылиПрочитаныПравилаОбменаПриЗагрузке = Ложь;
	мПроверятьЗагруженностьПравилПриВыгрузке = Истина;
	мПрефиксДокументовПриЗагрузке = "";
	мДатаДокументовДляУстановкиПрефикса = Неопределено;
	мДлинаПрефиксаДокументовПриЗагрузке = 0;
	
	мРазрешитьПроведениеДокумента = Метаданные.СвойстваОбъектов.Проведение.Разрешить;
	
	мРежимЗагрузкиИнформацииОПравилахОбмена = Ложь;
	
	мИнформацияОПользовательскихПоляхПоискаПриВыгрузкеДанных = Новый Соответствие();
	мИнформацияОПользовательскихПоляхПоискаПриЗагрузкеДанных = Новый Соответствие();
		
	мЗапросСтрокРегистраСоответствияОбъектов = Новый Запрос();
	мЗапросСтрокРегистраСоответствияОбъектов.Текст = "ВЫБРАТЬ Первые 1
	               |	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	               |ГДЕ
	               |	СоответствиеОбъектовДляОбмена.УзелОбмена = &Узел
	               |	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СвояСсылка
	               |	И СоответствиеОбъектовДляОбмена.ИмяТипаПриемника = &ТипПриемникаСтрокой
				   |	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ <> """" ";				   
				   
	мЗапросСтрокРегистраОпределенияНаличияВыгрузки = Новый Запрос();
	мЗапросСтрокРегистраОпределенияНаличияВыгрузки.Текст = "ВЫБРАТЬ Первые 1
	               |	СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ КАК СсылкаВДругойИБ
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	               |ГДЕ
	               |	СоответствиеОбъектовДляОбмена.УзелОбмена = &Узел
	               |	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СвояСсылка
	               |	И СоответствиеОбъектовДляОбмена.ИмяТипаПриемника = &ТипПриемникаСтрокой
				   |	";
				   
	мЗапросНаличияСтрокВРегистреСоответствия = Новый Запрос();
	мЗапросНаличияСтрокВРегистреСоответствия.Текст = "ВЫБРАТЬ первые 1 
				   |	СоответствиеОбъектовДляОбмена.ИмяТипаПриемника КАК ИмяТипаПриемника
	               |	
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	               |ГДЕ
	               |	СоответствиеОбъектовДляОбмена.УзелОбмена = &Узел
	               |	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СвояСсылка
				   |	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = &СсылкаВДругойИБ
				   |	И СоответствиеОбъектовДляОбмена.ИмяТипаПриемника = &ИмяТипаПриемника";
				   
	мЗапросНаличияПустыхДляИсточникаВРегистреСоответствия = Новый Запрос();
	мЗапросНаличияПустыхДляИсточникаВРегистреСоответствия.Текст = "ВЫБРАТЬ первые 1 
				   |	СоответствиеОбъектовДляОбмена.ИмяТипаПриемника КАК ИмяТипаПриемника
	               |	
	               |ИЗ
	               |	РегистрСведений.СоответствиеОбъектовДляОбмена КАК СоответствиеОбъектовДляОбмена
	               |ГДЕ
	               |	СоответствиеОбъектовДляОбмена.УзелОбмена = &Узел
	               |	И СоответствиеОбъектовДляОбмена.СобственнаяСсылка = &СвояСсылка
				   |	И СоответствиеОбъектовДляОбмена.СсылкаВДругойИБ = """"
				   |";
				   
	мЗапросИнформацииОМестеСозданияОбъекта = Новый Запрос();
	мЗапросИнформацииОМестеСозданияОбъекта.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 1
	                                               |ИЗ
	                                               |	РегистрСведений.ОбъектыИнформационныхБаз КАК ОбъектыИнформационныхБаз
	                                               |ГДЕ
	                                               |	ОбъектыИнформационныхБаз.Объект = &Объект
	                                               |	И ОбъектыИнформационныхБаз.УзелОбмена = &Узел";
												   
	мМенеджерРегистраСоответствийОбъектов = РегистрыСведений.СоответствиеОбъектовДляОбмена;
	мМенеджерРегистраОтложенныеДвижения = РегистрыСведений.ОтложенныеДвиженияДокументов;
	мМенеджерРегистраКоллизий = РегистрыСведений.КоллизииПриОбмене;
				   
КонецПроцедуры // ИнициализацияРеквизитовИМодульныхПеременных()

Функция ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения = "", СтрокаСообщенияОбОшибке = "") Экспорт
	
	НаличиеОшибок = Ложь;
	
	Если СтруктураПодключения.ФайловыйРежим  Тогда
		
		Если ПустаяСтрока(СтруктураПодключения.КаталогИБ) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задан каталог информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		СтрокаПодключения = "File=""" + СтруктураПодключения.КаталогИБ + """";
	Иначе
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяСервера) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя сервера 1С:Предприятия информационной базы-приемника";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтруктураПодключения.ИмяИБНаСервере) Тогда
			
			СтрокаСообщенияОбОшибке = "Не задано имя информационной базы-приемника на сервере 1С:Предприятия";
			#Если Клиент Тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			НаличиеОшибок = Истина;
			
		КонецЕсли;		
		
		СтрокаПодключения = "Srvr = """ + СтруктураПодключения.ИмяСервера + """; Ref = """ + СтруктураПодключения.ИмяИБНаСервере + """";		
		
	КонецЕсли;
	
	Возврат НЕ НаличиеОшибок;	
	
КонецФункции

Функция СформироватьТекстСообщенияПользователю(Знач ТекстСообщения) Экспорт

	НачалоСлужебногоСообщения    = Найти(ТекстСообщения, "{");
	ОкончаниеСлужебногоСообщения = Найти(ТекстСообщения, "}:");
	
	Если ОкончаниеСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения > 0 
		И НачалоСлужебногоСообщения < ОкончаниеСлужебногоСообщения Тогда
		
		ТекстСообщения = Лев(ТекстСообщения, (НачалоСлужебногоСообщения - 1)) +
		                 Сред(ТекстСообщения, (ОкончаниеСлужебногоСообщения + 2));
						 
	КонецЕсли;
	
	Возврат СокрЛП(ТекстСообщения);

КонецФункции // ()

// Функция убирает из текста сообщения служебную информацию
//
// Параметры
//  ТекстСообщения, Строка, исходный текст сообщения//
// Возвращаемое значение:
//   Строка
//
Процедура СообщитьОбОшибкеДляПользователю(Знач ТекстСообщения) Экспорт

	ТекстДляПользователя = СформироватьТекстСообщенияПользователю(ТекстСообщения);
	
	Сообщить(ТекстДляПользователя, СтатусСообщения.Важное);

КонецПроцедуры

Функция ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке = "", 
	ОбъектПодключения = "", ТекCOMПодключение = Неопределено) Экспорт
	
	Перем СтрокаПодключения;
	
	ПараметровДостаточно = ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения, СтрокаПодключения, СтрокаСообщенияОбОшибке);
	
	Если Не ПараметровДостаточно Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не СтруктураПодключения.АутентификацияWindows Тогда
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пользователь) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Usr = """ + СтруктураПодключения.Пользователь + """";
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтруктураПодключения.Пароль) Тогда
			СтрокаПодключения = СтрокаПодключения + ";Pwd = """ + СтруктураПодключения.Пароль + """";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПодключения = СтрокаПодключения + ";";
	
	Попытка
		
		#Если Клиент Тогда
		Состояние("Идет процесс соединения ...");
		#КонецЕсли
		
		//"V8" или "V81"
		Если ПустаяСтрока(ОбъектПодключения) Тогда
			ОбъектПодключения = СтруктураПодключения.ВерсияПлатформы +".COMConnector";
		КонецЕсли;
		
		ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
		ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
					
		#Если Клиент Тогда
		Состояние("Соединение установлено");
		#КонецЕсли		
			
	Исключение
		
		СтрокаСообщенияОбОшибке = "При попытке подключения к информационной базе произошла ошибка:" + Символы.ПС 
						+ ОписаниеОшибки();
		#Если Клиент Тогда
			СообщитьОбОшибкеДляПользователю(СтрокаСообщенияОбОшибке);
		    Состояние("Соединение установить не удалось");			
		#КонецЕсли
							
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ТекCOMОбъект;
	
КонецФункции

Функция ОпределитьДостаточностьПараметровДляПодключенияКПриемнику() Экспорт
	
	СтруктураПодключения = СформироватьСтруктуруДляПодключения();
	ДостаточностьПараметров = ОпределитьДостаточностьПараметровДляПодключенияКИнформационнойБазе(СтруктураПодключения);	
	Возврат ДостаточностьПараметров;
	
КонецФункции

Функция СформироватьСтруктуруДляПодключения()
	
	СтруктураПодключения = Новый Структура();
	СтруктураПодключения.Вставить("ФайловыйРежим", ТипИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("АутентификацияWindows", АутентификацияWindowsИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("КаталогИБ", КаталогИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяСервера", ИмяСервераИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ИмяИБНаСервере", ИмяИнформационнойБазыНаСервереДляПодключения);
	СтруктураПодключения.Вставить("Пользователь", ПользовательИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("Пароль", ПарольИнформационнойБазыДляПодключения);
	СтруктураПодключения.Вставить("ВерсияПлатформы", ВерсияПлатформыИнформационнойБазыДляПодключения);	
	
	Возврат СтруктураПодключения;
	
КонецФункции

Функция ВернутьПодключениеКПриемнику() Экспорт
	
	СтруктураПодключения = СформироватьСтруктуруДляПодключения();
	ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения);
	
	Возврат ОбъектПодключения;
	
КонецФункции

Функция ВыполнитьПодключениеКИБПриемнику(РезультатПодключения = Неопределено, СтрокаСообщенияОбОшибке = "", ОбъектПодключения = Неопределено) Экспорт
	
	Если РезультатПодключения = Неопределено Тогда
	
		СтруктураПодключения = СформироватьСтруктуруДляПодключения();
		ОбъектПодключения = ПодключитсяКИнформационнойБазе(СтруктураПодключения, СтрокаСообщенияОбОшибке);
		
		Если ОбъектПодключения = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Попытка
			РезультатПодключения = ОбъектПодключения.Обработки.ОбменДаннымиXML.Создать();
		Исключение
			СтрокаСообщенияОбОшибке = "При попытке создания обработки ОбменДаннымиXML произошла ошибка:" + ОписаниеОшибки();
			#Если Клиент тогда
			Сообщить(СтрокаСообщенияОбОшибке, СтатусСообщения.Важное);
			#КонецЕсли
			РезультатПодключения = Неопределено;
		КонецПопытки;
	
	КонецЕсли;
	
	Если РезультатПодключения = Неопределено Тогда
		Возврат РезультатПодключения;
	КонецЕсли;
	
	Попытка
		РезультатПодключения.ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных = ВыполнитьОтложенноеПроведениеДокументовПослеЗагрузкиДанных;
	Исключение
	КонецПопытки;
	
	РезультатПодключения.ИспользоватьТранзакции = ИспользоватьТранзакции;	
	РезультатПодключения.КоличествоОбъектовНаТранзакцию = КоличествоОбъектовНаТранзакцию;
	
	РезультатПодключения.ФлагРежимОтладки = ФлагРежимОтладки;
	
	Если ПустаяСтрока(РезультатПодключения.ИмяФайлаПротоколаОбмена)
		И Не ПустаяСтрока(ИмяФайлаПротоколаОбмена) Тогда
		
		РезультатПодключения.ИмяФайлаПротоколаОбмена = ПроцедурыОбменаДанными.ПолучитьИмяПротоколаЗагрузки(ИмяФайлаПротоколаОбмена);
		РезультатПодключения.ДописыватьДанныеВПротоколОбмена = ДописыватьДанныеВПротоколОбмена;
		
	Иначе
		
		РезультатПодключения.ДописыватьДанныеВПротоколОбмена = Истина;
		
	КонецЕсли;
					
	РезультатПодключения.ВыводВПротоколИнформационныхСообщений = ВыводВПротоколИнформационныхСообщений;
	
	РезультатПодключения.РежимОбмена = "Загрузка";
		
	Возврат РезультатПодключения;
	
КонецФункции

// Инициализирует внешнюю обработку с модулем отладки в объекте "УниверсальныйОбменДанными"
//
// Параметры:
//  РаботаВозможна - Булево - флаг успешной инициализации внешней обработки
//  
Процедура ИнициализацияВнешнейОбработкиОбработчиковСобытий(РаботаВозможна)
	
	Если УниверсальныйОбменДанными <> Неопределено Тогда
		
		УниверсальныйОбменДанными.ИнициализацияВнешнейОбработкиОбработчиковСобытий(РаботаВозможна, ЭтотОбъект);
		
		Если Не РаботаВозможна Тогда
			
			УстановитьФлагОшибки(Истина);
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	
КонецПроцедуры  

// Вызывает деструктор внешней обработки из объекта "УниверсальныйОбменДанными"
//
// Параметры:
//  Нет.
//  
Процедура ДеструкторВнешнейОбработкиОбработчиковСобытий() Экспорт
	
	Если УниверсальныйОбменДанными <> Неопределено Тогда
		
		УниверсальныйОбменДанными.ДеструкторВнешнейОбработкиОбработчиковСобытий();
		
	КонецЕсли; 
	
КонецПроцедуры 

// Создает экземпляр обработки "УниверсальныйОбменДаннымиXML"
//
// Параметры:
//  РаботаВозможна - Булево - флаг успешной инициализации экземпляра обработки
//  
Процедура ИнициализацияОбработкиУниверсальныйОбменДанными(РаботаВозможна = Истина) Экспорт
		
	Если УниверсальныйОбменДанными <> Неопределено Тогда
		
		//Перезаписываем реквизиты обработки
		ИнициализацияРеквизитовОбработкиУниверсальныйОбменДанными();
		
	Иначе
		
		Если Не РаботаВозможна Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ФлагРежимОтладкиОбработчиков Тогда
			Возврат;
		КонецЕсли;
		
		//Создаем обработку
		Попытка
			
			УниверсальныйОбменДанными = Обработки.УниверсальныйОбменДаннымиXML.Создать();
			
			ТекстСообщения = "Режим отладки обработчиков не может быть установлен!
							  |Необходимо наличие обработки ""УниверсальныйОбменДаннымиXML"" версии не ниже 2.0.25.";
							  
			//Проверка версии обработки (должна быть не ниже 2.0.25)
			Попытка
				
				Если УниверсальныйОбменДанными.ВерсияОбъекта() < 25 Тогда
					
					УниверсальныйОбменДанными    = Неопределено;
					ФлагРежимОтладкиОбработчиков = Ложь;
					РаботаВозможна               = Ложь;
					Сообщить(ТекстСообщения, СтатусСообщения.Важное);
					Возврат;
					
				КонецЕсли;
				
			Исключение
				
				УниверсальныйОбменДанными    = Неопределено;
				ФлагРежимОтладкиОбработчиков = Ложь;
				РаботаВозможна               = Ложь;
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				Возврат;
				
			КонецПопытки;
			
			ИнициализацияРеквизитовОбработкиУниверсальныйОбменДанными();

		Исключение
			
			ФлагРежимОтладкиОбработчиков = Ложь;
			РаботаВозможна               = Ложь;
			
			Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
			
		КонецПопытки;
		
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет необходимые реквизиты экземпляра обработки "УниверсальныйОбменДаннымиXML"
//
// Параметры:
//  Нет.
//  
Процедура ИнициализацияРеквизитовОбработкиУниверсальныйОбменДанными()
	
	Если УниверсальныйОбменДанными <> Неопределено Тогда
		
		УниверсальныйОбменДанными.ФлагРежимОтладкиОбработчиков                = ФлагРежимОтладкиОбработчиков;
		УниверсальныйОбменДанными.ИмяФайлаВнешнейОбработкиОбработчиковСобытий = ИмяФайлаВнешнейОбработкиОбработчиковСобытий;
		УниверсальныйОбменДанными.РежимОтладкиАлгоритмов                      = РежимОтладкиАлгоритмов; 
		УниверсальныйОбменДанными.ИмяФайлаПравилОбмена                        = ИмяФайлаПравилОбмена;
		УниверсальныйОбменДанными.ИмяФайлаОбмена                              = ИмяФайлаОбмена;
		
	КонецЕсли; 
	
КонецПроцедуры  

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ИнициализацияРеквизитовИМодульныхПеременных();

ИнициализацияТаблицыПравилКонвертации();
ИнициализацияТаблицыПравилВыгрузки();
ИнициализацияТаблицыПравилОчистки();
ИнициализацияТаблицыНастройкиПараметров();
