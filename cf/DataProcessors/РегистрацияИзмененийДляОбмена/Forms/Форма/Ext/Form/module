
Перем мСоответствиеСтрокДереваИМетаданных;

Процедура ДобавитьМетаданныеДанныеВСтруктуруДерева(СтруктураДерева, Знач МетаданныеОбъекта, Знач ИмяОтображения, Знач ИмяДанных, 
	Знач НомерКартинкиМетаданных, Знач НомерКартинкиЭлементаМетаданных, Знач НомерКартинкиКонечногоЭлемента)
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Метаданные", МетаданныеОбъекта);
	СтруктураДанных.Вставить("ИмяОтображения", ИмяОтображения);
	СтруктураДанных.Вставить("ИмяДанных", ИмяДанных);
	СтруктураДанных.Вставить("НомерКартинкиМетаданных", НомерКартинкиМетаданных);
	СтруктураДанных.Вставить("НомерКартинкиЭлементаМетаданных", НомерКартинкиЭлементаМетаданных);
	СтруктураДанных.Вставить("НомерКартинкиКонечногоЭлемента", НомерКартинкиКонечногоЭлемента);
	
	СтрокаДерева = ДеревоОбмена.Строки.Добавить();
	СтрокаДерева.Имя = ИмяОтображения;
	СтрокаДерева.Данные = ИмяДанных;
	
	СтруктураДанных.Вставить("СтрокаДерева", СтрокаДерева);
	
	мСоответствиеСтрокДереваИМетаданных.Добавить(СтруктураДанных);
	
КонецПроцедуры

//Функция возвращает элемент соответсвия массива по метаданным
Функция ПолучитьЭлементСоответствияПоМетаданным(СоответствиеСтрокДереваИМетаданных, МетаданныеОбъекта)
	
	Для Каждого СтрокаСоответствия Из СоответствиеСтрокДереваИМетаданных Цикл
		
		Если СтрокаСоответствия.Метаданные.Индекс(МетаданныеОбъекта) > -1 Тогда
				
			Возврат СтрокаСоответствия;
						
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

//Функция получить элемент соответсвия по имени данных
Функция ПолучитьЭлементСоответствияПоИмениДанных(СоответствиеСтрокДереваИМетаданных, ИмяДанных)
	
	Для Каждого СтрокаСоответствия Из СоответствиеСтрокДереваИМетаданных Цикл
			
		Если СтрокаСоответствия.ИмяДанных = ИмяДанных Тогда
				
			Возврат СтрокаСоответствия;
						
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции


//Функция возвращает номер картинки для элемента отображения данных
Функция ПолучитьНомерКартинкиПоДанным(УровеньДерева, ДанныеСтроки)
	
	Если УровеньДерева = 0 Тогда
		
		СтрокаСоответствия = ПолучитьЭлементСоответствияПоИмениДанных(мСоответствиеСтрокДереваИМетаданных, ДанныеСтроки.Данные);	
		Возврат СтрокаСоответствия.НомерКартинкиМетаданных;
		
	ИначеЕсли УровеньДерева = 1 Тогда
		
		ИмяДанныхРодителя = ДанныеСтроки.Родитель.Данные;
		СтрокаСоответствия = ПолучитьЭлементСоответствияПоИмениДанных(мСоответствиеСтрокДереваИМетаданных, ИмяДанныхРодителя);	
		Возврат СтрокаСоответствия.НомерКартинкиЭлементаМетаданных;
		
	ИначеЕсли УровеньДерева = 2 Тогда
		
		ИмяДанныхРодителя = ДанныеСтроки.Родитель.Родитель.Данные;
		
		Если ИмяДанныхРодителя = "Документы" Тогда
			
			Если ДанныеСтроки.Удален = Истина Тогда
				Возврат 13;
			ИначеЕсли ДанныеСтроки.Данные.Проведен Тогда
				Возврат 8;
			ИначеЕсли ДанныеСтроки.Данные.ПометкаУдаления Тогда
				Возврат 9;
			Иначе
				Возврат 10;
			КонецЕсли;
		
		ИначеЕсли (СформироватьПрефиксТипаСсылки(ИмяДанныхРодителя) <> "") Тогда
			
			Если ДанныеСтроки.Удален = Истина Тогда
				Возврат 13;	
			ИначеЕсли ДанныеСтроки.Данные.ПометкаУдаления Тогда
				Возврат 11;
			Иначе
				Возврат 12;
			КонецЕсли;
			
		Иначе
			СтрокаСоответствия = ПолучитьЭлементСоответствияПоИмениДанных(мСоответствиеСтрокДереваИМетаданных, ИмяДанныхРодителя);	
			Возврат СтрокаСоответствия.НомерКартинкиКонечногоЭлемента;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//Функция возвращает строку дерева с такими же метаданными
Функция ВернутьСтрокуДереваПоМетаданным(ДеревоПоиска, МетаданныеОбъекта)
	
	СтрокаПоиска = ДеревоПоиска.Строки.Найти(МетаданныеОбъекта, "Данные", Ложь);
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта)
	
	НазваниеМетаданных = "";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Справочник";
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Документ";
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовХарактеристик";
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланСчетов";
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрСведений";
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "ПланВидовРасчета";
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрНакопления";
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрБухгалтерии";
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "РегистрРасчета";
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "БизнесПроцесс";
		
	ИначеЕсли Метаданные.Задачи.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Задача";
					   
	ИначеЕсли Метаданные.Константы.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Константа";
		
	ИначеЕсли Метаданные.Последовательности.Содержит(МетаданныеОбъекта) Тогда
		
		НазваниеМетаданных = "Последовательность";
		
	Иначе
		
		НазваниеМетаданных = "";
				
	КонецЕсли;
	
	Возврат НазваниеМетаданных;
	
КонецФункции

Функция ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта)
	
	Запрос = Новый Запрос();
	
	ИмяТаблицыДляПоискаЗарегистрированных = ПолучитьПоМетаданномуНазвание(МетаданныеОбъекта);
	
	Если ПустаяСтрока(ИмяТаблицыДляПоискаЗарегистрированных) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИмяТаблицыДляПоискаЗарегистрированных = ИмяТаблицыДляПоискаЗарегистрированных + "." + МетаданныеОбъекта.Имя + ".Изменения";
		
	Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Количество
	   |ИЗ
	   |	" + ИмяТаблицыДляПоискаЗарегистрированных + " КАК РегистрацияИзменений
	   |ГДЕ
	   |РегистрацияИзменений.Узел = &Узел";
				   
	Запрос.УстановитьПараметр("Узел", УзелОбмена);
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаДанных.Количество() = 0 Тогда
		Возврат 0;
	Иначе		
		Возврат ТаблицаДанных[0].Количество;		
	КонецЕсли;
	
КонецФункции

Процедура ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(СтрокаДерева)
	
	МетаданныеОбъекта = СтрокаДерева.Данные;
	
	СтароеКоличествоЗарегистрированныхОбъектов = СтрокаДерева.КоличествоЗарегистрированных;

	КоличествоОбъектовСРегистрацией = ПолучитьКоличествоЗарегистрированныхОбъектовДляМетаданногоПоУзлу(МетаданныеОбъекта);
	СтрокаДерева.КоличествоЗарегистрированных = КоличествоОбъектовСРегистрацией;
	
	Родитель = СтрокаДерева.Родитель;
	
	Пока Родитель <> Неопределено Цикл
		
		Родитель.КоличествоЗарегистрированных = Родитель.КоличествоЗарегистрированных - СтароеКоличествоЗарегистрированныхОбъектов + КоличествоОбъектовСРегистрацией;		
		Родитель = Родитель.Родитель;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПостроитьДеревоОбменаДанных(ДеревоОбмена, МетаданныеПланаОбмена, МетаданныеДляОграничения = Неопределено)
	
	Если МетаданныеДляОграничения = Неопределено Тогда
		ДеревоОбмена.Строки.Очистить();
		мСоответствиеСтрокДереваИМетаданных.Очистить();
		
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Константы, "Константы", "Константы",	0, 0, 0);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Справочники, "Справочники", "Справочники",	1, 5, 0);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Документы, "Документы", "Документы",	6, 7, 0);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Последовательности, "Последовательности", "Последовательности",	26, 26, 26);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыСведений, "Регистры сведений", "РегистрыСведений",	2, 2, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыНакопления, "Регистры накопления", "РегистрыНакопления",	4, 4, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.ПланыВидовХарактеристик, "Планы видов характеристик", "ПланыВидовХарактеристик",	14, 15, 12);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.ПланыСчетов, "Планы счетов", "ПланыСчетов",	16, 17, 17);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.ПланыВидовРасчета, "Планы видов расчета", "ПланыВидовРасчета",	18, 19, 19);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыБухгалтерии, "Регистры бухгалтерии", "РегистрыБухгалтерии",	22, 22, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.РегистрыРасчета, "Регистры расчета", "РегистрыРасчета",	23, 23, 3);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.БизнесПроцессы, "Бизнес-процессы", "БизнесПроцессы",	20, 21, 21);
		ДобавитьМетаданныеДанныеВСтруктуруДерева(мСоответствиеСтрокДереваИМетаданных, Метаданные.Задачи, "Задачи", "Задачи",	24, 24, 25);
		
		МетаданныеОбъекта = Неопределено;
		
		// надо определить что подлежит обмену
		Для Каждого СтрокаДляОбмена Из МетаданныеПланаОбмена.Состав Цикл
			
			МетаданныеОбъектаПредка = МетаданныеОбъекта;
			
			МетаданныеОбъекта = СтрокаДляОбмена.Метаданные;
			
			ЭлементСоответствия = ПолучитьЭлементСоответствияПоМетаданным(мСоответствиеСтрокДереваИМетаданных, МетаданныеОбъекта);
					
			Если ЭлементСоответствия = Неопределено Тогда
				
				// перерасчеты не отображаем в обработке
				//СообщитьОбОшибке("Невозможно определить тип объекта: " + Строка(МетаданныеОбъекта));
				Продолжить;
				
			КонецЕсли;
			
			СтрокаДерева = ЭлементСоответствия.СтрокаДерева;
			
			СтрокаДобавления = СтрокаДерева.Строки.Добавить(); 
			
			СтрокаДобавления.Имя = МетаданныеОбъекта.Имя;
			СтрокаДобавления.Данные = МетаданныеОбъекта;
			СтрокаДобавления.РежимАвтоРегистрации = (СтрокаДляОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить);
			СтрокаДобавления.КоличествоЗарегистрированных = 0;
			
			Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения Тогда
				
				ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(СтрокаДобавления);				
								
			КонецЕсли;
						
		КонецЦикла;
	
	Иначе
		
		ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Строки.Очистить();
		
	КонецЕсли;

	
	Если ЗагружатьИзменения
		ИЛИ МетаданныеДляОграничения <> Неопределено Тогда
	
		ТипДанныхУдаления = Тип("УдалениеОбъекта");
		КоличествоЗаписанныхОбъектов = 0;
		
		Если ПланыОбмена[МетаданныеПланаОбмена.Имя].ЭтотУзел() = УзелОбмена Тогда
		
			Возврат;	
			
		КонецЕсли;
		
		// осталось теперь все измененные данные получить и их поместить в дерево
		ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(УзелОбмена, УзелОбмена.НомерОтправленного + 1, МетаданныеДляОграничения);
		Пока ВыборкаИзменений.Следующий() Цикл
			
			// имененный элемент
			Данные = ВыборкаИзменений.Получить();
			
			// данные должны быть
			Если Данные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоУдаление = (ТипДанныхУдаления = ТипЗнч(Данные));
			
			Если ЭтоУдаление Тогда
				МетаданныеОбъекта = Данные.Ссылка.Метаданные();
			Иначе	
				МетаданныеОбъекта = Данные.Метаданные();
			КонецЕсли;
			
			// определяем делать ли выгрузку того что отобрали или нет...
			СтрокаНайденногоПараметра = Неопределено;
			СтрокаВыгрузки = Неопределено;
			НаименованиеДляВыгрузки = "";
			
			ЭлементСоответствия = ПолучитьЭлементСоответствияПоМетаданным(мСоответствиеСтрокДереваИМетаданных, МетаданныеОбъекта);
			
			Если ЭлементСоответствия = Неопределено Тогда
				
				Сообщить("Невозможно определить класс объекта: " + Строка(Данные), СтатусСообщения.Важное);
				Продолжить;
				
			КонецЕсли;
			
			СтрокаВыгрузки = ВернутьСтрокуДереваПоМетаданным(ЭлементСоответствия.СтрокаДерева, МетаданныеОбъекта);
			
			ПрефиксСсылки = СформироватьПрефиксТипаСсылки(ЭлементСоответствия.ИмяДанных);
			
			Если Не ПустаяСтрока(ПрефиксСсылки) Тогда
				
				Если ЭтоУдаление Тогда
					НаименованиеДляВыгрузки = Строка(Данные.Ссылка);
				Иначе
					НаименованиеДляВыгрузки = Строка(Данные);
				КонецЕсли;
				
			ИначеЕсли ЭлементСоответствия.ИмяДанных = "РегистрыСведений"
				ИЛИ ЭлементСоответствия.ИмяДанных = "РегистрыНакопления"
				ИЛИ ЭлементСоответствия.ИмяДанных = "РегистрыБухгалтерии"
				ИЛИ ЭлементСоответствия.ИмяДанных = "РегистрыРасчета" Тогда

				НаименованиеДляВыгрузки = "Набор записей " + Строка(СтрокаВыгрузки.Строки.Количество() + 1);
				
			Иначе
				
				НаименованиеДляВыгрузки = Строка(Данные);
				
			КонецЕсли;
			
			СтрокаДобавления = СтрокаВыгрузки.Строки.Добавить();
			СтрокаДобавления.Имя = НаименованиеДляВыгрузки;
			СтрокаДобавления.Данные = Данные;
			СтрокаДобавления.Удален = ЭтоУдаление;
			        		
			КоличествоЗаписанныхОбъектов = КоличествоЗаписанныхОбъектов + 1;
			
			Если КоличествоЗаписанныхОбъектов % 500 = 0 Тогда
				Состояние("Чтение изменений для узла """ + УзелОбмена.Наименование + """. Прочитано объектов: " + Строка(КоличествоЗаписанныхОбъектов));
				ОбработкаПрерыванияПользователя();
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;	
	
	Для Каждого СтрокаСоответствия Из мСоответствиеСтрокДереваИМетаданных Цикл
		
		СтрокаСоответствия.СтрокаДерева.Строки.Сортировать("Имя", Истина);
		
		Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения Тогда
			
			Если СтрокаСоответствия.СтрокаДерева.КоличествоЗарегистрированных > 0 Тогда
				
				ЭлементыФормы.ДеревоОбмена.Развернуть(СтрокаСоответствия.СтрокаДерева, Ложь);
				
			КонецЕсли;
			
		Иначе
		
			ЭлементыФормы.ДеревоОбмена.Развернуть(СтрокаСоответствия.СтрокаДерева, Ложь);
			
		КонецЕсли;
			
	КонецЦикла;
	    	
КонецПроцедуры

//Функция по имени родителя предка формируется префикс типа
Функция СформироватьПрефиксТипаСсылки(Знач НаименованиеПредка)
	
	Если НаименованиеПредка = "Справочники" Тогда
		Возврат "СправочникСсылка";
	ИначеЕсли НаименованиеПредка = "Документы" Тогда
		Возврат "ДокументСсылка";
	ИначеЕсли НаименованиеПредка = "ПланыВидовХарактеристик" Тогда
		Возврат "ПланВидовХарактеристикСсылка";
	ИначеЕсли НаименованиеПредка = "ПланыСчетов" Тогда
		Возврат "ПланСчетовСсылка";
	ИначеЕсли НаименованиеПредка = "ПланыВидовРасчета" Тогда
		Возврат "ПланВидовРасчетаСсылка";
	ИначеЕсли НаименованиеПредка = "БизнесПроцессы" Тогда
		Возврат "БизнесПроцессСсылка";
	ИначеЕсли НаименованиеПредка = "Задачи" Тогда
		Возврат "ЗадачаСсылка";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

//процедура строит дерево измененных объектов для узла
Процедура ПостроитьДеревоИзмененныхОбъектовДляУзла(МетаданныеДляОграничения = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Предупреждение("Не указан узел обмена");
		Возврат;
	КонецЕсли;
			
	МетаданныеПланаОбмена = УзелОбмена.Метаданные();
	
	// надо построить дерево тех метаданных которые учавствуют в обмене
	ПостроитьДеревоОбменаДанных(ДеревоОбмена, МетаданныеПланаОбмена, МетаданныеДляОграничения);
	
КонецПроцедуры

//процедура добавляет/удаляет регистрацию для объектов
Процедура ДобавитьУдалитьРегистрациюДляОбъектов(Знач ДобавитьРегистрацию = Истина)
	
	Если ЭлементыФормы.ДеревоОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УровеньВыбраннойСтроки = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Уровень();
	РегистрацияВсехИзменений = Истина;
	СтрокаДобавленияУдаленияРегистрации = ?(ДобавитьРегистрацию, "Добавить", "Удалить");
	
	СписокРедактирования = Неопределено;
	НужноОбновлятьДерево = ДобавитьРегистрацию;
	
	Если УровеньВыбраннойСтроки = 0 Тогда
		
		// общий класс, справочники, константы...
		ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех объектов с типом: " + ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Имя;
		ОтветПользователя = Вопрос(ТекстПодтверждения, РежимДиалогаВопрос.ДаНет);
		Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли УровеньВыбраннойСтроки = 1 Тогда
		
		// конкретный справочник или константа
		ТекстПодтверждения = СтрокаДобавленияУдаленияРегистрации + " регистрацию для всех объектов с типом: " + ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Имя;
		
		ОтветПользователя = Вопрос(ТекстПодтверждения, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Нет);
		Если ОтветПользователя = КодВозвратаДиалога.Отмена Тогда
			Возврат;
			
		ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Да Тогда
			РегистрацияВсехИзменений = Истина;
			
		ИначеЕсли ОтветПользователя = КодВозвратаДиалога.Нет Тогда
			РегистрацияВсехИзменений = Ложь;
			
			НазваниеСтрокиПредка = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Родитель.Имя;
			
			СписокРедактирования = ПолучитьДанныеДляРегистрацииИзменений(НазваниеСтрокиПредка, ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Данные.Имя);
			НужноОбновлятьДерево = Истина;
			
		КонецЕсли;
				
	ИначеЕсли УровеньВыбраннойСтроки = 2 Тогда	
		
		Если ДобавитьРегистрацию Тогда 
			// конкретный элемент...
			НазваниеСтрокаКласса = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Родитель.Родитель.Имя;
			НазваниеСтрокиТипа = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Родитель.Имя;
				
			СписокРедактирования = ПолучитьДанныеДляРегистрацииИзменений(НазваниеСтрокаКласса, НазваниеСтрокиТипа);
						
		Иначе
			//
			СписокРедактирования = Новый СписокЗначений;
			СписокРедактирования.Добавить(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Данные);
			
	    КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДереваТекущихДанных = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные;
	
	
	
	Если УровеньВыбраннойСтроки = 0 Тогда
		
		Для Каждого СтрокаДерева Из СтрокаДереваТекущихДанных.Строки Цикл
			
			Если ДобавитьРегистрацию Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаДерева.Данные);
			Иначе 
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СтрокаДерева.Данные);
				УдалитьКонечныеЭлементыДерева(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные);
			КонецЕсли;
			
			ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(СтрокаДерева);
			
		КонецЦикла;
					
	ИначеЕсли УровеньВыбраннойСтроки = 1 
		И РегистрацияВсехИзменений Тогда
		
		Если ДобавитьРегистрацию Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаДереваТекущихДанных.Данные);
		Иначе
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СтрокаДереваТекущихДанных.Данные);
			УдалитьКонечныеЭлементыДерева(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные);
		КонецЕсли;
		
		ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(СтрокаДереваТекущихДанных);
			
	Иначе
			
		// регистрация того, что выберет пользователь
		Если СписокРедактирования = Неопределено Тогда
			// ничего не смогли поделать
			Возврат;
		КонецЕсли;
		
		СтрокаОбновления = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные;
		Если СтрокаОбновления.Уровень() >= 2 Тогда
			СтрокаОбновления = СтрокаОбновления.Родитель;
		КонецЕсли;
			
		Для Каждого ЗначенияСписка Из СписокРедактирования Цикл
			
			Попытка
				
				Если НЕ ЗначениеЗаполнено(ЗначенияСписка.Значение) Тогда
					Продолжить;
				КонецЕсли;
				
			Исключение
			КонецПопытки;
				
			Если ДобавитьРегистрацию Тогда
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, ЗначенияСписка.Значение);
			Иначе
				ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, ЗначенияСписка.Значение);
					
				Если Не НужноОбновлятьДерево Тогда
					ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Родитель.Строки.Удалить(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные);	
				КонецЕсли;
					
			КонецЕсли;
					
		КонецЦикла;
		
		ОбновитьКоличествоЗарегистрированныхДляСтрокиДерева(СтрокаОбновления);
				
	КонецЕсли;
	
	Если НужноОбновлятьДерево 
		И ЗагружатьИзменения Тогда
		
		ПостроитьДеревоИзмененныхОбъектовДляУзла();	
		
	КонецЕсли;
	
КонецПроцедуры

	
// для узла обмена показывает зарегистрированные изменения
Процедура ОсновныеДействияФормыЗарегистрированныеИзменения(Кнопка)
	
	ПостроитьДеревоИзмененныхОбъектовДляУзла();	
		
КонецПроцедуры

// при выводе строки дерева
Процедура ДеревоОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Имя.ОтображатьКартинку = истина;
	ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ОтображатьКартинку = Ложь;
	ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "";
		
	УровеньДерева = ДанныеСтроки.Уровень();
	
	ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = ПолучитьНомерКартинкиПоДанным(УровеньДерева, ДанныеСтроки);
	
	Если УровеньДерева = 1 Тогда
		
		ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ОтображатьКартинку = Истина;
		
		Если ДанныеСтроки.РежимАвтоРегистрации = Истина Тогда
			
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ИндексКартинки = 0;
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Разрешить";
			
		Иначе
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ИндексКартинки = 1;
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Запретить";
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Имя.ИндексКартинки = ПолучитьНомерКартинкиПоДанным(УровеньДерева, ДанныеСтроки);
		
		Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения
			И ДанныеСтроки.КоличествоЗарегистрированных <> 0 Тогда
			
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст + " (" + Строка(ДанныеСтроки.КоличествоЗарегистрированных) + ")";	
			
		КонецЕсли;
		
	ИначеЕсли УровеньДерева = 0 Тогда
		
		Если ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения
			И ДанныеСтроки.КоличествоЗарегистрированных <> 0 Тогда
			
			ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Зарегистрировано: " + Строка(ДанныеСтроки.КоличествоЗарегистрированных);	
			
		КонецЕсли;
			
	
		
	КонецЕсли;
	
КонецПроцедуры

// развернуть дерево
Процедура КоманднаяПанельДереваОбъектовРазвернуть(Кнопка)
	
	Если ЭлементыФормы.ДеревоОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ДеревоОбмена.Развернуть(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные, Истина);
	
КонецПроцедуры

// свернуть дерево
Процедура КоманднаяПанельДереваОбъектовСвернутьДерево(Кнопка)

	Если ЭлементыФормы.ДеревоОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ДеревоОбмена.Свернуть(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные);
	
КонецПроцедуры

// процедура отображает данные регитсра
Процедура ОтобразитьДанныеРегистра(Данные, Знач ИмяГлавногоРодителя)
	
	СтрокаТипа = Строка(Данные);
	
	ПозицияТочки = Найти(СтрокаТипа, ".");
	
	ИмяРегистра = Сред(СтрокаТипа, ПозицияТочки + 1);
	
	Если ИмяГлавногоРодителя = "РегистрыСведений" Тогда
	
		ФормаСписка = РегистрыСведений[ИмяРегистра].ПолучитьФормуСписка();
	
	ИначеЕсли ИмяГлавногоРодителя = "РегистрыНакопления" Тогда
		
		ФормаСписка = РегистрыНакопления[ИмяРегистра].ПолучитьФормуСписка();
		
	ИначеЕсли ИмяГлавногоРодителя = "РегистрыБухгалтерии" Тогда
		
		ФормаСписка = РегистрыБухгалтерии[ИмяРегистра].ПолучитьФормуСписка();
		
	ИначеЕсли ИмяГлавногоРодителя = "РегистрыРасчета" Тогда
		
		ФормаСписка = РегистрыРасчета[ИмяРегистра].ПолучитьФормуСписка();	
		
	КонецЕсли;
	
	// отбор ставим
	Для Каждого СтрокаОтбора Из Данные.Отбор Цикл
		
		СтрокаОтбораФормы = ФормаСписка.Отбор.Найти(СтрокаОтбора.Имя);
		
		Если СтрокаОтбораФормы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
		СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
		СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
		
	КонецЦикла;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

// выбор строки дерева
Процедура ДеревоОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УровеньВыбраннойСтроки = ВыбраннаяСтрока.Уровень();
	
	Если УровеньВыбраннойСтроки < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяСтрока.Удален = Истина Тогда
		Предупреждение("Невозможно посмотреть удаленный элемент");
		Возврат;
	КонецЕсли;
	
	Если ВыбраннаяСтрока.Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяГлавногоРодителя = ВыбраннаяСтрока.Родитель.Родитель.Данные;
	Данные =  ВыбраннаяСтрока.Данные;
	
	Попытка
		
		Если ИмяГлавногоРодителя = "Константы" Тогда
			Предупреждение(Данные.Значение, , Строка(Данные));	
			
		ИначеЕсли (СформироватьПрефиксТипаСсылки(ИмяГлавногоРодителя) <> "") Тогда
			
			Данные.ПолучитьФорму().Открыть();
				
		ИначеЕсли ИмяГлавногоРодителя = "РегистрыСведений"
			ИЛИ ИмяГлавногоРодителя = "РегистрыНакопления"
			ИЛИ ИмяГлавногоРодителя = "РегистрыБухгалтерии"
			ИЛИ ИмяГлавногоРодителя = "РегистрыРасчета" Тогда
			
			ОтобразитьДанныеРегистра(Данные, ИмяГлавногоРодителя);	
				
		КонецЕсли;
		
	Исключение
		Сообщить("Ошибка при попытке отобразить данные: " + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
КонецПроцедуры

//Процедура удаляет все строки дерева у которых уровень не меньше 2
Процедура УдалитьКонечныеЭлементыДерева(ДеревоДанных)
	
	Если ДеревоДанных.Уровень() >= 1 Тогда
		
		ДеревоДанных.Строки.Очистить();
		
	Иначе
		
		Для Каждого СтрокаДерева Из ДеревоДанных.Строки Цикл
			
			УдалитьКонечныеЭлементыДерева(СтрокаДерева);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// удаление регистрации изменений
Процедура КоманднаяПанельДереваОбъектовОтменитьРегистрациюИзменения(Кнопка)
	
	ДобавитьУдалитьРегистрациюДляОбъектов(Ложь);
		
КонецПроцедуры

//Функция возвращает данные для регистрации изменений
Функция ПолучитьДанныеДляРегистрацииИзменений(НазваниеСтрокиПредка, НазваниеТипаСтроки)
	
	СписокРедактирования = Неопределено;
	
	// не для всех типов позволяем список объектов для регистрации редактировать
	ПрефиксНазванияТипа = СформироватьПрефиксТипаСсылки(НазваниеСтрокиПредка);
	Если Не ПустаяСтрока(ПрефиксНазванияТипа) Тогда
			
		ФормаРедактированияОбъектов = ПолучитьФорму("ФормаВыбораОбъектовДляРегистрации", ЭтаФорма);
				
		МассивТипов = Новый Массив();
						
		МассивТипов.Добавить(Тип(ПрефиксНазванияТипа + "." + НазваниеТипаСтроки));
		ФормаРедактированияОбъектов.ОписаниеТиповРедактированияСписка = Новый ОписаниеТипов(МассивТипов);
				
		РезультатОткрытия = ФормаРедактированияОбъектов.ОткрытьМодально();
				
		Если РезультатОткрытия <> Истина Тогда
			Возврат Неопределено;
		КонецЕсли;
				
		СписокРедактирования = ФормаРедактированияОбъектов.СписокРедактирования;
				
		// ничего не выбрали для регистрации
		Если СписокРедактирования.Количество() = 0 Тогда 
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;	

	Возврат СписокРедактирования;
	
КонецФункции

// добавить регистрацию
Процедура КоманднаяПанельДереваОбъектовДобавитьРегистрацию(Кнопка)
	
	ДобавитьУдалитьРегистрациюДляОбъектов(Истина);
	
КонецПроцедуры

//Функция регистрирует изменнения для всего дерева объектов
Функция ЗарегистрироватьИзмененияДляДерева()
	
	ФормаВопроса = ПолучитьФорму("ФормаВыбораОбновленияРегистрации", ЭтаФорма);
	ФормаВопроса.ТекстВопросаПользователю = "Операция регистрации всех изменений необратима. Зарегистрировать изменения для всех объектов участвующих в обмене?";
				
	РезультатОткрытия = ФормаВопроса.ОткрытьМодально();
				
	Если РезультатОткрытия <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТолькоДляОбъектовСАвтоматическойРегистрацией = ФормаВопроса.ОбновлятьТолькоДляЭлементовСАвтоРегистрацией;

	Для Каждого СтрокаДерева Из ДеревоОбмена.Строки Цикл
		
		Для Каждого СтрокаТипаДанных Из СтрокаДерева.Строки Цикл
			
			Если ТолькоДляОбъектовСАвтоматическойРегистрацией
				И СтрокаТипаДанных.РежимАвтоРегистрации = Ложь Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, СтрокаТипаДанных.Данные);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//Функция очищает регистрирацию изменнения для всего дерева объектов
Функция ОчиститьРегистрациюИзмененияДляДерева()
	
	ФормаВопроса = ПолучитьФорму("ФормаВыбораОбновленияРегистрации", ЭтаФорма);
	ФормаВопроса.ТекстВопросаПользователю = "Операция удаления регистрации изменений необратима. Удалить регистрацию изменений для всех объектов участвующих в обмене?";
				
	РезультатОткрытия = ФормаВопроса.ОткрытьМодально();
				
	Если РезультатОткрытия <> Истина Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТолькоДляОбъектовСАвтоматическойРегистрацией = ФормаВопроса.ОбновлятьТолькоДляЭлементовСАвтоРегистрацией;

	Для Каждого СтрокаДерева Из ДеревоОбмена.Строки Цикл
		
		Для Каждого СтрокаТипаДанных Из СтрокаДерева.Строки Цикл
			
			Если ТолькоДляОбъектовСАвтоматическойРегистрацией
				И СтрокаТипаДанных.РежимАвтоРегистрации = Ложь Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(УзелОбмена, СтрокаТипаДанных.Данные);
			
		КонецЦикла;	
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


// показываем результат стандарной выгрузки
Процедура КоманднаяПанельДереваОбъектовПоказатьРезультатСтандартнойВыгрузки(Кнопка)
	
	Если ЭлементыФормы.ДеревоОбмена.ТекущиеДанные = Неопределено
		ИЛИ ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Данные = Неопределено
		ИЛИ ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Уровень() <> 2 Тогда
		
		Предупреждение("Выберите конкретный объект, результат выгрузки которого необходимо увидеть.");		
		Возврат;
		
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	
	Попытка
		ЗаписатьXML(ЗаписьXML, ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Данные); 
	Исключение
	КонецПопытки;
	
	СтрXML = ЗаписьXML.Закрыть();
	
	// сроку отображаем в отдельном окне
	Форма = ЭтотОбъект.ПолучитьФорму("ФормаДанныхВыгрузки");
	Форма.УстановитьРедактируемыйТекст(СтрXML);
	
	Форма.Открыть();
	
КонецПроцедуры



Процедура ВыполнитьРегистрациюПервогоОбъектаДляУзла(Знач ПрефиксОбъектаМетаданных, Знач НазваниеОбъекта)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Первые 1
	               |	ОбъектДанных.Ссылка
	               |ИЗ
	               |	" + ПрефиксОбъектаМетаданных + "." + НазваниеОбъекта + " КАК ОбъектДанных";
				   
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Выборка.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюРегистра(Знач ИмяТипаОбъектаМетаданных, Знач ПрефиксОбъектаМетаданных, Знач НазваниеОбъекта)
	
	КолонкаОтбора = "Регистратор";
	
	Если ИмяТипаОбъектаМетаданных = "РегистрыСведений" Тогда
		
		МетаданныеРегистра = Метаданные.РегистрыСведений[НазваниеОбъекта];
		
		Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
			
			КолонкаОтбора = "";
			МассивКолонокОтбора = Новый Массив();
			
			Если МетаданныеРегистра.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				
				МассивКолонокОтбора.Добавить("Период");		
				
			КонецЕсли;
			
			Для Каждого КолонкаИзмерений Из МетаданныеРегистра.Измерения Цикл
				
				Если КолонкаИзмерений.ОсновнойОтбор = Истина Тогда
					
					МассивКолонокОтбора.Добавить(КолонкаИзмерений.Имя);	
					
				КонецЕсли;
											
			КонецЦикла;
			
		КонецЕсли;
						
	КонецЕсли;		
	
	Запрос = Новый Запрос();
	
	СтрокаКолонокВыборкиДанных = "";
	
	Если КолонкаОтбора <> "" Тогда
		
		СтрокаКолонокВыборкиДанных = "ОбъектДанных." + КолонкаОтбора;
		
	Иначе
		
		Для Каждого ЭлементКолонки Из МассивКолонокОтбора Цикл
			
			СтрокаКолонокВыборкиДанных = СтрокаКолонокВыборкиДанных + "," + Символы.ПС +  "ОбъектДанных." + ЭлементКолонки;
			
		КонецЦикла;
		
		СтрокаКолонокВыборкиДанных = СокрЛП(Сред(СтрокаКолонокВыборкиДанных, 2));
		
	КонецЕсли;
	
	
	// нет ни измерений, ни периодичности
	Если ПустаяСтрока(СтрокаКолонокВыборкиДанных) Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, МетаданныеРегистра);	
		Возврат;
		
	КонецЕсли;
	
	
	Запрос.Текст = "ВЫБРАТЬ Первые 1
				   |	" + СтрокаКолонокВыборкиДанных + " 
				   |ИЗ
				   |	" + ПрефиксОбъектаМетаданных + "." + НазваниеОбъекта + " КАК ОбъектДанных";
				   
				   
					   
	Выборка = Запрос.Выполнить().Выбрать();
		
	Если Выборка.Следующий() Тогда
		
		Если ИмяТипаОбъектаМетаданных = "Последовательности" Тогда
			
			НаборЗаписей = Последовательности[НазваниеОбъекта].СоздатьНаборЗаписей();
			
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыСведений" Тогда
			
			НаборЗаписей = РегистрыСведений[НазваниеОбъекта].СоздатьНаборЗаписей();
			
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыНакопления" Тогда	
			
			НаборЗаписей = РегистрыНакопления[НазваниеОбъекта].СоздатьНаборЗаписей();
			
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыБухгалтерии" Тогда	
			
			НаборЗаписей = РегистрыБухгалтерии[НазваниеОбъекта].СоздатьНаборЗаписей();	
			
		ИначеЕсли ИмяТипаОбъектаМетаданных = "РегистрыРасчета" Тогда	
			
			НаборЗаписей = РегистрыРасчета[НазваниеОбъекта].СоздатьНаборЗаписей();	
				
		КонецЕсли;
		
		Если КолонкаОтбора <> "" Тогда 
			
			НаборЗаписей.Отбор[КолонкаОтбора].Установить(Выборка[КолонкаОтбора]);
			
		Иначе
			
			Для Каждого ЭлементКолонки Из МассивКолонокОтбора Цикл
			
				НаборЗаписей.Отбор[ЭлементКолонки].Установить(Выборка[ЭлементКолонки]);
			
			КонецЦикла;
			
		КонецЕсли;
		
		
		ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, НаборЗаписей);
			
	КонецЕсли;
	
КонецПроцедуры

Функция ВыбратьУзелОбменаПоМетаданным(МетаданныеПланаОбмена)
	
	ИмяПланаОбмена = МетаданныеПланаОбмена.Имя;
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ первые 2
	               |	ПланОбменаРезультат.Ссылка
	               |ИЗ
	               |	ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбменаРезультат
	               |ГДЕ
	               |	ПланОбменаРезультат.ПометкаУдаления = Ложь
	               |	И ПланОбменаРезультат.Ссылка <> &ТекущийУзелОбмена";
				   
	Запрос.УстановитьПараметр("ТекущийУзелОбмена", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультата.Количество() = 1 Тогда
		
		Возврат ТаблицаРезультата[0].Ссылка;
		
	Иначе
		
		Возврат ПланыОбмена[ИмяПланаОбмена].ПустаяСсылка();
		
	КонецЕсли;
	
КонецФункции

Процедура УзелОбменаПриИзменении(Элемент)
	
	Если УзелОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		
		// возможно тип то уже определен, тогда достаточно будет по типу определить план обмена и если в плане 2 элемента то взять не текущий и все
		МетаданныеПланаОбмена = УзелОбмена.Метаданные();
		
		УзелОбмена = ВыбратьУзелОбменаПоМетаданным(МетаданныеПланаОбмена);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗагружатьИзменения Тогда
		
		ПостроитьДеревоИзмененныхОбъектовДляУзла();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельДереваОбъектовПоказатьЗарегистрированныеИзмененияДанногоТипа(Кнопка)
	
	Если ЭлементыФормы.ДеревоОбмена.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УровеньВыбраннойСтроки = ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Уровень();
	
	Если УровеньВыбраннойСтроки <> 1 Тогда
		Предупреждение("Выберите конкретный тип данных, зарегистрированные объекты которого необходимо увидеть и повторите операцию");
		Возврат;
	КонецЕсли;
	
	ПостроитьДеревоИзмененныхОбъектовДляУзла(ЭлементыФормы.ДеревоОбмена.ТекущиеДанные.Данные);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если НЕ ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ПостроитьДеревоИзмененныхОбъектовДляУзла();
	
КонецПроцедуры

Процедура УдалитьРегистрациюДляВсехОбъектовНажатие(Элемент)
	
	РезультатРегистрации = ОчиститьРегистрациюИзмененияДляДерева();
	
	Если РезультатРегистрации Тогда
	     ПостроитьДеревоИзмененныхОбъектовДляУзла();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияДляВсехОбъектовНажатие(Элемент)
	
	РезультатРегистрации = ЗарегистрироватьИзмененияДляДерева();
	
	Если РезультатРегистрации Тогда
	     ПостроитьДеревоИзмененныхОбъектовДляУзла();
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзмененияПоОдномуОбъектуНажатие(Элемент)
	
	ФормаВопроса = ПолучитьФорму("ФормаВыбораОбновленияРегистрации", ЭтаФорма);
	ФормаВопроса.ТекстВопросаПользователю = "Операция регистрации одного изменения для каждого типа объектов необратима. Зарегистрировать изменения?";
				
	РезультатОткрытия = ФормаВопроса.ОткрытьМодально();
				
	Если РезультатОткрытия <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоДляОбъектовСАвтоматическойРегистрацией = ФормаВопроса.ОбновлятьТолькоДляЭлементовСАвтоРегистрацией;
	
	Для Каждого СтрокаДереваМетаданных Из ДеревоОбмена.Строки Цикл
		
		Если СтрокаДереваМетаданных.Данные = "Константы" Тогда
			
			Для Каждого СтрокаНазваний Из СтрокаДереваМетаданных.Строки Цикл
				
				Если ТолькоДляОбъектовСАвтоматическойРегистрацией
					И СтрокаНазваний.РежимАвтоРегистрации = Ложь Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена, Константы[СтрокаНазваний.Имя]);	
								
			КонецЦикла;
			
		ИначеЕсли СтрокаДереваМетаданных.Данные = "Справочники"
			ИЛИ СтрокаДереваМетаданных.Данные = "Документы"
			ИЛИ СтрокаДереваМетаданных.Данные = "ПланыВидовХарактеристик"
			ИЛИ СтрокаДереваМетаданных.Данные = "ПланыСчетов"
			ИЛИ СтрокаДереваМетаданных.Данные = "ПланыВидовРасчета"
			ИЛИ СтрокаДереваМетаданных.Данные = "БизнесПроцессы"
			ИЛИ СтрокаДереваМетаданных.Данные = "Задачи" Тогда
			
			Для Каждого СтрокаНазваний Из СтрокаДереваМетаданных.Строки Цикл
				
				Если ТолькоДляОбъектовСАвтоматическойРегистрацией
					И СтрокаНазваний.РежимАвтоРегистрации = Ложь Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаДереваМетаданных.Данные = "Справочники" Тогда
					ПрефиксОбъектаМетаданных = "Справочник";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "Документы" Тогда	
					ПрефиксОбъектаМетаданных = "Документ";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "ПланыВидовХарактеристик" Тогда	
					ПрефиксОбъектаМетаданных = "ПланВидовХарактеристик";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "ПланыСчетов" Тогда	
					ПрефиксОбъектаМетаданных = "ПланСчетов";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "ПланыВидовРасчета" Тогда	
					ПрефиксОбъектаМетаданных = "ПланВидовРасчета";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "БизнесПроцессы" Тогда	
					ПрефиксОбъектаМетаданных = "БизнесПроцесс";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "Задачи" Тогда	
					ПрефиксОбъектаМетаданных = "Задача";
				КонецЕсли;
				
				ВыполнитьРегистрациюПервогоОбъектаДляУзла(ПрефиксОбъектаМетаданных, СтрокаНазваний.Имя);
																
			КонецЦикла;
			
		ИначеЕсли СтрокаДереваМетаданных.Данные = "Последовательности"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыСведений"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыНакопления"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыБухгалтерии"
			ИЛИ СтрокаДереваМетаданных.Данные = "РегистрыРасчета" Тогда
			
			Для Каждого СтрокаНазваний Из СтрокаДереваМетаданных.Строки Цикл
				
				Если ТолькоДляОбъектовСАвтоматическойРегистрацией
					И СтрокаНазваний.РежимАвтоРегистрации = Ложь Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если СтрокаДереваМетаданных.Данные = "Последовательности" Тогда
					ПрефиксОбъектаМетаданных = "Последовательность";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыСведений" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрСведений";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыНакопления" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрНакопления";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыБухгалтерии" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрБухгалтерии";
				ИначеЕсли СтрокаДереваМетаданных.Данные = "РегистрыРасчета" Тогда	
					ПрефиксОбъектаМетаданных = "РегистрРасчета";
				КонецЕсли;
				
				
				ВыполнитьРегистрациюРегистра(СтрокаДереваМетаданных.Данные, ПрефиксОбъектаМетаданных, СтрокаНазваний.Имя);
																
			КонецЦикла;
		
		КонецЕсли;	
					
	КонецЦикла;
	
	ПостроитьДеревоИзмененныхОбъектовДляУзла();
		
КонецПроцедуры

Процедура КнопкаИзменитьНомераНажатие(Элемент)
	
	Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаИзмененияНомеров = ПолучитьФорму("ИзменениеНомеровСообщений", ЭтаФорма);
	ФормаИзмененияНомеров.УзелОбмена = УзелОбмена;
	ФормаИзмененияНомеров.Открыть();
	
КонецПроцедуры


ДеревоОбмена.Колонки.Добавить("Данные");

мСоответствиеСтрокДереваИМетаданных = Новый Массив();

ОтображатьКоличествоОбъектовДляКоторыхЗарегистрированыИзменения = Истина;
