////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

// Функция проверяет попадает ли значение в отбор
// Параметры:
//  ТекЗначение   - Значение любого типа, которое нужно проверить
//	ТекОтбор      - Отбор, в котором происходит проверка
// Возвращаемое значение:
//	Булево        - Истина, если попадает
//
Функция ВходитВОтбор(ТекЗначение, ТекОтбор) Экспорт
	ЗначениеОтбора = ТекОтбор.Значение;
	ВходитВОтбор = Ложь;
	
	Если ТекОтбор.Имя = "Роли" Тогда
		Если ТекОтбор.Использование или Отбор.ОтборПоРолям.Использование Тогда
			Попытка
				СтруктураРолей = Новый Структура(ЗначениеОтбора);
				Если СтруктураРолей.Свойство(ТекЗначение) Тогда
					ВходитВОтбор = Истина;
				КонецЕсли; 
			Исключение
			КонецПопытки;
		ИначеЕсли Не ТекОтбор.Использование и Не Отбор.ОтборПоРолям.Использование Тогда
			ВходитВОтбор = Истина;
		КонецЕсли; 
	ИначеЕсли Не ТекОтбор.Использование  Тогда
		ВходитВОтбор = Истина;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.Равно Тогда
		Если ЗначениеОтбора = ТекЗначение Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.НеРавно Тогда
		Если ЗначениеОтбора <> ТекЗначение Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.Содержит Тогда
		Если Найти(ТекЗначение,ЗначениеОтбора) <> 0 Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.ВСписке Тогда
		Если ЗначениеОтбора.НайтиПоЗначению(ТекЗначение) <> Неопределено Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	ИначеЕсли ТекОтбор.ВидСравнения = ВидСравнения.НеВСписке Тогда
		Если ЗначениеОтбора.НайтиПоЗначению(ТекЗначение) = Неопределено Тогда
			ВходитВОтбор = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат ВходитВОтбор;
КонецФункции // ВходитВРтбор()

// Процедура устанавливает элемент отбора при необходимости
//
Процедура УстановитьВОтборе(Список,ТекОтбор)
	ОтмеченыВсе = Истина;
	ЭтоРоль = ТекОтбор.Имя = "Роли";
	СписокПомеченных = ?(ЭтоРоль,"",Новый СписокЗначений);
	Для каждого СтрокаСписка Из Список Цикл
		Если СтрокаСписка.Пометка Тогда
			Если ЭтоРоль Тогда
				СписокПомеченных = СписокПомеченных+", "+СтрокаСписка.Значение;
			Иначе
				СписокПомеченных.Добавить(СтрокаСписка.Значение);
			КонецЕсли; 
		Иначе
			ОтмеченыВсе = Ложь;
		КонецЕсли; 
	КонецЦикла; 
	
	
	Если ЭтоРоль Тогда
		СписокПомеченных = Сред(СписокПомеченных,3);
		Отбор.ОтборПоРолям.Использование = Не ОтмеченыВсе  и Не ОтбиратьРолиПоПолномуСоответствию = Истина;
		Отбор.ОтборПоРолям.ВидСравнения = ВидСравнения.Равно;
		Отбор.ОтборПоРолям.Значение = Истина;	
		ТекОтбор.Использование = ОтбиратьРолиПоПолномуСоответствию = Истина;
		ТекОтбор.ВидСравнения = ?(ОтбиратьРолиПоПолномуСоответствию = Истина,ВидСравнения.Равно,ВидСравнения.Содержит);
	Иначе
		ТекОтбор.Использование = Не ОтмеченыВсе;
		ТекОтбор.ВидСравнения = ВидСравнения.ВСписке;
	КонецЕсли; 
	ТекОтбор.Значение = СписокПомеченных;
	
	
КонецПроцедуры // () 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ПриОткрытии" Формы
//
Процедура ПриОткрытии()
	ОтбиратьРолиПоПолномуСоответствию = Отбор.Роли.Использование;
	Роли       = Метаданные.Роли;
	Языки      = Метаданные.Языки;
	Интерфейсы = Метаданные.Интерфейсы;
	
	Для каждого Роль Из Роли Цикл
		РолиСписок.Добавить(Роль.Имя,Роль,ВходитВОтбор(Роль.Имя,Отбор.Роли));
	КонецЦикла; 
	
	Для каждого Язык Из Языки Цикл
		ЯзыкиСписок.Добавить(Язык.Имя,Язык,ВходитВОтбор(Язык.Имя,Отбор.Язык));
	КонецЦикла; 
	
	Для каждого Интерфейс Из Интерфейсы Цикл
		ИнтерфейсыСписок.Добавить(Интерфейс.Имя,Интерфейс,ВходитВОтбор(Интерфейс.Имя,Отбор.ОсновнойИнтерфейс));
	КонецЦикла; 
	
	АутентификацияОССписокВыбора          = ЭлементыФормы.АутентификацияОС.СписокВыбора;
	АутентификацияСтандартнаяСписокВыбора = ЭлементыФормы.АутентификацияСтандартная.СписокВыбора;
	
	АутентификацияОССписокВыбора.Добавить(Неопределено,"Не учитывать");
	АутентификацияОССписокВыбора.Добавить(Истина,"Включена");
	АутентификацияОССписокВыбора.Добавить(Ложь,"Выключена");
	
	АутентификацияСтандартнаяСписокВыбора.Добавить(Неопределено,"Не учитывать");
	АутентификацияСтандартнаяСписокВыбора.Добавить(Истина,"Включена");
	АутентификацияСтандартнаяСписокВыбора.Добавить(Ложь,"Выключена");
	
	
	ИстинаВходитВОтбор = ВходитВОтбор(Истина,Отбор.АутентификацияОС);
	ЛожьВходитВОтбор   = ВходитВОтбор(Ложь  ,Отбор.АутентификацияОС);
	
	АутентификацияОС = ?(ЛожьВходитВОтбор = ИстинаВходитВОтбор,Неопределено,ИстинаВходитВОтбор);
	
	ИстинаВходитВОтбор = ВходитВОтбор(Истина,Отбор.АутентификацияСтандартная);
	ЛожьВходитВОтбор   = ВходитВОтбор(Ложь  ,Отбор.АутентификацияСтандартная);
	
	АутентификацияСтандартная = ?(ЛожьВходитВОтбор = ИстинаВходитВОтбор,Неопределено,ИстинаВходитВОтбор);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обаботчик события, при нажатии на кнопку "Командная панель установить флажки" Командной панели "КоманднаяПанельРоли"
//
Процедура КоманднаяПанельУстановитьФлажки(Кнопка)
	ЭлементыФормы[Сред(Кнопка.Имя,СтрДлина("УстановитьФлажки")+1)+"Список"].Значение.ЗаполнитьПометки(Истина);
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "СнятьФлажки" Командной панели "КоманднаяПанельРоли"
//
Процедура КоманднаяПанельСнятьФлажки(Кнопка)
	ЭлементыФормы[Сред(Кнопка.Имя,СтрДлина("СнятьФлажки")+1)+"Список"].Значение.ЗаполнитьПометки(Ложь);
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "ОК" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыОК(Кнопка)
	Для каждого ТекОтбор Из Отбор Цикл
		ТекОтбор.Использование = Ложь;
	КонецЦикла; 
	УстановитьВОтборе(ЯзыкиСписок,Отбор.Язык);
	УстановитьВОтборе(ИнтерфейсыСписок,Отбор.ОсновнойИнтерфейс);
	УстановитьВОтборе(РолиСписок,Отбор.Роли);
	ТекОтбор = Отбор.АутентификацияСтандартная;
	Если Не АутентификацияСтандартная = Неопределено Тогда
		ТекОтбор.Использование = Истина;
		ТекОтбор.Значение = АутентификацияСтандартная;
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
	Иначе
		ТекОтбор.Использование = Ложь;
	КонецЕсли; 
	
	ТекОтбор = Отбор.АутентификацияОС;
	Если Не АутентификацияОС = Неопределено Тогда
		ТекОтбор.Использование = Истина;
		ТекОтбор.Значение = АутентификацияОС;
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
	Иначе
		ТекОтбор.Использование = Ложь;
	КонецЕсли; 
	Закрыть(Истина);
КонецПроцедуры

// Процедура - обаботчик события "ПередНачаломИзменения"  табличного поля "РолиСписок"
//
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	ТекущиеДанные.Пометка = Не ТекущиеДанные.Пометка;
КонецПроцедуры
