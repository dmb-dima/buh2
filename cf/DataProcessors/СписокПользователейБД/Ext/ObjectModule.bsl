////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ

Перем мСписокИсторииОтбора;

Перем мКартинки;

// заполнить список пользователей БД
Процедура ЗаполнитьСписокПользователейБД(ОтборСтрок) Экспорт
	
	ТабличнаяЧастьПользователей.Очистить();
	
	Пользователи = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого Пользователь Из Пользователи Цикл
		
		ТекущиеДанные = ТабличнаяЧастьПользователей.Добавить();
		ТекущиеДанные.Имя = Пользователь.Имя;
		ТекущиеДанные.ПолноеИмя = Пользователь.ПолноеИмя;
		
		ТекущиеДанные.ПарольУстановлен = Пользователь.ПарольУстановлен;
		ТекущиеДанные.ПоказыватьВСпискеВыбора = Пользователь.ПоказыватьВСпискеВыбора;
		ТекущиеДанные.АутентификацияСтандартная = Пользователь.АутентификацияСтандартная;
		ТекущиеДанные.АутентификацияОС = Пользователь.АутентификацияОС;
		Попытка
			ТекущиеДанные.ПользовательОС = Пользователь.ПользовательОС;
		Исключение
			ТекущиеДанные.ПользовательОС = "<Неверные данные>";
		КонецПопытки; 
		
		Если Пользователь.Язык = Неопределено Тогда
			ТекущиеДанные.Язык = "";
			ТекущиеДанные.ЯзыкПредставление = "";
		Иначе
			ТекущиеДанные.Язык = Пользователь.Язык.Имя;
			ТекущиеДанные.ЯзыкПредставление = Пользователь.Язык;
		КонецЕсли; 
		
		Если Пользователь.ОсновнойИнтерфейс = Неопределено Тогда
			ТекущиеДанные.ОсновнойИнтерфейс = "";
			ТекущиеДанные.ОсновнойИнтерфейсПредставление = "";
		Иначе
			ТекущиеДанные.ОсновнойИнтерфейс = Пользователь.ОсновнойИнтерфейс.Имя;
			ТекущиеДанные.ОсновнойИнтерфейсПредставление = Пользователь.ОсновнойИнтерфейс;
		КонецЕсли; 
		
		РезультатРоли = Новый СписокЗначений;
		Для Каждого Роль Из Пользователь.Роли Цикл
			РезультатРоли.Добавить(Роль.Имя,Роль);
		КонецЦикла; 
		РезультатРоли.СортироватьПоЗначению();
		
		РезультатИмена         = "";
		РезультатПредставление = "";
		Для Каждого Роль Из РезультатРоли Цикл
			РезультатИмена         = РезультатИмена+Роль.Значение+", ";
			РезультатПредставление = РезультатПредставление+Роль.Представление+", ";
		КонецЦикла; 
		ТекущиеДанные.Роли = Сред(РезультатИмена,1,СтрДлина(РезультатИмена)-2);
		ТекущиеДанные.РолиПредставление = Сред(РезультатПредставление,1,СтрДлина(РезультатПредставление)-2);
		
		ТекущиеДанные.УникальныйИдентификатор = Пользователь.УникальныйИдентификатор;	
		УстановитьОтборПоРолям(ТекущиеДанные, ОтборСтрок);
										
	КонецЦикла; 
	
	ТабличнаяЧастьПользователей.Сортировать("Имя");
		
КонецПроцедуры

// Процедура Устанавливает отбор дополнительный скрытый реквизит "ОтборПоРолям"
// в случае, если "ТекущиеДанные" содержат любую из доступных ролей текущего отбора
//
Процедура УстановитьОтборПоРолям(ТекущиеДанные, ОтборСтрок) Экспорт
	
	Если ОтборСтрок.ОтборПоРолям.Использование <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ВходитВОтборПоРолям = Ложь;
	Попытка
		
		СтруктураОтбораРолей = Новый Структура(ОтборСтрок.Роли.Значение);
		СтруктураРолей = Новый Структура(ТекущиеДанные.Роли);
		Для Каждого КлючИЗначение Из СтруктураОтбораРолей Цикл
			
			Если СтруктураРолей.Свойство(КлючИЗначение.Ключ) Тогда
				ВходитВОтборПоРолям = Истина;
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
		
	Исключение
	КонецПопытки; 
	
	ТекущиеДанные.ОтборПоРолям = ВходитВОтборПоРолям;
	
КонецПроцедуры // ()

// процедура обновляет отбор по ролям для всех строк
Процедура ОбновитьОтборПоРолямДляТабличнойЧасти(ОтборСтрок) Экспорт
	
	Для Каждого СтрокаПользователя Из ТабличнаяЧастьПользователей Цикл
			
		УстановитьОтборПоРолям(СтрокаПользователя, ОтборСтрок);
			
	КонецЦикла; 
	
КонецПроцедуры

// Процедура проверяет наличие и при необходимости добавляет новый элемент в список истории отборов.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура ДобавитьВИсториюОтбора(ОтборСтрок, КнопкаПодменю) Экспорт
	
	ВсеОтборы = ОтборСтрок;
	СтрокаТекущихОтборов = "";
	СтруктураАктуальныхОтборов = Новый Структура;
	
	Для Каждого ЭлементОтбора Из ВсеОтборы Цикл
		Если ЭлементОтбора.Имя <> "ОтборПоРолям" Тогда
			Если ЭлементОтбора.Использование Тогда
				ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ЭлементОтбора);
			КонецЕсли; 
		Иначе
			Если ЭлементОтбора.Использование Тогда
				ДописатьСтрокуОтбора(СтрокаТекущихОтборов, ВсеОтборы.Роли);
			КонецЕсли; 
		КонецЕсли; 
		СтруктураАктуальныхОтборов.Вставить(ЭлементОтбора.Имя,Новый Структура("Использование,ВидСравнения,Значение",ЭлементОтбора.Использование,ЭлементОтбора.ВидСравнения,ЭлементОтбора.Значение));
	КонецЦикла;
	
	Если ПустаяСтрока(СтрокаТекущихОтборов) Тогда
		Возврат;
	КонецЕсли; 
	НайденныйЭлементСпискаЗначений = Неопределено;
	Для Каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		Если ЭлементСписка.Представление = СтрокаТекущихОтборов Тогда
			НайденныйЭлементСпискаЗначений = ЭлементСписка;
		КонецЕсли; 
	КонецЦикла;
	
	Если НайденныйЭлементСпискаЗначений = Неопределено Тогда
	
		Если мСписокИсторииОтбора.Количество() > 0 Тогда
			мСписокИсторииОтбора.Вставить(0, СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		Иначе
			мСписокИсторииОтбора.Добавить(СтруктураАктуальныхОтборов, СтрокаТекущихОтборов);
		КонецЕсли;
		
		Если мСписокИсторииОтбора.Количество() > 20 Тогда
			ИндУдаляемогоЭлемента = 20;
			Пока Истина Цикл
				
				Если (ИндУдаляемогоЭлемента + 1) > мСписокИсторииОтбора.Количество() Тогда
					Прервать;
				КонецЕсли;
				мСписокИсторииОтбора.Удалить(20);
				
			КонецЦикла; 
		КонецЕсли; 
		
	Иначе
		
		мСписокИсторииОтбора.Сдвинуть(НайденныйЭлементСпискаЗначений, (-мСписокИсторииОтбора.Индекс(НайденныйЭлементСпискаЗначений)));
		
	КонецЕсли; 
	
	СформироватьПодменюПоСпискуАктуальныхОтборов(КнопкаПодменю);

КонецПроцедуры

// Процедура формирует строковое представление отбора, для записи в историю отборов.
// 
// Параметры
//  СтрокаОтбора - Строка, строковое представление отбора
//  ЭлементОтбора - Массив, массив парметров и значений отбора
//
// Возвращаемые значения
//  НЕТ
Процедура ДописатьСтрокуОтбора(СтрокаОтбора, ЭлементОтбора)

	Если НЕ ПустаяСтрока(СтрокаОтбора) Тогда
		СтрокаОтбора = СтрокаОтбора + ", ";
	КонецЕсли; 
	Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " = "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " <> "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		СтрокаСписка = "";
		Для Каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " в списке: "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		СтрокаСписка = "";
		Для Каждого ЭлементСписка Из ЭлементОтбора.Значение Цикл
			Если НЕ ПустаяСтрока(СтрокаСписка) Тогда
				СтрокаСписка = СтрокаСписка + "; ";
			КонецЕсли; 
			СтрокаСписка = СтрокаСписка + СокрЛП(Строка(ЭлементСписка.Значение));
		КонецЦикла; 
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " не в списке: "+ СтрокаСписка;
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит Тогда
		СтрокаОтбора = СтрокаОтбора + ЭлементОтбора.Представление + " содержит: "+ СокрЛП(Строка(ЭлементОтбора.Значение));
	КонецЕсли; 
	
КонецПроцедуры

// Процедура формирует кнопки подменю для кнопки ИсторияОтборов командной панели КоманднаяПанельСписка.
// 
// Параметры
//  НЕТ
//
// Возвращаемые значения
//  НЕТ
Процедура СформироватьПодменюПоСпискуАктуальныхОтборов(КнопкаПодменю)

	#Если Клиент Тогда
	КнопкаПодменю.Кнопки.Очистить();
		
	Для Каждого ЭлементСписка Из мСписокИсторииОтбора Цикл
		
		КнопкаПодменю.Кнопки.Добавить(Строка(мСписокИсторииОтбора.Индекс(ЭлементСписка)), 
		ТипКнопкиКоманднойПанели.Действие, ЭлементСписка.Представление, Новый Действие("ОбработкаИсторииОтбора"));
		
	КонецЦикла;
	#КонецЕсли	

КонецПроцедуры


#Если Клиент Тогда
	
//процедура инициализации начальных параметров
Процедура ИнициализироватьРаботуСПользователямиБД() Экспорт
	
	мСписокИсторииОтбора = ВосстановитьЗначение("СправочникСписок.Пользователи.ПользователиБД.Отбор");
	Если ТипЗНЧ(мСписокИсторииОтбора) <> Тип("СписокЗначений") Тогда
		мСписокИсторииОтбора   = Новый СписокЗначений;
	КонецЕсли;
	
КонецПроцедуры


//процедура инициализации начальных параметров
Процедура СохранитьПараметрыРаботыСПользователямиБД() Экспорт
	
	СохранитьЗначение("СправочникСписок.Пользователи.ПользователиБД.Отбор", мСписокИсторииОтбора);
	
КонецПроцедуры

// Процедура контролирует флаги пометки и доступности у кнопок отбора
//
Процедура ОбновитьКнопки(ОтборСтрок, КнопкаОтменыОтбора) Экспорт
	
	Для Каждого ЭлементОтбораСтрок Из ОтборСтрок Цикл
		
		Если ЭлементОтбораСтрок.Использование = Истина Тогда
			
			КнопкаОтменыОтбора.Доступность = Истина;
			Возврат;
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	КнопкаОтменыОтбора.Доступность = Ложь;
	
КонецПроцедуры // ()

// Процедура контролирует флаги пометки и доступности у кнопок отбора
//
Процедура ОтменитьОтборДанныхПоПользователямБД(ОтборСтрок, КнопкаОтменыОтбора) Экспорт

	ОтборСтрок.Сбросить();
	ОбновитьКнопки(ОтборСтрок, КнопкаОтменыОтбора);
	
КонецПроцедуры	

// Процедура выполняется по нажатию на одну из кнопок подменю
// кнопки ИсторияОтборов командной панели КоманднаяПанельСписка.
// 
// Параметры
//  Кнопка - Кнопка командной панели, по нажатию на которую вызывается данная процедура
//
// Возвращаемые значения
//  НЕТ
Процедура ОбработкаИсторииОтбора(Кнопка, ОтборСтрок, КнопкаОтменыОтбора) Экспорт
	
    ВсеОтборы = ОтборСтрок;
	
	ИндексСпискаЗначений = Число(Кнопка.Имя);
	
	Если (ИндексСпискаЗначений + 1) > мСписокИсторииОтбора.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеЭлементаСпискаЗначений = мСписокИсторииОтбора[ИндексСпискаЗначений].Значение;
	Для Каждого ЭлементСтруктуры Из ЗначениеЭлементаСпискаЗначений Цикл
		
		Попытка
			ВсеОтборы[ЭлементСтруктуры.Ключ].Использование = ЭлементСтруктуры.Значение.Использование;
			ВсеОтборы[ЭлементСтруктуры.Ключ].Значение = ЭлементСтруктуры.Значение.Значение;
			ВсеОтборы[ЭлементСтруктуры.Ключ].ВидСравнения = ЭлементСтруктуры.Значение.ВидСравнения;
		Исключение
			
		КонецПопытки;
							
	КонецЦикла;
	
	ОбновитьОтборПоРолямДляТабличнойЧасти(ОтборСтрок);
	
	ОбновитьКнопки(ОтборСтрок, КнопкаОтменыОтбора);
		
КонецПроцедуры

Процедура ПриВыводеСтрокиПользователяБД(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт
	
	КолонкаКартинки = ОформлениеСтроки.Ячейки.Имя;
	КолонкаКартинки.Картинка = ?(ДанныеСтроки.ПарольУстановлен, мКартинки[1], мКартинки[0]);
	КолонкаКартинки.ОтображатьКартинку = Истина;
	
КонецПроцедуры

//функция возвращает соответсвие имен и пользователей БД
Функция ПолучитьСоответсвиеИменИПользователейБД() Экспорт
	
	Соответствие = Новый Соответствие;
	
	// только если есть права, то заполняем соответсвие
	НаличиеПраваНаРедактированиеПользователейБД = ПравоДоступа("Администрирование", Метаданные);
	
	Если НаличиеПраваНаРедактированиеПользователейБД Тогда
		
		Для Каждого ПользовательБД Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			
			Соответствие.Вставить(СокрЛП(ПользовательБД.Имя), ПользовательБД);	
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Соответствие;
	
КонецФункции

//
Процедура ПриВыводеСтрокиПользователя(Элемент, ОформлениеСтроки, ДанныеСтроки, Знач СоответствиеИменПользователейБД = Неопределено) Экспорт
	
	ИмяПользователяБД = СокрЛП(ДанныеСтроки.Код);
	
	Если ИмяПользователяБД = "НеАвторизован" Тогда
		Возврат;
	КонецЕсли;
	
	Если СоответствиеИменПользователейБД = Неопределено Тогда 
		
		//ищем пользователя БД
		ТекПользовательБД = УправлениеПользователями.НайтиПользователяБД(ИмяПользователяБД);
		
	Иначе
		
		ТекПользовательБД = СоответствиеИменПользователейБД.Получить(ИмяПользователяБД);
		
	КонецЕсли;
	
	Если ТекПользовательБД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкаКартинки = ОформлениеСтроки.Ячейки.КартинкаПользователяБД;
	КолонкаКартинки.Картинка = ?(ТекПользовательБД.ПарольУстановлен, мКартинки[1], мКартинки[0]);
	КолонкаКартинки.ОтображатьКартинку = Истина;
	
КонецПроцедуры

// установка отбора данных
Процедура УстановитьОтбораДанныхПользовательБД(ОтборСтрок, ЭтаФорма, КнопкаИсторияОтборов, КнопкаОтменыОтбора) Экспорт
	
	ФормаОтбора = ПолучитьФорму("ФормаОтбора", ЭтаФорма);
	ФормаОтбора.Отбор  = ОтборСтрок;

	Результат = ФормаОтбора.ОткрытьМодально();
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьОтборПоРолямДляТабличнойЧасти(ОтборСтрок);
	
	ДобавитьВИсториюОтбора(ОтборСтрок, КнопкаИсторияОтборов);
	ОбновитьКнопки(ОтборСтрок, КнопкаОтменыОтбора);
	
КонецПроцедуры


#КонецЕсли

#Если Клиент Тогда
	
мКартинки = Новый Массив;
мКартинки.Добавить(БиблиотекаКартинок.Пользователь);
мКартинки.Добавить(БиблиотекаКартинок.ПользовательСАутентификацией);

#КонецЕсли
