
Перем мДатаНач;
Перем мДатаКон;

Перем ЦветСубботы;
Перем ЦветВоскресенья;
Перем ЦветПраздничногоДня;

Перем мОрганизацияИзЦУО;
Перем КодИФНС;

Перем мМакет;
Перем мНакопительнаяТаблицаПредставленияОтчетов;
Перем мНакопительнаяТаблицаСроковУплат;

Перем мТаблицаПраздничныхДней;
Перем мПроизводственныйКалендарьЗаполнен;

Перем мТаблПолеНеделя;

Перем мКалендарнаяНеделя;
Перем мОбластьКалендарьСтрока;

Перем мВыбраннаяФормаКалендаря Экспорт;
Перем мПериодичностьКалендарь Экспорт;
Перем мДатаКонцаПериодаОтчетаКалендарь Экспорт;
Перем Организация Экспорт;
Перем ОтборКодИФНС Экспорт;
Перем ОтборПериод Экспорт;

Перем мСоответствиеКолонокНеделя;

Перем мВыделенныеДатыВКалендареДень;
Перем мВыделенныеДатыВКалендареНеделя;

// Переменные картинки
Перем мКартинкаПлатеж;
Перем мКартинкаСдачаОтчета;
Перем мКартинкаНапоминание;
Перем мКартинкаСнятьОповещение;
Перем мКартинкаОповестить;
Перем мКартинкаПерейтиКДате;
Перем мКартинкаПустая;

// Переменные флаги, означают, переходили ли на ту или иную панель. Для считывания ширины колонок.
Перем мОтображаласьИнформацияПоДням;
Перем мОтображаласьИнформацияпоНеделям;

// Эталонная таблица графика сдачи отчетности.
Перем мТаблицаГрафикСдачи;

// Переменные для хранения регламентированного календаря, в целях оптимизации, без обращения через запрос к календарю.
Перем мТаблРегламентированногоКалендаряНеТолькоРабочие;
Перем мТаблРегламентированногоКалендаряТолькоРабочие;

Перем мТаблицаСроковОтчетность;

Перем мСтрока100;

Процедура СоздатьТаблицуСроковДействияОтчетности()
	МакетаТабл = мМакет;
	ОбластьМакета = МакетаТабл.Область("СрокиОтчетности");
	мТаблицаСроковОтчетность = Новый ТаблицаЗначений;
	мТаблицаСроковОтчетность.Колонки.Добавить("ИсточникОтчета");
	мТаблицаСроковОтчетность.Колонки.Добавить("Форма");
	мТаблицаСроковОтчетность.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	мТаблицаСроковОтчетность.Колонки.Добавить("ДатаКонецДействия",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	мТаблицаСроковОтчетность.Колонки.Добавить("НазваниеОтчетнойФормы");
	Для Ном = ОбластьМакета.Верх По ОбластьМакета.Низ Цикл
		НовСтр = мТаблицаСроковОтчетность.Добавить();
		НовСтр.ИсточникОтчета = МакетаТабл.Область(Ном, 1).Текст;
		НовСтр.Форма = МакетаТабл.Область(Ном, 2).Текст;
		ДатаС = МакетаТабл.Область(Ном, 3).Текст;
		НовСтр.ДатаНачалоДействия = Дата(Прав(ДатаС, 4) + Сред(ДатаС, 4, 2) + Лев(ДатаС, 2));
		ДатаПо = МакетаТабл.Область(Ном, 4).Текст;
		НовСтр.ДатаКонецДействия = ?(ПустаяСтрока(ДатаПо), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")), Дата(Прав(ДатаПо, 4) + Сред(ДатаПо, 4, 2) + Лев(ДатаПо, 2)));
		НовСтр.НазваниеОтчетнойФормы = МакетаТабл.Область(Ном, 5).Текст;
	КонецЦикла;

КонецПроцедуры

// ОтобразитьЗаписиКДате
//
Процедура ОтобразитьЗаписиКДате()
	ДатыФильтр = мВыделенныеДатыВКалендареДень;
	ДатыФильтрС = ДатыФильтр;
	Если ДатыФильтрС.Количество() = 1 Тогда
		ИтогДт = ДатыФильтрС[0].Дата;
	Иначе
		ИтогДт = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата"));
	КонецЕсли;

	РазместитьСведения(ДатыФильтрС);
	СформироватьЗаголовокФормы(ИтогДт);
	ЭлементыФормы.КалендарьСобытий.Обновить();
КонецПроцедуры // ОтобразитьЗаписиКДате

// РазместитьСведения
//
Процедура РазместитьСведения(НаДаты)

	ТаблОбъедОбщ = ПолучитьТаблицуОбъединений();

	Для каждого НаДатуКалендаря Из НаДаты Цикл
		Если ТипЗнч(НаДаты) = Тип("Структура") Тогда
			НаДату = НаДатуКалендаря.Значение;
		Иначе
			НаДату = НаДатуКалендаря.Дата;
		КонецЕсли;
		ТаблОтчетности = ПолучитьТаблицуПредставленияОтчетности(НаДату);
		ТаблУплат = ПолучитьТаблицуСроковУплат(НаДату);

		ТаблОбъед = ПолучитьТаблицуОбъединений();
		Для каждого Стр Из ТаблОтчетности Цикл
			НовСтр = ТаблОбъед.Добавить();
			НовСтр.ДатаЗап = НаДату;
			НовСтр.Срок = ?(Стр.Статус, Стр.ДатаПредставленияОтчета, Стр.ПоследняяДатаПредставленияОтчета);
			НовСтр.Статус = ?(Стр.Статус, "3", "1"); // Если статус напоминания, тогда 3, иначе 1.
			НовСтр.Периодичность = Стр.Периодичность;
			НовСтр.НазваниеОтчетаИлиНалога = Стр.НазваниеОтчетнойФормы; // Название отчета.
			НовСтр.ЗаПериодС = Стр.ЗаПериодС;
			НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
			НовСтр.Кто = Стр.КтоСдаетОтчет;
			НовСтр.НарастающийИтог = Стр.ФормаЗаполняетсяНарастающимИтогом;

			НовСтр.ФормаОтчета = Стр.ФормаОтчета;
			НовСтр.ДатаПредставленияОтчета = Стр.ДатаПредставленияОтчета;
			НовСтр.ИсточникОтчета = Стр.Объект;
		КонецЦикла;

		Для каждого Стр Из ТаблУплат Цикл
			НовСтр = ТаблОбъед.Добавить();
			НовСтр.ДатаЗап = НаДату;
			НовСтр.Срок = Стр.СрокУплаты;
			НовСтр.Статус = "2"; // Уплата налога
			НовСтр.Периодичность = Стр.Периодичность;
			НовСтр.НазваниеОтчетаИлиНалога = Стр.НалогПолноеНазв;
			НовСтр.ЗаПериодС = Стр.ЗаПериодС;
			НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
			НовСтр.Кто = Стр.Кто;
			НовСтр.НарастающийИтог = Стр.НарастающийИтог;
		КонецЦикла;
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблОбъед, ТаблОбъедОбщ);
	КонецЦикла;

	// Выводим.
	ТаблОбъедОбщ.Сортировать("Срок, Статус, ДатаПредставленияОтчета, НазваниеОтчетаИлиНалога, Периодичность");
	ТаблицаСобытийКалендаря = ТаблОбъедОбщ;

КонецПроцедуры // РазместитьСведения

Функция ПолучитьТаблицуОбъединений()
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТипДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	Строка254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ТаблОбъед = Новый ТаблицаЗначений;
	// Колонки применяемые и при сдачи отчетов и при уплате налогов.
	// Значения колонки статус:
	//    1 - сдача отчета
	//    2 - уплата налога
	//    3 - напоминание о сдаче отчета

	ТаблОбъед.Колонки.Добавить("ДатаЗап", ТипДата);
	ТаблОбъед.Колонки.Добавить("Срок", ТипДата);
	ТаблОбъед.Колонки.Добавить("Статус", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1));
	ТаблОбъед.Колонки.Добавить("Периодичность", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблОбъед.Колонки.Добавить("НазваниеОтчетаИлиНалога", Строка254);
	ТаблОбъед.Колонки.Добавить("ЗаПериодС", ТипДата);
	ТаблОбъед.Колонки.Добавить("ЗаПериодПо", ТипДата);
	ТаблОбъед.Колонки.Добавить("Кто", Строка254);
	ТаблОбъед.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);

	// Колонки применяемые только при сдаче отчетов.
	ТаблОбъед.Колонки.Добавить("ФормаОтчета", мСтрока100);
	ТаблОбъед.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата);
	ТаблОбъед.Колонки.Добавить("ИсточникОтчета", мСтрока100);
	Возврат ТаблОбъед;

КонецФункции

// ПолучитьТаблицуПредставленияОтчетности
//
Функция ПолучитьТаблицуПредставленияОтчетности(НаДату)
	// Получим структуру таблицы
	Табл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мНакопительнаяТаблицаПредставленияОтчетов);

	Если НЕ ЭтаФорма.ВладелецФормы.мНеОтображатьНапоминания Тогда
		СоздатьНапоминания(НаДату);
	КонецЕсли;

	Строки = мНакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("ПоследняяДатаПредставленияОтчета", НаДату));
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Строки, Табл);
	Возврат Табл;

КонецФункции // ПолучитьТаблицуПредставленияОтчетности

// ПолучитьТаблицуПредставленияОтчетностиИУплатНеделя
// Функция выгружает в таблицу значений записи из общей таблицы сроков уплат только те, которые соответствуют
// периоду (неделя)
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Таблица значений.
//
Функция ПолучитьТаблицуПредставленияОтчетностиИУплатНеделя()
	// Отберем все, кроме напоминаний.
	Строки = мНакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("Статус", Ложь));

	ДатаНач = мВыделенныеДатыВКалендареНеделя[0].Дата;
	ДатаКон = мВыделенныеДатыВКалендареНеделя[6].Дата;

	ТаблОбъед = ПолучитьТаблицуОбъединений();

	Для каждого Стр Из Строки Цикл
		Если (Стр.ПоследняяДатаПредставленияОтчета >= ДатаНач) И (Стр.ПоследняяДатаПредставленияОтчета <= ДатаКон) Тогда
			НовСтр = ТаблОбъед.Добавить();
			НовСтр.ДатаЗап = Стр.ПоследняяДатаПредставленияОтчета;
			НовСтр.Срок = Стр.ПоследняяДатаПредставленияОтчета;
			НовСтр.Статус = ?(Стр.Статус, "3", "1"); // Если статус напоминания, тогда 3, иначе 1.
			НовСтр.Периодичность = Стр.Периодичность;
			НовСтр.НазваниеОтчетаИлиНалога = Стр.НазваниеОтчетнойФормы; // Название отчета.
			НовСтр.ЗаПериодС = Стр.ЗаПериодС;
			НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
			НовСтр.Кто = Стр.КтоСдаетОтчет;
			НовСтр.НарастающийИтог = Стр.ФормаЗаполняетсяНарастающимИтогом;

			НовСтр.ФормаОтчета = Стр.ФормаОтчета;
			НовСтр.ДатаПредставленияОтчета = Стр.ДатаПредставленияОтчета;
			НовСтр.ИсточникОтчета = Стр.Объект;
		КонецЕсли;
	КонецЦикла;

	ТаблУплат = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мНакопительнаяТаблицаСроковУплат);

	// Сформируем таблицу уплат налогов за выбранные нады (неделя).
	Для каждого Дат Из мВыделенныеДатыВКалендареНеделя Цикл
		Строки = мНакопительнаяТаблицаСроковУплат.НайтиСтроки(Новый Структура("СрокУплаты", Дат.Дата));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Строки, ТаблУплат);
	КонецЦикла;

	// Объеденим данные с таблицей представления отчетности.
	Для каждого Стр Из ТаблУплат Цикл
		НовСтр = ТаблОбъед.Добавить();
		НовСтр.ДатаЗап = Стр.СрокУплаты;
		НовСтр.Срок = Стр.СрокУплаты;
		НовСтр.Статус = "2"; // Уплата налога
		НовСтр.Периодичность = Стр.Периодичность;
		НовСтр.НазваниеОтчетаИлиНалога = Стр.НалогПолноеНазв;
		НовСтр.ЗаПериодС = Стр.ЗаПериодС;
		НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
		НовСтр.Кто = Стр.Кто;
		НовСтр.НарастающийИтог = Стр.НарастающийИтог;
	КонецЦикла;

	Возврат ТаблОбъед;

КонецФункции // ПолучитьТаблицуПредставленияОтчетностиИУплатНеделя

// ПолучитьТаблицуСроковУплат
//
Функция ПолучитьТаблицуСроковУплат(НаДату)
	// Получим структуру таблицы
	Табл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мНакопительнаяТаблицаСроковУплат);

	Строки = мНакопительнаяТаблицаСроковУплат.НайтиСтроки(Новый Структура("СрокУплаты", НаДату));
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Строки, Табл);

	Табл.Сортировать("СрокУплаты");
	Возврат Табл;

КонецФункции

// Показать
//
Процедура Показать(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, ВЦУОВыбранПроизвольныйПериод) Экспорт

	Если НЕ ВЦУОВыбранПроизвольныйПериод Тогда
		ПравыйМес = Месяц(ДатаКонцаПериодаОтчета);
		Если (ПравыйМес = 3) Или (ПравыйМес = 6) Или (ПравыйМес = 9) Тогда
			мДатаНач = НачалоКвартала(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 1));
			мДатаКон = КонецКвартала(мДатаНач);
		ИначеЕсли ПравыйМес = 12 Тогда
			мДатаНач = НачалоГода(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 1));
			мДатаКон = КонецКвартала(мДатаНач);
		Иначе
			мДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаКонцаПериодаОтчета, 1));
			мДатаКон = КонецМесяца(мДатаНач);
		КонецЕсли;
	Иначе
		// Если произвольный период.
		Если Год(ДатаНачалаПериодаОтчета) <> Год(ДатаКонцаПериодаОтчета) Тогда
			мДатаНач = НачалоГода(ДатаКонцаПериодаОтчета);
			мДатаКон = ДатаКонцаПериодаОтчета;
		Иначе
			мДатаНач = ДатаНачалаПериодаОтчета;
			мДатаКон = ДатаКонцаПериодаОтчета;
		КонецЕсли;
	КонецЕсли;

	Орг = ЭтаФорма.ВладелецФормы.Организация;
	Попытка
		Если Орг.Количество() = 1 Тогда
			ОргРез = Орг.Получить(0).Значение;
		Иначе
			ОргРез = Неопределено;
		КонецЕсли;
	Исключение
		ОргРез = ?(НЕ ЗначениеЗаполнено(Орг), Неопределено, Орг);
	КонецПопытки;

	мОрганизацияИзЦУО = Орг;
	Если (ТипЗнч(мОрганизацияИзЦУО) = Тип("СписокЗначений")) И (мОрганизацияИзЦУО.Количество() > 0) Тогда
		ДляОрганизации = мОрганизацияИзЦУО.Получить(0).Значение
	Иначе
		ОргПоУмолчанию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
			ДляОрганизации = ОргПоУмолчанию;
		КонецЕсли;
	КонецЕсли;

	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	ЭлементыФормы.ДляОрганизации.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

	Если НЕ ЗначениеЗаполнено(ДляОрганизации) Тогда
		Сообщить("Необходимо выбрать организацию, для составления календаря.", СтатусСообщения.Информация);
	КонецЕсли;

	КодИФНС = ЭтаФорма.ВладелецФормы.КодИФНС;

	Открыть();
КонецПроцедуры // Показать

// УстановитьШиринуКолонок
//
Процедура УстановитьШиринуКолонок(ТаблПоле)

	Если ТаблПоле.Имя = "ПолеТабличногоДокументаНеделя" Тогда
		СоответствиеЛиста = мСоответствиеКолонокНеделя;
	КонецЕсли;

	Для каждого Колонка Из СоответствиеЛиста Цикл
		Координата = "C" + СтрЗаменить(Колонка.Ключ, "_", "");

		Если ТаблПоле.Область(Координата).ШиринаКолонки <> 0 Тогда
			ТаблПоле.Область(Координата).ШиринаКолонки = СоответствиеЛиста[Колонка.Ключ];
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // УстановитьШиринуКолонок

// УстановитьЦветаОбластей
Процедура УстановитьЦветаОбластей(ВыводимаяОбласть, ВыделитьСтроку, НазваниеОбласти)
	Если ВыделитьСтроку Тогда
		ВыводимаяОбласть.Области[НазваниеОбласти].ЦветФона = Новый Цвет(244, 249, 255);
		// Цвет(240, 240, 240);
	Иначе
		ВыводимаяОбласть.Области[НазваниеОбласти].ЦветФона = Новый Цвет(255, 255, 255);
	КонецЕсли;
	ВыделитьСтроку = НЕ ВыделитьСтроку;
КонецПроцедуры // УстановитьЦветаОбластей

// Функция возвращает наименование дня недели по его номеру
//
// Параметры
//  НомерДняНедели - Число, номер дня недели
//
// Возвращаемое значение:
//   Строка, наименование дня недели
//
Функция ОпределитьДеньНедели(НомерДняНедели)
	
	Если НомерДняНедели = 1 Тогда
		Возврат "Понедельник";
	ИначеЕсли НомерДняНедели = 2 Тогда
		Возврат "Вторник";
	ИначеЕсли НомерДняНедели = 3 Тогда
		Возврат "Среда";
	ИначеЕсли НомерДняНедели = 4 Тогда
		Возврат "Четверг";
	ИначеЕсли НомерДняНедели = 5 Тогда
		Возврат "Пятница";
	ИначеЕсли НомерДняНедели = 6 Тогда
		Возврат "Суббота";
	Иначе
		Возврат "Воскресенье";
	КонецЕсли;
	
КонецФункции

// УстановитьИнтервалКалендаря
//
Процедура УстановитьИнтервалКалендаря()
	ЭлементыФормы.КалендарьСобытий.НачалоПериодаОтображения = мДатаНач;
	ЭлементыФормы.КалендарьСобытий.КонецПериодаОтображения  = мДатаКон;
КонецПроцедуры // УстановитьИнтервалКалендаря

// СформироватьТаблицуКалендара
//
Функция СформироватьТаблицуКалендара(ТребуемыйГод)

	мНакопительнаяТаблицаПредставленияОтчетов = мТаблицаГрафикСдачи.Скопировать();
	мНакопительнаяТаблицаСроковУплат = СоздатьТаблицуПоУплатамНалогов();

	// Получим основную таблицу событий календаря
	ТаблицаСобытий = ПолучитьТаблицуИзНастроек("События", "НазваниеСобытия, Наименование, Объект, Комментарий");

	Состояние("Формирование календаря событий ...");

	ТекКонфигурация = РегламентированнаяОтчетность.ИДКонфигурации();
	СпрРегОтчетыПустаяСсылка = Справочники.РегламентированныеОтчеты.ПустаяСсылка();

	// Собираем настройку для каждого события.
	Для каждого Событие Из ТаблицаСобытий Цикл
		ОбъектСобытие = Событие.Объект;
		// Если Найти(ОбъектСобытие, "РегламентированныйОтчет") > 0 Тогда

		Если ОбъектСобытие <> "Отчета нет" Тогда
			// Проверим, если отчет в справочнике рег. отчетов скрыт, тогда такой отчет не обрабатываем, считается, что организация
			// его представлять не должна.
			НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ОбъектСобытие);
			Если НайденныйЭлемент = СпрРегОтчетыПустаяСсылка
			 Или НайденныйЭлемент.НеПоказыватьВСписке Тогда
				Продолжить;
			КонецЕсли;

			НастройкаКСобытию = ПолучитьТаблицуИзНастроек(ОбъектСобытие, "Форма, Годы, Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст, НарастающийИтог", 254);

			// Для всех форм построим план сдачи отчета с датами, с учетом действий форм.
			ТаблСдача = ПостроитьГрафикСдачи(ОбъектСобытие, НастройкаКСобытию, ТребуемыйГод);
			// Сгрузим в общую таблицу.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблСдача, мНакопительнаяТаблицаПредставленияОтчетов);
		КонецЕсли;

		// Уплата налогов.

		Если Событие.Комментарий = "Уплаты нет" ИЛИ ТекКонфигурация = "ЗУП" ИЛИ ТекКонфигурация = "ЗБУ" Тогда
			// Для региональных налогов, уплата устанавливается на региональном уровне, в каждом субъекте свои сроки уплаты платежей.
			// В этом случае, обрабатывать сроки уплат не будем.
			Продолжить;
		КонецЕсли;

		// Считываем секцию НазваниеСобытия, "Прибыль".
		НастройкаКСобытию = ПолучитьТаблицуИзНастроек(Событие.НазваниеСобытия, "НазваниеНалога, Годы, Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст, НарастающийИтог", 254);
		// Сроки уплат по налогам.
		ТаблУплата = ПостроитьГрафикУплат(НастройкаКСобытию, ТребуемыйГод);
		// Сгрузим в общую таблицу.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблУплата, мНакопительнаяТаблицаСроковУплат);

	КонецЦикла;

	// Добавим Индексы
	мНакопительнаяТаблицаПредставленияОтчетов.Индексы.Добавить("Статус, ПоследняяДатаПредставленияОтчета");
	мНакопительнаяТаблицаПредставленияОтчетов.Индексы.Добавить("ЗаПериодС, ЗаПериодПо");

	мНакопительнаяТаблицаСроковУплат.Индексы.Добавить("СрокУплаты");
	мНакопительнаяТаблицаСроковУплат.Индексы.Добавить("ЗаПериодС, ЗаПериодПо");

КонецФункции // СформироватьТаблицуКалендара

// СформироватьТаблицуПраздничныхИВыходныхДней
//
Процедура СформироватьТаблицуПраздничныхИВыходныхДней(ТребуемыйГод)

	мТаблицаПраздничныхДней = СформироватьТаблицуПраздниковРеглКалендаря(ТребуемыйГод);
	Если мТаблицаПраздничныхДней.Количество() = 0 Тогда
		мПроизводственныйКалендарьЗаполнен = Ложь;
	Иначе
		мПроизводственныйКалендарьЗаполнен = Истина;
	КонецЕсли;

КонецПроцедуры // СформироватьТаблицуПраздничныхИВыходныхДней

// СформироватьТаблицуРегламентированногоКалендаря
//
Функция СформироватьТаблицуПраздниковРеглКалендаря(ТребуемыйГод)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Год", ТребуемыйГод);
	Запрос.Текст = 
		"ВЫБРАТЬ ДатаКалендаря, ВидДня
		|ИЗ РегистрСведений.РегламентированныйПроизводственныйКалендарь
		|Где Год = &Год
		|И (ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Суббота) Или ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Воскресенье))";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции // СформироватьТаблицуПраздниковРеглКалендаря

// ПолучитьТаблицуИзНастроек
// Получает данные из макета Календарь в таблицу. Все колонки - тип строка100.
//
// Параметры:
//  НазваниеОбласти - название области в макете.
//  КолонкиСтр      - строка через запятую, название колонок в результурующей таблице.
//
// Возвращаемое значение:
//  Таблица значений из макета Календаря с заданной областью.
//
Функция ПолучитьТаблицуИзНастроек(НазваниеОбласти, КолонкиСтр, РазмерСтрок = 100)

	ОбластьМакет = мМакет.Области.Найти(НазваниеОбласти);
	ТаблРезультат = Новый ТаблицаЗначений;
	Колонки = Новый Структура(КолонкиСтр);
	Если РазмерСтрок = 100 Тогда
		Строка100 = мСтрока100;
	Иначе
		Строка100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(РазмерСтрок);
	КонецЕсли;

	Для Каждого Зап Из Колонки Цикл
		ТаблРезультат.Колонки.Добавить(Зап.Ключ, Строка100);
	КонецЦикла;

	Для Ном = ОбластьМакет.Верх По ОбластьМакет.Низ Цикл

		НовСтр = ТаблРезультат.Добавить();
		НомерКолонкиВМакете = 0;
		Для Каждого Зап Из ТаблРезультат.Колонки Цикл
			НомерКолонкиВМакете = НомерКолонкиВМакете + 1;
			Сведение = мМакет.Область(Ном, НомерКолонкиВМакете).Текст;
			Если (НомерКолонкиВМакете = 1) И (ПустаяСтрока(Сведение)) Тогда
				// Не считываем пустую строку в области, если на есть по первой колонке.
				ТаблРезультат.Удалить(НовСтр);
				Прервать;
			КонецЕсли;
			НовСтр[Зап.Имя] = Сведение;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблРезультат;

КонецФункции // ПолучитьТаблицуИзНастроек

// СоздатьТаблицуПоУплатамНалогов
//
Функция СоздатьТаблицуПоУплатамНалогов()

	Строка254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	ТипДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСрокиСдачи = Новый ТаблицаЗначений;

	ТаблицаСрокиСдачи.Колонки.Добавить("НалогПолноеНазв", Строка254); // Полное название отчета из области Ключ НалогКратко.
	ТаблицаСрокиСдачи.Колонки.Добавить("СрокУплаты", ТипДата);

	ТаблицаСрокиСдачи.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
	ТаблицаСрокиСдачи.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По

	ТаблицаСрокиСдачи.Колонки.Добавить("Периодичность", мСтрока100);
	ТаблицаСрокиСдачи.Колонки.Добавить("Кто", Строка254);
	ТаблицаСрокиСдачи.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);
	Возврат ТаблицаСрокиСдачи;

КонецФункции // СоздатьТаблицуПоУплатамНалогов

// ПостроитьГрафикСдачи
//
Функция ПостроитьГрафикСдачи(Объект, ТаблицаНастройкиКОбъекту, Знач ТребуемыйГод)

	ТаблицаГрафикСдачи = мТаблицаГрафикСдачи.Скопировать();

	// Для каждой формы, которая описана в макете
	Для каждого Настр Из ТаблицаНастройкиКОбъекту Цикл

		ФормаЗаполняетсяНарастающимИтогом = Настр.НарастающийИтог = "Истина";
		НазваниеФормыНастройка = Настр.Форма;

		СрокУплатыЕжемесячно = Настр.Ежемесячно;
		СрокУплатыЕжемесячноКто = Настр.ЕжемесячноТекст;

		СрокУплатыЕжеквартально = Настр.Ежеквартально;
		СрокУплатыЕжеквартальноКто = Настр.ЕжеквартальноТекст;

		Если НЕ ПустаяСтрока(Настр.ЗаГод) Тогда
			РазборСрока = ПолучитьНомерМесяцаИЧислоПоФормату(Настр.ЗаГод);
			СрокУплатыГодДень = РазборСрока.ЧислоДень;
			СрокУплатыГодМесяц = РазборСрока.Месяц;
		КонецЕсли;

		СрокУплатыГодТекст = Настр.ЗаГодТекст;

		// ТипСдачиФормы - 1 - ежемесячн. 2 - ежеквартально, 3- год
		Для ТипСдачиФормы = 1 По 3 Цикл
			Если (ТипСдачиФормы = 1) И (ПустаяСтрока(СрокУплатыЕжемесячно)) Тогда
				Продолжить;
			ИначеЕсли (ТипСдачиФормы = 2) И (ПустаяСтрока(СрокУплатыЕжеквартально)) Тогда
				Продолжить;
			ИначеЕсли (ТипСдачиФормы = 3) И (ПустаяСтрока(Настр.ЗаГод)) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипСдачиФормы = 1 Тогда
				// Форма сдается ежемесячно.
				ПериодичностьНастройка = "Месячная";
				СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
				Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
					// Если форма уже не действует, тогда пропускаем.
					Продолжить;
				КонецЕсли;

				АкцизнаяСхема = Ложь;

				Если (Найти(СрокУплатыЕжемесячно, "+1Месяц") > 0)
				 Или (Найти(СрокУплатыЕжемесячно, "+2Месяц") > 0)
				 Или (Найти(СрокУплатыЕжемесячно, "+3Месяц") > 0) Тогда

					МесяцПрибавления = Число(Сред(СрокУплатыЕжемесячно, 2, 1));
					СрокУплатыЕжемесячно = Сред(СрокУплатыЕжемесячно, Найти(СрокУплатыЕжемесячно, " ") + 1);
					АкцизнаяСхема = Истина;

				Конецесли;

				Для Инд = СтруктураНачИКонцаДейтсвийПериода.Начало По СтруктураНачИКонцаДейтсвийПериода.Конец Цикл

					НовСтр = ТаблицаГрафикСдачи.Добавить();
					НовСтр.Объект = Объект;
					НовСтр.Периодичность = ПериодичностьНастройка;
					НовСтр.ФормаОтчета = НазваниеФормыНастройка;

					НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДейтсвийПериода.НазваниеОтчетнойФормы;

					// Обработаем возможность сокращения ПДСМ - последний день следующего месяца.
					Если СрокУплатыЕжемесячно = "ПДСМ" Тогда
						// За январь - 28 февраля
						// за февраль - 31 марта и т.д.
						//     
						// за декабрь - 31 января
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, Инд, 1));
					ИначеЕсли АкцизнаяСхема Тогда
						// Специальный режим сроков уплат. Применяется в акцизных декларациях.
						// Платеж делится на два срока, первый - до 20-го числа след. месяца после отчетного, второй - до 15-го через месяц.
						МесАкц = Инд + МесяцПрибавления;
						Если МесАкц >= 13 Тогда
							МесАкц = 1;
							//ТребуемыйГод = ТребуемыйГод - 1; // Обращаемся к прошлому году.
						КонецЕсли;
						СрокСдачи = Дата(ТребуемыйГод, МесАкц, СрокУплатыЕжемесячно);
					Иначе
						СрокСдачи = КонецДня(Дата(ТребуемыйГод, Инд, СрокУплатыЕжемесячно));
					КонецЕсли;

					НовСтр.ПоследняяДатаПредставленияОтчета = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);

					Если (АкцизнаяСхема) И (Инд = 12) Тогда
							// январь. Изменим период, за который должен составится отчет.
						СрокСдачиС = Дата(ТребуемыйГод - 1, 12 - МесяцПрибавления, 1);
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					Иначе
						СрокСдачиС = ДобавитьМесяц(Дата(ТребуемыйГод, Инд, 1), -1); // КонецМесяца(ДобавитьМесяц(СрокСдачи, -1));
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					КонецЕсли;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						// Если форма сдается нарастающим итогом, то передвигаем дату С на начало года.
						СрокСдачиС = НачалоГода(СрокСдачиС);
					КонецЕсли;

					НовСтр.ЗаПериодС = СрокСдачиС;
					НовСтр.ЗаПериодПо = СрокСдачиПо;

					НовСтр.КтоСдаетОтчет = СрокУплатыЕжемесячноКто;
					НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;
					// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
					НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

					//ПроставитьНапоминания(ТаблицаГрафикСдачи, НовСтр, НовСтр.ПоследняяДатаПредставленияОтчета, НачалоМесяца(СрокСдачи));

				КонецЦикла;
			КонецЕсли;

			Если ТипСдачиФормы = 2 Тогда
				// Обходи для декларации по НДС с 2008 г. сдают все налогоплательщики квартально.
				Если (Объект = "РегламентированныйОтчетНДС") И (Настр.Форма = "ФормаОтчета2007Кв1") И (ТребуемыйГод >= 2008) Тогда
					СрокУплатыЕжеквартальноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
				КонецЕсли;

				ПериодичностьНастройка = "Квартальная";
				СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
				Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
					// Если форма уже не действует, тогда пропускаем.
					Продолжить;
				КонецЕсли;

				Для Квартал = СтруктураНачИКонцаДейтсвийПериода.Начало По СтруктураНачИКонцаДейтсвийПериода.Конец Цикл
					Если Квартал = 4 Тогда
						// Обрабатывать данную ситуацию необходимо в блоке, который отвечает за ежегодность.
						Продолжить;
					КонецЕсли;

					НовСтр = ТаблицаГрафикСдачи.Добавить();
					НовСтр.Объект = Объект;
					НовСтр.Периодичность = ПериодичностьНастройка;
					НовСтр.ФормаОтчета = НазваниеФормыНастройка;

					НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДейтсвийПериода.НазваниеОтчетнойФормы;

					Если Найти(СрокУплатыЕжеквартально, "ДОСОП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания соответствующего отчетного периода
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 7));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = КонецКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + (86400 * КолвоПрибавляемыхДней);
					ИначеЕсли Найти(СрокУплатыЕжеквартально, "ДОПМСОП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания первого месяца следующего за отчетным периодом
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 9));
						// Прибавим нужное кол-во каледнарных дней.
						СрокСдачи = КонецМесяца(КонецКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + 1) + (86400 * КолвоПрибавляемыхДней);	
					ИначеЕсли СрокУплатыЕжеквартально = "ПЧМСЗОП" Тогда
						// Означает Последнее Число Месяца Следующего За Отчетным Периодом. ПЧМСЗОП.
						// Т.е. за 1 кв. - последний день апреля.
						// за 2 кв. - последний день июля.
						// за 3 кв. - последний день октября.
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3) + 1, 1));
					ИначеЕсли Найти(СрокУплатыЕжеквартально, "ПОЛУГОДИЕ") > 0 Тогда
						ЧислоОтчета = Сред(СрокУплатыЕжеквартально, 10);
						// режим отчета формы, только за полугодие. Пример ЕСХН.
						СрокСдачи = Дата(ТребуемыйГод, 7, ЧислоОтчета);
						СрокСдачи = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
						НовСтр.ПоследняяДатаПредставленияОтчета = СрокСдачи;
						// Повторим все параметры таблицы, т.к. прервем цикл.
						НовСтр.Периодичность = "Полугодие";
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, 6, 1));
						НовСтр.КтоСдаетОтчет = СрокУплатыЕжеквартальноКто;
						НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;
						НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;
						Прервать; // Прирвем цикл. Только ПОЛУГОДИЕ.

					Иначе
						СрокСдачи = Дата(ТребуемыйГод, (Квартал * 3) + 1, СрокУплатыЕжеквартально);
					КонецЕсли;

					СрокСдачи = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
					НовСтр.ПоследняяДатаПредставленияОтчета = СрокСдачи;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3), 1));
					Иначе
						НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод, Квартал * 3, 1));
						НовСтр.ЗаПериодПо = КонецКвартала(НовСтр.ЗаПериодС);
					КонецЕсли;

					НовСтр.КтоСдаетОтчет = СрокУплатыЕжеквартальноКто;
					НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;

					// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
					НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

					//ПроставитьНапоминания(ТаблицаГрафикСдачи, НовСтр, НовСтр.ПоследняяДатаПредставленияОтчета, НовСтр.ЗаПериодС);

				КонецЦикла;
			КонецЕсли;

			Если ТипСдачиФормы = 3 Тогда
				ПериодичностьНастройка = "Годовая";

				// Обходи для декларации по НДС с 2008 г. сдают все налогоплательщики квартально.
				Если (Объект = "РегламентированныйОтчетНДС") И (Настр.Форма = "ФормаОтчета2007Кв1") И (ТребуемыйГод >= 2008) Тогда
					СрокУплатыЕжемесячноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
				КонецЕсли;

				Если ТипЗнч(СрокУплатыГодДень) = Тип("Строка") Тогда
					Если Найти(СрокУплатыГодДень, "ДОСОП+") > 0 Тогда
						// Бухгалтерская отчетность. Годовая отчетность - в течении 90 дней по окончании года.
						// Выясним, для прошлого года, действует ли данный отчет?
						СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод - 1, ПериодичностьНастройка);
						Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
							// Если форма за прошлый год не действует, то пропустим её.
							Продолжить;
						КонецЕсли;
					КонецЕсли;

				Иначе
					// В случае, если при годовой отчетности задан месяц и год сдачи формы, тогда в переменной СрокУплатыГодДень будет число - День месяца.

					СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
					Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
						// Если форма уже не действует, тогда пропускаем.
						// В случае, если конкретная форма уже закончила действовать в ГГГГ году, тогда проверим на прошлый год, но запись по действию
						// нужно сформировать для текущего года.
						// Например, для отчета, который в 2007 г. больше не действует, но действовал в 2006 г., сдача годового отчета за 2006 год
						// должна осуществляться в января 2007 г.
						СтруктураНачИКонцаДейтсвийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод - 1, ПериодичностьНастройка, Истина);
						Если СтруктураНачИКонцаДейтсвийПериода = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Годовая.
				НовСтр = ТаблицаГрафикСдачи.Добавить();
				НовСтр.Объект = Объект;
				// Если форма нарастающим итогом, то периодичность Годовая, иначе периодичность установим в Квартальная.
				// Проверка на любой квартальной декларации не нарастающим итогом.
				НовСтр.Периодичность = ?(ФормаЗаполняетсяНарастающимИтогом, ПериодичностьНастройка, "Квартальная");
				НовСтр.ФормаОтчета = НазваниеФормыНастройка;
				НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДейтсвийПериода.НазваниеОтчетнойФормы;

				Если ТипЗнч(СрокУплатыГодДень) = Тип("Строка") Тогда
					Если Найти(СрокУплатыГодДень, "ДОСОП+") > 0 Тогда
						ДниПлюс = Число(СтрЗаменить(СрокУплатыГодДень, "ДОСОП+", ""));
						// Прибавим к последней дате прошлого года нужно кол-во дней. Итоговая дата, будет событием в Требуемом году.
						// Отчет за прошлый год. Применимо для бухаглтерских форм.
						СрокСдачи = КонецГода(Дата(ТребуемыйГод - 1, 1, 1)) + ДниПлюс * 86400;
					КонецЕсли;
				Иначе
					// В случае, если при годовой отчетности задан месяц и год сдачи формы, тогда в переменной СрокУплатыГодДень будет число - День месяца.
					СрокСдачи = Дата(ТребуемыйГод, СрокУплатыГодМесяц, СрокУплатыГодДень);
				Конецесли;
				НовСтр.ПоследняяДатаПредставленияОтчета = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);

				// ЗаПериод Определим, за какой период отчетность.
				Если ФормаЗаполняетсяНарастающимИтогом Тогда
					НовСтр.ЗаПериодС = НачалоГода(Дата(ТребуемыйГод - 1, 1, 1));
				Иначе
					// Если не нарастающий итог, тогда этот отчет за IV квартал.
					НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод - 1, 12, 1));
				КонецЕсли;

				НовСтр.ЗаПериодПо = КонецГода(НовСтр.ЗаПериодС);
				НовСтр.КтоСдаетОтчет = СрокУплатыГодТекст;
				НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;

				// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
				НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

				//ПроставитьНапоминания(ТаблицаГрафикСдачи, НовСтр, НовСтр.ПоследняяДатаПредставленияОтчета, НовСтр.ЗаПериодС);

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаГрафикСдачи;

КонецФункции // ПостроитьГрафикСдачи

// ПостроитьГрафикУплат
//
Функция ПостроитьГрафикУплат(НастройкаУплатПоНалогу, Знач ТребуемыйГод)

	ТаблицаСроковУплат = СоздатьТаблицуПоУплатамНалогов();

	Для каждого Зап Из НастройкаУплатПоНалогу Цикл
		НазваниеНалога = Зап.НазваниеНалога;
		Годы = Зап.Годы;
		ФормаЗаполняетсяНарастающимИтогом = Зап.НарастающийИтог = "Истина";

		НДСОтчетПропуск = Ложь;
		Если (НазваниеНалога = "Налог на добавленную стоимость") Или (НазваниеНалога = "НДС по ставке 0%") Тогда
			НДСОтчетПропуск = Истина;
		КонецЕсли;

		Разделитель = Найти(Годы, "-");
		Если Разделитель > 0 Тогда
			// Означает, что для настройка для нескольких лет. Интервал оформляется через -. Например 2005-2006, или 2005-0
			
			ГодНачало = Число(Сред(Годы, 1, Разделитель - 1));
			ГодКонец = Число(Сред(Годы, Разделитель + 1));
		Иначе
			ГодНачало = Число(Годы);
			ГодКонец = ГодНачало;
		КонецЕсли;
		Если ГодКонец = 0 Тогда
			ГодКонец = 2020;
		КонецЕсли;
		// Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст");
		СрокУплатыЕжемесячно = Зап.Ежемесячно;
		СрокУплатыЕжемесячноКто = Зап.ЕжемесячноТекст;

		СрокУплатыЕжеквартально = Зап.Ежеквартально;
		СрокУплатыЕжеквартальноКто = Зап.ЕжеквартальноТекст;

		Если НЕ ПустаяСтрока(Зап.ЗаГод) Тогда
			РазборСрока = ПолучитьНомерМесяцаИЧислоПоФормату(Зап.ЗаГод);
			СрокУплатыГодДень = РазборСрока.ЧислоДень;
			СрокУплатыГодМесяц = РазборСрока.Месяц;
		КонецЕсли;

		СрокУплатыГодТекст = Зап.ЗаГодТекст;

		Если (НДСОтчетПропуск) И (ТребуемыйГод >= 2008) Тогда
			СрокУплатыЕжеквартальноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
		КонецЕсли;

		Если НЕ ((ТребуемыйГод >= ГодНачало) И (ТребуемыйГод <= ГодКонец)) Тогда
			// В том случае, если указанный в настройках год не подходидит для заданного периода, возвращаем пустую таблицу сроков уплат.
			Возврат ТаблицаСроковУплат;
		КонецЕсли;

		// Генерируем сроки уплат по налогу.
		// Для ежемесячного налога.
		Если НЕ ПустаяСтрока(СрокУплатыЕжемесячно) Тогда
			АкцизнаяСхема = Ложь;

			Если (Найти(СрокУплатыЕжемесячно, "+1Месяц") > 0)
			 Или (Найти(СрокУплатыЕжемесячно, "+2Месяц") > 0)
			 Или (Найти(СрокУплатыЕжемесячно, "+3Месяц") > 0) Тогда

				МесяцПрибавления = Число(Сред(СрокУплатыЕжемесячно, 2, 1));
				СрокУплатыЕжемесячно = Сред(СрокУплатыЕжемесячно, Найти(СрокУплатыЕжемесячно, " ") + 1);
				АкцизнаяСхема = Истина;

			Конецесли;

			Для Мес = 1 По 12 Цикл

				Если (НДСОтчетПропуск) И (ТребуемыйГод >= 2008) Тогда
					// Для НДС, только в январе 2008 г., за декабрь 2007 г., далее ежемесячно НДС отменен.
					Если Мес > 1 Тогда
						Продолжить;
					Иначе
						СрокУплатыЕжемесячноКто = "Организации, индивидуальные предприниматели, лица, признаваемые налогоплательщиками НДС в связи с перемещением товаров через таможенную границу РФ";
					КонецЕсли;
				КонецЕсли;

				НовСтр = ТаблицаСроковУплат.Добавить();

				НовСтр.НалогПолноеНазв = НазваниеНалога;

				Если АкцизнаяСхема Тогда
					// Специальный режим сроков уплат. Применяется в акцизных декларациях.
					// Платеж делится на два срока, первый - до 20-го числа след. месяца после отчетного, второй - до 15-го через месяц.
					МесАкц = Мес + МесяцПрибавления;
					Если МесАкц >= 13 Тогда
						МесАкц = 1;
						//ТребуемыйГод = ТребуемыйГод - 1; // Обращаемся к прошлому году.
					КонецЕсли;
					НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, МесАкц, СрокУплатыЕжемесячно), Ложь);
				Иначе
					НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, Мес, СрокУплатыЕжемесячно), Ложь);
				КонецЕсли;

				Если (АкцизнаяСхема) И (Мес = 12) Тогда
						// январь. Изменим период, за который должен составится отчет.
					НовСтр.ЗаПериодС = Дата(ТребуемыйГод - 1, 12 - МесяцПрибавления, 1);
					НовСтр.ЗаПериодПо = КонецМесяца(НовСтр.ЗаПериодС);
				Иначе
					НовСтр.ЗаПериодС = ДобавитьМесяц(Дата(ТребуемыйГод, Мес, 1), -1);
					НовСтр.ЗаПериодПо = КонецМесяца(НовСтр.ЗаПериодС);
				КонецЕсли;

				НовСтр.Периодичность = "Месячная";
				НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
				НовСтр.Кто = СрокУплатыЕжемесячноКто;

			КонецЦикла;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СрокУплатыЕжеквартально) Тогда
			Для Квартал = 1 По 4 Цикл
				НовСтр = ТаблицаСроковУплат.Добавить();
				НовСтр.НалогПолноеНазв = НазваниеНалога;

				Если Квартал = 4 Тогда
					ТаблицаСроковУплат.Удалить(НовСтр);
					// Обрабатывать данную ситуацию необходимо в блоке, который отвечает за ежегодность.
					Продолжить;

				ИначеЕсли Квартал < 4 Тогда

					Если Найти(СрокУплатыЕжеквартально, "ПОЛУГОДИЕ") > 0 Тогда

						ЧислоОтчета = Сред(СрокУплатыЕжеквартально, 10);
						// режим отчета формы, только за полугодие. Пример ЕСХН.
						СрокСдачи = Дата(ТребуемыйГод, 7, ЧислоОтчета);
						СрокСдачи = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
						НовСтр.СрокУплаты = СрокСдачи;
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, 6, 1));
						НовСтр.Периодичность = "Квартальная";
						НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
						НовСтр.Кто = СрокУплатыЕжеквартальноКто;
						Прервать;

					ИначеЕсли СрокУплатыЕжеквартально = "ПЧМСЗОП" Тогда
						// Означает Последнее Число Месяца Следующего За Отчетным Периодом. ПЧМСЗОП.
						// Т.е. за 1 кв. - последний день апреля.
						// за 2 кв. - последний день июля.
						// за 3 кв. - последний день октября.
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3) + 1, 1));
						НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
					Иначе
						НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, (Квартал * 3) + 1, СрокУплатыЕжеквартально), Ложь);
					КонецЕсли;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3), 1));
					Иначе
						НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод, Квартал * 3, 1));
						НовСтр.ЗаПериодПо = КонецКвартала(НовСтр.ЗаПериодС);
					КонецЕсли;

					НовСтр.Периодичность = "Квартальная";
					НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
					НовСтр.Кто = СрокУплатыЕжеквартальноКто;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Если НЕ ПустаяСтрока(Зап.ЗаГод) Тогда

			// Срок уплаты текущего года.
			НовСтр = ТаблицаСроковУплат.Добавить();
			НовСтр.НалогПолноеНазв = НазваниеНалога;
			НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, СрокУплатыГодМесяц, СрокУплатыГодДень), Ложь);

			НовСтр.ЗаПериодС = НачалоГода(Дата(ТребуемыйГод - 1, 1, 1));
			НовСтр.ЗаПериодПо = КонецГода(НовСтр.ЗаПериодС);
			НовСтр.Периодичность = "Квартальная"; // формы с нарастающим итогом и только, которые могут сдаваться за год, всегда квартальные.
			НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
			НовСтр.Кто = СрокУплатыГодТекст;

		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаСроковУплат;

КонецФункции // ПостроитьГрафикУплат

// ПолучитьНомерМесяцаИЧислоПоФормату
// Функция осуществляет разбор текстовой строки и возвращает номер месяца и число.
//
// Параметры:
//  СведенияИЗНастройкиМакет - строка, из настройки, описывающая число и месяц уплаты или срока сдачи... формат 28.03
//
// Возвращаемое значение:
//  Структура, число - месяц и номер квартала.
//
Функция ПолучитьНомерМесяцаИЧислоПоФормату(СведенияИзНастройкиМакет)

	Если Найти(СведенияИзНастройкиМакет, ".") > 0 Тогда
		// Указан месяц и число сдачи
		СведенияИзНастройкиЧисло = Число(Сред(СведенияИзНастройкиМакет, 1, Найти(СведенияИзНастройкиМакет, ".") - 1));
		СведенияИзНастройкиМес = Число(Сред(СведенияИзНастройкиМакет, Найти(СведенияИзНастройкиМакет, ".") + 1));
	Иначе
		СведенияИзНастройкиЧисло = СведенияИзНастройкиМакет;
		СведенияИзНастройкиМес = Неопределено;
	КонецЕсли;

	Возврат Новый Структура("ЧислоДень, Месяц", СведенияИзНастройкиЧисло, СведенияИзНастройкиМес);

КонецФункции

// УстановитьУдалитьДействиеВТаблДок
//
Процедура УстановитьУдалитьДействиеВТаблДок(Расшифровка, Установить, РежимПлатежа, НомерСтрокиВТабличномПоле, ЭтоВызовИзРежимаНедели = Ложь)
	ДобавитьУдалитьЗаписьВРегистрОповещения(Расшифровка, Установить, РежимПлатежа);
	Если ЭтоВызовИзРежимаНедели Тогда
		Тек = мТаблПолеНеделя.ТекущаяОбласть;
		мТаблПолеНеделя.Рисунки["Rowin2_" + Формат(НомерСтрокиВТабличномПоле, "ЧГ=0") + "C" + Расшифровка.НомерДня].Картинка = ?(Установить, мКартинкаОповестить, мКартинкаПустая);
		мТаблПолеНеделя.ТекущаяОбласть = мТаблПолеНеделя.Рисунки["Rowin2_" + Формат(НомерСтрокиВТабличномПоле, "ЧГ=0") + "C" + Расшифровка.НомерДня];
		мТаблПолеНеделя.ТекущаяОбласть = Тек;
		ТекущийЭлемент = мТаблПолеНеделя;
	КонецЕсли;

КонецПроцедуры // УстановитьУдалитьДействиеВТаблДок

// ОткрытьПлатПоручениеИлиОтчет
// Параметры:
//  Расшифровка   - структура строки данных.
//  Статус        - 2 - открыть платежное поручение; 1 или 3 - отчеты
//
Процедура ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус)
	Если Статус = "2" Тогда
		ВызватьПлатежноеПоручениеНаУплатуНалога();
		Возврат;
	КонецЕсли;

	Если (Статус = "1") Или (Статус = "3") Тогда

		Если Расшифровка.Периодичность = "Месячная" Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		ИначеЕсли Расшифровка.Периодичность = "Квартальная" Тогда
			Периодичность = Перечисления.Периодичность.Квартал;
		Иначе
			Периодичность = Неопределено;
		КонецЕсли;

		ДатаНач = НачалоДня(Расшифровка.ЗаПериодС);
		ДатаКон = КонецДня(Расшифровка.ЗаПериодПо);

		ИсточникОтчета = Расшифровка.ИсточникОтчета;
		ДокументыОтчета = РегламентированнаяОтчетность.ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, ДляОрганизации, "", Расшифровка.Периодичность);

		Если ДокументыОтчета <> 0 Тогда
			мВыбраннаяФормаКалендаря = ИсточникОтчета;
			мПериодичностьКалендарь = Расшифровка.Периодичность;
			мДатаКонцаПериодаОтчетаКалендарь = ДатаКон;
			Организация = Новый СписокЗначений;
			Организация.Добавить(ДляОрганизации);
			РезультатВыбора = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВыбораОтчета", ЭтаФорма).ОткрытьМодально();
			мВыбраннаяФормаКалендаря = Неопределено;
			мПериодичностьКалендарь = Неопределено;
			мДатаКонцаПериодаОтчетаКалендарь = Неопределено;

			Если РезультатВыбора = Истина Тогда // создаем новый отчет
				РегламентированнаяОтчетность.ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ДляОрганизации);
			ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
				РезультатВыбора.ПолучитьФорму().Открыть();
			КонецЕсли;
		Иначе
			РегламентированнаяОтчетность.ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ДляОрганизации);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьПлатПоручениеИлиОтчет

// СоздатьНапоминанияНаДень
//
Процедура СоздатьНапоминания(НаДату)

	Если мНакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("Статус", Истина)).Количество() > 0 Тогда

		// Удалим напоминания, которые были сформированы ранее.
		КолвоЭлементовКоллекции = мНакопительнаяТаблицаПредставленияОтчетов.Количество();
		Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл 
			ЭлементКоллекции = мНакопительнаяТаблицаПредставленияОтчетов[КолвоЭлементовКоллекции - ОбратныйИндекс];
			Если ЭлементКоллекции.Статус Тогда
				мНакопительнаяТаблицаПредставленияОтчетов.Удалить(ЭлементКоллекции);
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Отберем все записи правее выбранной даты.
	РезультатОтбора = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мНакопительнаяТаблицаПредставленияОтчетов);
	Для каждого Зап Из мНакопительнаяТаблицаПредставленияОтчетов Цикл
		ДатаСдачиОтчета = Зап.ПоследняяДатаПредставленияОтчета;
		Если ДатаСдачиОтчета <= НаДату Тогда
			// Записи, у которых прошел срок сдачи пропустим.
			Продолжить;
		КонецЕсли;

		Если Зап.ЗаПериодПо >= НаДату Тогда
			// Если, период за который сдается отчет, ещё не прошел, тогда в напоминания запись не включаем.
			Продолжить;
		КонецЕсли;

		// Добавим подходящую запись в таблицу отбора.
		НовСтр = РезультатОтбора.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Зап);
	КонецЦикла;

	РезультатОтбора.Сортировать("ПоследняяДатаПредставленияОтчета");

	// В таблице РезультатОтбора - хранится таблица с данными по срокам представления отчетности, которые
	// наступят в будущем. Например, срок сдачи 20.02, НаДату = 18.02, запись попадает.

	СтруктураПоиска = Новый Структура();
	Для каждого Стр Из РезультатОтбора Цикл

		// Перед вставкой напоминаний, осуществим поиск по таблице, на предмет, что более близкое напоминание по дату
		// уже заведено, в этом случае, больше напоминаний вставлять не требуется.
		СтруктураПоиска.Вставить("КтоСдаетОтчет", Стр.КтоСдаетОтчет);
		СтруктураПоиска.Вставить("НазваниеОтчетнойФормы", Стр.НазваниеОтчетнойФормы);
		СтруктураПоиска.Вставить("Объект", Стр.Объект);
		СтруктураПоиска.Вставить("Периодичность", Стр.Периодичность);
		СтруктураПоиска.Вставить("ФормаЗаполняетсяНарастающимИтогом", Стр.ФормаЗаполняетсяНарастающимИтогом);
		СтруктураПоиска.Вставить("ФормаОтчета", Стр.ФормаОтчета);
		СтруктураПоиска.Вставить("Статус", Истина); // Только Напоминания.

		Если мНакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		ПроставитьНапоминания(мНакопительнаяТаблицаПредставленияОтчетов
		                    , Стр
		                    , НаДату);
	КонецЦикла;

КонецПроцедуры // СоздатьНапоминанияНаДень

// ПроставитьНапоминания
// Процедура добавляет записи в таблицу, с признаком Напоминания = Истина. За каждый день.
//
Процедура ПроставитьНапоминания(ТаблицаДанных, ЗаполненнаяСтрокаДанных, НаДату)

	НовСтр = ТаблицаДанных.Добавить();
	ЗаполнитьЗначенияСвойств(НовСтр, ЗаполненнаяСтрокаДанных);
	НовСтр.Статус = Истина;
	НовСтр.ПоследняяДатаПредставленияОтчета = НаДату; // Дата напоминания.

КонецПроцедуры // ПроставитьНапоминания

// ВозвратитьСтруктуруДействийФормы
// Функция возвращает начальный номер квартала или месяца требуемого года, в котором действует форма (НазваниеФормы)
//
// Параметры:
//  Объект         - строка, название регламентированного отчета.
//  НазваниеФормы  - название формы в объекте рег. отчета.
//  ТребуемыйГод   - год
//  Периодичность  - может принимать значение: Квартал, Месяц.
//  ГодДействияОбход - Ложь по умолчанию, только для годовых деклараций. Если Истина, тогда
//                 год действия декларации и требуемый год при совпадении не возвдаращает Неопределено.
//                 Если Ложь, тогда при равенстве ТребуемогоГода и Года действия отчета возвращается неопределено
//
// Возвращаемое значение:
//  Структура, ключи: Начало, Конец. Квартал или месяц, в зависимости от периодичности.
//  В случае, если форма в указанный год вообще не действует, тогда возвращаем Неопределено.
//  В случае, если Периодичность = "Годовая" и форма в этот год действует, тогда возвращается пустая структура.
//
Функция ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормы, ТребуемыйГод, Периодичность, ГодДействияОбход = Ложь)

	// Обход форм, которые действуют в один и тот же период времени.
	// Авансы по земельному налогу
	Если (Объект = "РегламентированныйОтчетАвансыЗемля") И (НазваниеФормы = "ФормаОтчета2006Кв2") И (ТребуемыйГод = 2007) Тогда
		Возврат Неопределено;
	КонецЕсли;

	НайденныеСтроки = мТаблицаСроковОтчетность.НайтиСтроки(Новый Структура("ИсточникОтчета, Форма", Объект, НазваниеФормы));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	НайденнаяСтрока = НайденныеСтроки[0];
	НазваниеОтчетнойФормы = НайденнаяСтрока.НазваниеОтчетнойФормы;

	ДатаНачалоДействия = НайденнаяСтрока.ДатаНачалоДействия;
	ДатаКонецДействия = НайденнаяСтрока.ДатаКонецДействия;

	Если ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		ДатаКонецДействия = '20990101';
	КонецЕсли;
	ГодДатаНачалоДействия = Год(ДатаНачалоДействия);
	ГодДатаКонецДействия = Год(ДатаКонецДействия);

	// Действует ли этот отчет в требуемый год? Определим условия.
	// Если год даты начала больше требуемого года
	// или если срок окончания действия меньше требуемого года
	Если (ГодДатаНачалоДействия > ТребуемыйГод)
	 Или (ГодДатаКонецДействия < ТребуемыйГод) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Периодичность = "Годовая" Тогда
		// Требуемый год - это год когда должно произойти действие. Если форма только начала действовать с данного года, то годовой отчет
		// под эту форму не подпадает, кроме случаев, когда правая граница укладывается в требуемый год.
		Если ГодДатаНачалоДействия = ТребуемыйГод Тогда
			// 4-ФСС
			Если НЕ ГодДействияОбход Тогда
				// Например. Требуемый год действий - 2006 г. форма годовая по транспорту действует с 01.01.2006, значит в феврале 2006 г. данную
				// форму сдать нельзя, её можно сдать только в феврале 2007 года.
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;

		// Если функция запускается в спец. режиме для года с уже уменьшенным на 1 годом, тогда анализируем, не закончилась ли в этом году действие формы.
		Если ГодДействияОбход Тогда
			// Определим, что в случае, если форма заканчивает действовать в середине года, например, расчет платы за загр. окр. среды Осн. форма.
			// действует до 30.06.2007, тогда в этом случае, при составлении календаря за 2008 г. за январь месяц, за 2007 г. не должно появляться
			// строки с предложением заполнить годовую декларацию по итогам года.
			Если ГодДатаКонецДействия = ТребуемыйГод Тогда
				// Определим, закончила ли действовать форма в середине года.
				Если Месяц(ДатаКонецДействия) <> 12 Тогда
					// Форма перестала быть актуальной в середине года, поэтому за год, этот отчет формировать не требуется.
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Для декларации с периодичностью Годовая возврати пустую стркуктуру, главное определили, что она подходидит по указанный год.
		Возврат Новый Структура("НазваниеОтчетнойФормы", НазваниеОтчетнойФормы);
	КонецЕсли;

	// В случае, если форма начала действовать не в требуемом году, тогда Начало всегда 1 (первый месяц и первый квартал)
	Если ГодДатаНачалоДействия < ТребуемыйГод Тогда
		Начало = 1;
	ИначеЕсли ГодДатаНачалоДействия = ТребуемыйГод Тогда
		//Если форма начала действовать в требуемый год
		Если Периодичность = "Месячная" Тогда
			// Определим номер месяца, с которого действует форма в требуемом году.
			Начало = Месяц(ДатаНачалоДействия);
		ИначеЕсли Периодичность = "Квартальная" Тогда
			// Определим номер квартала, с которого действует форма.
			Начало = РегламентированнаяОтчетность.ПолучитьКварталРО(ДатаНачалоДействия);
		КонецЕсли;
	КонецЕсли;

	Если ГодДатаКонецДействия > ТребуемыйГод Тогда
		Если Периодичность = "Месячная" Тогда
			Конец = 12;
		ИначеЕсли Периодичность = "Квартальная" Тогда
			Конец = 4;
		КонецЕсли;
	ИначеЕсли ГодДатаКонецДействия = ТребуемыйГод Тогда
		Если Периодичность = "Месячная" Тогда
			Конец = Месяц(ДатаКонецДействия);
		ИначеЕсли Периодичность = "Квартальная" Тогда
			Конец = РегламентированнаяОтчетность.ПолучитьКварталРО(ДатаКонецДействия);
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Начало", Начало);
	Результат.Вставить("Конец", Конец);
	Результат.Вставить("НазваниеОтчетнойФормы", НазваниеОтчетнойФормы);

	// Обход для формы НДС, с 2008 г. сдаётся только по квартально.
	Если (Объект = "РегламентированныйОтчетНДС") И (ТребуемыйГод >= 2008) И (Периодичность = "Месячная") Тогда
		// Можно отчитаться только в январе, за декабрь 2007 г.
		Результат.Вставить("Конец", 1);
	КонецЕсли;

	Возврат Результат;

КонецФункции // ВозвратитьСтруктуруДействийФормы


////////////////////////////////////////////////////////////////////////
//////////////// МЕХАНИЗМЫ ЦУО /////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

// СформироватьЗаголовокФормы
//
Процедура СформироватьЗаголовокФормы(НаДату)
	Если НаДату = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		Заголовок = "Календарь бухгалтера";
	Иначе
		ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
		Если ТекСтраница = "День" Тогда
			Заголовок = "Календарь бухгалтера - события на " + формат(НаДату, "ДФ=дд.ММ.гггг") + ", для организации " + ДляОрганизации.Наименование;
		ИначеЕсли ТекСтраница = "Неделя" Тогда
			ДатаНач = мВыделенныеДатыВКалендареНеделя[0].Дата;
			ДатаКон = мВыделенныеДатыВКалендареНеделя[6].Дата;
			Заголовок = "Календарь бухгалтера - события с " + формат(ДатаНач, "ДФ=дд.ММ.гггг") + " по " + формат(ДатаКон, "ДФ=дд.ММ.гггг") + ", для организации " + ДляОрганизации.Наименование;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // СформироватьЗаголовокФормы

// ЗаполнитьСписокПериодов
//
Процедура ЗаполнитьСписокПериодов()
	ЭлементыФормы.ПолеВыбораСобытияЗаПериод.СписокВыбора.Очистить();
	Для НомМесяц = 1 По 12 Цикл
		//НомМесяц = 13 - НомМесяцИнд;
		МесяцРасш = Дата(Год(мДатаНач), НомМесяц, 1);
		Если НомМесяц = 3 Тогда
			Период = "I кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		ИначеЕсли НомМесяц = 6 Тогда
			Период = "II кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		ИначеЕсли НомМесяц = 9 Тогда
			Период = "III кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		ИначеЕсли НомМесяц = 12 Тогда
			Период = "IV кв. " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		Иначе
			Период = Формат(МесяцРасш, "ДФ=ММММ") + " " + Формат(МесяцРасш, "ДФ=гггг") + " г.";
		КонецЕсли;
		ЭлементыФормы.ПолеВыбораСобытияЗаПериод.СписокВыбора.Добавить(НомМесяц, Период);
	КонецЦикла;

	ПолеВыбораСобытияЗаПериод = Месяц(мДатаКон);

КонецПроцедуры // ЗаполнитьСписокПериодов

// ДобавитьУдалитьЗаписьВРегистрОповещения
//
Процедура ДобавитьУдалитьЗаписьВРегистрОповещения(ДанныеСтроки, ДобавитьСобытие, РежимУплаты = Ложь)

	НовЗап = РегистрыСведений.СобытияКалендаряБухгалтера.СоздатьМенеджерЗаписи();

	НовЗап.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	НовЗап.Периодичность = ДанныеСтроки.Периодичность;
	НовЗап.ЗаПериодС = ДанныеСтроки.ЗаПериодС;
	НовЗап.ЗаПериодПо = ДанныеСтроки.ЗаПериодПо;
	НовЗап.Организация = ДляОрганизации;
	НовЗап.Состояние = Перечисления.СостоянияСобытий.Запланировано;
	НовЗап.Налогоплательщик = ДанныеСтроки.Кто;
	НовЗап.НарастающийИтог = ДанныеСтроки.НарастающийИтог;
	НовЗап.ПоследняяДатаДействия = ДанныеСтроки.Срок;
	
	Если РежимУплаты Тогда
		НовЗап.ИсточникОтчета = ДанныеСтроки.НазваниеОтчетаИлиНалога; // Полное название налога.
		НовЗап.ТипСообщения = Перечисления.СообщенияДляРегОтчетов.УплатаНалога;
		НовЗап.ФормаОтчета = "";
		НовЗап.Название = "";
	Иначе
		НовЗап.ИсточникОтчета = ДанныеСтроки.ИсточникОтчета;
		НовЗап.ТипСообщения = Перечисления.СообщенияДляРегОтчетов.СдачаОтчета;
		НовЗап.ФормаОтчета = ДанныеСтроки.ФормаОтчета;
		НовЗап.Название = ДанныеСтроки.НазваниеОтчетаИлиНалога; // Название отчета
	КонецЕсли;

	Если ДобавитьСобытие Тогда
		НовЗап.Записать();
	Иначе
		// В случае, если запись уже была ранее показана пользователю, тогда
		// измерение ДатаПоказа будет заполнено и удаление не происходит, поэтому
		// получим ДатаПоказа
		Табл = ОповещенияПоДанномуСобытияЕсть(ДанныеСтроки, РежимУплаты, Истина);
		Если Табл.Количество() > 0 Тогда
			НовЗап.ДатаПоказа = Табл[0].ДатаПоказа;
			НовЗап.Удалить();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ДобавитьУдалитьЗаписьВРегистрОповещения

// ОповещенияПоДанномуСобытияЕсть
//
Функция ОповещенияПоДанномуСобытияЕсть(ДанныеСтроки, РежимУплаты = Ложь, ВозвратитьТаблицу = Ложь)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", глЗначениеПеременной("глТекущийПользователь"));

	Запрос.УстановитьПараметр("ЗаПериодС", ДанныеСтроки.ЗаПериодС);
	Запрос.УстановитьПараметр("ЗаПериодПо", ДанныеСтроки.ЗаПериодПо);
	Запрос.УстановитьПараметр("Орг", ДляОрганизации);
	Запрос.УстановитьПараметр("Состояние", Перечисления.СостоянияСобытий.Запланировано);
	Запрос.УстановитьПараметр("НазваниеОтчетаИлиНалога", ДанныеСтроки.НазваниеОтчетаИлиНалога);
	Запрос.УстановитьПараметр("Периодичность", ДанныеСтроки.Периодичность);

	Если РежимУплаты Тогда
		Запрос.УстановитьПараметр("СрокУплаты", ДанныеСтроки.Срок);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаПериодС, ДатаПоказа
		| Из РегистрСведений.СобытияКалендаряБухгалтера
		| ГДЕ
		| Пользователь = &Пользователь
		| И ПоследняяДатаДействия = &СрокУплаты
		| И ЗаПериодС = &ЗаПериодС
		| И ЗаПериодПо = &ЗаПериодПо
		| И Организация = &Орг
		| И Состояние = &Состояние
		| И ТипСообщения = ЗНАЧЕНИЕ(Перечисление.СообщенияДляРегОтчетов.УплатаНалога)
		| И ИсточникОтчета = &НазваниеОтчетаИлиНалога
		| И Периодичность = &Периодичность";
	Иначе
		Запрос.УстановитьПараметр("ПоследняяДатаДействия", ДанныеСтроки.Срок);
		Запрос.УстановитьПараметр("ИсточникОтчета", ДанныеСтроки.ИсточникОтчета);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ЗаПериодС, ДатаПоказа
		| Из РегистрСведений.СобытияКалендаряБухгалтера
		| ГДЕ
		| Пользователь = &Пользователь
		| И ПоследняяДатаДействия = &ПоследняяДатаДействия
		| И ИсточникОтчета = &ИсточникОтчета
		| И ЗаПериодС = &ЗаПериодС
		| И ЗаПериодПо = &ЗаПериодПо
		| И Организация = &Орг
		| И Состояние = &Состояние
		| И ТипСообщения = ЗНАЧЕНИЕ(Перечисление.СообщенияДляРегОтчетов.СдачаОтчета)
		| И Периодичность = &Периодичность";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДляОрганизации) Тогда
		Запрос.Текст = Запрос.Текст +" " + "И Организация = &Орг";
	КонецЕсли;

	Если ВозвратитьТаблицу Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().Количество() > 0;
	КонецЕсли;

КонецФункции // ОповещенияПоДанномуСобытияЕсть

// Процедура оставляет видимой только текущую страницу
//
// Параметры:
//     Страницы - коллекция страниц панели управления
//     ИмяСтраницы - имя текущей (переключаемой) страницы
Процедура УстновитьВидимостьСтраницы(Страницы,ИмяСтраницы)
	
	Для каждого Страница из Страницы Цикл
		Если Страница.Имя = ИмяСтраницы Тогда
			Страница.Видимость = Истина;
		Иначе
			Страница.Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура меняет текущую страницу панели формы.
//
// Параметры
//  ИмяЗакладки - Строка, имя новой страницы
//
// Возвращаемое значение
//  НЕТ
Процедура УстановитьЗакладку(ИмяЗакладки)

	УстновитьВидимостьСтраницы(ЭлементыФормы.ПанельФормы.Страницы,ИмяЗакладки);
	УстановитьПометкуКнопок(ЭлементыФормы.КоманднаяПанель1.Кнопки, ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя);

	Если ИмяЗакладки = "Неделя" Тогда
		мОтображаласьИнформацияПоНеделям = Истина;
		ЭлементыФормы.КалендарьСобытий.РежимВыделения = РежимВыделенияДаты.Одиночный;
		// Проверим, если переключили квартал и ранее выбранная неделя уже не входит в рамки оторажения календаря.
		Если мВыделенныеДатыВКалендареНеделя.Количество() > 0 Тогда
			//ДатаНач = мВыделенныеДатыВКалендареНеделя[0].Дата;
			//ДатаКон = мВыделенныеДатыВКалендареНеделя[6].Дата;
			//Если НЕ ((ЭлементыФормы.КалендарьСобытий.НачалоПериодаОтображения <= ДатаНач) И (ЭлементыФормы.КалендарьСобытий.КонецПериодаОтображения >= ДатаКон)) Тогда
				// В случае, если интервал календаря не подходит под ранее выбранную неделю, то создадим новую неделю в таблице недель.
				мВыделенныеДатыВКалендареНеделя.Очистить();
				НачНед = НачалоНедели(мВыделенныеДатыВКалендареДень[0].Дата);
				Для Инд = 1 По 7 Цикл
					НовСтр = мВыделенныеДатыВКалендареНеделя.Добавить();
					НовСтр.Дата = НачНед + 86400 * (Инд - 1);
				КонецЦикла;
			//КонецЕсли;
		КонецЕсли;
		СформироватьЗаголовокФормы(ДатаКалендаряНаФорме);
		ОтобразитьЗаписиКНедели();
	ИначеЕсли ИмяЗакладки = "День" Тогда
		мОтображаласьИнформацияПоДням = Истина;
		Если (мВыделенныеДатыВКалендареДень[0].Дата >= ЭлементыФормы.КалендарьСобытий.НачалоПериодаОтображения)
		   И (мВыделенныеДатыВКалендареДень[0].Дата <= ЭлементыФормы.КалендарьСобытий.КонецПериодаОтображения) Тогда
			ДатаКалендаряНаФорме = мВыделенныеДатыВКалендареДень[0].Дата;
		Иначе
			мВыделенныеДатыВКалендареДень.Очистить();
			НовСтр = мВыделенныеДатыВКалендареДень.Добавить();
			НовСтр.Дата = ЭлементыФормы.КалендарьСобытий.НачалоПериодаОтображения;
			ДатаКалендаряНаФорме = НовСтр.Дата;
		КонецЕсли;

		// ЭлементыФормы.КалендарьСобытий.РежимВыделения = РежимВыделенияДаты.Множественный;
		// Обновим календарь, чтобы перерисовать дни.
		ЭлементыФормы.КалендарьСобытий.Обновить();
		СформироватьЗаголовокФормы(ДатаКалендаряНаФорме);

		ОтобразитьЗаписиКДате();
	КонецЕсли;

	ЭлементыФормы.ПанельФормы.ТекущаяСтраница = ЭлементыФормы.ПанельФормы.Страницы[ИмяЗакладки];

КонецПроцедуры

Процедура УстановитьПометкуКнопок(Кнопки, Имя)
	
	Для каждого Кнопка из Кнопки Цикл
		Если Кнопка.Имя = Имя Тогда
			Кнопка.Пометка = Истина;
		Иначе
			Кнопка.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ФОРМЫ //
/////////////////////////////////////////////////////////////////////////////////

Процедура ПриОткрытии()

	мМакет = ПолучитьМакет("ДанныеКалендаря");

	мКалендарнаяНеделя = мМакет.ПолучитьОбласть("КалендарнаяНеделя|Неделя");
	мОбластьКалендарьСтрока = мМакет.ПолучитьОбласть("КалендарьСтрока|Неделя");

	РабочаяДатаКалендарь = ОбщегоНазначения.ПолучитьРабочуюДату();

	мТаблПолеНеделя = ЭлементыФормы.ПолеТабличногоДокументаНеделя;
	мТаблПолеНеделя.ФиксацияСверху = мКалендарнаяНеделя.ВысотаТаблицы;

	ЦветСубботы            = Новый Цвет(153, 51,   0); // Темно-красный
	ЦветВоскресенья        = Новый Цвет(255,  0,   0); // Красный
	ЦветПраздничногоДня    = Новый Цвет(255,  0, 255); // Фиолетовый

	// Определим картинки
	мКартинкаПлатеж = БиблиотекаКартинок.УплатаНалога;
	мКартинкаСдачаОтчета = БиблиотекаКартинок.СдачаРегОтчета;
	мКартинкаНапоминание = БиблиотекаКартинок.НапоминаниеОтчетность;
	мКартинкаСнятьОповещение = БиблиотекаКартинок.СнятьНапоминание;
	мКартинкаОповестить = БиблиотекаКартинок.НапоминаниеРО;
	мКартинкаПерейтиКДате = БиблиотекаКартинок.Календарь;
	мКартинкаПустая = Новый Картинка();

	// Установим картинки для легенды.
	ЭлементыФормы.Надпись1.Картинка = мКартинкаСдачаОтчета;
	ЭлементыФормы.Надпись2.Картинка = мКартинкаПлатеж;
	ЭлементыФормы.Надпись3.Картинка = мКартинкаНапоминание;
	ЭлементыФормы.Надпись4.Картинка = мКартинкаОповестить;

	// формируем список элементов подменю, связанное с кнопкой <Печать>
	ЭлементМеню = ЭлементыФормы.КоманднаяПанельДействий.Кнопки.ПодменюПечати;

	ЭлементМеню.Кнопки.Добавить("ПечататьСразу", ТипКнопкиКоманднойПанели.Действие,
	                            "Печатать сразу", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	ЭлементМеню.Кнопки.Добавить("ПоказатьБланк", ТипКнопкиКоманднойПанели.Действие,
	                            "Показать бланк", Новый Действие("КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы"));

	// Восстановить
	СохраненныеЗначения = ВосстановитьЗначение("КалендарьБухгалтера");
	СоздатьТаблицуСроковДействияОтчетности();
	Если СохраненныеЗначения = Неопределено Тогда

		ДатаКалендаряНаФорме = мДатаНач;

		мСоответствиеКолонокНеделя = Новый Соответствие();
		мСоответствиеКолонокНеделя.Вставить("_1", 1.13);
		мСоответствиеКолонокНеделя.Вставить("_2", 6.4);
		мСоответствиеКолонокНеделя.Вставить("_3", 15);
		мСоответствиеКолонокНеделя.Вставить("_4", 15);
		мСоответствиеКолонокНеделя.Вставить("_5", 15);
		мСоответствиеКолонокНеделя.Вставить("_6", 15);
		мСоответствиеКолонокНеделя.Вставить("_7", 15);
		мСоответствиеКолонокНеделя.Вставить("_8", 10); // Суббота
		мСоответствиеКолонокНеделя.Вставить("_9", 11); // Воскресенье

		ИмяСтраницыКалендаря = "День";
		мОтображаласьИнформацияПоДням = Истина;
		мОтображаласьИнформацияпоНеделям = Ложь;

		// Инициализируем данные регламентированного календаря.
		СформироватьТаблицуРегламентированногоКалендаряТранзит();

		СформироватьТаблицуКалендара(Год(мДатаНач));
		// Создадим и заполнить первоначально таблицы для хранения дат для ДНЯ и для НЕДЕЛИ.
		мВыделенныеДатыВКалендареДень = Новый ТаблицаЗначений();
		мВыделенныеДатыВКалендареДень.Колонки.Добавить("Дата", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		НовЗап = мВыделенныеДатыВКалендареДень.Добавить();
		НовЗап.Дата = ДатаКалендаряНаФорме;

		мВыделенныеДатыВКалендареНеделя = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мВыделенныеДатыВКалендареДень);
		Для Инд = 1 По 7 Цикл
			НовСтр = мВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(ДатаКалендаряНаФорме) + 86400 * (Инд - 1);
		КонецЦикла;

		ЗаполнитьСписокПериодов();
		СформироватьТаблицуПраздничныхИВыходныхДней(Год(мДатаНач));

	Иначе

		ЗапоминатьВыбранныйПериод = ЭтаФорма.ВладелецФормы.мЗапоминатьВыбранныйПериод;
		мСоответствиеКолонокНеделя = СохраненныеЗначения.СоответствиеКолонокНеделя;
		ИмяСтраницыКалендаря = СохраненныеЗначения.ИмяСтраницыКалендаря;
		// Если флаг в настройках календаря установлен, тогда получим данные с прошлого запуска.
		мВыделенныеДатыВКалендареДень = СохраненныеЗначения.ВыделенныеДатыВКалендареДень;
		мВыделенныеДатыВКалендареНеделя = СохраненныеЗначения.ВыделенныеДатыВКалендареНеделя;

		Если ЗапоминатьВыбранныйПериод Тогда
			Год = СохраненныеЗначения.ГодКалендаря;
			мДатаНач = СохраненныеЗначения.ДатаОтображенияНач;
			мДатаКон = СохраненныеЗначения.ДатаОтображенияКон;

			ЗаполнитьСписокПериодов();
			ПолеВыбораСобытияЗаПериод = СохраненныеЗначения.ПолеВыбораСобытияЗаПериод;

		Иначе
			// Если флаг не установлен, тогда получим текущий период и текущую дату.
			мВыделенныеДатыВКалендареДень.Очистить();
			НовСтр = мВыделенныеДатыВКалендареДень.Добавить();
			НовСтр.Дата = РабочаяДатаКалендарь; // тек. дата
			мВыделенныеДатыВКалендареНеделя.Очистить();
			// Установим текущую неделю.
			Для Инд = 1 По 7 Цикл
				НовСтрНеделя = мВыделенныеДатыВКалендареНеделя.Добавить();
				НовСтрНеделя.Дата = НачалоНедели(РабочаяДатаКалендарь) + 86400 * (Инд - 1);
			КонецЦикла;

			Год = Год(РабочаяДатаКалендарь);

			мДатаНач = НачалоКвартала(РабочаяДатаКалендарь);
			мДатаКон = КонецКвартала(РабочаяДатаКалендарь);

			ЗаполнитьСписокПериодов();
			ПолеВыбораСобытияЗаПериод = Месяц(КонецКвартала(РабочаяДатаКалендарь));
		КонецЕсли;

		// Инициализируем данные регламентированного календаря.
		СформироватьТаблицуРегламентированногоКалендаряТранзит();

		СформироватьТаблицуКалендара(Год);

		СформироватьТаблицуПраздничныхИВыходныхДней(Год);

		Если ИмяСтраницыКалендаря = "День" Тогда
			// Обновим календарь, чтобы перерисовать дни.
			ДатаКалендаряНаФорме = мВыделенныеДатыВКалендареДень[0].Дата;
			мОтображаласьИнформацияПоДням = Истина;
			мОтображаласьИнформацияпоНеделям = Ложь;
		ИначеЕсли ИмяСтраницыКалендаря = "Неделя" Тогда
			мОтображаласьИнформацияПоДням = Ложь;
			мОтображаласьИнформацияпоНеделям = Истина;
		КонецЕсли;
	КонецЕсли;

	УстановитьИнтервалКалендаря();
	УстановитьЗакладку(ИмяСтраницыКалендаря);
	//ДатаНаФормеК = ДатаКалендаряНаФорме;
	//ПриИзмененииПериодаВГоду(ЭлементыФормы.ПолеВыбораСобытияЗаПериод);
	//ДатаКалендаряНаФорме = ДатаНаФормеК;
	//КалендарьСобытийПриИзменении(ЭлементыФормы.КалендарьСобытий);
	Если ИмяСтраницыКалендаря = "Неделя" Тогда
		РазмерТабличногоПоляТочно();
	КонецЕсли;

	Год = Год(мДатаНач);

	// Не устанавливаем никакого отбора по ИФНС, т.к. можно выбрать организацию на форме и дублирование функционала ЦУО.
	ОтборКодИФНС = Ложь;
	ОтборПериод = Истина;

КонецПроцедуры

Процедура КалендарьСобытийПриВыводеПериода(Элемент, ОформлениеПериода)
	Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
	ФонВыделения = ЭлементыФормы.КалендарьСобытий.ЦветФонаВыделения;
	ЦветВыделения = ЭлементыФормы.КалендарьСобытий.ЦветТекстаВыделения;
	ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
	Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
		Строка_ОформленияДатыДата = Строка_ОформленияДаты.Дата;

		ДеньНеделиДата = ДеньНедели(Строка_ОформленияДатыДата);
		СтруктураПоискаСдачаОтчетов = Новый Структура;
		СтруктураПоискаСдачаОтчетов.Вставить("ПоследняяДатаПредставленияОтчета", Строка_ОформленияДатыДата);
		СтруктураПоискаСдачаОтчетов.Вставить("Статус", Ложь);
		СтрокаТаблицыРегистра = мНакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(СтруктураПоискаСдачаОтчетов);
		СтрокаТаблицыСрокУпл = мНакопительнаяТаблицаСроковУплат.Найти(Строка_ОформленияДатыДата, "СрокУплаты");
		Если мПроизводственныйКалендарьЗаполнен Тогда
			СтрокаТаблицыПраздников = мТаблицаПраздничныхДней.Найти(Строка_ОформленияДатыДата, "ДатаКалендаря");
		КонецЕсли;

		Строка_ОформленияДаты.ЦветФона = Новый Цвет(255, 255, 255);
		Строка_ОформленияДаты.ЦветТекста = Новый Цвет(0, 0, 0);

		Если (СтрокаТаблицыРегистра.Количество() <> 0) Или (СтрокаТаблицыСрокУпл <> Неопределено) Тогда
			Строка_ОформленияДаты.Шрифт = Новый Шрифт(,,Истина);
		КонецЕсли;

		Если НЕ мПроизводственныйКалендарьЗаполнен Тогда
			// Если календарь не заполнен, то смотрим на дни недели, если 6 и 7, то признаем день выходным.
			Если ДеньНеделиДата = 6 Тогда
				Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
			ИначеЕсли ДеньНеделиДата = 7 Тогда
				Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
			КонецЕсли;
		КонецЕсли;

		Если мПроизводственныйКалендарьЗаполнен Тогда
			Если СтрокаТаблицыПраздников <> Неопределено Тогда
				Если СтрокаТаблицыПраздников.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
				ИначеЕсли СтрокаТаблицыПраздников.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
				ИначеЕсли СтрокаТаблицыПраздников.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если ТекСтраница = "День" Тогда
			Если мВыделенныеДатыВКалендареДень.Найти(Строка_ОформленияДатыДата, "Дата") <> Неопределено Тогда
				Строка_ОформленияДаты.ЦветФона = Новый Цвет(0, 0, 128);
				Строка_ОформленияДаты.ЦветТекста = Новый Цвет(255, 255, 255);;
			КонецЕсли;
		ИначеЕсли ТекСтраница = "Неделя" Тогда
			Если мВыделенныеДатыВКалендареНеделя.Найти(Строка_ОформленияДатыДата, "Дата") <> Неопределено Тогда
				Строка_ОформленияДаты.ЦветФона = Новый Цвет(0, 0, 128);
				Строка_ОформленияДаты.ЦветТекста = Новый Цвет(255, 255, 255);;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// ПриИзмененииПериодаВГоду
//
Процедура ПриИзмененииПериодаВГоду(Элемент, АктивнаяДатаКалендаря = Неопределено)
	МесяцИзСписка = Элемент.Значение;
	Если (МесяцИзСписка = 3) Или (МесяцИзСписка = 6) Или (МесяцИзСписка = 9) Или (МесяцИзСписка = 12) Тогда
		мДатаНач = НачалоКвартала(Дата(Год(мДатаНач), МесяцИзСписка, 1));
		мДатаКон = КонецКвартала(мДатаНач);
	Иначе
		мДатаНач = НачалоМесяца(Дата(Год(мДатаНач), МесяцИзСписка, 1));
		мДатаКон = КонецМесяца(мДатаНач);
	КонецЕсли;

	Если АктивнаяДатаКалендаря = Неопределено Тогда
		ДатаКалендаряНаФорме = мДатаНач;
	Иначе
		ДатаКалендаряНаФорме = АктивнаяДатаКалендаря;
	КонецЕсли;

	УстановитьИнтервалКалендаря();
	ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;

	Если ТекСтраница = "Неделя" Тогда

		мВыделенныеДатыВКалендареНеделя.Очистить();

		Для Инд = 1 По 7 Цикл
			НовСтр = мВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(ДатаКалендаряНаФорме) + 86400 * (Инд - 1);
		КонецЦикла;

		ДатаКалендаряНаФорме = НовСтр.Дата;
		ОтобразитьЗаписиКНедели();

	ИначеЕсли ТекСтраница = "День" Тогда

		мВыделенныеДатыВКалендареДень.Очистить();
		НовЗап = мВыделенныеДатыВКалендареДень.Добавить();
		НовЗап.Дата = ДатаКалендаряНаФорме;

		ОтобразитьЗаписиКДате();

	КонецЕсли;

	СформироватьЗаголовокФормы(мДатаНач);
	//ЭлементыФормы.КалендарьСобытий.Обновить();

КонецПроцедуры // ПриИзмененииПериодаВГоду

Процедура ПолеВыбораСобытияЗаПериодПриИзменении(Элемент)
	ПриИзмененииПериодаВГоду(Элемент);
	//ПриИзмененииПериодаВГоду(Элемент);
КонецПроцедуры

Процедура КоманднаяПанель1Обновить(Кнопка)

	ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
	// Инициализируем данные регламентированного календаря.
	СформироватьТаблицуРегламентированногоКалендаряТранзит();

	СформироватьТаблицуКалендара(Год(мДатаНач));
	// Обновим данные из регламентированного производственного календаря.
	СформироватьТаблицуПраздниковРеглКалендаря(Год(мДатаНач));
	ЭлементыФормы.КалендарьСобытий.Обновить();
	Если ТекСтраница = "День" Тогда
		ОтобразитьЗаписиКДате();
	ИначеЕсли ТекСтраница = "Неделя" Тогда
		ОтобразитьЗаписиКНедели();
	КонецЕсли;
КонецПроцедуры

Процедура ГодПриИзменении(Элемент)
	Элемент.Доступность = Ложь;
	мДатаНач = Дата(Год, Месяц(мДатаНач), День(мДатаНач));
	мДатаКон = Дата(Год, Месяц(мДатаКон), День(мДатаКон));
	ЗаполнитьСписокПериодов();
	СформироватьТаблицуКалендара(Год(мДатаНач));
	СформироватьТаблицуПраздничныхИВыходныхДней(Год(мДатаНач));
	УстановитьИнтервалКалендаря();

	// Инициализируем данные регламентированного календаря.
	СформироватьТаблицуРегламентированногоКалендаряТранзит();

	ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ТекСтраница = "Неделя" Тогда

		НачДата = мВыделенныеДатыВКалендареНеделя[0].Дата;
		НачДата = Дата(Год, Месяц(НачДата), День(НачДата));
		мВыделенныеДатыВКалендареНеделя.Очистить();

		Для Инд = 1 По 7 Цикл
			НовСтр = мВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(НачДата) + 86400 * (Инд - 1);
		КонецЦикла;

		ДатаКалендаряНаФорме = НовСтр.Дата;
		ОтобразитьЗаписиКНедели();

	ИначеЕсли ТекСтраница = "День" Тогда

		мВыделенныеДатыВКалендареДень.Очистить();
		НовЗап = мВыделенныеДатыВКалендареДень.Добавить();
		ДатаКалендаряНаФорме = мДатаНач;
		НовЗап.Дата = ДатаКалендаряНаФорме;
		ОтобразитьЗаписиКДате();
		ЭлементыФормы.КалендарьСобытий.Обновить();

	КонецЕсли;

	СформироватьЗаголовокФормы(ДатаКалендаряНаФорме);

	Элемент.Доступность = Истина;
КонецПроцедуры

Процедура КалендарьСобытийПриИзменении(Элемент)
	ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ТекСтраница = "Неделя" Тогда

		мВыделенныеДатыВКалендареНеделя.Очистить();

		Для Инд = 1 По 7 Цикл
			НовСтр = мВыделенныеДатыВКалендареНеделя.Добавить();
			НовСтр.Дата = НачалоНедели(ДатаКалендаряНаФорме) + 86400 * (Инд - 1);
		КонецЦикла;
		ДатаКалендаряНаФорме = НовСтр.Дата;
		СформироватьЗаголовокФормы(ДатаКалендаряНаФорме);
		ОтобразитьЗаписиКНедели();
	ИначеЕсли ТекСтраница = "День" Тогда

		мВыделенныеДатыВКалендареДень.Очистить();
		Для каждого Дат Из Элемент.ВыделенныеДаты Цикл
			НовЗап = мВыделенныеДатыВКалендареДень.Добавить();
			НовЗап.Дата = Дат;
		КонецЦикла;

		ОтобразитьЗаписиКДате();
	КонецЕсли;

КонецПроцедуры

Процедура ДляОрганизацииПриИзменении(Элемент)
	ОтобразитьЗаписиКДате();
КонецПроцедуры

Процедура ПриЗакрытии()
	СохраняютсяДанные = Новый Структура();

	Если мОтображаласьИнформацияпоНеделям Тогда
		Для Инд = 1 По 9 Цикл
			Координата = "C" + Инд;
			Ширина = мТаблПолеНеделя.Область(Координата).ШиринаКолонки;
			мСоответствиеКолонокНеделя.Вставить("_" + Инд, ?(Инд = 1, 1.13, Ширина));
		КонецЦикла;
	КонецЕсли;
	СохраняютсяДанные.Вставить("СоответствиеКолонокНеделя", мСоответствиеКолонокНеделя);

	СохраняютсяДанные.Вставить("ИмяСтраницыКалендаря", ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя);
	СохраняютсяДанные.Вставить("ВыделенныеДатыВКалендареДень", мВыделенныеДатыВКалендареДень);
	СохраняютсяДанные.Вставить("ВыделенныеДатыВКалендареНеделя", мВыделенныеДатыВКалендареНеделя);
	СохраняютсяДанные.Вставить("ГодКалендаря", Год);
	СохраняютсяДанные.Вставить("ПолеВыбораСобытияЗаПериод", ПолеВыбораСобытияЗаПериод);

	СохраняютсяДанные.Вставить("ДатаОтображенияНач", мДатаНач);
	СохраняютсяДанные.Вставить("ДатаОтображенияКон", мДатаКон);

	СохранитьЗначение("КалендарьБухгалтера", СохраняютсяДанные);
КонецПроцедуры

// РазмерТабличногоПоляТочно
//
Процедура РазмерТабличногоПоляТочно()
	// Особенность. Табличное поле не до конца "прикреплено" к правой границе панели.
	Если Элементыформы.ПанельФормы.Ширина - мТаблПолеНеделя.Ширина <> 12 Тогда
		мТаблПолеНеделя.Ширина = Элементыформы.ПанельФормы.Ширина - 12;
	КонецЕсли;
	Если Элементыформы.ПанельФормы.Высота - мТаблПолеНеделя.Высота <> 12 Тогда
		мТаблПолеНеделя.Высота = Элементыформы.ПанельФормы.Высота - 12;
	КонецЕсли;
КонецПроцедуры // РазмерТабличногоПоляТочно

// ОтобразитьЗаписиКНедели
//
Процедура ОтобразитьЗаписиКНедели()
	мТаблПолеНеделя.Очистить();
	мКалендарнаяНеделя.Области.ОбластьЗаголовокНеделя.Расшифровка = Новый Структура("Статус", "РазмерЗаголовка");
	мКалендарнаяНеделя.Области.ОбластьЗаголовокНеделя2.Расшифровка = Новый Структура("Статус", "РазмерЗаголовка");
	мКалендарнаяНеделя.Области.ОбластьЗаголовокНеделяДень.Расшифровка = Новый Структура("Статус", "ПерейтиНаДень");

	Для Инд = 1 По 7 Цикл
		ПарДата = мВыделенныеДатыВКалендареНеделя[Инд - 1].Дата;
		мКалендарнаяНеделя.Параметры["Дата" + Инд] = ПарДата;
		мКалендарнаяНеделя.Параметры["День" + Инд] = ОпределитьДеньНедели(ДеньНедели(ПарДата));
		Если (НЕ мПроизводственныйКалендарьЗаполнен) И ((Инд = 6) Или (Инд = 7)) Тогда
			мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветУзора = Новый Цвет(255, 0, 0);
			мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона =  Новый Цвет(234, 229, 216);
			мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).Узор = ТипУзораТабличногоДокумента.Узор8;
		ИначеЕсли (НЕ мПроизводственныйКалендарьЗаполнен) И (НЕ ((Инд = 6) Или (Инд = 7))) Тогда
			мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона = Новый Цвет(234, 229, 216);
			мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).Узор = ТипУзораТабличногоДокумента.Сплошной;
		КонецЕсли;

		Если мПроизводственныйКалендарьЗаполнен Тогда
			Если мТаблицаПраздничныхДней.Найти(ПарДата, "ДатаКалендаря") <> Неопределено Тогда
				мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветУзора = Новый Цвет(255, 0, 0);
				мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона =  Новый Цвет(234, 229, 216);
				мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).Узор = ТипУзораТабличногоДокумента.Узор8;
			Иначе
				мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).ЦветФона = Новый Цвет(234, 229, 216);
				мКалендарнаяНеделя.Область("R1C" + Строка(Инд + 2)).Узор = ТипУзораТабличногоДокумента.Сплошной;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	мТаблПолеНеделя.Вывести(мКалендарнаяНеделя);
	ТаблицаСобытийНедели = ПолучитьТаблицуПредставленияОтчетностиИУплатНеделя();
	ТаблицаСобытийНедели.Сортировать("Срок, Статус");
	//ТаблицаСобытийНедели.Сортировать("Срок");
	ТаблицаСобытийНедели.Колонки.Добавить("Всег", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(1));
	ТаблицаСобытийНедели.Колонки.Добавить("НомерСтрокиВывода", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2));
	НомерСтрокиВывода = 0;
	Дат = Неопределено;
	ОбщСчетчик = 0;
	Для каждого Зап Из ТаблицаСобытийНедели Цикл
		Зап.Всег = 1;
		ОбщСчетчик = ОбщСчетчик + 1;

		Если ОбщСчетчик = 1 Тогда
			НомерСтрокиВывода = НомерСтрокиВывода + 1;
			Зап.НомерСтрокиВывода = НомерСтрокиВывода;
			Дат = Зап.Срок;
			Продолжить;
		КонецЕсли;

		Если Зап.Срок = Дат Тогда
			НомерСтрокиВывода = НомерСтрокиВывода + 1;
			Зап.НомерСтрокиВывода = НомерСтрокиВывода;
		Иначе
			НомерСтрокиВывода = 1;
			Зап.НомерСтрокиВывода = НомерСтрокиВывода;
			Дат = Зап.Срок;
		КонецЕсли;

	КонецЦикла;

	ТаблицаСобытийНедели2 = ТаблицаСобытийНедели.Скопировать();
	ТаблицаСобытийНедели2.Свернуть("НомерСтрокиВывода");
	ВсегоСтрок = ТаблицаСобытийНедели2.Количество();
	
	НомерПП = 0;

	ВыделитьСтроку = Истина;
	Для Инд1 = 1 По ВсегоСтрок Цикл
		НомерПП = Инд1;
		// Выберем строки, которые должны выводится под номером НомерПП
		Строки = ТаблицаСобытийНедели.НайтиСтроки(Новый Структура("НомерСтрокиВывода", НомерПП));
		// Выведем их.
		мОбластьКалендарьСтрока.Параметры.НомерПП = НомерПП;

		// Очистим остальные параметры.
		Для Инд = 1 По 7 Цикл
			мОбластьКалендарьСтрока.Параметры["СобытиеДата" + Строка(Инд)] = "";
			мОбластьКалендарьСтрока.Параметры["Кто" + Строка(Инд)] = "";

			// Очистим картинки
			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_1"].Картинка = мКартинкаПустая;
			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_2"].Картинка = мКартинкаПустая;

			Если ВыделитьСтроку Тогда
				ЦветФонаСтроки = Новый Цвет(248, 249, 255);
			Иначе
				ЦветФонаСтроки = Новый Цвет(255, 255, 255);
			КонецЕсли;

			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_1"].ЦветФона = ЦветФонаСтроки;
			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Строка(Инд) + "_2"].ЦветФона = ЦветФонаСтроки;
			мОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + Строка(Инд)].Расшифровка = Неопределено;

			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Инд + "_1"].Расшифровка = Неопределено;
			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + Инд + "_2"].Расшифровка = Неопределено;

		КонецЦикла;

		Для каждого СтрокаДанных Из Строки Цикл
			НомерДняВНеделиЧ = ДеньНедели(СтрокаДанных.Срок);
			НомерДняВНедели = Строка(НомерДняВНеделиЧ);
			// ЗаполняемыеДни.Добавить(НомерДняВНеделиЧ);
			НазваниеОтчетаИлиНалога = СтрокаДанных.НазваниеОтчетаИлиНалога;
			Если (СтрокаДанных.Статус = "1") Или (СтрокаДанных.Статус = "3") Тогда
			// Если действие Отчет или напоминание на отчет, тогда выведем в скобка кол-во сохраненных отчетов.
				ДокументыОтчета = РегламентированнаяОтчетность.ДокументыСУчетомКритериевОтбораКалендарь(СтрокаДанных.ИсточникОтчета, СтрокаДанных.ЗаПериодС, СтрокаДанных.ЗаПериодПо, ДляОрганизации, "", СтрокаДанных.Периодичность);
				Если ДокументыОтчета <> 0 Тогда
					НазваниеОтчетаИлиНалога = "(" + ДокументыОтчета + ") " + НазваниеОтчетаИлиНалога;
				КонецЕсли;
			КонецЕсли;

			мОбластьКалендарьСтрока.Параметры["СобытиеДата" + НомерДняВНедели] = НазваниеОтчетаИлиНалога;
			мОбластьКалендарьСтрока.Параметры["Кто" + НомерДняВНедели] = СтрокаДанных.Кто;

			СтруктураСтроки = Новый Структура();
			Сч = 0;
			Для каждого Кол Из ТаблицаСобытийНедели.Колонки Цикл
				СтруктураСтроки.Вставить(Кол.Имя, СтрокаДанных[Сч]);
				Сч = Сч + 1;
			КонецЦикла;
			СтруктураСтроки.Вставить("НомерСтрокиВТабличномПоле", Инд1);
			СтруктураСтроки.Вставить("НомерДня", НомерДняВНеделиЧ);

			мОбластьКалендарьСтрока.Области["СтрочкаРасшифровкиДень" + НомерДняВНеделиЧ].Расшифровка = СтруктураСтроки;

			Если ОповещенияПоДанномуСобытияЕсть(СтруктураСтроки, СтрокаДанных.Статус = "2") Тогда
				ИмяОбласти2 = "НеделяРисДата" + НомерДняВНедели + "_2";
				мОбластьКалендарьСтрока.Рисунки[ИмяОбласти2].Картинка = мКартинкаОповестить;
			КонецЕсли;

			Если СтрокаДанных.Статус = "1" Тогда
				// Сдача отчета
				СтатусЗаписи = мКартинкаСдачаОтчета;
			ИначеЕсли СтрокаДанных.Статус = "2" Тогда
				СтатусЗаписи = мКартинкаПлатеж;
			КонецЕсли;
			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + НомерДняВНедели + "_1"].Картинка = СтатусЗаписи;

			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + НомерДняВНедели + "_1"].Расшифровка = СтруктураСтроки;
			мОбластьКалендарьСтрока.Рисунки["НеделяРисДата" + НомерДняВНедели + "_2"].Расшифровка = СтруктураСтроки;

		КонецЦикла;

		УстановитьЦветаОбластей(мОбластьКалендарьСтрока, ВыделитьСтроку, "СтрочкаЦветаНеделя");
		Для Нед = 1 По 7 Цикл
			ИмяОбласти1 = "НеделяРисДата" + Нед + "_1";
			ИмяОбласти2 = "НеделяРисДата" + Нед + "_2";
			мОбластьКалендарьСтрока.Рисунки[ИмяОбласти1].Имя = "Rowin1_" + Строка(Инд1) + "C" + Нед;
			мОбластьКалендарьСтрока.Рисунки[ИмяОбласти2].Имя = "Rowin2_" + Строка(Инд1) + "C" + Нед;
		КонецЦикла;

		мТаблПолеНеделя.Вывести(мОбластьКалендарьСтрока);

		Для Нед = 1 По 7 Цикл
			ИмяОбласти1 = "НеделяРисДата" + Нед + "_1";
			ИмяОбласти2 = "НеделяРисДата" + Нед + "_2";
			мОбластьКалендарьСтрока.Рисунки["Rowin1_" + Строка(Инд1) + "C" + Нед].Имя = ИмяОбласти1;
			мОбластьКалендарьСтрока.Рисунки["Rowin2_" + Строка(Инд1) + "C" + Нед].Имя = ИмяОбласти2;
		КонецЦикла;

	КонецЦикла;

	УстановитьШиринуКолонок(мТаблПолеНеделя);

	ДатаКалендаряНаФорме = ПарДата;
	ЭлементыФормы.КалендарьСобытий.Обновить();

КонецПроцедуры // ОтобразитьЗаписиКНедели

Процедура КоманднаяПанель1Неделя(Кнопка)
	УстановитьЗакладку(Кнопка.Имя);
	РазмерТабличногоПоляТочно();
КонецПроцедуры

Процедура КоманднаяПанель1День(Кнопка)
	УстановитьЗакладку(Кнопка.Имя);
	//УстановитьЗакладку(Кнопка.Имя);
КонецПроцедуры

Процедура ПолеТабличногоДокументаНеделяОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Статус = Расшифровка.Статус;

	РежимПлатежа = Статус = "2";

	// Если выбраны конкретные ячейки строки.
	ИмяТекОбласти = мТаблПолеНеделя.ТекущаяОбласть.Имя;
	Если Сред(ИмяТекОбласти, 6, 1) = "1" Тогда
		// Первая картинка по счету с лев.
		ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус);
		Возврат;
	ИначеЕсли Сред(ИмяТекОбласти, 6, 1) = "2" Тогда
		УбратьСобытие = Ложь;
		// Втарая картинка по счету с лев.
		Если ОповещенияПоДанномуСобытияЕсть(Расшифровка, РежимПлатежа) Тогда
			УбратьСобытие = Истина;
		КонецЕсли;
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, НЕ УбратьСобытие, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
		Возврат;

	КонецЕсли;

	Если Статус = "РазмерЗаголовка" Тогда

		// По данному статусу вызывается форма ввода заголов.
		Если мТаблПолеНеделя.ТекущаяОбласть.Имя = "ОбластьЗаголовокНеделя2" Тогда
			ТекКолонка = мТаблПолеНеделя.Область("C2");
		Иначе
			НомерКолонки = Сред(мТаблПолеНеделя.ТекущаяОбласть.Имя, 4, 1);
			ТекКолонка = мТаблПолеНеделя.Область("C" + НомерКолонки);
		КонецЕсли;
		ШиринаКолонки = ТекКолонка.ШиринаКолонки;
		Если ВвестиЧисло(ШиринаКолонки, "Введите ширину колонки", 5, 2) Тогда
			ТекКолонка.ШиринаКолонки = ШиринаКолонки;
			Если мТаблПолеНеделя.ТекущаяОбласть.Имя = "ОбластьЗаголовокНеделя2" Тогда
				мСоответствиеКолонокНеделя["_2"] = ШиринаКолонки;
			Иначе
				мСоответствиеКолонокНеделя["_" + НомерКолонки] = ШиринаКолонки;
			КонецЕсли;
		КонецЕсли;
		Возврат;

	ИначеЕсли Статус = "ПерейтиНаДень" Тогда
		мВыделенныеДатыВКалендареДень.Очистить();
		ДатаОбл = мТаблПолеНеделя.ТекущаяОбласть.Текст;
		ДатаОбласть = Дата(Сред(ДатаОбл, 7, 4) + Сред(ДатаОбл, 4, 2) + Сред(ДатаОбл, 1, 2));
		НовСтр = мВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;
		УстановитьЗакладку("День");
		Возврат;
	КонецЕсли;

	СписокДействий = Новый СписокЗначений;
	Если Статус = "2" Тогда
		СписокДействий.Добавить(1, "Открыть платежное поручение",, мКартинкаПлатеж);
	ИначеЕсли Статус = "1" Тогда
		СписокДействий.Добавить(1, "Открыть отчет",, мКартинкаСдачаОтчета);
	КонецЕсли;

	// Получим номе строки в табличном поле, для снятия или установки принака события.
	НомерСтрокиВТабличномПоле = Расшифровка.НомерСтрокиВТабличномПоле;

	Если НЕ ОповещенияПоДанномуСобытияЕсть(Расшифровка, РежимПлатежа) Тогда
		СписокДействий.Добавить(2, "Напомнить о событии",,мКартинкаОповестить);
	Иначе
		СписокДействий.Добавить(3, "Отменить напоминание",, мКартинкаСнятьОповещение);
	КонецЕсли;

	НомДень = Расшифровка.НомерДня;
	СписокДействий.Добавить(4, "Перейти к дате " + Формат(мВыделенныеДатыВКалендареНеделя[НомДень - 1].Дата, "ДФ=дд.ММ.гггг"),, мКартинкаПерейтиКДате); // Перейти к дате календаря

	СписокЭлемент = ВыбратьИзМеню(СписокДействий);
	Если СписокЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если СписокЭлемент.Значение = 2 Тогда
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, Истина, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
		Возврат;
	ИначеЕсли СписокЭлемент.Значение = 3 Тогда
		УстановитьУдалитьДействиеВТаблДок(Расшифровка, Ложь, РежимПлатежа, Расшифровка.НомерСтрокиВТабличномПоле, Истина);
		Возврат;
	ИначеЕсли СписокЭлемент.Значение = 1 Тогда
		ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус);
		Возврат;
	ИначеЕсли СписокЭлемент.Значение = 4 Тогда

		мВыделенныеДатыВКалендареДень.Очистить();
		ДатаОбласть = мВыделенныеДатыВКалендареНеделя[НомДень - 1].Дата;

		НовСтр = мВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;
		УстановитьЗакладку("День");
		Возврат;

	КонецЕсли;

КонецПроцедуры

// ПРОЦЕДУРЫ КАЛЕНДАРЯ

// ПолучитьСледующуюРабочуюДатуДляРегОтчетности1
// Функция предназначена для определения рабочей даты, которая следует начиная с нализируемой даты.
// В случае, если анализируемая дата является рабочим днем, возвращаться будет анализируемая дата.
//
// Параметры:
//  АнализируемаяДата - Дата. Дата, начиная с которой необходимо производить анализ.
//  ВыводитьСообщения - режим вывода сообщение, по умолчанию всегда включено (Истина).
//
// Возвращаемое значение:
//  Дата. Следующая рабочая дата после анализируемой даты, если анализируемая дата является рабочим
//                 днем, тогда возвратится анализируемая дата. Если регламентированный календарь не
//                 поддерживается, возвратится Неопределено.
//
Функция ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Знач АнализируемаяДата, ВыводитьСообщения = Истина) Экспорт
	АнализируемаяДата = НачалоДня(АнализируемаяДата);
	Срез = СформироватьЗапросКалендарьРО1(АнализируемаяДата);

	Если Срез = Неопределено Тогда
		// В регистре нет сведений по этой дате. Календарь не заполнен.
		Если ВыводитьСообщения Тогда
			Сообщить("Не заполнен производственный календарь.", СтатусСообщения.Внимание);
		КонецЕсли;
		// Пытаемся анализировать праздники.
		СписокПраздников = РегламентированнаяОтчетность.ПолучитьСписокПраздниковРФ(Год(АнализируемаяДата));

		АнализироватьДату = Истина;
		Пока АнализироватьДату Цикл

			ДеньМесяцЗаписываемаяДата = "" + Формат(АнализируемаяДата, "ДФ = 'ММ'") + Формат(АнализируемаяДата, "ДФ = 'дд'");
			ПраздничныйДень = СписокПраздников.НайтиПоЗначению(ДеньМесяцЗаписываемаяДата);

			Если (ПраздничныйДень <> Неопределено) Или (ДеньНедели(АнализируемаяДата) > 5) Тогда
				АнализируемаяДата = АнализируемаяДата + 86400;
			Иначе
				АнализироватьДату = Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат АнализируемаяДата;

	Иначе
		// СрезТаблица = Срез.Выгрузить();
		Если (Срез.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий)
		 Или (Срез.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный) Тогда
			// Входящая дата является рабочем днем.
			Возврат АнализируемаяДата;
		Иначе
			АнализируемаяДата = АнализируемаяДата + 86400;
			Инд = 0;
			Пока (СформироватьЗапросКалендарьРО1(АнализируемаяДата, Истина) = Неопределено) И (Инд < 20) Цикл
				АнализируемаяДата = АнализируемаяДата + 86400;
				Инд = Инд + 1;
			КонецЦикла;
			Возврат ?(Инд = 20, Неопределено, АнализируемаяДата);
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСледующуюРабочуюДатуДляРегОтчетности1

// СформироватьЗапросКалендарьРО1
//
// Параметры:
//  ДатаКалендаря - Дата, свойства которой необходимо узнать.
//  ТолькоРабочие  - запрос будет сформирован только с целью получения ТОЛЬКО рабочих дней ( в т.ч. и предпризничных)
//
// Возвращаемое значение:
//  Запрос.Выполнить()
//
Функция СформироватьЗапросКалендарьРО1(Знач ДатаКалендаря, ТолькоРабочие = Ложь)

	Если ТолькоРабочие Тогда
		ТаблицаДанных = мТаблРегламентированногоКалендаряТолькоРабочие;
	Иначе
		ТаблицаДанных = мТаблРегламентированногоКалендаряНеТолькоРабочие;
	КонецЕсли;
	НайденнаяСтрока = ТаблицаДанных.Найти(ДатаКалендаря, "ДатаКалендаря");
	Возврат НайденнаяСтрока;

КонецФункции // СформироватьЗапросКалендарьРО1

// СформироватьТаблицуРегламентированногоКалендаряТранзит
//
Процедура СформироватьТаблицуРегламентированногоКалендаряТранзит()

	Запрос = Новый Запрос();
	СписокРабочихДней = Новый СписокЗначений;
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);

	Запрос.УстановитьПараметр("СписокРабочихДней", СписокРабочихДней);
	Запрос.УстановитьПараметр("ВходящаяДата", Год(мДатаНач));

	ТекстЗапроса =
	"	ВЫБРАТЬ * 
	|	ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь
	|	ГДЕ
	|	Год = &ВходящаяДата";

	Запрос.Текст = ТекстЗапроса;
	мТаблРегламентированногоКалендаряНеТолькоРабочие = Запрос.Выполнить().Выгрузить();

	ТекстЗапроса = ТекстЗапроса + "
	|	И ВидДня В (&СписокРабочихДней)";
	Запрос.Текст = ТекстЗапроса;
	мТаблРегламентированногоКалендаряТолькоРабочие = Запрос.Выполнить().Выгрузить();

КонецПроцедуры // СформироватьТаблицуРегламентированногоКалендаряТранзит

// ВызватьПлатежноеПоручениеНаУплатуНалога
//
Процедура ВызватьПлатежноеПоручениеНаУплатуНалога()
	
	Если Метаданные.Документы.Найти("ПлатежноеПоручениеИсходящее") <> Неопределено Тогда
		ПлатИсх = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
	Иначе
		ПлатИсх = Документы.ПлатежноеПоручение.СоздатьДокумент();
	КонецЕсли;
	
	ПлатИсх.Организация = ДляОрганизации;
	
	Если Метаданные.Перечисления.Найти("ВидыОперацийППИсходящее") <> Неопределено И РегламентированнаяОтчетность.СвойствоОпределено(ПлатИсх, "ВидОперации") Тогда
		ПлатИсх.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
	КонецЕсли;

	ФормаПер = ПлатИсх.ПолучитьФорму();
	ФормаПер.Открыть();
	
КонецПроцедуры // ВызватьПлатежноеПоручениеНаУплатуНалога

// ПодготовитьДанныеДляПросмотраИлиПечати
//
Функция ПодготовитьДанныеДляПросмотраИлиПечати()
	ТаблДанных = Новый ТабличныйДокумент;
	ТаблДанных.АвтоМасштаб = Истина;
	ТаблДанных.ОтображатьЗаголовки = Ложь;
	ТаблДанных.ОтображатьСетку = Ложь;
	ТаблДанных.ЧерноБелыйПросмотр  = Ложь;
	ТаблДанных.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	ОбластьЗаголовокТаблицы = мМакет.ПолучитьОбласть("ЗаголовокТаблицы|ЗаголовокДанных");
	ОбластьСтрокаТаблицы = мМакет.ПолучитьОбласть("СтрокаТаблицы|ЗаголовокДанных");

	ТаблДанных.Вывести(ОбластьЗаголовокТаблицы);
	Для каждого ДанныеСтроки Из ТаблицаСобытийКалендаря Цикл
		Если ДанныеСтроки.Статус = "3" Тогда
			Статус = "Напоминание о сдаче отчета";
		ИначеЕсли ДанныеСтроки.Статус = "2" Тогда
			Статус = "Уплата налога";
		ИначеЕсли ДанныеСтроки.Статус = "1" Тогда
			Статус = "Сдача отчета";
		КонецЕсли;
		ОбластьСтрокаТаблицы.Параметры.Статус = Статус;
		ОбластьСтрокаТаблицы.Параметры.Срок = ДанныеСтроки.Срок;
		Периодичность = ДанныеСтроки.Периодичность;
		ФормаЗаполняетсяНарастающимИтогом = ДанныеСтроки.НарастающийИтог;

		Если (Периодичность = "Квартальная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
			СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
		ИначеЕсли (Периодичность = "Месячная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
			Если Месяц(ДанныеСтроки.ЗаПериодПо) = 1 Тогда
				СтрПериодОтчета = Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтрПериодОтчета = "Январь - " + Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
			СтроковоеПредставлениеПериода = СтрПериодОтчета;
		Иначе
			СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
		КонецЕсли;

		СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
		ПериодичностьЗаПериод = Периодичность + ", " + Символы.ПС + СтроковоеПредставлениеПериода;

		Если Статус = "2" Тогда
			ОбластьСтрокаТаблицы.Параметры.ПериодичностьЗаПериод = СтроковоеПредставлениеПериода;
		Иначе
			ОбластьСтрокаТаблицы.Параметры.ПериодичностьЗаПериод = ПериодичностьЗаПериод;
		КонецЕсли;
		ОбластьСтрокаТаблицы.Параметры.НазваниеОтчетаИлиНалога = ДанныеСтроки.НазваниеОтчетаИлиНалога;
		ОбластьСтрокаТаблицы.Параметры.Кто = ДанныеСтроки.Кто;

		ТаблДанных.Вывести(ОбластьСтрокаТаблицы);

	КонецЦикла;
	Возврат ТаблДанных;

КонецФункции // ПодготовитьДанныеДляПросмотраИлиПечати

// Печать
//
Процедура Печать(ВидПечати)

	ТекСтраница = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ТекСтраница = "День" Тогда
		ТаблДок = ПодготовитьДанныеДляПросмотраИлиПечати();
	ИначеЕсли ТекСтраница = "Неделя" Тогда
		ТаблДок = мТаблПолеНеделя;
		ТаблДок.ОтображатьЗаголовки = Ложь;
		ТаблДок.ОтображатьСетку     = Ложь;
		ТаблДок.ЧерноБелыйПросмотр  = Ложь;
		ТаблДок.ЧерноБелаяПечать    = Ложь;
		ТаблДок.Автомасштаб         = Истина;
		ТаблДок.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;
	КонецЕсли;

	Если ВидПечати = "ПоказатьБланк" Тогда

		Если ТекСтраница = "Неделя" Тогда
			Т = Новый ТабличныйДокумент;
			Т.Вывести(ТаблДок.ПолучитьОбласть(1,, ТаблДок.ВысотаТаблицы, ));

			Т.ОтображатьЗаголовки = Ложь;
			Т.ОтображатьСетку     = Ложь;
			Т.ЧерноБелыйПросмотр  = Ложь;
			Т.ЧерноБелаяПечать    = Ложь;
			Т.Автомасштаб         = Истина;
			Т.ОриентацияСтраницы  = ОриентацияСтраницы.Ландшафт;

			Т.Показать(Заголовок);
		Иначе
			ТаблДок.Показать(Заголовок);
		КонецЕсли;

	ИначеЕсли ВидПечати = "ПечататьСразу" Тогда
		ТаблДок.Напечатать();
	КонецЕсли;

КонецПроцедуры // Печать

// Процедура вызывается при выборе пункта подменю "Печать" командной панели
// действий формы. 
// Отрабатывает выбор печатной формы.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы(Кнопка)

	Если Кнопка <> Неопределено Тогда 
		Печать(Кнопка.Имя);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельДействийДействиеВыбратьПечатнуюФормы()

// ТаблицаСобытийКалендаряПриВыводеСтроки
//
Процедура ТаблицаСобытийКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Статус = ДанныеСтроки.Статус;
	ФормаЗаполняетсяНарастающимИтогом = ДанныеСтроки.НарастающийИтог;
	Периодичность = ДанныеСтроки.Периодичность;
	// Определим статус записи.
	Если Статус = "1" Тогда
		// Сдача отчета
		СтатусЗаписи = мКартинкаСдачаОтчета;
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	ИначеЕсли Статус = "2" Тогда
		СтатусЗаписи = мКартинкаПлатеж;
	ИначеЕсли Статус = "3" Тогда
		СтатусЗаписи = мКартинкаНапоминание;
	КонецЕсли;

	Если (Периодичность = "Квартальная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
		СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
	ИначеЕсли (Периодичность = "Месячная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
		Если Месяц(ДанныеСтроки.ЗаПериодПо) = 1 Тогда
			СтрПериодОтчета = Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			СтрПериодОтчета = "Январь - " + Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
		КонецЕсли;
		СтроковоеПредставлениеПериода = СтрПериодОтчета;
	Иначе
		СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
	КонецЕсли;

	СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
	ПериодичностьЗаПериод = Периодичность + ", " + Символы.ПС + СтроковоеПредставлениеПериода;

	// Вывод картинки статуса к отчету или платежу
	ОформлениеСтроки.Ячейки.НазваниеОтчетаИлиНалога.УстановитьКартинку(СтатусЗаписи);

	Если Статус = "2" Тогда
		ОформлениеСтроки.Ячейки.Период.Значение = СтроковоеПредставлениеПериода;
	Иначе
		// Для отчетов и напоминаний к ним установим кол-во уже имеющихся отчетов в ИБ.
		ОформлениеСтроки.Ячейки.Период.Значение = ПериодичностьЗаПериод;

		ДокументыОтчета = РегламентированнаяОтчетность.ДокументыСУчетомКритериевОтбораКалендарь(ДанныеСтроки.ИсточникОтчета, ДанныеСтроки.ЗаПериодС, ДанныеСтроки.ЗаПериодПо, ДляОрганизации, "", ДанныеСтроки.Периодичность);
		Если ДокументыОтчета <> 0 Тогда
			ОформлениеСтроки.Ячейки.НазваниеОтчетаИлиНалога.Текст = "(" + ДокументыОтчета + ") " + ОформлениеСтроки.Ячейки.НазваниеОтчетаИлиНалога.Текст;
		КонецЕсли;

	КонецЕсли;

	Если ОповещенияПоДанномуСобытияЕсть(ДанныеСтроки, Статус = "2") Тогда
		ОформлениеСтроки.Ячейки.КартинкаОповещение.УстановитьКартинку(БиблиотекаКартинок.НапоминаниеРО);
	КонецЕсли;

КонецПроцедуры // ТаблицаСобытийКалендаряПриВыводеСтроки

// ТаблицаСобытийКалендаряВыбор
//
Процедура ТаблицаСобытийКалендаряВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	НазваниеКолонки = Колонка.Имя;
	Если НазваниеКолонки = "КартинкаОповещение" Тогда
		РежимПлатежа = ВыбраннаяСтрока.Статус = "2";
		ОповещенияПоДанномуСобытиюЕсть = ОповещенияПоДанномуСобытияЕсть(ВыбраннаяСтрока, РежимПлатежа);
		Если ОповещенияПоДанномуСобытиюЕсть Тогда
			УстановитьУдалитьДействиеВТаблДок(ВыбраннаяСтрока, Ложь, РежимПлатежа, Неопределено);
		Иначе
			// Установим
			УстановитьУдалитьДействиеВТаблДок(ВыбраннаяСтрока, Истина, РежимПлатежа, Неопределено);
		КонецЕсли;
		// ЭлементыФормы.ТаблицаСобытийКалендаря.ОбновитьСтроки(ВыбраннаяСтрока);
		ПересобратьКонтекстноеМенюДень();
		Возврат;
	ИначеЕсли (НазваниеКолонки = "Срок") И (ВыбраннаяСтрока.Срок <> ДатаКалендаряНаФорме) Тогда
		ПерейтиКДатеКалендаря(ВыбраннаяСтрока);
	Иначе
		//ОткрытьПлатПоручениеИлиОтчет(ВыбраннаяСтрока, ВыбраннаяСтрока.Статус);

		СписокДействий = Новый СписокЗначений;
		Статус = ВыбраннаяСтрока.Статус;
		РежимПлатежа = Статус = "2";
		Если Статус = "2" Тогда
			СписокДействий.Добавить(1, "Открыть платежное поручение",, мКартинкаПлатеж);
		ИначеЕсли (Статус = "1") Или (Статус = "3") Тогда
			СписокДействий.Добавить(1, "Открыть отчет",, мКартинкаСдачаОтчета);
		КонецЕсли;

		Если НЕ ОповещенияПоДанномуСобытияЕсть(ВыбраннаяСтрока, РежимПлатежа) Тогда
			СписокДействий.Добавить(2, "Напомнить о событии",,мКартинкаОповестить);
		Иначе
			СписокДействий.Добавить(3, "Отменить напоминание",, мКартинкаСнятьОповещение);
		КонецЕсли;

		// Если дата текущая, то пункт меню "Перейти к дате" не формируем.
		Если ВыбраннаяСтрока.Срок <> ДатаКалендаряНаФорме Тогда
			СписокДействий.Добавить(4, "Перейти к дате " + Формат(ВыбраннаяСтрока.Срок, "ДФ=дд.ММ.гггг"),, мКартинкаПерейтиКДате); // Перейти к дате календаря
		КонецЕсли;

		СписокЭлемент = ВыбратьИзМеню(СписокДействий);

		Если СписокЭлемент = Неопределено Тогда
			Возврат;
		КонецЕсли;

		Если СписокЭлемент.Значение = 2 Тогда
			УстановитьУдалитьДействиеВТаблДок(ВыбраннаяСтрока, Истина, РежимПлатежа, Неопределено);
			ПересобратьКонтекстноеМенюДень();
			Возврат;
		ИначеЕсли СписокЭлемент.Значение = 3 Тогда
			УстановитьУдалитьДействиеВТаблДок(ВыбраннаяСтрока, Ложь, РежимПлатежа, Неопределено);
			ПересобратьКонтекстноеМенюДень();
			Возврат;
		ИначеЕсли СписокЭлемент.Значение = 1 Тогда
			ОткрытьПлатПоручениеИлиОтчет(ВыбраннаяСтрока, ВыбраннаяСтрока.Статус);
			Возврат;
		ИначеЕсли СписокЭлемент.Значение = 4 Тогда
			ПерейтиКДатеКалендаря(ВыбраннаяСтрока);
			Возврат;
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры // ТаблицаСобытийКалендаряВыбор

// ПересобратьКонтекстноеМенюДень
// Процедура пересобирает состав меню. Вызывается при активизации строки и при изменении признака о напоминании.
//
// Параметров нет.
//
Процедура ПересобратьКонтекстноеМенюДень()
	Данные = ЭлементыФормы.ТаблицаСобытийКалендаря.ТекущиеДанные;
	ОповещенияПоДанномуСобытиюЕсть = ОповещенияПоДанномуСобытияЕсть(Данные, Данные.Статус = "2");
	Если Данные.Статус = "2" Тогда
		ТекстОткрыть = "Открыть платежное поручение";
		Картинка = мКартинкаПлатеж;
		Подсказка = "Открыть бланк исходящего платежного поручения";
	ИначеЕсли (Данные.Статус = "1") Или (Данные.Статус = "3") Тогда
		ТекстОткрыть = "Открыть отчет";
		Картинка = мКартинкаСдачаОтчета;
		Подсказка = "Открыть форму регламентированного отчета";
	КонецЕсли;

	ЭлементыФормы.ПанельВспомогательная.Кнопки.Открыть.Текст = ТекстОткрыть;
	ЭлементыФормы.ПанельВспомогательная.Кнопки.Открыть.Картинка = Картинка;
	ЭлементыФормы.ПанельВспомогательная.Кнопки.Открыть.Подсказка = Подсказка;

	Если ОповещенияПоДанномуСобытиюЕсть Тогда
		ТекстОповещения = "Отменить напоминание";
		Картинка = мКартинкаСнятьОповещение;
		Подсказка = "Отменить напоминание о событии";
	Иначе
		ТекстОповещения = "Напомнить о событии";
		Картинка = мКартинкаОповестить;
		Подсказка = "Напомнить о событии в будущем";
	КонецЕсли;
	ЭлементыФормы.ПанельВспомогательная.Кнопки.Оповещение.Текст = ТекстОповещения;
	ЭлементыФормы.ПанельВспомогательная.Кнопки.Оповещение.Картинка = Картинка;
	ЭлементыФормы.ПанельВспомогательная.Кнопки.Оповещение.Подсказка = Подсказка;

	Если Данные.Срок <> ДатаКалендаряНаФорме Тогда
		ЭлементыФормы.ПанельВспомогательная.Кнопки.ПерейтиКДате.Текст = "Перейти к дате " + Формат(Данные.Срок, "ДФ=дд.ММ.гггг");
		ЭлементыФормы.ПанельВспомогательная.Кнопки.ПерейтиКДате.Картинка = мКартинкаПерейтиКДате;
		ЭлементыФормы.ПанельВспомогательная.Кнопки.ПерейтиКДате.Доступность = Истина;
	Иначе
		// Сделаем не доступным пункт меню.
		ЭлементыФормы.ПанельВспомогательная.Кнопки.ПерейтиКДате.Текст = "Перейти к дате";
		ЭлементыФормы.ПанельВспомогательная.Кнопки.ПерейтиКДате.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // ПересобратьКонтекстноеМенюДень

// ТаблицаСобытийКалендаряПриАктивизацииСтроки
//
Процедура ТаблицаСобытийКалендаряПриАктивизацииСтроки(Элемент)
	ПересобратьКонтекстноеМенюДень();
КонецПроцедуры //ТаблицаСобытийКалендаряПриАктивизацииСтроки

Процедура ПанельВспомогательнаяОткрыть(Кнопка)
	Данные = ЭлементыФормы.ТаблицаСобытийКалендаря.ТекущиеДанные;
	Если Данные <> Неопределено Тогда
		ОткрытьПлатПоручениеИлиОтчет(Данные, Данные.Статус);
	КонецЕсли;
КонецПроцедуры

Процедура ПанельВспомогательнаяОповещение(Кнопка)
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаСобытийКалендаря.ТекущиеДанные;
	Если ВыбраннаяСтрока = Неопределено Тогда
		// Не выбрана активная строка.
		Возврат;
	КонецЕсли;
	РежимПлатежа = ВыбраннаяСтрока.Статус = "2";
	ОповещенияПоДанномуСобытиюЕсть = ОповещенияПоДанномуСобытияЕсть(ВыбраннаяСтрока, РежимПлатежа);
	Если ОповещенияПоДанномуСобытиюЕсть Тогда
		УстановитьУдалитьДействиеВТаблДок(ВыбраннаяСтрока, Ложь, РежимПлатежа, Неопределено);
	Иначе
		// Установим
		УстановитьУдалитьДействиеВТаблДок(ВыбраннаяСтрока, Истина, РежимПлатежа, Неопределено);
	КонецЕсли;
	ЭлементыФормы.ТаблицаСобытийКалендаря.ОбновитьСтроки(ВыбраннаяСтрока);
	ПересобратьКонтекстноеМенюДень();
КонецПроцедуры

// ПерейтиКДатеКалендаря
// Процедура осуществляет переход к дате календаря. Переход возможен из контекстного меню или из табличного поля, при двойном щелчке мышкой
// по дате.
//
// Параметров нет.
//
Процедура ПерейтиКДатеКалендаря(ВыбраннаяСтрока)
	ДатаОбласть = ВыбраннаяСтрока.Срок;
	// Если дата строки не равна дате календаря, то перейдем на указанную дату.
	Если ДатаОбласть <> ДатаКалендаряНаФорме Тогда
		// Проверим на период, который установлен на календаре, в случае, если выбранная новая дата относится к не показываемому периоду.

		мВыделенныеДатыВКалендареДень.Очистить();
		НовСтр = мВыделенныеДатыВКалендареДень.Добавить();
		НовСтр.Дата = ДатаОбласть;

		НачалоПериодаОтображения = ЭлементыФормы.КалендарьСобытий.НачалоПериодаОтображения;
		КонецПериодаОтображения = ЭлементыФормы.КалендарьСобытий.КонецПериодаОтображения;
		// Выбранная дата не лежит в диапозоне календаря.
		Если НЕ ((ДатаОбласть >= НачалоПериодаОтображения) И (ДатаОбласть <= КонецПериодаОтображения)) Тогда
			// Определим, что выбрано сейчас, КВАРТАЛ или Месяц.
			ВыбранКвартал = Истина;
			МесяцПерехода = Месяц(ДатаОбласть);
			Если (Месяц(КонецПериодаОтображения) = Месяц(НачалоПериодаОтображения))
			 И (МесяцПерехода <> 3 И МесяцПерехода <> 6 И МесяцПерехода <> 9 И МесяцПерехода <> 12) Тогда
				ВыбранКвартал = Ложь;
			КонецЕсли;
			// Установим новый интервал календаря.
			НовыйИнтервалКалендаряС = ?(ВыбранКвартал, НачалоКвартала(ДатаОбласть), НачалоМесяца(ДатаОбласть));
			НовыйИнтервалКалендаряПо = ?(ВыбранКвартал, КонецКвартала(ДатаОбласть), КонецМесяца(ДатаОбласть));

			ПолеВыбораСобытияЗаПериод = Месяц(НовыйИнтервалКалендаряПо);
			СтруктураПериода = Новый Структура("Значение", ПолеВыбораСобытияЗаПериод);
			ПриИзмененииПериодаВГоду(СтруктураПериода, ДатаОбласть);
			//ПриИзмененииПериодаВГоду(СтруктураПериода, ДатаОбласть);
		КонецЕсли;

		УстановитьЗакладку("День");
	КонецЕсли;

КонецПроцедуры // ПерейтиКДатеКалендаря

Процедура ПанельВспомогательнаяПерейтиКДате(Кнопка)
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаСобытийКалендаря.ТекущиеДанные;
	Если ВыбраннаяСтрока = Неопределено Тогда
		// Не выбрана активная строка.
		Возврат;
	КонецЕсли;
	ПерейтиКДатеКалендаря(ВыбраннаяСтрока);
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	ИмяСтраницы = ЭлементыФормы.ПанельФормы.ТекущаяСтраница.Имя;
	Если ИмяСобытия = "Обновить признаки оповещения" Тогда
		Если ИмяСтраницы = "День" Тогда
			ЭлементыФормы.ТаблицаСобытийКалендаря.ОбновитьСтроки();
		Иначе
			ОтобразитьЗаписиКНедели();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Строка254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
мСтрока100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
ТипДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

мТаблицаГрафикСдачи = Новый ТаблицаЗначений;
мТаблицаГрафикСдачи.Колонки.Добавить("Объект", мСтрока100);
мТаблицаГрафикСдачи.Колонки.Добавить("ПоследняяДатаПредставленияОтчета", ТипДата,,12);
мТаблицаГрафикСдачи.Колонки.Добавить("Периодичность", мСтрока100);
мТаблицаГрафикСдачи.Колонки.Добавить("ФормаОтчета", мСтрока100);
мТаблицаГрафикСдачи.Колонки.Добавить("НазваниеОтчетнойФормы", Строка254);
мТаблицаГрафикСдачи.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
мТаблицаГрафикСдачи.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По
мТаблицаГрафикСдачи.Колонки.Добавить("КтоСдаетОтчет", Строка254);
мТаблицаГрафикСдачи.Колонки.Добавить("ФормаЗаполняетсяНарастающимИтогом", ОписаниеТиповБулево);
мТаблицаГрафикСдачи.Колонки.Добавить("Статус", ОписаниеТиповБулево); // Может быть 1 - "Сдача отчета", 2 - "Напоминание" 3 - ОтчетГотов
мТаблицаГрафикСдачи.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата,,12); // Поле даты. Срок представления отчета, для строки напоминания.

