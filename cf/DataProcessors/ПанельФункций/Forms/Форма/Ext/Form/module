////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ДЛЯ МОНИТОРА БУХГАЛТЕРА
Перем мКоличествоДнейАнализа;

Перем мКартинкаСдачаОтчета;
Перем мКартинкаПлатеж;
Перем мКартинкаНапоминание;

Перем мМакет;
Перем мНакопительнаяТаблицаПредставленияОтчетов;
Перем мНакопительнаяТаблицаСроковУплат;

// Переменные для хранения регламентированного календаря, в целях оптимизации, без обращения через запрос к календарю.
Перем мТаблРегламентированногоКалендаряНеТолькоРабочие;
Перем мТаблРегламентированногоКалендаряТолькоРабочие;

Перем мВыбраннаяФормаКалендаря Экспорт;
Перем мПериодичностьКалендарь Экспорт;
Перем мДатаКонцаПериодаОтчетаКалендарь Экспорт;
Перем Организация Экспорт;
Перем ОтборКодИФНС Экспорт;
Перем ОтборПериод Экспорт;

// Эталонная таблица графика сдачи отчетности.
Перем мТаблицаГрафикСдачи;

Перем мТаблицаСроковОтчетность;
Перем ИтогПоСчетамТекст;
Перем ИтогПоДенежнымСчетамТекст;
Перем ИтогПоСчетамВалТекст;
Перем ИтогПоСчетамВСлучаеОтсутствияВалОстатков;

Перем мОбщийФорматДат;

Перем мЦветРасчетныхСчетов;

Перем мТекущаяСтрока;

// Флаг необходимости пересобирать данные по монитору. Может быть Неопределено, Истина, Ложь.
Перем мПриПереходеПоЗакладкамМониторОбновить;

// Флаг необходимости пересобирать оперативные данные. Может быть Неопределено, Истина, Ложь.
Перем мПриПереходеПоЗакладкамОперативныеДанныеОбновить;

// Отчеты для руководителя:
// Соответствие id и адресов картинок с образцами отчетов 
Перем АдресаОбразцовОтчетов;

Перем ВидимостьПодсказки;

// Начало работы.
Перем Чеклист;
Перем ТекущийЭлементЧеклиста;
Перем ТаблицаЭлементовЧеклиста;

// Позволяет просматривать веб-страницы в обработке Обозреватель  
//
// Параметры
//  АдресСтраницы  – Строка – адрес просматриваемой страницы
//
// Если передается пустая строка, то в обработке Обозреватель 
// просматривается веб-страница конфигурации
// 
Процедура ПоказатьВебСтраницу(АдресСтраницы, ЗаголовокОкна = Неопределено) Экспорт 
	
	Попытка
	
		Обозреватель = Обработки.Обозреватель.Создать();
		
		Форма = Обозреватель.ПолучитьФорму();
		
		Если ЗаголовокОкна <> Неопределено Тогда
			Форма.Заголовок = ЗаголовокОкна;
		КонецЕсли;
		
		Форма.СтартоваяСтраница = АдресСтраницы;
		
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОНИТОРА БУХГАЛТЕРА

// ПеренестиСвойстваДиаграмм
//
Процедура ПеренестиСвойстваДиаграмм(НоваяДиаграмма, ИсходнаяДиаграмма, ОтобразитьЛегенду = Неопределено)
	НоваяДиаграмма.Обновление = Ложь;
	НоваяДиаграмма.ФорматЗначенийВПодписях = ИсходнаяДиаграмма.ФорматЗначенийВПодписях;
	НоваяДиаграмма.ОбластьЗаголовка.Текст = ИсходнаяДиаграмма.ОбластьЗаголовка.Текст;
	НоваяДиаграмма.ОбластьЗаголовка.ПрозрачныйФон = ИсходнаяДиаграмма.ОбластьЗаголовка.ПрозрачныйФон;
	НоваяДиаграмма.ОбластьЗаголовка.ЦветФона = ИсходнаяДиаграмма.ОбластьЗаголовка.ЦветФона;
	НоваяДиаграмма.ОбластьЗаголовка.ЦветТекста = ИсходнаяДиаграмма.ОбластьЗаголовка.ЦветТекста;
	НоваяДиаграмма.ОбластьЗаголовка.ЦветРамки = ИсходнаяДиаграмма.ОбластьЗаголовка.ЦветРамки;
	НоваяДиаграмма.ОбластьЗаголовка.Шрифт = ИсходнаяДиаграмма.ОбластьЗаголовка.Шрифт;
	НоваяДиаграмма.ОбластьЗаголовка.Рамка = ИсходнаяДиаграмма.ОбластьЗаголовка.Рамка;

	НоваяДиаграмма.ОбластьЛегенды.ПрозрачныйФон = ИсходнаяДиаграмма.ОбластьЛегенды.ПрозрачныйФон;
	НоваяДиаграмма.ОбластьЛегенды.ЦветФона = ИсходнаяДиаграмма.ОбластьЛегенды.ЦветФона;
	НоваяДиаграмма.ОбластьЛегенды.ЦветТекста = ИсходнаяДиаграмма.ОбластьЛегенды.ЦветТекста;
	НоваяДиаграмма.ОбластьЛегенды.ЦветРамки = ИсходнаяДиаграмма.ОбластьЛегенды.ЦветРамки;
	НоваяДиаграмма.ОбластьЛегенды.Шрифт = ИсходнаяДиаграмма.ОбластьЛегенды.Шрифт;
	НоваяДиаграмма.ОбластьЛегенды.Рамка = ИсходнаяДиаграмма.ОбластьЛегенды.Рамка;

	НоваяДиаграмма.ОбластьПостроения.ПрозрачныйФон = ИсходнаяДиаграмма.ОбластьПостроения.ПрозрачныйФон;
	НоваяДиаграмма.ОбластьПостроения.ЦветФона = ИсходнаяДиаграмма.ОбластьПостроения.ЦветФона;
	НоваяДиаграмма.ОбластьПостроения.ЦветТекста = ИсходнаяДиаграмма.ОбластьПостроения.ЦветТекста;
	НоваяДиаграмма.ОбластьПостроения.ЦветРамки = ИсходнаяДиаграмма.ОбластьПостроения.ЦветРамки;
	НоваяДиаграмма.ОбластьПостроения.Шрифт = ИсходнаяДиаграмма.ОбластьПостроения.Шрифт;
	НоваяДиаграмма.ОбластьПостроения.Рамка = ИсходнаяДиаграмма.ОбластьПостроения.Рамка;
	НоваяДиаграмма.ОбластьПостроения.ОтображатьШкалу = ИсходнаяДиаграмма.ОбластьПостроения.ОтображатьШкалу;
	НоваяДиаграмма.ОбластьПостроения.ЦветШкалы = ИсходнаяДиаграмма.ОбластьПостроения.ЦветШкалы;
	НоваяДиаграмма.ОбластьПостроения.ЛинииШкалы = ИсходнаяДиаграмма.ОбластьПостроения.ЛинииШкалы;
	НоваяДиаграмма.ОбластьПостроения.ВертикальныеМетки = ИсходнаяДиаграмма.ОбластьПостроения.ВертикальныеМетки;
	НоваяДиаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = ИсходнаяДиаграмма.ОбластьПостроения.ОтображатьТаблицуДанных;
	НоваяДиаграмма.ОбластьПостроения.ВертикальныеЛинииВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.ВертикальныеЛинииВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.ГоризонтальныеЛинииВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.ГоризонтальныеЛинииВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.КлючиВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.КлючиВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.ВыравниваниеВТаблицеДанных = ИсходнаяДиаграмма.ОбластьПостроения.ВыравниваниеВТаблицеДанных;
	НоваяДиаграмма.ОбластьПостроения.ФорматШкалыЗначений = ИсходнаяДиаграмма.ОбластьПостроения.ФорматШкалыЗначений;

	НоваяДиаграмма.КоличествоТочек = ИсходнаяДиаграмма.КоличествоТочек;
	НоваяДиаграмма.КоличествоСерий = ИсходнаяДиаграмма.КоличествоСерий;
	НоваяДиаграмма.ПрозрачныйФон = ИсходнаяДиаграмма.ПрозрачныйФон;
	НоваяДиаграмма.Окантовка = ИсходнаяДиаграмма.Окантовка;
	НоваяДиаграмма.Свет = ИсходнаяДиаграмма.Свет;
	НоваяДиаграмма.ОтображатьЗаголовок = ИсходнаяДиаграмма.ОтображатьЗаголовок;
	Если ОтобразитьЛегенду = Неопределено Тогда
		НоваяДиаграмма.ОтображатьЛегенду = ИсходнаяДиаграмма.ОтображатьЛегенду;
	Иначе
		НоваяДиаграмма.ОтображатьЛегенду = ОтобразитьЛегенду;
	КонецЕсли;
	НоваяДиаграмма.ЦветФона = ИсходнаяДиаграмма.ЦветФона;
	НоваяДиаграмма.Рамка = ИсходнаяДиаграмма.Рамка;
	НоваяДиаграмма.ЦветРамки = ИсходнаяДиаграмма.ЦветРамки;
	НоваяДиаграмма.ТипДиаграммы = ИсходнаяДиаграмма.ТипДиаграммы;
	НоваяДиаграмма.ВидПодписей = ИсходнаяДиаграмма.ВидПодписей;
	НоваяДиаграмма.Ориентация = ИсходнаяДиаграмма.Ориентация;
	НоваяДиаграмма.МаксимумСерий = ИсходнаяДиаграмма.МаксимумСерий;
	НоваяДиаграмма.МаксимумСерийКоличество = ИсходнаяДиаграмма.МаксимумСерийКоличество;
	НоваяДиаграмма.МаксимумСерийПроцент = ИсходнаяДиаграмма.МаксимумСерийПроцент;
	НоваяДиаграмма.РежимПробелов = ИсходнаяДиаграмма.РежимПробелов;
	НоваяДиаграмма.БазовоеЗначение = ИсходнаяДиаграмма.БазовоеЗначение;
	НоваяДиаграмма.Градиент = ИсходнаяДиаграмма.Градиент;
	НоваяДиаграмма.АвтоРаздвижениеСерий = ИсходнаяДиаграмма.АвтоРаздвижениеСерий;
	НоваяДиаграмма.ПропускатьБазовоеЗначение = ИсходнаяДиаграмма.ПропускатьБазовоеЗначение;

	Для ии = 0 По ИсходнаяДиаграмма.Серии.Количество() - 1 Цикл
		НоваяСерия = НоваяДиаграмма.Серии[ии];
		ИсходнаяСерия = ИсходнаяДиаграмма.Серии[ии];

		НоваяСерия.Текст = ИсходнаяСерия.Текст;
		НоваяСерия.Цвет = ИсходнаяСерия.Цвет;
		НоваяСерия.Линия = ИсходнаяСерия.Линия;
		НоваяСерия.Маркер = ИсходнаяСерия.Маркер;
		НоваяСерия.Раздвигать = ИсходнаяСерия.Раздвигать;
		НоваяСерия.Индикатор = ИсходнаяСерия.Индикатор;

		Для жж = 0 По ИсходнаяДиаграмма.Точки.Количество() - 1 Цикл
			Если ии = 0 Тогда
				НоваяТочка = НоваяДиаграмма.Точки[жж];
				ИсходнаяТочка = ИсходнаяДиаграмма.Точки[жж];

				НоваяТочка.Текст = ИсходнаяТочка.Текст;
				НоваяТочка.Значение = ИсходнаяТочка.Значение;
			КонецЕсли;

			НоваяДиаграмма.УстановитьЗначение(жж, ии, ИсходнаяДиаграмма.ПолучитьЗначение(жж, ии).Значение);
		КонецЦикла;
	КонецЦикла;

	НоваяДиаграмма.Автотранспонирование = Истина;
	НоваяДиаграмма.Обновление = Истина;

КонецПроцедуры // ПеренестиСвойстваДиаграмм

// Печать
//
Процедура Печать(ПросмотрБланка = Истина)

	ТекТабличноеПоле = Новый ТабличныйДокумент;

	ТекТабличноеПоле.АвтоМасштаб = Истина;
	ТекТабличноеПоле.ОтображатьСетку = Ложь;
	ТекТабличноеПоле.ОтображатьЗаголовки = Ложь;
	ТекТабличноеПоле.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;

	// Колонки размер 2.
	ТекТабличноеПоле.Область("T").ШиринаКолонки = 2;
	ПерваяЧистаяСтрока = ТекТабличноеПоле.Область("R1");
	// Заголовочный текст.
	ТекТабличноеПоле.Область("R1C1").Текст = ЭлементыФормы.Надпись79.Заголовок + Символы.ПС + "(тыс. руб.)";
	ШрифтЗаголовков = Новый Шрифт(, 10, Истина);
	ТекТабличноеПоле.Область("R1C1").Шрифт = ШрифтЗаголовков;
	// Вставим новую диаграмму.
	Рисунок = ТекТабличноеПоле.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	// Поместим.
	Рисунок.Расположить(ТекТабличноеПоле.Область("R3C1:R10C40"));
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	НоваяДиаграмма = Рисунок.Объект;
	ИсходнаяДиаграмма = ЭлементыФормы.ДиаграммаРС;
	// Перенесем св-ва диаграммы.
	ПеренестиСвойстваДиаграмм(НоваяДиаграмма, ИсходнаяДиаграмма);

	// Выводим таблицу по счетам.
	Макет  = ПолучитьМакет("Макет");
	ОбластьЗаголовокТабл = Макет.ПолучитьОбласть("ШапкаСчета|ШиринаТабл");

	ТекТабличноеПоле.Вывести(ОбластьЗаголовокТабл);

	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаСчета|ШиринаТабл");
	КоличествоСтрокПоСчетам = 0;
	ЗаголовокШапки = 2;
	Для каждого Строчка Из ТабличноеПолеДопИнфКДиаграмме1 Цикл
		КоличествоСтрокПоСчетам = КоличествоСтрокПоСчетам + 1;
		Если (Строчка.Субконто1 = Неопределено) Или (Строчка.Субконто1 = Null) Тогда
			ОбластьСтрока.Параметры.НаимБанк = Строчка.КолонкаСтрокИтогов;
			ОбластьСтрока.Область("R1").Шрифт = Новый Шрифт(,,Истина);
		Иначе
			Если (Строчка.Субконто1.Наименование = Неопределено) Или (Строчка.Субконто1.Наименование = Null) Тогда
				ОбластьСтрока.Параметры.НаимБанк = "Данных нет";
			Иначе
				ОбластьСтрока.Параметры.НаимБанк = Строчка.Субконто1.Наименование;
			КонецЕсли;
			ОбластьСтрока.Область("R1").Шрифт = Новый Шрифт(,,Ложь);
		КонецЕсли;

		ОбластьСтрока.Параметры.Заполнить(Строчка);
		ТекТабличноеПоле.Вывести(ОбластьСтрока);
	КонецЦикла;
	Координата = "R11C1:R" + Формат(КоличествоСтрокПоСчетам + ЗаголовокШапки + 10, "ЧГ=0") + "C45";
	// Переносим.
	ТекТабличноеПоле.ВставитьОбласть(
	   ТекТабличноеПоле.Область(Координата),
	   ТекТабличноеПоле.Область("R2C42:R" + Формат(КоличествоСтрокПоСчетам + ЗаголовокШапки + 1, "ЧГ=0") + "C86"));
	ТекТабличноеПоле.Область(Координата).Очистить(Истина, Истина, Истина);

	// Переносим диаграмму по дебиторам/кредиторам.

	// Вставим новую диаграмму.
	Рисунок = ТекТабличноеПоле.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	// Поместим.
	ОтступОтВерхнейТаблРС = 3;
	ШиринаГрафикаДтКт = 15;

	Если КоличествоСтрокПоСчетам + ЗаголовокШапки <= 10 Тогда
		СтрокаНачалаВыводаДиаграммыПоДтКт = "16";
	Иначе
		СтрокаНачалаВыводаДиаграммыПоДтКт = Формат(КоличествоСтрокПоСчетам + ЗаголовокШапки + ОтступОтВерхнейТаблРС + 3);
	КонецЕсли;
	
	Если КоличествоСтрокПоСчетам + ЗаголовокШапки + 1 <= 11 Тогда
		НомерСтрокиЗаг = "13";
	Иначе
		// Если счетов много, то сделаем отступ 2.
		НомерСтрокиЗаг = Формат(КоличествоСтрокПоСчетам + ЗаголовокШапки + 1 + 2, "ЧГ=0");
	КонецЕсли;

	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C1:R"+ НомерСтрокиЗаг + "C25").Объединить();
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C1").Текст = "Кредиторская и дебиторская задолженность" + Символы.ПС + "(тыс. руб.)";
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C42").Объединить();
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C42").Текст = "Кредиторы";
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C65").Текст = "Дебиторы";
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C1").Шрифт = ШрифтЗаголовков;
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C47").Шрифт = ШрифтЗаголовков;
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C72").Шрифт = ШрифтЗаголовков;
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C42").Шрифт = ШрифтЗаголовков;
	ТекТабличноеПоле.Область("R" + НомерСтрокиЗаг + "C65").Шрифт = ШрифтЗаголовков;

	ТекТабличноеПоле.Область("R" + Строка(Число(НомерСтрокиЗаг) + 1)).ВысотаСтроки = 1;

	Рисунок.Расположить(ТекТабличноеПоле.Область("R" + СтрокаНачалаВыводаДиаграммыПоДтКт + "C1:R" + Формат(Число(СтрокаНачалаВыводаДиаграммыПоДтКт) + ШиринаГрафикаДтКт, "ЧГ=0") + "C40"));
	Рисунок.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
	НоваяДиаграмма = Рисунок.Объект;
	ИсходнаяДиаграмма = ЭлементыФормы.ДиаграммаКтДт;
	// Перенесем св-ва диаграммы.
	ПеренестиСвойстваДиаграмм(НоваяДиаграмма, ИсходнаяДиаграмма, Ложь);

// 47
	ОбластьЗаголовокТабл = Макет.ПолучитьОбласть("ШапкаДтКт|ШиринаТаблДтКт");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДтКт|ШиринаТаблДтКт");
	КоличествоСтрокКредиторов = 0;

	Для каждого Строчка Из ТабличноеПолеКт Цикл
		КоличествоСтрокКредиторов = КоличествоСтрокКредиторов + 1;
		Если Строчка.ИтоговаяСтрока <> Неопределено Тогда
			ОбластьСтрока.Параметры.Контрагент = ?(Строчка.ИтоговаяСтрока = Истина, "Всего", "Прочие");
			ОбластьСтрока.Область("R1").Шрифт = Новый Шрифт(,,Истина);
		Иначе
			Если (Строчка.Субконто1 = Неопределено) Или (Строчка.Субконто1 = Null) Тогда
				ОбластьСтрока.Параметры.Контрагент = "Данных нет";
			Иначе
				ОбластьСтрока.Параметры.Контрагент = Строчка.Субконто1.Наименование;
			КонецЕсли;
			ОбластьСтрока.Область("R1").Шрифт = Новый Шрифт(,,Ложь);
		КонецЕсли;

		ОбластьСтрока.Параметры.Заполнить(Строчка);
		ТекТабличноеПоле.Вывести(ОбластьСтрока);
	КонецЦикла;

	СтрокаСКоторойВыводиласьТаблица = Формат(Число(СтрокаНачалаВыводаДиаграммыПоДтКт) + ШиринаГрафикаДтКт + 1, "ЧГ=0");
	Координата = "R" + СтрокаСКоторойВыводиласьТаблица + "C1:R" + Формат(Число(СтрокаСКоторойВыводиласьТаблица) + КоличествоСтрокКредиторов, "ЧГ=0") + "C22";
	// Переносим.
	ТекТабличноеПоле.ВставитьОбласть(
	   ТекТабличноеПоле.Область(Координата),
	   ТекТабличноеПоле.Область("R" + СтрокаНачалаВыводаДиаграммыПоДтКт + "C42:R" + Формат(Число(СтрокаНачалаВыводаДиаграммыПоДтКт) + КоличествоСтрокКредиторов, "ЧГ=0") + "C63"));
	ТекТабличноеПоле.Область(Координата).Очистить(Истина, Истина, Истина);

	// Дебиторы
	КоличествоСтрокДебиторов = 0;
	Для каждого Строчка Из ТабличноеПолеДт Цикл
		КоличествоСтрокДебиторов = КоличествоСтрокДебиторов + 1;
		Если Строчка.ИтоговаяСтрока <> Неопределено Тогда
			ОбластьСтрока.Параметры.Контрагент = ?(Строчка.ИтоговаяСтрока = Истина, "Всего", "Прочие");
			ОбластьСтрока.Область("R1").Шрифт = Новый Шрифт(,,Истина);
		Иначе
			Если (Строчка.Субконто1 = Неопределено) Или (Строчка.Субконто1 = Null) Тогда
				ОбластьСтрока.Параметры.Контрагент = "Данных нет";
			Иначе
				ОбластьСтрока.Параметры.Контрагент = Строчка.Субконто1.Наименование;
			КонецЕсли;
			ОбластьСтрока.Область("R1").Шрифт = Новый Шрифт(,,Ложь);
		КонецЕсли;

		ОбластьСтрока.Параметры.Заполнить(Строчка);
		ТекТабличноеПоле.Вывести(ОбластьСтрока);
	КонецЦикла;

	СтрокаСКоторойВыводиласьТаблица = Формат(Число(СтрокаСКоторойВыводиласьТаблица) + КоличествоСтрокКредиторов, "ЧГ=0");
	Координата = "R" + СтрокаСКоторойВыводиласьТаблица + "C1:R" + Формат(Число(СтрокаСКоторойВыводиласьТаблица) + КоличествоСтрокДебиторов -1, "ЧГ=0") + "C22";
	// Переносим.
	ТекТабличноеПоле.ВставитьОбласть(
	   ТекТабличноеПоле.Область(Координата),
	   ТекТабличноеПоле.Область("R" + СтрокаНачалаВыводаДиаграммыПоДтКт + "C65:R" + Формат(Число(СтрокаНачалаВыводаДиаграммыПоДтКт) + КоличествоСтрокДебиторов - 1, "ЧГ=0") + "C86"));
	ТекТабличноеПоле.Область(Координата).Очистить(Истина, Истина, Истина);

	ОбластьЗаголовокТабл = Макет.ПолучитьОбласть("ШапкаОтчетыНалоги|ШиринаОтчетыНалоги");
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаОтчетыНалоги|ШиринаОтчетыНалоги");

	НомерСтрокиПередВыводомОтчетов = Формат(Число(СтрокаСКоторойВыводиласьТаблица) + КоличествоСтрокДебиторов -1, "ЧГ=0");
	// Определим максимальную величину: дебиторы, кредиторы или диаграмма.
	ДебКред = Макс(КоличествоСтрокДебиторов, КоличествоСтрокКредиторов);
	ОбщийИтог = Макс(ДебКред, ШиринаГрафикаДтКт);
	НомерСтрокиУдаления = Формат(Число(СтрокаНачалаВыводаДиаграммыПоДтКт) + ОбщийИтог + 4, "ЧГ=0");

	ТекТабличноеПоле.Вывести(ОбластьЗаголовокТабл);
	Для каждого ДанныеСтроки Из ТаблицаСобытийКалендаря Цикл

		Периодичность = ДанныеСтроки.Периодичность;
		Статус = ДанныеСтроки.Статус;
		ФормаЗаполняетсяНарастающимИтогом = ДанныеСтроки.НарастающийИтог;

		Если (Периодичность = "Квартальная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
			СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
		ИначеЕсли (Периодичность = "Месячная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
			Если Месяц(ДанныеСтроки.ЗаПериодПо) = 1 Тогда
				СтрПериодОтчета = Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
			Иначе
				СтрПериодОтчета = "Январь - " + Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
			КонецЕсли;
			СтроковоеПредставлениеПериода = СтрПериодОтчета;
		Иначе
			СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
		КонецЕсли;

		СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
		ПериодичностьЗаПериод = Периодичность + ", " + Символы.ПС + СтроковоеПредставлениеПериода;

		ОбластьСтрока.Параметры.Заполнить(ДанныеСтроки);

		Если Статус = "2" Тогда
			ОбластьСтрока.Параметры.Период = СтроковоеПредставлениеПериода;
		Иначе
			ОбластьСтрока.Параметры.Период = ПериодичностьЗаПериод;
		КонецЕсли;

		ТекТабличноеПоле.Вывести(ОбластьСтрока);
	КонецЦикла;

	Если Число(НомерСтрокиПередВыводомОтчетов) >= Число(НомерСтрокиУдаления) Тогда
		ТекТабличноеПоле.УдалитьОбласть(ТекТабличноеПоле.Область("R" + НомерСтрокиУдаления + "C1:R" + НомерСтрокиПередВыводомОтчетов + "C2000"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЕсли;

	СтрокаЗаголовок = Формат(Число(НомерСтрокиУдаления) - 2, "ЧГ=0");
	Координата = "R" + СтрокаЗаголовок + "C1:R" + СтрокаЗаголовок + "C14";
	ТекТабличноеПоле.Область(Координата).Текст = "Отчетность и платежи";
	ТекТабличноеПоле.Область(Координата).Шрифт = ШрифтЗаголовков;

	// Сформируем заголовок печатной формы.
	ТекТабличноеПоле.ВставитьОбласть(ПерваяЧистаяСтрока, ТекТабличноеПоле.Область("R1"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ТекТабличноеПоле.Область("R1C1").Текст = "";
	ТекТабличноеПоле.ВставитьОбласть(ПерваяЧистаяСтрока, ТекТабличноеПоле.Область("R1"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ТекТабличноеПоле.ВставитьОбласть(ПерваяЧистаяСтрока, ТекТабличноеПоле.Область("R1"), ТипСмещенияТабличногоДокумента.ПоВертикали);
	ТекТабличноеПоле.Область("R1C1").Текст = ДляОрганизации.НаименованиеПолное;
	ТекТабличноеПоле.Область("R2C1:R2C90").Объединить();
	ТекТабличноеПоле.Область("R2C1:R2C90").Текст = "Монитор бухгалтера";
	ТекТабличноеПоле.Область("R2C1:R2C90").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ТекТабличноеПоле.Область("R2C1:R2C90").Шрифт = Новый Шрифт(,11, Истина);

	ТекТабличноеПоле.Область("R3C1:R3C90").Объединить();
	ТекТабличноеПоле.Область("R3C1:R3C90").Текст = "Период: " + Формат(Период, "ДФ='дд ММММ гггг'");
	ТекТабличноеПоле.Область("R3C1:R3C90").ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ТекТабличноеПоле.Область("R3C1:R3C90").Шрифт = Новый Шрифт(,9, Истина);

	Если ПросмотрБланка Тогда
		ТекТабличноеПоле.Показать("Монитор бухгалтера - печатная форма");
	Иначе
		ТекТабличноеПоле.Напечатать();
	КонецЕсли;

КонецПроцедуры // Печать

// ОбновитьОтчет
//
Процедура ОбновитьОтчет(ОбновитьПолностью) Экспорт
	СформироватьОтчет(ОбновитьПолностью);
КонецПроцедуры // ОбновитьОтчет

// СформироватьДанныеПоРегламентированномуКалендарю(
//
Процедура СформироватьДанныеПоРегламентированномуКалендарю()
	СформироватьТаблицуРегламентированногоКалендаряТранзит();
	СформироватьТаблицуКалендаря(Год(Период));
КонецПроцедуры // СформироватьДанныеПоРегламентированномуКалендарю(

// ПоказатьКалендарьБухгалтера
// Обновляет данные по отчетам и срокам уплат.
//
Процедура ПоказатьКалендарьБухгалтера(ОбновитьПолностью)
	Если ОбновитьПолностью Тогда
		СформироватьДанныеПоРегламентированномуКалендарю();
	КонецЕсли;
	ОтобразитьЗаписиКДате();
КонецПроцедуры // ПоказатьКалендарьБухгалтера

// СформироватьТаблицуРегламентированногоКалендаряТранзит
//
Процедура СформироватьТаблицуРегламентированногоКалендаряТранзит()

	Запрос = Новый Запрос;
	СписокРабочихДней = Новый СписокЗначений;
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	СписокРабочихДней.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);

	Запрос.УстановитьПараметр("СписокРабочихДней", СписокРабочихДней);
	Запрос.УстановитьПараметр("ВходящаяДата", Год(Период));

	ТекстЗапроса =
	"	ВЫБРАТЬ * 
	|	ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь
	|	ГДЕ
	|	Год = &ВходящаяДата";

	Запрос.Текст = ТекстЗапроса;
	мТаблРегламентированногоКалендаряНеТолькоРабочие = Запрос.Выполнить().Выгрузить();
	мТаблРегламентированногоКалендаряНеТолькоРабочие.Индексы.Добавить("ДатаКалендаря");

	ТекстЗапроса = ТекстЗапроса + "
	|	И ВидДня В (&СписокРабочихДней)";
	Запрос.Текст = ТекстЗапроса;
	мТаблРегламентированногоКалендаряТолькоРабочие = Запрос.Выполнить().Выгрузить();
	мТаблРегламентированногоКалендаряТолькоРабочие.Индексы.Добавить("ДатаКалендаря");

КонецПроцедуры // СформироватьТаблицуРегламентированногоКалендаряТранзит

// СформироватьТаблицуКалендаря
//
Функция СформироватьТаблицуКалендаря(ТребуемыйГод)

	мНакопительнаяТаблицаПредставленияОтчетов = мТаблицаГрафикСдачи.Скопировать();
	мНакопительнаяТаблицаСроковУплат = СоздатьТаблицуПоУплатамНалогов();

	// Получим основную таблицу событий календаря
	ТаблицаСобытий = ПолучитьТаблицуИзНастроек("События", "НазваниеСобытия, Наименование, Объект, Комментарий");

	Состояние("Формирование календаря событий ...");

	// Собираем настройку для каждого события.
	Для каждого Событие Из ТаблицаСобытий Цикл
		ОбъектСобытие = Событие.Объект;
		// Если Найти(ОбъектСобытие, "РегламентированныйОтчет") > 0 Тогда

		Если ОбъектСобытие <> "Отчета нет" Тогда
			// Проверим, если отчет в справочнике рег. отчетов скрыт, тогда такой отчет не обрабатываем, считается, что организация
			// его представлять не должна.
			НайденныйЭлемент = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", ОбъектСобытие);
			Если НайденныйЭлемент = Справочники.РегламентированныеОтчеты.ПустаяСсылка()
			 Или НайденныйЭлемент.НеПоказыватьВСписке Тогда
				Продолжить;
			КонецЕсли;

			НастройкаКСобытию = ПолучитьТаблицуИзНастроек(ОбъектСобытие, "Форма, Годы, Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст, НарастающийИтог", 254);

			// Для всех форм построим план сдачи отчета с датами, с учетом действий форм.
			ТаблСдача = ПостроитьГрафикСдачи(ОбъектСобытие, НастройкаКСобытию, ТребуемыйГод);
			// Сгрузим в общую таблицу.
			ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблСдача, мНакопительнаяТаблицаПредставленияОтчетов);
		КонецЕсли;

		Если Событие.Комментарий = "Уплаты нет" Тогда
			// Для региональных налогов, уплата устанавливается на региональном уровне, в каждом субъекте свои сроки уплаты платежей.
			// В этом случае, обрабатывать сроки уплат не будем.
			Продолжить;
		КонецЕсли;

		// Считываем секцию НазваниеСобытия, "Прибыль".
		НастройкаКСобытию = ПолучитьТаблицуИзНастроек(Событие.НазваниеСобытия, "НазваниеНалога, Годы, Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст, НарастающийИтог", 254);
		// Сроки уплат по налогам.
		ТаблУплата = ПостроитьГрафикУплат(НастройкаКСобытию, ТребуемыйГод);
		// Сгрузим в общую таблицу.
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблУплата, мНакопительнаяТаблицаСроковУплат);

	КонецЦикла;

	// Добавим Индексы
	мНакопительнаяТаблицаПредставленияОтчетов.Индексы.Добавить("ПоследняяДатаПредставленияОтчета");
	мНакопительнаяТаблицаПредставленияОтчетов.Индексы.Добавить("Статус");
	мНакопительнаяТаблицаПредставленияОтчетов.Индексы.Добавить("ЗаПериодС, ЗаПериодПо");

	мНакопительнаяТаблицаСроковУплат.Индексы.Добавить("СрокУплаты");
	мНакопительнаяТаблицаСроковУплат.Индексы.Добавить("ЗаПериодС, ЗаПериодПо");

КонецФункции // СформироватьТаблицуКалендаря

// ПолучитьТаблицуИзНастроек
// Получает данные из макета Календарь в таблицу. Все колонки - тип строка100.
//
// Параметры:
//  НазваниеОбласти - название области в макете.
//  КолонкиСтр      - строка через запятую, названия колонок в результирующей таблице.
//
// Возвращаемое значение:
//  Таблица значений из макета Календаря с заданной областью.
//
Функция ПолучитьТаблицуИзНастроек(НазваниеОбласти, КолонкиСтр, РазмерСтрок = 100)

	ОбластьМакет = мМакет.Области.Найти(НазваниеОбласти);
	ТаблРезультат = Новый ТаблицаЗначений;
	Колонки = Новый Структура(КолонкиСтр);
	Строка100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(РазмерСтрок);
	Для Каждого Зап Из Колонки Цикл
		ТаблРезультат.Колонки.Добавить(Зап.Ключ, Строка100);
	КонецЦикла;

	Для Ном = ОбластьМакет.Верх По ОбластьМакет.Низ Цикл

		НовСтр = ТаблРезультат.Добавить();
		НомерКолонкиВМакете = 0;
		Для Каждого Зап Из ТаблРезультат.Колонки Цикл
			НомерКолонкиВМакете = НомерКолонкиВМакете + 1;
			Сведение = мМакет.Область(Ном, НомерКолонкиВМакете).Текст;
			Если (НомерКолонкиВМакете = 1) И (ПустаяСтрока(Сведение)) Тогда
				// Не считываем пустую строку в области, если на есть по первой колонке.
				ТаблРезультат.Удалить(НовСтр);
				Прервать;
			КонецЕсли;
			НовСтр[Зап.Имя] = Сведение;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблРезультат;

КонецФункции // ПолучитьТаблицуИзНастроек

// ПостроитьГрафикСдачи
//
Функция ПостроитьГрафикСдачи(Объект, ТаблицаНастройкиКОбъекту, Знач ТребуемыйГод)

	ТаблицаГрафикСдачи = мТаблицаГрафикСдачи.Скопировать();

	// Для каждой формы, которая описана в макете
	Для каждого Настр Из ТаблицаНастройкиКОбъекту Цикл

		ФормаЗаполняетсяНарастающимИтогом = Настр.НарастающийИтог = "Истина";
		НазваниеФормыНастройка = Настр.Форма;

		СрокУплатыЕжемесячно = Настр.Ежемесячно;
		СрокУплатыЕжемесячноКто = Настр.ЕжемесячноТекст;

		СрокУплатыЕжеквартально = Настр.Ежеквартально;
		СрокУплатыЕжеквартальноКто = Настр.ЕжеквартальноТекст;

		Если НЕ ПустаяСтрока(Настр.ЗаГод) Тогда
			РазборСрока = ПолучитьНомерМесяцаИЧислоПоФормату(Настр.ЗаГод);
			СрокУплатыГодДень = РазборСрока.ЧислоДень;
			СрокУплатыГодМесяц = РазборСрока.Месяц;
		КонецЕсли;

		СрокУплатыГодТекст = Настр.ЗаГодТекст;

		// ТипСдачиФормы - 1 - ежемесячно. 2 - ежеквартально, 3- год
		Для ТипСдачиФормы = 1 По 3 Цикл
			Если (ТипСдачиФормы = 1) И (ПустаяСтрока(СрокУплатыЕжемесячно)) Тогда
				Продолжить;
			ИначеЕсли (ТипСдачиФормы = 2) И (ПустаяСтрока(СрокУплатыЕжеквартально)) Тогда
				Продолжить;
			ИначеЕсли (ТипСдачиФормы = 3) И (ПустаяСтрока(Настр.ЗаГод)) Тогда
				Продолжить;
			КонецЕсли;

			Если ТипСдачиФормы = 1 Тогда
				// Форма сдается ежемесячно.
				ПериодичностьНастройка = "Месячная";
				СтруктураНачИКонцаДействийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
				Если СтруктураНачИКонцаДействийПериода = Неопределено Тогда
					// Если форма уже не действует, тогда пропускаем.
					Продолжить;
				КонецЕсли;

				АкцизнаяСхема = Ложь;

				Если (Найти(СрокУплатыЕжемесячно, "+1Месяц") > 0)
				 Или (Найти(СрокУплатыЕжемесячно, "+2Месяц") > 0)
				 Или (Найти(СрокУплатыЕжемесячно, "+3Месяц") > 0) Тогда

					МесяцПрибавления = Число(Сред(СрокУплатыЕжемесячно, 2, 1));
					СрокУплатыЕжемесячно = Сред(СрокУплатыЕжемесячно, Найти(СрокУплатыЕжемесячно, " ") + 1);
					АкцизнаяСхема = Истина;

				Конецесли;

				// Оптимизировано. В случае, если форма действует в году с 1 по 12 месяц, тогда в цикле
				// сделаем от текущего месяца периода, до конца.
				СтруктураНачало = СтруктураНачИКонцаДействийПериода.Начало;
				МесяцПериод = Месяц(Период);
				Если СтруктураНачало < МесяцПериод Тогда
					СтартМесяц = МесяцПериод;
				Иначе
					СтартМесяц = СтруктураНачало;
				КонецЕсли;
				Если СтруктураНачИКонцаДействийПериода.Конец < СтартМесяц Тогда
					// В случае, если получится, что стартуем с месяца 5, а форме действует до 3 месяца, то пропускаем такие записи.
					Продолжить;
				КонецЕсли;
				// Для Инд = СтруктураНачИКонцаДействийПериода.Начало По СтруктураНачИКонцаДействийПериода.Конец Цикл
				Для Инд = СтартМесяц По СтруктураНачИКонцаДействийПериода.Конец Цикл

					НовСтр = ТаблицаГрафикСдачи.Добавить();
					НовСтр.Объект = Объект;
					НовСтр.Периодичность = ПериодичностьНастройка;
					НовСтр.ФормаОтчета = НазваниеФормыНастройка;

					НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДействийПериода.НазваниеОтчетнойФормы;

					// Обработаем возможность сокращения ПДСМ - последний день следующего месяца.
					Если СрокУплатыЕжемесячно = "ПДСМ" Тогда
						// За январь - 28 февраля
						// за февраль - 31 марта и т.д.
						//     
						// за декабрь - 31 января
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, Инд, 1));
					ИначеЕсли АкцизнаяСхема Тогда
						// Специальный режим сроков уплат. Применяется в акцизных декларациях.
						// Платеж делится на два срока, первый - до 20-го числа след. месяца после отчетного, второй - до 15-го через месяц.
						МесАкц = Инд + МесяцПрибавления;
						Если МесАкц >= 13 Тогда
							МесАкц = 1;
							//ТребуемыйГод = ТребуемыйГод - 1; // Обращаемся к прошлому году.
						КонецЕсли;
						СрокСдачи = Дата(ТребуемыйГод, МесАкц, СрокУплатыЕжемесячно);
					Иначе
						СрокСдачи = КонецДня(Дата(ТребуемыйГод, Инд, СрокУплатыЕжемесячно));
					КонецЕсли;

					НовСтр.ПоследняяДатаПредставленияОтчета = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);

					Если (АкцизнаяСхема) И (Инд = 12) Тогда
							// январь. Изменим период, за который должен составится отчет.
						СрокСдачиС = Дата(ТребуемыйГод - 1, 12 - МесяцПрибавления, 1);
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					Иначе
						СрокСдачиС = ДобавитьМесяц(Дата(ТребуемыйГод, Инд, 1), -1); // КонецМесяца(ДобавитьМесяц(СрокСдачи, -1));
						СрокСдачиПо = КонецМесяца(СрокСдачиС);
					КонецЕсли;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						// Если форма сдается нарастающим итогом, то передвигаем дату С на начало года.
						СрокСдачиС = НачалоГода(СрокСдачиС);
					КонецЕсли;

					НовСтр.ЗаПериодС = СрокСдачиС;
					НовСтр.ЗаПериодПо = СрокСдачиПо;

					НовСтр.КтоСдаетОтчет = СрокУплатыЕжемесячноКто;
					НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;
					// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
					НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

					//ПроставитьНапоминания(ТаблицаГрафикСдачи, НовСтр, НовСтр.ПоследняяДатаПредставленияОтчета, НачалоМесяца(СрокСдачи));

				КонецЦикла;
			КонецЕсли;

			Если ТипСдачиФормы = 2 Тогда
				ПериодичностьНастройка = "Квартальная";
				СтруктураНачИКонцаДействийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
				Если СтруктураНачИКонцаДействийПериода = Неопределено Тогда
					// Если форма уже не действует, тогда пропускаем.
					Продолжить;
				КонецЕсли;

				Для Квартал = СтруктураНачИКонцаДействийПериода.Начало По СтруктураНачИКонцаДействийПериода.Конец Цикл
					Если Квартал = 4 Тогда
						// Обрабатывать данную ситуацию необходимо в блоке, который отвечает за ежегодность.
						Продолжить;
					КонецЕсли;

					НовСтр = ТаблицаГрафикСдачи.Добавить();
					НовСтр.Объект = Объект;
					НовСтр.Периодичность = ПериодичностьНастройка;
					НовСтр.ФормаОтчета = НазваниеФормыНастройка;

					НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДействийПериода.НазваниеОтчетнойФормы;

					Если Найти(СрокУплатыЕжеквартально, "ДОСОП+") > 0 Тогда
						// Обрабатываем N дней с даты окончания соответствующего отчетного периода
						КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 7));
						// Прибавим нужное кол-во календарных дней.
						СрокСдачи = КонецКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + (86400 * КолвоПрибавляемыхДней);
					ИначеЕсли Найти(СрокУплатыЕжеквартально, "ДОПМСОП+") > 0 Тогда 
						  // Обрабатываем N дней с даты окончания первого месяца следующего за отчетным периодом 
						  КолвоПрибавляемыхДней = Число(Сред(СрокУплатыЕжеквартально, 9)); 
						  // Прибавим нужное кол-во каледнарных дней. 
						  СрокСдачи = КонецМесяца(КонецКвартала(Дата(ТребуемыйГод, (Квартал * 3), 1)) + 1) + (86400 * КолвоПрибавляемыхДней);						
					ИначеЕсли СрокУплатыЕжеквартально = "ПЧМСЗОП" Тогда
						// Означает Последнее Число Месяца Следующего За Отчетным Периодом. ПЧМСЗОП.
						// Т.е. за 1 кв. - последний день апреля.
						// за 2 кв. - последний день июля.
						// за 3 кв. - последний день октября.
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3) + 1, 1));
					ИначеЕсли Найти(СрокУплатыЕжеквартально, "ПОЛУГОДИЕ") > 0 Тогда
						ЧислоОтчета = Сред(СрокУплатыЕжеквартально, 10);
						// режим отчета формы, только за полугодие. Пример ЕСХН.
						СрокСдачи = Дата(ТребуемыйГод, 7, ЧислоОтчета);
						СрокСдачи = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
						НовСтр.ПоследняяДатаПредставленияОтчета = СрокСдачи;
						// Повторим все параметры таблицы, т.к. прервем цикл.
						НовСтр.Периодичность = "Полугодие";
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, 6, 1));
						НовСтр.КтоСдаетОтчет = СрокУплатыЕжеквартальноКто;
						НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;
						НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;
						Прервать; // Прервем цикл. Только ПОЛУГОДИЕ.

					Иначе
						СрокСдачи = Дата(ТребуемыйГод, (Квартал * 3) + 1, СрокУплатыЕжеквартально);
					КонецЕсли;

					СрокСдачи = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
					НовСтр.ПоследняяДатаПредставленияОтчета = СрокСдачи;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3), 1));
					Иначе
						НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод, Квартал * 3, 1));
						НовСтр.ЗаПериодПо = КонецКвартала(НовСтр.ЗаПериодС);
					КонецЕсли;

					НовСтр.КтоСдаетОтчет = СрокУплатыЕжеквартальноКто;
					НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;

					// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
					НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

					//ПроставитьНапоминания(ТаблицаГрафикСдачи, НовСтр, НовСтр.ПоследняяДатаПредставленияОтчета, НовСтр.ЗаПериодС);

				КонецЦикла;
			КонецЕсли;

			Если ТипСдачиФормы = 3 Тогда
				ПериодичностьНастройка = "Годовая";

				Если ТипЗнч(СрокУплатыГодДень) = Тип("Строка") Тогда
					Если Найти(СрокУплатыГодДень, "ДОСОП+") > 0 Тогда
						// Бухгалтерская отчетность. Годовая отчетность - в течении 90 дней по окончании года.
						// Выясним, для прошлого года, действует ли данный отчет?
						СтруктураНачИКонцаДействийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод - 1, ПериодичностьНастройка);
						Если СтруктураНачИКонцаДействийПериода = Неопределено Тогда
							// Если форма за прошлый год не действует, то пропустим её.
							Продолжить;
						КонецЕсли;
					КонецЕсли;

				Иначе
					// В случае, если при годовой отчетности задан месяц и год сдачи формы, тогда в переменной СрокУплатыГодДень будет число - День месяца.

					СтруктураНачИКонцаДействийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод, ПериодичностьНастройка);
					Если СтруктураНачИКонцаДействийПериода = Неопределено Тогда
						// Если форма уже не действует, тогда пропускаем.
						// В случае, если конкретная форма уже закончила действовать в ГГГГ году, тогда проверим на прошлый год, но запись по действию
						// нужно сформировать для текущего года.
						// Например, для отчета, который в 2007 г. больше не действует, но действовал в 2006 г., сдача годового отчета за 2006 год
						// должна осуществляться в января 2007 г.
						СтруктураНачИКонцаДействийПериода = ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормыНастройка, ТребуемыйГод - 1, ПериодичностьНастройка, Истина);
						Если СтруктураНачИКонцаДействийПериода = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Годовая.
				НовСтр = ТаблицаГрафикСдачи.Добавить();
				НовСтр.Объект = Объект;
				// Если форма нарастающим итогом, то периодичность Годовая, иначе периодичность установим в Квартальная.
				// Проверка на любой квартальной декларации не нарастающим итогом.
				НовСтр.Периодичность = ?(ФормаЗаполняетсяНарастающимИтогом, ПериодичностьНастройка, "Квартальная");
				НовСтр.ФормаОтчета = НазваниеФормыНастройка;
				НовСтр.НазваниеОтчетнойФормы = СтруктураНачИКонцаДействийПериода.НазваниеОтчетнойФормы;

				Если ТипЗнч(СрокУплатыГодДень) = Тип("Строка") Тогда
					Если Найти(СрокУплатыГодДень, "ДОСОП+") > 0 Тогда
						ДниПлюс = Число(СтрЗаменить(СрокУплатыГодДень, "ДОСОП+", ""));
						// Прибавим к последней дате прошлого года нужно кол-во дней. Итоговая дата, будет событием в Требуемом году.
						// Отчет за прошлый год. Применимо для бухгалтерских форм.
						СрокСдачи = КонецГода(Дата(ТребуемыйГод - 1, 1, 1)) + ДниПлюс * 86400;
					КонецЕсли;
				Иначе
					// В случае, если при годовой отчетности задан месяц и год сдачи формы, тогда в переменной СрокУплатыГодДень будет число - День месяца.
					СрокСдачи = Дата(ТребуемыйГод, СрокУплатыГодМесяц, СрокУплатыГодДень);
				Конецесли;
				НовСтр.ПоследняяДатаПредставленияОтчета = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);

				// ЗаПериод Определим, за какой период отчетность.
				Если ФормаЗаполняетсяНарастающимИтогом Тогда
					НовСтр.ЗаПериодС = НачалоГода(Дата(ТребуемыйГод - 1, 1, 1));
				Иначе
					// Если не нарастающий итог, тогда этот отчет за IV квартал.
					НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод - 1, 12, 1));
				КонецЕсли;

				НовСтр.ЗаПериодПо = КонецГода(НовСтр.ЗаПериодС);
				НовСтр.КтоСдаетОтчет = СрокУплатыГодТекст;
				НовСтр.ФормаЗаполняетсяНарастающимИтогом = ФормаЗаполняетсяНарастающимИтогом;

				// Для строк напоминания, запишем дату сдачи отчета, т.к. она будет замещена для целей отборов по датам календаря.
				НовСтр.ДатаПредставленияОтчета = НовСтр.ПоследняяДатаПредставленияОтчета;

				//ПроставитьНапоминания(ТаблицаГрафикСдачи, НовСтр, НовСтр.ПоследняяДатаПредставленияОтчета, НовСтр.ЗаПериодС);

			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаГрафикСдачи;

КонецФункции // ПостроитьГрафикСдачи

// СформироватьЗапросКалендарьРО1
//
// Параметры:
//  ДатаКалендаря - Дата, свойства которой необходимо узнать.
//  ТолькоРабочие  - запрос будет сформирован с целью получения ТОЛЬКО рабочих дней
//
// Возвращаемое значение:
//  Запрос.Выполнить()
//
Функция СформироватьЗапросКалендарьРО1(Знач ДатаКалендаря, ТолькоРабочие = Ложь)

	Если ТолькоРабочие Тогда
		ТаблицаДанных = мТаблРегламентированногоКалендаряТолькоРабочие;
	Иначе
		ТаблицаДанных = мТаблРегламентированногоКалендаряНеТолькоРабочие;
	КонецЕсли;
	НайденнаяСтрока = ТаблицаДанных.Найти(ДатаКалендаря, "ДатаКалендаря");
	Возврат НайденнаяСтрока;

КонецФункции // СформироватьЗапросКалендарьРО1

// ПолучитьСледующуюРабочуюДатуДляРегОтчетности1
// Функция предназначена для определения рабочей даты, которая следует начиная с анализируемой даты.
// В случае, если анализируемая дата является рабочим днем, возвращаться будет анализируемая дата.
//
// Параметры:
//  АнализируемаяДата - Дата. Дата, начиная с которой необходимо производить анализ.
//  ВыводитьСообщения - режим вывода сообщение, по умолчанию всегда включено (Истина).
//
// Возвращаемое значение:
//  Дата. Следующая рабочая дата после анализируемой даты, если анализируемая дата является рабочим
//                 днем, тогда возвратится анализируемая дата. Если регламентированный календарь не
//                 поддерживается, возвратится Неопределено.
//
Функция ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Знач АнализируемаяДата, ВыводитьСообщения = Истина) Экспорт
	АнализируемаяДата = НачалоДня(АнализируемаяДата);
	Срез = СформироватьЗапросКалендарьРО1(АнализируемаяДата);

	Если Срез = Неопределено Тогда
		// В регистре нет сведений по этой дате. Календарь не заполнен.
		Если ВыводитьСообщения Тогда
			Сообщить("Не заполнен производственный календарь.", СтатусСообщения.Внимание);
		КонецЕсли;
		// Пытаемся анализировать праздники.
		СписокПраздников = РегламентированнаяОтчетность.ПолучитьСписокПраздниковРФ(Год(АнализируемаяДата));

		АнализироватьДату = Истина;
		Пока АнализироватьДату Цикл

			ДеньМесяцЗаписываемаяДата = "" + Формат(АнализируемаяДата, "ДФ = 'ММ'") + Формат(АнализируемаяДата, "ДФ = 'дд'");
			ПраздничныйДень = СписокПраздников.НайтиПоЗначению(ДеньМесяцЗаписываемаяДата);

			Если (ПраздничныйДень <> Неопределено) Или (ДеньНедели(АнализируемаяДата) > 5) Тогда
				АнализируемаяДата = АнализируемаяДата + 86400;
			Иначе
				АнализироватьДату = Ложь;
			КонецЕсли;
		КонецЦикла;

		Возврат АнализируемаяДата;

	Иначе
		// СрезТаблица = Срез.Выгрузить();
		Если (Срез.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий)
		 Или (Срез.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный) Тогда
			// Входящая дата является рабочем днем.
			Возврат АнализируемаяДата;
		Иначе
			АнализируемаяДата = АнализируемаяДата + 86400;
			Инд = 0;
			Пока (СформироватьЗапросКалендарьРО1(АнализируемаяДата, Истина) = Неопределено) И (Инд < 20) Цикл
				АнализируемаяДата = АнализируемаяДата + 86400;
				Инд = Инд + 1;
			КонецЦикла;
			Возврат ?(Инд = 20, Неопределено, АнализируемаяДата);
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСледующуюРабочуюДатуДляРегОтчетности1

// ВозвратитьСтруктуруДействийФормы
// Функция возвращает начальный номер квартала или месяца требуемого года, в котором действует форма (НазваниеФормы)
//
// Параметры:
//  Объект         - строка, название регламентированного отчета.
//  НазваниеФормы  - название формы в объекте рег. отчета.
//  ТребуемыйГод   - год
//  Периодичность  - может принимать значение: Квартал, Месяц.
//  ГодДействияОбход - Ложь по умолчанию, только для годовых деклараций. Если Истина, тогда
//                 год действия декларации и требуемый год при совпадении не возвращает Неопределено.
//                 Если Ложь, тогда при равенстве ТребуемогоГода и Года действия отчета возвращается неопределено
//
// Возвращаемое значение:
//  Структура, ключи: Начало, Конец. Квартал или месяц, в зависимости от периодичности.
//  В случае, если форма в указанный год вообще не действует, тогда возвращаем Неопределено.
//  В случае, если Периодичность = "Годовая" и форма в этот год действует, тогда возвращается пустая структура.
//
Функция ВозвратитьСтруктуруДействийФормы(Объект, НазваниеФормы, ТребуемыйГод, Периодичность, ГодДействияОбход = Ложь)

	// Обход форм, которые действуют в один и тот же период времени.
	// Авансы по земельному налогу
	Если (Объект = "РегламентированныйОтчетАвансыЗемля") И (НазваниеФормы = "ФормаОтчета2006Кв2") И (ТребуемыйГод = 2007) Тогда
		Возврат Неопределено;
	КонецЕсли;

	НайденныеСтроки = мТаблицаСроковОтчетность.НайтиСтроки(Новый Структура("ИсточникОтчета, Форма", Объект, НазваниеФормы));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	НайденнаяСтрока = НайденныеСтроки[0];
	НазваниеОтчетнойФормы = НайденнаяСтрока.НазваниеОтчетнойФормы;

	ДатаНачалоДействия = НайденнаяСтрока.ДатаНачалоДействия;
	ДатаКонецДействия = НайденнаяСтрока.ДатаКонецДействия;

	Если ДатаКонецДействия = ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")) Тогда
		ДатаКонецДействия = '20990101';
	КонецЕсли;

	ГодДатаНачалоДействия = Год(ДатаНачалоДействия);
	ГодДатаКонецДействия = Год(ДатаКонецДействия);

	// Действует ли этот отчет в требуемый год? Определим условия.
	// Если год даты начала больше требуемого года
	// или если срок окончания действия меньше требуемого года
	Если (ГодДатаНачалоДействия > ТребуемыйГод)
	 Или (ГодДатаКонецДействия < ТребуемыйГод) Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Периодичность = "Годовая" Тогда
		// Требуемый год - это год когда должно произойти действие. Если форма только начала действовать с данного года, то годовой отчет
		// под эту форму не подпадает, кроме случаев, когда правая граница укладывается в требуемый год.
		Если ГодДатаНачалоДействия = ТребуемыйГод Тогда
			// 4-ФСС
			Если НЕ ГодДействияОбход Тогда
				// Например. Требуемый год действий - 2006 г. форма годовая по транспорту действует с 01.01.2006, значит в феврале 2006 г. данную
				// форму сдать нельзя, её можно сдать только в феврале 2007 года.
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;

		// Для декларации с периодичностью Годовая возврати пустую структуру, главное определили, что она подходит под указанный год.
		Возврат Новый Структура("НазваниеОтчетнойФормы", НазваниеОтчетнойФормы);
	КонецЕсли;

	// В случае, если форма начала действовать не в требуемом году, тогда Начало всегда 1 (первый месяц и первый квартал)
	Если ГодДатаНачалоДействия < ТребуемыйГод Тогда
		Начало = 1;
	ИначеЕсли ГодДатаНачалоДействия = ТребуемыйГод Тогда
		//Если форма начала действовать в требуемый год
		Если Периодичность = "Месячная" Тогда
			// Определим номер месяца, с которого действует форма в требуемом году.
			Начало = Месяц(ДатаНачалоДействия);
		ИначеЕсли Периодичность = "Квартальная" Тогда
			// Определим номер квартала, с которого действует форма.
			Начало = РегламентированнаяОтчетность.ПолучитьКварталРО(ДатаНачалоДействия);
		КонецЕсли;
	КонецЕсли;

	Если ГодДатаКонецДействия > ТребуемыйГод Тогда
		Если Периодичность = "Месячная" Тогда
			Конец = 12;
		ИначеЕсли Периодичность = "Квартальная" Тогда
			Конец = 4;
		КонецЕсли;
	ИначеЕсли ГодДатаКонецДействия = ТребуемыйГод Тогда
		Если Периодичность = "Месячная" Тогда
			Конец = Месяц(ДатаКонецДействия);
		ИначеЕсли Периодичность = "Квартальная" Тогда
			Конец = РегламентированнаяОтчетность.ПолучитьКварталРО(ДатаКонецДействия);
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Начало", Начало);
	Результат.Вставить("Конец", Конец);
	Результат.Вставить("НазваниеОтчетнойФормы", НазваниеОтчетнойФормы);

	Возврат Результат;

КонецФункции // ВозвратитьСтруктуруДействийФормы

// ПостроитьГрафикУплат
//
Функция ПостроитьГрафикУплат(НастройкаУплатПоНалогу, Знач ТребуемыйГод)

	ТаблицаСроковУплат = СоздатьТаблицуПоУплатамНалогов();

	Для каждого Зап Из НастройкаУплатПоНалогу Цикл
		НазваниеНалога = Зап.НазваниеНалога;
		Годы = Зап.Годы;
		ФормаЗаполняетсяНарастающимИтогом = Зап.НарастающийИтог = "Истина";

		Разделитель = Найти(Годы, "-");
		Если Разделитель > 0 Тогда
			// Означает, что для настройка для нескольких лет. Интервал оформляется через -. Например 2005-2006, или 2005-0
			
			ГодНачало = Число(Сред(Годы, 1, Разделитель - 1));
			ГодКонец = Число(Сред(Годы, Разделитель + 1));
		Иначе
			ГодНачало = Число(Годы);
			ГодКонец = ГодНачало;
		КонецЕсли;
		Если ГодКонец = 0 Тогда
			ГодКонец = 2020;
		КонецЕсли;
		// Ежемесячно, Ежеквартально, ЗаГод, ЕжемесячноТекст, ЕжеквартальноТекст, ЗаГодТекст");
		СрокУплатыЕжемесячно = Зап.Ежемесячно;
		СрокУплатыЕжемесячноКто = Зап.ЕжемесячноТекст;

		СрокУплатыЕжеквартально = Зап.Ежеквартально;
		СрокУплатыЕжеквартальноКто = Зап.ЕжеквартальноТекст;

		Если НЕ ПустаяСтрока(Зап.ЗаГод) Тогда
			РазборСрока = ПолучитьНомерМесяцаИЧислоПоФормату(Зап.ЗаГод);
			СрокУплатыГодДень = РазборСрока.ЧислоДень;
			СрокУплатыГодМесяц = РазборСрока.Месяц;
		КонецЕсли;

		СрокУплатыГодТекст = Зап.ЗаГодТекст;

		Если НЕ ((ТребуемыйГод >= ГодНачало) И (ТребуемыйГод <= ГодКонец)) Тогда
			// В том случае, если указанный в настройках год не подходидит для заданного периода, возвращаем пустую таблицу сроков уплат.
			Возврат ТаблицаСроковУплат;
		КонецЕсли;

		// Генерируем сроки уплат по налогу.
		// Для ежемесячного налога.
		Если НЕ ПустаяСтрока(СрокУплатыЕжемесячно) Тогда
			АкцизнаяСхема = Ложь;

			Если (Найти(СрокУплатыЕжемесячно, "+1Месяц") > 0)
			 Или (Найти(СрокУплатыЕжемесячно, "+2Месяц") > 0)
			 Или (Найти(СрокУплатыЕжемесячно, "+3Месяц") > 0) Тогда

				МесяцПрибавления = Число(Сред(СрокУплатыЕжемесячно, 2, 1));
				СрокУплатыЕжемесячно = Сред(СрокУплатыЕжемесячно, Найти(СрокУплатыЕжемесячно, " ") + 1);
				АкцизнаяСхема = Истина;

			Конецесли;

			Для Мес = 1 По 12 Цикл

				НовСтр = ТаблицаСроковУплат.Добавить();

				НовСтр.НалогПолноеНазв = НазваниеНалога;

				Если АкцизнаяСхема Тогда
					// Специальный режим сроков уплат. Применяется в акцизных декларациях.
					// Платеж делится на два срока, первый - до 20-го числа след. месяца после отчетного, второй - до 15-го через месяц.
					МесАкц = Мес + МесяцПрибавления;
					Если МесАкц >= 13 Тогда
						МесАкц = 1;
						//ТребуемыйГод = ТребуемыйГод - 1; // Обращаемся к прошлому году.
					КонецЕсли;
					НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, МесАкц, СрокУплатыЕжемесячно), Ложь);
				Иначе
					НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, Мес, СрокУплатыЕжемесячно), Ложь);
				КонецЕсли;

				Если (АкцизнаяСхема) И (Мес = 12) Тогда
						// январь. Изменим период, за который должен составится отчет.
					НовСтр.ЗаПериодС = Дата(ТребуемыйГод - 1, 12 - МесяцПрибавления, 1);
					НовСтр.ЗаПериодПо = КонецМесяца(НовСтр.ЗаПериодС);
				Иначе
					НовСтр.ЗаПериодС = ДобавитьМесяц(Дата(ТребуемыйГод, Мес, 1), -1);
					НовСтр.ЗаПериодПо = КонецМесяца(НовСтр.ЗаПериодС);
				КонецЕсли;

				НовСтр.Периодичность = "Месячная";
				НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
				НовСтр.Кто = СрокУплатыЕжемесячноКто;

			КонецЦикла;
		КонецЕсли;

		Если НЕ ПустаяСтрока(СрокУплатыЕжеквартально) Тогда
			Для Квартал = 1 По 4 Цикл
				НовСтр = ТаблицаСроковУплат.Добавить();
				НовСтр.НалогПолноеНазв = НазваниеНалога;

				Если Квартал = 4 Тогда
					// Обрабатывать данную ситуацию необходимо в блоке, который отвечает за ежегодность.
					Продолжить;

				ИначеЕсли Квартал < 4 Тогда

					Если Найти(СрокУплатыЕжеквартально, "ПОЛУГОДИЕ") > 0 Тогда

						ЧислоОтчета = Сред(СрокУплатыЕжеквартально, 10);
						// режим отчета формы, только за полугодие. Пример ЕСХН.
						СрокСдачи = Дата(ТребуемыйГод, 7, ЧислоОтчета);
						СрокСдачи = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
						НовСтр.СрокУплаты = СрокСдачи;
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, 6, 1));
						НовСтр.Периодичность = "Квартальная";
						НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
						НовСтр.Кто = СрокУплатыЕжеквартальноКто;
						Прервать;

					ИначеЕсли СрокУплатыЕжеквартально = "ПЧМСЗОП" Тогда
						// Означает Последнее Число Месяца Следующего За Отчетным Периодом. ПЧМСЗОП.
						// Т.е. за 1 кв. - последний день апреля.
						// за 2 кв. - последний день июля.
						// за 3 кв. - последний день октября.
						СрокСдачи = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3) + 1, 1));
						НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(СрокСдачи, Ложь);
					Иначе
						НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, (Квартал * 3) + 1, СрокУплатыЕжеквартально), Ложь);
					КонецЕсли;

					Если ФормаЗаполняетсяНарастающимИтогом Тогда
						НовСтр.ЗаПериодС = Дата(ТребуемыйГод, 1, 1);
						НовСтр.ЗаПериодПо = КонецМесяца(Дата(ТребуемыйГод, (Квартал * 3), 1));
					Иначе
						НовСтр.ЗаПериодС = НачалоКвартала(Дата(ТребуемыйГод, Квартал * 3, 1));
						НовСтр.ЗаПериодПо = КонецКвартала(НовСтр.ЗаПериодС);
					КонецЕсли;

					НовСтр.Периодичность = "Квартальная";
					НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
					НовСтр.Кто = СрокУплатыЕжеквартальноКто;

				КонецЕсли;

			КонецЦикла;

		КонецЕсли;

		Если НЕ ПустаяСтрока(Зап.ЗаГод) Тогда

			// Срок уплаты текущего года.
			НовСтр = ТаблицаСроковУплат.Добавить();
			НовСтр.НалогПолноеНазв = НазваниеНалога;
			НовСтр.СрокУплаты = ПолучитьСледующуюРабочуюДатуДляРегОтчетности1(Дата(ТребуемыйГод, СрокУплатыГодМесяц, СрокУплатыГодДень), Ложь);

			НовСтр.ЗаПериодС = НачалоГода(Дата(ТребуемыйГод - 1, 1, 1));
			НовСтр.ЗаПериодПо = КонецГода(НовСтр.ЗаПериодС);
			НовСтр.Периодичность = "Квартальная"; // формы с нарастающим итогом и только, которые могут сдаваться за год, всегда квартальные.
			НовСтр.НарастающийИтог = ФормаЗаполняетсяНарастающимИтогом;
			НовСтр.Кто = СрокУплатыГодТекст;

		КонецЕсли;
	КонецЦикла;

	Возврат ТаблицаСроковУплат;

КонецФункции // ПостроитьГрафикУплат

// ПолучитьНомерМесяцаИЧислоПоФормату
// Функция осуществляет разбор текстовой строки и возвращает номер месяца и число.
//
// Параметры:
//  СведенияИЗНастройкиМакет - строка, из настройки, описывающая число и месяц уплаты или срока сдачи... формат 28.03
//
// Возвращаемое значение:
//  Структура, число - месяц и номер квартала.
//
Функция ПолучитьНомерМесяцаИЧислоПоФормату(СведенияИзНастройкиМакет)

	Если Найти(СведенияИзНастройкиМакет, ".") > 0 Тогда
		// Указан месяц и число сдачи
		СведенияИзНастройкиЧисло = Число(Сред(СведенияИзНастройкиМакет, 1, Найти(СведенияИзНастройкиМакет, ".") - 1));
		СведенияИзНастройкиМес = Число(Сред(СведенияИзНастройкиМакет, Найти(СведенияИзНастройкиМакет, ".") + 1));
	Иначе
		СведенияИзНастройкиЧисло = СведенияИзНастройкиМакет;
		СведенияИзНастройкиМес = Неопределено;
	КонецЕсли;

	Возврат Новый Структура("ЧислоДень, Месяц", СведенияИзНастройкиЧисло, СведенияИзНастройкиМес);

КонецФункции

// СоздатьТаблицуПоУплатамНалогов
//
Функция СоздатьТаблицуПоУплатамНалогов()

	Строка100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Строка254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);

	ТипДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТаблицаСрокиСдачи = Новый ТаблицаЗначений;

	ТаблицаСрокиСдачи.Колонки.Добавить("НалогПолноеНазв", Строка254); // Полное название отчета из области Ключ НалогКратко.
	ТаблицаСрокиСдачи.Колонки.Добавить("СрокУплаты", ТипДата);

	ТаблицаСрокиСдачи.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
	ТаблицаСрокиСдачи.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По

	ТаблицаСрокиСдачи.Колонки.Добавить("Периодичность", Строка100);
	ТаблицаСрокиСдачи.Колонки.Добавить("Кто", Строка254);
	ТаблицаСрокиСдачи.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);
	Возврат ТаблицаСрокиСдачи;

КонецФункции // СоздатьТаблицуПоУплатамНалогов

Процедура СоздатьТаблицуСроковДействияОтчетности()
	
	МакетаТабл = Обработки.КалендарьБухгалтера.ПолучитьМакет("ДанныеКалендаря");;
	ОбластьМакета = МакетаТабл.Область("СрокиОтчетности");
	мТаблицаСроковОтчетность = Новый ТаблицаЗначений;
	мТаблицаСроковОтчетность.Колонки.Добавить("ИсточникОтчета");
	мТаблицаСроковОтчетность.Колонки.Добавить("Форма");
	мТаблицаСроковОтчетность.Колонки.Добавить("ДатаНачалоДействия", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	мТаблицаСроковОтчетность.Колонки.Добавить("ДатаКонецДействия",ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	мТаблицаСроковОтчетность.Колонки.Добавить("НазваниеОтчетнойФормы");
	Для Ном = ОбластьМакета.Верх По ОбластьМакета.Низ Цикл
		НовСтр = мТаблицаСроковОтчетность.Добавить();
		НовСтр.ИсточникОтчета = МакетаТабл.Область(Ном, 1).Текст;
		НовСтр.Форма = МакетаТабл.Область(Ном, 2).Текст;
		ДатаС = МакетаТабл.Область(Ном, 3).Текст;
		НовСтр.ДатаНачалоДействия = Дата(Прав(ДатаС, 4) + Сред(ДатаС, 4, 2) + Лев(ДатаС, 2));
		ДатаПо = МакетаТабл.Область(Ном, 4).Текст;
		НовСтр.ДатаКонецДействия = ?(ПустаяСтрока(ДатаПо), ОбщегоНазначения.ПустоеЗначениеТипа(Тип("Дата")), Дата(Прав(ДатаПо, 4) + Сред(ДатаПо, 4, 2) + Лев(ДатаПо, 2)));
		НовСтр.НазваниеОтчетнойФормы = МакетаТабл.Область(Ном, 5).Текст;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьТаблицуОбъединений()
	МассивБулево = Новый Массив;
	МассивБулево.Добавить(Тип("Булево"));
	ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

	ТипДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	Строка100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
	Строка254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
	ТаблОбъед = Новый ТаблицаЗначений;
	// Колонки применяемые и при сдачи отчетов и при уплате налогов.
	// Значения колонки статус:
	//    1 - сдача отчета
	//    2 - уплата налога
	//    3 - напоминание о сдаче отчета

	ТаблОбъед.Колонки.Добавить("ДатаЗап", ТипДата);
	ТаблОбъед.Колонки.Добавить("Срок", ТипДата);
	ТаблОбъед.Колонки.Добавить("Статус", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(1));
	ТаблОбъед.Колонки.Добавить("Периодичность", ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
	ТаблОбъед.Колонки.Добавить("НазваниеОтчетаИлиНалога", Строка254);
	ТаблОбъед.Колонки.Добавить("ЗаПериодС", ТипДата);
	ТаблОбъед.Колонки.Добавить("ЗаПериодПо", ТипДата);
	ТаблОбъед.Колонки.Добавить("Кто", Строка254);
	ТаблОбъед.Колонки.Добавить("НарастающийИтог", ОписаниеТиповБулево);

	// Колонки применяемые только при сдаче отчетов.
	ТаблОбъед.Колонки.Добавить("ФормаОтчета", Строка100);
	ТаблОбъед.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата);
	ТаблОбъед.Колонки.Добавить("ИсточникОтчета", Строка100);
	Возврат ТаблОбъед;

КонецФункции

// СформироватьИВыполнитьЗапрос
//
Функция СформироватьИВыполнитьЗапрос(Счет)
	Запрос = Новый Запрос;
	УсловиеПоСчету = "Счет В ИЕРАРХИИ (&Счет50)";
	УсловиеПоСуб = "";
	ИтогиПо = "";
	Если Счет = "51" Тогда
		УсловиеПоСчету = "Счет В (&Счета5152)";
		УсловиеПоСуб = "Субконто1 КАК НазваниеРС,";
		ИтогиПо = "НазваниеРС,";
	КонецЕсли;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ " + УсловиеПоСуб + " 
	| ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	| ЕСТЬNULL(ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт, 0) КАК КонОстДт
	|  ИЗ
	| РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, День,  , " + УсловиеПоСчету + ", , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|  УПОРЯДОЧИТЬ ПО Период
	| 
	| ИТОГИ СУММА (КонОстДт) ПО ОБЩИЕ, " + ИтогиПо + " Период ПЕРИОДАМИ(День, &ДатаНач, &ДатаКон)";

	// Запрос.УстановитьПараметр("ДатаНач", НачалоГода(Период));
	Счета5152 = Новый Массив;
	Счета5152.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	Счета5152.Добавить(ПланыСчетов.Хозрасчетный.ВалютныеСчета);

	Запрос.УстановитьПараметр("ДатаНач", Период - ((мКоличествоДнейАнализа - 1)* 86400));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", ДляОрганизации);
	Запрос.УстановитьПараметр("Счета5152", Счета5152);
	Запрос.УстановитьПараметр("Счет50", ПланыСчетов.Хозрасчетный.Касса);
	Результат = Запрос.Выполнить();
	Возврат Результат;

КонецФункции // СформироватьИВыполнитьЗапрос

// Диаграмма счета 50 и 51.
//
Процедура СформироватьДиаграммуПоДенежнымСчетам()

	ТаблИсточникДанных = Новый ТаблицаЗначений;
	ТаблИсточникДанных.Колонки.Добавить("Период", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ТаблИсточникДанных.Колонки.Добавить("СуммаПоРС", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2));
	ТаблИсточникДанных.Колонки.Добавить("СуммаПоКассе", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(17, 2));

	ЭлементыФормы.ДиаграммаРС.Обновление = Ложь;
	ЭлементыФормы.ДиаграммаРС.Очистить();
	ЭлементыФормы.ДиаграммаРС.АвтоТранспонирование = Ложь;

	// Запрос по расчетным счетам.
	Результат = СформироватьИВыполнитьЗапрос("51");
	ДанныеПоРСВыбраны = НЕ Результат.Пустой();
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЭлементыФормы.ДиаграммаРС.Серии.Добавить("Остаток денежных средств (тыс. руб.)");
	//ЭлементыФормы.ДиаграммаРС.Серии.Добавить("Касса");

	ЭлементыФормы.ДиаграммаРС.Серии[0].Цвет = мЦветРасчетныхСчетов;
	//ЭлементыФормы.ДиаграммаРС.Серии[1].Цвет = мЦветКассы;

	Пока ВыборкаСчет.Следующий() Цикл
		// Сообщить("Итог всего все даты: " + ВыборкаСчет.Период + ", Счет " + ВыборкаСчет.НазваниеРС + " " + ВыборкаСчет.КонОстДт);
		ВсегоНаРасчетныхСчетах = ВыборкаСчет.КонОстДт;

		// Выборка по датам.
		ВыборкаПериод = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
		Пока ВыборкаПериод.Следующий() Цикл
			// Сообщить("Всего по нужной дате: " + ВыборкаПериод.Период + ", Счет " + ВыборкаПериод.НазваниеРС + " " + ВыборкаПериод.КонОстДт);
			НовСтр = ТаблИсточникДанных.Добавить();
			НовСтр.Период = ВыборкаПериод.Период;
			НовСтр.СуммаПоРС = ВыборкаПериод.КонОстДт;
			Точка = ЭлементыФормы.ДиаграммаРС.УстановитьТочку(Формат(ВыборкаПериод.Период, мОбщийФорматДат));
			ЭлементыФормы.ДиаграммаРС.УстановитьЗначение(Точка
			                                                  , ЭлементыФормы.ДиаграммаРС.Серии[0]
			                                                  , ВыборкаПериод.КонОстДт
			                                                  , Неопределено
			                                                  , "Р/с");

		КонецЦикла;
	КонецЦикла;

	// Запрос по кассе.
	Результат50 = СформироватьИВыполнитьЗапрос("50");
	ДанныеПоКассеВыбраны = НЕ Результат50.Пустой();
	ВыборкаСчет = Результат50.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл
		// Сообщить("Итог всего все даты: " + ВыборкаСчет.Период + ", Счет " + ВыборкаСчет.НазваниеРС + " " + ВыборкаСчет.КонОстДт);
		ВсегоВКассе = ВыборкаСчет.КонОстДт;

		// Выборка по датам.
		ВыборкаПериод = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
		Пока ВыборкаПериод.Следующий() Цикл
			// Сообщить("Всего по нужной дате: " + ВыборкаПериод.Период + ", Счет " + ВыборкаПериод.НазваниеРС + " " + ВыборкаПериод.КонОстДт);
			НовСтр = ТаблИсточникДанных.Найти(ВыборкаПериод.Период, "Период");
			Если НовСтр = Неопределено Тогда
				// В том случае, если данных по р/с нет, таблица пустая. Создаем строки.
				НовСтр = ТаблИсточникДанных.Добавить();
				НовСтр.СуммаПоРс = 0;
			КонецЕсли;
			НовСтр.СуммаПоКассе = ВыборкаПериод.КонОстДт;

			Точка = ЭлементыФормы.ДиаграммаРС.УстановитьТочку(Формат(ВыборкаПериод.Период, мОбщийФорматДат));
			ЭлементыФормы.ДиаграммаРС.УстановитьЗначение(Точка
			                                             , ЭлементыФормы.ДиаграммаРС.Серии[0]
			                                             , НовСтр.СуммаПоКассе + НовСтр.СуммаПоРс
			                                             , Неопределено
			                                             , "Остаток денежных средств (тыс. руб.)");

		КонецЦикла;
	КонецЦикла;

	Если (НЕ ДанныеПоРсВыбраны) И (НЕ ДанныеПоКассеВыбраны) Тогда
		ЭлементыФормы.ДиаграммаРС.Серии[0].Текст = ЭлементыФормы.ДиаграммаРС.Серии[0].Текст + Символы.ПС + "(данные отсутствуют)";
	КонецЕсли;

	// Данных по счетам и по кассе нет. Покажем пустую диаграмму.
	Если (НЕ ДанныеПоРсВыбраны) И (НЕ ДанныеПоКассеВыбраны) Тогда
		Для Инд = 1 По мКоличествоДнейАнализа Цикл
			НаЗаданнуюДату = Период - ((мКоличествоДнейАнализа - Инд ) * 86400);
			Точка = ЭлементыФормы.ДиаграммаРС.УстановитьТочку(Формат(НаЗаданнуюДату, мОбщийФорматДат));
			ЭлементыФормы.ДиаграммаРС.УстановитьЗначение(Точка
			                                             , ЭлементыФормы.ДиаграммаРС.Серии[0]
			                                             , 0
			                                             , Неопределено
			                                             , "Остаток денежных средств (тыс. руб.)");
		КонецЦикла;

	КонецЕсли;

	ЭлементыФормы.ДиаграммаРС.АвтоТранспонирование = Истина;
	ЭлементыФормы.ДиаграммаРС.Обновление = Истина;

КонецПроцедуры // СформироватьДиаграмму

// ВызватьПлатежноеПоручениеНаУплатуНалога
//
Процедура ВызватьПлатежноеПоручениеНаУплатуНалога()
	Если Метаданные.Документы.Найти("ПлатежноеПоручениеИсходящее") <> Неопределено Тогда
		ПлатИсх = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
	Иначе
		ПлатИсх = Документы.ПлатежноеПоручение.СоздатьДокумент();
	КонецЕсли;
	
	ПлатИсх.Организация = ДляОрганизации;
	
	Если Метаданные.Перечисления.Найти("ВидыОперацийППИсходящее") <> Неопределено И РегламентированнаяОтчетность.СвойствоОпределено(ПлатИсх, "ВидОперации") Тогда
		ПлатИсх.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога;
	КонецЕсли;
	
	ФормаПер = ПлатИсх.ПолучитьФорму();
	ФормаПер.Открыть();
КонецПроцедуры // ВызватьПлатежноеПоручениеНаУплатуНалога

// ОткрытьПлатПоручениеИлиОтчет
// Параметры:
//  Расшифровка   - структура строки данных.
//  Статус        - 2 - открыть платежное поручение; 1 или 3 - отчеты
//
Процедура ОткрытьПлатПоручениеИлиОтчет(Расшифровка, Статус)
	Если Статус = "2" Тогда
		ВызватьПлатежноеПоручениеНаУплатуНалога();
		Возврат;
	КонецЕсли;

	Если (Статус = "1") Или (Статус = "3") Тогда

		Если Расшифровка.Периодичность = "Месячная" Тогда
			Периодичность = Перечисления.Периодичность.Месяц;
		ИначеЕсли Расшифровка.Периодичность = "Квартальная" Тогда
			Периодичность = Перечисления.Периодичность.Квартал;
		Иначе
			Периодичность = Неопределено;
		КонецЕсли;

		ДатаНач = НачалоДня(Расшифровка.ЗаПериодС);
		ДатаКон = КонецДня(Расшифровка.ЗаПериодПо);

		ИсточникОтчета = Расшифровка.ИсточникОтчета;
		ДокументыОтчета = РегламентированнаяОтчетность.ДокументыСУчетомКритериевОтбораКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, ДляОрганизации, "", Расшифровка.Периодичность);

		Если ДокументыОтчета <> 0 Тогда
			мВыбраннаяФормаКалендаря = ИсточникОтчета;
			мПериодичностьКалендарь = "Уникальная";
			мДатаКонцаПериодаОтчетаКалендарь = ДатаКон;
			Организация = Новый СписокЗначений;
			Организация.Добавить(ДляОрганизации);
			РезультатВыбора = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВыбораОтчета", ЭтаФорма).ОткрытьМодально();
			мВыбраннаяФормаКалендаря = Неопределено;
			мПериодичностьКалендарь = Неопределено;
			мДатаКонцаПериодаОтчетаКалендарь = Неопределено;

			Если РезультатВыбора = Истина Тогда // создаем новый отчет
				РегламентированнаяОтчетность.ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ДляОрганизации);
			ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
				РезультатВыбора.ПолучитьФорму().Открыть();
			КонецЕсли;
		Иначе
			РегламентированнаяОтчетность.ОткрытьРегОтчетКалендарь(ИсточникОтчета, ДатаНач, ДатаКон, Периодичность, ДляОрганизации);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОткрытьПлатПоручениеИлиОтчет

// СформироватьИтогиПоСчетамИКассе(
//
Процедура СформироватьИтогиПоСчетамИКассе()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| СУММА(СуммаНачальныйОстатокДт) КАК НачОстатокРС,
	| СУММА(СуммаКонечныйОстатокДт) КАК КонОстатокРС,
	| Субконто1,
	| 0 КАК НачОстатокРСВал,
	| 0 КАК КонОстатокРСВал,
	| 0 КАК НачОстатокРСВВалютеУчета,
	| 0 КАК КонОстатокРСВВалютеУчета
	| ИЗ
	| РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &Счет51, 
	| , Организация = &Организация ) КАК ОстаткиИОбороты
	| СГРУППИРОВАТЬ ПО СУБКОНТО1
	| ОБЪЕДИНИТЬ ВСЕ
	| ВЫБРАТЬ 
	| СУММА(СуммаНачальныйОстатокДт),
	| СУММА(СуммаКонечныйОстатокДт),
	| Субконто1,
	| СУММА(ВалютнаяСуммаНачальныйОстатокДт) КАК НачОстатокРСВал,
	| СУММА(ВалютнаяСуммаКонечныйОстатокДт) КАК КонОстатокРСВал,
	| СУММА(СуммаНачальныйОстатокДт),
	| СУММА(СуммаКонечныйОстатокДт)
	| ИЗ
	| РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет = &Счет52,  , Организация = &Организация ) КАК ОстаткиИОбороты
	| СГРУППИРОВАТЬ ПО СУБКОНТО1
	| УПОРЯДОЧИТЬ ПО КонОстатокРС";

	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Период));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", ДляОрганизации);
	Запрос.УстановитьПараметр("Счет51", ПланыСчетов.Хозрасчетный.РасчетныеСчета);
	Запрос.УстановитьПараметр("Счет52", ПланыСчетов.Хозрасчетный.ВалютныеСчета);
	ТабличноеПолеДопИнфКДиаграмме = Запрос.Выполнить().Выгрузить();
	ТабличноеПолеДопИнфКДиаграмме.Колонки.Добавить("КолонкаСтрокИтогов");

	// Создадим пустую таблицу для наполнения.
	ТабличноеПолеДопИнфКДиаграмме1 = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеДопИнфКДиаграмме);

	// Получим общую сумму в рублях на всех счетах.
	НачОстатокРС = ТабличноеПолеДопИнфКДиаграмме.Итог("НачОстатокРС");
	КонОстатокРС = ТабличноеПолеДопИнфКДиаграмме.Итог("КонОстатокРС");

	// Получим общую сумму в валюте. Валютные итоги.
	НачОстатокРСВВалютеУчета = ТабличноеПолеДопИнфКДиаграмме.Итог("НачОстатокРСВВалютеУчета");
	КонОстатокРСВВалютеУчета = ТабличноеПолеДопИнфКДиаграмме.Итог("КонОстатокРСВВалютеУчета");
	ЕстьВалОстатки = Ложь;
	Если (НачОстатокРСВВалютеУчета <> 0) Или (КонОстатокРСВВалютеУчета <> 0) Тогда
		ЕстьВалОстатки = Истина;
	КонецЕсли;

	// Запрос данных по КАССЕ.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|СУММА(СуммаНачальныйОстатокДт) КАК НачОстатокРС,
	|СУММА(СуммаКонечныйОстатокДт) КАК КонОстатокРС
	|ИЗ
	|РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон, , , Счет В ИЕРАРХИИ (&Счет), 
	|, Организация = &Организация ) КАК ОстаткиИОбороты";
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Период));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", ДляОрганизации);
	Запрос.УстановитьПараметр("Счет", ПланыСчетов.Хозрасчетный.Касса);
	ИтогиКасса = Запрос.Выполнить().Выгрузить();
	НачОстатокКасса = 0;
	КонОстатокКасса = 0;

	Если ИтогиКасса.Количество() > 0 Тогда
		НачОстатокКасса = ИтогиКасса[0].НачОстатокРС;
		КонОстатокКасса = ИтогиКасса[0].КонОстатокРС;
	КонецЕсли;

	// **********************

	// Формируем итоговую строку, ВСЕГО.
	НовСтр = ТабличноеПолеДопИнфКДиаграмме1.Добавить();
	НовСтр.КолонкаСтрокИтогов = ИтогПоДенежнымСчетамТекст;
	// В переменных НачКон НачОстатокРС содержится итог по счету 51 и 52, поэтому прибавляем только Кассу.
	НовСтр.НачОстатокРС = НачОстатокРС + НачОстатокКасса;
	НовСтр.КонОстатокРС = КонОстатокРС + КонОстатокКасса;

	// Формируем итоговую строку по КАССЕ.
	НовСтр = ТабличноеПолеДопИнфКДиаграмме1.Добавить();
	НовСтр.КолонкаСтрокИтогов = "В кассе";
	НовСтр.НачОстатокРС = НачОстатокКасса;
	НовСтр.КонОстатокРС = КонОстатокКасса;

	// Формируем итоговую строку на рублевых счетах
	// Генерируем итоговую строку по счету 51 (в валюте рег. учета)
	НовСтр = ТабличноеПолеДопИнфКДиаграмме1.Добавить();
	НовСтр.КолонкаСтрокИтогов = ?(ЕстьВалОстатки, ИтогПоСчетамТекст, ИтогПоСчетамВСлучаеОтсутствияВалОстатков);
	НовСтр.НачОстатокРС = НачОстатокРС - ?(ЕстьВалОстатки, НачОстатокРСВВалютеУчета, 0);
	НовСтр.КонОстатокРС = КонОстатокРС - ?(ЕстьВалОстатки, КонОстатокРСВВалютеУчета, 0);

	// Если есть Валютные остатки, то генерируем итоговую строку по валютным счетам, чтобы в т.ч. и расшифровка правильно отрабатывалась.
	Если ЕстьВалОстатки Тогда

		ТаблицаВалютныхСчетов = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеДопИнфКДиаграмме);
		ТаблицаРублевыхСчетов = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеДопИнфКДиаграмме);
		Для каждого Зап Из ТабличноеПолеДопИнфКДиаграмме Цикл
			СчетВал = Ложь;
			Если (Зап.НачОстатокРСВал <> 0) Или (Зап.КонОстатокРСВал <> 0) Тогда
				СчетВал = Истина;
			КонецЕсли;

			Если СчетВал Тогда
				СтрокаТаблицыПриемника = ТаблицаВалютныхСчетов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, Зап);
			КонецЕсли;

			Если НЕ СчетВал Тогда
				СтрокаТаблицыПриемника = ТаблицаРублевыхСчетов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, Зап);
			КонецЕсли;

		КонецЦикла;

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРублевыхСчетов, ТабличноеПолеДопИнфКДиаграмме1);

		НовСтр = ТабличноеПолеДопИнфКДиаграмме1.Добавить();
		НовСтр.КолонкаСтрокИтогов = ИтогПоСчетамВалТекст;
		НовСтр.НачОстатокРС = НачОстатокРСВВалютеУчета;
		НовСтр.КонОстатокРС = КонОстатокРСВВалютеУчета;
		НовСтр.НачОстатокРСВВалютеУчета = НачОстатокРСВВалютеУчета;
		НовСтр.КонОстатокРСВВалютеУчета = КонОстатокРСВВалютеУчета;

		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВалютныхСчетов, ТабличноеПолеДопИнфКДиаграмме1);

	Иначе
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабличноеПолеДопИнфКДиаграмме, ТабличноеПолеДопИнфКДиаграмме1);
	КонецЕсли;

КонецПроцедуры // СформироватьИтогиПоСчетамИКассе

// СформироватьОтчет
//
Процедура СформироватьОтчет(ОбновитьПолностью)

	ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных"); 
	ФормаИндикатора.НаименованиеОбработкиДанных = "Монитор бухгалтера";
	ФормаИндикатора.КомментарийОбработкиДанных  = "Получение данных из информационной базы";
	ФормаИндикатора.КомментарийЗначения         = "Получено:";
	ФормаИндикатора.Открыть();

	ФормаИндикатора.МаксимальноеЗначение = 4;

	СформироватьДиаграммуПоДенежнымСчетам();
	ФормаИндикатора.Значение = 1;
	СформироватьИтогиПоСчетамИКассе();
	ФормаИндикатора.Значение = 2;
	СформироватьДиаграммуПоКредиторамДебиторам();
	ФормаИндикатора.Значение = 3;
	ПоказатьКалендарьБухгалтера(ОбновитьПолностью);
	ФормаИндикатора.Значение = 4;
	ФормаИндикатора.Закрыть();

КонецПроцедуры // СформироватьОтчет

// ВозвратитьМассивСчетов
//
Функция ВозвратитьМассивСчетов(ДляКредиторскойЗадолженности)
	ПС = ПланыСчетов["Хозрасчетный"];
	СчетаДебиторскойЗадолж = Новый Массив;

	Если ДляКредиторскойЗадолженности Тогда
		Счет60_01 = ПС.РасчетыСПоставщиками;
		Счет60_03 = ПС.ВекселяВыданные;
		Счет60_21 = ПС.РасчетыСПоставщикамиВал;
		Счет60_31 = ПС.РасчетыСПоставщикамиУЕ;

		Счет62_02 = ПС.РасчетыПоАвансамПолученным;
		Счет62_22 = ПС.РасчетыПоАвансамПолученнымВал;
		Счет62_32 = ПС.РасчетыПоАвансамПолученнымУЕ;

		Счет71    = ПС.РасчетыСПодотчетнымиЛицами_;
		Счет71_01 = ПС.РасчетыСПодотчетнымиЛицами;
		Счет71_21 = ПС.РасчетыСПодотчетнымиЛицамиВал;

		Счет76_01 = ПС.РасчетыПоИмущественномуИЛичномуСтрахованию;
		Счет76_03 = ПС.РасчетыПоПричитающимсяДивидендам;
		Счет76_04 = ПС.РасчетыПоДепонированнымСуммам;
		Счет76_05 = ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками;
		Счет76_06 = ПС.РасчетыСПрочимиПокупателямиИЗаказчиками;
		Счет76_09 = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;

		Счет76_21 = ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал;
		Счет76_25 = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
		Счет76_26 = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
		Счет76_29 = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
		Счет76_35 = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
		Счет76_36 = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
		Счет76_39 = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
		Счет76_41 = ПС.РасчетыПоИсполнительнымДокументамРаботников;

		Счет76_Н  = ПС.РасчетыПоНДСотложенномуДляУплатыВБюджет;
		Счет79    = ПС.ВнутрихозяйственныеРасчеты;
		Счет79_01 = ПС.РасчетыПоВыделенномуИмуществу;
		Счет79_02 = ПС.РасчетыПоТекущимОперациям;
		Счет79_03 = ПС.РасчетыПоДоговоруДоверительногоУправленияИмуществом;

		СчетаДебиторскойЗадолж.Добавить(Счет60_01);
		СчетаДебиторскойЗадолж.Добавить(Счет60_03);
		СчетаДебиторскойЗадолж.Добавить(Счет60_21);
		СчетаДебиторскойЗадолж.Добавить(Счет60_31);

		СчетаДебиторскойЗадолж.Добавить(Счет62_02);
		СчетаДебиторскойЗадолж.Добавить(Счет62_22);
		СчетаДебиторскойЗадолж.Добавить(Счет62_32);

		СчетаДебиторскойЗадолж.Добавить(Счет71);
		//СчетаДебиторскойЗадолж.Добавить(Счет71_01);
		//СчетаДебиторскойЗадолж.Добавить(Счет71_21);

		СчетаДебиторскойЗадолж.Добавить(Счет76_01);
		СчетаДебиторскойЗадолж.Добавить(Счет76_03);
		СчетаДебиторскойЗадолж.Добавить(Счет76_04);
		СчетаДебиторскойЗадолж.Добавить(Счет76_05);
		СчетаДебиторскойЗадолж.Добавить(Счет76_06);
		СчетаДебиторскойЗадолж.Добавить(Счет76_09);
		СчетаДебиторскойЗадолж.Добавить(Счет76_21);
		СчетаДебиторскойЗадолж.Добавить(Счет76_25);
		СчетаДебиторскойЗадолж.Добавить(Счет76_26);
		СчетаДебиторскойЗадолж.Добавить(Счет76_29);
		СчетаДебиторскойЗадолж.Добавить(Счет76_35);
		СчетаДебиторскойЗадолж.Добавить(Счет76_36);
		СчетаДебиторскойЗадолж.Добавить(Счет76_39);
		СчетаДебиторскойЗадолж.Добавить(Счет76_41);

		СчетаДебиторскойЗадолж.Добавить(Счет76_Н);
		СчетаДебиторскойЗадолж.Добавить(Счет79);
		//СчетаДебиторскойЗадолж.Добавить(Счет79_01);
		//СчетаДебиторскойЗадолж.Добавить(Счет79_02);
		//СчетаДебиторскойЗадолж.Добавить(Счет79_03);
	Иначе
		// *** Дебиторская
		Счет60_02   = ПС.РасчетыПоАвансамВыданным;
		Счет60_22   = ПС.РасчетыПоАвансамВыданнымВал;
		Счет60_32   = ПС.РасчетыПоАвансамВыданнымУЕ;

		Счет62_01   = ПС.РасчетыСПокупателями;

		Счет62_03   = ПС.ВекселяПолученные;

		Счет62_21   = ПС.РасчетыСПокупателямиВал;
		Счет62_31   = ПС.РасчетыСПокупателямиУЕ;
		Счет63      = ПС.РезервыПоСомнительнымДолгам;

		Счет75_01   = ПС.РасчетыПоВкладамВУставныйКапитал;
		Счет76_01   = ПС.РасчетыПоИмущественномуИЛичномуСтрахованию;
		Счет76_02   = ПС.РасчетыПоПретензиям;
		Счет76_03   = ПС.РасчетыПоПричитающимсяДивидендам;
		Счет76_05   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчиками;
		Счет76_06   = ПС.РасчетыСПрочимиПокупателямиИЗаказчиками;
		Счет76_09   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;
		Счет76_21   = ПС.РасчетыПоИмущественномуИЛичномуСтрахованиюВал;
		Счет76_22   = ПС.РасчетыПоПретензиямВал;
		Счет76_25   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;
		Счет76_26   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;
		Счет76_29   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;
		Счет76_32   = ПС.РасчетыПоПретензиямУЕ;
		Счет76_35   = ПС.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;
		Счет76_36   = ПС.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;
		Счет76_39   = ПС.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;
		Счет76_41   = ПС.РасчетыПоИсполнительнымДокументамРаботников;

		СчетаДебиторскойЗадолж.Добавить(Счет60_02);
		СчетаДебиторскойЗадолж.Добавить(Счет60_22);
		СчетаДебиторскойЗадолж.Добавить(Счет60_32);

		СчетаДебиторскойЗадолж.Добавить(Счет62_01);
		СчетаДебиторскойЗадолж.Добавить(Счет62_03);

		СчетаДебиторскойЗадолж.Добавить(Счет62_21);
		СчетаДебиторскойЗадолж.Добавить(Счет62_31);
		СчетаДебиторскойЗадолж.Добавить(Счет63);

		СчетаДебиторскойЗадолж.Добавить(Счет75_01);

		СчетаДебиторскойЗадолж.Добавить(Счет76_01);
		СчетаДебиторскойЗадолж.Добавить(Счет76_02);
		СчетаДебиторскойЗадолж.Добавить(Счет76_03);
		СчетаДебиторскойЗадолж.Добавить(Счет76_05);
		СчетаДебиторскойЗадолж.Добавить(Счет76_06);
		СчетаДебиторскойЗадолж.Добавить(Счет76_09);
		СчетаДебиторскойЗадолж.Добавить(Счет76_21);
		СчетаДебиторскойЗадолж.Добавить(Счет76_22);
		СчетаДебиторскойЗадолж.Добавить(Счет76_25);
		СчетаДебиторскойЗадолж.Добавить(Счет76_26);
		СчетаДебиторскойЗадолж.Добавить(Счет76_29);
		СчетаДебиторскойЗадолж.Добавить(Счет76_32);
		СчетаДебиторскойЗадолж.Добавить(Счет76_35);
		СчетаДебиторскойЗадолж.Добавить(Счет76_36);
		СчетаДебиторскойЗадолж.Добавить(Счет76_39);
		СчетаДебиторскойЗадолж.Добавить(Счет76_41);

	КонецЕсли;

	Возврат СчетаДебиторскойЗадолж;

КонецФункции // ВозвратитьМассивСчетов

// СформироватьДиаграммуПоКредиторамДебиторам()
//
Процедура СформироватьДиаграммуПоКредиторамДебиторам()
	ПС = ПланыСчетов["Хозрасчетный"];

	// Бухгалтерские итоги по аналитике
	мБухИтогиРС = Обработки.БухгалтерскиеИтоги.Создать();

	ИтогиРС = "КонечныйОстатокДт, КонечныйОстатокКт, КонечныйРазвернутыйОстатокКт";

	СчетаДебиторскойЗадолж = ВозвратитьМассивСчетов(Истина);

	ТаблРезультатКт = Новый ТаблицаЗначений;
	// ТаблРезультатКт.Колонки.Добавить("Название");
	ТаблРезультатКт.Колонки.Добавить("Период");
	ТаблРезультатКт.Колонки.Добавить("Сумма");
	ТаблРезультатКт.Колонки.Добавить("Субконто1");

	ПределСуммы = 0;

	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ХозрасчетныйОстаткиИОбороты.Счет,
	|ХозрасчетныйОстаткиИОбороты.Субконто1,
	|ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокКт КАК СуммаКонечныйРазвернутыйОстатокКт 
	|ИЗ
	|
	|РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон,День,,Счет В ИЕРАРХИИ (&Счет), &ВидыСубконто, Организация = (&Организация))  КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИТОГИ
	|СУММА(СуммаКонечныйОстатокДт),
	|СУММА(СуммаКонечныйОстатокКт),
	|СУММА(СуммаКонечныйРазвернутыйОстатокКт)
	|ПО
	|Счет ИЕРАРХИЯ,
	|Субконто1 ИЕРАРХИЯ,
	|Период ПЕРИОДАМИ(День, &ДатаНач, &ДатаКон)";

	Запрос.УстановитьПараметр("Счет", СчетаДебиторскойЗадолж);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ДатаНач", Период - ((мКоличествоДнейАнализа - 1)* 86400));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", ДляОрганизации);
	Результат = Запрос.Выполнить();
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл

		РезультатПоиска = СчетаДебиторскойЗадолж.Найти(ВыборкаСчет.Счет);
		Если РезультатПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыборкаСубконто1 = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСубконто1.Следующий() Цикл
			Если ВыборкаСубконто1.Субконто1.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;

			ВыборкаПериод = ВыборкаСубконто1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериод.Следующий() Цикл

				НовСтр = ТаблРезультатКт.Добавить();

				// НовСтр.Счет = ВыборкаСчет.Счет;
				НовСтр.Субконто1 = ВыборкаСубконто1.Субконто1;
				НовСтр.Период = Формат(ВыборкаПериод.Период, мОбщийФорматДат);

				ИтогВыборки = Неопределено;
				Если ВыборкаСчет.Счет.Вид = ВидСчета.АктивноПассивный Тогда
					Реквизит = "СуммаКонечныйРазвернутыйОстатокКт";
				Иначе
					Реквизит = "СуммаКонечныйОстатокКт";
				КонецЕсли;

				// Проверка валидности полей.
				Если ВыборкаСчет.Счет.Вид = ВидСчета.Активный Тогда

					Если ВыборкаПериод.СуммаКонечныйОстатокКт <> 0 Тогда
						ИтогВыборки = 0;
					КонецЕсли;

				КонецЕсли;

				Если ВыборкаСчет.Счет.Вид = ВидСчета.Пассивный Тогда

					Если ВыборкаПериод.СуммаКонечныйОстатокДт <> 0 Тогда
						ИтогВыборки = ВыборкаПериод.СуммаКонечныйОстатокКт + (-ВыборкаПериод.СуммаКонечныйОстатокДт);
					КонецЕсли;

				КонецЕсли;

				Если ИтогВыборки <> Неопределено Тогда
					НовСтр.Сумма = ИтогВыборки;
				Иначе
					НовСтр.Сумма = ВыборкаПериод[Реквизит];
				КонецЕсли;

				// Если значение по счету нулевое, то удалим из таблицы итога.
				Если НовСтр.Сумма = 0 Тогда
					ТаблРезультатКт.Удалить(НовСтр);
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

	НайденныеСтроки = ТаблРезультатКт.НайтиСтроки(Новый Структура("Период", Формат(Период, мОбщийФорматДат)));
	ТабличноеПолеКт.Очистить();

	ТабличноеПолеКтКрупнейшие = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеКт);
	ТабличноеПолеКтПрочие = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеКт);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(НайденныеСтроки, ТабличноеПолеКтКрупнейшие);

	ТабличноеПолеКтКрупнейшие.Свернуть("Субконто1", "Сумма");
	ТабличноеПолеКтКрупнейшие.Сортировать("Сумма УБЫВ");

	КолВоЗаписейВОтчет = 5;
	ВсегоЗап = ТабличноеПолеКтКрупнейшие.Количество();
	Если  ВсегоЗап > КолВоЗаписейВОтчет Тогда
		Для Инд = КолВоЗаписейВОтчет + 1 По ВсегоЗап Цикл
			СтрокаТаблицыПриемника = ТабличноеПолеКтПрочие.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, ТабличноеПолеКтКрупнейшие[КолВоЗаписейВОтчет]);
			ТабличноеПолеКтКрупнейшие.Удалить(КолВоЗаписейВОтчет);
		КонецЦикла;
	КонецЕсли;

	ТабличноеПолеКтКрупнейшиеИтог = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеКтКрупнейшие);
	ТабличноеПолеКтКрупнейшиеИтог.Колонки.Добавить("ИтоговаяСтрока");
	НовСтр = ТабличноеПолеКтКрупнейшиеИтог.Добавить();
	НовСтр.Субконто1 = Неопределено;
	НовСтр.Сумма = ТабличноеПолеКтКрупнейшие.Итог("Сумма");
	НовСтр.ИтоговаяСтрока = Истина;

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабличноеПолеКтКрупнейшие, ТабличноеПолеКтКрупнейшиеИтог);
	// Если данных по прочим, тем которые не вошли в указанное число нет, тогда строчку Прочие НЕ выводим
	Если ТабличноеПолеКтПрочие.Количество() > 0 Тогда
		НовСтр = ТабличноеПолеКтКрупнейшиеИтог.Добавить();
		НовСтр.Субконто1 = Неопределено;
		НовСтр.Сумма = ТабличноеПолеКтПрочие.Итог("Сумма");
		НовСтр.ИтоговаяСтрока = Ложь;
	КонецЕсли;

	ТабличноеПолеКт = ТабличноеПолеКтКрупнейшиеИтог;

	ИтогиРС = "КонечныйОстатокДт, КонечныйРазвернутыйОстатокДт, КонечныйОстатокКт";
	СчетаДебиторскойЗадолж = ВозвратитьМассивСчетов(Ложь);
	ТаблРезультатДт = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТаблРезультатКт);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|ХозрасчетныйОстаткиИОбороты.Счет,
	|ХозрасчетныйОстаткиИОбороты.Субконто1,
	|ХозрасчетныйОстаткиИОбороты.Период КАК Период,
	|ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт КАК СуммаКонечныйОстатокДт,
	|ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт КАК СуммаКонечныйОстатокКт,
	|ХозрасчетныйОстаткиИОбороты.СуммаКонечныйРазвернутыйОстатокДт КАК СуммаКонечныйРазвернутыйОстатокДт 
	|ИЗ
	|
	|РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&ДатаНач, &ДатаКон,День,,Счет В ИЕРАРХИИ (&Счет), &ВидыСубконто, Организация = (&Организация))  КАК ХозрасчетныйОстаткиИОбороты
	|
	|ИТОГИ
	|СУММА(СуммаКонечныйОстатокДт),
	|СУММА(СуммаКонечныйОстатокКт),
	|СУММА(СуммаКонечныйРазвернутыйОстатокДт)
	|ПО
	|Счет ИЕРАРХИЯ,
	|Субконто1 ИЕРАРХИЯ,
	|Период ПЕРИОДАМИ(День, &ДатаНач, &ДатаКон)";

	Запрос.УстановитьПараметр("Счет", СчетаДебиторскойЗадолж);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	Запрос.УстановитьПараметр("ДатаНач", Период - ((мКоличествоДнейАнализа - 1)* 86400));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период));
	Запрос.УстановитьПараметр("Организация", ДляОрганизации);
	Результат = Запрос.Выполнить();
	ВыборкаСчет = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСчет.Следующий() Цикл

		РезультатПоиска = СчетаДебиторскойЗадолж.Найти(ВыборкаСчет.Счет);
		Если РезультатПоиска = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ВыборкаСубконто1 = ВыборкаСчет.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСубконто1.Следующий() Цикл
			Если ВыборкаСубконто1.Субконто1.ЭтоГруппа Тогда
				Продолжить;
			КонецЕсли;

			ВыборкаПериод = ВыборкаСубконто1.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Период", "Все");
			Пока ВыборкаПериод.Следующий() Цикл

				НовСтр = ТаблРезультатДт.Добавить();

				// НовСтр.Счет = ВыборкаСчет.Счет;
				НовСтр.Субконто1 = ВыборкаСубконто1.Субконто1;
				НовСтр.Период = Формат(ВыборкаПериод.Период, мОбщийФорматДат);

				ИтогВыборки = Неопределено;
				Если ВыборкаСчет.Счет.Вид = ВидСчета.АктивноПассивный Тогда
					Реквизит = "СуммаКонечныйРазвернутыйОстатокДт";
				Иначе
					Реквизит = "СуммаКонечныйОстатокДт";
				КонецЕсли;

				// Проверка валидности полей.
				Если ВыборкаСчет.Счет.Вид = ВидСчета.Активный Тогда

					Если ВыборкаПериод.СуммаКонечныйОстатокКт <> 0 Тогда
						ИтогВыборки = ВыборкаПериод.СуммаКонечныйОстатокДт + (-ВыборкаПериод.СуммаКонечныйОстатокКт);
					КонецЕсли;

				КонецЕсли;

				Если ВыборкаСчет.Счет.Вид = ВидСчета.Пассивный Тогда

					Если ВыборкаПериод.СуммаКонечныйОстатокДт <> 0 Тогда
						ИтогВыборки = 0;
					КонецЕсли;

				КонецЕсли;

				Если ИтогВыборки <> Неопределено Тогда
					НовСтр.Сумма = ИтогВыборки;
				Иначе
					НовСтр.Сумма = ВыборкаПериод[Реквизит];
				КонецЕсли;
				
				// Если значение по счету нулевое, то удалим из таблицы итога.
				Если НовСтр.Сумма = 0 Тогда
					ТаблРезультатДт.Удалить(НовСтр);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;

	КонецЦикла;

	НайденныеСтроки = ТаблРезультатДт.НайтиСтроки(Новый Структура("Период", Формат(Период, мОбщийФорматДат)));
	ТабличноеПолеДт.Очистить();

	ТабличноеПолеДтКрупнейшие = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеДт);
	ТабличноеПолеДтПрочие = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеДт);
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(НайденныеСтроки, ТабличноеПолеДтКрупнейшие);

	ТабличноеПолеДтКрупнейшие.Свернуть("Субконто1", "Сумма");
	ТабличноеПолеДтКрупнейшие.Сортировать("Сумма УБЫВ");

	КолВоЗаписейВОтчет = 5;
	ВсегоЗап = ТабличноеПолеДтКрупнейшие.Количество();
	Если  ВсегоЗап > КолВоЗаписейВОтчет Тогда
		Для Инд = КолВоЗаписейВОтчет + 1 По ВсегоЗап Цикл
			СтрокаТаблицыПриемника = ТабличноеПолеКтПрочие.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, ТабличноеПолеДтКрупнейшие[КолВоЗаписейВОтчет]);
			ТабличноеПолеДтКрупнейшие.Удалить(КолВоЗаписейВОтчет);
		КонецЦикла;
	КонецЕсли;

	ТабличноеПолеДтКрупнейшиеИтог = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(ТабличноеПолеДтКрупнейшие);
	ТабличноеПолеДтКрупнейшиеИтог.Колонки.Добавить("ИтоговаяСтрока");
	НовСтр = ТабличноеПолеДтКрупнейшиеИтог.Добавить();
	НовСтр.Субконто1 = Неопределено;
	НовСтр.Сумма = ТабличноеПолеДтКрупнейшие.Итог("Сумма");
	НовСтр.ИтоговаяСтрока = Истина;

	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабличноеПолеДтКрупнейшие, ТабличноеПолеДтКрупнейшиеИтог);

	// Если данных по прочим, тем которые не вошли в указанное число нет, тогда строчку Прочие НЕ выводим
	Если ТабличноеПолеДтПрочие.Количество() > 0 Тогда
		НовСтр = ТабличноеПолеДтКрупнейшиеИтог.Добавить();
		НовСтр.Субконто1 = Неопределено;
		НовСтр.Сумма = ТабличноеПолеДтПрочие.Итог("Сумма");
		НовСтр.ИтоговаяСтрока = Ложь;
	КонецЕсли;

	ТабличноеПолеДт = ТабличноеПолеДтКрупнейшиеИтог;

	// Сведения по диаграмме

	ЭлементыФормы.ДиаграммаКтДт.Обновление = Ложь;
	ЭлементыФормы.ДиаграммаКтДт.Очистить();
	ЭлементыФормы.ДиаграммаКтДт.АвтоТранспонирование = Ложь;

	ЭлементыФормы.ДиаграммаКтДт.Серии.Добавить("Кредиторская задолженность");
	ЭлементыФормы.ДиаграммаКтДт.Серии.Добавить("Дебиторская задолженность");

	ЭлементыФормы.ДиаграммаКтДт.Серии[0].Цвет = Новый Цвет(250, 126, 74);
	ЭлементыФормы.ДиаграммаКтДт.Серии[1].Цвет = Новый Цвет(134, 134, 213);

	// Сгруппируем таблицы по дате, чтобы получить итог на необходимый период.
	ТаблРезультатКтСвернутая = ТаблРезультатКт.Скопировать();
	ТаблРезультатКтСвернутая.Свернуть("Период", "Сумма");
	ТаблРезультатДтСвернутая = ТаблРезультатДт.Скопировать();
	ТаблРезультатДтСвернутая.Свернуть("Период", "Сумма");

	// Для диаграммы установим точки и серии.
	Для Инд = 1 По мКоличествоДнейАнализа Цикл
		НаЗаданнуюДату = Формат(Период - ((мКоличествоДнейАнализа - Инд ) * 86400), мОбщийФорматДат);
		Точка = ЭлементыФормы.ДиаграммаКтДт.УстановитьТочку(НаЗаданнуюДату);

		СуммаПоТочке = 0;
		НайденнаяСтрока = ТаблРезультатКтСвернутая.Найти(НаЗаданнуюДату, "Период");
		Если НайденнаяСтрока <> Неопределено Тогда
			СуммаПоТочке = НайденнаяСтрока.Сумма;
		КонецЕсли;

		ЭлементыФормы.ДиаграммаКтДт.УстановитьЗначение(Точка
													 , ЭлементыФормы.ДиаграммаКтДт.Серии[0]
													 , СуммаПоТочке
													 , Неопределено
													 , "Кредиторская задолженность");

		СуммаПоТочке = 0;
		НайденнаяСтрока = ТаблРезультатДтСвернутая.Найти(НаЗаданнуюДату, "Период");
		Если НайденнаяСтрока <> Неопределено Тогда
			СуммаПоТочке = НайденнаяСтрока.Сумма;
		КонецЕсли;

		ЭлементыФормы.ДиаграммаКтДт.УстановитьЗначение(Точка
													 , ЭлементыФормы.ДиаграммаКтДт.Серии[1]
													 , СуммаПоТочке
													 , Неопределено
													 , "Дебиторская задолженность");
	КонецЦикла;

	ЭлементыФормы.ДиаграммаКтДт.АвтоТранспонирование = Истина;
	ЭлементыФормы.ДиаграммаКтДт.Обновление = Истина;

КонецПроцедуры // СформироватьДиаграммуПоКредиторамДебиторам()

// ОтобразитьЗаписиКДате
//
Процедура ОтобразитьЗаписиКДате()
	РазместитьСведения(Период);
КонецПроцедуры // ОтобразитьЗаписиКДате

// ВызватьОтчетРасшифровку
// Процедура вызывает стандартный бух. отчет Анализ субконто хозрасчетный.
//
// Параметры:
//  ОтчетПоКредиторам - Истина, если расшифровка вызывается из табличного поля Кредиторы, Ложь - дебиторы
//
// Возвращаемое значение:
//  Нет.
//
Процедура ВызватьОтчетРасшифровку(ОтчетПоКредиторам, ВыбраннаяСтрока)
	Отчет = Отчеты["АнализСубконто"].Создать();
	Отчет.РежимРасшифровки = Истина;
	Отчет.НачалоПериода = Период;
	Отчет.КонецПериода  = Период;
	Отчет.Организация   = ДляОрганизации;
	
	СписокВидовСубконто = Новый СписокЗначений;
	СписокВидовСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	
	Отчет.СписокВидовСубконто = СписокВидовСубконто.Скопировать();
	Отчет.Настроить();
	
	Счета = Новый СписокЗначений();
	Счета.ЗагрузитьЗначения(ВозвратитьМассивСчетов(ОтчетПоКредиторам));
	
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Счет", Счета, ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
	
	ЗначениеСубконто1 = Неопределено;
	ВидОтбора = ВидСравненияКомпоновкиДанных.Равно;
	Если ВыбраннаяСтрока.ИтоговаяСтрока = Неопределено Тогда   
		ЗначениеСубконто1 = ВыбраннаяСтрока.Субконто1;
	КонецЕсли;

	ТаблицаКонтрагентов = ?(ОтчетПоКредиторам, ТабличноеПолеКт, ТабличноеПолеДт);
	Если ВыбраннаяСтрока.ИтоговаяСтрока <> Неопределено Тогда
		СписокКонтрагентов = Новый СписокЗначений;
		Для каждого Зап Из ТаблицаКонтрагентов Цикл
			Если Зап.ИтоговаяСтрока = Неопределено Тогда
				СписокКонтрагентов.Добавить(Зап.Субконто1);
			КонецЕсли;
		КонецЦикла;

		ЗначениеСубконто1 = СписокКонтрагентов;
		// Если строка Всего, тогда в списке, если Прочие, тогда не в списке.
		Если ВыбраннаяСтрока.ИтоговаяСтрока = Истина Тогда
			ВидОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидОтбора = ВидСравненияКомпоновкиДанных.НеВСписке;
		КонецЕсли;
	КонецЕсли;
	ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто1", ЗначениеСубконто1, ВидОтбора);
	Для Каждого Показатель Из Отчет.ДанныеОтчета.ПоказателиОтчета Цикл
		Если Показатель.Ключ <> "БУ" Тогда
			Показатель.Значение.Значение = Ложь;
		КонецЕсли;
	КонецЦикла;

	ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры

// ПолучитьТаблицуПредставленияОтчетности
//
Функция ПолучитьТаблицуПредставленияОтчетности(НаДату)
	// Получим структуру таблицы
	Табл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мНакопительнаяТаблицаПредставленияОтчетов);

	//Если НЕ ЭтаФорма.ВладелецФормы.мНеОтображатьНапоминания Тогда
	//	СоздатьНапоминания(НаДату);
	//КонецЕсли;

	Для Инд = 1 По мКоличествоДнейАнализа Цикл
		НаЗаданнуюДату = Период + ((Инд - 1) * 86400);
		Строки = мНакопительнаяТаблицаПредставленияОтчетов.НайтиСтроки(Новый Структура("ПоследняяДатаПредставленияОтчета", НаЗаданнуюДату));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Строки, Табл);
	КонецЦикла;
	Возврат Табл;

КонецФункции // ПолучитьТаблицуПредставленияОтчетности

// ПолучитьТаблицуСроковУплат
//
Функция ПолучитьТаблицуСроковУплат(НаДату)
	// Получим структуру таблицы
	Табл = РегламентированнаяОтчетность.ПолучитьСтруктуруТаблицыРО(мНакопительнаяТаблицаСроковУплат);

	Для Инд = 1 По мКоличествоДнейАнализа Цикл
		НаЗаданнуюДату = Период + ((Инд - 1) * 86400);
		Строки = мНакопительнаяТаблицаСроковУплат.НайтиСтроки(Новый Структура("СрокУплаты", НаЗаданнуюДату));
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(Строки, Табл);
	КонецЦикла;

	Табл.Сортировать("СрокУплаты");
	Возврат Табл;

КонецФункции

// РазместитьСведения
//
Процедура РазместитьСведения(НаДату)

	ТаблОбъедОбщ = ПолучитьТаблицуОбъединений();

	ТаблОтчетности = ПолучитьТаблицуПредставленияОтчетности(НаДату);
	ТаблУплат = ПолучитьТаблицуСроковУплат(НаДату);

	ТаблОбъед = ПолучитьТаблицуОбъединений();
	Для каждого Стр Из ТаблОтчетности Цикл
		НовСтр = ТаблОбъед.Добавить();
		НовСтр.ДатаЗап = НаДату;
		НовСтр.Срок = ?(Стр.Статус, Стр.ДатаПредставленияОтчета, Стр.ПоследняяДатаПредставленияОтчета);
		НовСтр.Статус = ?(Стр.Статус, "3", "1"); // Если статус напоминания, тогда 3, иначе 1.
		НовСтр.Периодичность = Стр.Периодичность;
		НовСтр.НазваниеОтчетаИлиНалога = Стр.НазваниеОтчетнойФормы; // Название отчета.
		НовСтр.ЗаПериодС = Стр.ЗаПериодС;
		НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
		НовСтр.Кто = Стр.КтоСдаетОтчет;
		НовСтр.НарастающийИтог = Стр.ФормаЗаполняетсяНарастающимИтогом;

		НовСтр.ФормаОтчета = Стр.ФормаОтчета;
		НовСтр.ДатаПредставленияОтчета = Стр.ДатаПредставленияОтчета;
		НовСтр.ИсточникОтчета = Стр.Объект;
	КонецЦикла;

	Для каждого Стр Из ТаблУплат Цикл
		НовСтр = ТаблОбъед.Добавить();
		НовСтр.ДатаЗап = НаДату;
		НовСтр.Срок = Стр.СрокУплаты;
		НовСтр.Статус = "2"; // Уплата налога
		НовСтр.Периодичность = Стр.Периодичность;
		НовСтр.НазваниеОтчетаИлиНалога = Стр.НалогПолноеНазв;
		НовСтр.ЗаПериодС = Стр.ЗаПериодС;
		НовСтр.ЗаПериодПо = Стр.ЗаПериодПо;
		НовСтр.Кто = Стр.Кто;
		НовСтр.НарастающийИтог = Стр.НарастающийИтог;
	КонецЦикла;
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблОбъед, ТаблОбъедОбщ);

	// Выводим.
	// ТаблОбъедОбщ.Сортировать("Срок, Статус, ДатаПредставленияОтчета, НазваниеОтчетаИлиНалога, Периодичность");
	ТаблицаСобытийКалендаря = ТаблОбъедОбщ;

КонецПроцедуры // РазместитьСведения

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ К МОНИТОРУ БУХГАЛТЕРА

Процедура КоманднаяПанель1Обновить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Предупреждение("Не заполнена дата, на которую будет формироваться отчет.");
		Возврат;
	КонецЕсли;
		
	мПриПереходеПоЗакладкамМониторОбновить = Ложь;
	ОбновитьОтчет(Истина);
КонецПроцедуры

Процедура КоманднаяПанель1Печать(Кнопка)
	Печать(Истина);
КонецПроцедуры

// ТабличноеПолеДопИнфКДиаграммеВыбор
//
Процедура ТабличноеПолеДопИнфКДиаграммеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если ВыбраннаяСтрока.КолонкаСтрокИтогов = ИтогПоДенежнымСчетамТекст Тогда
		Возврат;
	КонецЕсли;
	Отчет = Отчеты["ОборотноСальдоваяВедомостьПоСчету"].Создать();
	Отчет.РежимРасшифровки = Истина;
	Отчет.НачалоПериода = Период;
	Отчет.КонецПериода  = Период;
	Отчет.Организация   = ДляОрганизации;
	Отчет.Счет          = ПланыСчетов.Хозрасчетный.РасчетныеСчета;

	Если ВыбраннаяСтрока.КолонкаСтрокИтогов = "В кассе" Тогда
		Отчет.Счет = ПланыСчетов.Хозрасчетный.Касса;
	КонецЕсли;

	Если (ЗначениеЗаполнено(ВыбраннаяСтрока.НачОстатокРСВВалютеУчета)) Или (ЗначениеЗаполнено(ВыбраннаяСтрока.КонОстатокРСВВалютеУчета)) Тогда
		Отчет.Счет = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
	КонецЕсли;

	Если (ВыбраннаяСтрока.Субконто1 <> Неопределено) И (НЕ ВыбраннаяСтрока.Субконто1 = Null) Тогда
		ТиповыеОтчеты.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "Субконто1", ВыбраннаяСтрока.Субконто1);
	КонецЕсли;
	Отчет.Настроить();

	ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры // ТабличноеПолеДопИнфКДиаграммеВыбор

// ТабличноеПолеДопИнфКДиаграммеПриВыводеСтроки
//
Процедура ТабличноеПолеДопИнфКДиаграммеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если (ДанныеСтроки.КолонкаСтрокИтогов = ИтогПоСчетамТекст)
	 Или (ДанныеСтроки.КолонкаСтрокИтогов = ИтогПоДенежнымСчетамТекст)
	 Или (ДанныеСтроки.КолонкаСтрокИтогов = ИтогПоСчетамВалТекст)
	 Или (ДанныеСтроки.КолонкаСтрокИтогов = "В кассе") Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	КонецЕсли;

	ОформлениеСтроки.Ячейки.СуммаВВалютеСчета.Видимость = Ложь;

	ОформлениеСтроки.Ячейки.НачОстатокРССтр.Значение = ДанныеСтроки.НачОстатокРС;
	ОформлениеСтроки.Ячейки.КонОстатокРССтр.Значение = ДанныеСтроки.КонОстатокРС;

	Если (ДанныеСтроки.Субконто1 = Неопределено) Или (ДанныеСтроки.Субконто1 = Null) Тогда
		НаимВалюты = "данных нет";
	Иначе
		НаимВалюты = ДанныеСтроки.Субконто1.ВалютаДенежныхСредств.Наименование;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеСтроки.НачОстатокРСВал) Тогда
		ОформлениеСтроки.Ячейки.НачОстатокРССтр.Значение = Формат(ДанныеСтроки.НачОстатокРС, "ЧДЦ=2; ЧН=0") + Символы.ПС + "(" + ДанныеСтроки.НачОстатокРСВал + " " + НаимВалюты + ")";
		ОформлениеСтроки.Ячейки.НачОстатокРССтр.Выравнивание = ГоризонтальноеПоложение.Право;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДанныеСтроки.КонОстатокРСВал) Тогда
		ОформлениеСтроки.Ячейки.КонОстатокРССтр.Значение = Формат(ДанныеСтроки.КонОстатокРС, "ЧДЦ=2; ЧН=0") + Символы.ПС + "(" + ДанныеСтроки.КонОстатокРСВал + " " + НаимВалюты + ")";
		ОформлениеСтроки.Ячейки.КонОстатокРССтр.Выравнивание = ГоризонтальноеПоложение.Право;
	КонецЕсли;

	Если (ДанныеСтроки.Субконто1 <> Неопределено) И (НЕ ДанныеСтроки.Субконто1 = Null) Тогда
		ОформлениеСтроки.Ячейки.НаимБанк.Значение = ДанныеСтроки.Субконто1.Наименование;
		//ОформлениеСтроки.Ячейки.ВидРСчета.Значение = ДанныеСтроки.Субконто1.ВидСчета;
	Иначе
		ОформлениеСтроки.Ячейки.НаимБанк.Значение = ДанныеСтроки.КолонкаСтрокИтогов;
	КонецЕсли;

	СтрочкаПустыеИтоги = 0;
	Если ТипЗнч(ОформлениеСтроки.Ячейки.НачОстатокРССтр.Значение) = Тип("Число") Тогда
		Если ОформлениеСтроки.Ячейки.НачОстатокРССтр.Значение = 0 Тогда
			СтрочкаПустыеИтоги = СтрочкаПустыеИтоги + 1;
			ОформлениеСтроки.Ячейки.НачОстатокРССтр.Значение = "0";
			ОформлениеСтроки.Ячейки.НачОстатокРССтр.Выравнивание = ГоризонтальноеПоложение.Право;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(ОформлениеСтроки.Ячейки.КонОстатокРССтр.Значение) = Тип("Число") Тогда
		Если ОформлениеСтроки.Ячейки.КонОстатокРССтр.Значение = 0 Тогда
			СтрочкаПустыеИтоги = СтрочкаПустыеИтоги + 1;
			ОформлениеСтроки.Ячейки.КонОстатокРССтр.Значение = "0";
			ОформлениеСтроки.Ячейки.КонОстатокРССтр.Выравнивание = ГоризонтальноеПоложение.Право;
		КонецЕсли;
	КонецЕсли;

	//Если (ДанныеСтроки.КолонкаСтрокИтогов = "В кассе") Тогда
	//	// В случае, если Нач и Кон итоги пустые (равны 0) тогда картинку(легенду) выводить не следует, т.к. график пустой.
	//	Если СтрочкаПустыеИтоги <> 2 Тогда
	//		ОформлениеСтроки.Ячейки.Легенда.УстановитьКартинку(БиблиотекаКартинок.СинийКвадрат);
	//	КонецЕсли;
	//ИначеЕсли ((ДанныеСтроки.КолонкаСтрокИтогов = ИтогПоСчетамТекст)
	// Или (ДанныеСтроки.КолонкаСтрокИтогов = ИтогПоСчетамВалТекст)) Тогда
	//	// В случае, если Нач и Кон итоги пустые (равны 0) тогда картинку(легенду) выводить не следует, т.к. график пустой.
	//	Если СтрочкаПустыеИтоги <> 2 Тогда
	//		ОформлениеСтроки.Ячейки.Легенда.УстановитьКартинку(БиблиотекаКартинок.КрасныйКвадрат);
	//	КонецЕсли;
	//КонецЕсли;

КонецПроцедуры

// ТабличноеПолеКтВыбор
//
Процедура ТабличноеПолеКтВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ВызватьОтчетРасшифровку(Истина, ВыбраннаяСтрока);
КонецПроцедуры // ТабличноеПолеКтВыбор

// ТабличноеПолеДтВыбор
//
Процедура ТабличноеПолеДтВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ВызватьОтчетРасшифровку(Ложь, ВыбраннаяСтрока);
КонецПроцедуры // ТабличноеПолеДтВыбор

Процедура ТабличноеПолеКтПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ИтоговаяСтрока = Истина Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.Название.Значение = "Всего";
	ИначеЕсли ДанныеСтроки.ИтоговаяСтрока = Ложь Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.Название.Значение = "Прочие";
	Иначе
		ОформлениеСтроки.Ячейки.Название.Значение = ДанныеСтроки.Субконто1.Наименование;
	КонецЕсли;
КонецПроцедуры

Процедура ТабличноеПолеДтПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ДанныеСтроки.ИтоговаяСтрока = Истина Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.Название.Значение = "Всего";
	ИначеЕсли ДанныеСтроки.ИтоговаяСтрока = Ложь Тогда
		ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
		ОформлениеСтроки.Ячейки.Название.Значение = "Прочие";
	Иначе
		ОформлениеСтроки.Ячейки.Название.Значение = ДанныеСтроки.Субконто1.Наименование;
	КонецЕсли;
КонецПроцедуры

// ТаблицаСобытийКалендаряВыбор
//
Процедура ТаблицаСобытийКалендаряВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	ОткрытьПлатПоручениеИлиОтчет(ВыбраннаяСтрока, ВыбраннаяСтрока.Статус);
	ЭлементыФормы.ТаблицаСобытийКалендаря.ОбновитьСтроки();

КонецПроцедуры // ТаблицаСобытийКалендаряВыбор

// ТаблицаСобытийКалендаряПриВыводеСтроки
//
Процедура ТаблицаСобытийКалендаряПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Статус = ДанныеСтроки.Статус;
	ФормаЗаполняетсяНарастающимИтогом = ДанныеСтроки.НарастающийИтог;
	Периодичность = ДанныеСтроки.Периодичность;
	// Определим статус записи.
	Если Статус = "1" Тогда
		// Сдача отчета
		СтатусЗаписи = мКартинкаСдачаОтчета;
		//ОформлениеСтроки.Шрифт = Новый Шрифт(,,Истина);
	ИначеЕсли Статус = "2" Тогда
		СтатусЗаписи = мКартинкаПлатеж;
	ИначеЕсли Статус = "3" Тогда
		СтатусЗаписи = мКартинкаНапоминание;
	КонецЕсли;

	Если (Периодичность = "Квартальная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
		СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоГода(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
	ИначеЕсли (Периодичность = "Месячная") И (ФормаЗаполняетсяНарастающимИтогом) Тогда
		Если Месяц(ДанныеСтроки.ЗаПериодПо) = 1 Тогда
			СтрПериодОтчета = Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
		Иначе
			СтрПериодОтчета = "Январь - " + Формат(ДанныеСтроки.ЗаПериодПо, "ДФ='ММММ гггг'") + " г." ;
		КонецЕсли;
		СтроковоеПредставлениеПериода = СтрПериодОтчета;
	Иначе
		СтроковоеПредставлениеПериода = ПредставлениеПериода(НачалоДня(ДанныеСтроки.ЗаПериодС), КонецДня(ДанныеСтроки.ЗаПериодПо), "ФП=Истина");
	КонецЕсли;

	СтроковоеПредставлениеПериода = "за " + НРег(СтроковоеПредставлениеПериода);
	ПериодичностьЗаПериод = Периодичность + ", " + Символы.ПС + СтроковоеПредставлениеПериода;

	// Вывод картинки статуса к отчету или платежу
	ОформлениеСтроки.Ячейки.НазваниеОтчетаИлиНалога.УстановитьКартинку(СтатусЗаписи);

	Если Статус = "2" Тогда
		ОформлениеСтроки.Ячейки.Период.Значение = СтроковоеПредставлениеПериода;
	Иначе
		ОформлениеСтроки.Ячейки.Период.Значение = ПериодичностьЗаПериод;
	КонецЕсли;

	//Если ОповещенияПоДанномуСобытияЕсть(ДанныеСтроки, Статус = "2") Тогда
	//	ОформлениеСтроки.Ячейки.КартинкаОповещение.УстановитьКартинку(БиблиотекаКартинок.НапоминаниеРО);
	//КонецЕсли;
	Если ДанныеСтроки.Статус <> "2" Тогда
		ДокументыОтчета = РегламентированнаяОтчетность.ДокументыСУчетомКритериевОтбораКалендарь(ДанныеСтроки.ИсточникОтчета, ДанныеСтроки.ЗаПериодС, ДанныеСтроки.ЗаПериодПо, ДляОрганизации, "", ДанныеСтроки.Периодичность);
		Если ДокументыОтчета <> 0 Тогда
			ОформлениеСтроки.Ячейки.КартинкаОповещение.УстановитьКартинку(БиблиотекаКартинок.Документ);
			ОформлениеСтроки.Ячейки.НазваниеОтчетаИлиНалога.Текст = "(" + ДокументыОтчета + ") " + ОформлениеСтроки.Ячейки.НазваниеОтчетаИлиНалога.Текст;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТаблицаСобытийКалендаряПриВыводеСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ НАЖАТИЯ НА ЗНАЧКИ (ОБЩИЕ)

Функция ОтсечьЦифры(ИсходнаяСтрока)

	ФинальнаяСтрока = ИсходнаяСтрока;
	
	КодСимвола = КодСимвола(Прав(ИсходнаяСтрока, 1));
	
	Если (КодСимвола >= 48 И КодСимвола <= 57) Тогда
		ФинальнаяСтрока = Лев(ИсходнаяСтрока, СтрДлина(ИсходнаяСтрока) - 1);
	КонецЕсли; 
	
	Возврат ФинальнаяСтрока;
		
КонецФункции // ОтсечьЦифры()

Процедура ОбработкаИсключения(ИнформацияОбОшибке)
	
	ПричинаОшибки = ИнформацияОбОшибке().Причина;
	
	Предупреждение(?(ПричинаОшибки = Неопределено ИЛИ ПричинаОшибки.Описание = Неопределено,
					 "При выполнении действия произошла ошибка.",
					 ПричинаОшибки.Описание));
	
КонецПроцедуры // ОбработкаИсключения()

Процедура ОткрытьОбщуюФорму(Элемент)
	
	Попытка
	
		ПолучитьОбщуюФорму(ОтсечьЦифры(Элемент.Имя)).Открыть();
	
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьОбщуюФорму()

Процедура ОткрытьДокумент(Элемент)
	
	Попытка
	
		Форма = Документы[ОтсечьЦифры(Элемент.Имя)].ПолучитьФормуСписка();
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьДокумент()

Процедура ОткрытьЖурналДокументов(Элемент)
	
	Попытка
	
		Форма = ЖурналыДокументов[ОтсечьЦифры(Элемент.Имя)].ПолучитьФорму();
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьЖурналДокументов()

Процедура ОткрытьЖурналРегламентныхДокументов(Элемент)
	
	Если Найти(Элемент.Имя, "РегламентнаяОперация") > 0 Тогда
		 ИмяРегОперации = СтрЗаменить(Элемент.Имя, "РегламентнаяОперация", "");
		 ИмяРегОперации = СтрЗаменить(ИмяРегОперации, "Еще", "");
		 ВидРегОперации = Перечисления.ВидыРегламентныхОпераций[ИмяРегОперации];
	
	Попытка
	
		    Форма = Документы.РегламентнаяОперация.ПолучитьФормуСписка();
			Форма.Отбор["ВидОперации"].ВидСравнения  = ВидСравнения.Равно;
			Форма.Отбор["ВидОперации"].Использование = Истина;
			Форма.Отбор["ВидОперации"].Значение      = ВидРегОперации;
			Форма.ВидТекущейОперации      = ВидРегОперации;
			
			Форма.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
		
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ОткрытьЖурналДокументов()

Процедура ОткрытьОбработку(Элемент)
	
	Попытка
	
		Форма = Обработки[ОтсечьЦифры(Элемент.Имя)].ПолучитьФорму();
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьОбработку()

Процедура ОткрытьОбработкуКакЕсть(Элемент)
	
	Попытка
	
		Форма = Обработки[Элемент.Имя].ПолучитьФорму();
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьОбработку()

Процедура ОткрытьСправочник(Элемент)
	
	Попытка
	
		Форма = Справочники[ОтсечьЦифры(Элемент.Имя)].ПолучитьФормуСписка();
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьСправочник()

Процедура ОткрытьРегистрСведений(Элемент)
	
	Попытка
	
		РегистрыСведений[ОтсечьЦифры(Элемент.Имя)].ПолучитьФормуСписка().Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьРегистрСведений()

Процедура ОткрытьПланВидовРасчета(Элемент)
	
	Попытка
	
		ПланыВидовРасчета[ОтсечьЦифры(Элемент.Имя)].ПолучитьФормуСписка().Открыть();
	
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьПланВидовРасчета()

Процедура ОткрытьОтчет(Элемент)
	
	Попытка
		
		ИмяЭлемента = СтрЗаменить(Элемент.Имя, "Хозрасчетный", "");
		Отчеты[ОтсечьЦифры(ИмяЭлемента)].ПолучитьФорму().Открыть();
	
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьОтчет()

Процедура ОткрытьОборотноСальдовуюВедомостьПоСчету(Элемент)
	
	Попытка
	
		СформироватьСтандартныйОтчет("ОборотноСальдоваяВедомостьПоСчету", 
		                             ПланыСчетов.Хозрасчетный[?(Найти(Нрег(Элемент.Имя), "хозрасчетный") = 0, ОтсечьЦифры(Элемент.Имя), Сред(ОтсечьЦифры(Элемент.Имя), 13))]);
									 
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
									 
КонецПроцедуры // ОткрытьОборотноСальдовуюВедомостьПоСчету()

Процедура ОткрытьАнализСчета(Элемент)
	
	Попытка
	
		СформироватьСтандартныйОтчет("АнализСчета", 
		                             ПланыСчетов.Хозрасчетный[?(Найти(Нрег(Элемент.Имя), "хозрасчетный") = 0, ОтсечьЦифры(Элемент.Имя), Сред(ОтсечьЦифры(Элемент.Имя), 13))]);

	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // ОткрытьАнализСчета()

Процедура СформироватьСтандартныйОтчет(ПараметрОтчет, Счет = Неопределено, Периодичность = Неопределено) Экспорт
	
	Попытка
	
		Если ТипЗнч(ПараметрОтчет) = Тип("Строка") Тогда
			ИмяОтчета = ПараметрОтчет;
		ИначеЕсли ТипЗнч(ПараметрОтчет) = Тип("ОбъектМетаданных") Тогда
			ИмяОтчета = ПараметрОтчет.Имя;
		КонецЕсли;
		
		Отчет = Отчеты[ИмяОтчета].Создать();
		Отчет.РежимРасшифровки = Истина;
		Отчет.Организация = глЗначениеПеременной("ОсновнаяОрганизация");
		
		Если НЕ (Счет = Неопределено) Тогда
			Отчет.Счет = Счет;
		КонецЕсли;
		
		Если НЕ (Периодичность = Неопределено) Тогда
			Отчет.Периодичность = Периодичность;
		КонецЕсли;
		Отчет.Настроить();
		ФормаОтчета = Отчет.ПолучитьФорму(, , Новый УникальныйИдентификатор());
		ФормаОтчета.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры // СформироватьСтандартныйОтчет()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ НАЖАТИЯ НА ЗНАЧКИ (СПЕЦИАЛЬНЫЕ)

Процедура ОткрытьПланСчетов(Элемент)
	
	Попытка
	
		ПланыСчетов[ОтсечьЦифры(СтрЗаменить(Элемент.Имя, "ПланСчетов", ""))].ПолучитьФормуСписка().Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОткрытьРегистрБухгалтерии(Элемент)
	
	Попытка
		
		Форма = РегистрыБухгалтерии[СтрЗаменить(ОтсечьЦифры(Элемент.Имя), "РегистрБухгалтерии", "")].ПолучитьФормуСписка();
		Форма.Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОткрытьРегламентированныеОтчеты(Элемент)
	
	Попытка
	
		Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("УправлениеОтчетностью").Открыть();
		
	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОткрытьКарточкаСчета50ПоДням(Элемент)
	
	СформироватьСтандартныйОтчет("КарточкаСчета", 
	                             ПланыСчетов.Хозрасчетный.Касса,
	                             6);
	
КонецПроцедуры // ОткрытьКарточкаСчета50ПоДням()

Процедура ОткрытьКарточкаСчета51ПоДням(Элемент)
	
	СформироватьСтандартныйОтчет("КарточкаСчета", 
	                             ПланыСчетов.Хозрасчетный.РасчетныеСчета,
	                             6);
	
КонецПроцедуры // ОткрытьКарточкаСчета51ПоДням()


Процедура ИнформацияОКонфигурации(Элемент)
	
	ПоказатьВебСтраницу("");
	
КонецПроцедуры // ИнформаицияОКонфигурации()

Процедура МониторЗаконодательства(Элемент)
	
	ПоказатьВебСтраницу("http://v8.1c.ru/cnt.jsp/:tk_buh8:/http://v8.1c.ru/lawmonitor/");
	
КонецПроцедуры // МониторЗаконодательства()

Процедура Сайт1С(Элемент)
	
	ПоказатьВебСтраницу("http://www.1c.ru");
	
КонецПроцедуры // Сайт1С()

Процедура Сайт1СПредприятие8(Элемент)
	
	ПоказатьВебСтраницу("http://v8.1c.ru");
	
КонецПроцедуры // Сайт1СПредприятие8()

Процедура РЦКО(Элемент)
	
	ПоказатьВебСтраницу("http://www.1c.ru/rus/partners/rcko/");
	
КонецПроцедуры // РЦКО()

Процедура СайтБУХру(Элемент)
	
	ПоказатьВебСтраницу("http://v8.1c.ru/cnt.jsp/:tk_buh8:/http://buh.ru/");

КонецПроцедуры // СайтБУХру()

Процедура ИнтернетИТС(Элемент)
	
	ПоказатьВебСтраницу("http://v8.1c.ru/cnt.jsp/:tk_buh8:/http://its.1c.ru/");
	
КонецПроцедуры // ИнтернетИТС()

Процедура СообщениеВТехподдержку(Элемент)
	
	РаботаСДиалогами.ОтправитьСообщениеВОтделТехническойПоддержки();
	
КонецПроцедуры // СообщениеВТехподдержку()

Процедура ОткрытьСсылкуНаСайтеИТС(Элемент)
	
	Попытка
		
		ТекстСсылки = Элемент.Имя;
		ТекстСсылки = СтрЗаменить(ТекстСсылки, "СсылкаИТС_", "");
		ТекстСсылки = ОтсечьЦифры(ТекстСсылки);
		
		ПоказатьВебСтраницу("http://its.1c.ru/bmk/bp20/" + ТекстСсылки, "Сайт ИТС");

	Исключение
		
		ОбработкаИсключения(ИнформацияОбОшибке());
		
	КонецПопытки;
	
КонецПроцедуры

Процедура НайтиНаСайтеИТС(Элемент)
	
	ОткрытьРезультатПоискаНаСайтеИТС();
	
КонецПроцедуры

Процедура СтрокаПоискаНаСайтеИТСПриИзменении(Элемент)
	
	ОткрытьРезультатПоискаНаСайтеИТС();
	
КонецПроцедуры

Процедура ОткрытьРезультатПоискаНаСайтеИТС()

	Если ПустаяСтрока(СтрокаПоискаНаСайтеИТС) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьВебСтраницу("http://its.1c.ru/db/alldb#search:" + СтрокаПоискаНаСайтеИТС, "Сайт ИТС");

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка подменю "Советы".
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельПредприятие,          "");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельБанк,                 "Банк");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельКасса,                "Касса");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельПокупка,              "Покупка");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельПродажа,              "Продажа");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельСклад,                "Склад");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельВыпускПродукции,      "");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельПереработка,          "");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельПередачаВПереработку, "");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельСпецодежда,           "");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельОС,                   "ОсновныеСредства");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельНМА,                  "");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельЗарплата,             "Зарплата");
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.КоманднаяПанельКадры,                "Кадры");
	
КонецПроцедуры

// Процедура вызывается принажатии кнопки в подменю "Советы" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

Процедура ПриОткрытии()
	
	Чеклист = Неопределено;
	
	ХранилищеЧеклиста = Константы.ГотовностьПрограммыКРаботе.Получить();
	
	Если НЕ ХранилищеЧеклиста = Неопределено Тогда
		Чеклист = ХранилищеЧеклиста.Получить();
	КонецЕсли;
	
	Если ТипЗнч(Чеклист) <> Тип("Соответствие") Тогда
		Чеклист = Новый Соответствие;
	КонецЕсли;
	
	// Установка текущего элемента чеклиста.
	ТекущийЭлементЧеклиста = Неопределено;
	
	Если Чеклист.Количество() = 0 Тогда
		
		ТекущийЭлементЧеклиста = ТаблицаЭлементовЧеклиста[0].ЭлементФормы;
		
    Иначе
	
		Для Каждого СтрокаТаблицыЧеклиста Из ТаблицаЭлементовЧеклиста Цикл
			
			Если Чеклист[СтрокаТаблицыЧеклиста.ЭлементФормы] = Неопределено Тогда
				ТекущийЭлементЧеклиста = СтрокаТаблицыЧеклиста.ЭлементФормы;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Восстановление видимости закладок.
	ДеревоЗакладок = ВосстановитьЗначение("ПанельФункций_ВидимостьЗакладок");
	
	Если ТипЗнч(ДеревоЗакладок) = Тип("ДеревоЗначений") Тогда
	
		Для Каждого Строка Из ДеревоЗакладок.Строки Цикл
			
			СтраницаПанелиФункций = ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(Строка.ИмяЗакладки);
			
			Если СтраницаПанелиФункций = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтраницаПанелиФункций.Видимость = Строка.Видимость;
			
			Если Строка.Строки.Количество() > 0 Тогда
				
				Для Каждого ВложеннаяСтрока Из Строка.Строки Цикл
					
					ЭлементыФормы["ВложеннаяПанель" + Строка.ИмяЗакладки].Страницы[ВложеннаяСтрока.ИмяЗакладки].Видимость = ВложеннаяСтрока.Видимость;
					
				КонецЦикла;
				
			КонецЕсли;
				
		КонецЦикла;
			
		ВидимостьЗакладокЗарплатыИКадров(ДеревоЗакладок);
		
	КонецЕсли;
	
	// Установка настройки пользователя.
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОткрыватьПриЗапускеПанельФункций", Истина);
	
	// Установка текущей страницы.
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.НачалоРаботы.Видимость
	   И НЕ ТекущийЭлементЧеклиста = Неопределено Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.НачалоРаботы;
		
	Иначе
	
		СохраненнаяСтраница = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТекущаяСтраницаПанелиФункций");
		ПозицияРазделителя = Найти(СохраненнаяСтраница, ".");
		Если ПозицияРазделителя > 1 Тогда
			
			ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(Лев(СохраненнаяСтраница, ПозицияРазделителя - 1));
			
			Если ТекущаяСтраница = Неопределено Тогда
				
				ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[0];
				
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраница;
				
			Иначе
				
				ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраница;
				
				ВложеннаяПанель = ЭлементыФормы.Найти("ВложеннаяПанель" + ТекущаяСтраница.Имя);
				
				Если НЕ (ВложеннаяПанель = Неопределено) Тогда
					
					ТекущаяВложеннаяСтраница = ВложеннаяПанель.Страницы.Найти(Сред(СохраненнаяСтраница, ПозицияРазделителя + 1));
					
					Если ТекущаяВложеннаяСтраница = Неопределено Тогда
						ТекущаяВложеннаяСтраница = ВложеннаяПанель.Страницы[0];
					КонецЕсли;
						
					ВложеннаяПанель.ТекущаяСтраница = ТекущаяВложеннаяСтраница;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(СохраненнаяСтраница);
			
			Если ТекущаяСтраница = Неопределено Тогда
				ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[0];
			КонецЕсли;
			
			ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ТекущаяСтраница;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Установка основной организации.
	ОргПоУмолчанию = глЗначениеПеременной("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		ОрганизацияДляОтчета = ОргПоУмолчанию;
	КонецЕсли;
	
	// Установка периода.
	ДатаНач = НачалоГода(ТекущаяДата());
	ДатаКон = КонецДня(ТекущаяДата());
	
	ПредшествующаяДата = НачалоДня(ТекущаяДата()) - 1;
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "Монитор" Тогда
		ИнициализацияМонитораБухгалтера();
		ОбновитьОтчет(Ложь);
		мПриПереходеПоЗакладкамМониторОбновить           = Ложь;
		мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Истина;
	ИначеЕсли ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "ОтчетыДляРуководителя" Тогда
		ОбновитьОперативныеДанные();
		мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Ложь;
		мПриПереходеПоЗакладкамМониторОбновить           = Истина;
	Иначе
		мПриПереходеПоЗакладкамМониторОбновить           = Истина;
		мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Истина;
	КонецЕсли;
	
	ЭлементыФормы.НадписьТекущаяДата.Заголовок = Формат(ТекущаяДата(), "ДЛФ=DD");
	
	// Инициализация списка отчетов для руководителя.
	ЭлементыФормы.ПолеHTMLДокумента.Перейти(ЭтотОбъект.Метаданные().Макеты.ОтчетыДляРуководителя);
	
	УстановитьВидимость(ДеревоЗакладок);
	
КонецПроцедуры

Процедура ИнициализацияМонитораБухгалтера()

	// Операции монитора бухгалтера, не затратные по времени исполнения.
	Период = ОбщегоНазначения.ПолучитьРабочуюДату();

	мМакет = Обработки.КалендарьБухгалтера.ПолучитьМакет("ДанныеКалендаря");;

	ОргПоУмолчанию = глЗначениеПеременной("ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(ОргПоУмолчанию) Тогда
		ДляОрганизации = ОргПоУмолчанию;
	КонецЕсли;

	// Не устанавливаем никакого отбора по ИФНС, т.к. можно выбрать организацию на форме и дублирование функционала ЦУО.
	ОтборКодИФНС = Ложь;
	ОтборПериод = Истина;

	мКартинкаПлатеж = БиблиотекаКартинок.УплатаНалога;
	мКартинкаСдачаОтчета = БиблиотекаКартинок.СдачаРегОтчета;
	мКартинкаНапоминание = БиблиотекаКартинок.НапоминаниеОтчетность;
	СоздатьТаблицуСроковДействияОтчетности();

	СформироватьДанныеПоРегламентированномуКалендарю();

КонецПроцедуры // ИнициализацияМонитораБухгалтера()
	
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПереключениеИнтерфейса" Тогда
		
		УстановитьВидимость();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

Процедура ВидимостьЗакладокЗарплатыИКадров(ДеревоЗакладок = Неопределено)
	
	УчетЗарплатыИКадровВоВнешнейПрограмме = Константы.УчетЗарплатыИКадровВоВнешнейПрограмме.Получить();
	
	Если ДеревоЗакладок = Неопределено Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Зарплата.Видимость = НЕ УчетЗарплатыИКадровВоВнешнейПрограмме;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Кадры.Видимость = НЕ УчетЗарплатыИКадровВоВнешнейПрограмме;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ЗарплатаИКадры.Видимость = УчетЗарплатыИКадровВоВнешнейПрограмме;
	Иначе	
		
		СтрокаЗарплатаИКадры = ДеревоЗакладок.Строки.Найти("ЗарплатаИКадры","ИмяЗакладки");
		СтрокаЗарплата = ДеревоЗакладок.Строки.Найти("Зарплата","ИмяЗакладки");
		СтрокаКадры = ДеревоЗакладок.Строки.Найти("Кадры","ИмяЗакладки");
		
		Если УчетЗарплатыИКадровВоВнешнейПрограмме Тогда			
			ЭлементыФормы.ОсновнаяПанель.Страницы.Зарплата.Видимость = Ложь;
			ЭлементыФормы.ОсновнаяПанель.Страницы.Кадры.Видимость = Ложь;
			Если СтрокаЗарплатаИКадры = Неопределено Тогда
				ЭлементыФормы.ОсновнаяПанель.Страницы.ЗарплатаИКадры.Видимость = Истина;
			Иначе
				ЭлементыФормы.ОсновнаяПанель.Страницы.ЗарплатаИКадры.Видимость = СтрокаЗарплатаИКадры.Видимость И УчетЗарплатыИКадровВоВнешнейПрограмме;
			КонецЕсли;
		Иначе
			Если СтрокаЗарплата = Неопределено Тогда
				ЭлементыФормы.ОсновнаяПанель.Страницы.Зарплата.Видимость = Истина;
			Иначе
				ЭлементыФормы.ОсновнаяПанель.Страницы.Зарплата.Видимость = СтрокаЗарплата.Видимость;
			КонецЕсли;
			Если СтрокаКадры = Неопределено Тогда
				ЭлементыФормы.ОсновнаяПанель.Страницы.Кадры.Видимость = Истина;
			Иначе
				ЭлементыФормы.ОсновнаяПанель.Страницы.Кадры.Видимость = СтрокаКадры.Видимость;
			КонецЕсли;
			ЭлементыФормы.ОсновнаяПанель.Страницы.ЗарплатаИКадры.Видимость = Ложь;
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимость(ДеревоЗакладок = Неопределено)
	
	ИнтерфейсУСН = ГлавныйИнтерфейс.УСН.Видимость;
	// {УчетДоходовИРасходовИП
	ИнтерфейсИП  = ГлавныйИнтерфейс.НДФЛИП.Видимость;
	// }УчетДоходовИРасходовИП
	
	// Предприятие
	Если ИнтерфейсУСН Тогда
		ЭлементыФормы.ПанельПредприятие.ТекущаяСтраница = ЭлементыФормы.ПанельПредприятие.Страницы.УСН;
	// {УчетДоходовИРасходовИП
	ИначеЕсли ИнтерфейсИП Тогда
		ЭлементыФормы.ПанельПредприятие.ТекущаяСтраница = ЭлементыФормы.ПанельПредприятие.Страницы.ИП;
	// }УчетДоходовИРасходовИП
	Иначе
		ЭлементыФормы.ПанельПредприятие.ТекущаяСтраница = ЭлементыФормы.ПанельПредприятие.Страницы.ВсеСистемыНалогообложения;
	КонецЕсли;
	
	// Банк
	ЭлементыФормы.РегистрацияСчетовФактурНаАванс.Видимость       = НЕ ИнтерфейсУСН;
	ЭлементыФормы.ПолеКартинки116.Видимость                      = НЕ ИнтерфейсУСН;
	ЭлементыФормы.РегистрацияОплатыНДСВБюджет.Видимость          = НЕ ИнтерфейсУСН;
	
	// Касса
	ЭлементыФормы.РегистрацияСчетовФактурНаАванс1.Видимость       = НЕ ИнтерфейсУСН;

	// Покупка
	ЭлементыФормы.Надпись135.Видимость                        = НЕ ИнтерфейсУСН;
	ЭлементыФормы.ОтчетПоНаличиюСчетовФактур.Видимость        = НЕ ИнтерфейсУСН;
	ЭлементыФормы.ЖурналУчетаПолученныхСчетовФактур.Видимость = НЕ ИнтерфейсУСН;
	ЭлементыФормы.КнигаПокупок.Видимость                      = НЕ ИнтерфейсУСН;
	ЭлементыФормы.ПомощникПоУчетуНДС.Видимость                = НЕ ИнтерфейсУСН;
	
	// Продажа
	ЭлементыФормы.Надпись134.Видимость                      = НЕ ИнтерфейсУСН;
	ЭлементыФормы.ЖурналУчетаВыданныхСчетовФактур.Видимость = НЕ ИнтерфейсУСН;
	ЭлементыФормы.КнигаПродаж.Видимость                     = НЕ ИнтерфейсУСН;
	ЭлементыФормы.ПомощникПоУчетуНДС1.Видимость             = НЕ ИнтерфейсУСН;

	// Зарплата
	ВидимостьЗакладокЗарплатыИКадров(ДеревоЗакладок);
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.НачалоРаботы.Видимость Тогда
		УстановитьВидимостьЧеклиста();
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость 

Процедура НастройкаПанелиФункций(Кнопка)
	
	ВидимостьМонитораДоИзмененияНастроек = ЭлементыФормы.ОсновнаяПанель.Страницы.найти("Монитор").Видимость;
	ВидимостьОперативныхДанныхДоИзмененияНастроек = ЭлементыФормы.ОсновнаяПанель.Страницы.найти("ОтчетыДляРуководителя").Видимость;
	ЗакрытьПанельФункций = ОбработкаОбъект.ПолучитьФорму("Настройка", ЭтаФорма).ОткрытьМодально();

	// В случае, если вкладка Монитор не отображалась, а после Настройки стала отображаться (включена), тогда
	// сформируем данные для монитора бухгалтера.
	Если (НЕ ВидимостьМонитораДоИзмененияНастроек) И (ЭлементыФормы.ОсновнаяПанель.Страницы.Найти("Монитор").Видимость) И (ЗакрытьПанельФункций <> Истина) Тогда
		// Обновим монитор здесь, чтобы при пересчелкивании не было задержки.
		ОбновитьОтчет(Ложь); // Для быстроты, без обновления производственного календаря.
		мПриПереходеПоЗакладкамМониторОбновить = Ложь;
	КонецЕсли;
	
	// В случае, если вкладка Руководителю не отображалась, а после Настройки стала отображаться (включена), тогда
	// сформируем оперативные данные.
	Если (НЕ ВидимостьОперативныхДанныхДоИзмененияНастроек) И (ЭлементыФормы.ОсновнаяПанель.Страницы.Найти("ОтчетыДляРуководителя").Видимость) И (ЗакрытьПанельФункций <> Истина) Тогда
		ОбновитьОперативныеДанные();
		мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Ложь;
	КонецЕсли;
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.НачалоРаботы.Видимость Тогда
		УстановитьВидимостьЧеклиста();
	КонецЕсли;
	
	Если ЗакрытьПанельФункций = Истина Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	
	ВложеннаяПанель = ЭлементыФормы.Найти("ВложеннаяПанель" + ТекущаяСтраница);
	
	Если НЕ (ВложеннаяПанель = Неопределено) Тогда
		ТекущаяСтраница = ТекущаяСтраница + "." + ВложеннаяПанель.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ТекущаяСтраницаПанелиФункций", ТекущаяСтраница);
	
	ДеревоЗакладок = Новый ДеревоЗначений;
	ДеревоЗакладок.Колонки.Добавить("Закладка");
	ДеревоЗакладок.Колонки.Добавить("ИмяЗакладки");
	ДеревоЗакладок.Колонки.Добавить("Видимость");
	
	// Добавляем закладки Основной панели.
	Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		
		НоваяСтрока = ДеревоЗакладок.Строки.Добавить();
		НоваяСтрока.Закладка    = Страница.Заголовок;
		НоваяСтрока.ИмяЗакладки = Страница.Имя;
		НоваяСтрока.Видимость   = Страница.Видимость;
		
	КонецЦикла;
	
	// Добавляем закладки вложенных панелей.
	Для Каждого ЭлементУправления Из ЭлементыФормы Цикл
		
		Если Лев(ЭлементУправления.Имя, 15) = "ВложеннаяПанель" Тогда

			СтрокаДереваЗакладок = ДеревоЗакладок.Строки.Найти(Сред(ЭлементУправления.Имя, 16), "ИмяЗакладки");
			
			Если НЕ (СтрокаДереваЗакладок = Неопределено) Тогда
				
				Для Каждого Страница Из ЭлементУправления.Страницы Цикл
					
					НоваяСтрока = СтрокаДереваЗакладок.Строки.Добавить();
					НоваяСтрока.Закладка    = Страница.Заголовок;
					НоваяСтрока.ИмяЗакладки = Страница.Имя;
					НоваяСтрока.Видимость   = Страница.Видимость;
					
				КонецЦикла;
								
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СохранитьЗначение("ПанельФункций_ВидимостьЗакладок", ДеревоЗакладок);
	
	// Сохранение чеклиста.
	ХранилищеЧеклиста = Новый ХранилищеЗначения(Чеклист);
	Константы.ГотовностьПрограммыКРаботе.Установить(ХранилищеЧеклиста);
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если (мПриПереходеПоЗакладкамМониторОбновить = Истина) И (Элемент.ТекущаяСтраница.Имя = "Монитор") Тогда
		ИнициализацияМонитораБухгалтера();
		мПриПереходеПоЗакладкамМониторОбновить = Ложь;
		ОбновитьОтчет(Ложь); // Без рег. календаря.
	ИначеЕсли (мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Истина) И (Элемент.ТекущаяСтраница.Имя = "ОтчетыДляРуководителя") Тогда
		ОбновитьОперативныеДанные();  
		мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Ложь;
	КонецЕсли;
	
КонецПроцедуры


Процедура НадписьКакПользоватьсяОтчетамиНажатие(Элемент)
	
	ФормаОписанияОбновлений = ОбработкаОбъект.ПолучитьФорму("Информация");
	ФормаОписанияОбновлений.ВладелецФормы = ЭтаФорма;
	ФормаОписанияОбновлений.Заголовок = "Как пользоваться отчетами";
	ФормаОписанияОбновлений.ЭлементыФормы.ПолеHTMLДокумента.Перейти(ЭтотОбъект.Метаданные().Макеты.ИнструкцияПоОтчетамРуководителя);
	ФормаОписанияОбновлений.Открыть();
	
КонецПроцедуры

Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ТиповыеОтчеты.НастроитьПериод(Новый НастройкаПериода, ДатаНач, ДатаКон);	
	
КонецПроцедуры

Процедура ОперативныеДанныеТаблица1ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.Изменение <> 0 Тогда
			ОформлениеСтроки.Ячейки.Изменение.Текст = ОформлениеСтроки.Ячейки.Изменение.Текст + "%";
		Иначе
			ОформлениеСтроки.Ячейки.Изменение.Текст = "-";
			ОформлениеСтроки.Ячейки.Изменение.Выравнивание = ГоризонтальноеПоложение.Центр; 
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.Изменение > 0 Тогда
		
			ОформлениеСтроки.Ячейки.Изменение.ЦветТекста = WebЦвета.Зеленый;
			ОформлениеСтроки.Ячейки.Изменение.Текст = "+" + ОформлениеСтроки.Ячейки.Изменение.Текст;
			
			Если ОформлениеСтроки.ДанныеСтроки.Изменение > 1000 Тогда
				ОформлениеСтроки.Ячейки.Изменение.Текст = ">1000%";
			КонецЕсли;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Изменение < 0 Тогда
			
			ОформлениеСтроки.Ячейки.Изменение.ЦветТекста = WebЦвета.Малиновый;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОперативныеДанныеТаблица2ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаМесяц <> 0 Тогда
			ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Текст = ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Текст + "%";
		Иначе
			ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Текст = "-";
			ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Выравнивание = ГоризонтальноеПоложение.Центр; 
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаМесяц > 0 Тогда
		
			ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.ЦветТекста = WebЦвета.Зеленый;
			ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Текст = "+" + ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Текст;
			
			Если ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаМесяц > 1000 Тогда
				ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.Текст = ">1000%";
			КонецЕсли;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаМесяц < 0 Тогда
			
			ОформлениеСтроки.Ячейки.ИзменениеЗаМесяц.ЦветТекста = WebЦвета.Малиновый;
			
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаГод <> 0 Тогда
			ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Текст = ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Текст + "%";
		Иначе
			ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Текст = "-";
			ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Выравнивание = ГоризонтальноеПоложение.Центр; 
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаГод > 0 Тогда
		
			ОформлениеСтроки.Ячейки.ИзменениеЗаГод.ЦветТекста = WebЦвета.Зеленый;
			ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Текст = "+" + ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Текст;
			
			Если ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаГод > 1000 Тогда
				ОформлениеСтроки.Ячейки.ИзменениеЗаГод.Текст = ">1000%";
			КонецЕсли;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.ИзменениеЗаГод < 0 Тогда
			
			ОформлениеСтроки.Ячейки.ИзменениеЗаГод.ЦветТекста = WebЦвета.Малиновый;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОперативныеДанныеТаблица3ПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.Изменение <> 0 Тогда
			ОформлениеСтроки.Ячейки.Изменение.Текст = ОформлениеСтроки.Ячейки.Изменение.Текст + "%";
		Иначе
			ОформлениеСтроки.Ячейки.Изменение.Текст = "-";
			ОформлениеСтроки.Ячейки.Изменение.Выравнивание = ГоризонтальноеПоложение.Центр; 
		КонецЕсли;
		
		Если ОформлениеСтроки.ДанныеСтроки.Изменение > 0 Тогда
			
			Если Найти(ОформлениеСтроки.ДанныеСтроки.Показатель, "Оборотные средства") > 0 Тогда
				ОформлениеСтроки.Ячейки.Изменение.ЦветТекста = WebЦвета.Зеленый;
			Иначе
				ОформлениеСтроки.Ячейки.Изменение.ЦветТекста = WebЦвета.Малиновый;
			КонецЕсли;
			
			ОформлениеСтроки.Ячейки.Изменение.Текст = "+" + ОформлениеСтроки.Ячейки.Изменение.Текст;
			
			Если ОформлениеСтроки.ДанныеСтроки.Изменение > 1000 Тогда
				ОформлениеСтроки.Ячейки.Изменение.Текст = ">1000%";
			КонецЕсли;
			
		ИначеЕсли ОформлениеСтроки.ДанныеСтроки.Изменение < 0 Тогда
			
			Если Найти(ОформлениеСтроки.ДанныеСтроки.Показатель, "Оборотные средства") > 0 Тогда
				ОформлениеСтроки.Ячейки.Изменение.ЦветТекста = WebЦвета.Малиновый;
			Иначе
				ОформлениеСтроки.Ячейки.Изменение.ЦветТекста = WebЦвета.Зеленый;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Найти(ОформлениеСтроки.ДанныеСтроки.Показатель, "просроченная") > 0 Тогда
			
			Если ОформлениеСтроки.ДанныеСтроки.ПроцентСегодня > 0 Тогда
				ОформлениеСтроки.Ячейки.ПроцентСегодня.Текст = "(" + ОформлениеСтроки.Ячейки.ПроцентСегодня.Текст + "%)";
			Иначе
				ОформлениеСтроки.Ячейки.ПроцентСегодня.Текст = "";
			КонецЕсли;
				
			Если ОформлениеСтроки.ДанныеСтроки.ПроцентНачалоМесяца > 0 Тогда
				ОформлениеСтроки.Ячейки.ПроцентНачалоМесяца.Текст = "(" + ОформлениеСтроки.Ячейки.ПроцентНачалоМесяца.Текст + "%)";
			Иначе
				ОформлениеСтроки.Ячейки.ПроцентНачалоМесяца.Текст = "";
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОрганизацияДляОтчетаПриИзменении(Элемент)
	
	ОбновитьОперативныеДанные();
	
КонецПроцедуры

Процедура ОбновитьОперативныеДанные(ОбновитьПолностью = Истина, ОбновитьТолькоДанныеТаблица3 = Ложь)
	
	ФормаИндикатора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных"); 
	ФормаИндикатора.НаименованиеОбработкиДанных = "Оперативные данные";
	ФормаИндикатора.КомментарийОбработкиДанных  = "Получение данных из информационной базы";
	ФормаИндикатора.Открыть();
	
	ФормаИндикатора.МаксимальноеЗначение = ?(ОбновитьПолностью, 9, 3);
	
	ТекущаяДата = ТекущаяДата();
	
	ЭлементыФормы.НадписьТекущаяДата.Заголовок = Формат(ТекущаяДата(), "ДЛФ=DD");
	
	Если Не ОбновитьТолькоДанныеТаблица3 Тогда
		ОперативныеДанныеТаблица1.Очистить();
		
		СтрокаТаблицы = ОперативныеДанныеТаблица1.Добавить();
		ФормаИндикатора.КомментарийЗначения         = "Получение: Денежные средства";
		СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 1);
		ФормаИндикатора.Значение = 1;
		
		СтрокаТаблицы = ОперативныеДанныеТаблица1.Добавить(); 
		ФормаИндикатора.КомментарийЗначения         = "Получение: Продажи";
		СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 2);
		ФормаИндикатора.Значение = 2;
		
		СтрокаТаблицы = ОперативныеДанныеТаблица1.Добавить();
		ФормаИндикатора.КомментарийЗначения         = "Получение: Поступление денежных средств";
		СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 3);
		ФормаИндикатора.Значение = 3;
	КонецЕсли;
	Если ОбновитьПолностью Тогда
		Если Не ОбновитьТолькоДанныеТаблица3 Тогда
			ОперативныеДанныеТаблица2.Очистить();
			
			СтрокаТаблицы = ОперативныеДанныеТаблица2.Добавить();
			ФормаИндикатора.КомментарийЗначения         = "Получение: Продажи за период";
			СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 4);
			ФормаИндикатора.Значение = 4;
			
			СтрокаТаблицы = ОперативныеДанныеТаблица2.Добавить();
			ФормаИндикатора.КомментарийЗначения         = "Получение: Поступление денежных средств за период";
			СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 6);
			ФормаИндикатора.Значение = 6;
		КонецЕсли;
		
		ОперативныеДанныеТаблица3.Очистить();
		
		СтрокаТаблицы = ОперативныеДанныеТаблица3.Добавить();
		ФормаИндикатора.КомментарийЗначения         = "Получение: Задолженность покупателей";
		СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 7);
		ОбщаяЗадолженностьСегодня      = СтрокаТаблицы.Сегодня;
		ОбщаяЗадолженностьНачалоМесяца = СтрокаТаблицы.НачалоМесяца;
		ФормаИндикатора.Значение = 7;
		
		СтрокаТаблицы = ОперативныеДанныеТаблица3.Добавить();
		ФормаИндикатора.КомментарийЗначения         = "Получение: Просроченная задолженность покупателей";
		СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 8);
		СтрокаТаблицы.ПроцентСегодня      = СтрокаТаблицы.Сегодня / ?(ОбщаяЗадолженностьСегодня = 0, 1, ОбщаяЗадолженностьСегодня) * 100;
		СтрокаТаблицы.ПроцентНачалоМесяца = СтрокаТаблицы.НачалоМесяца / ?(ОбщаяЗадолженностьНачалоМесяца = 0, 1, ОбщаяЗадолженностьНачалоМесяца) * 100;
		ФормаИндикатора.Значение = 8;
		
		СтрокаТаблицы = ОперативныеДанныеТаблица3.Добавить();
		ФормаИндикатора.КомментарийЗначения         = "Получение: Оборотные средства"; 
		СтрокаТаблицы.Сегодня      = ОбщаяЗадолженностьСегодня;
		СтрокаТаблицы.НачалоМесяца = ОбщаяЗадолженностьНачалоМесяца;
		СтандартныеОтчеты.ЗаполнитьСтрокуТаблицыОперативныхДанных(ПредшествующаяДата, ТекущаяДата, ОрганизацияДляОтчета, СтрокаТаблицы, 9);
		ФормаИндикатора.Значение = 9;
	КонецЕсли;
	ФормаИндикатора.Закрыть();
	
	мПриПереходеПоЗакладкамОперативныеДанныеОбновить = Ложь;
	
КонецПроцедуры

Процедура ПредшествующаяДатаПриИзменении(Элемент)
	
	ОбновитьОперативныеДанные(Ложь);
	
КонецПроцедуры

// Обработчик события "onClick" поля HTML документа.
// Обрабатывает нажатие мышью на ссылки.
//
Процедура ПолеHTMLДокументаonclick(Элемент, pEvtObj)
	
	Если pEvtObj.returnValue = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	pEvtObj.returnValue = Ложь;
	
	htmlElement = pEvtObj.srcElement;

	Пока htmlElement <> Неопределено И ВРег(htmlElement.tagName) <> "A" Цикл
		htmlElement = htmlElement.parentElement;
	КонецЦикла;

	Если htmlElement = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйОтчет = htmlElement.id;
	
	Если Метаданные.Отчеты.Найти(ВыбранныйОтчет) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка заполнения реквизитов периода.
	Если Метаданные.Отчеты[ВыбранныйОтчет].Реквизиты.Найти("Период") = Неопределено Тогда
		 
		Если НЕ ЗначениеЗаполнено(ДатаНач)
		 ИЛИ НЕ ЗначениеЗаполнено(ДатаКон) Тогда
			Предупреждение("Не заполнены реквизиты периода отчета");
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		    Предупреждение("Не заполнена дата, на которую будет формироваться отчет.");
			Возврат;
		КонецЕсли;		
		
	КонецЕсли;
	
	// Формирование отчета.
	Отчет = Отчеты[ВыбранныйОтчет].ПолучитьФорму(,, Новый УникальныйИдентификатор);
	Отчет.Открыть();
	Отчет.Организация = ОрганизацияДляОтчета;
	
	Если Метаданные.Отчеты[ВыбранныйОтчет].Реквизиты.Найти("Период") = Неопределено Тогда
		Отчет.НачалоПериода = ДатаНач;
		Отчет.КонецПериода  = ДатаКон;
	Иначе
		Отчет.Период = ДатаКон;
	КонецЕсли;	
	
	Если НЕ (Метаданные.Отчеты[ВыбранныйОтчет].Реквизиты.Найти("Интервал") = Неопределено) Тогда
		Отчет.УстановитьИнтервал();
	КонецЕсли;	
	
	Отчет.ОбновитьОтчет();
	
КонецПроцедуры // ПолеHTMLДокументаonclick()

// Обработчик события "onMouseOver" поля HTML документа.
// Обрабатывает подведение указателя мыши к ссылке.
//
Процедура ПолеHTMLДокументаonmouseover(Элемент, pEvtObj)
	
	Если pEvtObj.srcElement.nodeName = "A" Тогда
		
		ВидимостьПодсказки = Истина;
		ОтобразитьПодсказку(Элемент, pEvtObj);
		
	КонецЕсли;
	
КонецПроцедуры // ПолеHTMLДокументаonmouseover()

// Обработчик события "onMouseOut" поля HTML документа.
// Обрабатывает уход указателя мыши со ссылки.
//
Процедура ПолеHTMLДокументаonmouseout(Элемент, pEvtObj)
	
	Если pEvtObj.srcElement.nodeName = "A" Тогда
		
		Подсказка = Элемент.Документ.getElementById("example");
		Подсказка.style.visibility = "hidden";
		
		ВидимостьПодсказки = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ПолеHTMLДокументаonmouseout()

// Обработчик события "onMouseMove" поля HTML документа.
// Обрабатывает движение указателя мыши по ссылке.
//
Процедура ПолеHTMLДокументаonmousemove(Элемент, pEvtObj)
	
	Если pEvtObj.srcElement.nodeName = "A" Тогда
		
		ОтобразитьПодсказку(Элемент, pEvtObj);
		
	КонецЕсли;
	
КонецПроцедуры // ПолеHTMLДокументаonmousemove()

// Управление отображением подсказки к гиперссылкам в списке отчетов руководителя.
//
Процедура ОтобразитьПодсказку(Элемент, Событие)
	
	Если (ВидимостьПодсказки) Тогда
	
		СмещениеX = 18;
		СмещениеY = 8;
	
		Подсказка = Элемент.Документ.getElementById("example");
		
		Картинка     = Элемент.Документ.getElementById("image");
		Картинка.src = Элемент.Документ.location.href + "_files/" + Событие.srcElement.id + ".gif";

		МышьX = Событие.clientX + Элемент.Документ.documentElement.scrollLeft;
		МышьY = Событие.clientY + Элемент.Документ.documentElement.scrollTop;

		ЛеваяГраница  = ?(СмещениеX < 0, СмещениеX * (-1), -1000);
		ПраваяГраница = Элемент.Документ.body.clientWidth - Событие.clientX - СмещениеX;
		
		Если (ПраваяГраница < Подсказка.offsetWidth) Тогда
			Подсказка.style.left = Строка(Элемент.Документ.body.scrollLeft + Событие.clientX - Подсказка.offsetWidth) + "px"
		ИначеЕсли (МышьX < ЛеваяГраница) Тогда
			Подсказка.style.left = "5px";
		Иначе
			Подсказка.style.left = Строка(МышьX + СмещениеX) + "px";
		КонецЕсли;
		
		НижняяГраница = Элемент.Документ.body.clientHeight - Событие.clientY - СмещениеY;
		
		Если (НижняяГраница < Подсказка.offsetHeight) Тогда
			Подсказка.style.top = Строка(Элемент.Документ.body.scrollTop + Событие.clientY - Подсказка.offsetHeight - СмещениеY) + "px"
		Иначе
			Подсказка.style.top = Строка(МышьY + СмещениеY) + "px";
		КонецЕсли;

		Подсказка.style.visibility = "visible";
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура КнопкаОбновитьДанныеНажатие(Элемент)
	
	ОбновитьОперативныеДанные();

КонецПроцедуры

Процедура НадписьАнтикризисныйАнализНажатие(Элемент)
	
	ПоказатьВебСтраницу("http://v8.1c.ru/anticrisis");
	
КонецПроцедуры

Процедура СчетаУчетаРасчетовНажатие(Элемент)
	
	Если СтандартныеОтчеты.РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(1) Тогда
		ОбновитьОперативныеДанные(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЧеклиста()
	
	Для Каждого СтрокаТаблицыЭлементов Из ТаблицаЭлементовЧеклиста Цикл
		
		ЭтоАктивныйЭлемент = (ТекущийЭлементЧеклиста = СтрокаТаблицыЭлементов.ЭлементФормы);
		
		ИмяЭлемента = ОтсечьЦифры(СтрокаТаблицыЭлементов.ЭлементФормы);
		
		ЭлементыФормы["Точка" + ИмяЭлемента].Видимость = ЭтоАктивныйЭлемент;
		ЭлементыФормы["Линия" + ИмяЭлемента].Видимость = ЭтоАктивныйЭлемент;
		ЭлементыФормы["Флаг" + ИмяЭлемента].Видимость  = (НЕ Чеклист[СтрокаТаблицыЭлементов.ЭлементФормы] = Неопределено);
		
		Если Чеклист[СтрокаТаблицыЭлементов.ЭлементФормы] = Истина Тогда
			ЭлементыФормы["Флаг" + ИмяЭлемента].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		ИначеЕсли Чеклист[СтрокаТаблицыЭлементов.ЭлементФормы] = Ложь Тогда
			ЭлементыФормы["Флаг" + ИмяЭлемента].Картинка = БиблиотекаКартинок.Пропустить;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаТаблицыЭлементов = ТаблицаЭлементовЧеклиста.Найти(ТекущийЭлементЧеклиста, "ЭлементФормы");
	
	Для ИндексКолонки = 1 По 3 Цикл
		
		Для ИндексСтроки = 0 По 6 Цикл
			
			ЭлементыФормы["Колонка" + ИндексКолонки + "Линия" + ИндексСтроки].Видимость = 
			?(СтрокаТаблицыЭлементов = Неопределено, Ложь,
			((СтрокаТаблицыЭлементов.Колонка = ИндексКолонки) И ((СтрокаТаблицыЭлементов.Строка + 1) >= ИндексСтроки)));
		
		КонецЦикла;
		
		Если СтрокаТаблицыЭлементов = Неопределено Тогда
			
			ЭлементыФормы["ПанельПомощника" + ИндексКолонки].Видимость                        = Ложь;
			ЭлементыФормы["ПанельПомощника" + ИндексКолонки].Видимость                        = Ложь;
			ЭлементыФормы["ТеньПанелиПомощника" + ИндексКолонки + "Вертикальная1"].Видимость  = Ложь;
			ЭлементыФормы["ТеньПанелиПомощника" + ИндексКолонки + "Вертикальная2"].Видимость  = Ложь;
			ЭлементыФормы["ТеньПанелиПомощника" + ИндексКолонки + "Горизонтальная"].Видимость = Ложь;
			
		Иначе
			
			ЭлементыФормы["ПанельПомощника" + ИндексКолонки].Видимость                        = (СтрокаТаблицыЭлементов.Колонка = ИндексКолонки);
			ЭлементыФормы["ТеньПанелиПомощника" + ИндексКолонки + "Вертикальная1"].Видимость  = (СтрокаТаблицыЭлементов.Колонка = ИндексКолонки);
			ЭлементыФормы["ТеньПанелиПомощника" + ИндексКолонки + "Вертикальная2"].Видимость  = (СтрокаТаблицыЭлементов.Колонка = ИндексКолонки);
			ЭлементыФормы["ТеньПанелиПомощника" + ИндексКолонки + "Горизонтальная"].Видимость = (СтрокаТаблицыЭлементов.Колонка = ИндексКолонки);
			
			ЭлементыФормы["НадписьУказание" + ИндексКолонки].Заголовок = СтрокаТаблицыЭлементов.Текст;
			
			Если СтрокаТаблицыЭлементов.Колонка = ИндексКолонки Тогда
				ТекущийЭлемент = ЭлементыФормы["ОсновнаяКнопка" + ИндексКолонки];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекущийЭлементЧеклиста = Неопределено Тогда
		
		ЭлементыФормы.НадписьГотовностьПрограммы.Заголовок = "Программа готова к ведению учета!";
		ЭлементыФормы.НадписьГотовностьПрограммы.ЦветТекста = Новый Цвет(0, 128, 0);
		ЭлементыФормы.НадписьГотовностьПрограммыКомментарий.Видимость = Ложь;
		ЭлементыФормы.ПанельПомощникаЦентр.Видимость                  = Истина;
		ТекущийЭлемент = ЭлементыФормы.КнопкаНачатьРаботу;
		
	Иначе
		
		ЭлементыФормы.НадписьГотовностьПрограммы.Заголовок = "Заполните и проверьте основные настройки и справочники";
		ЭлементыФормы.НадписьГотовностьПрограммы.ЦветТекста = Новый Цвет(128, 0, 0);
		ЭлементыФормы.НадписьГотовностьПрограммыКомментарий.Видимость = Истина;
		ЭлементыФормы.ПанельПомощникаЦентр.Видимость                  = Ложь;
			
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЧеклиста()

Процедура КнопкаЗаполеноИПровереноНажатие(Элемент)
	
	Чеклист[ТекущийЭлементЧеклиста] = Истина;
	
	СтрокаТаблицыЭлементов = ТаблицаЭлементовЧеклиста.Найти(ТекущийЭлементЧеклиста, "ЭлементФормы");
	
	ИндексЭлемента = ТаблицаЭлементовЧеклиста.Индекс(СтрокаТаблицыЭлементов);
	
	Если (ИндексЭлемента + 1) = ТаблицаЭлементовЧеклиста.Количество() Тогда
		ТекущийЭлементЧеклиста = Неопределено;
	Иначе
		ТекущийЭлементЧеклиста = ТаблицаЭлементовЧеклиста[ИндексЭлемента + 1].ЭлементФормы;
	КонецЕсли;
	
	УстановитьВидимостьЧеклиста();
	
КонецПроцедуры // КнопкаЗаполеноИПровереноНажатие()

Процедура КнопкаПовторитьНажатие(Элемент)
	
	Чеклист.Очистить();
	
	ТекущийЭлементЧеклиста = ТаблицаЭлементовЧеклиста[0].ЭлементФормы;
	
	УстановитьВидимостьЧеклиста();
	
КонецПроцедуры

Процедура КнопкаЗакрытьИНачатьРаботуНажатие(Элемент)
	
	ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Видимость = Ложь;
	
КонецПроцедуры

Процедура КнопкаПропуститьНажатие(Элемент)
	
	Чеклист[ТекущийЭлементЧеклиста] = Ложь;
	
	СтрокаТаблицыЭлементов = ТаблицаЭлементовЧеклиста.Найти(ТекущийЭлементЧеклиста, "ЭлементФормы");
	
	ИндексЭлемента = ТаблицаЭлементовЧеклиста.Индекс(СтрокаТаблицыЭлементов);
	
	Если (ИндексЭлемента + 1) = ТаблицаЭлементовЧеклиста.Количество() Тогда
		ТекущийЭлементЧеклиста = Неопределено;
	Иначе
		ТекущийЭлементЧеклиста = ТаблицаЭлементовЧеклиста[ИндексЭлемента + 1].ЭлементФормы;
	КонецЕсли;
	
	УстановитьВидимостьЧеклиста();
	
КонецПроцедуры

Процедура ОткрытьОтчетОТекущихНастройках(Элемент)
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("ОтчетОТекущихНастройках");
	
	ЗапросОрг = Новый Запрос();
	ЗапросОрг.Текст = "ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	Организации.Наименование,
	|	Организации.Префикс,
	|	Организации.ИНН,
	|	Организации.КПП,
	|	Организации.НаименованиеПолное,
	|	Организации.ЮрФизЛицо,
	|	Организации.ОсновнойБанковскийСчет,
	|	Организации.ОсновнойБанковскийСчет.Наименование,
	|	Организации.ОсновнойБанковскийСчет.НомерСчета,
	|	Организации.ОсновнойБанковскийСчет.Банк.Код,
	|	Организации.ОсновнойБанковскийСчет.Банк.Наименование,
	|	Организации.ОсновнойБанковскийСчет.Банк.Город,
	|	Организации.ОсновнойБанковскийСчет.Банк.КоррСчет,
	|	Организации.ОсновнойБанковскийСчет.БанкДляРасчетов.Код,
	|	Организации.ОсновнойБанковскийСчет.БанкДляРасчетов.Наименование,
	|	Организации.ОсновнойБанковскийСчет.БанкДляРасчетов.Город,
	|	Организации.ОсновнойБанковскийСчет.БанкДляРасчетов.КоррСчет
	|ИЗ
	|	Справочник.Организации КАК Организации";
	
	РезультатОрг = ЗапросОрг.Выполнить();
	
	ЗапросУПНУ = Новый Запрос();
	ЗапросУПНУ.Текст = "ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	УчетнаяПолитика.Организация КАК Организация,
	|	УчетнаяПолитика.СпособОценкиМПЗ,
	|	УчетнаяПолитика.СпособОценкиТоваровВРознице,
	|	УчетнаяПолитика.ПоддержкаПБУ18,
	|	УчетнаяПолитика.СистемаНалогообложения,
	|	УчетнаяПолитика.ДатаПереходаНаУСН,
	|	УчетнаяПолитика.ОбъектНалогообложенияУСН,
	|	УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД,
	|	УчетнаяПолитика.СистемаНалогообложения,
	|	УчетнаяПолитика.СложныйУчетНДС
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаОрганизаций КАК УчетнаяПолитика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	Период
	|ИТОГИ ПО
	//|	Организация,
	|	Период";
	
	РезультатУПНУ = ЗапросУПНУ.Выполнить();
	
	ЗапросКИ = Новый Запрос();
	ЗапросКИ.Текст = "ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Организация,
	|	КонтактнаяИнформация.Вид,
	|	КонтактнаяИнформация.Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект ССЫЛКА Справочник.Организации
	|ИТОГИ ПО
	|	Организация";
	
	РезультатКИ = ЗапросКИ.Выполнить();
	
	ЗапросОЛ = Новый Запрос();
	ЗапросОЛ.Текст = "ВЫБРАТЬ
	|	ОтветственныеЛицаОрганизаций.Период КАК Период,
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница КАК Организация,
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо КАК ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо,
	|	ОтветственныеЛицаОрганизаций.Должность
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница ССЫЛКА Справочник.Организации
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтветственноеЛицо,
	|	Период";
	
	РезультатОЛ = ЗапросОЛ.Выполнить();
	
	ВыборкаОрганизаций = РезультатОрг.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.НачатьАвтогруппировкуСтрок();

	// Выводим шапку
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.ДатаОтчета = Формат(ТекущаяДата(), "ДЛФ=DDT");
	ОбластьМакета.Параметры.ПользовательИБ = глЗначениеПеременной("глТекущийПользователь");
	ТабДокумент.Вывести(ОбластьМакета, 1);
	
	// Выводим содержание
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаСодержание");
	ТабДокумент.Вывести(ОбластьМакета, 1);
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		ОбластьМакета = Макет.ПолучитьОбласть("Содержание");
		ОбластьМакета.Параметры.НаименованиеОрг = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.Наименование ), "<Наименование не заполнено>", ВыборкаОрганизаций.Наименование );
		ТабДокумент.Вывести(ОбластьМакета, 2);
	КонецЦикла;
	
	ВыборкаОрганизаций.Сбросить();
	
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСодержание");
	ТабДокумент.Вывести(ОбластьМакета, 1);
    
		    	
	//Информация об организациях
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОрганизации");
	ТабДокумент.Вывести(ОбластьМакета, 1);
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		ОбластьМакета = Макет.ПолучитьОбласть("Орг");
		ОбластьМакета.Параметры.НаименованиеОрг = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.Наименование ), "<Наименование не заполнено>", ВыборкаОрганизаций.Наименование );
		ТабДокумент.Вывести(ОбластьМакета, 2);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Организация");
		ОбластьМакета.Параметры.ОргНаименование = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.Наименование ), "<Наименование не заполнено>", ВыборкаОрганизаций.Наименование );
		ОбластьМакета.Параметры.ОргНаименованиеПолное = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.НаименованиеПолное ), "", ВыборкаОрганизаций.НаименованиеПолное );
        ОбластьМакета.Параметры.ЮрФизЛицо = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ЮрФизЛицо ), "", ВыборкаОрганизаций.ЮрФизЛицо );
		ОбластьМакета.Параметры.Префикс = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.Префикс ), "", ВыборкаОрганизаций.Префикс );
		ОбластьМакета.Параметры.ИНН = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ИНН ), "", ВыборкаОрганизаций.ИНН );
		ОбластьМакета.Параметры.КПП = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.КПП ), "", ВыборкаОрганизаций.КПП );
		ОбластьМакета.Параметры.БСНаименование = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетНаименование ), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетНаименование );
		ОбластьМакета.Параметры.БСНомер = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетНомерСчета ), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетНомерСчета );
		ОбластьМакета.Параметры.БанкНаименование = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкНаименование), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкНаименование) +
													" " + ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкГород), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкГород);
		ОбластьМакета.Параметры.БанкБИК = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкКод), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкКод);
		ОбластьМакета.Параметры.БанкСчет = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкКоррСчет ), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкКоррСчет );
		
		ОбластьМакета.Параметры.БанкКоррНаименование = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовНаименование), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовНаименование) +
													" " + ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовГород), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовГород);
		ОбластьМакета.Параметры.БанкКоррБИК = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовКод), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовКод);
		ОбластьМакета.Параметры.БанкКоррСчет = ?(НЕ ЗначениеЗаполнено(ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовКоррСчет), "", ВыборкаОрганизаций.ОсновнойБанковскийСчетБанкДляРасчетовКоррСчет);
						
        ТабДокумент.Вывести(ОбластьМакета, 3);
		
		СтуктураПоиска = Новый Структура("Организация");
		СтуктураПоиска.Организация = ВыборкаОрганизаций.Организация;
		
		
		//УП 
		ВыборкаУП = РезультатУПНУ.Выбрать(ОбходРезультатаЗапроса.Прямой);
		НайденаУП = Ложь;
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаУП");
		ТабДокумент.Вывести(ОбластьМакета, 3);
		
		Пока ВыборкаУП.НайтиСледующий(СтуктураПоиска) Цикл
			
			Если НЕ НайденаУП Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыУП");
				ТабДокумент.Вывести(ОбластьМакета, 4);
				НайденаУП = Истина;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("УПНУ");
			ОбластьМакета.Параметры.ПериодУПНУ = Формат(ВыборкаУП.Период, "ДЛФ=DD");
			ОбластьМакета.Параметры.СпособОценкиМПЗБУ = ВыборкаУП.СпособОценкиМПЗ;
			ОбластьМакета.Параметры.СпособОценкиТоваровВРознице = ВыборкаУП.СпособОценкиТоваровВРознице;
			ОбластьМакета.Параметры.ПрименяетсяПБУ18 = ?(ВыборкаУП.ПоддержкаПБУ18, "Да", "Нет");
			ОбластьМакета.Параметры.УСН = ?(ВыборкаУП.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная, "Да", "Нет");
			ОбластьМакета.Параметры.ОрганизацияЯвляетсяПлательщикомЕНВД = ?(ВыборкаУП.ОрганизацияЯвляетсяПлательщикомЕНВД, "Да", "Нет");
			ОбластьМакета.Параметры.СложныйУчетНДС = ?(ВыборкаУП.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная, "-", ?(ВыборкаУП.СложныйУчетНДС, "Да", "Нет"));
			ОбластьМакета.Параметры.ДатаПереходаНаУСН =  ?(ВыборкаУП.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная, ?(НЕ ЗначениеЗаполнено(ВыборкаУП.ДатаПереходаНаУСН), "Не заполнено", Формат(ВыборкаУП.ДатаПереходаНаУСН, "ДЛФ=DD")), "-");
			ОбластьМакета.Параметры.ОбъектНалогообложенияУСН =  ?(ВыборкаУП.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная, ВыборкаУП.ОбъектНалогообложенияУСН, "-");
						
			ТабДокумент.Вывести(ОбластьМакета, 4);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалУП");
		ТабДокумент.Вывести(ОбластьМакета, 3);
		
		//КИ
		ВыборкаКИ = РезультатКИ.Выбрать(ОбходРезультатаЗапроса.Прямой);
		НайденаКИ = Ложь;
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаКИ");
		ТабДокумент.Вывести(ОбластьМакета, 3);
		
		Пока ВыборкаКИ.НайтиСледующий(СтуктураПоиска) Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаКИ.Вид) Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ НайденаКИ Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыКИ");
				ТабДокумент.Вывести(ОбластьМакета, 4);
				НайденаКИ = Истина;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("КИ");
			ОбластьМакета.Параметры.Вид = ВыборкаКИ.Вид;
			ОбластьМакета.Параметры.Представление = ВыборкаКИ.Представление;
						
			ТабДокумент.Вывести(ОбластьМакета, 4);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалКИ");
		ТабДокумент.Вывести(ОбластьМакета, 3);
		
		//ОЛ
		ВыборкаОЛ = РезультатОЛ.Выбрать(ОбходРезультатаЗапроса.Прямой);
		НайденаОЛ = Ложь;
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОЛ");
		ТабДокумент.Вывести(ОбластьМакета, 3);
		
		Пока ВыборкаОЛ.НайтиСледующий(СтуктураПоиска) Цикл
			Если НЕ НайденаОЛ Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыОЛ");
				ТабДокумент.Вывести(ОбластьМакета, 4);
				НайденаОЛ = Истина;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть("ОЛ");
			ОбластьМакета.Параметры.ПериодОЛ = Формат(ВыборкаОЛ.Период, "ДЛФ=DD");
			ОбластьМакета.Параметры.ОтветственноеЛицо = ВыборкаОЛ.ОтветственноеЛицо;
			ОбластьМакета.Параметры.ФизическоеЛицо = ВыборкаОЛ.ФизическоеЛицо;
			ОбластьМакета.Параметры.Должность = ВыборкаОЛ.Должность;
						
			ТабДокумент.Вывести(ОбластьМакета, 4);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалОЛ");
		ТабДокумент.Вывести(ОбластьМакета, 3);
		
	КонецЦикла;
	
	//Общие настройки
	ОбластьМакета = Макет.ПолучитьОбласть("ШапкаНастройки");
	ТабДокумент.Вывести(ОбластьМакета, 1);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Настройки");
	БУ = ПланыСчетов.Хозрасчетный.Товары;
	ВестиПартионныйУчет = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии, "ВидСубконто") = Неопределено, Ложь, Истина);
	ВестиСкладскойУчет  = ?(БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено, Ложь, Истина);
	Если ВестиСкладскойУчет Тогда
		ВестиСуммовойУчетПоСкладам = БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто").Суммовой;
	Иначе
		ВестиСуммовойУчетПоСкладам = Ложь;
	КонецЕсли;
	
	ОбластьМакета.Параметры.ВестиПартионныйУчет = ВестиПартионныйУчет;
	ОбластьМакета.Параметры.ВестиСкладскойУчет = ВестиСкладскойУчет;
	ОбластьМакета.Параметры.ВестиСуммовойУчетПоСкладам = ВестиСуммовойУчетПоСкладам;
	ОбластьМакета.Параметры.УчитыватьТару = Константы.ИспользоватьВозвратнуюТару.Получить();
	ТабДокумент.Вывести(ОбластьМакета, 2);
	
	
	ТабДокумент.ЗакончитьАвтогруппировкуСтрок();
	ТабДокумент.ПоказатьУровеньГруппировокСтрок(3);
	
	// Отобразить печатный документ на экране
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ОтображатьСетку     = Ложь;
	ТабДокумент.Защита              = Ложь;
	ТабДокумент.ОтображатьГруппировки = Истина;
	ТабДокумент.ТолькоПросмотр      = Истина;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент,,, "Отчет о текущих настройках");
	
КонецПроцедуры // ОткрытьОтчетОТекущихНастройках()

//////////////////////////////////////////////////////////////////////////////
// ДЛЯ ОТЧЕТА МОНИТОР БУХГАЛТЕРА

мЦветРасчетныхСчетов = Новый Цвет(255,178,139);

ИтогПоСчетамВСлучаеОтсутствияВалОстатков = "Всего на рублевых счетах";
ИтогПоСчетамТекст = "Всего на рублевых счетах";
ИтогПоСчетамВалТекст = "Всего на валютных счетах";
ИтогПоДенежнымСчетамТекст = "Всего";

мОбщийФорматДат = "ДФ='дд ММММ'";

Строка254 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(254);
Строка100 = ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100);
ТипДата = ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);

МассивБулево = Новый Массив;
МассивБулево.Добавить(Тип("Булево"));
ОписаниеТиповБулево    = Новый ОписаниеТипов(МассивБулево);

мКоличествоДнейАнализа = 7;

ТабличноеПолеДопИнфКДиаграмме1 = Новый ТаблицаЗначений;
ТабличноеПолеДопИнфКДиаграмме1.Колонки.Добавить("НаимБанк",,   "Наименование банка");
ТабличноеПолеДопИнфКДиаграмме1.Колонки.Добавить("ВалютаСчета",,"Валюта счета", 9);
ТабличноеПолеДопИнфКДиаграмме1.Колонки.Добавить("СуммаВВалютеСчета",,      "Сумма в валюте счета");
ТабличноеПолеДопИнфКДиаграмме1.Колонки.Добавить("НачОстатокРС",,      "Сумма на начало дня");
ТабличноеПолеДопИнфКДиаграмме1.Колонки.Добавить("КонОстатокРС",,      "Сумма на начало дня");

мТаблицаГрафикСдачи = Новый ТаблицаЗначений;
мТаблицаГрафикСдачи.Колонки.Добавить("Объект", Строка100);
мТаблицаГрафикСдачи.Колонки.Добавить("ПоследняяДатаПредставленияОтчета", ТипДата,,12);
мТаблицаГрафикСдачи.Колонки.Добавить("Периодичность", Строка100);
мТаблицаГрафикСдачи.Колонки.Добавить("ФормаОтчета", Строка100);
мТаблицаГрафикСдачи.Колонки.Добавить("НазваниеОтчетнойФормы", Строка254);
мТаблицаГрафикСдачи.Колонки.Добавить("ЗаПериодС", ТипДата); // За период С
мТаблицаГрафикСдачи.Колонки.Добавить("ЗаПериодПо", ТипДата); // За период По
мТаблицаГрафикСдачи.Колонки.Добавить("КтоСдаетОтчет", Строка254);
мТаблицаГрафикСдачи.Колонки.Добавить("ФормаЗаполняетсяНарастающимИтогом", ОписаниеТиповБулево);
мТаблицаГрафикСдачи.Колонки.Добавить("Статус", ОписаниеТиповБулево); // Может быть 1 - "Сдача отчета", 2 - "Напоминание" 3 - ОтчетГотов
мТаблицаГрафикСдачи.Колонки.Добавить("ДатаПредставленияОтчета", ТипДата,,12); // Поле даты. Срок представления отчета, для строки напоминания.

АдресаОбразцовОтчетов = Новый Соответствие;

ВидимостьПодсказки = Ложь;

ТаблицаЭлементовЧеклиста = Новый ТаблицаЗначений;
ТаблицаЭлементовЧеклиста.Колонки.Добавить("ЭлементФормы");
ТаблицаЭлементовЧеклиста.Колонки.Добавить("Текст");
ТаблицаЭлементовЧеклиста.Колонки.Добавить("Колонка", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2));
ТаблицаЭлементовЧеклиста.Колонки.Добавить("Строка",  ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(2));

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте справочник организаций";
НовыйЭлемент.ЭлементФормы = "Организации2";
НовыйЭлемент.Колонка      = "1";
НовыйЭлемент.Строка       = "1";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте настройку параметров учета";
НовыйЭлемент.ЭлементФормы = "НастройкаПараметровУчета2";
НовыйЭлемент.Колонка      = "1";
НовыйЭлемент.Строка       = "2";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте учетную политику";
НовыйЭлемент.ЭлементФормы = "УчетнаяПолитикаОрганизаций2";
НовыйЭлемент.Колонка      = "1";
НовыйЭлемент.Строка       = "3";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте справочник подразделений";
НовыйЭлемент.ЭлементФормы = "ПодразделенияОрганизаций1";
НовыйЭлемент.Колонка      = "1";
НовыйЭлемент.Строка       = "4";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Сформируйте и проверьте отчет о текущих настройках";
НовыйЭлемент.ЭлементФормы = "ОтчетОТекущихНастройках";
НовыйЭлемент.Колонка      = "1";
НовыйЭлемент.Строка       = "5";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте статьи затрат";
НовыйЭлемент.ЭлементФормы = "СтатьиЗатрат";
НовыйЭлемент.Колонка      = "2";
НовыйЭлемент.Строка       = "1";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте справочник номенклатуры";
НовыйЭлемент.ЭлементФормы = "Номенклатура2";
НовыйЭлемент.Колонка      = "2";
НовыйЭлемент.Строка       = "2";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте номенклатурные группы";
НовыйЭлемент.ЭлементФормы = "НоменклатурныеГруппы";
НовыйЭлемент.Колонка      = "2";
НовыйЭлемент.Строка       = "3";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте склады";
НовыйЭлемент.ЭлементФормы = "Склады1";
НовыйЭлемент.Колонка      = "2";
НовыйЭлемент.Строка       = "4";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте справочник контрагентов";
НовыйЭлемент.ЭлементФормы = "Контрагенты4";
НовыйЭлемент.Колонка      = "2";
НовыйЭлемент.Строка       = "5";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте способы отражения амортизации";
НовыйЭлемент.ЭлементФормы = "СпособыОтраженияРасходовПоАмортизации3";
НовыйЭлемент.Колонка      = "3";
НовыйЭлемент.Строка       = "1";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте справочник основных средств";
НовыйЭлемент.ЭлементФормы = "ОсновныеСредства1";
НовыйЭлемент.Колонка      = "3";
НовыйЭлемент.Строка       = "2";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте способы отражения зарплаты";
НовыйЭлемент.ЭлементФормы = "СпособыОтраженияЗарплатыВРеглУчете1";
НовыйЭлемент.Колонка      = "3";
НовыйЭлемент.Строка       = "3";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте справочник сотрудников";
НовыйЭлемент.ЭлементФормы = "СотрудникиОрганизаций";
НовыйЭлемент.Колонка      = "3";
НовыйЭлемент.Строка       = "4";

НовыйЭлемент = ТаблицаЭлементовЧеклиста.Добавить();
НовыйЭлемент.Текст        = "Заполните и проверьте начальные остатки";
НовыйЭлемент.ЭлементФормы = "ВводНачальныхОстатков2";
НовыйЭлемент.Колонка      = "3";
НовыйЭлемент.Строка       = "5";

