
// Процедура заполняет форму заполнения бланков "Транспортная накладная" и "Сопроводительная ведомость".
//
Процедура ЗаполнитьДанныеПечатиТТНПриложение4()
	
	ДанныеДокумента = ПечатьТТН(Истина);
	
	Для Каждого ЗначениеЗаполненияБланкаТТН Из ДанныеДокумента Цикл
		Если ЭлементыФормы.Найти(ЗначениеЗаполненияБланкаТТН.Ключ) <> Неопределено Тогда
			ЭтаФорма[ЗначениеЗаполненияБланкаТТН.Ключ] = ЗначениеЗаполненияБланкаТТН.Значение;
		КонецЕсли;
	КонецЦикла;
	Пункт0_1 = 1;
	Пункт0_0 = 1;
КонецПроцедуры // ЗаполнитьДанныеПечатиТТНПриложение4()

// Процедура получает данные заполнения для бланков "Транспортная накладная" и "Сопроводительная ведомость".
//
Функция ПолучитьДанныеДляТТНПриложение4(ЗапросТовары, Шапка)
	
	ДанныеДокумента = Новый Структура();
	
	СведенияОГрузополучателе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	СведенияОГрузоотправитель = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента);
	ДанныеДокумента = Новый Структура();
	Если Шапка.ГрузополучательЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ДанныеДокумента.Вставить("Пункт2_1", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	ИначеЕсли Шапка.ГрузополучательЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ДанныеДокумента.Вставить("Пункт2_2", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузополучателе,  "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	Если Шапка.ГрузоотправительЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ДанныеДокумента.Вставить("Пункт1_1", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	ИначеЕсли Шапка.ГрузоотправительЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ДанныеДокумента.Вставить("Пункт1_2", ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОГрузоотправитель, "ПолноеНаименование,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет"));
	КонецЕсли;
	
	ДанныеДокумента.Вставить("Пункт3_2", ?(ЗапросТовары.Итог("КоличествоМест") = 0, "", "Всего мест: " + ЧислоПрописью(ЗапросТовары.Итог("КоличествоМест"), ,",,,,,,,,0")));
	ДанныеДокумента.Вставить("Пункт16_1", СведенияОГрузоотправитель.ПолноеНаименование);
	ДанныеДокумента.Вставить("Пункт10_3Ведомость", СведенияОГрузополучателе.ПолноеНаименование);
	
	возврат ДанныеДокумента;
	
КонецФункции //ПолучитьДанныеДляТТНПриложение4()

// Процедура получает данные заполнения для бланков "Транспортная накладная" и "Сопроводительная ведомость".
//
Процедура ОчиститьДанныеПечатиТТНПриложение4()
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("Пункт2_1", "");
	ДанныеДокумента.Вставить("Пункт2_2", "");
	ДанныеДокумента.Вставить("Пункт1_1", "");
	ДанныеДокумента.Вставить("Пункт1_2", "");		
	ДанныеДокумента.Вставить("Пункт3_2", "");
	ДанныеДокумента.Вставить("Пункт16_1", "");
	ДанныеДокумента.Вставить("Пункт10_3Ведомость", "");
	
	Для Каждого ЗначениеЗаполненияБланкаТТН Из ДанныеДокумента Цикл
		Если ЭлементыФормы.Найти(ЗначениеЗаполненияБланкаТТН.Ключ) <> Неопределено Тогда
			ЭтаФорма[ЗначениеЗаполненияБланкаТТН.Ключ] = ЗначениеЗаполненияБланкаТТН.Значение;
		КонецЕсли;
	КонецЦикла;
	Пункт0_1 = 1;
	Пункт0_0 = 1;
	
КонецПроцедуры //ОчиститьДанныеПечатиТТНПриложение4()

// Функция осуществляет печать формы "1-Т"
// на основании документа "РеализацияТоваровУслуг".
//
Функция ПечатьТТН(ПолучитьДанныеПечати = Ложь)
	Перем ПодразделениеОтветственныхЛиц;
	
	ДопКолонка = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДопКолонка = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ТоварКод = "Артикул";
	Иначе
		ТоварКод = "Код";
	КонецЕсли;

	МетаданныеДокумента = Документ.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ",  Документ);
	Если ОбщегоНазначения.ЕстьРеквизитДокумента("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
		Запрос.УстановитьПараметр("Курс",      ?(Документ.ВалютаДокумента.Код = "810", 1, Документ.КурсВзаиморасчетов));
		Запрос.УстановитьПараметр("Кратность", ?(Документ.ВалютаДокумента.Код = "810", 1, ?(Документ.КратностьВзаиморасчетов = 0, 1, Документ.КратностьВзаиморасчетов)));
	Иначе
		Запрос.УстановитьПараметр("Курс",      1);
		Запрос.УстановитьПараметр("Кратность", 1);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойСчет", Справочники.БанковскиеСчета.ПустаяСсылка());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР 	КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      	ТОГДА Организация
	|	      	ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР 	КОГДА Грузоотправитель = &ПустойКонтрагент
	|		  	ТОГДА Организация.ЮрФизЛицо
	|		  	ИНАЧЕ Грузоотправитель.ЮрФизЛицо
	|	КОНЕЦ                            КАК ГрузоотправительЮрФизЛицо,
	|	ВЫБОР 	КОГДА Грузополучатель = &ПустойКонтрагент
	|	      	ТОГДА Контрагент
	|	      	ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР	КОГДА Грузополучатель = &ПустойКонтрагент
	|			ТОГДА Контрагент.ЮрФизЛицо
	|			ИНАЧЕ Грузополучатель.ЮрФизЛицо
	|	КОНЕЦ                            КАК ГрузополучательЮрФизЛицо,
	|	БанковскийСчетОрганизации КАК БанковскийСчет,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	// {ОбособленныеПодразделения
	|	РеализацияТоваровУслуг.ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслуг.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов       КАК Курс,
	|	КратностьВзаиморасчетов  КАК Кратность,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС,
	|	Товары.(
	|		НомерСтроки                                  КАК Номер,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|		Номенклатура.Код                             КАК ТоварКод,
	|		Номенклатура." + ТоварКод + "                КАК Артикул,
	|		Количество,
	|		КоличествоМест,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		ЕдиницаИзмерения               КАК ВидУпаковки,
	|		ЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		Коэффициент,
	|		Цена     * &Курс / &Кратность                КАК Цена,
	|		Сумма    * &Курс / &Кратность                КАК Сумма,
	|		СуммаНДС * &Курс / &Кратность                КАК СуммаНДС,
	|		Сумма  										 КАК СуммаВВалютеДокумента,
	|		СуммаНДС									 КАК СуммаНДСВВалютеДокумента,
	|		СтавкаНДС
	|	)
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &Документ";
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
		Запрос.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата         КАК ДатаДокумента,
	|	Организация,
	|	Организация  КАК ЮрФизЛицо,
	|	Организация  КАК Поставщик,
	|	Организация  КАК Контрагент,
	|	Организация  КАК Руководители,
	|	ВЫБОР 	КОГДА Грузоотправитель = &ПустойКонтрагент
	|	      	ТОГДА Организация
	|	      	ИНАЧЕ Грузоотправитель КОНЕЦ КАК Грузоотправитель,
	|	ВЫБОР 	КОГДА Грузоотправитель = &ПустойКонтрагент
	|		  	ТОГДА Организация.ЮрФизЛицо
	|		  	ИНАЧЕ Грузоотправитель.ЮрФизЛицо
	|	КОНЕЦ                            КАК ГрузоотправительЮрФизЛицо,
	|	ВЫБОР 	КОГДА Грузополучатель = &ПустойКонтрагент
	|	      	ТОГДА Контрагент
	|	      	ИНАЧЕ Грузополучатель КОНЕЦ КАК Грузополучатель,
	|	ВЫБОР	КОГДА Грузополучатель = &ПустойКонтрагент
	|			ТОГДА Контрагент.ЮрФизЛицо
	|			ИНАЧЕ Грузополучатель.ЮрФизЛицо
	|	КОНЕЦ                            КАК ГрузополучательЮрФизЛицо,
	|	&ПустойСЧет КАК БанковскийСчет,
	|	Контрагент   КАК Покупатель,
	|	Контрагент   КАК Плательщик,
	|	ДоговорКонтрагента.РасчетыВУсловныхЕдиницах КАК РасчетыВУсловныхЕдиницах,
	// {ОбособленныеПодразделения
	|	ПередачаТоваров.ПодразделениеОрганизации,
	|	ВЫРАЗИТЬ(ПередачаТоваров.ПодразделениеОрганизации.НаименованиеПолное КАК СТРОКА(200)) КАК ПредставлениеПодразделения,
	// }ОбособленныеПодразделения 
	|	ВалютаДокумента,
	|	1       КАК Курс,
	|	1  КАК Кратность,
	|	Ложь,
	|	Истина,
	|	Товары.(
	|		НомерСтроки                                  КАК Номер,
	|		Номенклатура,
	|		Номенклатура.НаименованиеПолное              КАК ТоварНаименование,
	|		Номенклатура.Код                             КАК ТоварКод,
	|		Номенклатура." + ТоварКод + "                КАК Артикул,
	|		Количество,
	|		Количество КАК КоличествоМест,
	|		Номенклатура.БазоваяЕдиницаИзмерения КАК БазоваяЕдиницаНаименование,
	|		Номенклатура.БазоваяЕдиницаИзмерения               КАК ВидУпаковки,
	|		Номенклатура.БазоваяЕдиницаИзмерения.Код КАК БазоваяЕдиницаКодПоОКЕИ,
	|		1,
	|		0                КАК Цена,
	|		0                КАК Сумма,
	|		0                КАК СуммаНДС,
	|		0  										 КАК СуммаВВалютеДокумента,
	|		0									 КАК СуммаНДСВВалютеДокумента,
	|		0
	|	)
	|ИЗ
	|	Документ.ПередачаТоваров КАК ПередачаТоваров
	|
	|ГДЕ
	|	ПередачаТоваров.Ссылка = &Документ";

	ТаблицаСуммСписания = БухгалтерскийУчет.ПолучитьСуммуСписанияАктивов(Документ);
		
	КонецЕсли;
	

	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрок = Шапка.Товары.Выгрузить();
	
	Если Документ.Проведен И Шапка.РасчетыВУсловныхЕдиницах Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Документ);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", Документ.СчетУчетаРасчетовСКонтрагентом);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугТовары.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|			ГДЕ
		|				РеализацияТоваровУслугТовары.Ссылка = &Ссылка)
		|";
		СуммаВзаиморасчетов = Запрос.Выполнить().Выгрузить()[0].Сумма;
		
		Если НЕ СуммаВзаиморасчетов = NULL Тогда
		
			ВыборкаСтрок.Колонки.Добавить("СуммаБезНДСВВалютеДокумента");
			
			МассивРаспределения = Новый Массив;
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				СуммаСНДСВВалютеДокумента = СтрокаТовар.СуммаВВалютеДокумента + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДСВВалютеДокумента);
				Если (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120)
				 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118)
			 	 ИЛИ (СтрокаТовар.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента;
				Иначе
					СуммаБезНДСВВалютеДокумента = СуммаСНДСВВалютеДокумента - СтрокаТовар.СуммаНДСВВалютеДокумента;
				КонецЕсли;
				
				МассивРаспределения.Добавить(СуммаСНДСВВалютеДокумента);
				СтрокаТовар.СуммаБезНДСВВалютеДокумента = СуммаБезНДСВВалютеДокумента;
				
			КонецЦикла;
			
			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ВыборкаСтрок, "Сумма");
			
			Для Каждого СтрокаТовар Из ВыборкаСтрок Цикл
				
				МассивРаспределения.Очистить();
				МассивРаспределения.Добавить(СтрокаТовар.СуммаБезНДСВВалютеДокумента);
				МассивРаспределения.Добавить(СтрокаТовар.СуммаНДСВВалютеДокумента);
				МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаТовар.Сумма, МассивРаспределения);
				
				Если НЕ (МассивРаспределенныхСумм = Неопределено) Тогда
					
					СтрокаТовар.Сумма    = МассивРаспределенныхСумм[0] + ?(Шапка.СуммаВключаетНДС, МассивРаспределенныхСумм[1], 0);
					СтрокаТовар.СуммаНДС = МассивРаспределенныхСумм[1];
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьДанныеПечати = Истина Тогда
		Возврат ПолучитьДанныеДляТТНПриложение4(ВыборкаСтрок, Шапка);
	КонецЕсли;

	ТабДокумент = Новый ТабличныйДокумент;
	Макет       = ПолучитьМакет("ТТН");
	
	// Зададим параметры макета
	ТабДокумент.ПолеСверху         = 0;
	ТабДокумент.ПолеСлева          = 0;
	ТабДокумент.ПолеСнизу          = 0;
	ТабДокумент.ПолеСправа         = 0;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_1Т";

	// Выводим общие реквизиты шапки
	СведенияОПоставщике       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо,        Шапка.ДатаДокумента , , Шапка.БанковскийСчет);
	СведенияОГрузоотправителе = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузоотправитель, Шапка.ДатаДокумента , , ?(Шапка.Грузоотправитель = Шапка.ЮрФизЛицо, Шапка.БанковскийСчет, Неопределено));
	СведенияОПокупателе       = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Покупатель,       Шапка.ДатаДокумента);
	СведенияОГрузополучателе  = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Шапка.Грузополучатель,  Шапка.ДатаДокумента);
	
	ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
	ОбластьМакета.Параметры.НомерДокумента                = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ДатаДокумента                 = Шапка.ДатаДокумента;
	ОбластьМакета.Параметры.Грузоотправитель              = Шапка.Грузоотправитель;
	ОбластьМакета.Параметры.Грузополучатель               = Шапка.Грузополучатель;
	ОбластьМакета.Параметры.Плательщик                    = Шапка.Покупатель;
	ОбластьМакета.Параметры.ГрузоотправительПредставление = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОГрузоотправителе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ГрузополучательПредставление  = ФормированиеПечатныхФорм.ОписаниеОрганизации(
		СведенияОГрузополучателе, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
	ОбластьМакета.Параметры.ПлательщикПредставление       = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОПокупателе);
	ОбластьМакета.Параметры.ГрузоотправительПоОКПО        = СведенияОГрузоотправителе.КодПоОКПО;
	ОбластьМакета.Параметры.ГрузополучательПоОКПО         = СведенияОГрузополучателе.КодПоОКПО;
	ОбластьМакета.Параметры.ПлательщикПоОКПО              = СведенияОПокупателе.КодПоОКПО;

	ТабДокумент.Вывести(ОбластьМакета);

	СтрокНаСтранице = 23;
	СтрокШапки      = 10;
	СтрокПодвала    = 9;
	НомерСтраницы   = 1;

	// Выводим заголовок таблицы
	ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы; 
	ТабДокумент.Вывести(ЗаголовокТаблицы);

	КоличествоСтрок = ВыборкаСтрок.Количество();

	Если КоличествоСтрок = 1 Тогда
		ПереноситьПоследнююСтроку = 0;
	Иначе
		ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;

	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице = 0;
	ИтогоСуммаНаСтранице      = 0;
	ИтогоНДСНаСтранице        = 0;
	ИтогоСуммаСНДСНаСтранице  = 0;

	// инициализация итогов по документу
	ИтогоМест       = 0;
	ИтогоКоличество = 0;
	ИтогоСуммаСНДС  = 0;
	ИтогоСумма      = 0;
	ИтогоНДС        = 0;
	Ном             = 0;

	// Выводим многострочную часть документа
	ОбластьМакета = Макет.ПолучитьОбласть("Строка");

	Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл

		Ном           = Ном + 1;
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;

		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда

			ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");

			ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
			ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

			//ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице = 0;
			ИтогоСуммаСНДСНаСтранице  = 0;

			НомерСтраницы = НомерСтраницы + 1;
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			ЗаголовокТаблицы.Параметры.НомерСтраницы = "Страница " + НомерСтраницы;
			ТабДокумент.Вывести(ЗаголовокТаблицы);

		КонецЕсли;

		ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);


		Мест        = ВыборкаСтрокТовары.КоличествоМест;
		Количество  = ВыборкаСтрокТовары.Количество;
		
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ПередачаТоваров") Тогда
			СуммаНДС    = 0;
			
			СтрокаСуммСписания =  ТаблицаСуммСписания.Найти(ВыборкаСтрокТовары.Номенклатура, "Номенклатура");
			Если СтрокаСуммСписания = Неопределено Тогда
				СуммаСНДС = 0;
			Иначе
				СуммаСНДС = СтрокаСуммСписания.Сумма ;
			КонецЕсли;
			СуммаБезНДС = СуммаСНДС;
		Иначе
			СуммаСНДС = (ВыборкаСтрокТовары.Сумма
			+ ?(Шапка.СуммаВключаетНДС, 0, ВыборкаСтрокТовары.СуммаНДС));
			СуммаНДС    = ВыборкаСтрокТовары.СуммаНДС;
			СуммаБезНДС = СуммаСНДС    - СуммаНДС;
		КонецЕсли;
		
		ОбластьМакета.Параметры.Сумма = СуммаСНДС;
		ОбластьМакета.Параметры.Цена  = СуммаСНДС / ?(Количество = 0, 1, Количество);

		ТабДокумент.Вывести(ОбластьМакета);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице      = ИтогоСуммаНаСтранице      + СуммаБезНДС;
		ИтогоНДСНаСтранице        = ИтогоНДСНаСтранице        + СуммаНДС;
		ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице  + СуммаСНДС;

		// увеличим итоги по документу
		ИтогоМест       = ИтогоМест       + Мест;
		ИтогоКоличество = ИтогоКоличество + Количество;
		ИтогоСумма      = ИтогоСумма      + СуммаБезНДС;
		ИтогоНДС        = ИтогоНДС        + СуммаНДС;
		ИтогоСуммаСНДС  = ИтогоСуммаСНДС  + СуммаСНДС;

	КонецЦикла;

	// Выводим итоги по последней странице
	ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");
	ОбластьИтоговПоСтранице.Параметры.ИтогоКоличествоНаСтранице = ИтогоКоличествоНаСтранице;
	ОбластьИтоговПоСтранице.Параметры.ИтогоСуммаСНДСНаСтранице  = ИтогоСуммаСНДСНаСтранице;

	//ТабДокумент.Вывести(ОбластьИтоговПоСтранице);
	
	// Выводим итоги по документу в целом
	ОбластьМакета = Макет.ПолучитьОбласть("Всего");
	ОбластьМакета.Параметры.ИтогоКоличество = ИтогоКоличество;
	ОбластьМакета.Параметры.ИтогоСуммаСНДС  = ИтогоСуммаСНДС;

	//ТабДокумент.Вывести(ОбластьМакета);

	// Выводим подвал документа
	ОбластьМакета = Макет.ПолучитьОбласть("Подвал");

	// {ОбособленныеПодразделения
	ПодразделениеОтветственныхЛиц = Шапка.ПодразделениеОрганизации;
	// }ОбособленныеПодразделения 
	
	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Руководители, Шапка.ДатаДокумента, ПодразделениеОтветственныхЛиц);
	ОбластьМакета.Параметры.ФИООтпускРазрешил     = Руководители.РуководительПредставление;
	ОбластьМакета.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтерПредставление;

	ОбластьМакета.Параметры.КоличествоПорядковыхНомеровЗаписейПрописью = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ОтпущеноНаСуммуПрописью = ОбщегоНазначения.СформироватьСуммуПрописью(ИтогоСуммаСНДС, Константы.ВалютаРегламентированногоУчета.Получить());
	ОбластьМакета.Параметры.ВсегоМестПрописью       = ЧислоПрописью(ИтогоМест, ,",,,,,,,,0");
	ОбластьМакета.Параметры.ВсегоНаименований       = ЧислоПрописью(КоличествоСтрок, ,",,,,,,,,0");
	ТабДокумент.Вывести(ОбластьМакета);

	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	ОбластьМакета   = Макет.ПолучитьОбласть("ТранспортныйРаздел");
	ШрифтСтандарт   = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , НЕ ЛицензионнаяКарточка);
	ШрифтОграничено = Новый Шрифт(ОбластьМакета.Области.Стандарт.Шрифт, , , , , , ЛицензионнаяКарточка);

	ОбластьМакета.Области.Стандарт.Шрифт   = ШрифтСтандарт;
	ОбластьМакета.Области.Ограничено.Шрифт = ШрифтОграничено;

 	ОбластьМакета.Параметры.Номер                     = ОбщегоНазначения.ПолучитьНомерНаПечать(Шапка);
	ОбластьМакета.Параметры.ОрганизацияПеревозчик     = Перевозчик;
	ОбластьМакета.Параметры.МаркаАвтомобиля           = МаркаАвтомобиля;
	ОбластьМакета.Параметры.ГосНомерАвтомобиля        = ГосНомерАвтомобиля;
	ОбластьМакета.Параметры.ОрганизацияЗаказчик       = Заказчик;
	ОбластьМакета.Параметры.ФИОВодителя               = Водитель;
	ОбластьМакета.Параметры.ВодительскоеУдостоверение = ВодительскоеУдостоверение;
	ОбластьМакета.Параметры.ВидПеревозки              = ВидПеревозки;
	ОбластьМакета.Параметры.ПунктПогрузки             = ПунктПогрузки;
	ОбластьМакета.Параметры.ПунктРазгрузки            = ПунктРазгрузки;
	ОбластьМакета.Параметры.Прицеп                    = МаркаПрицепа;
	ОбластьМакета.Параметры.ГосНомерПрицепа           = ГосНомерПрицепа;
	ОбластьМакета.Параметры.СрокДоставки              = СрокДоставки;

	ТабДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("СведенияОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСведенийОГрузе");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПогрузочныеОперации");
	ТабДокумент.Вывести(ОбластьМакета);
	ОбластьМакета = Макет.ПолучитьОбласть("ПрочиеСведения");
	ТабДокумент.Вывести(ОбластьМакета);

	Возврат ТабДокумент;

КонецФункции // ПечатьТТН()

// Процедура обработки нажатия кнопки "Печать ТТН".
//
Процедура КнопкаВыполнитьНажатие(Элемент)

	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	МаркаАвтомобиля = Пункт11_1;
	ГосНомерАвтомобиля = Пункт11_2;
	Водитель = Пункт10_4;
	ПунктРазгрузки = Пункт7_1;
	ПунктПогрузки = Пункт6_1;
	
	ТабДокумент = ПечатьТТН();
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТН";
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Товарно-транспортная накладная");

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЗначениеЗаполнено(Документ) Тогда
		ЗаполнитьДанныеПечатиТТНПриложение4();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриИзменении" поля ввода "Документ".
//
Процедура ДокументПриИзменении(Элемент)

	ОчиститьДанныеПечатиТТНПриложение4();
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеПечатиТТНПриложение4();
	
КонецПроцедуры // ДокументПриИзменении()

// Процедура - выполняет печать бланка "Транспортная накладная"
//
Процедура КоманднаяПанельПриложение4ПечатьТТНПриложение4(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	СтруктураДанныхПечати = Новый Структура();
	Для Каждого Реквизит Из ЭлементыФормы Цикл
		Если Найти(Реквизит.Имя, "Пункт") > 0.00 Тогда
			СтруктураДанныхПечати.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Данные]);
		КонецЕсли;
	КонецЦикла;
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТНПриложение4";
	МакетТТНПриложение4 = ПолучитьМакет("ТТНПриложение4");
	ЛицеваяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона|ВертикальнаяОбласть");
	ЛицеваяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ЛицеваяСторона);
	ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	ОборотнаяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона|ВертикальнаяОбласть");
	ОборотнаяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ОборотнаяСторона);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Транспортная накладная");
	Пункт0_1 = Пункт0_1 + 1;
	
КонецПроцедуры // КоманднаяПанельПриложение4ПечатьТТНПриложение4()

// Процедура - выполняет печать бланка "Сопроводительная ведомость"
//
Процедура КоманднаяПанель2ПечатьВедомостьПриложение4(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Документ) Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	СтруктураДанныхПечати = Новый Структура();
	Для Каждого Реквизит Из ЭлементыФормы Цикл
		Если Найти(Реквизит.Имя, "Пункт") > 0.00 Тогда
			СтруктураДанныхПечати.Вставить(Реквизит.Имя, ЭтаФорма[Реквизит.Данные]);
		КонецЕсли;
	КонецЦикла;
	ТабДокумент = Новый ТабличныйДокумент();
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВедомостьПриложение4";
	МакетТТНПриложение4 = ПолучитьМакет("Ведомость");
	ЛицеваяСторона = МакетТТНПриложение4.ПолучитьОбласть("ГоризонтальнаяОбласть|ВертикальнаяОбласть");
	ЛицеваяСторона.Параметры.Заполнить(СтруктураДанныхПечати);
	ТабДокумент.Вывести(ЛицеваяСторона);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Сопроводительная ведомость");
	Пункт0_0 = Пункт0_0 + 1;
	
КонецПроцедуры // КоманднаяПанель2ПечатьВедомостьПриложение4()

// Процедура - выполняет выбор отгрузочного наименования груза из классификатора
// Единая тарифно-статистическая номенклатура грузов
Процедура Пункт3_1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("ФормаВыборГруппыТоваров", Элемент);
	ВыбраннаяГруппаТоваров = Форма.ОткрытьМодально();
	Пункт3_1 = ?(ЗначениеЗаполнено(ВыбраннаяГруппаТоваров), ВыбраннаяГруппаТоваров, Пункт3_1);
	
КонецПроцедуры // Пункт3_1НачалоВыбора()