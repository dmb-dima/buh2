Перем БылаНажатаКнопкаОК;
Перем мНаВходеКодРегиона;
Перем Представление;

// Процедура возвращает индекс по заполненным составляющим адреса
Функция ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8)
	
	Инд = УправлениеКонтактнойИнформацией.ПолучитьИндекс(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	Если ПустаяСтрока(Инд) Тогда
		Возврат Поле1;
	Иначе
		Возврат Инд;
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события "ПриИзменении" поля ввода "Регион".
//
Процедура РегионПриИзменении(Элемент)
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	КодРегионаПоНазв = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	КодРегиона = ?(КодРегионаПоНазв = "", КодРегиона, КодРегионаПоНазв);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Район".
//
Процедура РайонПриИзменении(Элемент)
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Город".
//
Процедура ГородПриИзменении(Элемент)
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктПриИзменении(Элемент)
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Улица".
//
Процедура УлицаПриИзменении(Элемент)
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Дом".
//
Процедура ДомПриИзменении(Элемент)

	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Корпус".
//
Процедура КорпусПриИзменении(Элемент)

	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Квартира".
//
Процедура КвартираПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Индекс".
//
Процедура ИндексПриИзменении(Элемент)

	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Регион".
//
Процедура РегионНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокСокращений = УправлениеКонтактнойИнформацией.ПолучитьСписокСокращений(Поле2, 1);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ВыбратьИзСписка(СписокСокращений,Элемент);
		Если Сокращение <> Неопределено Тогда
			Поле2 = СокрЛП(Поле2) + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Район".
//
Процедура РайонНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокСокращений = УправлениеКонтактнойИнформацией.ПолучитьСписокСокращений(Поле3, 2);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ВыбратьИзСписка(СписокСокращений,Элемент);
		Если Сокращение <> Неопределено Тогда
			Поле3 = СокрЛП(Поле3) + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Город".
//
Процедура ГородНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокСокращений = УправлениеКонтактнойИнформацией.ПолучитьСписокСокращений(Поле4, 3);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ВыбратьИзСписка(СписокСокращений,Элемент);
		Если Сокращение <> Неопределено Тогда
			Поле4 = СокрЛП(Поле4) + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокСокращений = УправлениеКонтактнойИнформацией.ПолучитьСписокСокращений(Поле5, 4);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ВыбратьИзСписка(СписокСокращений,Элемент);
		Если Сокращение <> Неопределено Тогда
			Поле5 = СокрЛП(Поле5) + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "Улица".
//
Процедура УлицаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокСокращений = УправлениеКонтактнойИнформацией.ПолучитьСписокСокращений(Поле6, 5);
	
	Если СписокСокращений <> Неопределено Тогда
		Сокращение = ВыбратьИзСписка(СписокСокращений,Элемент);
		Если Сокращение <> Неопределено Тогда
			Поле6 = СокрЛП(Поле6) + " " + СокрЛП(Сокращение.Значение);
		КонецЕсли;
	КонецЕсли;
	
	Поле1 = ПолучитьИндексЛокальная(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8);
	СформироватьПредставление();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Регион".
//
Процедура РегионНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле2);
	ФормаВыбора.ОтобратьТолькоРегионы();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Район".
//
Процедура РайонНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле3);
	ФормаВыбора.УстановитьРодителя(Поле2, "", "", "");
	ФормаВыбора.ОтобратьТолькоРайоны();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Город".
//
Процедура ГородНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле4);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, "", "");
	ФормаВыбора.ОтобратьТолькоГорода();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле5);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, "");
	ФормаВыбора.ОтобратьТолькоНаселенныеПункты();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Улица".
//
Процедура УлицаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаВыбора", Элемент,);
	ФормаВыбора.НазваниеЭлемента = СокрЛП(Поле6);
	ФормаВыбора.УстановитьРодителя(Поле2, Поле3, Поле4, Поле5);
	ФормаВыбора.ОтобратьТолькоУлицы();
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Регион".
//
Процедура РегионОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	ЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле1, АдреснаяЗапись);
	КодРегионаПоНазв = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	КодРегиона = ?(КодРегионаПоНазв = "", КодРегиона, КодРегионаПоНазв);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Район".
//
Процедура РайонОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	ЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле1, АдреснаяЗапись);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Город".
//
Процедура ГородОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	ЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле1, АдреснаяЗапись);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "НаселенныйПункт".
//
Процедура НаселенныйПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	ЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле1, АдреснаяЗапись);
	СформироватьПредставление();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "Улица".
//
Процедура УлицаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	АдреснаяЗапись = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(ВыбранноеЗначение.Код);
	Элемент.Значение = СокрЛП(АдреснаяЗапись.Наименование) + " " + СокрЛП(АдреснаяЗапись.Сокращение);
	ЗаполнитьРодителей(Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле1, АдреснаяЗапись);
	СформироватьПредставление();

КонецПроцедуры

//  Процедура формирует строковое представление адресных элементов -
// "родителей" переданого в переданных параментрах
//
// Параметры:
//  Элемент - элемент справочника "Адресный классификатор", для которого надо получить родителей.
//  Регион - строка, куда будет помещено строковое представление "родительского" региона.
//  Район - строка, куда будет помещено строковое представление "родительского" района.
//  Город - строка, куда будет помещено строковое представление "родительского" города.
//  НаселенныйПункт - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//  Улица  - строка, куда будет помещено строковое представление "родительской" улица.
//  Дом - строка, куда будет помещено строковое представление "родительского" дома.
//  Индекс - строка, куда будет помещено строковое представление индекса.
//
Процедура ЗаполнитьРодителей(Регион, Район, Город, НаселенныйПункт, Улица, Дом, Индекс, Элемент) Экспорт

	Если Элемент.ТипАдресногоЭлемента > 5 Тогда
		АдресныйЭлемент = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%УправлениеКонтактнойИнформацией.МаскаДома());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 6 Тогда
			Дом = УправлениеКонтактнойИнформацией.ПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Дом = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 4 Тогда
		АдресныйЭлемент = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%УправлениеКонтактнойИнформацией.МаскаУлицы());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 5 Тогда
			Улица = УправлениеКонтактнойИнформацией.ПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Улица = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 3 Тогда
		АдресныйЭлемент = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%УправлениеКонтактнойИнформацией.МаскаНасПункта());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 4 Тогда
			НаселенныйПункт = УправлениеКонтактнойИнформацией.ПолучитьНазвание(АдресныйЭлемент);
		Иначе
			НаселенныйПункт = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 2 Тогда
		АдресныйЭлемент = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%УправлениеКонтактнойИнформацией.МаскаГорода());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 3 Тогда
			Город = УправлениеКонтактнойИнформацией.ПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Город = "";
		КонецЕсли;
	КонецЕсли;

	Если Элемент.ТипАдресногоЭлемента > 1 Тогда
		АдресныйЭлемент = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%УправлениеКонтактнойИнформацией.МаскаРайона());
		Если АдресныйЭлемент.ТипАдресногоЭлемента = 2 Тогда
			Район = УправлениеКонтактнойИнформацией.ПолучитьНазвание(АдресныйЭлемент);
		Иначе
			Район = "";
		КонецЕсли;
	КонецЕсли;

	АдресныйЭлемент = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресногоЭлемента(Элемент.Код - Элемент.Код%УправлениеКонтактнойИнформацией.МаскаРегиона());
	Если АдресныйЭлемент.ТипАдресногоЭлемента = 1 Тогда
		Регион = УправлениеКонтактнойИнформацией.ПолучитьНазвание(АдресныйЭлемент);
	Иначе
		Регион = "";
	КонецЕсли;

	Если НЕ ПустаяСтрока(Элемент.Индекс) Тогда
		Индекс = Элемент.Индекс;
	КонецЕсли;

КонецПроцедуры

// Процедура формирует строковое представление адреса.
Процедура СформироватьПредставление()
	
	Представление = 
					СокрЛП(КодСтраны) + "," 
				  + СокрЛП(Поле1) + ","
				  + ?(мНаВходеКодРегиона, СокрЛП(КодРегиона), СокрЛП(Поле2)) + ","
				  + СокрЛП(Поле3) + ","
				  + СокрЛП(Поле4) + ","
				  + СокрЛП(Поле5) + ","
				  + СокрЛП(Поле6) + ","
				  + СокрЛП(Поле7) + ","
				  + СокрЛП(Поле8) + ","
				  + СокрЛП(Поле9);
				  
	ПредставлениеНаФорме = РегламентированнаяОтчетность.ПредставлениеАдресаВФормате9Запятых(Представление);

КонецПроцедуры
			  
// Процедура разбирает адрес в формате "9 запятых" на составляющие.
Процедура РазобратьПредставление()			  
	
	Параметры = Новый СписокЗначений;
	
	ПредыдущаяЗапятая = 0;
	Для Сч = 1 По СтрДлина(Представление) Цикл
		ТекСимв = Сред(Представление, Сч, 1);
		Если ТекСимв = "," Тогда
			Параметры.Добавить(Сред(Представление, ПредыдущаяЗапятая + 1, Сч - (ПредыдущаяЗапятая + 1)));
			ПредыдущаяЗапятая = Сч;
		КонецЕсли;
	КонецЦикла;
	
	Если ПредыдущаяЗапятая <> СтрДлина(Представление) Тогда
		Параметры.Добавить(Сред(Представление, ПредыдущаяЗапятая + 1, СтрДлина(Представление) - ПредыдущаяЗапятая));
	КонецЕсли;
	
	Для Сч = Параметры.Количество() + 1 По 10 Цикл
		
		Параметры.Добавить("");
		
	КонецЦикла;
	
	КодСтраны = Параметры.Получить(0);
	Поле1 = Параметры.Получить(1);
	Если НЕ ОбщегоНазначения.ТолькоЦифрыВСтроке(Строка(Параметры.Получить(2))) ИЛИ ПустаяСтрока(Параметры.Получить(2)) Тогда
		мНаВходеКодРегиона = Ложь;
		Поле2 = Параметры.Получить(2);
		КодРегиона = РегламентированнаяОтчетность.КодРегионаПоНазванию(Поле2);
	Иначе
		мНаВходеКодРегиона = Истина;
		КодРегиона = Параметры.Получить(2);
		Поле2 = НазваниеРегионаПоКоду(КодРегиона);
	КонецЕсли;
	Поле3 = Параметры.Получить(3);
	Поле4 = Параметры.Получить(4);
	Поле5 = Параметры.Получить(5);
	Поле6 = Параметры.Получить(6);
	Поле7 = Параметры.Получить(7);
	Поле8 = Параметры.Получить(8);
	Поле9 = Параметры.Получить(9);
		
КонецПроцедуры

// Процедура - обработчик события ПередОткрытием формы.
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НачальноеЗначениеВыбора <> Неопределено Тогда
		
		НачальноеЗначениеВыбора.Свойство("Индекс", Поле1);
		НачальноеЗначениеВыбора.Свойство("Регион", КодРегиона);
		НачальноеЗначениеВыбора.Свойство("НазваниеРегиона", Поле2);
		Если ПустаяСтрока(Поле2) Тогда
			Поле2 = НазваниеРегионаПоКоду(КодРегиона);
		КонецЕсли;
		НачальноеЗначениеВыбора.Свойство("Район", Поле3);
		НачальноеЗначениеВыбора.Свойство("Город", Поле4);
		НачальноеЗначениеВыбора.Свойство("НаселенныйПункт", Поле5);
		НачальноеЗначениеВыбора.Свойство("Улица", Поле6);
		НачальноеЗначениеВыбора.Свойство("Дом", Поле7);
		НачальноеЗначениеВыбора.Свойство("Корпус", Поле8);
		НачальноеЗначениеВыбора.Свойство("Квартира", Поле9);
		НачальноеЗначениеВыбора.Свойство("Представление", Представление);
		
	КонецЕсли;
	
	КодСтраны = "643";
	мНаВходеКодРегиона = Ложь;
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(Поле1) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(КодРегиона) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле2) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле3) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле4) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле5) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле6) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле7) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле8) 
	   И РегламентированнаяОтчетность.ПустоеЗначение(Поле9) 
	   И НЕ ПустаяСтрока(Представление) Тогда
	   
	   РазобратьПредставление();
	   
	КонецЕсли;
	
	СформироватьПредставление();
		
	БылаНажатаКнопкаОК = Ложь;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки ОК на основной панели действий формы.
Процедура ОсновныеДействияФормыОК()
	
	БылаНажатаКнопкаОК = Истина;
	
	Закрыть();
	
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии формы.
Процедура ПриЗакрытии()
	
	Если НЕ БылаНажатаКнопкаОк Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НачальноеЗначениеВыбора) <> Тип("Структура") Тогда
		
		НачальноеЗначениеВыбора = Новый Структура;
		
	КонецЕсли;
	
	НачальноеЗначениеВыбора.Вставить("Индекс", Поле1);
	НачальноеЗначениеВыбора.Вставить("Регион", ?(СтрДлина(КодРегиона) = 1, "0" + КодРегиона, КодРегиона));
	НачальноеЗначениеВыбора.Вставить("НазваниеРегиона", Поле2);
	НачальноеЗначениеВыбора.Вставить("Район", Поле3);
	НачальноеЗначениеВыбора.Вставить("Город", Поле4);
	НачальноеЗначениеВыбора.Вставить("НаселенныйПункт", Поле5);
	НачальноеЗначениеВыбора.Вставить("Улица", Поле6);
	НачальноеЗначениеВыбора.Вставить("Дом", Поле7);
	НачальноеЗначениеВыбора.Вставить("Корпус", Поле8);
	НачальноеЗначениеВыбора.Вставить("Квартира", Поле9);
	НачальноеЗначениеВыбора.Вставить("Представление", Представление);
	НачальноеЗначениеВыбора.Вставить("КодСтраны", КодСтраны);
	
КонецПроцедуры

// Процедура возвращает название региона по его коду.
Функция НазваниеРегионаПоКоду(КодРег)
	
	Если РегламентированнаяОтчетность.ПустоеЗначение(КодРег) Тогда
		Возврат "";
	КонецЕсли;
	
	Попытка 
		КодРегЧисло = Число(КодРег);
	Исключение
		Возврат "";
	КонецПопытки;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	АдресныйКлассификатор.КодРегионаВКоде,
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента,
	               |	АдресныйКлассификатор.Наименование,
	               |	АдресныйКлассификатор.Код
	               |ИЗ
	               |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	               |
	               |ГДЕ
	               |	АдресныйКлассификатор.ТипАдресногоЭлемента = &ТипАдресногоЭлемента И
	               |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";
	
	Запрос.УстановитьПараметр("КодРегионаВКоде", КодРегЧисло);
	Запрос.УстановитьПараметр("ТипАдресногоЭлемента", 1);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		
		Выборка.Следующий();
		Возврат УправлениеКонтактнойИнформацией.ПолучитьПолноеНазвание(Выборка.Код);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Процедура - обработчик события ПередЗакрытием формы.
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Истина;
	
	Закрыть(БылаНажатаКнопкаОК);
	
КонецПроцедуры

// Процедура срабатывает при нажатии на кнопку "Классификатор" верхней командной панели.
// Открывает форму для загрузки адресного классификатора.
Процедура КоманднаяПанель1Классификатор(Кнопка)

	РегистрыСведений.АдресныйКлассификатор.ПолучитьФорму("ФормаЗагрузкиАдресногоКлассификатора").Открыть();

КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КодСтраны.
Процедура КодСтраныПриИзменении(Элемент)
	
	СформироватьПредставление();
	
КонецПроцедуры
