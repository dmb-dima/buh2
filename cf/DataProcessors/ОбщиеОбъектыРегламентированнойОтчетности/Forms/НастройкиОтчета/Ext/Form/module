////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// хранит вариант выбора страниц
Перем мПараметры Экспорт;
Перем мВариантВыбора Экспорт;
Перем мПрограммноеЗакрытие;
Перем мСпрашиватьОСохранении;
Перем ФлажкиНастройки;
Перем СвойстваЭУАвтосохранения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает (снимает) метки у всех строк дерева.
//
// Параметры:
//  Пометка - логическое выражение, значение пометки.
//	ТекКолонка - колонка дерева, для которой изменяются флажки.
//
Процедура УстановитьПометкуСтрокДерева(Пометка, ТекКолонка)

	Если ТекКолонка = "ПоказатьСтраницу" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			СтрокаУровня1[ТекКолонка] = Пометка;

			Если Пометка = 1 Тогда
				// Для составляющих страниц титульного листа 
				// запрещаем варирование показом страницы.
				// Флаг показа определяется только по титульному
				// листу в целом.
				Если СтрокаУровня1.Строки.Количество() > 0 Тогда
					НовПометка = 2;

					Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

						СтрокаУровня2[ТекКолонка] = НовПометка;

						Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
							Продолжить;
						КонецЕсли;

						Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
							СтрокаУровня3[ТекКолонка] = НовПометка;
						КонецЦикла;

					КонецЦикла;

					Продолжить;

				КонецЕсли; 

			ИначеЕсли Пометка = 0 Тогда
				// Предполагаем, что если пользователь отключил 
				// показ какой-либо страницы, то и необходимость
				// вывода этой страницы на печать отпадает
				СтрокаУровня1.ВыводНаПечать = Пометка;

				Для Каждого Строка Из СтрокаУровня1.Строки Цикл
					Строка.ВыводНаПечать = Пометка;
				КонецЦикла;

			КонецЕсли;

			Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

				СтрокаУровня2[ТекКолонка] = Пометка;

				Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
					СтрокаУровня3[ТекКолонка] = Пометка;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;

	ИначеЕсли  ТекКолонка = "ВыгрузитьСтраницу" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			СтрокаУровня1[ТекКолонка] = Пометка;

		КонецЦикла;

	ИначеЕсли ТекКолонка = "ВыводНаПечать" Тогда

		Для Каждого СтрокаУровня1 Из Дерево.Строки Цикл

			СтрокаУровня1[ТекКолонка] = Пометка;

			Если СтрокаУровня1.Строки.Количество() = 0 Тогда 
				Продолжить;
			КонецЕсли;

			Для Каждого СтрокаУровня2 Из СтрокаУровня1.Строки Цикл

				СтрокаУровня2[ТекКолонка] = Пометка;

				Если СтрокаУровня2.Строки.Количество() = 0 Тогда 
					Продолжить;
				КонецЕсли;

				Для Каждого СтрокаУровня3 Из СтрокаУровня2.Строки Цикл
					СтрокаУровня3[ТекКолонка] = Пометка;
				КонецЦикла;

			КонецЦикла;
		КонецЦикла;

	Иначе

		Предупреждение("Для установки или снятия меток по требуемой колонке
		               |предварительно активизируйте колонку.");

	КонецЕсли;

КонецПроцедуры // УстановитьПометкуСтрокДерева()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПередЗакрытием формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если мПрограммноеЗакрытие = Истина Тогда
		Возврат;
	КонецЕсли;
	Если мСпрашиватьОСохранении <> Ложь И Модифицированность Тогда
		Ответ = Вопрос("Настройки были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			мСпрашиватьОСохранении = Неопределено;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			мСпрашиватьОСохранении = Неопределено;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	ИначеЕсли мСпрашиватьОСохранении <> Ложь И НЕ Модифицированность Тогда
		мСпрашиватьОСохранении = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если мПараметры.РазрешитьВстроеннуюПечать Тогда
		ВладелецФормы.мПечатьБезШтрихкодаРазрешена = РазрешитьВстроеннуюПечать;
	КонецЕсли;
	
	Если мПараметры.СчетчикСтраниц Тогда
		ВладелецФормы.мСчетчикСтраниц = ОтключитьСчетчикСтраниц;
	КонецЕсли;
	
	Если мПараметры.ЗначенияИзСписка Тогда
		ВладелецФормы.мАвтоВыборКодов = ОтклВыборЗначений;
	КонецЕсли;
	
	Если мПараметры.Автосохранение Тогда
		ИнтервалАвтосохранения = ?(ФлажокАвтосохранение, ИнтервалАвтосохранения, 0);
		СохранитьЗначение("ИнтервалАвтосохраненияРегламентированнойОтчетности", ИнтервалАвтосохранения);
		ВладелецФормы.мИнтервалАвтосохранения = ИнтервалАвтосохранения;
		ВладелецФормы.ОтключитьОбработчикОжидания("ОбработчикСобытияПоТаймеру");
		Если ИнтервалАвтосохранения <> 0 Тогда
			ВладелецФормы.ПодключитьОбработчикОжидания("ОбработчикСобытияПоТаймеру", Цел(ИнтервалАвтосохранения * 60));
		КонецЕсли;
	КонецЕсли;
	
	Если мПараметры.ПроверкаСоотношений Тогда
		ВладелецФормы.мПроверятьСоотношенияПриПечатиИВыгрузки = ПроверятьСоотношенияПриПечатиИВыгрузки;
	КонецЕсли;
	
	Если мПараметры.УправлениеВариантами Тогда
		ВладелецФормы.мОтключитьАвтоматическоеУправлениеВариантами = ОтключитьАвтоматическоеУправлениеВариантами;
	КонецЕсли;
	
	мПрограммноеЗакрытие = Истина;
	Отказ = Истина;
	Закрыть(Дерево);
		
КонецПроцедуры

Функция ЧислоПрорисованныхНастроек()
	
	Результат = 0;
	Для Каждого ЭУ Из ЭлементыФормы Цикл
		Если ТипЗнч(ЭУ) = Тип("Флажок") Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

Процедура ПрорисоватьНастройку(Имя)
	
	ЧислоУжеИмеющихсяНастроек = ЧислоПрорисованныхНастроек();
	СвойстваФлажка = ФлажкиНастройки.Найти(Имя, "Имя");
	Флажок = ЭлементыФормы.Добавить(Тип("Флажок"), СвойстваФлажка.Имя, Истина, ЭлементыФормы.ПанельДинамическиеФлажки);
	Флажок.Лево = 6;
	Флажок.Верх = 6 + ЧислоУжеИмеющихсяНастроек * 24;
	Флажок.Ширина = ЭлементыФормы.ПанельДинамическиеФлажки.Ширина - 8;
	Флажок.Высота = 15;
	Флажок.ИзменяетДанные = Истина;
	Флажок.Заголовок = СвойстваФлажка.Заголовок;
	Если ЗначениеЗаполнено(СвойстваФлажка.Данные) Тогда
		Флажок.Данные = СвойстваФлажка.Данные;
	КонецЕсли;
	Если ЗначениеЗаполнено(СвойстваФлажка.Подсказка) Тогда
		Флажок.Подсказка = СвойстваФлажка.Подсказка;
	КонецЕсли;
	Если СвойстваФлажка.ОбработчикИзменения <> Неопределено Тогда
		Флажок.УстановитьДействие("ПриИзменении", СвойстваФлажка.ОбработчикИзменения);
	КонецЕсли;
	
	Если Имя = "ФлажокАвтосохранение" Тогда
		ЭУФлажокАвтосохранение = ЭлементыФормы.Найти("ФлажокАвтосохранение");
		Если ЭУФлажокАвтосохранение <> Неопределено Тогда
			Для Каждого СвойствоЭУАвтосохранения Из СвойстваЭУАвтосохранения Цикл
				НовыйЭУ = ЭлементыФормы.Добавить(Тип(СвойствоЭУАвтосохранения.Значение._ТипЭлемента), СвойствоЭУАвтосохранения.Значение._ИмяЭлемента, Истина, ЭлементыФормы.ПанельДинамическиеФлажки);
				НовыйЭУ.Верх = ЭУФлажокАвтосохранение.Верх - 2;
				ЗаполнитьЗначенияСвойств(НовыйЭУ, СвойствоЭУАвтосохранения.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ЭлементыФормы.Дерево.Колонки.ВыгрузитьСтраницу.Видимость = мПараметры.Выгрузка;
	ЭлементыФормы.Дерево.Колонки.ВыгрузитьСтраницу.ИзменятьВидимость = мПараметры.Выгрузка;
	
	Если мПараметры.РазрешитьВстроеннуюПечать Тогда
		ПрорисоватьНастройку("РазрешитьВстроеннуюПечать");
		РазрешитьВстроеннуюПечать = ВладелецФормы.мПечатьБезШтрихкодаРазрешена;
	КонецЕсли;
	
	Если мПараметры.СчетчикСтраниц Тогда
		ПрорисоватьНастройку("ОтключитьСчетчикСтраниц");
		ОтключитьСчетчикСтраниц = ВладелецФормы.мСчетчикСтраниц;
	КонецЕсли;
	
	Если мПараметры.ЗначенияИзСписка Тогда
		ПрорисоватьНастройку("ОтклВыборЗначений");
		ОтклВыборЗначений = ВладелецФормы.мАвтоВыборКодов;
	КонецЕсли;
	
	Если мПараметры.Автосохранение Тогда
		ПрорисоватьНастройку("ФлажокАвтосохранение");
		ИнтервалАвтосохранения = ВладелецФормы.мИнтервалАвтосохранения;
		Если ИнтервалАвтосохранения = 0 Тогда
			ФлажокАвтосохранение = Ложь;
			ЭлементыФормы.ИнтервалАвтосохранения.Доступность = Ложь;
		КонецЕсли;
		ФлажокАвтосохранение = (ИнтервалАвтосохранения <> 0);
		Если ИнтервалАвтосохранения = 0 Тогда
			ИнтервалАвтосохранения = 10;
		КонецЕсли;
	КонецЕсли;
	
	Если мПараметры.ПроверкаСоотношений Тогда
		ПрорисоватьНастройку("ПроверятьСоотношенияПриПечатиИВыгрузки");
		ПроверятьСоотношенияПриПечатиИВыгрузки = ВладелецФормы.мПроверятьСоотношенияПриПечатиИВыгрузки;
	КонецЕсли;

	Если мПараметры.УправлениеВариантами Тогда
		ПрорисоватьНастройку("ОтключитьАвтоматическоеУправлениеВариантами");
		ОтключитьАвтоматическоеУправлениеВариантами = ВладелецФормы.мОтключитьАвтоматическоеУправлениеВариантами;
	КонецЕсли;
	
	ДеревоСтраницОтчета = НачальноеЗначениеВыбора.Скопировать();

	// Если список одноуровневый, то показывать иерархию не будем
	ЭлементыФормы.Дерево.Колонки["Представление"].ОтображатьИерархию = Ложь;
	Для Каждого Строка Из ДеревоСтраницОтчета.Строки Цикл
		Если Строка.Строки.Количество() > 0 Тогда
			ЭлементыФормы.Дерево.Колонки["Представление"].ОтображатьИерархию = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	ЭлементыФормы.Дерево.ТолькоПросмотр = (ДеревоСтраницОтчета.Строки.Количество() = 1);
	ЭлементыФормы.КоманднаяПанельДерево.Доступность = (ДеревоСтраницОтчета.Строки.Количество() > 1);
	
	Дерево = ДеревоСтраницОтчета;
	
	УправлениеЭУ();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - действие кнопки ОК командной панели формы.
//
Процедура ОсновныеДействияФормыКнопкаВыбратьНажатие(Кнопка)

	мСпрашиватьОСохранении = Ложь;
	Закрыть();
	
КонецПроцедуры // ОсновныеДействияФормыКнопкаВыбратьНажатие()

// Процедура - действие кнопки Закрыть командной панели формы.
// 
Процедура ОсновныеДействияФормыЗакрыть(Кнопка)
	
	мСпрашиватьОСохранении = Истина;
	Закрыть();
	
КонецПроцедуры

// Процедура - действие кнопки УстановитьВсе командной панели КоманднаяПанельДерево.
//
Процедура КнопкаУстановитьВсеНажатие(Элемент)

	ТекКолонка = ЭлементыФормы.Дерево.ТекущаяКолонка.Имя;
	Если ТекКолонка = "ВыгрузитьСтраницу" Тогда
		Если Дерево.Строки.НайтиСтроки(Новый Структура("ВыгрузитьСтраницу", 1)).Количество() = Дерево.Строки.Количество() Тогда
			УстановитьПометкуСтрокДерева(2, ТекКолонка);
		Иначе
			УстановитьПометкуСтрокДерева(1, ТекКолонка);
		КонецЕсли;
	Иначе
		УстановитьПометкуСтрокДерева(1, ТекКолонка);
	КонецЕсли;

КонецПроцедуры // УстановитьВсеНажатие()

// Процедура - действие кнопки СнятьВсе командной панели КоманднаяПанельДерево.
//
Процедура КнопкаСнятьВсеНажатие(Элемент)

	УстановитьПометкуСтрокДерева(0, ЭлементыФормы.Дерево.ТекущаяКолонка.Имя);

КонецПроцедуры // СнятьВсеНажатие()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события ПриИзмененииФлажка табличного поля Дерево.
// 
Процедура ДеревоПриИзмененииФлажка(Элемент, Колонка)

	НоваяПометка = Элемент.ТекущиеДанные[Колонка.Имя];

	Если Колонка.Имя = "ПоказатьСтраницу" Тогда
		Если НоваяПометка = 1 Тогда

			// Для составляющих страниц титульного листа 
			// запрещаем варирование показом страницы.
			// Флаг показа определяется только по титульному
			// листу в целом.
			НоваяПометка = 2;

		ИначеЕсли НоваяПометка = 0 Тогда
			// Предполагаем, что если пользователь отключил 
			// показ какой-либо страницы, то и необходимость
			// вывода этой страницы на печать отпадает
			Элемент.ТекущаяСтрока.ВыводНаПечать = НоваяПометка;

			Для Каждого Строка Из Элемент.ТекущаяСтрока.Строки Цикл
				Строка.ВыводНаПечать = НоваяПометка;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли Колонка.Имя = "ВыводНаПечать" Тогда

		ВерхняяГруппировка = Элемент.ТекущаяСтрока.Родитель;
		Если ВерхняяГруппировка <> Неопределено Тогда
			// Проверяем все вложенные строки на предмет
			// того, установлены или сняты ли везде метки.
			// Если нет, то устанавливаем третье состояние
			// метки строки-родителя 
			НеВсеОтмечены = 0;

			Для каждого СтрокаУровня Из ВерхняяГруппировка.Строки Цикл

				Если СтрокаУровня.ВыводНаПечать <> НоваяПометка Тогда

					НеВсеОтмечены = 1;

					Прервать;
				КонецЕсли; 

			КонецЦикла; 

			Если НеВсеОтмечены = 1 Тогда
				ВерхняяГруппировка.ВыводНаПечать = 2;
			Иначе
				ВерхняяГруппировка.ВыводНаПечать = НоваяПометка;
			КонецЕсли;

		КонецЕсли;

	ИначеЕсли Колонка.Имя = "ВыгрузитьСтраницу" Тогда
		
		Если НоваяПометка = 0 Тогда
			Элемент.ТекущиеДанные[Колонка.Имя] = 1;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДеревоПриИзмененииФлажка()

// Процедура - обработчик события ПередНачаломИзменения табличного поля Дерево.
//
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)

	ТекКолонка  = Элемент.ТекущаяКолонка.Имя;
	ТекЗначение = Элемент.ТекущиеДанные[ТекКолонка];

	Если ТекКолонка = "ПоказатьСтраницу" Тогда
		// Лист является составной частью титульного листа,
		// поэтому не меняем состояние флажка

		Если ТекЗначение = 2 Тогда

			Отказ = Истина;

		ИначеЕсли ТекЗначение = 0 Тогда
			Если Элемент.ТекущиеДанные.Родитель <> Неопределено Тогда

				Отказ = Истина;

			КонецЕсли; 
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДеревоПередНачаломИзменения()

// Процедура - обработчик события ПередНачаломДобавления табличного поля Дерево.
//
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель)

	Отказ = Истина;

КонецПроцедуры // ДеревоПередНачаломДобавления()

// Процедура - обработчик события ПередУдалением табличного поля Дерево.
//
Процедура ДеревоПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры // ДеревоПередУдалением()

// Процедура - обработчик события ПриАктивизации табличного поля Дерево.
//
Процедура ДеревоПриАктивизацииЯчейки(Элемент)
	
	ТекКолонка = ЭлементыФормы.Дерево.ТекущаяКолонка;
	ВыбранаКолонкаСФлажками = ЗначениеЗаполнено(ТекКолонка.ДанныеФлажка);
	
	ЭлементыФормы.КоманднаяПанельДерево.Кнопки.СнятьВсе.Доступность = ВыбранаКолонкаСФлажками И ТекКолонка.Имя <> "ВыгрузитьСтраницу";
	ЭлементыФормы.КоманднаяПанельДерево.Кнопки.УстановитьВсе.Доступность = ВыбранаКолонкаСФлажками;
	
КонецПроцедуры

// Процедура - обарботчик события ПриИзменении флажка ФлажокАвтосохранение.
//
Процедура ФлажокАвтосохранениеПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ФлажокРазрешитьВстроеннуюПечатьПриИзменении(Элемент)
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ДобавитьОписаниеФлажкаНастройки(Имя, Данные, Заголовок, Подсказка = Неопределено, ОбработчикИзменения = Неопределено);
	
	НовСтр = ФлажкиНастройки.Добавить();
	НовСтр.Имя = Имя;
	НовСтр.Данные = Данные;
	НовСтр.Заголовок = Заголовок;
	НовСтр.Подсказка = Подсказка;
	НовСтр.ОбработчикИзменения = ОбработчикИзменения;
	
КонецПроцедуры

Процедура УправлениеЭУ()
	
	Если ЭлементыФормы.Найти("ОтключитьСчетчикСтраниц") <> Неопределено И ЭлементыФормы.Найти("РазрешитьВстроеннуюПечать") <> Неопределено Тогда
		ЭлементыФормы.ОтключитьСчетчикСтраниц.Доступность = РазрешитьВстроеннуюПечать;
		//ЭлементыФормы.Дерево.Колонки.ВыводНаПечать.Видимость = РазрешитьВстроеннуюПечать;
		Если НЕ ЭлементыФормы.ОтключитьСчетчикСтраниц.Доступность Тогда
			ОтключитьСчетчикСтраниц = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ИнтервалАвтосохранения.Доступность = ФлажокАвтосохранение;
	ЭлементыФормы.НадписьМинут.Доступность = ФлажокАвтосохранение;
	
КонецПроцедуры

мПараметры = Новый Структура;
мПараметры.Вставить("СчетчикСтраниц", Истина);
мПараметры.Вставить("ЗначенияИзСписка", Истина);
мПараметры.Вставить("Автосохранение", Истина);
мПараметры.Вставить("Выгрузка", Ложь);
мПараметры.Вставить("ПроверкаСоотношений", Ложь);
мПараметры.Вставить("УправлениеВариантами", Ложь);
мПараметры.Вставить("РазрешитьВстроеннуюПечать", Ложь);

мПрограммноеЗакрытие = Ложь;

ФлажкиНастройки = Новый ТаблицаЗначений;
ФлажкиНастройки.Колонки.Добавить("Имя");
ФлажкиНастройки.Колонки.Добавить("Данные");
ФлажкиНастройки.Колонки.Добавить("Заголовок");
ФлажкиНастройки.Колонки.Добавить("Подсказка");
ФлажкиНастройки.Колонки.Добавить("ОбработчикИзменения");

ДобавитьОписаниеФлажкаНастройки("РазрешитьВстроеннуюПечать",
								"РазрешитьВстроеннуюПечать",
								"Разрешить печать без штрихкода PDF417",
								,
								Новый Действие("ФлажокРазрешитьВстроеннуюПечатьПриИзменении"));
ДобавитьОписаниеФлажкаНастройки("ОтключитьСчетчикСтраниц",
								"ОтключитьСчетчикСтраниц",
								"Отключить счетчик страниц");
ДобавитьОписаниеФлажкаНастройки("ОтклВыборЗначений",
								"ОтклВыборЗначений",
								"Отключить выбор значений из списка");
ДобавитьОписаниеФлажкаНастройки("ФлажокАвтосохранение",
								"ФлажокАвтосохранение",
								"Автосохранение каждые",
								,
								Новый Действие("ФлажокАвтосохранениеПриИзменении"));
ДобавитьОписаниеФлажкаНастройки("ПроверятьСоотношенияПриПечатиИВыгрузки",
								"ПроверятьСоотношенияПриПечатиИВыгрузки",
								"Проверять соотношения показателей при печати и выгрузке");
ДобавитьОписаниеФлажкаНастройки("ОтключитьАвтоматическоеУправлениеВариантами",
								"ОтключитьАвтоматическоеУправлениеВариантами",
								"Отключить формирование информации о варианте отчета при выгрузке",
								"Флажок регулирует автоматическое формирование показателя выгрузки ВарФОтч в зависимости от значений вида документа (первичный/корректирующий) и номера корректировки.
								|Флажок необходим для совместимости с реализацией механизма выгрузки в старых релизах конфигурации.
								|Не изменяйте флажок, если Вы не уверены в своих действиях. Иначе, файл с электронным представлением отчета может не пройти проверку приемного ПО налоговой инспекции.
								|При установленном флажке значение показателя будет равно 999.");

СвойстваЭУАвтосохранения = Новый Соответствие;

ЭУИнтервалАвтосохранения = Новый Структура;
ЭУИнтервалАвтосохранения.Вставить("Лево", 159);
ЭУИнтервалАвтосохранения.Вставить("Ширина", 54);
ЭУИнтервалАвтосохранения.Вставить("Высота", 19);
ЭУИнтервалАвтосохранения.Вставить("Данные", "ИнтервалАвтосохранения");
ЭУИнтервалАвтосохранения.Вставить("ИзменяетДанные", Истина);
ЭУИнтервалАвтосохранения.Вставить("МинимальноеЗначение", 1);
ЭУИнтервалАвтосохранения.Вставить("МаксимальноеЗначение", 999);
ЭУИнтервалАвтосохранения.Вставить("КнопкаРегулирования", Истина);
ЭУИнтервалАвтосохранения.Вставить("СвещениеВерх", -3);
ЭУИнтервалАвтосохранения.Вставить("_ТипЭлемента", "ПолеВвода");
ЭУИнтервалАвтосохранения.Вставить("_ИмяЭлемента", "ИнтервалАвтосохранения");
СвойстваЭУАвтосохранения.Вставить("ИнтервалАвтосохранения", ЭУИнтервалАвтосохранения);

ЭУНадписьМинут = Новый Структура;
ЭУНадписьМинут.Вставить("Лево", 218);
ЭУНадписьМинут.Вставить("Ширина", 35);
ЭУНадписьМинут.Вставить("Высота", 15);
ЭУНадписьМинут.Вставить("Заголовок", "минут");
ЭУНадписьМинут.Вставить("СвещениеВерх", -3);
ЭУНадписьМинут.Вставить("_ТипЭлемента", "Надпись");
ЭУНадписьМинут.Вставить("_ИмяЭлемента", "НадписьМинут");
СвойстваЭУАвтосохранения.Вставить("НадписьМинут", ЭУНадписьМинут);
