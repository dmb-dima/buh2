Перем СписокПечатаемыхЛистов Экспорт;
Перем ПоследнийРедактируемыйТабличныйДокумент;
Перем ВидПечати Экспорт;
Перем ЧерныйКвадрат;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выводит на печать все табличные документы из списка. Вызывается при
// попытке открытия формы с параметром ВидПечати = "Печатать сразу".
//
// Параметры:
//	Нет.
//
Процедура ПечататьСразу()
	
	Для Каждого Эл Из СписокПечатаемыхЛистов Цикл
		Эл.ТабличныйДокумент.КоличествоЭкземпляров = 1;
		Эл.ТабличныйДокумент.ЭкземпляровНаСтранице = 1;
		Эл.ТабличныйДокумент.Напечатать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура сохраняет изменения, произведенные в поле табличного документа ИтоговаяТаблица.
//
// Параметры:
//	Нет.
//
Процедура ЗафиксироватьИзмененияТабличногоДокумента()
	
	Если ПоследнийРедактируемыйТабличныйДокумент <> Неопределено Тогда
		ПоследнийРедактируемыйТабличныйДокумент.ТабличныйДокумент.Очистить();
		ПоследнийРедактируемыйТабличныйДокумент.ТабличныйДокумент.Вывести(ЭлементыФормы.ИтоговаяТаблица);
		ЗаполнитьЗначенияСвойств(ПоследнийРедактируемыйТабличныйДокумент.ТабличныйДокумент, ЭлементыФормы.ИтоговаяТаблица, "ПолеСлева, ПолеСверху, ПолеСправа, ПолеСнизу");
	КонецЕсли;
	
КонецПроцедуры

// Процедура показывает в поле табличного документа ИтоговаяТаблица ("выбранный лист") табличный документ,
// соответствующий выбранной строке табличного поля СписокЛистов.
//
// Параметры:
//	Нет.
Процедура ОсвежитьВыбранныйЛист()
	
	ЗафиксироватьИзмененияТабличногоДокумента();
	ЭлементыФормы.ИтоговаяТаблица.Очистить();
	Если ЭлементыФормы.СписокЛистов.ТекущиеДанные.Уровень() = 1 Тогда
		ВыводимыйТаблДок = ЭлементыФормы.СписокЛистов.ТекущиеДанные.ТабличныйДокумент;
		ЭлементыФормы.ИтоговаяТаблица.Вывести(ВыводимыйТаблДок);
		ЭлементыФормы.ИтоговаяТаблица.ОриентацияСтраницы = ВыводимыйТаблДок.ОриентацияСтраницы;
		ЭлементыФормы.ИтоговаяТаблица.АвтоМасштаб = ВыводимыйТаблДок.АвтоМасштаб;
		Если НЕ ЭлементыФормы.ИтоговаяТаблица.АвтоМасштаб Тогда
			ЭлементыФормы.ИтоговаяТаблица.МасштабПечати = ВыводимыйТаблДок.МасштабПечати;
		КонецЕсли;
		ЭлементыФормы.ИтоговаяТаблица.Область().ЦветФона = Новый Цвет();
		ЭлементыФормы.ИтоговаяТаблица.ОтображатьСетку = ОтображатьСетку;
		ЭлементыФормы.ИтоговаяТаблица.ОтображатьЗаголовки = ОтображатьЗаголовки;
		ЭлементыФормы.ИтоговаяТаблица.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ИтоговаяТаблица.ЧерноБелыйПросмотр = Истина;
		ЭлементыФормы.ИтоговаяТаблица.ПолеСверху = ВыводимыйТаблДок.ПолеСверху;
		ЭлементыФормы.ИтоговаяТаблица.ПолеСнизу = ВыводимыйТаблДок.ПолеСнизу;
		ЭлементыФормы.ИтоговаяТаблица.ПолеСправа = ВыводимыйТаблДок.ПолеСправа;
		ЭлементыФормы.ИтоговаяТаблица.ПолеСлева = ВыводимыйТаблДок.ПолеСлева;
	Иначе
		ЭлементыФормы.ИтоговаяТаблица.ТолькоПросмотр = Истина;
		ТД = Новый ТабличныйДокумент;
		ЭлементыФормы.ИтоговаяТаблица.Вывести(ТД);
		КолСтрокВГруппе = ЭлементыФормы.СписокЛистов.ТекущиеДанные.Строки.Количество();
		Отступ			= 10;
		Интервал		= 16;
		ШиринаРисунка	= 24;
		ВысотаРисунка	= 30;
		РисунковВСтроке	= 3;
		ЭлементыФормы.ИтоговаяТаблица.Область().ЦветФона = Новый Цвет(255, 251, 240);
		Для Инд = 0 По КолСтрокВГруппе - 1 Цикл
			
			НовРис = ЭлементыФормы.ИтоговаяТаблица.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
			НовРис.Узор = ТипУзораТабличногоДокумента.Сплошной;
			НовРис.ЦветФона = Новый Цвет(255, 255, 205);
			Если ЭлементыФормы.СписокЛистов.ТекущиеДанные.Строки.Получить(Инд).ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет Тогда
				НовРис.Ширина = ШиринаРисунка;
				НовРис.Высота = ВысотаРисунка;
			Иначе
				НовРис.Ширина = ВысотаРисунка;
				НовРис.Высота = ШиринаРисунка;
			КонецЕсли;
			НовРис.Лево = Отступ + ((Инд % РисунковВСтроке) * (ШиринаРисунка + Интервал)) + Цел((ШиринаРисунка + Интервал - НовРис.Ширина) / 2);
			НовРис.Верх = Отступ + ((Цел(Инд / РисунковВСтроке)) * (ВысотаРисунка + Интервал)) + Цел((ВысотаРисунка + Интервал - НовРис.Высота) / 2);
			НовРис.ГиперСсылка = Истина;
			НовРис.Текст = ЭлементыФормы.СписокЛистов.ТекущиеДанные.Строки.Получить(Инд).Наименование;
			НовРис.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			НовРис.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
			НовРис.Имя = "Лист" + Формат(Инд, "ЧН=0; ЧГ=");
			
			НовЛиния = ЭлементыФормы.ИтоговаяТаблица.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
			НовЛиния.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
			НовЛиния.ГиперСсылка = Истина;
			Если ЭлементыФормы.СписокЛистов.ТекущиеДанные.Строки.Получить(Инд).ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет Тогда
				НовЛиния.Ширина = ШиринаРисунка - 0.3;
				НовЛиния.Высота = 0.01;
			Иначе
				НовЛиния.Ширина = ВысотаРисунка - 0.3;
				НовЛиния.Высота = 0.01;
			КонецЕсли;
			НовЛиния.Лево = НовРис.Лево + 0.3;
			НовЛиния.Верх = НовРис.Верх + НовРис.Высота;
			НовЛиния.Имя = "ЛНПН" + Формат(Инд, "ЧН=0; ЧГ=");
			
			НовЛиния = ЭлементыФормы.ИтоговаяТаблица.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
			НовЛиния.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
			НовЛиния.ГиперСсылка = Истина;
			Если ЭлементыФормы.СписокЛистов.ТекущиеДанные.Строки.Получить(Инд).ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет Тогда
				НовЛиния.Ширина = 0.01;
				НовЛиния.Высота = ВысотаРисунка - 0.3;
			Иначе
				НовЛиния.Ширина = 0.01;
				НовЛиния.Высота = ШиринаРисунка - 0.3;
			КонецЕсли;
			НовЛиния.Лево = НовРис.Лево + НовРис.Ширина;
			НовЛиния.Верх = НовРис.Верх + 0.3;
			НовЛиния.Имя = "ПНПВ" + Формат(Инд, "ЧН=0; ЧГ=");
			
		КонецЦикла;
		ЭлементыФормы.ИтоговаяТаблица.ОтображатьСетку = Ложь;
		ЭлементыФормы.ИтоговаяТаблица.ОтображатьЗаголовки = Ложь;
		ЭлементыФормы.ИтоговаяТаблица.ТолькоПросмотр = Истина;
		ЭлементыФормы.ИтоговаяТаблица.ЧерноБелыйПросмотр = Ложь;
	КонецЕсли;
	
	Если ЭлементыФормы.СписокЛистов.ТекущиеДанные.Уровень() = 1 Тогда
		ПоследнийРедактируемыйТабличныйДокумент = ЭлементыФормы.СписокЛистов.ТекущаяСтрока;
	Иначе
		ПоследнийРедактируемыйТабличныйДокумент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура регулирует доступность флажка РазобратьПоКопиям и переформировывает текст подсказки,
// отображаемой на командной панели ОсновныеДействияФормы.
//
// Параметры:
//	Нет.
//
Процедура ОтработатьИзмененияПараметровПечати()
	
	Если КоличествоКопий = 0 ИЛИ КоличествоКопий = Неопределено Тогда
		КоличествоКопий = 1;
	КонецЕсли;
	Если КоличествоКопий <> 1 Тогда
		ЭлементыФормы.РазобратьПоКопиям.Доступность = Истина;
	Иначе
		ЭлементыФормы.РазобратьПоКопиям.Доступность = Ложь;
	КонецЕсли;
	СформироватьТекстПодскзаки();
	
КонецПроцедуры

// Регулирует доступность флажка "разобрать по копиям" и обновляет текст подсказки
// на нижней панели действий формы при изменении параметра печати "Количество копий".
//
Процедура КоличествоКопийПриИзменении(Элемент)
	
	ОтработатьИзмененияПараметровПечати();
	
КонецПроцедуры

// Процедура формирует текст подсказки, отображаемой на командной панели ОсновныеДействияФормы.
//
// Параметры:
//	Нет.
//
Процедура СформироватьТекстПодскзаки()
	
	КоличествоТаблДок = КоличествоВыбранныхТабличныхДокументов();
	КоличествоЛистовВсего = 0;
	Для Каждого Стр1 Из СписокЛистов.Строки Цикл
		КоличествоЛистовВсего = КоличествоЛистовВсего + Стр1.Строки.Количество();
	КонецЦикла;
	КоличествоЛистовТребуется = КоличествоТаблДок * КоличествоКопий;

	ТекстЛистовВсего = СтрЗаменить(ЧислоПрописью(КоличествоЛистовВсего, "НП=Истина, НД=Ложь", "листа, листов, листов, м, , , , ,0"),
	                               ЧислоПрописью(КоличествоЛистовВсего, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
	                               "");

	ТекстЛистовТребуется = СтрЗаменить(ЧислоПрописью(КоличествоЛистовТребуется, "НП=Истина, НД=Ложь", "лист, листа, листов, м, , , , ,0"),
	                                   ЧислоПрописью(КоличествоЛистовТребуется, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
	                                   "");

	ТекстСтатистики = "Выбрано " + КоличествоТаблДок + " из " + КоличествоЛистовВсего + " " + ТекстЛистовВсего +". "
	                + "Для печати требуется " + КоличествоЛистовТребуется + " " + ТекстЛистовТребуется +" бумаги.";
	
КонецПроцедуры

// Процедура перебирает все рисунки - "черные квадраты" на табличных документах и подменяет рисунок 
// "правильным" из переменной ЧерныйКвадрат.
//
// Параметры:
//	Нет.
//
Процедура ОбработатьЧерныеКвадратыПоКраям()
	
	Для Каждого Эл Из СписокПечатаемыхЛистов Цикл
		ТаблДок = Эл.ТабличныйДокумент;
		Для Каждого Рисунок Из ТаблДок.Рисунки Цикл
			Если Рисунок.ТипРисунка = ТипРисункаТабличногоДокумента.Картинка И Рисунок.Высота < 10 И Рисунок.Ширина < 10 Тогда
				Рисунок.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
				Рисунок.Картинка = ЧерныйКвадрат;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура присваивает свойствам ОтображатьЗаголовки и ОтображатьСетку 
// поля табличного документа ИтоговаяТаблица значения, установленные пользователем.
//
// Параметры:
//	Нет.
//
Процедура УстановитьОпцииТаблицы()
	
	ЭлементыФормы.ИтоговаяТаблица.ОтображатьЗаголовки = ОтображатьЗаголовки;
	ЭлементыФормы.ИтоговаяТаблица.ОтображатьСетку = ОтображатьСетку;
	
КонецПроцедуры

// Функция возвращает общее количество выбранных из списка печатаемых листов.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение: 
//	Число - общее количество выбранных из списка печатаемых листов.
//
Функция КоличествоВыбранныхТабличныхДокументов()
	
	Кол = 0;
	Для Каждого Стр1 Из СписокЛистов.Строки Цикл
		Для Каждого Стр2 Из Стр1.Строки Цикл
			Кол = Кол + ?(Стр2.Пом, 1, 0);
		КонецЦикла;
	КонецЦикла;
	Возврат Кол;
	
КонецФункции

Процедура ВыгрузитьНаДиск(ВФормате)
	
	СоответствиеФорматаРасширению = Новый Соответствие;
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLS, "xls");
	
	ЗафиксироватьИзмененияТабличногоДокумента();
	
	Если КоличествоВыбранныхТабличныхДокументов() = 0 Тогда
		Предупреждение("Выберите листы в дереве печатаемых листов!");
		Возврат;
	КонецЕсли;
	
	ПутьДляВыгрузки = РегламентированнаяОтчетность.ПолучитьПутьВыгрузки();
	Если ПутьДляВыгрузки = Неопределено ИЛИ ПустаяСтрока(ПутьДляВыгрузки) ИЛИ ПутьДляВыгрузки = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ПризнакОшибки = Ложь;
	Для Каждого Стр1 Из СписокЛистов.Строки Цикл
		Для Каждого Эл Из Стр1.Строки Цикл
			Если Эл.Пом Тогда
				ИмяФайла = ПутьДляВыгрузки + СформироватьИмяФайла(Стр1.Наименование + ". " + Эл.Наименование + "." + СоответствиеФорматаРасширению[ВФормате]);
				Попытка
					Состояние("Сохранение " + ИмяФайла);
					Эл.ТабличныйДокумент.Область().ЦветФона = Новый Цвет();
					Эл.ТабличныйДокумент.Записать(ИмяФайла, ВФормате);
				Исключение
					//Сообщить(ОписаниеОшибки(), СтатусСообщения.Важное);
					ПризнакОшибки = Истина;
				Конецпопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Состояние();
	
	Если ПризнакОшибки Тогда
		Предупреждение("Один или несколько файлов не удалось записать в указанный каталог!
						|Возможно, недостаточно места на диске или диск защищен от записи.", , "Ошибка записи на диск");
	Иначе
		Если Вопрос("Выбранные файлы успешно записаны на диск. Открыть каталог?", РежимДиалогаВопрос.ДаНет,,, "Файлы успешно записаны") = КодВозвратаДиалога.Да Тогда
			ЗапуститьПриложение("explorer " + ПутьДляВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьИмяФайла(ИсходноеИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если СписокПечатаемыхЛистов.Количество() = 0 Тогда
		Предупреждение("Не выбраны листы для вывода на печать!");
		Отказ = Истина;
	КонецЕсли;
	ОбработатьЧерныеКвадратыПоКраям();
	Если ВидПечати = "ПечататьСразу" Тогда
		ПечататьСразу();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// В процедуре инициализируются начальные установки и заполняется список печатаемых листов.
//
Процедура ПриОткрытии()
	
	// Инициализируем начальные установки
	Заголовок = ВладелецФормы.Заголовок + " - предварительный просмотр";
	КоличествоКопий     = ВосстановитьЗначение("ПредпросмотрРегламентированнойОтчетностиКоличествоКопий");
	РазобратьПоКопиям   = ВосстановитьЗначение("ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям");
	ОтображатьСетку     = ВосстановитьЗначение("ПредпросмотрРегламентированнойОтчетностиОтображатьСетку");
	ОтображатьЗаголовки = ВосстановитьЗначение("ПредпросмотрРегламентированнойОтчетностиОтображатьЗаголовки");
	Если РазобратьПоКопиям = Неопределено Тогда
		РазобратьПоКопиям = Истина;
	КонецЕсли;
	Если ОтображатьСетку = Неопределено Тогда
		ОтображатьСетку = Ложь;
	КонецЕсли;
	Если ОтображатьЗаголовки = Неопределено Тогда
		ОтображатьЗаголовки = Ложь;
	КонецЕсли;
	ПоследнийРедактируемыйТабличныйДокумент = Неопределено;
	
	// заполняем список печатаемых листов на основании промежуточной переменной СписокПечатаемыхЛистов
	СписокЛистов.Строки.Очистить();
	Для Каждого Сч Из СписокПечатаемыхЛистов Цикл
		Стр1Уровня = СписокЛистов.Строки.Найти(Сч.Идентификатор, "ТабличныйДокумент");
		Если СписокЛистов.Строки.Найти(Сч.Идентификатор, "ТабличныйДокумент") = Неопределено Тогда
			Стр1Уровня = СписокЛистов.Строки.Добавить();
			Стр1Уровня.Пом = 1;
			Стр1Уровня.Наименование = Сч.Идентификатор.Заголовок;
			Стр1Уровня.ТабличныйДокумент = Сч.Идентификатор;
		КонецЕсли;
		НовСтр = Стр1Уровня.Строки.Добавить();
		НовСтр.Пом = 1;
		НовСтр.Наименование = Сч.Наименование;
		НовСтр.ТабличныйДокумент = Сч.ТабличныйДокумент;
		ЭлементыФормы.СписокЛистов.Развернуть(Стр1Уровня);
	КонецЦикла;
	ЭлементыФормы.СписокЛистов.ТекущаяСтрока = СписокЛистов.Строки[0].Строки[0];
	
	СформироватьТекстПодскзаки();
	ОтработатьИзмененияПараметровПечати();
	УстановитьОпцииТаблицы();
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
// В процедуре сохраняются параметры печати и параметры отображения поля табличного документа ИтоговаяТаблица
// для восстановления при следующем открытии формы.
//
Процедура ПриЗакрытии()
	
	// сохраняем параметры отображения таблицы и параметры печати
	СохранитьЗначение("ПредпросмотрРегламентированнойОтчетностиКоличествоКопий", КоличествоКопий);
	СохранитьЗначение("ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям", РазобратьПоКопиям);
	СохранитьЗначение("ПредпросмотрРегламентированнойОтчетностиОтображатьСетку", ОтображатьСетку);
	СохранитьЗначение("ПредпросмотрРегламентированнойОтчетностиОтображатьЗаголовки", ОтображатьЗаголовки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыВВидеТабличныхДокументов(Кнопка)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.MXL);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВФорматеMicrosoftExcel(Кнопка)
	
	ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.XLS);
	
КонецПроцедуры

// Процедура - действие кнопки "АктивизироватьРодительскийОтчет" командной панели ОсновныеДействияФормы.
// Активизируется форма, из которого была вызвана печать. 
// Если форма уже закрыта, то выдается соответствующее сообщение.
//
Процедура ОсновныеДействияФормыАктивизироватьРодительскийОтчет(Кнопка)
	
	Попытка
		ВладелецФормы.Активизировать();
	Исключение
		Предупреждение("Не удалось активизировать родительский отчет! Вероятно, форма отчета закрыта.");
	КонецПопытки;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" командной панели ОсновныеДействияФормы.
// Выводит на принтер выбранные табличные документы в соответствии с выбранными
// параметрами печати.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	ЗафиксироватьИзмененияТабличногоДокумента();
	Если РазобратьПоКопиям Тогда
		Для Сч = 1 По КоличествоКопий Цикл
			Для Каждого Стр1 Из СписокЛистов.Строки Цикл
				Для Каждого Эл из Стр1.Строки Цикл
					Если НЕ Эл.Пом Тогда
						Продолжить;
					КонецЕсли;
					Эл.ТабличныйДокумент.КоличествоЭкземпляров = 1;
					Эл.ТабличныйДокумент.ЭкземпляровНаСтранице = 1;
					Эл.ТабличныйДокумент.Напечатать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из СписокЛистов.Строки Цикл
			Для Каждого Эл из Стр1.Строки Цикл
				Если НЕ Эл.Пом Тогда
					Продолжить;
				КонецЕсли;
				Для Сч = 1 По КоличествоКопий Цикл
					Эл.ТабличныйДокумент.КоличествоЭкземпляров = 1;
					Эл.ТабличныйДокумент.ЭкземпляровНаСтранице = 1;
					Эл.ТабличныйДокумент.Напечатать();
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "Нажатие" кнопки КнопкаРаспометитьВсе.
// Снимает пометки с элементов списка печатаемых листов.
//
Процедура КнопкаРаспометитьВсеНажатие(Элемент)
	
	Для Каждого Эл Из СписокЛистов.Строки Цикл
		Эл.Пом = Ложь;
		Для Каждого Стр Из Эл.Строки Цикл
			Стр.Пом = Ложь;
		КонецЦикла;
	КонецЦикла;
	СформироватьТекстПодскзаки();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки КнопкаПометитьВсе.
// Устанавливает пометки у элементов списка печатаемых листов.
//
Процедура КнопкаПометитьВсеНажатие(Элемент)
	
	Для Каждого Эл Из СписокЛистов.Строки Цикл
		Эл.Пом = 1;
		Для Каждого Стр Из Эл.Строки Цикл
			Стр.Пом = 1;
		КонецЦикла;
	КонецЦикла;
	СформироватьТекстПодскзаки();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки КнопкаПереместитьВниз.
// Текущая строка таблицы значений СписокЛистов перемещается вниз на одну позицию.
//
Процедура КнопкаПереместитьВнизНажатие(Элемент)
	
	Родитель = ?(ЭлементыФормы.СписокЛистов.ТекущиеДанные.Родитель = Неопределено, СписокЛистов, ЭлементыФормы.СписокЛистов.ТекущиеДанные.Родитель);
	Если Родитель.Строки.Индекс(ЭлементыФормы.СписокЛистов.ТекущиеДанные) <> Родитель.Строки.Количество() - 1 Тогда
		Родитель.Строки.Сдвинуть(ЭлементыФормы.СписокЛистов.ТекущиеДанные, 1);
	КонецЕсли;
	ОсвежитьВыбранныйЛист();
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки КнопкаПереместитьВверх.
// Текущая строка таблицы значений СписокЛистов перемещается вверх на одну позицию.
//
Процедура КнопкаПереместитьВверхНажатие(Элемент)
	
	Родитель = ?(ЭлементыФормы.СписокЛистов.ТекущиеДанные.Родитель = Неопределено, СписокЛистов, ЭлементыФормы.СписокЛистов.ТекущиеДанные.Родитель);
	Если Родитель.Строки.Индекс(ЭлементыФормы.СписокЛистов.ТекущиеДанные) <> 0 Тогда
		Родитель.Строки.Сдвинуть(ЭлементыФормы.СписокЛистов.ТекущиеДанные, -1);
	КонецЕсли;
	ОсвежитьВыбранныйЛист();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажков ОтображатьЗаголовки и ОтображатьСетку.
// Процедура изменяет опции отображения поля табличного документа ИтоговаяТаблица.
//
Процедура ПриИзмененииОпцийТаблицы(Элемент)
	
	УстановитьОпцииТаблицы();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииФлажка" табличного поля СписокЛистов.
//
Процедура СписокЛистовПриИзмененииФлажка(Элемент, Колонка)
	
	Если ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Пом = 2 Тогда
		ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Пом = 0;
	КонецЕсли;
	
	Если ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Уровень() = 0 Тогда
		Для Каждого Стр Из ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Строки Цикл
			Стр.Пом = ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Пом;
		КонецЦикла;
	Иначе
		ПометкиОдинаковы = Истина;
		Для Каждого Стр Из ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Родитель.Строки Цикл
			Если Стр.Пом <> ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Родитель.Строки[0].Пом Тогда
				ПометкиОдинаковы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Родитель.Пом = ?(ПометкиОдинаковы, ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Пом, 2);
	КонецЕсли;
	
	СформироватьТекстПодскзаки();

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля СписокЛистов.
// Выводит в поле табличного документа ИтоговаяТаблица табличный документ, соответствующей текущей
// выбранной строке списка "Печатаемые листы".
//
Процедура СписокЛистовПриАктивизацииСтроки(Элемент)
	
	ОсвежитьВыбранныйЛист();
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" табличного поля СписокЛистов.
// Запрещается интерактивное удаление строк из таблицы "Печатаемые листы".
//
Процедура СписокЛистовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля СписокЛистов.
// Запрещается интерактивное добавление строк в таблицу "Печатаемые листы".
//
Процедура СписокЛистовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	Для Каждого Сч Из СписокПечатаемыхЛистов Цикл
		Стр1Уровня = СписокЛистов.Строки.Найти(Сч.Идентификатор, "ТабличныйДокумент");
		Если СписокЛистов.Строки.Найти(Сч.Идентификатор, "ТабличныйДокумент") = Неопределено Тогда
			Стр1Уровня = СписокЛистов.Строки.Добавить();
			Стр1Уровня.Пом = 1;
			Стр1Уровня.Наименование = Сч.Идентификатор.Заголовок;
			Стр1Уровня.ТабличныйДокумент = Сч.Идентификатор;
		КонецЕсли;
		НовСтр = Стр1Уровня.Строки.Добавить();
		НовСтр.Пом = 1;
		НовСтр.Наименование = Сч.Наименование;
		НовСтр.ТабличныйДокумент = Сч.ТабличныйДокумент;
	КонецЦикла;
	ЭлементыФормы.СписокЛистов.Развернуть(Стр1Уровня);
	СформироватьТекстПодскзаки();
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЛистовРаскрыть(Кнопка)
	
	Для Каждого Стр Из СписокЛистов.Строки Цикл
		ЭлементыФормы.СписокЛистов.Развернуть(Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСписокЛистовСвернуть(Кнопка)
	
	Для Каждого Стр Из СписокЛистов.Строки Цикл
		ЭлементыФормы.СписокЛистов.Свернуть(Стр);
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаГруппыВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если ЭлементыФормы.СписокЛистов.ТекущаяСтрока <> Неопределено И ЭлементыФормы.СписокЛистов.ТекущаяСтрока.Уровень() = 0 Тогда
		ИмяБезИндекса = Лев(Область.Имя, 4);
		Если ИмяБезИндекса = "Лист" ИЛИ ИмяБезИндекса = "ЛНПН" ИЛИ ИмяБезИндекса = "ПНПВ" Тогда
			ЭлементыФормы.СписокЛистов.ТекущаяСтрока = ЭлементыФормы.СписокЛистов.ТекущиеДанные.Строки.Получить(Число(Сред(Область.Имя, 5)));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// инициализируем переменную, хранящую готовые к печати табличные документы и их имена
СписокПечатаемыхЛистов = Новый ТаблицаЗначений;
СписокПечатаемыхЛистов.Колонки.Добавить("Наименование");
СписокПечатаемыхЛистов.Колонки.Добавить("ТабличныйДокумент");
СписокПечатаемыхЛистов.Колонки.Добавить("Идентификатор");

ЭлементыФормы.ИтоговаяТаблица.АвтоМасштаб = Истина;
ЭлементыФормы.ИтоговаяТаблица.ЧерноБелаяПечать = Истина;

ЧерныйКвадрат = ЭлементыФормы.ИтоговаяТаблица.Рисунки.D1.Картинка;
