Перем мДокументОтбор;
Перем мЦветПервогоУровняДерева;
Перем мЦветВторогоУровняДерева;
Перем мИерархическийПросмотр;
Перем мОтображатьПустые Экспорт;
Перем мОтбиратьПоДокументуОтбора Экспорт;
Перем мПроверятьСоотношенияПриПечатиИВыгрузки Экспорт;
Перем мФильтроватьВидыОтчетовПоПериоду Экспорт;
Перем мПолноеДеревоОтчетов Экспорт;
Перем МассивНаименованийПравыхГраницПериода;
Перем ВыбранныеОтчеты;
Перем ПараметрыОткрытия Экспорт;
Перем мСписокВыбранныхВидовОтчетов Экспорт;

Перем мНеОтображатьНапоминания Экспорт;
Перем мЗапоминатьВыбранныйПериод Экспорт;
Перем мВыбраннаяФормаКалендаря Экспорт;
Перем мПериодичностьКалендарь Экспорт;
Перем мДатаКонцаПериодаОтчетаКалендарь Экспорт;

Перем НомерКартинкиПоСтатусу;
Перем КнопкиОтбораПоСтатусам Экспорт;
Перем СоответствиеКнопокСтатусам Экспорт;
Перем СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора Экспорт;
Перем СоответствиеИмениКнопкиПодменюОтправкаКодуДействия;

Перем ИсточникиОтчетовПФР;
Перем ИсточникиОтчетовФСС;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьАктуальнуюТаблицуПериодов(Периоды)
	
	Если ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
		СтруктураПериодов = Периоды.Получить();
	Иначе
		СтруктураПериодов = Периоды;
	КонецЕсли;
		
	Если ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		ТаблицаПериодов = Неопределено;
		НачалоДействияТаблицыПериодов = '00010101000000';
		Для Каждого Период Из СтруктураПериодов Цикл
			Если Период.Ключ > ДатаКонцаПериодаОтчета ИЛИ Период.Ключ < НачалоДействияТаблицыПериодов Тогда
				Продолжить;
			Иначе
				ТаблицаПериодов = Период.Значение;
				НачалоДействияТаблицыПериодов = Период.Ключ;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТаблицаПериодов = СтруктураПериодов;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции

// Формирует отфильтрованное дерево отчетов, то есть дерево в которое попадут только те виды отчетов,
// которые могут представляться за период, соответствующий выбранному пользователем.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
Процедура СформироватьОтфильтрованноеДеревоОтчетов(Узел = Неопределено)
	
	УзелБылУдален = Ложь;
	Если Узел = Неопределено Тогда
		ДеревоОтчетов = мПолноеДеревоОтчетов.Скопировать();
		Узел = ДеревоОтчетов;
	ИначеЕсли Узел.Строки.Количество() = 0 Тогда
		Периоды = Узел.Периоды;
		Если ОтборПериод И мФильтроватьВидыОтчетовПоПериоду И Периодичность <> "Произвольный" И ТипЗнч(Периоды) = Тип("ХранилищеЗначения") Тогда
			ТаблицаПериодов = ПолучитьАктуальнуюТаблицуПериодов(Периоды);
			Если ТаблицаПериодов <> Неопределено Тогда
				МесяцКон = Месяц(ДатаКонцаПериодаОтчета);
				Если ТаблицаПериодов.НайтиСтроки(Новый Структура("МесяцКон", МесяцКон)).Количество() = 0 Тогда
					СледуетУдалитьУзел = Истина;
				Иначе
					СледуетУдалитьУзел = Ложь;
				КонецЕсли;
			Иначе
				СледуетУдалитьУзел = Ложь;
			КонецЕсли;
			Если СледуетУдалитьУзел Тогда
				Если Узел.Родитель = Неопределено Тогда
					ДеревоОтчетов.Строки.Удалить(Узел);
				Иначе
					Узел.Родитель.Строки.Удалить(Узел);
				КонецЕсли;
				УзелБылУдален = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ УзелБылУдален Тогда
		Кол = Узел.Строки.Количество();
		Для Сч = 1 По Кол Цикл
			ТекИнд = Кол - Сч;
			Стр = Узел.Строки.Получить(ТекИнд);
			СформироватьОтфильтрованноеДеревоОтчетов(Стр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Удаляет пустые группы отчетов в дереве видов отчетов.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
Процедура УдалитьПустыеГруппыВОтфильтрованномДереве(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = ДеревоОтчетов.Строки;
	КонецЕсли;
	
	КолСтрок = Узел.Количество();
	Для Сч = 1 По КолСтрок Цикл
		ТекИнд = КолСтрок - Сч;
		Стр = Узел.Получить(ТекИнд);
		УдалитьПустыеГруппыВОтфильтрованномДереве(Стр.Строки);
		Если Стр.ЭтоГруппа = Истина И Стр.Строки.Количество() = 0 Тогда
			Узел.Удалить(Стр);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дерево отчетов.
//
// Параметры:
//	Нет.
//
Процедура ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ = Истина)
	
	Если ОбновлятьИзИБ Тогда
		СписокНеотображаемыхВидовОтчетов = Новый СписокЗначений;
		СписокНеотображаемыхВидовОтчетов.Добавить("СведенияОДоходахФизлиц");
		СписокНеотображаемыхВидовОтчетов.Добавить("СправкаПоНДФЛВНалоговыйОрган");
		СписокНеотображаемыхВидовОтчетов.Добавить("СправкаПоНДФЛСотруднику");
		СписокНеотображаемыхВидовОтчетов.Добавить("РегламентированнаяФормаКарточкаПоЕСН");
		СписокНеотображаемыхВидовОтчетов.Добавить("РегламентированнаяФормаКарточкаПоОПС");
		СписокНеотображаемыхВидовОтчетов.Добавить("ПередачаСЗВ4вПФР");
		СписокНеотображаемыхВидовОтчетов.Добавить("СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК");
		СписокНеотображаемыхВидовОтчетов.Добавить("ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства");
		СписокНеотображаемыхВидовОтчетов.Добавить("АнкетаЗастрахованногоЛица");
		СписокНеотображаемыхВидовОтчетов.Добавить("ЗаявлениеДСВ1");
		СписокНеотображаемыхВидовОтчетов.Добавить("ПередачаДСВвПФР");
		СписокНеотображаемыхВидовОтчетов.Добавить("СведенияОВзносахИСтраховомСтажеСПВ1");
		СписокНеотображаемыхВидовОтчетов.Добавить("РеестрДСВ3");
		
		Если мИерархическийПросмотр Тогда
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
			                      |	РегламентированныеОтчеты.Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание,
			                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК Внешний,
								  |	РегламентированныеОтчеты.Периоды КАК Периоды
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	(РегламентированныеОтчеты.НеПоказыватьВСписке = ЛОЖЬ ИЛИ РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА)
								  | И ((РегламентированныеОтчеты.ЭтоГруппа = ИСТИНА) ИЛИ НЕ (РегламентированныеОтчеты.ИсточникОтчета В (&СписокНеотображаемыхВидовОтчетов)))
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Код ИЕРАРХИЯ");
			Запрос.УстановитьПараметр("СписокНеотображаемыхВидовОтчетов", СписокНеотображаемыхВидовОтчетов);
			мПолноеДеревоОтчетов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Иначе
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
								  |	0 КАК Пометка,
			                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
			                      |	РегламентированныеОтчеты.Наименование,
			                      |	РегламентированныеОтчеты.ПометкаУдаления,
			                      |	РегламентированныеОтчеты.ЭтоГруппа,
			                      |	РегламентированныеОтчеты.ИсточникОтчета,
			                      |	РегламентированныеОтчеты.Описание,
			                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать КАК Внешний,
								  |	РегламентированныеОтчеты.Периоды КАК Периоды
			                      |ИЗ
			                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
			                      |ГДЕ
			                      |	РегламентированныеОтчеты.НеПоказыватьВСписке = ЛОЖЬ И РегламентированныеОтчеты.ЭтоГруппа = ЛОЖЬ
								  | И НЕ (РегламентированныеОтчеты.ИсточникОтчета В (&СписокНеотображаемыхВидовОтчетов))
			                      |
			                      |УПОРЯДОЧИТЬ ПО
			                      |	РегламентированныеОтчеты.Наименование ");
			Запрос.УстановитьПараметр("СписокНеотображаемыхВидовОтчетов", СписокНеотображаемыхВидовОтчетов);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
			мПолноеДеревоОтчетов.Строки.Очистить();
			Для Каждого Стр Из РезультатЗапроса Цикл
				НовСтр = мПолноеДеревоОтчетов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, Стр);
			КонецЦикла;
		КонецЕсли;
		ИзменитьФорматХраненияПериодовВДеревеОтчетов();
	КонецЕсли;
	СформироватьОтфильтрованноеДеревоОтчетов();
	УдалитьПустыеГруппыВОтфильтрованномДереве();
	ЭлементыФормы.ДеревоОтчетов.Колонки.Наименование.ОтображатьИерархию = мИерархическийПросмотр;
	
КонецПроцедуры

Функция СформироватьТаблицуПериодов(СтруктураПериодов)
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("МесяцНач");
	ТаблицаПериодов.Колонки.Добавить("МесяцКон");
	Если ТипЗнч(СтруктураПериодов) = Тип("Структура") ИЛИ ТипЗнч(СтруктураПериодов) = Тип("Соответствие") Тогда
		Для Каждого Эл Из СтруктураПериодов Цикл
			Ключ = Эл.Ключ;
			Значение = Эл.Значение;
			Если Ключ = "Месяц" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = Пер;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "МесяцНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = Пер;
				КонецЦикла;
			ИначеЕсли Ключ = "Квартал" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 3*(Пер - 1) + 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "КварталНарастающимИтогом" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 3*(Пер - 1) + 3;
				КонецЦикла;
			ИначеЕсли Ключ = "Полугодие" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 6*(Пер - 1) + 6;
				КонецЦикла;
			ИначеЕсли Ключ = "Год" Тогда
				Для Каждого Пер Из Значение Цикл
					НовСтр = ТаблицаПериодов.Добавить();
					НовСтр.МесяцНач = 1;
					НовСтр.МесяцКон = 12;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат ТаблицаПериодов;
	
КонецФункции

// Конвертирует информацию, содержащуюся в колонке Периоды дерева видов отчетов, из структуры в
// таблицу значений, для обеспечения возможности быстрого поиска видов отчетов, которые можно
// представлять за выбранный пользователем период.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева. Используется только при рекурсивных вызовах.
//
Процедура ИзменитьФорматХраненияПериодовВДеревеОтчетов(Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		Узел = мПолноеДеревоОтчетов;
	Иначе
		Если ТипЗнч(Узел.Периоды) = Тип("ХранилищеЗначения") Тогда
			Периоды = Узел.Периоды.Получить();
			Если ТипЗнч(Периоды) = Тип("Соответствие") Тогда
				СтрПериоды = Новый Соответствие;
				Для Каждого ЗаписьПериода Из Периоды Цикл
					ЗаписьПериодаКлюч = ЗаписьПериода.Ключ;
					ЗаписьПериодаЗначение = ЗаписьПериода.Значение;
					СтрПериоды.Вставить(ЗаписьПериодаКлюч, СформироватьТаблицуПериодов(ЗаписьПериодаЗначение));
				КонецЦикла;
			ИначеЕсли ТипЗнч(Периоды) = Тип("Структура") Тогда
				СтрПериоды = Новый Соответствие;
				СтрПериоды.Вставить('00010101000000', СформироватьТаблицуПериодов(Периоды));
			КонецЕсли;
			Узел.Периоды = Новый ХранилищеЗначения(СтрПериоды);
		КонецЕсли;
	КонецЕсли;
		
	Для Каждого Стр Из Узел.Строки Цикл
		ИзменитьФорматХраненияПериодовВДеревеОтчетов(Стр);	
	КонецЦикла;
	
КонецПроцедуры

// Восстанавливает сохраненные значения ссылок на отчеты, помеченные в дереве отчетов.
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьСписокВыбранныхВидовОтчетов()
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, мСписокВыбранныхВидовОтчетов, Истина);
	
КонецПроцедуры

// Присваивает переменной ДокументОтборСтрока значение пользовательского представления документа
// РегламентированныйОтчет, по которому осуществляется отбор в журнале выгрузки.
// Представление ДокументОтборСтрока отображается в поле ввода ДокументОтборСтрока на форме.
//
// Параметры:
//	Нет.
//
Процедура УстановитьПредставлениеДокументаОтбора()
	
	Если НЕ ЗначениеЗаполнено(мДокументОтбор) Тогда
		ДокументОтборСтрока = "";
	Иначе
		ДокументОтборСтрока = РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(мДокументОтбор);
	КонецЕсли;
	
КонецПроцедуры

// Регулирует доступности элементов управления, связанных со значением документа отбора.
//
// Параметры:
//	Нет.
//
Процедура УстановитьПометкуКнопкиОтбиратьПоОтчету()
	
	ОтборПоОтчету = мОтбиратьПоДокументуОтбора;
	ЭлементыФормы.ДокументОтборСтрока.Доступность = мОтбиратьПоДокументуОтбора;
	ЭлементыФормы.КнопкаОчиститьДокументОтбор.Доступность = мОтбиратьПоДокументуОтбора;
	ЭлементыФормы.КнопкаОткрытьДокументОтбор.Доступность = ЗначениеЗаполнено(мДокументОтбор);
	ЭлементыФормы.ФлажокОтборПоОтчету.Доступность = ЗначениеЗаполнено(мДокументОтбор);
	
КонецПроцедуры

Функция ПрименитьПараметрыОткрытия()
	
	Если ТипЗнч(ПараметрыОткрытия) = Тип("Структура") Тогда
		
		Если ПараметрыОткрытия.Свойство("Организация") Тогда
			ОрганизацияОткрытия = ПараметрыОткрытия.Организация;
		КонецЕсли;
		
		Если ПараметрыОткрытия.Свойство("КодИФНС") Тогда
			ИФНСОткрытия = ПараметрыОткрытия.КодИФНС;
		КонецЕсли;
		
		Если ПараметрыОткрытия.Свойство("ДатаОкончанияПериода") Тогда
			ДатаОкончанияПериодаОткрытия = КонецМесяца(ПараметрыОткрытия.ДатаОкончанияПериода);
		КонецЕсли;
		
		Если ПараметрыОткрытия.Свойство("Периодичность") Тогда
			ПериодичностьОткрытия = ПараметрыОткрытия.Периодичность;
		КонецЕсли;
		
		парамВидыОтчетовДляОтбора = ПараметрыОткрытия.ВидыОтчетов;
		Если ТипЗнч(парамВидыОтчетовДляОтбора) = Тип("Массив") Тогда
			_ВидыОтчетовДляОтбора = парамВидыОтчетовДляОтбора;
		ИначеЕсли ТипЗнч(парамВидыОтчетовДляОтбора) = Тип("СписокЗначений") Тогда
			_ВидыОтчетовДляОтбора = парамВидыОтчетовДляОтбора.ВыгрузитьЗначения();
		Иначе
			_ВидыОтчетовДляОтбора = Новый Массив;
			_ВидыОтчетовДляОтбора.Добавить(парамВидыОтчетовДляОтбора);
		КонецЕсли;
		ВидыОтчетовОткрытияСтроки = Новый СписокЗначений;
		ВидыОтчетовОткрытияСсылки = Новый СписокЗначений;
		Для Каждого Эл Из _ВидыОтчетовДляОтбора Цикл
			Если ТипЗнч(Эл) = Тип("Строка") Тогда
				ВидОтчетаСпр = Справочники.РегламентированныеОтчеты.НайтиПоРеквизиту("ИсточникОтчета", Эл);
				Если ЗначениеЗаполнено(ВидОтчетаСпр) Тогда
					ВидыОтчетовОткрытияСсылки.Добавить(ВидОтчетаСпр);
				КонецЕсли;
				ВидыОтчетовОткрытияСтроки.Добавить(Эл);
			Иначе
				ВидыОтчетовОткрытияСтроки.Добавить(СокрЛП(ВидОтчетаСпр.ИсточникОтчета));
				ВидыОтчетовОткрытияСсылки.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		
		Если ПараметрыОткрытия.Свойство("Организация") И ПараметрыОткрытия.Свойство("ДатаОкончанияПериода") И ВидыОтчетовОткрытияСтроки.Количество() = 1 Тогда
		
			Запрос = Новый Запрос;
			Запрос.Текст = Запрос.Текст + 
								  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			                      |	РегламентированныйОтчет.Ссылка
			                      |ИЗ
			                      |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			                      |ГДЕ
			                      |	РегламентированныйОтчет.Организация = &Организация
			                      |	И РегламентированныйОтчет.ДатаОкончания = &ДатаОкончания
								  |	И РегламентированныйОтчет.ИсточникОтчета В (&ВидыОтчетов)";
			Запрос.УстановитьПараметр("ВидыОтчетов", ВидыОтчетовОткрытияСтроки);
			Запрос.УстановитьПараметр("Организация", ОрганизацияОткрытия);
			Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОкончанияПериодаОткрытия));
			Если ЗначениеЗаполнено(ИФНСОткрытия) Тогда
				Запрос.Текст = Запрос.Текст + "					  
			                      |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
				Запрос.УстановитьПараметр("КодИМНС", ИФНСОткрытия);
			КонецЕсли;
			Если ЗначениеЗаполнено(ПериодичностьОткрытия) Тогда
				Запрос.Текст = Запрос.Текст + "
			                      |	И РегламентированныйОтчет.Периодичность = &Периодичность";
				Запрос.УстановитьПараметр("Периодичность", ПериодичностьОткрытия);
			КонецЕсли;
			
			МассивОтчетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			Если МассивОтчетов.Количество() = 0 Тогда
				ОтклонениеВМесяцахПоПериодичности = Новый Соответствие;
				ОтклонениеВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Месяц, 0);
				ОтклонениеВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Квартал, 2);
				ОтклонениеВМесяцахПоПериодичности.Вставить(Перечисления.Периодичность.Год, 11);
				Если ПериодичностьОткрытия <> Неопределено Тогда
					ДатаНачалаПериодаОткрытияОтчета = НачалоМесяца(ДобавитьМесяц(ДатаОкончанияПериодаОткрытия, - ОтклонениеВМесяцахПоПериодичности[ПериодичностьОткрытия]));
					ДатаОкончанияПериодаОткрытияОтчета = КонецМесяца(ДатаОкончанияПериодаОткрытия);
				Иначе
					ДатаНачалаПериодаОткрытияОтчета = Неопределено;
					ДатаОкончанияПериодаОткрытияОтчета = Неопределено;
				КонецЕсли;
				ОткрытьФормуОтчета(ВидыОтчетовОткрытияСсылки[0].Значение,
									ОрганизацияОткрытия,
									ДатаНачалаПериодаОткрытияОтчета,
									ДатаОкончанияПериодаОткрытияОтчета,
									ПериодичностьОткрытия);
				Возврат Ложь;
			ИначеЕсли МассивОтчетов.Количество() = 1 Тогда
				ОткрытьЗначение(МассивОтчетов[0]);
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
							  
		
		Если ПараметрыОткрытия.Свойство("Организация") Тогда
			Организация.Очистить();
			Организация.Добавить(ОрганизацияОткрытия);
		КонецЕсли;
		Если ПараметрыОткрытия.Свойство("КодИФНС") Тогда
			ОтборКодИФНС = Истина;
			КодИФНС = ИФНСОткрытия;
		КонецЕсли;
		Если ПараметрыОткрытия.Свойство("ДатаОкончанияПериода") Тогда
			ОтборПериод = Истина;
			Периодичность = "По итогам";
			ДатаКонцаПериодаОтчета = КонецМесяца(ДатаОкончанияПериодаОткрытия);
			ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
		КонецЕсли;
		
		мДокументОтбор = Неопределено;
		УстановитьПредставлениеДокументаОтбора();
		мОтбиратьПоДокументуОтбора = Ложь;
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЖурналОтчетов;
		
		мСписокВыбранныхВидовОтчетов = Новый СписокЗначений;
		мСписокВыбранныхВидовОтчетов.ЗагрузитьЗначения(ВидыОтчетовОткрытияСсылки.ВыгрузитьЗначения());
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Восстанавливает значения отбора, сохраненные в момент последнего закрытия формы.
//
// Параметры:
//	Нет.
//
Процедура ВосстановитьПараметрыОтбора()
	
	Если ТипЗнч(ПараметрыОткрытия) <> Тип("Структура") Тогда
		
		Организация = ВосстановитьЗначение("ФормаРеглИФинОтчетности_Организация");
		КодИФНС = ВосстановитьЗначение("ФормаРеглИФинОтчетности_КодИФНС");
		ОтборКодИФНС = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ОтборКодИФНС");
		ОтборПериод = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ОтборПериод");
		Периодичность = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ПолеВыбораПериодичность");
		Если Периодичность = Неопределено Тогда
			Периодичность = "По итогам";
		КонецЕсли;
		ДатаНачалаПериодаОтчета = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета");
		ДатаКонцаПериодаОтчета = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета");
		Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
			ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
		КонецЕсли;
		мДокументОтбор = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ДокументОтбор");
		УстановитьПредставлениеДокументаОтбора();
		мОтбиратьПоДокументуОтбора = ВосстановитьЗначение("ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора");
		Если мОтбиратьПоДокументуОтбора = Неопределено Тогда
			мОтбиратьПоДокументуОтбора = Ложь;
		КонецЕсли;
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		
		ТекСтраница = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
		Если ТекСтраница <> Неопределено И ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ТекСтраница) <> Неопределено Тогда
			ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекСтраница];
		КонецЕсли;
		мСписокВыбранныхВидовОтчетов = ВосстановитьЗначение("ФормаРеглИФинОтчетности_СписокВидовОтчетов");
		
	КонецЕсли;
	
	сохрВыбранныеОтчеты = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ВыбранныеОтчеты");
	Если сохрВыбранныеОтчеты <> Неопределено Тогда
		ВыбранныеОтчеты.ЗагрузитьЗначения(сохрВыбранныеОтчеты);
	КонецЕсли;
		
	мИерархическийПросмотр = ВосстановитьЗначение("ФормаРеглИФинОтчетности_мИерархическийПросмотр");
	Если мИерархическийПросмотр = Неопределено Тогда
		мИерархическийПросмотр = Истина;
	КонецЕсли;
	Элементыформы.КоманднаяПанельДеревоОтчетов.Кнопки.ИерархическийПросмотр.Пометка = мИерархическийПросмотр;
	
	ТекСтраница = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели");
	Если ТекСтраница <> Неопределено И ЭлементыФормы.ОсновнаяПанель.Страницы.Найти(ТекСтраница) <> Неопределено Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы[ТекСтраница];
	КонецЕсли;
	
	мОтображатьПустые = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ПоказыватьПустые");
	Если мОтображатьПустые = Неопределено Тогда
		мОтображатьПустые = Ложь;
	КонецЕсли;
	
	мПроверятьСоотношенияПриПечатиИВыгрузки = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ПроверятьСоотношенияПриПечатиИВыгрузки");
	Если мПроверятьСоотношенияПриПечатиИВыгрузки = Неопределено Тогда
		мПроверятьСоотношенияПриПечатиИВыгрузки = Ложь;
	КонецЕсли;

	мФильтроватьВидыОтчетовПоПериоду = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду");
	Если мФильтроватьВидыОтчетовПоПериоду = Неопределено Тогда
		мФильтроватьВидыОтчетовПоПериоду = Истина;
	КонецЕсли;

	мНеОтображатьНапоминания = ВосстановитьЗначение("ФормаРеглИФинОтчетности_НеОтображатьНапоминания");
	Если мНеОтображатьНапоминания = Неопределено Тогда
		мНеОтображатьНапоминания = Ложь;
	КонецЕсли;

	мЗапоминатьВыбранныйПериод = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ЗапоминатьВыбранныйПериод");
	Если мЗапоминатьВыбранныйПериод = Неопределено Тогда
		мЗапоминатьВыбранныйПериод = Ложь;
	КонецЕсли;

	ГрупповойРежим = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ГрупповойРежим");
	Элементыформы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка = ?(ГрупповойРежим = Неопределено, Ложь, ГрупповойРежим);
	
	сохрОтображатьСписокЦикловОбмена = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ОтображатьСписокЦикловОбмена");
	Если сохрОтображатьСписокЦикловОбмена <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ОтображатьСписокЦикловОбмена.Пометка = сохрОтображатьСписокЦикловОбмена;
	КонецЕсли;
	
	ЗначениеОтбораПоСтатусу = ВосстановитьЗначение("ФормаРеглИФинОтчетности_ЗначениеОтбораПоСтатусу");
	Если ЗначениеОтбораПоСтатусу = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы.Пометка = Истина;
	Иначе
		КнопкаОтбора = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Найти(ЗначениеОтбораПоСтатусу);
		Если КнопкаОтбора = Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы.Пометка = Истина;
		Иначе
			КнопкаОтбора.Пометка = Истина;
		КонецЕсли;
	КонецЕсли;
	УстановитьКартинкуПодменюОтбораПоСтатусамОтчетов();
	
КонецПроцедуры

// Изменяет свойства элементов формы в зависимости от настроек отбора по периоду.
//
// Параметры:
//	Нет.
//
Процедура УправлениеЭлементамиОтбораПоПериоду()
	
	ЭлементыФормы.ПанельПериодОсновная.Доступность = ОтборПериод;
	ЭлементыФормы.Периодичность.Доступность = ОтборПериод;
	ЭлементыФормы.Периодичность2.Доступность = ОтборПериод;
	
	Если Периодичность = "Произвольный" Тогда
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.ПроизвольныйПериод;
	Иначе
		ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ЭлементыФормы.ПанельПериод.Страницы.СтандартныйПериод;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет свойства элементов формы в зависимости от настроек отбора по коду ИФНС.
//
// Параметры:
//	Нет.
//
Процедура УправлениеЭлементамиОтбораПоКодуИФНС()
	
	ЭлементыФормы.КодИФНС.Доступность = ОтборКодИФНС;
	
КонецПроцедуры

// Открывает форму внутреннего или внешнего отчета, табличный или текстовый документ 
// по указанному в реквизите ИсточникОтчета элемента справочника имени внутреннего или 
// файла внешнего отчета, текстового или табличного документа.
//
// Параметры:
//  ИсточникОтчета - строка - имя файла, указанное в реквизите элемента.
//
Процедура ОткрытьФормуОтчета(Отчет, ОрганизацияОтчета = Неопределено, ДатаНачалаПериодаОтчета = Неопределено, ДатаОкончанияПериодаОтчета = Неопределено, ПериодичностьОтчета = Неопределено)
	
	Если ТипЗнч(Отчет) <> Тип("Строка") Тогда
		ИсточникОтчета = Отчет.ИсточникОтчета;
	КонецЕсли;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ИсточникОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		Предупреждение("Недостаточно прав!");
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Предупреждение("Отчет не найден!");
		Возврат;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ИсточникОтчета) И Метаданные.Документы.Найти(ИсточникОтчета) <> Неопределено Тогда // это внутренний отчет-документ
			
		ВнутреннийОтчет = Документы[ИсточникОтчета];
		ВыбФормаОтчета  = ВнутреннийОтчет.ПолучитьФорму(Метаданные.Документы[ИсточникОтчета].ОсновнаяФормаОбъекта.Имя);
		ВыбФормаОтчета.РежимВыбора = Ложь;
		ВыбФормаОтчета.Открыть();
		Возврат;
			
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ИсточникОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ИсточникОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ОрганизацияОтчета = Неопределено Тогда
		Если Организация.Количество() = 1 Тогда
			Попытка
				ТекФорма.Организация = Организация.Получить(0).Значение;
			Исключение
			КонецПопытки;
		КонецЕсли;
	Иначе
		Попытка
			ТекФорма.Организация = ОрганизацияОтчета;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ДатаНачалаПериодаОтчета <> Неопределено ИЛИ ДатаОкончанияПериодаОтчета <> Неопределено Тогда
		
		Попытка
			ТекФорма.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаПериодаОтчета);
			ТекФорма.мДатаКонцаПериодаОтчета = КонецДня(ДатаОкончанияПериодаОтчета);
		Исключение
		КонецПопытки;
		Если ПериодичностьОтчета <> Неопределено Тогда
			Попытка
				ТекФорма.мПериодичность = ПериодичностьОтчета;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
	ИначеЕсли ОтборПериод И Периодичность = "По итогам" Тогда
		
		Периоды = Отчет.Ссылка.Периоды.Получить();
		МесяцКонцаПериодаОтчета = Месяц(ДатаКонцаПериодаОтчета);
		КоличествоВозможныхПериодичностей = 0;
		
		Если Периоды <> Неопределено Тогда
			ТаблицаПериодов = ПолучитьАктуальнуюТаблицуПериодов(Периоды);
			Если ТаблицаПериодов <> Неопределено Тогда
				Для Каждого Стр Из ТаблицаПериодов Цикл
					Для Каждого Эл Из Стр.Значение Цикл
						Если Лев(Стр.Ключ, 7) = "Квартал" Тогда
							МесяцКонцаПериода = 3*Эл;
						ИначеЕсли Стр.Ключ = "Полугодие" Тогда
							МесяцКонцаПериода = 6*Эл;
						ИначеЕсли Стр.Ключ = "Год" Тогда
							МесяцКонцаПериода = 12;
						Иначе
							МесяцКонцаПериода = Эл;
						КонецЕсли;
						Если МесяцКонцаПериодаОтчета = МесяцКонцаПериода Тогда
							КоличествоВозможныхПериодичностей = КоличествоВозможныхПериодичностей + 1;
							КлючПериодичности = Стр.Ключ;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей = 0 Тогда
			
		ИначеЕсли КоличествоВозможныхПериодичностей = 1 Тогда
			
			Если КлючПериодичности = "Месяц" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
			ИначеЕсли КлючПериодичности = "Квартал" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			ИначеЕсли КлючПериодичности = "Полугодие" Тогда
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
			Иначе
				ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
				ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
				ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
			КонецЕсли;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			               |	РегламентированныйОтчет.Периодичность
			               |ИЗ
			               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
			               |ГДЕ
			               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
			Если Организация.Количество() > 0 Тогда
				Запрос.Текст = Запрос.Текст + "
				               |	И РегламентированныйОтчет.Организация В (&Организация)";
			КонецЕсли;
			Запрос.Текст = Запрос.Текст + "
						   |УПОРЯДОЧИТЬ ПО
						   |	РегламентированныйОтчет.МоментВремени УБЫВ";
			Запрос.УстановитьПараметр("ИсточникОтчета", Отчет.ИсточникОтчета);
			Запрос.УстановитьПараметр("Организация", Организация);
			ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
			Если ТаблицаРезультат.Количество() = 0 Тогда
				
				Если КлючПериодичности = "Месяц" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
				ИначеЕсли КлючПериодичности = "Квартал" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				ИначеЕсли КлючПериодичности = "Полугодие" Тогда
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
				Иначе
					ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
					ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
				КонецЕсли;
				
			Иначе
				
				ПериодичностьДляПодстановки = ТаблицаРезультат.Получить(0).Получить(0);
				Если ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц Тогда
					ДатаКонцаДляПодстановки = КонецМесяца(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал Тогда
					ДатаКонцаДляПодстановки = КонецКвартала(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаДляПодстановки);
				ИначеЕсли ПериодичностьДляПодстановки = Перечисления.Периодичность.Год Тогда
					ДатаКонцаДляПодстановки = КонецГода(ДатаКонцаПериодаОтчета);
					ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаДляПодстановки);
				Иначе
					Если КлючПериодичности = "Месяц" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоМесяца(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "МесяцНарастающимИтогом" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Месяц;
					ИначеЕсли КлючПериодичности = "Квартал" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоКвартала(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "КварталНарастающимИтогом" Тогда	
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					ИначеЕсли КлючПериодичности = "Полугодие" Тогда
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Квартал;
					Иначе
						ДатаКонцаДляПодстановки = ДатаКонцаПериодаОтчета;
						ДатаНачалаДляПодстановки = НачалоГода(ДатаКонцаПериодаОтчета);
						ПериодичностьДляПодстановки = Перечисления.Периодичность.Год;
					КонецЕсли;
				КонецЕсли;
					
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если КоличествоВозможныхПериодичностей <> 0 Тогда
			Попытка
				ТекФорма.мДатаНачалаПериодаОтчета = НачалоДня(ДатаНачалаДляПодстановки);
				ТекФорма.мДатаКонцаПериодаОтчета = КонецДня(ДатаКонцаДляПодстановки);
			Исключение
			КонецПопытки;
			Если Периодичность <> "Произвольный" Тогда
				Попытка
					ТекФорма.мПериодичность = ПериодичностьДляПодстановки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекФорма.РежимВыбора = Ложь;
	ТекФорма.Открыть();
	
КонецПроцедуры

// Возвращает список полей ИсточникОтчета элементов справочника РегламентированныеОтчеты, 
// соответствующих отмеченным строкам в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// Параметры:
//	УзелДерева - текущая СтрокаДереваЗначений. При вызове извне функции значение должно быть не заполнено.
//	СписокВидов - служебная переменная, используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	СписокЗначений - список полей ИсточникОтчета для элементов, соответствующих отмеченным строкам
//						табличного поля ДеревоОтчетов.
//
Функция СписокВыбранныхВидовОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено) Экспорт
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.ИсточникОтчета) = Неопределено И УзелДерева.Пометка = 1 И НЕ УзелДерева.ЭтоГруппа Тогда
		СписокВидов.Добавить(УзелДерева.ИсточникОтчета);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.Строки Цикл
		СписокВыбранныхВидовОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает список ссылок ДокументСсылка.ВыгрузкаРегламентированныхОтчетов, соответствующих
// отмеченным в табличном поле ДеревоОтчетов отчетам. Список необходим для последующей установки
// отбора для элемента формы ЖурналВыгрузки.
//
// Параметры:
//	СписокВидовОтчетов - СписокЗначений, содержащий строковые идентификаторы видов регламентированных отчетов,
//							по которым следует отбирать документы ВыгрузкаРегламентированныхОтчетов.
//
// Возвращаемое значение:
//	СписокЗначений - список ссылок на документы ДокументСсылка.ВыгрузкаРегламентированныхОтчетов.
//
Функция СформироватьСписокВыгрузок(СписокВидовОтчетов)
	
	Если ТипЗнч(СписокВидовОтчетов) = Тип("СписокЗначений") Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Ссылка
								|ИЗ
								|	Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК ВыгрузкаРегламентированныхОтчетовОсновная
								|ГДЕ
								|	ВыгрузкаРегламентированныхОтчетовОсновная.Основание В
								|			(ВЫБРАТЬ
								|				РегламентированныйОтчет.Ссылка
								|			ИЗ
								|				Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
								|			ГДЕ
								|				РегламентированныйОтчет.ИсточникОтчета В (&ИсточникОтчета))");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	Иначе
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
							  |	ВыгрузкаРегламентированныхОтчетов.Ссылка КАК Ссылка
							  |ИЗ
							  |	Документ.ВыгрузкаРегламентированныхОтчетов КАК ВыгрузкаРегламентированныхОтчетов
							  |ГДЕ
							  |	ВыгрузкаРегламентированныхОтчетов.Основная.Основание = &ИсточникОтчета");
							  
		Запрос.УстановитьПараметр("ИсточникОтчета", СписокВидовОтчетов);
		
	КонецЕсли;
	
	Если мОтображатьПустые = Истина Тогда
		Запрос.Текст = Запрос.Текст + "
										|
										|ОБЪЕДИНИТЬ
										|
										|ВЫБРАТЬ
										|	Док.Ссылка КАК Ссылка
										|ИЗ
										|	Документ.ВыгрузкаРегламентированныхОтчетов КАК Док
										|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыгрузкаРегламентированныхОтчетов.Основная КАК ТЧ
										|		ПО ТЧ.Ссылка = Док.Ссылка
										|ГДЕ
										|	ЕСТЬNULL(ТЧ.Ссылка, ИСТИНА) = ИСТИНА";
	КонецЕсли;
	
	Результат = Новый СписокЗначений;
	Результат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат Результат;
	
КонецФункции

// Устанавливает отборы в табличных полях ЖурналОтчетов и ЖурналВыгрузки в соответствии
// со значениями, установленными в элементах формы, предназначенных для регулирования параметров отбора.
//
// Параметры:
//	Нет.
//
Процедура УстановитьОтборы() Экспорт
	
	СписокВидовОтчетов = СписокВыбранныхВидовОтчетов();
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЖурналОтчетов Тогда
		
		ЖурналОтчетов.Отбор.ИсточникОтчета.Использование = Истина;
		ЖурналОтчетов.Отбор.ИсточникОтчета.ВидСравнения = ВидСравнения.ВСписке;
		ЖурналОтчетов.Отбор.ИсточникОтчета.Значение = СписокВидовОтчетов;
		
		Если Организация.Количество() = 0 Тогда
			ЖурналОтчетов.Отбор.Организация.Использование = Ложь;
		Иначе
			ЖурналОтчетов.Отбор.Организация.Использование = Истина;
			ЖурналОтчетов.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналОтчетов.Отбор.Организация.Значение = Организация;
		КонецЕсли;
		
		Если НЕ ОтборКодИФНС Тогда
			ЖурналОтчетов.Отбор.КодИМНС.Использование = Ложь;
		Иначе
			ЖурналОтчетов.Отбор.КодИМНС.Использование = Истина;
			ЖурналОтчетов.Отбор.КодИМНС.ВидСравнения = ВидСравнения.Равно;
			ЖурналОтчетов.Отбор.КодИМНС.Значение = КодИФНС;
		КонецЕсли;
		
		Если НЕ ОтборПериод Тогда
			ЖурналОтчетов.Отбор.ДатаНачала.Использование = Ложь;
			ЖурналОтчетов.Отбор.ДатаОкончания.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				ЖурналОтчетов.Отбор.ДатаНачала.Использование = Истина;
				ЖурналОтчетов.Отбор.ДатаОкончания.Использование = Истина;
				ЖурналОтчетов.Отбор.ДатаНачала.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				ЖурналОтчетов.Отбор.ДатаНачала.Значение = ДатаНачалаПериодаОтчета;
				ЖурналОтчетов.Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ЖурналОтчетов.Отбор.ДатаОкончания.Значение = ДатаКонцаПериодаОтчета;
			Иначе
				ЖурналОтчетов.Отбор.ДатаНачала.Использование = Ложь;
				ЖурналОтчетов.Отбор.ДатаОкончания.Использование = Истина;
				ЖурналОтчетов.Отбор.ДатаОкончания.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
				ЖурналОтчетов.Отбор.ДатаОкончания.ЗначениеС = НачалоДня(ДатаКонцаПериодаОтчета);
				ЖурналОтчетов.Отбор.ДатаОкончания.ЗначениеПо = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
		// установка отбора по статусам
		СтатусыОтчетов = Новый СписокЗначений;
		Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы.Пометка Тогда
			ЖурналОтчетов.Отбор.Ссылка.Использование = Ложь;
		Иначе
			
			СтатусОтбора = Неопределено;
			Для Каждого КнопкаОтбораПоСтатусам Из КнопкиОтбораПоСтатусам Цикл
				Если КнопкаОтбораПоСтатусам.Значение.Пометка Тогда
					СтатусОтбора = СоответствиеКнопокСтатусам[КнопкаОтбораПоСтатусам.Значение];
				КонецЕсли;
			КонецЦикла;
			
			Если СтатусОтбора = Неопределено Тогда
				ЖурналОтчетов.Отбор.Ссылка.Использование = Ложь;
			Иначе
				
				Запрос = Новый Запрос;
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.Текст = "ВЫБРАТЬ
				|	ВложенныйЗапрос.ОтчетСсылка КАК Отчет,
				|	ОтправкиФСС.СтатусОтправки КАК Статус
				|ПОМЕСТИТЬ втОтправкиФСС
				|ИЗ
				|	(ВЫБРАТЬ
				|		ОтправкиФСС.ОтчетСсылка КАК ОтчетСсылка,
				|		МАКСИМУМ(ОтправкиФСС.ДатаОтправки) КАК ДатаОтправки
				|	ИЗ
				|		Справочник.ОтправкиФСС КАК ОтправкиФСС
				|	
				|	СГРУППИРОВАТЬ ПО
				|		ОтправкиФСС.ОтчетСсылка) КАК ВложенныйЗапрос
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
				|		ПО (ОтправкиФСС.ОтчетСсылка = ВложенныйЗапрос.ОтчетСсылка)
				|			И (ОтправкиФСС.ДатаОтправки = ВложенныйЗапрос.ДатаОтправки)";
				Запрос.Выполнить();
				
				
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				               |	РегламентированныйОтчет.Ссылка
				               |ИЗ
				               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
				               |		ПО РегламентированныйОтчет.Ссылка = СтатусыОтправки.Объект
				               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРегламентированныхОтчетов КАК СтатусыРегламентированныхОтчетов
				               |		ПО РегламентированныйОтчет.Ссылка = СтатусыРегламентированныхОтчетов.Отчет
				               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтправкиФСС КАК втОтправкиФСС
				               |		ПО РегламентированныйОтчет.Ссылка = втОтправкиФСС.Отчет
				               |ГДЕ
				               |	ВЫБОР
				               |			КОГДА СтатусыРегламентированныхОтчетов.Статус = &СтатусПодготовлен
				               |				ТОГДА ВЫБОР
				               |						КОГДА ЕСТЬNULL(СтатусыОтправки.Статус, ИСТИНА) = &парамИстина
				               |								ИЛИ СтатусыОтправки.Статус = &ПустойСтатусОтправки
				               |							ТОГДА ВЫБОР
				               |									КОГДА ЕСТЬNULL(втОтправкиФСС.Статус, ИСТИНА) = ИСТИНА
				               |										ТОГДА &СтатусПодготовлен
				               |									ИНАЧЕ втОтправкиФСС.Статус
				               |								КОНЕЦ
				               |						ИНАЧЕ СтатусыОтправки.Статус
				               |					КОНЕЦ
				               |			ИНАЧЕ ВЫБОР
				               |					КОГДА ЕСТЬNULL(СтатусыРегламентированныхОтчетов.Статус, ИСТИНА) = ИСТИНА
				               |							ИЛИ СтатусыРегламентированныхОтчетов.Статус = &ПустойСтатус
				               |						ТОГДА &СтатусСдан
				               |					ИНАЧЕ СтатусыРегламентированныхОтчетов.Статус
				               |				КОНЕЦ
				               |		КОНЕЦ В (&ДопустимыеСтатусы)";
				Запрос.УстановитьПараметр("СтатусСдан", Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
				Запрос.УстановитьПараметр("СтатусПодготовлен", Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
				Запрос.УстановитьПараметр("ПустойСтатусОтправки", Перечисления.СтатусыОтправки.ПустаяСсылка());
				Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыРегламентированныхОтчетов.ПустаяСсылка());
				Запрос.УстановитьПараметр("парамИстина", Истина);
				Запрос.УстановитьПараметр("ДопустимыеСтатусы", СтатусОтбора);
				спОтчеты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				
				ЖурналОтчетов.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
				ЖурналОтчетов.Отбор.Ссылка.Значение.ЗагрузитьЗначения(спОтчеты);
				ЖурналОтчетов.Отбор.Ссылка.Использование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		УправлениеОтборамиТаблицыЦикловОбмена();
		
	Иначе
		
		Если Организация.Количество() = 0 Тогда
			ЖурналВыгрузки.Отбор.Организация.Использование = Ложь;
		Иначе
			ЖурналВыгрузки.Отбор.Организация.Использование = Истина;
			ЖурналВыгрузки.Отбор.Организация.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналВыгрузки.Отбор.Организация.Значение = Организация;
		КонецЕсли;
		
		ЖурналВыгрузки.Отбор.Ссылка.Использование = Истина;
		Если НЕ (мОтбиратьПоДокументуОтбора И ЗначениеЗаполнено(мДокументОтбор)) Тогда
			ЖурналВыгрузки.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналВыгрузки.Отбор.Ссылка.Значение = СформироватьСписокВыгрузок(СписокВидовОтчетов);
		Иначе
			ЖурналВыгрузки.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
			ЖурналВыгрузки.Отбор.Ссылка.Значение = СформироватьСписокВыгрузок(мДокументОтбор);
		КонецЕсли;
		
		Если НЕ ОтборКодИФНС Тогда
			ЖурналВыгрузки.Отбор.КодИМНС.Использование = Ложь;
		Иначе
			ЖурналВыгрузки.Отбор.КодИМНС.Использование = Истина;
			ЖурналВыгрузки.Отбор.КодИМНС.ВидСравнения = ВидСравнения.Равно;
			ЖурналВыгрузки.Отбор.КодИМНС.Значение = КодИФНС;
		КонецЕсли;
		Если НЕ ОтборПериод Тогда
			//ЖурналВыгрузки.Отбор.ПериодС.Использование = Ложь;
			ЖурналВыгрузки.Отбор.ПериодПо.Использование = Ложь;
		Иначе                            
			Если Периодичность = "Произвольный" Тогда
				//ЖурналВыгрузки.Отбор.ПериодС.Использование = Истина;
				ЖурналВыгрузки.Отбор.ПериодПо.Использование = Истина;
				//ЖурналВыгрузки.Отбор.ПериодС.ВидСравнения = ВидСравнения.БольшеИлиРавно;
				//ЖурналВыгрузки.Отбор.ПериодС.Значение = ДатаНачалаПериодаОтчета;
				ЖурналВыгрузки.Отбор.ПериодПо.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
				ЖурналВыгрузки.Отбор.ПериодПо.Значение = ДатаКонцаПериодаОтчета;
			Иначе
				//ЖурналВыгрузки.Отбор.ПериодС.Использование = Ложь;
				ЖурналВыгрузки.Отбор.ПериодПо.Использование = Истина;
				ЖурналВыгрузки.Отбор.ПериодПо.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
				ЖурналВыгрузки.Отбор.ПериодПо.ЗначениеС = НачалоДня(ДатаКонцаПериодаОтчета);
				ЖурналВыгрузки.Отбор.ПериодПо.ЗначениеПо = КонецДня(ДатаКонцаПериодаОтчета);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеЭУДокументооборота()
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаФСС КАК НастройкиОбменаФСС
	|		ПО НастройкиОбменаФСС.Организация = Организации.Ссылка
	|ГДЕ
	|	НастройкиОбменаФСС.ИспользоватьОбмен = ИСТИНА
	|	И Организации.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОрганизацияСсылка", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИспользуетсяДокументооборотСФСС = Выборка.Следующий();
	
	// временный запрет групповой отправки
	КнопкиКоманднойПанелиЖурналаОтчетов = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки;
	ИндексКнопкиПодменюОтправка = КнопкиКоманднойПанелиЖурналаОтчетов.Индекс(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ПодменюОтправка);
	КнопкиКоманднойПанелиЖурналаОтчетов.Удалить(ИндексКнопкиПодменюОтправка);
	
	ЭлектронныйДокументооборотАктивен = КонтекстЭДО <> Неопределено И КонтекстЭДО.ЭлектронныйДокументооборотИспользуется();
	Если НЕ ЭлектронныйДокументооборотАктивен Тогда
		
		//// удаляем подменю "Удалить", а кнопку открытия формы справочника РегламентированныеОтчеты выносим из подменю на панель
		КнопкиКоманднойПанелиФормы = ЭлементыФормы.КоманднаяПанельФормы.Кнопки;
		ПодменюПерейти = КнопкиКоманднойПанелиФормы.Перейти;
		//КнопкаПодменюПерейтиКСправочнику = ПодменюПерейти.Кнопки.ОткрытьСправочник;
		//
		//ИндексКнопкиСправка = КнопкиКоманднойПанелиФормы.Индекс(КнопкиКоманднойПанелиФормы.Справка);
		//КнопкиКоманднойПанелиФормы.Вставить(ИндексКнопкиСправка, , ТипКнопкиКоманднойПанели.Разделитель);
		//КнопкиКоманднойПанелиФормы.Вставить(ИндексКнопкиСправка, КнопкаПодменюПерейтиКСправочнику.Имя, ТипКнопкиКоманднойПанели.Действие, КнопкаПодменюПерейтиКСправочнику.Текст, КнопкаПодменюПерейтиКСправочнику.Действие);
		//
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ПодменюПерейти);
		
		//// удаляем 3 кнопки начиная с подменю "Отправка"
		//КнопкиКоманднойПанелиЖурналаОтчетов = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки;
		//ИндексКнопкиПодменюОтправка = КнопкиКоманднойПанелиЖурналаОтчетов.Индекс(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ПодменюОтправка);
		//КнопкиКоманднойПанелиЖурналаОтчетов.Удалить(ИндексКнопкиПодменюОтправка);
		КнопкиКоманднойПанелиЖурналаОтчетов.Удалить(ИндексКнопкиПодменюОтправка);
		КнопкиКоманднойПанелиЖурналаОтчетов.Удалить(ИндексКнопкиПодменюОтправка);
		
		// удаляем пункты подменю отбора по статусам, связанные с отправкой
		КнопкиПодменюОтбораПоСтатусам = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки;
		
		//В конверте
		ИндексОтбораПоСтатусуВКонверте = КнопкиПодменюОтбораПоСтатусам.Индекс(КнопкиПодменюОтбораПоСтатусам.ВКонверте);


		КнопкиПодменюОтбораПоСтатусам.Удалить(ИндексОтбораПоСтатусуВКонверте);
		
		//Доставлен
		ИндексОтбораПоСтатусуДоставлен = КнопкиПодменюОтбораПоСтатусам.Индекс(КнопкиПодменюОтбораПоСтатусам.Доставлен);
		КнопкиПодменюОтбораПоСтатусам.Удалить(ИндексОтбораПоСтатусуДоставлен);
		
		Если НЕ ИспользуетсяДокументооборотСФСС Тогда
			//Отправлен
			ИндексОтбораПоСтатусуОтправлен = КнопкиПодменюОтбораПоСтатусам.Индекс(КнопкиПодменюОтбораПоСтатусам.Отправлен);
			КнопкиПодменюОтбораПоСтатусам.Удалить(ИндексОтбораПоСтатусуОтправлен);
			
			//Не принят
			ИндексОтбораПоСтатусуНеПринят = КнопкиПодменюОтбораПоСтатусам.Индекс(КнопкиПодменюОтбораПоСтатусам.НеПринят);
			КнопкиПодменюОтбораПоСтатусам.Удалить(ИндексОтбораПоСтатусуНеПринят);
		КонецЕсли;
		
		// устанавливаем отбор по статусу по умолчанию
		ОтборУстановлен = Ложь;
		Для Каждого Кнопка Из КнопкиПодменюОтбораПоСтатусам Цикл
			Если Кнопка.ТипКнопки = ТипКнопкиКоманднойПанели.Действие И Кнопка.Пометка Тогда
				ОтборУстановлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		КнопкиПодменюОтбораПоСтатусам.ВсеСтатусы.Пометка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает/снимает пометки в строках табличного поля ДеревоОтчетов, подчиненных заданной.
// Процедура вызывается рекурсивно.
// 
// Параметры:
//	Узел - ДеревоЗначений или СтрокаДереваЗначений, начиная с которой следует обрабатывать дерево.
//	Пометка - значение пометки, которое следует установить.
//	СписокВыбранных - СписокЗначений, содержащий ссылки вида СправочникСсылка.РегламентированныеОтчеты.
//						Если параметр задан, то пометка меняется только у тех строк, для которых свойство Ссылка
//						находится в указанном списке.
//
Процедура ИзменитьПометкуПодчиненных(Узел, Пометка = Неопределено, СписокВыбранных = Неопределено, ОбновлятьПометкуРодительских = Ложь, Дерево = Неопределено)
	
	Если Пометка = Неопределено Тогда
		Пометка = Узел.Пометка;
	КонецЕсли;
	
	Если Дерево = Неопределено Тогда
		Дерево = Узел;
	КонецЕсли;
	
	Если СписокВыбранных = Неопределено Тогда
		Для Каждого Стр1 Из Узел.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2.Пометка = Пометка;
			КонецЦикла;
			Стр1.Пометка = Пометка;
		КонецЦикла;
	Иначе
		Для Каждого Стр1 Из Дерево.Строки Цикл
			Для Каждого Стр2 Из Стр1.Строки Цикл
				Стр2.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр2.Ссылка) <> Неопределено);
			КонецЦикла;
			Если Стр1.ЭтоГруппа <> Истина Тогда
				Стр1.Пометка = Число(СписокВыбранных.НайтиПоЗначению(Стр1.Ссылка) <> Неопределено);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр1 Из Дерево.Строки Цикл
		Если Стр1.ЭтоГруппа <> Истина Тогда
			Продолжить;
		КонецЕсли;
		СуммаПометок = 0;
		Для Каждого Стр2 Из Стр1.Строки Цикл
			 СуммаПометок = СуммаПометок + Число(Стр2.Пометка);
		КонецЦикла;
		Если СуммаПометок = Стр1.Строки.Количество() Тогда
			Стр1.Пометка = 1;
		ИначеЕсли СуммаПометок = 0 Тогда
			Стр1.Пометка = 0;
		Иначе
			Стр1.Пометка = 2;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Сканирует все строки дерева значений, подчиненные заданной, проверяет
// у них свойство Пометка на равенство заданному значению Пометка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - исходная строка для сканирования.
//	Пометка - Булево, значение пометки.
//	ПервыйПроход - признак первого захода в процедуру (используется только при рекурсивных вызовах).
//
// Возвращаемое значение:
//	Булево - признак того, что у всех строк в дереве значений, подчиненных заданной, пометка = Пометка.
//
Функция УВсехПодчиненныхПометкаРавна(Узел, Пометка, ПервыйПроход = Истина)
	
	Если НЕ ПервыйПроход И Узел.Пометка <> Пометка Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		Если НЕ УВсехПодчиненныхПометкаРавна(Стр, Пометка, Ложь) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Выводит строковое представление периода в заголовок надписи НадписьПериодаСоставленияОтчета.
//
// Параметры:
//	Нет.
//
Процедура ПоказатьПериод()

	Год = Год(ДатаКонцаПериодаОтчета);
	МесяцМинус1 = Месяц(ДатаКонцаПериодаОтчета) - 1;

КонецПроцедуры

// Возвращает список ссылок СправочникСсылка.РегламентированныеОтчеты, соответствующих выбранным
// строкам в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// УзелДерева - текущая строка дерева значений. Используется только при рекурсивных вызовах.
// СписокВидов - текущий список ссылок. Используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	СписокЗначений - список ссылок, соответствующих выбранным строкам в табличном поле ДеревоОтчетов.
//
Функция СписокВыбранныхСсылокВДеревеОтчетов(УзелДерева = Неопределено, СписокВидов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = мПолноеДеревоОтчетов;
		СписокВидов = Новый СписокЗначений;
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокВидов.НайтиПоЗначению(УзелДерева.Ссылка) = Неопределено И УзелДерева.Пометка = 1 Тогда
		СписокВидов.Добавить(УзелДерева.Ссылка);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.Строки Цикл
		СписокВыбранныхСсылокВДеревеОтчетов(Стр, СписокВидов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокВидов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает признаки раскрытия узлов в табличном поле ДеревоОтчетов.
// Функция вызывается рекурсивно.
//
// Параметры:
//	УзелДерева - начальный узел, с которого следует начать сканирование дерева.
//	СписокУзлов - служебная переменная. Используется только при рекурсивных вызовах.
//
// Возвращаемое значение:
//	ТаблицаЗначений - соответствие узлов и признаков их раскрытия.
//
Функция СписокРаскрытыхВДеревеОтчетов(УзелДерева = Неопределено, СписокУзлов = Неопределено)
	
	Если УзелДерева = Неопределено Тогда
		ПервыйЗаход = Истина;
		УзелДерева = ДеревоОтчетов;
		СписокУзлов = Новый ТаблицаЗначений;
		СписокУзлов.Колонки.Добавить("Узел");
		СписокУзлов.Колонки.Добавить("Раскрыт");
	Иначе
		ПервыйЗаход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйЗаход И СписокУзлов.Найти(УзелДерева.Ссылка, "Узел") = Неопределено И УзелДерева.Строки.Количество() <> 0 Тогда
		НовСтр = СписокУзлов.Добавить();
		НовСтр.Узел = УзелДерева.Ссылка;
		НовСтр.Раскрыт = ЭлементыФормы.ДеревоОтчетов.Развернут(УзелДерева);
	КонецЕсли;
	
	Для Каждого Стр Из УзелДерева.Строки Цикл
		СписокРаскрытыхВДеревеОтчетов(Стр, СписокУзлов);
	КонецЦикла;
	
	Если ПервыйЗаход Тогда
		Возврат СписокУзлов;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Раскрывает или сворачивает узлы в строках дерева в табличном поле ДеревоОтчетов
// в соответствии с признаками перечисленными в таблице-параметре.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Узел - исходный узел дерева.
//	СписокРаскрытых - таблица, задающая соответствие между ссылками (узлами) и признаками их раскрытия.
//
Процедура УстановитьРаскрытияВСпискеОтчетов(Узел, СписокРаскрытых)
	
	Если Узел <> ДеревоОтчетов И Узел.Строки.Количество() <> 0 Тогда
		РезультатПоиска = СписокРаскрытых.Найти(Узел.Ссылка, "Узел");
		Если РезультатПоиска = Неопределено Тогда
			ЭлементыФормы.ДеревоОтчетов.Развернуть(Узел);
		Иначе
			Если РезультатПоиска.Раскрыт Тогда
				ЭлементыФормы.ДеревоОтчетов.Развернуть(Узел);
			Иначе
				ЭлементыФормы.ДеревоОтчетов.Свернуть(Узел);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		УстановитьРаскрытияВСпискеОтчетов(Стр, СписокРаскрытых)
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает активной строку дерева ДеревоОтчетов, соответствующую
// указанной ссылке.
// Процедура вызывается рекурсивно.
//
// Параметры:
//	Ссылка - СправочникСсылка.РегламентированныеОтчеты, строку дерева, соответствующую которой,
//				следует сделать активной.
//	Узел - узел дерева ДеревоОтчетов, начиная с которого следует начать сканирование дерева для поиска
//				указанной ссылки.
//
Процедура УстановитьТекущуюСсылку(Ссылка, Узел = Неопределено)
	
	Если Узел = Неопределено Тогда
		ПервыйПроход = Истина;
		Узел = ДеревоОтчетов;
	Иначе
		ПервыйПроход = Ложь;
	КонецЕсли;
	
	Если НЕ ПервыйПроход И Узел.Ссылка = Ссылка Тогда
		ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока = Узел;
		Возврат;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		УстановитьТекущуюСсылку(Ссылка, Стр);
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает подсказки у элементов управления периодом в зависимости от значений,
// установленных для этих элементов упрвления.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьПодсказкиЭлементовУправленияПериодом()
	
	Если НЕ ОтборПериод Тогда
		Подсказка = "Отбор по периоду не установлен";
	Иначе
		Если Периодичность = "По итогам" Тогда
			Подсказка = "Отчеты, представляемые по истечении " + МассивНаименованийПравыхГраницПериода[Месяц(ДатаКонцаПериодаОтчета) - 1] + " " + Формат(Год, "ЧГ=0") + " года";
		Иначе
			Подсказка = "Отчеты за период " + ПредставлениеПериода(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета), "ФП = Истина");
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ОтборПериод.Подсказка = Подсказка;
	ЭлементыФормы.Периодичность.Подсказка = Подсказка;
	ЭлементыФормы.Периодичность2.Подсказка = Подсказка;
	ЭлементыФормы.ПанельПериод.Подсказка = Подсказка;
	ЭлементыФормы.ПолосаРегулированияПериода.Подсказка = Подсказка;
	ЭлементыФормы.Год.Подсказка = Подсказка;
	ЭлементыФормы.КнопкаНастройкаПериода.Подсказка = Подсказка;
	ЭлементыФормы.ДатаКонцаПериодаОтчета.Подсказка = Подсказка;
	ЭлементыФормы.НадписьПолеВводаС.Подсказка = Подсказка;
	ЭлементыФормы.ДатаНачалаПериодаОтчета.Подсказка = Подсказка;
	ЭлементыФормы.НадписьПолеВводаПо.Подсказка = Подсказка;
	
КонецПроцедуры

// Обновляет дерево отчетов из справочника РегламентированныеОтчеты.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьДеревоОтчетов(ОбновлятьИзИБ = Истина)
	Перем ТекущийОтчет;
	
	Если ОбновлятьИзИБ ИЛИ мФильтроватьВидыОтчетовПоПериоду Тогда 
		Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
			ТекущийОтчет = ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.Ссылка;
		КонецЕсли;
		СписокОтчетов = СписокВыбранныхСсылокВДеревеОтчетов();
		СписокРаскрытых = СписокРаскрытыхВДеревеОтчетов();
		ЗаполнитьИзСправочникаРегламентированныеОтчеты(ОбновлятьИзИБ);
		Если ОбновлятьИзИБ Тогда
			ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина, СписокОтчетов, Истина);
		КонецЕсли;
		ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина, СписокОтчетов, Истина);
		Если ТекущийОтчет <> Неопределено Тогда
			УстановитьТекущуюСсылку(ТекущийОтчет);
		КонецЕсли;
		УстановитьРаскрытияВСпискеОтчетов(ДеревоОтчетов, СписокРаскрытых);
	КонецЕсли;
	УстановитьОтборы();
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.РазвернутьВсе.Доступность = мИерархическийПросмотр;
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.СвернутьВсе.Доступность = мИерархическийПросмотр;
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	
КонецПроцедуры

// Открывает форму с табличным полем списка справочника "Регламентированные отчеты" для выбора 
// вида отчета и создает новый отчет указанного пользователей вида.
//
// Параметры:
//	Нет.
//
Процедура ДобавлениеОтчетаВЖурналеОтчетов()
	
	ФормаВыбораОтчета= РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВыбораВидаОтчета", ЭтаФорма);
	ФормаВыбораОтчета.РежимВыбора = Истина;
	ФормаВыбораОтчета.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбораОтчета.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = мИерархическийПросмотр;
	ВыбранныйВидОтчета = ФормаВыбораОтчета.ОткрытьМодально();
	Если ЗначениеЗаполнено(ВыбранныйВидОтчета) Тогда
		ОткрытьФормуОтчета(ВыбранныйВидОтчета);
	КонецЕсли;
	
КонецПроцедуры

// Регулирует цвет текста у надписей - названий месяцев/кварталов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеНадписямиМесяцев()
	
	Месяц = Месяц(ДатаКонцаПериодаОтчета);
	Для Сч = 0 По 11 Цикл
		Если ОтборПериод И Сч = Месяц - 1 Тогда
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет(0, 0, 255);
		Иначе
			ЭлементыФормы["НадписьМесяц" + (Сч + 1)].ЦветТекста = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при изменении периода нажатием на одну из надписей с указанием периода
// или при изменении положения ползунка у полосы регулирования периода.
//
// Параметры:
//	Нет.
//
Процедура ПриИзмененииМесяца()
	
	Месяц = МесяцМинус1 + 1;
	ДатаКонцаПериодаОтчета = КонецМесяца(Дата(Год, Месяц, 1));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	УправлениеНадписямиМесяцев();
	ОбновитьДеревоОтчетов(Ложь);
	
КонецПроцедуры

// Возвращает ссылку на строку дерева значений по заданному значению колонки Ссылка.
// Функция вызывается рекурсивно.
//
// Параметры:
//	Узел - текущий узел дерева видов отчетов, используется только при рекурсивных вызовах.
//	Ссылка - ДокументСсылка.РегламентированныйОтчет, значение колонки Ссылка искомой строки дерева значений.
//
// Возвращаемое значение - СтрокаДереваЗначений, искомая строка дерева значений.
//	
Функция ПолучитьСтрокуДереваПоСсылке(Узел, Ссылка)
	
	Если ТипЗнч(Узел) = Тип("СтрокаДереваЗначений") И Узел.Ссылка = Ссылка Тогда
		Возврат Узел;
	КонецЕсли;
	
	Для Каждого Стр Из Узел.Строки Цикл
		ИскомаяСтрока = ПолучитьСтрокуДереваПоСсылке(Стр, Ссылка);
		Если ИскомаяСтрока <> Неопределено Тогда
			Возврат ИскомаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает количество документов РегламентированныйОтчет в ИБ с учетом установленных критериев отбора.
//
// Параметры:
//	Нет.
//
// Вовращаемое значение:
//	Число - количество документов в ИБ с учетом установленных пользователей на форме параметров отбора.
//	
Функция ДокументыСУчетомКритериевОтбора()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.ИсточникОтчета);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодИМНС", КодИФНС);
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", НачалоГода(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2Кон", КонецДня(НачалоГода(ДатаНачалаПериодаОтчета)));
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета";
	Если Организация.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		           |	И РегламентированныйОтчет.Организация В (&Организация)";
	КонецЕсли;				   
	Если ОтборКодИФНС Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	КонецЕсли;
	Если ОтборПериод Тогда
		Если Периодичность = "Произвольный" Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
					   |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончанияКон";
		Иначе
			Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
		КонецЕсли;
	КонецЕсли;
			   
	ТаблРез = Запрос.Выполнить().Выгрузить();
	КолТаблРез = ТаблРез.Количество();
	Если КолТаблРез = 0 Тогда
		Возврат 0;
	Иначе
		Возврат КолТаблРез;
	КонецЕсли;
	
КонецФункции

// Процедура управляет свойствами Видимость элементов формы в зависимости от признака
// работы в пакетном режиме.
//
// Параметры:
//	Нет.
//
Процедура УправлениеВидимостьюЭУПакетногоРежима()
	
	ГрупповойРежим = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка;
	ЭлементыФормы.ЖурналОтчетов.Колонки.Пометка.Видимость = ГрупповойРежим;
	Если ГрупповойРежим Тогда
		Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Найти("СнятьФлажкиУВсех") <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		ИндексКнопкиПакетногоРежима = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Индекс(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим);
		НовКн = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Вставить(ИндексКнопкиПакетногоРежима + 1, "СнятьФлажкиУВсех", ТипКнопкиКоманднойПанели.Действие, "Снять флажки у всех отчетов", Новый Действие("КоманднаяПанельЖурналОтчетовСнятьФлажкиУВсех"));
		НовКн.Картинка = БиблиотекаКартинок.СнятьФлажки;
		НовКн.Подсказка = НовКн.Текст;
		НовКн = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Вставить(ИндексКнопкиПакетногоРежима + 1, "УстановитьФлажкиУВсех", ТипКнопкиКоманднойПанели.Действие, "Установить флажки у всех отчетов", Новый Действие("КоманднаяПанельЖурналОтчетовУстановитьФлажкиУВсех"));
		НовКн.Картинка = БиблиотекаКартинок.УстановитьФлажки;
		НовКн.Подсказка = НовКн.Текст;
	Иначе
		Кн = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Найти("СнятьФлажкиУВсех");
		Если Кн <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Удалить(Кн);
		КонецЕсли;
		Кн = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Найти("УстановитьФлажкиУВсех");
		Если Кн <> Неопределено Тогда
			ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Удалить(Кн);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает выбранный пользователем набор отчетов в журнале отчетов.
// Используется при работе в пакетном режиме.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений - список выбранных в журнале отчетов.
//
Функция ВыбранныйНаборОтчетов()
	
	ВидимыеОтчеты = ВидимыйНаборОтчетов();
	АктуальныйНаборОтчетов = Новый СписокЗначений;
	Для Каждого ВидимыйОтчет Из ВидимыеОтчеты Цикл
		Если ВыбранныеОтчеты.НайтиПоЗначению(ВидимыйОтчет.Значение) <> Неопределено Тогда
			АктуальныйНаборОтчетов.Добавить(ВидимыйОтчет.Значение);
		КонецЕсли;
	КонецЦикла;
	Возврат АктуальныйНаборОтчетов;
	
КонецФункции

// Возвращает список видимых отчетов в журнале отчетов.
// Используется при работе в пакетном режиме.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений - список выбранных в журнале отчетов.
//
Функция ВидимыйНаборОтчетов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИсточникОтчета", СписокВыбранныхВидовОтчетов());
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("КодИМНС", СокрЛП(КодИФНС));
	Запрос.УстановитьПараметр("ДатаНачала", НачалоДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачалаКон", КонецДня(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2", НачалоГода(ДатаНачалаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаНачала2Кон", КонецДня(НачалоГода(ДатаНачалаПериодаОтчета)));
	ДатаОконч = ?(НЕ ЗначениеЗаполнено(ДатаКонцаПериодаОтчета), '20291231', ДатаКонцаПериодаОтчета);
	Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОконч));
	Запрос.УстановитьПараметр("ДатаОкончанияКон", КонецДня(ДатаОконч));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	РегламентированныйОтчет.Ссылка
	               |ИЗ
	               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	               |ГДЕ
	               |	РегламентированныйОтчет.ИсточникОтчета В (&ИсточникОтчета)";
	Если Организация.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		           |	И РегламентированныйОтчет.Организация В (&Организация)";
	КонецЕсли;				   
	Если ОтборКодИФНС Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	И РегламентированныйОтчет.КодИМНС = &КодИМНС";
	КонецЕсли;
	Если ОтборПериод Тогда
		Если Периодичность = "Произвольный" Тогда
			Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.ДатаОкончания >= &ДатаНачала
					   |	И РегламентированныйОтчет.ДатаОкончания <= &ДатаОкончанияКон";
		Иначе
			Запрос.Текст = Запрос.Текст + "
					   |	И (РегламентированныйОтчет.ДатаОкончания МЕЖДУ &ДатаОкончания И &ДатаОкончанияКон)";
		КонецЕсли;
	КонецЕсли;
	
	Если ЖурналОтчетов.Отбор.Ссылка.Использование Тогда
		Запрос.Текст = Запрос.Текст + "
					   |	И РегламентированныйОтчет.Ссылка В (&СсылкиНаОтчеты)";
		Запрос.УстановитьПараметр("СсылкиНаОтчеты", ЖурналОтчетов.Отбор.Ссылка.Значение);
	КонецЕсли;
	
	Если ЖурналОтчетов.Порядок.Количество() <> 0 Тогда
		Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО";
		Для Каждого ЭлементПорядка Из ЖурналОтчетов.Порядок Цикл
			Запрос.Текст = Запрос.Текст + "
			|	РегламентированныйОтчет." + ЭлементПорядка.Данные
			+ ?(ЭлементПорядка.Направление = НаправлениеСортировки.Возр, " ВОЗР,", " УБЫВ,");
		КонецЦикла;
		Запрос.Текст = Запрос.Текст + "
		|	РегламентированныйОтчет.Ссылка";
	КонецЕсли;
			   
	СписокОтчетов = Новый СписокЗначений;
	СписокОтчетов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	Возврат СписокОтчетов;
	
КонецФункции

// Открывает окно с информацией для пользователей подсистемы.
//
// Параметры:
//	Авто - признак автоматического показа окна с информацией.
//
Процедура ПоказатьИнформациюДляПользователей(Авто = Истина)
	
	Если Авто Тогда
		Если ТипЗнч(ПараметрыОткрытия) <> Тип("Структура") Тогда
			ПоказыватьАвто = (ВосстановитьЗначение("роНеПоказыватьИнформациюДляПользователей") <> Метаданные.Версия);
			Если ПоказыватьАвто Тогда
				ФормаСИнформациейДляПользователей = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ИнформацияДляПользователей", ЭтаФорма);
				ФормаСИнформациейДляПользователей.мАвтоматическийПоказ = Истина;
				ФормаСИнформациейДляПользователей.Открыть();
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФормаСИнформациейДляПользователей = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ИнформацияДляПользователей", ЭтаФорма);
		ФормаСИнформациейДляПользователей.мАвтоматическийПоказ = Ложь;
		ФормаСИнформациейДляПользователей.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеВидимостьюКнопкиДоступныеОбновления()
	
	НастройкиМеханизмаОнлайнСервисовРО = РегламентированнаяОтчетность.ПолучитьНастройкиМеханизмаОнлайнСервисовРО();
	Если НЕ НастройкиМеханизмаОнлайнСервисовРО.Использовать Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.ДоступныеОбновления);
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РазделительДоступныеОбновления);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПрименитьПараметрыОткрытия() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВосстановитьПараметрыОтбора();
	
	УправлениеЭУДокументооборота();
	
	ЗаполнитьИзСправочникаРегламентированныеОтчеты();
	ВосстановитьСписокВыбранныхВидовОтчетов();
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.РазвернутьВсе.Доступность = мИерархическийПросмотр;
	ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.СвернутьВсе.Доступность = мИерархическийПросмотр;
	Для Каждого НастройкаОтбора Из ЭлементыФормы.ЖурналОтчетов.НастройкаОтбора Цикл
		НастройкаОтбора.Доступность = Ложь;
	КонецЦикла;
	Для Каждого НастройкаОтбора Из ЭлементыФормы.ЖурналВыгрузки.НастройкаОтбора Цикл
		НастройкаОтбора.Доступность = Ложь;
	КонецЦикла;
	
	ЭлементыФормы.ЦиклыОбменаФНС.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЦиклыОбменаФНС.Отбор.ПометкаУдаления.Установить(Ложь);
	ЦиклыОбменаФНС.Отбор.Тип.Установить(Перечисления.ТипыЦикловОбмена.НалоговаяИлиБухгалтерскаяОтчетность);
	
	ЭлементыФормы.ЦиклыОбменаПФР.НастройкаОтбора.ПометкаУдаления.Доступность = Ложь;
	ЦиклыОбменаПФР.Отбор.ПометкаУдаления.Установить(Ложь);
	
	ЭлементыФормы.ЖурналОтчетов.РазрешитьНастройкуПериода = Ложь;
	ЭлементыФормы.ЖурналВыгрузки.РазрешитьНастройкуПериода = Ложь;
	ЭлементыФормы.ЖурналОтчетов.ВосстанавливатьТекущуюСтроку = Истина;
	ЭлементыФормы.ЖурналВыгрузки.ВосстанавливатьТекущуюСтроку = Истина;
	
	ЭлементыФормы.ЖурналОтчетов.НастройкаПорядка.Дата.Доступность = Ложь;
	ЭлементыФормы.ЖурналОтчетов.НастройкаПорядка.Организация.Доступность = Истина;
	ЭлементыФормы.ЖурналВыгрузки.НастройкаПорядка.Организация.Доступность = Истина;
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда // первое открытие
		Периодичность = "По итогам";
		ДатаКонцаПериодаОтчета = КонецМесяца(ДобавитьМесяц(РабочаяДата, -1));
		ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	КонецЕсли;
	
	ОргПоУмолчанию = РегламентированнаяОтчетность.ПолучитьОрганизациюПоУмолчанию();
	УчетПоВсемОрганизациям = РегламентированнаяОтчетность.ПолучитьПризнакУчетаПоВсемОрганизациям();
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;
	Если (ЗначениеЗаполнено(ОргПоУмолчанию) И НЕ УчетПоВсемОрганизациям) ИЛИ (Организация.Количество() = 0 И УчетПоВсемОрганизациям И (ЗначениеЗаполнено(ОргПоУмолчанию))) Тогда
		Организация.Очистить();
		Организация.Добавить(ОргПоУмолчанию);
	КонецЕсли;
	
	//РегламентированнаяОтчетность.ЗарегистрироватьEANGNIVCПриНеобходимости();
	
	ПоказатьИнформациюДляПользователей();
	
	ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
	Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Календарь);
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.РазделительКалендарь);
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПередОткрытиемОсновнойФормыРаботыСОтчетностью(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеВидимостьюКнопкиДоступныеОбновления();
	
	УправлениеПоказомТаблицыЦикловОбмена();
	
	Если НЕ РежимВыбора Тогда
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(0);
		ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Удалить(0);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ФормаРеглИФинОтчетности_СписокВидовОтчетов"				, СписокВыбранныхСсылокВДеревеОтчетов());
	СохранитьЗначение("ФормаРеглИФинОтчетности_ТекущаяСтраницаОсновнойПанели"	, ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя);
	СохранитьЗначение("ФормаРеглИФинОтчетности_Организация"						, Организация);
	СохранитьЗначение("ФормаРеглИФинОтчетности_КодИФНС"							, КодИФНС);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ОтборКодИФНС"					, ОтборКодИФНС);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ОтборПериод"						, ОтборПериод);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ПолеВыбораПериодичность"			, Периодичность);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ДатаНачалаПериодаОтчета"			, ДатаНачалаПериодаОтчета);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ДатаКонцаПериодаОтчета"			, ДатаКонцаПериодаОтчета);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ДокументОтбор"					, мДокументОтбор);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ПоказыватьПустые"				, мОтображатьПустые);
	СохранитьЗначение("ФормаРеглИФинОтчетности_мИерархическийПросмотр"			, мИерархическийПросмотр);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ПроверятьСоотношенияПриПечатиИВыгрузки", мПроверятьСоотношенияПриПечатиИВыгрузки);
	СохранитьЗначение("ФормаРеглИФинОтчетности_мОтбиратьПоДокументуОтбора"		, мОтбиратьПоДокументуОтбора);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ФильтроватьВидыОтчетовПоПериоду"	, мФильтроватьВидыОтчетовПоПериоду);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ГрупповойРежим"					, ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ВыбранныеОтчеты"					, ВыбранныеОтчеты.ВыгрузитьЗначения());
	СохранитьЗначение("ФормаРеглИФинОтчетности_НеОтображатьНапоминания"			, мНеОтображатьНапоминания);
	СохранитьЗначение("ФормаРеглИФинОтчетности_ЗапоминатьВыбранныйПериод"		, мЗапоминатьВыбранныйПериод);
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Найти("ОтображатьСписокЦикловОбмена") <> Неопределено Тогда
		СохранитьЗначение("ФормаРеглИФинОтчетности_ОтображатьСписокЦикловОбмена"	, ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ОтображатьСписокЦикловОбмена.Пометка);
	КонецЕсли;
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы.Пометка Тогда
		СохранитьЗначение("ФормаРеглИФинОтчетности_ЗначениеОтбораПоСтатусу", Неопределено);
	Иначе
		Для Каждого КнопкаОтбораПоСтатусам Из КнопкиОтбораПоСтатусам Цикл
			Если КнопкаОтбораПоСтатусам.Значение.Пометка Тогда
				СохранитьЗначение("ФормаРеглИФинОтчетности_ЗначениеОтбораПоСтатусу", КнопкаОтбораПоСтатусам.Значение.Имя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Обновить дерево отчетов" И Параметр = "Обновить дерево отчетов" Тогда
		ОбновитьДеревоОтчетов();
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов" И ТипЗнч(Параметр) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяКолонка = ЭлементыФормы.ЖурналОтчетов.Колонки.Пометка Тогда
			ЭлементыФормы.ЖурналОтчетов.ТекущаяКолонка = ЭлементыФормы.ЖурналОтчетов.Колонки.НаименованиеОтчета;
		КонецЕсли;
		ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока = Параметр;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Параметр Тогда // позиционирование не произошло => мешает отбор
			Предупреждение("Введенный отчет не отображен в журнале, так как не соответствует отбору!");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов с предупреждением" Тогда
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяКолонка = ЭлементыФормы.ЖурналОтчетов.Колонки.Пометка Тогда
			ЭлементыФормы.ЖурналОтчетов.ТекущаяКолонка = ЭлементыФормы.ЖурналОтчетов.Колонки.НаименованиеОтчета;
		КонецЕсли;
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЖурналОтчетов;
		ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока = Параметр;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока = Неопределено ИЛИ ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока.Ссылка <> Параметр Тогда
			Предупреждение("Установленные отборы не позволяют позиционироваться на отчете!");
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Изменение сообщения" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ЭлементыФормы.ЦиклыОбменаФНС.ОбновитьСтроки(Параметр.ЦиклОбмена);
		ЭлементыФормы.ЦиклыОбменаПФР.ОбновитьСтроки(Параметр.ЦиклОбмена);
	ИначеЕсли ИмяСобытия = "Изменение цикла обмена" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		ТекДанные = ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные;
		Если ТекДанные <> Неопределено И КонтекстЭДО.ОтчетЯвляетсяПредметом(Параметр.Отчет, ТекДанные.Ссылка) Тогда
			УправлениеОтборамиТаблицыЦикловОбмена();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - действие кнопки СнятьПометкиУВсех командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовСнятьПометкиУВсех(Кнопка)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Ложь);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Ложь);
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - действие кнопки ПометитьВсе командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовПометитьВсе(Кнопка)
	
	ИзменитьПометкуПодчиненных(ДеревоОтчетов, Истина);
	ИзменитьПометкуПодчиненных(мПолноеДеревоОтчетов, Истина);
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - действие кнопки Добавить командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовДобавить(Кнопка)
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные <> Неопределено И Не ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФормуОтчета(ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки ИсторияВыгрузки командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовИсторияВыгрузки(Кнопка)
	
	Если ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные <> Неопределено Тогда
		мДокументОтбор = ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка;
		мОтбиратьПоДокументуОтбора = Истина;
		УстановитьПредставлениеДокументаОтбора();
		УстановитьПометкуКнопкиОтбиратьПоОтчету();
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ЖурналВыгрузки;
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки Обновить командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовОбновить(Кнопка)
	
	ОбновитьДеревоОтчетов();
	
КонецПроцедуры

// Процедура - действие кнопки Печать командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовПечать(Кнопка)
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
		ОтчетыДляПакетнойОбработки = ВыбранныйНаборОтчетов();
		Если ОтчетыДляПакетнойОбработки.Количество() = 0 И ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
			
	Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
		//Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
		//	ТекстВопроса = "Показать печатную форму отчета """ + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетыДляПакетнойОбработки.Получить(0).Значение) + """?";
		//Иначе
		//	ТекстВопроса = "Выбрано " + ОтчетыДляПакетнойОбработки.Количество() + " отчетов." + Символы.ПС + "Показать печатные формы выбранных отчетов?";
		//КонецЕсли;
		//Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РегламентированнаяОтчетность.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПоказатьБланк", ЭтаФорма, мПроверятьСоотношенияПриПечатиИВыгрузки);
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки ПечатьСразу командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовПечатьСразу(Кнопка)
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
		ОтчетыДляПакетнойОбработки = ВыбранныйНаборОтчетов();
		Если ОтчетыДляПакетнойОбработки.Количество() = 0 И ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
			
	Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
		Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
			ТекстВопроса = "Напечатать отчет """ + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетыДляПакетнойОбработки.Получить(0).Значение) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ОтчетыДляПакетнойОбработки.Количество() + " отчетов." + Символы.ПС + "Напечатать выбранные отчеты?";
		КонецЕсли;
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РегламентированнаяОтчетность.НапечататьОтчеты(ОтчетыДляПакетнойОбработки, "ПечататьСразу", ЭтаФорма, мПроверятьСоотношенияПриПечатиИВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки Сохранить командной панели КоманднаяПанельЖурналВыгрузки.
//
Процедура КоманднаяПанельЖурналВыгрузкиСохранить(Кнопка)
	
	Если ЭлементыФормы.ЖурналВыгрузки.ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Не выбран документ!");
		Возврат;
	КонецЕсли;
	
	ТекДок = ЭлементыФормы.ЖурналВыгрузки.ТекущиеДанные.Ссылка;
	Если ТекДок.Основная.Количество() = 0 Тогда
		Предупреждение("В выбранном документе нет текстов для сохранения в файл!");
		Возврат;
	КонецЕсли;
	
	ТекДок.ПолучитьФорму().СохранитьТексты(Истина);
	
КонецПроцедуры

// Процедура - действие кнопки Выгрузить командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовВыгрузить(Кнопка)
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
		ОтчетыДляПакетнойОбработки = ВыбранныйНаборОтчетов();
		Если ОтчетыДляПакетнойОбработки.Количество() = 0 И ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
			
	Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
		Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
			ТекстВопроса = "Выгрузить отчет """ + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетыДляПакетнойОбработки.Получить(0).Значение) + """?";
		Иначе
			ТекстВопроса = "Выбрано " + ОтчетыДляПакетнойОбработки.Количество() + " отчетов." + Символы.ПС + "Выгрузить выбранные отчеты?";
		КонецЕсли;
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если НЕ РегламентированнаяОтчетность.ВыгрузитьОтчеты(ОтчетыДляПакетнойОбработки) Тогда
				Предупреждение("Выгрузка прервана!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки Проверить командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовПроверить(Кнопка)
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
		ОтчетыДляПакетнойОбработки = ВыбранныйНаборОтчетов();
		Если ОтчетыДляПакетнойОбработки.Количество() = 0 И ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
			
	Если ОтчетыДляПакетнойОбработки.Количество() <> 0 Тогда
		//Если ОтчетыДляПакетнойОбработки.Количество() = 1 Тогда
		//	ТекстВопроса = "Проверить отчет """ + РегламентированнаяОтчетность.ПредставлениеДокументаРеглОтч(ОтчетыДляПакетнойОбработки.Получить(0).Значение) + """?";
		//Иначе
		//	ТекстВопроса = "Выбрано " + ОтчетыДляПакетнойОбработки.Количество() + " отчетов." + Символы.ПС + "Проверить выбранные отчеты?";
		//КонецЕсли;
		//Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если НЕ РегламентированнаяОтчетность.ПроверитьРегламентированныеОтчеты(ОтчетыДляПакетнойОбработки) Тогда
				Предупреждение("Проверка прервана!");
			КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки ПодробнееОФормах командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовПодробнееОФормах(Кнопка)
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Выберите отчет!");
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.ЭтоГруппа = Истина Тогда
		Предупреждение("Функция недоступна для группы отчетов!");
		Возврат;
	КонецЕсли;
	
	ФормаПодробнееОФормах = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ПодробнееОбОтчете");
	ФормаПодробнееОФормах.НачальноеЗначениеВыбора = ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Ссылка;
	ФормаПодробнееОФормах.ОткрытьМодально();
	
КонецПроцедуры

// Процедура - действие кнопки ИерархическийПросмотр командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовИерархическийПросмотр(Кнопка)
	
	мИерархическийПросмотр = НЕ мИерархическийПросмотр;
	Элементыформы.КоманднаяПанельДеревоОтчетов.Кнопки.ИерархическийПросмотр.Пометка = мИерархическийПросмотр;
	ОбновитьДеревоОтчетов();
	
КонецПроцедуры

// Процедура - действие кнопки Добавить командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовДобавить(Кнопка)
	
	ДобавлениеОтчетаВЖурналеОтчетов();
	
КонецПроцедуры

// Процедура - действие кнопки Открыть справочник командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыОткрытьСправочник(Кнопка)
	
	Справочники.РегламентированныеОтчеты.ПолучитьФормуСписка().Открыть();

КонецПроцедуры

// Процедура - действие кнопки Настройка справочник командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыНастройка(Кнопка)
	
	Если РегламентированнаяОтчетность.роПолучитьОбщуюФорму("УправлениеОтчетностьюФормаНастройки", ЭтаФорма).ОткрытьМодально() = Истина Тогда
		ОбновитьДеревоОтчетов();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - действие кнопки РазвернутьВсе справочник командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовРазвернутьВсе(Кнопка)
	
	Для Каждого Стр Из ДеревоОтчетов.Строки Цикл
		ЭлементыФормы.ДеревоОтчетов.Развернуть(Стр, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - действие кнопки СвернутьВсе справочник командной панели КоманднаяПанельДеревоОтчетов.
//
Процедура КоманднаяПанельДеревоОтчетовСвернутьВсе(Кнопка)
	
	Для Каждого Стр Из ДеревоОтчетов.Строки Цикл
		ЭлементыФормы.ДеревоОтчетов.Свернуть(Стр);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - действие кнопки ГрупповойРежим командной панели КоманднаяПанельЖурналОтчетов.
//
Процедура КоманднаяПанельЖурналОтчетовГрупповойРежим(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеВидимостьюЭУПакетногоРежима();
	
КонецПроцедуры

// Процедура - действие кнопки СнятьФлажкиУВсех командной панели КоманднаяПанельЖурналОтчетов.
// Обработчик назначается динамически в процедуре УправлениеВидимостьюЭУПакетногоРежима.
//
Процедура КоманднаяПанельЖурналОтчетовСнятьФлажкиУВсех(Кнопка)
	
	ВидимыеОтчеты = ВидимыйНаборОтчетов();
	КоличествоВыбранныхОтчетов = ВыбранныеОтчеты.Количество();
	Для Инд = 1 По КоличествоВыбранныхОтчетов Цикл
		ТекОтч = ВыбранныеОтчеты.Получить(КоличествоВыбранныхОтчетов - Инд).Значение;
		Если ВидимыеОтчеты.НайтиПоЗначению(ТекОтч) <> Неопределено Тогда
			ВыбранныеОтчеты.Удалить(КоличествоВыбранныхОтчетов - Инд);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ЖурналОтчетов.ОбновитьСтроки();
	
КонецПроцедуры

// Процедура - действие кнопки УстановитьФлажкиУВсех командной панели КоманднаяПанельЖурналОтчетов.
// Обработчик назначается динамически в процедуре УправлениеВидимостьюЭУПакетногоРежима.
//
Процедура КоманднаяПанельЖурналОтчетовУстановитьФлажкиУВсех(Кнопка)
	
	ВидимыеОтчеты = ВидимыйНаборОтчетов();
	Для Каждого Отч Из ВидимыеОтчеты Цикл
		Если ВыбранныеОтчеты.НайтиПоЗначению(Отч.Значение) = Неопределено Тогда
			ВыбранныеОтчеты.Добавить(Отч.Значение);
		КонецЕсли;
	КонецЦикла;
	ЭлементыФормы.ЖурналОтчетов.ОбновитьСтроки();
	
КонецПроцедуры

// Процедура - действие кнопки ИнформацияДляПользователей командной панели КоманднаяПанельФормы.
//
Процедура КоманднаяПанельФормыИнформацияДляПользователей(Кнопка)
	
	ПоказатьИнформациюДляПользователей(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ


// Процедура - обработчик события Выбор табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если НЕ ВыбраннаяСтрока.ЭтоГруппа Тогда
		//ОткрытьФормуОтчета(ВыбраннаяСтрока.ИсточникОтчета);
		Доки = ДокументыСУчетомКритериевОтбора();
		Если Доки <> 0 Тогда
			РезультатВыбора = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаВыбораОтчета", ЭтаФорма).ОткрытьМодально();
			Если РезультатВыбора = Истина Тогда // создаем новый отчет
				ОткрытьФормуОтчета(ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные);
			ИначеЕсли ЗначениеЗаполнено(РезультатВыбора) Тогда
				РезультатВыбора.ПолучитьФорму().Открыть();
			КонецЕсли;
		Иначе
			ОткрытьФормуОтчета(ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные);				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзмененииФлажка табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовПриИзмененииФлажка(Элемент, Колонка)
	
	АналогичнаяСтрокаПолногоДерева = ПолучитьСтрокуДереваПоСсылке(мПолноеДеревоОтчетов, ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Ссылка);
	Если ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Пометка = 2 Тогда
		ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Пометка = 0;
	КонецЕсли;
	АналогичнаяСтрокаПолногоДерева.Пометка = ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока.Пометка;
	ИзменитьПометкуПодчиненных(ЭлементыФормы.ДеревоОтчетов.ТекущаяСтрока, , , Истина, ДеревоОтчетов);
	ИзменитьПометкуПодчиненных(АналогичнаяСтрокаПолногоДерева, , , Истина, мПолноеДеревоОтчетов);
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Организация.
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("ФормаВыбораОрганизаций", ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбораИзСписка поля ввода Организация.
//
Процедура ОрганизацияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	Организации.Ссылка,
	                      |	Организации.ПометкаУдаления
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Организации.Наименование");
	СписокОрганизаций = Новый СписокЗначений;
	СписокОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка"));
	РезультатВыбора = ВыбратьИзСписка(СписокОрганизаций, Элемент, ?(Элемент.Значение.Количество() = 1, СписокОрганизаций.НайтиПоЗначению(Элемент.Значение.Получить(0).Значение), Неопределено));
	Если РезультатВыбора <> Неопределено Тогда
		Элемент.Значение.Очистить();
		Элемент.Значение.Добавить(РезультатВыбора.Значение);
		УстановитьОтборы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Открытие поля ввода Организация.
//
Процедура ОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.Значение.Количество() = 1 Тогда
		Элемент.Значение.Получить(0).Значение.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ОтборКодИФНС.
//
Процедура ОтборКодИФНСПриИзменении(Элемент)
	
	УстановитьОтборы();
	УправлениеЭлементамиОтбораПоКодуИФНС();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода КодИФНС.
//
Процедура КодИФНСПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ОтборПериод.
//
Процедура ОтборПериодПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетов(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеНадписямиМесяцев();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля выбора ПолеВыбораПериодичность.
//
Процедура ПолеВыбораПериодичностьПриИзменении(Элемент)
	
	ОбновитьДеревоОтчетов(Ложь);
	УправлениеЭлементамиОтбораПоПериоду();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаНачалаПериодаОтчета.
//
Процедура ДатаНачалаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаКонцаПериодаОтчета = ДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ДатаКонцаПериодаОтчета.
//
Процедура ДатаКонцаПериодаОтчетаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДатаНачалаПериодаОтчета) И ЗначениеЗаполнено(ДатаКонцаПериодаОтчета) И ДатаНачалаПериодаОтчета > ДатаКонцаПериодаОтчета Тогда
		ДатаНачалаПериодаОтчета = ДатаКонцаПериодаОтчета;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаНастройкиПериода.
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)
	
	ДиалогНастройкиПериода = Новый НастройкаПериода;
	ДиалогНастройкиПериода.УстановитьПериод(ДатаНачалаПериодаОтчета, КонецДня(ДатаКонцаПериодаОтчета));
	ДиалогНастройкиПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	ДиалогНастройкиПериода.РедактироватьКакПериод = Истина;
	ДиалогНастройкиПериода.РедактироватьКакИнтервал = Истина;
	Если ДиалогНастройкиПериода.Редактировать() Тогда
		ДатаНачалаПериодаОтчета = НачалоДня(ДиалогНастройкиПериода.ПолучитьДатуНачала());
		ДатаКонцаПериодаОтчета = КонецДня(ДиалогНастройкиПериода.ПолучитьДатуОкончания());
		УстановитьОтборы();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события ПриАктивизацииСтроки табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовПриАктивизацииСтроки(Элемент)
	
	Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные = Неопределено Тогда
		НадписьОписаниеОтчета = "";
	Иначе
		НадписьОписаниеОтчета = ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.Описание;
	КонецЕсли;
	Если ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.Добавить.Доступность = НЕ ЭлементыФормы.ДеревоОтчетов.ТекущиеДанные.ЭтоГруппа;
	Иначе
		ЭлементыФормы.КоманднаяПанельДеревоОтчетов.Кнопки.Добавить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриСменеСтраницы панели ОсновнаяПанель.
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломДобавления табличного поля ЖурналОтчетов.
//
Процедура ЖурналОтчетовПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если НЕ Копирование Тогда
		Отказ = Истина;
		ДобавлениеОтчетаВЖурналеОтчетов();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении полосы регулирования ПолосаРегулированияПериода.
//
Процедура ПолосаРегулированияПериодаПриИзменении(Элемент)
	
	ПриИзмененииМесяца();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода Год.
//
Процедура ГодПриИзменении(Элемент)
	
	ДатаКонцаПериодаОтчета = Дата(Год, Месяц(ДатаКонцаПериодаОтчета), День(КонецМесяца(Дата(Год, Месяц(ДатаКонцаПериодаОтчета), 1))));
	ДатаНачалаПериодаОтчета = НачалоГода(ДатаКонцаПериодаОтчета);
	ОбновитьДеревоОтчетов(Ложь);
	
КонецПроцедуры

// Процедура - обработчик событий Нажатие надписей НадписьМесяц1,  НадписьМесяц2, ... , НадписьМесяц12.
//
Процедура НадписьМесяц1Нажатие(Элемент)
	
	МесяцМинус1 = Число(Сред(Элемент.Имя, 13)) - 1;
	ПриИзмененииМесяца();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаОткрытьДокументОтбор.
//
Процедура КнопкаОткрытьДокументОтборНажатие(Элемент)
	
	Если ЗначениеЗаполнено(мДокументОтбор) Тогда
		мДокументОтбор.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаОчиститьДокументОтбор.
//
Процедура КнопкаОчиститьДокументОтборНажатие(Элемент)
	
	мДокументОтбор = Неопределено;
	мОтбиратьПоДокументуОтбора = Ложь;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьПредставлениеДокументаОтбора();
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении флажка ФлажокОтборПоОтчету.
//
Процедура ФлажокОтборПоОтчетуПриИзменении(Элемент)
	
	мОтбиратьПоДокументуОтбора = НЕ мОтбиратьПоДокументуОтбора;
	УстановитьПометкуКнопкиОтбиратьПоОтчету();
	УстановитьОтборы();
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля ЖурналОтчетов.
//
Процедура ЖурналОтчетовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Ссылки = Новый Массив;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.Период.УстановитьТекст(ПредставлениеПериода(ОформлениеСтроки.ДанныеСтроки.ДатаНачала, КонецДня(ОформлениеСтроки.ДанныеСтроки.ДатаОкончания), "ФП=Истина"));
		ОформлениеСтроки.Ячейки.Вид.УстановитьТекст(РегламентированнаяОтчетность.ПредставлениеВидаДокумента(ОформлениеСтроки.ДанныеСтроки.Вид));
		Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
			ОформлениеСтроки.Ячейки.Пометка.ОтображатьФлажок = Истина;
			ОформлениеСтроки.Ячейки.Пометка.Флажок = (ВыбранныеОтчеты.НайтиПоЗначению(ОформлениеСтроки.ДанныеСтроки.Ссылка) <> Неопределено);
		КонецЕсли;
		Ссылки.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	СоответствиеОтчетовСтатусам = Новый Соответствие;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВложенныйЗапрос.ОтчетСсылка КАК Отчет,
	|	ОтправкиФСС.СтатусОтправки КАК Статус
	|ПОМЕСТИТЬ втОтправкиФСС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтправкиФСС.ОтчетСсылка КАК ОтчетСсылка,
	|		МАКСИМУМ(ОтправкиФСС.ДатаОтправки) КАК ДатаОтправки
	|	ИЗ
	|		Справочник.ОтправкиФСС КАК ОтправкиФСС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ОтправкиФСС.ОтчетСсылка) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОтправкиФСС КАК ОтправкиФСС
	|		ПО (ОтправкиФСС.ОтчетСсылка = ВложенныйЗапрос.ОтчетСсылка)
	|			И (ОтправкиФСС.ДатаОтправки = ВложенныйЗапрос.ДатаОтправки)";
	Запрос.Выполнить();
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.СтатусыОтправки) Тогда
	
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	РегламентированныйОтчет.Ссылка КАК Отчет,
		               |	ВЫБОР
		               |		КОГДА СтатусыРегламентированныхОтчетов.Статус = &СтатусПодготовлен
		               |			ТОГДА ВЫБОР
		               |					КОГДА ЕСТЬNULL(СтатусыОтправки.Статус, ИСТИНА) = ИСТИНА
		               |							ИЛИ СтатусыОтправки.Статус = &ПустойСтатусОтправки
		               |						ТОГДА ВЫБОР
		               |								КОГДА ЕСТЬNULL(втОтправкиФСС.Статус, ИСТИНА) = ИСТИНА
		               |									ТОГДА &СтатусПодготовлен
		               |								ИНАЧЕ втОтправкиФСС.Статус
		               |							КОНЕЦ
		               |					ИНАЧЕ СтатусыОтправки.Статус
		               |				КОНЕЦ
		               |		ИНАЧЕ СтатусыРегламентированныхОтчетов.Статус
		               |	КОНЕЦ КАК РезультирующийСтатус
		               |ИЗ
		               |	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОтправки КАК СтатусыОтправки
		               |		ПО РегламентированныйОтчет.Ссылка = СтатусыОтправки.Объект
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРегламентированныхОтчетов КАК СтатусыРегламентированныхОтчетов
		               |		ПО РегламентированныйОтчет.Ссылка = СтатусыРегламентированныхОтчетов.Отчет
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втОтправкиФСС КАК втОтправкиФСС
		               |		ПО РегламентированныйОтчет.Ссылка = втОтправкиФСС.Отчет
		               |ГДЕ
		               |	РегламентированныйОтчет.Ссылка В(&Отчеты)";
		
		Запрос.УстановитьПараметр("СтатусСдан", Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
		Запрос.УстановитьПараметр("СтатусПодготовлен", Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
		Запрос.УстановитьПараметр("ПустойСтатусОтправки", Перечисления.СтатусыОтправки.ПустаяСсылка());
		Запрос.УстановитьПараметр("Отчеты", Ссылки);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйОтчет.Ссылка КАК Отчет,
		|	ВЫБОР
		|		КОГДА СтатусыРегламентированныхОтчетов.Статус = &СтатусПодготовлен
		|			ТОГДА ВЫБОР
		|					КОГДА ЕСТЬNULL(втОтправкиФСС.Статус, ИСТИНА) = ИСТИНА
		|						ТОГДА &СтатусПодготовлен
		|					ИНАЧЕ втОтправкиФСС.Статус
		|				КОНЕЦ
		|		ИНАЧЕ СтатусыРегламентированныхОтчетов.Статус КОНЕЦ КАК РезультирующийСтатус
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыРегламентированныхОтчетов КАК СтатусыРегламентированныхОтчетов
		|		ПО РегламентированныйОтчет.Ссылка = СтатусыРегламентированныхОтчетов.Отчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтправкиФСС
		|		ПО РегламентированныйОтчет.Ссылка = втОтправкиФСС.Отчет
		|ГДЕ
		|	РегламентированныйОтчет.Ссылка В(&Отчеты)";
		
		Запрос.УстановитьПараметр("СтатусСдан", Перечисления.СтатусыРегламентированныхОтчетов.Сдан);
		Запрос.УстановитьПараметр("СтатусПодготовлен", Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
		Запрос.УстановитьПараметр("Отчеты", Ссылки);
		
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеОтчетовСтатусам.Вставить(Выборка.Отчет, Выборка.РезультирующийСтатус);
	КонецЦикла;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ИндексКартинки = НомерКартинкиПоСтатусу[СоответствиеОтчетовСтатусам[ОформлениеСтроки.ДанныеСтроки.Ссылка]];
		Если ИндексКартинки = Неопределено Тогда
			ИндексКартинки = 0;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.Статус.ИндексКартинки = ИндексКартинки + Число(ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления = Истина) * 7;
		ОформлениеСтроки.Ячейки.Статус.ОтображатьКартинку = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля ЖурналВыгрузки.
//
Процедура ЖурналВыгрузкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.Период.УстановитьТекст(РегламентированнаяОтчетность.ПредставлениеПериодаДокументаВыгрузкаРегламентированныхОтчетов(ОформлениеСтроки.ДанныеСтроки.Ссылка));
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПриПолученииДанных табличного поля ДеревоОтчетов.
//
Процедура ДеревоОтчетовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Шрифт = Новый Шрифт(, , ОформлениеСтроки.ДанныеСтроки.ЭтоГруппа, , , ОформлениеСтроки.ДанныеСтроки.ПометкаУдаления);
		ОформлениеСтроки.Ячейки.Наименование.УстановитьТекст(ОформлениеСтроки.ДанныеСтроки.Наименование + ?(ОформлениеСтроки.ДанныеСтроки.Внешний = Истина, " (внешний)", ""));
		Если ОформлениеСтроки.ДанныеСтроки.Родитель = Неопределено И мИерархическийПросмотр Тогда
			ОформлениеСтроки.ЦветФона = мЦветПервогоУровняДерева;
		Иначе
			ОформлениеСтроки.ЦветФона = мЦветВторогоУровняДерева;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события ПриИзмененииФлажка табличного поля ЖурналОтчетов.
//
Процедура ЖурналОтчетовПриИзмененииФлажка(Элемент, Колонка)
	
	Если Колонка.Имя = "Пометка" Тогда
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ВыбранныеОтчеты.НайтиПоЗначению(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка) = Неопределено Тогда
			ВыбранныеОтчеты.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		Иначе
			ВыбранныеОтчеты.Удалить(ВыбранныеОтчеты.НайтиПоЗначению(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка));
		КонецЕсли;
		ЭлементыФормы.ЖурналОтчетов.ОбновитьСтроки(ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ПередНачаломИзменения табличного поля ЖурналОтчетов.
//
Процедура ЖурналОтчетовПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = (ЭлементыФормы.ЖурналОтчетов.ТекущаяКолонка.Имя = "Пометка");
	
КонецПроцедуры

// Процедура - обработчик события действия кнопка Календарь командной панели КоманднаяПанельФормы
//
Процедура КоманднаяПанельФормыКалендарь(Кнопка)

	//ФормаКалендаря = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("КалендарьБухгалтера", ЭтаФорма);
	ФормаКалендаря = Обработки.КалендарьБухгалтера.ПолучитьФорму("ФормаКалендаря", ЭтаФорма);
	Если ФормаКалендаря.Открыта() Тогда
		ФормаКалендаря.Активизировать();
	Иначе
		ФормаКалендаря.Показать(ДатаНачалаПериодаОтчета, ДатаКонцаПериодаОтчета, Периодичность = "Произвольный");
	КонецЕсли;

КонецПроцедуры

Процедура ДействияПриОткрытии()

	УстановитьОтборы();
	УправлениеЭлементамиОтбораПоПериоду();
	УправлениеЭлементамиОтбораПоКодуИФНС();
	УправлениеНадписямиМесяцев();
	ПоказатьПериод();
	ОбновитьПодсказкиЭлементовУправленияПериодом();
	УправлениеВидимостьюЭУПакетногоРежима();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ДействияПриОткрытии();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	Если ПараметрыОткрытия <> Неопределено Тогда
		Если ПрименитьПараметрыОткрытия() Тогда
			ВосстановитьСписокВыбранныхВидовОтчетов();
			ДействияПриОткрытии();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналВыгрузкиОбновить(Кнопка)
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыДоступныеОбновления(Кнопка)
	
	ПоказатьДоступныеОбновленияРегламентированнойОтчетности();
	
КонецПроцедуры

Процедура ПоказатьДоступныеОбновленияРегламентированнойОтчетности()
	
	РегламентированнаяОтчетность.ОткрытьФормуДоступныхОбновленийРО();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура ЖурналОтчетовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если РежимВыбора Тогда
		СтандартнаяОбработка = Ложь;
		ОповеститьОВыборе(ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЖурналОтчетовПриАктивизацииСтроки(Элемент)
	
	УправлениеОтборамиТаблицыЦикловОбмена();
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналОтчетовОтображатьСписокЦикловОбмена(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УправлениеПоказомТаблицыЦикловОбмена();
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналОтчетовПриИзмененииОтборовПоСтатусам(Кнопка)
	
	Если Кнопка = ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы Тогда
		Если НЕ Кнопка.Пометка Тогда
			Кнопка.Пометка = Истина;
			Для Каждого КнопкаОтбораПоСтатусу Из КнопкиОтбораПоСтатусам Цикл
				КнопкаОтбораПоСтатусу.Значение.Пометка = Ложь;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Кнопка.Пометка = Истина;
		Для Каждого КнопкаОтбораПоСтатусу Из КнопкиОтбораПоСтатусам Цикл
			Если КнопкаОтбораПоСтатусу.Значение.Пометка И КнопкаОтбораПоСтатусу.Значение <> Кнопка Тогда
				КнопкаОтбораПоСтатусу.Значение.Пометка = Ложь;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы.Пометка = Ложь;
	КонецЕсли;
	УстановитьКартинкуПодменюОтбораПоСтатусамОтчетов();
	
	УстановитьОтборы();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыВыбрать(Кнопка)
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
		ОповеститьОВыборе(ВыбранныйНаборОтчетов());
	Иначе
		ОповеститьОВыборе(ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыДокументыОтИФНС(Кнопка)
	
	Документы.НеформализованныйДокументНалоговогоОргана.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЖурналОбмена(Кнопка)
	
	Попытка
		КонтекстЭДО.ПолучитьФорму("УправлениеОбменом").Открыть();
	Исключение
		Предупреждение("Недостаточно прав!");
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельФормыИсходящиеДокументы(Кнопка)
	
	Документы.НеформализованныйДокументНалогоплательщика.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыЭлектронныеПредставленияОтчетов(Кнопка)
	
	Справочники.ЭлектронныеПредставленияРегламентированныхОтчетов.ПолучитьФормуСписка().Открыть();

КонецПроцедуры

Процедура УправлениеОтборамиТаблицыЦикловОбмена()
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Найти("ОтображатьСписокЦикловОбмена") <> Неопределено И ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ОтображатьСписокЦикловОбмена.Пометка Тогда
		
		ТекДанные = ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные;
		
		// определяем, циклы обмена с каким КО будут отображаться
		Если ТекДанные = Неопределено
		ИЛИ (ИсточникиОтчетовПФР.Найти(ТекДанные.ИсточникОтчета) = Неопределено И ИсточникиОтчетовФСС.Найти(ТекДанные.ИсточникОтчета) = Неопределено) Тогда
			
			// отображаются циклы обмена с ФНС
			ЭлементыФормы.ПанельОбмен.ТекущаяСтраница = ЭлементыФормы.ПанельОбмен.Страницы.СтраницаФНС;
			
			// устанавливаем отбор в таблице циклов обмена
			Если ТекДанные <> Неопределено Тогда
				ЦиклыОбменаФНС.Отбор.Предмет.Установить(ТекДанные.Ссылка);
			Иначе
				ЦиклыОбменаФНС.Отбор.Предмет.Установить(Документы.РегламентированныйОтчет.ПустаяСсылка());
			КонецЕсли;
			
			// регулируем доступность кнопки обмена
			ДоступностьКнопкиОбмена = Ложь;
			
			Если ТекДанные <> Неопределено Тогда
				ТекОрганизация = ТекДанные.Организация;
				Если НЕ ТекОрганизация.Пустая() И КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена().Найти(ТекОрганизация) <> Неопределено Тогда
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
					                      |	КОЛИЧЕСТВО(ИСТИНА)
					                      |ИЗ
					                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
					                      |ГДЕ
					                      |	ЦиклыОбмена.Предмет = &Отчет");
					Запрос.УстановитьПараметр("Отчет", ТекДанные.Ссылка);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Получить(0)) Тогда
						ДоступностьКнопкиОбмена = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДоступностьКнопкиОбмена Тогда
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаФНС.Кнопки.Обменяться.Доступность = Истина;
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаФНС.Кнопки.Обменяться.Подсказка = "Произвести обмен сообщениями по организации """ + ТекОрганизация + """";
			Иначе
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаФНС.Кнопки.Обменяться.Доступность = Ложь;
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаФНС.Кнопки.Обменяться.Подсказка = "";
			КонецЕсли;
			
		ИначеЕсли ИсточникиОтчетовПФР.Найти(ТекДанные.ИсточникОтчета) <> Неопределено Тогда
			
			// отображаются циклы обмена с ПФР
			ЭлементыФормы.ПанельОбмен.ТекущаяСтраница = ЭлементыФормы.ПанельОбмен.Страницы.СтраницаПФР;
			
			// устанавливаем отбор в таблице циклов обмена
			Если ТекДанные <> Неопределено Тогда
				ЦиклыОбменаПФР.Отбор.Ссылка.Использование = Ложь;
				ЦиклыОбменаПФР.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
				ЦиклыОбменаПФР.Отбор.Ссылка.Значение.ЗагрузитьЗначения(КонтекстЭДО.ПолучитьЦиклыОбменаПоОтчету(ТекДанные.Ссылка));
				ЦиклыОбменаПФР.Отбор.Ссылка.Использование = Истина;
			Иначе
				ЦиклыОбменаПФР.Отбор.Ссылка.Установить(Справочники.ЦиклыОбмена.ПустаяСсылка());
			КонецЕсли;
			
			// регулируем доступность кнопки обмена
			ДоступностьКнопкиОбмена = Ложь;
			
			Если ТекДанные <> Неопределено Тогда
				ТекОрганизация = ТекДанные.Организация;
				Если НЕ ТекОрганизация.Пустая() И КонтекстЭДО.СписокДопустимыхОрганизацийВОбъектахОбмена().Найти(ТекОрганизация) <> Неопределено Тогда
					Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
					                      |	КОЛИЧЕСТВО(ИСТИНА) КАК Поле1
					                      |ИЗ
					                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
					                      |ГДЕ
					                      |	ЦиклыОбмена.Предмет = &Отчет
					                      |	ИЛИ &Отчет В (ЦиклыОбмена.ДополнительныеПредметы.Предмет)");
					Запрос.УстановитьПараметр("Отчет", ТекДанные.Ссылка);
					Выборка = Запрос.Выполнить().Выбрать();
					Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.Получить(0)) Тогда
						ДоступностьКнопкиОбмена = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ДоступностьКнопкиОбмена Тогда
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаПФР.Кнопки.Обменяться.Доступность = Истина;
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаПФР.Кнопки.Обменяться.Подсказка = "Произвести обмен сообщениями по организации """ + ТекОрганизация + """";
			Иначе
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаПФР.Кнопки.Обменяться.Доступность = Ложь;
				ЭлементыФормы.КоманднаяПанельЦиклыОбменаПФР.Кнопки.Обменяться.Подсказка = "";
			КонецЕсли;
			
		ИначеЕсли ИсточникиОтчетовФСС.Найти(ТекДанные.ИсточникОтчета) <> Неопределено Тогда
			
			// отображаются циклы обмена с ФСС
			ЭлементыФормы.ПанельОбмен.ТекущаяСтраница = ЭлементыФормы.ПанельОбмен.Страницы.СтраницаФСС;
			
			// устанавливаем отбор в таблице циклов обмена
			Если ТекДанные <> Неопределено Тогда
				ОтправкиФСС.Отбор.ОтчетСсылка.Установить(ТекДанные.Ссылка);
			Иначе
				ОтправкиФСС.Отбор.ОтчетСсылка.Установить(Документы.РегламентированныйОтчет.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЦиклыОбменаФНС.Отбор.Предмет.Использование = Ложь;
		ЦиклыОбменаПФР.Отбор.Ссылка.Использование = Ложь;
		ОтправкиФСС.Отбор.ОтчетСсылка.Использование = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеПоказомТаблицыЦикловОбмена()
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Найти("ОтображатьСписокЦикловОбмена") <> Неопределено И ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ОтображатьСписокЦикловОбмена.Пометка Тогда
		Если ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			Возврат;
		КонецЕсли;
		ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОбмен.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ЖурналОтчетов.Высота = ЭлементыФормы.ЖурналОтчетов.Высота - ЭлементыФормы.РазделительЦиклыОбмена.Высота - ЭлементыФормы.ПанельОбмен.Высота;
		//ЭлементыФормы.ЖурналОтчетов.Верх = ЭлементыФормы.ЖурналОтчетов.Верх + ЭлементыФормы.РазделительЦиклыОбмена.Высота + ЭлементыФормы.ЦиклыОбмена.Высота;
		ЭлементыФормы.ЖурналОтчетов.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительЦиклыОбмена, ГраницаЭлементаУправления.Верх);
	Иначе
		Если ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Низ Тогда
			Возврат;
		КонецЕсли;
		ВерхняяКоордината = ЭлементыФормы.ПанельОбмен.Верх;
		ВысотаДоРасширения = ЭлементыФормы.ПанельОбмен.Высота;
		ЭлементыФормы.РазделительЦиклыОбмена.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.ПанельОбмен.Свертка = РежимСверткиЭлементаУправления.Низ;
		//ЭлементыФормы.ЖурналОтчетов.Верх = ВерхняяКоордината;
		ЭлементыФормы.ЖурналОтчетов.Высота = ЭлементыФормы.ЖурналОтчетов.Высота + ВысотаДоРасширения + ЭлементыФормы.РазделительЦиклыОбмена.Высота;
		//ЭлементыФормы.ЖурналОтчетов.Высота = ЭлементыФормы.ЖурналОтчетов.Высота + ВысотаДоРасширения;// - ВерхняяКоордината;
		ЭлементыФормы.ЖурналОтчетов.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ОсновнаяПанель, ГраницаЭлементаУправления.Низ);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКартинкуПодменюОтбораПоСтатусамОтчетов()
		
	Для Каждого КнопкаОтбораПоСтатусам Из ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки Цикл
		Если КнопкаОтбораПоСтатусам.ТипКнопки = ТипКнопкиКоманднойПанели.Действие И КнопкаОтбораПоСтатусам.Пометка Тогда
			ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Картинка = СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора[КнопкаОтбораПоСтатусам];
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЦиклыОбменаВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	КонтекстЭДО.ВыборВТабличномПолеЦикловОбмена(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЦиклыОбменаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КонтекстЭДО.ПриПолученииДанныхВТабличномПолеЦикловОбмена(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ОсновнаяКоманднаяПанельЗапросыНаИнформационноеОбслуживание(Кнопка)
	
	Документы.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельФормыУчетныеЗаписиДокументооборота(Кнопка)
	
	Справочники.УчетныеЗаписиДокументооборота.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельЖурналОтчетовОтправка(Кнопка)
	
	Если ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.ГрупповойРежим.Пометка Тогда
		ОтчетыДляПакетнойОбработки = ВыбранныйНаборОтчетов();
		Если ОтчетыДляПакетнойОбработки.Количество() = 0 И ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	Иначе
		ОтчетыДляПакетнойОбработки = Новый СписокЗначений;
		Если ЭлементыФормы.ЖурналОтчетов.ТекущаяСтрока <> Неопределено Тогда
			ОтчетыДляПакетнойОбработки.Добавить(ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	КонтекстЭДО.ОтправкаРегламентированныхОтчетов(ОтчетыДляПакетнойОбработки.ВыгрузитьЗначения(), СоответствиеИмениКнопкиПодменюОтправкаКодуДействия[Кнопка.Имя]);
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаОбменяться(Кнопка)
	
	ТекущиеДанные = ЭлементыФормы.ЖурналОтчетов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение("Выберите отчет в журнале отчетов.");
		Возврат;
	КонецЕсли;
	
	ВыбраннаяОрганизация = ТекущиеДанные.Организация;
	Если ВыбраннаяОрганизация.ВидОбменаСКонтролирующимиОрганами <> Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате Тогда
		Предупреждение("По организации """ + ВыбраннаяОрганизация + """ отчета не включена возможность электронного документооборота с ФНС в универсальном формате!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ВыбраннаяОрганизация.УчетнаяЗаписьОбмена) Тогда
		Предупреждение("Не выбрана учетная запись для обмена по организации """ + ВыбраннаяОрганизация + """!");
		Возврат;
	КонецЕсли;
	
	//ТекстВопроса = "Произвести обмен сообщениями по учетной записи """ + ВыбраннаяОрганизация + """?";
	//Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		КонтекстЭДО.ОсуществитьОбменСНалоговымОрганом(ВыбраннаяОрганизация);
	//КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаВывестиВОкно(Кнопка)
	
	ТекущийЦиклОбмена = ЭлементыФормы.ЦиклыОбменаФНС.ТекущиеДанные;
	Если ТекущийЦиклОбмена = Неопределено Тогда
		Предупреждение("Не выбран цикл обмена.");
	Иначе
		КонтекстЭДО.ПоказатьДокументыЦикловОбмена(ТекущийЦиклОбмена.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаПоказатьОтчетОСостоянии(Кнопка)
	
	ТекущийЦиклОбмена = ЭлементыФормы.ЦиклыОбменаФНС.ТекущиеДанные;
	Если ТекущийЦиклОбмена = Неопределено Тогда
		Предупреждение("Не выбран цикл обмена.");
	Иначе
		КонтекстЭДО.ПоказатьОтчетыОСостоянииЦикловОбмена(ТекущийЦиклОбмена.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаВыгрузить(Кнопка)
	
	ВыгрузитьТекущийЦиклОбмена(Истина, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаВыгрузитьКонтейнеры(Кнопка)
	
	ВыгрузитьТекущийЦиклОбмена(Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаВыгрузитьСодержимое(Кнопка)
	
	ВыгрузитьТекущийЦиклОбмена(Ложь, Истина);
	
КонецПроцедуры

Процедура ВыгрузитьТекущийЦиклОбмена(ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	ТекущийЦиклОбмена = ЭлементыФормы.ЦиклыОбменаФНС.ТекущиеДанные;
	Если ТекущийЦиклОбмена = Неопределено Тогда
		Предупреждение("Не выбран цикл обмена.");
	Иначе
		Если КонтекстЭДО.ВыгрузитьЦиклыОбмена(ТекущийЦиклОбмена.Ссылка, ВыгружатьКонтейнеры, ВыгружатьСодержимое) Тогда
			Предупреждение("Выгрузка завершена.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаПФРПоказатьОтчетОСостоянии(Кнопка)
	
	ТекущийЦиклОбмена = ЭлементыФормы.ЦиклыОбменаПФР.ТекущиеДанные;
	Если ТекущийЦиклОбмена = Неопределено Тогда
		Предупреждение("Не выбран цикл обмена.");
	Иначе
		КонтекстЭДО.ПоказатьОтчетыОСостоянииЦикловОбмена(ТекущийЦиклОбмена.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаПФРВыгрузить(Кнопка)
	
	ВыгрузитьТекущийЦиклОбменаПФР(Истина, Истина);
	
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаПФРВыгрузитьКонтейнеры(Кнопка)
	
	ВыгрузитьТекущийЦиклОбменаПФР(Истина, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаПФРВыгрузитьСодержимое(Кнопка)
	
	ВыгрузитьТекущийЦиклОбменаПФР(Ложь, Истина);
	
КонецПроцедуры

Процедура ВыгрузитьТекущийЦиклОбменаПФР(ВыгружатьКонтейнеры, ВыгружатьСодержимое)
	
	ТекущийЦиклОбмена = ЭлементыФормы.ЦиклыОбменаПФР.ТекущиеДанные;
	Если ТекущийЦиклОбмена = Неопределено Тогда
		Предупреждение("Не выбран цикл обмена.");
	Иначе
		Если КонтекстЭДО.ВыгрузитьЦиклыОбмена(ТекущийЦиклОбмена.Ссылка, ВыгружатьКонтейнеры, ВыгружатьСодержимое) Тогда
			Предупреждение("Выгрузка завершена.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельЦиклыОбменаПФРВывестиВОкно(Кнопка)
	
	ТекущийЦиклОбмена = ЭлементыФормы.ЦиклыОбменаПФР.ТекущиеДанные;
	Если ТекущийЦиклОбмена = Неопределено Тогда
		Предупреждение("Не выбран цикл обмена.");
	Иначе
		КонтекстЭДО.ПоказатьДокументыЦикловОбмена(ТекущийЦиклОбмена.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтправкиФССПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КрасныйЦвет					= Новый Цвет(255, 0, 0);
	
	ЗеленыйШар					= БиблиотекаКартинок.ЗеленыйШар;
	СерыйШар					= БиблиотекаКартинок.СерыйШар;
	
	СтатусОтправлен				= Перечисления.СтатусыОтправки.Отправлен;
	СтатусСдан 					= Перечисления.СтатусыОтправки.Сдан;
	СтатусНеПринят				= Перечисления.СтатусыОтправки.НеПринят;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.ПервичноеСообщение.Картинка = ЗеленыйШар;
		
		Если ОформлениеСтроки.ДанныеСтроки.СтатусОтправки = СтатусОтправлен Тогда
			ОформлениеСтроки.Ячейки.ДатаПолученияРезультата.УстановитьТекст("Не завершена");
			ОформлениеСтроки.Ячейки.Результат.Картинка = СерыйШар;
			ОформлениеСтроки.Ячейки.Результат.ГиперСсылка = Ложь;
		Иначе
			ОформлениеСтроки.Ячейки.Результат.Картинка = ЗеленыйШар;
			ОформлениеСтроки.Ячейки.Результат.ГиперСсылка = Истина;
			ОформлениеСтроки.Ячейки.Результат.Текст = "Гиперссылка";
			
			Если ОформлениеСтроки.ДанныеСтроки.СтатусОтправки = СтатусНеПринят Тогда
				ОформлениеСтроки.Ячейки.ДатаОтправки.ЦветТекста = КрасныйЦвет;
				ОформлениеСтроки.Ячейки.ДатаПолученияРезультата.ЦветТекста = КрасныйЦвет;
			КонецЕсли;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.ПервичноеСообщение.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.Результат.ОтображатьКартинку = Истина;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОтправкиФССВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ИмяКолонки = Колонка.Имя;
	Статус = ВыбраннаяСтрока.СтатусОтправки;
	
	Если ИмяКолонки = "Результат" Тогда
		СтандартнаяОбработка = Ложь;
		Если Статус <> Перечисления.СтатусыОтправки.Отправлен Тогда
			// покажем протокол
			ЗаголовокПротокола = "Протокол обработки";
			
			РегламентированнаяОтчетность.ПоказатьПротоколОбработки(ВыбраннаяСтрока.Ссылка.Протокол.Получить(), ЗаголовокПротокола);
			
		КонецЕсли;
		
	ИначеЕсли ИмяКолонки = "ПервичноеСообщение" Тогда
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ЖурналОтчетов.Колонки.Добавить("ДатаНачала");
ЖурналОтчетов.Колонки.Добавить("ДатаОкончания");
ЖурналОтчетов.Колонки.Добавить("ИсточникОтчета");

// ЖурналВыгрузки.Колонки.Добавить("ПериодС");
ЖурналВыгрузки.Колонки.Добавить("ПериодПо");

мЦветПервогоУровняДерева = Новый Цвет(242, 253, 252);
мЦветВторогоУровняДерева = Новый Цвет(255, 255, 255);

мПолноеДеревоОтчетов = ДеревоОтчетов.Скопировать();

МассивНаименованийПравыхГраницПериода = Новый Массив;
МассивНаименованийПравыхГраницПериода.Добавить("января");
МассивНаименованийПравыхГраницПериода.Добавить("февраля");
МассивНаименованийПравыхГраницПериода.Добавить("I-го квартала");
МассивНаименованийПравыхГраницПериода.Добавить("апреля");
МассивНаименованийПравыхГраницПериода.Добавить("мая");
МассивНаименованийПравыхГраницПериода.Добавить("I-го полугодия");
МассивНаименованийПравыхГраницПериода.Добавить("июля");
МассивНаименованийПравыхГраницПериода.Добавить("августа");
МассивНаименованийПравыхГраницПериода.Добавить("III-го квартала");
МассивНаименованийПравыхГраницПериода.Добавить("октября");
МассивНаименованийПравыхГраницПериода.Добавить("ноября");
МассивНаименованийПравыхГраницПериода.Добавить("года");

ВыбранныеОтчеты = Новый СписокЗначений;

ИдКонф = РегламентированнаяОтчетность.ИДКонфигурации();
Если ИдКонф = "ББУ" ИЛИ ИдКонф = "БГУ" Тогда
	Заголовок = "Налоговая и статистическая отчетность";
КонецЕсли;

////////////////////////////////////////////////////////////////////////////////

НомерКартинкиПоСтатусу = Новый Соответствие;
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе, 0);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен, 1);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыОтправки.ВКонверте, 2);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыОтправки.Отправлен, 3);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыОтправки.Доставлен, 4);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыОтправки.НеПринят, 5);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыОтправки.Сдан, 6);
НомерКартинкиПоСтатусу.Вставить(Перечисления.СтатусыРегламентированныхОтчетов.Сдан, 6);

КнопкиОтбораПоСтатусам = Новый СписокЗначений;
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВРаботе);
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Подготовлен);
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВКонверте);
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Отправлен);
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Доставлен);
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.НеПринят);
КнопкиОтбораПоСтатусам.Добавить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Сдан);

СоответствиеКнопокСтатусам = Новый Соответствие;
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВРаботе, Перечисления.СтатусыРегламентированныхОтчетов.ВРаботе);
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Подготовлен, Перечисления.СтатусыРегламентированныхОтчетов.Подготовлен);
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВКонверте, Перечисления.СтатусыОтправки.ВКонверте);
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Отправлен, Перечисления.СтатусыОтправки.Отправлен);
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Доставлен, Перечисления.СтатусыОтправки.Доставлен);
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.НеПринят, Перечисления.СтатусыОтправки.НеПринят);
СоответствиеКнопокСтатусам.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Сдан, Перечисления.СтатусыРегламентированныхОтчетов.Сдан);

ЦиклыОбменаФНС.Колонки.Добавить("Тип");
ЦиклыОбменаФНС.Колонки.Добавить("УчетнаяЗапись");
ЦиклыОбменаФНС.Колонки.Добавить("ФорматДокументооборота");

ЦиклыОбменаПФР.Колонки.Добавить("Тип");
ЦиклыОбменаПФР.Колонки.Добавить("УчетнаяЗапись");
ЦиклыОбменаПФР.Колонки.Добавить("ФорматДокументооборота");

ОтправкиФСС.Колонки.Добавить("ОтчетСсылка");
ОтправкиФСС.Колонки.Добавить("СтатусОтправки");

СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора = Новый Соответствие;
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВсеСтатусы, БиблиотекаКартинок.ОтборПоСтатусамНеУстановлен);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВРаботе, БиблиотекаКартинок.ОтборПоСтатусуВРаботе);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Подготовлен, БиблиотекаКартинок.ОтборПоСтатусуПодготовлен);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.ВКонверте, БиблиотекаКартинок.ОтборПоСтатусуВКонверте);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Отправлен, БиблиотекаКартинок.ОтборПоСтатусуОтправлен);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Доставлен, БиблиотекаКартинок.ОтборПоСтатусуДоставлен);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.НеПринят, БиблиотекаКартинок.ОтборПоСтатусуНеПринят);
СоответствиеКнопкиОтбораПоСтатусамКартинкеОтбора.Вставить(ЭлементыФормы.КоманднаяПанельЖурналОтчетов.Кнопки.Статусы.Кнопки.Сдан, БиблиотекаКартинок.ОтборПоСтатусуСдан);

СоответствиеИмениКнопкиПодменюОтправкаКодуДействия = Новый Соответствие;
СоответствиеИмениКнопкиПодменюОтправкаКодуДействия.Вставить("Подготовить", 0);
СоответствиеИмениКнопкиПодменюОтправкаКодуДействия.Вставить("ПодготовитьИПодписать", 1);
СоответствиеИмениКнопкиПодменюОтправкаКодуДействия.Вставить("Отправить", 2);

ИсточникиОтчетовПФР = Новый Массив;
ИсточникиОтчетовПФР.Добавить("РегламентированныйОтчетРСВ1");
ИсточникиОтчетовПФР.Добавить("РегламентированныйОтчетРСВ2");
ИсточникиОтчетовПФР.Добавить("РегламентированныйОтчетРВ3");

ИсточникиОтчетовФСС = Новый Массив;
ИсточникиОтчетовФСС.Добавить("РегламентированныйОтчет4ФСС");

////////////////////////////////////////////////////////////////////////////////
