Перем мСоответствиеИмен;
Перем ТаблицаГраницПоследовательности;

//////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьОбновление() Экспорт
	
	// Подготовка к выводу формы описания обновлений.

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");
	ДокументОписаниеОбновлений = Новый ТабличныйДокумент;
	ДокументОписаниеОбновлений.Очистить();

	// Перед обновлением требуется снять дату запрета изменения данных
	ПараметрыСеанса.ГраницыЗапретаИзмененияДанных = Новый ХранилищеЗначения(Неопределено, Новый СжатиеДанных(0));
	
	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
		
	//Вызов функций заполнения данных для пустой информационной базы
	Если ТекущаяВерсияИБ = "" Тогда
		Если ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел()) Тогда
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
			
		Иначе
			Если РольДоступна("ПолныеПрава") Тогда
				#Если Клиент Тогда
					
					ФормаСтартовогоПомощника = ПолучитьОбщуюФорму("НачалоРаботы");
					ФормаСтартовогоПомощника.ПервыйЗапуск = Истина;
					ФормаСтартовогоПомощника.Открыть();
					
				#Иначе
					ФормаСтартовогоПомощника = Неопределено;
				#КонецЕсли
			Иначе
				ОбщегоНазначения.СообщитьИнформациюПользователю("Обнаружен первый запуск информационной базы. Выполняется начальное заполнение");
			КонецЕсли;
			
			НачатьТранзакцию();
			
			ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений, ФормаСтартовогоПомощника);
			
			// Установка номера версии информационной базы
			Константы.НомерВерсииКонфигурации.Установить(Метаданные.Версия); // после заполнения пустой ИБ установим последний номер версии
			
			ЗафиксироватьТранзакцию();
			
			Если Константы.НомерВерсииКонфигурации.Получить() = Метаданные.Версия Тогда
				Если ФормаСтартовогоПомощника.Открыта() Тогда
					#Если Клиент Тогда				
						ФормаСтартовогоПомощника.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ФормаСтартовогоПомощника.ЭлементыФормы.ОсновнаяПанель.Страницы.НачалоРаботы;
					#КонецЕсли
				Иначе
					ОбщегоНазначения.СообщитьИнформациюПользователю("Начальное заполнение информационной базы выполнено успешно.");
					Если НЕ РольДоступна("ПолныеПрава") Тогда
						ОбщегоНазначения.СообщитьОбОшибке("Недостаточно прав для запуска стартового помощника.");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Возврат;
		
	КонецЕсли;
	
	НачальныйРелизИБ = ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ);
	
	// {КОРП
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "1.0.1.1";

	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.1")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		 
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		
		// Установка субконто "Документы расчетов с контрагентами" на счетах расчетов (60, 62, 76)
		УстановитьУчетПоДокументамНаСчетахРасчетов();
		
		ЗаполнитьСправочникВидыКонтактнойИнформации();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		 
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.2.7";

	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.2" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.2" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "1.0.1")
		 И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		 
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		
		УстановитьУчетНаСчетахУчетаЗарплаты();
		
		// Заполнить список конфигураций на платформе 7.7
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		ОбновитьСтавкиДля2009Года();
		ОбновитьРазмерыИСтавки();
		
		УстановитьСтавкуРефинансирования(13, '20081201');
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		 
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.3.2";

	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.3" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.2")
		 И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		 
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		
		//Для всех регистров накоплений был разрешен режим разделения итогов - требуется его включить.
		ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
		
		ПометитьНаУдалениеНастройкиОтчетовДляРуководителя();
		
		// Заполнить список конфигураций предыдущих версий
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		УстановитьСтавкуРефинансирования(12.5, '20090424');
		УстановитьСтавкуРефинансирования(12,   '20090514');
		
		ВключитьМеханизмОнлайнСервисовРО();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("203", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда

			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		 
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.5.2";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.5" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.4"
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.3")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		УстановитьСтавкуРефинансирования(11.5,   '20090605');
		
		// Установка сокращенного наименования организаций
		ОбновитьСправочникОрганизацииНаименование();
		
		// Обновление счетов-фактур на авансы за 2009 год, установка нового параметра учетной политики
		ОбновитьСчетаФактурыВыданныеНаАвансИУП();
		
		// Установка нового реквизита учетной политики ИП
		УстановитьРеквизитУчетнойПолитикиИП();
		
		// Обновление настроек пользователей
		ОбновитьНастройкиПользователей();
		
		//Автозаполнение новых реквизитов справочника сотрудники
		ОбновитьСправочникСотрудники();
		
		// Регистрация документов в последовательностях
		РегистрацияДокументовВПоследовательности();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("205", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;

	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.6.3";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.6" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.5")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// Запомним текущие границы последовательностей
		ЗапомнитьГраницыПоследовательностей();

		// Установим значения новых констант
		Константы.ЕстьПроизводственнаяДеятельность.Установить(Истина);
		Константы.ЕстьРозничнаяТорговля.Установить(Истина);
		
		// Заполнение справочника Корреспонденций
		ЗаполнитьСправочникКорреспонденций();		
	
		ОбновитьСохраненныеНастройкиСтандартныхОтчетовВСвязиСДобавлениемВыводаДиаграммы();
		
		УдалитьНастройкиПользователейПомеченныеНаУдаление();
		
		//Заполнение новых реквизитов, сохранение результатов проведения
		ОбновитьДокументыУчетаЗарплатыИКадров();
		
		УстановитьСтавкуРефинансирования(11,   '20090713');
		УстановитьСтавкуРефинансирования(10.75, '20090810');
		
		//Автозаполнение нового реквизита "СпособЗаполнения" документа "Операция (бухгалтерский и налоговый учет)"
		ОбновитьДокументыОперация();
		
		// Движения документов ЗакрытиеМесяца и РасчетДолейСписанияКосвенныхРасходов переносятся 
		// в документы "Операция (бухгалтерский и налоговый учет)", а старые документы удаляются из информационной базы
		ПеренестиДвиженияСтарыхРегламентныхДокументовВОперацииВведенныеВручную();
		
		// Движения документов Корректировка записей регистров переносятся 
		// в документы "Операция (бухгалтерский и налоговый учет)" при переходе на 2.0.6,
		// а старые документы помечаются на удаление
		ПеренестиДвиженияКорректировкиЗаписейРегистровВОперацииВведенныеВручную();
		
		//Всем записям учетной политики устанавливается настройка "При отсутствии выпуска прямые расходы считать расходами НЗП"
		ЗаполнитьУчетнуюПолитикуПоСпособуУчетаНЗП();
		
		ЗагрузитьНастройкиОтчетов();
		
		// Заполнение чеклиста помощника начала работы.
		Чеклист = Новый Массив;
		Чеклист.Добавить("Организации2");
		Чеклист.Добавить("НастройкаПараметровУчета2");
		Чеклист.Добавить("УчетнаяПолитикаОрганизаций2");
		Чеклист.Добавить("ПодразделенияОрганизаций1");
		Чеклист.Добавить("СтатьиЗатрат");
		Чеклист.Добавить("Номенклатура2");
		Чеклист.Добавить("НоменклатурныеГруппы");
		Чеклист.Добавить("Склады1");
		Чеклист.Добавить("Контрагенты4");
		Чеклист.Добавить("СпособыОтраженияРасходовПоАмортизации3");
		Чеклист.Добавить("ОсновныеСредства1");
		Чеклист.Добавить("СпособыОтраженияЗарплатыВРеглУчете1");
		Чеклист.Добавить("СотрудникиОрганизаций");
		Чеклист.Добавить("ВводНачальныхОстатков2");
		ХранилищеЧеклиста = Новый ХранилищеЗначения(Чеклист);
		Константы.ГотовностьПрограммыКРаботе.Установить(ХранилищеЧеклиста);
		
		// Восстановим границы последовательностей, сбитые при обработке регистра бухгалтерии, в исходные значения
		ВосстановитьГраницыПоследовательностей();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("206", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// }КОРП
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.7.4";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.7" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.6")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// {КОРП
		
		УстановитьСтавкуРефинансирования(10.5, '20090915');
		
		// Обновление справочника "Сохраненные настройки"
		ОбновитьСохраненныеНастройкиСтандартныхОтчетовВСвязиСДобавлениемОтбораОСВ();
		
		// Запомним текущие границы последовательностей
		ЗапомнитьГраницыПоследовательностей();

		// Переименование отчета УСН в журнале отчетов
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегламентированныйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.ИсточникОтчета = ""РегламентированныйОтчетУСН""");
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекДок = Выборка.Ссылка;
				ДокОбъект = ТекДок.ПолучитьОбъект();
				ДокОбъект.НаименованиеОтчета = "Декларация по УСН";
				ДокОбъект.Записать();
			КонецЦикла;
		КонецЕсли;

		// Заполнение новых реквизитов документов, связанных с изменениями механизмов зачета авансов и распределения оплат
		ЗаполнитьРеквизитыДляЗачетаАвансовИРаспределенияОплат();
		ЗаполнитьСчетаРасчетовРеализацииОтгруженныхТоваров();
		
		// Восстановим границы последовательностей, сбитые при обработке регистра бухгалтерии, в исходные значения
		ВосстановитьГраницыПоследовательностей();
		
		// Обновление справочника Корреспонденций
		ОбновитьСодержаниеСправочникаКорреспонденций();	
		
		// Перенос кодов из реквизита ссылочного типа в реквизит строкового типа
		ПеренестиКодыОКАТОСправочникаРегистрацияВИФНС();
		
		// }КОРП

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("207", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.8.2";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.8" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.7")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		УстановитьСтавкуРефинансирования(10, '20090930');
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("208", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.9.5";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.9" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.8")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		УстановитьСтавкуРефинансирования(9.5, '20091030');
		УстановитьСтавкуРефинансирования(9, '20091125');
		
		// Заполнить список конфигураций предыдущих версий
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		//Замена ЕСН
		ЗаполнитьВидыДоходовПоСтраховымВзносам();
		ЗаполнитьСведенияОТарифахСтраховыхВзносов();
		ВписатьНалоговыйПериодВОперацию();
		ПреобразоватьКодЕСНвКодПоСтраховымВзносам();
		СоздатьЗаписиУчетнойПолитики();
		ЗагрузитьНастройкиОтчетов();
		
		//Обновление плана счетов
		ЗаполнениеКодовБыстрогоВыбора(Истина);
		
		СчетОбъект = ПланыСчетов.Хозрасчетный.ПФР_ДОБР.ПолучитьОбъект();
		СчетОбъект.ЗапретитьИспользоватьВПроводках = Истина;
		СчетОбъект.Записать();
		
		// Обработка новой статьи РБП
		ОбработатьНовыеСтатьиРБП();
		
		// Заполнение справочника Корреспонденций
		ЗаполнитьСправочникКорреспонденций();		
		ОбновитьСодержаниеСправочникаКорреспонденций();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("209", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.10.2";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.10" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.9")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		ОбновитьПлатежныеПорученияНаПеречислениеВБюджет();
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		УстановитьСтавкуРефинансирования(8.75, '20091228');
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2010", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.11.3";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.11" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.10")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		
		// Процесс обновления регистра сведений "ТорговоеОборудование"
		ВыполнитьОбновлениеРегистраСведенийТорговоеОборудование();

		ВыполнитьОбновлениеИсторииСохраненныхНастроекСтандартныхОтчетов();
		
		УстановитьСтавкуРефинансирования(8.5, '20100224');
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2011", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.12.4";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.12" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.11")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		ЗаполнениеКодовБыстрогоВыбора(Истина);
		
		УстановитьСтавкуРефинансирования(8.25, '20100329');

		ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();

		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2012", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.13.5";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.13" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.12")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		ЗаполнитьВедениеРозницы();
		
		ЗаполнитьНовыеРегистрыСтавокНалогаНаПрибыль();
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		ЗаполнениеКодовБыстрогоВыбора(Истина);
		
		ЗагрузитьНастройкиОтчетов();
		
		УстановитьСтавкуРефинансирования(8, '20100430');
		УстановитьСтавкуРефинансирования(7.75, '20100601');
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2013", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.14.8";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.14" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.13")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		ОбновлениеКодовДоходовВычетовНДФЛдля2010года();
		ОбновлениеДокументовПерсучета2010();
		
		ОбновлениеОбъектовЭДОсКО();
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		КодыПерсучета2010();
        
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2014", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.15.6";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.15" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.14")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		КодыПерсучета2010();
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		// заполнение реквизита Вид справочника ЦиклыОбмена
		ЗаполнитьВидЦикловОбмена();
		
		// установка признака Оплачено в платежных поручениях
		ЗаполнитьПризнакОплаченоПлатежныхПоручений();
		
		// Добавление сортировки по Периоду в отчетах Карточка счета, Карточка субконто, Отчет по проводкам.
		ВыполнитьОбновлениеСохраненныхНастроекСтандартныхОтчетовДобавлениеСортировкиПоПериоду();
		
		// установка контроля последовательности проведения
		Константы.КонтролироватьПоследовательностьПроведения.Установить(Истина); 
		
		// Заполнение справочника Корреспонденций
		ЗаполнитьСправочникКорреспонденций();
		ОбновитьСодержаниеСправочникаКорреспонденций();
		
		ОбновитьНаименованиеСчета1905();
		ОбновитьНаименованиеСчетовПоНалогообложению();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2015", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.16.1";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.15")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		ОбновлениеОбъектовОбменаСФНСПриПереходеНаФормат535();
			
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2016", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.17.7";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.16")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		ОбновитьСправочникПрочиеДоходыИРасходы();
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2017", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.18.2";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.17")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2018", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.19.13";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.18")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// Дополнение справочника СпособыОтраженияЗарплатыВРеглУчете по счету 97.01
		ДополнитьСпособыОтраженияЗарплатыВРеглУчетеПоСчету97();
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		// Заполнение справочника Корреспонденций
		ЗаполнитьСправочникКорреспонденций();
		ОбновитьСодержаниеСправочникаКорреспонденций();
		
		СнятьФлагНУСтатьиКурсовыеРазницыПоРасчетамВУЕ();
		
        ОбновлениеКодовДоходовВычетовНДФЛдля2011года();
		ЗаполнитьСведенияОТарифахСтраховыхВзносов();
        ПереносСведенийОРезидентстве();
		ПереносДанныхСтраховыхВзносовПоЕНДВ();
		
		ЗаполнениеКодовБыстрогоВыбора(Истина);
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2019", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.20.9";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		УстановитьСтавкуРефинансирования(8, '20110228');
		
		ЗаполнитьСписокКонвертируемыхКонфигураций();
		
		// Дополнение документов "Принятие к учету ОС"
		ДополнитьДокументыПринятиеКУчетуОССпособомОтраженияРасходовПриСписании();		
		
		Если ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.19" Тогда
			ОбновитьВычетыПоКоду2761();
		КонецЕсли;
		
		// здесь обновляем предопределенные данные
		ОписатьВидДоходаПоСтраховымВзносам(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору,			Ложь,	Истина,	Истина);	// ПФР , ФСС, ФОМС
		ОписатьВидДоходаПоСтраховымВзносам(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору,Ложь,	Ложь,	Истина); 	// ПФР , ФСС, ФОМС
		ЗаполнитьСведенияОТарифеНародныеХудожественныеПромыслы();
		ЗарегистрироватьРасчетыНалоговогоАгента();
		ЗагрузитьНастройкиОтчетов();
		
		// Обработка новых счетов 83 и 96
		СчетОбъект = ПланыСчетов.Хозрасчетный.ПриростСтоимостиИмуществаПоПереоценке.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = "";
		Попытка
			СчетОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета 83.01.1, рекомендуется установить самостоятельно");
		КонецПопытки;
		
		СчетОбъект = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов.ПолучитьОбъект();
		СчетОбъект.КодБыстрогоВыбора = "";
		Попытка
			СчетОбъект.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета 96.02, рекомендуется установить самостоятельно");
		КонецПопытки;
		
		УстановитьПараметрыСчетовБУ();
		ЗаполнениеКодовБыстрогоВыбора(Истина);
		ЗаполнитьСправочникКорреспонденций();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2020", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.21.2";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.20")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2021", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.22.2";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.22" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.21")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2022", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.23.9";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.23" 
		Или ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.22")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		УстановитьСтавкуРефинансирования(8.25, '20110503');
        		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2023", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.24.10";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.24" 
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.23")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		        
		ЗаполнениеКодовБыстрогоВыбора(Истина);
		
		// {КОРП
		ОбработкаДокументовДепонирования();
		// }КОРП

        УстановитьРеквизитУчетнойПолитикиНДСпоОтгрузкеНедвижимости();
        
        ДополнитьСправочникПрочиеДоходыИРасходы(
        "Расходы по передаче товаров (работ, услуг) безвозмездно и для собственных нужд",
        Перечисления.ВидыПрочихДоходовИРасходов.РасходыПоПередачеТоваровБезвозмездноИДляСобственныхНужд,
        Ложь,
        Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД);		
		
		ОбновитьВидОперацииПоРасчетамСФондами();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2024", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.25.5";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.25" 
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.24")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		        
		УстановитьФорматыЭДОуОбъектовНФДиИОН141();
                
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2025", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.26.8";
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.26" 
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.25")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// {КОРП
		Константы.ГотовностьИнформационнойБазыКРаботе.Установить(Истина); 
		ОбработкаРеквизитовМестонахождение();		
		// }КОРП
		
		ОбновитьСохраненныеНастройкиСтандартныхОтчетовДобавлениеГруппировкиКорПодразделенияАнализСчета();
		ВыполнитьОбновлениеСохраненныхНастроекСтандартныхОтчетовДобавлениеАвтоотступа();
		
		Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);
		
		ПроверитьНачислениеНДСпоСуммовымРазницамПосле01102011();
    		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2026", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
                  	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = "2.0.27.10";
    
    Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.27" 
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.26")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
				
		// Установка аналитики на субсчетах 57 счета
		ПрименитьПараметрыДляСчетовДенежныхСредств();
        
		// Замена счета я96.01 на 96 в документах "Отражение зарплаты в рег.учете" и "Операция (бухгалтерский и налоговый учет)
		ЗаменаУдаленного96счета();
        
        // Заполняется справочник корреспонденций для счета 99.02.4, счета 96 и для проводок переоценки
        ЗаполнитьСправочникКорреспонденций();
        ОбновитьСодержаниеСправочникаКорреспонденций();
        УдалитьЗаписьСправочникаКорреспонденций("84.02","01.01","Уценка объекта основных средств по результатам переоценки");
        УдалитьЗаписьСправочникаКорреспонденций("97.01","Я96","Отражение суммы ежемесячных отчислений на образование резерва предстоящих расходов в  счет будущих расходов по оплате труда (предстоящих отпусков и т.д.)");
		
		// Заполнение КПП в сохраненных регламентированных отчетах
		РегламентированнаяОтчетность.ЗаполнитьКППвДокументахРегламентированныйОтчет();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2027", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияИБ = Константы.НомерВерсииКонфигурации.Получить();
	НоваяВерсияИБ = Метаданные.Версия;
	
	Если ((ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.28" 
		ИЛИ ОбщегоНазначения.ПолучитьНомерРелиза(ТекущаяВерсияИБ) = "2.0.27")
		И ТекущаяВерсияИБ <> НоваяВерсияИБ И ТекущаяВерсияИБ <> "") Тогда
		
		СтрСообщения = "обновление информационной базы с версии " + ТекущаяВерсияИБ + " на версию " + НоваяВерсияИБ;
		
		// отрабатываем изменение структуры справочника НалоговыеОрганы
		ОтработатьИзмененияВСтруктуреСправочникаНалоговыеОрганы();
		
		// Установка номера версии информационной базы
		Константы.НомерВерсииКонфигурации.Установить(НоваяВерсияИБ); 
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ", УровеньЖурналаРегистрации.Информация, , , "Выполнено " + СтрСообщения);
		
		#Если Клиент Тогда
			ВывестиОписаниеИзменений("2028", ДокументОписаниеОбновлений, МакетОписаниеОбновлений);
		#КонецЕсли
		
		Если Константы.НомерВерсииКонфигурации.Получить() = НоваяВерсияИБ Тогда
			
			// Если удалось зафиксировать транзакцию, то
			// сообщение об успешном обновлении информационной базы.
			ОбщегоНазначения.СообщитьИнформациюПользователю("Выполнено " + СтрСообщения + Символы.ПС);
			
		КонецЕсли;
		
	КонецЕсли;
       
    // Заполнение списка регламентированных отчетов, отключение использования внешних регламентированных отчетов
	ЗаполнитьСписокРегламентированныхОтчетов(Ложь);
	
	// Отключить внешний модуль документооборота с ФНС
	ОтключитьВнешнийМодульДокументооборотаСФНС();
	
	// Вернуть дату запрета изменения данных
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	
	#Если Клиент Тогда
	Если ДокументОписаниеОбновлений.ВысотаТаблицы > 0 Тогда
		ФормаОписаниеОбновлений = ПолучитьФорму("ОписаниеОбновлений");
		ФормаОписаниеОбновлений.МакетОписаниеОбновлений = ДокументОписаниеОбновлений;
		ФормаОписаниеОбновлений.Открыть();
	КонецЕсли;
	#КонецЕсли

КонецПроцедуры // ВыполнитьОбновление()

// Дополняет регистр сведений "СчетаУчетаРасчетовСКонтрагентами"
// счетами учета доходов и расходов по разницам в стоимости товаров (тары)
//
// Функция получает макет описания обновлений и заполняет его параметры расшифровок.
//
// Параметры:
//  ФормаОписаниеОбновлений - форма обработки "ОписаниеОбновлений", 
//                            назначается владельцем открываемых из нее форм.
//
// Возвращаемое значение:
//  ТабличныйДокумент - макет "ОписаниеОбновлений" с заполненными параметрами расшифровок.
//
Функция ПодготовитьМакетОписаниеОбновлений(ФормаОписаниеОбновлений) Экспорт

	МакетОписаниеОбновлений = ПолучитьМакет("ОписаниеОбновлений");

	Возврат МакетОписаниеОбновлений;

КонецФункции

// Процедура устанавливает указанное значение указанной константы и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  ИмяКонстанты      - имя константы, которую требуется установить.
//  ЗначениеКонстанты - значение константы.
//
Процедура УстановитьКонстанту(ИмяКонстанты, ЗначениеКонстанты) Экспорт

	Если Константы[ИмяКонстанты].Получить() = ЗначениеКонстанты Тогда
		Возврат;
	КонецЕсли;

	Константы[ИмяКонстанты].Установить(ЗначениеКонстанты);

	СтрСообщения = "Константе """ + Метаданные.Константы[ИмяКонстанты].Синоним + """ " +
	               "назначено значение """ + ЗначениеКонстанты + """";

	ОбщегоНазначения.СообщитьИнформациюПользователю(СтрСообщения);

КонецПроцедуры

// Процедура заполняет по умолчанию необходимые данные
// для отправки сообщений в службу технической поддержки.
//
Процедура ЗаполнитьПараметрыКонстантыОбращенияВОтделТехническойПоддержки() Экспорт

	Перем СтруктураЗначения;

	Если ТипЗнч(Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить()) <> Тип("ТаблицаЗначений") Тогда

		ОбщегоНазначения.ЗаполнитьСтруктуруДанныхНастройкиОбращенияВОтделТехподдержкиПоУмолчанию(СтруктураЗначения);

		СтрокаПараметровОтправки = СтруктураЗначения.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");

		Если СтрокаПараметровОтправки <> Неопределено Тогда

			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] = "v8@1c.ru";
			СтрокаПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_ПортSMTP[1]                                        = 25;

			Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Установить(Новый ХранилищеЗначения(СтруктураЗначения, Новый СжатиеДанных));

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура выводит описания изменений в указанном релизе
//
// Параметры
//  НомерРелиза  – Строка - номер релиза, для которого выводится описание
//
Процедура ВывестиОписаниеИзменений(НомерРелиза, ДокументОписаниеОбновлений, МакетОписаниеОбновлений)

	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Шапка" + НомерРелиза));
	ДокументОписаниеОбновлений.НачатьГруппуСтрок("Версия" + НомерРелиза);
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Версия" + НомерРелиза));
	ДокументОписаниеОбновлений.ЗакончитьГруппуСтрок();
	ДокументОписаниеОбновлений.Вывести(МакетОписаниеОбновлений.ПолучитьОбласть("Отступ"));

КонецПроцедуры // ВывестиОписаниеИзменений()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Функция выполняет начальное заполнение информационной базы.
//
// Параметры:
//  ДокументОписаниеОбновлений - табличный документ, в который выводится описание обновлений.
//  МакетОписаниеОбновлений    - макет "ОписаниеОбновлений" с заполненными параметрами.
//
// Возвращаемое значение:
//  Функция возвращает номер первой коммерческой версии конфигурации.
//
Функция ЗаполнитьПустуюИБ(ДокументОписаниеОбновлений, МакетОписаниеОбновлений, ФормаСтартовогоПомощника) Экспорт
	
	ВалютаРегламентированногоУчета = НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);
	Константы.ПрименяемыеСистемыНалогообложения.Установить(Перечисления.ПрименяемыеСистемыНалогообложения.ВсеСистемыНалогообложения);
	
	// Установить флаг учета авансов в валюте по курсу авансов в НУ
	Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Установить(Дата("20100101"));
	
	// Заполнение реквизита "Запретить использовать в проводках" в планах счетов
	УстановитьПараметрыСчетовБУ();
	// Заполнение кодов быстрого выбора в планах счетов
	ЗаполнениеКодовБыстрогоВыбора();
	
	УстановитьСуммовойУчетНаСкладах();
	
	УстановитьУчетПоДокументамНаСчетахРасчетов();
	
	УстановитьУчетНаСчетахУчетаЗарплаты();
	
	ЗаполнитьСправочникПрочиеДоходыИРасходы();
	ЗаполнитьСправочникРасходыБудущихПериодов();
	
	ОбновитьСправочникСтатьиЗатрат();
	
	ЗаполнитьСправочникВидыКонтактнойИнформации();
		
	// Заполнение сведений по заработной плате и учету персонала
	ЗаполнитьПредопределенныеКодыДоходовНДФЛ();
	ЗаполнитьПредопределенныеКодыДоходовЕСН();
	ОбновитьСтавкиДля2009Года();
	ЗаполнитьКодыВычетовНДФЛ();
	КодыПерсучета2010();
	НачальноеЗаполнениеСправочникаДокументыУдостоверяющиеЛичность();
	НачальноеЗаполнениеСправочникаКлассификаторСтранМира();
	ЗаполнениеОтраженияНачисленийПоУмолчанию();	
	
	
	// заполним реквизиты ПВР "Оклад по дням"
	ОбъектВР = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням.ПолучитьОбъект();
	ОбъектВР.ВидНачисленияПоСт255НК		= Перечисления.ВидыНачисленийОплатыТрудаПоСт255НК.пп1ст255;
	ОбъектВР.КодДоходаЕСН				= Справочники.ДоходыЕСН.ОблагаетсяЦеликом;
	ОбъектВР.КодДоходаНДФЛ				= Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию;
	ОбъектВР.КодДоходаФСС_НС			= Перечисления.ДоходыФСС_НС.Облагается;
	ОбъектВР.СпособОтраженияВБухучете	= Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию;
	ОбъектВР.Записать();
	
	ЗаполнитьВидыДоходовПоСтраховымВзносам();
	ЗаполнитьСведенияОТарифахСтраховыхВзносов();
	ПреобразоватьКодЕСНвКодПоСтраховымВзносам();
	ЗагрузитьНастройкиОтчетов();
	
	// Установим значение настройки пользователя "Показывать в проводках данные НУ" по-умолчанию равное Истина
	Запись = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	Запись.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Запись.Настройка 	= ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВПроводкахДанныеНУ;
	Запись.Значение 	= Истина;
	Запись.Записать();
	
	ЗаполнитьСписокКонвертируемыхКонфигураций();

	// Заполнение справочника Корреспонденций
	ЗаполнитьСправочникКорреспонденций();		
	
	ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии();
	
	ВключитьМеханизмОнлайнСервисовРО();
	
	// Установим значение настройки пользователя "Не использовать помощника приема на работу" по-умолчанию равное Ложь        
	Запись = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
	Запись.Пользователь = глЗначениеПеременной("глТекущийПользователь");
	Запись.Настройка     = ПланыВидовХарактеристик.НастройкиПользователей.НеИспользоватьПомощникаПриемаНаРаботу;
	Запись.Записать();
	
	//Заполнение настрое стандартных отчетов.
	ЗагрузитьНастройкиОтчетов();
	
	// установка контроля последовательности проведения
	Константы.КонтролироватьПоследовательностьПроведения.Установить(Истина); 
	
	Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Установить(Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить);

	ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();
	
	// {КОРП
	Константы.ГотовностьИнформационнойБазыКРаботе.Установить(Истина); 
	// }КОРП
	
КонецФункции // ЗаполнитьПустуюИБ()

Процедура УстановитьСуммовойУчетНаСкладах()

	Счета = Новый СписокЗначений();
	Счета.Добавить("ОборудованиеКУстановке");
	Счета.Добавить("ПриобретениеОбъектовОсновныхСредств");
	Счета.Добавить("Полуфабрикаты");
	Счета.Добавить("Товары");
	Счета.Добавить("ГотоваяПродукция");
	Счета.Добавить("Материалы");
	Счета.Добавить("ТоварыПринятыеНаКомиссию");

	НачатьТранзакцию();

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Ложь);
	КонецЦикла;

	Счета = Новый СписокЗначений();
	Счета.Добавить("МатериалыПереданныеВПереработку");
	Счета.Добавить("ТоварыОтгруженные");

	Для каждого Счет Из Счета Цикл
		УстановитьСубконтоНоменклатура(Счет.Значение, "Хозрасчетный", Истина, Истина);
	КонецЦикла;


	ЗафиксироватьТранзакцию();

КонецПроцедуры // УправлениеСуммовымУчетомНаСкладах()

// Устанавливает субконто "Номенклатура" и "Контрагент" у указанного счета.
//
Процедура УстановитьСубконтоНоменклатура(ИмяСчета, ИмяПланаСчетов, ЕстьКоличество, ЕстьКонтрагент)

	ВидСубконто = "ВидыСубконтоХозрасчетные";

	Попытка

		Счет  = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];
		Счета = Новый СписокЗначений();
		Счета.Добавить(Счет);

		ВыборкаСчетов = ПланыСчетов[ИмяПланаСчетов].ВыбратьИерархически(Счет);
		Пока ВыборкаСчетов.Следующий() Цикл
			Счета.Добавить(ВыборкаСчетов.Ссылка);
		КонецЦикла;

		Для каждого Счет Из Счета Цикл

			Объект = Счет.Значение.ПолучитьОбъект();
			
			Если (Объект.Код = "41.12") Или (Объект.Код = "45.04") Тогда
				Продолжить;
			КонецЕсли;

			Если ЕстьКонтрагент Тогда

				Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Контрагенты, "ВидСубконто") = Неопределено Тогда

					НовыйВид = Объект.ВидыСубконто.Вставить(0);

					НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Контрагенты;
					НовыйВид.Суммовой    = Истина;

					Если ЕстьКоличество Тогда
						НовыйВид.Количественный = Истина;
					КонецЕсли;

					Объект.Записать();
				    #Если Клиент Тогда
					Состояние("Добавлен вид субконто ""Номенклатура"" на счете " + Объект.Код + " плана счетов """ + ИмяПланаСчетов + """...");
					#КонецЕсли

				КонецЕсли;

			КонецЕсли;

			Если Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Номенклатура, "ВидСубконто") = Неопределено Тогда

				НовыйВид = Объект.ВидыСубконто.Добавить();

				НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Номенклатура;
				НовыйВид.Суммовой    = Истина;

				Если ЕстьКоличество Тогда
					НовыйВид.Количественный = Истина;
				КонецЕсли;

				Объект.Записать();
			    #Если Клиент Тогда
				Состояние("Добавлен вид субконто ""Номенклатура"" на счете " + Объект.Код + " плана счетов """ + ИмяПланаСчетов + """...");
				#КонецЕсли

			КонецЕсли;

		КонецЦикла;

	Исключение

	КонецПопытки;

КонецПроцедуры // УстановитьСубконтоНоменклатура()

// Процедура записывает переданный справочник объект и выводит сообщение.
// Предназначена для вызова из процедур заполнения и обработки справочников информационной базы.
//
// Параметры:
//  СправочникОбъект - объект, который требуется записать.
//
Процедура ЗаписатьСправочникОбъект(СправочникОбъект, Сообщать = Ложь) Экспорт

	Если НЕ СправочникОбъект.Модифицированность() Тогда
		Возврат;
	КонецЕсли;

	Если СправочникОбъект.ЭтоНовый() Тогда
		СтрСообщения1 = "Создан";
	Иначе
		СтрСообщения1 = "Обработан";
	КонецЕсли;

	Если СправочникОбъект.ЭтоГруппа Тогда
		СтрСообщения2 = "а группа";
	Иначе
		СтрСообщения2 = " элемент";
	КонецЕсли;

	СтрСообщения2 = СтрСообщения2 + " справочника """ + СправочникОбъект.Метаданные().Синоним + """: ";
	СтрСообщения3 = "наименование """ + СправочникОбъект.Наименование + """";

	Попытка
		СправочникОбъект.Записать();
		Если Сообщать = Истина Тогда
			ОбщегоНазначения.СообщитьИнформациюПользователю(СтрСообщения1 + СтрСообщения2 + "код """ + СправочникОбъект.ПолныйКод() + """, " + СтрСообщения3);
		КонецЕсли; 
		
	Исключение
		ОбщегоНазначения.СообщитьИнформациюПользователю("Не записан"  + СтрСообщения2 + СтрСообщения3 +
		         Символы.ПС + ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Функция создает элемент справочника Валюты, если такого нет.
//
// Параметры:
//  Код -                     - значение соответствующего реквизита справочника,
//  Наименование              - значение соответствующего реквизита справочника,
//  НаименованиеПолное        - значение соответствующего реквизита справочника,
//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
//
// Возвращаемое значение:
//  Ссылка на добавленный или существующий элемент.
//
Функция НайтиСоздатьВалюту(Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском) Экспорт

	Ссылка = Справочники.Валюты.НайтиПоКоду(Код);

	Если Ссылка.Пустая() Тогда

		СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();

		СправочникОбъект.Код                       = Код;
		СправочникОбъект.Наименование              = Наименование;
		СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;
		СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;

		ЗаписатьСправочникОбъект(СправочникОбъект);

		Ссылка = СправочникОбъект.Ссылка;

		// установим курс и кратность = 1 на 1 января 1980
		МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);

	КонецЕсли;

	Возврат Ссылка;

КонецФункции // НайтиСоздатьВалюту()

// Заполнение кодов быстрого выбора в планах счетов
Процедура ЗаполнениеКодовБыстрогоВыбора(ТолькоНезаполненные = Ложь);
	
	Для Каждого ЭлементПланСчетов ИЗ ПланыСчетов Цикл
		Попытка
			ПланСчетов = ЭлементПланСчетов.Выбрать();
			Пока ПланСчетов.Следующий() Цикл
				Объект = ПланСчетов.ПолучитьОбъект();
				
				Если ТолькоНезаполненные Тогда
					Если НЕ ЗначениеЗаполнено(Объект.КодБыстрогоВыбора) Тогда
						Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
					КонецЕсли;
				Иначе
					Объект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(Объект.Код, ".", ""));
				КонецЕсли;
				Объект.Записать();
				
			КонецЦикла; 
		Исключение
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Процедура изменяет ставшие неуникальными коды предопределенных элементов
//
Процедура УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов)
	
	МассивЭлементов = Новый Массив;
	
	Пока СписокПредопределенныхЭлементов.Количество()>0 Цикл
		
		МассивЭлементов.Очистить();
		КолвоЭлементовВСписке = СписокПредопределенныхЭлементов.Количество();
		ТекушийТипЗначения = ТипЗнч(СписокПредопределенныхЭлементов [КолвоЭлементовВСписке-1].Значение);
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ТекушийТипЗначения);
		ЕСли МетаданныеТипа.ДлинаКода = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для ОбратныйИндекс = 1 По КолвоЭлементовВСписке Цикл
			ЭлементСписка = СписокПредопределенныхЭлементов [КолвоЭлементовВСписке - ОбратныйИндекс];
			
			Если ТипЗнч(ЭлементСписка.Значение) = ТекушийТипЗначения Тогда
				МассивЭлементов.Добавить(ЭлементСписка.Значение);
				СписокПредопределенныхЭлементов.Удалить(ЭлементСписка);
			КонецЕсли;			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Предопределенные.Ссылка
		|ИЗ
		|	" + МетаданныеТипа.ПолноеИмя() + " КАК Предопределенные
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ " + МетаданныеТипа.ПолноеИмя() + " КАК Пользовательские
		|		ПО Предопределенные.Код = Пользовательские.Код
		|
		|ГДЕ
		|	Предопределенные.Ссылка В(&СписокЭлементов)
		|    И Пользовательские.Ссылка НЕ В(&СписокЭлементов)";
		
		Запрос.УстановитьПараметр("СписокЭлементов", МассивЭлементов);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьНовыйКод();
			Объект.Записать();
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет справочник конфигураций, 
// из которых поддерживается загрузка в текущий релиз
//
Процедура ЗаполнитьСписокКонвертируемыхКонфигураций()
	
	Выборка = Справочники.КонвертацииИзИнформационныхБазПредыдущихВерсий.Выбрать();
	
	РелизБУ = "7.70.523";
	РелизУСН = "7.70.179";
	РелизПБОЮЛ = "7.70.171";
	РелизБП16 = "1.6.30.6";
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Наименование = "Бухгалтерия" Тогда
			
			Объект = Выборка.ПолучитьОбъект();
			Объект.Конфигурация = "Бухгалтерский учет";
			Объект.ИдентификаторКонфигурации= "BU42TK";
			Объект.НомерРелиза = РелизБУ;
			Объект.КонвертацияОбработка = "V77Exp";
			Объект.КонвертацияПравила = "Acc77_80";
			Объект.Записать();
			
		ИначеЕсли Выборка.Наименование = "Предприниматель" Тогда
			
			Объект = Выборка.ПолучитьОбъект();
			Объект.Конфигурация = "Учет и отчетность предпринимателя";
			Объект.ИдентификаторКонфигурации= "PBOUL";
			Объект.НомерРелиза = РелизПБОЮЛ;
			Объект.КонвертацияОбработка = "V77ExpIP";
			Объект.КонвертацияПравила = "IP_ACC";
			Объект.Записать();
			
		ИначеЕсли Выборка.Наименование = "УСН" Тогда
			
			Объект = Выборка.ПолучитьОбъект();
			Объект.Конфигурация = "Упрощенная система налогообложения";
			Объект.ИдентификаторКонфигурации= "BASUOR";
			Объект.НомерРелиза = РелизУСН;
			Объект.КонвертацияОбработка = "USN_Acc8";
			Объект.КонвертацияПравила = "USN_Acc8";
			Объект.Записать();
			
		ИначеЕсли Выборка.Наименование = "БухгалтерияПредприятия" Тогда
			
			Объект = Выборка.ПолучитьОбъект();
			Объект.Конфигурация = "Бухгалтерия предприятия, ред. 1.6";
			Объект.ИдентификаторКонфигурации= "БП";
			Объект.НомерРелиза = РелизБП16;
			Объект.КонвертацияОбработка = "";
			Объект.КонвертацияПравила = "ACC16_20";
			Объект.Записать();
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

//Включает режим разделения итогов для регистров бухгалтерии и регистров накопления
//
Процедура ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии()
	
	Для каждого Регистр из РегистрыНакопления Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина)
	КонецЦикла;
	
	Для каждого Регистр из РегистрыБухгалтерии Цикл
			Регистр.УстановитьРежимРазделенияИтогов(Истина)
	КонецЦикла;

КонецПроцедуры //ВключитьРежимРазделенияИтоговРегистровНакопленийИБухгалтерии

Процедура УдалитьНастройкиПользователейПомеченныеНаУдаление()
	
	НовыйНабор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();
	НовыйНабор.Прочитать();
	
	МассивЗаписейДляУдаления = Новый Массив;
	
	Индекс = 0;
	Пока Индекс < НовыйНабор.Количество() Цикл
		Запись = НовыйНабор[Индекс];
		
		Если Запись.Настройка.ПометкаУдаления Тогда
			НовыйНабор.Удалить(Запись);
		Иначе
			Индекс = Индекс + 1;
		КонецЕсли;
	КонецЦикла;
	
	НовыйНабор.Записать(Истина);
	
КонецПроцедуры

Процедура ОбновитьСохраненныеНастройкиСтандартныхОтчетовВСвязиСДобавлениемОтбораОСВ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотноСальдоваяВедомость");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				НастройкиФормы = Неопределено;
				СохраненныеНастройки = СправочникОбъект.ХранилищеНастроек.Получить();
				Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
					Если СохраненныеНастройки.Свойство("НастройкиФормы", НастройкиФормы) Тогда
						Если НастройкиФормы.Свойство("ТаблицаСтраниц") Тогда
							Если ТипЗнч(НастройкиФормы.ТаблицаСтраниц) = Тип("ТаблицаЗначений") Тогда
								Если НастройкиФормы.ТаблицаСтраниц.Найти("Отбор", "Страница") = Неопределено Тогда
									НоваяСтрока = НастройкиФормы.ТаблицаСтраниц.Вставить(4);
									НоваяСтрока.Использование = Истина;
									НоваяСтрока.Страница      = "Отбор";
									НоваяСтрока.Представление = "Отбор";
									НоваяСтрока.Раскрыта      = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СохраненныеНастройки);
				
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнение нового реквизита ВидПеречисленияВБюджет при переходе на 2.0.10
// у платежных поручений и записей регистра РеквизитыУплатыНалоговИПлатежейВБюджет
//
Процедура ОбновитьПлатежныеПорученияНаПеречислениеВБюджет()
	
	#Если Клиент Тогда
		Состояние("Выполняется обновление платежных поручений на перечисление в бюджет");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Док.Дата, ДЕНЬ) КАК ДеньДаты,
	|	Док.Ссылка
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК Док
	|ГДЕ
	|	Док.ПеречислениеВБюджет = ИСТИНА
	|	И Док.ВидПеречисленияВБюджет = ЗНАЧЕНИЕ(Перечисление.ВидыПеречисленийВБюджет.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДеньДаты
	|ИТОГИ ПО
	|	ДеньДаты";
	
	Результат = Запрос.Выполнить();
	ВыборкаПоДатам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ДеньДаты");
	Пока ВыборкаПоДатам.Следующий() Цикл
	
		#Если Клиент Тогда
			Состояние("Выполняется обновление платежных поручений на перечисление в бюджет за " 
				+ Формат(ВыборкаПоДатам.ДеньДаты, "ДФ=dd.MM.yyyy"));
		#КонецЕсли
		
		Выборка = ВыборкаПоДатам.Выбрать();
		Пока Выборка.Следующий() Цикл
			Попытка
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокОбъект.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
				
				ДокОбъект.ОбменДанными.Загрузка = Истина;
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецЦикла;
	
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
	// Обновляем записи регистра РеквизитыУплатыНалоговИПлатежейВБюджет
	
	НаборРеквизитов = РегистрыСведений.РеквизитыУплатыНалоговИПлатежейВБюджет.СоздатьНаборЗаписей();
	НаборРеквизитов.Прочитать();
	
	Для каждого СтрокаРеквизитов Из НаборРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРеквизитов.ВидПеречисленияВБюджет) Тогда
			СтрокаРеквизитов.ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборРеквизитов.Модифицированность() Тогда
		НаборРеквизитов.ОбменДанными.Загрузка = Истина;
		НаборРеквизитов.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеИсторииСохраненныхНастроекСтандартныхОтчетов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотноСальдоваяВедомость");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету");
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСубконто");
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСчета");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотыМеждуСубконто");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотыСчета");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				История = Неопределено;
				СохраненныеНастройки = СправочникОбъект.ХранилищеНастроек.Получить();
				Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
					Если СохраненныеНастройки.Свойство("История", История) Тогда
						Для Каждого СтрокаИстории Из История Цикл
							СтруктураПараметров = XMLЗначение(Тип("ХранилищеЗначения"), СтрокаИстории.Значение).Получить();
							Если Не СтруктураПараметров.ДанныеОтчета.Свойство("РазмещениеДополнительныхПолей") Тогда
								СтруктураПараметров.ДанныеОтчета.Вставить("РазмещениеДополнительныхПолей", 0);
							КонецЕсли;
							Если Не СтруктураПараметров.ДанныеОтчета.Свойство("ПоказательДиаграммы") Тогда
								СтруктураПараметров.ДанныеОтчета.Вставить("ПоказательДиаграммы", 0);
								СтруктураПараметров.ДанныеОтчета.Вставить("ПредставлениеДиаграммы", 0);
								СтруктураПараметров.ДанныеОтчета.Вставить("ВидПодписиДиаграммы", 0);
							КонецЕсли;
							СтрокаИстории.Значение = XMLСтрока(Новый ХранилищеЗначения(СтруктураПараметров));
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СохраненныеНастройки);
				
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры
// {КОРП

Процедура ПометитьНаУдалениеНастройкиОтчетовДляРуководителя()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.ДинамикаЗадолженностиПокупателей");
	СписокОтчетов.Добавить("ОтчетОбъект.ДинамикаЗадолженностиПоставщикам");
	СписокОтчетов.Добавить("ОтчетОбъект.ЗадолженностьПокупателей");
	СписокОтчетов.Добавить("ОтчетОбъект.ЗадолженностьПокупателейПоСрокамДолга");
	СписокОтчетов.Добавить("ОтчетОбъект.ЗадолженностьПоставщикам");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотныеСредства");
	СписокОтчетов.Добавить("ОтчетОбъект.ОстаткиДенежныхСредств");
	СписокОтчетов.Добавить("ОтчетОбъект.ПоступлениеДенежныхСредств");
	СписокОтчетов.Добавить("ОтчетОбъект.Продажи");
	СписокОтчетов.Добавить("ОтчетОбъект.ПросроченнаяЗадолженностьПокупателей");
	СписокОтчетов.Добавить("ОтчетОбъект.РасходДенежныхСредств");
	СписокОтчетов.Добавить("ОтчетОбъект.ДоходыРасходы");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.УстановитьПометкуУдаления(Истина);
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСохраненныеНастройкиСтандартныхОтчетовВСвязиСДобавлениемВыводаДиаграммы()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСубконто");
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСчета");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотыСчета");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				НастройкиФормы = Неопределено;
				СохраненныеНастройки = СправочникОбъект.ХранилищеНастроек.Получить();
				Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
					Если СохраненныеНастройки.Свойство("НастройкиФормы", НастройкиФормы) Тогда
						Если НастройкиФормы.Свойство("ТаблицаСтраниц") Тогда
							Если ТипЗнч(НастройкиФормы.ТаблицаСтраниц) = Тип("ТаблицаЗначений") Тогда
								Если НастройкиФормы.ТаблицаСтраниц.Найти("Диаграмма", "Страница") = Неопределено Тогда
									НоваяСтрока = НастройкиФормы.ТаблицаСтраниц.Вставить(0);
									НоваяСтрока.Использование = Ложь;
									НоваяСтрока.Страница      = "Диаграмма";
									НоваяСтрока.Представление = "Диаграмма";
									НоваяСтрока.Раскрыта      = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СохраненныеНастройки);
				
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьРеквизитУчетнойПолитикиИП()
	
	НаборЗаписейРегистра = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Прочитать();
	Если НаборЗаписейРегистра.Количество() <> 0 Тогда
		Для Индекс = 0 По НаборЗаписейРегистра.Количество()-1 Цикл
			ЗаписьРегистра = НаборЗаписейРегистра[Индекс];
			Если ЗаписьРегистра.Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо
				И ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
				ЗаписьРегистра.ПризнаватьДоходыИРасходыПоОперациямПрошлогоГода = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	НаборЗаписейРегистра.Записать();
	
КонецПроцедуры

Процедура ОбновитьНастройкиПользователей()
	
	// Установим значение настройки пользователя "Не использовать помощника приема на работу" по-умолчанию равное Ложь
	Пользователи = Справочники.Пользователи.Выбрать();
	Пока Пользователи.Следующий() Цикл
		Запись = РегистрыСведений.НастройкиПользователей.СоздатьМенеджерЗаписи();
		Запись.Пользователь = Пользователи.Ссылка;
		Запись.Настройка 	= ПланыВидовХарактеристик.НастройкиПользователей.НеИспользоватьПомощникаПриемаНаРаботу;
		Запись.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСправочникСотрудники()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизаций.Период,
	|	РаботникиОрганизаций.Сотрудник,
	|	РаботникиОрганизаций.ПодразделениеОрганизации,
	|	РаботникиОрганизаций.Должность,
	|	РаботникиОрганизаций.ПричинаИзмененияСостояния
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата ИЗ Результат Цикл
		
		СотрудникОбъект = СтрокаРезультата.Сотрудник.ПолучитьОбъект();
		СотрудникОбъект.ТекущееПодразделениеОрганизации		= СтрокаРезультата.ПодразделениеОрганизации;
		СотрудникОбъект.ТекущаяДолжностьОрганизации			= СтрокаРезультата.Должность;		
		Если СтрокаРезультата.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.ПриемНаРаботу Тогда
			СотрудникОбъект.ДатаПриемаНаРаботу					= СтрокаРезультата.Период;
		КонецЕсли;
		Если СтрокаРезультата.ПричинаИзмененияСостояния = Перечисления.ПричиныИзмененияСостояния.Увольнение Тогда
			СотрудникОбъект.ДатаУвольнения					= СтрокаРезультата.Период;
		КонецЕсли;
		СотрудникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияДокументовВПоследовательности()
	
	//Выберем документы и зарегистрируем их в соответствующей последовательности.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОбороты.Регистратор,
	               |	ХозрасчетныйОбороты.Период КАК Период,
	               |	ХозрасчетныйОбороты.Организация КАК Организация,
	               |	КОНЕЦПЕРИОДА(ХозрасчетныйОбороты.Период, ГОД) КАК ГОД
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Обороты(, , Регистратор, , , , , ) КАК ХозрасчетныйОбороты
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период
	               |ИТОГИ ПО
	               |	Организация,
	               |	ГОД";
	
	ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Организация");
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		ВыборкаПоГоду = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "ГОД");
		Пока ВыборкаПоГоду.Следующий() Цикл
			//Проверим учетную политику.
			ОтказУП = Ложь;
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(КонецГода(ВыборкаПоГоду.ГОД), ОтказУП, ВыборкаПоГоду.Организация, ,Ложь);
			Если ОтказУП Тогда
				Продолжить;
			КонецЕсли;
			
			#Если Клиент Тогда
				Состояние("Выполняется регистрация последовательности документов по организации " + ВыборкаПоГоду.Организация + " за " + ВыборкаПоГоду.ГОД + " г.");
			#КонецЕсли
		
			ИмяПоследовательности = ?(УчетнаяПолитика.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней, "Взаиморасчеты", "ОбщаяПоследовательность");
			СоставПоследовательности = Метаданные.Последовательности[ИмяПоследовательности].Документы;
			ВыборкаПоЗаписям = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ПоследняяСсылка = Неопределено;
			Пока ВыборкаПоЗаписям.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПоЗаписям.Регистратор) Тогда
					Продолжить;
				КонецЕсли;
				Если СоставПоследовательности.Содержит(ВыборкаПоЗаписям.Регистратор.Метаданные()) Тогда
					НаборЗаписей = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоЗаписям.Регистратор);
					Запись 				= НаборЗаписей.Добавить();
					Запись.Период 		= ВыборкаПоЗаписям.Период;
					Запись.Организация 	= ВыборкаПоЗаписям.Организация;
					НаборЗаписей.Записать();
					ПоследняяСсылка 	= Новый МоментВремени(ВыборкаПоЗаписям.Период, ВыборкаПоЗаписям.Регистратор);
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ПоследняяСсылка) Тогда
				СтруктураОтбора = Новый Структура("Организация", ВыборкаПоГоду.Организация);
				Последовательности[ИмяПоследовательности].УстановитьГраницу(ПоследняяСсылка ,СтруктураОтбора);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСправочникОрганизацииНаименование()
	
	Выборка = Справочники.Организации.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.ПустаяСсылка() Тогда
			Продолжить;
		КонецЕсли;
		
		Организация = Выборка.ПолучитьОбъект();
		
		Организация.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
		
		Если ПустаяСтрока(Организация.НаименованиеСокращенное) Тогда
			Организация.НаименованиеСокращенное = Организация.НаименованиеПолное;
		КонецЕсли;
		
		Организация.ОбменДанными.Загрузка = Истина;
		
		Организация.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДокументыУчетаЗарплатыИКадров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботуВОрганизацию.Ссылка
	|ИЗ
	|	Документ.ПриемНаРаботуВОрганизацию КАК ПриемНаРаботуВОрганизацию
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КадровоеПеремещениеОрганизаций.Ссылка
	|ИЗ
	|	Документ.КадровоеПеремещениеОрганизаций КАК КадровоеПеремещениеОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УвольнениеИзОрганизаций.Ссылка
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций КАК УвольнениеИзОрганизаций";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПриказНаГруппуСотрудников = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачислениеЗарплатыРаботникамОрганизаций.Ссылка
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций КАК НачислениеЗарплатыРаботникамОрганизаций
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетЕСН.Ссылка
	|ИЗ
	|	Документ.РасчетЕСН КАК РасчетЕСН";
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
		Если ДокументОбъект.Проведен Тогда
			ДокументОбъект.РучнаяКорректировка = Истина;
		КонецЕсли;
		ДокументОбъект.КорректировкаРасчета = Истина;
		ДокументОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДокументыОперация()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	             |	ОперацияБух.Ссылка,
	             |	ВЫБОР
	             |		КОГДА ОперацияБух.ТиповаяОперация = &ПустаяТО
	             |			ТОГДА ""Вручную""
	             |		ИНАЧЕ ""Типовые операции""
	             |	КОНЕЦ КАК СпособЗаполнения
	             |ИЗ
	             |	Документ.ОперацияБух КАК ОперацияБух
	             |ГДЕ
	             |	ОперацияБух.СпособЗаполнения = НЕОПРЕДЕЛЕНО";
				 
	Запрос.УстановитьПараметр("ПустаяТО",Справочники.ТиповыеОперации.ПустаяСсылка());
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат .Следующий() Цикл
		ОбъектОперация = Результат.Ссылка.ПолучитьОбъект();
		ОбъектОперация.СпособЗаполнения = Результат.СпособЗаполнения;
		ОбъектОперация.Записать();
	КонецЦикла;
	
КонецПроцедуры
		
// Движения документов ЗакрытиеМесяца и РасчетДолейСписанияКосвенныхРасходов переносятся 
// в документы "Операция (бухгалтерский и налоговый учет)" при переходе на 2.0.6,
// а старые документы помечаются на удаление
//
Процедура ПеренестиДвиженияСтарыхРегламентныхДокументовВОперацииВведенныеВручную()
	
	ОбщегоНазначения.СообщитьИнформациюПользователю(
		"Начиная с версии 2.0.6 документы ""Закрытие месяца"" и ""Расчет долей списания косвенных расходов в подразделениях"" 
		|не используются. Задачи документов ""Закрытие месяца"" и ""Расчет долей списания косвенных расходов в подразделениях"" 
		|выполняются документом ""Регламентная операция"".
		|При обновлении на версию 2.0.6 движения документов ""Закрытие месяца"" и ""Расчет долей списания косвенных расходов в 
		|подразделениях"" автоматически будут перенесены в документы ""Операция (бухгалтерский и налоговый учет)""." + Символы.ПС);
		
	ПеренестиДвиженияДокументаВОперацииВведенныеВручную(
		"УдалитьЗакрытиеМесяца", "Закрытие месяца");
	
	ПеренестиДвиженияДокументаВОперацииВведенныеВручную(
		"УдалитьРасчетДолейСписанияКосвенныхРасходов", "Расчет долей списания косвенных расходов в подразделениях");

КонецПроцедуры // ПеренестиДвиженияСтарыхРегламентныхДокументовВОперацииВведенныеВручную()

Процедура ПеренестиДвиженияДокументаВОперацииВведенныеВручную(ИмяДокумента, ПредставлениеДокумента)
	
	ТаблицаВидовДвижений = Новый ТаблицаЗначений;
	ТаблицаВидовДвижений.Колонки.Добавить("Имя");
	ТаблицаВидовДвижений.Колонки.Добавить("Представление");
	ТаблицаВидовДвижений.Колонки.Добавить("ТипРегистра");
	
	Для каждого Движение Из Метаданные.Документы[ИмяДокумента].Движения Цикл
		
		СтрокаВидаДвижения = ТаблицаВидовДвижений.Добавить();
		СтрокаВидаДвижения.Имя = Движение.Имя;
		СтрокаВидаДвижения.Представление = Движение.Представление();
		Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
			СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
			СтрокаВидаДвижения.ТипРегистра = "РегистрНакопления";
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
			СтрокаВидаДвижения.ТипРегистра = "РегистрСведений";
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Док.Дата,
	|	Док.Номер,
	|	Док.Организация,
	|	Док.Проведен,
	|	Док.Ссылка КАК Регистратор
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК Док
	|
	|АВТОУПОРЯДОЧИВАНИЕ";
	Результат = Запрос.Выполнить();
	ВыборкаДокументов = Результат.Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		// Переносим все движения в новый документ и помечаем на удаление старый в одной транзакции
		
		НачатьТранзакцию();
			
		Если ВыборкаДокументов.Проведен Тогда
			
			#Если Клиент Тогда
			Состояние("" + ПредставлениеДокумента + " " 
				+ ВыборкаДокументов.Номер + " от " + ВыборкаДокументов.Дата + ">, "
				+ "Организация: " + ВыборкаДокументов.Организация);
			#КонецЕсли
			
			НовыйДокумент = Документы.ОперацияБух.СоздатьДокумент();
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(НовыйДокумент, глЗначениеПеременной("глТекущийПользователь"));
			НовыйДокумент.Дата        		= ВыборкаДокументов.Дата;
			НовыйДокумент.Организация 		= ВыборкаДокументов.Организация;
			НовыйДокумент.СпособЗаполнения 	= "Вручную";
			НовыйДокумент.Комментарий = "#Движения документа <" + ПредставлениеДокумента + " " 
				+ ВыборкаДокументов.Номер + " от " + ВыборкаДокументов.Дата + "> "
				+ "перенесены автоматически при переходе на версию 2.0.6.#";
			НовыйДокумент.Содержание = НовыйДокумент.Комментарий;
			НовыйДокумент.Записать();
				
			Для каждого СтрокаВидаДвижения Из ТаблицаВидовДвижений Цикл
				
				Запрос.Текст =
				"ВЫБРАТЬ
				|	*
				|ИЗ
				|"
				+ СтрокаВидаДвижения.ТипРегистра + "." + СтрокаВидаДвижения.Имя
				+ ?(СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии", 
					".ДвиженияССубконто(,,Регистратор = &Регистратор)",
					"
					|ГДЕ
					|	Регистратор = &Регистратор") 
				+ "
				|
				|УПОРЯДОЧИТЬ ПО
				|	НомерСтроки";
				Запрос.УстановитьПараметр("Регистратор", ВыборкаДокументов.Регистратор);
				ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
				Если ТаблицаДвижений.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии" Тогда
					НаборЗаписей = РегистрыБухгалтерии[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
				ИначеЕсли СтрокаВидаДвижения.ТипРегистра = "РегистрНакопления" Тогда
					НаборЗаписей = РегистрыНакопления[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
					НоваяСтрока  = НовыйДокумент.ТаблицаРегистровНакопления.Добавить();
					НоваяСтрока.Имя           = СтрокаВидаДвижения.Имя;
					НоваяСтрока.Представление = СтрокаВидаДвижения.Представление;
				ИначеЕсли СтрокаВидаДвижения.ТипРегистра = "РегистрСведений" Тогда
					НаборЗаписей = РегистрыСведений[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
					НоваяСтрока  = НовыйДокумент.ТаблицаРегистровСведений.Добавить();
					НоваяСтрока.Имя           = СтрокаВидаДвижения.Имя;
					НоваяСтрока.Представление = СтрокаВидаДвижения.Представление;
				КонецЕсли;
				
				// Старые записи очищаем до добавления новых - для уникальности записей непериодических регистров сведений
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
				НаборЗаписей.Записать();
				
				НаборЗаписей.Отбор.Регистратор.Установить(НовыйДокумент.Ссылка);
				
				ТаблицаДвижений.ЗаполнитьЗначения(НовыйДокумент.Ссылка, "Регистратор");
				
				Если СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии" Тогда
					
					Для каждого СтрокаДвижения Из ТаблицаДвижений Цикл
					
						Проводка = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(Проводка, СтрокаДвижения);
						Для й = 1 По 3 Цикл
							Если ЗначениеЗаполнено(СтрокаДвижения["ВидСубконтоДт" + й]) Тогда
								Проводка.СубконтоДт[СтрокаДвижения["ВидСубконтоДт" + й]] = СтрокаДвижения["СубконтоДт" + й];
							КонецЕсли;
							Если ЗначениеЗаполнено(СтрокаДвижения["ВидСубконтоКт" + й]) Тогда
								Проводка.СубконтоКт[СтрокаДвижения["ВидСубконтоКт" + й]] = СтрокаДвижения["СубконтоКт" + й];
							КонецЕсли;
						КонецЦикла;
					
					КонецЦикла;
					
				Иначе
					
					НаборЗаписей.Загрузить(ТаблицаДвижений);
					
				КонецЕсли;
				
				НаборЗаписей.Записать();
				
			КонецЦикла;
		
			НовыйДокумент.Записать();
			
		КонецЕсли;
		
		СтарыйДокумент = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		СтарыйДокумент.УстановитьПометкуУдаления(Истина);
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;

КонецПроцедуры // ПеренестиДвиженияДокументаВОперацииВведенныеВручную()

// Движения документов Корректировка записей регистров переносятся 
// в документы "Операция (бухгалтерский и налоговый учет)" при переходе на 2.0.6,
// а старые документы помечаются на удаление
//
Процедура ПеренестиДвиженияКорректировкиЗаписейРегистровВОперацииВведенныеВручную()
	
	ОбщегоНазначения.СообщитьИнформациюПользователю(
		"Начиная с версии 2.0.6 документ ""Корректировка записей регистров"" не используются. Задачи документа ""Корректировка 
		|записей регистров"" выполняются документом ""Операция (бухгалтерский и налоговый учет)"".
		|При обновлении на версию 2.0.6 движения документов ""Корректировка записей регистров"" автоматически будут перенесены
		|в документы ""Операция (бухгалтерский и налоговый учет)""." + Символы.ПС);
		
		
	//Сперва обновим внешние обработки подключенные к Корректировке записей регистров, т.е. переподключим их к Операции
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнешниеОбработкиПринадлежность.Ссылка,
	|	ВнешниеОбработкиПринадлежность.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	(НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления)
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ЗаполнениеТабличныхЧастей);
	Запрос.УстановитьПараметр("Ссылка", Документы.УдалитьКорректировкаЗаписейРегистров.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Обработка = Выборка.Ссылка.ПолучитьОбъект();
		Обработка.Принадлежность[0].СсылкаОбъекта = Документы.ОперацияБух.ПустаяСсылка();
		Обработка.Принадлежность[0].ПредставлениеОбъекта = "Документ ""Операция (бухгалтерский и налоговый учет)""";
		Обработка.Записать();
	КонецЦикла;	
	
	//Теперь перенесем движения
	ТаблицаВидовДвижений = Новый ТаблицаЗначений;
	ТаблицаВидовДвижений.Колонки.Добавить("Имя");
	ТаблицаВидовДвижений.Колонки.Добавить("Представление");
	ТаблицаВидовДвижений.Колонки.Добавить("ТипРегистра");
	
	Для каждого Движение Из Метаданные.Документы.УдалитьКорректировкаЗаписейРегистров.Движения Цикл
		
		СтрокаВидаДвижения = ТаблицаВидовДвижений.Добавить();
		СтрокаВидаДвижения.Имя = Движение.Имя;
		СтрокаВидаДвижения.Представление = Движение.Представление();
		Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
			СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии";
		ИначеЕсли Метаданные.РегистрыНакопления.Содержит(Движение) Тогда
			СтрокаВидаДвижения.ТипРегистра = "РегистрНакопления";
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(Движение) Тогда
			СтрокаВидаДвижения.ТипРегистра = "РегистрСведений";
		КонецЕсли;
		
	КонецЦикла;
	ТаблицаВидовДвижений.Сортировать("ТипРегистра,Имя");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Корректировка.Ссылка КАК Регистратор,
	|	Корректировка.Представление КАК Представление,
	|	Корректировка.Номер,
	|	Корректировка.ЗаполнениеДвижений.(
	|		Действие,
	|		Документ,
	|		Документ.Организация КАК Организация,
	|		Примечание
	|	),
	|	Корректировка.Дата,
	|	Корректировка.Проведен,
	|	Корректировка.ПометкаУдаления,
	|	Корректировка.Комментарий
	|ИЗ
	|	Документ.УдалитьКорректировкаЗаписейРегистров КАК Корректировка";
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Переносим все движения в документ "Операция" 
	Для каждого ВыборкаДокументов ИЗ Результат Цикл
		
		НачатьТранзакцию();
		
		#Если Клиент Тогда
		Состояние("Корректировка записей регистров " + ВыборкаДокументов.Номер + " от " + ВыборкаДокументов.Дата);
		#КонецЕсли
	
		НесколькоОрганизаций = новый ТаблицаЗначений;
		НесколькоОрганизаций.Колонки.Добавить("Организация");
		НесколькоОрганизаций.Колонки.Добавить("Движения");
		НесколькоОрганизаций.Колонки.Добавить("Имя");
		НесколькоОрганизаций.Колонки.Добавить("Представление");
		НесколькоОрганизаций.Колонки.Добавить("ТипРегистра");
		СпособЗаполнения = ?(ВыборкаДокументов.ЗаполнениеДвижений.Количество()=0,"Вручную",ВыборкаДокументов.ЗаполнениеДвижений[0].Действие);
		ЗаполнениеДвижений = ВыборкаДокументов.ЗаполнениеДвижений;
		
		//Собираем движения
		Для каждого СтрокаВидаДвижения Из ТаблицаВидовДвижений Цикл
			
			Если СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии" Тогда
				НаборЗаписей = РегистрыБухгалтерии[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
			ИначеЕсли СтрокаВидаДвижения.ТипРегистра = "РегистрНакопления" Тогда
				НаборЗаписей = РегистрыНакопления[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
			ИначеЕсли СтрокаВидаДвижения.ТипРегистра = "РегистрСведений" Тогда
				НаборЗаписей = РегистрыСведений[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
			КонецЕсли;
			
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Регистратор);
			НаборЗаписей.Прочитать();
			Если НаборЗаписей.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			// Старые записи очищаем до добавления новых - для уникальности записей непериодических регистров сведений
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			//Разбиваем по организациям
			Если ТаблицаДвижений.Колонки.Найти("Организация")<>Неопределено Тогда
				МассивОрганизаций = ТаблицаДвижений.ВыгрузитьКолонку("Организация");
				МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
				Для каждого Строка из МассивОрганизаций Цикл
					НоваяОрг = НесколькоОрганизаций.Добавить();
					НоваяОрг.Организация = Строка;
					НоваяОрг.Движения = ТаблицаДвижений.Скопировать(Новый Структура("Организация",Строка));
					НоваяОрг.Имя = СтрокаВидаДвижения.Имя;
					НоваяОрг.Представление = СтрокаВидаДвижения.Представление;
					НоваяОрг.ТипРегистра = СтрокаВидаДвижения.ТипРегистра;
				КонецЦикла;
			Иначе
				НоваяОрг = НесколькоОрганизаций.Добавить();
				НоваяОрг.Организация = Справочники.Организации.ПустаяСсылка();
				НоваяОрг.Движения = ТаблицаДвижений.Скопировать();
				НоваяОрг.Имя = СтрокаВидаДвижения.Имя;
				НоваяОрг.Представление = СтрокаВидаДвижения.Представление;
				НоваяОрг.ТипРегистра = СтрокаВидаДвижения.ТипРегистра;
			КонецЕсли;
			
		КонецЦикла;
		
		//Записываем движения в новый(е) документ(ы)
		МассивОрганизаций = НесколькоОрганизаций.ВыгрузитьКолонку("Организация");
		МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций);
		Для каждого Организация из МассивОрганизаций Цикл
			
			НовыйДокумент = Документы.ОперацияБух.СоздатьДокумент();
			НовыйДокумент.Ответственный = глЗначениеПеременной("глТекущийПользователь");
			НовыйДокумент.Дата        = ВыборкаДокументов.Дата;
			НовыйДокумент.Комментарий = "#Движения документа <Корректировка записей регистров " 
				+ ВыборкаДокументов.Номер + " от " + ВыборкаДокументов.Дата + "> "
				+ "перенесены автоматически при переходе на версию 2.0.6.#";
			
			ЗаполнениеПоОрганизации = ЗаполнениеДвижений.НайтиСтроки(Новый Структура("Организация",Организация));
			Для каждого Строка из ЗаполнениеПоОрганизации Цикл
				НоваяСтрока = НовыйДокумент.ЗаполнениеДвижений.Добавить();
				НоваяСтрока.Документ = Строка.Документ;
				НоваяСтрока.Примечание = Строка.Примечание;
			КонецЦикла;
			ЗаполнениеПоОрганизации = ЗаполнениеДвижений.НайтиСтроки(Новый Структура("Организация",NULL));
			Для каждого Строка из ЗаполнениеПоОрганизации Цикл
				НоваяСтрока = НовыйДокумент.ЗаполнениеДвижений.Добавить();
				НоваяСтрока.Документ = Строка.Документ;
				НоваяСтрока.Примечание = Строка.Примечание;
			КонецЦикла;
			НовыйДокумент.Организация = Организация;
			НовыйДокумент.СпособЗаполнения = СпособЗаполнения;
			НовыйДокумент.Содержание = ВыборкаДокументов.Комментарий;
			НовыйДокумент.Записать();
			
			//Отбираем движения по организации и записываем
			ДвиженияПоОрганизации = НесколькоОрганизаций.НайтиСтроки(Новый Структура("Организация",Организация));
			Для каждого СтрокаВидаДвижения из ДвиженияПоОрганизации Цикл
				
				Если СтрокаВидаДвижения.ТипРегистра = "РегистрНакопления" Тогда
					НаборЗаписей = РегистрыНакопления[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
					НоваяСтрока  = НовыйДокумент.ТаблицаРегистровНакопления.Добавить();
					НоваяСтрока.Имя           = СтрокаВидаДвижения.Имя;
					НоваяСтрока.Представление = СтрокаВидаДвижения.Представление;
				ИначеЕсли СтрокаВидаДвижения.ТипРегистра = "РегистрСведений" Тогда
					НаборЗаписей = РегистрыСведений[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
					НоваяСтрока  = НовыйДокумент.ТаблицаРегистровСведений.Добавить();
					НоваяСтрока.Имя           = СтрокаВидаДвижения.Имя;
					НоваяСтрока.Представление = СтрокаВидаДвижения.Представление;
				ИначеЕсли СтрокаВидаДвижения.ТипРегистра = "РегистрБухгалтерии" Тогда
					НаборЗаписей = РегистрыБухгалтерии[СтрокаВидаДвижения.Имя].СоздатьНаборЗаписей();
				КонецЕсли;
			
				НаборЗаписей.Отбор.Регистратор.Установить(НовыйДокумент.Ссылка);
				СтрокаВидаДвижения.Движения.ЗаполнитьЗначения(НовыйДокумент.Ссылка, "Регистратор");
				НаборЗаписей.Загрузить(СтрокаВидаДвижения.Движения);
				НаборЗаписей.Записать();
				
			КонецЦикла;
			
			НовыйДокумент.Записать();

		КонецЦикла;
		
		//Удаляем старый документ
		СтарыйДокумент = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		СтарыйДокумент.УстановитьПометкуУдаления(Истина);
		
		ЗафиксироватьТранзакцию();

	КонецЦикла;
	
КонецПроцедуры // ПеренестиДвиженияКорректировкиЗаписейРегистровВОперацииВведенныеВручную()

Процедура ЗаполнитьУчетнуюПолитикуПоСпособуУчетаНЗП()
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		Для каждого СтрокаНабора Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(СтрокаНабора.ПрямыеРасходыБезВыпускаВключатьВНЗП) Тогда
				СтрокаНабора.ПрямыеРасходыБезВыпускаВключатьВНЗП = Истина				
			КонецЕсли;
		КонецЦикла; 
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
КонецПроцедуры  //ЗаполнитьУчетнуюПолитикуПоСпособуУчетаНЗП

// Перенос кодов из реквизита ссылочного типа в реквизит строкового типа при переходе на 2.0.7
//
Процедура ПеренестиКодыОКАТОСправочникаРегистрацияВИФНС()

	#Если Клиент Тогда
	Состояние("Перенос кодов ОКАТО в справочнике <Регистрация в ИФНС>");
	#КонецЕсли

	Выборка = Справочники.РегистрацияВИФНС.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если ЗначениеЗаполнено(Выборка.УдалитьКодПоОКАТО) И НЕ ЗначениеЗаполнено(Выборка.КодПоОКАТО) Тогда
			СправочникОбъект = Выборка.ПолучитьОбъект();
			СправочникОбъект.КодПоОКАТО = СправочникОбъект.УдалитьКодПоОКАТО.Код;
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();
		КонецЕсли;
	
	КонецЦикла;

	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли

КонецПроцедуры

Процедура ЗаполнитьСпособПогашенияЗадолженностиВДокументе(ПредставлениеДокумента, 
	ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам, ИмяТабЧасти = "РасшифровкаПлатежа")

	#Если Клиент Тогда
	Состояние("Установка способа распределения оплаты в документах <" + ПредставлениеДокумента + ">");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	КолДокументов = Выборка.Количество();
	
	Ном = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Ном = Ном + 1;
		
		ДокОбъект = Выборка.ДокСсылка.ПолучитьОбъект();
		
		Для каждого СтрокаПлатеж Из ДокОбъект[ИмяТабЧасти] Цикл
		
			Если ЗначениеЗаполнено(СтрокаПлатеж.СпособПогашенияЗадолженности) Тогда
				Продолжить;
			КонецЕсли;
			
			ВедениеВзаиморасчетов = КэшВедениеВзаиморасчетовПоДоговорам[СтрокаПлатеж.ДоговорКонтрагента];
			Если ВедениеВзаиморасчетов = Неопределено Тогда
				ВедениеВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.УдалитьВедениеВзаиморасчетов;
				КэшВедениеВзаиморасчетовПоДоговорам.Вставить(СтрокаПлатеж.ДоговорКонтрагента, ВедениеВзаиморасчетов);
			КонецЕсли;
			
			Если ВедениеВзаиморасчетов = Перечисления.УдалитьВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			
				СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам) Тогда
					СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
				КонецЕсли;
				
			Иначе //.ПоРасчетнымДокументам
				
				Если ЗначениеЗаполнено(СтрокаПлатеж.Сделка) Тогда
					СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.ПоДокументу;
					Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам) Тогда
						СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
					КонецЕсли;
				Иначе
					СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.НеПогашать;
					Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовПоАвансам) Тогда
						СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом;
					КонецЕсли;
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = Неопределено;
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЦикла;
		
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		#Если Клиент Тогда
		
		Если Ном % 10 = 0 Тогда
			Состояние("Установка способа распределения оплаты в документах <" + ПредставлениеДокумента + ">: "
			+ "обработано " + Ном + " из " + КолДокументов);
		КонецЕсли;
		
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// Заполнение реквизита СпособПогашенияЗадолженности в документах оплаты при переходе на 2.0.7
//
Процедура ЗаполнитьСпособРаспределенияВДокументахОплаты(КэшВедениеВзаиморасчетовПоДоговорам)
	
	// Поступление на расчетный счет
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	(Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя)
	|		ИЛИ Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика))
	|	И Док.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка)";
	
	ЗаполнитьСпособПогашенияЗадолженностиВДокументе("Поступление на расчетный счет", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
	
	// Списание с расчетного счета
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	(Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику)
	|		ИЛИ Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю))
	|	И Док.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка)";
	
	ЗаполнитьСпособПогашенияЗадолженностиВДокументе("Списание с расчетного счета", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
	
	// Приходный кассовый ордер
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	(Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ОплатаПокупателя)
	|		ИЛИ Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ВозвратОтПоставщика))
	|	И Док.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка)";
	
	ЗаполнитьСпособПогашенияЗадолженностиВДокументе("Приходный кассовый ордер",
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
	
	// Расходный кассовый ордер
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК Док
	|ГДЕ
	|	(Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ОплатаПоставщику)
	|		ИЛИ Док.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВозвратПокупателю))
	|	И Док.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка)";
	
	ЗаполнитьСпособПогашенияЗадолженностиВДокументе("Расходный кассовый ордер", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
	
	// Авансовый отчет
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка
	|ИЗ
	|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК Док
	|ГДЕ
	|	Док.СпособПогашенияЗадолженности = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.ПустаяСсылка)";
	
	ЗаполнитьСпособПогашенияЗадолженностиВДокументе("Авансовый отчет", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам, "ОплатаПоставщикам");
	
КонецПроцедуры

Процедура ЗаполнитьСпособЗачетаАвансовВДокументе(ПредставлениеДокумента, 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам,
		ИмяСделки = "УдалитьСделка", 
		ИмяСпособаЗачетаАвансов = "СпособЗачетаАвансов", ИмяТабЧастиЗачетаАвансов = "ЗачетАвансов");

	#Если Клиент Тогда
	Состояние("Установка способа зачета авансов в документах <" + ПредставлениеДокумента + ">");
	#КонецЕсли

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;

	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	КолДокументов = Выборка.Количество();
	
	Ном = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Ном = Ном + 1;
		
		ДокОбъект = Выборка.ДокСсылка.ПолучитьОбъект();
		
		ВедениеВзаиморасчетов = КэшВедениеВзаиморасчетовПоДоговорам[ДокОбъект.ДоговорКонтрагента];
		Если ВедениеВзаиморасчетов = Неопределено Тогда
			ВедениеВзаиморасчетов = ДокОбъект.ДоговорКонтрагента.УдалитьВедениеВзаиморасчетов;
			КэшВедениеВзаиморасчетовПоДоговорам.Вставить(ДокОбъект.ДоговорКонтрагента, ВедениеВзаиморасчетов);
		КонецЕсли;
		
		Если ВедениеВзаиморасчетов = Перечисления.УдалитьВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			
			Если ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовПоАвансам) Тогда
				ДокОбъект[ИмяСпособаЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Иначе
				ДокОбъект[ИмяСпособаЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;
			
		Иначе //.ПоРасчетнымДокументам
			
			Если ЗначениеЗаполнено(Выборка.СчетУчетаРасчетовПоАвансам) И ЗначениеЗаполнено(ДокОбъект[ИмяСделки]) Тогда
				ДокОбъект[ИмяСпособаЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.ПоДокументу;
				// Переносим сделку в табличную часть
				ДокОбъект[ИмяТабЧастиЗачетаАвансов].Очистить();
				СтрокаАванса = ДокОбъект[ИмяТабЧастиЗачетаАвансов].Добавить();
				СтрокаАванса.ДокументАванса = ДокОбъект[ИмяСделки];
			Иначе
				ДокОбъект[ИмяСпособаЗачетаАвансов] = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
			КонецЕсли;
			
		КонецЕсли;
		
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		#Если Клиент Тогда
		Если Ном % 10 = 0 Тогда
			Состояние("Установка способа зачета авансов в документах <" + ПредставлениеДокумента + ">: "
			+ "обработано " + Ном + " из " + КолДокументов);
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли

КонецПроцедуры

// Заполнение реквизита СпособЗачетаАвансов в документах поступления и реализации при переходе на 2.0.7
//
Процедура ЗаполнитьСпособЗачетаАвансовВДокументахПоступленияРеализации(КэшВедениеВзаиморасчетовПоДоговорам)

	// Поступление товаров и услуг
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	ВЫБОР
	|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
	|				ИЛИ Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ИНАЧЕ Док.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Поступление товаров и услуг", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Поступление доп. расходов
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПоступлениеДопРасходов КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Поступление доп. расходов", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Поступление из переработки
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПоступлениеИзПереработки КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Поступление из переработки", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Поступление НМА
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПоступлениеНМА КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Поступление НМА", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Реализация товаров и услуг
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	ВЫБОР
	|		КОГДА Док.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
	|				ИЛИ Док.ДоговорКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
	|			ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ИНАЧЕ Док.СчетУчетаРасчетовПоАвансам
	|	КОНЕЦ КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Реализация товаров и услуг", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Реализация отгруженных товаров
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.РеализацияОтгруженныхТоваров КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Реализация отгруженных товаров", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Реализация услуг по переработке
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.РеализацияУслугПоПереработке КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Реализация услуг по переработке", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);

	// Передача ОС
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПередачаОС КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Передача ОС", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
		
	// Передача НМА
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ПередачаНМА КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Передача НМА", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
		
	// Акт об оказании производственных услуг
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.АктОбОказанииПроизводственныхУслуг КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Акт об оказании производственных услуг", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам);
		
	// Отчет комиссионера о продажах
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.СчетУчетаРасчетовПоАвансамПолученным КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК Док
	|ГДЕ
	|	Док.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	ЗаполнитьСпособЗачетаАвансовВДокументе("Отчет комиссионера о продажах", 
		ТекстЗапроса, КэшВедениеВзаиморасчетовПоДоговорам, 
		"УдалитьСделкаПоРеализации");
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДляЗачетаАвансовИРаспределенияОплат()

	// Ключ - Договор, Значение - ВедениеВзаиморасчетов
	КэшВедениеВзаиморасчетовПоДоговорам = Новый Соответствие; 
	
	// Заполнение реквизита СпособПогашенияЗадолженности в документах оплаты
	ЗаполнитьСпособРаспределенияВДокументахОплаты(КэшВедениеВзаиморасчетовПоДоговорам);

	// Заполнение реквизита СпособЗачетаАвансов в документах поступления и реализации
	ЗаполнитьСпособЗачетаАвансовВДокументахПоступленияРеализации(КэшВедениеВзаиморасчетовПоДоговорам);

КонецПроцедуры

// Заполнение реквизитов СчетУчетаРасчетовСКонтрагентом и СчетУчетаРасчетовПоАвансам 
// в документах "Реализация отгруженных товаров" при переходе на 2.0.7
//
Процедура ЗаполнитьСчетаРасчетовРеализацииОтгруженныхТоваров()
	
	#Если Клиент Тогда
	Состояние("Заполнение счетов расчетов в документах <Реализация отгруженных товаров>");
	#КонецЕсли

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК ДокСсылка,
	|	Док.ДокументОтгрузки.СчетУчетаРасчетовСКонтрагентом КАК СчетУчетаРасчетовСКонтрагентом,
	|	Док.ДокументОтгрузки.СчетУчетаРасчетовПоАвансам КАК СчетУчетаРасчетовПоАвансам
	|ИЗ
	|	Документ.РеализацияОтгруженныхТоваров КАК Док
	|ГДЕ
	|	Док.СчетУчетаРасчетовСКонтрагентом = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И Док.СчетУчетаРасчетовПоАвансам = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И (Док.ДокументОтгрузки.СчетУчетаРасчетовСКонтрагентом <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|		ИЛИ Док.ДокументОтгрузки.СчетУчетаРасчетовПоАвансам <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КолДокументов = Выборка.Количество();
	
	Ном = 0;
	
	Пока Выборка.Следующий() Цикл
		
		Ном = Ном + 1;
	
		ДокОбъект = Выборка.ДокСсылка.ПолучитьОбъект();
		ДокОбъект.СчетУчетаРасчетовСКонтрагентом = Выборка.СчетУчетаРасчетовСКонтрагентом;
		ДокОбъект.СчетУчетаРасчетовПоАвансам     = Выборка.СчетУчетаРасчетовПоАвансам;
		
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	
		#Если Клиент Тогда
		Если Ном % 10 = 0 Тогда
			Состояние("Заполнение счетов расчетов в документах <Реализация отгруженных товаров>: "
			+ "обработано " + Ном + " из " + КолДокументов);
		КонецЕсли;
		#КонецЕсли
		
	КонецЦикла;

	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры

// }КОРП

// Заполнение реквизита Оплачено платежных поручений при переходе на 2.0.15
//
Процедура ЗаполнитьПризнакОплаченоПлатежныхПоручений()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ДоговорыКонтрагентов
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Проведен = ИСТИНА
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.НомерСтроки = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеСРасчетногоСчета.ДокументОснование,
	|	ЕСТЬNULL(ВТ_ДоговорыКонтрагентов.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДоговорыКонтрагентов КАК ВТ_ДоговорыКонтрагентов
	|		ПО СписаниеСРасчетногоСчета.Ссылка = ВТ_ДоговорыКонтрагентов.Ссылка
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|	И СписаниеСРасчетногоСчета.ДокументОснование ССЫЛКА Документ.ПлатежноеПоручение
	|	И СписаниеСРасчетногоСчета.ДокументОснование.Оплачено = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
	Пока РезультатЗапроса.Следующий() Цикл
		
		Попытка
		ДокументОбъект = РезультатЗапроса.ДокументОснование.ПолучитьОбъект();
		ДокументОбъект.ДоговорКонтрагента = РезультатЗапроса.ДоговорКонтрагента;
		ДокументОбъект.Оплачено = Истина;
		ДокументОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеСохраненныхНастроекСтандартныхОтчетовДобавлениеСортировкиПоПериоду()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.КарточкаСчета");
	СписокОтчетов.Добавить("ОтчетОбъект.КарточкаСубконто");
	СписокОтчетов.Добавить("ОтчетОбъект.ОтчетПоПроводкам");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				НастройкиФормы = Неопределено;
				СохраненныеНастройки = СправочникОбъект.ХранилищеНастроек.Получить();
				Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
					Если СохраненныеНастройки.Свойство("НастройкиКомпоновщика") Тогда
						Если ТипЗнч(СохраненныеНастройки.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных") Тогда
							Порядок = СохраненныеНастройки.НастройкиКомпоновщика.Порядок.Элементы.Вставить(0, Тип("ЭлементПорядкаКомпоновкиДанных"));	
							Порядок.Использование     = Истина;
							Порядок.Поле              = Новый ПолеКомпоновкиДанных("Период");
							Порядок.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СохраненныеНастройки);
				
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСохраненныеНастройкиСтандартныхОтчетовДобавлениеГруппировкиКорПодразделенияАнализСчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСчета");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СохраненныеНастройки = СправочникОбъект.ХранилищеНастроек.Получить();
				Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
					Если СохраненныеНастройки.Свойство("ДанныеОтчета") Тогда
						ГруппировкаКор = Неопределено;
						Если СохраненныеНастройки.ДанныеОтчета.Свойство("ГруппировкаКор", ГруппировкаКор) Тогда
							Для каждого СтрокаГруппировки Из ГруппировкаКор Цикл
								МассивДляУдаления = Новый Массив;
								Для каждого СтрокаСписка Из СтрокаГруппировки.ПоСубконто Цикл
									Если СтрокаСписка.Значение = "Подразделение" ИЛИ СтрокаСписка.Значение = "Подразделения" Тогда
										МассивДляУдаления.Добавить(СтрокаСписка);
									КонецЕсли;
								КонецЦикла;
								
								Для инд = 0 По МассивДляУдаления.Количество() - 1 Цикл
									СтрокаГруппировки.ПоСубконто.Удалить(МассивДляУдаления[инд]);
								КонецЦикла;
							КонецЦикла;
							
							Для каждого СтрокаГруппировки Из ГруппировкаКор Цикл
								Если СтрокаГруппировки.Счет.УчетПоПодразделениям Тогда
									СтрокаСпискаПодразделение = СтрокаГруппировки.ПоСубконто.НайтиПоЗначению("Подразделения");
									Если СтрокаСпискаПодразделение = Неопределено Тогда
										Элемент = СтрокаГруппировки.ПоСубконто.Добавить("Подразделения", "", Ложь);
										КоличествоЗначений = СтрокаГруппировки.ПоСубконто.Количество();
										СтрокаГруппировки.ПоСубконто.Сдвинуть(Элемент, -КоличествоЗначений + 1);
									КонецЕсли;
								КонецЕсли;
								
								Представление = "";
								Для Каждого СтрокаСписка Из СтрокаГруппировки.ПоСубконто Цикл
									Если СтрокаСписка.Пометка Тогда
										Представление = Представление + СтрокаСписка.Значение + ", ";
									КонецЕсли;
								КонецЦикла;
								СтрокаГруппировки.Представление = Сред(Представление, 1, СтрДлина(Представление) - 2);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СохраненныеНастройки);
				СправочникОбъект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеСохраненныхНастроекСтандартныхОтчетовДобавлениеАвтоотступа()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.НастраиваемыйОбъект В (&СписокОтчетов)
	|	И (НЕ СохраненныеНастройки.ПометкаУдаления)";
	
	СписокОтчетов = Новый Массив;
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСчета");
	СписокОтчетов.Добавить("ОтчетОбъект.АнализСубконто");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотноСальдоваяВедомость");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотноСальдоваяВедомостьПоСчету");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотыСчета");
	СписокОтчетов.Добавить("ОтчетОбъект.ОборотыМеждуСубконто");
	
	Запрос.УстановитьПараметр("СписокОтчетов", СписокОтчетов);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
				
				НастройкиФормы = Неопределено;
				СохраненныеНастройки = СправочникОбъект.ХранилищеНастроек.Получить();
				Если ТипЗнч(СохраненныеНастройки) = Тип("Структура") Тогда
					Если СохраненныеНастройки.Свойство("НастройкиКомпоновщика") Тогда
						Если ТипЗнч(СохраненныеНастройки.НастройкиКомпоновщика) = Тип("НастройкиКомпоновкиДанных") Тогда
							УсловноеОформлениеАвтоотступа = Неопределено;
							Для каждого ЭлементОформления Из СохраненныеНастройки.НастройкиКомпоновщика.УсловноеОформление.Элементы Цикл
								Если ЭлементОформления.Представление = "Уменьшенный автоотступ" Тогда
									УсловноеОформлениеАвтоотступа = ЭлементОформления;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							
							Если УсловноеОформлениеАвтоотступа = Неопределено Тогда
								УсловноеОформлениеАвтоотступа = СохраненныеНастройки.НастройкиКомпоновщика.УсловноеОформление.Элементы.Добавить();
								УсловноеОформлениеАвтоотступа.Представление = "Уменьшенный автоотступ";
								УсловноеОформлениеАвтоотступа.Оформление.УстановитьЗначениеПараметра("Автоотступ", 1);
								УсловноеОформлениеАвтоотступа.Использование = Истина;
								УсловноеОформлениеАвтоотступа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
							Иначе
								УсловноеОформлениеАвтоотступа.Поля.Элементы.Очистить();
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				СправочникОбъект.ХранилищеНастроек = Новый ХранилищеЗначения(СохраненныеНастройки);
				СправочникОбъект.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Снятие флага отражения в НУ у статьи прочих доходов и расходов "Курсовые разницы по расчетам в у.е." при переходе на 2.0.19
Процедура СнятьФлагНУСтатьиКурсовыеРазницыПоРасчетамВУЕ()

	СтатьяКурсовыхРазниц = Справочники.ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ;
	Если СтатьяКурсовыхРазниц.ПринятиеКналоговомуУчету Тогда
		СправочникОбъект = СтатьяКурсовыхРазниц.ПолучитьОбъект();
		СправочникОбъект.ПринятиеКналоговомуУчету = Ложь;
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		СправочникОбъект.Записать();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// БУХГАЛТЕРСКИЙ УЧЕТ

// Устанавливает флаг "Запретить использовать в проводках"
// хозрасчетным счетам 
//
Процедура УстановитьПараметрыСчетовБУ()

	НачатьТранзакцию();

    #Если Клиент Тогда
	Состояние("Установка запрета использования в проводках групп счетов...");
	#КонецЕсли

	ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();
	Пока ВыборкаСчетов.Следующий() Цикл

		Если НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель) Тогда
			Продолжить;
		КонецЕсли;

		Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();
		Если Объект.ЗапретитьИспользоватьВПроводках Тогда
			Продолжить;
		КонецЕсли;

		Объект.ЗапретитьИспользоватьВПроводках = Истина;
		Объект.Записать();

	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры

// Заполнение реквизитов справочника "Прочие доходы и расходы"
//
Процедура ЗаполнитьСправочникПрочиеДоходыИРасходы()

	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;

	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.КурсовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы;
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету    = Истина;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	СтатьяДоходовРасходов.Записать();

	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.СуммовыеРазницы.ПолучитьОбъект();
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету    = Истина;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	СтатьяДоходовРасходов.Записать();

	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары.ПолучитьОбъект();
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	СтатьяДоходовРасходов.Записать();
	
	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты.ПолучитьОбъект();
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;
	Если  СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат =  Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка() Тогда
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	КонецЕсли;
	СтатьяДоходовРасходов.Записать();

	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты.ПолучитьОбъект();
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	Если СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка() Тогда
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	КонецЕсли;
	СтатьяДоходовРасходов.Записать();

	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.РазницыСтоимостиВозвратаИФактическойСтоимостиТоваров.ПолучитьОбъект();
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	Если СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка() Тогда
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	КонецЕсли;
	СтатьяДоходовРасходов.Записать();
	
	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.РазницыЗалоговойИФактическойСтоимостиТары.ПолучитьОбъект();
	Если СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПустаяСсылка() Тогда
		СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;
	КонецЕсли;
	Если СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка() Тогда
		СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	КонецЕсли;
	СтатьяДоходовРасходов.Записать();
	
	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ.ПолучитьОбъект();
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ;
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Ложь;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	СтатьяДоходовРасходов.Записать();
	
	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносов.ПолучитьОбъект();
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	СтатьяДоходовРасходов.Записать();

КонецПроцедуры

// Дополнение элементов справочника "Прочие доходы и расходы"
//
Процедура ДополнитьСправочникПрочиеДоходыИРасходы(Наименование,ВидПрочихДоходовИРасходов,ПринятиеКНалоговомуУчету,ВидДеятельностиДляНалоговогоУчетаЗатрат);

    
    СтатьяДоходовРасходов = Справочники.ПрочиеДоходыИРасходы.СоздатьЭлемент();
    СтатьяДоходовРасходов.Наименование = Наименование;
    СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = ВидПрочихДоходовИРасходов;
    СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету    = ПринятиеКНалоговомуУчету;
    СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = ВидДеятельностиДляНалоговогоУчетаЗатрат;
    Попытка
        СтатьяДоходовРасходов.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
    КонецПопытки

КонецПроцедуры


// Заполнение реквизитов справочника "Расходы будущих периодов"
//
Процедура ЗаполнитьСправочникРасходыБудущихПериодов()

	РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов;

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаЕСН.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаОплатуТруда.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();
	
	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаПФР.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();
	
	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаФСС.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.Записать();
	
КонецПроцедуры

// Заполнение реквизитов справочника "Корреспонденции счетов"
//
Процедура ЗаполнитьСправочникКорреспонденций()

	#Если Клиент Тогда
	Состояние("Выполняется заполнение справочника корреспонденций счетов");
	#КонецЕсли
	
	Макет = Справочники.КорреспонденцииСчетов.ПолучитьМакет("Макет");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорреспонденцииСчетов.Код
	               |ИЗ
	               |	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов";
	ВсеКорреспонденции = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки=1;
	Пока Истина Цикл
		
		Номер = Макет.область(НомерСтроки,1).Текст;
		Если НЕ ЗначениеЗаполнено(Номер) Тогда
			//Т.е. если прочли весь макет
			Прервать;
		КонецЕсли;
			
		НайденСуществующий = ВсеКорреспонденции.Найти(формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ="));
		Если Не ЗначениеЗаполнено(НайденСуществующий) Тогда
			НовыйСпр = Справочники.КорреспонденцииСчетов.СоздатьЭлемент();
			НовыйСпр.СчетДт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Макет.область(НомерСтроки,3).Текст);
			НовыйСпр.СчетКт = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Макет.область(НомерСтроки,4).Текст);
			НовыйСпр.Содержание 			= Макет.область(НомерСтроки,2).Текст;
			НовыйСпр.ТипДокумента 			= Макет.область(НомерСтроки,5).Текст;
			НовыйСпр.ВидОперацииДокумента 	= Макет.область(НомерСтроки,6).Текст;
			НовыйСпр.ЗакладкаДокумента 		= Макет.область(НомерСтроки,7).Текст;
			НовыйСпр.Меню 					= Макет.область(НомерСтроки,8).Текст;
			НовыйСпр.Код 					= формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ=");
			НовыйСпр.Записать();
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("Заполнение справочника корреспонденций счетов выполнено");
	#КонецЕсли
	
КонецПроцедуры

// Обновление реквизитов справочника "Корреспонденции счетов"
//
Процедура ОбновитьСодержаниеСправочникаКорреспонденций()

	#Если Клиент Тогда
	Состояние("Выполняется обновление справочника корреспонденций счетов");
	#КонецЕсли
	
	Макет = Справочники.КорреспонденцииСчетов.ПолучитьМакет("Макет");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КорреспонденцииСчетов.Ссылка,
	               |	КорреспонденцииСчетов.Код,
	               |	КорреспонденцииСчетов.Содержание,
	               |	КорреспонденцииСчетов.СчетДт,
	               |	КорреспонденцииСчетов.СчетКт,
	               |	КорреспонденцииСчетов.ТипДокумента,
	               |	КорреспонденцииСчетов.ВидОперацииДокумента,
	               |	КорреспонденцииСчетов.ЗакладкаДокумента,
	               |	КорреспонденцииСчетов.Меню
	               |ИЗ
	               |	Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов";
	ВсеКорреспонденции = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки=1;
	Пока Истина Цикл
		
		Номер                = Макет.Область(НомерСтроки,1).Текст;
		Содержание           = Макет.Область(НомерСтроки,2).Текст;
		СчетДт               = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Макет.Область(НомерСтроки,3).Текст);
		СчетКт               = ПланыСчетов.Хозрасчетный.НайтиПоКоду(Макет.Область(НомерСтроки,4).Текст);
		ТипДокумента         = Макет.Область(НомерСтроки,5).Текст;
		ВидОперацииДокумента = Макет.Область(НомерСтроки,6).Текст;
		ЗакладкаДокумента    = Макет.Область(НомерСтроки,7).Текст;
		Меню                 = Макет.Область(НомерСтроки,8).Текст;
		Если НЕ ЗначениеЗаполнено(Номер) Тогда
			//Т.е. если прочли весь макет
			Прервать;
		КонецЕсли;
			
		НайденСуществующий = ВсеКорреспонденции.Найти(формат(Число(Номер),"ЧЦ=9; ЧВН=; ЧГ="),"Код");
		Если ЗначениеЗаполнено(НайденСуществующий) и
			(НайденСуществующий.Содержание<>Содержание или 
			НайденСуществующий.СчетДт<>СчетДт или
			НайденСуществующий.СчетКт<>СчетКт или
			НайденСуществующий.ТипДокумента<>ТипДокумента или
			НайденСуществующий.ВидОперацииДокумента<>ВидОперацииДокумента или
			НайденСуществующий.ЗакладкаДокумента<>ЗакладкаДокумента или
			НайденСуществующий.Меню<>Меню)
		Тогда
			СтарыйСпр = НайденСуществующий.Ссылка.ПолучитьОбъект();
			СтарыйСпр.Содержание           = Содержание;
			СтарыйСпр.СчетДт               = СчетДт;
			СтарыйСпр.СчетКт               = СчетКт;
			СтарыйСпр.ТипДокумента         = ТипДокумента;
			СтарыйСпр.ВидОперацииДокумента = ВидОперацииДокумента;
			СтарыйСпр.ЗакладкаДокумента    = ЗакладкаДокумента;
			СтарыйСпр.Меню                 = Меню;
			СтарыйСпр.Записать();
		КонецЕсли;
		НомерСтроки = НомерСтроки+1;
		
	КонецЦикла;
	
	#Если Клиент Тогда
	Состояние("Обновление справочника корреспонденций счетов выполнено");
	#КонецЕсли
	
КонецПроцедуры

// Удаление элемента справочника "Корреспонденции счетов"
//
Процедура УдалитьЗаписьСправочникаКорреспонденций(СчетДт, СчетКт, Содержание)
    
	#Если Клиент Тогда
	Состояние("Выполняется обновление справочника корреспонденций счетов");
    #КонецЕсли

    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   КорреспонденцииСчетов.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.КорреспонденцииСчетов КАК КорреспонденцииСчетов
        |ГДЕ
        |   КорреспонденцииСчетов.СчетДт.Код = &СчетДт
        |   И КорреспонденцииСчетов.СчетКт.Код = &СчетКт
        |   И КорреспонденцииСчетов.Содержание = &Содержание";

    Запрос.УстановитьПараметр("Содержание", Содержание);
    Запрос.УстановитьПараметр("СчетДт", СчетДт);
    Запрос.УстановитьПараметр("СчетКт", СчетКт);

    Результат = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = Результат.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект().Удалить();
       
    КонецЦикла;
    
КонецПроцедуры


// установка реквизита отражать в НУ у предопределенных элементов 
// справочника Статьи затрат
Процедура ОбновитьСправочникСтатьиЗатрат()

	Справочник_Менеджер = Справочники.СтатьиЗатрат;

	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();
	Если ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка() Тогда
		ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
		ЭлементСправочника.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
		ЭлементСправочника.Записать();
	КонецЕсли;

	ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходыЕНВД.ПолучитьОбъект();
	Если ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПустаяСсылка() Тогда
		ЭлементСправочника.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьОблагаемаяЕНВД;
		ЭлементСправочника.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.ПрочиеРасходы;
		ЭлементСправочника.Записать();
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСправочникСтатьиЗатрат()

// перенумерация справочника 
// Прочие доходы и расходыв 
// в связи с добавлением нового 
// предопределенного элемента
//
Процедура ОбновитьСправочникПрочиеДоходыИРасходы()
	
	ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;
	
	СтатьяДоходовРасходов = ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносов.ПолучитьОбъект();
	СтатьяДоходовРасходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеКосвенныеРасходы;
	СтатьяДоходовРасходов.ПринятиеКНалоговомуУчету = Истина;
	СтатьяДоходовРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ПредпринимательскаяДеятельностьНеОблагаемаяЕНВД;
	СтатьяДоходовРасходов.Записать();
	
	//Установить коды предопределенных элементов справочника "Прочие доходы и расходы"
	СписокПредопределенныхЭлементов = Новый СписокЗначений;
	СписокПредопределенныхЭлементов.Добавить(Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносов);
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);	
	
КонецПроцедуры

// Установка субконто "Документы расчетов с контрагентами" на счетах расчетов (60, 62, 76)
//
Процедура УстановитьУчетПоДокументамНаСчетахРасчетов()
	
	ОбрабатываемыеСчета = Новый Массив;
	
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);     // 60
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиИЗаказчиками);      // 62
	ОбрабатываемыеСчета.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами); // 76
	
	// Исключения - счета (включая подчиненные им), на которых есть аналитика "Контрагенты" и "Договоры",
	// но на которых не нужно устанавливать субконто "Документы расчетов с контрагентом"
	СчетаИсключения = Новый Массив;
	
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяВыданные); 										// 60.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ВекселяПолученные); 										// 62.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуЛичномуИДобровольномуСтрахованию); // 76.01
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоПричитающимсяДивидендам); 						// 76.03
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоИмущественномуИЛичномуСтрахованиюВал);      		// 76.21
	СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);      						// 76.НА
	
	Запрос = Новый запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&ОбрабатываемыеСчета)
	|	И (НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&СчетаИсключения))
	|	И ХозрасчетныйВидыСубконто.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами)
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)";
	
	Запрос.УстановитьПараметр("ОбрабатываемыеСчета", ОбрабатываемыеСчета);
	Запрос.УстановитьПараметр("СчетаИсключения",     СчетаИсключения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		СчетОбъект    = Выборка.Счет.ПолучитьОбъект();
		Субконто      = СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами, "ВидСубконто");
		НетДокументов = (Субконто = Неопределено);
		ВсегоСубконто = СчетОбъект.ВидыСубконто.Количество();
		Если НетДокументов И ВсегоСубконто < 3 Тогда
		
			НовыйВид = СчетОбъект.ВидыСубконто.Добавить();
			
			НовыйВид.ВидСубконто    = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами;
			НовыйВид.Суммовой       = Истина;
			НовыйВид.Валютный       = Истина;
			НовыйВид.Количественный = Истина;
			
			СчетОбъект.Записать();
			
			//ОбщегоНазначения.СообщитьИнформациюПользователю("План счетов ""Хозрасчетный"": на счете """ +Строка(СчетОбъект) + """ установлено субконто ""Документы расчетов с контрагентом""");
		
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Установка субконто "Виды начислений оплаты труда по статье 255 НК РФ" на счетах зарплаты (70)
Процедура УстановитьУчетНаСчетахУчетаЗарплаты()
	
	Объект = ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда.ПолучитьОбъект();
	
	Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК, "ВидСубконто");
	Если Субконто = Неопределено Тогда
		НовыйВид = Объект.ВидыСубконто.Добавить();
		НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК;
		НовыйВид.Суммовой    = Истина;
		НовыйВид.ТолькоОбороты    = Истина;
		Объект.Записать();
	КонецЕсли;
	
	Субконто = Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций, "ВидСубконто");
	Если Субконто <> Неопределено 
		И Объект.ВидыСубконто[1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций Тогда
		Объект.ВидыСубконто.Сдвинуть(1,-1);
		Объект.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Запись новой ставки рефинансирования в регистр сведений
//
Процедура УстановитьСтавкуРефинансирования(Ставка, Дата)
	
	СтавкаЦБ = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();
	СтавкаЦБ.Отбор.Период.Значение = Дата;
	СтавкаЦБ.Отбор.Период.Использование = Истина;
	СтавкаЦБ.Прочитать();
	
	Если СтавкаЦБ.Количество() > 0 Тогда
		СтрокаНабора = СтавкаЦБ[0];
		
	Иначе
		СтрокаНабора = СтавкаЦБ.Добавить();
	КонецЕсли;
	
	СтрокаНабора.Период = Дата;
	СтрокаНабора.Размер = Ставка;
	СтавкаЦБ.Записать();	
	
КонецПроцедуры // УстановитьСтавкуРефинансирования()

Процедура ОбновитьНаименованиеСчетовПоНалогообложению()
	
	Счет = ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Выручка от продаж, не облагаемых ЕНВД" Тогда
		Счет.Наименование = "Выручка по деятельности с основной системой налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.ВыручкаЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Выручка от продаж, облагаемых ЕНВД" Тогда
		Счет.Наименование = "Выручка по отдельным видам деятельности с особым порядком налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Себестоимость продаж, не облагаемых ЕНВД" Тогда
		Счет.Наименование = "Себестоимость продаж по деятельности с основной системой налогообложения";
		Счет.Записать();
	КонецЕсли;   
	
	Счет = ПланыСчетов.Хозрасчетный.СебестоимостьПродажЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Себестоимость продаж, облагаемых ЕНВД" Тогда
		Счет.Наименование = "Себестоимость продаж по отдельным видам деятельности с особым порядком налогообложения";
		Счет.Записать();
	КонецЕсли;   
	
	Счет = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Расходы на продажу по деятельности, не облагаемой ЕНВД" Тогда
		Счет.Наименование = "Расходы на продажу по деятельности с основной системой налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Расходы на продажу по деятельности, облагаемой ЕНВД" Тогда
		Счет.Наименование = "Расходы на продажу по отдельным видам деятельности с особым порядком налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Управленческие расходы по деятельности, не облагаемой ЕНВД" Тогда
		Счет.Наименование = "Управленческие расходы по деятельности с основной системой налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Управленческие расходы по деятельности, облагаемой ЕНВД" Тогда
		Счет.Наименование = "Управленческие расходы по отдельным видам деятельности с особым порядком налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиНеЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Прибыли и убытки по деятельности, не облагаемой ЕНВД" Тогда
		Счет.Наименование = "Прибыли и убытки по деятельности с основной системой налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
	
	Счет = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиЕНВД.ПолучитьОбъект();
	Если Счет.Наименование = "Прибыли и убытки по деятельности, облагаемой ЕНВД" Тогда
		Счет.Наименование = "Прибыли и убытки по отдельным видам деятельности с особым порядком налогообложения";
		Счет.Записать();
	КонецЕсли;                      	
		
КонецПроцедуры

// Установка аналитики на субсчетах 57 счета
Процедура ПрименитьПараметрыДляСчетовДенежныхСредств()
	
	// Денежные средства
	БУ = ПланыСчетов.Хозрасчетный.Касса;
	ВестиУчетПоСтатьямДДС = НЕ (БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто") = Неопределено);
	
	Если НЕ ВестиУчетПоСтатьямДДС Тогда
		Возврат;
	КонецЕсли;
	
	Счета = Новый Массив;

	// Счет 57
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПути);
	Счета.Добавить(ПланыСчетов.Хозрасчетный.ПереводыВПутиВал);
		
	Для Каждого Счет Из Счета Цикл
		
		СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств, "ВидСубконто");
		НетУчетаПоСтатьямДДС = СтрокаВидаСубконто = Неопределено;
		
		Если  НетУчетаПоСтатьямДДС Тогда
			СчетОбъект = Счет.ПолучитьОбъект();
			НовыйВидСубконто = СчетОбъект.ВидыСубконто.Добавить();
			НовыйВидСубконто.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств;
			НовыйВидСубконто.ТолькоОбороты = Истина;
			НовыйВидСубконто.Суммовой = Истина;
			НовыйВидСубконто.Валютный = Истина;
			
			Попытка
				СчетОбъект.Записать();			
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Замена счета я96.01 на 96 в документах "Отражение зарплаты в рег.учете" и "Операция (бухгалтерский и налоговый учет)
Процедура ЗаменаУдаленного96счета()
    
	#Если Клиент Тогда
	Состояние("Выполняется замена счета Я96.01 на счет 96");
    #КонецЕсли

	УдаленныйСчет = ПланыСчетов.Хозрасчетный.УдалитьОценочныеОбязательства;
    СчетОбъект = УдаленныйСчет.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета Я96.01, рекомендуется установить самостоятельно");
    КонецПопытки;
    
	УдаленныйСчетГруппа = ПланыСчетов.Хозрасчетный.УдалитьОценочныеОбязательстваИРезервы;
    СчетОбъект = УдаленныйСчетГруппа.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета Я96, рекомендуется установить самостоятельно");
    КонецПопытки;
    
    НовыйСчет     = ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов;
    СчетОбъект = НовыйСчет.ПолучитьОбъект();
    СчетОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(СчетОбъект.Код, ".", ""));
    Попытка
        СчетОбъект.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета 96, рекомендуется установить самостоятельно");
    КонецПопытки;
    
    // Перенос справочника "Оценочные обязательства"
    // в справочник "Оценочные обязательства и резервы"
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   УдалитьОценочныеОбязательства.Наименование КАК НаименованиеОценочногоОбязательства
        |ИЗ
        |   Справочник.УдалитьОценочныеОбязательства КАК УдалитьОценочныеОбязательства
        |ГДЕ
        |   (НЕ УдалитьОценочныеОбязательства.ПометкаУдаления)";

    Результат = Запрос.Выполнить();

    ВыборкаДетальныеЗаписи = Результат.Выбрать();

    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ТекНаименование = ВыборкаДетальныеЗаписи.НаименованиеОценочногоОбязательства;
        НовоеСубконто = Справочники.Резервы.НайтиПоНаименованию(ТекНаименование, Истина);
        Если Не ЗначениеЗаполнено(НовоеСубконто) Тогда
            НовоеСубконто = Справочники.Резервы.СоздатьЭлемент();
            НовоеСубконто.Наименование = ТекНаименование;
            Попытка
                НовоеСубконто.Записать();
            Исключение
                ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать в справочник ""Оценочные обязательства и резервы"" элемент " + ТекНаименование + "Необходимо записать его самостоятельно");
            КонецПопытки;
        КонецЕсли;
    КонецЦикла;

    
    // замена 96 счета
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   ОтражениеЗарплатыВРеглУчете.Ссылка КАК ОтражениеЗарплатыВРеглУчете
        |ИЗ
        |   Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗарплатыВРеглУчете
        |ГДЕ
        |   (ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете.СчетДт = &Счет
        |           ИЛИ ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете.СчетКт = &Счет)
        |   И ОтражениеЗарплатыВРеглУчете.Дата МЕЖДУ &НачалоПериода И &КонецПериода
        |
        |СГРУППИРОВАТЬ ПО
        |   ОтражениеЗарплатыВРеглУчете.Ссылка
        |
        |ДЛЯ ИЗМЕНЕНИЯ";

    Запрос.УстановитьПараметр("НачалоПериода", '20110101');
    Запрос.УстановитьПараметр("КонецПериода",  '20111231');
    Запрос.УстановитьПараметр("Счет",          УдаленныйСчет);

    Результат = Запрос.Выполнить();
    Рег = РегистрыБухгалтерии.Хозрасчетный;
    ВыборкаДетальныеЗаписи = Результат.Выбрать();
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл

        ТекДок = ВыборкаДетальныеЗаписи.ОтражениеЗарплатыВРеглУчете;
        Если ЗначениеЗаполнено(ТекДок) Тогда
            ТекДокОбъект = ТекДок.ПолучитьОбъект();
            Для Каждого Строка ИЗ ТекДокОбъект.ОтражениеВУчете Цикл
                Если Строка.СчетДт = УдаленныйСчет Тогда
                    ЗаменитьСчет96ВДокументе(ТекДок, НовыйСчет, Строка, "Дт");
                КонецЕсли;
                Если Строка.СчетКт = УдаленныйСчет Тогда
                    ЗаменитьСчет96ВДокументе(ТекДок, НовыйСчет, Строка, "Кт");
                КонецЕсли;
            КонецЦикла;
            
        Попытка
            ТекДокОбъект.Записать(РежимЗаписиДокумента.Запись);
        Исключение
            ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать документ " + ТекДок + "Необходимо заменить счет ""Я96.01"" на счет ""96""");
        КонецПопытки;
        КонецЕсли;
        
    КонецЦикла;
    
    Запрос.Текст = 
        "ВЫБРАТЬ РАЗРЕШЕННЫЕ
        |   Хозрасчетный.Регистратор КАК ОперацияБух
        |ИЗ
        |   РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
        |ГДЕ
        |   (Хозрасчетный.СчетДт = &Счет
        |           ИЛИ Хозрасчетный.СчетКт = &Счет)
        |   И (Хозрасчетный.Регистратор ССЫЛКА Документ.ОперацияБух
        |           ИЛИ Хозрасчетный.Регистратор ССЫЛКА Документ.ОтражениеЗарплатыВРеглУчете)
        |   И Хозрасчетный.Период МЕЖДУ &НачалоПериода И &КонецПериода
        |
        |СГРУППИРОВАТЬ ПО
        |   Хозрасчетный.Регистратор
        |
        |ДЛЯ ИЗМЕНЕНИЯ";
        
    Результат = Запрос.Выполнить();
    Рег = РегистрыБухгалтерии.Хозрасчетный;
    
    ВыборкаДетальныеЗаписи = Результат.Выбрать();
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ТекДок = ВыборкаДетальныеЗаписи.ОперацияБух;
        Если ЗначениеЗаполнено(ТекДок) Тогда
            
            Проводки = Рег.СоздатьНаборЗаписей();
            Проводки.Отбор.Регистратор.Значение = ТекДок;
            Проводки.Прочитать();
            
            Для Каждого Проводка ИЗ Проводки Цикл
                Если Проводка.СчетДт = УдаленныйСчет Тогда
                    ЗаменитьСчет96ВПроводке(ТекДок, НовыйСчет, Проводка, "Дт");
                КонецЕсли;
                Если Проводка.СчетКт = УдаленныйСчет Тогда
                    ЗаменитьСчет96ВПроводке(ТекДок, НовыйСчет, Проводка, "Кт");
                КонецЕсли;
            КонецЦикла;
            
        Попытка
            Проводки.Записать();
        Исключение
            ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать документ " + ТекДок + "Необходимо заменить счет ""Я96.01"" на счет ""96""");
        КонецПопытки;
        КонецЕсли;
        
    КонецЦикла;
           
КонецПроцедуры

Процедура ЗаменитьСчет96ВПроводке(ТекДок, НовыйСчет, Проводка, ДтКт)
    
    ТекНаименование = Проводка["Субконто" + ДтКт].УдалитьОценочныеОбязательства.Наименование;
    Проводка["Субконто" + ДтКт].Очистить();
    
    Если Не ТекНаименование = "" Тогда
        Проводка["Субконто" + ДтКт].Резервы = НайтиРезерв(ТекНаименование, ТекДок);
    КонецЕсли;
    
    Проводка["Счет" + ДтКт] = НовыйСчет;
    
Конецпроцедуры

Процедура ЗаменитьСчет96ВДокументе(ТекДок, НовыйСчет, Строка, ДтКт)
    
    ТекНаименование = Строка["Субконто" + ДтКт + "1"].Наименование;
    
    Если Не ТекНаименование = "" Тогда
        Строка["Субконто" + ДтКт + "1"] = НайтиРезерв(ТекНаименование, ТекДок);
    КонецЕсли;
    
    Строка["Счет" + ДтКт] = НовыйСчет;
    
Конецпроцедуры

Функция НайтиРезерв(ТекНаименование, ТекДок)
    НовоеСубконто = Справочники.Резервы.НайтиПоНаименованию(ТекНаименование, Истина);
    Если Не ЗначениеЗаполнено(НовоеСубконто) Тогда
            ОбщегоНазначения.СообщитьОбОшибке("Не удалось указать новое субконто ""Оценочные обязательства и резервы"" с наименованием " + ТекНаименование + "Необходимо указать его самостоятельно в документе " + ТекДок);
            НовоеСубконто = "";
    КонецЕсли;
    Возврат НовоеСубконто
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПОСЛЕДОВАТЕЛЬНОСТИ

// Сохраняет положение границ последовательностей перед обработкой данных
Процедура ЗапомнитьГраницыПоследовательностей()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВзаиморасчетыГраницы.Организация КАК Организация,
	|	ВзаиморасчетыГраницы.Регистратор КАК Регистратор,
	|	ВзаиморасчетыГраницы.МоментВремени КАК МоментВремени,
	|	""Взаиморасчеты"" КАК ИмяПоследовательности
	|ИЗ
	|	Последовательность.Взаиморасчеты.Границы КАК ВзаиморасчетыГраницы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбщаяПоследовательностьГраницы.Организация,
	|	ОбщаяПоследовательностьГраницы.Регистратор,
	|	ОбщаяПоследовательностьГраницы.МоментВремени,
	|	""ОбщаяПоследовательность""
	|ИЗ
	|	Последовательность.ОбщаяПоследовательность.Границы КАК ОбщаяПоследовательностьГраницы";
	
	ТаблицаГраницПоследовательности = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Восстанавливает положение границ последовательностей после обработки данных
Процедура ВосстановитьГраницыПоследовательностей()
	
	Если НЕ ЗначениеЗаполнено(ТаблицаГраницПоследовательности) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЗаписьГраницы Из ТаблицаГраницПоследовательности Цикл
		СтруктураОтбора = Новый Структура("Организация", ЗаписьГраницы.Организация);
		Последовательности[ЗаписьГраницы.ИмяПоследовательности].УстановитьГраницу(ЗаписьГраницы.МоментВремени ,СтруктураОтбора);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// НДС

// {КОРП
Процедура ОбновитьСчетаФактурыВыданныеНаАвансИУП()
	
	#Если Клиент Тогда
	//Обновление документов "Счет-фактура выданный" на аванс - перенос данных о сумме аванса из шапки в ТЧ.
	Состояние("Выполняется обновление данных в связи с уточнениями законодательства по НДС, внесенными письмом Минфина от 6 марта 2009 г. N 03-07-15/39");
	#КонецЕсли

	Выборка = РегистрыСведений.УчетнаяПолитикаОрганизаций.Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = Выборка.ПолучитьМенеджерЗаписи();
		Запись.Прочитать();
		Если Запись.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка() Тогда
			Запись.ПорядокРегистрацииСчетовФактурНаАванс = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
			Запись.Записать();
		КонецЕсли;
	КонецЦикла;		
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	СчетФактураВыданныйАвансы.Ссылка
	               |ИЗ
	               |	Документ.СчетФактураВыданный.Авансы КАК СчетФактураВыданныйАвансы
	               |ГДЕ
	               |	СчетФактураВыданныйАвансы.УдалитьСчетНаОплату <> ЗНАЧЕНИЕ(Документ.СчетНаОплатуПокупателю.ПустаяСсылка)
	               |	И СчетФактураВыданныйАвансы.Ссылка.Дата >= ДАТАВРЕМЯ(2009, 1, 1)";
				   
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
	
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СчетФактура = Выборка.Ссылка.ПолучитьОбъект();
			ТаблицаАвансов = СчетФактура.Авансы.ВыгрузитьКолонки("Номенклатура, Содержание, Сумма, СуммаНДС, СтавкаНДС");
		
			Для Каждого СтрокаАвансы Из СчетФактура.Авансы Цикл
				Если Не ЗначениеЗаполнено(СтрокаАвансы.УдалитьСчетНаОплату) Тогда
					НоваяСтрока = ТаблицаАвансов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАвансы);
				Иначе
					ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СчетФактура.ПолучитьТаблицуАвансовПоСчетуНаОплату(СтрокаАвансы.Сумма, СтрокаАвансы.СуммаНДС, СтрокаАвансы.СтавкаНДС, СтрокаАвансы.УдалитьСчетНаОплату),
																ТаблицаАвансов);
				КонецЕсли;
			КонецЦикла;
			
			СчетФактура.Авансы.Загрузить(ТаблицаАвансов);
			
			СчетФактура.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры
// }КОРП

Процедура УстановитьРеквизитУчетнойПолитикиНДСпоОтгрузкеНедвижимости()
    
    НаборЗаписейРегистра = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
    НаборЗаписейРегистра.Прочитать();
    Если НаборЗаписейРегистра.Количество() <> 0 Тогда
        Для Индекс = 0 По НаборЗаписейРегистра.Количество()-1 Цикл
            ЗаписьРегистра = НаборЗаписейРегистра[Индекс];
            Если ЗаписьРегистра.Период >= '20110101'
                И ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
                ЗаписьРегистра.НачислятьНДСПриПередачеНедвижимости = Истина;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    Попытка
        НаборЗаписейРегистра.Записать();
    Исключение
        ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры

Процедура ОбновитьНаименованиеСчета1905()
	
	Счет = ПланыСчетов.Хозрасчетный.НДСуплачиваемыйТаможеннымОрганам.ПолучитьОбъект();
	Если Счет.Наименование = "НДС, уплачиваемый таможенным органам по ввозимым товарам" Тогда
		Счет.Наименование = "НДС, уплаченный при ввозе товаров на территорию Российской Федерации";
		Счет.Записать();
	КонецЕсли;                      	
	
КонецПроцедуры

// }КОРП

// Выполнить действия, связанные с отменой начисления НДС по суммовым разницам с 01.10.2011 (245-ФЗ от 19.07.2011)
//
Процедура ПроверитьНачислениеНДСпоСуммовымРазницамПосле01102011()
	
	// Сбрасываем флаг "Учитывать положительные суммовые разницы при начислении НДС"
	// в записях учетной политики с датой начиная с 01.10.2011
	НаборЗаписейРегистра = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Прочитать();
	Для каждого ЗаписьРегистра Из НаборЗаписейРегистра Цикл
		Если ЗаписьРегистра.Период >= '20111001'
			И ЗаписьРегистра.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС Тогда
			ЗаписьРегистра.УчитыватьПоложительныеСуммовыеРазницыПриНачисленииНДС = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НаборЗаписейРегистра.Модифицированность() Тогда
	    Попытка
    	    НаборЗаписейРегистра.Записать();
    	Исключение
        	ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
    	КонецПопытки;
	КонецЕсли;
	
    // Сообщаем о наличии проведенных счетов-фактур на суммовые разницы, выписанных начиная с 01.10.2011
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Док.Ссылка
	|ИЗ Документ.СчетФактураВыданный КАК Док
	|ГДЕ
	|	Док.Дата >= ДАТАВРЕМЯ(2011,10,1)
	|	И Док.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.НДСВидСчетаФактуры.НаСуммовуюРазницу)
	|	И Док.Проведен";
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ТекстСообщения = "Обнаружены счета-фактуры на суммовую разницу, выписанные в периоде, начиная с 01.10.2011 г.
		|Рекомендется пометить такие счета-фактуры на удаление.";
		ОбщегоНазначения.СообщитьИнформациюПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНТАКТНАЯ ИНФОРМАЦИЯ

// Заполнение реквизитов справочника "Виды контактной информации"
//
Процедура ЗаполнитьСправочникВидыКонтактнойИнформации()

	// Справочник "Контрагенты"
	Вид = Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты;
	ОбновитьВидКИ(1, 0, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента,          "Юридический адрес", Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Адрес,   Вид);
	ОбновитьВидКИ(2, 0, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента,        "Фактический адрес", Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Адрес,   Вид);
	ОбновитьВидКИ(3, 0, Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента,          "Телефон",           Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон, Вид);
	ОбновитьВидКИ(4, 0, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента, "Другая информация", Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Другое,  Вид);
	
	// Справочник "Организации"
	Вид = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
	ОбновитьВидКИ(1, 2, Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,           "Юридический адрес",                           Истина, Истина, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(2, 2, Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,         "Фактический адрес",                           Истина, Истина, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(3, 0, Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,           "Телефон",                                       Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон,               Вид);
	ОбновитьВидКИ(4, 1, Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,              "Факс",                                          Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон,               Вид);
	ОбновитьВидКИ(5, 0, Справочники.ВидыКонтактнойИнформации.АдресОрганизацииПочтовый,     "Почтовый адрес",                                Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(6, 0, Справочники.ВидыКонтактнойИнформации.АдресИнострОрганизацииУчред,  "Учредительный адрес иностранной организации",   Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(7, 0, Справочники.ВидыКонтактнойИнформации.ТелефонПоЮрАдресуОрганизации, "Телефон по юридическому адресу",                Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон,               Вид);
	ОбновитьВидКИ(8, 0, Справочники.ВидыКонтактнойИнформации.EmailОрганизации,             "Email",                                         Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Вид);
	ОбновитьВидКИ(9, 0, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,  "Другая информация",                             Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Другое,                Вид);
	
	// Справочник "Пользователи"
	Вид = Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи;
	ОбновитьВидКИ(1, 0, Справочники.ВидыКонтактнойИнформации.СлужебныйАдресЭлектроннойПочтыПользователя, "Служебный адрес электронной почты", Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Вид);
	ОбновитьВидКИ(2, 0, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя,               "Другая информация",                 Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Другое,  Вид);
	
	// Справочник "Контактные лица"
	Вид = Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица;
	ОбновитьВидКИ(1, 0, Справочники.ВидыКонтактнойИнформации.ИнформАдресКонтактногоЛица,      "Адрес для информирования", Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Адрес,   Вид);
	ОбновитьВидКИ(2, 0, Справочники.ВидыКонтактнойИнформации.ТелефонМобильный,                "Телефон мобильный",        Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон, Вид);
	ОбновитьВидКИ(3, 0, Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,          "Телефон рабочий",          Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон, Вид);
	ОбновитьВидКИ(4, 0, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактногоЛица, "Другая информация",        Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Другое,  Вид);
	
	// Справочник "Физические лица"
	Вид = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
	ОбновитьВидКИ(1, 2, Справочники.ВидыКонтактнойИнформации.ЮрАдресФизЛица,          "Адрес по прописке",        Истина, Истина, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(2, 2, Справочники.ВидыКонтактнойИнформации.ФактАдресФизЛица,        "Адрес проживания",         Истина, Истина, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(3, 0, Справочники.ВидыКонтактнойИнформации.ТелефонФизЛица,          "Телефон",                    Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон,               Вид);
	ОбновитьВидКИ(4, 2, Справочники.ВидыКонтактнойИнформации.ИнформАдресФизЛица,      "Адрес для информирования", Истина, Истина, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(5, 0, Справочники.ВидыКонтактнойИнформации.ИнострАдресФизЛица,      "Адрес за пределами РФ",      Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Адрес,                 Вид);
	ОбновитьВидКИ(6, 0, Справочники.ВидыКонтактнойИнформации.ТелефонСлужебныйФизЛица, "Телефон служебный",          Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон,               Вид);
	ОбновитьВидКИ(7, 0, Справочники.ВидыКонтактнойИнформации.EmailФизЛица,            "Email",                      Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Вид);
	ОбновитьВидКИ(8, 0, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица, "Другая информация",          Ложь,   Ложь, Перечисления.ТипыКонтактнойИнформации.Другое,                Вид);
	
	// Справочник "Подразделения"
	Вид = Перечисления.ВидыОбъектовКонтактнойИнформации.ПодразделенияОрганизаций;
	ОбновитьВидКИ(1, 2, Справочники.ВидыКонтактнойИнформации.ФактАдресПодразделенияОрганизации,        "Фактический адрес", Истина, Истина, Перечисления.ТипыКонтактнойИнформации.Адрес,   Вид);
	ОбновитьВидКИ(2, 0, Справочники.ВидыКонтактнойИнформации.ТелефонПодразделенияОрганизации,          "Телефон",           Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон, Вид);
	ОбновитьВидКИ(3, 1, Справочники.ВидыКонтактнойИнформации.ФаксПодразделенияОрганизации,             "Факс",              Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Телефон, Вид);
	ОбновитьВидКИ(4, 0, Справочники.ВидыКонтактнойИнформации.EmailПодразделенияОрганизации,            "Email",             Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, Вид);
	ОбновитьВидКИ(5, 0, Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизации, "Другая информация", Ложь, Ложь, Перечисления.ТипыКонтактнойИнформации.Другое,  Вид);
	
	
	// Установим порядок для остальных
	ТЗ = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации,
	|	МАКСИМУМ(ВидыКонтактнойИнформации.Порядок) КАК Порядок
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|
	|СГРУППИРОВАТЬ ПО
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТЗ;
	Выборка = Запрос.Выполнить().Выбрать();
	Порядки = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Порядки.Вставить(Выборка.ВидОбъектаКонтактнойИнформации, Выборка.Порядок);
	КонецЦикла;
	
	ТЗ = "ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка,
	|	ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации КАК Вид
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Порядок = 0
	|	И ВидыКонтактнойИнформации.Тип <> &ПустойТип
	|	И ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации <> &ПустойВид
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид,
	|	ВидыКонтактнойИнформации.Тип,
	|	ВидыКонтактнойИнформации.Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТЗ;
	Запрос.УстановитьПараметр("ПустойТип", Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойВид", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Вид = Выборка.Вид;
		Порядок = Порядки.Получить(Вид);
		Если Порядок = Неопределено Тогда
			Порядок = 1;
			Порядки.Вставить(Вид, 1);
		Иначе
			Порядок = Порядок + 1;
			Порядки.Вставить(Вид, Порядок);
		КонецЕсли;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Порядок = Порядок;
		Объект.Записать();
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСправочникВидыКонтактнойИнформации()

// Обновить один вид контактной информации
Процедура ОбновитьВидКИ(Порядок, НомерКартинки, Ссылка, Наименование, РедактированиеВДиалоге, МожноРедактироватьТолькоВДиалоге, Тип = Неопределено, Вид = Неопределено)

	Объект = Ссылка.ПолучитьОбъект();
	Объект.Порядок                          = Порядок;
	Объект.Наименование                     = Наименование;
	Объект.РедактированиеВДиалоге           = РедактированиеВДиалоге;
	Объект.МожноРедактироватьТолькоВДиалоге = МожноРедактироватьТолькоВДиалоге;
	Объект.НомерКартинки                    = НомерКартинки;
	Объект.Тип                              = Тип;
	Объект.ВидОбъектаКонтактнойИнформации   = Вид;
	
	Объект.Записать();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАРПЛАТА

Процедура ОбновлениеКодовДоходовВычетовНДФЛдля2011года() Экспорт

	#Если Клиент Тогда
		Состояние("Обработка вычетов по НДФЛ");
	#КонецЕсли
	
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код318, , , , , , , "318", , , Перечисления.ГруппыВычетовПоНДФЛ.Имущественные); // с 2010 г.

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.КодДляОтчетности2009 КАК КодДляОтчетности2010,
	|	ВЫБОР
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Имущественные)
	|		КОГДА ВычетыНДФЛ.Ссылка = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код319)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ГруппаВычета
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	(НЕ ВычетыНДФЛ.Ссылка В (&Ссылки))";
	
	МассивВычетов = Новый Массив;
	МассивВычетов.Добавить(ВычетыНДФЛ.Код204);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код205);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код206);
	
	МассивВычетов.Добавить(ВычетыНДФЛ.Код208);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код209);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код305);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код306);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код307);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код308);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код309);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код310);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код318);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код403);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код404);
	МассивВычетов.Добавить(ВычетыНДФЛ.Код405);
	Запрос.УстановитьПараметр("Ссылки", МассивВычетов);
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка вычетов по НДФЛ");

	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код305, "305", "305", , "Расходы по доходам с кодом 1535", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с заключением, исполнением и с прекращением срочных сделок", 
	, "207", , , , "207/305");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код306, "306", "306", , "(не используется с 2011 года) Сумма фактических расходов по приобретению и реализации (погашению) инвестиционных паев паевых фондов", "Сумма фактически произведенных и документально подтвержденных расходов по приобретению и реализации (погашению) инвестиционных паев паевых фондов",
	, "306"); // не применяется с 2011 года
	
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код307, "307", "307", "307", "Расходы по операциям с ценными бумагами, обращающимися на организованном рынке ценных бумаг", "Совокупная сумма фактически произведенных налогоплательщиком и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, включая суммы, с которых был исчислен и уплачен налог при приобретении ценных бумаг в собственность (в том числе получении на безвозмездной основе или с частичной оплатой)", "Совокупная сумма фактически произведенных налогоплательщиком и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, включая суммы, с которых был исчислен и уплачен налог при приобретении ценных бумаг в собственность (в том числе получении на безвозмездной основе или с частичной оплатой)"
	, "201", , , , "201/307");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код308, "308", "308", , "Расходы по операциям с ценными бумагами, не обращающимися на организованном рынке ценных бумаг", "Сумма фактически произведенных и документально подтвержденных расходов на приобретение, реализацию ценных бумаг, не обращающихся на орг. рынке", 
	, "202", , , , "202/308"); // с 2008 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код309, "309", "309", , "Расходы по операциям с ценными бумагами, не обр-мися на орг.рынке ценных бумаг, которые на момент их приобретения обр-лись на орг.рынке ценных бумаг", "Сумма фактически произведенных и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, не обращающихся", 
	, "203", , , , "203/309"); // с 2008 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код204, , , , , , , "204"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код205, , , , , , , "205"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код206, , , , , , , "206"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код208, , , , , , , "208"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код209, , , , , , , "209"); // с 2010 г.
	
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код310, "310", "310", "-", "(не используется с 2010 года) Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на орг. рынке ценных бумаг", "Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг", , , , Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код311, "311", "313", "311", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории РФ жилого дома, квартиры, комнаты или доли(-ей) в них", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 2 000 000 руб.", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 1 000 000 руб."
	, "311", , , Перечисления.ГруппыВычетовПоНДФЛ.Имущественные);
	
	ОписатьКодВычетаНДФЛ(Справочники.ВычетыНДФЛ.Код319, "319", "-",   "-", "Сумма упл-х пенс-х взносов по договору негосударственного пенсионного обеспечения и/или страх-х взносов по договору добровольного пенсионного страх-ия", "", "", "319");
	ОписатьКодВычетаНДФЛ(Справочники.ВычетыНДФЛ.Код607, "607", "-",   "-", "Вычет в сумме уплаченных работодателем страховых взносов за работника на накопительную часть трудовой пенсии, но не более 12000 рублей в год", "", "", "607");


	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код403, "403", "403", "403", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с выполнением работ (оказанием услуг) по договорам ГПХ", "Сумма фактически произведенных и документально подтвержденных расходов, непосредственно связанных с выполнением работ (оказанием услуг) по договорам гражданско-правового характера", "Сумма фактически произведенных и документально подтвержденных расходов, непосредственно связанных с выполнением работ (оказанием услуг) по договорам гражданско-правового характера"
	, "403", Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код404, "404", "404", "404", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений или вознаграждений за создание, издание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений или вознаграждений за создание, издание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов"
	, "404", Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код405, "405", "405", "405", "Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений", "Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений и вознаграждений за создание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов (в процентах к сумме начисленного дохода)", "Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений и вознаграждений за создание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов (в процентах к сумме начисленного дохода)"
	, "405", Истина);
	
	Если ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(Справочники.ДоходыНДФЛ.Код1533_2010,"СтавкаНалогообложенияРезидента")) Тогда
		Возврат
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние("Обработка доходов по НДФЛ");
	#КонецЕсли


	
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	Ставка13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	Ставка35 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
	
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1533_2010,		Ставка13, "1533");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1535,			Ставка13, "1535");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2610ПоСтавке13, Ставка13, "2620", , Истина);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2210, 			Ставка13, "2210", Истина);
	ДобавитьКодДоходаНДФЛ("2641", "Материальная выгода, полученная от приобретения финансовых инструментов срочных сделок", Ставка13); 
	ДобавитьКодДоходаНДФЛ("3022", "Доходы в виде платы за использование денежных средств членов кр.потреб.кооператива или %% за исп-е с-х кр.потреб.кооперативом займов", Ставка35); 
	
	ТаблицаНовыхЗначений = Новый ТаблицаЗначений;
	ТаблицаНовыхЗначений.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(30, ДопустимаяДлина.Переменная)));
	ТаблицаНовыхЗначений.Колонки.Добавить("КодДляОтчетности", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(4)));
	ТаблицаНовыхЗначений.Колонки.Добавить("НеОблагаетсяУНалоговогоАгента", Новый ОписаниеТипов("Булево"));
	ТаблицаНовыхЗначений.Колонки.Добавить("НеОтражаетсяВОтчетности2010", Новый ОписаниеТипов("Булево"));
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "1211";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "1214";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "1230";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "1510";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОблагаетсяУНалоговогоАгента = Истина;
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "1520";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОблагаетсяУНалоговогоАгента = Истина;
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "2220";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОблагаетсяУНалоговогоАгента = Истина;
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "3021";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "4000";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОблагаетсяУНалоговогоАгента = Истина;
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	СтрокаОписания = ТаблицаНовыхЗначений.Добавить();
	СтрокаОписания.КодДляОтчетности = "4600";
	СтрокаОписания.Наименование = "(не используется с 2009 года) ";
	СтрокаОписания.НеОблагаетсяУНалоговогоАгента = Истина;
	СтрокаОписания.НеОтражаетсяВОтчетности2010 = Истина;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НовыеЗначения",ТаблицаНовыхЗначений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НовыеЗначения.Наименование,
	|	НовыеЗначения.КодДляОтчетности,
	|	НовыеЗначения.НеОблагаетсяУНалоговогоАгента,
	|	НовыеЗначения.НеОтражаетсяВОтчетности2010
	|ПОМЕСТИТЬ ВТНовыеЗначения
	|ИЗ
	|	&НовыеЗначения КАК НовыеЗначения";
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	НовыеЗначения.НеОблагаетсяУНалоговогоАгента,
	|	НовыеЗначения.НеОтражаетсяВОтчетности2010,
	|	НовыеЗначения.Наименование + ДоходыНДФЛ.Наименование КАК Наименование
	|ИЗ
	|	ВТНовыеЗначения КАК НовыеЗначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|		ПО НовыеЗначения.КодДляОтчетности = ДоходыНДФЛ.КодДляОтчетности
	|ГДЕ
	|	(НЕ ДоходыНДФЛ.Предопределенный)";
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка доходов по НДФЛ");

	

КонецПроцедуры

Процедура ОбновитьВычетыПоКоду2761()

	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	// ОБНОВЛЕНИЕ РАЗМЕРОВ СКИДОК К ДОХОДАМ
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
	
	ДатаСведений = '20010101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2720, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2730, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2740, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2760, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2770, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2201, 0,	 20);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2202, 0,	 30);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2203, 0,	 40);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2204, 0,	 30);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2205, 0,	 40);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2206, 0,	 25);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2207, 0,	 20);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2208, 0,	 20);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2209, 0,	 30);
	
	ДатаСведений = '20050101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2761, 2000, 0);
	
	ДатаСведений = '20060101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2720, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2730, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2740, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2760, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2761, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2770, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2790, 10000, 0);
	
	ДатаСведений = '20080101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.МатпомощьПриРожденииРебенка, 0, 50000);
	
	ДатаСведений = '20090101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код1211, 12000, 0);
	
	НаборЗаписей.Записать();
	
	
КонецПроцедуры
	
Процедура ПереносСведенийОРезидентстве() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГражданствоФизЛиц.ФизЛицо
	|ПОМЕСТИТЬ ВТФизлица
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|		ПО ГражданствоФизЛиц.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|			И (НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ) = СтатусФизЛицКакНалогоплательщиковНДФЛ.Период)
	|ГДЕ
	|	ГражданствоФизЛиц.УдалитьНеЯвляетсяНалоговымРезидентомРФ
	|	И СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Физлица.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ) КАК Период,
	|	МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодГражданства
	|ПОМЕСТИТЬ ВТФизлицаСДатами
	|ИЗ
	|	ВТФизлица КАК Физлица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО Физлица.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	Физлица.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ГражданствоФизЛиц.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ГражданствоФизЛиц.УдалитьНеЯвляетсяНалоговымРезидентомРФ
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|	КОНЕЦ КАК Статус,
	|	ФизлицаКОбработке.Период,
	|	ФизлицаКОбработке.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	ВТФизлицаСДатами КАК ФизлицаКОбработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО ФизлицаКОбработке.ФизЛицо = ГражданствоФизЛиц.ФизЛицо
	|			И ФизлицаКОбработке.ПериодГражданства = ГражданствоФизЛиц.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо";
	ТекстСообщения = "Обновление данных о резидентстве сотрудников";
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
		НаборЗаписей.Отбор.ФизЛицо.Установить(Выборка.ФизЛицо);
		Пока Выборка.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеКодыДоходовНДФЛ()
	
	Ставка09 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка09;
	Ставка13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
	Ставка35 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35;
	ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
	
	// ОБНОВЛЕНИЕ СПРАВОЧНИКА ДоходыНДФЛ
	
	// Заполнение реквизитов предопределенных элементов
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1010, 			Ставка09, "1010");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1110, 			Ставка09, "1110");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1120, 			Ставка09, "1120");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1200, 			Ставка13, "1200");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1211, 			Ставка13, "1211");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1220, 			Ставка13, "1220");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1240, 			Ставка13, "1240");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1300, 			Ставка13, "1300");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1530, 			Ставка13, "1530");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1531, 			Ставка13, "1531");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1532, 			Ставка13, "1532");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1533, 			Ставка13, "1533");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1533_2010,		Ставка13, "1533");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1535, 			Ставка13, "1535");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1536, 			Ставка13, "1536");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1540, 			Ставка13, "1540");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.КодДоходаПоУмолчанию, Ставка13, "2000");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2001, 			Ставка13, "2001");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2010, 			Ставка13, "2010");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2012, 			Ставка13, "2012");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2201, 			Ставка13, "2201");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2202, 			Ставка13, "2202");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2203, 			Ставка13, "2203");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2204, 			Ставка13, "2204");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2205, 			Ставка13, "2205");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2206, 			Ставка13, "2206");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2207, 			Ставка13, "2207");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2208, 			Ставка13, "2208");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2209, 			Ставка13, "2209");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2210, 			Ставка13, "2210", Истина);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2300, 			Ставка13, "2300");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2400, 			Ставка13, "2400");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2530, 			Ставка13, "2530");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2610ПоСтавке35, Ставка35, "2610");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2610ПоСтавке13, Ставка13, "2620", , Истина);
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2640, 			Ставка13, "2640");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2710, 			Ставка13, "2710");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2720, 			Ставка13, "2720");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2730, 			Ставка13, "2730");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2740, 			Ставка35, "2740");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2750, 			Ставка13, "2750");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2760, 			Ставка13, "2760");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2761, 			Ставка13, "2761");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.МатпомощьПриРожденииРебенка,Ставка13, "2762");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2770, 			Ставка13, "2770");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2790, 			Ставка13, "2790");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2800, 			Ставка13, "2880");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2900, 			Ставка13, "2900");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код3010, 			Ставка13, "3010");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код3020ПоСтавке35, Ставка35, "3020");
	УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код4800, 			Ставка13, "4800");
	
	// Добавление непредопределенных кодов доходов 
	
	
	// с 1.01.2005 не изменены
	ДобавитьКодДоходаНДФЛ("1400", "Доходы от сдачи в аренду и иного использования имущества (кроме доходов от сдачи в аренду транспортных средств, средств связи, компьютерных сетей)", Ставка13);
	ДобавитьКодДоходаНДФЛ("2510", "Оплата за налогоплательщика товаров, работ, услуг или имущественных прав, в том числе коммунальных услуг, питания, отдыха, обучения в его интересах", Ставка13);
	ДобавитьКодДоходаНДФЛ("2520", "Стоимость товаров, работ, услуг, полученных на безвозмездной основе", Ставка13);
	ДобавитьКодДоходаНДФЛ("2630", "Материальная выгода, полученная от приобретения товаров, работ, услуг у физ. лиц, организаций, явл. взаимозависимыми по отношению к налогоплательщику", Ставка13);
	ДобавитьКодДоходаНДФЛ("2780", "Возмещение (оплата) стоимости приобретенных налогоплательщиком медикаментов в случаях, не подпадающих под действие п. 28 ст. 217 НК РФ", Ставка13);
	
	// введены с 1.01.2005
	ДобавитьКодДоходаНДФЛ("1212", "Доходы в виде денежных (выкупных) сумм, выплачиваемых по договорам страхования при досрочном расторжении договоров страхования", Ставка13);
	
	// введены с 1.01.2006
	ДобавитьКодДоходаНДФЛ("1011", "Проценты, включая дисконт, полученный по долговому обязательству любого вида (за исключением доходов с кодами 1110, 2800 и 3020).", Ставка13);
	
	// введены с 1.01.2008
	ДобавитьКодДоходаНДФЛ("1201", "Доходы, полученные в виде страховых выплат по договорам страхования в виде оплаты стоимости санаторно-курортных путевок", Ставка13); 
	ДобавитьКодДоходаНДФЛ("1202", "Доходы, полученные в виде страховых выплат по договорам добровольного страхования жизни (за исключением добровольного пенсионного страхования)", Ставка13); 
	ДобавитьКодДоходаНДФЛ("1203", "Доходы, полученные в виде страховых выплат по договорам добровольного имущественного страхования (включая страхование гражданской ответственности)", Ставка13); 
	ДобавитьКодДоходаНДФЛ("1213", "Доходы в виде денежных (выкупных) сумм при расторжении договора за вычетом сумм страховых взносов, уплаченных по договору добр. пенс. страхования", Ставка13); 
	ДобавитьКодДоходаНДФЛ("1301", "Доходы, полученные от отчуждения авторских или иных смежных прав", Ставка13); 
	
	// введены с 1.01.2010
	ДобавитьКодДоходаНДФЛ("2641", "Материальная выгода, полученная от приобретения финансовых инструментов срочных сделок", Ставка13); 
	
	// введены с 1.01.2011
	ДобавитьКодДоходаНДФЛ("3022", "Доходы в виде платы за использование денежных средств членов кр.потреб.кооператива или %% за исп-е с-х кр.потреб.кооперативом займов", Ставка35); 
	
	// ОБНОВЛЕНИЕ РАЗМЕРОВ СКИДОК К ДОХОДАМ
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();

	ДатаСведений = '20010101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2720, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2730, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2740, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2760, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2770, 2000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2201, 0,	 20);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2202, 0,	 30);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2203, 0,	 40);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2204, 0,	 30);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2205, 0,	 40);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2206, 0,	 25);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2207, 0,	 20);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2208, 0,	 20);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2209, 0,	 30);
	
	ДатаСведений = '20050101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2761, 2000, 0);
	
	ДатаСведений = '20060101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2720, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2730, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2740, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2760, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2761, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2770, 4000, 0);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код2790, 10000, 0);
	
	ДатаСведений = '20080101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.МатпомощьПриРожденииРебенка, 0, 50000);
	
	ДатаСведений = '20090101';
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, ДоходыНДФЛ.Код1211, 12000, 0);
	
	// Запишем набор записей в режиме добавления
	НаборЗаписей.Записать(Истина);



КонецПроцедуры

Процедура ЗаполнитьПредопределенныеКодыДоходовЕСН()
	
	СпрКодыЕСН = Справочники.ДоходыЕСН;

	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.РаспределятьПоБазовымНачислениям, Ложь, 	Ложь,   Ложь);
	
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.НеЯвляетсяОбъектом,	Ложь, 	Ложь, 	Ложь); // ФБ , ФСС, ФОМС
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ВыплатыЗаСчетПрибыли,	Ложь, 	Ложь, 	Ложь);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.НеОблагаетсяЦеликом,	Ложь, 	Ложь,   Ложь); 
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ПособияЗаСчетФСС,		Ложь, 	Ложь,	Ложь);
	
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ДоговораАвторские,	Истина, Ложь,	Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ДоговораГПХ,			Истина, Ложь,	Истина);
	
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.ОблагаетсяЦеликом,	Истина, Истина, Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.Матпомощь,			Истина, Истина,	Истина);
	УстановитьРеквизитыКодаЕСН(СпрКодыЕСН.МатпомощьПриРожденииРебенка,	Истина, Истина,	Истина);
	
КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыНДФЛ"
//
Процедура УстановитьРеквизитыКодаДоходаНДФЛ(КодДохода, СтавкаНалогообложенияРезидента, КодДляОтчетности, НеОблагаетсяУНалоговогоАгента = Ложь, НеОтражаетсяВОтчетности2010 = Ложь) Экспорт

	Объект = КодДохода.ПолучитьОбъект();

	Объект.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
	Объект.КодДляОтчетности               = КодДляОтчетности;
	Объект.НеОблагаетсяУНалоговогоАгента  = НеОблагаетсяУНалоговогоАгента;
	Объект.НеОтражаетсяВОтчетности2010	  = НеОтражаетсяВОтчетности2010;

	Объект.Записать();

КонецПроцедуры

// Добавляет в справочник "ВычетыНДФЛ" новый элемент
//
Процедура ДобавитьКодВычетаНДФЛ(Код, Код2009 = "", Код2008 = "", Код2007 = "", Наименование, Наименование2008 = "", Наименование2007 = "", Код2010 = "", НеПредоставляетсяНерезидентам = Ложь, ГруппаВычета = Неопределено) Экспорт

	СсылкаНаЭлемент = Справочники.ВычетыНДФЛ.НайтиПоКоду(Код);

	Если  СсылкаНаЭлемент.Пустая() Тогда
		Элемент     = Справочники.ВычетыНДФЛ.СоздатьЭлемент();
		Элемент.Код = Код;

	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();

	КонецЕсли;

	Элемент.Наименование = Наименование;
	Если ЗначениеЗаполнено(Наименование2008) Тогда
		Элемент.Наименование2008 = Наименование2008;
	Иначе
		Элемент.Наименование2008 = "не предоставлялся";
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование2007) Тогда
		Элемент.Наименование2007 = Наименование2007;
	Иначе
		Элемент.Наименование2007 = "не предоставлялся";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Код2009) Тогда
		Элемент.КодДляОтчетности2009 = Код2009;
	Иначе
		Элемент.КодДляОтчетности2009 = "-";
	КонецЕсли;
	Если ЗначениеЗаполнено(Код2008) Тогда
		Элемент.КодДляОтчетности2008 = Код2008;
	Иначе
		Элемент.КодДляОтчетности2008 = "-";
	КонецЕсли;
	Если ЗначениеЗаполнено(Код2007) Тогда
		Элемент.КодДляОтчетности2007 = Код2007;
	Иначе
		Элемент.КодДляОтчетности2007 = "-";
	КонецЕсли;
	Если ЗначениеЗаполнено(Код2010) Тогда
		Элемент.КодДляОтчетности2010 = Код2010;
	Иначе
		Элемент.КодДляОтчетности2010 = "-";
	КонецЕсли;

 	Элемент.НеПредоставляетсяНерезидентам = НеПредоставляетсяНерезидентам;
 	Элемент.ГруппаВычета = ГруппаВычета;

	Элемент.Записать();

КонецПроцедуры


Процедура ОписатьКодВычетаНДФЛ(СсылкаНаЭлемент, Код2009 = "", Код2008 = "", Код2007 = "", Наименование = "", Наименование2008 = "", Наименование2007 = "", Код2010 = "", НеПредоставляетсяНерезидентам = Ложь, НеОтражаетсяВОтчетности2010 = Ложь, ГруппаВычета = Неопределено, Код = "") Экспорт

	Элемент = СсылкаНаЭлемент.ПолучитьОбъект();

	Если ЗначениеЗаполнено(Наименование) Тогда
		Элемент.Наименование = Наименование;
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование2008) Тогда
		Элемент.Наименование2008 = Наименование2008;
	Иначе
		Элемент.Наименование2008 = "не предоставлялся";
	КонецЕсли;
	Если ЗначениеЗаполнено(Наименование2007) Тогда
		Элемент.Наименование2007 = Наименование2007;
	Иначе
		Элемент.Наименование2007 = "не предоставлялся";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Код2009) Тогда
		Элемент.КодДляОтчетности2009 = Код2009;
	Иначе
		Элемент.КодДляОтчетности2009 = "-";
	КонецЕсли;
	Если ЗначениеЗаполнено(Код2008) Тогда
		Элемент.КодДляОтчетности2008 = Код2008;
	Иначе
		Элемент.КодДляОтчетности2008 = "-";
	КонецЕсли;
	Если ЗначениеЗаполнено(Код2007) Тогда
		Элемент.КодДляОтчетности2007 = Код2007;
	Иначе
		Элемент.КодДляОтчетности2007 = "-";
	КонецЕсли;
	Если ЗначениеЗаполнено(Код2010) Тогда
		Элемент.КодДляОтчетности2010 = Код2010;
	Иначе
		Элемент.КодДляОтчетности2010 = "-";
	КонецЕсли;

	Если ЗначениеЗаполнено(Код) Тогда
		Элемент.Код = Код;
	КонецЕсли;
	
 	Элемент.НеОтражаетсяВОтчетности2010 = НеОтражаетсяВОтчетности2010;
 	Элемент.НеПредоставляетсяНерезидентам = НеПредоставляетсяНерезидентам;
 	Элемент.ГруппаВычета = ГруппаВычета;

	Элемент.Записать();

КонецПроцедуры

Процедура ЗаполнитьСправочникВычетовНДФЛ()

	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	
	ДобавитьКодВычетаНДФЛ("620", "620", "620", "620", "Иные суммы, уменьшающие налоговую базу в соответствии с положениями главы 23 Налогового кодекса Российской Федерации", "Иные суммы, уменьшающие налоговую базу", "Иные суммы, уменьшающие налоговую базу"
	, "620");

	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код101, "108", "101", "101", "1000 руб. на каждого ребенка до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта до 24 лет", "600 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет родителям, супругам родителей", "600 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет родителям, супругам родителей"
	, "108", , , Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код106, "109", "106", "106", "2000 руб. на каждого ребенка-инвалида до 18 лет, на учащегося очной формы обучения, студента до 24 лет, явл. инвалидом I или II группы", "1200 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет, являющегося инвалидом I или II группы, родителям, супругам родителей", "1200 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет, являющегося инвалидом I или II группы, родителям, супругам родителей"
	, "109", , , Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код102, "110", "102", "102", "2000 руб. на каждого ребенка единственному родителю (приемному родителю), опекуну, попечителю (начиная с доходов 2009 года)", "1200 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям", "1200 руб. на каждого ребенка в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента, курсанта в возрасте до 24 лет вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям"
	, "110", , , Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код103, "103", "103", "103", "400 руб. на налогоплательщика, не относящегося к категориям, перечисленным в пп. 1-2 п. 1 ст. 218 Налогового кодекса Российской Федерации", "400 руб. на налогоплательщика, не относящегося к категориям, перечисленным в пп. 1 - 2 п. 1 ст. 218 Налогового кодекса Российской Федерации", "400 руб. на налогоплательщика, не относящегося к категориям, перечисленным в пп. 1 - 2 п. 1 ст. 218 Налогового кодекса Российской Федерации"
	, "103", , , Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код104, "104", "104", "104", "500 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 2 п. 1 ст. 218 Налогового кодекса Российской Федерации", "500 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 2 п. 1 ст. 218 Налогового кодекса Российской Федерации", "500 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 2 п. 1 ст. 218 Налогового кодекса Российской Федерации"
	, "104", , , Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код105, "105", "105", "105", "3000 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 1 п. 1 ст. 218 Налогового кодекса Российской Федерации", "3000 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 1 п. 1 ст. 218 Налогового кодекса Российской Федерации", "3000 рублей на налогоплательщика, относящегося к категориям, перечисленным в пп. 1 п. 1 ст. 218 Налогового кодекса Российской Федерации"
	, "105", , , Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код111, "111", , , , , , "111", , , Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей); // с 2009 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код107, "112", "107", "107", "4000 руб. на каждого ребенка-инвалида до 18 лет, на учащегося очной формы обучения до 24 лет, явл. инвалидом, единственному родителю и др.", "2400 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента в возрасте до 24 лет, являющегося инвалидом I или II группы, вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям", "2400 руб. на каждого ребенка-инвалида в возрасте до 18 лет, на учащегося очной формы обучения, аспиранта, ординатора, студента в возрасте до 24 лет, являющегося инвалидом I или II группы, вдове (вдовцу), одинокому родителю, опекуну или попечителю, приемным родителям"
	, "112", , , Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код113, "113", , , , , , "113", , , Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей); // с 2009 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код305, "305", "305", , , "Сумма фактически произведенных и документально подтвержденных расходов, связанных с заключением, исполнением и с прекращением срочных сделок", 
	, "207"); 
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код306, "306", "306", , , "Сумма фактически произведенных и документально подтвержденных расходов по приобретению и реализации (погашению) инвестиционных паев паевых фондов",
	, "306"); 
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код307, "307", "307", "307", , "Совокупная сумма фактически произведенных налогоплательщиком и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, включая суммы, с которых был исчислен и уплачен налог при приобретении ценных бумаг в собственность (в том числе получении на безвозмездной основе или с частичной оплатой)", "Совокупная сумма фактически произведенных налогоплательщиком и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, включая суммы, с которых был исчислен и уплачен налог при приобретении ценных бумаг в собственность (в том числе получении на безвозмездной основе или с частичной оплатой)"
	, "201");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код308, "308", "308", , , "Сумма фактически произведенных и документально подтвержденных расходов на приобретение, реализацию ценных бумаг, не обращающихся на орг. рынке", 
	, "202"); // с 2008 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код309, "309", "309", , , "Сумма фактически произведенных и документально подтвержденных расходов на приобретение, реализацию и хранение ценных бумаг, не обращающихся", 
	, "203"); // с 2008 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код204, , , , , , , "204"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код205, , , , , , , "205"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код206, , , , , , , "206"); // с 2010 г.
	
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код208, , , , , , , "208"); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код209, , , , , , , "209"); // с 2010 г.
	
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код310, "310", "310", , "(не используется с 2010 года) Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на орг. рынке ценных бумаг", "Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг", , , , Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код311, "311", "313", "311", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории РФ жилого дома, квартиры, комнаты или доли(-ей) в них", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 2 000 000 руб.", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 1 000 000 руб."
	, "311", , , Перечисления.ГруппыВычетовПоНДФЛ.Имущественные);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код312, "312", "312", "312", "Сумма, направленная на погашение процентов по целевым займам (кредитам) на новое строительство или приобретение на территории РФ жилого дома, квартиры", "Сумма, направленная на погашение процентов по целевым займам (кредитам), полученным от кредитных и иных организаций Российской Федерации и фактически израсходованная налогоплательщиком на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них", "Сумма, направленная на погашение процентов по целевым займам (кредитам), полученным от кредитных и иных организаций Российской Федерации и фактически израсходованная налогоплательщиком на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них"
	, "312", , , Перечисления.ГруппыВычетовПоНДФЛ.Имущественные);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код318, , , , , , , "318", , , Перечисления.ГруппыВычетовПоНДФЛ.Имущественные); // с 2010 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код319, "319", , , , , , "319", , , Перечисления.ГруппыВычетовПоНДФЛ.Социальные); // с 2009 г.
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код403, "403", "403", "403", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с выполнением работ (оказанием услуг) по договорам ГПХ", "Сумма фактически произведенных и документально подтвержденных расходов, непосредственно связанных с выполнением работ (оказанием услуг) по договорам гражданско-правового характера", "Сумма фактически произведенных и документально подтвержденных расходов, непосредственно связанных с выполнением работ (оказанием услуг) по договорам гражданско-правового характера"
	, "403", Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код404, "404", "404", "404", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений или вознаграждений за создание, издание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов", "Сумма фактически произведенных и документально подтвержденных расходов, связанных с получением авторских вознаграждений или вознаграждений за создание, издание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов"
	, "404", Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код405, "405", "405", "405", "Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений", "Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений и вознаграждений за создание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов (в процентах к сумме начисленного дохода)", "Сумма в пределах нормативов затрат, связанных с получением авторских вознаграждений и вознаграждений за создание, исполнение или иное использование произведений науки, литературы и искусства, вознаграждений авторам открытий, изобретений и промышленных образцов (в процентах к сумме начисленного дохода)"
	, "405", Истина);
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код501, "501", "501", "501", "Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей", "Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей", "Вычет из стоимости подарков, полученных от организаций и индивидуальных предпринимателей"
	, "501");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код502, "502", "502", "502", "Вычет из стоимости призов в денежной и натуральной форме на конкурсах и соревнованиях, проводимых в соотв. с решениями Прав-ва РФ и др. органов власти", "Вычет из стоимости призов в денежной и натуральной формах, полученных на конкурсах и соревнованиях, проводимых в соответствии с решениями Правительства Российской Федерации, Законодательных (представительных) органов государственной власти или представительных органов местного самоуправления", "Вычет из стоимости призов в денежной и натуральной формах, полученных на конкурсах и соревнованиях, проводимых в соответствии с решениями Правительства Российской Федерации, Законодательных (представительных) органов государственной власти или представительных органов местного самоуправления"
	, "502");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код503, "503", "503", "503", "Вычет из суммы материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам-пенсионерам", "Вычет из суммы материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам, уволившимся в связи с выходом на пенсию по инвалидности или по возрасту", "Вычет из суммы материальной помощи, оказываемой работодателями своим работникам, а также бывшим своим работникам, уволившимся в связи с выходом на пенсию по инвалидности или по возрасту"
	, "503");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код504, "504", "504", "504", "Вычет из суммы возмещения (оплаты) работодателями своим работникам, бывшим своим работникам (пенсионерам), а также инвалидам стоимости медикаментов", "Вычет из суммы возмещения (оплаты) работодателями своим работникам, их супругам, родителям и детям, бывшим своим работникам (пенсионерам по возрасту), а также инвалидам стоимости приобретенных ими (для них) медикаментов, назначенных им лечащим врачом", "Вычет из суммы возмещения (оплаты) работодателями своим работникам, их супругам, родителям и детям, бывшим своим работникам (пенсионерам по возрасту), а также инвалидам стоимости приобретенных ими (для них) медикаментов, назначенных им лечащим врачом"
	, "504");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код505, "505", "505", "505", "Вычет из стоимости выигрышей и призов, полученных на конкурсах, играх и других мероприятиях в целях рекламы товаров (работ, услуг)", "Вычет из стоимости выигрышей и призов, полученных на конкурсах, играх и других мероприятиях в целях рекламы товаров (работ, услуг)", "Вычет из стоимости выигрышей и призов, полученных на конкурсах, играх и других мероприятиях в целях рекламы товаров (работ, услуг)"
	, "505");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код506, "506", "506", "506", "Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов", "Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов", "Вычет из суммы материальной помощи, оказываемой инвалидам общественными организациями инвалидов"
	, "506");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код507, "507", "507", "507", "Вычет из суммы помощи (в денежной и натуральной формах), а также стоимости подарков, полученных ветеранами, инвалидами ВОВ и приравненных к ним", "Вычет из суммы помощи (в денежной и натуральной формах), а также стоимости подарков, полученных ветеранами Великой Отечественной войны, инвалидами Великой Отечественной войны, вдовами военнослужащих, погибших в период войны с Финляндией, Великой Отечественной войны, войны с Японией, вдовами умерших инвалидов Великой Отечественной войны и бывшими узниками нацистских концлагерей, тюрем и гетто, а также бывшими несовершеннолетними узниками концлагерей, гетто и других мест принудительного содержания, созданных фашистами и их союзниками в период Второй мировой войны", "Вычет из суммы помощи (в денежной и натуральной формах), а также стоимости подарков, полученных ветеранами Великой Отечественной войны, инвалидами Великой Отечественной войны, вдовами военнослужащих, погибших в период войны с Финляндией, Великой Отечественной войны, войны с Японией, вдовами умерших инвалидов Великой Отечественной войны и бывшими узниками нацистских концлагерей, тюрем и гетто, а также бывшими несовершеннолетними узниками концлагерей, гетто и других мест принудительного содержания, созданных фашистами и их союзниками в период Второй мировой войны"
	, "507");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.МатпомощьПриРожденииРебенка, "508", "508", "-", "Вычет из суммы материальной помощи, оказываемой работодателями своим работникам при рождении (усыновлении, удочерении) ребенка", "Вычет из суммы единовременной материальной помощи, оказываемой работодателями работникам (родителям, усыновителям, опекунам) при рождении (усыновлении, удочерении) ребенка", ""
	, "508");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код601, "601", "601", "601", "Сумма, уменьшающая налоговую базу по доходам в виде дивидендов", "Сумма, уменьшающая налоговую базу по доходам, полученным в виде дивидендов", "Сумма, уменьшающая налоговую базу по доходам, полученным в виде дивидендов"
	, "601");
	ОписатьКодВычетаНДФЛ(ВычетыНДФЛ.Код607, "607", , , , , , "607"); // с 2009 г.
	
КонецПроцедуры

// Выполняет заполнение реквизитов справочника "ВычетыНДФЛ" 
//
Процедура ЗаполнитьКодыВычетовНДФЛ() 
	
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	
	ЗаполнитьСправочникВычетовНДФЛ();
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВычетыНДФЛ.Ссылка
	                      |ИЗ
	                      |	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	                      |
	                      |ГДЕ
	                      |	(ВычетыНДФЛ.Предопределенный)");
	
	СписокПредопределенныхКодовВычетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.КодВычета.Использование = Истина;

	НаборЗаписей.Отбор.Период.Значение = '20010101';
	
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	НаборЗаписей.Отбор.Период.Значение = '20050101';
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	НаборЗаписей.Отбор.Период.Значение = '20090101';
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Отменим фильтры	
	НаборЗаписей.Отбор.Период.Использование = Ложь;
	НаборЗаписей.Отбор.КодВычета.Использование = Ложь;
	НаборЗаписей.Прочитать();
	
	ДатаСведений = Дата("20010101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код101, 300, 20000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код102, 600, 20000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код103, 400, 20000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код104, 500, 0);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код105, 3000, 0);
	
	ДатаСведений = Дата("20050101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код101,  600, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код102, 1200, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код106, 1200, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код107, 2400, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код311, 1000000, 0);
	
	ДатаСведений = Дата("20080101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код311, 2000000, 0);
	
	ДатаСведений = Дата("20090101");
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код103,  400, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код101, 1000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код102, 2000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код106, 2000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код107, 4000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код111, 2000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код113, 4000, 280000);
	
	// Запишем набор записей в режиме добавления
	НаборЗаписей.Записать();

КонецПроцедуры  


Процедура ДобавитьКодДоходаНДФЛ(Код, Наименование, СтавкаНалогообложения)

	СсылкаНаЭлемент = Справочники.ДоходыНДФЛ.НайтиПоКоду(Код);

	Если  СсылкаНаЭлемент = Справочники.ДоходыНДФЛ.ПустаяСсылка() Тогда
		Элемент     = Справочники.ДоходыНДФЛ.СоздатьЭлемент();
		Элемент.Код = Код;

	Иначе
		Элемент = СсылкаНаЭлемент.ПолучитьОбъект();

	КонецЕсли;

	Элемент.Наименование     = Наименование;
	Элемент.КодДляОтчетности = Код;
	Элемент.СтавкаНалогообложенияРезидента = СтавкаНалогообложения;

	Элемент.Записать();

КонецПроцедуры

// Добавляет запись в набор записей регистра "НДФЛРазмерВычетов"
//
Процедура ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, КодВычета, Размер, ОграничениеПоДоходам)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.КодВычета            = КодВычета;
	НоваяЗапись.Период               = ДатаСведений;
	НоваяЗапись.Размер               = Размер;
	НоваяЗапись.ОграничениеПоДоходам = ОграничениеПоДоходам;

КонецПроцедуры

// Устанавливает реквизиты элемента справочника "ДоходыНДФЛ"
//
Процедура УстановитьРеквизитыКодаЕСН(СпособОтражения, ВходитВБазуФедеральныйБюджет, ВходитВБазуФСС, ВходитВБазуФОМС)

	Объект = СпособОтражения.ПолучитьОбъект();

	Объект.ВходитВБазуФедеральныйБюджет = ВходитВБазуФедеральныйБюджет;
	Объект.ВходитВБазуФСС               = ВходитВБазуФСС;
	Объект.ВходитВБазуФОМС              = ВходитВБазуФОМС;

	Объект.Записать();

КонецПроцедуры

Процедура ОбновитьСтавкиДля2009Года()
	
	//заполним ставки ЕСН и ПФР
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахЕСНиПФР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Использование = Истина;
	НаборЗаписей.Отбор.Год.Значение = 2009;
	НаборЗаписей.Отбор.ВидСтавокЕСНиПФР.Использование = Истина;
	НаборЗаписей.Отбор.ВидСтавокЕСНиПФР.Значение = Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.ЗаполнитьСведенияОСтавкахЕСНиПФР(Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей, 2009, НаборЗаписей, Ложь);
	КонецЕсли;
	НаборЗаписей.Записать();
		
КонецПроцедуры	

Процедура ОбновитьРазмерыИСтавки()

	// стандартные вычеты по НДФЛ
	
	ВычетыНДФЛ = Справочники.ВычетыНДФЛ;
	
	Если Не ЗначениеЗаполнено(ВычетыНДФЛ.Код101.КодДляОтчетности2009) Тогда
		ЗаполнитьСправочникВычетовНДФЛ();
		ДоходыНДФЛ = Справочники.ДоходыНДФЛ;
		Ставка13 = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13;
		УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1531, Ставка13, "1531");
		УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1532, Ставка13, "1532");
		УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1533, Ставка13, "1533");
		УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код1536, Ставка13, "1536");
		УстановитьРеквизитыКодаДоходаНДФЛ(ДоходыНДФЛ.Код2210, Ставка13, "2210");
		ДобавитьКодДоходаНДФЛ("1201", "Доходы, полученные в виде страховых выплат по договорам страхования в виде оплаты стоимости санаторно-курортных путевок", Ставка13); 
		ДобавитьКодДоходаНДФЛ("1202", "Доходы, полученные в виде страховых выплат по договорам добровольного страхования жизни (за исключением добровольного пенсионного страхования)", Ставка13); 
		ДобавитьКодДоходаНДФЛ("1203", "Доходы, полученные в виде страховых выплат по договорам добровольного имущественного страхования (включая страхование гражданской ответственности)", Ставка13); 
		ДобавитьКодДоходаНДФЛ("1213", "Доходы в виде денежных (выкупных) сумм при расторжении договора добр. пенс. страхования за вычетом сумм страховых взносов, уплаченных по договору", Ставка13); 
		ДобавитьКодДоходаНДФЛ("1214", "Доходы в виде денежных (выкупных) сумм при расторжении договора добровольного пенс. страхования в части сумм страховых взносов, уплаченных по договору", Ставка13); 
		ДобавитьКодДоходаНДФЛ("1230", "Доходы в виде денежных (выкупных) сумм при расторжении договора негосударственного пенсионного обеспечения в части сумм платежей (взносов) по договору", Ставка13); 
		ДобавитьКодДоходаНДФЛ("1301", "Доходы, полученные от отчуждения авторских или иных смежных прав", Ставка13); 
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	ВычетыНДФЛ.Предопределенный";
	СписокПредопределенныхКодовВычетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Федеральный закон от 26.11.2008 № 224-ФЗ "О внесении изменений в часть первую, 
	// часть вторую Налогового кодекса Российской Федерации и отдельные законодательные 
	// акты Российской Федерации"
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	ДатаСведений = '20080101';
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Период.Значение = ДатаСведений;
	НаборЗаписей.Отбор.КодВычета.Использование = Истина;

	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Отменим один из отборов
	НаборЗаписей.Отбор.КодВычета.Использование = Ложь;
	НаборЗаписей.Прочитать();
	
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код311, 2000000, 0);
	
	// Запишем набор записей в режиме замещения
	НаборЗаписей.Записать();
	
	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	ДатаСведений = '20090101';
	НаборЗаписей = РегистрыСведений.НДФЛРазмерВычетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Использование = Истина;
	НаборЗаписей.Отбор.Период.Значение = ДатаСведений;
	НаборЗаписей.Отбор.КодВычета.Использование = Истина;

	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	Для Каждого КодВычета Из СписокПредопределенныхКодовВычетов Цикл
		НаборЗаписей.Отбор.КодВычета.Значение = КодВычета;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Отменим один из отборов
	НаборЗаписей.Отбор.КодВычета.Использование = Ложь;
	НаборЗаписей.Прочитать();
	
	
	// Федеральный закон Российской Федерации от 22 июля 2008 г. № 121-ФЗ 
	// "О внесении изменений в статью 218 части второй Налогового кодекса Российской Федерации"
	
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код103,  400, 40000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код101, 1000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код102, 2000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код106, 2000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код107, 4000, 280000);
	
	// Приказ ФНС России от 30.12.2008 № ММ-3-3/694@
	// "О внесении изменений в приказ ФНС России от 13.10.2006 № САЭ-3-04/706@"
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код111, 2000, 280000);
	ДобавитьРазмерВычетаНДФЛ(НаборЗаписей, ДатаСведений, ВычетыНДФЛ.Код113, 4000, 280000);
	
	// Запишем набор записей в режиме замещения
	НаборЗаписей.Записать();
	
	// Обновление ставок по ЕСН
	
	НаборЗаписей = РегистрыСведений.СведенияОСтавкахЕСНиПФР.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Использование = Истина;
	НаборЗаписей.Отбор.Год.Значение = 2009;
	НаборЗаписей.Отбор.ВидСтавокЕСНиПФР.Использование = Истина;
	НаборЗаписей.Отбор.ВидСтавокЕСНиПФР.Значение = Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		НаборЗаписей.ЗаполнитьСведенияОСтавкахЕСНиПФР(Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей, 2009, НаборЗаписей, Ложь);
	КонецЕсли;
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Заполнение реквизитов у предопределенного элемента ОтражениеНачисленийПоУмолчанию \
//
Процедура ЗаполнениеОтраженияНачисленийПоУмолчанию()
	
	ПланСчетов = ПланыСчетов.Хозрасчетный;
	СпособУчетПоУмолчанию = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию.ПолучитьОбъект();
	СпособУчетПоУмолчанию.СчетДт 		= ПланСчетов.ОбщехозяйственныеРасходы;	
	СпособУчетПоУмолчанию.СубконтоДт1 	= Справочники.СтатьиЗатрат.ПустаяСсылка();
	СпособУчетПоУмолчанию.СчетКт 		= ПланСчетов.РасчетыСПерсоналомПоОплатеТруда;
	СпособУчетПоУмолчанию.СубконтоКт1 	= Справочники.ФизическиеЛица.ПустаяСсылка();
	СпособУчетПоУмолчанию.ОтражениеВУСН	= Перечисления.ОтражениеВУСН.Принимаются;
	СпособУчетПоУмолчанию.ВидНачисленияУдержания	= Перечисления.ИПВидыНачисленийУдержаний.НачисленоПовременно;
	СпособУчетПоУмолчанию.Записать();
	
КонецПроцедуры

// Начальное заполнение справочника документов, удостоверяющих личность
Процедура НачальноеЗаполнениеСправочникаДокументыУдостоверяющиеЛичность()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыУдостоверяющиеЛичность.Ссылка
	|ИЗ
	|	Справочник.ДокументыУдостоверяющиеЛичность КАК ДокументыУдостоверяющиеЛичность
	|ГДЕ
	|	ДокументыУдостоверяющиеЛичность.Предопределенный
	|	И ДокументыУдостоверяющиеЛичность.КодИМНС ПОДОБНО """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Макет = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьМакет("КлассификаторИМНС");
	
	Пока Выборка.Следующий() Цикл
		ИмяЭлемента = Справочники.ДокументыУдостоверяющиеЛичность.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		Область = Макет.НайтиТекст(Прав(ИмяЭлемента, 2),, Макет.Область("C2"));
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СпрОбъект.КодИМНС	= СокрЛП(Макет.Область(Область.Низ, 2, Область.Низ, 2).Текст);
		СпрОбъект.КодПФР	= СокрЛП(Макет.Область(Область.Низ, 3, Область.Низ, 3).Текст);
		СпрОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Начальное заполнение справочника "КлассификаторСтранМира".
//
Процедура НачальноеЗаполнениеСправочникаКлассификаторСтранМира()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Россия)
	|			ТОГДА ""Российская Федерация""
	|		КОГДА КлассификаторСтранМира.Ссылка = ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ЛицоБезГражданства)
	|			ТОГДА ""Лицо без гражданства""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаименованиеПолное,
	|	КлассификаторСтранМира.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Ссылка В (ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.Россия), ЗНАЧЕНИЕ(Справочник.КлассификаторСтранМира.ЛицоБезГражданства))
	|	И КлассификаторСтранМира.НаименованиеПолное = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		// Заполнение полного наименования предопределенного элемента.
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.НаименованиеПолное = Выборка.НаименованиеПолное;
		СправочникОбъект.Записать();
	КонецЦикла;
	
	// Удаление не предопределенного реквизита РОССИЯ, если на него нет ссылок
	Запрос.Текст = "ВЫБРАТЬ
	|	КлассификаторСтранМира.Ссылка
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира
	|ГДЕ
	|	КлассификаторСтранМира.Наименование = ""РОССИЯ""
	|	И КлассификаторСтранМира.Код = ""643""
	|	И (НЕ КлассификаторСтранМира.Предопределенный)";
	Выборка = Запрос.Выполнить().Выбрать();			   
	МассивСсылок = новый Массив;
	Пока Выборка.Следующий() Цикл
		МассивСсылок.Очистить();
		МассивСсылок.Добавить(Выборка.Ссылка);
		ТаблицаСсылок = НайтиПоСсылкам(МассивСсылок);
		Если ТаблицаСсылок.Количество() = 0 Тогда
			Выборка.Ссылка.Получитьобъект().Удалить();
		КонецЕсли
	КонецЦикла
				   	
КонецПроцедуры // НачальноеЗаполнениеСправочникаКлассификаторСтранМира()

// замена ЕСН страховыми взносами

// Заполняет реквизиты у новых статей РБП и назначает код
Процедура ОбработатьНовыеСтатьиРБП()

	РасходыБудущихПериодов = Справочники.РасходыБудущихПериодов;

	СтатьяРасходовБудущихПериодов = РасходыБудущихПериодов.РБПНаСтраховыеВзносы.ПолучитьОбъект();
	СтатьяРасходовБудущихПериодов.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ВОсобомПорядке;
	СтатьяРасходовБудущихПериодов.ВидРБП = Перечисления.ВидыРБП.Прочие;
	СтатьяРасходовБудущихПериодов.Записать();
	
	//Установить коды предопределенных элементов справочника РБП
	СписокПредопределенныхЭлементов = Новый СписокЗначений;
	СписокПредопределенныхЭлементов.Добавить(Справочники.РасходыБудущихПериодов.РБПНаСтраховыеВзносы);
	УстановитьЗначениеКодаПредопределенныхЭлементов(СписокПредопределенныхЭлементов);

КонецПроцедуры

Процедура ОписатьВидДоходаПоСтраховымВзносам(СпособОтражения, ВходитВБазуПФР, ВходитВБазуФСС, ВходитВБазуФОМС)

	Объект = СпособОтражения.ПолучитьОбъект();

	Объект.ВходитВБазуПФР = ВходитВБазуПФР;
	Объект.ВходитВБазуФСС = ВходитВБазуФСС;
	Объект.ВходитВБазуФОМС = ВходитВБазуФОМС;

	Объект.Записать();

КонецПроцедуры

Процедура ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,ДатаСведений,ВидТарифа,ПФР,ПФРНакопительная,ФСС,ФФОМС,ТФОМС)

    НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = ДатаСведений;
	НоваяСтрока.ВидТарифа = ВидТарифа;
	НоваяСтрока.ПФР = ПФР;
	НоваяСтрока.ПФРНакопительная = ПФРНакопительная;
	НоваяСтрока.ФСС = ФСС;
	НоваяСтрока.ТФОМС = ТФОМС;
	НоваяСтрока.ФФОМС = ФФОМС;

КонецПроцедуры

// Выполняет заполнение регистра сведений "ТарифСтраховыхВзносов"
//
Процедура ЗаполнитьСведенияОТарифахСтраховыхВзносов() Экспорт 

	НаборЗаписей = РегистрыСведений.ТарифСтраховыхВзносов.СоздатьНаборЗаписей();
	
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим,
			20.0,	6.0,	2.9,	1.1,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим,
			26.0,	6.0,	2.9,	3.1,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим,
			26.0,	6.0,	2.9,	3.1,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.ЕНВД,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.ЕНВД,
			26.0,	6.0,	2.9,	3.1,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.ЕНВД,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.СельХозПроизводители,
			15.8,	6.0,	1.9,	1.1,	1.2);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.СельХозПроизводители,
			16.0,	6.0,	1.9,	1.1,	1.2);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.СельХозПроизводители,
			16.0,	6.0,	1.9,	2.3,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20130101',Перечисления.ТарифыСтраховыхВзносов.СельХозПроизводители,
			21.0,	6.0,	2.4,	3.7,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20150101',Перечисления.ТарифыСтраховыхВзносов.СельХозПроизводители,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.ЕСХН,
			10.3,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.ЕСХН,
			16.0,	6.0,	1.9,	1.1,	1.2);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.ЕСХН,
			16.0,	6.0,	1.9,	2.3,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20130101',Перечисления.ТарифыСтраховыхВзносов.ЕСХН,
			21.0,	6.0,	2.4,	3.7,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20150101',Перечисления.ТарифыСтраховыхВзносов.ЕСХН,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,
			16.0,	6.0,	1.9,	1.1,	1.2);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,
			16.0,	6.0,	1.9,	2.3,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20130101',Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,
			21.0,	6.0,	2.4,	3.7,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20150101',Перечисления.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны,
			 8.0,	6.0,	2.0,	2.0,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны,
			 8.0,	6.0,	2.0,	4.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20180101',Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны,
			13.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20190101',Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны,
			20.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20200101',Перечисления.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.ITОрганизации,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.ITОрганизации,
			 8.0,	6.0,	2.0,	2.0,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.ITОрганизации,
			 8.0,	6.0,	2.0,	4.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20180101',Перечисления.ТарифыСтраховыхВзносов.ITОрганизации,
			13.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20190101',Перечисления.ТарифыСтраховыхВзносов.ITОрганизации,
			20.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20200101',Перечисления.ТарифыСтраховыхВзносов.ITОрганизации,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов,
			 0.0,	0.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов,
			 8.0,	6.0,	2.0,	2.0,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов,
			 8.0,	6.0,	2.0,	4.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20180101',Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов,
			13.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20190101',Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов,
			20.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20200101',Перечисления.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.СМИ,
			 0.0,	0.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.СМИ,
			20.0,	6.0,	2.9,	1.1,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.СМИ,
			20.8,	6.0,	2.9,	3.3,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20130101',Перечисления.ТарифыСтраховыхВзносов.СМИ,
			21.6,	6.0,	2.9,	3.5,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20140101',Перечисления.ТарифыСтраховыхВзносов.СМИ,
			23.2,	6.0,	2.9,	3.9,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20150101',Перечисления.ТарифыСтраховыхВзносов.СМИ,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство,
			18.0,	6.0,	2.9,	3.1,	2.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство,
			18.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20130101',Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20100101',Перечисления.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково,
			14.0,	6.0,	0.0,	0.0,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.СоздатьНаборЗаписей();
    НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = '20100101';
	НоваяСтрока.Размер = 415000;
	НоваяСтрока = НаборЗаписей.Добавить();
	НоваяСтрока.Период = '20110101';
	НоваяСтрока.Размер = 463000;
	НаборЗаписей.Записать();
	
	
КонецПроцедуры

Процедура ПереносДанныхСтраховыхВзносовПоЕНДВ() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНовойРедакцииЗакона212", ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.Ссылка КАК Ссылка,
	|	НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.НомерСтроки КАК НомерСтроки,
	|	НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРНакопительная + НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРНакопительнаяЕНВД КАК ПФРНакопительная,
	|	НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРСтраховая + НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРСтраховаяЕНВД КАК ПФРСтраховая,
	|	0 КАК ПФРСтраховаяЕНВД,
	|	0 КАК ПФРНакопительнаяЕНВД
	|ИЗ
	|	Документ.НДФЛиЕСНДоходыИНалоги.СтраховыеВзносы КАК НДФЛиЕСНДоходыИНалогиСтраховыеВзносы
	|ГДЕ
	|	(НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРСтраховаяЕНВД <> 0
	|			ИЛИ НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.ПФРНакопительнаяЕНВД <> 0)
	|	И НДФЛиЕСНДоходыИНалогиСтраховыеВзносы.МесяцРасчетногоПериода >= &ДатаНовойРедакцииЗакона212
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ОбновитьТабличнуюЧастьОбъектаПоЗапросу(Запрос, "СтраховыеВзносы", "Обработка документов по страховым взносам, часть I");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.Ссылка КАК Ссылка,
	|	РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.НомерСтроки КАК НомерСтроки,
	|	РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ПФРНакопительная + РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ПФРНакопительнаяЕНВД КАК ПФРНакопительная,
	|	РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ПФРСтраховая + РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ПФРСтраховаяЕНВД КАК ПФРСтраховая,
	|	0 КАК ПФРСтраховаяЕНВД,
	|	0 КАК ПФРНакопительнаяЕНВД
	|ИЗ
	|	Документ.РасчетЕСН.ИсчисленныеСтраховыеВзносы КАК РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы
	|ГДЕ
	|	(РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ПФРСтраховаяЕНВД <> 0
	|			ИЛИ РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.ПФРНакопительнаяЕНВД <> 0)
	|	И РасчетСтраховыхВзносовИсчисленныеСтраховыеВзносы.Ссылка.ПериодРегистрации >= &ДатаНовойРедакцииЗакона212
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	ОбновитьТабличнуюЧастьОбъектаПоЗапросу(Запрос, "ИсчисленныеСтраховыеВзносы", "Обработка документов по страховым взносам, часть II");

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Ссылка КАК Ссылка,
	|	РасчетыПоСтраховымВзносам.ФСС + РасчетыПоСтраховымВзносам.ФССЕНВД КАК ФСС,
	|	0 КАК ФССЕНВД
	|ИЗ
	|	Документ.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода >= &ДатаНовойРедакцииЗакона212
	|	И РасчетыПоСтраховымВзносам.ФССЕНВД <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка документов по страховым взносам, часть III");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные КАК СтраховыеВзносыИсчисленные
	|ГДЕ
	|	СтраховыеВзносыИсчисленные.Период >= &ДатаНовойРедакцииЗакона212
	|	И (СтраховыеВзносыИсчисленные.ПФРНакопительнаяЕНВД <> 0
	|			ИЛИ СтраховыеВзносыИсчисленные.ПФРСтраховаяЕНВД <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтраховыеВзносыИсчисленные.Период,
	|	СтраховыеВзносыИсчисленные.Регистратор КАК Регистратор,
	|	СтраховыеВзносыИсчисленные.НомерСтроки КАК НомерСтроки,
	|	СтраховыеВзносыИсчисленные.Активность,
	|	СтраховыеВзносыИсчисленные.ФизЛицо,
	|	СтраховыеВзносыИсчисленные.Организация,
	|	СтраховыеВзносыИсчисленные.ОбособленноеПодразделение,
	|	СтраховыеВзносыИсчисленные.ПФРСтраховая + СтраховыеВзносыИсчисленные.ПФРСтраховаяЕНВД КАК ПФРСтраховая,
	|	0 КАК ПФРСтраховаяЕНВД,
	|	СтраховыеВзносыИсчисленные.ПФРНакопительная + СтраховыеВзносыИсчисленные.ПФРНакопительнаяЕНВД КАК ПФРНакопительная,
	|	0 КАК ПФРНакопительнаяЕНВД,
	|	СтраховыеВзносыИсчисленные.ФСС,
	|	СтраховыеВзносыИсчисленные.ФФОМС,
	|	СтраховыеВзносыИсчисленные.ТФОМС,
	|	СтраховыеВзносыИсчисленные.ФССНесчастныеСлучаи,
	|	СтраховыеВзносыИсчисленные.ПФРПоДополнительномуТарифу,
	|	СтраховыеВзносыИсчисленные.ПФРНаДоплатуКПенсииШахтерам
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыИсчисленные КАК СтраховыеВзносыИсчисленные
	|ГДЕ
	|	СтраховыеВзносыИсчисленные.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ПереписатьНаборыЗаписейПоРегистраторам(РегистрыНакопления.СтраховыеВзносыИсчисленные.СоздатьНаборЗаписей(), Запрос, "Обработка документов по страховым взносам, часть IV");	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода >= &ДатаНовойРедакцииЗакона212
	|	И РасчетыПоСтраховымВзносам.ОблагаетсяЕНВД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Период,
	|	РасчетыПоСтраховымВзносам.Регистратор КАК Регистратор,
	|	РасчетыПоСтраховымВзносам.НомерСтроки КАК НомерСтроки,
	|	РасчетыПоСтраховымВзносам.Активность,
	|	РасчетыПоСтраховымВзносам.ВидДвижения,
	|	РасчетыПоСтраховымВзносам.Организация,
	|	РасчетыПоСтраховымВзносам.ВидПлатежа,
	|	РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода,
	|	ЛОЖЬ КАК ОблагаетсяЕНВД,
	|	РасчетыПоСтраховымВзносам.ПФРСтраховая,
	|	РасчетыПоСтраховымВзносам.ПФРНакопительная,
	|	РасчетыПоСтраховымВзносам.ФСС,
	|	РасчетыПоСтраховымВзносам.ФФОМС,
	|	РасчетыПоСтраховымВзносам.ТФОМС,
	|	РасчетыПоСтраховымВзносам.ФССНесчастныеСлучаи,
	|	РасчетыПоСтраховымВзносам.ПФРПоДополнительномуТарифу,
	|	РасчетыПоСтраховымВзносам.ПФРНаДоплатуКПенсииШахтерам
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ПереписатьНаборыЗаписейПоРегистраторам(РегистрыНакопления.РасчетыПоСтраховымВзносам.СоздатьНаборЗаписей(), Запрос, "Обработка документов по страховым взносам, часть V");	
	

КонецПроцедуры

// Перезаполняет наборы записей регистраторов исправленными данными и записывает их.
//
// Параметры: 
//  НаборЗаписей - Регистр<Сведений,...>НаборЗаписей.<Имя> - переписываемый набор записей
//  Запрос - исполняемый запрос, в котором обязательно присутствует поле Регистратор
//			 остальные поля должны соответствовать полям записи заполняемого регистра;
//			 кроме того, результат запроса должен быть упорядочен, 
//			 первое поле упорядочивания - Регистратор
//  ТекстЗаголовка - строка, начало сообщения, выводимого в строке состояния
//
// Возвращаемое значение:
//  Нет
//
Процедура ПереписатьНаборыЗаписейПоРегистраторам(НаборЗаписей, Запрос, ТекстЗаголовка) Экспорт

	#Если Клиент Тогда
		ТекстСообщения = ТекстЗаголовка;
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		Пока ВыборкаРегистраторов.Следующий() Цикл
		    ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),ВыборкаРегистраторов);
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры


Процедура ЗаполнитьВидыДоходовПоСтраховымВзносам() Экспорт

	СпрВидов = Справочники.ДоходыПоСтраховымВзносам;

	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.РаспределятьПоБазовымНачислениям, Ложь, 	Ложь,   Ложь); 
	
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.НеЯвляетсяОбъектом,		Ложь, 	Ложь, 	Ложь); 
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.НеОблагаетсяЦеликом,	Ложь, 	Ложь,   Ложь); 
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ПособияЗаСчетФСС,		Ложь, 	Ложь,	Ложь);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ДенежноеДовольствиеВоеннослужащих,	Ложь, 	Ложь,	Ложь);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ДенежноеСодержаниеПрокуроров,		Ложь, 	Ложь,	Ложь);
	
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору,			Ложь,	Истина,	Истина);	// ПФР , ФСС, ФОМС
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору,Ложь,	Ложь,	Истина); 	// ПФР , ФСС, ФОМС
	
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ОблагаетсяЦеликом,				Истина, Истина, Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.Матпомощь,						Истина, Истина,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.МатпомощьПриРожденииРебенка,	Истина, Истина,	Истина);

	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.ДоговорыГПХ,							Истина, Ложь,	Истина); // ПФР , ФСС, ФОМС
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеАудиовизуальныеПроизведения,	Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеГрафическиеПроизведения,		Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеДругиеМузыкальныеПроизведения,	Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеИсполнениеПроизведений,		Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеЛитературныеПроизведения,		Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеМузыкальноСценическиеПроизведение,	Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеНаучныеТруды,					Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеОткрытия,						Истина, Ложь,	Истина);
	ОписатьВидДоходаПоСтраховымВзносам(СпрВидов.АвторскиеСкульптуры,					Истина, Ложь,	Истина);
	
	// ---------------------------------------------------
	// ЗНАЧЕНИЯ СКИДОК К ДОХОДАМ НА 01.01.2010

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Доходы.Ссылка
	|ИЗ
	|	Справочник.ДоходыПоСтраховымВзносам КАК Доходы
	|ГДЕ
	|	Доходы.Предопределенный";

	СписокПредопределенныхКодовДоходов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");

	ДатаСведений = '20100101';

	НаборЗаписей = РегистрыСведений.СтраховыеВзносыСкидкиКДоходам.СоздатьНаборЗаписей();

	// Удалим ранее установленные значения на дату сведений по предопределенным элементам
	НаборЗаписей.Отбор.Период.Значение = ДатаСведений;
	НаборЗаписей.Отбор.Период.Использование = Истина;

	НаборЗаписей.Отбор.ВидДохода.ВидСравнения = ВидСравнения.Равно;
	НаборЗаписей.Отбор.ВидДохода.Использование = Истина;
	Для Каждого ВидДохода Из СписокПредопределенныхКодовДоходов Цикл
		НаборЗаписей.Отбор.ВидДохода.Значение = ВидДохода;
		НаборЗаписей.Записать();
	КонецЦикла;

	// Отменим фильтр по кодам доходов перед получением оставшихся записей на дату сведений
	НаборЗаписей.Отбор.ВидДохода.Использование = Ложь;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.Матпомощь;
	НоваяЗапись.ГодоваяСкидка	= 4000;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.МатпомощьПриРожденииРебенка;
	НоваяЗапись.НормативЗатрат	= 50000;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеАудиовизуальныеПроизведения;
	НоваяЗапись.НормативЗатрат	= 30;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеГрафическиеПроизведения;
	НоваяЗапись.НормативЗатрат	= 30;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеДругиеМузыкальныеПроизведения;
	НоваяЗапись.НормативЗатрат	= 25;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеИсполнениеПроизведений;
	НоваяЗапись.НормативЗатрат	= 20;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеЛитературныеПроизведения;
	НоваяЗапись.НормативЗатрат	= 20;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеМузыкальноСценическиеПроизведение;
	НоваяЗапись.НормативЗатрат	= 40;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеНаучныеТруды;
	НоваяЗапись.НормативЗатрат	= 20;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеОткрытия;
	НоваяЗапись.НормативЗатрат	= 30;
 	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Период			= ДатаСведений;
	НоваяЗапись.ВидДохода		= СпрВидов.АвторскиеСкульптуры;
	НоваяЗапись.НормативЗатрат	= 40;
	// Запишем набор записей
	НаборЗаписей.Записать();

КонецПроцедуры

Процедура ВписатьНалоговыйПериодВОперацию() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛиЕСНДоходыИНалоги.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТДокументыКОбработке
	|ИЗ
	|	Документ.НДФЛиЕСНДоходыИНалоги КАК НДФЛиЕСНДоходыИНалоги
	|ГДЕ
	|	НДФЛиЕСНДоходыИНалоги.НалоговыйПериод = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГОД(МАКСИМУМ(Месяцы.МесяцНалоговогоПериода)) КАК НалоговыйПериод,
	|	Месяцы.Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.НДФЛСведенияОДоходах КАК НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиНДФЛСведенияОДоходах.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.МесяцНалоговогоПериода,
	|		НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.НДФЛИсчисленный13 КАК НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиНДФЛИсчисленный13.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.МесяцНалоговогоПериода,
	|		НДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.НДФЛПредоставленныеВычеты КАК НДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиНДФЛПредоставленныеВычеты.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.МесяцНалоговогоПериода,
	|		НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.НДФЛУдержанный КАК НДФЛиЕСНДоходыИНалогиНДФЛУдержанный
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиНДФЛУдержанный.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиЕСНСведенияОДоходах.МесяцНалоговогоПериода,
	|		НДФЛиЕСНДоходыИНалогиЕСНСведенияОДоходах.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.ЕСНСведенияОДоходах КАК НДФЛиЕСНДоходыИНалогиЕСНСведенияОДоходах
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиЕСНСведенияОДоходах.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиЕСННалоги.МесяцНалоговогоПериода,
	|		НДФЛиЕСНДоходыИНалогиЕСННалоги.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.ЕСННалоги КАК НДФЛиЕСНДоходыИНалогиЕСННалоги
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиЕСННалоги.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.ПериодРегистрации,
	|		НДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.ПособияСоциальномуСтрахованию КАК НДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиПособияСоциальномуСтрахованию.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		НДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.ПериодРегистрации,
	|		НДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка
	|	ИЗ
	|		Документ.НДФЛиЕСНДоходыИНалоги.ПособияПоУходуЗаРебенкомДоПолутораЛет КАК НДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет
	|	ГДЕ
	|		НДФЛиЕСНДоходыИНалогиПособияПоУходуЗаРебенкомДоПолутораЛет.Ссылка В
	|				(ВЫБРАТЬ
	|					Документы.Ссылка
	|				ИЗ
	|					ВТДокументыКОбработке КАК Документы)) КАК Месяцы
	|
	|СГРУППИРОВАТЬ ПО
	|	Месяцы.Ссылка";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка документов регистрации доходов по НДФЛ и ЕСН");

КонецПроцедуры

Процедура ПреобразоватьКодЕСНвКодПоСтраховымВзносам() Экспорт 

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	ВЫБОР
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ВыплатыЗаСчетПрибыли)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом)
	|				КОНЕЦ
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораГПХ)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ДоговорыГПХ)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПособияЗаСчетФСС)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеОблагаетсяЦеликом)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.НеЯвляетсяОбъектом)
	|			ТОГДА ВЫБОР
	|					КОГДА Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1300)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеЛитературныеПроизведения)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом)
	|				КОНЕЦ
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ОблагаетсяЦеликом)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.МатпомощьПриРожденииРебенка)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.РаспределятьПоБазовымНачислениям)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.РаспределятьПоБазовымНачислениям)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2201)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеЛитературныеПроизведения)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2202)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеГрафическиеПроизведения)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2203)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеСкульптуры)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2204)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеАудиовизуальныеПроизведения)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2205)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеМузыкальноСценическиеПроизведение)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2206)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеДругиеМузыкальныеПроизведения)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2207)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеИсполнениеПроизведений)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2208)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеНаучныеТруды)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|				И Начисления.КодДоходаНДФЛ = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код2209)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеОткрытия)
	|		КОГДА Начисления.КодДоходаЕСН = ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ДоговораАвторские)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.АвторскиеЛитературныеПроизведения)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ПустаяСсылка)
	|	КОНЕЦ КАК КодДоходаСтраховыеВзносы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка,
	|		ОсновныеНачисленияОрганизаций.КодДоходаЕСН КАК КодДоходаЕСН,
	|		ОсновныеНачисленияОрганизаций.КодДоходаНДФЛ КАК КодДоходаНДФЛ
	|	ИЗ
	|		ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы = ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.ПустаяСсылка)
	|		И ОсновныеНачисленияОрганизаций.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.ПустаяСсылка)) КАК Начисления";

	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка начислений");

КонецПроцедуры

Процедура ОбновитьОбъектыПоЗапросу(Запрос = Неопределено, ТекстСообщения = "")

	Если Запрос = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаОбъектов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаОбъектов.Следующий() Цикл
		Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаОбъектов);
		#Если Клиент Тогда
			Если Номер % 30 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
		Объект.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура СоздатьЗаписиУчетнойПолитики()
	
	//Создание учетной политики
	
	УчетнаяПолитикаСрезПоследних = РегистрыСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(Дата(2009,12,31));
	
	Для Каждого ЗаписьРегистра Из УчетнаяПолитикаСрезПоследних Цикл
		Попытка
			НоваяЗапись = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьМенеджерЗаписи();			
			ЗаполнитьЗначенияСвойств(НоваяЗапись,ЗаписьРегистра);
			НоваяЗапись.Период = Дата(2010,01,01);
			Если НоваяЗапись.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
				НоваяЗапись.ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим;
			Иначе
				НоваяЗапись.ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим;
			КонецЕсли;			
			НоваяЗапись.Записать();		
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
		КонецПопытки
	КонецЦикла;
	
	//Исправление учетной политики
	
	НаборЗаписейРегистра = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Прочитать();
	Если НаборЗаписейРегистра.Количество() <> 0 Тогда
		Для Индекс = 0 По НаборЗаписейРегистра.Количество()-1 Цикл
			
			ЗаписьРегистра = НаборЗаписейРегистра[Индекс];
			Если ЗаписьРегистра.Период >= Дата(2010,01,01) Тогда
				Если НЕ ЗначениеЗаполнено(ЗаписьРегистра.ВидТарифаСтраховыхВзносов) Тогда
					Если ЗаписьРегистра.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая Тогда
						ЗаписьРегистра.ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим;
					Иначе
						ЗаписьРегистра.ВидТарифаСтраховыхВзносов = Перечисления.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим;
					КонецЕсли;							
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		Попытка
			НаборЗаписейРегистра.Записать();		
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
		КонецПопытки
	КонецЕсли;
	
КонецПроцедуры

//Обновление 2010 г.
Процедура ОбновлениеКодовДоходовВычетовНДФЛдля2010года() Экспорт

	УстановитьРеквизитыКодаДоходаНДФЛ(Справочники.ДоходыНДФЛ.Код1211, Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13, "1211");
	
	НаборЗаписей = РегистрыСведений.НДФЛВычетыПоДоходам.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.КодДохода.Установить(Справочники.ДоходыНДФЛ.Код1211);
	ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, '20090101', Справочники.ДоходыНДФЛ.Код1211, 12000, 0);
	НаборЗаписей.Записать();
	
	ОписатьКодВычетаНДФЛ(Справочники.ВычетыНДФЛ.Код310, "310", "310", "-", "Не предоставляется с 1 января 2010 года", "Убыток, полученный в налоговом периоде по операциям купли-продажи ценных бумаг, обращающихся на организованном рынке ценных бумаг", "не предоставлялся");
	ОписатьКодВычетаНДФЛ(Справочники.ВычетыНДФЛ.Код311, "311", "313", "311", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории РФ жилого дома, квартиры или доли (долей) в них", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры, комнаты или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 2 000 000 руб.", "Сумма, израсходованная налогоплательщиком на новое строительство либо приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них (кроме сумм, направленных на погашение процентов по целевым займам (кредитам) и фактически израсходованных на новое строительство или приобретение на территории Российской Федерации жилого дома, квартиры или доли (долей) в них), в размере фактически произведенных и документально подтвержденных расходов в пределах 1 000 000 руб.");
	
	ОписатьКодВычетаНДФЛ(Справочники.ВычетыНДФЛ.Код319, "319", "-",   "-", "Сумма упл-х пенс-х взносов по договору негосударственного пенсионного обеспечения и/или страх-х взносов по договору добровольного пенсионного страх-ия", "не предоставлялся", "не предоставлялся");
	ОписатьКодВычетаНДФЛ(Справочники.ВычетыНДФЛ.Код607, "607", "-",   "-", "Вычет в сумме уплаченных работодателем страховых взносов за работника на накопительную часть трудовой пенсии, но не более 12000 рублей в год", "не предоставлялся", "не предоставлялся");

КонецПроцедуры

// Добавляет запись в набор записей регистра "НДФЛВычетыПоДоходам"
//
Процедура ДобавитьСкидкуКДодохамНДФЛ(НаборЗаписей, ДатаСведений, КодДохода, ГодовойВычет, НормативЗатрат)

	НоваяЗапись = НаборЗаписей.Добавить();

	НоваяЗапись.Период         = ДатаСведений;
	НоваяЗапись.КодДохода      = КодДохода;
	НоваяЗапись.ГодовойВычет   = ГодовойВычет;
	НоваяЗапись.НормативЗатрат = НормативЗатрат;

КонецПроцедуры

// Переписывает реквизиты некоторых строк табличной части исправляемых объектов.
//
// Параметры: 
//  Запрос - исполняемый запрос, в котором обязательно присутствуют поля Ссылка и НомерСтроки
//			 остальные поля должны содержать исправленные данные, имена полей 
//           должны соответствовать именам исправляемых реквизитов;
//           кроме того, результат запроса должен быть уорядочен по полю Ссылка
//  ИмяТЧ - строка, имя табличной части объекта
//  ТекстСообщения - строка, начало сообщения, выводимого в строке состояния
//
// Возвращаемое значение:
//  Нет
//
Процедура ОбновитьТабличнуюЧастьОбъектаПоЗапросу(Запрос = Неопределено, ИмяТЧ, ТекстСообщения = "") Экспорт

	Если Запрос = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаОбъектов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаОбъектов.СледующийПоЗначениюПоля("Ссылка") Цикл
		
		Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		
		Пока ВыборкаОбъектов.Следующий() Цикл
			СтрокаТЧ = Объект[ИмяТЧ].Найти(ВыборкаОбъектов.НомерСтроки,"НомерСтроки");
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,ВыборкаОбъектов);
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		
		Объект.Записать();
		
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

Процедура ОбновлениеДокументовПерсучета2010() Экспорт
	
	// Прописываем номера пачек
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АнкетаЗастрахованногоЛица.Ссылка,
	|	АнкетаЗастрахованногоЛица.Номер КАК Номер,
	|	АнкетаЗастрахованногоЛица.Организация КАК Организация,
	|	ГОД(АнкетаЗастрахованногоЛица.Дата) КАК Год,
	|	АнкетаЗастрахованногоЛица.НомерПачки
	|ИЗ
	|	Документ.АнкетаЗастрахованногоЛица КАК АнкетаЗастрахованногоЛица
	|ГДЕ
	|	АнкетаЗастрахованногоЛица.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Ссылка,
	|	ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Номер,
	|	ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Организация,
	|	ГОД(ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Дата),
	|	ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.НомерПачки
	|ИЗ
	|	Документ.ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства КАК ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства
	|ГДЕ
	|	ЗаявлениеОбОбменеДубликатеСтраховогоСвидетельства.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаДСВвПФР.Ссылка,
	|	ПередачаДСВвПФР.Номер,
	|	ПередачаДСВвПФР.Организация,
	|	ГОД(ПередачаДСВвПФР.Дата),
	|	ПередачаДСВвПФР.НомерПачки
	|ИЗ
	|	Документ.ПередачаДСВвПФР КАК ПередачаДСВвПФР
	|ГДЕ
	|	ПередачаДСВвПФР.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаСЗВ4вПФР.Ссылка,
	|	ПередачаСЗВ4вПФР.Номер,
	|	ПередачаСЗВ4вПФР.Организация,
	|	ГОД(ПередачаСЗВ4вПФР.Дата),
	|	ПередачаСЗВ4вПФР.НомерПачки
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация,
	|	ГОД(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата),
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.НомерПачки
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год,
	|	Организация,
	|	Номер";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка документов перс.учета, часть I";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
			
			НомерПачки = "";
			Пока Выборка.Следующий() Цикл
				Если Не ЗначениеЗаполнено(Выборка.НомерПачки) Тогда
					ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					ДокументОбъект.НомерПачки = ПроцедурыПерсонифицированногоУчета.НомерПачкиДокумента(Выборка.Номер);
					ДокументОбъект.ОбменДанными.Загрузка = Истина;
					ДокументОбъект.Записать();
					Если ОбщегоНазначения.ТолькоЦифрыВСтроке(ДокументОбъект.НомерПачки, , Ложь) И НомерПачки < ДокументОбъект.НомерПачки Тогда
						НомерПачки = ДокументОбъект.НомерПачки
					КонецЕсли;
				Иначе 
					Если ОбщегоНазначения.ТолькоЦифрыВСтроке(Выборка.НомерПачки, , Ложь) И НомерПачки < Выборка.НомерПачки Тогда
						НомерПачки = Выборка.НомерПачки
					КонецЕсли;
				КонецЕсли;
				#Если Клиент Тогда
					Если Номер % 30 = 0 Тогда
						Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
					КонецЕсли;
					Номер = Номер + 1;
				#КонецЕсли
			КонецЦикла;
		
			ТекущийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(Выборка.Организация, Выборка.Год);
			НомерПачки = Число(НомерПачки);
			Если НомерПачки > ТекущийНомер Тогда
				РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(Выборка.Организация, Выборка.Год, НомерПачки);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	// Обрабатываем данные о стаже
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаписиОСтажеДляСЗВ4.ФизЛицо КАК ФизЛицо,
	|	ЗаписиОСтажеДляСЗВ4.ОбособленноеПодразделение,
	|	ЗаписиОСтажеДляСЗВ4.КатегорияЗастрахованныхЛиц,
	|	ЗаписиОСтажеДляСЗВ4.НомерОсновнойЗаписи,
	|	ЗаписиОСтажеДляСЗВ4.НомерДополнительнойЗаписи,
	|	ЗаписиОСтажеДляСЗВ4.Год КАК Год,
	|	ЗаписиОСтажеДляСЗВ4.ДатаНачалаПериода,
	|	ЗаписиОСтажеДляСЗВ4.ДатаОкончанияПериода,
	|	ЗаписиОСтажеДляСЗВ4.ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВ4.КодПозицииСписка,
	|	ЗаписиОСтажеДляСЗВ4.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтажеДляСЗВ4.ОснованиеВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ТретийПараметрВыслугиЛет,
	|	ЗаписиОСтажеДляСЗВ4.ТерриториальныеУсловия
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтажеДляСЗВ4
	|ГДЕ
	|	ЗаписиОСтажеДляСЗВ4.Год < 2010
	|	И ЗаписиОСтажеДляСЗВ4.ОтчетныйПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Год,
	|	ФизЛицо";
	
	НаборЗаписей = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизЛицо.Использование = Истина;
	НаборЗаписей.Отбор.Год.Использование = Истина;
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка данных о стаже для перс.учета, часть I";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	Выборка = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = Выборка.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
		НаборЗаписей.Отбор.Год.Значение = Выборка.Год;
		Пока Выборка.СледующийПоЗначениюПоля("ФизЛицо") Цикл
			НаборЗаписей.Отбор.ФизЛицо.Значение = Выборка.ФизЛицо;
			Пока Выборка.Следующий() Цикл
				СтрокаНабора = НаборЗаписей.Добавить();
			    ЗаполнитьЗначенияСвойств(СтрокаНабора,Выборка);
				СтрокаНабора.ОтчетныйПериод = Дата(Выборка.Год, 1, 1);
				#Если Клиент Тогда
					Если Номер % 30 = 0 Тогда
						Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
					КонецЕсли;
					Номер = Номер + 1;
				#КонецЕсли
			КонецЦикла;
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтажеДляСЗВ4.Год КАК Год
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтажеДляСЗВ4
	|ГДЕ
	|	ЗаписиОСтажеДляСЗВ4.Год >= 2010
	|	И ЗаписиОСтажеДляСЗВ4.ОтчетныйПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	
	ТекстСообщения = "Обработка данных о стаже для перс.учета, часть II";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	НаборЗаписей = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Отбор.ОтчетныйПериод.Установить('00010101');
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
		НаборЗаписей.Записать();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли

	// В документах прошлых лет проставляем значения новых реквизитов
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПередачаСЗВ4вПФР.Ссылка,
	|	ПередачаСЗВ4вПФР.Год,
	|	ПередачаСЗВ4вПФР.Дата КАК Дата,
	|	ПередачаСЗВ4вПФР.Организация КАК Организация,
	|	"""" КАК ТипСведенийСЗВ,
	|	ПередачаСЗВ4вПФР.Руководитель,
	|	ПередачаСЗВ4вПФР.ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.Год < 2010
	|	И ПередачаСЗВ4вПФР.ОтчетныйПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Год,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.УдалитьТипСведений = ""ИСХД""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ПЕНСИОННАЯ)
	|	КОНЕЦ,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Руководитель,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ДолжностьРуководителя
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Год < 2010
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыРегистра.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Наименование
	|ПОМЕСТИТЬ ВТДанныеРуководителя
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОтветственныеЛицаОрганизаций.Период) КАК Период,
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.Организация КАК Организация
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|			ПО Документы.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|				И Документы.Дата >= ОтветственныеЛицаОрганизаций.Период
	|	ГДЕ
	|		ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|		И Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Ссылка,
	|		Документы.Организация) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|		ПО ПериодыРегистра.Период = ОтветственныеЛицаОрганизаций.Период
	|			И ПериодыРегистра.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	2009 КАК Год,
	|	ДАТАВРЕМЯ(2009, 1, 1, 0, 0, 0) КАК ОтчетныйПериод
	|ПОМЕСТИТЬ ВТОтчетныеПериоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2008,
	|	ДАТАВРЕМЯ(2008, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2007,
	|	ДАТАВРЕМЯ(2007, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2006,
	|	ДАТАВРЕМЯ(2006, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2005,
	|	ДАТАВРЕМЯ(2005, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2004,
	|	ДАТАВРЕМЯ(2004, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2003,
	|	ДАТАВРЕМЯ(2003, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2002,
	|	ДАТАВРЕМЯ(2002, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2001,
	|	ДАТАВРЕМЯ(2001, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2000,
	|	ДАТАВРЕМЯ(2000, 1, 1, 0, 0, 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	Документы.Год,
	|	ВЫБОР
	|		КОГДА Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ДанныеРуководителя.Руководитель
	|		ИНАЧЕ Документы.Руководитель
	|	КОНЕЦ КАК Руководитель,
	|	ВЫБОР
	|		КОГДА Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ДанныеРуководителя.ДолжностьРуководителя
	|		ИНАЧЕ Документы.ДолжностьРуководителя
	|	КОНЕЦ КАК ДолжностьРуководителя,
	|	Документы.ТипСведенийСЗВ,
	|	ЕСТЬNULL(ОтчетныеПериоды.ОтчетныйПериод, ДАТАВРЕМЯ(2000, 1, 1, 0, 0, 0)) КАК ОтчетныйПериод
	|ИЗ
	|	ВТДокументы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРуководителя КАК ДанныеРуководителя
	|		ПО Документы.Ссылка = ДанныеРуководителя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтчетныеПериоды КАК ОтчетныеПериоды
	|		ПО Документы.Год = ОтчетныеПериоды.Год";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка документов перс.учета, часть II");
	
	// Фиксируем пенсионные документы 2010 года, чтобы их можно было еще раз посмотреть 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Руководитель,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Год = 2010
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.УдалитьТипСведений = ""ПЕНС""
	|	И (НЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.СпециальныйДокумент2010года)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаСЗВ4вПФР.Ссылка,
	|	ПередачаСЗВ4вПФР.Дата,
	|	ПередачаСЗВ4вПФР.Организация,
	|	ПередачаСЗВ4вПФР.Руководитель,
	|	ПередачаСЗВ4вПФР.ДолжностьРуководителя
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.Проведен
	|	И ПередачаСЗВ4вПФР.Год = 2010
	|	И (НЕ ПередачаСЗВ4вПФР.СпециальныйДокумент2010года)
	|	И ПередачаСЗВ4вПФР.ТипСведений = ""ПЕНС""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыРегистра.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Наименование
	|ПОМЕСТИТЬ ВТДанныеРуководителя
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОтветственныеЛицаОрганизаций.Период) КАК Период,
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.Организация КАК Организация
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|			ПО Документы.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|				И Документы.Дата >= ОтветственныеЛицаОрганизаций.Период
	|	ГДЕ
	|		ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|		И Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Ссылка,
	|		Документы.Организация) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|		ПО ПериодыРегистра.Период = ОтветственныеЛицаОрганизаций.Период
	|			И ПериодыРегистра.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0) КАК ОтчетныйПериод,
	|	ИСТИНА КАК СпециальныйДокумент2010года,
	|	ВЫБОР
	|		КОГДА Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ДанныеРуководителя.Руководитель
	|		ИНАЧЕ Документы.Руководитель
	|	КОНЕЦ КАК Руководитель,
	|	ВЫБОР
	|		КОГДА Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ДанныеРуководителя.ДолжностьРуководителя
	|		ИНАЧЕ Документы.ДолжностьРуководителя
	|	КОНЕЦ КАК ДолжностьРуководителя
	|ИЗ
	|	ВТДокументы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРуководителя КАК ДанныеРуководителя
	|		ПО Документы.Ссылка = ДанныеРуководителя.Ссылка";;
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка документов перс.учета, часть III");
	
	// Прочие документы 2010 года помечаем на удаление 
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен,
	|	ВЫБОР
	|		КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.УдалитьТипСведений = ""ИСХД""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ПЕНСИОННАЯ)
	|	КОНЕЦ КАК ТипСведенийСЗВ,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Руководитель,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.ДолжностьРуководителя
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Год >= 2010
	|	И (НЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.СпециальныйДокумент2010года)
	|	И ОтчетныйПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПередачаСЗВ4вПФР.Ссылка,
	|	ПередачаСЗВ4вПФР.Дата,
	|	ПередачаСЗВ4вПФР.Организация,
	|	ПередачаСЗВ4вПФР.Проведен,
	|	"""",
	|	ПередачаСЗВ4вПФР.Руководитель,
	|	ПередачаСЗВ4вПФР.ДолжностьРуководителя
	|ИЗ
	|	Документ.ПередачаСЗВ4вПФР КАК ПередачаСЗВ4вПФР
	|ГДЕ
	|	ПередачаСЗВ4вПФР.Год >= 2010
	|	И (НЕ ПередачаСЗВ4вПФР.СпециальныйДокумент2010года)
	|	И ПередачаСЗВ4вПФР.ОтчетныйПериод = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыРегистра.Ссылка КАК Ссылка,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизаций.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизаций.ФизическоеЛицо.Наименование
	|ПОМЕСТИТЬ ВТДанныеРуководителя
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ОтветственныеЛицаОрганизаций.Период) КАК Период,
	|		Документы.Ссылка КАК Ссылка,
	|		Документы.Организация КАК Организация
	|	ИЗ
	|		ВТДокументы КАК Документы
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|			ПО Документы.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|				И Документы.Дата >= ОтветственныеЛицаОрганизаций.Период
	|	ГДЕ
	|		ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|		И Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Документы.Ссылка,
	|		Документы.Организация) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеЛицаОрганизаций КАК ОтветственныеЛицаОрганизаций
	|		ПО ПериодыРегистра.Период = ОтветственныеЛицаОрганизаций.Период
	|			И ПериодыРегистра.Организация = ОтветственныеЛицаОрганизаций.СтруктурнаяЕдиница
	|ГДЕ
	|	ОтветственныеЛицаОрганизаций.ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Ссылка,
	|	Документы.ТипСведенийСЗВ,
	|	Документы.Проведен,
	|	ВЫБОР
	|		КОГДА Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ДанныеРуководителя.Руководитель
	|		ИНАЧЕ Документы.Руководитель
	|	КОНЕЦ КАК Руководитель,
	|	ВЫБОР
	|		КОГДА Документы.Руководитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			ТОГДА ДанныеРуководителя.ДолжностьРуководителя
	|		ИНАЧЕ Документы.ДолжностьРуководителя
	|	КОНЕЦ КАК ДолжностьРуководителя,
	|	ДАТАВРЕМЯ(2010, 1, 1, 0, 0, 0) КАК ОтчетныйПериод,
	|	ИСТИНА КАК ПометкаУдаления,
	|	ЛОЖЬ КАК ПринятоВПФР
	|ИЗ
	|	ВТДокументы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеРуководителя КАК ДанныеРуководителя
	|		ПО Документы.Ссылка = ДанныеРуководителя.Ссылка";
	
	ТекстСообщения = "Обработка документов перс.учета, часть IV";
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаОбъектов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	Пока ВыборкаОбъектов.Следующий() Цикл
		Объект = ВыборкаОбъектов.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект,ВыборкаОбъектов,, "Проведен");
		#Если Клиент Тогда
			Если Номер % 30 = 0 Тогда
				Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
			КонецЕсли;
			Номер = Номер + 1;
		#КонецЕсли
		Если ВыборкаОбъектов.Проведен Тогда
			Объект.ОбменДанными.Загрузка = Ложь;
			Объект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.Записать();
		КонецЕсли;
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Застрахованные.Ссылка КАК Ссылка,
	|	Застрахованные.ФизЛицо
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК Застрахованные
	|ГДЕ
	|	Застрахованные.СтраховойНомерПФР = """"
	|	И Застрахованные.ФизЛицо.СтраховойНомерПФР <> """"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизЛицо КАК ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ ВТФИО
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|			&ДатаАктуальности,
	|			ФизЛицо В
	|				(ВЫБРАТЬ
	|					Лица.ФизЛицо КАК ФизЛицо
	|				ИЗ
	|					ВТДокументы КАК Лица)) КАК ФИОФизЛицСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Застрахованные.Ссылка КАК Ссылка,
	|	Застрахованные.НомерСтроки КАК НомерСтроки,
	|	Застрахованные.ФизЛицо,
	|	Застрахованные.АдресДляИнформирования,
	|	ВЫБОР
	|		КОГДА Застрахованные.СтраховойНомерПФР = """"
	|			ТОГДА Застрахованные.ФизЛицо.СтраховойНомерПФР
	|		ИНАЧЕ Застрахованные.СтраховойНомерПФР
	|	КОНЕЦ КАК СтраховойНомерПФР,
	|	ВЫБОР
	|		КОГДА Застрахованные.Фамилия = """"
	|			ТОГДА ЕСТЬNULL(ФИО.Фамилия, """")
	|		ИНАЧЕ Застрахованные.Фамилия
	|	КОНЕЦ КАК Фамилия,
	|	ВЫБОР
	|		КОГДА Застрахованные.Имя = """"
	|			ТОГДА ЕСТЬNULL(ФИО.Имя, """")
	|		ИНАЧЕ Застрахованные.Имя
	|	КОНЕЦ КАК Имя,
	|	ВЫБОР
	|		КОГДА Застрахованные.Отчество = """"
	|			ТОГДА ЕСТЬNULL(ФИО.Отчество, """")
	|		ИНАЧЕ Застрахованные.Отчество
	|	КОНЕЦ КАК Отчество,
	|	Застрахованные.НачисленоСтраховая,
	|	Застрахованные.УплаченоСтраховая,
	|	Застрахованные.НачисленоНакопительная,
	|	Застрахованные.УплаченоНакопительная
	|ИЗ
	|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК Застрахованные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТФИО КАК ФИО
	|		ПО Застрахованные.ФизЛицо = ФИО.ФизЛицо
	|ГДЕ
	|	Застрахованные.Ссылка В
	|			(ВЫБРАТЬ
	|				Документы.Ссылка
	|			ИЗ
	|				ВТДокументы КАК Документы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	Запрос.УстановитьПараметр("ДатаАктуальности", ОбщегоНазначения.ПолучитьРабочуюДату());
	
	ОбновитьТабличнуюЧастьОбъектаПоЗапросу(Запрос, "РаботникиОрганизации", "Обработка документов перс.учета, часть V");
	
КонецПроцедуры

Процедура КодыПерсучета2010() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ПД)
	|			ТОГДА ""27-ПД""
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГД)
	|			ТОГДА ""27-ГД""
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР)
	|			ТОГДА ""27-ГДХР""
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ПДРК)
	|			ТОГДА ""27-ПДРК""
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМ)
	|			ТОГДА ""27-СМ""
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМХР)
	|			ТОГДА ""27-СМХР""
	|		КОГДА ОснованияВыслугиЛет.Ссылка = ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СП)
	|			ТОГДА ""27-СП""
	|		ИНАЧЕ ОснованияВыслугиЛет.Код
	|	КОНЕЦ КАК КодДляОтчетности2010,
	|	ОснованияВыслугиЛет.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОснованияВыслугиЛет КАК ОснованияВыслугиЛет
	|ГДЕ
	|	ОснованияВыслугиЛет.КодДляОтчетности2010 = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОсобыеУсловияТруда.Ссылка = ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст28_ОС)
	|			ТОГДА ""27-ОС""
	|		КОГДА ОсобыеУсловияТруда.Ссылка = ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст28_ПЖ)
	|			ТОГДА ""27-ПЖ""
	|		ИНАЧЕ ОсобыеУсловияТруда.Код
	|	КОНЕЦ,
	|	ОсобыеУсловияТруда.Ссылка
	|ИЗ
	|	Справочник.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда
	|ГДЕ
	|	ОсобыеУсловияТруда.КодДляОтчетности2010 = """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка кодов перс.учета");
	
КонецПроцедуры

Процедура ДополнитьСпособыОтраженияЗарплатыВРеглУчетеПоСчету97()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СпособыОтраженияЗарплатыВРеглУчете.Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияЗарплатыВРеглУчете КАК СпособыОтраженияЗарплатыВРеглУчете
	|ГДЕ
	|	СпособыОтраженияЗарплатыВРеглУчете.СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов)";
	Способы = Запрос.Выполнить().Выбрать();
	
	Пока Способы.Следующий() Цикл
		
		Элемент = Способы.Ссылка.ПолучитьОбъект();
		
		Элемент.СчетДтНУ = Элемент.СчетДт;
		Элемент.СубконтоДтНУ1 = Элемент.СубконтоДт1;
		Элемент.СубконтоДтНУ2 = Элемент.СубконтоДт2;
		Элемент.СубконтоДтНУ3 = Элемент.СубконтоДт3;
		Элемент.ОбменДанными.Загрузка = Истина;
		Элемент.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведенияОТарифеНародныеХудожественныеПромыслы() Экспорт 

	НаборЗаписей = РегистрыСведений.ТарифСтраховыхВзносов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВидТарифа.Установить(Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы);
	
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20110101',Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы,
			16.0,	6.0,	1.9,	1.1,	1.2);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20120101',Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы,
			16.0,	6.0,	1.9,	2.3,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20130101',Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы,
			21.0,	6.0,	2.4,	3.7,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС
	ВписатьСтрокуРегистраТарифСтраховыхВзносов(НаборЗаписей,'20150101',Перечисления.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы,
			26.0,	6.0,	2.9,	5.1,	0.0);	// ПФР (всего), ПФРНакопительная, ФСС, ФФОМС, ТФОМС

	НаборЗаписей.Записать();
	
	
КонецПроцедуры

Процедура ЗарегистрироватьРасчетыНалоговогоАгента() Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.УстановитьПараметр("ПустойКПП","");
	Запрос.УстановитьПараметр("ДатаЗакона229ФЗ", ПроведениеРасчетов.ДатаЗакона229ФЗ());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.Регистратор,
	|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК Сумма
	|ПОМЕСТИТЬ ВТУдержано
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Удержание)
	|	И НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода >= &ДатаЗакона229ФЗ
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛРасчетыСБюджетом.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор,
	|	СУММА(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТНачислено
	|ИЗ
	|	РегистрНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	ВТУдержано КАК НДФЛРасчетыСБюджетом
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачислено КАК РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
	|		ПО НДФЛРасчетыСБюджетом.Регистратор = РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Регистратор
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.Сумма <> ЕСТЬNULL(РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.Сумма, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.НомерСтроки,
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.КодДохода,
	|	НДФЛРасчетыСБюджетом.КПП,
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.Налог КАК Сумма,
	|	НДФЛРасчетыСБюджетом.Период,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.ОбособленноеПодразделение,
	|	НДФЛРасчетыСБюджетом.Регистратор
	|ПОМЕСТИТЬ ВТРасчетыФЛ
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Удержание)
	|	И НДФЛРасчетыСБюджетом.Налог <> 0
	|	И НДФЛРасчетыСБюджетом.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НомерСтроки,
	|	ЕСТЬNULL(СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус,
	|	ДатыРегистра.Регистратор
	|ПОМЕСТИТЬ ВТСтатусНалогоплательщика
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыФЛ.ФизЛицо КАК ФизЛицо,
	|		МАКСИМУМ(СтатусФизЛицКакНалогоплательщиковНДФЛ.Период) КАК Период,
	|		РасчетыФЛ.НомерСтроки КАК НомерСтроки,
	|		РасчетыФЛ.Регистратор КАК Регистратор
	|	ИЗ
	|		ВТРасчетыФЛ КАК РасчетыФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|			ПО РасчетыФЛ.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|				И РасчетыФЛ.МесяцНалоговогоПериода >= СтатусФизЛицКакНалогоплательщиковНДФЛ.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыФЛ.ФизЛицо,
	|		РасчетыФЛ.НомерСтроки,
	|		РасчетыФЛ.Регистратор) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|		ПО ДатыРегистра.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|			И ДатыРегистра.Период = СтатусФизЛицКакНалогоплательщиковНДФЛ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыФЛ.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РасчетыФЛ.ФизЛицо,
	|	РасчетыФЛ.ОбособленноеПодразделение КАК Организация,
	|	РасчетыФЛ.МесяцНалоговогоПериода,
	|	РасчетыФЛ.Сумма,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КПП <> &ПустойКПП
	|			ТОГДА РасчетыФЛ.КПП
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КПП
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КПП, &ПустойКПП)
	|	КОНЕЦ КАК КПП,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КодПоОКАТО <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.КодПоОКАТО
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КодПоОКАТО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КодПоОКАТО
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КодПоОКАТО, &ПустойКодПоОКАТО)
	|	КОНЕЦ КАК КодПоОКАТО,
	|	ВЫБОР
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|				КОНЕЦ
	|		КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|		КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Ставка,
	|	РасчетыФЛ.НомерСтроки КАК НомерСтроки,
	|	РасчетыФЛ.Регистратор КАК Регистратор
	|ИЗ
	|	ВТРасчетыФЛ КАК РасчетыФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусНалогоплательщика КАК Статусы
	|		ПО РасчетыФЛ.НомерСтроки = Статусы.НомерСтроки
	|			И РасчетыФЛ.Регистратор = Статусы.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	#Если Клиент Тогда
		ТекстСообщения = "Обработка расчетов по НДФЛ";
		Состояние(ТекстСообщения + ": подготовка данных ...");
	#КонецЕсли
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	#Если Клиент Тогда
		ВсегоДоков = ВыборкаРегистраторов.Количество();
		Номер = 1;
		Состояние(ТекстСообщения + ": обработано 0 из " + ВсегоДоков);
	#КонецЕсли
	НаборЗаписей = РегистрыНакопления.РасчетыНалоговыхАгентовСБюджетомПоНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	Пока ВыборкаРегистраторов.СледующийПоЗначениюПоля("Регистратор") Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		Пока ВыборкаРегистраторов.Следующий() Цикл
			СтрокаНабора = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаРегистраторов);
			СтрокаНабора.ОКАТО_КПП = СправкиПоНДФЛ.СуммаОКАТОиКПП(ВыборкаРегистраторов.КодПоОКАТО, ВыборкаРегистраторов.КПП);
			#Если Клиент Тогда
				Если Номер % 30 = 0 Тогда
					Состояние(ТекстСообщения + ": обработано " + Номер + " из " + ВсегоДоков);
				КонецЕсли;
				Номер = Номер + 1;
			#КонецЕсли
		КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей.Очистить();
	КонецЦикла;
	#Если Клиент Тогда
		Состояние(ТекстСообщения + ": обработано " + ВсегоДоков + " из " + ВсегоДоков);
	#КонецЕсли
	
КонецПроцедуры

// {КОРП
Процедура ОбработкаДокументовДепонирования()
	
	#Если Клиент Тогда
		Состояние("Выполняется обновление документов учета депонентов.");
	#КонецЕсли

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ссылка КАК Ссылка,
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПодразделениеОрганизации КАК ПодразделениеОрганизации
	|ИЗ
	|	Документ.ДепонированиеОрганизаций.ДепонированиеЗаработнойПлаты КАК ДепонированиеОрганизацийДепонированиеЗаработнойПлаты
	|ГДЕ
	|	ДепонированиеОрганизацийДепонированиеЗаработнойПлаты.Ведомость.ПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ссылка,
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость.ПодразделениеОрганизации
	|ИЗ
	|	Документ.СписаниеДепонентовВДоходыОрганизаций.ВыплатаДепонентов КАК СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов
	|ГДЕ
	|	СписаниеДепонентовВДоходыОрганизацийВыплатаДепонентов.Ведомость.ПодразделениеОрганизации <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивОбработанныхДокументов = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		Если МассивОбработанныхДокументов.Найти(Выборка.Ссылка) = Неопределено Тогда
			
			Попытка
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ПодразделениеОрганизации = Выборка.ПодразделениеОрганизации;				
				ДокументОбъект.Записать();
				МассивОбработанныхДокументов.Добавить(Выборка.Ссылка);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	#Если Клиент Тогда
		Состояние("");
	#КонецЕсли
	
КонецПроцедуры
// }КОРП

////////////////////////////////////////////////////////////////////////////////
// ...

Процедура ЗаполнитьНовыеРегистрыСтавокНалогаНаПрибыль()      
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
	 "ВЫБРАТЬ
	 |	СтавкиНалогаНаПрибыльДляВсехОрганизаций.СтавкаФБ,
	 |	СтавкиНалогаНаПрибыльДляВсехОрганизаций.Период
	 |ИЗ
	 |	РегистрСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций КАК СтавкиНалогаНаПрибыльДляВсехОрганизаций";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
       Возврат;
   КонецЕсли;
	
	Запрос.Текст =       		
	
	"ВЫБРАТЬ
	|	УДалитьСтавкиНалогаНаПрибыль.Период КАК Период,
	|	УДалитьСтавкиНалогаНаПрибыль.Организация,
	|	ЕСТЬNULL(УДалитьСтавкиНалогаНаПрибыль.СтавкаФБ, 0) КАК СтавкаФБ,
	|	ЕСТЬNULL(УДалитьСтавкиНалогаНаПрибыль.СтавкаСубъектРФ, 0) КАК СтавкаРФ
	|ИЗ
	|	РегистрСведений.УДалитьСтавкиНалогаНаПрибыль КАК УДалитьСтавкиНалогаНаПрибыль
	|ГДЕ
	|	УДалитьСтавкиНалогаНаПрибыль.СтавкаФБ <> 0
	|	И УДалитьСтавкиНалогаНаПрибыль.СтавкаСубъектРФ <> 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	СтавкаРФ";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Установить(Ложь);
		НаборЗаписейРегистра = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Прочитать();
		ЗаписьРегистра = НаборЗаписейРегистра.Добавить();
		ЗаписьРегистра.Период = Дата(2010,01,01);
		ЗаписьРегистра.СтавкаФБ = 2;
		ЗаписьРегистра.СтавкаСубъектРФ = 18;
		Попытка	
			НаборЗаписейРегистра.Записать();		
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
		КонецПопытки;
		Возврат;
		
	КонецЕсли;
	
	ТаблицаСтавок = Результат.Выгрузить();
	ТаблицаСтавок2 = ТаблицаСтавок.Скопировать();
	ТаблицаСтавок2.Свернуть("Период,СтавкаФБ,СтавкаРФ");
	ТаблицаСтавок2.Сортировать("Период");
	ПерваяДата = ТаблицаСтавок2.Получить(0).Период;
	ТаблицаСтавок2.Свернуть("СтавкаФБ,СтавкаРФ");
	ТаблицаСтавок2.Сортировать("СтавкаРФ");
	
	ПерваяЗапись = ТаблицаСтавок2.Получить(0);
	ПоследняяЗапись = ТаблицаСтавок2.Получить(ТаблицаСтавок2.Количество() - 1);
	
	НаборЗаписейРегистра = РегистрыСведений.СтавкиНалогаНаПрибыльДляВсехОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Очистить();
	ЗаписьРегистра = НаборЗаписейРегистра.Добавить();
	ЗаписьРегистра.Период = ПерваяДата;
	ЗаписьРегистра.СтавкаФБ = ПерваяЗапись.СтавкаФБ;
	ЗаписьРегистра.СтавкаСубъектРФ = ПерваяЗапись.СтавкаРФ;
	Попытка	
		НаборЗаписейРегистра.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
	КонецПопытки;
	
	
	Если ПоследняяЗапись.СтавкаРФ = 18 И ТаблицаСтавок2.Количество() = 2 Тогда
		
		ЗаписьРегистра = НаборЗаписейРегистра.Добавить();
		ЗаписьРегистра.Период = Дата(2009,01,01);
		ЗаписьРегистра.СтавкаФБ = ПоследняяЗапись.СтавкаФБ;
		ЗаписьРегистра.СтавкаСубъектРФ = 18;
		Попытка	
			НаборЗаписейРегистра.Записать();		
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
		КонецПопытки;
		
	КонецЕсли;
	
	Если ТаблицаСтавок2.Количество() < 3 Тогда
		Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Установить(Ложь);
		Возврат;
	КонецЕсли;
	
	Константы.ПрименяютсяРазныеСтавкиНалогаНаПрибыль.Установить(Истина);
	НаборЗаписейРегистра = РегистрыСведений.СтавкиНалогаНаПрибыльВБюджетСубъектовРФ.СоздатьНаборЗаписей();
	НаборЗаписейРегистра.Очистить();
	
	Для Каждого Строка ИЗ  ТаблицаСтавок Цикл
		
		ЗаписьРегистра = НаборЗаписейРегистра.Добавить();
		ЗаписьРегистра.Период = Строка.Период;
		ЗаписьРегистра.Организация = Строка.Организация;
		// {ОбособленныеПодразделения
		ЗаписьРегистра.РегистрацияВИФНС = Строка.Организация.РегистрацияВИФНС;
		// }ОбособленныеПодразделения
		ЗаписьРегистра.СтавкаСубъектРФ = Строка.СтавкаРФ;
	КонецЦикла;
	
	Попытка	
		НаборЗаписейРегистра.Записать();		
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());			
	КонецПопытки
	
	
	
КонецПроцедуры

Процедура ЗаполнитьВедениеРозницы()
	
	ЕстьРозничнаяТорговля = Константы.ЕстьРозничнаяТорговля.Получить();
	
	НаборЗаписей = РегистрыСведений.УчетнаяПолитикаОрганизаций.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для каждого СтрокаНабора Из НаборЗаписей Цикл
		СтрокаНабора.ОрганизацияВедетРозничнуюТорговлю = ЕстьРозничнаяТорговля;				
	КонецЦикла; 
	Попытка
		НаборЗаписей.Записать();
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
	Счет41 = ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ;
	Счет42 = ПланыСчетов.Хозрасчетный.ТорговаяНаценкаНТТ;
	
	Запрос = Новый Запрос;
	СчетаРозницы = Новый Массив;
	СчетаРозницы.Добавить(Счет41);
	СчетаРозницы.Добавить(Счет42);
	Запрос.УстановитьПараметр("СчетаРозницы", СчетаРозницы);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт В ИЕРАРХИИ (&СчетаРозницы)
	|			ИЛИ Хозрасчетный.СчетКт В ИЕРАРХИИ (&СчетаРозницы))";
	Регистраторы = Запрос.Выполнить().Выбрать();
	
	Пока Регистраторы.Следующий() Цикл
		
		НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Регистраторы.Регистратор);
		НаборЗаписей.Прочитать();
		Для Счетчик = 0 По НаборЗаписей.Количество() - 1 Цикл
			Проводка = НаборЗаписей.Получить(Счетчик);
			КодДебета = Лев(Проводка.СчетДт.Код,5);
			Если (КодДебета = "41.12" Или КодДебета = "42.02") И Проводка.СуммаНУДт = 0 Тогда
				Проводка.СуммаНУДт = Проводка.Сумма;
			КонецЕсли;
			КодКредита = Лев(Проводка.СчетКт.Код,5);
			Если (КодКредита = "41.12" Или КодКредита = "42.02") И Проводка.СуммаНУКт = 0 Тогда
				Проводка.СуммаНУКт = Проводка.Сумма;
			КонецЕсли;
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьДокументыПринятиеКУчетуОССпособомОтраженияРасходовПриСписании()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Ссылка
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|ГДЕ
	|	ПринятиеКУчетуОС.ПорядокВключенияСтоимостиВСоставРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету)";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.СпособОтраженияРасходовПриВключенииВСтоимость = ДокОбъект.СпособыОтраженияРасходовПоАмортизации;
			ДокОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьВидОперацииПоРасчетамСФондами()

	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаПФР) КАК ВидОперации
	|ИЗ
	|	Документ.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.ФСС = 0
	|	И РасчетыПоСтраховымВзносам.ФССНесчастныеСлучаи = 0
	|	И РасчетыПоСтраховымВзносам.ФФОМС = 0
	|	И РасчетыПоСтраховымВзносам.ТФОМС = 0
	|	И РасчетыПоСтраховымВзносам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетыПоСтраховымВзносам.УдалитьУплата)
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФСС)
	|ИЗ
	|	Документ.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.ПФРСтраховая = 0
	|	И РасчетыПоСтраховымВзносам.ПФРНакопительная = 0
	|	И РасчетыПоСтраховымВзносам.ПФРНаДоплатуКПенсииШахтерам = 0
	|	И РасчетыПоСтраховымВзносам.ПФРПоДополнительномуТарифу = 0
	|	И РасчетыПоСтраховымВзносам.ФФОМС = 0
	|	И РасчетыПоСтраховымВзносам.ТФОМС = 0
	|	И РасчетыПоСтраховымВзносам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетыПоСтраховымВзносам.УдалитьУплата)
	|
	|ОБЪЕДИНИТЬ 
	|
	|ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетыПоСтраховымВзносам.УплатаФОМС)
	|ИЗ
	|	Документ.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.ПФРСтраховая = 0
	|	И РасчетыПоСтраховымВзносам.ПФРНакопительная = 0
	|	И РасчетыПоСтраховымВзносам.ПФРНаДоплатуКПенсииШахтерам = 0
	|	И РасчетыПоСтраховымВзносам.ПФРПоДополнительномуТарифу = 0
	|	И РасчетыПоСтраховымВзносам.ФСС = 0
	|	И РасчетыПоСтраховымВзносам.ФССНесчастныеСлучаи = 0
	|	И РасчетыПоСтраховымВзносам.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРасчетыПоСтраховымВзносам.УдалитьУплата)";
	
	ОбновитьОбъектыПоЗапросу(Запрос, "Обработка расчетов по страховым взносам, часть I");
	
	Запрос.УстановитьПараметр("МесяцРасчетногоПериода", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыПоСтраховымВзносам.Регистратор
	|ПОМЕСТИТЬ ВТРегистраторы
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода >= &МесяцРасчетногоПериода
	|	И РасчетыПоСтраховымВзносам.ОтчетныйПериодПерсучетаПФР = ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыПоСтраховымВзносам.Период,
	|	РасчетыПоСтраховымВзносам.Регистратор КАК Регистратор,
	|	РасчетыПоСтраховымВзносам.НомерСтроки КАК НомерСтроки,
	|	РасчетыПоСтраховымВзносам.Активность,
	|	РасчетыПоСтраховымВзносам.ВидДвижения,
	|	РасчетыПоСтраховымВзносам.Организация,
	|	РасчетыПоСтраховымВзносам.ВидПлатежа,
	|	РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода,
	|	РасчетыПоСтраховымВзносам.ОблагаетсяЕНВД,
	|	ВЫБОР
	|		КОГДА РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода < ДАТАВРЕМЯ(2010, 7, 1)
	|			ТОГДА НАЧАЛОПЕРИОДА(РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода, ГОД)
	|		КОГДА РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода < ДАТАВРЕМЯ(2011, 1, 1)
	|			ТОГДА ДАТАВРЕМЯ(2010, 7, 1)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(РасчетыПоСтраховымВзносам.МесяцРасчетногоПериода, КВАРТАЛ)
	|	КОНЕЦ КАК ОтчетныйПериодПерсучетаПФР,
	|	РасчетыПоСтраховымВзносам.ПФРСтраховая,
	|	РасчетыПоСтраховымВзносам.ПФРНакопительная,
	|	РасчетыПоСтраховымВзносам.ФСС,
	|	РасчетыПоСтраховымВзносам.ФФОМС,
	|	РасчетыПоСтраховымВзносам.ТФОМС,
	|	РасчетыПоСтраховымВзносам.ФССНесчастныеСлучаи,
	|	РасчетыПоСтраховымВзносам.ПФРПоДополнительномуТарифу,
	|	РасчетыПоСтраховымВзносам.ПФРНаДоплатуКПенсииШахтерам
	|ИЗ
	|	РегистрНакопления.РасчетыПоСтраховымВзносам КАК РасчетыПоСтраховымВзносам
	|ГДЕ
	|	РасчетыПоСтраховымВзносам.Регистратор В
	|			(ВЫБРАТЬ
	|				Регистраторы.Регистратор
	|			ИЗ
	|				ВТРегистраторы КАК Регистраторы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Регистратор,
	|	НомерСтроки";
	
	ПереписатьНаборыЗаписейПоРегистраторам(РегистрыНакопления.РасчетыПоСтраховымВзносам.СоздатьНаборЗаписей(), Запрос, "Обработка расчетов по страховым взносам, часть II");	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
// списком регламентированных отчетов. 
//  Процедура должна вызываться при первоначальном заполнении пустой 
// информационной базы. Предполагается, что перед запуском процедуры справочник
// РегламентированныеОтчеты - пустой.
//
Процедура ЗаполнитьСписокРегламентированныхОтчетов(ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина)

	Перем ДеревоОтчетов;
	Перем ОбработкаОбновлениеОтчетов;

	Если ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение Тогда
	
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");
		Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено Тогда
				ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();
				ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;
				ОбъектРеглОтчет.Записать();
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	// Заполнением списка отчетов выполняется путем вызова экспортных процедур
	// основной формы обработки ОбновлениеРегламентированнойОтчетности.
	#Если Клиент Тогда
	ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать().ПолучитьФорму("ОсновнаяФорма");
	
	// Получаем список регламентированных отчетов в виде дерева.
	ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();

	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		// нет обновлений
		Возврат;
	КонецЕсли;
	
	// Заполняем списком отчетов.
	ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);
	#КонецЕсли

КонецПроцедуры // ЗаполнитьСписокРегламентированныхОтчетов()

Процедура ВключитьМеханизмОнлайнСервисовРО()
	
	Константы.ИспользоватьМеханизмОнлайнСервисовРО.Установить(Истина);
	
КонецПроцедуры

Процедура ОтключитьВнешнийМодульДокументооборотаСФНС()
	
	Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Установить(Ложь);
	
КонецПроцедуры

Процедура ОбновлениеОбъектовЭДОсКО()
	
	Выборка = Справочники.УчетныеЗаписиДокументооборота.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектУЗ = Выборка.ПолучитьОбъект();
		ОбъектУЗ.ПредназначенаДляДокументооборотаСФНС = Истина;
		ОбъектУЗ.ОбменДанными.Загрузка = Истина;
		ОбъектУЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеОбъектовОбменаСФНСПриПереходеНаФормат535()
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦиклыОбмена.Ссылка КАК ЦиклОбмена
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	                      |ГДЕ
	                      |	ЦиклыОбмена.Вид = &Вид
	                      |	И ЦиклыОбмена.ФорматДокументооборота = &ФорматДокументооборота");
	Запрос.УстановитьПараметр("Вид", Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС);
	Запрос.УстановитьПараметр("ФорматДокументооборота", Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектЦиклОбмена = Выборка.ЦиклОбмена.ПолучитьОбъект();
		ОбъектЦиклОбмена.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
		ОбъектЦиклОбмена.ОбменДанными.Загрузка = Истина;
		ОбъектЦиклОбмена.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьФорматыЭДОуОбъектовНФДиИОН141()
	
	// устанавливаем форматы документооборота у запросов ИОН
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.Ссылка
	                      |ИЗ
	                      |	Документ.ЗапросНаИнформационноеОбслуживаниеНалогоплательщика КАК ЗапросНаИнформационноеОбслуживаниеНалогоплательщика
	                      |ГДЕ
	                      |	ЗапросНаИнформационноеОбслуживаниеНалогоплательщика.ФорматЗапроса = &ФорматЗапроса");
	Запрос.УстановитьПараметр("ФорматЗапроса", Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектДок = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектДок.ФорматЗапроса = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
		ОбъектДок.ОбменДанными.Загрузка = Истина;
		ОбъектДок.Записать();
	КонецЦикла;
	
	// устанавливаем форматы документооборота у циклов обмена
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ЦиклыОбмена.Ссылка
	                      |ИЗ
	                      |	Справочник.ЦиклыОбмена КАК ЦиклыОбмена
	                      |ГДЕ
	                      |	ЦиклыОбмена.ФорматДокументооборота = &ФорматДокументооборота
	                      |	И ЦиклыОбмена.Тип В(&ТипЦиклаОбмена)");
	ТипыЦикловОбмена = Новый Массив;
	ТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалоговогоОргана);
	ТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.НеформализованныеДокументыНалогоплательщика);
	ТипыЦикловОбмена.Добавить(Перечисления.ТипыЦикловОбмена.ЗапросыНаИнформационноеОбслуживание);
	Запрос.УстановитьПараметр("ТипЦиклаОбмена", ТипыЦикловОбмена);
	Запрос.УстановитьПараметр("ФорматДокументооборота", Перечисления.ФорматыДокументооборотаСФНС.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектСпр = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСпр.ФорматДокументооборота = Перечисления.ФорматыДокументооборотаСФНС.Приказ141;
		ОбъектСпр.ОбменДанными.Загрузка = Истина;
		ОбъектСпр.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтработатьИзмененияВСтруктуреСправочникаНалоговыеОрганы()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НалоговыеОрганы.Ссылка КАК НалоговыйОрган
	                      |ИЗ
	                      |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы
	                      |ГДЕ
	                      |	НалоговыеОрганы.УдалитьСертификат <> &ПустойСертификат");
	Запрос.УстановитьПараметр("ПустойСертификат", "");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектНО = Выборка.НалоговыйОрган.ПолучитьОбъект();
		Если ПустаяСтрока(ОбъектНО.УдалитьСертификат) ИЛИ ОбъектНО.Сертификаты.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрСертификат = ОбъектНО.Сертификаты.Добавить();
		НовСтрСертификат.Сертификат = ОбъектНО.УдалитьСертификат;
		
		ОбъектНО.ОбменДанными.Загрузка = Истина;
		Попытка
			ОбъектНО.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось отработать изменение структуры справочника для налогового органа " + СокрЛП(ОбъектНО.Код) + ".");
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ ТОРГОВОГО ОБОРУДОВАНИЯ

// Составляет полное имя файла из имени каталога и имени файла.
//
// Параметры
//  ИмяКаталога  – Строка, содержащая путь к каталогу файла на диске.
//  ИмяФайла     – Строка, содержащая имя файла, без имени каталога.
//
// Возвращаемое значение:
//   Строка – полное имя файла с учетом каталога.
//
Функция ПолучитьИмяФайлаТО(ИмяКаталога, ИмяФайла) Экспорт

	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Возврат ИмяКаталога + ?(Прав(ИмяКаталога, 1) = "\", "", "\") + ИмяФайла;	
		
	Иначе
		
		Возврат ИмяКаталога;
		
	КонецЕсли;

КонецФункции // ПолучитьИмяФайла()

// Формирует имя каталога для сохранения/чтения файлов. Для различных типов объектов возможны 
// различные алгоритмы определения каталога.
//
// Параметры
//  ОбъектФайла  – Ссылка на объект данных, для которого прикрепляются файлы.
//
// Возвращаемое значение:
//   Строка – каталог файлов для указанного объекта и пользователя.
//
Функция ПолучитьИмяКаталогаТО() Экспорт

	// Получим рабочий каталог из свойств пользователя.
	РабочийКаталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойКаталогФайлов");

	// Если рабочий каталог не указан получим каталог временных файлов программы
	Если ПустаяСтрока(РабочийКаталог) Тогда
		РабочийКаталог = КаталогВременныхФайлов();
	КонецЕсли;

	// Так как при различных указаниях рабочего каталога возможно наличие или отсутствие
	// последнего слеша, приведем строку каталога к унифицированному виду - без слеша на конце.
	Если Прав(РабочийКаталог, 1) = "\" Тогда
		РабочийКаталог = Лев(РабочийКаталог, СтрДлина(РабочийКаталог) - 1);
	КонецЕсли;

	Возврат РабочийКаталог;

КонецФункции // ПолучитьИмяКаталога()

Процедура ЗаполнитьВидЦикловОбмена()
	
	Выборка = Справочники.ЦиклыОбмена.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОбъектУЗ = Выборка.ПолучитьОбъект();
		Если ОбъектУЗ.Вид.Пустая() Тогда
			ОбъектУЗ.Вид = Перечисления.ВидыЦикловОбмена.ЦиклОбменаСФНС;
			ОбъектУЗ.ОбменДанными.Загрузка = Истина;
			ОбъектУЗ.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// функция обновляет предопределенные настройки отчетов
//
Процедура ЗагрузитьНастройкиОтчетов() Экспорт
	
	#Если Клиент тогда
	ТаблицаНастроек = ТиповыеОтчеты.ПолучитьТаблицуПредопределенныхНастроек();
	
	Для каждого СтрокаНастройки из ТаблицаНастроек Цикл
		
		ТиповыеОтчеты.ЗагрузитьНастройкуПредопределенногоЭлемента(СтрокаНастройки.Макет, СтрокаНастройки.Отчет);
		
	КонецЦикла
	#КонецЕсли	
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ ДЛЯ ТОРГОВОГО ОБОРУДОВАНИЯ

// Процедура выполняет заполнение ресурса "Подключено" регистра сведений "ТорговоеОборудование",
//
Процедура ВыполнитьОбновлениеРегистраСведенийТорговоеОборудование()

	РегТО = РегистрыСведений.ТорговоеОборудование;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РегТО.Идентификатор,
	|	РегТО.Модель.ОбработкаОбслуживания.Вид КАК Вид
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|	НЕ РегТО.Подключено
	|	ИЛИ РегТО.Вид = ЗНАЧЕНИЕ(Перечисление.ВидыТорговогоОборудования.ПустаяСсылка)
	|");

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МЗ = РегТО.СоздатьМенеджерЗаписи();

		МЗ.Идентификатор = Выборка.Идентификатор;

		МЗ.Прочитать();

		МЗ.Подключено = Истина;
		МЗ.Вид        = Выборка.Вид;

		Попытка
			МЗ.Записать(Истина);
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры // ВыполнитьОбновлениеРегистраСведенийТорговоеОборудование()

////////////////////////////////////////////////////////////////////////////////
// ОС

// {КОРП
Процедура ОбработкаРеквизитовМестонахождение()
	
	#Если Клиент Тогда
	//Обновление документов учета ОС
	Состояние("Выполняется обновление данных в связи с изменением правил заполнения документов по учету основных средств");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПринятиеКУчетуОС.Ссылка КАК Ссылка,
	|	ПринятиеКУчетуОС.МестонахождениеОС КАК МестонахождениеОС
	|ИЗ
	|	Документ.ПринятиеКУчетуОС КАК ПринятиеКУчетуОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МодернизацияОС.Ссылка,
	|	МодернизацияОС.МестонахождениеОС
	|ИЗ
	|	Документ.МодернизацияОС КАК МодернизацияОС";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ПодразделениеОрганизации = Выборка.МестонахождениеОС;				
				ДокументОбъект.Записать();				
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	//Обновление документов учета спецодежды
	Состояние("Выполняется обновление данных в связи с изменением правил заполнения документов по учету спец. материалов");
	#КонецЕсли
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаМатериаловВЭксплуатацию.Ссылка КАК Ссылка,
	|	ПередачаМатериаловВЭксплуатацию.Местонахождение КАК Местонахождение
	|ИЗ
	|	Документ.ПередачаМатериаловВЭксплуатацию КАК ПередачаМатериаловВЭксплуатацию";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Попытка
				ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ПодразделениеОрганизации = Выборка.Местонахождение;				
				ДокументОбъект.Записать();				
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;			
			
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
	Состояние("");
	#КонецЕсли
	
КонецПроцедуры
// }КОРП

// Соответствие старых и новых имен файлов обработок обслуживания для автоматического обновления ИБ
мСоответствиеИмен = Новый Соответствие;
мСоответствиеИмен.Вставить("1CFPEmulator_v2.epf",        "1CFPEmulator_v2.epf");
мСоответствиеИмен.Вставить("ATOLGenECR_v2.epf",          "ATOLFiscalPrinters_v2.epf");
мСоответствиеИмен.Вставить("FiscalOPOS_v2.epf",          "1CMoebiusFP_v2.epf");
мСоответствиеИмен.Вставить("IncotexMercuryFP_v2.epf",    "IncotexMercuryFP_v2.epf");
мСоответствиеИмен.Вставить("KKSSparkFP_v2.epf",          "KKSSparkFP_v2.epf");
мСоответствиеИмен.Вставить("ShtrihMFP_v2.epf",           "ShtrihMFiscalPrinters_v2.epf");

