
Перем мСтрокаТаблицыПараметровОтправки;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Получить значение параметра отправки сообщения.
//
Функция ПолучитьЗначениеПараметраОтправки(ИмяПараметра, ЗначениеПоУмолчанию)

	Значение = Неопределено;
	Если Не мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.Свойство(ИмяПараметра, Значение) 
		Или ТипЗнч(Значение) <> Тип("Массив") Или Значение.Количество() < 2 Тогда
		
		Возврат ЗначениеПоУмолчанию;
		
	КонецЕсли;
	
	Возврат Значение[1];

КонецФункции // ПолучитьЗначениеПараметраОтправки()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(ТекстСообщения);

	ЗаголовокФлажка = "Отправлять слепую копию письма на адрес " + мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтправителя[1];
	ЭлементыФормы.ОтправлятьСлепуюКопиюСебе.Заголовок = ЗаголовокФлажка;
	ЭлементыФормы.ОтправлятьСлепуюКопиюСебе.Ширина = 15 + СтрДлина(ЗаголовокФлажка)*6;

	Заголовок = "Отправка электронного сообщения в отдел технической поддержки (" + мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1] + ")";

	ВосстановленноеЗначение = ВосстановитьЗначение("ОтправлятьСлепуюКопиюСебе");
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("Булево") Тогда
		ОтправлятьСлепуюКопиюСебе = ВосстановленноеЗначение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();

	Если ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений")
	   И ОбщегоНазначения.ПроверитьСтруктуруЗаполненияПараметровДляОтправкиСообщенияВОтделТехническойПоддержки(ЗначениеКонстанты)
	   И ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела") <> Неопределено Тогда
		
		мСтрокаТаблицыПараметровОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		
	Иначе
		
		ОтветНаВопрос = Вопрос("Открыть форму настройки параметров?", РежимДиалогаВопрос.ОКОтмена);
		
		Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		Попытка
			ФормаНастройки = ПолучитьОбщуюФорму("НастройкаПараметровОбращенияВОтделТехническойПоддержки");
			ФормаНастройки.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НаписатьСообщение.Доступность = Ложь;
			ФормаНастройки.ОткрытьМодально();
		Исключение
			Сообщить("Форма настройки параметров уже открыта. Закройте ее и повторите команду.");
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();
		Если ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений")
		   И ОбщегоНазначения.ПроверитьСтруктуруЗаполненияПараметровДляОтправкиСообщенияВОтделТехническойПоддержки(ЗначениеКонстанты)
		   И ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела") <> Неопределено Тогда
			мСтрокаТаблицыПараметровОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		Иначе
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("ОтправлятьСлепуюКопиюСебе", ОтправлятьСлепуюКопиюСебе);

КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)

	Если Модифицированность Тогда

		ОтветНаВопрос = Вопрос("При закрытии формы все данные будут потеряны. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если ОтветНаВопрос <> КодВозвратаДиалога.ОК Тогда
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененыНастройкиПараметровОбращенияВОтделТехПоддержки" Тогда
		
		ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();

		Если ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений")
			И ОбщегоНазначения.ПроверитьСтруктуруЗаполненияПараметровДляОтправкиСообщенияВОтделТехническойПоддержки(ЗначениеКонстанты, Ложь)
			И ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела") <> Неопределено Тогда
			
			мСтрокаТаблицыПараметровОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ВЛОЖЕНИЙ ПИСЬМА

// Процедура инициирует процесс отправки электронного сообщения.
//
Процедура КнопкаВыполнитьОтправить(Элемент)

	ТекстСообщения = ЭлементыФормы.ПолеТекстовогоДокумента.ПолучитьТекст();

	Письмо = Новый ИнтернетПочтовоеСообщение;

	Письмо.ИмяОтправителя = СокрЛП(глЗначениеПеременной("глТекущийПользователь").Наименование);
	Письмо.Отправитель    = мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтправителя[1];

	Получатель       = Письмо.Получатели.Добавить();
	Получатель.Адрес = мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1];

	Если ОтправлятьСлепуюКопиюСебе Тогда
		Получатель       = Письмо.СлепыеКопии.Добавить();
		Получатель.Адрес = мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтправителя[1];
	КонецЕсли;

	ТекстСообщенияПисьма           = Письмо.Тексты.Добавить();
	ТекстСообщенияПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.ПростойТекст;
	ТекстСообщенияПисьма.Текст     = ТекстСообщения;

	Письмо.Тема = ТемаСообщения;

	// Еще не забудем про вложения
	Для каждого СтрокаТЧ Из ФайлыВложения Цикл

		// Файл с диска
		Файл = Новый Файл(СтрокаТЧ.ПутьКФайлу);

		Если НЕ Файл.Существует() Тогда
			Продолжить;
		КонецЕсли;

		Письмо.Вложения.Добавить(СтрокаТЧ.ПутьКФайлу, Файл.Имя);

	КонецЦикла;

	ПрофильОтправки = Новый ИнтернетПочтовыйПрофиль;
	ПрофильОтправки.АдресСервераSMTP = мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресCервераSMTP[1];
	ПрофильОтправки.ПортSMTP         = мСтрокаТаблицыПараметровОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_ПортSMTP[1];
	
	Если ПолучитьЗначениеПараметраОтправки("ПараметрыОтправкиЭлектронногоСообщения_НеобходимаАутентификацияSMTP", Ложь) = Истина Тогда
		ПрофильОтправки.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
		ПрофильОтправки.ПользовательSMTP = ПолучитьЗначениеПараметраОтправки("ПараметрыОтправкиЭлектронногоСообщения_Логин",  "");
		ПрофильОтправки.ПарольSMTP       = ПолучитьЗначениеПараметраОтправки("ПараметрыОтправкиЭлектронногоСообщения_Пароль", "");
	КонецЕсли;
	
	Почта = Новый ИнтернетПочта;

	Попытка
		Почта.Подключиться(ПрофильОтправки);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Электронное сообщение не отправлено.");
		Возврат;
	КонецПопытки;

	Попытка
		Почта.Послать(Письмо);
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Электронное сообщение не отправлено.");
		Возврат;
	КонецПопытки;

	Почта.Отключиться();

	Модифицированность = Ложь;

	ЭтаФорма.Закрыть();

	Предупреждение("Сообщение отправлено.");

КонецПроцедуры

// Процедура открывает форму настройки параметров отправки электронного сообщения.
//
Процедура КнопкаВыполнитьНастройкаПараметров(Кнопка)
	
	ФормаНастройки = ПолучитьОбщуюФорму("НастройкаПараметровОбращенияВОтделТехническойПоддержки");
	ФормаНастройки.ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НаписатьСообщение.Доступность = Ложь;
	Если ФормаНастройки.Открыта() Тогда
		ФормаНастройки.Активизировать();
	Иначе
		ФормаНастройки.ОткрытьМодально();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура перезаполняет текст сообщения.
//
Процедура КнопкаВыполнитьЗаполнитьТекст(Кнопка)
	
	Если ЗначениеЗаполнено(ЭлементыФормы.ПолеТекстовогоДокумента.ПолучитьТекст()) Тогда
		Ответ = Вопрос("Текущий текст будет полностью потерян. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки();
	ЭлементыФормы.ПолеТекстовогоДокумента.УстановитьТекст(ТекстСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "НачалоВыбора" элемента формы ФайлыВложения.ПутьКФайлу.
//
Процедура ФайлыВложенияПутьКФайлуНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ЭлементыФормы.ФайлыВложения.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Файл = Новый Файл(Элемент.Значение);
		Если Файл.Существует() Тогда
			Диалог.Каталог = Файл.Путь;
		КонецЕсли;
	КонецЕсли;

	Диалог.Заголовок = "Выберите файл...";
	Диалог.Фильтр    = РаботаСФайлами.ПолучитьФильтрФайлов();
	Диалог.ПредварительныйПросмотр     = Истина;
	Диалог.ПроверятьСуществованиеФайла = Истина;

	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;

	Попытка
		ЭлементыФормы.ФайлыВложения.ТекущиеДанные.ПутьКФайлу = Диалог.ПолноеИмяФайла;
	Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Процедура - обработчик события "Открытие" элемента формы ФайлыВложения.ПутьКФайлу.
//
Процедура ФайлыВложенияПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Файл = Новый Файл(Элемент.Значение);
		Если Файл.Существует() Тогда
			ЗапуститьПриложение("explorer " + Файл.ПолноеИмя);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


