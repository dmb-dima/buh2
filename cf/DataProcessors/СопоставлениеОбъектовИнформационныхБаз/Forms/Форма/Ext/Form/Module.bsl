&НаКлиенте
Перем мВыдаватьПредупреждениеПриЗакрытииФормы;

////////////////////////////////////////////////////////////////////////////////
// НА СЕРВЕРЕ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// проверка, что форма открыта программно
	Если Не Параметры.Свойство("ИмяФайлаСообщенияОбмена") Тогда
		
		НСтрока = НСтр("ru = 'Форма обработки не может быть открыта интерактивно!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	// инициализируем обработку переданными параметрами
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	// вызываем конструктор текущего экземпляра обработки
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.Конструктор();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	// заполняем список отборов
	СписокВыбора = Элементы.ОтборПоСтатусуСопоставления.СписокВыбора;
	СписокВыбора.Добавить("ВсеОбъекты",                          "Все объекты");
	СписокВыбора.Добавить("СопоставленныеОбъектыНеутвержденные", "Изменения");
	СписокВыбора.Добавить("СопоставленныеОбъекты",               "Сопоставленные объекты");
	СписокВыбора.Добавить("НесопоставленныеОбъекты",             "Несопоставленные объекты");
	СписокВыбора.Добавить("НесопоставленныеОбъектыПриемника",    "Несопоставленные объекты этой базы");
	СписокВыбора.Добавить("НесопоставленныеОбъектыИсточника",    "Несопоставленные объекты второй базы");
	
	// установка отбора по умолчанию
	ОтборПоСтатусуСопоставления = "ВсеОбъекты";
	
	// установка заголока формы
	ЗаголовокФормы = Объект.ИмяТаблицыПриемника + "#";
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, ".", " #");
	
	Заголовок = СтрЗаменить(ЗаголовокФормы, "#", """");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ВыполнитьОбновлениеНаСервере(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// выполняем сопоставление объектов
	ОбработкаОбъект.ВыполнитьСопоставлениеОбъектов(Отказ);
	
	// {Дайджест сопоставления}
	КоличествоОбъектовВИсточнике       = ОбработкаОбъект.КоличествоОбъектовВИсточнике();
	КоличествоОбъектовВПриемнике       = ОбработкаОбъект.КоличествоОбъектовВПриемнике();
	КоличествоОбъектовСопоставленных   = ОбработкаОбъект.КоличествоОбъектовСопоставленных();
	КоличествоОбъектовНесопоставленных = ОбработкаОбъект.КоличествоОбъектовНесопоставленных();
	ПроцентСопоставленияОбъектов       = ОбработкаОбъект.ПроцентСопоставленияОбъектов();
	ИндексКартинки                     = ОбменДаннымиСервер.ИндексКартинкиТаблицыИнформацииСтатистики(КоличествоОбъектовНесопоставленных, Объект.ДанныеУспешноЗагружены);
	
	Если Не Отказ Тогда
		
		ТаблицаСопоставления.Загрузить(ОбработкаОбъект.ТаблицаСопоставления());
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьРезультатАвтоматическогоСопоставленияОбъектовИОбновить(Отказ, Знач АдресВременногоХранилища)
	
	Если ЭтоАдресВременногоХранилища(АдресВременногоХранилища) Тогда
		
		ТаблицаАвтоматическиСопоставленныхОбъектовПользователя = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		УдалитьИзВременногоХранилища(АдресВременногоХранилища);
		
		Если ТаблицаАвтоматическиСопоставленныхОбъектовПользователя.Количество() = 0 Тогда
			Возврат; // таблица пустая; выходим
		КонецЕсли;
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		// дополняем таблицу неутвержденных связей
		Для Каждого СтрокаТаблицы ИЗ ТаблицаАвтоматическиСопоставленныхОбъектовПользователя Цикл
			
			ЗаполнитьЗначенияСвойств(ОбработкаОбъект.ТаблицаНеутвержденныхСвязей.Добавить(), СтрокаТаблицы);
			
		КонецЦикла;
		
		// получаем таблицу сопоставления с учетом обновления таблицы неутвержденных связей
		ОбработкаОбъект.ВыполнитьСопоставлениеОбъектов(Отказ);
		
		// {Дайджест сопоставления}
		КоличествоОбъектовВИсточнике       = ОбработкаОбъект.КоличествоОбъектовВИсточнике();
		КоличествоОбъектовВПриемнике       = ОбработкаОбъект.КоличествоОбъектовВПриемнике();
		КоличествоОбъектовСопоставленных   = ОбработкаОбъект.КоличествоОбъектовСопоставленных();
		КоличествоОбъектовНесопоставленных = ОбработкаОбъект.КоличествоОбъектовНесопоставленных();
		ПроцентСопоставленияОбъектов       = ОбработкаОбъект.ПроцентСопоставленияОбъектов();
		ИндексКартинки                     = ОбменДаннымиСервер.ИндексКартинкиТаблицыИнформацииСтатистики(КоличествоОбъектовНесопоставленных, Объект.ДанныеУспешноЗагружены);
		
		Если Не Отказ Тогда
			
			ТаблицаСопоставления.Загрузить(ОбработкаОбъект.ТаблицаСопоставления());
			
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьТаблицуНеутвержденныхЗаписейИОбновить(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// применяем таблицу неутвержденных связей к базе данных
	ОбработкаОбъект.ПрименитьТаблицуНеутвержденныхЗаписей(Отказ);
	
	Если Не Отказ Тогда
		
		// получаем таблицу сопоставления с учетом обновления таблицы неутвержденных связей
		ОбработкаОбъект.ВыполнитьСопоставлениеОбъектов(Отказ);
		
		// {Дайджест сопоставления}
		КоличествоОбъектовВИсточнике       = ОбработкаОбъект.КоличествоОбъектовВИсточнике();
		КоличествоОбъектовВПриемнике       = ОбработкаОбъект.КоличествоОбъектовВПриемнике();
		КоличествоОбъектовСопоставленных   = ОбработкаОбъект.КоличествоОбъектовСопоставленных();
		КоличествоОбъектовНесопоставленных = ОбработкаОбъект.КоличествоОбъектовНесопоставленных();
		ПроцентСопоставленияОбъектов       = ОбработкаОбъект.ПроцентСопоставленияОбъектов();
		ИндексКартинки                     = ОбменДаннымиСервер.ИндексКартинкиТаблицыИнформацииСтатистики(КоличествоОбъектовНесопоставленных, Объект.ДанныеУспешноЗагружены);
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ТаблицаСопоставления.Загрузить(ОбработкаОбъект.ТаблицаСопоставления());
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьТаблицуНеутвержденныхЗаписей(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// применяем таблицу неутвержденных связей к базе данных
	ОбработкаОбъект.ПрименитьТаблицуНеутвержденныхЗаписей(Отказ);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСопоставлениеНаСервере(ВыделенныеСтроки)
	
	Для Каждого ИдентификаторСтроки ИЗ ВыделенныеСтроки Цикл
		
		ТекущиеДанные = ТаблицаСопоставления.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если ТекущиеДанные.СтатусСопоставления = 0 Тогда // сопоставленные через РС (не жестко)
			
			ОтменитьСопоставлениеДанных(ТекущиеДанные, Ложь);
			
		ИначеЕсли ТекущиеДанные.СтатусСопоставления = 3 Тогда // неутвержденное сопоставление
			
			ОтменитьСопоставлениеДанных(ТекущиеДанные, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСопоставлениеДанных(ТекущиеДанные, ЭтоНеутверженнаяСвязь)
	
	Отбор = Новый Структура;
	Отбор.Вставить("УникальныйИдентификаторИсточника", ТекущиеДанные.УникальныйИдентификаторПриемника);
	Отбор.Вставить("УникальныйИдентификаторПриемника", ТекущиеДанные.УникальныйИдентификаторИсточника);
	Отбор.Вставить("ТипИсточника",                     ТекущиеДанные.ТипПриемника);
	Отбор.Вставить("ТипПриемника",                     ТекущиеДанные.ТипИсточника);
	
	Если ЭтоНеутверженнаяСвязь Тогда
		
		НайденныеСтроки = Объект.ТаблицаНеутвержденныхСвязей.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			// удаляем неутвержденную связь в таблице неутвержденных связей
			Объект.ТаблицаНеутвержденныхСвязей.Удалить(НайденныеСтроки[0]);
			
		КонецЕсли;
		
	Иначе
		
		ОтменитьУтвержденноеСопоставлениеНаСервере(Отбор);
		
	КонецЕсли;
	
	
	// добавляем в таблицу сопоставления две строки: источника и приемника
	НоваяСтрокаИсточника = ТаблицаСопоставления.Добавить();
	НоваяСтрокаПриемника = ТаблицаСопоставления.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрокаИсточника, ТекущиеДанные, "ИсточникПоле1, ИсточникПоле2, ИсточникПоле3, ИсточникПоле4, ИсточникПоле5, УникальныйИдентификаторИсточника, ТипИсточника, ИсточникИндексКартинки");
	ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемника, ТекущиеДанные, "ПриемникПоле1, ПриемникПоле2, ПриемникПоле3, ПриемникПоле4, ПриемникПоле5, УникальныйИдентификаторПриемника, ТипПриемника, ПриемникИндексКартинки");
	
	// устанавливаем значения полей для сортировки строки источника
	НоваяСтрокаИсточника.ПолеСортировки1 = ТекущиеДанные.ИсточникПоле1;
	НоваяСтрокаИсточника.ПолеСортировки2 = ТекущиеДанные.ИсточникПоле2;
	НоваяСтрокаИсточника.ПолеСортировки3 = ТекущиеДанные.ИсточникПоле3;
	НоваяСтрокаИсточника.ПолеСортировки4 = ТекущиеДанные.ИсточникПоле4;
	НоваяСтрокаИсточника.ПолеСортировки5 = ТекущиеДанные.ИсточникПоле5;
	НоваяСтрокаИсточника.ИндексКартинки  = ТекущиеДанные.ИсточникИндексКартинки;
	
	// устанавливаем значения полей для сортировки строки приемника
	НоваяСтрокаПриемника.ПолеСортировки1 = ТекущиеДанные.ПриемникПоле1;
	НоваяСтрокаПриемника.ПолеСортировки2 = ТекущиеДанные.ПриемникПоле2;
	НоваяСтрокаПриемника.ПолеСортировки3 = ТекущиеДанные.ПриемникПоле3;
	НоваяСтрокаПриемника.ПолеСортировки4 = ТекущиеДанные.ПриемникПоле4;
	НоваяСтрокаПриемника.ПолеСортировки5 = ТекущиеДанные.ПриемникПоле5;
	НоваяСтрокаПриемника.ИндексКартинки  = ТекущиеДанные.ПриемникИндексКартинки;
	
	НоваяСтрокаИсточника.СтатусСопоставления = -1;
	НоваяСтрокаИсточника.СтатусСопоставленияДополнительный = 1; // несопоставленные объекты
	
	НоваяСтрокаПриемника.СтатусСопоставления = 1;
	НоваяСтрокаПриемника.СтатусСопоставленияДополнительный = 1; // несопоставленные объекты
	
	// удаляем текущую строку таблицы сопоставления
	ТаблицаСопоставления.Удалить(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьУтвержденноеСопоставлениеНаСервере(Отбор)
	
	Отбор.Вставить("УзелИнформационнойБазы", Объект.УзелИнформационнойБазы);
	
	РегистрыСведений.СоответствиеОбъектовИнформационныхБаз.УдалитьЗапись(Отбор);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуДанныхНаСервере(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// применяем таблицу неутвержденных связей к базе данных
	ОбработкаОбъект.ПрименитьТаблицуНеутвержденныхЗаписей(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляЗагрузки = Новый Массив;
	
	КлючТаблицыДанных = ОбменДаннымиСервер.КлючТаблицыДанных(Объект.ТипИсточникаСтрокой, Объект.ТипПриемникаСтрокой, Объект.ЭтоУдалениеОбъекта);
	
	ТаблицыДляЗагрузки.Добавить(КлючТаблицыДанных);
	
	// выполняем загрузку данных из файла пакета в режиме обмена данными
	ОбработкаОбъект.ВыполнитьЗагрузкуДанныхВИнформационнуюБазу(Отказ, ТаблицыДляЗагрузки);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ИндексКартинки = ОбменДаннымиСервер.ИндексКартинкиТаблицыИнформацииСтатистики(КоличествоОбъектовНесопоставленных, Объект.ДанныеУспешноЗагружены);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТаблицуНеутвержденныхСвязейВоВременноеХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.ТаблицаНеутвержденныхСвязей.Выгрузить());
	
КонецФункции

&НаСервере
Функция ПолучитьАдресВременногоХранилищаТаблицыВыбораСвязи(ПараметрыОтбора)
	
	Колонки = "НомерПоПорядку, ПолеСортировки1, ПолеСортировки2, ПолеСортировки3, ПолеСортировки4, ПолеСортировки5, ИндексКартинки";
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаСопоставления.Выгрузить(ПараметрыОтбора, Колонки));
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// НА КЛИЕНТЕ

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Обновить(Неопределено);
	
	// устанавливает флаг модифицированности формы
	ПодключитьОбработчикОжидания("УстановитьМодифицированностьФормы", 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Объект.ТаблицаНеутвержденныхСвязей.Количество() > 0 Тогда
		
		Если мВыдаватьПредупреждениеПриЗакрытииФормы = Истина Тогда
			
			НСтрока = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
			
			Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				
				Возврат; // закрываем форму без сохранения данных
				
			ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
				
				// закрываем форму с сохранением данных
				
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				
				// форму не закрываем; данные не сохраняем
				Отказ = Истина;
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		мВыдаватьПредупреждениеПриЗакрытииФормы = Истина;
		
		// применяем таблицу неутвержденных связей
		ПрименитьТаблицуНеутвержденныхЗаписей(Отказ);
		
		Если Отказ Тогда
			
			Предупреждение(НСтр("ru = 'Возникли ошибки!'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("КлючУникальности",       КлючУникальности);
	ПараметрыОповещения.Вставить("ДанныеУспешноЗагружены", Объект.ДанныеУспешноЗагружены);
	
	Оповестить("ЗакрытиеФормыСопоставленияОбъектов", ПараметрыОповещения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)
	
	Отказ = Ложь;
	
	// проверка на количество пользовательских полей для отображения
	ВыполнитьПроверкуЗаданияПользовательскихПолей(Отказ, Объект.СписокИспользуемыхПолей.ВыгрузитьЗначения());
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// оповещение состояния
	Состояние(НСтр("ru = 'Выполняется сопоставление объектов. Пожалуйста, подождите...'"));
	
	ВыполнитьОбновлениеНаСервере(Отказ);
	
	// устанавливаем текущий отбор в табличной части сопоставления
	УстановитьОтборТабличныхЧастей();
	
	// устанавливаем видимость и заголовки полей таблицы сопоставления
	УстановитьВидимостьПолейТаблицы("ТаблицаСопоставления");
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При выполнении операции сопоставления возникли ошибки.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьАвтоматическоеСопоставление(Команда)
	
	Отказ = Ложь;
	
	// проверка на количество пользовательских полей для отображения
	ВыполнитьПроверкуЗаданияПользовательскихПолей(Отказ, Объект.СписокИспользуемыхПолей.ВыгрузитьЗначения());
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// получаем список полей сопоставления от пользователя
	ПараметрыДляФормы = Новый Структура("СписокПолейСопоставления", Объект.СписокПолейТаблицы.Скопировать());
	
	СписокПолейСопоставления = ОткрытьФормуМодально("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма.НастройкаАвтоматическогоСопоставления", ПараметрыДляФормы, ЭтаФорма);
	
	Если ТипЗнч(СписокПолейСопоставления) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	// выполняем автоматическое сопоставление объектов
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",                         Объект.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена",                     Объект.ИмяФайлаСообщенияОбмена);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника",              Объект.ИмяТипаОбъектаТаблицыИсточника);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",                         Объект.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",                         Объект.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",                        Объект.ПоляТаблицыПриемника);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",                  Объект.ПоляПоискаТаблицыПриемника);
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",                      Объект.УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("СписокПолейТаблицы",                          Объект.СписокПолейТаблицы.Скопировать());
	ПараметрыФормы.Вставить("СписокИспользуемыхПолей",                     Объект.СписокИспользуемыхПолей.Скопировать());
	ПараметрыФормы.Вставить("СписокПолейСопоставления",                    СписокПолейСопоставления.Скопировать());
	ПараметрыФормы.Вставить("МаксимальноеКоличествоПользовательскихПолей", МаксимальноеКоличествоПользовательскихПолей());
	ПараметрыФормы.Вставить("Заголовок",                                   Заголовок);
	
	ПараметрыФормы.Вставить("АдресВременногоХранилищаТаблицыНеутвержденныхСвязей", ПоместитьТаблицуНеутвержденныхСвязейВоВременноеХранилище());
	
	Состояние(НСтр("ru = 'Выполняется автоматическое сопоставление. Пожалуйста, подождите...'"));
	
	// открываем форму выполнения автоматического сопоставления объектов
	АдресВременногоХранилища = ОткрытьФормуМодально("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма.РезультатАвтоматическогоСопоставления", ПараметрыФормы, ЭтаФорма);
	
	Если ТипЗнч(АдресВременногоХранилища) = Тип("Строка") Тогда
		
		// Применяем результат и обновляем таблицу сопоставления с учетом полученного сопоставления объектов
		ПрименитьРезультатАвтоматическогоСопоставленияОбъектовИОбновить(Отказ, АдресВременногоХранилища);
		
		Если Не Отказ Тогда
			
			// устанавливаем текущий отбор
			УстановитьОтборТабличныхЧастей();
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Во время выполнения автоматического сопоставления возникли ошибки.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанных(Команда)
	
	Отказ = Ложь;
	
	НСтрока = НСтр("ru = 'Выполнить загрузку данных в информационную базу?'");
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДанныеУспешноЗагружены Тогда
		
		НСтрока = НСтр("ru = 'Данные уже были успешно загружены. Выполнить загрузку данных повторно?'");
		Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// оповещение состояния
	Состояние(НСтр("ru = 'Выполняется загрузка данных. Пожалуйста, подождите...'"));
	
	// выполняем загрузку данных на сервере
	ВыполнитьЗагрузкуДанныхНаСервере(Отказ);
	
	// обновляем данные в таблице сопоставления
	Обновить(Команда);
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'При выполнении загрузки данных возникли ошибки.'"));
	КонецЕсли;
	
КонецПроцедуры

//

&НаКлиенте
Процедура ИзменитьПоляТаблицы(Команда)
	
	ПараметрыДляФормы = Новый Структура("СписокПолей", Объект.СписокИспользуемыхПолей.Скопировать());
	
	СписокПолейФормыНастройки = ОткрытьФормуМодально("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма.НастройкаПолейТаблицы", ПараметрыДляФормы, ЭтаФорма);
	
	Если ТипЗнч(СписокПолейФормыНастройки) <> Тип("СписокЗначений") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.СписокИспользуемыхПолей = СписокПолейФормыНастройки.Скопировать();
	
	// устанавливаем видимость и заголовки полей таблицы сопоставления
	УстановитьВидимостьПолейТаблицы("ТаблицаСопоставления");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСпискаПолейТаблицы(Команда)
	
	Отказ = Ложь;
	
	ПараметрыДляФормы = Новый Структура("СписокПолей", Объект.СписокПолейТаблицы.Скопировать());
	
	СписокПолейФормыНастройки = ОткрытьФормуМодально("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма.НастройкаПолейТаблицыСопоставления", ПараметрыДляФормы, ЭтаФорма);
	
	Если ТипЗнч(СписокПолейФормыНастройки) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.СписокПолейТаблицы = СписокПолейФормыНастройки.Скопировать();
	
	ЗаполнитьСписокОтмеченнымиЭлементами(Объект.СписокПолейТаблицы, Объект.СписокИспользуемыхПолей);
	
	// формируем Таблицу сортировки
	ЗаполнитьТаблицуСортировки(Объект.СписокИспользуемыхПолей);
	
	// обновляем таблицу сопоставления с учетом новых полей таблицы
	Обновить(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Сортировка(Команда)
	
	ПараметрыДляФормы = Новый Структура("ТаблицаСортировки", Объект.ТаблицаСортировки);
	
	ТаблицаСортировкиРезультат = ОткрытьФормуМодально("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма.НастройкаСортировки", ПараметрыДляФормы, ЭтаФорма);
	
	Если ТипЗнч(ТаблицаСортировкиРезультат) <> Тип("ДанныеФормыКоллекция") Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Объект.ТаблицаСортировки.Очистить();
	
	// заполняем коллекцию формы полученными настройками
	Для Каждого СтрокаТаблицы ИЗ ТаблицаСортировкиРезультат Цикл
		
		ЗаполнитьЗначенияСвойств(Объект.ТаблицаСортировки.Добавить(), СтрокаТаблицы);
		
	КонецЦикла;
	
	// сортируем таблицу сопоставления
	ВыполнитьСортировкуТаблицы();
	
	// обновляем отбор в таблицах
	УстановитьОтборТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСопоставление(Команда)
	
	УстановитьСвязьИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСопоставление(Команда)
	
	ВыделенныеСтроки = Элементы.ТаблицаСопоставления.ВыделенныеСтроки;
	
	ОтменитьСопоставлениеНаСервере(ВыделенныеСтроки);
	
	// обновляем отбор в табличных частях
	УстановитьОтборТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьОбновить(Команда)
	
	Отказ = Ложь;
	
	// применяем таблицу неутвержденных связей
	ПрименитьТаблицуНеутвержденныхЗаписейИОбновить(Отказ);
	
	// устанавливаем текущий отбор в табличной части сопоставления
	УстановитьОтборТабличныхЧастей();
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'Возникли ошибки!'"));
	Иначе
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	мВыдаватьПредупреждениеПриЗакрытииФормы = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусуСопоставленияПриИзменении(Элемент)
	
	УстановитьОтборТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура рТаблицаСопоставленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УстановитьСвязьИнтерактивно();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьМодифицированностьФормы()
	
	Модифицированность = (Объект.ТаблицаНеутвержденныхСвязей.Количество() > 0);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРИКЛАДНЫЕ

&НаКлиенте
Процедура ЗаполнитьТаблицуСортировки(СписокЗначенийИсточник)
	
	Объект.ТаблицаСортировки.Очистить();
	
	Для Каждого Элемент ИЗ СписокЗначенийИсточник Цикл
		
		ЭтоПервоеПоле = СписокЗначенийИсточник.Индекс(Элемент) = 0;
		
		СтрокаТаблицы = Объект.ТаблицаСортировки.Добавить();
		
		СтрокаТаблицы.ИмяПоля               = Элемент.Значение;
		СтрокаТаблицы.Использование         = ЭтоПервоеПоле; // по умолчанию сортируем по первому полю
		СтрокаТаблицы.НаправлениеСортировки = Истина; // по возрастанию
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокОтмеченнымиЭлементами(СписокИсточник, СписокПриемник)
	
	СписокПриемник.Очистить();
	
	Для Каждого Элемент ИЗ СписокИсточник Цикл
		
		Если Элемент.Пометка Тогда
			
			СписокПриемник.Добавить(Элемент.Значение, Элемент.Представление, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборТабличныхЧастей()
	
	Если      ОтборПоСтатусуСопоставления = "ВсеОбъекты"                          Тогда ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура;
	ИначеЕсли ОтборПоСтатусуСопоставления = "НесопоставленныеОбъекты"             Тогда ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура("СтатусСопоставленияДополнительный", 1);
	ИначеЕсли ОтборПоСтатусуСопоставления = "СопоставленныеОбъекты"               Тогда ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура("СтатусСопоставленияДополнительный", 0);
	ИначеЕсли ОтборПоСтатусуСопоставления = "НесопоставленныеОбъектыИсточника"    Тогда ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура("СтатусСопоставления", -1);
	ИначеЕсли ОтборПоСтатусуСопоставления = "НесопоставленныеОбъектыПриемника"    Тогда ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура("СтатусСопоставления",  1);
	ИначеЕсли ОтборПоСтатусуСопоставления = "СопоставленныеОбъектыНеутвержденные" Тогда ФиксированнаяСтруктура = Новый ФиксированнаяСтруктура("СтатусСопоставления",  3);
	КонецЕсли;
	
	Элементы.ТаблицаСопоставления.ОтборСтрок = ФиксированнаяСтруктура;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПроверкуЗаданияПользовательскихПолей(Отказ, ПользовательскиеПоля)
	
	Если ПользовательскиеПоля.Количество() = 0 Тогда
		
		// значение должно быть не нулевое
		НСтрока = НСтр("ru = 'Следует указать хотя бы одно поле для отображения'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.СписокПолейТаблицы",, Отказ);
		
	ИначеЕсли ПользовательскиеПоля.Количество() > МаксимальноеКоличествоПользовательскихПолей() Тогда
		
		// значение должно быть не больше установленного
		СтрокаСообщения = НСтр("ru = 'Уменьшите количество полей (можно выбирать не более %1 полей)'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(МаксимальноеКоличествоПользовательскихПолей()));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,,"Объект.СписокПолейТаблицы",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПолейТаблицы(ИмяТаблицыФормы)
	
	ИмяПоляИсточника = СтрЗаменить("#ИмяТаблицыФормы#ИсточникПолеNN","#ИмяТаблицыФормы#", ИмяТаблицыФормы);
	ИмяПоляПриемника = СтрЗаменить("#ИмяТаблицыФормы#ПриемникПолеNN","#ИмяТаблицыФормы#", ИмяТаблицыФормы);
	
	// снимаем видимость всех полей таблицы сопоставления
	Для НомерПоля = 1 По МаксимальноеКоличествоПользовательскихПолей() Цикл
		
		ПолеИсточника = СтрЗаменить(ИмяПоляИсточника, "NN", Строка(НомерПоля));
		ПолеПриемника = СтрЗаменить(ИмяПоляПриемника, "NN", Строка(НомерПоля));
		
		Элементы[ПолеИсточника].Видимость = Ложь;
		Элементы[ПолеПриемника].Видимость = Ложь;
		
	КонецЦикла;
	
	// устанавливаем видимость полей таблицы сопоставления выбранных пользователем
	Для Каждого Элемент ИЗ Объект.СписокИспользуемыхПолей Цикл
		
		НомерПоля = Объект.СписокИспользуемыхПолей.Индекс(Элемент) + 1;
		
		ПолеИсточника = СтрЗаменить(ИмяПоляИсточника, "NN", Строка(НомерПоля));
		ПолеПриемника = СтрЗаменить(ИмяПоляПриемника, "NN", Строка(НомерПоля));
		
		// устанавливаем видимость полей
		Элементы[ПолеИсточника].Видимость = Элемент.Пометка;
		Элементы[ПолеПриемника].Видимость = Элемент.Пометка;
		
		// устанавливаем заголовки полей
		Элементы[ПолеИсточника].Заголовок = Элемент.Значение;
		Элементы[ПолеПриемника].Заголовок = Элемент.Значение;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвязьИнтерактивно()
	
	ТекущиеДанные = Элементы.ТаблицаСопоставления.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// выбор связи возможен только для несопоставленных объектов источника или приемника
	Если Не (ТекущиеДанные.СтатусСопоставления = -1
		 ИЛИ ТекущиеДанные.СтатусСопоставления = +1) Тогда
		//
		Предупреждение(НСтр("ru = 'Объекты уже сопоставлены'"), 2);
		
		// переводим фокус ввода на таблицу сопоставления
		ТекущийЭлемент = Элементы.ТаблицаСопоставления;
		
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтрокиНачала = Элементы.ТаблицаСопоставления.ТекущаяСтрока;
	
	ПараметрыОтбора = Новый Структура("СтатусСопоставления", ?(ТекущиеДанные.СтатусСопоставления = -1, 1, -1));
	
	// вызов сервера
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресВременногоХранилища",   ПолучитьАдресВременногоХранилищаТаблицыВыбораСвязи(ПараметрыОтбора));
	ПараметрыФормы.Вставить("НомерПоПорядкуСтрокиНачала", ТекущиеДанные.НомерПоПорядку);
	ПараметрыФормы.Вставить("СписокИспользуемыхПолей",    Объект.СписокИспользуемыхПолей.Скопировать());
	ПараметрыФормы.Вставить("МаксимальноеКоличествоПользовательскихПолей", МаксимальноеКоличествоПользовательскихПолей());
	
	// вызов сервера
	НомерПоПорядкуСтрокиОкончания = ОткрытьФормуМодально("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма.ФормаВыбораСвязиСопоставления", ПараметрыФормы, ЭтаФорма);
	
	Если НомерПоПорядкуСтрокиОкончания = Неопределено Тогда
		Возврат; // отказались от выбора связи для сопоставления
	КонецЕсли;
	
	// вызов сервера
	НайденныеСтроки = ТаблицаСопоставления.НайтиСтроки(Новый Структура("НомерПоПорядку", НомерПоПорядкуСтрокиОкончания));
	
	ИдентификаторСтрокиОкончания = НайденныеСтроки[0].ПолучитьИдентификатор();
	
	// обрабатываем полученное сопоставление
	ДобавитьНеутвержденноеСопоставлениеНаКлиенте(ИдентификаторСтрокиНачала, ИдентификаторСтрокиОкончания);
	
	// переводим фокус ввода на таблицу сопоставления
	ТекущийЭлемент = Элементы.ТаблицаСопоставления;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНеутвержденноеСопоставлениеНаКлиенте(ИдентификаторСтрокиНачала, ИдентификаторСтрокиОкончания)
	
	// получаем две сопоставленные строки таблицы по указанным идентификаторам
	// добавляем строку в таблицу неутверженных связей
	// добавляем строку в таблицу сопоставления
	// удаляем две сопоставленные строки из таблицы сопоставления
	
	СтрокаНачала    = ТаблицаСопоставления.НайтиПоИдентификатору(ИдентификаторСтрокиНачала);
	СтрокаОкончания = ТаблицаСопоставления.НайтиПоИдентификатору(ИдентификаторСтрокиОкончания);
	
	Если    СтрокаНачала = Неопределено
		ИЛИ СтрокаОкончания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСопоставлениеИсточникПриемник = (СтрокаНачала.СтатусСопоставления = -1);
	
	СтрокаИсточника = ?(ЭтоСопоставлениеИсточникПриемник, СтрокаНачала,  СтрокаОкончания);
	СтрокаПриемника = ?(ЭтоСопоставлениеИсточникПриемник, СтрокаОкончания, СтрокаНачала);
	
	// добавляем строку в таблицу неутвержденных связей
	НоваяСтрока = Объект.ТаблицаНеутвержденныхСвязей.Добавить();
	
	НоваяСтрока.УникальныйИдентификаторИсточника = СтрокаПриемника.УникальныйИдентификаторПриемника;
	НоваяСтрока.ТипИсточника                     = СтрокаПриемника.ТипПриемника;
	НоваяСтрока.УникальныйИдентификаторПриемника = СтрокаИсточника.УникальныйИдентификаторИсточника;
	НоваяСтрока.ТипПриемника                     = СтрокаИсточника.ТипИсточника;
	
	// добавляем строку в таблицу сопоставления как неутвержденную
	НоваяСтрокаНеутвержденные = ТаблицаСопоставления.Добавить();
	
	// поля сортировки берем из строки приемника
	ЗаполнитьЗначенияСвойств(НоваяСтрокаНеутвержденные, СтрокаИсточника, "ИсточникИндексКартинки, ИсточникПоле1, ИсточникПоле2, ИсточникПоле3, ИсточникПоле4, ИсточникПоле5, УникальныйИдентификаторИсточника, ТипИсточника");
	ЗаполнитьЗначенияСвойств(НоваяСтрокаНеутвержденные, СтрокаПриемника, "ПриемникИндексКартинки, ПриемникПоле1, ПриемникПоле2, ПриемникПоле3, ПриемникПоле4, ПриемникПоле5, УникальныйИдентификаторПриемника, ТипПриемника, ПолеСортировки1, ПолеСортировки2, ПолеСортировки3, ПолеСортировки4, ПолеСортировки5, ИндексКартинки");
	
	НоваяСтрокаНеутвержденные.СтатусСопоставления               = 3; // неутверженная связь
	НоваяСтрокаНеутвержденные.СтатусСопоставленияДополнительный = 0;
	
	// удаляем сопоставленные строки
	ТаблицаСопоставления.Удалить(СтрокаНачала);
	ТаблицаСопоставления.Удалить(СтрокаОкончания);
	
	// устанавливаем отбор и обновляем данные в таблице сопоставления
	УстановитьОтборТабличныхЧастей();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСортировкуТаблицы()
	
	ПоляСортировки = ПолучитьПоляСортировки();
	
	Если Не ПустаяСтрока(ПоляСортировки) Тогда
		
		// вызов сервера
		ТаблицаСопоставления.Сортировать(ПоляСортировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПоляСортировки()
	
	// возвращаемое значение функции
	ПоляСортировки = "";
	
	ШаблонПоля = "ПолеСортировкиNN #НаправлениеСортировки";
	
	Для Каждого СтрокаТаблицы ИЗ Объект.ТаблицаСортировки Цикл
		
		Если СтрокаТаблицы.Использование Тогда
			
			Разделитель = ?(ПустаяСтрока(ПоляСортировки), "", ", ");
			
			НаправлениеСортировкиСтр = ?(СтрокаТаблицы.НаправлениеСортировки, "Возр", "Убыв");
			
			ЭлементСписка = Объект.СписокИспользуемыхПолей.НайтиПоЗначению(СтрокаТаблицы.ИмяПоля);
			
			ИндексПоля = Объект.СписокИспользуемыхПолей.Индекс(ЭлементСписка) + 1;
			
			ИмяПоля = СтрЗаменить(ШаблонПоля, "NN", Строка(ИндексПоля));
			ИмяПоля = СтрЗаменить(ИмяПоля, "#НаправлениеСортировки", НаправлениеСортировкиСтр);
			
			ПоляСортировки = ПоляСортировки + Разделитель + ИмяПоля;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоляСортировки;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СВОЙСТВА

&НаКлиенте
Функция МаксимальноеКоличествоПользовательскихПолей()
	
	Возврат ОбменДаннымиКлиент.МаксимальноеКоличествоПолейСопоставленияОбъектов();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ

мВыдаватьПредупреждениеПриЗакрытииФормы = Истина;
