////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ
Перем ЕстьСчетаНТТ;


// Обработчик события "Нажатие" кнопки "История...".
//
Процедура КнопкаИсторияНажатие(Элемент)

	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.ОтветственныеЛица.ПолучитьФормуСписка();
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Значение = Ссылка;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.ВидСравнения = ВидСравнения.Равно;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Использование = Истина;
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;

		ФормаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаИсторияСчетовНажатие(Элемент)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.СчетаУчетаВНТТ.ПолучитьФормуСписка();
		ФормаРегистра.РегистрСведенийСписок.Отбор.ТорговаяТочка.Значение = Ссылка;
		ФормаРегистра.РегистрСведенийСписок.Отбор.ТорговаяТочка.ВидСравнения = ВидСравнения.Равно;
		ФормаРегистра.РегистрСведенийСписок.Отбор.ТорговаяТочка.Использование = Истина;
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;

		ФормаРегистра.Открыть();
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ВидСклада) Тогда
			ВидСклада = Перечисления.ВидыСкладов.Оптовый;
		КонецЕсли;
	КонецЕсли;
	
	ПрочитатьОтветственноеЛицо();
	ПрочитатьСчета();
	УстановитьВидимость();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	ЗаписатьОтветственноеЛицо(Отказ);
	ЗаписатьСчета(Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура читает данные о текущем ответственном лице.
//
Процедура ПрочитатьОтветственноеЛицо()

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);
	
	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.ОтветственноеЛицо.Значение = Неопределено;
	Иначе
		ЭлементыФормы.ОтветственноеЛицо.Значение = СрезПоследних[0].ФизическоеЛицо;
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// Процедура читает данные о текущем ответственном лице.
//
Процедура ПрочитатьСчета()

	Если НЕ ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		СпособУказанияСчетов = 0;
		ЭлементыФормы.СчетДоходовОтРеализации.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ЭлементыФормы.СчетРасходовОтРеализации.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ЕстьСчетаНТТ = Ложь;
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура("ТорговаяТочка");
	Отбор.ТорговаяТочка = Ссылка;
	СрезПоследних = РегистрыСведений.СчетаУчетаВНТТ.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.СчетДоходовОтРеализации.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ЭлементыФормы.СчетРасходовОтРеализации.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ЕстьСчетаНТТ = Ложь;
	Иначе
		ЭлементыФормы.СчетДоходовОтРеализации.Значение = СрезПоследних[0].СчетДоходовОтРеализации;
		ЭлементыФормы.СчетРасходовОтРеализации.Значение = СрезПоследних[0].СчетРасходовОтРеализации;
		ЕстьСчетаНТТ = Истина;
	КонецЕсли;
	
	ОпределятьПоУП = (ЭлементыФормы.СчетДоходовОтРеализации.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка()) 
					И (ЭлементыФормы.СчетРасходовОтРеализации.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка());
		
КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// Процедура записывает данные об Ответственном лице.
//
// Параметры:
//  Отказ - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьОтветственноеЛицо(Отказ)

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	СрезПоследних = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОтветственноеЛицо.Значение) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.ОтветственноеЛицо.Значение = СрезПоследних[0].ФизическоеЛицо Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;


	МенеджерЗаписи = РегистрыСведений.ОтветственныеЛица.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Период             = ПериодЗаписи;
	МенеджерЗаписи.СтруктурнаяЕдиница = Ссылка;
	МенеджерЗаписи.ФизическоеЛицо     = ЭлементыФормы.ОтветственноеЛицо.Значение;

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить("Не удалось записать данные об ответственном лице : " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьОтветственноеЛицо()

// Процедура записывает данные об Ответственном лице.
//
// Параметры:
//  Отказ - в параметр записывается Истина при неудачной записи.
//
Процедура ЗаписатьСчета(Отказ)

	Если НЕ ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		Возврат;
	КонецЕсли;
	
	СчетДоходовОтРеализации = ЭлементыФормы.СчетДоходовОтРеализации.Значение;
	СчетРасходовОтРеализации = ЭлементыФормы.СчетРасходовОтРеализации.Значение;
	
	Если (ОпределятьПоУП) И (НЕ ЕстьСчетаНТТ)Тогда
		Возврат;
	КонецЕсли;
	
	Если (ОпределятьПоУП) Тогда
		СчетДоходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетРасходовОтРеализации = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	ИначеЕсли (ЗначениеЗаполнено(СчетДоходовОтРеализации)) И (ЗначениеЗаполнено(СчетРасходовОтРеализации)) Тогда
		//Счета надо записывать
	Иначе
		Сообщить("Не заполнен один из счетов учета. При явном указании счетов все счета должны быть заполнены.", СтатусСообщения.Важное);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	Отбор = Новый Структура("ТорговаяТочка");
	Отбор.ТорговаяТочка = Ссылка;
	СрезПоследних = РегистрыСведений.СчетаУчетаВНТТ.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если НЕ ЗначениеЗаполнено(СчетДоходовОтРеализации) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = '19800101';
		КонецЕсли;
	Иначе
		Если (СчетДоходовОтРеализации = СрезПоследних[0].СчетДоходовОтРеализации)
			И (СчетРасходовОтРеализации = СрезПоследних[0].СчетРасходовОтРеализации) Тогда
			Возврат;
		Иначе
			ПериодЗаписи = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;


	МенеджерЗаписи = РегистрыСведений.СчетаУчетаВНТТ.СоздатьМенеджерЗаписи();

	МенеджерЗаписи.Период             			= ПериодЗаписи;
	МенеджерЗаписи.ТорговаяТочка 				= Ссылка;
	МенеджерЗаписи.СчетДоходовОтРеализации    	= СчетДоходовОтРеализации;
	МенеджерЗаписи.СчетРасходовОтРеализации   	= СчетРасходовОтРеализации;

	Попытка
		МенеджерЗаписи.Записать();
	Исключение
		Сообщить("Не удалось записать данные об ответственном лице : " + ОписаниеОшибки(), СтатусСообщения.Важное);
		Отказ = Истина;
	КонецПопытки;

КонецПроцедуры // ЗаписатьОтветственноеЛицо()

Процедура УстановитьВидимость()
	ТекВысота = ЭтаФорма.Высота;
	
	Если ВидСклада = Перечисления.ВидыСкладов.НеавтоматизированнаяТорговаяТочка Тогда
		
		ЭлементыФормы.ПанельСчета.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ТекВысота < 383 Тогда
			ЭтаФорма.Высота = 383;
		КонецЕсли;
		
		Если ОпределятьПоУП Тогда
			ЭлементыФормы.ПанельСчетаЗначение.ТекущаяСтраница = ЭлементыФормы.ПанельСчетаЗначение.Страницы.Авто;
		Иначе
			ЭлементыФормы.ПанельСчетаЗначение.ТекущаяСтраница = ЭлементыФормы.ПанельСчетаЗначение.Страницы.УказаниеСчетов;
		КонецЕсли;
	
	Иначе
		
		ЭлементыФормы.ПанельСчета.Свертка = РежимСверткиЭлементаУправления.Верх;
		
		Если ТекВысота > 229 Тогда
			ЭтаФорма.Высота = 229;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВидСкладаПриИзменении(Элемент)
	ПрочитатьСчета();
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" с фильтром по балансовым 
// счетам
//
Процедура СчетаНачалоВыбораБалансовые(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

Процедура СчетБухгалтерскогоУчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СпособУказанияСчетовПриИзменении(Элемент)
	Если ОпределятьПоУП Тогда
		//ЭлементыФормы.СчетДоходовОтРеализацииБУ.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		//ЭлементыФормы.СчетРасходовОтРеализацииБУ.Значение = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
		ЭлементыФормы.ПанельСчетаЗначение.ТекущаяСтраница = ЭлементыФормы.ПанельСчетаЗначение.Страницы.Авто;
	Иначе
		ЭлементыФормы.ПанельСчетаЗначение.ТекущаяСтраница = ЭлементыФормы.ПанельСчетаЗначение.Страницы.УказаниеСчетов;
	КонецЕсли;			
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры
                 


