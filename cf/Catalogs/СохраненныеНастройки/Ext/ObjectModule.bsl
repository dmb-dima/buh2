////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУДЛЯ

Перем СтруктураРеквизитов Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ОБЪЕКТА

Процедура ПередЗаписью(Отказ)
	
	#Если Клиент Тогда
	Сообщение = "";
	
	//ПроверитьОбязательныеРеквизиты(ЭтотОбъект, Отказ, Сообщение);
	
	Если Отказ Тогда
		Сообщить("Настройка """ + Наименование + """ не может быть записана:" + Сообщение, СтатусСообщения.Важное);
	КонецЕсли;
	
	// Если все же вариант отчета удаляем, нужно удалить все настройки пользователей панели пользователя
	Если ПометкаУдаления И Не Ссылка.ПометкаУдаления Тогда
		Выборка = ПолучитьВыборкуПодчиненныхСохраненныхНастроек();
		Пока Выборка.Следующий() Цикл
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.УстановитьПометкуУдаления(Истина);
			Объект.Записать();
		КонецЦикла;
	КонецЕсли;
		
	#КонецЕсли

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОБЪЕКТА

// Функция определяет набор реквизитов, которые должны быть заполнены обязательно.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Структура, в качестве ключей элементов содержит имена реквизитов.
//
Функция ОбязательныеРеквизиты() Экспорт

	СписокИмен = "Наименование, ";
	
	Если НЕ ЭтоГруппа Тогда
		СписокИмен = СписокИмен + "НастраиваемыйОбъект, "
	КонецЕсли;

	Возврат Новый Структура(СписокИмен);

КонецФункции

#Если Клиент Тогда
// Проверяет обязательные реквизиты объекта.
// У объекта должен быть определен экспортируемый метод ОбязательныеРеквизиты().
// У объекта должна быть определена экспортируемая переменная СтруктураРеквизитов.
//
// Параметры:
//  Объект    - объект, реквизиты которого проверяются.
//  Отказ     - Истина, если проверка выявила проблемы. В противном случае не меняется.
//              В параметр удобно передавать параметр Отказ обработчика ПередЗаписью.
//  Сообщение - строка, в которую будут дописаны "замечания", выявленные при проверке.
//              Сформированная таким образом строка может использоваться в вызывающей
//              процедуре в качестве сообщения или предупреждения.
//
Процедура ПроверитьОбязательныеРеквизиты(Объект, Отказ, Сообщение = "", ВлияющиеРеквизиты = "") Экспорт

	Для каждого ЭлементСтруктуры Из Объект.ОбязательныеРеквизиты() Цикл
		ИмяРеквизита = ЭлементСтруктуры.Ключ;
			Если СохранениеНастроек.ПустоеЗначениеЗначения(Объект[ИмяРеквизита]) Тогда
				СохранениеНастроек.ОтказПриИзмененииРеквизитов(Объект, ИмяРеквизита + ", " + ВлияющиеРеквизиты, Отказ);
				Сообщение = Сообщение + Символы.ПС + "- Не указано значение реквизита """ + Объект.СтруктураРеквизитов[ИмяРеквизита] + """.";
			КонецЕсли;
	КонецЦикла;

КонецПроцедуры
#КонецЕсли

Процедура ПередУдалением(Отказ)
	
	#Если Клиент Тогда	
		
	Если ЭтотОбъект.ТипНастройки <> Перечисления.ТипыНастроек.НастройкиОтчета Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим возможность удаления варианта пользователем
	СписокДоступныхВариантов = ТиповыеОтчеты.ПолучитьСписокДоступныхВариантов(ЭтотОбъект.НастраиваемыйОбъект,, Истина, ЭтотОбъект);
	ДоступныйВариант = СписокДоступныхВариантов.НайтиПоЗначению(ЭтотОбъект.Ссылка);
	Если  НЕ РольДоступна("ПолныеПрава") и (ДоступныйВариант = Неопределено ИЛИ Не ДоступныйВариант.Пометка) Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьОбОшибке("Текущему пользователю запрещено удалять вариант отчета: " + ЭтотОбъект);
	КонецЕсли;
	
	// Если все же вариант отчета удаляем, нужно удалить все настройки пользователей панели пользователя
	Выборка = ПолучитьВыборкуПодчиненныхСохраненныхНастроек();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Удалить();
	КонецЦикла;
	#КонецЕсли

КонецПроцедуры

Функция ПолучитьВыборкуПодчиненныхСохраненныхНастроек()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроек.НастройкиПользователяНастройкиОтчета)
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";
	
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", ЭтотОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;
	
КонецФункции

Процедура ПриКопировании(ОбъектКопирования)
	
	ЭтотОбъект.Пользователи.Очистить();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// РАЗДЕЛ ОСНОВНОЙ ПРОГРАММЫ


СтруктураРеквизитов = Новый Структура();

СтруктураРеквизитов.Вставить("ПометкаУдаления", "Пометка удаления");
СтруктураРеквизитов.Вставить("Владелец",        "Пользователь-владелец");
СтруктураРеквизитов.Вставить("Родитель",        "Группа настроек");
СтруктураРеквизитов.Вставить("Наименование",    "Наименование настройки");

Для каждого Реквизит Из Метаданные.Справочники.СохраненныеНастройки.Реквизиты Цикл
	СтруктураРеквизитов.Вставить(Реквизит.Имя, Реквизит.Представление());
КонецЦикла;
