Перем мЖирныйШрифт;

//Перем ТаблицаЗапроса;
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура СформироватьТаблицуЦен(Элемент = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Период", ДатаЦены);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТипыЦенНоменклатуры.Ссылка КАК ТипЦен,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЛОЖЬ КАК Записать,
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Валюта ЕСТЬ NULL ТОГДА 
	|			ТипыЦенНоменклатуры.ВалютаЦены 
	|		  ИНАЧЕ 
	|			ЦеныНоменклатурыСрезПоследних.Валюта 
	|		  КОНЕЦ КАК Валюта,
	|	ВЫБОР КОГДА ЦеныНоменклатурыСрезПоследних.Регистратор ЕСТЬ NULL ТОГДА 
	|			МАКСИМУМ(ЦеныНоменклатурыСрезПоследних1.Регистратор) 
	|		  ИНАЧЕ 
	|			ЦеныНоменклатурыСрезПоследних.Регистратор 
	|		  КОНЕЦ КАК Документ
	|ИЗ
	|	Справочник.ТипыЦенНоменклатуры КАК ТипыЦенНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, Номенклатура = &Ссылка) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО ЦеныНоменклатурыСрезПоследних.ТипЦен = ТипыЦенНоменклатуры.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&Период, ) КАК ЦеныНоменклатурыСрезПоследних1
	|		ПО ЦеныНоменклатурыСрезПоследних1.ТипЦен = ТипыЦенНоменклатуры.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТипыЦенНоменклатуры.Ссылка,
	|	ЦеныНоменклатурыСрезПоследних.Цена,
	|	ЦеныНоменклатурыСрезПоследних.Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Регистратор";
	
	ЦеныНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ЦеныНоменклатуры Цикл
		Если ЗначениеЗаполнено(Строка.Документ) Тогда
			Если НачалоДня(Строка.Документ.Дата) <> НачалоДня(ДатаЦены) Тогда
				Строка.Документ = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицуСчетовУчета(Элемент = Неопределено)
	
	Номенклатура = Ссылка;
	
	МассивНоменклатура	 = Новый Массив();
	МассивНоменклатура.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	МассивНоменклатура.Добавить(Номенклатура);
	
	СписокГрупп = ОбщегоНазначения.ПолучитьСписокВышестоящихГрупп(Номенклатура);
	Для каждого Элемент Из СписокГрупп Цикл
		МассивНоменклатура.Добавить(Элемент);
	КонецЦикла;
	
	ТестЗапрос = Новый Запрос();
	
	ТестЗапрос.УстановитьПараметр("Номенклатура",       МассивНоменклатура);
	
	ТестЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СчетаУчетаНоменклатуры.Номенклатура.ЭтоГруппа КАК ЭтоГруппа,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Номенклатура В(&Номенклатура)";
	
	ТаблицаЗапроса = ТестЗапрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Колонки.Добавить("Глубина");
	ТаблицаЗапроса.Колонки.Добавить("Описание");
	ТаблицаЗапроса.Колонки.Добавить("Приоритет");
	ТаблицаЗапроса.Колонки.Добавить("АктивностьПравила");
	ТаблицаЗапроса.Колонки.Добавить("Общее");
		
	Для Каждого Строка Из ТаблицаЗапроса Цикл
		Описание = "";
		Если Строка.Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
			Строка.Глубина = 0;
			Описание = "Для всех номенклатурных единиц (при отсутствии других правил)";
		ИначеЕсли Строка.Номенклатура = Ссылка Тогда
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
			Описание = "Для номенклатурной единицы " + Строка(Строка.Номенклатура);
		Иначе
			Строка.Глубина = СтрДлина(Строка.Номенклатура.ПолныйКод());
			Описание = "Для всех номенклатурных единиц, входящих в группу " + Строка(Строка.Номенклатура);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Организация) Тогда
			Описание = Описание + "; по организации " + Строка(Строка.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(Строка.Склад) Тогда
			Описание = Описание + "; на складе " + Строка(Строка.Склад);
		ИначеЕсли ЗначениеЗаполнено(Строка.ТипСклада) Тогда
			Описание = Описание + "; на складах типа " + Строка(Строка.ТипСклада);
		КонецЕсли;
				
		Строка.Общее = ?(Строка.Номенклатура = Ссылка, 1, 0);
		Строка.Описание = Описание;
	КонецЦикла;
	
	
	ТаблицаЗапроса.Сортировать("Глубина Убыв, Склад Убыв, ТипСклада Убыв, Организация Убыв");
	
	Если ТаблицаЗапроса.Количество() > 0 Тогда
		
		АктивностьОпт = Истина;
		АктивностьРозница = Истина;

		
		ТекПриоритет = 1;
		ТекКлючПриоритета = (ТаблицаЗапроса[0].Глубина*1000) + (Число(ЗначениеЗаполнено(ТаблицаЗапроса[0].Организация))*100) 
							+ (Число(ЗначениеЗаполнено(ТаблицаЗапроса[0].Склад))*10) + (Число(ЗначениеЗаполнено(ТаблицаЗапроса[0].ТипСклада)));
			
		Для Каждого Строка Из ТаблицаЗапроса Цикл
			КлючПриоритета = (Строка.Глубина*1000) + (Число(ЗначениеЗаполнено(Строка.Организация))*100) 
							+ (Число(ЗначениеЗаполнено(Строка.Склад))*10) + (Число(ЗначениеЗаполнено(Строка.ТипСклада)));
							
			Если КлючПриоритета <> ТекКлючПриоритета Тогда
				ТекКлючПриоритета = КлючПриоритета;
				ТекПриоритет = ТекПриоритет + 1;
			КонецЕсли;
			Строка.Приоритет = ТекПриоритет;
			
			Если НЕ ЗначениеЗаполнено(Строка.ТипСклада) Тогда
				Строка.АктивностьПравила = (АктивностьОпт ИЛИ АктивностьРозница);			
			ИначеЕсли Строка.ТипСклада = Перечисления.ТипыСкладов.Оптовый Тогда
				Строка.АктивностьПравила = (АктивностьОпт);
			Иначе
				Строка.АктивностьПравила = (АктивностьРозница);
			КонецЕсли;
			
			Если (НЕ ЗначениеЗаполнено(Строка.Организация)) И (НЕ ЗначениеЗаполнено(Строка.Склад)) Тогда
				Если НЕ ЗначениеЗаполнено(Строка.ТипСклада) Тогда
					АктивностьОпт = Ложь;
					АктивностьРозница = Ложь;
				ИначеЕсли Строка.ТипСклада = Перечисления.ТипыСкладов.Оптовый Тогда
					АктивностьОпт = Ложь;
				Иначе
					АктивностьРозница = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементыФормы.КоманднаяПанельСчетаУчета.Кнопки.СкрытьНеИспользуемые.Пометка Тогда
			НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(Новый Структура("АктивностьПравила", Ложь));
			Для Каждого Строка Из НайденныеСтроки Цикл
				ТаблицаЗапроса.Удалить(Строка);
			КонецЦикла;
		КонецЕсли;
				
	КонецЕсли;
						

КонецПроцедуры

// Процедура устанавливает доступность реквизитов формы.
//
Процедура УстановитьДоступность()
	
	НовыйЭлемент = ЭтоНовый();
	
	ЭлементыФормы.НомерГТД.Доступность            = НЕ (Услуга);
	ЭлементыФормы.НадписьНомерГТД.Доступность     = НЕ (Услуга);
	ЭлементыФормы.СтранаПроисхождения.Доступность = НЕ (Услуга);
	ЭлементыФормы.НадписьСтрана.Доступность       = НЕ (Услуга);
	
	ЭлементыФормы.Панель1.Страницы.СчетаУчета.Доступность 	= НЕ НовыйЭлемент;
	ЭлементыФормы.Панель1.Страницы.Цены.Доступность 		= НЕ НовыйЭлемент;
	ЭлементыФормы.Панель1.Страницы.Спецификации.Доступность = НЕ НовыйЭлемент;
	
КонецПроцедуры // УстановитьДоступность()

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;

	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	
	

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии для Формы.
//
Процедура ПриОткрытии()

	ДатаЦены = РабочаяДата;
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	Если ЭтоНовый() Тогда
		Если ПараметрОбъектКопирования = Неопределено Тогда
			БазоваяЕдиницаИзмерения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяЕдиницаПоКлассификатору");
			СтавкаНДС               = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		УстановитьСтатьюЗатрат();
		ОсновнаяСпецификацияНоменклатуры = "";
	Иначе
		
		СформироватьТаблицуСчетовУчета();
		СформироватьТаблицуЦен();
		
	КонецЕсли;
	
	ЭлементыФормы.БазоваяЕдиницаИзмерения.АвтоОтметкаНезаполненного = НЕ Услуга;
	ЭлементыФормы.БазоваяЕдиницаИзмерения.АвтоВыборНезаполненного   = НЕ Услуга;
	ЭлементыФормы.БазоваяЕдиницаИзмерения.ОтметкаНезаполненного     = НЕ Услуга И НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения);
	
	ЭлементыФормы.КоманднаяПанельСчетаУчета.Кнопки.СкрытьНеИспользуемые.Пометка = Истина;
    ЭлементыФормы.ИнформационнаяНадписьБазовойЕдиницыИзмерения.Заголовок = БазоваяЕдиницаИзмерения.НаименованиеПолное;
	
	УстановитьДоступность();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	СтрокиДляЗаписи = ЦеныНоменклатуры.НайтиСтроки(Новый Структура("Записать", Истина));
	ТекстСообщения = "";
	НачалоПредупреждения = "Не указано значение цены для записи (тип цен ";
	Для Каждого Строка Из СтрокиДляЗаписи Цикл
		Если Не ЗначениеЗаполнено(Строка.Цена) Тогда
			ТекстСообщения = ТекстСообщения + НачалоПредупреждения + Строка.ТипЦен + ")
			|";
		КонецЕсли;
	КонецЦикла;
	Если ЗначениеЗаполнено(ТекстСообщения) Тогда
		Предупреждение(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	КоманднаяПанельЦеныНоменклатурыЗаписатьЦены();

КонецПроцедуры // ПриЗаписи()

Процедура ПослеЗаписи()
	
	СформироватьТаблицуЦен();
	УстановитьДоступность();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РАБОТЫ С ЕДИНИЦАМИ ИЗМЕРЕНИЯ

// Обработчик события ПриИзменении для наименования.
//
Процедура НаименованиеПриИзменении(Элемент)

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура УслугаПриИзменении(Элемент)

	ЭлементыФормы.БазоваяЕдиницаИзмерения.АвтоОтметкаНезаполненного = НЕ Услуга;
	ЭлементыФормы.БазоваяЕдиницаИзмерения.АвтоВыборНезаполненного   = НЕ Услуга;
	ЭлементыФормы.БазоваяЕдиницаИзмерения.ОтметкаНезаполненного     = НЕ Услуга И НЕ ЗначениеЗаполнено(БазоваяЕдиницаИзмерения);

	УстановитьДоступность();

КонецПроцедуры

Процедура БазоваяЕдиницаИзмеренияПриИзменении(Элемент)
	
	ЭлементыФормы.ИнформационнаяНадписьБазовойЕдиницыИзмерения.Заголовок = БазоваяЕдиницаИзмерения.НаименованиеПолное;
	
КонецПроцедуры

Процедура УстановитьСтатьюЗатрат()
	
    ТекущаяСтатьяЗатрат = СтатьяЗатрат;	
	ТекущаяСтатьяЗатрат = ?(ЗначениеЗаполнено(ТекущаяСтатьяЗатрат), ТекущаяСтатьяЗатрат, ПолучитьСтатьюЗатратПоВидуНУ(Перечисления.ВидыРасходовНУ.МатериальныеРасходы));
	СтатьяЗатрат = ТекущаяСтатьяЗатрат;

КонецПроцедуры

Функция ПолучитьСтатьюЗатратПоВидуНУ(ВидНУ) 
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВидНУ", ВидНУ);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатьиЗатрат.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	СтатьиЗатрат.ВидРасходовНУ = &ВидНУ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиЗатрат.Код
	|";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		СтатьяЗатрат = РезультатЗапроса.Ссылка;
	Иначе
		СтатьяЗатрат = Неопределено;
	КонецЕсли;
	
	Возврат СтатьяЗатрат;
	
КонецФункции

Процедура СчетаУчетаНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Склад) Тогда
		ОформлениеСтроки.Ячейки.Склад.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Склад.Текст           = "< Для всех >";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ТипСклада) Тогда
		ОформлениеСтроки.Ячейки.ТипСклада.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ТипСклада.Текст           = "< Для всех >";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Организация) Тогда
		ОформлениеСтроки.Ячейки.Организация.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Организация.Текст           = "< Для всех >";
	КонецЕсли;
	
	ОформлениеСтроки.ЦветТекста = ?(ДанныеСтроки.АктивностьПравила, Новый Цвет(0,0,0), Новый Цвет(120,120,120));
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыПередНачаломИзменения(Элемент, Отказ)
	СтрокаТабличнойЧасти = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	Отказ = Истина;
	
	Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
	Запись.Организация = СтрокаТабличнойЧасти.Организация;
	Запись.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
	Запись.Склад = СтрокаТабличнойЧасти.Склад;
	Запись.ТипСклада = СтрокаТабличнойЧасти.ТипСклада;
	Запись.Прочитать();
	ФормаЗаписи = Запись.ПолучитьФорму(,ЭтаФорма);
	
	Если СтрокаТабличнойЧасти.Общее = 0 Тогда
		ФормаЗаписи.ЗапретРедактирования = Истина;
	Иначе
		ФормаЗаписи.ЗапретРедактированияНоменклатуры = Истина;
	КонецЕсли;
	
	ФормаЗаписи.ОткрытьМодально();
	СформироватьТаблицуСчетовУчета();
	
	Фильтр = Новый Структура("Организация, Номенклатура, Склад, ТипСклада", Запись.Организация, Запись.Номенклатура, Запись.Склад, Запись.ТипСклада);
	НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыПередУдалением(Элемент, Отказ)
	СтрокаТабличнойЧасти = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Общее = 0 Тогда
		Отказ = Истина;
	Иначе
		Отказ = Истина;
		Запись = РегистрыСведений.СчетаУчетаНоменклатуры.СоздатьМенеджерЗаписи();
		Запись.Организация = СтрокаТабличнойЧасти.Организация;
		Запись.Номенклатура = СтрокаТабличнойЧасти.Номенклатура;
		Запись.Склад = СтрокаТабличнойЧасти.Склад;
		Запись.ТипСклада = СтрокаТабличнойЧасти.ТипСклада;
		Запись.Удалить();
		СформироватьТаблицуСчетовУчета();
	КонецЕсли;
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ФормаЗаписи = РегистрыСведений.СчетаУчетаНоменклатуры.ПолучитьФормуРедактированияЗаписи("ФормаЗаписи",ЭтаФорма);
	ФормаЗаписи.Номенклатура = Ссылка;
	ФормаЗаписи.Модифицированность = Истина;
	ФормаЗаписи.ЗапретРедактированияНоменклатуры = Истина;
	
	Если Копирование Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
		ФормаЗаписи.Организация = СтрокаТабличнойЧасти.Организация;
		ФормаЗаписи.Склад = СтрокаТабличнойЧасти.Склад;
		ФормаЗаписи.ТипСклада = СтрокаТабличнойЧасти.ТипСклада;
		
		ФормаЗаписи.СчетУчета = СтрокаТабличнойЧасти.СчетУчета;
		ФормаЗаписи.СчетУчетаПередачи = СтрокаТабличнойЧасти.СчетУчетаПередачи;
		ФормаЗаписи.СчетДоходовОтРеализации = СтрокаТабличнойЧасти.СчетДоходовОтРеализации;
		ФормаЗаписи.СчетРасходовОтРеализации = СтрокаТабличнойЧасти.СчетРасходовОтРеализации;
		ФормаЗаписи.СчетУчетаНДСПоПриобретеннымЦенностям = СтрокаТабличнойЧасти.СчетУчетаНДСПоПриобретеннымЦенностям;
		ФормаЗаписи.СчетУчетаНДСПоРеализации = СтрокаТабличнойЧасти.СчетУчетаНДСПоРеализации;
		ФормаЗаписи.СчетУчетаНДСУплаченногоНаТаможне = СтрокаТабличнойЧасти.СчетУчетаНДСУплаченногоНаТаможне;
		ФормаЗаписи.Субконто1 = СтрокаТабличнойЧасти.Субконто1;
		ФормаЗаписи.Субконто2 = СтрокаТабличнойЧасти.Субконто2;
		ФормаЗаписи.Субконто3 = СтрокаТабличнойЧасти.Субконто3;
	КонецЕсли;
	//	
	ФормаЗаписи.ОткрытьМодально();
	СформироватьТаблицуСчетовУчета();

	Фильтр = Новый Структура("Организация, Номенклатура, Склад, ТипСклада", ФормаЗаписи.Организация, ФормаЗаписи.Номенклатура, ФормаЗаписи.Склад, ФормаЗаписи.ТипСклада);
	НайденныеСтроки = ТаблицаЗапроса.НайтиСтроки(Фильтр);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
			 
КонецПроцедуры

Процедура КоманднаяПанельСчетаУчетаСправкаРегистра(Кнопка)
	ОткрытьСправку(Метаданные.РегистрыСведений.СчетаУчетаНоменклатуры);
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ЗаписатьЦены" в командной панели ТЧ ЦеныНоменклатуры.
//
Процедура КоманднаяПанельЦеныНоменклатурыЗаписатьЦены(Кнопка = Неопределено)
	
	СтрокиДляЗаписи = ЦеныНоменклатуры.НайтиСтроки(Новый Структура("Записать", Истина));
	
	Если НЕ Кнопка = Неопределено Тогда
		ТекстСообщения = "";
		НачалоПредупреждения = "Не указано значение цены для записи (тип цен ";
		Для Каждого Строка Из СтрокиДляЗаписи Цикл
			Если Не ЗначениеЗаполнено(Строка.Цена) Тогда
				ТекстСообщения = ТекстСообщения + НачалоПредупреждения + Строка.ТипЦен + ")
				|";
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ТекстСообщения) Тогда
			Предупреждение(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиДляЗаписи Цикл
		Если Не ЗначениеЗаполнено(Строка.Документ) Тогда
			НовыйДокумент = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
			НовыйДокумент.Дата = НачалоДня(ДатаЦены);
			НовыйДокумент.ТипЦен = Строка.ТипЦен;
			СтрокаДокумента = НовыйДокумент.Товары.Добавить();
			СтрокаДокумента.Номенклатура = Ссылка;
			СтрокаДокумента.Цена = Строка.Цена;
			СтрокаДокумента.Валюта = Строка.Валюта;
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось создать документ для установки цен типа """+ Строка.ТипЦен +"""", СтатусСообщения.Внимание);
			КонецПопытки			
		Иначе
			ДокументОбъект = Строка.Документ.ПолучитьОбъект();
			Если ДокументОбъект.Товары.Найти(Ссылка) = НЕОПРЕДЕЛЕНО Тогда
				СтрокаДокумента = ДокументОбъект.Товары.Добавить();
			Иначе
				СтрокаДокумента = ДокументОбъект.Товары.Найти(Ссылка);
			КонецЕсли;
			СтрокаДокумента.Номенклатура = Ссылка;
			СтрокаДокумента.Цена = Строка.Цена;
			СтрокаДокумента.Валюта = Строка.Валюта;
			Попытка
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				Сообщить("Не удалось изменить документ "+ Строка.Документ, СтатусСообщения.Внимание);
			КонецПопытки
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельЦеныНоменклатурыЗаписатьЦены()

// Обработчик события "ПриОкончанииРедактирования" строки ТЧ ЦеныНоменклатуры.
//
Процедура ЦеныНоменклатурыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ТекущаяСтрока = ЭлементыФормы.ЦеныНоменклатуры.ТекущиеДанные;

	// После редактировании строки автоматически установим в этой строке флажок "Записать".
	Если Не ОтменаРедактирования Тогда
		Если ЭлементыФормы.ЦеныНоменклатуры.ТекущаяКолонка.Имя <> "Записать" Тогда
			ТекущаяСтрока.Записать = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЦеныНоменклатурыПриОкончанииРедактирования()

Процедура ЦеныНоменклатурыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Цена.ОтметкаНезаполненного = (НЕ ЗначениеЗаполнено(ДанныеСтроки.Цена) И ДанныеСтроки.Записать);
		
КонецПроцедуры

Процедура КоманднаяПанельСчетаУчетаСкрытьНеИспользуемые(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	СформироватьТаблицуСчетовУчета();
		
КонецПроцедуры

Процедура ДатаЦеныПриИзменении(Элемент)
	
	СформироватьТаблицуЦен();

КонецПроцедуры

Процедура КоманднаяПанельСпецификацийСделатьОсновной(Кнопка)
	
	Если ЭлементыФормы.Спецификации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.Спецификации.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;

	Если ОсновнаяСпецификацияНоменклатуры = ЭлементыФормы.Спецификации.ТекущиеДанные.Ссылка Тогда
		ОсновнаяСпецификацияНоменклатуры = Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
	Иначе
		ОсновнаяСпецификацияНоменклатуры = ЭлементыФормы.Спецификации.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	ПроверитьПометкуКнопкиУстановкиОсновнойСпецификации();
	
КонецПроцедуры

Процедура ПроверитьПометкуКнопкиУстановкиОсновнойСпецификации()

	Если ЭлементыФормы.Спецификации.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельСпецификаций.Кнопки.СделатьОсновной.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельСпецификаций.Кнопки.СделатьОсновной.Пометка     = Ложь;
	Иначе
		Если ЭлементыФормы.Спецификации.ТекущиеДанные.ЭтоГруппа Тогда
			ЭлементыФормы.КоманднаяПанельСпецификаций.Кнопки.СделатьОсновной.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельСпецификаций.Кнопки.СделатьОсновной.Пометка     = Ложь;
		Иначе
			ЭлементыФормы.КоманднаяПанельСпецификаций.Кнопки.СделатьОсновной.Доступность = Истина;
			ЭлементыФормы.КоманднаяПанельСпецификаций.Кнопки.СделатьОсновной.Пометка     = ЭлементыФормы.Спецификации.ТекущиеДанные.Ссылка = ОсновнаяСпецификацияНоменклатуры;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура СпецификацииПриАктивизацииСтроки(Элемент)
	
	ПроверитьПометкуКнопкиУстановкиОсновнойСпецификации();
	
КонецПроцедуры

Процедура СпецификацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(ОсновнаяСпецификацияНоменклатуры) Тогда
		ОсновнаяСпецификацияНоменклатуры = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура СпецификацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И ЭтотОбъект.ОсновнаяСпецификацияНоменклатуры = ДанныеСтроки.Ссылка Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

Процедура МойреквизитПриИзменении(Элемент)
	Сообщить("ПриИзменении");
КонецПроцедуры

мЖирныйШрифт  = Новый Шрифт(,, Истина);
