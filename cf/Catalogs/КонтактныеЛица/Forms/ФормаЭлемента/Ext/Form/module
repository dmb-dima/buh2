Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мСтруктураРедактированияКИ;

Перем текФамилия;
Перем текИмя;
Перем текОтчество;

Перем мКопияНабораКонтактнойИнформации;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обрабатывает событие ПриИзменении реквизита ВидКонтактногоЛица.
// 
Процедура ПриИзмененииВидаКонтактногоЛица()

	Если НЕ ЗначениеЗаполнено(ВидКонтактногоЛица) Тогда
		ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт;
	КонецЕсли;

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда

		Если ТипЗнч(ОбъектВладелец) <> Тип("СправочникСсылка.Контрагенты") Тогда
			ОбъектВладелец = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт Тогда

		Если ОбъектВладелец <> глЗначениеПеременной("глТекущийПользователь") Тогда
			ОбъектВладелец = глЗначениеПеременной("глТекущийПользователь");
		КонецЕсли;

	Иначе

		Если ТипЗнч(ОбъектВладелец) <> Тип("СправочникСсылка.Пользователи") Тогда
			ОбъектВладелец = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура управляет доступностью поля ввода ОбъектВладелец.
// 
Процедура ДоступностьОтветственного()

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда

		ЭлементыФормы.НадписьОтветственный.Заголовок   = "Контрагент:";
		ЭлементыФормы.НадписьОтветственный.Доступность = Истина;
		ЭлементыФормы.ОбъектВладелец.ТолькоПросмотр    = Ложь;

	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ЛичныйКонтакт Тогда

		ЭлементыФормы.НадписьОтветственный.Заголовок   = "Ответственный:";
		ЭлементыФормы.НадписьОтветственный.Доступность = Ложь;
		ЭлементыФормы.ОбъектВладелец.ТолькоПросмотр    = Истина;

	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.ПрочееКонтактноеЛицо Тогда

		ЭлементыФормы.НадписьОтветственный.Заголовок   = "Ответственный:";
		ЭлементыФормы.НадписьОтветственный.Доступность = Истина;
		ЭлементыФормы.ОбъектВладелец.ТолькоПросмотр    = Ложь;

	КонецЕсли;

КонецПроцедуры

// Процедура управляет видимостью панели данных (роль, должность).
// 
Процедура ВидимостьДопонительнойИнформации()

	Если ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента Тогда
		ЭлементыФормы.ПанельДопКонтрагент.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельДопКонтрагент.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли; 

КонецПроцедуры

// Функция определяет номера позиций пробелов в строке реквизита Наименование
//
// Параметры
//  НЕТ
//
// Возвращаемое значение
//  Массив, числа - позиции пробелов в строке
//
Функция ОпределитьПозицииПробелов()

	Пробелы = Новый Массив;

	Для а = 1 По 2 Цикл

		Пробелы.Добавить(0);

	КонецЦикла; 

	КолПробелов = 0;

	Для а = 1 По СтрДлина(Наименование) Цикл

		Если Сред(Наименование, а, 1) = " " Тогда

			Пробелы[КолПробелов] = а;
			КолПробелов = КолПробелов + 1;

		КонецЕсли;

		Если КолПробелов = 2 Тогда

			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат Пробелы;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый()
	   И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли; 
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);

КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	ПриИзмененииВидаКонтактногоЛица();

	текФамилия  = Фамилия;
	текИмя      = Имя;
	текОтчество = Отчество;

	ДоступностьОтветственного();
	ВидимостьДопонительнойИнформации();

	// Установим ЭУ по умолчанию
	Если НЕ ЗначениеЗаполнено(ВидКонтактногоЛица) Тогда
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ВидКонтактногоЛица;

	ИначеЕсли ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента 
			И НЕ ЗначениеЗаполнено(ОбъектВладелец) Тогда

		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ОбъектВладелец;

	Иначе
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Фамилия;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, ЭтаФорма.ТолькоПросмотр);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ, мКопияНабораКонтактнойИнформации);

КонецПроцедуры 

Процедура ПослеЗаписи()
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении элемента Фамилия.
//
Процедура ФамилияПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 Тогда

		ФамилияИзНаименования = Сред(Наименование, 1, (ПозицииПробелов[0] - 1));

		Если ФамилияИзНаименования <> текФамилия И НЕ ПустаяСтрока(ФамилияИзНаименования) Тогда

			текФамилия = СокрЛП(Элемент.Значение);
			Возврат;

		КонецЕсли;

		Наименование = СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[0]);

	Иначе

		Если ПустаяСтрока(Наименование) Тогда

			Наименование = СокрЛП(Элемент.Значение);

		Иначе

			Если СокрЛП(Наименование) = текФамилия Тогда

				Наименование = СокрЛП(Элемент.Значение);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	текФамилия = СокрЛП(Элемент.Значение);

КонецПроцедуры

// Обработчик события ПриИзменении элемента Имя.
//
Процедура ИмяПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[0] > 0 И ПозицииПробелов[1] > 0 Тогда

		ИмяИзНаименования = Сред(Наименование, (ПозицииПробелов[0] + 1), (ПозицииПробелов[1] - ПозицииПробелов[0] - 1));

		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда

			текИмя = СокрЛП(Элемент.Значение);
			Возврат;

		КонецЕсли;

		Наименование = Сред(Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение) + Сред(Наименование, ПозицииПробелов[1]);

	ИначеЕсли ПозицииПробелов[0] > 0 Тогда

		ИмяИзНаименования = Сред(Наименование, (ПозицииПробелов[0] + 1));

		Если ИмяИзНаименования <> текИмя И НЕ ПустаяСтрока(ИмяИзНаименования) Тогда

			текИмя = СокрЛП(Элемент.Значение);
			Возврат;

		КонецЕсли; 

		Наименование = Сред(Наименование, 1, ПозицииПробелов[0]) + СокрЛП(Элемент.Значение);

	Иначе

		Если НЕ ПустаяСтрока(Наименование) Тогда

			Наименование = Наименование + " " + СокрЛП(Элемент.Значение);

		Иначе

			Наименование = " " + СокрЛП(Элемент.Значение);

		КонецЕсли; 

	КонецЕсли;

	текИмя = СокрЛП(Элемент.Значение);

КонецПроцедуры

// Обработчик события ПриИзменении элемента Отчество.
//
Процедура ОтчествоПриИзменении(Элемент)

	ПозицииПробелов = ОпределитьПозицииПробелов();

	Если ПозицииПробелов[1] > 0 Тогда

		ОтчествоИзНаименования = Сред(Наименование, (ПозицииПробелов[1] + 1));

		Если ОтчествоИзНаименования <> текОтчество И НЕ ПустаяСтрока(ОтчествоИзНаименования) Тогда

			текОтчество = СокрЛП(Элемент.Значение);
			Возврат;

		КонецЕсли;

		Наименование = Сред(Наименование, 1, ПозицииПробелов[1]) + СокрЛП(Элемент.Значение);

	Иначе

		Если НЕ ПустаяСтрока(Наименование) Тогда

			Наименование = Наименование + " " + СокрЛП(Элемент.Значение);

		Иначе

			Наименование = "  " + СокрЛП(Элемент.Значение);

		КонецЕсли;

	КонецЕсли;

	текОтчество = СокрЛП(Элемент.Значение);

КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка элемента Наименование.
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;

	Если НЕ ПустаяСтрока(Фамилия) Тогда
		СписокВыбора.Добавить(СокрЛП(Фамилия));
	КонецЕсли;

	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "."));
	КонецЕсли;

	Если НЕ ПустаяСтрока(Фамилия) И НЕ ПустаяСтрока(Имя) И НЕ ПустаяСтрока(Отчество) Тогда
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество)));
		СписокВыбора.Добавить((СокрЛП(Фамилия) + " " + СокрЛП(Сред(Имя,1,1)) + "." + СокрЛП(Сред(Отчество,1,1)) + "."));
	КонецЕсли;

	ЭлементыФормы.Наименование.СписокВыбора = СписокВыбора;

КонецПроцедуры

// Обработчик события ПриИзменении элемента ДатаРождения.
//
Процедура ДатаРожденияПриИзменении(Элемент)

	Если ДатаРождения = '00010101000000' Тогда
		НапоминатьОДнеРождения = Ложь;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзменении элемента ВидКонтактногоЛица.
//
Процедура ВидКонтактногоЛицаПриИзменении(Элемент)

	ПриИзмененииВидаКонтактногоЛица();
	ДоступностьОтветственного();
	ВидимостьДопонительнойИнформации();

КонецПроцедуры

// Обработчик события Очистка элемента ВидКонтактногоЛица.
//
Процедура ВидКонтактногоЛицаОчистка(Элемент, СтандартнаяОбработка)

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриИзменении элемента ОбъектВладелец.
//
Процедура ОбъектВладелецПриИзменении(Элемент)

	ПриИзмененииВидаКонтактногоЛица();

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ СВЯЗАННЫЕ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			Перечисления.ВидыОбъектовКонтактнойИнформации.КонтактныеЛица,
			Новый Действие("НажатиеДопКнопкиКИ"),
			НаборКонтактнойИнформации,
			ЭлементыФормы.ПанельФормы,
			ЭлементыФормы.ПанельФормы.Страницы.КонтактнаяИнформация,
			Неопределено,
			ЭлементыФормы.ПолеВводаПрочаяКИ,
			Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтактногоЛица,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ2, Неопределено, ЭлементыФормы.ПолеКИ2);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ3, Неопределено, ЭлементыФормы.ПолеКИ3);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Дополнительные кнопки в кнопках КИ
Процедура НажатиеДопКнопкиКИ(Кнопка)
	УправлениеКонтактнойИнформацией.НажатиеДопКнопкиКИ(мСтруктураРедактированияКИ, Кнопка, ЭтаФорма);
КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При изменении прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаПрочаяКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

Процедура КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(Кнопка)
	УправлениеКонтактнойИнформацией.КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(мСтруктураРедактированияКИ, ЭтаФорма);
КонецПроцедуры

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;

