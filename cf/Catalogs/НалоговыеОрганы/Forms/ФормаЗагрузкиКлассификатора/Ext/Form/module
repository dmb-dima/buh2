Перем ВВыбранномКаталогеКлассификаторПрисутствует;
Перем ИнформацияОКлассификаторе;
Перем СерыйЦвет;
Перем СинийЦвет;

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	НеОбновлятьКомментарий = (ВосстановитьЗначение("ИмпортСОУН_НеОбновлятьКомментарий") = Истина);
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура КаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбора.Заголовок = "Укажите каталог, содержащий таблицы классификатора";
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Каталог = Каталог;
	Если ДиалогВыбора.Выбрать() Тогда
		Каталог = ДиалогВыбора.Каталог + ?(Прав(ДиалогВыбора.Каталог, 1) <> "\", "\", "");
		ОбработкаВыбораКаталога();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбораКаталога()
	
	ВВыбранномКаталогеКлассификаторПрисутствует = ПолучитьСвойстваСОУНПоКаталогу(Каталог);
	
	УправлениеЭУ();
	
КонецПроцедуры

Функция ПолучитьСвойстваСОУНПоКаталогу(Каталог)
	
	ИнформацияОКлассификаторе = Новый Структура("НомерВерсии, ДатаВерсии");
	Если НЕ ЗначениеЗаполнено(Каталог) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// проверки на наличие файлов классификатора
	ПризнакОшибки = Ложь;
	
	ОбъектФайлНО = Новый Файл(Каталог + "SOUN1.DBF");
	Если НЕ ОбъектФайлНО.Существует() ИЛИ НЕ ОбъектФайлНО.ЭтоФайл() Тогда
		Сообщить("Отсутствует файл основной таблицы классификатора SOUN1.DBF.", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	ОбъектФайлВидыНО = Новый Файл(Каталог + "SOUN_V.DBF");
	Если НЕ ОбъектФайлВидыНО.Существует() ИЛИ НЕ ОбъектФайлВидыНО.ЭтоФайл() Тогда
		Сообщить("Отсутствует файл видов налоговых органов SOUN_V.DBF.", СтатусСообщения.Важное);
		ПризнакОшибки = Истина;
	КонецЕсли;
	
	Если ПризнакОшибки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектФайлВерсии = Новый Файл(Каталог + "SOUN_VER.DBF");
	Если ОбъектФайлВерсии.Существует() И ОбъектФайлВерсии.ЭтоФайл() Тогда
		Попытка
			ТаблицаВерсий = Новый XBase(Каталог + "SOUN_VER.DBF", , Истина);
			ТаблицаВерсий.ОтображатьУдаленные = Ложь;
			Если ТаблицаВерсий.Первая() Тогда
				ИнформацияОКлассификаторе.НомерВерсии = СокрЛП(ТаблицаВерсий.ПолучитьЗначениеПоля(0));
				ИнформацияОКлассификаторе.ДатаВерсии = СокрЛП(ТаблицаВерсий.ПолучитьЗначениеПоля(1));
			КонецЕсли;
			ТаблицаВерсий.ЗакрытьФайл();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УправлениеЭУ()
	
	НомерВерсииКлассификатора = ИнформацияОКлассификаторе.НомерВерсии;
	ДатаВерсииКлассификатора = ИнформацияОКлассификаторе.ДатаВерсии;
	
	Если НЕ ЗначениеЗаполнено(НомерВерсииКлассификатора) Тогда
		ЭлементыФормы.НадписьНомерВерсии.Заголовок = "<не доступен>";
		ЭлементыФормы.НадписьНомерВерсии.ЦветТекста = СерыйЦвет;
	Иначе
		ЭлементыФормы.НадписьНомерВерсии.Заголовок = НомерВерсииКлассификатора;
		ЭлементыФормы.НадписьНомерВерсии.ЦветТекста = СинийЦвет;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДатаВерсииКлассификатора) Тогда
		ЭлементыФормы.НадписьДатаВерсии.Заголовок = "<не доступна>";
		ЭлементыФормы.НадписьДатаВерсии.ЦветТекста = СерыйЦвет;
	Иначе
		ЭлементыФормы.НадписьДатаВерсии.Заголовок = ДатаВерсииКлассификатора;
		ЭлементыФормы.НадписьДатаВерсии.ЦветТекста = СинийЦвет;
	КонецЕсли;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Импортировать.Доступность = ВВыбранномКаталогеКлассификаторПрисутствует;
	
КонецПроцедуры

Функция ВыбранныйКаталогСодержитФайлыКлассификатора()
	
	Если ПустаяСтрока(Каталог) Тогда
		Предупреждение("Не выбран каталог!");
		Возврат Ложь;
	КонецЕсли;
		
	КаталогКлассификатора = Новый Файл(Каталог);
	
	Если НЕ КаталогКлассификатора.Существует() Тогда
		Предупреждение("Выбранный каталог не существует!");
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектФайл = Новый Файл(Каталог + "SOUN1.DBF");
	Если НЕ ОбъектФайл.Существует() Тогда
		Предупреждение("Файл SOUN1.DBF, содержащий основную таблицу классификатора, отсутствует!");
		Возврат Ложь;
	КонецЕсли;
	ОбъектФайл = Новый Файл(Каталог + "SOUN_V.DBF");
	Если НЕ ОбъектФайл.Существует() Тогда
		Предупреждение("Файл SOUN_V.DBF, содержащий список видов налоговых органов, отсутствует!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОсновныеДействияФормыИмпортировать(Кнопка)
	
	ИмпортироватьСОУН();
	
КонецПроцедуры

Процедура ОтобразитьВФормеПрогресса(Форма, НаименованиеОбработкиДанных = Неопределено, КомментарийОбработкиДанных, КомментарийЗначения, МаксимальноеЗначение, ЗначениеИндикатора = Неопределено)
	
	Если НаименованиеОбработкиДанных <> Неопределено Тогда
		Форма.НаименованиеОбработкиДанных	= НаименованиеОбработкиДанных;
	КонецЕсли;
	Форма.КомментарийОбработкиДанных	= КомментарийОбработкиДанных;
	Форма.КомментарийЗначения			= КомментарийЗначения;
	Форма.МаксимальноеЗначение			= МаксимальноеЗначение;
	Если ЗначениеИндикатора <> Неопределено Тогда
		Форма.Значение = ЗначениеИндикатора;
	КонецЕсли;
	
	Если НЕ Форма.Открыта() Тогда
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьКодировкуКлассификатора(ДБФ)
	
	ая = "абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ";
	
	ПопаданияАНСИ = 0;
	ПопаданияОЕМ = 0;
	
	Инд = 1;
	ДБФ.Кодировка = КодировкаXBase.ANSI;
	ДБФ.Первая();
	Пока ДБФ.Следующая() Цикл
		Если Инд = 11 Тогда
			Прервать;
		КонецЕсли;
		ТекНаименование = СокрЛП(ДБФ.NAIM);
		ДлинаСтроки = СтрДлина(ТекНаименование);
		Для ИндСимв = 1 По ДлинаСтроки Цикл
			ТекСимв = Сред(ТекНаименование, ИндСимв, 1);
			ПопаданияАНСИ = ПопаданияАНСИ + Число(Найти(ая, ТекСимв) <> 0);
		КонецЦикла;
		Инд = Инд + 1;
	КонецЦикла;
	
	Инд = 1;
	ДБФ.Кодировка = КодировкаXBase.OEM;
	ДБФ.Первая();
	Пока ДБФ.Следующая() Цикл
		Если Инд = 11 Тогда
			Прервать;
		КонецЕсли;
		ТекНаименование = СокрЛП(ДБФ.NAIM);
		ДлинаСтроки = СтрДлина(ТекНаименование);
		Для ИндСимв = 1 По ДлинаСтроки Цикл
			ТекСимв = Сред(ТекНаименование, ИндСимв, 1);
			ПопаданияОЕМ = ПопаданияОЕМ + Число(Найти(ая, ТекСимв) <> 0);
		КонецЦикла;
		Инд = Инд + 1;
	КонецЦикла;
	
	Возврат ?(ПопаданияАНСИ > ПопаданияОЕМ, КодировкаXBase.ANSI, КодировкаXBase.OEM);
	
КонецФункции

Процедура ИмпортироватьСОУН()
	
	Если НЕ ВыбранныйКаталогСодержитФайлыКлассификатора() Тогда
		Возврат;
	КонецЕсли;
	
	ЧувствительностьИндикатора = 0.005;
	
	Индикатор = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ОтобразитьВФормеПрогресса(Индикатор, "Импорт классификатора СОУН", "Подготовка к импорту классификатора СОУН", "", 1);
	
	// инициализируем объекты для работы с таблицами классификатора
	Соун1 = Новый XBase(Каталог + "SOUN1.DBF", , Истина);
	СоунВ = Новый XBase(Каталог + "SOUN_V.DBF", , Истина);
	
	// удаленные (помеченные как удаленные) записи таблиц учитывать не будем
	Соун1.ОтображатьУдаленные = Ложь;
	СоунВ.ОтображатьУдаленные = Ложь;
	
	// определяем кодировку классификатора, инициализируем соответствующие свойства объектов
	Кодировка = ОпределитьКодировкуКлассификатора(СоунВ);
	Соун1.Кодировка = Кодировка;
	СоунВ.Кодировка = Кодировка;
	
	
	НачатьТранзакцию();
	
	
	/////////////////////////////////////////////////////////////////////
	// ИМПОРТ СПРАВОЧНИКА "ВИДЫ НАЛОГОВЫХ ОРГАНОВ"
	
	// формируем соответствие "Код вида НО - Ссылка на вид НО"
	СоответствиеВидовНО = Новый Соответствие;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВидыНалоговыхОрганов.Код,
	                      |	ВидыНалоговыхОрганов.Ссылка
	                      |ИЗ
	                      |	Справочник.ВидыНалоговыхОрганов КАК ВидыНалоговыхОрганов");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодВидаНО = СокрЛП(Выборка.Код);
		Если КодВидаНО <> "" Тогда
			СоответствиеВидовНО.Вставить(КодВидаНО, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// прорисовываем форму прогресса
	ОтобразитьВФормеПрогресса(Индикатор, , "Импорт справочника ""Виды налоговых органов""", "Загружено", СоунВ.КоличествоЗаписей(), 0);
	
	// перебираем записи таблицы видов налоговых органов
	ПризнакНаличияЗаписи = СоунВ.Первая();
	Пока ПризнакНаличияЗаписи Цикл
		
		// считываем данные текущей записи таблицы
		КодВидаНО = СокрЛП(СоунВ.KOD);
		НаименованиеВидаНО = СокрЛП(СоунВ.NAIM);
		
		// находим вид налогового органа по коду вида в справочнике
		ЗаписьДляОбновленияСсылка = СоответствиеВидовНО[КодВидаНО];
		
		// если не нашли, то создаем новый элемент
		Если ЗаписьДляОбновленияСсылка = Неопределено Тогда
			ЗаписьДляОбновления = Справочники.ВидыНалоговыхОрганов.СоздатьЭлемент();
			ЗаписьДляОбновления.Код = КодВидаНО;
		Иначе
			ЗаписьДляОбновления = ЗаписьДляОбновленияСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		// иннициализируем наименование вида налогового органа
		ЗаписьДляОбновления.Наименование = НаименованиеВидаНО;
		Попытка
			ЗаписьДляОбновления.Записать();
			СоответствиеВидовНО.Вставить(КодВидаНО, ЗаписьДляОбновления.Ссылка);
		Исключение
			Сообщить("Ошибка при импорте справочника ""Виды налоговых органов""!" + Символы.ПС + ОписаниеОшибки(), СтатусСообщения.Важное);
			Сообщить("Импорт прерван!", СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Индикатор.Закрыть();
			Возврат;
		КонецПопытки;
		
		// позиционируемся на следующую запись в таблице
		ПризнакНаличияЗаписи = СоунВ.Следующая();
		
		// "двигаем" индикатор
		Индикатор.Значение = СоунВ.НомерЗаписи();
		
	КонецЦикла;
	
	// закрываем таблицу видов налоговых органов
	СоунВ.ЗакрытьФайл();
	
	
	/////////////////////////////////////////////////////////////////////
	// ИМПОРТ СПРАВОЧНИКА "НАЛОГОВЫЕ ОРГАНЫ"
	
	// прорисовываем форму прогресса
	ОтобразитьВФормеПрогресса(Индикатор, , "Анализ текущего наполнения справочника ""Налоговые органы""", "", 1, 0);
	
	// считываем из базы и формируем соответствие "Код НО - Ссылка на НО"
	СоответствиеНО = Новый Соответствие;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	НалоговыеОрганы.Ссылка,
	                      |	НалоговыеОрганы.Код
	                      |ИЗ
	                      |	Справочник.НалоговыеОрганы КАК НалоговыеОрганы");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КодНО = СокрЛП(Выборка.Код);
		Если КодНО <> "" Тогда
			СоответствиеНО.Вставить(КодНО, Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// прорисовываем форму прогресса
	КоличествоЗаписей = Соун1.КоличествоЗаписей();
	ОтобразитьВФормеПрогресса(Индикатор, , "Чтение основной таблицы классификатора", "Прочитано", КоличествоЗаписей, 0);
	
	/////////////////////////////////////////////////////////////////////
	// Загружаем основную таблицу классификатора
	
	УжеНесуществующиеНО = Новый Массив;
	СсылкиНового = Новый Соответствие;
	СуществующиеНОКоды = Новый Массив;
	
	НомерЗаписи = 1;
	ПризнакНаличияЗаписи = Соун1.Первая();
	Пока ПризнакНаличияЗаписи Цикл
		
		Если НЕ ЗначениеЗаполнено(Соун1.DATAK) И НЕ ЗначениеЗаполнено(Соун1.KODP) Тогда
			// если запись действующая
			
			КодНО = СокрЛП(Соун1.KOD);
			
			// определяемся с объектом, в которую будем писать
			ТекНОСсылка = СоответствиеНО[КодНО];
			Если ТекНОСсылка = Неопределено Тогда
				
				ТекНООбъект = Справочники.НалоговыеОрганы.СоздатьЭлемент();
				ТекНООбъект.Код = КодНО;
				
				СсылкаНового = СсылкиНового[ТекНООбъект.Код];
				Если СсылкаНового <> Неопределено Тогда
					ТекНООбъект.УстановитьСсылкуНового(СсылкаНового);
				КонецЕсли;
				
			Иначе
				ТекНООбъект = ТекНОСсылка.ПолучитьОбъект();
				ТекНООбъект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			// инициализируем свойства записи
			ТекНООбъект.Код							= СокрЛП(Соун1.KOD);
			ТекНООбъект.Адрес						= СокрЛП(Соун1.ADRES);
			ТекНООбъект.АдресСайта					= СокрЛП(Соун1.CITE);
			ТекНООбъект.ИНН							= СокрЛП(Соун1.INN);
			ТекНООбъект.КПП							= СокрЛП(Соун1.KPP);
			ТекНООбъект.Наименование				= СокрЛП(Соун1.NAIMK);
			ТекНООбъект.ПолноеНаименование			= СокрЛП(Соун1.NAIM);
			ТекНООбъект.ПриемНалоговойОтчетности	= (СокрЛП(Соун1.POTCHDOK) = "1");
			ТекНООбъект.Телефон						= СокрЛП(Соун1.TEL);
			ТекНООбъект.УчетНалогоплательщиков		= (СокрЛП(Соун1.PUCH) = "1");
			ТекНООбъект.Вид							= СоответствиеВидовНО[СокрЛП(Соун1.VID)];
			ТекНООбъект.АдресЭлектроннойПочты		= СокрЛП(Соун1.EMAIL);
			Если НЕ НеОбновлятьКомментарий Тогда
				ТекНООбъект.Комментарий				= СокрЛП(Соун1.COMENT);
			КонецЕсли;
			
			// определяем родителя
			КодРодителя = СокрЛП(Соун1.KODV);
			Если ЗначениеЗаполнено(КодРодителя) Тогда
			
				ТекРодитель = СоответствиеНО[КодРодителя];
				Если ТекРодитель = Неопределено Тогда
					
					СсылкаНовогоРодителя = СсылкиНового[КодРодителя];
					Если СсылкаНовогоРодителя = Неопределено Тогда
						СсылкаНовогоРодителя = Справочники.НалоговыеОрганы.ПолучитьСсылку();
						СсылкиНового.Вставить(КодРодителя, СсылкаНовогоРодителя);
					КонецЕсли;
					ТекНООбъект.Родитель = СсылкаНовогоРодителя;
					
				Иначе
					ТекНООбъект.Родитель = ТекРодитель;
				КонецЕсли;
				
			Иначе
				ТекНООбъект.Родитель = Справочники.НалоговыеОрганы.ПустаяСсылка();
			КонецЕсли;
			
			// пишем в базу
			ТекНООбъект.Записать();
			
			// дополняем соответствие кодов НО ссылкам
			СоответствиеНО.Вставить(ТекНООбъект.Код, ТекНООбъект.Ссылка);
			
			// дополняем список кодов существующих НО
			СуществующиеНОКоды.Добавить(ТекНООбъект.Код);
			
		Иначе
			
			// если запись недействующая
			УжеНесуществующиеНО.Добавить(СокрЛП(Соун1.KOD));
			
		КонецЕсли;
		
		// прорисовываем индикатор
		Если (НомерЗаписи - Индикатор.Значение) / КоличествоЗаписей > ЧувствительностьИндикатора Тогда
			Индикатор.Значение				= НомерЗаписи;
		КонецЕсли;
		
		// переходим к следующей записи
		ПризнакНаличияЗаписи				= Соун1.Следующая();
		НомерЗаписи							= НомерЗаписи + 1;
		
	КонецЦикла;
	
	// закрываем основную таблицу классификатора
	Соун1.ЗакрытьФайл();
	
	
	/////////////////////////////////////////////////////////////////////
	// Помечаем на удаление устаревшие НО
	
	ЧислоНесуществующихНО					= УжеНесуществующиеНО.Количество();
	
	// прорисовываем форму прогресса
	ОтобразитьВФормеПрогресса(Индикатор, , "Завершение импорта", "Обработано", ЧислоНесуществующихНО, 0);
	
	// удаляем НО
	Для НомСтр = 1 По ЧислоНесуществующихНО Цикл
		ТекНОКод = УжеНесуществующиеНО[НомСтр - 1];
		
		// если НО присутствует в списке существующих, то не будем его удалять
		Если СуществующиеНОКоды.Найти(ТекНОКод) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// прорисовываем индикатор
		Если (НомСтр - Индикатор.Значение) / ЧислоНесуществующихНО > ЧувствительностьИндикатора Тогда
			Индикатор.Значение = НомСтр;
		КонецЕсли;
		
		// пишем пометку
		ТекНОСсылка = СоответствиеНО[ТекНОКод];
		Если ТекНОСсылка <> Неопределено Тогда
			ТекНООбъект = ТекНОСсылка.ПолучитьОбъект();
			Если НЕ ТекНООбъект.ПометкаУдаления Тогда
				ТекНООбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Индикатор.Закрыть();
	
	// в случае успешного завершения сохраним настройки импорта
	СохранитьЗначение("ИмпортСОУН_НеОбновлятьКомментарий", НеОбновлятьКомментарий);
	
	Предупреждение("Классификатор успешно импортирован.");
	
	Закрыть();
	
КонецПроцедуры

СерыйЦвет = Новый Цвет(218, 210, 189);
СинийЦвет = Новый Цвет(0, 0, 128);

ИнформацияОКлассификаторе = Новый Структура("НомерВерсии, ДатаВерсии");
ВВыбранномКаталогеКлассификаторПрисутствует = Ложь;
