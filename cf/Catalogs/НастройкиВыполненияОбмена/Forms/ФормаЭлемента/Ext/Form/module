
Перем мОбновлятьСписокАвтоОбмена;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

Перем ЭтоФайловаяИБ;

// при изменении каталога
Процедура ОбработчикПриИзмененииКаталога(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

// при нажатии на "Открытие" у каталога 
Процедура ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УстановитьТекстНадписиРегламентнойНастройки()
	
	Перем ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно;
	
	ПроцедурыОбменаДаннымиКлиент.ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(мРегламентноеЗадание, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно);
	ЭлементыФормы.НастройкаРегламентногоЗадания.Заголовок = ТекстЗаголовка;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Заголовок = ТекстРасписания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Шрифт = ?(РасписаниеАктивно И ИспользоватьРегламентныеЗадания, мЖирныйШрифт, мОбычныйШрифт);
    	
КонецПроцедуры

Процедура ИспользоватьРегламентныеЗаданияПриИзменении(Элемент)
	
	ОбновитьДоступностьАвтообмена();
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	Если ИспользоватьРегламентныеЗадания Тогда
		
		НадписьРасписаниеРегламентногоЗаданияНажатие(ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки);
		
	Конецесли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьАвтообмена()
	
	ЭлементыФормы.НастройкаРегламентногоЗадания.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.НадписьРасписаниеРегламентногоЗаданияНастройки.Доступность = ИспользоватьРегламентныеЗадания;
	ЭлементыФормы.ДинамическиИзменятьИнтервалМеждуОбменами.Доступность = ИспользоватьРегламентныеЗадания;	
	
КонецПроцедуры

Процедура НадписьРасписаниеРегламентногоЗаданияНажатие(Элемент)
	
	РедактированиеРасписанияРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры

Процедура РедактированиеРасписанияРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	ОбъектЗадания = НайтиРегламентноеЗаданиеПоНастройке();		
			
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("ВыполнениеОбмена");
						
		ОбъектЗадания.Наименование = Наименование;
		ОбъектЗадания.Использование = Истина;
	        		
	КонецЕсли;
	
	// редактирование самого расписания непосредственно
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ОбъектЗадания.Расписание);
		
	Если Диалог.ОткрытьМодально() Тогда
		
		ОбъектЗадания.Расписание = Диалог.Расписание;
		Попытка
			ОбъектЗадания.Записать();
			РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		Исключение
			ВызватьИсключение "Произошла ошибка при сохранении расписания выполнения обменов. Возможно данные расписания были изменены. Закройте форму настройки и повторите попытку изменения расписания еще раз.
			|Подробное описание ошибки: " + ОписаниеОшибки();
		КонецПопытки;
		
	Иначе
		
		ОбъектЗадания = НайтиРегламентноеЗаданиеПоНастройке();
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();	
	
КонецПроцедуры

Процедура РедактироватьНастройкиРегламентногоЗадания(ОбъектЗадания, РеквизитЗадания)
	
	Если ОбъектЗадания = Неопределено Тогда
		
		ОбъектЗадания = НайтиРегламентноеЗаданиеПоНастройке();				
			
	КонецЕсли;
	
	Диалог = ПолучитьОбщуюФорму("ДиалогРегламентногоЗадания");
	Диалог.РегламентноеЗадание = ОбъектЗадания;
	Диалог.Наименование = Наименование;
	Диалог.МетаданныеВыбор = "ВыполнениеОбмена";
		
	Если Диалог.ОткрытьМодально() <> Истина Тогда
		
		ОбъектЗадания = НайтиРегламентноеЗаданиеПоНастройке();
				
	Иначе
		
		Модифицированность = Истина;
		ОбъектЗадания = Диалог.РегламентноеЗадание;
				
	КонецЕсли;	
	
	Если ОбъектЗадания <> Неопределено Тогда
		
		РеквизитЗадания = Строка(ОбъектЗадания.УникальныйИдентификатор);
		
	КонецЕсли;
	
	УстановитьТекстНадписиРегламентнойНастройки();	
	
КонецПроцедуры

Процедура НадписьНастройкаРегламентногоЗаданияНажатие(Элемент)
	
	РедактироватьНастройкиРегламентногоЗадания(мРегламентноеЗадание, РегламентноеЗадание);
		
КонецПроцедуры

// при изменении флажка каталога отслеживания изменений видимости
Процедура ПриИзмененииВидимостиКаталогаПриИзменении(Элемент)
	
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();
		
КонецПроцедуры

//процедура устанавливает доступность редактирования каталога отслеживания видимости
Процедура УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости()
	
	ЭлементыФормы.КаталогПроверкиДоступности.ТолькоПросмотр = НЕ ПриИзмененииВидимостиКаталога;
	ЭлементыФормы.ВыполнятьОбменПриПоявленииФайла.ТолькоПросмотр = НЕ ПриПоявленииФайла;
	
КонецПроцедуры

// при изменении доспуности каталога
Процедура КаталогПроверкиДоступностиПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
			
КонецПроцедуры

// при начале выбора каталога проверки доступности
Процедура КаталогПроверкиДоступностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при открытии каталога доступности
Процедура КаталогПроверкиДоступностиОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыполнятьОбменПриПоявленииФайлаПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

Процедура ВыполнятьОбменПриПоявленииФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИмяФайла = ПолучитьИмяФайлаИзДиалогаОтПользователя();
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнятьОбменПриПоявленииФайла = ИмяФайла;
	
КонецПроцедуры

Функция ПолучитьИмяФайлаИзДиалогаОтПользователя()
	
	Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
	Диалог.Заголовок = "Выбор файла при появлении которого нужно выполнить обмен";
	Диалог.Фильтр = "Все файлы (*.*)|*.*|"
	      + "Сжатые сообщения обмена (*.zip)|*.zip|"
	      + "Сообщения обмена (*.xml)|*.xml|";
	Диалог.ПроверятьСуществованиеФайла = Ложь;
	Диалог.ПредварительныйПросмотр = Ложь;
	Диалог.ПолноеИмяФайла = "";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат "";
	Иначе
		Возврат Диалог.ПолноеИмяФайла;
	КонецЕсли;
	
КонецФункции

Процедура ПриПоявленииФайлаПриИзменении(Элемент)
	
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();	
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() 
		И ПараметрОбъектКопирования = Неопределено 
		И ПараметрОснование = Неопределено Тогда
		
		// ищем те узлы с которыми может текущий пользователь обмениваться
		ДинамическиИзменятьИнтервалМеждуОбменами = Истина;
		
		Ответственный = ПараметрыСеанса.ТекущийПользователь;
						
	КонецЕсли;
	
	ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
	
	ПриИзмененииВидимостиКаталога = Не ПустаяСтрока(КаталогПроверкиДоступности);
	ПриПоявленииФайла = Не ПустаяСтрока(ВыполнятьОбменПриПоявленииФайла);
	
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	ОбновитьДоступностьАвтообмена();
	
	УстановитьДоступностьРедактированияКаталогаОтслеживанияВидимости();
	
	УстановитьТекстНадписиРегламентнойНастройки();
	
	ЭтаФорма.Модифицированность = ЭтоНовый();
	
КонецПроцедуры

//Функция для текущей редактируемой настройки определяет она для автоматического обмена или нет
Функция ОпределитьПоНастройкеРедактированияОнаДляавтообмена()
	
	Возврат КаждыйЗапускПрограммы 
		ИЛИ КаждоеЗавершениеРаботыСПрограммой
		ИЛИ (ПриИзмененииВидимостиКаталога И Не ПустаяСтрока(КаталогПроверкиДоступности))
		ИЛИ (ПриПоявленииФайла И Не ПустаяСтрока(ВыполнятьОбменПриПоявленииФайла));
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	//пустой каталог отслеживания изменения видимости
	Если ПриИзмененииВидимостиКаталога
		И ПустаяСтрока(КаталогПроверкиДоступности) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не задан каталог при появлении которого необходимо выполнять обмен данными", Отказ);
		
	КонецЕсли;
	
	Если ПриПоявленииФайла
		И ПустаяСтрока(ВыполнятьОбменПриПоявленииФайла) Тогда
		
		ОбщегоНазначения.СообщитьОбОшибке("Не задан файл при появлении которого необходимо выполнять обмен данными", Отказ);
		
	КонецЕсли;		
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;	
	
	Если ЭтоНовый() Тогда
		
		Если ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными() 
			ИЛИ Ответственный = ПараметрыСеанса.ТекущийПользователь Тогда
			
			мОбновлятьСписокАвтоОбмена = Истина;
			
		КонецЕсли; 
		
	Иначе
		
		Если КаталогПроверкиДоступности <> Ссылка.КаталогПроверкиДоступности	
		 ИЛИ ВыполнятьОбменПриПоявленииФайла <> Ссылка.ВыполнятьОбменПриПоявленииФайла
		 ИЛИ Ответственный = ПараметрыСеанса.ТекущийПользователь 
		 ИЛИ Ссылка.Ответственный = ПараметрыСеанса.ТекущийПользователь Тогда
		 
			мОбновлятьСписокАвтоОбмена = Истина;
			
		КонецЕсли;
		
	КонецЕсли; 
		
	// если в настройке указано, что нужно автоматически производить обмен данными
	// но не установлена контанта автоматического обмена данными в системе то предупредим его
	
	ПоНастройкеЕстьАвтообмен = ОпределитьПоНастройкеРедактированияОнаДляавтообмена();
		
	ПоНастройкеЕстьРегламентныеЗадания = ИспользоватьРегламентныеЗадания;
	
	Если ЭтоФайловаяИБ Тогда
		
		ПользовательДляВыполненияРеглЗаданий = Константы.ПользовательДляВыполненияРегламентныхЗаданийВФайловомВарианте.Получить();
		
		Если ПоНастройкеЕстьРегламентныеЗадания
			И НЕ ЗначениеЗаполнено(ПользовательДляВыполненияРеглЗаданий) Тогда
			
			Сообщить("Не установлена константа ""Пользователь, для выполнения регламентных заданий в файловом режиме"". Периодический обмен выполняться не будет!", СтатусСообщения.ОченьВажное);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// для помеченой на удаление настройки обмен автоматически не производится
	Если (ПоНастройкеЕстьАвтообмен ИЛИ ПоНастройкеЕстьРегламентныеЗадания)
		И ПометкаУдаления Тогда
			
		Сообщить("Настройка помечена на удаление. Автоматический обмен выполняться не будет!", СтатусСообщения.Важное);	
					
	КонецЕсли;		
		
	// очищаем каталог отслеживания видимости
	Если Не ПриИзмененииВидимостиКаталога Тогда
		
		КаталогПроверкиДоступности = "";
		
	КонецЕсли;
	
	Если Не ПриПоявленииФайла Тогда
		
		ВыполнятьОбменПриПоявленииФайла = "";
		
	КонецЕсли;
	
КонецПроцедуры

// после записи объекта
Процедура ПослеЗаписи()
	
	Если мОбновлятьСписокАвтоОбмена И глЗначениеПеременной("глОбработкаАвтоОбменДанными") <> Неопределено Тогда
		
		глЗначениеПеременной("глОбработкаАвтоОбменДанными").ОбновитьНастройкуАвтоматическогоОбмена(Ссылка);
				
	КонецЕсли;
	
	мОбновлятьСписокАвтоОбмена = Ложь;	
	
	Если ВладелецФормы <> Неопределено Тогда
		
		ОповеститьОЗаписиНовогоОбъекта(Ссылка);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура НастройкиОбменаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущаяСтрока = ЭлементыФормы.НастройкиОбмена.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.ВыполняемоеДействие) Тогда
		ТекущаяСтрока.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ЗагрузкаДанных;
	КонецЕсли;
	
КонецПроцедуры

// событие при нажатии на кнопку произвести обмен
Процедура ПроизвестиОбменДаннымиДляНастройкиОбмена()
	
	// надо проверить редактируется ли объект
	Если Модифицированность Тогда
		
		ОтветНаВопрос = Вопрос("Данные настроек обмена были изменены. Для проведения обмена данными необходимо сохранить изменения. Сохранить внесенные в настройку обмена изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ЭтотОбъект.Записать();
		
	КонецЕсли; 
	
	ПроцедурыОбменаДанными.ВыполнитьОбменПоНастройкеАвтоматическогоВыполненияОбменаДанными(ЭтотОбъект.Ссылка, , глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
КонецПроцедуры

Процедура ДействияФормыПроизвестиОбменДанными(Кнопка)
	
	// выполнение обмена
	ПроизвестиОбменДаннымиДляНастройкиОбмена();
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОбменаПодбор(Кнопка)
	
	МассивНастроекПоКоторымОбменВедется = НастройкиОбмена.ВыгрузитьКолонку("НастройкаОбмена");
	
	// подбор настроек обмена
	ФормаПодбораНастроек = Справочники.НастройкиОбменаДанными.ПолучитьФормуВыбора();
	ФормаПодбораНастроек.МножественныйВыбор = Истина;
	ФормаПодбораНастроек.мМассивНастроекПоКоторымОбменВедется = МассивНастроекПоКоторымОбменВедется;
	
	РезультатПодбора = ФормаПодбораНастроек.ОткрытьМодально();
	
	Если РезультатПодбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// нужно показать форму выбора действий для добавления
	ФормаВыбораДействий = ПолучитьФорму("ВыборДействий");
	
	РезультатПодбораДействий = ФормаВыбораДействий.ОткрытьМодально();
	
	Если РезультатПодбораДействий <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	МассивДействий = Новый Массив();
	Для Каждого СтрокаДействия Из ФормаВыбораДействий.ТаблицаДействий Цикл
		
		Если СтрокаДействия.Флаг Тогда
			
			МассивДействий.Добавить(СтрокаДействия.Действие);	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивДействий.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементДействия Из МассивДействий Цикл
	
		Для Каждого ВыбранныйЭлемент Из РезультатПодбора Цикл
					
			НоваяСтрокаВТабличнойЧасти = НастройкиОбмена.Добавить();
			НоваяСтрокаВТабличнойЧасти.НастройкаОбмена = ВыбранныйЭлемент;
			НоваяСтрокаВТабличнойЧасти.ВыполняемоеДействие = ЭлементДействия;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОбменаСкопироватьГруппу(Кнопка)
	
	Если ЭлементыФормы.НастройкиОбмена.ВыделенныеСтроки = Неопределено
		ИЛИ ЭлементыФормы.НастройкиОбмена.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// скопировать выбранную группу настроек
	Для Каждого СтрокаВыделения Из ЭлементыФормы.НастройкиОбмена.ВыделенныеСтроки Цикл
		
		НоваяСтрокаВТабличнойЧасти = НастройкиОбмена.Добавить();
		НоваяСтрокаВТабличнойЧасти.НастройкаОбмена = СтрокаВыделения.НастройкаОбмена;
		НоваяСтрокаВТабличнойЧасти.ВыполняемоеДействие = СтрокаВыделения.ВыполняемоеДействие;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкиОбменаУстановитьДействие(Кнопка)
	
	// установить действие у выбранных настроек
	Если ЭлементыФормы.НастройкиОбмена.ВыделенныеСтроки = Неопределено
		ИЛИ ЭлементыФормы.НастройкиОбмена.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеДляУстановки = Перечисления.ДействиеПриОбмене.ВыгрузкаДанных;
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ПеречислениеСсылка.ДействиеПриОбмене"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);	
	Если НЕ ВвестиЗначение(ДействиеДляУстановки, "Выбор действия для установки", ОписаниеТипов)  Тогда
		Возврат;		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДействиеДляУстановки) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаВыделения Из ЭлементыФормы.НастройкиОбмена.ВыделенныеСтроки Цикл
		
		СтрокаВыделения.ВыполняемоеДействие = ДействиеДляУстановки;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НастройкиОбменаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ВыгрузкаДанных Тогда
		ОформлениеСтроки.Ячейки.ВыполняемоеДействие.Картинка = БиблиотекаКартинок.ЗаписатьИзменения;
	ИначеЕсли ДанныеСтроки.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ЗагрузкаДанных Тогда
		ОформлениеСтроки.Ячейки.ВыполняемоеДействие.Картинка = БиблиотекаКартинок.ПрочитатьИзменения;
	ИначеЕсли ДанныеСтроки.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ОтложенныеДвижения Тогда
		ОформлениеСтроки.Ячейки.ВыполняемоеДействие.Картинка = БиблиотекаКартинок.Провести;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.ВыполняемоеДействие.ОтображатьКартинку = Истина;
	
КонецПроцедуры

мОбновлятьСписокАвтоОбмена = Ложь;
мРегламентноеЗадание = Неопределено;

мЖирныйШрифт = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();
