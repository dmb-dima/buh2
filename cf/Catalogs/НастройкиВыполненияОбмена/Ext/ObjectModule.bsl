
Перем мРегламентноеЗадание Экспорт;

Функция НайтиРеглЗаданиеПоПараметру(УникальныйНомерЗадания)
	
	Попытка
		
		Если НЕ ПустаяСтрока(УникальныйНомерЗадания) Тогда
			
			УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(УникальныйНомерЗадания);
			ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);
			
		Иначе
			
			ТекущееРегламентноеЗадание = Неопределено;
			
		КонецЕсли;
		
	Исключение
		
		ТекущееРегламентноеЗадание = Неопределено;
		
    КонецПопытки;
	
	Возврат ТекущееРегламентноеЗадание;
	
КонецФункции

Функция НайтиРегламентноеЗаданиеПоНастройке() Экспорт
	
	ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(РегламентноеЗадание);
	
	Возврат ТекущееРегламентноеЗадание;
	
КонецФункции

Процедура УстановитьПараметрыРегламентногоЗадания(РеквизитЗадания, ПараметрЗадания, КлючРегламентногоЗадания = "", Постфикс = "")
	
	Если ПараметрЗадания = Неопределено Тогда
		
		РеквизитЗадания = "";
		
	Иначе	
		
		РеквизитЗадания = Строка(ПараметрЗадания.УникальныйИдентификатор);
		
		ПараметрЗадания.Наименование = Наименование + Постфикс;
		// генерируем уникальный ключ, что бы в один момент времени 2 регламентных задания не выполнялись
		Если ПустаяСтрока(ПараметрЗадания.Ключ) Тогда
			ПараметрЗадания.Ключ = КлючРегламентногоЗадания;
		КонецЕсли;
		
		Массив = Новый Массив();
		Массив.Добавить(Код);
		
		ПараметрЗадания.Параметры = Массив;
		ПараметрЗадания.Записать();	
					
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьЗначенияПеременныхРегламентныхНастроек() Экспорт
	
	Если мРегламентноеЗадание = Неопределено Тогда
		
		мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
			
	КонецЕсли;	
			
КонецПроцедуры

//Функция определяет есть ли для данной настройки Автоматический обмен данными
Функция ЭтоНастройкаАвтоматическогоОбменаДанными() Экспорт
	
	Возврат КаждыйЗапускПрограммы 
		ИЛИ КаждоеЗавершениеРаботыСПрограммой
		ИЛИ ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными();
	
КонецФункции
	
//Функция по настройке определяет нужно ли для нее периодически определять необходимость обмена данными
Функция ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными() Экспорт
	
	НужноПериодическиПроверятьНеобходимостьОбмена = Не ПустаяСтрока(КаталогПроверкиДоступности)
		ИЛИ НЕ ПустаяСтрока(ВыполнятьОбменПриПоявленииФайла);
	
	Возврат НужноПериодическиПроверятьНеобходимостьОбмена;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	// работа с регламентными заданиями
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	Если ЭтоНастройкаАвтоматическогоОбменаДанными() Тогда
		
		Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ""Пользователь"". Автоматический обмен по такой настройке невозможен.", Отказ);	
		КонецЕсли;
				
	КонецЕсли;	
	
	НужноОтключитьРегЗаданияОбмена =  ПометкаУдаления
		ИЛИ НЕ ИспользоватьРегламентныеЗадания;
		
	Если НужноОтключитьРегЗаданияОбмена Тогда
			
		Если мРегламентноеЗадание <> Неопределено Тогда
			мРегламентноеЗадание.Использование = Ложь;			
		КонецЕсли;
					
	Иначе
		
		// если оба выключены регл задания - то включаем основное регл задание
		Если мРегламентноеЗадание = Неопределено Тогда
			
			ОбщегоНазначения.СообщитьОбОшибке("Не выбрано регламентное задание для настройки обмена.", Отказ);				
						
		КонецЕсли;
		
		Если мРегламентноеЗадание <> Неопределено Тогда
			
			мРегламентноеЗадание.Использование = Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
	УстановитьПараметрыРегламентногоЗадания(РегламентноеЗадание, мРегламентноеЗадание);
		
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РегламентноеЗадание = "";
	мРегламентноеЗадание = Неопределено;
		
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	
	УстановитьЗначенияПеременныхРегламентныхНастроек();
	
	Если мРегламентноеЗадание <> Неопределено Тогда
		мРегламентноеЗадание.Удалить();
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
		
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиОбменаДанными") Тогда
	
		Наименование = Основание.Наименование;
		
		СтрокаТЧ = НастройкиОбмена.Добавить();
		СтрокаТЧ.НастройкаОбмена = Основание;
		СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ЗагрузкаДанных;
		
		СтрокаТЧ = НастройкиОбмена.Добавить();
		СтрокаТЧ.НастройкаОбмена = Основание;
		СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ВыгрузкаДанных;
	
	КонецЕсли;
	
КонецПроцедуры
