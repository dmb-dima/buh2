///////////////////////////////////////////////////////////////////////////////
//// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ

// Функция осуществляет загрузку внешней обработки обслуживания.
//
// Параметры
//  ИмяФайлаОбработки - <Строка>
//                    - Строка, содержащая полное имя файла обработки
//                      обслуживания.
//
// Возвращаемое значение:
//  <Булево>          - Результат выполнения операции загрузки.
//
Функция ЗагрузитьОбработкуОбслуживания(ИмяФайлаОбработки) Экспорт

	Результат = Ложь;

	Попытка
		ОбрОбслуживания  = ВнешниеОбработки.Создать(ИмяФайлаОбработки);
	Исключение
		Предупреждение("Не удалось открыть внешнюю обработку """
		               + ИмяФайлаОбработки
		               + """.");
		Возврат Результат;
	КонецПопытки;

	Попытка
		Форма     = ОбрОбслуживания.ПолучитьФорму();
		ВерсияAPI = ?(ОбрОбслуживания.ПолучитьВерсиюAPI() <> 2.1, ОбрОбслуживания.ПолучитьВерсиюAPI(),2.01);
	Исключение
		Предупреждение("Выбранная внешняя обработка не является обработкой
		               |обслуживания торгового оборудования.");
		ВерсияAPI = 0;
		Возврат Результат;
	КонецПопытки;

	ВерсияAPIКонфигурации = ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО();

	Если Не ((ВерсияAPI >= ВерсияAPIКонфигурации) И (ВерсияAPI < Окр(ВерсияAPIКонфигурации, 0, РежимОкругления.Окр15как10) + 1)) Тогда
		Предупреждение("Некорректный набор команд обработки обслуживания." + Символы.ПС
		+ "Версия API обработки обслуживания " + Формат(ВерсияAPI, "ЧЦ=5; ЧДЦ=2") + " не совпадает с версией API конфигурации " + Формат(ВерсияAPIКонфигурации, "ЧЦ=5; ЧДЦ=2") + ".");
		ВерсияAPI = 0;
		Возврат Результат;
	КонецЕсли;

	Файл              = Новый Файл(ИмяФайлаОбработки);
	ОписаниеОбработки = Форма.ПолучитьОписание();
	Данные            = Новый ДвоичныеДанные(ИмяФайлаОбработки);
	Сжатие            = Новый СжатиеДанных();

	Если Версия > ОписаниеОбработки.ВерсияОбработки Тогда
		Ответ = Вопрос("Внимание! Загружаемая обработка обслуживания имеет более раннюю версию,
		               |чем уже загруженная обработка. Продолжить загрузку?",
		               РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;

	Наименование      = ОписаниеОбработки.Наименование;
	Описание          = ОписаниеОбработки.Описание;
	Версия            = ОписаниеОбработки.ВерсияОбработки;
	Идентификатор     = ВРег(ОписаниеОбработки.Идентификатор);
	Вид               = ОписаниеОбработки.Вид;
	ИмяФайла          = Файл.Имя;
	Обработка         = Новый ХранилищеЗначения(Данные, Сжатие);
	Модель            = Неопределено;

	Модели.Очистить();
	Для Каждого Модель Из ОписаниеОбработки.СписокМоделей Цикл
		ТекущаяМодель        = Модели.Добавить();
		ТекущаяМодель.Модель = Модель;
	КонецЦикла;

	Результат = Истина;

	ВерсияAPIПриИзменении();

	Возврат Результат;

КонецФункции // ЗагрузитьОбработкуОбслуживания()

// Функция осуществляет экспорт обработки обслуживания во внешний файл.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//  <Булево> - Результат выполнения операции.
//
Функция СохранитьОбработкуОбслуживания() Экспорт

	Если ПустаяСтрока(ИмяФайла) Тогда
		Предупреждение("Не задана обработка обслуживания.");
		Возврат Ложь;
	КонецЕсли;

	Диалог                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Если Диалог.Выбрать() Тогда
		ПолноеИмяФайла = РаботаСФайлами.ПолучитьИмяФайла(Диалог.Каталог, ИмяФайла);
		Файл           = Новый Файл(ПолноеИмяФайла);
		Если Файл.Существует() Тогда
			Ответ = Вопрос("Файл """ + ПолноеИмяФайла + """ уже существует.
						   |Перезаписать?", РежимДиалогаВопрос.ДаНет);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
		Попытка
			Обработка.Получить().Записать(ПолноеИмяФайла);
		Исключение
			Предупреждение("Ошибка записи в файл """ + ПолноеИмяФайла + """.");
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции // СохранитьОбработкуОбслуживания()

///////////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ДействияФормыРедактироватьКод(Кнопка)

	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);

КонецПроцедуры

Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);

	ВерсияAPIПриИзменении();

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода "Обработка".
//
// Параметры:
//  Элемент              - <ПолеВвода>
//                       - Поле ввода, с которым связано данное событие
//                         ("Обработка").
//
//  СтандартнаяОбработка - <Булево>
//                       - В данный параметр передается признак выполнения
//                         стандартной (системной) обработки события. Если
//                         в теле процедуры-обработчика установить данному
//                         параметру значение Ложь, стандартная обработка
//                         события производиться не будет
//                         Значение по умолчанию: Истина.
//
Процедура ОбработкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	Диалог                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок          = "Выбор обработки обслуживания";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр             = "Внешние обработки (*.epf)|*.epf";
	Диалог.ПолноеИмяФайла     = ИмяФайла;

	Если Диалог.Выбрать() Тогда
		ЗагрузитьОбработкуОбслуживания(Диалог.ПолноеИмяФайла);
	КонецЕсли;

КонецПроцедуры // ОбработкаНачалоВыбора()

// Процедура представляет обработчик события "Нажатие" кнопки "Экспорт".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие (кнопка "Экспорт").
//
Процедура ДействияФормыЭкспорт(Кнопка)

	СохранитьОбработкуОбслуживания();

КонецПроцедуры // ДействияФормыЭкспорт()

Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Код);

КонецПроцедуры

Процедура ВерсияAPIПриИзменении()

	Если ВерсияAPI < ПолучитьСерверТО().ПолучитьВерсиюAPIКонфигурацииТО() Тогда
		ЭлементыФормы.ВерсияAPI.ЦветТекстаПоля = ЦветаСтиля.ЦветОтрицательногоЧисла;
	Иначе
		ЭлементыФормы.ВерсияAPI.ЦветТекстаПоля = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;

КонецПроцедуры

