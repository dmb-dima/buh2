Перем КоличествоЗагружаемыхОбъектов;
Перем НомерЗагружаемогоОбъекта;
Перем ФормаПрогрессора;

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события формы ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДеревоГрупп.Колонки.Добавить("Код");
	ДеревоГрупп.Колонки.Добавить("Идентификатор");
	ДеревоГрупп.Колонки.Добавить("Наименование");
	
	ДеревоПолное.Колонки.Добавить("Код");
	ДеревоПолное.Колонки.Добавить("Пометка");
	ДеревоПолное.Колонки.Добавить("Представление");
	ДеревоПолное.Колонки.Добавить("Идентификатор");
	ДеревоПолное.Колонки.Добавить("ЭтоГруппа");
	ДеревоПолное.Колонки.Добавить("Наименование");
	ДеревоПолное.Колонки.Добавить("КонтрольноеЧисло");
	ДеревоПолное.Колонки.Добавить("НаименованиеГруппировки");
	ДеревоПолное.Колонки.Добавить("АмортизационнаяГруппа");

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик нажатия кнопки УстановитьПометки командной панели формы
//
Процедура КоманднаяПанельУстановитьПометки(Кнопка)
	
	УстановитьПометки(ДеревоГрупп, 1);
	
КонецПроцедуры // КоманднаяПанельУстановитьПометки()

// Процедура - обработчик нажатия кнопки СнятьПометки командной панели формы
//
Процедура КоманднаяПанельСнятьПометки(Кнопка)
	
	УстановитьПометки(ДеревоГрупп, 0);
	
КонецПроцедуры // КоманднаяПанельСнятьПометки()

// Процедура - обработчик нажатия кнопки ЗагрузкаГрупп командной панели формы
//
Процедура ПрочитатьФайлНажатие(Кнопка)
	ЗагрузитьГруппы()
КонецПроцедуры

// Процедура - обработчик изменения флажка в ДеревеГрупп
//
Процедура ДеревоГруппПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	УстановитьПометкиВДереве(ТекСтрока);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки ЗагрузитьОтмеченные
//
Процедура Загрузить(Кнопка)
	
	КоличествоЗагружаемыхОбъектов = 0;
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка классификатора ОКОФ";
	ФормаПрогрессора.Значение = 0;
	ФормаПрогрессора.КомментарийОбработкиДанных  = "Построение списка загружаемых объектов ...";
	ФормаПрогрессора.Открыть();

	УстановитьПометкиВПолномДереве(ДеревоГрупп.Строки);
	
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоЗагружаемыхОбъектов;
	ФормаПрогрессора.КомментарийОбработкиДанных  = "Загрузка классификатора ОКОФ ...";
	
	НомерЗагружаемогоОбъекта = 0;

	ЗагрузитьСтроки(ДеревоПолное.Строки);
	
	ФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик начала выбора ФайлаДанных
//
Процедура ФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                  =	"Файл данных|*.xml";
	ДиалогВыбораФайла.Заголовок               =	"Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр =	Ложь;
	ДиалогВыбораФайла.Расширение              =	"xml";
	ДиалогВыбораФайла.ИндексФильтра           =	0;
	Если ПустаяСтрока(Элемент.Значение) тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = "okof.xml";
	Иначе	
		ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.Значение;
	КонецЕсли;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ УСТАНОВКИ ПОМЕТОК ДЕРЕВА ЗНАЧЕНИЙ

// Определяет значение флага по составу пометок коллекции строк.
//
// Параметры:
//  Строки         - коллекция строк дерева значений
//
// Возвращаемое значение:
//  Число, значение флага
// 
Функция ОпределитьЗначениеФлага(Строки)

	НайденыИстина = Ложь;
	НайденыЛожь   = Ложь;

	Для каждого Строка из Строки.Строки Цикл
		Если Строка.Пометка = 2 Тогда
			Возврат 2;
		КонецЕсли;
		
		Если (НЕ НайденыИстина) И (Строка.Пометка) Тогда
			НайденыИстина = Истина;
		КонецЕсли;
		Если (НЕ НайденыЛожь) И (НЕ Строка.Пометка) Тогда
			НайденыЛожь = Истина;
		КонецЕсли;
	КонецЦикла;

	Если      (НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 2;
	ИначеЕсли (НайденыИстина) И (НЕ НайденыЛожь) Тогда
		Возврат 1;
	ИначеЕсли (НЕ НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 0;
	КонецЕсли;

КонецФункции // ОпределитьЗначениеФлага()

// Устанавливает пометку в вышестоящих элементах дерева
//
Процедура ОбходВерхнихУровней(ТекСтрока)

	ТекСтрока.Пометка = ОпределитьЗначениеФлага(ТекСтрока);
	
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // ОбходВерхнихУровней()

// Устанавливает пометку в подчиненных элементах дерева
//
Процедура ОбходНижнихУровней(ТекСтрока)
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		Строка.Пометка = ТекСтрока.Пометка;
		ОбходНижнихУровней(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОбходНижнихУровней()

// Устанавливает пометки в подчиненных строках и устанавливает пометку
// в текущей строке в зависимости от состава пометок в подчиненных строках.
// При значении параметра ИнтерактивнаяУстановкаПометок равным Истина
// возможна установка флага для строки с незаполненным источником.
//
// Параметры:
//  ТекСтрока                     - строка дерева значений
//  ИнтерактивнаяУстановкаПометок - флаг интерактивной установки пометки
// 
Процедура УстановитьПометкиВДереве(ТекСтрока) Экспорт

	ОбходНижнихУровней (ТекСтрока);
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиВДереве()

// Процедура установки пометок в дереве
//
Процедура УстановитьПометки(Дерево, Пометка) Экспорт
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка.Пометка = Пометка;
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПометки(Строка, Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометки()

// Процедура пересчитать значение пометок (установить третье состояние
// при изменении количества показателей)
//
Процедура ПересчетПометок(Дерево) Экспорт
	
	Для Каждого Узел Из Дерево.Строки Цикл
		
		Если Узел.Строки.Количество() = 0 Тогда
			Продолжить; // В оконечных элементах ничего не изменяем
		Иначе
			ПересчетПометок(Узел);
			Узел.Пометка = ОпределитьЗначениеФлага(Узел);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчетПометок()

// процедура все конечные строки дерева помечает так же как и их предка
Процедура ПометитьКонечныеСтрокиДерева(УзелДерева)
	
	Для Каждого СтрокаКонечногоДерева Из УзелДерева.Строки Цикл
		
		Если (НЕ СтрокаКонечногоДерева.ЭтоГруппа) И (СтрокаКонечногоДерева.Строки.Количество() = 0) Тогда
			
			СтрокаКонечногоДерева.Пометка = УзелДерева.Пометка;
			Если СтрокаКонечногоДерева.Пометка > 0 Тогда
				КоличествоЗагружаемыхОбъектов = КоличествоЗагружаемыхОбъектов + 1;			
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Процедура помечает загружаемые в справочник объекты классификатора
//
Процедура УстановитьПометкиВПолномДереве(Строки)
	
	Для Каждого ТекСтрока из Строки Цикл
		СтрокаПолногоДерева = ДеревоПолное.Строки.Найти(ТекСтрока.Код,"Код",Истина);
		СтрокаПолногоДерева.Пометка = ТекСтрока.Пометка;
		Если СтрокаПолногоДерева.Пометка > 0 Тогда
			КоличествоЗагружаемыхОбъектов = КоличествоЗагружаемыхОбъектов + 1;
		КонецЕсли;
		
		// надо для всех строк полного дерева сделать такую же отметку как у предка, при условии того, что это конечные строки дерева
		ПометитьКонечныеСтрокиДерева(СтрокаПолногоДерева);
       		
		УстановитьПометкиВПолномДереве(ТекСтрока.Строки);
	КонецЦикла;

КонецПроцедуры
 
// Процедура добавления реквизитов справочника в дерево значений
//
Процедура ДобавитьВДерево(Дерево,Ссылка,ЭтоГруппа,Родитель,Код,Наименование,КонтрольноеЧисло,НаименованиеГруппировки,АмортизационнаяГруппа,ХранитьРеквизиты = Истина);

	СтрокаРодителя = Дерево.Строки.Найти(Строка(Родитель.Ссылка.УникальныйИдентификатор()),"Идентификатор",Истина);
	Если СтрокаРодителя = Неопределено тогда
		ТекСтрока = Дерево.Строки.Добавить();
	Иначе 
		ТекСтрока = СтрокаРодителя.Строки.Добавить();
	КонецЕсли;
	ТекСтрока.Наименование	= Наименование;
	ТекСтрока.Представление = Строка(Код) +"  "+НаименованиеГруппировки;
	ТекСтрока.Код 			= Код;
	ТекСтрока.Идентификатор = Строка(Ссылка.УникальныйИдентификатор());
	ТекСтрока.Пометка 		= Ложь;
	Если ХранитьРеквизиты Тогда
		ТекСтрока.ЭтоГруппа 			  = ЭтоГруппа;
		ТекСтрока.КонтрольноеЧисло	      = КонтрольноеЧисло;
		ТекСтрока.НаименованиеГруппировки = НаименованиеГруппировки;
		ТекСтрока.АмортизационнаяГруппа	  = АмортизационнаяГруппа;
	КонецЕсли;
	
КонецПроцедуры


// Процедура загрузки данных из XML
//
Процедура ЗагрузитьГруппы()
	
	ФайлЧтение =  Новый ЧтениеXML;
	Если ПустаяСтрока(ФайлДанных) тогда
		Сообщить("Не выбран файл данных справочника ОКОФ");
		Возврат;
	КонецЕсли;
	Попытка 
		ФайлЧтение.ОткрытьФайл(ФайлДанных);
	Исключение
		Сообщить("Ошибка при открытии файла данных справочника ОКОФ");
		Возврат;
	КонецПопытки;
	
	ДеревоГрупп.Строки.Очистить();
	ДеревоПолное.Строки.Очистить();
	
	Попытка
		ФайлЧтение.Прочитать();
	Исключение
		Сообщить("Файла данных справочника ОКОФ поврежден");
		Возврат;
	КонецПопытки;
	
	КоличествоОбъектовXML = 0;
	Если ФайлЧтение.ПрочитатьАтрибут()	тогда
		КоличествоОбъектовXML = Число(ФайлЧтение.ПолучитьАтрибут("КоличествоЭлементов"));
	КонецЕсли;
	ФайлЧтение.Прочитать();
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаПрогрессора.Значение = 0;
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОбъектовXML;
	ФормаПрогрессора.КомментарийОбработкиДанных  = "Чтение файла данных";
	ФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка классификатора ОКОФ";
	ФормаПрогрессора.Открыть();

    Сч = 0;
	
	Пока ВозможностьЧтенияXML(ФайлЧтение) Цикл
		ОбработкаПрерыванияПользователя();
		ТипXML = ПолучитьXMLТип(ФайлЧтение);
		Если ТипXML.ИмяТипа = "CatalogObject.ОбщероссийскийКлассификаторОсновныхФондов" тогда
			// Чтение следующего узла
			ФайлЧтение.Прочитать();
			Ссылка 	  = ПрочитатьXML(ФайлЧтение, Тип("СправочникСсылка.ОбщероссийскийКлассификаторОсновныхФондов"));
			ЭтоГруппа = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			ПометкаУдаления = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			Родитель 		= ПрочитатьXML(ФайлЧтение, Тип("СправочникСсылка.ОбщероссийскийКлассификаторОсновныхФондов"));
			Код 		    = ПрочитатьXML(ФайлЧтение, Тип("Строка"));
			Наименование 	= ПрочитатьXML(ФайлЧтение, Тип("Строка"));
			КонтрольноеЧисло	    = ПрочитатьXML(ФайлЧтение, Тип("Число"));
			НаименованиеГруппировки = ПрочитатьXML(ФайлЧтение, Тип("Строка"));
			АмортизационнаяГруппа	= ПрочитатьXML(ФайлЧтение, Тип("ПеречислениеСсылка.АмортизационныеГруппы"));
	                                                        
			ДобавитьВДерево(ДеревоПолное,Ссылка,ЭтоГруппа,Родитель,Код,Наименование,
							КонтрольноеЧисло,НаименованиеГруппировки,АмортизационнаяГруппа);
			Если ЭтоГруппа тогда
				ДобавитьВДерево(ДеревоГрупп,Ссылка,ЭтоГруппа,Родитель,Код,Наименование,
				КонтрольноеЧисло,НаименованиеГруппировки,АмортизационнаяГруппа,Ложь);
			КонецЕсли;
			
			// Проверяем, что текущим узлом является КонецЭлемента
			Если ФайлЧтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
				ВызватьИсключение "Ошибка чтения XML";
			КонецЕсли;
			// Чтение следующего узла для завершение чтения элемента
			ФайлЧтение.Прочитать();
		    Сч = Сч+1;
			ФормаПрогрессора.Значение = Сч;
			ФормаПрогрессора.КомментарийЗначения = "Обрабатывается " 
		 												   + Сч + " объект из " 
														   + КоличествоОбъектовXML;
		Иначе	
		    Сообщить("Файл данных не является справочником ОКОФ");
			ФормаПрогрессора.Закрыть();
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	ДеревоГрупп.Строки.Сортировать("Код", Истина);
	ФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура загрузки данных из дерева в справочник
//
Процедура ЗагрузитьСтроки(Строки)
	
	// Ищем родителя
	Если Строки.Родитель <> Неопределено Тогда
		Родитель = Справочники.ОбщероссийскийКлассификаторОсновныхФондов.НайтиПоКоду(Строки.Родитель.Код);
		Если Не Родитель.Пустая() тогда
			// наш справочник с иерархией групп и элементов
			// подчинение элементу не предусмотрено
			Если Не Родитель.ЭтоГруппа тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Для НомСтроки = 0 по Строки.Количество()-1 Цикл
		ТекСтрока = Строки.Получить(НомСтроки);
		Если ТекСтрока.Пометка =  Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Пометка > 0 Тогда
			// Сначала поищем по коду
			Ссылка  = Справочники.ОбщероссийскийКлассификаторОсновныхФондов.НайтиПоКоду(ТекСтрока.Код);
			Если Ссылка.Пустая() тогда 
				Если ТекСтрока.ЭтоГруппа Тогда
					Объект = Справочники.ОбщероссийскийКлассификаторОсновныхФондов.СоздатьГруппу();
					Объект.Код = ТекСтрока.Код; 
				Иначе
					Объект = Справочники.ОбщероссийскийКлассификаторОсновныхФондов.СоздатьЭлемент();
					Объект.Код = ТекСтрока.Код;
				КонецЕсли;				
			ИначеЕсли Ссылка.ЭтоГруппа = ТекСтрока.ЭтоГруппа тогда
				// обновляем то,что уже хранится
				Если ЭлементыФормы.флПереписыватьОбъекты.Значение тогда 
    				Объект = Ссылка.ПолучитьОбъект();
				КонецЕсли;				
			Иначе
				// хранится элемент а у нас группа
				// ничего не делаем
				Сообщить("Элемент с кодом " + ТекСтрока.Код + " невозможно обновить!!!");
				Продолжить;
			КонецЕсли;// Если Ссылка.Пустая() тогда 
			
			ФормаПрогрессора.Значение = НомерЗагружаемогоОбъекта;
			ФормаПрогрессора.КомментарийЗначения = "Обрабатывается " 
														+ НомерЗагружаемогоОбъекта  
													    + " объект из " 
													    + КоличествоЗагружаемыхОбъектов;
			НомерЗагружаемогоОбъекта = НомерЗагружаемогоОбъекта + 1;
			
			Если Объект<> Неопределено Тогда
				// обновляем все остальные реквизиты
				Объект.Родитель 			   = Родитель;
				Объект.Наименование 		   = ТекСтрока.Наименование;
				Объект.КонтрольноеЧисло	       = ТекСтрока.КонтрольноеЧисло;
				Объект.НаименованиеГруппировки = ТекСтрока.НаименованиеГруппировки;
				Объект.АмортизационнаяГруппа   = ТекСтрока.АмортизационнаяГруппа;
			
				Попытка 
					Объект.Записать();
					Состояние("Записан элемент " +ТекСтрока.Наименование);
				Исключение
					Сообщить("Ошибка при записи элемента с кодом " + ТекСтрока.Код + " !!!");
				КонецПопытки;
				
			КонецЕсли;//Если Объект<> Неопределено Тогда

			ОбработкаПрерыванияПользователя();
			ЗагрузитьСтроки(ТекСтрока.Строки);
			
		КонецЕсли;//Если ТекСтрока.Пометка >0 Тогда
	КонецЦикла;	//Для НомСтроки = 0 по Строки.Количество()-1 Цикл

	
КонецПроцедуры

// Открывает файл данных во внешнем приложении
//
// Параметры:
//  
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);

КонецПроцедуры












