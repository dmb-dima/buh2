Перем ЭтоСчетКонтрагента;
Перем АвтоНаименование;

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция СформироватьАвтоНаименование()
	
	ЭлементыФормы.Наименование.СписокВыбора.Очистить();
	
	СтрокаНаименования = Лев(ВидСчета 
	                   + ?(ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета, " (" + ВалютаДенежныхСредств + ")", "")
	                   + ?(НЕ Банк.Пустая(), " в " + Банк, ""), 
					   100);
	
	ЭлементыФормы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = Лев(НомерСчета 
	                   + ?(НЕ Банк.Пустая(), ", " + Банк, ""), 
					   100);
	ЭлементыФормы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	СтрокаНаименования = Лев(
	                     ?(НЕ Банк.Пустая(),""+ Банк, "")
					   + " ("+ ВидСчета 
	                   + ?(ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета, ", " + ВалютаДенежныхСредств , "")
					   +")", 
					   100);
	ЭлементыФормы.Наименование.СписокВыбора.Добавить(СтрокаНаименования);
	
	Возврат СтрокаНаименования;

КонецФункции // СформироватьАвтоНаименование()

Процедура ЗаполнитьНовыйПоСпискуОтборов()

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСправочника = Метаданные().Реквизиты;
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСправочника.Найти(ЭлементОтбора.Имя) = Неопределено 
			И ЭлементОтбора.Имя <> "Владелец" 
			И ЭлементОтбора.Имя <> "Родитель" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение[0].Значение;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет реквизиты нового элемента справочника
//
Процедура ЗаполнитьНовыйЭлемент() Экспорт
	
	ЗаполнитьНовыйПоСпискуОтборов();

	Если НЕ ЗначениеЗаполнено(ВидСчета) Тогда
		ВидСчета = ЭлементыФормы.ВидСчета.СписокВыбора[0];
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ВалютаДенежныхСредств) Тогда
		ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	Наименование = СформироватьАвтоНаименование();
	
КонецПроцедуры // ЗаполнитьНовыйЭлемент()

Процедура УстановитьДоступностьСУчетомОтбора()

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения <> ВидСравнения.Равно Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы = ЭлементыФормы.Найти(ЭлементОтбора.Имя);
		
		ЕстьЭлементФормы = ЭлементФормы <> Неопределено;
								   
		Если ЕстьЭлементФормы Тогда
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеВвода") Тогда
				ЭлементФормы.ТолькоПросмотр = Истина;
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("Флажок") Тогда
				ЭлементФормы.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьТекстОНесоответствииОтбору(ТекстСообщения, ЭлементОтбора)

	ТекстСообщения = ТекстСообщения
	                        + ЭлементОтбора.Представление      + " "  
							+ НРег(ЭлементОтбора.ВидСравнения) + " """ 
							+ Строка(ЭлементОтбора.Значение)   + """" + Символы.ПС;
	
КонецПроцедуры // ДополнитьТекстОНесоответствииОтбору()

Функция ПроверитьСоответствиеЭлементаОтбору(ТекстСообщенияОбОшибках = "")

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементСоответствуетОтбору = Истина;
	ТекстСообщенияОбОшибках = "";
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		
			Если ЭтотОбъект[ЭлементОтбора.Имя] <> ЭлементОтбора.Значение Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		
			Если ЭлементОтбора.Значение.НайтиПоЗначению(ЭтотОбъект[ЭлементОтбора.Имя]) = Неопределено Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
			Если ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		
			Если ЭлементОтбора.Значение.НайтиПоЗначению(ЭтотОбъект[ЭлементОтбора.Имя]) <> Неопределено Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ ЭлементСоответствуетОтбору Тогда
		ТекстСообщенияОбОшибках = "Должны выполняться следующие условия:" + Символы.ПС
		                        + ТекстСообщенияОбОшибках
		                        + "Элемент не может быть записан!"
	КонецЕсли;
	
	Возврат ЭлементСоответствуетОтбору;

КонецФункции

// Формирует текст для реквизита "ТекстКорреспондента"
 //
 // Параметры:
 //  Нет.
 //
Функция СформироватьТекстКорреспондента()

	СведенияОВладельцеСчета = УправлениеКонтактнойИнформацией.СведенияОЮрФизЛице(Владелец);
	СтрКорреспондента = ФормированиеПечатныхФорм.ОписаниеОрганизации(СведенияОВладельцеСчета, "НаименованиеДляПечатныхФорм,", Ложь);

	Если НЕ БанкДляРасчетов.Пустая() Тогда
		СтрКорреспондента = СтрКорреспондента + " р/с " + НомерСчета
			+ " в " + Банк + " " + Банк.Город;
	КонецЕсли;	
	
	Возврат СтрКорреспондента;

КонецФункции // СформироватьТекстКорреспондента()

Процедура ОбновитьНадписи()
	

	ПолеВводаТекстаКорреспондента = ?(ЭтоСчетКонтрагента, ЭлементыФормы.ТекстПолучателя, ЭлементыФормы.ТекстПлательщика);
	Если ПустаяСтрока(ПолеВводаТекстаКорреспондента.Данные) Тогда
		ПолеВводаТекстаКорреспондента.Значение = СформироватьТекстКорреспондента();
	КонецЕсли;
	
	ЭлементыФормы.НадписьБанк.Заголовок            = ?(Банк.Пустая(), "", Банк.Наименование + " " + Банк.Город);
	ЭлементыФормы.НадписьБанкДляРасчетов.Заголовок = ?(БанкДляРасчетов.Пустая(), "", БанкДляРасчетов.Наименование + " " + БанкДляРасчетов.Город);
	
КонецПроцедуры

// Управляет видимостью некоторых элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	Если ЭтоВалютныйСчет Тогда
		ЭлементыФормы.НомерСчета.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.НомерСчета.ОтметкаНезаполненного     = Ложь;
	Иначе
		ЭлементыФормы.НомерСчета.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	Если ЭтоСчетКонтрагента Тогда
		
		ЭлементыФормы.ПанельРеквизитовСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитовСчетов.Страницы.РеквизитыСчетаКонтрагента;
		
		ПолеВводаТекстаКорреспондента = ЭлементыФормы.ТекстПолучателя;
		
	Иначе
		
		ЭлементыФормы.ПанельРеквизитовСчетов.ТекущаяСтраница = ЭлементыФормы.ПанельРеквизитовСчетов.Страницы.РеквизитыСчетаОрганизации;
		ЭлементыФормы.НомерИДатаРазрешения.Видимость         = ЭтоВалютныйСчет;
		ЭлементыФормы.НадписьНомерИДатаРазрешения.Видимость  = ЭтоВалютныйСчет;
		
		ПолеВводаТекстаКорреспондента = ЭлементыФормы.ТекстПлательщика;
		
	КонецЕсли;
	
	Если ПрямыеРасчеты Тогда
		ЭлементыФормы.ПанельБанкаДляРасчетов.ТекущаяСтраница = ЭлементыФормы.ПанельБанкаДляРасчетов.Страницы.ПрямыеРасчеты;
	Иначе
		ЭлементыФормы.ПанельБанкаДляРасчетов.ТекущаяСтраница = ЭлементыФормы.ПанельБанкаДляРасчетов.Страницы.НепрямыеРасчеты;
	КонецЕсли;
	
	Если РедактироватьТекстКорреспондента Тогда
		ПолеВводаТекстаКорреспондента.Данные             = "ТекстКорреспондента";
		ПолеВводаТекстаКорреспондента.ЦветТекстаПоля     = ЦветаСтиля.ЦветТекстаПоля;
		ПолеВводаТекстаКорреспондента.ЦветФонаПоля       = ЦветаСтиля.ЦветФонаПоля;
		ПолеВводаТекстаКорреспондента.ТолькоПросмотр     = Ложь;
		ПолеВводаТекстаКорреспондента.ПропускатьПриВводе = Ложь;
	Иначе
		ПолеВводаТекстаКорреспондента.Данные             = "";
		ПолеВводаТекстаКорреспондента.ЦветТекстаПоля     = ЦветаСтиля.ТекстИнформационнойНадписи;
		ПолеВводаТекстаКорреспондента.ЦветФонаПоля       = ЦветаСтиля.ЦветФонаФормы;
		ПолеВводаТекстаКорреспондента.ТолькоПросмотр     = Истина;
		ПолеВводаТекстаКорреспондента.ПропускатьПриВводе = Истина;
	КонецЕсли;
	
	УстановитьДоступностьСУчетомОтбора();
	
	ОбновитьНадписи();
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
      

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Владелец) Тогда
	
		Предупреждение("Не указан владелец банковского счета!");
		Отказ = Истина;
	
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		ЗаполнитьНовыйЭлемент();
		Если ПараметрОбъектКопирования = Неопределено Тогда
			ПрямыеРасчеты = Истина;
		Иначе
			ПрямыеРасчеты = НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования.БанкДляРасчетов);
		КонецЕсли;
	Иначе
		ПрямыеРасчеты = НЕ ЗначениеЗаполнено(БанкДляРасчетов);
		РедактироватьТекстКорреспондента = НЕ ПустаяСтрока(ТекстКорреспондента);
	КонецЕсли;

	ЭтоСчетКонтрагента = ТипЗнч(Владелец) = Тип("СправочникСсылка.Контрагенты");
	ЭтоВалютныйСчет = ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета;
	
	БИКБанка      = СокрП(Банк.Код);
	КоррсчетБанка = СокрП(Банк.КоррСчет);
	
	БИКБанкаДляРасчетов      = СокрП(БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(БанкДляРасчетов.КоррСчет);

	УстановитьВидимость();
	
	Заголовок = Заголовок + " (" + Строка(Владелец) + ")";
	
	АвтоНаименование = СформироватьАвтоНаименование();
	
	ЗакрыватьПриВыборе = Ложь;
	
КонецПроцедуры
 
Процедура ПередЗаписью(Отказ)
	Перем ТекстСообщенияОбОшибках;

	ЭлементСоответствуетОтбору = ПроверитьСоответствиеЭлементаОтбору(ТекстСообщенияОбОшибках);
	Отказ = НЕ ЭлементСоответствуетОтбору;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибках);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
	
		ОповеститьОВыборе(Ссылка);
	
	КонецЕсли; 
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ЭЛЕМЕНТОВ

 // Обработчик события "ПриИзменении" реквизита "НомерСчета"
 //
Процедура НомерСчетаПриИзменении(Элемент)
	
	НомерСчета = СокрЛП(НомерСчета);
	
	ТекстОшибки = "";
	Если НЕ ПроверитьКорректностьНомераСчета(НомерСчета, ТекстОшибки) Тогда
		Предупреждение(ТекстОшибки);
	КонецЕсли;
	
	ОбновитьНадписи();
	
КонецПроцедуры

 // Обработчик события "ПриИзменении" реквизита "ВалютаДенежныхСредств"
 //
Процедура ВалютаДенежныхСредствПриИзменении(Элемент)
	
	Если ВалютаДенежныхСредств.Пустая() Тогда
		ВалютаДенежныхСредств = мВалютаРегламентированногоУчета;
	КонецЕсли;
	
	ЭтоВалютныйСчет = ВалютаДенежныхСредств <> мВалютаРегламентированногоУчета;
	
	Если Наименование = АвтоНаименование Тогда
		Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	
	УстановитьВидимость();
	ОбновитьНадписи();

КонецПроцедуры

Процедура РедактироватьТекстКорреспондентаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если РедактироватьТекстКорреспондента Тогда
		ТекстКорреспондента = СформироватьТекстКорреспондента();
	Иначе
		ТекстКорреспондента = "";
	КонецЕсли;
	
	ОбновитьНадписи();
	
КонецПроцедуры

Процедура ВидСчетаПриИзменении(Элемент)
	
	Если Наименование = АвтоНаименование Тогда
		Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	
КонецПроцедуры

Процедура ВсегдаУказыватьКПППриИзменении(Элемент)
	
	ОбновитьНадписи();
	
КонецПроцедуры

Процедура БИКБанкаПриИзменении(Элемент)
	
	БИКБанка = СокрЛП(БИКБанка);
	
	НовыйБанк = НайтиБанкВКлассификаторе(БИКБанка, "Код",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		Банк = НовыйБанк;
	КонецЕсли;
	
	БИКБанка      = СокрЛП(Банк.Код);
	КоррСчетБанка = СокрП(Банк.КоррСчет);
		
	УстановитьНаименованиеСчета();
	
	УстановитьВидимость();

КонецПроцедуры

Процедура БИКБанкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура БИКБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Банк = ВыбранноеЗначение;
	
	БИКБанка      = СокрП(Банк.Код);
	КоррсчетБанка = СокрП(Банк.КоррСчет);
	
	УстановитьНаименованиеСчета();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоррСчетБанкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = Банк;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КоррСчетБанкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Банк = ВыбранноеЗначение;
	
	БИКБанка      = СокрП(Банк.Код);
	КоррсчетБанка = СокрП(Банк.КоррСчет);
	
	УстановитьНаименованиеСчета();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоррСчетБанкаПриИзменении(Элемент)
	
	КоррСчетБанка = СокрЛП(КоррСчетБанка);
	
	НовыйБанк = НайтиБанкВКлассификаторе(КоррСчетБанка, "КоррСчет",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		Банк = НовыйБанк;
	КонецЕсли;
	
	БИКБанка      = СокрП(Банк.Код);
	КоррсчетБанка = СокрП(Банк.КоррСчет);
		
	УстановитьНаименованиеСчета();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура БИКБанкаДляРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = БанкДляРасчетов;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура БИКБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БанкДляРасчетов = ВыбранноеЗначение;
	
	БИКБанкаДляРасчетов      = СокрП(БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(БанкДляРасчетов.КоррСчет);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура БИКБанкаДляРасчетовПриИзменении(Элемент)
	
	БИКБанкаДляРасчетов = СокрЛП(БИКБанкаДляРасчетов);
	
	НовыйБанк = НайтиБанкВКлассификаторе(БИКБанкаДляРасчетов, "Код",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		БанкДляРасчетов = НовыйБанк;
	КонецЕсли;
	
	БИКБанкаДляРасчетов      = СокрП(БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(БанкДляРасчетов.КоррСчет);
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоррСчетБанкаДляРасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.Банки.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.НачальноеЗначениеВыбора = БанкДляРасчетов;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура КоррСчетБанкаДляРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	БанкДляРасчетов = ВыбранноеЗначение;
	
	БИКБанкаДляРасчетов      = СокрП(БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(БанкДляРасчетов.КоррСчет);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КоррСчетБанкаДляРасчетовПриИзменении(Элемент)
	
	КоррсчетБанкаДляРасчетов = СокрЛП(КоррсчетБанкаДляРасчетов);
	
	НовыйБанк = НайтиБанкВКлассификаторе(КоррсчетБанкаДляРасчетов, "КоррСчет",Элемент);
	Если НовыйБанк<>Справочники.Банки.ПустаяСсылка() Тогда
		БанкДляРасчетов = НовыйБанк;
	КонецЕсли;
	
	БИКБанкаДляРасчетов      = СокрП(БанкДляРасчетов.Код);
	КоррсчетБанкаДляРасчетов = СокрП(БанкДляРасчетов.КоррСчет);
		
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПрямыеРасчетыПриИзменении(Элемент)
	
	Если ПрямыеРасчеты Тогда
		БанкДляРасчетов = Справочники.Банки.ПустаяСсылка();
		БИКБанкаДляРасчетов      = "";
		КоррсчетБанкаДляРасчетов = "";
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Функция НайтиБанкВКлассификаторе(ТекстДляПоиска, ОбластьПоиска = "Код",Элемент=неопределено)
	
	БанкСсылка = Справочники.Банки.ПустаяСсылка();
	Если ПустаяСтрока(ТекстДляПоиска) Тогда
		Возврат БанкСсылка;
	КонецЕсли;
	
	ОбластьПоиска = НРег(ОбластьПоиска);
	СписокНайденныхБанков = новый СписокЗначений;
	Если ОбластьПоиска = "код" Тогда
		Отбор = Новый Структура("Код");
		Отбор.Код = ТекстДляПоиска;
	ИначеЕсли ОбластьПоиска = "коррсчет" Тогда
		Отбор = Новый Структура("КоррСчет");
		Отбор.КоррСчет = ТекстДляПоиска;
	КонецЕсли;
	Выборка = Справочники.Банки.Выбрать(,,Отбор,"Код Возр");
	Пока Выборка.Следующий() и Не Выборка.ЭтоГруппа Цикл
		СписокНайденныхБанков.Добавить(Выборка.Ссылка); 
	КонецЦикла;
	
	НетБанкаВКлассификаторе = СписокНайденныхБанков.Количество()=0;
	
	Если НетБанкаВКлассификаторе Тогда
		
		ТекстОшибки = "";

		Если ОбластьПоиска = "код" Тогда
			
			ТекстДляПоискаВведенКорректно = ПроверитьКорректностьБИК(ТекстДляПоиска, ТекстОшибки);
			Если ТекстДляПоискаВведенКорректно Тогда
				
				ТекстВопроса = "Банк с БИК " + ТекстДляПоиска + " не найден в справочнике банков.
					|Добавить новый банк?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтруктураПараметров = Новый Структура("Код", ТекстДляПоиска);
					ДобавитьНовыйБанк(СтруктураПараметров);
					БанкСсылка = Справочники.Банки.НайтиПоКоду(СтруктураПараметров.Код);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе // ОбластьПоиска = "КоррСчет"
			
			ТекстДляПоискаВведенКорректно = ПроверитьКорректностьКоррсчета(ТекстДляПоиска, ТекстОшибки);
			Если ТекстДляПоискаВведенКорректно Тогда
				
				ТекстВопроса = "Банк с корр.счетом " + ТекстДляПоиска + " не найден в справочнике банков.
					|Добавить новый банк?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					СтруктураПараметров = Новый Структура("КоррСчет", ТекстДляПоиска);
					ДобавитьНовыйБанк(СтруктураПараметров);
					БанкСсылка = Справочники.Банки.НайтиПоРеквизиту("КоррСчет", СтруктураПараметров.КоррСчет);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ТекстДляПоискаВведенКорректно Тогда
			БанкСсылка = Справочники.Банки.ПустаяСсылка();
			Предупреждение(ТекстОшибки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НетБанкаВКлассификаторе Тогда
		Возврат БанкСсылка;
	ИначеЕсли СписокНайденныхБанков.Количество()=1 Тогда
		Возврат СписокНайденныхБанков[0].Значение;
	Иначе
		ВыбранныйБанк = ВыбратьИзСписка(СписокНайденныхБанков,Элемент,);
		Если ВыбранныйБанк<>неопределено Тогда
			Возврат ВыбранныйБанк.Значение;
		Иначе
			Возврат БанкСсылка;
		КонецЕсли;
	КонецЕсли;


КонецФункции

Процедура УстановитьНаименованиеСчета()
	
	Если ПустаяСтрока(Наименование) ИЛИ Наименование = АвтоНаименование Тогда
		Наименование = СформироватьАвтоНаименование();
	КонецЕсли;
	АвтоНаименование = СформироватьАвтоНаименование();
	
КонецПроцедуры // УстановитьНаименование()

Процедура ДобавитьНовыйБанк(СтруктураПараметров)

	ФормаБанка = Справочники.Банки.ПолучитьФормуНовогоЭлемента();
	ЗаполнитьЗначенияСвойств(ФормаБанка, СтруктураПараметров);
	ФормаБанка.ОткрытьМодально();

КонецПроцедуры // ДобавитьНовыйБанк()

Процедура НадписьБанкНажатие(Элемент)
	
	ФормаБанка = Банк.ПолучитьФорму( , ЭлементыФормы.БИКБанка);
	ФормаБанка.Открыть();

КонецПроцедуры

Процедура НадписьБанкДляРасчетовНажатие(Элемент)
	
	ФормаБанка = БанкДляРасчетов.ПолучитьФорму( , ЭлементыФормы.БИКБанкаДляРасчетов);
	ФормаБанка.Открыть();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписанЭлементБанк" Тогда
		Если НЕ Банк.Пустая() Тогда
			ЭлементыФормы.НадписьБанк.Заголовок            = Банк.Наименование + " " + Банк.Город;
			БИКБанка      = СокрЛП(Банк.Код);
			КоррСчетБанка = СокрП(Банк.КоррСчет);
		КонецЕсли;
		
		Если НЕ БанкДляРасчетов.Пустая() Тогда
			ЭлементыФормы.НадписьБанкДляРасчетов.Заголовок = БанкДляРасчетов.Наименование + " " + БанкДляРасчетов.Город;
			БИКБанкаДляРасчетов      = СокрП(БанкДляРасчетов.Код);
			КоррсчетБанкаДляРасчетов = СокрП(БанкДляРасчетов.КоррСчет);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

СписокВидСчета = ЭлементыФормы.ВидСчета.СписокВыбора;
СписокВидСчета.Добавить("Расчетный");
СписокВидСчета.Добавить("Депозитный");
СписокВидСчета.Добавить("Ссудный");
СписокВидСчета.Добавить("Иной");
