
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьДеревоПараметров() Экспорт

	Параметры.Строки.Очистить();

	СтрокаПараметров = Параметры.Строки.Добавить();
	СтрокаПараметров.Параметр = "Параметры";

	ТабОсн = ВладелецФормы.ЭлементыФормы["Хозрасчетный"];
	Если ТипыКолонки = Неопределено Тогда
		Попытка
			ТипыКолонки  = ВладелецФормы.ПолучитьТипыКолонки(ТабОсн);
		Исключение
		КонецПопытки;
	КонецЕсли;

	Если ОтборПоТипу Тогда

		МассивПараметров = ВладелецФормы.ПолучитьМассивПараметров(ТипыКолонки);
		Для каждого Парам Из МассивПараметров Цикл
			Стр = СтрокаПараметров.Строки.Добавить();
			Стр.Параметр = СтрЗаменить(Парам, "Параметры.", "");
			Стр.Формула  = Парам;
		КонецЦикла;

	Иначе

		Для каждого Парам Из ВладелецФормы.Параметры Цикл
			Стр = СтрокаПараметров.Строки.Добавить();
			Стр.Параметр = Парам.Имя;
			Стр.Формула  = Парам.Имя;
		КонецЦикла;

	КонецЕсли;

	Если СтрокаПараметров.Строки.Количество() = 0 Тогда
		Параметры.Строки.Удалить(0);
	Иначе
		ЭлементыФормы.Параметры.Развернуть(СтрокаПараметров, Истина);
	КонецЕсли;

	Для каждого Пров Из ВладелецФормы.Хозрасчетный Цикл

		ПроводкаНомер  = "Проводка" + (ВладелецФормы.Хозрасчетный.Индекс(Пров)+1);
		СтрокаПроводки = Параметры.Строки.Добавить();
		СтрокаПроводки.Параметр = ПроводкаНомер;

		Для каждого РеквМД Из Метаданные.Справочники["ТиповыеОперации"].ТабличныеЧасти["Хозрасчетный"].Реквизиты Цикл

			Если РеквМД.Имя = "Формулы" Тогда
				Продолжить
			КонецЕсли;

			Если РеквМД.Имя = "Условие" Тогда
				Продолжить
			КонецЕсли;

			Если (Пров = ТекущаяПроводка) И (РеквМД.Имя = ИмяКолонки) Тогда
				Продолжить
			КонецЕсли;

			НаименованиеСубконто = "";
			ТипыПоля = ВладелецФормы.ПолучитьТипыКолонки(ТабОсн, Пров, РеквМД.Имя, НаименованиеСубконто);
			ВремФлаг = Истина;

			Если ОтборПоТипу Тогда

				ВремФлаг = Ложь;

				Если ТипыПоля = Неопределено Тогда
					Продолжить
				КонецЕсли;

				Для каждого Т Из ТипыПоля.Типы() Цикл
					Если ТипыКолонки.СодержитТип(Т) Тогда
						ВремФлаг = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

			Если Не ВремФлаг Тогда
				Продолжить
			КонецЕсли;

			ПолеПроводки = СтрокаПроводки.Строки.Добавить();
			ПолеПроводки.Параметр = РеквМД.Имя + ?((НаименованиеСубконто <> "") И (НаименованиеСубконто <> РеквМД.Имя), " (", "") + НаименованиеСубконто + ?((НаименованиеСубконто <> "") И (НаименованиеСубконто<>РеквМД.Имя), ")", "");
			ПолеПроводки.Формула  = ПроводкаНомер + "." + РеквМД.Имя;

		КонецЦикла;

		Если СтрокаПроводки.Строки.Количество() = 0 Тогда
			Параметры.Строки.Удалить(Параметры.Строки.Количество()-1);
		Иначе
			ЭлементыФормы.Параметры.Развернуть(СтрокаПроводки, Истина);
		КонецЕсли;

	КонецЦикла;
    
КонецПроцедуры // ЗаполнитьДеревоПараметров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Закрывает форму, возвращая выбранный формульный параметр
//
Процедура УстановитьФормулу()

	ВыбЗначение = ЭлементыФормы.Параметры.ТекущиеДанные.Формула;

	Оповестить("ВыборПараметра", ВыбЗначение, "ФормаВыбораПараметра");

	Закрыть(ВыбЗначение);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()

	ТекущийЭлемент = ЭлементыФормы.Параметры;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

Процедура КнопкаВыбратьНажатие(Элемент)

	УстановитьФормулу();

КонецПроцедуры

Процедура ОтборПоТипуПриИзменении(Элемент)

	ЗаполнитьДеревоПараметров();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ТАБЛИЧНОГО ПОЛЯ ПАРАМЕТРЫ

Процедура ПараметрыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	УстановитьФормулу();

КонецПроцедуры

Процедура КоманднаяПанельПараметрыНовыйПараметр(Кнопка)
	
	Парам = ВладелецФормы.НовыйПараметр( , ИмяКолонки);
	
	Закрыть(Парам);
	
КонецПроцедуры

