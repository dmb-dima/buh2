
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СпособыЗаполнения Экспорт; // Массив с описанием возможных способов заполнения полей проводок

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Возвращает формульное выражение указанного поля указанного шаблона проводки
//
// Параметры:
//  СтрокаТЗ       - строка табличного поля Хозрасчетный
//  ИмяКолонки     - имя колонки табличного поля Хозрасчетный, формулу которой нужно
//                   получить
//
// Возвращаемое значение:
//  Строка - формульное выражение указанного поля указанного шаблона проводки
// 
Функция ПолучитьФормулу(Таб = "", СтрокаТЗ="", ИмяКолонки="")

	Если Таб = "" Тогда
		Таб = ЭлементыФормы.Хозрасчетный;
	КонецЕсли;

	Если СтрокаТЗ = "" Тогда
		СтрокаТЗ = Таб.ТекущиеДанные;
	КонецЕсли;

	Если ИмяКолонки = "" Тогда
		ИмяКолонки = Таб.ТекущаяКолонка.Имя;
	КонецЕсли;

	Если СтрокаТЗ = Неопределено Тогда
		Возврат("")
	КонецЕсли;

	СтрЗначение = СокрЛП(СтрокаТЗ.Формулы);
	Если СтрЗначение = "" Тогда
		Возврат("");
	Иначе
		Формулы = ЗначениеИзСтрокиВнутр(СтрЗначение);
	КонецЕсли;

	Возврат СокрЛП(Формулы[СокрЛП(ИмяКолонки)]);

КонецФункции

// Устанавливает формульное выражение указанного поля указанного шаблона проводки
//
// Параметры:
//  СтрокаТЗ       - строка табличного поля Хозрасчетный
//  ИмяКолонки     - имя колонки табличного поля Хозрасчетный, формулу которой нужно
//                   установить
//  СтрФормула     - Строка - формульное выражение, которое необходимо установить
// 
Процедура УстановитьФормулу(СтрокаТЗ="", ИмяКолонки="", СтрФормула="") Экспорт

	Таб = ЭлементыФормы.Хозрасчетный;

	Если СтрокаТЗ = "" Тогда
		СтрокаТЗ = Таб.ТекущиеДанные;
	КонецЕсли;

	Если ИмяКолонки = "" Тогда
		ИмяКолонки = Таб.ТекущаяКолонка.Имя;
	КонецЕсли;

	СтрЗначение = СокрЛП(СтрокаТЗ.Формулы);
	Если СтрЗначение = "" Тогда
		Формулы = Новый Соответствие();
	Иначе
		Формулы = ЗначениеИзСтрокиВнутр(СтрЗначение);
	КонецЕсли;

	Стр = СокрЛП(СтрФормула);

	Если Стр = "" Тогда
		Формулы.Удалить(СокрЛП(ИмяКолонки));
	Иначе

		Формулы[СокрЛП(ИмяКолонки)] = Стр;

		Если ИмяКолонки <> "Алгоритм" Тогда
			СтрокаТЗ[СокрЛП(ИмяКолонки)] = Неопределено;
			ПриИзмененииВТабличномПоле();
		КонецЕсли;

	КонецЕсли;

	СтрокаТЗ.Формулы = ЗначениеВСтрокуВнутр(Формулы);

КонецПроцедуры

//  Возвращает массив параметров соответствующих указанному описанию типов
//
// Параметры:
//  ОписаниеТипов   - объект типа ОписаниеТипов
//
// Возвращаемое значение:
//  Массив параметров соответствующих указанному описанию типов
// 
Функция ПолучитьМассивПараметров(ОписаниеТипов) Экспорт

	МассивПараметров = Новый Массив;

	Если ОписаниеТипов = Неопределено Тогда
		Возврат МассивПараметров
	КонецЕсли;

	Для каждого Парам Из Параметры Цикл

		ОписаниеТиповПараметра = Парам.Тип.Получить();

		Для каждого Т Из ОписаниеТипов.Типы() Цикл

			Если ЗначениеЗаполнено(ОписаниеТиповПараметра) Тогда
				Если ОписаниеТиповПараметра.СодержитТип(Т) Тогда
					МассивПараметров.Добавить(Парам.Имя);
					Прервать;
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	Возврат МассивПараметров;

КонецФункции

// Возвращает объект типа ОписаниеТипов для указанной колонки указанного
// шаблона проводки
//
// Параметры:
//  Таб                  - ссылка на табличное поле шаблонов проводок
//  СтрокаТаблицы        - ссылка на строку табличного поля шаблонов проводок
//  ИмяКолонки           - Строка - имя колонки табличного поля шаблонов проводок
//  НаименованиеСубконто - Строка - после выполнения функции в данную переменную
//                 будет помещено наименование вида субконто, соответсвующего
//                 текущему полю
//
// Возвращаемое значение:
//  Описание типов указанной колонки
// 
Функция ПолучитьТипыКолонки(Таб, СтрокаТаблицы = "", ИмяКолонки = "", НаименованиеСубконто = "") Экспорт

	Если Таб.Значение.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если ИмяКолонки = "" Тогда
		ИмяКолонки = Таб.ТекущаяКолонка.Имя;
	КонецЕсли;

	Если СтрокаТаблицы = "" Тогда
		СтрокаТаблицы = Таб.ТекущиеДанные;
	КонецЕсли;

	Если ИмяКолонки = "НомерСтроки" Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Найти(ИмяКолонки, "Субконто") > 0 Тогда

		Если Найти(ИмяКолонки, "СубконтоДт") > 0 Тогда
			Счет = СтрокаТаблицы.СчетДт;
			НомерСубконто = Число(СтрЗаменить(ИмяКолонки, "СубконтоДт", ""));
		Иначе
			Счет = СтрокаТаблицы.СчетКт;
			НомерСубконто = Число(СтрЗаменить(ИмяКолонки, "СубконтоКт", ""));
		КонецЕсли;

		Если Счет.Пустая() Тогда
			ОписаниеТиповКолонки = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Тип;
		ИначеЕсли НомерСубконто <= Счет.ВидыСубконто.Количество() Тогда
			ВидСубк = Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
			ОписаниеТиповКолонки = ВидСубк.ТипЗначения;
			НаименованиеСубконто = СтрЗаменить(ВидСубк.Наименование, " ", "_");
		Иначе
			ОписаниеТиповКолонки = Неопределено;
		КонецЕсли;

	ИначеЕсли Найти(ИмяКолонки, "Количество") > 0 Тогда

		Счет = СтрокаТаблицы["Счет" + СтрЗаменить(ИмяКолонки, "Количество", "")];
		Если Счет.Пустая() Или Счет.Количественный Тогда
			ОписаниеТиповКолонки = Метаданные().ТабличныеЧасти[Таб.Имя].Реквизиты[ИмяКолонки].Тип;
		Иначе
			ОписаниеТиповКолонки = Неопределено;
		КонецЕсли;

	ИначеЕсли (Найти(ИмяКолонки, "Валюта") > 0) Или (Найти(ИмяКолонки, "ВалютнаяСумма") > 0) Тогда
		
		
		Счет = СтрокаТаблицы["Счет" + СтрЗаменить(СтрЗаменить(ИмяКолонки, "ВалютнаяСумма", ""), "Валюта", "")];
		Если Счет.Пустая() Или Счет.Валютный Тогда
			ОписаниеТиповКолонки = Метаданные().ТабличныеЧасти[Таб.Имя].Реквизиты[ИмяКолонки].Тип;
		Иначе
			ОписаниеТиповКолонки = Неопределено;
		КонецЕсли;
		
	Иначе
		ОписаниеТиповКолонки = Метаданные().ТабличныеЧасти[Таб.Имя].Реквизиты[ИмяКолонки].Тип;
			//ОписаниеТиповКолонки = Метаданные().ТабличныеЧасти[Таб.Имя].Реквизиты[ИмяКолонки].Тип;
			//ОписаниеТиповКолонки = Метаданные().ТабличныеЧасти[Таб.Имя].Реквизиты[ИмяКолонки].Тип;
	КонецЕсли;

	Возврат ОписаниеТиповКолонки;

КонецФункции // ПолучитьТипыКолонки()

// Вызывает диалог настройки нового параметра
//
// Параметры:
//  РедактироватьФормулу - способ редактирования формулы
//  ИмяКолонки           - имя колонки, для которой создаем новый параметр
//
// Возвращаемое значение:
//  Строка вида Параметры.<ИмяНовогоПараметра>
// 
Функция НовыйПараметр(РедактироватьФормулу = 0, ИмяКолонки = "") Экспорт

	Таб = ЭлементыФормы.Хозрасчетный;

	ФормаПараметра = ПолучитьФорму("Параметр", ЭтаФорма);

	Если (Таб.Значение.Количество() > 0) и (Таб.ТекущаяКолонка <> Неопределено) Тогда
		
		Если ИмяКолонки = "" Тогда
			ИмяКолонки = Таб.ТекущаяКолонка.Имя;
		КонецЕсли;

		Если (ИмяКолонки <> "Номер строки") И (ИмяКолонки <> "Условие")  Тогда

			НаименованиеСубконто = "";
			ТипыКолонки          = ПолучитьТипыКолонки(Таб, , ИмяКолонки, НаименованиеСубконто);

			ФормаПараметра.СтрокаТаблицы = Таб.ТекущиеДанные;
			ФормаПараметра.ИмяКолонки    = ИмяКолонки;
			ФормаПараметра.Тип           = ТипыКолонки;
			ФормаПараметра.Значение      = Таб.ТекущиеДанные[ИмяКолонки];
			ФормаПараметра.НеЗапрашивать = Ложь;

			Если СокрЛП(НаименованиеСубконто) <> "" Тогда
				ФормаПараметра.Имя           = НаименованиеСубконто;
				ФормаПараметра.Представление = НаименованиеСубконто;
			Иначе
				ФормаПараметра.Имя           = ИмяКолонки;
				ФормаПараметра.Представление = ИмяКолонки;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Парам = ФормаПараметра.ОткрытьМодально();

	Если Таб.Значение.Количество() = 0 Тогда
		Возврат(Парам)
	КонецЕсли;

	Если Парам = Неопределено Тогда

	ИначеЕсли РедактироватьФормулу = 1 Тогда
		УстановитьФормулу( , , Парам);
	ИначеЕсли РедактироватьФормулу = 2 Тогда
		УстановитьФормулу( , , Формула + " " + Парам);
	КонецЕсли;

	ОсновнойПриАктивизацииЯчейки(ЭлементыФормы.Хозрасчетный);

	Возврат Парам;

КонецФункции // НовыйПараметр()

Процедура КнопкаНовыйПараметрНажатие(Элемент)
	
	НовыйПараметр(2,);
	
КонецПроцедуры

// Проверяет корректность и уникальность имени параметра
//
// Параметры:
//  Имя           - Строка - имя проверяемого параметра
//  Стр           - ссылка на строку табличной части, если проверяется
//                  уже записанный параметр
//
// Возвращаемое значение:
//  Истина          - если имя параметра корректно и уникально
//  Ложь            - если имя параметра не корректно или не уникально
// 
Функция ИмяКорректно(Имя, Стр=Неопределено) Экспорт

	Проверка = Новый Структура();

	Попытка
		Проверка.Вставить(Имя, "111");
	Исключение
		Предупреждение("Не корректно указано имя параметра:  " + Имя + "!", 6);
		Возврат Ложь;
	КонецПопытки;

	Проверка = Новый Структура();
	Проверка.Вставить("Имя", Имя);
	МассивСтрок = Параметры.НайтиСтроки(Проверка);

	Если МассивСтрок.Количество() > 0 Тогда

		Если Стр = Неопределено Тогда
			Предупреждение("Имя параметра не уникально!", 6);
			Возврат Ложь;
		ИначеЕсли (МассивСтрок.Количество() = 1) И (МассивСтрок[0] = Стр) Тогда

		Иначе
			Предупреждение("Имя параметра не уникально!", 6);
			Возврат Ложь;
		КонецЕсли;

	КонецЕсли;

	Возврат Истина;

КонецФункции

// Проверяет является ли формульное выражение параметром или произвольной
// формулой
//
// Параметры:
//  Выражение      - Строка - формульное выражение
//
// Возвращаемое значение:
//  Истина - формульное выражение описывает параметр
//  Ложь   - это произвольная формула
// 
Функция ЭтоПараметр(Выражение)

	Для каждого Парам Из Параметры Цикл

		Если (СокрЛП(Парам.Имя) = Выражение) Или ("Параметры."+СокрЛП(Парам.Имя) = Выражение) Тогда
			Возврат Истина;
		КонецЕсли;

	КонецЦикла;

	Возврат Ложь;

КонецФункции

// Проверяет выбрано ли значение в указанной колонке шаблона проводки
//
// Параметры:
//  ТекСтрока      - ссылка на строку - шаблон проводки
//  ИмяКолонки     - имя колонки шаблона проводки
//  ТипыКолонки    - описание типов колонки
//
// Возвращаемое значение:
//  Истина - значение выбрано
// 
Функция ЗначениеВыбрано(ТекСтрока = "", ИмяКолонки = "", ТипыКолонки = "")

	Таб = ЭлементыФормы.Хозрасчетный;

	Если ТекСтрока = "" Тогда
		ТекСтрока = Таб.ТекущиеДанные;
	КонецЕсли;

	Если ИмяКолонки = "" Тогда
		ИмяКолонки = Таб.ТекущаяКолонка.Имя;
	КонецЕсли;

	Если ТипыКолонки = "" Тогда
		ТипыКолонки = ПолучитьТипыКолонки(Таб, ТекСтрока, ИмяКолонки);
	КонецЕсли;

	Если ТипыКолонки = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТекСтрока[ИмяКолонки] = ТипыКолонки.ПривестиЗначение(Неопределено) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ФормаАлгоритмПередВводом.УстановитьТекст(АлгоритмПередВводом);
	ЭлементыФормы.ФормаАлгоритмПриВводе.УстановитьТекст(АлгоритмПриВводе);
	ЭлементыФормы.ФормаАлгоритмПослеВвода.УстановитьТекст(АлгоритмПослеВвода);
	
	ЭлементыФормы.Формула.Доступность = Ложь;

КонецПроцедуры // ПередОткрытием()

Процедура ПередЗаписью(Отказ)

	АлгоритмПередВводом = ЭлементыФормы.ФормаАлгоритмПередВводом.ПолучитьТекст();
	АлгоритмПриВводе    = ЭлементыФормы.ФормаАлгоритмПриВводе.ПолучитьТекст();
	АлгоритмПослеВвода  = ЭлементыФормы.ФормаАлгоритмПослеВвода.ПолучитьТекст();

	// Проверка правильности настройки параметров

	Проверка = Новый Структура();
	Для каждого Пар Из Параметры Цикл

		Если СокрЛП(Пар.Представление) = "" Тогда
			Предупреждение("Не указано представление одного из параметров.
			               |Запись элемента не выполнена!", 6);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Попытка
			Проверка.Вставить(Пар.Имя, Пар.Значение);
		Исключение
			Предупреждение("Не корректно указано имя параметра:  " + Пар.Имя + "
			               |Запись элемента не выполнена!", 6);
			Отказ = Истина;
			Возврат;
		КонецПопытки;

	КонецЦикла;

КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ Текущей строки

Процедура ФормулаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Таб = ЭлементыФормы.Хозрасчетный;

	ТаблПоле   = Таб;
	ТекКолонка = ТаблПоле.ТекущаяКолонка.Имя;

	Если ТекКолонка = "Условие" Тогда
		ТаблПоле.ТекущиеДанные.Условие = Текст;
	Иначе
		УстановитьФормулу(ТаблПоле.ТекущиеДанные, ТекКолонка, Текст);
	КонецЕсли;

	ПриАктивизацииЯчейкиВТабличномПоле(ТаблПоле);

КонецПроцедуры

Процедура ФормулаНачалоВыбора(Элемент, СтандартнаяОбработка) Экспорт

	Таб = ЭлементыФормы.Хозрасчетный;

	СтандартнаяОбработка = Ложь;
	НаименованиеСубконто = "";
	ТипыКолонки          = ПолучитьТипыКолонки(Таб, , , НаименованиеСубконто);
	ИмяКолонки           = Таб.ТекущаяКолонка.Имя;

	Если ТипыКолонки = Неопределено Тогда
		Возврат
	КонецЕсли;

	ФормаВыбора = ПолучитьФорму("ВыборПараметра", ЭтаФорма);

	Если ИмяКолонки = "Условие" Тогда
		ФормаВыбора.ЭлементыФормы.ОтборПоТипу.Видимость = Ложь;
		ФормаВыбора.ОтборПоТипу = Ложь;
	Иначе
		ФормаВыбора.ЭлементыФормы.ОтборПоТипу.Видимость = Истина;
		ФормаВыбора.ОтборПоТипу = Истина;
	КонецЕсли;

	ФормаВыбора.ИмяКолонки      = ИмяКолонки;
	ФормаВыбора.ТекущаяПроводка = Таб.ТекущаяСтрока;
	ФормаВыбора.ЗаполнитьДеревоПараметров();
	ФормаВыбора.Заголовок = ИмяКолонки + ?((НаименованиеСубконто<>"")И(НаименованиеСубконто<>ИмяКолонки), " (", "") + НаименованиеСубконто + ?((НаименованиеСубконто<>"")И(НаименованиеСубконто<>ИмяКолонки), ")", "") + ".  Выбор параметра";

	Парам = ФормаВыбора.ОткрытьМодально();

	Если Парам = Неопределено Тогда
		Возврат
	КонецЕсли;

	ВыбЗначение = Парам;

	Если ИмяКолонки = "Условие" Тогда
		ЭлементыФормы.Хозрасчетный.ТекущиеДанные.Условие = ВыбЗначение;
	Иначе
		УстановитьФормулу( , , ВыбЗначение);
	КонецЕсли;

	Формула = ВыбЗначение;
	ОсновнойПриАктивизацииЯчейки(ЭлементыФормы.Хозрасчетный);

КонецПроцедуры // ФормулаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ


Процедура ФормулаСодержанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = ПолучитьФорму("ВыборПараметра", ЭтаФорма);
	ФормаВыбора.ОтборПоТипу = Ложь;
	ФормаВыбора.Заголовок   = "Содержание операции. Выбор параметра";
	ФормаВыбора.ЭлементыФормы.ОтборПоТипу.Видимость = Ложь;

	ФормаВыбора.ЗаполнитьДеревоПараметров();

	Парам = ФормаВыбора.ОткрытьМодально();

	Если Парам = Неопределено Тогда
		Возврат
	КонецЕсли;

	ФормулаСодержания = СокрЛП(ФормулаСодержания + " " + Парам);

КонецПроцедуры

Процедура ФормулаСуммыОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФормаВыбора = ПолучитьФорму("ВыборПараметра", ЭтаФорма);
	ФормаВыбора.ОтборПоТипу = Ложь;
	ФормаВыбора.Заголовок   = "Сумма операции. Выбор параметра";
	ФормаВыбора.ЭлементыФормы.ОтборПоТипу.Видимость = Ложь;

	ФормаВыбора.ЗаполнитьДеревоПараметров();

	Парам = ФормаВыбора.ОткрытьМодально();

	Если Парам = Неопределено Тогда
		Возврат
	КонецЕсли;

	ФормулаСуммыОперации = СокрЛП(ФормулаСуммыОперации + " " + Парам);

КонецПроцедуры

Процедура КнопкаВвестиДокументНажатие(Элемент)

	ЗаписатьВФорме();

	ФормаНового = Документы.ОперацияБух.ПолучитьФормуНовогоДокумента();
	ФормаНового.Заполнить(Ссылка);

	ФормаНового.Открыть();

КонецПроцедуры

Процедура НаименованиеПриИзменении(Элемент)

	Если СокрЛП(ФормулаСодержания) = "" Тогда
		ФормулаСодержания = """" + СтрЗаменить(Наименование, """", "'") + """";
	КонецЕсли;

КонецПроцедуры

Процедура ВыбратьСпособ()

	Таб = Хозрасчетный;

	Если Таб.Количество() = 0 Тогда
		Предупреждение("Не выбран шаблон проводки!");
		Возврат;
	КонецЕсли;

	ФормаПомощника = ПолучитьФорму("Помощник", ЭтаФорма, Код);
	ФормаПомощника.ОткрытьМодально();

КонецПроцедуры

Процедура СпособЗаполненияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыбратьСпособ();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ТАБЛИЧНОГО ПОЛЯ ПАРАМЕТРЫ

Процедура ПараметрыПередНачаломДобавления(Элемент, Отказ, Копирование) Экспорт

	Отказ = Истина;

	Если Копирование Тогда

		ФормаПараметра = ПолучитьФорму("Параметр", ЭтаФорма);

		ТекПараметр    = ЭлементыФормы.Параметры.ТекущиеДанные;

		ФормаПараметра.Имя              = ТекПараметр.Имя;
		ФормаПараметра.Представление    = ТекПараметр.Представление;
		ФормаПараметра.Тип              = ?(СокрЛП(ТекПараметр.Тип)<>"", ТекПараметр.Тип.Получить(), Неопределено );
		ФормаПараметра.Значение         = ТекПараметр.Значение;
		ФормаПараметра.НеЗапрашивать    = ТекПараметр.НеЗапрашивать;
		ФормаПараметра.СвязьПоВладельцу = ТекПараметр.СвязьПоВладельцу;
		ФормаПараметра.СвязьПоТипу      = ТекПараметр.СвязьПоТипу;
		ФормаПараметра.НомерСубконто    = ТекПараметр.НомерСубконто;
		ФормаПараметра.Подсказка        = ТекПараметр.Подсказка;
		ФормаПараметра.Обязательный     = ТекПараметр.Обязательный;

		ФормаПараметра.ФормаАлгоритм = ТекПараметр.АлгоритмПриИзменении;

		ФормаПараметра.ОткрытьМодально();

	Иначе
		НовыйПараметр();
		
	КонецЕсли;

КонецПроцедуры

Процедура ПараметрыПередНачаломИзменения(Элемент, Отказ)

	Отказ             = Истина;
	ИмяТекущейКолонки = ЭлементыФормы.Параметры.ТекущаяКолонка.Имя;
	ТекПараметр       = ЭлементыФормы.Параметры.ТекущиеДанные;

	Если ИмяТекущейКолонки = "Обязательный" Тогда
		ТекПараметр.Обязательный = Не ТекПараметр.Обязательный;
		Возврат;
	ИначеЕсли ИмяТекущейКолонки = "НеЗапрашивать" Тогда
		ТекПараметр.НеЗапрашивать = Не ТекПараметр.НеЗапрашивать;
		Возврат;
	КонецЕсли;

	ФормаПараметра = ПолучитьФорму("Параметр", ЭтаФорма, "ааа");

	ФормаПараметра.Параметр         = ТекПараметр;
	ФормаПараметра.Имя              = ТекПараметр.Имя;
	ФормаПараметра.Представление    = ТекПараметр.Представление;
	ФормаПараметра.Тип              = ?(СокрЛП(ТекПараметр.Тип)<>"", ТекПараметр.Тип.Получить(), Неопределено );
	ФормаПараметра.Значение         = ТекПараметр.Значение;
	ФормаПараметра.НеЗапрашивать    = ТекПараметр.НеЗапрашивать;
	ФормаПараметра.СвязьПоВладельцу = ТекПараметр.СвязьПоВладельцу;
	ФормаПараметра.СвязьПоТипу      = ТекПараметр.СвязьПоТипу;
	ФормаПараметра.НомерСубконто    = ТекПараметр.НомерСубконто;
	ФормаПараметра.Подсказка        = ТекПараметр.Подсказка;
	ФормаПараметра.Обязательный     = ТекПараметр.Обязательный;
	
	ФормаПараметра.ФормаАлгоритм = ТекПараметр.АлгоритмПриИзменении;

	ФормаПараметра.ОткрытьМодально();

КонецПроцедуры

Процедура ПараметрыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Параметры.Колонки.Тип.Видимость = Истина Тогда

		Если СокрЛП(ДанныеСтроки.Тип) <> "" Тогда
			ОформлениеСтроки.Ячейки["Тип"].ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки["Тип"].Текст           = Строка(ДанныеСтроки.Тип.Получить());
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ПараметрыПередУдалением(Элемент, Отказ)

	ТекПараметр = ЭлементыФормы.Параметры.ТекущиеДанные;
	ИмяТекущего = ТекПараметр.Имя;
	Массив = Новый Массив;

	Для каждого Пров Из Хозрасчетный Цикл

		Для каждого РеквМД Из Метаданные.Справочники["ТиповыеОперации"].ТабличныеЧасти["Хозрасчетный"].Реквизиты Цикл

			Если РеквМД.Имя = "Формулы" Тогда
				Продолжить
			КонецЕсли;

			Если РеквМД.Имя = "Условие" Тогда
				Продолжить
			КонецЕсли;

			Выражение = ПолучитьФормулу("", Пров, РеквМД.Имя);

			Если Найти(Выражение, ИмяТекущего) > 0 Тогда
				Стр = "Проводка №" + (1+Хозрасчетный.Индекс(Пров)) + " Реквизит: " +  РеквМД.Синоним;
				Массив.Добавить(Стр);
			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

	// ФормулаСодержания
	Если Найти(ФормулаСодержания, ИмяТекущего) > 0 Тогда
		Стр = "Формула содержания операции";
		Массив.Добавить(Стр);
	КонецЕсли;

	// ФормулаСодержания
	Если Найти(ФормулаСуммыОперации, ИмяТекущего) > 0 Тогда
		Стр = "Формула суммы операции";
		Массив.Добавить(Стр);
	КонецЕсли;

	Если Массив.Количество() > 0 Тогда

		Отказ = Истина;
		Стр   = "Параметр не может быть удален, так как он используется в формулах: ";

		Сообщить(Стр);

		Для каждого Зн Из Массив Цикл
			Сообщить(Символы.Таб + Зн);
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ТАБЛИЧНЫХ ПОЛЕЙ

Процедура ПриВыводеСтрокиВТабличномПоле(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Таб = ЭлементыФормы.Хозрасчетный;

	Для каждого Кол Из Элемент.Колонки Цикл

		Если Не Кол.Видимость Тогда
			Продолжить
		КонецЕсли;

		Если Кол.Имя = "Номер строки" Тогда
			Продолжить
		КонецЕсли;

		Если Кол.Имя = "Условие" Тогда
			ОформлениеСтроки.Ячейки[Кол.Имя].ТолькоПросмотр = Истина;
			Продолжить;
		КонецЕсли;

		СтрФормула = ПолучитьФормулу(Таб, ДанныеСтроки, Кол.Имя);

		Если СтрФормула <> "" Тогда
			ОформлениеСтроки.Ячейки[Кол.Имя].ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки[Кол.Имя].Текст           = "<" + СтрФормула + ">";
			ОформлениеСтроки.Ячейки[Кол.Имя].ТолькоПросмотр  = Истина;
		Иначе
			ТипыКолонки = ПолучитьТипыКолонки(Элемент, ДанныеСтроки, Кол.Имя);
			ОформлениеСтроки.Ячейки[Кол.Имя].ТолькоПросмотр = (ТипыКолонки = Неопределено);
		КонецЕсли;

	КонецЦикла;

	
КонецПроцедуры

Процедура ОсновнойПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ПриВыводеСтрокиВТабличномПоле(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры


Процедура ПриВыбореВТабличномПоле(Элемент)

	Таб = Элемент;

	Если Таб.ТекущаяКолонка.Имя = "Условие" Тогда

		ФормаУсловия         = ПолучитьФорму("Условие", ЭтаФорма);
		ФормаУсловия.Условие = Элемент.ТекущиеДанные.Условие;
		Парам                = ФормаУсловия.ОткрытьМодально();

		Если Парам <> Неопределено Тогда
			Элемент.ТекущиеДанные.Условие = Парам;
			Формула = Парам;
		КонецЕсли;

	ИначеЕсли ПолучитьФормулу(,,) <> "" Тогда

		ФормаПомощника = ПолучитьФорму("Помощник", ЭтаФорма, Код);
		ФормаПомощника.ОткрытьМодально();

	КонецЕсли;

КонецПроцедуры

Процедура ОсновнойВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ПриВыбореВТабличномПоле(Элемент);
	
КонецПроцедуры


Процедура ПриИзмененииВТабличномПоле() Экспорт

	// Выполняется также при очистке значения поля

	Таб = ЭлементыФормы.Хозрасчетный;

	СтрокаТЗ   = Таб.ТекущиеДанные;
	ИмяКолонки = Таб.ТекущаяКолонка.Имя;

	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Хозрасчетный.МаксКоличествоСубконто;

	Если (ИмяКолонки = "СчетДт") Или (Найти(ИмяКолонки, "СубконтоДт") > 0) Тогда

		Счет = СтрокаТЗ.СчетДт;

		Для Сч = 1 По МаксКоличествоСубконто Цикл

			Если Счет.Пустая() Тогда

			ИначеЕсли Сч > Счет.ВидыСубконто.Количество() Тогда
				СтрокаТЗ["СубконтоДт" + Сч] = Неопределено;
			Иначе
				ВидСубконто = Счет.ВидыСубконто[Сч-1].ВидСубконто;
				ОписаниеТиповВидаСубконто = ВидСубконто.ТипЗначения;
				СтрокаТЗ["СубконтоДт" + Сч] = ОписаниеТиповВидаСубконто.ПривестиЗначение(СтрокаТЗ["СубконтоДт" + Сч]);
			КонецЕсли;

		КонецЦикла;

	ИначеЕсли (ИмяКолонки = "СчетКт") Или (Найти(ИмяКолонки, "СубконтоКт") > 0) Тогда

		Счет = СтрокаТЗ.СчетКт;

		Для Сч = 1 По МаксКоличествоСубконто Цикл

			Если Счет.Пустая() Тогда

			ИначеЕсли Сч > Счет.ВидыСубконто.Количество() Тогда
				СтрокаТЗ["СубконтоКт" + Сч] = Неопределено;
			Иначе
				ВидСубконто = Счет.ВидыСубконто[Сч-1].ВидСубконто;
				ОписаниеТиповВидаСубконто = ВидСубконто.ТипЗначения;
				СтрокаТЗ["СубконтоКт" + Сч] = ОписаниеТиповВидаСубконто.ПривестиЗначение(СтрокаТЗ["СубконтоКт" + Сч]);
			КонецЕсли;

		КонецЦикла; 

	КонецЕсли;

	ПриАктивизацииЯчейкиВТабличномПоле(Таб);

КонецПроцедуры

Процедура ОсновнойПриИзменении(Элемент) Экспорт
	
	ПриИзмененииВТабличномПоле();
	
КонецПроцедуры // ОсновнойПриИзменении()

Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	Таб = ЭлементыФормы.Хозрасчетный;

	ИмяКолонки = Таб.ТекущаяКолонка.Имя;

	Если Найти(ИмяКолонки, "СубконтоДт") > 0 Тогда
		Счет = Таб.ТекущиеДанные.СчетДт;
		НомерСубконто = Число(СтрЗаменить(ИмяКолонки, "СубконтоДт", ""));
	Иначе
		Счет = Таб.ТекущиеДанные.СчетКт;
		НомерСубконто = Число(СтрЗаменить(ИмяКолонки, "СубконтоКт", ""));
	КонецЕсли;

	Если Счет.Пустая() Тогда
		Возврат
	КонецЕсли;

	Если НомерСубконто > Счет.ВидыСубконто.Количество() Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	ВидСубконто = Счет.ВидыСубконто[НомерСубконто-1].ВидСубконто;
	ОписаниеТиповВидаСубконто = ВидСубконто.ТипЗначения;

	Элемент.ВыбиратьТип     = ОписаниеТиповВидаСубконто.Типы().Количество() > 1;
	Элемент.ОграничениеТипа = ОписаниеТиповВидаСубконто;

КонецПроцедуры

Процедура ОсновнойСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриАктивизацииЯчейкиВТабличномПоле(Элемент)

	ТекСтрока  = Элемент.ТекущиеДанные;

	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонки = Элемент.ТекущаяКолонка.Имя;

	ЭлементыФормы["НадписьФормула"].Заголовок = "&Формула (параметр):";

	Если ИмяКолонки = "Условие" Тогда

		Формула = ТекСтрока.Условие;

		ЭлементыФормы["Формула"].Доступность        = Истина;
		ТекущееПоле = ИмяКолонки;
		ЭлементыФормы["СпособЗаполнения"].Значение = "";
		ЭлементыФормы["НадписьФормула"].Заголовок = "Условие:";

	ИначеЕсли ИмяКолонки <> "Номер строки" Тогда

		ЭлементыФормы["Формула"].Доступность = Истина;
		Формула = ПолучитьФормулу("", ТекСтрока, ИмяКолонки);
		ТекущееПоле = ИмяКолонки;

		Если СокрЛП(Формула) <> ""  Тогда

			СпособЗаполнения = СпособыЗаполнения[3];
			Если ЭтоПараметр(Формула) Тогда
				СпособЗаполнения = СпособыЗаполнения[2];
			КонецЕсли;

		Иначе

			ТипыКолонки = ПолучитьТипыКолонки(Элемент);

			Если ТипыКолонки = Неопределено Тогда
				ЭлементыФормы["Формула"].Доступность = Ложь;
				СпособЗаполнения = "";
			ИначеЕсли ЗначениеВыбрано(ТекСтрока, ИмяКолонки, ТипыКолонки) Тогда
				СпособЗаполнения = СпособыЗаполнения[1];
			Иначе
				СпособЗаполнения = СпособыЗаполнения[0];
			КонецЕсли;

			ЭлементыФормы["КнопкаНовыйПараметр"].Доступность = (ТипыКолонки <> Неопределено);

		КонецЕсли;

	Иначе

		Формула = "";
		ТекущееПоле = "";
		СпособЗаполнения = "";
        ЭлементыФормы.Формула.Доступность = Ложь;
		ЭлементыФормы.ФормулаНУ.Доступность = Ложь;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОсновнойПриАктивизацииЯчейки(Элемент)
	
	ПриАктивизацииЯчейкиВТабличномПоле(Элемент);
	
КонецПроцедуры // ОсновнойПриАктивизацииЯчейки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ ТАБЛИЧНОГО ПОЛЯ Хозрасчетный

Процедура ОткрытьУсловиеПроводки()

	Таб = ЭлементыФормы.Хозрасчетный;

	ТекСтрока = Таб.ТекущиеДанные;

	Если ТекСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;

	ФормаУсловия = ПолучитьФорму("Условие", ЭтаФорма);
	ФормаУсловия.Условие = ТекСтрока.Условие;
	Парам = ФормаУсловия.ОткрытьМодально();

	Если Парам <> Неопределено Тогда

		ТекСтрока.Условие = Парам;
		Если Таб.ТекущаяКолонка.Имя = "Условие" Тогда
			Формула = Парам;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельХозрасчетныйОткрытьУсловиеПроводки(Кнопка)
	
	ОткрытьУсловиеПроводки();
	
КонецПроцедуры


Процедура ОткрытьРедактированиеФормул()

	Таб = ЭлементыФормы.Хозрасчетный;
	ТекСтрока = Таб.ТекущиеДанные;

	Если ТекСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;

	ФормаФормул = ПолучитьФорму("НастройкаФормул", ЭтаФорма, ТекСтрока);
	
	Если ФормаФормул.Открыта() Тогда
		ФормаФормул.Активизировать();
		Возврат;
	КонецЕсли;

	ФормаФормул.СтрокаТаблицы = ТекСтрока;

	Для каждого РеквМД Из Метаданные.Справочники["ТиповыеОперации"].ТабличныеЧасти[Таб.Имя].Реквизиты Цикл

		Если РеквМД.Имя = "Формулы" Тогда
			Продолжить
		КонецЕсли;

		Если РеквМД.Имя = "Условие" Тогда
			Продолжить
		КонецЕсли;

		НаименованиеСубконто = "";
		ТипыПоля = ПолучитьТипыКолонки(Таб, ТекСтрока, РеквМД.Имя, НаименованиеСубконто);

		Если ТипыПоля = Неопределено Тогда
			Продолжить
		КонецЕсли;

		СтрокаТЗ = ФормаФормул.ТаблицаФормул.Добавить();
		СтрокаТЗ.Имя = РеквМД.Имя;
		СтрокаТЗ.Представление = РеквМД.Синоним + ?((НаименованиеСубконто<>"")И(НаименованиеСубконто<>РеквМД.Имя), " (", "") + НаименованиеСубконто + ?((НаименованиеСубконто<>"")И(НаименованиеСубконто<>РеквМД.Имя), ")", "");
		СтрокаТЗ.Формула = ПолучитьФормулу(Таб ,ТекСтрока, РеквМД.Имя);

	КонецЦикла;

	ФормаФормул.ОткрытьМодально();

КонецПроцедуры // КоманднаяПанельОткрытьРедактированиеФормул()

Процедура КоманднаяПанельХозрасчетныйОткрытьРедактированиеФормул(Кнопка)
	
	ОткрытьРедактированиеФормул();
	
КонецПроцедуры

Процедура ОткрытьНастройкуПараметров()

	Таб = ЭлементыФормы.Хозрасчетный;
	ТекСтрока = Таб.ТекущиеДанные;

	Если ТекСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;

	ФормаНастройки = ПолучитьФорму("НастройкаПараметров", ЭтаФорма, ТекСтрока);
	ФормаНастройки.СтрокаТаблицы = ТекСтрока;

	Для каждого РеквМД Из Метаданные.Справочники["ТиповыеОперации"].ТабличныеЧасти[Таб.Имя].Реквизиты Цикл

		Если РеквМД.Имя = "Формулы" Тогда
			Продолжить
		КонецЕсли;

		Если РеквМД.Имя = "Условие" Тогда
			Продолжить
		КонецЕсли;

		Если ЗначениеВыбрано(ТекСтрока, РеквМД.Имя, ) Тогда
			Продолжить
		КонецЕсли;

		ФормулаПоля = ПолучитьФормулу(Таб, ТекСтрока, РеквМД.Имя);

		Если ФормулаПоля <> "" Тогда

			Если Не ЭтоПараметр(ФормулаПоля) Тогда
				Продолжить
			КонецЕсли;

		КонецЕсли;

		НаименованиеСубконто = "";
		ТипыПоля = ПолучитьТипыКолонки(Таб, ТекСтрока, РеквМД.Имя, НаименованиеСубконто);

		Если ТипыПоля = Неопределено Тогда
			Продолжить
		КонецЕсли;

		МассивПараметров = ПолучитьМассивПараметров(ТипыПоля);

		СтрокаТЗ         = ФормаНастройки.ТаблицаПараметров.Добавить();
		СтрокаТЗ.Имя     = РеквМД.Имя;
		СтрокаТЗ.Представление = РеквМД.Синоним + ?((НаименованиеСубконто<>"")И(НаименованиеСубконто<>РеквМД.Имя), " (", "") + НаименованиеСубконто + ?((НаименованиеСубконто<>"")И(НаименованиеСубконто<>РеквМД.Имя), ")", "");

		Если ФормулаПоля <> "" Тогда
			СтрокаТЗ.Параметр   = СтрЗаменить(ФормулаПоля, "Параметры.", "");
			СтрокаТЗ.Новый      = Ложь;
			СтрокаТЗ.Установить = Ложь;
		ИначеЕсли МассивПараметров.Количество() > 0 Тогда
			СтрокаТЗ.Параметр   = СтрЗаменить(МассивПараметров[0], "Параметры.", "");
			СтрокаТЗ.Новый      = Ложь;
			СтрокаТЗ.Установить = Истина;
		Иначе
			СтрокаТЗ.Параметр   = ?(НаименованиеСубконто <> "", НаименованиеСубконто, РеквМД.Имя);
			СтрокаТЗ.Новый      = Истина;
			СтрокаТЗ.Установить = Истина;
		КонецЕсли;

	КонецЦикла;

	ФормаНастройки.ОткрытьМодально();

КонецПроцедуры // КоманднаяПанельОткрытьНастройкуПараметров()

Процедура КоманднаяПанельХозрасчетныйОткрытьНастройкуПараметров(Кнопка)
	
	ОткрытьНастройкуПараметров();
	
КонецПроцедуры

Процедура ПриОткрытии()
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры
      

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

СпособыЗаполнения = Новый Массив; 
СпособыЗаполнения.Добавить("Указывается при вводе"); // "типовой операции"
СпособыЗаполнения.Добавить("Заполняется значением, указанным в шаблоне"); // " типовой операции"
СпособыЗаполнения.Добавить("Заполняется значением параметра, указанным при вводе"); // " типовой операции"
СпособыЗаполнения.Добавить("Вычисляется по формуле");
