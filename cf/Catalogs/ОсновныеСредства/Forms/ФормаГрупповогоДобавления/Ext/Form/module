////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает числовую часть строки.
//
//  Применяется для выделения числовой части инвентарного номера.
//
// Параметр:
//  ИсходнаяСтрока - Строка - Строка, в которой следует выделить числовую часть
// 
// Возвращаемое значение:
//  Строка         - числовая часть
//  Неопределено   - возвращается, если ИсходнаяСтрока не содержит числовой части
//
Функция ПолучитьЧисловуюЧасть(ИсходнаяСтрока)
	
	ЧисловаяЧасть = "";
	
	// Поиск числовой части кода
	Для Позиция = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		
		Символ = Сред(ИсходнаяСтрока, Позиция, 1);
		
		// Если символ = цифра, включить его в числовую часть
		Если Найти("0123456789", Символ) > 0 Тогда
			
			ЧисловаяЧасть = ЧисловаяЧасть + Символ; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка, существует ли числовая часть
	Если СтрДлина(ЧисловаяЧасть) = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ЧисловаяЧасть;
	
КонецФункции

// Функция увеличивает (уменьшает) код на заданный шаг (по умолчанию 1).
//
//  Применяется для установки кода с заданным шагом.
//
//  При этом код задается в строковом формате и может содержать прочие символы
// как до, так и после числовой части.
//
// Параметры:
//  ИсходныйКод    - Строка - Исходный код, который следует увеличить
//  Шаг            - Число - Числовое значение, на которое увеличивается Исходный код.
//                   Указание отрицательного значения приводит к уменьшению кода.
//                   Если значение не указано, Шаг по умолчанию устанавливается равным 1.
// 
// Возвращаемое значение:
//  Строка         - Код, увеличенный (уменьшенный) на заданный Шаг
//
Функция УвеличитьКод(ИсходныйКод, Шаг = 1)
	
	СтроковаяЧасть1 = ""; // строковая часть, располагающаяся перед числовой частью кода
	ЧисловаяЧасть   = ""; // числовая часть кода, которая, собственно, и увеличивается
	СтроковаяЧасть2 = ""; // строковая часть, располагающаяся после числовой части кода
	
	// Получение числовой части исходного кода
	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(ИсходныйКод);
	
	Если НЕ ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
		Возврат "";
	КонецЕсли;
	
	// Поиск позиций начала и окончания числовой части
	НачалоЧисловойЧасти    = Найти(ИсходныйКод, ЧисловаяЧасть);
	ОкончаниеЧисловойЧасти = НачалоЧисловойЧасти + СтрДлина(ЧисловаяЧасть) - 1;
	
	// Выделение строковых частей
	Если НачалоЧисловойЧасти > 1 Тогда // числовая часть начинается не с первого символа исходного кода
		СтроковаяЧасть1 = Лев(ИсходныйКод, НачалоЧисловойЧасти - 1);
	КонецЕсли;
	
	Если ОкончаниеЧисловойЧасти < СтрДлина(ИсходныйКод) Тогда // числовая часть заканчивается не на последнем символе исходного кода
		СтроковаяЧасть2 = Сред(ИсходныйКод, ОкончаниеЧисловойЧасти + 1);
	КонецЕсли;

	// Формирование новой числовой части
	НоваяЧисловаяЧасть = Формат(Макс(1, Число(ЧисловаяЧасть) + Шаг), "ЧЦ=" + СокрЛП(СтрДлина(ЧисловаяЧасть)) + "; ЧВН=; ЧДЦ=0; ЧГ=0");
	
	// Сборка нового кода
	НовыйКод = СтроковаяЧасть1 + НоваяЧисловаяЧасть + СтроковаяЧасть2;
	
	Возврат НовыйКод;
	
КонецФункции

// Функция вычисляет максимум объектов, которые возможно создать
// исходя из разрядности и значения числовой части начального кода.
//
//  Применяется для контроля возможности создания заданного количества объектов
// в заданной разрядности кода.
//
// Параметры:
//  ЧисловаяЧасть  - Строка - Числовая часть начального кода.
// 
// Возвращаемое значение:
//  Число          - Число - Вычисленный максимум.
//
Функция МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть)
	
	Если ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
	
		Возврат Pow(10, СтрДлина(ЧисловаяЧасть)) - Число(ЧисловаяЧасть);
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает значение конечного кода
// исходя из заданного начального кода и количества создаваемых объектов
//
Процедура УстановитьКонечныйКод(КоличествоОбъектов)
	
	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(НачальныйКод);
	
	Если НЕ ЗначениеЗаполнено(НачальныйКод) 
	 ИЛИ НЕ ЗначениеЗаполнено(ЧисловаяЧасть)
	 ИЛИ КоличествоОбъектов <= 0 
	 ИЛИ КоличествоОбъектов > МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть) Тогда
		
		ЭлементыФормы.КонечныйКод.Значение  = "";
		Возврат;
		
	КонецЕсли;
	
	ЭлементыФормы.КонечныйКод.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ЭлементыФормы.КонечныйКод.Значение                = УвеличитьКод(НачальныйКод, КоличествоОбъектов - 1);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	НовыйЭлемент = Справочники.ОсновныеСредства.СоздатьЭлемент();
	
	НовыйЭлемент.УстановитьНовыйКод();
	
	НачальныйКод = НовыйЭлемент.Код;
	
    УстановитьКонечныйКод(Количество);
	
	Если НЕ (ВладелецФормы = Неопределено) Тогда
		
		Группа = ВладелецФормы.ТекущийЭлемент.ТекущийРодитель;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии на кнопку "Создать" командной панели формы. 
// Процедура инициирует транзакцию массового создания элементов справочника.
//
Процедура ОсновныеДействияФормыСоздать(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(НачальныйКод) Тогда
		Предупреждение("Не заполнено поле ""Присваивать коды, начиная с"".");
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.НачальныйКод;
		Возврат;
	КонецЕсли;

	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(НачальныйКод);	
	
	Если НЕ ЗначениеЗаполнено(ЧисловаяЧасть) Тогда
		Предупреждение("Начальный код, указанный в поле ""Присваивать коды с:"", не содержит числовой части.");
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.НачальныйКод;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Количество) Тогда
		Предупреждение("Не заполнено поле ""Количество добавляемых объектов"".");
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Количество;
		Возврат;
	КонецЕсли;
	
	Если Количество > МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть) Тогда
		Предупреждение("Введенное количество объектов превышает допустимое исходя из заданной разрядности начального номера.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Предупреждение("Не заполнено поле ""Наименование"".");
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Наименование;
		Возврат;
	КонецЕсли;
	
	// Создание прогрессора
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	ФормаПрогрессора.Значение = 1;
	ФормаПрогрессора.МаксимальноеЗначение = Количество;
	ФормаПрогрессора.КомментарийОбработкиДанных  = "Групповое добавление элементов справочника Основные средства";
	ФормаПрогрессора.НаименованиеОбработкиДанных = "Добавление элементов справочника";
	
	ФормаПрогрессора.Открыть();
	
	НачатьТранзакцию();
	
	ОшибкаТранзакции = Ложь;
	
	Для НомерЭлемента = 1 По Количество Цикл
		
		НовыйКод = УвеличитьКод(НачальныйКод, НомерЭлемента - 1);
		
		ФормаПрогрессора.Значение = НомерЭлемента;
		ФормаПрогрессора.КомментарийЗначения = "Добавляется элемент с кодом " + НовыйКод;
		
		НовыйЭлемент = Справочники.ОсновныеСредства.СоздатьЭлемент();
		
		НовыйЭлемент.Код                   = НовыйКод;
		НовыйЭлемент.Родитель              = Группа;
		НовыйЭлемент.Наименование          = Наименование;
		НовыйЭлемент.НаименованиеПолное    = НаименованиеПолное;
		НовыйЭлемент.Изготовитель          = Изготовитель;
		НовыйЭлемент.ЗаводскойНомер        = ЗаводскойНомер;
		НовыйЭлемент.НомерПаспорта         = НомерПаспорта;
		НовыйЭлемент.ДатаВыпуска           = ДатаВыпуска;
		НовыйЭлемент.КодПоОКОФ             = КодПоОКОФ;
		НовыйЭлемент.ГруппаОС              = ГруппаОС;
		НовыйЭлемент.АмортизационнаяГруппа = АмортизационнаяГруппа;
		НовыйЭлемент.ШифрПоЕНАОФ           = ШифрПоЕНАОФ;
		НовыйЭлемент.Автотранспорт         = Автотранспорт;
		
		Попытка
			НовыйЭлемент.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Ошибка: не удалось записать элемент справочника с кодом " + НовыйКод + "!
			                 |" + ОписаниеОшибки(),,, СтатусСообщения.Важное);
			ОшибкаТранзакции = Истина;
			Прервать;							 
		КонецПопытки;
		
	КонецЦикла;

	ФормаПрогрессора.Закрыть();	
	
	Если ОшибкаТранзакции = Истина Тогда // при наличии ошибок отменяем транзакцию
		
		ОтменитьТранзакцию();
		
		ТекстСообщенияОбОшибке = "Групповое добавление элементов справочника не выполнено.";
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке,,, СтатусСообщения.Важное);		
		Предупреждение(ТекстСообщенияОбОшибке,,"Ошибка");
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода начального кода.
//
Процедура НачальныйКодПриИзменении(Элемент)
	
	УстановитьКонечныйКод(Количество);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода начального кода.
//
Процедура НачальныйКодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Направление = 1 И НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда // если в поле ввода ничего нет
		
		НачальныйКод = 1;
		
	Иначе
	
		НачальныйКод = УвеличитьКод(Элемент.Значение, Направление);
		
	КонецЕсли;
	
	УстановитьКонечныйКод(Количество);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества 
// создаваемых объектов.
//
Процедура КоличествоПриИзменении(Элемент)
	
	УстановитьКонечныйКод(Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода количества 
// создаваемых объектов.
//
Процедура КоличествоРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	НовоеЗначение = Элемент.Значение + Направление;

	ЧисловаяЧасть = ПолучитьЧисловуюЧасть(НачальныйКод);
	
	Если ЗначениеЗаполнено(ЧисловаяЧасть) И Направление = 1 Тогда
		
		СтандартнаяОбработка = (НовоеЗначение <= МаксимумСоздаваемыхОбъектов(ЧисловаяЧасть));
		
	КонецЕсли;
	
КонецПроцедуры


