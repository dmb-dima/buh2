////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;

Перем ДокументПринятияКУчетуБУ;
Перем ДокументСнятоСУчетаБУ;

Перем ТекОрганизация;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мТекущаяХарактеристика;

Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	
	

КонецПроцедуры

// Процедура устанавливает видимость реквизитов формы
//
Процедура УстановитьВидимость()
	
	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(ТекОрганизация, ДатаСведений);
	Если ЭтоУСН Тогда
		ЭтоРасходыУСН = НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(ТекОрганизация, ДатаСведений);
	Иначе
		ЭтоРасходыУСН = Ложь
	КонецЕсли;
	
	// Установка видимости страниц панелей в зависимости от вида учета
	ЭлементыФормы.Панель.Страницы.НалоговыйУчет.Видимость = НЕ ЭтоУСН;
	ЭлементыФормы.Панель.Страницы.НалоговыйУчетУСН.Видимость = ЭтоРасходыУСН;
	
	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (ДатаСведений < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (ДатаСведений < Дата("20060101"));
	КонецЕсли;
	
	УстановитьВидимостьСведенийОНедвижимости();
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВидимостьСведенийОНедвижимости()
	ЭтоЗданиеСооружение = ГруппаОС = Перечисления.ГруппыОС.Здания ИЛИ ГруппаОС = Перечисления.ГруппыОС.Сооружения;
	ЭлементыФормы.Панель.Страницы.СведенияОНедвижимости.Видимость = ЭтоЗданиеСооружение;
	Если ЭтоЗданиеСооружение Тогда
		ЭлементыФормы.УсловныйНомер.Видимость			= НЕ ИмеетсяКадастровыйНомер;
		ЭлементыФормы.НадписьУсловныйНомер.Видимость	= НЕ ИмеетсяКадастровыйНомер;
		ЭлементыФормы.КадастровыйНомер.Видимость		= ИмеетсяКадастровыйНомер;
		ЭлементыФормы.НадписьКадастровыйНомер.Видимость = ИмеетсяКадастровыйНомер;
		
		ЭлементыФормы.НазначениеПомещения.Доступность 			= Помещение;
	КонецЕсли;	
КонецПроцедуры

// Процедура заполняет доступные только для чтения реквизиты формы 
// 
Процедура ЗаполнитьОписания()

	ИДКонфигурации = РегламентированнаяОтчетность.ИДКонфигурации();
	
	ВидСубконтоОС = Новый Массив();
	ВидСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
	
	// Данные для заполнения закладки Бухгалтерский учет
	РеглВалюта = мВалютаРегламентированногоУчета;

	// Выборка из регистра сведений "Состояния ОС организаций"
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекОрганизация = РезультатЗапроса.Выгрузить()[0].Организация;
	Иначе
		ТекОрганизация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Организация = ТекОрганизация;
	
	// Данные для заполнения закладки "Бухгалтерский учет"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
	Запрос.УстановитьПараметр("ВидСубконтоОС",    ВидСубконтоОС);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления КАК СпособПоступленияБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
	|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемРаботБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК ПроцентГодовойАмортизацииБУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияБУ,
	|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизацииБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	ХозрасчетныйОстаткиСтоимость.СуммаОстатокДт КАК ТекущаяСтоимостьБУ,
	|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокКт КАК ТекАмортизацияБУ,
	|	ХозрасчетныйОстаткиАмортизация.СуммаОстатокДт КАК ТекИзносБУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаСведений,
	|		Организация = &Организация
	|		    И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаСведений,
	|		Организация = &Организация
	|		    И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаСведений,
	|		Организация = &Организация
	|		    И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|		&ДатаСведений,
	|		Организация = &Организация
	|		    И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|		&ДатаСведений,
	|		Организация = &Организация
	|		    И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ДатаСведений,
	|		,
	|		&ВидСубконтоОС,
	|		Организация = &Организация
	|		    И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиСтоимость
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = ХозрасчетныйОстаткиСтоимость.Счет
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&ДатаСведений,
	|		,
	|		&ВидСубконтоОС,
	|		Организация = &Организация
	|		    И Субконто1 = &ОсновноеСредство) КАК ХозрасчетныйОстаткиАмортизация
	|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисления" + ?(ИДКонфигурации = "БАУ" ИЛИ ИДКонфигурации = "БАУКОРП", "Износа", "Амортизации") + " = ХозрасчетныйОстаткиАмортизация.Счет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;

	ЭлементыФормы.ПанельБухгалтерскийУчет.Видимость = НЕ РезультатЗапроса.Пустой();
	
	РасшифровкаСрокаПолезногоИспользованияБУ = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияБУ);

	// Установка видимости страниц панели ПанельПогашенияСтоимости
	Если НЕ ЗначениеЗаполнено(ПорядокПогашенияСтоимостиБУ) Тогда
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПогашениеСтоимости.Видимость = Истина;
		ЭлементыФормы.ПанельПогашениеСтоимости.ТекущаяСтраница = ЭлементыФормы.ПанельПогашениеСтоимости.Страницы[ПорядокПогашенияСтоимостиБУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокПогашенияСтоимостиОС.Индекс(ПорядокПогашенияСтоимостиБУ)].Имя];
	КонецЕсли;
	
	// Установка видимости страниц панели ПанельПараметрыАмортизации
	Если НЕ ЗначениеЗаполнено(СпособНачисленияАмортизацииБУ) Тогда
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПараметрыАмортизации.Видимость = Истина;
		ЭлементыФормы.ПанельПараметрыАмортизации.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыАмортизации.Страницы[СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииОС.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
	КонецЕсли;
	
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, ТекОрганизация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчетуБУ,     ПринятоКУчетуБУ);
	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, ТекОрганизация, Перечисления.СостоянияОС.СнятоСУчета,          ДокументСнятоСУчетаБУ,        СнятоСУчетаБУ);

	УСН = НалоговыйУчетУСН.ПрименениеУСН(ТекОрганизация, ДатаСведений);

	Если НЕ УСН Тогда
	
		// Данные для заполнения закладки "Налоговый учет"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
		Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
		Запрос.УстановитьПараметр("ВидСубконтоОС",    ВидСубконтоОС);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации КАК МетодНачисленияАмортизацииНУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияНУ,
		|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпецКоэффициентНУ,
		|	НалоговыйОстаткиСтоимость.СуммаНУОстатокДт КАК ТекущаяСтоимостьНУ,
		|	НалоговыйОстаткиАмортизация.СуммаНУОстатокКт КАК ТекАмортизацияНУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&ДатаСведений,
		|		,
		|		&ВидСубконтоОС,
		|		Организация = &Организация
		|			И Субконто1 = &ОсновноеСредство) КАК НалоговыйОстаткиСтоимость
		|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета = НалоговыйОстаткиСтоимость.Счет
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(
		|		&ДатаСведений,
		|		,
		|		&ВидСубконтоОС,
		|		Организация = &Организация
		|			И Субконто1 = &ОсновноеСредство) КАК НалоговыйОстаткиАмортизация
		|			ПО СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации = НалоговыйОстаткиАмортизация.Счет
		|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗапроса.Выгрузить()[0]);
		КонецЕсли;
		
		РасшифровкаСрокаПолезногоИспользованияНУ = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокИспользованияНУ);
		
		ЭлементыФормы.ПанельНалоговыйУчет.Видимость = НЕ РезультатЗапроса.Пустой();
		
		// Установка видимости страниц панели ПанельВключениеСтоимостиВСоставРасходов
		Если НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
			ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Видимость = Истина;
			ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.ТекущаяСтраница = ЭлементыФормы.ПанельВключениеСтоимостиВСоставРасходов.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
		КонецЕсли;
	
		ПринятоКУчетуНУ        = ПринятоКУчетуБУ;
		СнятоСУчетаНУ          = СнятоСУчетаБУ;
	
	Иначе
		
		// Данные для заполнения закладки "Налоговый учет (УСН)"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
		Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьУСН, 0) КАК ПервоначальнаяСтоимостьУСН,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияУСН,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ДатаПриобретения КАК ДатаПриобретения,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, РезультатЗапроса.Выгрузить()[0]);
		КонецЕсли;
		
		ЭлементыФормы.ПанельНалоговыйУчетУСН.Видимость = НЕ РезультатЗапроса.Пустой();
		
		ПринятоКУчетуУСН        = ПринятоКУчетуБУ;
		СнятоСУчетаУСН          = СнятоСУчетаБУ;
		
	КонецЕсли;
	
	ЗаполнитьТекстПроДокументы();

КонецПроцедуры // ЗаполнитьПоляУчета()

// Процедура заполняет реквизиты формы, связанные с документами,
// изменяющими состояние объектов ОС
//
Процедура ЗаполнитьТекстПроДокументы() Экспорт

	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ1.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуНУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУСН.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуУСН.Значение = 0;

	Иначе
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ1.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		//ЭлементыФормы.ПринятоКУчетуБУ.Значение = ДокументПринятияКУчетуБУ.Дата;
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		//ЭлементыФормы.ПринятоКУчетуНУ.Значение = ДокументПринятияКУчетуБУ.Дата;
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУСН.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		//ЭлементыФормы.ПринятоКУчетуУСН.Значение = ДокументПринятияКУчетуБУ.Дата;

	КонецЕсли;

	Если ДокументСнятоСУчетаБУ = Неопределено Тогда
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаНУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУСН.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаУСН.Значение = 0;

	Иначе
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		//ЭлементыФормы.СнятоСУчетаБУ.Значение = ДокументСнятоСУчетаБУ.Дата;
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		//ЭлементыФормы.СнятоСУчетаНУ.Значение = ДокументСнятоСУчетаБУ.Дата;
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУСН.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		//ЭлементыФормы.СнятоСУчетаУСН.Значение = ДокументСнятоСУчетаБУ.Дата;
		

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьАдрес()
	
	ЭлементыФормы.АдресМестонахождения.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресМестонахождения);
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ДатаСведений = КонецДня(РабочаяДата);
	ИмеетсяКадастровыйНомер = ЗначениеЗаполнено(КадастровыйНомер) ИЛИ (НЕ ЗначениеЗаполнено(УсловныйНомер));
	
	ЗаполнитьОписания();
	ЗаполнитьАдрес();
	
	УстановитьВидимость();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриИзмененииДанных" формы.
//
Процедура ПриИзмененииДанных()
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
КонецПроцедуры // ПриИзмененииДанных()

// Обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	Если ИмеетсяКадастровыйНомер Тогда
		УсловныйНомер = "";
	Иначе
		КадастровыйНомер = "";
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта "Зарегистрированные оплаты основных 
// средств (УСН)" подменю "Перейти" командной панели формы. Процедура открывает 
// форму списка регистра накопления "Зарегистрированные оплаты основных 
// средств (УСН)".
//
Процедура ДействияФормыЗарегистрированныеОплатыОсновныхСредствУСН(Кнопка)
	ОС = Ссылка;
	Если НЕ ЗначениеЗаполнено(ОС) Тогда
		ОС = Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЕсли;
	
	ФормаРегистра = РегистрыНакопления.ОплатыОСДляУСН.ПолучитьФормуСписка();
	ФормаРегистра.Отбор.ОсновноеСредство.Использование = Истина;
	ФормаРегистра.Отбор.ОсновноеСредство.Значение = ОС;
	ФормаРегистра.Открыть();
КонецПроцедуры
             

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Обработчик события "ПриИзменении" поля ввода "Дата сведений".
//
Процедура ДатаСведенийПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = РабочаяДата;
	КонецЕсли;
	
	ДатаСведений = КонецДня(ДатаСведений);
    
	ЗаполнитьОписания();
	УстановитьВидимость();

КонецПроцедуры

// Обработчик события "Нажатие" гиперссылки "Документ
// принятия к учету".
//
Процедура ГиперссылкаДокументПринятияКУчетуБУНажатие(Элемент)

	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		ДокументПринятияКУчетуБУ = Документы["ПринятиеКУчетуОС"].СоздатьДокумент();
		ДокументПринятияКУчетуБУ.Заполнить(Ссылка);
	КонецЕсли;

	ДокументПринятияКУчетуБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();

	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, ТекОрганизация, Перечисления.СостоянияОС.ПринятоКУчету,        ДокументПринятияКУчетуБУ,     ЭлементыФормы.ПринятоКУчетуБУ.Значение);

	ЗаполнитьОписания();
	ЗаполнитьТекстПроДокументы();
	УстановитьВидимость();

КонецПроцедуры

// Обработчик события "Нажатие" гиперссылки "Документ
// снятия с учета".
//
Процедура ГиперссылкаДокументСнятияСУчетаБУНажатие(Элемент)

	Если ДокументСнятоСУчетаБУ = Неопределено Тогда
		ДокументСнятоСУчетаБУ = Документы["СписаниеОС"].СоздатьДокумент();
		ДокументСнятоСУчетаБУ.Заполнить(Ссылка);
	КонецЕсли;

	ДокументСнятоСУчетаБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();

	УправлениеВнеоборотнымиАктивами.ПолучитьДокументБухСостоянияОС(Ссылка, ТекОрганизация, Перечисления.СостоянияОС.СнятоСУчета, ДокументСнятоСУчетаБУ, ЭлементыФормы.СнятоСУчетаБУ.Значение);

	ЗаполнитьТекстПроДокументы();

КонецПроцедуры

// Обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	мДатаСведений = ДатаСведений;
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	мДатаСведений = ДатаСведений;
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля ввода "ОКОФ".
//
Процедура КодПоОКОФПриИзменении(Элемент)
	
	Если НЕ Элемент.Значение.Пустая() Тогда
		АмортизационнаяГруппа = Элемент.Значение.АмортизационнаяГруппа;
	КонецЕсли;
	
КонецПроцедуры // КодПоОКОФПриИзменении()

Процедура АдресМестонахожденияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаАдреса = Обработки.РедактированиеКонтактнойИнформации.Создать().ПолучитьФорму("ФормаЗаписиАдреса");
	ФормаАдреса.НачальноеЗначениеВыбора = РегламентированнаяОтчетность.РазложитьАдрес(АдресМестонахождения);
	ФормаАдреса.НачальноеЗначениеВыбора.Вставить("НазваниеРегиона", ФормаАдреса.НачальноеЗначениеВыбора.Регион);
	ФормаАдреса.НачальноеЗначениеВыбора.Регион = КодРегиона;
	Если ФормаАдреса.ОткрытьМодально() Тогда
		АдресМестонахождения = ФормаАдреса.НачальноеЗначениеВыбора.Представление;
		КодРегиона = ФормаАдреса.НачальноеЗначениеВыбора.Регион;
	КонецЕсли;
	ЗаполнитьАдрес();
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Группа ОС
Процедура ГруппаОСПриИзменении(Элемент)
	УстановитьВидимостьСведенийОНедвижимости();
КонецПроцедуры

// Обработчик события ПриИзменении флага Имеется кадастровый номер
Процедура ИмеетсяКадастровыйНомерПриИзменении(Элемент)
	УстановитьВидимостьСведенийОНедвижимости();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

// Обработчик события ПриИзменении флага Помещение
Процедура ПомещениеПриИзменении(Элемент)
	НазначениеПомещения = ?(Помещение, Перечисления.НазначенияПомещения.Нежилое, Перечисления.НазначенияПомещения.ПустаяСсылка());
	УстановитьВидимостьСведенийОНедвижимости();
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////// 
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
// 

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

