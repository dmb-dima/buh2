Перем мВалютаРегламентированногоУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьНовыйПоСпискуОтборов()

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыСправочника = Метаданные().Реквизиты;
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если РеквизитыСправочника.Найти(ЭлементОтбора.Имя) = Неопределено 
			И ЭлементОтбора.Имя <> "Владелец" 
			И ЭлементОтбора.Имя <> "Родитель" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
			ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение;
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
			ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение[0].Значение;
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Процедура заполняет реквизиты нового элемента справочника
//
Процедура ЗаполнитьНовыйЭлемент() Экспорт
	
	ЗаполнитьНовыйПоСпискуОтборов();

	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Организация) Тогда
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	Иначе
		ОсновнаяОрганизация = глЗначениеПеременной("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОсновнаяОрганизация);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидДоговора) Тогда
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Владелец) Тогда
			ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее;
		КонецЕсли;
	КонецЕсли;

	НалоговыйАгентПоОплате = Истина;
	
КонецПроцедуры // ЗаполнитьНовыйЭлемент()

Процедура УстановитьДоступностьСУчетомОтбора()

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения <> ВидСравнения.Равно Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементФормы = ЭлементыФормы.Найти(ЭлементОтбора.Имя);
		
		ЕстьЭлементФормы = ЭлементФормы <> Неопределено;
								   
		Если ЕстьЭлементФормы Тогда
			
			Если ТипЗнч(ЭлементФормы) = Тип("ПолеВвода") Тогда
				ЭлементФормы.ТолькоПросмотр = Истина;
			ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("Флажок") Тогда
				ЭлементФормы.Доступность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьТекстОНесоответствииОтбору(ТекстСообщения, ЭлементОтбора)

	ТекстСообщения = ТекстСообщения
	                        + ЭлементОтбора.Представление      + " "  
							+ НРег(ЭлементОтбора.ВидСравнения) + " """ 
							+ Строка(ЭлементОтбора.Значение)   + """" + Символы.ПС;
	
КонецПроцедуры // ДополнитьТекстОНесоответствииОтбору()

Функция ПроверитьСоответствиеЭлементаОтбору(ТекстСообщенияОбОшибках = "")

	Если ТипЗнч(СписокОтборов) <> Тип("Отбор") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЭлементСоответствуетОтбору = Истина;
	ТекстСообщенияОбОшибках = "";
	
	Для каждого ЭлементОтбора Из СписокОтборов Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравнения.Равно Тогда
		
			Если ЭтотОбъект[ЭлементОтбора.Имя] <> ЭлементОтбора.Значение Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке Тогда
		
			Если ЭлементОтбора.Значение.НайтиПоЗначению(ЭтотОбъект[ЭлементОтбора.Имя]) = Неопределено Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
			
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно Тогда
		
			Если ЭтотОбъект[ЭлементОтбора.Имя] = ЭлементОтбора.Значение Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
		
		ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравнения.НеВСписке Тогда
		
			Если ЭлементОтбора.Значение.НайтиПоЗначению(ЭтотОбъект[ЭлементОтбора.Имя]) <> Неопределено Тогда
				ЭлементСоответствуетОтбору = Ложь;
				ДополнитьТекстОНесоответствииОтбору(ТекстСообщенияОбОшибках, ЭлементОтбора);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НЕ ЭлементСоответствуетОтбору Тогда
		ТекстСообщенияОбОшибках = "Должны выполняться следующие условия:" + Символы.ПС
		                        + ТекстСообщенияОбОшибках
		                        + "Элемент не может быть записан!"
	КонецЕсли;
	
	Возврат ЭлементСоответствуетОтбору;

КонецФункции

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	
	

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура заполняет список значений для выбора ЭУ ВидДоговора
//
Процедура ЗаполнитьСписокВыбораВидаДоговора()

	СписокПеречисления = Новый СписокЗначений;
	
	ЕстьОтбор               = ТипЗнч(СписокОтборов) = Тип("Отбор");
	ЕстьОтборПоВидуДоговора = ЕстьОтбор 
	                        И СписокОтборов.Найти("ВидДоговора") <> Неопределено 
							И СписокОтборов.ВидДоговора.Использование;
							
	Если ЕстьОтборПоВидуДоговора Тогда
		
			Если СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.Равно Тогда
				СписокПеречисления.Добавить(СписокОтборов.ВидДоговора.Значение);
			ИначеЕсли СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.ВСписке Тогда
				СписокПеречисления.ЗагрузитьЗначения(СписокОтборов.ВидДоговора.Значение.ВыгрузитьЗначения());
			ИначеЕсли СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.НеРавно Тогда
				Для каждого ЗначениеПеречисления Из Перечисления.ВидыДоговоровКонтрагентов Цикл
					Если ЗначениеПеречисления <> СписокОтборов.ВидДоговора.Значение Тогда
						СписокПеречисления.Добавить(ЗначениеПеречисления);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли СписокОтборов.ВидДоговора.ВидСравнения = ВидСравнения.НеВСписке Тогда
				Для каждого ЗначениеПеречисления Из Перечисления.ВидыДоговоровКонтрагентов Цикл
					Если СписокОтборов.ВидДоговора.Значение.НайтиПоЗначению(ЗначениеПеречисления) = Неопределено Тогда
						СписокПеречисления.Добавить(ЗначениеПеречисления);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
	Иначе
		
		Для каждого ЗначениеПеречисления Из Перечисления.ВидыДоговоровКонтрагентов Цикл
			СписокПеречисления.Добавить(ЗначениеПеречисления);
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлементыФормы.ВидДоговора.СписокВыбора = СписокПеречисления;
	
	ВидДоговораНеВСписке = СписокПеречисления.НайтиПоЗначению(ВидДоговора) = Неопределено;
	
	Если ВидДоговораНеВСписке Тогда
		ВидДоговора = СписокПеречисления[0].Значение;
	КонецЕсли;
	
	ЭлементыФормы.ВидДоговора.Значение = ВидДоговора;

КонецПроцедуры

// Процедура устанавливает видимость и доступность для элементов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Управление видимостью элементов формы
	ЭтоДоговорКомиссии     = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭтоДоговорПриобретения = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком   ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭтоДоговорРеализации   = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем   ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);

	ВидимостьОбщихЭлементов = Истина;

	//Группа - Ведение взаиморасчетов
	Если Не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ЭлементыФормы.РеализацияНаЭкспорт.Видимость = Ложь;
	Иначе
		ЭлементыФормы.РеализацияНаЭкспорт.Видимость = Истина;
		Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда
			ЭлементыФормы.РеализацияНаЭкспорт.Доступность = Ложь;
		Иначе
			ЭлементыФормы.РеализацияНаЭкспорт.Доступность = Не РасчетыВУсловныхЕдиницах;
		КонецЕсли;
	КонецЕсли;	
				
	Если (ЭтоДоговорРеализации или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком) Тогда
		Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		ИначеЕсли УчетАгентскогоНДС тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		ИначеЕсли РеализацияНаЭкспорт Тогда
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Ложь;
		Иначе
			ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Истина;
		Конецесли;

	Иначе
		ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность	= Ложь;
	КонецЕсли;
	
	ЭлементыФормы.УстановленСрокОплаты.Доступность = (ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	Если УстановленСрокОплаты Тогда
		ЭлементыФормы.УстановленСрокОплаты.Заголовок = "Установлен срок оплаты по договору, дней:";
	Иначе
		ЭлементыФормы.УстановленСрокОплаты.Заголовок = "Установлен срок оплаты по договору";
	КонецЕсли; 
	ЭлементыФормы.СрокОплаты.Видимость = УстановленСрокОплаты;
	
	//Группа - Комиссионное вознаграждение
	ЭлементыФормы.РамкаГруппыКомиссионноеВознаграждение.Доступность           = ЭтоДоговорКомиссии;
	ЭлементыФормы.НадписьСпособРасчетаКомиссионногоВознаграждения.Доступность = ЭтоДоговорКомиссии;
	ЭлементыФормы.НадписьПроцентКомиссионногоВознаграждения.Доступность       = ЭтоДоговорКомиссии;
	ЭлементыФормы.СпособРасчетаКомиссионногоВознаграждения.Доступность        = ЭтоДоговорКомиссии;
	ЭлементыФормы.ПроцентКомиссионногоВознаграждения.Доступность              = ЭтоДоговорКомиссии;

	Если ЭтоДоговорРеализации Тогда
		ЭлементыФормы.ПанельНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНДС.Страницы.НДСсАвансов;
		Если ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка() Тогда
			ЭлементыФормы.ПанельАвансы.ТекущаяСтраница = ЭлементыФормы.ПанельАвансы.Страницы.Информация;
		Иначе
			ЭлементыФормы.ПанельАвансы.ТекущаяСтраница = ЭлементыФормы.ПанельАвансы.Страницы.НеРегистрировать;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельНДС.ТекущаяСтраница = ЭлементыФормы.ПанельНДС.Страницы.НДСНалоговыйАгент;
	КонецЕсли;		
	ЭлементыФормы.РамкаГруппыНДСВКачествеНалоговогоАгента.Доступность = ЭтоДоговорПриобретения;
	ЭлементыФормы.УчетАгентскогоНДС.Доступность          = ЭтоДоговорПриобретения;
	ЭлементыФормы.ВидАгентскогоДоговора.Доступность      = (ЭтоДоговорПриобретения и УчетАгентскогоНДС и не ЭтоДоговорКомиссии);
	ЭлементыФормы.ТекстВидАгентскогоДоговора.Доступность = (ЭтоДоговорПриобретения и УчетАгентскогоНДС и не ЭтоДоговорКомиссии);
	ЭлементыФормы.НаименованиеДляСчетаФактурыНалоговогоАгента.Доступность = (ЭтоДоговорПриобретения и УчетАгентскогоНДС);
	ЭлементыФормы.НадписьНалоговыйАгентПоОплате.Доступность = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	ЭлементыФормы.НалоговыйАгентПоОплате.Доступность = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	
	УстановитьДоступностьСУчетомОтбора();
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораВидаДоговора();

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии".
//
Процедура ПриОткрытии()

	ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
	
	ЭлементыФормы.Организация.СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	
	Если СправочникОбъект.ЭтоНовый() Тогда

		ЗаполнитьНовыйЭлемент();

	КонецЕсли;
	
	ВСоответствииСУчетнойПолитикой = (ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка());

	// Возможность выбора момента начисления НДС в качестве налогового агента
	// доступна до выбора значения по оплате
	ВидимостьНалоговыйАгентПоОплате = ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком И УчетАгентскогоНДС И Не НалоговыйАгентПоОплате;
	ЭлементыФормы.НадписьНалоговыйАгентПоОплате.Видимость = ВидимостьНалоговыйАгентПоОплате;
	ЭлементыФормы.НалоговыйАгентПоОплате.Видимость = ВидимостьНалоговыйАгентПоОплате;
	
	УстановитьВидимость();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	Перем ТекстСообщенияОбОшибках;

	ЭлементСоответствуетОтбору = ПроверитьСоответствиеЭлементаОтбору(ТекстСообщенияОбОшибках);
	Отказ = НЕ ЭлементСоответствуетОтбору;
	
	Если Отказ Тогда
		ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибках);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи".
//
Процедура ПриЗаписи(Отказ)

	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		ОповеститьОВыборе(Ссылка);
	КонецЕсли; 
 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" элемента формы ВидДоговора.
//
Процедура ВидДоговораПриИзменении(Элемент)
	
	Если ВидДоговора.Пустая() ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		
		ТипЦен = Неопределено;
		СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПустаяСсылка();
		ПроцентКомиссионногоВознаграждения = 0;
		
	КонецЕсли;
	
	//Зачистка флага "Расчеты в условных единицах" для всех видов договоров кроме договоров в поставщиком и с покупателем
	Если (ВидДоговора.Пустая() ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее или ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Скомитентом) тогда
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;
	
	//Зачистка флага "Реализация на экспорт" для всех видов договоров кроме договора с покупателем
	Если Не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Или РасчетыВУсловныхЕдиницах Тогда
		РеализацияНаЭкспорт = Ложь;
	КонецЕсли;
	
	//Группа - НДС в качестве налогового агента
	ЭтоДоговорПриобретения = (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком 
	ИЛИ ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Если НЕ ЭтоДоговорПриобретения И УчетАгентскогоНДС Тогда
		УчетАгентскогоНДС = Ложь;
		ВидАгентскогоДоговора = Неопределено;
	КонецЕсли;
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом И УчетАгентскогоНДС Тогда
		ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "УчетАгентскогоНДС".
//
Процедура УчетАгентскогоНДСПриИзменении(Элемент)
	
	Если (НЕ ЗначениеЗаполнено(ВидАгентскогоДоговора)) И УчетАгентскогоНДС И
		Не ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		// Установим значение "по умолчанию"
		ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Аренда;
	КонецЕсли;
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом И УчетАгентскогоНДС Тогда
		ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.Нерезидент;
	КонецЕсли;
	Если РасчетыВУсловныхЕдиницах И УчетАгентскогоНДС тогда
		//Зачистка флага "Расчеты в условных единицах" при исполнении обязанности налогового агента по уплате НДС
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;

	Если УчетАгентскогоНДС 
		И Не ЭлементыФормы.НалоговыйАгентПоОплате.Видимость 
		И Не НалоговыйАгентПоОплате Тогда
		НалоговыйАгентПоОплате = Истина;
	КонецЕсли;
	
	УстановитьВидимость();	
	
КонецПроцедуры

Процедура НалоговыйАгентПоОплатеПриИзменении(Элемент)
	
	Если НалоговыйАгентПоОплате Тогда
		
		ТекстПредупреждения = "После записи договора возврат к начислению НДС при поступлении ценностей станет невозможен.";
		Предупреждение(ТекстПредупреждения);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВалютаВзаиморасчетовПриИзменении(Элемент)
	
	//Зачистка флага "Расчеты в условных единицах" для валюты, совпадающей с валютой рег. учета
	Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета и РасчетыВУсловныхЕдиницах Тогда
		РасчетыВУсловныхЕдиницах = Ложь;
	КонецЕсли;
	Если ВалютаВзаиморасчетов = мВалютаРегламентированногоУчета и РеализацияНаЭкспорт Тогда
		РеализацияНаЭкспорт = Ложь;
	КонецЕсли;
    УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "РасчетыВУсловныхЕдиницах".
//
Процедура РасчетыВУсловныхЕдиницахПриИзменении(Элемент)
	
	Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		ЭлементыФормы.РеализацияНаЭкспорт.Доступность = Не РасчетыВУсловныхЕдиницах;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы "РеализацияНаЭкспорт".
//
Процедура РеализацияНаЭкспортПриИзменении(Элемент)
	ЭлементыФормы.РасчетыВУсловныхЕдиницах.Доступность = Не РеализацияНаЭкспорт;
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры
                        

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.ВыбратьЗначениеПоляВводаИзСписка(
		ЭтаФорма, Элемент, СтандартнаяОбработка, ЭлементыФормы.Организация.СписокВыбора, Организация);
		
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьАвтоПодборТекста(
		Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭлементыФормы.Организация.СписокВыбора);
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ОбработатьОкончаниеВводаТекста(
		Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.Организация.СписокВыбора);
	
КонецПроцедуры

Процедура УстановленСрокОплатыПриИзменении(Элемент)
	
	Если УстановленСрокОплаты Тогда
		
		Если (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем)
			ИЛИ (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером) 
			Тогда
		    СрокОплаты = Константы.СрокОплатыПокупателей.Получить();
		ИначеЕсли (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком)
			ИЛИ (ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) 
			Тогда
		    СрокОплаты = Константы.СрокОплатыПоставщикам.Получить();
		КонецЕсли;
		
	Иначе
		СрокОплаты = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ВСоответствииСУчетнойПолитикойПриИзменении(Элемент)
	
	Если ВСоответствииСУчетнойПолитикой Тогда
		ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка();
	ИначеЕсли ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка() Тогда
		ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = Перечисления.ПорядокРегистрацииСчетовФактурНаАванс.НаВсеАвансы;
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
