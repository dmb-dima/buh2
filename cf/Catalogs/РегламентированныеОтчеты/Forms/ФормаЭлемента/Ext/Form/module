Перем ИзмененПризнакИспользованияВнешнегоОтчета;
Перем ИзмененВнешнийОтчетХранилище;
Перем ПолноеИмяЗагруженногоВнешнегоОтчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	УправлениеЭУ();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	// проверки
	Если ПустаяСтрока(ИсточникОтчета) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Укажите наименование объекта!", Отказ);
		Возврат;
	КонецЕсли;

	Если НЕ ВнешнийОтчетИспользовать И ОпределитьТипОтчета(ИсточникОтчета, , Истина) = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Регламентированный отчет """ + СокрЛП(ИсточникОтчета) + """ не найден в конфигурации.", Отказ);
		Возврат;
	КонецЕсли;

	Если ВнешнийОтчетИспользовать И ВнешнийОтчетХранилище.Получить() = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Внешний отчет отсутствует! Загрузите внешний отчет или установите признак ""Использовать"" в положение ""Объект"".", Отказ);
		Возврат;
	КонецЕсли;
	
	// формируем флаги изменения внешнего отчета или его использования для анализа в ПослеЗаписи
	ИзмененПризнакИспользованияВнешнегоОтчета = (ВнешнийОтчетИспользовать <> Ссылка.ВнешнийОтчетИспользовать);
	ИзмененВнешнийОтчетХранилище = (ВнешнийОтчетХранилище <> Ссылка.ВнешнийОтчетХранилище);

КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события ПослеЗаписи формы.
// В зависимости от изменения настроек использования внешнего регламентированного отчета
// и наличия информации об отчете в кэше регламентированных отчетов, выдает (или не выдает) предупреждение 
// о вступлении изменений в силу только после перезапуска программы.
//
Процедура ПослеЗаписи()
	
	// очищаем полное имя внешнего отчета - после записи оно не должно прорисовываться
	ПолноеИмяЗагруженногоВнешнегоОтчета = Неопределено;
	
	// прорисовываем форму
	УправлениеЭУ();
	
	// оповещаем ЦУО об изменении
	Оповестить("Обновить дерево отчетов", "Обновить дерево отчетов", ЭтаФорма);
	
	// если отчет изменялся и кэшировался, то выдадим предупреждение о вступлении изменений в силу только после перезапуска
	Если ИзмененВнешнийОтчетХранилище ИЛИ ИзмененПризнакИспользованияВнешнегоОтчета Тогда
		ОбъектКэшировался = РегламентированнаяОтчетность.ОтчетКэшировался(ЭтотОбъект);
		Если ОбъектКэшировался Тогда
			ТекстИзмененияВступятВСилу = Символы.ПС + "ИЗМЕНЕНИЯ ВСТУПЯТ В СИЛУ ТОЛЬКО ПОСЛЕ ПОВТОРНОГО ОТКРЫТИЯ ПРОГРАММЫ!";
			Если ИзмененВнешнийОтчетХранилище И НЕ ИзмененПризнакИспользованияВнешнегоОтчета Тогда
				Предупреждение("Был загружен новый внешний отчет!" + ТекстИзмененияВступятВСилу);
			ИначеЕсли НЕ ИзмененВнешнийОтчетХранилище И ИзмененПризнакИспользованияВнешнегоОтчета Тогда
				Предупреждение("Был изменен признак использования внешнего отчета!" + ТекстИзмененияВступятВСилу);
			ИначеЕсли ИзмененВнешнийОтчетХранилище И ИзмененПризнакИспользованияВнешнегоОтчета Тогда
				Предупреждение("Был изменен признак использования внешнего отчета и загружен новый внешний отчет!" + ТекстИзмененияВступятВСилу);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события НачалоВыбора поля ввода ИсточникОтчетаФайл.
//
Процедура ИсточникОтчетаФайлНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыбратьВнешнийОтчет();
	
КонецПроцедуры

Процедура ВыбратьВнешнийОтчет()
	
	// инициализируем свойства диалога
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл внешнего отчета";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр = "Внешний отчет (*.erf)|*.erf";
	
	// показываем диалог
	Если НЕ Диалог.Выбрать() ИЛИ НЕ РегламентированнаяОтчетность.ЗарегистрироватьВнешнийОтчет(ЭтотОбъект, Диалог.ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяЗагруженногоВнешнегоОтчета = Диалог.ПолноеИмяФайла;
	
	УправлениеЭУ();
	
КонецПроцедуры

// Процедура - обработчик события Очистка поля ввода ИсточникОтчетаФайл.
// Удаляет внешний отчет из ИБ.
//
Процедура ИсточникОтчетаФайлОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВнешнийОтчетХранилище.Получить() = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос("Удалить хранящийся в информационной базе отчет?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ВнешнийОтчетХранилище = Неопределено;
	УправлениеЭУ();
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении переключателя ВнешнийОтчетИспользовать1.
//
Процедура ВнешнийОтчетИспользоватьПриИзменении(Элемент)
	
	Если ВнешнийОтчетИспользовать И ВнешнийОтчетХранилище.Получить() = Неопределено Тогда
		ВыбратьВнешнийОтчет();
	КонецЕсли;
	
	УправлениеЭУ();
	
КонецПроцедуры

Процедура ИсточникОтчетаФайлОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НадписьВыгрузитьНажатие(Элемент)
	
	// инициализируем диалог выбора файлов
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.Заголовок = "Укажите файл для сохранения";
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Расширение = "erf";
	Диалог.Фильтр = "Внешний отчет (*.erf)|*.erf";
	
	// извлекаем имя из отчета
	Состояние("Получение имени отчета...");
	Попытка
		ВремФайл = ПолучитьИмяВременногоФайла();
		ВнешнийОтчетХранилище.Получить().Записать(ВремФайл);
		Диалог.ПолноеИмяФайла = ВнешниеОтчеты.Создать(ВремФайл).Метаданные().Имя + ".erf";
	Исключение
		Диалог.ПолноеИмяФайла = ?(ПустаяСтрока(ИсточникОтчета), "", ИсточникОтчета + ".erf");
	Конецпопытки;
	Состояние();
	
	// показываем диалог
	Если НЕ Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	// выгружаем внешний отчет
	Попытка
		ВнешнийОтчетХранилище.Получить().Записать(Диалог.ПолноеИмяФайла);
	Исключение
		Предупреждение("Не удалось выгрузить отчет:" + Символы.ПС + ИнформацияОбОшибке().Описание);
		Возврат;
	КонецПопытки;
	Предупреждение("Отчет успешно выгружен в файл " + Диалог.ПолноеИмяФайла);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//

Процедура УправлениеЭУ()
	
	ВнешнийОтчетЗагружен = (ВнешнийОтчетХранилище.Получить() <> Неопределено);
	
	// управляем полем ввода с идентификатором объекта
	Если НЕ ПустаяСтрока(ИсточникОтчета) И Метаданные.Отчеты.Найти(ИсточникОтчета) <> Неопределено Тогда
		ЭлементыФормы.ИсточникОтчета.Доступность = Ложь;
	КонецЕсли;
	ЭлементыФормы.ИсточникОтчета.Доступность = НЕ ВнешнийОтчетИспользовать;
	
	// управляем ЭУ внешнего отчета
	Если Модифицированность И ЗначениеЗаполнено(ПолноеИмяЗагруженногоВнешнегоОтчета) Тогда
		ИсточникОтчетаФайл = ПолноеИмяЗагруженногоВнешнегоОтчета;
	Иначе
		ИсточникОтчетаФайл = ?(ВнешнийОтчетЗагружен, "Отчет загружен в ИБ", "");
	КонецЕсли;
	ЭлементыФормы.ВерсияВнешнегоОтчета.Заголовок = ?(ЗначениеЗаполнено(ВнешнийОтчетВерсия), СокрЛП(ВнешнийОтчетВерсия), "<информация о версии недоступна>");
	ЭлементыФормы.ИсточникОтчетаФайл.Доступность = ВнешнийОтчетИспользовать;
	Если ВнешнийОтчетЗагружен Тогда
		ЭлементыФормы.ПанельСвойствВнешнегоОтчета.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельСвойствВнешнегоОтчета.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
КонецПроцедуры
