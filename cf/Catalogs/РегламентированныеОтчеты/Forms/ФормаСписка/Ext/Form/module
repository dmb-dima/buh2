
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура открывает форму внутреннего или внешнего отчета,
// табличный или текстовый документ по указанному в реквизите
// ИсточникОтчета элемента справочника имени внутреннего или 
// файла внешнего отчета, текстового или табличного документа.
//
// Параметры
//  ФайлВнешнегоОтчета - строка - имя файла, указанное в реквизите элемента.
//
Процедура ОткрытьФормуОтчета(ФайлВнешнегоОтчета)
	Перем Расширение;
	
	ПравоДоступаКОтчету = РегламентированнаяОтчетность.ПравоДоступаКРегламентированномуОтчету(ФайлВнешнегоОтчета);
	Если ПравоДоступаКОтчету = Ложь Тогда
		Предупреждение("Недостаточно прав!");
		Возврат;
	ИначеЕсли ПравоДоступаКОтчету = Неопределено Тогда
		Предупреждение("Отчет не найден!");
		Возврат;
	КонецЕсли;
	
	Если НЕ РегламентированнаяОтчетность.ЭтоВнешнийОтчет(ФайлВнешнегоОтчета) И Метаданные.Документы.Найти(ФайлВнешнегоОтчета) <> Неопределено Тогда // это внутренний отчет-документ
			
		ВнутреннийОтчет = Документы[ФайлВнешнегоОтчета];
		ВыбФормаОтчета  = ВнутреннийОтчет.ПолучитьФорму(Метаданные.Документы[ФайлВнешнегоОтчета].ОсновнаяФормаОбъекта.Имя);
		ВыбФормаОтчета.РежимВыбора = Ложь;
		ВыбФормаОтчета.Открыть();
		Возврат;
			
	КонецЕсли;
	
	ТекОтчет = РегламентированнаяОтчетность.РеглОтчеты(ФайлВнешнегоОтчета);
	Если ТекОтчет = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекФорма = РегламентированнаяОтчетность.ФормаРеглОтчета(ФайлВнешнегоОтчета);
	Если ТекФорма = Неопределено Тогда
		Сообщить("Не удалось открыть отчет!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	ТекФорма.РежимВыбора = Ложь;
	ТекФорма.Открыть();
	Возврат;

КонецПроцедуры // ОткрытьФормуОтчета()

// Отображает в форме описание регламентированного отчета.
//
// Параметры
//  ТекЭлемент  – СправочникСсылка – текущий элемент справочника.
//
Процедура ПоказатьОписаниеОтчета(ТекЭлемент)

	ТекущееОписание = ТекЭлемент.Описание;
	ЭлементыФормы.НадписьОписаниеОтчета.Значение = ТекущееОписание;

КонецПроцедуры // ПоказатьОписаниеОтчета()

// Управляет видимостью кнопок командной панели ДействияФормы.
//
// Параметры
//  ТекЭлемент  – СправочникСсылка – текущий элемент справочника.
//
Процедура УстановитьВидимостьКнопок(ТекЭлемент)

	Показать = Истина;

	Если ТекЭлемент.ЭтоГруппа Тогда
		Показать = Ложь;
	КонецЕсли;

	Если РежимВыбора Тогда
		Показать = Ложь;
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.КоманднаяПанельОткрытьОтчет.Доступность  = Показать;

КонецПроцедуры // УстановитьВидимостьКнопок(ТекЭлемент)

// <Описание процедуры>
//
// Параметры
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>
//
Процедура ИзменитьКодЭлемента(Направление)

	СортировкаПоКоду = Истина;

	Если Порядок.Количество() = 0 Тогда
		СортировкаПоКоду = Ложь;
	ИначеЕсли Порядок.Получить(0).Представление <> "Код" Тогда
		СортировкаПоКоду = Ложь;
	КонецЕсли;

	Если Не СортировкаПоКоду Тогда
		Предупреждение("Для изменения порядка следования 
						|необходимо установить сортировку по коду.");

		Если Вопрос("Установить сортировку по коду?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			Порядок.Установить("Код");
		КонецЕсли;

		Возврат;
	КонецЕсли;

	НаправлСорт = Порядок.Получить(0).Направление;

	Если НаправлСорт = НаправлениеСортировки.Возр Тогда
		Направление = Направление * (-1);
	КонецЕсли;

	ТекущиеДанные = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекОбъект = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка.ПолучитьОбъект();
		ТекОбъект.ИзменитьКод(Направление);
	КонецЕсли;

КонецПроцедуры // ИзменитьКодЭлемента()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	Отбор.НеПоказыватьВСписке.Значение       = Ложь;
	Отбор.НеПоказыватьВСписке.Использование  = Истина;

	ЭлементыФормы.СправочникСписок.АвтоКонтекстноеМеню = Ложь;
	ЭлементыФормы.СправочникСписок.КонтекстноеМеню     = ЭлементыФормы.ДействияФормы;

	Порядок.Установить("Код");

КонецПроцедуры // ПриОткрытии()

// Обработчик события "ОбработкаЗаписиНовогоОбъекта" формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Объект.Ссылка;

КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Открыть отчет"
// командной панели формы.
//
Процедура ДействияФормыКоманднаяПанельОткрытьОтчет(Кнопка)

	ТекЭлемент = ЭлементыФормы.СправочникСписок.ТекущиеДанные;

	Если ТекЭлемент = Неопределено Тогда
		Предупреждение("Выберите отчет!");
		Возврат;
	КонецЕсли;
	
	Если Не ТекЭлемент.ЭтоГруппа Тогда
		ОткрытьФормуОтчета(ТекЭлемент.ИсточникОтчета);
	КонецЕсли;

КонецПроцедуры // ДействияФормыКоманднаяПанельОткрытьОтчет()

// Процедура вызывается при нажатии кнопки "Скрыть"
// командной панели формы.
//
Процедура ДействияФормыКоманднаяПанельСкрыть(Кнопка)

	ТекДанные = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Предупреждение("Выберите отчет!");
		Возврат;
	КонецЕсли;

	ТекЭлемент = ТекДанные.Ссылка;
	НачатьТранзакцию();
		
	Если ТекЭлемент.ЭтоГруппа Тогда
		
		СпрРеглОтчеты = Справочники.РегламентированныеОтчеты;
		
		Выборка = СпрРеглОтчеты.ВыбратьИерархически(ТекЭлемент,ТекЭлемент.Владелец);
		Пока Выборка.Следующий() Цикл
			
			Попытка
				ЭлементСправочника = Выборка.ПолучитьОбъект();
				ЭлементСправочника.Заблокировать();
				ЭлементСправочника.НеПоказыватьВСписке = Истина;
				ЭлементСправочника.Записать();
				ЭлементСправочника.Разблокировать();
			Исключение
				// Нельзя модифицировать данные объекта
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент справочника:
				|" + ОписаниеОшибки());
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе
		
		Попытка 
			ЭлементСправочника = ТекЭлемент.ПолучитьОбъект();
			ЭлементСправочника.Заблокировать();
			ЭлементСправочника.НеПоказыватьВСписке = Истина;
			ЭлементСправочника.Записать();
			ЭлементСправочника.Разблокировать();
		Исключение
			Предупреждение("Не удалось записать элемент справочника:
			|" + ОписаниеОшибки());
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
	КонецЕсли;

	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ДействияФормыКоманднаяПанельСкрыть()

// Процедура вызывается при нажатии кнопки "Показать"
// командной панели формы.
//
Процедура ДействияФормыКоманднаяПанельПоказатьСкрытые(Кнопка)
	
	Справочники.РегламентированныеОтчеты.ПолучитьФорму("ФормаВыбораЭлементовДляВосстановленияПоказа", ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры // ДействияФормыКоманднаяПанельПоказатьСкрытые()

// Процедура - обработчик события "Действие" кнопки 
// КоманднаяПанельПереместитьВверх командной панели формы.
//
Процедура ДействияФормыКоманднаяПанельПереместитьВверх(Кнопка)

	ИзменитьКодЭлемента(-1);

КонецПроцедуры // ДействияФормыКоманднаяПанельПереместитьВверх()

// Процедура - обработчик события "Действие" кнопки 
// КоманднаяПанельПереместитьВниз командной панели формы.
//
Процедура ДействияФормыКоманднаяПанельПереместитьВниз(Кнопка)

	ИзменитьКодЭлемента(1);

КонецПроцедуры // ДействияФормыКоманднаяПанельПереместитьВниз()

// Процедура - обработчик события "Действие" кнопки 
// КоманднаяПанельОбновить командной панели формы.
//
Процедура ДействияФормыКоманднаяПанельОбновить(Кнопка)

	ФормаОбработкаОбновлениеОтчетности = Обработки.ОбновлениеРегламентированнойОтчетности.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма);
	ФормаОбработкаОбновлениеОтчетности.Открыть();

КонецПроцедуры // ДействияФормыКоманднаяПанельОбновить()

Процедура ДействияФормыПодробнееОФормах(Кнопка)
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Выберите отчет!");
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка.ЭтоГруппа = Истина Тогда
		Предупреждение("Функция недоступна для группы отчетов!");
		Возврат;
	КонецЕсли;
	
	ФормаПодробнееОФормах = РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ПодробнееОбОтчете");
	ФормаПодробнееОФормах.НачальноеЗначениеВыбора = ЭлементыФормы.СправочникСписок.ТекущиеДанные.Ссылка;
	ФормаПодробнееОФормах.ОткрытьМодально();

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик события "Выбор" табличного поля "Список" формы.
//
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Не ВыбраннаяСтрока.ЭтоГруппа Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуОтчета(ВыбраннаяСтрока.ИсточникОтчета);
	КонецЕсли; 
	
КонецПроцедуры // СписокВыбор()

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Список" формы.
//
Процедура СписокПередНачаломИзменения(Элемент, Отказ)

	Если Элемент.ТекущиеДанные.Ссылка.Предопределенный Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // СписокПередНачаломИзменения()

// Процедура - обработчик события "ПередУдалением" табличного поля "Список" формы.
//
Процедура СписокПередУдалением(Элемент, Отказ)

	Если Элемент.ТекущиеДанные.Ссылка.Предопределенный Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // СписокПередУдалением()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Список" формы.
//
Процедура СписокПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элемент.ТекущиеДанные;

	Если Не ТекущиеДанные = Неопределено Тогда
		ПоказатьОписаниеОтчета(ТекущиеДанные);
		УстановитьВидимостьКнопок(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры // СписокПриАктивизацииСтроки()

// Процедура - обработчик события "ЗаписанНовыйОбъект" табличного поля "Список" формы.
//
Процедура СписокОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)

	ЭлементыФормы.СправочникСписок.ТекущаяСтрока = Объект.Ссылка;

КонецПроцедуры // СписокОбработкаЗаписиНовогоОбъекта()

// Процедура - обарботчик события "ПриВыводеСтроки" табличного поля "СправочникСписок" формы.
// Меняет текст к колонке "Наименование", в случае, если выводимой строке соответствует элемент
// справочника с признаком использования внешнего отчета.
Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Наименование.Текст = ДанныеСтроки.Наименование + ?(ДанныеСтроки.ВнешнийОтчетИспользовать = Истина, " (внешний)", "");
	
КонецПроцедуры

Процедура ДействияФормыЖурнал(Кнопка)
	
	Обработки.ОбщиеОбъектыРегламентированнойОтчетности.ПолучитьФорму("УправлениеОтчетностью").Открыть();
	
КонецПроцедуры

СправочникСписок.Колонки.Добавить("Описание");
СправочникСписок.Колонки.Добавить("ВнешнийОтчетИспользовать");
СправочникСписок.Колонки.Добавить("ИсточникОтчета");
