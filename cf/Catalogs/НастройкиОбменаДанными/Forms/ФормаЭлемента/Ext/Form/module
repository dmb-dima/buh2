
Перем мМассивВключенныхНастроек;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;

Перем мОбщаяТаблицаНастроекПолейПоиска Экспорт;
Перем мОбщаяТаблицаНастроекВыгрузки Экспорт;

// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
///////////////////////////////////////////////////////////////////////////////

// Процедура устанавливает недоступность изменения типа узла
// Процедура реализована для использования из общей формы управления списками настроек
//
Процедура УстановитьНедоступностьИзмененияТипаУзла(МассивТипов) Экспорт

	Если МассивТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.УзелИнформационнойБазы.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	//ЭлементыФормы.УзелИнформационнойБазы.ВыбиратьТип = (МассивТипов.Количество() > 1); 

КонецПроцедуры

// процедура устанавливает доступность пароля архивации файлов при отправке
Процедура УстановитьДоступностьАрхивацииФайловПриОтправке()
	
	ЭлементыФормы.НадписьПарольНаЗапись.Доступность = ВыполнятьАрхивациюФайловОбмена;
	ЭлементыФормы.ПарольНаОтправку.ТолькоПросмотр = НЕ ВыполнятьАрхивациюФайловОбмена;
	
КонецПроцедуры

// процедура устанавливает активной нужную страницу дополнительных настроек
Процедура УстановитьСтраницуДополнительныхНастроек()
	
	// в зависимости от типа обмена устанавливаем нужную настройку
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.Файловый;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.FTPОбмен;
		
	ИначеЕсли ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
		
		ЭлементыФормы.ПанельНастройкиТипов.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиТипов.Страницы.ОбменЧерезCOM;
		
	КонецЕсли;
	
КонецПроцедуры

// процедура устанавливает в качестве реквизита узел обмена - единственный узел для обмена данными с текущей ИБ
Процедура УстановитьЕдинственныйУзелДляОбмена()
	
	ТекущийПодходящийУзел = Неопределено;
	// пробегаем все узлы всех планов обмена
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		ТекущийПланОбмена = ПланыОбмена[ПланОбмена.Имя];
		ТекущийУзелИБ = ТекущийПланОбмена.ЭтотУзел();
		
		// все узлы пробегаем
		ВыборкаУзлов = ТекущийПланОбмена.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			
			Узел = ВыборкаУзлов.Ссылка;
			Если (Узел <> ТекущийУзелИБ) Тогда
				
				Если ТекущийПодходящийУзел <> Неопределено Тогда
					// уже нашли второй узел с которым можно обменяться...
					Возврат;
				КонецЕсли;
				
				ТекущийПодходящийУзел = Узел; 
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТекущийПодходящийУзел <> Неопределено Тогда
		
		УзелИнформационнойБазы = ТекущийПодходящийУзел;
		
	КонецЕсли;		
	
КонецПроцедуры

// СОБЫТИЯ
///////////////////////////////////////////////////////////////////////////////

// СОБЫТИЯ ПРИ ВЫБОРЕ И ПРОСМОТРЕ КАТАЛОГА

// при изменении каталога
Процедура ОбработчикПриИзмененииКаталога(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога 
Функция ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РезультатВыбора = РаботаСФайлами.ВыбратьКаталог(Элемент.Значение);
	
	Возврат РезультатВыбора;
	
КонецФункции

// при нажатии на "Открытие" у каталога 
Процедура ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработчикОткрытиеДляФайла(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при открытии формы
Процедура ПриОткрытии()
	
	Если ЭтоНовый() 
		И ПараметрОбъектКопирования = Неопределено 
		И ПараметрОснование = Неопределено Тогда
		
		// ищем те узлы с которыми может текущий пользователь обмениваться
		УстановитьЕдинственныйУзелДляОбмена();
		
		ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаЗначениямиПоУмолчанию(ЭтотОбъект);
						
	КонецЕсли;	
			
	УстановитьСтраницуДополнительныхНастроек();
		
	ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();
			
	УстановитьДоступностьАрхивацииФайловПриОтправке();
				
	УстановитьДоступностьЭлементовРедактированияОбменаПоПравиламОбмена();
	
	УстановитьДоступностьЭлементовРедактированияФоновыйОбмен();
	
	УстановитьНадписиУЭлементовСПравиламиОбмена();
				
	ОбработатьДоступностьОтправкиТолькоПриУспешномПриеме();
	
	ВыполнятьОтложенныеДвиженияПослеЗагрузкиДанных = НЕ ВыполнитьОтложенноеПроведениеДокументовПоРасписанию;
					
	ЭтаФорма.Модифицированность = ЭтоНовый();
	
КонецПроцедуры

// при изменении типа настройки
Процедура ТипНастройкиПриИзменении(Элемент)
	
	Если ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение Тогда
				
		Если НЕ OnLineОбмен Тогда
		
			ОбщегоНазначения.СообщитьОбОшибке("Режим обмена через COM - соединение возможно только для обмена по правилам обмена");
			
			ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
			
		Иначе
			
			БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
			
			Если БазоваяПоставка Тогда
				
				ОбщегоНазначения.СообщитьОбОшибке("В базовой версии недоступен Режим обмена через COM - соединение");	
				
				ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс;
				
			Иначе
				
				ПроизводитьОтправкуСообщений = Истина;
				
			КонецЕсли;			
			
		КонецЕсли;		
				
	КонецЕсли;
	
	УстановитьСтраницуДополнительныхНастроек();
	
КонецПроцедуры

// событие при нажатии на кнопку выбора у каталога обмена информацией
Процедура КаталогОбменаИнформациейНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РезультатВыбора = ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);
		
КонецПроцедуры

// при изменении каталога обмена информацией
Процедура КаталогОбменаИнформациейПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);	
	
КонецПроцедуры

// при изменении FTP адреса обмена
Процедура FTPАдресОбменаПриИзменении(Элемент)
	
	Элемент.Значение = СокрЛП(Элемент.Значение);
	
КонецПроцедуры

// перед записью объекта
Процедура ПередЗаписью(Отказ)
	
	ВыполнитьОтложенноеПроведениеДокументовПоРасписанию = НЕ ВыполнятьОтложенныеДвиженияПослеЗагрузкиДанных;
	
	// предложим создать каталог обмена если его не обнаружили
	Если ЭтоНовый()
		И ТипНастройки = Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс
		И (ПроизводитьПриемСообщений ИЛИ ПроизводитьОтправкуСообщений)
		И Не ПустаяСтрока(КаталогОбменаИнформацией) Тогда
		
		// существует ли указанный каталог обмена данными
		РаботаСФайлами.ПроверитьСуществованиеКаталога(КаталогОбменаИнформацией);
		
	КонецЕсли;
	
КонецПроцедуры

// при нажатии на "Открытие" у каталога обмена данными
Процедура КаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// при изменении флажка архивация при записи изменений
Процедура ВыполнятьАрхивациюФайловОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьАрхивацииФайловПриОтправке();
	
КонецПроцедуры

// при нажатии на кнопку проверить FTP соединение
Процедура ПроверитьНажатие(Элемент)
	
	РезультатПроверки = ПроцедурыОбменаДанными.ПроверитьНастройкиFTPПодключения(ЭтотОбъект);
	
	Если РезультатПроверки Тогда
		Предупреждение("Проверка успешно пройдена !" , 30, "Проверка FTP подключения");
	Иначе
		Предупреждение("Возникли ошибки при подключении !", 30, "Проверка FTP подключения");
	КонецЕсли;
	
КонецПроцедуры

// открытие каталога FTP
Процедура FTPАдресОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	// открываем каталог который в настройках
	ЗапуститьПриложение("ftp://" + ПроцедурыОбменаДанными.НормализоватьFTPАдрес(Элемент.Значение));
	
КонецПроцедуры

Функция ПроверитьНеобходимостьЗаписиНастройкиОбмена()
	
	Если Модифицированность Тогда
		
		ОтветНаВопрос = Вопрос("Данные настроек обмена были изменены. Для Выполнения операции необходимо сохранить изменения. Сохранить внесенные в настройку обмена изменения?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЭтотОбъект.Записать();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// событие при нажатии на кнопку произвести обмен
Процедура ПроизвестиОбменДаннымиДляНастройкиОбмена()
	
	// надо проверить редактируется ли объект
	Если НЕ ПроверитьНеобходимостьЗаписиНастройкиОбмена() Тогда
		
		Возврат;
				
	КонецЕсли; 
	
	ПроцедурыОбменаДанными.ВыполнитьОбменДаннымиПоПроизвольнойНастройке(ЭтотОбъект.Ссылка, , глЗначениеПеременной("глОбработкаАвтоОбменДанными"));
			
КонецПроцедуры

// произвести обмен данными
Процедура ДействияФормыПроизвестиОбменДанными(Кнопка)
	
	ПроизвестиОбменДаннымиДляНастройкиОбмена();
	
КонецПроцедуры

// произвести обмен данными
Процедура ДействияФормыДействиеЧтениеИЗаписьСообщений(Кнопка)
	
	ПроизвестиОбменДаннымиДляНастройкиОбмена();
	
КонецПроцедуры

Функция ПолучитьДанныеПравилОбмена()
	
	ИмяФайлаПравил = ПроцедурыОбменаДаннымиКлиент.ПолучитьИмяФайлаПравилДляВыбораПравилОбмена();
	
	Если Не ЗначениеЗаполнено(ИмяФайлаПравил) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Текст = Новый ЧтениеТекста(ИмяФайлаПравил, КодировкаТекста.UTF8);
	ТекстПравилОбмена = Текст.Прочитать();
	
	ХранилищеЗначения = Новый ХранилищеЗначения(ТекстПравилОбмена);	
	
	Возврат ХранилищеЗначения;
	
КонецФункции

Процедура ЗаписатьДанныеПравилОбмена(Хранилище)
	
	ИмяФайлаПравил = ПроцедурыОбменаДаннымиКлиент.ПолучитьИмяФайлаПравилДляСохраненияПравилОбмена();
	
	Если Не ЗначениеЗаполнено(ИмяФайлаПравил) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПравилОбмена = Хранилище.Получить();
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаПравил, КодировкаТекста.UTF8);
	ЗаписьТекста.Записать(ТекстПравилОбмена);
	ЗаписьТекста.Закрыть();	
	
	Предупреждение("Файл с правилами успешно сохранен.");
	
КонецПроцедуры

Процедура ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения()
	
	Если ТипИнформационнойБазыДляПодключения Тогда
		ЭлементыФормы.ПанельПодключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельПодключениеИБПриемник.Страницы.ПодключениеФайловаяИБ;
	Иначе
		ЭлементыФормы.ПанельПодключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельПодключениеИБПриемник.Страницы.ПодключениеСервернаяИБ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ОпределитьЗакладкуПоТипуИнформационнойБазыДляПодключения();		
	
КонецПроцедуры

Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьПользовательДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.НадписьПароль.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Процедура ТестПодключенияНажатие(Элемент)
	
	ОбработкаОбмена = Обработки.ОбменДаннымиXML.Создать();
	
	ПроцедурыОбменаДанными.УстановитьПараметрыCOMСоединенияСПриемником(ОбработкаОбмена, ЭтотОбъект);
	
	РезультатПодключения = ОбработкаОбмена.ВыполнитьПодключениеКИБПриемнику();
	
	Если РезультатПодключения <> Неопределено Тогда
		
		Предупреждение("Подключение к информационной базе приемнику произошло успешно.");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогНачалоВыбора(Элемент, СтандартнаяОбработка);	
		
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементовРедактированияОбменаПоПравиламОбмена()
	
	ЭлементыФормы.НадписьПравилаОбмена.Доступность = OnLineОбмен;
	
	ЭлементыФормы.ЗагрузитьПравила.Доступность = OnLineОбмен;
	ЭлементыФормы.СохранитьПравила.Доступность = OnLineОбмен;
	ЭлементыФормы.ИнформацияОПравилах.Доступность = OnLineОбмен;
	ЭлементыФормы.ПроверитьПравилаОбмена.Доступность = OnLineОбмен;
	
	ЭлементыФормы.НадписьТипДобавленияДанныхИзФоновогоОбмена.Доступность = OnLineОбмен;
	ЭлементыФормы.ДобавлениеОбъектовИзФоновогоОбмена.Доступность = OnLineОбмен;
	ЭлементыФормы.НадписьКоличествоДополняемыхОбъектов.Доступность = OnLineОбмен;
	ЭлементыФормы.КоличествоОбъектовДляФоновогоОбмена.Доступность = OnLineОбмен;
	
	ЭлементыФормы.НадписьУзелФоновогоОбмена.Доступность = OnLineОбмен;
	ЭлементыФормы.УзелФоновогоОбмена.Доступность = OnLineОбмен;
	
	ЭлементыФормы.ПанельНастройкиОбмена.Страницы.ОбменПоПравилам.Видимость = OnLineОбмен;
		
	ЭлементыФормы.НадписьКоличествоОшибокДляЗавершения.Доступность = OnLineОбмен И ПослеОшибкиОтложенногоПроведенияПрекратитьОперации;
	ЭлементыФормы.КоличествоОшибокОтложенногоПроведенияДляПрекращенияОперации.Доступность = OnLineОбмен И ПослеОшибкиОтложенногоПроведенияПрекратитьОперации;
	
КонецПроцедуры

Процедура OnLineОбменПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовРедактированияОбменаПоПравиламОбмена();
	
КонецПроцедуры

Процедура УстановитьНадписиУЭлементовСПравиламиОбмена()
	
	ТекстНадписи = "Правила выгрузки в базу обмена";
	РазмерСтроки = ПолучитьДлинуСтрокиХранилища(ПравилаОбмена);
	Если РазмерСтроки <> 0 Тогда
		ТекстНадписи = ТекстНадписи + " (" + Строка(Цел(РазмерСтроки/1024)) + " Кб)";		
	КонецЕсли;
	ЭлементыФормы.НадписьПравилаОбмена.Заголовок = ТекстНадписи;
	
	ТекстНадписи = "Правила выгрузки из базы обмена в текущую базу";
	РазмерСтроки = ПолучитьДлинуСтрокиХранилища(ПравилаОбменаДляПриемника);
	Если РазмерСтроки <> 0 Тогда
		ТекстНадписи = ТекстНадписи + " (" + Строка(Цел(РазмерСтроки/1024)) + " Кб)";		
	КонецЕсли;
	ЭлементыФормы.НадписьПравилаОбменаПриемник.Заголовок = ТекстНадписи;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементовРедактированияФоновыйОбмен()
	
	ДоступностьДляРедактирования = OnLineОбмен и (ДобавлениеОбъектовИзФоновогоОбмена <> 0); 
	
	ЭлементыФормы.НадписьКоличествоДополняемыхОбъектов.Доступность = ДоступностьДляРедактирования;
	ЭлементыФормы.КоличествоОбъектовДляФоновогоОбмена.Доступность = ДоступностьДляРедактирования;
	
КонецПроцедуры

Процедура ДобавлениеОбъектовИзФоновогоОбменаПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовРедактированияФоновыйОбмен();	
	
КонецПроцедуры

Процедура ЗагрузитьПравилаНажатие(Элемент)
	
	ДанныеПравилОбмена = ПолучитьДанныеПравилОбмена();
	
	Если ДанныеПравилОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ПравилаОбмена = ДанныеПравилОбмена;
	
	УстановитьНадписиУЭлементовСПравиламиОбмена();	
	
КонецПроцедуры

Процедура ЗагрузитьПравила1Нажатие(Элемент)
	
	ДанныеПравилОбмена = ПолучитьДанныеПравилОбмена();
	
	Если ДанныеПравилОбмена = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПравилаОбменаДляПриемника = ДанныеПравилОбмена;	
	
	УстановитьНадписиУЭлементовСПравиламиОбмена();
	
КонецПроцедуры

Процедура СохранитьПравилаНажатие(Элемент)
	
	 ЗаписатьДанныеПравилОбмена(ПравилаОбмена);	
	
КонецПроцедуры

Процедура СохранитьПравила1Нажатие(Элемент)
	
	ЗаписатьДанныеПравилОбмена(ПравилаОбменаДляПриемника);	
	
КонецПроцедуры

Процедура ИмяФайлаПротоколаОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИмяФайлаПротокола = ПроцедурыОбменаДаннымиКлиент.ПолучитьИмяФайлаПротоколаОбмена();
	
	Если ПустаяСтрока(ИмяФайлаПротокола) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайлаПротоколаОбменаOnLineОбмен = ИмяФайлаПротокола;
	
КонецПроцедуры

Процедура ИмяФайлаПротоколаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбработчикКаталогОткрытие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ОбработчикПриИзмененииКаталога(Элемент);
	
КонецПроцедуры

Процедура ПроверитьПравилаОбменаНажатие(Элемент)
	
	// проверка что бы в правилах обмена в правилах выгрузки были бы те же объекты что и в плане обмена
	ПроцедурыОбменаДаннымиКлиент.ВыполинтьПоискСоотвестствияПравилВыгрузкиИДанныхПланаОбмена(ЭтотОбъект);
	
КонецПроцедуры

Процедура ДействияФормыОткрытьМониторОбменов(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьМониторОбменовДляНастройки(Ссылка, ЭтаФорма);	
		
КонецПроцедуры

Процедура ТипНастройкиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДопустимыхЗначений = Новый СписокЗначений;
	СписокДопустимыхЗначений.Добавить(Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезФайловыйРесурс);
	СписокДопустимыхЗначений.Добавить(Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезFTPРесурс);
		
	Если OnLineОбмен Тогда
		
		БазоваяПоставка = (Найти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0);
		
		Если Не БазоваяПоставка Тогда
		
			СписокДопустимыхЗначений.Добавить(Перечисления.ТипыАвтоматическогоОбменаДанными.ОбменЧерезComСоединение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Выб = ВыбратьИзСписка(СписокДопустимыхЗначений, Элемент, СписокДопустимыхЗначений.НайтиПоЗначению(ТипНастройки));
	
	Если Выб <> Неопределено
		И ЗначениеЗаполнено(Выб.Значение) Тогда
		
		ТипНастройки = Выб.Значение;
		ТипНастройкиПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеОшибкиОтложенногоПроведенияПрекратитьОперацииПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовРедактированияОбменаПоПравиламОбмена();
	
КонецПроцедуры

Процедура ДействияФормыЗарегистрироватьВсеОбъектыДляОбмена(Кнопка)
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыОбменаДаннымиКлиент.ЗарегистрироватьВсеОбъектыДляОбмена(УзелИнформационнойБазы);
	
КонецПроцедуры

Процедура ИнформацияОПравилахНажатие(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ПоказатьПоНастройкеОбменаИнформациюОПравилах(ЭтотОбъект, Истина);	
	
КонецПроцедуры

Процедура ИнформацияОПравилах1Нажатие(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ПоказатьПоНастройкеОбменаИнформациюОПравилах(ЭтотОбъект, Ложь);
	
КонецПроцедуры

Процедура ЗапуститьОтложенноеПроведение(ПодПолнымиПравами = Ложь)
	
	// надо проверить редактируется ли объект
	Если НЕ ПроверитьНеобходимостьЗаписиНастройкиОбмена() Тогда
		
		Возврат;
				
	КонецЕсли; 
	
	Если ПодПолнымиПравами Тогда
		
		ЭтоФайловаяИБ = ОпределитьЭтаИнформационнаяБазаФайловая();
		
		Если НЕ ЭтоФайловаяИБ Тогда
			Сообщить("Выполнение отложенных операций с документами. Начало выполнения: " + ТекущаяДата() + Символы.ПС);
		КонецЕсли;
		
		ПроцедурыОбменаДаннымиПолныеПрава.ВыполнитьОтложенныеДвиженияПоНастройкеОбменаПодПолнымиПравамиНаСервере(Ссылка);
		
		Если НЕ ЭтоФайловаяИБ Тогда
			Сообщить("Выполнение отложенных операций с документами. Окончание выполнения: " + ТекущаяДата());
		КонецЕсли;
		
	Иначе
	
		ФормаОтображения = ПолучитьОбщуюФорму("РезультатыПроведения");
		
		ПроцедурыОбменаДанными.ВыполнитьОтложенныеДвиженияПоНастройкеОбмена(ЭтотОбъект, ФормаОтображения);	
	
	КонецЕсли;		
	
КонецПроцедуры

Процедура ЗапуститьОтложенныеДвиженияДокументовНажатие(Элемент)
	
	ЗапуститьОтложенноеПроведение(Ложь);
	
КонецПроцедуры

Процедура ЗапуститьОтложенныеДвиженияДокументовПодПолнымиПравамиНажатие(Элемент)
	
	ЗапуститьОтложенноеПроведение(Истина);
	
КонецПроцедуры

Процедура ОбработатьДоступностьОтправкиТолькоПриУспешномПриеме()
	
	ЭлементыФормы.ПроизводитьОтправкуТолькоПриУспешномПриеме.Доступность = ПроизводитьПриемСообщений
		И ПроизводитьОтправкуСообщений;
	
КонецПроцедуры

Процедура ПроизводитьПриемСообщенийПриИзменении(Элемент)
	
	ОбработатьДоступностьОтправкиТолькоПриУспешномПриеме();
	
КонецПроцедуры

Процедура ПроизводитьОтправкуСообщенийПриИзменении(Элемент)
	
	ОбработатьДоступностьОтправкиТолькоПриУспешномПриеме();
	
КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	мМассивВключенныхНастроек.Очистить();
	
	Если ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТабличнаяЧастьДействий.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.НастройкиВыполненияОбмена.НастройкиОбмена КАК ТабличнаяЧастьДействий
	               |ГДЕ
	               |	ТабличнаяЧастьДействий.НастройкаОбмена = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	мМассивВключенныхНастроек = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НастройкиВыполненияОбменов.Обновить();
	
КонецПроцедуры

Процедура НастройкиВыполненияОбменовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если мМассивВключенныхНастроек.Найти(ДанныеСтроки.Ссылка) <> Неопределено Тогда
		
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
		
	КонецЕсли;		
	
КонецПроцедуры

Процедура НастройкиВыполненияОбменовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	Отказ = Истина;
	
	// надо проверить редактируется ли объект
	Если НЕ ПроверитьНеобходимостьЗаписиНастройкиОбмена() Тогда
		
		Возврат;
				
	КонецЕсли;
	
	ЭлементОбмена = Справочники.НастройкиВыполненияОбмена.СоздатьЭлемент();
	ЭлементОбмена.Заполнить(Ссылка);
	ЭлементОбмена.ПолучитьФорму().Открыть();
		
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовОписаниеНастройкиДляПользователяОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.ОткрытьФормуРедактированияТекста(ЭтаФорма, Элемент.Значение, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПроцедурыОбменаДаннымиКлиент.ОпределитьИмяВыгрузкиЭлементаПоСтрокеНастройки(Элемент);
	
	// новые настройки для обмена, которые не поддерживаются правилами обмена загружать нельзя
	Если НоваяСтрока Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ОбновлятьТаблицуИнформацииОПолях) Экспорт
	
	ПроцедурыОбменаДаннымиКлиент.ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника, ОбновлятьТаблицуИнформацииОПолях);
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкаВариантовПоискаОбъектовОбновитьНастройки(Кнопка)
	
	ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкаВыгрузкиДанныхОбновитьНастройки(Кнопка)
	
	ПроцедурыОбменаДаннымиКлиент.ВыполнитьЗагрузкуИнформацииОВозможныхНастройкахВыгрузки(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника, Истина);
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыОбменаДаннымиКлиент.НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(Этаформа, Элемент, СтандартнаяОбработка);
			
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.НастройкаНеПоддерживается Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
	ИначеЕсли ДанныеСтроки.ВариантПоискаНеПоддерживается Тогда
		
		ОформлениеСтроки.Ячейки.ИмяНастройкиДляПользователя.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		
		ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные.ОписаниеНастройкиДляПользователя = "";	
		ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные.ВариантПоискаНеПоддерживается = Ложь;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.НастройкаНеПоддерживается Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.Красный;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхНастройкаВыгрузкиПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(ЭлементыФормы, Элемент.Значение);
	
КонецПроцедуры

Процедура НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроцедурыОбменаДаннымиКлиент.НастройкаВыгрузкиДанныхПриПолученииДанных(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура КоманднаяПанельНастройкаВыгрузкиДанныхИзменитьНастройку(Кнопка)
	
	ПроцедурыОбменаДаннымиКлиент.ИзменитьНастройкиВыгрузкиДляВыделенныхСтрок(ЭлементыФормы);
	
КонецПроцедуры

мМассивВключенныхНастроек = Новый Массив();

мЖирныйШрифт = Новый Шрифт(,,Истина);
мОбычныйШрифт = Новый Шрифт();

мОбщаяТаблицаНастроекПолейПоиска = Неопределено;
мОбщаяТаблицаНастроекВыгрузки = Неопределено;
