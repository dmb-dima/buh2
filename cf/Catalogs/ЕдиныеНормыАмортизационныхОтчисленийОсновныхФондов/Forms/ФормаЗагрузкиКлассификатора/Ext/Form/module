Перем КоличествоЗагружаемыхОбъектов;
Перем НомерЗагружаемогоОбъекта;
Перем ФормаПрогрессора;

// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события формы ПередОткрытием
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ДеревоГрупп.Колонки.Добавить("Код");
//	ДеревоГрупп.Колонки.Добавить("Пометка");
	//ДеревоГрупп.Колонки.Добавить("Представление");
	ДеревоГрупп.Колонки.Добавить("Идентификатор");
	ДеревоГрупп.Колонки.Добавить("Наименование");
	
	ДеревоПолное.Колонки.Добавить("Код");
	ДеревоПолное.Колонки.Добавить("Пометка");
	ДеревоПолное.Колонки.Добавить("Представление");
	ДеревоПолное.Колонки.Добавить("Идентификатор");
	ДеревоПолное.Колонки.Добавить("ЭтоГруппа");
	ДеревоПолное.Колонки.Добавить("Процент");
	ДеревоПолное.Колонки.Добавить("Норма");
	ДеревоПолное.Колонки.Добавить("Наименование");
	

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик нажатия кнопки УстановитьПометки командной панели формы
//
Процедура КоманднаяПанельУстановитьПометки(Кнопка)
	
	УстановитьПометки(ДеревоГрупп, 1);
	УстановитьПометки(ДеревоПолное, 1);
	
КонецПроцедуры // КоманднаяПанельУстановитьПометки()

// Процедура - обработчик нажатия кнопки СнятьПометки командной панели формы
//
Процедура КоманднаяПанельСнятьПометки(Кнопка)
	
	УстановитьПометки(ДеревоГрупп, 0);
	УстановитьПометки(ДеревоПолное, 0);
	
КонецПроцедуры // КоманднаяПанельСнятьПометки()

// Процедура - обработчик изменения флажка в ДеревеГрупп
//
Процедура ДеревоГруппПриИзмененииФлажка(Элемент, Колонка)
	
	ТекСтрока = Элемент.ТекущаяСтрока;
	УстановитьПометкиВДереве(ТекСтрока);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки Загрузить
//
Процедура Загрузить(Кнопка)
	
	КоличествоЗагружаемыхОбъектов = 0;
	
	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка классификатора ЕНАОФ";
	ФормаПрогрессора.Значение = 0;
	ФормаПрогрессора.КомментарийОбработкиДанных  = "Построение списка загружаемых объектов ...";
	ФормаПрогрессора.Открыть();

	УстановитьПометкиВПолномДереве(ДеревоГрупп.Строки);

	ФормаПрогрессора.МаксимальноеЗначение = КоличествоЗагружаемыхОбъектов;
	ФормаПрогрессора.КомментарийОбработкиДанных = "Загрузка классификатора ЕНАОФ ...";

	НомерЗагружаемогоОбъекта = 0;
	
	ЗагрузитьСтроки(ДеревоПолное.Строки);
	
	ФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура - обработчик начала выбора ФайлаДанных
//
Процедура НачалоВыбораФайлаДанных(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                  =	"Файл данных классификатора ЕНАОФ|*.xml";
	ДиалогВыбораФайла.Заголовок               =	"Выберите файл данных классификатор ЕНАОФ";
	ДиалогВыбораФайла.ПредварительныйПросмотр =	Ложь;
	ДиалогВыбораФайла.Расширение              =	"xml";
	ДиалогВыбораФайла.ИндексФильтра           =	0;
	Если ПустаяСтрока(Элемент.Значение) тогда
		ДиалогВыбораФайла.ПолноеИмяФайла = "enaof.xml";
	Иначе	
		ДиалогВыбораФайла.ПолноеИмяФайла = Элемент.Значение;
	КонецЕсли;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла =	Ложь;
	ДиалогВыбораФайла.МножественныйВыбор		  =	Ложь;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки прочитать
//
Процедура ПрочитатьНажатие(Элемент)
	
	ЗагрузитьГруппы();
	
КонецПроцедуры

// Открывает файл данных во внешнем приложении
//
// Параметры:
//  
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)
	
	ЗапуститьПриложение("explorer " + Элемент.Значение);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ УСТАНОВКИ ПОМЕТОК ДЕРЕВА ЗНАЧЕНИЙ

// Определяет значение флага по составу пометок коллекции строк.
//
// Параметры:
//  Строки         - коллекция строк дерева значений
//
// Возвращаемое значение:
//  Число, значение флага
// 
Функция ОпределитьЗначениеФлага(Строки)

	НайденыИстина = Ложь;
	НайденыЛожь   = Ложь;

	Для каждого Строка из Строки.Строки Цикл
		Если Строка.Пометка = 2 Тогда
			Возврат 2;
		КонецЕсли;
		
		Если (НЕ НайденыИстина) И (Строка.Пометка) Тогда
			НайденыИстина = Истина;
		КонецЕсли;
		Если (НЕ НайденыЛожь) И (НЕ Строка.Пометка) Тогда
			НайденыЛожь = Истина;
		КонецЕсли;
	КонецЦикла;

	Если      (НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 2;
	ИначеЕсли (НайденыИстина) И (НЕ НайденыЛожь) Тогда
		Возврат 1;
	ИначеЕсли (НЕ НайденыИстина) И (НайденыЛожь) Тогда
		Возврат 0;
	КонецЕсли;

КонецФункции // ОпределитьЗначениеФлага()

// Устанавливает пометку в вышестоящих элементах дерева
//
Процедура ОбходВерхнихУровней(ТекСтрока)

	ТекСтрока.Пометка = ОпределитьЗначениеФлага(ТекСтрока);
	
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // ОбходВерхнихУровней()

// Устанавливает пометку в подчиненных элементах дерева
//
Процедура ОбходНижнихУровней(ТекСтрока)
	
	Для Каждого Строка Из ТекСтрока.Строки Цикл
		Строка.Пометка = ТекСтрока.Пометка;
		ОбходНижнихУровней(Строка);
	КонецЦикла;
	
КонецПроцедуры // ОбходНижнихУровней()

// Устанавливает пометки в подчиненных строках и устанавливает пометку
// в текущей строке в зависимости от состава пометок в подчиненных строках.
// При значении параметра ИнтерактивнаяУстановкаПометок равным Истина
// возможна установка флага для строки с незаполненным источником.
//
// Параметры:
//  ТекСтрока                     - строка дерева значений
//  ИнтерактивнаяУстановкаПометок - флаг интерактивной установки пометки
// 
Процедура УстановитьПометкиВДереве(ТекСтрока) Экспорт

	ОбходНижнихУровней (ТекСтрока);
	Если Не ТекСтрока.Родитель = Неопределено Тогда
		ОбходВерхнихУровней(ТекСтрока.Родитель);
	КонецЕсли;
	
КонецПроцедуры // УстановитьПометкиВДереве()

// Процедура установки пометок в дереве
//
Процедура УстановитьПометки(Дерево, Пометка) Экспорт
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Строка.Пометка = Пометка;
		Если Строка.Строки.Количество() > 0 Тогда
			УстановитьПометки(Строка, Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьПометки()

// Процедура пересчета значений пометок (установка третьего состояния
// при изменении количества показателей)
//
Процедура ПересчетПометок(Дерево) Экспорт
	
	Для Каждого Узел Из Дерево.Строки Цикл
		
		Если Узел.Строки.Количество() = 0 Тогда
			Продолжить; // В оконечных элементах ничего не изменяем
		Иначе
			ПересчетПометок(Узел);
			Узел.Пометка = ОпределитьЗначениеФлага(Узел);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПересчетПометок()

//РАБОТА С КЛАССИФИКАТОРАМИ

// Процедура добавления реквизитов справочника в дерево значений
//
Процедура ДобавитьВДерево(Дерево,Ссылка,ЭтоГруппа,Родитель,Код,Наименование,Норма,Процент,ХранитьРеквизиты = Истина);

	СтрокаРодителя = Дерево.Строки.Найти(Строка(Родитель.Ссылка.УникальныйИдентификатор()),"Идентификатор",Истина);
	Если СтрокаРодителя = Неопределено тогда
		ТекСтрока = Дерево.Строки.Добавить();
	Иначе 
		ТекСтрока = СтрокаРодителя.Строки.Добавить();
	КонецЕсли;
	ТекСтрока.Наименование	= Наименование;
	ТекСтрока.Представление = Строка(Код) +"  "+Наименование;
	ТекСтрока.Код 			= Код;
	ТекСтрока.Идентификатор = Строка(Ссылка.УникальныйИдентификатор());
	ТекСтрока.Пометка 		= Ложь;
	Если ХранитьРеквизиты Тогда
		ТекСтрока.ЭтоГруппа = ЭтоГруппа;
		Если НЕ ЭтоГруппа тогда
			ТекСтрока.Норма   = Норма;
			ТекСтрока.Процент = Процент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Загрузка групп из XML в дерево значений 
//
Процедура ЗагрузитьГруппы()
	
	ФайлЧтение =  Новый ЧтениеXML;
	Если ПустаяСтрока(ФайлДанных) тогда
		Сообщить("Не выбран файл данных справочника ЕНАОФ");
		Возврат;
	КонецЕсли;
	Попытка 
		ФайлЧтение.ОткрытьФайл(ФайлДанных);
	Исключение
		Сообщить("Ошибка при открытии файла данных справочника ЕНАОФ");
		Возврат;
	КонецПопытки;
	
	ДеревоГрупп.Строки.Очистить();
	ДеревоПолное.Строки.Очистить();
	
	Попытка
		ФайлЧтение.Прочитать();
	Исключение
		Сообщить("Файла данных справочника ЕНАОФ поврежден");
		Возврат;
	КонецПопытки;
	
	КоличествоОбъектовXML = 0;
	Если ФайлЧтение.ПрочитатьАтрибут()	тогда
		КоличествоОбъектовXML = Число(ФайлЧтение.ПолучитьАтрибут("КоличествоЭлементов"));
	КонецЕсли;
	ФайлЧтение.Прочитать();

	ФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаПрогрессора.Значение = 0;
	ФормаПрогрессора.МаксимальноеЗначение = КоличествоОбъектовXML;
	ФормаПрогрессора.НаименованиеОбработкиДанных = "Загрузка классификатора ЕНАОФ";
	ФормаПрогрессора.КомментарийОбработкиДанных = "Чтение файла данных...";
	ФормаПрогрессора.Открыть();
	
    Сч = 0;
	Пока ВозможностьЧтенияXML(ФайлЧтение) Цикл
		ОбработкаПрерыванияПользователя();
		ТипXML = ПолучитьXMLТип(ФайлЧтение);
		Если ТипXML.ИмяТипа = "CatalogObject.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов" тогда
			// Чтение следующего узла
			ФайлЧтение.Прочитать();
			Ссылка 	  = ПрочитатьXML(ФайлЧтение, Тип("СправочникСсылка.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов"));
			ЭтоГруппа = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			ПометкаУдаления = ПрочитатьXML(ФайлЧтение, Тип("Булево"));
			Родитель 		= ПрочитатьXML(ФайлЧтение, Тип("СправочникСсылка.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов"));
			Код 		    = ПрочитатьXML(ФайлЧтение, Тип("Число"));
			Наименование 	= ПрочитатьXML(ФайлЧтение, Тип("Строка"));
			Если Не ЭтоГруппа Тогда
				Норма   = ПрочитатьXML(ФайлЧтение, Тип("Число"));
				Процент = ПрочитатьXML(ФайлЧтение, Тип("Число"));
			КонецЕсли;
	
			ДобавитьВДерево(ДеревоПолное,Ссылка,ЭтоГруппа,Родитель,Код,Наименование,Норма,Процент);
			Если ЭтоГруппа тогда
				ДобавитьВДерево(ДеревоГрупп,Ссылка,ЭтоГруппа,Родитель,Код,Наименование,Норма,Процент,Ложь);
			КонецЕсли;
			
			// Проверяем, что текущим узлом является КонецЭлемента
			Если ФайлЧтение.ТипУзла <> ТипУзлаXML.КонецЭлемента Тогда
				ВызватьИсключение "Ошибка чтения XML";
			КонецЕсли;
			// Чтение следующего узла для завершение чтения элемента
			ФайлЧтение.Прочитать();
		    Сч = Сч+1;
			ФормаПрогрессора.Значение = Сч;
			ФормаПрогрессора.КомментарийЗначения = "Обрабатывается " 
		 												   + Сч + " объект из " 
														   + КоличествоОбъектовXML;
		Иначе	
		    Сообщить("Файл данных не является справочником ЕНАОФ");
			ФормаПрогрессора.Закрыть();
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	ДеревоГрупп.Строки.Сортировать("Код", Истина);
	ФормаПрогрессора.Закрыть();
	
КонецПроцедуры

// Процедура загрузки помеченных строк из дерева в справочник
//
Процедура ЗагрузитьСтроки(Строки)

	
	// Ищем родителя
	Если Строки.Родитель <> Неопределено Тогда
		Родитель = Справочники.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.НайтиПоКоду(Строки.Родитель.Код);
		Если Не Родитель.Пустая() тогда
			// наш справочник с иерархией групп и элементов
			// подчинение элементу не предусмотрено
			Если Не Родитель.ЭтоГруппа тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Для НомСтроки = 0 по Строки.Количество()-1 Цикл
		ТекСтрока = Строки.Получить(НомСтроки);
		Если ТекСтрока.Пометка =  Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Пометка > 0 Тогда
			Объект = Неопределено;
			// Сначала поищем по коду
			Ссылка  = Справочники.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.НайтиПоКоду(ТекСтрока.Код);
			// не нашли - создаем
			Если Ссылка.Пустая() тогда 
				Если ТекСтрока.ЭтоГруппа Тогда
					Объект = Справочники.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.СоздатьГруппу();
					Объект.Код = ТекСтрока.Код; 
				Иначе
					Объект = Справочники.ЕдиныеНормыАмортизационныхОтчисленийОсновныхФондов.СоздатьЭлемент();
					Объект.Код = ТекСтрока.Код;
				КонецЕсли;				
			// нашли	
			// хранится то, же что и пытаемся загрузить
			ИначеЕсли Ссылка.ЭтоГруппа = ТекСтрока.ЭтоГруппа тогда
				// обновляем то,что уже хранится
				Если ЭлементыФормы.флПереписыватьОбъекты.Значение тогда 
					Объект = Ссылка.ПолучитьОбъект();
				КонецЕсли;
			Иначе
				// хранится элемент а у нас группа
				// ничего не делаем
				Сообщить("Элемент с кодом " + ТекСтрока.Код + " невозможно обновить!!!");
				Продолжить;
			КонецЕсли;
			ФормаПрогрессора.Значение = НомерЗагружаемогоОбъекта;
			ФормаПрогрессора.КомментарийЗначения = "Обрабатывается " 
														+ НомерЗагружаемогоОбъекта  
													   + " объект из " 
													   + КоличествоЗагружаемыхОбъектов;
			НомерЗагружаемогоОбъекта = НомерЗагружаемогоОбъекта + 1;

			Если Объект<> Неопределено тогда
				// обновляем  реквизиты
				Объект.Родитель 	= Родитель;
				Объект.Наименование = ТекСтрока.Наименование;
				Если Не ТекСтрока.ЭтоГруппа тогда
					Объект.НормаАмортизационныхОтчислений = ТекСтрока.Норма;
					Объект.ПроцентОтСтоимостиМашины 	  = ТекСтрока.Процент;
				КонецЕсли;
				Попытка 
					Объект.Записать();
					Состояние("Записан элемент " +ТекСтрока.Наименование);
				Исключение
					Сообщить("Ошибка при записи элемента с кодом " + ТекСтрока.Код + " !!!");
				КонецПопытки;
				ОбработкаПрерыванияПользователя();
			КонецЕсли;
			ОбработкаПрерыванияПользователя();
			ЗагрузитьСтроки(ТекСтрока.Строки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура помечает загружаемые в справочник объекты классификатора
// и разпомечает незагружаемые

Процедура УстановитьПометкиВПолномДереве(Строки)
	
	Для Каждого ТекСтрока из Строки Цикл
		СтрокаПолногоДерева = ДеревоПолное.Строки.Найти(ТекСтрока.Код,"Код",Истина);
		СтрокаПолногоДерева.Пометка = ТекСтрока.Пометка;
		Если ТекСтрока.Пометка >0 тогда
			КоличествоЗагружаемыхОбъектов = КоличествоЗагружаемыхОбъектов + 1;
		КонецЕсли;
		Если ТекСтрока.Строки.Количество() = 0 тогда
			Для Каждого ТекСтрокаПолногоДерева из СтрокаПолногоДерева.Строки Цикл
				ТекСтрокаПолногоДерева.Пометка = ТекСтрока.Пометка;
				Если ТекСтрока.Пометка >0 тогда
					КоличествоЗагружаемыхОбъектов = КоличествоЗагружаемыхОбъектов + 1;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		УстановитьПометкиВПолномДереве(ТекСтрока.Строки);
	КонецЦикла;
	
КонецПроцедуры










