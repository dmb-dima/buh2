Перем мИмяПараметраПередИзменением;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает данные таблицы параметров в виде Структуры.
//
// Возвращаемое значение:
//  СтруктураПараметрыОбработки - Структура
//
Функция ПолучитьСтруктуруПараметровИзТаблицы()
	
	СтруктураПараметрыОбработки = Новый Структура;
	
	// Заполнить структуру
	Для Каждого Параметр Из ТаблицаПараметрыОбработки Цикл
		
		СтруктураПараметрыОбработки.Вставить(Параметр.ИмяПараметра, Параметр.ЗначениеПараметра);
		
	КонецЦикла;
	
	Возврат СтруктураПараметрыОбработки;
	
КонецФункции // ПолучитьСтруктуруПараметровИзТаблицы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СОБЫТИЙ ФОРМЫ

// Процедура обработки события "ПриОткрытии" формы.
// Заполняет таблицу параметров.
//
Процедура ПриОткрытии()
	
	// Получить структуру параметров из ХранилищаЗначения
	СтруктураПараметрыОбработки = ХранилищеПараметрыОбработки.Получить();
	
	// Отобразить структуру параметров в таблице
	Если СтруктураПараметрыОбработки = Неопределено Тогда
		
		СтруктураПараметрыОбработки = Новый Структура;
		
	ИначеЕсли ТипЗнч(СтруктураПараметрыОбработки) = Тип("Структура") Тогда
		
		// Заполнить таблицу параметров
		Для Каждого Параметр Из СтруктураПараметрыОбработки Цикл
			
			СтрокаТаблицы = ТаблицаПараметрыОбработки.Добавить();
			
			СтрокаТаблицы.ИмяПараметра      = Параметр.Ключ;
			СтрокаТаблицы.ЗначениеПараметра = Параметр.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБРАБОТКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура обработки действия "Принять" элемента формы ОсновныеДействияФормы.
// Закрывает форму, возвращает структуру параметров в виде ХранилищаЗначения.
//
Процедура ОсновныеДействияФормыПринять(Кнопка)
	
	// Получить структуру из таблицы параметров
	СтруктураПараметрыОбработки = ПолучитьСтруктуруПараметровИзТаблицы();
	
	// Получить ХранилищеЗначение из структуры параметров
	ХранилищеПараметрыОбработки = Новый ХранилищеЗначения(СтруктураПараметрыОбработки);
	
	// Закрыть форму. Вернуть хранилище параметров
	Закрыть(ХранилищеПараметрыОбработки);
	
КонецПроцедуры // ОсновныеДействияФормыПринять()

// Процедура обработки действия "Отмена" элемента формы ОсновныеДействияФормы.
// Закрывает форму, возвращает Неопределено, признак, что не надо принимать изменения.
//
Процедура ОсновныеДействияФормыОтмена(Кнопка)
	
	Закрыть(Неопределено);
	
КонецПроцедуры // ОсновныеДействияФормыОтмена()

// Процедура обработки события "ПередОкончаниемРедактирования" элемента формы ПараметрыОбработки.
// Проверяет имя параметра, при необходимости делает откат изменений.
//
Процедура ПараметрыОбработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ИмяПараметра = ТекущиеДанные.ИмяПараметра;
		
		// Проверить если имя параметра не пустое
		Если ПустаяСтрока(ИмяПараметра) Тогда
			
			Предупреждение("Имя параметра не может быть пустым!");
			
			// Если новая строка, удалить строку
			Если НоваяСтрока Тогда
				
				ТаблицаПараметрыОбработки.Удалить(Элемент.ТекущаяСтрока);
				
			// Иначе, вернуть предыдущее имя
			Иначе
				ТекущиеДанные.ИмяПараметра = мИмяПараметраПередИзменением;
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
		// Проверить если имя параметра можно использовать в качестве ключа структуры
		Попытка
			
			Стр = Новый Структура();
			Стр.Вставить(ИмяПараметра);
			
		Исключение
			
			Предупреждение("Задано неправильное имя параметра!");
			
			// Если новая строка, удалить строку
			Если НоваяСтрока Тогда
				
				ТаблицаПараметрыОбработки.Удалить(Элемент.ТекущаяСтрока);
				
			// Иначе, вернуть предыдущее имя
			Иначе
				ТекущиеДанные.ИмяПараметра = мИмяПараметраПередИзменением;
			КонецЕсли;
			
			Возврат;
			
		КонецПопытки;
		
		// Проверить если есть параметры с таким же именем
		КоличествоПараметров = 0;
		
		Для Каждого Параметр Из ТаблицаПараметрыОбработки Цикл
			
			Если Врег(ИмяПараметра) = ВРег(Параметр.ИмяПараметра) Тогда
				КоличествоПараметров = КоличествоПараметров + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		// Если имена параметров повторяются, откатить изменения
		Если КоличествоПараметров > 1 Тогда
			
			Ответ = Вопрос("Параметр с именем """ + ИмяПараметра + """ уже существует. Отменить ввод?", РежимДиалогаВопрос.ДаНет);
				
			Если Ответ = КодВозвратаДиалога.Да Тогда
				
				// Если новая строка, удалить строку
				Если НоваяСтрока Тогда
					
					ТаблицаПараметрыОбработки.Удалить(Элемент.ТекущаяСтрока);
					
				// Иначе, вернуть предыдущее имя
				Иначе
					ТекущиеДанные.ИмяПараметра = мИмяПараметраПередИзменением;
				КонецЕсли;
				
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПараметрыОбработкиПередОкончаниемРедактирования()

// Процедура обработки события "ПередНачаломИзменения" элемента формы ПараметрыОбработки.
// Сохраняет значение колонки ИмяПараметра перед изменение.
// Сохраненное значение будет использовано в случае отката редактирования.
//
Процедура ПараметрыОбработкиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	мИмяПараметраПередИзменением = Неопределено;
	
	Если ТекущиеДанные <> Неопределено Тогда
		мИмяПараметраПередИзменением = ТекущиеДанные.ИмяПараметра;
	КонецЕсли;
	
КонецПроцедуры // ПараметрыОбработкиПередНачаломИзменения()