
Процедура СправочникСписокСчетБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти  = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	КолонкиТабличнойЧасти = ЭлементыФормы.СправочникСписок.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СтрокаТабличнойЧасти.СубконтоЗатрат1, КолонкиТабличнойЧасти.Субконто1,
		СтрокаТабличнойЧасти.СубконтоЗатрат2, КолонкиТабличнойЧасти.Субконто2,
		СтрокаТабличнойЧасти.СубконтоЗатрат3, КолонкиТабличнойЧасти.Субконто3);
								 
	УстановитьДоступностьСубконтоЗатрат();

КонецПроцедуры // СправочникСписокСчетБУПриИзменении()


Процедура СправочникСписокСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры
 
 // Процедура - обработчик события "НачалоВыбора" поля ввода Субконто
// в строке табличной части "Прочее".
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, , СписокПараметров);

КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда
		
		ДанныеТекущейСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата",         ТекущаяДата());
	    Если Учет = "Бух" Тогда
			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатрат);
			СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", ДанныеТекущейСтроки.СубконтоЗатрат1, ДанныеТекущейСтроки.СубконтоЗатрат2, ДанныеТекущейСтроки.СубконтоЗатрат3));
			СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады", ДанныеТекущейСтроки.СубконтоЗатрат1, ДанныеТекущейСтроки.СубконтоЗатрат2, ДанныеТекущейСтроки.СубконтоЗатрат3));
			
		КонецЕсли; 
		
	ИначеЕсли Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения  Тогда
		
		ДанныеТекущейСтроки = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата",            ТекущаяДата());
		СписокПараметров.Вставить("СторонаПроводки", 0);

			СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатрат);
			СписокПараметров.Вставить("Контрагент",   УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.СубконтоЗатрат1, ДанныеТекущейСтроки.СубконтоЗатрат2, ДанныеТекущейСтроки.СубконтоЗатрат3));
			СписокПараметров.Вставить("ДоговорКонтрагента", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.СубконтоЗатрат1, ДанныеТекущейСтроки.СубконтоЗатрат2, ДанныеТекущейСтроки.СубконтоЗатрат3));
			
		
	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров = Неопределено;
	КонецЕсли; 
	
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()



// Для статей РПБ по договорам добровольного страхования предлагается автоматическая
// установка способа признания расходов по календарным дням соответственно статье 272 гл.25 НК

Процедура СправочникСписокСпособПризнанияРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	#Если Клиент Тогда
		УказанныйСпособПризнанияРасходов = ВыбранноеЗначение; 
		УказанныйВидРБП = ТекущийЭлемент.ТекущиеДанные.ВидРБП;
		Если УказанныйВидРБП = Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности Тогда
			Если УказанныйСпособПризнанияРасходов <> Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
				Если Вопрос("Расходы по добровольному страхованию следует списывать
					|пропорционально количеству календарных дней действия договора.
					|Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
					
					СтандартнаяОбработка = Ложь;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	#КонецЕсли

КонецПроцедуры


Процедура СправочникСписокВидРБПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	#Если Клиент Тогда
		УказанныйСпособПризнанияРасходов = ТекущийЭлемент.ТекущиеДанные.СпособПризнанияРасходов; 
		УказанныйВидРБП = ВыбранноеЗначение;
		
		Если УказанныйВидРБП = Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности Тогда
			Если УказанныйСпособПризнанияРасходов <> Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
				Если Вопрос("Расходы по добровольному страхованию следует списывать
					|пропорционально количеству календарных дней действия договора.
					|Изменить способ признания расходов?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да) <> КодВозвратаДиалога.Нет Тогда
					
					ТекущийЭлемент.ТекущиеДанные.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		#КонецЕсли
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы.
// 
Процедура ПриОткрытии()
	
	СправочникСписок.Колонки.Добавить("СчетЗатрат");
	СправочникСписок.Колонки.Добавить("СубконтоЗатрат1");
	СправочникСписок.Колонки.Добавить("СубконтоЗатрат2");
	СправочникСписок.Колонки.Добавить("СубконтоЗатрат3");
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные.Справочники.РасходыБудущихПериодов, ЭлементыФормы.СправочникСписок, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.СправочникСписок.Колонки.Код);	
	
КонецПроцедуры // ПриОткрытии()

Процедура СправочникСписокПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеРедактирования = Элемент.ТекущиеДанные;
	
	Если Не ДанныеРедактирования.ЭтоГруппа Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеРедактирования.ВидРБП) Тогда
			ДанныеРедактирования.ВидРБП = Перечисления.ВидыРБП.Прочие;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеРедактирования.СпособПризнанияРасходов) Тогда
			ДанныеРедактирования.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоМесяцам;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

	
	
Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные.Справочники.РасходыБудущихПериодов, ЭлементыФормы.СправочникСписок, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.СправочникСписок.Колонки.Код);
КонецПроцедуры	
                     

Процедура УстановитьДоступностьСубконтоЗатрат()
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Счет = ЭлементыФормы.СправочникСписок.ТекущиеДанные.СчетЗатрат;
	
	
	КоличествоСубконто = Счет.ВидыСубконто.Количество();
	
	Для Ном = 1 по 3 Цикл

		Если (Ном <= КоличествоСубконто) и (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы.СправочникСписок.Колонки["Субконто"+Ном].Доступность = Истина;
			
		Иначе
			ЭлементыФормы.СправочникСписок.Колонки["Субконто"+Ном].Доступность = Ложь;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьСубконтоЗатрат()


Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСубконтоЗатрат();

КонецПроцедуры



