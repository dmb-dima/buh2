// Процедура управляет доступностью колонок субконто в табличной части услуги
//
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Способы.ТекущиеДанные;
	Колонки              = ЭлементыФормы.Способы.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат,
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
		СтрокаТабличнойЧасти.ПодразделениеОрганизации, Колонки.ПодразделениеОрганизации);

КонецПроцедуры // УстановитьДоступностьСубконто()

//Процедура - обработчик события "ПриИзменении" поля СчетЗатрат
// в табличной части "Способы"
//
Процедура СпособыСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Способы.ТекущиеДанные;
	Колонки              = ЭлементыФормы.Способы.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3,
		СтрокаТабличнойЧасти.ПодразделениеОрганизации, Колонки.ПодразделениеОрганизации);
		
	РаботаСДиалогами.УстановитьПодразделениеПоСчету(
		СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СчетЗатрат, Организация);

КонецПроцедуры // СпособыСчетЗатратПриИзменении()

//Процедура - обработчик события "ПриАктивизацииСтроки"
// табличной части "Способы"
//
Процедура СпособыПриАктивизацииСтроки(Элемент)

	СтрокаТЧ = ЭлементыФормы.Способы.ТекущиеДанные;
	УстановитьДоступностьСубконто(СтрокаТЧ);

КонецПроцедуры // СпособыПриАктивизацииСтроки()

// Процедура - обработчик события "ПриВыводеСтроки" списка справочника.
//
Процедура СпособыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеПроизводством.НастроитьВидимостьЯчеекАналитикиЗатрат(
		ДанныеСтроки.СчетЗатрат, неопределено, ОформлениеСтроки, Истина, Истина);
	
КонецПроцедуры // СпособыПриВыводеСтроки()

// Процедура - обработчик события "НачалоВыбора" поля ввода Субконто
// в строке табличной части "Прочее".
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент);
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент)

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.
	Если Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии.ТипЗначения  Тогда
		
		ДанныеТекущейСтроки = ЭлементыФормы.Способы.ТекущиеДанные;
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата",         ТекущаяДата());
		СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатрат);
		СписокПараметров.Вставить("Номенклатура", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Номенклатура", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
		СписокПараметров.Вставить("Склад",        УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Склады", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
			
	ИначеЕсли Элемент.ОграничениеТипа = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения  Тогда
		
		ДанныеТекущейСтроки = ЭлементыФормы.Способы.ТекущиеДанные;
		
		СписокПараметров = Новый Структура;
		СписокПараметров.Вставить("Дата",            ТекущаяДата());
		СписокПараметров.Вставить("СторонаПроводки", 1);
		СписокПараметров.Вставить("СчетУчета",    ДанныеТекущейСтроки.СчетЗатрат);
		СписокПараметров.Вставить("Контрагент",   УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.Контрагенты", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
		СписокПараметров.Вставить("ДоговорКонтрагента", УправлениеЗапасамиПартионныйУчет.ПолучитьОбъектПоТипу("СправочникСсылка.ДоговорыКонтрагентов", ДанныеТекущейСтроки.Субконто1, ДанныеТекущейСтроки.Субконто2, ДанныеТекущейСтроки.Субконто3));
			
	Иначе // Тип выбираемого субконто - не Партия.
		СписокПараметров = Неопределено;
	КонецЕсли; 
	
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда

		Организация = глЗначениеПеременной("ОсновнаяОрганизация");

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
КонецПроцедуры

Процедура СпособыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

// Обработчик события "ПриНачалеРедактирования" строки табличной части
// "Способы".
//
Процедура СпособыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.Коэффициент  = 1;
		
	КонецЕсли;
	
КонецПроцедуры // СпособыПриНачалеРедактирования()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры





























