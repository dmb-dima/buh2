Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мОрганизация;

Перем мСтруктураРедактированияКИ;

// Хранит список видов настроек, для которых разрешен выбор группы
Перем мСписокНастроекВыбораГруппы;

Перем ТекущаяОрганизация;
Перем мСтароеИмяПользователя;

Перем мНаличиеПраваАдминистрирования;

Перем мЭтоНовыйЭлементСправочника;

Перем мКопияНабораКонтактнойИнформации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обновляет информацию в таблице настроек
Процедура ЗаполнитьДерево()

	ДеревоНастроек.Строки.Очистить();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Ссылка);
	Запрос.Текст=
	"ВЫБРАТЬ
	|	Настройки.Родитель,
	|	Настройки.Ссылка,
	|	Настройки.ЭтоГруппа КАК ЭтоГруппа,
	|	ЗначениеНастроек.Значение
	|ИЗ
	|	ПланВидовХарактеристик.НастройкиПользователей КАК Настройки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПользователей КАК ЗначениеНастроек
	|		ПО ЗначениеНастроек.Настройка = Настройки.Ссылка И (ЗначениеНастроек.Пользователь = &Пользователь)
	|
	|ГДЕ
	|	(Настройки.ПометкаУдаления = ЛОЖЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоГруппа ИЕРАРХИЯ,
	|	Настройки.Наименование";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл

		Если Не Выборка.Родитель.Пустая() Тогда

			СтрокаГруппы = ДеревоНастроек.Строки.Найти(Выборка.Родитель, "Настройка", Истина);

			Если СтрокаГруппы=Неопределено Тогда
				СтрокаГруппы = ДеревоНастроек.Строки.Добавить();
				СтрокаГруппы.Настройка = Выборка.Родитель;
				СтрокаГруппы.ЭтоГруппа = Выборка.ЭтоГруппа;
			КонецЕсли;

		Иначе
			СтрокаГруппы = ДеревоНастроек;

		КонецЕсли;

		СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
		СтрокаНастройки.Настройка = Выборка.Ссылка;
		СтрокаНастройки.Значение  = Выборка.Ссылка.ТипЗначения.ПривестиЗначение(Выборка.Значение);
		СтрокаНастройки.ЭтоГруппа = Выборка.ЭтоГруппа;
		
		Если СтрокаНастройки.Настройка.ТипЗначения.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
			
			мОрганизация = СтрокаНастройки.Значение;
			
		КонецЕсли;
		
		// Если новый элемент справочника, заполняем настройки по умолчанию.
		Если ЭтоНовый() Тогда
			
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОткрыватьПриЗапускеПанельФункций Тогда
				СтрокаНастройки.Значение = Истина;
			КонецЕсли;
			
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьПодтверждениеПриЗакрытии Тогда
				СтрокаНастройки.Значение = Истина;
			КонецЕсли;
			
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ПоказыватьВДокументахСчетаУчета Тогда
				СтрокаНастройки.Значение = Истина;
			КонецЕсли;
			
			Если СтрокаНастройки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ЗапрашиватьВидОперацииПриВводеНового Тогда
				СтрокаНастройки.Значение = Истина;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Процедура выполняет запись значений настроек в регистр сведений
Процедура ОбновитьНастройки(Отказ)

	Набор = РегистрыСведений.НастройкиПользователей.СоздатьНаборЗаписей();

	Набор.Отбор.Пользователь.Использование = Истина;
	Набор.Отбор.Пользователь.Значение      = Ссылка;
	
	ЗаполнитьНаборЗаписей(ДеревоНастроек.Строки, Набор);
	
	Набор.Записать();
	
	// Оповещение открытых форм об изменении текущей организации
	Оповестить("ИзменениеТекущейОрганизации");

	// Изменение заголовка системы
	РаботаСДиалогами.УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации();
	
КонецПроцедуры

// Процедура заполняет набор записей регистра сведений значениями настроек
Процедура ЗаполнитьНаборЗаписей(СтрокиДерева, НаборЗаписей)

	Для Каждого СтрокаДерева Из СтрокиДерева Цикл

		Если Не СтрокаДерева.ЭтоГруппа Тогда

			Запись = НаборЗаписей.Добавить();

			Запись.Пользователь = Ссылка;
			Запись.Настройка    = СтрокаДерева.Настройка;
			Запись.Значение     = СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);

			Если Запись.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
				ТекущаяОрганизация = Запись.Значение;
			КонецЕсли;

		Иначе
			ЗаполнитьНаборЗаписей(СтрокаДерева.Строки, НаборЗаписей)

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбновитьВизуальныеОбъектыФормы();
	
	Если ЭтоНовый()
	   И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
		Код = "";
		ОбновитьВизуальныеОбъектыФормы();
		
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли; 
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);

КонецПроцедуры


// Обработчик события ПриЗаписи для Формы.
//
Процедура ПриЗаписи(Отказ)

	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ, мКопияНабораКонтактнойИнформации);
	ОбновитьНастройки(Отказ);

КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	                                                                    
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, ЭтаФорма.ТолькоПросмотр);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);
	
КонецПроцедуры


// Обработчик события ПослеЗаписи для Формы.
//
Процедура ПослеЗаписи()

	глЗначениеПеременнойУстановить("ОсновнаяОрганизация", УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация"), Истина);
		
	мСтароеИмяПользователя = СокрЛП(Код);
	
	// надо для нового элемента предложить ввести пользователя БД
	Если мЭтоНовыйЭлементСправочника Тогда
		
		СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
		
		Если СтарыйПользовательБД = Неопределено Тогда
		
			ОтветПользователя = Вопрос("Автоматически создать пользователя БД?", РежимДиалогаВопрос.ДаНет);
			Если ОтветПользователя = КодВозвратаДиалога.Да Тогда
				
				ОткрытьФормуРедактированияПользователяБД(Истина);
				
			КонецЕсли;		
			
		Иначе
			
			ОбновитьВизуальныеОбъектыФормы();
		
		КонецЕсли;
		
	КонецЕсли;
	
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);

КонецПроцедуры

// Обработчик события ПриИзмененииДанных для Формы.
Процедура ПриИзмененииДанных()

	ЗаполнитьДерево();
	

КонецПроцедуры




// Обработчик события ПриВыводеСтроки элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.Настройка.ОтображатьКартинку = Истина;

	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки = 0;

	Иначе
		ОформлениеСтроки.Ячейки.Настройка.ИндексКартинки = 1;

	КонецЕсли;

	Если ДанныеСтроки.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ТекущаяСтраницаПанелиФункций Тогда
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ДанныеСтроки.Настройка.ТипЗначения.СодержитТип(Тип("Булево"))
		 И ДанныеСтроки.Настройка.ТипЗначения.Типы().Количество() = 1 Тогда

		ОформлениеСтроки.Ячейки.Значение.ОтображатьТекст  = Ложь;
		ОформлениеСтроки.Ячейки.Значение.ОтображатьФлажок = Истина;
		ОформлениеСтроки.Ячейки.Значение.ТолькоПросмотр   = Истина;
		ОформлениеСтроки.Ячейки.Значение.Флажок           = ДанныеСтроки.Настройка.ТипЗначения.ПривестиЗначение(ДанныеСтроки.Значение);

	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриИзмененииФлажка элемента формы ДеревоНастроек.
Процедура ДеревоНастроекПриИзмененииФлажка(Элемент, Колонка)

	СтрокаДерева = ДеревоНастроек.Строки.Найти(Элемент.ТекущиеДанные.Настройка, "Настройка", Истина);

	СтрокаДерева.Значение = Не СтрокаДерева.Настройка.ТипЗначения.ПривестиЗначение(СтрокаДерева.Значение);

	ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

// Обработчик события НачалоВыбора значения настройки
Процедура ДеревоНастроекЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка)=Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;

	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;		

	КонецЕсли;

	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнойКаталогФайлов Тогда		

		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		Диалог.Каталог   = Элемент.Значение;
		Диалог.Заголовок = "Укажите каталог...";

		Если Не Диалог.Выбрать() Тогда
			Возврат;
		КонецЕсли;

		Элемент.Значение     = Диалог.Каталог;
		СтандартнаяОбработка = Ложь;

	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Справочники.ПодразделенияОрганизаций.ПолучитьФормуВыбора(, Элемент );
		ФормаВыбора.Организация = мОрганизация;
		ФормаВыбора.Открыть();
			
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении значения настройки
Процедура ДеревоНастроекЗначениеПриИзменении(Элемент)
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
		
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Организации.Наименование
			|ИЗ
			|	Справочник.Организации КАК Организации";
			
			Если Запрос.Выполнить().Выгрузить().Количество() < 2 Тогда
				Предупреждение("Нельзя очищать единственную организацию.");
				Элемент.Значение = глЗначениеПеременной("ОсновнаяОрганизация");
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

Процедура ДеревоНастроекЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
		
		мОрганизация = ВыбранноеЗначение;
		
		Для Каждого Настройка Из ДеревоНастроек.Строки Цикл
			Если Настройка.Строки.Количество() > 0 Тогда
				Для Каждого Строка Из Настройка.Строки Цикл
					Если Строка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
						Если НЕ (Строка.Значение.Владелец = мОрганизация) Тогда
							Строка.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
			
	КонецЕсли;
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации Тогда
		
		Если ЗначениеЗаполнено(мОрганизация) И НЕ (ВыбранноеЗначение.Владелец = мОрганизация) Тогда
			
			Сообщить("Выбранное подразделение не принадлежит основной организации.");
			
			СтандартнаяОбработка = Ложь;
			
		Иначе
			
			Для Каждого Настройка Из ДеревоНастроек.Строки Цикл
				Если Настройка.Строки.Количество() > 0 Тогда
					Для Каждого Строка Из Настройка.Строки Цикл
						Если Строка.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
							Если Строка.Значение = Справочники.Организации.ПустаяСсылка() Тогда
								Строка.Значение = ВыбранноеЗначение.Владелец;
								мОрганизация    = ВыбранноеЗначение.Владелец;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоНастроекЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	Если ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка = ПланыВидовХарактеристик.НастройкиПользователей.ОсновнаяОрганизация Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Наименование
		|ИЗ
		|	Справочник.Организации КАК Организации";
		
		Если Запрос.Выполнить().Выгрузить().Количество() < 2 Тогда
			СтандартнаяОбработка = Ложь;
			Предупреждение("Нельзя очищать единственную организацию.");
			Возврат;	
		КонецЕсли;
		
		мОрганизация = Справочники.Организации.ПустаяСсылка();
		
		СтрокаДерева = ДеревоНастроек.Строки.Найти(ПланыВидовХарактеристик.НастройкиПользователей.ОсновноеПодразделениеОрганизации, "Настройка", Истина);
		Если НЕ СтрокаДерева = Неопределено Тогда
			СтрокаДерева.Значение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если мСписокНастроекВыбораГруппы.НайтиПоЗначению(ЭлементыФормы.ДеревоНастроек.ТекущаяСтрока.Настройка)=Неопределено Тогда
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	Иначе
		ЭлементыФормы.ДеревоНастроек.Колонки.Значение.ЭлементУправления.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;		
	КонецЕсли;
	
КонецПроцедуры

//Процедура обновляет визуальные объекты формы
Процедура ОбновитьВизуальныеОбъектыФормы()
	
	мЭтоНовыйЭлементСправочника = ЭтоНовый();
	
	мСтароеИмяПользователя = СокрЛП(Код);
	
	//можно ли код редактировать или нет
	РазрешитьРедактироватьКод = Ложь;

	Если НЕ ЗначениеЗаполнено(Код) Тогда
		
		РазрешитьРедактироватьКод = Истина;
				
	Иначе	
		
		СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
		РазрешитьРедактироватьКод = (СтарыйПользовательБД = Неопределено);
			
	КонецЕсли;
	
	ЭлементыФормы.Код.ТолькоПросмотр = Не РазрешитьРедактироватьКод;	
	
КонецПроцедуры

//Процедура открывает форму редактирования пользователя БД
Процедура ОткрытьФормуРедактированияПользователяБД(Знач АвтоматическиСоздаватьНовогоПользователяБД = Ложь)
	
	Если мСтароеИмяПользователя = "НеАвторизован" Тогда
		
		Предупреждение("Для пользователя ""НеАвторизован"" недопустимо создавать пользователя БД.");
		Возврат;
		
	КонецЕсли;
	
	СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
		
	Если СтарыйПользовательБД = Неопределено Тогда
		
		Если НЕ мНаличиеПраваАдминистрирования Тогда
			
			// нет прав на администрирование
			Предупреждение("Нет прав на просмотр информации о пользователях БД.");
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;	
		
	// есть права администрирования, а пользователь БД не найден
	// надо проверить модифицирована ли форма или нет
	Если Модифицированность Тогда
			
		УспешноЗаписан = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
		
		Если НЕ УспешноЗаписан Тогда
			Возврат;
		КонецЕсли;	
			
		// еще раз попробуем взять пользователя БД
		СтарыйПользовательБД = УправлениеПользователями.НайтиПользователяБД(мСтароеИмяПользователя);
			
	КонецЕсли;
	
	СозданНовыйЭлемент = Ложь;
	Если СтарыйПользовательБД = Неопределено Тогда
		
		Если НЕ АвтоматическиСоздаватьНовогоПользователяБД Тогда
			
			// есть права на изменение пользователя БД
			ОтветПользователя = Вопрос("Пользователь БД с именем """ + мСтароеИмяПользователя + """ не найден. Создать нового пользователя БД?", РежимДиалогаВопрос.ДаНет);
			Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		
		КонецЕсли;
		
		// создаем нового пользователя БД
		СтарыйПользовательБД = ПользователиИнформационнойБазы.СоздатьПользователя();
		СтарыйПользовательБД.Имя = мСтароеИмяПользователя;
		СтарыйПользовательБД.ПолноеИмя = СокрЛП(Наименование);
		
		СозданНовыйЭлемент = Истина;
		
	КонецЕсли;
		
	// надо показать форму редактирования настроек пользователя БД
	ФормаРедактированияПользователяБД = ПолучитьОбщуюФорму("ФормаПользователяБД");
	ФормаРедактированияПользователяБД.ПользовательБД = СтарыйПользовательБД;
	ФормаРедактированияПользователяБД.Модифицированность = СозданНовыйЭлемент;
	ФормаРедактированияПользователяБД.Пользователь = ЭтотОбъект;
	
	РезультатОткрытия = ФормаРедактированияПользователяБД.ОткрытьМодально();
	
	Если РезультатОткрытия = Истина Тогда
		
		ЭтотОбъект.Прочитать();
		ОбновитьВизуальныеОбъектыФормы();
		
	КонецЕсли;	
	
КонецПроцедуры

// редактирование настроек пользователя БД
Процедура ДействияФормыПользовательБД(Кнопка)
	
	ОткрытьФормуРедактированияПользователяБД();
		
КонецПроцедуры

// открытие пользователя БД
Процедура КодОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияПользователяБД();	
	
КонецПроцедуры

// при изменении кода пользователя
Процедура КодПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Наименование) Тогда
		Наименование = СокрЛП(Код);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыГруппыПользователя(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаНастройкиГруппПользователя = ПолучитьФорму("ФормаНастройкиГруппПользователя");
	ФормаНастройкиГруппПользователя.Пользователь = Ссылка;
	ФормаНастройкиГруппПользователя.ОткрытьМодально();
	
КонецПроцедуры
                          



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ СВЯЗАННЫЕ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			Перечисления.ВидыОбъектовКонтактнойИнформации.Пользователи,
			Новый Действие("НажатиеДопКнопкиКИ"),
			НаборКонтактнойИнформации,
			ЭлементыФормы.Панель1,
			ЭлементыФормы.Панель1.Страницы.КонтактнаяИнформация,
			Неопределено,
			ЭлементыФормы.ПолеВводаПрочаяКИ,
			Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПользователя,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Дополнительные кнопки в кнопках КИ
Процедура НажатиеДопКнопкиКИ(Кнопка)
	УправлениеКонтактнойИнформацией.НажатиеДопКнопкиКИ(мСтруктураРедактированияКИ, Кнопка, ЭтаФорма);
КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При изменении прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаПрочаяКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры




мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;

// Чтобы избежать чтения при выводе строки, заполним признак группы сразу запросом
ДеревоНастроек.Колонки.Добавить("ЭтоГруппа");

мСписокНастроекВыбораГруппы = Новый СписокЗначений;

мСтароеИмяПользователя = "";

мНаличиеПраваАдминистрирования = ПравоДоступа("Администрирование", Метаданные);
