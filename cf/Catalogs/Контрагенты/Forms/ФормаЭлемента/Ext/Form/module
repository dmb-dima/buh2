Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мСтруктураРедактированияКИ;

Перем мЖирныйШрифт;
Перем мОбычныйШрифт;
Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет
Перем мСоздаватьОсновнойДоговор;

Перем мЭтоНовый;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мКопияНабораКонтактнойИнформации;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает видимость поля ввода ГоловнойКонтрагент в зависимости
// от состояния флажка "Входит в холдинг".
//
Процедура ВидимостьГоловногоКонтрагента()
	
	ЭлементыФормы.ГоловнойКонтрагент.Видимость        = ВходитВХолдинг;
	ЭлементыФормы.НадписьГоловнойКонтрагент.Видимость = ВходитВХолдинг;
	
КонецПроцедуры // ВидимостьГоловногоКонтрагента()

Процедура ОбновитьТелефоныКонтактногоЛица()

	СтрокаТелефонов = "";

	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка) Тогда

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
		Запрос.УстановитьПараметр("Объект", ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка);
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Представление
		|ИЗ
		|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
		|
		|ГДЕ
		|	КонтактнаяИнформация.Тип = &Тип
		|	И
		|	КонтактнаяИнформация.Объект = &Объект
		|
		|УПОРЯДОЧИТЬ ПО
		|	КонтактнаяИнформация.ЗначениеПоУмолчанию УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();

		Пока Выборка.Следующий() Цикл
			СтрокаТелефонов = СтрокаТелефонов + ", " + Выборка.Представление;
		КонецЦикла;

	КонецЕсли;

	Если Не ПустаяСтрока(СтрокаТелефонов) Тогда
		СтрокаТелефонов = Сред(СтрокаТелефонов, 3);
	КонецЕсли;

	ЭлементыФормы.ТелефоныКонтактногоЛица.Заголовок = "Телефоны: " + СтрокаТелефонов;
	ЭлементыФормы.ТелефоныКонтактногоЛица.Видимость = ЗначениеЗаполнено(СтрокаТелефонов);

КонецПроцедуры

// Процедура управляет видимостью страниц панели ПанельЮрФизЛицо.
//
Процедура ВидимостьПанелейЮрФизЛица()

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидимаяСтраница   = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо;
		НеВидимаяСтраница = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо;

	Иначе
		ВидимаяСтраница   = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо;
		НеВидимаяСтраница = ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо;

	КонецЕсли;

	Если ЭлементыФормы.ПанельЮрФизЛицо.ТекущаяСтраница <> ВидимаяСтраница Тогда
		ВидимаяСтраница.Видимость   = Истина;
		НеВидимаяСтраница.Видимость = Ложь;
		ЭлементыФормы.ПанельЮрФизЛицо.ТекущаяСтраница = ВидимаяСтраница;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает основной договор контрагента контрагента.
//
Процедура ПроверитьОсновнойДоговорКонтрагента()

	Если ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли; 

	ВыборкаДоговоров = Справочники.ДоговорыКонтрагентов.Выбрать(, Ссылка);

	Если ВыборкаДоговоров.Следующий() Тогда
		НайденныйДоговор = ВыборкаДоговоров.Ссылка;

	ИначеЕсли мСоздаватьОсновнойДоговор тогда
		
		мСоздаватьОсновнойДоговор = Ложь;

		ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();

		ДоговорОбъект.Наименование          = "Основной договор";
		ДоговорОбъект.ВалютаВзаиморасчетов  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(
			глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов");

		Если НЕ ЗначениеЗаполнено(ДоговорОбъект.ВалютаВзаиморасчетов) Тогда
			ДоговорОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;

		ОрганизацияДоговора = ОбщегоНазначения.ГоловнаяОрганизация(глЗначениеПеременной("ОсновнаяОрганизация"));
		ДоговорОбъект.Организация  = ОрганизацияДоговора;

		ДоговорОбъект.Владелец    = Ссылка;
		ДоговорОбъект.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;

		ОшибкаПриЗаписиДоговора = Ложь;
		ДоговорОбъект.ПроверитьПередЗаписью(ОшибкаПриЗаписиДоговора, Ложь);
		Если ОшибкаПриЗаписиДоговора тогда
			//Сообщить("Не удалось записать основной договор контрагента.");
			Возврат;
		Иначе
			ДоговорОбъект.Записать();
		КонецЕсли;
		
		НайденныйДоговор = ДоговорОбъект.Ссылка;
	Иначе
		Возврат;
	КонецЕсли;

	ОсновнойДоговорКонтрагента = НайденныйДоговор;

	Записать();
	
КонецПроцедуры // ПроверитьОсновнойДоговорКонтрагента()

// Процедура изменяет доступность кнопки установки основного банковского счета.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета()

	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Пометка     = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельБанковскиеСчета.Кнопки.СделатьОсновным.Пометка     = ЭлементыФормы.БанковскиеСчета.ТекущаяСтрока.Ссылка = ОсновнойБанковскийСчет;
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного договора взаиморасчетов.
//
Процедура ПроверитьПометкуКнопкиУстановкиОсновногоДоговора()

	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = Ложь;
	Иначе
		Если ЭлементыФормы.Договоры.ТекущиеДанные.ЭтоГруппа Тогда
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Ложь;
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = Ложь;
		Иначе
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Доступность = Истина;
			ЭлементыФормы.КоманднаяПанельДоговоры.Кнопки.СделатьОсновным.Пометка     = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка = ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура изменяет доступность кнопки установки основного контактного лица.
//
Процедура ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица()

	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельКонтактныеЛица.Кнопки.СделатьОсновным.Доступность = Ложь;
	Иначе
		ЭлементыФормы.КоманднаяПанельКонтактныеЛица.Кнопки.СделатьОсновным.Доступность = НЕ (ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка = ОсновноеКонтактноеЛицо);
	КонецЕсли; 

КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	
	

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый()
	   И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	Иначе
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
	КонецЕсли;
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
		
	Если ЭтоНовый() Тогда

		Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
			ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		КонецЕсли;

	КонецЕсли;

	КонтактныеЛица.Отбор.ОбъектВладелец.Значение      = Ссылка;
	КонтактныеЛица.Отбор.ОбъектВладелец.Использование = Истина;
	
	ОрганизацияДоговоров = ОбщегоНазначения.ГоловнаяОрганизация(глЗначениеПеременной("ОсновнаяОрганизация"));
	РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма, , ОрганизацияДоговоров, "Договоры");

	Если НЕ ЭтоНовый() Тогда
		ВходитВХолдинг = НЕ(ГоловнойКонтрагент = Ссылка);
	КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, ЭтаФорма.ТолькоПросмотр);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события ОбработкаВыбора формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда

		Если ЗначениеВыбора = "ОбновлениеКонтактнойИнформации" Тогда
			ОбновитьТелефоныКонтактногоЛица();

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "Договоры", Истина);	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииДанных формы.
//
Процедура ПриИзмененииДанных()

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

	Если НЕ ЭтоНовый() Тогда
		ВходитВХолдинг = НЕ(ГоловнойКонтрагент = Ссылка);
	КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры // ПриИзмененииДанных()

// Обработчик события ПередЗаписью формы.
//
Процедура ПередЗаписью(Отказ)
	
	мЭтоНовый = ЭтоНовый();
	
КонецПроцедуры // ПередЗаписью()

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)

	КонтактныеЛица.Отбор.ОбъектВладелец.Значение = Ссылка;
	
	Если мЭтоНовый = Истина Тогда
		
		мЭтоНовый = Неопределено;
		
		ПроверитьОсновнойДоговорКонтрагента();
		
	КонецЕсли; 
	
	Если НЕ ВходитВХолдинг Тогда
		Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) 
		 ИЛИ НЕ (ГоловнойКонтрагент = Ссылка) Тогда
			ГоловнойКонтрагент = Ссылка;
			Записать();
		КонецЕсли; 
	Иначе
		Если НЕ ЗначениеЗаполнено(ГоловнойКонтрагент) Тогда
			ОбщегоНазначения.СообщитьОбОшибке("Не выбран головной контрагент.",, "Элемент не записан.");
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ, мКопияНабораКонтактнойИнформации);
	
КонецПроцедуры // ПриЗаписи()

Процедура ПослеЗаписи()
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.СделатьОсновным.
//
Процедура КоманднаяПанельБанковскиеСчетаСделатьОсновным(Кнопка)

	Если ЭлементыФормы.БанковскиеСчета.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Если ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка Тогда
		ОсновнойБанковскийСчет = Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		ОсновнойБанковскийСчет = ЭлементыФормы.БанковскиеСчета.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛица.СделатьОсновным.
//
Процедура КоманднаяПанельКонтактныеЛицаСделатьОсновным(Кнопка)
	
	Если ЭлементыФормы.КонтактныеЛица.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ОсновноеКонтактноеЛицо = ЭлементыФормы.КонтактныеЛица.ТекущиеДанные.Ссылка;
	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельБанковскиеСчета.КоманднаяПанельДоговоры.
//
Процедура КоманднаяПанельДоговорыСделатьОсновным(Кнопка)

	Если ЭлементыФормы.Договоры.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.Договоры.ТекущиеДанные.ЭтоГруппа Тогда
		Предупреждение("Нельзя назначать основным договором - группу!");
		Возврат;
	КонецЕсли;

	Если ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка Тогда
		ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		ОсновнойДоговорКонтрагента = ЭлементыФормы.Договоры.ТекущиеДанные.Ссылка;
	КонецЕсли; 
	
	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();

КонецПроцедуры

Процедура ОсновныеДействияФормыОК(Кнопка)

	ЗаписатьВФорме();
	Если Модифицированность Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВладелецФормы) = Тип("ТабличноеПоле") Тогда
		ОповеститьОВыборе(Ссылка);
	Иначе
		Закрыть();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события ПриИзменении флажка "Входит в холдинг".
// Управляет видимостью поля ввода ГоловнойКонтрагент.
//
Процедура ВходитВХолдингПриИзменении(Элемент)
	
	Если Элемент.Значение И ГоловнойКонтрагент = Ссылка Тогда
		ГоловнойКонтрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	ВидимостьГоловногоКонтрагента();
	
КонецПроцедуры // ВходитВХолдингПриИзменении()

// Обработчик события ПриВыводеСтроки элемента формы Договоры.
//
Процедура ДоговорыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.Ссылка) И ЭтотОбъект.ОсновнойДоговорКонтрагента = ДанныеСтроки.Ссылка Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки <> Неопределено Тогда
		СсылкаСтроки = ДанныеСтроки.Ссылка;
	Иначе
		СсылкаСтроки = Неопределено;
	КонецЕсли;

	Если ДанныеСтроки <> Неопределено И НЕ СсылкаСтроки.Пустая() И ЭтотОбъект.ОсновнойБанковскийСчет = СсылкаСтроки Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)

	ВидимостьПанелейЮрФизЛица();

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

// Обработчик события ПередНачаломДобавления элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)

	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы Договоры.
//
Процедура ДоговорыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	
	ЭтоНовый = ЭтоНовый();

	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
	Если ЭтоНовый 
	   И ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
		
		Отказ = Истина;
			
		ОсновнойДоговорКонтрагента.ПолучитьФорму(, ЭтаФорма).Открыть();
				
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)

	Отказ = НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);

	Если НЕ Отказ Тогда

		Отказ = Истина;

		Если Копирование Тогда
			НовыйОбъект = Элемент.ТекущиеДанные.Ссылка.Скопировать();

		Иначе
			НовыйОбъект = Справочники.КонтактныеЛица.СоздатьЭлемент();

			НовыйОбъект.ВидКонтактногоЛица = Перечисления.ВидыКонтактныхЛиц.КонтактноеЛицоКонтрагента;
			НовыйОбъект.ОбъектВладелец     = Ссылка;

		КонецЕсли;

		Форма = НовыйОбъект.ПолучитьФорму(, ЭтаФорма);
		Форма.ЭлементыФормы.ВидКонтактногоЛица.ТолькоПросмотр = Истина;
		Форма.Открыть();

	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы Договоры.
//
Процедура ДоговорыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	Если НЕ ЗначениеЗаполнено(ОсновнойДоговорКонтрагента) Тогда
		ОсновнойДоговорКонтрагента = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы БанковскиеСчета.
//
Процедура БанковскиеСчетаПриАктивизацииСтроки(Элемент)

	ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();

КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы Договоры.
//
Процедура ДоговорыПриАктивизацииСтроки(Элемент)

	ПроверитьПометкуКнопкиУстановкиОсновногоДоговора();

КонецПроцедуры
 
// Обработчик события ПриАктивизацииСтроки элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПриАктивизацииСтроки(Элемент)

	ПроверитьДоступностьКнопкиУстановкиОсновногоКонтактногоЛица();

	ПодключитьОбработчикОжидания("ОбновитьТелефоныКонтактногоЛица",0.1,Истина);

КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактныеЛицаКонтактныеЛица/Обновить.
//
Процедура КоманднаяПанельКонтактныеЛицаКонтактныеЛицаОбновить(Кнопка)

	КонтактныеЛица.Обновить();
	ОбновитьТелефоныКонтактногоЛица();

КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Форма = Элемент.ТекущиеДанные.Ссылка.ПолучитьФорму(, ЭтаФорма);
		Форма.ЭлементыФормы.ВидКонтактногоЛица.ТолькоПросмотр = Истина;
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактныеЛица.
//
Процедура КонтактныеЛицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ОсновноеКонтактноеЛицо) И ДанныеСтроки.Ссылка = ОсновноеКонтактноеЛицо Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыОтчет(Кнопка)
	Если Ссылка.ЭтоГруппа Тогда
		Предупреждение("Нельзя формировать отчет по группе!");
		Возврат;
		
	Иначе
		
		Отчет = Отчеты.ОтчетПоДаннымКонтрагента.Создать();
		Отчет.КонтрагентОтчета = Ссылка;
		Отчет.ДатаОтчета = ТекущаяДата();
		
		ФормаОтчета = Отчет.ПолучитьФорму();
		
		Отчет.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокумента);
		
		ФормаОтчета.Открыть();
	
	КонецЕсли;
КонецПроцедуры

Процедура БанковскиеСчетаОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ОсновнойБанковскийСчет) Тогда
		ВыборкаСчетов = Справочники.БанковскиеСчета.Выбрать(, Ссылка);
		н = 0;
		Пока ВыборкаСчетов.Следующий() Цикл
			н = н +1;
			Если н > 1 Тогда
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		ОсновнойБанковскийСчет = ВыборкаСчетов.Ссылка;
		ПроверитьПометкуКнопкиУстановкиОсновногоБанковскогоСчета();	
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.КоманднаяПанельФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ СВЯЗАННЫЕ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты,
			Новый Действие("НажатиеДопКнопкиКИ"),
			НаборКонтактнойИнформации,
			ЭлементыФормы.Панель,
			ЭлементыФормы.Панель.Страницы.КонтактнаяИнформация,
			Неопределено,
			ЭлементыФормы.ПолеВводаПрочаяКИ,
			Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагента,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ2, Неопределено, ЭлементыФормы.ПолеКИ2);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ3, Неопределено, ЭлементыФормы.ПолеКИ3);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Дополнительные кнопки в кнопках КИ
Процедура НажатиеДопКнопкиКИ(Кнопка)
	УправлениеКонтактнойИнформацией.НажатиеДопКнопкиКИ(мСтруктураРедактированияКИ, Кнопка, ЭтаФорма);
КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При изменении прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаПрочаяКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

Процедура КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(Кнопка)
	УправлениеКонтактнойИнформацией.КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(мСтруктураРедактированияКИ, ЭтаФорма);
КонецПроцедуры

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;

ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ФизЛицо.Видимость = Ложь;
ЭлементыФормы.ПанельЮрФизЛицо.Страницы.ЮрЛицо.Видимость = Истина;

ВидимостьПанелейЮрФизЛица();

мЖирныйШрифт  = Новый Шрифт(,, Истина);
мОбычныйШрифт = Новый Шрифт();
мСоздаватьОсновнойДоговор = ЭтоНовый();

