Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мСтруктураРедактированияКИ;

Перем мФормаВводаМестаРождения;
Перем мТекущееОсновноеИзображение;
Перем мПустаяКартинка;

Перем мНаборЗаписейДокументаУдостоверяющегоЛичность Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мКопияНабораКонтактнойИнформации;


Перем мПроцентСевернойНадбавки;
Перем мДатаПроцентаСевернойНадбавки;

// Процедура считывает место рождения физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьМестоРождения()

	МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(МестоРождения);
	Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
		МестоРожденияФизЛица = "Ввести место рождения";
	КонецЕсли;

КонецПроцедуры // ПрочитатьМестоРождения

// Процедура считывает значение северной надбавки физлица из регистра сведений
Процедура ПрочитатьЗначениеСевернойНадбавки()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка,
	               |	ПроцентСевернойНадбавкиФизЛицСрезПоследних.Период
	               |ИЗ
	               |	РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПроцентСевернойНадбавкиФизЛицСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентСевернойНадбавки = Выборка.СевернаяНадбавка;
		ДатаНачалаДействияСевернойНадбавки = Выборка.Период;
	Иначе
		ПроцентСевернойНадбавки = 0;
		ДатаНачалаДействияСевернойНадбавки = Дата(1900, 01, 01);
	КонецЕсли;
	мПроцентСевернойНадбавки = ПроцентСевернойНадбавки;
	мДатаПроцентаСевернойНадбавки = ДатаНачалаДействияСевернойНадбавки;
КонецПроцедуры // ПрочитатьЗначениеСевернойНадбавки()

// Процедура записывает измененное значение процента северной надбавки в регистр сведений
Процедура ЗаписатьПроцентСевернойНадбавки()
	Если НЕ (мПроцентСевернойНадбавки = ПроцентСевернойНадбавки
	И мДатаПроцентаСевернойНадбавки = ДатаНачалаДействияСевернойНадбавки) Тогда
	    НаборЗаписейСевернаяНадбавка = РегистрыСведений.ПроцентСевернойНадбавкиФизЛиц.СоздатьМенеджерЗаписи();
		НаборЗаписейСевернаяНадбавка.Период = ДатаНачалаДействияСевернойНадбавки;
		НаборЗаписейСевернаяНадбавка.ФизЛицо = Ссылка;
		НаборЗаписейСевернаяНадбавка.Прочитать();
		НаборЗаписейСевернаяНадбавка.Период = ДатаНачалаДействияСевернойНадбавки;
		НаборЗаписейСевернаяНадбавка.ФизЛицо = Ссылка;
		НаборЗаписейСевернаяНадбавка.СевернаяНадбавка = ПроцентСевернойНадбавки;
		НаборЗаписейСевернаяНадбавка.Записать();
	КонецЕсли;
КонецПроцедуры // ЗаписатьПроцентСевернойНадбавки()



// Процедура считывает ФИО физлица
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
Процедура ПрочитатьФИО()

	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	Фамилия  = ФИОСрез.Фамилия;
	Имя      = ФИОСрез.Имя;
	Отчество = ФИОСрез.Отчество;
	
КонецПроцедуры // ПрочитатьМестоРождения

Процедура ЗаписатьДанныеФИО()
	
	ФИОСрез = РегистрыСведений.ФИОФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка));
	
	СтрокаСреза = ФИОСрез.Фамилия + ФИОСрез.Имя + ФИОСрез.Отчество;
	
	Если СтрокаСреза <> (Фамилия + Имя + Отчество) Тогда
		
		МенеджерЗаписи = РегистрыСведений.ФИОФизЛиц.СоздатьМенеджерЗаписи();
		
		МенеджерЗаписи.ФизЛицо = Ссылка;
		Если ПустаяСтрока(СтрокаСреза) Тогда
			МенеджерЗаписи.Период = '19000101';
		Иначе
			МенеджерЗаписи.Период = РабочаяДата;
		КонецЕсли;
		
		МенеджерЗаписи.Фамилия = Фамилия;
		МенеджерЗаписи.Имя = Имя;
		МенеджерЗаписи.Отчество = Отчество;
		
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Функция ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");

	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

//Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов.Строки.Количество() > 0);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли; 	
	

КонецПроцедуры

// Обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	
	Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, ПараметрОбъектКопирования);
	КонецЕсли;
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПаспортныеДанныеФизЛицСрезПоследних.Период,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДатаРегистрацииПоМестуЖительства
	|ИЗ
	|	РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейДокументаУдостоверяющегоЛичность.Добавить(), Выборка);
	КонецЕсли; 
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Период,
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаМедицинскоеСтрахование,
	|	ГражданствоФизЛицСрезПоследних.УдалитьНеЯвляетсяНалоговымРезидентомРФ
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Период,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СерияСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.НомерСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ДатаВыдачи,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ГруппаИнвалидности,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СрокДействияСправки
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОбИнвалидностиФизлицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейИнвалидность.Добавить(), Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при открытии формы
Процедура ПриОткрытии()

	ОбновитьПредставлениеЭлемента("Гражданство");
	ОбновитьПредставлениеЭлемента("УдостоверениеЛичности");
	ОбновитьПредставлениеЭлемента("ФИО");
	ОбновитьПредставлениеЭлемента("Инвалидность");
	Модифицированность = Ложь;
	
	// Место рождения.
	ПрочитатьМестоРождения();

	// Северная надбавка
	ПрочитатьЗначениеСевернойНадбавки();
	
	Заголовок = "Личные данные физического лица: " + Наименование;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);	
	
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, ЭтаФорма.ТолькоПросмотр);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	Если ИсточникВыбора = мФормаВводаМестаРождения тогда
		МестоРождения = РезультатВыбора;
		//Представление места рождения
		МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(МестоРождения);
		Если НЕ ЗначениеЗаполнено(МестоРожденияФизЛица) тогда
			МестоРожденияФизЛица = "Ввести место рождения";
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры


Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента);
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		//Гражданство = РегистрыСведений.ГражданствоФизЛиц.ПолучитьПоследнее(,Новый Структура("ФизЛицо",Ссылка)).Страна;
		
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			ЭтаФорма.Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсию, медицинское и социальное страхование";
			
			ЭтаФорма.Модифицированность = Истина;
			
		Иначе
			// в регистре сведений нет записей, покажем значение по умолчанию
			ЭтаФорма.Гражданство = "РОССИЯ, имеет право на пенсию, медицинское и социальное страхование";
			
		КонецЕсли;

	ИначеЕсли ИмяОбновляемогоЭлемента = "УдостоверениеЛичности" Тогда
		Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 Тогда
			Паспорт = мНаборЗаписейДокументаУдостоверяющегоЛичность[0];
			УдостоверениеЛичности = "" + Паспорт.ДокументВид + ", серия: " + Паспорт.ДокументСерия + ", № " + Паспорт.ДокументНомер 
									+ ", выдан: " + Формат(Паспорт.ДокументДатаВыдачи,"ДФ='дд ММММ гггг'; ДП='Не указано'") + " года, " 
									+ Паспорт.ДокументКемВыдан + ", № подр. " + Паспорт.ДокументКодПодразделения 
									+ Символы.Таб + "Дата регистрации по месту жительства: " + Формат(Паспорт.ДатаРегистрацииПоМестуЖительства,"ДФ='дд ММММ гггг'; ДП='Не указано'");
			
			УдостоверениеЛичности = СтрЗаменить(УдостоверениеЛичности,"Не указано","...");
			
			Модифицированность = Истина;
			
		Иначе
			УдостоверениеЛичности = "Ввести данные об удостоверении личности";
			
		КонецЕсли;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ФИО" Тогда
		ПрочитатьФИО();
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "Инвалидность" Тогда
		Если мНаборЗаписейИнвалидность.Количество() > 0 Тогда
			ЗаписьИзНабора = мНаборЗаписейИнвалидность[0];
			
			Если ЗаписьИзНабора.Инвалидность Тогда
				Инвалидность = 	"инвалид: " + ЗаписьИзНабора.ГруппаИнвалидности + " группы" 
								+ ", справка серия: " + ЗаписьИзНабора.СерияСправки + ", номер: " + ЗаписьИзНабора.НомерСправки 
								+ ", выдана: "  + Формат(ЗаписьИзНабора.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'") + " года "
								+ ", срок действия: " + Формат(ЗаписьИзНабора.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'") + " года ";
								
			Иначе
				Инвалидность = "Не является инвалидом";
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		Иначе
			Инвалидность = "Ввести данные об инвалидности";
			
		КонецЕсли;
		КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" И (Источник = ЭтаФорма Или Источник = ЭтаФорма.Ссылка) Тогда 
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента);
		
	ИначеЕсли ИмяСобытия = "ОбновитьУдостоверениеЛичности" Тогда
		
		ОбновитьПредставлениеЭлемента("УдостоверениеЛичности");
		
	ИначеЕсли ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);	
	
	КонецЕсли;
	
КонецПроцедуры

Функция ОбновитьИННОрганизаций()
	
	ТекстСообщения = "";
	ЗапросОрганизации = Новый Запрос;
	
	ЗапросОрганизации.УстановитьПараметр("ИндивидуальныйПредприниматель", Ссылка);
	ЗапросОрганизации.УстановитьПараметр("ИНН", ИНН);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ИндивидуальныйПредприниматель = &ИндивидуальныйПредприниматель И
	|	Организации.ИНН <> &ИНН";
	
	ЗапросОрганизации.Текст = ТекстЗапроса;
	
	ВыборкаЗапроса = ЗапросОрганизации.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЗависимаяОрганизация = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		Если ВладелецФормы <> Неопределено И ТипЗнч(ВладелецФормы) = Тип("Форма") И ВладелецФормы.ЭтотОбъект.Ссылка = ЗависимаяОрганизация.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
		    ЗависимаяОрганизация.Заблокировать();
		Исключение
			
			ТекстСообщения = "Организация: " + ВыборкаЗапроса.Ссылка + " - объект заблокирован.";
			Возврат ТекстСообщения
		
		КонецПопытки;
		
	КонецЦикла;	    
	
	ВыборкаЗапроса.Сбросить(); 
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЗависимаяОрганизация = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		
		Если ВладелецФормы <> Неопределено И ТипЗнч(ВладелецФормы) = Тип("Форма") И ВладелецФормы.ЭтотОбъект.Ссылка = ЗависимаяОрганизация.Ссылка Тогда
			ВладелецФормы.ИНН = ИНН;
			Продолжить;
		КонецЕсли;
		ЗависимаяОрганизация.ИНН = ИНН;
		ЗависимаяОрганизация.Записать();
		
	КонецЦикла; 

	Возврат ТекстСообщения;
	
КонецФункции

Процедура ПриЗаписи(Отказ)

	ЗаписатьДанныеФИО();

	ЗаписатьПроцентСевернойНадбавки();
	
	Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 тогда
		ПроверитьДубли(мНаборЗаписейДокументаУдостоверяющегоЛичность[0], ЭлементыФормы.ИНН.Значение, ЭлементыФормы.СтраховойНомерПФР.Значение, ЭлементыФормы.Наименование.Значение);
	КОнецЕсли;
	
	РегламентированнаяОтчетность.ЗаписатьДанныеФИОВРегистр(Ссылка, Фамилия, Имя, Отчество);
	
	// запись в регистр паспортных данных
	Если мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период) Тогда
		мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо = Ссылка;

		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Использование 	= Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Значение 		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование = Истина;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение 		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период;
		мНаборЗаписейДокументаУдостоверяющегоЛичность.Записать(Истина);
	КонецЕсли;

	// запись в регистр гражданство
	Если мНаборЗаписейГражданство.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
		мНаборЗаписейГражданство[0].Физлицо = Ссылка;
		мНаборЗаписейГражданство.Отбор.Физлицо.Использование 	= Истина;
		мНаборЗаписейГражданство.Отбор.Физлицо.Значение 		= мНаборЗаписейГражданство[0].Физлицо;
		мНаборЗаписейГражданство.Отбор.Период.Использование 	= Истина;
		мНаборЗаписейГражданство.Отбор.Период.Значение 			= мНаборЗаписейГражданство[0].Период;
		мНаборЗаписейГражданство.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр Сведения об инвалидности
	Если мНаборЗаписейИнвалидность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
		мНаборЗаписейИнвалидность[0].Физлицо = Ссылка;
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование 	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение 		= мНаборЗаписейИнвалидность[0].Физлицо;
		мНаборЗаписейИнвалидность.Отбор.Период.Использование 	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Период.Значение 		= мНаборЗаписейИнвалидность[0].Период;
		мНаборЗаписейИнвалидность.Записать(Истина);
	КонецЕсли;
	
	// Запись в регистр контактной информации
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка, Отказ, мКопияНабораКонтактнойИнформации);
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		Если РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ИНН, Перечисления.ЮрФизЛицо.ФизЛицо) Тогда
			ТекстЗаписиИНН = ОбновитьИННОрганизаций();
			
			Если НЕ ПустаяСтрока(ТекстЗаписиИНН) Тогда
				
				Сообщить(ТекстЗаписиИНН + Символы.ПС + "Элемент не записан!");
				Отказ = Истина;
				
			КонецЕсли;
		Иначе
			Сообщить("ИНН физического лица задан неверно!", СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


Процедура ДействияФормыНДФЛ(Кнопка)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если НЕ Отказ Тогда
		
		мФормаВводаНДФЛ = ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
		мФормаВводаНДФЛ.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура формирует список вариантов для наименования элемента
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВозможныхНаименований = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Фамилия) Тогда
		СписокВозможныхНаименований.Добавить(Фамилия);
		Если ЗначениеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя));
			СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ".");
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");
 			КонецЕсли;
		 КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Имя) Тогда
			СписокВозможныхНаименований.Добавить(Имя);
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + " " + СокрЛП(Отчество));
				СписокВозможныхНаименований.Добавить(СокрЛП(Имя) + ". " + Лев(Отчество,1)+ ".");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Отчество) Тогда
				СписокВозможныхНаименований.Добавить(Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВозможныхНаименований;
КонецПроцедуры

Процедура НаименованиеПриИзменении(Элемент)

	ФИО = Наименование;

	Если ПустаяСтрока(Фамилия) ИЛИ ЭтоНовый() Тогда
		Фамилия  = ВыделитьСлово(ФИО);
		Имя      = ВыделитьСлово(ФИО);
		Отчество = ВыделитьСлово(ФИО);
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаВызоваДанныхФИОНажатие(Элемент)

	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Перед переходом к дополнительным данным о физ. лице необходимо записать элемент. Записать?", РежимДиалогаВопрос.ДаНет);
		Отказ = Ложь;
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
		Если Не Отказ Тогда
			ЗаписатьДанныеФИО();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаРегистра = РегистрыСведений.ФИОФизЛиц.ПолучитьФорму("ФормаЗаписиДополнительная", ЭтаФорма);
	ФормаРегистра.Физлицо  = Ссылка;
		
	ТаблицаРегистра = РегистрыСведений.ФИОФизЛиц.СрезПоследних(, Новый Структура("ФизЛицо",Ссылка));

	Если ТаблицаРегистра.Количество() > 0 Тогда
		
		ФормаРегистра.Период   = ТаблицаРегистра[0].Период;
		ФормаРегистра.Фамилия  = ТаблицаРегистра[0].Фамилия;
		ФормаРегистра.Имя      = ТаблицаРегистра[0].Имя;
		ФормаРегистра.Отчество = ТаблицаРегистра[0].Отчество;
		
	Иначе
		
		ФормаРегистра.Период   = '19000101';
		ФИО = Наименование;
		ФормаРегистра.Фамилия  = ВыделитьСлово(ФИО);
		ФормаРегистра.Имя	   = ВыделитьСлово(ФИО);
		ФормаРегистра.Отчество = ВыделитьСлово(ФИО);
		
	КонецЕсли;
	
	ФормаРегистра.Открыть();
	
КонецПроцедуры

Процедура КодИМНСПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИНН) Тогда
		ИНН = КодИМНС
	КонецЕсли;
КонецПроцедуры

// Процедура записывает код ИФНС "по умолчанию" по первым 4 цифрам ИНН
Процедура ИННПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(КодИМНС) Тогда
		КодИМНС = Лев(ИНН,4)
	КонецЕсли;
КонецПроцедуры

Процедура МестоРожденияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	мФормаВводаМестаРождения = ПолучитьОбщуюФорму("ФормаВводаМестаРождения", ЭтаФорма, "ФизЛицо"+Код);
	мФормаВводаМестаРождения.МестоРожденияСтрокой = МестоРождения;
	мФормаВводаМестаРождения.ЗаголовокФормы       = "Место рождения физ. лица: "+Наименование;
	мФормаВводаМестаРождения.Открыть();
	
КонецПроцедуры

Процедура УдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;

	ФормаВвода	 			= ПолучитьОбщуюФорму("РедактированиеДокументаУдостоверяющегоЛичность", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейДокументаУдостоверяющегоЛичность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка 	= Ложь;
	Отказ 					= Ложь;
	ФормаВвода	 			= ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВвода	 			= ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейИнвалидность;
	ФормаВвода.Открыть();
	
КонецПроцедуры



// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

Процедура ПослеЗаписи()
	СинхронизироватьНаименованияСотрудников(Ссылка);
	Оповестить("ОбновитьДанныеОФизлице",Ссылка);
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ СВЯЗАННЫЕ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица,
			Новый Действие("НажатиеДопКнопкиКИ"),
			НаборКонтактнойИнформации,
			ЭлементыФормы.ОсновнаяПанель,
			ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация,
			Неопределено,
			ЭлементыФормы.ПолеВводаПрочаяКИ,
			Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ2, Неопределено, ЭлементыФормы.ПолеКИ2);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ3, Неопределено, ЭлементыФормы.ПолеКИ3);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ4, Неопределено, ЭлементыФормы.ПолеКИ4);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ5, Неопределено, ЭлементыФормы.ПолеКИ5);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ6, Неопределено, ЭлементыФормы.ПолеКИ6);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ7, Неопределено, ЭлементыФормы.ПолеКИ7);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Дополнительные кнопки в кнопках КИ
Процедура НажатиеДопКнопкиКИ(Кнопка)
	УправлениеКонтактнойИнформацией.НажатиеДопКнопкиКИ(мСтруктураРедактированияКИ, Кнопка, ЭтаФорма);
КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При изменении прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаПрочаяКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

Процедура КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(Кнопка)
	УправлениеКонтактнойИнформацией.КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(мСтруктураРедактированияКИ, ЭтаФорма);
КонецПроцедуры

Процедура ДействияФормыКонтактнаяИнформация(Кнопка)
	Форма = РегистрыСведений.КонтактнаяИнформация.ПолучитьФормуСписка(, ЭтаФорма);
	Форма.РегистрСведенийСписок.Отбор.Объект.Значение = Ссылка;
	Форма.Открыть();
КонецПроцедуры




УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);

мОбработкаТайпингаВидаКИ                 = Ложь;
мТекстТайпингаВидаКИ                     = "";
мПоследнееЗначениеЭлементаТайпингаВидаКИ = Неопределено;

мПустаяКартинка = Новый Картинка;

мНаборЗаписейДокументаУдостоверяющегоЛичность	= РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейГражданство						= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейИнвалидность						= РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();



