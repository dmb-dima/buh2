////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;
Перем мСписокВыбораСтандартныхВычетов;
Перем мСписокВыбораСтандартныхВычетовНаДетей;
Перем мСписокОрганизацийПоРаботнику;
Перем мБылаДатаСтатусНалогоплательщикаПоНДФЛ;
Перем мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ получения статуса налогоплательщика по НДФЛ

Процедура ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма) Экспорт
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ, ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);
	//уточним представление периода
	ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);
	
	ДатаОкончания = "";
	Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
	Для каждого СтрокаТаблицы Из ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ Цикл
		Если СтрокаТаблицы.Период > ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ Тогда
			ДатаОкончания = СтрокаТаблицы.Период;
			Прервать;
		КонецЕсли;
		Статус = СтрокаТаблицы.Статус;
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ = Статус;
		НадписьОкончанияДействия = "по " + РаботаСДиалогами.ДатаКакМесяцПредставление(ДатаОкончания);
	Иначе
		НадписьОкончанияДействия = "";
	КонецЕсли;
	ЭтаФорма.ЭлементыФормы.НадписьОкончаниеДействияСтатусаНДФЛ.Заголовок = НадписьОкончанияДействия;
	
КонецПроцедуры

Функция ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ(СтатусНалогоплательщикаПоНДФЛ) Экспорт

	ТекстОписания = "";
	Если СтатусНалогоплательщикаПоНДФЛ = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
		ТекстОписания = "Физическое лицо постоянно находится на территории РФ (за прошедшие 12 месяцев - более 183 дней)." + Символы.ПС + "При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
	ИначеЕсли СтатусНалогоплательщикаПоНДФЛ = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
		ТекстОписания = "Физическое лицо постоянно находится за пределами территории РФ (за прошедшие 12 месяцев - более 183 дней)." + Символы.ПС + "При исчислении НДФЛ с оплаты труда будет применяться ставка 30%";
	ИначеЕсли  СтатусНалогоплательщикаПоНДФЛ = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
		ТекстОписания = "Физическое лицо является высококвалифицированным иностранным специалистом." + Символы.ПС + "При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
	ИначеЕсли  СтатусНалогоплательщикаПоНДФЛ = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
		ТекстОписания = "Физическое лицо является участником Государственной программы по оказанию содействия добровольному переселению в Российскую Федерацию соотечественников, проживающих за рубежом." + Символы.ПС + "При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";	
	КонецЕсли;	
	Возврат ТекстОписания;

КонецФункции // ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ()

Процедура ПолучитьСтатусНалогоплательщикаПоНДФЛ(ЭтаФорма) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Физлицо.Установить(ЭтаФорма.Ссылка);
	НаборЗаписей.Прочитать();
	
	ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ = НаборЗаписей.Выгрузить();
	ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Сортировать("Период");
	
	Если ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество() > 0 Тогда
		СтрокаТаблицы = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ[ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество()-1];
	Иначе
		СтрокаТаблицы = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Добавить();
		СтрокаТаблицы.Период  = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
		СтрокаТаблицы.Физлицо = ЭтаФорма.Ссылка;
		СтрокаТаблицы.Статус  = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
	КонецЕсли;
	ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ = СтрокаТаблицы.Период;
	ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ 	   = СтрокаТаблицы.Статус;
	ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);
	ЭтаФорма.РасшифровкаНДФЛ = ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ);
	
КонецПроцедуры

Функция ЗаписатьДанныеОСтатусе(ЭтаФорма) Экспорт

	СтруктураПоиска = Новый Структура("Период");
	СтруктураПоиска.Вставить("Период", ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);
	МассивСтрок = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.НайтиСтроки(СтруктураПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
		СтрокаТаблицы.Статус  = ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ;
	Иначе
		// добавим значение из формы в таблицу
		НоваяСтрока = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Добавить();
		НоваяСтрока.Физлицо = ЭтаФорма.Ссылка;
		НоваяСтрока.Период  = ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ;
		НоваяСтрока.Статус  = ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ;
		ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Сортировать("Период");
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Физлицо.Установить(ЭтаФорма.Ссылка);
	Если Не РаботаСДиалогамиЗК.ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ, "Период") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ЗаписатьДанныеОСтатусе()

Процедура ОбработатьОповещениеОбИзмененииИсторииСтатусНалогоплательщикаПоНДФЛ(ЭтаФорма, ТаблицаИсторииЗначений) Экспорт

	ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ = ТаблицаИсторииЗначений.Скопировать();
	
	ЭтаФорма.Модифицированность = Истина;
	Если ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество() > 0 Тогда
		// установим в форме последнее значение
		ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ     = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ[ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество()-1].Статус;
		ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ[ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество()-1].Период;
	Иначе
		ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ     = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент;
		ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ = НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли; 
	ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);
	ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма);
	
КонецПроцедуры



// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

// Функция собирает данные м предыдущего места работы.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса по регистру НДФЛДоходыПредыдущегоМестаРаботы.
//
Функция СформироватьПредыдущиеДанные()
	
	ЗапросПредыдущиеДанные = Новый Запрос;
	ЗапросПредыдущиеДанные.УстановитьПараметр("ФизЛицо", Ссылка);
	ЗапросПредыдущиеДанные.УстановитьПараметр("Организация", Организация);
	ЗапросПредыдущиеДанные.УстановитьПараметр("Год", Год);
	НачалоГода = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "0101");
	ЗапросПредыдущиеДанные.УстановитьПараметр("МесяцНалоговогоПериодаНачало", НачалоГода);
	ОкончаниеГода = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "1231");
	ЗапросПредыдущиеДанные.УстановитьПараметр("МесяцНалоговогоПериодаОкончание", ОкончаниеГода);
	
	ЗапросПредыдущиеДанные.Текст = 
	"ВЫБРАТЬ
	|	НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода,
	|	НДФЛДоходыПредыдущегоМестаРаботы.Размер - ЕСТЬNULL(НДФЛДоходыПредыдущегоМесяца.Размер, 0) КАК Размер
	|ИЗ
	|	РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМесяца
	|		ПО НДФЛДоходыПредыдущегоМестаРаботы.Организация = НДФЛДоходыПредыдущегоМесяца.Организация
	|			И НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = НДФЛДоходыПредыдущегоМесяца.ФизЛицо
	|			И (НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = ДОБАВИТЬКДАТЕ(НДФЛДоходыПредыдущегоМесяца.МесяцНалоговогоПериода, МЕСЯЦ, 1))
	|			И (ГОД(НДФЛДоходыПредыдущегоМесяца.МесяцНалоговогоПериода) = &Год)
	|ГДЕ
	|	НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = &ФизЛицо
	|	И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода МЕЖДУ &МесяцНалоговогоПериодаНачало И &МесяцНалоговогоПериодаОкончание
	|	И НДФЛДоходыПредыдущегоМестаРаботы.Организация = &Организация";
	
    Возврат ЗапросПредыдущиеДанные.Выполнить().Выгрузить();
	
КонецФункции // СформироватьПредыдущиеДанные()

// Функция формирует список доступных организаций для физического лица.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса по регистру РаботникиОрганизации.
//
Функция СформироватьСписокОрганизаций()

	// Определение организации работника
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФизЛицо",			Ссылка);
	
	// Выберерем все организации, в которых работал работник
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РаботникиОрганизации.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Сотрудник.Физлицо = &ФизЛицо
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорникиОрганизаций.Организация
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК ДоговорникиОрганизаций
	|ГДЕ
	|	ДоговорникиОрганизаций.Физлицо = &ФизЛицо
	|	И ДоговорникиОрганизаций.Актуальность = ИСТИНА
	|	И ДоговорникиОрганизаций.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		//по физлицу нет данных о местах работы, покажем список всех разрешенных головных организаций
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
		РезультатЗапроса = Запрос.Выполнить();
	КонецЕсли;
	
	Возврат РезультатЗапроса;

КонецФункции  //СформироватьСписокОрганизаций()

// Функция формирует таблицу значений для записи доходов с предыдущего места работы.
//
// Параметры
//
// Возвращаемое значение:
//     ТаблицаЗначений – таблица для записи доходов.
//
Функция СформироватьПустуюТаблицуДоходов()

    ТаблицаДоходов = ДоходыПредыдущие.СкопироватьКолонки();
	
	ЗаписываемаяДата = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "0101");
	Для Сч = 1 По 12 Цикл
	   ТаблицаДоходов.Добавить().МесяцНалоговогоПериода = ЗаписываемаяДата;
	   ЗаписываемаяДата = ДобавитьМесяц(ЗаписываемаяДата,1)
	КонецЦикла; 
	
    Возврат ТаблицаДоходов
	
КонецФункции // СформироватьПустуюТаблицуДоходов()

// Функция записывает доходы физ лица с предыдущего места работы в подготовленную
// таблицу значений. 
//
// Параметры
//  ПустаяТаблица  – ТаблицаЗначений – таблица из 12 строк, по месяцам
//  ТаблицаДоходов  – ТаблицаЗначений – таблица доходов с предыдущего места физ лица.
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   ТаблицаЗначений   – готовая таблица, с доходали с предыдущего места работы.
//
Функция ДополнитьТаблицуДоходов(ПустаяТаблица, ТаблицаДоходов)
	
	Для каждого СтрокаТЗ Из ТаблицаДоходов Цикл 
		
		НайденнаяСтрока = ПустаяТаблица.Найти(СтрокаТЗ.МесяцНалоговогоПериода);
		НайденнаяСтрока.Размер = СтрокаТЗ.Размер;
		
	КонецЦикла; 
	
	Возврат ПустаяТаблица;
	
КонецФункции // ДополнитьТаблицуДоходов()

Процедура ЗаписатьДоходыПредыдущегоМестаРаботы()
	
	НаборЗаписей = РегистрыСведений.НДФЛДоходыПредыдущегоМестаРаботы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизЛицо.Значение			 = Ссылка;
	НаборЗаписей.Отбор.ФизЛицо.Использование	 = Истина;
	НаборЗаписей.Отбор.Организация.Значение		 = Организация;
	НаборЗаписей.Отбор.Организация.Использование = Истина;
	НаборЗаписей.Прочитать();
	
	ГодСведений = Год(ДоходыПредыдущие[0].МесяцНалоговогоПериода);
	
	ЗаписейВНаборе = НаборЗаписей.Количество();
	Для Сч = 1 По ЗаписейВНаборе Цикл
		Если Год(НаборЗаписей[ЗаписейВНаборе - Сч].МесяцНалоговогоПериода) = ГодСведений Тогда
			НаборЗаписей.Удалить(ЗаписейВНаборе - Сч)
		КонецЕсли;	
	КонецЦикла; 
	
	РазмерНарастающимИтогом = 0;
	Для каждого СтрокаТЗ Из ДоходыПредыдущие Цикл
		
		РазмерНарастающимИтогом = РазмерНарастающимИтогом + СтрокаТЗ.Размер;
		
		Если РазмерНарастающимИтогом <> 0 Тогда
			НоваяСтрокаРегиста = НаборЗаписей.Добавить();
			НоваяСтрокаРегиста.МесяцНалоговогоПериода = СтрокаТЗ.МесяцНалоговогоПериода;
			НоваяСтрокаРегиста.Размер                 = РазмерНарастающимИтогом;
			НоваяСтрокаРегиста.ФизЛицо				  = Ссылка;
			НоваяСтрокаРегиста.Организация			  = Организация;
		КонецЕсли;
			
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция СохранитьДанные()
	
	// запишем доходы с предыдущего места работы
	ЗаписатьДоходыПредыдущегоМестаРаботы();
	
	// запишем данные о статусе
	Если Не ЗаписатьДанныеОСтатусе(ЭтаФорма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "При открытии" формы отчета.
//
Процедура ПриОткрытии()
	
	Если НЕ ТолькоДанныеОСтатусе Тогда
		ОтборСтандартныеВычеты = СтандартныеВычеты.Отбор.Физлицо;
		ОтборСтандартныеВычеты.Значение      = Ссылка;
		ОтборСтандартныеВычеты.Использование = Истина;
		
		ОтборСтандартныеВычетыНаДетей = СтандартныеВычетыНаДетей.Отбор.Физлицо;
		ОтборСтандартныеВычетыНаДетей.Значение      = Ссылка;
		ОтборСтандартныеВычетыНаДетей.Использование = Истина;
		
		ОтборПрименениеВычетов = ПрименениеВычетов.Отбор.Физлицо;
		ОтборПрименениеВычетов.Значение      = Ссылка;
		ОтборПрименениеВычетов.Использование = Истина;
		
		ЭлементыФормы.Год.Значение = Год(РабочаяДата);
		
		мСписокОрганизацийПоРаботнику = Новый СписокЗначений;
		мСписокОрганизацийПоРаботнику.ЗагрузитьЗначения(СформироватьСписокОрганизаций().Выгрузить().ВыгрузитьКолонку("Организация"));
		
		Если мСписокОрганизацийПоРаботнику.Количество() > 0 Тогда
			Организация = мСписокОрганизацийПоРаботнику[0].Значение;
			ДоходыПредыдущие = ДополнитьТаблицуДоходов(СформироватьПустуюТаблицуДоходов(), СформироватьПредыдущиеДанные());
		Иначе	
			ДоходыПредыдущие = СформироватьПустуюТаблицуДоходов()
		КонецЕсли;
		
		Заголовок = "Ввод данных для НДФЛ по физ.лицу: " + Ссылка.Наименование;
		СпрСтандартныеВычеты = Справочники.ВычетыНДФЛ;
		
		// подготовим списки вычетов для указания в т.п. стандартных вычетов
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВычетыНДФЛ.Ссылка,
		|	ВычетыНДФЛ.Код,
		|	ВычетыНДФЛ.Наименование
		|ИЗ
		|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
		|ГДЕ
		|	ВычетыНДФЛ.ГруппаВычета = &ГруппаВычета");
		
		Запрос.УстановитьПараметр("ГруппаВычета", Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
		Выборка = Запрос.Выполнить().Выбрать();		
		
		мСписокВыбораСтандартныхВычетов = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			мСписокВыбораСтандартныхВычетов.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Код) + " (" + СокрЛП(Выборка.Наименование) + ")");
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ГруппаВычета", Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
		
		Выборка = Запрос.Выполнить().Выбрать();		
		
		мСписокВыбораСтандартныхВычетовНаДетей = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Если Выборка.Ссылка = СпрСтандартныеВычеты.Код101 Тогда
				НаименованиеВычета = "на каждого ребенка в возрасте до 18 лет"
			ИначеЕсли Выборка.Ссылка = СпрСтандартныеВычеты.Код102 Тогда
				НаименованиеВычета = "удвоенный, на каждого ребенка в возрасте до 18 лет"
			ИначеЕсли Выборка.Ссылка = СпрСтандартныеВычеты.Код106 Тогда
				НаименованиеВычета = "на каждого ребенка-инвалида в возрасте до 18 лет"
			ИначеЕсли Выборка.Ссылка = СпрСтандартныеВычеты.Код107 Тогда
				НаименованиеВычета = "удвоенный, на каждого ребенка-инвалида в возрасте до 18 лет"
			КонецЕсли;
			
			мСписокВыбораСтандартныхВычетовНаДетей.Добавить(Выборка.Ссылка, "(" + Выборка.Код + ") " + НаименованиеВычета);	
		КонецЦикла;
	
		
		// получим статус налогоплательщика по НДФЛ
		ПолучитьСтатусНалогоплательщикаПоНДФЛ(ЭтаФорма);
		
	Иначе
		
		Если НаборЗаписейСтатус.Количество() = 0 тогда
			НаборЗаписейСтатус.Добавить();
			ЗаписьИзНабора = НаборЗаписейСтатус[0];
		КонецЕсли;
		
		ИндексКнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Индекс(ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действие1);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить(ИндексКнопки);
		
		ЗаписьИзНабора 						= НаборЗаписейСтатус[0];
		Период 								= ?(ЗначениеЗаполнено(ЗаписьИзНабора.Период), ЗаписьИзНабора.Период, НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
		Статус 								= ЗаписьИзНабора.Статус;
		ФизЛицо								= ЗаписьИзНабора.Физлицо;
		
		ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ = НаборЗаписейСтатус.Выгрузить();
		ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Очистить();
		
		СтрокаТаблицы = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Добавить();
		СтрокаТаблицы.Период  = Период;
		СтрокаТаблицы.Физлицо = ФизЛицо;
		СтрокаТаблицы.Статус  = ?(ЗначениеЗаполнено(Статус), Статус, Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент);
		
		ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ = СтрокаТаблицы.Период;
		ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ 	   = СтрокаТаблицы.Статус;
		ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);
		ЭтаФорма.РасшифровкаНДФЛ = ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "При записи" формы отчета.
//
Процедура ПриЗаписи(Отказ)
		
	Если НЕ ТолькоДанныеОСтатусе Тогда
		СохранитьДанные();
	Иначе
		НаборЗаписейСтатус[0].Период = ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ;
		НаборЗаписейСтатус[0].Статус = ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Если НЕ ТолькоДанныеОСтатусе Тогда
		Если ТипЗнч(ЭтаФорма.ВладелецФормы.ЭтотОбъект) = Тип("СправочникОбъект.СотрудникиОрганизаций") Тогда
			Если ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты.Видимость Тогда
				Оповестить("ОбновитьФорму", Новый Структура("ИмяЭлемента","СтандартныеВычеты"), Ссылка);
			ИначеЕсли ЭлементыФормы.ОсновнаяПанель.Страницы.СтатусНалогоплательщика.Видимость Тогда
				Оповестить("ОбновитьФорму", Новый Структура("ИмяЭлемента","СтатусНалогоплательщика"), Ссылка);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Оповестить("ОбновитьФорму", Новый Структура("ИмяЭлемента","СтатусНалогоплательщика"), Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ТолькоДанныеОСтатусе Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты.Видимость Тогда
		
		// проверим регистрацию применения стандартных вычетов по организации
		// сообщим пользователю если текущий момент
		// - зарегистрированы вычеты и не зарегистрировано применение вычетов
		// - зарегистрировано применение вычетов и не зарегистрированы вычеты
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтандартныеВычетыСрезПоследних.Период,
		|	СтандартныеВычетыСрезПоследних.Физлицо,
		|	СтандартныеВычетыСрезПоследних.КодВычетаЛичный
		|ПОМЕСТИТЬ ВТ_ВычетЛичный
		|ИЗ
		|	РегистрСведений.НДФЛСтандартныеВычетыФизлиц.СрезПоследних(, Физлицо = &парамФизлицо) КАК СтандартныеВычетыСрезПоследних
		|ГДЕ
		|	СтандартныеВычетыСрезПоследних.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НДФЛСтандартныеВычетыНаДетей.Период,
		|	НДФЛСтандартныеВычетыНаДетей.Физлицо,
		|	НДФЛСтандартныеВычетыНаДетей.КодВычета
		|ПОМЕСТИТЬ ВТ_ВычетНаДетей
		|ИЗ
		|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних(, Физлицо = &парамФизлицо) КАК НДФЛСтандартныеВычетыНаДетей
		|ГДЕ
		|	НДФЛСтандартныеВычетыНаДетей.КодВычета <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПрименениеВычетовСрезПоследних.Организация,
		|	ПрименениеВычетовСрезПоследних.Период
		|ПОМЕСТИТЬ ВТ_ПрименениеВычетов
		|ИЗ
		|	РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(, Физлицо = &парамФизлицо) КАК ПрименениеВычетовСрезПоследних
		|ГДЕ
		|	ПрименениеВычетовСрезПоследних.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Вычеты.ОписаниеПроблемы
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПрименениеВычетовСрезПоследних.Организация ЕСТЬ NULL 
		|				ТОГДА ""НетОрганизации""
		|			ИНАЧЕ ""ЕстьОрганизация""
		|		КОНЕЦ КАК ОписаниеПроблемы
		|	ИЗ
		|		ВТ_ВычетЛичный КАК СтандартныеВычетыСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетов КАК ПрименениеВычетовСрезПоследних
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		ПрименениеВычетовСрезПоследних.Организация ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА ПрименениеВычетовСрезПоследних.Организация ЕСТЬ NULL 
		|				ТОГДА ""НетОрганизации""
		|			ИНАЧЕ ""ЕстьОрганизация""
		|		КОНЕЦ
		|	ИЗ
		|		ВТ_ВычетНаДетей КАК НДФЛСтандартныеВычетыНаДетей
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПрименениеВычетов КАК ПрименениеВычетовСрезПоследних
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		ПрименениеВычетовСрезПоследних.Организация ЕСТЬ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ВЫБОР
		|			КОГДА СтандартныеВычетыСрезПоследних.Физлицо ЕСТЬ NULL 
		|					И НДФЛСтандартныеВычетыНаДетей.Физлицо ЕСТЬ NULL 
		|				ТОГДА ""НетВычетов""
		|			ИНАЧЕ ""ЕстьВычеты""
		|		КОНЕЦ
		|	ИЗ
		|		ВТ_ПрименениеВычетов КАК ПрименениеВычетовСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВычетЛичный КАК СтандартныеВычетыСрезПоследних
		|			ПО (ИСТИНА)
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВычетНаДетей КАК НДФЛСтандартныеВычетыНаДетей
		|			ПО (ИСТИНА)
		|	ГДЕ
		|		СтандартныеВычетыСрезПоследних.Физлицо ЕСТЬ NULL 
		|		И НДФЛСтандартныеВычетыНаДетей.Физлицо ЕСТЬ NULL ) КАК Вычеты";
		
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Если РезультатЗапроса.Количество() = 1 Тогда
			
			ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты;
			
			РезультатЗапроса.Следующий();
			Если Найти(РезультатЗапроса.ОписаниеПроблемы, "НетОрганизации") Тогда
				ТекущийЭлемент = ЭлементыФормы.ПрименениеВычетов;
				СтрокаСообщения = "не задана организация в которой при исчислении НДФЛ" + Символы.ПС
				+ "будут применяться вычеты и дата с которой они будут применяться. ";
			ИначеЕсли Найти(РезультатЗапроса.ОписаниеПроблемы, "НетВычетов") Тогда
				ТекущийЭлемент = ЭлементыФормы.СтандартныеВычеты;
				СтрокаСообщения = "не зарегистрировано право на стандартные вычеты. ";
			Иначе
				Возврат;
			КонецЕсли;
			
			ТекстВопроса = "Не все данные заполнены - " + СтрокаСообщения + "Закрыть форму?";
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.СтатусНалогоплательщика.Видимость Тогда
		
		Если НЕ Отказ и Модифицированность Тогда
			Ответ = Вопрос("Данные были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Если Не СохранитьДанные() Тогда
					Отказ = Истина;
				Иначе
					Модифицированность = Ложь;
				КонецЕсли;	
			ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ 

// Процедура - обработчик события "При изменении" поля "Год".
//
Процедура ГодПриИзменении(Элемент)
	
	ЗаписатьДоходыПредыдущегоМестаРаботы();
	
	ДоходыПредыдущие = ДополнитьТаблицуДоходов(СформироватьПустуюТаблицуДоходов(), СформироватьПредыдущиеДанные());
	
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
		
	ДоходыПредыдущие = ДополнитьТаблицуДоходов(СформироватьПустуюТаблицуДоходов(), СформироватьПредыдущиеДанные());

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля "Организация".
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементСписка = ВыбратьИзСписка(мСписокОрганизацийПоРаботнику,Элемент,мСписокОрганизацийПоРаботнику.НайтиПоЗначению(Элемент.Значение));
    Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ДоходыПредыдущие = ДополнитьТаблицуДоходов(СформироватьПустуюТаблицуДоходов(), СформироватьПредыдущиеДанные());
	КонецЕсли;

КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокОрганизацийПоРаботнику), Тип("СправочникСсылка.Организации"));
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокОрганизацийПоРаботнику), ЭтаФорма, Тип("СправочникСсылка.Организации"), Ложь, Ложь, Неопределено, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ ПрименениеВычетов

Процедура ПрименениеВычетовОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение
	КонецЕсли;
КонецПроцедуры

Процедура ПрименениеВычетовОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.Организации"));

КонецПроцедуры

Процедура ПрименениеВычетовОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ПрименениеВычетовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПрименятьВычетыТекст.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ВычетыПрименение.Значение = ЗначениеЗаполнено(ДанныеСтроки.Организация);	
	
КонецПроцедуры

Процедура ПрименениеВычетовВычетыПрименениеПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение);
		Если Организация.Пустая() Тогда
			Организация = РаботаСДиалогами.ПодобратьОрганизацию(Истина);
		КонецЕсли;
		ЭлементыФормы.ПрименениеВычетов.ТекущиеДанные.Организация = Организация;
	Иначе
		ЭлементыФормы.ПрименениеВычетов.ТекущиеДанные.Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПрименениеВычетовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и не Копирование Тогда
	
		ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение);
		Если Организация.Пустая() Тогда
			Организация = РаботаСДиалогами.ПодобратьОрганизацию(Истина);
		КонецЕсли;
		Элемент.ТекущиеДанные.Организация = Организация;
	
	КонецЕсли;
	
   Элемент.Колонки.ВычетыПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.ТекущиеДанные.Организация);
   
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ СтандартныеВычеты

Процедура СтандартныеВычетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103;	
	КонецЕсли;
	
	Элемент.Колонки.ВычетыЛичныеПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.ТекущиеДанные.КодВычетаЛичный);
	
КонецПроцедуры

Процедура СтандартныеВычетыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ВычетыЛичныеТекст.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ВычетыЛичныеПрименение.Значение = ЗначениеЗаполнено(ДанныеСтроки.КодВычетаЛичный);
	
КонецПроцедуры

Процедура СтандартныеВычетыВычетыЛичныеПрименениеПриИзменении(Элемент)
    Если Не Элемент.Значение  Тогда
        ЭлементыФормы.СтандартныеВычеты.ТекущиеДанные.КодВычетаЛичный = Справочники.ВычетыНДФЛ.ПустаяСсылка();
    Иначе
        ЭлементыФормы.СтандартныеВычеты.ТекущиеДанные.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103;
    КонецЕсли;
КонецПроцедуры

Процедура СтандартныеВычетыКодВычетаЛичныйПриИзменении(Элемент)
	
	ЭлементыФормы.СтандартныеВычеты.Колонки.ВычетыЛичныеПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля "КодВычетаЛичный".
//
Процедура СтандартныеВычетыКодВычетаЛичныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ВычетыНДФЛ.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения	= ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение		= мСписокВыбораСтандартныхВычетов;
	ФормаВыбора.Отбор.Ссылка.Использование	= Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "Авто подбор текста" поля "КодВычетаЛичный".
//
Процедура СтандартныеВычетыКодВычетаЛичныйАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетов), Тип("СправочникСсылка.ВычетыНДФЛ"));

КонецПроцедуры

// Процедура - обработчик события "Окончание ввода текста" поля "КодВычетаЛичный".
//
Процедура СтандартныеВычетыКодВычетаЛичныйОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетов), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ СтандартныеВычетыНаДетей

Процедура СтандартныеВычетыНаДетейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодВычета = Справочники.ВычетыНДФЛ.Код101;	
        ТекущиеДанные.КоличествоДетей = 1;
	КонецЕсли;
	
	Элемент.Колонки.ВычетыНаДетейПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(ТекущиеДанные.КоличествоДетей);
	
КонецПроцедуры

Процедура СтандартныеВычетыНаДетейПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ОформлениеСтроки.Ячейки.КолонкаПериод.Видимость = Ложь;	
		ОформлениеСтроки.Ячейки.ВычетыНаДетейТекст.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВычетыНаДетейПрименение.Значение = ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.КоличествоДетей);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СтандартныеВычетыВычетыНаДетейПрименениеПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные;
	Если Не Элемент.Значение Тогда
        ТекущиеДанные.КоличествоДетей = 0;
    ИначеЕсли ТекущиеДанные.КодВычета = Справочники.ВычетыНДФЛ.ПустаяСсылка() Тогда
        ТекущиеДанные.КодВычета = Справочники.ВычетыНДФЛ.Код101;
        ТекущиеДанные.КоличествоДетей = 1;
	Иначе 	
        ТекущиеДанные.КоличествоДетей = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля "КодВычетаНаДетей".
//
Процедура СтандартныеВычетыКодВычетаНаДетейНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ВычетыНДФЛ.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.Ссылка.ВидСравнения	= ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение		= мСписокВыбораСтандартныхВычетовНаДетей;
	ФормаВыбора.Отбор.Ссылка.Использование	= Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СтандартныеВычетыКодВычетаНаДетейПриИзменении(Элемент)
	
	ЭлементыФормы.СтандартныеВычетыНаДетей.Колонки.ВычетыНаДетейПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.Значение);	
	Если ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные.КоличествоДетей = 0 Тогда
		ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные.КоличествоДетей = 1;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Авто подбор текста" поля "КодВычетаНаДетей".
//
Процедура СтандартныеВычетыКодВычетаНаДетейАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетовНаДетей), Тип("СправочникСсылка.ВычетыНДФЛ"));
	
КонецПроцедуры

// Процедура - обработчик события "Ввода текста" поля "КодВычетаНаДетей".
//
Процедура СтандартныеВычетыКодВычетаНаДетейОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетовНаДетей), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
	
КонецПроцедуры

Процедура СтандартныеВычетыНаДетейПериодЗавершенияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = КонецМесяца(Элемент.Значение)
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ СТРАНИЦЫ СТАТУСА


Процедура ПериодСтатусаНалогоплательщикаПоНДФЛПриИзменении(Элемент)
	
	ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма);
	
КонецПроцедуры

Процедура ПериодСтатусаНалогоплательщикаПоНДФЛНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	мБылаДатаСтатусНалогоплательщикаПоНДФЛ = ДатаСтатусНалогоплательщикаПоНДФЛ;
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ДатаСтатусНалогоплательщикаПоНДФЛ, ЭтаФорма);
	Если мБылаДатаСтатусНалогоплательщикаПоНДФЛ <> ДатаСтатусНалогоплательщикаПоНДФЛ Тогда
		Элемент.Значение = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(Элемент.Значение);
		ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодСтатусаНалогоплательщикаПоНДФЛОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработчикОжиданияПериодСтатусаНалогоплательщикаПоНДФЛРегулирование()
	
	ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма);
	
КонецПроцедуры

Процедура ПериодСтатусаНалогоплательщикаПоНДФЛРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДатаСтатусНалогоплательщикаПоНДФЛ = ДобавитьМесяц(ДатаСтатусНалогоплательщикаПоНДФЛ, Направление);
	ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ДатаСтатусНалогоплательщикаПоНДФЛ);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодСтатусаНалогоплательщикаПоНДФЛРегулирование", 0.1, Истина);
	
КонецПроцедуры

Процедура ПериодСтатусаНалогоплательщикаПоНДФЛАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
		
КонецПроцедуры

Процедура ПериодСтатусаНалогоплательщикаПоНДФЛОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РезидентПриИзменении(Элемент)
	ЭтаФорма.РасшифровкаНДФЛ = ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ(СтатусНалогоплательщикаПоНДФЛ);
КонецПроцедуры

Процедура НадписьИсторияНажатие(Элемент)
	
	ПараметрИсторииЗначений = Новый Структура;
	ПараметрИсторииЗначений.Вставить("ИмяКолонки", "Физлицо");
	ПараметрИсторииЗначений.Вставить("Значение", ЭтаФорма.Ссылка);
	МассивИменаНевидимыхКолонок = Новый Массив;
	МассивИменаНевидимыхКолонок.Добавить("Физлицо");
	МассивИменаКолонокАвтоОтметкаНезаполненного = Новый Массив;
	ПорядокПредставленияПериода = "НачалоМесяца";
	
	РаботаСДиалогамиЗК.ОткрытьФормуИсторииЗначений(ЭтаФорма, Элемент, "СтатусНалогоплательщикаПоНДФЛ", мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ,
										ПараметрИсторииЗначений, МассивИменаНевидимыхКолонок,
										МассивИменаКолонокАвтоОтметкаНезаполненного, ПорядокПредставленияПериода,
										"История изменения статуса налогоплательщика НДФЛ", ЭлементыФормы.ПериодСтатусаНалогоплательщикаПоНДФЛ.ТолькоПросмотр);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИсториюЗначенийСтатусНалогоплательщикаПоНДФЛ" и Источник = ЭтаФорма Тогда
		ОбработатьОповещениеОбИзмененииИсторииСтатусНалогоплательщикаПоНДФЛ(ЭтаФорма, Параметр);
	КонецЕсли; 	
	
КонецПроцедуры

Процедура КоманднаяПанельПомощникЗаписатьИЗакрыть(Кнопка)
	
	НаборЗаписейСтатус[0].Период = ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ;
	НаборЗаписейСтатус[0].Статус = ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ;
	Оповестить("ОбновитьФорму", Новый Структура("ИмяЭлемента","СтатусНалогоплательщика"), Ссылка);
	ЭтаФорма.Закрыть();	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаПодбораПоСтроке                 = Ложь;
мТекстПодбораПоСтроке                     = "";
мПоследнееЗначениеЭлементаПодбораПоСтроке = Неопределено;









