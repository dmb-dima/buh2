Перем мДлинаСуток;

Процедура ПроверитьДубли(ЗаписьПаспортныхДанных, ИНН, ПФР, ФИО) Экспорт
	
	ЕстьДублиПаспортныхДанных 	= Ложь;
	ЕстьДублиИНН 				= Ложь;
	ЕстьДублиПФР 				= Ложь;
	
	Если ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументВид) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументСерия) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументНомер) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументДатаВыдачи) ИЛИ
		 ЗначениеЗаполнено(ЗаписьПаспортныхДанных.ДокументКодПодразделения) ТОГДА
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПаспортныеДанныеФизЛиц.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц КАК ПаспортныеДанныеФизЛиц1
		               |		ПО (ПаспортныеДанныеФизЛиц.ДокументВид = &ДокументВид) И (ПаспортныеДанныеФизЛиц.ДокументСерия = &ДокументСерия) И (ПаспортныеДанныеФизЛиц.ДокументНомер = &ДокументНомер) И (ПаспортныеДанныеФизЛиц.ДокументДатаВыдачи = &ДокументДатаВыдачи) И (ПаспортныеДанныеФизЛиц.ДокументКодПодразделения = &ДокументКодПодразделения)
		               |
		               |ГДЕ
		               |	ПаспортныеДанныеФизЛиц.ФизЛицо <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", 					Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ДокументВид", 				ЗаписьПаспортныхДанных.ДокументВид);
		ЗапросПоДублям.УстановитьПараметр("ДокументСерия",	 			ЗаписьПаспортныхДанных.ДокументСерия);
		ЗапросПоДублям.УстановитьПараметр("ДокументНомер", 				ЗаписьПаспортныхДанных.ДокументНомер);
		ЗапросПоДублям.УстановитьПараметр("ДокументДатаВыдачи", 		ЗаписьПаспортныхДанных.ДокументДатаВыдачи);
		ЗапросПоДублям.УстановитьПараметр("ДокументКодПодразделения",	ЗаписьПаспортныхДанных.ДокументКодПодразделения);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такие же паспортные данные как и у "+Строка(Ссылка));
			ЕстьДублиПаспортныхДанных = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИНН) тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ФизическиеЛица.Ссылка КАК Физлицо
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица1
		               |		ПО (ФизическиеЛица.ИНН = &ИНН)
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", 				Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ИНН", 					ИНН);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же ИНН как и у "+Строка(Ссылка));
			ЕстьДублиИНН = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(Число("0"+СтрЗаменить(СтрЗаменить(ПФР, "-", ""), " ", ""))) тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ФизическиеЛица.Ссылка КАК Физлицо
		               |ИЗ
		               |	Справочник.ФизическиеЛица КАК ФизическиеЛица
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица1
		               |		ПО (ФизическиеЛица.СтраховойНомерПФР = &ПФР)
		               |ГДЕ
		               |	ФизическиеЛица.Ссылка <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка", 				Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ПФР", 					СтраховойНомерПФР);
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо: " + ВыборкаЗапроса.Физлицо +" имеет такой же страховой номер ПФР как и у "+Строка(Ссылка));
			ЕстьДублиПФР = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ФИО) И
		 НЕ ЕстьДублиИНН И
		 НЕ ЕстьДублиПаспортныхДанных И
		 НЕ ЕстьДублиПФР тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ФИОФизЛиц.ФизЛицо
		               |ИЗ
		               |	РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц КАК ФИОФизЛиц1
		               |		ПО (ФИОФизЛиц.Фамилия+ФИОФизЛиц.Имя+ФИОФизЛиц.Отчество = &ФИО)
		               |
		               |ГДЕ
		               |	ФИОФизЛиц.ФизЛицо <> &Ссылка";
		ЗапросПоДублям 	= Новый Запрос(ТекстЗапроса);
		ЗапросПоДублям.УстановитьПараметр("Ссылка",	Ссылка);
		ЗапросПоДублям.УстановитьПараметр("ФИО", 	СтрЗаменить(ФИО, " ", ""));
		РезультатЗапросаПоДублям 	= ЗапросПоДублям.Выполнить();
		ВыборкаЗапроса 				= РезультатЗапросаПоДублям.Выбрать();
		Пока ВыборкаЗапроса.Следующий() Цикл
			Сообщить("Физлицо с таким ФИО (" + ВыборкаЗапроса.Физлицо +") уже есть в справочнике");
			ЕстьДублиПаспортныхДанных = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит синхронизацию наименований сотрудников
Процедура СинхронизироватьНаименованияСотрудников(Физлицо, Сотрудник = Неопределено) Экспорт
	
	Если Сотрудник = Неопределено Тогда
		Сотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли; 

	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СотрудникиОрганизаций.Наименование,
	|	СотрудникиОрганизаций.ПостфиксНаименования,
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &парамФизлицо";	
	
	Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Сотрудник Тогда
			// не обрабатываем сотрудника, из которого вызвана синхронизация
			Продолжить;
		КонецЕсли; 
		
		СотрудникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка	
			СотрудникОбъект.Заблокировать();
		Исключение
			Продолжить;
		КонецПопытки;
		СотрудникОбъект.Наименование = Наименование + Выборка.ПостфиксНаименования;
		СотрудникОбъект.Записать();
		СотрудникОбъект.Разблокировать();
	КонецЦикла; 

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Если Клиент Тогда

// Процедура выводит на экран печатную форму 
	//
	// Параметры: 
	//  Нет
	//
	// Возвращаемое значение:
	//  Нет.
	//
Функция ПечатьДанныхПоФизлицу(ТабДокумент = Неопределено, ДатаАктуальности = Неопределено, ПечататьДокумент = Истина) Экспорт

	СтруктураДанных = Новый Структура; 
	СтруктураДанныхОрганизации = Новый Структура; 

	Подробно = Истина;

	Запрос = Новый Запрос;

	// Установим параметры запроса.
	Запрос.УстановитьПараметр("ФизЛицо" ,	Ссылка);
	Если ДатаАктуальности = Неопределено Тогда
		Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(ОбщегоНазначения.ПолучитьРабочуюДату()));
	Иначе
		Запрос.УстановитьПараметр("ДатаАктуальности" ,	КонецДня(ДатаАктуальности));
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустаяСтрока" ,"");
	Запрос.УстановитьПараметр("ПустаяДата", Дата('00010101'));
	Запрос.УстановитьПараметр("Проведен" ,Истина);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФизическиеЛица.Наименование,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.МестоРождения,
	|	ФизическиеЛица.ИНН,
	|	ФизическиеЛица.Код,
	|	ФизическиеЛица.КодИМНС,
	|	ФизическиеЛица.Пол,
	|	ФизическиеЛица.СтраховойНомерПФР,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументВид.Представление КАК ДокументВид,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументДатаВыдачи,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКемВыдан,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументКодПодразделения,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументНомер,
	|	ПаспортныеДанныеФизЛицСрезПоследних.ДокументСерия,
	|	РаботникиСрезПоследних.ТабельныйНомер КАК ТабельныйНомер,
	|	ПРЕДСТАВЛЕНИЕ(РаботникиСрезПоследних.Должность) КАК Должность,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = ФизическиеЛица.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПаспортныеДанныеФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПаспортныеДанныеФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ПаспортныеДанныеФизЛицСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК Должность,
	|			МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Сотрудник.Код) КАК ТабельныйНомер
	|		ИЗ
	|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо) КАК РаботникиСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = РаботникиСрезПоследних.Физлицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицо";

	Результат = Запрос.Выполнить(); 
	ВыборкаДляПроверок = Результат.Выбрать();
	ВыборкаДляПроверок.Следующий();
	СтруктураДанных.Вставить("ФизическиеЛица", Результат.Выбрать());
	Если ВыборкаДляПроверок.ДокументВид <> Null Тогда
		СтруктураДанных.Вставить("ПаспортныеДанныеФизЛиц", Результат.Выбрать());
	КонецЕсли;

	// контактная информация
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	ВЫБОР КОГДА КонтактнаяИнформация.Вид ССЫЛКА Справочник.ВидыКонтактнойИнформации ТОГДА
	|		КонтактнаяИнформация.Вид.Представление
	|	ИНАЧЕ
	|		КонтактнаяИнформация.Вид
	|	КОНЕЦ КАК ВидКИ,
	|	КонтактнаяИнформация.Представление КАК ПредставлениеКИ
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &ФизЛицо
	|УПОРЯДОЧИТЬ ПО
	|	Тип
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	СтруктураДанных.Вставить("КонтактнаяИнформация", Запрос.Выполнить().Выбрать());
	
	// запрос по организациям
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ТабельныйНомер,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Организация) КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Подразделение) КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(ВложенныйЗапрос.Должность) КАК Должность,
	|	ВложенныйЗапрос.ЗанимаемыхСтавок,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.ПричинаИзмененияСостояния = &Уволен
	|			ТОГДА ""Не работает (уволен)""
	|		ИНАЧЕ ""Работает""
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Сотрудник.Код) КАК ТабельныйНомер,
	|		РаботникиОрганизацийСрезПоследних.Организация КАК Организация,
	|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации) КАК Подразделение,
	|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.Должность) КАК Должность,
	|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.ЗанимаемыхСтавок) КАК ЗанимаемыхСтавок,
	|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|		МАКСИМУМ(РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния) КАК ПричинаИзмененияСостояния
	|	ИЗ
	|		РегистрСведений.РаботникиОрганизаций.СрезПоследних(, Сотрудник.Физлицо = &Физлицо) КАК РаботникиОрганизацийСрезПоследних
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РаботникиОрганизацийСрезПоследних.Сотрудник.Физлицо,
	|		РаботникиОрганизацийСрезПоследних.Организация) КАК ВложенныйЗапрос";
		
	Запрос.УстановитьПараметр("Уволен",Перечисления.ПричиныИзмененияСостояния.Увольнение);
	РезультатПоОрганизациям = Запрос.Выполнить(); 
	
	Если Не РезультатПоОрганизациям.Пустой() Тогда
		
		СтруктураДанных.Вставить("Организация", РезультатПоОрганизациям.Выбрать());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПриемНаРаботуВОрганизациюРаботники.Ссылка КАК Документ,
		|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Представление,
		|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Владелец КАК Организация,
		|	ПриемНаРаботуВОрганизациюРаботники.Ссылка.Дата КАК Дата,
		|	ПриемНаРаботуВОрганизациюРаботники.ДатаПриема КАК ДатаС,
		|	&ПустаяДата КАК ДатаПо,
		|	ПриемНаРаботуВОрганизациюРаботники.ПодразделениеОрганизации.Представление КАК Подразделение,
		|	ПриемНаРаботуВОрганизациюРаботники.Должность.Представление КАК Должность
		|ИЗ
		|	Документ.ПриемНаРаботуВОрганизацию.РаботникиОрганизации КАК ПриемНаРаботуВОрганизациюРаботники
		|ГДЕ
		|	ПриемНаРаботуВОрганизациюРаботники.Сотрудник.ФизЛицо = &ФизЛицо
		|	И ПриемНаРаботуВОрганизациюРаботники.Ссылка.Проведен = &Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КадровоеПеремещениеОрганизацииРаботники.Ссылка,
		|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Представление,
		|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Владелец,
		|	КадровоеПеремещениеОрганизацииРаботники.Ссылка.Дата,
		|	КадровоеПеремещениеОрганизацииРаботники.ДатаНачала,
		|	&ПустаяДата,
		|	КадровоеПеремещениеОрганизацииРаботники.ПодразделениеОрганизации.Представление,
		|	КадровоеПеремещениеОрганизацииРаботники.Должность.Представление
		|ИЗ
		|	Документ.КадровоеПеремещениеОрганизаций.РаботникиОрганизации КАК КадровоеПеремещениеОрганизацииРаботники
		|ГДЕ
		|	КадровоеПеремещениеОрганизацииРаботники.Сотрудник.ФизЛицо = &ФизЛицо
		|	И КадровоеПеремещениеОрганизацииРаботники.Ссылка.Проведен = &Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	УвольнениеИзОрганизацииРаботники.Ссылка,
		|	УвольнениеИзОрганизацииРаботники.Ссылка.Представление,
		|	УвольнениеИзОрганизацииРаботники.Ссылка.Организация,
		|	УвольнениеИзОрганизацииРаботники.Ссылка.Дата,
		|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
		|	NULL,
		|	NULL,
		|	NULL
		|ИЗ
		|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
		|ГДЕ
		|	УвольнениеИзОрганизацииРаботники.Сотрудник.Физлицо = &ФизЛицо
		|	И УвольнениеИзОрганизацииРаботники.Ссылка.Проведен = &Проведен
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ ПО
		|	Организация";
		
		СтруктураДанныхОрганизации.Вставить("ПеремещенияВОрганизации", Запрос.Выполнить());
		
	КонецЕсли;
	
	ВыводитьНаПечать = Ложь;
	Если ТабДокумент = Неопределено Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ВыводитьНаПечать = Истина;
	КонецЕсли;
	
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ФизическиеЛица_ДанныеПоФизлицу";
	Макет = ПолучитьМакет("ДанныеПоФизлицу");

	Для Каждого СекцияДанных Из СтруктураДанных Цикл

		ИмяСекции = СекцияДанных.Ключ;
		УсловиеВыводаРаскрытойГруппы = ИмяСекции = "ФизическиеЛица";
		Выборка = СекцияДанных.Значение;
		Если ИмяСекции = "КонтактнаяИнформация" и НЕ Выборка.Количество() = 0 Тогда

			СекцияЗаголовка = Макет.ПолучитьОбласть("КонтактнаяИнформация_Заголовок");
			ТабДокумент.Вывести(СекцияЗаголовка);
			ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			ТабДокумент.НачатьГруппуСтрок("",Ложь);
			Отбивка = Макет.ПолучитьОбласть("Отбивка");
			
			СекцияТипаКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Тип");
			Пока Выборка.СледующийПоЗначениюПоля("Тип") цикл

				ТабДокумент.Вывести(Отбивка);
				СекцияТипаКИ.Параметры.ТипКИ = Строка(Выборка.Тип) + ":";
				ТабДокумент.Вывести(СекцияТипаКИ);

				СекцияКИ = Макет.ПолучитьОбласть("КонтактнаяИнформация_Данные");
				Пока Выборка.СледующийПоЗначениюПоля("ВидКИ") цикл
					СекцияКИ.Параметры.Заполнить(Выборка);
					ТабДокумент.Вывести(СекцияКИ);
				КонецЦикла;

			КонецЦикла; 

			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();
			
		ИначеЕсли ИмяСекции = "Организация"  Тогда

			Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл

				Отбивка = Макет.ПолучитьОбласть("Отбивка");
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Вывести(Отбивка);

				Для Каждого СекцияДанныхОрганизации Из СтруктураДанныхОрганизации Цикл
					ИмяСекцииОрганизации = СекцияДанныхОрганизации.Ключ;

					Если ИмяСекцииОрганизации = "Отклонения" Тогда

						ВыборкаОрганизации = СекцияДанныхОрганизации.Значение;
						Пока ВыборкаОрганизации.СледующийПоЗначениюПоля("ВидОтсутствия") Цикл
							ИмяСекцииОрганизации = СокрЛП(ВыборкаОрганизации.ВидОтсутствия);
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							Если Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", Не Подробно);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
								Пока ВыборкаОрганизации.Следующий() Цикл
									ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
									ТабДокумент.Вывести(ОбластьМакета);
								КонецЦикла;
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.ЗакончитьГруппуСтрок();
							КонецЕсли;
						КонецЦикла;
						
					ИначеЕсли Макет.Области.Найти(ИмяСекцииОрганизации + "_Заголовок") <> Неопределено Тогда

                        // Спозиционируемся в выборке "ПеремещенияВОрганизации" на нужной организации
						ВыборкаПеремещенийПоВсемОрганизациям = СекцияДанныхОрганизации.Значение.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						ВыборкаПеремещенийПоВсемОрганизациям.Сбросить();
						СтруктураПоиска = Новый Структура("Организация");
						СтруктураПоиска.Организация = Выборка.ОрганизацияСсылка;
						Если ВыборкаПеремещенийПоВсемОрганизациям.НайтиСледующий(СтруктураПоиска) Тогда

							// Выберем кадровые перемещения в рамках организации
							ВыборкаОрганизации = ВыборкаПеремещенийПоВсемОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Отбивка = ?(Макет.Области.Найти(ИмяСекцииОрганизации + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок");
							Если ОбластьМакета.Области.Количество() = 1 Тогда
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
							Иначе
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_ПерваяСтрока");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
								ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
								ТабДокумент.Вывести(Отбивка);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
								ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Заголовок_Остальное");
								ТабДокумент.Вывести(ОбластьМакета);
								ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
							КонецЕсли;
							ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекцииОрганизации + "_Данные");
							Пока ВыборкаОрганизации.Следующий() Цикл
								ОбластьМакета.Параметры.Заполнить(ВыборкаОрганизации);
								ТабДокумент.Вывести(ОбластьМакета);
							КонецЦикла;
							ТабДокумент.Вывести(Отбивка);
							ТабДокумент.ЗакончитьГруппуСтрок();
						
						КонецЕсли; 

					КонецЕсли;
					
				КонецЦикла;
				
				ТабДокумент.ЗакончитьГруппуСтрок();

			КонецЦикла;

		ИначеЕсли Макет.Области.Найти(ИмяСекции + "_Заголовок") <> Неопределено и Выборка.Следующий() Тогда

			Отбивка = ?(Макет.Области.Найти(ИмяСекции + "_Отбивка") <> Неопределено,Макет.ПолучитьОбласть(ИмяСекции + "_Отбивка"),Макет.ПолучитьОбласть("Отбивка"));
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок");
			Если ОбластьМакета.Области.Количество() = 1 Тогда
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_ПерваяСтрока");
				ТабДокумент.Вывести(ОбластьМакета);
				ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,).ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
				ТабДокумент.НачатьГруппуСтрок("", УсловиеВыводаРаскрытойГруппы);
				ТабДокумент.Вывести(Отбивка);
				ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Заголовок_Остальное");
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				Иначе	
					ОбластьМакета.Параметры.Заполнить(Выборка);
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
				Если ОбластьМакета.Параметры.Количество() = 0 Тогда // раскрашиваем заголовок без выведенных данных
					ТабДокумент.Область(ТабДокумент.ВысотаТаблицы - ОбластьМакета.ВысотаТаблицы + 1, 2, ТабДокумент.ВысотаТаблицы, 10).ЦветФона = ЦветаСтиля.ФонГруппировкиПромежуточногоУровня;
				КонецЕсли;
			КонецЕсли;
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяСекции + "_Данные");
			ОбластьМакета.Параметры.Заполнить(Выборка);
			Если ИмяСекции = "ФизическиеЛица" и НЕ ЗначениеЗаполнено(Выборка.Фамилия) Тогда
				Фамилия = " "; Имя = " "; Отчество = " ";
				ОбщегоНазначения.ФамилияИнициалыФизЛица(ЭтотОбъект, Фамилия, Имя, Отчество);
				ОбластьМакета.Параметры.Фамилия = Фамилия;
				ОбластьМакета.Параметры.Имя = Имя;
				ОбластьМакета.Параметры.Отчество = Отчество;
			КонецЕсли;
			ТабДокумент.Вывести(ОбластьМакета);
			Пока Выборка.Следующий() Цикл
				ОбластьМакета.Параметры.Заполнить(Выборка);
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ТабДокумент.Вывести(Отбивка);
			ТабДокумент.ЗакончитьГруппуСтрок();

		КонецЕсли;	
	КонецЦикла;

	Если ПечататьДокумент Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент,,, "Данные по: " + Наименование);
	КонецЕсли;
	
	Возврат ТабДокумент;

КонецФункции // Печать

// Процедура осуществляет печать справочника. Можно направить печать на 
// экран или принтер, а также распечатать необходимое количество копий.
//
//  Название макета печати передается в качестве параметра,
// по переданному названию находим имя макета в соответствии.
// Параметры:
//  НазваниеМакета - строка, название макета.
// Возвращаемое значение:
//  Нет.
//
Процедура Печать(ИмяМакета = "", КоличествоЭкземпляров = 1, НаПринтер = Ложь, НепосредственнаяПечать = Ложь, ФормаЭлемента = Неопределено) Экспорт
	
	// Получить экземпляр документа на печать
	Если ТипЗнч(ИмяМакета) = Тип("ТабличныйДокумент") Тогда
		ДатаАктуальности = ?(ТипЗнч(КоличествоЭкземпляров) = Тип("Дата"), КоличествоЭкземпляров, Неопределено);
		ТабДокумент = ПечатьДанныхПоФизлицу(ИмяМакета, ДатаАктуальности);
		
	ИначеЕсли ИмяМакета = "ДанныеПоФизлицу" ИЛИ ИмяМакета = "" Тогда
		ТабДокумент = ПечатьДанныхПоФизлицу();
		
	Иначе
		Сообщить("Ошибка получения дополнительной печатной формы объекта. Возможно форма была удалена", СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Данные по: " + Наименование, НепосредственнаяПечать);

КонецПроцедуры // Печать()

#КонецЕсли

// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//  
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	
	Возврат Новый Структура("ДанныеПоФизлицу","Данные по физ.лицу");

КонецФункции // ПолучитьТаблицуПечатныхФорм()



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400;

