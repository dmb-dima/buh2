////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;
Перем мСписокВыбораСтандартныхВычетов;
Перем мСписокВыбораСтандартныхВычетовНаДетей;
Перем мСписокОрганизацийПоРаботнику;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ
// 

// Функция записывает доходы физ лица с предыдущего места работы в подготовленную
// таблицу значений. 
//
// Параметры
//  ПустаяТаблица  – ТаблицаЗначений – таблица из 12 строк, по месяцам
//  ТаблицаДоходов  – ТаблицаЗначений – таблица доходов с предыдущего места физ лица.
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   ТаблицаЗначений   – готовая таблица, с доходами с предыдущего места работы.
//
Функция ДополнитьТаблицуДоходов(ПустаяТаблица, ТаблицаДоходов)
	
	Для каждого СтрокаТЗ Из ТаблицаДоходов Цикл 
		
		НайденнаяСтрока = ПустаяТаблица.Найти(СтрокаТЗ.МесяцНалоговогоПериода);
		НайденнаяСтрока.Размер = СтрокаТЗ.Размер;
		
	КонецЦикла; 
	
	Возврат ПустаяТаблица;
	
КонецФункции // ДополнитьТаблицуДоходов()

// Функция собирает данные м предыдущего места работы.
//
// Параметры
//
// Возвращаемое значение:
//   РезультатЗапроса   – результат запроса по регистру НДФЛДоходыПредыдущегоМестаРаботы.
//
Функция СформироватьПредыдущиеДанные()
	
	ЗапросПредыдущиеДанные = Новый Запрос;
	ЗапросПредыдущиеДанные.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если мНаборЗаписейДоходыПредыдущегоМестаРаботы.Количество() = 0 Тогда
		
		ЗапросПредыдущиеДанные.УстановитьПараметр("ФизЛицо", Ссылка);
		ЗапросПредыдущиеДанные.УстановитьПараметр("Организация", Организация);
		ЗапросПредыдущиеДанные.УстановитьПараметр("Год", Год);
		НачалоГода = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "0101");
		ЗапросПредыдущиеДанные.УстановитьПараметр("МесяцНалоговогоПериодаНачало", НачалоГода);
		ОкончаниеГода = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "1231");
		ЗапросПредыдущиеДанные.УстановитьПараметр("МесяцНалоговогоПериодаОкончание", ОкончаниеГода);
		
		ЗапросПредыдущиеДанные.Текст = 
		"ВЫБРАТЬ
		|	НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НДФЛДоходыПредыдущегоМестаРаботы.Размер
		|ПОМЕСТИТЬ ВТДоходыНарастающимИтогом
		|ИЗ
		|	РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК НДФЛДоходыПредыдущегоМестаРаботы
		|ГДЕ
		|	НДФЛДоходыПредыдущегоМестаРаботы.ФизЛицо = &ФизЛицо
		|	И НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода МЕЖДУ &МесяцНалоговогоПериодаНачало И &МесяцНалоговогоПериодаОкончание
		|	И НДФЛДоходыПредыдущегоМестаРаботы.Организация = &Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода";
		
	Иначе
		
		ЗапросПредыдущиеДанные.УстановитьПараметр("НаборЗаписей", мНаборЗаписейДоходыПредыдущегоМестаРаботы.Выгрузить());
		ЗапросПредыдущиеДанные.Текст = 
		"ВЫБРАТЬ
		|	НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
		|	НДФЛДоходыПредыдущегоМестаРаботы.Размер
		|ПОМЕСТИТЬ ВТДоходыНарастающимИтогом
		|ИЗ
		|	&НаборЗаписей КАК НДФЛДоходыПредыдущегоМестаРаботы
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцНалоговогоПериода";
		
	КонецЕсли;
	
	ЗапросПредыдущиеДанные.Выполнить();
	ЗапросПредыдущиеДанные.Текст = 
	"ВЫБРАТЬ
	|	НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода,
	|	НДФЛДоходыПредыдущегоМестаРаботы.Размер - ЕСТЬNULL(НДФЛДоходыПредыдущегоМесяца.Размер, 0) КАК Размер
	|ИЗ
	|	ВТДоходыНарастающимИтогом КАК НДФЛДоходыПредыдущегоМестаРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыНарастающимИтогом КАК НДФЛДоходыПредыдущегоМесяца
	|		ПО (НДФЛДоходыПредыдущегоМестаРаботы.МесяцНалоговогоПериода = ДОБАВИТЬКДАТЕ(НДФЛДоходыПредыдущегоМесяца.МесяцНалоговогоПериода, МЕСЯЦ, 1))";
	
	Возврат ЗапросПредыдущиеДанные.Выполнить().Выгрузить();
	
КонецФункции // СформироватьПредыдущиеДанные()


// Функция формирует таблицу значений для записи доходов с предыдущего места работы.
//
// Параметры
//
// Возвращаемое значение:
//     ТаблицаЗначений – таблица для записи доходов.
//
Функция СформироватьПустуюТаблицуДоходов()

    ТаблицаДоходов = ДоходыПредыдущие.СкопироватьКолонки();
	
	ЗаписываемаяДата = Дата("" + Прав("0000" + Формат(Год , "ЧГ=0"), 4) + "0101");
	Для Сч = 1 По 12 Цикл
	   ТаблицаДоходов.Добавить().МесяцНалоговогоПериода = ЗаписываемаяДата;
	   ЗаписываемаяДата = ДобавитьМесяц(ЗаписываемаяДата,1)
	КонецЦикла; 
	
    Возврат ТаблицаДоходов
	
КонецФункции // СформироватьПустуюТаблицуДоходов()


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Для каждого ЗаписьНабора Из мНаборЗаписейЛичныеВычеты Цикл
		ЗаполнитьЗначенияСвойств(СтандартныеВычеты.Добавить(), ЗаписьНабора);
	КонецЦикла;	
	
	Для каждого ЗаписьНабора Из мНаборЗаписейВычетыНаДетей Цикл
		ЗаполнитьЗначенияСвойств(СтандартныеВычетыНаДетей.Добавить(), ЗаписьНабора);
	КонецЦикла;	
	
КонецПроцедуры


// Процедура - обработчик события "При открытии" формы отчета.
//
Процедура ПриОткрытии()
	
	ЭлементыФормы.Год.Значение = Год(РабочаяДата);
	
	ДоходыПредыдущие = ДополнитьТаблицуДоходов(СформироватьПустуюТаблицуДоходов(), СформироватьПредыдущиеДанные());
	СпрСтандартныеВычеты = Справочники.ВычетыНДФЛ;
	
	// подготовим списки вычетов для указания в т.п. стандартных вычетов
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.Код,
	|	ВычетыНДФЛ.Наименование
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	ВычетыНДФЛ.ГруппаВычета = &ГруппаВычета");

	Запрос.УстановитьПараметр("ГруппаВычета", Перечисления.ГруппыВычетовПоНДФЛ.Стандартные);
	Выборка = Запрос.Выполнить().Выбрать();		
	
	мСписокВыбораСтандартныхВычетов = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		мСписокВыбораСтандартныхВычетов.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Код) + " (" + СокрЛП(Выборка.Наименование) + ")");
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ГруппаВычета", Перечисления.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей);
	Выборка = Запрос.Выполнить().Выбрать();		
	
	мСписокВыбораСтандартныхВычетовНаДетей = Новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка = СпрСтандартныеВычеты.Код101 Тогда
			НаименованиеВычета = "на каждого ребенка в возрасте до 18 лет"
		ИначеЕсли Выборка.Ссылка = СпрСтандартныеВычеты.Код102 Тогда
			НаименованиеВычета = "удвоенный, на каждого ребенка в возрасте до 18 лет"
		ИначеЕсли Выборка.Ссылка = СпрСтандартныеВычеты.Код106 Тогда
			НаименованиеВычета = "на каждого ребенка-инвалида в возрасте до 18 лет"
		ИначеЕсли Выборка.Ссылка = СпрСтандартныеВычеты.Код107 Тогда
			НаименованиеВычета = "удвоенный, на каждого ребенка-инвалида в возрасте до 18 лет"
		КонецЕсли;
		
		мСписокВыбораСтандартныхВычетовНаДетей.Добавить(Выборка.Ссылка, "(" + Выборка.Код + ") " + НаименованиеВычета);	
	КонецЦикла;
	
КонецПроцедуры


Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	// проверим регистрацию применения стандартных вычетов по организации
	// сообщим пользователю если текущий момент
	// - зарегистрированы вычеты и не зарегистрировано применение вычетов
	// - зарегистрировано применение вычетов и не зарегистрированы вычеты
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("парамФизлицо", Ссылка);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ПрименениеВычетовСрезПоследних.Организация ЕСТЬ NULL 
	|			ТОГДА ""НетОрганизации""
	|		ИНАЧЕ ""ЕстьОрганизация""
	|	КОНЕЦ КАК ОписаниеПроблемы
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыФизлиц.СрезПоследних(, Физлицо = &парамФизлицо) КАК СтандартныеВычетыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(, Физлицо = &парамФизлицо) КАК ПрименениеВычетовСрезПоследних
	|		ПО НЕ (ПрименениеВычетовСрезПоследних.Организация ЕСТЬ NULL)
	|ГДЕ
	|	СтандартныеВычетыСрезПоследних.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА СтандартныеВычетыСрезПоследних.Физлицо ЕСТЬ NULL 
	|			ТОГДА ""НетВычетов""
	|		ИНАЧЕ ""ЕстьВычеты""
	|	КОНЕЦ
	|ИЗ
	|	РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(, Физлицо = &парамФизлицо) КАК ПрименениеВычетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц.СрезПоследних(, Физлицо = &парамФизлицо) КАК СтандартныеВычетыСрезПоследних
	|		ПО СтандартныеВычетыСрезПоследних.КодВычетаЛичный <> ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|ГДЕ
	|	ПрименениеВычетовСрезПоследних.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Если РезультатЗапроса.Количество() = 1 Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты;
		
		РезультатЗапроса.Следующий();
		Если Найти(РезультатЗапроса.ОписаниеПроблемы, "НетОрганизации") Тогда
			ТекущийЭлемент = ЭлементыФормы.ПрименениеВычетов;
			СтрокаСообщения = "не задана организация в которой при исчислении НДФЛ" + Символы.ПС
			+ "будут применяться вычеты и дата с которой они будут применяться. ";
		ИначеЕсли Найти(РезультатЗапроса.ОписаниеПроблемы, "НетВычетов") Тогда
			ТекущийЭлемент = ЭлементыФормы.СтандартныеВычеты;
			СтрокаСообщения = "не зарегистрировано право на стандартные вычеты. ";
		Иначе
			Возврат;
		КонецЕсли;
		
		ТекстВопроса = "Не все данные заполнены - " + СтрокаСообщения + "Закрыть форму?";
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ 



////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ СтандартныеВычеты

Процедура СтандартныеВычетыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103;	
	КонецЕсли;
	
	Элемент.Колонки.ВычетыЛичныеПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.ТекущиеДанные.КодВычетаЛичный);
	
КонецПроцедуры

Процедура СтандартныеВычетыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ВычетыЛичныеТекст.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ВычетыЛичныеПрименение.Значение = ЗначениеЗаполнено(ДанныеСтроки.КодВычетаЛичный);
	
КонецПроцедуры

Процедура СтандартныеВычетыВычетыЛичныеПрименениеПриИзменении(Элемент)
    Если Не Элемент.Значение  Тогда
        ЭлементыФормы.СтандартныеВычеты.ТекущиеДанные.КодВычетаЛичный = Справочники.ВычетыНДФЛ.ПустаяСсылка();
    Иначе
        ЭлементыФормы.СтандартныеВычеты.ТекущиеДанные.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103;
    КонецЕсли;
КонецПроцедуры

Процедура СтандартныеВычетыКодВычетаЛичныйПриИзменении(Элемент)
	
	ЭлементыФормы.СтандартныеВычеты.Колонки.ВычетыЛичныеПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля "КодВычетаЛичный".
//
Процедура СтандартныеВычетыКодВычетаЛичныйНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораСтандартныхВычетов,Элемент,мСписокВыбораСтандартныхВычетов.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "Авто подбор текста" поля "КодВычетаЛичный".
//
Процедура СтандартныеВычетыКодВычетаЛичныйАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетов), Тип("СправочникСсылка.ВычетыНДФЛ"));

КонецПроцедуры

// Процедура - обработчик события "Окончание ввода текста" поля "КодВычетаЛичный".
//
Процедура СтандартныеВычетыКодВычетаЛичныйОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетов), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ СтандартныеВычетыНаДетей

Процедура СтандартныеВычетыНаДетейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.КодВычета = Справочники.ВычетыНДФЛ.Код101;	
        ТекущиеДанные.КоличествоДетей = 1;
	КонецЕсли;
	
	Элемент.Колонки.ВычетыНаДетейПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(ТекущиеДанные.КоличествоДетей);
	
КонецПроцедуры

Процедура СтандартныеВычетыНаДетейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ВычетыНаДетейТекст.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ВычетыНаДетейПрименение.Значение = ЗначениеЗаполнено(ДанныеСтроки.КоличествоДетей);
	
КонецПроцедуры

Процедура СтандартныеВычетыВычетыНаДетейПрименениеПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные;
	Если Не Элемент.Значение Тогда
        ТекущиеДанные.КоличествоДетей = 0;
    ИначеЕсли ТекущиеДанные.КодВычета = Справочники.ВычетыНДФЛ.ПустаяСсылка() Тогда
        ТекущиеДанные.КодВычета = Справочники.ВычетыНДФЛ.Код101;
        ТекущиеДанные.КоличествоДетей = 1;
	Иначе 	
        ТекущиеДанные.КоличествоДетей = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля "КодВычетаНаДетей".
//
Процедура СтандартныеВычетыКодВычетаНаДетейНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораСтандартныхВычетовНаДетей,Элемент,мСписокВыбораСтандартныхВычетовНаДетей.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		Если ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные.КоличествоДетей = 0 Тогда
			ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные.КоличествоДетей = 1;	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СтандартныеВычетыКодВычетаНаДетейПриИзменении(Элемент)
	
	ЭлементыФормы.СтандартныеВычетыНаДетей.Колонки.ВычетыНаДетейПрименение.ЭлементУправления.Значение = ЗначениеЗаполнено(Элемент.Значение);	
	Если ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные.КоличествоДетей = 0 Тогда
		ЭлементыФормы.СтандартныеВычетыНаДетей.ТекущиеДанные.КоличествоДетей = 1;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Авто подбор текста" поля "КодВычетаНаДетей".
//
Процедура СтандартныеВычетыКодВычетаНаДетейАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетовНаДетей), Тип("СправочникСсылка.ВычетыНДФЛ"));
	
КонецПроцедуры

// Процедура - обработчик события "Ввода текста" поля "КодВычетаНаДетей".
//
Процедура СтандартныеВычетыКодВычетаНаДетейОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораСтандартныхВычетовНаДетей), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
	
КонецПроцедуры

Процедура СтандартныеВычетыНаДетейПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ОформлениеСтроки.Ячейки.КолонкаПериод.Видимость = Ложь;	
	
	КонецЦикла;
	
КонецПроцедуры

Процедура СтандартныеВычетыНаДетейПериодЗавершенияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = КонецМесяца(Элемент.Значение)
	КонецЕсли;
КонецПроцедуры




Процедура ОсновныеДействияФормыДействиеЗаписатьИЗакрыть(Кнопка)
	
	мНаборЗаписейЛичныеВычеты.Очистить();
	Для каждого СтрокаТаблицы Из СтандартныеВычеты Цикл
		ЗаписьНабора = мНаборЗаписейЛичныеВычеты.Добавить();
		ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
		ЗаписьНабора.Период  = СтрокаТаблицы.Период;
		ЗаписьНабора.КодВычетаЛичный = СтрокаТаблицы.КодВычетаЛичный;
	КонецЦикла;
	
	мНаборЗаписейВычетыНаДетей.Очистить();
	Для каждого СтрокаТаблицы Из СтандартныеВычетыНаДетей Цикл
		ЗаписьНабора = мНаборЗаписейВычетыНаДетей.Добавить();
		ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
		ЗаписьНабора.Период  = СтрокаТаблицы.Период;
		ЗаписьНабора.ПериодЗавершения  = СтрокаТаблицы.ПериодЗавершения;
		ЗаписьНабора.КодВычета = СтрокаТаблицы.КодВычета;
		ЗаписьНабора.КоличествоДетей = СтрокаТаблицы.КоличествоДетей;
		ЗаписьНабора.КоличествоДетейЗавершения = 0;
	КонецЦикла;
	
	Закрыть();
	Параметры = Новый Массив;
	Параметры.Добавить(ПредоставлятьВычеты);
	Параметры.Добавить(ДатаПредоставленияВычетов);
	РазмерНарастающимИтогом = 0;
	Для каждого СтрокаТЗ Из ДоходыПредыдущие Цикл
		РазмерНарастающимИтогом = РазмерНарастающимИтогом + СтрокаТЗ.Размер;
		СтрокаТЗ.Размер = РазмерНарастающимИтогом;
	КонецЦикла;
	Параметры.Добавить(ДоходыПредыдущие);
	
	Оповестить("ОбновитьСтандартныеВычеты", Параметры, ВладелецФормы);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаТайпинга                 = Ложь;
мТекстТайпинга                     = "";
мПоследнееЗначениеЭлементаТайпинга = Неопределено;









