////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мТекущаяСтраница;

Перем мОбработкаТайпингаОрганизация;
Перем мТекстТайпингаОрганизация;
Перем мПоследнееЗначениеЭлементаТайпингаОрганизация;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

Перем мМассивЭУ;

Перем мСведенияОВидахРасчетаОснНачислений;

Перем мСписокОбособленныхПодразделений;

Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;
Перем мНаборЗаписейЛичныйВычет Экспорт;
Перем мНаборЗаписейВычетыНаДетей Экспорт;
Перем мНаборЗаписейДоходыПредыдущегоМестаРаботы Экспорт;
Перем мНаборЗаписейСевернаяНадбавка Экспорт;
Перем мНаборЗаписейСтатус Экспорт;

Перем мДатаПредоставленияВычетов Экспорт;
Перем мПредоставлятьВычеты Экспорт;

Перем мНеСоздаватьДокумент;
Перем мЭтоТрудовойДоговор;

// картинки для ЭУ страницы Готово
Перем мКартинкаФизлицо;
Перем мКартинкаСотрудник;
Перем мКартинкаПриказ;

Перем ОбработкаКомментариев;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьНаборыПоФизлицу(Физлицо)

	мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
	мНаборЗаписейСевернаяНадбавка = РегистрыСведений.ПроцентСевернойНадбавкиФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейСтатус = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();

	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроцентСевернойНадбавкиФизЛицСрезПоследних.Период,
	|	ПроцентСевернойНадбавкиФизЛицСрезПоследних.ФизЛицо,
	|	ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка
	|ИЗ
	|	РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ПроцентСевернойНадбавкиФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейСевернаяНадбавка.Добавить(), Выборка);
	КонецЕсли;

	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Период,
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаМедицинскоеСтрахование
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Период,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СерияСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.НомерСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ДатаВыдачи,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ГруппаИнвалидности,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СрокДействияСправки
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОбИнвалидностиФизлицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейИнвалидность.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыФизлиц.Период,
	|	НДФЛСтандартныеВычетыФизлиц.Физлицо,
	|	НДФЛСтандартныеВычетыФизлиц.КодВычетаЛичный
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК НДФЛСтандартныеВычетыФизлиц
	|ГДЕ
	|	НДФЛСтандартныеВычетыФизлиц.Физлицо = &ФизЛицо";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейЛичныйВычет.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛСтандартныеВычетыНаДетей.Период,
	|	НДФЛСтандартныеВычетыНаДетей.Физлицо,
	|	НДФЛСтандартныеВычетыНаДетей.КодВычета,
	|	НДФЛСтандартныеВычетыНаДетей.КоличествоДетей,
	|	НДФЛСтандартныеВычетыНаДетей.ПериодЗавершения,
	|	НДФЛСтандартныеВычетыНаДетей.КоличествоДетейЗавершения
	|ИЗ
	|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК НДФЛСтандартныеВычетыНаДетей
	|ГДЕ
	|	НДФЛСтандартныеВычетыНаДетей.Физлицо = &ФизЛицо";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейВычетыНаДетей.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.Период,
	|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.ФизЛицо,
	|	СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних.Статус
	|ИЗ
	|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних КАК СтатусФизЛицКакНалогоплательщиковНДФЛСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейСтатус.Добавить(), Выборка);
	КонецЕсли;
	
	ОбновитьПредставлениеЭлементов();
	
КонецПроцедуры

Процедура ПроверитьИННПоказатьОшибку()

//	ЭлементыФормы.ПолеКартинкиОшибкаИНН.Видимость = Не РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ФизлицоОбъект.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);

КонецПроцедуры

Процедура ПроверитьСтраховойНомерПоказатьОшибку()

//	ЭлементыФормы.ПолеКартинкиОшибкаСтраховойНомер.Видимость = НЕ РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ФизлицоОбъект.СтраховойНомерПФР);

КонецПроцедуры

// Функция формирует Наименование физлица из ФИО
Функция ПолучитьНаименованиеФизлица()

	Возврат Фамилия + " " + Имя + " " + Отчество;

КонецФункции // ПолучитьНаименованиеФизлица()

// в процедуре проверяются дубли физлиц
Процедура ПроверитьФизлицо()

	Если ФизлицоОбработано Тогда
		// не ищем дубли физлиц, физлицо уже обработано
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизлиц = ПолучитьСписокФизлиц();
	Если СписокФизлиц.Количество() = 0 Тогда
		// дубли физлиц не обнаружены
		Возврат;
	КонецЕсли;
	
	ФормаФЛ = Справочники.СотрудникиОрганизаций.ПолучитьФорму("ФормаВыбораФизлица", ЭтаФорма);
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.Использование = Истина;
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.Значение 		= СписокФизлиц;
	ФормаФЛ.ОткрытьМодально();
	
	ЭлементыФормы.ПанельПостфиксаНаименования.Видимость = Истина;

КонецПроцедуры

// Получает список Физлиц - дублей
//
// Возвращаемое значение:
//   СписокЗначений   - список физлиц - дублей
//
Функция ПолучитьСписокФизлиц()

	НаименованиеФизлица = ПолучитьНаименованиеФизлица();
	
	НетДатыРождения = Не ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения);
	НетИНН = Не (ЗначениеЗаполнено(ФизлицоОбъект.ИНН) или РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ФизлицоОбъект.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо));
	НетСтраховогоНомераПФР = Не (ЗначениеЗаполнено(ФизлицоОбъект.СтраховойНомерПФР) или РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(ФизлицоОбъект.СтраховойНомерПФР));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(НЕ ФизическиеЛица.ЭтоГруппа)
	|	И (&парамНетДатыРождения
	|			ИЛИ &парамДатаРождения = ФизическиеЛица.ДатаРождения)
	|	И (&парамНетИНН
	|			ИЛИ &парамИНН = ФизическиеЛица.ИНН)
	|	И (&парамНетСтраховогоНомераПФР
	|			ИЛИ &парамСтраховойНомерПФР = ФизическиеЛица.СтраховойНомерПФР)
	|	И ФизическиеЛица.Наименование = &парамНаименование";
	
	Запрос.УстановитьПараметр("парамНаименование", НаименованиеФизлица);
	Запрос.УстановитьПараметр("парамНетДатыРождения", НетДатыРождения);
	Запрос.УстановитьПараметр("парамДатаРождения", ФизлицоОбъект.ДатаРождения);
	Запрос.УстановитьПараметр("парамНетИНН", НетИНН);
	Запрос.УстановитьПараметр("парамИНН", ФизлицоОбъект.ИНН);
	Запрос.УстановитьПараметр("парамНетСтраховогоНомераПФР", НетСтраховогоНомераПФР);
	Запрос.УстановитьПараметр("парамСтраховойНомерПФР", ФизлицоОбъект.СтраховойНомерПФР);
	
	МассивФизлиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокФизлиц = Новый СписокЗначений;
	СписокФизлиц.ЗагрузитьЗначения(МассивФизлиц);
	Возврат СписокФизлиц;

КонецФункции // ПолучитьСписокФизлиц()

Процедура ОбработатьВыборФизлица()

	ЭлементыФормы.Фамилия.ТолькоПросмотр		= ВыборФизлица;
	ЭлементыФормы.Имя.ТолькоПросмотр			= ВыборФизлица;
	ЭлементыФормы.Отчество.ТолькоПросмотр		= ВыборФизлица;

	ЭлементыФормы.ДатаРождения.ТолькоПросмотр		= ВыборФизлица И ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения);
	ЭлементыФормы.Пол.ТолькоПросмотр 				= ВыборФизлица И ЗначениеЗаполнено(ФизлицоОбъект.Пол);
	ЭлементыФормы.СтраховойНомерПФР.ТолькоПросмотр 	= ВыборФизлица И ЗначениеЗаполнено(ФизлицоОбъект.СтраховойНомерПФР);
	ЭлементыФормы.ИНН.ТолькоПросмотр 				= ВыборФизлица И ЗначениеЗаполнено(ФизлицоОбъект.ИНН);
	ЭлементыФормы.ПроцентСевернойНадбавки.ТолькоПросмотр 				= ВыборФизлица И ЗначениеЗаполнено(ПроцентСевернойНадбавки);
	
	
	// заполним наборы записей данными физлица
	ЗаполнитьНаборыПоФизлицу(ФизлицоОбъект.Ссылка);
	
	ПроверитьСтраховойНомерПоказатьОшибку();
	ПроверитьИННПоказатьОшибку();

КонецПроцедуры

// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина)
	
	Если мЭтоТрудовойДоговор
			и ЗначениеЗаполнено(Организация) и ЗначениеЗаполнено(Физлицо) Тогда
		//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
		// основное место работы или совместитель
		// и если есть установим вид занятости - Внутреннее совместительство
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&парамДатаСреза,
		|				Организация = &парамОрганизация
		|					И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (ВЫБОР
		|				КОГДА Работники.ПериодЗавершения <= &парамДатаСреза
		|						И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА Работники.ПричинаИзмененияСостоянияЗавершения
		|				ИНАЧЕ Работники.ПричинаИзмененияСостояния
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
		ДатаСреза = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза",   ДатаСреза);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НеЗадаватьВопрос Тогда
				ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
			Иначе 
				// спросим у пользователя, заменить вид занятости или нет
				ТекстВопроса = "В организации уже есть сотрудник """ + Выборка.ФизлицоНаименование + """ с видом занятости """ + Выборка.ВидЗанятости + """,
				|поменять вид занятости на ""Внутреннее совместительство""?";
				Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
					ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;	
				КонецЕсли;	
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()

// Процедура обрабатывает отображение подразделения
// и проверяет ПодразделениеОрганизации в трудовом договоре
Процедура ОбработкаРеквизитовТрудовогоДоговора()
	
	Если Не ПодразделениеОрганизации.Пустая() 
		и Не ПодразделениеОрганизации.Владелец = ОбособленноеПодразделение Тогда
		//выбранное подразделение организации не соответствует организации
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Если ЭтаФорма.ТекущийЭлемент.Имя = "ОбособленноеПодразделение" Тогда
			Предупреждение("Выбранное подразделение не соответствует обособленному подразделению!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает изменение организации
Процедура ОбработатьИзменениеОрганизации()

	//сформируем новый список обособленных подразделений
	СформироватьСписокОбособленныхПодразделений();
	
	ПроверитьИУстановитьВидЗанятости(Ложь);
	
	Код = ПолучитьОчереднойТабельныйНомер();
	
	ОбработатьОтображениеОбособленногоПодразделения();
	// и проверим ПодразделениеОрганизации в трудовом договоре
	ОбработкаРеквизитовТрудовогоДоговора();
		
КонецПроцедуры

Процедура СформироватьСписокОбособленныхПодразделений()

	мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	мСписокОбособленныхПодразделений.Вставить(0,Организация);

КонецПроцедуры // СформироватьСписокОбособленныхПодразделений()

// Определяет имеет ли смысл спрашивать у пользователя обособленное подразделение,
//	гдебудет работать сотрудник
//
// Параметры
//	нет
//
// Возвращаемое значение:
//   булево
//
Функция ПоказыватьОбособленноеПодразделение()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.ПометкаУдаления
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий() // организация должна быть выбрана
		И мСписокОбособленныхПодразделений.Количество() > 1; // у нашей орг есть обособленные подразделения

КонецФункции // ПоказыватьОбособленноеПодразделение()

Процедура ОбработатьОтображениеОбособленногоПодразделения()
	
	ПоказыватьПодразделения = ПоказыватьОбособленноеПодразделение();
	
	Если Не ПоказыватьПодразделения Тогда
		ОбособленноеПодразделение = Организация;
	ИначеЕсли ПоказыватьПодразделения и ОбособленноеПодразделение.Пустая() Тогда
		ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли ПоказыватьПодразделения и НЕ ОбособленноеПодразделение.Пустая() Тогда
		Если мСписокОбособленныхПодразделений.НайтиПоЗначению(ОбособленноеПодразделение) = НеОпределено Тогда
			ОбособленноеПодразделение = Организация;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает постфикс наименования, который соответствует виду договора
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговора()

	НовыйПостфикс = "";
	
	Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		НовыйПостфикс ="(вн. совм.)"; 
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
		НовыйПостфикс = "(осн.)";
	Иначе
		НовыйПостфикс = "(совм.)";
	КонецЕсли; 
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговора()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			//выходи из цикла, не удалось автоматически подобрать постфикс
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()

// Процедура подбирает постфикс наименования перед записью нового сотрудника
Процедура ПодобратьПостфиксНаименования()
	
	//запросом выбираем выбираем Актуальных не уволенных сотрудников
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|				,
	|				Организация = &парамОрганизация
	|					И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		//есть сотрудники по этому физлицу, необходимо подобрать постфикс
		// проверим, есть сотрудник с пустым постфиксом
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ПостфиксНаименования),"Постфикс")Тогда
			//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговора(), ВыборкаИзЗапроса);
			Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
				Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(ПостфиксНаименования) Тогда	
			//проверим, может у сотрудника остался постфикс, который не соответствует виду договора
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговора();
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				//скорее всего текущий постфикс наименования не соответствует виду договора
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
					Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпингаОрганизации()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

Функция СоздатьПриказОПриемеНаРаботу()

	ДокументОбъект = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();

	НоваяСтрока = ДокументОбъект.РаботникиОрганизации.Добавить();
	НоваяСтрока.Сотрудник = Ссылка;
	НоваяСтрока.Физлицо = Ссылка.Физлицо;
	НоваяСтрока.ПодразделениеОрганизации = ПодразделениеОрганизации;
	НоваяСтрока.Должность = Должность;
	НоваяСтрока.ДатаПриема = ДатаНачала;
	
	НоваяСтрока = ДокументОбъект.ОсновныеНачисления.Добавить();
	НоваяСтрока.Сотрудник = Ссылка;
	НоваяСтрока.Физлицо = Ссылка.Физлицо;
	НоваяСтрока.ВидРасчета = ВидРасчета;
	НоваяСтрока.Размер = Оклад;

    ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
    ДокументОбъект.Организация = ОбособленноеПодразделение;
    ДокументОбъект.Дата = РабочаяДата;
	Возврат ДокументОбъект;
    
КонецФункции

Процедура ОбработатьИзменениеФлагаСоздатьДокумент()

    ОбновитьНадписиХодаВыполненияИЗаголовки();
    ОбновитьШрифтНадписиХодаВыполнения();
    
	РежимСверткиЭУ = ?(СоздатьДокумент, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПодразделениеОрганизации.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.Должность.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ДатаНачала.АвтоОтметкаНезаполненного = СоздатьДокумент;
	
	ЭлементыФормы.ОбособленноеПодразделение.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ОбособленноеПодразделение);
	ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ПодразделениеОрганизации);
	ЭлементыФормы.Должность.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(Должность);
	ЭлементыФормы.ДатаНачала.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ДатаНачала);
	
	ЭлементыФормы.ВидРасчета.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ВидРасчета);
	ЭлементыФормы.Оклад.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(Оклад);
	
	ПечататьПриказ = СоздатьДокумент;
	ЭлементыФормы.ПечататьПриказ.Видимость = СоздатьДокумент;
	

КонецПроцедуры

Функция ПолучитьОсновноеНачислениеСотрудника()
	
	Возврат ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОкладПоДням;

КонецФункции // ПолучитьОсновноеНачислениеСотрудника()

Функция СохранитьДанные(ОписаниеОшибки = "")
	
    НачатьТранзакцию();
	
	//установим актуальность для нового сотрудника
	Актуальность  = Истина;
	
	//если создаем новое физлицо, проверим заполнение реквизитов
	// и запишем физлицо
	//необходимо создать новое физлицо, проверим реквизиты
	Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
		// заполним наименование
		ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	КонецЕсли;
	
	//попытка записать новое физлицо
	Попытка
		ФизлицоОбъект.Записать();
		Физлицо = ФизлицоОбъект.Ссылка;
	Исключение
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	// запишем наборы записей
	Попытка
		
		Если Не ВыборФизлица Тогда
			// запишем ФИО физлица, для вновь созданного физлица
			НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			ДатаЗаписиФИО = ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');
			ЗаписьНабора = НаборЗаписейФИО.Добавить();
			ЗаписьНабора.Период		= ДатаЗаписиФИО;
			ЗаписьНабора.Фамилия	= Фамилия;
			ЗаписьНабора.Имя		= Имя;
			ЗаписьНабора.Отчество	= Отчество;
			ЗаписьНабора.Физлицо 	= Физлицо;
			
			НаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
			НаборЗаписейФИО.Отбор.Физлицо.Значение 		= Физлицо;
			НаборЗаписейФИО.Отбор.Период.Использование	= Истина;
			НаборЗаписейФИО.Отбор.Период.Значение		= ДатаЗаписиФИО;
			
			НаборЗаписейФИО.Записать(Истина);
			
		КонецЕсли;
		
		Если мНаборЗаписейЛичныйВычет.Количество() > 0 Тогда
			
			Для каждого ЗаписьНабора Из мНаборЗаписейЛичныйВычет Цикл
				ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
			КонецЦикла;
			
			мНаборЗаписейЛичныйВычет.Отбор.Физлицо.Использование = Истина;
			мНаборЗаписейЛичныйВычет.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
			мНаборЗаписейЛичныйВычет.Записать();
			
		КонецЕсли;
		
		Если мНаборЗаписейВычетыНаДетей.Количество() > 0 Тогда
			
			Для каждого ЗаписьНабора Из мНаборЗаписейВычетыНаДетей Цикл
				ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
			КонецЦикла;
			
			мНаборЗаписейВычетыНаДетей.Отбор.Физлицо.Использование = Истина;
			мНаборЗаписейВычетыНаДетей.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
			мНаборЗаписейВычетыНаДетей.Записать();
			
		КонецЕсли;
		
		Если мНаборЗаписейДоходыПредыдущегоМестаРаботы.Количество() > 0 Тогда
			
			Для каждого ЗаписьНабора Из мНаборЗаписейДоходыПредыдущегоМестаРаботы Цикл
				ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
				ЗаписьНабора.Организация = Организация;
			КонецЦикла;
			
			мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Физлицо.Использование = Истина;
			мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
			мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Организация.Использование = Истина;
			мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Организация.Значение = Организация;
			мНаборЗаписейДоходыПредыдущегоМестаРаботы.Записать();
			
		КонецЕсли;	
		
		Если мПредоставлятьВычеты и ЗначениеЗаполнено(мДатаПредоставленияВычетов) Тогда
			
			НаборЗаписей = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Физлицо.Использование = Истина;
			НаборЗаписей.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
			ЗаписьНабора = НаборЗаписей.Добавить();
			ЗаписьНабора.Период = мДатаПредоставленияВычетов;
			ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
			ЗаписьНабора.Организация = Организация;
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			
			мНаборЗаписейГражданство[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
			мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
			мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
			мНаборЗаписейГражданство.Записать(Истина);
			
		КонецЕсли;
		
		Если мНаборЗаписейСтатус.Количество() > 0 Тогда
			
			мНаборЗаписейСтатус[0].Период = ?(ЗначениеЗаполнено(мНаборЗаписейСтатус[0].Период), мНаборЗаписейСтатус[0].Период, ДатаНачала);
			
			мНаборЗаписейСтатус[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейСтатус.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейСтатус.Отбор.Физлицо.Значение			= мНаборЗаписейСтатус[0].Физлицо;
			мНаборЗаписейСтатус.Отбор.Период.Использование		= Истина;
			мНаборЗаписейСтатус.Отбор.Период.Значение			= мНаборЗаписейСтатус[0].Период;
			мНаборЗаписейСтатус.Записать(Истина);
			
		КонецЕсли;
		
		Если мНаборЗаписейИнвалидность.Количество() > 0 Тогда
			
			Если ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
				мНаборЗаписейИнвалидность[0].Физлицо = ФизлицоОбъект.Ссылка;
				мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
				мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
				мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
				мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
				мНаборЗаписейИнвалидность.Записать(Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если мНаборЗаписейСевернаяНадбавка.Количество() > 0 Тогда
			Если мНаборЗаписейСевернаяНадбавка[0].СевернаяНадбавка = ПроцентСевернойНадбавки
				И ПроцентСевернойНадбавки = 0 Тогда
				//ничего не пишем
			Иначе
				
				мНаборЗаписейСевернаяНадбавка[0].Физлицо 					= ФизлицоОбъект.Ссылка;
				мНаборЗаписейСевернаяНадбавка.Отбор.Физлицо.Использование	= Истина;
				мНаборЗаписейСевернаяНадбавка.Отбор.Физлицо.Значение		= мНаборЗаписейСевернаяНадбавка[0].Физлицо;
				мНаборЗаписейСевернаяНадбавка.Отбор.Период.Использование	= Истина;
				мНаборЗаписейСевернаяНадбавка.Отбор.Период.Значение			= мНаборЗаписейСевернаяНадбавка[0].Период;
				мНаборЗаписейСевернаяНадбавка[0].СевернаяНадбавка			= ПроцентСевернойНадбавки;
				мНаборЗаписейСевернаяНадбавка.Записать(Истина);
			КонецЕсли;
		ИначеЕсли ПроцентСевернойНадбавки <> 0 Тогда
			НоваяЗапись = мНаборЗаписейСевернаяНадбавка.Добавить();
			НоваяЗапись.Физлицо 					= ФизлицоОбъект.Ссылка;
			НоваяЗапись.СевернаяНадбавка 			= ПроцентСевернойНадбавки;
			НоваяЗапись.Период 						= ДатаНачала;
			мНаборЗаписейСевернаяНадбавка.Записать(Истина);
		КонецЕсли;
		
	Исключение
		Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	// запишем сотрудника
	Если СоздатьДокумент Тогда
			ТекущееПодразделениеОрганизации  = ПодразделениеОрганизации;
			ТекущаяДолжностьОрганизации      = Должность;
			ДатаПриемаНаРаботу               = ДатаНачала;
	КонецЕсли;
	
    Попытка
        ЗаписатьВФорме();
	Исключение
        Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
        Возврат Ложь;
    КонецПопытки;
    
    Если СоздатьДокумент Тогда
        
		// в зависимости от вида договора создадим нужный документ
		ДокументОбъект = СоздатьПриказОПриемеНаРаботу();
        
        Попытка
            ДокументОбъект.Записать(); 
        Исключение
            Если ТранзакцияАктивна() Тогда
                ОтменитьТранзакцию();
            КонецЕсли;
            Возврат Ложь;
        КонецПопытки;
        
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 
			Если ПечататьПриказ Тогда
				ДокументОбъект.Печать("Т1_от_5_1_2004");
			КонецЕсли;
		Исключение
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;    
        
    КонецЕсли;
    
    ЗафиксироватьТранзакцию();
    
    Возврат Истина;
    
КонецФункции // СохранитьДанные()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНОВ ФОРМЫ 

Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбособленноеПодразделение = Организация;
	ОбработатьИзменениеОрганизации();
	ПодобратьПостфиксНаименования();
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
		ПодобратьПостфиксНаименования();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпингаОрганизация, мТекстТайпингаОрганизация, мПоследнееЗначениеЭлементаТайпингаОрганизация, Ложь);
	
КонецПроцедуры

Процедура ФамилияПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ИмяПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = ПолучитьНаименованиеФизлица();
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	Если ЗначениеЗаполнено(Отчество) И Не ЗначениеЗаполнено(ФизлицоОбъект.Пол) Тогда
		ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
	КонецЕсли;
	
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроверитьФизлицо();	
	
КонецПроцедуры

Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	ПроверитьСтраховойНомерПоказатьОшибку();
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ИННПриИзменении(Элемент)
	
	ПроверитьИННПоказатьОшибку();
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	ПроверитьФизлицо();
КонецПроцедуры

Процедура НадписьГражданствоНажатие(Элемент)
	
	ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.Физлицо = ФизлицоОбъект.Ссылка;
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть()
	
КонецПроцедуры

Процедура НадписьСтатусНажатие(Элемент)
	
	ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
	ФормаВвода.СправочникОбъект = ФизлицоОбъект.Ссылка;
	ФормаВвода.ТолькоДанныеОСтатусе = Истина;
	ФормаВвода.НаборЗаписейСтатус = мНаборЗаписейСтатус;
	ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.Доходы.Видимость = Ложь;
	ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты.Видимость = Ложь;	 
	ФормаВвода.ЭлементыФормы.НадписьИстория.Видимость = Ложь;
	ФормаВвода.ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	ФормаВвода.ЭлементыФормы.ОсновныеДействияФормы.Видимость = Ложь;
	ФормаВвода.ЭлементыФормы.КоманднаяПанельПомощник.Видимость = Истина;	
	ФормаВвода.ЭлементыФормы.КоманднаяПанельПомощник.Вспомогательная = Ложь;
	ФормаВвода.ЭлементыФормы.КоманднаяПанельПомощник.Кнопки.ЗаписатьИЗакрыть.КнопкаПоУмолчанию = Истина;
	ФормаВвода.Заголовок = "Статус налогоплательщика";
	ФормаВвода.ОткрытьМодально();
	
КонецПроцедуры

Процедура НадписьИнвалидностьНажатие(Элемент)
	
	ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);
	ФормаВвода.Физлицо = ФизлицоОбъект.Ссылка;
	ФормаВвода.НаборЗаписей = мНаборЗаписейИнвалидность;
	ФормаВвода.Открыть();
	Если ЭлементыФормы.НадписьИнвалидность2.Заголовок = "Не является инвалидом" Тогда
		ФормаВвода.Инвалидность = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

Процедура НадписьСтандартныеНалоговыеВычетыНажатие(Элемент)
	
	ФормаВвода = Справочники.СотрудникиОрганизаций.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма, Ссылка);
	ФормаВвода.ФизлицоОбъект = ФизлицоОбъект;
	ФормаВвода.Организация   = Организация;
	ФормаВвода.мНаборЗаписейЛичныеВычеты  = мНаборЗаписейЛичныйВычет;
	ФормаВвода.мНаборЗаписейВычетыНаДетей = мНаборЗаписейВычетыНаДетей;
	ФормаВвода.мНаборЗаписейЛичныеВычетыПриОткрытии  = мНаборЗаписейЛичныйВычет;
	ФормаВвода.мНаборЗаписейВычетыНаДетейПриОткрытии = мНаборЗаписейВычетыНаДетей;
	ФормаВвода.мНаборЗаписейДоходыПредыдущегоМестаРаботы = мНаборЗаписейДоходыПредыдущегоМестаРаботы;
	ФормаВвода.мНаборЗаписейДоходыПредыдущегоМестаРаботыПриОткрытии = мНаборЗаписейДоходыПредыдущегоМестаРаботы;
	ФормаВвода.ПредоставлятьВычеты 		 = мПредоставлятьВычеты;
	ФормаВвода.ДатаПредоставленияВычетов = ?(ЗначениеЗаполнено(мДатаПредоставленияВычетов), мДатаПредоставленияВычетов, НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	мПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка,ФизлицоОбъект)	
	
КонецПроцедуры

Процедура ПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	мПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,ФизлицоОбъект)
	
КонецПроцедуры

Процедура ОбновитьНадписиХодаВыполненияИЗаголовки()
	
	ЭлементыФормы.НадписьМестоРаботы.Заголовок = "Кадровая информация";
		
	ЭлементыФормы.НадписьХод2.Заголовок = "Кадровая информация";
	ЭлементыФормы.НадписьХод3.Заголовок = "Дополнительная информация";
	
КонецПроцедуры

Процедура ОбновитьШрифтНадписиХодаВыполнения()

	ЖирныйШрифт  = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
	ОбычныйШрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
	
	ЭлементыФормы.НадписьХод1.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные, ЖирныйШрифт, ОбычныйШрифт);
	ЭлементыФормы.НадписьХод2.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема, ЖирныйШрифт, ОбычныйШрифт);
	ЭлементыФормы.НадписьХод3.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, ЖирныйШрифт, ОбычныйШрифт);
	    
КонецПроцедуры

Процедура СоздатьПриказОПриемеПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
КонецПроцедуры

Процедура ОбновитьПредставлениеЭлементов();
	
	//Гражданство
	Если мНаборЗаписейГражданство.Количество() > 0 Тогда
		Гражданство = "" + СокрЛП(мНаборЗаписейГражданство[0].Страна) + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсию";
	Иначе
		Гражданство = "Ввести данные о гражданстве";
	КонецЕсли;
	ЭлементыФормы.НадписьГражданство2.Заголовок = Гражданство;
	
	//Инвалидность
	Если мНаборЗаписейИнвалидность.Количество() > 0 Тогда
		ЗаписьИзНабора = мНаборЗаписейИнвалидность[0];
		
		Если ЗаписьИзНабора.Инвалидность Тогда
			Инвалидность = 	"инвалид: " + ЗаписьИзНабора.ГруппаИнвалидности + " группы" 
			+ ", справка серия: " + ЗаписьИзНабора.СерияСправки + ", номер: " + ЗаписьИзНабора.НомерСправки 
			+ ", выдана: "  + Формат(ЗаписьИзНабора.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'") + " года "
			+ ", срок действия: " + Формат(ЗаписьИзНабора.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'") + " года ";
		Иначе
			Инвалидность = "Не является инвалидом";
		КонецЕсли;
	Иначе
		Инвалидность = "Не является инвалидом";
	КонецЕсли;
	ЭлементыФормы.НадписьИнвалидность2.Заголовок = Инвалидность;
	
	//Стандартные вычеты
	Если мНаборЗаписейЛичныйВычет.Количество() > 0 Тогда
		СтандартныеВычеты = "Личный вычет: " + СокрЛП(мНаборЗаписейЛичныйВычет[0].КодВычетаЛичный) + ". ";
	Иначе
		СтандартныеВычеты = "Личный вычет не применяется. " 
	КонецЕсли;
	
	Если мНаборЗаписейВычетыНаДетей.Количество() > 0 Тогда
		СтандартныеВычетыНаДетей = "";
		Для Каждого СтрокаНабора ИЗ мНаборЗаписейВычетыНаДетей Цикл			
			Если СтрокаНабора.КоличествоДетей <> 0 Тогда					
				СтандартныеВычетыНаДетей = СтандартныеВычетыНаДетей + " с кодом " + СокрЛП(СтрокаНабора.КодВычета) + " на " + СтрокаНабора.КоличествоДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",СтрокаНабора.КоличествоДетей)
			КонецЕсли;
		КонецЦикла;
		Если СтандартныеВычетыНаДетей <> "" Тогда
			СтандартныеВычеты = СтандартныеВычеты + "Вычет на детей: " + СтандартныеВычетыНаДетей;
		КонецЕсли;		
	Иначе
		СтандартныеВычеты = СтандартныеВычеты + "Вычеты на детей не применяются.";
	КонецЕсли;
	ЭлементыФормы.НадписьСтандартныеНалоговыеВычеты2.Заголовок = СтандартныеВычеты;	
	
	//Статус налогоплательщика
	НадписьСтатус2 = "Резидент. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
	
	Если мНаборЗаписейСтатус.Количество() > 0 Тогда
		
			Если мНаборЗаписейСтатус[0].Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
				НадписьСтатус2 = "Резидент. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
			ИначеЕсли мНаборЗаписейСтатус[0].Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
				НадписьСтатус2 = "Нерезидент. При исчислении НДФЛ с оплаты труда будет применяться ставка 30%";
			ИначеЕсли  мНаборЗаписейСтатус[0].Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
				НадписьСтатус2 = "Высококвалифицированный иностранный специалист. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
			ИначеЕсли  мНаборЗаписейСтатус[0].Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
				НадписьСтатус2 = "Участник программы по переселению соотечественников. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
			КонецЕсли;

	КонецЕсли;
	ЭлементыФормы.НадписьСтатус2.Заголовок = НадписьСтатус2;
	
	//Северная надбавка
	Если мНаборЗаписейСевернаяНадбавка.Количество() > 0 Тогда
		ЗаписьИзНабора = мНаборЗаписейСевернаяНадбавка[0];
		ПроцентСевернойНадбавки = ЗаписьИзНабора.СевернаяНадбавка;
	КонецЕсли;

	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ФизлицоОбъект   = Справочники.ФизическиеЛица.СоздатьЭлемент();
	
	Код = ПолучитьОчереднойТабельныйНомер();
	
	// если реквизиты будут не нужны очистим их перед записью сотрудника
	ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	ЗанимаемыхСтавок = 1;
	
	Если Не ЗначениеЗаполнено(Организация)  Тогда
		Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
	КонецЕсли;
	
	ОбособленноеПодразделение = Организация;
	
    мЭтоТрудовойДоговор = Истина;
	
	мКартинкаФизлицо = БиблиотекаКартинок["ЗначокКадры32"];
	мКартинкаСотрудник = БиблиотекаКартинок["ЗначокКадры32"];
	мКартинкаПриказ = БиблиотекаКартинок["ЗначокЖурнал32"];
	
	мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;

	мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;

	мСтруктураПараметровОтбораОсновныхВР = Новый Структура;
	мСтруктураПараметровОтбораНадбавок = Новый Структура;

	мНаборЗаписейГражданство	= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность	= РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();

	мНаборЗаписейЛичныйВычет 	= РегистрыСведений.НДФЛСтандартныеВычетыФизлиц.СоздатьНаборЗаписей();
	мНаборЗаписейВычетыНаДетей 	= РегистрыСведений.НДФЛСтандартныеВычетыНаДетей.СоздатьНаборЗаписей();
	мНаборЗаписейДоходыПредыдущегоМестаРаботы = РегистрыСведений.НДФЛДоходыПредыдущегоМестаРаботы.СоздатьНаборЗаписей();
	
	мНаборЗаписейСтатус 	= РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	
	мНаборЗаписейСевернаяНадбавка = РегистрыСведений.ПроцентСевернойНадбавкиФизЛиц.СоздатьНаборЗаписей();
	
	мПредоставлятьВычеты = Ложь;

КонецПроцедуры

Процедура ПриОткрытии()
	
	// установим видимость переключателя в зависимости от того, что передали в форму при открытии
	РежимСверткиЭУ = ?(СоздатьДокумент, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельСоздатьПриказ.Свертка = РежимСверткиЭУ;
	
	мНеСоздаватьДокумент = Не СоздатьДокумент;
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
	ЭлементыФормы.ОсновныеДействияФормыНазад.Кнопки.ШагНазад.Доступность = Ложь;
	
	ТекущийЭлемент = ЭлементыФормы.Фамилия;
    
    ОбработатьИзменениеОрганизации();
	
	ОбновитьНадписиХодаВыполненияИЗаголовки();
	ЭлементыФормы.НадписьХод1.Шрифт = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
    
    Модифицированность = Ложь;
    
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Ответ = Вопрос("При закрытии формы все введенные данные будут потеряны. Закрыть форму?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаВыбораФизлиц" Тогда
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			Физлицо = Параметр;
			ФизлицоОбъект = Параметр.ПолучитьОбъект();
			ВыборФизлица = Истина;
		КонецЕсли;
		
		ФизлицоОбработано = Истина;
		ОбработатьВыборФизлица();
		
	ИначеЕсли ИмяСобытия =  "ОбновитьСтандартныеВычеты" и Источник = ЭтаФорма и ТипЗнч(Параметр) = Тип("Массив") Тогда	
		
		мПредоставлятьВычеты = Параметр[0];
		мДатаПредоставленияВычетов = Параметр[1];
		мНаборЗаписейДоходыПредыдущегоМестаРаботы.Загрузить(Параметр[2]);
		Для каждого ЗаписьНабора Из мНаборЗаписейДоходыПредыдущегоМестаРаботы Цикл
			ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
			ЗаписьНабора.Организация = Организация;
		КонецЦикла;
				
	КонецЕсли;	
	
	ОбновитьПредставлениеЭлементов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ОТОБРАЖЕНИЯ ДАННЫХ НА СТРАНИЦАХ

// процедура вызывается всегда после смены страницы
// 
Процедура ОбработатьОтображениеНовойСтраницы()

	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда	
			
		Если ПустаяСтрока(Код) Тогда
			// если табельный номер еще не присвоен, то получим очередной
			Код = ПолучитьОчереднойТабельныйНомер();
		КонецЕсли;
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
		КонецЕсли;
		
	Если мЭтоТрудовойДоговор Тогда
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ДоговорКонтракт;
			
			// панель вид занятости
			ЭлементыФормы.ПанельВидЗанятости.ТекущаяСтраница = ЭлементыФормы.ПанельВидЗанятости.Страницы.ВидЗанятости;
			
			Если мСписокОбособленныхПодразделений.Количество() > 1 Тогда
				ТекущийЭлемент = ЭлементыФормы.ОбособленноеПодразделение;
			Иначе
				ТекущийЭлемент = ЭлементыФормы.ПодразделениеОрганизации;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
				// попробуем заполнить основное начисление
				ВидРасчета = ПолучитьОсновноеНачислениеСотрудника();
				ЭлементыФормы.ВидРасчета.Значение = ПолучитьОсновноеНачислениеСотрудника();
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ОбновитьШрифтНадписиХодаВыполнения();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

Процедура ОсновныеДействияФормыШагВперед(Кнопка)
	
	ЗаписатьДанные = Ложь;
	
	// обработаем нажатие кнопки Шаг вперед
	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные Тогда
		
		//проверим возможность перехода к следующему шагу
		СообщениеОбОшибке = "";
		Если Не ЗначениеЗаполнено(Фамилия) Тогда
			СообщениеОбОшибке = "Не указана Фамилия" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Имя) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Имя" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Организация" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементыФормы.ДатаРождения.Значение) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Дата рождения" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЭлементыФормы.Пол.Значение) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + "Не указан Пол" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Предупреждение(СообщениеОбОшибке);
			Возврат;	
		КонецЕсли;	
		
		// при переходе со страницы ПерсональныеДанные проверим физлицо на дубли
		// и установим режим ввода физлица
		Если Не ФизлицоОбработано Тогда
			ПроверитьФизлицо();
		КонецЕсли;
		
		Если мНаборЗаписейГражданство.Количество() = 0 Тогда
			ЗаписьОГражданстве = мНаборЗаписейГражданство.Добавить();		
			ЗаписьОГражданстве.Период = '19000101';
			ЗаписьОГражданстве.Страна = Справочники.КлассификаторСтранМира.Россия;
		КонецЕсли;
		
		ОбновитьПредставлениеЭлементов();
		
		// определим текущую страницу
		мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		
		// панель Обособленное подразделение
		РежимСверткиПанели = ?(мСписокОбособленныхПодразделений.Количество() > 1, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);		
		ЭлементыФормы.ПанельОбособленноеПодразделение.Свертка = РежимСверткиПанели;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда
        
        //проверим возможность перехода к следующему шагу
        СообщениеОбОшибке = "";
		Если СоздатьДокумент Тогда
			Если мСписокОбособленныхПодразделений.Количество() > 1 Тогда
				Если Не ЗначениеЗаполнено(ОбособленноеПодразделение) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Обособленное подразделение" + Символы.ПС;
				КонецЕсли;	
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Подразделение" + Символы.ПС;
			КонецЕсли;	
			Если Не ЗначениеЗаполнено(Должность) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Должность" + Символы.ПС;
			КонецЕсли;    
			Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Дата приема" + Символы.ПС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ВидРасчета) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не указан Основной вид начисления" + Символы.ПС;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Оклад) Тогда
				СообщениеОбОшибке = СообщениеОбОшибке + "Не указан Оклад" + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
        
        Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Предупреждение(СообщениеОбОшибке);
			Возврат;	
		КонецЕсли;
        
        // определим текущую страницу		
		мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда
		
		ЗаписатьДанные = Истина;
		
	КонецЕсли;
	
	Если ЗаписатьДанные Тогда
        
        Если СохранитьДанные() Тогда
            Закрыть();
		КонецЕсли;
		
	Иначе
		
		ОбработатьОтображениеНовойСтраницы();
		
		// установим нужную страницу
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = мТекущаяСтраница;
		
		ЭлементыФормы.ОсновныеДействияФормыНазад.Кнопки.ШагНазад.Доступность = мТекущаяСтраница <> ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
		
		ТекстКнопкиШагВперед = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, "Готово", "Далее");
		//КартинкаКнопки = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, БиблиотекаКартинок.РаботаПоЗаявкеЗавершена, БиблиотекаКартинок.РаботаПоЗаявкеЗавершена);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Текст = ТекстКнопкиШагВперед;
		//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Картинка = КартинкаКнопки;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОсновныеДействияФормыШагНазад(Кнопка)
	
	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда	
		
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда
		
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			
	КонецЕсли;
	
	мТекущаяСтраница = ЭлементыФормы.ПанельДанные.ТекущаяСтраница;
	
	ЭлементыФормы.ОсновныеДействияФормыНазад.Кнопки.ШагНазад.Доступность = мТекущаяСтраница <> ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
	
	ТекстКнопкиШагВперед = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, "Готово", "Далее");
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Текст = ТекстКнопкиШагВперед;
	
	ОбновитьШрифтНадписиХодаВыполнения();
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора = мСписокОбособленныхПодразделений;

КонецПроцедуры

Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	ОбработкаРеквизитовТрудовогоДоговора();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ


мОбработкаТайпингаОрганизация					= Ложь;
мТекстТайпингаОрганизация						= "";
мПоследнееЗначениеЭлементаТайпингаОрганизация	= Неопределено;

мОбработкаТайпинга								= Ложь;
мТекстТайпинга									= "";
мПоследнееЗначениеЭлементаТайпинга				= Неопределено;

