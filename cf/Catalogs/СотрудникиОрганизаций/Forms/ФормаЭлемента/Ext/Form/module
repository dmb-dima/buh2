////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мЭтоНовый; 		//запоминаем перед записью, что элемент был новый
Перем мЕстьНачисления;

Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;
Перем мОбработкаТайпингаОрганизация;
Перем мТекстТайпингаОрганизация;
Перем мПоследнееЗначениеЭлементаТайпингаОрганизация;

Перем мПроцентСевернойНадбавки;
Перем мДатаПроцентаСевернойНадбавки;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция проверяется прием на работу сотрудника или наличие начислений
 //
 // Параметры  Нет
 //
 // Возвращаемое значение:
 //   Булево
 //
Функция ЕстьНачисленияИлиПриемНаРаботу()
 
	//проверим по наличию записей в регистре РаботникиОрганизаций
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РаботникиОрганизаций.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
	|ГДЕ
	|	РаботникиОрганизаций.Сотрудник = &ПарамСотрудник";
	
	Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Истина;	
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции // ЕстьНачисленияИлиПриемНаРаботу()

// Процедура формирует список доступных видов занятости, в зависимости от учетной политики по персоналу организаций
Процедура УстановитьДоступныеЗначениеВидЗанятости(Редактировать = Ложь)

	СписокЗначенийДляВыбора = Новый СписокЗначений;
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	
	ПоддержкаВнутреннегоСовместительства = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ПоддержкаВнутреннегоСовместительства");
	
	Если ПоддержкаВнутреннегоСовместительства Тогда
		СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
	КонецЕсли;
	
	ЭлементыФормы.ВидЗанятости.ДоступныеЗначения 	= СписокЗначенийДляВыбора;
	ЭлементыФормы.ВидЗанятости1.ДоступныеЗначения 	= СписокЗначенийДляВыбора;
	
	Если ЗначениеЗаполнено(ВидЗанятости) и СписокЗначенийДляВыбора.НайтиПоЗначению(ВидЗанятости) = Неопределено и Редактировать Тогда
	
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного 	= Истина;
		ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного 	= Истина;
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСписокВидовЗанятости()

// Процедура управляет видимостью гиперссылки открытия формы физлица при вводе нового сотрудника
// и заголовком гиперссылки
 Процедура УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно()

	Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Ложь;
	Иначе
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Истина;	
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Заголовок = "Более подробно о физическом лице " + ФизлицоОбъект.Наименование + "...";
	КонецЕсли;	

КонецПроцедуры // УстановитьЗаголовокВидимостьРедактированияФизлица()

// Процедура устанавливает заголовок гиперссылкни ОткрытьСправочникФизлиц
// в зависимости от варианта ввода физлица
Процедура УстановитьЗаголовокОткрытьСправочникФизлиц()
	
	Если ВыборФизлица Тогда
		ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = "Открыть справочник физических лиц для выбора...";
	Иначе
		ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = "Открыть справочник физических лиц...";
	КонецЕсли;	
	
КонецПроцедуры // УстановитьЗаголовокОткрытьСправочникФизлиц()

// Процедура получает ФИО физлица
Процедура ПрочитатьФИО()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Физлицо);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейФИО.Добавить(), Выборка);
		ФИОСрез  = мНаборЗаписейФИО[0];
		Фамилия  = ФИОСрез.Фамилия;
		Имя      = ФИОСрез.Имя;
		Отчество = ФИОСрез.Отчество;
	Иначе
		Фамилия  = "";
		Имя      = "";
		Отчество = "";
	КонецЕсли;

КонецПроцедуры // ПрочитатьФИО()

// Процедура считывает значение северной надбавки физлица из регистра сведений
Процедура ПрочитатьЗначениеСевернойНадбавки()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПроцентСевернойНадбавкиФизЛицСрезПоследних.СевернаяНадбавка,
	               |	ПроцентСевернойНадбавкиФизЛицСрезПоследних.Период
	               |ИЗ
	               |	РегистрСведений.ПроцентСевернойНадбавкиФизЛиц.СрезПоследних(&ДатаСреза, ФизЛицо = &ФизЛицо) КАК ПроцентСевернойНадбавкиФизЛицСрезПоследних";
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицо", ФизлицоОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ПроцентСевернойНадбавки = Выборка.СевернаяНадбавка;
		ДатаНачалаДействияСевернойНадбавки = Выборка.Период;
	Иначе
		ПроцентСевернойНадбавки = 0;
		ДатаНачалаДействияСевернойНадбавки = Дата(1900, 01, 01);
	КонецЕсли;
	мПроцентСевернойНадбавки = ПроцентСевернойНадбавки;
	мДатаПроцентаСевернойНадбавки = ДатаНачалаДействияСевернойНадбавки;
КонецПроцедуры // ПрочитатьЗначениеСевернойНадбавки()

// Процедура записывает измененное значение процента северной надбавки в регистр сведений
Процедура ЗаписатьПроцентСевернойНадбавки()
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаДействияСевернойНадбавки)
		ИЛИ ПроцентСевернойНадбавки = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (мПроцентСевернойНадбавки = ПроцентСевернойНадбавки
	И мДатаПроцентаСевернойНадбавки = ДатаНачалаДействияСевернойНадбавки) Тогда
	    НаборЗаписейСевернаяНадбавка = РегистрыСведений.ПроцентСевернойНадбавкиФизЛиц.СоздатьМенеджерЗаписи();
		НаборЗаписейСевернаяНадбавка.Период = ДатаНачалаДействияСевернойНадбавки;
		НаборЗаписейСевернаяНадбавка.ФизЛицо = ФизлицоОбъект.Ссылка;
		НаборЗаписейСевернаяНадбавка.Прочитать();
		НаборЗаписейСевернаяНадбавка.Период = ДатаНачалаДействияСевернойНадбавки;
		НаборЗаписейСевернаяНадбавка.ФизЛицо = ФизлицоОбъект.Ссылка;
		НаборЗаписейСевернаяНадбавка.СевернаяНадбавка = ПроцентСевернойНадбавки;
		НаборЗаписейСевернаяНадбавка.Записать();
	КонецЕсли;
КонецПроцедуры // ЗаписатьПроцентСевернойНадбавки()


// Процедура устанавливает доступность реквизитов физлица в зависимости от варианта ввода нового сотрудника
Процедура УстановитьДоступностьРеквизитовФизлица()
	
	ЭлементыФормы.НаименованиеФизлица.Видимость = Не ВыборФизлица;
	ЭлементыФормы.Физлицо.Видимость = ВыборФизлица;
	ЭлементыФормы.ДатаРождения.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.Пол.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.СтраховойНомерПФР.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.КодИМНС.ТолькоПросмотр = ВыборФизлица;
	ЭлементыФормы.ИНН.ТолькоПросмотр = ВыборФизлица;
	
КонецПроцедуры // УстановитьДоступностьПоВИду()


// Процедура обрабатывает изменение организации
Процедура ОбработатьИзменениеОрганизации()

	УстановитьДоступныеЗначениеВидЗанятости(Истина);
	ПроверитьИУстановитьВидЗанятости(Ложь);
	Код = ПолучитьОчереднойТабельныйНомер();
			
КонецПроцедуры

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпингаОрганизации()

	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

Процедура ЗаполнитьНаборыПоФизлицу()

	мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", Ссылка.Физлицо);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Период,
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Период,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СерияСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.НомерСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ДатаВыдачи,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ГруппаИнвалидности,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СрокДействияСправки
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОбИнвалидностиФизлицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейИнвалидность.Добавить(), Выборка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента)
	
	Если ИмяОбновляемогоЭлемента = "Гражданство" Тогда
		
		Если мНаборЗаписейГражданство.Количество() > 0 Тогда
			Гражданство = "" + мНаборЗаписейГражданство[0].Страна + ?(мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию,", не ",", " ) + "имеет право на пенсию";
			ГражданствоСтрана = "" + мНаборЗаписейГражданство[0].Страна;
			
			Модифицированность = Истина;
			
		Иначе
			Гражданство = "Ввести данные о гражданстве";
		КонецЕсли;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СтатусНалогоплательщика" Тогда
		
		СтатусНалогоплательщика = СтатусНалогоплательщика;
		

		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусФизлица.Статус
		|ИЗ
		|	РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК СтатусФизлица";
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			Если Выборка.Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент Тогда
				СтатусНалогоплательщика = "Резидент. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
			ИначеЕсли Выборка.Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент Тогда
				СтатусНалогоплательщика = "Нерезидент. При исчислении НДФЛ с оплаты труда будет применяться ставка 30%";
			ИначеЕсли  Выборка.Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.ВысококвалифицированныйИностранныйСпециалист Тогда
				СтатусНалогоплательщика = "Высококвалифицированный иностранный специалист. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
			ИначеЕсли  Выборка.Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.УчастникПрограммыПоПереселениюСоотечественников Тогда
				СтатусНалогоплательщика = "Участник Государственной программы по оказанию содействия добровольному переселению в Российскую Федерацию соотечественников, проживающих за рубежом. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
			КонецЕсли;
		Иначе
			СтатусНалогоплательщика = "Резидент. При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";
		КонецЕсли;
		
		СтатусНалогоплательщика = СтатусНалогоплательщика;
		
		Модифицированность = Истина;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "Инвалидность" Тогда
		
		Если мНаборЗаписейИнвалидность.Количество() > 0 Тогда
			ЗаписьИзНабора = мНаборЗаписейИнвалидность[0];
			
			Если ЗаписьИзНабора.Инвалидность Тогда
				Инвалидность = 	"инвалид: " + ЗаписьИзНабора.ГруппаИнвалидности + " группы" 
				+ ", справка серия: " + ЗаписьИзНабора.СерияСправки + ", номер: " + ЗаписьИзНабора.НомерСправки 
				+ ", выдана: "  + Формат(ЗаписьИзНабора.ДатаВыдачи,"ДФ='дд ММММ гггг';ДП='...'") + " года "
				+ ", срок действия: " + Формат(ЗаписьИзНабора.СрокДействияСправки,"ДФ='дд ММММ гггг';ДП='...'") + " года ";
				
			Иначе
				Инвалидность = "Не является инвалидом";
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
		Иначе
			Инвалидность = "Ввести данные об инвалидности";
		КонецЕсли;
		
	ИначеЕсли ИмяОбновляемогоЭлемента = "СтандартныеВычеты" Тогда	
		
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Ссылка.Организация);
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.УстановитьПараметр("парамДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрименениеВычетов.Организация
		|ИЗ
		|	РегистрСведений.НДФЛПрименениеВычетов.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК ПрименениеВычетов
		|ГДЕ
		|	ПрименениеВычетов.Организация = &Организация";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтандартныеВычеты.КодВычетаЛичный.КодДляОтчетности2009 КАК КодВычетаЛичный,
			|	ВЫБОР
			|		КОГДА СтандартныеВычеты.КодВычетаЛичный = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ЕстьЛичныйВычет
			|ИЗ
			|	РегистрСведений.НДФЛСтандартныеВычетыФизлиц.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК СтандартныеВычеты";
			Выборка = Запрос.Выполнить().Выбрать();
			СтандартныеВычеты = "Личный вычет" + ?(Выборка.Следующий() И Выборка.ЕстьЛичныйВычет, ": " + Выборка.КодВычетаЛичный, " не применяется") + ". ";
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВычетНаДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьДвойнойВычетНаДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДвойныхДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВычетНаДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьДвойнойВычетНаДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК КоличествоДвойныхДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВторойДвойнойВычетНаДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК ВтороеКоличествоДвойныхДетей,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
			|						И НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей > 0
			|					ТОГДА ИСТИНА
			|				ИНАЧЕ ЛОЖЬ
			|			КОНЕЦ), ЛОЖЬ) КАК ЕстьВторойДвойнойВычетНаДетейИнвалидов,
			|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
			|				КОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
			|					ТОГДА НДФЛСтандартныеВычетыНаДетейСрезПоследних.КоличествоДетей
			|				ИНАЧЕ 0
			|			КОНЕЦ), ЛОЖЬ) КАК ВтороеКоличествоДвойныхДетейИнвалидов
			|ИЗ
			|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей.СрезПоследних(&парамДатаСреза, Физлицо = &парамФизлицо) КАК НДФЛСтандартныеВычетыНаДетейСрезПоследних";
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			Если Выборка.ЕстьВычетНаДетей Или Выборка.ЕстьДвойнойВычетНаДетей Или Выборка.ЕстьВторойДвойнойВычетНаДетей Или Выборка.ЕстьВычетНаДетейИнвалидов Или Выборка.ЕстьВторойДвойнойВычетНаДетейИнвалидов Или Выборка.ЕстьДвойнойВычетНаДетейИнвалидов Тогда
				СтандартныеВычеты = СтандартныеВычеты + "Вычет на детей:";
				Если Выборка.ЕстьВычетНаДетей Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 108 на " + Выборка.КоличествоДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДетей)
				КонецЕсли;
				Если Выборка.ЕстьДвойнойВычетНаДетей Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 110 на " + Выборка.КоличествоДвойныхДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДвойныхДетей)
				КонецЕсли;
				Если Выборка.ЕстьВторойДвойнойВычетНаДетей Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 111 на " + Выборка.ВтороеКоличествоДвойныхДетей + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.ВтороеКоличествоДвойныхДетей)
				КонецЕсли;
				Если Выборка.ЕстьВычетНаДетейИнвалидов Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 109 на " + Выборка.КоличествоДетейИнвалидов + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДетейИнвалидов)
				КонецЕсли;
				Если Выборка.ЕстьДвойнойВычетНаДетейИнвалидов Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 112 на " + Выборка.КоличествоДвойныхДетейИнвалидов + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.КоличествоДвойныхДетейИнвалидов)
				КонецЕсли;
				Если Выборка.ЕстьВторойДвойнойВычетНаДетейИнвалидов Тогда
					СтандартныеВычеты = СтандартныеВычеты + " с кодом 113 на " + Выборка.ВтороеКоличествоДвойныхДетейИнвалидов + ОбщегоНазначения.ФормаМножественногоЧисла(" ребенка,"," детей,"," детей,",Выборка.ВтороеКоличествоДвойныхДетейИнвалидов)
				КонецЕсли;
				СтандартныеВычеты = Лев(СтандартныеВычеты,СтрДлина(СтандартныеВычеты) - 1) + ". ";
			Иначе
				СтандартныеВычеты = СтандартныеВычеты + "Вычеты на детей не применяются.";
			КонецЕсли;
		Иначе
			СтандартныеВычеты = "Не применяются";
		КонецЕсли;
		
		СтандартныеВычеты = СтандартныеВычеты;
		
		Модифицированность = Истина;


		
	ИначеЕсли ИмяОбновляемогоЭлемента = "ИмущественныеВычеты" Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НДФЛИмущественныеВычетыФизлицОбороты.КодВычетаИмущественный КАК КодВычета,
		|	НДФЛИмущественныеВычетыФизлицОбороты.РазмерПриход КАК РазмерВычета
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
		|		,
		|		,
		|		,
		|		Организация = &парамОрганизация
		|			И Физлицо = &парамФизлицо
		|			И Год = &пармаГод) КАК НДФЛИмущественныеВычетыФизлицОбороты";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("парамОрганизация", Ссылка.Организация);
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.УстановитьПараметр("пармаГод", Год(ТекущаяДата()));
		Выборка = Запрос.Выполнить().Выбрать();
		
		ТекстИмущественныйВычет = "";
		Пока Выборка.Следующий() Цикл
			ТекстИмущественныйВычет = ТекстИмущественныйВычет
			+ "Вычет: " + Выборка.КодВычета + ", размер: " + Выборка.РазмерВычета + ". ";
		КонецЦикла;	
		
		Если ПустаяСтрока(ТекстИмущественныйВычет) Тогда
			ИмущественныеВычеты = Формат(Год(ТекущаяДата()), "ЧГ=") + " год: Не применяются";
		Иначе
			ИмущественныеВычеты = Формат(Год(ТекущаяДата()), "ЧГ=") + " год: " + ТекстИмущественныйВычет;
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает изменения ЭУ ВыборФизлица
Процедура ОбработатьВыборФизлицаПриИзменении()

	//сбрасываем ссылку на физлицо, если выбрали - создавать новое физлицо
	Если Не ВыборФизлица И НЕ Физлицо.Пустая() Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	ИначеЕсли ВыборФизлица И Физлицо.Пустая() Тогда
		ФизлицоОбъект.Наименование = "";
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовФизлица();
	Наименование = ФизлицоОбъект.Наименование + " " + ПостфиксНаименования;
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
	УстановитьЗаголовокОткрытьСправочникФизлиц();
	мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	ПрочитатьФИО();

КонецПроцедуры // ОбработатьВыборФизлицаПриИзменении()

// Функция возвращает постфикс наименования, который соответствует виду договора
// Возвращаемое значение:
//   <Строка>   – постфикс наименования
//
Функция ПолучитьПостфиксПоВидуДоговора()

	НовыйПостфикс = "";
	
	Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		НовыйПостфикс ="(вн. совм.)"; 
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда
		НовыйПостфикс = "(осн.)";
	Иначе
		НовыйПостфикс = "(совм.)";
	КонецЕсли; 
	
	Возврат НовыйПостфикс;

КонецФункции // ПолучитьПостфиксПоВидуДоговора()

// Функция проверяет наличие в выборке из запроса постфикса, переданного
// в качестве параметра и если есть такой, пытается подобрать другой постфикс
// Параметры
//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
//                 <продолжение описания параметра>
//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
//
// Возвращаемое значение:
//   Строка   – подобранный постфикс наименования
//
Функция ПроверитьИПодобратьПостфикс(ПостфиксДляПроверки, ВыборкаИзЗапроса)

	НомПопытки = 1;
	НовыйПостфикс = ПостфиксДляПроверки;
	Пока Истина Цикл
		
		Если НомПопытки > 9 Тогда
			//выходи из цикла, не удалось автоматически подобрать постфикс
			НовыйПостфикс = "";
			Прервать;
		КонецЕсли;
		
		ВыборкаИзЗапроса.Сбросить();
		Если ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")Тогда
			НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";
			НомПопытки=НомПопытки + 1;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НовыйПостфикс;

КонецФункции // ПроверитьИПодобратьПостфикс()


// Процедура подбирает постфикс наименования перед записью нового сотрудника
Процедура ПодобратьПостфиксНаименования()
	
	//запросом выбираем Актуальных не уволенных сотрудников
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";
	
	Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
	Запрос.УстановитьПараметр("парамОрганизация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = ТекстЗапроса;
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаИзЗапроса.Количество()>0 Тогда
		//есть сотрудники по этому физлицу, необходимо подобрать постфикс
		// проверим, есть сотрудник с пустым постфиксом
		Если ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ПостфиксНаименования),"Постфикс")Тогда
			//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
			ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговора(), ВыборкаИзЗапроса);
			Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
				Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
			КонецЕсли;
		ИначеЕсли Не ПустаяСтрока(ПостфиксНаименования) Тогда	
			//проверим, может у сотрудника остался постфикс, который не соответствует виду договора
			ПостфиксПоВидуДоговра = ПолучитьПостфиксПоВидуДоговора();
			Если Лев(ПостфиксНаименования,СтрДлина(ПостфиксПоВидуДоговра)-1) <> Лев(ПостфиксПоВидуДоговра,СтрДлина(ПостфиксПоВидуДоговра)-1)Тогда
				//скорее всего текущий постфикс наименования не соответствует виду договора
				ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПостфиксПоВидуДоговра, ВыборкаИзЗапроса);
				Если Не ПустаяСтрока(ПостфиксНаименования) Тогда
					Наименование = СОКРЛП(ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодобратьПостфиксНаименования()

// Процедура проверяет какой вид занятости установить по умолчанию
Процедура ПроверитьИУстановитьВидЗанятости(НеЗадаватьВопрос = Истина)

	Если (ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы 
		или ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.Совместительство) и ЗначениеЗаполнено(Организация)
		и ЗначениеЗаполнено(Физлицо) Тогда
		//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
		// основное место работы или совместитель
		// и если есть установим вид занятости - Внутреннее совместительство
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|		,
		|		Организация = &парамОрганизация
		|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";
		
		Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);
		Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			НетПоддержкиВнутреннегоСовместительства = ЭлементыФормы.ВидЗанятости.ДоступныеЗначения.НайтиПоЗначению(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство) = Неопределено;
			
			Если НеЗадаватьВопрос Тогда
				Если НетПоддержкиВнутреннегоСовместительства Тогда
					ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
				Иначе	
					ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;
				КонецЕсли;
			Иначе 
				// проверим, есть поддержка внутреннего совместительства у организации
				Если НетПоддержкиВнутреннегоСовместительства Тогда
					//нет поддержки внутреннего совместительства
					ТекстПредупреждения = "В организации уже есть сотрудник """ + Выборка.ФизлицоНаименование + """ с видом занятости """ + Выборка.ВидЗанятости + """.
					|Для возможности создания сотрудника с видом занятости ""Внутреннее совместительство"" необходимо включить поддержку
					|внутреннего совместительства в параметрах учетной политики организации по персоналу";         

					Предупреждение(ТекстПредупреждения, 30);
					
				Иначе
					// спросим у пользователя, заменить вид занятости или нет
					ТекстВопроса = "В организации уже есть сотрудник """ + Выборка.ФизлицоНаименование + """ с видом занятости """ + Выборка.ВидЗанятости + """,
					|поменять вид занятости на ""Внутреннее совместительство""?";
					Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 20) = КодВозвратаДиалога.Да Тогда
						ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;	
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;	

КонецПроцедуры // ПроверитьИУстановитьВидЗанятости()

// Процедура обрабатывает изменение ЭУ физлицо
Процедура ОбработатьИзменениеФизлица()

	Если Физлицо.Пустая() Тогда
		Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
	Иначе
		ФизлицоОбъект = Физлицо.ПолучитьОбъект();
	КонецЕсли;
	
	Наименование = ФизлицоОбъект.Наименование + " " + ПостфиксНаименования;
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
	ПрочитатьФИО();

КонецПроцедуры // ОбработатьИзменениеФизлица()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	//Проверка источника кадровой информации
	ПроцедурыУправленияПерсоналом.УчетЗарплатыИКадровВоВнешнейПрограмме(Отказ, Ссылка, ЭтаФорма, ЭтоНовый());	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	мЭтоНовый = ЭтоНовый();

	Если мЭтоНовый Тогда
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация  = ОбщегоНазначения.ГоловнаяОрганизация(глЗначениеПеременной("ОсновнаяОрганизация"));
		КонецЕсли;
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
		
		Если Не Физлицо.Пустая() Тогда
			//если в форму передали физлицо
			ВыборФизлица  = Истина;
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
			Наименование = ФизлицоОбъект.Наименование + " " + ПостфиксНаименования;
			УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
			ПрочитатьФИО();
			ПроверитьИУстановитьВидЗанятости(Ложь);
		Иначе
			ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ВыборФизлица  = Ложь;
		КонецЕсли;
		
	Иначе //открываем существующий элемент справочника
		
		ФизлицоОбъект = Физлицо.ПолучитьОбъект();
		ЗаполнитьНаборыПоФизлицу();
		
		ОбновитьПредставлениеЭлемента("Гражданство");
		ОбновитьПредставлениеЭлемента("Инвалидность");
		ОбновитьПредставлениеЭлемента("СтандартныеВычеты");
		ОбновитьПредставлениеЭлемента("ИмущественныеВычеты");
		ОбновитьПредставлениеЭлемента("СтатусНалогоплательщика");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	
	Если мЭтоНовый Тогда
		
		УстановитьДоступностьРеквизитовФизлица();
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНовыйСотрудник;
		ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Ложь;
		
		УстановитьЗаголовокОткрытьСправочникФизлиц();
		
		Код = ПолучитьОчереднойТабельныйНомер();
		
	Иначе
		//продублируем стратегию нумерации для поля Код1
		ЭлементыФормы.Код1.ТолькоПросмотр = ЭлементыФормы.Код.ТолькоПросмотр;
		Если ЭлементыФормы.Код1.ТолькоПросмотр Тогда
			ЭлементыФормы.Код1.Подсказка = "Возможность редактирования Табельного № включается в меню ""Действия""";	
		Иначе
			ЭлементыФормы.Код1.Подсказка = "";
		КонецЕсли;
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаСотрудник;
		мЕстьНачисления = ЕстьНачисленияИлиПриемНаРаботу();
		ЭлементыФормы.Организация1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = мЕстьНачисления;
		ЭлементыФормы.РедактироватьФизлицоОтдельно1.Заголовок = "Более подробно о физическом лице " + ФизлицоОбъект.Наименование + "...";
		
		ПрочитатьЗначениеСевернойНадбавки();
		
		КадровыеДокументы.Отбор.Организация.Значение 		= Организация;
		КадровыеДокументы.Отбор.Организация.Использование 	= Истина;
		КадровыеДокументы.Отбор.ДокументыПоСотрудникуОрганизации.Значение 		= Ссылка;
		КадровыеДокументы.Отбор.ДокументыПоСотрудникуОрганизации.Использование 	= Истина;
		
		МестоРаботы.Отбор.Организация.Значение		= Организация;
		МестоРаботы.Отбор.Организация.Использование = Истина;
		МестоРаботы.Отбор.Сотрудник.Значение 		= Ссылка;
		МестоРаботы.Отбор.Сотрудник.Использование 	= Истина;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.Значение      = Перечисления.ПричиныИзмененияСостояния.Увольнение;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.ВидСравнения  = ВидСравнения.НеРавно;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.Использование = Истина;
		
	КонецЕсли;
	
	УстановитьДоступныеЗначениеВидЗанятости();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Отказ = Ложь;
	
	СписокНеЗаполненныхРеквизитов = Новый СписокЗначений;
	ОбнаруженыОшибки = Ложь;
	
	СрокаСообщенияОбОшибке = "";
	Если ЭтоНовый()Тогда // для нового сотрудника проверим возможность записи
		
		Актуальность  = Истина; //установим актуальность для нового сотрудника
		
		//если создаем новое физлицо, проверим заполнение реквизитов
		Если Не ВыборФизлица Тогда
			//необходимо создать новое физлицо, проверим реквизиты
			Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
				СписокНеЗаполненныхРеквизитов.Добавить(" Имя");
				ОбнаруженыОшибки = Истина;	
			КонецЕсли; 	
		Иначе
			Если Не ЗначениеЗаполнено(Физлицо) Тогда
				СрокаСообщенияОбОшибке = "Не выбрано физическое лицо!";
				ОбнаруженыОшибки = Истина;	
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	//проверим заполнение организации, вида занятости
	Если Не ЗначениеЗаполнено(Организация)  Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Организация");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидЗанятости) Тогда
		СписокНеЗаполненныхРеквизитов.Добавить(" Вид занятости");
		ОбнаруженыОшибки = Истина;
	КонецЕсли;
	
	Если ОбнаруженыОшибки Тогда
		Если Не ПустаяСтрока(СрокаСообщенияОбОшибке) Тогда
			Сообщить(СрокаСообщенияОбОшибке + Символы.ПС + "Элемент не записан!");
		КонецЕсли;
		Если СписокНеЗаполненныхРеквизитов.Количество()>0 Тогда
			Сообщить("Не заполнены реквизиты: " + СписокНеЗаполненныхРеквизитов + Символы.ПС + "Элемент не записан!");
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		Если Не ВыборФизлица Тогда
			//попытка записать новое физлицо
			Попытка
				ФизлицоОбъект.Записать();
				Физлицо = ФизлицоОбъект.Ссылка;
			Исключение
				ТекстСообщения = "Не удалось создать новое физлицо!";
				Сообщить(ТекстСообщения + Символы.ПС + "Элемент не записан!");
				Отказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	//запись не нового Сотрудника, проверим необходимость записи физлица
	Если Не мЭтоНовый и ФизлицоОбъект.Модифицированность() Тогда
		
		Попытка	
			ФизлицоОбъект.Заблокировать();
		Исключение
			ТекстСообщения = "Физическое лицо: " + ФизлицоОбъект + " - объект заблокирован." 
				+ Символы.ПС + "Элемент не записан!";
			ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщения, Отказ, , СтатусСообщения.ОченьВажное);	
			Возврат;
		КонецПопытки;
		
		ФизлицоОбъект.Записать();
		ФИО = Фамилия + " " + Имя + " " + Отчество;
		ПолныеПрава.ПроверитьДублиФизлиц(ФизлицоОбъект.Ссылка, , ФизлицоОбъект.ИНН, ФизлицоОбъект.СтраховойНомерПФР, ФИО);
				
	КонецЕсли;
	
	Если мЭтоНовый Тогда
		// запись в регистр ФИО, делаем только для нового сотрудника
		Если мНаборЗаписейФИО.Количество() = 0 Тогда
			ЗаписьНабора = мНаборЗаписейФИО.Добавить();
			ЗаписьНабора.Период		= ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');
			ЗаписьНабора.Фамилия	= Фамилия;
			ЗаписьНабора.Имя		= Имя;
			ЗаписьНабора.Отчество	= Отчество;
		КонецЕсли;
		
		Если мНаборЗаписейФИО.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период) Тогда
			мНаборЗаписейФИО[0].Физлицо = Физлицо;
			мНаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейФИО.Отбор.Физлицо.Значение			= мНаборЗаписейФИО[0].Физлицо;
			мНаборЗаписейФИО.Отбор.Период.Использование		= Истина;
			мНаборЗаписейФИО.Отбор.Период.Значение			= мНаборЗаписейФИО[0].Период;
			мНаборЗаписейФИО.Записать(Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если мНаборЗаписейГражданство.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
		мНаборЗаписейГражданство[0].Физлицо = Ссылка.Физлицо;
		
		мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
		мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
		мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
		мНаборЗаписейГражданство.Записать(Истина);
	КонецЕсли;
	
	// запись в регистр Сведения об инвалидности
	Если мНаборЗаписейИнвалидность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
		мНаборЗаписейИнвалидность[0].Физлицо = Ссылка.Физлицо;
		
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
		мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
		мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
		мНаборЗаписейИнвалидность.Записать(Истина);
	КонецЕсли;
	
	ЗаписатьПроцентСевернойНадбавки();

	
  //  // Обработка записи свойств и категорий
  //  ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
  //  Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

////	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
  //  Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
//	ПроцедурыУправленияПерсоналом.СинхронизироватьНаименованияСотрудников(Физлицо, Ссылка);
	
	Если мЭтоНовый Тогда
		
		ЭлементыФормы.ВыборФизлица.Доступность = Ложь;
		ЭлементыФормы.ВыборФизлица1.Доступность = Ложь;
		ЭлементыФормы.ОткрытьСправочникФизлиц.Доступность = Ложь;
	
	КонецЕсли;
	
	// Устанавливаем новое значение реквизиту только, если новый элемент был записан в первый раз
	// Это позволит избежать обновление встроенной справки при каждой записи элемента
	Если мЭтоНовый И НЕ НовыйЭлементЗаписан Тогда
		НовыйЭлементЗаписан = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы", ОтображатьСправкуФормы);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ФизическиеЛица") И ВыборФизлица Тогда
		Если Физлицо <> ЗначениеВыбора Тогда
			Физлицо = ЗначениеВыбора;
			ОбработатьИзменениеФизлица();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" и (Источник = ЭтаФорма Или Источник = Физлицо)  Тогда
		
		БалаМодифицированность = Модифицированность;
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента);
		Модифицированность = БалаМодифицированность или Ложь;

	ИначеЕсли ИмяСобытия = "ОбновитьДанныеОФизлице" Тогда
		
		Если НЕ Физлицо.Пустая() Тогда
			//пустое физлицо будет когда вводим нового сотрудника из из него открыли форму физлица
			БалаМодифицированность = Модифицированность;
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
			ПрочитатьФИО();
			ЗаполнитьНаборыПоФизлицу();
			ОбновитьПредставлениеЭлемента("Гражданство");
			ОбновитьПредставлениеЭлемента("Инвалидность");
			ОбновитьПредставлениеЭлемента("СтандартныеВычеты");
			ОбновитьПредставлениеЭлемента("ИмущественныеВычеты");
			ОбновитьПредставлениеЭлемента("СтатусНалогоплательщика");
			Модифицированность = БалаМодифицированность или Ложь;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьПредставлениеИмущественныхВычетов" Тогда
		
		БалаМодифицированность = Модифицированность;
		ОбновитьПредставлениеЭлемента("ИмущественныеВычеты");
		Модифицированность = БалаМодифицированность или Ложь;
		
	ИначеЕсли ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура УДФОткрыть(Кнопка)
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	Форма.УстановитьРеквизиты(Физлицо, "Основное", ТекущаяДата());
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ВыборФизлицаПриИзменении(Элемент)
	
	ОбработатьВыборФизлицаПриИзменении();
		
КонецПроцедуры

Процедура ОткрытьСправочникФизлицНажатие(Элемент)
	
	Если ВыборФизлица Тогда
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);
	Иначе
		ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуСписка(, ЭтаФорма);
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура НаименованиеФизлицаПриИзменении(Элемент)
	
	Наименование = ФизлицоОбъект.Наименование + " " + ПостфиксНаименования;
	
	ФИО = Элемент.Значение;
	Если ПустаяСтрока(Фамилия) ИЛИ ЭтоНовый() Тогда
		
		Фамилия  = ОбщегоНазначения.ВыделитьСлово(ФИО);
		Имя      = ОбщегоНазначения.ВыделитьСлово(ФИО);
		Отчество = ОбщегоНазначения.ВыделитьСлово(ФИО);
		
		Если ЗначениеЗаполнено(Отчество) Тогда
			ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно();
	
КонецПроцедуры

Процедура РедактироватьФизлицоОтдельноНажатие(Элемент)
	
	Форма = ФизлицоОбъект.ПолучитьФорму(, ЭтаФорма);
	Форма.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Организация
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	ПодобратьПостфиксНаименования();
	
КонецПроцедуры // ОрганизацияПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода Организация
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
		ПодобратьПостфиксНаименования();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияНачалоВыбора

Процедура ПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	мПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка,ФизлицоОбъект)	
	
КонецПроцедуры

Процедура ПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	мПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,ФизлицоОбъект)
	
КонецПроцедуры

Процедура ГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка 	= Ложь;
	ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);
	ФормаВвода.НаборЗаписей = мНаборЗаписейИнвалидность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура СтандартныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
		ФормаВвода.СправочникОбъект = ФизлицоОбъект;
		ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.СтатусНалогоплательщика.Видимость = Ложь;
		ФормаВвода.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура СтатусНалогоплательщикаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);
		ФормаВвода.СправочникОбъект = ФизлицоОбъект;
		ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.Доходы.Видимость = Ложь;
		ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты.Видимость = Ложь;
		ФормаВвода.ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
		ФормаВвода.Открыть();
	КонецЕсли;

	
КонецПроцедуры

Процедура ИмущественныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Если Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(НДФЛИмущественныеВычетыФизлиц.Регистратор КАК Документ.НДФЛПодтверждениеПраваНаИмущественныйВычет) КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
		|ГДЕ
		|	НДФЛИмущественныеВычетыФизлиц.Год = &парамГод
		|	И НДФЛИмущественныеВычетыФизлиц.ФизЛицо = &парамФизлицо
		|	И НДФЛИмущественныеВычетыФизлиц.Организация = &парамОрганизация
		|	И НДФЛИмущественныеВычетыФизлиц.ВидДвижения = &парамВидДвижения
		|	И НДФЛИмущественныеВычетыФизлиц.Регистратор ССЫЛКА Документ.НДФЛПодтверждениеПраваНаИмущественныйВычет";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("парамОрганизация", Организация);
		Запрос.УстановитьПараметр("парамФизлицо", Физлицо);
		Запрос.УстановитьПараметр("парамГод", Год(ТекущаяДата()));
		Запрос.УстановитьПараметр("парамВидДвижения", ВидДвиженияНакопления.Приход);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если НЕ Выборка.Следующий() Тогда
			//нет вычетов, откроем документ для регистрации
			ФормаДокумента = Документы.НДФЛПодтверждениеПраваНаИмущественныйВычет.ПолучитьФормуНовогоДокумента(,ЭтаФорма,);
			ФормаДокумента.НалоговыйПериод = Год(ТекущаяДата());
			ФормаДокумента.Организация = Организация;
			НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();
			НоваяСтрока.ФизЛицо  = ФизЛицо;
			НоваяСтрока.ДатаСобытия = ТекущаяДата();
			ФормаДокумента.Открыть();
		Иначе
			Документ = Выборка.Регистратор;
			ФормаДокумента = Документ.ПолучитьФорму("ФормаДокумента",ЭтаФорма,);
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), Тип("СправочникСсылка.Организации"));
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпингаОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпингаОрганизация, мТекстТайпингаОрганизация, мПоследнееЗначениеЭлементаТайпингаОрганизация, Ложь);
КонецПроцедуры

Процедура ФизлицоПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Физлицо) ИЛИ Физлицо <> ФизлицоОбъект.Ссылка Тогда
		ОбработатьИзменениеФизлица();
		ПодобратьПостфиксНаименования();
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидЗанятостиПриИзменении(Элемент)
	
	ПроверитьИУстановитьВидЗанятости(Ложь);
	ПодобратьПостфиксНаименования();
	
КонецПроцедуры

Процедура КадровыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		ДокументОбъект = ЭлементыФормы.КадровыеДокументы.ТекущиеДанные.Ссылка.ПолучитьОбъект();	
		ФормаДокумента = ДокументОбъект.ПолучитьФорму();
		Если ДокументОбъект.Метаданные().Имя = "ПриемНаРаботуВОрганизацию" Тогда
			ФормаДокумента.ОтключитьПомощника = Истина;
			ДокументОбъект.ВведенКопированием = Истина;
		КонецЕсли;
		ФормаДокумента.Открыть();		
		
	Иначе
		
		КартинкаДокумента = БиблиотекаКартинок.ДокументОбъект;
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить("ПриемНаРаботуВОрганизацию", "Прием на работу",,КартинкаДокумента);	
		СписокДокументов.Добавить("КадровоеПеремещениеОрганизаций", "Кадровое перемещение",,КартинкаДокумента);	
		СписокДокументов.Добавить("УвольнениеИзОрганизаций", "Увольнение",,КартинкаДокумента);	
		ЭлементСписка = СписокДокументов.ВыбратьЭлемент("Выбор вида документа");
		Если ЭлементСписка <> Неопределено Тогда
			ВидДокумента = ЭлементСписка.Значение;
			Если Не ПравоДоступа("Добавление", Метаданные.Документы[ВидДокумента]) Тогда
				Предупреждение("Нарушение прав доступа!");
				Возврат;
			КонецЕсли;
			
			ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
			ДокументОбъект.РаботникиОрганизации.Очистить();
			
			ДокументОбъект.Заполнить(ЭтотОбъект.Ссылка);
			
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			Если ВидДокумента = "ПриемНаРаботуВОрганизацию" Тогда
				ФормаДокумента.ОтключитьПомощника = Истина;
			КонецЕсли;
			ФормаДокумента.Открыть();		
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();

мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();

мОбработкаТайпинга					= Ложь;
мТекстТайпинга						= "";
мПоследнееЗначениеЭлементаТайпинга	= Неопределено;
мОбработкаТайпингаОрганизация					= Ложь;
мТекстТайпингаОрганизация						= "";
мПоследнееЗначениеЭлементаТайпингаОрганизация	= Неопределено;

