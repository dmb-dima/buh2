Перем мСтруктураРедактированияКИ;
Перем мОбъектКИ;
Перем мКопияНабораКонтактнойИнформации;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Права);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительПрава);
	КонецЕсли;
	
	ОбновитьКИ();

КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		ОсновнойБанковскийСчет	= Неопределено;
		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ВидСтавокЕСНиПФР		= Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
			// {УчетДоходовИРасходовИП
			ЮрФизЛицо				= ?(Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя, Перечисления.ЮрФизЛицо.ФизЛицо, Перечисления.ЮрФизЛицо.ЮрЛицо);
			// }УчетДоходовИРасходовИП
			ВидОбменаСКонтролирующимиОрганами	= Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
		КонецЕсли;
		
		ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование;
		
	КонецЕсли;
	
	// {ОбособленныеПодразделения
	// Установка списка выбора головных организаций
	ЭлементыФормы.ГоловнаяОрганизация.СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	// Исключим редактируемую организацию из списка головных
	НайдЭлемент = ЭлементыФормы.ГоловнаяОрганизация.СписокВыбора.НайтиПоЗначению(Ссылка);
	Если НайдЭлемент <> Неопределено Тогда
		ЭлементыФормы.ГоловнаяОрганизация.СписокВыбора.Удалить(НайдЭлемент);
	КонецЕсли;
	// }ОбособленныеПодразделения 
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);

	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "Привязка учетной записи к организации" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		Если НЕ ТолькоПросмотр И Параметр.Свойство("Организация") И Параметр.Свойство("УчетнаяЗапись") И Параметр.Организация = Ссылка Тогда
			ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате;
			УчетнаяЗаписьОбмена = Параметр.УчетнаяЗапись;
			Параметр.Вставить("ОповещениеОтработано", Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПослеЗаписи"
//
Процедура ПослеЗаписи()
	
	ЗаполнениеУчетнойПолитикиПоПерсоналуОрганизации();
	ПолныеПрава.УстановитьПараметрГраницыЗапретаИзмененияДанных();
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
	
	РаботаСДиалогами.УстановитьЗаголовокСистемыПриИзмененииОсновнойОрганизации();
	
	Оповестить("Изменение организации", Ссылка);
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
	
	Если ТипЗнч(мОбъектКИ) = Тип("СправочникСсылка.Организации") Тогда
		мОбъектКИ = Ссылка;
	КонецЕсли;
	
	Если мОбъектКИ <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ, мКопияНабораКонтактнойИнформации);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// {ОбособленныеПодразделения

// Обработчик события "ПриИзменении" реквизита ГоловнаяОрганизация
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ИНН = ГоловнаяОрганизация.ИНН;
	КонецЕсли;
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// }ОбособленныеПодразделения 

// Обработчик события НачалоВыбора элемента формы ОсновнойБанковскийСчет.
//
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

// Процедура определяет текущий объект для отображения контактной информации
// и выводит контактную информацию для объекта в табличное поле КонтактнаяИнформация.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьКИ()
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
			ОбъектКИ = Неопределено;
		Иначе
			ОбъектКИ = ИндивидуальныйПредприниматель;
		КонецЕсли;
	Иначе
		Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ОбъектКИ = ПараметрОбъектКопирования;
		Иначе
			ОбъектКИ = Ссылка;
		КонецЕсли;
	Конецесли;
	
	Если ОбъектКИ = мОбъектКИ Тогда
		Возврат;
	Иначе
		мОбъектКИ = ОбъектКИ;
	КонецЕсли;
	
	Если ОбъектКИ = Неопределено Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация.Видимость = Ложь;
	Иначе		
		ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация.Видимость = Истина;
		ОбновитьДанныеКИ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеКИ()

	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
	мКопияНабораКонтактнойИнформации = УправлениеКонтактнойИнформацией.СоздатьКопиюНабораЗаписейКонтактнойИнформацииОбъекта(НаборКонтактнойИнформации);
	
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, ЭтаФорма.ТолькоПросмотр);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);

КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеСокращенное) Тогда
		НаименованиеСокращенное = Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеПлательщикаПриПеречисленииВБюджет) Тогда
		НаименованиеПлательщикаПриПеречисленииВБюджет = Наименование;
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИностраннаяОрганизация.
//
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов управления формы 
// в зависимости от значений реквизитов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеВидимостьюИДоступностьюЭлементовФормы()

	ЭлементыФормы.ЮрФизЛицо.Доступность = Ложь;
	// {УчетДоходовИРасходовИП
	ЭлементыФормы.ЮрФизЛицо.Доступность = (НЕ Константы.ПрименяемыеСистемыНалогообложения.Получить() = Перечисления.ПрименяемыеСистемыНалогообложения.НДФЛИндивидуальногоПредпринимателя);
	// }УчетДоходовИРасходовИП
	
	ЭтоФизЛицо = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);

	ЭлементыФормы.КПП.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьКПП.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.КодОКОНХ.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьКодОКОНХ.Видимость = НЕ ЭтоФизЛицо;
	
	// {ОбособленныеПодразделения
	ЭлементыФормы.ГоловнаяОрганизация.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьГоловнаяОрганизация.Видимость = НЕ ЭтоФизЛицо;
	// }ОбособленныеПодразделения 

	ЭлементыФормы.ДатаРегистрации.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьДатаРегистрации.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.РамкаГруппыОрганВыдавшийСвидетельство.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьСвидетельствоКодОргана.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьСвидетельствоНаименованиеОргана.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.СвидетельствоКодОргана.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.СвидетельствоНаименованиеОргана.Видимость = НЕ ЭтоФизЛицо;

	ЭлементыФормы.ИндивидуальныйПредприниматель.Видимость = ЭтоФизЛицо;
	ЭлементыФормы.НадписьИндивидуальныйПредприниматель.Видимость = ЭтоФизЛицо;
	
	ЭлементыФормы.НадписьОГРН.Заголовок = ?(ЭтоФизЛицо, "ОГРНИП:", "ОГРН:");
	ЭлементыФормы.РамкаГруппыСвидетельствоОПостановке.Заголовок = ?(ЭтоФизЛицо, "Свидетельство о государственной регистрации", "Свидетельство о постановке на учет в налоговом органе");

	Если ЭтоФизЛицо Тогда
		ЭлементыФормы.ИНН.Доступность = Ложь;
		ЭлементыФормы.НадписьИНН.Доступность = Ложь;
		ЭлементыФормы.ДополнительныйКодФСС.Видимость = Ложь;
		ЭлементыФормы.НадписьДополнительныйКодФСС.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ИНН.Доступность = НЕ ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.НадписьИНН.Доступность = НЕ ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.ДополнительныйКодФСС.Видимость = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.НадписьДополнительныйКодФСС.Видимость = ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ИностраннаяОрганизация.Видимость = ИностраннаяОрганизация;
	
	ЭлементыФормы.ПанельОбменПоБесспецоператорнойСхеме.Доступность = (ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	ЭлементыФормы.ПанельОбменЧерезСпринтер.Доступность = (ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	ОбновитьКИ();
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИндивидуальныйПредприниматель.
//
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		ИНН = ИндивидуальныйПредприниматель.ИНН;
	КонецЕсли;
	ОбновитьКИ();
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ИндивидуальныйПредприниматель.
//
Процедура ИндивидуальныйПредпринимательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ДействияФормыПрава(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ СО СВЕДЕНИЯМИ ОБ ИМНС

Процедура РегистрацияВИФНСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
	
		Ответ = Вопрос("Сначала организация должна быть записана. Записать?", РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат;
		КонецЕсли;
		ЗаписатьВФорме();
		
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("...<   Добавить сведения о регистрации в ИФНС   >...", "");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Ссылка));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияВИФНС.Ссылка,
	|	РегистрацияВИФНС.Владелец,
	|	РегистрацияВИФНС.Код,
	|	РегистрацияВИФНС.Наименование,
	|	РегистрацияВИФНС.КПП
	|ИЗ
	|	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	|ГДЕ
	|	РегистрацияВИФНС.Владелец = &Организация" ;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		Элемент.СписокВыбора.Добавить(СтрокаЗапроса.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияВИФНСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "...<   Добавить сведения о регистрации в ИФНС   >..." Тогда
		НовыйОбъект = Справочники.РегистрацияВИФНС.СоздатьЭлемент();
		ФормаЭлемента = НовыйОбъект.ПолучитьФорму(, ЭтаФорма);
		ФормаЭлемента.ЭлементыФормы.Владелец.Доступность = Ложь;
		ФормаЭлемента.ЭлементыФормы.Владелец.Значение = ОбщегоНазначения.ГоловнаяОрганизация(Ссылка);
		ФормаЭлемента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияВИФНСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РегистрацияВИФНСПриИзменении(Элемент = "")
	
	КПП              = РегистрацияВИФНС.КПП;
	КодИМНС          = РегистрацияВИФНС.Код;
	НаименованиеИМНС = РегистрацияВИФНС.НаименованиеИФНС;
	КодПоОКАТО       = РегистрацияВИФНС.КодПоОКАТО;
	
КонецПроцедуры

Процедура РегистрацияВИФНСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	ЭлементыФормы.РегистрацияВИФНС.Значение = Объект;
	РегистрацияВИФНСПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ СВЯЗАННЫЕ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.ФизическиеЛица;
		ВидДругаяИнформация = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияФизЛица;
	Иначе
		ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.Организации;
		ВидДругаяИнформация = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации;
	КонецЕсли;
	
	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			ВидОбъектаКИ,
			Новый Действие("НажатиеДопКнопкиКИ"),
			НаборКонтактнойИнформации,
			ЭлементыФормы.ОсновнаяПанель,
			ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация,
			Неопределено,
			ЭлементыФормы.ПолеВводаПрочаяКИ,
			ВидДругаяИнформация,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ2, Неопределено, ЭлементыФормы.ПолеКИ2);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ3, Неопределено, ЭлементыФормы.ПолеКИ3);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ4, Неопределено, ЭлементыФормы.ПолеКИ4);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ5, Неопределено, ЭлементыФормы.ПолеКИ5);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ6, Неопределено, ЭлементыФормы.ПолеКИ6);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ7, Неопределено, ЭлементыФормы.ПолеКИ7);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ8, Неопределено, ЭлементыФормы.ПолеКИ8);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Дополнительные кнопки в кнопках КИ
Процедура НажатиеДопКнопкиКИ(Кнопка)
	УправлениеКонтактнойИнформацией.НажатиеДопКнопкиКИ(мСтруктураРедактированияКИ, Кнопка, ЭтаФорма);
КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При изменении прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаПрочаяКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

Процедура КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(Кнопка)
	УправлениеКонтактнойИнформацией.КонтекстноеМенюПолейВводаПрочейКИСкопироватьИз(мСтруктураРедактированияКИ, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура НадписьПараметрыИнтеграцииНажатие(Элемент)
	
	РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаПараметрыИнтеграцииСоСпринтером", ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры

Процедура ПереключательВидОбменаПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура НадписьСтраницаПилотногоПроектаНажатие(Элемент)
	
	АдресСтраницы = "http://www.v8.1c.ru/buhv8/18/187.htm";
	ЗапуститьПриложение(АдресСтраницы);
	
КонецПроцедуры

Процедура КнопкаНастроитьПараметрыОтправкиНажатие(Элемент)
	Запись = РегистрыСведений.НастройкиОбменаФСС.СоздатьМенеджерЗаписи();
	Запись.Организация = Ссылка;
	Запись.Прочитать();
	Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
		Запись.Организация = Ссылка;
	КонецЕсли;
	ФормаЗаписи = Запись.ПолучитьФорму();
	ФормаЗаписи.Открыть();
КонецПроцедуры