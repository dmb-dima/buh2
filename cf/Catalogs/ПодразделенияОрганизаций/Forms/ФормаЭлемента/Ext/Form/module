Перем мОбработкаТайпингаВидаКИ;
Перем мТекстТайпингаВидаКИ;
Перем мПоследнееЗначениеЭлементаТайпингаВидаКИ;

Перем мСтруктураРедактированияКИ;

Перем мОбъектКИ;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура вызывается при изменении флага "Обособленное подразделение"
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
	
	//проверка на установку флага у необособленного подразделения
	Если НЕ ЭтоНовый() Тогда
		Если Элемент <> "" Тогда
			Если Элемент.Значение = Истина Тогда
				Если ЕстьПодчиненныеЭлементы(Истина) Тогда
					Элемент.Значение = Ложь;
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ОбособленноеПодразделение);
	
	Если ОбособленноеПодразделение Тогда
		ОбновитьКИ();
		ОбновитьИнформациюОбответственныхЛицах();
		РегистрацияВИФНСПриИзменении("");
		УстановитьДоступность();
	Иначе
		ОчиститьРеквизиты();
	КонецЕсли;
	
КонецПроцедуры

//Процедура вызывается при снятии флага "Обособленное подразделение"
Процедура ОчиститьРеквизиты()
	
	КПП = "";
	КодИМНС = "";
	НаименованиеИМНС = "";
	КодПоОКАТО = "";
	НаименованиеПолное = "";
	Префикс = "";
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
			
КонецПроцедуры           

//Процедура отвечает за отображение дополнительной информации для обособленного подразделения
Процедура ИзменитьВидимостьПанелиПоВертикали(Форма, ОтображатьПанель)
	
	ЭлементыФормы.ПанельОбособленноеПодразделение.ТекущаяСтраница = ЭлементыФормы.ПанельОбособленноеПодразделение.Страницы.ОсновныеСведения;
	
	ОсновнаяПанель	= Форма.ЭлементыФормы.ОсновнаяПанель;
	мПанель			= Форма.ЭлементыФормы.ПанельОбособленноеПодразделение;
	
	Если ОтображатьПанель Тогда
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
			мПанель.Свертка = РежимСверткиЭлементаУправления.Нет;
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ОсновнаяПанель, ГраницаЭлементаУправления.Низ);
		КонецЕсли;
		
		Форма.Высота = 400;
		
	Иначе
		Если мПанель.Свертка = РежимСверткиЭлементаУправления.Нет Тогда
			мПанель.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
			мПанель.Свертка = РежимСверткиЭлементаУправления.Верх;
		КонецЕсли;
		
		Форма.Высота = 140;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

//Процедура вызывается перед открытии формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Владелец.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
		И ОбособленноеПодразделение Тогда
		ОбновитьКИ();
		ОбновитьИнформациюОбответственныхЛицах();
		УстановитьДоступность();
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

//Процедура вызывается при открытии формы
Процедура ПриОткрытии()
	
	Если Владелец.ЮрФизЛицо <> Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		ЭлементыФормы.ОбособленноеПодразделение.Видимость = Ложь;
		ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, Ложь);
	Иначе
		ЭлементыФормы.ОбособленноеПодразделение.Видимость = Истина;
		ИзменитьВидимостьПанелиПоВертикали(ЭтаФорма, ОбособленноеПодразделение);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	Если ЭтоНовый() 
		И Владелец.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если ЗначениеЗаполнено(Родитель) Тогда
			РегистрацияВИФНС = Родитель.РегистрацияВИФНС;
			НаименованиеПолное = Родитель.НаименованиеПолное;
			Префикс = Родитель.Префикс;
			ОбособленноеПодразделение = Родитель.ОбособленноеПодразделение;
			КодПоОКАТО = Родитель.КодПоОКАТО;
			ОбособленноеПодразделениеПриИзменении("");
		Иначе
			РегистрацияВИФНС = "";
			НаименованиеПолное ="";
			Префикс = "";
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступность();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(Ссылка));
	
КонецПроцедуры

// Процедура вызывается при записи элемента справочника
Процедура ПриЗаписи(Отказ)
	
	Если Владелец.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо 
		И ОбособленноеПодразделение Тогда
		
		Если ТипЗнч(мОбъектКИ) = Тип("СправочникСсылка.ПодразделенияОрганизаций") И НЕ ЗначениеЗаполнено(мОбъектКИ) Тогда
			мОбъектКИ = Ссылка;
		КонецЕсли;
		
		Если мОбъектКИ <> Неопределено Тогда
			УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);
		КонецЕсли;
		
		ЗаписатьИнформациюОбответственныхЛицах();
		
	КонецЕсли;
	
	Если НЕ ОбособленноеПодразделение И ЗначениеЗаполнено(РегистрацияВИФНС) Тогда
			РегистрацияВИФНС = "";
			НаименованиеПолное = "";
			Префикс = "";
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = Ссылка Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ СО СВЕДЕНИЯМИ ОБ ИМНС

Процедура РегистрацияВИФНСНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("...<   Добавить сведения о регистрации в ИФНС   >...", "");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Организация", ОбщегоНазначения.ГоловнаяОрганизация(Владелец));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрацияВИФНС.Ссылка,
	|	РегистрацияВИФНС.Владелец,
	|	РегистрацияВИФНС.Код,
	|	РегистрацияВИФНС.Наименование,
	|	РегистрацияВИФНС.КПП
	|ИЗ
	|	Справочник.РегистрацияВИФНС КАК РегистрацияВИФНС
	|ГДЕ
	|	РегистрацияВИФНС.Владелец = &Организация" ;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		Элемент.СписокВыбора.Добавить(СтрокаЗапроса.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура РегистрацияВИФНСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = "...<   Добавить сведения о регистрации в ИФНС   >..." Тогда
		НовыйОбъект = Справочники.РегистрацияВИФНС.СоздатьЭлемент();
		ФормаЭлемента = НовыйОбъект.ПолучитьФорму(, ЭтаФорма);
		ФормаЭлемента.ЭлементыФормы.Владелец.Доступность = Ложь;
		ФормаЭлемента.ЭлементыФормы.Владелец.Значение = ОбщегоНазначения.ГоловнаяОрганизация(Владелец);
		ФормаЭлемента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрацияВИФНСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РегистрацияВИФНСПриИзменении(Элемент)
	
	КПП              = РегистрацияВИФНС.КПП;
	КодИМНС          = РегистрацияВИФНС.Код;
	НаименованиеИМНС = РегистрацияВИФНС.НаименованиеИФНС;
	КодПоОКАТО       = РегистрацияВИФНС.КодПоОКАТО;
	
КонецПроцедуры

Процедура РегистрацияВИФНСНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.РегистрацияВИФНС") Тогда
		ЭлементыФормы.РегистрацияВИФНС.Значение = Объект.Ссылка;
		РегистрацияВИФНСПриИзменении("");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ И ПРОЦЕДУРЫ СВЯЗАННЫЕ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ
// Процедура определяет текущий объект для отображения контактной информации
// и выводит контактную информацию для объекта в табличное поле КонтактнаяИнформация.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьКИ()
	
	Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
		ОбъектКИ = ПараметрОбъектКопирования;
	Иначе
		ОбъектКИ = Ссылка;
	КонецЕсли;
	
	Если ОбъектКИ = мОбъектКИ Тогда
		Возврат;
	Иначе
		мОбъектКИ = ОбъектКИ;
	КонецЕсли;
	
	Если ОбъектКИ = Неопределено Тогда
		ЭлементыФормы.ПанельОбособленноеПодразделение.Страницы.КонтактнаяИнформация.Видимость = Ложь;
	Иначе		
		ЭлементыФормы.ПанельОбособленноеПодразделение.Страницы.КонтактнаяИнформация.Видимость = Истина;
		ОбновитьДанныеКИ();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеКИ()

	УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
	
	ПодготовкаКОтображениюКИ();
	ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
	
	УправлениеКонтактнойИнформацией.ОтобразитьЭлементыВводаКИ(мСтруктураРедактированияКИ, ЭтаФорма.ТолькоПросмотр);
	УправлениеКонтактнойИнформацией.ЗаполнитьЗначенияКИ(мСтруктураРедактированияКИ);

КонецПроцедуры

// Подготовить необходимые данные для отображения элементов контактной информации
Процедура ПодготовкаКОтображениюКИ()

	ВидОбъектаКИ = Перечисления.ВидыОбъектовКонтактнойИнформации.ПодразделенияОрганизаций;
	ВидДругаяИнформация = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияПодразделенияОрганизации;
	
	мСтруктураРедактированияКИ = УправлениеКонтактнойИнформацией.ПодготовитьСтруктуруДляОтображенияКИ(
			ВидОбъектаКИ,
			Новый Действие("НажатиеДопКнопкиКИ"),
			НаборКонтактнойИнформации,
			ЭлементыФормы.ПанельОбособленноеПодразделение,
			ЭлементыФормы.ПанельОбособленноеПодразделение.Страницы.КонтактнаяИнформация,
			Неопределено,
			ЭлементыФормы.ПолеВводаПрочаяКИ,
			ВидДругаяИнформация,
			Неопределено,
			Ложь
		);
	
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ1, Неопределено, ЭлементыФормы.ПолеКИ1);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ2, Неопределено, ЭлементыФормы.ПолеКИ2);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ3, Неопределено, ЭлементыФормы.ПолеКИ3);
	УправлениеКонтактнойИнформацией.ДобавитьКнопкуИПоле(мСтруктураРедактированияКИ, ЭлементыФормы.НадписьКИ4, Неопределено, ЭлементыФормы.ПолеКИ4);
	
КонецПроцедуры

// Обработчик проверяющий смену текущего элемента на форме
Процедура ПроверитьСменуТекущегоЭлементаДляКИ()

	Если Не мСтруктураРедактированияКИ.ОткрытаФормаРедактирования Тогда
		ПодключитьОбработчикОжидания("ПроверитьСменуТекущегоЭлементаДляКИ", 0.1, Истина);
		УправлениеКонтактнойИнформацией.ОбработатьПроверкуСменыТекущегоЭлемента(мСтруктураРедактированияКИ, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ

// Дополнительные кнопки в кнопках КИ
Процедура НажатиеДопКнопкиКИ(Кнопка)
	УправлениеКонтактнойИнформацией.НажатиеДопКнопкиКИ(мСтруктураРедактированияКИ, Кнопка, ЭтаФорма);
КонецПроцедуры

// При изменении в поле ввода КИ
Процедура ПолеВводаКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При начале выбора в поле ввода КИ
Процедура ПолеВводаКИНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИНачалоВыбора(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка, ЭтаФорма);
КонецПроцедуры

// При открытии в поле ввода КИ
Процедура ПолеВводаКИОткрытие(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОткрытие(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

// При изменении прочей КИ
Процедура ПолеВводаПрочаяКИПриИзменении(Элемент)
	УправлениеКонтактнойИнформацией.ПолеВводаПрочаяКИПриИзменении(мСтруктураРедактированияКИ, Элемент);
КонецПроцедуры

// При очистке в поле ввода КИ
Процедура ПолеВводаКИОчистка(Элемент, СтандартнаяОбработка)
	УправлениеКонтактнойИнформацией.ПолеВводаКИОчистка(мСтруктураРедактированияКИ, Элемент, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С ОТВЕТСТВЕННЫМИ ЛИЦАМИ
Процедура УстановитьДоступность()
	
	Если ОбособленноеПодразделение Тогда
		
		Если ЗначениеЗаполнено(Родитель) Тогда
			ЭлементыФормы.ОбособленноеПодразделение.Доступность = НЕ Родитель.ОбособленноеПодразделение;
		Иначе
			ЭлементыФормы.ОбособленноеПодразделение.Доступность = Истина;
		КонецЕсли;
		
		ЭлементыФормы.РуководительДолжность.ТолькоПросмотр		= НЕ ЗначениеЗаполнено(ЭлементыФормы.Руководитель.Значение);
		ЭлементыФормы.ГлавныйБухгалтерДолжность.ТолькоПросмотр	= НЕ ЗначениеЗаполнено(ЭлементыФормы.ГлавныйБухгалтер.Значение);
		ЭлементыФормы.КассирДолжность.ТолькоПросмотр			= НЕ ЗначениеЗаполнено(ЭлементыФормы.Кассир.Значение);
	Иначе
		Если ЭтоНовый() Тогда
			ЭлементыФормы.ОбособленноеПодразделение.Доступность = Истина;
		Иначе
			ЭлементыФормы.ОбособленноеПодразделение.Доступность = НЕ ЕстьПодчиненныеЭлементы();
		КонецЕсли;
	КонецЕсли;
	
Конецпроцедуры

//Процедура-обработчик очисти значения ответственного лица
Процедура ОтветственноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ЭлементыФормы[Элемент.Имя + "Должность"].Значение = "";
	ЭлементыФормы[Элемент.Имя + "Должность"].ТолькоПросмотр = Истина;
	
КонецПроцедуры

//Процедура-обработчик изменения ответственного лица
Процедура ОтветственноеЛицоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ЭлементыФормы[Элемент.Имя + "Должность"].Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОтветственногоЛица = ОбщегоНазначения.ДанныеФизЛица(Владелец, Элемент.Значение, ТекущаяДата());
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы[Элемент.Имя + "Должность"].Значение) Тогда
		ЭлементыФормы[Элемент.Имя + "Должность"].Значение = ДанныеОтветственногоЛица.Должность;
	КонецЕсли;
	
	ЭлементыФормы[Элемент.Имя + "Должность"].ТолькоПросмотр = НЕ ЗначениеЗаполнено(Элемент.Значение);
	
КонецПроцедуры



//Процедура отображает информацию об ответственных лицах организации
Процедура ОбновитьИнформациюОбответственныхЛицах()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущееПодразделение", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ОтветственноеЛицо,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&ДатаСреза, ) КАК ОтветственныеЛицаОрганизацийСрезПоследних
	|ГДЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.СтруктурнаяЕдиница = &ТекущееПодразделение";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаЗапроса ИЗ РезультатЗапроса Цикл
		Если СтрокаЗапроса.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Руководитель Тогда
			Руководитель = СтрокаЗапроса.ФизическоеЛицо;
			РуководительДолжность = СтрокаЗапроса.Должность;
		ИначеЕсли СтрокаЗапроса.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер Тогда
			ГлавныйБухгалтер = СтрокаЗапроса.ФизическоеЛицо;
			ГлавныйБухгалтерДолжность = СтрокаЗапроса.Должность;
		ИначеЕсли СтрокаЗапроса.ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций.Кассир Тогда
			Кассир = СтрокаЗапроса.ФизическоеЛицо;
			КассирДолжность = СтрокаЗапроса.Должность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедура записывает информацию об ответственных лицах организации
Процедура ЗаписатьИнформациюОбответственныхЛицах()
	
	ЗаписатьИнформациюОбответственныхЛице("Руководитель");
	ЗаписатьИнформациюОбответственныхЛице("ГлавныйБухгалтер");
	ЗаписатьИнформациюОбответственныхЛице("Кассир");
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОбответственныхЛице(НаименованиеОтветственногоЛица)
	
	Отбор = Новый Структура("СтруктурнаяЕдиница, ОтветственноеЛицо");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	ОтветственноеЛицо = Перечисления.ОтветственныеЛицаОрганизаций[НаименованиеОтветственногоЛица];
	Отбор.ОтветственноеЛицо = ОтветственноеЛицо;
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата(), Отбор);

	Если СрезПоследних.Количество() < 1 Тогда
		Если НЕ ЗначениеЗаполнено(ЭлементыФормы[НаименованиеОтветственногоЛица].Значение) Тогда
			Возврат;
		Иначе
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы[НаименованиеОтветственногоЛица + "Должность"].Значение) Тогда
				Возврат;
			Иначе
				ПериодЗаписи = '19800101';
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭлементыФормы[НаименованиеОтветственногоЛица].Значение = СрезПоследних[0].ФизическоеЛицо Тогда
			Если ЭлементыФормы[НаименованиеОтветственногоЛица + "Должность"].Значение = СрезПоследних[0].Должность Тогда
				Возврат
			Иначе
				ПериодЗаписи = НачалоДня(ТекущаяДата());
			КонецЕсли;
		Иначе
			ПериодЗаписи = НачалоДня(ТекущаяДата());
		КонецЕсли;
	КонецЕсли;
	
	Запись = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
	Запись.Период 				= ПериодЗаписи;
	Запись.ОтветственноеЛицо 	= ОтветственноеЛицо;
	Запись.СтруктурнаяЕдиница 	= Ссылка;
	Запись.ФизическоеЛицо 		= ЭлементыФормы[НаименованиеОтветственногоЛица].Значение;
	Запись.Должность 	  		= ЭлементыФормы[НаименованиеОтветственногоЛица + "Должность"].Значение;
	Запись.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С ПРОСМОТРОМ ИСТОРИИ

Процедура КнопкаИсторияНажатие(Элемент)
	
	Отказ = Ложь;
	
	Если ЭтоНовый() Тогда
		Вопрос = "Перед просмотром истории необходимо записать элемент. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Отказ = Не ЗаписатьВФорме();
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьФормуСписка();
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Значение = Ссылка;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.ВидСравнения = ВидСравнения.Равно;
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Использование = Истина;
		
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
		
		ФормаРегистра.Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМ СВЯЗАННЫХ С ИЗМЕНЕНИЕМ ГРУППЫ

//Процедура-обработчик смены группы 
//перезаписывается реквизит Регистрация в ИФНС
Процедура РодительПриИзменении(Элемент)
	
	Если Владелец.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо Тогда
		Если ЗначениеЗаполнено(Родитель) Тогда
			РегистрацияВИФНС = Родитель.РегистрацияВИФНС;
		Иначе
			РегистрацияВИФНС = "";
		КонецЕсли;
		Если ОбособленноеПодразделение Тогда
			РегистрацияВИФНСПриИзменении("");
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

//Запрещаем в подчинение обособленному подразделению передавать необособленные
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаИзмененияРодителя(ВыбранноеЗначение, СтандартнаяОбработка);
	СтандартнаяОбработка = НЕ СтандартнаяОбработка;
	
КонецПроцедуры

//Выбираем все подчиненные элементы и если где-то есть удовлетворяющие
//условию (отсутствие флага Обособленное подразделение, возвращаем Истина
Функция ЕстьПодчиненныеЭлементы(Сообщать = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", Ссылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Родитель,
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель В ИЕРАРХИИ(&Родитель)
	|	И ПодразделенияОрганизаций.ОбособленноеПодразделение = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		Если Сообщать Тогда
			ОбщегоНазначения.СообщитьОбОшибке("В подчинении текущего подразделения есть необособленные подразделения.",,, СтатусСообщения.Важное);
			ОбщегоНазначения.СообщитьОбОшибке("В группу обособленных подразделений может входить только обособленное подразделение.",,, СтатусСообщения.Информация);
		конецЕсли;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции



