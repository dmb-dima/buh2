////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает типы субконто при изменении счета
//
// Параметры
//  Счет  – <ПланыСчетов. .Ссылка> – Счет изменившийся
//  Суффикс- <Строка> – Суффикс реквизитов
//
Процедура ПриИзмененииСчета()

	ВидыСубконтоСчета = СчетДтНУ.ВидыСубконто;

	Для НомерСубконто = 1 По 3 Цикл
		Если НомерСубконто <= ВидыСубконтоСчета.Количество() И ЗначениеЗаполнено(СчетДтНУ) И
			ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЭтаФорма["СубконтоДтНУ" + НомерСубконто])) Тогда
			// Без изменений.
		ИначеЕсли НомерСубконто <= ВидыСубконтоСчета.Количество() Тогда
			ЭтаФорма["СубконтоДтНУ" + НомерСубконто] = Новый(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто.ТипЗначения.Типы()[0]);
		ИначеЕсли ЭтаФорма["СубконтоДтНУ" + НомерСубконто] <> Неопределено Тогда
			ЭтаФорма["СубконтоДтНУ" + НомерСубконто] = Неопределено;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПриИзмененииСчета()

Процедура УстановитьВидимостьСубконто()
	
	ВидыСубконтоСчета = СчетДтНУ.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	Для НомерСубконто = 1 По 3 Цикл
		
		Если НомерСубконто <= КоличествоСубконто И ЗначениеЗаполнено(СчетДтНУ) Тогда
			
			Если ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций Тогда
				СтрокаНадпись = "Работники:";
			ИначеЕсли
				ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидНачисленийОплатыТрудаПоСтатье255НК Тогда
				СтрокаНадпись = "Вид начислений:";
			Иначе
				СтрокаНадпись = Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + ":";
			КонецЕсли;
			
			Если ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.РаботникиОрганизаций Тогда
				ЭлементыФормы["СубконтоДт" + НомерСубконто].Видимость = Ложь;
				ЭлементыФормы["СубконтоДт" + НомерСубконто + "Строка"].Видимость = Истина;
				ЭлементыФормы["СубконтоДт" + НомерСубконто + "Строка"].Значение = "< подбирается автоматически >"
			ИначеЕсли СчетДтНУ = ПланыСчетов.Хозрасчетный.РасходыНаОплатуТрудаБудущихПериодов Тогда
				ЭлементыФормы["СубконтоДт" + НомерСубконто].Видимость = Ложь;
				ЭлементыФормы["СубконтоДт" + НомерСубконто + "Строка"].Видимость = Истина;
				ЭлементыФормы["СубконтоДт" + НомерСубконто + "Строка"].Значение = Строка(СправочникОбъект["СубконтоДт" + НомерСубконто]);
			Иначе
				ЭлементыФормы["СубконтоДт" + НомерСубконто].Видимость = Истина;
				ЭлементыФормы["СубконтоДт" + НомерСубконто + "Строка"].Видимость = Ложь;
			КонецЕсли;
				
			ЭлементыФормы["НадписьСубконтоДт" + НомерСубконто].Заголовок = СтрокаНадпись;
			ЭлементыФормы["НадписьСубконтоДт" + НомерСубконто].Видимость = Истина;
			
		Иначе
			ЭлементыФормы["НадписьСубконтоДт" + НомерСубконто].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт" + НомерСубконто].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт" + НомерСубконто + "Строка"].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораЗначенияСубконто(ВидыСубконтоСчета, НомерСубконто, ВладелецФормы)
	
	ФормаВыбора = Справочники.Субконто.ПолучитьФормуВыбора( ,ВладелецФормы, );
	ФормаВыбора.Отбор.Владелец.Установить(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто);
	ФормаВыбора.ВидСубконто = ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто;
	ФормаВыбора.ЭлементыФормы.ВидСубконто.ТолькоПросмотр = Истина;
	ФормаВыбора.Открыть();	
	
КонецПроцедуры

Процедура ЗаписатьДанные(Отказ = Ложь)
	
	ЗаполнитьЗначенияСвойств(СправочникОбъект, ЭтаФорма);
	
	Если ТипЗнч(ВладелецФормы) = Тип("Форма") 
	   И ВладелецФормы.ЭлементыФормы.Найти("НадписьСчетУчетаРасходовПоСтраховымВзносам") <> Неопределено Тогда
	   
		ВладелецФормы.УстановитьТекстНадписиСчетУчетаРасходовПоСтраховымВзносам();
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры // ЗаписатьДанные()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура СчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

Процедура СчетДтПриИзменении(Элемент)
	
	ПриИзмененииСчета();
	УстановитьВидимостьСубконто();
	
КонецПроцедуры

Процедура СубконтоБухучетаПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		ПриИзмененииСчета();
		УстановитьВидимостьСубконто();
	КонецЕсли;
	
КонецПроцедуры

Процедура СубконтоБухучетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("СправочникСсылка.Субконто") Тогда
		
		СтандартнаяОбработка = Ложь;

		НомерСубконто = Прав(Элемент.Имя, 1);
		ВидыСубконтоСчета = СчетДтНУ.ВидыСубконто;
		
		ОткрытьФормуВыбораЗначенияСубконто(ВидыСубконтоСчета, НомерСубконто, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаОКНажатие(Элемент)
	
	Отказ = Ложь;
	
	ЗаписатьДанные(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры // КнопкаОКНажатие()

Процедура КнопкаОтменаНажатие(Элемент)
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры // КнопкаОтменаНажатие(()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СправочникОбъект);
	
	УстановитьВидимостьСубконто();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		ТекстВопроса =
		"Данные были изменены. Сохранить изменения?";
		
		КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
			
			Отказ = Истина;
			
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Да Тогда
			
			ЗаписатьДанные(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()
