////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СтруктураТиповСубконто;

#Если Клиент Тогда

Процедура ПечатьПланаСчетов(ВыводитьОписания = Ложь)
	
	Макет = ПланыСчетов.Хозрасчетный.ПолучитьМакет("Описание");
	
	Шапка  = Макет.ПолучитьОбласть("Шапка");
	
	ТабДокумент = Новый ТабличныйДокумент;
	Шапка.Параметры.Заголовок = ЭтаФорма.Заголовок;
	ТабДокумент.Вывести(Шапка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланСчетов.Ссылка КАК Ссылка,
	|	ПланСчетов.ЭтоГруппа КАК ЭтоГруппа,
	|	ПланСчетов.Ссылка.Код КАК Код,
	|	ПланСчетов.Ссылка.Наименование КАК Наименование,
	|	ПланСчетов.Ссылка.Валютный КАК Валютный,
	|	ПланСчетов.Ссылка.Количественный КАК Количественный,
	|	ПланСчетов.Ссылка.Забалансовый КАК Забалансовый,
	|	ПланСчетов.Ссылка.Вид КАК Вид,
	|	ПланСчетов.Ссылка.ВидыСубконто.(
	|		НомерСтроки КАК НомерСтроки,
	|		ВидСубконто.Наименование КАК Наименование,
	|		ТолькоОбороты КАК ТолькоОбороты
	|	) КАК ВидыСубконто
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПланСчетов1.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(ПланСчетов2.Ссылка) > 0
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ КАК ЭтоГруппа
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК ПланСчетов1
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК ПланСчетов2
	|			ПО ПланСчетов1.Ссылка = ПланСчетов2.Родитель
	|	ГДЕ
	|		ПланСчетов1.ПометкаУдаления = ЛОЖЬ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ПланСчетов1.Ссылка) КАК ПланСчетов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланСчетов.Ссылка.Порядок";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоГруппа Тогда
			Строка = Макет.ПолучитьОбласть("Группа");
		Иначе
			Строка = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
			
		Строка.Параметры.Заполнить(Выборка);
			
		Если Выборка.Вид = ВидСчета.Активный Тогда
			Строка.Параметры.Активность = "А";
		ИначеЕсли Выборка.Вид = ВидСчета.Пассивный Тогда
			Строка.Параметры.Активность = "П";
		Иначе
			Строка.Параметры.Активность = "АП";
		КонецЕсли;
		
		ВидыСубконто = Выборка.ВидыСубконто.Выбрать();
		Пока ВидыСубконто.Следующий() Цикл
			Строка.Параметры["Субконто" + ВидыСубконто.НомерСтроки] = ?(ВидыСубконто.ТолькоОбороты, "(об) ", "") + ВидыСубконто.Наименование;
		КонецЦикла;
			
		ТабДокумент.Вывести(Строка);
		
		Если ВыводитьОписания Тогда
		
			Попытка
				Описание = Макет.ПолучитьОбласть(ПланыСчетов[Выборка.Ссылка.Метаданные().Имя].ПолучитьИмяПредопределенного(Выборка.Ссылка));
				ТабДокумент.Вывести(Описание);
			Исключение
			КонецПопытки;
		
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокумент.ФиксацияСверху = 2;
	
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , , ЭтаФорма.Заголовок);
	
КонецПроцедуры

#КонецЕсли

Процедура ДействияФормыОборотноСальдоваяВедомость(Кнопка)

	ФормаОтчета = Отчеты.ОборотноСальдоваяВедомость.ПолучитьФорму();
	ФормаОтчета.РежимРасшифровки = Истина;
   	ФормаОтчета.Настроить();
	ФормаОтчета.Открыть();
	ФормаОтчета.ОбновитьОтчет();

КонецПроцедуры // ДействияФормыОборотноСальдоваяВедомость()

Процедура ДействияФормыОборотноСальдоваяВедомостьПоСчету(Кнопка)

	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.ОборотноСальдоваяВедомостьПоСчету.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		ФормаОтчета.Счет = ЭлементыФормы.Список.ТекущаяСтрока;
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыОборотноСальдоваяВедомостьПоСчету()

Процедура ДействияФормыКарточкаСчета(Кнопка)

	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.КарточкаСчета.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		ФормаОтчета.Счет = ЭлементыФормы.Список.ТекущаяСтрока;
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыКарточкаСчета()

Процедура ДействияФормыОборотыСчета(Кнопка)
	
	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.ОборотыСчета.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		ФормаОтчета.Счет = ЭлементыФормы.Список.ТекущаяСтрока;
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыОборотыСчета()

Процедура ДействияФормыАнализСчета(Кнопка)
	
	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.АнализСчета.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		ФормаОтчета.Счет = ЭлементыФормы.Список.ТекущаяСтрока;
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыАнализСчета()

Процедура ДействияФормыАнализСчетаПоДатам(Кнопка)
	
	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.АнализСчета.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		ФормаОтчета.Счет = ЭлементыФормы.Список.ТекущаяСтрока;
		ФормаОтчета.Периодичность = 6; // ДЕНЬ
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыАнализСчетаПоДатам()

Процедура ДействияФормыАнализСчетаПоСубконто(Кнопка)
	
	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		
		ФормаОтчета = Отчеты.АнализСчета.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		ФормаОтчета.Счет = ЭлементыФормы.Список.ТекущаяСтрока;
		ФормаОтчета.Настроить();
		Для Каждого СтрокаГруппировки Из ФормаОтчета.ДанныеОтчета.Группировка Цикл
			СтрокаГруппировки.Использование = Истина;
		КонецЦикла;
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыАнализСчетаПоСубконто()

Процедура ДействияФормыКарточкаСубконто(Кнопка)

	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.КарточкаСубконто.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		СписокВидовСубконто = Новый СписокЗначений;
		СписокВидовСубконто.Добавить(ЭлементыФормы.Список.ТекущиеДанные.ВидыСубконто[Число(Прав(Кнопка.Имя, 1)) - 1].ВидСубконто);
		ФормаОтчета.СписокВидовСубконто = СписокВидовСубконто.Скопировать();
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыКарточкаСубконто()

Процедура ДействияФормыАнализСубконто(Кнопка)
	
	Если НЕ (ЭлементыФормы.Список.ТекущаяСтрока = Неопределено) Тогда
		ФормаОтчета = Отчеты.АнализСубконто.ПолучитьФорму();
		ФормаОтчета.РежимРасшифровки = Истина;
		СписокВидовСубконто = Новый СписокЗначений;
		СписокВидовСубконто.Добавить(ЭлементыФормы.Список.ТекущиеДанные.ВидыСубконто[Число(Прав(Кнопка.Имя, 1)) - 1].ВидСубконто);
		ФормаОтчета.СписокВидовСубконто = СписокВидовСубконто.Скопировать();
		ФормаОтчета.Настроить();
		ФормаОтчета.Открыть();
		ФормаОтчета.ОбновитьОтчет();
	КонецЕсли;

КонецПроцедуры // ДействияФормыАнализСубконто()

Процедура ДействияФормыПерейтиВЖурналПроводок(Кнопка)

	ФормаЖурналаПроводок = РегистрыБухгалтерии.Хозрасчетный.ПолучитьФорму("ФормаСписка");
	ФормаЖурналаПроводок.Отбор.Счет.Значение      = ЭлементыФормы.Список.ТекущаяСтрока;
	ФормаЖурналаПроводок.Отбор.Счет.Использование = Истина;
	ФормаЖурналаПроводок.ЭлементыФормы.ОтборСчет.Значение = ЭлементыФормы.Список.ТекущаяСтрока;
	ФормаЖурналаПроводок.ЭлементыФормы.ИспользованиеОтбораСчет.Значение = Истина;
	ФормаЖурналаПроводок.Открыть();

КонецПроцедуры // ДействияФормыПерейтиВЖурналПроводок()

Процедура ДействиеФормыОткрытьСубконто(Элемент)

	Если Справочники.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		
		ФормаСписка = Справочники[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		
		ТипСправочникСубконто = Тип("СправочникСсылка.Субконто");
		
		Если СтруктураТиповСубконто[Элемент.Имя] = ТипСправочникСубконто 
		   И НЕ ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
				
			СписокСубконто = Новый СписокЗначений;				
			
			Для Каждого Субконто Из ЭлементыФормы.Список.ТекущиеДанные.ВидыСубконто Цикл
				Если Субконто.ВидСубконто.ТипЗначения.СодержитТип(ТипСправочникСубконто) Тогда
					СписокСубконто.Добавить(Субконто.ВидСубконто);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокСубконто.Количество() = 1 Тогда
				
				ФормаСписка.Отбор.Владелец.Установить(СписокСубконто[0].Значение);
				
			Иначе
				
				ФормаСписка.Отбор.Владелец.ВидСравнения  = ВидСравнения.ВСписке;
				ФормаСписка.Отбор.Владелец.Значение      = СписокСубконто;
				ФормаСписка.Отбор.Владелец.Использование = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФормаСписка.Открыть();
		
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		ФормаСписка = Документы[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		ФормаСписка.Открыть();
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		ФормаСписка = Перечисления[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		ФормаСписка.Открыть();
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		ФормаСписка = ПланыВидовХарактеристик[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		ФормаСписка.Открыть();
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		ФормаСписка = ПланыСчетов[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		ФормаСписка.Открыть();
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		ФормаСписка = ПланыВидовРасчета[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		ФормаСписка.Открыть();
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(СтруктураТиповСубконто[Элемент.Имя]) Тогда
		ФормаСписка = ПланыОбмена[Метаданные.НайтиПоТипу(СтруктураТиповСубконто[Элемент.Имя]).Имя].ПолучитьФормуСписка();
		ФормаСписка.Открыть();
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеФормыОткрытьОписаниеСчета(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	БухгалтерскийУчет.ОткрытьОписаниеСчета(ЭлементыФормы.Список.ТекущиеДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыПечатьПланаСчетов(Кнопка)
	
	ПечатьПланаСчетов();
	
КонецПроцедуры

Процедура ДействиеФормыПечатьПланаСчетовСОписаниями(Кнопка)
	
	ПечатьПланаСчетов(Истина);
	
КонецПроцедуры

Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Колонка  = ОформлениеСтроки.Ячейки;
	Субконто = ДанныеСтроки.ВидыСубконто;

	Если Субконто.Количество() >= 1 Тогда
		Колонка.Субконто1.УстановитьТекст(?(Субконто[0].ТолькоОбороты, "(об) ", "") + Субконто[0].ВидСубконто);
	КонецЕсли;

	Если Субконто.Количество() >= 2 Тогда
		Колонка.Субконто2.УстановитьТекст(?(Субконто[1].ТолькоОбороты, "(об) ", "") + Субконто[1].ВидСубконто);
	КонецЕсли;

	Если Субконто.Количество() = 3 Тогда
		Колонка.Субконто3.УстановитьТекст(?(Субконто[2].ТолькоОбороты, "(об) ", "") + Субконто[2].ВидСубконто);
	КонецЕсли;

	Если ДанныеСтроки.ЗапретитьИспользоватьВПроводках Тогда
		ОформлениеСтроки.ЦветФона = WebЦвета.СветлоЖелтый;
	КонецЕсли; 

	Вид = ДанныеСтроки.Вид;
	Если Вид = ВидСчета.Активный  Тогда
		Колонка.Вид.УстановитьТекст("А");
	ИначеЕсли Вид = ВидСчета.Пассивный  Тогда
		Колонка.Вид.УстановитьТекст("П");
	Иначе
		Колонка.Вид.УстановитьТекст("АП");
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки"
// табличного поля Список
//
Процедура СписокПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСписокПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры // СписокПриАктивизацииСтроки

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Список
//
Процедура ОбработчикОжиданияСписокПриАктивизацииСтроки()
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Построение пунктов меню "Отчеты" по счету
	КодСчета = ЭлементыФормы.Список.ТекущиеДанные.Код;
	
	// Добавление кнопок в командную панель.
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Очистить();
	
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("ОборотноСальдоваяВедомость",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Оборотно-сальдовая ведомость",
	                                                            Новый Действие("ДействияФормыОборотноСальдоваяВедомость"));
																	   
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
																	   
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("ОборотноСальдоваяВедомостьПоСчету",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Оборотно-сальдовая ведомость по счету " + КодСчета,
	                                                            Новый Действие("ДействияФормыОборотноСальдоваяВедомостьПоСчету"));
																  
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("КарточкаСчета",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Карточка счета " + КодСчета,
	                                                            Новый Действие("ДействияФормыКарточкаСчета"));
																  
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("ОборотыСчета",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Обороты счета " + КодСчета,
	                                                            Новый Действие("ДействияФормыОборотыСчета"));
																  
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("АнализСчета",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Анализ счета " + КодСчета,
	                                                            Новый Действие("ДействияФормыАнализСчета"));
																
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("АнализСчетаПоДатам",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Анализ счета " + КодСчета + " по датам",
	                                                            Новый Действие("ДействияФормыАнализСчетаПоДатам"));
																
	ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("АнализСчетаПоСубконто",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Анализ счета " + КодСчета + " по субконто",
	                                                            Новый Действие("ДействияФормыАнализСчетаПоСубконто"));
																
	// Добавление кнопок в подменю "Действия".																	
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Очистить();
	
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("ОборотноСальдоваяВедомость",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Оборотно-сальдовая ведомость",
	                                                            Новый Действие("ДействияФормыОборотноСальдоваяВедомость"));
																	   
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
																	   
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("ОборотноСальдоваяВедомостьПоСчету",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Оборотно-сальдовая ведомость по счету " + КодСчета,
	                                                            Новый Действие("ДействияФормыОборотноСальдоваяВедомостьПоСчету"));
																  
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("КарточкаСчета",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Карточка счета " + КодСчета,
	                                                            Новый Действие("ДействияФормыКарточкаСчета"));
																  
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("ОборотыСчета",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Обороты счета " + КодСчета,
	                                                            Новый Действие("ДействияФормыОборотыСчета"));
																  
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("АнализСчета",
	                                                            ТипКнопкиКоманднойПанели.Действие,
	                                                            "Анализ счета " + КодСчета,
	                                                            Новый Действие("ДействияФормыАнализСчета"));
																
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("АнализСчетаПоДатам",
	                                                                           ТипКнопкиКоманднойПанели.Действие,
	                                                                           "Анализ счета " + КодСчета + " по датам",
	                                                                           Новый Действие("ДействияФормыАнализСчетаПоДатам"));
																			   
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("АнализСчетаПоСубконто",
	                                                                           ТипКнопкиКоманднойПанели.Действие,
	                                                                           "Анализ счета " + КодСчета + " по субконто",
	                                                                           Новый Действие("ДействияФормыАнализСчетаПоСубконто"));
																			   
																			   
	// Построение пунктов меню "Отчеты" по субконто															
	НомерСубконто = 0;
	
	Для Каждого Субконто Из ЭлементыФормы.Список.ТекущиеДанные.ВидыСубконто Цикл
		
		НомерСубконто = НомерСубконто + 1;
		
		ИмяКнопки = "Субконто" + Строка(НомерСубконто) + "Тип0";
		
		// Добавление кнопок в командную панель.
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
	
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("КарточкаСубконто" + Строка(НомерСубконто),
		                                                            ТипКнопкиКоманднойПанели.Действие,
		                                                            "Карточка субконто " + Субконто.ВидСубконто.Наименование,
		                                                            Новый Действие("ДействияФормыКарточкаСубконто"));
																		   
		ЭлементыФормы.КоманднаяПанель.Кнопки.Отчеты.Кнопки.Добавить("АнализСубконто" + Строка(НомерСубконто),
		                                                            ТипКнопкиКоманднойПанели.Действие,
		                                                            "Анализ субконто " + Субконто.ВидСубконто.Наименование,
		                                                            Новый Действие("ДействияФормыАнализСубконто"));
																	
		// Добавление кнопок в подменю "Действия".																	
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить(,ТипКнопкиКоманднойПанели.Разделитель);
																	
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("КарточкаСубконто" + Строка(НомерСубконто),
		                                                            ТипКнопкиКоманднойПанели.Действие,
		                                                            "Карточка субконто " + Субконто.ВидСубконто.Наименование,
		                                                            Новый Действие("ДействияФормыКарточкаСубконто"));
																		   
		ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Отчеты.Кнопки.Добавить("АнализСубконто" + Строка(НомерСубконто),
		                                                            ТипКнопкиКоманднойПанели.Действие,
		                                                            "Анализ субконто " + Субконто.ВидСубконто.Наименование,
		                                                            Новый Действие("ДействияФормыАнализСубконто"));
																	
	КонецЦикла;
	
	
	// Построение пунктов меню "Субконто"
	СтруктураТиповСубконто = Новый Структура();
	
	ЭлементыФормы.КоманднаяПанель.Кнопки.Субконто.Кнопки.Очистить();
	ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Субконто.Кнопки.Очистить();
	
	НомерСубконто = 0;
	
	Для Каждого Субконто Из ЭлементыФормы.Список.ТекущиеДанные.ВидыСубконто Цикл
		
		НомерСубконто = НомерСубконто + 1;
																	  
		ТипыСубконто = Субконто.ВидСубконто.ТипЗначения.Типы();
																	  
		Если ТипыСубконто.Количество() > 1 Тогда
			
			ЭлементыФормы.КоманднаяПанель.Кнопки.Субконто.Кнопки.Добавить("Субконто" + Строка(НомерСубконто),
			                                                              ТипКнопкиКоманднойПанели.Подменю,
			                                                              Субконто.ВидСубконто.Наименование);
																						 
			ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Субконто.Кнопки.Добавить("Субконто" + Строка(НомерСубконто),
			                                                                             ТипКнопкиКоманднойПанели.Подменю,
			                                                                             Субконто.ВидСубконто.Наименование);
																						 
			НомерТипаСубконто = 1;
			
			СписокТиповСубконто = Новый СписокЗначений;
			
			Для Каждого ТипСубконто Из ТипыСубконто Цикл
				СписокТиповСубконто.Добавить(ТипСубконто);
			КонецЦикла;
			
			СписокТиповСубконто.СортироватьПоЗначению();
			
			Для Каждого ЭлементСпискаТиповСубконто Из СписокТиповСубконто Цикл
				
				ТипСубконто = ЭлементСпискаТиповСубконто.Значение;
				
				НомерТипаСубконто = НомерТипаСубконто + 1;
				
				ИмяКнопки = "Субконто" + Строка(НомерСубконто) + "Тип" + Строка(НомерТипаСубконто);
				
				НовыйОбъект = Новый(ТипСубконто);
																														 
				ЭлементыФормы.КоманднаяПанель.Кнопки.Субконто.Кнопки["Субконто" + Строка(НомерСубконто)].Кнопки.Добавить(ИмяКнопки,
				                                                                                                         ТипКнопкиКоманднойПанели.Действие,
				                                                                                                         НовыйОбъект.Метаданные().Синоним,
				                                                                                                         Новый Действие("ДействиеФормыОткрытьСубконто"));

				ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Субконто.Кнопки["Субконто" + Строка(НомерСубконто)].Кнопки.Добавить(ИмяКнопки,
				                                                                                                                        ТипКнопкиКоманднойПанели.Действие,
				                                                                                                                        НовыйОбъект.Метаданные().Синоним,
				                                                                                                                        Новый Действие("ДействиеФормыОткрытьСубконто"));
																														 
				СтруктураТиповСубконто.Вставить(ИмяКнопки, ТипСубконто);
																														 
			КонецЦикла;
			
		Иначе
			
			ИмяКнопки = "Субконто" + Строка(НомерСубконто) + "Тип0";
			
			ЭлементыФормы.КоманднаяПанель.Кнопки.Субконто.Кнопки.Добавить(ИмяКнопки,
			                                                              ТипКнопкиКоманднойПанели.Действие,
			                                                              Субконто.ВидСубконто.Наименование,
			                                                              Новый Действие("ДействиеФормыОткрытьСубконто"));
																		  
			ЭлементыФормы.КоманднаяПанель.Кнопки.Подменю.Кнопки.Субконто.Кнопки.Добавить(ИмяКнопки,
			                                                                             ТипКнопкиКоманднойПанели.Действие,
			                                                                             Субконто.ВидСубконто.Наименование,
			                                                                             Новый Действие("ДействиеФормыОткрытьСубконто"));
																						 
			СтруктураТиповСубконто.Вставить(ИмяКнопки, ТипыСубконто[0]);
																		  
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

ПланСчетовСписок.Колонки.Добавить("ВидыСубконто", Ложь);
ПланСчетовСписок.Колонки.Добавить("ЗапретитьИспользоватьВПроводках", Ложь);
ПланСчетовСписок.Колонки.Добавить("Вид", Ложь);
