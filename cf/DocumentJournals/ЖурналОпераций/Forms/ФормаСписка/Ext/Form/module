Перем КартинкаРучнаяКорректировка;
Перем КартинкаВыполнено;
Перем КартинкаОшибок;
Перем КартинкаНеВыполнено;
Перем КартинкаПропущено;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает отбор по организации.
//
Процедура УстановитьОтбор()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Отбор.Организация.Установить(Организация, ЗначениеЗаполнено(Организация));
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Управление видимостью и доступностью элементов формы. 
//
Процедура УстановитьВидимость()

	Если ЭлементыФормы.ДействияФормы.Кнопки.Проводки.Пометка Тогда

		ЭлементыФормы.ЖурналДокументовСписок.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
			ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Верх);
			
		ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.Движения.Свертка    = РежимСверткиЭлементаУправления.Нет;

		ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, 
			ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.Движения.УстановитьПривязку(ГраницаЭлементаУправления.Верх,
			ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Низ);

		ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаВРДт.Видимость = ПоказыватьДанныеНУ;
		ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаВРКт.Видимость = ПоказыватьДанныеНУ;
		ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаНУДт.Видимость = ПоказыватьДанныеНУ;
		ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаНУКт.Видимость = ПоказыватьДанныеНУ;
		ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаПРДт.Видимость = ПоказыватьДанныеНУ;
		ЭлементыФормы.ТабличноеПолеДвижения.Колонки.СуммаПРКт.Видимость = ПоказыватьДанныеНУ;

	Иначе

		ЭлементыФормы.Движения.УстановитьПривязку(ГраницаЭлементаУправления.Верх);
		
        ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
			ЭлементыФормы.Движения, ГраницаЭлементаУправления.Верх);
			
		ЭлементыФормы.Движения.Свертка    = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Низ;
		
        ЭлементыФормы.ЖурналДокументовСписок.УстановитьПривязку(ГраницаЭлементаУправления.Низ,
			ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Верх);
			
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ЭлементыФормы.ТабличноеПолеДвижения.Значение.Отбор.Регистратор.Установить(Документы.ОперацияБух.ПустаяСсылка());
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ЖурналДокументовСписок.Колонки.Добавить("Организация", Ложь);
	ЖурналДокументовСписок.Колонки.Добавить("Информация",  Ложь);
	
	// Управление видимостью данных НУ
	ПоказыватьДанныеНУ = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВПроводкахДанныеНУ");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьДанныеНУ.Пометка = ПоказыватьДанныеНУ;

	ОтборПоОрганизации = РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ЖурналДокументовСписок");
	
	Организация = Неопределено;
	Если ОтборПоОрганизации <> Неопределено Тогда
		Если ОтборПоОрганизации.ВидСравнения = ВидСравнения.Равно
			И ОтборПоОрганизации.Использование Тогда
			Организация = ОтборПоОрганизации.Значение;
		КонецЕсли; 
	КонецЕсли;
	
	РежимПросмотраПроводок = ВосстановитьЗначение("РежимПросмотраПроводок");
	Если РежимПросмотраПроводок <> Неопределено Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Проводки.Пометка = РежимПросмотраПроводок;
	Иначе
		ЭлементыФормы.ДействияФормы.Кнопки.Проводки.Пометка = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока));
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // ПриОткрытии()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ЖурналДокументовСписок", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("РежимПросмотраПроводок", ЭлементыФормы.ДействияФормы.Кнопки.Проводки.Пометка);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия на кнопку "Добавить операцию".
// 
Процедура ДействияФормыДобавитьОперацию(Кнопка)
	
	Форма = Документы.ОперацияБух.ПолучитьФормуНовогоДокумента();
	Форма.Открыть();
	
КонецПроцедуры // ДействияФормыВвестиОперацию()

// Обработчик нажатия на кнопку "Найти в списке документов".
//
Процедура ДействияФормыНайтиВСпискеДокументов(Кнопка)

	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка;

	ФормаСписка = Документы[Документ.Метаданные().Имя].ПолучитьФормуСписка();
	ФормаСписка.ПараметрТекущаяСтрока = Документ;
	ФормаСписка.Открыть();

КонецПроцедуры // ДействияФормыНайтиВСпискеДокументов()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Обработчик нажатия на кнопку "Проводки" командной панели формы.
//
Процедура ДействияФормыПроводки(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;

	УстановитьВидимость();

КонецПроцедуры // ДействияФормыПроводки()

// Обработчик нажатия на кнопку "Переключить активность проводок" командной
// панели формы.
//
Процедура ДействияФормыПереключитьАктивность(Кнопка)
	
	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Документ = ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка;

	БухгалтерскийУчет.ПереключитьАктивностьПроводокБУ(Документ);
	
КонецПроцедуры // ДействияФормыПереключитьАктивность()

Процедура ДействияФормыДействиеСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваИзСписка(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыРезультатПроведения(Кнопка)
	
	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь,ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка,
	ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка.ПолучитьОбъект());

КонецПроцедуры

Процедура ДействияФормыПоказатьСкрытьДанныеНУ(Кнопка)
	
	ПоказыватьДанныеНУ = НЕ ПоказыватьДанныеНУ;
	
	Кнопка.Пометка = ПоказыватьДанныеНУ;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Обработчик события "ПриИзменении" поля ввода "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьОтбор();

КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Обработчик события "ПриАктивизацииСтроки" табличного поля "ЖурналДокументовСписок".
//
Процедура ЖурналДокументовСписокПриАктивизацииСтроки(Элемент)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		
		ЭлементыФормы.ТабличноеПолеДвижения.Значение.Отбор.Регистратор.Установить(Документы.ОперацияБух.ПустаяСсылка());

	Иначе
		
		ЭлементыФормы.ТабличноеПолеДвижения.Значение.Отбор.Регистратор.Установить(Элемент.ТекущиеДанные.Ссылка);
		
		ОргОтбора = Элемент.ТекущиеДанные.Организация;

	КонецЕсли;
	
    РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока));
	
КонецПроцедуры // ЖурналДокументовСписокПриАктивизацииСтроки()

// Обработчик события "ПриПолученииДанных" табличного поля "ЖурналДокументовСписок".
// Устанавливает значение реквизита "Организация" в случае, если установлен
// отбор по организации.
//
Процедура ЖурналДокументовСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ВидимостьРучнойКорректировки = Элемент.Колонки.РучнаяКорректировка.Видимость;
	ВидимостьКартинки            = Элемент.Колонки.Картинка.Видимость;
	
	ТипРегламентнаяОперация = Тип("ДокументСсылка.РегламентнаяОперация");
	
	Для Каждого Строка Из ОформленияСтрок Цикл
		
		Если ВидимостьРучнойКорректировки Тогда
			
			Отображать = Строка.Ячейки.РучнаяКорректировка.Значение;
			Если ТипЗнч(Отображать) = Тип("Булево") и Отображать Тогда
				Строка.Ячейки.РучнаяКорректировка.УстановитьКартинку(КартинкаРучнаяКорректировка);
			Иначе 
				Строка.Ячейки.РучнаяКорректировка.Текст = "";
			КонецЕсли;
			
		КонецЕсли;
	
		Если ВидимостьКартинки Тогда
			
			ДокументСсылка = Строка.ДанныеСтроки.Ссылка;
			
			Если ТипЗнч(ДокументСсылка) = ТипРегламентнаяОперация Тогда
				
				Если НЕ Строка.ДанныеСтроки.ПометкаУдаления Тогда // Для помеченных на удаление - стандартная картинка
					
					СостояниеДокумента = ДокументСсылка.Состояние;
					Если СостояниеДокумента = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
						Строка.Ячейки.Картинка.УстановитьКартинку(КартинкаВыполнено);
					ИначеЕсли СостояниеДокумента = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСошибками Тогда
						Строка.Ячейки.Картинка.УстановитьКартинку(КартинкаОшибок);
					ИначеЕсли СостояниеДокумента = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
						Строка.Ячейки.Картинка.УстановитьКартинку(КартинкаНеВыполнено);
					ИначеЕсли СостояниеДокумента = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
						Строка.Ячейки.Картинка.УстановитьКартинку(КартинкаПропущено);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЖурналДокументовСписокПриПолученииДанных()

Процедура ЖурналДокументовСписокПриИзмененииОтбора(ПутьКДанным = "")
	
	Если ЖурналДокументовСписок.Отбор.Организация.Использование
		И ЖурналДокументовСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно Тогда
		Организация = ЖурналДокументовСписок.Отбор.Организация.Значение;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

КартинкаРучнаяКорректировка = БиблиотекаКартинок.РучнаяКорректировка;

// Картинки документа "Регламентная операция"
КартинкаВыполнено   = БиблиотекаКартинок.ОперацияВыполненаУспешно;
КартинкаОшибок      = БиблиотекаКартинок.ОперацияВыполненаСОшибками;
КартинкаНеВыполнено = БиблиотекаКартинок.НепроведенныйДокумент;
КартинкаПропущено   = БиблиотекаКартинок.ОперацияПропущена;

