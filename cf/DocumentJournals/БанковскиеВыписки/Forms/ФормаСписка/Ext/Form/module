Перем КартинкаРучнаяКорректировка;
Перем мВалютаРегламентированногоУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьВидимость()
	
	ВидимостьОрганизации = НЕ (ЖурналДокументовСписок.Отбор.Организация.Использование
		И ЖурналДокументовСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно);
	ЭлементыФормы.ЖурналДокументовСписок.Колонки.Организация.Видимость = ВидимостьОрганизации;
	
	ВидимостьБанковскогоСчета = НЕ (ЖурналДокументовСписок.Отбор.БанковскийСчет.Использование
		И ЖурналДокументовСписок.Отбор.БанковскийСчет.ВидСравнения = ВидСравнения.Равно);
	ЭлементыФормы.ЖурналДокументовСписок.Колонки.БанковскийСчет.Видимость = ВидимостьБанковскогоСчета;
	
	ВидимостьДаты = НЕ (ЖурналДокументовСписок.Отбор.Дата.Использование
		И ЖурналДокументовСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы
		И КонецДня(ЖурналДокументовСписок.Отбор.Дата.ЗначениеС) = КонецДня(ЖурналДокументовСписок.Отбор.Дата.ЗначениеПо));
	ЭлементыФормы.ЖурналДокументовСписок.Колонки.Дата.Видимость = ВидимостьДаты;
	
КонецПроцедуры

Процедура ОбновитьИтогиПриИзмененииОтбора()

	ТекБанковскийСчет = БанковскийСчет;
	Если ЗначениеЗаполнено(БанковскийСчет) И Дата = '00010101' Тогда
		ТекДата = ОбщегоНазначения.ПолучитьРабочуюДату();
	Иначе
		ТекДата = Дата;
	КонецЕсли;
	
	ОбновитьИтоги(ТекДата, ТекБанковскийСчет, Истина);

КонецПроцедуры

// Процедура установки быстрого отбора по организации
//
Процедура УстановитьОтборПоОрганизации()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Отбор.Организация.Установить(Организация, Не Организация.Пустая());
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);
	
КонецПроцедуры // УстановитьОтборПоОрганизации()	

// Процедура установки быстрого отбора по банковскому счету
//
Процедура УстановитьОтборПоБанковскомуСчету()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Отбор.БанковскийСчет.Установить(БанковскийСчет, Не БанковскийСчет.Пустая());
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);
	
КонецПроцедуры // УстановитьОтборПоБанковскомуСчету()	

// Процедура установки быстрого отбора по дате
//
Процедура УстановитьОтборПоДате()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Если Дата = '00010101' Тогда
		Отбор.Дата.Использование = Ложь;
	Иначе
		Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
		Отбор.Дата.ЗначениеС = НачалоДня(Дата);
		Отбор.Дата.ЗначениеПо = КонецДня(Дата);
		Отбор.Дата.Использование = Истина;
	КонецЕсли;
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтборПоДате()	

// Процедура установки быстрого отбора по контрагенту
//
Процедура УстановитьОтборПоКонтрагенту()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");

	Отбор.Контрагент.Установить(Контрагент, Не Контрагент.Пустая());
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтборПоКонтрагенту()	

// Процедура установки быстрого отбора по назначению платежа с видом сравнения "содержит"
//
Процедура УстановитьОтборПоНазначениюПлатежа()

	ОтключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор");
	
	Если ПустаяСтрока(НазначениеПлатежа) Тогда
		Отбор.НазначениеПлатежа.Использование = Ложь;
	Иначе
		Отбор.НазначениеПлатежа.ВидСравнения = ВидСравнения.Содержит;
		Отбор.НазначениеПлатежа.Значение = НазначениеПлатежа;
		Отбор.НазначениеПлатежа.Использование = Истина;
	КонецЕсли;
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);

КонецПроцедуры // УстановитьОтборПоНазначениюПлатежа()	

// Процедура вызывается при изменении значения быстрого отбора по организации
//
Процедура ОрганизацияПриИзменении(Элемент)

	БанковскийСчет = Организация.ОсновнойБанковскийСчет;

	УстановитьОтборПоОрганизации();
	УстановитьОтборПоБанковскомуСчету();
	
	ОбновитьИтогиПриИзмененииОтбора();

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по банковскому счету
//
Процедура БанковскийСчетПриИзменении(Элемент)

	Если Организация.Пустая() И НЕ БанковскийСчет.Пустая() Тогда
		Организация = БанковскийСчет.Владелец;
		УстановитьОтборПоОрганизации();
	КонецЕсли;

	УстановитьОтборПоБанковскомуСчету();

	ОбновитьИтогиПриИзмененииОтбора();

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по дате
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьОтборПоДате();

	ОбновитьИтогиПриИзмененииОтбора();

	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по контрагенту
//
Процедура КонтрагентПриИзменении(Элемент)

	УстановитьОтборПоКонтрагенту();

КонецПроцедуры

// Процедура вызывается при изменении значения быстрого отбора по назначению платежа
//
Процедура НазначениеПлатежаПриИзменении(Элемент)

	УстановитьОтборПоНазначениюПлатежа();

КонецПроцедуры

// Возвращает таблицу сумм остатков и оборотов за указанный день по указанному счету
//
Функция ПолучитьИтоги(ТекДата, ТекБанковскийСчет)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаНачальныйОстаток
	|	КОНЕЦ КАК НачальныйОстаток,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотДт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотДт
	|	КОНЕЦ КАК ВсегоПоступило,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаОборотКт
	|	КОНЕЦ КАК ВсегоСписано,
	|	ВЫБОР
	|		КОГДА БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаРеглУчета
	|			ТОГДА ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстаток
	|		ИНАЧЕ ХозрасчетныйОстаткиИОбороты.ВалютнаяСуммаКонечныйОстаток
	|	КОНЕЦ КАК КонечныйОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
	|			НАЧАЛОПЕРИОДА(&ДатаИтогов, ДЕНЬ),
	|			КОНЕЦПЕРИОДА(&ДатаИтогов, ДЕНЬ),
	|			,
	|			ДвиженияИГраницыПериода,
	|			,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.БанковскиеСчета),
	|			Организация = &Организация
	|				И Субконто1 = &БанковскийСчетИтогов) КАК ХозрасчетныйОстаткиИОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов";
	
	Запрос.УстановитьПараметр("ДатаИтогов", ТекДата);
	Запрос.УстановитьПараметр("БанковскийСчетИтогов", ТекБанковскийСчет);
	Запрос.УстановитьПараметр("Организация", ТекБанковскийСчет.Владелец);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	
	ТаблицаИтогов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИтогов;

КонецФункции

// Возвращает таблицу сумм оборотов перемешений за указанный день по указанному счету
//
Функция ПолучитьИтогиПеремещения(ТекДата, ТекБанковскийСчет)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	0 КАК ВсегоСписано,
	|	СписаниеСРасчетногоСчета.СуммаДокумента КАК ВсегоПоступило
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО СписаниеСРасчетногоСчета.СчетКонтрагента = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПереводНаДругойСчет)
	|	И СписаниеСРасчетногоСчета.Организация = &Организация
	|	И СписаниеСРасчетногоСчета.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И СписаниеСРасчетногоСчета.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриходныйКассовыйОрдер.СуммаДокумента,
	|	0
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО ПриходныйКассовыйОрдер.Контрагент = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов
	|	И ПриходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПолучениеНаличныхВБанке)
	|	И ПриходныйКассовыйОрдер.Организация = &Организация
	|	И ПриходныйКассовыйОрдер.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И ПриходныйКассовыйОрдер.Проведен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	РасходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчета КАК БанковскиеСчета
	|		ПО РасходныйКассовыйОрдер.СчетОрганизации = БанковскиеСчета.Ссылка
	|ГДЕ
	|	БанковскиеСчета.Ссылка = &БанковскийСчетИтогов
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВзносНаличнымиВБанк)
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И РасходныйКассовыйОрдер.Дата МЕЖДУ &НачалоДня И &КонецДня
	|	И РасходныйКассовыйОрдер.Проведен = ИСТИНА";
	
	Запрос.УстановитьПараметр("НачалоДня", НачалоДня(ТекДата));
	Запрос.УстановитьПараметр("КонецДня", КонецДня(ТекДата));
	Запрос.УстановитьПараметр("БанковскийСчетИтогов", ТекБанковскийСчет);
	Запрос.УстановитьПараметр("Организация", ТекБанковскийСчет.Владелец);
	Запрос.УстановитьПараметр("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	
	ТаблицаИтогов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИтогов;

КонецФункции

// Обновление сумм остатков и оборотов за день в форме журнала
//
Процедура ОбновитьИтоги(ТекДата, ТекБанковскийСчет, ВсегдаОбновлять = Ложь)

	Если ВсегдаОбновлять ИЛИ (ДатаИтогов <> ТекДата) ИЛИ (БанковскийСчетИтогов <> ТекБанковскийСчет) Тогда
		
		ТаблицаИтогов = ПолучитьИтоги(ТекДата, ТекБанковскийСчет);
		
		БанковскийСчетИтогов = ТекБанковскийСчет;
		ДатаИтогов           = ТекДата;
		
		НачальныйОстаток = ТаблицаИтогов.Итог("НачальныйОстаток");
		ВсегоПоступило   = ТаблицаИтогов.Итог("ВсегоПоступило");
		ВсегоСписано     = ТаблицаИтогов.Итог("ВсегоСписано");
		КонечныйОстаток  = ТаблицаИтогов.Итог("КонечныйОстаток");
		
		ТаблицаИтоговПеремещения 	= ПолучитьИтогиПеремещения(ТекДата, ТекБанковскийСчет);
		ВсегоПоступилоПеремещения   = ТаблицаИтоговПеремещения.Итог("ВсегоПоступило");
		ВсегоСписаноПеремещения     = ТаблицаИтоговПеремещения.Итог("ВсегоСписано");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеФормы()

	ЖурналДокументовСписок.Обновить();
	ОбновитьИтоги(ДатаИтогов, БанковскийСчетИтогов, Истина);

КонецПроцедуры

Процедура ГиперссылкаПеремещенияНажатие(Элемент)
	
	ТекДанные = ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(БанковскийСчет) И Дата = '00010101' Тогда
			ТекДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Иначе
			ТекДата = Дата;
		КонецЕсли;
	Иначе
		ТекДата = ТекДанные.Дата;
	КонецЕсли;
	
	ТекБанковскийСчет = БанковскийСчет;
	ТекОрганизация = Организация;
	Если НЕ ЗначениеЗаполнено(ТекБанковскийСчет) Тогда
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
		ТекОрганизация = ТекБанковскийСчет.Владелец;
	КонецЕсли;
	
	ПеремещенияДенежныхСредств = ЖурналыДокументов.БанковскиеВыписки.ПолучитьФорму("ПеремещенияДенежныхСредств", ЭтаФорма);
	ПеремещенияДенежныхСредств.ДатаВыписки = ТекДата;
	ПеремещенияДенежныхСредств.БанковскийСчет = ТекБанковскийСчет;
	ПеремещенияДенежныхСредств.Организация = ТекОрганизация;
	ПеремещенияДенежныхСредств.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка подменю "Советы".							   
	РаботаСДиалогами.УстановитьПодменюСоветы(ЭлементыФормы.ДействияФормы, "Банк");
	
КонецПроцедуры

// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ОтборПоОрганизации = РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ЖурналДокументовСписок");

	Организация = Неопределено;
	Если ОтборПоОрганизации <> Неопределено Тогда
		Если ОтборПоОрганизации.ВидСравнения = ВидСравнения.Равно
			И ОтборПоОрганизации.Использование Тогда
			Организация = ОтборПоОрганизации.Значение;
			БанковскийСчет = Организация.ОсновнойБанковскийСчет;
			УстановитьОтборПоБанковскомуСчету();			
		КонецЕсли; 
	КонецЕсли;
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока));	
	
	ПодключитьОбработчикИзмененияДанных("ЖурналДокументовСписок.Отбор", "ЖурналДокументовСписокПриИзмененииОтбора", Истина);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеЗначенийСвойств" И Источник = ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока Тогда
		РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(ЭтаФорма, Параметр);
	ИначеЕсли ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "ЖурналДокументовСписок", Истина);
	ИначеЕсли ИмяСобытия = "ОбновитьФорму"
		И ( (ТипЗнч(Источник) = Тип("ДокументОбъект.ПоступлениеНаРасчетныйСчет"))
			ИЛИ (ТипЗнч(Источник) = Тип("ДокументОбъект.СписаниеСРасчетногоСчета")) 
			ИЛИ (ТипЗнч(Источник) = Тип("ДокументОбъект.РасходныйКассовыйОрдер")) 
			ИЛИ (ТипЗнч(Источник) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер"))) Тогда
		ОбновитьИтоги(ДатаИтогов, БанковскийСчетИтогов, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки в подменю "Советы" командной панели
// формы.
//
Процедура ДействияФормыОткрытьСоветы(Кнопка)
	
	РаботаСДиалогами.ОткрытьСоветы(Кнопка);
	
КонецПроцедуры //ДействияФормыОткрытьСоветы()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Процедура открывает журнал проводок с отбором по текущему регистратору
//
Процедура ДействияФормыНастройка(Кнопка)
	
	Если ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначения.РучнаяКорректировкаОсновнаяФорма(Ложь, ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка,
		ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные.Ссылка.ПолучитьОбъект());
	
КонецПроцедуры

Процедура ДействияФормыЗагрузить(Кнопка)
	
	ОбработкаКБ = Обработки.КлиентБанк.Создать();
	Если ЗначениеЗаполнено(Организация) Тогда
		ОбработкаКБ.Организация = Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		ОбработкаКБ.БанковскийСчет = БанковскийСчет;
	КонецЕсли;
	СохранитьЗначение("КлиентБанкРежимПоУмолчанию", "  Загрузка  ");
	ФормаКБ = ОбработкаКБ.ПолучитьФорму(, ЭтаФорма);
	ФормаКБ.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыДействиеСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваИзСписка(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыОбновить(Кнопка)
	
	ОбновитьДанныеФормы();
	
КонецПроцедуры

Процедура ДействияФормыНеоплаченныеПлатежныеПоручения(Кнопка)
	
	СписокНеоплаченныхДокументов = Документы.ПлатежноеПоручение.ПолучитьФормуСписка("ФормаПодбораНеоплаченных", ЭтаФорма);
	СписокНеоплаченныхДокументов.Организация	= Организация;
	СписокНеоплаченныхДокументов.БанковскийСчет = БанковскийСчет;
	СписокНеоплаченныхДокументов.ДатаВыписки = ТекущаяДата();
	СписокНеоплаченныхДокументов.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

Процедура ЖурналДокументовСписокПриАктивизацииСтроки(Элемент)
	
	ТекДанные = ЭлементыФормы.ЖурналДокументовСписок.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		ТекБанковскийСчет = БанковскийСчет;
		Если ЗначениеЗаполнено(БанковскийСчет) И Дата = '00010101' Тогда
			ТекДата = ОбщегоНазначения.ПолучитьРабочуюДату();
		Иначе
			ТекДата = Дата;
		КонецЕсли;
	Иначе
		ТекДата = ТекДанные.Дата;
		ТекБанковскийСчет = ТекДанные.БанковскийСчет;
	КонецЕсли;
	
	ОбновитьИтоги(ТекДата, ТекБанковскийСчет);
	
	РаботаСДиалогами.ИзменитьПредставлениеКнопкиВыбораСвойств(
		ЭтаФорма, 
		РаботаСДиалогами.ПолучитьОписаниеЗначенийСвойствОбъекта(ЭлементыФормы.ЖурналДокументовСписок.ТекущаяСтрока));
	
КонецПроцедуры

Процедура ЖурналДокументовСписокПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование 
		ИЛИ (НЕ Отбор.ВидДокумента.Использование) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ИмяДокумента = Отбор.ВидДокумента.Значение.Имя;
	НовыйДокумент = Документы[ИмяДокумента].СоздатьДокумент();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		НовыйДокумент.Организация = Организация;
	КонецЕсли;
	Если ЗначениеЗаполнено(БанковскийСчет) Тогда
		НовыйДокумент.СчетОрганизации = БанковскийСчет;
	КонецЕсли;
	Если ЗначениеЗаполнено(Дата) Тогда
		НовыйДокумент.Дата = Дата;
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		НовыйДокумент.Контрагент = Контрагент;
	КонецЕсли;
	
	ФормаНового = НовыйДокумент.ПолучитьФорму();
	ФормаНового.Открыть();
	
КонецПроцедуры

// Обработчик события "ПриПолученииДанных" формы.
Процедура ЖурналДокументовСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Если Элемент.Колонки.РучнаяКорректировка.Видимость Тогда
		Для Каждого Строка Из ОформленияСтрок Цикл
			Отображать = Строка.Ячейки.РучнаяКорректировка.Значение;
			Если ТипЗнч(Отображать) = Тип("Булево") и отображать Тогда
				Строка.Ячейки.РучнаяКорректировка.УстановитьКартинку(КартинкаРучнаяКорректировка);
			Иначе 
				Строка.Ячейки.РучнаяКорректировка.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЖурналДокументовСписокПриИзмененииОтбора(ПутьКДанным = "")
	
	Если ЖурналДокументовСписок.Отбор.Организация.Использование
		И ЖурналДокументовСписок.Отбор.Организация.ВидСравнения = ВидСравнения.Равно Тогда
		Организация = ЖурналДокументовСписок.Отбор.Организация.Значение;
	Иначе
		Организация = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.БанковскийСчет.Использование
		И ЖурналДокументовСписок.Отбор.БанковскийСчет.ВидСравнения = ВидСравнения.Равно Тогда
		БанковскийСчет = ЖурналДокументовСписок.Отбор.БанковскийСчет.Значение;
	Иначе
		БанковскийСчет = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.Контрагент.Использование
		И ЖурналДокументовСписок.Отбор.Контрагент.ВидСравнения = ВидСравнения.Равно Тогда
		Контрагент = ЖурналДокументовСписок.Отбор.Контрагент.Значение;
	Иначе
		Контрагент = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.Дата.Использование
		И ЖурналДокументовСписок.Отбор.Дата.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы Тогда
		Дата = ЖурналДокументовСписок.Отбор.Дата.ЗначениеС;
	Иначе
		Дата = Неопределено;
	КонецЕсли;
	
	Если ЖурналДокументовСписок.Отбор.НазначениеПлатежа.Использование
		И ЖурналДокументовСписок.Отбор.НазначениеПлатежа.ВидСравнения = ВидСравнения.Содержит Тогда
		НазначениеПлатежа = ЖурналДокументовСписок.Отбор.НазначениеПлатежа.Значение;
	Иначе
		НазначениеПлатежа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

ЖурналДокументовСписок.Колонки.Добавить("БанковскийСчет", Ложь);
ЖурналДокументовСписок.Колонки.Добавить("Дата", Ложь);

КартинкаРучнаяКорректировка     = БиблиотекаКартинок.РучнаяКорректировка;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
