Перем мСписокСчетовБУ;
Перем мСписокСчетовНУ;
Перем Предприниматели;

// Процедура - обработчик события "ПриВыводеСтроки" формы списка.
//
Процедура РегистрСведенийСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОбщехозяйственныеРасходы = (ДанныеСтроки.СчетЗатрат = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	ТекОрганизация = ДанныеСтроки.Организация;
	
	ПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(ТекОрганизация, ДанныеСтроки.Период);
	
	Предприниматель = Предприниматели[ТекОрганизация];
	Если Предприниматель = Неопределено Тогда
		Предприниматель = ТекОрганизация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо;
		Предприниматели.Вставить(ТекОрганизация, Предприниматель);
	КонецЕсли;
	
КонецПроцедуры // РегистрСведенийСписокПриВыводеСтроки()


Процедура РегистрСведенийСписокОрганизацияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Организация)
	   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Подразделение)
	   И Не СтрокаТабличнойЧасти.Подразделение.Владелец = СтрокаТабличнойЧасти.Организация Тогда

		СтрокаТабличнойЧасти.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Предупреждение("Выбранное подразделение не соответствует организации!");
	КонецЕсли;

КонецПроцедуры

Процедура СчетЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = мСписокСчетовБУ;

	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;

	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();
	
КонецПроцедуры

Функция СформироватьСписокСчетовЗатратБУ()

	СписокСчетов  = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы);
	
	Возврат СписокСчетов;

КонецФункции // СформироватьСписокСчетовЗатратБУ()
 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()

	мСписокСчетовБУ = СформироватьСписокСчетовЗатратБУ();

	// Проверка однофирменности
	РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "РегистрСведенийСписок");

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеТекущейОрганизации" Тогда
		РаботаСДиалогами.УстановитьОтборПоОрганизации(ЭтаФорма,, глЗначениеПеременной("ОсновнаяОрганизация"), "РегистрСведенийСписок", Истина);
	КонецЕсли;
	
КонецПроцедуры


Процедура РегистрСведенийСписокПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПодразделенияОрганизаций.Владелец КАК Организация
			|ИЗ
			|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
			|
			|ГДЕ
			|	ПодразделенияОрганизаций.Ссылка = &ТекущееПодразделение");
			
			Запрос.УстановитьПараметр("ТекущееПодразделение", ТекущиеДанные.Подразделение);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Выборка.Следующий();
			
			ТекущиеДанные.Организация = Выборка.Организация;
			
		КонецЕсли;
	Иначе
		Если Не ТекущиеДанные.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат Тогда
			Элементыформы.РегистрСведенийСписок.Колонки.СписокСтатейЗатрат.Доступность = Ложь;
		Иначе
			Элементыформы.РегистрСведенийСписок.Колонки.СписокСтатейЗатрат.Доступность = Истина;
		КонецЕсли;
		
		Элементыформы.РегистрСведенийСписок.Колонки.СчетПрямыхЗатрат.Доступность = (ТекущиеДанные.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
		Элементыформы.РегистрСведенийСписок.Колонки.ПодразделениеЗатрат.Доступность = (ТекущиеДанные.БазаРаспределения = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РегистрСведенийСписокБазаРаспределенияПриИзменении(Элемент)
	
	Если Не Элемент.Значение = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат 
		И Не ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.СписокСтатейЗатрат = Справочники.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка() Тогда
		Если Вопрос("Установлена база распределения: " + Элемент.Значение + ",
			|для которой указание списка прямых затрат некорректно.
			|Очистить список прямых затрат?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да) <> КодВозвратаДиалога.Нет Тогда
			
			ЭлементыФормы.РегистрСведенийСписок.ТекущиеДанные.СписокСтатейЗатрат = Справочники.СписокСтатейЗатратВключенныхВБазуРаспределенияКосвенныхРасходов.ПустаяСсылка();
			Элементыформы.РегистрСведенийСписок.Колонки.СписокСтатейЗатрат.Доступность = Ложь;
			
		Иначе
			Элемент.Значение = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат; 
			Элементыформы.РегистрСведенийСписок.Колонки.СписокСтатейЗатрат.Доступность = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Элементыформы.РегистрСведенийСписок.Колонки.СчетПрямыхЗатрат.Доступность = (Элемент.Значение = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
	Элементыформы.РегистрСведенийСписок.Колонки.ПодразделениеЗатрат.Доступность = (Элемент.Значение = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка);
	
	Элементыформы.РегистрСведенийСписок.Колонки.СписокСтатейЗатрат.Доступность = (Элемент.Значение = Перечисления.БазыРаспределенияКосвенныхРасходов.ОтдельныеСтатьиПрямыхЗатрат);
	
		Если Не Элемент.Значение = Перечисления.БазыРаспределенияКосвенныхРасходов.Выручка Тогда
			Элементыформы.РегистрСведенийСписок.ТекущиеДанные.СчетПрямыхЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Элементыформы.РегистрСведенийСписок.ТекущиеДанные.ПодразделениеЗатрат = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;	
	
КонецПроцедуры

Процедура РегистрСведенийСписокСчетПрямыхЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора("ФормаВыбора", Элемент, );

	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Использование = Истина;
	
	СписокСчетов  = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства);
	
	ФормаВыбора.ПланСчетовСписок.Отбор.Ссылка.Значение      = 	СписокСчетов;
	ФормаВыбора.ЭлементыФормы.Список.НастройкаОтбора.Ссылка.Доступность = Ложь;
	ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;

	ФормаВыбора.Открыть();

КонецПроцедуры

Процедура РегистрСведенийСписокСчетПрямыхЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Предприниматели = Новый Соответствие;

