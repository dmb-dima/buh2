Перем СтрокаДопустимыхКодов;
Перем АдресныеСведения;
Перем АдресныеСведенияИБ;
Перем ИспользованныеКоды;
Перем АльтернативныеНазвания;

Перем КлассификаторАдресов_Кодировка;
Перем КлассификаторУлиц_Кодировка;
Перем КлассификаторДомов_Кодировка;
Перем КлассификаторСокращений_Кодировка;

Перем КлассификаторАдресов_Формат;
Перем КлассификаторУлиц_Формат;
Перем КлассификаторДомов_Формат;
Перем КлассификаторСокращений_Формат;
Перем СписокРегионов;

Перем ФорматыКлассификаторов;
Перем КодировкиКлассификаторов;

//  Процедура устанавливает заданную кодировку для файла XBASE
//
// Параметры:
//  ФайлБД - Объект с отрытым файлом XBASE.
//
Процедура УстановитьКодировку(ФайлБД, Уровень)
	
	КодировкаБД = КодировкиКлассификаторов[Уровень];
	Если КодировкаБД <> Неопределено Тогда
		ФайлБД.Кодировка = КодировкаБД;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЗАГРУЗКИ АДРЕСНОЙ ИНФОРМАЦИИ

// Процедура загружает в справочник адресный классификатор один адресный 
// элемент по переданным параметрам.
//
// Параметры:
//  КодЭлемента - значение кода для адресного элемента.
//  Наименование - значение наименования для адресного элемента.
//  Сокращение - значение сокращения для адресного элемента.
//  Индекс - значение индекса для адресного элемента.
//  МножительСдвига - множитель для окончательного сдвига кода ( см. вычисление выражения).
//  ДелительСдвига - делитель для первичного сдвига кода ( см. вычисление выражения).
//
Процедура ЗагрузитьАдресныйЭлемент(Знач КодЭлемента, Знач Наименование, Знач Сокращение, Знач Индекс, Знач МножительСдвига, Знач ДелительСдвига = 1)

	Если СокрЛП(Строка(КодЭлемента)) = "" Тогда
		Возврат;
	КонецЕсли;

	Если СокрЛП(Строка(Наименование)) = "" Тогда
		Возврат;
	КонецЕсли;

	Если СокрЛП(Строка(Сокращение)) = "" Тогда
		Возврат;
	КонецЕсли;

	Наименование = СокрЛП(Наименование);
	Сокращение   = СокрЛП(Сокращение);
	
	Если (Формат2003) И (СтрДлина(КодЭлемента) < 19) Тогда
		Если Прав(КодЭлемента, 2) <> "00" Тогда
			СтрокаАльтернативныхНазваний = АльтернативныеНазвания.Добавить();
			КодЭлемента  = Число(СтрЗаменить(КодЭлемента, " ", "0"));
			СтрокаАльтернативныхНазваний.Код = Цел(КодЭлемента / ДелительСдвига) * МножительСдвига * 100 + КодЭлемента%ДелительСдвига;
			СтрокаАльтернативныхНазваний.Наименование = Наименование;
			СтрокаАльтернативныхНазваний.Сокращение = Сокращение;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	КодЭлемента  = Число(СтрЗаменить(КодЭлемента, " ", "0"));
	КодЭлемента = Цел(КодЭлемента / ДелительСдвига) * МножительСдвига * 100 + КодЭлемента%ДелительСдвига;

	КодРегиона = Цел(КодЭлемента / УправлениеКонтактнойИнформацией.МаскаРегиона());
	
	КодРайона            = Цел(КодЭлемента / УправлениеКонтактнойИнформацией.МаскаРайона()) % 1000;
	КодГорода            = Цел(КодЭлемента / УправлениеКонтактнойИнформацией.МаскаГорода()) % 1000;
	КодНаселенногоПункта = Цел(КодЭлемента / УправлениеКонтактнойИнформацией.МаскаНасПункта()) % 1000;
	КодУлицы             = Цел(КодЭлемента / УправлениеКонтактнойИнформацией.МаскаУлицы())% 10000;

	Если НЕ ЗначениеЗаполнено(Индекс) Тогда
		Индекс = "";
	Иначе
		Индекс = СтрЗаменить(Формат(Число(Индекс),"ЧЦ=6,ЧВН="), " " ,"");
		Индекс = СтрЗаменить(Индекс, Символ(160) ,"");
	КонецЕсли;
	
	
	Если (Врег(Сокращение) = "ДОМ") И (Цел(КодЭлемента / УправлениеКонтактнойИнформацией.МаскаДома())% 10000 = 0) Тогда
		// дом с нулевым кодом дома - когда загружаем классификатор улиц формата 2002 года
		ТексЗапросаПоискДома = "ВЫБРАТЬ
		                       |	АдресныйКлассификатор.Код
		                       |ИЗ
		                       |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
		                       |
		                       |ГДЕ
		                       |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде И
		                       |	АдресныйКлассификатор.КодРайонаВКоде = &КодРайонаВКоде И
		                       |	АдресныйКлассификатор.КодГородаВКоде = &КодГородаВКоде И
		                       |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде = &КодНаселенногоПунктаВКоде И
		                       |	АдресныйКлассификатор.КодУлицыВКоде = &КодУлицыВКоде И
		                       |	АдресныйКлассификатор.Наименование = &Наименование И
		                       |	АдресныйКлассификатор.ТипАдресногоЭлемента = 6";
		
		ЗапросПоискДома = Новый Запрос(ТексЗапросаПоискДома);
		
		ЗапросПоискДома.УстановитьПараметр("КодРегионаВКоде", КодРегиона);
		ЗапросПоискДома.УстановитьПараметр("КодРайонаВКоде", КодРайона);
		ЗапросПоискДома.УстановитьПараметр("КодГородаВКоде", КодГорода);
		ЗапросПоискДома.УстановитьПараметр("КодНаселенногоПунктаВКоде", КодНаселенногоПункта);
		ЗапросПоискДома.УстановитьПараметр("КодУлицыВКоде", КодУлицы);
		ЗапросПоискДома.УстановитьПараметр("Наименование", Наименование);
		
		Выборка = ЗапросПоискДома.Выполнить().Выбрать();

		Если Выборка.Следующий() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавилиДом = Ложь;
		
		Для Сч = 1 По 999 Цикл
			КодДома = КодРегиона * УправлениеКонтактнойИнформацией.МаскаРегиона()
			        + КодРайона * УправлениеКонтактнойИнформацией.МаскаРайона()
			        + КодГорода * УправлениеКонтактнойИнформацией.МаскаГорода()
			        + КодНаселенногоПункта * УправлениеКонтактнойИнформацией.МаскаНасПункта()
			        + КодУлицы * УправлениеКонтактнойИнформацией.МаскаУлицы()
			        + Сч * УправлениеКонтактнойИнформацией.МаскаДома();
			
			Если АдресныеСведенияИБ[КодДома] = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИспользованныеКоды[КодДома] = Истина Тогда  // и уже в добавленных записях
				Продолжить;
			КонецЕсли;
			
			ДобавилиДом = Истина;
			КодЭлемента = КодДома;
			Прервать;
			
		КонецЦикла;
		
		Если НЕ ДобавилиДом Тогда
			Сообщить("Не удалось добавить адресный элемент """ + КодЭлемента + "   " + Наименование + "   " + Сокращение, СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИспользованныеКоды[КодЭлемента] = Истина Тогда  //уже добавили элемент с таким кодом
		Сообщить("Не удалось добавить адресную информацию о """ + Наименование + " " + Сокращение + " (" + КодЭлемента + ")""", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;

	ИспользованныеКоды.Вставить(КодЭлемента, Истина);
	
	ЗаписьАдреса = АдресныеСведения.Добавить();
	ЗаписьАдреса.Код = КодЭлемента;

	ЗаписьАдреса.Наименование = Наименование;
	ЗаписьАдреса.АльтернативныеНазвания = "";
	ЗаписьАдреса.Сокращение = Сокращение;
	ЗаписьАдреса.Индекс = Индекс;
	ЗаписьАдреса.ТипАдресногоЭлемента = УправлениеКонтактнойИнформацией.ПолучитьТипАдресногоЭлемента(КодЭлемента);
	
	ЗаписьАдреса.КодРегионаВКоде           = КодРегиона;
	ЗаписьАдреса.КодРайонаВКоде            = КодРайона;
	ЗаписьАдреса.КодГородаВКоде            = КодГорода;
	ЗаписьАдреса.КодНаселенногоПунктаВКоде = КодНаселенногоПункта;
	ЗаписьАдреса.КодУлицыВКоде             = КодУлицы;
	
	Если АдресныеСведенияИБ[КодЭлемента] = Истина Тогда
		 АдресныеСведенияИБ[КодЭлемента] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура загружает адресные классификаторы из файлов.
//
// Параметры:
//  ФайлАдресногоКлассификатора - имя файла адресного классификатора.
//  ФайлКлассификатораУлиц - имя файла классификатора улиц.
//  ФайлКлассификатораДомов - имя файла классификатора домов.
//  ФайлКлассификатораСокращений - имя файла классификатора сокращений.
//  СписокРегионов - список значений с регионами, адресную информацию по которым 
//                   необходимо обновить (другие не обрабатываются).
//
Процедура ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора, ФайлКлассификатораУлиц, ФайлКлассификатораДомов, ФайлКлассификатораСокращений, СписокРегионов) Экспорт

	ЗагрузитьРегионы();
	
	Сообщить(" ");
	Сообщить("Анализ исходных таблиц.");
	Сообщить(" ");
	Сообщить("Классификатор адресов:");
	Сообщить(ФайлАдресногоКлассификатора);
	Сообщить(ЭлементыФормы.НадписьКлассификатораАдресов.Заголовок);
	Сообщить(" ");
	Сообщить("Классификатор улиц:");
	Сообщить(ФайлКлассификатораУлиц);
	Сообщить(ЭлементыФормы.НадписьКлассификатораУлиц.Заголовок);
	Сообщить(" ");
	Сообщить("Классификатор домов:");
	Сообщить(ФайлКлассификатораДомов);
	Сообщить(ЭлементыФормы.НадписьКлассификатораДомов.Заголовок);
	Сообщить(" ");
	Сообщить("Классификатор сокращений:");
	Сообщить(ФайлКлассификатораСокращений);
	Сообщить(ЭлементыФормы.НадписьКлассификатораСокращений.Заголовок);
	Сообщить(" ");
	
	ФормаИндикацииХодаЗагрузки = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка адресной информации";
	ФормаИндикацииХодаЗагрузки.Открыть();
	
	СтрокаДопустимыхКодов = "_";
	
	Для каждого Элемент Из СписокРегионов Цикл
		Если Элемент.Пометка Тогда
			
			ИспользованныеКоды = Новый Соответствие();
			
			АльтернативныеНазвания  = Новый ТаблицаЗначений();
			АльтернативныеНазвания.Колонки.Добавить("Код");
			АльтернативныеНазвания.Колонки.Добавить("Наименование");
			АльтернативныеНазвания.Колонки.Добавить("Сокращение");

			АдресныеСведения = Новый ТаблицаЗначений();
			АдресныеСведения.Колонки.Добавить("Код");
			АдресныеСведения.Колонки.Добавить("КодРегионаВКоде");
			АдресныеСведения.Колонки.Добавить("Наименование");
			АдресныеСведения.Колонки.Добавить("АльтернативныеНазвания");
			АдресныеСведения.Колонки.Добавить("Сокращение");
			АдресныеСведения.Колонки.Добавить("Индекс");
			АдресныеСведения.Колонки.Добавить("ТипАдресногоЭлемента");
			АдресныеСведения.Колонки.Добавить("КодРайонаВКоде");
			АдресныеСведения.Колонки.Добавить("КодГородаВКоде");
			АдресныеСведения.Колонки.Добавить("КодНаселенногоПунктаВКоде");
			АдресныеСведения.Колонки.Добавить("КодУлицыВКоде");
			

			ТексЗапроса = "ВЫБРАТЬ
			              |	АдресныйКлассификатор.Код,
			              |	АдресныйКлассификатор.КодРегионаВКоде,
			              |	АдресныйКлассификатор.Наименование,
			              |	АдресныйКлассификатор.АльтернативныеНазвания,
			              |	АдресныйКлассификатор.Сокращение,
			              |	АдресныйКлассификатор.Индекс,
			              |	АдресныйКлассификатор.ТипАдресногоЭлемента,
			              |	АдресныйКлассификатор.КодРайонаВКоде,
			              |	АдресныйКлассификатор.КодГородаВКоде,
			              |	АдресныйКлассификатор.КодНаселенногоПунктаВКоде,
			              |	АдресныйКлассификатор.КодУлицыВКоде
			              |ИЗ
			              |	РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
			              |
			              |ГДЕ
			              |	АдресныйКлассификатор.КодРегионаВКоде = &КодРегионаВКоде";
			
			Запрос = Новый Запрос(ТексЗапроса);
			Запрос.УстановитьПараметр("КодРегионаВКоде", Элемент.Значение);
			
			РезультатЗапросаСведений = Запрос.Выполнить();
			МассивСведений = РезультатЗапросаСведений.Выгрузить().ВыгрузитьКолонку("Код");
			АдресныеСведенияИБ = Новый Соответствие();
			Для Сч = 0 По МассивСведений.ВГраница() Цикл
				АдресныеСведенияИБ.Вставить(МассивСведений[Сч], Истина);
			КонецЦикла;

			ВыражениеДляИндекса = "SUBSTR(CODE,1,2)='" + Формат(Элемент.Значение, "ЧЦ=2;ЧВН=") + "'";
			КлассификаторАдресов = Новый XBase(ФайлАдресногоКлассификатора);

			Если КлассификаторАдресов.Открыта() Тогда
				
				ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружается адресный классификатор из файла " + ФайлАдресногоКлассификатора;
				ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Позиция в файле классификатора:";
				ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = КлассификаторАдресов.КоличествоЗаписей();
				ФормаИндикацииХодаЗагрузки.Значение = 0;

				// проверяем структуру адресных полей
				Если (КлассификаторАдресов.поля.Найти("CODE") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("NAME") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("SOCR") = Неопределено)
				 ИЛИ (КлассификаторАдресов.поля.Найти("INDEX") = Неопределено) Тогда
					Сообщить("Классификатор адресов неправильной структуры. Не загружен!", СтатусСообщения.Важное);

				Иначе 

					КлассификаторАдресов.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
					КлассификаторАдресов.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
					КлассификаторАдресов.ЗакрытьФайл();
					
					КлассификаторАдресов = Новый XBase(ФайлАдресногоКлассификатора, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
					КлассификаторАдресов.ТекущийИндекс = КлассификаторАдресов.индексы.Найти("MAIN");
						
					УстановитьКодировку(КлассификаторАдресов, 1);
					
					// если в структуре есть необходимые поля - загружаем
					КлассификаторАдресов.Первая();
					
					Если НЕ КлассификаторАдресов.ВКонце() Тогда
						Формат2003 = (ФорматыКлассификаторов[1] = 3);
						ЗагрузитьАдресныйЭлемент(КлассификаторАдресов.CODE,
						                         КлассификаторАдресов.NAME,
						                         КлассификаторАдресов.SOCR,
						                         КлассификаторАдресов.INDEX,
						                         1000000000000, ?(Формат2003, 100, 1));

						Пока КлассификаторАдресов.Следующая() Цикл
							ЗагрузитьАдресныйЭлемент(КлассификаторАдресов.CODE,
							                         КлассификаторАдресов.NAME,
							                         КлассификаторАдресов.SOCR,
							                         КлассификаторАдресов.INDEX,
							                         1000000000000, ?(Формат2003, 100, 1));
							ОбработкаПрерыванияПользователя();
							ФормаИндикацииХодаЗагрузки.Значение = КлассификаторАдресов.НомерЗаписи();
						КонецЦикла;
				
					КонецЕсли;
				
					КлассификаторАдресов.ЗакрытьФайл();
				
				КонецЕсли;
				
				Сообщить("Выполнена загрузка адресов по региону " + Элемент.Представление);
				
			КонецЕсли;

			КлассификаторУлиц = Новый XBase(ФайлКлассификатораУлиц);

			Если КлассификаторУлиц.Открыта() Тогда

				ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружается классификатор улиц из файла " + ФайлКлассификатораУлиц;
				ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = КлассификаторУлиц.КоличествоЗаписей();

				// проверяем структуру адресных полей
				Если (КлассификаторУлиц.поля.Найти("CODE") = Неопределено)
				 ИЛИ (КлассификаторУлиц.поля.Найти("NAME") = Неопределено)
				 ИЛИ (КлассификаторУлиц.поля.Найти("SOCR") = Неопределено)
				 ИЛИ (КлассификаторУлиц.поля.Найти("INDEX") = Неопределено) Тогда
					Сообщить("Классификатор улиц неправильной структуры. Не загружен!", СтатусСообщения.Важное);

				Иначе
					
					КлассификаторУлиц.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
					КлассификаторУлиц.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
					КлассификаторУлиц.ЗакрытьФайл();
					
					КлассификаторУлиц = Новый XBase(ФайлКлассификатораУлиц, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
					КлассификаторУлиц.ТекущийИндекс = КлассификаторУлиц.индексы.Найти("MAIN");

					УстановитьКодировку(КлассификаторУлиц, 2);

					// если в структуре есть необходимые поля - загружаем
					КлассификаторУлиц.Первая();
					Если НЕ КлассификаторУлиц.ВКонце() Тогда
						Формат2003 = (ФорматыКлассификаторов[2] = 3);
						ЗагрузитьАдресныйЭлемент(КлассификаторУлиц.CODE,
						                         КлассификаторУлиц.NAME,
						                         КлассификаторУлиц.SOCR,
						                         КлассификаторУлиц.INDEX,
						                         100000000, ?(Формат2003, 100, 1));

						Пока КлассификаторУлиц.Следующая() Цикл
							
							// проверка на загрузку дома
							КодЭлемента = КлассификаторУлиц.CODE;
							
							ЗагрузитьАдресныйЭлемент(КодЭлемента,
							                         КлассификаторУлиц.NAME,
							                         КлассификаторУлиц.SOCR,
							                         КлассификаторУлиц.INDEX,
							                         100000000, ?(Формат2003, 100, 1));
							ОбработкаПрерыванияПользователя();
							ФормаИндикацииХодаЗагрузки.Значение = КлассификаторУлиц.НомерЗаписи();
						КонецЦикла;
						
					КонецЕсли;
					
					КлассификаторУлиц.ЗакрытьФайл();
					
				КонецЕсли;
				
				Сообщить("Выполнена загрузка улиц по региону " + Элемент.Представление);
				
			КонецЕсли;
			
			КлассификаторДомов = Новый XBase(ФайлКлассификатораДомов);

			Если КлассификаторДомов.Открыта() Тогда

				ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружается классификатор домов из файла " + ФайлКлассификатораДомов;
				ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = КлассификаторДомов.КоличествоЗаписей();

				// проверяем структуру адресных полей
				Если (КлассификаторДомов.поля.Найти("CODE") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("NAME") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("SOCR") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("KORP") = Неопределено)
				 ИЛИ (КлассификаторДомов.поля.Найти("INDEX") = Неопределено) Тогда
					Сообщить("Классификатор домов неправильной структуры. Не загружен!", СтатусСообщения.Важное);

				Иначе 
					
					КлассификаторДомов.индексы.Добавить("MAIN","RECNO()", , , ВыражениеДляИндекса);
					КлассификаторДомов.СоздатьИндексныйФайл(КаталогВременныхФайлов() + "mainkldr.cdx");
					КлассификаторДомов.ЗакрытьФайл();
						
					КлассификаторДомов = Новый XBase(ФайлКлассификатораДомов, КаталогВременныхФайлов() + "mainkldr.cdx", Истина);
					КлассификаторДомов.ТекущийИндекс = КлассификаторДомов.индексы.Найти("MAIN");

					УстановитьКодировку(КлассификаторДомов, 3);

					КлассификаторДомов.Первая();
					Если НЕ КлассификаторДомов.ВКонце() Тогда
						Дом = КлассификаторДомов.NAME;
						Корпус = КлассификаторДомов.KORP;
						ЗагрузитьАдресныйЭлемент(КлассификаторДомов.CODE,
												 СокрЛП("" + Дом) + ?(ПустаяСтрока(СокрЛП("" + Корпус)), "", "К" + СокрЛП("" + Корпус)),
												 КлассификаторДомов.SOCR,
												 КлассификаторДомов.INDEX,
												 10000);

						Пока КлассификаторДомов.Следующая() Цикл
							Дом = КлассификаторДомов.NAME;
							Корпус = КлассификаторДомов.KORP;
							ЗагрузитьАдресныйЭлемент(КлассификаторДомов.CODE,
													 СокрЛП("" + Дом) + ?(ПустаяСтрока(СокрЛП("" + Корпус)), "", "К" + СокрЛП("" + Корпус)),
													 КлассификаторДомов.SOCR,
													 КлассификаторДомов.INDEX,
													 10000);
							ОбработкаПрерыванияПользователя();
							ФормаИндикацииХодаЗагрузки.Значение = КлассификаторДомов.НомерЗаписи();
						КонецЦикла;
							
					КонецЕсли;
						
					КлассификаторДомов.ЗакрытьФайл();
						
				КонецЕсли;
				
				Сообщить("Выполнена загрузка домов по региону " + Элемент.Представление);
				
			КонецЕсли;

			ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Подготавливаем данные к записи по региону ";
			ФормаИндикацииХодаЗагрузки.КомментарийЗначения = СписокРегионов.НайтиПоЗначению(Элемент.Значение).Представление;
			ФормаИндикацииХодаЗагрузки.Значение = 0;
			
			ВыборкаЗапроса = РезультатЗапросаСведений.Выбрать();
			Для Сч = 0 По МассивСведений.ВГраница() Цикл
				Если АдресныеСведенияИБ[МассивСведений[Сч]] = Истина Тогда
					Если ВыборкаЗапроса.НайтиСледующий(МассивСведений[Сч], "Код") Тогда
						ЗаписьАдреса = АдресныеСведения.Добавить();
						
						ЗаписьАдреса.Код = ВыборкаЗапроса.Код;
						
						ЗаписьАдреса.Наименование              = ВыборкаЗапроса.Наименование;
						ЗаписьАдреса.АльтернативныеНазвания    = ВыборкаЗапроса.АльтернативныеНазвания;
						ЗаписьАдреса.Сокращение                = ВыборкаЗапроса.Сокращение;
						ЗаписьАдреса.Индекс                    = ВыборкаЗапроса.Индекс;
						ЗаписьАдреса.ТипАдресногоЭлемента      = ВыборкаЗапроса.ТипАдресногоЭлемента;
						
						ЗаписьАдреса.КодРегионаВКоде           = ВыборкаЗапроса.КодРегионаВКоде;
						ЗаписьАдреса.КодРайонаВКоде            = ВыборкаЗапроса.КодРайонаВКоде;
						ЗаписьАдреса.КодГородаВКоде            = ВыборкаЗапроса.КодГородаВКоде;
						ЗаписьАдреса.КодНаселенногоПунктаВКоде = ВыборкаЗапроса.КодНаселенногоПунктаВКоде;
						ЗаписьАдреса.КодУлицыВКоде             = ВыборкаЗапроса.КодУлицыВКоде;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаАльтернативногоНазвания Из АльтернативныеНазвания Цикл
				ЗаписьАдреса = АдресныеСведения.Найти(Цел(Число(СтрокаАльтернативногоНазвания.Код) / 100) * 100, "Код");
				Если ЗаписьАдреса <> Неопределено Тогда
					ЗаписьАдреса.АльтернативныеНазвания = ЗаписьАдреса.АльтернативныеНазвания + СтрокаАльтернативногоНазвания.Наименование + " " + СтрокаАльтернативногоНазвания.Сокращение + ",";
				КонецЕсли;
			КонецЦикла;
			
			// очищаем регион
			НаборАдресныхСведений = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
			НаборАдресныхСведений.Отбор.КодРегионаВКоде.Использование = Истина;
			НаборАдресныхСведений.Отбор.КодРегионаВКоде.Значение = Элемент.Значение;
			НаборАдресныхСведений.Записать(Истина);

			// заносим новые данные порциями
			ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = АдресныеСведения.Количество();
			ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Записываем данные по региону " + Символы.ПС + СписокРегионов.НайтиПоЗначению(Элемент.Значение).Представление;
			ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Записано данных:";

			ФормаИндикацииХодаЗагрузки.Значение = 0;
			
			Для каждого АдреснаяЗапись из АдресныеСведения Цикл
				
				ЗаписьАдреса = НаборАдресныхСведений.Добавить();
				
				ЗаписьАдреса.Код = АдреснаяЗапись.Код;
				
				ЗаписьАдреса.Наименование              = АдреснаяЗапись.Наименование;
				ЗаписьАдреса.АльтернативныеНазвания    = АдреснаяЗапись.АльтернативныеНазвания;
				ЗаписьАдреса.Сокращение                = АдреснаяЗапись.Сокращение;
				ЗаписьАдреса.Индекс                    = АдреснаяЗапись.Индекс;
				ЗаписьАдреса.ТипАдресногоЭлемента      = АдреснаяЗапись.ТипАдресногоЭлемента;
				
				ЗаписьАдреса.КодРегионаВКоде           = АдреснаяЗапись.КодРегионаВКоде;
				ЗаписьАдреса.КодРайонаВКоде            = АдреснаяЗапись.КодРайонаВКоде;
				ЗаписьАдреса.КодГородаВКоде            = АдреснаяЗапись.КодГородаВКоде;
				ЗаписьАдреса.КодНаселенногоПунктаВКоде = АдреснаяЗапись.КодНаселенногоПунктаВКоде;
				ЗаписьАдреса.КодУлицыВКоде             = АдреснаяЗапись.КодУлицыВКоде;
				
				ФормаИндикацииХодаЗагрузки.Значение = ФормаИндикацииХодаЗагрузки.Значение + 1;
				
			КонецЦикла;
			
			НаборАдресныхСведений.Записать(Ложь);

			
		КонецЕсли;
	КонецЦикла;
	
	КлассификаторСокращений = Новый XBase(ФайлКлассификатораСокращений,,Истина);
	
	Если КлассификаторСокращений.Открыта() Тогда
		
		УстановитьКодировку(КлассификаторСокращений, 4);
		
		СправочникКлассификатора = Справочники.АдресныеСокращения;
		
		// проверяем структуру адресных полей
		Если (КлассификаторСокращений.поля.Найти("KOD_T_ST") = Неопределено)
		 ИЛИ (КлассификаторСокращений.поля.Найти("SOCRNAME") = Неопределено)
		 ИЛИ (КлассификаторСокращений.поля.Найти("SCNAME") = Неопределено)
		 ИЛИ (КлассификаторСокращений.поля.Найти("LEVEL") = Неопределено) Тогда
			Сообщить("Классификатор сокращений неправильной структуры. Не загружен!", СтатусСообщения.Важное);
			
		Иначе
			// если в структуре есть необходимые поля - загружаем
			КлассификаторСокращений.Первая();
			Если НЕ КлассификаторСокращений.ВКонце() Тогда
				ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружается классификатор сокращений из файла " + ФайлКлассификатораСокращений;
				ФормаИндикацииХодаЗагрузки.МаксимальноеЗначение = КлассификаторСокращений.КоличествоЗаписей();
				
				Фасет = Число(СокрЛП(КлассификаторСокращений.KOD_T_ST));
				ОбъектАдреса = СправочникКлассификатора.НайтиПоКоду(Фасет);
				Если НЕ ЗначениеЗаполнено(ОбъектАдреса) Тогда
					ОбъектАдреса = СправочникКлассификатора.СоздатьЭлемент();
					ОбъектАдреса.Код = Фасет;
				Иначе
					ОбъектАдреса = ОбъектАдреса.ПолучитьОбъект()
				КонецЕсли;
				
				ОбъектАдреса.Наименование = СокрЛП(КлассификаторСокращений.SOCRNAME);
				ОбъектАдреса.Сокращение = СокрЛП(КлассификаторСокращений.SCNAME);
				ОбъектАдреса.Уровень = Число(КлассификаторСокращений.LEVEL);
				
				ОбъектАдреса.Записать();
				
				Пока КлассификаторСокращений.Следующая() Цикл
					ОбработкаПрерыванияПользователя();
					ФормаИндикацииХодаЗагрузки.Значение = КлассификаторСокращений.НомерЗаписи();
					Фасет = Число(СокрЛП(КлассификаторСокращений.KOD_T_ST));
					ОбъектАдреса = СправочникКлассификатора.НайтиПоКоду(Фасет);
					Если НЕ ЗначениеЗаполнено(ОбъектАдреса) Тогда
						ОбъектАдреса = СправочникКлассификатора.СоздатьЭлемент();
						ОбъектАдреса.Код = Фасет;
					Иначе
						ОбъектАдреса = ОбъектАдреса.ПолучитьОбъект()
					КонецЕсли;
					
					ОбъектАдреса.Наименование = СокрЛП(КлассификаторСокращений.SOCRNAME);
					ОбъектАдреса.Сокращение = СокрЛП(КлассификаторСокращений.SCNAME);
					ОбъектАдреса.Уровень = Число(КлассификаторСокращений.LEVEL);
					
					ОбъектАдреса.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
			КлассификаторСокращений.ЗакрытьФайл();
		
			Сообщить("Выполнена загрузка классификатора сокращений.");
		
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаИндикацииХодаЗагрузки.Закрыть();

	Предупреждение("Загрузка завершена!");

КонецПроцедуры

// Процедура загружает регионы из внутренних таблиц.
//
// Параметры:
//  нет
//
Процедура ЗагрузитьРегионы() Экспорт

	ФормаИндикацииХодаЗагрузки = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	ФормаИндикацииХодаЗагрузки.НаименованиеОбработкиДанных = "Загрузка адресной информации";
	ФормаИндикацииХодаЗагрузки.Открыть();
	
	АдресныеСведения = РегистрыСведений.АдресныйКлассификатор.СоздатьНаборЗаписей();
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаРегионов");
	
	ВсегоЗаписей = КлассификаторАдресов.ВысотаТаблицы - 1;
	ФормаИндикацииХодаЗагрузки.КомментарийОбработкиДанных = "Загружаются регионы из внутренних таблиц.";
	ФормаИндикацииХодаЗагрузки.КомментарийЗначения = "Загружено:";

	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		ФормаИндикацииХодаЗагрузки.Значение = (Сч - 1) * 100 / ВсегоЗаписей;

		ЗаписьАдреса = РегистрыСведений.АдресныйКлассификатор.СоздатьМенеджерЗаписи();
		
		ЗаписьАдреса.Код = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		КодРегиона = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаРегиона());
		
		ЗаписьАдреса.Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		ЗаписьАдреса.Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		ЗаписьАдреса.Индекс       = СокрЛП(КлассификаторАдресов.Область(Сч, 4, Сч, 4).Текст);
		ЗаписьАдреса.ТипАдресногоЭлемента = 1;
		
		ЗаписьАдреса.КодРегионаВКоде           = КодРегиона;
		ЗаписьАдреса.КодРайонаВКоде            = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаРайона()) % 1000;
		ЗаписьАдреса.КодГородаВКоде            = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаГорода()) % 1000;
		ЗаписьАдреса.КодНаселенногоПунктаВКоде = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаНасПункта()) % 1000;
		ЗаписьАдреса.КодУлицыВКоде             = Цел(ЗаписьАдреса.Код / УправлениеКонтактнойИнформацией.МаскаУлицы())% 10000;
		
		ЗаписьАдреса.Записать(Истина);
		
	КонецЦикла;
	
	ФормаИндикацииХодаЗагрузки.Закрыть();

	Сообщить("Обновлена информация о регионах.");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОПРЕДЕЛЕНИЯ КЛАССИФИКАТОРОВ
Функция СуществуетФайл(ПолноеИмя)
	
	ФайлПроверки = Новый Файл(ПолноеИмя);
	
	Возврат ФайлПроверки.Существует();
	
КонецФункции

Функция ЭтоФайлБД(ПолноеИмя)
	
	База = Новый XBase(ПолноеИмя,, Истина);

	Результат = База.Открыта();
	
	База.ЗакрытьФайл();
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКодировку(ПолноеИмя)
	
	База = Новый XBase(ПолноеИмя,, Истина);
	
	Если База.Следующая() Тогда
		Попытка
			СтрокаПоля = База.SOCR;
			Нашли = Истина;
			
		Исключение
			Нашли = Ложь;
			
		КонецПопытки;
		
		Если Не Нашли Тогда
			Попытка
				СтрокаПоля = База.SOCRNAME;
			Исключение
				База.ЗакрытьФайл();
				Возврат База.Кодировка;
				
			КонецПопытки;
		КонецЕсли;
		
		Для Сч = 1 По 3 Цикл
			КодПервого = КодСимвола(Сред(СокрЛП(СтрокаПоля), Сч, 1));
			Если (КодПервого <> -1)
			   //И ((КодПервого <= 30) ИЛИ (КодПервого >= 200))
			   И ((КодПервого < 1040) ИЛИ (КодПервого > 1103)) Тогда
				Если  База.Кодировка = КодировкаXBase.ANSI Тогда
					База.ЗакрытьФайл();
					Возврат КодировкаXBase.OEM;
				Иначе
					База.ЗакрытьФайл();
					Возврат КодировкаXBase.ANSI;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		База.ЗакрытьФайл();
		Возврат База.Кодировка;

	Иначе
		База.ЗакрытьФайл();
		Возврат База.Кодировка;
		
	КонецЕсли;
	
КонецФункции

Функция ПоляСоответствуютУровнюКлассификатора(База, НомерУровня)
	
	Если НомерУровня = 1 Тогда
		Если (База.поля.Найти("CODE") = Неопределено)
		 ИЛИ (База.поля.Найти("NAME") = Неопределено)
		 ИЛИ (База.поля.Найти("SOCR") = Неопределено)
		 ИЛИ (База.поля.Найти("INDEX") = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НомерУровня = 2 Тогда
		Если (База.поля.Найти("CODE") = Неопределено)
		 ИЛИ (База.поля.Найти("NAME") = Неопределено)
		 ИЛИ (База.поля.Найти("SOCR") = Неопределено)
		 ИЛИ (База.поля.Найти("INDEX") = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НомерУровня = 3 Тогда
		Если (База.поля.Найти("CODE") = Неопределено)
		 ИЛИ (База.поля.Найти("NAME") = Неопределено)
		 ИЛИ (База.поля.Найти("SOCR") = Неопределено)
		 ИЛИ (База.поля.Найти("KORP") = Неопределено)
		 ИЛИ (База.поля.Найти("INDEX") = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НомерУровня = 4 Тогда
		Если (База.поля.Найти("KOD_T_ST") = Неопределено)
		 ИЛИ (База.поля.Найти("SOCRNAME") = Неопределено)
		 ИЛИ (База.поля.Найти("SCNAME") = Неопределено)
		 ИЛИ (База.поля.Найти("LEVEL") = Неопределено) Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьНомерФормата(НомерУровня, ПолноеИмя)
	
	База = Новый XBase(ПолноеИмя,, Истина);
	
	Если База.Открыта() Тогда
	
		// проверяем структуру полей
		Если НЕ ПоляСоответствуютУровнюКлассификатора(База, НомерУровня) Тогда
			Возврат -1;
		КонецЕсли;
		
		Если НомерУровня = 4 Тогда
			//Классификатор сокращений
			Возврат 0;
			
		КонецЕсли;
		
		// по длине кода определяем формат
		ДлинаКода = База.поля.Найти("CODE").Длина;
		
		Если НомерУровня = 1 Тогда
			Если ДлинаКода = 11 Тогда
				НомерФормата = 2;
				
			ИначеЕсли ДлинаКода = 13 Тогда
				НомерФормата = 3;
				
			Иначе
				НомерФормата = -1;
				
			КонецЕсли;
			
		ИначеЕсли НомерУровня = 2 Тогда
			Если ДлинаКода = 15 Тогда
				НомерФормата = 2;
				
			ИначеЕсли ДлинаКода = 17 Тогда
				НомерФормата = 3;
				
			Иначе
				НомерФормата = -1;
				
			КонецЕсли;
			
			
		ИначеЕсли НомерУровня = 3 Тогда
			Если ДлинаКода = 19 Тогда
				НомерФормата = 3;
				
			Иначе
				НомерФормата = -1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		База.ЗакрытьФайл();
		
		Возврат НомерФормата;
		
	Иначе
		Возврат -1;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуИнформацииКлассификатора(НомерУровня, ПолноеИмя)
	
	Если НЕ СуществуетФайл(ПолноеИмя) Тогда
		Возврат "Не обнаружен файл с классификатором!";
	КонецЕсли;
	
	Если НЕ ЭтоФайлБД(ПолноеИмя) Тогда
		Возврат "Указанный файл не является файлом таблицы БД!";
		
	КонецЕсли;
	
	НомерФормата = ПолучитьНомерФормата(НомерУровня, ПолноеИмя);
	
	Если НомерФормата = 1 Тогда
		СтрокаФормата = "";
		
	ИначеЕсли НомерФормата = 2  Тогда
		СтрокаФормата = " в формате  2002 года ";
		
	ИначеЕсли НомерФормата = 3  Тогда
		СтрокаФормата = " в формате  2003 года ";
		
	ИначеЕсли НомерФормата = -1  Тогда
		Возврат "Нарушена структура классификатора!";
		
	Иначе
		СтрокаФормата = "";
		
	КонецЕсли;
	
	КодировкаКлассификатора = ПолучитьКодировку(ПолноеИмя);
	
	Если НомерУровня = 1 Тогда
		НазваниеКлассификатора = "Классификатор адресов";
		
	ИначеЕсли НомерУровня = 2 Тогда
		НазваниеКлассификатора = "Классификатор улиц";
		
	ИначеЕсли НомерУровня = 3 Тогда
		НазваниеКлассификатора = "Классификатор домов";
		
	ИначеЕсли НомерУровня = 4 Тогда
		НазваниеКлассификатора = "Классификатор сокращений";
		
	Иначе
		Возврат "Неизвестный классификатор!";
		
	КонецЕсли;
	
	КодировкиКлассификаторов.Вставить(НомерУровня, КодировкаКлассификатора);
	ФорматыКлассификаторов.Вставить(НомерУровня, НомерФормата);
	
	Возврат НазваниеКлассификатора + СтрокаФормата + " (кодировка " + КодировкаКлассификатора + ")";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СЕРВИСА ЗАПОЛНЕНИЯ

Функция ПеревернутьСтроку(Перевертыш)
	
	Буфер = "";
	ДлинаСтроки = СтрДлина(Перевертыш);
	
	Для Сч = 1 По ДлинаСтроки Цикл
	     Буфер = Буфер + Сред(Перевертыш, ДлинаСтроки - Сч + 1, 1);
	КонецЦикла;
	
	Возврат Буфер;
	
КонецФункции

Процедура ЗаполнитьФайлы(ИмяФайла)
	
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		
		Буфер = ПеревернутьСтроку(ИмяФайла);
		Позиция = Найти(Буфер, "\");
		
		Если Позиция > 0 Тогда
			Каталог = ПеревернутьСтроку(Сред(Буфер, Позиция + 1));
		
		ИмяФайлаКлассификатораАдресов = Каталог + "\kladr.dbf";
		ИмяФайлаКлассификатораУлиц = Каталог + "\street.dbf";
		ИмяФайлаКлассификатораДомов = Каталог + "\doma.dbf";
		ИмяФайлаКлассификатораСокращений = Каталог + "\socrbase.dbf";
		
		Если ПустаяСтрока(ФайлАдресногоКлассификатора) Тогда
			ФайлАдресногоКлассификатора = ИмяФайлаКлассификатораАдресов;
		КонецЕсли;
		
		Если ПустаяСтрока(ФайлКлассификатораУлиц) Тогда
			ФайлКлассификатораУлиц = ИмяФайлаКлассификатораУлиц;
		КонецЕсли;
		
		Если ПустаяСтрока(ФайлКлассификатораДомов) Тогда
			ФайлКлассификатораДомов = ИмяФайлаКлассификатораДомов;
		КонецЕсли;
		
		Если ПустаяСтрока(ФайлКлассификатораСокращений) Тогда
			ФайлКлассификатораСокращений = ИмяФайлаКлассификатораСокращений;
		КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьКлассификатораАдресов.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(1, ФайлАдресногоКлассификатора);
	ЭлементыФормы.НадписьКлассификатораУлиц.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(2, ФайлКлассификатораУлиц);
	ЭлементыФормы.НадписьКлассификатораДомов.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(3, ФайлКлассификатораДомов);
	ЭлементыФормы.НадписьКлассификатораСокращений.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(4, ФайлКлассификатораСокращений);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ СПИСКА

//  Процедура устанавливает свойства элементов диалога в соответствии
// со значением реквизитов формы.
//
// Параметры:
//  Нет.
//
Процедура УстановитьНастройку()

КонецПроцедуры

Процедура ЗаполнитьСписокРегионов()
	
	СписокРегионов = Новый СписокЗначений;
	КлассификаторАдресов = РегистрыСведений.АдресныйКлассификатор.ПолучитьМакет("ТаблицаРегионов");
	
	Для Сч = 2 По КлассификаторАдресов.ВысотаТаблицы Цикл

		Код = Число(КлассификаторАдресов.Область(Сч, 1, Сч, 1).Текст);
		КодРегиона = Цел(Код / УправлениеКонтактнойИнформацией.МаскаРегиона());
		
		Наименование = СокрЛП(КлассификаторАдресов.Область(Сч, 2, Сч, 2).Текст);
		Сокращение   = СокрЛП(КлассификаторАдресов.Область(Сч, 3, Сч, 3).Текст);
		
		СписокРегионов.Добавить(КодРегиона,  Формат(КодРегиона, "ЧЦ=2; ЧВН=") + " " + Наименование + " " + Сокращение, Ложь);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОтобразитьСписокРегионов()
	
	СписокМодифицировать.Очистить();
	СписокНеМодифицировать.Очистить();
	
	Для каждого ЭлементРегиона из СписокРегионов Цикл
		Если ЭлементРегиона.Пометка Тогда
			СтрокаРегиона = СписокМодифицировать.Добавить();
		Иначе
			СтрокаРегиона = СписокНеМодифицировать.Добавить();
		КонецЕсли;
		
		СтрокаРегиона.Значение = ЭлементРегиона.Значение;
		СтрокаРегиона.Регион = ЭлементРегиона.Представление;
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ И ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	ФайлАдресногоКлассификатора  = ВосстановитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора");
	ФайлКлассификатораУлиц       = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораУлиц");
	ФайлКлассификатораДомов      = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораДомов");
	ФайлКлассификатораСокращений = ВосстановитьЗначение("АдресныйКлассификаторФайлКлассификатораСокращений");

	ЭлементыФормы.НадписьКлассификатораАдресов.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(1, ФайлАдресногоКлассификатора);
	ЭлементыФормы.НадписьКлассификатораУлиц.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(1, ФайлКлассификатораУлиц);
	ЭлементыФормы.НадписьКлассификатораДомов.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(1, ФайлКлассификатораДомов);
	ЭлементыФормы.НадписьКлассификатораСокращений.Заголовок = ПолучитьСтрокуИнформацииКлассификатора(1, ФайлКлассификатораСокращений);
	
	УстановитьНастройку();

	ЗаполнитьСписокРегионов();
	ОтобразитьСписокРегионов();
	ЗаполнитьФайлы("");

КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("АдресныйКлассификаторКодировкаWindows", КодировкаWindows);
	СохранитьЗначение("АдресныйКлассификаторФормат2003", Формат2003);

	СохранитьЗначение("АдресныйКлассификаторФайлАдресногоКлассификатора",  ФайлАдресногоКлассификатора);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораУлиц",       ФайлКлассификатораУлиц);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораДомов",      ФайлКлассификатораДомов);
	СохранитьЗначение("АдресныйКлассификаторФайлКлассификатораСокращений", ФайлКлассификатораСокращений);

КонецПроцедуры

Процедура ОсновныеДействияФормыКлассификатор(Кнопка)
	
	РегистрыСведений.АдресныйКлассификатор.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "Загрузить" командной панели "ДействияФормы".
//
Процедура ОсновныеДействияФормыДействиеЗагрузить(Кнопка)
	
	ТолькоАдресныеСокращения = ПустаяСтрока(ФайлАдресногоКлассификатора)
	                         И ПустаяСтрока(ФайлКлассификатораУлиц)
	                         И (Формат2003 И ПустаяСтрока(ФайлКлассификатораДомов));
	
	Для каждого Элемент Из СписокРегионов Цикл
		
		Если Элемент.Пометка  ИЛИ ТолькоАдресныеСокращения Тогда
			
			ЗагрузитьКлассификаторы(ФайлАдресногоКлассификатора,
			                        ФайлКлассификатораУлиц,
			                        ФайлКлассификатораДомов,
			                        ФайлКлассификатораСокращений,
			                        СписокРегионов);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Предупреждение("Необходимо отметить хотя бы один регион для загрузки");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлАдресногоКлассификатора".
//
Процедура ФайлАдресногоКлассификатораНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаАдресногоКлассификатора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаАдресногоКлассификатора.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаАдресногоКлассификатора.ПолноеИмяФайла = ФайлАдресногоКлассификатора;
	ВводФайлаАдресногоКлассификатора.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаАдресногоКлассификатора.Выбрать() Тогда
		ФайлАдресногоКлассификатора = ВводФайлаАдресногоКлассификатора.ПолноеИмяФайла;
		ЗаполнитьФайлы(Элемент.Значение);
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораУлиц".
//
Процедура ФайлКлассификатораУлицНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораУлиц = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораУлиц.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораУлиц.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораУлиц.Выбрать() Тогда
		ФайлКлассификатораУлиц = ВводФайлаКлассификатораУлиц.ПолноеИмяФайла;
		ЗаполнитьФайлы(Элемент.Значение);
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораДомов".
//
Процедура ФайлКлассификатораДомовНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораДомов = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораДомов.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораДомов.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораДомов.Выбрать() Тогда
		ФайлКлассификатораДомов = ВводФайлаКлассификатораДомов.ПолноеИмяФайла;
		ЗаполнитьФайлы(Элемент.Значение);
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ФайлКлассификатораСокращений".
//
Процедура ФайлКлассификатораСокращенийНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВводФайлаКлассификатораСокращений = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ВводФайлаКлассификатораСокращений.Фильтр = "Файл базы данных(*.dbf)|*.dbf";
	ВводФайлаКлассификатораСокращений.ПроверятьСуществованиеФайла = Истина;
	Если ВводФайлаКлассификатораСокращений.Выбрать() Тогда
		ФайлКлассификатораСокращений = ВводФайлаКлассификатораСокращений.ПолноеИмяФайла;
		ЗаполнитьФайлы(Элемент.Значение);
	КонецЕсли

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФайлАдресногоКлассификатора".
//
Процедура ФайлАдресногоКлассификатораПриИзменении(Элемент)
	
	ЗаполнитьФайлы(Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФайлКлассификатораУлиц".
//
Процедура ФайлКлассификатораУлицПриИзменении(Элемент)
	
	ЗаполнитьФайлы(Элемент.Значение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФайлКлассификатораДомов".
//
Процедура ФайлКлассификатораДомовПриИзменении(Элемент)
	
	ЗаполнитьФайлы(Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФайлКлассификатораСокращений".
//
Процедура ФайлКлассификатораСокращенийПриИзменении(Элемент)
	
	ЗаполнитьФайлы(Элемент.Значение);
	
КонецПроцедуры

Процедура СписокМодифицироватьВыбор(Элемент, ЭлементСписка)
	
	Если ЭлементыФормы.СписокМодифицировать.ТекущиеДанные <> Неопределено Тогда
		Элемент = СписокРегионов.НайтиПоЗначению(ЭлементыФормы.СписокМодифицировать.ТекущиеДанные.Значение);
		Если Элемент <> Неопределено Тогда
			Элемент.Пометка = Ложь;
			ОтобразитьСписокРегионов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокНеМодифицироватьВыбор(Элемент, ЭлементСписка)
	
	Если ЭлементыФормы.СписокНеМодифицировать.ТекущиеДанные <> Неопределено Тогда
		Элемент = СписокРегионов.НайтиПоЗначению(ЭлементыФормы.СписокНеМодифицировать.ТекущиеДанные.Значение);
		Если Элемент <> Неопределено Тогда
			Элемент.Пометка = Истина;
			ОтобразитьСписокРегионов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельУправленияСпискамиДобавитьВсе(Кнопка)
	
	СписокРегионов.ЗаполнитьПометки(Истина);
	ОтобразитьСписокРегионов();
	
КонецПроцедуры

Процедура КоманднаяПанельУправленияСпискамиУдалить(Кнопка)
	
	СписокРегионов.ЗаполнитьПометки(Ложь);
	ОтобразитьСписокРегионов();
	
КонецПроцедуры

Процедура КоманднаяПанельУправленияСпискамиДобавить(Кнопка)
	
	ВыделенныеСтроки = ЭлементыФормы.СписокНеМодифицировать.ВыделенныеСтроки;
	
	Для каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		Элемент = СписокРегионов.НайтиПоЗначению(ВыделеннаяСтрока.Значение);
		Если Элемент <> Неопределено Тогда
			Элемент.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ОтобразитьСписокРегионов();
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельУправленияСпискамиУдалить1(Кнопка)
	
	
	ВыделенныеСтроки = ЭлементыФормы.СписокМодифицировать.ВыделенныеСтроки;
	
	Для каждого ВыделеннаяСтрока из ВыделенныеСтроки Цикл
		Элемент = СписокРегионов.НайтиПоЗначению(ВыделеннаяСтрока.Значение);
		Если Элемент <> Неопределено Тогда
			Элемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделенныеСтроки.Количество() > 0 Тогда
		ОтобразитьСписокРегионов();
	КонецЕсли;
	
	
КонецПроцедуры

ФорматыКлассификаторов = Новый Соответствие;
ФорматыКлассификаторов.Вставить(1, 3);
ФорматыКлассификаторов.Вставить(2, 3);
ФорматыКлассификаторов.Вставить(3, 3);
ФорматыКлассификаторов.Вставить(4, 3);
ФорматыКлассификаторов.Вставить(5, 3);

КодировкиКлассификаторов = Новый Соответствие;
КодировкиКлассификаторов.Вставить(1, КодировкаXBase.ANSI);
КодировкиКлассификаторов.Вставить(2, КодировкаXBase.ANSI);
КодировкиКлассификаторов.Вставить(3, КодировкаXBase.ANSI);
КодировкиКлассификаторов.Вставить(4, КодировкаXBase.ANSI);
КодировкиКлассификаторов.Вставить(5, КодировкаXBase.ANSI);
