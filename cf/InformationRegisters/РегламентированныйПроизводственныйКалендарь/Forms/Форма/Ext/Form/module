////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СписокВидовДней;
Перем ТекущийВидДня;

Перем ЭталоннаяТаблицаРегистра; 

Перем ТаблицаРегистра; 
Перем ТаблицаПеренесенныхДней; 

Перем ТаблицаФедеральныхПраздников;

// Виды дней
Перем ВидДняРабочий;
Перем ВидДняСуббота;
Перем ВидДняВоскресенье;
Перем ВидДняПраздник;
Перем ВидДняПредпраздничный;

Перем мДлинаСуток;

// Цвета дат календаря
Перем ЦветРабочегоДня; 	  
Перем ЦветСубботы;	          
Перем ЦветВоскресенья; 	  
Перем ЦветПредпразничногоДня; 
Перем ЦветПраздничногоДня;	  

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьИнтервалКалендаря(ДатаУстановки)

	ЭлементыФормы.ПроизводственныйКалендарь.НачалоПериодаОтображения = НачалоГода(ДатаУстановки);
	ЭлементыФормы.ПроизводственныйКалендарь.КонецПериодаОтображения  = КонецГода(ДатаУстановки);

КонецПроцедуры

Процедура ЗаписатьДанныеРегистра()
	
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		
		ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ГодВФорме);
		
		ДатаУстановки = Дата(Формат(ГодВФорме,"ЧГ=0")+"0101");
		РезЗапроса = СформироватьЗапросПоКалендарю(ДатаУстановки, КонецГода(ДатаУстановки));
		
		Если РезЗапроса.Пустой() Тогда
			ТаблицаРегистра = ПервоначальноеЗаполнениеРегистра(ДатаУстановки);
			ТаблицаРегистра.Индексы.Добавить("ВидДня");
			ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
			// Обновим эталонную таблицу
			ЭталоннаяТаблицаРегистра.Очистить();
		Иначе
			ТаблицаРегистра = РезЗапроса.Выгрузить();
			ТаблицаРегистра.Индексы.Добавить("ВидДня");
			ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
			// Обновим эталонную таблицу
			ЭталоннаяТаблицаРегистра = ТаблицаРегистра.Скопировать();
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;

КонецПроцедуры

// Процедура обновляет текст надписи о перенесенных днях
Процедура ОбновитьСтрокуСведенийОПеренесенныхДнях(ОбновитьЗаголовок = Ложь)
	
	Если ОбновитьЗаголовок Тогда
		ЭлементыФормы.ЗаголовокПеренесенныеДни.Значение = "Изменения за "+Формат(ГодВФорме, "ЧГ=0")+ " год";
	КонецЕсли;
	ТекстЗаголовка = "";
	МассивРегиональныхПраздников = ПолучитьМассивРегиональныхПраздников();
	Для Каждого ДатаРегиональногоПраздника Из МассивРегиональныхПраздников Цикл
		
		ДеньНедели = ДеньНедели(ДатаРегиональногоПраздника);
		Если ДеньНедели = 1 или ДеньНедели = 2 или ДеньНедели = 4 Тогда
			СловоНазначен = " назначен ";
		ИначеЕсли ДеньНедели = 7 Тогда
			СловоНазначен = " назначено ";
		Иначе
			СловоНазначен = " назначена ";
		КонецЕсли;
		
		ВидНазначенногоДня = " региональным праздником";
		СтрокаТаблицыНазначенныхДней = ТаблицаРегистра.Найти(ДатаРегиональногоПраздника, "ДатаКалендаря");
		Если СтрокаТаблицыНазначенныхДней <> Неопределено Тогда
			Если СтрокаТаблицыНазначенныхДней.ВидДня = ВидДняПредпраздничный Тогда
				ВидНазначенногоДня = " рабочим предпраздничным днем";
			КонецЕсли;
		КонецЕсли;
			
		ТекстЗаголовка = ТекстЗаголовка + формат(ДатаРегиональногоПраздника, "ДФ = ""д ММММ, дддд""") + СловоНазначен + ВидНазначенногоДня + Символы.ПС + Символы.ПС;
		
	КонецЦикла;		
		
	
	Для Каждого СтрокаТаблицыПеренесенныхДней Из ТаблицаПеренесенныхДней Цикл
	
		ДеньНедели = ДеньНедели(СтрокаТаблицыПеренесенныхДней.ВыходнойДень);
		Если ДеньНедели = 1 или ДеньНедели = 2 или ДеньНедели = 4 Тогда
			СловоПеренесен = " перенесен на ";
		ИначеЕсли ДеньНедели = 7 Тогда
			СловоПеренесен = " перенесено на ";
		Иначе
			СловоПеренесен = " перенесена на ";
		КонецЕсли;
		ТекстЗаголовка = ТекстЗаголовка + формат(СтрокаТаблицыПеренесенныхДней.ВыходнойДень, "ДФ = ""д ММММ, дддд""")+
		СловоПеренесен+формат(СтрокаТаблицыПеренесенныхДней.РабочийДень, "ДФ = ""д ММММ, дддд""")+Символы.ПС+Символы.ПС;
		
	КонецЦикла;
	ЭлементыФормы.СведенияОПеренесенныхДнях.Заголовок = ТекстЗаголовка + "Для переноса выходного дня выберите день и нажмите правую кнопку мыши";
	
КонецПроцедуры // ОбновитьСтрокуСведенийОПеренесенныхДнях()

// Процедура заполняет таблицу перенесенных дней 
//по данным Регистра сведений ПеренесенныеРабочиеДни
Процедура ЗаполнитьТаблицуПеренесенныхДней()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Год", ГодВФорме);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПеренесенныеРабочиеДни.РабочийДень,
	|	ПеренесенныеРабочиеДни.ВыходнойДень
	|ИЗ
	|	РегистрСведений.ПеренесенныеРабочиеДни КАК ПеренесенныеРабочиеДни
	|ГДЕ
	|	ПеренесенныеРабочиеДни.Год = &Год";
	ТаблицаПеренесенныхДней = Запрос.Выполнить().Выгрузить();
	ТаблицаПеренесенныхДней.Индексы.Добавить("ВыходнойДень, РабочийДень");
	
КонецПроцедуры

// Процедура переписывает данные из таблицы в регистр сведений
Процедура ПереписатьВРегистрТаблицуПеренесенныхДней()
	НаборЗаписей = РегистрыСведений.ПеренесенныеРабочиеДни.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Год.Установить(ГодВФорме);
	НаборЗаписей.Очистить();
	Для Каждого СтрокаТаблицыПеренесенныхДней Из ТаблицаПеренесенныхДней Цикл
		СтрокаНабораЗаписи = НаборЗаписей.Добавить();
		СтрокаНабораЗаписи.Год = ГодВФорме;
		СтрокаНабораЗаписи.РабочийДень = СтрокаТаблицыПеренесенныхДней.РабочийДень;
		СтрокаНабораЗаписи.ВыходнойДень = СтрокаТаблицыПеренесенныхДней.ВыходнойДень;
	КонецЦикла;
	НаборЗаписей.Записать();
КонецПроцедуры

// Процедура обрабатывает перенос выходного дня, 
// проверяет доступность и правильность этого действия
Процедура ОбработкаПереносаПраздничногоДня(ЗаголовокФормы, ВидВыходногоДня)
	
	ВыбраннаяДата = ПроизводственныйКалендарь;
	
	ФормаВводаДаты = ПолучитьФорму("ФормаВводаДаты");
	ФормаВводаДаты.КалендарнаяДата = ПроизводственныйКалендарь;
	ФормаВводаДаты.ТаблицаРегистра = ТаблицаРегистра;
	ФормаВводаДаты.ТаблицаПеренесенныхДней = ТаблицаПеренесенныхДней;
	ФормаВводаДаты.УстановитьЗаголовокФормы(ЗаголовокФормы);
	РезультатВыбора = ФормаВводаДаты.ОткрытьМодально();
	Если РезультатВыбора <> Неопределено Тогда
		ВыбраннаяДатаПереноса = РезультатВыбора;
		
		ДеньНеделиВыбраннойДаты = ДеньНедели(ВыбраннаяДата);
		ДеньНеделиВыбраннойДатыПереноса = ДеньНедели(ВыбраннаяДатаПереноса);
			
		НайденаПодобнаяСтрока = Ложь;
		Для Каждого СтрокаТаблицы Из ТаблицаПеренесенныхДней Цикл
			
			Если ((СтрокаТаблицы.РабочийДень=ВыбраннаяДата)
				И (СтрокаТаблицы.ВыходнойДень=ВыбраннаяДатаПереноса))
				ИЛИ((СтрокаТаблицы.РабочийДень=ВыбраннаяДатаПереноса)
				И(СтрокаТаблицы.ВыходнойДень=ВыбраннаяДата))Тогда
				
				ТаблицаПеренесенныхДней.Удалить(СтрокаТаблицы);
				НайденаПодобнаяСтрока = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не НайденаПодобнаяСтрока Тогда
			
			СтрокаТаблицыВыбраннойДаты = ТаблицаРегистра.Найти(ВыбраннаяДата, "ДатаКалендаря");
			СтрокаТаблицыВыбраннойДатыПереноса = ТаблицаРегистра.Найти(ВыбраннаяДатаПереноса, "ДатаКалендаря");
				
			СтрокаТаблицы = ТаблицаПеренесенныхДней.Добавить();
			ДеньНеделиВыбраннойДаты = ДеньНедели(ВыбраннаяДата);
			Если ДеньНеделиВыбраннойДаты = 6 ИЛИ ДеньНеделиВыбраннойДаты = 7 Тогда
				СтрокаТаблицы.РабочийДень = ВыбраннаяДатаПереноса;
				СтрокаТаблицы.ВыходнойДень = ВыбраннаяДата;
				
				Если СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняСуббота 
					ИЛИ СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняВоскресенье Тогда
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДатыПереноса.ВидДня;
				Иначе
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДаты.ВидДня;
				КонецЕсли;
				
				Если ДеньНеделиВыбраннойДаты = 6 Тогда
					СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняСуббота;
				Иначе
					СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняВоскресенье
				КонецЕсли;
				СтрокаТаблицыВыбраннойДаты.ВидДня = УстанавливаемыйВидДняВыбраннойДаты;
					
			Иначе
				СтрокаТаблицы.РабочийДень = ВыбраннаяДата;
				СтрокаТаблицы.ВыходнойДень = ВыбраннаяДатаПереноса;	
				
				Если СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняСуббота
					ИЛИ СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = ВидДняВоскресенье Тогда
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДаты.ВидДня;
				Иначе
					УстанавливаемыйВидДняВыбраннойДаты = СтрокаТаблицыВыбраннойДатыПереноса.ВидДня;
				КонецЕсли;
				
				Если ДеньНеделиВыбраннойДатыПереноса = 6 Тогда
					СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняСуббота;
				Иначе
					СтрокаТаблицыВыбраннойДаты.ВидДня = ВидДняВоскресенье
				КонецЕсли;
				СтрокаТаблицыВыбраннойДатыПереноса.ВидДня = УстанавливаемыйВидДняВыбраннойДаты;
				
			КонецЕсли;
			
			ТекущийВидДня = СписокВидовДней.НайтиПоЗначению(СтрокаТаблицыВыбраннойДаты.ВидДня);
			
			ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
			ОбновитьСтрокуСведенийОПеренесенныхДнях();
	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СформироватьЗапросПоКалендарю(ДатаНачалаЗапроса, ДатаОкончанияЗапроса)
	
	ЗапросПоКалендарю = Новый Запрос();
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря1", ДатаНачалаЗапроса);
	ЗапросПоКалендарю.УстановитьПараметр("ДатаКалендаря2", ДатаОкончанияЗапроса);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &ДатаКалендаря1 И &ДатаКалендаря2";	
	
	ЗапросПоКалендарю.Текст = ТекстЗапроса;
	Возврат ЗапросПоКалендарю.Выполнить()
	
КонецФункции     

Функция ТаблицыКалендаряИдентичны()
	
	Если ЭталоннаяТаблицаРегистра.Количество() <> ТаблицаРегистра.Количество() Тогда
		Возврат Ложь
	КонецЕсли;
	
	Для Сч = 1 По ЭталоннаяТаблицаРегистра.Количество() Цикл
		Если ЭталоннаяТаблицаРегистра[Сч-1].ВидДня <> ТаблицаРегистра[Сч-1].ВидДня Тогда
			Возврат Ложь
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Истина
	
КонецФункции


// Функция возвращает массив дат - праздников, введенных пользователем
Функция ПолучитьМассивРегиональныхПраздников()
	
	ВозвращаемыйМассив = Новый Массив;
	
	Для Каждого СтрокаТаблицыРегистра Из ТаблицаРегистра Цикл
		Если СтрокаТаблицыРегистра.ВидДня = ВидДняПраздник 
			ИЛИ СтрокаТаблицыРегистра.ВидДня = ВидДняПредпраздничный Тогда
			СтрокаТаблицыФедеральныхПраздников = ТаблицаФедеральныхПраздников.Найти(СтрокаТаблицыРегистра.ДатаКалендаря, "ДатаКалендаря");	
			Если СтрокаТаблицыФедеральныхПраздников.ВидДня <> СтрокаТаблицыРегистра.ВидДня Тогда
				ВозвращаемыйМассив.Добавить(СтрокаТаблицыРегистра.ДатаКалендаря);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ВозвращаемыйМассив;
	
КонецФункции // ПолучитьСписокРегиональныхПраздников()
	
// Процедура определяет федеральный праздник или нет  для указанной даты
Функция ЭтоФедеральныйПраздник(ОпределяемаяДата, ЭтоПредпраздничныйДень = Неопределено)
	
	СтрокаТаблицы = ТаблицаФедеральныхПраздников.Найти(ОпределяемаяДата, "ДатаКалендаря");
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли СтрокаТаблицы.ВидДня = ВидДняПраздник Тогда

		ЭтоПредпраздничныйДень = Ложь;
		Возврат Истина;
		
	ИначеЕсли  СтрокаТаблицы.ВидДня = ВидДняПредпраздничный Тогда		
		
		ЭтоПредпраздничныйДень = Истина;
		Возврат Истина;
		
	Иначе
		
		ЭтоПредпраздничныйДень = Ложь;
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции	

// Функция возвращает Ложь, если указанная дата не участвовала в переносах дней
// иначе, истина
Функция ПраздникПеренесенНаДругойДень(ОпределяемаяДата)
	
	Если ТаблицаПеренесенныхДней.Найти(ОпределяемаяДата, "ВыходнойДень, РабочийДень") = Неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	СписокВидовДней = ОбщегоНазначения.ПолучитьСписокЭлементовПеречисления("ВидыДнейПроизводственногоКалендаря");

	// Назначим цвета
	ЦветРабочегоДня 	   = Новый Цвет(  0,  0,   0); // Черный
	ЦветСубботы	           = Новый Цвет(153, 51,   0); // Темно-красный
	ЦветВоскресенья 	   = Новый Цвет(255,  0,   0); // Красный
	ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
	ЦветПраздничногоДня	   = Новый Цвет(255,  0, 255); // Фиолетовый
	
	ГодВФорме = Год(РабочаяДата);
	
	ЗаполнитьТаблицуПеренесенныхДней();
	УстановитьИнтервалКалендаря(РабочаяДата);
	
	РезЗапроса = СформироватьЗапросПоКалендарю(НачалоГода(РабочаяДата), КонецГода(РабочаяДата));
	ТаблицаФедеральныхПраздников = ПервоначальноеЗаполнениеРегистра(РабочаяДата,  РезЗапроса.Пустой());
	Если РезЗапроса.Пустой() Тогда
		Модифицированность = Истина;
		ТаблицаРегистра = ТаблицаФедеральныхПраздников.Скопировать();
		ТаблицаРегистра.Индексы.Добавить("ВидДня");
		ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
	Иначе
		ТаблицаРегистра = РезЗапроса.Выгрузить();
		ТаблицаРегистра.Индексы.Добавить("ВидДня");
		ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
		ЭталоннаяТаблицаРегистра = ТаблицаРегистра.Скопировать();
	КонецЕсли;
	
	// Отображение заполненого календаря
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	
	ЭлементыФормы.ПроизводственныйКалендарь.ТекущаяДата = НачалоГода(РабочаяДата);
	Модифицированность = Ложь;
	
	
	ОбновитьСтрокуСведенийОПеренесенныхДнях(Истина);
	
	Заголовок = "Регламентированный производственный календарь на " + Формат(ГодВФорме,"ЧГ=0") + " год";
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		ЗаКакойГод = Год(ТаблицаРегистра[0].ДатаКалендаря);
		СтандартнаяОбработка = Ложь;
		Если Вопрос("Записать измененные данные за " + Формат(ЗаКакойГод,"ЧГ=0") + " год?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ЗаКакойГод);
			ПереписатьВРегистрТаблицуПеренесенныхДней();
		КонецЕсли;  
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Обработчик события нажатия кнопки "Первоначальное заполнение"
Процедура ДействияФормыПервоначальноеЗаполнение(Кнопка)
	
	Если Вопрос("Восстановить первоначальное заполнение производственного календаря?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		
		ТаблицаФедеральныхПраздников = ПервоначальноеЗаполнениеРегистра(Дата(Формат(ГодВФорме,"ЧГ=0")+"0101"), Истина);
		ТаблицаРегистра = ТаблицаФедеральныхПраздников.Скопировать();
		ТаблицаРегистра.Индексы.Добавить("ВидДня");
		ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
		ТаблицаПеренесенныхДней.Очистить();
		ОбновитьСтрокуСведенийОПеренесенныхДнях();
		// Отображение заполненого календаря
		ТекущийВидДня = Неопределено;
		ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
				
	КонецЕсли;  

КонецПроцедуры

// Обработцик события нажатия кнопки "Печать"
Процедура ДействияФормыПечать(Кнопка)
	
	Если Модифицированность тогда
		Если Вопрос("Перед печать календаря необходимо записать внесенные изменения. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
			
			ЗаписатьДанныеРегистра();
			ПереписатьВРегистрТаблицуПеренесенныхДней();
		Иначе
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ГодКалендаря,
	|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КварталКалендаря,
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК МесяцКалендаря,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК КалендарныеДни,
	|	РегламентированныйПроизводственныйКалендарь.ВидДня КАК ВидДня
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.Год = &Год
	|
	|СГРУППИРОВАТЬ ПО
	|	ГОД(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	КВАРТАЛ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	МЕСЯЦ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря),
	|	РегламентированныйПроизводственныйКалендарь.ВидДня
	|ИТОГИ ПО
	|	ГодКалендаря,
	|	КварталКалендаря,
	|	МесяцКалендаря";
	
	МакетПечати = РегистрыСведений.РегламентированныйПроизводственныйКалендарь.ПолучитьМакет("ПроизводственныйКалендарь");
	ПечатнаяФорма = Новый ТабличныйДокумент;
	ПечатнаяФорма.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПроизводственныйКалендарь_";
	ЗаголовокПечати =  МакетПечати.ПолучитьОбласть("Заголовок");
	ЗаголовокПечати.Параметры.Год = Формат(ГодВФорме, "ЧЦ=4; ЧГ=0");
	ПечатнаяФорма.Вывести(ЗаголовокПечати);
	
	// начальные значения, независимо от результата выполнения запроса
	РабочееВремя40Год = 0;
	РабочееВремя36Год = 0;
	РабочееВремя24Год = 0;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Год", ГодВФорме);
	Результат = Запрос.Выполнить();
	ВыборкаПоГоду = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоГоду.Следующий() Цикл
		ВыборкаПоКварталу = ВыборкаПоГоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКварталу.Следующий() Цикл
			НомерКвартала =  МакетПечати.ПолучитьОбласть("Квартал");
			НомерКвартала.Параметры.НомерКвартала = "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Вывести(НомерКвартала);
			ШапкаКвартала = МакетПечати.ПолучитьОбласть("ШапкаКвартала");
			ПечатнаяФорма.Вывести(ШапкаКвартала);
			
			КалендарныеДниКв = 0;
			РабочееВремя40Кв = 0;
			РабочееВремя36Кв = 0;
			РабочееВремя24Кв = 0;
			РабочиеДниКв	 = 0;
			ВыходныеДниКв	 = 0;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 или ВыборкаПоКварталу.КварталКалендаря = 3 тогда
				КалендарныеДниПолугодие1 = 0;
				РабочееВремя40Полугодие1 = 0;
				РабочееВремя36Полугодие1 = 0;
				РабочееВремя24Полугодие1 = 0;
				РабочиеДниПолугодие1	 = 0;
				ВыходныеДниПолугодие1	 = 0;
			КонецЕсли;
			
			Если ВыборкаПоКварталу.КварталКалендаря = 1 тогда
				КалендарныеДниГод = 0;
				РабочееВремя40Год = 0;
				РабочееВремя36Год = 0;
				РабочееВремя24Год = 0;
				РабочиеДниГод	 = 0;
				ВыходныеДниГод	 = 0;
			КонецЕсли;
			
			ВыборкаПоМесяцу = ВыборкаПоКварталу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоМесяцу.Следующий() Цикл
				ВыходныеДни 	= 0;
				РабочееВремя40 	= 0;
				РабочееВремя36 	= 0;
				РабочееВремя24 	= 0;
				КалендарныеДни 	= 0;
				РабочиеДни 		= 0;
				ВыборкаПоВидуДня = ВыборкаПоМесяцу.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока ВыборкаПоВидуДня.Следующий() Цикл
					Если ВыборкаПоВидуДня.ВидДня = ВидДняСуббота или 
						 ВыборкаПоВидуДня.ВидДня = ВидДняВоскресенье или
						 ВыборкаПоВидуДня.ВидДня = ВидДняПраздник тогда
						 ВыходныеДни = ВыходныеДни + ВыборкаПоВидуДня.КалендарныеДни
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = ВидДняРабочий тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 8;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 ИначеЕсли ВыборкаПоВидуДня.ВидДня = ВидДняПредпраздничный тогда
						 РабочееВремя40 = РабочееВремя40 + ВыборкаПоВидуДня.КалендарныеДни * 7;
						 РабочееВремя36 = РабочееВремя36 + ВыборкаПоВидуДня.КалендарныеДни*36/5 - 1;
						 РабочееВремя24 = РабочееВремя24 + ВыборкаПоВидуДня.КалендарныеДни*24/5 - 1;
						 РабочиеДни 	= РабочиеДни + ВыборкаПоВидуДня.КалендарныеДни;
					 КонецЕсли;
					 КалендарныеДни = КалендарныеДни + ВыборкаПоВидуДня.КалендарныеДни;
				КонецЦикла; // вид дня
				КалендарныеДниКв = КалендарныеДниКв + КалендарныеДни;
				РабочееВремя40Кв = РабочееВремя40Кв + РабочееВремя40;
				РабочееВремя36Кв = РабочееВремя36Кв + РабочееВремя36;
				РабочееВремя24Кв = РабочееВремя24Кв + РабочееВремя24;
				РабочиеДниКв	 = РабочиеДниКв 	+ РабочиеДни;
				ВыходныеДниКв	 = ВыходныеДниКв	+ ВыходныеДни;
				
				КалендарныеДниПолугодие1 = КалендарныеДниПолугодие1 + КалендарныеДни;
				РабочееВремя40Полугодие1 = РабочееВремя40Полугодие1 + РабочееВремя40;
				РабочееВремя36Полугодие1 = РабочееВремя36Полугодие1 + РабочееВремя36;
				РабочееВремя24Полугодие1 = РабочееВремя24Полугодие1 + РабочееВремя24;
				РабочиеДниПолугодие1	 = РабочиеДниПолугодие1 	+ РабочиеДни;
				ВыходныеДниПолугодие1	 = ВыходныеДниПолугодие1	+ ВыходныеДни;
				
				КалендарныеДниГод = КалендарныеДниГод + КалендарныеДни;
				РабочееВремя40Год = РабочееВремя40Год + РабочееВремя40;
				РабочееВремя36Год = РабочееВремя36Год + РабочееВремя36;
				РабочееВремя24Год = РабочееВремя24Год + РабочееВремя24;
				РабочиеДниГод	 = РабочиеДниГод 	+ РабочиеДни;
				ВыходныеДниГод	 = ВыходныеДниГод	+ ВыходныеДни;
				
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни = ВыходныеДни;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДни;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДни;
				КолонкаМесяца.Параметры.ИмяМесяца 		= Формат(Дата(2000,ВыборкаПоМесяцу.МесяцКалендаря, 1), "ДФ='ММММ'");
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЦикла; // месяц
			КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
			КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниКв;
			КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Кв;
			КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Кв;
			КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Кв;
			КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниКв;
			КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниКв;
			КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря + " квартал";
			ПечатнаяФорма.Присоединить(КолонкаМесяца);
			
			Если ВыборкаПоКварталу.КварталКалендаря = 2 или ВыборкаПоКварталу.КварталКалендаря = 4 тогда
				КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
				КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Полугодие1;
				КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Полугодие1;
				КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниПолугодие1;
				КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниПолугодие1;
				КолонкаМесяца.Параметры.ИмяМесяца 		= "" + ВыборкаПоКварталу.КварталКалендаря/2 + " полугодие";
				ПечатнаяФорма.Присоединить(КолонкаМесяца);
			КонецЕсли;
			
		КонецЦикла;  // квартал
		КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяца");
		КолонкаМесяца.Параметры.ВыходныеДни 	= ВыходныеДниГод;
		КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
		КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
		КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
		КолонкаМесяца.Параметры.КалендарныеДни 	= КалендарныеДниГод;
		КолонкаМесяца.Параметры.РабочиеДни 		= РабочиеДниГод;
		КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ВыборкаПоГоду.ГодКалендаря, "ЧЦ=4; ЧГ=0") + " год";
		ПечатнаяФорма.Присоединить(КолонкаМесяца);
		
	КонецЦикла; // год
	
	КолонкаМесяца = МакетПечати.ПолучитьОбласть("Среднемесячный");
	КолонкаМесяца.Параметры.РабочееВремя40 	= РабочееВремя40Год;
	КолонкаМесяца.Параметры.РабочееВремя36 	= РабочееВремя36Год;
	КолонкаМесяца.Параметры.РабочееВремя24 	= РабочееВремя24Год;
	КолонкаМесяца.Параметры.ИмяМесяца 		= "" + Формат(ГодВФорме, "ЧЦ=4; ЧГ=0") + " год";
	ПечатнаяФорма.Вывести(КолонкаМесяца);
	
	КолонкаМесяца = МакетПечати.ПолучитьОбласть("КолонкаМесяцаСр");
	КолонкаМесяца.Параметры.РабочееВремя40 	= Формат(РабочееВремя40Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя36 	= Формат(РабочееВремя36Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.РабочееВремя24 	= Формат(РабочееВремя24Год / 12, "ЧДЦ=2; ЧГ=0");
	КолонкаМесяца.Параметры.ИмяМесяца 		= "среднемесячное количество";
	ПечатнаяФорма.Присоединить(КолонкаМесяца);
	
	УниверсальныеМеханизмы.НапечататьДокумент(ПечатнаяФорма, 1, Ложь, "Производственный календарь");
	
КонецПроцедуры

// Обработцик события нажатия кнопки "Записать"
Процедура ДействияФормыЗаписать(Кнопка)
	
	ЗаписатьДанныеРегистра();
	ПереписатьВРегистрТаблицуПеренесенныхДней();
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ, СВЯЗАННЫЕ С ПРОИЗВОДСТВЕННЫМ КАЛЕНДАРЕМ

Процедура ДействияПеренестиВыходнойДеньСубботу(Элемент)
	
	ТекстКомментария = "Выберите рабочий день, на который необходимо перенести выходной день, "+Формат(ПроизводственныйКалендарь, "ДФ=""д ММММ, дддд""");
	ОбработкаПереносаПраздничногоДня(ТекстКомментария, ВидДняСуббота);
	
КонецПроцедуры

Процедура ДействияПеренестиВыходнойДеньВоскресенье(Элемент)
	
	ТекстКомментария = "Выберите рабочий день, на который необходимо перенести выходной день, "+Формат(ПроизводственныйКалендарь, "ДФ=""д ММММ, дддд""");
	ОбработкаПереносаПраздничногоДня(ТекстКомментария, ВидДняВоскресенье);
	
КонецПроцедуры

Процедура ДействияПеренестиРабочийДень(Элемент)
	
	ТекстКомментария = "Выберите выходной день, на который необходимо перенести рабочий день, "+Формат(ПроизводственныйКалендарь, "ДФ=""д ММММ, дддд""");
	ОбработкаПереносаПраздничногоДня(ТекстКомментария, ВидДняРабочий);
	
КонецПроцедуры

Процедура ДействияНазначитьПраздничным(Элемент)
	
	ТекущийВидДня = СписокВидовДней.НайтиПоЗначению(ВидДняПраздник);
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	ОбновитьСтрокуСведенийОПеренесенныхДнях();
КонецПроцедуры

Процедура ДействияНазначитьПредпраздничным(Элемент)
	
	ТекущийВидДня = СписокВидовДней.НайтиПоЗначению(ВидДняПредпраздничный);
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	ОбновитьСтрокуСведенийОПеренесенныхДнях();
КонецПроцедуры

Процедура ДействияОтменитьПраздничныйДень(Элемент)
	
	СтрокаТаблицы = ТаблицаФедеральныхПраздников.Найти(ПроизводственныйКалендарь, "ДатаКалендаря");
	Если СтрокаТаблицы <> Неопределено Тогда
		ТекущийВидДня = СписокВидовДней.НайтиПоЗначению(СтрокаТаблицы.ВидДня);
		ЭлементыФормы.ПроизводственныйКалендарь.Обновить();	 
		ОбновитьСтрокуСведенийОПеренесенныхДнях();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияОтменитьПереносПраздника(Элемент)
	
	СтрокаТаблицыПеренесенныхДней = ТаблицаПеренесенныхДней.Найти(ПроизводственныйКалендарь, "ВыходнойДень, РабочийДень");
	Если СтрокаТаблицыПеренесенныхДней <> Неопределено Тогда
		СтрокаТаблицыФедеральныхПраздников = ТаблицаФедеральныхПраздников.Найти(СтрокаТаблицыПеренесенныхДней.РабочийДень, "ДатаКалендаря");
		Если СтрокаТаблицыФедеральныхПраздников <> Неопределено Тогда
			СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(СтрокаТаблицыПеренесенныхДней.РабочийДень, "ДатаКалендаря");
			Если СтрокаТаблицыРегистра <> Неопределено Тогда
				СтрокаТаблицыРегистра.ВидДня = СтрокаТаблицыФедеральныхПраздников.ВидДня;
				Если СтрокаТаблицыПеренесенныхДней.РабочийДень = ПроизводственныйКалендарь Тогда
					ТекущийВидДня = СписокВидовДней.НайтиПоЗначению(СтрокаТаблицыРегистра.ВидДня);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(СтрокаТаблицыПеренесенныхДней.ВыходнойДень, "ДатаКалендаря");
		Если СтрокаТаблицыРегистра <> Неопределено Тогда
			СтрокаТаблицыРегистра.ВидДня = ВидДняПраздник;
			Если СтрокаТаблицыПеренесенныхДней.ВыходнойДень = ПроизводственныйКалендарь Тогда
				ТекущийВидДня = СписокВидовДней.НайтиПоЗначению(СтрокаТаблицыРегистра.ВидДня);
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаПеренесенныхДней.Удалить(СтрокаТаблицыПеренесенныхДней);
		ОбновитьСтрокуСведенийОПеренесенныхДнях();
		ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//Процедура, обработчик события ПриИзменении элемента ВыборГода
Процедура ВыборГодаПриИзменении(Элемент)
	
	ЗаКакойГод = Год(ТаблицаРегистра[0].ДатаКалендаря);
	
	Если НЕ ТаблицыКалендаряИдентичны() Тогда
		
		Если Вопрос("Записать измененные данные за " + Формат(ЗаКакойГод,"ЧГ=0") + " год?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаписатьИзТаблицыВРегистр(ТаблицаРегистра,ЗаКакойГод)
		КонецЕсли;  
		
	КонецЕсли;
	
	ЗаполнитьТаблицуПеренесенныхДней();
	
	ДатаУстановки = Дата(Формат(ГодВФорме,"ЧГ=0")+"0101");
	РезЗапроса = СформироватьЗапросПоКалендарю(ДатаУстановки, КонецГода(ДатаУстановки));
	ТаблицаФедеральныхПраздников = ПервоначальноеЗаполнениеРегистра(ДатаУстановки, РезЗапроса.Пустой());
	Если РезЗапроса.Пустой() Тогда
		Модифицированность = Истина;
		ТаблицаРегистра = ТаблицаФедеральныхПраздников.Скопировать();
		ТаблицаРегистра.Индексы.Добавить("ВидДня");
		ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
		// Обновим эталонную таблицу
		ЭталоннаяТаблицаРегистра.Очистить();
	Иначе
		ТаблицаРегистра = РезЗапроса.Выгрузить();
		ТаблицаРегистра.Индексы.Добавить("ВидДня");
		ТаблицаРегистра.Индексы.Добавить("ДатаКалендаря");
		// Обновим эталонную таблицу
		ЭталоннаяТаблицаРегистра = ТаблицаРегистра.Скопировать();
	КонецЕсли;
	
	ОбновитьСтрокуСведенийОПеренесенныхДнях(Истина);
	
	// Отображение заполненого календаря
	ТекущийВидДня = Неопределено;
	ЭлементыФормы.ПроизводственныйКалендарь.Обновить();
	
	ПроизводственныйКалендарь = ДатаУстановки;
	УстановитьИнтервалКалендаря(ДатаУстановки);
	
	Заголовок = "Регламентированный производственный календарь на " + Формат(ГодВФорме,"ЧГ=0") + " год";

КонецПроцедуры

// Процедура, обработчик события ПриВыводеПериода элемента формы ПроизводственныйКалендарь
Процедура ПроизводственныйКалендарьПриВыводеПериода(Элемент, ОформлениеПериода)
	
	Если  ТекущийВидДня <> Неопределено Тогда  // Оформление календаря и запись в таблицу значений
		
		Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
		
		Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
			
			СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(Строка_ОформленияДаты.Дата,);
			
			Если СтрокаТаблицыРегистра <> Неопределено Тогда
				
				Если Строка_ОформленияДаты.Дата = Элемент.ТекущаяДата Тогда
					ЗначениеСравнения = ТекущийВидДня.Значение
				Иначе
					ЗначениеСравнения = СтрокаТаблицыРегистра.ВидДня
				КонецЕсли; 
				
				Если ЗначениеСравнения = ВидДняРабочий Тогда
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняРабочий;
					Строка_ОформленияДаты.ЦветТекста = ЦветРабочегоДня;
					
				ИначеЕсли ЗначениеСравнения = ВидДняПредпраздничный Тогда	 
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняПредпраздничный;
					Строка_ОформленияДаты.ЦветТекста = ЦветПредпразничногоДня;
					
				ИначеЕсли ЗначениеСравнения = ВидДняПраздник Тогда
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняПраздник;
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
					
				ИначеЕсли ЗначениеСравнения = ВидДняСуббота Тогда	
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняСуббота;
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
					
				ИначеЕсли ЗначениеСравнения = ВидДняВоскресенье Тогда	 
					
					СтрокаТаблицыРегистра.ВидДня = ВидДняВоскресенье;
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
					
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	Иначе  // Только оформление календаря
		
		Коллекция_ОформленияДаты = ОформлениеПериода.Даты;
		
		Для каждого Строка_ОформленияДаты Из Коллекция_ОформленияДаты Цикл
			
			СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(Строка_ОформленияДаты.Дата,);
			
			Если СтрокаТаблицыРегистра <> Неопределено Тогда
				
				ЗначениеСравнения = СтрокаТаблицыРегистра.ВидДня;
				
				Если ЗначениеСравнения = ВидДняРабочий Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветРабочегоДня;
				ИначеЕсли ЗначениеСравнения = ВидДняПредпраздничный Тогда	 
					Строка_ОформленияДаты.ЦветТекста = ЦветПредпразничногоДня;
				ИначеЕсли ЗначениеСравнения = ВидДняПраздник Тогда
					Строка_ОформленияДаты.ЦветТекста = ЦветПраздничногоДня;
				ИначеЕсли ЗначениеСравнения = ВидДняСуббота Тогда	
					Строка_ОформленияДаты.ЦветТекста = ЦветСубботы;
				ИначеЕсли ЗначениеСравнения = ВидДняВоскресенье Тогда	 
					Строка_ОформленияДаты.ЦветТекста = ЦветВоскресенья;
				КонецЕсли;	 
				
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура, обработчик события ПриИзменении элемента формы ПроизводственныйКалендарь
// формирует список элементов меню для выбранногодня
Процедура ПроизводственныйКалендарьПриИзменении(Элемент)
	
	ДеньНедели = ДеньНедели(ПроизводственныйКалендарь);
	
	СтрокаТаблицыРегистра = ТаблицаРегистра.Найти(ПроизводственныйКалендарь, "ДатаКалендаря");
	Если СтрокаТаблицыРегистра <> Неопределено Тогда
		ВидДня = СтрокаТаблицыРегистра.ВидДня;
		
		ДействияКнопки = ЭлементыФормы.ДействияФормы.Кнопки.Действия.Кнопки;
		КонтекстДействияКнопки = ЭлементыФормы.КонтекстнаяКоманднаяПанель.Кнопки.Действия.Кнопки;
		КонтекстДействияКнопки.Очистить();
		Пока ДействияКнопки.Количество() > 6 Цикл
			ДействияКнопки.Удалить(0);
		КонецЦикла;
		
		ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
		
		Если ВидДня = ВидДняРабочий Тогда
			
			НовоеДействие = Новый Действие("ДействияПеренестиРабочийДень");
			ДействияКнопки.Вставить(0,"ПеренестиРабочийДень", ТипКнопки, "Перенести рабочий день ...", НовоеДействие);
			КонтекстДействияКнопки.Вставить(0,"ПеренестиРабочийДень", ТипКнопки, "Перенести рабочий день ...", НовоеДействие);
			
			НовоеДействие = Новый Действие("ДействияНазначитьПраздничным");
			ДействияКнопки.Вставить(1,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
			КонтекстДействияКнопки.Вставить(1,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
			
			НовоеДействие = Новый Действие("ДействияНазначитьПредпраздничным");
			ДействияКнопки.Вставить(2,"НазначитьПредпраздничным", ТипКнопки, "Назначить этот день рабочим предпраздничным днем", НовоеДействие);
			КонтекстДействияКнопки.Вставить(2,"НазначитьПредпраздничным", ТипКнопки, "Назначить этот день рабочим предпраздничным днем", НовоеДействие);
			
		ИначеЕсли ВидДня = ВидДняПредпраздничный Тогда
			
			Если ЭтоФедеральныйПраздник(ПроизводственныйКалендарь) Тогда
				НовоеДействие = Новый Действие("ДействияПеренестиРабочийДень");
				ДействияКнопки.Вставить(0,"ПеренестиРабочийДень", ТипКнопки, "Перенести рабочий день ...", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"ПеренестиРабочийДень", ТипКнопки, "Перенести рабочий день ...", НовоеДействие);
				
				НовоеДействие = Новый Действие("ДействияНазначитьПраздничным");
				ДействияКнопки.Вставить(1,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
			    КонтекстДействияКнопки.Вставить(1,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
				
			Иначе
				НовоеДействие = Новый Действие("ДействияПеренестиРабочийДень");
				ДействияКнопки.Вставить(0,"ПеренестиРабочийДень", ТипКнопки, "Перенести рабочий день ...", НовоеДействие);
			    КонтекстДействияКнопки.Вставить(0,"ПеренестиРабочийДень", ТипКнопки, "Перенести рабочий день ...", НовоеДействие);
				
				НовоеДействие = Новый Действие("ДействияОтменитьПраздничныйДень");
				ДействияКнопки.Вставить(1,"ОтменитьПредпраздничныйДень", ТипКнопки, "Отменить предпраздничный день", НовоеДействие);
			    КонтекстДействияКнопки.Вставить(1,"ОтменитьПредпраздничныйДень", ТипКнопки, "Отменить предпраздничный день", НовоеДействие);
				
			КонецЕсли;
			
		ИначеЕсли ВидДня = ВидДняПраздник Тогда
			ЭтоФедеральныйПредПраздничныйДень = Неопределено;
			Если ЭтоФедеральныйПраздник(ПроизводственныйКалендарь, ЭтоФедеральныйПредпраздничныйДень) 
				И НЕ ЭтоФедеральныйПредПраздничныйДень Тогда
				
				Если ПраздникПеренесенНаДругойДень(ПроизводственныйКалендарь) Тогда
					
					НовоеДействие = Новый Действие("ДействияОтменитьПереносПраздника");
					ДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
			  		КонтекстДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
					
				Иначе
					Если ДеньНедели = 6 Тогда
					
						НовоеДействие = Новый Действие("ДействияПеренестиВыходнойДеньСубботу");
						ДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						КонтекстДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						
					ИначеЕсли ДеньНедели = 7 Тогда
					
						НовоеДействие = Новый Действие("ДействияПеренестиВыходнойДеньВоскресенье");
						ДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						КонтекстДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Если ПраздникПеренесенНаДругойДень(ПроизводственныйКалендарь) Тогда
					НовоеДействие = Новый Действие("ДействияОтменитьПереносПраздника");
					ДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
					КонтекстДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
					
				Иначе
					Если ДеньНедели = 6 Тогда
						
						НовоеДействие = Новый Действие("ДействияПеренестиВыходнойДеньСубботу");
						ДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						КонтекстДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						
						НовоеДействие = Новый Действие("ДействияОтменитьПраздничныйДень");
						ДействияКнопки.Вставить(1,"ОтменитьПраздничныйДень", ТипКнопки, "Отменить праздничный день", НовоеДействие);
						КонтекстДействияКнопки.Вставить(1,"ОтменитьПраздничныйДень", ТипКнопки, "Отменить праздничный день", НовоеДействие);
						
					ИначеЕсли ДеньНедели = 7 Тогда
						
						НовоеДействие = Новый Действие("ДействияПеренестиВыходнойДеньВоскресенье");
						ДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						КонтекстДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
						
						НовоеДействие = Новый Действие("ДействияОтменитьПраздничныйДень");
						ДействияКнопки.Вставить(1,"ОтменитьПраздничныйДень", ТипКнопки, "Отменить праздничный день", НовоеДействие);
						КонтекстДействияКнопки.Вставить(1,"ОтменитьПраздничныйДень", ТипКнопки, "Отменить праздничный день", НовоеДействие);
						
					Иначе
						НовоеДействие = Новый Действие("ДействияОтменитьПраздничныйДень");
						ДействияКнопки.Вставить(0,"ОтменитьПраздничныйДень", ТипКнопки, "Отменить праздничный день", НовоеДействие);
						КонтекстДействияКнопки.Вставить(0,"ОтменитьПраздничныйДень", ТипКнопки, "Отменить праздничный день", НовоеДействие);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
				
		ИначеЕсли ВидДня = ВидДняСуббота Тогда
			Если ДеньНедели = 6 Тогда
				
				НовоеДействие = Новый Действие("ДействияНазначитьПраздничным");
				ДействияКнопки.Вставить(0,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
				
				НовоеДействие = Новый Действие("ДействияПеренестиВыходнойДеньСубботу");
				ДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
				
			Иначе
				НовоеДействие = Новый Действие("ДействияОтменитьПереносПраздника");
				ДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
				
			КонецЕсли;
			
		ИначеЕсли ВидДня = ВидДняВоскресенье Тогда	
			Если ДеньНедели = 7 Тогда
				
				НовоеДействие = Новый Действие("ДействияНазначитьПраздничным");
				ДействияКнопки.Вставить(0,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"НазначитьПраздничным", ТипКнопки, "Назначить этот день региональным праздничным днем", НовоеДействие);
				
				НовоеДействие = Новый Действие("ДействияПеренестиВыходнойДеньВоскресенье");
				ДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"ПеренестиВыходнойДень", ТипКнопки, "Перенести выходной день ...", НовоеДействие);
				
			Иначе
				
				НовоеДействие = Новый Действие("ДействияОтменитьПереносПраздника");
				ДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
				КонтекстДействияКнопки.Вставить(0,"ОтменитьПереносПраздника", ТипКнопки, "Отменить перенос выходного дня", НовоеДействие);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ПЕРЕМЕННЫХ МОДУЛЯ

ЭталоннаяТаблицаРегистра = Новый ТаблицаЗначений();
ЭталоннаяТаблицаРегистра.Колонки.Добавить("ДатаКалендаря");
ЭталоннаяТаблицаРегистра.Колонки.Добавить("ВидДня");

ВидДняРабочий = Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий;
ВидДняСуббота = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота;
ВидДняВоскресенье = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье;
ВидДняПраздник = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник;
ВидДняПредпраздничный = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный;